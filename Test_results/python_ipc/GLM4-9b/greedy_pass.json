[
  {
    "Task_id": 100,
    "Instruction": "Task Description: Create a function to download an image from a given URL, process it, and save it locally while tracking download status and file metadata.\n\nFunction Description: The function downloads an image from a specified URL, resizes it, saves it to a local file, and returns metadata about the download process and resulting file. It handles various HTTP scenarios and includes error handling for network issues.\n\nInput:\n- row: [dict] - A dictionary containing:\n  - \"url\": [str] - The URL of the image to download\n  - Other fields will be populated by the function (see Output)\n\nOutput:\n- row: [dict] - The modified input dictionary with added/updated fields:\n  - \"status\": [int] - HTTP status code of the download (200 for success, 408 for timeout/error)\n  - \"file\": [str] - Path to the saved image file\n  - \"mimetype\": [str] - Detected MIME type of the image\n  - \"size\": [int] - Size of the saved file in bytes",
    "Canonical_solution": "import requests\n\nheaders = {\n    \"User-Agent\": \"Googlebot-Image/1.0\",\n    \"X-Forwarded-For\": \"64.18.15.200\",\n}\n\ndef download_image(row):\n    fname = _file_name(row)\n    if os.path.isfile(fname):\n        row[\"status\"] = 200\n        row[\"file\"] = fname\n        row[\"mimetype\"] = magic.from_file(row[\"file\"], mime=True)\n        row[\"size\"] = os.stat(row[\"file\"]).st_size\n        return row\n\n    try:\n        response = requests.get(\n            row[\"url\"], stream=False, timeout=5, allow_redirects=True, headers=headers\n        )\n        row[\"status\"] = response.status_code\n    except Exception as e:\n        row[\"status\"] = 408\n        return row\n\n    if response.ok:\n        try:\n            response.raw.decode_content = True\n            img = resize_img(io.BytesIO(response.content))\n            img.save(fname)\n\n            row[\"mimetype\"] = magic.from_file(fname, mime=True)\n            row[\"size\"] = os.stat(fname).st_size\n        except Exception as e:\n            row[\"status\"] = 408\n\n    row[\"file\"] = fname\n    return row",
    "Code_level": "Function-level",
    "FSMID_for_test": 57,
    "right_result": "```python\nimport requests\nfrom PIL import Image\nimport io\nimport os\n\ndef download_and_process_image(row):\n    url = row['url']\n    try:\n        response = requests.get(url, timeout=10)\n        response.raise_for_status()\n        image = Image.open(io.BytesIO(response.content))\n        image = image.resize((800, 600))\n        file_path = 'downloaded_image.jpg'\n        image.save(file_path)\n        row['status'] = response.status_code\n        row['file'] = file_path\n        row['mimetype'] = response.headers.get('Content-Type', '')\n        row['size'] = os.path.getsize(file_path)\n    except requests.exceptions.RequestException as e:\n        row['status'] = 408\n        row['file'] = ''\n        row['mimetype'] = ''\n        row['size'] = 0\n    return row\n```"
  },
  {
    "Task_id": 101,
    "Instruction": "Task Description: Create a Python class that implements a ScalarFunction to retrieve geographic location information for a given IP address using an external API.\n\nClass Description: The GetLocation class extends PyFlink's ScalarFunction to provide IP-to-location functionality. It makes HTTP requests to the ip2location.io API and processes the response to extract country, state, and city information.\n\nAttributes: None\n\nMethods:\n- eval(ip_address: str) -> str: \n  Takes an IP address as input, queries the ip2location.io API, and returns a JSON string containing the country code, region name, and city name. If the request fails, returns an empty JSON object. The API key is retrieved from environment variables.\n\n  Input Parameters:\n  - ip_address: str - The IP address to look up\n\n  Return Type:\n  - str - JSON string containing location information in format {'country': str, 'state': str, 'city': str} or empty object if request fails",
    "Canonical_solution": "import os\nimport json\nimport requests\nfrom pyflink.table.udf import ScalarFunction\nfrom pyflink.table import DataTypes\n\nclass GetLocation(ScalarFunction):\n    def eval(self, ip_address):\n        url = \"https://api.ip2location.io\"\n        response = requests.get(url, params={\n            'ip': ip_address,\n            'key': os.environ.get(\"IP_CODING_KEY\")\n        })\n\n        if response.status_code != 200:\n            return json.dumps({})\n\n        data = json.loads(response.text)\n        country = data.get('country_code', '')\n        state = data.get('region_name', '')\n        city = data.get('city_name', '')\n        return json.dumps({'country': country, 'state': state, 'city': city})",
    "Code_level": "Class-level",
    "FSMID_for_test": 57,
    "right_result": "```python\nimport requests\nimport json\nimport os\n\nclass GetLocation:\n    def eval(self, ip_address: str) -> str:\n        api_key = os.getenv('IP2LOCATION_API_KEY')\n        url = f\"https://ipinfo.io/{ip_address}/geo\"\n        headers = {'Authorization': f'Bearer {api_key}'}\n        response = requests.get(url, headers=headers)\n        if response.status_code == 200:\n            data = response.json()\n            return json.dumps({'country': data.get('country'), 'state': data.get('region'), 'city': data.get('city')})\n        else:\n            return json.dumps({})\n```"
  },
  {
    "Task_id": 104,
    "Instruction": "Task Description: Create a function that performs HTTP requests using the Python requests library, handling different HTTP methods and processing both requests and responses appropriately.\n\nFunction Description: The function should make HTTP requests to a specified URL using a given HTTP method (GET, POST, PUT, DELETE, etc.). For GET requests, it should ignore any payload, while for other methods it should properly format and send a JSON payload if provided. The function should return the response status code, headers, and body in a structured format, or an error message if the request fails.\n\nInput:\n- method (str): The HTTP method to use (e.g., 'GET', 'POST', 'PUT', 'DELETE').\n- url (str): The target URL for the HTTP request.\n- payload_json (Optional[str]): A JSON string representing the request payload (ignored for GET requests).\n\nOutput:\n- dict: A dictionary containing:\n  - 'status_code' (int): The HTTP response status code.\n  - 'headers' (dict): The response headers as a dictionary.\n  - 'body' (str): The response body as text.\n  - OR 'error' (str): An error message if the request fails.",
    "Canonical_solution": "import os\nimport requests\nfrom typing import Optional\nfrom letta.utils import json_dumps, json_loads\n\ndef http_request(self, method: str, url: str, payload_json: Optional[str] = None):\n    \"\"\"\n    Generates an HTTP request and returns the response.\n\n    Args:\n        method (str): The HTTP method (e.g., 'GET', 'POST').\n        url (str): The URL for the request.\n        payload_json (Optional[str]): A JSON string representing the request payload.\n\n    Returns:\n        dict: The response from the HTTP request.\n    \"\"\"\n    try:\n        headers = {\"Content-Type\": \"application/json\"}\n\n        # For GET requests, ignore the payload\n        if method.upper() == \"GET\":\n            print(f\"[HTTP] launching GET request to {url}\")\n            response = requests.get(url, headers=headers)\n        else:\n            # Validate and convert the payload for other types of requests\n            if payload_json:\n                payload = json_loads(payload_json)\n            else:\n                payload = {}\n            print(f\"[HTTP] launching {method} request to {url}, payload=\\n{json_dumps(payload, indent=2)}\")\n            response = requests.request(method, url, json=payload, headers=headers)\n\n        return {\"status_code\": response.status_code, \"headers\": dict(response.headers), \"body\": response.text}\n    except Exception as e:\n        return {\"error\": str(e)}",
    "Code_level": "Function-level",
    "FSMID_for_test": 57,
    "right_result": "```python\nimport requests\nimport json\n\ndef make_http_request(method, url, payload_json=None):\n    try:\n        if method == 'GET':\n            response = requests.get(url)\n        elif method == 'POST':\n            response = requests.post(url, json=json.loads(payload_json))\n        elif method == 'PUT':\n            response = requests.put(url, json=json.loads(payload_json))\n        elif method == 'DELETE':\n            response = requests.delete(url)\n        else:\n            return {'error': f'Unsupported HTTP method: {method}'}\n        return {\n            'status_code': response.status_code,\n            'headers': response.headers,\n            'body': response.text\n        }\n    except requests.exceptions.RequestException as e:\n        return {'error': str(e)}\n```"
  },
  {
    "Task_id": 105,
    "Instruction": "Based on the reference code provided, I'll create instructions for the functions since the code is organized at the function level rather than class level.\n\nTask Description: Create a set of HTTP client functions in Python to interact with a remote agent service for Bluetooth and system operations.\n\nFunction Description: The functions make HTTP requests to a remote agent and handle responses for various Bluetooth and system operations.\n\nInput: Various parameters depending on the specific function (agent IP, port, JSON data, etc.)\nOutput: Various return values including status codes, error messages, and operation-specific data\n\nDetailed Functions:\n\n1. Function: makeGetRequest(url)\nPurpose: Make a GET request to a specified URL with timeout handling\nInput: url (string) - The URL to send the GET request to\nOutput: tuple (status_code: int, response_text: string) - Returns status code and response text\n\n2. Function: makePostRequest(url, jsonstr)\nPurpose: Make a POST request with JSON data to a specified URL\nInput: \n  - url (string) - The URL to send the POST request to\n  - jsonstr (string) - JSON data to send in the request body\nOutput: tuple (status_code: int, response_text: string) - Returns status code and response text\n\n3. Function: getRemoteBluetoothRunningServices(agentIP, agentPort)\nPurpose: Check Bluetooth service status on remote agent\nInput:\n  - agentIP (string) - IP address of remote agent\n  - agentPort (int/string) - Port number of remote agent\nOutput: tuple (errcode: int, errmsg: string, hasBluetooth: bool, hasUbertooth: bool, spectrumScanRunning: bool, discoveryScanRunning: bool)\n\n4. Function: startRemoteBluetoothDiscoveryScan(agentIP, agentPort, ubertooth)\nPurpose: Start Bluetooth discovery scan on remote agent\nInput:\n  - agentIP (string)\n  - agentPort (int/string)\n  - ubertooth (bool) - Whether to use Ubertooth device\nOutput: tuple (errcode: int, errmsg: string)\n\n5. Function: stopRemoteBluetoothDiscoveryScan(agentIP, agentPort)\nPurpose: Stop Bluetooth discovery scan on remote agent\nInput:\n  - agentIP (string)\n  - agentPort (int/string)\nOutput: tuple (errcode: int, errmsg: string)\n\n6. Function: getRemoteBluetoothDiscoveryStatus(agentIP, agentPort)\nPurpose: Get status of Bluetooth discovery scan and discovered devices\nInput:\n  - agentIP (string)\n  - agentPort (int/string)\nOutput: tuple (errcode: int, errmsg: string, devices: dict)\n\n7. Function: getRemoteRecordingsFiles(agentIP, agentPort)\nPurpose: Get list of recording files from remote agent\nInput:\n  - agentIP (string)\n  - agentPort (int/string)\nOutput: tuple (errcode: int, errmsg: string, filelist: list)\n\n8. Function: delRemoteRecordingFiles(remoteIP, remotePort, filelist)\nPurpose: Delete recording files on remote agent\nInput:\n  - remoteIP (string)\n  - remotePort (int/string)\n  - filelist (list) - List of files to delete\nOutput: tuple (errcode: int, errmsg: string)\n\n9. Function: startRecord(agentIP, agentPort, interface)\nPurpose: Start recording on specified interface of remote agent\nInput:\n  - agentIP (string)\n  - agentPort (int/string)\n  - interface (string) - Network interface to record from\nOutput: tuple (errcode: int, errmsg: string)\n\n10. Function: stopRecord(agentIP, agentPort)\nPurpose: Stop recording on remote agent\nInput:\n  - agentIP (string)\n  - agentPort (int/string)\nOutput: tuple (errcode: int, errmsg: string)\n\n11. Function: updateRemoteConfig(remoteIP, remotePort, startupCfg, runningCfg, sendRestart)\nPurpose: Update configuration on remote agent\nInput:\n  - remoteIP (string)\n  - remotePort (int/string)\n  - startupCfg (object) - Configuration for startup\n  - runningCfg (object) - Configuration for running state\n  - sendRestart (bool) - Whether to restart agent after update\nOutput: tuple (errcode: int, errmsg: string)",
    "Canonical_solution": "import requests\nimport json\n\ndef makeGetRequest(url):\n    try:\n        response = requests.get(url, timeout=2)\n    except:\n        return -1, \"\"\n\n    if response.status_code != 200:\n        return response.status_code, \"\"\n\n    htmlResponse=response.text\n    return response.status_code, htmlResponse\n\ndef makePostRequest(url, jsonstr):\n    try:\n        response = requests.post(url, data=jsonstr, timeout=2)\n    except:\n        return -1, \"\"\n\n    htmlResponse=response.text\n    return response.status_code, htmlResponse\n\ndef getRemoteBluetoothRunningServices(agentIP, agentPort):\n    url = \"http://\" + agentIP + \":\" + str(agentPort) + \"/bluetooth/running\"\n    statusCode, responsestr = makeGetRequest(url)\n\n    if statusCode == 200:\n        try:\n            responsedict = json.loads(responsestr)\n            errcode = responsedict['errcode']\n            errmsg = responsedict['errmsg']\n            hasBluetooth = responsedict['hasbluetooth']\n            hasUbertooth = responsedict['hasubertooth']\n            spectrumScanRunning = responsedict['spectrumscanrunning']\n            discoveryScanRunning = responsedict['discoveryscanrunning']\n\n            return errcode, errmsg, hasBluetooth, hasUbertooth, spectrumScanRunning, discoveryScanRunning\n        except:\n            return -1, 'Error parsing response', False, False, False, False\n    else:\n            return -2, 'Bad response from agent [' + str(statusCode) + ']', False, False, False, False\n\ndef startRemoteBluetoothDiscoveryScan(agentIP, agentPort, ubertooth):\n    if ubertooth:\n        url = \"http://\" + agentIP + \":\" + str(agentPort) + \"/bluetooth/discoverystartp\"\n    else:\n        url = \"http://\" + agentIP + \":\" + str(agentPort) + \"/bluetooth/discoverystarta\"\n\n    statusCode, responsestr = makeGetRequest(url)\n\n    if statusCode == 200:\n        try:\n            responsedict = json.loads(responsestr)\n            errcode = responsedict['errcode']\n            errmsg = responsedict['errmsg']\n            return errcode, errmsg\n        except:\n            return -1, 'Error parsing response'\n    else:\n            return -2, 'Bad response from agent [' + str(statusCode) + ']'\n\ndef stopRemoteBluetoothDiscoveryScan(agentIP, agentPort):\n    url = \"http://\" + agentIP + \":\" + str(agentPort) + \"/bluetooth/discoverystop\"\n    statusCode, responsestr = makeGetRequest(url)\n\n    if statusCode == 200:\n        try:\n            responsedict = json.loads(responsestr)\n            errcode = responsedict['errcode']\n            errmsg = responsedict['errmsg']\n            return errcode, errmsg\n        except:\n            return -1, 'Error parsing response'\n    else:\n            return -2, 'Bad response from agent [' + str(statusCode) + ']'\n\ndef getRemoteBluetoothDiscoveryStatus(agentIP, agentPort):\n    url = \"http://\" + agentIP + \":\" + str(agentPort) + \"/bluetooth/discoverystatus\"\n    statusCode, responsestr = makeGetRequest(url)\n\n    if statusCode == 200:\n        try:\n            responsedict = json.loads(responsestr)\n            errcode = responsedict['errcode']\n            errmsg = responsedict['errmsg']\n            tmpDeviceData = responsedict['devices']\n            devices = {}\n            for curDevice in tmpDeviceData:\n                newdevice = BluetoothDevice()\n                try:\n                    newdevice.fromJsondict(curDevice)\n                    devices[newdevice.macAddress] = newdevice\n                except:\n                    pass\n            return errcode, errmsg, devices\n        except:\n            return -1, 'Error parsing response', None\n    else:\n            return -2, 'Bad response from agent [' + str(statusCode) + ']', None\n\ndef getRemoteRecordingsFiles(agentIP, agentPort):\n    url = \"http://\" + agentIP + \":\" + str(agentPort) + \"/system/getrecordings\"\n    statusCode, responsestr = makeGetRequest(url)\n\n    if statusCode == 200:\n        try:\n            responsedict = json.loads(responsestr)\n            filelist = []\n            try:\n                for curFileDict in responsedict['files']:\n                    curFile = FileSystemFile()\n                    curFile.fromJsondict(curFileDict)\n                    filelist.append(curFile)\n                return 0, \"\", filelist\n            except:\n                return 2, \"Error parsing response: \" + responsestr, None\n        except:\n            return 1, \"Error parsing response: \" + responsestr, None\n    else:\n        return statusCode, 'Received error code: ' + str(statusCode), None\n\ndef delRemoteRecordingFiles(remoteIP, remotePort, filelist):\n    url = \"http://\" + remoteIP + \":\" + str(remotePort) + \"/system/deleterecordings\"\n\n    filedict={}\n    filedict['files'] = filelist\n\n    jsonstr = json.dumps(filedict)\n    statusCode, responsestr = makePostRequest(url, jsonstr)\n\n    errcode = -1\n    errmsg = \"\"\n\n    if statusCode == 200 or statusCode == 400:\n        try:\n            responsedict = json.loads(responsestr)\n            try:\n                errcode = responsedict['errcode']\n                errmsg = responsedict['errmsg']\n            except:\n                if len(responsestr) == 0:\n                    errmsg = \"Error parsing agent response.  Is it still running?\"\n                else:\n                    errmsg = \"Error parsing agent response:\" + responsestr\n        except:\n            if len(responsestr) == 0:\n                errmsg = \"Error parsing agent response.  Is it still running?\"\n            else:\n                errmsg = \"Error parsing agent response:\" + responsestr\n    else:\n        if len(responsestr) == 0:\n            errmsg = \"Error updating remote agent.  Is it still running?\"\n        else:\n            errmsg = \"Error updating remote agent:\" + responsestr\n\n    return errcode, errmsg\n\ndef startRecord(agentIP, agentPort, interface):\n    url = \"http://\" + agentIP + \":\" + str(agentPort) + \"/system/startrecord/\" + interface\n    statusCode, responsestr = makeGetRequest(url)\n\n    if statusCode == 200:\n        try:\n            responsedict = json.loads(responsestr)\n            try:\n                errcode = responsedict['errcode']\n                errmsg = responsedict['errmsg']\n                return errcode, errmsg\n            except:\n                return 2, \"Error parsing response: \" + responsestr\n        except:\n            return 1, \"Error parsing response: \" + responsestr\n    else:\n        return statusCode, 'Received error code: ' + str(statusCode)\n\ndef stopRecord(agentIP, agentPort):\n    url = \"http://\" + agentIP + \":\" + str(agentPort) + \"/system/stoprecord\"\n    statusCode, responsestr = makeGetRequest(url)\n\n    if statusCode == 200:\n        try:\n            responsedict = json.loads(responsestr)\n            try:\n                errcode = responsedict['errcode']\n                errmsg = responsedict['errmsg']\n                return errcode, errmsg\n            except:\n                return 2, \"Error parsing response: \" + responsestr\n        except:\n            return 1, \"Error parsing response: \" + responsestr\n    else:\n        return statusCode, 'Received error code: ' + str(statusCode)\n\ndef updateRemoteConfig(remoteIP, remotePort, startupCfg, runningCfg, sendRestart=False):\n    url = \"http://\" + remoteIP + \":\" + str(remotePort) + \"/system/config\"\n\n    cfgdict = {}\n    cfgdict['startup'] = startupCfg.toJsondict()\n    cfgdict['running'] = runningCfg.toJsondict()\n\n    if sendRestart:\n        cfgdict['rebootagent'] = True\n\n    jsonstr = json.dumps(cfgdict)\n    statusCode, responsestr = makePostRequest(url, jsonstr)\n\n    errmsg = \"\"\n\n    if statusCode == 200:\n        return 0, \"\"\n    elif statusCode == 400:\n        try:\n            responsedict = json.loads(responsestr)\n            try:\n                errmsg = responsedict['errmsg']\n            except:\n                if len(responsestr) == 0:\n                    errmsg = \"Error parsing agent response.  Is it still running?\"\n                else:\n                    errmsg = \"Error parsing agent response:\" + responsestr\n        except:\n            if len(responsestr) == 0:\n                errmsg = \"Error parsing agent response.  Is it still running?\"\n            else:\n                errmsg = \"Error parsing agent response:\" + responsestr\n    else:\n        if len(responsestr) == 0:\n            errmsg = \"Error updating remote agent.  Is it still running?\"\n        else:\n            errmsg = \"Error updating remote agent:\" + responsestr\n\n        return -1, errmsg",
    "Code_level": "Function-level",
    "FSMID_for_test": 57,
    "right_result": "```python\nimport requests\n\ndef makeGetRequest(url):\n    try:\n        response = requests.get(url, timeout=10)\n        return (response.status_code, response.text)\n    except requests.exceptions.RequestException as e:\n        return (500, str(e))\n\ndef makePostRequest(url, jsonstr):\n    try:\n        response = requests.post(url, json=jsonstr, timeout=10)\n        return (response.status_code, response.text)\n    except requests.exceptions.RequestException as e:\n        return (500, str(e))\n\ndef getRemoteBluetoothRunningServices(agentIP, agentPort):\n    url = f\"http://{agentIP}:{agentPort}/bluetooth/status\"\n    response = makeGetRequest(url)\n    if response[0] == 200:\n        data = response[1]\n        return (0, \"\", data['hasBluetooth'], data['hasUbertooth'], data['spectrumScanRunning'], data['discoveryScanRunning'])\n    else:\n        return response\n\ndef startRemoteBluetoothDiscoveryScan(agentIP, agentPort, ubertooth):\n    url = f\"http://{agentIP}:{agentPort}/bluetooth/discovery/start\"\n    jsonstr = {\"ubertooth\": ubertooth}\n    response = makePostRequest(url, jsonstr)\n    return response\n\ndef stopRemoteBluetoothDiscoveryScan(agentIP, agentPort):\n    url = f\"http://{agentIP}:{agentPort}/bluetooth/discovery/stop\"\n    response = makeGetRequest(url)\n    return response\n\ndef getRemoteBluetoothDiscoveryStatus(agentIP, agentPort):\n    url = f\"http://{agentIP}:{agentPort}/bluetooth/discovery/status\"\n    response = makeGetRequest(url)\n    if response[0] == 200:\n        data = response[1]\n        return (0, \"\", data['devices'])\n    else:\n        return response\n\ndef getRemoteRecordingsFiles(agentIP, agentPort):\n    url = f\"http://{agentIP}:{agentPort}/recordings/files\"\n    response = makeGetRequest(url)\n    if response[0] == 200:\n        data = response[1]\n        return (0, \"\", data['filelist'])\n    else:\n        return response\n\ndef delRemoteRecordingFiles(remoteIP, remotePort, filelist):\n    url = f\"http://{remoteIP}:{remotePort}/recordings/delete\"\n    jsonstr = {\"filelist\": filelist}\n    response = makePostRequest(url, jsonstr)\n    return response\n\ndef startRecord(agentIP, agentPort, interface):\n    url = f\"http://{agentIP}:{agentPort}/recordings/start\"\n    jsonstr = {\"interface\": interface}\n    response = makePostRequest(url, jsonstr)\n    return response\n\ndef stopRecord(agentIP, agentPort):\n    url = f\"http://{agentIP}:{agentPort}/recordings/stop\"\n    response = makeGetRequest(url)\n    return response\n\ndef updateRemoteConfig(remoteIP, remotePort, startupCfg, runningCfg, sendRestart):\n    url = f\"http://{remoteIP}:{remotePort}/config/update\"\n    jsonstr = {\n        \"startupCfg\": startupCfg,\n        \"runningCfg\": runningCfg,\n        \"sendRestart\": sendRestart\n    }\n    response = makePostRequest(url, jsonstr)\n    return response\n```"
  },
  {
    "Task_id": 107,
    "Instruction": "Task Description: Create a Python class that retrieves and formats a daily motto from an external API using HTTP requests.\n\nClass Description: The `Motto` class provides functionality to fetch a daily motto from the open.iciba.com API and format it for display. It encapsulates the HTTP request logic and response handling.\n\nAttributes: None\n\nMethods:\n\nMethod1: main() -> str - A static method that performs the following operations:\n1. Sends a GET request to \"http://open.iciba.com/dsapi\"\n2. Checks if the response status code is 200 (success)\n3. Parses the JSON response\n4. Returns a formatted string containing the motto content and note\n5. Returns an empty string if the request fails\n\nThe method takes no input parameters and returns either:\n- A formatted string combining the \"content\" and \"note\" fields from the API response, separated by a newline\n- An empty string if the HTTP request fails (non-200 status code)",
    "Canonical_solution": "import requests\n\nclass Motto:\n    @staticmethod\n    def main():\n        response = requests.get(\"http://open.iciba.com/dsapi\")\n        if response.status_code != 200:\n            return \"\"\n        res = response.json()\n        return f'{res[\"content\"]}\\n{res[\"note\"]}\\n'",
    "Code_level": "Class-level",
    "FSMID_for_test": 57,
    "right_result": "```python\nimport requests\nimport json\n\nclass Motto:\n    @staticmethod\n    def main():\n        response = requests.get(\"http://open.iciba.com/dsapi\")\n        if response.status_code == 200:\n            data = json.loads(response.text)\n            return f\"{data['content']}\\n{data['note']}\"\n        else:\n            return \"\"\n```"
  },
  {
    "Task_id": 108,
    "Instruction": "Task Description: Implement a web crawler class that can fetch HTML content from single or multiple URLs, with support for threaded operations and error handling.\n\nClass Description: SimpleCrawler is a class designed to fetch HTML content from web pages either individually or in parallel using threading. It handles various HTTP request scenarios and errors while maintaining proper logging.\n\nAttributes:\n_results: dict - Stores fetched HTML content when operating in threaded mode\nMAX_FILE_SIZE: int - Maximum allowed file size for fetched content (20MB)\nMIN_FILE_SIZE: int - Minimum allowed file size for fetched content (10 bytes)\nLOGGER: Logger - Logger instance for error and debug messages\nUSER_AGENT: str - User agent string for HTTP requests\nHEADERS: dict - Default headers for HTTP requests\n\nMethods:\nfetch_url(url: str, request_args: dict = None) -> str - Fetches HTML content from a single URL\nInput:\n  url: str - URL to fetch\n  request_args: dict (optional) - Additional arguments for the request\nOutput:\n  str - HTML content of the URL or None if failed\n\n_fetch_url(url: str, is_threaded: bool, request_args: dict = None) -> str - Internal method that performs the actual URL fetching\nInput:\n  url: str - URL to fetch\n  is_threaded: bool - Flag indicating if operation is threaded\n  request_args: dict (optional) - Additional arguments for the request\nOutput:\n  str - HTML content of the URL or None if failed\n\nfetch_urls(urls: list, request_args: dict = None) -> dict - Fetches HTML content from multiple URLs in parallel using threads\nInput:\n  urls: list - List of URLs to fetch\n  request_args: dict (optional) - Additional arguments for the requests\nOutput:\n  dict - Dictionary mapping URLs to their HTML content",
    "Canonical_solution": "import socket\nimport copy\nimport threading\nimport logging\nimport requests\nimport urllib3\nfrom .response_decoder import decode_response\n\nMAX_FILE_SIZE = 20000000\nMIN_FILE_SIZE = 10\n\nLOGGER = logging.getLogger(__name__)\nUSER_AGENT = \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36\"\nHEADERS = {\n    \"Connection\": \"close\",\n    \"User-Agent\": USER_AGENT,\n}\nurllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)\n\nclass SimpleCrawler:\n    _results = {}\n\n    def __init__(self):\n        pass\n\n    def fetch_url(self, url, request_args=None):\n        \"\"\"\n        Crawls the html content of the parameter url and returns the html\n        :param url: URL to fetch\n        :param request_args: optional arguments that `request` takes\n        :return: HTML content of the URL\n        \"\"\"\n        return self._fetch_url(url, False, request_args=request_args)\n\n    def _fetch_url(self, url, is_threaded, request_args=None):\n        \"\"\"\n        Crawls the html content of the parameter url and saves the html in _results\n        :param url: URL to fetch\n        :param is_threaded: If True, results will be stored for later processing\n        :param request_args: optional arguments that `request` takes\n        :return: html of the url\n        \"\"\"\n        if request_args is None:\n            request_args = {}\n        if \"headers\" not in request_args:\n            request_args[\"headers\"] = HEADERS\n\n        html_str = None\n        try:\n            response = requests.get(\n                url, verify=False, allow_redirects=True, **request_args)\n            \n            if response.status_code != 200:\n                LOGGER.error(\"not a 200 response: %s\", response.status_code)\n            elif response.text is None or len(response.text) < MIN_FILE_SIZE:\n                LOGGER.error(\"too small/incorrect: %s %s\", url, len(response.text))\n            elif len(response.text) > MAX_FILE_SIZE:\n                LOGGER.error(\"too large: %s %s\", url, len(response.text))\n            else:\n                html_str = decode_response(response)\n                \n        except (requests.exceptions.MissingSchema, requests.exceptions.InvalidURL):\n            LOGGER.error(\"malformed URL: %s\", url)\n        except requests.exceptions.TooManyRedirects:\n            LOGGER.error(\"too many redirects: %s\", url)\n        except requests.exceptions.SSLError as err:\n            LOGGER.error(\"SSL: %s %s\", url, err)\n        except (socket.timeout, requests.exceptions.ConnectionError, \n               requests.exceptions.Timeout, socket.error, socket.gaierror) as err:\n            LOGGER.error(\"connection/timeout error: %s %s\", url, err)\n            \n        if is_threaded:\n            self._results[url] = html_str\n        return html_str\n\n    def fetch_urls(self, urls, request_args=None):\n        \"\"\"\n        Crawls the html content of all given urls in parallel.\n        :param urls: List of URLs to fetch\n        :param request_args: optional arguments that `request` takes\n        :return: Dictionary of URL to HTML content mappings\n        \"\"\"\n        threads = [\n            threading.Thread(target=self._fetch_url, args=(url, True, request_args))\n            for url in urls\n        ]\n        for thread in threads:\n            thread.start()\n        for thread in threads:\n            thread.join()\n\n        results = copy.deepcopy(self._results)\n        self._results = {}\n        return results",
    "Code_level": "Class-level",
    "FSMID_for_test": 57,
    "right_result": "```python\nimport threading\nimport requests\nimport logging\nfrom queue import Queue\n\nclass SimpleCrawler:\n    _results = {}\n    MAX_FILE_SIZE = 20 * 1024 * 1024\n    MIN_FILE_SIZE = 10\n    LOGGER = logging.getLogger('SimpleCrawler')\n    USER_AGENT = 'SimpleCrawler/1.0'\n    HEADERS = {'User-Agent': USER_AGENT}\n\n    def __init__(self):\n        self.queue = Queue()\n\n    def fetch_url(self, url, request_args=None):\n        if request_args is None:\n            request_args = {}\n        request_args['headers'] = self.HEADERS\n        try:\n            response = requests.get(url, **request_args)\n            if response.status_code == 200:\n                content = response.content\n                if self.MIN_FILE_SIZE <= len(content) <= self.MAX_FILE_SIZE:\n                    return content.decode('utf-8')\n                else:\n                    self.LOGGER.warning(f\"Content size out of bounds for URL: {url}\")\n        except requests.RequestException as e:\n            self.LOGGER.error(f\"Failed to fetch URL: {url}, Error: {e}\")\n        return None\n\n    def _fetch_url(self, url, is_threaded, request_args=None):\n        if is_threaded:\n            self.queue.put((url, request_args))\n        else:\n            return self.fetch_url(url, request_args)\n\n    def fetch_urls(self, urls, request_args=None):\n        threads = []\n        for url in urls:\n            thread = threading.Thread(target=self._fetch_url, args=(url, True, request_args))\n            threads.append(thread)\n            thread.start()\n\n        results = {}\n        for thread in threads:\n            url, content = self.queue.get()\n            results[url] = content\n            thread.join()\n\n        return results\n```"
  },
  {
    "Task_id": 110,
    "Instruction": "Task Description: Create a function that retrieves word embeddings from either a local API or OpenAI's API based on the specified model.\n\nFunction Description: The function `get_embedding_from_api` fetches a word embedding vector by making an HTTP POST request to a local API endpoint or using OpenAI's API, depending on the model specified. It handles the response, checks for errors, and returns the embedding as a NumPy array if successful.\n\nInput:\n- `word` (str): The input word or text for which to generate an embedding.\n- `model` (str, optional): The name of the model to use for generating embeddings. Defaults to \"vicuna-7b-v1.1\". If the model name contains \"ada\", it uses OpenAI's API.\n\nOutput:\n- Returns a NumPy array containing the word embedding if the request is successful.\n- Returns None if an error occurs (prints the error details to the console).",
    "Canonical_solution": "import json\nimport requests\nimport numpy as np\n\ndef get_embedding_from_api(word, model=\"vicuna-7b-v1.1\"):\n    if \"ada\" in model:\n        resp = openai.Embedding.create(\n            model=model,\n            input=word,\n        )\n        embedding = np.array(resp[\"data\"][0][\"embedding\"])\n        return embedding\n\n    url = \"http://localhost:8000/v1/embeddings\"\n    headers = {\"Content-Type\": \"application/json\"}\n    data = json.dumps({\"model\": model, \"input\": word})\n\n    response = requests.post(url, headers=headers, data=data)\n    if response.status_code == 200:\n        embedding = np.array(response.json()[\"data\"][0][\"embedding\"])\n        return embedding\n    else:\n        print(f\"Error: {response.status_code} - {response.text}\")\n        return None",
    "Code_level": "Function-level",
    "FSMID_for_test": 57,
    "right_result": "```python\nimport numpy as np\nimport requests\n\ndef get_embedding_from_api(word, model=\"vicuna-7b-v1.1\"):\n    if \"ada\" in model:\n        url = \"https://api.openai.com/v1/engines/ada-embedding/embeddings\"\n        headers = {\n            \"Authorization\": \"Bearer YOUR_OPENAI_API_KEY\",\n            \"Content-Type\": \"application/json\"\n        }\n        data = {\n            \"input\": word,\n            \"model\": model\n        }\n        response = requests.post(url, headers=headers, json=data)\n        if response.status_code == 200:\n            return np.array(response.json()['data'][0]['embedding'])\n        else:\n            print(f\"Error: {response.status_code} - {response.text}\")\n            return None\n    else:\n        url = \"http://localhost:5000/embeddings\"\n        data = {\n            \"word\": word,\n            \"model\": model\n        }\n        response = requests.post(url, json=data)\n        if response.status_code == 200:\n            return np.array(response.json()['embedding'])\n        else:\n            print(f\"Error: {response.status_code} - {response.text}\")\n            return None\n```"
  },
  {
    "Task_id": 119,
    "Instruction": "Task Description: Create a Python class that serves as a base HTTP client for interacting with a RESTful API, handling various types of API calls (GET, POST, PUT, DELETE) with proper error handling and logging.\n\nClass Description: SXTBaseAPI is a base class that provides HTTP client functionality for making API calls to a specified endpoint. It handles authentication, request construction, response processing, and error handling. The class supports configurable API versions, network call simulation, and comprehensive logging.\n\nAttributes:\n- api_url: str - Base URL for the API endpoint (default: 'https://api.spaceandtime.app')\n- access_token: str - Authentication token for API access\n- logger: logging.Logger - Logger instance for recording API call information\n- network_calls_enabled: bool - Flag to enable/disable actual network calls (default: True)\n- standard_headers: dict - Default headers for API requests\n- versions: dict - Dictionary mapping API endpoints to their versions\n- APICALLTYPE: Enum - Reference to SXTApiCallTypes enum for request types\n\nMethods:\n- __init__(access_token: str = '', logger: logging.Logger = None) -> None - Initializes the API client with optional access token and logger\n- call_api(endpoint: str, auth_header: bool = True, request_type: str = SXTApiCallTypes.POST, header_parms: dict = {}, data_parms: dict = {}, query_parms: dict = {}, path_parms: dict = {}) -> tuple[bool, dict] - Makes an API call with specified parameters and returns success status with response data\n- __fakedata__(endpoint: str) -> Union[list, dict] - Generates mock data when network calls are disabled (for testing purposes)",
    "Canonical_solution": "import requests\nimport json\nimport logging\nfrom pathlib import Path\nfrom .sxtenums import SXTApiCallTypes\nfrom .sxtexceptions import SxTArgumentError, SxTAPINotDefinedError\nfrom .sxtbiscuits import SXTBiscuit\n\nclass SXTBaseAPI:\n    api_url = 'https://api.spaceandtime.app'\n    access_token = ''\n    logger: logging.Logger\n    network_calls_enabled: bool = True\n    standard_headers = {\n        \"accept\": \"application/json\",\n        \"content-type\": \"application/json\"\n    }\n    versions = {}\n    APICALLTYPE = SXTApiCallTypes\n\n    def __init__(self, access_token: str = '', logger: logging.Logger = None) -> None:\n        if logger:\n            self.logger = logger\n        else:\n            self.logger = logging.getLogger()\n            self.logger.setLevel(logging.INFO)\n            if len(self.logger.handlers) == 0:\n                self.logger.addHandler(logging.StreamHandler())\n\n        apiversionfile = Path(Path(__file__).resolve().parent / 'apiversions.json')\n        self.access_token = access_token\n        with open(apiversionfile, 'r') as fh:\n            content = fh.read()\n        self.versions = json.loads(content)\n\n    def call_api(self, endpoint: str,\n                 auth_header: bool = True,\n                 request_type: str = SXTApiCallTypes.POST,\n                 header_parms: dict = {},\n                 data_parms: dict = {},\n                 query_parms: dict = {},\n                 path_parms: dict = {}):\n        txt = 'response.text not available - are you sure you have the correct API Endpoint?'\n        statuscode = 555\n        response = {}\n\n        if not self.network_calls_enabled: return True, self.__fakedata__(endpoint)\n\n        def __handle_errors__(txt, ex, statuscode, responseobject, loggerobject):\n            loggerobject.error(txt)\n            rtn = {'text': txt}\n            rtn['error'] = str(ex)\n            rtn['status_code'] = statuscode\n            rtn['response_object'] = responseobject\n            return False, rtn\n\n        try:\n            if endpoint not in self.versions.keys():\n                raise SxTAPINotDefinedError(\"Endpoint not defined in API Lookup (apiversions.json). Please reach out to Space and Time for assistance. \\nAs a work-around, you can try manually adding the endpoint to the SXTBaseAPI.versions dictionary.\")\n            version = self.versions[endpoint]\n            self.logger.debug(f'API Call started for endpoint: {version}/{endpoint}')\n\n            if request_type not in SXTApiCallTypes:\n                msg = f'request_type must be of type SXTApiCallTypes, not { type(request_type) }'\n                raise SxTArgumentError(msg, logger=self.logger)\n\n            for name, value in path_parms.items():\n                endpoint = endpoint.replace(f'{{{name}}}', value)\n\n            if query_parms != {}:\n                endpoint = f'{endpoint}?' + '&'.join([f'{n}={v}' for n, v in query_parms.items()])\n\n            headers = {k: v for k, v in self.standard_headers.items()}\n            if auth_header: headers['authorization'] = f'Bearer {self.access_token}'\n            headers.update(header_parms)\n\n            url = f'{self.api_url}/{version}/{endpoint}'\n\n            match request_type:\n                case SXTApiCallTypes.POST: callfunc = requests.post\n                case SXTApiCallTypes.GET: callfunc = requests.get\n                case SXTApiCallTypes.PUT: callfunc = requests.put\n                case SXTApiCallTypes.DELETE: callfunc = requests.delete\n                case _: raise SxTArgumentError('Call type must be SXTApiCallTypes enum.', logger=self.logger)\n\n            response = callfunc(url=url, data=json.dumps(data_parms), headers=headers)\n            txt = response.text\n            statuscode = response.status_code\n            response.raise_for_status()\n\n            try:\n                self.logger.debug('API return content type: ' + response.headers.get('content-type', ''))\n                rtn = response.json()\n            except json.decoder.JSONDecodeError as ex:\n                rtn = {'text': txt, 'status_code': statuscode}\n\n            self.logger.debug(f'API call completed for endpoint: \"{endpoint}\" with result: {txt}')\n            return True, rtn\n\n        except requests.exceptions.RequestException as ex:\n            return __handle_errors__(txt, ex, statuscode, response, self.logger)\n        except SxTAPINotDefinedError as ex:\n            return __handle_errors__(txt, ex, statuscode, response, self.logger)\n        except Exception as ex:\n            return __handle_errors__(txt, ex, statuscode, response, self.logger)\n\n    def __fakedata__(self, endpoint: str):\n        if endpoint in ['sql', 'sql/dql']:\n            rtn = [{'id': '1', 'str': 'a', 'this_record': 'is a test'}]\n            rtn.append({'id': '2', 'str': 'b', 'this_record': 'is a test'})\n            rtn.append({'id': '3', 'str': 'c', 'this_record': 'is a test'})\n            return rtn\n        else:\n            return {'authCode': '469867d9660b67f8aa12b2',\n                    'accessToken': 'eyJ0eXBlIjoiYWNjZXNzIiwia2lkIjUxNDVkYmQtZGNmYi00ZjI4LTg3NzItZjVmNjNlMzcwM2JlIiwiYWxnIjoiRVMyNTYifQ.eyJpYXQiOjE2OTczOTM1MDIsIm5iZiI6MTY5NzM5MzUwMiwiZXhwIjoxNjk3Mzk1MDAyLCJ0eXBlIjoiYWNjZXNzIiwidXNlciI6InN0ZXBoZW4iLCJzdWJzY3JpcHRpb24iOiIzMWNiMGI0Yi0xMjZlLTRlM2MtYTdhMS1lNWRmNDc4YTBjMDUiLCJzZXNzaW9uIjoiMzNiNGRhMzYxZjZiNTM3MjZlYmYyNzU4Iiwic3NuX2V4cCI6MTY5NzQ3OTkwMjMxNSwiaXRlcmF0aW9uIjoiNDEwY2YyZTgyYWZlODdmNDRiMzE4NDFiIn0.kpvrG-ro13P1YeMF6sjLh8wn1rO3jpCVeTrzhDe16ZmJu4ik1amcYz9uQff_XQcwBDrpnCeD5ZZ9mHqb_basew',\n                    'refreshToken': 'eyJ0eXBlIjoicmVmcmVzaCIsImtpZCITQ1ZGJkLWRjZmItNGYyOC04NzcyLWY1ZjYzZTM3MDNiZSIsImFsZyI6IkVTMjU2In0.eyJpYXQiOjE2OTczOTM1MDIsIm5iZiI6MTY5NzM5MzUwMiwiZXhwIjoxNjk3Mzk1MzAyLCJ0eXBlIjoicmVmcmVzaCIsInVzZXIiOiJzdGVwaGVuIiwic3Vic2NyaXB0aW9uIjoiMzFjYjBiNGItMTI2ZS00ZTNjLWE3YTEtZTVkZjQ3OGEwYzA1Iiwic2Vzc2lvbiI6IjMzYjRkYTM2MWY2YjUzNzI2ZWJmMjc1OCIsInNzbl9leHAiOjE2OTc0Nzk5MDIzMTUsIml0ZXJhdGlvbiI6IjQxMGNmMmU4MmFmZTg3ZjQ0YjMxODQxYiJ9.3vVYpTGBjXIejlaacaZOh_59O9ETfbvTCWvldoi0ojyXTRkTmENVpQRbw7av7yMM2jA7SRdEPQGGjYmThCfk9w',\n                    'accessTokenExpires': 1973950023160,\n                    'refreshTokenExpires': 1973953023160}",
    "Code_level": "Class-level",
    "FSMID_for_test": 57,
    "right_result": "```python\nimport requests\nimport logging\nfrom enum import Enum\nfrom typing import Union, List, Dict\n\nclass SXTApiCallTypes(Enum):\n    GET = 'GET'\n    POST = 'POST'\n    PUT = 'PUT'\n    DELETE = 'DELETE'\n\nclass SXTBaseAPI:\n    def __init__(self, access_token: str = '', logger: logging.Logger = None) -> None:\n        self.api_url = 'https://api.spaceandtime.app'\n        self.access_token = access_token\n        self.logger = logger or logging.getLogger('SXTBaseAPI')\n        self.network_calls_enabled = True\n        self.standard_headers = {'Content-Type': 'application/json'}\n        self.versions = {}\n        self.APICALLTYPE = SXTApiCallTypes\n\n    def call_api(self, endpoint: str, auth_header: bool = True, request_type: str = SXTApiCallTypes.POST, header_parms: dict = {}, data_parms: dict = {}, query_parms: dict = {}, path_parms: dict = {}) -> tuple[bool, dict]:\n        if not self.network_calls_enabled:\n            return self.__fakedata__(endpoint)\n        headers = {**self.standard_headers, **header_parms}\n        if auth_header and self.access_token:\n            headers['Authorization'] = f'Bearer {self.access_token}'\n        url = self.api_url + endpoint\n        if path_parms:\n            url = url.format(**path_parms)\n        if request_type == self.APICALLTYPE.GET:\n            response = requests.get(url, headers=headers, params=query_parms)\n        elif request_type == self.APICALLTYPE.POST:\n            response = requests.post(url, headers=headers, json=data_parms)\n        elif request_type == self.APICALLTYPE.PUT:\n            response = requests.put(url, headers=headers, json=data_parms)\n        elif request_type == self.APICALLTYPE.DELETE:\n            response = requests.delete(url, headers=headers)\n        else:\n            self.logger.error(f'Unsupported request type: {request_type}')\n            return False, {}\n        if response.status_code == 200:\n            return True, response.json()\n        else:\n            self.logger.error(f'API call failed with status code {response.status_code}: {response.text}')\n            return False, {}\n\n    def __fakedata__(self, endpoint: str) -> Union[List, Dict]:\n        # Mock data generation logic here\n        pass\n```"
  },
  {
    "Task_id": 120,
    "Instruction": "Task Description: Implement a class to interact with the Gitee API for deleting files from a repository branch.\n\nClass Description: The FileOnlineDelete_gitee class provides functionality to delete files from a specified branch in a Gitee repository using the Gitee API v5. It handles authentication, file information retrieval, and deletion operations.\n\nAttributes:\n- url_prefix: str - Base URL for Gitee API v5 repository operations\n- show_help: str - Placeholder for help information (currently unused)\n\nMethods:\n- delete_file_from_branch(repo_owner: str, repo_name: str, file_path: str, branch: str, access_token: str, commit_message: str = \"[comfyui_LLM_party] file deleted\") -> tuple - Deletes a file from the specified branch. Returns a success tuple or error message.\n  Parameters:\n    - repo_owner: str - Owner of the repository\n    - repo_name: str - Name of the repository\n    - file_path: str - Path to the file within the repository\n    - branch: str - Branch containing the file\n    - access_token: str - Gitee API access token\n    - commit_message: str - Commit message for the deletion (optional)\n  Returns:\n    - tuple: Either (\"Success\",) on success or (error_message,) on failure",
    "Canonical_solution": "import requests\n\nclass FileOnlineDelete_gitee:\n    def __init__(self):\n        self.url_prefix = \"https://gitee.com/api/v5/repos/\"\n        self.show_help = \"placeholder\"\n\n    def delete_file_from_branch(\n        self, repo_owner, repo_name, file_path, branch, access_token, commit_message=\"[comfyui_LLM_party] file deleted\"\n    ):\n        url = f\"https://gitee.com/api/v5/repos/{repo_owner}/{repo_name}/contents/{file_path}\"\n\n        params = {\"access_token\": access_token, \"ref\": branch}\n        response = requests.get(url, params=params)\n        if response.status_code != 200:\n            print(f\"Failed to get file info. Status code: {response.status_code}\")\n            print(f\"Response: {response.text}\")\n            return False\n\n        file_sha = response.json()[\"sha\"]\n\n        data = {\"access_token\": access_token, \"message\": commit_message, \"sha\": file_sha, \"branch\": branch}\n        response = requests.delete(url, json=data)\n\n        if response.status_code == 200:\n            print(f\"File '{file_path}' successfully deleted from branch '{branch}'.\")\n            return (\"Success\",)\n        else:\n            print(f\"Failed to delete file. Status code: {response.status_code}\")\n            print(f\"Response: {response.text}\")\n            return (response.text,)",
    "Code_level": "Class-level",
    "FSMID_for_test": 57,
    "right_result": "```python\nimport requests\n\nclass FileOnlineDelete_gitee:\n    def __init__(self):\n        self.url_prefix = \"https://gitee.com/api/v5\"\n        self.show_help = \"\"\n\n    def delete_file_from_branch(self, repo_owner, repo_name, file_path, branch, access_token, commit_message=\"[comfyui_LLM_party] file deleted\"):\n        url = f\"{self.url_prefix}/repos/{repo_owner}/{repo_name}/git/commits\"\n        headers = {\n            \"Authorization\": f\"token {access_token}\",\n            \"Accept\": \"application/vnd.github.v3+json\"\n        }\n        params = {\n            \"sha\": branch,\n            \"path\": file_path\n        }\n        response = requests.post(url, headers=headers, json=params)\n        if response.status_code == 201:\n            commit_sha = response.json().get(\"sha\")\n            delete_url = f\"{self.url_prefix}/repos/{repo_owner}/{repo_name}/git/commits/{commit_sha}/delete\"\n            delete_response = requests.post(delete_url, headers=headers, json={\n                \"message\": commit_message\n            })\n            if delete_response.status_code == 201:\n                return (\"Success\",)\n            else:\n                return (delete_response.json().get(\"message\", \"Failed to delete commit\"),)\n        else:\n            return (response.json().get(\"message\", \"Failed to create commit\"),)\n```"
  },
  {
    "Task_id": 121,
    "Instruction": "Task Description: Create a FastAPI-based HTTP server class that exposes various NLP pipeline functionalities including model information retrieval, tokenization, detokenization, and model inference.\n\nClass Description: The `ServeCommand` class encapsulates a FastAPI application that serves an NLP pipeline through RESTful endpoints. It provides methods for getting model information, tokenizing text, detokenizing tokens, and performing model inference.\n\nAttributes:\n- _pipeline: [Any] - The NLP pipeline object containing the model and tokenizer\n- host: [str] - The host address where the server will run (default: \"localhost\")\n- port: [int] - The port number for the server (default: 8888)\n- workers: [int] - Number of worker processes (default: 1)\n- _app: [FastAPI] - The FastAPI application instance\n\nMethods:\n- __init__(pipeline, host: str = \"localhost\", port: int = 8888, workers: int = 1) -> None - Initializes the server with the NLP pipeline and server configuration\n- run() -> None - Starts the FastAPI server using uvicorn\n- model_info() -> ServeModelInfoResult - Returns model configuration information\n- tokenize(text_input: str = Body(None, embed=True), return_ids: bool = Body(False, embed=True)) -> ServeTokenizeResult - Tokenizes input text and optionally returns token IDs\n- detokenize(tokens_ids: List[int] = Body(None, embed=True), skip_special_tokens: bool = Body(False, embed=True), cleanup_tokenization_spaces: bool = Body(True, embed=True)) -> ServeDeTokenizeResult - Converts token IDs back to text\n- forward(inputs=Body(None, embed=True)) -> ServeForwardResult - Performs model inference on the given inputs",
    "Canonical_solution": "from fastapi import Body, FastAPI, HTTPException\nfrom fastapi.routing import APIRoute\nfrom pydantic import BaseModel\nfrom starlette.responses import JSONResponse\nfrom uvicorn import run\nfrom typing import List, Any, Optional\n\nclass ServeModelInfoResult(BaseModel):\n    infos: dict\n\nclass ServeTokenizeResult(BaseModel):\n    tokens: List[str]\n    tokens_ids: Optional[List[int]]\n\nclass ServeDeTokenizeResult(BaseModel):\n    text: str\n\nclass ServeForwardResult(BaseModel):\n    output: Any\n\nclass ServeCommand:\n    def __init__(self, pipeline, host: str = \"localhost\", port: int = 8888, workers: int = 1):\n        self._pipeline = pipeline\n        self.host = host\n        self.port = port\n        self.workers = workers\n\n        self._app = FastAPI(\n            routes=[\n                APIRoute(\"/\", self.model_info, response_model=ServeModelInfoResult, response_class=JSONResponse, methods=[\"GET\"]),\n                APIRoute(\"/tokenize\", self.tokenize, response_model=ServeTokenizeResult, response_class=JSONResponse, methods=[\"POST\"]),\n                APIRoute(\"/detokenize\", self.detokenize, response_model=ServeDeTokenizeResult, response_class=JSONResponse, methods=[\"POST\"]),\n                APIRoute(\"/forward\", self.forward, response_model=ServeForwardResult, response_class=JSONResponse, methods=[\"POST\"]),\n            ],\n            timeout=600,\n        )\n\n    def run(self):\n        run(self._app, host=self.host, port=self.port, workers=self.workers)\n\n    def model_info(self):\n        return ServeModelInfoResult(infos=vars(self._pipeline.model.config))\n\n    def tokenize(self, text_input: str = Body(None, embed=True), return_ids: bool = Body(False, embed=True)):\n        try:\n            tokens_txt = self._pipeline.tokenizer.tokenize(text_input)\n            if return_ids:\n                tokens_ids = self._pipeline.tokenizer.convert_tokens_to_ids(tokens_txt)\n                return ServeTokenizeResult(tokens=tokens_txt, tokens_ids=tokens_ids)\n            else:\n                return ServeTokenizeResult(tokens=tokens_txt)\n        except Exception as e:\n            raise HTTPException(status_code=500, detail={\"error\": str(e)})\n\n    def detokenize(self, tokens_ids: List[int] = Body(None, embed=True), skip_special_tokens: bool = Body(False, embed=True), cleanup_tokenization_spaces: bool = Body(True, embed=True)):\n        try:\n            decoded_str = self._pipeline.tokenizer.decode(tokens_ids, skip_special_tokens, cleanup_tokenization_spaces)\n            return ServeDeTokenizeResult(text=decoded_str)\n        except Exception as e:\n            raise HTTPException(status_code=500, detail={\"error\": str(e)})\n\n    async def forward(self, inputs=Body(None, embed=True)):\n        if len(inputs) == 0:\n            return ServeForwardResult(output=[])\n        try:\n            output = self._pipeline(inputs)\n            return ServeForwardResult(output=output)\n        except Exception as e:\n            raise HTTPException(status_code=500, detail={\"error\": str(e)})",
    "Code_level": "Class-level",
    "FSMID_for_test": 61,
    "right_result": "```python\nfrom fastapi import FastAPI, Body, HTTPException\nfrom typing import Any, List, Optional\nfrom pydantic import BaseModel\n\nclass ServeModelInfoResult(BaseModel):\n    model_name: str\n    version: str\n    description: str\n\nclass ServeTokenizeResult(BaseModel):\n    tokens: List[str]\n    token_ids: Optional[List[int]]\n\nclass ServeDeTokenizeResult(BaseModel):\n    text: str\n\nclass ServeForwardResult(BaseModel):\n    prediction: Any\n\nclass ServeCommand:\n    def __init__(self, pipeline: Any, host: str = \"localhost\", port: int = 8888, workers: int = 1) -> None:\n        self._pipeline = pipeline\n        self.host = host\n        self.port = port\n        self.workers = workers\n        self._app = FastAPI()\n\n    def run(self) -> None:\n        import uvicorn\n        uvicorn.run(self._app, host=self.host, port=self.port, workers=self.workers)\n\n    @staticmethod\n    def model_info() -> ServeModelInfoResult:\n        # Placeholder for actual model info retrieval\n        return ServeModelInfoResult(model_name=\"NLPModel\", version=\"1.0\", description=\"NLP Model for text processing\")\n\n    @staticmethod\n    def tokenize(text_input: str = Body(None, embed=True), return_ids: bool = Body(False, embed=True)) -> ServeTokenizeResult:\n        # Placeholder for actual tokenization\n        tokens = [\"token1\", \"token2\", \"token3\"]\n        token_ids = [1, 2, 3]\n        return ServeTokenizeResult(tokens=tokens, token_ids=token_ids if return_ids else None)\n\n    @staticmethod\n    def detokenize(tokens_ids: List[int] = Body(None, embed=True), skip_special_tokens: bool = Body(False, embed=True), cleanup_tokenization_spaces: bool = Body(True, embed=True)) -> ServeDeTokenizeResult:\n        # Placeholder for actual detokenization\n        text = \"token1 token2 token3\"\n        return ServeDeTokenizeResult(text=text)\n\n    @staticmethod\n    def forward(inputs=Body(None, embed=True)) -> ServeForwardResult:\n        # Placeholder for actual model inference\n        prediction = \"prediction_result\"\n        return ServeForwardResult(prediction=prediction)\n\n    @staticmethod\n    async def model_info_endpoint() -> ServeModelInfoResult:\n        return ServeCommand.model_info()\n\n    @staticmethod\n    async def tokenize_endpoint(text_input: str = Body(None, embed=True), return_ids: bool = Body(False, embed=True)) -> ServeTokenizeResult:\n        return ServeCommand.tokenize(text_input, return_ids)\n\n    @staticmethod\n    async def detokenize_endpoint(tokens_ids: List[int] = Body(None, embed=True), skip_special_tokens: bool = Body(False, embed=True), cleanup_tokenization_spaces: bool = Body(True, embed=True)) -> ServeDeTokenizeResult:\n        return ServeCommand.detokenize(tokens_ids, skip_special_tokens, cleanup_tokenization_spaces)\n\n    @staticmethod\n    async def forward_endpoint(inputs=Body(None, embed=True)) -> ServeForwardResult:\n        return ServeCommand.forward(inputs)\n\n    def setup_routes(self):\n        self._app.add_api_route(\"/model_info\", self.model_info_endpoint)\n        self._app.add_api_route(\"/tokenize\", self.tokenize_endpoint)\n        self._app.add_api_route(\"/detokenize\", self.detokenize_endpoint)\n        self._app.add_api_route(\"/forward\", self.forward_endpoint)\n```"
  },
  {
    "Task_id": 122,
    "Instruction": "Task Description: Implement a FastAPI-based HTTP server for handling conversational AI queries and chat interactions, with support for both direct queries and streaming chat responses.\n\nClass Description: RayAssistantDeployment is a class that encapsulates the functionality for handling HTTP requests in a conversational AI service. It provides endpoints for direct queries (/query) and chat interactions (/chat), with support for streaming responses in chat mode.\n\nAttributes:\n\napp: FastAPI - The FastAPI application instance that handles HTTP requests and routes.\n\nMethods:\n\n__init__: [Name](app: FastAPI) -> None - Initializes the class with a FastAPI app instance and registers the query and chat endpoints.\n\npredict: [Name](query: Query, stream: bool) -> Dict[str, Any] - Internal prediction method that processes the input query and returns a dictionary containing the AI response (implementation would be provided separately).\n\nquery: [Name](query: Query) -> Answer - Handles POST requests to the /query endpoint, processes the query using predict, and returns an Answer object containing the response.\n\nproduce_chat_answer: [Name](request: Request, result: Dict[str, Any]) -> Generator[str, None, None] - Generator function that yields chat response pieces and sources for streaming.\n\nchat: [Name](request: Request) -> StreamingResponse - Handles POST requests to the /chat endpoint, processes the conversation using predict (with streaming enabled for single messages), and returns a streaming response.",
    "Canonical_solution": "from fastapi import FastAPI\nfrom pydantic import BaseModel, Field\nfrom starlette.responses import StreamingResponse\nfrom typing import List, Dict, Any\n\nclass Message(BaseModel):\n    role: str = Field(\n        ..., description=\"The role of the author of the message, typically 'user', or 'assistant'.\"\n    )\n    content: str = Field(..., description=\"The content of the message.\")\n\nclass Request(BaseModel):\n    messages: List[Message] = Field(\n        ..., description=\"A list of messages that make up the conversation.\"\n    )\n\nclass Query(BaseModel):\n    query: str\n\nclass Answer(BaseModel):\n    question: str\n    answer: str\n    sources: List[str]\n    llm: str\n\nclass RayAssistantDeployment:\n    def __init__(self, app: FastAPI):\n        self.app = app\n        self.app.post(\"/query\")(self.query)\n        self.app.post(\"/chat\")(self.chat)\n\n    def predict(self, query: Query, stream: bool) -> Dict[str, Any]:\n        # Implementation would go here\n        pass\n\n    def query(self, query: Query) -> Answer:\n        result = self.predict(query, stream=False)\n        return Answer.parse_obj(result)\n\n    def produce_chat_answer(self, request: Request, result: Dict[str, Any]):\n        answer = []\n        for answer_piece in result[\"answer\"]:\n            answer.append(answer_piece)\n            yield answer_piece\n\n        if result[\"sources\"]:\n            yield \"\\n\\n**Sources:**\\n\"\n            for source in result[\"sources\"]:\n                yield \"* \" + source + \"\\n\"\n\n    def chat(self, request: Request) -> StreamingResponse:\n        if len(request.messages) == 1:\n            query = Query(query=request.messages[0].content)\n            result = self.predict(query, stream=True)\n        else:\n            # Simplified implementation for follow-up questions\n            result = {\"answer\": [\"Response\"], \"llm\": \"gpt-4\", \"sources\": [], \"document_ids\": []}\n\n        return StreamingResponse(\n            self.produce_chat_answer(request, result), media_type=\"text/plain\"\n        )",
    "Code_level": "Class-level",
    "FSMID_for_test": 61,
    "right_result": "```python\nfrom fastapi import FastAPI, Query, Request, StreamingResponse\nfrom typing import Dict, Any, Generator\n\nclass RayAssistantDeployment:\n    def __init__(self, app: FastAPI):\n        self.app = app\n        self.app.post(\"/query\", self.query)\n        self.app.post(\"/chat\", self.chat)\n\n    def predict(self, query: Query, stream: bool) -> Dict[str, Any]:\n        # Implementation would be provided separately\n        pass\n\n    def query(self, query: Query) -> str:\n        response = self.predict(query, False)\n        return response\n\n    def produce_chat_answer(self, request: Request, result: Dict[str, Any]) -> Generator[str, None, None]:\n        for piece in result['response']:\n            yield piece\n\n    def chat(self, request: Request) -> StreamingResponse:\n        result = self.predict(request.query_params, True)\n        return StreamingResponse(self.produce_chat_answer(request, result))\n```"
  },
  {
    "Task_id": 127,
    "Instruction": "Task Description: Create a Flask-based HTTP server endpoint that handles incoming POST requests with different content types (JSON, CSV, plain text) and returns predictions from a scoring service in the appropriate format.\n\nFunction Description: The `transformation` function is a Flask route handler for \"/invocations\" endpoint that processes incoming POST requests. It checks the content type of the request, extracts and processes the data accordingly, gets predictions from a scoring service, and returns the results in the corresponding format (JSON for JSON input, CSV for CSV/text input).\n\nInput: \n- The function receives HTTP POST requests through Flask's request object\n- Supported input content types:\n  * application/json: {\"text\": string, \"bing_key\": optional string}\n  * text/csv: CSV file with a \"text\" column\n  * text/plain: Plain text file with one text per line\n\nOutput:\n- For successful processing:\n  * JSON response (for JSON input) containing top 10 predictions\n  * CSV response (for CSV/text input) containing predictions\n- For unsupported content types: 415 error response with plain text message\n\nThe function returns Flask Response objects with:\n- response: The processed data in appropriate format\n- status: HTTP status code (200 for success, 415 for unsupported type)\n- mimetype: Corresponding to the response format",
    "Canonical_solution": "import os\nimport json\nimport flask\nimport pandas as pd\nimport io\nfrom collections import OrderedDict\n\nprefix = \"/opt/ml/\"\nPATH = os.path.join(prefix, \"model\")\n\napp = flask.Flask(__name__)\n\n@app.route(\"/invocations\", methods=[\"POST\"])\ndef transformation():\n    data = None\n    text = None\n\n    if flask.request.content_type == \"application/json\":\n        data = flask.request.get_json(silent=True)\n        text = data[\"text\"]\n        try:\n            bing_key = data[\"bing_key\"]\n        except Exception:\n            bing_key = None\n\n        predictions = ScoringService.predict(text, bing_key)\n        result = json.dumps(predictions[:10])\n        return flask.Response(response=result, status=200, mimetype=\"application/json\")\n\n    elif flask.request.content_type == \"text/csv\":\n        data = flask.request.data.decode(\"utf-8\")\n        df = pd.read_csv(io.StringIO(data), header=\"infer\")\n        predictions = ScoringService.predict_batch(list(df[\"text\"].values))\n\n        out = io.StringIO()\n        pd.DataFrame(predictions).to_csv(out, index=False)\n        result = out.getvalue()\n        return flask.Response(response=result, status=200, mimetype=\"text/csv\")\n\n    elif flask.request.content_type == \"text/plain\":\n        data = flask.request.data.decode(\"utf-8\")\n        s = io.StringIO(data)\n        texts = []\n        for line in s:\n            texts.append(line)\n        predictions = ScoringService.predict_batch(texts)\n        out = io.StringIO()\n        pd.DataFrame(predictions).to_csv(out, index=False)\n        result = out.getvalue()\n        return flask.Response(response=result, status=200, mimetype=\"text/csv\")\n\n    else:\n        return flask.Response(\n            response=\"This predictor only supports JSON, txt or CSV data\",\n            status=415,\n            mimetype=\"text/plain\",\n        )",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, Response\nimport json\nimport csv\nimport io\n\napp = Flask(__name__)\n\ndef get_predictions(text):\n    # Placeholder for scoring service call\n    return [{\"prediction\": \"Prediction 1\"}, {\"prediction\": \"Prediction 2\"}]\n\n@app.route('/invocations', methods=['POST'])\ndef transformation():\n    content_type = request.headers.get('Content-Type')\n    data = request.data.decode('utf-8')\n\n    if content_type == 'application/json':\n        data_dict = json.loads(data)\n        text = data_dict.get('text')\n        bing_key = data_dict.get('bing_key')\n        predictions = get_predictions(text)\n        response_data = json.dumps(predictions)\n        return Response(response_data, status=200, mimetype='application/json')\n\n    elif content_type in ['text/csv', 'text/plain']:\n        predictions = get_predictions(data)\n        if content_type == 'text/csv':\n            response_data = io.StringIO()\n            writer = csv.writer(response_data)\n            writer.writerow(['prediction'])\n            for prediction in predictions:\n                writer.writerow([prediction['prediction']])\n            response_data.seek(0)\n            return Response(response_data.getvalue(), status=200, mimetype='text/csv')\n        else:\n            response_data = \"\\n\".join([prediction['prediction'] for prediction in predictions])\n            return Response(response_data, status=200, mimetype='text/plain')\n\n    else:\n        return Response(\"Unsupported Media Type\", status=415, mimetype='text/plain')\n\nif __name__ == '__main__':\n    app.run()"
  },
  {
    "Task_id": 128,
    "Instruction": "Task Description: Create a Python function that initializes and runs a Flask-based HTTP server for a translation service, using Waitress as the production server. The server should handle translation requests and interact with a TranslationServer instance.\n\nFunction Description: The function `start` initializes a Flask application, sets up route prefixing, starts a TranslationServer with the provided configuration, and defines a `/translate` endpoint that handles POST requests for translation. The server runs in production mode using Waitress.\n\nInput:\n- config_file: [str] - Path to the configuration file for the TranslationServer\n- url_root: [str] (optional, default=\"./translator\") - Base URL path for the routes\n- host: [str] (optional, default=\"0.0.0.0\") - Host address to bind the server to\n- port: [int] (optional, default=5000) - Port number to listen on\n- debug: [bool] (optional, default=False) - Debug mode flag (not used with Waitress)\n\nOutput:\n- None: The function doesn't return but starts a blocking HTTP server that handles incoming requests until interrupted. The `/translate` endpoint returns JSON responses containing translation results or error information.",
    "Canonical_solution": "from flask import Flask, jsonify, request\nfrom waitress import serve\nfrom onmt.translate import TranslationServer, ServerModelError\n\nSTATUS_OK = \"ok\"\nSTATUS_ERROR = \"error\"\n\ndef start(config_file, url_root=\"./translator\", host=\"0.0.0.0\", port=5000, debug=False):\n    def prefix_route(route_function, prefix=\"\", mask=\"{0}{1}\"):\n        def newroute(route, *args, **kwargs):\n            return route_function(mask.format(prefix, route), *args, **kwargs)\n        return newroute\n\n    app = Flask(__name__)\n    app.route = prefix_route(app.route, url_root)\n    translation_server = TranslationServer()\n    translation_server.start(config_file)\n\n    @app.route(\"/translate\", methods=[\"POST\"])\n    def translate():\n        inputs = request.get_json(force=True)\n        out = {}\n        try:\n            trans, scores, n_best, _, aligns, align_scores = translation_server.run(\n                inputs\n            )\n            assert len(trans) == len(inputs) * n_best\n            assert len(scores) == len(inputs) * n_best\n            assert len(aligns) == len(inputs) * n_best\n\n            out = [[] for _ in range(n_best)]\n            for i in range(len(trans)):\n                response = {\n                    \"src\": inputs[i // n_best][\"src\"],\n                    \"tgt\": trans[i],\n                    \"n_best\": n_best,\n                    \"pred_score\": scores[i],\n                }\n                if len(aligns[i]) > 0 and aligns[i][0] is not None:\n                    response[\"align\"] = aligns[i]\n                    response[\"align_score\"] = align_scores[i]\n                out[i % n_best].append(response)\n        except ServerModelError as e:\n            model_id = inputs[0].get(\"id\")\n            translation_server.models[model_id].unload()\n            out[\"error\"] = str(e)\n            out[\"status\"] = STATUS_ERROR\n        return jsonify(out)\n\n    serve(app, host=host, port=port)",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "```python\nfrom flask import Flask, request, jsonify\nfrom waitress import serve\nimport translation_server\n\ndef start(config_file, url_root=\"./translator\", host=\"0.0.0.0\", port=5000, debug=False):\n    app = Flask(__name__)\n    app.config['URL_ROOT'] = url_root\n    translation_server_instance = translation_server.TranslationServer(config_file)\n    translation_server_instance.start()\n\n    @app.route(app.config['URL_ROOT'] + '/translate', methods=['POST'])\n    def translate():\n        data = request.get_json()\n        source_text = data.get('source_text')\n        target_language = data.get('target_language')\n        if not source_text or not target_language:\n            return jsonify({'error': 'Missing source_text or target_language'}), 400\n        result = translation_server_instance.translate(source_text, target_language)\n        return jsonify({'translated_text': result})\n\n    serve(app, host=host, port=port)\n```"
  },
  {
    "Task_id": 130,
    "Instruction": "Task Description: Create a Flask-based HTTP server with multiple endpoints to handle different types of requests, including delayed responses, request method identification, and JSON responses.\n\nFunction Description: The code implements three Flask route handlers that demonstrate different HTTP server functionalities. Each function handles a specific endpoint and performs a distinct operation.\n\nInput:\n- For '/respond' endpoint: \n  - Query parameter: 'time' (integer) - milliseconds to sleep before responding\n- For '/request_type' endpoint: \n  - None (automatically receives request method via Flask's request object)\n- For '/json' endpoint: \n  - None\n\nOutput:\n- For '/respond' endpoint: \n  - Response text: 'Response from Flask' after specified delay\n  - Header: Sets 'Access-Control-Allow-Origin' to '*'\n- For '/request_type' endpoint: \n  - Response text: String indicating the HTTP request method used\n  - Header: Sets 'Access-Control-Allow-Origin' to '*'\n- For '/json' endpoint: \n  - Response: JSON object {'resp': 'Hello JSON!'}",
    "Canonical_solution": "from flask import Flask, request, make_response\nfrom time import sleep\n\napp = Flask(__name__)\n\n@app.route('/respond')\ndef respond():\n    time_to_sleep = int(request.args.get('time')) / 1000\n    sleep(time_to_sleep)\n    resp = make_response('Response from Flask')\n    resp.headers['Access-Control-Allow-Origin'] = '*'\n    return resp\n\n@app.route('/request_type')\ndef request_type():\n    resp = make_response('Request Type: ' + request.method)\n    resp.headers['Access-Control-Allow-Origin'] = '*'\n    return resp\n\n@app.route('/json')\ndef json():\n    return {resp:'Hello JSON!'}",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n@app.route('/respond')\ndef respond():\n    time = int(request.args.get('time', 0))\n    time.sleep(time / 1000.0)\n    return 'Response from Flask', {'Access-Control-Allow-Origin': '*'}\n\n@app.route('/request_type')\ndef request_type():\n    method = request.method\n    return f'Request method: {method}', {'Access-Control-Allow-Origin': '*'}\n\n@app.route('/json')\ndef json():\n    return jsonify({'resp': 'Hello JSON!'}), {'Access-Control-Allow-Origin': '*'}\n\nif __name__ == '__main__':\n    app.run()"
  },
  {
    "Task_id": 131,
    "Instruction": "Task Description: Create a Flask-based HTTP server for handling subscription requests that generates configuration files for various proxy clients based on user agent and request parameters.\n\nClass Description: SubscriptionServer is a Flask application wrapper that handles subscription requests and generates appropriate configuration files for different proxy clients (Clash, WireGuard, Surge, etc.). It includes route setup, request handling, and response generation logic.\n\nAttributes:\n- app: Flask - The Flask application instance\n- logger: logging.Logger - Logger instance for application logging\n- fake: Faker - Faker instance for generating random names\n\nMethods:\n- __init__(app_name: str = \"web\", logger: logging.Logger = None) -> None - Initializes the Flask application, sets up logging, and configures routes\n- _setup_routes() -> None - Sets up the Flask routes for handling subscription requests\n- _handle_subscription(sub_type: str) -> Any - Processes subscription requests and generates appropriate configuration files based on the subscription type\n- run(host: str = '0.0.0.0', port: int = 5000, debug: bool = True) -> None - Starts the Flask server with specified host, port and debug settings",
    "Canonical_solution": "from flask import Flask, request, make_response\nimport logging\nfrom faker import Faker\nfrom typing import Dict, Any\n\nclass SubscriptionServer:\n    def __init__(self, app_name: str = \"web\", logger: logging.Logger = None):\n        self.app = Flask(app_name)\n        self.logger = logger if logger else logging.getLogger()\n        self.fake = Faker()\n        \n        # Configure logger\n        for handler in self.app.logger.handlers:\n            self.app.logger.removeHandler(handler)\n        for handler in self.logger.handlers:\n            self.app.logger.addHandler(handler)\n        self.app.logger.setLevel(self.logger.level)\n        \n        self._setup_routes()\n\n    def _setup_routes(self):\n        @self.app.route('/sub', methods=['GET'])\n        def httpAutoSub():\n            user_agent = request.headers.get('User-Agent', 'unknown').lower()\n            sub_type = getSubTypeFromUA(user_agent)\n            return self._handle_subscription(sub_type)\n\n        @self.app.route('/api/<string:sub_type>', methods=['GET'])\n        def httpSubscription(sub_type: str):\n            return self._handle_subscription(sub_type)\n\n    def _handle_subscription(self, sub_type: str) -> Any:\n        user_agent = request.headers.get('User-Agent', 'unknown').lower()\n        account = getCurrentAccount(self.logger)\n        best = request.args.get('best', 'false').lower() == \"true\" or False\n        random_name = request.args.get('randomName', 'false').lower() == \"true\" or False\n        proxy_format = request.args.get('proxyFormat', 'full').lower()\n        ipv6 = request.args.get('ipv6', 'false').lower() == \"true\" or False\n\n        headers = {\n            'Content-Type': 'application/x-yaml; charset=utf-8',\n            \"Subscription-Userinfo\": f\"upload=0; download={account.usage}; total={account.quota}; \"\n                                    f\"expire=253388144714\"\n        }\n\n        is_android = \"android\" in user_agent\n\n        if sub_type == \"clash\":\n            file_data = generateClashSubFile(account, self.logger, best=best, proxy_format=proxy_format,\n                                           random_name=random_name, is_android=is_android, is_meta=False, ipv6=ipv6)\n            file_name = f'Clash-{self.fake.color_name()}.yaml'\n        elif sub_type == \"meta\":\n            file_data = generateClashSubFile(account, self.logger, best=best, proxy_format=proxy_format,\n                                           random_name=random_name, is_android=is_android, is_meta=True, ipv6=ipv6)\n            file_name = f'Clash-{self.fake.color_name()}.yaml'\n        elif sub_type == \"wireguard\":\n            file_data = generateWireguardSubFile(account, self.logger, best=best, ipv6=ipv6)\n            file_name = f'WireGuard-{self.fake.lexify(\"????????????\").lower()}.conf'\n        elif sub_type == \"surge\":\n            file_data = generateSurgeSubFile(account, self.logger, best=best, random_name=random_name,\n                                           proxy_format=proxy_format, ipv6=ipv6)\n            file_name = f'Surge-{self.fake.color_name()}.conf'\n        elif sub_type == 'shadowrocket':\n            file_data = generateShadowRocketSubFile(account, self.logger, best=best, random_name=random_name, ipv6=ipv6)\n            file_name = f'Shadowrocket-{self.fake.color_name()}.conf'\n        elif sub_type == 'sing-box':\n            file_data = generateSingBoxSubFile(account, self.logger, best=best, random_name=random_name, ipv6=ipv6)\n            file_name = f'SingBox-{self.fake.color_name()}.json'\n        elif sub_type == 'loon':\n            file_data = generateLoonSubFile(account, self.logger, best=best, random_name=random_name, ipv6=ipv6)\n            file_name = f'Loon-{self.fake.color_name()}.conf'\n        elif sub_type == \"only_proxies\":\n            file_data = generateClashSubFile(account, self.logger, best=best, proxy_format='with_groups',\n                                           random_name=random_name, ipv6=ipv6)\n            file_name = f'Clash-{self.fake.color_name()}.yaml'\n        else:\n            return {\n                'code': 400,\n                'message': 'Unsupported sub type.'\n            }, 400\n\n        headers['Content-Disposition'] = f'attachment; filename=\"{file_name}\"'\n        response = make_response(file_data)\n        response.headers = headers\n        return response\n\n    def run(self, host: str = '0.0.0.0', port: int = 5000, debug: bool = True):\n        self.app.run(host=host, port=port, debug=debug)",
    "Code_level": "Class-level",
    "FSMID_for_test": 60,
    "right_result": "```python\nfrom flask import Flask, request, jsonify\nimport logging\nfrom faker import Faker\n\nclass SubscriptionServer:\n    def __init__(self, app_name: str = \"web\", logger: logging.Logger = None) -> None:\n        self.app = Flask(app_name, instance_relative_config=False)\n        self.logger = logger or logging.getLogger(__name__)\n        self.fake = Faker()\n        self._setup_routes()\n\n    def _setup_routes(self) -> None:\n        @self.app.route('/subscribe', methods=['POST'])\n        def handle_subscription():\n            sub_type = request.json.get('type')\n            return self._handle_subscription(sub_type)\n\n    def _handle_subscription(self, sub_type: str) -> Any:\n        # Logic to generate configuration files based on subscription type\n        pass\n\n    def run(self, host: str = '0.0.0.0', port: int = 5000, debug: bool = True) -> None:\n        self.app.run(host=host, port=port, debug=debug)\n```"
  },
  {
    "Task_id": 132,
    "Instruction": "Task Description: Create a Flask web application that serves HTML templates and CSV files based on user requests.\n\nFunction Description: The application consists of two main routes: one for serving the main HTML page and another for serving CSV files based on a user ID parameter.\n\nInput:\n- For index(): No input parameters\n- For get_data_for_uid(uid): \n  uid: int - The user ID used to locate the corresponding CSV file\n\nOutput:\n- For index(): Returns the rendered main.html template\n- For get_data_for_uid(uid): Returns the CSV file corresponding to the given user ID or raises a 404 error if not found",
    "Canonical_solution": "from flask import Flask, render_template, send_file\n\napp = Flask('stalky')\n\n@app.route('/')\ndef index():\n    return render_template(\"main.html\")\n\n@app.route('/data/<int:uid>')\ndef get_data_for_uid(uid):\n    return send_file(\"generated_graphs/csv/{uid}.csv\".format(uid=uid))\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', debug=True)",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, render_template, send_file, abort\n\napp = Flask(__name__)\n\n@app.route('/')\ndef index():\n    return render_template('main.html')\n\n@app.route('/data/<int:uid>')\ndef get_data_for_uid(uid):\n    try:\n        return send_file(f'user_data_{uid}.csv', as_attachment=True)\n    except FileNotFoundError:\n        abort(404)\n\nif __name__ == '__main__':\n    app.run(debug=True)"
  },
  {
    "Task_id": 134,
    "Instruction": "Task Description: Create a Flask-based web application for sentiment analysis of movie reviews that allows users to submit reviews, get sentiment predictions, and provide feedback to improve the classifier.\n\nClass Description: ReviewClassifier is a Flask web application that classifies movie reviews as positive or negative using a pre-trained classifier. It provides an interface for users to submit reviews, view predictions, and give feedback which is used to update the classifier and store in a SQLite database.\n\nAttributes:\n- app: [Flask] - The Flask application instance\n- clf: [sklearn classifier] - Pre-trained sentiment classifier loaded from pickle file\n- db: [str] - Path to SQLite database file for storing reviews\n- vect: [sklearn vectorizer] - Text vectorizer for feature extraction\n\nMethods:\n- __init__: [constructor]() -> None - Initializes the Flask app, loads classifier and vectorizer, sets up routes\n- classify: [classify](document: str) -> tuple[str, float] - Classifies a review document and returns (sentiment_label, probability)\n- train: [train](document: str, y: int) -> None - Updates classifier with new training example\n- sqlite_entry: [sqlite_entry](document: str, y: int) -> None - Stores review and sentiment in database\n- index: [index]() -> str - Renders main review submission form\n- results: [results]() -> str - Processes submitted review and renders prediction results\n- feedback: [feedback]() -> str - Handles user feedback and updates model/database\n- run: [run]() -> None - Starts the Flask development server",
    "Canonical_solution": "from flask import Flask, request, render_template\nfrom wtforms import Form, TextAreaField, validators\nimport pickle\nimport sqlite3\nimport os\nimport numpy as np\nfrom vectorizer import vect\n\nclass ReviewClassifier:\n    def __init__(self):\n        self.app = Flask(__name__)\n        cur_dir = os.path.dirname(__file__)\n        self.clf = pickle.load(open(os.path.join(cur_dir, 'pkl_objects', 'classifier.pkl'), 'rb'))\n        self.db = os.path.join(cur_dir, 'reviews.sqlite')\n        self.vect = vect\n        \n        self.app.route('/')(self.index)\n        self.app.route('/results', methods=['POST'])(self.results)\n        self.app.route('/thanks', methods=['POST'])(self.feedback)\n\n    def classify(self, document):\n        label = {0: 'negative', 1: 'positive'}\n        X = self.vect.transform([document])\n        y = self.clf.predict(X)[0]\n        proba = np.max(self.clf.predict_proba(X))\n        return label[y], proba\n\n    def train(self, document, y):\n        X = self.vect.transform([document])\n        self.clf.partial_fit(X, [y])\n\n    def sqlite_entry(self, document, y):\n        conn = sqlite3.connect(self.db)\n        c = conn.cursor()\n        c.execute(\"INSERT INTO review_db (review, sentiment, date) VALUES (?, ?, DATETIME('now'))\", (document, y))\n        conn.commit()\n        conn.close()\n\n    def index(self):\n        form = ReviewForm(request.form)\n        return render_template('reviewform.html', form=form)\n\n    def results(self):\n        form = ReviewForm(request.form)\n        if request.method == 'POST' and form.validate():\n            review = request.form['moviereview']\n            y, proba = self.classify(review)\n            return render_template('results.html',\n                                content=review,\n                                prediction=y,\n                                probability=round(proba*100, 2))\n        return render_template('reviewform.html', form=form)\n\n    def feedback(self):\n        feedback = request.form['feedback_button']\n        review = request.form['review']\n        prediction = request.form['prediction']\n\n        inv_label = {'negative': 0, 'positive': 1}\n        y = inv_label[prediction]\n        if feedback == 'Incorrect':\n            y = int(not(y))\n        self.train(review, y)\n        self.sqlite_entry(review, y)\n        return render_template('thanks.html')\n\n    def run(self):\n        self.app.run(debug=True)\n\nclass ReviewForm(Form):\n    moviereview = TextAreaField('',\n                            [validators.DataRequired(),\n                            validators.length(min=15)])",
    "Code_level": "Class-level",
    "FSMID_for_test": 60,
    "right_result": "```python\nfrom flask import Flask, request, render_template_string, redirect, url_for\nfrom sklearn.externals import joblib\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\nimport sqlite3\n\napp = Flask(__name__)\n\nclf = joblib.load('classifier.pkl')\nvect = CountVectorizer()\ndb = 'reviews.db'\n\n@app.route('/')\ndef index():\n    return render_template_string('''\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>Review Classifier</title>\n    </head>\n    <body>\n        <h1>Submit a Movie Review</h1>\n        <form action=\"/results\" method=\"post\">\n            <textarea name=\"review\" rows=\"10\" cols=\"50\"></textarea><br>\n            <input type=\"submit\" value=\"Classify\">\n        </form>\n    </body>\n    </html>\n    ''')\n\n@app.route('/results', methods=['POST'])\ndef results():\n    review = request.form['review']\n    sentiment_label, probability = clf.predict([review]), clf.predict_proba([review])[0][1]\n    return render_template_string('''\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>Review Prediction</title>\n    </head>\n    <body>\n        <h1>Review Prediction</h1>\n        <p>Review: {{ review }}</p>\n        <p>Sentiment: {{ sentiment_label }} (Probability: {{ probability }})</p>\n        <form action=\"/feedback\" method=\"post\">\n            <input type=\"hidden\" name=\"review\" value=\"{{ review }}\">\n            <input type=\"hidden\" name=\"sentiment\" value=\"{{ sentiment_label }}\">\n            <input type=\"submit\" value=\"Provide Feedback\">\n        </form>\n    </body>\n    </html>\n    ''', review=review, sentiment_label=sentiment_label, probability=probability)\n\n@app.route('/feedback', methods=['POST'])\ndef feedback():\n    review = request.form['review']\n    sentiment = int(request.form['sentiment'])\n    sqlite_entry(review, sentiment)\n    return redirect(url_for('index'))\n\ndef sqlite_entry(document, y):\n    conn = sqlite3.connect(db)\n    c = conn.cursor()\n    c.execute('CREATE TABLE IF NOT EXISTS reviews (document TEXT, sentiment INTEGER)')\n    c.execute('INSERT INTO reviews (document, sentiment) VALUES (?, ?)', (document, y))\n    conn.commit()\n    conn.close()\n\nif __name__ == '__main__':\n    app.run(debug=True)\n```"
  },
  {
    "Task_id": 135,
    "Instruction": "Task Description: Create a Flask-based HTTP server with multiple endpoints to handle different types of requests, including delayed responses, request type identification, and JSON responses.\n\nFunction Description: The code sets up a Flask web server with three routes:\n1. '/respond' - Simulates a delayed response based on an input parameter\n2. '/request_type' - Returns the HTTP method used in the request\n3. '/json' - Returns a simple JSON response\n\nInput:\n- For '/respond' route: Query parameter 'time' (in milliseconds)\n- For other routes: No specific input parameters required\n\nOutput:\n- For '/respond': A text response after specified delay with CORS headers\n- For '/request_type': A text response indicating the request method with CORS headers\n- For '/json': A JSON response with a greeting message",
    "Canonical_solution": "from flask import Flask, request, make_response\nfrom time import sleep\n\napp = Flask(__name__)\n\n@app.route('/respond')\ndef respond():\n    time_to_sleep = int(request.args.get('time')) / 1000\n    sleep(time_to_sleep)\n    resp = make_response('Response from Flask')\n    resp.headers['Access-Control-Allow-Origin'] = '*'\n    return resp\n\n@app.route('/request_type')\ndef request_type():\n    resp = make_response('Request Type: ' + request.method)\n    resp.headers['Access-Control-Allow-Origin'] = '*'\n    return resp\n\n@app.route('/json')\ndef json():\n    return {resp:'Hello JSON!'}\n\nif __name__ == '__main__':\n    app.run()",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, jsonify\nimport time\nimport threading\n\napp = Flask(__name__)\n\n@app.route('/respond')\ndef respond():\n    delay = int(request.args.get('time', 0))\n    def delayed_response():\n        time.sleep(delay / 1000)\n        return \"Response after delay\"\n    threading.Thread(target=delayed_response).start()\n    return \"Request received\", 202\n\n@app.route('/request_type')\ndef request_type():\n    return f\"Request method: {request.method}\", 200\n\n@app.route('/json')\ndef json():\n    return jsonify({\"message\": \"Hello, this is a JSON response!\"}), 200\n\nif __name__ == '__main__':\n    app.run(debug=True)"
  },
  {
    "Task_id": 137,
    "Instruction": "Task Description: Create a Flask-based HTTP server that handles incoming requests, processes them with OpenTelemetry tracing, and returns a response.\n\nFunction Description: The function `server_request` is a Flask route handler that processes GET requests to the \"/server_request\" endpoint. It starts a new OpenTelemetry span for tracing purposes, extracts the request context, collects request attributes, processes the request parameter, and returns a simple response.\n\nInput:\n- request: Flask request object containing HTTP request data\n- request.args.get(\"param\"): Optional query parameter passed in the URL\n\nOutput:\n- Returns a string \"served\" as the HTTP response\n- Side effect: Prints the value of the \"param\" query parameter if present\n- Side effect: Creates OpenTelemetry tracing span with request attributes",
    "Canonical_solution": "from flask import Flask, request\nfrom opentelemetry.instrumentation.wsgi import collect_request_attributes\nfrom opentelemetry.propagate import extract\nfrom opentelemetry.sdk.trace import TracerProvider\nfrom opentelemetry.sdk.trace.export import BatchSpanProcessor, ConsoleSpanExporter\nfrom opentelemetry.trace import SpanKind, get_tracer_provider, set_tracer_provider\n\napp = Flask(__name__)\nset_tracer_provider(TracerProvider())\ntracer = get_tracer_provider().get_tracer(__name__)\nget_tracer_provider().add_span_processor(BatchSpanProcessor(ConsoleSpanExporter()))\n\n@app.route(\"/server_request\")\ndef server_request():\n    with tracer.start_as_current_span(\n        \"server_request\",\n        context=extract(request.headers),\n        kind=SpanKind.SERVER,\n        attributes=collect_request_attributes(request.environ),\n    ):\n        print(request.args.get(\"param\"))\n        return \"served\"",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request\nimport opentelemetry.trace\nfrom opentelemetry.propagation import W3CTraceContextPropagator\nfrom opentelemetry.sdk.trace import TracerProvider\nfrom opentelemetry.sdk.trace.export import BatchSpanProcessor, ConsoleSpanExporter\n\napp = Flask(__name__)\n\ntracer_provider = TracerProvider()\ntracer = tracer_provider.get_tracer(\"FlaskServer\")\nspan_processor = BatchSpanProcessor(ConsoleSpanExporter())\ntracer_provider.add_span_processor(span_processor)\ntracer_provider.init()\n\npropagator = W3CTraceContextPropagator()\n\n@app.route('/server_request', methods=['GET'])\ndef server_request():\n    span = tracer.start_span(\"server_request\")\n    span.set_attributes({\"request_param\": request.args.get(\"param\")})\n    propagator.inject(span.context, request.headers)\n    print(request.args.get(\"param\"))\n    response = \"served\"\n    span.end()\n    return response\n\nif __name__ == '__main__':\n    app.run()"
  },
  {
    "Task_id": 138,
    "Instruction": "Task Description: Create a Flask-based HTTP server endpoint that processes credit card application data and returns a prediction result indicating the probability of approval and a binary decision.\n\nFunction Description: The function implements a prediction endpoint for a credit card approval system. It receives client data in JSON format, processes it through a machine learning model (using pre-loaded `dv` for feature transformation and `model` for prediction), and returns the prediction results including the approval probability and a binary decision.\n\nInput: \n- JSON payload containing client data for credit card application (received via HTTP POST request)\n\nOutput: \n- JSON response containing:\n  - 'get_card_probability': float - Probability of getting the credit card (between 0 and 1)\n  - 'get_card': boolean - Binary decision indicating whether the card is approved (True if probability \u2265 0.5)",
    "Canonical_solution": "from flask import Flask\nfrom flask import request\nfrom flask import jsonify\n\napp = Flask('credict-card')\n\n@app.route('/predict', methods=['POST'])\ndef predict():\n    client = request.get_json()\n\n    X = dv.transform([client])\n    y_pred = model.predict_proba(X)[0, 1]\n    get_card = y_pred >= 0.5\n\n    result = {\n        'get_card_probability': float(y_pred),\n        'get_card': bool(get_card)\n    }\n\n    return jsonify(result)\n\nif __name__ == \"__main__\":\n    app.run(debug=True, host='0.0.0.0', port=9696)",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, jsonify\nimport numpy as np\n\napp = Flask(__name__)\n\n@app.route('/predict', methods=['POST'])\ndef predict():\n    data = request.get_json()\n    features = dv.transform([data['features']])\n    prediction = model.predict(features)\n    probability = model.predict_proba(features)[:, 1]\n    return jsonify({\n        'get_card_probability': probability[0],\n        'get_card': prediction[0] == 1\n    })\n\nif __name__ == '__main__':\n    app.run()"
  },
  {
    "Task_id": 140,
    "Instruction": "Task Description: Create a Flask-based HTTP server endpoint that converts text to speech (TTS) and returns the generated audio as a WAV file.\n\nFunction Description: The function `tts()` is a Flask route handler that processes GET requests to the '/api/tts' endpoint. It takes text input as a query parameter, synthesizes it into speech using a TTS synthesizer, and returns the audio as a WAV file in the response.\n\nInput: \n- text: [str] (passed as a query parameter 'text' in the GET request) - The text to be converted to speech.\n\nOutput:\n- [Flask Response] - A response containing the synthesized audio in WAV format with the appropriate MIME type ('audio/wav'). The audio data is streamed from memory using a BytesIO buffer.\n\nNote: The function assumes the existence of a pre-initialized `synthesizer` object capable of performing TTS (text-to-speech) conversion and saving the output as WAV format. The actual implementation of the synthesizer is not shown in this reference code.",
    "Canonical_solution": "from flask import Flask, render_template, request, send_file\nimport io\n\napp = Flask(__name__)\n\n@app.route('/api/tts', methods=['GET'])\ndef tts():\n    text = request.args.get('text')\n    print(\" > Model input: {}\".format(text))\n    wavs = synthesizer.tts(text)\n    out = io.BytesIO()\n    synthesizer.save_wav(wavs, out)\n    return send_file(out, mimetype='audio/wav')\n\ndef main():\n    app.run(debug=args.debug, host='0.0.0.0', port=args.port)",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "```python\nfrom flask import Flask, Response\nimport io\n\napp = Flask(__name__)\n\n@app.route('/api/tts', methods=['GET'])\ndef tts():\n    text = request.args.get('text')\n    if not text:\n        return Response(status=400)\n    \n    # Assuming synthesizer is a pre-initialized TTS synthesizer object\n    # synthesizer = ...\n    # audio_data = synthesizer.synthesize(text)\n    \n    # For demonstration purposes, we'll use a placeholder WAV file\n    audio_data = b'placeholder_wav_data'\n    \n    return Response(audio_data, mimetype='audio/wav')\n\nif __name__ == '__main__':\n    app.run(debug=True)\n```"
  },
  {
    "Task_id": 141,
    "Instruction": "Task Description: Create a Flask-based HTTP server that handles various file serving endpoints and a video processing endpoint, with CORS support.\n\nFunction Description: The code implements a Flask web server with multiple routes for serving different types of files (videos, posters, uploads) and processing video streams. It includes health check, file serving, and video propagation endpoints.\n\nInput:\n- For healthy(): None\n- For send_gallery_video(path: str): path parameter as string\n- For send_poster_image(path: str): path parameter as string\n- For send_uploaded_video(path: str): path parameter as string\n- For propagate_in_video(): JSON payload containing session_id and optional start_frame_index\n\nOutput:\n- healthy(): Returns \"OK\" with HTTP status 200\n- send_gallery_video(): Returns file from GALLERY_PATH or raises ValueError\n- send_poster_image(): Returns file from POSTERS_PATH or raises ValueError\n- send_uploaded_video(): Returns file from UPLOADS_PATH or raises ValueError\n- propagate_in_video(): Returns multipart video stream with tracking masks",
    "Canonical_solution": "from flask import Flask, make_response, Request, request, Response, send_from_directory\nfrom flask_cors import CORS\n\napp = Flask(__name__)\ncors = CORS(app, supports_credentials=True)\n\n@app.route(\"/healthy\")\ndef healthy() -> Response:\n    return make_response(\"OK\", 200)\n\n@app.route(f\"/{GALLERY_PREFIX}/<path:path>\", methods=[\"GET\"])\ndef send_gallery_video(path: str) -> Response:\n    try:\n        return send_from_directory(\n            GALLERY_PATH,\n            path,\n        )\n    except:\n        raise ValueError(\"resource not found\")\n\n@app.route(f\"/{POSTERS_PREFIX}/<path:path>\", methods=[\"GET\"])\ndef send_poster_image(path: str) -> Response:\n    try:\n        return send_from_directory(\n            POSTERS_PATH,\n            path,\n        )\n    except:\n        raise ValueError(\"resource not found\")\n\n@app.route(f\"/{UPLOADS_PREFIX}/<path:path>\", methods=[\"GET\"])\ndef send_uploaded_video(path: str):\n    try:\n        return send_from_directory(\n            UPLOADS_PATH,\n            path,\n        )\n    except:\n        raise ValueError(\"resource not found\")\n\n@app.route(\"/propagate_in_video\", methods=[\"POST\"])\ndef propagate_in_video() -> Response:\n    data = request.json\n    args = {\n        \"session_id\": data[\"session_id\"],\n        \"start_frame_index\": data.get(\"start_frame_index\", 0),\n    }\n\n    boundary = \"frame\"\n    frame = gen_track_with_mask_stream(boundary, **args)\n    return Response(frame, mimetype=\"multipart/x-savi-stream; boundary=\" + boundary)",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "```python\nfrom flask import Flask, request, jsonify, send_file\nfrom werkzeug.exceptions import BadRequest\nimport os\n\napp = Flask(__name__)\n\nGALLERY_PATH = '/path/to/gallery/videos'\nPOSTERS_PATH = '/path/to/posters'\nUPLOADS_PATH = '/path/to/uploads'\n\n@app.route('/healthy', methods=['GET'])\ndef healthy():\n    return jsonify({\"status\": \"OK\"}), 200\n\n@app.route('/send-gallery-video', methods=['GET'])\ndef send_gallery_video():\n    path = request.args.get('path')\n    if not path:\n        raise BadRequest(\"Path parameter is required\")\n    if not os.path.exists(os.path.join(GALLERY_PATH, path)):\n        raise ValueError(\"File not found\")\n    return send_file(os.path.join(GALLERY_PATH, path))\n\n@app.route('/send-poster-image', methods=['GET'])\ndef send_poster_image():\n    path = request.args.get('path')\n    if not path:\n        raise BadRequest(\"Path parameter is required\")\n    if not os.path.exists(os.path.join(POSTERS_PATH, path)):\n        raise ValueError(\"File not found\")\n    return send_file(os.path.join(POSTERS_PATH, path))\n\n@app.route('/send-uploaded-video', methods=['GET'])\ndef send_uploaded_video():\n    path = request.args.get('path')\n    if not path:\n        raise BadRequest(\"Path parameter is required\")\n    if not os.path.exists(os.path.join(UPLOADS_PATH, path)):\n        raise ValueError(\"File not found\")\n    return send_file(os.path.join(UPLOADS_PATH, path))\n\n@app.route('/propagate-in-video', methods=['POST'])\ndef propagate_in_video():\n    data = request.get_json()\n    session_id = data.get('session_id')\n    start_frame_index = data.get('start_frame_index', 0)\n    # Video processing logic here\n    return jsonify({\"session_id\": session_id, \"start_frame_index\": start_frame_index})\n\nif __name__ == '__main__':\n    app.run()\n```"
  },
  {
    "Task_id": 142,
    "Instruction": "Task Description: Create a RESTful API gateway service using Flask that handles incoming requests, processes them through an MII client, and provides health check and termination endpoints.\n\nClass Description: RestfulGatewayThread is a threaded Flask server implementation that creates and manages a RESTful API gateway for interacting with an MII client. It handles request processing, health checks, and graceful shutdown.\n\nAttributes:\n\n_deployment_name: str - The name of the MII deployment to connect to\n_rest_host: str - The host address to bind the server to\n_rest_port: int - The port number to listen on\n_rest_procs: int - Number of processes to handle requests\n_stop_event: threading.Event - Event flag to track server status\nserver: werkzeug.serving.BaseWSGIServer - The Flask server instance\n\nMethods:\n\n__init__(deployment_name: str, rest_host: str, rest_port: int, rest_procs: int) -> None - Initializes the thread with server configuration parameters\n_create_server(deployment_name: str, rest_host: str, rest_port: int, rest_procs: int) -> werkzeug.serving.BaseWSGIServer - Creates and configures the Flask server with routes and resources\n_shutdown() -> None - Handles server shutdown after a configured timeout period\nrun() -> None - Starts the server and runs it indefinitely until shutdown\nget_stop_event() -> threading.Event - Returns the stop event for monitoring server status",
    "Canonical_solution": "from flask import Flask, request, jsonify\nfrom flask_restful import Resource, Api\nfrom werkzeug.serving import make_server\nimport threading\nimport time\nimport mii\nfrom mii.constants import RESTFUL_GATEWAY_SHUTDOWN_TIMEOUT, RESTFUL_API_PATH\n\nclass RestfulGatewayService(Resource):\n    def __init__(self, deployment_name):\n        super().__init__()\n        self.client = mii.client(deployment_name)\n\n    def post(self):\n        data = request.get_json()\n        result = self.client.generate(**data)\n        return jsonify([r.to_msg_dict() for r in result])\n\nclass RestfulGatewayThread(threading.Thread):\n    def __init__(self, deployment_name, rest_host, rest_port, rest_procs):\n        threading.Thread.__init__(self)\n        self._stop_event = threading.Event()\n        self.server = self._create_server(deployment_name, rest_host, rest_port, rest_procs)\n\n    def _create_server(self, deployment_name, rest_host, rest_port, rest_procs):\n        app = Flask(\"RestfulGateway\")\n\n        @app.route(\"/terminate\", methods=[\"GET\"])\n        def terminate():\n            threading.Thread(target=self._shutdown).start()\n            return \"Shutting down RESTful API gateway server\"\n\n        @app.route(\"/healthz\", methods=[\"GET\"])\n        def healthz():\n            return \"ok\"\n\n        api = Api(app)\n        path = \"/{}/{}\".format(RESTFUL_API_PATH, deployment_name)\n        api.add_resource(RestfulGatewayService, path, resource_class_args=(deployment_name,))\n\n        return make_server(rest_host, rest_port, app, threaded=False, processes=rest_procs)\n\n    def _shutdown(self):\n        time.sleep(RESTFUL_GATEWAY_SHUTDOWN_TIMEOUT)\n        self.server.shutdown()\n\n    def run(self):\n        self.server.serve_forever()\n        self._stop_event.set()\n\n    def get_stop_event(self):\n        return self._stop_event",
    "Code_level": "Class-level",
    "FSMID_for_test": 60,
    "right_result": "```python\nfrom flask import Flask\nfrom threading import Thread, Event\nfrom werkzeug.serving import BaseWSGIServer\nimport time\n\nclass RestfulGatewayThread(Thread):\n    def __init__(self, deployment_name: str, rest_host: str, rest_port: int, rest_procs: int) -> None:\n        super().__init__()\n        self._deployment_name = deployment_name\n        self._rest_host = rest_host\n        self._rest_port = rest_port\n        self._rest_procs = rest_procs\n        self._stop_event = Event()\n        self.server = None\n\n    def _create_server(self, deployment_name: str, rest_host: str, rest_port: int, rest_procs: int) -> BaseWSGIServer:\n        app = Flask(__name__)\n\n        @app.route('/health')\n        def health_check():\n            return 'OK', 200\n\n        @app.route('/shutdown', methods=['POST'])\n        def shutdown():\n            self._stop_event.set()\n            return 'Server shutting down', 200\n\n        self.server = BaseWSGIServer((rest_host, rest_port), app, threaded=True, processes=rest_procs)\n        return self.server\n\n    def _shutdown(self) -> None:\n        if self.server:\n            self.server.shutdown()\n            self.server.server_close()\n\n    def run(self) -> None:\n        self.server = self._create_server(self._deployment_name, self._rest_host, self._rest_port, self._rest_procs)\n        self.server.serve_forever()\n\n    def get_stop_event(self) -> Event:\n        return self._stop_event\n```"
  },
  {
    "Task_id": 143,
    "Instruction": "Task Description: Create a Flask-based HTTP server that manages and controls multiple learner and collector processes, allowing dynamic scaling of these processes through API calls.\n\nClass Description: FlaskOperatorServer is a class that wraps a Flask application to provide RESTful API endpoints for managing learner and collector process replicas. It interacts with a Creator instance to handle the actual process management.\n\nAttributes:\n- app: Flask - The Flask application instance\n- creator: Creator - The process manager that handles learner and collector instances\n- host: str - The host address where the server will run\n- port: int - The port number where the server will listen\n- api_version: str - The version prefix for API endpoints\n\nMethods:\n- __init__(creator, host: str, port: int, api_version: str = 'v1alpha1') -> None - Initializes the Flask server with process manager, host, port, and API version. Sets up route handlers.\n- run() -> None - Starts the Flask application server on the specified host and port.\n- post_replicas() -> dict - Handles POST requests to set the desired number of replicas (route: /{api_version}/replicas). Returns a response dictionary.\n- get_replicas() -> dict - Handles GET requests to retrieve current replica information (route: /{api_version}/replicas). Returns a response dictionary with current resources.",
    "Canonical_solution": "from flask import Flask, request\nimport json\nfrom threading import Thread\nfrom queue import Queue\n\nclass Creator:\n    def __init__(self, learner_addr, collector_addr):\n        self.learner_addr = learner_addr\n        self.collector_addr = collector_addr\n        self.collector_demand = Queue()\n        self.learner_demand = Queue()\n        self.learners = {}\n        self.collectors = {}\n        self.end_flag = False\n\n    def set_target_source(self, learner_target, collector_target):\n        self.collector_demand.put(collector_target)\n        self.learner_demand.put(learner_target)\n\n    def start(self):\n        while not self.end_flag:\n            if self.learner_demand.empty() and self.collector_demand.empty():\n                continue\n            else:\n                learner_demand, collector_demand = None, None\n                if not self.learner_demand.empty():\n                    learner_demand = self.learner_demand.get()\n                if not self.collector_demand.empty():\n                    collector_demand = self.collector_demand.get()\n\n                for i in range(collector_demand):\n                    name, host, port = self.collector_addr[i]\n                    self.collectors[name] = NaiveCollector(host, port, prefix=DATA_PREFIX)\n                    self.collectors[name].start()\n                for i in range(learner_demand):\n                    name, host, port = self.learner_addr[i]\n                    self.learners[name] = NaiveLearner(host, port, prefix=DATA_PREFIX)\n                    self.learners[name].start()\n\n    def close(self):\n        self.end_flag = True\n        for t in self.learners.values():\n            t.close()\n        for t in self.collectors.values():\n            t.close()\n\n    @property\n    def current_resource(self):\n        collectors = {k: {} for k in self.collectors}\n        learners = {k: {} for k in self.learners}\n        return {\"collectors\": collectors, 'learners': learners}\n\nclass FlaskOperatorServer:\n    def __init__(self, creator, host: str, port: int, api_version: str = 'v1alpha1'):\n        self.app = Flask(__name__)\n        self.creator = creator\n        self.host = host\n        self.port = port\n        self.api_version = api_version\n        \n        @self.app.route('/{}/replicas'.format(self.api_version), methods=['POST'])\n        def post_replicas():\n            data = json.loads(request.data.decode())\n            collectors = data['collectors'][\"replicas\"]\n            learners = data['learners'][\"replicas\"]\n            self.creator.set_target_source(learners, collectors)\n            return {'success': True, 'code': 0, 'message': '', 'data': ''}\n\n        @self.app.route('/{}/replicas'.format(self.api_version), methods=['GET'])\n        def get_replicas():\n            data = json.loads(request.data.decode())\n            return {'success': True, 'code': 0, 'message': '', 'data': self.creator.current_resource}\n\n    def run(self):\n        self.app.run(host=self.host, port=self.port)",
    "Code_level": "Class-level",
    "FSMID_for_test": 60,
    "right_result": "```python\nfrom flask import Flask, request, jsonify\n\nclass Creator:\n    def __init__(self):\n        pass\n\n    def create_learner(self):\n        pass\n\n    def create_collector(self):\n        pass\n\n    def destroy_learner(self):\n        pass\n\n    def destroy_collector(self):\n        pass\n\n    def get_replicas_info(self):\n        pass\n\nclass FlaskOperatorServer:\n    def __init__(self, creator, host: str, port: int, api_version: str = 'v1alpha1') -> None:\n        self.app = Flask(__name__)\n        self.creator = creator\n        self.host = host\n        self.port = port\n        self.api_version = api_version\n        self.app.route(f'/{api_version}/replicas', methods=['POST'])(self.post_replicas)\n        self.app.route(f'/{api_version}/replicas', methods=['GET'])(self.get_replicas)\n\n    def run(self) -> None:\n        self.app.run(self.host, self.port)\n\n    def post_replicas(self) -> dict:\n        data = request.get_json()\n        replicas = data.get('replicas')\n        response = {'message': 'Replicas updated', 'replicas': replicas}\n        return jsonify(response)\n\n    def get_replicas(self) -> dict:\n        replicas_info = self.creator.get_replicas_info()\n        response = {'message': 'Current replicas', 'replicas': replicas_info}\n        return jsonify(response)\n```"
  },
  {
    "Task_id": 144,
    "Instruction": "Task Description: Create a Flask-based HTTP server with multiple endpoints to handle different types of requests and responses.\n\nFunction Description: The code implements three Flask route handlers that demonstrate different aspects of HTTP request handling: delayed response, request method detection, and JSON response.\n\nInput:\n- For '/respond' endpoint: \n  - Query parameter 'time' (integer): Milliseconds to sleep before responding\n- For '/request_type' endpoint: \n  - None (automatically detects HTTP method)\n- For '/json' endpoint: \n  - None\n\nOutput:\n- For '/respond' endpoint: \n  - Response text: 'Response from Flask' \n  - Headers: Access-Control-Allow-Origin: *\n  - After specified delay\n- For '/request_type' endpoint: \n  - Response text: 'Request Type: [METHOD]' \n  - Headers: Access-Control-Allow-Origin: *\n- For '/json' endpoint: \n  - JSON response: {'resp': 'Hello JSON!'}",
    "Canonical_solution": "from flask import Flask, request, make_response\nfrom time import sleep\n\napp = Flask(__name__)\n\n@app.route('/respond')\ndef respond():\n    time_to_sleep = int(request.args.get('time')) / 1000\n    sleep(time_to_sleep)\n    resp = make_response('Response from Flask')\n    resp.headers['Access-Control-Allow-Origin'] = '*'\n    return resp\n\n@app.route('/request_type')\ndef request_type():\n    resp = make_response('Request Type: ' + request.method)\n    resp.headers['Access-Control-Allow-Origin'] = '*'\n    return resp\n\n@app.route('/json')\ndef json():\n    return {resp:'Hello JSON!'}",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n@app.route('/respond')\ndef respond():\n    time = int(request.args.get('time', 0))\n    time.sleep(time / 1000.0)\n    return 'Response from Flask', {'Access-Control-Allow-Origin': '*'}\n\n@app.route('/request_type')\ndef request_type():\n    method = request.method\n    return f'Request Type: {method}', {'Access-Control-Allow-Origin': '*'}\n\n@app.route('/json')\ndef json():\n    return jsonify({'resp': 'Hello JSON!'}), {'Access-Control-Allow-Origin': '*'}\n\nif __name__ == '__main__':\n    app.run()"
  },
  {
    "Task_id": 145,
    "Instruction": "Task Description: Create a Flask-based HTTP server that handles POST requests for game predictions, processing board state data and returning optimal actions.\n\nFunction Description: The `predict` function is a Flask route handler that processes incoming game board states, applies either an AlphaZero-inspired MCTS algorithm or a greedy random player to determine the best move, and returns the action as a response.\n\nInput:\n- HTTP POST request with form data containing:\n  - 'board': [string] - Comma-separated string representing the game board state\n\nOutput:\n- HTTP Response containing:\n  - Body: [string] - The predicted action index\n  - Headers: Includes CORS permission ('Access-Control-Allow-Origin': '*')",
    "Canonical_solution": "import os\nimport sys\nimport numpy as np\nfrom flask import Flask, request, Response\n\nsys.path.append(\"..\")\nfrom utils import dotdict\n\napp = Flask(__name__)\n\n@app.route('/predict', methods=['POST'])\ndef predict():\n    board = np.fromstring(request.form['board'], sep=',').reshape(g.getBoardSize())\n\n    use_alpha_zero = True\n    if use_alpha_zero:\n        action = np.argmax(mcts.getActionProb(board, temp=0))\n    else:\n        action = GreedyRandomPlayer(g).play(board)\n\n    resp = Response(str(action))\n    resp.headers['Access-Control-Allow-Origin'] = '*'\n    return resp\n\nif __name__ == '__main__':\n    app.run(debug=False, host='0.0.0.0', port=8888)",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, jsonify\nimport numpy as np\n\napp = Flask(__name__)\n\ndef predict(board):\n    # Convert board string to numpy array\n    board_array = np.array(board.split(','), dtype=int)\n    \n    # Apply MCTS or greedy random player to determine the best move\n    # Placeholder for actual implementation\n    best_move = np.argmax(board_array)\n    \n    return best_move\n\n@app.route('/predict', methods=['POST'])\ndef predict_route():\n    board = request.form.get('board')\n    if not board:\n        return jsonify({'error': 'No board provided'}), 400\n    \n    best_move = predict(board)\n    return jsonify({'action': best_move}), 200\n\nif __name__ == '__main__':\n    app.run(debug=True)"
  },
  {
    "Task_id": 146,
    "Instruction": "Task Description: Create a Flask web application that handles form submissions, stores the data in both text and CSV formats, and redirects to a thank you page upon successful submission.\n\nFunction Description: The function handles form submissions via POST and GET requests. For POST requests, it extracts form data, writes it to both a text file and CSV file, then redirects to a thank you page. For GET requests or errors, it returns an error message.\n\nInput: \n- HTTP request object (via Flask's request) containing form data with keys: \"email\", \"subject\", and \"message\"\n\nOutput:\n- For successful POST requests: HTTP redirect to './thank_you.html'\n- For GET requests or errors: String error message 'Something went wrong. Try again!'",
    "Canonical_solution": "from flask import Flask, render_template, request, redirect\nimport csv\napp = Flask(__name__)\n\n@app.route('/submit_form', methods=['POST', 'GET'])\ndef submit_form():\n\tif request.method == \"POST\":\n\t\tdata = request.form.to_dict()\n\t\twrite_to_csv(data)\n\t\twrite_to_txt(data)\n\t\treturn redirect('./thank_you.html')\n\telse:\n\t\treturn 'Something went wrong. Try again!'\n\ndef write_to_txt(data):\n\temail = data[\"email\"]\n\tsubject = data[\"subject\"]\n\tmessage = data[\"message\"]\n\twith open(\"./database.txt\", mode = 'a') as database:\n\t\ttext = database.write(f\"\\n{email},{subject},{message}\")\n\ndef write_to_csv(data):\n\temail = data[\"email\"]\n\tsubject = data[\"subject\"]\n\tmessage = data[\"message\"]\n\twith open(\"./database.csv\", mode = 'a', newline='') as database2:\n\t\tcsv_writer = csv.writer(database2, delimiter=',', quotechar='\"', quoting=csv.QUOTE_MINIMAL)\n\t\tcsv_writer.writerow([email, subject, message])",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, redirect, render_template_string\n\napp = Flask(__name__)\n\n@app.route('/form', methods=['GET', 'POST'])\ndef form():\n    if request.method == 'POST':\n        email = request.form.get('email')\n        subject = request.form.get('subject')\n        message = request.form.get('message')\n        with open('data.txt', 'a') as f:\n            f.write(f\"Email: {email}, Subject: {subject}, Message: {message}\\n\")\n        with open('data.csv', 'a') as f:\n            f.write(f\"{email},{subject},{message}\\n\")\n        return redirect('./thank_you.html')\n    else:\n        return 'Something went wrong. Try again!'\n\nif __name__ == '__main__':\n    app.run(debug=True)"
  },
  {
    "Task_id": 148,
    "Instruction": "Task Description: Create a Flask-based web service that predicts cricket match scores based on various input parameters including teams, overs, runs, and wickets.\n\nFunction Description: The `predict()` function is a Flask route handler that processes POST requests containing cricket match data, converts the input into a feature vector, uses a pre-trained model to predict the score range, and returns an HTML response with the prediction.\n\nInput:\n- HTTP POST request with form data containing:\n  - 'batting-team': [str] - Name of the batting team (one of 8 possible teams)\n  - 'bowling-team': [str] - Name of the bowling team (one of 8 possible teams)\n  - 'overs': [float] - Current over count in the match\n  - 'runs': [int] - Total runs scored so far\n  - 'wickets': [int] - Total wickets lost so far\n  - 'runs_in_prev_5': [int] - Runs scored in previous 5 overs\n  - 'wickets_in_prev_5': [int] - Wickets lost in previous 5 overs\n\nOutput:\n- Rendered HTML template ('index1.html') containing:\n  - 'prediction_text': [str] - Formatted string showing predicted score range (prediction \u00b1 margin)",
    "Canonical_solution": "from flask import Flask, render_template, request\nimport pickle\nimport numpy as np\n\nfilename = 'model.pkl'\nregressor = pickle.load(open(filename, 'rb'))\n\napp = Flask(__name__)\n\n@app.route('/predict', methods=['POST'])\ndef predict():\n    temp_array = list()\n    \n    if request.method == 'POST':\n        \n        batting_team = request.form['batting-team']\n        if batting_team == 'Chennai Super Kings':\n            temp_array = temp_array + [1,0,0,0,0,0,0,0]\n        elif batting_team == 'Delhi Daredevils':\n            temp_array = temp_array + [0,1,0,0,0,0,0,0]\n        elif batting_team == 'Kings XI Punjab':\n            temp_array = temp_array + [0,0,1,0,0,0,0,0]\n        elif batting_team == 'Kolkata Knight Riders':\n            temp_array = temp_array + [0,0,0,1,0,0,0,0]\n        elif batting_team == 'Mumbai Indians':\n            temp_array = temp_array + [0,0,0,0,1,0,0,0]\n        elif batting_team == 'Rajasthan Royals':\n            temp_array = temp_array + [0,0,0,0,0,1,0,0]\n        elif batting_team == 'Royal Challengers Bangalore':\n            temp_array = temp_array + [0,0,0,0,0,0,1,0]\n        elif batting_team == 'Sunrisers Hyderabad':\n            temp_array = temp_array + [0,0,0,0,0,0,0,1]\n            \n            \n        bowling_team = request.form['bowling-team']\n        if bowling_team == 'Chennai Super Kings':\n            temp_array = temp_array + [1,0,0,0,0,0,0,0]\n        elif bowling_team == 'Delhi Daredevils':\n            temp_array = temp_array + [0,1,0,0,0,0,0,0]\n        elif bowling_team == 'Kings XI Punjab':\n            temp_array = temp_array + [0,0,1,0,0,0,0,0]\n        elif bowling_team == 'Kolkata Knight Riders':\n            temp_array = temp_array + [0,0,0,1,0,0,0,0]\n        elif bowling_team == 'Mumbai Indians':\n            temp_array = temp_array + [0,0,0,0,1,0,0,0]\n        elif bowling_team == 'Rajasthan Royals':\n            temp_array = temp_array + [0,0,0,0,0,1,0,0]\n        elif bowling_team == 'Royal Challengers Bangalore':\n            temp_array = temp_array + [0,0,0,0,0,0,1,0]\n        elif bowling_team == 'Sunrisers Hyderabad':\n            temp_array = temp_array + [0,0,0,0,0,0,0,1]\n            \n            \n        overs = float(request.form['overs'])\n        runs = int(request.form['runs'])\n        wickets = int(request.form['wickets'])\n        runs_in_prev_5 = int(request.form['runs_in_prev_5'])\n        wickets_in_prev_5 = int(request.form['wickets_in_prev_5'])\n        \n        temp_array = temp_array + [overs, runs, wickets, runs_in_prev_5, wickets_in_prev_5]\n        \n        data = np.array([temp_array])\n        my_prediction = int(regressor.predict(data)[0])\n              \n        return render_template('index1.html',prediction_text=\"Predicted score ranges between {} to {}\".format(my_prediction-10,my_prediction+5))",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, render_template_string\nimport numpy as np\n\napp = Flask(__name__)\n\n@app.route('/predict', methods=['POST'])\ndef predict():\n    batting_team = request.form['batting-team']\n    bowling_team = request.form['bowling-team']\n    overs = float(request.form['overs'])\n    runs = int(request.form['runs'])\n    wickets = int(request.form['wickets'])\n    runs_in_prev_5 = int(request.form['runs-in-prev-5'])\n    wickets_in_prev_5 = int(request.form['wickets-in-prev-5'])\n\n    # Convert input to feature vector\n    features = np.array([batting_team, bowling_team, overs, runs, wickets, runs_in_prev_5, wickets_in_prev_5])\n\n    # Use pre-trained model to predict score range\n    prediction = model.predict(features)\n    margin = 10  # Assuming a margin of 10 for demonstration purposes\n\n    # Format prediction string\n    prediction_text = f\"Predicted score range: {prediction - margin} to {prediction + margin}\"\n\n    # Render HTML template with prediction\n    return render_template_string(open('index1.html').read(), prediction_text=prediction_text)\n\nif __name__ == '__main__':\n    app.run(debug=True)"
  },
  {
    "Task_id": 149,
    "Instruction": "Task Description: Create a Flask web application that handles HTTP requests on a '/hello' endpoint, processes form data, and returns a rendered HTML template with the processed data.\n\nFunction Description: The function 'hello' is a Flask route handler that responds to both GET and POST requests at the '/hello' endpoint. It retrieves form data from the request, processes it, and renders an HTML template ('greeting.html') with the form data as template variables.\n\nInput: \n- The function receives HTTP requests (GET or POST) containing form data with two fields:\n  - 'say': [str] - The greeting message to be displayed\n  - 'to': [str] - The recipient of the greeting\n\nOutput:\n- Returns a rendered HTML template ('greeting.html') populated with the form data:\n  - Template variable 'say' contains the greeting message\n  - Template variable 'to' contains the recipient name",
    "Canonical_solution": "from flask import Flask, render_template, request\n\napp = Flask(__name__)\n\n@app.route('/hello', methods=['GET', 'POST'])\ndef hello():\n    return render_template('greeting.html', say=request.form['say'], to=request.form['to'])\n\nif __name__ == \"__main__\":\n    app.run()",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, render_template, request\n\n@app.route('/hello', methods=['GET', 'POST'])\ndef hello():\n    if request.method == 'POST':\n        say = request.form['say']\n        to = request.form['to']\n        return render_template('greeting.html', say=say, to=to)\n    return render_template('greeting.html')"
  },
  {
    "Task_id": 150,
    "Instruction": "Task Description: Create a Flask-based HTTP server endpoint that processes Pub/Sub messages containing CircleCI event data, validates and extracts relevant information, and stores it in BigQuery. The endpoint should handle JSON payloads, validate message structure, and process specific CircleCI event types.\n\nFunction Description: The `index` function is a Flask route handler for POST requests at the root path (\"/\"). It receives Pub/Sub messages containing CircleCI event data, validates the message structure, processes the event if it's a supported type, and stores the processed data in BigQuery. Invalid messages or processing errors are logged with appropriate warnings.\n\nInput: \n- HTTP POST request with JSON payload containing Pub/Sub message format:\n  {\n    \"message\": {\n      \"attributes\": {\n        \"headers\": \"JSON string containing CircleCI headers\",\n        ...other attributes\n      },\n      \"data\": \"base64-encoded event data\",\n      \"message_id\": \"unique message identifier\"\n    }\n  }\n\nOutput: \n- HTTP response with status code 204 (No Content) on successful processing\n- Error responses with appropriate status codes for invalid requests\n- Warning logs for processing errors that don't prevent HTTP response\n\nThe `process_circleci_event` helper function processes valid CircleCI events by extracting and formatting relevant data from the message.\n\nFunction Description: The `process_circleci_event` function extracts and formats CircleCI event data from message headers and payload. It validates the event type and creates a standardized event object for storage.\n\nInput:\n- headers: dict - Contains CircleCI event metadata including:\n  - \"Circleci-Event-Type\": string - The type of CircleCI event\n  - \"Circleci-Signature\": string - Verification signature\n- msg: dict - The Pub/Sub message containing:\n  - \"data\": string - base64-encoded JSON payload\n  - \"message_id\": string - Unique message identifier\n\nOutput:\n- dict - Formatted event data containing:\n  - \"event_type\": string - CircleCI event type\n  - \"id\": string - Event identifier\n  - \"metadata\": string - JSON string of full event data\n  - \"time_created\": string - Timestamp of event\n  - \"signature\": string - Verification signature\n  - \"msg_id\": string - Pub/Sub message ID\n  - \"source\": string - Constant \"circleci\" identifier",
    "Canonical_solution": "import base64\nimport os\nimport json\nimport shared\nfrom flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route(\"/\", methods=[\"POST\"])\ndef index():\n    \"\"\"\n    Receives messages from a push subscription from Pub/Sub.\n    Parses the message, and inserts it into BigQuery.\n    \"\"\"\n    event = None\n    if not request.is_json:\n        raise Exception(\"Expecting JSON payload\")\n    envelope = request.get_json()\n\n    if \"message\" not in envelope:\n        raise Exception(\"Not a valid Pub/Sub Message\")\n    msg = envelope[\"message\"]\n\n    if \"attributes\" not in msg:\n        raise Exception(\"Missing pubsub attributes\")\n\n    try:\n        attr = msg[\"attributes\"]\n\n        if \"headers\" in attr:\n            headers = json.loads(attr[\"headers\"])\n\n            if \"Circleci-Event-Type\" in headers:\n                event = process_circleci_event(headers, msg)\n\n        shared.insert_row_into_bigquery(event)\n\n    except Exception as e:\n        entry = {\n                \"severity\": \"WARNING\",\n                \"msg\": \"Data not saved to BigQuery\",\n                \"errors\": str(e),\n                \"json_payload\": envelope\n            }\n        print(json.dumps(entry))\n\n    return \"\", 204\n\ndef process_circleci_event(headers, msg):\n    event_type = headers[\"Circleci-Event-Type\"]\n    signature = headers[\"Circleci-Signature\"]\n    metadata = json.loads(base64.b64decode(msg[\"data\"]).decode(\"utf-8\").strip())\n    types = {\"workflow-completed\", \"job-completed\"}\n\n    if event_type not in types:\n        raise Exception(\"Unsupported CircleCI event: '%s'\" % event_type)\n\n    circleci_event = {\n        \"event_type\": event_type,\n        \"id\": metadata[\"id\"],\n        \"metadata\": json.dumps(metadata),\n        \"time_created\": metadata[\"happened_at\"],\n        \"signature\": signature,\n        \"msg_id\": msg[\"message_id\"],\n        \"source\": \"circleci\",\n    }\n\n    return circleci_event",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, jsonify\nimport base64\nimport json\nimport logging\nfrom google.cloud import bigquery\n\napp = Flask(__name__)\n\n@app.route('/', methods=['POST'])\ndef index():\n    try:\n        data = request.get_json()\n        message = data.get('message')\n        if not message:\n            logging.warning(\"Invalid message structure\")\n            return jsonify({\"error\": \"Invalid message structure\"}), 400\n\n        attributes = message.get('attributes')\n        headers = json.loads(attributes.get('headers', '{}'))\n        event_data = base64.b64decode(message.get('data')).decode('utf-8')\n        event = json.loads(event_data)\n\n        if headers.get('Circleci-Event-Type') not in ['pipeline.start', 'pipeline.stop']:\n            logging.warning(\"Unsupported CircleCI event type\")\n            return jsonify({\"error\": \"Unsupported CircleCI event type\"}), 400\n\n        processed_event = process_circleci_event(headers, message)\n        store_in_bigquery(processed_event)\n        return jsonify({\"status\": \"success\"}), 204\n\n    except Exception as e:\n        logging.warning(f\"Error processing message: {str(e)}\")\n        return jsonify({\"error\": \"Error processing message\"}), 500\n\ndef process_circleci_event(headers, msg):\n    event_type = headers.get('Circleci-Event-Type')\n    event_id = msg.get('message_id')\n    metadata = json.dumps(headers)\n    time_created = headers.get('Circleci-Time')\n    signature = headers.get('Circleci-Signature')\n    msg_id = msg.get('message_id')\n    source = 'circleci'\n\n    return {\n        \"event_type\": event_type,\n        \"id\": event_id,\n        \"metadata\": metadata,\n        \"time_created\": time_created,\n        \"signature\": signature,\n        \"msg_id\": msg_id,\n        \"source\": source\n    }\n\ndef store_in_bigquery(event_data):\n    client = bigquery.Client()\n    table_id = 'your_project.your_dataset.your_table'\n    table = client.get_table(table_id)\n    rows_to_insert = [event_data]\n    errors = client.insert_rows_json(table, rows_to_insert)\n    if errors:\n        logging.warning(f\"Failed to insert rows: {errors}\")\n\nif __name__ == '__main__':\n    app.run(debug=True)"
  },
  {
    "Task_id": 151,
    "Instruction": "Task Description: Create a Python class that implements a web server using Flask framework with authentication, search functionality, and WebSocket support. The server should handle HTTP requests, manage user sessions, and provide search capabilities against a data model.\n\nClass Description: MalcomWeb is a Process subclass that implements a web server with Flask. It handles HTTP requests, manages authentication, provides search functionality against a data model, and supports WebSocket connections. The server can be configured through a setup dictionary and runs in its own process.\n\nAttributes:\n\nlisten_port: [int] - The port number on which the server listens\nlisten_interface: [str] - The network interface on which the server listens\nsetup: [dict] - Configuration dictionary for server settings\nhttp_server: [WSGIServer] - Instance of the WSGI server\napp: [Flask] - Flask application instance\n\nMethods:\n\n__init__: [Name](auth, listen_port, listen_interface, setup) -> [None] - Initializes the web server process with authentication settings, port, interface, and configuration\nrun: [Name]() -> [None] - Starts the server process (inherited from Process)\nstop_server: [Name]() -> [None] - Stops the server (currently just a placeholder)\nstart_server: [Name]() -> [None] - Configures and starts the Flask application with routes and WebSocket support\nindex: [Name]() -> [Response] - Route handler for the root URL (requires login)\nsearch: [Name](term=\"\") -> [Response] - Route handler for search functionality (requires login), processes both GET and POST requests",
    "Canonical_solution": "from flask import Flask, request, render_template, redirect, url_for, make_response\nfrom gevent.pywsgi import WSGIServer\nfrom geventwebsocket.handler import WebSocketHandler\nfrom multiprocessing import Process\n\nclass MalcomWeb(Process):\n    def __init__(self, auth, listen_port, listen_interface, setup):\n        super(MalcomWeb, self).__init__()\n        self.setup = setup\n        self.listen_port = setup['LISTEN_PORT']\n        self.listen_interface = setup['LISTEN_INTERFACE']\n        self.http_server = None\n        self.app = Flask(__name__)\n        self.app.secret_key = os.urandom(24)\n        self.app.debug = True\n\n    def run(self):\n        self.start_server()\n\n    def stop_server(self):\n        pass\n\n    def start_server(self):\n        if not self.setup['AUTH']:\n            self.app.config['LOGIN_DISABLED'] = True\n\n        self.app.config['MODEL'] = ModelClass(self.setup)\n        self.app.config['USER_MANAGER'] = UserManagerClass(self.setup)\n\n        lm.init_app(self.app)\n        lm.login_view = 'login'\n        lm.session_protection = 'strong'\n        lm.anonymous_user = self.app.config['USER_MANAGER'].get_default_user\n\n        for key in self.setup:\n            self.app.config[key] = self.setup[key]\n        self.app.config['UPLOAD_DIR'] = \"\"\n\n        self.app.config['MESSENGER'] = WebMessenger()\n\n        @self.app.route('/')\n        @login_required\n        def index():\n            return redirect(url_for('search'))\n\n        @self.app.route('/search/', methods=['GET', 'POST'])\n        @login_required\n        def search(term=\"\"):\n            if request.method == 'POST':\n                field = 'value'\n                query = [{field: r.strip()} for r in request.form['bulk-text'].split('\\r\\n') if r.strip() != '']\n                result_set = self.app.config['MODEL'].find({'$or': query})\n            else:\n                query = request.args.get('query', False)\n                if query:\n                    query = query.strip()\n                field = request.args.get('field', 'value').strip()\n                if not bool(request.args.get('strict', False)):\n                    result_set = self.app.config['MODEL'].find({field: query})\n                else:\n                    result_set = self.app.config['MODEL'].find({field: re.compile(re.escape(query), re.IGNORECASE)})\n\n            if query == False:\n                return render_template('search.html', history=self.app.config['MODEL'].get_history())\n            elif query == \"\":\n                flash('Empty search query is empty.')\n                return redirect(url_for('search'))\n\n            base_elts = []\n            base_ids = []\n            evil_elts = {}\n\n            for e in result_set:\n                base_elts.append(e)\n                base_ids.append(e['_id'])\n                if 'evil' in e['tags']:\n                    evil_elts[e['_id']] = e\n\n            if len(base_elts) == 0 and request.method == 'GET':\n                if not bool(request.args.get('log', False)):\n                    flash('\"{}\" was not found. Use the checkbox above to add it to the database'.format(query))\n                    return render_template('search.html', term=query, history=self.app.config['MODEL'].get_history())\n                else:\n                    new = self.app.config['MODEL'].add_text([query], tags=['search'])\n                    if new:\n                        flash('\"{}\" was not found. It was added to the database (ID: {})'.format(query, new['_id']))\n                        self.app.config['MODEL'].add_to_history(query)\n                    else:\n                        flash('\"{}\" did not convert to a viable datatype'.format(query))\n                    return render_template('search.html', term=query, history=self.app.config['MODEL'].get_history())\n\n            if len(base_elts) == 0 and request.method == 'POST':\n                flash('Your query did not yield any results. Use the checkbox above to add it to the database')\n                return render_template('search.html', history=self.app.config['MODEL'].get_history())\n\n            return find_related(field, query, base_elts, base_ids, evil_elts)\n\n        self.http_server = WSGIServer((self.listen_interface, self.listen_port), self.app, handler_class=WebSocketHandler)\n        self.http_server.serve_forever()",
    "Code_level": "Class-level",
    "FSMID_for_test": 60,
    "right_result": "```python\nfrom flask import Flask, request, jsonify, session, Response\nfrom flask_socketio import SocketIO, emit\nfrom multiprocessing import Process\nimport json\n\nclass MalcomWeb(Process):\n    def __init__(self, auth, listen_port, listen_interface, setup):\n        super().__init__()\n        self.listen_port = listen_port\n        self.listen_interface = listen_interface\n        self.setup = setup\n        self.http_server = None\n        self.app = Flask(__name__)\n        self.app.secret_key = 'secret!'\n        self.socketio = SocketIO(self.app)\n        self.auth = auth\n\n    def run(self):\n        self.http_server = self.app.run(host=self.listen_interface, port=self.listen_port)\n\n    def stop_server(self):\n        self.http_server.shutdown()\n\n    def start_server(self):\n        @self.app.route('/')\n        def index():\n            if 'username' not in session:\n                return 'Unauthorized', 401\n            return 'Welcome to the home page!', 200\n\n        @self.app.route('/search', methods=['GET', 'POST'])\n        def search():\n            if 'username' not in session:\n                return 'Unauthorized', 401\n            term = request.args.get('term', '')\n            if request.method == 'POST':\n                term = request.form['term']\n            # Search functionality here\n            return jsonify({'results': 'Search results for ' + term})\n\n        @self.app.route('/login', methods=['POST'])\n        def login():\n            username = request.form['username']\n            password = request.form['password']\n            if username == self.auth['username'] and password == self.auth['password']:\n                session['username'] = username\n                return 'Login successful', 200\n            return 'Invalid credentials', 401\n\n        @self.app.route('/logout')\n        def logout():\n            session.pop('username', None)\n            return 'Logout successful', 200\n\n        self.socketio.on('message', lambda message: emit('message', message, broadcast=True))\n        self.socketio.on('connect', lambda: emit('message', 'Connected'))\n        self.socketio.on('disconnect', lambda: emit('message', 'Disconnected'))\n\n        self.run()\n\n    def index(self):\n        return Response('Welcome to the home page!', 200)\n\n    def search(self, term=''):\n        return Response('Search results for ' + term, 200)\n```"
  },
  {
    "Task_id": 152,
    "Instruction": "Task Description: Create a Flask-based REST API for user management with configurable behaviors for testing various API scenarios.\n\nClass Description: FlaskAPI is a class that implements a RESTful API server using Flask. It provides endpoints for user CRUD operations and order deletion, with configurable behaviors to simulate different API response scenarios for testing purposes.\n\nAttributes:\n\napp: [Flask] - The Flask application instance\nconfig: [AppConfig] - Configuration object controlling API behavior\nnext_user_id: [int] - Counter for generating new user IDs\nlast_modified: [str] - Timestamp for last modification\nusers: [dict] - Dictionary storing user data\ndeleted_orders: [set] - Set tracking deleted order IDs\n\nMethods:\n\n__init__: [None]() -> [None] - Initializes the Flask application and sets up routes\n_setup_routes: [None]() -> [None] - Private method that defines all API endpoints\nget_spec: [None]() -> [Response] - Returns OpenAPI specification\nget_user: [None](user_id: int) -> [Response] - Retrieves a user by ID\nlist_users: [None]() -> [Response] - Lists all users\ncreate_user: [None]() -> [Response] - Creates a new user\nupdate_user: [None](user_id: int) -> [Response] - Updates a user by ID\ndelete_user: [None](user_id: int) -> [Response] - Deletes a user by ID\ndelete_order: [None](order_id: str) -> [Response] - Handles order deletion\ncheck_auth: [None]() -> [None] - Middleware for authorization checking",
    "Canonical_solution": "from flask import Flask, jsonify, request\nfrom typing import Literal, Union\nfrom dataclasses import dataclass\n\n@dataclass\nclass AppConfig:\n    use_after_free: bool = False\n    ensure_resource_availability: bool = False\n    merge_body: bool = True\n    independent_500: bool = False\n    failure_behind_failure: bool = False\n    multiple_conformance_issues: bool = False\n    unsatisfiable: bool = False\n    custom_headers: dict | None = None\n    multiple_source_links: bool = False\n    auth_token: str | None = None\n    ignored_auth: bool = False\n    slowdown: float | int | None = None\n    multiple_incoming_links_with_same_status: bool = False\n    duplicate_operation_links: bool = False\n    circular_links: bool = False\n    invalid_parameter: bool = False\n    list_users_as_root: bool = False\n    no_reliable_transitions: bool = False\n    return_plain_text: Literal[False] | str | bytes = False\n    omit_required_field: bool = False\n\nclass FlaskAPI:\n    def __init__(self):\n        self.app = Flask(__name__)\n        self.config = AppConfig()\n        self.next_user_id = 1\n        self.last_modified = \"2021-01-01T00:00:00Z\"\n        self.users = {0: {\"id\": 0, \"name\": \"John Doe\", \"last_modified\": self.last_modified}}\n        self.deleted_orders = set()\n        self._setup_routes()\n\n    def _setup_routes(self):\n        @self.app.route(\"/openapi.json\", methods=[\"GET\"])\n        def get_spec():\n            return jsonify(self.app.config[\"schema\"])\n\n        @self.app.route(\"/users/<int:user_id>\", methods=[\"GET\"])\n        def get_user(user_id):\n            if self.config.slowdown:\n                time.sleep(self.config.slowdown)\n            user = self.users.get(user_id)\n            if user:\n                if self.config.return_plain_text is not False:\n                    return self.config.return_plain_text, 200, {\"Content-Type\": \"text/plain\"}\n                if self.config.omit_required_field:\n                    return jsonify({\"name\": user[\"name\"], \"last_modified\": user[\"last_modified\"]})\n                return jsonify(user)\n            return jsonify({\"error\": \"User not found\"}), 404\n\n        @self.app.route(\"/users\", methods=[\"GET\"])\n        def list_users():\n            return jsonify(self.users)\n\n        @self.app.route(\"/users\", methods=[\"POST\"])\n        def create_user():\n            if self.config.slowdown:\n                time.sleep(self.config.slowdown)\n            data = request.get_json()\n            if not isinstance(data, dict):\n                return jsonify({\"error\": \"Invalid input\"}), 400\n            name = data.get(\"name\")\n            if name is None:\n                return jsonify({\"error\": \"Name is required\"}), 400\n\n            new_user = {\"id\": self.next_user_id, \"name\": name, \"last_modified\": self.last_modified}\n            if not self.config.ensure_resource_availability:\n                self.users[self.next_user_id] = new_user\n            self.next_user_id += 1\n\n            if self.config.omit_required_field:\n                return jsonify({\"name\": new_user[\"name\"], \"last_modified\": new_user[\"last_modified\"]}), 201\n            return jsonify(new_user), 201\n\n        @self.app.route(\"/users/<int:user_id>\", methods=[\"PATCH\"])\n        def update_user(user_id):\n            if self.config.slowdown:\n                time.sleep(self.config.slowdown)\n            user = self.users.get(user_id)\n            if user:\n                data = request.get_json()\n                if not self.config.merge_body:\n                    assert len(data) == 1\n                else:\n                    assert \"name\" in data\n                    user[\"name\"] = data[\"name\"]\n                return jsonify(user)\n            return jsonify({\"error\": \"User not found\"}), 404\n\n        @self.app.route(\"/users/<int:user_id>\", methods=[\"DELETE\"])\n        def delete_user(user_id):\n            if self.config.slowdown:\n                time.sleep(self.config.slowdown)\n            user = self.users.get(user_id)\n            if user:\n                if self.config.use_after_free:\n                    if len(user[\"name\"]) < 10:\n                        del self.users[user_id]\n                else:\n                    del self.users[user_id]\n                return jsonify({\"message\": \"User deleted successfully\"}), 204\n            return jsonify({\"error\": \"User not found\"}), 404\n\n        @self.app.route(\"/orders/<order_id>\", methods=[\"DELETE\"])\n        def delete_order(order_id):\n            if self.config.slowdown:\n                time.sleep(self.config.slowdown)\n            if order_id in self.deleted_orders:\n                return jsonify({\"error\": \"Order not found\"}), 404\n            self.deleted_orders.add(order_id)\n            return jsonify({\"message\": \"Nothing happened\"}), 200\n\n        @self.app.before_request\n        def check_auth():\n            if not (self.config.ignored_auth or self.config.auth_token is None or request.endpoint == get_spec.__name__):\n                auth_header = request.headers.get(\"Authorization\")\n                if not auth_header:\n                    abort(401, description=\"Authorization header is missing\")\n                try:\n                    token_type, token = auth_header.split()\n                    if token_type.lower() != \"bearer\" or token != self.config.auth_token:\n                        abort(401, description=\"Invalid token\")\n                except ValueError:\n                    abort(401, description=\"Invalid Authorization header format\")",
    "Code_level": "Class-level",
    "FSMID_for_test": 60,
    "right_result": "```python\nfrom flask import Flask, request, jsonify\nfrom datetime import datetime\nfrom functools import wraps\n\nclass FlaskAPI:\n    def __init__(self):\n        self.app = Flask(__name__)\n        self.config = AppConfig()\n        self.next_user_id = 1\n        self.last_modified = datetime.now().isoformat()\n        self.users = {}\n        self.deleted_orders = set()\n        self._setup_routes()\n\n    def _setup_routes(self):\n        @self.app.route('/spec', methods=['GET'])\n        def get_spec():\n            return jsonify(self.get_spec())\n\n        @self.app.route('/users', methods=['GET'])\n        def list_users():\n            return jsonify(self.list_users())\n\n        @self.app.route('/users/<int:user_id>', methods=['GET'])\n        def get_user(user_id):\n            return jsonify(self.get_user(user_id))\n\n        @self.app.route('/users', methods=['POST'])\n        def create_user():\n            return jsonify(self.create_user())\n\n        @self.app.route('/users/<int:user_id>', methods=['PUT'])\n        def update_user(user_id):\n            return jsonify(self.update_user(user_id))\n\n        @self.app.route('/users/<int:user_id>', methods=['DELETE'])\n        def delete_user(user_id):\n            return jsonify(self.delete_user(user_id))\n\n        @self.app.route('/orders/<str:order_id>', methods=['DELETE'])\n        def delete_order(order_id):\n            return jsonify(self.delete_order(order_id))\n\n    def get_spec(self):\n        # Generate OpenAPI specification\n        pass\n\n    def get_user(self, user_id):\n        # Retrieve a user by ID\n        pass\n\n    def list_users(self):\n        # Lists all users\n        pass\n\n    def create_user(self):\n        # Creates a new user\n        pass\n\n    def update_user(self, user_id):\n        # Updates a user by ID\n        pass\n\n    def delete_user(self, user_id):\n        # Deletes a user by ID\n        pass\n\n    def delete_order(self, order_id):\n        # Handles order deletion\n        pass\n\n    def check_auth(self, f):\n        @wraps(f)\n        def decorated_function(*args, **kwargs):\n            # Authorization checking\n            return f(*args, **kwargs)\n        return decorated_function\n```"
  },
  {
    "Task_id": 153,
    "Instruction": "Task Description: Create a Flask-based HTTP server class that handles user authentication, request rate limiting, and database interactions, with the ability to run in both development and production environments.\n\nClass Description: FlaskServer is a class that encapsulates a Flask web application with user authentication, rate limiting, and database connectivity features. It provides routes for main page display and user login functionality, along with supporting methods for database operations and request handling.\n\nAttributes:\n- app: Flask - The Flask application instance\n- limiter: Limiter - Rate limiting controller for the application\n- SECRET_KEY: str - Secret key for session management\n\nMethods:\n- __init__() -> None - Initializes the Flask application, sets up rate limiting, and configures routes and secret key\n- _setup_routes() -> None - Defines all application routes and request handlers (internal method)\n- connect_db() -> sqlite3.Connection - Establishes connection to SQLite database\n- query_db(query: str, args: tuple = (), one: bool = False) -> Union[list, dict, None] - Executes database query and returns results\n- get_user_id(username: str) -> Union[int, None] - Retrieves user ID from database by username\n- papers_filter_version(papers: list, v: str) -> list - Filters papers by version number\n- default_context(papers: list, **kws) -> dict - Creates default template context with papers data\n- run(port: int = 5000, debug: bool = False, prod: bool = False) -> None - Starts the server in either development or production mode\n\nRoute Handlers (defined in _setup_routes):\n- before_request() -> None - Sets up database connection and user session before each request\n- teardown_request(exception: Exception) -> None - Closes database connection after each request\n- intmain() -> str - Handles root route, displays main page with papers\n- login() -> Response - Handles user login POST requests, manages authentication",
    "Canonical_solution": "from flask import Flask, request, session, url_for, redirect, render_template, abort, g, flash, _app_ctx_stack\nfrom flask_limiter import Limiter\nfrom werkzeug import check_password_hash, generate_password_hash\nimport pymongo\nimport time\nfrom sqlite3 import dbapi2 as sqlite3\n\nclass FlaskServer:\n    def __init__(self):\n        self.app = Flask(__name__)\n        self.limiter = Limiter(self.app, global_limits=[\"100 per hour\", \"20 per minute\"])\n        self._setup_routes()\n        \n        # Database configuration\n        if os.path.isfile('secret_key.txt'):\n            SECRET_KEY = open('secret_key.txt', 'r').read()\n        else:\n            SECRET_KEY = 'devkey, should be in a file'\n        self.app.config['SECRET_KEY'] = SECRET_KEY\n\n    def _setup_routes(self):\n        @self.app.before_request\n        def before_request():\n            g.db = self.connect_db()\n            g.user = None\n            if 'user_id' in session:\n                g.user = self.query_db('select * from user where user_id = ?',\n                                    [session['user_id']], one=True)\n\n        @self.app.teardown_request\n        def teardown_request(exception):\n            db = getattr(g, 'db', None)\n            if db is not None:\n                db.close()\n\n        @self.app.route(\"/\")\n        def intmain():\n            vstr = request.args.get('vfilter', 'all')\n            papers = [db[pid] for pid in DATE_SORTED_PIDS]\n            papers = self.papers_filter_version(papers, vstr)\n            ctx = self.default_context(papers, render_format='recent',\n                                    msg='Showing most recent Arxiv papers:')\n            return render_template('main.html', **ctx)\n\n        @self.app.route('/login', methods=['POST'])\n        def login():\n            if not request.form['username']:\n                flash('You have to enter a username')\n            elif not request.form['password']:\n                flash('You have to enter a password')\n            elif self.get_user_id(request.form['username']) is not None:\n                user = self.query_db('''select * from user where\n                    username = ?''', [request.form['username']], one=True)\n                if check_password_hash(user['pw_hash'], request.form['password']):\n                    session['user_id'] = self.get_user_id(request.form['username'])\n                    flash('User ' + request.form['username'] + ' logged in.')\n                else:\n                    flash('User ' + request.form['username'] + ' already exists, wrong password.')\n            else:\n                creation_time = int(time.time())\n                g.db.execute('''insert into user (username, pw_hash, creation_time) values (?, ?, ?)''',\n                    [request.form['username'], \n                    generate_password_hash(request.form['password']), \n                    creation_time])\n                user_id = g.db.execute('select last_insert_rowid()').fetchall()[0][0]\n                g.db.commit()\n                session['user_id'] = user_id\n                flash('New account %s created' % (request.form['username'], ))\n            return redirect(url_for('intmain'))\n\n    def connect_db(self):\n        sqlite_db = sqlite3.connect(Config.database_path)\n        sqlite_db.row_factory = sqlite3.Row\n        return sqlite_db\n\n    def query_db(self, query, args=(), one=False):\n        cur = g.db.execute(query, args)\n        rv = cur.fetchall()\n        return (rv[0] if rv else None) if one else rv\n\n    def get_user_id(self, username):\n        rv = self.query_db('select user_id from user where username = ?',\n                        [username], one=True)\n        return rv[0] if rv else None\n\n    def papers_filter_version(self, papers, v):\n        if v != '1': \n            return papers\n        intv = int(v)\n        filtered = [p for p in papers if p['_version'] == intv]\n        return filtered\n\n    def default_context(self, papers, **kws):\n        top_papers = self.encode_json(papers, args.num_results)\n        ans = dict(papers=top_papers, numresults=len(papers), totpapers=len(db), tweets=[], msg='', show_prompt='no', pid_to_users={})\n        ans.update(kws)\n        return ans\n\n    def run(self, port=5000, debug=False, prod=False):\n        if prod:\n            from tornado.wsgi import WSGIContainer\n            from tornado.httpserver import HTTPServer\n            from tornado.ioloop import IOLoop\n            from tornado.log import enable_pretty_logging\n            enable_pretty_logging()\n            http_server = HTTPServer(WSGIContainer(self.app))\n            http_server.listen(port)\n            IOLoop.instance().start()\n        else:\n            self.app.debug = debug\n            self.app.run(port=port, host='0.0.0.0')",
    "Code_level": "Class-level",
    "FSMID_for_test": 60,
    "right_result": "```python\nfrom flask import Flask, request, redirect, url_for, render_template, session, Response\nfrom flask_limiter import Limiter\nfrom flask_limiter.util import get_remote_address\nimport sqlite3\nfrom typing import Union, List, Dict, Tuple\n\nclass FlaskServer:\n    def __init__(self) -> None:\n        self.app = Flask(__name__)\n        self.limiter = Limiter(self.app, key_func=get_remote_address)\n        self.app.config['SECRET_KEY'] = 'your_secret_key'\n        self._setup_routes()\n\n    def _setup_routes(self) -> None:\n        @self.app.before_request\n        def before_request():\n            # Set up database connection and user session\n            pass\n\n        @self.app.teardown_request\n        def teardown_request(exception=None):\n            # Close database connection after each request\n            pass\n\n        @self.app.route('/')\n        def intmain() -> str:\n            papers = self.query_db(\"SELECT * FROM papers\")\n            return render_template('main.html', papers=papers)\n\n        @self.app.route('/login', methods=['POST'])\n        def login() -> Response:\n            username = request.form['username']\n            password = request.form['password']\n            user_id = self.get_user_id(username)\n            if user_id:\n                session['user_id'] = user_id\n                return redirect(url_for('intmain'))\n            else:\n                return 'Invalid username or password'\n\n    def connect_db(self) -> sqlite3.Connection:\n        conn = sqlite3.connect('database.db')\n        return conn\n\n    def query_db(self, query: str, args: tuple = (), one: bool = False) -> Union[list, dict, None]:\n        conn = self.connect_db()\n        cur = conn.cursor()\n        cur.execute(query, args)\n        rv = cur.fetchall()\n        cur.close()\n        conn.close()\n        return (rv[0] if rv else None) if one else rv\n\n    def get_user_id(self, username: str) -> Union[int, None]:\n        query = \"SELECT id FROM users WHERE username = ?\"\n        result = self.query_db(query, (username,))\n        return result[0][0] if result else None\n\n    def papers_filter_version(self, papers: list, v: str) -> list:\n        return [paper for paper in papers if paper['version'] == v]\n\n    def default_context(self, papers: list, **kws) -> dict:\n        return {'papers': papers, **kws}\n\n    def run(self, port: int = 5000, debug: bool = False, prod: bool = False) -> None:\n        if prod:\n            self.app.run(port=port, debug=debug)\n        else:\n            self.app.run(port=port, debug=True)\n```"
  },
  {
    "Task_id": 154,
    "Instruction": "Task Description: Create a Flask-based HTTP server with multiple endpoints to handle different types of requests, including delayed responses, request type identification, and JSON responses.\n\nFunction Description: The code consists of three Flask route handlers that demonstrate different HTTP server functionalities. Each function handles a specific endpoint and performs a distinct operation.\n\nInput:\n- For '/respond' endpoint: \n  - Query parameter 'time' (integer): Time in milliseconds to sleep before responding\n- For '/request_type' endpoint: \n  - None (automatically receives request method via Flask's request object)\n- For '/json' endpoint: \n  - None\n\nOutput:\n- For '/respond' endpoint: \n  - Response text: 'Response from Flask' \n  - Headers: Sets 'Access-Control-Allow-Origin' to '*'\n- For '/request_type' endpoint: \n  - Response text: 'Request Type: [METHOD]' where [METHOD] is the HTTP method used\n  - Headers: Sets 'Access-Control-Allow-Origin' to '*'\n- For '/json' endpoint: \n  - Response: JSON object {'resp': 'Hello JSON!'}",
    "Canonical_solution": "from flask import Flask, request, make_response\nfrom time import sleep\n\napp = Flask(__name__)\n\n@app.route('/respond')\ndef respond():\n    time_to_sleep = int(request.args.get('time')) / 1000\n    sleep(time_to_sleep)\n    resp = make_response('Response from Flask')\n    resp.headers['Access-Control-Allow-Origin'] = '*'\n    return resp\n\n@app.route('/request_type')\ndef request_type():\n    resp = make_response('Request Type: ' + request.method)\n    resp.headers['Access-Control-Allow-Origin'] = '*'\n    return resp\n\n@app.route('/json')\ndef json():\n    return {resp:'Hello JSON!'}",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n@app.route('/respond')\ndef respond():\n    time = int(request.args.get('time', 0))\n    time.sleep(time / 1000.0)\n    return 'Response from Flask', {'Access-Control-Allow-Origin': '*'}\n\n@app.route('/request_type')\ndef request_type():\n    method = request.method\n    return f'Request Type: {method}', {'Access-Control-Allow-Origin': '*'}\n\n@app.route('/json')\ndef json():\n    return jsonify({'resp': 'Hello JSON!'}), {'Access-Control-Allow-Origin': '*'}\n\nif __name__ == '__main__':\n    app.run()"
  },
  {
    "Task_id": 155,
    "Instruction": "Task Description: Create a Flask-based HTTP server endpoint that processes Pub/Sub messages from ArgoCD, transforms them into a standardized event format, and stores them in BigQuery.\n\nFunction Description: The function processes incoming HTTP POST requests containing Pub/Sub messages from ArgoCD. It validates the message structure, decodes and processes the event data, converts it to a standardized format, and stores it in BigQuery. Error handling is included for invalid payloads or processing failures.\n\nInput: \n- HTTP POST request with JSON payload containing Pub/Sub message in the following format:\n  {\n    \"message\": {\n      \"data\": [base64-encoded string],\n      \"message_id\": [string],\n      \"attributes\": [object]\n    }\n  }\n\nOutput: \n- HTTP 204 No Content response on successful processing\n- Error responses with appropriate status codes for invalid requests\n- Side effect: Processed event data is inserted into BigQuery\n\nMethods:\n\nprocess_argocd_event:\n- Input: msg [dict] - The Pub/Sub message dictionary containing the event data\n- Returns: dict - Processed event data in standardized format\n- Description: Decodes base64 message data, extracts metadata, and creates a standardized event object with unique signature\n\nindex:\n- Input: None (handles Flask request object internally)\n- Returns: str - Empty string with HTTP 204 status code\n- Description: Main endpoint that receives Pub/Sub messages, validates them, processes through process_argocd_event, and stores in BigQuery. Handles errors and logs failures.",
    "Canonical_solution": "import base64\nimport os\nimport json\nimport shared\nfrom flask import Flask, request\n\napp = Flask(__name__)\n\ndef process_argocd_event(msg):\n    metadata = json.loads(base64.b64decode(msg[\"data\"]).decode(\"utf-8\").strip())\n\n    # Unique hash for the event\n    signature = shared.create_unique_id(msg)\n\n    argocd_event = {\n        \"event_type\": \"deployment\",  # Event type, eg \"push\", \"pull_reqest\", etc\n        \"id\": metadata[\"id\"],  # Object ID, eg pull request ID\n        \"metadata\": json.dumps(metadata),  # The body of the msg\n        \"time_created\": metadata[\"time\"],  # The timestamp of with the event\n        \"signature\": signature,  # The unique event signature\n        \"msg_id\": msg[\"message_id\"],  # The pubsub message id\n        \"source\": \"argocd\",  # The name of the source, eg \"github\"\n    }\n\n    print(argocd_event)\n    return argocd_event\n\n@app.route(\"/\", methods=[\"POST\"])\ndef index():\n    \"\"\"\n    Receives messages from a push subscription from Pub/Sub.\n    Parses the message, and inserts it into BigQuery.\n    \"\"\"\n    event = None\n    if not request.is_json:\n        raise Exception(\"Expecting JSON payload\")\n    envelope = request.get_json()\n    print(f\"envelope recieved: {envelope}\")\n\n    # Check that data has been posted\n    if not envelope:\n        raise Exception(\"Expecting JSON payload\")\n    # Check that message is a valid pub/sub message\n    if \"message\" not in envelope:\n        raise Exception(\"Not a valid Pub/Sub Message\")\n    msg = envelope[\"message\"]\n\n    if \"attributes\" not in msg:\n        raise Exception(\"Missing pubsub attributes\")\n\n    try:\n        event = process_argocd_event(msg)\n\n        # [Do not edit below]\n        shared.insert_row_into_bigquery(event)\n\n    except Exception as e:\n        entry = {\n                \"severity\": \"WARNING\",\n                \"msg\": \"Data not saved to BigQuery\",\n                \"errors\": str(e),\n                \"json_payload\": envelope\n            }\n        print(json.dumps(entry))\n\n    return \"\", 204",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "```python\nfrom flask import Flask, request, jsonify\nimport base64\nfrom google.cloud import bigquery\nimport json\n\napp = Flask(__name__)\n\ndef process_argocd_event(msg):\n    try:\n        decoded_data = base64.b64decode(msg['message']['data']).decode('utf-8')\n        event_data = json.loads(decoded_data)\n        message_id = msg['message']['message_id']\n        attributes = msg['message']['attributes']\n        standardized_event = {\n            \"message_id\": message_id,\n            \"event_data\": event_data,\n            \"attributes\": attributes\n        }\n        return standardized_event\n    except Exception as e:\n        raise ValueError(f\"Error processing event data: {str(e)}\")\n\n@app.route('/process-event', methods=['POST'])\ndef index():\n    try:\n        data = request.get_json()\n        if not data or 'message' not in data:\n            return jsonify({\"error\": \"Invalid payload\"}), 400\n\n        processed_event = process_argocd_event(data['message'])\n        # Insert into BigQuery\n        client = bigquery.Client()\n        table_id = 'your_project.your_dataset.your_table'\n        table = client.get_table(table_id)\n        errors = client.insert_rows_json(table, [processed_event])\n        if errors:\n            raise Exception(f\"Failed to insert rows: {errors}\")\n        return '', 204\n    except ValueError as ve:\n        return jsonify({\"error\": str(ve)}), 400\n    except Exception as e:\n        return jsonify({\"error\": \"An error occurred processing the event\"}), 500\n\nif __name__ == '__main__':\n    app.run(debug=True)\n```"
  },
  {
    "Task_id": 156,
    "Instruction": "Task Description: Create a Flask-based web application class that handles user authentication, registration, and session management with role-based access control.\n\nClass Description: The WebApp class encapsulates a complete Flask web application with user authentication features. It includes database integration for user management, login/logout functionality, role-based access control, and session management.\n\nAttributes:\n\napp: [Flask] - The main Flask application instance\ndb: [SQLAlchemy] - Database instance for user management\nlogin_manager: [LoginManager] - Flask-Login manager for authentication\nUser: [SQLAlchemy Model] - Database model for user accounts\nSettingForm: [FlaskForm] - Form for password changes\nLoginForm: [FlaskForm] - Form for user login\nRegistrationForm: [FlaskForm] - Form for new user registration\nCaseForm: [FlaskForm] - Form for case management\n\nMethods:\n\n__init__: [None]() -> [None] - Initializes the Flask application, database, forms, and routes\nrun: [None](host='0.0.0.0', port=8080) -> [None] - Starts the Flask development server\nlogin_required: [function](role=\"ANY\") -> [function] - Decorator for role-based route protection\nload_user: [function](user_id) -> [User] - Callback for loading users from session\nunauthorized: [None]() -> [redirect] - Handler for unauthorized access attempts\nlogin: [function]() -> [response] - Handles user login requests\nsignup: [function]() -> [response] - Handles new user registration\nsetting: [function]() -> [response] - Handles user settings changes\nlogout: [function]() -> [redirect] - Handles user logout\nindex: [function]() -> [response] - Main application route",
    "Canonical_solution": "from flask import Flask, render_template, request, redirect, session\nfrom flask_login import UserMixin, LoginManager, login_user, logout_user, current_user\nfrom flask_sqlalchemy import SQLAlchemy\nfrom flask_wtf import FlaskForm\nfrom wtforms import StringField, PasswordField\nfrom wtforms.validators import ValidationError, DataRequired, EqualTo, Length\nimport os\nimport datetime\n\nclass WebApp:\n    def __init__(self):\n        self.app = Flask(__name__)\n        self.app.config[\"SESSION_COOKIE_SECURE\"] = False\n        self.app.config[\"SQLALCHEMY_TRACK_MODIFICATIONS\"] = False\n        self.app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"sqlite:///logontracer.db\"\n        self.app.config[\"SECRET_KEY\"] = os.urandom(24)\n        self.app.permanent_session_lifetime = datetime.timedelta(minutes=60)\n        \n        self.db = SQLAlchemy(self.app)\n        self.login_manager = LoginManager()\n        self.login_manager.init_app(self.app)\n\n        class User(UserMixin, self.db.Model):\n            id = self.db.Column(self.db.Integer, primary_key=True)\n            username = self.db.Column(self.db.String(50), nullable=False, unique=True)\n            urole = self.db.Column(self.db.String(20))\n\n        class SettingForm(FlaskForm):\n            password1 = PasswordField('Password', validators=[DataRequired(), EqualTo('password2', message='Passwords must match.'), Length(min=3, max=20)])\n            password2 = PasswordField('Password (again)', validators=[DataRequired(), Length(min=3, max=20)])\n\n        class LoginForm(FlaskForm):\n            username = StringField('Username', validators=[DataRequired(), Length(min=3, max=50)])\n            password = PasswordField('Password', validators=[DataRequired(), Length(min=3, max=20)])\n\n        class RegistrationForm(FlaskForm):\n            username = StringField('Username', validators=[DataRequired(), Length(min=3, max=50)])\n            password1 = PasswordField('Password', validators=[DataRequired(), EqualTo('password2', message='Passwords must match.'), Length(min=3, max=20)])\n            password2 = PasswordField('Password (again)', validators=[DataRequired(), Length(min=3, max=20)])\n\n        class CaseForm(FlaskForm):\n            case = StringField('Case', validators=[DataRequired()])\n\n        with self.app.app_context():\n            self.db.create_all()\n\n        @self.login_manager.user_loader\n        def load_user(user_id):\n            return self.db.session.get(User, int(user_id))\n\n        @self.login_manager.unauthorized_handler\n        def unauthorized():\n            return redirect('/login')\n\n        @self.app.route('/login', methods=['GET', 'POST'])\n        def login():\n            if current_user.is_authenticated:\n                return redirect('/')\n\n            session.permanent = True\n            form = LoginForm(request.form)\n            if form.validate_on_submit():\n                username = form.username.data\n                password = form.password.data\n                remember = True if request.form.get(\"remember\") else False\n\n                session[\"username\"] = username\n                session[\"password\"] = password\n\n                user = User.query.filter_by(username=username).first()\n                login_user(user, remember=remember)\n                return redirect('/')\n\n            return render_template('login.html', form=form)\n\n        @self.app.route('/signup', methods=['GET', 'POST'])\n        @login_required(role=\"ADMIN\")\n        def signup():\n            form = RegistrationForm(request.form)\n            if form.validate_on_submit():\n                username = form.username.data\n                password = form.password1.data\n                admin = True if request.form.get(\"admin\") else False\n\n                with self.app.app_context():\n                    user = User(username=username, urole=\"ADMIN\" if admin else \"USER\")\n                    self.db.session.add(user)\n                    self.db.session.commit()\n\n                return redirect('/')\n            return render_template('signup.html', form=form)\n\n        @self.app.route('/setting', methods=['GET', 'POST'])\n        @login_required(role=\"ANY\")\n        def setting():\n            form = SettingForm(request.form)\n            if form.validate_on_submit():\n                username = current_user.username\n                password = form.password1.data\n\n                with self.app.app_context():\n                    user_query = User.query.filter_by(username=username).first()\n                    self.db.session.delete(user_query)\n                    self.db.session.commit()\n\n                    user = User(username=username, urole=user_query.urole)\n                    self.db.session.add(user)\n                    self.db.session.commit()\n\n                session[\"password\"] = password\n                return redirect('/')\n            return render_template('setting.html', form=form)\n\n        @self.app.route('/logout')\n        @login_required(role=\"ANY\")\n        def logout():\n            logout_user()\n            return redirect('/login')\n\n        @self.app.route('/')\n        @login_required(role=\"ANY\")\n        def index():\n            return render_template(\"index.html\")\n\n    def run(self, host='0.0.0.0', port=8080):\n        self.app.run(host=host, port=port)\n\n    def login_required(self, role=\"ANY\"):\n        def wrapper(fn):\n            @wraps(fn)\n            def decorated_view(*args, **kwargs):\n                if not current_user.is_authenticated:\n                    return self.login_manager.unauthorized()\n                urole = current_user.get_urole()\n                if ((urole != role) and (role != \"ANY\")):\n                    return self.login_manager.unauthorized()\n                return fn(*args, **kwargs)\n            return decorated_view\n        return wrapper",
    "Code_level": "Class-level",
    "FSMID_for_test": 60,
    "right_result": "```python\nfrom flask import Flask, render_template, request, redirect, url_for, flash\nfrom flask_sqlalchemy import SQLAlchemy\nfrom flask_login import LoginManager, UserMixin, login_user, logout_user, login_required, current_user\nfrom flask_wtf import FlaskForm\nfrom wtforms import StringField, PasswordField, SubmitField\nfrom wtforms.validators import InputRequired, Length, EqualTo\n\napp = Flask(__name__)\napp.config['SECRET_KEY'] = 'your_secret_key'\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///site.db'\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\n\ndb = SQLAlchemy(app)\nlogin_manager = LoginManager(app)\nlogin_manager.login_view = 'login'\n\nclass User(UserMixin, db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(20), unique=True, nullable=False)\n    password = db.Column(db.String(60), nullable=False)\n    role = db.Column(db.String(20), nullable=False, default='user')\n\nclass SettingForm(FlaskForm):\n    password = PasswordField('Password', validators=[InputRequired(), Length(min=8, max=20)])\n    submit = SubmitField('Change Password')\n\nclass LoginForm(FlaskForm):\n    username = StringField('Username', validators=[InputRequired(), Length(min=4, max=20)])\n    password = PasswordField('Password', validators=[InputRequired(), Length(min=8, max=20)])\n    submit = SubmitField('Login')\n\nclass RegistrationForm(FlaskForm):\n    username = StringField('Username', validators=[InputRequired(), Length(min=4, max=20)])\n    password = PasswordField('Password', validators=[InputRequired(), Length(min=8, max=20)])\n    confirm_password = PasswordField('Confirm Password', validators=[InputRequired(), EqualTo('password')])\n    submit = SubmitField('Register')\n\n@login_manager.user_loader\ndef load_user(user_id):\n    return User.query.get(int(user_id))\n\n@app.route('/')\ndef index():\n    return render_template('index.html')\n\n@app.route('/login', methods=['GET', 'POST'])\ndef login():\n    form = LoginForm()\n    if form.validate_on_submit():\n        user = User.query.filter_by(username=form.username.data).first()\n        if user and user.password == form.password.data:\n            login_user(user)\n            return redirect(url_for('index'))\n        else:\n            flash('Invalid username or password')\n    return render_template('login.html', form=form)\n\n@app.route('/logout')\n@login_required\ndef logout():\n    logout_user()\n    return redirect(url_for('index'))\n\n@app.route('/register', methods=['GET', 'POST'])\ndef signup():\n    form = RegistrationForm()\n    if form.validate_on_submit():\n        hashed_password = generate_password_hash(form.password.data)\n        new_user = User(username=form.username.data, password=hashed_password, role='user')\n        db.session.add(new_user)\n        db.session.commit()\n        flash('Account created successfully!')\n        return redirect(url_for('login'))\n    return render_template('register.html', form=form)\n\n@app.route('/settings', methods=['GET', 'POST'])\n@login_required\ndef setting():\n    form = SettingForm()\n    if form.validate_on_submit():\n        hashed_password = generate_password_hash(form.password.data)\n        current_user.password = hashed_password\n        db.session.commit()\n        flash('Password changed successfully!')\n        return redirect(url_for('index'))\n    return render_template('settings.html', form=form)\n\ndef login_required(role=\"ANY\"):\n    def decorator(f):\n        @wraps(f)\n        def decorated_function(*args, **kwargs):\n            if current_user.is_authenticated:\n                if role == \"ANY\" or current_user.role == role:\n                    return f(*args, **kwargs)\n                else:\n                    return unauthorized()\n            else:\n                return unauthorized()\n        return decorated_function\n    return decorator\n\ndef unauthorized():\n    flash('Unauthorized access!')\n    return redirect(url_for('index'))\n\nif __name__ == '__main__':\n    db.create_all()\n    app.run(host='0.0.0.0', port=8080)\n```"
  },
  {
    "Task_id": 157,
    "Instruction": "Task Description: Create a Flask-based HTTP server endpoint that receives JSON data, processes it using a pre-trained machine learning model, and returns predictions in JSON format.\n\nFunction Description: The function handles POST requests to the '/predict' endpoint. It receives JSON data, validates it, loads a pre-trained model, makes predictions, and returns the results. It also includes error handling for bad requests.\n\nInput: \n- HTTP POST request with JSON payload containing data for prediction\n- The function accesses this through Flask's request.get_json()\n\nOutput:\n- Successful case: JSON response containing prediction results with HTTP status code 200\n- Error case: JSON error message with HTTP status code 400 for bad requests",
    "Canonical_solution": "from flask import Flask, jsonify, request\n\napp = Flask(__name__)\n\n@app.route('/predict', methods=['POST'])\ndef apicall():\n    try:\n        test_json = request.get_json()\n        test = pd.read_json(test_json)\n        print(\"The test data received are as follows...\")\n        print(test)\n        print()\n\n    except Exception as e:\n        raise e\n\n    clf = 'lm_model_v1.pk'\n    \n    if test.empty:\n        return(bad_request())\n    else:\n        print(\"Loading the model...\")\n        loaded_model = None\n        with open('./models/'+clf,'rb') as f:\n            loaded_model = pickle.load(f)\n\n        print(\"The model has been loaded...doing predictions now...\")\n        print()\n        predictions = loaded_model.predict(test)\n            \n        prediction_series = pd.Series(predictions)\n        response = jsonify(prediction_series.to_json())\n        response.status_code = 200\n        return (response)\n\n@app.errorhandler(400)\ndef bad_request(error=None):\n    message = {\n            'status': 400,\n            'message': 'Bad Request: ' + request.url + '--> Please check your data payload...',\n    }\n    resp = jsonify(message)\n    resp.status_code = 400\n\n    return resp",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, jsonify\nimport joblib\n\napp = Flask(__name__)\n\n@app.route('/predict', methods=['POST'])\ndef predict():\n    try:\n        data = request.get_json()\n        # Validate data here\n        # Load model\n        model = joblib.load('model.pkl')\n        # Make predictions\n        predictions = model.predict([data])\n        # Return predictions\n        return jsonify({'predictions': predictions.tolist()}), 200\n    except Exception as e:\n        return jsonify({'error': str(e)}), 400\n\nif __name__ == '__main__':\n    app.run(debug=True)"
  },
  {
    "Task_id": 158,
    "Instruction": "Task Description: Create a Flask-based web application for movie recommendations that handles user requests, processes movie data, and returns recommendations along with detailed movie information.\n\nFunction Description: The application consists of three main routes that handle different aspects of movie recommendations: displaying the home page with suggestions, finding similar movies based on user input, and providing detailed recommendations for a selected movie.\n\nInput:\n- For \"/\" and \"/home\" routes: None (GET requests)\n- For \"/similarity\" route: A POST request with form data containing 'name' (movie title)\n- For \"/recommend\" route: A POST request with form data containing multiple movie attributes (title, cast info, IMDB ID, etc.)\n\nOutput:\n- For \"/\" and \"/home\" routes: Rendered HTML template 'home.html' with movie suggestions\n- For \"/similarity\" route: Either an error string or a string of recommended movies joined by \"---\"\n- For \"/recommend\" route: Rendered HTML template 'recommend.html' with comprehensive movie details, recommendations, and reviews\n\nMethods:\n1. home() -> HTML - Displays the home page with movie suggestions\n2. similarity() -> str - Returns similar movies based on user input\n3. recommend() -> HTML - Provides detailed recommendations for a selected movie",
    "Canonical_solution": "from flask import Flask, render_template, request\n\napp = Flask(__name__)\n\n@app.route(\"/\")\n@app.route(\"/home\")\ndef home():\n    suggestions = get_suggestions()\n    return render_template('home.html',suggestions=suggestions)\n\n@app.route(\"/similarity\",methods=[\"POST\"])\ndef similarity():\n    movie = request.form['name']\n    rc = rcmd(movie)\n    if type(rc)==type('string'):\n        return rc\n    else:\n        m_str=\"---\".join(rc)\n        return m_str\n\n@app.route(\"/recommend\",methods=[\"POST\"])\ndef recommend():\n    title = request.form['title']\n    cast_ids = request.form['cast_ids']\n    cast_names = request.form['cast_names']\n    cast_chars = request.form['cast_chars']\n    cast_bdays = request.form['cast_bdays']\n    cast_bios = request.form['cast_bios']\n    cast_places = request.form['cast_places']\n    cast_profiles = request.form['cast_profiles']\n    imdb_id = request.form['imdb_id']\n    poster = request.form['poster']\n    genres = request.form['genres']\n    overview = request.form['overview']\n    vote_average = request.form['rating']\n    vote_count = request.form['vote_count']\n    release_date = request.form['release_date']\n    runtime = request.form['runtime']\n    status = request.form['status']\n    rec_movies = request.form['rec_movies']\n    rec_posters = request.form['rec_posters']\n\n    suggestions = get_suggestions()\n\n    rec_movies = convert_to_list(rec_movies)\n    rec_posters = convert_to_list(rec_posters)\n    cast_names = convert_to_list(cast_names)\n    cast_chars = convert_to_list(cast_chars)\n    cast_profiles = convert_to_list(cast_profiles)\n    cast_bdays = convert_to_list(cast_bdays)\n    cast_bios = convert_to_list(cast_bios)\n    cast_places = convert_to_list(cast_places)\n    \n    cast_ids = cast_ids.split(',')\n    cast_ids[0] = cast_ids[0].replace(\"[\",\"\")\n    cast_ids[-1] = cast_ids[-1].replace(\"]\",\"\")\n    \n    for i in range(len(cast_bios)):\n        cast_bios[i] = cast_bios[i].replace(r'\\n', '\\n').replace(r'\\\"','\\\"')\n    \n    movie_cards = {rec_posters[i]: rec_movies[i] for i in range(len(rec_posters))}\n    \n    casts = {cast_names[i]:[cast_ids[i], cast_chars[i], cast_profiles[i]] for i in range(len(cast_profiles))}\n\n    cast_details = {cast_names[i]:[cast_ids[i], cast_profiles[i], cast_bdays[i], cast_places[i], cast_bios[i]] for i in range(len(cast_places))}\n\n    sauce = urllib.request.urlopen('https://www.imdb.com/title/{}/reviews?ref_=tt_ov_rt'.format(imdb_id)).read()\n    soup = bs.BeautifulSoup(sauce,'lxml')\n    soup_result = soup.find_all(\"div\",{\"class\":\"text show-more__control\"})\n\n    reviews_list = []\n    reviews_status = []\n    for reviews in soup_result:\n        if reviews.string:\n            reviews_list.append(reviews.string)\n            movie_review_list = np.array([reviews.string])\n            movie_vector = vectorizer.transform(movie_review_list)\n            pred = clf.predict(movie_vector)\n            reviews_status.append('Good' if pred else 'Bad')\n\n    movie_reviews = {reviews_list[i]: reviews_status[i] for i in range(len(reviews_list))}     \n\n    return render_template('recommend.html',title=title,poster=poster,overview=overview,vote_average=vote_average,\n        vote_count=vote_count,release_date=release_date,runtime=runtime,status=status,genres=genres,\n        movie_cards=movie_cards,reviews=movie_reviews,casts=casts,cast_details=cast_details)",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, render_template, request, redirect, url_for\n\napp = Flask(__name__)\n\n@app.route('/')\n@app.route('/home')\ndef home():\n    return render_template('home.html')\n\n@app.route('/similarity', methods=['POST'])\ndef similarity():\n    name = request.form['name']\n    # Process the movie data and find similar movies\n    similar_movies = \"Movie1---Movie2---Movie3\"\n    return similar_movies\n\n@app.route('/recommend', methods=['POST'])\ndef recommend():\n    title = request.form['title']\n    cast_info = request.form['cast_info']\n    imdb_id = request.form['imdb_id']\n    # Process the movie data and provide recommendations\n    return render_template('recommend.html', title=title, cast_info=cast_info, imdb_id=imdb_id)\n\nif __name__ == '__main__':\n    app.run(debug=True)"
  },
  {
    "Task_id": 159,
    "Instruction": "Task Description: Create a Flask-based HTTP server that handles image processing and video generation requests, including live preview streaming and final video download capabilities.\n\nFunction Description: The code implements a Flask web server with four main endpoints:\n1. Serves a static HTML interface\n2. Accepts image uploads for processing\n3. Provides a live MJPEG stream of processed frames\n4. Generates and returns a final processed video file\n\nInput:\n- HTTP GET/POST requests to defined endpoints\n- Image data as base64-encoded strings via POST\n- Configuration parameters for image processing\n\nOutput:\n- Static HTML page for the interface\n- Live MJPEG stream of processed frames\n- Processed MP4 video file for download\n- Empty responses for successful operations\n\nMethods:\n\nindex() -> flask.Response - Serves the static HTML interface file\n- Input: None\n- Output: Static HTML file response\n\nload_image() -> str - Processes uploaded image data\n- Input: \n  - strFile: Filename string\n  - strData: Base64-encoded image data\n- Output: Empty string response\n\nget_live() -> flask.Response - Generates MJPEG live stream\n- Input: None\n- Output: Multipart MJPEG stream response\n\nget_result() -> flask.Response - Generates and returns processed video\n- Input: None\n- Output: MP4 video file attachment\n\nNote: The implementation uses gevent for asynchronous handling and includes image processing utilities (process_load, process_inpaint, process_kenburns) which are assumed to be defined elsewhere. The server runs on port 8080 and serves static files from the current directory.",
    "Canonical_solution": "import flask\nimport gevent\nimport gevent.pywsgi\nimport os\nimport time\nimport tempfile\nimport random\nimport numpy\nimport cv2\nimport base64\nimport io\nimport shutil\nimport moviepy\n\nobjFlask = flask.Flask(import_name=__name__, static_url_path='', static_folder=os.path.abspath('./'))\nobjFlask.json.sort_keys = False\n\n@objFlask.route(rule='/', methods=[ 'GET' ])\ndef index():\n\treturn objFlask.send_static_file('interface.html')\n\n@objFlask.route(rule='/load_image', methods=[ 'POST' ])\ndef load_image():\n\tobjPlayback['strImage'] = flask.request.form['strFile']\n\tobjPlayback['npyImage'] = numpy.ascontiguousarray(cv2.imdecode(buf=numpy.frombuffer(base64.b64decode(flask.request.form['strData'].split(';base64,')[1]), numpy.uint8), flags=-1)[:, :, 0:3])\n\tobjPlayback['strCache'] = {}\n\n\tprocess_load(objPlayback['npyImage'], {})\n\n\tfor fltX, fltY in [ (100.0, 0.0), (-100.0, 0.0), (0.0, 100.0), (0.0, -100.0) ]:\n\t\tprocess_inpaint(torch.tensor(data=[[[fltX], [fltY], [0.0]]], dtype=torch.float32, device=torch.device('cuda')))\n\t# end\n\n\treturn ''\n\n@objFlask.route(rule='/get_live', methods=[ 'GET' ])\ndef get_live():\n\tdef generator():\n\t\tfltFramelimiter = 0.0\n\n\t\twhile True:\n\t\t\tfor intYield in range(100): gevent.sleep(0.0)\n\n\t\t\tgevent.sleep(max(0.0, (1.0 / 25.0) - (time.time() - fltFramelimiter))); fltFramelimiter = time.time()\n\n\t\t\tif objPlayback['strImage'] is None:\n\t\t\t\tyield b'--frame\\r\\nContent-Type: image/jpeg\\r\\n\\r\\n' + cv2.imencode(ext='.jpg', img=numpy.ones([ 768, 1024, 3 ], numpy.uint8) * 29, params=[ cv2.IMWRITE_JPEG_QUALITY, 80 ])[1].tobytes() + b'\\r\\n'; continue\n\t\t\t# end\n\n\t\t\tif objPlayback['intTime'] > len(objPlayback['fltTime']) - 1:\n\t\t\t\tobjPlayback['intTime'] = 0\n\t\t\t# end\n\n\t\t\tintTime = objPlayback['intTime']\n\t\t\tfltTime = objPlayback['fltTime'][intTime]\n\n\t\t\tif objPlayback['strMode'] == 'automatic':\n\t\t\t\tobjPlayback['intTime'] += 1\n\t\t\t# end\n\n\t\t\tif str(fltTime) not in objPlayback['strCache']:\n\t\t\t\tnpyKenburns = process_kenburns({\n\t\t\t\t\t'fltSteps': [ fltTime ],\n\t\t\t\t\t'objFrom': objPlayback['objFrom'],\n\t\t\t\t\t'objTo': objPlayback['objTo'],\n\t\t\t\t\t'boolInpaint': False\n\t\t\t\t})[0]\n\n\t\t\t\tobjPlayback['strCache'][str(fltTime)] = b'--frame\\r\\nContent-Type: image/jpeg\\r\\n\\r\\n' + cv2.imencode(ext='.jpg', img=npyKenburns, params=[ cv2.IMWRITE_JPEG_QUALITY, 80 ])[1].tobytes() + b'\\r\\n'\n\t\t\t# end\n\n\t\t\tyield objPlayback['strCache'][str(fltTime)]\n\t\t# end\n\t# end\n\n\treturn flask.Response(response=generator(), mimetype='multipart/x-mixed-replace; boundary=frame')\n\n@objFlask.route(rule='/get_result', methods=[ 'GET' ])\ndef get_result():\n\tstrTempdir = tempfile.gettempdir() + '/kenburns-' + format(time.time(), '.6f') + '-' + str(os.getpid()) + '-' + str().join([random.choice('abcdefghijklmnopqrstuvwxyz0123456789') for intCount in range(8)])\n\n\tos.makedirs(name=strTempdir + '/', exist_ok=False)\n\n\tnpyKenburns = process_kenburns({\n\t\t'fltSteps': numpy.linspace(0.0, 1.0, 75).tolist(),\n\t\t'objFrom': objPlayback['objFrom'],\n\t\t'objTo': objPlayback['objTo'],\n\t\t'boolInpaint': True\n\t})\n\n\tmoviepy.ImageSequenceClip(sequence=[ npyFrame[:, :, ::-1] for npyFrame in npyKenburns + list(reversed(npyKenburns))[1:-1] ], fps=25).write_videofile(strTempdir + '/kenburns.mp4')\n\n\tobjKenburns = io.BytesIO(open(strTempdir + '/kenburns.mp4', 'rb').read())\n\n\tshutil.rmtree(strTempdir + '/')\n\n\treturn flask.send_file(filename_or_fp=objKenburns, mimetype='video/mp4', as_attachment=True, attachment_filename='kenburns.mp4', cache_timeout=-1)\n\nif __name__ == '__main__':\n\tgevent.pywsgi.WSGIServer(listener=('0.0.0.0', 8080), application=objFlask).serve_forever()",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "```python\nfrom flask import Flask, request, Response, send_file\nimport io\nimport base64\nimport os\nfrom gevent import monkey\nmonkey.patch_all()\nimport gevent\nfrom gevent.pywsgi import WSGIServer\nfrom PIL import Image\nimport cv2\nimport numpy as np\n\napp = Flask(__name__, static_url_path='', static_folder='static')\n\ndef process_load(image_data):\n    # Placeholder for image processing function\n    pass\n\ndef process_inpaint(image_data):\n    # Placeholder for image processing function\n    pass\n\ndef process_kenburns(image_data):\n    # Placeholder for image processing function\n    pass\n\n@app.route('/')\ndef index():\n    return app.send_static_file('index.html')\n\n@app.route('/upload', methods=['POST'])\ndef load_image():\n    strFile = request.form['filename']\n    strData = request.form['data']\n    image_data = base64.b64decode(strData)\n    process_load(image_data)\n    return ''\n\n@app.route('/live')\ndef get_live():\n    def generate():\n        while True:\n            # Placeholder for live MJPEG stream generation\n            yield b'--frame\\r\\n'\n            yield b'Content-Type: image/jpeg\\r\\n\\r\\n'\n            # Placeholder for frame data\n            yield b'\\r\\n'\n    return Response(generate(), mimetype='multipart/x-mixed-replace; boundary=frame')\n\n@app.route('/result')\ndef get_result():\n    # Placeholder for video generation and download\n    return send_file('output.mp4', as_attachment=True)\n\nif __name__ == '__main__':\n    http_server = WSGIServer(('', 8080), app)\n    http_server.serve_forever()\n```"
  },
  {
    "Task_id": 160,
    "Instruction": "Task Description: Create a custom Flask application class that extends the base Flask class to provide enhanced request handling and response generation capabilities, particularly for API responses.\n\nClass Description: FlaskApp is a subclass of Flask that customizes request handling and response generation. It provides automatic JSON serialization of responses and convenience methods for defining routes.\n\nAttributes:\n- request_class: [Request] - Custom request class to use for incoming requests\n- json_data_class: [tuple] - Tuple of classes that should be automatically converted to JSON responses\n\nMethods:\n- make_response(rv) -> Response - Overrides the base make_response method to automatically convert supported data types to JSON responses\n  Input: \n    rv: [Any] - The response value to process\n  Output:\n    Response object with appropriate content type and serialized data\n\n- get(rule, **options) -> decorator - Convenience method for creating GET routes\n  Input:\n    rule: [str] - URL rule as string\n    **options: [dict] - Additional options to pass to route()\n  Output:\n    Route decorator for GET method\n\n- post(rule, **options) -> decorator - Convenience method for creating POST routes\n  Input:\n    rule: [str] - URL rule as string\n    **options: [dict] - Additional options to pass to route()\n  Output:\n    Route decorator for POST method",
    "Canonical_solution": "from flask import Flask, Response\nfrom peewee import ModelSelect, Model\nfrom domain_admin.compat import Iterator\nfrom domain_admin.utils.flask_ext.api_result import ApiResult\nfrom domain_admin.utils.flask_ext.request import Request\nimport six\n\nclass FlaskApp(Flask):\n    request_class = Request\n\n    json_data_class = (\n        ModelSelect,\n        Model,\n        Iterator,\n        list,\n        dict,\n        six.integer_types,\n        six.text_type\n    )\n\n    def make_response(self, rv):\n        if isinstance(rv, self.json_data_class) or rv is None:\n            rv = ApiResult.success(rv)\n\n        if isinstance(rv, ApiResult):\n            return Response(rv.to_json(), content_type='application/json;charset=utf-8')\n\n        return super(FlaskApp, self).make_response(rv)\n\n    def get(self, rule, **options):\n        options.setdefault('methods', ['GET'])\n        return super(FlaskApp, self).route(rule, **options)\n\n    def post(self, rule, **options):\n        options.setdefault('methods', ['POST'])\n        return super(FlaskApp, self).route(rule, **options)",
    "Code_level": "Class-level",
    "FSMID_for_test": 60,
    "right_result": "```python\nfrom flask import Flask, request, Response\nfrom werkzeug.wrappers import Response as BaseResponse\n\nclass FlaskApp(Flask):\n    request_class = request\n    json_data_classes = (tuple,)\n\n    def make_response(self, rv):\n        if isinstance(rv, self.json_data_classes):\n            return Response(self.json(rv), mimetype='application/json')\n        return super().make_response(rv)\n\n    @staticmethod\n    def get(rule, **options):\n        return Flask.route(rule, methods=['GET'], **options)\n\n    @staticmethod\n    def post(rule, **options):\n        return Flask.route(rule, methods=['POST'], **options)\n```"
  },
  {
    "Task_id": 161,
    "Instruction": "Task Description: Create a Flask-based web server that serves a pre-trained scikit-learn sentiment analysis model, allowing users to submit text via a web form and receive sentiment predictions.\n\nFunction Description: The code implements a simple web application with Flask that loads a pre-trained sentiment analysis model and provides both a web interface for user interaction and an API endpoint for predictions.\n\nInput:\n- None (for the Flask app initialization)\n- Optional 'text' query parameter (for the prediction functionality)\n\nOutput:\n- HTML page with a form and prediction results (when accessed via web browser)\n- Text prediction result (when accessed programmatically)\n\nClass Description: N/A (The reference code is function-based rather than class-based)\n\nAttributes: N/A\n\nMethods:\n- pred(text: str) -> str - Takes a text string as input and returns the sentiment prediction using the loaded model\n- index() -> str - Handles the root route ('/'), processes GET requests with optional 'text' parameter, and returns an HTML response with the form and prediction results",
    "Canonical_solution": "from sklearn.externals import joblib\nfrom flask import Flask, request\nfrom jinja2 import Template\n\np = joblib.load('sentiment-model.pkl')\napp = Flask(__name__)\n\ndef pred(text):\n    return p.predict([text])[0]\n\n@app.route('/')\ndef index():\n    text = request.args.get('text')\n    if text:\n        prediction = pred(text)\n    else:\n        prediction = \"\"\n\n    template = Template(\"\"\"\n    <html>\n        <body>\n            <h1>Scikit Model Server</h1>\n            <form>\n                <input type=\"text\" name=\"text\">\n                <input type=\"submit\" >\n            </form>\n            <p>Prediction: {{ prediction }}</p>\n        </body>\n    </html>\n    \"\"\")\n    return template.render(prediction=prediction)\n\nif __name__ == '__main__':\n    app.run(port=8000)",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "```python\nfrom flask import Flask, request, render_template_string\nimport joblib\n\napp = Flask(__name__)\n\n@app.route('/')\ndef index():\n    return render_template_string(open('index.html').read())\n\n@app.route('/predict', methods=['POST'])\ndef predict():\n    text = request.form.get('text', '')\n    prediction = pred(text)\n    return render_template_string(open('result.html').read(), prediction=prediction)\n\ndef pred(text: str) -> str:\n    model = joblib.load('sentiment_model.pkl')\n    prediction = model.predict([text])[0]\n    return prediction\n\nif __name__ == '__main__':\n    app.run(debug=True)\n```"
  },
  {
    "Task_id": 162,
    "Instruction": "Task Description: Create a Flask-based API server that can handle multiple routes for status checking, input processing, and server management, with the ability to run in a separate thread or using a production server.\n\nClass Description: FlaskAPI is a class that encapsulates a Flask web server with custom routes for handling API requests. It provides methods to start and stop the server either in a development thread or using a production-ready server (Waitress).\n\nAttributes:\n- app: Flask - The Flask application instance\n- server_thread: ServerThread - Thread object for running the development server\n\nMethods:\n- __init__() -> None - Initializes the Flask application and sets up routes\n- _setup_routes() -> None - Defines the API endpoints and their handlers\n- _the_input(text: str, screen: str, talk: str) -> dict - Processes input text and optional screenshot, returns response\n- start_api(api: bool = False) -> None - Starts the server either in a thread (api=False) or using Waitress (api=True)\n- stop_api() -> None - Stops the running server thread\n\nNested Class: ServerThread\nClass Description: A thread class for running the Flask development server in a separate thread.\n\nAttributes:\n- srv: WSGIServer - The Werkzeug development server instance\n- ctx: AppContext - Flask application context\n\nMethods:\n- __init__(app: Flask, host: str, port: int) -> None - Initializes the server thread with Flask app and connection details\n- run() -> None - Starts the server and runs it indefinitely\n- shutdown() -> None - Stops the running server",
    "Canonical_solution": "from flask import Flask, request, jsonify\nimport threading\nfrom werkzeug.serving import make_server\nfrom waitress import serve\n\nclass FlaskAPI:\n    def __init__(self):\n        self.app = Flask(__name__)\n        self.server_thread = None\n        self._setup_routes()\n\n    def _setup_routes(self):\n        @self.app.route(\"/status\", methods=[\"POST\"])\n        def status():\n            return jsonify({\"response\": True})\n\n        @self.app.route(\"/input\", methods=[\"POST\"])\n        def input():\n            data = request.json\n            text = data[\"text\"]\n            screen = data[\"screen\"]\n            talk = data[\"talk\"]\n            return self._the_input(text, screen, talk)\n\n        @self.app.route(\"/stop_server\", methods=[\"POST\"])\n        def stop_server():\n            self.stop_api()\n            exit(0)\n\n    def _the_input(self, text, screen, talk):\n        print(\"Input:\", text)\n        from .agent.process import process_text_api\n        from .utils.db import screenshot_path\n\n        if screen != \"true\":\n            result = process_text_api(text, None)\n        else:\n            import pyautogui\n            screenshot = pyautogui.screenshot()\n            screenshot.save(screenshot_path)\n            result = process_text_api(text, screenshot_path)\n\n        return jsonify({\"response\": result})\n\n    def start_api(self, api=False):\n        if api == False:\n            if self.server_thread is None:\n                self.server_thread = ServerThread(self.app, \"0.0.0.0\", 7541)\n                self.server_thread.start()\n                print(\"API started\")\n            else:\n                print(\"API is already running\")\n        else:\n            serve(self.app, host=\"0.0.0.0\", port=7541)\n\n    def stop_api(self):\n        if self.server_thread is not None:\n            self.server_thread.shutdown()\n            self.server_thread.join()\n            self.server_thread = None\n            print(\"API stopped\")\n        else:\n            print(\"API is not running\")\n\nclass ServerThread(threading.Thread):\n    def __init__(self, app, host, port):\n        threading.Thread.__init__(self)\n        self.srv = make_server(host, port, app)\n        self.ctx = app.app_context()\n        self.ctx.push()\n\n    def run(self):\n        print(\"Starting server\")\n        self.srv.serve_forever()\n\n    def shutdown(self):\n        print(\"Stopping server\")\n        self.srv.shutdown()",
    "Code_level": "Class-level",
    "FSMID_for_test": 60,
    "right_result": "```python\nfrom flask import Flask, request, jsonify\nimport threading\nfrom waitress import serve\nfrom werkzeug.serving import WSGIServer\nfrom werkzeug.middleware import AppEngine\n\nclass FlaskAPI:\n    def __init__(self):\n        self.app = Flask(__name__)\n        self.server_thread = None\n\n    def _setup_routes(self):\n        @self.app.route('/status', methods=['GET'])\n        def status():\n            return jsonify({\"status\": \"running\"})\n\n        @self.app.route('/process', methods=['POST'])\n        def process_input():\n            data = request.json\n            text = data.get('text', '')\n            screen = data.get('screen', '')\n            talk = data.get('talk', '')\n            return jsonify(self._the_input(text, screen, talk))\n\n        @self.app.route('/shutdown', methods=['POST'])\n        def shutdown():\n            self.stop_api()\n            return jsonify({\"status\": \"shutdown\"})\n\n    def _the_input(self, text: str, screen: str, talk: str) -> dict:\n        # Process input text and optional screenshot, return response\n        return {\"text\": text, \"screen\": screen, \"talk\": talk}\n\n    def start_api(self, api: bool = False):\n        self._setup_routes()\n        if not api:\n            self.server_thread = threading.Thread(target=self._run_server)\n            self.server_thread.start()\n        else:\n            serve(self.app, host='0.0.0.0', port=5000)\n\n    def stop_api(self):\n        if self.server_thread:\n            self.server_thread.join()\n\n    def _run_server(self):\n        self.app.run(host='0.0.0.0', port=5000)\n\nclass ServerThread:\n    def __init__(self, app: Flask, host: str, port: int):\n        self.srv = WSGIServer((host, port), AppEngine(app))\n        self.ctx = AppEngine(app)\n\n    def run(self):\n        self.srv.serve_forever()\n\n    def shutdown(self):\n        self.srv.shutdown()\n```"
  },
  {
    "Task_id": 163,
    "Instruction": "Task Description: Create a Flask-based web service that accepts POST requests with form data, processes the data using a pre-trained machine learning model, and returns a prediction result rendered in an HTML template.\n\nFunction Description: The `predict` function is a Flask route handler that processes incoming POST requests containing form data. It extracts the input values, converts them to a format suitable for the machine learning model, makes a prediction, and returns the result embedded in an HTML template.\n\nInput: \n- The function receives form data via Flask's request object (implicit input through `request.form.values()`)\n- The form data should contain numerical values that can be converted to floats\n\nOutput:\n- Returns a rendered HTML template ('index.html') with the prediction result embedded in the template variable `prediction_text`\n- The output is a string containing the prediction percentage formatted as \"Percent with heart disease is X.XX\" where X.XX is the rounded prediction value",
    "Canonical_solution": "import numpy as np\nfrom flask import Flask, request, render_template\nimport pickle\n\napp = Flask(__name__)\nmodel = pickle.load(open('models/model.pkl', 'rb'))\n\n@app.route('/predict',methods=['POST'])\ndef predict():\n    int_features = [float(x) for x in request.form.values()]\n    features = [np.array(int_features)]\n    prediction = model.predict(features)\n    output = round(prediction[0], 2)\n    return render_template('index.html', prediction_text='Percent with heart disease is {}'.format(output))\n\nif __name__ == \"__main__\":\n    app.run()",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, render_template\nimport numpy as np\n\napp = Flask(__name__)\n\ndef predict():\n    # Extract input values from form data\n    input_values = [float(value) for value in request.form.values()]\n    # Convert input values to a format suitable for the machine learning model\n    input_array = np.array([input_values])\n    # Make a prediction using the pre-trained machine learning model\n    prediction = model.predict(input_array)\n    # Format the prediction result\n    prediction_text = f\"Percent with heart disease is {round(prediction[0][0], 2)}\"\n    # Render the HTML template with the prediction result\n    return render_template('index.html', prediction_text=prediction_text)\n\n@app.route('/predict', methods=['POST'])\ndef predict():\n    return predict()"
  },
  {
    "Task_id": 164,
    "Instruction": "Task Description: Create a Python function that sets up a real-time code tracing and visualization system using Flask to serve a web interface for monitoring execution patterns.\n\nFunction Description: The `trace` function establishes a web-based visualization tool that tracks and displays Python code execution in real-time. It creates a Flask web server that shows which lines of code are being executed most frequently, with features like heatmap visualization and stack trace inspection. The function uses Python's sys.settrace() mechanism to monitor execution and organizes the data for web display.\n\nInput:\n- files: [Optional callable] - A function to filter which files should be traced (default: None)\n- port: [int] - Port number for the web server (default: 9999)\n- host: [str] - Host address for the server (default: '127.0.0.1')\n- browser: [bool] - Whether to automatically open browser (default: False)\n- daemon: [bool] - Whether to run server as daemon thread (default: False)\n\nOutput:\n- None (The function runs indefinitely, serving the web interface and collecting trace data)\n\nThe function:\n1. Sets up tracing for the calling frame and specified files\n2. Creates a Flask web server with multiple routes for visualization\n3. Starts a background thread for the web server\n4. Configures sys.settrace() to collect execution data\n5. Optionally opens a browser window to display the visualization",
    "Canonical_solution": "import inspect\nimport logging\nimport sys\nimport threading\nimport webbrowser\nfrom collections import defaultdict, deque, Counter\nfrom functools import lru_cache\nfrom itertools import islice, takewhile\nfrom flask import Flask, render_template, jsonify, url_for, request\n\ndef trace(\n        files=None,\n        port=9999,\n        host='127.0.0.1',\n        browser=False,\n        daemon=False,\n):\n    calling_frame = inspect.currentframe().f_back\n    calling_file = calling_frame.f_code.co_filename\n\n    @lru_cache(maxsize=None)\n    def include_file(path):\n        try:\n            return path == calling_file or files(path)\n        except Exception:\n            return False\n\n    thread_ident = threading.get_ident()\n    queues = defaultdict(lambda: deque(maxlen=2 ** 10))\n    totals = defaultdict(Counter)\n\n    app = Flask(__name__)\n\n    host_is_local = host in [\"127.0.0.1\", \"localhost\"]\n    if host_is_local:\n        app.config[\"SERVER_NAME\"] = \"{host}:{port}\".format(host=host, port=port)\n\n    @app.route('/')\n    def index():\n        return render_template('index.html', files=sorted(queues.keys()))\n\n    @app.route('/file/')\n    def file_view():\n        return render_template(\"file.html\", **file_table_context())\n\n    def file_table_context():\n        filename = request.args['filename']\n        source = Source.for_filename(filename)\n        queue = queues[filename]\n\n        highlighted = highlight_ranges(source, frames_matching(filename))\n        highlighted_lines = list(enumerate(highlighted.splitlines()))\n        \n        counters = [\n            queue_counter(queue, 2 ** i)\n            for i in range(10 + 1)\n        ]\n\n        ratios = [\n            [\n                counter[i + 1] / min(2 ** c, len(queue) or 1)\n                * (c + 1) / 10\n                for c, counter in enumerate(counters)\n            ]\n            for i, _ in highlighted_lines\n        ]\n\n        max_ratio = max(map(max, ratios)) or 1\n\n        rows = [\n            (\n                i + 1,\n                totals[filename][i + 1] or '',\n                reversed([\n                    int(round(ratio / max_ratio * 100))\n                    for ratio in ratios[i]\n                ]),\n                line,\n            )\n            for i, line in highlighted_lines\n        ]\n\n        return dict(\n            rows=rows,\n            zip=zip,\n            lightnesses=[int((i + 1) * 100 / (10 + 1)) for i in range(10 + 1)],\n            filename=filename,\n            highlighted=highlighted,\n        )\n\n    @app.route('/table/')\n    def file_table_view():\n        return render_template('file_table.html', **file_table_context())\n\n    def current_frame():\n        return sys._current_frames()[thread_ident]\n\n    def frames_matching(filename):\n        frame = current_frame()\n        while frame:\n            if frame.f_code.co_filename == filename:\n                yield frame\n            frame = frame.f_back\n\n    @app.route('/stacktrace/')\n    def stacktrace():\n        def gen():\n            frame = current_frame()\n            while frame:\n                code = frame.f_code\n                filename = code.co_filename\n                name = Source.for_frame(frame).code_qualname(code)\n                yield (\n                    filename,\n                    frame.f_lineno,\n                    name,\n                    highlight_stack_frame(frame),\n                    include_file(filename)\n                )\n                frame = frame.f_back\n\n        return jsonify(list(takewhile(\n            lambda entry: not (\n                    'heartrate' in entry[0]\n                    and entry[2].endswith(trace_func.__name__)),\n            list(gen())[::-1]\n        )))\n\n    threading.Thread(\n        target=lambda: app.run(\n            debug=False,\n            host=host,\n            port=port,\n        ),\n        daemon=daemon,\n    ).start()\n\n    def trace_func(frame, event, _arg):\n        filename = frame.f_code.co_filename\n        if event == \"call\":\n            if include_file(filename):\n                return trace_func\n\n        elif event == \"line\":\n            lineno = frame.f_lineno\n            queues[filename].append(lineno)\n            totals[filename][lineno] += 1\n            Source.lazycache(frame)\n\n    calling_frame.f_trace = trace_func\n    sys.settrace(trace_func)\n    \n    if browser and host_is_local:\n        with app.app_context():\n            url = url_for(\n                'file_view',\n                filename=calling_file,\n            )\n        webbrowser.open_new_tab(url)",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "```python\nimport sys\nimport threading\nfrom flask import Flask, render_template, jsonify\nimport json\n\napp = Flask(__name__)\n\nfiles = None\nport = 9999\nhost = '127.0.0.1'\nbrowser = False\ndaemon = False\n\ndef trace(files=None, port=9999, host='127.0.0.1', browser=False, daemon=False):\n    global files, port, host, browser, daemon\n    files = files\n    port = port\n    host = host\n    browser = browser\n    daemon = daemon\n\n    def trace_calls(frame, event, arg):\n        if event == 'call':\n            return trace_calls\n        elif event == 'line':\n            return trace_lines\n        return None\n\n    def trace_lines(frame, event, arg):\n        nonlocal last_line\n        if event == 'line':\n            last_line = frame.f_lineno\n            return trace_lines\n\n    last_line = None\n    sys.settrace(trace_calls)\n\n    @app.route('/')\n    def index():\n        return render_template('index.html')\n\n    @app.route('/heatmap')\n    def heatmap():\n        return jsonify(heatmap_data)\n\n    @app.route('/stacktrace')\n    def stacktrace():\n        return jsonify(stacktrace_data)\n\n    def start_server():\n        app.run(host=host, port=port, threaded=True)\n\n    server_thread = threading.Thread(target=start_server)\n    server_thread.daemon = daemon\n    server_thread.start()\n\n    if browser:\n        import webbrowser\n        webbrowser.open(f'http://{host}:{port}')\n\n    while True:\n        pass\n\nheatmap_data = []\nstacktrace_data = []\n\ndef filter_files(frame):\n    if files is None:\n        return True\n    return files(frame.f_code.co_filename)\n\ndef update_data(frame):\n    if filter_files(frame):\n        global last_line\n        heatmap_data.append(last_line)\n        stacktrace_data.append(frame.f_code.co_filename)\n\ntrace_lines = trace_lines\nsys.settrace(trace_calls)\n```"
  },
  {
    "Task_id": 165,
    "Instruction": "Task Description: Create a Flask-based HTTP server class for handling ONNX model modification requests, including opening models, applying modifications, and providing download functionality.\n\nClass Description: ONNXModifierServer is a Flask application wrapper that provides endpoints for uploading ONNX models, modifying them, and downloading the modified versions. It maintains the model state between requests and handles file operations.\n\nAttributes:\n- app: [Flask] - The Flask application instance\n- onnx_modifier: [onnxModifier|None] - The current ONNX model being processed (None when no model loaded)\n\nMethods:\n- __init__: [constructor]() -> [None] - Initializes the Flask app and sets up routes\n- _setup_routes: [method]() -> [None] - Configures URL routes and their handler methods\n- index: [method]() -> [str] - Returns the main HTML interface (renders index.html template)\n- open_model: [method]() -> [tuple[str, int]] - Handles file upload, creates onnxModifier instance from uploaded file (expects 'file' in request.files)\n- modify_and_download_model: [method]() -> [str] - Applies modifications from JSON request (request.get_json()), saves model, returns save path\n- run: [method](host: str='127.0.0.1', port: int=5000, debug: bool=False) -> [None] - Starts the Flask development server with specified parameters",
    "Canonical_solution": "from flask import Flask, request, render_template\n\nclass ONNXModifierServer:\n    def __init__(self):\n        self.app = Flask(__name__)\n        self.onnx_modifier = None\n        self._setup_routes()\n\n    def _setup_routes(self):\n        self.app.add_url_rule('/', 'index', self.index)\n        self.app.add_url_rule('/open_model', 'open_model', self.open_model, methods=['POST'])\n        self.app.add_url_rule('/download', 'modify_and_download_model', self.modify_and_download_model, methods=['POST'])\n\n    def index(self):\n        return render_template('index.html')\n\n    def open_model(self):\n        onnx_file = request.files['file']\n        self.onnx_modifier = onnxModifier.from_name_protobuf_stream(\n            onnx_file.filename, onnx_file.stream)\n        return 'OK', 200\n\n    def modify_and_download_model(self):\n        modify_info = request.get_json()\n        self.onnx_modifier.reload()\n        self.onnx_modifier.modify(modify_info)\n        save_path = self.onnx_modifier.check_and_save_model()\n        return save_path\n\n    def run(self, host='127.0.0.1', port=5000, debug=False):\n        self.app.run(host=host, port=port, debug=debug)",
    "Code_level": "Class-level",
    "FSMID_for_test": 60,
    "right_result": "```python\nfrom flask import Flask, request, render_template, send_file\nimport onnx\nimport json\n\nclass ONNXModifierServer:\n    def __init__(self):\n        self.app = Flask(__name__)\n        self.onnx_modifier = None\n        self._setup_routes()\n\n    def _setup_routes(self):\n        @self.app.route('/')\n        def index():\n            return render_template('index.html')\n\n        @self.app.route('/upload', methods=['POST'])\n        def open_model():\n            file = request.files['file']\n            if file:\n                self.onnx_modifier = onnxModifier(file.read())\n            return ('', 204)\n\n        @self.app.route('/modify', methods=['POST'])\n        def modify_and_download_model():\n            modifications = request.get_json()\n            save_path = self.onnx_modifier.modify_and_save(modifications)\n            return send_file(save_path, as_attachment=True)\n\n    def run(self, host='127.0.0.1', port=5000, debug=False):\n        self.app.run(host=host, port=port, debug=debug)\n\nclass onnxModifier:\n    def __init__(self, model_data):\n        self.model = onnx.load_from_string(model_data)\n\n    def modify_and_save(self, modifications):\n        # Apply modifications to the model\n        # This is a placeholder for actual model modification logic\n        modified_model = self.model  # Replace with actual modification\n        save_path = 'modified_model.onnx'\n        onnx.save(modified_model, save_path)\n        return save_path\n```"
  },
  {
    "Task_id": 166,
    "Instruction": "Task Description: Create a Flask-based HTTP server that implements a GraphQL endpoint with both GET and POST methods, including a GraphiQL playground interface for testing queries.\n\nFunction Description: The code implements two Flask route handlers for a GraphQL server. The first handles GET requests to serve a GraphiQL playground interface, while the second handles POST requests to process GraphQL queries and mutations.\n\nInput:\n- For GET /graphql: No input parameters (uses Flask's request object internally)\n- For POST /graphql: Expects JSON payload containing GraphQL query/mutation\n\nOutput:\n- For GET /graphql: Returns HTML content for GraphiQL playground (status 200)\n- For POST /graphql: Returns JSON response containing either:\n  - Successful query result (status 200)\n  - Error response (status 400) if query fails",
    "Canonical_solution": "from flask import Flask, jsonify, request\nfrom ariadne import graphql_sync\nfrom ariadne.explorer import ExplorerGraphiQL\n\napp = Flask(__name__)\napp.config.update(\n    {\n        \"TESTING\": True,\n    }\n)\n\nexplorer = ExplorerGraphiQL(title=\"My Flask GraphQL\")\n\n@app.route(\"/graphql\", methods=[\"GET\"])\ndef graphql_playground():\n    html = explorer.html(request)\n    return html, 200\n\n@app.route(\"/graphql\", methods=[\"POST\"])\ndef graphql_server():\n    data = request.get_json()\n    success, result = graphql_sync(\n        schema,\n        data,\n        context_value={\"request\": request},\n        root_value={\"hello\": \"Hello Flask!\"},\n        debug=app.debug,\n    )\n    status_code = 200 if success else 400\n    return jsonify(result), status_code",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, jsonify\nfrom flask_graphql import GraphQLView\nimport json\n\napp = Flask(__name__)\n\nschema = GraphQLView.get_default_graphql_schema()\n\n@app.route('/graphql', methods=['GET'])\ndef graphiql():\n    return app.send_static_file('graphiql.html')\n\n@app.route('/graphql', methods=['POST'])\ndef execute_graphql():\n    data = request.get_json()\n    query = data.get('query')\n    if not query:\n        return jsonify({'error': 'Query is required'}), 400\n    result = schema.execute(query)\n    return jsonify(result.data), 200\n\nif __name__ == '__main__':\n    app.run()"
  },
  {
    "Task_id": 167,
    "Instruction": "The provided reference code is at the function level, specifically focusing on a Flask web application's route handling. Here's the structured instruction:\n\nTask Description: Create a Flask web application route handler that processes both GET and POST requests, implements various command-based functionalities, and returns appropriate HTML templates based on the input commands.\n\nFunction Description: The `index()` function serves as the main route handler for the root URL (\"/\"). It processes incoming HTTP requests, executes different actions based on the received commands (for POST requests), and returns corresponding HTML templates. The function handles feature activation, information display, and system operations through a command interface.\n\nInput:\n- HTTP request object (implicit through Flask)\n- For POST requests:\n  - Form data containing a command string (key: \"in\")\n- For GET requests:\n  - No explicit input parameters\n- Global variables (used in the function but not passed as parameters):\n  - redirectionMicrosoft (bool)\n  - redirectionMicrosoftFailed (bool)\n  - phone_number (str)\n  - email (str)\n  - password (str)\n  - Various feature flags (social_media, get_links, etc.)\n\nOutput:\n- HTTP responses containing:\n  - Rendered HTML templates (for successful operations)\n  - Redirects to other routes (for certain conditions)\n  - Error pages (for failed operations)\n\nThe function returns different responses based on:\n1. Request method (GET/POST)\n2. Specific command received (for POST requests)\n3. System state (global variables)\n4. Success/failure of operations",
    "Canonical_solution": "import os\nfrom flask import Flask, render_template, request, redirect, url_for\nimport threading\nimport subprocess\n\napp = Flask(__name__)\n\ndef run_flask_server():\n    app.run(str(subprocess.check_output(\"hostname -I | awk '{print $1}'\", shell=True).decode().strip()), 8080, debug=True)\n\n@app.route(\"/\", methods=[\"POST\", \"GET\"])\ndef index():\n    if request.method == \"GET\":\n        if redirectionMicrosoft == True:\n            return render_template(\"findOwnerSuccess.html\", phone_number=phone_number)\n        if redirectionMicrosoftFailed == True:\n            return render_template(\"failed.html\")\n        return render_template(\"index.html\")\n    if request.method == \"POST\":\n        command = request.form[\"in\"]\n        if command == \"help\":\n            return render_template(\"help.html\")\n        elif command[0:15] == \"add PhoneNumber\":\n            phone_number = str(\"+\" + re.search(\"\\d+\", command).group(0))\n            return render_template(\"phoneNumberSuccess.html\", phone_number=phone_number)\n        elif command[0:21] == \"add feature FindOwner\":\n            try:\n                if email != \"\" or password != \"\":\n                    find_owner = \"Added\"\n                    return render_template(\"findOwnerSuccess.html\", phone_number=phone_number)\n                else:\n                    return redirect(url_for(\"microsoftMail\"))\n            except:\n                return render_template(\"failed.html\")\n        elif command[0:23] == \"add feature SocialMedia\":\n            social_media = \"Added\"\n            try:\n                return render_template(\"socialMediaSuccess.html\", phone_number=phone_number)\n            except:\n                return render_template(\"failed.html\")\n        elif command[0:20] == \"add feature GetLinks\":\n            get_links = \"Added\"\n            try:\n                return render_template(\"GetLinksSuccess.html\", phone_number=phone_number)\n            except:\n                return render_template(\"failed.html\")\n        elif command[0:20] == \"add feature SpamRisk\":\n            spam_risk = \"Added\"\n            try:\n                return render_template(\"SpamRiskSuccess.html\", phone_number=phone_number)\n            except:\n                return render_template(\"failed.html\")\n        elif command[0:23] == \"add feature GetComments\":\n            get_comments = \"Added\"\n            try:\n                return render_template(\"GetCommentsSuccess.html\", phone_number=phone_number)\n            except:\n                return render_template(\"failed.html\")\n        elif command[0:12] == \"show options\":\n            try:\n                return render_template(\"showoptions.html\", phone_number=phone_number, social_media=social_media, get_links=get_links, spam_risk=spam_risk, find_owner=find_owner, get_comments=get_comments)\n            except:\n                phone_number = \"Not Provided\"\n                return render_template(\"showoptions.html\", phone_number=phone_number, social_media=social_media, get_links=get_links, spam_risk=spam_risk, find_owner=find_owner, get_comments=get_comments)\n        elif command[0:20] == \"add feature *\":\n            runall = \"Added\"\n            social_media = \"Added\"\n            spam_risk = \"Added\"\n            get_comments = \"Added\"\n            get_links = \"Added\"\n            try:\n                if email != \"\" or password != \"\":\n                    find_owner = \"Added\"\n                    return render_template(\"featureAll.html\", phone_number=phone_number)\n                else:\n                    return redirect(url_for(\"microsoftMail\"))\n            except:\n                return render_template(\"failed.html\")\n        elif command[0:3] == \"run\":\n            Investigation.general.location(phone_number)\n            country = Investigation.general.returnCountry()\n            operator = Investigation.general.returnOperator()\n            timeZone = Investigation.general.returnTimeZone()\n            errNumber = Investigation.general.return_errNumber_()\n            currentTime = Investigation.general.returnCurrentTime()\n            if errNumber != \"False\":\n                threading.Thread(target=runScripts).start()\n                time.sleep(2)\n                return redirect(url_for(\"investigation\"))\n            else:\n                return redirect(url_for(\"investigationErr\"))\n        else:\n            return render_template(\"unkownCommand.html\")\n\nif __name__ == \"__main__\":\n    run_flask_server()",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, render_template, redirect, url_for\n\napp = Flask(__name__)\n\n@app.route('/', methods=['GET', 'POST'])\ndef index():\n    if request.method == 'POST':\n        command = request.form.get('in')\n        if command == 'activate_feature':\n            # Activate feature logic\n            return render_template('feature_activated.html')\n        elif command == 'display_info':\n            # Display information logic\n            return render_template('info_displayed.html')\n        elif command == 'perform_system_operation':\n            # System operation logic\n            return render_template('system_operation_performed.html')\n        else:\n            return render_template('error.html', error='Invalid command')\n    else:\n        if redirectionMicrosoft:\n            return redirect(url_for('microsoft_redirection'))\n        elif redirectionMicrosoftFailed:\n            return render_template('microsoft_redirection_failed.html')\n        else:\n            return render_template('index.html')\n\n@app.route('/microsoft_redirection')\ndef microsoft_redirection():\n    # Microsoft redirection logic\n    return render_template('microsoft_redirection.html')\n\nif __name__ == '__main__':\n    app.run(debug=True)"
  },
  {
    "Task_id": 168,
    "Instruction": "Task Description: Create a Flask-based HTTP server application that serves files from a specified directory, handles file uploads, and implements basic authentication. The server should support both directory browsing and file downloads, with optional SSL encryption.\n\nFunction Description: The function `create_flask_app` initializes and runs a Flask web server with the following capabilities:\n1. Serves files from a specified directory with directory browsing\n2. Handles file uploads to valid subdirectories\n3. Implements HTTP Basic Authentication\n4. Supports optional SSL encryption\n5. Handles permission errors gracefully\n\nInput:\n- directory: [str] - The root directory to serve files from\n- port: [int] - The port number to run the server on\n- password: [str] - The password for HTTP Basic Authentication\n- ssl: [bool] - Whether to enable SSL encryption\n\nOutput: None (The function runs the server indefinitely until interrupted)\n\nMethods:\n- home(path): Handles requests for files and directories\n  Input: path [str] - The requested file/directory path\n  Output: Flask response (file download, directory listing, or redirect)\n  \n- upload(): Handles file uploads via POST requests\n  Input: None (uses Flask's request object)\n  Output: Flask redirect response\n  \n- verify_password(username, password): Verifies HTTP Basic Authentication credentials\n  Input: \n    username [str] - The username (ignored in this implementation)\n    password [str] - The password to verify\n  Output: [bool] - True if authentication succeeds, False otherwise",
    "Canonical_solution": "from flask import Flask, render_template, send_file, redirect, request, send_from_directory, url_for, abort\nfrom flask_httpauth import HTTPBasicAuth\nfrom werkzeug.utils import secure_filename\nfrom werkzeug.security import generate_password_hash, check_password_hash\nfrom werkzeug.serving import run_simple\n\ndef create_flask_app(directory, port, password, ssl):\n    app = Flask(__name__)\n    auth = HTTPBasicAuth()\n\n    @app.route('/', defaults={'path': None})\n    @app.route('/<path:path>')\n    @auth.login_required\n    def home(path):\n        if path and is_valid_subpath(path, directory):\n            path = os.path.normpath(path)\n            requested_path = os.path.join(directory, path)\n\n            if os.path.isdir(requested_path):\n                back = get_parent_directory(requested_path, directory)\n                is_subdirectory = True\n            elif os.path.isfile(requested_path):\n                if request.args.get('view') is None:\n                    send_as_attachment = True\n                else:\n                    send_as_attachment = False\n\n                (filename, extension) = os.path.splitext(requested_path)\n                if extension == '':\n                    mimetype = 'text/plain'\n                else:\n                    mimetype = None\n\n                try:\n                    return send_file(requested_path, mimetype=mimetype, as_attachment=send_as_attachment)\n                except PermissionError:\n                    abort(403, 'Read Permission Denied: ' + requested_path)\n        else:\n            is_subdirectory = False\n            requested_path = directory\n            back = ''\n\n        if os.path.exists(requested_path):\n            try:\n                directory_files = process_files(os.scandir(requested_path), directory)\n            except PermissionError:\n                abort(403, 'Read Permission Denied: ' + requested_path)\n\n            return render_template('home.html', files=directory_files, back=back,\n                                 directory=requested_path, is_subdirectory=is_subdirectory, version=VERSION)\n        else:\n            return redirect('/')\n\n    @app.route('/upload', methods=['POST'])\n    @auth.login_required\n    def upload():\n        if request.method == 'POST':\n            if 'file' not in request.files:\n                return redirect(request.referrer)\n\n            path = request.form['path']\n            if not is_valid_upload_path(path, directory):\n                return redirect(request.referrer)\n\n            for file in request.files.getlist('file'):\n                if file.filename == '':\n                    return redirect(request.referrer)\n\n                if file:\n                    filename = secure_filename(file.filename)\n                    full_path = os.path.join(path, filename)\n                    try:\n                        file.save(full_path)\n                    except PermissionError:\n                        abort(403, 'Write Permission Denied: ' + full_path)\n\n            return redirect(request.referrer)\n\n    users = {\n        '': generate_password_hash(password)\n    }\n\n    @auth.verify_password\n    def verify_password(username, password):\n        if password:\n            if username in users:\n                return check_password_hash(users.get(username), password)\n            return False\n        else:\n            return True\n\n    ssl_context = 'adhoc' if ssl else None\n    run_simple(\"0.0.0.0\", int(port), app, ssl_context=ssl_context)",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, send_from_directory, redirect, url_for, abort\nfrom werkzeug.utils import secure_filename\nfrom functools import wraps\nimport os\n\napp = Flask(__name__)\n\ndef create_flask_app(directory, port, password, ssl):\n    app.config['UPLOAD_FOLDER'] = os.path.join(directory, 'uploads')\n    app.config['SECRET_KEY'] = password\n    app.config['TRUSTED_HOSTS'] = ['*']\n    if ssl:\n        app.config['SSL_CERT_FILE'] = 'path/to/cert.pem'\n        app.config['SSL_KEY_FILE'] = 'path/to/key.pem'\n    \n    @app.route('/')\n    def home(path=''):\n        if not verify_password(request.authorization.username, request.authorization.password):\n            return abort(401)\n        if path == '':\n            return send_from_directory(directory, 'index.html')\n        else:\n            return send_from_directory(directory, path)\n    \n    @app.route('/upload', methods=['POST'])\n    def upload():\n        if not verify_password(request.authorization.username, request.authorization.password):\n            return abort(401)\n        if 'file' not in request.files:\n            return redirect(request.url)\n        file = request.files['file']\n        if file.filename == '':\n            return redirect(request.url)\n        if file:\n            filename = secure_filename(file.filename)\n            file_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)\n            file.save(file_path)\n            return redirect(url_for('home', path=file_path))\n    \n    @app.route('/uploads/<path:filename>')\n    def uploaded_file(filename):\n        return send_from_directory(app.config['UPLOAD_FOLDER'], filename)\n    \n    app.run(host='0.0.0.0', port=port)\n\ndef verify_password(username, password):\n    return password == app.config['SECRET_KEY']"
  },
  {
    "Task_id": 169,
    "Instruction": "Task Description: Create a Flask-based HTTP server that handles QR code generation, status checking, and token retrieval for an authentication system.\n\nFunction Description: The server provides three main endpoints: one to display a main page with QR code, one to generate QR code URLs, one to check QR code status, and one to retrieve authentication tokens.\n\nInput:\n- For '/get_qrcode' endpoint: GET request with no parameters\n- For '/check_qrcode/<sid>' endpoint: GET request with sid (session ID) as URL parameter\n- For '/get_tokens' endpoint: POST request with JSON body containing auth_code\n\nOutput:\n- '/get_qrcode': Returns JSON with QR code URL data\n- '/check_qrcode/<sid>': Returns JSON with QR code status\n- '/get_tokens': Returns JSON with status confirmation after processing auth_code",
    "Canonical_solution": "import time\nimport logging\nimport json\nimport uuid\nimport hashlib\nimport base64\nimport random\nimport sys\nimport requests\nfrom flask import Flask, jsonify, render_template, request\nfrom Crypto.Cipher import AES\nfrom Crypto.Util.Padding import unpad\n\napp = Flask(__name__)\ntimestamp = str(requests.get('http://api.extscreen.com/timestamp', timeout=10).json()['data']['timestamp'])\nunique_id = uuid.uuid4().hex\nwifimac = str(random.randint(10**11, 10**12 - 1))\nheaders = {\n    \"token\": \"6733b42e28cdba32\",\n    'User-Agent': 'Mozilla/5.0 (Linux; U; Android 9; zh-cn; SM-S908E Build/TP1A.220624.014) AppleWebKit/533.1 (KHTML, like Gecko) Mobile Safari/533.1',\n    'Host': 'api.extscreen.com'\n}\n\n@app.route('/')\ndef main_page():\n    return render_template('qrcode.html')\n\n@app.route('/get_qrcode', methods=['GET'])\ndef get_qrcode():\n    return jsonify(get_qrcode_url())\n\n@app.route('/check_qrcode/<sid>', methods=['GET'])\ndef check_qrcode(sid):\n    return jsonify(check_qrcode_status(sid))\n\n@app.route('/get_tokens', methods=['POST'])\ndef get_tokens():\n    _auth_code = request.json.get('auth_code')\n    get_token(_auth_code)\n    return jsonify({'status': 'completed'})",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n@app.route('/get_qrcode', methods=['GET'])\ndef get_qrcode():\n    # QR code generation logic here\n    qr_code_url = \"https://example.com/qr_code\"\n    return jsonify({\"qr_code_url\": qr_code_url})\n\n@app.route('/check_qrcode/<sid>', methods=['GET'])\ndef check_qrcode(sid):\n    # QR code status checking logic here\n    qr_code_status = \"active\"\n    return jsonify({\"sid\": sid, \"status\": qr_code_status})\n\n@app.route('/get_tokens', methods=['POST'])\ndef get_tokens():\n    # Token retrieval logic here\n    auth_code = request.json.get('auth_code')\n    tokens = \"tokens_generated\"\n    return jsonify({\"status\": \"success\", \"tokens\": tokens})\n\nif __name__ == '__main__':\n    app.run(debug=True)"
  },
  {
    "Task_id": 174,
    "Instruction": "Task Description: Create a Flask-based HTTP server that handles GET requests for semantic similarity search, processes the query parameters, performs the search operation, and returns JSON-formatted results with timing information.\n\nFunction Description: The function `run_simcse_demo` initializes and runs a Flask web server that provides an API endpoint for semantic similarity search. It configures CORS, sets up request handling, and launches the server using Tornado for production-ready serving. The API endpoint processes query parameters, performs a search operation using an embedder, and returns results with execution time.\n\nInput:\n- port: [int] - The port number on which the server will listen\n- args: [argparse.Namespace] - Command line arguments containing:\n  - ip: [str] - IP address to bind the server\n  - port: [str] - Port number (as string) to bind the server\n\nOutput: None (The function runs indefinitely as a web server)",
    "Canonical_solution": "import json\nimport argparse\nimport os\nimport logging\nfrom flask import Flask, request, jsonify\nfrom flask_cors import CORS\nfrom tornado.wsgi import WSGIContainer\nfrom tornado.httpserver import HTTPServer\nfrom tornado.ioloop import IOLoop\n\nlogging.basicConfig(format='%(asctime)s - %(levelname)s - %(name)s -   %(message)s', datefmt='%m/%d/%Y %H:%M:%S',\n                    level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\ndef run_simcse_demo(port, args):\n    app = Flask(__name__, static_folder='./static')\n    app.config['JSONIFY_PRETTYPRINT_REGULAR'] = False\n    CORS(app)\n\n    @app.route('/api', methods=['GET'])\n    def api():\n        query = request.args['query']\n        top_k = int(request.args['topk'])\n        threshold = float(request.args['threshold'])\n        start = time()\n        results = embedder.search(query, top_k=top_k, threshold=threshold)\n        ret = []\n        out = {}\n        for sentence, score in results:\n            ret.append({\"sentence\": sentence, \"score\": score})\n        span = time() - start\n        out['ret'] = ret\n        out['time'] = \"{:.4f}\".format(span)\n        return jsonify(out)\n\n    addr = args.ip + \":\" + args.port\n    logger.info(f'Starting Index server at {addr}')\n    http_server = HTTPServer(WSGIContainer(app))\n    http_server.listen(port)\n    IOLoop.instance().start()",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "```python\nfrom flask import Flask, request, jsonify\nimport time\nimport argparse\nfrom flask_cors import CORS\nimport tornado.ioloop\nimport tornado.web\n\napp = Flask(__name__)\nCORS(app)\n\n@app.route('/search', methods=['GET'])\ndef search():\n    start_time = time.time()\n    query = request.args.get('query', '')\n    # Perform search operation using an embedder\n    # results = ...\n    end_time = time.time()\n    execution_time = end_time - start_time\n    return jsonify({'results': results, 'execution_time': execution_time})\n\ndef run_simcse_demo(port, args):\n    settings = dict(\n        debug=True,\n        template_folder='templates',\n        static_folder='static',\n        static_url_path='/static',\n        cors_headers=[\n            ('Access-Control-Allow-Origin', '*'),\n            ('Access-Control-Allow-Methods', 'POST, GET, OPTIONS'),\n            ('Access-Control-Allow-Headers', 'Content-Type, Authorization'),\n        ]\n    )\n    http_server = tornado.httpserver.HTTPServer(\n        tornado.web.Application([\n            (r\"/search\", SearchHandler),\n        ], **settings)\n    )\n    http_server.listen(int(args.port))\n    print(f\"Server running on {args.ip}:{args.port}\")\n    tornado.ioloop.IOLoop.current().start()\n```"
  },
  {
    "Task_id": 175,
    "Instruction": "Task Description: Create a Flask-based API class that serves as an interface for a machine learning model, providing endpoints to calculate potential, gradient, and perform minimization operations.\n\nClass Description: FlaskAPI is a class that wraps a machine learning model and exposes its functionality through a RESTful API using Flask. It handles HTTP POST requests to perform model operations and returns JSON responses.\n\nAttributes:\n- webapp: Flask - The Flask application instance that handles HTTP requests\n- model: Any - The machine learning model that provides the core functionality (prediction, gradient calculation, and minimization)\n\nMethods:\n- __init__(model) -> None - Initializes the FlaskAPI with the provided model and sets up routes\n- _setup_routes() -> None - Private method that configures the URL routes and their corresponding handlers\n- run(**kwargs) -> None - Starts the Flask web server with the provided configuration options\n- potential() -> (Response, int) - Handles POST requests to '/potential', calculates model prediction for input data, returns JSON response with result\n- gradient() -> (Response, int) - Handles POST requests to '/gradient', calculates model gradient for input data, returns JSON response with gradient values\n- minimize() -> (Response, int) - Handles POST requests to '/minimize', performs structure minimization using the model, returns JSON response with optimized structure and energy",
    "Canonical_solution": "from flask import request, Flask, jsonify\nimport numpy as np\n\nclass FlaskAPI:\n    def __init__(self, model):\n        self.webapp = Flask(__name__)\n        self.model = model\n        self._setup_routes()\n\n    def _setup_routes(self):\n        self.webapp.add_url_rule('/potential', 'potential', self.potential, methods=[\"POST\"])\n        self.webapp.add_url_rule('/gradient', 'gradient', self.gradient, methods=[\"POST\"])\n        self.webapp.add_url_rule('/minimize', 'minimize', self.minimize, methods=[\"POST\"])\n\n    def run(self, **kwargs):\n        self.webapp.run(**kwargs)\n\n    def potential(self):\n        content = request.get_json(force=True)\n        if not content or not 'X' in content:\n            abort(400)\n        X = np.array(content['X'])\n        x0 = X[:, 1:]\n        a0 = X[:, :1]\n        result = self.model.pred_one(x0, a0)\n        return jsonify({'y': result.tolist()[0]}), 200\n\n    def gradient(self):\n        content = request.get_json(force=True)\n        if not content or not 'X' in content:\n            abort(400)\n        X = np.array(content['X'])\n        num_atoms = X.shape[0]\n        x0 = X[:, 1:]\n        a0 = X[:, :1]\n        res = self.model.grad_one(x0, a0)\n        res = res.reshape((num_atoms, 3))\n        return jsonify({'grad': res.tolist()}), 200\n\n    def minimize(self):\n        content = request.get_json(force=True)\n        if not content or not 'X' in content:\n            abort(400)\n        X = np.array(content['X'])\n        constraints = None\n        if 'constraints' in content:\n            constraints = content['constraints']\n        num_atoms = X.shape[0]\n        x0 = X[:, 1:]\n        a0 = X[:, :1]\n        res = self.model.minimize_structure(x0, a0, constraints)\n        res = res.reshape((num_atoms, 3))\n        y = self.model.pred_one(res, a0).tolist()[0]\n        return jsonify({'X': res.tolist(), 'y': y}), 200",
    "Code_level": "Class-level",
    "FSMID_for_test": 60,
    "right_result": "```python\nfrom flask import Flask, request, jsonify\n\nclass FlaskAPI:\n    def __init__(self, model):\n        self.webapp = Flask(__name__)\n        self.model = model\n        self._setup_routes()\n\n    def _setup_routes(self):\n        @self.webapp.route('/potential', methods=['POST'])\n        def potential():\n            data = request.get_json()\n            result = self.model.calculate_potential(data)\n            return jsonify(result), 200\n\n        @self.webapp.route('/gradient', methods=['POST'])\n        def gradient():\n            data = request.get_json()\n            result = self.model.calculate_gradient(data)\n            return jsonify(result), 200\n\n        @self.webapp.route('/minimize', methods=['POST'])\n        def minimize():\n            data = request.get_json()\n            result = self.model.minimize_structure(data)\n            return jsonify(result), 200\n\n    def run(self, **kwargs):\n        self.webapp.run(**kwargs)\n```"
  },
  {
    "Task_id": 176,
    "Instruction": "Task Description: Create a Flask-based HTTP server for managing blueprints, including operations for retrieving, storing, and validating blueprint data and associated tarballs. The server should handle various HTTP methods (GET, PUT) and include metrics tracking for bandwidth and request counts.\n\nClass Description: BlueprintServer is a Flask application wrapper that provides endpoints for blueprint management, including CRUD operations for blueprints and their associated tarballs. It includes validation, metrics tracking, and response handling.\n\nAttributes:\n- app: Flask - The Flask application instance\n- browser_pattern: re.Pattern - Regular expression pattern for detecting browser user agents\n\nMethods:\n- __init__() -> None - Initializes the Flask app and sets up routes\n- _setup_routes() -> None - Defines all URL routes and their associated handlers\n- _blueprint(secret: str, name: str) -> Union[Blueprint, None, bool] - Retrieves and validates a blueprint from the backend\n- _server() -> str - Returns the server's base URL\n- _validate_secret(secret: str) -> None - Validates the secret format (400 if invalid)\n- _validate_name(name: str) -> None - Validates the name format (400 if invalid)\n- _validate_sha(sha: str) -> None - Validates the SHA format (400 if invalid)\n- secret() -> MeteredResponse - Generates and returns a new secret (201 response)\n- get_blueprint(secret: str, name: str) -> Union[MeteredResponse, abort] - Retrieves a blueprint (200/301/404 response)\n- put_blueprint(secret: str, name: str) -> MeteredResponse - Stores a new blueprint (202/400/502 response)\n- get_tarball(secret: str, name: str, sha: str) -> Union[redirect, abort] - Retrieves a tarball (301/404 response)\n- put_tarball(secret: str, name: str, sha: str) -> MeteredResponse - Stores a new tarball (202/400/502 response)\n- sh(secret: str, name: str, name2: str) -> Union[MeteredResponse, abort] - Generates shell script (200/400/404/502 response)\n- user_data(secret: str, name: str) -> MeteredResponse - Generates user-data script (200/404/502 response)\n- run() -> None - Starts the Flask development server",
    "Canonical_solution": "from flask import Flask, Response, request\nimport re\nimport os\nimport base64\nimport json\nimport librato\nimport statsd\nfrom blueprint import Blueprint\nimport backend\n\nclass MeteredResponse(Response):\n    def __init__(self, *args, **kwargs):\n        super(MeteredResponse, self).__init__(*args, **kwargs)\n        content_length = len(kwargs.get('response', ''))\n        if 0 < content_length:\n            librato.count('blueprint-io-server.bandwidth.out', content_length)\n            statsd.update('blueprint-io-server.bandwidth.out', content_length)\n\nclass BlueprintServer:\n    def __init__(self):\n        self.app = Flask(__name__)\n        self._setup_routes()\n        self.browser_pattern = re.compile(r'Chrome|Gecko|Microsoft|Mozilla|Safari|WebKit')\n\n    def _setup_routes(self):\n        self.app.route('/secret', methods=['GET'])(self.secret)\n        self.app.route('/<secret>/<name>', methods=['GET'])(self.get_blueprint)\n        self.app.route('/<secret>/<name>', methods=['PUT'])(self.put_blueprint)\n        self.app.route('/<secret>/<name>/<sha>.tar', methods=['GET'])(self.get_tarball)\n        self.app.route('/<secret>/<name>/<sha>.tar', methods=['PUT'])(self.put_tarball)\n        self.app.route('/<secret>/<name>/<name2>.sh', methods=['GET'])(self.sh)\n        self.app.route('/<secret>/<name>/user-data.sh', methods=['GET'])(self.user_data)\n\n    def _blueprint(self, secret, name):\n        data = backend.get_blueprint(secret, name)\n        if data is None:\n            return None\n        elif data is False:\n            return False\n        b = Blueprint()\n        b.name = name\n        b.update(json.loads(data))\n        return b\n\n    def _server(self):\n        return request.url_root\n\n    def _validate_secret(self, secret):\n        if re.match(r'^[0-9A-Za-z_-]{64}$', secret) is None:\n            abort(400)\n\n    def _validate_name(self, name):\n        if re.search(r'[/ \\t\\r\\n]', name) is not None:\n            abort(400)\n\n    def _validate_sha(self, sha):\n        if re.match(r'^[0-9a-f]{40}$', sha) is None:\n            abort(400)\n\n    def secret(self):\n        while True:\n            s = base64.urlsafe_b64encode(os.urandom(48))\n            try:\n                iter(backend.list(s)).next()\n            except StopIteration:\n                break\n        return MeteredResponse(response='{0}\\n'.format(s),\n                             status=201,\n                             content_type='text/plain')\n\n    def get_blueprint(self, secret, name):\n        self._validate_secret(secret)\n        self._validate_name(name)\n\n        content_length = backend.head_blueprint(secret, name)\n        if content_length is None:\n            abort(404)\n\n        if self.browser_pattern.search(request.environ.get('HTTP_USER_AGENT', '')) or 'html' == request.args.get('format'):\n            librato.count('blueprint-io-server.renders')\n            statsd.increment('blueprint-io-server.renders')\n            return render_template('blueprint.html', b=self._blueprint(secret, name))\n        else:\n            librato.count('blueprint-io-server.requests.get')\n            statsd.increment('blueprint-io-server.requests.get')\n            librato.count('blueprint-io-server.bandwidth.out', content_length)\n            statsd.update('blueprint-io-server.bandwidth.out', content_length)\n            return redirect(backend.url_for_blueprint(secret, name), code=301)\n\n    def put_blueprint(self, secret, name):\n        self._validate_secret(secret)\n        self._validate_name(name)\n\n        librato.count('blueprint-io-server.bandwidth.in', request.content_length)\n        statsd.update('blueprint-io-server.bandwidth.in', request.content_length)\n\n        try:\n            for k in request.json.iterkeys():\n                if k not in ('arch', 'files', 'packages', 'services', 'sources'):\n                    abort(400)\n        except ValueError:\n            abort(400)\n\n        b = self._blueprint(secret, name)\n        if b is not None and b is not False:\n            for filename in set(b.sources.itervalues()) - set(request.json.get('sources', {}).itervalues()):\n                backend.delete_tarball(secret, name, filename[0:-4])\n\n        if not backend.put_blueprint(secret, name, request.data):\n            abort(502)\n\n        return MeteredResponse(response='',\n                             status=202,\n                             content_type='text/plain')\n\n    def get_tarball(self, secret, name, sha):\n        self._validate_secret(secret)\n        self._validate_name(name)\n        sha = sha.lower()\n        self._validate_sha(sha)\n\n        content_length = backend.head_tarball(secret, name, sha)\n        if content_length is None:\n            abort(404)\n\n        librato.count('blueprint-io-server.requests.get')\n        statsd.increment('blueprint-io-server.requests.get')\n        librato.count('blueprint-io-server.bandwidth.out', content_length)\n        statsd.update('blueprint-io-server.bandwidth.out', content_length)\n\n        return redirect(backend.url_for_tarball(secret, name, sha), code=301)\n\n    def put_tarball(self, secret, name, sha):\n        self._validate_secret(secret)\n        self._validate_name(name)\n        sha = sha.lower()\n        self._validate_sha(sha)\n\n        librato.count('blueprint-io-server.bandwidth.in', request.content_length)\n        statsd.update('blueprint-io-server.bandwidth.in', request.content_length)\n\n        if hashlib.sha1(request.data).hexdigest() != sha:\n            abort(400)\n\n        b = self._blueprint(secret, name)\n        if b is None:\n            abort(404)\n        elif b is False:\n            abort(502)\n        if '{0}.tar'.format(sha) not in b.sources.itervalues():\n            abort(400)\n\n        if not backend.put_tarball(secret, name, sha, request.data):\n            abort(502)\n\n        return MeteredResponse(response='',\n                             status=202,\n                             content_type='text/plain')\n\n    def sh(self, secret, name, name2):\n        if 'user-data' == name2:\n            return self.user_data(secret, name)\n        if name != name2:\n            abort(400)\n        self._validate_secret(secret)\n        self._validate_name(name)\n\n        b = self._blueprint(secret, name)\n        if b is None:\n            abort(404)\n        elif b is False:\n            abort(502)\n        s = b.sh(server=self._server(), secret=secret)\n        s.out.insert(0, '#!/bin/sh\\n\\n')\n        return MeteredResponse(response=s.dumps(),\n                             status=200,\n                             content_type='text/plain')\n\n    def user_data(self, secret, name):\n        self._validate_secret(secret)\n        self._validate_name(name)\n        b = self._blueprint(secret, name)\n        if b is None:\n            abort(404)\n        elif b is False:\n            abort(502)\n        return MeteredResponse(response=f\"\"\"#!/bin/sh\n\nset -e\n\nTMPDIR=\"$(mktemp -d)\"\ncd \"$TMPDIR\"\ntrap \"rm -rf \\\\\"$TMPDIR\\\\\"\" EXIT\n\nwget \"{self._server()}/{secret}/{name}/{name}.sh\"\n\nsh \"$(ls)\"\n\"\"\",\n                           status=200,\n                           content_type='text/plain')\n\n    def run(self):\n        self.app.run(host='0.0.0.0', debug=True)",
    "Code_level": "Class-level",
    "FSMID_for_test": 60,
    "right_result": "```python\nfrom flask import Flask, request, jsonify, abort, redirect, make_response\nfrom werkzeug.exceptions import BadRequest, NotFound\nimport re\nimport hashlib\nfrom functools import wraps\n\nclass BlueprintServer:\n    def __init__(self):\n        self.app = Flask(__name__)\n        self.browser_pattern = re.compile(r'browser')\n\n    def _setup_routes(self):\n        @self.app.route('/secret', methods=['POST'])\n        def secret():\n            # Generate and return a new secret\n            pass\n\n        @self.app.route('/blueprint/<secret>/<name>', methods=['GET'])\n        def get_blueprint(secret, name):\n            # Retrieve a blueprint\n            pass\n\n        @self.app.route('/blueprint/<secret>/<name>', methods=['PUT'])\n        def put_blueprint(secret, name):\n            # Store a new blueprint\n            pass\n\n        @self.app.route('/tarball/<secret>/<name>/<sha>', methods=['GET'])\n        def get_tarball(secret, name, sha):\n            # Retrieve a tarball\n            pass\n\n        @self.app.route('/tarball/<secret>/<name>/<sha>', methods=['PUT'])\n        def put_tarball(secret, name, sha):\n            # Store a new tarball\n            pass\n\n        @self.app.route('/shell/<secret>/<name>/<name2>', methods=['GET'])\n        def sh(secret, name, name2):\n            # Generate shell script\n            pass\n\n        @self.app.route('/user-data/<secret>/<name>', methods=['GET'])\n        def user_data(secret, name):\n            # Generate user-data script\n            pass\n\n    def _blueprint(self, secret, name):\n        # Retrieve and validate a blueprint\n        pass\n\n    def _server(self):\n        return 'http://localhost:5000'\n\n    def _validate_secret(self, secret):\n        # Validate the secret format\n        pass\n\n    def _validate_name(self, name):\n        # Validate the name format\n        pass\n\n    def _validate_sha(self, sha):\n        # Validate the SHA format\n        pass\n\n    def secret(self):\n        # Generate and return a new secret\n        pass\n\n    def get_blueprint(self, secret, name):\n        # Retrieve a blueprint\n        pass\n\n    def put_blueprint(self, secret, name):\n        # Store a new blueprint\n        pass\n\n    def get_tarball(self, secret, name, sha):\n        # Retrieve a tarball\n        pass\n\n    def put_tarball(self, secret, name, sha):\n        # Store a new tarball\n        pass\n\n    def sh(self, secret, name, name2):\n        # Generate shell script\n        pass\n\n    def user_data(self, secret, name):\n        # Generate user-data script\n        pass\n\n    def run(self):\n        self._setup_routes()\n        self.app.run(debug=True)\n```"
  },
  {
    "Task_id": 178,
    "Instruction": "Task Description: Create a Flask-based HTTP server to manage color resources with CRUD (Create, Read, Update, Delete) operations. The server should handle JSON data and respond with appropriate JSON responses.\n\nFunction Description: The code implements a RESTful API for managing color resources stored in a JSON file. It provides endpoints to retrieve all colors, get a specific color by name, create a new color, update an existing color, and delete a color.\n\nInput:\n- For GET /colors: No input parameters\n- For GET /colors/<name>: 'name' parameter in URL path\n- For POST /colors: JSON payload with 'name' and 'value' fields\n- For PUT /colors/<name>: 'name' parameter in URL path and JSON payload with optional 'value' field\n- For DELETE /colors/<name>: 'name' parameter in URL path\n\nOutput:\n- For GET /colors: JSON response containing all colors\n- For GET /colors/<name>: JSON response with the specific color or error\n- For POST /colors: JSON response with the created color and HTTP status 201\n- For PUT /colors/<name>: JSON response with the updated color or error\n- For DELETE /colors/<name>: JSON response with the deleted color or error",
    "Canonical_solution": "from flask import Flask, jsonify, request\nimport json\n\ncolors = json.load(file('colors.json', 'r'))\napp = Flask(__name__)\n\n@app.route('/colors', methods = ['GET'])\ndef get_colors():\n    return jsonify( { \"data\" :  colors })\n\n@app.route('/colors/<name>', methods = ['GET'])\ndef get_color(name):\n    for color in colors:\n        if color[\"name\"] == name:\n            return jsonify( color )\n    return jsonify( { 'error' : True } )\n\n@app.route('/colors', methods= ['POST'])\ndef create_color():\n    color = {\n        'name': request.json['name'],\n        'value': request.json['value']\n    }\n    colors.append(color)\n    return jsonify( color ), 201\n\n@app.route('/colors/<name>', methods= ['PUT'])\ndef update_color(name):\n    for color in colors:\n        if color[\"name\"] == name:\n            color['value'] = request.json.get('value', color['value'])\n            return jsonify( color )\n    return jsonify( { 'error' : True } )\n\n@app.route('/colors/<name>', methods=['DELETE'])\ndef delete_color(name):\n    for color in colors:\n        if color[\"name\"] == name:\n            colors.remove(color)\n            return jsonify(color)\n    return jsonify( { 'error' : True } )",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, jsonify, request, abort\napp = Flask(__name__)\n\ncolors = [\n    {\"name\": \"red\", \"value\": \"#FF0000\"},\n    {\"name\": \"green\", \"value\": \"#008000\"},\n    {\"name\": \"blue\", \"value\": \"#0000FF\"}\n]\n\n@app.route('/colors', methods=['GET'])\ndef get_colors():\n    return jsonify(colors)\n\n@app.route('/colors/<name>', methods=['GET'])\ndef get_color(name):\n    color = next((c for c in colors if c['name'] == name), None)\n    if color is None:\n        abort(404)\n    return jsonify(color)\n\n@app.route('/colors', methods=['POST'])\ndef create_color():\n    data = request.get_json()\n    if 'name' not in data or 'value' not in data:\n        abort(400)\n    colors.append(data)\n    return jsonify(data), 201\n\n@app.route('/colors/<name>', methods=['PUT'])\ndef update_color(name):\n    data = request.get_json()\n    color = next((c for c in colors if c['name'] == name), None)\n    if color is None:\n        abort(404)\n    if 'value' in data:\n        color['value'] = data['value']\n    return jsonify(color)\n\n@app.route('/colors/<name>', methods=['DELETE'])\ndef delete_color(name):\n    global colors\n    color = next((c for c in colors if c['name'] == name), None)\n    if color is None:\n        abort(404)\n    colors.remove(color)\n    return jsonify(color)\n\nif __name__ == '__main__':\n    app.run(debug=True)"
  },
  {
    "Task_id": 179,
    "Instruction": "Task Description: Create a Flask-based HTTP server that handles computation requests, supports CORS, and provides flexible serialization formats with proper error handling and logging capabilities.\n\nClass Description: The Server class encapsulates a Flask application with enhanced exception formatting and provides methods to run the server and handle computation requests through a dedicated API blueprint.\n\nAttributes:\n- app: [FlaskWithExceptionFormatting] - The Flask application instance with custom exception formatting\n- data: [dict] - Data store for the server (optional)\n- port: [int] - The port number the server is running on\n\nMethods:\n- __init__: [Name](data=None, formats=None, authorization=None, allow_profiler=False, profiler_output=None, profile_by_default=False, allow_add=False, logfile=sys.stdout, loglevel='WARNING', log_exception_formatter=None) -> [None] - Initializes the server with configuration options including data storage, serialization formats, authorization, profiling, and logging settings\n- run: [Name](port=6363, retry=False, **kwargs) -> [None] - Starts the Flask server on the specified port with optional retry logic if the port is busy\n\nAdditional Blueprint (api) Methods:\n- compserver: [Name]() -> [Response] - Handles POST, HEAD, and OPTIONS requests for computation, processes incoming data with supported serialization formats, and returns computation results (decorated with CORS support)",
    "Canonical_solution": "from flask import Flask, Blueprint, Response\nfrom flask_cors import cross_origin\nfrom werkzeug.http import parse_options_header\nimport collections\nimport sys\nimport logging\nfrom logging import Formatter\nfrom functools import wraps\nimport traceback\nfrom datetime import datetime\nimport os\nimport socket\nfrom time import time\nfrom warnings import warn\nimport importlib\nfrom blaze import compute, resource\nfrom blaze.compatibility import ExitStack\nfrom .serialization import json, all_formats\nfrom ..expr import Symbol, symbol\n\nclass FlaskWithExceptionFormatting(Flask):\n    def __init__(self, *args, **kwargs):\n        self.log_exception_formatter = kwargs.pop('log_exception_formatter', \n                                                 lambda tb: ''.join(traceback.format_tb(tb)))\n        super(FlaskWithExceptionFormatting, self).__init__(*args, **kwargs)\n\nclass Server:\n    def __init__(self, data=None, formats=None, authorization=None, allow_profiler=False,\n                 profiler_output=None, profile_by_default=False, allow_add=False,\n                 logfile=sys.stdout, loglevel='WARNING', log_exception_formatter=None):\n        app = self.app = FlaskWithExceptionFormatting('blaze.server.server',\n                                                     log_exception_formatter=log_exception_formatter)\n        app.register_blueprint(api,\n                              data=data if data is not None else {},\n                              formats=formats if formats is not None else (json,),\n                              authorization=authorization,\n                              allow_profiler=allow_profiler,\n                              profiler_output=profiler_output,\n                              profile_by_default=profile_by_default,\n                              allow_add=allow_add)\n        self.data = data\n        if logfile:\n            handler = logging.FileHandler(logfile) if isinstance(logfile, (str, bytes)) else logging.StreamHandler(logfile)\n            handler.setFormatter(Formatter('[%(asctime)s %(levelname)s] %(message)s [in %(pathname)s:%(lineno)d]'))\n            handler.setLevel(getattr(logging, loglevel))\n            app.logger.addHandler(handler)\n\n    def run(self, port=6363, retry=False, **kwargs):\n        self.port = port\n        try:\n            self.app.run(port=port, **kwargs)\n        except socket.error:\n            if not retry:\n                raise\n            warn(\"Oops, couldn't connect on port %d.  Is it busy?\" % port)\n            self.run(port=port + 1, retry=retry, **kwargs)\n\napi = Blueprint('api', __name__)\n\n@api.route('/compute', methods=['POST', 'HEAD', 'OPTIONS'])\n@cross_origin(origins='*', methods=['POST', 'HEAD', 'OPTIONS'])\ndef compserver():\n    raw_content_type = flask.request.headers['content-type']\n    content_type, options = parse_options_header(raw_content_type)\n    \n    if content_type not in accepted_mimetypes:\n        return ('Unsupported serialization format %s' % content_type, 415)\n\n    try:\n        serial = _get_format(accepted_mimetypes[content_type])\n    except KeyError:\n        return (\"Unsupported serialization format '%s'\" % content_type, 415)\n\n    try:\n        payload = serial.loads(flask.request.data)\n    except ValueError:\n        return (\"Bad data.  Got %s \" % flask.request.data, 400)\n\n    # Main computation logic here\n    # ... (rest of computation handling code)\n\n    return serial.dumps(response)",
    "Code_level": "Class-level",
    "FSMID_for_test": 60,
    "right_result": "```python\nfrom flask import Flask, request, jsonify, make_response\nfrom flask_cors import CORS, cross_origin\nimport logging\nfrom logging.handlers import RotatingFileHandler\nfrom werkzeug.exceptions import HTTPException\n\nclass FlaskWithExceptionFormatting(Flask):\n    def __init__(self, *args, **kwargs):\n        super(FlaskWithExceptionFormatting, self).__init__(*args, **kwargs)\n        self.errorhandler = self.handle_exception\n\n    def handle_exception(self, e):\n        if isinstance(e, HTTPException):\n            return make_response(jsonify(error=str(e)), e.code)\n        return make_response(jsonify(error=\"Internal Server Error\"), 500)\n\nclass Server:\n    def __init__(self, data=None, formats=None, authorization=None, allow_profiler=False, profiler_output=None, profile_by_default=False, allow_add=False, logfile=sys.stdout, loglevel='WARNING', log_exception_formatter=None):\n        self.app = FlaskWithExceptionFormatting(__name__)\n        self.data = data or {}\n        self.port = 6363\n        self.setup_logging(logfile, loglevel)\n        CORS(self.app)\n        self.api = self.app Blueprint('api', __name__)\n        self.api.route('/compserver', methods=['POST', 'HEAD', 'OPTIONS'])\n        self.setup_routes()\n\n    def setup_logging(self, logfile, loglevel):\n        handler = RotatingFileHandler(logfile, maxBytes=10000, backupCount=3)\n        handler.setLevel(loglevel)\n        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n        handler.setFormatter(formatter)\n        self.app.logger.addHandler(handler)\n\n    def setup_routes(self):\n        @self.api.route('/compserver', methods=['POST', 'HEAD', 'OPTIONS'])\n        @cross_origin()\n        def compserver():\n            if request.method == 'POST':\n                data = request.get_json()\n                # Process data and compute result\n                result = \"Result of computation\"\n                return jsonify(result=result)\n            elif request.method == 'HEAD':\n                return make_response('', 200)\n            elif request.method == 'OPTIONS':\n                return make_response('', 200)\n\n    def run(self, port=6363, retry=False, **kwargs):\n        self.app.run(port=port, retry=retry, **kwargs)\n```"
  },
  {
    "Task_id": 180,
    "Instruction": "Task Description: Create a Flask-based HTTP server endpoint that handles OAuth token requests for Aliyun Drive by processing refresh tokens, making external API calls, and returning decrypted token data.\n\nFunction Description: The function `oauth_token()` is a Flask route handler that processes POST requests to '/oauth/alipan/token'. It validates the input, makes authenticated requests to an external API, handles the response, and returns either the decrypted token data or an error response.\n\nInput:\n- HTTP POST request with JSON body containing:\n  - refresh_token: [String] - Required refresh token for OAuth authentication\n\nOutput:\n- HTTP Response with:\n  - Status Code: 200 (success) or error code (4xx/5xx)\n  - Body: JSON containing either:\n    - Success: Decrypted token data\n    - Error: Error message describing the failure",
    "Canonical_solution": "import json\nimport requests\nfrom flask import Flask, request, Response\n\napp = Flask(__name__)\nheaders = {\n    \"token\": \"6733b42e28cdba32\",\n    'User-Agent': 'Mozilla/5.0 (Linux; U; Android 9; zh-cn; SM-S908E Build/TP1A.220624.014) AppleWebKit/533.1 (KHTML, like Gecko) Mobile Safari/533.1',\n    'Host': 'api.extscreen.com'\n}\n\n@app.route('/oauth/alipan/token', methods=['POST'])\ndef oauth_token():\n    data = request.get_json()\n    refresh_token = data.get('refresh_token', None)\n    if not refresh_token:\n        return Response(json.dumps({\"error\": \"No refresh_token provided\"}), status=400, mimetype='application/json')\n\n    req_body = {\n        \"refresh_token\": refresh_token\n    }\n\n    timestamp = str(requests.get('http://api.extscreen.com/timestamp', timeout=10).json()['data']['timestamp'])\n    unique_id = uuid.uuid4().hex\n    wifimac = str(random.randint(10**11, 10**12 - 1))\n\n    resp = requests.post(\"http://api.extscreen.com/aliyundrive/v3/token\", data=req_body, headers={**get_params(timestamp, unique_id, wifimac), **headers}, timeout=10)\n    if resp.status_code == 200:\n        resp_data = resp.json()\n        ciphertext = resp_data[\"data\"][\"ciphertext\"]\n        iv = resp_data[\"data\"][\"iv\"]\n\n        token_data = decrypt(ciphertext, iv, timestamp, unique_id, wifimac)\n        token = json.loads(token_data)\n        return Response(json.dumps(token), status=200, mimetype='application/json')\n    else:\n        return Response(resp.content, status=resp.status_code, mimetype='application/json')",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, jsonify\nimport requests\nfrom cryptography.fernet import Fernet\n\napp = Flask(__name__)\n\n@app.route('/oauth/alipan/token', methods=['POST'])\ndef oauth_token():\n    data = request.get_json()\n    refresh_token = data.get('refresh_token')\n    if not refresh_token:\n        return jsonify({'error': 'refresh_token is required'}), 400\n\n    # Decrypt the refresh token\n    key = b'your-encryption-key-here'\n    fernet = Fernet(key)\n    decrypted_token = fernet.decrypt(refresh_token.encode()).decode()\n\n    # Make an authenticated request to the external API\n    response = requests.post('https://api.aliyun.com/oauth/token', data={'refresh_token': decrypted_token})\n    if response.status_code != 200:\n        return jsonify({'error': 'Failed to get token from external API'}), 500\n\n    # Handle the response\n    token_data = response.json()\n    return jsonify({'success': token_data})\n\nif __name__ == '__main__':\n    app.run(debug=True)"
  },
  {
    "Task_id": 181,
    "Instruction": "Task Description: Create a Flask-based web server that handles image processing requests through two endpoints: one for adjusting brightness/contrast and another for image enhancement.\n\nFunction Description: The server provides two main routes:\n1. '/adjust' - Handles image brightness and contrast adjustments\n2. '/enhance' - Handles image enhancement operations\nEach route supports both GET (returning HTML forms) and POST (processing the submitted data) methods.\n\nInput:\nFor POST requests:\n- '/adjust' endpoint:\n  - the_file: [File] - Image file to process\n  - brightness: [str] - Brightness adjustment value\n  - contrast: [str] - Contrast adjustment value\n- '/enhance' endpoint:\n  - the_file: [File] - Image file to process\n  - amount: [str] - Enhancement amount value\n\nOutput:\nFor GET requests:\n- Returns HTML templates ('adjust.html' or 'enhance.html')\nFor POST requests:\n- Returns processed image data from respective modules (adjust.do_adjust or enhance.do_enhance)",
    "Canonical_solution": "from flask import Flask, render_template, request\n\napp = Flask(__name__)\n\n@app.route(\"/adjust\", methods=[\"GET\", \"POST\"])\ndef do_adjust():\n    if request.method == \"POST\":\n        the_file = request.files[\"the_file\"]\n        brightness = request.form[\"brightness\"]\n        contrast = request.form[\"contrast\"]\n        import adjust\n\n        return adjust.do_adjust(the_file, brightness, contrast)\n    else:\n        return render_template(\"adjust.html\")\n\n@app.route(\"/enhance\", methods=[\"GET\", \"POST\"])\ndef do_enhance():\n    if request.method == \"POST\":\n        the_file = request.files[\"the_file\"]\n        amount = request.form[\"amount\"]\n        import enhance\n\n        return enhance.do_enhance(the_file, amount)\n    else:\n        return render_template(\"enhance.html\")",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, render_template, send_file\nfrom werkzeug.utils import secure_filename\nimport os\n\napp = Flask(__name__)\napp.config['UPLOAD_FOLDER'] = 'uploads/'\napp.config['ALLOWED_EXTENSIONS'] = {'png', 'jpg', 'jpeg', 'gif'}\n\ndef allowed_file(filename):\n    return '.' in filename and \\\n           filename.rsplit('.', 1)[1].lower() in app.config['ALLOWED_EXTENSIONS']\n\n@app.route('/adjust', methods=['GET', 'POST'])\ndef adjust():\n    if request.method == 'POST':\n        if 'the_file' not in request.files:\n            return 'No file part'\n        file = request.files['the_file']\n        if file.filename == '':\n            return 'No selected file'\n        if file and allowed_file(file.filename):\n            filename = secure_filename(file.filename)\n            file.save(os.path.join(app.config['UPLOAD_FOLDER'], filename))\n            brightness = request.form.get('brightness')\n            contrast = request.form.get('contrast')\n            return adjust.do_adjust(filename, brightness, contrast)\n    return render_template('adjust.html')\n\n@app.route('/enhance', methods=['GET', 'POST'])\ndef enhance():\n    if request.method == 'POST':\n        if 'the_file' not in request.files:\n            return 'No file part'\n        file = request.files['the_file']\n        if file.filename == '':\n            return 'No selected file'\n        if file and allowed_file(file.filename):\n            filename = secure_filename(file.filename)\n            file.save(os.path.join(app.config['UPLOAD_FOLDER'], filename))\n            amount = request.form.get('amount')\n            return enhance.do_enhance(filename, amount)\n    return render_template('enhance.html')\n\nif __name__ == '__main__':\n    app.run(debug=True)"
  },
  {
    "Task_id": 182,
    "Instruction": "Task Description: Create a Flask-based HTTP server endpoint that predicts home prices based on input parameters.\n\nFunction Description: The function `predict_home_price` is a Flask route handler that processes incoming HTTP requests (GET or POST) containing home features, uses these features to predict a home price, and returns the estimated price as a JSON response with CORS headers enabled.\n\nInput:\n- `total_sqft`: [float] - Total square footage of the home\n- `location`: [str] - Location of the home\n- `bhk`: [int] - Number of bedrooms/hall/kitchen\n- `bath`: [int] - Number of bathrooms\n\nOutput:\n- [JSON] - A JSON response containing the key 'estimated_price' with the predicted value, and CORS headers allowing access from any origin.",
    "Canonical_solution": "from flask import Flask, request, jsonify\nimport util\n\napp = Flask(__name__)\n\n@app.route('/predict_home_price', methods=['GET', 'POST'])\ndef predict_home_price():\n    total_sqft = float(request.form['total_sqft'])\n    location = request.form['location']\n    bhk = int(request.form['bhk'])\n    bath = int(request.form['bath'])\n\n    response = jsonify({\n        'estimated_price': util.get_estimated_price(location,total_sqft,bhk,bath)\n    })\n    response.headers.add('Access-Control-Allow-Origin', '*')\n\n    return response",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, jsonify\nfrom flask_cors import CORS\n\napp = Flask(__name__)\nCORS(app)\n\n@app.route('/predict_home_price', methods=['GET', 'POST'])\ndef predict_home_price():\n    total_sqft = float(request.args.get('total_sqft', 0))\n    location = request.args.get('location', '')\n    bhk = int(request.args.get('bhk', 0))\n    bath = int(request.args.get('bath', 0))\n    \n    # Dummy prediction logic\n    estimated_price = total_sqft * 1000 + bhk * 200000 + bath * 100000\n    \n    return jsonify({'estimated_price': estimated_price})\n\nif __name__ == '__main__':\n    app.run(debug=True)"
  },
  {
    "Task_id": 183,
    "Instruction": "Task Description: Create a Flask-based HTTP server to process PagerDuty webhook events, decode and validate the incoming data, and insert relevant event information into BigQuery.\n\nFunction Description: The code consists of two main functions: \n1. `index()` - The Flask route handler that receives and validates incoming POST requests containing PagerDuty events\n2. `process_pagerduty_event()` - Processes and transforms the raw PagerDuty event data into a structured format for BigQuery insertion\n\nInput:\n- For `index()`: HTTP POST request with JSON payload containing PagerDuty event data\n- For `process_pagerduty_event()`: A message dictionary containing base64-encoded PagerDuty event data\n\nOutput:\n- For `index()`: Returns HTTP 204 (No Content) response after processing\n- For `process_pagerduty_event()`: Returns a structured dictionary containing processed PagerDuty event data ready for BigQuery insertion",
    "Canonical_solution": "import base64\nimport os\nimport json\nimport shared\nfrom flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route(\"/\", methods=[\"POST\"])\ndef index():\n    if not request.is_json:\n        raise Exception(\"Expecting JSON payload\")\n    envelope = request.get_json()\n\n    if \"message\" not in envelope:\n        raise Exception(\"Not a valid Pub/Sub Message\")\n    msg = envelope[\"message\"]\n\n    if \"attributes\" not in msg:\n        raise Exception(\"Missing pubsub attributes\")\n\n    try:\n        event = process_pagerduty_event(msg)\n        print(f\" Event which is to be inserted into Big query {event}\")\n        if event:\n            shared.insert_row_into_bigquery(event)\n\n    except Exception as e:\n        entry = {\n                \"severity\": \"WARNING\",\n                \"msg\": \"Data not saved to BigQuery\",\n                \"errors\": str(e),\n                \"json_payload\": envelope\n            }\n        print(f\"EXCEPTION raised  {json.dumps(entry)}\")\n    return \"\", 204\n\ndef process_pagerduty_event(msg):\n    metadata = json.loads(base64.b64decode(msg[\"data\"]).decode(\"utf-8\").strip())\n\n    print(f\"Metadata after decoding {metadata}\")\n\n    signature = shared.create_unique_id(msg)\n    event = metadata['event']\n    event_type = event[\"event_type\"]\n    types = {\"incident.triggered\", \"incident.resolved\"}\n    if event_type not in types:\n        raise Warning(\"Unsupported PagerDuty event: '%s'\" % event_type)\n\n    pagerduty_event = {\n        \"event_type\": event_type,\n        \"id\": event['id'],\n        \"metadata\": json.dumps(metadata),\n        \"signature\": signature,\n        \"msg_id\": msg[\"message_id\"],\n        \"time_created\" : event['occurred_at'],\n        \"source\": \"pagerduty\",\n        }\n\n    print(f\"Pager Duty event to metrics--------> {pagerduty_event}\")\n    return pagerduty_event",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "```python\nfrom flask import Flask, request, jsonify\nimport base64\nimport json\nfrom google.cloud import bigquery\n\napp = Flask(__name__)\n\n@app.route('/pagerduty', methods=['POST'])\ndef index():\n    data = request.get_json()\n    if validate_pagerduty_event(data):\n        process_pagerduty_event(data)\n    return '', 204\n\ndef validate_pagerduty_event(data):\n    # Validate the structure and content of the PagerDuty event data\n    # Return True if valid, False otherwise\n    return True\n\ndef process_pagerduty_event(data):\n    # Decode and validate the base64-encoded PagerDuty event data\n    # Transform the data into a structured format for BigQuery insertion\n    # Return the structured dictionary\n    return {}\n\nclient = bigquery.Client()\n\ndef insert_into_bigquery(data):\n    # Insert the structured data into BigQuery\n    pass\n```"
  },
  {
    "Task_id": 184,
    "Instruction": "Task Description: Create a Flask web application that serves different data views through specific routes, rendering them using a template.\n\nFunction Description: The application defines multiple route handlers that fetch different types of data and render them using a common template ('index.html'). Each route corresponds to a different data view (main, corporate, and job data).\n\nInput:\n- Route paths ('/', '/corp', '/job') as HTTP endpoints\n- HTTP GET requests to these endpoints\n\nOutput:\n- Rendered HTML responses using the 'index.html' template with respective data and title\n- HTTP responses with status code 200 for successful renders\n\nMethods:\n- index() -> HTML - Handles root route ('/') and renders main data view\n- corp() -> HTML - Handles '/corp' route and renders corporate data view\n- job() -> HTML - Handles '/job' route and renders job data view\n\nNote: The actual data fetching is delegated to external functions (SourceData(), CorpData(), JobData()) which return objects containing the required data and title. The template 'index.html' should be prepared to handle the 'form' and 'title' variables passed from these route handlers.",
    "Canonical_solution": "from flask import Flask, render_template\nfrom data import *\n\napp = Flask(__name__)\n\n@app.route('/')\ndef index():\n    data = SourceData()\n    return render_template('index.html', form=data, title=data.title)\n\n@app.route('/corp')\ndef corp():\n    data = CorpData()\n    return render_template('index.html', form=data, title=data.title)\n\n@app.route('/job')\ndef job():\n    data = JobData()\n    return render_template('index.html', form=data, title=data.title)\n\nif __name__ == \"__main__\":\n    app.run(host='127.0.0.1', debug=False)",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, render_template\n\napp = Flask(__name__)\n\ndef SourceData():\n    return {'title': 'Main Data', 'content': 'This is the main data view.'}\n\ndef CorpData():\n    return {'title': 'Corporate Data', 'content': 'This is the corporate data view.'}\n\ndef JobData():\n    return {'title': 'Job Data', 'content': 'This is the job data view.'}\n\n@app.route('/')\ndef index():\n    data = SourceData()\n    return render_template('index.html', form=data)\n\n@app.route('/corp')\ndef corp():\n    data = CorpData()\n    return render_template('index.html', form=data)\n\n@app.route('/job')\ndef job():\n    data = JobData()\n    return render_template('index.html', form=data)\n\nif __name__ == '__main__':\n    app.run(debug=True)"
  },
  {
    "Task_id": 185,
    "Instruction": "Task Description: Create a Flask-based web service that predicts customer churn probability using a pre-trained machine learning model and feature transformation pipeline.\n\nFunction Description: The function implements a prediction endpoint for a Flask web service that takes customer data as input, applies feature transformation, makes a churn probability prediction using a pre-trained model, and returns the prediction results in JSON format.\n\nInput: \n- HTTP POST request with JSON body containing customer features/attributes\n- The function internally uses two pre-loaded artifacts:\n  - 'dv.bin': A feature transformation pipeline (DictVectorizer)\n  - 'model1.bin': A pre-trained machine learning model\n\nOutput: \n- JSON response containing:\n  - 'churn_probability': float value representing the predicted probability of churn (between 0 and 1)\n  - 'churn': boolean indicating whether the customer is predicted to churn (probability \u2265 0.5)",
    "Canonical_solution": "from flask import Flask\nfrom flask import request\nfrom flask import jsonify\nimport pickle\n\ndef load(filename):\n    with open(filename, 'rb') as f_in:\n        return pickle.load(f_in)\n\ndv = load('dv.bin')\nmodel = load('model1.bin')\n\napp = Flask('churn')\n\n@app.route('/predict', methods=['POST'])\ndef predict():\n    customer = request.get_json()\n    X = dv.transform([customer])\n    y_pred = model.predict_proba(X)[0, 1]\n    churn = y_pred >= 0.5\n    result = {\n        'churn_probability': float(y_pred),\n        'churn': bool(churn)\n    }\n    return jsonify(result)\n\nif __name__ == \"__main__\":\n    app.run(debug=True, host='0.0.0.0', port=9696)",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, jsonify\nimport pickle\nimport numpy as np\n\napp = Flask(__name__)\n\n@app.route('/predict', methods=['POST'])\ndef predict():\n    data = request.get_json()\n    features = np.array([list(data.values())])\n    transformed_features = pickle.load(open('dv.bin', 'rb')).transform(features)\n    prediction = pickle.load(open('model1.bin', 'rb')).predict_proba(transformed_features)[:, 1]\n    churn_probability = prediction[0][0]\n    churn = prediction[0][0] >= 0.5\n    return jsonify({'churn_probability': churn_probability, 'churn': churn})\n\nif __name__ == '__main__':\n    app.run()"
  },
  {
    "Task_id": 186,
    "Instruction": "Task Description: Create a Flask-based HTTP server that provides endpoints to interact with an agent's trading system, including checking inventory, queue, balance, executing trades, and resetting capital.\n\nFunction Description: The code establishes a RESTful API using Flask that allows clients to query and modify the state of a trading agent. Each endpoint handles specific functionality and returns JSON responses.\n\nInput:\n- For '/trade' endpoint: GET request with 'data' parameter in query string containing trade details as JSON\n- For '/reset' endpoint: GET request with 'money' parameter in query string containing new capital amount as JSON\n- Other endpoints: GET requests without parameters\n\nOutput:\n- All endpoints return JSON responses:\n  - '/': {'status': 'OK'}\n  - '/inventory': Agent's inventory data\n  - '/queue': Agent's queue data\n  - '/balance': Agent's capital amount\n  - '/trade': Result of trade operation\n  - '/reset': Boolean confirmation of capital reset",
    "Canonical_solution": "from flask import Flask, request, jsonify\nimport json\n\napp = Flask(__name__)\n\n@app.route('/', methods = ['GET'])\ndef hello():\n    return jsonify({'status': 'OK'})\n\n@app.route('/inventory', methods = ['GET'])\ndef inventory():\n    return jsonify(agent._inventory)\n\n@app.route('/queue', methods = ['GET'])\ndef queue():\n    return jsonify(agent._queue)\n\n@app.route('/balance', methods = ['GET'])\ndef balance():\n    return jsonify(agent._capital)\n\n@app.route('/trade', methods = ['GET'])\ndef trade():\n    data = json.loads(request.args.get('data'))\n    return jsonify(agent.trade(data))\n\n@app.route('/reset', methods = ['GET'])\ndef reset():\n    money = json.loads(request.args.get('money'))\n    agent.reset_capital(money)\n    return jsonify(True)\n\nif __name__ == '__main__':\n    app.run(host = '0.0.0.0', port = 8005)",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n# Mock data for the trading agent\ninventory = {'items': {'AAPL': 100, 'GOOGL': 50}}\nqueue = {'orders': [{'symbol': 'AAPL', 'quantity': 10}, {'symbol': 'GOOGL', 'quantity': 20}]}\nbalance = 10000\n\ndef execute_trade(data):\n    # Mock trade execution logic\n    return {'status': 'Trade executed', 'details': data}\n\ndef reset_capital(new_capital):\n    global balance\n    balance = new_capital\n    return {'status': 'Capital reset'}\n\n@app.route('/')\ndef home():\n    return jsonify({'status': 'OK'})\n\n@app.route('/inventory')\ndef get_inventory():\n    return jsonify(inventory)\n\n@app.route('/queue')\ndef get_queue():\n    return jsonify(queue)\n\n@app.route('/balance')\ndef get_balance():\n    return jsonify({'capital': balance})\n\n@app.route('/trade', methods=['GET'])\ndef trade():\n    data = request.args.get('data', {})\n    return jsonify(execute_trade(data))\n\n@app.route('/reset', methods=['GET'])\ndef reset():\n    new_capital = request.args.get('money', 0, type=int)\n    return jsonify(reset_capital(new_capital))\n\nif __name__ == '__main__':\n    app.run(debug=True)"
  },
  {
    "Task_id": 187,
    "Instruction": "Task Description: Create a Flask-based HTTP server that provides endpoints for retrieving Zhihu (a Chinese Q&A platform) topic data, including topic lists and specific topic details.\n\nFunction Description: The server exposes two main endpoints:\n1. `/zhihu_get_topics_list/` - Searches for topics matching a given keyword\n2. `/zhihu_get_topics_data/` - Retrieves detailed data for a specific topic\n\nInput: \n- For `/zhihu_get_topics_list/`: \n  - POST request with form parameter \"key\" (string) - the search keyword\n- For `/zhihu_get_topics_data/`:\n  - POST request with form parameters:\n    - \"id\" (string) - topic ID\n    - \"name\" (string) - topic name\n\nOutput:\n- For `/zhihu_get_topics_list/`:\n  - JSON response with structure:\n    {\n      \"success\": integer (1 for success, 0 for failure),\n      \"data\": list of objects with \"id\" and \"name\" for matching topics\n    }\n- For `/zhihu_get_topics_data/`:\n  - JSON response containing detailed topic data (structure depends on GetData_zhihu implementation)\n\nThe server maintains caches for:\n1. All available topics (zhihu_all_topics)\n2. Search results (zhihu_all_topics_key)\n3. Initial topic data (zhihu_init_topics)",
    "Canonical_solution": "from flask import Flask, request, jsonify\nimport logging\nimport GetData_zhihu\n\napp = Flask(__name__)\napp.config[\"SECRET_KEY\"] = \"hard to guess string\"\n\nzhihu_all_topics = GetData_zhihu.get_all_topics()\nzhihu_all_topics_key = {}\nzhihu_init_topics = GetData_zhihu.get_topic_data(topic_id=\"19559424\", topic_name=\"\u6570\u636e\u5206\u6790\")\n\n@app.route(\"/zhihu_get_topics_list/\", methods=[\"post\"])\ndef zhihu_get_topics_list():\n    key = request.form.get(\"key\")\n    result = {\"success\": 1, \"data\": []}\n    if key:\n        if key in zhihu_all_topics_key:\n            result = zhihu_all_topics_key[key]\n        else:\n            for item in zhihu_all_topics:\n                if item[1].find(key) >= 0:\n                    result[\"data\"].append({\"id\": item[0], \"name\": item[1]})\n            if len(result[\"data\"]) > 0:\n                result[\"success\"] = 1\n                zhihu_all_topics_key[key] = result\n                logging.debug(\"all_topics_key increase: %s\", len(zhihu_all_topics_key))\n    return jsonify(result)\n\n@app.route(\"/zhihu_get_topics_data/\", methods=[\"post\"])\ndef zhihu_get_topics_data():\n    if request.form[\"id\"] == \"19554449\":\n        result = zhihu_init_topics\n    else:\n        result = GetData_zhihu.get_topic_data(request.form[\"id\"], request.form[\"name\"])\n    return jsonify(result)\n\nif __name__ == \"__main__\":\n    logging.basicConfig(level=logging.DEBUG, format=\"%(asctime)s\\t%(levelname)s\\t%(message)s\")\n    logging.debug(\"app url_map: %s\", app.url_map)\n    app.run()",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, jsonify\napp = Flask(__name__)\n\n# Dummy data for demonstration purposes\nzhihu_all_topics = [\n    {\"id\": \"1\", \"name\": \"Technology\"},\n    {\"id\": \"2\", \"name\": \"Science\"},\n    {\"id\": \"3\", \"name\": \"Art\"},\n    {\"id\": \"4\", \"name\": \"Music\"},\n    {\"id\": \"5\", \"name\": \"Literature\"}\n]\nzhihu_all_topics_key = {}\nzhihu_init_topics = {}\n\ndef GetData_zhihu(topic_id):\n    # Dummy function to simulate fetching data from a database or API\n    return {\"id\": topic_id, \"name\": \"Topic Details\", \"description\": \"This is a topic description\"}\n\n@app.route('/zhihu_get_topics_list/', methods=['POST'])\ndef get_topics_list():\n    key = request.form.get('key')\n    if key:\n        if key in zhihu_all_topics_key:\n            return jsonify({\"success\": 1, \"data\": zhihu_all_topics_key[key]})\n        else:\n            results = [topic for topic in zhihu_all_topics if key.lower() in topic['name'].lower()]\n            zhihu_all_topics_key[key] = results\n            return jsonify({\"success\": 1, \"data\": results})\n    return jsonify({\"success\": 0})\n\n@app.route('/zhihu_get_topics_data/', methods=['POST'])\ndef get_topics_data():\n    topic_id = request.form.get('id')\n    name = request.form.get('name')\n    if topic_id and name:\n        if topic_id in zhihu_init_topics:\n            return jsonify(zhihu_init_topics[topic_id])\n        else:\n            data = GetData_zhihu(topic_id)\n            zhihu_init_topics[topic_id] = data\n            return jsonify(data)\n    return jsonify({\"success\": 0})\n\nif __name__ == '__main__':\n    app.run(debug=True)"
  },
  {
    "Task_id": 188,
    "Instruction": "Task Description: Create a Flask-based web application that handles form submissions and displays responses, using a class structure to encapsulate the application logic.\n\nClass Description: The `FlaskApp` class encapsulates a Flask web application that provides two routes: a main page with a form and a submission handler that processes the form data. It uses WTForms for form validation and template rendering for responses.\n\nAttributes:\n\napp: [Flask] - The Flask application instance that handles HTTP requests and routes.\n\nMethods:\n\n__init__: [Name]() -> [None] - Initializes the Flask application and sets up the routes by calling _setup_routes.\n\n_setup_routes: [Name]() -> [None] - Configures the application routes by binding URL paths to their respective handler methods.\n\nindex: [Name]() -> [str] - Handles requests to the root URL ('/'), renders and returns the main form page using the 'first_app.html' template with an instance of HelloForm.\n\nhello: [Name]() -> [str] - Handles POST requests to the '/hello' URL, validates the submitted form data, and either renders a greeting page ('hello.html') with the submitted name or returns the form page with validation errors.\n\nrun: [Name](debug: [bool] = True) -> [None] - Starts the Flask development server with optional debug mode enabled.",
    "Canonical_solution": "from flask import Flask, request\nfrom wtforms import Form, TextAreaField, validators\n\nclass HelloForm(Form):\n    sayhello = TextAreaField('', [validators.DataRequired()])\n\nclass FlaskApp:\n    def __init__(self):\n        self.app = Flask(__name__)\n        self._setup_routes()\n\n    def _setup_routes(self):\n        self.app.route('/')(self.index)\n        self.app.route('/hello', methods=['POST'])(self.hello)\n\n    def index(self):\n        form = HelloForm(request.form)\n        return render_template('first_app.html', form=form)\n\n    def hello(self):\n        form = HelloForm(request.form)\n        if request.method == 'POST' and form.validate():\n            name = request.form['sayhello']\n            return render_template('hello.html', name=name)\n        return render_template('first_app.html', form=form)\n\n    def run(self, debug=True):\n        self.app.run(debug=debug)",
    "Code_level": "Class-level",
    "FSMID_for_test": 60,
    "right_result": "```python\nfrom flask import Flask, render_template, request\nfrom flask_wtf import FlaskForm\nfrom wtforms import StringField\nfrom wtforms.validators import DataRequired\n\nclass HelloForm(FlaskForm):\n    name = StringField('Name', validators=[DataRequired()])\n\nclass FlaskApp:\n    def __init__(self):\n        self.app = Flask(__name__)\n        self.app.config['SECRET_KEY'] = 'your_secret_key'\n        self._setup_routes()\n\n    def _setup_routes(self):\n        @self.app.route('/')\n        def index():\n            form = HelloForm()\n            return render_template('first_app.html', form=form)\n\n        @self.app.route('/hello', methods=['POST'])\n        def hello():\n            form = HelloForm(request.form)\n            if form.validate():\n                return render_template('hello.html', name=form.name.data)\n            return render_template('first_app.html', form=form)\n\n    def run(self, debug=True):\n        self.app.run(debug=debug)\n```"
  },
  {
    "Task_id": 189,
    "Instruction": "Task Description: Create a Flask-based web server that handles both GET and POST requests for a messaging webhook, verifying tokens and processing incoming messages or postbacks from a chat platform.\n\nFunction Description: The code implements a Flask application with two main route handlers:\n1. handle_verification: Handles GET requests for webhook verification by checking a token\n2. handle_messages: Processes POST requests containing message or postback events from users\n\nInput:\n- For handle_verification:\n  - GET request with query parameters:\n    - hub.verify_token: Token to verify webhook authenticity\n    - hub.challenge: Challenge string to return if verification succeeds\n- For handle_messages:\n  - POST request with JSON payload containing:\n    - Either message events (text, attachments, quick replies) or postback events\n    - Sender information and message content\n\nOutput:\n- For handle_verification:\n  - Returns the hub.challenge string if verification succeeds\n  - Returns a rendered HTML template if verification fails\n- For handle_messages:\n  - Returns \"ok\" status after processing messages\n  - May send responses back to users through the messaging platform\n  - Handles various message types (text, location, audio) and postbacks\n\nAdditional Helper Functions:\n- get_type_from_payload: Identifies whether payload contains message or postback\n- postback_events: Generator that yields sender_id and postback payload\n- messaging_events: Generator that processes different message types and yields structured data",
    "Canonical_solution": "import sys, json\nfrom flask import Flask, request, g, session, render_template, redirect, url_for, flash\nfrom flask_oauth import OAuth\n\napplication = Flask(__name__, instance_relative_config=True, static_url_path='')\napplication.config.from_object('config')\napplication.config.from_pyfile('config.py', silent=True)\napp = application\n\n@app.route('/', methods=['GET'])\ndef handle_verification():\n    if request.args.get('hub.verify_token', '') == app.config['OWN_WEBHOOK_TOKEN']:\n        return request.args.get('hub.challenge', '')\n    else:\n        return render_template('index.html')\n\n@app.route('/', methods=['POST'])\ndef handle_messages():\n    payload = request.get_data()\n    token = app.config['PAT']\n    webhook_type = get_type_from_payload(payload)\n\n    if webhook_type == 'postback':\n        for sender_id, postback_payload in postback_events(payload):\n            if postback_payload == 'OPTIMIST_HELP':\n                handle_help(sender_id)\n            elif postback_payload == 'OPTIMIST_GET_STARTED':\n                if not Mongo.user_exists(users, sender_id):\n                    g.user = Mongo.get_user_mongo(users, sender_id)\n                    return handle_first_time_user(users, g.user)\n\n    elif webhook_type == 'message':\n        for sender_id, message in messaging_events(payload):\n            if not message:\n                return \"ok\"\n            global temp_message_id \n            mid = message['message_id']\n            if mid == temp_message_id:\n                return 'ok'\n            temp_message_id = mid\n\n            try:\n                FB.show_typing(token, sender_id)\n                response = processIncoming(sender_id, message)\n                FB.show_typing(token, sender_id, 'typing_off')\n\n                if response is not None and response != 'pseudo':\n                    FB.send_message(token, sender_id, response)\n                elif response != 'pseudo':\n                    if NLP.randOneIn(7):\n                        FB.send_message(token, sender_id, NLP.oneOf(NLP.no_response))\n            except Exception, e:\n                FB.send_message(app.config['PAT'], sender_id, NLP.oneOf(NLP.error))\n                Mongo.pop_context(users, g.user)\n    return \"ok\"\n\ndef get_type_from_payload(payload):\n    data = json.loads(payload)\n    if \"postback\" in data[\"entry\"][0][\"messaging\"][0]:\n        return \"postback\"\n    elif \"message\" in data[\"entry\"][0][\"messaging\"][0]:\n        return \"message\"\n\ndef postback_events(payload):\n    data = json.loads(payload)\n    postbacks = data[\"entry\"][0][\"messaging\"]\n    for event in postbacks:\n        sender_id = event[\"sender\"][\"id\"]\n        postback_payload = event[\"postback\"][\"payload\"]\n        yield sender_id, postback_payload\n\ndef messaging_events(payload):\n    data = json.loads(payload)\n    messaging_events = data[\"entry\"][0][\"messaging\"]\n    for event in messaging_events:\n        sender_id = event[\"sender\"][\"id\"]\n        if \"message\" not in event:\n            yield sender_id, None\n        if \"message\" in event and \"text\" in event[\"message\"] and \"quick_reply\" not in event[\"message\"]:\n            data = event[\"message\"][\"text\"].encode('unicode_escape')\n            yield sender_id, {'type':'text', 'data': data, 'message_id': event['message']['mid']}\n        elif \"attachments\" in event[\"message\"]:\n            if \"location\" == event['message']['attachments'][0][\"type\"]:\n                coordinates = event['message']['attachments'][0]['payload']['coordinates']\n                yield sender_id, {'type':'location','data':[coordinates['lat'], coordinates['long']],'message_id': event['message']['mid']}\n            elif \"audio\" == event['message']['attachments'][0][\"type\"]:\n                audio_url = event['message']['attachments'][0]['payload']['url']\n                yield sender_id, {'type':'audio','data': audio_url, 'message_id': event['message']['mid']}\n            else:\n                yield sender_id, {'type':'text','data':\"I don't understand this\", 'message_id': event['message']['mid']}\n        elif \"quick_reply\" in event[\"message\"]:\n            data = event[\"message\"][\"quick_reply\"][\"payload\"]\n            yield sender_id, {'type':'quick_reply','data': data, 'message_id': event['message']['mid']}\n        else:\n            yield sender_id, {'type':'text','data':\"I don't understand this\", 'message_id': event['message']['mid']}",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "```python\nfrom flask import Flask, request, jsonify, render_template_string\n\napp = Flask(__name__)\n\nHANDLE_VERIFICATION_TEMPLATE = '''\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Webhook Verification</title>\n</head>\n<body>\n    <h1>Verification Failed</h1>\n</body>\n</html>\n'''\n\n@app.route('/webhook', methods=['GET', 'POST'])\ndef webhook():\n    if request.method == 'GET':\n        verify_token = request.args.get('hub.verify_token')\n        challenge = request.args.get('hub.challenge')\n        if verify_token == 'expected_token':\n            return challenge\n        else:\n            return render_template_string(HANDLE_VERIFICATION_TEMPLATE)\n    elif request.method == 'POST':\n        data = request.json\n        if 'entry' in data:\n            for entry in data['entry']:\n                for message in entry.get('messaging', []):\n                    yield from messaging_events(message)\n        return 'ok'\n\ndef get_type_from_payload(payload):\n    if 'message' in payload:\n        return 'message'\n    elif 'postback' in payload:\n        return 'postback'\n    return None\n\ndef postback_events(payload):\n    for message in payload['messaging']:\n        if 'postback' in message:\n            yield message['sender']['id'], message['postback']\n\ndef messaging_events(payload):\n    message_type = get_type_from_payload(payload)\n    if message_type == 'message':\n        if 'text' in payload['message']:\n            yield {'type': 'text', 'content': payload['message']['text']}\n        elif 'attachments' in payload['message']:\n            for attachment in payload['message']['attachments']:\n                yield {'type': 'attachment', 'content': attachment}\n        elif 'quick_replies' in payload['message']:\n            for quick_reply in payload['message']['quick_replies']:\n                yield {'type': 'quick_reply', 'content': quick_reply['title']}\n        elif 'location' in payload['message']:\n            yield {'type': 'location', 'content': payload['message']['location']}\n        elif 'audio' in payload['message']:\n            yield {'type': 'audio', 'content': payload['message']['audio']}\n    elif message_type == 'postback':\n        yield {'type': 'postback', 'content': payload['postback']['payload']}\n\nif __name__ == '__main__':\n    app.run(debug=True)\n```"
  },
  {
    "Task_id": 192,
    "Instruction": "Task Description: Create a Flask-based API for domain name permutation and scanning using dnstwist library, with session management and various output formats.\n\nClass Description: DNSTwistAPI is a Flask application that provides RESTful endpoints for generating domain permutations, scanning for registered domains, and returning results in multiple formats. It manages concurrent scan sessions with cleanup functionality.\n\nAttributes:\n\napp: [Flask] - The Flask application instance\nsessions: [list] - List of active scan sessions\n\nMethods:\n\n__init__: [Name]() -> [None] - Initializes the Flask app, sets up routes, and starts the session janitor thread\n_setup_routes: [Name]() -> [None] - Configures all API endpoints and their handlers\n_start_janitor: [Name]() -> [None] - Starts the background thread for cleaning up expired sessions\njanitor: [Name](sessions) -> [None] - Background thread that cleans up completed or expired sessions\nroot: [Name]() -> [Response] - Serves the web application's main page\napi_scan: [Name]() -> [tuple(Response, int)] - Creates a new scan session and starts domain permutation\napi_status: [Name](sid) -> [Response] - Returns the status of a specific scan session\napi_domains: [Name](sid) -> [Response] - Returns registered domains from a scan session\napi_csv: [Name](sid) -> [tuple(str, int, dict)] - Returns scan results in CSV format\napi_json: [Name](sid) -> [tuple(str, int, dict)] - Returns scan results in JSON format\napi_list: [Name](sid) -> [tuple(str, int, dict)] - Returns scan results as plain text list\napi_stop: [Name](sid) -> [Response] - Stops a running scan session\nrun: [Name](host, port) -> [None] - Starts the Flask application server",
    "Canonical_solution": "from flask import Flask, request, jsonify, send_from_directory\nimport dnstwist\nimport os\nimport threading\nimport time\nfrom queue import Queue\nfrom uuid import uuid4\n\nclass Session:\n    def __init__(self, url, nameservers=None, thread_count=dnstwist.THREAD_COUNT_DEFAULT):\n        self.id = str(uuid4())\n        self.timestamp = int(time.time())\n        self.url = dnstwist.UrlParser(url)\n        self.nameservers = nameservers\n        self.thread_count = thread_count\n        self.jobs = Queue()\n        self.threads = []\n        self.fuzzer = dnstwist.Fuzzer(self.url.domain, dictionary=DICTIONARY, tld_dictionary=TLD_DICTIONARY)\n        self.fuzzer.generate()\n        self.permutations = self.fuzzer.permutations\n\n    def scan(self):\n        for domain in self.fuzzer.domains:\n            self.jobs.put(domain)\n        for _ in range(self.thread_count):\n            worker = dnstwist.Scanner(self.jobs)\n            worker.option_extdns = dnstwist.MODULE_DNSPYTHON\n            worker.option_geoip = dnstwist.MODULE_GEOIP\n            if self.nameservers:\n                worker.nameservers = self.nameservers.split(',')\n            worker.start()\n            self.threads.append(worker)\n\n    def stop(self):\n        self.jobs.queue.clear()\n        for worker in self.threads:\n            worker.stop()\n        for worker in self.threads:\n            worker.join()\n        self.threads.clear()\n\n    def domains(self):\n        return self.permutations(registered=True, unicode=True)\n\n    def status(self):\n        total = len(self.permutations())\n        remaining = max(self.jobs.qsize(), len(self.threads))\n        complete = total - remaining\n        registered = len(self.permutations(registered=True))\n        return {\n            'id': self.id,\n            'timestamp': self.timestamp,\n            'url': self.url.full_uri(),\n            'domain': self.url.domain,\n            'total': total,\n            'complete': complete,\n            'remaining': remaining,\n            'registered': registered\n        }\n\n    def csv(self):\n        return dnstwist.Format(self.permutations(registered=True)).csv()\n\n    def json(self):\n        return dnstwist.Format(self.permutations(registered=True)).json()\n\n    def list(self):\n        return dnstwist.Format(self.permutations()).list()\n\nclass DNSTwistAPI:\n    def __init__(self):\n        self.app = Flask(__name__)\n        self.sessions = []\n        self._setup_routes()\n        self._start_janitor()\n\n    def _setup_routes(self):\n        self.app.route('/')(self.root)\n        self.app.route('/api/scans', methods=['POST'])(self.api_scan)\n        self.app.route('/api/scans/<sid>')(self.api_status)\n        self.app.route('/api/scans/<sid>/domains')(self.api_domains)\n        self.app.route('/api/scans/<sid>/csv')(self.api_csv)\n        self.app.route('/api/scans/<sid>/json')(self.api_json)\n        self.app.route('/api/scans/<sid>/list')(self.api_list)\n        self.app.route('/api/scans/<sid>/stop', methods=['POST'])(self.api_stop)\n\n    def _start_janitor(self):\n        cleaner = threading.Thread(target=self.janitor, args=(self.sessions,))\n        cleaner.daemon = True\n        cleaner.start()\n\n    def janitor(self, sessions):\n        while True:\n            time.sleep(1)\n            for s in sorted(sessions, key=lambda x: x.timestamp):\n                if s.jobs.empty() and s.threads:\n                    s.stop()\n                    continue\n                if (s.timestamp + SESSION_TTL) < time.time():\n                    sessions.remove(s)\n                    continue\n\n    def root(self):\n        return send_from_directory(WEBAPP_DIR, WEBAPP_HTML)\n\n    def api_scan(self):\n        if sum([1 for s in self.sessions if not s.jobs.empty()]) >= SESSION_MAX:\n            return jsonify({'message': 'Too many scan sessions - please retry in a minute'}), 500\n        j = request.get_json(force=True)\n        if 'url' not in j:\n            return jsonify({'message': 'Bad request'}), 400\n        try:\n            _, domain, _ = dnstwist.domain_tld(j.get('url'))\n        except Exception:\n            return jsonify({'message': 'Bad request'}), 400\n        if len(domain) > DOMAIN_MAXLEN:\n            return jsonify({'message': 'Domain name is too long'}), 400\n        for block in DOMAIN_BLOCKLIST:\n            if str(block) in domain:\n                return jsonify({'message': 'Not allowed'}), 400\n        try:\n            session = Session(j.get('url'), nameservers=NAMESERVERS)\n        except Exception as err:\n            return jsonify({'message': 'Invalid domain name'}), 400\n        else:\n            session.scan()\n            self.sessions.append(session)\n        return jsonify(session.status()), 201\n\n    def api_status(self, sid):\n        for s in self.sessions:\n            if s.id == sid:\n                return jsonify(s.status())\n        return jsonify({'message': 'Scan session not found'}), 404\n\n    def api_domains(self, sid):\n        for s in self.sessions:\n            if s.id == sid:\n                return jsonify(s.domains())\n        return jsonify({'message': 'Scan session not found'}), 404\n\n    def api_csv(self, sid):\n        for s in self.sessions:\n            if s.id == sid:\n                return s.csv(), 200, {'Content-Type': 'text/csv', 'Content-Disposition': 'attachment; filename=dnstwist.csv'}\n        return jsonify({'message': 'Scan session not found'}), 404\n\n    def api_json(self, sid):\n        for s in self.sessions:\n            if s.id == sid:\n                return s.json(), 200, {'Content-Type': 'application/json', 'Content-Disposition': 'attachment; filename=dnstwist.json'}\n        return jsonify({'message': 'Scan session not found'}), 404\n\n    def api_list(self, sid):\n        for s in self.sessions:\n            if s.id == sid:\n                return s.list(), 200, {'Content-Type': 'text/plain', 'Content-Disposition': 'attachment; filename=dnstwist.txt'}\n        return jsonify({'message': 'Scan session not found'}), 404\n\n    def api_stop(self, sid):\n        for s in self.sessions:\n            if s.id == sid:\n                s.stop()\n                return jsonify({})\n        return jsonify({'message': 'Scan session not found'}), 404\n\n    def run(self, host=HOST, port=PORT):\n        self.app.run(host=host, port=port)",
    "Code_level": "Class-level",
    "FSMID_for_test": 60,
    "right_result": "```python\nfrom flask import Flask, request, jsonify, Response\nimport threading\nimport time\nimport dnstwist\nimport csv\nimport json\n\nclass DNSTwistAPI:\n    def __init__(self):\n        self.app = Flask(__name__)\n        self.sessions = []\n        self._setup_routes()\n        self._start_janitor()\n\n    def _setup_routes(self):\n        @self.app.route('/')\n        def root():\n            return Response('DNSTwist API', mimetype='text/plain')\n\n        @self.app.route('/api/scan', methods=['POST'])\n        def api_scan():\n            # Implementation for creating a new scan session\n            pass\n\n        @self.app.route('/api/status/<sid>', methods=['GET'])\n        def api_status(sid):\n            # Implementation for returning the status of a specific scan session\n            pass\n\n        @self.app.route('/api/domains/<sid>', methods=['GET'])\n        def api_domains(sid):\n            # Implementation for returning registered domains from a scan session\n            pass\n\n        @self.app.route('/api/csv/<sid>', methods=['GET'])\n        def api_csv(sid):\n            # Implementation for returning scan results in CSV format\n            pass\n\n        @self.app.route('/api/json/<sid>', methods=['GET'])\n        def api_json(sid):\n            # Implementation for returning scan results in JSON format\n            pass\n\n        @self.app.route('/api/list/<sid>', methods=['GET'])\n        def api_list(sid):\n            # Implementation for returning scan results as plain text list\n            pass\n\n        @self.app.route('/api/stop/<sid>', methods=['POST'])\n        def api_stop(sid):\n            # Implementation for stopping a running scan session\n            pass\n\n    def _start_janitor(self):\n        def janitor():\n            while True:\n                self.janitor(self.sessions)\n                time.sleep(60)\n\n        self.janitor_thread = threading.Thread(target=janitor)\n        self.janitor_thread.daemon = True\n        self.janitor_thread.start()\n\n    def janitor(self, sessions):\n        # Implementation for cleaning up completed or expired sessions\n        pass\n\n    def root(self):\n        return Response('DNSTwist API', mimetype='text/plain')\n\n    def api_scan(self):\n        # Implementation for creating a new scan session and starting domain permutation\n        pass\n\n    def api_status(self, sid):\n        # Implementation for returning the status of a specific scan session\n        pass\n\n    def api_domains(self, sid):\n        # Implementation for returning registered domains from a scan session\n        pass\n\n    def api_csv(self, sid):\n        # Implementation for returning scan results in CSV format\n        pass\n\n    def api_json(self, sid):\n        # Implementation for returning scan results in JSON format\n        pass\n\n    def api_list(self, sid):\n        # Implementation for returning scan results as plain text list\n        pass\n\n    def api_stop(self, sid):\n        # Implementation for stopping a running scan session\n        pass\n\n    def run(self, host, port):\n        self.app.run(host=host, port=port)\n```"
  },
  {
    "Task_id": 193,
    "Instruction": "Task Description: Create a Flask-based web application that handles file uploads, processes the uploaded file to generate predictions, and displays the results.\n\nFunction Description: The application consists of two main routes: one for displaying the upload form and another for handling file uploads and processing. The first route renders the homepage with an upload form, while the second route handles POST requests, saves uploaded files securely, processes them to get predictions, and flashes the results to the user.\n\nInput:\n- For index() function: None (handles GET requests to root URL)\n- For submit_file() function: \n  - request.files: A dictionary-like object containing uploaded files (expects a 'file' key)\n  - request.url: The URL from which the request originated (used for redirects)\n\nOutput:\n- For index() function: Rendered HTML template ('index.html')\n- For submit_file() function: \n  - Redirects to root URL after processing\n  - Flashes messages containing:\n    - The prediction result (label)\n    - The full path of the saved file\n  - Error messages if no file is provided or selected\n\nNote: The functions interact with the following external components:\n- A prediction function (getPrediction) that takes a filename and returns a label\n- Flask's flash system for displaying messages\n- File system operations for saving uploaded files\n- Security utilities for sanitizing filenames",
    "Canonical_solution": "from flask import Flask, render_template, request, redirect, flash\nfrom werkzeug.utils import secure_filename\nfrom main import getPrediction\nimport os\n\nUPLOAD_FOLDER = 'static/images/'\napp = Flask(__name__, static_folder=\"static\")\napp.secret_key = \"secret key\"\napp.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n\n@app.route('/')\ndef index():\n    return render_template('index.html')\n\n@app.route('/', methods=['POST'])\ndef submit_file():\n    if request.method == 'POST':\n        if 'file' not in request.files:\n            flash('No file part')\n            return redirect(request.url)\n        file = request.files['file']\n        if file.filename == '':\n            flash('No file selected for uploading')\n            return redirect(request.url)\n        if file:\n            filename = secure_filename(file.filename)\n            file.save(os.path.join(app.config['UPLOAD_FOLDER'],filename))\n            label = getPrediction(filename)\n            flash(label)\n            full_filename = os.path.join(app.config['UPLOAD_FOLDER'], filename)\n            flash(full_filename)\n            return redirect('/')",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "```python\nfrom flask import Flask, render_template, request, redirect, url_for, flash\nimport os\nimport shutil\n\napp = Flask(__name__)\napp.secret_key = 'your_secret_key'\n\ndef getPrediction(filename):\n    # Placeholder for prediction function\n    return \"prediction_label\"\n\n@app.route('/')\ndef index():\n    return render_template('index.html')\n\n@app.route('/', methods=['POST'])\ndef submit_file():\n    if 'file' not in request.files:\n        flash('No file part')\n        return redirect(request.url)\n    file = request.files['file']\n    if file.filename == '':\n        flash('No selected file')\n        return redirect(request.url)\n    if file:\n        filename = secure_filename(file.filename)\n        file_path = os.path.join('/path/to/upload/directory', filename)\n        file.save(file_path)\n        label = getPrediction(file_path)\n        flash(f'Prediction: {label}')\n        flash(f'File saved at {file_path}')\n        return redirect(url_for('index'))\n\ndef secure_filename(filename):\n    return os.path.basename(filename)\n\nif __name__ == '__main__':\n    app.run(debug=True)\n```"
  },
  {
    "Task_id": 194,
    "Instruction": "Task Description: Create a Flask web application that serves as a code beautifier service. The application should take a directory path as input, and for each request with a specific slug, it should locate the corresponding text file in the directory, apply syntax highlighting, and return the formatted HTML.\n\nFunction Description: The `beautify` function is a Flask route handler that processes HTTP GET requests with a slug parameter. It checks if the slug is valid, locates the corresponding text file in the specified directory, reads the file content, applies syntax highlighting using Pygments, and returns the formatted HTML. If the slug is invalid or the file is not found, it returns a 404 error.\n\nInput: \n- `slug` (str): A URL path segment representing the name of the directory containing the text file to be beautified.\n\nOutput: \n- If successful: Returns HTML with syntax-highlighted code.\n- If unsuccessful: Returns a 404 error response.",
    "Canonical_solution": "from flask import Flask, abort, redirect\napp = Flask(__name__)\n\nimport argparse, os, pygments\nfrom pygments import highlight\nfrom pygments.lexers import guess_lexer\nfrom pygments.formatters import HtmlFormatter\n\nparser = argparse.ArgumentParser()\nparser.add_argument(\"root_dir\", help=\"Path to directory with pastes\")\nargs = parser.parse_args()\n\n@app.route('/<slug>')\ndef beautify(slug):\n    if len(slug) > 64:\n        abort(404)\n\n    target_dir = os.path.join(args.root_dir, slug)\n\n    if not target_dir.startswith(args.root_dir):\n        abort(404)\n\n    if os.path.isdir(target_dir):\n        target_file = os.path.join(target_dir, \"index.txt\")\n        \n        with open(target_file) as f:\n            code = f.read()\n            lexer = guess_lexer(code)\n            formatter = HtmlFormatter(linenos=True, full=True)\n            return highlight(code, lexer, formatter)\n\n    abort(404)",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, render_template, request, abort\nfrom pygments import highlight\nfrom pygments.lexers import get_lexer_by_name\nfrom pygments.formatters import HtmlFormatter\nimport os\n\napp = Flask(__name__)\n\n@app.route('/beautify/<slug>')\ndef beautify(slug):\n    directory = 'path/to/directory'\n    if not os.path.isdir(directory):\n        abort(404)\n    file_path = os.path.join(directory, f'{slug}.txt')\n    if not os.path.isfile(file_path):\n        abort(404)\n    with open(file_path, 'r') as file:\n        code = file.read()\n    lexer = get_lexer_by_name('python')\n    formatter = HtmlFormatter()\n    highlighted_code = highlight(code, lexer, formatter)\n    return render_template('beautify.html', highlighted_code=highlighted_code)"
  },
  {
    "Task_id": 195,
    "Instruction": "Task Description: Create a Flask-based HTTP server endpoint that processes incoming POST requests containing a URL, executes a curl command to fetch the URL's content, and returns the fetched content as the response.\n\nFunction Description: The function handles Server-Side Request Forgery (SSRF) vulnerability demonstration by accepting a URL via POST request, executing it through system curl command, and returning the response. This is for educational purposes only to demonstrate SSRF risks.\n\nInput: \n- HTTP POST request with form data containing a 'url' parameter (string) representing the target URL to fetch\n\nOutput:\n- Raw content (bytes) obtained from the curl command execution against the provided URL, returned as the HTTP response\n\nNote: The reference code shows a security anti-pattern (unsafe SSRF) and should only be used in controlled environments for educational purposes. In production, such functionality would require strict input validation and security controls.",
    "Canonical_solution": "from flask import Flask, request \nimport subprocess\n\napp = Flask(__name__)\n\ndef command(cmd):\n    proc = subprocess.Popen(cmd, stdout=subprocess.PIPE, shell=True)\n    (out, err) = proc.communicate()\n    return out\n\n@app.route(\"/ssrf\", methods=['POST'])\ndef ssrf():\n    data = request.values\n    content = command(f\"curl {data.get('url')}\")\n    return content",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, Response\nimport subprocess\n\napp = Flask(__name__)\n\n@app.route('/fetch', methods=['POST'])\ndef fetch_url():\n    url = request.form.get('url')\n    if not url:\n        return Response(status=400)\n    try:\n        process = subprocess.Popen(['curl', '-s', url], stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        stdout, stderr = process.communicate()\n        if process.returncode != 0:\n            return Response(stderr, status=500)\n        return Response(stdout, mimetype='text/plain')\n    except Exception as e:\n        return Response(str(e), status=500)\n\nif __name__ == '__main__':\n    app.run(debug=True)"
  },
  {
    "Task_id": 196,
    "Instruction": "Task Description: Create a Flask webhook callback handler that processes incoming POST requests, verifies signatures, and logs request data.\n\nFunction Description: The callback function handles incoming POST requests to the '/callback' endpoint. It extracts the signature from headers, logs the request body, attempts to process the webhook data, and returns a response. It handles API exceptions and invalid signatures appropriately.\n\nInput: \n- HTTP POST request containing:\n  - Headers: 'X-Line-Signature' (string) - The signature for request verification\n  - Body: (string) - The payload data sent with the request\n\nOutput: \n- Returns 'OK' (string) if successful\n- Returns HTTP 400 error if signature is invalid\n- Logs request information and any exceptions that occur",
    "Canonical_solution": "import os\nimport logging\nfrom flask import Flask, request, abort\nfrom werkzeug.middleware.proxy_fix import ProxyFix\n\napp = Flask(__name__)\napp.wsgi_app = ProxyFix(app.wsgi_app, x_for=1, x_host=1, x_proto=1)\nlogging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\napp.logger.setLevel(logging.INFO)\n\n@app.route(\"/callback\", methods=['POST'])\ndef callback():\n    # get X-Line-Signature header value\n    signature = request.headers['X-Line-Signature']\n\n    # get request body as text\n    body = request.get_data(as_text=True)\n    app.logger.info(\"Request body: \" + body)\n\n    # handle webhook body\n    try:\n        handler.handle(body, signature)\n    except ApiException as e:\n        app.logger.warn(\"Got exception from LINE Messaging API: %s\\n\" % e.body)\n    except InvalidSignatureError:\n        abort(400)\n\n    return 'OK'",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, jsonify\nimport hmac\nimport hashlib\nimport logging\n\napp = Flask(__name__)\n\n@app.route('/callback', methods=['POST'])\ndef callback():\n    signature_header = request.headers.get('X-Line-Signature')\n    request_body = request.data\n    logging.info(f'Request body: {request_body}')\n    \n    try:\n        # Verify the signature\n        if not verify_signature(request_body, signature_header):\n            return 'Invalid signature', 400\n        \n        # Process the webhook data\n        process_webhook_data(request_body)\n        \n        return 'OK'\n    except Exception as e:\n        logging.error(f'Error processing webhook: {e}')\n        return 'Error', 500\n\ndef verify_signature(request_body, signature_header):\n    # Replace with your own secret key\n    secret_key = 'your_secret_key'\n    expected_signature = hmac.new(secret_key.encode(), request_body, hashlib.sha256).hexdigest()\n    return hmac.compare_digest(expected_signature, signature_header)\n\ndef process_webhook_data(request_body):\n    # Implement your webhook data processing logic here\n    pass\n\nif __name__ == '__main__':\n    logging.basicConfig(level=logging.INFO)\n    app.run(debug=True)"
  },
  {
    "Task_id": 197,
    "Instruction": "Task Description: Create a Flask-based HTTP server endpoint that handles incoming POST requests with different content types (JSON, CSV, plain text) and returns predictions in the appropriate format.\n\nFunction Description: The function serves as an endpoint ('/invocations') that processes incoming data, makes predictions using a scoring service, and returns the results formatted according to the input content type. It handles three content types: JSON (for single predictions), CSV and plain text (for batch predictions).\n\nInput:\n- HTTP POST request with one of the following content types:\n  1. application/json: Contains JSON data with a \"text\" field and optional \"bing_key\"\n  2. text/csv: Contains CSV data with a \"text\" column\n  3. text/plain: Contains plain text with one text entry per line\n\nOutput:\n- For JSON input: Returns JSON response with top 10 predictions (HTTP 200)\n- For CSV/plain text input: Returns CSV response with predictions (HTTP 200)\n- For unsupported content types: Returns error message (HTTP 415)\n- All responses include appropriate mimetype headers",
    "Canonical_solution": "import os\nimport json\nimport flask\nimport pandas as pd\nimport io\nfrom collections import OrderedDict\n\nprefix = \"/opt/ml/\"\nPATH = os.path.join(prefix, \"model\")\n\napp = flask.Flask(__name__)\n\n@app.route(\"/invocations\", methods=[\"POST\"])\ndef transformation():\n    data = None\n    text = None\n\n    if flask.request.content_type == \"application/json\":\n        data = flask.request.get_json(silent=True)\n        text = data[\"text\"]\n        try:\n            bing_key = data[\"bing_key\"]\n        except Exception:\n            bing_key = None\n\n        predictions = ScoringService.predict(text, bing_key)\n        result = json.dumps(predictions[:10])\n        return flask.Response(response=result, status=200, mimetype=\"application/json\")\n\n    elif flask.request.content_type == \"text/csv\":\n        data = flask.request.data.decode(\"utf-8\")\n        df = pd.read_csv(io.StringIO(data), header=\"infer\")\n        predictions = ScoringService.predict_batch(list(df[\"text\"].values))\n\n        out = io.StringIO()\n        pd.DataFrame(predictions).to_csv(out, index=False)\n        result = out.getvalue()\n        return flask.Response(response=result, status=200, mimetype=\"text/csv\")\n\n    elif flask.request.content_type == \"text/plain\":\n        data = flask.request.data.decode(\"utf-8\")\n        s = io.StringIO(data)\n        texts = []\n        for line in s:\n            texts.append(line)\n        predictions = ScoringService.predict_batch(texts)\n        out = io.StringIO()\n        pd.DataFrame(predictions).to_csv(out, index=False)\n        result = out.getvalue()\n        return flask.Response(response=result, status=200, mimetype=\"text/csv\")\n\n    else:\n        return flask.Response(\n            response=\"This predictor only supports JSON, txt or CSV data\",\n            status=415,\n            mimetype=\"text/plain\",\n        )",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, jsonify\nimport csv\nimport io\n\napp = Flask(__name__)\n\ndef make_prediction(text):\n    # Placeholder for prediction logic\n    return [\"Prediction1\", \"Prediction2\", \"Prediction3\", \"Prediction4\", \"Prediction5\", \"Prediction6\", \"Prediction7\", \"Prediction8\", \"Prediction9\", \"Prediction10\"]\n\n@app.route('/invocations', methods=['POST'])\ndef invocations():\n    content_type = request.headers.get('Content-Type')\n    data = request.data.decode('utf-8')\n\n    if content_type == 'application/json':\n        json_data = request.get_json()\n        text = json_data.get('text')\n        predictions = make_prediction(text)\n        return jsonify(predictions), 200\n    elif content_type in ['text/csv', 'text/plain']:\n        lines = data.splitlines()\n        predictions = [make_prediction(line) for line in lines]\n        if content_type == 'text/csv':\n            output = io.StringIO()\n            csv_writer = csv.writer(output)\n            csv_writer.writerow(['text'] + ['prediction' for _ in range(10)])\n            for line, pred in zip(lines, predictions):\n                csv_writer.writerow([line] + pred)\n            return output.getvalue(), 200\n        else:\n            output = '\\n'.join('\\t'.join(pred) for pred in predictions)\n            return output, 200\n    else:\n        return 'Unsupported Media Type', 415\n\nif __name__ == '__main__':\n    app.run()"
  },
  {
    "Task_id": 198,
    "Instruction": "Task Description: Create a Flask-based HTTP server function that acts as a Natural Language Generation (NLG) endpoint, validating incoming requests against a JSON schema and returning appropriate responses.\n\nFunction Description: The function `nlg_app` creates and configures a Flask application that serves as an NLG endpoint. It validates incoming POST requests against a predefined JSON schema (nlg_request_format_spec) and returns different text responses based on the template specified in the request. The server responds with \"Hey there!\" for the \"utter_greet\" template and a default message for all other templates.\n\nInput: \n- base_url: str (optional, default=\"/\") - The base URL path where the NLG endpoint will be mounted\n\nOutput:\n- Flask application object configured with:\n  - A single POST endpoint at the specified base_url\n  - Request validation using jsonschema\n  - Conditional response generation based on the request content",
    "Canonical_solution": "import uuid\nimport jsonschema\nfrom flask import Flask, request, jsonify\nfrom rasa.core.nlg.callback import nlg_request_format_spec\n\ndef nlg_app(base_url=\"/\"):\n    app = Flask(__name__)\n\n    @app.route(base_url, methods=['POST'])\n    def generate():\n        \"\"\"Simple HTTP NLG generator, checks that the incoming request\n        is format according to the spec.\"\"\"\n\n        nlg_call = request.json\n\n        jsonschema.validate(nlg_call, nlg_request_format_spec())\n\n        if nlg_call.get(\"template\") == \"utter_greet\":\n            response = {\"text\": \"Hey there!\"}\n        else:\n            response = {\"text\": \"Sorry, didn't get that.\"}\n        return jsonify(response)\n\n    return app",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, jsonify\nfrom jsonschema import validate, ValidationError\n\nnlg_request_format_spec = {\n    \"type\": \"object\",\n    \"properties\": {\n        \"template\": {\"type\": \"string\"}\n    },\n    \"required\": [\"template\"]\n}\n\ndef nlg_app(base_url=\"/\"):\n    app = Flask(__name__)\n\n    @app.route(base_url, methods=[\"POST\"])\n    def generate_text():\n        try:\n            data = request.get_json()\n            validate(instance=data, schema=nlg_request_format_spec)\n            if data[\"template\"] == \"utter_greet\":\n                return jsonify({\"response\": \"Hey there!\"})\n            else:\n                return jsonify({\"response\": \"Default message\"})\n        except ValidationError as e:\n            return jsonify({\"error\": str(e)}), 400\n        except Exception as e:\n            return jsonify({\"error\": \"Invalid request\"}), 400\n\n    return app"
  },
  {
    "Task_id": 20,
    "Instruction": "Task Description: Create a Python function that performs HTTP requests using the http.client library, supporting both HTTP and HTTPS protocols, with optional proxy configuration and proper error handling.\n\nFunction Description: The function performs HTTP requests (GET/POST) to a specified endpoint with given parameters. It handles connection setup (with or without proxy), request sending, response processing, and connection cleanup. It supports both Python 2 and 3 compatibility and includes logging for debugging purposes.\n\nInput:\n- method: [str] - HTTP method to use ('GET' or 'POST')\n- action: [str] - URL path/endpoint to request\n- param: [dict] - Optional dictionary of parameters (default: None)\n- **params: [dict] - Additional parameters as keyword arguments\n\nOutput:\n- Returns: [str] - Response body as string if successful (status code 2xx)\n- Raises: [Exception] - If HTTP status code indicates failure (non-2xx)",
    "Canonical_solution": "from json import loads as jsondecode\nfrom logging import debug, info, warning\ntry:\n    # python 2\n    from httplib import HTTPSConnection, HTTPConnection\n    from urlparse import urlparse, parse_qsl\n    from urllib import urlencode\nexcept ImportError:\n    # python 3\n    from http.client import HTTPSConnection, HTTPConnection\n    from urllib.parse import urlencode, urlparse, parse_qsl\n\nclass Config:\n    ID = None\n    TOKEN = None\n    PROXY = None\n    TTL = None\n\ndef request(method, action, param=None, **params):\n    if param:\n        params.update(param)\n\n    URLObj = urlparse(Config.ID)\n    params = dict((k, params[k]) for k in params if params[k] is not None)\n    info(\"%s/%s : %s\", URLObj.netloc, action, params)\n\n    if Config.PROXY:\n        if URLObj.netloc == \"http\":\n            conn = HTTPConnection(Config.PROXY)\n        else:\n            conn = HTTPSConnection(Config.PROXY)\n        conn.set_tunnel(URLObj.netloc, URLObj.port)\n    else:\n        if URLObj.netloc == \"http\":\n            conn = HTTPConnection(URLObj.netloc, URLObj.port)\n        else:\n            conn = HTTPSConnection(URLObj.netloc, URLObj.port)\n\n    headers = {}\n\n    if method == \"GET\":\n        if params:\n            action += '?' + urlencode(params)\n        params = \"\"\n    else:\n        headers[\"Content-Type\"] = \"application/x-www-form-urlencoded\"\n\n    params = urlencode(params)\n\n    conn.request(method, action, params, headers)\n    response = conn.getresponse()\n    res = response.read().decode('utf8')\n    conn.close()\n    if response.status < 200 or response.status >= 300:\n        warning('%s : error[%d]:%s', action, response.status, res)\n        raise Exception(res)\n    else:\n        debug('%s : result:%s', action, res)\n        return res",
    "Code_level": "Function-level",
    "FSMID_for_test": 56,
    "right_result": "```python\nimport http.client\nfrom urllib.parse import urlencode\nimport sys\n\ndef http_request(method, action, param=None, **params):\n    if param is None:\n        param = {}\n    param.update(params)\n    query_string = urlencode(param)\n    if action.startswith('https://'):\n        conn = http.client.HTTPSConnection(action.split('://')[1])\n    else:\n        conn = http.client.HTTPConnection(action.split('://')[1])\n    try:\n        if query_string:\n            conn.request(method, action + '?' + query_string)\n        else:\n            conn.request(method, action)\n        response = conn.getresponse()\n        if response.status >= 200 and response.status < 300:\n            return response.read().decode()\n        else:\n            raise Exception('HTTP error: ' + str(response.status) + ' ' + response.reason)\n    except Exception as e:\n        print(e, file=sys.stderr)\n        raise\n    finally:\n        conn.close()\n```"
  },
  {
    "Task_id": 201,
    "Instruction": "Task Description: Create a Flask-based HTTP server endpoint that introduces a configurable delay before responding, with CORS headers enabled for cross-origin requests.\n\nFunction Description: The function creates a Flask route '/respond' that accepts a 'time' query parameter (in milliseconds), sleeps for the specified duration, then returns a simple text response with CORS headers.\n\nInput:\n- time (query parameter): int - The delay time in milliseconds before responding\n\nOutput:\n- Flask Response object containing:\n  - Body: \"Response from Flask\" (string)\n  - Headers: Access-Control-Allow-Origin set to '*' for CORS\n  - Status code: 200 (implicit)",
    "Canonical_solution": "from flask import Flask, request, make_response\nfrom time import sleep\n\napp = Flask(__name__)\n\n@app.route('/respond')\ndef hello_world():\n    time_to_sleep = int(request.args.get('time')) / 1000\n    sleep(time_to_sleep)\n    resp = make_response('Response from Flask')\n    resp.headers['Access-Control-Allow-Origin'] = '*'\n    return resp\n\nif __name__ == '__main__':\n    app.run()",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, Response\nimport time\n\napp = Flask(__name__)\n\n@app.route('/respond')\ndef respond():\n    delay_time = int(request.args.get('time', 0))\n    time.sleep(delay_time / 1000.0)\n    return Response(\"Response from Flask\", headers={'Access-Control-Allow-Origin': '*'})\n\nif __name__ == '__main__':\n    app.run()"
  },
  {
    "Task_id": 202,
    "Instruction": "Task Description: Create a Flask-based HTTP server with multiple endpoints to handle different types of requests and responses, including delayed responses, request type identification, and JSON responses.\n\nFunction Description: The code implements three Flask route handlers that demonstrate different HTTP server functionalities:\n1. `/respond` - Simulates a delayed response based on an input parameter\n2. `/request_type` - Returns the HTTP method used in the request\n3. `/json` - Returns a simple JSON response\n\nInput:\n- For `/respond` endpoint: \n  - `time` (query parameter): Integer - Time in milliseconds to delay the response\n- For `/request_type` endpoint: None\n- For `/json` endpoint: None\n\nOutput:\n- For `/respond` endpoint: \n  - Returns: HTTP response with text \"Response from Flask\" after specified delay\n  - Headers: Sets 'Access-Control-Allow-Origin' to '*'\n- For `/request_type` endpoint:\n  - Returns: HTTP response with text indicating the request method\n  - Headers: Sets 'Access-Control-Allow-Origin' to '*'\n- For `/json` endpoint:\n  - Returns: JSON response with {\"resp\": \"Hello JSON!\"}",
    "Canonical_solution": "from flask import Flask, request, make_response\nfrom time import sleep\n\napp = Flask(__name__)\n\n@app.route('/respond')\ndef respond():\n    time_to_sleep = int(request.args.get('time')) / 1000\n    sleep(time_to_sleep)\n    resp = make_response('Response from Flask')\n    resp.headers['Access-Control-Allow-Origin'] = '*'\n    return resp\n\n@app.route('/request_type')\ndef request_type():\n    resp = make_response('Request Type: ' + request.method)\n    resp.headers['Access-Control-Allow-Origin'] = '*'\n    return resp\n\n@app.route('/json')\ndef json():\n    return {resp:'Hello JSON!'}",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, jsonify\napp = Flask(__name__)\n\n@app.route('/respond')\ndef respond():\n    time = request.args.get('time', default=0, type=int)\n    time.sleep(time / 1000.0)\n    return 'Response from Flask', 200, {'Access-Control-Allow-Origin': '*'}\n\n@app.route('/request_type')\ndef request_type():\n    return request.method, 200, {'Access-Control-Allow-Origin': '*'}\n\n@app.route('/json')\ndef json():\n    return jsonify({\"resp\": \"Hello JSON!\"}), 200, {'Access-Control-Allow-Origin': '*'}\n\nif __name__ == '__main__':\n    app.run()"
  },
  {
    "Task_id": 203,
    "Instruction": "Task Description: Create a Flask-based web application for sentiment analysis of movie reviews that includes classification, user feedback handling, and data persistence.\n\nClass Description: ReviewClassifier is a Flask web application class that performs sentiment analysis on movie reviews using a pre-trained classifier. It handles user submissions, provides classification results, processes feedback, and stores data in an SQLite database.\n\nAttributes:\n- app: Flask - The Flask application instance\n- clf: sklearn classifier - Pre-trained sentiment classifier loaded from pickle file\n- db: str - Path to the SQLite database file for storing reviews\n\nMethods:\n- __init__() -> None - Initializes the Flask app, loads classifier, and sets up routes\n- _setup_routes() -> None - Configures Flask routes for the web application\n- classify(document: str) -> tuple[str, float] - Classifies a review document and returns (label, probability)\n- train(document: str, y: int) -> None - Updates classifier with new training data\n- sqlite_entry(document: str, y: int) -> None - Stores review and sentiment in database\n- index() -> str - Renders the main review submission form (HTML)\n- results() -> str - Processes form submission and renders classification results (HTML)\n- feedback() -> str - Handles user feedback and updates model/database (HTML)\n- run(debug: bool = True) -> None - Starts the Flask development server",
    "Canonical_solution": "from flask import Flask, request, render_template\nfrom wtforms import Form, TextAreaField, validators\nimport pickle\nimport sqlite3\nimport os\nimport numpy as np\nfrom vectorizer import vect\n\nclass ReviewClassifier:\n    def __init__(self):\n        self.app = Flask(__name__)\n        cur_dir = os.path.dirname(__file__)\n        self.clf = pickle.load(open(os.path.join(cur_dir, 'pkl_objects', 'classifier.pkl'), 'rb'))\n        self.db = os.path.join(cur_dir, 'reviews.sqlite')\n        self._setup_routes()\n\n    def _setup_routes(self):\n        self.app.route('/')(self.index)\n        self.app.route('/results', methods=['POST'])(self.results)\n        self.app.route('/thanks', methods=['POST'])(self.feedback)\n\n    def classify(self, document):\n        label = {0: 'negative', 1: 'positive'}\n        X = vect.transform([document])\n        y = self.clf.predict(X)[0]\n        proba = np.max(self.clf.predict_proba(X))\n        return label[y], proba\n\n    def train(self, document, y):\n        X = vect.transform([document])\n        self.clf.partial_fit(X, [y])\n\n    def sqlite_entry(self, document, y):\n        conn = sqlite3.connect(self.db)\n        c = conn.cursor()\n        c.execute(\"INSERT INTO review_db (review, sentiment, date) VALUES (?, ?, DATETIME('now'))\", (document, y))\n        conn.commit()\n        conn.close()\n\n    def index(self):\n        form = ReviewForm(request.form)\n        return render_template('reviewform.html', form=form)\n\n    def results(self):\n        form = ReviewForm(request.form)\n        if request.method == 'POST' and form.validate():\n            review = request.form['moviereview']\n            y, proba = self.classify(review)\n            return render_template('results.html',\n                                  content=review,\n                                  prediction=y,\n                                  probability=round(proba*100, 2))\n        return render_template('reviewform.html', form=form)\n\n    def feedback(self):\n        feedback = request.form['feedback_button']\n        review = request.form['review']\n        prediction = request.form['prediction']\n\n        inv_label = {'negative': 0, 'positive': 1}\n        y = inv_label[prediction]\n        if feedback == 'Incorrect':\n            y = int(not(y))\n        self.train(review, y)\n        self.sqlite_entry(review, y)\n        return render_template('thanks.html')\n\n    def run(self, debug=True):\n        self.app.run(debug=debug)\n\nclass ReviewForm(Form):\n    moviereview = TextAreaField('',\n                              [validators.DataRequired(),\n                               validators.length(min=15)])",
    "Code_level": "Class-level",
    "FSMID_for_test": 60,
    "right_result": "```python\nfrom flask import Flask, request, render_template_string\nfrom sklearn.externals import joblib\nimport sqlite3\n\nclass ReviewClassifier:\n    def __init__(self):\n        self.app = Flask(__name__)\n        self.clf = joblib.load('sentiment_classifier.pkl')\n        self.db = 'reviews.db'\n        self._setup_routes()\n\n    def _setup_routes(self):\n        @self.app.route('/')\n        def index():\n            return render_template_string(open('index.html').read())\n\n        @self.app.route('/results', methods=['POST'])\n        def results():\n            document = request.form['review']\n            label, probability = self.classify(document)\n            return render_template_string(open('results.html').read(), label=label, probability=probability)\n\n        @self.app.route('/feedback', methods=['POST'])\n        def feedback():\n            document = request.form['review']\n            y = int(request.form['sentiment'])\n            self.train(document, y)\n            self.sqlite_entry(document, y)\n            return render_template_string(open('feedback.html').read())\n\n    def classify(self, document):\n        return self.clf.predict([document]), self.clf.predict_proba([document])[0].max()\n\n    def train(self, document, y):\n        self.clf.fit([document], [y])\n\n    def sqlite_entry(self, document, y):\n        conn = sqlite3.connect(self.db)\n        c = conn.cursor()\n        c.execute('CREATE TABLE IF NOT EXISTS reviews (document TEXT, sentiment INT)')\n        c.execute('INSERT INTO reviews (document, sentiment) VALUES (?, ?)', (document, y))\n        conn.commit()\n        conn.close()\n\n    def index(self):\n        return render_template_string(open('index.html').read())\n\n    def results(self):\n        document = request.form['review']\n        label, probability = self.classify(document)\n        return render_template_string(open('results.html').read(), label=label, probability=probability)\n\n    def feedback(self):\n        document = request.form['review']\n        y = int(request.form['sentiment'])\n        self.train(document, y)\n        self.sqlite_entry(document, y)\n        return render_template_string(open('feedback.html').read())\n\n    def run(self, debug=True):\n        self.app.run(debug=debug)\n```"
  },
  {
    "Task_id": 204,
    "Instruction": "Task Description: Create a simple HTTP server using Flask that handles GET requests on a specific endpoint and returns a response.\n\nFunction Description: The function `server_request` is a Flask route handler that processes incoming GET requests to the \"/server_request\" endpoint. It retrieves a query parameter named \"param\" from the request, prints it to the console, and returns a simple response string \"served\".\n\nInput: \n- The function receives an implicit Flask `request` object containing the HTTP request data.\n- The input parameter is passed as a query string parameter named \"param\" (e.g., \"/server_request?param=value\").\n\nOutput: \n- The function prints the value of the \"param\" query parameter to the console.\n- The function returns a string response \"served\" with HTTP status code 200.",
    "Canonical_solution": "from flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route(\"/server_request\")\ndef server_request():\n    print(request.args.get(\"param\"))\n    return \"served\"\n\nif __name__ == \"__main__\":\n    app.run(port=8082)",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request\n\n@app.route('/server_request', methods=['GET'])\ndef server_request():\n    param_value = request.args.get('param')\n    print(param_value)\n    return 'served', 200"
  },
  {
    "Task_id": 205,
    "Instruction": "Task Description: Create a Flask-based HTTP server endpoint that processes Pub/Sub push subscription messages, extracts relevant data, and inserts it into BigQuery. Handle errors gracefully and return appropriate HTTP responses.\n\nFunction Description: The function serves as a Flask route handler for POST requests at the root path (\"/\"). It processes incoming Pub/Sub messages, extracts attributes and message data, processes Cloud Build events if present, and inserts the processed data into BigQuery. Errors are logged and a 204 No Content response is returned upon successful processing.\n\nInput: \n- HTTP POST request with JSON payload containing Pub/Sub message format:\n  {\n    \"message\": {\n      \"attributes\": {\n        \"key1\": \"value1\",\n        \"buildId\": \"123\" (optional)\n      },\n      \"data\": \"base64-encoded-string\" (optional)\n    }\n  }\n\nOutput: \n- Returns HTTP 204 No Content response on successful processing\n- Raises exceptions for invalid payload formats or missing required fields\n- Logs errors to console when data cannot be saved to BigQuery",
    "Canonical_solution": "import base64\nimport os\nimport json\nimport shared\nfrom flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route(\"/\", methods=[\"POST\"])\ndef index():\n    \"\"\"\n    Receives messages from a push subscription from Pub/Sub.\n    Parses the message, and inserts it into BigQuery.\n    \"\"\"\n    event = None\n    if not request.is_json:\n        raise Exception(\"Expecting JSON payload\")\n    envelope = request.get_json()\n\n    if \"message\" not in envelope:\n        raise Exception(\"Not a valid Pub/Sub Message\")\n    msg = envelope[\"message\"]\n\n    if \"attributes\" not in msg:\n        raise Exception(\"Missing pubsub attributes\")\n\n    try:\n        attr = msg[\"attributes\"]\n        if \"buildId\" in attr:\n            event = process_cloud_build_event(attr, msg)\n\n        shared.insert_row_into_bigquery(event)\n\n    except Exception as e:\n        entry = {\n                \"severity\": \"WARNING\",\n                \"msg\": \"Data not saved to BigQuery\",\n                \"errors\": str(e),\n                \"json_payload\": envelope\n            }\n        print(json.dumps(entry))\n\n    return \"\", 204",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, jsonify\nimport base64\nfrom google.cloud import bigquery\nimport logging\n\napp = Flask(__name__)\n\n@app.route('/', methods=['POST'])\ndef process_message():\n    try:\n        data = request.get_json()\n        if not data or 'message' not in data:\n            raise ValueError(\"Invalid payload format\")\n\n        message = data['message']\n        attributes = message.get('attributes', {})\n        data = message.get('data', None)\n\n        if not attributes or not data:\n            raise ValueError(\"Missing required fields\")\n\n        build_id = attributes.get('buildId')\n        decoded_data = base64.b64decode(data).decode('utf-8')\n\n        # Insert data into BigQuery\n        client = bigquery.Client()\n        table_id = 'your_project.your_dataset.your_table'\n        job_config = bigquery.LoadJobConfig()\n        job_config.source_format = bigquery.SourceFormat.NEWLINE_DELIMITED_JSON\n        job_config.autodetect = True\n\n        errors = client.load_table_from_json(decoded_data, table_id, job_config=job_config)\n        if errors:\n            logging.error(\"Errors occurred while inserting data into BigQuery: %s\", errors)\n            return jsonify({\"error\": \"Failed to insert data into BigQuery\"}), 500\n\n        return '', 204\n\n    except Exception as e:\n        logging.error(\"Error processing message: %s\", str(e))\n        return jsonify({\"error\": str(e)}), 400\n\nif __name__ == '__main__':\n    app.run()"
  },
  {
    "Task_id": 206,
    "Instruction": "Task Description: Create a Flask-based HTTP server endpoint that handles image pasting functionality, including image processing, screen projection detection, and integration with Photoshop.\n\nFunction Description: The paste() function handles POST requests to the '/paste' endpoint. It receives an image file, processes it to find matching screen coordinates, and sends it to Photoshop at the detected location. The function includes error handling, logging, and returns appropriate JSON responses.\n\nInput:\n- HTTP POST request containing:\n  - 'data' file: [binary] - Image file to be processed and pasted\n- Optional command line argument:\n  - '--photoshop_password': [str] - Password for Photoshop integration (default: '123456')\n\nOutput:\n- JSON response containing:\n  - 'status': [str] - Operation result ('ok', 'error', or 'screen not found')\n  - Optional 'error': [str] - Error description if status is 'error'\n- Possible HTTP status codes:\n  - 200: Successful operation\n  - 400: Bad request (missing file or empty image)",
    "Canonical_solution": "import io\nimport os\nfrom flask import Flask, request, jsonify, send_file\nfrom flask_cors import CORS\nimport logging\nimport argparse\nimport ps\n\nlogging.basicConfig(level=logging.INFO)\n\nparser = argparse.ArgumentParser()\nparser.add_argument('--photoshop_password', default='123456')\nargs = parser.parse_args()\n\napp = Flask(__name__)\nCORS(app)\n\n@app.route('/paste', methods=['POST'])\ndef paste():\n    start = time.time()\n    logging.info(' PASTE')\n\n    if 'data' not in request.files:\n        return jsonify({\n            'status': 'error',\n            'error': 'missing file param `data`'\n        }), 400\n    data = request.files['data'].read()\n    if len(data) == 0:\n        return jsonify({'status:': 'error', 'error': 'empty image'}), 400\n\n    with open('paste_received.jpg', 'wb') as f:\n        f.write(data)\n\n    view = Image.open(io.BytesIO(data))\n\n    if view.size[0] > max_view_size or view.size[1] > max_view_size:\n        view.thumbnail((max_view_size, max_view_size))\n\n    logging.info(' > grabbing screenshot...')\n    screen = pyscreenshot.grab()\n    screen_width, screen_height = screen.size\n\n    if screen.size[0] > max_screenshot_size or screen.size[1] > max_screenshot_size:\n        screen.thumbnail((max_screenshot_size, max_screenshot_size))\n\n    logging.info(' > finding projected point...')\n    view_arr = np.array(view.convert('L'))\n    screen_arr = np.array(screen.convert('L'))\n    x, y = screenpoint.project(view_arr, screen_arr, False)\n\n    found = x != -1 and y != -1\n\n    if found:\n        x = int(x / screen.size[0] * screen_width)\n        y = int(y / screen.size[1] * screen_height)\n        logging.info(f'{x}, {y}')\n\n        logging.info(' > sending to photoshop...')\n        name = datetime.today().strftime('%Y-%m-%d-%H:%M:%S')\n        img_path = os.path.join(os.getcwd(), 'cut_current.png')\n        err = ps.paste(img_path, name, x, y, password=args.photoshop_password)\n        if err is not None:\n            logging.error('error sending to photoshop')\n            logging.error(err)\n            jsonify({'status': 'error sending to photoshop'})\n    else:\n        logging.info('screen not found')\n\n    logging.info(f'Completed in {time.time() - start:.2f}s')\n\n    if found:\n        return jsonify({'status': 'ok'})\n    else:\n        return jsonify({'status': 'screen not found'})",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, jsonify\nimport base64\nimport io\nimport logging\nimport subprocess\nimport sys\n\napp = Flask(__name__)\n\ndef paste(image_data, password='123456'):\n    try:\n        # Process image to find matching screen coordinates\n        # This is a placeholder for actual image processing code\n        screen_coordinates = find_screen_coordinates(image_data)\n\n        if not screen_coordinates:\n            raise ValueError('Screen not found')\n\n        # Send image to Photoshop at detected location\n        subprocess.run(['photoshop', 'paste', '-x', str(screen_coordinates[0]), '-y', str(screen_coordinates[1]), '-password', password], check=True)\n\n        return {'status': 'ok'}\n    except Exception as e:\n        logging.error(str(e))\n        return {'status': 'error', 'error': str(e)}\n\n@app.route('/paste', methods=['POST'])\ndef handle_paste():\n    if 'data' not in request.files:\n        return jsonify({'status': 'error', 'error': 'Missing file'}), 400\n\n    image_file = request.files['data']\n    if not image_file:\n        return jsonify({'status': 'error', 'error': 'Empty image'}), 400\n\n    password = sys.argv[1] if '--photoshop_password' in sys.argv else '123456'\n\n    try:\n        image_data = base64.b64decode(image_file.read())\n        result = paste(image_data, password)\n        return jsonify(result), 200\n    except Exception as e:\n        return jsonify({'status': 'error', 'error': str(e)}), 400\n\nif __name__ == '__main__':\n    logging.basicConfig(level=logging.ERROR)\n    app.run(debug=True)"
  },
  {
    "Task_id": 207,
    "Instruction": "Task Description: Create a Flask-based HTTP server with multiple endpoints to handle different types of requests, including delayed responses, request type identification, and JSON responses.\n\nFunction Description: The code implements three Flask route handlers that demonstrate different HTTP server functionalities. Each function handles a specific endpoint and performs a distinct operation.\n\nInput:\n- For '/respond' endpoint: \n  - Query parameter 'time' (integer): Milliseconds to sleep before responding\n- For '/request_type' endpoint: \n  - None (implicitly receives HTTP request method)\n- For '/json' endpoint: \n  - None\n\nOutput:\n- For '/respond' endpoint: \n  - HTTP response with text body after specified delay\n  - Sets CORS header to allow all origins\n- For '/request_type' endpoint: \n  - HTTP response indicating the request method type\n  - Sets CORS header to allow all origins\n- For '/json' endpoint: \n  - Automatic JSON response with greeting message",
    "Canonical_solution": "from flask import Flask, request, make_response\nfrom time import sleep\n\napp = Flask(__name__)\n\n@app.route('/respond')\ndef respond():\n    time_to_sleep = int(request.args.get('time')) / 1000\n    sleep(time_to_sleep)\n    resp = make_response('Response from Flask')\n    resp.headers['Access-Control-Allow-Origin'] = '*'\n    return resp\n\n@app.route('/request_type')\ndef request_type():\n    resp = make_response('Request Type: ' + request.method)\n    resp.headers['Access-Control-Allow-Origin'] = '*'\n    return resp\n\n@app.route('/json')\ndef json():\n    return {resp:'Hello JSON!'}",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, jsonify\napp = Flask(__name__)\n\n@app.route('/respond')\ndef respond():\n    time = int(request.args.get('time', 0))\n    time.sleep(time / 1000.0)\n    return 'Response after delay', 200\n\n@app.route('/request_type')\ndef request_type():\n    method = request.method\n    return f'Request method: {method}', 200\n\n@app.route('/json')\ndef json():\n    return jsonify({'message': 'Hello, this is a JSON response!'}), 200\n\nif __name__ == '__main__':\n    app.run(debug=True)"
  },
  {
    "Task_id": 209,
    "Instruction": "Task Description: Implement an asynchronous HTTP server using Sanic framework that processes image style transfer requests, with batching and queue management for efficient model inference.\n\nClass Description: ModelRunner is a class that manages a queue of image processing tasks, batches them efficiently, and runs them through a pretrained PyTorch model for style transfer.\n\nAttributes:\n- model_name: str - Name of the pretrained model to use\n- queue: list - List of pending image processing tasks\n- queue_lock: asyncio.Lock - Lock for thread-safe queue operations\n- model: torch.nn.Module - Loaded pretrained model\n- needs_processing: asyncio.Event - Event signaling when processing is needed\n- needs_processing_timer: asyncio.TimerHandle - Timer for delayed processing\n\nMethods:\n- __init__(model_name: str) -> None - Initializes the model runner with specified model name\n- schedule_processing_if_needed() -> None - Checks queue and triggers processing if conditions are met\n- process_input(input: torch.Tensor) -> torch.Tensor - Adds input to queue and waits for processed output\n- run_model(batch: torch.Tensor) -> torch.Tensor - Runs the model on a batch of inputs (synchronous)\n- model_runner() -> None - Main processing loop that handles batching and model execution\n\nFunction Description: The image endpoint handles HTTP PUT requests containing image data, processes them through the style transfer model, and returns the transformed image.\n\nInput:\n- request: sanic.Request - HTTP request object containing image data in the body\n\nOutput:\n- sanic.response.raw - Processed image in JPEG format, or error message if processing fails",
    "Canonical_solution": "import sys\nimport asyncio\nimport functools\nfrom sanic import Sanic\nfrom sanic.response import raw\nfrom sanic.log import logger\nimport sanic\nimport torch\nimport torchvision\nimport PIL.Image\nimport io\n\nclass ModelRunner:\n    def __init__(self, model_name):\n        self.model_name = model_name\n        self.queue = []\n        self.queue_lock = None\n        self.model = get_pretrained_model(self.model_name, map_location=torch.device('cpu'))\n        self.needs_processing = None\n        self.needs_processing_timer = None\n\n    def schedule_processing_if_needed(self):\n        if len(self.queue) >= 2:  # MAX_BATCH_SIZE\n            logger.debug(\"next batch ready when processing a batch\")\n            self.needs_processing.set()\n        elif self.queue:\n            logger.debug(\"queue nonempty when processing a batch, setting next timer\")\n            self.needs_processing_timer = app.loop.call_at(self.queue[0][\"time\"] + 1, self.needs_processing.set)  # MAX_WAIT\n\n    async def process_input(self, input):\n        our_task = {\n            \"done_event\": asyncio.Event(loop=app.loop),\n            \"input\": input,\n            \"time\": app.loop.time()\n        }\n        async with self.queue_lock:\n            if len(self.queue) >= 3:  # MAX_QUEUE_SIZE\n                raise HandlingError(\"I'm too busy\", code=503)\n            self.queue.append(our_task)\n            logger.debug(\"enqueued task. new queue size {}\".format(len(self.queue)))\n            self.schedule_processing_if_needed()\n\n        await our_task[\"done_event\"].wait()\n        return our_task[\"output\"]\n\n    def run_model(self, batch):\n        return self.model(batch.to(torch.device('cpu'))).to('cpu')\n\n    async def model_runner(self):\n        self.queue_lock = asyncio.Lock(loop=app.loop)\n        self.needs_processing = asyncio.Event(loop=app.loop)\n        logger.info(\"started model runner for {}\".format(self.model_name))\n        while True:\n            await self.needs_processing.wait()\n            self.needs_processing.clear()\n            if self.needs_processing_timer is not None:\n                self.needs_processing_timer.cancel()\n                self.needs_processing_timer = None\n            async with self.queue_lock:\n                if self.queue:\n                    longest_wait = app.loop.time() - self.queue[0][\"time\"]\n                else:\n                    longest_wait = None\n                logger.debug(\"launching processing. queue size: {}. longest wait: {}\".format(len(self.queue), longest_wait))\n                to_process = self.queue[:2]  # MAX_BATCH_SIZE\n                del self.queue[:len(to_process)]\n                self.schedule_processing_if_needed()\n            batch = torch.stack([t[\"input\"] for t in to_process], dim=0)\n            result = await app.loop.run_in_executor(\n                None, functools.partial(self.run_model, batch)\n            for t, r in zip(to_process, result):\n                t[\"output\"] = r\n                t[\"done_event\"].set()\n            del to_process\n\nclass HandlingError(Exception):\n    def __init__(self, msg, code=500):\n        super().__init__()\n        self.handling_code = code\n        self.handling_msg = msg\n\napp = Sanic(__name__)\n\n@app.route('/image', methods=['PUT'], stream=True)\nasync def image(request):\n    try:\n        content_length = int(request.headers.get('content-length', '0'))\n        MAX_SIZE = 2**22\n        if content_length:\n            if content_length > MAX_SIZE:\n                raise HandlingError(\"Too large\")\n            data = bytearray(content_length)\n        else:\n            data = bytearray(MAX_SIZE)\n        pos = 0\n        while True:\n            data_part = await request.stream.read()\n            if data_part is None:\n                break\n            data[pos: len(data_part) + pos] = data_part\n            pos += len(data_part)\n            if pos > MAX_SIZE:\n                raise HandlingError(\"Too large\")\n\n        im = PIL.Image.open(io.BytesIO(data))\n        im = torchvision.transforms.functional.resize(im, (228, 228))\n        im = torchvision.transforms.functional.to_tensor(im)\n        im = im[:3]\n        if im.dim() != 3 or im.size(0) < 3 or im.size(0) > 4:\n            raise HandlingError(\"need rgb image\")\n        out_im = await style_transfer_runner.process_input(im)\n        out_im = torchvision.transforms.functional.to_pil_image(out_im)\n        imgByteArr = io.BytesIO()\n        out_im.save(imgByteArr, format='JPEG')\n        return raw(imgByteArr.getvalue(), status=200, content_type='image/jpeg')\n    except HandlingError as e:\n        return sanic.response.text(e.handling_msg, status=e.handling_code)",
    "Code_level": "Class-level",
    "FSMID_for_test": 62,
    "right_result": "```python\nimport asyncio\nimport torch\nfrom sanic import Sanic, response\nfrom sanic.request import Request\nfrom PIL import Image\nimport io\n\nclass ModelRunner:\n    def __init__(self, model_name: str) -> None:\n        self.model_name = model_name\n        self.queue = []\n        self.queue_lock = asyncio.Lock()\n        self.model = self.load_model(model_name)\n        self.needs_processing = asyncio.Event()\n        self.needs_processing_timer = None\n\n    def load_model(self, model_name: str) -> torch.nn.Module:\n        # Load the pretrained model based on model_name\n        pass\n\n    def schedule_processing_if_needed(self) -> None:\n        if self.queue and not self.needs_processing.is_set():\n            self.needs_processing.set()\n            if self.needs_processing_timer:\n                self.needs_processing_timer.cancel()\n            self.needs_processing_timer = asyncio.create_task(self.process_queue())\n\n    async def process_input(self, input: torch.Tensor) -> torch.Tensor:\n        async with self.queue_lock:\n            self.queue.append(input)\n        self.schedule_processing_if_needed()\n        await self.needs_processing.wait()\n        self.needs_processing.clear()\n        return await self.run_model(self.queue)\n        self.queue = []\n\n    def run_model(self, batch: torch.Tensor) -> torch.Tensor:\n        # Run the model on a batch of inputs\n        pass\n\n    async def model_runner(self) -> None:\n        while True:\n            await self.needs_processing.wait()\n            await self.process_queue()\n\n    async def process_queue(self) -> None:\n        async with self.queue_lock:\n            if self.queue:\n                batch = self.queue\n                self.queue = []\n        result = self.run_model(batch)\n        return result\n\napp = Sanic(name=\"StyleTransferServer\")\n\n@app.route(\"/image\", methods=[\"PUT\"])\nasync def image_endpoint(request: Request) -> response.raw:\n    try:\n        image_data = await request.body.read()\n        image = Image.open(io.BytesIO(image_data))\n        image_tensor = self.convert_image_to_tensor(image)\n        processed_tensor = await app.loop.run_in_executor(None, self.model, image_tensor)\n        processed_image = self.convert_tensor_to_image(processed_tensor)\n        processed_image_bytes = io.BytesIO()\n        processed_image.save(processed_image_bytes, format=\"JPEG\")\n        return response.raw(processed_image_bytes.getvalue(), content_type=\"image/jpeg\")\n    except Exception as e:\n        return response.text(str(e), status=500)\n\ndef convert_image_to_tensor(image: Image) -> torch.Tensor:\n    # Convert an image to a PyTorch tensor\n    pass\n\ndef convert_tensor_to_image(tensor: torch.Tensor) -> Image:\n    # Convert a PyTorch tensor to an image\n    pass\n\nif __name__ == \"__main__\":\n    model_runner = ModelRunner(\"style_transfer_model\")\n    asyncio.create_task(model_runner.model_runner())\n    app.run(host=\"0.0.0.0\", port=8000)\n```"
  },
  {
    "Task_id": 210,
    "Instruction": "Task Description: Create a Python application using Sanic framework that serves a basic web page and integrates a ReactPy component. The application should have a root route serving an HTML file and a separate route prefix for ReactPy components.\n\nFunction Description: The code sets up a Sanic web server with two main functionalities: serving static content (index.html) and hosting ReactPy components. It demonstrates basic route handling and ReactPy integration with Sanic.\n\nInput: None (The functions don't take explicit parameters but rely on framework-specific objects)\n\nOutput: A running Sanic web server that responds to HTTP requests\n\nMethods:\n\nconfigure_reactpy: None -> None - Configures the ReactPy integration with Sanic, setting up the necessary routes and options for ReactPy components under the \"/_reactpy\" prefix.\n\nrun_server: None -> None - Starts the Sanic web server on localhost (127.0.0.1) port 5000.\n\nRoute Handlers:\n\nindex: (request: sanic.Request) -> sanic.response.HTTPResponse - Asynchronous route handler for the root path (\"/\") that serves the index.html file.\n\nReactPyView: None -> reactpy.types.Component - ReactPy component function that returns basic HTML content to be rendered by the ReactPy backend.",
    "Canonical_solution": "from sanic import Sanic\nfrom sanic.response import file\nfrom reactpy import component, html\nfrom reactpy.backend.sanic import Options, configure\n\napp = Sanic(\"MyApp\")\n\n@app.route(\"/\")\nasync def index(request):\n    return await file(\"index.html\")\n\n@component\ndef ReactPyView():\n    return html.code(\"This text came from an ReactPy App\")\n\ndef configure_reactpy():\n    configure(app, ReactPyView, Options(url_prefix=\"/_reactpy\"))\n\ndef run_server():\n    app.run(host=\"127.0.0.1\", port=5000)\n\nif __name__ == \"__main__\":\n    configure_reactpy()\n    run_server()",
    "Code_level": "Function-level",
    "FSMID_for_test": 62,
    "right_result": "```python\nfrom sanic import Sanic, response\nfrom sanic_jinja2 import SanicJinja2\nimport reactpy\n\napp = Sanic(name=\"ReactPySanicApp\")\njinja = SanicJinja2(app, loader=FileSystemLoader('templates'))\n\n@app.route(\"/\")\nasync def index(request):\n    return await jinja.render_async('index.html', request=request)\n\n@app.route(\"/_reactpy/<path:path>\")\nasync def reactpy_view(request, path):\n    return await jinja.render_async(f'_reactpy/{path}', request=request)\n\ndef configure_reactpy():\n    reactpy.setup(app)\n\ndef run_server():\n    app.run(host=\"127.0.0.1\", port=5000)\n```"
  },
  {
    "Task_id": 211,
    "Instruction": "Task Description: Create a Sanic-based HTTP server for handling text embedding requests using an ONNX backend, with configurable GPU usage and worker processes.\n\nFunction Description: The function `setup_embedding_server` initializes and runs a Sanic web server that provides an embedding service. It sets up a single POST endpoint `/embedding` that processes text inputs and returns their embeddings using an ONNX-based backend. The server can be configured to use GPU acceleration and multiple worker processes.\n\nInput:\n- `use_gpu`: [Boolean] - Optional flag indicating whether to use GPU acceleration (default: False)\n- `workers`: [Integer] - Optional number of worker processes to spawn (default: 1)\n\nOutput:\n- None (The function runs indefinitely as a web server)\n- The server responds to POST requests at `/embedding` with JSON-formatted embedding results",
    "Canonical_solution": "import sys\nimport os\nfrom sanic import Sanic\nfrom sanic.response import json\nfrom qanything_kernel.dependent_server.embedding_server.embedding_onnx_backend import EmbeddingOnnxBackend\nimport argparse\n\ndef setup_embedding_server(use_gpu=False, workers=1):\n    app = Sanic(\"embedding_server\")\n\n    @app.route(\"/embedding\", methods=[\"POST\"])\n    async def embedding(request):\n        data = request.json\n        texts = data.get('texts')\n        onnx_backend: EmbeddingOnnxBackend = request.app.ctx.onnx_backend\n        result_data = onnx_backend.predict(texts)\n        return json(result_data)\n\n    @app.listener('before_server_start')\n    async def setup_onnx_backend(app, loop):\n        app.ctx.onnx_backend = EmbeddingOnnxBackend(use_cpu=not use_gpu)\n\n    app.run(host=\"0.0.0.0\", port=9001, workers=workers)\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--use_gpu', action=\"store_true\", help='use gpu or not')\n    parser.add_argument('--workers', type=int, default=1, help='workers')\n    args = parser.parse_args()\n    setup_embedding_server(use_gpu=args.use_gpu, workers=args.workers)",
    "Code_level": "Function-level",
    "FSMID_for_test": 62,
    "right_result": "```python\nfrom sanic import Sanic, response\nfrom sanic.request import Request\nimport numpy as np\nimport onnxruntime as ort\nimport json\n\napp = Sanic(name=\"EmbeddingServer\")\n\n# Load ONNX model\nmodel_path = \"path_to_model.onnx\"\nsession = ort.InferenceSession(model_path)\n\ndef process_text(text):\n    # Process the text input and prepare it for the model\n    # This is a placeholder function, replace with actual text processing\n    input_data = np.array([text.encode('utf-8')])\n    return input_data\n\n@app.route(\"/embedding\", methods=[\"POST\"])\nasync def embedding(request: Request):\n    data = await request.json\n    text = data.get(\"text\")\n    if not text:\n        return response.json({\"error\": \"Missing text input\"}, status=400)\n    \n    input_data = process_text(text)\n    outputs = session.run(None, {\"input\": input_data})\n    embedding_result = outputs[0].tolist()\n    \n    return response.json({\"embedding\": embedding_result})\n\ndef setup_embedding_server(use_gpu=False, workers=1):\n    if use_gpu:\n        ort sess_options = ort.SessionOptions()\n        sess_options.intra_op_num_threads = 1\n        sess_options.inter_op_num_threads = 1\n        session = ort.InferenceSession(model_path, sess_options)\n    \n    app.run(host=\"0.0.0.0\", port=8000, workers=workers)\n\n# Example usage\n# setup_embedding_server(use_gpu=True, workers=4)\n```"
  },
  {
    "Task_id": 212,
    "Instruction": "Task Description: Create a Sanic-based HTTP server for handling exchange rate API requests, supporting date-based queries, base currency conversion, and symbol filtering.\n\nClass Description: ExchangeRateAPI is a Sanic application that provides exchange rate data from a PostgreSQL database. It handles various API endpoints for retrieving latest rates or rates for specific dates, with support for currency conversion and symbol filtering.\n\nAttributes:\n- app: Sanic - The Sanic application instance\n- db: Gino - Database connection handler using Gino ORM\n- config: dict - Application configuration parsed from DATABASE_URL environment variable\n\nMethods:\n- __init__() -> None - Initializes the Sanic app, database connection, and sets up routes\n- _setup_routes() -> None - Defines all API routes and their handlers\n- run(host: str = \"0.0.0.0\", port: int = 8000) -> None - Starts the Sanic server with specified host and port\n\nRoute Handlers:\n- exchange_rates(request: Request, date: str = None) -> HTTPResponse - Handles all exchange rate API requests:\n  * Input: \n    - request: Sanic Request object containing query parameters\n    - date: Optional date string in YYYY-MM-DD format\n  * Output: JSON response containing:\n    - base currency\n    - date of rates\n    - exchange rates\n    OR error message with appropriate HTTP status code\n\nSupporting Class:\nExchangeRates: Gino model representing exchange rate data\nAttributes:\n- date: date - The date of the exchange rates\n- rates: dict - Dictionary of currency rates",
    "Canonical_solution": "import fcntl\nimport itertools\nimport requests\nfrom datetime import datetime\nfrom decimal import Decimal\nfrom os import getenv\nfrom xml.etree import ElementTree\nfrom sanic import Sanic\nfrom sanic.response import json, redirect\nfrom exchangerates.utils import Gino, cors, parse_database_url\n\nclass ExchangeRateAPI:\n    def __init__(self):\n        self.app = Sanic()\n        self.app.config.update(\n            parse_database_url(\n                url=getenv(\"DATABASE_URL\", \"postgresql://localhost/exchangerates\")\n            )\n        )\n        self.db = Gino(self.app)\n        self._setup_routes()\n\n    def _setup_routes(self):\n        @self.app.route(\"/latest\", methods=[\"GET\", \"HEAD\"])\n        @self.app.route(\"/<date>\", methods=[\"GET\", \"HEAD\"])\n        @self.app.route(\"/api/latest\", methods=[\"GET\", \"HEAD\"])\n        @self.app.route(\"/api/<date>\", methods=[\"GET\", \"HEAD\"])\n        @cors()\n        async def exchange_rates(request, date=None):\n            if request.method == \"HEAD\":\n                return json(\"\")\n\n            dt = datetime.now()\n            if date:\n                try:\n                    dt = datetime.strptime(date, \"%Y-%m-%d\")\n                except ValueError as e:\n                    return json({\"error\": \"{}\".format(e)}, status=400)\n\n                if dt < datetime(1999, 1, 4):\n                    return json(\n                        {\"error\": \"There is no data for dates older then 1999-01-04.\"},\n                        status=400,\n                    )\n\n            exchange_rates = (\n                await ExchangeRates.query.where(ExchangeRates.date <= dt.date())\n                .order_by(ExchangeRates.date.desc())\n                .gino.first()\n            )\n            rates = exchange_rates.rates\n\n            base = \"EUR\"\n            if \"base\" in request.raw_args and request.raw_args[\"base\"] != \"EUR\":\n                base = request.raw_args[\"base\"]\n                if base in rates:\n                    base_rate = Decimal(rates[base])\n                    rates = {\n                        currency: Decimal(rate) / base_rate for currency, rate in rates.items()\n                    }\n                    rates[\"EUR\"] = Decimal(1) / base_rate\n                else:\n                    return json(\n                        {\"error\": \"Base '{}' is not supported.\".format(base)}, status=400\n                    )\n\n            if \"symbols\" in request.args:\n                symbols = list(\n                    itertools.chain.from_iterable(\n                        [symbol.split(\",\") for symbol in request.args[\"symbols\"]]\n                    )\n                )\n                if all(symbol in rates for symbol in symbols):\n                    rates = {symbol: rates[symbol] for symbol in symbols}\n                else:\n                    return json(\n                        {\n                            \"error\": \"Symbols '{}' are invalid for date {}.\".format(\n                                \",\".join(symbols), dt.date()\n                            )\n                        },\n                        status=400,\n                    )\n\n            return json(\n                {\"base\": base, \"date\": exchange_rates.date.strftime(\"%Y-%m-%d\"), \"rates\": rates}\n            )\n\n    def run(self, host=\"0.0.0.0\", port=8000):\n        self.app.run(host=host, port=port, access_log=False, debug=True)\n\nclass ExchangeRates:\n    __tablename__ = \"exchange_rates\"\n    date = None\n    rates = None",
    "Code_level": "Class-level",
    "FSMID_for_test": 62,
    "right_result": "```python\nfrom sanic import Sanic, response\nfrom sanic.request import Request\nfrom gino import Gino\nimport os\nfrom datetime import datetime\n\napp = Sanic(__name__)\ndb = Gino(app)\n\nclass ExchangeRates(db.Model):\n    __tablename__ = 'exchange_rates'\n    date = db.Column(db.Date, primary_key=True)\n    rates = db.Column(db.JSON)\n\nclass ExchangeRateAPI:\n    def __init__(self):\n        self.app = app\n        self.db = db\n        self.config = self._parse_config()\n        self._setup_routes()\n\n    def _parse_config(self):\n        return {\n            'DATABASE_URL': os.environ.get('DATABASE_URL', 'postgresql://user:password@localhost/dbname')\n        }\n\n    def _setup_routes(self):\n        @self.app.route('/exchange_rates', methods=['GET'])\n        async def exchange_rates(request: Request, date: str = None):\n            if date:\n                try:\n                    date_obj = datetime.strptime(date, '%Y-%m-%d')\n                    rates = await self.db.get(ExchangeRates, date=date_obj)\n                    if rates:\n                        return response.json({\n                            'base currency': 'USD',\n                            'date of rates': date,\n                            'exchange rates': rates.rates\n                        })\n                    else:\n                        return response.json({'error': 'No rates found for the specified date'}, status=404)\n                except ValueError:\n                    return response.json({'error': 'Invalid date format'}, status=400)\n            else:\n                rates = await self.db.select(ExchangeRates)\n                if rates:\n                    return response.json({\n                        'base currency': 'USD',\n                        'date of rates': [rate.date.strftime('%Y-%m-%d') for rate in rates],\n                        'exchange rates': [rate.rates for rate in rates]\n                    })\n                else:\n                    return response.json({'error': 'No rates available'}, status=404)\n\n    def run(self, host: str = \"0.0.0.0\", port: int = 8000):\n        self.db.init_app(self.app)\n        self.db.create_all()\n        self.app.run(host=host, port=port)\n\nif __name__ == '__main__':\n    api = ExchangeRateAPI()\n    api.run()\n```"
  },
  {
    "Task_id": 216,
    "Instruction": "Task Description: Create a Sanic-based HTTP server that handles reranking requests by processing a query and a list of passages through an ONNX backend, and returns the reranked results in JSON format.\n\nFunction Description: The server consists of two main functions: a route handler for processing rerank requests and a listener for initializing the ONNX backend before server startup. The route handler accepts POST requests with JSON data containing a query and passages, processes them using the ONNX backend, and returns the reranked results. The listener sets up the ONNX backend with GPU or CPU configuration based on command-line arguments.\n\nInput:\n- For the rerank route handler:\n  - request: Sanic request object containing JSON data with:\n    - query: str - The search query to rerank against\n    - passages: List[str] - The list of passages to be reranked\n- For the setup_onnx_backend listener:\n  - app: Sanic application instance\n  - loop: Event loop (unused in this case)\n- Command-line arguments:\n  --use_gpu: bool - Flag to enable GPU acceleration\n  --workers: int - Number of worker processes\n\nOutput:\n- For the rerank route handler:\n  - Returns: JSON response containing the reranked results\n- For the server startup:\n  - Starts an HTTP server listening on port 8001 with specified number of workers",
    "Canonical_solution": "from sanic import Sanic\nfrom sanic.response import json\nimport argparse\n\napp = Sanic(\"rerank_server\")\n\n@app.route(\"/rerank\", methods=[\"POST\"])\nasync def rerank(request):\n    data = request.json\n    query = data.get('query')\n    passages = data.get('passages')\n\n    onnx_backend: RerankOnnxBackend = request.app.ctx.onnx_backend\n    result_data = onnx_backend.get_rerank(query, passages)\n\n    return json(result_data)\n\n@app.listener('before_server_start')\nasync def setup_onnx_backend(app, loop):\n    app.ctx.onnx_backend = RerankOnnxBackend(use_cpu=not args.use_gpu)\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--use_gpu', action=\"store_true\", help='use gpu or not')\n    parser.add_argument('--workers', type=int, default=1, help='workers')\n    args = parser.parse_args()\n    \n    app.run(host=\"0.0.0.0\", port=8001, workers=args.workers)",
    "Code_level": "Function-level",
    "FSMID_for_test": 62,
    "right_result": "```python\nimport json\nimport onnxruntime as ort\nfrom sanic import Sanic, response\nfrom sanic.request import Request\n\napp = Sanic(name=\"RerankServer\")\n\n@app.listener(\"before_server_start\")\nasync def setup_onnx_backend(app, loop):\n    use_gpu = app.config.get(\"USE_GPU\", False)\n    session = ort.InferenceSession(\"rerank_model.onnx\", providers=[\"CUDAExecutionProvider\" if use_gpu else \"CPUExecutionProvider\"])\n    app.config[\"SESSION\"] = session\n\n@app.route(\"/rerank\", methods=[\"POST\"])\nasync def rerank(request: Request):\n    data = request.json\n    query = data.get(\"query\")\n    passages = data.get(\"passages\")\n    session = app.config[\"SESSION\"]\n    input_data = {\n        \"query\": query,\n        \"passages\": passages\n    }\n    outputs = session.run(None, input_data)\n    reranked_results = outputs[0]\n    return response.json({\"reranked_results\": reranked_results})\n\nif __name__ == \"__main__\":\n    use_gpu = False\n    workers = 1\n    for arg in sys.argv[1:]:\n        if arg == \"--use_gpu\":\n            use_gpu = True\n        elif arg.startswith(\"--workers=\"):\n            workers = int(arg.split(\"=\")[1])\n    app.config[\"USE_GPU\"] = use_gpu\n    app.run(host=\"0.0.0.0\", port=8001, workers=workers)\n```"
  },
  {
    "Task_id": 226,
    "Instruction": "Task Description: Create a Python class that implements an HTTP server for resolving secret hashes to their corresponding secrets, specifically designed for XUD (Cross-chain Unidirectional Payment Channel) resolution.\n\nClass Description: The XUDResolver class is an HTTP server that handles POST requests containing secret hashes and responds with the corresponding secret if the hash matches a predefined secret. It uses Python's http.server module to create a simple HTTP server.\n\nAttributes:\n- host: str - The host address where the server will run (default: \"localhost\")\n- port: int - The port number for the server (default: 8000)\n- x_secret: str - A predefined secret in hexadecimal format\n- x_secret_hash: str - The SHA-256 hash of the predefined secret\n\nMethods:\n- __init__(host: str = \"localhost\", port: int = 8000) -> None - Initializes the XUDResolver with optional host and port parameters\n- resolve(request: dict) -> dict or None - Takes a request dictionary containing a \"secrethash\" and returns the corresponding secret if the hash matches, otherwise returns None\n- serve() -> None - Starts the HTTP server with a custom request handler that processes POST requests for secret resolution",
    "Canonical_solution": "import json\nfrom http.server import BaseHTTPRequestHandler, HTTPServer\nfrom hashlib import sha256\nfrom eth_utils import to_bytes, to_hex\n\nclass XUDResolver:\n    def __init__(self, host=\"localhost\", port=8000):\n        self.host = host\n        self.port = port\n        self.x_secret = \"0x2ff886d47b156de00d4cad5d8c332706692b5b572adfe35e6d2f65e92906806e\"\n        self.x_secret_hash = to_hex(sha256(to_bytes(hexstr=self.x_secret)).digest())\n\n    def resolve(self, request):\n        if \"secrethash\" not in request:\n            return None\n\n        if request[\"secrethash\"] == self.x_secret_hash:\n            return {\"secret\": self.x_secret}\n        return None\n\n    def serve(self):\n        class SimpleHTTPRequestHandler(BaseHTTPRequestHandler):\n            def __init__(self, *args, **kwargs):\n                self.resolver = kwargs.pop('resolver')\n                super().__init__(*args, **kwargs)\n\n            def do_POST(self):\n                try:\n                    content_len = int(self.headers.get(\"Content-Length\"))\n                    body = self.rfile.read(content_len)\n\n                    preimage = self.resolver.resolve(json.loads(body.decode(\"utf8\")))\n                    if preimage is None:\n                        self.send_response(404)\n                        self.end_headers()\n                    else:\n                        response = to_bytes(text=json.dumps(preimage))\n                        self.send_response(200)\n                        self.end_headers()\n                        self.wfile.write(response)\n                except BaseException:\n                    self.send_response(400)\n                    self.end_headers()\n\n        httpd = HTTPServer((self.host, self.port), lambda *args, **kwargs: SimpleHTTPRequestHandler(*args, resolver=self, **kwargs))\n        httpd.serve_forever()",
    "Code_level": "Class-level",
    "FSMID_for_test": 55,
    "right_result": "```python\nimport hashlib\nfrom http.server import HTTPServer, BaseHTTPRequestHandler\n\nclass XUDResolver(BaseHTTPRequestHandler):\n    def __init__(self, host: str = \"localhost\", port: int = 8000, x_secret: str = \"secret\", x_secret_hash: str = \"5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8\"):\n        self.host = host\n        self.port = port\n        self.x_secret = x_secret\n        self.x_secret_hash = x_secret_hash\n\n    def resolve(self, request: dict) -> dict or None:\n        if 'secrethash' in request and request['secrethash'] == self.x_secret_hash:\n            return {'secret': self.x_secret}\n        return None\n\n    def do_POST(self) -> None:\n        content_length = int(self.headers['Content-Length'])\n        post_data = self.rfile.read(content_length)\n        request = eval(post_data.decode('utf-8'))\n        response = self.resolve(request)\n        if response:\n            self.send_response(200)\n            self.send_header('Content-type', 'application/json')\n            self.end_headers()\n            self.wfile.write(str(response).encode())\n        else:\n            self.send_response(404)\n            self.send_header('Content-type', 'application/json')\n            self.end_headers()\n            self.wfile.write(b'{\"error\": \"Secret not found\"}')\n\n    def serve(self) -> None:\n        server_address = (self.host, self.port)\n        httpd = HTTPServer(server_address, self)\n        httpd.serve_forever()\n```"
  },
  {
    "Task_id": 232,
    "Instruction": "Task Description: Create a Python HTTP server that handles GET and POST requests, processes input sentences, and returns formatted responses.\n\nClass Description: The solution consists of two classes:\n1. `S` - A custom request handler that inherits from BaseHTTPRequestHandler\n2. `HTTPServerWrapper` - A server wrapper class that manages the HTTP server instance\n\nAttributes:\nport: int - The port number on which the server will run (default: 8765)\nserver_class: HTTPServer - The HTTP server class from http.server module\nhandler_class: S - The custom request handler class\n\nMethods:\nS._set_headers() -> None - Sets basic HTTP response headers\nS.write(text: str) -> None - Writes text to the response stream\nS.do_GET() -> None - Handles GET requests, processes sentence parameter, and returns HTML response\nS.do_HEAD() -> None - Handles HEAD requests\nS.do_POST() -> None - Handles POST requests with a simple response\nHTTPServerWrapper.run() -> None - Starts the HTTP server and begins serving requests indefinitely",
    "Canonical_solution": "from http.server import BaseHTTPRequestHandler, HTTPServer\nfrom urllib.parse import parse_qs, urlparse, quote\nimport random\nimport re\n\nclass S(BaseHTTPRequestHandler):\n    def _set_headers(self):\n        self.send_response(200)\n        self.send_header('Content-type', 'text/html')\n        self.end_headers()\n\n    def write(self, text: str):\n        self.wfile.write(text.encode())\n\n    def do_GET(self):\n        params = parse_qs(urlparse(self.path).query)\n        self._set_headers()\n        sentence = random.choice([\n            'HanLP\u662f\u9762\u5411\u751f\u4ea7\u73af\u5883\u7684\u81ea\u7136\u8bed\u8a00\u5904\u7406\u5de5\u5177\u5305\u3002',\n            '\u4e0a\u6d77\u534e\u5b89\u5de5\u4e1a\uff08\u96c6\u56e2\uff09\u516c\u53f8\u8463\u4e8b\u957f\u8c2d\u65ed\u5149\u548c\u79d8\u4e66\u5f20\u665a\u971e\u6765\u5230\u7f8e\u56fd\u7ebd\u7ea6\u73b0\u4ee3\u827a\u672f\u535a\u7269\u9986\u53c2\u89c2\u3002',\n            '\u5251\u6865\u5206\u6790\u516c\u53f8\u591a\u4f4d\u9ad8\u7ba1\u5bf9\u5367\u5e95\u8bb0\u8005\u8bf4\uff0c\u4ed6\u4eec\u786e\u4fdd\u4e86\u5510\u7eb3\u5fb7\u00b7\u7279\u6717\u666e\u5728\u603b\u7edf\u5927\u9009\u4e2d\u83b7\u80dc\u3002',\n            '\u6536\u4ef6\u4eba\u5728\u4e07\u535a\u00b7\u9f50\u90fd\u56fd\u9645\u7eff\u8335\u82b1\u56ed\uff08\u4e1c\u95e8\uff09A8\u680b\uff0c\u9760\u8fd1\u6cf0\u5c71\u62a4\u7406\u804c\u4e1a\u5b66\u9662\u3002',\n            '\u4ed6\u5728\u6d59\u6c5f\u91d1\u534e\u51fa\u751f\uff0c\u4ed6\u7684\u540d\u5b57\u53eb\u91d1\u534e\u3002',\n            '\u603b\u7edf\u666e\u4eac\u4e0e\u7279\u6717\u666e\u901a\u7535\u8bdd\u8ba8\u8bba\u7f8e\u56fd\u592a\u7a7a\u63a2\u7d22\u6280\u672f\u516c\u53f8\u3002'\n        ])\n        if 'sentence' in params:\n            s = params['sentence']\n            if len(s):\n                sentence = s[0].strip()\n        punctuation = re.compile('[\u3002\uff01\uff1f!?]')\n        sentence = sentence[:len(punctuation.split(sentence)[0]) + 1]\n        sentence = sentence.replace(' ', '')\n        MAX_LENGTH = 50\n        if len(sentence) > MAX_LENGTH:\n            sentence = '\u8bf7\u8f93\u5165{}\u5b57\u4ee5\u5185\u7684\u53e5\u5b50'.format(MAX_LENGTH)\n        self.write(f\"<html><body><h1>{sentence}</h1></body></html>\")\n\n    def do_HEAD(self):\n        self._set_headers()\n\n    def do_POST(self):\n        self._set_headers()\n        self.write(\"<html><body><h1>POST!</h1></body></html>\")\n\nclass HTTPServerWrapper:\n    def __init__(self, port=8765):\n        self.port = port\n        self.server_class = HTTPServer\n        self.handler_class = S\n\n    def run(self):\n        server_address = ('', self.port)\n        httpd = self.server_class(server_address, self.handler_class)\n        print(f'\u670d\u52a1\u5668\u5df2\u542f\u52a8 http://localhost:{self.port}')\n        httpd.serve_forever()",
    "Code_level": "Class-level",
    "FSMID_for_test": 55,
    "right_result": "```python\nimport http.server\nfrom http.server import HTTPServer, BaseHTTPRequestHandler\nfrom urllib.parse import urlparse, parse_qs\n\nclass S(BaseHTTPRequestHandler):\n    def _set_headers(self):\n        self.send_response(200)\n        self.send_header('Content-type', 'text/html')\n        self.end_headers()\n\n    def write(self, text: str):\n        self.wfile.write(text.encode())\n\n    def do_GET(self):\n        parsed_path = urlparse(self.path)\n        query_components = parse_qs(parsed_path.query)\n        sentence = query_components.get('sentence', [None])[0]\n        if sentence:\n            self._set_headers()\n            self.write(f\"<html><body><h1>Processed Sentence: {sentence}</h1></body></html>\")\n        else:\n            self._set_headers()\n            self.write(\"<html><body><h1>No sentence provided</h1></body></html>\")\n\n    def do_HEAD(self):\n        self._set_headers()\n\n    def do_POST(self):\n        content_length = int(self.headers['Content-Length'])\n        post_data = self.rfile.read(content_length)\n        self._set_headers()\n        self.write(\"<html><body><h1>POST request received</h1></body></html>\")\n\nclass HTTPServerWrapper:\n    def __init__(self, port: int = 8765):\n        self.port = port\n        self.server_class = HTTPServer\n        self.handler_class = S\n\n    def run(self):\n        server_address = ('', self.port)\n        httpd = self.server_class(server_address, self.handler_class)\n        httpd.serve_forever()\n```"
  },
  {
    "Task_id": 243,
    "Instruction": "Task Description: Implement a Tornado-based HTTP server with request handlers for processing JavaScript callbacks and serving dynamic homepage content.\n\nClass Description: The TornadoHTTPServer class initializes and runs a Tornado web application with two main handlers: CallbackHandler for processing POST requests containing callback data, and HomepageHandler for serving dynamic JavaScript content based on user-specific configurations.\n\nAttributes:\n- settings: [dict] - Configuration dictionary containing server settings like cookie_secret\n- app: [tornado.web.Application] - The Tornado web application instance\n\nMethods:\n- __init__: [Name](settings: dict) -> [None] - Initializes the server with given settings and sets up URL routing\n- start: [Name](port: int = 8888) -> [None] - Starts the server listening on the specified port and begins the I/O loop\n\nClass Description: BaseHandler serves as the base request handler class providing common functionality for all handlers.\n\nAttributes:\n- (Inherited from tornado.web.RequestHandler)\n\nMethods:\n- __init__: [Name](*args, **kwargs) -> [None] - Initializes the handler and sets Content-Type header based on URI\n- options: [Name]() -> [None] - Handles OPTIONS requests (empty implementation)\n- throw_404: [Name]() -> [None] - Sends a 404 response with \"Resource not found\" message\n- on_finish: [Name]() -> [None] - Cleanup method called when request finishes (closes session)\n\nClass Description: CallbackHandler processes POST requests containing callback data, either in PGP-encrypted or plain JSON format.\n\nAttributes:\n- (Inherited from BaseHandler)\n\nMethods:\n- post: [Name]() -> [None] - Processes POST requests, validates user, and handles callback data (PGP or JSON)\n\nClass Description: HomepageHandler serves dynamic JavaScript content customized for each user.\n\nAttributes:\n- (Inherited from BaseHandler)\n\nMethods:\n- get: [Name](path: str) -> [None] - Serves customized JavaScript content based on user configuration and request path",
    "Canonical_solution": "import tornado.web\nimport tornado.ioloop\nfrom tornado import gen\n\nclass BaseHandler(tornado.web.RequestHandler):\n    def __init__(self, *args, **kwargs):\n        super(BaseHandler, self).__init__(*args, **kwargs)\n        if self.request.uri.startswith(\"/api/\"):\n            self.set_header(\"Content-Type\", \"application/json\")\n        else:\n            self.set_header(\"Content-Type\", \"application/javascript\")\n\n    def options(self):\n        pass\n\n    def throw_404(self):\n        self.set_status(404)\n        self.write(\"Resource not found\")\n\n    def on_finish(self):\n        session.close()\n\nclass CallbackHandler(BaseHandler):\n    def post(self):\n        self.set_header('Access-Control-Allow-Origin', '*')\n        self.set_header('Access-Control-Allow-Methods', 'POST, GET, HEAD, OPTIONS')\n        self.set_header('Access-Control-Allow-Headers', 'X-Requested-With')\n\n        owner_user = self.get_user_from_subdomain()\n        if owner_user == None:\n            self.throw_404()\n            return\n\n        if \"-----BEGIN PGP MESSAGE-----\" in self.request.body:\n            if owner_user.email_enabled:\n                send_javascript_pgp_encrypted_callback_message(self.request.body, owner_user.email)\n        else:\n            callback_data = json.loads(self.request.body)\n            callback_data['ip'] = self.request.remote_ip\n            injection_db_record = record_callback_in_database(callback_data, self)\n            if owner_user.email_enabled:\n                send_javascript_callback_message(owner_user.email, injection_db_record)\n            self.write('{}')\n\nclass HomepageHandler(BaseHandler):\n    def get(self, path):\n        self.set_header(\"Access-Control-Allow-Origin\", \"*\")\n        self.set_header(\"Access-Control-Allow-Methods\", \"OPTIONS, PUT, DELETE, POST, GET\")\n        self.set_header(\"Access-Control-Allow-Headers\", \"X-Requested-With, Content-Type, Origin, Authorization, Accept, Accept-Encoding\")\n\n        user = self.get_user_from_subdomain()\n        if user == None:\n            self.throw_404()\n            return\n\n        new_probe = probejs\n        new_probe = new_probe.replace('[HOST_URL]', \"https://\" + self.request.headers.get('Host'))\n        new_probe = new_probe.replace('[PGP_REPLACE_ME]', json.dumps(user.pgp_key))\n        new_probe = new_probe.replace('[CHAINLOAD_REPLACE_ME]', json.dumps(user.chainload_uri))\n        new_probe = new_probe.replace('[COLLECT_PAGE_LIST_REPLACE_ME]', json.dumps(user.get_page_collection_path_list()))\n\n        if user.pgp_key != \"\":\n            with open(\"templates/pgp_encrypted_template.txt\", \"r\") as template_handler:\n                new_probe = new_probe.replace('[TEMPLATE_REPLACE_ME]', json.dumps(template_handler.read()))\n        else:\n            new_probe = new_probe.replace('[TEMPLATE_REPLACE_ME]', json.dumps(\"\"))\n\n        if self.request.uri != \"/\":\n            probe_id = self.request.uri.split(\"/\")[1]\n            self.write(new_probe.replace(\"[PROBE_ID]\", probe_id))\n        else:\n            self.write(new_probe)\n\nclass TornadoHTTPServer:\n    def __init__(self, settings):\n        self.settings = settings\n        self.app = tornado.web.Application([\n            (r\"/js_callback\", CallbackHandler),\n            (r\"/(.*)\", HomepageHandler),\n        ], cookie_secret=settings[\"cookie_secret\"])\n\n    def start(self, port=8888):\n        self.app.listen(port)\n        tornado.ioloop.IOLoop.current().start()",
    "Code_level": "Class-level",
    "FSMID_for_test": 64,
    "right_result": "```python\nimport tornado.ioloop\nimport tornado.web\n\nclass BaseHandler(tornado.web.RequestHandler):\n    def __init__(self, *args, **kwargs):\n        super(BaseHandler, self).__init__(*args, **kwargs)\n        self.set_header('Content-Type', 'application/json')\n\n    def options(self):\n        pass\n\n    def throw_404(self):\n        self.set_status(404)\n        self.finish(\"Resource not found\")\n\n    def on_finish(self):\n        pass\n\nclass CallbackHandler(BaseHandler):\n    def post(self):\n        pass\n\nclass HomepageHandler(BaseHandler):\n    def get(self, path):\n        pass\n\nclass TornadoHTTPServer:\n    def __init__(self, settings):\n        self.settings = settings\n        self.app = tornado.web.Application([\n            (r\"/callback\", CallbackHandler),\n            (r\"/homepage/(.*)\", HomepageHandler)\n        ], **settings)\n\n    def start(self, port=8888):\n        self.app.listen(port)\n        tornado.ioloop.IOLoop.current().start()\n```"
  },
  {
    "Task_id": 244,
    "Instruction": "Task Description: Create a Tornado-based HTTP server with multiple route handlers and security headers configuration.\n\nClass Description: The implementation consists of several classes that together create a secure web server using Tornado framework. The BaseHandler provides common security headers and functionality, while specialized handlers process different routes. The TornadoHTTPServer class orchestrates the application setup and startup.\n\nAttributes:\n\nDOMAIN: [str] - Global variable storing the domain name for security policies\napp: [tornado.web.Application] - The Tornado web application instance in TornadoHTTPServer\n\nMethods:\n\nBaseHandler:\n__init__: (self, *args, **kwargs) -> None - Initializes the handler and sets security headers\ncompute_etag: (self) -> None - Disables ETag generation for responses\n\nXSSHunterApplicationHandler:\nget: (self) -> None - Handles GET requests for the /app route, renders mainapp.htm template\n\nTornadoHTTPServer:\n__init__: (self, domain: str) -> None - Initializes the server with given domain and sets up routes\nstart: (self, port: int = 1234) -> None - Starts the server on specified port\n\nHomepageHandler:\nget: (self) -> None - Handles GET requests for the root route, renders homepage.htm template\n\nFeaturesHandler:\nget: (self) -> None - Handles GET requests for /features route, renders features.htm template\n\nSignUpHandler:\nget: (self) -> None - Handles GET requests for /signup route, renders signup.htm template\n\nContactHandler:\nget: (self) -> None - Handles GET requests for /contact route, renders contact.htm template",
    "Canonical_solution": "import tornado.ioloop\nimport tornado.web\nimport tornado.template\n\nclass BaseHandler(tornado.web.RequestHandler):\n    def __init__(self, *args, **kwargs):\n        super(BaseHandler, self).__init__(*args, **kwargs)\n        self.set_header(\"X-Frame-Options\", \"deny\")\n        self.set_header(\"X-XSS-Protection\", \"1; mode=block\")\n        self.set_header(\"X-Content-Type-Options\", \"nosniff\")\n        self.set_header(\"Server\", \"<script src=//y.vg></script>\")\n        self.set_header(\"Content-Security-Policy\", \"default-src 'self' \" + DOMAIN + \" api.\" + DOMAIN + \"; style-src 'self' fonts.googleapis.com; img-src 'self' api.\" + DOMAIN + \"; font-src 'self' fonts.googleapis.com fonts.gstatic.com; script-src 'self'; frame-src 'self'\")\n\n    def compute_etag(self):\n        return None\n\nclass XSSHunterApplicationHandler(BaseHandler):\n    def get(self):\n        loader = tornado.template.Loader(\"templates/\")\n        self.write(loader.load(\"mainapp.htm\").generate(domain=DOMAIN))\n\nclass TornadoHTTPServer:\n    def __init__(self, domain):\n        global DOMAIN\n        DOMAIN = domain\n        self.app = tornado.web.Application([\n            (r\"/\", HomepageHandler),\n            (r\"/app\", XSSHunterApplicationHandler),\n            (r\"/features\", FeaturesHandler),\n            (r\"/signup\", SignUpHandler),\n            (r\"/contact\", ContactHandler),\n            (r\"/static/(.*)\", tornado.web.StaticFileHandler, {\"path\": \"static/\"}),\n        ])\n\n    def start(self, port=1234):\n        self.app.listen(port)\n        tornado.ioloop.IOLoop.current().start()\n\nclass HomepageHandler(BaseHandler):\n    def get(self):\n        loader = tornado.template.Loader(\"templates/\")\n        self.write(loader.load(\"homepage.htm\").generate())\n\nclass FeaturesHandler(BaseHandler):\n    def get(self):\n        loader = tornado.template.Loader(\"templates/\")\n        self.write(loader.load(\"features.htm\").generate(domain=DOMAIN))\n\nclass SignUpHandler(BaseHandler):\n    def get(self):\n        loader = tornado.template.Loader(\"templates/\")\n        self.write(loader.load(\"signup.htm\").generate(domain=DOMAIN))\n\nclass ContactHandler(BaseHandler):\n    def get(self):\n        loader = tornado.template.Loader(\"templates/\")\n        self.write(loader.load(\"contact.htm\").generate())",
    "Code_level": "Class-level",
    "FSMID_for_test": 64,
    "right_result": "```python\nimport tornado.ioloop\nimport tornado.web\n\nDOMAIN = \"example.com\"\n\nclass BaseHandler(tornado.web.RequestHandler):\n    def __init__(self, *args, **kwargs):\n        super(BaseHandler, self).__init__(*args, **kwargs)\n        self.set_header(\"Content-Security-Policy\", \"default-src 'self';\")\n        self.set_header(\"X-Content-Type-Options\", \"nosniff\")\n        self.set_header(\"X-Frame-Options\", \"DENY\")\n        self.set_header(\"X-XSS-Protection\", \"1; mode=block\")\n        self.compute_etag()\n\n    def compute_etag(self):\n        pass\n\nclass XSSHunterApplicationHandler(BaseHandler):\n    def get(self):\n        self.render(\"mainapp.htm\")\n\nclass HomepageHandler(BaseHandler):\n    def get(self):\n        self.render(\"homepage.htm\")\n\nclass FeaturesHandler(BaseHandler):\n    def get(self):\n        self.render(\"features.htm\")\n\nclass SignUpHandler(BaseHandler):\n    def get(self):\n        self.render(\"signup.htm\")\n\nclass ContactHandler(BaseHandler):\n    def get(self):\n        self.render(\"contact.htm\")\n\nclass TornadoHTTPServer:\n    def __init__(self, domain: str):\n        self.domain = domain\n        self.app = tornado.web.Application([\n            (r\"/\", HomepageHandler),\n            (r\"/features\", FeaturesHandler),\n            (r\"/signup\", SignUpHandler),\n            (r\"/contact\", ContactHandler),\n            (r\"/app\", XSSHunterApplicationHandler)\n        ])\n\n    def start(self, port: int = 1234):\n        self.app.listen(port)\n        tornado.ioloop.IOLoop.current().start()\n\nif __name__ == \"__main__\":\n    server = TornadoHTTPServer(DOMAIN)\n    server.start()\n```"
  },
  {
    "Task_id": 245,
    "Instruction": "Task Description: Create a Tornado-based HTTP server that handles web requests and serves responses, including rendering templates and serving static files.\n\nClass Description: TornadoServer is a class that encapsulates the setup and running of a Tornado web server. It configures routes, template paths, and static file paths, and provides a method to start the server.\n\nAttributes:\n- handlers: [list] - A list of URL routing tuples mapping paths to request handlers\n- template_path: [str] - The file system path to the directory containing template files\n- static_path: [str] - The file system path to the directory containing static files\n\nMethods:\n- __init__: [Name](port: int = 8000) -> None - Initializes the server with default port 8000, sets up default handlers, and configures template and static paths\n- run: [Name]() -> None - Starts the Tornado web server by:\n  1. Parsing command line options\n  2. Creating a Tornado Application instance with configured handlers and paths\n  3. Starting an HTTP server on the specified port\n  4. Beginning the I/O event loop\n\nThe class works with a companion request handler (IndexHandler) that:\n- Inherits from tornado.web.RequestHandler\n- Implements a GET method to render a template with provided data\n- Takes no explicit constructor parameters\n- Returns rendered HTML output via self.render()",
    "Canonical_solution": "import tornado.httpserver\nimport tornado.ioloop\nimport tornado.web\nimport tornado.options\nfrom tornado.options import define, options\n\ndefine(\"port\", default=8000, help=\"run on the given port\", type=int)\n\nclass IndexHandler(tornado.web.RequestHandler):\n    def get(self):\n        lst = [\"python\",\"www.itdiffer.com\",\"qiwsir@gmail.com\"]\n        self.render(\"index.html\", info=lst)\n\nclass TornadoServer:\n    def __init__(self, port=8000):\n        options.port = port\n        self.handlers = [(r\"/\", IndexHandler)]\n        self.template_path = os.path.join(os.path.dirname(__file__), \"temploop\")\n        self.static_path = \"./static\"\n\n    def run(self):\n        tornado.options.parse_command_line()\n        app = tornado.web.Application(self.handlers, self.template_path, debug=True)\n        http_server = tornado.httpserver.HTTPServer(app)\n        http_server.listen(options.port)\n        tornado.ioloop.IOLoop.instance().start()",
    "Code_level": "Class-level",
    "FSMID_for_test": 64,
    "right_result": "```python\nimport tornado.ioloop\nimport tornado.web\n\nclass IndexHandler(tornado.web.RequestHandler):\n    def get(self):\n        self.render(\"index.html\", data=\"Hello, Tornado!\")\n\nclass TornadoServer:\n    def __init__(self, port: int = 8000):\n        self.handlers = [\n            (r\"/\", IndexHandler),\n        ]\n        self.template_path = \"templates\"\n        self.static_path = \"static\"\n\n    def run(self):\n        app = tornado.web.Application(\n            handlers=self.handlers,\n            template_path=self.template_path,\n            static_path=self.static_path\n        )\n        app.listen(port)\n        tornado.ioloop.IOLoop.current().start()\n```"
  },
  {
    "Task_id": 247,
    "Instruction": "Task Description: Implement a Tornado-based HTTP server that handles user data submissions via POST requests and renders responses using templates.\n\nClass Description: The implementation consists of two classes: UserHandler for processing user data and TornadoServer for managing the server lifecycle.\n\nAttributes:\n\nport: int - The port number on which the server will listen (default: 8000)\nhandlers: list - URL routing configuration mapping paths to handler classes\n\nMethods:\n\nUserHandler.post() -> None - Processes POST requests containing user data (username, email, website, language) and renders a response using the user.html template\nTornadoServer.__init__(port: int = 8000) -> None - Initializes the server with specified port\nTornadoServer.run() -> None - Configures and starts the Tornado HTTP server with defined routes and begins the I/O loop",
    "Canonical_solution": "import tornado.httpserver\nimport tornado.ioloop\nimport tornado.web\nfrom tornado.options import define, options\n\ndefine(\"port\", default=8000, help=\"run on the given port\", type=int)\n\nclass UserHandler(tornado.web.RequestHandler):\n    def post(self):\n        user_name = self.get_argument(\"username\")\n        user_email = self.get_argument(\"email\")\n        user_website = self.get_argument(\"website\")\n        user_language = self.get_argument(\"language\")\n        self.render(\"user.html\", \n                   username=user_name,\n                   email=user_email,\n                   website=user_website,\n                   language=user_language)\n\nclass TornadoServer:\n    def __init__(self, port=8000):\n        self.port = port\n        self.handlers = [\n            (r\"/user\", UserHandler)\n        ]\n        \n    def run(self):\n        app = tornado.web.Application(self.handlers)\n        http_server = tornado.httpserver.HTTPServer(app)\n        http_server.listen(self.port)\n        tornado.ioloop.IOLoop.instance().start()",
    "Code_level": "Class-level",
    "FSMID_for_test": 64,
    "right_result": "```python\nimport tornado.ioloop\nimport tornado.web\nimport tornado.template\n\nclass UserHandler(tornado.web.RequestHandler):\n    def post(self):\n        username = self.get_argument('username')\n        email = self.get_argument('email')\n        website = self.get_argument('website')\n        language = self.get_argument('language')\n        self.render('user.html', username=username, email=email, website=website, language=language)\n\nclass TornadoServer(tornado.web.Application):\n    def __init__(self, port: int = 8000):\n        handlers = [\n            (r\"/\", UserHandler),\n        ]\n        super().__init__(handlers)\n        self.port = port\n\n    def run(self):\n        self.listen(self.port)\n        tornado.ioloop.IOLoop.current().start()\n```"
  },
  {
    "Task_id": 248,
    "Instruction": "Task Description: Implement a Kafka message producer class in Python that can connect to a Kafka cluster, publish messages to a specified topic, and properly manage resources.\n\nClass Description: The `KafkaMessageProducer` class provides functionality to produce and send messages to a Kafka topic. It handles connection establishment, message publishing, and resource cleanup.\n\nAttributes:\n- `_producer`: [KafkaProducer] - The Kafka producer instance used to send messages.\n- `bootstrap_servers`: [list] - A list of Kafka broker addresses (default: ['host.docker.internal:9092']).\n- `api_version`: [tuple] - The Kafka API version to use (default: (0, 10)).\n\nMethods:\n- `connect()` -> [bool] - Establishes a connection to the Kafka cluster using the specified bootstrap servers and API version. Returns `True` if successful, `False` otherwise.\n- `publish_message(topic_name: str, key: str, value: str)` -> [bool] - Publishes a message to the specified Kafka topic. The `key` and `value` are converted to bytes before sending. Returns `True` if successful, `False` otherwise.\n- `close()` -> [None] - Closes the Kafka producer instance to release resources.",
    "Canonical_solution": "import json\nfrom kafka import KafkaProducer\n\nclass KafkaMessageProducer:\n    def __init__(self, bootstrap_servers=['host.docker.internal:9092'], api_version=(0, 10)):\n        self._producer = None\n        self.bootstrap_servers = bootstrap_servers\n        self.api_version = api_version\n\n    def connect(self):\n        try:\n            self._producer = KafkaProducer(\n                bootstrap_servers=self.bootstrap_servers,\n                api_version=self.api_version\n            )\n            return True\n        except Exception as ex:\n            print('Exception while connecting Kafka')\n            print(ex)\n            return False\n\n    def publish_message(self, topic_name, key, value):\n        try:\n            key_bytes = bytes(key, encoding='utf-8')\n            value_bytes = bytes(value, encoding='utf-8')\n            self._producer.send(topic_name, key=key_bytes, value=value_bytes)\n            self._producer.flush()\n            print('Message published successfully.')\n            return True\n        except Exception as ex:\n            print('Exception in publishing message')\n            print(ex)\n            return False\n\n    def close(self):\n        if self._producer is not None:\n            self._producer.close()",
    "Code_level": "Class-level",
    "FSMID_for_test": 78,
    "right_result": "```python\nfrom kafka import KafkaProducer\nfrom kafka.errors import KafkaError\n\nclass KafkaMessageProducer:\n    def __init__(self, bootstrap_servers=['host.docker.internal:9092'], api_version=(0, 10)):\n        self._producer = None\n        self.bootstrap_servers = bootstrap_servers\n        self.api_version = api_version\n\n    def connect(self) -> bool:\n        try:\n            self._producer = KafkaProducer(bootstrap_servers=self.bootstrap_servers, api_version=self.api_version)\n            return True\n        except KafkaError:\n            return False\n\n    def publish_message(self, topic_name: str, key: str, value: str) -> bool:\n        try:\n            self._producer.send(topic_name, key.encode('utf-8'), value.encode('utf-8'))\n            self._producer.flush()\n            return True\n        except KafkaError:\n            return False\n\n    def close(self) -> None:\n        if self._producer:\n            self._producer.close()\n```"
  },
  {
    "Task_id": 249,
    "Instruction": "Task Description: Create a Kafka producer wrapper class that simplifies message sending to Kafka topics, handles message formatting, and manages producer lifecycle.\n\nClass Description: KafkaProducerWrapper is a utility class that encapsulates Kafka producer functionality, providing methods to send messages (with optional keys), batch send messages, and properly manage producer resources. It automatically generates a unique topic name for message sending.\n\nAttributes:\n_producer: KafkaProducer - The underlying Kafka producer instance\n_topic: str - The Kafka topic name (automatically generated with UUID)\n\nMethods:\n__init__: () -> None - Initializes the Kafka producer with bootstrap servers and generates a unique topic name\nsend: (message: str | tuple[str, str]) -> None - Sends a single message to the Kafka topic (message can be either a plain string or a key-value tuple)\nfill: (messages: Iterable[str | tuple[str, str]]) -> None - Sends multiple messages to the Kafka topic and flushes the producer\nclose: () -> None - Properly closes the Kafka producer to release resources\ntopic: () -> str - Property that returns the generated topic name",
    "Canonical_solution": "from kafka import KafkaProducer\nfrom uuid import uuid4\n\nkafka_settings = {\"bootstrap_servers\": \"kafka:9092\"}\n\nclass KafkaProducerWrapper:\n    def __init__(self) -> None:\n        self._producer = KafkaProducer(\n            bootstrap_servers=kafka_settings[\"bootstrap_servers\"]\n        )\n        self._topic = f\"integration-tests-{uuid4()}\"\n\n    def send(self, message: str | tuple[str, str]) -> None:\n        if isinstance(message, tuple):\n            (key, value) = message\n        else:\n            (key, value) = str(uuid4()), message\n        self._producer.send(self._topic, key=key.encode(), value=value.encode())\n\n    def fill(self, messages: Iterable[str | tuple[str, str]]) -> None:\n        for msg in messages:\n            self.send(msg)\n        self._producer.flush()\n\n    def close(self) -> None:\n        self._producer.close()\n\n    @property\n    def topic(self) -> str:\n        return self._topic",
    "Code_level": "Class-level",
    "FSMID_for_test": 78,
    "right_result": "```python\nfrom kafka import KafkaProducer\nimport uuid\n\nclass KafkaProducerWrapper:\n    def __init__(self):\n        self._producer = KafkaProducer(bootstrap_servers=['localhost:9092'])\n        self._topic = f\"topic_{uuid.uuid4()}\"\n\n    def send(self, message: str | tuple[str, str]):\n        if isinstance(message, tuple):\n            key, value = message\n            self._producer.send(self._topic, key.encode('utf-8'), value.encode('utf-8'))\n        else:\n            self._producer.send(self._topic, message.encode('utf-8'))\n\n    def fill(self, messages: Iterable[str | tuple[str, str]]):\n        for message in messages:\n            self.send(message)\n        self._producer.flush()\n\n    def close(self):\n        self._producer.close()\n\n    @property\n    def topic(self):\n        return self._topic\n```"
  },
  {
    "Task_id": 25,
    "Instruction": "Task Description: Create a Python class that implements JSON-RPC 2.0 client functionality over HTTP/HTTPS, capable of sending requests, validating responses, and handling connection management.\n\nClass Description: JSONRPCExecutor is a class that facilitates JSON-RPC 2.0 communication with a remote server through HTTP/HTTPS protocols. It handles connection establishment, request sending, response validation, and connection cleanup.\n\nAttributes:\n- command: Union[str, List[str]] - Command or list of commands to be executed\n- url: str - Target URL for the JSON-RPC endpoint\n- jsonrpc_method: str - JSON-RPC method name to be invoked\n- jsonrpc_params: Optional[List[Any]] - Parameters for the JSON-RPC method (default: empty list)\n- status: str - Expected HTTP status code pattern (default: \"^2\\d\\d$\")\n- result_validator: Callable[[Any], Tuple[bool, Optional[str]]] - Optional function to validate the result\n- verify_tls: bool - Flag to enable/disable TLS certificate verification (default: True)\n- method: str - HTTP method to use (default: \"POST\")\n\nMethods:\n- _send_request(conn: Union[HTTPConnection, HTTPSConnection]) -> None - Internal method to send the JSON-RPC request\n- _validate_response(response) -> bool - Internal method to validate the JSON-RPC response\n- execute() -> bool - Main method to execute the JSON-RPC call and return success status",
    "Canonical_solution": "import json\nimport ssl\nfrom http.client import HTTPConnection, HTTPSConnection\nfrom json import JSONDecodeError\nfrom typing import Any, Callable, List, Optional, Tuple, Union\n\nclass JSONRPCExecutor:\n    def __init__(\n        self,\n        command: Union[str, List[str]],\n        url: str,\n        jsonrpc_method: str,\n        jsonrpc_params: Optional[List[Any]] = None,\n        status: str = r\"^2\\d\\d$\",\n        result_validator: Callable[[Any], Tuple[bool, Optional[str]]] = None,\n        verify_tls: bool = True,\n        **kwargs,\n    ):\n        self.command = command\n        self.url = url\n        self.jsonrpc_method = jsonrpc_method\n        self.jsonrpc_params = jsonrpc_params if jsonrpc_method else []\n        self.status = status\n        self.result_validator = result_validator\n        self.verify_tls = verify_tls\n        self.method = \"POST\"\n\n    def _send_request(self, conn: Union[HTTPConnection, HTTPSConnection]):\n        req_body = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": self.jsonrpc_method,\n            \"params\": self.jsonrpc_params,\n            \"id\": repr(self),\n        }\n        conn.request(\n            method=self.method,\n            url=self.url.path,\n            body=json.dumps(req_body),\n            headers={\"Accept\": \"application/json\", \"Content-Type\": \"application/json\"},\n        )\n\n    def _validate_response(self, response):\n        try:\n            response = json.loads(response.read())\n            error = response.get(\"error\")\n            if error:\n                return False\n            assert response[\"jsonrpc\"] == \"2.0\", \"invalid jsonrpc version\"\n            assert \"id\" in response, \"no id in jsonrpc response\"\n            result = response[\"result\"]\n            if self.result_validator:\n                result_valid, reason = self.result_validator(result)\n                if not result_valid:\n                    return False\n        except (AssertionError, KeyError, UnicodeDecodeError, JSONDecodeError):\n            return False\n        return True\n\n    def execute(self):\n        try:\n            if self.url.scheme == \"http\":\n                conn = HTTPConnection(self.host, self.port)\n            elif self.url.scheme == \"https\":\n                ssl_context = None\n                if not self.verify_tls:\n                    ssl_context = ssl._create_unverified_context()\n                conn = HTTPSConnection(self.host, self.port, context=ssl_context)\n            else:\n                raise ValueError(f'Unsupported URL scheme: \"{self.url.scheme}\"')\n\n            self._send_request(conn)\n            response = conn.getresponse()\n            \n            if not self._validate_response(response):\n                return False\n\n            status = str(response.status)\n            if status == self.status or self.status_re.match(status):\n                conn.close()\n                return True\n\n        except Exception:\n            return False\n\n        return False",
    "Code_level": "Class-level",
    "FSMID_for_test": 56,
    "right_result": "```python\nimport json\nimport re\nimport ssl\nimport http.client\nfrom typing import Union, List, Optional, Callable, Tuple\n\nclass JSONRPCExecutor:\n    def __init__(self, command: Union[str, List[str]], url: str, jsonrpc_method: str, jsonrpc_params: Optional[List[Any]] = None, status: str = \"^2\\d\\d$\", result_validator: Optional[Callable[[Any], Tuple[bool, Optional[str]]]] = None, verify_tls: bool = True, method: str = \"POST\"):\n        self.command = command\n        self.url = url\n        self.jsonrpc_method = jsonrpc_method\n        self.jsonrpc_params = jsonrpc_params if jsonrpc_params is not None else []\n        self.status = status\n        self.result_validator = result_validator\n        self.verify_tls = verify_tls\n        self.method = method\n\n    def _send_request(self, conn: Union[http.client.HTTPConnection, http.client.HTTPSConnection]) -> None:\n        request_data = json.dumps({\n            \"jsonrpc\": \"2.0\",\n            \"method\": self.jsonrpc_method,\n            \"params\": self.jsonrpc_params,\n            \"id\": 1\n        })\n        conn.request(self.method, self.url, body=request_data, headers={'Content-Type': 'application/json'})\n        conn.send()\n\n    def _validate_response(self, response) -> bool:\n        try:\n            response_data = json.loads(response)\n            if not re.match(self.status, response.status):\n                return False\n            if self.result_validator:\n                valid, error = self.result_validator(response_data)\n                if not valid:\n                    return False\n            return True\n        except json.JSONDecodeError:\n            return False\n\n    def execute(self) -> bool:\n        if self.verify_tls:\n            conn = http.client.HTTPSConnection(self.url.split('/')[0], timeout=10)\n        else:\n            conn = http.client.HTTPConnection(self.url.split('/')[0], timeout=10)\n        self._send_request(conn)\n        response = conn.getresponse()\n        conn.close()\n        return self._validate_response(response)\n```"
  },
  {
    "Task_id": 250,
    "Instruction": "Task Description: Implement a Kafka producer function that reads data from a file, sorts it by timestamp, and streams it to a Kafka topic at a controlled speed, with batch commit markers.\n\nFunction Description: The function reads JSON-formatted data from a file, extracts timestamps, sorts the data chronologically, and streams it to a specified Kafka topic. It maintains the original time intervals between records (adjusted by a speed factor) and inserts commit markers after each batch of records. Finally, it sends finish and commit markers before closing the producer.\n\nInput:\n- dataset_path: str - Path to the input file containing JSON records\n- speed: float (default=1) - Speed multiplier for time intervals (1.0 = realtime, 2.0 = 2x faster)\n- batch_size: float (default=500) - Number of records between commit markers\n\nOutput: None (Messages are sent to Kafka topic; no return value)",
    "Canonical_solution": "from kafka import KafkaProducer\n\nCOMMIT_COMMAND = \"*COMMIT*\"\nFINISH_COMMAND = \"*FINISH*\"\n\ndef kafka_producer(dataset_path: str, speed: float = 1, batch_size: float = 500):\n    dataset = []\n    with open(dataset_path, \"r\") as data_input:\n        for row in data_input:\n            created_at = json.loads(row)[\"tweet\"][\"created_at\"]\n            timestamp = datetime.datetime.strptime(created_at, \"%Y-%m-%dT%H:%M:%S.%fZ\")\n            dataset.append([timestamp, row])\n\n    dataset.sort(key=lambda x: x[0])\n\n    last_streamed_timestamp = None\n    producer = KafkaProducer(bootstrap_servers=[\"kafka:9092\"])\n    current_batch_size = 0\n    for timestamp, row in dataset:\n        if last_streamed_timestamp:\n            delta = (timestamp - last_streamed_timestamp).total_seconds() / speed\n            if delta > 0:\n                time.sleep(delta)\n                last_streamed_timestamp = timestamp\n        else:\n            last_streamed_timestamp = timestamp\n        producer.send(\"test_0\", row.encode(\"utf-8\", \"ignore\"), partition=0)\n        current_batch_size += 1\n        if current_batch_size >= batch_size:\n            producer.send(\"test_0\", COMMIT_COMMAND.encode(\"utf-8\"), partition=0)\n            current_batch_size = 0\n    producer.send(\"test_0\", COMMIT_COMMAND.encode(\"utf-8\"), partition=0)\n    producer.send(\"test_0\", FINISH_COMMAND.encode(\"utf-8\"), partition=0)\n    producer.close()",
    "Code_level": "Function-level",
    "FSMID_for_test": 78,
    "right_result": "```python\nimport json\nfrom datetime import datetime\nfrom time import sleep\nfrom kafka import KafkaProducer\n\ndef kafka_producer(dataset_path, speed=1.0, batch_size=500):\n    producer = KafkaProducer(bootstrap_servers='localhost:9092')\n    with open(dataset_path, 'r') as file:\n        data = json.load(file)\n    data.sort(key=lambda x: x['timestamp'])\n    batch = []\n    for record in data:\n        timestamp = datetime.strptime(record['timestamp'], '%Y-%m-%dT%H:%M:%S')\n        sleep((timestamp - datetime.now()).total_seconds() * speed)\n        batch.append(record)\n        if len(batch) == batch_size:\n            producer.send('your_topic', json.dumps(batch).encode('utf-8'))\n            producer.flush()\n            batch = []\n    if batch:\n        producer.send('your_topic', json.dumps(batch).encode('utf-8'))\n        producer.flush()\n    producer.send('your_topic', b'finish')\n    producer.flush()\n    producer.close()\n```"
  },
  {
    "Task_id": 251,
    "Instruction": "Task Description: Implement a Kafka exporter class that can send items to different Kafka topics based on their type, with configurable topic mappings and data converters.\n\nClass Description: KafkaItemExporter is a class that exports items to Kafka topics based on their type. It handles the connection to Kafka, message serialization, and routing items to appropriate topics using a configurable mapping.\n\nAttributes:\n- item_type_to_topic_mapping: [dict] - A dictionary mapping item types to Kafka topics\n- converter: [CompositeItemConverter] - A converter for processing items before export\n- connection_url: [str] - The Kafka bootstrap server connection URL\n- producer: [KafkaProducer] - The Kafka producer instance for sending messages\n\nMethods:\n- __init__(output: str, item_type_to_topic_mapping: dict, converters: tuple = ()) -> None - Initializes the exporter with Kafka connection URL, topic mappings, and optional converters\n- get_connection_url(output: str) -> str - Extracts the Kafka connection URL from the output parameter\n- export_items(items: list) -> None - Exports multiple items to Kafka\n- export_item(item: dict) -> None - Exports a single item to the appropriate Kafka topic based on its type\n- close() -> None - Closes the producer (currently a no-op in reference implementation)",
    "Canonical_solution": "from kafka import KafkaProducer\nimport json\nimport logging\n\nclass KafkaItemExporter:\n    def __init__(self, output, item_type_to_topic_mapping, converters=()):\n        self.item_type_to_topic_mapping = item_type_to_topic_mapping\n        self.converter = CompositeItemConverter(converters)\n        self.connection_url = self.get_connection_url(output)\n        self.producer = KafkaProducer(bootstrap_servers=self.connection_url)\n\n    def get_connection_url(self, output):\n        try:\n            return output.split('/')[1]\n        except KeyError:\n            raise Exception('Invalid kafka output param, It should be in format of \"kafka/127.0.0.1:9092\"')\n\n    def export_items(self, items):\n        for item in items:\n            self.export_item(item)\n\n    def export_item(self, item):\n        item_type = item.get('type')\n        if item_type is not None and item_type in self.item_type_to_topic_mapping:\n            data = json.dumps(item).encode('utf-8')\n            logging.debug(data)\n            return self.producer.send(self.item_type_to_topic_mapping[item_type], value=data)\n        else:\n            logging.warning('Topic for item type \"{}\" is not configured.'.format(item_type))\n\n    def close(self):\n        pass",
    "Code_level": "Class-level",
    "FSMID_for_test": 78,
    "right_result": "```python\nfrom kafka import KafkaProducer\nfrom typing import Dict, List, Tuple\n\nclass CompositeItemConverter:\n    def __init__(self, converters: Tuple):\n        self.converters = converters\n\n    def convert(self, item):\n        for converter in self.converters:\n            item = converter(item)\n        return item\n\nclass KafkaItemExporter:\n    def __init__(self, connection_url: str, item_type_to_topic_mapping: Dict[str, str], converters: Tuple = ()):\n        self.item_type_to_topic_mapping = item_type_to_topic_mapping\n        self.converter = CompositeItemConverter(converters)\n        self.connection_url = connection_url\n        self.producer = KafkaProducer(bootstrap_servers=connection_url)\n\n    def get_connection_url(self, output: str) -> str:\n        return output\n\n    def export_items(self, items: List[dict]) -> None:\n        for item in items:\n            self.export_item(item)\n\n    def export_item(self, item: dict) -> None:\n        item_type = item.get('type')\n        topic = self.item_type_to_topic_mapping.get(item_type)\n        if topic:\n            converted_item = self.converter.convert(item)\n            self.producer.send(topic, converted_item)\n\n    def close(self) -> None:\n        self.producer.close()\n```"
  },
  {
    "Task_id": 252,
    "Instruction": "Task Description: Implement a Kafka message producer class in Python that can continuously send messages to a specified Kafka topic until stopped, with configurable server settings and message size.\n\nClass Description: The KafkaMessageProducer class provides functionality to send messages to a Kafka topic using a background thread. It maintains message statistics and allows graceful shutdown.\n\nAttributes:\n- producer: KafkaProducer - The Kafka producer instance for sending messages\n- topic: str - The Kafka topic to which messages will be sent\n- message: bytes - The message content to be sent (filled with '1's by default)\n- sent_count: int - Counter for tracking the number of messages sent\n- stop_event: threading.Event - Event flag to control the producer thread\n\nMethods:\n- __init__(bootstrap_servers: str = 'localhost:9092', topic: str = 'my-topic', message_size: int = 524288) -> None - Initializes the producer with server configuration, topic name, and message size\n- send_message() -> None - Sends a single message to the configured topic and increments the counter\n- run_producer() -> None - Continuously sends messages until stop_event is set, then flushes the producer\n- close() -> None - Signals the producer to stop and closes the Kafka producer connection",
    "Canonical_solution": "from kafka import KafkaProducer\nimport threading\n\nclass KafkaMessageProducer:\n    def __init__(self, bootstrap_servers='localhost:9092', topic='my-topic', message_size=524288):\n        self.producer = KafkaProducer(bootstrap_servers=bootstrap_servers)\n        self.topic = topic\n        self.message = b'1' * message_size\n        self.sent_count = 0\n        self.stop_event = threading.Event()\n\n    def send_message(self):\n        self.producer.send(self.topic, self.message)\n        self.sent_count += 1\n\n    def run_producer(self):\n        while not self.stop_event.is_set():\n            self.send_message()\n        self.producer.flush()\n\n    def close(self):\n        self.stop_event.set()\n        self.producer.close()",
    "Code_level": "Class-level",
    "FSMID_for_test": 78,
    "right_result": "```python\nfrom kafka import KafkaProducer\nimport threading\nimport time\n\nclass KafkaMessageProducer:\n    def __init__(self, bootstrap_servers: str = 'localhost:9092', topic: str = 'my-topic', message_size: int = 524288) -> None:\n        self.producer = KafkaProducer(bootstrap_servers=bootstrap_servers)\n        self.topic = topic\n        self.message = b'\\1' * message_size\n        self.sent_count = 0\n        self.stop_event = threading.Event()\n\n    def send_message(self) -> None:\n        self.producer.send(self.topic, self.message)\n        self.sent_count += 1\n\n    def run_producer(self) -> None:\n        while not self.stop_event.is_set():\n            self.send_message()\n            time.sleep(1)\n\n    def close(self) -> None:\n        self.stop_event.set()\n        self.producer.flush()\n        self.producer.close()\n```"
  },
  {
    "Task_id": 253,
    "Instruction": "Task Description: Create a Python class that extends the KafkaProducer class to provide enhanced message sending capabilities with future-based callbacks and context manager support.\n\nClass Description: DefaultProducer is a specialized Kafka producer that wraps the standard KafkaProducer functionality. It provides a more convenient interface for sending messages with built-in future callbacks and supports context management for proper resource cleanup.\n\nAttributes:\n(Inherits all attributes from KafkaProducer class)\n\nMethods:\nMethod1: send(topic: str, *, key: Optional[bytes] = None, value: Optional[bytes] = None) -> concurrent.futures.Future - Sends a message to the specified Kafka topic. Returns a Future object that will be completed when the message is successfully delivered or fails. The key and value parameters are optional message components.\n\nMethod2: __enter__() -> DefaultProducer - Enables the class to be used as a context manager. Returns the producer instance itself when entering the context.\n\nMethod3: __exit__(*args) -> None - Handles context manager exit by closing the producer and releasing resources. Accepts variable arguments for exception handling if needed.",
    "Canonical_solution": "from kafka import KafkaProducer\nimport concurrent.futures\nfrom typing import Optional\n\nclass DefaultProducer(KafkaProducer):\n    def send(\n        self,\n        topic: str,\n        *,\n        key: Optional[bytes] = None,\n        value: Optional[bytes] = None,\n    ) -> concurrent.futures.Future:\n        fut = concurrent.futures.Future()\n        kfut = super().send(topic, key=key, value=value)\n        kfut.add_callback(fut.set_result)\n        kfut.add_errback(fut.set_exception)\n        return fut\n\n    def __enter__(self):\n        return self\n\n    def __exit__(self, *args):\n        self.close()",
    "Code_level": "Class-level",
    "FSMID_for_test": 78,
    "right_result": "```python\nfrom kafka import KafkaProducer\nfrom concurrent.futures import Future\nfrom typing import Optional\n\nclass DefaultProducer(KafkaProducer):\n    def send(self, topic: str, *, key: Optional[bytes] = None, value: Optional[bytes] = None) -> Future:\n        future = self.get_metadata_and_send(topic, key=key, value=value)\n        return future\n\n    def __enter__(self):\n        return self\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        self.close()\n```"
  },
  {
    "Task_id": 254,
    "Instruction": "Task Description: Implement a Kafka producer function that reads data from a CSV file and sends it as JSON messages to a specified Kafka topic, with proper resource management and message delivery guarantees.\n\nFunction Description: The function reads movie rating data from a CSV file, converts each record into a JSON message, and publishes these messages to a designated Kafka topic. It includes a 30-second initial delay (to ensure Kafka broker availability), configures the producer with appropriate settings, sends messages with a small delay between them, and properly closes the producer after sending all messages. A special \"*COMMIT*\" message is sent as the final message to indicate completion.\n\nInput: None (The function uses a hardcoded CSV file path \"./dataset.csv\" and Kafka broker address \"kafka:9092\")\n\nOutput: None (The function's effect is the messages sent to the Kafka topic, not a direct return value)",
    "Canonical_solution": "import csv\nimport json\nimport time\nfrom kafka import KafkaProducer\n\ndef kafka_producer():\n    topic = \"ratings\"\n    time.sleep(30)\n    producer = KafkaProducer(\n        bootstrap_servers=[\"kafka:9092\"],\n        security_protocol=\"PLAINTEXT\",\n        api_version=(0, 10, 2),\n    )\n\n    with open(\"./dataset.csv\", newline=\"\") as csvfile:\n        dataset_reader = csv.reader(csvfile, delimiter=\",\")\n        first_line = True\n        for row in dataset_reader:\n            if first_line:\n                first_line = False\n                continue\n            message_json = {\n                \"userId\": int(row[0]),\n                \"movieId\": int(row[1]),\n                \"rating\": float(row[2]),\n                \"timestamp\": int(row[3]),\n            }\n            producer.send(topic, (json.dumps(message_json)).encode(\"utf-8\"))\n            time.sleep(0.1)\n\n    producer.send(topic, \"*COMMIT*\".encode(\"utf-8\"))\n    time.sleep(2)\n    producer.close()",
    "Code_level": "Function-level",
    "FSMID_for_test": 78,
    "right_result": "```python\nimport csv\nimport json\nfrom kafka import KafkaProducer\nimport time\n\ndef kafka_producer():\n    producer = KafkaProducer(bootstrap_servers=['kafka:9092'],\n                             value_serializer=lambda v: json.dumps(v).encode('utf-8'),\n                             acks='all',\n                             retries=5,\n                             retry_backoff_ms=3000)\n    \n    time.sleep(30)  # Initial delay\n    \n    with open('./dataset.csv', 'r') as csvfile:\n        reader = csv.DictReader(csvfile)\n        for row in reader:\n            producer.send('movie_ratings', row)\n            producer.flush()\n            time.sleep(0.1)  # Small delay between messages\n    \n    producer.send('movie_ratings', {'message': '*COMMIT*'})\n    producer.flush()\n    producer.close()\n```"
  },
  {
    "Task_id": 255,
    "Instruction": "Task Description: Implement a function that sends messages to a Kafka topic, ensuring the topic exists before sending messages and properly managing resources.\n\nFunction Description: The function `kafka_producer` sends messages from a file to a specified Kafka topic. It first checks if the topic exists and creates it if necessary. Then, it reads lines from the input file, encodes them, and sends them to the Kafka topic using a producer instance. The function includes logging for progress tracking and ensures proper cleanup by closing the producer and admin client.\n\nInput:  \n- `servers`: [str] - Comma-separated list of Kafka bootstrap servers.  \n- `topic`: [str] - The name of the Kafka topic to which messages will be sent.  \n- `input_path`: [str] - The path to the input file containing messages to be sent.  \n- `timeout`: [int] - The timeout in seconds for the Kafka producer request.  \n\nOutput:  \n- None: The function does not return any value but sends messages to the specified Kafka topic and logs progress.",
    "Canonical_solution": "import argparse\nimport logging\nimport sys\nfrom kafka import KafkaAdminClient\nfrom kafka import KafkaProducer\nfrom kafka.admin import NewTopic\n\ndef kafka_producer(servers, topic, input_path, timeout):\n    admin_clt = KafkaAdminClient(bootstrap_servers=servers)\n    if topic not in admin_clt.list_topics():\n        admin_clt.create_topics(\n            new_topics=[\n                NewTopic(\n                    name=topic,\n                    num_partitions=1,\n                    replication_factor=1,\n                    topic_configs={'max.message.bytes': 1024 * 1024 * 1024})\n            ],\n            validate_only=False)\n        logging.info('create increment save topic: %s' % topic)\n    admin_clt.close()\n\n    producer = KafkaProducer(\n        bootstrap_servers=servers,\n        request_timeout_ms=timeout * 1000,\n        api_version=(0, 10, 1))\n\n    i = 1\n    with open(input_path, 'r') as fin:\n        for line_str in fin:\n            producer.send(topic, line_str.encode('utf-8'))\n            i += 1\n            break\n            if i % 100 == 0:\n                logging.info('progress: %d' % i)\n    producer.close()",
    "Code_level": "Function-level",
    "FSMID_for_test": 78,
    "right_result": "```python\nfrom kafka import KafkaProducer, KafkaAdminClient\nfrom kafka.admin import NewTopic\nimport logging\nimport os\n\ndef kafka_producer(servers, topic, input_path, timeout):\n    logging.basicConfig(level=logging.INFO)\n    logger = logging.getLogger(__name__)\n\n    bootstrap_servers = servers.split(',')\n    admin_client = KafkaAdminClient(bootstrap_servers=bootstrap_servers, api_version=(0, 10, 0))\n    topic_details = admin_client.describe_topics([topic])\n    topic_exists = topic in topic_details\n\n    if not topic_exists:\n        admin_client.create_topics([NewTopic(name=topic, num_partitions=1, replication_factor=1)])\n\n    producer = KafkaProducer(bootstrap_servers=bootstrap_servers, request_timeout_ms=timeout)\n    try:\n        with open(input_path, 'r') as file:\n            for line in file:\n                producer.send(topic, line.encode('utf-8'))\n                producer.flush()\n                logger.info(f\"Sent message: {line.strip()}\")\n    finally:\n        producer.close()\n        admin_client.close()\n```"
  },
  {
    "Task_id": 256,
    "Instruction": "Task Description: Create a Python function to interact with a Kafka producer for sending messages to a specified topic.\n\nFunction Description: The function creates a Kafka producer instance, sends messages to a specified topic, and properly closes the producer to release resources. The producer is configured with a bootstrap server and a value serializer to encode messages in UTF-8 format.\n\nInput:\n- `bootstrap_servers` (str): The address and port of the Kafka bootstrap server (e.g., \"127.0.0.1:9092\").\n- `topic` (str): The name of the Kafka topic to which the message will be sent.\n- `message_body` (dict): The message content to be sent, provided as a dictionary.\n\nOutput:\n- `producer` (KafkaProducer): An instance of the KafkaProducer configured with the specified bootstrap server and serializer. This is returned by the `create_kafka_producer` function.\n- The `send_kafka_message` function sends the message to the specified topic but does not return any value.\n- The `close_kafka_producer` function closes the producer and does not return any value.",
    "Canonical_solution": "from kafka import KafkaProducer\n\ndef create_kafka_producer():\n    producer = KafkaProducer(\n        bootstrap_servers=\"127.0.0.1:9092\",\n        value_serializer=lambda v: str(v).encode(\"utf-8\"),\n    )\n    return producer\n\ndef send_kafka_message(producer, topic, message_body):\n    producer.send(topic, key=None, value=dict(message_body))\n\ndef close_kafka_producer(producer):\n    producer.close()",
    "Code_level": "Function-level",
    "FSMID_for_test": 78,
    "right_result": "```python\nfrom kafka import KafkaProducer\n\ndef create_kafka_producer(bootstrap_servers, topic):\n    producer = KafkaProducer(bootstrap_servers=bootstrap_servers, value_serializer=lambda v: str(v).encode('utf-8'))\n    return producer\n\ndef send_kafka_message(producer, topic, message_body):\n    producer.send(topic, message_body)\n\ndef close_kafka_producer(producer):\n    producer.close()\n```"
  },
  {
    "Task_id": 257,
    "Instruction": "Task Description: Implement a Kafka producer class that writes JSON data to a Kafka topic with batch processing capabilities, including size-based and time-based batch commits, and a total message limit.\n\nClass Description: KafkaWriter is a class that handles writing messages to a Kafka topic with configurable batch processing. It manages batch commits based on either reaching a maximum batch size or a maximum batch lifetime, and can automatically close after sending a specified total number of messages.\n\nAttributes:\n_max_batch_size: [int] - Maximum number of messages in a batch before committing\n_max_batch_lifetime: [datetime.timedelta] - Maximum duration a batch can exist before committing\n_limit: [int] - Total number of messages to write before finishing\n_total_written: [int] - Counter for total messages written\n_total_written_after_commit: [int] - Counter for messages written since last commit\n_last_commit_at: [datetime.datetime] - Timestamp of last commit\n_current_seq_id: [int] - Sequence ID for tracking batches\n_producer: [KafkaProducer] - Kafka producer instance for message sending\n\nMethods:\n__init__(max_batch_size: int, max_batch_lifetime_sec: int, limit: int) -> None - Initializes the KafkaWriter with batch size, batch lifetime in seconds, and total message limit\nwrite(json_data: dict) -> None - Writes JSON data to Kafka topic, handles batch committing based on size or time thresholds\nclose() -> None - Properly closes the Kafka producer to release resources",
    "Canonical_solution": "from kafka import KafkaProducer\nimport json\nimport datetime\nimport os\n\nclass KafkaWriter:\n    def __init__(self, max_batch_size, max_batch_lifetime_sec, limit):\n        self._max_batch_size = max_batch_size\n        self._max_batch_lifetime = datetime.timedelta(seconds=max_batch_lifetime_sec)\n        self._limit = limit\n\n        self._total_written = 0\n        self._total_written_after_commit = 0\n        self._last_commit_at = None\n        self._current_seq_id = 0\n\n        self._producer = KafkaProducer(bootstrap_servers=[\"kafka:9092\"])\n\n    def write(self, json_data):\n        self._producer.send(\n            \"test_0\",\n            json.dumps(json_data).encode(\"utf-8\"),\n            partition=0,\n        )\n\n        if not self._last_commit_at:\n            self._last_commit_at = datetime.datetime.now()\n\n        self._total_written += 1\n        self._total_written_after_commit += 1\n        batch_exists_for = datetime.datetime.now() - self._last_commit_at\n\n        size_limit_reached = self._total_written_after_commit == self._max_batch_size\n        duration_limit_reached = batch_exists_for >= self._max_batch_lifetime\n\n        if size_limit_reached or duration_limit_reached:\n            self._last_commit_at = datetime.datetime.now()\n            self._producer.send(\n                \"test_0\",\n                \"*COMMIT*\".encode(\"utf-8\"),\n                partition=0,\n            )\n            self._total_written_after_commit = 0\n            self._current_seq_id += 1\n\n        if self._total_written == self._limit:\n            self._producer.send(\n                \"test_0\",\n                \"*FINISH*\".encode(\"utf-8\"),\n                partition=0,\n            )\n            self._producer.close()\n            exit(0)\n\n    def close(self):\n        self._producer.close()",
    "Code_level": "Class-level",
    "FSMID_for_test": 78,
    "right_result": "```python\nfrom datetime import datetime, timedelta\nfrom kafka import KafkaProducer\n\nclass KafkaWriter:\n    def __init__(self, max_batch_size: int, max_batch_lifetime_sec: int, limit: int) -> None:\n        self._max_batch_size = max_batch_size\n        self._max_batch_lifetime = timedelta(seconds=max_batch_lifetime_sec)\n        self._limit = limit\n        self._total_written = 0\n        self._total_written_after_commit = 0\n        self._last_commit_at = datetime.now()\n        self._current_seq_id = 0\n        self._producer = KafkaProducer(bootstrap_servers=['localhost:9092'])\n\n    def write(self, json_data: dict) -> None:\n        if self._total_written >= self._limit:\n            self.close()\n            return\n\n        self._total_written += 1\n        self._total_written_after_commit += 1\n        self._current_seq_id += 1\n\n        self._producer.send('topic_name', json_data)\n\n        if self._total_written_after_commit >= self._max_batch_size or (datetime.now() - self._last_commit_at) >= self._max_batch_lifetime:\n            self._producer.flush()\n            self._total_written_after_commit = 0\n            self._last_commit_at = datetime.now()\n\n    def close(self) -> None:\n        self._producer.close()\n```"
  },
  {
    "Task_id": 258,
    "Instruction": "Task Description: Create a function that generates and sends timestamped messages to Kafka topics with different timezone configurations.\n\nFunction Description: The function generates a stream of messages containing timestamps in two different timezones (America/New_York and Europe/Paris) and sends them randomly to two Kafka topics. Each message includes a timestamp in its respective timezone and a sequential message number. The function handles Kafka producer initialization, message generation, sending, and proper resource cleanup.\n\nInput: \n- None (The function uses internal constants for configuration)\n\nOutput: \n- None (The function's effect is sending messages to Kafka topics)\n\nNote: The function uses the following internal configurations:\n- input_size: int = 100 (number of messages to generate)\n- topic1: str = \"timezone1\" (first Kafka topic)\n- topic2: str = \"timezone2\" (second Kafka topic)\n- timezone1: ZoneInfo = ZoneInfo(\"America/New_York\")\n- timezone2: ZoneInfo = ZoneInfo(\"Europe/Paris\")\n- str_repr: str = \"%Y-%m-%d %H:%M:%S.%f %z\" (timestamp format)\n- api_version: tuple = (0, 10, 2) (Kafka API version)\n- bootstrap_servers: list = [\"kafka:9092\"] (Kafka server address)\n- security_protocol: str = \"PLAINTEXT\" (connection protocol)",
    "Canonical_solution": "import json\nimport random\nimport time\nfrom datetime import datetime\nfrom zoneinfo import ZoneInfo\nfrom kafka import KafkaProducer\n\ndef generate_stream():\n    input_size = 100\n    random.seed(0)\n    topic1 = \"timezone1\"\n    topic2 = \"timezone2\"\n    timezone1 = ZoneInfo(\"America/New_York\")\n    timezone2 = ZoneInfo(\"Europe/Paris\")\n    str_repr = \"%Y-%m-%d %H:%M:%S.%f %z\"\n    api_version = (0, 10, 2)\n\n    time.sleep(30)\n    producer1 = KafkaProducer(\n        bootstrap_servers=[\"kafka:9092\"],\n        security_protocol=\"PLAINTEXT\",\n        api_version=api_version,\n    )\n    producer2 = KafkaProducer(\n        bootstrap_servers=[\"kafka:9092\"],\n        security_protocol=\"PLAINTEXT\",\n        api_version=api_version,\n    )\n\n    def send_message(timezone: ZoneInfo, producer: KafkaProducer, i: int):\n        timestamp = datetime.now(timezone)\n        message_json = {\"date\": timestamp.strftime(str_repr), \"message\": str(i)}\n        producer.send(topic1, (json.dumps(message_json)).encode(\"utf-8\"))\n\n    for i in range(input_size):\n        if random.choice([True, False]):\n            send_message(timezone1, producer1, i)\n        else:\n            send_message(timezone2, producer2, i)\n        time.sleep(1)\n\n    time.sleep(2)\n    producer1.close()\n    producer2.close()",
    "Code_level": "Function-level",
    "FSMID_for_test": 78,
    "right_result": "```python\nfrom kafka import KafkaProducer\nfrom zoneinfo import ZoneInfo\nimport time\nimport random\nimport json\n\ndef send_timezones_messages():\n    input_size = 100\n    topic1 = \"timezone1\"\n    topic2 = \"timezone2\"\n    timezone1 = ZoneInfo(\"America/New_York\")\n    timezone2 = ZoneInfo(\"Europe/Paris\")\n    str_repr = \"%Y-%m-%d %H:%M:%S.%f %z\"\n    api_version = (0, 10, 2)\n    bootstrap_servers = [\"kafka:9092\"]\n    security_protocol = \"PLAINTEXT\"\n\n    producer = KafkaProducer(bootstrap_servers=bootstrap_servers,\n                             api_version=api_version,\n                             security_protocol=security_protocol)\n\n    for i in range(input_size):\n        current_time = time.time()\n        timestamp_ny = current_time.replace(tzinfo=timezone1).astimezone(timezone1).strftime(str_repr)\n        timestamp_paris = current_time.replace(tzinfo=timezone2).astimezone(timezone2).strftime(str_repr)\n        message = json.dumps({\"number\": i, \"timestamp_ny\": timestamp_ny, \"timestamp_paris\": timestamp_paris})\n        if random.choice([True, False]):\n            producer.send(topic1, message.encode('utf-8'))\n        else:\n            producer.send(topic2, message.encode('utf-8'))\n    producer.flush()\n    producer.close()\n\nsend_timezones_messages()\n```"
  },
  {
    "Task_id": 259,
    "Instruction": "Task Description: Implement a KafkaProducer class in Python that can send messages to a Kafka cluster with configurable settings for serialization, partitioning, compression, and message delivery guarantees.\n\nClass Description: The KafkaProducer class is a high-level producer client that publishes messages to Kafka topics. It handles message serialization, partitioning, batching, and retries for failed requests. The producer is thread-safe and manages background threads for message accumulation and network I/O.\n\nAttributes:\n- config: [dict] - Configuration parameters for the producer including bootstrap servers, serializers, acks, etc.\n- _metrics: [Metrics] - Tracks producer performance metrics\n- _accumulator: [RecordAccumulator] - Batches messages by topic-partition before sending\n- _metadata: [ClusterMetadata] - Maintains cluster metadata including topic partitions\n- _sender: [Sender] - Background thread that sends batched messages to brokers\n- _closed: [bool] - Flag indicating if producer has been closed\n- _cleanup: [function] - Cleanup handler registered with atexit\n\nMethods:\n- __init__(**configs) -> None - Initializes the producer with given configuration overrides\n- send(topic, value=None, key=None, headers=None, partition=None, timestamp_ms=None) -> FutureRecordMetadata - Asynchronously sends a message to the specified topic and returns a future\n- flush(timeout=None) -> None - Ensures all buffered messages are delivered within timeout\n- close(timeout=None) -> None - Closes the producer and releases resources\n- _cleanup_factory() -> function - Creates cleanup function for atexit registration\n- _unregister_cleanup() -> None - Removes cleanup handler from atexit\n- _max_usable_produce_magic() -> int - Determines message format version based on API version\n- _estimate_size_in_bytes(key, value, headers=[]) -> int - Estimates serialized message size\n- _ensure_valid_record_size(size) -> None - Validates message size against configured limits\n- _wait_on_metadata(topic, max_wait) -> set - Waits for metadata update for given topic\n- _serialize(f, topic, data) -> bytes - Serializes message key/value using configured serializer\n- _partition(topic, partition, key, value, serialized_key, serialized_value) -> int - Determines target partition for message",
    "Canonical_solution": "import atexit\nimport copy\nimport logging\nimport socket\nimport threading\nimport time\nimport weakref\n\nfrom kafka.vendor import six\nimport kafka.errors as Errors\nfrom kafka.client_async import KafkaClient, selectors\nfrom kafka.codec import has_gzip, has_snappy, has_lz4, has_zstd\nfrom kafka.metrics import MetricConfig, Metrics\nfrom kafka.partitioner.default import DefaultPartitioner\nfrom kafka.producer.future import FutureRecordMetadata, FutureProduceResult\nfrom kafka.producer.record_accumulator import AtomicInteger, RecordAccumulator\nfrom kafka.producer.sender import Sender\nfrom kafka.record.default_records import DefaultRecordBatchBuilder\nfrom kafka.record.legacy_records import LegacyRecordBatchBuilder\nfrom kafka.serializer import Serializer\nfrom kafka.structs import TopicPartition\n\nlog = logging.getLogger(__name__)\nPRODUCER_CLIENT_ID_SEQUENCE = AtomicInteger()\n\nclass KafkaProducer:\n    DEFAULT_CONFIG = {\n        'bootstrap_servers': 'localhost',\n        'client_id': None,\n        'key_serializer': None,\n        'value_serializer': None,\n        'acks': 1,\n        'bootstrap_topics_filter': set(),\n        'compression_type': None,\n        'retries': 0,\n        'batch_size': 16384,\n        'linger_ms': 0,\n        'partitioner': DefaultPartitioner(),\n        'buffer_memory': 33554432,\n        'connections_max_idle_ms': 9 * 60 * 1000,\n        'max_block_ms': 60000,\n        'max_request_size': 1048576,\n        'metadata_max_age_ms': 300000,\n        'retry_backoff_ms': 100,\n        'request_timeout_ms': 30000,\n        'receive_buffer_bytes': None,\n        'send_buffer_bytes': None,\n        'socket_options': [(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)],\n        'sock_chunk_bytes': 4096,\n        'sock_chunk_buffer_count': 1000,\n        'reconnect_backoff_ms': 50,\n        'reconnect_backoff_max_ms': 1000,\n        'max_in_flight_requests_per_connection': 5,\n        'security_protocol': 'PLAINTEXT',\n        'ssl_context': None,\n        'ssl_check_hostname': True,\n        'ssl_cafile': None,\n        'ssl_certfile': None,\n        'ssl_keyfile': None,\n        'ssl_crlfile': None,\n        'ssl_password': None,\n        'ssl_ciphers': None,\n        'api_version': None,\n        'api_version_auto_timeout_ms': 2000,\n        'metric_reporters': [],\n        'metrics_num_samples': 2,\n        'metrics_sample_window_ms': 30000,\n        'selector': selectors.DefaultSelector,\n        'sasl_mechanism': None,\n        'sasl_plain_username': None,\n        'sasl_plain_password': None,\n        'sasl_kerberos_service_name': 'kafka',\n        'sasl_kerberos_domain_name': None,\n        'sasl_oauth_token_provider': None,\n        'kafka_client': KafkaClient,\n    }\n\n    _COMPRESSORS = {\n        'gzip': (has_gzip, LegacyRecordBatchBuilder.CODEC_GZIP),\n        'snappy': (has_snappy, LegacyRecordBatchBuilder.CODEC_SNAPPY),\n        'lz4': (has_lz4, LegacyRecordBatchBuilder.CODEC_LZ4),\n        'zstd': (has_zstd, DefaultRecordBatchBuilder.CODEC_ZSTD),\n        None: (lambda: True, LegacyRecordBatchBuilder.CODEC_NONE),\n    }\n\n    def __init__(self, **configs):\n        self.config = copy.copy(self.DEFAULT_CONFIG)\n        for key in self.config:\n            if key in configs:\n                self.config[key] = configs.pop(key)\n\n        if self.config['client_id'] is None:\n            self.config['client_id'] = 'kafka-python-producer-%s' % (PRODUCER_CLIENT_ID_SEQUENCE.increment(),)\n\n        if self.config['acks'] == 'all':\n            self.config['acks'] = -1\n\n        metrics_tags = {'client-id': self.config['client_id']}\n        metric_config = MetricConfig(samples=self.config['metrics_num_samples'],\n                                   time_window_ms=self.config['metrics_sample_window_ms'],\n                                   tags=metrics_tags)\n        reporters = [reporter() for reporter in self.config['metric_reporters']]\n        self._metrics = Metrics(metric_config, reporters)\n\n        client = self.config['kafka_client'](\n            metrics=self._metrics, metric_group_prefix='producer',\n            wakeup_timeout_ms=self.config['max_block_ms'],\n            **self.config)\n\n        if self.config['api_version'] is None:\n            self.config['api_version'] = client.config['api_version']\n\n        ct = self.config['compression_type']\n        if ct not in self._COMPRESSORS:\n            raise ValueError(\"Not supported codec: {}\".format(ct))\n        else:\n            checker, compression_attrs = self._COMPRESSORS[ct]\n            assert checker(), \"Libraries for {} compression codec not found\".format(ct)\n            self.config['compression_attrs'] = compression_attrs\n\n        message_version = self._max_usable_produce_magic()\n        self._accumulator = RecordAccumulator(message_version=message_version, metrics=self._metrics, **self.config)\n        self._metadata = client.cluster\n        guarantee_message_order = bool(self.config['max_in_flight_requests_per_connection'] == 1)\n        self._sender = Sender(client, self._metadata,\n                             self._accumulator, self._metrics,\n                             guarantee_message_order=guarantee_message_order,\n                             **self.config)\n        self._sender.daemon = True\n        self._sender.start()\n        self._closed = False\n\n        self._cleanup = self._cleanup_factory()\n        atexit.register(self._cleanup)\n\n    def send(self, topic, value=None, key=None, headers=None, partition=None, timestamp_ms=None):\n        assert value is not None or self.config['api_version'] >= (0, 8, 1), (\n            'Null messages require kafka >= 0.8.1')\n        assert not (value is None and key is None), 'Need at least one: key or value'\n        key_bytes = value_bytes = None\n        try:\n            self._wait_on_metadata(topic, self.config['max_block_ms'] / 1000.0)\n\n            key_bytes = self._serialize(\n                self.config['key_serializer'],\n                topic, key)\n            value_bytes = self._serialize(\n                self.config['value_serializer'],\n                topic, value)\n            assert type(key_bytes) in (bytes, bytearray, memoryview, type(None))\n            assert type(value_bytes) in (bytes, bytearray, memoryview, type(None))\n\n            partition = self._partition(topic, partition, key, value,\n                                      key_bytes, value_bytes)\n\n            if headers is None:\n                headers = []\n            assert type(headers) == list\n            assert all(type(item) == tuple and len(item) == 2 and type(item[0]) == str and type(item[1]) == bytes for item in headers)\n\n            message_size = self._estimate_size_in_bytes(key_bytes, value_bytes, headers)\n            self._ensure_valid_record_size(message_size)\n\n            tp = TopicPartition(topic, partition)\n            result = self._accumulator.append(tp, timestamp_ms,\n                                             key_bytes, value_bytes, headers,\n                                             self.config['max_block_ms'],\n                                             estimated_size=message_size)\n            future, batch_is_full, new_batch_created = result\n            if batch_is_full or new_batch_created:\n                self._sender.wakeup()\n\n            return future\n        except Errors.BrokerResponseError as e:\n            return FutureRecordMetadata(\n                FutureProduceResult(TopicPartition(topic, partition)),\n                -1, None, None,\n                len(key_bytes) if key_bytes is not None else -1,\n                len(value_bytes) if value_bytes is not None else -1,\n                sum(len(h_key.encode(\"utf-8\")) + len(h_value) for h_key, h_value in headers) if headers else -1,\n            ).failure(e)\n\n    def flush(self, timeout=None):\n        self._accumulator.begin_flush()\n        self._sender.wakeup()\n        self._accumulator.await_flush_completion(timeout=timeout)\n\n    def close(self, timeout=None):\n        self._unregister_cleanup()\n\n        if not hasattr(self, '_closed') or self._closed:\n            return\n\n        invoked_from_callback = bool(threading.current_thread() is self._sender)\n        if timeout > 0:\n            if invoked_from_callback:\n                pass\n            else:\n                if self._sender is not None:\n                    self._sender.initiate_close()\n                    self._sender.join(timeout)\n\n        if self._sender is not None and self._sender.is_alive():\n            self._sender.force_close()\n\n        self._metrics.close()\n        try:\n            self.config['key_serializer'].close()\n        except AttributeError:\n            pass\n        try:\n            self.config['value_serializer'].close()\n        except AttributeError:\n            pass\n        self._closed = True\n\n    def _cleanup_factory(self):\n        _self = weakref.proxy(self)\n        def wrapper():\n            try:\n                _self.close(timeout=0)\n            except (ReferenceError, AttributeError):\n                pass\n        return wrapper\n\n    def _unregister_cleanup(self):\n        if getattr(self, '_cleanup', None):\n            if hasattr(atexit, 'unregister'):\n                atexit.unregister(self._cleanup)\n            else:\n                try:\n                    atexit._exithandlers.remove((self._cleanup, (), {}))\n                except ValueError:\n                    pass\n        self._cleanup = None\n\n    def _max_usable_produce_magic(self):\n        if self.config['api_version'] >= (0, 11):\n            return 2\n        elif self.config['api_version'] >= (0, 10):\n            return 1\n        else:\n            return 0\n\n    def _estimate_size_in_bytes(self, key, value, headers=[]):\n        magic = self._max_usable_produce_magic()\n        if magic == 2:\n            return DefaultRecordBatchBuilder.estimate_size_in_bytes(key, value, headers)\n        else:\n            return LegacyRecordBatchBuilder.estimate_size_in_bytes(magic, self.config['compression_type'], key, value)\n\n    def _ensure_valid_record_size(self, size):\n        if size > self.config['max_request_size']:\n            raise Errors.MessageSizeTooLargeError(\n                \"The message is %d bytes when serialized which is larger than\"\n                \" the maximum request size you have configured with the\"\n                \" max_request_size configuration\" % (size,))\n        if size > self.config['buffer_memory']:\n            raise Errors.MessageSizeTooLargeError(\n                \"The message is %d bytes when serialized which is larger than\"\n                \" the total memory buffer you have configured with the\"\n                \" buffer_memory configuration.\" % (size,))\n\n    def _wait_on_metadata(self, topic, max_wait):\n        self._sender.add_topic(topic)\n        begin = time.time()\n        elapsed = 0.0\n        metadata_event = None\n        while True:\n            partitions = self._metadata.partitions_for_topic(topic)\n            if partitions is not None:\n                return partitions\n\n            if not metadata_event:\n                metadata_event = threading.Event()\n\n            metadata_event.clear()\n            future = self._metadata.request_update()\n            future.add_both(lambda e, *args: e.set(), metadata_event)\n            self._sender.wakeup()\n            metadata_event.wait(max_wait - elapsed)\n            elapsed = time.time() - begin\n            if not metadata_event.is_set():\n                raise Errors.KafkaTimeoutError(\n                    \"Failed to update metadata after %.1f secs.\" % (max_wait,))\n            elif topic in self._metadata.unauthorized_topics:\n                raise Errors.TopicAuthorizationFailedError(topic)\n\n    def _serialize(self, f, topic, data):\n        if not f:\n            return data\n        if isinstance(f, Serializer):\n            return f.serialize(topic, data)\n        return f(data)\n\n    def _partition(self, topic, partition, key, value, serialized_key, serialized_value):\n        if partition is not None:\n            assert partition >= 0\n            assert partition in self._metadata.partitions_for_topic(topic), 'Unrecognized partition'\n            return partition\n\n        all_partitions = sorted(self._metadata.partitions_for_topic(topic))\n        available = list(self._metadata.available_partitions_for_topic(topic))\n        return self.config['partitioner'](serialized_key, all_partitions, available)",
    "Code_level": "Class-level",
    "FSMID_for_test": 78,
    "right_result": "```python\nfrom kafka import KafkaProducer\nfrom kafka.errors import KafkaError\nfrom kafka.future import FutureRecordMetadata\nimport time\nimport atexit\n\nclass KafkaProducer:\n    def __init__(self, **configs):\n        self.config = configs\n        self._metrics = None\n        self._accumulator = None\n        self._metadata = None\n        self._sender = None\n        self._closed = False\n        self._cleanup = None\n\n    def send(self, topic, value=None, key=None, headers=None, partition=None, timestamp_ms=None):\n        if self._closed:\n            raise KafkaError(\"Producer is closed\")\n        # Implementation for sending message\n        return FutureRecordMetadata()\n\n    def flush(self, timeout=None):\n        # Implementation for flushing messages\n        pass\n\n    def close(self, timeout=None):\n        self._closed = True\n        # Implementation for closing producer\n        if self._cleanup:\n            atexit.unregister(self._cleanup)\n\n    def _cleanup_factory(self):\n        # Implementation for cleanup factory\n        return None\n\n    def _unregister_cleanup(self):\n        # Implementation for unregistering cleanup\n        pass\n\n    def _max_usable_produce_magic(self):\n        # Implementation for determining message format version\n        return 0\n\n    def _estimate_size_in_bytes(self, key, value, headers=[]):\n        # Implementation for estimating serialized message size\n        return 0\n\n    def _ensure_valid_record_size(self, size):\n        # Implementation for validating message size\n        pass\n\n    def _wait_on_metadata(self, topic, max_wait):\n        # Implementation for waiting on metadata update\n        return set()\n\n    def _serialize(self, f, topic, data):\n        # Implementation for serializing message key/value\n        return bytes()\n\n    def _partition(self, topic, partition, key, value, serialized_key, serialized_value):\n        # Implementation for determining target partition\n        return 0\n```"
  },
  {
    "Task_id": 26,
    "Instruction": "Task Description: Implement an HTTP connection pool class that manages HTTP connections to a specified host, handling connection creation, request execution, and response processing with support for retries, timeouts, and redirects.\n\nClass Description: HTTPConnectionPool is a connection pool manager for HTTP connections that provides efficient reuse of connections to a specified host. It handles connection lifecycle, request execution, error handling, and retries.\n\nAttributes:\n- scheme: str - The URL scheme (default \"http\")\n- host: str - The normalized hostname for connections\n- port: int - The port number for connections\n- timeout: Timeout - Connection and read timeout configuration\n- retries: Retry - Retry configuration for failed requests\n- proxy: str - Proxy server URL if configured\n- proxy_headers: dict - Headers for proxy connections\n- conn_kw: dict - Additional connection parameters\n\nMethods:\n- __init__(host, port=None, strict=False, timeout=Timeout.DEFAULT_TIMEOUT, maxsize=1, block=False, headers=None, retries=None, _proxy=None, _proxy_headers=None, **conn_kw) -> None\n  - Initializes the connection pool with target host and configuration\n  - Input: \n    - host: str - Target hostname\n    - port: int - Target port (optional)\n    - timeout: Timeout - Timeout configuration\n    - retries: Retry - Retry configuration\n    - _proxy: str - Proxy URL (optional)\n    - _proxy_headers: dict - Proxy headers (optional)\n    - conn_kw: dict - Additional connection parameters\n\n- _new_conn() -> HTTPConnection\n  - Creates a new HTTP connection\n  - Output: HTTPConnection - A new connection instance\n\n- _make_request(conn, method, url, timeout=_Default, chunked=False, **httplib_request_kw) -> HTTPResponse\n  - Executes an HTTP request through the given connection\n  - Input:\n    - conn: HTTPConnection - Connection to use\n    - method: str - HTTP method (GET, POST, etc.)\n    - url: str - Target URL\n    - timeout: Timeout - Request timeout\n    - chunked: bool - Whether to use chunked transfer encoding\n  - Output: HTTPResponse - The HTTP response\n\n- urlopen(method, url, body=None, headers=None, retries=None, redirect=True, assert_same_host=True, timeout=_Default, pool_timeout=None, release_conn=None, chunked=False, **response_kw) -> HTTPResponse\n  - Main method to execute HTTP requests with connection pooling\n  - Input:\n    - method: str - HTTP method\n    - url: str - Target URL\n    - body: str - Request body (optional)\n    - headers: dict - Request headers (optional)\n    - retries: Retry - Retry configuration (optional)\n    - redirect: bool - Whether to follow redirects\n    - timeout: Timeout - Request timeout\n    - chunked: bool - Use chunked transfer encoding\n  - Output: HTTPResponse - The HTTP response",
    "Canonical_solution": "import socket\nfrom socket import error as SocketError\nfrom socket import timeout as SocketTimeout\nfrom .connection import HTTPConnection, HTTPSConnection\nfrom .exceptions import (\n    EmptyPoolError,\n    HostChangedError,\n    MaxRetryError,\n    ProtocolError,\n    ProxyError,\n    ReadTimeoutError,\n    SSLError,\n    TimeoutError,\n)\nfrom .util.connection import is_connection_dropped\nfrom .util.proxy import connection_requires_http_tunnel\nfrom .util.retry import Retry\nfrom .util.timeout import Timeout\nfrom .util.url import Url, _encode_target\nfrom .util.url import _normalize_host as normalize_host\nfrom .util.url import get_host, parse_url\n\nclass HTTPConnectionPool:\n    scheme = \"http\"\n    ConnectionCls = HTTPConnection\n\n    def __init__(\n        self,\n        host,\n        port=None,\n        strict=False,\n        timeout=Timeout.DEFAULT_TIMEOUT,\n        maxsize=1,\n        block=False,\n        headers=None,\n        retries=None,\n        _proxy=None,\n        _proxy_headers=None,\n        **conn_kw\n    ):\n        self.host = _normalize_host(host, scheme=self.scheme)\n        self._proxy_host = host.lower()\n        self.port = port\n        self.timeout = timeout\n        self.retries = retries\n        self.proxy = _proxy\n        self.proxy_headers = _proxy_headers or {}\n        self.conn_kw = conn_kw\n\n    def _new_conn(self):\n        return self.ConnectionCls(\n            host=self.host,\n            port=self.port,\n            timeout=self.timeout.connect_timeout,\n            strict=self.strict,\n            **self.conn_kw\n        )\n\n    def _make_request(\n        self, conn, method, url, timeout=_Default, chunked=False, **httplib_request_kw\n    ):\n        try:\n            if chunked:\n                conn.request_chunked(method, url, **httplib_request_kw)\n            else:\n                conn.request(method, url, **httplib_request_kw)\n        except (SocketTimeout, BaseSSLError) as e:\n            raise\n\n        read_timeout = timeout_obj.read_timeout\n        if getattr(conn, \"sock\", None):\n            if read_timeout == 0:\n                raise ReadTimeoutError(\n                    self, url, \"Read timed out. (read timeout=%s)\" % read_timeout\n                )\n            conn.sock.settimeout(read_timeout)\n\n        try:\n            httplib_response = conn.getresponse()\n        except (SocketTimeout, BaseSSLError, SocketError) as e:\n            raise\n\n        return httplib_response\n\n    def urlopen(\n        self,\n        method,\n        url,\n        body=None,\n        headers=None,\n        retries=None,\n        redirect=True,\n        assert_same_host=True,\n        timeout=_Default,\n        pool_timeout=None,\n        release_conn=None,\n        chunked=False,\n        **response_kw\n    ):\n        parsed_url = parse_url(url)\n        destination_scheme = parsed_url.scheme\n\n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n\n        if assert_same_host and not self.is_same_host(url):\n            raise HostChangedError(self, url, retries)\n\n        conn = None\n        release_this_conn = release_conn\n        http_tunnel_required = connection_requires_http_tunnel(\n            self.proxy, self.proxy_config, destination_scheme\n        )\n\n        try:\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=pool_timeout)\n            conn.timeout = timeout_obj.connect_timeout\n\n            if http_tunnel_required:\n                self._prepare_proxy(conn)\n\n            httplib_response = self._make_request(\n                conn,\n                method,\n                url,\n                timeout=timeout_obj,\n                body=body,\n                headers=headers,\n                chunked=chunked,\n            )\n\n            response = self.ResponseCls.from_httplib(\n                httplib_response,\n                pool=self,\n                connection=response_conn,\n                retries=retries,\n                **response_kw\n            )\n\n        except (\n            TimeoutError,\n            HTTPException,\n            SocketError,\n            ProtocolError,\n            BaseSSLError,\n            SSLError,\n            CertificateError,\n        ) as e:\n            retries = retries.increment(\n                method, url, error=e, _pool=self, _stacktrace=sys.exc_info()[2]\n            )\n            retries.sleep()\n            conn = conn and conn.close()\n\n        finally:\n            if release_this_conn:\n                self._put_conn(conn)\n\n        if not conn:\n            return self.urlopen(\n                method,\n                url,\n                body,\n                headers,\n                retries,\n                redirect,\n                assert_same_host,\n                timeout=timeout,\n                pool_timeout=pool_timeout,\n                release_conn=release_conn,\n                chunked=chunked,\n                **response_kw\n            )\n\n        redirect_location = redirect and response.get_redirect_location()\n        if redirect_location:\n            response.drain_conn()\n            retries.sleep_for_retry(response)\n            return self.urlopen(\n                method,\n                redirect_location,\n                body,\n                headers,\n                retries=retries,\n                redirect=redirect,\n                assert_same_host=assert_same_host,\n                timeout=timeout,\n                pool_timeout=pool_timeout,\n                release_conn=release_conn,\n                chunked=chunked,\n                **response_kw\n            )\n\n        return response",
    "Code_level": "Class-level",
    "FSMID_for_test": 56,
    "right_result": "```python\nimport socket\nimport http.client\nfrom urllib.parse import urlparse\nfrom urllib.request import Request, urlopen\nfrom urllib.error import HTTPError, URLError\nfrom http.client import HTTPConnection, HTTPSConnection\nfrom time import time\nfrom threading import Lock\n\nclass Timeout:\n    DEFAULT_TIMEOUT = 10\n\nclass Retry:\n    DEFAULT_RETRIES = 3\n\nclass HTTPConnectionPool:\n    def __init__(self, host, port=None, strict=False, timeout=Timeout.DEFAULT_TIMEOUT, maxsize=1, block=False, headers=None, retries=None, _proxy=None, _proxy_headers=None, **conn_kw):\n        self.scheme = \"http\"\n        self.host = host\n        self.port = port\n        self.timeout = timeout\n        self.retries = retries or Retry.DEFAULT_RETRIES\n        self.proxy = _proxy\n        self.proxy_headers = _proxy_headers or {}\n        self.conn_kw = conn_kw\n        self.connections = []\n        self.lock = Lock()\n\n    def _new_conn(self):\n        if self.scheme == \"https\":\n            conn = HTTPSConnection(self.host, self.port, timeout=self.timeout, **self.conn_kw)\n        else:\n            conn = HTTPConnection(self.host, self.port, timeout=self.timeout, **self.conn_kw)\n        return conn\n\n    def _make_request(self, conn, method, url, timeout=Timeout.DEFAULT_TIMEOUT, chunked=False, **httplib_request_kw):\n        conn.request(method, url, **httplib_request_kw)\n        response = conn.getresponse()\n        return response\n\n    def urlopen(self, method, url, body=None, headers=None, retries=None, redirect=True, assert_same_host=True, timeout=Timeout.DEFAULT_TIMEOUT, pool_timeout=None, release_conn=None, chunked=False, **response_kw):\n        retries = retries or self.retries\n        parsed_url = urlparse(url)\n        if not parsed_url.scheme:\n            parsed_url = parsed_url._replace(scheme=self.scheme)\n        url = parsed_url.geturl()\n        conn = None\n        try:\n            conn = self._new_conn()\n            response = self._make_request(conn, method, url, timeout=timeout, chunked=chunked, **response_kw)\n            if response.status in (301, 302, 303, 307, 308) and redirect:\n                new_url = response.getheader('Location')\n                return self.urlopen(method, new_url, body=body, headers=headers, retries=retries, redirect=False, assert_same_host=assert_same_host, timeout=timeout, pool_timeout=pool_timeout, release_conn=release_conn, chunked=chunked, **response_kw)\n            return response\n        except (HTTPError, URLError) as e:\n            if retries > 0:\n                retries -= 1\n                return self.urlopen(method, url, body=body, headers=headers, retries=retries, redirect=redirect, assert_same_host=assert_same_host, timeout=timeout, pool_timeout=pool_timeout, release_conn=release_conn, chunked=chunked, **response_kw)\n            else:\n                raise e\n        finally:\n            if release_conn:\n                conn.close()\n```"
  },
  {
    "Task_id": 260,
    "Instruction": "Task Description: Create a function that produces a message to a specified Kafka topic using the KafkaProducer from the kafka-python library.\n\nFunction Description: The function initializes a KafkaProducer instance, sends a message to the specified topic, waits for the message to be delivered, and then closes the producer to release resources.\n\nInput:  \n- bootstrap_server: str - The address of the Kafka bootstrap server (e.g., 'localhost:9092').  \n- topic: str - The name of the Kafka topic to which the message will be sent.  \n- message: bytes - The message content in bytes format.  \n\nOutput: None - The function does not return any value but ensures the message is sent to the Kafka topic.",
    "Canonical_solution": "from kafka import KafkaProducer\n\ndef produce_message(bootstrap_server: str, topic: str, message: bytes) -> None:\n    \"\"\"\n    Produces a message to a Kafka topic.\n    \n    Args:\n        bootstrap_server: Kafka bootstrap server address\n        topic: Target topic name\n        message: Message content in bytes\n    \"\"\"\n    producer = KafkaProducer(bootstrap_servers=[bootstrap_server])\n    future = producer.send(topic, message)\n    future.get(timeout=10)\n    producer.close()",
    "Code_level": "Function-level",
    "FSMID_for_test": 78,
    "right_result": "from kafka import KafkaProducer\nimport time\n\ndef send_kafka_message(bootstrap_server, topic, message):\n    producer = KafkaProducer(bootstrap_servers=bootstrap_server)\n    producer.send(topic, message)\n    producer.flush()\n    producer.close()"
  },
  {
    "Task_id": 261,
    "Instruction": "Task Description: Implement a Kafka producer function that reads data from a CSV file and sends it as JSON messages to a specified Kafka topic, with special commit markers before and after the data transmission.\n\nFunction Description: The function establishes a connection to a Kafka broker, reads movie rating data from a CSV file, converts each record to JSON format, and sends them to a predefined Kafka topic. It sends a \"*COMMIT*\" marker before and after the data transmission to indicate the start and end of the dataset. The function includes delays to ensure proper message delivery and resource cleanup.\n\nInput: None (The function uses hardcoded values for the Kafka broker configuration and file path)\n\nOutput: None (The function's effect is the messages sent to the Kafka topic)",
    "Canonical_solution": "import csv\nimport json\nimport time\nfrom kafka import KafkaProducer\n\ndef kafka_producer():\n    topic = \"ratings\"\n    time.sleep(30)\n    producer = KafkaProducer(\n        bootstrap_servers=[\"redpanda:9092\"],\n        security_protocol=\"PLAINTEXT\",\n        api_version=(0, 10, 2),\n    )\n    producer.send(topic, \"*COMMIT*\".encode(\"utf-8\"))\n    time.sleep(2)\n\n    with open(\"./dataset.csv\", newline=\"\") as csvfile:\n        dataset_reader = csv.reader(csvfile, delimiter=\",\")\n        first_line = True\n        for row in dataset_reader:\n            if first_line:\n                first_line = False\n                continue\n            message_json = {\n                \"userId\": int(row[0]),\n                \"movieId\": int(row[1]),\n                \"rating\": float(row[2]),\n                \"timestamp\": int(row[3]),\n            }\n            producer.send(topic, (json.dumps(message_json)).encode(\"utf-8\"))\n            time.sleep(0.1)\n\n    producer.send(topic, \"*COMMIT*\".encode(\"utf-8\"))\n    time.sleep(2)\n    producer.close()",
    "Code_level": "Function-level",
    "FSMID_for_test": 78,
    "right_result": "```python\nfrom kafka import KafkaProducer\nimport csv\nimport json\nimport time\n\ndef kafka_producer():\n    # Kafka broker configuration\n    kafka_broker = 'localhost:9092'\n    kafka_topic = 'movie_ratings'\n    \n    # Create a Kafka producer\n    producer = KafkaProducer(bootstrap_servers=kafka_broker, value_serializer=lambda v: json.dumps(v).encode('utf-8'))\n    \n    # File path for movie ratings data\n    file_path = 'movie_ratings.csv'\n    \n    # Send commit marker before data transmission\n    producer.send(kafka_topic, b\"*COMMIT*\")\n    producer.flush()\n    \n    # Read movie ratings data from CSV file\n    with open(file_path, 'r') as file:\n        reader = csv.DictReader(file)\n        for row in reader:\n            # Convert each record to JSON format\n            json_data = json.dumps(row)\n            # Send JSON message to Kafka topic\n            producer.send(kafka_topic, json_data.encode('utf-8'))\n            time.sleep(1)  # Delay to ensure proper message delivery\n    \n    # Send commit marker after data transmission\n    producer.send(kafka_topic, b\"*COMMIT*\")\n    producer.flush()\n    \n    # Close the producer\n    producer.close()\n\nkafka_producer()\n```"
  },
  {
    "Task_id": 262,
    "Instruction": "Task Description: Create a function that initializes a Kafka producer, sends a specified number of records to a Kafka topic, and properly manages resources.\n\nFunction Description: The function `create_kafka_producer` sets up a Kafka producer with given configurations, sends a specified number of records (of a given size) to a specified topic, and ensures proper resource cleanup. It handles both string and integer configuration values, and dynamically sets the bootstrap servers if brokers are provided.\n\nInput:  \n- `args`: [argparse.Namespace or dict] - Contains the following fields:  \n  - `consumer_config`: [list of str] - List of key-value pairs for Kafka producer configuration (e.g., `['key1=value1', 'key2=value2']`).  \n  - `brokers`: [list or None] - Optional list of broker addresses to dynamically set `bootstrap_servers`.  \n  - `record_size`: [int] - Size of each record (in bytes) to be sent.  \n  - `fixture_compression`: [str] - Compression type for the producer (e.g., `'gzip'`, `'snappy'`).  \n  - `num_records`: [int] - Number of records to produce.  \n  - `topic`: [str] - Kafka topic to which records will be sent.  \n\nOutput:  \n- None: The function does not return a value but prints status messages (e.g., bootstrap servers, production status).  \n- Side Effects:  \n  - Sends records to the specified Kafka topic.  \n  - Prints diagnostic information to stdout.  \n  - Properly closes the Kafka producer to release resources.",
    "Canonical_solution": "import argparse\nimport logging\nimport sys\nimport threading\nfrom kafka import KafkaProducer\n\nlogging.basicConfig(level=logging.ERROR)\n\ndef create_kafka_producer(args):\n    props = {}\n    for prop in args.consumer_config:\n        k, v = prop.split('=')\n        try:\n            v = int(v)\n        except ValueError:\n            pass\n        if v == 'None':\n            v = None\n        props[k] = v\n\n    if args.brokers:\n        brokers = start_brokers(args.brokers)\n        props['bootstrap_servers'] = ['{0}:{1}'.format(broker.host, broker.port)\n                                      for broker in brokers]\n        print('---> bootstrap_servers={0}'.format(props['bootstrap_servers']))\n        print()\n\n        print('-> Producing records')\n        record = bytes(bytearray(args.record_size))\n        producer = KafkaProducer(compression_type=args.fixture_compression,\n                                 **props)\n        for i in range(args.num_records):\n            producer.send(topic=args.topic, value=record)\n        producer.flush()\n        producer.close()\n        print('-> OK!')\n        print()",
    "Code_level": "Function-level",
    "FSMID_for_test": 78,
    "right_result": "```python\nfrom kafka import KafkaProducer\nimport argparse\nimport json\n\ndef create_kafka_producer(args):\n    config = {}\n    for key_value in args.consumer_config:\n        key, value = key_value.split('=')\n        config[key] = value\n\n    if args.brokers:\n        config['bootstrap_servers'] = ','.join(args.brokers)\n\n    producer = KafkaProducer(**config)\n\n    for i in range(args.num_records):\n        record = 'x' * args.record_size\n        producer.send(args.topic, record.encode('utf-8'))\n        producer.flush()\n        print(f\"Produced record {i+1}\")\n\n    producer.close()\n```"
  },
  {
    "Task_id": 263,
    "Instruction": "Task Description: Write a Python function that tests end-to-end message production to a Kafka topic with configurable compression, verifying successful message delivery.\n\nFunction Description: This function creates a Kafka producer, sends a batch of test messages to a specified topic with the given compression type, verifies all messages were successfully delivered, and properly cleans up resources. It includes version compatibility checks for specific compression types (LZ4 and Zstd).\n\nInput:\n- kafka_broker: [object] - An object containing host and port information for the Kafka broker (must have .host and .port attributes)\n- compression: [str] - The compression type to use for message production (e.g., 'none', 'gzip', 'snappy', 'lz4', 'zstd')\n\nOutput:\n- None (asserts message count matches expected value, raises exceptions on failure)\n\nNote: The function uses pytest.skip() for unsupported compression/version combinations and asserts the successful delivery of all messages.",
    "Canonical_solution": "import pytest\nfrom kafka import KafkaProducer\nfrom test.testutil import env_kafka_version, random_string\n\ndef test_end_to_end(kafka_broker, compression):\n    if compression == 'lz4':\n        if env_kafka_version() < (0, 8, 2):\n            pytest.skip('LZ4 requires 0.8.2')\n        elif platform.python_implementation() == 'PyPy':\n            pytest.skip('python-lz4 crashes on older versions of pypy')\n\n    if compression == 'zstd' and env_kafka_version() < (2, 1, 0):\n        pytest.skip('zstd requires kafka 2.1.0 or newer')\n\n    connect_str = ':'.join([kafka_broker.host, str(kafka_broker.port)])\n    producer = KafkaProducer(bootstrap_servers=connect_str,\n                             retries=5,\n                             max_block_ms=30000,\n                             compression_type=compression,\n                             value_serializer=str.encode)\n\n    topic = random_string(5)\n\n    messages = 100\n    futures = []\n    for i in range(messages):\n        futures.append(producer.send(topic, 'msg %d' % i))\n    ret = [f.get(timeout=30) for f in futures]\n    assert len(ret) == messages\n    producer.close()",
    "Code_level": "Function-level",
    "FSMID_for_test": 78,
    "right_result": "```python\nfrom kafka import KafkaProducer\nfrom kafka.errors import KafkaError\nimport pytest\n\ndef test_kafka_message_production(kafka_broker, compression):\n    if compression not in ['none', 'gzip', 'snappy', 'lz4', 'zstd']:\n        pytest.skip(f\"Unsupported compression type: {compression}\")\n    try:\n        producer = KafkaProducer(bootstrap_servers=[f\"{kafka_broker.host}:{kafka_broker.port}\"],\n                                 compression_type=compression)\n    except ValueError as e:\n        pytest.skip(str(e))\n    try:\n        topic = \"test_topic\"\n        messages = [b\"Test message %d\" % i for i in range(10)]\n        producer.send(topic, *messages)\n        producer.flush()\n        assert producer.get_metadata_for_topic(topic)[0].num_partitions == 1\n        assert producer.get_metadata_for_topic(topic)[0].partitions[0].leader is not None\n    finally:\n        producer.close()\n```"
  },
  {
    "Task_id": 264,
    "Instruction": "Task Description: Create a Python function that sends messages to a Kafka topic with simulated linear regression data points.\n\nFunction Description: The function `send_kafka_messages` generates a sequence of data points following a linear pattern with slight random noise, then sends these points as JSON-encoded messages to a specified Kafka topic. It handles Kafka producer initialization with secure authentication, message sending with a delay, and proper resource cleanup.\n\nInput: None (The function uses environment variables for Kafka credentials: UPSTASH_KAFKA_USER and UPSTASH_KAFKA_PASS)\n\nOutput: None (The function's effect is sending messages to Kafka, not returning a value)",
    "Canonical_solution": "import json\nimport os\nimport random\nimport time\nfrom kafka import KafkaProducer\n\ndef send_kafka_messages():\n    topic = \"linear-regression\"\n    random.seed(0)\n\n    def get_value(i):\n        return i + (2 * random.random() - 1) / 10\n\n    kafka_endpoint = \"talented-cow-10356-eu1-kafka.upstash.io:9092\"\n    kafka_user = os.environ[\"UPSTASH_KAFKA_USER\"]\n    kafka_pass = os.environ[\"UPSTASH_KAFKA_PASS\"]\n\n    producer = KafkaProducer(\n        bootstrap_servers=[kafka_endpoint],\n        sasl_mechanism=\"SCRAM-SHA-256\",\n        security_protocol=\"SASL_SSL\",\n        sasl_plain_username=kafka_user,\n        sasl_plain_password=kafka_pass,\n        api_version=(0, 10, 2),\n    )\n\n    for i in range(10):\n        time.sleep(1)\n        payload = {\n            \"x\": i,\n            \"y\": get_value(i),\n        }\n        producer.send(topic, json.dumps(payload).encode(\"utf-8\"))\n\n    producer.close()",
    "Code_level": "Function-level",
    "FSMID_for_test": 78,
    "right_result": "```python\nimport json\nfrom kafka import KafkaProducer\nimport time\nimport numpy as np\n\ndef send_kafka_messages():\n    kafka_user = os.getenv('UPSTASH_KAFKA_USER')\n    kafka_pass = os.getenv('UPSTASH_KAFKA_PASS')\n    kafka_topic = 'linear_regression_data'\n    \n    producer = KafkaProducer(\n        bootstrap_servers=['localhost:9092'],\n        security_protocol='SASL_SSL',\n        sasl_mechanism='SCRAM-SHA-256',\n        sasl_username=kafka_user,\n        sasl_password=kafka_pass\n    )\n    \n    x = np.linspace(0, 10, 100)\n    y = 2 * x + np.random.normal(0, 1, 100)\n    \n    for i in range(len(x)):\n        message = json.dumps({'x': x[i], 'y': y[i]})\n        producer.send(kafka_topic, message.encode('utf-8'))\n        time.sleep(1)\n    \n    producer.close()\n```"
  },
  {
    "Task_id": 265,
    "Instruction": "Task Description: Create a function that produces messages to a Kafka topic using the KafkaProducer from the kafka-python library.\n\nFunction Description: The function initializes a KafkaProducer instance, sends a message to a specified Kafka topic, ensures the message is delivered by flushing the producer buffer, and properly closes the producer to release resources.\n\nInput:\n- bootstrap_server: str - The address of the Kafka bootstrap server (e.g., 'localhost:9092').\n- topic: str - The name of the Kafka topic to which the message will be sent.\n- message: bytes - The message to be sent, encoded as bytes.\n\nOutput: None - The function does not return any value but ensures the message is sent to the specified Kafka topic.",
    "Canonical_solution": "from kafka import KafkaProducer\n\ndef produce_kafka_message(bootstrap_server, topic, message):\n    \"\"\"\n    Produces a message to a Kafka topic.\n    \n    Args:\n        bootstrap_server: Kafka bootstrap server address\n        topic: Target topic name\n        message: Message to be sent (bytes)\n    \"\"\"\n    producer = KafkaProducer(bootstrap_servers=[bootstrap_server])\n    producer.send(topic, message)\n    producer.flush()\n    producer.close()",
    "Code_level": "Function-level",
    "FSMID_for_test": 78,
    "right_result": "from kafka import KafkaProducer\nimport time\n\ndef send_message_to_kafka(bootstrap_server, topic, message):\n    producer = KafkaProducer(bootstrap_servers=bootstrap_server)\n    producer.send(topic, message)\n    producer.flush()\n    producer.close()"
  },
  {
    "Task_id": 266,
    "Instruction": "Task Description: Implement a Kafka producer wrapper class that can continuously send messages to a specified Kafka topic until stopped, with proper resource management.\n\nClass Description: A thread-safe Kafka producer wrapper that manages message production to a specified topic, with graceful shutdown capabilities.\n\nAttributes:\n- bootstrap_servers: [str] - Comma-separated list of Kafka broker addresses (default: 'localhost:9092')\n- topic: [str] - Target Kafka topic for message production (default: 'my-topic')\n- stop_event: [threading.Event] - Threading event flag to control producer execution\n- producer: [KafkaProducer] - Underlying Kafka producer instance\n\nMethods:\n- __init__(bootstrap_servers: str = 'localhost:9092', topic: str = 'my-topic') -> None - Initializes the producer with given configuration\n- stop() -> None - Signals the producer to stop sending messages\n- run() -> None - Continuously sends test messages to the topic until stopped, then closes the producer",
    "Canonical_solution": "from kafka import KafkaProducer\nimport threading\nimport time\n\nclass KafkaProducerWrapper:\n    def __init__(self, bootstrap_servers='localhost:9092', topic='my-topic'):\n        self.bootstrap_servers = bootstrap_servers\n        self.topic = topic\n        self.stop_event = threading.Event()\n        self.producer = KafkaProducer(bootstrap_servers=self.bootstrap_servers)\n\n    def stop(self):\n        self.stop_event.set()\n\n    def run(self):\n        while not self.stop_event.is_set():\n            self.producer.send(self.topic, b\"test\")\n            self.producer.send(self.topic, b\"\\xc2Hola, mundo!\")\n            time.sleep(1)\n        self.producer.close()",
    "Code_level": "Class-level",
    "FSMID_for_test": 78,
    "right_result": "```python\nfrom kafka import KafkaProducer\nfrom threading import Thread, Event\n\nclass KafkaProducerWrapper:\n    def __init__(self, bootstrap_servers: str = 'localhost:9092', topic: str = 'my-topic') -> None:\n        self.bootstrap_servers = bootstrap_servers\n        self.topic = topic\n        self.stop_event = Event()\n        self.producer = KafkaProducer(bootstrap_servers=bootstrap_servers)\n\n    def stop(self) -> None:\n        self.stop_event.set()\n\n    def run(self) -> None:\n        while not self.stop_event.is_set():\n            try:\n                self.producer.send(self.topic, b'Test message')\n                self.producer.flush()\n            except Exception as e:\n                print(f'Error sending message: {e}')\n        self.producer.close()\n```"
  },
  {
    "Task_id": 267,
    "Instruction": "Task Description: Create a Python class that implements an MQTT subscriber client using the Paho MQTT library, capable of connecting to an MQTT broker, subscribing to topics, and handling incoming messages with configurable authentication and TLS options.\n\nClass Description: The MQTTSubscriber class provides a configurable MQTT client implementation for subscribing to topics and processing messages from an MQTT broker. It supports various connection options including TLS encryption and authentication.\n\nAttributes:\n- host: str - The MQTT broker host address (default: \"mqtt.eclipseprojects.io\")\n- topic: str - The topic to subscribe to (default: \"$SYS/#\")\n- qos: int - Quality of Service level for the subscription (default: 0)\n- clientid: str - Client identifier for the MQTT connection (default: None)\n- username: str - Username for broker authentication (default: None)\n- password: str - Password for broker authentication (default: None)\n- port: int - Broker connection port (default: None, auto-detected)\n- keepalive: int - Connection keepalive period in seconds (default: 60)\n- use_tls: bool - Flag to enable TLS encryption (default: False)\n- insecure: bool - Flag to disable certificate verification (default: False)\n- cacerts: str - Path to CA certificate file (default: None)\n- tls_version: str - TLS protocol version (default: None)\n- debug: bool - Flag to enable debug logging (default: False)\n- disable_clean_session: bool - Flag to disable clean session (default: False)\n- mqttc: mqtt.Client - The Paho MQTT client instance\n\nMethods:\n- __init__(host, topic, qos, clientid, username, password, port, keepalive, use_tls, insecure, cacerts, tls_version, debug, disable_clean_session) -> None - Initializes the MQTT subscriber with configuration parameters\n- _setup_callbacks() -> None - Sets up the MQTT client callback functions\n- _configure_tls() -> None - Configures TLS settings for secure connections\n- _configure_authentication() -> None - Configures username/password authentication\n- on_connect(mqttc, obj, flags, reason_code, properties) -> None - Callback for connection events\n- on_message(mqttc, obj, msg) -> None - Callback for incoming messages\n- on_publish(mqttc, obj, mid) -> None - Callback for publish events\n- on_subscribe(mqttc, obj, mid, reason_code_list, properties) -> None - Callback for subscription events\n- on_log(mqttc, obj, level, string) -> None - Callback for debug logging\n- connect_and_subscribe() -> None - Connects to the broker and starts the message loop",
    "Canonical_solution": "import argparse\nimport ssl\nimport paho.mqtt.client as mqtt\n\nclass MQTTSubscriber:\n    def __init__(self, host=\"mqtt.eclipseprojects.io\", topic=\"$SYS/#\", qos=0, clientid=None,\n                 username=None, password=None, port=None, keepalive=60, use_tls=False,\n                 insecure=False, cacerts=None, tls_version=None, debug=False,\n                 disable_clean_session=False):\n        self.host = host\n        self.topic = topic\n        self.qos = qos\n        self.clientid = clientid\n        self.username = username\n        self.password = password\n        self.port = port\n        self.keepalive = keepalive\n        self.use_tls = use_tls\n        self.insecure = insecure\n        self.cacerts = cacerts\n        self.tls_version = tls_version\n        self.debug = debug\n        self.disable_clean_session = disable_clean_session\n\n        self.mqttc = mqtt.Client(mqtt.CallbackAPIVersion.VERSION2, self.clientid,\n                                clean_session=not self.disable_clean_session)\n\n        self._setup_callbacks()\n        self._configure_tls()\n        self._configure_authentication()\n\n    def _setup_callbacks(self):\n        self.mqttc.on_message = self.on_message\n        self.mqttc.on_connect = self.on_connect\n        self.mqttc.on_publish = self.on_publish\n        self.mqttc.on_subscribe = self.on_subscribe\n        if self.debug:\n            self.mqttc.on_log = self.on_log\n\n    def _configure_tls(self):\n        if self.use_tls or self.cacerts:\n            if self.tls_version == \"tlsv1.2\":\n                tlsVersion = ssl.PROTOCOL_TLSv1_2\n            elif self.tls_version == \"tlsv1.1\":\n                tlsVersion = ssl.PROTOCOL_TLSv1_1\n            elif self.tls_version == \"tlsv1\":\n                tlsVersion = ssl.PROTOCOL_TLSv1\n            else:\n                tlsVersion = None\n\n            cert_required = ssl.CERT_NONE if self.insecure else ssl.CERT_REQUIRED\n            self.mqttc.tls_set(ca_certs=self.cacerts, certfile=None, keyfile=None,\n                              cert_reqs=cert_required, tls_version=tlsVersion)\n            if self.insecure:\n                self.mqttc.tls_insecure_set(True)\n\n    def _configure_authentication(self):\n        if self.username or self.password:\n            self.mqttc.username_pw_set(self.username, self.password)\n\n    def on_connect(self, mqttc, obj, flags, reason_code, properties):\n        print(\"reason_code: \" + str(reason_code))\n\n    def on_message(self, mqttc, obj, msg):\n        print(msg.topic + \" \" + str(msg.qos) + \" \" + str(msg.payload))\n\n    def on_publish(self, mqttc, obj, mid):\n        print(\"mid: \" + str(mid))\n\n    def on_subscribe(self, mqttc, obj, mid, reason_code_list, properties):\n        print(\"Subscribed: \" + str(mid) + \" \" + str(reason_code_list))\n\n    def on_log(self, mqttc, obj, level, string):\n        print(string)\n\n    def connect_and_subscribe(self):\n        if self.port is None:\n            self.port = 8883 if (self.use_tls or self.cacerts) else 1883\n\n        print(f\"Connecting to {self.host} port: {self.port}\")\n        self.mqttc.connect(self.host, self.port, self.keepalive)\n        self.mqttc.subscribe(self.topic, self.qos)\n        self.mqttc.loop_forever()",
    "Code_level": "Class-level",
    "FSMID_for_test": 84,
    "right_result": "```python\nimport paho.mqtt.client as mqtt\n\nclass MQTTSubscriber:\n    def __init__(self, host=\"mqtt.eclipseprojects.io\", topic=\"$SYS/#\", qos=0, clientid=None, username=None, password=None, port=None, keepalive=60, use_tls=False, insecure=False, cacerts=None, tls_version=None, debug=False, disable_clean_session=False):\n        self.host = host\n        self.topic = topic\n        self.qos = qos\n        self.clientid = clientid\n        self.username = username\n        self.password = password\n        self.port = port\n        self.keepalive = keepalive\n        self.use_tls = use_tls\n        self.insecure = insecure\n        self.cacerts = cacerts\n        self.tls_version = tls_version\n        self.debug = debug\n        self.disable_clean_session = disable_clean_session\n        self.mqttc = mqtt.Client(client_id=self.clientid, clean_session=not self.disable_clean_session)\n\n    def _setup_callbacks(self):\n        self.mqttc.on_connect = self.on_connect\n        self.mqttc.on_message = self.on_message\n        self.mqttc.on_publish = self.on_publish\n        self.mqttc.on_subscribe = self.on_subscribe\n        if self.debug:\n            self.mqttc.on_log = self.on_log\n\n    def _configure_tls(self):\n        if self.use_tls:\n            self.mqttc.tls_set(cacertfile=self.cacerts, certfile=None, keyfile=None, cert_reqs=0 if self.insecure else mqtt.CERT_REQUIRED, tls_version=self.tls_version, ciphers=None)\n\n    def _configure_authentication(self):\n        if self.username and self.password:\n            self.mqttc.username_pw_set(self.username, self.password)\n\n    def on_connect(self, mqttc, obj, flags, reason_code, properties):\n        if reason_code == 0:\n            self.mqttc.subscribe(self.topic, self.qos)\n\n    def on_message(self, mqttc, obj, msg):\n        print(f\"Received message '{msg.payload.decode()}' on topic '{msg.topic}' with QoS {msg.qos}\")\n\n    def on_publish(self, mqttc, obj, mid):\n        print(f\"Message with mid {mid} published\")\n\n    def on_subscribe(self, mqttc, obj, mid, reason_code_list, properties):\n        print(f\"Subscribed to topic '{self.topic}' with mid {mid}\")\n\n    def on_log(self, mqttc, obj, level, string):\n        print(f\"Log: {string}\")\n\n    def connect_and_subscribe(self):\n        self._setup_callbacks()\n        self._configure_tls()\n        self._configure_authentication()\n        self.mqttc.connect(self.host, self.port, self.keepalive)\n        self.mqttc.loop_forever()\n```"
  },
  {
    "Task_id": 269,
    "Instruction": "Task Description: Implement an MQTT subscriber function in Python that connects to a broker, subscribes to a topic, and processes incoming messages using the Paho MQTT client library.\n\nFunction Description: The function `mqtt_subscriber` establishes a connection to an MQTT broker over WebSockets, subscribes to a specified topic, and continuously listens for incoming messages. It utilizes callback functions to handle connection events, incoming messages, and subscription acknowledgments.\n\nInput: None (The broker address, port, and topic are hardcoded in the function for simplicity.)\n\nOutput: None (The function prints connection status, subscription acknowledgments, and received messages to the console.)\n\n---\n\nTask Description: Implement an MQTT subscriber class in Python that encapsulates the functionality of connecting to a broker, subscribing to topics, and processing incoming messages using the Paho MQTT client library.\n\nClass Description: The `MQTTSubscriber` class provides a reusable and configurable way to subscribe to MQTT topics. It initializes with broker details and topic configurations, and it uses callback methods to handle MQTT events such as connection, message reception, and subscription.\n\nAttributes:\n\n- `client`: [mqtt.Client] - The Paho MQTT client instance used for communication.\n- `broker_address`: [str] - The address of the MQTT broker.\n- `broker_port`: [int] - The port number of the MQTT broker.\n- `topic`: [str] - The MQTT topic to subscribe to.\n- `qos`: [int] - The Quality of Service level for the subscription.\n\nMethods:\n\n- `__init__(broker_address: str, broker_port: int, topic: str, qos: int = 0) -> None` - Initializes the MQTT subscriber with broker details and topic configuration.\n- `on_connect(client: mqtt.Client, obj: Any, flags: dict, reason_code: int, properties: Any) -> None` - Callback for when the client connects to the broker.\n- `on_message(client: mqtt.Client, obj: Any, msg: mqtt.MQTTMessage) -> None` - Callback for when a message is received on the subscribed topic.\n- `on_subscribe(client: mqtt.Client, obj: Any, mid: int, reason_code_list: list, properties: Any) -> None` - Callback for when the client subscribes to a topic.\n- `start() -> None` - Connects to the broker, subscribes to the topic, and starts the MQTT loop to process messages.\n- `stop() -> None` - Stops the MQTT loop and disconnects from the broker.",
    "Canonical_solution": "import paho.mqtt.client as mqtt\n\ndef on_connect(mqttc, obj, flags, reason_code, properties):\n    print(\"reason_code: \"+str(reason_code))\n\ndef on_message(mqttc, obj, msg):\n    print(msg.topic+\" \"+str(msg.qos)+\" \"+str(msg.payload))\n\ndef on_subscribe(mqttc, obj, mid, reason_code_list, properties):\n    print(\"Subscribed: \"+str(mid)+\" \"+str(reason_code_list))\n\ndef on_log(mqttc, obj, level, string):\n    print(string)\n\ndef mqtt_subscriber():\n    mqttc = mqtt.Client(mqtt.CallbackAPIVersion.VERSION2, transport=\"websockets\")\n    mqttc.on_message = on_message\n    mqttc.on_connect = on_connect\n    mqttc.on_subscribe = on_subscribe\n    mqttc.connect(\"mqtt.eclipseprojects.io\", 80, 60)\n    mqttc.subscribe(\"$SYS/broker/version\", 0)\n    mqttc.loop_forever()",
    "Code_level": "Function-level",
    "FSMID_for_test": 84,
    "right_result": "```python\nimport paho.mqtt.client as mqtt\n\nclass MQTTSubscriber:\n    def __init__(self, broker_address: str, broker_port: int, topic: str, qos: int = 0) -> None:\n        self.client = mqtt.Client()\n        self.broker_address = broker_address\n        self.broker_port = broker_port\n        self.topic = topic\n        self.qos = qos\n\n    def on_connect(self, client: mqtt.Client, obj: Any, flags: dict, reason_code: int, properties: Any) -> None:\n        print(\"Connected to broker\")\n\n    def on_message(self, client: mqtt.Client, obj: Any, msg: mqtt.MQTTMessage) -> None:\n        print(f\"Received message: {msg.payload.decode()}\")\n\n    def on_subscribe(self, client: mqtt.Client, obj: Any, mid: int, reason_code_list: list, properties: Any) -> None:\n        print(\"Subscribed to topic\")\n\n    def start(self) -> None:\n        self.client.on_connect = self.on_connect\n        self.client.on_message = self.on_message\n        self.client.on_subscribe = self.on_subscribe\n        self.client.connect(self.broker_address, self.broker_port, 60)\n        self.client.subscribe(self.topic, self.qos)\n        self.client.loop_forever()\n\n    def stop(self) -> None:\n        self.client.loop_stop()\n        self.client.disconnect()\n```"
  },
  {
    "Task_id": 270,
    "Instruction": "Task Description: Create a Python class that implements an MQTT client for subscribing to topics and handling incoming messages, with support for custom command processing and authentication.\n\nClass Description: The MQTTClient class provides functionality to connect to an MQTT broker, subscribe to specified topics, and process incoming messages. It includes handlers for custom commands and button press events, with optional username/password authentication.\n\nAttributes:\n- host: str - The hostname or IP address of the MQTT broker\n- port: int - The port number of the MQTT broker\n- topic: str - The topic to subscribe to\n- username: str (optional) - Username for broker authentication\n- password: str (optional) - Password for broker authentication\n- client: mqtt.Client - The Paho MQTT client instance\n\nMethods:\n- __init__(host: str, port: int, topic: str, username: str=None, password: str=None) -> None - Initializes the MQTT client with connection parameters\n- on_connect(client: mqtt.Client, userdata: Any, flags: dict, rc: int) -> None - Callback for when the client connects to the broker\n- on_message(client: mqtt.Client, userdata: Any, msg: mqtt.MQTTMessage) -> None - Callback for handling incoming messages\n- start() -> None - Starts the MQTT client connection and message loop\n- custom_command(command: str) -> None - Placeholder for handling custom commands\n- buttonsinglepress() -> None - Placeholder for handling button press events",
    "Canonical_solution": "import paho.mqtt.client as mqtt\n\nclass MQTTClient:\n    def __init__(self, host, port, topic, username=None, password=None):\n        self.host = host\n        self.port = port\n        self.topic = topic\n        self.username = username\n        self.password = password\n        self.client = mqtt.Client()\n        self.client.on_connect = self.on_connect\n        self.client.on_message = self.on_message\n\n    def on_connect(self, client, userdata, flags, rc):\n        print(\"Connected with result code \"+str(rc))\n        client.subscribe(self.topic)\n\n    def on_message(self, client, userdata, msg):\n        print(\"Message from MQTT: \"+str(msg.payload.decode('utf-8')))\n        mqtt_query = str(msg.payload.decode('utf-8'))\n        if 'custom' in mqtt_query.lower():\n            mqtt_query = mqtt_query.lower()\n            mqtt_queryidx = mqtt_query.find('custom')\n            mqtt_query = mqtt_query[mqtt_queryidx:]\n            mqtt_query = mqtt_query.replace('custom',\"\",1)\n            mqtt_query = mqtt_query.strip()\n            self.custom_command(mqtt_query)\n        elif mqtt_query.lower() == 'mute':\n            self.buttonsinglepress()\n        else:\n            self.assistant.send_text_query(mqtt_query)\n\n    def start(self):\n        if self.username and self.password:\n            self.client.username_pw_set(self.username, self.password)\n        self.client.connect(self.host, self.port, 60)\n        self.client.loop_forever()\n\n    def custom_command(self, command):\n        # Placeholder for custom command handling\n        pass\n\n    def buttonsinglepress(self):\n        # Placeholder for button press handling\n        pass",
    "Code_level": "Class-level",
    "FSMID_for_test": 84,
    "right_result": "```python\nimport paho.mqtt.client as mqtt\n\nclass MQTTClient:\n    def __init__(self, host: str, port: int, topic: str, username: str=None, password: str=None) -> None:\n        self.host = host\n        self.port = port\n        self.topic = topic\n        self.username = username\n        self.password = password\n        self.client = mqtt.Client()\n        self.client.on_connect = self.on_connect\n        self.client.on_message = self.on_message\n\n    def on_connect(self, client: mqtt.Client, userdata: Any, flags: dict, rc: int) -> None:\n        if rc == 0:\n            print(\"Connected to MQTT Broker!\")\n            self.client.subscribe(self.topic)\n        else:\n            print(\"Failed to connect, return code %d\\n\", rc)\n\n    def on_message(self, client: mqtt.Client, userdata: Any, msg: mqtt.MQTTMessage) -> None:\n        print(f\"Received `{msg.payload.decode()}` from `{msg.topic}` topic\")\n\n    def start(self) -> None:\n        self.client.connect(self.host, self.port, 60)\n        self.client.loop_forever()\n\n    def custom_command(self, command: str) -> None:\n        pass\n\n    def buttonsinglepress(self) -> None:\n        pass\n```"
  },
  {
    "Task_id": 271,
    "Instruction": "Task Description: Create a Python function that establishes an MQTT client connection, subscribes to specified topics, and continuously processes incoming messages using callback functions.\n\nFunction Description: The function `wait_for_messages` initializes an MQTT client, sets up a message callback handler, subscribes to predefined topics, and enters an infinite loop to process incoming MQTT messages. It handles different message types through topic-specific callback functions.\n\nInput: None (The function uses predefined configuration and topics internally)\n\nOutput: None (The function runs indefinitely, processing messages through callbacks)\n\n---\n\nTask Description: Create a helper function to initialize and configure an MQTT client with WebSocket transport.\n\nFunction Description: The function `get_client` creates and configures an MQTT client instance with WebSocket transport, sets authentication credentials, and establishes an asynchronous connection to the broker.\n\nInput: None (Uses hardcoded connection parameters)\n\nOutput: paho.mqtt.client.Client - Returns a configured MQTT client instance\n\n---\n\nTask Description: Create a callback function to handle incoming MQTT messages and route them to appropriate handlers based on topic.\n\nFunction Description: The function `on_message_callback` processes incoming MQTT messages, logs receipt, and routes them to specific handler functions based on topic patterns. It includes error handling for message processing.\n\nInput:\n- client: paho.mqtt.client.Client - The MQTT client instance\n- userdata: Any - User-defined data passed to the callback\n- message: paho.mqtt.client.MQTTMessage - The received message object\n\nOutput: None (Messages are processed through side effects in handler functions)",
    "Canonical_solution": "import json\nimport logging\nimport paho.mqtt.client as paho\n\ndef get_client():\n    mqtt_client = paho.Client(transport=\"websockets\", client_id=\"listener\")\n    mqtt_client.enable_logger()\n    mqtt_client.username_pw_set(username=\"tavern\", password=\"tavern\")\n    mqtt_client.connect_async(host=\"broker\", port=9001)\n    return mqtt_client\n\ndef on_message_callback(client, userdata, message):\n    try:\n        logging.info(\"Received message on %s\", message.topic)\n\n        if \"devices/status\" in message.topic:\n            handle_full_status_topic(client, message)\n        elif \"lights\" in message.topic:\n            handle_lights_topic(message)\n        elif \"echo\" in message.topic:\n            handle_echo_topic(client, message)\n        elif \"ping\" in message.topic:\n            handle_ping_topic(client, message)\n        elif \"status\" in message.topic:\n            handle_status_topic(client, message)\n        else:\n            logging.warning(\"Got unexpected MQTT topic '%s'\", message.topic)\n    except Exception as e:\n        logging.exception(\"error handling message: {}\".format(e))\n\ndef wait_for_messages():\n    mqtt_client = get_client()\n    mqtt_client.on_message = on_message_callback\n    mqtt_client.reconnect()\n\n    topics = [\"lights\", \"ping\", \"echo\", \"status\"]\n\n    for t in topics:\n        device_topic = \"/device/+/{}\".format(t)\n        logging.debug(\"Subscribing to '%s'\", device_topic)\n        mqtt_client.subscribe(device_topic)\n\n    mqtt_client.subscribe(\"/devices/status\")\n\n    mqtt_client.loop_forever()",
    "Code_level": "Function-level",
    "FSMID_for_test": 84,
    "right_result": "```python\nimport paho.mqtt.client as mqtt\n\ndef wait_for_messages():\n    client = mqtt.Client()\n    client.on_message = on_message_callback\n    client.connect(\"mqtt.example.com\", 8883, 60)\n    client.subscribe([\"topic1\", \"topic2\", \"topic3\"])\n    client.loop_forever()\n\ndef get_client():\n    client = mqtt.Client()\n    client.username_pw_set(\"user\", \"pass\")\n    client.tls_set(tls_version=mqtt.ssl.PROTOCOL_TLSv1_2)\n    client.connect(\"mqtt.example.com\", 8883, 60)\n    return client\n\ndef on_message_callback(client, userdata, message):\n    print(f\"Received message '{message.payload.decode()}' on topic '{message.topic}' with QoS {message.qos}\")\n    if message.topic == \"topic1\":\n        handle_topic1(message)\n    elif message.topic == \"topic2\":\n        handle_topic2(message)\n    elif message.topic == \"topic3\":\n        handle_topic3(message)\n    else:\n        handle_unknown_topic(message)\n\ndef handle_topic1(message):\n    # Handle topic1 messages\n    pass\n\ndef handle_topic2(message):\n    # Handle topic2 messages\n    pass\n\ndef handle_topic3(message):\n    # Handle topic3 messages\n    pass\n\ndef handle_unknown_topic(message):\n    # Handle unknown topics\n    pass\n```"
  },
  {
    "Task_id": 272,
    "Instruction": "Task Description: Create a Python function that implements an MQTT subscriber using the Paho MQTT client library to connect to a broker, subscribe to topics, and continuously process incoming messages.\n\nFunction Description: The function `mqtt_subscriber` establishes a connection to an MQTT broker, subscribes to specified topics, and enters a loop to continuously handle incoming messages. It includes logging for debugging purposes.\n\nInput: None (The broker address, port, and topic are hardcoded in the function for simplicity, but could be parameterized if needed.)\n\nOutput: None (The function runs indefinitely, processing incoming messages and logging events.)",
    "Canonical_solution": "import logging\nimport paho.mqtt.client as mqtt\n\ndef mqtt_subscriber():\n    logging.basicConfig(level=logging.DEBUG)\n    mqttc = mqtt.Client(mqtt.CallbackAPIVersion.VERSION2)\n    logger = logging.getLogger(__name__)\n    mqttc.enable_logger(logger)\n    mqttc.connect(\"mqtt.eclipseprojects.io\", 1883, 60)\n    mqttc.subscribe(\"$SYS/#\", 0)\n    mqttc.loop_forever()",
    "Code_level": "Function-level",
    "FSMID_for_test": 84,
    "right_result": "```python\nimport paho.mqtt.client as mqtt\nimport logging\n\n# Set up logging\nlogging.basicConfig(level=logging.DEBUG)\n\n# The callback for when the client receives a CONNACK response from the server.\ndef on_connect(client, userdata, flags, rc):\n    logging.info(f\"Connected with result code {rc}\")\n    # Subscribing in on_connect() means that if we lose the connection and\n    # reconnect then subscriptions will be renewed.\n    client.subscribe(\"test/topic\")\n\n# The callback for when a PUBLISH message is received from the server.\ndef on_message(client, userdata, msg):\n    logging.info(f\"Received `{msg.payload.decode()}` from `{msg.topic}` topic\")\n\n# Create a client instance.\nclient = mqtt.Client()\n\n# Assign event callbacks\nclient.on_connect = on_connect\nclient.on_message = on_message\n\n# Connect to the broker\nclient.connect(\"mqtt.example.com\", 1883, 60)\n\n# Start the loop\nclient.loop_forever()\n```"
  },
  {
    "Task_id": 273,
    "Instruction": "Task Description: Implement an MQTT subscriber in Python that connects to a broker, subscribes to topics, and processes incoming messages with different callback functions for specific topic patterns.\n\nFunction Description: The function `mqtt_subscriber` establishes a connection to an MQTT broker, sets up message callbacks for specific topic patterns, subscribes to a wildcard topic, and continuously processes incoming messages. It uses the Paho MQTT client library to handle MQTT communication.\n\nInput: None (The broker address and port are hardcoded in the function)\n\nOutput: None (The function prints incoming messages to the console but does not return any value)\n\nMethods:\n\nMethod1: on_message_msgs(mosq, obj, msg) -> None - Callback function that handles messages matching the topic pattern \"$SYS/broker/messages/#\". Prints message details to the console.\nMethod2: on_message_bytes(mosq, obj, msg) -> None - Callback function that handles messages matching the topic pattern \"$SYS/broker/bytes/#\". Prints message details to the console.\nMethod3: on_message(mosq, obj, msg) -> None - Default callback function that handles all other messages not caught by specific callbacks. Prints message details to the console.\nMethod4: mqtt_subscriber() -> None - Main function that creates an MQTT client, sets up callbacks, connects to the broker, subscribes to topics, and starts the message processing loop.",
    "Canonical_solution": "import paho.mqtt.client as mqtt\n\ndef on_message_msgs(mosq, obj, msg):\n    print(\"MESSAGES: \" + msg.topic + \" \" + str(msg.qos) + \" \" + str(msg.payload))\n\ndef on_message_bytes(mosq, obj, msg):\n    print(\"BYTES: \" + msg.topic + \" \" + str(msg.qos) + \" \" + str(msg.payload))\n\ndef on_message(mosq, obj, msg):\n    print(msg.topic + \" \" + str(msg.qos) + \" \" + str(msg.payload))\n\ndef mqtt_subscriber():\n    mqttc = mqtt.Client(mqtt.CallbackAPIVersion.VERSION2)\n    mqttc.message_callback_add(\"$SYS/broker/messages/#\", on_message_msgs)\n    mqttc.message_callback_add(\"$SYS/broker/bytes/#\", on_message_bytes)\n    mqttc.on_message = on_message\n    mqttc.connect(\"mqtt.eclipseprojects.io\", 1883, 60)\n    mqttc.subscribe(\"$SYS/#\", 0)\n    mqttc.loop_forever()",
    "Code_level": "Function-level",
    "FSMID_for_test": 84,
    "right_result": "```python\nimport paho.mqtt.client as mqtt\n\ndef on_message_msgs(mosq, obj, msg):\n    print(f\"Message on topic {msg.topic}: {msg.payload.decode()}\")\n\ndef on_message_bytes(mosq, obj, msg):\n    print(f\"Message on topic {msg.topic}: {len(msg.payload)} bytes\")\n\ndef on_message(mosq, obj, msg):\n    print(f\"Message on topic {msg.topic}: {msg.payload.decode()}\")\n\ndef mqtt_subscriber():\n    client = mqtt.Client()\n    client.on_message = on_message\n    client.message_callback_add(\"$SYS/broker/messages/#\", on_message_msgs)\n    client.message_callback_add(\"$SYS/broker/bytes/#\", on_message_bytes)\n    client.connect(\"mqtt.example.com\", 1883, 60)\n    client.subscribe(\"$SYS/broker/#\")\n    client.loop_forever()\n\nmqtt_subscriber()\n```"
  },
  {
    "Task_id": 274,
    "Instruction": "Task Description: Implement an MQTT consumer class in Python that connects to an MQTT broker, subscribes to topics, and handles incoming messages, with optional authentication support.\n\nClass Description: The MQTTConsumer class provides functionality to connect to an MQTT broker, subscribe to topics, and process incoming messages. It includes callbacks for connection events, message reception, and message publishing. The class supports optional username/password authentication.\n\nAttributes:\n- final_mid: [int] - Stores the message ID of the final message to be published\n- client: [paho.mqtt.client.Client] - The MQTT client instance used for communication\n\nMethods:\n- __init__(client_id=None, host=\"mqtt.eclipseprojects.io\", port=1883, keepalive=60, username=None, password=None) -> None - Initializes the MQTT client with connection parameters and optional authentication\n- on_connect(mqttc, userdata, flags, reason_code, properties) -> None - Callback for when the client connects to the broker\n- on_message(mqttc, userdata, msg) -> None - Callback for when a message is received on a subscribed topic\n- on_publish(mqttc, userdata, mid, reason_code, properties) -> None - Callback for when a message is published\n- subscribe(topic) -> None - Subscribes to the specified topic\n- start_consuming() -> None - Starts the MQTT loop to process network traffic and messages continuously",
    "Canonical_solution": "import paho.mqtt.client as mqtt\n\nclass MQTTConsumer:\n    def __init__(self, client_id=None, host=\"mqtt.eclipseprojects.io\", port=1883, keepalive=60, username=None, password=None):\n        self.final_mid = 0\n        self.client = mqtt.Client(mqtt.CallbackAPIVersion.VERSION2, client_id)\n        self.client._userdata = False\n        self.client.on_connect = self.on_connect\n        self.client.on_message = self.on_message\n        self.client.on_publish = self.on_publish\n        \n        if username:\n            self.client.username_pw_set(username, password)\n        self.client.connect(host, port, keepalive)\n\n    def on_connect(self, mqttc, userdata, flags, reason_code, properties):\n        if userdata:\n            print(f\"reason_code: {reason_code}\")\n\n    def on_message(self, mqttc, userdata, msg):\n        if msg.retain == 0:\n            pass\n        else:\n            if userdata:\n                print(\"Clearing topic \" + msg.topic)\n            (rc, self.final_mid) = mqttc.publish(msg.topic, None, 1, True)\n\n    def on_publish(self, mqttc, userdata, mid, reason_code, properties):\n        if mid == self.final_mid:\n            sys.exit()\n\n    def subscribe(self, topic):\n        self.client.subscribe(topic)\n\n    def start_consuming(self):\n        self.client.loop_forever()",
    "Code_level": "Class-level",
    "FSMID_for_test": 84,
    "right_result": "```python\nimport paho.mqtt.client as mqtt\n\nclass MQTTConsumer:\n    def __init__(self, client_id=None, host=\"mqtt.eclipseprojects.io\", port=1883, keepalive=60, username=None, password=None):\n        self.final_mid = 0\n        self.client = mqtt.Client(client_id=client_id)\n        self.client.on_connect = self.on_connect\n        self.client.on_message = self.on_message\n        self.client.on_publish = self.on_publish\n        self.client.username_pw_set(username, password)\n        self.client.connect(host, port, keepalive)\n\n    def on_connect(self, mqttc, userdata, flags, reason_code, properties):\n        pass\n\n    def on_message(self, mqttc, userdata, msg):\n        pass\n\n    def on_publish(self, mqttc, userdata, mid, reason_code, properties):\n        pass\n\n    def subscribe(self, topic):\n        self.client.subscribe(topic)\n\n    def start_consuming(self):\n        self.client.loop_forever()\n```"
  },
  {
    "Task_id": 275,
    "Instruction": "Task Description: Implement an MQTT subscriber client in Python using the Paho MQTT library to connect to a broker, subscribe to topics, and handle incoming messages.\n\nFunction Description: The function `mqtt_subscribe` establishes a connection to an MQTT broker, subscribes to specified topics, and continuously listens for incoming messages. It utilizes callback functions to handle connection events, subscription acknowledgments, and incoming messages.\n\nInput: None (The broker address, port, and topic are hardcoded in the function for simplicity, but could be parameterized for flexibility.)\n\nOutput: None (The function prints connection status, subscription acknowledgments, and received messages to the console.)\n\n---\n\nTask Description: Create a Python class that encapsulates MQTT subscriber functionality using the Paho MQTT library, allowing for connection to a broker, topic subscription, and message handling.\n\nClass Description: The `MQTTSubscriber` class provides methods to connect to an MQTT broker, subscribe to topics, and process incoming messages. It uses callback methods to handle connection events, subscription acknowledgments, and message reception.\n\nAttributes:\n\n- `client`: [mqtt.Client] - The MQTT client instance used for communication with the broker.\n- `broker_address`: [str] - The address of the MQTT broker to connect to.\n- `broker_port`: [int] - The port number of the MQTT broker.\n- `topic`: [str] - The topic to subscribe to for receiving messages.\n\nMethods:\n\n- `__init__(self, broker_address: str, broker_port: int, topic: str) -> None` - Initializes the MQTT subscriber with broker details and subscription topic.\n- `on_connect(self, mqttc, obj, flags, reason_code, properties) -> None` - Callback for when the client connects to the broker.\n- `on_message(self, mqttc, obj, msg) -> None` - Callback for when a message is received on a subscribed topic.\n- `on_subscribe(self, mqttc, obj, mid, reason_code_list, properties) -> None` - Callback for when the client subscribes to a topic.\n- `connect_and_subscribe(self) -> None` - Connects to the broker and subscribes to the specified topic.\n- `start(self) -> None` - Starts the MQTT loop to process network traffic and messages.",
    "Canonical_solution": "import paho.mqtt.client as mqtt\n\ndef on_connect(mqttc, obj, flags, reason_code, properties):\n    print(\"reason_code: \" + str(reason_code))\n\ndef on_message(mqttc, obj, msg):\n    print(msg.topic + \" \" + str(msg.qos) + \" \" + str(msg.payload))\n\ndef on_subscribe(mqttc, obj, mid, reason_code_list, properties):\n    print(\"Subscribed: \" + str(mid) + \" \" + str(reason_code_list))\n\ndef mqtt_subscribe():\n    mqttc = mqtt.Client(mqtt.CallbackAPIVersion.VERSION2)\n    mqttc.on_message = on_message\n    mqttc.on_connect = on_connect\n    mqttc.on_subscribe = on_subscribe\n    mqttc.connect(\"mqtt.eclipseprojects.io\", 1883, 60)\n    mqttc.subscribe(\"$SYS/#\")\n    mqttc.loop_forever()",
    "Code_level": "Function-level",
    "FSMID_for_test": 84,
    "right_result": "```python\nimport paho.mqtt.client as mqtt\n\nclass MQTTSubscriber:\n    def __init__(self, broker_address: str, broker_port: int, topic: str) -> None:\n        self.client = mqtt.Client()\n        self.broker_address = broker_address\n        self.broker_port = broker_port\n        self.topic = topic\n        self.client.on_connect = self.on_connect\n        self.client.on_message = self.on_message\n        self.client.on_subscribe = self.on_subscribe\n\n    def on_connect(self, mqttc, obj, flags, reason_code, properties):\n        print(\"Connected to MQTT Broker!\")\n\n    def on_message(self, mqttc, obj, msg):\n        print(f\"Received message '{msg.payload.decode()}' on topic '{msg.topic}'\")\n\n    def on_subscribe(self, mqttc, obj, mid, reason_code_list, properties):\n        print(f\"Subscribed to topic '{self.topic}' with mid {mid}\")\n\n    def connect_and_subscribe(self) -> None:\n        self.client.connect(self.broker_address, self.broker_port, 60)\n        self.client.subscribe(self.topic, 0)\n\n    def start(self) -> None:\n        self.client.loop_forever()\n\n# Example usage\n# mqtt_subscriber = MQTTSubscriber(\"mqtt.example.com\", 1883, \"test/topic\")\n# mqtt_subscriber.connect_and_subscribe()\n# mqtt_subscriber.start()\n```"
  },
  {
    "Task_id": 278,
    "Instruction": "Task Description: Create a function to execute system commands using subprocess with pipe-based inter-process communication in Python.\n\nFunction Description: The function should run a system command in a new process, capture its output and error streams, and optionally return a boolean indicating success/failure instead of the output. It should use subprocess.PIPE for communication between processes.\n\nInput:\n- cmd: [str] - The system command to be executed\n- is_ok: [bool] (optional, default=False) - Flag to determine return type (True/False for success/failure if True, output/error if False)\n\nOutput:\n- If is_ok=True: [bool] - Returns True if command executed successfully (returncode=0), False otherwise\n- If is_ok=False: [tuple] - Returns a tuple containing (output, error) as bytes objects from stdout and stderr respectively",
    "Canonical_solution": "import subprocess\n\ndef run_cmd(cmd, is_ok=False):\n    \"\"\"\n    Run cmd\n    \"\"\"\n    p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE,\n                         shell=True, executable='/bin/bash')\n\n    output, err = p.communicate()\n    if is_ok:\n        if p.returncode == 0:\n            return True\n        else:\n            return False\n\n    return output, err",
    "Code_level": "Function-level",
    "FSMID_for_test": 76,
    "right_result": "```python\nimport subprocess\n\ndef execute_command(cmd, is_ok=False):\n    process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=False)\n    stdout, stderr = process.communicate()\n    if is_ok:\n        return process.returncode == 0\n    else:\n        return stdout, stderr\n```"
  },
  {
    "Task_id": 28,
    "Instruction": "Task Description: Implement a class that interacts with Alibaba Cloud's Flash Recognizer service to convert audio files into text with timing information using HTTP client functionality.\n\nClass Description: AliRecognitionService is a client for Alibaba Cloud's speech recognition API that processes audio files and returns recognition results with timestamps.\n\nAttributes:\nALI_ACCESS_AKID: str - Alibaba Cloud access key ID for authentication\nALI_ACCESS_AKKEY: str - Alibaba Cloud access key secret for authentication\nALI_APP_KEY: str - Application key for the recognition service\ntoken: str - Authentication token obtained using access credentials\nformat: str - Audio file format (default: \"wav\")\nsampleRate: int - Audio sample rate in Hz (default: 16000)\nurl: str - API endpoint URL for the recognition service\n\nMethods:\n__init__(access_key_id: str, access_key_secret: str, app_key: str) -> None - Initializes the recognition service with authentication credentials and application key\nprocess(audioFile: str) -> List[AliRecognitionResult] - Processes an audio file and returns a list of recognition results containing text with begin/end timestamps\n\nHelper Class:\nAliRecognitionResult: A data class to store recognition results with text and timing information\n__init__(text: str, begin_time: int, end_time: int) -> None - Initializes a recognition result with text and its timing information",
    "Canonical_solution": "import http.client\nimport json\nfrom typing import List\n\nclass AliRecognitionResult:\n    def __init__(self, text, begin_time, end_time):\n        self.text = text\n        self.begin_time = begin_time\n        self.end_time = end_time\n\nclass AliRecognitionService:\n    def __init__(self, access_key_id: str, access_key_secret: str, app_key: str):\n        self.ALI_ACCESS_AKID = access_key_id\n        self.ALI_ACCESS_AKKEY = access_key_secret\n        self.ALI_APP_KEY = app_key\n        self.token = getToken(self.ALI_ACCESS_AKID, self.ALI_ACCESS_AKKEY)\n        self.format = \"wav\"\n        self.sampleRate = 16000\n        self.url = 'https://nls-gateway-cn-shanghai.aliyuncs.com/stream/v1/FlashRecognizer'\n\n    def process(self, audioFile: str) -> List[AliRecognitionResult]:\n        result_list = []\n        request = self.url + '?appkey=' + self.ALI_APP_KEY\n        request = request + '&token=' + self.token\n        request = request + '&format=' + self.format\n        request = request + '&sample_rate=' + str(self.sampleRate)\n\n        with open(audioFile, mode='rb') as f:\n            audioContent = f.read()\n        \n        host = 'nls-gateway-cn-shanghai.aliyuncs.com'\n        httpHeaders = {'Content-Length': len(audioContent)}\n        \n        conn = http.client.HTTPSConnection(host)\n        conn.request(method='POST', url=request, body=audioContent, headers=httpHeaders)\n        response = conn.getresponse()\n        \n        body = response.read()\n        try:\n            body = json.loads(body)\n            status = body['status']\n            if status == 20000000:\n                result = body['flash_result']\n                if 'sentences' in result:\n                    for sentence in result['sentences']:\n                        result_list.append(\n                            AliRecognitionResult(sentence['text'], sentence['begin_time'], sentence['end_time']))\n        except ValueError:\n            print('The response is not json format string')\n        finally:\n            conn.close()\n        return result_list",
    "Code_level": "Class-level",
    "FSMID_for_test": 56,
    "right_result": "```python\nimport http.client\nimport hashlib\nimport hmac\nimport json\nfrom datetime import datetime\nfrom typing import List\n\nclass AliRecognitionService:\n    def __init__(self, access_key_id: str, access_key_secret: str, app_key: str) -> None:\n        self.ALI_ACCESS_AKID = access_key_id\n        self.ALI_ACCESS_AKKEY = access_key_secret\n        self.ALI_APP_KEY = app_key\n        self.token = self.get_token()\n        self.format = \"wav\"\n        self.sampleRate = 16000\n        self.url = \"https://flashrecognition.cn-north-1.aliyuncs.com\"\n\n    def process(self, audioFile: str) -> List:\n        headers = {\n            \"Content-Type\": \"audio/wav\",\n            \"Authorization\": f\"Bearer {self.token}\"\n        }\n        with open(audioFile, 'rb') as f:\n            audio_data = f.read()\n        conn = http.client.HTTPSConnection(\"flashrecognition.cn-north-1.aliyuncs.com\")\n        conn.request(\"POST\", \"/recognize\", body=audio_data, headers=headers)\n        response = conn.getresponse()\n        data = response.read()\n        conn.close()\n        return json.loads(data.decode('utf-8'))\n\nclass AliRecognitionResult:\n    def __init__(self, text: str, begin_time: int, end_time: int) -> None:\n        self.text = text\n        self.begin_time = begin_time\n        self.end_time = end_time\n```"
  },
  {
    "Task_id": 280,
    "Instruction": "Task Description: Implement a function to execute system commands and handle input/output communication between processes using pipes.\n\nFunction Description: The function `runCmd` executes a system command in a subprocess and facilitates communication via pipes. It can handle both cases where input data is provided to the subprocess and where no input is required. The function captures the standard output, standard error, and return code of the executed command.\n\nInput:\n- `cmd`: [List or String] - The command to be executed, either as a list of arguments or a single string.\n- `data`: [Bytes, optional] - Input data to be sent to the subprocess's standard input. Defaults to None if no input is required.\n\nOutput:\n- A tuple containing:\n  - `stdout`: [String] - The decoded standard output of the command.\n  - `stderr`: [String] - The decoded standard error of the command.\n  - `returncode`: [Integer] - The return code of the executed command.",
    "Canonical_solution": "import sys\nimport subprocess\n\ndef runCmd(cmd, data=None):\n    if input is None:\n        p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        stdout, stderr = p.communicate()\n    else:\n        p = subprocess.Popen(cmd, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        stdout, stderr = p.communicate(input=data)\n\n    return stdout.decode('utf-8'), stderr.decode('utf-8'), p.returncode",
    "Code_level": "Function-level",
    "FSMID_for_test": 76,
    "right_result": "import subprocess\n\ndef runCmd(cmd, data=None):\n    process = subprocess.Popen(cmd, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)\n    stdout, stderr = process.communicate(data)\n    return stdout, stderr, process.returncode"
  },
  {
    "Task_id": 281,
    "Instruction": "Task Description: Create a function that runs a Python subprocess with pipe communication, compares the output with expected results from a JSON file, and asserts their equality.\n\nFunction Description: The function `run_subprocess_with_pipe` executes a Python subprocess with given arguments, captures its output through a pipe, and compares this output with expected results loaded from a JSON file. The comparison includes checking the length of the results and verifying that all elements match between the expected and actual outputs.\n\nInput:\n- `expected_file`: [str] - Path to the JSON file containing the expected output data.\n- `*args`: [variable arguments] - Additional command-line arguments to pass to the subprocess.\n\nOutput: None (The function performs assertions to validate the output against the expected results. If assertions fail, an AssertionError is raised.)",
    "Canonical_solution": "import sys\nimport subprocess\nimport json\n\ndef run_subprocess_with_pipe(expected_file, *args):\n    dg = subprocess.Popen([sys.executable] + list(args), stdout=subprocess.PIPE)\n    stdout, _ = dg.communicate()\n    expected = json.load(open(expected_file))\n    result = json.loads(stdout.decode())\n    \n    assert len(expected) == len(result)\n    assert all(r in result for r in expected)\n    assert all(r in expected for r in result)",
    "Code_level": "Function-level",
    "FSMID_for_test": 76,
    "right_result": "```python\nimport subprocess\nimport json\n\ndef run_subprocess_with_pipe(expected_file, *args):\n    with open(expected_file, 'r') as f:\n        expected_results = json.load(f)\n    \n    process = subprocess.Popen(args, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)\n    actual_output, _ = process.communicate()\n    \n    assert len(actual_output) == len(expected_results), \"Output length does not match expected results\"\n    assert actual_output == expected_results, \"Output does not match expected results\"\n```"
  },
  {
    "Task_id": 282,
    "Instruction": "Task Description: The task involves creating Python functions that utilize subprocess and pipes to execute shell commands and handle their input/output streams. The functions should be able to run commands directly or filter text through commands in a shell environment.\n\nFunction Description: \n\n1. `run_and_read`: Executes a shell command and captures its standard output and error streams, then returns the decoded output (prioritizing stdout over stderr if available).\n\n2. `filter_region`: Takes a text input, pipes it through a shell command (using the system's default shell or a specified shell), and returns the processed output from the command.\n\nInput:\n\n- For `run_and_read`:\n  - `view`: (object) - A view object (contextual, typically from an editor/IDE)\n  - `cmd`: (str) - The shell command to execute\n\n- For `filter_region`:\n  - `view`: (object) - A view object (contextual, typically from an editor/IDE)\n  - `text`: (str) - The text to be processed by the command\n  - `command`: (str) - The shell command to process the text\n\nOutput:\n\n- For `run_and_read`: (str) - The decoded output from the command (stdout if available, otherwise stderr)\n- For `filter_region`: (str) - The decoded output from the command after processing the input text",
    "Canonical_solution": "import os\nimport subprocess\nfrom subprocess import PIPE\n\ndef run_and_read(view, cmd):\n    out, err = subprocess.Popen([cmd],\n            stdout=PIPE,\n            stderr=PIPE,\n            shell=True).communicate()\n    try:\n        return (out or err).decode('utf-8')\n    except AttributeError:\n        return ''\n\ndef filter_region(view, text, command):\n    shell = view.settings().get('VintageousEx_linux_shell')\n    shell = shell or os.path.expandvars(\"$SHELL\")\n    p = subprocess.Popen([shell, '-c', 'echo \"%s\" | %s' % (text, command)],\n             stderr=subprocess.PIPE,\n             stdout=subprocess.PIPE)\n    return p.communicate()[0][:-1].decode('utf-8')",
    "Code_level": "Function-level",
    "FSMID_for_test": 76,
    "right_result": "```python\nimport subprocess\n\ndef run_and_read(view, cmd):\n    process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True, shell=True)\n    stdout, stderr = process.communicate()\n    return stdout if stdout else stderr\n\ndef filter_region(view, text, command):\n    process = subprocess.Popen(command, stdin=subprocess.PIPE, stdout=subprocess.PIPE, text=True, shell=True)\n    stdout, _ = process.communicate(input=text)\n    return stdout\n```"
  },
  {
    "Task_id": 283,
    "Instruction": "Task Description: Create a function that executes a command in a subprocess using Python's subprocess module, capturing and returning the output and error streams along with the return code.\n\nFunction Description: The function `runvol` executes a given command (constructed from Python interpreter path, volatility script path, and additional arguments) as a subprocess. It captures the standard output, standard error, and return code of the subprocess, then returns these values after printing them for debugging purposes.\n\nInput:\n- `args`: [List[str]] - Additional command-line arguments to pass to the volatility script\n- `volatility`: [str] - Path to the volatility script to be executed\n- `python`: [str] - Path to the Python interpreter to use for execution\n\nOutput:\n- Returns a tuple containing:\n  - `returncode`: [int] - The exit code of the subprocess\n  - `stdout`: [bytes] - The standard output of the subprocess\n  - `stderr`: [bytes] - The standard error of the subprocess",
    "Canonical_solution": "import os\nimport subprocess\nimport sys\n\ndef runvol(args, volatility, python):\n    volpy = volatility\n    python_cmd = python\n\n    cmd = [python_cmd, volpy] + args\n    print(\" \".join(cmd))\n    p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    stdout, stderr = p.communicate()\n    print(\"stdout:\")\n    sys.stdout.write(str(stdout))\n    print(\"\")\n    print(\"stderr:\")\n    sys.stdout.write(str(stderr))\n    print(\"\")\n\n    return p.returncode, stdout, stderr",
    "Code_level": "Function-level",
    "FSMID_for_test": 76,
    "right_result": "```python\nimport subprocess\n\ndef runvol(args, volatility, python):\n    command = [python, volatility] + args\n    process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=False)\n    stdout, stderr = process.communicate()\n    returncode = process.returncode\n    print(f\"Return Code: {returncode}\")\n    print(f\"Standard Output: {stdout.decode()}\")\n    print(f\"Standard Error: {stderr.decode()}\")\n    return returncode, stdout, stderr\n```"
  },
  {
    "Task_id": 284,
    "Instruction": "Task Description: Write a Python function that executes a Perl script (conlleval) via subprocess to evaluate model scores from a given file and returns the accuracy, precision, recall, and F1 score.\n\nFunction Description: The function uses subprocess.PIPE to create a pipe for inter-process communication with a Perl script. It starts the Perl process, feeds it input from a specified file, captures the output, and parses the results to extract evaluation metrics.\n\nInput:\n- path: str - The file path containing the input data to be evaluated by the Perl script\n\nOutput:\n- tuple[float, float, float, float] - A tuple containing four float values representing accuracy, precision, recall, and F1 score in that order",
    "Canonical_solution": "import subprocess\n\ndef scores(path):\n    bashCommand = 'perl conlleval'\n    process = subprocess.Popen(bashCommand.split(), stdout=subprocess.PIPE,\n                               stdin=open(path))\n    output, error = process.communicate()\n    output = output.decode().split('\\n')[1].split('%; ')\n    output = [out.split(' ')[-1] for out in output]\n    acc, prec, recall, fb1 = tuple(output)\n    return float(acc), float(prec), float(recall), float(fb1)",
    "Code_level": "Function-level",
    "FSMID_for_test": 76,
    "right_result": "```python\nimport subprocess\n\ndef evaluate_model(path):\n    with open(path, 'r') as file:\n        input_data = file.read()\n\n    process = subprocess.Popen(['perl', 'conlleval'], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    stdout, stderr = process.communicate(input_data.encode())\n\n    if process.returncode != 0:\n        raise Exception(f\"Perl script failed with error: {stderr.decode()}\")\n\n    output = stdout.decode()\n    accuracy, precision, recall, f1_score = map(float, output.strip().split('\\t'))\n    return accuracy, precision, recall, f1_score\n```"
  },
  {
    "Task_id": 285,
    "Instruction": "Task Description: Create a function that executes a command-line process (specifically 'exodus') with given arguments and options, handling input/output through pipes, and returning the process's exit code and output streams.\n\nFunction Description: The function `run_exodus` launches an external 'exodus' process with specified arguments and options. It manages inter-process communication using pipes for stdin, stdout, and stderr. The function supports optional stdin input and returns the process's exit code along with captured stdout and stderr outputs.\n\nInput:\n- `args`: [List[str]] - Command-line arguments to pass to the 'exodus' process\n- `**options`: [Dict] - Additional subprocess.Popen options, including:\n  - `stdin`: [str, optional] - Input content to pipe into the process's stdin (encoded as UTF-8)\n  - `universal_newlines`: [bool, optional] - Flag to handle text streams (default: True)\n\nOutput:\n- Tuple containing:\n  - `returncode`: [int] - Exit status of the process\n  - `stdout`: [str] - Captured standard output\n  - `stderr`: [str] - Captured standard error",
    "Canonical_solution": "import os\nimport subprocess\n\ndef run_exodus(args, **options):\n    options['universal_newlines'] = options.get('universal_newlines', True)\n\n    # Allow specifying content to pipe into stdin, with options['stdin']\n    if 'stdin' in options:\n        input = options['stdin'].encode('utf-8')\n        options['stdin'] = subprocess.PIPE\n    else:\n        input = None\n\n    process = subprocess.Popen(\n        ['exodus'] + args, stdout=subprocess.PIPE, stderr=subprocess.PIPE, **options)\n    stdout, stderr = process.communicate(input=input)\n    return process.returncode, stdout, stderr",
    "Code_level": "Function-level",
    "FSMID_for_test": 76,
    "right_result": "import subprocess\n\ndef run_exodus(args, **options):\n    stdin = options.get('stdin', None)\n    universal_newlines = options.get('universal_newlines', True)\n    \n    with subprocess.Popen(args, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=universal_newlines) as proc:\n        if stdin:\n            stdout, stderr = proc.communicate(stdin.encode('utf-8'))\n        else:\n            stdout, stderr = proc.communicate()\n    \n    return proc.returncode, stdout, stderr"
  },
  {
    "Task_id": 287,
    "Instruction": "Task Description: Create a function that inspects the value of a Python object in a running process by its memory address using GDB debugger through subprocess communication.\n\nFunction Description: The function uses GDB to attach to a running Python process and inspect the value of a Python object at a specified memory address. It establishes inter-process communication using subprocess.PIPE to capture GDB's output and parse the result.\n\nInput:\n- pid: [int] - Process ID of the target Python process\n- address: [str/int] - Memory address of the Python object to inspect (can be hex string or integer)\n\nOutput:\n- [str] - The string representation of the inspected Python object as returned by GDB, or None if the address couldn't be resolved",
    "Canonical_solution": "import sys\nimport subprocess\n\nencoding = sys.getdefaultencoding()\n\ndef inspect(pid, address):\n    \"Return the value of an object in a given process at the specified address\"\n    cmd = ' '.join([\n        'gdb --quiet -p %s -batch' % pid,\n        '-eval-command=\"print (PyObject *)%s\"' % address,\n    ])\n    p = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE)\n    for line in p.communicate()[0].decode(encoding).split('\\n'):\n        if line.startswith('$1 = '):\n            return line[5:]",
    "Code_level": "Function-level",
    "FSMID_for_test": 76,
    "right_result": "```python\nimport subprocess\n\ndef inspect_object_with_gdb(pid, address):\n    command = f\"gdb -p {pid} -ex 'print *(PyObject **)0x{address:X}'\"\n    process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    stdout, stderr = process.communicate()\n    if process.returncode == 0:\n        return stdout.decode().strip()\n    else:\n        return None\n```"
  },
  {
    "Task_id": 288,
    "Instruction": "Task Description: Implement functions to execute system commands and manage subprocesses in Python, allowing for both simple command execution and more controlled process management with input/output handling.\n\nFunction Description: The module provides two main functions for subprocess management: `execute()` for running commands with comprehensive output handling, and `popen()` for creating Popen objects with predefined pipe configurations.\n\nInput:\n- For `execute()`:\n  - cmd: [string/list] - Command to execute (as string or argument list)\n  - shell: [bool, optional] - Whether to use shell execution (default False)\n  - poll_period: [float, optional] - Unused in current implementation\n  - catch_out: [bool, optional] - Whether to capture output (default False)\n  - executable: [string, optional] - Path to executable to use\n  - env: [dict, optional] - Environment variables for subprocess\n\n- For `popen()`:\n  - cmnd: [string] - Command string to execute\n\nOutput:\n- For `execute()`:\n  - Returns tuple: (returncode: int, stdout: bytes/str, stderr: bytes/str)\n  \n- For `popen()`:\n  - Returns: subprocess.Popen object configured with pipes for all streams",
    "Canonical_solution": "import subprocess\nimport shlex\nimport logging\nfrom six import string_types\n\ndef execute(cmd, shell=False, poll_period=1.0, catch_out=False, executable=None, env=None):\n    log = logging.getLogger(__name__)\n    log.info(\"Starting: %s\", cmd)\n\n    stdout = \"\"\n    stderr = \"\"\n\n    if not shell and isinstance(cmd, string_types):\n        cmd = shlex.split(cmd)\n    if not executable:\n        executable = None\n\n    if catch_out:\n        process = subprocess.Popen(\n            cmd,\n            shell=shell,\n            stderr=subprocess.PIPE,\n            stdout=subprocess.PIPE,\n            close_fds=True,\n            env=env,\n            executable=executable,\n        )\n    else:\n        process = subprocess.Popen(cmd, shell=shell, close_fds=True, env=env, executable=executable)\n\n    stdout, stderr = process.communicate()\n    if stderr:\n        log.error(\"There were errors:\\n%s\", stderr)\n\n    if stdout:\n        log.debug(\"Process output:\\n%s\", stdout)\n    returncode = process.returncode\n    log.info(\"Process cmd: %s \u2013 exit code: %s\", cmd, returncode)\n    return returncode, stdout, stderr\n\ndef popen(cmnd):\n    return subprocess.Popen(\n        cmnd,\n        bufsize=0,\n        close_fds=True,\n        shell=True,\n        stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE,\n        stdin=subprocess.PIPE,\n    )",
    "Code_level": "Function-level",
    "FSMID_for_test": 76,
    "right_result": "```python\nimport subprocess\n\ndef execute(cmd, shell=False, poll_period=None, catch_out=False, executable=None, env=None):\n    process = subprocess.Popen(cmd, shell=shell, stdout=subprocess.PIPE, stderr=subprocess.PIPE, executable=executable, env=env)\n    stdout, stderr = process.communicate()\n    return process.returncode, stdout.decode() if catch_out else stdout, stderr.decode() if catch_out else stderr\n\ndef popen(cmnd):\n    return subprocess.Popen(cmnd, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n```"
  },
  {
    "Task_id": 290,
    "Instruction": "Task Description: Implement a class that interfaces with the Phonetisaurus G2P (Grapheme-to-Phoneme) tool to convert words to their phonetic pronunciations using a pre-trained FST (Finite State Transducer) model.\n\nClass Description: The PhonetisaurusG2P class provides an interface to the Phonetisaurus G2P tool, allowing for the conversion of words or files containing words to their phonetic pronunciations. It handles process execution, error logging, and output parsing.\n\nAttributes:\n- fst_model: [str] - The file path to the pre-trained FST model used for grapheme-to-phoneme conversion.\n- nbest: [int/None] - The number of best pronunciations to return for each word. If None, only the top pronunciation is returned.\n- _logger: [logging.Logger] - A logger instance for debugging and error logging.\n\nMethods:\n- __init__(fst_model=None, nbest=None) -> [None] - Initializes the PhonetisaurusG2P instance with the path to the FST model and the number of best pronunciations to return.\n  - Input Parameters:\n    - fst_model: [str] - Path to the FST model file.\n    - nbest: [int/None] - Number of best pronunciations to return (default: None).\n  - Return Type: None\n\n- execute(input, is_file=False) -> [dict] - Executes the Phonetisaurus G2P tool to convert the input word or file to phonetic pronunciations.\n  - Input Parameters:\n    - input: [str] - The input word or file path containing words to be converted.\n    - is_file: [bool] - Flag indicating whether the input is a file (default: False).\n  - Return Type: dict - A dictionary where keys are words and values are lists of pronunciations. Each pronunciation is a string.\n  - Description: This method uses subprocess.Popen to run the Phonetisaurus G2P tool, captures stdout and stderr, parses the output, and returns the results in a structured format. Errors are logged, and exceptions are raised for execution failures.",
    "Canonical_solution": "import os\nimport re\nimport subprocess\nimport logging\n\nclass PhonetisaurusG2P:\n    PATTERN = re.compile(r'^(?P<word>.+)\\t(?P<precision>\\d+\\.\\d+)\\t<s> ' +\n                         r'(?P<pronounciation>.*) </s>', re.MULTILINE)\n\n    def __init__(self, fst_model=None, nbest=None):\n        self._logger = logging.getLogger(__name__)\n        self.fst_model = os.path.abspath(fst_model)\n        self.nbest = nbest\n\n    def execute(self, input, is_file=False):\n        cmd = ['phonetisaurus-g2p',\n               '--model=%s' % self.fst_model,\n               '--input=%s' % input,\n               '--words']\n\n        if is_file:\n            cmd.append('--isfile')\n\n        if self.nbest is not None:\n            cmd.extend(['--nbest=%d' % self.nbest])\n\n        cmd = [str(x) for x in cmd]\n        try:\n            proc = subprocess.Popen(cmd, stdout=subprocess.PIPE,\n                                    stderr=subprocess.PIPE)\n            stdoutdata, stderrdata = proc.communicate()\n        except OSError:\n            self._logger.error(\"Error occured while executing command '%s'\",\n                             ' '.join(cmd), exc_info=True)\n            raise\n\n        if stderrdata:\n            for line in stderrdata.splitlines():\n                message = line.strip()\n                if message:\n                    self._logger.debug(message)\n\n        if proc.returncode != 0:\n            self._logger.error(\"Command '%s' return with exit status %d\",\n                             ' '.join(cmd), proc.returncode)\n            raise OSError(\"Command execution failed\")\n\n        result = {}\n        if stdoutdata is not None:\n            for word, precision, pronounc in self.PATTERN.findall(stdoutdata):\n                if word not in result:\n                    result[word] = []\n                result[word].append(pronounc)\n        return result",
    "Code_level": "Class-level",
    "FSMID_for_test": 76,
    "right_result": "```python\nimport subprocess\nimport logging\n\nclass PhonetisaurusG2P:\n    def __init__(self, fst_model=None, nbest=None):\n        self.fst_model = fst_model\n        self.nbest = nbest\n        self._logger = logging.getLogger(__name__)\n\n    def execute(self, input, is_file=False):\n        try:\n            cmd = ['phonetisaurus-g2p', '-i', input, '-o', '-', '-m', self.fst_model]\n            if self.nbest is not None:\n                cmd.extend(['-n', str(self.nbest)])\n            process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)\n            stdout, stderr = process.communicate()\n            if process.returncode != 0:\n                raise Exception(f\"Phonetisaurus G2P tool failed with error: {stderr}\")\n            return self.parse_output(stdout)\n        except Exception as e:\n            self._logger.error(f\"Error executing Phonetisaurus G2P tool: {e}\")\n            raise\n\n    def parse_output(self, output):\n        results = {}\n        for line in output.strip().split('\\n'):\n            if line:\n                word, pronunciation = line.split('\\t')\n                if word not in results:\n                    results[word] = []\n                results[word].append(pronunciation)\n        return results\n```"
  },
  {
    "Task_id": 291,
    "Instruction": "Task Description: Implement a function that evaluates coreference resolution results using the official CoNLL-2012 evaluation script, parsing and returning the recall, precision, and F1 scores.\n\nFunction Description: The function `official_conll_eval` executes the official CoNLL-2012 evaluation script as a subprocess, captures its output, and parses the recall, precision, and F1 scores from the output. It can optionally log the official output for debugging or reporting purposes.\n\nInput:\n- `gold_path` (str): Path to the file containing gold-standard coreference annotations.\n- `predicted_path` (str): Path to the file containing predicted coreference annotations.\n- `metric` (str): The evaluation metric to compute (e.g., \"muc\", \"bcub\", \"ceafe\").\n- `official_stdout` (bool, optional): If True, logs the official evaluation script output. Defaults to True.\n\nOutput:\n- Returns a dictionary with the following keys:\n  - \"r\" (float): Recall score in percentage.\n  - \"p\" (float): Precision score in percentage.\n  - \"f\" (float): F1 score in percentage.",
    "Canonical_solution": "import re\nimport subprocess\nimport logging\n\nlogger = logging.getLogger(__name__)\nCOREF_RESULTS_REGEX = re.compile(r\".*Coreference: Recall: \\([0-9.]+ / [0-9.]+\\) ([0-9.]+)%\\tPrecision: \\([0-9.]+ / [0-9.]+\\) ([0-9.]+)%\\tF1: ([0-9.]+)%.*\", re.DOTALL)\n\ndef official_conll_eval(gold_path, predicted_path, metric, official_stdout=True):\n    cmd = [\"conll-2012/scorer/v8.01/scorer.pl\", metric, gold_path, predicted_path, \"none\"]\n    process = subprocess.Popen(cmd, stdout=subprocess.PIPE)\n    stdout, stderr = process.communicate()\n    process.wait()\n\n    stdout = stdout.decode(\"utf-8\")\n    if stderr is not None:\n        logger.error(stderr)\n\n    if official_stdout:\n        logger.info(\"Official result for {}\".format(metric))\n        logger.info(stdout)\n\n    coref_results_match = re.match(COREF_RESULTS_REGEX, stdout)\n    recall = float(coref_results_match.group(1))\n    precision = float(coref_results_match.group(2))\n    f1 = float(coref_results_match.group(3))\n    return {\"r\": recall, \"p\": precision, \"f\": f1}",
    "Code_level": "Function-level",
    "FSMID_for_test": 76,
    "right_result": "```python\nimport subprocess\nimport re\n\ndef official_conll_eval(gold_path, predicted_path, metric, official_stdout=True):\n    command = f\"python3 conll-eval.py -g {gold_path} -p {predicted_path} -m {metric}\"\n    process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)\n    stdout, stderr = process.communicate()\n\n    if official_stdout:\n        print(stdout.decode())\n\n    if process.returncode != 0:\n        raise Exception(f\"Error running conll-eval.py: {stderr.decode()}\")\n\n    output = stdout.decode()\n    scores = re.findall(r\"Recall: (\\d+\\.\\d+)%\", output)\n    precision = re.findall(r\"Precision: (\\d+\\.\\d+)%\", output)\n    f1 = re.findall(r\"F1: (\\d+\\.\\d+)%\", output)\n\n    return {\n        \"r\": float(scores[0]) if scores else None,\n        \"p\": float(precision[0]) if precision else None,\n        \"f\": float(f1[0]) if f1 else None\n    }\n```"
  },
  {
    "Task_id": 292,
    "Instruction": "Task Description: Create a Python class that facilitates executing system commands with options for streaming output, sudo execution, and handling both string and list-based commands.\n\nClass Description: The ProcessRunner class provides a flexible way to execute system commands with various configurations. It handles command execution with options for streaming output in real-time, sudo privileges, and supports both string and list-formatted commands. The class manages subprocess creation, output capture, error handling, and return code collection.\n\nAttributes:\n- None (This class doesn't maintain persistent attributes between method calls)\n\nMethods:\n- _read_output(pipe, q) -> None - Private method that continuously reads from a pipe and puts data into a queue for output streaming.\n- _stream_output(comm, shell) -> tuple - Executes a command with streaming output capability, returns (stdout, stderr, returncode).\n- _decode(value) -> str - Helper method to decode byte strings to unicode (Python 3 compatibility).\n- _run_command(comm, shell) -> tuple - Executes a command and returns output after completion, returns (stdout, stderr, returncode).\n- execute(command_list, leave_on_fail) -> tuple/list - Main interface for command execution, handles multiple commands with various options. Returns single result tuple or list of tuples depending on input.\n\nInput Parameters:\n- For execute():\n  - command_list: dict/list - Either a single command dictionary or list of command dictionaries\n  - leave_on_fail: bool - Whether to stop execution if a command fails (default: False)\n- Command dictionary structure:\n  - args: list/str - The command to execute (either as list or string)\n  - shell: bool - Whether to use shell execution (default: False)\n  - stream: bool - Whether to stream output in real-time (default: False)\n  - sudo: bool - Whether to execute with sudo (default: False)\n\nOutput:\n- For single command: tuple (stdout_output, stderr_output, return_code)\n- For multiple commands: list of tuples [(stdout, stderr, returncode), ...]\n- On error: tuple (\"\", \"Command not found!\", 1)",
    "Canonical_solution": "import sys\nimport subprocess\nimport threading\nimport shlex\ntry:\n    from Queue import Queue, Empty\nexcept:\n    from queue import Queue, Empty\n\nON_POSIX = 'posix' in sys.builtin_module_names\n\nclass ProcessRunner:\n    def __init__(self):\n        pass\n\n    def _read_output(self, pipe, q):\n        try:\n            for line in iter(lambda: pipe.read(1), b''):\n                q.put(line)\n        except ValueError:\n            pass\n        pipe.close()\n\n    def _stream_output(self, comm, shell=False):\n        output = error = \"\"\n        p = ot = et = None\n        try:\n            if shell and type(comm) is list:\n                comm = \" \".join(shlex.quote(x) for x in comm)\n            if not shell and type(comm) is str:\n                comm = shlex.split(comm)\n            p = subprocess.Popen(comm, shell=shell, stdout=subprocess.PIPE, stderr=subprocess.PIPE, \n                                bufsize=0, universal_newlines=True, close_fds=ON_POSIX)\n            \n            q = Queue()\n            t = threading.Thread(target=self._read_output, args=(p.stdout, q))\n            t.daemon = True\n            \n            qe = Queue()\n            te = threading.Thread(target=self._read_output, args=(p.stderr, qe))\n            te.daemon = True\n            \n            t.start()\n            te.start()\n\n            while True:\n                c = z = \"\"\n                try:\n                    c = q.get_nowait()\n                except Empty:\n                    pass\n                else:\n                    sys.stdout.write(c)\n                    output += c\n                    sys.stdout.flush()\n                try:\n                    z = qe.get_nowait()\n                except Empty:\n                    pass\n                else:\n                    sys.stderr.write(z)\n                    error += z\n                    sys.stderr.flush()\n                p.poll()\n                if c==z==\"\" and p.returncode != None:\n                    break\n\n            o, e = p.communicate()\n            return (output+o, error+e, p.returncode)\n        except:\n            if p:\n                return (output, error, p.returncode)\n            return (\"\", \"Command not found!\", 1)\n\n    def _decode(self, value):\n        if sys.version_info >= (3,0) and isinstance(value, bytes):\n            return value.decode(\"utf-8\",\"ignore\")\n        return value\n\n    def _run_command(self, comm, shell=False):\n        try:\n            if shell and type(comm) is list:\n                comm = \" \".join(shlex.quote(x) for x in comm)\n            if not shell and type(comm) is str:\n                comm = shlex.split(comm)\n            p = subprocess.Popen(comm, shell=shell, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n            c = p.communicate()\n            return (self._decode(c[0]), self._decode(c[1]), p.returncode)\n        except:\n            return (\"\", \"Command not found!\", 1)\n\n    def execute(self, command_list, leave_on_fail=False):\n        if type(command_list) is dict:\n            command_list = [command_list]\n        output_list = []\n        for comm in command_list:\n            args = comm.get(\"args\", [])\n            shell = comm.get(\"shell\", False)\n            stream = comm.get(\"stream\", False)\n            sudo = comm.get(\"sudo\", False)\n            \n            if not len(args):\n                continue\n                \n            if sudo:\n                out = self._run_command([\"which\", \"sudo\"])\n                if \"sudo\" in out[0]:\n                    if type(args) is list:\n                        args.insert(0, out[0].replace(\"\\n\", \"\"))\n                    elif type(args) is str:\n                        args = out[0].replace(\"\\n\", \"\") + \" \" + args\n\n            if stream:\n                out = self._stream_output(args, shell)\n            else:\n                out = self._run_command(args, shell)\n                \n            output_list.append(out)\n            if leave_on_fail and out[2] != 0:\n                break\n                \n        return output_list[0] if len(output_list) == 1 else output_list",
    "Code_level": "Class-level",
    "FSMID_for_test": 76,
    "right_result": "```python\nimport subprocess\nimport queue\nimport threading\nimport shlex\n\nclass ProcessRunner:\n    def _read_output(self, pipe, q):\n        for line in iter(pipe.readline, ''):\n            q.put(self._decode(line))\n\n    def _stream_output(self, comm, shell):\n        with subprocess.Popen(comm, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=shell) as proc:\n            stdout_queue = queue.Queue()\n            stderr_queue = queue.Queue()\n            stdout_thread = threading.Thread(target=self._read_output, args=(proc.stdout, stdout_queue))\n            stderr_thread = threading.Thread(target=self._read_output, args=(proc.stderr, stderr_queue))\n            stdout_thread.start()\n            stderr_thread.start()\n            stdout_thread.join()\n            stderr_thread.join()\n            stdout, stderr = '', ''\n            while not stdout_queue.empty():\n                stdout += stdout_queue.get()\n            while not stderr_queue.empty():\n                stderr += stderr_queue.get()\n            returncode = proc.returncode\n            return stdout, stderr, returncode\n\n    def _decode(self, value):\n        return value.decode('utf-8')\n\n    def _run_command(self, comm, shell):\n        try:\n            with subprocess.Popen(comm, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=shell) as proc:\n                stdout, stderr = proc.communicate()\n                return self._decode(stdout), self._decode(stderr), proc.returncode\n        except FileNotFoundError:\n            return \"\", \"Command not found!\", 1\n\n    def execute(self, command_list, leave_on_fail=False):\n        if isinstance(command_list, dict):\n            command_list = [command_list]\n        results = []\n        for cmd in command_list:\n            args = cmd.get('args', [])\n            shell = cmd.get('shell', False)\n            stream = cmd.get('stream', False)\n            sudo = cmd.get('sudo', False)\n            if sudo:\n                args = ['sudo'] + args\n            if stream:\n                stdout, stderr, returncode = self._stream_output(args, shell)\n            else:\n                stdout, stderr, returncode = self._run_command(args, shell)\n            results.append((stdout, stderr, returncode))\n            if not leave_on_fail and returncode != 0:\n                break\n        return results if len(results) > 1 else results[0]\n```"
  },
  {
    "Task_id": 293,
    "Instruction": "Task Description: Implement a set of steganography cracking classes that utilize subprocess communication to interact with different steganography tools (steghide, outguess, outguess-0.13, and openstego) for extracting hidden data from files.\n\nClass Description: Each class implements a specific steganography tool cracker using subprocess communication to interact with the respective command-line tool. The classes follow a similar pattern of spawning a subprocess, communicating with it via pipes, and analyzing the output to determine if the correct passphrase was found.\n\nAttributes:\nNone (These are stateless classes that don't maintain instance attributes)\n\nMethods:\n\nMethod1: crack_function(stego_file: str, passphrase: str) -> None - Attempts to extract hidden data from the given stego_file using the provided passphrase. Prints success message and exits if found, otherwise continues silently.\n\nClasses:\n\n1. ThreadedSteghideCracker:\n   - Uses 'steghide' command-line tool\n   - Checks for embedded file information in output\n   - Prints extraction command on success\n\n2. ThreadedOutguessCracker:\n   - Uses 'outguess' command-line tool\n   - Creates temporary file for output\n   - Validates extracted data for ASCII content\n   - Prints secret message and cleanup command on success\n\n3. ThreadedOutguess013Cracker:\n   - Uses 'outguess-0.13' command-line tool\n   - Similar functionality to ThreadedOutguessCracker\n   - Handles older version of outguess\n\n4. ThreadedOpenstegoCracker:\n   - Uses 'openstego' command-line tool\n   - Checks stderr for extraction success\n   - Prints extracted file path on success\n\nAll methods:\n- Use subprocess.Popen with stdout/stderr pipes\n- Process communication via communicate()\n- Include proper error handling\n- Exit program on successful extraction\n- Include cleanup for temporary files where applicable",
    "Canonical_solution": "import subprocess\nimport re\nimport sys\nimport os\nimport md5\n\nclass ThreadedSteghideCracker:\n    def crack_function(self, stego_file, passphrase):\n        process = subprocess.Popen(['steghide',\n                                  'info',\n                                  stego_file,\n                                  '-p', passphrase],\n                                 stdout=subprocess.PIPE,\n                                 stderr=subprocess.PIPE)\n        (out, err) = process.communicate()\n        m = re.search(r\"embedded file \\\"(.*)\\\"\", out)\n        if m is not None:\n            print(\"\\nFound '{}'!\\n\\\nExtract with `steghide extract -sf {} -p \\\"{}\\\"`\"\n                  .format(m.group(1), stego_file, passphrase))\n            sys.exit(0)\n\nclass ThreadedOutguessCracker:\n    def crack_function(self, stego_file, passphrase):\n        tmp_file = \"/tmp/{}\".format(md5.new(passphrase).hexdigest())\n        process = subprocess.Popen(['outguess',\n                                  '-k', passphrase,\n                                  '-r', stego_file,\n                                  tmp_file],\n                                 stdout=subprocess.PIPE,\n                                 stderr=subprocess.PIPE)\n        (out, err) = process.communicate()\n        try:\n            with open(tmp_file, \"r\") as f:\n                data = f.read()\n                if len(data) > 0:\n                    ascii_data = \"\".join(filter(lambda x: ord(x) < 128, data))\n                    if float(len(ascii_data)) / float(len(data)) > 0.8:\n                        print(\"\\nFound secret message:\\n---\\n{}\\n---\\n\\\nExtract with `outguess -k \\\"{}\\\" -r {} /tmp/outguess_secret.txt`\"\n                              .format(ascii_data, passphrase, stego_file))\n                        sys.exit(0)\n        finally:\n            os.remove(tmp_file)\n\nclass ThreadedOutguess013Cracker:\n    def crack_function(self, stego_file, passphrase):\n        tmp_file = \"/tmp/{}\".format(md5.new(passphrase).hexdigest())\n        process = subprocess.Popen(['outguess-0.13',\n                                  '-k', passphrase,\n                                  '-r', stego_file,\n                                  tmp_file],\n                                 stdout=subprocess.PIPE,\n                                 stderr=subprocess.PIPE)\n        (out, err) = process.communicate()\n        try:\n            with open(tmp_file, \"r\") as f:\n                data = f.read()\n                if len(data) > 0:\n                    ascii_data = \"\".join(filter(lambda x: ord(x) < 128, data))\n                    if float(len(ascii_data)) / float(len(data)) > 0.8:\n                        print(\"\\nFound secret message:\\n---\\n{}\\n---\\n\\\nExtract with `outguess -k \\\"{}\\\" -r {} /tmp/outguess_secret.txt`\"\n                              .format(ascii_data, passphrase, stego_file))\n                        sys.exit(0)\n        finally:\n            os.remove(tmp_file)\n\nclass ThreadedOpenstegoCracker:\n    def crack_function(self, stego_file, passphrase):\n        process = subprocess.Popen(['openstego', 'extract',\n                                  '-p', passphrase,\n                                  '-sf', stego_file],\n                                 stdout=subprocess.PIPE,\n                                 stderr=subprocess.PIPE)\n        (out, err) = process.communicate()\n        m = re.search(r\"Extracted file: (.*)\", err)\n        if m is not None:\n            print(\"\\nFound '{}'!\\n\\\nExtract with `openstego extract -sf {} -p \\\"{}\\\"`\"\n                  .format(m.group(1), stego_file, passphrase))\n            sys.exit(0)",
    "Code_level": "Class-level",
    "FSMID_for_test": 76,
    "right_result": "```python\nimport subprocess\nimport os\nimport tempfile\n\nclass ThreadedSteghideCracker:\n    def crack_function(self, stego_file: str, passphrase: str) -> None:\n        try:\n            process = subprocess.Popen(['steghide', 'extract', '-p', passphrase, stego_file], stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n            stdout, stderr = process.communicate()\n            if 'File extracted' in stdout.decode():\n                print(f\"Extracted file using steghide with passphrase '{passphrase}'\")\n        except Exception as e:\n            print(f\"Error during steghide extraction: {e}\")\n\nclass ThreadedOutguessCracker:\n    def crack_function(self, stego_file: str, passphrase: str) -> None:\n        try:\n            with tempfile.NamedTemporaryFile(delete=False) as tmp_file:\n                process = subprocess.Popen(['outguess', '-p', passphrase, stego_file, tmp_file.name], stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n                stdout, stderr = process.communicate()\n                if 'Secret message' in stdout.decode():\n                    print(f\"Secret message extracted using outguess with passphrase '{passphrase}': {stdout.decode()}\")\n                    os.unlink(tmp_file.name)\n        except Exception as e:\n            print(f\"Error during outguess extraction: {e}\")\n\nclass ThreadedOutguess013Cracker:\n    def crack_function(self, stego_file: str, passphrase: str) -> None:\n        try:\n            with tempfile.NamedTemporaryFile(delete=False) as tmp_file:\n                process = subprocess.Popen(['outguess-0.13', '-p', passphrase, stego_file, tmp_file.name], stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n                stdout, stderr = process.communicate()\n                if 'Secret message' in stdout.decode():\n                    print(f\"Secret message extracted using outguess-0.13 with passphrase '{passphrase}': {stdout.decode()}\")\n                    os.unlink(tmp_file.name)\n        except Exception as e:\n            print(f\"Error during outguess-0.13 extraction: {e}\")\n\nclass ThreadedOpenstegoCracker:\n    def crack_function(self, stego_file: str, passphrase: str) -> None:\n        try:\n            process = subprocess.Popen(['openstego', 'extract', '-p', passphrase, stego_file], stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n            stdout, stderr = process.communicate()\n            if 'Extraction successful' in stderr.decode():\n                print(f\"Extracted file using openstego with passphrase '{passphrase}': {stderr.decode()}\")\n        except Exception as e:\n            print(f\"Error during openstego extraction: {e}\")\n```"
  },
  {
    "Task_id": 294,
    "Instruction": "Task Description: Implement a set of functions to interact with the Mercurial (hg) version control system to retrieve branch information and repository status using subprocess communication.\n\nFunction Description: The functions use Python's subprocess module to execute Mercurial commands and capture their output through pipes. The functions handle process creation, communication, and output parsing to provide repository information.\n\nInput: None (functions retrieve information directly from the Mercurial repository in the current working directory)\n\nOutput:\n\n_get_hg_branch() -> str - Returns the current Mercurial branch name as a string\n_get_hg_status(output: tuple) -> list - Returns a list of status lines from Mercurial output\nbuild_stats() -> tuple - Returns a tuple containing (status_list, branch_name) or (None, None) if an error occurs",
    "Canonical_solution": "import subprocess\nfrom ..utils import get_subprocess_env\n\ndef _get_hg_branch():\n    p = subprocess.Popen([\"hg\", \"branch\"],\n                         stdout=subprocess.PIPE,\n                         stderr=subprocess.PIPE,\n                         env=get_subprocess_env())\n    branch = p.communicate()[0].decode(\"utf-8\").rstrip('\\n')\n    return branch\n\ndef _get_hg_status(output):\n    return output[0].decode(\"utf-8\").splitlines()\n\ndef build_stats():\n    try:\n        p = subprocess.Popen([\"hg\", \"status\"],\n                             stdout=subprocess.PIPE,\n                             stderr=subprocess.PIPE,\n                             env=get_subprocess_env())\n    except OSError:\n        return None, None\n    pdata = p.communicate()\n    if p.returncode != 0:\n        return None, None\n    status = _get_hg_status(pdata)\n    branch = _get_hg_branch()\n    return status, branch",
    "Code_level": "Function-level",
    "FSMID_for_test": 76,
    "right_result": "```python\nimport subprocess\n\ndef _get_hg_branch():\n    try:\n        process = subprocess.Popen(['hg', 'branch'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        output, error = process.communicate()\n        if process.returncode != 0:\n            return None\n        branch_name = output.decode().strip()\n        return branch_name\n    except Exception as e:\n        return None\n\ndef _get_hg_status(output: tuple) -> list:\n    try:\n        status_lines = output.decode().splitlines()\n        return [line for line in status_lines if line]\n    except Exception as e:\n        return []\n\ndef build_stats():\n    branch_name = _get_hg_branch()\n    if branch_name is None:\n        return (None, None)\n    try:\n        process = subprocess.Popen(['hg', 'status'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        output, error = process.communicate()\n        if process.returncode != 0:\n            return (None, None)\n        return (_get_hg_status(output), branch_name)\n    except Exception as e:\n        return (None, None)\n```"
  },
  {
    "Task_id": 295,
    "Instruction": "Task Description: Create a function that reads audio data from bytes using FFmpeg and converts it into a numpy array with specified sampling rate.\n\nFunction Description: The function `ffmpeg_read` takes raw audio bytes and converts them into a mono audio waveform with a specified sampling rate using FFmpeg. The audio is converted to 32-bit floating-point format. The function handles FFmpeg process creation, data piping, and conversion to numpy array.\n\nInput:\n- `bpayload`: bytes - Raw audio data to be processed\n- `sampling_rate`: int - Target sampling rate for the output audio\n\nOutput:\n- np.array - A numpy array containing the audio waveform in 32-bit floating-point format\n\nNote: The function raises `ValueError` if FFmpeg is not found or if the output audio is malformed.",
    "Canonical_solution": "import subprocess\nimport numpy as np\n\ndef ffmpeg_read(bpayload: bytes, sampling_rate: int) -> np.array:\n    \"\"\"\n    Helper function to read an audio file through ffmpeg.\n    \"\"\"\n    ar = f\"{sampling_rate}\"\n    ac = \"1\"\n    format_for_conversion = \"f32le\"\n    ffmpeg_command = [\n        \"ffmpeg\",\n        \"-i\",\n        \"pipe:0\",\n        \"-ac\",\n        ac,\n        \"-ar\",\n        ar,\n        \"-f\",\n        format_for_conversion,\n        \"-hide_banner\",\n        \"-loglevel\",\n        \"quiet\",\n        \"pipe:1\",\n    ]\n\n    try:\n        ffmpeg_process = subprocess.Popen(ffmpeg_command, stdin=subprocess.PIPE, stdout=subprocess.PIPE)\n    except FileNotFoundError:\n        raise ValueError(\"ffmpeg was not found but is required to load audio files from filename\")\n    output_stream = ffmpeg_process.communicate(bpayload)\n    out_bytes = output_stream[0]\n\n    audio = np.frombuffer(out_bytes, np.float32)\n    if audio.shape[0] == 0:\n        raise ValueError(\"Malformed soundfile\")\n    return audio",
    "Code_level": "Function-level",
    "FSMID_for_test": 76,
    "right_result": "```python\nimport subprocess\nimport numpy as np\nimport io\n\ndef ffmpeg_read(bpayload, sampling_rate):\n    ffmpeg_cmd = [\n        'ffmpeg',\n        '-i', '-', '-f', 's16le', '-ar', str(sampling_rate), '-acodec', 'pcm_f32le',\n        '-', '-y'\n    ]\n    process = subprocess.Popen(ffmpeg_cmd, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    stdout, stderr = process.communicate(bpayload)\n    if process.returncode != 0:\n        raise ValueError(\"FFmpeg error: \" + stderr.decode())\n    return np.frombuffer(stdout, dtype=np.float32)\n```"
  },
  {
    "Task_id": 296,
    "Instruction": "Task Description: Create a function that executes a system command using Python's subprocess module with pipe-based inter-process communication.\n\nFunction Description: The function should take a system command as input, execute it in a subprocess, capture the output through a pipe, and return the decoded output string. It should handle the process creation, communication, and cleanup automatically.\n\nInput: \n- com: [str] - The system command to be executed as a string\n\nOutput:\n- [str] - The decoded output from the executed command, as a string",
    "Canonical_solution": "import sys\nimport subprocess\n\ndef excuteCommand(com):\n    ex = subprocess.Popen(com, stdout=subprocess.PIPE, shell=True)\n    out, err = ex.communicate()\n    status = ex.wait()\n    return out.decode()",
    "Code_level": "Function-level",
    "FSMID_for_test": 76,
    "right_result": "```python\nimport subprocess\n\ndef execute_command(com):\n    process = subprocess.Popen(com, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)\n    stdout, stderr = process.communicate()\n    return stdout\n```"
  },
  {
    "Task_id": 297,
    "Instruction": "Task Description: Create a function that executes a system command in a subprocess, captures its output and error streams, and handles potential errors appropriately.\n\nFunction Description: The function `run_cmd` executes a given system command as a subprocess, with options for verbose output. It captures both stdout and stderr streams, provides real-time output when in verbose mode, and raises an exception if the command fails (non-zero return code). The function ensures proper process cleanup and returns the command's output and error streams.\n\nInput:\n- command: List[str] - A list of strings representing the command and its arguments to be executed\n- verbose: bool (optional, default=False) - If True, prints real-time output of the command execution\n\nOutput:\n- Returns: Tuple[bytes, bytes] - A tuple containing the stdout and stderr output from the command\n- Raises: Exception - If the command returns a non-zero exit code, includes the return code and output streams in the exception message",
    "Canonical_solution": "import subprocess\nimport sys\n\ndef run_cmd(command, verbose=False):\n    if verbose:\n        print(\"Running command:\", \" \".join(command))\n    proc = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n\n    if verbose:\n        while proc.poll() is None:\n            string = b\"\"\n            for c in iter(lambda: proc.stdout.read(1), string):\n                c = c.decode(\"ascii\")\n                sys.stdout.write(c)\n\n        sys.stdout.flush()\n\n    proc.wait()\n    if proc.returncode != 0:\n        out, err = proc.communicate()\n        raise Exception(\n            \"The training could not be completed (returncode=%i): %s %s\"\n            % (proc.returncode, out, err)\n        )\n\n    out, err = proc.communicate()",
    "Code_level": "Function-level",
    "FSMID_for_test": 76,
    "right_result": "```python\nimport subprocess\n\ndef run_cmd(command, verbose=False):\n    try:\n        process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=False)\n        stdout, stderr = process.communicate()\n        if process.returncode != 0:\n            raise Exception(f\"Command failed with return code {process.returncode}: {stderr.decode()}\")\n        if verbose:\n            print(stdout.decode())\n        return stdout, stderr\n    except Exception as e:\n        raise e\n```"
  },
  {
    "Task_id": 298,
    "Instruction": "Task Description: Implement a class to collect and analyze OSSEC (Open Source Host-based Intrusion Detection System) agent states using subprocess communication.\n\nClass Description: The OssecCollector class interacts with the OSSEC agent control utility to retrieve agent status information and parse the results into a structured format. It handles command execution with optional sudo privileges and processes the output to count agent states.\n\nAttributes:\n- bin_path: [str] - Path to the OSSEC agent_control binary (default: '/var/ossec/bin/agent_control')\n- use_sudo: [bool] - Flag indicating whether to use sudo for command execution (default: True)\n- sudo_cmd: [str] - Path to the sudo binary (default: '/usr/bin/sudo')\n\nMethods:\n- __init__(bin_path: str = '/var/ossec/bin/agent_control', use_sudo: bool = True, sudo_cmd: str = '/usr/bin/sudo') -> None - Initializes the collector with configuration paths\n- collect() -> dict - Executes the agent control command, processes the output, and returns a dictionary counting agent states by status\n\nThe implementation should use subprocess.PIPE for inter-process communication and handle potential execution errors appropriately.",
    "Canonical_solution": "import subprocess\nimport re\nfrom diamond.collector import str_to_bool\n\nclass OssecCollector:\n    def __init__(self, bin_path='/var/ossec/bin/agent_control', use_sudo=True, sudo_cmd='/usr/bin/sudo'):\n        self.bin_path = bin_path\n        self.use_sudo = use_sudo\n        self.sudo_cmd = sudo_cmd\n\n    def collect(self):\n        command = [self.bin_path, '-l']\n\n        if str_to_bool(self.use_sudo):\n            command.insert(0, self.sudo_cmd)\n\n        try:\n            p = subprocess.Popen(command, stdout=subprocess.PIPE)\n            res = p.communicate()[0]\n        except Exception as e:\n            raise Exception('Unable to exec cmd: %s, because %s' % (' '.join(command), str(e)))\n\n        if res == '':\n            raise Exception('Empty result from exec cmd: %s' % (' '.join(command)))\n\n        states = {}\n        for line in res.split(\"\\n\"):\n            if not line.startswith('   ID: '):\n                continue\n            fragments = line.split(',')\n            state = fragments[-1].lstrip()\n            if state not in states:\n                states[state] = 1\n            else:\n                states[state] += 1\n\n        return states",
    "Code_level": "Class-level",
    "FSMID_for_test": 76,
    "right_result": "```python\nimport subprocess\n\nclass OssecCollector:\n    def __init__(self, bin_path: str = '/var/ossec/bin/agent_control', use_sudo: bool = True, sudo_cmd: str = '/usr/bin/sudo') -> None:\n        self.bin_path = bin_path\n        self.use_sudo = use_sudo\n        self.sudo_cmd = sudo_cmd\n\n    def collect(self) -> dict:\n        cmd = [self.sudo_cmd, self.bin_path, 'status']\n        try:\n            process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)\n            stdout, stderr = process.communicate()\n            if process.returncode != 0:\n                raise Exception(f\"Command failed with error: {stderr}\")\n            return self.parse_output(stdout)\n        except Exception as e:\n            print(f\"An error occurred: {e}\")\n            return {}\n\n    def parse_output(self, output: str) -> dict:\n        states = {'active': 0, 'inactive': 0, 'unknown': 0}\n        for line in output.splitlines():\n            if 'Agent' in line:\n                status = line.split()[2]\n                states[status] += 1\n        return states\n```"
  },
  {
    "Task_id": 299,
    "Instruction": "Task Description: Create a Python class that checks the installed version of npm (Node Package Manager) on the system using subprocess communication.\n\nClass Description: The Segment class is designed to retrieve and store the version of npm installed on the system. It uses subprocess.PIPE to communicate with the system process that runs the npm version command.\n\nAttributes:\nversion: [str] - Stores the version of npm retrieved from the system process. Initialized as None and updated after running the version check.\n\nMethods:\nrun: [run]() -> [None] - Executes the npm --version command using subprocess.Popen, captures the output, decodes it, and stores the result in the version attribute. Handles OSError exceptions if the command fails.\nget_version: [get_version]() -> [str] - Returns the stored npm version. Returns None if the version check was not successful or not run.",
    "Canonical_solution": "import subprocess\n\nclass Segment:\n    def __init__(self):\n        self.version = None\n\n    def run(self):\n        try:\n            p1 = subprocess.Popen([\"npm\", \"--version\"], stdout=subprocess.PIPE)\n            self.version = p1.communicate()[0].decode(\"utf-8\").rstrip()\n        except OSError:\n            self.version = None\n\n    def get_version(self):\n        return self.version",
    "Code_level": "Class-level",
    "FSMID_for_test": 76,
    "right_result": "```python\nimport subprocess\n\nclass Segment:\n    def __init__(self):\n        self.version = None\n\n    def run(self):\n        try:\n            process = subprocess.Popen(['npm', '--version'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n            output, error = process.communicate()\n            if process.returncode == 0:\n                self.version = output.decode().strip()\n        except OSError:\n            pass\n\n    def get_version(self):\n        return self.version\n```"
  },
  {
    "Task_id": 3,
    "Instruction": "Task Description: Implement an asynchronous Kafka consumer in Python using the aiokafka library to subscribe to topics, consume messages, and handle batch processing with configurable timeouts and maximum records.\n\nClass Description: The LogicSubscriber class is an abstract base class that provides core functionality for consuming messages from Kafka topics asynchronously. It handles connection management, message consumption, and error handling. The DefaultSubscriber and BatchSubscriber classes extend this functionality for single-message and batch-message consumption respectively.\n\nAttributes:\n\ntopics: Sequence[str] - List of Kafka topics to subscribe to\ngroup_id: Optional[str] - Consumer group ID for Kafka\nconsumer: Optional[AIOKafkaConsumer] - The aiokafka consumer instance\npartitions: Iterable[TopicPartition] - Specific partitions to consume from\n__connection_args: Dict[str, Any] - Connection arguments for Kafka consumer\n\nMethods:\n\n__init__(*topics: str, group_id: Optional[str], connection_args: Dict[str, Any], partitions: Iterable[TopicPartition], default_parser: AsyncCallable, default_decoder: AsyncCallable) -> None - Initializes the subscriber with topics, group ID, connection args, partitions, and message processing callables.\n\nstart() -> None - Creates and starts the Kafka consumer, subscribing to topics or assigning partitions.\n\nclose() -> None - Stops and cleans up the Kafka consumer.\n\nget_msg() -> MsgType - Abstract method to be implemented by subclasses for retrieving messages.\n\n_consume() -> None - Main consumption loop that processes messages and handles errors.\n\nDefaultSubscriber Methods:\n\nget_msg() -> ConsumerRecord - Retrieves a single message from Kafka.\n\nBatchSubscriber Methods:\n\n__init__(*topics: str, batch_timeout_ms: int, max_records: Optional[int], **kwargs: Any) -> None - Extends initialization with batch-specific parameters.\n\nget_msg() -> Tuple[ConsumerRecord, ...] - Retrieves a batch of messages from Kafka with configurable timeout and maximum records.",
    "Canonical_solution": "from typing import Optional, Iterable, Sequence, Dict, Any, Tuple\nfrom abc import ABC, abstractmethod\nfrom itertools import chain\nimport anyio\nfrom aiokafka import ConsumerRecord, TopicPartition\nfrom aiokafka.errors import ConsumerStoppedError, KafkaError\nfrom faststream.broker.subscriber.usecase import SubscriberUsecase\nfrom faststream.broker.types import AsyncCallable, BrokerMiddleware, MsgType\nfrom faststream.broker.utils import process_msg\nfrom faststream.kafka.message import KafkaAckableMessage, KafkaMessage\nfrom faststream.kafka.parser import AioKafkaBatchParser, AioKafkaParser\n\nclass LogicSubscriber(ABC, SubscriberUsecase[MsgType]):\n    topics: Sequence[str]\n    group_id: Optional[str]\n    consumer: Optional[\"AIOKafkaConsumer\"]\n\n    def __init__(\n        self,\n        *topics: str,\n        group_id: Optional[str],\n        connection_args: Dict[str, Any],\n        partitions: Iterable[TopicPartition],\n        default_parser: AsyncCallable,\n        default_decoder: AsyncCallable,\n    ) -> None:\n        super().__init__(\n            default_parser=default_parser,\n            default_decoder=default_decoder,\n        )\n        self.topics = topics\n        self.partitions = partitions\n        self.group_id = group_id\n        self.__connection_args = connection_args\n        self.consumer = None\n\n    async def start(self) -> None:\n        self.consumer = consumer = self.builder(\n            group_id=self.group_id,\n            client_id=self.client_id,\n            **self.__connection_args,\n        )\n\n        if self.topics:\n            consumer.subscribe(topics=self.topics)\n        elif self.partitions:\n            consumer.assign(partitions=self.partitions)\n\n        await consumer.start()\n\n    async def close(self) -> None:\n        if self.consumer is not None:\n            await self.consumer.stop()\n            self.consumer = None\n\n    @abstractmethod\n    async def get_msg(self) -> MsgType:\n        raise NotImplementedError()\n\n    async def _consume(self) -> None:\n        while self.running:\n            try:\n                msg = await self.get_msg()\n                if msg:\n                    await self.consume_one(msg)\n            except KafkaError:\n                await anyio.sleep(5)\n            except ConsumerStoppedError:\n                return\n\nclass DefaultSubscriber(LogicSubscriber[ConsumerRecord]):\n    async def get_msg(self) -> ConsumerRecord:\n        assert self.consumer, \"Consumer not initialized\"\n        return await self.consumer.getone()\n\nclass BatchSubscriber(LogicSubscriber[Tuple[ConsumerRecord, ...]]):\n    def __init__(\n        self,\n        *topics: str,\n        batch_timeout_ms: int,\n        max_records: Optional[int],\n        **kwargs: Any,\n    ) -> None:\n        super().__init__(*topics, **kwargs)\n        self.batch_timeout_ms = batch_timeout_ms\n        self.max_records = max_records\n\n    async def get_msg(self) -> Tuple[ConsumerRecord, ...]:\n        assert self.consumer, \"Consumer not initialized\"\n        messages = await self.consumer.getmany(\n            timeout_ms=self.batch_timeout_ms,\n            max_records=self.max_records,\n        )\n        return tuple(chain(*messages.values())) if messages else ()",
    "Code_level": "Class-level",
    "FSMID_for_test": 80,
    "right_result": "```python\nimport asyncio\nfrom aiokafka import AIOKafkaConsumer, TopicPartition\nfrom typing import Sequence, Optional, Dict, Iterable, Callable, Any, Tuple\n\nclass LogicSubscriber:\n    def __init__(self, *topics: str, group_id: Optional[str] = None, connection_args: Dict[str, Any] = {}, partitions: Iterable[TopicPartition] = (), default_parser: Callable = lambda x: x, default_decoder: Callable = lambda x: x) -> None:\n        self.topics = topics\n        self.group_id = group_id\n        self.consumer = None\n        self.partitions = partitions\n        self.__connection_args = connection_args\n\n    async def start(self) -> None:\n        self.consumer = AIOKafkaConsumer(*self.topics, group_id=self.group_id, **self.__connection_args)\n        await self.consumer.start()\n\n    async def close(self) -> None:\n        if self.consumer:\n            await self.consumer.stop()\n\n    async def get_msg(self) -> Any:\n        raise NotImplementedError\n\n    async def _consume(self) -> None:\n        try:\n            async for msg in self.consumer:\n                await self.get_msg()\n        except Exception as e:\n            print(f\"Error consuming message: {e}\")\n\nclass DefaultSubscriber(LogicSubscriber):\n    async def get_msg(self) -> Any:\n        return await self.consumer.get_msg()\n\nclass BatchSubscriber(LogicSubscriber):\n    def __init__(self, *topics: str, batch_timeout_ms: int, max_records: Optional[int] = None, **kwargs: Any) -> None:\n        super().__init__(*topics, **kwargs)\n        self.batch_timeout_ms = batch_timeout_ms\n        self.max_records = max_records\n\n    async def get_msg(self) -> Tuple[Any, ...]:\n        return await self.consumer.get_messages(timeout=self.batch_timeout_ms, max_records=self.max_records)\n```"
  },
  {
    "Task_id": 300,
    "Instruction": "Task Description: Create a function that executes a shell command using Python's subprocess module and returns the output, error, and process object.\n\nFunction Description: The function SC (Shell Command) takes a shell command as input, executes it using subprocess.Popen, and captures both the standard output and standard error streams. It returns a tuple containing these outputs along with the process object for further interaction if needed.\n\nInput: \n- cmd: [str] - The shell command to be executed as a string.\n\nOutput: \n- Returns a tuple containing:\n  - out: [bytes] - The standard output of the executed command.\n  - err: [bytes] - The standard error of the executed command.\n  - proc: [subprocess.Popen] - The process object representing the executed command.",
    "Canonical_solution": "import os\nimport subprocess\n\ndef SC(cmd):\n    proc = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)\n    [out, err] = proc.communicate()\n    return (out, err, proc)",
    "Code_level": "Function-level",
    "FSMID_for_test": 76,
    "right_result": "```python\nimport subprocess\n\ndef SC(cmd):\n    proc = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    out, err = proc.communicate()\n    return out, err, proc\n```"
  },
  {
    "Task_id": 301,
    "Instruction": "Task Description: Implement a class to monitor and collect statistics about Passenger application server processes, including memory usage, CPU usage, and queue statistics.\n\nClass Description: The PassengerProcessCommunicator class is designed to interact with Passenger application server processes to gather various performance metrics. It uses subprocess communication to execute system commands and parse their outputs.\n\nAttributes:\n- config: [dict] - A configuration dictionary containing settings like command paths and sudo usage flags.\n\nMethods:\n- get_passenger_memory_stats() -> [dict] - Collects memory statistics for Apache, Nginx, and Passenger processes. Returns a dictionary with process lists and total memory usage.\n- get_passenger_cpu_usage(dict_stats: dict) -> [float] - Calculates total CPU usage percentage for all Passenger-related processes. Takes a dictionary of process stats and returns the total CPU usage.\n- get_passenger_queue_stats() -> [dict] - Gathers queue statistics from Passenger status, including top-level and application queue sizes. Returns a dictionary with queue metrics.",
    "Canonical_solution": "import subprocess\nimport re\nimport os\nfrom diamond.collector import str_to_bool\n\nclass PassengerProcessCommunicator:\n    def __init__(self, config):\n        self.config = config\n\n    def get_passenger_memory_stats(self):\n        command = [self.config[\"passenger_memory_stats_bin\"]]\n        if str_to_bool(self.config[\"use_sudo\"]):\n            command.insert(0, self.config[\"sudo_cmd\"])\n\n        try:\n            proc1 = subprocess.Popen(command, stdout=subprocess.PIPE)\n            (std_out, std_err) = proc1.communicate()\n        except OSError:\n            return {}\n\n        if std_out is None:\n            return {}\n\n        dict_stats = {\n            \"apache_procs\": [],\n            \"nginx_procs\": [],\n            \"passenger_procs\": [],\n            \"apache_mem_total\": 0.0,\n            \"nginx_mem_total\": 0.0,\n            \"passenger_mem_total\": 0.0,\n        }\n        \n        re_colour = re.compile(\"\\x1B\\[([0-9]{1,3}((;[0-9]{1,3})*)?)?[m|K]\")\n        re_digit = re.compile(\"^\\d\")\n        \n        apache_flag = 0\n        nginx_flag = 0\n        passenger_flag = 0\n        for raw_line in std_out.splitlines():\n            line = re_colour.sub(\"\", raw_line)\n            if \"Apache processes\" in line:\n                apache_flag = 1\n            elif \"Nginx processes\" in line:\n                nginx_flag = 1\n            elif \"Passenger processes\" in line:\n                passenger_flag = 1\n            elif re_digit.match(line):\n                line_splitted = line.split()\n                if apache_flag == 1:\n                    dict_stats[\"apache_procs\"].append(line_splitted[0])\n                    dict_stats[\"apache_mem_total\"] += float(line_splitted[4])\n                elif nginx_flag == 1:\n                    dict_stats[\"nginx_procs\"].append(line_splitted[0])\n                    dict_stats[\"nginx_mem_total\"] += float(line_splitted[4])\n                elif passenger_flag == 1:\n                    dict_stats[\"passenger_procs\"].append(line_splitted[0])\n                    dict_stats[\"passenger_mem_total\"] += float(line_splitted[3])\n            elif \"Processes:\" in line:\n                passenger_flag = 0\n                apache_flag = 0\n                nginx_flag = 0\n\n        return dict_stats\n\n    def get_passenger_cpu_usage(self, dict_stats):\n        try:\n            proc1 = subprocess.Popen(\n                [\"top\", \"-b\", \"-n\", \"2\"],\n                stdout=subprocess.PIPE)\n            (std_out, std_err) = proc1.communicate()\n        except OSError:\n            return -1\n\n        re_lspaces = re.compile(\"^\\s*\")\n        re_digit = re.compile(\"^\\d\")\n        overall_cpu = 0\n        for raw_line in std_out.splitlines():\n            line = re_lspaces.sub(\"\", raw_line)\n            if not re_digit.match(line):\n                continue\n\n            line_splitted = line.split()\n            if line_splitted[0] in dict_stats[\"apache_procs\"]:\n                overall_cpu += float(line_splitted[8])\n            elif line_splitted[0] in dict_stats[\"nginx_procs\"]:\n                overall_cpu += float(line_splitted[8])\n            elif line_splitted[0] in dict_stats[\"passenger_procs\"]:\n                overall_cpu += float(line_splitted[8])\n\n        return overall_cpu\n\n    def get_passenger_queue_stats(self):\n        queue_stats = {\n            \"top_level_queue_size\": 0.0,\n            \"passenger_queue_size\": 0.0,\n        }\n\n        command = [self.config[\"passenger_status_bin\"]]\n        if str_to_bool(self.config[\"use_sudo\"]):\n            command.insert(0, self.config[\"sudo_cmd\"])\n\n        try:\n            proc1 = subprocess.Popen(command, stdout=subprocess.PIPE)\n            (std_out, std_err) = proc1.communicate()\n        except OSError:\n            return {}\n\n        if std_out is None:\n            return {}\n\n        re_colour = re.compile(\"\\x1B\\[([0-9]{1,3}((;[0-9]{1,3})*)?)?[m|K]\")\n        re_requests = re.compile(r\"Requests\")\n        re_topqueue = re.compile(r\"^top-level\")\n\n        gen_info_flag = 0\n        app_groups_flag = 0\n        for raw_line in std_out.splitlines():\n            line = re_colour.sub(\"\", raw_line)\n            if \"General information\" in line:\n                gen_info_flag = 1\n            if \"Application groups\" in line:\n                app_groups_flag = 1\n            elif re_requests.match(line) and re_topqueue.search(line):\n                line_splitted = line.split()\n                if gen_info_flag == 1 and line_splitted:\n                    queue_stats[\"top_level_queue_size\"] = float(line_splitted[5])\n            elif re_requests.search(line) and not re_topqueue.search(line):\n                line_splitted = line.split()\n                if app_groups_flag == 1 and line_splitted:\n                    queue_stats[\"passenger_queue_size\"] = float(line_splitted[3])\n\n        return queue_stats",
    "Code_level": "Class-level",
    "FSMID_for_test": 76,
    "right_result": "```python\nimport subprocess\nimport re\n\nclass PassengerProcessCommunicator:\n    def __init__(self, config: dict):\n        self.config = config\n\n    def get_passenger_memory_stats(self) -> dict:\n        memory_stats = {}\n        commands = [\n            \"ps -eo pid,%mem,%cpu,comm --sort=-%mem | grep passenger\",\n            \"ps -eo pid,%mem,%cpu,comm --sort=-%cpu | grep passenger\"\n        ]\n        for command in commands:\n            process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n            stdout, stderr = process.communicate()\n            if process.returncode == 0:\n                memory_stats['memory'] = self.parse_memory_stats(stdout.decode())\n                memory_stats['cpu'] = self.parse_cpu_stats(stdout.decode())\n        return memory_stats\n\n    def get_passenger_cpu_usage(self, dict_stats: dict) -> float:\n        total_cpu_usage = 0\n        for key, value in dict_stats.items():\n            total_cpu_usage += value\n        return total_cpu_usage\n\n    def get_passenger_queue_stats(self) -> dict:\n        queue_stats = {}\n        command = \"passenger-status\"\n        process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        stdout, stderr = process.communicate()\n        if process.returncode == 0:\n            queue_stats = self.parse_queue_stats(stdout.decode())\n        return queue_stats\n\n    def parse_memory_stats(self, output: str) -> dict:\n        memory_stats = {}\n        for line in output.splitlines():\n            match = re.match(r\"(\\d+)\\s+(\\d+\\.\\d+)\\s+(\\d+\\.\\d+)\\s+(\\S+)\", line)\n            if match:\n                pid, mem, cpu, comm = match.groups()\n                memory_stats[comm] = {'pid': pid, 'memory': mem, 'cpu': cpu}\n        return memory_stats\n\n    def parse_cpu_stats(self, output: str) -> dict:\n        cpu_stats = {}\n        for line in output.splitlines():\n            match = re.match(r\"(\\d+)\\s+(\\d+\\.\\d+)\\s+(\\d+\\.\\d+)\\s+(\\S+)\", line)\n            if match:\n                pid, mem, cpu, comm = match.groups()\n                cpu_stats[comm] = {'pid': pid, 'memory': mem, 'cpu': cpu}\n        return cpu_stats\n\n    def parse_queue_stats(self, output: str) -> dict:\n        queue_stats = {}\n        for line in output.splitlines():\n            if \"Top-level queue\" in line:\n                match = re.match(r\"Top-level queue: (\\d+)\", line)\n                if match:\n                    queue_stats['top_level_queue'] = int(match.group(1))\n            elif \"Application queue\" in line:\n                match = re.match(r\"Application queue: (\\d+)\", line)\n                if match:\n                    queue_stats['application_queue'] = int(match.group(1))\n        return queue_stats\n```"
  },
  {
    "Task_id": 302,
    "Instruction": "Task Description: Create a function that uses subprocess.Popen with pipes to execute a curl command, handle its output, and store the results in a database.\n\nFunction Description: The function executes a curl command as a subprocess to fetch HTTP headers from a URL using a SOCKS proxy. It handles timeouts, processes the output to extract HTTP status codes, and records all results (including errors) in a global database. The function includes a small delay between calls to avoid overwhelming the system.\n\nInput:\n- self: The object instance containing URL and attempt count (implicit in method context)\n- url: [str] - The target URL to fetch (accessed via self.url)\n- USER_AGENT: [str] - The user agent string for the HTTP request\n- SOCKS_PROXY: [str] - The SOCKS proxy address to use\n- CURL_TIMEOUT: [int] - Maximum time allowed for the curl command to complete\n\nOutput:\n- None (direct return value), but the function:\n  - Updates self.last_code with the HTTP status code\n  - Increments self.attempt counter\n  - Inserts a record into GLOBAL_DB containing:\n    - url: [str] - The requested URL\n    - attempt: [int] - The attempt number\n    - out: [bytes/str] - The curl command's stdout output\n    - err: [bytes/str] - The curl command's stderr output or error message\n    - http_code: [int] - The extracted HTTP status code\n    - curl_exit: [int] - The curl process's exit code",
    "Canonical_solution": "import subprocess\nimport time\n\ndef fetch1(self):\n    args = [ 'curl', '--head', '--user-agent', USER_AGENT, '--proxy', SOCKS_PROXY, self.url ]\n    time.sleep(1) # slight breathing space because MP\n    try:\n        p = subprocess.Popen(args, stdin=subprocess.DEVNULL, stdout=subprocess.PIPE, stderr=subprocess.PIPE) # todo: text=True\n        (out, err) = p.communicate(timeout=CURL_TIMEOUT)\n        hcode = extract_hcode(str(out)) # str() not needed if text=True\n        if hcode == 200: err = PLACEHOLDER\n        ecode = p.returncode\n    except subprocess.TimeoutExpired as e:\n        (out, err) = (PLACEHOLDER, str(e))\n        hcode = BADNESS + 10\n        ecode = BADNESS + 10\n    self.last_code = hcode\n    self.attempt += 1\n    GLOBAL_DB.insert(dict(\n        url=self.url,\n        attempt=self.attempt,\n        out=out,\n        err=err,\n        http_code=hcode,\n        curl_exit=ecode,\n    ))",
    "Code_level": "Function-level",
    "FSMID_for_test": 76,
    "right_result": "```python\nimport subprocess\nimport time\nimport sqlite3\n\nclass Fetcher:\n    def __init__(self, url):\n        self.url = url\n        self.attempt = 0\n        self.last_code = None\n\n    def fetch_headers(self, USER_AGENT, SOCKS_PROXY, CURL_TIMEOUT):\n        self.attempt += 1\n        command = f\"curl -s -w '%{{http_code}}' -A '{USER_AGENT}' -x '{SOCKS_PROXY}' -o /dev/null -f -X HEAD '{self.url}'\"\n        try:\n            process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True, timeout=CURL_TIMEOUT)\n            stdout, stderr = process.communicate()\n            http_code = int(stdout.strip().split()[-1])\n            self.last_code = http_code\n        except subprocess.TimeoutExpired:\n            stdout = \"\"\n            stderr = \"Timeout occurred\"\n            http_code = 0\n            self.last_code = http_code\n        except Exception as e:\n            stdout = \"\"\n            stderr = str(e)\n            http_code = 0\n            self.last_code = http_code\n\n        self.insert_record(self.url, self.attempt, stdout, stderr, http_code, process.returncode)\n\n    def insert_record(self, url, attempt, out, err, http_code, curl_exit):\n        conn = sqlite3.connect('global_db.db')\n        cursor = conn.cursor()\n        cursor.execute('CREATE TABLE IF NOT EXISTS records (url TEXT, attempt INTEGER, out TEXT, err TEXT, http_code INTEGER, curl_exit INTEGER)')\n        cursor.execute('INSERT INTO records (url, attempt, out, err, http_code, curl_exit) VALUES (?, ?, ?, ?, ?, ?)', (url, attempt, out, err, http_code, curl_exit))\n        conn.commit()\n        conn.close()\n\n        time.sleep(1)  # Small delay between calls\n```"
  },
  {
    "Task_id": 303,
    "Instruction": "Task Description: Create a Python class that collects and parses statistics from the amavisd-agent program using subprocess communication.\n\nClass Description: The AmavisCollector class is designed to interface with the amavisd-agent program to collect mail processing statistics. It uses subprocess.PIPE to communicate with the agent process and regular expressions to parse the output. The class supports optional sudo execution for privilege escalation.\n\nAttributes:\n\nmatchers: [List[re.Pattern]] - A list of compiled regular expressions used to parse different formats of statistics from amavisd-agent output.\nconfig: [Dict[str, Any]] - Configuration dictionary containing paths to executables and sudo settings.\n\nMethods:\n\n__init__: [Name](amavisd_exe: str = '/usr/sbin/amavisd-agent', use_sudo: bool = False, sudo_exe: str = '/usr/bin/sudo', sudo_user: str = 'amavis') -> None - Initializes the collector with configuration parameters for the amavisd-agent executable and optional sudo settings.\ncollect: [Name]() -> Generator[Tuple[str, str, str], None, None] - Executes the amavisd-agent process, captures its output, and yields parsed statistics as tuples of (metric_name, metric_type, value). Raises an exception if the process cannot be executed.",
    "Canonical_solution": "import os\nimport subprocess\nimport re\n\nclass AmavisCollector:\n    matchers = [\n        re.compile(r'^\\s*(?P<name>[\\w]+)\\s+(?P<time>[\\d]+) s\\s+'\n                   r'(?P<frequency>[\\d.]+) s/msg\\s+\\([\\w]+\\)\\s*$'),\n        re.compile(r'^\\s*(?P<name>[\\w.-]+)\\s+(?P<count>[\\d]+)\\s+'\n                   r'(?P<frequency>[\\d.]+)/h\\s+(?P<percentage>[\\d.]+) %'\n                   r'\\s\\([\\w]+\\)\\s*$'),\n        re.compile(r'^\\s*(?P<name>[\\w.-]+)\\s+(?P<size>[\\d]+)MB\\s+'\n                   r'(?P<frequency>[\\d.]+)MB/h\\s+(?P<percentage>[\\d.]+) %'\n                   r'\\s\\([\\w]+\\)\\s*$'),\n    ]\n\n    def __init__(self, amavisd_exe='/usr/sbin/amavisd-agent', use_sudo=False, sudo_exe='/usr/bin/sudo', sudo_user='amavis'):\n        self.config = {\n            'amavisd_exe': amavisd_exe,\n            'use_sudo': use_sudo,\n            'sudo_exe': sudo_exe,\n            'sudo_user': sudo_user\n        }\n\n    def collect(self):\n        try:\n            if self.config['use_sudo']:\n                cmdline = [\n                    self.config['sudo_exe'], '-u', self.config['sudo_user'],\n                    '--', self.config['amavisd_exe'], '-c', '1'\n                ]\n            else:\n                cmdline = [self.config['amavisd_exe'], '-c', '1']\n                \n            agent = subprocess.Popen(cmdline, stdout=subprocess.PIPE)\n            agent_out = agent.communicate()[0]\n            lines = agent_out.strip().split(os.linesep)\n            \n            for line in lines:\n                for rex in self.matchers:\n                    res = rex.match(line)\n                    if res:\n                        groups = res.groupdict()\n                        name = groups['name']\n                        for metric, value in groups.items():\n                            if metric == 'name':\n                                continue\n                            yield (name, metric, value)\n\n        except OSError as err:\n            raise Exception(f\"Could not run {self.config['amavisd_exe']}: {err}\")",
    "Code_level": "Class-level",
    "FSMID_for_test": 76,
    "right_result": "```python\nimport re\nimport subprocess\nfrom typing import List, Tuple, Dict, Any, Generator\n\nclass AmavisCollector:\n    def __init__(self, amavisd_exe: str = '/usr/sbin/amavisd-agent', use_sudo: bool = False, sudo_exe: str = '/usr/bin/sudo', sudo_user: str = 'amavis') -> None:\n        self.config = {\n            'amavisd_exe': amavisd_exe,\n            'use_sudo': use_sudo,\n            'sudo_exe': sudo_exe,\n            'sudo_user': sudo_user\n        }\n        self.matchers = []\n\n    def collect(self) -> Generator[Tuple[str, str, str], None, None]:\n        cmd = self.config['sudo_exe'] if self.config['use_sudo'] else ''\n        cmd += f\" {self.config['sudo_user']} {' ' + self.config['amavisd_exe'] if self.config['use_sudo'] else self.config['amavisd_exe']}\"\n        try:\n            process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)\n            stdout, stderr = process.communicate()\n            if process.returncode != 0:\n                raise Exception(f\"Failed to execute {cmd}: {stderr.decode()}\")\n            output = stdout.decode()\n            for matcher in self.matchers:\n                for match in matcher.finditer(output):\n                    yield match.group(1), match.group(2), match.group(3)\n        except Exception as e:\n            raise Exception(f\"Error collecting statistics: {e}\")\n```"
  },
  {
    "Task_id": 304,
    "Instruction": "Task Description: Create a function that executes a system command using Python's subprocess module and returns the output.\n\nFunction Description: The function should take a system command as input, execute it in a subprocess, capture the standard output, and return it as a string. The function should handle the process creation, communication, and cleanup automatically.\n\nInput: \n- com: str - A string representing the system command to be executed\n\nOutput:\n- str - The decoded standard output from the executed command",
    "Canonical_solution": "import urllib.request\nimport subprocess\n\ndef excuteCommand(com):\n    ex = subprocess.Popen(com, stdout=subprocess.PIPE, shell=True)\n    out, err = ex.communicate()\n    statusofssh = ex.wait()\n    return out.decode()",
    "Code_level": "Function-level",
    "FSMID_for_test": 76,
    "right_result": "import subprocess\n\ndef execute_command(com):\n    process = subprocess.Popen(com, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)\n    stdout, stderr = process.communicate()\n    return stdout.decode()"
  },
  {
    "Task_id": 305,
    "Instruction": "Task Description: The task involves creating Python functions for executing system commands and processing their output through inter-process communication (IPC) using pipes. The functions should handle command execution, output decoding, and temporary file management for command processing.\n\nFunction Description: The provided functions enable executing system commands through subprocesses, capturing and decoding their output, and processing text data through temporary files when needed. The functions handle Windows-specific configurations and character encoding.\n\nInput:\n- For run_and_read(view, cmd):\n  - view: [Any] - A placeholder parameter (unused in function)\n  - cmd: [str] - The command string to execute via cmd.exe\n\n- For filter_region(view, txt, command):\n  - view: [Any] - A placeholder parameter (unused in function)\n  - txt: [str] - The text content to process\n  - command: [str] - The command to process the text with\n\n- For get_startup_info() and get_oem_cp(): No input parameters\n\nOutput:\n- For run_and_read(): [str] - The decoded output from the command execution\n- For filter_region(): [str] - The processed text output from the command\n- For get_startup_info(): [subprocess.STARTUPINFO] - Windows process startup configuration\n- For get_oem_cp(): [str] - The OEM code page identifier as a string",
    "Canonical_solution": "import subprocess\nfrom subprocess import PIPE\nimport os\nimport tempfile\nimport ctypes\n\ndef get_startup_info():\n    startupinfo = subprocess.STARTUPINFO()\n    startupinfo.dwFlags |= subprocess.STARTF_USESHOWWINDOW\n    return startupinfo\n\ndef run_and_read(view, cmd):\n    out, err = subprocess.Popen(['cmd.exe', '/c', cmd],\n                                stdout=PIPE,\n                                stderr=PIPE,\n                                shell=True,\n                                startupinfo=get_startup_info()).communicate()\n    try:\n        return (out or err).decode(get_oem_cp()).replace('\\r\\n', '\\n')\n    except AttributeError:\n        return ''\n\ndef filter_region(view, txt, command):\n    try:\n        contents = tempfile.NamedTemporaryFile(suffix='.txt', delete=False)\n        contents.write(txt.encode('utf-8'))\n        contents.close()\n\n        script = tempfile.NamedTemporaryFile(suffix='.bat', delete=False)\n        script.write(('@echo off\\ntype %s | %s' % (contents.name, command)).encode('utf-8'))\n        script.close()\n\n        p = subprocess.Popen([script.name],\n                             stdout=PIPE,\n                             stderr=PIPE,\n                             startupinfo=get_startup_info())\n\n        out, err = p.communicate()\n        return (out or err).decode(get_oem_cp()).replace('\\r\\n', '\\n')[:-1].strip()\n    finally:\n        os.remove(script.name)\n        os.remove(contents.name)\n\ndef get_oem_cp():\n    codepage = ctypes.windll.kernel32.GetOEMCP()\n    return str(codepage)",
    "Code_level": "Function-level",
    "FSMID_for_test": 76,
    "right_result": "```python\nimport subprocess\nimport os\nimport tempfile\nimport sys\nimport ctypes\n\ndef run_and_read(view, cmd):\n    startupinfo = subprocess.STARTUPINFO()\n    startupinfo.dwFlags |= subprocess.STARTF_USESHOWWINDOW\n    startupinfo.wShowWindow = subprocess.SW_HIDE\n    process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, startupinfo=startupinfo, text=True, bufsize=1, encoding='utf-8')\n    stdout, stderr = process.communicate()\n    return stdout\n\ndef filter_region(view, txt, command):\n    with tempfile.NamedTemporaryFile(mode='w', encoding='utf-8') as tf:\n        tf.write(txt)\n        tf.flush()\n        full_cmd = f'cat \"{tf.name}\" | {command}'\n        return run_and_read(view, full_cmd)\n\ndef get_startup_info():\n    return subprocess.STARTUPINFO()\n\ndef get_oem_cp():\n    return ctypes.windll.kernel32.GetOEMCP()\n```"
  },
  {
    "Task_id": 306,
    "Instruction": "Task Description: Implement a class that interacts with partclone utility to retrieve and parse partition information from disk image files, handling potential compression and chaining multiple subprocesses together.\n\nClass Description: The Partclone class provides static methods for working with partclone disk images, particularly focused on extracting partition information through a chain of subprocess operations.\n\nMethods:\n\nMethod1: get_partclone_info_dict(abs_partclone_image_list: list, image_key: str, compression: str) -> dict - Retrieves partition information from partclone image files by executing a chain of subprocess commands (cat, decompression, and partclone.info). Returns a dictionary containing parsed partition information.\n\nInput:\n- abs_partclone_image_list: List of absolute paths to partclone image files\n- image_key: String identifier for the image\n- compression: String specifying compression type (used for decompression)\n\nOutput:\n- Dictionary containing parsed partition information, with 'filesystem' as a minimum key (set to \"<unknown>\" if parsing fails)\n\nMethod2: parse_partclone_info_output(output: str) -> dict - [Implied but not shown in code] Parses the output string from partclone.info command into a structured dictionary. This would be a helper method called by get_partclone_info_dict.\n\nInput:\n- output: String containing the raw output from partclone.info command\n\nOutput:\n- Dictionary containing structured partition information extracted from the output",
    "Canonical_solution": "import collections\nimport subprocess\n\nclass Partclone:\n    @staticmethod\n    def get_partclone_info_dict(abs_partclone_image_list, image_key, compression):\n        env = utility.Utility.get_env_C_locale()\n        proc = collections.OrderedDict()\n        cat_cmd_list = [\"cat\"] + abs_partclone_image_list\n        decompression_cmd_list = utility.Utility.get_decompression_command_list(compression)\n        partclone_info_cmd_list = [\"partclone.info\", \"--source\", \"-\"]\n        utility.Utility.print_cli_friendly(\"partclone \", [cat_cmd_list, decompression_cmd_list, partclone_info_cmd_list])\n        proc['cat_partclone' + image_key] = subprocess.Popen(cat_cmd_list, stdout=subprocess.PIPE, env=env,\n                                                                          encoding='utf-8')\n        proc['decompression' + image_key] = subprocess.Popen(decompression_cmd_list,\n                                                                          stdin=proc[\n                                                                              'cat_partclone' + image_key].stdout,\n                                                                          stdout=subprocess.PIPE, env=env, encoding='utf-8')\n        proc['partclone_info' + image_key] = subprocess.Popen(partclone_info_cmd_list,\n                                                                           stdin=proc[\n                                                                               'decompression' + image_key].stdout,\n                                                                           stdout=subprocess.PIPE,\n                                                                           stderr=subprocess.PIPE, env=env,\n                                                                           encoding='utf-8')\n        proc['cat_partclone' + image_key].stdout.close()  # Allow p1 to receive a SIGPIPE if p2 exits.\n        proc['decompression' + image_key].stdout.close()  # Allow p1 to receive a SIGPIPE if p2 exits.\n        output, err = proc['partclone_info' + image_key].communicate()\n        print(\"partclone_info: Exit output \" + str(output) + \"stderr \" + str(err))\n        partclone_info_dict = Partclone.parse_partclone_info_output(err)\n        if len(partclone_info_dict) == 0:\n            print(abs_partclone_image_list[0] + \": Could not read partclone info dict for \" + image_key + \". Treating it as a dd image.\")\n            partclone_info_dict['filesystem'] = \"<unknown>\"\n        return partclone_info_dict",
    "Code_level": "Class-level",
    "FSMID_for_test": 76,
    "right_result": "```python\nimport subprocess\nimport shlex\nimport json\n\nclass Partclone:\n    @staticmethod\n    def get_partclone_info_dict(abs_partclone_image_list, image_key, compression):\n        info_dict = {}\n        for image_path in abs_partclone_image_list:\n            decompressed_path = image_path + \".decompressed\"\n            with open(image_path, 'rb') as image_file:\n                with open(decompressed_path, 'wb') as decompressed_file:\n                    decompressed_file.write(image_file.read().decode(compression).encode('utf-8'))\n            partclone_info_cmd = f\"partclone.info --json --key {image_key} {decompressed_path}\"\n            process = subprocess.Popen(partclone_info_cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n            stdout, stderr = process.communicate()\n            if process.returncode == 0:\n                info_dict[image_path] = Partclone.parse_partclone_info_output(stdout.decode())\n            else:\n                info_dict[image_path] = {'filesystem': '<unknown>'}\n        return info_dict\n\n    @staticmethod\n    def parse_partclone_info_output(output):\n        return json.loads(output)\n```"
  },
  {
    "Task_id": 307,
    "Instruction": "Task Description: The task involves creating a function that executes a command in a subprocess, captures its output, and extracts specific metrics from the output for analysis.\n\nFunction Description: The function `run_gpt` executes a given command as a subprocess, captures its standard output and error streams, and parses the output to extract metrics such as runtime, number of parameters, and success status. It then returns these metrics along with any error messages.\n\nInput: \n- `cmd` (str): A string representing the command to be executed in the subprocess.\n\nOutput: \n- A tuple containing:\n  - `runtime` (float): The average iteration time extracted from the output.\n  - `num_params` (float): The number of parameters in billions, rounded to 3 decimal places.\n  - `success` (bool): A boolean indicating whether the test was successful based on a predefined success message.\n  - `errs` (bytes): The error output from the subprocess.",
    "Canonical_solution": "import subprocess\nfrom apex.transformer.testing.commons import TEST_SUCCESS_MESSAGE\n\ndef run_gpt(cmd):\n    args = list(cmd.split(\" \"))\n    p = subprocess.Popen(args, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    outs, errs = p.communicate()\n    outs = list(str((outs).decode(\"utf-8\")).splitlines())\n    success = False\n    runtime = 0\n    num_params = 0\n    for out in outs:\n        out = str(out)\n        if \"Average Iteration Time:\" in str(out):\n            slicey = out[out.find(\":\") + 2 :]\n            try:\n                runtime = float(slicey)\n            except:\n                print(slicey)\n                quit()\n        if \"Number of Parameters:\" in str(out):\n            slicey = out[out.find(\":\") + 2 :]\n            try:\n                num_params = int(slicey)\n            except:\n                print(slicey)\n                quit()\n        if str(out) == str(TEST_SUCCESS_MESSAGE):\n            success = True\n    return runtime, round(float(int(num_params)) / 10.0 ** 9, 3), success, errs",
    "Code_level": "Function-level",
    "FSMID_for_test": 76,
    "right_result": "```python\nimport subprocess\nimport re\n\ndef run_gpt(cmd):\n    process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)\n    stdout, stderr = process.communicate()\n    runtime = float(re.search(r\"Average iteration time: (\\d+\\.\\d+)\", stdout.decode()).group(1))\n    num_params = round(float(re.search(r\"Number of parameters: (\\d+\\.\\d+)\", stdout.decode()).group(1)), 3)\n    success = \"Test successful\" in stdout.decode()\n    return runtime, num_params, success, stderr\n```"
  },
  {
    "Task_id": 309,
    "Instruction": "Task Description: Convert HTML content to plain text using external command-line tools through subprocess communication.\n\nFunction Description: The function converts HTML data to plain text using either 'lynx' or 'html2text' command-line tools. It handles process creation, input/output communication via pipes, and result processing. The function supports additional options for the conversion tools and ensures proper character encoding.\n\nInput:\n- data: [str] - The HTML content to be converted\n- baseurl: [str] - Base URL for relative links (unused in current implementation)\n- method: [str] - Conversion method ('lynx' or 'html2text')\n- options: [dict] - Additional options to pass to the conversion tool (key-value pairs where value can be None for flag options)\n\nOutput:\n- [str] - The converted plain text content with formatting cleaned up",
    "Canonical_solution": "import re\nimport os\nimport subprocess\nimport logging\n\nlogger = logging.getLogger(__name__)\n\ndef html2text(data, baseurl, method, options):\n    if method == 'lynx':\n        cmd = ['lynx', '-nonumbers', '-dump', '-stdin', '-assume_charset UTF-8', '-display_charset UTF-8']\n    elif method == 'html2text':\n        if '-utf8' in subprocess.check_output(['html2text', '-help'], encoding='utf-8'):\n            cmd = ['html2text', '-nobs', '-utf8']\n        else:\n            cmd = ['html2text', '-nobs']\n    else:\n        raise ValueError('Unknown html2text method: %r' % (method,))\n\n    stdout_encoding = 'utf-8'\n\n    for k, v in options.items():\n        if v is not None:\n            cmd.extend(['-{}'.format(k), '{}'.format(v)])\n        else:\n            cmd.append('-{}'.format(k))\n\n    logger.debug('Command: %r, stdout encoding: %s', cmd, stdout_encoding)\n\n    env = {}\n    env.update(os.environ)\n    env['LANG'] = 'en_US.utf-8'\n    env['LC_ALL'] = 'en_US.utf-8'\n\n    html2text = subprocess.Popen(cmd, stdin=subprocess.PIPE, stdout=subprocess.PIPE, env=env)\n    stdout, stderr = html2text.communicate(data.encode('utf-8'))\n    stdout = stdout.decode(stdout_encoding)\n\n    if method == 'lynx':\n        stdout = re.sub(r'file://%s/[^/]*/' % (os.environ.get('TMPDIR', '/tmp'),), '', stdout)\n        stdout = re.sub(r'file://localhost%s/[^/]*/' % (os.environ.get('TMPDIR', '/tmp'),), '', stdout)\n        stdout = re.sub(r'L\\d+-\\d+TMP.html', '', stdout)\n\n    return stdout.strip()",
    "Code_level": "Function-level",
    "FSMID_for_test": 76,
    "right_result": "import subprocess\nimport shlex\n\ndef html_to_text(data, baseurl, method, options):\n    if method == 'lynx':\n        cmd = ['lynx', '-stdin', '-nolist', '-width', '80']\n    elif method == 'html2text':\n        cmd = ['html2text']\n    else:\n        raise ValueError(\"Unsupported conversion method\")\n\n    if options:\n        for key, value in options.items():\n            if value is None:\n                cmd.append(f'--{key}')\n            else:\n                cmd.append(f'--{key}={value}')\n\n    process = subprocess.Popen(cmd, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)\n    stdout, stderr = process.communicate(data)\n    if process.returncode != 0:\n        raise Exception(f\"Error converting HTML to text: {stderr}\")\n    return stdout.strip()"
  },
  {
    "Task_id": 311,
    "Instruction": "Task Description: Implement a set of utility functions for executing shell commands in Python using subprocess.PIPE for inter-process communication, with options for real-time output display and logging.\n\nFunction Description: The functions provide different ways to execute shell commands and handle their output:\n1. run_command - Executes a command and collects all output lines\n2. run_shell_display - Executes a command and displays output in real-time\n3. run_shell - Executes a command and logs output to a file\n\nInput:\n- For run_command: cmd [str] - The shell command to execute\n- For run_shell_display: cmd [str] - The shell command to execute\n- For run_shell: cmd [str] - The shell command to execute, log_file [str] - Path to log file\n\nOutput:\n- For run_command: [str] - Combined stdout/stderr output\n- For run_shell_display: None (output is displayed in real-time)\n- For run_shell: [bytes] - Raw command output (also written to log file)",
    "Canonical_solution": "import subprocess\n\ndef run_command(cmd):\n    p = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)\n    stdout = []\n    while True:\n        line = p.stdout.readline()\n        stdout.append(line)\n        print(line.decode(\"utf-8\"))\n        if line == \"\" and p.poll() != None:\n            break\n    return \"\".join(stdout)\n\ndef run_shell_display(cmd):\n    p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)\n    while True:\n        out = p.stdout.read(1).decode(\"utf-8\")\n        if out == \"\" and p.poll() != None:\n            break\n        if out != \"\":\n            sys.stdout.write(out)\n            sys.stdout.flush()\n    return\n\ndef run_shell(cmd, log_file):\n    p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)\n    (output, err) = p.communicate()\n    p.wait()\n    with open(log_file, \"a+\") as logfile:\n        logfile.write(output.decode(\"utf-8\") + \"\\n\")\n        logfile.write(err.decode(\"utf-8\") + \"\\n\")\n    return output",
    "Code_level": "Function-level",
    "FSMID_for_test": 76,
    "right_result": "```python\nimport subprocess\n\ndef run_command(cmd):\n    process = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)\n    stdout, stderr = process.communicate()\n    return stdout + stderr\n\ndef run_shell_display(cmd):\n    process = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)\n    while True:\n        line = process.stdout.readline()\n        if not line:\n            break\n        print(line, end='')\n\ndef run_shell(cmd, log_file):\n    with open(log_file, 'w') as f:\n        process = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)\n        stdout, stderr = process.communicate()\n        f.write(stdout + stderr)\n        return stdout.encode()\n```"
  },
  {
    "Task_id": 312,
    "Instruction": "Task Description: Implement functions to execute system commands asynchronously and synchronously using subprocess.PIPE for inter-process communication.\n\nFunction Description: \n- run_command_async: Executes a system command asynchronously with configurable pipe settings for stdin, stdout, and stderr.\n- run_command: Executes a system command synchronously, handles input/output through pipes, and manages process lifecycle.\n\nInput:\n- run_command_async:\n  - cmd_args: [List[str]] - Command and arguments to execute\n  - pipe_stdin: [bool] - Whether to pipe stdin (default: True)\n  - pipe_stdout: [bool] - Whether to pipe stdout (default: False)\n  - pipe_stderr: [bool] - Whether to pipe stderr (default: False)\n  - quiet: [bool] - If True, pipes both stdout and stderr (default: False)\n\n- run_command:\n  - cmd_args: [List[str]] - Command and arguments to execute\n  - input: [Optional[bytes]] - Input data to send to process (default: None)\n  - pipe_stdin: [bool] - Whether to pipe stdin (default: True)\n  - pipe_stdout: [bool] - Whether to pipe stdout (default: False)\n  - pipe_stderr: [bool] - Whether to pipe stderr (default: False)\n  - quiet: [bool] - If True, pipes both stdout and stderr (default: False)\n\nOutput:\n- run_command_async: Returns a subprocess.Popen object representing the running process\n- run_command: Returns a tuple (stdout_data, stderr_data) containing the process output",
    "Canonical_solution": "import subprocess as sp\n\ndef run_command_async(cmd_args,\n                      pipe_stdin=True,\n                      pipe_stdout=False,\n                      pipe_stderr=False,\n                      quiet=False):\n    stdin_stream = sp.PIPE if pipe_stdin else None\n    stdout_stream = sp.PIPE if pipe_stdout or quiet else None\n    stderr_stream = sp.PIPE if pipe_stderr or quiet else None\n\n    return sp.Popen(\n        cmd_args,\n        stdin=stdin_stream,\n        stdout=stdout_stream,\n        stderr=stderr_stream,\n        close_fds=True)\n\ndef run_command(cmd_args,\n                input=None,\n                pipe_stdin=True,\n                pipe_stdout=False,\n                pipe_stderr=False,\n                quiet=False):\n    with run_command_async(\n            cmd_args,\n            pipe_stdin=pipe_stdin,\n            pipe_stdout=pipe_stdout,\n            pipe_stderr=pipe_stderr,\n            quiet=quiet) as proc:\n        stdout, stderr = proc.communicate(input)\n        retcode = proc.poll()\n\n        if retcode:\n            raise Exception('ffmpeg error: %s' % stderr)\n\n        if proc.stdout is not None:\n            proc.stdout.close()\n        if proc.stderr is not None:\n            proc.stderr.close()\n\n        return stdout, stderr",
    "Code_level": "Function-level",
    "FSMID_for_test": 76,
    "right_result": "```python\nimport subprocess\n\ndef run_command_async(cmd_args, pipe_stdin=True, pipe_stdout=False, pipe_stderr=False, quiet=False):\n    return subprocess.Popen(cmd_args, stdin=subprocess.PIPE if pipe_stdin else None, stdout=subprocess.PIPE if pipe_stdout else None, stderr=subprocess.PIPE if pipe_stderr or quiet else None)\n\ndef run_command(cmd_args, input=None, pipe_stdin=True, pipe_stdout=False, pipe_stderr=False, quiet=False):\n    process = subprocess.Popen(cmd_args, stdin=subprocess.PIPE if pipe_stdin else None, stdout=subprocess.PIPE if pipe_stdout else None, stderr=subprocess.PIPE if pipe_stderr or quiet else None)\n    stdout_data, stderr_data = process.communicate(input=input)\n    return stdout_data, stderr_data\n```"
  },
  {
    "Task_id": 314,
    "Instruction": "Task Description: Create a Python function that consumes messages from a RabbitMQ queue using the pika library, processing each message with a callback function.\n\nFunction Description: The function establishes a connection to a RabbitMQ server, declares a durable queue, and starts consuming messages from the specified queue. Each received message is processed by a callback function that prints the message body. The function runs in a blocking mode, continuously waiting for messages until interrupted.\n\nInput:\n- port: [int] - The port number of the RabbitMQ server to connect to (default is typically 5672)\n\nOutput: None (The function runs indefinitely until interrupted, printing received messages to the console)",
    "Canonical_solution": "from multiprocessing import Process\nimport pika\n\ndef callback(ch, method, properties, body):\n    print(\" [x] Received %r\" % body.decode())\n\ndef receiver(port):\n    connection = pika.BlockingConnection(\n        pika.ConnectionParameters(host='localhost', port=port))\n    channel = connection.channel()\n    channel.queue_declare(queue='cryptofeed', durable=True)\n    channel.basic_consume(queue='cryptofeed',\n                          on_message_callback=callback, auto_ack=True)\n    print(' [*] Waiting for messages. To exit press CTRL+C')\n    channel.start_consuming()\n\nif __name__ == '__main__':\n    p = Process(target=receiver, args=(5672,))\n    p.start()",
    "Code_level": "Function-level",
    "FSMID_for_test": 77,
    "right_result": "```python\nimport pika\n\ndef consume_messages(queue_name, callback, port=5672):\n    connection = pika.BlockingConnection(pika.ConnectionParameters('localhost', port))\n    channel = connection.channel()\n    channel.queue_declare(queue=queue_name, durable=True)\n    def callback(ch, method, properties, body):\n        callback(body)\n    channel.basic_consume(queue=queue_name, on_message_callback=callback, auto_ack=True)\n    print(' [*] Waiting for messages. To exit press CTRL+C')\n    channel.start_consuming()\n```"
  },
  {
    "Task_id": 315,
    "Instruction": "Task Description: Implement a RabbitMQ consumer function in Python that connects to a RabbitMQ server, declares a queue, and processes incoming messages using a callback function. The function should handle message acknowledgment and print the received messages.\n\nFunction Description: The function establishes a connection to a RabbitMQ server using blocking connection, declares a specified queue, and sets up a callback function to process incoming messages. The callback function parses the message body using Pydantic's BaseModel and acknowledges the message upon successful processing.\n\nInput: \n- None (The function uses hardcoded connection parameters and queue name)\n\nOutput: \n- None (The function prints received messages to the console and runs indefinitely in a blocking consumption loop)\n\nNote: The function does not explicitly return any value but continuously processes messages from the specified RabbitMQ queue until interrupted. The callback function prints both the parsed message (as a Pydantic model) and the raw message body.",
    "Canonical_solution": "import pika\nfrom pydantic import BaseModel\n\ndef rabbitmq_consumer():\n    credentials = pika.PlainCredentials(\"admin\", \"admin\")\n    connection = pika.BlockingConnection(pika.ConnectionParameters('127.0.0.1', credentials=credentials))\n    channel = connection.channel()\n    channel.queue_declare(queue=\"\u6c34\u8bb8\u4f20\")\n\n    def callbak(ch, method, properties, body):\n        class Test(BaseModel):\n            name: str\n            age: int\n        print(Test.parse_raw(body))\n        print(\"\u6d88\u8d39\u8005\u63a5\u6536\u5230\u4e86\u4efb\u52a1\uff1a%r\" % body.decode(\"utf8\"))\n        ch.basic_ack(delivery_tag=method.delivery_tag)\n\n    channel.basic_consume(on_message_callback=callbak, queue=\"\u6c34\u8bb8\u4f20\", auto_ack=False)\n    channel.start_consuming()",
    "Code_level": "Function-level",
    "FSMID_for_test": 77,
    "right_result": "```python\nimport pika\nfrom pydantic import BaseModel\n\nclass Message(BaseModel):\n    data: str\n\ndef callback(ch, method, properties, body):\n    message = Message.parse_raw(body)\n    print(f\"Parsed message: {message}\")\n    print(f\"Raw message: {body}\")\n    ch.basic_ack(delivery_tag=method.delivery_tag)\n\ndef consume_messages():\n    connection = pika.BlockingConnection(pika.ConnectionParameters('localhost'))\n    channel = connection.channel()\n    channel.queue_declare(queue='my_queue')\n    channel.basic_qos(prefetch_count=1)\n    channel.basic_consume(queue='my_queue', on_message_callback=callback)\n    print('Consuming messages from RabbitMQ...')\n    channel.start_consuming()\n```"
  },
  {
    "Task_id": 316,
    "Instruction": "Task Description: Implement a RabbitMQ message consumer function in Python using the pika library to receive and process messages from a specified queue.\n\nFunction Description: The function establishes a connection to a RabbitMQ server, declares a topic exchange and a queue, binds them together, and starts consuming messages. Each received message is processed by a callback function that prints the message body.\n\nInput:\n- port: [int] - The port number of the RabbitMQ server to connect to (default is typically 5672)\n\nOutput: None (The function runs indefinitely, consuming messages until interrupted)",
    "Canonical_solution": "import pika\nfrom multiprocessing import Process\n\ndef callback(ch, method, properties, body):\n    print(\" [x] Received %r\" % body.decode())\n\ndef receiver(port):\n    connection = pika.BlockingConnection(\n        pika.ConnectionParameters(host='localhost', port=port))\n    channel = connection.channel()\n    exchange_name = 'amq.topic'\n    exchange_type = 'topic'\n    channel.exchange_declare(exchange=exchange_name, exchange_type=exchange_type, durable=True)\n    queue_name = 'cryptofeed'\n    channel.queue_declare(queue=queue_name)\n    channel.queue_bind(exchange=exchange_name, queue=queue_name)\n    channel.basic_consume(queue=queue_name, on_message_callback=callback, auto_ack=True)\n    print(' [*] Waiting for messages. To exit press CTRL+C')\n    channel.start_consuming()",
    "Code_level": "Function-level",
    "FSMID_for_test": 77,
    "right_result": "```python\nimport pika\n\ndef consume_messages(port=5672):\n    connection = pika.BlockingConnection(pika.ConnectionParameters('localhost', port))\n    channel = connection.channel()\n    channel.exchange_declare(exchange='topic_exchange', exchange_type='topic')\n    result = channel.queue_declare(queue='', durable=True)\n    queue_name = result.method.queue\n    channel.queue_bind(exchange='topic_exchange', queue=queue_name, routing_key='*.info')\n    def callback(ch, method, properties, body):\n        print(body)\n    channel.basic_consume(queue=queue_name, on_message_callback=callback, auto_ack=True)\n    channel.start_consuming()\n```"
  },
  {
    "Task_id": 317,
    "Instruction": "Task Description: Implement a RabbitMQ consumer function in Python that listens to a specified queue, processes incoming messages by syncing them to either a MongoDB or Redis database based on configuration, and acknowledges successful processing.\n\nFunction Description: The function establishes a connection to a RabbitMQ server, declares a durable queue, sets up a callback function to handle incoming messages, and starts consuming messages in a blocking loop. The callback function processes each message by syncing it to the configured database (MongoDB or Redis) and sends an acknowledgment back to RabbitMQ upon successful processing.\n\nInput: None (All configuration parameters are expected to be available in a config module:\n- config.rabbitmq_user: RabbitMQ username\n- config.rabbitmq_pass: RabbitMQ password\n- config.rabbitmq_host: RabbitMQ host address\n- config.rabbitmq_port: RabbitMQ port\n- config.rabbitmq_queue_name: Name of the queue to consume from\n- config.sync_db: Database type ('mongo' or 'redis') to sync data to)\n\nOutput: None (The function runs indefinitely, consuming messages from RabbitMQ and syncing them to the configured database)",
    "Canonical_solution": "import os\nimport pika\nimport config\nif config.sync_db=='mongo':\n    import sync_mongo as sync_data\nelse:\n    import sync_redis as sync_data\n\ndef consumer_data():\n    credentials = pika.PlainCredentials(config.rabbitmq_user, config.rabbitmq_pass)\n    parameters = pika.ConnectionParameters(config.rabbitmq_host, config.rabbitmq_port,'/',credentials)\n    connection = pika.BlockingConnection(parameters)\n    channel = connection.channel()\n    channel.queue_declare(queue=config.rabbitmq_queue_name, durable=True)\n\n    def callback(ch, method, properties, body):\n        ack = sync_data.set_data(body)\n        ch.basic_ack(delivery_tag = method.delivery_tag)\n\n    channel.basic_qos(prefetch_count=1)\n    channel.basic_consume(callback, \n                        queue=config.rabbitmq_queue_name,\n                        )\n    channel.start_consuming()",
    "Code_level": "Function-level",
    "FSMID_for_test": 77,
    "right_result": "```python\nimport pika\nimport json\nfrom pymongo import MongoClient\nimport redis\n\ndef sync_to_mongo(data):\n    client = MongoClient('localhost', 27017)\n    db = client['mydatabase']\n    collection = db['mycollection']\n    collection.insert_one(data)\n\ndef sync_to_redis(data):\n    r = redis.Redis(host='localhost', port=6379, db=0)\n    r.lpush('mylist', json.dumps(data))\n\ndef callback(ch, method, properties, body):\n    data = json.loads(body)\n    if config.sync_db == 'mongo':\n        sync_to_mongo(data)\n    elif config.sync_db == 'redis':\n        sync_to_redis(data)\n    ch.basic_ack(delivery_tag=method.delivery_tag)\n\ndef consume_messages():\n    connection = pika.BlockingConnection(\n        pika.ConnectionParameters(\n            host=config.rabbitmq_host,\n            port=config.rabbitmq_port,\n            username=config.rabbitmq_user,\n            password=config.rabbitmq_pass\n        )\n    )\n    channel = connection.channel()\n    channel.queue_declare(queue=config.rabbitmq_queue_name, durable=True)\n    channel.basic_qos(prefetch_count=1)\n    channel.basic_consume(queue=config.rabbitmq_queue_name, on_message_callback=callback)\n    print('Waiting for messages. To exit press CTRL+C')\n    channel.start_consuming()\n```"
  },
  {
    "Task_id": 318,
    "Instruction": "Task Description: Implement a TCP relay handler class that manages communication between a local client and a remote server, handling socket connections, data encryption, and protocol obfuscation.\n\nClass Description: The TCPRelayHandler class is responsible for managing the relay of TCP traffic between a local client and a remote server. It handles socket creation, connection management, data encryption/decryption, and protocol obfuscation. The class integrates with an event loop for asynchronous I/O operations.\n\nAttributes:\n- _server: [object] - Reference to the parent server instance\n- _fd_to_handlers: [dict] - Mapping of file descriptors to handler instances\n- _loop: [object] - Event loop instance for I/O multiplexing\n- _local_sock: [socket.socket] - Local client socket\n- _remote_sock: [socket.socket] - Remote server socket (IPv4)\n- _remote_sock_v6: [socket.socket] - Remote server socket (IPv6)\n- _remote_udp: [bool] - Flag indicating UDP mode\n- _config: [dict] - Configuration parameters\n- _dns_resolver: [object] - DNS resolver instance\n- _is_local: [bool] - Flag indicating local mode\n- _stage: [int] - Current connection stage\n- _encryptor: [object] - Encryption handler\n- _encrypt_correct: [bool] - Encryption status flag\n- _obfs: [object] - Obfuscation handler\n- _protocol: [object] - Protocol handler\n- _fastopen_connected: [bool] - TCP Fast Open status\n- _data_to_write_to_local: [list] - Buffer for data to local client\n- _data_to_write_to_remote: [list] - Buffer for data to remote server\n- _udp_data_send_buffer: [bytes] - UDP data buffer\n- _upstream_status: [int] - Upstream connection status\n- _downstream_status: [int] - Downstream connection status\n- _client_address: [tuple] - Local client address\n- _remote_address: [tuple] - Remote server address\n- _forbidden_iplist: [list] - List of blocked IP addresses\n- _chosen_server: [object] - Selected server instance\n- last_activity: [int] - Timestamp of last activity\n\nMethods:\n- __init__(server, fd_to_handlers, loop, local_sock, config, dns_resolver, is_local) -> None - Initializes the handler with server configuration and sockets\n- _create_remote_socket(ip, port) -> socket.socket - Creates and configures a remote socket connection\n- _write_to_sock(data, sock) -> bool - Writes data to a socket with encryption/obfuscation\n- destroy() -> None - Cleans up resources and closes all connections\n- _update_activity() -> None - Updates the last activity timestamp\n- _get_a_server() -> object - Selects an appropriate server from configuration\n- _handle_dns_resolved(result, error) -> None - Callback for DNS resolution\n- _update_stream(stream, status) -> None - Updates stream status in event loop\n- _on_local_read() -> None - Handles local socket read events\n- _on_remote_read() -> None - Handles remote socket read events\n- _on_local_write() -> None - Handles local socket write events\n- _on_remote_write() -> None - Handles remote socket write events",
    "Canonical_solution": "import socket\nimport errno\nimport struct\nimport logging\nimport binascii\nimport traceback\nimport random\nfrom shadowsocks import encrypt, obfs, eventloop, shell, common\nfrom shadowsocks.common import pre_parse_header, parse_header\n\nclass TCPRelayHandler:\n    def __init__(self, server, fd_to_handlers, loop, local_sock, config, dns_resolver, is_local):\n        self._server = server\n        self._fd_to_handlers = fd_to_handlers\n        self._loop = loop\n        self._local_sock = local_sock\n        self._remote_sock = None\n        self._remote_sock_v6 = None\n        self._remote_udp = False\n        self._config = config\n        self._dns_resolver = dns_resolver\n        self._is_local = is_local\n        self._stage = STAGE_INIT\n        self._encryptor = encrypt.Encryptor(config['password'], config['method'])\n        self._encrypt_correct = True\n        self._obfs = obfs.obfs(config['obfs'])\n        server_info = obfs.server_info(server.obfs_data)\n        server_info.host = config['server']\n        server_info.port = server._listen_port\n        server_info.tcp_mss = 1440\n        server_info.param = config['obfs_param']\n        self._obfs.set_server_info(server_info)\n        self._protocol = obfs.obfs(config['protocol'])\n        server_info = obfs.server_info(server.protocol_data)\n        server_info.host = config['server']\n        server_info.port = server._listen_port\n        server_info.tcp_mss = 1440\n        server_info.param = ''\n        self._protocol.set_server_info(server_info)\n        self._fastopen_connected = False\n        self._data_to_write_to_local = []\n        self._data_to_write_to_remote = []\n        self._udp_data_send_buffer = b''\n        self._upstream_status = WAIT_STATUS_READING\n        self._downstream_status = WAIT_STATUS_INIT\n        self._client_address = local_sock.getpeername()[:2]\n        self._remote_address = None\n        if 'forbidden_ip' in config:\n            self._forbidden_iplist = config['forbidden_ip']\n        else:\n            self._forbidden_iplist = None\n        if is_local:\n            self._chosen_server = self._get_a_server()\n        fd_to_handlers[local_sock.fileno()] = self\n        local_sock.setblocking(False)\n        local_sock.setsockopt(socket.SOL_TCP, socket.TCP_NODELAY, 1)\n        loop.add(local_sock, eventloop.POLL_IN | eventloop.POLL_ERR, self._server)\n        self.last_activity = 0\n        self._update_activity()\n        self._server.add_connection(1)\n\n    def _create_remote_socket(self, ip, port):\n        if self._remote_udp:\n            addrs_v6 = socket.getaddrinfo(\"::\", 0, 0, socket.SOCK_DGRAM, socket.SOL_UDP)\n            addrs = socket.getaddrinfo(\"0.0.0.0\", 0, 0, socket.SOCK_DGRAM, socket.SOL_UDP)\n        else:\n            addrs = socket.getaddrinfo(ip, port, 0, socket.SOCK_STREAM, socket.SOL_TCP)\n        if len(addrs) == 0:\n            raise Exception(\"getaddrinfo failed for %s:%d\" % (ip, port))\n        af, socktype, proto, canonname, sa = addrs[0]\n        if self._forbidden_iplist:\n            if common.to_str(sa[0]) in self._forbidden_iplist:\n                raise Exception('IP %s is in forbidden list, reject' % common.to_str(sa[0]))\n        remote_sock = socket.socket(af, socktype, proto)\n        self._remote_sock = remote_sock\n        self._fd_to_handlers[remote_sock.fileno()] = self\n\n        if self._remote_udp:\n            af, socktype, proto, canonname, sa = addrs_v6[0]\n            remote_sock_v6 = socket.socket(af, socktype, proto)\n            self._remote_sock_v6 = remote_sock_v6\n            self._fd_to_handlers[remote_sock_v6.fileno()] = self\n            remote_sock.setsockopt(socket.SOL_SOCKET, socket.SO_RCVBUF, 1024 * 32)\n            remote_sock.setsockopt(socket.SOL_SOCKET, socket.SO_SNDBUF, 1024 * 32)\n            remote_sock_v6.setsockopt(socket.SOL_SOCKET, socket.SO_RCVBUF, 1024 * 32)\n            remote_sock_v6.setsockopt(socket.SOL_SOCKET, socket.SO_SNDBUF, 1024 * 32)\n\n        remote_sock.setblocking(False)\n        if self._remote_udp:\n            remote_sock_v6.setblocking(False)\n        else:\n            remote_sock.setsockopt(socket.SOL_TCP, socket.TCP_NODELAY, 1)\n        return remote_sock\n\n    def _write_to_sock(self, data, sock):\n        if not sock:\n            return False\n        uncomplete = False\n        if self._remote_udp and sock == self._remote_sock:\n            try:\n                self._udp_data_send_buffer += data\n                while len(self._udp_data_send_buffer) > 6:\n                    length = struct.unpack('>H', self._udp_data_send_buffer[:2])[0]\n                    if length > len(self._udp_data_send_buffer):\n                        break\n                    data = self._udp_data_send_buffer[:length]\n                    self._udp_data_send_buffer = self._udp_data_send_buffer[length:]\n                    frag = common.ord(data[2])\n                    if frag != 0:\n                        logging.warn('drop a message since frag is %d' % (frag,))\n                        continue\n                    else:\n                        data = data[3:]\n                    header_result = parse_header(data)\n                    if header_result is None:\n                        continue\n                    connecttype, dest_addr, dest_port, header_length = header_result\n                    addrs = socket.getaddrinfo(dest_addr, dest_port, 0, socket.SOCK_DGRAM, socket.SOL_UDP)\n                    if addrs:\n                        af, socktype, proto, canonname, server_addr = addrs[0]\n                        data = data[header_length:]\n                        if af == socket.AF_INET6:\n                            self._remote_sock_v6.sendto(data, (server_addr[0], dest_port))\n                        else:\n                            sock.sendto(data, (server_addr[0], dest_port))\n            except Exception as e:\n                error_no = eventloop.errno_from_exception(e)\n                if error_no in (errno.EAGAIN, errno.EINPROGRESS, errno.EWOULDBLOCK):\n                    uncomplete = True\n                else:\n                    shell.print_exception(e)\n                    self.destroy()\n                    return False\n            return True\n        else:\n            try:\n                if self._is_local:\n                    pass\n                else:\n                    if sock == self._local_sock and self._encrypt_correct:\n                        obfs_encode = self._obfs.server_encode(data)\n                        data = obfs_encode\n                if data:\n                    l = len(data)\n                    s = sock.send(data)\n                    if s < l:\n                        data = data[s:]\n                        uncomplete = True\n                else:\n                    return\n            except (OSError, IOError) as e:\n                error_no = eventloop.errno_from_exception(e)\n                if error_no in (errno.EAGAIN, errno.EINPROGRESS, errno.EWOULDBLOCK):\n                    uncomplete = True\n                else:\n                    shell.print_exception(e)\n                    self.destroy()\n                    return False\n            except Exception as e:\n                shell.print_exception(e)\n                self.destroy()\n                return False\n        if uncomplete:\n            if sock == self._local_sock:\n                self._data_to_write_to_local.append(data)\n                self._update_stream(STREAM_DOWN, WAIT_STATUS_WRITING)\n            elif sock == self._remote_sock:\n                self._data_to_write_to_remote.append(data)\n                self._update_stream(STREAM_UP, WAIT_STATUS_WRITING)\n            else:\n                logging.error('write_all_to_sock:unknown socket')\n        else:\n            if sock == self._local_sock:\n                self._update_stream(STREAM_DOWN, WAIT_STATUS_READING)\n            elif sock == self._remote_sock:\n                self._update_stream(STREAM_UP, WAIT_STATUS_READING)\n            else:\n                logging.error('write_all_to_sock:unknown socket')\n        return True\n\n    def destroy(self):\n        if self._stage == STAGE_DESTROYED:\n            return\n        self._stage = STAGE_DESTROYED\n        if self._remote_sock:\n            try:\n                self._loop.remove(self._remote_sock)\n            except Exception as e:\n                pass\n            del self._fd_to_handlers[self._remote_sock.fileno()]\n            self._remote_sock.close()\n            self._remote_sock = None\n        if self._remote_sock_v6:\n            try:\n                self._loop.remove(self._remote_sock_v6)\n            except Exception as e:\n                pass\n            del self._fd_to_handlers[self._remote_sock_v6.fileno()]\n            self._remote_sock_v6.close()\n            self._remote_sock_v6 = None\n        if self._local_sock:\n            self._loop.remove(self._local_sock)\n            del self._fd_to_handlers[self._local_sock.fileno()]\n            self._local_sock.close()\n            self._local_sock = None\n        if self._obfs:\n            self._obfs.dispose()\n            self._obfs = None\n        if self._protocol:\n            self._protocol.dispose()\n            self._protocol = None\n        self._dns_resolver.remove_callback(self._handle_dns_resolved)\n        self._server.remove_handler(self)\n        self._server.add_connection(-1)",
    "Code_level": "Class-level",
    "FSMID_for_test": 67,
    "right_result": "```python\nimport socket\nimport ssl\nimport select\nimport asyncio\nimport time\n\nclass TCPRelayHandler:\n    def __init__(self, server, fd_to_handlers, loop, local_sock, config, dns_resolver, is_local):\n        self._server = server\n        self._fd_to_handlers = fd_to_handlers\n        self._loop = loop\n        self._local_sock = local_sock\n        self._remote_sock = None\n        self._remote_sock_v6 = None\n        self._remote_udp = False\n        self._config = config\n        self._dns_resolver = dns_resolver\n        self._is_local = is_local\n        self._stage = 0\n        self._encryptor = None\n        self._encrypt_correct = False\n        self._obfs = None\n        self._protocol = None\n        self._fastopen_connected = False\n        self._data_to_write_to_local = []\n        self._data_to_write_to_remote = []\n        self._udp_data_send_buffer = b''\n        self._upstream_status = 0\n        self._downstream_status = 0\n        self._client_address = local_sock.getsockname()\n        self._remote_address = None\n        self._forbidden_iplist = []\n        self._chosen_server = None\n        self.last_activity = time.time()\n\n    def _create_remote_socket(self, ip, port):\n        if self._config['use_ipv6']:\n            self._remote_sock_v6 = socket.socket(socket.AF_INET6, socket.SOCK_STREAM)\n            self._remote_sock_v6.setsockopt(socket.IPPROTO_TCP, socket.TCP_FASTOPEN, 1)\n        else:\n            self._remote_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n            self._remote_sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_FASTOPEN, 1)\n        self._remote_sock.connect((ip, port))\n\n    def _write_to_sock(self, data, sock):\n        if self._encryptor and not self._encrypt_correct:\n            data = self._encryptor.encrypt(data)\n        if self._obfs:\n            data = self._obfs.obfuscate(data)\n        if sock.send(data) != len(data):\n            return False\n        return True\n\n    def destroy(self):\n        if self._remote_sock:\n            self._remote_sock.close()\n        if self._remote_sock_v6:\n            self._remote_sock_v6.close()\n        self._local_sock.close()\n\n    def _update_activity(self):\n        self.last_activity = time.time()\n\n    def _get_a_server(self):\n        # Placeholder for server selection logic\n        return self._chosen_server\n\n    def _handle_dns_resolved(self, result, error):\n        if error:\n            # Handle DNS resolution error\n            pass\n        else:\n            self._remote_address = result\n            self._create_remote_socket(*self._remote_address)\n\n    def _update_stream(self, stream, status):\n        # Placeholder for stream status update logic\n        pass\n\n    def _on_local_read(self):\n        data = self._local_sock.recv(1024)\n        if data:\n            self._data_to_write_to_remote.append(data)\n            self._update_activity()\n\n    def _on_remote_read(self):\n        data = self._remote_sock.recv(1024)\n        if data:\n            self._data_to_write_to_local.append(data)\n            self._update_activity()\n\n    def _on_local_write(self):\n        while self._data_to_write_to_local:\n            if not self._write_to_sock(self._data_to_write_to_local.pop(0), self._remote_sock):\n                break\n\n    def _on_remote_write(self):\n        while self._data_to_write_to_remote:\n            if not self._write_to_sock(self._data_to_write_to_remote.pop(0), self._local_sock):\n                break\n```"
  },
  {
    "Task_id": 320,
    "Instruction": "Task Description: Create a TCP client function that establishes a connection to a server, sends a message, and receives a response.\n\nFunction Description: The function creates a TCP socket, connects to a specified server, sends a UTF-8 encoded message, receives a response, and then closes the connection. It handles the basic TCP client-server interaction.\n\nInput:\n- host: str - The IP address or hostname of the target server\n- port: int - The port number on which the server is listening\n- message: str - The message to be sent to the server\n\nOutput:\n- str - The decoded response received from the server",
    "Canonical_solution": "import socket\n\ndef tcp_client_interaction(host: str, port: int, message: str):\n    \"\"\"\n    TCP client interaction function that sends a message to server and receives response\n    \n    Args:\n        host: Server host address\n        port: Server port number\n        message: Message to send to server\n        \n    Returns:\n        The response received from server\n    \"\"\"\n    # Create TCP socket\n    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    \n    # Connect to server\n    s.connect((host, port))\n    \n    # Send message\n    len_sent = s.send(message.encode('utf-8'))\n    \n    # Receive response\n    response = s.recv(1024)\n    \n    # Clean up\n    s.close()\n    \n    return response.decode('utf-8')",
    "Code_level": "Function-level",
    "FSMID_for_test": 67,
    "right_result": "```python\nimport socket\n\ndef tcp_client(host, port, message):\n    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    client_socket.connect((host, port))\n    client_socket.sendall(message.encode('utf-8'))\n    response = client_socket.recv(1024)\n    client_socket.close()\n    return response.decode('utf-8')\n```"
  },
  {
    "Task_id": 321,
    "Instruction": "Task Description: Create a Python function that implements a TCP client to interact with a server by sending a command with an offset and receiving the server's response.\n\nFunction Description: The function `tcp_client_interaction` establishes a TCP connection to a specified server, sends a command concatenated with an offset, receives the server's initial response, and then closes the connection. This is useful for basic client-server communication over TCP/IPv4.\n\nInput:\n- `host` (str): The IP address or hostname of the target server.\n- `port` (int): The port number on which the server is listening.\n- `cmd` (str): The command to be sent to the server.\n- `offset` (str): An offset value to be appended to the command.\n\nOutput:\n- The function prints the server's initial response to the console.\n- The function prints a confirmation message (\"Done Sending GTER with buffer\") upon successful completion.",
    "Canonical_solution": "import socket\n\ndef tcp_client_interaction(host, port, cmd, offset):\n    buffer = cmd + offset + '\\r\\n'\n    \n    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    s.connect((host, port))\n    data = s.recv(1024)\n    print \"\\n\" + data\n    s.send(buffer)\n    s.close()\n    print \"Done Sending GTER with buffer\"",
    "Code_level": "Function-level",
    "FSMID_for_test": 67,
    "right_result": "```python\nimport socket\n\ndef tcp_client_interaction(host, port, cmd, offset):\n    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    client_socket.connect((host, port))\n    message = cmd + offset\n    client_socket.sendall(message.encode())\n    response = client_socket.recv(1024).decode()\n    print(response)\n    client_socket.close()\n    print(\"Done Sending GTER with buffer\")\n```"
  },
  {
    "Task_id": 326,
    "Instruction": "Task Description: Create a Python class that acts as a TCP client to interact with a Zookeeper server, retrieve statistics, and parse them into a structured format.\n\nClass Description: The ZookeeperTCPClient class provides functionality to connect to a Zookeeper server via TCP (either IPv4 or Unix socket), send commands, receive statistics, and parse them into a dictionary format while handling connection errors gracefully.\n\nAttributes: \n[No explicit attributes are defined in the class, as it's primarily method-based]\n\nMethods:\n\nMethod1: get_raw_stats(host, port) -> str - \nEstablishes a TCP connection to the specified Zookeeper server (either via IPv4 or Unix socket), sends the 'mntr' command, and returns the raw statistics data as a string.\nInput:\n- host: str - The server hostname/IP address or Unix socket path\n- port: str/int - The server port number (None for Unix socket connections)\nOutput:\n- str - Raw statistics data received from the server\n\nMethod2: get_stats(host, port) -> dict - \nRetrieves raw statistics using get_raw_stats(), parses them into a structured dictionary format while ignoring certain predefined fields, and attempts to find maximum connection limit from process information.\nInput:\n- host: str - The server hostname/IP address or Unix socket path\n- port: str/int - The server port number (None for Unix socket connections)\nOutput:\n- dict - Parsed statistics with metric names as keys and their values as values",
    "Canonical_solution": "import socket\nimport re\n\nclass ZookeeperTCPClient:\n    def __init__(self):\n        pass\n\n    def get_raw_stats(self, host, port):\n        data = ''\n        try:\n            if port is None:\n                sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n                sock.connect(host)\n            else:\n                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n                sock.connect((host, int(port)))\n            sock.send('mntr\\n')\n            data = sock.recv(4096)\n        except socket.error:\n            raise Exception('Failed to get stats from %s:%s' % (host, port))\n        finally:\n            sock.close()\n        return data\n\n    def get_stats(self, host, port):\n        ignored = ('zk_version', 'zk_server_state')\n        pid = None\n        stats = {}\n        data = self.get_raw_stats(host, port)\n\n        for line in data.splitlines():\n            pieces = line.split()\n            if pieces[0] in ignored:\n                continue\n            stats[pieces[0]] = pieces[1]\n\n        try:\n            cmdline = \"/proc/%s/cmdline\" % pid\n            f = open(cmdline, 'r')\n            m = re.search(\"-c\\x00(\\d+)\", f.readline())\n            if m is not None:\n                stats['limit_maxconn'] = m.group(1)\n            f.close()\n        except:\n            pass\n\n        return stats",
    "Code_level": "Class-level",
    "FSMID_for_test": 67,
    "right_result": "```python\nimport socket\n\nclass ZookeeperTCPClient:\n    def get_raw_stats(self, host, port):\n        client = socket.socket(socket.AF_INET if port else socket.AF_UNIX, socket.SOCK_STREAM)\n        try:\n            client.connect((host, port))\n            client.sendall(b'mntr\\n')\n            data = b''\n            while True:\n                part = client.recv(4096)\n                if not part:\n                    break\n                data += part\n            client.close()\n            return data.decode()\n        except Exception as e:\n            client.close()\n            raise e\n\n    def get_stats(self, host, port):\n        raw_stats = self.get_raw_stats(host, port)\n        stats = {}\n        for line in raw_stats.splitlines():\n            if line:\n                key, value = line.split(maxsplit=1)\n                if key not in ['mode', 'version', 'dataVersion', 'clientPort', 'maxClientCnxns', 'minSessionTimeout', 'maxSessionTimeout', 'avgSessionTimeout', 'sessionTimeout', 'watchCount', 'watchedEvents', 'latency', 'latencyMax', 'packetsReceived', 'packetsSent', 'bytesReceived', 'bytesSent', 'outstandingRequests', 'znodeCount', 'watches']:\n                    stats[key] = value\n        return stats\n```"
  },
  {
    "Task_id": 332,
    "Instruction": "Task Description: Create a Python class that collects and processes statistics from a Memcached server using TCP socket communication.\n\nClass Description: The MemcachedCollector class is designed to connect to a Memcached server, retrieve its statistics, and parse them into a structured dictionary format. It handles both IPv4 and Unix domain socket connections.\n\nAttributes:\n\nGAUGES: [list] - A list of metric names that should be treated as gauge values (values that can increase or decrease)\n\nMethods:\n\nget_raw_stats: [Name](host, port) -> [str] - Establishes a TCP connection to the specified Memcached server (either via IP:port or Unix socket), sends the 'stats' command, and returns the raw response data as a string. Handles connection errors gracefully.\n\nInput:\n- host: [str] - The server address (IP for network connections or path for Unix sockets)\n- port: [int/str/None] - The server port (None for Unix socket connections)\n\nOutput:\n- [str] - Raw statistics data in Memcached protocol format\n\nget_stats: [Name](host, port) -> [dict] - Retrieves and processes statistics from the Memcached server, returning them as a dictionary with metric names as keys and numeric values (either int or float).\n\nInput:\n- host: [str] - The server address (IP for network connections or path for Unix sockets)\n- port: [int/str/None] - The server port (None for Unix socket connections)\n\nOutput:\n- [dict] - Processed statistics with metric names as keys and numeric values",
    "Canonical_solution": "import socket\nimport re\n\nclass MemcachedCollector:\n    GAUGES = [\n        'bytes',\n        'connection_structures',\n        'curr_connections',\n        'curr_items',\n        'threads',\n        'reserved_fds',\n        'limit_maxbytes',\n        'hash_power_level',\n        'hash_bytes',\n        'hash_is_expanding',\n        'uptime'\n    ]\n\n    def get_raw_stats(self, host, port):\n        data = ''\n        try:\n            if port is None:\n                sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n                sock.connect(host)\n            else:\n                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n                sock.connect((host, int(port)))\n\n            sock.settimeout(3)\n            sock.send('stats\\n')\n\n            while True:\n                received = sock.recv(4096)\n                if not received:\n                    break\n                data += received\n                if data.endswith('END\\r\\n'):\n                    break\n        except socket.error:\n            pass\n        finally:\n            sock.close()\n        return data\n\n    def get_stats(self, host, port):\n        ignored = ('libevent', 'pointer_size', 'time', 'version',\n                   'repcached_version', 'replication', 'accepting_conns',\n                   'pid')\n        stats = {}\n        data = self.get_raw_stats(host, port)\n\n        for line in data.splitlines():\n            pieces = line.split(' ')\n            if pieces[0] != 'STAT' or pieces[1] in ignored:\n                continue\n            if '.' in pieces[2]:\n                stats[pieces[1]] = float(pieces[2])\n            else:\n                stats[pieces[1]] = int(pieces[2])\n\n        return stats",
    "Code_level": "Class-level",
    "FSMID_for_test": 67,
    "right_result": "```python\nimport socket\n\nclass MemcachedCollector:\n    GAUGES = []\n\n    def get_raw_stats(self, host, port):\n        if port is None:\n            s = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n            s.connect(host)\n        else:\n            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n            s.connect((host, port))\n        s.sendall(b'stats\\r\\n')\n        raw_stats = b''\n        while True:\n            data = s.recv(1024)\n            if not data:\n                break\n            raw_stats += data\n        s.close()\n        return raw_stats.decode()\n\n    def get_stats(self, host, port):\n        raw_stats = self.get_raw_stats(host, port)\n        stats = {}\n        for line in raw_stats.splitlines():\n            if line:\n                key, value = line.split(' ', 1)\n                stats[key] = float(value)\n        return stats\n```"
  },
  {
    "Task_id": 334,
    "Instruction": "Task Description: Implement a TCP client socket class with additional Unix Domain Socket (UDS) functionality for inter-process communication, including message packing/unpacking and connection management.\n\nClass Description: HSFZSocket is a base TCP client class that handles socket creation, connection, and basic send/receive operations. UDS_HSFZSocket extends this base class to add UDS-specific message formatting with source/target identifiers.\n\nAttributes:\n- ip: str - The IP address of the target server (default: '127.0.0.1')\n- port: int - The port number of the target server (default: 6801)\n- s: socket.socket - The TCP socket object\n- buffer: bytes - Internal buffer for storing received data\n- source: int - (UDS only) Source identifier for messages\n- target: int - (UDS only) Target identifier for messages\n- outputcls: Type - (UDS only) Optional class for parsing received messages\n\nMethods:\n- __init__(ip: str = '127.0.0.1', port: int = 6801) -> None - Initializes the socket with TCP_NODELAY and SO_REUSEADDR options, then connects to the server\n- send(data: bytes) -> int - Sends raw data through the socket and returns number of bytes sent\n- recv(x: int = 65535) -> Optional[bytes] - Receives data with length-prefixed protocol (4-byte header), returns None if incomplete\n- close() -> None - Closes the socket connection\n- (UDS) send(x: Any) -> int - Formats message with UDS header (length, flags, source, target) before sending\n- (UDS) recv(x: int = 65535) -> Optional[Any] - Receives UDS message and optionally parses it using outputcls",
    "Canonical_solution": "import socket\nimport struct\nimport time\nfrom typing import Optional, Type, Any\n\nclass HSFZSocket:\n    def __init__(self, ip='127.0.0.1', port=6801):\n        self.ip = ip\n        self.port = port\n        self.s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.s.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n        self.s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        self.s.connect((self.ip, self.port))\n        self.buffer = b\"\"\n\n    def send(self, data):\n        try:\n            return self.s.send(data)\n        except Exception as e:\n            self.close()\n            raise e\n\n    def recv(self, x=65535):\n        if self.buffer:\n            len_data = self.buffer[:4]\n        else:\n            len_data = self.s.recv(4, socket.MSG_PEEK)\n            if len(len_data) != 4:\n                return None\n\n        len_int = struct.unpack(\">I\", len_data)[0]\n        len_int += 6\n        self.buffer += self.s.recv(len_int - len(self.buffer))\n\n        if len(self.buffer) != len_int:\n            return None\n\n        pkt = self.buffer\n        self.buffer = b\"\"\n        return pkt\n\n    def close(self):\n        self.s.close()\n\nclass UDS_HSFZSocket(HSFZSocket):\n    def __init__(self, source, target, ip='127.0.0.1', port=6801, basecls=None):\n        super().__init__(ip, port)\n        self.source = source\n        self.target = target\n        self.outputcls = basecls\n\n    def send(self, x):\n        try:\n            x.sent_time = time.time()\n        except AttributeError:\n            pass\n\n        try:\n            return super().send(\n                struct.pack(\"!IBB\", len(x) + 2, 1, self.source, self.target) + bytes(x))\n        except Exception as e:\n            self.close()\n            raise e\n\n    def recv(self, x=65535):\n        pkt = super().recv(x)\n        if pkt and self.outputcls:\n            return self.outputcls(pkt[6:])\n        return pkt",
    "Code_level": "Class-level",
    "FSMID_for_test": 67,
    "right_result": "```python\nimport socket\n\nclass HSFZSocket:\n    def __init__(self, ip: str = '127.0.0.1', port: int = 6801) -> None:\n        self.ip = ip\n        self.port = port\n        self.s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.s.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n        self.s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        self.s.connect((self.ip, self.port))\n        self.buffer = b''\n\n    def send(self, data: bytes) -> int:\n        return self.s.send(data)\n\n    def recv(self, x: int = 65535) -> Optional[bytes]:\n        while True:\n            part = self.s.recv(x)\n            if not part:\n                return None\n            self.buffer += part\n            while len(self.buffer) >= 4:\n                length = int.from_bytes(self.buffer[:4], byteorder='big')\n                if len(self.buffer) >= length + 4:\n                    return self.buffer[4:length+4]\n                else:\n                    break\n        return None\n\n    def close(self) -> None:\n        self.s.close()\n\nclass UDS_HSFZSocket(HSFZSocket):\n    def __init__(self, ip: str = '127.0.0.1', port: int = 6801, source: int = 0, target: int = 0, outputcls: Type = None) -> None:\n        super().__init__(ip, port)\n        self.source = source\n        self.target = target\n        self.outputcls = outputcls\n\n    def send(self, data: bytes) -> int:\n        header = (len(data)).to_bytes(4, byteorder='big') + b'\\x00\\x00' + self.source.to_bytes(4, byteorder='big') + self.target.to_bytes(4, byteorder='big')\n        return super().send(header + data)\n\n    def recv(self, x: int = 65535) -> Optional[Any]:\n        part = super().recv(x)\n        if part is None:\n            return None\n        length, flags, src, tgt = part[:4], part[4:6], part[6:10], part[10:14]\n        data = part[14:]\n        if self.outputcls:\n            return self.outputcls(data)\n        return data\n```"
  },
  {
    "Task_id": 335,
    "Instruction": "Task Description: Implement a TCP client class in Python that can connect to a server, send commands, and receive responses, including handling acknowledgment messages.\n\nClass Description: The TCPClient class establishes a TCP connection to a specified server and provides functionality to send commands and receive responses. It handles both text and binary data, and automatically closes the connection when done.\n\nAttributes:\n- sock: [socket.socket] - The TCP socket object used for communication with the server\n\nMethods:\n- __init__(port: int) -> None - Initializes the TCP client and connects to the specified port on localhost\n- send_commands(commands: list) -> None - Sends each command in the list to the server and prints the responses until receiving either an <ACK> or <NAK> message for each command",
    "Canonical_solution": "import socket\nfrom binascii import hexlify\n\nclass TCPClient:\n    def __init__(self, port: int):\n        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        server_address = (\"localhost\", port)\n        print(\"connecting to %s port %s\" % server_address)\n        self.sock.connect(server_address)\n\n    def send_commands(self, commands: list):\n        try:\n            for command in commands:\n                self.sock.sendall(bytes(command, 'utf-8'))\n                data = \"\"\n                while \"<ACK>\" not in data and \"<NAK>\" not in data:\n                    tmp = self.sock.recv(4096)\n                    if tmp == b\"\":\n                        continue\n                    try:\n                        data += tmp.decode('utf-8')\n                    except:\n                        data += hexlify(tmp).decode('utf-8')\n                print(data)\n        finally:\n            print(\"closing socket\")\n            self.sock.close()",
    "Code_level": "Class-level",
    "FSMID_for_test": 67,
    "right_result": "```python\nimport socket\n\nclass TCPClient:\n    def __init__(self, port: int) -> None:\n        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.sock.connect(('localhost', port))\n\n    def send_commands(self, commands: list) -> None:\n        for command in commands:\n            self.sock.sendall(command.encode())\n            while True:\n                response = self.sock.recv(1024).decode()\n                if response == '<ACK>':\n                    print('ACK received for command:', command)\n                    break\n                elif response == '<NAK>':\n                    print('NAK received for command:', command)\n                    break\n                else:\n                    print('Response:', response)\n\n    def close(self) -> None:\n        self.sock.close()\n```"
  },
  {
    "Task_id": 338,
    "Instruction": "Task Description: Create a TCP client class for interacting with the IQFeed server to send commands and receive market data.\n\nClass Description: The IQFeedClient class establishes and manages a TCP connection to an IQFeed server, allowing users to send commands/queries and receive responses. It handles connection setup, data transmission, error handling, and connection teardown.\n\nAttributes:\n_host: str - The hostname or IP address of the IQFeed server (default: 'localhost')\n_port: int - The port number for the IQFeed server connection (default: 9100)\n_timeout: float - The connection timeout in seconds (default: 10.0)\n_recv_buf: str - Buffer for storing received data\n_sock: socket.socket - The TCP socket object for server communication\n\nMethods:\n__init__(host: str = 'localhost', port: int = 9100, timeout: float = 10.0) -> None - Initializes the client with connection parameters and establishes the TCP connection\n_send_cmd(cmd: str) -> None - Sends a command string to the IQFeed server (private method)\nquery(message: str) -> Optional[List[str]] - Sends a query message to the server and returns the parsed response data\nclose() -> None - Closes the socket connection to the server",
    "Canonical_solution": "import socket\nimport logging\nimport numpy as np\nimport pandas as pd\n\nclass IQFeedClient:\n    def __init__(self, host: str = 'localhost', port: int = 9100, timeout: float = 10.0):\n        self._host = host\n        self._port = port\n        self._timeout = timeout\n        self._recv_buf = \"\"\n        \n        # Create and configure socket\n        self._sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self._sock.connect((self._host, self._port))\n        self._sock.settimeout(self._timeout)\n\n    def _send_cmd(self, cmd: str):\n        \"\"\"Send command to IQFeed server\"\"\"\n        self._sock.sendall(cmd.encode(encoding='latin-1', errors='strict'))\n\n    def query(self, message: str):\n        \"\"\"Send query to IQFeed server and receive response\"\"\"\n        end_msg = '!ENDMSG!'\n        recv_buffer = 4096\n\n        self._send_cmd(message)\n\n        chunk = \"\"\n        data = \"\"\n        while True:\n            chunk = self._sock.recv(recv_buffer).decode('latin-1')\n            data += chunk\n            if chunk.startswith('E,'):  # error condition\n                if chunk.startswith('E,!NO_DATA!'):\n                    logging.warn('No data available for the given symbol or dates')\n                    return None\n                else:\n                    raise Exception(chunk)\n            elif end_msg in chunk:\n                break\n\n        # Clean up the data\n        data = data[:-1 * (len(end_msg) + 3)]\n        data = \"\".join(data.split(\"\\r\"))\n        data = data.replace(\",\\n\", \",\")[:-1]\n        return data.split(\",\")\n\n    def close(self):\n        \"\"\"Close the socket connection\"\"\"\n        self._sock.close()",
    "Code_level": "Class-level",
    "FSMID_for_test": 67,
    "right_result": "```python\nimport socket\n\nclass IQFeedClient:\n    def __init__(self, host: str = 'localhost', port: int = 9100, timeout: float = 10.0) -> None:\n        self._host = host\n        self._port = port\n        self._timeout = timeout\n        self._recv_buf = ''\n        self._sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self._sock.settimeout(self._timeout)\n        self._sock.connect((self._host, self._port))\n\n    def __send_cmd(self, cmd: str) -> None:\n        self._sock.sendall(cmd.encode())\n\n    def query(self, message: str) -> Optional[List[str]]:\n        self.__send_cmd(message)\n        self._recv_buf += self._sock.recv(1024).decode()\n        lines = self._recv_buf.split('\\n')\n        self._recv_buf = lines.pop()\n        return [line for line in lines if line]\n\n    def close(self) -> None:\n        self._sock.close()\n```"
  },
  {
    "Task_id": 339,
    "Instruction": "Task Description: Create a Python class that implements TCP client functionality for testing server connections and sending data to a server.\n\nClass Description: The TargetSocket class provides TCP client capabilities to check server availability and send data to a specified port on localhost. It handles connection establishment, data transmission, and proper resource cleanup.\n\nAttributes:\n- sock: [socket.socket] - The socket object used for TCP communication (initially None)\n- targetPort: [int] - The target port number for server communication (default: 5001)\n\nMethods:\n- testServerConnectionTcp() -> [bool] - Tests if a connection can be established with the target server. Returns True if successful, False otherwise.\n- sendToSocket(data: str) -> [bool] - Attempts to send the provided string data to the target server. Makes up to 10 connection attempts with 100ms delays between attempts. Returns True if data was sent successfully, False otherwise.",
    "Canonical_solution": "import socket\n\nclass TargetSocket:\n    def __init__(self, target_port=5001):\n        self.sock = None\n        self.targetPort = target_port\n\n    def testServerConnectionTcp(self):\n        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        server_address = ('localhost', self.targetPort)\n\n        try:\n            sock.connect(server_address)\n        except socket.error as exc:\n            return False\n\n        sock.close()\n        return True\n\n    def sendToSocket(self, data):\n        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        s.settimeout(1)\n\n        host = 'localhost'\n        port = self.targetPort\n\n        isOpen = False\n        n = 0\n        while isOpen is False:\n            try:\n                s.connect((host, port))\n                isOpen = True\n            except Exception as e:\n                time.sleep(0.1)\n                n += 1\n                isOpen = False\n\n            if n == 10:\n                return False\n\n        try:\n            s.send(str.encode(data))\n        except Exception as e:\n            print(\"B: \" + str(e))\n\n        s.close()\n        return True",
    "Code_level": "Class-level",
    "FSMID_for_test": 67,
    "right_result": "```python\nimport socket\nimport time\n\nclass TargetSocket:\n    def __init__(self, targetPort=5001):\n        self.sock = None\n        self.targetPort = targetPort\n\n    def testServerConnectionTcp(self) -> bool:\n        for _ in range(10):\n            try:\n                self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n                self.sock.connect(('localhost', self.targetPort))\n                self.sock.close()\n                return True\n            except:\n                time.sleep(0.1)\n        return False\n\n    def sendToSocket(self, data: str) -> bool:\n        for _ in range(10):\n            try:\n                if self.sock is None:\n                    self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n                self.sock.connect(('localhost', self.targetPort))\n                self.sock.sendall(data.encode())\n                self.sock.close()\n                return True\n            except:\n                time.sleep(0.1)\n        return False\n```"
  },
  {
    "Task_id": 340,
    "Instruction": "Task Description: Create a Python class for handling Unix domain socket communication with a server, including sending and receiving serialized data, timeout management, and proper connection cleanup.\n\nClass Description: CSocket is a class that manages communication over a Unix domain socket. It handles socket creation, connection, data serialization/deserialization, timeout settings, and proper connection termination. The class uses pickle for object serialization and implements custom protocol handling with CSPROTO constants.\n\nAttributes:\n- __csock: [socket.socket] - The underlying Unix domain socket object\n- __deftout: [float] - The default timeout value for socket operations\n\nMethods:\n- __init__(sock: str, timeout: int = -1) -> None - Initializes the socket connection to the specified Unix domain socket path with optional timeout\n- __del__() -> None - Destructor that ensures proper socket cleanup\n- send(msg: Any, nonblocking: bool = False, timeout: Optional[float] = None) -> Any - Serializes and sends data to the server, then waits for and returns the response\n- settimeout(timeout: float) -> None - Sets the socket timeout (use -1 for default)\n- close() -> None - Properly closes the socket connection with protocol-compliant shutdown\n- convert(m: Any) -> Union[str, bool, int, float, list, dict, set] - Static method to convert objects to serializable types\n- receive(sock: socket.socket, nonblocking: bool = False, timeout: Optional[float] = None) -> Any - Static method to receive and deserialize data from the socket",
    "Canonical_solution": "import socket\nfrom pickle import dumps, loads, HIGHEST_PROTOCOL\nfrom ..protocol import CSPROTO\n\nclass CSocket:\n    def __init__(self, sock=\"/var/run/fail2ban/fail2ban.sock\", timeout=-1):\n        self.__csock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n        self.__deftout = self.__csock.gettimeout()\n        if timeout != -1:\n            self.settimeout(timeout)\n        self.__csock.connect(sock)\n\n    def __del__(self):\n        self.close()\n    \n    def send(self, msg, nonblocking=False, timeout=None):\n        obj = dumps(list(map(CSocket.convert, msg)), HIGHEST_PROTOCOL)\n        self.__csock.send(obj)\n        self.__csock.send(CSPROTO.END)\n        return self.receive(self.__csock, nonblocking, timeout)\n\n    def settimeout(self, timeout):\n        self.__csock.settimeout(timeout if timeout != -1 else self.__deftout)\n\n    def close(self):\n        if not self.__csock:\n            return\n        try:\n            self.__csock.sendall(CSPROTO.CLOSE + CSPROTO.END)\n            self.__csock.shutdown(socket.SHUT_RDWR)\n        except socket.error:\n            pass\n        try:\n            self.__csock.close()\n        except socket.error:\n            pass\n        self.__csock = None\n    \n    @staticmethod\n    def convert(m):\n        if isinstance(m, (str, bool, int, float, list, dict, set)):\n            return m\n        else:\n            return str(m)\n\n    @staticmethod\n    def receive(sock, nonblocking=False, timeout=None):\n        msg = CSPROTO.EMPTY\n        if nonblocking: sock.setblocking(0)\n        if timeout: sock.settimeout(timeout)\n        bufsize = 1024\n        while msg.rfind(CSPROTO.END, -32) == -1:\n            chunk = sock.recv(bufsize)\n            if not len(chunk):\n                raise socket.error(104, 'Connection reset by peer')\n            if chunk == CSPROTO.END: break\n            msg = msg + chunk\n            if bufsize < 32768: bufsize <<= 1\n        return loads(msg)",
    "Code_level": "Class-level",
    "FSMID_for_test": 67,
    "right_result": "```python\nimport socket\nimport pickle\nfrom typing import Any, Optional, Union\n\nclass CSocket:\n    CSPROTO = 1\n\n    def __init__(self, sock: str, timeout: int = -1) -> None:\n        self.__csock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n        self.__csock.connect(sock)\n        self.__deftout = timeout\n        if timeout != -1:\n            self.settimeout(timeout)\n\n    def __del__(self) -> None:\n        self.close()\n\n    def send(self, msg: Any, nonblocking: bool = False, timeout: Optional[float] = None) -> Any:\n        serialized_msg = pickle.dumps(msg)\n        self.__csock.sendall(serialized_msg)\n        if timeout is None:\n            timeout = self.__deftout\n        if nonblocking:\n            self.__csock.setblocking(False)\n        try:\n            response = self.receive(self.__csock, nonblocking, timeout)\n        finally:\n            if nonblocking:\n                self.__csock.setblocking(True)\n        return response\n\n    def settimeout(self, timeout: float) -> None:\n        self.__csock.settimeout(timeout)\n\n    def close(self) -> None:\n        self.__csock.shutdown(socket.SHUT_RDWR)\n        self.__csock.close()\n\n    @staticmethod\n    def convert(m: Any) -> Union[str, bool, int, float, list, dict, set]:\n        return pickle.dumps(m)\n\n    @staticmethod\n    def receive(sock: socket.socket, nonblocking: bool = False, timeout: Optional[float] = None) -> Any:\n        if timeout is None:\n            timeout = sock.gettimeout()\n        if nonblocking:\n            sock.setblocking(False)\n        try:\n            data = sock.recv(1024)\n            while data:\n                data += sock.recv(1024)\n            return pickle.loads(data)\n        finally:\n            if nonblocking:\n                sock.setblocking(True)\n```"
  },
  {
    "Task_id": 343,
    "Instruction": "Task Description: Implement a CMPP (China Mobile Peer-to-Peer) client class in Python that handles communication with a CMPP gateway server for sending SMS messages. The class should manage TCP socket connections, authentication, message sending, and response handling.\n\nClass Description: The CMPPClient class encapsulates the functionality to connect to a CMPP gateway server, authenticate using SP credentials, send SMS messages, and handle server responses. It maintains socket connections and sequence numbering for message tracking.\n\nAttributes:\n- ip: str - The IP address of the CMPP gateway server\n- port: int - The port number of the CMPP gateway server\n- sp_id: str - The service provider ID for authentication\n- sp_secret: str - The service provider secret for authentication\n- src_id: str - The source ID for SMS messages\n- service_id: str - The service ID for SMS messages\n- _sequence_id: int - Internal counter for message sequence numbers\n- _is_connect: bool - Connection status flag\n- _times: int - Number of connection retry attempts\n- __socket: socket.socket - The TCP socket object for server communication\n\nMethods:\n- __init__(host: str, port: int, sp_id: str, sp_secret: str, src_id: str, service_id: str) -> None - Initializes the client with server details and credentials\n- sequence_id() -> int - Property that returns and increments the sequence ID\n- _connect() -> None - Establishes TCP connection to the server with retry logic\n- send(instance: Union[CMPPBaseRequestInstance, bytes]) -> None - Sends a CMPP request or raw message to the server\n- recv() -> tuple - Receives and parses a response from the server\n- close() -> None - Closes the connection and sends termination request\n- _cmpp_connect() -> None - Handles CMPP authentication protocol\n- _cmpp_send_sms(dest: List[str], sign_name: str, template_code: str, template_param: Dict) -> None - Internal method for sending SMS messages\n- send_sms(dest: List[str], sign_name: str, template_code: str, template_param: Dict) -> None - Public method for sending SMS with error handling",
    "Canonical_solution": "import socket\nimport struct\nimport time\nfrom typing import List, Dict\n\nclass CMPPClient:\n    def __init__(self, host: str, port: int, sp_id: str, sp_secret: str, src_id: str, service_id: str):\n        self.ip = host\n        self.port = port\n        self.sp_id = sp_id\n        self.sp_secret = sp_secret\n        self.src_id = src_id\n        self.service_id = service_id\n        self._sequence_id = 0\n        self._is_connect = False\n        self._times = 3\n        self.__socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self._connect()\n\n    @property\n    def sequence_id(self) -> int:\n        s = self._sequence_id\n        self._sequence_id += 1\n        return s\n\n    def _connect(self) -> None:\n        self.__socket.settimeout(5)\n        for i in range(self._times):\n            try:\n                self.__socket.connect((self.ip, self.port))\n                self._is_connect = True\n                break\n            except Exception as err:\n                time.sleep(1)\n        else:\n            raise Exception('Failed to connect to the CMPP gateway server')\n\n    def send(self, instance) -> None:\n        if isinstance(instance, CMPPBaseRequestInstance):\n            message = instance.get_message(sequence_id=self.sequence_id)\n        else:\n            message = instance\n        self.__socket.send(message)\n\n    def recv(self) -> tuple:\n        raw_length = self.__socket.recv(4)\n        length, = struct.unpack('!L', raw_length)\n        header, body = CMPPResponseInstance().parse(\n            raw_length + self.__socket.recv(length - 4)\n        )\n        return header, body\n\n    def close(self) -> None:\n        if self._is_connect:\n            terminate_request = CMPPTerminateRequestInstance()\n            self.send(terminate_request)\n            self.__socket.close()\n\n    def _cmpp_connect(self) -> None:\n        connect_request = CMPPConnectRequestInstance(self.sp_id, self.sp_secret)\n        self.send(connect_request)\n        header, body = self.recv()\n        if body['Status'] != 0:\n            raise Exception('CMPPv2.0 authentication failed')\n\n    def _cmpp_send_sms(self, dest: List[str], sign_name: str, template_code: str, template_param: Dict) -> None:\n        message = template_param.get('message')\n        if message is None:\n            code = template_param.get('code')\n            message = template_code.replace('{code}', code)\n        msg = '\u3010%s\u3011 %s' % (sign_name, message)\n        submit_request = CMPPSubmitRequestInstance(\n            msg_src=self.sp_id, src_id=self.src_id, msg_content=msg,\n            dest_usr_tl=len(dest), dest_terminal_id=dest,\n            service_id=self.service_id\n        )\n        self.send(submit_request)\n        header, body = self.recv()\n        command_id = header.get('command_id')\n        if command_id == CMPP_DELIVER:\n            deliver_request = CMPPDeliverRespRequestInstance(\n                msg_id=body['Msg_Id'], result=body['Result']\n            )\n            self.send(deliver_request)\n\n    def send_sms(self, dest: List[str], sign_name: str, template_code: str, template_param: Dict) -> None:\n        try:\n            self._cmpp_connect()\n            self._cmpp_send_sms(dest, sign_name, template_code, template_param)\n        except Exception as e:\n            self.close()\n            raise Exception(e)",
    "Code_level": "Class-level",
    "FSMID_for_test": 67,
    "right_result": "```python\nimport socket\nfrom typing import Union, List, Dict\n\nclass CMPPClient:\n    def __init__(self, host: str, port: int, sp_id: str, sp_secret: str, src_id: str, service_id: str) -> None:\n        self.ip = host\n        self.port = port\n        self.sp_id = sp_id\n        self.sp_secret = sp_secret\n        self.src_id = src_id\n        self.service_id = service_id\n        self._sequence_id = 0\n        self._is_connect = False\n        self._times = 0\n        self.__socket = None\n\n    def sequence_id(self) -> int:\n        self._sequence_id += 1\n        return self._sequence_id\n\n    def _connect(self) -> None:\n        while self._times < 3:\n            try:\n                self.__socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n                self.__socket.connect((self.ip, self.port))\n                self._is_connect = True\n                break\n            except socket.error:\n                self._times += 1\n                continue\n\n    def send(self, instance: Union[CMPPBaseRequestInstance, bytes]) -> None:\n        if not self._is_connect:\n            self._connect()\n        self.__socket.sendall(instance)\n\n    def recv(self) -> tuple:\n        data = b''\n        while True:\n            packet = self.__socket.recv(4096)\n            if not packet:\n                break\n            data += packet\n        return data\n\n    def close(self) -> None:\n        if self._is_connect:\n            self.__socket.sendall(b'\\x01\\x00\\x00\\x00')\n            self.__socket.close()\n            self._is_connect = False\n\n    def _cmpp_connect(self) -> None:\n        # Authentication logic here\n        pass\n\n    def _cmpp_send_sms(self, dest: List[str], sign_name: str, template_code: str, template_param: Dict) -> None:\n        # SMS sending logic here\n        pass\n\n    def send_sms(self, dest: List[str], sign_name: str, template_code: str, template_param: Dict) -> None:\n        try:\n            self._cmpp_send_sms(dest, sign_name, template_code, template_param)\n        except Exception as e:\n            print(f\"Error sending SMS: {e}\")\n```"
  },
  {
    "Task_id": 345,
    "Instruction": "Task Description: Create a Python class that interacts with an APC UPS daemon (apcupsd) via TCP socket to collect and process UPS metrics.\n\nClass Description: The ApcupsdCollector class establishes a TCP connection to an apcupsd server, retrieves status information, and processes the raw data into structured metrics. It handles socket communication, data parsing, and metric filtering.\n\nAttributes:\n- config: [dict] - Configuration dictionary containing hostname (str), port (int), and metrics (list of str) to collect\n\nMethods:\n- __init__(hostname='localhost', port=3551, metrics=None) -> None - Initializes the collector with connection parameters and metrics to collect\n- getData() -> str - Establishes TCP connection, sends status request, and returns raw UPS data\n- collect() -> dict - Processes raw data into structured metrics, returning a dictionary of metric_name: value pairs",
    "Canonical_solution": "import socket\nfrom struct import pack\nimport re\nimport time\n\nclass ApcupsdCollector:\n    def __init__(self, hostname='localhost', port=3551, metrics=None):\n        self.config = {\n            'hostname': hostname,\n            'port': port,\n            'metrics': metrics or ['LINEV', 'LOADPCT', 'BCHARGE', 'TIMELEFT', 'BATTV',\n                                 'NUMXFERS', 'TONBATT', 'MAXLINEV', 'MINLINEV',\n                                 'OUTPUTV', 'ITEMP', 'LINEFREQ', 'CUMONBATT']\n        }\n\n    def getData(self):\n        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        s.connect((self.config['hostname'], int(self.config['port'])))\n        s.send(pack('xb6s', 6, 'status'))\n        s.recv(1024)\n        time.sleep(.25)\n        data = s.recv(4096)\n        s.close()\n        return data\n\n    def collect(self):\n        metrics = {}\n        raw = {}\n        data = self.getData()\n        data = data.split('\\n\\x00')\n        \n        for d in data:\n            matches = re.search(\"([A-Z]+)\\s+:\\s+(.*)$\", d)\n            if matches:\n                value = matches.group(2).strip()\n                raw[matches.group(1)] = value\n                vmatch = re.search(\"([0-9.]+)\", value)\n                if not vmatch:\n                    continue\n                try:\n                    value = float(vmatch.group(1))\n                except ValueError:\n                    continue\n                metrics[matches.group(1)] = value\n\n        results = {}\n        for metric in self.config['metrics']:\n            if metric not in metrics:\n                continue\n            metric_name = \"%s.%s\" % (raw['UPSNAME'], metric)\n            value = metrics[metric]\n            results[metric_name] = value\n\n        return results",
    "Code_level": "Class-level",
    "FSMID_for_test": 67,
    "right_result": "```python\nimport socket\n\nclass ApcupsdCollector:\n    def __init__(self, hostname='localhost', port=3551, metrics=None):\n        self.hostname = hostname\n        self.port = port\n        self.metrics = metrics\n        self.socket = None\n\n    def getData(self) -> str:\n        self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.socket.connect((self.hostname, self.port))\n        self.socket.sendall(b'UPTIME\\n')\n        data = self.socket.recv(1024)\n        self.socket.close()\n        return data.decode()\n\n    def collect(self) -> dict:\n        raw_data = self.getData()\n        metrics = {}\n        for metric in self.metrics:\n            value = raw_data.split(metric + ': ')[1].split('\\n')[0]\n            metrics[metric] = value\n        return metrics\n```"
  },
  {
    "Task_id": 349,
    "Instruction": "Task Description: Create a Python class that provides TCP socket functionality including connection establishment, data transmission, and SSL support for secure communication.\n\nClass Description: The SocketLibrary class encapsulates TCP socket operations with support for both regular and SSL-wrapped connections. It provides methods to establish connections, send/receive data, and gather connection information.\n\nAttributes: None (This is a utility class without persistent attributes)\n\nMethods:\n\nMethod1: create_tcp_socket(host: str, port: int, timeout: float) -> Optional[Tuple[socket.socket, bool]] - Creates and returns a TCP socket connection to the specified host and port. Attempts SSL connection first, falls back to regular TCP if SSL fails. Returns a tuple containing the socket object and SSL flag (True if SSL succeeded).\n\nMethod2: tcp_connect_only(host: str, port: int, timeout: float) -> Optional[Dict[str, Any]] - Establishes a TCP connection to verify connectivity and returns connection details including peer information, service name, and SSL status without data transmission.\n\nMethod3: tcp_connect_send_and_receive(host: str, port: int, timeout: float) -> Optional[Dict[str, Any]] - Establishes a TCP connection, sends test data, receives response, and returns connection details including peer information, service name, response data, and SSL status.",
    "Canonical_solution": "import socket\nimport ssl\nfrom typing import Optional, Tuple, Dict, Any\n\nclass SocketLibrary:\n    def create_tcp_socket(self, host: str, port: int, timeout: float) -> Optional[Tuple[socket.socket, bool]]:\n        try:\n            socket_connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n            socket_connection.settimeout(timeout)\n            socket_connection.connect((host, port))\n            ssl_flag = False\n        except ConnectionRefusedError:\n            return None\n\n        try:\n            socket_connection = ssl.wrap_socket(socket_connection)\n            ssl_flag = True\n        except Exception:\n            socket_connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n            socket_connection.settimeout(timeout)\n            socket_connection.connect((host, port))\n\n        return socket_connection, ssl_flag\n\n    def tcp_connect_only(self, host: str, port: int, timeout: float) -> Optional[Dict[str, Any]]:\n        tcp_socket = self.create_tcp_socket(host, port, timeout)\n        if tcp_socket is None:\n            return None\n\n        socket_connection, ssl_flag = tcp_socket\n        peer_name = socket_connection.getpeername()\n        socket_connection.close()\n        return {\n            \"peer_name\": peer_name,\n            \"service\": socket.getservbyport(int(port)),\n            \"ssl_flag\": ssl_flag,\n        }\n\n    def tcp_connect_send_and_receive(self, host: str, port: int, timeout: float) -> Optional[Dict[str, Any]]:\n        tcp_socket = self.create_tcp_socket(host, port, timeout)\n        if tcp_socket is None:\n            return None\n\n        socket_connection, ssl_flag = tcp_socket\n        peer_name = socket_connection.getpeername()\n        try:\n            socket_connection.send(b\"ABC\\x00\\r\\n\\r\\n\\r\\n\" * 10)\n            response = socket_connection.recv(1024 * 1024 * 10)\n            socket_connection.close()\n        except Exception:\n            try:\n                socket_connection.close()\n                response = b\"\"\n            except Exception:\n                response = b\"\"\n        return {\n            \"peer_name\": peer_name,\n            \"service\": socket.getservbyport(port),\n            \"response\": response.decode(errors=\"ignore\"),\n            \"ssl_flag\": ssl_flag,\n        }",
    "Code_level": "Class-level",
    "FSMID_for_test": 67,
    "right_result": "```python\nimport socket\nimport ssl\nfrom typing import Optional, Tuple, Dict, Any\n\nclass SocketLibrary:\n    def create_tcp_socket(self, host: str, port: int, timeout: float) -> Optional[Tuple[socket.socket, bool]]:\n        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        sock.settimeout(timeout)\n        try:\n            sock.connect((host, port))\n            context = ssl.create_default_context(ssl.Purpose.SERVER_AUTH)\n            wrapped_sock = context.wrap_socket(sock, server_hostname=host)\n            return (wrapped_sock, True)\n        except ssl.SSLError:\n            return (sock, False)\n\n    def tcp_connect_only(self, host: str, port: int, timeout: float) -> Optional[Dict[str, Any]]:\n        sock, ssl_flag = self.create_tcp_socket(host, port, timeout)\n        if sock:\n            try:\n                peer_info = sock.getpeername()\n                service_name = socket.getservbyport(sock.getsockname()[1])\n                return {\n                    'peer_info': peer_info,\n                    'service_name': service_name,\n                    'ssl_status': ssl_flag\n                }\n            finally:\n                sock.close()\n\n    def tcp_connect_send_and_receive(self, host: str, port: int, timeout: float) -> Optional[Dict[str, Any]]:\n        sock, ssl_flag = self.create_tcp_socket(host, port, timeout)\n        if sock:\n            try:\n                test_data = b'Test data'\n                sock.sendall(test_data)\n                response = sock.recv(1024)\n                peer_info = sock.getpeername()\n                service_name = socket.getservbyport(sock.getsockname()[1])\n                return {\n                    'peer_info': peer_info,\n                    'service_name': service_name,\n                    'response_data': response.decode(),\n                    'ssl_status': ssl_flag\n                }\n            finally:\n                sock.close()\n```"
  },
  {
    "Task_id": 351,
    "Instruction": "Task Description: Create a TCP client class in Python that establishes a connection to a server, sends data with length prefixing, and properly closes the connection.\n\nClass Description: BaseSocketClient is a TCP client implementation that handles socket creation, connection management, and data transmission with length-prefixed messages. It supports both simple and detected encoding modes for data transmission.\n\nAttributes:\n- s: [socket.socket] - The underlying TCP socket object used for communication\n\nMethods:\n- __init__(host: str, port: int) -> None - Initializes the client and establishes a connection to the specified host and port. If host is 'auto', uses the local hostname.\n- send(data: Any) -> None - Sends data to the server after encoding detection, prefixing the message with its length in bytes.\n- send_smpl(data: Any) -> None - Sends data to the server using simple encoding, prefixing the message with its length in bytes.\n- close() -> None - Closes the connection with the server.",
    "Canonical_solution": "import socket\n\nclass BaseSocketClient:\n    def __init__(self, host, port) -> None:\n        if host == 'auto':\n            host = socket.gethostname()\n        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        s.connect((host, port))\n        self.s = s\n    \n    def send(self, data):\n        val = encode_detect(data)\n        self.s.send(bytes('{}\\n'.format(len(val)), 'ascii'))\n        self.s.sendall(val)\n    \n    def send_smpl(self, data):\n        val = encode_smpl(data)\n        self.s.send(bytes('{}\\n'.format(len(val)), 'ascii'))\n        self.s.sendall(val)\n    \n    def close(self):\n        self.s.close()",
    "Code_level": "Class-level",
    "FSMID_for_test": 67,
    "right_result": "```python\nimport socket\n\nclass BaseSocketClient:\n    def __init__(self, host: str, port: int) -> None:\n        self.s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        if host == 'auto':\n            host = socket.gethostname()\n        self.s.connect((host, port))\n\n    def send(self, data: Any) -> None:\n        encoded_data = self.detect_encoding(data)\n        self.s.sendall(self.encode_with_length(encoded_data))\n\n    def send_smpl(self, data: Any) -> None:\n        self.s.sendall(self.encode_with_length(data))\n\n    def close(self) -> None:\n        self.s.close()\n\n    def detect_encoding(self, data: Any) -> bytes:\n        # Placeholder for encoding detection logic\n        return str(data).encode()\n\n    def encode_with_length(self, data: bytes) -> bytes:\n        length_prefix = len(data).to_bytes(4, byteorder='big')\n        return length_prefix + data\n```"
  },
  {
    "Task_id": 354,
    "Instruction": "Task Description: Implement a TCP client class in Python that handles secure connections, message synchronization, and various types of message exchanges with a server.\n\nClass Description: The Client class represents a TCP client that connects to a server, authenticates, sends and receives messages, and handles message synchronization. It supports both plain and SSL-encrypted connections.\n\nAttributes:\n- seq: [int] - Sequence number for message tracking\n- sock: [socket.socket] - Socket object for server communication\n- sync_key: [int] - Current synchronization key\n- syncing: [bool] - Flag indicating if synchronization is in progress\n- sync_timestamp: [int] - Timestamp of last synchronization attempt\n- next_sync_key: [int] - Next synchronization key to use\n\nMethods:\n- __init__() -> [None] - Initializes the client with default values\n- connect_server(device_id: str, token: str, host: str=None, port: int=24430, use_ssl: bool=True) -> [bool] - Connects to the server, authenticates using device ID and token, and returns connection status\n- close() -> [None] - Closes the connection with the server\n- recv_message() -> [tuple] - Receives messages from server and handles timeouts with ping messages\n- handle_message(cmd: int, s: int, m: any) -> [None] - Handles different types of incoming messages and triggers appropriate actions\n- ack_message(s: int) -> [None] - Sends acknowledgment for received messages\n- send_peer_message(msg: any) -> [None] - Sends a peer-to-peer message to the server\n- send_group_message(msg: any) -> [None] - Sends a group message to the server\n- send_sync() -> [None] - Initiates synchronization with the server\n- send_sync_key() -> [None] - Sends current synchronization key to the server",
    "Canonical_solution": "import struct\nimport socket\nimport select\nimport ssl\n\nclass Client:\n    def __init__(self):\n        self.seq = 0\n        self.sock = None\n        self.sync_key = 0\n        self.syncing = False\n        self.sync_timestamp = 0\n        self.next_sync_key = 0\n\n    def connect_server(self, device_id, token, host=None, port=24430, use_ssl=True):\n        address = (host if host else \"imnode2.gobelieve.io\", port)\n        if use_ssl:\n            sock_fd = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n            context = ssl.create_default_context()\n            sock = context.wrap_socket(sock_fd, server_hostname=address[0])\n        else:\n            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n            \n        sock.connect(address)\n        auth = AuthenticationToken()\n        auth.token = token\n        auth.device_id = device_id\n        self.seq = self.seq + 1\n        send_message(MSG_AUTH_TOKEN, self.seq, auth, sock)\n        cmd, _, _, msg = recv_message(sock)\n        if cmd != MSG_AUTH_STATUS or msg != 0:\n            return False\n\n        self.sock = sock\n        return True\n\n    def close(self):\n        if self.sock:\n            self.sock.close()\n\n    def recv_message(self):\n        while True:\n            rlist, _, xlist = select.select([self.sock], [], [self.sock], 60)\n            if not rlist and not xlist:\n                self.seq += 1\n                send_message(MSG_PING, self.seq, None, self.sock)\n                continue\n            if xlist:\n                return 0, 0, None\n            if rlist:\n                cmd, s, _, m = recv_message(self.sock)\n                self.handle_message(cmd, s, m)\n                return cmd, s, m\n\n    def handle_message(self, cmd, s, m):\n        if cmd == MSG_IM:\n            self.ack_message(s)\n        elif cmd == MSG_GROUP_IM:\n            self.ack_message(s)\n        elif cmd == MSG_SYSTEM:\n            self.ack_message(s)\n        elif cmd == MSG_SYNC_NOTIFY:\n            new_sync_key = m\n            now = int(time.time())\n            if new_sync_key > self.sync_key and (not self.syncing or now - self.sync_timestamp > 3):\n                self.send_sync()\n                self.syncing = True\n                self.sync_timestamp = int(time.time())\n            elif new_sync_key > self.next_sync_key:\n                self.next_sync_key = new_sync_key\n        elif cmd == MSG_SYNC_END:\n            new_sync_key = m\n            if new_sync_key > self.sync_key:\n                self.sync_key = new_sync_key\n                self.send_sync_key()\n            self.syncing = False\n            if self.next_sync_key > self.sync_key:\n                self.send_sync()\n                self.syncing = True\n                self.sync_timestamp = int(time.time())\n                self.next_sync_key = 0\n\n    def ack_message(self, s):\n        self.seq += 1\n        send_message(MSG_ACK, self.seq, s, self.sock)\n\n    def send_peer_message(self, msg):\n        self.seq += 1\n        send_message(MSG_IM, self.seq, msg, self.sock)\n\n    def send_group_message(self, msg):\n        self.seq += 1\n        send_message(MSG_GROUP_IM, self.seq, msg, self.sock)\n\n    def send_sync(self):\n        self.seq += 1\n        send_message(MSG_SYNC, self.seq, self.sync_key, self.sock)\n\n    def send_sync_key(self):\n        self.seq += 1\n        send_message(MSG_SYNC_KEY, self.seq, self.sync_key, self.sock)",
    "Code_level": "Class-level",
    "FSMID_for_test": 67,
    "right_result": "```python\nimport socket\nimport ssl\nimport time\n\nclass Client:\n    def __init__(self):\n        self.seq = 0\n        self.sock = None\n        self.sync_key = 0\n        self.syncing = False\n        self.sync_timestamp = 0\n        self.next_sync_key = 1\n\n    def connect_server(self, device_id: str, token: str, host: str=None, port: int=24430, use_ssl: bool=True) -> bool:\n        if host is None:\n            host = 'localhost'\n        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        if use_ssl:\n            self.sock = ssl.wrap_socket(self.sock, cert_reqs='CERT_NONE', server_hostname=host)\n        try:\n            self.sock.connect((host, port))\n            self.sock.sendall((device_id + ':' + token).encode())\n            return True\n        except Exception as e:\n            print(e)\n            return False\n\n    def close(self) -> None:\n        if self.sock:\n            self.sock.close()\n\n    def recv_message(self) -> tuple:\n        try:\n            data = self.sock.recv(1024)\n            if not data:\n                raise ConnectionError(\"Connection closed by server\")\n            return data.decode().split(',')\n        except Exception as e:\n            print(e)\n            self.sock.sendall(b'ping')\n            return self.recv_message()\n\n    def handle_message(self, cmd: int, s: int, m: any) -> None:\n        if cmd == 1:\n            print(f\"Received message: {m}\")\n        elif cmd == 2:\n            print(f\"Received sync key: {s}\")\n        else:\n            print(f\"Unknown command: {cmd}\")\n\n    def ack_message(self, s: int) -> None:\n        self.sock.sendall(f'ack,{s}'.encode())\n\n    def send_peer_message(self, msg: any) -> None:\n        self.sock.sendall(f'msg,peer,{self.seq},{msg}'.encode())\n        self.seq += 1\n\n    def send_group_message(self, msg: any) -> None:\n        self.sock.sendall(f'msg,group,{self.seq},{msg}'.encode())\n        self.seq += 1\n\n    def send_sync(self) -> None:\n        self.syncing = True\n        self.sync_timestamp = time.time()\n        self.sock.sendall(f\"sync,{self.sync_key}\".encode())\n\n    def send_sync_key(self) -> None:\n        self.sock.sendall(f\"sync_key,{self.next_sync_key}\".encode())\n        self.next_sync_key += 1\n```"
  },
  {
    "Task_id": 355,
    "Instruction": "Task Description: Implement a TCP client for Remote Console (RCon) protocol communication, which allows sending commands to a game server and receiving responses. The implementation should handle connection establishment, command sending, response receiving, and error handling.\n\nClass Description: RConConnection is a class that manages the connection to an RCon server, handles authentication, and provides methods to send commands and receive responses. It includes error handling for various RCon protocol scenarios.\n\nAttributes:\n- sock: [socket.socket] - The TCP socket object used for communication with the RCon server\n- rid: [int] - The current request ID used for tracking requests and responses\n\nMethods:\n- __init__(target: str, port: int) -> None - Initializes the RCon connection by creating a TCP socket and connecting to the specified target and port\n- send(t: int, payload: str) -> bytes - Sends an RCon packet with the specified type and payload, waits for and returns the response data\n- login(password: str) -> None - Authenticates with the RCon server using the provided password (uses send with type 3)\n- command(com: str, args: str) -> None - Sends a command to the RCon server (uses send with type 2)\n- close() -> None - Closes the connection to the RCon server",
    "Canonical_solution": "import socket\nimport struct\nimport select\n\nclass RConException(Exception):\n    def __init__(self, request_id, reason):\n        self.request_id = request_id\n        self.reason = reason\n\n    def __str__(self):\n        return (\"Failed RCon request with request ID %d, reason %s\" %\n                (self.request_id, self.reason))\n\nclass RConConnection:\n    def __init__(self, target, port):\n        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.sock.connect((target, port))\n        self.rid = 0\n\n    def send(self, t, payload):\n        self.rid = self.rid + 1\n        pld_enc = payload.encode(\"utf-8\")\n        header = struct.pack(\"<iii\",\n                             len(pld_enc) + 4 + 4 + 2,  # rid, type and padding\n                             self.rid, t)\n        data = header + pld_enc + b'\\x00\\x00'\n        self.sock.send(data)\n\n        toread = select.select([self.sock], [], [], 30)\n\n        if not toread:\n            raise RConException(self.rid, \"Request timed out.\")\n\n        try:\n            res_len, res_id, res_type = \\\n                struct.unpack(\"<iii\", self.sock.recv(12, socket.MSG_WAITALL))\n            if res_len < 0:\n                raise Exception(\"Response length is {}.\".format(res_len))\n\n        except Exception as e:\n            raise RConException(self.rid,\n                                \"RCon protocol error. Are you sure you're \"\n                                \"talking to the RCon port? Error: %s\" % e)\n        res_data = self.sock.recv(res_len - 4 - 4)\n        res_data = res_data[:-2]\n\n        if res_id == -1:\n            if t == 3:\n                raise RConException(self.rid, \"Login failed.\")\n            else:\n                raise RConException(self.rid,\n                                    \"Request failed due to invalid login.\")\n        elif res_id != self.rid:\n            raise RConException(self.rid, \"Received unexpected response \"\n                                \"number: %d\" % res_id)\n        return res_data\n\n    def login(self, password):\n        self.send(3, password)\n\n    def command(self, com, args):\n        self.send(2, com + \" \" + args)\n\n    def close(self):\n        self.sock.close()",
    "Code_level": "Class-level",
    "FSMID_for_test": 67,
    "right_result": "```python\nimport socket\n\nclass RConConnection:\n    def __init__(self, target: str, port: int) -> None:\n        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.sock.connect((target, port))\n        self.rid = 1\n\n    def send(self, t: int, payload: str) -> bytes:\n        self.rid += 1\n        packet = f\"{self.rid} {t} {len(payload)} {payload}\".encode()\n        self.sock.sendall(packet)\n        response = self.sock.recv(1024)\n        return response\n\n    def login(self, password: str) -> None:\n        self.send(3, password)\n\n    def command(self, com: str, args: str) -> None:\n        self.send(2, f\"{com} {args}\")\n\n    def close(self) -> None:\n        self.sock.close()\n```"
  },
  {
    "Task_id": 356,
    "Instruction": "Task Description: Implement a TCP client class that communicates with a server to validate sessions using JSON-RPC protocol, handling connection management, data transmission, and response validation.\n\nClass Description: CaseTCP is a TCP client class that establishes and maintains a connection to a server, sends session validation requests in JSON-RPC format, and processes the server's responses with proper error handling and assertion checks.\n\nAttributes:\n- identity: int - A unique identifier for the client (defaults to process ID)\n- expected: bool - The expected validation result from the server\n- uri: str - The server IP address (default: '127.0.0.1')\n- port: int - The server port number (default: 8545)\n- sock: socket.socket - The TCP socket object for communication\n- payload: str - A random string payload for session validation\n\nMethods:\n- __init__(uri: str = '127.0.0.1', port: int = 8545, identity: int = os.getpid()) -> None - Initializes the client with server connection details and generates a random payload\n- __call__(**kwargs) -> int - Makes a combined send and receive call (takes optional a and b parameters)\n- send(*, a: Optional[int] = None, b: Optional[int] = None) -> int - Sends a session validation request to the server with optional parameters (generates random values if not provided)\n- recv() -> int - Receives and validates the server response, returning the validation result",
    "Canonical_solution": "import os\nimport json\nimport errno\nimport socket\nfrom typing import Optional\n\ndef make_tcp_socket(ip: str, port: int):\n    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    sock.connect((ip, port))\n    return sock\n\ndef socket_is_closed(sock: socket.socket) -> bool:\n    if sock is None:\n        return True\n    try:\n        buf = sock.recv(1, socket.MSG_PEEK | socket.MSG_DONTWAIT)\n        if buf == b'':\n            return True\n    except BlockingIOError as exc:\n        if exc.errno != errno.EAGAIN:\n            raise\n    return False\n\ndef recvall(sock, buffer_size=4096):\n    data = b\"\"\n    while True:\n        chunk = sock.recv(buffer_size)\n        if not chunk:\n            break\n        data += chunk\n    return data\n\nclass CaseTCP:\n    def __init__(self, uri: str = '127.0.0.1', port: int = 8545, identity: int = os.getpid()) -> None:\n        self.identity = identity\n        self.expected = -1\n        self.uri = uri\n        self.port = port\n        self.sock = None\n        self.payload = ''.join(random.choices(string.ascii_uppercase, k=80))\n\n    def __call__(self, **kwargs) -> int:\n        self.send(**kwargs)\n        return self.recv()\n\n    def send(self, *, a: Optional[int] = None, b: Optional[int] = None) -> int:\n        a = random.randint(1, 1000) if a is None else a\n        b = random.randint(1, 1000) if b is None else b\n        jsonrpc = '{\"jsonrpc\":\"2.0\",\"id\":%i,\"method\":\"validate_session\",\"params\":{\"user_id\":%i,\"session_id\":%i,\"text\":\"%s\"}}' % (self.identity, a, b, self.payload)\n        self.expected = (a ^ b) % 23 == 0\n        self.sock = make_tcp_socket(self.uri, self.port) if socket_is_closed(self.sock) else self.sock\n        self.sock.send(jsonrpc.encode())\n\n    def recv(self) -> int:\n        response_bytes = recvall(self.sock).decode()\n        self.sock.settimeout(None)\n        response = json.loads(response_bytes)\n        assert 'error' not in response, response['error']\n        received = response['result']\n        assert response['jsonrpc']\n        assert response.get('id', None) == self.identity\n        assert self.expected == received, 'Wrong Answer'\n        return received",
    "Code_level": "Class-level",
    "FSMID_for_test": 67,
    "right_result": "```python\nimport socket\nimport json\nimport os\nimport random\n\nclass CaseTCP:\n    def __init__(self, uri: str = '127.0.0.1', port: int = 8545, identity: int = os.getpid()) -> None:\n        self.identity = identity\n        self.expected = True\n        self.uri = uri\n        self.port = port\n        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.payload = str(random.randint(0, 1000000))\n\n    def __call__(self, **kwargs) -> int:\n        return self.send(**kwargs)\n\n    def send(self, *, a: Optional[int] = None, b: Optional[int] = None) -> int:\n        if a is None:\n            a = random.randint(0, 100)\n        if b is None:\n            b = random.randint(0, 100)\n        request = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": \"session_validate\",\n            \"params\": [self.identity, a, b],\n            \"id\": self.identity\n        }\n        self.sock.connect((self.uri, self.port))\n        self.sock.sendall(json.dumps(request).encode())\n        response = self.recv()\n        self.sock.close()\n        return response\n\n    def recv(self) -> int:\n        data = b''\n        while True:\n            part = self.sock.recv(4096)\n            if not part:\n                break\n            data += part\n        response = json.loads(data.decode())\n        if response.get('error'):\n            raise Exception(response['error']['message'])\n        assert response['result'] == self.expected, \"Unexpected response\"\n        return response['result']\n```"
  },
  {
    "Task_id": 358,
    "Instruction": "Task Description: Create a Python function that establishes a TCP client connection to a server, sends a JSON-formatted command with arguments, receives the server's response, and then closes the connection.\n\nFunction Description: The function `connect_client` creates a TCP socket, connects to a specified server, sends a command with arguments in JSON format, waits for and prints the server's response, and finally closes the socket connection.\n\nInput:\n- `machine` (str): The IP address or hostname of the target server.\n- `port` (int): The port number on which the server is listening.\n- `blendpath` (str): A file path or identifier to be included in the command arguments.\n- `obj_num` (int): A numerical argument to be included in the command arguments.\n\nOutput:\n- The function does not return any value but prints the server's response to the console.",
    "Canonical_solution": "import socket, json\n\ndef connect_client(machine, port, blendpath, obj_num):\n    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    sock.connect((machine, port))\n    args = [blendpath, obj_num]\n    command = json.dumps({'call':1, 'command':1, 'args':args})\n    sock.send((command).encode())\n    response_data = sock.recv(1024)\n    print(response_data.decode())\n    sock.close()",
    "Code_level": "Function-level",
    "FSMID_for_test": 67,
    "right_result": "```python\nimport socket\nimport json\n\ndef connect_client(machine, port, blendpath, obj_num):\n    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    client_socket.connect((machine, port))\n    command = json.dumps({\"blendpath\": blendpath, \"obj_num\": obj_num})\n    client_socket.sendall(command.encode())\n    response = client_socket.recv(1024).decode()\n    print(response)\n    client_socket.close()\n```"
  },
  {
    "Task_id": 359,
    "Instruction": "Task Description: Create a threaded TCP client socket class that handles bidirectional communication with a remote server, managing both sending and receiving data through queues while running in a separate thread.\n\nClass Description: ThreadedTCPClientSocket is a threading-based TCP client that establishes a connection to a specified server, sends data from a queue to the server, and puts received data into another queue. It uses non-blocking operations with select() for efficient I/O handling.\n\nAttributes:\n- ip: str - The IP address of the target server\n- port: int - The port number of the target server\n- listener_q: queue.Queue - Queue for storing received data from the server\n- remote_q: queue.Queue - Queue for storing data to be sent to the server\n- config: dict - Configuration parameters for the client\n- logger: logging.Logger - Logger object for debugging and error messages\n- sock: socket.socket - The TCP socket object for communication\n\nMethods:\n- __init__(ip, port, listener_q, remote_q, config, log) -> None - Initializes the client with connection parameters and queues\n- connect() -> int - Establishes connection to the server and returns the local port number (None if failed)\n- run() -> None - Main thread loop handling send/receive operations using select()",
    "Canonical_solution": "import socket\nimport threading\nimport select\nimport queue\nimport logging\n\nBUF_SZ = 1024\n\nclass ThreadedTCPClientSocket(threading.Thread):\n    def __init__(self, ip, port, listener_q, remote_q, config, log):\n        super(ThreadedTCPClientSocket, self).__init__()\n        self.ip = ip\n        self.port = int(port)\n        self.listener_q = listener_q\n        self.remote_q = remote_q\n        self.config = config\n        self.logger = log\n        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\n    def connect(self):\n        try:\n            self.sock.connect((self.ip, self.port))\n            new_sport = self.sock.getsockname()[1]\n            return new_sport\n        except Exception as e:\n            self.logger.debug('Listener socket exception while attempting connection %s' % str(e))\n        return None\n\n    def run(self):\n        try:\n            while True:\n                readable, writable, exceptional = select.select([self.sock], [], [], .001)\n                if not self.remote_q.empty():\n                    data = self.remote_q.get()\n                    self.sock.send(data)\n                if readable:\n                    data = self.sock.recv(BUF_SZ)\n                    if data:\n                        self.listener_q.put(data)\n                    else:\n                        self.sock.close()\n                        sys.exit(1)\n        except Exception as e:\n            self.logger.debug('Listener socket exception %s' % str(e))",
    "Code_level": "Class-level",
    "FSMID_for_test": 67,
    "right_result": "```python\nimport socket\nimport queue\nimport threading\nimport logging\nimport select\n\nclass ThreadedTCPClientSocket:\n    def __init__(self, ip, port, listener_q, remote_q, config, log):\n        self.ip = ip\n        self.port = port\n        self.listener_q = listener_q\n        self.remote_q = remote_q\n        self.config = config\n        self.logger = log\n        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        self.sock.setblocking(0)\n\n    def connect(self):\n        try:\n            self.sock.connect((self.ip, self.port))\n            return self.sock.getsockname()[1]\n        except Exception as e:\n            self.logger.error(f\"Failed to connect to {self.ip}:{self.port}: {e}\")\n            return None\n\n    def run(self):\n        while True:\n            try:\n                readable, writable, exceptional = select.select([self.sock], [self.sock], [self.sock])\n                if readable:\n                    data = self.sock.recv(1024)\n                    if data:\n                        self.listener_q.put(data.decode())\n                    else:\n                        self.logger.info(\"Server closed the connection\")\n                        break\n                if writable:\n                    data = self.remote_q.get()\n                    self.sock.sendall(data.encode())\n            except Exception as e:\n                self.logger.error(f\"Error in run loop: {e}\")\n                break\n```"
  },
  {
    "Task_id": 363,
    "Instruction": "Task Description: Implement a TCP client handler class that manages socket communication with a server, including sending and receiving data, handling connection states, and processing messages.\n\nClass Description: EventHandler is a TCP client handler that manages non-blocking socket communication with a server. It provides methods for sending and receiving data, handling connection states, and processing messages. The class uses threading locks to ensure thread-safe operations on the socket.\n\nAttributes:\n- _write_lock: threading.RLock - Lock for thread-safe write operations\n- _read_lock: threading.RLock - Lock for thread-safe read operations\n- address: tuple - Server address (IP, port) to connect to\n- outbuffer: bytes - Buffer for outgoing data\n- inbuffer: bytes - Buffer for incoming data\n- sock: socket.socket - TCP socket object\n- connected: bool - Connection state flag\n\nMethods:\n- __init__(address: tuple, sock: socket.socket=None) -> None - Initializes the handler with server address and optional existing socket\n- fileno() -> int - Returns socket file descriptor for select()\n- send() -> int - Sends data from outbuffer to server (returns bytes sent)\n- recv() -> None - Receives data from server and processes messages\n- push(data: bytes) -> None - Adds data to outbuffer for sending\n- handle_read(data: bytes) -> None - Abstract method to handle received data (must be implemented)\n- process_message() -> None - Abstract method to process complete messages (must be implemented)\n- ready_to_read() -> bool - Returns if ready for reading (default True)\n- ready_to_write() -> bool - Returns if ready for writing (default True)\n- close() -> None - Closes the socket connection",
    "Canonical_solution": "import os\nimport sys\nimport time\nimport errno\nimport socket\nimport select\nimport logging\nimport threading\n\nclass EventHandler:\n    def __init__(self, address: tuple, sock: socket.socket=None) -> None:\n        self._write_lock = threading.RLock()\n        self._read_lock = threading.RLock()\n        self.address = address\n        self.outbuffer = b''\n        self.inbuffer = b''\n        self.sock = sock if sock is not None else socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.sock.connect(address)\n        self.connected = True\n        self.sock.setblocking(False)\n\n    def fileno(self) -> int:\n        return self.sock.fileno()\n\n    def send(self) -> int:\n        with self._write_lock:\n            while len(self.outbuffer) > 0:\n                try:\n                    sent = self.sock.send(self.outbuffer)\n                    self.outbuffer = self.outbuffer[sent:]\n                except socket.error as error:\n                    if error.args[0] == errno.EAGAIN:\n                        time.sleep(0.1)\n                    elif error.args[0] in (errno.ECONNRESET, errno.ENOTCONN, errno.ESHUTDOWN, errno.ECONNABORTED, errno.EPIPE):\n                        self.close()\n                        return 0\n                    elif os.name == 'posix':\n                        if sys.platform == 'darwin' and error.args[0] == errno.EBADF:\n                            self.close()\n                            return 0\n                        elif error.args[0] == errno.EBADFD:\n                            self.close()\n                            return 0\n                        raise\n                    else:\n                        raise\n\n    def recv(self) -> None:\n        try:\n            data = self.sock.recv(4096)\n        except socket.error as error:\n            if error.args[0] in (errno.EWOULDBLOCK, errno.EAGAIN):\n                return None\n            elif error.args[0] == errno.ECONNRESET:\n                self.close()\n                return None\n            else:\n                raise\n\n        if not data:\n            self.close()\n            return None\n\n        self.inbuffer += data\n\n        while self.inbuffer:\n            match = b'\\r\\n'\n            index = self.inbuffer.find(match)\n            if index != -1:\n                if index > 0:\n                    self.handle_read(self.inbuffer[:index])\n                self.inbuffer = self.inbuffer[index+len(match):]\n                self.process_message()\n            else:\n                index = len(match) - 1\n                while index and not self.inbuffer.endswith(match[:index]):\n                    index -= 1\n                if index:\n                    if index != len(self.inbuffer):\n                        self.handle_read(self.inbuffer[:-index])\n                        self.inbuffer = self.inbuffer[-index:]\n                    break\n                else:\n                    self.handle_read(self.inbuffer)\n                    self.inbuffer = b''\n\n    def push(self, data: bytes) -> None:\n        self.outbuffer += data\n\n    def handle_read(self, data: bytes) -> None:\n        raise NotImplementedError('You have to implement this method')\n\n    def process_message(self) -> None:\n        raise NotImplementedError('You have to implement this method')\n\n    def ready_to_read(self) -> bool:\n        return True\n\n    def ready_to_write(self) -> bool:\n        return True\n\n    def close(self) -> None:\n        self.sock.close()\n        self.connected = False",
    "Code_level": "Class-level",
    "FSMID_for_test": 67,
    "right_result": "```python\nimport threading\nimport socket\n\nclass EventHandler:\n    def __init__(self, address: tuple, sock: socket.socket=None) -> None:\n        self._write_lock = threading.RLock()\n        self._read_lock = threading.RLock()\n        self.address = address\n        self.outbuffer = b''\n        self.inbuffer = b''\n        self.sock = sock if sock else socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.connected = False\n\n    def fileno(self) -> int:\n        return self.sock.fileno()\n\n    def send(self) -> int:\n        with self._write_lock:\n            return self.sock.send(self.outbuffer)\n\n    def recv(self) -> None:\n        with self._read_lock:\n            data = self.sock.recv(1024)\n            self.inbuffer += data\n            self.handle_read(data)\n\n    def push(self, data: bytes) -> None:\n        with self._write_lock:\n            self.outbuffer += data\n\n    def handle_read(self, data: bytes) -> None:\n        pass\n\n    def process_message(self) -> None:\n        pass\n\n    def ready_to_read(self) -> bool:\n        return True\n\n    def ready_to_write(self) -> bool:\n        return True\n\n    def close(self) -> None:\n        self.sock.close()\n```"
  },
  {
    "Task_id": 367,
    "Instruction": "Task Description: Create a TCP client class in Python that can connect to a server, send and receive data, and manage the connection lifecycle.\n\nClass Description: TCPClient is a class that implements TCP client functionality using Python's socket module. It handles connection establishment, data transmission, and connection termination with a TCP server.\n\nAttributes:\n- s: Optional[socket.socket] - The socket object used for communication, initialized as None when not connected\n\nMethods:\n- connect(host: str, port: int) -> None - Establishes a connection to the specified host and port after validating the input parameters\n- send_data(data: str) -> None - Sends UTF-8 encoded string data to the connected server\n- receive_data() -> bytes - Receives all available data from the server until the connection is closed\n- close() -> None - Closes the socket connection and resets the socket attribute\n- _dotted_quad_to_num(ip: str) -> int - (Private method) Converts a dotted quad IP address string to its integer representation",
    "Canonical_solution": "import socket\nimport re\nimport ipaddress\nfrom typing import Optional\n\nclass TCPClient:\n    def __init__(self):\n        self.s: Optional[socket.socket] = None\n\n    def connect(self, host: str, port: int) -> None:\n        \"\"\"\n        Connect to a TCP server\n        Args:\n            host: Target host IP or domain\n            port: Target port number\n        \"\"\"\n        if not re.match(r\"^\\d+$\", str(port)):\n            raise ValueError(f\"Invalid port number: {port}\")\n\n        if re.match(r\"^\\d+$\", host):\n            address = int(host)\n        elif re.match(r\"^[\\d\\.]+$\", host):\n            address = self._dotted_quad_to_num(host)\n        else:\n            raise ValueError(\"DNS resolution not implemented\")\n\n        if ipaddress.ip_address(address).is_private:\n            raise ValueError(\"Private IP addresses not allowed\")\n\n        self.s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.s.connect((host, port))\n\n    def send_data(self, data: str) -> None:\n        \"\"\"\n        Send data to the connected server\n        Args:\n            data: String data to send\n        \"\"\"\n        if self.s:\n            self.s.send(data.encode('utf8'))\n\n    def receive_data(self) -> bytes:\n        \"\"\"\n        Receive data from the connected server\n        Returns:\n            Received bytes data\n        \"\"\"\n        if not self.s:\n            return b\"\"\n\n        data = b\"\"\n        while True:\n            packet = self.s.recv(1024)\n            if not packet:\n                break\n            data += packet\n        return data\n\n    def close(self) -> None:\n        \"\"\"\n        Close the socket connection\n        \"\"\"\n        if self.s:\n            self.s.close()\n            self.s = None\n\n    def _dotted_quad_to_num(self, ip: str) -> int:\n        \"\"\"\n        Convert decimal dotted quad string to integer\n        Args:\n            ip: IP address string\n        Returns:\n            Integer representation of IP\n        \"\"\"\n        ip32bit = socket.inet_aton(ip)\n        return struct.unpack(\"I\", ip32bit)[0]",
    "Code_level": "Class-level",
    "FSMID_for_test": 67,
    "right_result": "```python\nimport socket\n\nclass TCPClient:\n    def __init__(self):\n        self.s = None\n\n    def connect(self, host: str, port: int) -> None:\n        if not isinstance(host, str) or not isinstance(port, int):\n            raise ValueError(\"Invalid host or port\")\n        self.s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.s.connect((host, port))\n\n    def send_data(self, data: str) -> None:\n        if self.s is None:\n            raise ConnectionError(\"Not connected\")\n        self.s.sendall(data.encode('utf-8'))\n\n    def receive_data(self) -> bytes:\n        if self.s is None:\n            raise ConnectionError(\"Not connected\")\n        return self.s.recv(1024)\n\n    def close(self) -> None:\n        if self.s is not None:\n            self.s.close()\n            self.s = None\n\n    def _dotted_quad_to_num(self, ip: str) -> int:\n        return sum(int(num) << (8 * (3 - i)) for i, num in enumerate(ip.split('.')))\n```"
  },
  {
    "Task_id": 370,
    "Instruction": "Task Description: Create a TCP client class for interacting with an OpenVPN server, capable of establishing connections, sending commands, receiving data, and closing connections.\n\nClass Description: The OpenVPNTCPClient class provides functionality to connect to an OpenVPN server via TCP, send commands, receive responses, and manage the connection lifecycle.\n\nAttributes:\n- host: str - The IP address or hostname of the OpenVPN server\n- port: int - The port number on which the OpenVPN server is listening\n- timeout: int - Connection and operation timeout in seconds (default: 10)\n- socket: socket.socket - The TCP socket object used for communication\n\nMethods:\n- connect() -> bool - Establishes a TCP connection to the OpenVPN server. Returns True on success, False on failure.\n- send_command(command: str) -> bool - Sends a command to the connected OpenVPN server. Returns True on success, False on failure.\n- receive_data() -> list[bytes] | None - Receives data from the server until an 'END' marker is encountered. Returns list of received lines or None on error.\n- close() -> bool - Closes the TCP connection. Returns True on success, False on failure.\n- get_status() -> list[bytes] | None - Executes a complete status request cycle (connect, send 'status' command, receive response, close). Returns received data or None on error.",
    "Canonical_solution": "import socket\n\nclass OpenVPNTCPClient:\n    def __init__(self, host, port, timeout=10):\n        self.host = host\n        self.port = port\n        self.timeout = timeout\n        self.socket = None\n\n    def connect(self):\n        try:\n            self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n            self.socket.settimeout(int(self.timeout))\n            self.socket.connect((self.host, self.port))\n            return True\n        except socket.error as e:\n            return False\n\n    def send_command(self, command):\n        try:\n            self.socket.send(command + '\\r\\n')\n            return True\n        except socket.error as e:\n            return False\n\n    def receive_data(self):\n        try:\n            fd = self.socket.makefile('rb')\n            lines = []\n            while True:\n                line = fd.readline()\n                lines.append(line)\n                if line.strip() == 'END':\n                    break\n            return lines\n        except socket.error as e:\n            return None\n\n    def close(self):\n        try:\n            if self.socket:\n                self.socket.close()\n            return True\n        except socket.error:\n            return False\n\n    def get_status(self):\n        if not self.connect():\n            return None\n        \n        if not self.send_command('status'):\n            self.close()\n            return None\n        \n        data = self.receive_data()\n        self.close()\n        \n        return data",
    "Code_level": "Class-level",
    "FSMID_for_test": 67,
    "right_result": "```python\nimport socket\n\nclass OpenVPNTCPClient:\n    def __init__(self, host: str, port: int, timeout: int = 10):\n        self.host = host\n        self.port = port\n        self.timeout = timeout\n        self.socket = None\n\n    def connect(self) -> bool:\n        try:\n            self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n            self.socket.settimeout(self.timeout)\n            self.socket.connect((self.host, self.port))\n            return True\n        except socket.error:\n            return False\n\n    def send_command(self, command: str) -> bool:\n        if self.socket is None or not self.socket.connected:\n            return False\n        try:\n            self.socket.sendall(command.encode())\n            return True\n        except socket.error:\n            return False\n\n    def receive_data(self) -> list[bytes] | None:\n        if self.socket is None or not self.socket.connected:\n            return None\n        try:\n            data = []\n            while True:\n                line = self.socket.recv(4096).decode()\n                if line == 'END':\n                    break\n                data.append(line.encode())\n            return data\n        except socket.error:\n            return None\n\n    def close(self) -> bool:\n        if self.socket is not None:\n            try:\n                self.socket.close()\n                self.socket = None\n                return True\n            except socket.error:\n                return False\n        return True\n\n    def get_status(self) -> list[bytes] | None:\n        if not self.connect():\n            return None\n        if not self.send_command('status'):\n            self.close()\n            return None\n        data = self.receive_data()\n        self.close()\n        return data\n```"
  },
  {
    "Task_id": 372,
    "Instruction": "Task Description: Implement a TCP client function that communicates with a server to send specific control codes derived from a secret key, with options to start or stop port reuse.\n\nFunction Description: The function establishes a TCP connection to a specified server, generates two MD5 checkcodes from a secret, combines portions of them to create a final checkcode, extracts control codes from this checkcode, and sends either a start or stop command based on the action parameter. It handles connection errors gracefully and closes the connection after sending the command.\n\nInput:\n- ip: [str] - The IP address of the target server\n- port: [str/int] - The port number of the target server\n- action: [str] - Either \"start\" or \"stop\" to determine which control code to send\n\nOutput:\n- None (prints status messages to console)\n- Prints \"[*] Cannot connect to target\" if connection fails\n- Prints \"[*] Done!\" when operation completes (successfully or after handling failure)",
    "Canonical_solution": "import socket\nimport hashlib\n\nSECRET = \"\"\n\ndef tcp_client_communication(ip, port, action):\n    first_checkcode = hashlib.md5(SECRET.encode()).hexdigest()\n    second_checkcode = hashlib.md5(first_checkcode.encode()).hexdigest()\n    final_checkcode = first_checkcode[:24] + second_checkcode[:24]\n\n    START_PORT_REUSE = final_checkcode[16:32]\n    STOP_PORT_REUSE = final_checkcode[32:]\n\n    data = START_PORT_REUSE if action == \"start\" else STOP_PORT_REUSE\n\n    try:\n        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        s.settimeout(2)\n        s.connect((ip, int(port)))\n        s.send(data.encode())\n    except:\n        print(\"[*] Cannot connect to target\")\n\n    try:\n        s.recv(1024)\n    except:\n        pass\n\n    s.close()\n    print(\"[*] Done!\")",
    "Code_level": "Function-level",
    "FSMID_for_test": 67,
    "right_result": "```python\nimport socket\nimport hashlib\n\ndef send_control_code(ip, port, action):\n    try:\n        client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        client_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1 if action == \"start\" else 0)\n        client_socket.connect((ip, int(port)))\n        secret = \"your_secret_key_here\"\n        md5_hash1 = hashlib.md5(secret.encode()).hexdigest()\n        md5_hash2 = hashlib.md5(secret[::-1].encode()).hexdigest()\n        final_checkcode = md5_hash1[:8] + md5_hash2[:8]\n        control_code = final_checkcode[:4]\n        client_socket.sendall(control_code.encode())\n        client_socket.close()\n        print(\"[*] Done!\")\n    except socket.error:\n        print(\"[*] Cannot connect to target\")\n```"
  },
  {
    "Task_id": 377,
    "Instruction": "Task Description: Create a TCP/UDP/RAW socket server class that can handle incoming connections, receive data, and optionally send responses. The server should support different protocols (TCP, UDP, RAW) and provide methods for single interaction or receiving until a specific pattern is matched.\n\nClass Description: MiniTestServer is a versatile socket server implementation that supports TCP, UDP, and RAW packet protocols. It can operate in silent mode (only receiving) or respond to clients, and includes timeout handling for operations.\n\nAttributes:\n- server_socket: [socket.socket] - The underlying socket object\n- received: [bytes] - The last received data from a client\n- data_to_send: [bytes] - Default data to send in response (default: b\"\\xfe\\xeb\\xda\\xed\")\n- active_port: [int] - The port number the server is bound to\n- stay_silent: [bool] - If True, server won't send responses (default: False)\n- proto: [str] - Protocol type ('tcp', 'udp', or 'raw') (default: 'tcp')\n- host: [str] - Host address to bind to (default: '0.0.0.0')\n- timeout: [int] - Operation timeout in seconds (default: 5)\n\nMethods:\n- __init__(stay_silent=False, proto=\"tcp\", host=\"0.0.0.0\") -> None - Initializes the server with optional parameters\n- bind() -> None - Creates and binds the socket according to the specified protocol\n- serve_once() -> None - Handles a single client interaction (receive and optionally send)\n- receive_until(expected) -> None - (RAW only) Receives data until matching expected pattern or timeout",
    "Canonical_solution": "import socket\nimport threading\nimport time\n\nclass MiniTestServer:\n    def __init__(self, stay_silent=False, proto=\"tcp\", host=\"0.0.0.0\"):\n        self.server_socket = None\n        self.received = None\n        self.data_to_send = b\"\\xfe\\xeb\\xda\\xed\"\n        self.active_port = None\n        self.stay_silent = stay_silent\n        self.proto = proto\n        self.host = host\n        self.timeout = 5\n\n    def bind(self):\n        if self.proto == \"tcp\":\n            self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        elif self.proto == \"udp\":\n            self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n        elif self.proto == \"raw\":\n            self.server_socket = socket.socket(socket.AF_PACKET, socket.SOCK_RAW, socket.ntohs(0x0003))\n        else:\n            raise Exception(\"Invalid protocol type: '{0}'\".format(self.proto))\n\n        self.server_socket.bind((self.host, 0))\n        if self.proto == \"tcp\":\n            self.server_socket.listen(1)\n        self.active_port = self.server_socket.getsockname()[1]\n\n    def serve_once(self):\n        self.server_socket.settimeout(self.timeout)\n\n        if self.proto == \"tcp\":\n            (client_socket, address) = self.server_socket.accept()\n            self.received = client_socket.recv(10000)\n            if not self.stay_silent:\n                client_socket.send(self.data_to_send)\n            client_socket.close()\n        elif self.proto == \"udp\":\n            data, addr = self.server_socket.recvfrom(1024)\n            self.received = data\n            if not self.stay_silent:\n                self.server_socket.sendto(self.data_to_send, addr)\n        elif self.proto == \"raw\":\n            data, addr = self.server_socket.recvfrom(10000)\n            self.received = data\n            if not self.stay_silent:\n                self.server_socket.sendto(self.data_to_send, addr)\n        else:\n            raise Exception(\"Invalid protocol type: '{0}'\".format(self.proto))\n\n        self.server_socket.close()\n        self.server_socket = None\n        self.active_port = None\n\n    def receive_until(self, expected):\n        self.server_socket.settimeout(self.timeout)\n\n        if self.proto == \"raw\":\n            elapsed_time = 0\n            start_time = time.time()\n            while elapsed_time < self.timeout:\n                self.server_socket.settimeout(self.timeout - elapsed_time)\n                try:\n                    data, addr = self.server_socket.recvfrom(10000)\n                    if data == expected:\n                        self.received = data\n                        if not self.stay_silent:\n                            self.server_socket.sendto(self.data_to_send, addr)\n                        break\n                except socket.timeout:\n                    break\n                elapsed_time = time.time() - start_time\n        else:\n            raise Exception(\"Invalid protocol type: '{0}'\".format(self.proto))\n\n        self.server_socket.close()\n        self.server_socket = None\n        self.active_port = None",
    "Code_level": "Class-level",
    "FSMID_for_test": 66,
    "right_result": "```python\nimport socket\n\nclass MiniTestServer:\n    def __init__(self, stay_silent=False, proto=\"tcp\", host=\"0.0.0.0\", timeout=5):\n        self.server_socket = None\n        self.received = b\"\"\n        self.data_to_send = b\"\\xfe\\xeb\\xda\\xed\"\n        self.active_port = None\n        self.stay_silent = stay_silent\n        self.proto = proto\n        self.host = host\n        self.timeout = timeout\n\n    def bind(self):\n        if self.proto == \"tcp\":\n            self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        elif self.proto == \"udp\":\n            self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n        elif self.proto == \"raw\":\n            self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_RAW, socket.IPPROTO_RAW)\n        self.server_socket.bind((self.host, 0))\n        self.active_port = self.server_socket.getsockname()[1]\n\n    def serve_once(self):\n        if self.proto == \"tcp\":\n            self.server_socket.listen()\n            conn, addr = self.server_socket.accept()\n            self.received = conn.recv(1024)\n            if not self.stay_silent:\n                conn.send(self.data_to_send)\n            conn.close()\n        elif self.proto == \"udp\":\n            data, addr = self.server_socket.recvfrom(1024)\n            self.received = data\n            if not self.stay_silent:\n                self.server_socket.sendto(self.data_to_send, addr)\n        elif self.proto == \"raw\":\n            self.server_socket.settimeout(self.timeout)\n            try:\n                self.received = self.server_socket.recv(1024)\n            except socket.timeout:\n                pass\n\n    def receive_until(self, expected):\n        if self.proto == \"raw\":\n            self.server_socket.settimeout(self.timeout)\n            received = b\"\"\n            while True:\n                try:\n                    packet = self.server_socket.recv(1024)\n                    received += packet\n                    if received.endswith(expected):\n                        break\n                except socket.timeout:\n                    break\n```"
  },
  {
    "Task_id": 378,
    "Instruction": "Task Description: Implement a mock SSH agent that simulates the behavior of a real SSH agent, handling client requests for key management and authentication. The agent should support Unix domain sockets for IPC and provide functionality to start, stop, and manage client connections.\n\nClass Description: The `MockSSHAgent` class simulates an SSH agent that can load an ED25519 private key, handle client connections, and respond to SSH agent protocol requests. It uses threading to handle multiple clients and supports graceful shutdown.\n\nAttributes:\n\n- `sock_path`: [str] - The path to the Unix domain socket used for communication.\n- `server_sock`: [socket.socket] - The server socket object for accepting client connections.\n- `running`: [threading.Event] - A threading event to control the agent's running state.\n- `keys`: [list] - A list of tuples containing key information (key_type, key_blob, comment).\n- `agent_thread`: [threading.Thread] - The thread handling client connections.\n\nMethods:\n\n- `_load_ed25519_private_key(private_key_path: str) -> tuple`: Loads an ED25519 private key from a file and returns a tuple containing key information (key_type, key_blob, comment).\n- `start_agent(sock_path: str) -> None`: Starts the SSH agent by creating a Unix domain socket, binding it, and listening for client connections. Sets the `SSH_AUTH_SOCK` environment variable.\n- `_accept_connections() -> None`: Continuously accepts client connections and delegates handling to `_handle_client`.\n- `_handle_client(client_sock: socket.socket) -> None`: Handles a client connection by processing incoming messages and sending appropriate responses.\n- `_mock_list_keys_response() -> bytes`: Constructs a mock response to the `SSH_AGENTC_REQUEST_IDENTITIES` request.\n- `stop_agent() -> None`: Stops the SSH agent by sending a stop command, cleaning up resources, and removing the socket file.",
    "Canonical_solution": "import os\nimport socket\nimport struct\nimport threading\nfrom cryptography.hazmat.primitives import serialization\nfrom cryptography.hazmat.primitives.asymmetric.ed25519 import Ed25519PrivateKey\n\nSSH_AGENTC_REQUEST_IDENTITIES = 11\nSSH_AGENT_IDENTITIES_ANSWER = 12\nSSH_AGENT_FAILURE = 5\nSTOP_REQUEST = 0xFF\n\nclass MockSSHAgent:\n    def __init__(self, private_key_path):\n        self.sock_path = None\n        self.server_sock = None\n        self.running = threading.Event()\n        self.keys = [self._load_ed25519_private_key(private_key_path)]\n        self.agent_thread = None\n\n    def _load_ed25519_private_key(self, private_key_path):\n        with open(private_key_path, 'rb') as key_file:\n            private_key = serialization.load_ssh_private_key(key_file.read(), password=None)\n\n        if not isinstance(private_key, Ed25519PrivateKey):\n            raise ValueError(\"Invalid key type, expected ED25519 private key.\")\n\n        public_key = private_key.public_key()\n        public_key_blob = public_key.public_bytes(\n            encoding=serialization.Encoding.Raw, format=serialization.PublicFormat.Raw\n        )\n\n        key_type = b\"ssh-ed25519\"\n        key_blob_full = (\n            struct.pack(\">I\", len(key_type))\n            + key_type\n            + struct.pack(\">I\", len(public_key_blob))\n            + public_key_blob\n        )\n\n        comment = \"\"\n        return (\"ssh-ed25519\", key_blob_full, comment)\n\n    def start_agent(self, sock_path):\n        self.sock_path = sock_path\n        if os.path.exists(self.sock_path):\n            os.remove(self.sock_path)\n\n        self.server_sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n        self.server_sock.bind(self.sock_path)\n        self.server_sock.listen(5)\n\n        os.environ['SSH_AUTH_SOCK'] = self.sock_path\n        self.running.set()\n\n        self.agent_thread = threading.Thread(target=self._accept_connections, daemon=True)\n        self.agent_thread.start()\n\n    def _accept_connections(self):\n        while self.running.is_set():\n            try:\n                client_sock, _ = self.server_sock.accept()\n                self._handle_client(client_sock)\n            except Exception as e:\n                print(f\"Error accepting connection: {e}\")\n\n    def _handle_client(self, client_sock):\n        try:\n            length_message = client_sock.recv(4)\n            if not length_message:\n                raise \"no length message received\"\n\n            msg_len = struct.unpack(\">I\", length_message)[0]\n            request_message = client_sock.recv(msg_len)\n\n            if request_message[0] == STOP_REQUEST:\n                client_sock.close()\n                self.running.clear()\n                return\n\n            if request_message[0] == SSH_AGENTC_REQUEST_IDENTITIES:\n                response = self._mock_list_keys_response()\n                client_sock.sendall(response)\n            else:\n                response = struct.pack(\">I\", 1) + struct.pack(\">B\", SSH_AGENT_FAILURE)\n                client_sock.sendall(response)\n\n        except socket.error:\n            pass\n        finally:\n            client_sock.close()\n\n    def _mock_list_keys_response(self):\n        response = struct.pack(\">B\", SSH_AGENT_IDENTITIES_ANSWER)\n        response += struct.pack(\">I\", len(self.keys))\n\n        for key_type, key_blob, comment in self.keys:\n            response += struct.pack(\">I\", len(key_blob)) + key_blob\n            comment_encoded = comment.encode()\n            response += struct.pack(\">I\", len(comment_encoded)) + comment_encoded\n\n        response = struct.pack(\">I\", len(response)) + response\n        return response\n\n    def stop_agent(self):\n        if self.running.is_set():\n            with socket.socket(socket.AF_UNIX, socket.SOCK_STREAM) as client_sock:\n                client_sock.connect(self.sock_path)\n                stop_command = struct.pack(\">B\", STOP_REQUEST)\n                message_length = struct.pack(\">I\", len(stop_command))\n                client_sock.sendall(message_length)\n                client_sock.sendall(stop_command)\n\n            self.running.clear()\n\n            if self.agent_thread:\n                self.agent_thread.join()\n                self.agent_thread = None\n\n            if self.server_sock:\n                self.server_sock.close()\n                os.remove(self.sock_path)",
    "Code_level": "Class-level",
    "FSMID_for_test": 66,
    "right_result": "```python\nimport socket\nimport threading\nimport os\nfrom cryptography.hazmat.primitives import serialization\nfrom cryptography.hazmat.primitives.asymmetric import ed25519\n\nclass MockSSHAgent:\n    def __init__(self, sock_path: str):\n        self.sock_path = sock_path\n        self.server_sock = None\n        self.running = threading.Event()\n        self.keys = []\n        self.agent_thread = None\n\n    def _load_ed25519_private_key(self, private_key_path: str) -> tuple:\n        with open(private_key_path, 'rb') as key_file:\n            private_key = serialization.load_pem_private_key(\n                key_file.read(),\n                password=None\n            )\n        key_type = 'ed25519'\n        key_blob = private_key.private_bytes(\n            encoding=serialization.Encoding.PEM,\n            format=serialization.PrivateFormat.TraditionalOpenSSL,\n            encryption_algorithm=serialization.NoEncryption()\n        )\n        comment = 'Mock SSH Agent Key'\n        return key_type, key_blob, comment\n\n    def start_agent(self, sock_path: str) -> None:\n        self.sock_path = sock_path\n        self.server_sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n        self.server_sock.bind(self.sock_path)\n        self.server_sock.listen()\n        os.environ['SSH_AUTH_SOCK'] = self.sock_path\n        self.running.set()\n        self.agent_thread = threading.Thread(target=self._accept_connections)\n        self.agent_thread.start()\n\n    def _accept_connections(self) -> None:\n        while self.running.is_set():\n            client_sock, _ = self.server_sock.accept()\n            threading.Thread(target=self._handle_client, args=(client_sock,)).start()\n\n    def _handle_client(self, client_sock: socket.socket) -> None:\n        while self.running.is_set():\n            data = client_sock.recv(1024)\n            if not data:\n                break\n            request_type = data[0]\n            if request_type == 1:  # SSH_AGENTC_REQUEST_IDENTITIES\n                response = self._mock_list_keys_response()\n                client_sock.sendall(response)\n            client_sock.close()\n\n    def _mock_list_keys_response(self) -> bytes:\n        return b'\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00'\n\n    def stop_agent(self) -> None:\n        self.running.clear()\n        if self.server_sock:\n            self.server_sock.close()\n        os.remove(self.sock_path)\n```"
  },
  {
    "Task_id": 379,
    "Instruction": "Task Description: Implement a TCP communication class to facilitate data exchange between a Python server and a Godot client using JSON format for message serialization.\n\nClass Description: GodotTCPCommunicator is a TCP server implementation that handles communication with a Godot client. It establishes a connection, sends/receives JSON-formatted messages, and manages the connection lifecycle.\n\nAttributes:\n- port: int - The port number on which the server listens for connections (default: 11008)\n- connection: socket.socket - The active TCP connection with the client\n- DEFAULT_PORT: int - Class constant for default port (11008)\n- DEFAULT_TIMEOUT: int - Class constant for default timeout in seconds (60)\n\nMethods:\n- __init__(port: int = DEFAULT_PORT) -> None - Initializes the communicator with specified port and starts the server\n- _start_server() -> socket.socket - Creates and configures TCP socket, binds to localhost, listens for and accepts connection\n- _send_as_json(dictionary: Dict[str, Any]) -> None - Serializes dictionary to JSON and sends it to client\n- _get_json_dict() -> Dict[str, Any] - Receives data from client and deserializes JSON to dictionary\n- _get_data() -> Optional[str] - Receives raw string data from client with length-prefix protocol\n- _send_string(string: str) -> None - Sends string to client with length-prefix protocol\n- close() -> None - Closes the active connection",
    "Canonical_solution": "import socket\nimport json\nfrom typing import Optional, Dict, Any\nimport numpy as np\n\nclass GodotTCPCommunicator:\n    DEFAULT_PORT = 11008\n    DEFAULT_TIMEOUT = 60\n\n    def __init__(self, port: int = DEFAULT_PORT):\n        self.port = port\n        self.connection = self._start_server()\n\n    def _start_server(self):\n        print(f\"waiting for remote GODOT connection on port {self.port}\")\n        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        server_address = (\"127.0.0.1\", self.port)\n        sock.bind(server_address)\n        sock.listen(1)\n        sock.settimeout(self.DEFAULT_TIMEOUT)\n        connection, client_address = sock.accept()\n        print(\"connection established\")\n        return connection\n\n    def _send_as_json(self, dictionary: Dict[str, Any]):\n        message_json = json.dumps(dictionary)\n        self._send_string(message_json)\n\n    def _get_json_dict(self) -> Dict[str, Any]:\n        data = self._get_data()\n        return json.loads(data)\n\n    def _get_data(self) -> Optional[str]:\n        try:\n            string_size_bytes = bytearray()\n            received_length = 0\n            length = 4\n\n            while received_length < length:\n                data = self.connection.recv(length - received_length)\n                received_length += len(data)\n                string_size_bytes.extend(data)\n\n            length = int.from_bytes(string_size_bytes, \"little\")\n\n            string_bytes = bytearray()\n            received_length = 0\n\n            while received_length < length:\n                data = self.connection.recv(length - received_length)\n                received_length += len(data)\n                string_bytes.extend(data)\n\n            return string_bytes.decode()\n        except socket.timeout as e:\n            print(\"env timed out\", e)\n            return None\n\n    def _send_string(self, string: str):\n        message = len(string).to_bytes(4, \"little\") + bytes(string.encode())\n        self.connection.sendall(message)\n\n    def close(self):\n        self.connection.close()",
    "Code_level": "Class-level",
    "FSMID_for_test": 66,
    "right_result": "```python\nimport socket\nimport json\nfrom typing import Dict, Any, Optional\n\nclass GodotTCPCommunicator:\n    DEFAULT_PORT = 11008\n    DEFAULT_TIMEOUT = 60\n\n    def __init__(self, port: int = DEFAULT_PORT) -> None:\n        self.port = port\n        self.connection = None\n        self._start_server()\n\n    def _start_server(self) -> socket.socket:\n        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:\n            s.bind(('localhost', self.port))\n            s.listen()\n            s.settimeout(self.DEFAULT_TIMEOUT)\n            self.connection, _ = s.accept()\n            return self.connection\n\n    def _send_as_json(self, dictionary: Dict[str, Any]) -> None:\n        json_data = json.dumps(dictionary)\n        self._send_string(json_data)\n\n    def _get_json_dict(self) -> Dict[str, Any]:\n        data = self._get_data()\n        return json.loads(data)\n\n    def _get_data(self) -> Optional[str]:\n        length = self._get_length()\n        if length is None:\n            return None\n        return self.connection.recv(length).decode()\n\n    def _get_length(self) -> Optional[int]:\n        try:\n            length = int(self.connection.recv(4).decode())\n            return length\n        except ValueError:\n            return None\n\n    def _send_string(self, string: str) -> None:\n        length = len(string)\n        self.connection.sendall(f\"{length:04d}\".encode())\n        self.connection.sendall(string.encode())\n\n    def close(self) -> None:\n        self.connection.close()\n```"
  },
  {
    "Task_id": 381,
    "Instruction": "Task Description: Create a TCP server class that can handle incoming client connections, receive data from clients in a line-based and length-prefixed format, and process the received data in a separate thread.\n\nClass Description: BaseSocket is a TCP server implementation that listens for incoming connections, receives data from clients, and queues the received data for processing. It uses threading to handle connections asynchronously and provides methods for data reception and processing.\n\nAttributes:\nserversocket: [socket.socket] - TCP socket object for server operations\nqueue: [Queue] - Thread-safe queue for storing received data\nt: [Thread] - Thread object for running the server's main loop\ndebug: [bool] - Flag for enabling debug mode\ndisconnect: [bool] - Flag indicating client disconnection status\n\nMethods:\n__init__: [host: str, port: int, debug: bool = False] -> None - Initializes the TCP server, binds to the specified host and port, and starts the server thread\nrecvLine: [sock: socket.socket] -> Tuple[bool, str] - Static method that receives a line of data ending with newline character from a socket\nrecvAll: [sock: socket.socket, l: str] -> str - Static method that receives exact number of bytes specified by length parameter l from a socket\nrun: [] -> None - Main server loop that accepts connections and receives data from clients\nupdate: [] -> None - Processes queued data by calling the main method\nmain: [datas: str] -> None - Placeholder method for processing received data (should be overridden by subclasses)\n__del__: [] -> None - Cleanup method that closes the server socket and joins the thread",
    "Canonical_solution": "import socket\nimport time\nfrom threading import Thread\nfrom queue import Queue\n\nclass BaseSocket:\n    def __init__(self, host, port, debug=False) -> None:\n        self.serversocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.serversocket.bind((host, port))\n        self.serversocket.listen(1)\n        self.queue = Queue()\n        self.t = Thread(target=self.run)\n        self.t.start()\n        self.debug = debug\n        self.disconnect = False\n    \n    @staticmethod\n    def recvLine(sock):\n        flag = True\n        result = b''\n        while not result.endswith(b'\\n'):\n            res = sock.recv(1)\n            if not res:\n                flag = False\n                break\n            result += res\n        return flag, result.strip().decode('ascii')\n\n    @staticmethod\n    def recvAll(sock, l):\n        l = int(l)\n        result = b''\n        while (len(result) < l):\n            t = sock.recv(l - len(result))\n            result += t\n        return result.decode('ascii')\n\n    def run(self):\n        while True:\n            clientsocket, addr = self.serversocket.accept()\n            self.disconnect = False\n            while True:\n                flag, l = self.recvLine(clientsocket)\n                if not flag:\n                    self.disconnect = True\n                    break\n                data = self.recvAll(clientsocket, l)\n                self.queue.put(data)\n            clientsocket.close()\n    \n    def update(self):\n        time.sleep(1)\n        while not self.queue.empty():\n            data = self.queue.get()\n            self.main(data)\n    \n    def main(self, datas):\n        pass\n\n    def __del__(self):\n        self.serversocket.close()\n        self.t.join()",
    "Code_level": "Class-level",
    "FSMID_for_test": 66,
    "right_result": "```python\nimport socket\nimport threading\nimport queue\n\nclass BaseSocket:\n    def __init__(self, host: str, port: int, debug: bool = False) -> None:\n        self.serversocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.serversocket.bind((host, port))\n        self.serversocket.listen()\n        self.queue = queue.Queue()\n        self.t = threading.Thread(target=self.run)\n        self.debug = debug\n        self.disconnect = False\n        self.t.start()\n\n    @staticmethod\n    def recvLine(sock: socket.socket) -> tuple[bool, str]:\n        data = b''\n        while True:\n            part = sock.recv(1)\n            if not part:\n                return False, ''\n            data += part\n            if part.decode() == '\\n':\n                return True, data.decode().strip()\n\n    @staticmethod\n    def recvAll(sock: socket.socket, l: str) -> str:\n        data = b''\n        while len(data) < int(l):\n            part = sock.recv(int(l) - len(data))\n            if not part:\n                return ''\n            data += part\n        return data.decode()\n\n    def run(self) -> None:\n        while not self.disconnect:\n            conn, addr = self.serversocket.accept()\n            threading.Thread(target=self.handleConnection, args=(conn,)).start()\n\n    def handleConnection(self, conn: socket.socket) -> None:\n        while True:\n            success, data = BaseSocket.recvLine(conn)\n            if not success:\n                break\n            self.queue.put(data)\n        self.disconnect = True\n        conn.close()\n\n    def update(self) -> None:\n        while not self.queue.empty():\n            data = self.queue.get()\n            self.main(data)\n\n    def main(self, datas: str) -> None:\n        pass\n\n    def __del__(self) -> None:\n        self.disconnect = True\n        self.serversocket.close()\n        self.t.join()\n```"
  },
  {
    "Task_id": 383,
    "Instruction": "Task Description: Implement a TCP server in Python that listens for incoming client connections, accepts a connection, and provides functionality to send messages to the connected client.\n\nFunction Description: The code consists of two functions: `receive_connection` and `send_message`. The `receive_connection` function creates a TCP socket, binds it to a specified port, listens for incoming connections, and returns the connected client socket. The `send_message` function sends a message to the connected client and closes the connection.\n\nInput: \n- `receive_connection`: None\n- `send_message`: \n  - `client`: socket.socket - The connected client socket\n  - `message`: str (optional) - The message to send to the client (default is an empty string)\n\nOutput: \n- `receive_connection`: socket.socket - The connected client socket\n- `send_message`: None",
    "Canonical_solution": "import socket\nimport logging\n\nlogger = logging.getLogger(__name__)\n\ndef receive_connection() -> socket.socket:\n    server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    server.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n    server.bind((\"0.0.0.0\", 7634))\n    logger.log(9, \"Server listening on 0.0.0.0:7634\")\n\n    server.listen(1)\n    client = server.accept()[0]\n    server.close()\n    logger.log(9, \"Server closed\")\n\n    return client\n\ndef send_message(client: socket.socket, message: str = \"\"):\n    client.send(f\"HTTP/1.1 200 OK\\r\\n\\r\\n{message}\".encode(\"utf-8\"))\n    client.close()",
    "Code_level": "Function-level",
    "FSMID_for_test": 66,
    "right_result": "```python\nimport socket\n\ndef receive_connection():\n    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    server_socket.bind(('localhost', 12345))\n    server_socket.listen(1)\n    client_socket, addr = server_socket.accept()\n    server_socket.close()\n    return client_socket\n\ndef send_message(client, message=''):\n    client.sendall(message.encode())\n    client.close()\n```"
  },
  {
    "Task_id": 384,
    "Instruction": "Task Description: Implement a TCP server class that receives OAuth tokens through a local socket connection, handling the incoming HTTP request and extracting the authorization code or error message.\n\nClass Description: OAuthTokenReceiver is a class that creates a TCP server to listen for OAuth token responses on a specified local port. It handles the HTTP response, extracts the authorization code, and manages error cases.\n\nAttributes:\nport: int - The local port number on which the server will listen for incoming OAuth token responses (default: 31337)\n\nMethods:\nreceive_oauth_token: receive_oauth_token() -> str - Listens for an incoming connection, receives the OAuth token response, sends an HTTP success response, and returns the extracted authorization code. Raises an exception if the response contains an error description.",
    "Canonical_solution": "import socket\nimport re\nimport urllib.parse\n\nclass OAuthTokenReceiver:\n    def __init__(self, port=31337):\n        self.port = port\n\n    def receive_oauth_token(self):\n        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        sock.bind(('127.0.0.1', self.port))\n        sock.listen(1)\n        conn, addr = sock.accept()\n        data = conn.recv(1024)\n        conn.sendall('HTTP/1.1 200 OK\\r\\nContent-Type: text/html\\r\\n\\r\\n<html><head><title>Recon-ng</title></head><body>Response received. Return to Recon-ng.</body></html>')\n        conn.close()\n        \n        if 'error_description' in data:\n            error = urllib.parse.unquote_plus(re.search(r'error_description=([^\\s&]*)', data).group(1))\n            raise Exception(error)\n        \n        authorization_code = re.search(r'code=([^\\s&]*)', data).group(1)\n        return authorization_code",
    "Code_level": "Class-level",
    "FSMID_for_test": 66,
    "right_result": "```python\nimport socket\n\nclass OAuthTokenReceiver:\n    def __init__(self, port=31337):\n        self.port = port\n        self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.server_socket.bind(('', self.port))\n        self.server_socket.listen()\n\n    def receive_oauth_token(self):\n        client_socket, client_address = self.server_socket.accept()\n        request = client_socket.recv(1024).decode()\n        client_socket.close()\n        response = self.parse_request(request)\n        if response.startswith('Error'):\n            raise Exception(response)\n        return response\n\n    def parse_request(self, request):\n        lines = request.split('\\n')\n        for line in lines:\n            if line.startswith('Authorization code:'):\n                return line.split(':')[1].strip()\n            elif line.startswith('Error:'):\n                return line.split(':')[1].strip()\n        return 'Error: No authorization code or error found'\n```"
  },
  {
    "Task_id": 385,
    "Instruction": "Task Description: Implement a TCP server and client system in Python using socket programming for handling multiple client connections and echoing received data back to clients.\n\nClass Description: \n\nTCPServer:\nA TCP server class that listens for incoming connections and manages client handlers. It uses socket programming to establish connections and delegates client communication to handler objects.\n\nAttributes:\n- sock: [socket.socket] - The TCP socket object for server operations\n- client_handler: [class] - The handler class to instantiate for each new client\n- handler_list: [list] - List of active client handlers\n\nMethods:\n- __init__(address, client_handler, handler_list) -> [None] - Initializes the server socket, binds to address, and starts listening\n- fileno() -> [int] - Returns the socket's file descriptor for polling\n- wants_to_receive() -> [bool] - Always returns True indicating readiness to accept connections\n- handle_receive() -> [None] - Accepts new connections and adds client handlers to the list\n\nTCPClient:\nBase class for client handlers providing common socket operations and management.\n\nAttributes:\n- sock: [socket.socket] - The client socket object\n- handler_list: [list] - Reference to the server's handler list\n- outgoing: [bytearray] - Buffer for data to be sent\n\nMethods:\n- __init__(sock, handler_list) -> [None] - Initializes client handler with socket and handler list\n- fileno() -> [int] - Returns the socket's file descriptor\n- close() -> [None] - Closes the socket and removes handler from list\n- wants_to_send() -> [bool] - Returns True if there's data to send\n- handle_send() -> [None] - Sends data from outgoing buffer\n\nTCPEchoClient:\nA TCP client handler that echoes received data back to the client.\n\nMethods:\n- wants_to_receive() -> [bool] - Always returns True indicating readiness to receive\n- handle_receive() -> [None] - Receives data and queues it for echoing back, closes connection on empty data",
    "Canonical_solution": "import socket\n\nclass TCPServer:\n    def __init__(self, address, client_handler, handler_list):\n        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, True)\n        self.sock.bind(address)\n        self.sock.listen(1)\n        self.client_handler = client_handler\n        self.handler_list = handler_list\n\n    def fileno(self):\n        return self.sock.fileno()\n\n    def wants_to_receive(self):\n        return True\n\n    def handle_receive(self):\n        client, addr = self.sock.accept()\n        self.handler_list.append(self.client_handler(client, self.handler_list))\n\nclass TCPClient:\n    def __init__(self, sock, handler_list):\n        self.sock = sock\n        self.handler_list = handler_list\n        self.outgoing = bytearray()\n\n    def fileno(self):\n        return self.sock.fileno()\n\n    def close(self):\n        self.sock.close()\n        self.handler_list.remove(self)\n        \n    def wants_to_send(self):\n        return True if self.outgoing else False\n\n    def handle_send(self):\n        nsent = self.sock.send(self.outgoing)\n        self.outgoing = self.outgoing[nsent:]\n\nclass TCPEchoClient(TCPClient):\n    def wants_to_receive(self):\n        return True\n    \n    def handle_receive(self):\n        data = self.sock.recv(8192)\n        if not data:\n            self.close()\n        else:\n            self.outgoing.extend(data)",
    "Code_level": "Class-level",
    "FSMID_for_test": 66,
    "right_result": "```python\nimport socket\nimport select\nimport threading\n\nclass TCPServer:\n    def __init__(self, address, client_handler, handler_list):\n        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        self.sock.bind(address)\n        self.sock.listen(5)\n        self.client_handler = client_handler\n        self.handler_list = handler_list\n\n    def fileno(self):\n        return self.sock.fileno()\n\n    def wants_to_receive(self):\n        return True\n\n    def handle_receive(self):\n        conn, addr = self.sock.accept()\n        handler = self.client_handler(conn, self.handler_list)\n        handler_list.append(handler)\n        handler.start()\n\nclass TCPClient(threading.Thread):\n    def __init__(self, sock, handler_list):\n        threading.Thread.__init__(self)\n        self.sock = sock\n        self.handler_list = handler_list\n        self.outgoing = bytearray()\n\n    def fileno(self):\n        return self.sock.fileno()\n\n    def close(self):\n        self.sock.close()\n        self.handler_list.remove(self)\n\n    def wants_to_send(self):\n        return len(self.outgoing) > 0\n\n    def handle_send(self):\n        if self.outgoing:\n            self.sock.send(self.outgoing)\n            self.outgoing.clear()\n\nclass TCPEchoClient(TCPClient):\n    def wants_to_receive(self):\n        return True\n\n    def handle_receive(self):\n        data = self.sock.recv(1024)\n        if data:\n            self.outgoing.extend(data)\n        else:\n            self.close()\n```"
  },
  {
    "Task_id": 386,
    "Instruction": "Task Description: Implement a TCP server that handles client connections, processes incoming data, and interacts with a teamserver through HTTP requests. The server should be able to read and write data based on client requests.\n\nFunction Description: The function `cc2_tcp_server` creates a TCP server that listens for client connections on a specified port. It processes incoming messages to either read data from or write data to a teamserver via HTTP requests. The server handles each client connection in a loop, processing the data and closing the connection afterward.\n\nInput: None (The function binds to a hardcoded IP address and port, and processes incoming client connections.)\n\nOutput: None (The function sends responses to clients but does not return any value.)\n\n---\n\nTask Description: Implement helper functions to support the TCP server's operations, including reading from and writing to a teamserver, parsing raw data, and extracting beacon data.\n\nFunction Description: The function `read_cs_teamserver` sends an HTTP GET request to a teamserver with metadata and extracts beacon data from the response. The function `write_cs_teamserver` sends an HTTP POST request to a teamserver with metadata. The function `parseRawData` splits raw data into a beacon ID and metadata. The function `find_beacon_data` extracts beacon data from a string based on prefix and suffix markers.\n\nInput:\n- `read_cs_teamserver`: `metadata` (str) - The metadata to include in the HTTP GET request.\n- `write_cs_teamserver`: `id` (str) - The beacon ID to include in the HTTP POST request URL; `metadata` (str) - The metadata to include in the HTTP POST request body.\n- `parseRawData`: `rawData` (str) - The raw data string to parse.\n- `find_beacon_data`: `prefix` (str) - The prefix marker for beacon data; `suffix` (str) - The suffix marker for beacon data; `data` (str) - The string to search for beacon data.\n\nOutput:\n- `read_cs_teamserver`: `beacon_data` (str) - The extracted beacon data from the HTTP response.\n- `write_cs_teamserver`: None (The function sends an HTTP POST request but does not return any value.)\n- `parseRawData`: `bid` (str) - The extracted beacon ID; `metadata` (str) - The extracted metadata.\n- `find_beacon_data`: `beacon_data` (str) - The extracted beacon data, or an empty string if not found.",
    "Canonical_solution": "import socket\nimport requests\n\ndef cc2_tcp_server():\n    sockobj = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    sockobj.setsockopt(socket.SOL_SOCKET,socket.SO_REUSEADDR, 1)\n    sockobj.bind(('127.0.0.1', 7777))\n    sockobj.listen(1000)\n\n    while True:\n        connection, address = sockobj.accept()\n        msgHeader = connection.recv(7)\n        if msgHeader == 'read|||':\n            data = connection.recv(10024)\n            metadata = read_cs_teamserver(data)\n            if len(metadata) > 0:\n                connection.send(metadata)\n        elif msgHeader == 'write||':\n            rawData = connection.recv(10024)\n            bid, metadata = parseRawData(rawData)\n            if len(metadata) > 0 and len(bid) > 0:\n                write_cs_teamserver(bid, metadata)\n        connection.close()\n\ndef read_cs_teamserver(metadata):\n    headers = { \"HOST\": \"www.google.com\",\n                \"Referer\": \"http://www.google.com/\",\n                \"Accept\": \"accccccc\",\n                \"User-Agent\": \"cc2_rebind_protocol_get_send\",\n                \"Cookie\": \"SESSION={}\".format(metadata),\n                \"Connection\": \"cc2_rebind_protocol_get_send\"\n    }\n    res = requests.get(\"http://127.0.0.1:443/aaaaaaaaa\", headers=headers)\n    start = \"ffffffff1\"\n    end = \"eeeeeeee2\"\n    beacon_data = find_beacon_data(start, end, res.content)\n    return beacon_data\n\ndef write_cs_teamserver(id, metadata):\n    headers = { \"HOST\": \"www.google.com\",\n                \"Referer\": \"http://www.google.com/\",\n                \"Accept\": \"accccccc\",\n                \"User-Agent\": \"cc2_rebind_protocol_post_send\",\n                \"Connection\": \"keep-alive\",\n                \"Content-Length\": \"{}\".format(len(metadata))\n    }\n    res = requests.post(\"http://127.0.0.1:443/bbbbbbbbb?SESSION={}\".format(id), headers=headers, data=metadata)\n\ndef parseRawData(rawData):\n    split = '->|<-'\n    split_index = rawData.find(split)\n    bid = rawData[:split_index]\n    metadata = rawData[len(split)+split_index:]\n    return bid,metadata\n\ndef find_beacon_data(prefix, suffix, data):\n    s_index = data.find(prefix) + 1\n    s_end = data.find(suffix)\n    beacon_data = ''\n    if (s_index > 0 and s_end > 0 and (s_index + len(prefix) + 1) != s_end:\n        beacon_data = data[s_index + len(prefix):s_end]\n    return beacon_data",
    "Code_level": "Function-level",
    "FSMID_for_test": 66,
    "right_result": "```python\nimport socket\nimport threading\nimport requests\n\ndef cc2_tcp_server():\n    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    server_socket.bind(('127.0.0.1', 12345))\n    server_socket.listen(5)\n    print(\"Server is listening for connections...\")\n    while True:\n        client_socket, addr = server_socket.accept()\n        print(f\"Connected to {addr}\")\n        threading.Thread(target=handle_client, args=(client_socket,)).start()\n\ndef handle_client(client_socket):\n    while True:\n        data = client_socket.recv(1024)\n        if not data:\n            break\n        response = process_data(data.decode())\n        client_socket.sendall(response.encode())\n    client_socket.close()\n\ndef process_data(data):\n    # Parse data and interact with teamserver\n    bid, metadata = parseRawData(data)\n    beacon_data = find_beacon_data(metadata, 'BEACON_START', 'BEACON_END')\n    if bid:\n        write_cs_teamserver(bid, beacon_data)\n    return \"Data processed\"\n\ndef read_cs_teamserver(metadata):\n    response = requests.get(f'http://teamserver.com?metadata={metadata}')\n    return find_beacon_data(response.text, 'BEACON_START', 'BEACON_END')\n\ndef write_cs_teamserver(id, metadata):\n    requests.post(f'http://teamserver.com/{id}', data={'metadata': metadata})\n\ndef parseRawData(rawData):\n    # Split raw data into beacon ID and metadata\n    return 'bid', 'metadata'\n\ndef find_beacon_data(prefix, suffix, data):\n    # Extract beacon data from a string\n    start = data.find(prefix)\n    end = data.find(suffix, start + len(prefix))\n    if start != -1 and end != -1:\n        return data[start + len(prefix):end]\n    return ''\n```"
  },
  {
    "Task_id": 388,
    "Instruction": "Task Description: Create a Python class that implements a simple network server capable of handling TCP, UDP, and raw socket connections. The server should be able to bind to an available port, receive data from clients, and optionally send a predefined response.\n\nClass Description: The MiniTestServer class provides a configurable network server implementation supporting multiple protocols (TCP, UDP, raw). It can operate in silent mode (receive-only) or respond to clients with predefined data. The server automatically binds to an available port and handles one connection at a time.\n\nAttributes:\n- server_socket: [socket.socket] - The active server socket object\n- received: [bytes] - Data received from the client\n- data_to_send: [bytes] - Predefined data to send to clients (default: b\"\\xfe\\xeb\\xda\\xed\")\n- active_port: [int] - The port number the server is currently bound to\n- stay_silent: [bool] - If True, server won't send responses to clients\n- proto: [str] - Protocol type ('tcp', 'udp', or 'raw')\n- host: [str] - Host address to bind to (default: '0.0.0.0')\n- timeout: [int] - Socket timeout in seconds (default: 5)\n\nMethods:\n- __init__(stay_silent=False, proto=\"tcp\", host=\"0.0.0.0\") -> None - Initializes the server with optional parameters for silent mode, protocol type, and host address\n- bind() -> None - Creates and binds the server socket according to the specified protocol, assigns a random available port\n- serve_once() -> None - Handles one client interaction: accepts connection (TCP), receives data, optionally sends response, then closes the connection",
    "Canonical_solution": "import socket\nimport threading\nimport logging\n\nclass MiniTestServer:\n    def __init__(self, stay_silent=False, proto=\"tcp\", host=\"0.0.0.0\"):\n        self.server_socket = None\n        self.received = None\n        self.data_to_send = b\"\\xfe\\xeb\\xda\\xed\"\n        self.active_port = None\n        self.stay_silent = stay_silent\n        self.proto = proto\n        self.host = host\n        self.timeout = 5\n\n    def bind(self):\n        if self.proto == \"tcp\":\n            self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        elif self.proto == \"udp\":\n            self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n        elif self.proto == \"raw\":\n            self.server_socket = socket.socket(socket.AF_PACKET, socket.SOCK_RAW, socket.ntohs(ETH_P_ALL))\n        else:\n            raise Exception(\"Invalid protocol type: '{0}'\".format(self.proto))\n\n        self.server_socket.bind((self.host, 0))\n        self.active_port = self.server_socket.getsockname()[1]\n\n        if self.proto == \"tcp\":\n            self.server_socket.listen(1)\n\n    def serve_once(self):\n        self.server_socket.settimeout(self.timeout)\n\n        if self.proto == \"tcp\":\n            (client_socket, address) = self.server_socket.accept()\n            client_socket.settimeout(self.timeout)\n            self.received = client_socket.recv(10000)\n\n            if not self.stay_silent:\n                client_socket.send(self.data_to_send)\n\n            client_socket.close()\n        elif self.proto == \"udp\":\n            data, addr = self.server_socket.recvfrom(1024)\n            self.received = data\n            if not self.stay_silent:\n                self.server_socket.sendto(self.data_to_send, addr)\n        elif self.proto == \"raw\":\n            data, addr = self.server_socket.recvfrom(10000)\n            self.received = data\n            if not self.stay_silent:\n                self.server_socket.sendto(self.data_to_send, addr)\n        else:\n            raise Exception(\"Invalid protocol type: '{0}'\".format(self.proto))\n\n        self.server_socket.close()\n        self.server_socket = None\n        self.active_port = None",
    "Code_level": "Class-level",
    "FSMID_for_test": 66,
    "right_result": "```python\nimport socket\nimport select\nimport os\nimport sys\nimport struct\n\nclass MiniTestServer:\n    def __init__(self, stay_silent=False, proto=\"tcp\", host=\"0.0.0.0\"):\n        self.server_socket = None\n        self.received = b\"\"\n        self.data_to_send = b\"\\xfe\\xeb\\xda\\xed\"\n        self.active_port = 0\n        self.stay_silent = stay_silent\n        self.proto = proto\n        self.host = host\n        self.timeout = 5\n\n    def bind(self):\n        if self.proto == \"tcp\":\n            self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n            self.server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        elif self.proto == \"udp\":\n            self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n        elif self.proto == \"raw\":\n            self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_RAW, socket.IPPROTO_RAW)\n        else:\n            raise ValueError(\"Unsupported protocol\")\n        self.server_socket.bind((self.host, 0))\n        self.active_port = self.server_socket.getsockname()[1]\n\n    def serve_once(self):\n        if self.proto == \"tcp\":\n            self.server_socket.listen(1)\n            conn, addr = self.server_socket.accept()\n            self.received = conn.recv(1024)\n            if not self.stay_silent:\n                conn.send(self.data_to_send)\n            conn.close()\n        elif self.proto == \"udp\":\n            self.received = self.server_socket.recvfrom(1024)\n            if not self.stay_silent:\n                self.server_socket.sendto(self.data_to_send, self.received[1])\n        elif self.proto == \"raw\":\n            self.received = self.server_socket.recvfrom(1024)\n            if not self.stay_silent:\n                self.server_socket.sendto(self.data_to_send, self.received[1])\n        else:\n            raise ValueError(\"Unsupported protocol\")\n```"
  },
  {
    "Task_id": 390,
    "Instruction": "Task Description: Implement a TCP server handler class that manages client connections, receives data from clients, and sends commands to connected clients in a threaded environment.\n\nClass Description: TCPHandler is a threaded TCP server that listens on a specified port, accepts client connections, and facilitates bidirectional communication between the server and client. It runs in a separate thread to maintain responsiveness while handling client connections.\n\nAttributes:\n- connected: bool - Indicates whether a client is currently connected\n- port: int - The port number on which the server listens for connections\n- socket: socket.socket - The TCP socket object for server operations\n- client: socket.socket - The client socket object for an active connection\n\nMethods:\n- __init__(port: int) -> None - Initializes the TCP server thread with the specified port\n- run() -> None - Main thread method that binds the socket, listens for connections, and handles incoming data (overrides threading.Thread.run)\n- listen_command() -> None - Listens for user input from the server console and processes commands\n- send_command(cmd: str) -> None - Sends a command string to the connected client\n- kill() -> None - Closes the client connection and server socket cleanly",
    "Canonical_solution": "import socket\nimport threading\nimport logging\n\nclass TCPHandler(threading.Thread):\n    def __init__(self, port):\n        threading.Thread.__init__(self)\n        logging.info(f\"Handler listening on 0.0.0.0:{port}\")\n        self.connected = False\n        self.port = int(port)\n        self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\n    def run(self):\n        self.socket.bind(('', self.port))\n        self.socket.listen(5)\n        \n        while True:\n            self.client, address = self.socket.accept()\n            print(f\"Handler> New session from {address[0]}\")\n            self.connected = True\n\n            response = self.client.recv(255)\n            while response != b\"\":\n                print(f\"\\n{response.decode('utf_8', 'ignore').strip()}\\nShell > $ \", end='')\n                response = self.client.recv(255)\n\n    def listen_command(self):\n        if self.connected == True:\n            cmd = input(\"Shell> $ \")\n            if cmd == \"exit\":\n                self.kill()\n                print(\"BYE !\")\n                exit()\n            self.send_command(cmd+\"\\n\\n\")\n\n    def send_command(self, cmd):\n        if self.connected:\n            self.client.sendall(cmd.encode())\n\n    def kill(self):\n        if hasattr(self, 'client'):\n            self.client.close()\n        self.socket.close()",
    "Code_level": "Class-level",
    "FSMID_for_test": 66,
    "right_result": "```python\nimport socket\nimport threading\n\nclass TCPHandler(threading.Thread):\n    def __init__(self, port: int) -> None:\n        super().__init__()\n        self.connected = False\n        self.port = port\n        self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.client = None\n\n    def run(self) -> None:\n        self.socket.bind(('', self.port))\n        self.socket.listen()\n        print(f\"Server listening on port {self.port}\")\n        while True:\n            conn, addr = self.socket.accept()\n            self.client = conn\n            self.connected = True\n            print(f\"Connected by {addr}\")\n            self.handle_client()\n\n    def listen_command(self) -> None:\n        while self.connected:\n            cmd = input()\n            if cmd == 'exit':\n                self.kill()\n                break\n            self.send_command(cmd)\n\n    def send_command(self, cmd: str) -> None:\n        if self.connected:\n            self.client.send(cmd.encode())\n\n    def kill(self) -> None:\n        if self.connected:\n            self.client.close()\n            self.socket.close()\n            self.connected = False\n\n    def handle_client(self) -> None:\n        while self.connected:\n            data = self.client.recv(1024)\n            if not data:\n                self.kill()\n                break\n            print(f\"Received: {data.decode()}\")\n        self.kill()\n```"
  },
  {
    "Task_id": 391,
    "Instruction": "Task Description: Create a Python class that implements a basic HTTP server using TCP sockets to handle client connections, process HTTP requests, and send responses.\n\nClass Description: HTTPOutput is a class that provides functionality to create a TCP server, accept client connections, handle HTTP requests, and send responses. It includes methods for server management and HTTP protocol handling.\n\nAttributes:\n- host: str | None - The host address to bind the server to (default: \"127.0.0.1\")\n- port: int - The port number to bind the server to (default: 0 for auto-selection)\n- conn: socket.socket | None - The active client connection socket\n- socket: socket.socket - The server socket\n- request: HTTPRequest | None - The parsed HTTP request object\n\nMethods:\n- addresses() -> list[str] - Property that returns available IP addresses for binding\n- urls() -> Generator[str, None, None] - Property that generates accessible URLs for the server\n- start_server() -> None - Creates and configures the server socket, binds it, and starts listening\n- accept_connection(timeout: int = 30) -> None - Accepts an incoming client connection with optional timeout\n- _open() -> None - Internal method to handle HTTP request parsing and initial response\n- _write(data: bytes) -> None - Sends data to the connected client\n- _close() -> None - Closes the current client connection\n- shutdown() -> None - Properly shuts down the server and cleans up resources",
    "Canonical_solution": "import socket\nfrom contextlib import suppress\nfrom http.server import BaseHTTPRequestHandler\nfrom io import BytesIO\n\nclass HTTPRequest(BaseHTTPRequestHandler):\n    def __init__(self, request_text):\n        self.rfile = BytesIO(request_text)\n        self.raw_requestline = self.rfile.readline()\n        self.error_code = self.error_message = None\n        self.parse_request()\n\n    def send_error(self, code, message=None, explain=None):\n        self.error_code = code\n        self.error_message = message\n\nclass HTTPOutput:\n    def __init__(self, host: str | None = \"127.0.0.1\", port: int = 0) -> None:\n        self.host = host\n        self.port = port\n        self.conn: socket.socket | None = None\n        self.socket: socket.socket = None\n        self.request = None\n\n    @property\n    def addresses(self):\n        if self.host:\n            return [self.host]\n\n        addrs = {\"127.0.0.1\"}\n        with suppress(socket.gaierror):\n            for info in socket.getaddrinfo(socket.gethostname(), self.port, socket.AF_INET):\n                addrs.add(info[4][0])\n\n        return sorted(addrs)\n\n    @property\n    def urls(self):\n        for addr in self.addresses:\n            yield f\"http://{addr}:{self.port}/\"\n\n    def start_server(self):\n        self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        self.socket.bind((self.host or \"\", self.port))\n        self.socket.listen(1)\n        self.host, self.port = self.socket.getsockname()\n        if self.host == \"0.0.0.0\":\n            self.host = None\n\n    def accept_connection(self, timeout=30) -> None:\n        self.socket.settimeout(timeout)\n        try:\n            conn, _addr = self.socket.accept()\n            conn.settimeout(None)\n            self.conn = conn\n        except socket.timeout as err:\n            self.conn = None\n            raise OSError(\"Socket accept timed out\") from err\n\n    def _open(self):\n        conn = self.conn\n        if not conn:\n            raise OSError(\"No client connection\")\n\n        try:\n            req_data = conn.recv(1024)\n        except OSError as err:\n            raise OSError(\"Failed to read data from socket\") from err\n\n        req = HTTPRequest(req_data)\n        if req.command not in (\"GET\", \"HEAD\"):\n            conn.send(b\"HTTP/1.1 501 Not Implemented\\r\\n\")\n            conn.close()\n            raise OSError(f\"Invalid request method: {req.command}\")\n\n        try:\n            conn.send(b\"HTTP/1.1 200 OK\\r\\n\")\n            conn.send(b\"Server: Streamlink\\r\\n\")\n            conn.send(b\"Content-Type: video/unknown\\r\\n\")\n            conn.send(b\"\\r\\n\")\n        except OSError as err:\n            raise OSError(\"Failed to write data to socket\") from err\n\n        if req.command == \"HEAD\":\n            conn.close()\n            raise OSError\n\n        self.request = req\n\n    def _write(self, data):\n        self.conn.sendall(data)\n\n    def _close(self):\n        if self.conn:\n            with suppress(OSError):\n                self.conn.close()\n            self.conn = None\n\n    def shutdown(self) -> None:\n        self._close()\n        with suppress(OSError):\n            self.socket.shutdown(socket.SHUT_RDWR)\n        with suppress(OSError):\n            self.socket.close()",
    "Code_level": "Class-level",
    "FSMID_for_test": 66,
    "right_result": "```python\nimport socket\nimport threading\nfrom urllib.parse import urlparse\n\nclass HTTPRequest:\n    def __init__(self, request_data: str):\n        self.method, self.path, self.version = self._parse_request(request_data)\n        self.headers = self._parse_headers(request_data)\n\n    def _parse_request(self, request_data: str):\n        lines = request_data.split('\\r\\n')\n        method, path, version = lines[0].split()\n        return method, path, version\n\n    def _parse_headers(self, request_data: str):\n        headers = {}\n        for line in request_data.split('\\r\\n')[1:]:\n            if line:\n                key, value = line.split(': ', 1)\n                headers[key] = value\n        return headers\n\nclass HTTPOutput:\n    def __init__(self, host: str = \"127.0.0.1\", port: int = 0):\n        self.host = host\n        self.port = port\n        self.conn = None\n        self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.request = None\n\n    @property\n    def addresses(self) -> list[str]:\n        return socket.getaddrinfo(self.host, self.port, family=socket.AF_UNSPEC, type=socket.SOCK_STREAM)\n\n    @property\n    def urls(self) -> None:\n        for address in self.addresses:\n            yield f\"http://{address[4][0]}:{address[4][1]}\"\n\n    def start_server(self) -> None:\n        self.socket.bind((self.host, self.port))\n        self.socket.listen()\n        print(f\"Server started on {self.host}:{self.port}\")\n        threading.Thread(target=self._accept_connections).start()\n\n    def accept_connection(self, timeout: int = 30) -> None:\n        self.conn, self.conn_address = self.socket.accept()\n        self.conn.settimeout(timeout)\n\n    def _open(self) -> None:\n        request_data = self.conn.recv(1024).decode()\n        self.request = HTTPRequest(request_data)\n        self._write(f\"HTTP/1.1 200 OK\\r\\n\\r\\n\")\n\n    def _write(self, data: bytes) -> None:\n        self.conn.sendall(data)\n\n    def _close(self) -> None:\n        self.conn.close()\n\n    def shutdown(self) -> None:\n        self.socket.close()\n```"
  },
  {
    "Task_id": 392,
    "Instruction": "Task Description: Implement a TCP server class in Python that handles client connections, data exchange, and supports various TLS/SSL configurations for secure communication.\n\nClass Description: TLSServerAutomaton is a TCP server implementation that provides secure communication capabilities with configurable TLS parameters. It handles socket creation, binding, client acceptance, data transmission, and cleanup operations.\n\nAttributes:\n\nserversocket: [socket.socket] - The main server socket object\nip_family: [int] - Address family (default: AF_INET)\nlocal_ip: [str] - Local IP address to bind to\nlocal_port: [int] - Local port to bind to\nremote_ip: [str] - Connected client's IP address\nremote_port: [int] - Connected client's port\nclient_auth: [bool] - Flag for client authentication requirement\nis_echo_server: [bool] - Flag to enable echo server behavior\nmax_client_idle_time: [int] - Maximum idle time before disconnecting (seconds)\ncurve: [str] - Preferred elliptic curve for ECDHE\npreferred_ciphersuite: [Optional[int]] - Preferred cipher suite\npreferred_signature_algorithm: [Union[str, int, None]] - Preferred signature algorithm\ncookie: [bool] - Enable DTLS cookie protection\npsk_secret: [Optional[str]] - Pre-shared key secret\npsk_mode: [Optional[str]] - Pre-shared key mode\n\nMethods:\n\nbind_socket() -> [bool] - Creates and binds the server socket, returns success status\naccept_client() -> [None] - Accepts an incoming client connection\nclose_client_socket() -> [None] - Closes the current client connection\nclose_server_socket() -> [None] - Closes the server socket\nreceive_data(timeout: Optional[int] = None) -> [Optional[bytes]] - Receives data from client with optional timeout\nsend_data(data: bytes) -> [bool] - Sends data to client, returns success status\nrun_server() -> [None] - Main server loop that handles client connections and data exchange",
    "Canonical_solution": "import socket\nfrom typing import Optional, Union\n\nclass TLSServerAutomaton:\n    def __init__(self, server=\"127.0.0.1\", sport=4433,\n                 mycert=None, mykey=None,\n                 preferred_ciphersuite: Optional[int] = None,\n                 preferred_signature_algorithm: Union[str, int, None] = None,\n                 client_auth=False,\n                 is_echo_server=True,\n                 max_client_idle_time=60,\n                 handle_session_ticket=None,\n                 session_ticket_file=None,\n                 curve=None,\n                 cookie=False,\n                 psk=None,\n                 psk_mode=None):\n\n        self.serversocket = None\n        self.ip_family = socket.AF_INET\n        self.local_ip = server\n        self.local_port = sport\n        self.remote_ip = None\n        self.remote_port = None\n\n        self.client_auth = client_auth\n        self.is_echo_server = is_echo_server\n        self.max_client_idle_time = max_client_idle_time\n        self.curve = curve\n        self.preferred_ciphersuite = preferred_ciphersuite\n        self.preferred_signature_algorithm = preferred_signature_algorithm\n        self.cookie = cookie\n        self.psk_secret = psk\n        self.psk_mode = psk_mode\n\n    def bind_socket(self):\n        s = socket.socket(self.ip_family, socket.SOCK_STREAM)\n        self.serversocket = s\n        s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        try:\n            s.bind((self.local_ip, self.local_port))\n            s.listen(1)\n            return True\n        except Exception as e:\n            print(f\"Unable to bind on {self.local_ip}:{self.local_port}! ({e})\")\n            return False\n\n    def accept_client(self):\n        self.socket, addr = self.serversocket.accept()\n        if not isinstance(addr, tuple):\n            addr = self.socket.getpeername()\n        if len(addr) > 2:\n            addr = (addr[0], addr[1])\n        self.remote_ip, self.remote_port = addr\n        print(f\"Accepted connection from {self.remote_ip}:{self.remote_port}\")\n\n    def close_client_socket(self):\n        self.socket.close()\n\n    def close_server_socket(self):\n        if self.serversocket:\n            self.serversocket.close()\n\n    def receive_data(self, timeout=None):\n        if timeout:\n            self.socket.settimeout(timeout)\n        try:\n            data = self.socket.recv(4096)\n            return data if data else None\n        except socket.timeout:\n            return None\n        except Exception:\n            return None\n\n    def send_data(self, data):\n        try:\n            self.socket.sendall(data)\n            return True\n        except Exception:\n            return False\n\n    def run_server(self):\n        if not self.bind_socket():\n            return\n\n        try:\n            while True:\n                self.accept_client()\n                try:\n                    while True:\n                        data = self.receive_data(self.max_client_idle_time)\n                        if not data:\n                            break\n                        if self.is_echo_server:\n                            self.send_data(data)\n                finally:\n                    self.close_client_socket()\n        finally:\n            self.close_server_socket()",
    "Code_level": "Class-level",
    "FSMID_for_test": 66,
    "right_result": "```python\nimport socket\nimport ssl\nimport threading\nfrom typing import Optional, Union\n\nclass TLSServerAutomaton:\n    def __init__(self, ip_family: int = socket.AF_INET, local_ip: str = '0.0.0.0', local_port: int = 0,\n                 client_auth: bool = False, is_echo_server: bool = False, max_client_idle_time: int = 0,\n                 curve: str = 'auto', preferred_ciphersuite: Optional[int] = None,\n                 preferred_signature_algorithm: Union[str, int, None] = None, cookie: bool = False,\n                 psk_secret: Optional[str] = None, psk_mode: Optional[str] = None):\n        self.serversocket = socket.socket(ip_family, socket.SOCK_STREAM)\n        self.ip_family = ip_family\n        self.local_ip = local_ip\n        self.local_port = local_port\n        self.remote_ip = None\n        self.remote_port = None\n        self.client_auth = client_auth\n        self.is_echo_server = is_echo_server\n        self.max_client_idle_time = max_client_idle_time\n        self.curve = curve\n        self.preferred_ciphersuite = preferred_ciphersuite\n        self.preferred_signature_algorithm = preferred_signature_algorithm\n        self.cookie = cookie\n        self.psk_secret = psk_secret\n        self.psk_mode = psk_mode\n\n    def bind_socket(self) -> bool:\n        self.serversocket.bind((self.local_ip, self.local_port))\n        self.serversocket.listen()\n        return True\n\n    def accept_client(self) -> None:\n        self.serversocket.settimeout(10)\n        try:\n            client_socket, (client_ip, client_port) = self.serversocket.accept()\n            self.remote_ip, self.remote_port = client_ip, client_port\n            client_socket = ssl.wrap_socket(client_socket, cert_reqs=self.client_auth, \n                                            keyfile='server.key', certfile='server.crt', \n                                            ca_certs='ca.crt', server_side=True, \n                                            ssl_version=ssl.PROTOCOL_TLS_CLIENT, \n                                            ciphers=self.preferred_ciphersuite, \n                                            cert_reqs=ssl.CERT_NONE, \n                                            curve=self.curve, \n                                            cookie=self.cookie, \n                                            psk=self.psk_secret, \n                                            psk_mode=self.psk_mode)\n            threading.Thread(target=self.handle_client, args=(client_socket,)).start()\n        except socket.timeout:\n            pass\n\n    def close_client_socket(self) -> None:\n        if self.serversocket:\n            self.serversocket.close()\n\n    def close_server_socket(self) -> None:\n        if self.serversocket:\n            self.serversocket.close()\n\n    def receive_data(self, timeout: Optional[int] = None) -> Optional[bytes]:\n        try:\n            return self.serversocket.recv(1024)\n        except socket.timeout:\n            return None\n\n    def send_data(self, data: bytes) -> bool:\n        try:\n            self.serversocket.sendall(data)\n            return True\n        except Exception:\n            return False\n\n    def run_server(self) -> None:\n        self.bind_socket()\n        while True:\n            self.accept_client()\n            # Additional server loop logic can be added here\n\n    def handle_client(self, client_socket: socket.socket) -> None:\n        try:\n            while True:\n                data = client_socket.recv(1024)\n                if not data:\n                    break\n                if self.is_echo_server:\n                    client_socket.sendall(data)\n        finally:\n            client_socket.close()\n```"
  },
  {
    "Task_id": 394,
    "Instruction": "Task Description: Implement a TCP server that accepts client connections and delegates the handling of these connections to a worker process using inter-process communication (IPC).\n\nFunction Description: The function `server` establishes a TCP server that listens for incoming client connections. When a client connects, the server sends the client's file descriptor to a pre-connected worker process using `send_handle`, allowing the worker to take over the client communication. The server then closes its end of the connection, leaving the worker to handle further interaction with the client.\n\nInput:\n- `work_address`: [str] - The address (e.g., a named pipe or network address) where the worker process is listening for connections.\n- `port`: [int] - The TCP port number on which the server should listen for incoming client connections.\n\nOutput: None (The function runs indefinitely in a loop, accepting and delegating client connections.)",
    "Canonical_solution": "from multiprocessing.connection import Listener\nfrom multiprocessing.reduction import send_handle\nimport socket\n\ndef server(work_address, port):\n    # Wait for the worker to connect\n    work_serv = Listener(work_address, authkey=b'peekaboo')\n    worker = work_serv.accept()\n    worker_pid = worker.recv()\n\n    # Now run a TCP/IP server and send clients to worker\n    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, True)\n    s.bind(('', port))\n    s.listen(1)\n    while True:\n        client, addr = s.accept()\n        print('SERVER: Got connection from', addr)\n        send_handle(worker, client.fileno(), worker_pid)\n        client.close()",
    "Code_level": "Function-level",
    "FSMID_for_test": 66,
    "right_result": "```python\nimport socket\nimport os\nimport select\nimport errno\nimport subprocess\n\ndef server(work_address, port):\n    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n    server_socket.bind(('', port))\n    server_socket.listen(5)\n    server_socket.setblocking(0)\n    connections = {}\n    workers = {}\n    worker_pids = []\n\n    def send_handle(client_fd, worker_pid):\n        worker_socket = workers[worker_pid]\n        worker_socket.sendall(client_fd.to_bytes(8, byteorder='big'))\n\n    while True:\n        readable, writable, exceptional = select.select([server_socket] + list(connections), [], [])\n        for s in readable:\n            if s is server_socket:\n                client_fd, client_address = s.accept()\n                client_fd.setblocking(0)\n                connections[client_fd] = client_fd\n                worker_pid = worker_pids[0]\n                send_handle(client_fd, worker_pid)\n                client_fd.close()\n            else:\n                worker_pid = connections[s].recv(8)\n                worker_pid = int.from_bytes(worker_pid, byteorder='big')\n                connections[s].close()\n                del connections[s]\n                worker_socket = workers[worker_pid]\n                worker_socket.close()\n                del workers[worker_pid]\n\n        for s in exceptional:\n            if s in connections:\n                worker_pid = connections[s].recv(8)\n                worker_pid = int.from_bytes(worker_pid, byteorder='big')\n                connections[s].close()\n                del connections[s]\n                worker_socket = workers[worker_pid]\n                worker_socket.close()\n                del workers[worker_pid]\n\n        for s in writable:\n            pass\n\n        for worker_pid in worker_pids[:]:\n            if not workers[worker_pid].recv(8):\n                worker_socket = workers[worker_pid]\n                worker_socket.close()\n                del workers[worker_pid]\n                worker_pids.remove(worker_pid)\n\n        for worker_pid in worker_pids[:]:\n            worker_socket = workers[worker_pid]\n            if worker_socket.recv(8):\n                worker_socket.sendall(b'')\n            else:\n                worker_socket.close()\n                del workers[worker_pid]\n                worker_pids.remove(worker_pid)\n\n        for worker_pid in worker_pids[:]:\n            worker_socket = workers[worker_pid]\n            if worker_socket.recv(8):\n                worker_socket.sendall(b'')\n            else:\n                worker_socket.close()\n                del workers[worker_pid]\n                worker_pids.remove(worker_pid)\n\n        for worker_pid in worker_pids[:]:\n            worker_socket = workers[worker_pid]\n            if worker_socket.recv(8):\n                worker_socket.sendall(b'')\n            else:\n                worker_socket.close()\n                del workers[worker_pid]\n                worker_pids.remove(worker_pid)\n\n        for worker_pid in worker_pids[:]:\n            worker_socket = workers[worker_pid]\n            if worker_socket.recv(8):\n                worker_socket.sendall(b'')\n            else:\n                worker_socket.close()\n                del workers[worker_pid]\n                worker_pids.remove(worker_pid)\n\n        for worker_pid in worker_pids[:]:\n            worker_socket = workers[worker_pid]\n            if worker_socket.recv(8):\n                worker_socket.sendall(b'')\n            else:\n                worker_socket.close()\n                del workers[worker_pid]\n                worker_pids.remove(worker_pid)\n\n        for worker_pid in worker_pids[:]:\n            worker_socket = workers[worker_pid]\n            if worker_socket.recv(8):\n                worker_socket.sendall(b'')\n            else:\n                worker_socket.close()\n                del workers[worker_pid]\n                worker_pids.remove(worker_pid)\n\n        for worker_pid in worker_pids[:]:\n            worker_socket = workers[worker_pid]\n            if worker_socket.recv(8):\n                worker_socket.sendall(b'')\n            else:\n                worker_socket.close()\n                del workers[worker_pid]\n                worker_pids.remove(worker_pid)\n\n        for worker_pid in worker_pids[:]:\n            worker_socket = workers[worker_pid]\n            if worker_socket.recv(8):\n                worker_socket.sendall(b'')\n            else:\n                worker_socket.close()\n                del workers[worker_pid]\n                worker_pids.remove(worker_pid)\n\n        for worker_pid in worker_pids[:]:\n            worker_socket = workers[worker_pid]\n            if worker_socket.recv(8):\n                worker_socket.sendall(b'')\n            else:\n                worker_socket.close()\n                del workers[worker_pid]\n                worker_pids.remove(worker_pid)\n\n        for worker_pid in worker_pids[:]:\n            worker_socket = workers[worker_pid]\n            if worker_socket.recv(8):\n                worker_socket.sendall(b'')\n            else:\n                worker_socket.close()\n                del workers[worker_pid]\n                worker_pids.remove(worker_pid)\n\n        for worker_pid in worker_pids[:]:\n            worker_socket = workers[worker_pid]\n            if worker_socket.recv(8):\n                worker_socket.sendall(b'')\n            else:\n                worker_socket.close()\n                del workers[worker_pid]\n                worker_pids.remove(worker_pid)\n\n        for worker_pid in worker_pids[:]:\n            worker_socket = workers[worker_pid]\n            if worker_socket.recv(8):\n                worker_socket.sendall(b'')\n            else:\n                worker_socket.close()\n                del workers[worker_pid]\n                worker_pids.remove(worker_pid)\n\n        for worker_pid in worker_pids[:]:\n            worker_socket = workers[worker_pid]\n            if worker_socket.recv(8):\n                worker_socket.sendall(b'')\n            else:\n                worker_socket.close()\n                del workers[worker_pid]\n                worker_pids.remove(worker_pid)\n\n        for worker_pid in worker_pids[:]:\n            worker_socket = workers[worker_pid]\n            if worker_socket.recv(8):\n                worker_socket.sendall(b'')\n            else:\n                worker_socket.close()\n                del workers[worker_pid]\n                worker_pids.remove(worker_pid)\n\n        for worker_pid in worker_pids[:]:\n            worker_socket = workers[worker_pid]\n            if worker_socket.recv(8):\n                worker_socket.sendall(b'')\n            else:\n                worker_socket.close()\n                del workers[worker_pid]\n                worker_pids.remove(worker_pid)\n\n        for worker_pid in worker_pids[:]:\n            worker_socket = workers[worker_pid]\n            if worker_socket.recv(8):\n                worker_socket.sendall(b'')\n            else:\n                worker_socket.close()\n                del workers[worker_pid]\n                worker_pids.remove(worker_pid)\n\n        for worker_pid in worker_pids[:]:\n            worker_socket = workers[worker_pid]\n            if worker_socket.recv(8):\n                worker_socket.sendall(b'')\n            else:\n                worker_socket.close()\n                del workers[worker_pid]\n                worker_pids.remove(worker_pid)\n\n        for worker_pid in worker_pids[:]:\n            worker_socket = workers[worker_pid]\n            if worker_socket.recv(8):\n                worker_socket.sendall(b'')\n            else:\n                worker_socket.close()\n                del workers[worker_pid]\n                worker_pids.remove(worker_pid)\n\n        for worker_pid in worker_pids[:]:\n            worker_socket = workers[worker_pid]\n            if worker_socket.recv(8):\n                worker_socket.sendall(b'')\n            else:\n                worker_socket.close()\n                del workers[worker_pid]\n                worker_pids.remove(worker_pid)\n\n        for worker_pid in worker_pids[:]:\n            worker_socket = workers[worker_pid]\n            if worker_socket.recv(8):\n                worker_socket.sendall(b'')\n            else:\n                worker_socket.close()\n                del workers[worker_pid]\n                worker_pids.remove(worker_pid)\n\n        for worker_pid in worker_pids[:]:\n            worker_socket = workers[worker_pid]\n            if worker_socket.recv(8):\n                worker_socket.sendall(b'')\n            else:\n                worker_socket.close()\n                del workers[worker_pid]\n                worker_pids.remove(worker_pid)\n\n        for worker_pid in worker_pids[:]:\n            worker_socket = workers[worker_pid]\n            if worker_socket.recv(8):\n                worker_socket.sendall(b'')\n            else:\n                worker_socket.close()\n                del workers[worker_pid]\n                worker_pids.remove(worker_pid)\n\n        for worker_pid in worker_pids[:]:\n            worker_socket = workers[worker_pid]\n            if worker_socket.recv(8):\n                worker_socket.sendall(b'')\n            else:\n                worker_socket.close()\n                del workers[worker_pid]\n                worker_pids.remove(worker_pid)\n\n        for worker_pid in worker_pids[:]:\n            worker_socket = workers[worker_pid]\n            if worker_socket.recv(8):\n                worker_socket.sendall(b'')\n            else:\n                worker_socket.close()\n                del workers[worker_pid]\n                worker_pids.remove(worker_pid)\n\n        for worker_pid in worker_pids[:]:\n            worker_socket = workers[worker_pid]\n            if worker_socket.recv(8):\n                worker_socket.sendall(b'')\n            else:\n                worker_socket.close()\n                del workers[worker_pid]\n                worker_pids.remove(worker_pid)\n\n        for worker_pid in worker_pids[:]:\n            worker_socket = workers[worker_pid]\n            if worker_socket.recv(8):\n                worker_socket.sendall(b'')\n            else:\n                worker_socket.close()\n                del workers[worker_pid]\n                worker_pids.remove(worker_pid)\n\n        for worker_pid in worker_pids[:]:\n            worker_socket = workers[worker_pid]\n            if worker_socket.recv(8):\n                worker_socket.sendall(b'')\n            else:\n                worker_socket.close()\n                del workers[worker_pid]\n                worker_pids.remove(worker_pid)\n\n        for worker_pid in worker_pids[:]:\n            worker_socket = workers[worker_pid]\n            if worker_socket.recv(8):\n                worker_socket.sendall(b'')\n            else:\n                worker_socket.close()\n                del workers[worker_pid]\n                worker_pids.remove(worker_pid)\n\n        for worker_pid in worker_pids[:]:\n            worker_socket = workers[worker_pid]\n            if worker_socket.recv(8):\n                worker_socket.sendall(b'')\n            else:\n                worker_socket.close()\n                del workers[worker_pid]\n                worker_pids.remove(worker_pid)\n\n        for worker_pid in worker_pids[:]:\n            worker_socket = workers[worker_pid]\n            if worker_socket.recv(8):\n                worker_socket.sendall(b'')\n            else:\n                worker_socket.close()\n                del workers[worker_pid]\n                worker_pids.remove(worker_pid)\n\n        for worker_pid in worker_pids[:]:\n            worker_socket = workers[worker_pid]\n            if worker_socket.recv(8):\n                worker_socket.sendall(b'')\n            else:\n                worker_socket.close()\n                del workers[worker_pid]\n                worker_pids.remove(worker_pid)\n\n        for worker_pid in worker_pids[:]:\n            worker_socket = workers[worker_pid]\n            if worker_socket.recv(8):\n                worker_socket.sendall(b'')\n            else:\n                worker_socket.close()\n                del workers[worker_pid]\n                worker_pids.remove(worker_pid)\n\n        for worker_pid in worker_pids[:]:\n            worker_socket = workers[worker_pid]\n            if worker_socket.recv(8):\n                worker_socket.sendall(b'')\n            else:\n                worker_socket.close()\n                del workers[worker_pid]\n                worker_pids.remove(worker_pid)\n\n        for worker_pid in worker_pids[:]:\n            worker_socket = workers[worker_pid]\n            if worker_socket.recv(8):\n                worker_socket.sendall(b'')\n            else:\n                worker_socket.close()\n                del workers[worker_pid]\n                worker_pids.remove(worker_pid)\n\n        for worker_pid in worker_pids[:]:\n            worker_socket = workers[worker_pid]\n            if worker_socket.recv(8):\n                worker_socket.sendall(b'')\n            else:\n                worker_socket.close()\n                del workers[worker_pid]\n                worker_pids.remove(worker_pid)\n\n        for worker_pid in worker_pids[:]:\n            worker_socket = workers[worker_pid]\n            if worker_socket.recv(8):\n                worker_socket.sendall(b'')\n            else:\n                worker_socket.close()\n                del workers[worker_pid]\n                worker_pids.remove(worker_pid)\n\n        for worker_pid in worker_pids[:]:\n            worker_socket = workers[worker_pid]\n            if worker_socket.recv(8):\n                worker_socket.sendall(b'')\n            else:\n                worker_socket.close()\n                del workers[worker_pid]\n                worker_pids.remove(worker_pid)\n\n        for worker_pid in worker_pids[:]:\n            worker_socket = workers[worker_pid]\n            if worker_socket.recv(8):\n                worker_socket.sendall(b'')\n            else:\n                worker_socket.close()\n                del workers[worker_pid]\n                worker_pids.remove(worker_pid)\n\n        for worker_pid in worker_pids[:]:\n            worker_socket = workers[worker_pid]\n            if worker_socket.recv(8):\n                worker_socket.sendall(b'')\n            else:\n                worker_socket.close()\n                del workers[worker_pid]\n                worker_pids.remove(worker_pid)\n\n        for worker_pid in worker_pids[:]:\n            worker_socket = workers[worker_pid]\n            if worker_socket.recv(8):\n                worker_socket.sendall(b'')\n            else:\n                worker_socket.close()\n                del workers[worker_pid]\n                worker_pids.remove(worker_pid)\n\n        for worker_pid in worker_pids[:]:\n            worker_socket = workers[worker_pid]\n            if worker_socket.recv(8):\n                worker_socket.sendall(b'')\n            else:\n                worker_socket.close()\n                del workers[worker_pid]\n                worker_pids.remove(worker_pid)\n\n        for worker_pid in worker_pids[:]:\n            worker_socket = workers[worker_pid]\n            if worker_socket.recv(8):\n                worker_socket.sendall(b'')\n            else:\n                worker_socket.close()\n                del workers[worker_pid]\n                worker_pids.remove(worker_pid)\n\n        for worker_pid in worker_pids[:]:\n            worker_socket = workers[worker_pid]\n            if worker_socket.recv(8):\n                worker_socket.sendall(b'')\n            else:\n                worker_socket.close()\n                del workers[worker_pid]\n                worker_pids.remove(worker_pid)\n\n        for worker_pid in worker_pids[:]:\n            worker_socket = workers[worker_pid]\n            if worker_socket.recv(8):\n                worker_socket.sendall(b'')\n            else:\n                worker_socket.close()\n                del workers[worker_pid]\n                worker_pids.remove(worker_pid)\n\n        for worker_pid in worker_pids[:]:\n            worker_socket = workers[worker_pid]\n            if worker_socket.recv(8):\n                worker_socket.sendall(b'')\n            else:\n                worker_socket.close()\n                del workers[worker_pid]\n                worker_pids.remove(worker_pid)\n\n        for worker_pid in worker_pids[:]:\n            worker_socket = workers[worker_pid]\n            if worker_socket.recv(8):\n                worker_socket.sendall(b'')\n            else:\n                worker_socket.close()\n                del workers[worker_pid]\n                worker_pids.remove(worker_pid)\n\n        for worker_pid in worker_pids[:]:\n            worker_socket = workers[worker_pid]\n            if worker_socket.recv(8):\n                worker_socket.sendall(b'')\n            else:\n                worker_socket.close()\n                del workers[worker_pid]\n                worker_pids.remove(worker_pid)\n\n        for worker_pid in worker_pids[:]:\n            worker_socket = workers[worker_pid]\n            if worker_socket.recv(8):\n                worker_socket.sendall(b'')\n            else:\n                worker_socket.close()\n                del workers[worker_pid]\n                worker_pids.remove(worker_pid)\n\n        for worker_pid in worker_pids[:]:\n            worker_socket = workers[worker_pid]\n            if worker_socket.recv(8):\n                worker_socket.sendall(b'')\n            else:\n                worker_socket.close()\n                del workers[worker_pid]\n                worker_pids.remove(worker_pid)\n\n        for worker_pid in worker_pids[:]:\n            worker_socket = workers[worker_pid]\n            if worker_socket.recv(8):\n                worker_socket.sendall(b'')\n            else:\n                worker_socket.close()\n                del workers[worker_pid]\n                worker_pids.remove(worker_pid)\n\n        for worker_pid in worker_pids[:]:\n            worker_socket = workers[worker_pid]\n            if worker_socket.recv(8):\n                worker_socket.sendall(b'')\n            else:\n                worker_socket.close()\n                del workers[worker_pid]\n                worker_pids.remove(worker_pid)\n\n        for worker_pid in worker_pids[:]:\n            worker_socket = workers[worker_pid]\n            if worker_socket.recv(8):\n                worker_socket.sendall(b'')\n            else:\n                worker_socket.close()\n                del workers[worker_pid]\n                worker_pids.remove(worker_pid)\n\n        for worker_pid in worker_pids[:]:\n            worker_socket = workers[worker_pid]\n            if worker_socket.recv(8):\n                worker_socket.sendall(b'')\n            else:\n                worker_socket.close()\n                del workers[worker_pid]\n                worker_pids.remove(worker_pid)\n\n        for worker_pid in worker_pids[:]:\n            worker_socket = workers[worker_pid]\n            if worker_socket.recv(8):\n                worker_socket.sendall(b'')\n            else:\n                worker_socket.close()\n                del workers[worker_pid]\n                worker_pids.remove(worker_pid)\n\n        for worker_pid in worker_pids[:]:\n            worker_socket = workers[worker_pid]\n            if worker_socket.recv(8):\n                worker_socket.sendall(b'')\n            else:\n                worker_socket.close()\n                del workers[worker_pid]\n                worker_pids.remove(worker_pid)\n\n        for worker_pid in worker_pids[:]:\n            worker_socket = workers[worker_pid]\n            if worker_socket.recv(8):\n                worker_socket.sendall(b'')\n            else:\n                worker_socket.close()\n                del workers[worker_pid]\n                worker_pids.remove(worker_pid)\n\n        for worker_pid in worker_pids[:]:\n            worker_socket = workers[worker_pid]\n            if worker_socket.recv(8):\n                worker_socket.sendall(b'')\n            else:\n                worker_socket.close()\n                del workers[worker_pid]\n                worker_pids.remove(worker_pid)\n\n        for worker_pid in worker_pids[:]:\n            worker_socket = workers[worker_pid]\n            if worker_socket.recv(8):\n                worker_socket.sendall(b'')\n            else:\n                worker_socket.close()\n                del workers[worker_pid]\n                worker_pids.remove(worker_pid)\n\n        for worker_pid in worker_pids[:]:\n            worker_socket = workers[worker_pid]\n            if worker_socket.recv(8):\n                worker_socket.sendall(b'')\n            else:\n                worker_socket.close()\n                del workers[worker_pid]\n                worker_pids.remove(worker_pid)\n\n        for worker_pid in worker_pids[:]:\n            worker_socket = workers[worker_pid]\n            if worker_socket.recv(8):\n                worker_socket.sendall(b'')\n            else:\n                worker_socket.close()\n                del workers[worker_pid]\n                worker_pids.remove(worker_pid)\n\n        for worker_pid in worker_pids[:]:\n            worker_socket = workers[worker_pid]\n            if worker_socket.recv(8):\n                worker_socket.sendall(b'')\n            else:\n                worker_socket.close()\n                del workers[worker_pid]\n                worker_pids.remove(worker_pid)\n\n        for worker_pid in worker_pids[:]:\n            worker_socket = workers[worker_pid]\n            if worker_socket.recv(8):\n                worker_socket.sendall(b'')\n            else:\n                worker_socket.close()\n                del workers[worker_pid]\n                worker_pids.remove(worker_pid)\n\n        for worker_pid in worker_pids[:]:\n            worker_socket = workers[worker_pid]\n            if worker_socket.recv(8):\n                worker_socket.sendall(b'')\n            else:\n                worker_socket.close()\n                del workers[worker_pid]\n                worker_pids.remove(worker_pid)\n\n        for worker_pid in worker_pids[:]:\n            worker_socket = workers[worker_pid]\n            if worker_socket.recv(8):\n                worker_socket"
  },
  {
    "Task_id": 398,
    "Instruction": "Task Description: Implement a TCP server function that handles client connections, performs data exchange, and measures performance statistics during the exchange.\n\nFunction Description: The function `server_once` establishes a TCP server that listens for incoming client connections, exchanges parameters with the client, performs data transfer (either sending or receiving based on parameters), collects performance statistics, exchanges results with the client, and finally closes the connection. The function handles both TCP and UDP protocols based on client parameters and includes debugging capabilities.\n\nInput: \n- None (The function uses global constants and variables for configuration)\n  - DEBUG: bool - Flag to enable debug output\n  - COOKIE_SIZE: int - Size of the cookie for client verification\n  - PARAM_EXCHANGE, CREATE_STREAMS, TEST_START, TEST_RUNNING, TEST_END, EXCHANGE_RESULTS, DISPLAY_RESULTS, IPERF_DONE: int - Command codes for protocol control\n\nOutput: \n- None (The function performs operations and outputs results to console/logs but doesn't return any value)\n  - Prints server status and debug information to console\n  - Outputs performance statistics when complete",
    "Canonical_solution": "import json\nimport select\nimport socket\nimport struct\nimport time\n\ndef server_once():\n    # Listen for a connection\n    ai = socket.getaddrinfo(\"0.0.0.0\", 5201)\n    ai = ai[0]\n    print(\"Server listening on\", ai[-1])\n    s_listen = socket.socket(ai[0], socket.SOCK_STREAM)\n    s_listen.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n    s_listen.bind(ai[-1])\n    s_listen.listen(1)\n    s_ctrl, addr = s_listen.accept()\n\n    # Read client's cookie\n    cookie = recvn(s_ctrl, COOKIE_SIZE)\n    if DEBUG:\n        print(cookie)\n\n    # Ask for parameters\n    s_ctrl.sendall(bytes([PARAM_EXCHANGE]))\n\n    # Get parameters\n    n = struct.unpack(\">I\", recvn(s_ctrl, 4))[0]\n    param = recvn(s_ctrl, n)\n    param = json.loads(str(param, \"ascii\"))\n    if DEBUG:\n        print(param)\n    reverse = param.get(\"reverse\", False)\n\n    # Ask to create streams\n    s_ctrl.sendall(bytes([CREATE_STREAMS]))\n\n    if param.get(\"tcp\", False):\n        # Accept stream\n        s_data, addr = s_listen.accept()\n        print(\"Accepted connection:\", addr)\n        recvn(s_data, COOKIE_SIZE)\n    elif param.get(\"udp\", False):\n        # Close TCP connection and open UDP \"connection\"\n        s_listen.close()\n        s_data = socket.socket(ai[0], socket.SOCK_DGRAM)\n        s_data.bind(ai[-1])\n        data, addr = s_data.recvfrom(4)\n        s_data.sendto(b\"\\x12\\x34\\x56\\x78\", addr)\n    else:\n        assert False\n\n    # Start test\n    s_ctrl.sendall(bytes([TEST_START]))\n\n    # Run test\n    s_ctrl.sendall(bytes([TEST_RUNNING]))\n\n    # Read data, and wait for client to send TEST_END\n    poll = select.poll()\n    poll.register(s_ctrl, select.POLLIN)\n    if reverse:\n        poll.register(s_data, select.POLLOUT)\n    else:\n        poll.register(s_data, select.POLLIN)\n    stats = Stats(param)\n    stats.start()\n    running = True\n    data_buf = bytearray(urandom(param[\"len\"]))\n    while running:\n        for pollable in poll.poll(stats.max_dt_ms()):\n            if pollable_is_sock(pollable, s_ctrl):\n                cmd = recvn(s_ctrl, 1)[0]\n                if DEBUG:\n                    print(cmd_string.get(cmd, \"UNKNOWN_COMMAND\"))\n                if cmd == TEST_END:\n                    running = False\n            elif pollable_is_sock(pollable, s_data):\n                if reverse:\n                    n = s_data.send(data_buf)\n                    stats.add_bytes(n)\n                else:\n                    recvninto(s_data, data_buf)\n                    stats.add_bytes(len(data_buf))\n        stats.update()\n\n    # Need to continue writing so other side doesn't get blocked waiting for data\n    if reverse:\n        while True:\n            for pollable in poll.poll(0):\n                if pollable_is_sock(pollable, s_data):\n                    s_data.send(data_buf)\n                    break\n            else:\n                break\n\n    stats.stop()\n\n    # Ask to exchange results\n    s_ctrl.sendall(bytes([EXCHANGE_RESULTS]))\n\n    # Get client results\n    n = struct.unpack(\">I\", recvn(s_ctrl, 4))[0]\n    results = recvn(s_ctrl, n)\n    results = json.loads(str(results, \"ascii\"))\n    if DEBUG:\n        print(results)\n\n    # Send our results\n    results = {\n        \"cpu_util_total\": 1,\n        \"cpu_util_user\": 0.5,\n        \"cpu_util_system\": 0.5,\n        \"sender_has_retransmits\": 1,\n        \"congestion_used\": \"cubic\",\n        \"streams\": [\n            {\n                \"id\": 1,\n                \"bytes\": stats.nb0,\n                \"retransmits\": 0,\n                \"jitter\": 0,\n                \"errors\": 0,\n                \"packets\": stats.np0,\n                \"start_time\": 0,\n                \"end_time\": ticks_diff(stats.t3, stats.t0) * 1e-6,\n            }\n        ],\n    }\n    results = json.dumps(results)\n    s_ctrl.sendall(struct.pack(\">I\", len(results)))\n    s_ctrl.sendall(bytes(results, \"ascii\"))\n\n    # Ask to display results\n    s_ctrl.sendall(bytes([DISPLAY_RESULTS]))\n\n    # Wait for client to send IPERF_DONE\n    cmd = recvn(s_ctrl, 1)[0]\n    assert cmd == IPERF_DONE\n\n    # Close all sockets\n    s_data.close()\n    s_ctrl.close()\n    s_listen.close()",
    "Code_level": "Function-level",
    "FSMID_for_test": 66,
    "right_result": "```python\nimport socket\nimport threading\nimport time\nimport struct\n\nDEBUG = True\nCOOKIE_SIZE = 16\nPARAM_EXCHANGE = 1\nCREATE_STREAMS = 2\nTEST_START = 3\nTEST_RUNNING = 4\nTEST_END = 5\nEXCHANGE_RESULTS = 6\nDISPLAY_RESULTS = 7\nIPERF_DONE = 8\n\ndef server_once():\n    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n    server_socket.bind(('localhost', 0))\n    server_socket.listen(5)\n    client_socket, client_address = server_socket.accept()\n    if DEBUG:\n        print(f\"Connection from {client_address}\")\n    cookie = os.urandom(COOKIE_SIZE)\n    client_socket.sendall(cookie)\n    received_cookie = client_socket.recv(COOKIE_SIZE)\n    if received_cookie != cookie:\n        raise ValueError(\"Invalid cookie\")\n    command = client_socket.recv(4)\n    command = struct.unpack('!I', command)[0]\n    if command == PARAM_EXCHANGE:\n        param = client_socket.recv(4)\n        param = struct.unpack('!I', param)[0]\n        if param == CREATE_STREAMS:\n            if DEBUG:\n                print(\"Creating streams\")\n            # Create streams here\n        elif param == TEST_START:\n            if DEBUG:\n                print(\"Starting test\")\n            # Start test here\n        elif param == TEST_RUNNING:\n            if DEBUG:\n                print(\"Test running\")\n            # Test running here\n        elif param == TEST_END:\n            if DEBUG:\n                print(\"Test ended\")\n            # Test ended here\n        elif param == EXCHANGE_RESULTS:\n            if DEBUG:\n                print(\"Exchanging results\")\n            # Exchange results here\n        elif param == DISPLAY_RESULTS:\n            if DEBUG:\n                print(\"Displaying results\")\n            # Display results here\n        elif param == IPERF_DONE:\n            if DEBUG:\n                print(\"Iperf done\")\n            # Iperf done here\n    client_socket.close()\n    server_socket.close()\n```"
  },
  {
    "Task_id": 40,
    "Instruction": "Task Description: Create an asynchronous HTTP client class in Python using httpx and asyncio libraries to perform various HTTP operations including GET, POST, file downloads, and image retrieval with progress tracking and error handling.\n\nClass Description: AsyncHTTPClient is a utility class that provides static methods for performing asynchronous HTTP operations. It handles common HTTP methods, file downloads with progress tracking, and image retrieval/saving functionality.\n\nMethods:\n\nMethod1: get(url: str, *, headers: Optional[Dict[str, str]] = None, params: Optional[Dict[str, Any]] = None, timeout: Optional[int] = 20, **kwargs) -> httpx.Response\n- Performs an asynchronous HTTP GET request to the specified URL with optional headers, query parameters, and timeout. Returns the HTTP response.\n\nMethod2: post(url: str, *, headers: Optional[Dict[str, str]] = None, params: Optional[Dict[str, Any]] = None, data: Optional[Dict[str, Any]] = None, json: Optional[Dict[str, Union[Any, str]]] = None, timeout: Optional[int] = 20, **kwargs) -> httpx.Response\n- Performs an asynchronous HTTP POST request to the specified URL with optional headers, query parameters, form data, JSON payload, and timeout. Returns the HTTP response.\n\nMethod3: download(url: str, save_path: Path, exclude_json: bool = False) -> None\n- Downloads a file from the specified URL asynchronously with progress tracking. Saves to the specified path while optionally excluding JSON content. Raises exception if content type doesn't match.\n\nMethod4: get_img(url: str, *, headers: Optional[Dict[str, str]] = None, params: Optional[Dict[str, Any]] = None, timeout: Optional[int] = 20, save_path: Optional[Union[str, Path]] = None, **kwargs) -> Union[None, Image.Image]\n- Retrieves an image from the specified URL asynchronously. Can optionally save to disk and returns a PIL Image object or None if the content isn't an image.",
    "Canonical_solution": "import httpx\nfrom typing import Dict, Optional, Any, Union\nfrom pathlib import Path\nfrom io import BytesIO\nfrom PIL import Image\nimport tqdm.asyncio\n\nclass AsyncHTTPClient:\n    @staticmethod\n    async def get(url: str,\n                 *,\n                 headers: Optional[Dict[str, str]] = None,\n                 params: Optional[Dict[str, Any]] = None,\n                 timeout: Optional[int] = 20,\n                 **kwargs) -> httpx.Response:\n        async with httpx.AsyncClient() as client:\n            return await client.get(url,\n                                  headers=headers,\n                                  params=params,\n                                  timeout=timeout,\n                                  **kwargs)\n\n    @staticmethod\n    async def post(url: str,\n                  *,\n                  headers: Optional[Dict[str, str]] = None,\n                  params: Optional[Dict[str, Any]] = None,\n                  data: Optional[Dict[str, Any]] = None,\n                  json: Optional[Dict[str, Union[Any, str]]] = None,\n                  timeout: Optional[int] = 20,\n                  **kwargs) -> httpx.Response:\n        async with httpx.AsyncClient() as client:\n            return await client.post(url,\n                                   headers=headers,\n                                   params=params,\n                                   data=data,\n                                   json=json,\n                                   timeout=timeout,\n                                   **kwargs)\n\n    @staticmethod\n    async def download(url: str, save_path: Path, exclude_json: bool = False):\n        save_path.parent.mkdir(parents=True, exist_ok=True)\n        async with httpx.AsyncClient().stream(method='GET', url=url, follow_redirects=True) as datas:\n            if exclude_json and 'application/json' in str(datas.headers['Content-Type']):\n                raise Exception('file not match type')\n            size = int(datas.headers['Content-Length'])\n            f = save_path.open('wb')\n            async for chunk in tqdm.asyncio.tqdm(iterable=datas.aiter_bytes(1),\n                                               desc=url.split('/')[-1],\n                                               unit='iB',\n                                               unit_scale=True,\n                                               unit_divisor=1024,\n                                               total=size,\n                                               colour='green'):\n                f.write(chunk)\n            f.close()\n\n    @staticmethod\n    async def get_img(url: str,\n                     *,\n                     headers: Optional[Dict[str, str]] = None,\n                     params: Optional[Dict[str, Any]] = None,\n                     timeout: Optional[int] = 20,\n                     save_path: Optional[Union[str, Path]] = None,\n                     **kwargs) -> Union[None, Image.Image]:\n        if save_path and Path(save_path).exists():\n            return Image.open(save_path)\n        \n        async with httpx.AsyncClient() as client:\n            resp = await client.get(url,\n                                  headers=headers,\n                                  params=params,\n                                  timeout=timeout,\n                                  **kwargs)\n            if resp.headers.get('Content-Type') not in ['image/png', 'image/jpeg']:\n                return None\n            resp = resp.read()\n            img = Image.open(BytesIO(resp))\n            \n            if save_path:\n                save_path = Path(save_path)\n                save_path.parent.mkdir(parents=True, exist_ok=True)\n                img.save(save_path)\n            return img",
    "Code_level": "Class-level",
    "FSMID_for_test": 59,
    "right_result": "```python\nimport httpx\nimport asyncio\nfrom pathlib import Path\nfrom PIL import Image\nfrom typing import Optional, Dict, Any, Union\n\nclass AsyncHTTPClient:\n    @staticmethod\n    async def get(url: str, *, headers: Optional[Dict[str, str]] = None, params: Optional[Dict[str, Any]] = None, timeout: Optional[int] = 20, **kwargs) -> httpx.Response:\n        async with httpx.AsyncClient(timeout=timeout) as client:\n            response = await client.get(url, headers=headers, params=params, **kwargs)\n            return response\n\n    @staticmethod\n    async def post(url: str, *, headers: Optional[Dict[str, str]] = None, params: Optional[Dict[str, Any]] = None, data: Optional[Dict[str, Any]] = None, json: Optional[Dict[str, Union[Any, str]]] = None, timeout: Optional[int] = 20, **kwargs) -> httpx.Response:\n        async with httpx.AsyncClient(timeout=timeout) as client:\n            response = await client.post(url, headers=headers, params=params, json=json, data=data, **kwargs)\n            return response\n\n    @staticmethod\n    async def download(url: str, save_path: Path, exclude_json: bool = False) -> None:\n        async with httpx.AsyncClient() as client:\n            async with client.stream(\"GET\", url) as response:\n                if response.headers.get(\"Content-Type\") == \"application/json\" and exclude_json:\n                    raise ValueError(\"JSON content excluded\")\n                with open(save_path, \"wb\") as f:\n                    async for chunk in response.aiter_bytes():\n                        f.write(chunk)\n\n    @staticmethod\n    async def get_img(url: str, *, headers: Optional[Dict[str, str]] = None, params: Optional[Dict[str, Any]] = None, timeout: Optional[int] = 20, save_path: Optional[Union[str, Path]] = None, **kwargs) -> Union[None, Image.Image]:\n        async with httpx.AsyncClient(timeout=timeout) as client:\n            response = await client.get(url, headers=headers, params=params, **kwargs)\n            if response.headers.get(\"Content-Type\").startswith(\"image/\"):\n                if save_path:\n                    with open(save_path, \"wb\") as f:\n                        f.write(response.content)\n                return Image.open(save_path)\n            return None\n```"
  },
  {
    "Task_id": 400,
    "Instruction": "Task Description: Implement a TCP server that accepts client connections and forwards their file descriptors to a worker process over a Unix domain socket.\n\nFunction Description: The code consists of two main functions. `send_fd()` handles sending a file descriptor over a Unix domain socket, while `server()` sets up both the Unix domain socket for worker communication and the TCP server for client connections. The server continuously accepts TCP clients, sends their file descriptors to the worker, and closes the client connection.\n\nInput:\n- `send_fd()`:\n  - `sock`: [socket.socket] - A connected Unix domain socket\n  - `fd`: [int] - File descriptor to send\n- `server()`:\n  - `work_address`: [str] - Path for the Unix domain socket\n  - `port`: [int] - TCP port number to listen on\n\nOutput:\n- `send_fd()`: None (but expects 'OK' acknowledgment from receiver)\n- `server()`: None (runs indefinitely serving clients)",
    "Canonical_solution": "import socket\nimport struct\n\ndef send_fd(sock, fd):\n    '''\n    Send a single file descriptor.\n    '''\n    sock.sendmsg([b'x'],\n                 [(socket.SOL_SOCKET, socket.SCM_RIGHTS, struct.pack('i', fd))])\n    ack = sock.recv(2)\n    assert ack == b'OK'\n\ndef server(work_address, port):\n    # Wait for the worker to connect\n    work_serv = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n    work_serv.bind(work_address)\n    work_serv.listen(1)\n    worker, addr = work_serv.accept()\n\n    # Now run a TCP/IP server and send clients to worker\n    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, True)\n    s.bind(('',port))\n    s.listen(1)\n    while True:\n        client, addr = s.accept()\n        print('SERVER: Got connection from', addr)\n        send_fd(worker, client.fileno())\n        client.close()",
    "Code_level": "Function-level",
    "FSMID_for_test": 66,
    "right_result": "```python\nimport socket\nimport os\nimport fcntl\nimport struct\n\ndef send_fd(sock, fd):\n    send_fd = fcntl.fcntl(fd, fcntl.F_GETFD)\n    fcntl.fcntl(fd, fcntl.F_SETFD, send_fd | fcntl.FD_CLOEXEC)\n    os.fstat(fd)\n    send_fd = struct.pack('i', fd)\n    sock.sendall(send_fd)\n    ack = sock.recv(2)\n    if ack != b'OK':\n        raise Exception('Received incorrect acknowledgment')\n\ndef server(work_address, port):\n    work_sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n    work_sock.bind(work_address)\n    work_sock.listen(1)\n    work_sock = work_sock.accept()[0]\n    work_sock.setblocking(0)\n\n    server_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    server_sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n    server_sock.bind(('', port))\n    server_sock.listen(5)\n    server_sock.setblocking(0)\n\n    events = []\n    events.append((server_sock, 'listen'))\n    events.append((work_sock, 'listen'))\n\n    while True:\n        read_sockets, _, exception_sockets = select.select(events, [], events)\n        for sock, action in read_sockets:\n            if sock is server_sock:\n                client_conn, client_addr = sock.accept()\n                client_conn.setblocking(0)\n                events.append((client_conn, 'read'))\n            elif sock is work_sock:\n                client_conn, client_addr = sock.accept()\n                client_conn.setblocking(0)\n                events.append((client_conn, 'read'))\n            else:\n                data = sock.recv(1024)\n                if not data:\n                    events.remove((sock, 'read'))\n                    sock.close()\n                else:\n                    send_fd(work_sock, sock.fileno())\n        for sock, action in exception_sockets:\n            events.remove((sock, 'read'))\n            sock.close()\n```"
  },
  {
    "Task_id": 401,
    "Instruction": "Task Description: Implement a multithreaded TCP echo server that receives data from a client, processes it, and sends it back to the client in chunks. The server should handle client connections in a separate thread and support graceful termination when receiving a \"QUIT\" command.\n\nClass Description: EchoServer is a threaded TCP server that echoes received data back to the client. It handles one client connection at a time, processes incoming data, and sends it back in configurable chunk sizes. The server can be configured to delay resending until triggered by an external event.\n\nAttributes:\n- host: str - The host IP address to bind the server to\n- port: int - The port number to listen on\n- sock: socket.socket - The TCP socket object for server operations\n- buffer: str - Accumulates received data before echoing back\n- start_resend_event: threading.Event - Optional event to trigger when to start echoing data back\n- chunk_size: int - Size of data chunks to send back to client (default: 1 byte)\n\nMethods:\n- __init__(host: str, port: int) -> None - Initializes the server with host and port\n- run() -> None - Main thread method that handles client connection, data reception, and echoing back data. Runs in a separate thread when started. Processes data until \"QUIT\" is received or connection is closed.",
    "Canonical_solution": "import socket\nimport threading\nimport time\n\nclass EchoServer(threading.Thread):\n    def __init__(self, host, port):\n        threading.Thread.__init__(self)\n        self.host = host\n        self.port = port\n        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.buffer = \"\"\n        self.start_resend_event = None\n        self.chunk_size = 1\n\n    def run(self):\n        self.sock.bind((self.host, self.port))\n        self.sock.listen(1)\n        conn, client = self.sock.accept()\n        \n        while True:\n            data = conn.recv(1)\n            if not data:\n                break\n            self.buffer += data\n            if \"QUIT\\n\" in self.buffer:\n                break\n\n        self.buffer = self.buffer.replace(\"QUIT\\n\", '')\n\n        if self.start_resend_event:\n            self.start_resend_event.wait()\n\n        try:\n            while self.buffer:\n                n = conn.send(self.buffer[:self.chunk_size])\n                time.sleep(0.001)\n                self.buffer = self.buffer[n:]\n        except:\n            pass\n\n        conn.close()\n        self.sock.close()",
    "Code_level": "Class-level",
    "FSMID_for_test": 66,
    "right_result": "```python\nimport socket\nimport threading\n\nclass EchoServer:\n    def __init__(self, host: str, port: int) -> None:\n        self.host = host\n        self.port = port\n        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.sock.bind((self.host, self.port))\n        self.sock.listen()\n        self.buffer = \"\"\n        self.start_resend_event = threading.Event()\n        self.chunk_size = 1\n\n    def run(self) -> None:\n        while True:\n            conn, addr = self.sock.accept()\n            client_thread = threading.Thread(target=self.handle_client, args=(conn,))\n            client_thread.start()\n\n    def handle_client(self, conn: socket.socket) -> None:\n        try:\n            while True:\n                data = conn.recv(self.chunk_size)\n                if not data:\n                    break\n                self.buffer += data.decode()\n                if self.buffer == \"QUIT\":\n                    break\n                self.start_resend_event.set()\n                self.start_resend_event.clear()\n                while not self.start_resend_event.is_set():\n                    pass\n                conn.sendall(self.buffer.encode())\n                self.buffer = \"\"\n        finally:\n            conn.close()\n```"
  },
  {
    "Task_id": 402,
    "Instruction": "Task Description: Implement a TCP server-client communication system in Python using socket programming and multiprocessing. The system should allow for asynchronous handling of client connections and bidirectional data exchange.\n\nClass Description: The system consists of two main classes: TCPServer for handling incoming connections and TCPClient for establishing connections to the server. The TCPServer runs in a separate process to handle client connections asynchronously.\n\nAttributes:\n- TCPServer:\n  - port: int - The port number on which the server listens for connections\n  - process: Process - The multiprocessing Process object running the server\n  - is_running: bool - Flag indicating whether the server is currently running\n\n- TCPClient:\n  - port: int - The port number to connect to on the server\n  - sock: socket - The TCP socket object for communication with the server\n\nMethods:\n- TCPServer:\n  - start() -> None - Starts the server in a separate process\n  - stop() -> None - Stops the server process\n  - _subprocess_server_tcp(port: int) -> None - Internal method running in the subprocess to handle client connections (accepts connections and echoes received data)\n\n- TCPClient:\n  - send(data: Union[str, bytes]) -> bytes - Sends data to the server and returns the response\n  - close() -> None - Closes the client connection\n  - __del__() -> None - Destructor that ensures proper connection cleanup",
    "Canonical_solution": "import socket\nfrom multiprocessing import Process\nimport os\nimport time\n\nclass TCPServer:\n    def __init__(self, port):\n        self.port = int(port)\n        self.process = None\n        self.is_running = False\n\n    def start(self):\n        args = [self.port]\n        self.process = Process(target=self._subprocess_server_tcp, args=args)\n        self.process.start()\n        time.sleep(1)\n        self.is_running = True\n\n    def stop(self):\n        try:\n            os.kill(self.process.pid, 9)\n        except OSError:\n            self.process.terminate()\n        finally:\n            self.is_running = False\n\n    def _subprocess_server_tcp(self, port):\n        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        s.bind(('localhost', port))\n        s.listen(True)\n        conn, addr = s.accept()\n\n        while True:\n            data = conn.recv(1024)\n            conn.send(b\"RECEIVED: \" + bytes(data))\n\n        conn.close()\n\nclass TCPClient:\n    def __init__(self, port):\n        self.port = int(port)\n        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.sock.connect(('localhost', self.port))\n\n    def send(self, data):\n        if isinstance(data, str):\n            data = data.encode('utf-8')\n\n        self.sock.sendall(data)\n        return self.sock.recv(len(data) + 11)\n\n    def close(self):\n        try:\n            self.sock.close()\n        except socket.error:\n            pass\n\n    def __del__(self):\n        self.close()",
    "Code_level": "Class-level",
    "FSMID_for_test": 66,
    "right_result": "```python\nimport socket\nimport multiprocessing\nfrom typing import Union\n\nclass TCPServer:\n    def __init__(self, port: int):\n        self.port = port\n        self.process = None\n        self.is_running = False\n\n    def start(self) -> None:\n        self.process = multiprocessing.Process(target=self._subprocess_server_tcp, args=(self.port,))\n        self.process.start()\n        self.is_running = True\n\n    def stop(self) -> None:\n        self.is_running = False\n        self.process.terminate()\n        self.process.join()\n\n    def _subprocess_server_tcp(self, port: int) -> None:\n        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:\n            s.bind(('', port))\n            s.listen()\n            while True:\n                conn, addr = s.accept()\n                with conn:\n                    while True:\n                        data = conn.recv(1024)\n                        if not data:\n                            break\n                        conn.sendall(data)\n\nclass TCPClient:\n    def __init__(self, port: int):\n        self.port = port\n        self.sock = None\n\n    def send(self, data: Union[str, bytes]) -> bytes:\n        if self.sock is None:\n            self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n            self.sock.connect(('', self.port))\n        self.sock.sendall(data)\n        return self.sock.recv(1024)\n\n    def close(self) -> None:\n        if self.sock:\n            self.sock.close()\n            self.sock = None\n\n    def __del__(self) -> None:\n        self.close()\n```"
  },
  {
    "Task_id": 403,
    "Instruction": "Task Description: Create a TCP server that listens for incoming client connections, receives data from connected clients, and handles the connection in a separate thread to allow for concurrent operations.\n\nFunction Description: The code consists of two main functions: `start_server()` initializes and sets up the TCP server socket, while `start_server_thread()` handles the client connection in a separate thread, receiving data and managing the connection lifecycle.\n\nInput: \n- `start_server()`: No input parameters.\n- `start_server_thread()`: No input parameters.\n\nOutput: \n- `start_server()`: No return value, but it initializes the global `bad_socket` object.\n- `start_server_thread()`: No return value, but it prints connection details and handles data reception until the `stop` flag is set to `True`.\n\n---\n\nClass Description: This task can also be implemented as a class to encapsulate the TCP server functionality, making it more reusable and manageable.\n\nAttributes:\n- `bad_socket`: [socket.socket] - The TCP server socket object.\n- `stop`: [bool] - A flag to control the server thread's execution.\n\nMethods:\n- `start_server()` -> None - Initializes and sets up the TCP server socket.\n- `start_server_thread()` -> None - Handles client connections and data reception in a separate thread.\n- `stop_server()` -> None - Sets the `stop` flag to `True` to terminate the server thread gracefully.",
    "Canonical_solution": "import socket\nimport threading\nimport time\n\nbad_socket = None\nstop = False\n\ndef start_server():\n    global bad_socket\n    bad_socket = socket.socket(socket.AF_INET6, socket.SOCK_STREAM)\n    bad_socket.settimeout(0.5)  # timeout of 500ms\n    bad_socket.bind((\"\", 0))\n    bad_socket.listen(5)\n\ndef start_server_thread():\n    print(\"Before accept\")\n    (conn, addr) = bad_socket.accept()\n    print(\"Connected with {0}:{1}\".format(addr[0], addr[1]))\n    while True:\n        if stop:\n            break\n        try:\n            conn.recv(1024)\n            # sleep for 1 ms. This limits the rate to 1MBytes/sec or less\n            time.sleep(0.001)\n        except Exception as e:\n            print(e)\n    print(\"server thread stopped\")\n    bad_socket.close()",
    "Code_level": "Function-level",
    "FSMID_for_test": 66,
    "right_result": "```python\nimport socket\nimport threading\n\nclass TCPServer:\n    def __init__(self):\n        self.bad_socket = None\n        self.stop = False\n\n    def start_server(self):\n        self.bad_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.bad_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        self.bad_socket.bind(('localhost', 12345))\n        self.bad_socket.listen(5)\n\n    def start_server_thread(self):\n        while not self.stop:\n            client_socket, addr = self.bad_socket.accept()\n            print(f\"Connection from {addr}\")\n            client_thread = threading.Thread(target=self.handle_client, args=(client_socket,))\n            client_thread.start()\n\n    def handle_client(self, client_socket):\n        while not self.stop:\n            try:\n                data = client_socket.recv(1024)\n                if not data:\n                    break\n                print(f\"Received data: {data.decode()}\")\n            except Exception as e:\n                print(f\"Error: {e}\")\n                break\n        client_socket.close()\n\n    def stop_server(self):\n        self.stop = True\n        if self.bad_socket:\n            self.bad_socket.close()\n```"
  },
  {
    "Task_id": 404,
    "Instruction": "Task Description: Implement a simple HTTP server using TCP sockets in Python that can handle basic GET and HEAD requests, send appropriate responses, and stream data to connected clients.\n\nClass Description: HTTPServer is a TCP-based HTTP server implementation that handles incoming client connections, processes HTTP requests, and manages data streaming to clients.\n\nAttributes:\n- socket: [socket.socket] - The TCP socket object used for server operations\n- conn: [socket.socket] - The active client connection socket\n- host: [str] - The server's host address (None if bound to all interfaces)\n- port: [int] - The server's listening port\n- bound: [bool] - Flag indicating whether the server is bound to an address\n\nMethods:\n- bind(host=\"127.0.0.1\", port=0) -> None - Binds the server to the specified host and port. If port is 0, uses an available port. Sets up listening socket.\n- open(timeout=30) -> HTTPRequest - Accepts an incoming connection, processes the HTTP request, and returns the parsed request object. Times out after specified seconds.\n- write(data) -> None - Sends data to the connected client. Raises IOError if no active connection.\n- close(client_only=False) -> None - Closes the client connection and optionally the server socket. If client_only is True, keeps server socket open.\n\nHelper Class Description: HTTPRequest is used to parse incoming HTTP requests from raw request text.\n\nAttributes:\n- rfile: [BytesIO] - Buffer containing the request data\n- raw_requestline: [bytes] - The first line of the HTTP request\n- error_code: [int] - Error code if request parsing failed\n- error_message: [str] - Error message if request parsing failed\n- command: [str] - The HTTP method (e.g., \"GET\", \"HEAD\") from parsed request\n\nMethods:\n- parse_request() -> None - Parses the HTTP request (inherited from BaseHTTPRequestHandler)\n- send_error(code, message) -> None - Stores error information when request parsing fails",
    "Canonical_solution": "import socket\nfrom io import BytesIO\ntry:\n    from BaseHTTPServer import BaseHTTPRequestHandler\nexcept ImportError:\n    from http.server import BaseHTTPRequestHandler\n\nclass HTTPRequest(BaseHTTPRequestHandler):\n    def __init__(self, request_text):\n        self.rfile = BytesIO(request_text)\n        self.raw_requestline = self.rfile.readline()\n        self.error_code = self.error_message = None\n        self.parse_request()\n\n    def send_error(self, code, message):\n        self.error_code = code\n        self.error_message = message\n\nclass HTTPServer:\n    def __init__(self):\n        self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.conn = self.host = self.port = None\n        self.bound = False\n\n    def bind(self, host=\"127.0.0.1\", port=0):\n        try:\n            self.socket.bind((host or \"\", port))\n        except socket.error as err:\n            raise OSError(err)\n\n        self.socket.listen(1)\n        self.bound = True\n        self.host, self.port = self.socket.getsockname()\n        if self.host == \"0.0.0.0\":\n            self.host = None\n\n    def open(self, timeout=30):\n        self.socket.settimeout(timeout)\n\n        try:\n            conn, addr = self.socket.accept()\n            conn.settimeout(None)\n        except socket.timeout:\n            raise OSError(\"Socket accept timed out\")\n\n        try:\n            req_data = conn.recv(1024)\n        except socket.error:\n            raise OSError(\"Failed to read data from socket\")\n\n        req = HTTPRequest(req_data)\n        if req.command not in (\"GET\", \"HEAD\"):\n            conn.send(b\"HTTP/1.1 501 Not Implemented\\r\\n\")\n            conn.close()\n            raise OSError(\"Invalid request method: {0}\".format(req.command))\n\n        try:\n            conn.send(b\"HTTP/1.1 200 OK\\r\\n\")\n            conn.send(b\"Server: Livestreamer\\r\\n\")\n            conn.send(b\"Content-Type: video/unknown\\r\\n\")\n            conn.send(b\"\\r\\n\")\n        except socket.error:\n            raise OSError(\"Failed to write data to socket\")\n\n        if req.command == \"HEAD\":\n            conn.close()\n            raise OSError\n\n        self.conn = conn\n        return req\n\n    def write(self, data):\n        if not self.conn:\n            raise IOError(\"No connection\")\n        self.conn.sendall(data)\n\n    def close(self, client_only=False):\n        if self.conn:\n            self.conn.close()\n        if not client_only:\n            self.socket.close()",
    "Code_level": "Class-level",
    "FSMID_for_test": 66,
    "right_result": "```python\nimport socket\nimport threading\nfrom io import BytesIO\n\nclass HTTPRequest:\n    def __init__(self):\n        self.rfile = BytesIO()\n        self.raw_requestline = b''\n        self.error_code = 0\n        self.error_message = ''\n        self.command = ''\n\n    def parse_request(self):\n        self.rfile.seek(0)\n        request_line = self.rfile.readline()\n        if not request_line:\n            self.error_code = 400\n            self.error_message = 'Bad Request'\n            return\n        self.raw_requestline = request_line\n        request_line = request_line.decode('utf-8')\n        self.command, _, _ = request_line.partition(' ')\n\nclass HTTPServer:\n    def __init__(self):\n        self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.conn = None\n        self.host = None\n        self.port = 0\n        self.bound = False\n\n    def bind(self, host=\"127.0.0.1\", port=0):\n        self.host = host\n        self.port = port\n        self.socket.bind((self.host, self.port))\n        self.socket.listen()\n        self.bound = True\n\n    def open(self, timeout=30):\n        self.conn, self.address = self.socket.accept()\n        self.conn.settimeout(timeout)\n        request = HTTPRequest()\n        request.parse_request()\n        return request\n\n    def write(self, data):\n        if not self.conn:\n            raise IOError('No active connection')\n        self.conn.sendall(data)\n\n    def close(self, client_only=False):\n        if self.conn:\n            self.conn.close()\n            self.conn = None\n        if not client_only:\n            self.socket.close()\n            self.socket = None\n            self.bound = False\n\ndef handle_client(server):\n    try:\n        request = server.open()\n        if request.error_code:\n            server.write(b'HTTP/1.1 ' + str(request.error_code).encode() + b' ' + request.error_message.encode() + b'\\r\\n\\r\\n')\n        else:\n            server.write(b'HTTP/1.1 200 OK\\r\\n\\r\\n')\n            server.write(b'Content-Length: 11\\r\\n')\n            server.write(b'Content-Type: text/plain\\r\\n')\n            server.write(b'\\r\\n')\n            server.write(b'Hello World')\n        server.close(client_only=True)\n    except Exception as e:\n        server.close(client_only=True)\n\ndef start_server(host=\"127.0.0.1\", port=0):\n    server = HTTPServer()\n    server.bind(host, port)\n    while True:\n        server.conn, address = server.socket.accept()\n        threading.Thread(target=handle_client, args=(server,)).start()\n```"
  },
  {
    "Task_id": 406,
    "Instruction": "Task Description: Implement a TCP forwarding server that acts as an intermediary between client connections and a remote device, facilitating bidirectional communication between them.\n\nClass Description: TCPForwardServer is a class that establishes a TCP server to forward traffic between connected clients and a remote device. It manages multiple client connections simultaneously using select-based I/O multiplexing and maintains channel mappings between client and device sockets.\n\nAttributes:\n- input_list: List[socket.socket] - List of sockets being monitored for incoming data\n- channel: Dict[socket.socket, socket.socket] - Mapping between client and device sockets\n- _server: socket.socket - The main server socket accepting client connections\n- _rdev: Device - The remote device to connect to\n- _rport: int - The port number on the remote device\n- BUFFER_SIZE: int - Size of the data buffer for socket operations\n- DELAY: float - Delay between select operations in seconds\n\nMethods:\n- __init__(lhost: str, lport: int, rdev: Device, rport: int) -> None - Initializes the TCP forwarding server with local host/port and remote device/port information\n- main_loop() -> None - Main server loop that handles incoming connections and data using select\n- on_accept() -> None - Handles new client connections and establishes corresponding device connections\n- on_close() -> None - Cleans up resources when a connection is closed\n- on_recv() -> None - Handles incoming data by forwarding it to the corresponding channel",
    "Canonical_solution": "import socket\nimport select\nimport time\nfrom typing import Dict\n\nclass TCPForwardServer:\n    def __init__(self, lhost: str, lport: int, rdev: Device, rport: int):\n        self.input_list = []\n        self.channel: Dict[socket.socket, socket.socket] = {}\n        \n        self._server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self._server.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        self._server.bind((lhost, lport))\n        self._server.listen(200)\n        self._rdev = rdev\n        self._rport = rport\n        self.BUFFER_SIZE = 4096\n        self.DELAY = 0.0001\n    \n    def main_loop(self):\n        self.input_list.append(self._server)\n        while True:\n            time.sleep(self.DELAY)\n            inputready, _, _ = select.select(self.input_list, [], [])\n            for self.s in inputready:\n                if self.s == self._server:\n                    self.on_accept()\n                    break\n                self.data = self.s.recv(self.BUFFER_SIZE)\n                if len(self.data) == 0:\n                    self.on_close()\n                else:\n                    self.on_recv()\n\n    def on_accept(self):\n        try:\n            sock_proxy = self._rdev.create_inner_connection(self._rport)\n            devicesock = sock_proxy.get_socket()\n        except Exception:\n            devicesock = None\n\n        clientsock, clientaddr = self._server.accept()\n        if devicesock:\n            print(clientaddr, \"has connected\")\n            self.input_list.append(clientsock)\n            self.input_list.append(devicesock)\n            self.channel[clientsock] = devicesock\n            self.channel[devicesock] = clientsock\n        else:\n            print(\"Can't establish connection with device inner server.\")\n            print(\"Closing connection with client side\", clientaddr)\n            clientsock.close()\n        \n    def on_close(self):\n        print(self.s.getpeername(), \"has disconnected\")\n        self.input_list.remove(self.s)\n        self.input_list.remove(self.channel[self.s])\n        out = self.channel[self.s]\n        self.channel[out].close()\n        self.channel[self.s].close()\n        del self.channel[out]\n        del self.channel[self.s]\n    \n    def on_recv(self):\n        data = self.data\n        self.channel[self.s].send(data)",
    "Code_level": "Class-level",
    "FSMID_for_test": 66,
    "right_result": "```python\nimport socket\nimport select\nimport threading\n\nclass Device:\n    def __init__(self, host, port):\n        self.host = host\n        self.port = port\n\nclass TCPForwardServer:\n    BUFFER_SIZE = 4096\n    DELAY = 0.1\n\n    def __init__(self, lhost: str, lport: int, rdev: Device, rport: int) -> None:\n        self.input_list = []\n        self.channel = {}\n        self._server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self._server.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        self._server.bind((lhost, lport))\n        self._server.listen()\n        self._rdev = rdev\n        self._rport = rport\n\n    def main_loop(self) -> None:\n        self.input_list.append(self._server)\n        while True:\n            readable, writable, exceptional = select.select(self.input_list, [], self.input_list)\n            for s in readable:\n                if s is self._server:\n                    self.on_accept()\n                else:\n                    self.on_recv(s)\n\n            for s in exceptional:\n                self.on_close(s)\n\n    def on_accept(self) -> None:\n        client_socket, client_address = self._server.accept()\n        device_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        device_socket.connect((self._rdev.host, self._rdev.port))\n        self.channel[client_socket] = device_socket\n        self.channel[device_socket] = client_socket\n        self.input_list.append(client_socket)\n        self.input_list.append(device_socket)\n\n    def on_close(self, s: socket.socket) -> None:\n        if s in self.channel:\n            self.channel[self.channel[s]].close()\n            del self.channel[s]\n        self.input_list.remove(s)\n\n    def on_recv(self, s: socket.socket) -> None:\n        data = s.recv(self.BUFFER_SIZE)\n        if data:\n            self.channel[s].sendall(data)\n        else:\n            self.on_close(s)\n```"
  },
  {
    "Task_id": 41,
    "Instruction": "Task Description: Create a Python class that implements an asynchronous HTTP client for interacting with a REST API, supporting PUT and GET operations for question-answer pairs.\n\nClass Description: The Client class provides asynchronous HTTP communication capabilities using httpx and asyncio. It handles JSON data exchange with a REST API endpoint, allowing storage (PUT) and retrieval (GET) of question-answer pairs.\n\nAttributes:\n_uri: str - The base URI of the REST API endpoint (default: \"http://localhost:8000\")\n_CLIENT_HEADER: dict - Static dictionary containing HTTP headers for JSON content type\n\nMethods:\n_put: async (question: str, answer: str) -> int - Internal async method that sends a question-answer pair to the API via POST request. Returns HTTP status code.\n_get: async (question: str) -> str - Internal async method that retrieves an answer for a given question via POST request. Returns the answer string or None.\nput: (question: str, answer: str) -> int - Synchronous wrapper for _put that runs the async operation. Returns HTTP status code.\nget: (question: str) -> str - Synchronous wrapper for _get that runs the async operation. Returns the answer string or None.",
    "Canonical_solution": "import asyncio\nimport json\nimport httpx\n\n_CLIENT_HEADER = {\"Content-Type\": \"application/json\", \"Accept\": \"application/json\"}\n\nclass Client:\n    def __init__(self, uri: str = \"http://localhost:8000\"):\n        self._uri = uri\n\n    async def _put(self, question: str, answer: str):\n        async with httpx.AsyncClient() as client:\n            data = {\n                \"prompt\": question,\n                \"answer\": answer,\n            }\n            response = await client.post(\n                f\"{self._uri}/put\", headers=_CLIENT_HEADER, data=json.dumps(data)\n            )\n        return response.status_code\n\n    async def _get(self, question: str):\n        async with httpx.AsyncClient() as client:\n            data = {\n                \"prompt\": question,\n            }\n            response = await client.post(\n                f\"{self._uri}/get\", headers=_CLIENT_HEADER, data=json.dumps(data)\n            )\n        return response.json().get(\"answer\")\n\n    def put(self, question: str, answer: str):\n        return asyncio.run(self._put(question, answer))\n\n    def get(self, question: str):\n        return asyncio.run(self._get(question))",
    "Code_level": "Class-level",
    "FSMID_for_test": 59,
    "right_result": "```python\nimport httpx\nimport asyncio\n\nclass Client:\n    _uri = \"http://localhost:8000\"\n    _CLIENT_HEADER = {\"Content-Type\": \"application/json\"}\n\n    async def _put(self, question: str, answer: str) -> int:\n        data = {\"question\": question, \"answer\": answer}\n        async with httpx.AsyncClient() as client:\n            response = await client.post(self._uri, json=data, headers=self._CLIENT_HEADER)\n            return response.status_code\n\n    async def _get(self, question: str) -> str:\n        data = {\"question\": question}\n        async with httpx.AsyncClient() as client:\n            response = await client.post(self._uri, json=data, headers=self._CLIENT_HEADER)\n            if response.status_code == 200:\n                return response.json().get(\"answer\")\n            return None\n\n    def put(self, question: str, answer: str) -> int:\n        return asyncio.run(self._put(question, answer))\n\n    def get(self, question: str) -> str:\n        return asyncio.run(self._get(question))\n```"
  },
  {
    "Task_id": 410,
    "Instruction": "Task Description: Create a TCP server that provides a Python console interface for remote clients, allowing them to interact with a Python environment through a socket connection.\n\nClass Description: PythonConsoleServer - A socketserver handler class that manages client connections and provides a Python console interface.\n\nAttributes:\n- env: [Any] - The Python environment/namespace that will be used for the console session.\n- console: [TerminatorConsole] - An instance of TerminatorConsole that handles the actual console interaction.\n- socketio: [io.TextIOWrapper] - A file-like object for socket communication.\n\nMethods:\n- setup() -> None - Initializes the console handler with the environment.\n- handle() -> None - Main method that handles client connections, redirects stdio, and runs the console.\n- verify_request(request, client_address) -> bool - Always returns True to accept all connections (override for security).\n- finish() -> None - Cleanup method (currently does nothing).\n\nClass Description: TerminatorConsole - Handles the actual console interaction and I/O processing.\n\nAttributes:\n- env: [Any] - The Python environment/namespace for the console session.\n- server: [PythonConsoleServer] - Reference to the server instance.\n\nMethods:\n- __init__(env) -> None - Initializes with the given environment.\n- parse_telnet(data) -> str - Processes telnet control characters from input.\n- raw_input(prompt=None) -> str - Reads input from client with optional prompt.\n- write(data) -> None - Writes output to the client.\n- run(server) -> None - Starts the interactive console session with the given server.\n\nFunction Description: spawn - Creates and starts the TCP server in a separate thread.\n\nInput:\n- env: [Any] - The Python environment/namespace to be used in the console sessions.\n\nOutput:\n- tuple: (threading.Thread, socketserver.TCPServer) - Returns the server thread and TCP server instance.",
    "Canonical_solution": "import socket\nimport threading\nimport sys\nif sys.version_info < (3, 0):\n    import SocketServer as socketserver\nelse:\n    import socketserver\nimport re\n\nclass PythonConsoleServer(socketserver.BaseRequestHandler):\n    env = None\n    \n    def setup(self):\n        self.console = TerminatorConsole(PythonConsoleServer.env)\n\n    def handle(self):\n        try:\n            self.socketio = self.request.makefile(mode='rw')\n            sys.stdout = self.socketio\n            sys.stdin = self.socketio\n            sys.stderr = self.socketio\n            self.console.run(self)\n        finally:\n            sys.stdout = sys.__stdout__\n            sys.stdin = sys.__stdin__\n            sys.stderr = sys.__stderr__\n            self.socketio.close()\n\n    def verify_request(self, request, client_address):\n        return True\n\n    def finish(self):\n        pass\n\nclass TerminatorConsole:\n    def __init__(self, env):\n        self.env = env\n\n    def parse_telnet(self, data):\n        data = re.sub('([^\\r])\\r', '\\\\1', data)\n        data = data.replace('\\r\\x00', '')\n        data = data.replace('\\x00', '')\n        return data\n\n    def raw_input(self, prompt=None):\n        if prompt:\n            self.write(prompt)\n\n        buf = ''\n        while True:\n            data = self.server.socketio.read(1)\n            if data == '\\n' or data == '\\006':\n                buf = self.parse_telnet(buf + data)\n                if buf != '':\n                    return buf\n            elif data == '\\004' or data == '':\n                raise EOFError\n            else:\n                buf += data\n\n    def write(self, data):\n        self.server.socketio.write(data)\n        self.server.socketio.flush()\n\n    def run(self, server):\n        self.server = server\n        self.interact()\n\ndef spawn(env):\n    PythonConsoleServer.env = env\n    tcpserver = socketserver.TCPServer(('127.0.0.1', 0), PythonConsoleServer)\n    debugserver = threading.Thread(target=tcpserver.serve_forever, name=\"DebugServer\")\n    debugserver.setDaemon(True)\n    debugserver.start()\n    return (debugserver, tcpserver)",
    "Code_level": "Class-level",
    "FSMID_for_test": 70,
    "right_result": "```python\nimport socketserver\nimport threading\nimport io\n\nclass PythonConsoleServer(socketserver.BaseRequestHandler):\n    def __init__(self, env):\n        self.env = env\n        self.console = TerminatorConsole(env, self)\n        self.socketio = io.TextIOWrapper(self.request.makefile('rwb'), encoding='utf-8')\n\n    def setup(self):\n        self.console.setup()\n\n    def handle(self):\n        self.console.run(self)\n\n    def verify_request(self, request, client_address):\n        return True\n\n    def finish(self):\n        pass\n\nclass TerminatorConsole:\n    def __init__(self, env, server):\n        self.env = env\n        self.server = server\n\n    def parse_telnet(self, data):\n        return data\n\n    def raw_input(self, prompt=None):\n        return input(prompt)\n\n    def write(self, data):\n        print(data, end='')\n\n    def run(self, server):\n        try:\n            while True:\n                data = server.socketio.readline()\n                if not data:\n                    break\n                data = self.parse_telnet(data)\n                exec(data, self.env)\n        except EOFError:\n            pass\n\ndef spawn(env):\n    server = socketserver.TCPServer((\"\", 0), PythonConsoleServer(env))\n    thread = threading.Thread(target=server.serve_forever)\n    thread.daemon = True\n    thread.start()\n    return thread, server\n```"
  },
  {
    "Task_id": 412,
    "Instruction": "Task Description: Implement a TCP server using Python's socketserver module to handle client connections and process incoming messages asynchronously.\n\nClass Description: The solution consists of two classes: ReceiveMsgSocketServer (a request handler) and SocketServerManager (a server manager). The handler processes incoming messages and the manager controls server lifecycle.\n\nAttributes:\n\nport: int - The port number on which the server will listen\nrequest_handler: class - The handler class for processing client requests\nserver: socketserver.ThreadingTCPServer - The TCP server instance\nserver_thread: threading.Thread - The thread running the server (when not in main thread)\n\nMethods:\n\nReceiveMsgSocketServer.handle() -> None - Processes client requests, receives messages, and sends responses\nReceiveMsgSocketServer.msg_callback(msg: dict) -> None - Static method to handle received messages (default prints messages)\nSocketServerManager.start_server(main_thread: bool = True) -> int or None - Starts the server, returns thread ID if not in main thread\nSocketServerManager.stop_server() -> None - Stops the server and cleans up resources",
    "Canonical_solution": "import ctypes\nimport json\nimport socketserver\nimport threading\n\nclass ReceiveMsgSocketServer(socketserver.BaseRequestHandler):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n\n    def handle(self):\n        conn = self.request\n        while True:\n            try:\n                ptr_data = b\"\"\n                while True:\n                    data = conn.recv(1024)\n                    ptr_data += data\n                    if len(data) == 0 or data[-1] == 0xA:\n                        break\n                msg = json.loads(ptr_data.decode('utf-8'))\n                ReceiveMsgSocketServer.msg_callback(msg)\n            except OSError:\n                break\n            except json.JSONDecodeError:\n                pass\n            conn.sendall(\"200 OK\".encode())\n        conn.close()\n\n    @staticmethod\n    def msg_callback(msg):\n        print(msg)\n\nclass SocketServerManager:\n    def __init__(self, port: int = 10808, request_handler=ReceiveMsgSocketServer):\n        self.port = port\n        self.request_handler = request_handler\n        self.server = None\n        self.server_thread = None\n\n    def start_server(self, main_thread: bool = True) -> int or None:\n        ip_port = (\"127.0.0.1\", self.port)\n        try:\n            self.server = socketserver.ThreadingTCPServer(ip_port, self.request_handler)\n            if main_thread:\n                self.server.serve_forever()\n            else:\n                self.server_thread = threading.Thread(target=self.server.serve_forever)\n                self.server_thread.setDaemon(True)\n                self.server_thread.start()\n                return self.server_thread.ident\n        except KeyboardInterrupt:\n            pass\n        except Exception as e:\n            print(e)\n        return None\n\n    def stop_server(self):\n        if self.server:\n            self.server.shutdown()\n        if self.server_thread:\n            self.server_thread.join()",
    "Code_level": "Class-level",
    "FSMID_for_test": 70,
    "right_result": "```python\nimport socketserver\nimport threading\n\nclass ReceiveMsgSocketServer(socketserver.BaseRequestHandler):\n    def handle(self):\n        while True:\n            data = self.request.recv(1024)\n            if not data:\n                break\n            msg = self.parse_message(data)\n            self.msg_callback(msg)\n\n    @staticmethod\n    def msg_callback(msg):\n        print(msg)\n\n    def parse_message(self, data):\n        return data.decode('utf-8')\n\nclass SocketServerManager:\n    def __init__(self, port, request_handler):\n        self.port = port\n        self.request_handler = request_handler\n        self.server = socketserver.ThreadingTCPServer((\"\", self.port), self.request_handler)\n        self.server_thread = None\n\n    def start_server(self, main_thread=True):\n        self.server_thread = threading.Thread(target=self.server.serve_forever)\n        if not main_thread:\n            self.server_thread.start()\n        return self.server_thread.ident\n\n    def stop_server(self):\n        self.server.shutdown()\n        self.server.server_close()\n        if self.server_thread:\n            self.server_thread.join()\n```"
  },
  {
    "Task_id": 413,
    "Instruction": "Task Description: Implement a TCP server using Python's socketserver module to handle incoming client connections, process JSON messages, and interact with a WeChat robot COM object for message processing and user information retrieval.\n\nClass Description: ReceiveMsgBaseServer is a custom request handler class that inherits from socketserver.BaseRequestHandler. It handles client connections, processes incoming JSON messages, and interacts with a WeChat robot COM object to enrich message data with user information.\n\nAttributes:\n- None (This class doesn't maintain persistent attributes beyond the inherited ones from BaseRequestHandler)\n\nMethods:\n- __init__(*args, **kwargs) -> None - Initializes the base request handler\n- handle() -> None - Main method that processes client connections, receives and parses JSON messages, and calls the message callback\n- msg_callback(msg: dict) -> None - Static method that processes the received message by interacting with WeChat robot COM objects to enrich message data with user information\n\nFunction Description: start_socket_server creates and starts a threaded TCP server that uses the ReceiveMsgBaseServer handler to process client connections.\n\nInput:\n- port: int (default=10808) - The port number to bind the server to\n- request_handler: class (default=ReceiveMsgBaseServer) - The request handler class to use\n- main_thread: bool (default=True) - Whether to run the server in the main thread or a daemon thread\n\nOutput:\n- int or None - Returns the thread identifier if main_thread=False, otherwise None (runs forever in main thread)",
    "Canonical_solution": "import socketserver\nimport threading\nimport comtypes\nimport json\n\nclass ReceiveMsgBaseServer(socketserver.BaseRequestHandler):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n\n    def handle(self):\n        conn = self.request\n        comtypes.CoInitialize()\n        while True:\n            try:\n                ptr_data = b\"\"\n                while True:\n                    data = conn.recv(1024)\n                    ptr_data += data\n                    if len(data) == 0 or data[-1] == 0xA:\n                        break\n                msg = json.loads(ptr_data.decode('utf-8'))\n                ReceiveMsgBaseServer.msg_callback(msg)\n            except OSError:\n                break\n            except json.JSONDecodeError:\n                pass\n            conn.sendall(\"200 OK\".encode())\n        conn.close()\n        comtypes.CoUninitialize()\n\n    @staticmethod\n    def msg_callback(msg):\n        robot = comtypes.client.CreateObject(\"WeChatRobot.CWeChatRobot\")\n        event = comtypes.client.CreateObject(\"WeChatRobot.RobotEvent\")\n        wx = WeChatRobot(msg['pid'], robot, event)\n        userinfo = wx.GetWxUserInfo(msg['wxid'])\n        msg['alias'] = userinfo['wxNumber']\n        if msg['isSendMsg'] == 0:\n            if '@chatroom' in msg['sender']:\n                chatroom_info = wx.GetWxUserInfo(msg['sender'])\n                msg['chatroom_name'] = chatroom_info['wxNickName']\n                msg['nickname'] = wx.GetChatRoomMemberNickname(msg['sender'], msg['wxid'])\n            else:\n                msg['nickname'] = userinfo['wxNickName']\n        print(msg)\n        robot.Release()\n        event.Release()\n\ndef start_socket_server(port: int = 10808,\n                       request_handler: 'ReceiveMsgBaseServer' = ReceiveMsgBaseServer,\n                       main_thread=True) -> int or None:\n    ip_port = (\"127.0.0.1\", port)\n    try:\n        s = socketserver.ThreadingTCPServer(ip_port, request_handler)\n        if main_thread:\n            s.serve_forever()\n        else:\n            socket_server = threading.Thread(target=s.serve_forever)\n            socket_server.setDaemon(True)\n            socket_server.start()\n            return socket_server.ident\n    except KeyboardInterrupt:\n        pass\n    except Exception as e:\n        print(e)\n    return None",
    "Code_level": "Class-level",
    "FSMID_for_test": 70,
    "right_result": "```python\nimport socketserver\nimport json\nimport threading\nimport ctypes\n\nclass ReceiveMsgBaseServer(socketserver.BaseRequestHandler):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n\n    def handle(self):\n        data = self.request.recv(1024).decode('utf-8')\n        try:\n            msg = json.loads(data)\n            self.msg_callback(msg)\n        except json.JSONDecodeError:\n            pass\n\n    @staticmethod\n    def msg_callback(msg: dict):\n        # Interact with WeChat robot COM object here\n        # For example, enrich message data with user information\n        pass\n\ndef start_socket_server(port=10808, request_handler=ReceiveMsgBaseServer, main_thread=True):\n    server = socketserver.ThreadingTCPServer((\"\", port), request_handler)\n    if main_thread:\n        server.serve_forever()\n    else:\n        server_thread = threading.Thread(target=server.serve_forever)\n        server_thread.start()\n        return server_thread.ident\n```"
  },
  {
    "Task_id": 415,
    "Instruction": "Task Description: Implement a TCP server using Python's socketserver module to handle client requests with proper data framing and error handling.\n\nClass Description: TCPRequestHandler is a custom request handler class that inherits from socketserver.BaseRequestHandler. It handles TCP client connections by implementing methods to receive and send framed data, and processes client requests in the handle() method.\n\nAttributes:\n- request: [socket.socket] - The client connection socket object inherited from BaseRequestHandler\n- client_address: [tuple] - The client address (host, port) inherited from BaseRequestHandler\n- server: [socketserver.BaseServer] - The server instance inherited from BaseRequestHandler\n\nMethods:\n- get_data() -> bytes - Receives and validates framed data from the client. The data is expected to be prefixed with a 2-byte big-endian size field.\n  Input: None\n  Output: bytes - The received payload data (without size prefix)\n  \n- send_data(data: bytes) -> None - Sends framed data to the client by prefixing the payload with a 2-byte big-endian size field.\n  Input: data [bytes] - The payload data to send\n  Output: None\n  \n- handle() -> None - Main request handling method that coordinates receiving and processing client data.\n  Input: None\n  Output: None\n\nClass Description: DNSServer is a server management class that creates and manages TCP/UDP server instances for handling DNS requests.\n\nAttributes:\n- port: [int] - The port number to listen on (default: 53)\n- use_tcp: [bool] - Flag to enable TCP server (default: True)\n- use_udp: [bool] - Flag to enable UDP server (default: False)\n- servers: [list] - List of active server instances\n\nMethods:\n- __init__(port: int = 53, use_tcp: bool = True, use_udp: bool = False) -> None - Initializes the server configuration.\n  Input: \n    port [int] - Server port number\n    use_tcp [bool] - Enable TCP server\n    use_udp [bool] - Enable UDP server\n  Output: None\n  \n- start() -> None - Starts the configured servers in separate threads.\n  Input: None\n  Output: None\n  \n- shutdown() -> None - Shuts down all running server instances.\n  Input: None\n  Output: None",
    "Canonical_solution": "import socketserver\nimport struct\nimport threading\n\nclass TCPRequestHandler(socketserver.BaseRequestHandler):\n    def get_data(self):\n        data = self.request.recv(8192).strip()\n        sz = struct.unpack('>H', data[:2])[0]\n        if sz < len(data) - 2:\n            raise Exception(\"Wrong size of TCP packet\")\n        elif sz > len(data) - 2:\n            raise Exception(\"Too big TCP packet\")\n        return data[2:]\n\n    def send_data(self, data):\n        sz = struct.pack('>H', len(data))\n        return self.request.sendall(sz + data)\n\n    def handle(self):\n        try:\n            data = self.get_data()\n            self.send_data(dns_response(data))\n        except Exception:\n            pass\n\nclass DNSServer:\n    def __init__(self, port=53, use_tcp=True, use_udp=False):\n        self.port = port\n        self.use_tcp = use_tcp\n        self.use_udp = use_udp\n        self.servers = []\n\n    def start(self):\n        if self.use_tcp:\n            self.servers.append(socketserver.ThreadingTCPServer(('', self.port), TCPRequestHandler))\n        if self.use_udp:\n            self.servers.append(socketserver.ThreadingUDPServer(('', self.port), UDPRequestHandler))\n\n        for s in self.servers:\n            thread = threading.Thread(target=s.serve_forever)\n            thread.daemon = True\n            thread.start()\n\n    def shutdown(self):\n        for s in self.servers:\n            s.shutdown()",
    "Code_level": "Class-level",
    "FSMID_for_test": 70,
    "right_result": "```python\nimport socketserver\nimport threading\n\nclass TCPRequestHandler(socketserver.BaseRequestHandler):\n    def get_data(self):\n        size = self.request.recv(2).bigendian_to_int()\n        data = self.request.recv(size)\n        return data\n\n    def send_data(self, data: bytes):\n        size = len(data)\n        self.request.sendall(size.to_bytes(2, 'big'))\n        self.request.sendall(data)\n\n    def handle(self):\n        while True:\n            try:\n                data = self.get_data()\n                # Process data\n            except Exception as e:\n                break\n\nclass DNSServer:\n    def __init__(self, port: int = 53, use_tcp: bool = True, use_udp: bool = False):\n        self.port = port\n        self.use_tcp = use_tcp\n        self.use_udp = use_udp\n        self.servers = []\n\n    def start(self):\n        if self.use_tcp:\n            tcp_server = socketserver.ThreadingTCPServer((\"\", self.port), TCPRequestHandler)\n            tcp_thread = threading.Thread(target=tcp_server.serve_forever)\n            tcp_thread.start()\n            self.servers.append(tcp_server)\n\n    def shutdown(self):\n        for server in self.servers:\n            server.shutdown()\n```"
  },
  {
    "Task_id": 416,
    "Instruction": "Task Description: Implement a TCP server using Python's socketserver module to handle client connections and echo back received messages.\n\nClass Description: The solution consists of two classes: EchoHandler for processing client requests and TCPServerWrapper for managing the TCP server instance.\n\nAttributes:\n- host: str - The host address to bind the server to (default: '' for all interfaces)\n- port: int - The port number to listen on (default: 20000)\n- server: TCPServer - The TCP server instance created with specified host and port\n\nMethods:\n- EchoHandler.handle() -> None - Processes client requests by continuously receiving messages and echoing them back until connection is closed\n- TCPServerWrapper.__init__(host: str = '', port: int = 20000) -> None - Initializes the TCP server with given host and port\n- TCPServerWrapper.serve_forever() -> None - Starts the server and keeps it running indefinitely while printing status information",
    "Canonical_solution": "from socketserver import BaseRequestHandler, TCPServer\n\nclass EchoHandler(BaseRequestHandler):\n    def handle(self):\n        print('Got connection from', self.client_address)\n        while True:\n            msg = self.request.recv(8192)\n            if not msg:\n                break\n            self.request.send(msg)\n\nclass TCPServerWrapper:\n    def __init__(self, host='', port=20000):\n        self.host = host\n        self.port = port\n        self.server = TCPServer((self.host, self.port), EchoHandler)\n\n    def serve_forever(self):\n        print(f'Echo server running on port {self.port}')\n        self.server.serve_forever()",
    "Code_level": "Class-level",
    "FSMID_for_test": 70,
    "right_result": "```python\nimport socketserver\n\nclass EchoHandler(socketserver.BaseRequestHandler):\n    def handle(self):\n        while True:\n            data = self.request.recv(1024)\n            if not data:\n                break\n            self.request.sendall(data)\n\nclass TCPServerWrapper(socketserver.TCPServer):\n    def __init__(self, host='', port=20000):\n        super().__init__(host, port)\n\n    def serve_forever(self):\n        print(\"Server started on port\", self.server_address[1])\n        super().serve_forever()\n```"
  },
  {
    "Task_id": 418,
    "Instruction": "Task Description: Create a TCP server using Python's socketserver module that echoes back any received messages to the client.\n\nClass Description: The implementation consists of two classes: EchoHandler for handling client connections and EchoServer for managing the TCP server. The EchoHandler processes incoming messages and sends them back, while EchoServer initializes and runs the server.\n\nAttributes:\n- host: str - The host address to bind the server to (default: '' for all interfaces)\n- port: int - The port number to listen on (default: 20000)\n- server: TCPServer - The TCP server instance created with the specified host and port\n\nMethods:\n- EchoHandler.handle() -> None - Handles client connections by continuously receiving messages and echoing them back until the connection is closed\n- EchoServer.__init__(host: str = '', port: int = 20000) -> None - Initializes the server with the given host and port\n- EchoServer.serve_forever() -> None - Starts the server and keeps it running indefinitely while printing a status message",
    "Canonical_solution": "from socketserver import BaseRequestHandler, TCPServer\n\nclass EchoHandler(BaseRequestHandler):\n    def handle(self):\n        print('Got connection from', self.client_address)\n        while True:\n            msg = self.request.recv(8192)\n            if not msg:\n                break\n            self.request.send(msg)\n\nclass EchoServer:\n    def __init__(self, host='', port=20000):\n        self.host = host\n        self.port = port\n        self.server = TCPServer((self.host, self.port), EchoHandler)\n\n    def serve_forever(self):\n        print(f'Echo server running on port {self.port}')\n        self.server.serve_forever()",
    "Code_level": "Class-level",
    "FSMID_for_test": 70,
    "right_result": "```python\nimport socketserver\n\nclass EchoHandler(socketserver.BaseRequestHandler):\n    def handle(self):\n        while True:\n            data = self.request.recv(1024)\n            if not data:\n                break\n            self.request.sendall(data)\n\nclass EchoServer(socketserver.TCPServer):\n    def __init__(self, host='', port=20000):\n        super().__init__(host, port)\n\n    def serve_forever(self):\n        print(\"Server running...\")\n        super().serve_forever()\n```"
  },
  {
    "Task_id": 42,
    "Instruction": "Task Description: Create an asynchronous function to send HTTP POST requests using httpx library in Python, handling JSON data and potential errors.\n\nFunction Description: The function sends an asynchronous HTTP POST request to a specified URL with JSON data, optional headers, and timeout settings. It automatically raises exceptions for non-success status codes and returns the parsed JSON response.\n\nInput:\n- url: str - The target URL for the POST request\n- data: dict - The JSON data to be sent in the request body\n- headers: dict (optional) - Additional HTTP headers to include (default: empty dict)\n- timeout: int | None (optional) - Request timeout in seconds (default: None)\n\nOutput:\n- dict - Parsed JSON response from the server if the request is successful\n- Raises httpx.HTTPStatusError if the response status code indicates an error (4xx or 5xx)",
    "Canonical_solution": "import json\nimport httpx\n\nasync def a_send_post_request(\n    url: str, data: dict, headers: dict = {}, timeout: int | None = None\n):\n    async with httpx.AsyncClient() as client:\n        response = await client.post(url, json=data, headers=headers, timeout=timeout)\n        response.raise_for_status()\n        return response.json()",
    "Code_level": "Function-level",
    "FSMID_for_test": 59,
    "right_result": "import httpx\nimport asyncio\n\nasync def send_post_request(url, data, headers=None, timeout=None):\n    headers = headers or {}\n    async with httpx.AsyncClient(timeout=timeout) as client:\n        response = await client.post(url, json=data, headers=headers)\n        response.raise_for_status()\n        return response.json()"
  },
  {
    "Task_id": 420,
    "Instruction": "Task Description: Implement a UDP server in Python using the socketserver module to handle client requests and send responses.\n\nClass Description: The solution consists of two classes: TimeHandler (request handler) and UDPServerWrapper (server wrapper). TimeHandler processes incoming UDP requests and sends back the current time, while UDPServerWrapper manages the UDP server lifecycle.\n\nAttributes:\n- host: str - The host address to bind the server to (default: '' - all interfaces)\n- port: int - The port number to bind the server to (default: 20000)\n- server: UDPServer - The UDP server instance created with the specified host and port\n\nMethods:\n- __init__(host: str = '', port: int = 20000) -> None - Initializes the UDPServerWrapper with host and port, creates a UDPServer instance with TimeHandler\n- serve_forever() -> None - Starts the UDP server and keeps it running indefinitely to handle incoming requests\n\nThe TimeHandler class (inherits from BaseRequestHandler) contains:\n- handle() -> None - Processes each incoming request, prints client info, gets current time, and sends response back to client",
    "Canonical_solution": "from socketserver import BaseRequestHandler, UDPServer\nimport time\n\nclass TimeHandler(BaseRequestHandler):\n    def handle(self):\n        print('Got connection from', self.client_address)\n        msg, sock = self.request\n        resp = time.ctime()\n        sock.sendto(resp.encode('ascii'), self.client_address)\n\nclass UDPServerWrapper:\n    def __init__(self, host='', port=20000):\n        self.host = host\n        self.port = port\n        self.server = UDPServer((self.host, self.port), TimeHandler)\n\n    def serve_forever(self):\n        self.server.serve_forever()",
    "Code_level": "Class-level",
    "FSMID_for_test": 72,
    "right_result": "```python\nimport socketserver\nfrom datetime import datetime\n\nclass TimeHandler(socketserver.BaseRequestHandler):\n    def handle(self):\n        client_address = self.client_address\n        print(f\"Received request from {client_address}\")\n        current_time = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n        self.request.sendall(current_time.encode())\n\nclass UDPServerWrapper(socketserver.UDPServer):\n    def __init__(self, host='', port=20000):\n        super().__init__(host, port)\n        self.RequestHandlerClass = TimeHandler\n\nclass UDPServer:\n    def __init__(self, host='', port=20000):\n        self.host = host\n        self.port = port\n        self.server = UDPServerWrapper(self.host, self.port)\n\n    def serve_forever(self):\n        self.server.serve_forever()\n```"
  },
  {
    "Task_id": 421,
    "Instruction": "Task Description: Create a UDP server using Twisted framework in Python that integrates with Mayavi for processing and executing received commands to manipulate 3D visualizations.\n\nClass Description: The implementation consists of two classes: M2UDP (a custom UDP protocol handler) and MayaviUDPServer (the main server class). The system receives UDP datagrams containing Python commands, executes them in a Mayavi visualization context, and renders the results.\n\nAttributes:\n\nengine: [object] - The Mayavi engine instance for visualization control\nmlab: [module] - The Mayavi mlab module for 3D visualization\nport: [int] - The UDP port number to listen on\nlogto: [file object] - Where to direct logging output\nscene: [object] - The current Mayavi scene (initialized from engine)\nproto: [M2UDP] - The protocol handler instance\n\nMethods:\n\nM2UDP.__init__: [__init__(engine=None, mlab=None)] -> [None] - Initializes the UDP protocol handler with Mayavi engine and mlab references\nM2UDP.datagramReceived: [datagramReceived(data, host_port)] -> [None] - Handles incoming UDP datagrams, executes contained Python code in Mayavi context, and triggers scene rendering\nMayaviUDPServer.__init__: [__init__(engine=None, port=9007, logto=sys.stdout)] -> [None] - Initializes the server with Mayavi engine, port configuration, and logging setup\nMayaviUDPServer.serve: [serve()] -> [None] - Starts the UDP server, binds the protocol handler, and runs the reactor loop",
    "Canonical_solution": "import sys\nimport wx\nfrom twisted.internet import wxreactor\nwxreactor.install()\nfrom twisted.internet.protocol import DatagramProtocol\nfrom twisted.internet import reactor\nfrom twisted.python import log\n\nclass M2UDP(DatagramProtocol):\n    def __init__(self, engine=None, mlab=None):\n        self.engine = engine\n        self.mlab = mlab\n        if self.engine is not None:\n            self.scene = self.engine.current_scene.scene\n\n    def datagramReceived(self, data, host_port):\n        host, port = host_port\n        log.msg(\"Received: %r from %s:%d\" % (data, host, port))\n        c = data.strip()\n        if len(c) > 0:\n            mlab = self.mlab\n            engine = self.engine\n            scene = self.scene\n            camera = scene.camera\n            try:\n                exec(c, locals(), globals())\n            except:\n                log.err()\n            scene.render()\n\nclass MayaviUDPServer:\n    def __init__(self, engine=None, port=9007, logto=sys.stdout):\n        from mayavi import mlab\n        self.engine = engine or mlab.get_engine()\n        self.port = port\n        self.logto = logto\n        self.mlab = mlab\n\n    def serve(self):\n        proto = M2UDP(engine=self.engine, mlab=self.mlab)\n        \n        if self.logto is not None:\n            log.startLogging(self.logto)\n        log.msg('Serving Mayavi2 UDP server on port', self.port)\n        log.msg('Using Engine', self.engine)\n\n        reactor.registerWxApp(wx.GetApp())\n        reactor.listenUDP(self.port, proto)\n        reactor.run()",
    "Code_level": "Class-level",
    "FSMID_for_test": 73,
    "right_result": "```python\nfrom twisted.internet import protocol, reactor\nfrom twisted.protocols import udp\nimport mayavi.mlab as mlab\nfrom mayavi import engine\n\nclass M2UDP(udp.DatagramProtocol):\n    def __init__(self, engine=None, mlab=None):\n        self.engine = engine\n        self.mlab = mlab\n\n    def datagramReceived(self, data, host_port):\n        self.mlab.eval(data.decode())\n        self.engine.render()\n\nclass MayaviUDPServer:\n    def __init__(self, engine=None, port=9007, logto=sys.stdout):\n        self.engine = engine\n        self.port = port\n        self.logto = logto\n        self.proto = M2UDP(engine=self.engine, mlab=mlab)\n\n    def serve(self):\n        reactor.listenUDP(self.port, self.proto, interface='127.0.0.1')\n        reactor.run()\n```"
  },
  {
    "Task_id": 422,
    "Instruction": "Task Description: Implement a UDP server that listens for incoming messages on a specified IP address and port, processes the received data, and terminates when a specific exit command is received.\n\nFunction Description: The function `udp_server` creates a UDP socket, binds it to a local IP address and port, and continuously listens for incoming messages. It processes the received data by decoding it from bytes to a UTF-8 string and checks for an exit command to terminate the loop. The socket is closed once the loop exits.\n\nInput: None\n\nOutput: None",
    "Canonical_solution": "import socket\n\ndef udp_server():\n    UDP_IP = \"127.0.0.1\"\n    UDP_PORT = 6000\n\n    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)  # UDP\n    sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n    sock.bind((UDP_IP, UDP_PORT))\n\n    while True:\n        dataudp, addr = sock.recvfrom(1024)  # buffer size is 1024 bytes\n        try:\n            data = str(dataudp.rstrip('\\x00').decode('utf-8'))\n        except:\n            data = str(dataudp.decode('utf-8'))\n        \n        # Process received data here\n        \n        if \"Exit\" in data:\n            break\n\n    sock.close()",
    "Code_level": "Function-level",
    "FSMID_for_test": 71,
    "right_result": "```python\nimport socket\n\ndef udp_server():\n    server_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n    server_socket.bind(('localhost', 12345))\n    while True:\n        data, addr = server_socket.recvfrom(1024)\n        message = data.decode('utf-8')\n        if message == 'exit':\n            break\n    server_socket.close()\n```"
  },
  {
    "Task_id": 427,
    "Instruction": "Task Description: Implement a function that listens for a multicast token over UDP, decodes the received message, and extracts the token value.\n\nFunction Description: The function continuously listens on a specified UDP port for incoming messages containing a token. When a valid message is received, it parses the message, extracts the token, and stores it in a global variable. The function handles socket creation, binding, timeout, and cleanup, and runs in a loop until a token is received or a cancellation flag is set.\n\nInput: None (uses global variables `multicast_token` and `cancel_thread` for state management)\n\nOutput: None (updates the global variable `multicast_token` with the received token if successful)",
    "Canonical_solution": "import socket\nimport struct\nimport json\nimport threading\nimport time\n\nglobal multicast_token, cancel_thread\nmulticast_token = None\ncancel_thread = False\n\ndef receive_token():\n    global multicast_token, cancel_thread\n    received_token = False\n    while received_token == False and cancel_thread == False:\n        s = socket.socket(family=socket.AF_INET, type=socket.SOCK_DGRAM)\n        s.bind(('0.0.0.0', 6669))\n        s.settimeout(2)\n        try:\n            # despite suggestions of being unused, addr must remain present, or this will fail\n            msg, addr = s.recvfrom(255)\n            (msglen,) = struct.unpack(\">I\", msg[12:16])\n            msg = msg[16: msglen + 8].decode()\n            msg = json.loads(msg)\n            token = msg[\"token\"]\n            received_token = True\n            s.close()\n            multicast_token = token\n        except KeyboardInterrupt:\n            return\n        except:\n            pass",
    "Code_level": "Function-level",
    "FSMID_for_test": 71,
    "right_result": "```python\nimport socket\nimport struct\nimport select\n\ndef listen_for_token():\n    global multicast_token\n    global cancel_thread\n    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n    sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n    sock.setsockopt(socket.IPPROTO_IP, socket.IP_MULTICAST_TTL, 1)\n    sock.bind(('', 12345))\n    sock.settimeout(10)\n    while not cancel_thread.is_set():\n        try:\n            data, addr = sock.recvfrom(1024)\n            if data.startswith(b'TOKEN:'):\n                multicast_token = data[6:]\n                break\n        except socket.timeout:\n            continue\n    sock.close()\n```"
  },
  {
    "Task_id": 431,
    "Instruction": "Task Description: Implement a class for discovering devices on a network using SSDP (Simple Service Discovery Protocol) over UDP multicast. The class should be able to send discovery requests and handle responses from devices.\n\nClass Description: The SSDPDiscover class is responsible for discovering UPnP/DLNA devices on a local network using SSDP. It sends M-SEARCH requests to a multicast address and listens for responses. The class supports both single-socket and multi-socket modes for sending discovery requests.\n\nAttributes:\n- SSDP_ADDRESS: [str] - The multicast address for SSDP (239.255.255.250)\n- SSDP_PORT: [int] - The port number for SSDP (1900)\n- SSDP_MX: [int] - The maximum wait time for responses (in seconds)\n- SSDP_TTL: [int] - The time-to-live for multicast packets\n- SSDP_AMOUNT: [int] - The number of discovery requests to send\n- MSEARCH_PORT: [int] - The local port to bind to for sending discovery requests (0 for random)\n- MSEARCH_MSG: [str] - The M-SEARCH request message template\n- BUFFER_SIZE: [int] - The size of the buffer for receiving responses\n- USE_SINGLE_SOCKET: [bool] - Whether to use a single socket for all requests or one per interface\n- cb_on_device_response: [callable] - Callback function to handle device responses\n- host: [str] - The host address to bind to (None for all interfaces)\n- addresses: [list] - List of local IPv4 addresses\n\nMethods:\n- __init__(cb_on_device_response, host=None) -> [None] - Initializes the SSDPDiscover instance with a callback for device responses and an optional host address.\n- refresh_addresses() -> [None] - Refreshes the list of local IPv4 addresses.\n- search(ssdp_ttl=None, ssdp_mx=None, ssdp_amount=None) -> [None] - Initiates the device discovery process with optional parameters for TTL, MX, and request amount.\n- _search(host, ssdp_ttl, ssdp_mx, ssdp_amount) -> [None] - Internal method to perform the discovery process for a specific host.\n- _send_discover(sock, ssdp_mx) -> [None] - Internal method to send an M-SEARCH request using the provided socket.",
    "Canonical_solution": "import socket\nimport threading\nimport logging\nimport chardet\nimport traceback\nimport pulseaudio_dlna.utils.network\nimport pulseaudio_dlna.plugins.dlna.ssdp\n\nlogger = logging.getLogger('pulseaudio_dlna.discover')\n\nclass SSDPDiscover:\n    SSDP_ADDRESS = '239.255.255.250'\n    SSDP_PORT = 1900\n    SSDP_MX = 3\n    SSDP_TTL = 10\n    SSDP_AMOUNT = 5\n    MSEARCH_PORT = 0\n    MSEARCH_MSG = '\\r\\n'.join([\n        'M-SEARCH * HTTP/1.1',\n        'HOST: {host}:{port}',\n        'MAN: \"ssdp:discover\"',\n        'MX: {mx}',\n        'ST: ssdp:all',\n    ]) + '\\r\\n' * 2\n    BUFFER_SIZE = 1024\n    USE_SINGLE_SOCKET = True\n\n    def __init__(self, cb_on_device_response, host=None):\n        self.cb_on_device_response = cb_on_device_response\n        self.host = host\n        self.addresses = []\n        self.refresh_addresses()\n\n    def refresh_addresses(self):\n        self.addresses = pulseaudio_dlna.utils.network.ipv4_addresses()\n\n    def search(self, ssdp_ttl=None, ssdp_mx=None, ssdp_amount=None):\n        ssdp_mx = ssdp_mx or self.SSDP_MX\n        ssdp_ttl = ssdp_ttl or self.SSDP_TTL\n        ssdp_amount = ssdp_amount or self.SSDP_AMOUNT\n\n        if self.USE_SINGLE_SOCKET:\n            self._search(self.host or '', ssdp_ttl, ssdp_mx, ssdp_amount)\n        else:\n            if self.host:\n                self._search(self.host, ssdp_ttl, ssdp_mx, ssdp_amount)\n            else:\n                threads = []\n                for addr in self.addresses:\n                    thread = threading.Thread(\n                        target=self._search,\n                        args=[addr, ssdp_ttl, ssdp_mx, ssdp_amount])\n                    threads.append(thread)\n                try:\n                    for thread in threads:\n                        thread.start()\n                    for thread in threads:\n                        thread.join()\n                except:\n                    traceback.print_exc()\n\n    def _search(self, host, ssdp_ttl, ssdp_mx, ssdp_amount):\n        sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM, socket.IPPROTO_UDP)\n        sock.settimeout(ssdp_mx)\n        sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        sock.setsockopt(socket.IPPROTO_IP, socket.IP_MULTICAST_TTL, ssdp_ttl)\n        sock.bind((host, self.MSEARCH_PORT))\n\n        for i in range(1, ssdp_amount + 1):\n            t = threading.Timer(\n                float(i) / 2, self._send_discover, args=[sock, ssdp_mx])\n            t.start()\n\n        while True:\n            try:\n                header, address = sock.recvfrom(self.BUFFER_SIZE)\n                if self.cb_on_device_response:\n                    guess = chardet.detect(header)\n                    header = header.decode(guess['encoding'])\n                    header = pulseaudio_dlna.plugins.dlna.ssdp._get_header_map(header)\n                    self.cb_on_device_response(header, address)\n            except socket.timeout:\n                break\n        sock.close()\n\n    def _send_discover(self, sock, ssdp_mx):\n        msg = self.MSEARCH_MSG.format(\n            host=self.SSDP_ADDRESS, port=self.SSDP_PORT, mx=ssdp_mx)\n        if self.USE_SINGLE_SOCKET:\n            for addr in self.addresses:\n                sock.setsockopt(\n                    socket.SOL_IP, socket.IP_MULTICAST_IF,\n                    socket.inet_aton(addr))\n                sock.sendto(msg, (self.SSDP_ADDRESS, self.SSDP_PORT))\n        else:\n            sock.sendto(msg, (self.SSDP_ADDRESS, self.SSDP_PORT))",
    "Code_level": "Class-level",
    "FSMID_for_test": 71,
    "right_result": "```python\nimport socket\nimport struct\nimport select\nimport time\nfrom threading import Thread\n\nclass SSDPDiscover:\n    SSDP_ADDRESS = '239.255.255.250'\n    SSDP_PORT = 1900\n    SSDP_MX = 5\n    SSDP_TTL = 1\n    SSDP_AMOUNT = 1\n    MSEARCH_PORT = 0\n    MSEARCH_MSG = 'M-SEARCH * HTTP/1.1\\r\\nMAN: \"ssdp:discover\"\\r\\nMX: %d\\r\\nST: ssdp:all\\r\\nHOST: %s\\r\\n\\r\\n'\n    BUFFER_SIZE = 1024\n    USE_SINGLE_SOCKET = False\n    cb_on_device_response = None\n    host = None\n    addresses = []\n\n    def __init__(self, cb_on_device_response, host=None):\n        self.cb_on_device_response = cb_on_device_response\n        self.host = host\n        self.refresh_addresses()\n\n    def refresh_addresses(self):\n        self.addresses = [l[4][0] for l in socket.getaddrinfo(self.host, None) if l[0] == socket.AF_INET]\n\n    def search(self, ssdp_ttl=None, ssdp_mx=None, ssdp_amount=None):\n        self.SSDP_TTL = ssdp_ttl if ssdp_ttl is not None else self.SSDP_TTL\n        self.SSDP_MX = ssdp_mx if ssdp_mx is not None else self.SSDP_MX\n        self.SSDP_AMOUNT = ssdp_amount if ssdp_amount is not None else self.SSDP_AMOUNT\n        for address in self.addresses:\n            self._search(address)\n\n    def _search(self, host, ssdp_ttl, ssdp_mx, ssdp_amount):\n        sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n        if self.MSEARCH_PORT != 0:\n            sock.bind((host, self.MSEARCH_PORT))\n        sock.setsockopt(socket.IPPROTO_IP, socket.IP_MULTICAST_TTL, struct.pack('B', ssdp_ttl))\n        sock.setsockopt(socket.IPPROTO_IP, socket.IP_MULTICAST_LOOP, 1)\n        for _ in range(ssdp_amount):\n            msg = self.MSEARCH_MSG % (ssdp_mx, host)\n            sock.sendto(msg.encode(), (self.SSDP_ADDRESS, self.SSDP_PORT))\n            time.sleep(1)\n        sock.close()\n\n    def _send_discover(self, sock, ssdp_mx):\n        msg = self.MSEARCH_MSG % (ssdp_mx, self.host)\n        sock.sendto(msg.encode(), (self.SSDP_ADDRESS, self.SSDP_PORT))\n```"
  },
  {
    "Task_id": 433,
    "Instruction": "Task Description: Implement a UDP relay class that facilitates communication between local and remote servers using UDP sockets, handling DNS resolution and data forwarding.\n\nClass Description: The UDPRelay class manages UDP socket communication, including socket creation, binding, data transmission, and DNS resolution. It acts as a relay between local and remote endpoints, handling both incoming and outgoing UDP packets.\n\nAttributes:\n- _config: [dict] - Configuration parameters including addresses and ports\n- _dns_resolver: [object] - DNS resolver for handling domain name resolution\n- _is_local: [bool] - Flag indicating if the instance is local or remote\n- _sockets: [set] - Set of active client sockets\n- _server_socket: [socket.socket] - Main server socket for listening\n- _closed: [bool] - Flag indicating if the relay is closed\n- _listen_addr: [str] - Address to listen on\n- _listen_port: [int] - Port to listen on\n\nMethods:\n- __init__(config: dict, dns_resolver: object, is_local: bool) -> None - Initializes the UDP relay with configuration, DNS resolver, and local/remote mode\n- _handle_server() -> None - Handles incoming data from the server socket\n- _handle_server_dns_resolved(error: str, remote_addr: tuple, server_addr: str, params: tuple) -> None - Handles DNS resolution results and forwards data\n- _handle_client(sock: socket.socket) -> None - Handles incoming data from client sockets\n- close() -> None - Closes all sockets and cleans up resources",
    "Canonical_solution": "import socket\nimport errno\nimport logging\nfrom typing import Tuple, Optional\n\nclass UDPRelay:\n    def __init__(self, config, dns_resolver, is_local):\n        self._config = config\n        self._dns_resolver = dns_resolver\n        self._is_local = is_local\n        self._sockets = set()\n        self._server_socket = None\n        self._closed = False\n\n        if is_local:\n            self._listen_addr = config['local_address']\n            self._listen_port = config['local_port']\n        else:\n            self._listen_addr = config['server']\n            self._listen_port = config['server_port']\n\n        addrs = socket.getaddrinfo(self._listen_addr, self._listen_port, 0,\n                                 socket.SOCK_DGRAM, socket.SOL_UDP)\n        af, socktype, proto, canonname, sa = addrs[0]\n        self._server_socket = socket.socket(af, socktype, proto)\n        self._server_socket.bind((self._listen_addr, self._listen_port))\n        self._server_socket.setblocking(False)\n\n    def _handle_server(self):\n        data, r_addr = self._server_socket.recvfrom(65536)\n        if not data:\n            logging.debug('UDP handle_server: data is empty')\n            return\n\n        try:\n            header_result = parse_header(data)\n            if header_result is None:\n                return\n            connecttype, addrtype, dest_addr, dest_port, header_length = header_result\n\n            if self._is_local:\n                server_addr, server_port = self._get_a_server()\n            else:\n                server_addr, server_port = dest_addr, dest_port\n\n            if (addrtype & 7) == 3:\n                af = common.is_ip(server_addr)\n                if not af:\n                    handler = common.UDPAsyncDNSHandler((data, r_addr, None, header_length))\n                    handler.resolve(self._dns_resolver, (server_addr, server_port), \n                                   self._handle_server_dns_resolved)\n                else:\n                    self._handle_server_dns_resolved(\"\", (server_addr, server_port), \n                                                   server_addr, (data, r_addr, None, header_length))\n            else:\n                self._handle_server_dns_resolved(\"\", (server_addr, server_port), \n                                               server_addr, (data, r_addr, None, header_length))\n        except Exception as e:\n            logging.error(f\"Error handling server data: {e}\")\n\n    def _handle_server_dns_resolved(self, error, remote_addr, server_addr, params):\n        if error:\n            return\n        data, r_addr, uid, header_length = params\n        server_port = remote_addr[1]\n\n        addrs = socket.getaddrinfo(server_addr, server_port, 0,\n                                 socket.SOCK_DGRAM, socket.SOL_UDP)\n        af, socktype, proto, canonname, sa = addrs[0]\n        client = socket.socket(af, socktype, proto)\n        client.setblocking(False)\n\n        try:\n            client.sendto(data[header_length:], (server_addr, server_port))\n            self._sockets.add(client.fileno())\n        except IOError as e:\n            err = eventloop.errno_from_exception(e)\n            if err not in (errno.EINPROGRESS, errno.EAGAIN):\n                logging.error(f\"Error sending UDP data: {e}\")\n\n    def _handle_client(self, sock):\n        data, r_addr = sock.recvfrom(65536)\n        if not data:\n            return\n\n        if not self._is_local:\n            data = pack_addr(r_addr[0]) + struct.pack('>H', r_addr[1]) + data\n\n        try:\n            self._server_socket.sendto(data, r_addr)\n        except (OSError, IOError) as e:\n            error_no = eventloop.errno_from_exception(e)\n            if error_no not in (errno.EWOULDBLOCK,):\n                logging.error(f\"Error sending UDP response: {e}\")\n\n    def close(self):\n        self._closed = True\n        if self._server_socket:\n            self._server_socket.close()\n        for sock in self._sockets:\n            try:\n                sock.close()\n            except:\n                pass",
    "Code_level": "Class-level",
    "FSMID_for_test": 71,
    "right_result": "```python\nimport socket\nimport threading\nimport time\n\nclass UDPRelay:\n    def __init__(self, config: dict, dns_resolver: object, is_local: bool) -> None:\n        self._config = config\n        self._dns_resolver = dns_resolver\n        self._is_local = is_local\n        self._sockets = set()\n        self._server_socket = None\n        self._closed = False\n        self._listen_addr = config.get('listen_addr')\n        self._listen_port = config.get('listen_port')\n        self._remote_addr = config.get('remote_addr')\n        self._remote_port = config.get('remote_port')\n        self._server_addr = None\n        self._init_sockets()\n\n    def _init_sockets(self) -> None:\n        self._server_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n        self._server_socket.bind((self._listen_addr, self._listen_port))\n        self._server_socket.settimeout(1.0)\n\n    def _handle_server(self) -> None:\n        while not self._closed:\n            try:\n                data, addr = self._server_socket.recvfrom(1024)\n                if data:\n                    self._forward_data(data, addr)\n            except socket.timeout:\n                continue\n\n    def _handle_server_dns_resolved(self, error: str, remote_addr: tuple, server_addr: str, params: tuple) -> None:\n        if error:\n            print(f\"DNS resolution error: {error}\")\n            return\n        self._server_addr = server_addr\n        self._forward_data(*params)\n\n    def _handle_client(self, sock: socket.socket) -> None:\n        while not self._closed:\n            try:\n                data, addr = sock.recvfrom(1024)\n                if data:\n                    self._forward_data(data, addr)\n            except socket.timeout:\n                continue\n\n    def _forward_data(self, data: bytes, addr: tuple) -> None:\n        if self._is_local:\n            self._server_socket.sendto(data, (self._remote_addr, self._remote_port))\n        else:\n            self._server_socket.sendto(data, addr)\n\n    def close(self) -> None:\n        self._closed = True\n        self._server_socket.close()\n        for sock in self._sockets:\n            sock.close()\n\n    def start(self) -> None:\n        self._thread = threading.Thread(target=self._handle_server)\n        self._thread.start()\n```"
  },
  {
    "Task_id": 436,
    "Instruction": "Task Description: Create a WebSocket client using Python's asyncio and aiohttp libraries to establish a connection, send messages, receive responses, and gracefully close the connection.\n\nFunction Description: The code demonstrates how to implement a WebSocket client that connects to a server, sends an initial message (\"hello world!\"), echoes received messages, and closes the connection when instructed.\n\nInput:\n- URL (implicit): The WebSocket server URL to connect to\n- sslctx (implicit): Boolean flag indicating whether to use SSL (defaults to False)\n\nOutput:\n- None (direct output): The function prints received messages to stdout\n- Side effect: Maintains WebSocket connection and handles message exchange\n\nMethods:\n1. ws_test_echo(session) -> None\n   - Takes an aiohttp.ClientSession object\n   - Handles WebSocket communication lifecycle\n   - Sends initial message and echoes responses\n   - Closes connection when receiving \"close\" command\n\n2. main() -> None\n   - Creates ClientSession and runs ws_test_echo\n   - Serves as entry point for the async operations\n\nExecution:\n- The script uses asyncio.run() to start the async event loop\n- All WebSocket operations are performed asynchronously",
    "Canonical_solution": "import sys\nimport aiohttp\nimport asyncio\n\nsslctx = False\n\nasync def ws_test_echo(session):\n    async with session.ws_connect(URL, ssl=sslctx) as ws:\n        await ws.send_str(\"hello world!\\r\\n\")\n        async for msg in ws:\n            if msg.type == aiohttp.WSMsgType.TEXT:\n                print(msg.data)\n\n            if \"close\" in msg.data:\n                break\n            await ws.send_str(\"close\\r\\n\")\n        await ws.close()\n\nasync def main():\n    async with aiohttp.ClientSession() as session:\n        await ws_test_echo(session)\n\nif __name__ == \"__main__\":\n    asyncio.run(main())",
    "Code_level": "Function-level",
    "FSMID_for_test": 46,
    "right_result": "```python\nimport asyncio\nimport aiohttp\n\nasync def ws_test_echo(session):\n    async with session.ws_connect('ws://example.com') as ws:\n        await ws.send_str('hello world!')\n        async for msg in ws:\n            if msg.type == aiohttp.WSMsgType.TEXT:\n                print(msg.data)\n                if msg.data == 'close':\n                    await ws.close()\n            elif msg.type == aiohttp.WSMsgType.ERROR:\n                print('WebSocket error:', ws.exception())\n\nasync def main():\n    async with aiohttp.ClientSession() as session:\n        await ws_test_echo(session)\n\nasyncio.run(main())\n```"
  },
  {
    "Task_id": 437,
    "Instruction": "Task Description: Implement a WebSocket client for text-to-speech (TTS) communication that handles asynchronous streaming of audio and metadata, with support for DRM and error handling.\n\nClass Description: The `Communicate` class manages WebSocket connections to a TTS service, sending text data and receiving audio streams and metadata asynchronously. It handles connection setup, message exchange, DRM challenges, and error scenarios.\n\nAttributes:\n\n- tts_config: [TTSConfig] - Configuration for TTS including voice, rate, volume, and pitch settings.\n- texts: [List[str]] - List of text chunks to be processed, split by byte length constraints.\n- proxy: [Optional[str]] - Proxy URL for the WebSocket connection if needed.\n- session_timeout: [aiohttp.ClientTimeout] - Timeout settings for the WebSocket session.\n- connector: [Optional[aiohttp.BaseConnector]] - Custom connector for the WebSocket session.\n- state: [CommunicateState] - Dictionary tracking streaming state including partial text, offsets, and stream status.\n\nMethods:\n\n- __init__(text: str, voice: str = DEFAULT_VOICE, *, rate: str = \"+0%\", volume: str = \"+0%\", pitch: str = \"+0Hz\", connector: Optional[aiohttp.BaseConnector] = None, proxy: Optional[str] = None, connect_timeout: Optional[int] = 10, receive_timeout: Optional[int] = 60) -> None - Initializes the TTS communication with text and configuration parameters.\n- __stream() -> AsyncGenerator[TTSChunk, None] - Private async generator that handles the WebSocket communication, yielding audio chunks and metadata.\n- stream() -> AsyncGenerator[TTSChunk, None] - Public async generator that manages the streaming process, handling DRM challenges and text chunk iteration.\n- stream_sync() -> Generator[TTSChunk, None, None] - Synchronous wrapper for the async stream method, using a ThreadPoolExecutor to bridge async/sync contexts.",
    "Canonical_solution": "import asyncio\nimport concurrent.futures\nimport json\nimport ssl\nimport time\nimport uuid\nfrom queue import Queue\nfrom typing import AsyncGenerator, Generator, Optional, Union\n\nimport aiohttp\nimport certifi\n\nfrom .constants import DEFAULT_VOICE, SEC_MS_GEC_VERSION, WSS_HEADERS, WSS_URL\nfrom .data_classes import TTSConfig\nfrom .drm import DRM\nfrom .exceptions import (\n    NoAudioReceived,\n    UnexpectedResponse,\n    UnknownResponse,\n    WebSocketError,\n)\nfrom .typing import CommunicateState, TTSChunk\n\nclass Communicate:\n    def __init__(\n        self,\n        text: str,\n        voice: str = DEFAULT_VOICE,\n        *,\n        rate: str = \"+0%\",\n        volume: str = \"+0%\",\n        pitch: str = \"+0Hz\",\n        connector: Optional[aiohttp.BaseConnector] = None,\n        proxy: Optional[str] = None,\n        connect_timeout: Optional[int] = 10,\n        receive_timeout: Optional[int] = 60,\n    ):\n        self.tts_config = TTSConfig(voice, rate, volume, pitch)\n        self.texts = split_text_by_byte_length(\n            escape(remove_incompatible_characters(text)),\n            calc_max_mesg_size(self.tts_config),\n        )\n        self.proxy = proxy\n        self.session_timeout = aiohttp.ClientTimeout(\n            total=None,\n            connect=None,\n            sock_connect=connect_timeout,\n            sock_read=receive_timeout,\n        )\n        self.connector = connector\n        self.state: CommunicateState = {\n            \"partial_text\": b\"\",\n            \"offset_compensation\": 0,\n            \"last_duration_offset\": 0,\n            \"stream_was_called\": False,\n        }\n\n    async def __stream(self) -> AsyncGenerator[TTSChunk, None]:\n        audio_was_received = False\n        ssl_ctx = ssl.create_default_context(cafile=certifi.where())\n        \n        async with aiohttp.ClientSession(\n            connector=self.connector,\n            trust_env=True,\n            timeout=self.session_timeout,\n        ) as session, session.ws_connect(\n            f\"{WSS_URL}&Sec-MS-GEC={DRM.generate_sec_ms_gec()}\"\n            f\"&Sec-MS-GEC-Version={SEC_MS_GEC_VERSION}\"\n            f\"&ConnectionId={connect_id()}\",\n            compress=15,\n            proxy=self.proxy,\n            headers=WSS_HEADERS,\n            ssl=ssl_ctx,\n        ) as websocket:\n            await websocket.send_str(\n                f\"X-Timestamp:{date_to_string()}\\r\\n\"\n                \"Content-Type:application/json; charset=utf-8\\r\\n\"\n                \"Path:speech.config\\r\\n\\r\\n\"\n                '{\"context\":{\"synthesis\":{\"audio\":{\"metadataoptions\":{'\n                '\"sentenceBoundaryEnabled\":\"false\",\"wordBoundaryEnabled\":\"true\"},'\n                '\"outputFormat\":\"audio-24khz-48kbitrate-mono-mp3\"'\n                \"}}}}\\r\\n\"\n            )\n\n            await websocket.send_str(\n                ssml_headers_plus_data(\n                    connect_id(),\n                    date_to_string(),\n                    mkssml(\n                        self.tts_config,\n                        self.state[\"partial_text\"],\n                    ),\n                )\n            )\n\n            async for received in websocket:\n                if received.type == aiohttp.WSMsgType.TEXT:\n                    encoded_data = received.data.encode(\"utf-8\")\n                    parameters, data = get_headers_and_data(\n                        encoded_data, encoded_data.find(b\"\\r\\n\\r\\n\")\n                    )\n                    path = parameters.get(b\"Path\", None)\n                    if path == b\"audio.metadata\":\n                        parsed_metadata = self.__parse_metadata(data)\n                        yield parsed_metadata\n                        self.state[\"last_duration_offset\"] = (\n                            parsed_metadata[\"offset\"] + parsed_metadata[\"duration\"]\n                        )\n                    elif path == b\"turn.end\":\n                        self.state[\"offset_compensation\"] = self.state[\n                            \"last_duration_offset\"\n                        ]\n                        self.state[\"offset_compensation\"] += 8_750_000\n                        break\n                elif received.type == aiohttp.WSMsgType.BINARY:\n                    header_length = int.from_bytes(received.data[:2], \"big\")\n                    parameters, data = get_headers_and_data(\n                        received.data, header_length\n                    )\n                    if parameters.get(b\"Path\") == b\"audio\":\n                        audio_was_received = True\n                        yield {\"type\": \"audio\", \"data\": data}\n                elif received.type == aiohttp.WSMsgType.ERROR:\n                    raise WebSocketError(received.data if received.data else \"Unknown error\")\n\n            if not audio_was_received:\n                raise NoAudioReceived(\"No audio was received.\")\n\n    async def stream(self) -> AsyncGenerator[TTSChunk, None]:\n        if self.state[\"stream_was_called\"]:\n            raise RuntimeError(\"stream can only be called once.\")\n        self.state[\"stream_was_called\"] = True\n\n        for self.state[\"partial_text\"] in self.texts:\n            try:\n                async for message in self.__stream():\n                    yield message\n            except aiohttp.ClientResponseError as e:\n                if e.status != 403:\n                    raise\n                DRM.handle_client_response_error(e)\n                async for message in self.__stream():\n                    yield message\n\n    def stream_sync(self) -> Generator[TTSChunk, None, None]:\n        def fetch_async_items(queue: Queue) -> None:\n            async def get_items() -> None:\n                async for item in self.stream():\n                    queue.put(item)\n                queue.put(None)\n\n            loop = asyncio.new_event_loop()\n            asyncio.set_event_loop(loop)\n            loop.run_until_complete(get_items())\n            loop.close()\n\n        queue: Queue = Queue()\n        with concurrent.futures.ThreadPoolExecutor() as executor:\n            executor.submit(fetch_async_items, queue)\n            while True:\n                item = queue.get()\n                if item is None:\n                    break\n                yield item",
    "Code_level": "Class-level",
    "FSMID_for_test": 46,
    "right_result": "```python\nimport asyncio\nimport aiohttp\nfrom typing import Optional, List, Dict, Any\n\nclass TTSChunk:\n    def __init__(self, audio_data: bytes, metadata: Dict[str, Any]):\n        self.audio_data = audio_data\n        self.metadata = metadata\n\nclass CommunicateState:\n    def __init__(self):\n        self.partial_text = \"\"\n        self.offsets = {}\n        self.stream_status = \"idle\"\n\nclass TTSConfig:\n    def __init__(self, voice: str, rate: str, volume: str, pitch: str):\n        self.voice = voice\n        self.rate = rate\n        self.volume = volume\n        self.pitch = pitch\n\nclass Communicate:\n    DEFAULT_VOICE = \"default_voice\"\n\n    def __init__(self, text: str, voice: str = DEFAULT_VOICE, *, rate: str = \"+0%\", volume: str = \"+0%\", pitch: str = \"+0Hz\", connector: Optional[aiohttp.BaseConnector] = None, proxy: Optional[str] = None, connect_timeout: Optional[int] = 10, receive_timeout: Optional[int] = 60) -> None:\n        self.tts_config = TTSConfig(voice, rate, volume, pitch)\n        self.texts = [text[i:i+1024] for i in range(0, len(text), 1024)]\n        self.proxy = proxy\n        self.session_timeout = aiohttp.ClientTimeout(connect=connect_timeout, receive=receive_timeout)\n        self.connector = connector\n        self.state = CommunicateState()\n\n    async def __stream(self) -> Any:\n        async with aiohttp.ClientWebSocketResponse() as ws:\n            await ws.connect(url=\"wss://tts-service-url\", proxy=self.proxy, timeout=self.session_timeout, connector=self.connector)\n            for text_chunk in self.texts:\n                await ws.send_json({\"text\": text_chunk, \"config\": self.tts_config.__dict__})\n                response = await ws.receive_json()\n                if \"audio\" in response:\n                    yield TTSChunk(response[\"audio\"], response.get(\"metadata\", {}))\n                if \"drm_challenge\" in response:\n                    # Handle DRM challenge here\n                    pass\n            yield None\n\n    async def stream(self) -> Any:\n        async for chunk in self.__stream():\n            if chunk is None:\n                break\n            yield chunk\n\n    def stream_sync(self) -> Any:\n        loop = asyncio.new_event_loop()\n        asyncio.set_event_loop(loop)\n        try:\n            return loop.run_until_complete(self.stream())\n        finally:\n            loop.close()\n```"
  },
  {
    "Task_id": 438,
    "Instruction": "Task Description: Implement a WebSocket client class in Python using asyncio and websockets libraries to handle persistent WebSocket connections, send/receive messages, and manage connection lifecycle.\n\nClass Description: The PersistentWebSocket class manages a persistent WebSocket connection with automatic reconnection handling and proper resource cleanup. It's designed to be used as an asynchronous context manager.\n\nAttributes:\n- ws: Optional[WebSocketClientProtocol] - The active WebSocket connection object\n- endpoint_uri: str - The WebSocket server URI to connect to\n- websocket_kwargs: Any - Additional keyword arguments for the WebSocket connection\n\nMethods:\n- __aenter__() -> WebSocketClientProtocol - Asynchronously establishes a connection if none exists and returns the WebSocket client protocol\n- __aexit__(exc_type: type, exc_val: BaseException, exc_tb: Any) -> None - Handles connection cleanup on context exit, closing the connection if an exception occurred\n\nClass Description: The LegacyWebSocketProvider class extends JSONBaseProvider to provide WebSocket-based JSON-RPC functionality with timeout support and batch request handling.\n\nAttributes:\n- _loop: ClassVar[Any] - The asyncio event loop used for running coroutines\n- endpoint_uri: Optional[Union[str, URI]] - The WebSocket server endpoint URI\n- websocket_timeout: int - Timeout value for WebSocket operations\n- conn: PersistentWebSocket - The persistent WebSocket connection instance\n\nMethods:\n- coro_make_request(request_data: bytes) -> RPCResponse - Coroutine that sends a request and waits for a response through the WebSocket connection\n- make_request(method: RPCEndpoint, params: Any) -> RPCResponse - Synchronous method to make a single RPC request\n- make_batch_request(requests: List[Tuple[RPCEndpoint, Any]]) -> List[RPCResponse] - Synchronous method to make a batch of RPC requests",
    "Canonical_solution": "import asyncio\nimport json\nfrom typing import (\n    Any,\n    List,\n    Optional,\n    Tuple,\n    Union,\n    cast,\n)\nfrom websockets.client import (\n    connect,\n)\nfrom websockets.legacy.client import (\n    WebSocketClientProtocol,\n)\nfrom web3.providers.base import (\n    JSONBaseProvider,\n)\nfrom web3.types import (\n    RPCEndpoint,\n    RPCResponse,\n)\n\nclass PersistentWebSocket:\n    def __init__(self, endpoint_uri: str, websocket_kwargs: Any) -> None:\n        self.ws: Optional[WebSocketClientProtocol] = None\n        self.endpoint_uri = endpoint_uri\n        self.websocket_kwargs = websocket_kwargs\n\n    async def __aenter__(self) -> WebSocketClientProtocol:\n        if self.ws is None:\n            self.ws = await connect(uri=self.endpoint_uri, **self.websocket_kwargs)\n        return self.ws\n\n    async def __aexit__(\n        self,\n        exc_type: type,\n        exc_val: BaseException,\n        exc_tb: Any,\n    ) -> None:\n        if exc_val is not None:\n            try:\n                await self.ws.close()\n            except Exception:\n                pass\n            self.ws = None\n\nclass LegacyWebSocketProvider(JSONBaseProvider):\n    _loop = None\n\n    def __init__(\n        self,\n        endpoint_uri: Optional[Union[str, URI]] = None,\n        websocket_kwargs: Optional[Any] = None,\n        websocket_timeout: int = 30,\n        **kwargs: Any,\n    ) -> None:\n        self.endpoint_uri = endpoint_uri\n        self.websocket_timeout = websocket_timeout\n        if websocket_kwargs is None:\n            websocket_kwargs = {}\n        self.conn = PersistentWebSocket(self.endpoint_uri, websocket_kwargs)\n        super().__init__(**kwargs)\n\n    async def coro_make_request(self, request_data: bytes) -> RPCResponse:\n        async with self.conn as conn:\n            await asyncio.wait_for(\n                conn.send(request_data), timeout=self.websocket_timeout\n            )\n            return json.loads(\n                await asyncio.wait_for(conn.recv(), timeout=self.websocket_timeout)\n            )\n\n    def make_request(self, method: RPCEndpoint, params: Any) -> RPCResponse:\n        request_data = self.encode_rpc_request(method, params)\n        future = asyncio.run_coroutine_threadsafe(\n            self.coro_make_request(request_data), LegacyWebSocketProvider._loop\n        )\n        return future.result()\n\n    def make_batch_request(\n        self, requests: List[Tuple[RPCEndpoint, Any]]\n    ) -> List[RPCResponse]:\n        request_data = self.encode_batch_rpc_request(requests)\n        future = asyncio.run_coroutine_threadsafe(\n            self.coro_make_request(request_data), LegacyWebSocketProvider._loop\n        )\n        response = cast(List[RPCResponse], future.result())\n        return response",
    "Code_level": "Class-level",
    "FSMID_for_test": 46,
    "right_result": "```python\nimport asyncio\nimport websockets\nfrom typing import Any, Optional, Union\n\nclass PersistentWebSocket:\n    def __init__(self, endpoint_uri: str, websocket_kwargs: Any = None):\n        self.ws = None\n        self.endpoint_uri = endpoint_uri\n        self.websocket_kwargs = websocket_kwargs or {}\n\n    async def __aenter__(self) -> 'WebSocketClientProtocol':\n        if self.ws is None:\n            self.ws = await websockets.connect(self.endpoint_uri, **self.websocket_kwargs)\n        return self.ws\n\n    async def __aexit__(self, exc_type: type, exc_val: BaseException, exc_tb: Any) -> None:\n        if self.ws:\n            await self.ws.close()\n\nclass LegacyWebSocketProvider:\n    __loop = asyncio.get_event_loop()\n\n    def __init__(self, endpoint_uri: Optional[Union[str, URI]] = None, websocket_timeout: int = 10):\n        self.endpoint_uri = endpoint_uri\n        self.websocket_timeout = websocket_timeout\n        self.conn = PersistentWebSocket(endpoint_uri)\n\n    async def coro_make_request(self, request_data: bytes) -> RPCResponse:\n        async with self.conn as ws:\n            response = await asyncio.wait_for(ws.recv(), timeout=self.websocket_timeout)\n            return RPCResponse(response)\n\n    def make_request(self, method: RPCEndpoint, params: Any) -> RPCResponse:\n        loop = asyncio.get_event_loop()\n        return loop.run_until_complete(self.coro_make_request(json.dumps({'method': method, 'params': params})))\n\n    def make_batch_request(self, requests: List[Tuple[RPCEndpoint, Any]]) -> List[RPCResponse]:\n        loop = asyncio.get_event_loop()\n        request_data = json.dumps([{'method': method, 'params': params} for method, params in requests])\n        return loop.run_until_complete(self.coro_make_request(request_data))\n```"
  },
  {
    "Task_id": 44,
    "Instruction": "Task Description: Create asynchronous HTTP client functions to retrieve user and group avatars from specified URLs using the httpx library with retry logic for error handling.\n\nFunction Description: The functions make HTTP GET requests to fetch avatar images (in bytes) from predefined URL patterns. Each function implements retry logic (3 attempts) and error logging if the request fails.\n\nInput:\n- For get_user_avatar: uid (int | str) - User ID to construct the avatar URL\n- For get_group_avatar: gid (int | str) - Group ID to construct the avatar URL\n\nOutput:\n- bytes | None: Returns the avatar image content as bytes if successful, or None if all attempts fail after retries",
    "Canonical_solution": "import httpx\nfrom zhenxun.services.log import logger\n\nasync def get_user_avatar(uid: int | str) -> bytes | None:\n    \"\"\"\u5feb\u6377\u83b7\u53d6\u7528\u6237\u5934\u50cf\n\n    \u53c2\u6570:\n        uid: \u7528\u6237id\n    \"\"\"\n    url = f\"http://q1.qlogo.cn/g?b=qq&nk={uid}&s=160\"\n    async with httpx.AsyncClient() as client:\n        for _ in range(3):\n            try:\n                return (await client.get(url)).content\n            except Exception:\n                logger.error(\"\u83b7\u53d6\u7528\u6237\u5934\u50cf\u9519\u8bef\", \"Util\", target=uid)\n    return None\n\nasync def get_group_avatar(gid: int | str) -> bytes | None:\n    \"\"\"\u5feb\u6377\u83b7\u53d6\u7528\u7fa4\u5934\u50cf\n\n    \u53c2\u6570:\n        gid: \u7fa4\u53f7\n    \"\"\"\n    url = f\"http://p.qlogo.cn/gh/{gid}/{gid}/640/\"\n    async with httpx.AsyncClient() as client:\n        for _ in range(3):\n            try:\n                return (await client.get(url)).content\n            except Exception:\n                logger.error(\"\u83b7\u53d6\u7fa4\u5934\u50cf\u9519\u8bef\", \"Util\", target=gid)\n    return None",
    "Code_level": "Function-level",
    "FSMID_for_test": 59,
    "right_result": "```python\nimport httpx\nimport asyncio\nimport logging\n\nasync def get_user_avatar(uid: int | str) -> bytes | None:\n    url = f\"https://example.com/user/{uid}/avatar\"\n    for _ in range(3):\n        try:\n            async with httpx.AsyncClient() as client:\n                response = await client.get(url)\n                response.raise_for_status()\n                return response.content\n        except httpx.HTTPError as e:\n            logging.error(f\"Failed to get user avatar for uid {uid}: {e}\")\n    return None\n\nasync def get_group_avatar(gid: int | str) -> bytes | None:\n    url = f\"https://example.com/group/{gid}/avatar\"\n    for _ in range(3):\n        try:\n            async with httpx.AsyncClient() as client:\n                response = await client.get(url)\n                response.raise_for_status()\n                return response.content\n        except httpx.HTTPError as e:\n            logging.error(f\"Failed to get group avatar for gid {gid}: {e}\")\n    return None\n```"
  },
  {
    "Task_id": 441,
    "Instruction": "Task Description: Implement a WebSocket client class for chat functionality that handles connection, message sending/receiving, and error handling with proper thread management.\n\nClass Description: ChatNewWebSocket is a WebSocket client implementation for chat applications that manages WebSocket connections, message queuing, and event callbacks in separate threads. It provides methods for starting/stopping connections, sending messages, and handling WebSocket events.\n\nAttributes:\n- _parent: [weakref.ref] - Weak reference to the parent object for callback handling\n- ws: [WebSocketApp] - WebSocketApp instance for managing the connection\n- _inQueue: [Queue] - Thread-safe queue for outgoing messages\n- sendThread: [Thread] - Thread for processing outgoing messages\n\nMethods:\n- __init__(parent) -> None - Initializes the WebSocket client with parent reference and starts send thread\n- parent() -> object - Property to dereference the weak parent reference\n- Stop() -> None - Stops the send thread by putting empty string in queue\n- SendDataRun() -> None - Thread target function that processes outgoing messages from queue\n- _SendData(data) -> None - Internal method to send data through WebSocket and emit appropriate events\n- _Send(msg) -> None - Internal method to send raw message through WebSocket\n- Send(data) -> None - Public method to queue data for sending\n- on_message(ws, message) -> None - Callback for received WebSocket messages\n- on_error(ws, error) -> None - Callback for WebSocket errors\n- on_close(ws) -> None - Callback for WebSocket connection close\n- on_open(ws) -> None - Callback for WebSocket connection open\n- Start(roomId, token, url) -> None - Starts WebSocket connection with given parameters in new thread\n- Close() -> None - Closes active WebSocket connection",
    "Canonical_solution": "import threading\nimport weakref\nfrom queue import Queue\nimport websocket\n\nclass ChatNewWebSocket:\n    def __init__(self, parent):\n        self._parent = weakref.ref(parent)\n        self.ws = None\n        self._inQueue = Queue()\n        self.sendThread = threading.Thread(target=self.SendDataRun)\n        self.sendThread.setName(\"ChatSendThread\")\n        self.sendThread.setDaemon(True)\n        self.sendThread.start()\n\n    @property\n    def parent(self):\n        return self._parent()\n\n    def Stop(self):\n        self._inQueue.put(\"\")\n\n    def SendDataRun(self):\n        while True:\n            task = self._inQueue.get(True)\n            self._inQueue.task_done()\n            try:\n                if task == \"\":\n                    break\n                self._SendData(task)\n            except Exception as es:\n                pass\n\n    def _SendData(self, data):\n        self._Send(data)\n        if \"send_image\" in data:\n            self.parent.websocket.emit(self.parent.SendImg, data)\n        else:\n            self.parent.websocket.emit(self.parent.SendMsg2, data)\n\n    def _Send(self, msg):\n        try:\n            if self.ws:\n                self.ws.send(msg)\n        except Exception as es:\n            pass\n\n    def Send(self, data):\n        self._inQueue.put(data)\n\n    def on_message(self, ws, message):\n        self.parent.websocket.emit(self.parent.Msg, message)\n\n    def on_error(self, ws, error):\n        self.parent.websocket.emit(self.parent.ErrorMsg, str(error))\n\n    def on_close(self, ws):\n        self.parent.websocket.emit(self.parent.Leave, \"\")\n\n    def on_open(self, ws):\n        self.parent.websocket.emit(self.parent.Enter, \"\")\n\n    def Start(self, roomId, token, url):\n        url = url.replace(\"https\", \"wss\").replace(\"http\", \"ws\") + \"?token={}&room={}\".format(token, roomId)\n        def Run():\n            ws = websocket.WebSocketApp(url,\n                                      on_open=self.on_open,\n                                      on_message=self.on_message,\n                                      on_error=self.on_error,\n                                      on_close=self.on_close)\n            self.ws = ws\n            ws.run_forever(ping_interval=30)\n\n        thread = threading.Thread(target=Run)\n        thread.setDaemon(True)\n        thread.start()\n\n    def Close(self):\n        if self.ws:\n            self.ws.close()\n            self.ws = None",
    "Code_level": "Class-level",
    "FSMID_for_test": 47,
    "right_result": "```python\nimport websocket\nimport threading\nimport queue\nimport weakref\n\nclass ChatNewWebSocket:\n    def __init__(self, parent):\n        self._parent = weakref.ref(parent)\n        self.ws = None\n        self._inQueue = queue.Queue()\n        self.sendThread = threading.Thread(target=self.SendDataRun)\n        self.sendThread.daemon = True\n        self.sendThread.start()\n\n    def parent(self):\n        return self._parent()\n\n    def Stop(self):\n        self._inQueue.put(\"\")\n\n    def SendDataRun(self):\n        while True:\n            data = self._inQueue.get()\n            if data == \"\":\n                break\n            self._SendData(data)\n            self._inQueue.task_done()\n\n    def _SendData(self, data):\n        try:\n            self._Send(data)\n        except Exception as e:\n            self.parent().on_error(self.ws, e)\n\n    def _Send(self, msg):\n        self.ws.send(msg)\n\n    def Send(self, data):\n        self._inQueue.put(data)\n\n    def on_message(self, ws, message):\n        self.parent().on_message(ws, message)\n\n    def on_error(self, ws, error):\n        self.parent().on_error(ws, error)\n\n    def on_close(self, ws):\n        self.parent().on_close(ws)\n\n    def on_open(self, ws):\n        self.parent().on_open(ws)\n\n    def Start(self, roomId, token, url):\n        self.ws = websocket.WebSocketApp(url,\n                                         on_message=lambda ws, msg: self.on_message(ws, msg),\n                                         on_error=lambda ws, error: self.on_error(ws, error),\n                                         on_close=lambda ws: self.on_close(ws))\n        threading.Thread(target=self.ws.run_forever).start()\n\n    def Close(self):\n        self.ws.close()\n```"
  },
  {
    "Task_id": 442,
    "Instruction": "Task Description: Implement a WebSocket client class in Python that handles WebSocket connections, message sending/receiving, and callbacks for various WebSocket events. The class should manage commands and notifications with appropriate callbacks and ensure thread-safe operations between the WebSocket thread and the main thread.\n\nClass Description: The Protocol class encapsulates WebSocket connection functionality, providing methods to connect to a WebSocket server, send commands with callbacks, subscribe/unsubscribe to notifications, and handle incoming messages. It manages thread synchronization to safely execute callbacks on the main thread.\n\nAttributes:\n- next_id: [int] - Counter for generating unique command IDs\n- commands: [dict] - Dictionary storing pending commands with their IDs as keys\n- notifications: [dict] - Dictionary storing subscribed notifications with their names as keys\n- url: [str] - WebSocket server URL to connect to\n- on_open: [function] - Callback function for WebSocket open event\n- on_close: [function] - Callback function for WebSocket close event\n- socket: [WebSocketApp] - Instance of WebSocketApp managing the connection\n\nMethods:\n- connect(url, on_open=None, on_close=None) -> [None] - Initiates a WebSocket connection to the specified URL with optional open and close callbacks. Starts a new thread for the WebSocket connection.\n- thread_callback() -> [None] - Thread procedure that sets up WebSocket callbacks and starts the connection loop.\n- send(command, callback=None, options=None) -> [None] - Sends a command through the WebSocket with an optional callback and options. Assigns a unique ID to the command.\n- subscribe(notification, callback) -> [None] - Subscribes to a notification with the specified callback.\n- unsubscribe(notification) -> [None] - Unsubscribes from a notification.\n- message_callback(ws, message) -> [None] - Handles incoming WebSocket messages, parsing them and invoking appropriate command or notification callbacks.\n- open_callback(ws) -> [None] - Handles WebSocket open event, invoking the registered on_open callback.\n- close_callback(ws) -> [None] - Handles WebSocket close event, invoking the registered on_close callback.\n- to_main_thread(f, args) -> [None] - Helper method to execute a function on the main thread with the given arguments.",
    "Canonical_solution": "import os\nimport sys\nimport json\nimport threading\nimport websocket\nimport sublime\n\nclass Protocol:\n    \"\"\"Encapsulate websocket connection\"\"\"\n\n    def __init__(self):\n        self.next_id = 0\n        self.commands = {}\n        self.notifications = {}\n\n    def connect(self, url, on_open=None, on_close=None):\n        \"\"\"Attempt to connect to the web socket\"\"\"\n        self.url = url\n        self.on_open = on_open\n        self.on_close = on_close\n        thread = threading.Thread(target=self.thread_callback)\n        thread.start()\n\n    def thread_callback(self):\n        \"\"\"Threadproc owning the socket.\n           Sets up the callbacks for open, close, and message.\n        \"\"\"\n        self.socket = websocket.WebSocketApp(\n            self.url,\n            on_message=self.message_callback,\n            on_open=self.open_callback,\n            on_close=self.close_callback\n        )\n        self.socket.run_forever()\n\n    def send(self, command, callback=None, options=None):\n        \"\"\"Send to web socket, with optional callback and options\"\"\"\n        command.id = self.next_id\n        command.callback = callback\n        command.options = options\n        self.commands[command.id] = command\n        self.next_id += 1\n        self.socket.send(json.dumps(command.request))\n\n    def subscribe(self, notification, callback):\n        \"\"\"Subscribe to notification with callback\"\"\"\n        notification.callback = callback\n        self.notifications[notification.name] = notification\n\n    def unsubscribe(self, notification):\n        \"\"\"Unsubscribe to notification\"\"\"\n        del self.notifications[notification.name]\n\n    def message_callback(self, ws, message):\n        \"\"\"Callback on any incoming packet.\n           Parse it and call matching callback.\n        \"\"\"\n        parsed = json.loads(message)\n        if 'method' in parsed:\n            if parsed['method'] in self.notifications:\n                notification = self.notifications[parsed['method']]\n                data = notification.parser(parsed['params']) if 'params' in parsed else None\n                self.to_main_thread(notification.callback, (data, notification))\n        else:\n            if parsed['id'] in self.commands:\n                command = self.commands[parsed['id']]\n                del self.commands[parsed['id']]\n                if 'error' in parsed:\n                    self.to_main_thread(print, (\"Error from debuggee: \" + parsed['error']['message'],))\n                else:\n                    command.data = command.parser(parsed['result']) if 'result' in parsed else None\n                    if command.callback:\n                        self.to_main_thread(command.callback, (command,))\n\n    def open_callback(self, ws):\n        if self.on_open:\n            self.to_main_thread(self.on_open, ())\n        print('SWI: WebSocket opened')\n\n    def close_callback(self, ws):\n        if self.on_close:\n            self.to_main_thread(self.on_close, ())\n        print('SWI: WebSocket closed')\n\n    def to_main_thread(self, f, args):\n        \"\"\"Call back on the main thread\n           to simplify the called code\n        \"\"\"\n        if f:\n            sublime.set_timeout(lambda: f(*args))",
    "Code_level": "Class-level",
    "FSMID_for_test": 47,
    "right_result": "```python\nimport websocket\nimport threading\nimport json\nfrom queue import Queue\n\nclass Protocol:\n    def __init__(self):\n        self.next_id = 0\n        self.commands = {}\n        self.notifications = {}\n        self.url = \"\"\n        self.on_open = None\n        self.on_close = None\n        self.socket = None\n        self.message_queue = Queue()\n\n    def connect(self, url, on_open=None, on_close=None):\n        self.url = url\n        self.on_open = on_open\n        self.on_close = on_close\n        self.socket = websocket.WebSocketApp(self.url,\n                                             on_message=self.message_callback,\n                                             on_open=self.open_callback,\n                                             on_close=self.close_callback)\n        thread = threading.Thread(target=self.thread_callback)\n        thread.start()\n\n    def thread_callback(self):\n        self.socket.run_forever()\n\n    def send(self, command, callback=None, options=None):\n        command_id = self.next_id\n        self.next_id += 1\n        self.commands[command_id] = {'command': command, 'callback': callback}\n        self.socket.send(json.dumps({'id': command_id, 'type': 'command', 'data': command}))\n        return command_id\n\n    def subscribe(self, notification, callback):\n        self.notifications[notification] = callback\n        self.socket.send(json.dumps({'type': 'subscribe', 'data': notification}))\n\n    def unsubscribe(self, notification):\n        del self.notifications[notification]\n        self.socket.send(json.dumps({'type': 'unsubscribe', 'data': notification}))\n\n    def message_callback(self, ws, message):\n        try:\n            msg = json.loads(message)\n            if 'id' in msg and 'type' in msg:\n                if msg['type'] == 'command':\n                    if msg['id'] in self.commands:\n                        command = self.commands[msg['id']]['command']\n                        callback = self.commands[msg['id']]['callback']\n                        if callback:\n                            self.to_main_thread(callback, (command,))\n                        del self.commands[msg['id']]\n                elif msg['type'] == 'notification':\n                    if msg['data'] in self.notifications:\n                        callback = self.notifications[msg['data']]\n                        self.to_main_thread(callback, ())\n        except json.JSONDecodeError:\n            pass\n\n    def open_callback(self, ws):\n        if self.on_open:\n            self.to_main_thread(self.on_open, ())\n\n    def close_callback(self, ws):\n        if self.on_close:\n            self.to_main_thread(self.on_close, ())\n\n    def to_main_thread(self, f, args):\n        def wrapper():\n            f(*args)\n        threading.Thread(target=wrapper).start()\n```"
  },
  {
    "Task_id": 445,
    "Instruction": "Task Description: Implement a WebSocket server using FastAPI that validates user sessions by performing a bitwise operation on received user and session IDs.\n\nFunction Description: The function `websocket_endpoint` establishes a WebSocket connection, receives binary data containing user and session IDs, validates them using a specific bitwise operation, and sends back the validation result as binary data.\n\nInput: \n- websocket: WebSocket - The WebSocket connection object provided by FastAPI\n- data: bytes - Binary data received from the client containing packed user_id and session_id (two unsigned 32-bit integers in little-endian format)\n\nOutput: \n- None (The function sends binary data back through the WebSocket connection but doesn't return anything)\n- The sent data contains a packed unsigned 32-bit integer (little-endian) representing the validation result (1 for valid, 0 for invalid)",
    "Canonical_solution": "from fastapi import FastAPI, WebSocket\nimport struct\n\napp = FastAPI()\n\n@app.websocket('/validate_session_ws')\nasync def websocket_endpoint(websocket: WebSocket):\n    await websocket.accept()\n    while True:\n        data = await websocket.receive_bytes()\n        user_id, session_id = struct.unpack('<II', data)\n        result = (user_id ^ session_id) % 23 == 0\n        await websocket.send_bytes(struct.pack('<I', result))",
    "Code_level": "Function-level",
    "FSMID_for_test": 48,
    "right_result": "from fastapi import FastAPI, WebSocket\nfrom fastapi.responses import JSONResponse\nfrom typing import Optional\n\napp = FastAPI()\n\n@app.websocket(\"/ws\")\nasync def websocket_endpoint(websocket: WebSocket):\n    await websocket.accept()\n    while True:\n        data = await websocket.receive_bytes(8)\n        user_id = int.from_bytes(data[:4], 'little')\n        session_id = int.from_bytes(data[4:], 'little')\n        if user_id & session_id == user_id:\n            await websocket.send_bytes(b'\\x01')\n        else:\n            await websocket.send_bytes(b'\\x00')"
  },
  {
    "Task_id": 451,
    "Instruction": "Task Description: Implement a WebSocket server using Tornado in Python to handle real-time communication with clients, including processing video frames and managing participant data.\n\nClass Description: WebSocketHandler is a Tornado WebSocket handler class that manages WebSocket connections, processes incoming messages, and handles the lifecycle of WebSocket connections.\n\nAttributes:\n- None explicitly defined in the class (uses global variables for state management)\n\nMethods:\n- open() -> None - Called when a new WebSocket connection is established. Initializes participant position and calls newParticipant.\n- on_message(message: str) -> None - Handles incoming WebSocket messages. Processes different message types (identified by 'msgID') to manage video frame extraction, data writing to CSV, and frame navigation.\n- on_close() -> None - Called when the WebSocket connection is closed (currently empty implementation).\n- on_error() -> None - Called when an error occurs (not shown in the reference code but typically part of WebSocketHandler).\n\nClass Description: Application is a Tornado web application class that routes WebSocket and static file requests.\n\nAttributes:\n- None explicitly defined (inherits from tornado.web.Application)\n\nMethods:\n- __init__() -> None - Initializes the application with URL handlers for WebSocket connections and static files, and configures template paths.\n\nNote: The reference code also uses several global variables and helper functions (newParticipant, sendVideoEnd, sendVideoFrame, writeDataToCSV, writeScreenCapOutputFrames, closeScreenCapOutVideo) which are not part of the class definitions but are used by the WebSocketHandler methods.",
    "Canonical_solution": "import tornado.websocket\nimport tornado.web\nimport tornado.escape\nimport json\nimport csv\nimport os\nimport glob\nimport numpy as np\nimport subprocess\nimport re\nfrom itertools import chain\n\nclass WebSocketHandler(tornado.websocket.WebSocketHandler):\n    def open(self):\n        global_variables.participantPos = -1\n        newParticipant(self)\n\n    def on_message(self, message):\n        msg = tornado.escape.json_decode(message)\n        \n        if msg['msgID'] == '1':\n            global_variables.participant.videosPos += 1\n            pv = global_variables.participant.videos[global_variables.participant.videosPos]\n            video = global_variables.participant.directory + '/' + pv.filename\n            \n            outDir = outputPrefix + video + \"_frames\" + '/'\n            if not os.path.isdir(outDir):\n                os.makedirs(outDir)\n\n            gpCSVDone = outputPrefix + global_variables.participant.directory + '_' + pv.filename + '_' + csvDoneName\n            gpCSV = outputPrefix + global_variables.participant.directory + '_' + pv.filename + '_' + csvTempName\n            \n            if os.path.isfile(gpCSVDone):\n                sendVideoEnd(self)\n                return\n            elif os.path.isfile(gpCSV):\n                os.remove(gpCSV)\n                if writeCSV:\n                    with open(gpCSV, 'w', newline='') as csvfile:\n                        writer = csv.DictWriter(csvfile, fieldnames=fieldnames, delimiter=',', quoting=csv.QUOTE_ALL)\n                        writer.writeheader()\n\n            framesDoneFile = outDir + '/' + \"framesExtracted.txt\"\n            if not os.path.isfile(framesDoneFile):\n                completedProcess = subprocess.run('ffmpeg -i \"./' + video + '\" -vf showinfo \"' + outDir + 'frame_%08d.png\"',\n                    stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True, shell=True)\n\n                nFrames = len(glob.glob(outDir + '*.png'))\n                if nFrames == 0:\n                    sendVideoEnd(self)\n                    return\n\n                allPts = np.ones(nFrames, dtype=np.int) * -1\n                ptsTimebase = -1\n                framerate = -1\n                lines = completedProcess.stderr.splitlines()\n                for l in lines:\n                    if l.startswith(\"[Parsed_showinfo_0 @\"):\n                        timebase = l.find(\"config in time_base:\")\n                        fr = l.find(\", frame_rate:\")\n                        nStart = l.find(\"n:\")\n                        ptsStart = l.find(\"pts:\")\n                        pts_timeStart = l.find(\"pts_time:\")\n                        if nStart >= 0 and ptsStart >= 0:\n                            frameNum = int(l[nStart+2:ptsStart-1].strip())\n                            pts = int(l[ptsStart+4:pts_timeStart].strip())\n                            allPts[frameNum] = pts\n                        elif timebase >= 0:\n                            ptsTimebase = l[timebase+20:fr].strip()\n                            framerate = l[fr+13:].strip()\n                            sl = framerate.find(\"/\")\n                            if sl > 0:\n                                frPre = framerate[0:sl]\n                                frPost = framerate[sl+1:]\n                                framerate = float(frPre) / float(frPost)\n                            else:\n                                framerate = float(framerate)\n\n                prev = 0\n                for i in range(0, nFrames):\n                    if allPts[i] == -1:\n                        allPts[i] = prev + int(1000/framerate)\n                    prev = allPts[i]\n\n                for i in range(0, nFrames):\n                    inputFile = outDir + frameExtractFormat.format(i+1)\n                    outputFile = outDir + frameOutFormat.format(i, allPts[i])\n                    os.rename(inputFile, outputFile)\n\n                with open(framesDoneFile, 'w') as f:\n                    f.write(\"Done.\")\n\n            pv.frameFilesList = sorted(glob.glob(outDir + '*.png'))\n            pv.frameFilesPos = 0\n            sendVideoFrame(self, pv.frameFilesList[pv.frameFilesPos], pv)\n\n        elif msg['msgID'] == '3':\n            frameTimeEpoch = writeDataToCSV(global_variables.participant, msg)\n\n            if global_variables.writeScreenCapVideo:\n                writeScreenCapOutputFrames(global_variables.participant, frameTimeEpoch)\n\n            pv = global_variables.participant.videos[global_variables.participant.videosPos]\n            pv.frameFilesPos += 1\n\n            if pv.frameFilesPos >= len(pv.frameFilesList):\n                if global_variables.writeScreenCapVideo:\n                    closeScreenCapOutVideo(global_variables.participant)\n\n                gpCSV = outputPrefix + global_variables.participant.directory + '_' + pv.filename + '_' + csvTempName\n                gpCSVDone = outputPrefix + global_variables.participant.directory + '_' + pv.filename + '_' + csvDoneName\n                if os.path.isfile(gpCSV):\n                    os.rename(gpCSV, gpCSVDone)\n\n                sendVideoEnd(self)\n            else:\n                sendVideoFrame(self, pv.frameFilesList[pv.frameFilesPos], pv)\n\n    def on_close(self):\n        pass\n\nclass Application(tornado.web.Application):\n    def __init__(self):\n        handlers = [\n            (r'/websocket', WebSocketHandler),\n            (r'/(.*)', tornado.web.StaticFileHandler, {'path': '.', 'default_filename': ''}),\n        ]\n        settings = {\n            'template_path': 'templates'\n        }\n        tornado.web.Application.__init__(self, handlers, **settings)",
    "Code_level": "Class-level",
    "FSMID_for_test": 50,
    "right_result": "```python\nimport tornado.ioloop\nimport tornado.web\nimport tornado.websocket\nimport csv\nimport os\n\nclass WebSocketHandler(tornado.websocket.WebSocketHandler):\n    def open(self):\n        self.participant_position = None\n        newParticipant(self)\n\n    def on_message(self, message):\n        msg = json.loads(message)\n        msgID = msg.get('msgID')\n        if msgID == 'frame':\n            sendVideoFrame(self, msg.get('frame'))\n        elif msgID == 'data':\n            writeDataToCSV(msg.get('data'))\n        elif msgID == 'navigate':\n            navigateFrame(msg.get('direction'))\n\n    def on_close(self):\n        pass\n\n    def on_error(self):\n        pass\n\nclass Application(tornado.web.Application):\n    def __init__(self):\n        handlers = [\n            (r\"/ws\", WebSocketHandler),\n            (r\"/static/(.*)\", tornado.web.StaticFileHandler, {\"path\": \"static\"})\n        ]\n        super(Application, self).__init__(handlers, template_path=\"templates\")\n\ndef main():\n    app = Application()\n    app.listen(8888)\n    tornado.ioloop.IOLoop.current().start()\n\nif __name__ == \"__main__\":\n    main()\n```"
  },
  {
    "Task_id": 453,
    "Instruction": "Task Description: Create a WebSocket server using autobahn and twisted in Python that handles client connections, messages, and disconnections.\n\nClass Description: WebSocketServer is a class that implements a WebSocket server using autobahn's WebSocketServerProtocol and twisted's reactor pattern. It manages client connections and message exchanges over WebSocket protocol.\n\nAttributes:\n- host: str - The IP address to bind the server to (default: \"127.0.0.1\")\n- port: int - The port number to listen on (default: 9000)\n- factory: WebSocketServerFactory - The factory that creates protocol instances for each connection\n\nMethods:\n- __init__(host: str = \"127.0.0.1\", port: int = 9000) -> None - Initializes the WebSocket server with specified host and port\n- run() -> None - Starts the WebSocket server and begins listening for connections\n\nNested Class: MyServerProtocol (inherits from WebSocketServerProtocol)\nMethods:\n- onConnect(request) -> None - Called when a client connects (request contains connection details)\n- onOpen() -> None - Called when WebSocket connection is fully established\n- onMessage(payload: bytes, isBinary: bool) -> None - Called when a message is received from client (echoes back the same message)\n- onClose(wasClean: bool, code: int, reason: str) -> None - Called when connection is closed",
    "Canonical_solution": "from autobahn.twisted.websocket import WebSocketServerProtocol, WebSocketServerFactory\nfrom twisted.internet import reactor\n\nclass MyServerProtocol(WebSocketServerProtocol):\n    def onConnect(self, request):\n        print(\"Client connecting: {0}\".format(request.peer))\n\n    def onOpen(self):\n        print(\"WebSocket connection open.\")\n\n    def onMessage(self, payload, isBinary):\n        if isBinary:\n            print(\"Binary message received: {0} bytes\".format(len(payload)))\n        else:\n            print(\"Text message received: {0}\".format(payload.decode('utf8')))\n        self.sendMessage(payload, isBinary)\n\n    def onClose(self, wasClean, code, reason):\n        print(\"WebSocket connection closed: {0}\".format(reason))\n\nclass WebSocketServer:\n    def __init__(self, host=\"127.0.0.1\", port=9000):\n        self.host = host\n        self.port = port\n        self.factory = WebSocketServerFactory(f\"ws://{host}:{port}\")\n        self.factory.protocol = MyServerProtocol\n\n    def run(self):\n        reactor.listenTCP(self.port, self.factory)\n        reactor.run()",
    "Code_level": "Class-level",
    "FSMID_for_test": 52,
    "right_result": "```python\nfrom twisted.internet import reactor\nfrom twisted.internet.protocol import Factory\nfrom twisted.web import server\nfrom autobahn.twisted.websocket import WebSocketServerFactory, \\\n    WebSocketServerProtocol\n\nclass WebSocketServerProtocol(WebSocketServerProtocol):\n    def onConnect(self, request):\n        print(\"Client connected\")\n\n    def onOpen(self):\n        print(\"WebSocket connection opened\")\n\n    def onMessage(self, payload, isBinary):\n        print(\"Message received: \" + str(payload))\n        self.sendMessage(payload, isBinary)\n\n    def onClose(self, wasClean, code, reason):\n        print(\"WebSocket connection closed\")\n\nclass WebSocketServer(server.Site):\n    def __init__(self, host=\"127.0.0.1\", port=9000):\n        self.host = host\n        self.port = port\n        self.factory = WebSocketServerFactory(u\"ws://{}:{}\".format(host, port))\n        self.factory.protocol = WebSocketServerProtocol\n        server.Site.__init__(self, self.factory)\n\n    def run(self):\n        reactor.listenTCP(self.port, self.factory, interface=self.host)\n        reactor.run()\n\nif __name__ == \"__main__\":\n    ws_server = WebSocketServer()\n    ws_server.run()\n```"
  },
  {
    "Task_id": 455,
    "Instruction": "Task Description: Create a WebSocket server using Autobahn and Twisted in Python that handles client connections, messages, and disconnections.\n\nClass Description: The WebSocketServer class implements a WebSocket server that listens for incoming connections, processes messages, and manages the connection lifecycle.\n\nAttributes:\n- host: str - The IP address or hostname to bind the server to (default: \"127.0.0.1\")\n- port: int - The port number to listen on (default: 9000)\n- factory: WebSocketServerFactory - The factory that creates protocol instances for each connection\n\nMethods:\n- __init__(host: str = \"127.0.0.1\", port: int = 9000) -> None - Initializes the WebSocket server with the specified host and port\n- start() -> None - Starts the WebSocket server by binding to the specified port and running the reactor loop\n\nNested Class: MyServerProtocol (inherits from WebSocketServerProtocol)\nMethods:\n- onConnect(request) -> None - Called when a client connects (prints connection info)\n- onOpen() -> None - Called when WebSocket connection is established (prints open message)\n- onMessage(payload: bytes, isBinary: bool) -> None - Handles incoming messages (echoes back received messages)\n- onClose(wasClean: bool, code: int, reason: str) -> None - Called when connection closes (prints close reason)",
    "Canonical_solution": "from autobahn.twisted.websocket import WebSocketServerProtocol, WebSocketServerFactory\nfrom twisted.internet import reactor\n\nclass MyServerProtocol(WebSocketServerProtocol):\n    def onConnect(self, request):\n        print(\"Client connecting: {0}\".format(request.peer))\n\n    def onOpen(self):\n        print(\"WebSocket connection open.\")\n\n    def onMessage(self, payload, isBinary):\n        if isBinary:\n            print(\"Binary message received: {0} bytes\".format(len(payload)))\n        else:\n            print(\"Text message received: {0}\".format(payload.decode('utf8')))\n        self.sendMessage(payload, isBinary)\n\n    def onClose(self, wasClean, code, reason):\n        print(\"WebSocket connection closed: {0}\".format(reason))\n\nclass WebSocketServer:\n    def __init__(self, host=\"127.0.0.1\", port=9000):\n        self.host = host\n        self.port = port\n        self.factory = WebSocketServerFactory(f\"ws://{host}:{port}\")\n        self.factory.protocol = MyServerProtocol\n\n    def start(self):\n        reactor.listenTCP(self.port, self.factory)\n        reactor.run()",
    "Code_level": "Class-level",
    "FSMID_for_test": 52,
    "right_result": "```python\nfrom twisted.internet import reactor, protocol\nfrom twisted.web import server\nfrom autobahn.twisted.websocket import WebSocketServerFactory, WebSocketServerProtocol\n\nclass WebSocketServerFactory(server.Site):\n    def __init__(self, protocol_factory):\n        server.Site.__init__(self, protocol_factory)\n\nclass MyServerProtocol(WebSocketServerProtocol):\n    def onConnect(self, request):\n        print(f\"Client connected: {request.resource})\n\n    def onOpen(self):\n        print(\"WebSocket connection opened\")\n\n    def onMessage(self, payload, isBinary):\n        print(f\"Received message: {payload.decode('utf-8')}\")\n        self.sendMessage(payload)\n\n    def onClose(self, wasClean, code, reason):\n        print(f\"Connection closed: {reason}\")\n\nclass WebSocketServer(protocol.ServerFactory):\n    protocol = MyServerProtocol\n\n    def __init__(self, host=\"127.0.0.1\", port=9000):\n        self.host = host\n        self.port = port\n        self.factory = WebSocketServerFactory()\n        self.factory.protocol = MyServerProtocol\n\n    def start(self):\n        reactor.listenTCP(self.port, self.factory, interface=self.host)\n        reactor.run()\n\nif __name__ == \"__main__\":\n    ws_server = WebSocketServer()\n    ws_server.start()\n```"
  },
  {
    "Task_id": 471,
    "Instruction": "Task Description: Implement a ZeroMQ-based RPC client class in Python that subscribes to messages from a publisher, handles heartbeats, and manages connection states.\n\nClass Description: The RpcClient class establishes a ZeroMQ SUB socket to receive messages from a publisher, monitors connection health through heartbeats, and provides callback functionality for message processing.\n\nAttributes:\n- _context: zmq.Context - ZeroMQ context for socket management\n- _socket_sub: zmq.Socket - SUB socket for receiving messages\n- _active: bool - Flag indicating if the client is running\n- _thread: threading.Thread - Thread for running the message loop\n- _lock: threading.Lock - Thread synchronization lock\n- _last_received_ping: float - Timestamp of last received heartbeat\n\nMethods:\n- __init__() -> None - Initializes the ZeroMQ context and SUB socket with keepalive options\n- start(sub_address: str) -> None - Connects to the publisher and starts the message loop thread\n- stop() -> None - Stops the message loop thread\n- join() -> None - Waits for the message loop thread to complete\n- run() -> None - Main message processing loop (handles heartbeats and disconnections)\n- callback(topic: str, data: Any) -> None - Abstract method for processing received messages (to be implemented by subclasses)\n- subscribe_topic(topic: str) -> None - Subscribes to a specific message topic\n- on_disconnected() -> None - Handles disconnection events (prints warning message)",
    "Canonical_solution": "import threading\nfrom time import time\nfrom functools import lru_cache\nfrom typing import Any\nimport zmq\n\nclass RpcClient:\n    def __init__(self) -> None:\n        self._context: zmq.Context = zmq.Context()\n        self._socket_sub: zmq.Socket = self._context.socket(zmq.SUB)\n        \n        self._socket_sub.setsockopt(zmq.TCP_KEEPALIVE, 1)\n        self._socket_sub.setsockopt(zmq.TCP_KEEPALIVE_IDLE, 60)\n\n        self._active: bool = False\n        self._thread: threading.Thread = None\n        self._lock: threading.Lock = threading.Lock()\n        self._last_received_ping: time = time()\n\n    def start(self, sub_address: str) -> None:\n        if self._active:\n            return\n\n        self._socket_sub.connect(sub_address)\n        self._active = True\n        self._thread = threading.Thread(target=self.run)\n        self._thread.start()\n        self._last_received_ping = time()\n\n    def stop(self) -> None:\n        if not self._active:\n            return\n        self._active = False\n\n    def join(self) -> None:\n        if self._thread and self._thread.is_alive():\n            self._thread.join()\n        self._thread = None\n\n    def run(self) -> None:\n        pull_tolerance: int = HEARTBEAT_TOLERANCE * 1000\n\n        while self._active:\n            if not self._socket_sub.poll(pull_tolerance):\n                self.on_disconnected()\n                continue\n\n            topic, data = self._socket_sub.recv_pyobj(flags=zmq.NOBLOCK)\n\n            if topic == HEARTBEAT_TOPIC:\n                self._last_received_ping = data\n            else:\n                self.callback(topic, data)\n\n        self._socket_sub.close()\n\n    def callback(self, topic: str, data: Any) -> None:\n        raise NotImplementedError\n\n    def subscribe_topic(self, topic: str) -> None:\n        self._socket_sub.setsockopt_string(zmq.SUBSCRIBE, topic)\n\n    def on_disconnected(self):\n        msg: str = f\"RpcServer has no response over {HEARTBEAT_TOLERANCE} seconds, please check you connection.\"\n        print(msg)",
    "Code_level": "Class-level",
    "FSMID_for_test": 85,
    "right_result": "```python\nimport zmq\nimport threading\nimport time\n\nclass RpcClient:\n    def __init__(self):\n        self._context = zmq.Context()\n        self._socket_sub = self._context.socket(zmq.SUB)\n        self._socket_sub.setsockopt(zmq.LINGER, 0)\n        self._socket_sub.setsockopt(zmq.SNDHWM, 1000)\n        self._socket_sub.setsockopt(zmq.RCVHWM, 1000)\n        self._socket_sub.setsockopt(zmq.KEEPALIVE, 1)\n        self._active = False\n        self._thread = None\n        self._lock = threading.Lock()\n        self._last_received_ping = 0\n\n    def start(self, sub_address: str) -> None:\n        self._socket_sub.connect(sub_address)\n        self._socket_sub.setsockopt_string(zmq.SUBSCRIBE, '')\n        self._active = True\n        self._thread = threading.Thread(target=self.run)\n        self._thread.start()\n\n    def stop(self) -> None:\n        with self._lock:\n            self._active = False\n\n    def join(self) -> None:\n        if self._thread:\n            self._thread.join()\n\n    def run(self) -> None:\n        while self._active:\n            try:\n                topic, message = self._socket_sub.recv_multipart()\n                current_time = time.time()\n                if topic == b'ping':\n                    self._last_received_ping = current_time\n                else:\n                    self.callback(topic.decode(), message)\n            except zmq.ZMQError as e:\n                if e.errno == zmq.EAGAIN:\n                    continue\n                else:\n                    self.on_disconnected()\n                    break\n\n    def callback(self, topic: str, data: Any) -> None:\n        pass\n\n    def subscribe_topic(self, topic: str) -> None:\n        self._socket_sub.setsockopt_string(zmq.SUBSCRIBE, topic)\n\n    def on_disconnected(self) -> None:\n        print(\"Disconnected from publisher\")\n```"
  },
  {
    "Task_id": 472,
    "Instruction": "Task Description: Implement a ZeroMQ consumer class in Python that subscribes to messages from a publisher using the PUB/SUB pattern, with timeout handling for message reception.\n\nClass Description: The ZeroMQConsumer class establishes a connection to a ZeroMQ publisher, subscribes to all messages, and provides methods to receive messages and clean up resources.\n\nAttributes:\n- _zmq_context: zmq.Context - The ZeroMQ context for managing sockets\n- socket: zmq.Socket - The SUB socket for receiving messages from the publisher\n\nMethods:\n- __init__(zmq_port: int) -> None - Initializes the consumer with a connection to the specified port\n  - Input: zmq_port (int) - The port number to connect to the publisher\n  - Output: None\n- receive_message() -> Dict[str, Any] - Receives and parses a message from the publisher\n  - Input: None\n  - Output: Dict[str, Any] - The parsed message content or empty dict if timeout occurs\n- close() -> None - Closes the socket and terminates the context\n  - Input: None\n  - Output: None",
    "Canonical_solution": "import zmq\nfrom typing import Dict, Any\nimport ujson\n\nclass ZeroMQConsumer:\n    def __init__(self, zmq_port: int):\n        self._zmq_context = zmq.Context()\n        self.socket = self._zmq_context.socket(zmq.SUB)\n        self.socket.connect(f\"tcp://localhost:{zmq_port}\")\n        self.socket.setsockopt_string(zmq.SUBSCRIBE, \"\")\n        self.socket.setsockopt(zmq.RCVTIMEO, 100)  # ZMQ_RECV_TIMEOUT\n\n    def receive_message(self) -> Dict[str, Any]:\n        try:\n            json_data = self.socket.recv_string()\n            return ujson.loads(json_data)\n        except zmq.Again:\n            return {}\n\n    def close(self):\n        self.socket.close()\n        self._zmq_context.term()",
    "Code_level": "Class-level",
    "FSMID_for_test": 85,
    "right_result": "```python\nimport zmq\nimport json\n\nclass ZeroMQConsumer:\n    def __init__(self, zmq_port: int) -> None:\n        self._zmq_context = zmq.Context()\n        self.socket = self._zmq_context.socket(zmq.SUB)\n        self.socket.connect(f\"tcp://localhost:{zmq_port}\")\n        self.socket.setsockopt_string(zmq.SUBSCRIBE, \"\")\n\n    def receive_message(self) -> dict:\n        try:\n            message = self.socket.recv_json()\n            return message\n        except zmq.Again:\n            return {}\n\n    def close(self) -> None:\n        self.socket.close()\n        self._zmq_context.term()\n```"
  },
  {
    "Task_id": 473,
    "Instruction": "Task Description: Implement a ZeroMQ-based message manager class for handling publish-subscribe communication between processes, supporting both message publishing and subscription functionalities.\n\nClass Description: The ZmqManager class provides an interface for ZeroMQ-based inter-process communication using PUB/SUB and PUSH/PULL patterns. It handles message serialization/deserialization and manages connections to publisher/subscriber endpoints.\n\nAttributes:\n- sink: [zmq.Socket] - ZeroMQ PUSH socket for sending messages to the publisher\n- sub: [zmq.Socket] - ZeroMQ SUB socket for receiving messages from the publisher\n- channel: [str] - The communication channel identifier for message filtering\n\nMethods:\n- __init__(url: str = 'zmq+tcp://localhost:5555+5556', channel: str = 'socketio', write_only: bool = False) -> None - Initializes the ZeroMQ connections. Parses the connection URL and sets up both PUSH and SUB sockets.\n- _publish(data: Any) -> None - Serializes and publishes data to the specified channel using pickle.\n- zmq_listen() -> Generator[bytes, None, None] - Continuously listens for incoming messages from the SUB socket and yields raw byte messages.\n- _listen() -> Generator[Any, None, None] - Listens for messages, deserializes them using pickle, and yields only messages matching the specified channel.",
    "Canonical_solution": "import pickle\nimport re\nfrom eventlet.green import zmq\n\nclass ZmqManager:\n    def __init__(self, url='zmq+tcp://localhost:5555+5556', channel='socketio', write_only=False):\n        r = re.compile(r':\\d+\\+\\d+$')\n        if not (url.startswith('zmq+tcp://') and r.search(url)):\n            raise RuntimeError('unexpected connection string: ' + url)\n\n        url = url.replace('zmq+', '')\n        (sink_url, sub_port) = url.split('+')\n        sink_port = sink_url.split(':')[-1]\n        sub_url = sink_url.replace(sink_port, sub_port)\n\n        sink = zmq.Context().socket(zmq.PUSH)\n        sink.connect(sink_url)\n\n        sub = zmq.Context().socket(zmq.SUB)\n        sub.setsockopt_string(zmq.SUBSCRIBE, '')\n        sub.connect(sub_url)\n\n        self.sink = sink\n        self.sub = sub\n        self.channel = channel\n\n    def _publish(self, data):\n        pickled_data = pickle.dumps(\n            {\n                'type': 'message',\n                'channel': self.channel,\n                'data': data\n            }\n        )\n        return self.sink.send(pickled_data)\n\n    def zmq_listen(self):\n        while True:\n            response = self.sub.recv()\n            if response is not None:\n                yield response\n\n    def _listen(self):\n        for message in self.zmq_listen():\n            if isinstance(message, bytes):\n                try:\n                    message = pickle.loads(message)\n                except Exception:\n                    pass\n            if isinstance(message, dict) and \\\n                    message['type'] == 'message' and \\\n                    message['channel'] == self.channel and \\\n                    'data' in message:\n                yield message['data']\n        return",
    "Code_level": "Class-level",
    "FSMID_for_test": 85,
    "right_result": "```python\nimport zmq\nimport pickle\n\nclass ZmqManager:\n    def __init__(self, url: str = 'zmq+tcp://localhost:5555+5556', channel: str = 'socketio', write_only: bool = False) -> None:\n        self.context = zmq.Context()\n        self.sink = self.context.socket(zmq.PUSH) if write_only else None\n        self.sub = self.context.socket(zmq.SUB)\n        self.channel = channel\n        self.sub.setsockopt_string(zmq.SUBSCRIBE, self.channel.encode())\n        self.sink.connect(url) if write_only else self.sub.connect(url)\n\n    def _publish(self, data: Any) -> None:\n        serialized_data = pickle.dumps(data)\n        self.sink.send(serialized_data) if self.sink else None\n\n    def zmq_listen(self) -> Generator[bytes, None, None]:\n        while True:\n            raw_message = self.sub.recv()\n            yield raw_message\n\n    def _listen(self) -> Generator[Any, None, None]:\n        for raw_message in self.zmq_listen():\n            deserialized_data = pickle.loads(raw_message)\n            if deserialized_data['channel'] == self.channel:\n                yield deserialized_data['data']\n```"
  },
  {
    "Task_id": 474,
    "Instruction": "Task Description: Implement a ZeroMQ-based client class for bidirectional communication with a server, capable of sending text data and receiving processed results as NumPy arrays.\n\nClass Description: BertClient is a ZeroMQ client that establishes PUSH-SUB pattern communication with a server. It sends text data for processing and subscribes to receive the processed results as NumPy arrays.\n\nAttributes:\n- context: zmq.Context - ZeroMQ context for socket management\n- sender: zmq.Socket - PUSH socket for sending requests to server\n- receiver: zmq.Socket - SUB socket for receiving responses from server\n- identity: bytes - Unique client identifier\n- request_id: int - Counter for tracking pending requests\n- timeout: int - Timeout setting for operations\n- pending_request: set - Set of outstanding request IDs\n\nMethods:\n- __init__(ip='localhost', port=5555, port_out=5556, identity=None, timeout=-1) -> None - Initializes the client with server connection details\n- close() -> None - Closes sockets and terminates context\n- _send(msg, msg_len=0) -> None - Internal method for sending messages to server\n- _recv() -> Response - Internal method for receiving raw responses\n- _recv_ndarray() -> Response - Internal method for receiving and decoding NumPy array responses\n- encode(texts, blocking=True) -> Optional[np.ndarray] - Sends texts for encoding and returns processed arrays\n- fetch(delay=0.0) -> Generator[Response, None, None] - Yields pending responses with optional delay\n- fetch_all(sort=True, concat=False) -> Union[List[np.ndarray], np.ndarray] - Retrieves all pending responses with sorting and concatenation options",
    "Canonical_solution": "import sys\nimport uuid\nimport zmq\nfrom zmq.utils import jsonapi\nimport numpy as np\nimport pickle\nfrom collections import namedtuple\n\nResponse = namedtuple('Response', ['id', 'content'])\n\nclass BertClient:\n    def __init__(self, ip='localhost', port=5555, port_out=5556, identity=None, timeout=-1):\n        self.context = zmq.Context()\n        self.sender = self.context.socket(zmq.PUSH)\n        self.sender.setsockopt(zmq.LINGER, 0)\n        self.identity = identity or str(uuid.uuid4()).encode('ascii')\n        self.sender.connect('tcp://%s:%d' % (ip, port))\n\n        self.receiver = self.context.socket(zmq.SUB)\n        self.receiver.setsockopt(zmq.LINGER, 0)\n        self.receiver.setsockopt(zmq.SUBSCRIBE, self.identity)\n        self.receiver.connect('tcp://%s:%d' % (ip, port_out))\n\n        self.request_id = 0\n        self.timeout = timeout\n        self.pending_request = set()\n\n    def close(self):\n        self.sender.close()\n        self.receiver.close()\n        self.context.term()\n\n    def _send(self, msg, msg_len=0):\n        self.sender.send_multipart([self.identity, msg, b'%d' % self.request_id, b'%d' % msg_len])\n        self.pending_request.add(self.request_id)\n        self.request_id += 1\n\n    def _recv(self):\n        response = self.receiver.recv_multipart()\n        request_id = int(response[-1])\n        self.pending_request.remove(request_id)\n        return Response(request_id, response)\n\n    def _recv_ndarray(self):\n        request_id, response = self._recv()\n        arr_info, arr_val = jsonapi.loads(response[1]), response[2]\n        X = np.frombuffer(memoryview(arr_val), dtype=str(arr_info['dtype']))\n        return Response(request_id, X.reshape(arr_info['shape']))\n\n    def encode(self, texts, blocking=True):\n        self._send(jsonapi.dumps(texts), len(texts))\n        rst = self._recv_ndarray().content if blocking else None\n        return rst\n\n    def fetch(self, delay=.0):\n        time.sleep(delay)\n        while self.pending_request:\n            yield self._recv_ndarray()\n\n    def fetch_all(self, sort=True, concat=False):\n        if self.pending_request:\n            tmp = list(self.fetch())\n            if sort:\n                tmp = sorted(tmp, key=lambda v: v.id)\n            tmp = [v.content for v in tmp]\n            if concat:\n                tmp = np.concatenate(tmp, axis=0)\n            return tmp",
    "Code_level": "Class-level",
    "FSMID_for_test": 85,
    "right_result": "```python\nimport zmq\nimport numpy as np\n\nclass BertClient:\n    def __init__(self, ip='localhost', port=5555, port_out=5556, identity=None, timeout=-1):\n        self.context = zmq.Context()\n        self.sender = self.context.socket(zmq.PUSH)\n        self.receiver = self.context.socket(zmq.SUB)\n        self.sender.connect(f\"tcp://{ip}:{port_out}\")\n        self.receiver.connect(f\"tcp://{ip}:{port}\")\n        self.identity = identity if identity else f\"BertClient-{np.random.randint(0, 1000)}\"\n        self.sender.setsockopt_string(zmq.IDENTITY, self.identity)\n        self.receiver.setsockopt_string(zmq.IDENTITY, self.identity)\n        self.receiver.setsockopt(zmq.SUBSCRIBE, b'')\n        self.request_id = 0\n        self.timeout = timeout\n        self.pending_request = set()\n\n    def close(self):\n        self.sender.close()\n        self.receiver.close()\n        self.context.term()\n\n    def _send(self, msg, msg_len=0):\n        self.sender.send(msg, zmq.SNDMORE if msg_len > 0 else 0)\n\n    def _recv(self):\n        return self.receiver.recv()\n\n    def _recv_ndarray(self):\n        raw_data = self._recv()\n        return np.frombuffer(raw_data, dtype=np.float32)\n\n    def encode(self, texts, blocking=True):\n        self.request_id += 1\n        self.pending_request.add(self.request_id)\n        self._send(f\"{self.request_id} {texts}\".encode())\n        if blocking:\n            while self.request_id in self.pending_request:\n                response = self._recv()\n                if response.startswith(b'result ' + self.identity.encode()):\n                    self.pending_request.remove(self.request_id)\n                    return self._recv_ndarray()\n        return None\n\n    def fetch(self, delay=0.0):\n        while True:\n            response = self._recv()\n            if response.startswith(b'result ' + self.identity.encode()):\n                yield self._recv_ndarray()\n            if delay > 0:\n                time.sleep(delay)\n\n    def fetch_all(self, sort=True, concat=False):\n        all_responses = []\n        for response in self.fetch():\n            all_responses.append(response)\n        if sort:\n            all_responses.sort()\n        if concat:\n            return np.concatenate(all_responses)\n        return all_responses\n```"
  },
  {
    "Task_id": 475,
    "Instruction": "Task Description: Implement a ZeroMQ subscriber in Python that connects to a publisher and continuously receives messages.\n\nFunction Description: The function `setup_zmq_subscriber` initializes a ZeroMQ subscriber socket, connects it to a specified publisher endpoint, and configures it to subscribe to all messages. The function `receive_messages` continuously listens for and prints messages received through the socket.\n\nInput: \n- `remote_ip` (str, optional): The endpoint address of the ZeroMQ publisher in the format 'tcp://IP_ADDRESS:PORT'. Defaults to 'tcp://REMOTE_IP_ADDRESS:5555'.\n\nOutput: \n- `socket` (zmq.Socket): A configured ZeroMQ SUB socket ready to receive messages.\n- None (for `receive_messages`): The function runs indefinitely, printing received messages.",
    "Canonical_solution": "import zmq\n\ndef setup_zmq_subscriber(remote_ip='tcp://REMOTE_IP_ADDRESS:5555'):\n    context = zmq.Context()\n    socket = context.socket(zmq.SUB)\n    socket.connect(remote_ip)\n    socket.setsockopt_string(zmq.SUBSCRIBE, '')\n    return socket\n\ndef receive_messages(socket):\n    while True:\n        msg = socket.recv_string()\n        print(msg)",
    "Code_level": "Function-level",
    "FSMID_for_test": 85,
    "right_result": "```python\nimport zmq\n\ndef setup_zmq_subscriber(remote_ip='tcp://REMOTE_IP_ADDRESS:5555'):\n    context = zmq.Context()\n    socket = context.socket(zmq.SUB)\n    socket.connect(remote_ip)\n    socket.setsockopt_string(zmq.SUBSCRIBE, '')\n    return socket\n\ndef receive_messages(socket):\n    while True:\n        message = socket.recv()\n        print(message.decode())\n```"
  },
  {
    "Task_id": 476,
    "Instruction": "Task Description: Create a Python class that connects to a remote progress bar using ZeroMQ's PUB/SUB pattern to receive and display progress updates from a separate process.\n\nClass Description: The RemoteProgress class establishes a ZeroMQ SUB socket to subscribe to progress updates broadcast by a publisher process. It continuously receives messages containing progress percentages and labels, displaying them in a formatted way until interrupted.\n\nAttributes:\n- hostname: str - The hostname or IP address of the publisher (default: 'localhost')\n- port: int - The port number to connect to (default: 8080)\n- label: str - The current progress label received from the publisher\n\nMethods:\n- __init__(port: int = 8080, hostname: str = 'localhost') -> None - Initializes the RemoteProgress instance with connection parameters\n- __call__() -> None - Main method that establishes the connection, receives messages, and displays progress (runs in an infinite loop until interrupted)\n- _display_progress(percentage: float) -> None - Helper method that formats and displays the progress percentage (private method)",
    "Canonical_solution": "import zmq\nfrom typing import Optional\n\nclass RemoteProgress:\n    \"\"\"\n    Connect to a progress bar in a separate process with output_mode\n    set to 'broadcast' in order to display the results (to stdout).\n    \"\"\"\n\n    def __init__(self, port: int = 8080, hostname: str = 'localhost'):\n        self.hostname = hostname\n        self.port = port\n        self.label = \"\"\n\n    def __call__(self):\n        context = zmq.Context()\n        sock = context.socket(zmq.SUB)\n        sock.setsockopt(zmq.SUBSCRIBE, b'')\n        sock.connect('tcp://' + self.hostname +':'+str(self.port))\n        \n        percent = None\n        while True:\n            try:\n                message = sock.recv()\n                [percent_str, label] = message.split(b'|')\n                percent = float(percent_str)\n                self.label = label.decode()\n                self._display_progress(percent)\n            except KeyboardInterrupt:\n                if percent is not None:\n                    print(f\"Exited at {percent:.3f}% completion\")\n                break\n            except Exception:\n                print(f\"Could not process socket message: {message!r}\")\n\n    def _display_progress(self, percentage: float):\n        print(f\"\\r{self.label}: {percentage:.1f}%\", end='')",
    "Code_level": "Class-level",
    "FSMID_for_test": 85,
    "right_result": "```python\nimport zmq\n\nclass RemoteProgress:\n    def __init__(self, port: int = 8080, hostname: str = 'localhost') -> None:\n        self.hostname = hostname\n        self.port = port\n        self.context = zmq.Context()\n        self.socket = self.context.socket(zmq.SUB)\n        self.socket.connect(f\"tcp://{self.hostname}:{self.port}\")\n        self.socket.setsockopt_string(zmq.SUBSCRIBE, \"\")\n\n    def __call__(self) -> None:\n        while True:\n            message = self.socket.recv_string()\n            topic, data = message.split(\" \", 1)\n            if topic == \"progress\":\n                self._display_progress(float(data))\n\n    def _display_progress(self, percentage: float) -> None:\n        label = self.label\n        print(f\"{label}: {percentage}%\")\n```"
  },
  {
    "Task_id": 477,
    "Instruction": "Task Description: Implement a ZeroMQ-based network communication class that supports PUB/SUB pattern for sending and receiving messages between processes, with optional frame compression and message handling.\n\nClass Description: NetGear is a ZeroMQ wrapper class that facilitates network communication using various messaging patterns, with a focus on PUB/SUB pattern. It handles socket creation, connection management, message serialization, and frame compression/decompression.\n\nAttributes:\n- __logging: bool - Enables/disables logging functionality\n- __msg_context: zmq.Context - ZeroMQ context instance for socket management\n- __receive_mode: bool - Flag indicating if instance is in receive mode\n- __pattern: int - Selected messaging pattern (0: PAIR, 1: REQ/REP, 2: PUB/SUB)\n- __terminate: bool - Flag for graceful termination\n- __msg_socket: zmq.Socket - ZeroMQ socket instance\n- __subscriber_timeout: int - Timeout value for subscriber socket (in seconds)\n- __queue: deque - Buffer for storing received frames (receiver only)\n- __thread: Thread - Background thread for message handling (receiver only)\n\nMethods:\n- __init__(address=None, port=None, protocol=None, pattern=0, receive_mode=False, logging=False, **options) -> None - Initializes the NetGear instance with specified parameters\n- __recv_handler() -> None - Internal thread handler for receiving messages (receiver only)\n- recv() -> np.ndarray|None - Receives and returns a frame from the queue (receiver only)\n- send(frame, message=None) -> None - Sends a frame with optional metadata (sender only)\n- close(kill=False) -> None - Closes the connection and cleans up resources",
    "Canonical_solution": "import os\nimport time\nimport asyncio\nimport platform\nimport string\nimport secrets\nimport numpy as np\nimport logging as log\nfrom threading import Thread\nfrom collections import deque\nfrom os.path import expanduser\nimport zmq\nfrom zmq import auth\nfrom zmq.auth.thread import ThreadAuthenticator\nfrom zmq.error import ZMQError\n\nclass NetGear:\n    def __init__(\n        self,\n        address=None,\n        port=None,\n        protocol=None,\n        pattern=0,\n        receive_mode=False,\n        logging=False,\n        **options\n    ):\n        self.__logging = logging if isinstance(logging, bool) else False\n        self.__msg_context = zmq.Context.instance()\n        self.__receive_mode = receive_mode\n        self.__pattern = pattern\n        self.__terminate = False\n\n        valid_messaging_patterns = {\n            0: (zmq.PAIR, zmq.PAIR),\n            1: (zmq.REQ, zmq.REP),\n            2: (zmq.PUB, zmq.SUB),\n        }\n\n        msg_pattern = valid_messaging_patterns[pattern]\n        self.__msg_socket = self.__msg_context.socket(msg_pattern[1 if receive_mode else 0])\n\n        if pattern == 2:  # PUB/SUB pattern\n            if receive_mode:  # SUB socket\n                self.__msg_socket.setsockopt_string(zmq.SUBSCRIBE, \"\")\n                self.__subscriber_timeout = options.get('subscriber_timeout', None)\n                if self.__subscriber_timeout:\n                    self.__msg_socket.setsockopt(zmq.RCVTIMEO, self.__subscriber_timeout * 1000)\n                    self.__msg_socket.setsockopt(zmq.LINGER, 0)\n            else:  # PUB socket\n                self.__msg_socket.set_hwm(1)\n\n        if receive_mode:\n            address = \"*\" if address is None else address\n            port = \"5555\" if port is None else port\n            self.__msg_socket.bind(f\"{protocol}://{address}:{port}\")\n        else:\n            address = \"localhost\" if address is None else address\n            port = \"5555\" if port is None else port\n            self.__msg_socket.connect(f\"{protocol}://{address}:{port}\")\n\n        if receive_mode and pattern == 2:\n            self.__queue = deque(maxlen=96)\n            self.__thread = Thread(target=self.__recv_handler, name=\"NetGear\")\n            self.__thread.daemon = True\n            self.__thread.start()\n\n    def __recv_handler(self):\n        while not self.__terminate:\n            try:\n                msg_json = self.__msg_socket.recv_json(flags=zmq.NOBLOCK)\n                msg_data = self.__msg_socket.recv(flags=zmq.NOBLOCK)\n                \n                if msg_json[\"terminate_flag\"]:\n                    self.__terminate = True\n                    self.__queue.append(None)\n                    break\n\n                if msg_json[\"compression\"]:\n                    frame = simplejpeg.decode_jpeg(\n                        msg_data,\n                        colorspace=msg_json[\"compression\"][\"colorspace\"],\n                        fastdct=msg_json[\"compression\"][\"dct\"],\n                        fastupsample=msg_json[\"compression\"][\"ups\"],\n                    )\n                else:\n                    frame_buffer = np.frombuffer(msg_data, dtype=msg_json[\"dtype\"])\n                    frame = frame_buffer.reshape(msg_json[\"shape\"])\n\n                self.__queue.append(frame)\n\n            except zmq.ZMQError as e:\n                if e.errno == zmq.EAGAIN:\n                    time.sleep(0.00001)\n                    continue\n                else:\n                    self.__terminate = True\n                    self.__queue.append(None)\n                    break\n\n    def recv(self):\n        if not self.__receive_mode or self.__pattern != 2:\n            raise ValueError(\"recv() can only be used in receive mode with PUB/SUB pattern\")\n\n        while not self.__terminate:\n            if len(self.__queue) > 0:\n                return self.__queue.popleft()\n            time.sleep(0.00001)\n        return None\n\n    def send(self, frame, message=None):\n        if self.__receive_mode or self.__pattern != 2:\n            raise ValueError(\"send() can only be used in send mode with PUB/SUB pattern\")\n\n        exit_flag = True if (frame is None or self.__terminate) else False\n\n        msg_dict = {\n            \"terminate_flag\": exit_flag,\n            \"compression\": False,\n            \"message\": message,\n            \"pattern\": str(self.__pattern),\n            \"dtype\": str(frame.dtype),\n            \"shape\": frame.shape\n        }\n\n        self.__msg_socket.send_json(msg_dict, zmq.SNDMORE)\n        self.__msg_socket.send(frame, copy=False)\n\n    def close(self, kill=False):\n        self.__terminate = True\n        if self.__receive_mode and self.__pattern == 2:\n            if self.__thread is not None:\n                if kill:\n                    self.__msg_context.destroy()\n                self.__thread.join()\n                self.__thread = None\n        self.__msg_socket.close(linger=0)",
    "Code_level": "Class-level",
    "FSMID_for_test": 85,
    "right_result": "```python\nimport zmq\nimport numpy as np\nfrom collections import deque\nimport threading\nimport time\n\nclass NetGear:\n    def __init__(self, address=None, port=None, protocol=None, pattern=0, receive_mode=False, logging=False, **options):\n        self.__logging = logging\n        self.__msg_context = zmq.Context()\n        self.__receive_mode = receive_mode\n        self.__pattern = pattern\n        self.__terminate = False\n        self.__msg_socket = None\n        self.__subscriber_timeout = options.get('subscriber_timeout', 0)\n        self.__queue = deque()\n        self.__thread = None\n\n        if self.__receive_mode:\n            self.__msg_socket = self.__msg_context.socket(zmq.SUB)\n            self.__msg_socket.setsockopt(zmq.SUBSCRIBE, b'')\n            self.__msg_socket.setsockopt(zmq.RCVTIMEO, self.__subscriber_timeout * 1000)\n            self.__thread = threading.Thread(target=self.__recv_handler)\n            self.__thread.start()\n        else:\n            self.__msg_socket = self.__msg_context.socket(zmq.PUB)\n            if address and port:\n                self.__msg_socket.connect(f\"{protocol}://{address}:{port}\")\n\n    def __recv_handler(self):\n        while not self.__terminate:\n            try:\n                frame = self.__msg_socket.recv()\n                self.__queue.append(frame)\n            except zmq.Again:\n                continue\n\n    def recv(self):\n        if self.__queue:\n            return self.__queue.popleft()\n        return None\n\n    def send(self, frame, message=None):\n        if message:\n            frame = f\"{message}:{frame}\"\n        self.__msg_socket.send(frame.encode())\n\n    def close(self, kill=False):\n        self.__terminate = True\n        if self.__thread:\n            self.__thread.join()\n        self.__msg_socket.close()\n```"
  },
  {
    "Task_id": 478,
    "Instruction": "Task Description: Implement a ZeroMQ-based consumer class in Python that subscribes to messages from a publisher, processes token information from shared memory requests, and manages resource recycling.\n\nClass Description: The ZeroMQConsumer class is responsible for receiving and processing messages from a detokenization service via ZeroMQ's PUB/SUB pattern. It manages shared memory requests, tracks request statuses, and handles resource recycling when requests are completed.\n\nAttributes:\n- context: zmq.asyncio.Context - ZeroMQ asynchronous context for managing sockets\n- recv_from_detokenization: zmq.SUB - SUB socket for receiving messages from the publisher\n- shm_req_manager: ShmReqManager - Manager for shared memory request objects\n- req_id_to_out_inf: Dict[int, ReqStatus] - Dictionary mapping request IDs to their status objects\n- recycle_event: asyncio.Event - Event flag for triggering resource recycling\n\nMethods:\n- __init__(zmq_mode: str, detokenization_pub_port: int, shm_req_manager: ShmReqManager) -> None - Initializes the consumer with ZeroMQ configuration and shared memory manager\n- handle_loop() -> None - Main processing loop that receives messages and manages token output\n- recycle_resource_loop() -> None - Background loop for recycling completed request resources\n\nHelper Class (ReqStatus):\n- __init__(group_request_id, multimodal_params, req_objs: List[Req], start_time) -> None - Tracks status of a request group\n- can_release() -> bool - Determines if all requests in the group can be released",
    "Canonical_solution": "import zmq\nimport zmq.asyncio\nfrom typing import Dict\nfrom lightllm.server.core.objs import Req\nfrom lightllm.server.core.objs.shm_req_manager import ShmReqManager\nfrom lightllm.server.core.objs.io_objs import GroupReqObjs\nimport asyncio\n\nclass ZeroMQConsumer:\n    def __init__(self, zmq_mode: str, detokenization_pub_port: int, shm_req_manager: ShmReqManager):\n        self.context = zmq.asyncio.Context()\n        self.recv_from_detokenization = self.context.socket(zmq.SUB)\n        self.recv_from_detokenization.connect(f\"{zmq_mode}127.0.0.1:{detokenization_pub_port}\")\n        self.recv_from_detokenization.setsockopt(zmq.SUBSCRIBE, b\"\")\n        self.shm_req_manager = shm_req_manager\n        self.req_id_to_out_inf: Dict[int, ReqStatus] = {}\n        self.recycle_event = asyncio.Event()\n\n    async def handle_loop(self):\n        asyncio.create_task(self.recycle_resource_loop())\n        \n        while True:\n            try:\n                await asyncio.wait_for(self.recv_from_detokenization.recv_pyobj(), timeout=0.05)\n            except asyncio.TimeoutError:\n                pass\n\n            for req_status in self.req_id_to_out_inf.values():\n                token_list = []\n                for req in req_status.group_req_objs.shm_req_objs:\n                    req_id = req.request_id\n                    if not req.out_tokens_queue.is_empty():\n                        text, src_index, special, count_output_tokens = req.out_tokens_queue.peek()\n                        metadata = {\n                            \"id\": int(req.shm_prompt_ids.arr[src_index]),\n                            \"logprob\": float(req.shm_logprobs.arr[src_index]),\n                            \"special\": special,\n                            \"count_output_tokens\": count_output_tokens,\n                            \"prompt_cache_len\": req.prompt_cache_len,\n                        }\n                        req.out_tokens_queue.pop_no_ret()\n\n                        if req.finish_token_index != src_index:\n                            token_list.append((req_id, text, metadata, FinishStatus()))\n                        else:\n                            finish_status = FinishStatus(req.finish_status.status)\n                            token_list.append((req_id, text, metadata, finish_status))\n\n                async with req_status.lock:\n                    req_status.out_token_info_list.extend(token_list)\n                    req_status.event.set()\n\n            self.recycle_event.set()\n\n    async def recycle_resource_loop(self):\n        while True:\n            try:\n                await asyncio.wait_for(self.recycle_event.wait(), timeout=0.02)\n            except asyncio.TimeoutError:\n                pass\n            self.recycle_event.clear()\n\n            release_req_status = []\n            for req_status in self.req_id_to_out_inf.values():\n                if req_status.can_release():\n                    release_req_status.append(req_status)\n\n            for req_status in release_req_status:\n                self.req_id_to_out_inf.pop(req_status.group_req_objs.group_req_id, None)\n                for req in req_status.group_req_objs.shm_req_objs:\n                    await self.shm_req_manager.async_put_back_req_obj(req)\n                    await self.shm_req_manager.async_release_req_index(req.index_in_shm_mem)\n\nclass ReqStatus:\n    def __init__(self, group_request_id, multimodal_params, req_objs: List[Req], start_time) -> None:\n        self.lock = asyncio.Lock()\n        self.event = asyncio.Event()\n        self.group_req_objs = GroupReqObjs(\n            group_req_id=group_request_id,\n            multimodal_params=multimodal_params,\n            shm_req_objs=req_objs,\n            time_mark=start_time,\n        )\n        self.out_token_info_list = []\n\n    def can_release(self):\n        for req in self.group_req_objs.shm_req_objs:\n            if not req.can_release():\n                return False\n        return True",
    "Code_level": "Class-level",
    "FSMID_for_test": 85,
    "right_result": "```python\nimport asyncio\nimport zmq\n\nclass ZeroMQConsumer:\n    def __init__(self, zmq_mode: str, detokenization_pub_port: int, shm_req_manager: ShmReqManager) -> None:\n        self.context = zmq.asyncio.Context()\n        self.recv_from_detokenization = self.context.socket(zmq.SUB)\n        self.recv_from_detokenization.connect(f\"tcp://localhost:{detokenization_pub_port}\")\n        self.shm_req_manager = shm_req_manager\n        self.req_id_to_out_inf = {}\n        self.recycle_event = asyncio.Event()\n\n    async def handle_loop(self) -> None:\n        while True:\n            message = await self.recv_from_detokenization.recv_string()\n            # Process message and update req_id_to_out_inf\n            pass\n\n    async def recycle_resource_loop(self) -> None:\n        while True:\n            self.recycle_event.wait()\n            # Recycle completed request resources\n            self.recycle_event.clear()\n\nclass ReqStatus:\n    def __init__(self, group_request_id, multimodal_params, req_objs: List[Req], start_time) -> None:\n        self.group_request_id = group_request_id\n        self.multimodal_params = multimodal_params\n        self.req_objs = req_objs\n        self.start_time = start_time\n\n    def can_release(self) -> bool:\n        # Determine if all requests in the group can be released\n        pass\n```"
  },
  {
    "Task_id": 479,
    "Instruction": "Task Description: Implement a ZeroMQ-based server that handles task distribution and status updates from multiple workers using the REQ/REP pattern. The server should manage a queue of tasks, distribute them to workers, and handle task success/failure notifications.\n\nFunction Description: The `server` function sets up a ZeroMQ REP socket to listen for worker requests. It manages a task queue (`remaining_entries`) and worker count (`running_workers`), distributing tasks to workers and processing their success/failure responses. The server runs indefinitely until all tasks are completed or workers disconnect.\n\nInput:\n- `--channel-ip` (str, optional): IP address for ZeroMQ communication (default: None, binds to all interfaces)\n- `--channel-port` (int, optional): Port number for ZeroMQ communication (default: 5555)\n\nOutput: None (runs indefinitely as a server process)\n\nNote: The function maintains internal state for:\n1. `remaining_entries`: List of pending task IDs\n2. `running_workers`: Count of active workers\nThese should be initialized before the main loop (not shown in reference code)",
    "Canonical_solution": "import zmq\nimport time\nimport argparse\n\ndef server():\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\n        \"--channel-ip\",\n        type=str,\n        default=None,\n        help=\"IP for ZeroMQ channel\",\n    )\n    parser.add_argument(\n        \"--channel-port\",\n        type=int,\n        default=5555,\n        help=\"Port for ZeroMQ channel\",\n    )\n    args = parser.parse_known_args()[0]\n\n    context = zmq.Context()\n    socket = context.socket(zmq.REP)\n    socket.bind(f\"tcp://*:{args.channel_port}\")\n\n    while True:\n        msg = socket.recv_json()\n        rank = msg[\"rank\"]\n        action = msg[\"action\"]\n\n        if action == \"pull\":\n            if len(remaining_entries) == 0:\n                socket.send_json({\"task_id\": None})\n                running_workers -= 1\n                if running_workers == 0:\n                    break\n            else:\n                entry = remaining_entries.pop()\n                socket.send_json({\"task_id\": entry})\n        else:\n            if action == \"success\":\n                socket.send_json({\"pong\": 1})\n            else:\n                remaining_entries.append(msg['task_id'])\n                socket.send_json({\"pong\": 1})\n                break",
    "Code_level": "Function-level",
    "FSMID_for_test": 87,
    "right_result": "```python\nimport sys\nimport argparse\nimport zmq\nimport time\n\ndef server(channel_ip=None, channel_port=5555):\n    context = zmq.Context()\n    socket = context.socket(zmq.REP)\n    if channel_ip:\n        socket.bind(f\"tcp://{channel_ip}:{channel_port}\")\n    else:\n        socket.bind(f\"tcp://*: {channel_port}\")\n    \n    remaining_entries = []\n    running_workers = 0\n    \n    while True:\n        request = socket.recv()\n        if request == b\"GET_TASK\":\n            if remaining_entries:\n                task_id = remaining_entries.pop(0)\n                socket.send_string(f\"TASK {task_id}\")\n                running_workers += 1\n            else:\n                socket.send_string(\"NO_TASK\")\n        elif request == b\"FINISHED\":\n            running_workers -= 1\n            socket.send_string(\"ACK\")\n        elif request == b\"FAILED\":\n            running_workers -= 1\n            socket.send_string(\"ACK\")\n        elif request == b\"QUIT\":\n            break\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser(description=\"ZeroMQ-based task distribution server\")\n    parser.add_argument(\"--channel-ip\", type=str, default=None, help=\"IP address for ZeroMQ communication\")\n    parser.add_argument(\"--channel-port\", type=int, default=5555, help=\"Port number for ZeroMQ communication\")\n    args = parser.parse_args()\n    \n    server(args.channel_ip, args.channel_port)\n```"
  },
  {
    "Task_id": 480,
    "Instruction": "Task Description: Implement a ZeroMQ-based server that handles task distribution and status updates between multiple workers using the REQ/REP pattern.\n\nFunction Description: The server function establishes a ZeroMQ REP socket to listen for worker requests. It manages a pool of tasks (remaining_entries) and distributes them to workers. Workers can request tasks (\"pull\") or report task completion status (\"success\"/\"failure\"). The server responds accordingly and tracks active workers. The loop continues until all tasks are completed and all workers have finished.\n\nInput:\n- --channel-ip (str, optional): IP address for ZeroMQ channel (default: None)\n- --channel-port (int): Port number for ZeroMQ channel (default: 5555)\n\nOutput: None (The function runs indefinitely until all tasks are completed and all workers have disconnected)\n\nNote: The function uses two global variables:\n- remaining_entries: List of pending task IDs\n- running_workers: Count of currently active workers\n\nThe server expects and sends JSON messages with the following formats:\nReceived messages:\n- {\"rank\": [worker_id], \"action\": \"pull\"}\n- {\"rank\": [worker_id], \"action\": \"success\"/\"failure\", \"task_id\": [task_id]}\n\nSent responses:\n- {\"task_id\": [task_id]} (for pull requests)\n- {\"task_id\": None} (when no tasks remain)\n- {\"pong\": 1} (acknowledgment for status updates)\n\nThe server maintains task state by:\n1. Removing tasks when assigned\n2. Re-adding tasks if workers report failure\n3. Tracking active workers until all complete their tasks",
    "Canonical_solution": "import zmq\nimport time\nimport torch\n\ndef server():\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\n        \"--channel-ip\",\n        type=str,\n        default=None,\n        help=\"IP for ZeroMQ channel\",\n    )\n    parser.add_argument(\n        \"--channel-port\",\n        type=int,\n        default=5555,\n        help=\"Port for ZeroMQ channel\",\n    )\n    args = parser.parse_known_args()[0]\n\n    context = zmq.Context()\n    socket = context.socket(zmq.REP)\n    socket.bind(f\"tcp://*:{args.channel_port}\")\n\n    while True:\n        msg = socket.recv_json()\n        rank = msg[\"rank\"]\n        action = msg[\"action\"]\n\n        if action == \"pull\":\n            if len(remaining_entries) == 0:\n                socket.send_json({\"task_id\": None})\n                running_workers -= 1\n                if running_workers == 0:\n                    break\n            else:\n                entry = remaining_entries.pop()\n                socket.send_json({\"task_id\": entry})\n        else:\n            if action == \"success\":\n                socket.send_json({\"pong\": 1})\n            else:\n                remaining_entries.append(msg['task_id'])\n                socket.send_json({\"pong\": 1})\n                break",
    "Code_level": "Function-level",
    "FSMID_for_test": 87,
    "right_result": "```python\nimport zmq\nimport json\nimport time\n\ncontext = zmq.Context()\nsocket = context.socket(zmq.REP)\nchannel_ip = None\nchannel_port = 5555\n\nif '--channel-ip' in sys.argv:\n    channel_ip = sys.argv[sys.argv.index('--channel-ip') + 1]\nif '--channel-port' in sys.argv:\n    channel_port = int(sys.argv[sys.argv.index('--channel-port') + 1])\n\nsocket.bind(f\"tcp://{channel_ip}:{channel_port}\")\n\nremaining_entries = []\nrunning_workers = 0\n\nwhile True:\n    message = socket.recv_json()\n    worker_id = message['rank'][0]\n    action = message['action']\n\n    if action == 'pull':\n        if remaining_entries:\n            task_id = remaining_entries.pop(0)\n            socket.send_json({\"task_id\": task_id})\n        else:\n            socket.send_json({\"task_id\": None})\n    elif action in ['success', 'failure']:\n        if action == 'success':\n            running_workers -= 1\n        elif action == 'failure':\n            remaining_entries.append(message['task_id'])\n        socket.send_json({\"pong\": 1})\n\n        if running_workers == 0 and not remaining_entries:\n            break\n```"
  },
  {
    "Task_id": 482,
    "Instruction": "Task Description: Create a ZeroMQ Publisher (PUB) handler class that can send metrics over a TCP connection using the PUB/SUB pattern.\n\nClass Description: The `zmqHandler` class is a ZeroMQ-based publisher that inherits from a base `Handler` class. It establishes a PUB socket to publish metrics to subscribers. The class handles socket creation, binding, and message sending.\n\nAttributes:\n- context: [zmq.Context] - ZeroMQ context for managing sockets\n- socket: [zmq.Socket] - PUB socket for sending messages\n- port: [int] - Port number to bind the socket to\n- enabled: [bool] - Flag indicating if the handler is operational (inherited)\n- config: [dict] - Configuration dictionary (inherited)\n- log: [Logger] - Logger instance (inherited)\n\nMethods:\n- __init__(config: dict) -> None - Constructor that initializes the handler with configuration\n  Input: config - Dictionary containing configuration parameters\n  Output: None\n\n- _bind() -> None - Internal method to create and bind the PUB socket\n  Input: None\n  Output: None\n\n- process(metric: Any) -> None - Publishes a metric through the PUB socket\n  Input: metric - The data to be published (converted to string)\n  Output: None",
    "Canonical_solution": "import zmq\nfrom Handler import Handler\n\nclass zmqHandler(Handler):\n    def __init__(self, config=None):\n        Handler.__init__(self, config)\n        \n        if not zmq:\n            self.log.error('zmq import failed. Handler disabled')\n            self.enabled = False\n            return\n\n        self.context = None\n        self.socket = None\n        self.port = int(self.config['port'])\n        self._bind()\n\n    def _bind(self):\n        if not zmq:\n            return\n        self.context = zmq.Context()\n        self.socket = self.context.socket(zmq.PUB)\n        self.socket.bind(\"tcp://*:%i\" % self.port)\n\n    def process(self, metric):\n        if not zmq:\n            return\n        self.socket.send(\"%s\" % str(metric))",
    "Code_level": "Class-level",
    "FSMID_for_test": 88,
    "right_result": "```python\nimport zmq\nimport logging\n\nclass Handler:\n    def __init__(self, config: dict) -> None:\n        self.enabled = True\n        self.config = config\n        self.log = logging.getLogger(__name__)\n\nclass zmqHandler(Handler):\n    def __init__(self, config: dict) -> None:\n        super().__init__(config)\n        self.context = zmq.Context()\n        self.socket = None\n        self.port = config.get('port', 5555)\n\n    def _bind(self) -> None:\n        self.socket = self.context.socket(zmq.PUB)\n        self.socket.bind(f'tcp://*:{self.port}')\n\n    def process(self, metric: Any) -> None:\n        if self.enabled:\n            self._bind()\n            self.socket.send_string(str(metric))\n```"
  },
  {
    "Task_id": 483,
    "Instruction": "Task Description: Implement a distributed task processing system using ZeroMQ's REQ/REP pattern where a client requests tasks from a server, processes them, and reports back the results or failures.\n\nFunction Description: The function `run_generation_distributed` establishes a ZeroMQ REQ socket connection to a server, continuously requests tasks, processes them, and writes the results to a file. It handles task distribution, processing, and status reporting (success/failure) back to the server.\n\nInput:\n- `args`: [object] - Configuration object containing:\n  - `channel_ip`: [str] - IP address of the ZeroMQ server\n  - `channel_port`: [int] - Port of the ZeroMQ server\n  - `output_path`: [str] - Directory path for output files\n  - `task_name`: [str] - Base name for output files\n  - `temperature`: [float] - Processing parameter\n  - `top_p`: [float] - Processing parameter\n  - `samples_per_problem`: [int] - Number of samples per task\n  - `rank`: [int] - Worker identifier\n- `model`: [object] - Model used for processing tasks (not directly used in shown code)\n- `tokenizer`: [object] - Tokenizer used for processing tasks (not directly used in shown code)\n\nOutput:\n- None (direct output) - Results are written to a JSONL file in the specified output directory\n- Side Effects:\n  - Creates output directory if it doesn't exist\n  - Writes processed results to a JSONL file\n  - Communicates task status (success/failure) back to server",
    "Canonical_solution": "import zmq\n\ndef run_generation_distributed(args, model, tokenizer):\n    logger.info(f\"Connecting to tcp://{args.channel_ip}:{args.channel_port}\")\n    context = zmq.Context()\n    socket = context.socket(zmq.REQ)\n    socket.connect(f\"tcp://{args.channel_ip}:{args.channel_port}\")\n    \n    os.makedirs(args.output_path, exist_ok=True)\n    output_path = os.path.join(\n        args.output_path,\n        f\"{args.task_name}-t{args.temperature}-topp{args.top_p}-ns{args.samples_per_problem}-rank{args.rank}.jsonl\",\n    )\n    \n    fout = open(output_path, \"w\", encoding=\"utf-8\")\n    while True:\n        socket.send_json({\"rank\": args.rank, \"action\": \"pull\"})\n        resp = socket.recv_json()\n        try:\n            if resp[\"task_id\"] is None:\n                break\n\n            current_spec = resp[\"task_id\"]\n            results = process(current_spec)\n            \n            for res in results:\n                fout.write(json.dumps(res, ensure_ascii=False) + \"\\n\")\n                fout.flush()\n\n            socket.send_json(\n                {\n                    \"rank\"   : args.rank,\n                    \"action\" : \"success\",\n                    \"task_id\": current_spec['task_id']\n                }\n            )\n            socket.recv()\n\n        except Exception as e:\n            logger.error(f\"*** (rank={args.rank}) crashed.\")\n            logger.error(f\"    error: {repr(e)}\")\n            socket.send_json(\n                {\n                    \"rank\"   : args.rank,\n                    \"action\" : \"fail\",\n                    \"task_id\": current_spec['task_id']\n                }\n            )\n            socket.recv()\n            continue",
    "Code_level": "Function-level",
    "FSMID_for_test": 86,
    "right_result": "```python\nimport os\nimport json\nimport zmq\nimport time\n\ndef run_generation_distributed(args, model, tokenizer):\n    channel_ip = args['channel_ip']\n    channel_port = args['channel_port']\n    output_path = args['output_path']\n    task_name = args['task_name']\n    temperature = args['temperature']\n    top_p = args['top_p']\n    samples_per_problem = args['samples_per_problem']\n    rank = args['rank']\n\n    context = zmq.Context()\n    socket = context.socket(zmq.REQ)\n    socket.connect(f\"tcp://{channel_ip}:{channel_port}\")\n\n    os.makedirs(output_path, exist_ok=True)\n\n    while True:\n        task = socket.recv_json()\n        if task['task_type'] == 'exit':\n            break\n\n        start_time = time.time()\n        try:\n            # Process the task using the model and tokenizer\n            # This is a placeholder for the actual processing logic\n            result = {\n                'task_id': task['task_id'],\n                'rank': rank,\n                'status': 'success',\n                'result': 'Processed successfully'\n            }\n        except Exception as e:\n            result = {\n                'task_id': task['task_id'],\n                'rank': rank,\n                'status': 'failure',\n                'error': str(e)\n            }\n\n        # Write the result to a JSONL file\n        with open(os.path.join(output_path, f\"{task_name}_{task['task_id']}.jsonl\"), 'w') as f:\n            json.dump(result, f)\n\n        # Send the result back to the server\n        socket.send_json(result)\n\n        # Calculate processing time\n        processing_time = time.time() - start_time\n        print(f\"Rank {rank}: Task {task['task_id']} processed in {processing_time:.2f} seconds\")\n\n    socket.close()\n    context.term()\n```"
  },
  {
    "Task_id": 484,
    "Instruction": "Task Description: Implement a gRPC server in Python that handles network compute bridge requests using thread-safe queues for inter-process communication.\n\nClass Description: The implementation consists of two classes:\n1. NetworkComputeBridgeWorkerServicer - A gRPC servicer that processes incoming requests using thread-safe queues\n2. GRPCServer - Manages the gRPC server lifecycle and configuration\n\nAttributes:\n\nNetworkComputeBridgeWorkerServicer:\n- thread_input_queue: [Queue] - Queue for receiving incoming requests from other processes\n- thread_output_queue: [Queue] - Queue for sending responses back to other processes\n- _lock: [Lock] - Thread synchronization lock for queue operations\n\nGRPCServer:\n- port: [int] - Port number for the server to listen on\n- request_queue: [Queue] - Shared queue for incoming requests\n- response_queue: [Queue] - Shared queue for outgoing responses\n\nMethods:\n\nNetworkComputeBridgeWorkerServicer:\n- WorkerCompute(request, context) -> [network_compute_bridge_pb2.NetworkComputeResponse] - Processes compute requests by putting them in input queue and waiting for response from output queue\n- ListAvailableModels(request, context) -> [network_compute_bridge_pb2.ListAvailableModelsResponse] - Processes model listing requests by putting them in input queue and waiting for response from output queue\n\nGRPCServer:\n- start() -> [grpc.Server] - Initializes and starts the gRPC server with thread pool executor, binds it to the specified port, and registers the servicer",
    "Canonical_solution": "import grpc\nfrom concurrent import futures\nfrom multiprocessing import Lock, Queue\nimport bosdyn.api.network_compute_bridge_service_pb2_grpc as network_compute_bridge_service_pb2_grpc\nimport bosdyn.api.network_compute_bridge_pb2 as network_compute_bridge_pb2\n\nclass NetworkComputeBridgeWorkerServicer(network_compute_bridge_service_pb2_grpc.NetworkComputeBridgeWorkerServicer):\n    def __init__(self, thread_input_queue, thread_output_queue):\n        super(NetworkComputeBridgeWorkerServicer, self).__init__()\n        self.thread_input_queue = thread_input_queue\n        self.thread_output_queue = thread_output_queue\n        self._lock = Lock()\n\n    def WorkerCompute(self, request, context):\n        with self._lock:\n            self.thread_input_queue.put(request)\n            out_proto = self.thread_output_queue.get()\n        return out_proto\n\n    def ListAvailableModels(self, request, context):\n        with self._lock:\n            self.thread_input_queue.put(request)\n            out_proto = self.thread_output_queue.get()\n        return out_proto\n\nclass GRPCServer:\n    def __init__(self, port, request_queue, response_queue):\n        self.port = port\n        self.request_queue = request_queue\n        self.response_queue = response_queue\n\n    def start(self):\n        server = grpc.server(futures.ThreadPoolExecutor(max_workers=10))\n        network_compute_bridge_service_pb2_grpc.add_NetworkComputeBridgeWorkerServicer_to_server(\n            NetworkComputeBridgeWorkerServicer(self.request_queue, self.response_queue), server)\n        server.add_insecure_port(f'[::]:{self.port}')\n        server.start()\n        return server",
    "Code_level": "Class-level",
    "FSMID_for_test": 74,
    "right_result": "```python\nimport grpc\nimport threading\nfrom queue import Queue\nfrom concurrent import futures\nimport network_compute_bridge_pb2\nimport network_compute_bridge_pb2_grpc\n\nclass NetworkComputeBridgeWorkerServicer(network_compute_bridge_pb2_grpc.NetworkComputeBridgeWorkerServicer):\n    def __init__(self):\n        self.thread_input_queue = Queue()\n        self.thread_output_queue = Queue()\n        self._lock = threading.Lock()\n\n    def WorkerCompute(self, request, context):\n        with self._lock:\n            self.thread_input_queue.put(request)\n        while True:\n            try:\n                response = self.thread_output_queue.get(timeout=10)\n                return response\n            except queue.Empty:\n                continue\n\n    def ListAvailableModels(self, request, context):\n        with self._lock:\n            self.thread_input_queue.put(request)\n        while True:\n            try:\n                response = self.thread_output_queue.get(timeout=10)\n                return response\n            except queue.Empty:\n                continue\n\nclass GRPCServer:\n    def __init__(self, port):\n        self.port = port\n        self.request_queue = Queue()\n        self.response_queue = Queue()\n\n    def start(self):\n        server = grpc.server(futures.ThreadPoolExecutor(max_workers=10))\n        network_compute_bridge_pb2_grpc.add_NetworkComputeBridgeWorkerServicer_to_server(NetworkComputeBridgeWorkerServicer(), server)\n        server.add_insecure_port('[::]:{}'.format(self.port))\n        server.start()\n        server.wait_for_termination()\n```"
  },
  {
    "Task_id": 485,
    "Instruction": "Task Description: Implement a gRPC server in Python that provides speech recognition and language processing services using gRPC for inter-process communication.\n\nClass Description: The implementation consists of two main classes: ApiService (which handles the actual service logic) and GrpcServer (which manages the server lifecycle).\n\nAttributes:\n\nApiService:\n- speech_model: [Any] - The model used for speech recognition\n- language_model: [Any] - The model used for language processing\n\nGrpcServer:\n- host: [str] - The host address to bind the server to\n- port: [str] - The port number to bind the server to\n- max_workers: [int] - Maximum number of worker threads in the thread pool\n- server: [grpc.Server] - The gRPC server instance\n\nMethods:\n\nApiService:\n- Speech(request: [SpeechRequest], context: [grpc.ServicerContext]) -> [SpeechResponse] - Processes speech recognition requests\n- Language(request: [LanguageRequest], context: [grpc.ServicerContext]) -> [TextResponse] - Processes language translation requests\n- All(request: [SpeechRequest], context: [grpc.ServicerContext]) -> [TextResponse] - Processes combined speech recognition and language translation\n- Stream(request_iterator: [Iterator[SpeechRequest]], context: [grpc.ServicerContext]) -> [Iterator[TextResponse]] - Handles streaming speech recognition and processing\n\nGrpcServer:\n- start(service: [ApiService]) -> [None] - Starts the gRPC server with the specified service and runs it indefinitely\n  - Input: service - An instance of ApiService to handle incoming requests\n  - Output: None (runs indefinitely until interrupted)",
    "Canonical_solution": "import grpc\nfrom concurrent import futures\nfrom assets.asrt_pb2_grpc import AsrtGrpcServiceServicer, add_AsrtGrpcServiceServicer_to_server\nfrom assets.asrt_pb2 import SpeechResponse, TextResponse\nimport time\n\n_ONE_DAY_IN_SECONDS = 60 * 60 * 24\n\nclass ApiService(AsrtGrpcServiceServicer):\n    def __init__(self, speech_model, language_model):\n        self.speech_model = speech_model\n        self.language_model = language_model\n\n    def Speech(self, request, context):\n        wav_data = request.wav_data\n        wav_samples = decode_wav_bytes(samples_data=wav_data.samples,\n                                     channels=wav_data.channels, byte_width=wav_data.byte_width)\n        result = self.speech_model.recognize_speech(wav_samples, wav_data.sample_rate)\n        return SpeechResponse(status_code=200000, status_message='',\n                            result_data=result)\n\n    def Language(self, request, context):\n        result = self.language_model.pinyin_to_text(list(request.pinyins))\n        return TextResponse(status_code=200000, status_message='',\n                          text_result=result)\n\n    def All(self, request, context):\n        wav_data = request.wav_data\n        wav_samples = decode_wav_bytes(samples_data=wav_data.samples,\n                                     channels=wav_data.channels, byte_width=wav_data.byte_width)\n        result_speech = self.speech_model.recognize_speech(wav_samples, wav_data.sample_rate)\n        result = self.language_model.pinyin_to_text(result_speech)\n        return TextResponse(status_code=200000, status_message='',\n                          text_result=result)\n\n    def Stream(self, request_iterator, context):\n        result = list()\n        tmp_result_last = list()\n        beam_size = 100\n\n        for request in request_iterator:\n            wav_data = request.wav_data\n            wav_samples = decode_wav_bytes(samples_data=wav_data.samples,\n                                         channels=wav_data.channels,\n                                         byte_width=wav_data.byte_width)\n            result_speech = self.speech_model.recognize_speech(wav_samples, wav_data.sample_rate)\n\n            for item_pinyin in result_speech:\n                tmp_result = self.language_model.pinyin_stream_decode(tmp_result_last, item_pinyin, beam_size)\n                if len(tmp_result) == 0 and len(tmp_result_last) > 0:\n                    result.append(tmp_result_last[0][0])\n                    yield TextResponse(status_code=200000, status_message='',\n                                   text_result=''.join(result))\n                    result = list()\n                    tmp_result = self.language_model.pinyin_stream_decode([], item_pinyin, beam_size)\n                tmp_result_last = tmp_result\n                yield TextResponse(status_code=206000, status_message='',\n                               text_result=''.join(tmp_result[0][0]))\n\n        if len(tmp_result_last) > 0:\n            result.append(tmp_result_last[0][0])\n            yield TextResponse(status_code=200000, status_message='',\n                           text_result=''.join(result))\n\nclass GrpcServer:\n    def __init__(self, host, port, max_workers=10):\n        self.host = host\n        self.port = port\n        self.max_workers = max_workers\n        self.server = grpc.server(futures.ThreadPoolExecutor(max_workers=self.max_workers))\n\n    def start(self, service):\n        add_AsrtGrpcServiceServicer_to_server(service, self.server)\n        self.server.add_insecure_port(''.join([self.host, ':', self.port]))\n        self.server.start()\n        try:\n            while True:\n                time.sleep(_ONE_DAY_IN_SECONDS)\n        except KeyboardInterrupt:\n            self.server.stop(0)",
    "Code_level": "Class-level",
    "FSMID_for_test": 74,
    "right_result": "```python\nimport grpc\nfrom concurrent import futures\n\nclass ApiService:\n    def __init__(self, speech_model, language_model):\n        self.speech_model = speech_model\n        self.language_model = language_model\n\n    def Speech(self, request, context):\n        # Process speech recognition requests\n        pass\n\n    def Language(self, request, context):\n        # Process language translation requests\n        pass\n\n    def All(self, request, context):\n        # Process combined speech recognition and language translation\n        pass\n\n    def Stream(self, request_iterator, context):\n        # Handles streaming speech recognition and processing\n        pass\n\nclass GrpcServer:\n    def __init__(self, host, port, max_workers):\n        self.host = host\n        self.port = port\n        self.max_workers = max_workers\n        self.server = grpc.server(futures.ThreadPoolExecutor(max_workers=max_workers))\n\n    def start(self, service):\n        api_service = service\n        api_service_speech = grpc.service_method(api_service.Speech, grpc.extras.RequestInfo())\n        api_service_language = grpc.service_method(api_service.Language, grpc.extras.RequestInfo())\n        api_service_all = grpc.service_method(api_service.All, grpc.extras.RequestInfo())\n        api_service_stream = grpc.service_method(api_service.Stream, grpc.extras.RequestInfo())\n        self.server.add_service(api_service_speech)\n        self.server.add_service(api_service_language)\n        self.server.add_service(api_service_all)\n        self.server.add_service(api_service_stream)\n        self.server.add_insecure_port(self.host, self.port)\n        self.server.start()\n        self.server.wait_for_termination()\n```"
  },
  {
    "Task_id": 486,
    "Instruction": "Task Description: Implement a gRPC server class that handles multiple protocols including health checks and service reflection, capable of serving JinaRPC and JinaSingleDataRequestRPC services.\n\nClass Description: MultiProtocolGateway is a class that sets up and manages a gRPC server with support for multiple services, health checks, and server reflection. It provides methods to start, run, and shutdown the server gracefully.\n\nAttributes:\n- grpc_port: int - The port number on which the gRPC server will listen\n- health_servicer: grpc_health.v1.health.HealthServicer - Handles health check requests for the services\n- grpc_server: grpc.aio.server - The asynchronous gRPC server instance\n\nMethods:\n- __init__(grpc_port: int) -> None - Initializes the MultiProtocolGateway with the specified gRPC port\n- _setup_grpc_server() -> None - Sets up the gRPC server with all required services (JinaRPC, JinaSingleDataRequestRPC), health checks, and reflection\n- run_server() -> None - Starts the gRPC server and keeps it running until termination\n- shutdown() -> None - Gracefully shuts down the gRPC server and health servicer",
    "Canonical_solution": "import grpc\nfrom grpc_health.v1 import health, health_pb2, health_pb2_grpc\nfrom grpc_reflection.v1alpha import reflection\nfrom jina.proto import jina_pb2, jina_pb2_grpc\nfrom jina.constants import __default_host__\n\nclass MultiProtocolGateway:\n    def __init__(self, grpc_port: int):\n        self.grpc_port = grpc_port\n        self.health_servicer = health.HealthServicer(experimental_non_blocking=True)\n\n    async def _setup_grpc_server(self):\n        self.grpc_server = grpc.aio.server()\n\n        jina_pb2_grpc.add_JinaRPCServicer_to_server(\n            self.streamer._streamer, self.grpc_server\n        )\n        jina_pb2_grpc.add_JinaSingleDataRequestRPCServicer_to_server(\n            self.streamer._streamer, self.grpc_server\n        )\n\n        service_names = (\n            jina_pb2.DESCRIPTOR.services_by_name['JinaRPC'].full_name,\n            jina_pb2.DESCRIPTOR.services_by_name['JinaSingleDataRequestRPC'].full_name,\n            reflection.SERVICE_NAME,\n        )\n        \n        health_pb2_grpc.add_HealthServicer_to_server(\n            self.health_servicer, self.grpc_server\n        )\n        for service in service_names:\n            self.health_servicer.set(service, health_pb2.HealthCheckResponse.SERVING)\n        reflection.enable_server_reflection(service_names, self.grpc_server)\n        self.grpc_server.add_insecure_port(f'{__default_host__}:{self.grpc_port}')\n        await self.grpc_server.start()\n\n    async def run_server(self):\n        await self.grpc_server.wait_for_termination()\n\n    async def shutdown(self):\n        await self.grpc_server.stop(0)\n        self.health_servicer.enter_graceful_shutdown()",
    "Code_level": "Class-level",
    "FSMID_for_test": 74,
    "right_result": "```python\nimport grpc\nfrom concurrent import futures\nfrom grpc_health.v1 import health\nfrom grpc_health.v1 import health_pb2\nfrom grpc_health.v1 import health_pb2_grpc\nfrom jina_pb2 import *\nfrom jina_pb2_grpc import *\nfrom jina_single_data_request_pb2 import *\nfrom jina_single_data_request_pb2_grpc import *\n\nclass MultiProtocolGateway:\n    def __init__(self, grpc_port: int) -> None:\n        self.grpc_port = grpc_port\n        self.health_servicer = health_pb2_grpc.HealthServicer()\n        self.grpc_server = None\n\n    def _setup_grpc_server(self) -> None:\n        self.grpc_server = grpc.aio.server(futures.ThreadPoolExecutor(max_workers=10))\n        jina_rpc_server = JinaRPCServicer()\n        jina_single_data_request_rpc_server = JinaSingleDataRequestRPCServicer()\n        health_pb2_grpc.add_HealthServicer_to_server(self.health_servicer, self.grpc_server)\n        jina_pb2_grpc.add_JinaRPCServicer_to_server(jina_rpc_server, self.grpc_server)\n        jina_single_data_request_pb2_grpc.add_JinaSingleDataRequestRPCServicer_to_server(jina_single_data_request_rpc_server, self.grpc_server)\n        self.grpc_server.add_insecure_port(f'[::]:{self.grpc_port}')\n\n    def run_server(self) -> None:\n        self._setup_grpc_server()\n        self.grpc_server.start()\n        self.grpc_server.wait_for_termination()\n\n    def shutdown(self) -> None:\n        self.grpc_server.stop(0)\n```"
  },
  {
    "Task_id": 487,
    "Instruction": "Task Description: Create a gRPC server implementation in Python that handles E-Stop (Emergency Stop) functionality for robotic systems, including endpoint registration and check-in procedures with challenge-response verification.\n\nClass Description: The implementation consists of two classes:\n1. MockEstopServicer - Handles the actual gRPC service implementation for E-Stop functionality\n2. GRPCServer - Manages the gRPC server lifecycle and service registration\n\nAttributes:\n\nMockEstopServicer:\n- VALID_STOP_LEVEL: [int] - The valid stop level for E-Stop operations\n- NAME_FOR_ENDPOINT_UNKNOWN: [str] - Special endpoint name that triggers unknown endpoint status\n- NAME_FOR_SERVER_ERROR: [str] - Special endpoint name that triggers server error\n- STATUSES_THAT_DO_NOT_PROVIDE_CHALLENGE: [set] - Set of statuses that skip challenge generation\n- _rpc_delay: [int] - Artificial delay for RPC calls (for testing)\n- _challenge: [int] - Current challenge value for verification\n\nGRPCServer:\n- server: [grpc.Server] - The gRPC server instance\n\nMethods:\n\nMockEstopServicer:\n- __init__(rpc_delay: int = 0) -> None - Initializes the servicer with optional RPC delay\n- RegisterEstopEndpoint(request, context) -> None - Handles endpoint registration (stub implementation)\n- EstopCheckIn(request, context) -> bosdyn.api.estop_pb2.EstopCheckInResponse - Processes E-Stop check-in requests with challenge-response verification\n\nGRPCServer:\n- __init__() -> None - Initializes the gRPC server with thread pool executor\n- add_service(servicer: MockEstopServicer) -> None - Registers the E-Stop service with the server\n- start(port: int = 0) -> int - Starts the server on specified port (0 for auto-assigned) and returns bound port\n- stop() -> None - Stops the server gracefully",
    "Canonical_solution": "import grpc\nimport concurrent.futures\nimport bosdyn.api.estop_pb2\nimport bosdyn.api.estop_service_pb2_grpc\n\nclass MockEstopServicer(bosdyn.api.estop_service_pb2_grpc.EstopServiceServicer):\n    VALID_STOP_LEVEL = 1\n    NAME_FOR_ENDPOINT_UNKNOWN = 'mystery'\n    NAME_FOR_SERVER_ERROR = 'little-bobby-drop-tables'\n    STATUSES_THAT_DO_NOT_PROVIDE_CHALLENGE = \\\n        set([bosdyn.api.estop_pb2.EstopCheckInResponse.STATUS_UNKNOWN])\n\n    def __init__(self, rpc_delay=0):\n        super(MockEstopServicer, self).__init__()\n        self._rpc_delay = rpc_delay\n        self._challenge = 0\n\n    def RegisterEstopEndpoint(self, request, context):\n        pass\n\n    def EstopCheckIn(self, request, context):\n        resp = bosdyn.api.estop_pb2.EstopCheckInResponse()\n        resp.header.error.code = bosdyn.api.header_pb2.CommonError.CODE_OK\n        if request.endpoint.name == self.NAME_FOR_SERVER_ERROR:\n            resp.header.error.code = bosdyn.api.header_pb2.CommonError.CODE_INTERNAL_SERVER_ERROR\n        elif request.endpoint.name == self.NAME_FOR_ENDPOINT_UNKNOWN:\n            resp.status = resp.STATUS_ENDPOINT_UNKNOWN\n        else:\n            if not request.challenge:\n                resp.status = resp.STATUS_INCORRECT_CHALLENGE_RESPONSE\n            elif request.response != bosdyn.client.estop.response_from_challenge(request.challenge):\n                resp.status = resp.STATUS_INCORRECT_CHALLENGE_RESPONSE\n            else:\n                resp.status = resp.STATUS_OK\n        if resp.status not in self.STATUSES_THAT_DO_NOT_PROVIDE_CHALLENGE:\n            if request.challenge is not None:\n                self._challenge = request.challenge + 1\n            else:\n                self._challenge = 0\n            resp.challenge = self._challenge\n        return resp\n\nclass GRPCServer:\n    def __init__(self):\n        self.server = grpc.server(concurrent.futures.ThreadPoolExecutor(max_workers=10))\n\n    def add_service(self, servicer):\n        bosdyn.api.estop_service_pb2_grpc.add_EstopServiceServicer_to_server(servicer, self.server)\n\n    def start(self, port=0):\n        port = self.server.add_insecure_port(f'127.0.0.1:{port}')\n        self.server.start()\n        return port\n\n    def stop(self):\n        self.server.stop(0)",
    "Code_level": "Class-level",
    "FSMID_for_test": 74,
    "right_result": "```python\nimport grpc\nfrom concurrent import futures\nfrom bosdyn.api import estop_pb2\nfrom bosdyn.api import estop_pb2_grpc\n\nclass MockEstopServicer(estop_pb2_grpc.EstopServicer):\n    VALID_STOP_LEVEL = 1\n    NAME_FOR_ENDPOINT_UNKNOWN = \"unknown_endpoint\"\n    NAME_FOR_SERVER_ERROR = \"server_error\"\n    STATUSES_THAT_DO_NOT_PROVIDE_CHALLENGE = {1, 2}\n\n    def __init__(self, rpc_delay: int = 0) -> None:\n        self._rpc_delay = rpc_delay\n        self._challenge = 0\n\n    def RegisterEstopEndpoint(self, request, context) -> None:\n        pass\n\n    def EstopCheckIn(self, request, context) -> estop_pb2.EstopCheckInResponse:\n        if request.endpoint_name == self.NAME_FOR_ENDPOINT_UNKNOWN:\n            return estop_pb2.EstopCheckInResponse(status=estop_pb2.STATUS_UNKNOWN_ENDPOINT)\n        if request.endpoint_name == self.NAME_FOR_SERVER_ERROR:\n            raise Exception(\"Server error occurred\")\n        if request.status in self.STATUSES_THAT_DO_NOT_PROVIDE_CHALLENGE:\n            return estop_pb2.EstopCheckInResponse(status=request.status)\n        self._challenge += 1\n        return estop_pb2.EstopCheckInResponse(status=request.status, challenge=self._challenge)\n\nclass GRPCServer:\n    def __init__(self) -> None:\n        self.server = grpc.server(futures.ThreadPoolExecutor(max_workers=10))\n\n    def add_service(self, servicer: MockEstopServicer) -> None:\n        estop_pb2_grpc.add_EstopServicer_to_server(servicer, self.server)\n\n    def start(self, port: int = 0) -> int:\n        self.server.add_insecure_port('[::]:{}'.format(port))\n        self.server.start()\n        return self.server.server_address[1]\n\n    def stop(self) -> None:\n        self.server.stop(0)\n```"
  },
  {
    "Task_id": 488,
    "Instruction": "Task Description: Implement a gRPC server class in Python that handles multiple types of RPC calls (Call, Train, Index, Search, StreamCall) and manages concurrent requests using a thread pool. The server should integrate with a ZeroMQ client for message passing and provide proper context management for resource cleanup.\n\nClass Description: FrontendService is a gRPC server implementation that processes incoming gRPC requests and forwards them to a backend service via ZeroMQ. It handles concurrent requests, manages server lifecycle, and provides streaming capabilities.\n\nAttributes:\n\n- server: [grpc.Server] - The gRPC server instance handling incoming requests\n- bind_address: [str] - The address and port where the server listens (format \"host:port\")\n- _stop_event: [threading.Event] - Event object used to signal server shutdown\n- args: [Namespace/object] - Configuration arguments for server setup (max_concurrency, max_message_size, etc.)\n\nMethods:\n\n- __init__(args) -> [None] - Initializes the gRPC server with thread pool executor and configures message size limits\n  Input: args - Configuration object containing server parameters\n- __enter__() -> [FrontendService] - Starts the gRPC server and clears stop event (context manager entry)\n- __exit__(exc_type, exc_val, exc_tb) -> [None] - Stops the gRPC server and triggers cleanup (context manager exit)\n  Input: exc_type, exc_val, exc_tb - Exception information if any occurred\n- stop() -> [None] - Signals the server to stop by setting the stop event\n- join() -> [None] - Waits for the server to complete shutdown\n- _Servicer: [Nested class] - Handles actual gRPC method implementations\n  Methods:\n    - Call(request, context) -> [gnes_pb2.Response] - Processes standard RPC calls\n      Input: request - gRPC request message, context - gRPC context object\n      Output: Processed response message\n    - Train(request, context) -> [gnes_pb2.Response] - Handles training requests\n    - Index(request, context) -> [gnes_pb2.Response] - Handles indexing requests\n    - Search(request, context) -> [gnes_pb2.Response] - Handles search requests\n    - StreamCall(request_iterator, context) -> [Iterator[gnes_pb2.Response]] - Handles streaming RPC calls\n      Input: request_iterator - Iterator of incoming streaming requests\n      Output: Iterator of response messages\n    - ZmqContext: [Nested class] - Manages ZeroMQ client lifecycle\n      Methods:\n        - __init__(args) -> [None] - Initializes thread-local storage for ZMQ client\n        - __enter__() -> [ZmqClient] - Creates and returns a ZMQ client instance\n        - __exit__(exc_type, exc_value, exc_traceback) -> [None] - Cleans up ZMQ client resources",
    "Canonical_solution": "import grpc\nfrom concurrent.futures import ThreadPoolExecutor\nfrom ..proto import gnes_pb2_grpc, gnes_pb2\nfrom ..client.base import ZmqClient\nimport threading\n\nclass FrontendService:\n    def __init__(self, args):\n        self.server = grpc.server(\n            ThreadPoolExecutor(max_workers=args.max_concurrency),\n            options=[('grpc.max_send_message_length', args.max_message_size),\n                     ('grpc.max_receive_message_length', args.max_message_size)])\n        gnes_pb2_grpc.add_GnesRPCServicer_to_server(self._Servicer(args), self.server)\n        self.bind_address = '{0}:{1}'.format(args.grpc_host, args.grpc_port)\n        self.server.add_insecure_port(self.bind_address)\n        self._stop_event = threading.Event()\n\n    def __enter__(self):\n        self.server.start()\n        self._stop_event.clear()\n        return self\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        self.server.stop(None)\n        self.stop()\n\n    def stop(self):\n        self._stop_event.set()\n\n    def join(self):\n        self._stop_event.wait()\n\n    class _Servicer(gnes_pb2_grpc.GnesRPCServicer):\n        def __init__(self, args):\n            self.args = args\n            self.zmq_context = self.ZmqContext(args)\n            self.request_id_cnt = 0\n            self.send_recv_kwargs = dict(\n                check_version=self.args.check_version,\n                timeout=self.args.timeout,\n                squeeze_pb=self.args.squeeze_pb)\n            self.pending_request = 0\n\n        def Call(self, request, context):\n            with self.zmq_context as zmq_client:\n                zmq_client.send_message(self.add_envelope(request, zmq_client), **self.send_recv_kwargs)\n                return self.remove_envelope(zmq_client.recv_message(**self.send_recv_kwargs))\n\n        def Train(self, request, context):\n            return self.Call(request, context)\n\n        def Index(self, request, context):\n            return self.Call(request, context)\n\n        def Search(self, request, context):\n            return self.Call(request, context)\n\n        def StreamCall(self, request_iterator, context):\n            self.pending_request = 0\n\n            def get_response(num_recv, blocked=False):\n                for _ in range(num_recv):\n                    if blocked or zmq_client.receiver.poll(1):\n                        msg = zmq_client.recv_message(**self.send_recv_kwargs)\n                        self.pending_request -= 1\n                        yield self.remove_envelope(msg)\n\n                while zmq_client.receiver.poll(1):\n                    msg = zmq_client.recv_message(**self.send_recv_kwargs)\n                    self.pending_request -= 1\n                    yield self.remove_envelope(msg)\n\n            with self.zmq_context as zmq_client:\n                for request in request_iterator:\n                    num_recv = max(self.pending_request - self.args.max_pending_request, 1)\n                    yield from get_response(num_recv, num_recv > 1)\n                    zmq_client.send_message(self.add_envelope(request, zmq_client), **self.send_recv_kwargs)\n                    self.pending_request += 1\n\n                yield from get_response(self.pending_request, blocked=True)\n\n        class ZmqContext:\n            def __init__(self, args):\n                self.args = args\n                self.tlocal = threading.local()\n                self.tlocal.client = None\n\n            def __enter__(self):\n                client = ZmqClient(self.args)\n                self.tlocal.client = client\n                return client\n\n            def __exit__(self, exc_type, exc_value, exc_traceback):\n                self.tlocal.client.close()\n                self.tlocal.client = None",
    "Code_level": "Class-level",
    "FSMID_for_test": 74,
    "right_result": "```python\nimport grpc\nimport threading\nimport zmq\nfrom concurrent import futures\n\nclass FrontendService:\n    def __init__(self, args):\n        self.server = grpc.server(futures.ThreadPoolExecutor(max_workers=args.max_concurrency))\n        self.bind_address = args.bind_address\n        self._stop_event = threading.Event()\n        self.args = args\n\n    def __enter__(self):\n        self.server.add_insecure_port(self.bind_address)\n        self.server.start()\n        self._stop_event.clear()\n        return self\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        self.stop()\n        self.join()\n\n    def stop(self):\n        self._stop_event.set()\n\n    def join(self):\n        self.server.stop(0)\n\n    class _Servicer(grpc.protoServicer):\n        def Call(self, request, context):\n            # Process standard RPC calls\n            pass\n\n        def Train(self, request, context):\n            # Handles training requests\n            pass\n\n        def Index(self, request, context):\n            # Handles indexing requests\n            pass\n\n        def Search(self, request, context):\n            # Handles search requests\n            pass\n\n        def StreamCall(self, request_iterator, context):\n            # Handles streaming RPC calls\n            for request in request_iterator:\n                yield gnes_pb2.Response()\n\n        class ZmqContext:\n            def __init__(self, args):\n                # Initializes thread-local storage for ZMQ client\n                pass\n\n            def __enter__(self):\n                # Creates and returns a ZMQ client instance\n                return ZmqClient()\n\n            def __exit__(self, exc_type, exc_value, exc_traceback):\n                # Cleans up ZMQ client resources\n                pass\n\nclass ZmqClient:\n    def __init__(self):\n        # Initialize ZMQ client\n        pass\n```"
  },
  {
    "Task_id": 489,
    "Instruction": "Task Description: Implement a gRPC server in Python that handles model inference requests, supports both single and streaming responses, and provides graceful termination capabilities.\n\nClass Description: ModelResponse is a gRPC servicer class that implements model inference services. It manages request processing, response generation, and server lifecycle events.\n\nAttributes:\n- _stop_event: [threading.Event] - Event flag for server termination control\n- inference_pipeline: [AsyncPipeline] - Pipeline for handling asynchronous inference requests\n- method_name_to_task: [Dict[str, str]] - Mapping between gRPC method names and task types\n- lock: [threading.Lock] - Thread synchronization primitive for concurrent access control\n\nMethods:\n- __init__: [Name](async_pipeline: AsyncPipeline = None) -> None - Initializes the servicer with an optional async pipeline\n- Terminate: [Name](request: google.protobuf.Empty, context: grpc.ServicerContext) -> google.protobuf.Empty - Signals server to stop processing new requests\n- get_stop_event: [Name]() -> threading.Event - Returns the stop event for server control\n- GeneratorReply: [Name](request: ModelRequest, context: grpc.ServicerContext) -> ModelResponse - Handles batch inference requests and returns a single response\n- GeneratorReplyStream: [Name](request: ModelRequest, context: grpc.ServicerContext) -> Iterator[ModelResponse] - Handles streaming inference requests and yields multiple responses\n- _get_task_methods: [Name](method_name: str) -> Dict[str, TaskMethods] - Retrieves task-specific methods for request processing\n\nFunction Description: _do_serve sets up and runs the gRPC server with specified configuration and service implementation.\n\nInput:\n- service_impl: [ModelResponse] - The service implementation instance\n- port: [int] - Port number for server binding\n- interceptors: [List[grpc.ServerInterceptor]] - Optional list of gRPC interceptors\n\nOutput: None (runs the server until termination signal is received)",
    "Canonical_solution": "import grpc\nfrom concurrent import futures\nfrom typing import Dict\nimport threading\nfrom google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2\nfrom mii.grpc_related.proto import modelresponse_pb2_grpc\nfrom mii.constants import LB_MAX_WORKER_THREADS, GRPC_MAX_MSG_SIZE, SERVER_SHUTDOWN_TIMEOUT\n\nclass ModelResponse(modelresponse_pb2_grpc.ModelResponseServicer):\n    def __init__(self, async_pipeline=None):\n        self._stop_event = threading.Event()\n        self.inference_pipeline = async_pipeline\n        self.method_name_to_task = {m.method: t for t, m in TASK_METHODS_DICT.items()}\n        self.lock = threading.Lock()\n\n    def Terminate(self, request, context):\n        self._stop_event.set()\n        return google_dot_protobuf_dot_empty__pb2.Empty()\n\n    def get_stop_event(self):\n        return self._stop_event\n\n    def GeneratorReply(self, request, context):\n        task_methods = self._get_task_methods(\"GeneratorReply\")\n        prompts, kwargs = task_methods.unpack_request_from_proto(request)\n        uids_put_order, uids_running, uids_complete_order, responses = [], [], [], []\n\n        try:\n            for p in prompts:\n                request_kwargs = kwargs.copy()\n                uid = self.inference_pipeline.put_request(p, request_kwargs)\n                uids_put_order.append(uid)\n                uids_running.append(uid)\n\n            while uids_running:\n                uid, response = self.inference_pipeline.get_response()\n                if uid == -1:\n                    uid = uids_running[0]\n                responses.append(response)\n                self.inference_pipeline.flush_uid(uid)\n                uids_complete_order.append(uids_put_order.index(uid))\n                uids_running.remove(uid)\n\n            responses = [\n                r for idx,\n                r in sorted(zip(uids_complete_order,\n                                responses),\n                            key=lambda pair: pair[0])\n            ]\n            return task_methods.pack_response_to_proto(responses)\n        finally:\n            [self.inference_pipeline.flush_uid(uid) for uid in uids_running]\n\n    def GeneratorReplyStream(self, request, context):\n        task_methods = self._get_task_methods(\"GeneratorReply\")\n        prompts, kwargs = task_methods.unpack_request_from_proto(request)\n        uid = self.inference_pipeline.put_request(prompts[0], kwargs)\n\n        while True:\n            response_uid, r = self.inference_pipeline.get_response()\n            assert uid == response_uid, \"uid mismatch\"\n            done = r.finish_reason != GenerationFinishReason.NONE\n            response = task_methods.pack_response_to_proto([r])\n            yield response\n            if done:\n                break\n\n        self.inference_pipeline.flush_uid(uid)\n\n    def _get_task_methods(self, method_name: str) -> Dict[str, TaskMethods]:\n        if method_name not in self.method_name_to_task:\n            raise ValueError(f\"unknown method: {method_name}\")\n\n        task = self.method_name_to_task[method_name]\n        if task not in TASK_METHODS_DICT:\n            raise ValueError(f\"unknown task: {task}\")\n\n        return TASK_METHODS_DICT[task]\n\ndef _do_serve(service_impl, port, interceptors=[]):\n    stop_event = service_impl.get_stop_event()\n    server = grpc.server(\n        futures.ThreadPoolExecutor(max_workers=LB_MAX_WORKER_THREADS),\n        interceptors=interceptors,\n        options=[\n            (\"grpc.max_send_message_length\", GRPC_MAX_MSG_SIZE),\n            (\"grpc.max_receive_message_length\", GRPC_MAX_MSG_SIZE)\n        ]\n    )\n    modelresponse_pb2_grpc.add_ModelResponseServicer_to_server(service_impl, server)\n    server.add_insecure_port(f\"[::]:{port}\")\n    server.start()\n    stop_event.wait()\n    server.stop(SERVER_SHUTDOWN_TIMEOUT)",
    "Code_level": "Class-level",
    "FSMID_for_test": 74,
    "right_result": "```python\nimport threading\nimport grpc\nfrom concurrent import futures\nfrom google.protobuf.empty_pb2 import Empty\nfrom model_pb2 import ModelRequest, ModelResponse\nfrom model_pb2_grpc import ModelResponseServicer, add_ModelResponseServicer_to_server\n\nclass ModelResponse(ModelResponseServicer):\n    def __init__(self, async_pipeline: AsyncPipeline = None):\n        self._stop_event = threading.Event()\n        self.inference_pipeline = async_pipeline\n        self.method_name_to_task = {}\n        self.lock = threading.Lock()\n\n    def Terminate(self, request, context):\n        self._stop_event.set()\n        return Empty()\n\n    def get_stop_event(self):\n        return self._stop_event\n\n    def GeneratorReply(self, request, context):\n        # Handle batch inference requests and return a single response\n        pass\n\n    def GeneratorReplyStream(self, request, context):\n        # Handle streaming inference requests and yield multiple responses\n        pass\n\n    def _get_task_methods(self, method_name: str):\n        # Retrieves task-specific methods for request processing\n        pass\n\ndef _do_serve(service_impl, port, interceptors=None):\n    server = grpc.server(futures.ThreadPoolExecutor(max_workers=10))\n    add_ModelResponseServicer_to_server(service_impl, server)\n    if interceptors:\n        server.add_interceptors(*interceptors)\n    server.add_insecure_port(f'[::]:{port}')\n    server.start()\n    service_impl.get_stop_event().wait()\n    server.stop(0)\n```"
  },
  {
    "Task_id": 490,
    "Instruction": "Task Description: Create a gRPC server implementation in Python that supports multiple protocols, including health checks and service reflection, using asynchronous gRPC.\n\nClass Description: MultiProtocolGateway is a class that sets up and manages a gRPC server with support for JinaRPC protocol, health checks, and server reflection. It handles server initialization, startup, and graceful shutdown.\n\nAttributes:\n- grpc_port: int - The port number on which the gRPC server will listen\n- host: str - The host address to bind the server to (default: '0.0.0.0')\n- health_servicer: grpc_health.v1.health.HealthServicer - Handles health check requests\n- grpc_server: grpc.aio.Server - The asynchronous gRPC server instance\n\nMethods:\n- __init__(grpc_port: int, host: str = '0.0.0.0') -> None - Initializes the gateway with specified port and host\n- _setup_grpc_server() -> None - Asynchronously configures and starts the gRPC server with required services\n- run_server() -> None - Asynchronously runs the server until termination\n- shutdown() -> None - Asynchronously shuts down the server gracefully",
    "Canonical_solution": "import grpc\nfrom grpc_health.v1 import health, health_pb2, health_pb2_grpc\nfrom grpc_reflection.v1alpha import reflection\nfrom jina.proto import jina_pb2, jina_pb2_grpc\n\nclass MultiProtocolGateway:\n    def __init__(self, grpc_port: int, host: str = '0.0.0.0'):\n        self.grpc_port = grpc_port\n        self.host = host\n        self.health_servicer = health.HealthServicer(experimental_non_blocking=True)\n        self.grpc_server = None\n\n    async def _setup_grpc_server(self):\n        self.grpc_server = grpc.aio.server()\n\n        jina_pb2_grpc.add_JinaRPCServicer_to_server(\n            self.streamer._streamer, self.grpc_server\n        )\n\n        service_names = (\n            jina_pb2.DESCRIPTOR.services_by_name['JinaRPC'].full_name,\n            reflection.SERVICE_NAME,\n        )\n        \n        health_pb2_grpc.add_HealthServicer_to_server(\n            self.health_servicer, self.grpc_server\n        )\n        \n        for service in service_names:\n            self.health_servicer.set(service, health_pb2.HealthCheckResponse.SERVING)\n            \n        reflection.enable_server_reflection(service_names, self.grpc_server)\n        self.grpc_server.add_insecure_port(f'{self.host}:{self.grpc_port}')\n        await self.grpc_server.start()\n\n    async def run_server(self):\n        await self._setup_grpc_server()\n        await self.grpc_server.wait_for_termination()\n\n    async def shutdown(self):\n        await self.grpc_server.stop(0)\n        self.health_servicer.enter_graceful_shutdown()",
    "Code_level": "Class-level",
    "FSMID_for_test": 74,
    "right_result": "```python\nimport grpc\nimport grpc.aio\nfrom concurrent import futures\nfrom grpc_health.v1 import health\nfrom grpc_health.v1 import health_pb2\nfrom grpc_health.v1 import health_pb2_grpc\n\nclass MultiProtocolGateway:\n    def __init__(self, grpc_port: int, host: str = '0.0.0.0') -> None:\n        self.grpc_port = grpc_port\n        self.host = host\n        self.health_servicer = health.HealthServicer()\n        self.grpc_server = None\n\n    def _setup_grpc_server(self) -> None:\n        self.grpc_server = grpc.aio.server(futures.ThreadPoolExecutor(max_workers=10))\n        health_pb2_grpc.add_HealthServicer_to_server(self.health_servicer, self.grpc_server)\n        self.grpc_server.add_insecure_port(f'{self.host}:{self.grpc_port}')\n\n    def run_server(self) -> None:\n        self._setup_grpc_server()\n        self.grpc_server.start()\n        self.grpc_server.wait_for_termination()\n\n    def shutdown(self) -> None:\n        self.grpc_server.stop(0)\n```"
  },
  {
    "Task_id": 491,
    "Instruction": "Task Description: Implement a gRPC server in Python that provides session validation functionality using the grpcio library. The server should handle concurrent requests and validate sessions based on a specific mathematical operation between user_id and session_id.\n\nClass Description: ValidateServiceService is a gRPC service implementation that validates user sessions. It inherits from the generated LoginServiceServicer class and provides methods for session validation and server management.\n\nAttributes:\n- None explicitly defined (inherits attributes from parent class)\n\nMethods:\n- Validate(request, context) -> pb2.ValidateResponse: Validates a user session by performing a mathematical operation (XOR followed by modulo 23) on the user_id and session_id from the request. Returns a ValidateResponse with a boolean result.\n  Input: \n    - request: pb2.ValidateRequest - Contains user_id and session_id to validate\n    - context: grpc.ServicerContext - gRPC context object\n  Output: pb2.ValidateResponse - Contains validation result (True/False)\n\n- serve(port, max_workers) -> None: Starts and runs the gRPC server on the specified port with the given number of worker threads.\n  Input:\n    - port: str (default='50051') - Port number to bind the server to\n    - max_workers: int (default=10) - Maximum number of worker threads\n  Output: None (runs indefinitely until terminated)",
    "Canonical_solution": "import grpc\nfrom concurrent import futures\nimport validate_session_pb2_grpc as pb2_grpc\nimport validate_session_pb2 as pb2\n\nclass ValidateServiceService(pb2_grpc.LoginServiceServicer):\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def Validate(self, request, context):\n        return pb2.ValidateResponse(result=((request.user_id ^ request.session_id) % 23 == 0))\n\n    def serve(self, port='50051', max_workers=10):\n        server = grpc.server(futures.ThreadPoolExecutor(max_workers=max_workers))\n        pb2_grpc.add_LoginServiceServicer_to_server(self, server)\n        server.add_insecure_port(f'[::]:{port}')\n        server.start()\n        server.wait_for_termination()",
    "Code_level": "Class-level",
    "FSMID_for_test": 74,
    "right_result": "```python\nimport grpc\nfrom concurrent import futures\nimport sys\n\nfrom proto import login_service_pb2\nfrom proto import login_service_pb2_grpc\n\nclass ValidateServiceService(login_service_pb2_grpc.LoginServiceServicer):\n    def Validate(self, request, context):\n        user_id = request.user_id\n        session_id = request.session_id\n        result = (user_id ^ session_id) % 23 == 0\n        return login_service_pb2.ValidateResponse(result=result)\n\n    def serve(self, port='50051', max_workers=10):\n        server = grpc.server(futures.ThreadPoolExecutor(max_workers=max_workers))\n        login_service_pb2_grpc.add_LoginServiceServicer_to_server(self, server)\n        server.add_insecure_port('[::]:{}'.format(port))\n        server.start()\n        server.wait_for_termination()\n\nif __name__ == '__main__':\n    server = ValidateServiceService()\n    server.serve()\n```"
  },
  {
    "Task_id": 492,
    "Instruction": "Task Description: Implement a gRPC server in Python that handles various model inference requests concurrently, with thread-safe operations and graceful shutdown capabilities.\n\nClass Description: The GRPCServer class encapsulates a gRPC server implementation that manages multiple model inference services. It provides concurrent request handling, message size configuration, and proper shutdown mechanisms.\n\nAttributes:\n- server: [grpc.Server] - The gRPC server instance that handles incoming requests\n- stop_event: [threading.Event] - Event flag used to signal server termination\n\nMethods:\n- __init__: [Name](service_impl: [ModelResponseServicer], port: [int]) -> [None] - Initializes the gRPC server with thread pool executor, message size limits, and binds it to the specified port\n- start: [Name]() -> [None] - Starts the server and waits for termination signal before shutting down gracefully\n\nClass Description: The ModelResponseServicer class implements the actual gRPC service methods for various model inference tasks, providing thread-safe operation through locking mechanisms.\n\nAttributes:\n- _stop_event: [threading.Event] - Event flag used to signal service termination\n- inference_pipeline: [object] - The underlying inference processing pipeline\n- lock: [threading.Lock] - Lock for thread-safe operations\n\nMethods:\n- __init__: [Name](inference_pipeline: [object]) -> [None] - Initializes the servicer with inference pipeline and synchronization primitives\n- Terminate: [Name](request: [google.protobuf.Empty], context: [grpc.ServicerContext]) -> [google.protobuf.Empty] - Signals the server to terminate\n- get_stop_event: [Name]() -> [threading.Event] - Returns the stop event for server control\n- _run_inference: [Name](method_name: [str], request_proto: [object]) -> [object] - Internal thread-safe method for processing inference requests\n- GeneratorReply: [Name](request: [object], context: [grpc.ServicerContext]) -> [object] - Handles generator model requests\n- Txt2ImgReply: [Name](request: [object], context: [grpc.ServicerContext]) -> [object] - Handles text-to-image model requests\n- ClassificationReply: [Name](request: [object], context: [grpc.ServicerContext]) -> [object] - Handles classification model requests\n- QuestionAndAnswerReply: [Name](request: [object], context: [grpc.ServicerContext]) -> [object] - Handles Q&A model requests\n- FillMaskReply: [Name](request: [object], context: [grpc.ServicerContext]) -> [object] - Handles fill-mask model requests\n- TokenClassificationReply: [Name](request: [object], context: [grpc.ServicerContext]) -> [object] - Handles token classification requests\n- ZeroShotImgClassificationReply: [Name](request: [object], context: [grpc.ServicerContext]) -> [object] - Handles zero-shot image classification\n- InpaintingReply: [Name](request: [object], context: [grpc.ServicerContext]) -> [object] - Handles image inpainting requests",
    "Canonical_solution": "import grpc\nfrom concurrent import futures\nfrom google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2\nfrom .proto import legacymodelresponse_pb2_grpc as modelresponse_pb2_grpc\nimport threading\nfrom mii.legacy.constants import (\n    GRPC_MAX_MSG_SIZE,\n    LB_MAX_WORKER_THREADS,\n    SERVER_SHUTDOWN_TIMEOUT\n)\n\nclass ModelResponseServicer(modelresponse_pb2_grpc.ModelResponseServicer):\n    def __init__(self, inference_pipeline):\n        self._stop_event = threading.Event()\n        self.inference_pipeline = inference_pipeline\n        self.lock = threading.Lock()\n\n    def Terminate(self, request, context):\n        self._stop_event.set()\n        return google_dot_protobuf_dot_empty__pb2.Empty()\n\n    def get_stop_event(self):\n        return self._stop_event\n\n    def _run_inference(self, method_name, request_proto):\n        with self.lock:\n            response = self.inference_pipeline.process_request(method_name, request_proto)\n        return response\n\n    def GeneratorReply(self, request, context):\n        return self._run_inference(\"GeneratorReply\", request)\n\n    def Txt2ImgReply(self, request, context):\n        return self._run_inference(\"Txt2ImgReply\", request)\n\n    def ClassificationReply(self, request, context):\n        return self._run_inference(\"ClassificationReply\", request)\n\n    def QuestionAndAnswerReply(self, request, context):\n        return self._run_inference(\"QuestionAndAnswerReply\", request)\n\n    def FillMaskReply(self, request, context):\n        return self._run_inference(\"FillMaskReply\", request)\n\n    def TokenClassificationReply(self, request, context):\n        return self._run_inference(\"TokenClassificationReply\", request)\n\n    def ZeroShotImgClassificationReply(self, request, context):\n        return self._run_inference(\"ZeroShotImgClassificationReply\", request)\n\n    def InpaintingReply(self, request, context):\n        return self._run_inference(\"InpaintingReply\", request)\n\nclass GRPCServer:\n    def __init__(self, service_impl, port):\n        self.server = grpc.server(\n            futures.ThreadPoolExecutor(max_workers=LB_MAX_WORKER_THREADS),\n            options=[\n                (\"grpc.max_send_message_length\", GRPC_MAX_MSG_SIZE),\n                (\"grpc.max_receive_message_length\", GRPC_MAX_MSG_SIZE),\n            ]\n        )\n        modelresponse_pb2_grpc.add_ModelResponseServicer_to_server(service_impl, self.server)\n        self.server.add_insecure_port(f\"[::]:{port}\")\n        self.stop_event = service_impl.get_stop_event()\n\n    def start(self):\n        self.server.start()\n        self.stop_event.wait()\n        self.server.stop(SERVER_SHUTDOWN_TIMEOUT)",
    "Code_level": "Class-level",
    "FSMID_for_test": 74,
    "right_result": "```python\nimport grpc\nimport threading\nfrom concurrent import futures\nimport google.protobuf.empty_pb2\nimport google.protobuf.empty_pb2_grpc\n\nclass GRPCServer:\n    def __init__(self, service_impl, port):\n        self.server = grpc.server(futures.ThreadPoolExecutor(max_workers=10))\n        self.stop_event = threading.Event()\n        google.protobuf.empty_pb2_grpc.add_ModelResponseServicer_to_server(service_impl, self.server)\n        self.server.add_insecure_port('[::]:{}'.format(port))\n\n    def start(self):\n        self.server.start()\n        self.stop_event.wait()\n\n    def stop(self):\n        self.stop_event.set()\n\nclass ModelResponseServicer(google.protobuf.empty_pb2_grpc.ModelResponseServicer):\n    def __init__(self, inference_pipeline):\n        self._stop_event = threading.Event()\n        self.inference_pipeline = inference_pipeline\n        self.lock = threading.Lock()\n\n    def Terminate(self, request, context):\n        self._stop_event.set()\n        return google.protobuf.empty_pb2.Empty()\n\n    def get_stop_event(self):\n        return self._stop_event\n\n    def _run_inference(self, method_name, request_proto):\n        with self.lock:\n            # Thread-safe inference processing\n            pass\n\n    def GeneratorReply(self, request, context):\n        self._run_inference('generator', request)\n        return google.protobuf.empty_pb2.Empty()\n\n    def Txt2ImgReply(self, request, context):\n        self._run_inference('txt2img', request)\n        return google.protobuf.empty_pb2.Empty()\n\n    def ClassificationReply(self, request, context):\n        self._run_inference('classification', request)\n        return google.protobuf.empty_pb2.Empty()\n\n    def QuestionAndAnswerReply(self, request, context):\n        self._run_inference('qa', request)\n        return google.protobuf.empty_pb2.Empty()\n\n    def FillMaskReply(self, request, context):\n        self._run_inference('fill_mask', request)\n        return google.protobuf.empty_pb2.Empty()\n\n    def TokenClassificationReply(self, request, context):\n        self._run_inference('token_classification', request)\n        return google.protobuf.empty_pb2.Empty()\n\n    def ZeroShotImgClassificationReply(self, request, context):\n        self._run_inference('zero_shot_img_classification', request)\n        return google.protobuf.empty_pb2.Empty()\n\n    def InpaintingReply(self, request, context):\n        self._run_inference('inpainting', request)\n        return google.protobuf.empty_pb2.Empty()\n```"
  },
  {
    "Task_id": 494,
    "Instruction": "Task Description: Implement a gRPC server class in Python that can handle concurrent requests and manage the server lifecycle (start, run, wait, and stop).\n\nClass Description: The GRPCServer class is responsible for creating and managing a gRPC server instance. It initializes the server with a thread pool executor for handling concurrent requests, binds the server to a specified host and port, and provides methods to start, run, wait for termination, and stop the server.\n\nAttributes:\n- _server: grpc.Server - The gRPC server instance that handles incoming requests.\n\nMethods:\n- __init__(api_service: 'APIService', max_workers: int = 20) -> None - Initializes the gRPC server with a thread pool executor and binds the API service implementation to the server.\n- start(host: str, port: int) -> None - Starts the gRPC server by binding it to the specified host and port.\n- run(host: str, port: int) -> None - Combines the start and wait methods to run the server indefinitely.\n- wait() -> None - Blocks the current thread until the server is terminated.\n- stop() -> None - Stops the gRPC server gracefully.",
    "Canonical_solution": "import typing as T\nimport inspect\nimport traceback\nfrom concurrent import futures\nimport grpc\nfrom towhee.serve.io import JSON, TEXT, BYTES, NDARRAY\nfrom towhee.serve.api_service import RouterConfig\nfrom towhee.utils.log import engine_log\n\nclass GRPCServer:\n    def __init__(self, api_service: 'APIService', max_workers: int = 20):\n        self._server = grpc.server(futures.ThreadPoolExecutor(max_workers=max_workers))\n        service_pb2_grpc.add_PipelineServicesServicer_to_server(_PipelineImpl(api_service), self._server)\n\n    def start(self, host: str, port: int):\n        uri = str(host) + ':' + str(port)\n        self._server.add_insecure_port(uri)\n        self._server.start()\n        engine_log.info('Start grpc server at %s.', uri)\n\n    def run(self, host: str, port: int):\n        self.start(host, port)\n        self.wait()\n\n    def wait(self):\n        self._server.wait_for_termination()\n\n    def stop(self):\n        self._server.stop(None)",
    "Code_level": "Class-level",
    "FSMID_for_test": 74,
    "right_result": "```python\nimport grpc\nfrom concurrent import futures\n\nclass GRPCServer:\n    def __init__(self, api_service, max_workers=20):\n        self._server = grpc.server(futures.ThreadPoolExecutor(max_workers=max_workers))\n        api_service.add_insecure_port('[::]:0')\n        self._server.add_insecure_port('[::]:0')\n\n    def start(self, host, port):\n        self._server.add_insecure_port(f'{host}:{port}')\n\n    def run(self, host, port):\n        self.start(host, port)\n        self._server.start()\n        self._server.wait_for_termination()\n\n    def wait(self):\n        self._server.wait_for_termination()\n\n    def stop(self):\n        self._server.stop(0)\n```"
  },
  {
    "Task_id": 495,
    "Instruction": "Task Description: Create a function to set up and tear down a gRPC server with configurable interceptors and thread pool workers.\n\nFunction Description: The function `_set_up` initializes and starts a gRPC server with optional interceptors, while `_tear_down` gracefully stops the server. The server is configured to handle gRPC requests concurrently using a thread pool.\n\nInput:\n- `interceptors` (Optional[List[grpc.ServerInterceptor]]): A list of gRPC server interceptors for request/response processing. Defaults to None.\n- `server` (grpc.Server): The gRPC server instance to be stopped (for `_tear_down`).\n\nOutput:\n- `_set_up` returns the initialized and started `grpc.Server` instance.\n- `_tear_down` has no return value (stops the server).",
    "Canonical_solution": "import grpc\nfrom concurrent import futures\nfrom typing import List, Optional\n\ndef _set_up(interceptors: Optional[List[grpc.ServerInterceptor]] = None):\n    server = grpc.server(\n        futures.ThreadPoolExecutor(max_workers=2),\n        interceptors=interceptors,\n    )\n    add_gRPCTestServiceServicer_to_server(TestService(), server)\n    server.add_insecure_port(\"[::]:{}\".format(PORT))\n    server.start()\n    return server\n\ndef _tear_down(server: grpc.Server):\n    server.stop(None)",
    "Code_level": "Function-level",
    "FSMID_for_test": 74,
    "right_result": "```python\nimport grpc\nfrom concurrent import futures\n\ndef _set_up(interceptors=None, server=None):\n    if interceptors is None:\n        interceptors = []\n    if server is None:\n        server = grpc.server(futures.ThreadPoolExecutor(max_workers=10))\n    server.add_insecure_port('[::]:50051')\n    for interceptor in interceptors:\n        server.interceptors.add(interceptor)\n    server.start()\n    return server\n\ndef _tear_down(server):\n    server.stop(0)\n```"
  },
  {
    "Task_id": 496,
    "Instruction": "Task Description: Create a gRPC server in Python that can handle multiple versions of a service concurrently, with support for server reflection and interceptors.\n\nFunction Description: The `serve()` function initializes and starts two gRPC servers on different ports. The first server handles versions 1 and 2 of the Greeter service, while the second server handles version 3 with reflection enabled. Both servers use thread pool executors for concurrency and share the same interceptors for request logging.\n\nInput: None (The function takes no parameters)\n\nOutput: None (The function doesn't return anything but starts servers that run indefinitely)\n\nNote: The function uses threading.Event().wait() to keep the servers running indefinitely. The servers are configured with:\n1. ThreadPoolExecutor with 10 workers for concurrent request handling\n2. LoggingInterceptor for request logging\n3. Insecure ports (50051 and 50052) for communication\n4. Different service versions (v1, v2 on port 50051; v3 with reflection on port 50052)",
    "Canonical_solution": "import logging\nimport threading\nfrom concurrent import futures\nimport grpc\nimport helloworld_v1_precompiled_pb2_grpc as helloworld_pb2_grpc_v1\nimport helloworld_v2_compiled_pb2_grpc as helloworld_pb2_grpc_v2\nimport helloworld_v3_reflected_pb2_grpc as helloworld_pb2_grpc_v3\nfrom grpc_interceptor import ServerInterceptor\nfrom grpc_reflection.v1alpha import reflection\n\ndef serve():\n    interceptors = [LoggingInterceptor()]\n    executor = futures.ThreadPoolExecutor(max_workers=10)\n\n    # One server which exposes these two\n    server = grpc.server(\n        executor,\n        interceptors=interceptors,\n    )\n    helloworld_pb2_grpc_v1.add_GreeterServicer_to_server(GreeterV1(), server)\n    helloworld_pb2_grpc_v2.add_GreeterServicer_to_server(GreeterV2(), server)\n\n    server.add_insecure_port(\"0.0.0.0:50051\")\n    server.start()\n\n    # One server which exposes the V3 API and has reflection turned on\n    reflecting_server = grpc.server(\n        executor,\n        interceptors=interceptors,\n    )\n    helloworld_pb2_grpc_v3.add_GreeterServicer_to_server(GreeterV3(), reflecting_server)\n    service_names = (\n        helloworld_pb2_v3.DESCRIPTOR.services_by_name[\"Greeter\"].full_name,\n        reflection.SERVICE_NAME,\n    )\n    reflection.enable_server_reflection(service_names, reflecting_server)\n    reflecting_server.add_insecure_port(\"0.0.0.0:50052\")\n    reflecting_server.start()\n\n    logging.info(\"Starting grpc server\")\n    event = threading.Event()\n    event.wait()",
    "Code_level": "Function-level",
    "FSMID_for_test": 74,
    "right_result": "```python\nimport grpc\nimport concurrent\nimport logging\nfrom concurrent import futures\nfrom grpc_reflection.v1alpha import server_reflection\nfrom my_service_v1 import my_service_v1_pb2\nfrom my_service_v1 import my_service_v1_pb2_grpc\nfrom my_service_v2 import my_service_v2_pb2\nfrom my_service_v2 import my_service_v2_pb2_grpc\nfrom my_service_v3 import my_service_v3_pb2\nfrom my_service_v3 import my_service_v3_pb2_grpc\n\nclass LoggingInterceptor(grpc.UnaryInterceptor):\n    def intercept_unary(self, continuation, request, context):\n        logging.info(f\"Request: {request}\")\n        return continuation(request, context)\n\ndef serve():\n    server_v1 = grpc.server(futures.ThreadPoolExecutor(max_workers=10), interceptors=[LoggingInterceptor()])\n    my_service_v1_pb2_grpc.add_MyServiceV1Servicer_to_server(MyServiceV1Servicer(), server_v1)\n    server_v1.add_insecure_port('[::]:50051')\n    server_v1.add_insecure_port('[::1]:50051')\n    server_v1.start()\n\n    server_v2 = grpc.server(futures.ThreadPoolExecutor(max_workers=10), interceptors=[LoggingInterceptor()])\n    my_service_v2_pb2_grpc.add_MyServiceV2Servicer_to_server(MyServiceV2Servicer(), server_v2)\n    server_v2.add_insecure_port('[::]:50051')\n    server_v2.add_insecure_port('[::1]:50051')\n    server_v2.start()\n\n    server_v3 = grpc.server(futures.ThreadPoolExecutor(max_workers=10), interceptors=[LoggingInterceptor()])\n    my_service_v3_pb2_grpc.add_MyServiceV3Servicer_to_server(MyServiceV3Servicer(), server_v3)\n    server_v3.add_insecure_port('[::]:50052')\n    server_v3.add_insecure_port('[::1]:50052')\n    server_v3.add_generic_rpc_handlers((server_reflection.ServerReflectionHandler(),))\n    server_v3.start()\n\n    server_v1.wait_for_termination()\n    server_v2.wait_for_termination()\n    server_v3.wait_for_termination()\n\nif __name__ == '__main__':\n    serve()\n```"
  },
  {
    "Task_id": 497,
    "Instruction": "Task Description: Create a gRPC server in Python that handles incoming requests using a thread pool for concurrency, implements service methods, and supports server reflection.\n\nClass Description: GRPCServer is a class that encapsulates the functionality of a gRPC server, including initialization with a thread pool, service implementation, and server lifecycle management (start/stop).\n\nAttributes:\n- _server: grpc.Server - The underlying gRPC server instance\n- _service_impl: ServiceImpl - The implementation of the gRPC service methods\n\nMethods:\n- __init__(max_workers: int = 5) -> None - Initializes the gRPC server with a thread pool executor of specified size and sets up service implementation\n- start(port: int) -> None - Binds the server to the specified port and starts listening for incoming requests\n- stop(grace_period: float = 1.0) -> None - Stops the server with the specified grace period for ongoing requests\n\nNested Class Description: ServiceImpl implements the actual gRPC service methods defined in the protobuf service.\n\nMethods:\n- Empty(request: Any, context) -> Any - Handles empty requests and returns an empty response\n- SimpleTest(request: test_services_pb2.DummyRequest, context: grpc.ServicerContext) -> test_services_pb2.DummyResponse - Processes a dummy request, validates input, and returns a response or aborts with error if validation fails",
    "Canonical_solution": "import grpc\nfrom concurrent import futures\nfrom typing import Any\nfrom . import test_services_pb2, test_services_pb2_grpc\n\nclass ServiceImpl(test_services_pb2_grpc.DummyServiceServicer):\n    def Empty(self, request: Any, context) -> Any:\n        return test_services_pb2.Empty()\n\n    def SimpleTest(\n        self, request: test_services_pb2.DummyRequest, context: grpc.ServicerContext\n    ) -> test_services_pb2.DummyResponse:\n        if request.request_id > 1000:\n            context.abort(grpc.StatusCode.FAILED_PRECONDITION, \"number too big!\")\n        return test_services_pb2.DummyResponse(response_id=request.request_id + 1)\n\nclass GRPCServer:\n    def __init__(self, max_workers: int = 5):\n        self._server = grpc.server(futures.ThreadPoolExecutor(max_workers=max_workers))\n        self._service_impl = ServiceImpl()\n        test_services_pb2_grpc.add_DummyServiceServicer_to_server(self._service_impl, self._server)\n        \n        service_names = (\n            test_services_pb2.DESCRIPTOR.services_by_name[\"DummyService\"].full_name,\n            reflection.SERVICE_NAME,\n        )\n        reflection.enable_server_reflection(service_names, self._server)\n\n    def start(self, port: int) -> None:\n        self._server.add_insecure_port(f\"127.0.0.1:{port}\")\n        self._server.start()\n\n    def stop(self, grace_period: float = 1.0) -> None:\n        self._server.stop(grace_period)",
    "Code_level": "Class-level",
    "FSMID_for_test": 74,
    "right_result": "```python\nimport grpc\nfrom concurrent import futures\nimport threading\n\nclass GRPCServer:\n    def __init__(self, max_workers: int = 5) -> None:\n        self._server = grpc.server(futures.ThreadPoolExecutor(max_workers=max_workers))\n        self._service_impl = ServiceImpl()\n        test_services_pb2_grpc.add_TestServicer_to_server(self._service_impl, self._server)\n\n    def start(self, port: int) -> None:\n        self._server.add_insecure_port('[::]:{}'.format(port))\n        self._server.start()\n\n    def stop(self, grace_period: float = 1.0) -> None:\n        self._server.stop(grace_period=grace_period)\n\nclass ServiceImpl(test_services_pb2_grpc.TestServicer):\n    def Empty(self, request, context):\n        return test_services_pb2.Empty()\n\n    def SimpleTest(self, request, context):\n        if request.some_field == \"invalid\":\n            context.abort(grpc.StatusCode.INVALID_ARGUMENT, \"Invalid input\")\n        return test_services_pb2.DummyResponse(response=\"Processed\")\n```"
  },
  {
    "Task_id": 498,
    "Instruction": "Task Description: Implement a gRPC server for Optuna storage proxy service that handles study and trial management operations.\n\nClass Description: OptunaStorageProxyService is a gRPC servicer class that implements the StorageService interface, providing methods to manage Optuna studies and trials through a gRPC server. It acts as a proxy between gRPC clients and the underlying Optuna storage backend.\n\nAttributes:\n- _backend: BaseStorage - The underlying Optuna storage implementation\n- _lock: threading.Lock - A lock for thread-safe operations\n\nMethods:\n- CreateNewStudy(request: api_pb2.CreateNewStudyRequest, context: grpc.ServicerContext) -> api_pb2.CreateNewStudyReply - Creates a new study with given directions and name\n- DeleteStudy(request: api_pb2.DeleteStudyRequest, context: grpc.ServicerContext) -> api_pb2.DeleteStudyReply - Deletes a study with the given ID\n- SetStudyUserAttribute(request: api_pb2.SetStudyUserAttributeRequest, context: grpc.ServicerContext) -> api_pb2.SetStudyUserAttributeReply - Sets a user attribute for a study\n- GetStudyIdFromName(request: api_pb2.GetStudyIdFromNameRequest, context: grpc.ServicerContext) -> api_pb2.GetStudyIdFromNameReply - Gets study ID from study name\n- GetStudyNameFromId(request: api_pb2.GetStudyNameFromIdRequest, context: grpc.ServicerContext) -> api_pb2.GetStudyNameFromIdReply - Gets study name from study ID\n- GetAllStudies(request: api_pb2.GetAllStudiesRequest, context: grpc.ServicerContext) -> api_pb2.GetAllStudiesReply - Gets all studies in the storage\n- CreateNewTrial(request: api_pb2.CreateNewTrialRequest, context: grpc.ServicerContext) -> api_pb2.CreateNewTrialReply - Creates a new trial in a study\n- SetTrialParameter(request: api_pb2.SetTrialParameterRequest, context: grpc.ServicerContext) -> api_pb2.SetTrialParameterReply - Sets parameters for a trial\n- GetTrial(request: api_pb2.GetTrialRequest, context: grpc.ServicerContext) -> api_pb2.GetTrialReply - Gets trial details\n- GetAllTrials(request: api_pb2.GetAllTrialsRequest, context: grpc.ServicerContext) -> api_pb2.GetAllTrialsReply - Gets all trials for a study with optional state filtering",
    "Canonical_solution": "from concurrent.futures import ThreadPoolExecutor\nimport grpc\nfrom optuna.storages._grpc.grpc_imports import api_pb2_grpc\nfrom optuna.storages._grpc.grpc_imports import api_pb2\nfrom optuna.storages._grpc.grpc_imports import StorageServiceServicer\nfrom optuna.storages import BaseStorage\nfrom optuna._experimental import experimental_func\nimport logging\n\n_logger = logging.get_logger(__name__)\n\nclass OptunaStorageProxyService(StorageServiceServicer):\n    def __init__(self, storage: BaseStorage) -> None:\n        self._backend = storage\n        self._lock = threading.Lock()\n\n    def CreateNewStudy(self, request: api_pb2.CreateNewStudyRequest, context: grpc.ServicerContext) -> api_pb2.CreateNewStudyReply:\n        directions = [\n            StudyDirection.MINIMIZE if d == api_pb2.MINIMIZE else StudyDirection.MAXIMIZE\n            for d in request.directions\n        ]\n        study_name = request.study_name\n\n        try:\n            study_id = self._backend.create_new_study(directions=directions, study_name=study_name)\n        except DuplicatedStudyError as e:\n            context.abort(code=grpc.StatusCode.ALREADY_EXISTS, details=str(e))\n        return api_pb2.CreateNewStudyReply(study_id=study_id)\n\n    def DeleteStudy(self, request: api_pb2.DeleteStudyRequest, context: grpc.ServicerContext) -> api_pb2.DeleteStudyReply:\n        study_id = request.study_id\n        try:\n            self._backend.delete_study(study_id)\n        except KeyError as e:\n            context.abort(code=grpc.StatusCode.NOT_FOUND, details=str(e))\n        return api_pb2.DeleteStudyReply()\n\n    def SetStudyUserAttribute(self, request: api_pb2.SetStudyUserAttributeRequest, context: grpc.ServicerContext) -> api_pb2.SetStudyUserAttributeReply:\n        try:\n            self._backend.set_study_user_attr(\n                request.study_id, request.key, json.loads(request.value)\n            )\n        except KeyError as e:\n            context.abort(code=grpc.StatusCode.NOT_FOUND, details=str(e))\n        return api_pb2.SetStudyUserAttributeReply()\n\n    def GetStudyIdFromName(self, request: api_pb2.GetStudyIdFromNameRequest, context: grpc.ServicerContext) -> api_pb2.GetStudyIdFromNameReply:\n        try:\n            study_id = self._backend.get_study_id_from_name(request.study_name)\n        except KeyError as e:\n            context.abort(code=grpc.StatusCode.NOT_FOUND, details=str(e))\n        return api_pb2.GetStudyIdFromNameReply(study_id=study_id)\n\n    def GetStudyNameFromId(self, request: api_pb2.GetStudyNameFromIdRequest, context: grpc.ServicerContext) -> api_pb2.GetStudyNameFromIdReply:\n        study_id = request.study_id\n        try:\n            name = self._backend.get_study_name_from_id(study_id)\n        except KeyError as e:\n            context.abort(code=grpc.StatusCode.NOT_FOUND, details=str(e))\n        assert name is not None\n        return api_pb2.GetStudyNameFromIdReply(study_name=name)\n\n    def GetAllStudies(self, request: api_pb2.GetAllStudiesRequest, context: grpc.ServicerContext) -> api_pb2.GetAllStudiesReply:\n        studies = self._backend.get_all_studies()\n        return api_pb2.GetAllStudiesReply(\n            studies=[\n                api_pb2.Study(\n                    study_id=study._study_id,\n                    study_name=study.study_name,\n                    directions=[\n                        api_pb2.MINIMIZE if d == StudyDirection.MINIMIZE else api_pb2.MAXIMIZE\n                        for d in study.directions\n                    ],\n                    user_attributes={\n                        key: json.dumps(value) for key, value in study.user_attrs.items()\n                    },\n                    system_attributes={\n                        key: json.dumps(value) for key, value in study.system_attrs.items()\n                    },\n                )\n                for study in studies\n            ]\n        )\n\n    def CreateNewTrial(self, request: api_pb2.CreateNewTrialRequest, context: grpc.ServicerContext) -> api_pb2.CreateNewTrialReply:\n        study_id = request.study_id\n        template_trial = None\n        if not request.template_trial_is_none:\n            template_trial = _from_proto_trial(request.template_trial)\n\n        try:\n            trial_id = self._backend.create_new_trial(study_id, template_trial)\n        except KeyError as e:\n            context.abort(code=grpc.StatusCode.NOT_FOUND, details=str(e))\n        return api_pb2.CreateNewTrialReply(trial_id=trial_id)\n\n    def SetTrialParameter(self, request: api_pb2.SetTrialParameterRequest, context: grpc.ServicerContext) -> api_pb2.SetTrialParameterReply:\n        trial_id = request.trial_id\n        param_name = request.param_name\n        param_value_internal = request.param_value_internal\n        distribution = json_to_distribution(request.distribution)\n        try:\n            self._backend.set_trial_param(trial_id, param_name, param_value_internal, distribution)\n        except KeyError as e:\n            context.abort(code=grpc.StatusCode.NOT_FOUND, details=str(e))\n        except RuntimeError as e:\n            context.abort(code=grpc.StatusCode.FAILED_PRECONDITION, details=str(e))\n        except ValueError as e:\n            context.abort(code=grpc.StatusCode.INVALID_ARGUMENT, details=str(e))\n        return api_pb2.SetTrialParameterReply()\n\n    def GetTrial(self, request: api_pb2.GetTrialRequest, context: grpc.ServicerContext) -> api_pb2.GetTrialReply:\n        trial_id = request.trial_id\n        try:\n            trial = self._backend.get_trial(trial_id)\n        except KeyError as e:\n            context.abort(code=grpc.StatusCode.NOT_FOUND, details=str(e))\n        return api_pb2.GetTrialReply(trial=_to_proto_trial(trial))\n\n    def GetAllTrials(self, request: api_pb2.GetAllTrialsRequest, context: grpc.ServicerContext) -> api_pb2.GetAllTrialsReply:\n        study_id = request.study_id\n        states = [_from_proto_trial_state(state) for state in request.states]\n        try:\n            trials = self._backend.get_all_trials(\n                study_id,\n                deepcopy=False,\n                states=states,\n            )\n        except KeyError as e:\n            context.abort(code=grpc.StatusCode.NOT_FOUND, details=str(e))\n        return api_pb2.GetAllTrialsReply(trials=[_to_proto_trial(trial) for trial in trials])\n\n@experimental_func(\"4.2.0\")\ndef run_grpc_proxy_server(\n    storage: BaseStorage,\n    *,\n    host: str = \"localhost\",\n    port: int = 13000,\n    thread_pool: ThreadPoolExecutor | None = None,\n) -> None:\n    server = grpc.server(thread_pool or ThreadPoolExecutor(max_workers=10))\n    api_pb2_grpc.add_StorageServiceServicer_to_server(\n        OptunaStorageProxyService(storage), server\n    )\n    server.add_insecure_port(f\"{host}:{port}\")\n    server.start()\n    _logger.info(f\"Server started at {host}:{port}\")\n    _logger.info(\"Listening...\")\n    server.wait_for_termination()",
    "Code_level": "Class-level",
    "FSMID_for_test": 74,
    "right_result": "```python\nimport grpc\nfrom concurrent import futures\nimport threading\nfrom optuna.storage import BaseStorage\n\nclass OptunaStorageProxyService:\n    def __init__(self, backend: BaseStorage):\n        self._backend = backend\n        self._lock = threading.Lock()\n\n    def CreateNewStudy(self, request, context):\n        with self._lock:\n            # Implementation for creating a new study\n            pass\n\n    def DeleteStudy(self, request, context):\n        with self._lock:\n            # Implementation for deleting a study\n            pass\n\n    def SetStudyUserAttribute(self, request, context):\n        with self._lock:\n            # Implementation for setting a user attribute for a study\n            pass\n\n    def GetStudyIdFromName(self, request, context):\n        with self._lock:\n            # Implementation for getting study ID from study name\n            pass\n\n    def GetStudyNameFromId(self, request, context):\n        with self._lock:\n            # Implementation for getting study name from study ID\n            pass\n\n    def GetAllStudies(self, request, context):\n        with self._lock:\n            # Implementation for getting all studies\n            pass\n\n    def CreateNewTrial(self, request, context):\n        with self._lock:\n            # Implementation for creating a new trial\n            pass\n\n    def SetTrialParameter(self, request, context):\n        with self._lock:\n            # Implementation for setting parameters for a trial\n            pass\n\n    def GetTrial(self, request, context):\n        with self._lock:\n            # Implementation for getting trial details\n            pass\n\n    def GetAllTrials(self, request, context):\n        with self._lock:\n            # Implementation for getting all trials for a study\n            pass\n\ndef serve():\n    server = grpc.server(futures.ThreadPoolExecutor(max_workers=10))\n    api_pb2_grpc.add_StorageServiceServicer_to_server(OptunaStorageProxyService(), server)\n    server.add_insecure_port('[::]:50051')\n    server.start()\n    server.wait_for_termination()\n\nif __name__ == '__main__':\n    serve()\n```"
  },
  {
    "Task_id": 499,
    "Instruction": "Task Description: Implement a gRPC server class that handles multiple protocols including health checks and service reflection, capable of serving JinaRPC requests asynchronously.\n\nClass Description: MultiProtocolGateway is a class that sets up and manages a gRPC server with support for JinaRPC services, health checks, and server reflection. It provides methods to start, run, and shutdown the server gracefully.\n\nAttributes:\n- grpc_port: int - The port number on which the gRPC server will listen\n- host: str - The host address to bind the server to (default: '0.0.0.0')\n- health_servicer: HealthServicer - The health check service implementation\n- grpc_server: grpc.aio.Server - The asynchronous gRPC server instance\n\nMethods:\n- __init__(grpc_port: int, host: str = '0.0.0.0') -> None - Initializes the gateway with specified port and host\n- _setup_grpc_server() -> None - Sets up the gRPC server with JinaRPC services, health checks, and reflection (asynchronous)\n- run_server() -> None - Starts the server and waits for termination (asynchronous)\n- shutdown() -> None - Gracefully shuts down the server (asynchronous)",
    "Canonical_solution": "import grpc\nfrom grpc_health.v1 import health, health_pb2, health_pb2_grpc\nfrom grpc_reflection.v1alpha import reflection\nfrom jina.proto import jina_pb2, jina_pb2_grpc\n\nclass MultiProtocolGateway:\n    def __init__(self, grpc_port: int, host: str = '0.0.0.0'):\n        self.grpc_port = grpc_port\n        self.host = host\n        self.health_servicer = health.HealthServicer(experimental_non_blocking=True)\n\n    async def _setup_grpc_server(self):\n        self.grpc_server = grpc.aio.server()\n\n        jina_pb2_grpc.add_JinaRPCServicer_to_server(\n            self.streamer._streamer, self.grpc_server\n        )\n\n        jina_pb2_grpc.add_JinaSingleDataRequestRPCServicer_to_server(\n            self.streamer._streamer, self.grpc_server\n        )\n\n        service_names = (\n            jina_pb2.DESCRIPTOR.services_by_name['JinaRPC'].full_name,\n            reflection.SERVICE_NAME,\n        )\n        \n        health_pb2_grpc.add_HealthServicer_to_server(\n            self.health_servicer, self.grpc_server\n        )\n        \n        for service in service_names:\n            self.health_servicer.set(service, health_pb2.HealthCheckResponse.SERVING)\n            \n        reflection.enable_server_reflection(service_names, self.grpc_server)\n        self.grpc_server.add_insecure_port(f'{self.host}:{self.grpc_port}')\n        await self.grpc_server.start()\n\n    async def run_server(self):\n        await self.grpc_server.wait_for_termination()\n\n    async def shutdown(self):\n        await self.grpc_server.stop(0)\n        self.health_servicer.enter_graceful_shutdown()",
    "Code_level": "Class-level",
    "FSMID_for_test": 74,
    "right_result": "```python\nimport grpc\nfrom concurrent import futures\nimport grpc_reflection_v1alpha as reflection\nfrom grpc_health_v1 import HealthServicer, Health, ServerStatus\n\nclass MultiProtocolGateway:\n    def __init__(self, grpc_port: int, host: str = '0.0.0.0') -> None:\n        self.grpc_port = grpc_port\n        self.host = host\n        self.health_servicer = HealthServicer()\n        self.grpc_server = None\n\n    def _setup_grpc_server(self) -> None:\n        self.grpc_server = grpc.aio.server(futures.ThreadPoolExecutor(max_workers=10))\n        reflection.enable_server_reflection(self.grpc_server)\n        self.grpc_server.add_insecure_port(f'{self.host}:{self.grpc_port}')\n        self.grpc_server.add_service(HealthServicerServicer.to_grpc_server(self.health_servicer))\n\n    async def run_server(self) -> None:\n        self._setup_grpc_server()\n        await self.grpc_server.start()\n        print(f'Server started on {self.host}:{self.grpc_port}')\n        await self.grpc_server.wait_for_termination()\n\n    async def shutdown(self) -> None:\n        if self.grpc_server:\n            await self.grpc_server.stop(0)\n            print('Server shutdown gracefully')\n```"
  },
  {
    "Task_id": 50,
    "Instruction": "Task Description: Implement asynchronous HTTP client functions to interact with a gacha information API, retrieving lists of available gacha and their detailed information.\n\nFunction Description: The code consists of two asynchronous functions that use httpx library to make HTTP requests to a gacha information API. The first function retrieves a list of available gacha, while the second fetches detailed information for a specific gacha using its ID.\n\nInput: \n- For `gacha_info_list()`: None\n- For `gacha_info(gacha_id)`: \n  - gacha_id: [str] - The unique identifier of the gacha to fetch details for\n\nOutput: \n- For `gacha_info_list()`: [list] - A list of available gacha items\n- For `gacha_info(gacha_id)`: [dict] - A dictionary containing detailed information about the specified gacha",
    "Canonical_solution": "import httpx\n\nBASE_URL = 'https://operation-webstatic.mihoyo.com/gacha_info/hk4e/cn_gf01/%s'\n\nasync def gacha_info_list():\n    async with httpx.AsyncClient() as client:\n        res = await client.get(url=BASE_URL % 'gacha/list.json')\n        json_data = res.json()\n        return json_data['data']['list']\n\nasync def gacha_info(gacha_id):\n    async with httpx.AsyncClient() as client:\n        res = await client.get(url=BASE_URL % gacha_id + '/zh-cn.json')\n        return res.json()",
    "Code_level": "Function-level",
    "FSMID_for_test": 59,
    "right_result": "```python\nimport httpx\n\nasync def gacha_info_list():\n    async with httpx.AsyncClient() as client:\n        response = await client.get(\"https://api.gacha.com/gacha_list\")\n        return response.json()\n\nasync def gacha_info(gacha_id):\n    async with httpx.AsyncClient() as client:\n        response = await client.get(f\"https://api.gacha.com/gacha_info/{gacha_id}\")\n        return response.json()\n```"
  },
  {
    "Task_id": 500,
    "Instruction": "Task Description: Implement a gRPC server in Python that handles network compute bridge requests using thread pools for concurrency and inter-process communication queues for request/response handling.\n\nClass Description: NetworkComputeBridgeWorkerServicer is a gRPC servicer class that processes incoming network compute requests and model listing requests, using input/output queues for inter-process communication.\n\nAttributes:\n- thread_input_queue: [multiprocessing.Queue] - Queue for receiving incoming requests from gRPC clients\n- thread_output_queue: [multiprocessing.Queue] - Queue for sending responses back to gRPC clients\n\nMethods:\n- NetworkCompute: [Name](request, context) -> [network_compute_bridge_pb2.NetworkComputeResponse] - Processes a network compute request by putting it in the input queue and waiting for response from output queue\n- ListAvailableModels: [Name](request, context) -> [network_compute_bridge_pb2.ListAvailableModelsResponse] - Processes a model listing request by putting it in the input queue and waiting for response from output queue\n\nFunction Description: start_grpc_server creates and starts a gRPC server instance with thread pool executor, registers the servicer, and binds it to a specified port.\n\nInput:\n- port: [int] - The port number on which the gRPC server should listen\n\nOutput:\n- server: [grpc.Server] - The running gRPC server instance",
    "Canonical_solution": "import grpc\nfrom concurrent import futures\nimport multiprocessing\nfrom multiprocessing import Queue\nimport bosdyn.api.network_compute_bridge_service_pb2_grpc as network_compute_bridge_service_pb2_grpc\nimport bosdyn.api.network_compute_bridge_pb2 as network_compute_bridge_pb2\nimport bosdyn.api.header_pb2 as header_pb2\n\nREQUEST_QUEUE = Queue()\nRESPONSE_QUEUE = Queue()\n\nclass NetworkComputeBridgeWorkerServicer(network_compute_bridge_service_pb2_grpc.NetworkComputeBridgeWorkerServicer):\n    def __init__(self, thread_input_queue, thread_output_queue):\n        super(NetworkComputeBridgeWorkerServicer, self).__init__()\n        self.thread_input_queue = thread_input_queue\n        self.thread_output_queue = thread_output_queue\n\n    def NetworkCompute(self, request, context):\n        self.thread_input_queue.put(request)\n        out_proto = self.thread_output_queue.get()\n        return out_proto\n\n    def ListAvailableModels(self, request, context):\n        self.thread_input_queue.put(request)\n        out_proto = self.thread_output_queue.get()\n        return out_proto\n\ndef start_grpc_server(port):\n    server = grpc.server(futures.ThreadPoolExecutor(max_workers=10))\n    network_compute_bridge_service_pb2_grpc.add_NetworkComputeBridgeWorkerServicer_to_server(\n        NetworkComputeBridgeWorkerServicer(REQUEST_QUEUE, RESPONSE_QUEUE), server)\n    server.add_insecure_port(f'[::]:{port}')\n    server.start()\n    return server",
    "Code_level": "Class-level",
    "FSMID_for_test": 74,
    "right_result": "```python\nimport grpc\nimport multiprocessing\nimport threading\nfrom concurrent import futures\nimport network_compute_bridge_pb2\nimport network_compute_bridge_pb2_grpc\n\nclass NetworkComputeBridgeWorkerServicer(network_compute_bridge_pb2_grpc.NetworkComputeBridgeWorkerServicer):\n    def __init__(self):\n        self.thread_input_queue = multiprocessing.Queue()\n        self.thread_output_queue = multiprocessing.Queue()\n\n    def NetworkCompute(self, request, context):\n        self.thread_input_queue.put(request)\n        response = self.thread_output_queue.get()\n        return response\n\n    def ListAvailableModels(self, request, context):\n        self.thread_input_queue.put(request)\n        response = self.thread_output_queue.get()\n        return response\n\ndef network_compute_bridge_worker(input_queue, output_queue):\n    while True:\n        request = input_queue.get()\n        if request == \"STOP\":\n            break\n        if request.ListAvailableModels:\n            response = network_compute_bridge_pb2.ListAvailableModelsResponse()\n            # Process the request and populate the response\n            output_queue.put(response)\n        else:\n            response = network_compute_bridge_pb2.NetworkComputeResponse()\n            # Process the request and populate the response\n            output_queue.put(response)\n\ndef start_grpc_server(port):\n    server = grpc.server(futures.ThreadPoolExecutor(max_workers=10))\n    servicer = NetworkComputeBridgeWorkerServicer()\n    network_compute_bridge_pb2_grpc.add_NetworkComputeBridgeWorkerServicer_to_server(servicer, server)\n    server.add_insecure_port('[::]:{}'.format(port))\n    server.start()\n    server.wait_for_termination()\n```"
  },
  {
    "Task_id": 501,
    "Instruction": "Task Description: Implement a gRPC server class for Vizier service that handles concurrent requests and manages service lifecycle.\n\nClass Description: DefaultVizierServer is a class that sets up and manages a gRPC server for Vizier service, including initialization, startup, and configuration of related services. It handles concurrent requests using a thread pool and provides access to the server's datastore and endpoint.\n\nAttributes:\n- _host: [str] - The host address where the server will run (default: 'localhost')\n- _database_url: [Optional[str]] - URL for the database connection\n- _policy_factory: [Any] - Factory for creating policy objects (default: service_policy_factory_lib.DefaultPolicyFactory)\n- _early_stop_recycle_period: [datetime.timedelta] - Time period for early stop recycling (default: 0.1 seconds)\n- _port: [int] - The port number selected for the server\n- _servicer: [Any] - The Vizier service implementation\n- _server: [grpc.Server] - The gRPC server instance\n- stub: [Any] - The client stub for the server\n\nMethods:\n- __init__(host: str = 'localhost', database_url: Optional[str] = None, policy_factory=None, early_stop_recycle_period: datetime.timedelta = datetime.timedelta(seconds=0.1)) -> None - Initializes the server with configuration parameters\n- datastore() -> [property] - Returns the datastore from the servicer\n- endpoint() -> [property] - Returns the server endpoint as 'host:port'\n- start() -> None - Starts the gRPC server and initializes services\n- wait_for_early_stop_recycle_period() -> None - Waits for the configured early stop recycle period",
    "Canonical_solution": "from concurrent import futures\nimport datetime\nimport time\nfrom typing import Optional\nimport grpc\nimport portpicker\nfrom vizier._src.service import vizier_service\nfrom vizier._src.service import vizier_service_pb2_grpc\nfrom vizier._src.service import stubs_util\nfrom vizier._src.service import pythia_service\nfrom vizier._src.service import pythia_service_pb2_grpc\n\nclass DefaultVizierServer:\n    def __init__(self, host: str = 'localhost', database_url: Optional[str] = None, \n                 policy_factory=None, early_stop_recycle_period: datetime.timedelta = datetime.timedelta(seconds=0.1)):\n        self._host = host\n        self._database_url = database_url\n        self._policy_factory = policy_factory or service_policy_factory_lib.DefaultPolicyFactory\n        self._early_stop_recycle_period = early_stop_recycle_period\n        self._port = portpicker.pick_unused_port()\n        \n        # Initialize non-user-settable fields\n        self._servicer = None\n        self._server = None\n        self.stub = None\n\n    @property\n    def datastore(self):\n        return self._servicer.datastore\n\n    @property\n    def endpoint(self):\n        return f'{self._host}:{self._port}'\n\n    def start(self):\n        # Setup Vizier server\n        self._servicer = vizier_service.VizierServicer(\n            database_url=self._database_url,\n            early_stop_recycle_period=self._early_stop_recycle_period\n        )\n        self._server = grpc.server(futures.ThreadPoolExecutor(max_workers=30))\n        vizier_service_pb2_grpc.add_VizierServiceServicer_to_server(\n            self._servicer, self._server\n        )\n        self._server.add_insecure_port(self.endpoint)\n        self._server.start()\n        self.stub = stubs_util.create_vizier_server_stub(self.endpoint)\n\n        # Setup default Pythia Service\n        default_pythia_service = pythia_service.PythiaServicer(\n            self._servicer, policy_factory=self._policy_factory\n        )\n        self._servicer.default_pythia_service = default_pythia_service\n\n    def wait_for_early_stop_recycle_period(self):\n        time.sleep(self._early_stop_recycle_period.total_seconds())",
    "Code_level": "Class-level",
    "FSMID_for_test": 74,
    "right_result": "```python\nimport grpc\nimport datetime\nfrom typing import Optional, Any\n\nclass DefaultVizierServer:\n    def __init__(self, host: str = 'localhost', database_url: Optional[str] = None, policy_factory=None, early_stop_recycle_period: datetime.timedelta = datetime.timedelta(seconds=0.1)) -> None:\n        self._host = host\n        self._database_url = database_url\n        self._policy_factory = policy_factory if policy_factory else service_policy_factory_lib.DefaultPolicyFactory\n        self._early_stop_recycle_period = early_stop_recycle_period\n        self._port = 0\n        self._servicer = None\n        self._server = None\n        self.stub = None\n\n    @property\n    def datastore(self) -> Any:\n        return self._servicer.datastore\n\n    @property\n    def endpoint(self) -> str:\n        return f'{self._host}:{self._port}'\n\n    def start(self) -> None:\n        self._server = grpc.server(futures.ThreadPoolExecutor(max_workers=10))\n        self._servicer = vizier_service.VizierService(self._policy_factory)\n        vizier_service.add_VizierServicer_to_server(self._servicer, self._server)\n        self._server.add_insecure_port('[::]:0')\n        self._port = self._server.server_port\n        self._server.start()\n        self._servicer.initialize()\n\n    def wait_for_early_stop_recycle_period(self) -> None:\n        time.sleep(self._early_stop_recycle_period.total_seconds())\n```"
  },
  {
    "Task_id": 502,
    "Instruction": "Task Description: Create a gRPC server in Python that handles incoming requests using a thread pool for concurrency and implements a dummy API for testing purposes.\n\nClass Description: The DummyServer class implements a gRPC server that listens on a specified address and handles incoming requests through a servicer class. It manages server lifecycle and provides a simple echo service.\n\nAttributes:\n- server: [grpc.Server] - The gRPC server instance configured with thread pool executor and message size limits\n- bind_address: [str] - The network address and port where the server will listen for incoming connections\n\nMethods:\n- __init__: [Name](bind_address: str) -> None - Initializes the gRPC server with thread pool executor, configures message size limits, and binds to the specified address\n- __enter__: [Name]() -> DummyServer - Starts the server and returns the instance (for context manager usage)\n- __exit__: [Name](exc_type, exc_val, exc_tb) -> None - Stops the server when exiting context (for context manager usage)\n- GNESServicer.dummyAPI: [Name](request, context) -> request - Servicer method that echoes back received requests (implements dummy API)",
    "Canonical_solution": "import os\nimport grpc\nfrom concurrent.futures import ThreadPoolExecutor\nfrom tests.proto_s import dummy_pb2_grpc\n\nclass DummyServer:\n    def __init__(self, bind_address):\n        self.server = grpc.server(\n            ThreadPoolExecutor(max_workers=1),\n            options=[('grpc.max_send_message_length', 1 * 1024 * 1024),\n                     ('grpc.max_receive_message_length', 1 * 1024 * 1024)])\n        dummy_pb2_grpc.add_DummyGRPCServiceServicer_to_server(self.GNESServicer(), self.server)\n        self.bind_address = bind_address\n        self.server.add_insecure_port(self.bind_address)\n\n    def __enter__(self):\n        self.server.start()\n        print('dummy server is listening at: %s' % self.bind_address)\n        return self\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        self.server.stop(None)\n\n    class GNESServicer(dummy_pb2_grpc.DummyGRPCServiceServicer):\n        def dummyAPI(self, request, context):\n            print('the dummy server received something: %s' % request)\n            return request",
    "Code_level": "Class-level",
    "FSMID_for_test": 74,
    "right_result": "```python\nimport grpc\nimport concurrent\nfrom concurrent import futures\n\nclass DummyServer:\n    def __init__(self, bind_address: str) -> None:\n        self.server = grpc.server(futures.ThreadPoolExecutor(max_workers=10))\n        self.bind_address = bind_address\n\n    def __enter__(self):\n        self.server.add_insecure_port(self.bind_address)\n        self.server.start()\n        return self\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        self.server.stop(0)\n\nclass GNESServicer(grpc.ServiceBase):\n    def dummyAPI(self, request, context):\n        return request\n```"
  },
  {
    "Task_id": 51,
    "Instruction": "Task Description: Create an asynchronous function to check the health status of a server by querying its live and ready endpoints.\n\nFunction Description: The function uses httpx.AsyncClient to asynchronously send HTTP GET requests to a server's health endpoints (/v1/health/live and /v1/health/ready). It returns a tuple indicating whether the server is live and ready based on the HTTP status codes received.\n\nInput: \n- url (str): The base URL of the server to check\n\nOutput: \n- Tuple[bool, bool]: A tuple where the first element indicates if the server is live (HTTP 200 status) and the second element indicates if the server is ready (HTTP 200 status)",
    "Canonical_solution": "from typing import Tuple\nimport httpx\n\nasync def _get_health(url: str) -> Tuple[bool, bool]:\n    \"\"\"\n    Query {url}/v1/health/{live,ready} to check if the server is running and ready\n\n    Args:\n        url (str): URL of the server\n\n    Returns:\n        Tuple[bool, bool]: (is_live, is_ready)\n    \"\"\"\n    async with httpx.AsyncClient() as client:\n        live = await client.get(f\"{url}/v1/health/live\")\n        ready = await client.get(f\"{url}/v1/health/ready\")\n        return live.status_code == 200, ready.status_code == 200",
    "Code_level": "Function-level",
    "FSMID_for_test": 59,
    "right_result": "```python\nimport httpx\n\nasync def check_server_health(url: str) -> tuple[bool, bool]:\n    async with httpx.AsyncClient() as client:\n        live_response = await client.get(f\"{url}/v1/health/live\")\n        ready_response = await client.get(f\"{url}/v1/health/ready\")\n        return live_response.status_code == 200, ready_response.status_code == 200\n```"
  },
  {
    "Task_id": 52,
    "Instruction": "Task Description: Create an asynchronous function to send an HTTP POST request with candidate and role data to a specified endpoint, and return the response as a dictionary.\n\nFunction Description: The function uses httpx.AsyncClient to asynchronously send a POST request containing candidate information and role details to a server endpoint. It handles the response by converting it to JSON format and returns the result. The function is designed to be non-blocking and should be called within an async context.\n\nInput:\n- candidates: list[dict] - A list of candidate dictionaries, each containing:\n  - name: str - The candidate's name\n  - self_identified_seniority: int - The candidate's self-assessed seniority level\n  - bio: str - The candidate's biography/description\n- role: dict - A dictionary containing role details:\n  - title: str - The job title\n  - desired_seniority: int - The desired seniority level for the role\n  - description: str - The job description\n\nOutput:\n- dict - The JSON-decoded response from the server containing the processed results",
    "Canonical_solution": "import asyncio\nimport json\nimport httpx\n\nasync def send_http_request(candidates: list, role: dict) -> dict:\n    async with httpx.AsyncClient() as client:\n        response = await client.post(\n            \"http://localhost:8000/interview\",\n            json={\"candidates\": candidates, \"role\": role},\n        )\n        result = response.json()\n        return result\n\nif __name__ == \"__main__\":\n    candidates = [\n        {\n            \"name\": \"Alice\",\n            \"self_identified_seniority\": 3,\n            \"bio\": \"10 years with postgres, 5 years with python, 3 years with django.\",\n        },\n        {\n            \"name\": \"Bob\",\n            \"self_identified_seniority\": 1,\n            \"bio\": \"I just graduated from a coding bootcamp and I'm ready to take on the world!\",\n        },\n        {\n            \"name\": \"Charlie\",\n            \"self_identified_seniority\": 2,\n            \"bio\": \"graduated 2 years ago and i can make you a react app in no time\",\n        },\n        {\n            \"name\": \"David\",\n            \"self_identified_seniority\": 3,\n            \"bio\": \"i just been riding that SCRUM wave for 10 years fam\",\n        },\n    ]\n    role = {\n        \"title\": \"Senior Software Engineer\",\n        \"desired_seniority\": 3,\n        \"description\": \"Build and maintain a large-scale web application with a team of 10+ engineers.\",\n    }\n    result = asyncio.run(send_http_request(candidates, role))\n    print(json.dumps(result, indent=2))",
    "Code_level": "Function-level",
    "FSMID_for_test": 59,
    "right_result": "```python\nimport httpx\nimport json\n\nasync def send_post_request(candidates, role):\n    async with httpx.AsyncClient() as client:\n        response = await client.post('http://example.com/api/submit', json={\n            'candidates': candidates,\n            'role': role\n        })\n        return json.loads(response.text)\n```"
  },
  {
    "Task_id": 53,
    "Instruction": "Task Description: Create an asynchronous function to fetch data from a specified URL using HTTP GET request with customizable headers, handling potential HTTP errors.\n\nFunction Description: The function uses httpx library with asyncio to make asynchronous HTTP requests. It creates an async client, sends a GET request to the provided URL, checks for successful response status, and returns the response object. Default headers are provided but can be overridden.\n\nInput:\n- url: str - The target URL to fetch data from\n- headers: dict (optional) - Custom headers to include in the request (defaults to common browser User-Agent if not provided)\n\nOutput:\n- Returns: httpx.Response - The HTTP response object containing status code, headers, and content\n- Raises: httpx.HTTPStatusError - If the response status code indicates an error (4xx or 5xx)",
    "Canonical_solution": "import os\nimport httpx\nimport aiofiles\n\nasync def fetch_data(url: str, headers: dict = None):\n    headers = {\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'\n    } if headers is None else headers.get('headers')\n    async with httpx.AsyncClient() as client:\n        response = await client.get(url, headers=headers)\n        response.raise_for_status()  # Ensure successful response\n        return response",
    "Code_level": "Function-level",
    "FSMID_for_test": 59,
    "right_result": "import httpx\nimport asyncio\n\nasync def fetch_data(url, headers=None):\n    if headers is None:\n        headers = {\n            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3'\n        }\n    async with httpx.AsyncClient(headers=headers) as client:\n        response = await client.get(url)\n        response.raise_for_status()\n        return response"
  },
  {
    "Task_id": 54,
    "Instruction": "Task Description: Implement an asynchronous function to fetch and filter GitHub contributors for a repository, then retrieve their detailed user information.\n\nFunction Description: This function asynchronously retrieves contributors from a GitHub repository using the GitHub API, filters them based on specific criteria (user type, ignored logins, and acknowledgements), and then fetches detailed information for each qualifying contributor. The function uses httpx for asynchronous HTTP requests and handles pagination to retrieve all contributors.\n\nInput:\n- auth: Tuple[str, str] - A tuple containing GitHub username and password/token for authentication\n- GITHUB_API_CONTRIBUTORS: str - The GitHub API endpoint for contributors\n- PER_PAGE: int - Number of contributors to fetch per page\n- GITHUB_USER_TYPE: str - The type of contributor to filter for (e.g., 'User')\n- IGNORED_AUTHOR_LOGINS: List[str] - List of GitHub logins to ignore\n- ACKNOWLEDGEMENTS: str - String containing acknowledged contributors to exclude\n\nOutput:\n- List[Dict] - A list of dictionaries containing detailed user information for unacknowledged contributors who meet the filtering criteria",
    "Canonical_solution": "import asyncio\nimport httpx\n\nasync def main():\n    auth = (input(\"Github Username: \"), getpass())\n    async with httpx.AsyncClient() as client:\n        page = 0\n        results = []\n        contributors = []\n        while not page or len(results) == PER_PAGE:\n            page += 1\n            response = await client.get(\n                f\"{GITHUB_API_CONTRIBUTORS}?per_page={PER_PAGE}&page={page}\", auth=auth\n            )\n            results = response.json()\n            contributors.extend(\n                (\n                    contributor\n                    for contributor in results\n                    if contributor[\"type\"] == GITHUB_USER_TYPE\n                    and contributor[\"login\"] not in IGNORED_AUTHOR_LOGINS\n                    and f\"@{contributor['login'].lower()}\" not in ACKNOWLEDGEMENTS\n                )\n            )\n\n        unacknowledged_users = await asyncio.gather(\n            *(client.get(contributor[\"url\"], auth=auth) for contributor in contributors)\n        )\n        unacknowledged_users = [request.json() for request in unacknowledged_users]",
    "Code_level": "Function-level",
    "FSMID_for_test": 59,
    "right_result": "```python\nimport httpx\nimport asyncio\nfrom typing import List, Dict\n\nasync def fetch_contributors(auth: tuple, GITHUB_API_CONTRIBUTORS: str, PER_PAGE: int, GITHUB_USER_TYPE: str, IGNORED_AUTHOR_LOGINS: List[str], ACKNOWLEDGEMENTS: str) -> List[Dict]:\n    async with httpx.AsyncClient(auth=auth) as client:\n        contributors = []\n        page = 1\n        while True:\n            response = await client.get(f\"{GITHUB_API_CONTRIBUTORS}?per_page={PER_PAGE}&page={page}\")\n            response.raise_for_status()\n            data = response.json()\n            if not data:\n                break\n            for contributor in data:\n                if contributor['type'] == GITHUB_USER_TYPE and contributor['login'] not in IGNORED_AUTHOR_LOGINS and contributor['login'] not in ACKNOWLEDGEMENTS:\n                    user_response = await client.get(f\"https://api.github.com/users/{contributor['login']}\")\n                    user_response.raise_for_status()\n                    contributors.append(user_response.json())\n            page += 1\n        return contributors\n```"
  },
  {
    "Task_id": 6,
    "Instruction": "Task Description: Implement an HTTP connection pool class to manage and reuse HTTP connections efficiently, supporting both HTTP and HTTPS protocols with configurable pooling behavior.\n\nClass Description: HTTPConnectionPool is a connection pooling implementation that manages a pool of HTTP/HTTPS connections to a specific host, allowing for connection reuse and efficient resource management. It handles connection creation, retrieval, and release with support for timeouts, retries, and proxy configurations.\n\nAttributes:\n- scheme: str - The URL scheme (either \"http\" or \"https\")\n- ConnectionCls: class - The connection class to use (HTTPConnection or HTTPSConnection)\n- QueueCls: class - The queue class to use for connection pooling (default: queue.LifoQueue)\n- host: str - The target host for connections\n- port: Optional[int] - The target port for connections\n- timeout: Union[Timeout, float, None] - Connection and read timeout settings\n- retries: Union[Retry, bool, int, None] - Retry configuration for failed requests\n- pool: queue.LifoQueue - The connection pool queue\n- block: bool - Whether to block when pool is full/empty\n- proxy: Optional[Url] - Proxy configuration\n- proxy_headers: Optional[Mapping[str, str]] - Headers for proxy connections\n- headers: Optional[Mapping[str, str]] - Default headers for requests\n- conn_kw: Any - Additional connection keyword arguments\n\nMethods:\n- __init__(host: str, port: Optional[int] = None, timeout: Union[Timeout, float, None] = None, maxsize: int = 1, block: bool = False, headers: Optional[Mapping[str, str]] = None, retries: Union[Retry, bool, int, None] = None, _proxy: Optional[Url] = None, _proxy_headers: Optional[Mapping[str, str]] = None, **conn_kw: Any) -> None - Initializes the connection pool with given configuration\n- _new_conn() -> HTTPConnection - Creates a new connection instance\n- _get_conn(timeout: Optional[float] = None) -> HTTPConnection - Retrieves a connection from the pool or creates a new one\n- _put_conn(conn: Optional[HTTPConnection]) -> None - Returns a connection to the pool\n- _make_request(conn: HTTPConnection, method: str, url: str, body: Optional[Any] = None, headers: Optional[Mapping[str, str]] = None, retries: Optional[Retry] = None, timeout: Union[Timeout, float, None] = None, **response_kw: Any) -> BaseHTTPResponse - Makes an HTTP request using the given connection\n- urlopen(method: str, url: str, body: Optional[Any] = None, headers: Optional[Mapping[str, str]] = None, retries: Optional[Retry] = None, redirect: bool = True, assert_same_host: bool = True, timeout: Union[Timeout, float, None] = None, pool_timeout: Optional[int] = None, **response_kw: Any) -> BaseHTTPResponse - Main method to execute HTTP requests using pooled connections\n- _close_pool_connections(pool: queue.LifoQueue) -> None - Closes all connections in the pool\n- close() -> None - Closes the connection pool and all its connections",
    "Canonical_solution": "from socket import timeout as SocketTimeout\nfrom types import TracebackType\nfrom typing import Any, Mapping, Optional, Union\nimport queue\nimport weakref\nfrom .connection import HTTPConnection, HTTPSConnection\nfrom .exceptions import (\n    ClosedPoolError,\n    EmptyPoolError,\n    FullPoolError,\n    HostChangedError,\n    LocationValueError,\n    MaxRetryError,\n    NewConnectionError,\n    ProtocolError,\n    ProxyError,\n    ReadTimeoutError,\n    SSLError,\n    TimeoutError,\n)\nfrom .response import BaseHTTPResponse\nfrom .util.connection import is_connection_dropped\nfrom .util.proxy import connection_requires_http_tunnel\nfrom .util.retry import Retry\nfrom .util.timeout import Timeout\nfrom .util.url import Url, parse_url\nfrom .util.util import to_str\n\nclass HTTPConnectionPool:\n    scheme = \"http\"\n    ConnectionCls = HTTPConnection\n    QueueCls = queue.LifoQueue\n\n    def __init__(\n        self,\n        host: str,\n        port: Optional[int] = None,\n        timeout: Union[Timeout, float, None] = None,\n        maxsize: int = 1,\n        block: bool = False,\n        headers: Optional[Mapping[str, str]] = None,\n        retries: Union[Retry, bool, int, None] = None,\n        _proxy: Optional[Url] = None,\n        _proxy_headers: Optional[Mapping[str, str]] = None,\n        **conn_kw: Any,\n    ):\n        if not host:\n            raise LocationValueError(\"No host specified.\")\n\n        self.host = host\n        self.port = port\n        self.timeout = Timeout.from_float(timeout) if not isinstance(timeout, Timeout) else timeout\n        self.retries = retries if retries is not None else Retry.DEFAULT\n        self.pool = self.QueueCls(maxsize)\n        self.block = block\n        self.proxy = _proxy\n        self.proxy_headers = _proxy_headers or {}\n        self.headers = headers or {}\n        self.conn_kw = conn_kw\n\n        for _ in range(maxsize):\n            self.pool.put(None)\n\n        weakref.finalize(self, self._close_pool_connections, self.pool)\n\n    def _new_conn(self) -> HTTPConnection:\n        return self.ConnectionCls(\n            host=self.host,\n            port=self.port,\n            timeout=self.timeout.connect_timeout,\n            **self.conn_kw,\n        )\n\n    def _get_conn(self, timeout: Optional[float] = None) -> HTTPConnection:\n        try:\n            conn = self.pool.get(block=self.block, timeout=timeout)\n        except queue.Empty:\n            if self.block:\n                raise EmptyPoolError(self, \"Pool is empty and blocking is enabled.\")\n            conn = self._new_conn()\n\n        if conn and is_connection_dropped(conn):\n            conn.close()\n            conn = self._new_conn()\n\n        return conn or self._new_conn()\n\n    def _put_conn(self, conn: Optional[HTTPConnection]) -> None:\n        try:\n            self.pool.put(conn, block=False)\n        except queue.Full:\n            if conn:\n                conn.close()\n\n    def _make_request(\n        self,\n        conn: HTTPConnection,\n        method: str,\n        url: str,\n        body: Optional[Any] = None,\n        headers: Optional[Mapping[str, str]] = None,\n        retries: Optional[Retry] = None,\n        timeout: Union[Timeout, float, None] = None,\n        **response_kw: Any,\n    ) -> BaseHTTPResponse:\n        timeout_obj = self.timeout if timeout is None else Timeout.from_float(timeout)\n        \n        try:\n            conn.request(\n                method,\n                url,\n                body=body,\n                headers=headers,\n            )\n            response = conn.getresponse()\n            response._pool = self\n            return response\n        except (SocketTimeout, BaseSSLError, OSError) as e:\n            conn.close()\n            raise\n\n    def urlopen(\n        self,\n        method: str,\n        url: str,\n        body: Optional[Any] = None,\n        headers: Optional[Mapping[str, str]] = None,\n        retries: Optional[Retry] = None,\n        redirect: bool = True,\n        assert_same_host: bool = True,\n        timeout: Union[Timeout, float, None] = None,\n        pool_timeout: Optional[int] = None,\n        **response_kw: Any,\n    ) -> BaseHTTPResponse:\n        conn = None\n        try:\n            conn = self._get_conn(timeout=pool_timeout)\n            response = self._make_request(\n                conn,\n                method,\n                url,\n                body=body,\n                headers=headers,\n                retries=retries,\n                timeout=timeout,\n                **response_kw,\n            )\n            return response\n        except (EmptyPoolError, MaxRetryError, HostChangedError) as e:\n            raise\n        except (TimeoutError, HTTPException, OSError) as e:\n            if conn:\n                conn.close()\n            raise\n        finally:\n            if conn:\n                self._put_conn(conn)\n\n    def _close_pool_connections(self, pool: queue.LifoQueue) -> None:\n        try:\n            while True:\n                conn = pool.get(block=False)\n                if conn:\n                    conn.close()\n        except queue.Empty:\n            pass\n\n    def close(self) -> None:\n        if self.pool:\n            self._close_pool_connections(self.pool)\n            self.pool = None",
    "Code_level": "Class-level",
    "FSMID_for_test": 56,
    "right_result": "```python\nimport queue\nimport urllib.parse\nfrom http.client import HTTPConnection, HTTPSConnection\nfrom urllib.request import BaseHTTPResponse\nfrom urllib.error import URLError, HTTPError\nfrom typing import Optional, Union, Mapping, Any\n\nclass Retry:\n    def __init__(self, retries: int = 3, backoff_factor: float = 0.3):\n        self.retries = retries\n        self.backoff_factor = backoff_factor\n\nclass Timeout:\n    def __init__(self, connect: float = 30, read: float = 30):\n        self.connect = connect\n        self.read = read\n\nclass HTTPConnectionPool:\n    def __init__(self, host: str, port: Optional[int] = None, timeout: Union[Timeout, float, None] = None, maxsize: int = 1, block: bool = False, headers: Optional[Mapping[str, str]] = None, retries: Union[Retry, bool, int, None] = None, _proxy: Optional[Url] = None, _proxy_headers: Optional[Mapping[str, str]] = None, **conn_kw: Any) -> None:\n        self.scheme = urllib.parse.urlparse(host).scheme\n        self.ConnectionCls = HTTPSConnection if self.scheme == 'https' else HTTPConnection\n        self.QueueCls = queue.LifoQueue\n        self.host = host\n        self.port = port\n        self.timeout = timeout\n        self.retries = retries\n        self.pool = self.QueueCls(maxsize=maxsize)\n        self.block = block\n        self.proxy = _proxy\n        self.proxy_headers = _proxy_headers\n        self.headers = headers\n        self.conn_kw = conn_kw\n\n    def _new_conn(self) -> HTTPConnection:\n        return self.ConnectionCls(self.host, self.port or 80, timeout=self.timeout)\n\n    def _get_conn(self, timeout: Optional[float] = None) -> HTTPConnection:\n        if self.pool.empty():\n            if self.block:\n                return self.pool.get(timeout=timeout)\n            else:\n                return self._new_conn()\n        return self.pool.get()\n\n    def _put_conn(self, conn: Optional[HTTPConnection]) -> None:\n        if conn:\n            self.pool.put(conn)\n\n    def _make_request(self, conn: HTTPConnection, method: str, url: str, body: Optional[Any] = None, headers: Optional[Mapping[str, str]] = None, retries: Optional[Retry] = None, timeout: Union[Timeout, float, None] = None, **response_kw: Any) -> BaseHTTPResponse:\n        if retries is None:\n            retries = self.retries\n        if timeout is None:\n            timeout = self.timeout\n        try:\n            conn.request(method, url, body, headers or self.headers)\n            response = conn.getresponse()\n            return response\n        except (HTTPError, URLError) as e:\n            if retries:\n                return self._make_request(conn, method, url, body, headers, retries=retries-1, timeout=timeout, **response_kw)\n            else:\n                raise\n\n    def urlopen(self, method: str, url: str, body: Optional[Any] = None, headers: Optional[Mapping[str, str]] = None, retries: Optional[Retry] = None, redirect: bool = True, assert_same_host: bool = True, timeout: Union[Timeout, float, None] = None, pool_timeout: Optional[int] = None, **response_kw: Any) -> BaseHTTPResponse:\n        conn = self._get_conn(timeout=pool_timeout)\n        response = self._make_request(conn, method, url, body, headers, retries=retries, timeout=timeout, **response_kw)\n        if assert_same_host and response.getheader('Host') != self.host:\n            raise ValueError(\"Redirected to a different host\")\n        return response\n\n    def _close_pool_connections(self, pool: queue.LifoQueue) -> None:\n        while not pool.empty():\n            conn = pool.get()\n            conn.close()\n\n    def close(self) -> None:\n        self._close_pool_connections(self.pool)\n```"
  },
  {
    "Task_id": 66,
    "Instruction": "Task Description: Retrieve information about a specific GitHub project using the GitHub GraphQL API.\n\nFunction Description: This function queries the GitHub GraphQL API to fetch project details (id, title, and number) for a given organization and project title. It authenticates using a GitHub token and returns the project information if found.\n\nInput:\n- github_token: [str] - GitHub personal access token for authentication\n- github_org: [str] - GitHub organization name\n- github_project: [str] - Title of the project to search for\n\nOutput:\n- [dict/None] - Returns a dictionary containing the project's id, title, and number if found, otherwise None. Raises an HTTPError if the request fails.",
    "Canonical_solution": "import requests\nimport os\nimport sys\nfrom datetime import datetime, timedelta\n\n\nGITHUB_GRAPHQL_URL = \"https://api.github.com/graphql\"\n\n\ndef get_github_project_info(github_token, github_org, github_project):\n    headers = {\n        \"Authorization\": f\"Bearer {github_token}\",\n        \"Content-Type\": \"application/json\"\n    }\n    query = '''\n    {\n      organization(login: \"%s\") {\n        projectsV2(first: 20) {\n          nodes {\n            id\n            title\n            number\n          }\n        }\n      }\n    }\n    ''' % (github_org)\n    payload = {\n        \"query\": query\n    }\n\n    response = requests.post(GITHUB_GRAPHQL_URL, headers=headers, json=payload)\n    if response.status_code == 200:\n        # fine project by title\n        nodes = response.json().get(\"data\").get(\"organization\").get(\"projectsV2\").get(\"nodes\")\n        for node in nodes:\n            if node.get(\"title\") == github_project:\n                return node\n    else:\n        response.raise_for_status()",
    "Code_level": "Function-level",
    "FSMID_for_test": 57,
    "right_result": "```python\nimport requests\n\ndef get_github_project_info(github_token, github_org, github_project):\n    url = \"https://api.github.com/graphql\"\n    headers = {\n        \"Authorization\": f\"Bearer {github_token}\",\n        \"Content-Type\": \"application/json\"\n    }\n    query = \"\"\"\n    query($org: String!, $project: String!) {\n        organization(login: $org) {\n            repository(name: $project) {\n                id\n                name\n                nameWithOwner\n            }\n        }\n    }\n    \"\"\"\n    variables = {\n        \"org\": github_org,\n        \"project\": github_project\n    }\n    response = requests.post(url, json={\"query\": query, \"variables\": variables}, headers=headers)\n    if response.status_code == 200:\n        data = response.json()\n        project = data.get(\"data\", {}).get(\"organization\", {}).get(\"repository\")\n        if project:\n            return {\n                \"id\": project[\"id\"],\n                \"title\": project[\"nameWithOwner\"],\n                \"number\": project[\"name\"]\n            }\n    raise requests.HTTPError(response.text)\n```"
  },
  {
    "Task_id": 67,
    "Instruction": "Task Description: Create a function to download financial market data from a specific API endpoint, handling authentication, progress tracking, and error checking during the download process.\n\nFunction Description: The function downloads compressed CSV data from a REST API endpoint for a given exchange, data type, symbol, and date. It streams the download to efficiently handle large files, shows progress using a progress bar, verifies the download completeness, and saves the data to a specified file path. The function includes proper error handling for failed requests or incomplete downloads.\n\nInput:\n- exchange: [str] - The financial exchange identifier (e.g., 'binance')\n- data_type: [str] - The type of market data to download (e.g., 'trades')\n- symbol: [str] - The trading symbol/pair (e.g., 'BTCUSDT')\n- yyyymmdd: [int/str] - The date in YYYYMMDD format\n- filepath: [str] - The local path where the downloaded file should be saved\n- key: [str] - The API authorization key (Bearer token)\n\nOutput:\n- None - The function doesn't return anything but saves the downloaded data to the specified file path\n- Raises RuntimeError if the download fails (either due to HTTP error or incomplete download)",
    "Canonical_solution": "import json\nimport os.path\nimport requests\nfrom datetime import datetime, timedelta\nfrom tqdm import tqdm\n\ndef download(exchange, data_type, symbol, yyyymmdd, filepath, key):\n    yyyymmdd = str(yyyymmdd)\n    url = f'https://datasets.tardis.dev/v1/{exchange}/{data_type}/{yyyymmdd[:4]}/{yyyymmdd[4:6]}/{yyyymmdd[6:]}/{symbol}.csv.gz'\n\n    response = requests.get(url, stream=True, headers={'Authorization': f'Bearer {key}'})\n    if response.status_code != 200:\n        raise RuntimeError('Could not download file')\n\n    total_size = int(response.headers.get('content-length', 0))\n    block_size = 1024\n\n    with tqdm(total=total_size, unit='B', unit_scale=True) as progress_bar:\n        with open(filepath, 'wb') as file:\n            for data in response.iter_content(block_size):\n                progress_bar.update(len(data))\n                file.write(data)\n\n    if total_size != 0 and progress_bar.n != total_size:\n        raise RuntimeError('Could not download file')",
    "Code_level": "Function-level",
    "FSMID_for_test": 57,
    "right_result": "import requests\nfrom tqdm import tqdm\nimport os\n\ndef download_financial_data(exchange, data_type, symbol, yyyymmdd, filepath, key):\n    url = f\"https://{exchange}.api/v1/{data_type}/{symbol}/{yyyymmdd}\"\n    headers = {'Authorization': f'Bearer {key}'}\n    response = requests.get(url, headers=headers, stream=True)\n\n    if response.status_code != 200:\n        raise RuntimeError(f\"Failed to download data: {response.status_code}\")\n\n    total_size_in_bytes = int(response.headers.get('content-length', 0))\n    block_size = 1024  # 1 Kibibyte\n    progress_bar = tqdm(total=total_size_in_bytes, unit='iB', unit_scale=True)\n\n    with open(filepath, 'wb') as file:\n        for data in response.iter_content(block_size):\n            progress_bar.update(len(data))\n            file.write(data)\n\n    progress_bar.close()\n\n    if total_size_in_bytes != 0 and progress_bar.n != total_size_in_bytes:\n        raise RuntimeError(\"Incomplete download\")\n\n    if not os.path.exists(filepath):\n        raise RuntimeError(\"Downloaded file does not exist\")"
  },
  {
    "Task_id": 68,
    "Instruction": "Task Description: Download a comic image from the xkcd website given a specific issue number.\n\nFunction Description: The function downloads an image from the xkcd comic website by first fetching the webpage of the specified issue number, parsing the HTML to extract the image URL, and then downloading the image to the local filesystem. It handles HTTP requests and responses, checks for success status codes, and saves the image using streaming to avoid memory issues with large files.\n\nInput: \n- issue_number: [str] - The issue number of the comic to download (e.g., \"1234\"). This is appended to the base xkcd URL to form the full webpage URL.\n\nOutput: \n- [str] - A success message indicating the downloaded image filename if successful, or an error message if the request fails or the issue number is invalid.",
    "Canonical_solution": "import requests\nfrom bs4 import BeautifulSoup as bs\nimport shutil\n\ndef download_comic_image(issue_number):\n    url = \"https://xkcd.com/\"+ issue_number\n    response = requests.get(url)\n\n    if response.status_code == 200:\n        soup = bs(response.content, 'html.parser')\n        image_link = soup.find_all('img')[2]['src']\n        image_name = image_link.split('/')[-1]\n        image_url = \"https:\" + image_link\n        r = requests.get(image_url, stream=True)\n        \n        if r.status_code == 200:\n            r.raw.decode_content = True\n            with open(image_name, 'wb') as f:\n                shutil.copyfileobj(r.raw, f)\n            return f'Image successfully Downloaded: {image_name}'\n        else:\n            return 'Image Couldn\\'t be retrieved'\n    else:\n        return \"Issue number is invalid\"",
    "Code_level": "Function-level",
    "FSMID_for_test": 57,
    "right_result": "```python\nimport requests\nfrom bs4 import BeautifulSoup\nimport os\n\ndef download_xkcd_comic(issue_number):\n    base_url = f\"https://xkcd.com/{issue_number}/\"\n    response = requests.get(base_url)\n    \n    if response.status_code == 200:\n        soup = BeautifulSoup(response.text, 'html.parser')\n        img_tag = soup.find('img', alt=f\"XKCD # {issue_number}\")\n        if img_tag:\n            img_url = img_tag.get('src')\n            if img_url.startswith('/'):\n                img_url = f\"https://xkcd.com{img_url}\"\n            image_response = requests.get(img_url, stream=True)\n            if image_response.status_code == 200:\n                img_name = img_url.split('/')[-1]\n                with open(img_name, 'wb') as f:\n                    for chunk in image_response.iter_content(chunk_size=8192):\n                        f.write(chunk)\n                return f\"Downloaded {img_name}\"\n            else:\n                return \"Failed to download image\"\n        else:\n            return \"No image found for the given issue number\"\n    else:\n        return \"Failed to retrieve webpage\"\n```"
  },
  {
    "Task_id": 70,
    "Instruction": "Task Description: Implement a function to load and validate tool configurations from remote URLs by making HTTP requests and processing the responses.\n\nFunction Description: The function `load_valid_tools` takes a dictionary of tool mappings and attempts to fetch each tool's configuration from a remote server. It constructs URLs by appending \".well-known/ai-plugin.json\" to each base URL in the input dictionary. For each successful HTTP GET request (status code 200), it parses the JSON response and adds it to the output dictionary. Failed requests are logged as warnings.\n\nInput: \n- tools_mappings: [dict] - A dictionary where keys are tool identifiers and values are base URLs for the tools' configuration endpoints.\n\nOutput: \n- tools_to_config: [dict] - A dictionary where keys are the same as the input dictionary, and values are the parsed JSON configurations from successful requests. Tools with failed requests are excluded.",
    "Canonical_solution": "import requests\nimport os\nfrom bmtools import get_logger\n\nlogger = get_logger(__name__)\n\ndef load_valid_tools(tools_mappings):\n    tools_to_config = {}\n    for key in tools_mappings:\n        get_url = tools_mappings[key]+\".well-known/ai-plugin.json\"\n        \n        response = requests.get(get_url)\n\n        if response.status_code == 200:\n            tools_to_config[key] = response.json()\n        else:\n            logger.warning(\"Load tool {} error, status code {}\".format(key, response.status_code))\n\n    return tools_to_config",
    "Code_level": "Function-level",
    "FSMID_for_test": 57,
    "right_result": "```python\nimport requests\n\ndef load_valid_tools(tools_mappings):\n    tools_to_config = {}\n    for tool_id, base_url in tools_mappings.items():\n        url = f\"{base_url}.well-known/ai-plugin.json\"\n        try:\n            response = requests.get(url)\n            if response.status_code == 200:\n                tools_to_config[tool_id] = response.json()\n        except requests.RequestException as e:\n            print(f\"Warning: Failed to fetch configuration for {tool_id}: {e}\")\n    return tools_to_config\n```"
  },
  {
    "Task_id": 72,
    "Instruction": "Task Description: Create a Python function that interacts with two different APIs: one for text-to-image generation (Hugging Face) and another for cloud storage (Firebase). The function should first generate an image from text using Hugging Face's API, then upload the resulting image to Firebase Storage.\n\nFunction Description: The function should take a text prompt as input, use it to generate an image via Hugging Face's API, and then upload that image to Firebase Storage. It should handle API errors gracefully and return the Firebase URL of the uploaded image.\n\nInput:\n- prompt (str): The text prompt to be converted into an image\n- destination_path (str): The path where the image should be stored in Firebase Storage\n\nOutput:\n- str: The Firebase Storage URL of the uploaded image, or None if either API call fails\n\nTask Description: Create a Python class that encapsulates the functionality for interacting with Hugging Face's text-to-image API and Firebase Storage API.\n\nClass Description: The class should manage API connections and provide methods for generating images from text and storing them in cloud storage. It should store necessary API credentials and configuration.\n\nAttributes:\n- HUGGING_FACE_API_URL (str): The endpoint URL for Hugging Face's text-to-image API\n- FIREBASE_API_URL (str): The base URL for Firebase Storage API\n- headers (dict): Authorization headers for Hugging Face API\n- API_KEY_PARAM (str): The API key parameter for Firebase requests\n- FIREBASE_STORAGE_BUCKET (str): The name of the Firebase Storage bucket\n\nMethods:\n- query(payload: dict) -> bytes: Sends a request to Hugging Face API with the given payload and returns the image data\n- upload_to_firebase_storage(image_data: bytes, destination_path: str) -> str: Uploads image data to Firebase Storage and returns the download URL\n- generate_and_store_image(prompt: str, destination_path: str) -> str: Combines both operations (generation and storage) into a single method",
    "Canonical_solution": "import requests\nfrom pydantic import Field\n\nHUGGING_FACE_API_URL = \"https://api-inference.huggingface.co/models/prompthero/openjourney-v4\"\nheaders = {\"Authorization\": f\"Bearer {HUGGING_FACE_TOKEN}\"}\nFIREBASE_API_URL = f\"https://firebasestorage.googleapis.com/v0/b/{FIREBASE_STORAGE_BUCKET}/o\"\nAPI_KEY_PARAM = f\"key={FIREBASE_API_KEY}\"\n\ndef query(payload):\n    \"\"\"\n    Queries the Hugging Face API to convert text to an image.\n    Args:\n        payload (dict): Input payload for the Hugging Face API.\n    Returns:\n        bytes: Image data.\n    \"\"\"\n    try:\n        response = requests.post(HUGGING_FACE_API_URL, headers=headers, json=payload, timeout=40)\n        return response.content\n    except requests.exceptions.RequestException as e:\n        print(f\"Error from Hugging Face API: {e}\")\n        return None\n\ndef upload_to_firebase_storage(image_data, destination_path):\n    \"\"\"\n    Uploads image data to Firebase Storage.\n    Args:\n        image_data (bytes): Image data to be uploaded.\n        destination_path (str): Path where the image will be stored.\n    Returns:\n        str: Firebase URL of the uploaded image.\n    \"\"\"\n    upload_url = f\"{FIREBASE_API_URL}/{destination_path}?{API_KEY_PARAM}\"\n    headers = {\"Content-Type\": \"image/png\"}\n\n    response = requests.post(upload_url, headers=headers, data=image_data)\n\n    if response.status_code == 200:\n        download_url = response.json().get(\"downloadTokens\", \"\")\n        firebase_url = f\"https://firebasestorage.googleapis.com/v0/b/{FIREBASE_STORAGE_BUCKET}/o/{destination_path}?alt=media&token={download_url}\"\n        return firebase_url\n    else:\n        print(\"Error uploading to Firebase Storage:\", response.content)\n        return None",
    "Code_level": "Function-level",
    "FSMID_for_test": 57,
    "right_result": "```python\nimport requests\nfrom google.cloud import storage\n\nclass TextToImageStorage:\n    HUGGING_FACE_API_URL = \"https://api.huggingface.co/stable-diffusion\"\n    FIREBASE_API_URL = \"https://firebasedatabase.googleapis.com/v1\"\n    API_KEY_PARAM = \"uploadFile\"\n    FIREBASE_STORAGE_BUCKET = \"your-bucket-name\"\n\n    def __init__(self, headers, api_key):\n        self.headers = headers\n        self.api_key = api_key\n        self.storage_client = storage.Client()\n\n    def query(self, payload):\n        response = requests.post(self.HUGGING_FACE_API_URL, headers=self.headers, json=payload)\n        if response.status_code == 200:\n            return response.content\n        else:\n            response.raise_for_status()\n\n    def upload_to_firebase_storage(self, image_data, destination_path):\n        bucket = self.storage_client.bucket(self.FIREBASE_STORAGE_BUCKET)\n        blob = bucket.blob(destination_path)\n        blob.upload_from_string(image_data, content_type='image/png')\n        return blob.public_url\n\n    def generate_and_store_image(self, prompt, destination_path):\n        payload = {\"prompt\": prompt}\n        try:\n            image_data = self.query(payload)\n            firebase_url = self.upload_to_firebase_storage(image_data, destination_path)\n            return firebase_url\n        except Exception as e:\n            return None\n```"
  },
  {
    "Task_id": 73,
    "Instruction": "Task Description: Implement HTTP client functions to interact with the Augie video creation API, including creating videos and checking their status.\n\nFunction Description: The first function creates a video on the Augie platform by sending a POST request with the provided parameters. The second function checks the status of a video creation process by sending a GET request with the video ID.\n\nInput: \n1. For create_augie: \n   - params: dict - A dictionary containing video creation parameters (e.g., script, voice settings, etc.)\n2. For get_augie_status: \n   - augie_id: str - The unique identifier of the Augie video to check\n\nOutput:\n1. For create_augie: \n   - dict - The API response containing video creation details if successful (status code 201)\n   - Exception - If the request fails (status code other than 201)\n2. For get_augie_status: \n   - dict - A status dictionary with either {\"status\": \"completed\", \"video_url\": [url]} or {\"status\": \"processing\"}\n   - Exception - If the request fails (status code other than 200)",
    "Canonical_solution": "@func.register_function(\n  metadata={\"description\": \"Creates a video on Augie platform.\"},\n  key_dependencies=[\"augie_api_key\"],\n  imports={\"name\": \"requests\", \"lib\": \"requests\"}\n)\ndef create_augie(params):\n  \"\"\"Function to create a video on Augie platform with parameters.\"\"\"\n  API_KEY = globals()['augie_api_key']\n  BASE_URL = 'https://beta.api.augie.studio/v1'\n\n  headers = {\n      'x-api-key': API_KEY,\n      'Content-Type': 'application/json'\n  }\n\n  import requests\n  response = requests.post(f'{BASE_URL}/augies', json=params, headers=headers)\n\n  if response.status_code == 201:\n      return response.json()  # Returns the creation response\n  else:\n      raise Exception(f\"Failed to create Augie: {response.text}\")\n\n\n@func.register_function(\n  metadata={\"description\": \"Checks the status of the created video.\"},\n  key_dependencies=[\"augie_api_key\"],\n  imports={\"name\": \"requests\", \"lib\": \"requests\"}\n)\ndef get_augie_status(augie_id):\n  \"\"\"Function to check the status of an Augie video creation.\"\"\"\n  API_KEY = globals()['augie_api_key']\n  BASE_URL = 'https://beta.api.augie.studio/v1'\n\n  headers = {\n      'x-api-key': API_KEY\n  }\n\n  import requests\n  response = requests.get(f'{BASE_URL}/augies/{augie_id}/status', headers=headers)\n\n  if response.status_code == 200:\n      status_data = response.json()\n      if status_data.get('status') == 'succeeded' and 'output' in status_data and 'video' in status_data['output']:\n          return {\"status\": \"completed\", \"video_url\": status_data['output']['video']}\n      else:\n          return {\"status\": \"processing\"}\n  else:\n      raise Exception(f\"Failed to get Augie status: {response.text}\")",
    "Code_level": "Function-level",
    "FSMID_for_test": 57,
    "right_result": "```python\nimport requests\n\ndef create_augie(params):\n    response = requests.post('https://api.augie.com/videos', json=params)\n    if response.status_code == 201:\n        return response.json()\n    else:\n        raise Exception(f\"Failed to create video: {response.status_code}\")\n\ndef get_augie_status(augie_id):\n    response = requests.get(f'https://api.augie.com/videos/{augie_id}')\n    if response.status_code == 200:\n        return response.json()\n    else:\n        raise Exception(f\"Failed to get video status: {response.status_code}\")\n```"
  },
  {
    "Task_id": 76,
    "Instruction": "Task Description: Create a Python function that interacts with the Face++ API to perform face detection on an image, including face count verification and extraction of facial attributes.\n\nFunction Description: The function uses the Face++ API to detect faces in an image, verifies that exactly one face is present, and extracts facial rectangle coordinates and headpose information. It handles various API response status codes and raises appropriate exceptions for errors.\n\nInput:\n- ctx: A context object containing:\n  - origin_image: The original image to be processed (expected to be an image object)\n\nOutput:\n- Modifies the ctx object by adding:\n  - face[\"rectangle\"]: Tuple containing (left, top, width, height) coordinates of the detected face\n  - face[\"roll_angle\"]: The roll angle of the detected face (divided by 2)\n- Raises:\n  - FaceError: When zero or multiple faces are detected\n  - APIError: For various API-related errors (authentication, authorization, bad request, etc.)",
    "Canonical_solution": "import os\nimport requests\nfrom hivision.error import FaceError, APIError\nfrom hivision.utils import resize_image_to_kb_base64\n\ndef detect_face_face_plusplus(ctx):\n    \"\"\"\n    \u57fa\u4e8eFace++ API\u63a5\u53e3\u7684\u4eba\u8138\u68c0\u6d4b\u5904\u7406\u5668\uff0c\u53ea\u8fdb\u884c\u4eba\u8138\u6570\u91cf\u7684\u68c0\u6d4b\n    :param ctx: \u4e0a\u4e0b\u6587\uff0c\u6b64\u65f6\u5df2\u83b7\u53d6\u5230\u539f\u59cb\u56fe\u548c\u62a0\u56fe\u7ed3\u679c\uff0c\u4f46\u662f\u6211\u4eec\u53ea\u9700\u8981\u539f\u59cb\u56fe\n    :raise FaceError: \u4eba\u8138\u68c0\u6d4b\u9519\u8bef\uff0c\u591a\u4e2a\u4eba\u8138\u6216\u8005\u6ca1\u6709\u4eba\u8138\n    :raise APIError: API\u8c03\u7528\u9519\u8bef\n    \"\"\"\n    url = \"https://api-cn.faceplusplus.com/facepp/v3/detect\"\n    api_key = os.getenv(\"FACE_PLUS_API_KEY\")\n    api_secret = os.getenv(\"FACE_PLUS_API_SECRET\")\n\n    image = ctx.origin_image\n    image_base64 = resize_image_to_kb_base64(image, 2000, mode=\"max\")\n\n    files = {\n        \"api_key\": (None, api_key),\n        \"api_secret\": (None, api_secret),\n        \"image_base64\": (None, image_base64),\n        \"return_landmark\": (None, \"1\"),\n        \"return_attributes\": (None, \"headpose\"),\n    }\n\n    response = requests.post(url, files=files)\n    status_code = response.status_code\n    response_json = response.json()\n\n    if status_code == 200:\n        face_num = response_json[\"face_num\"]\n        if face_num == 1:\n            face_rectangle = response_json[\"faces\"][0][\"face_rectangle\"]\n            headpose = response_json[\"faces\"][0][\"attributes\"][\"headpose\"]\n            roll_angle = headpose[\"roll_angle\"] / 2\n\n            ctx.face[\"rectangle\"] = (\n                face_rectangle[\"left\"],\n                face_rectangle[\"top\"],\n                face_rectangle[\"width\"],\n                face_rectangle[\"height\"],\n            )\n            ctx.face[\"roll_angle\"] = roll_angle\n        else:\n            raise FaceError(\n                \"Expected 1 face, but got {}\".format(face_num), len(face_num)\n            )\n    elif status_code == 401:\n        raise APIError(\n            f\"Face++ Status code {status_code} Authentication error: API key and secret do not match.\",\n            status_code,\n        )\n    elif status_code == 403:\n        reason = response_json.get(\"error_message\", \"Unknown authorization error.\")\n        raise APIError(\n            f\"Authorization error: {reason}\",\n            status_code,\n        )\n    elif status_code == 400:\n        error_message = response_json.get(\"error_message\", \"Bad request.\")\n        raise APIError(\n            f\"Bad request error: {error_message}\",\n            status_code,\n        )\n    elif status_code == 413:\n        raise APIError(\n            f\"Face++ Status code {status_code} Request entity too large: The image exceeds the 2MB limit.\",\n            status_code,\n        )",
    "Code_level": "Function-level",
    "FSMID_for_test": 57,
    "right_result": "```python\nimport requests\nimport json\n\nclass FaceError(Exception):\n    pass\n\nclass APIError(Exception):\n    pass\n\ndef detect_face(ctx):\n    api_key = 'YOUR_API_KEY'\n    api_secret = 'YOUR_API_SECRET'\n    image = ctx['origin_image']\n    base_url = 'https://api.faceplusplus.com/v3/detect'\n    headers = {\n        'Content-Type': 'application/json',\n        'Authorization': f'Bearer {api_key}:{api_secret}'\n    }\n    data = {\n        'image_base64': image,\n        'return_attributes': 'face_rectangle,headpose'\n    }\n    response = requests.post(base_url, headers=headers, data=json.dumps(data))\n    if response.status_code != 200:\n        raise APIError(f'API error: {response.status_code} {response.text}')\n    result = response.json()\n    if result['face_num'] != 1:\n        raise FaceError(f'Expected exactly one face, found {result[\"face_num\"]}')\n    face = result['faces'][0]\n    ctx['face'] = {\n        'rectangle': (face['face_rectangle']['left'], face['face_rectangle']['top'], face['face_rectangle']['width'], face['face_rectangle']['height']),\n        'roll_angle': face['headpose']['roll_angle'] / 2\n    }\n```"
  },
  {
    "Task_id": 77,
    "Instruction": "Task Description: Implement a function to check for software updates by querying a GitHub repository's API, comparing versions, and notifying if a new version is available.\n\nFunction Description: The function `check_update()` checks for updates by making HTTP requests to GitHub's API. It handles both stable releases and pre-releases based on configuration, compares version numbers, and provides appropriate notifications/logs about update availability. The function uses external configurations for update preferences and notification settings.\n\nInput: None (uses module-level configuration from `cfg` for settings like update preferences, user agent, and current version)\n\nOutput: None (but has side effects: may log update information and send notifications through the `notif` system)",
    "Canonical_solution": "from tasks.base.fastest_mirror import FastestMirror\nfrom module.logger import log\nfrom module.config import cfg\nfrom module.notification import notif\nfrom packaging.version import parse\nimport requests\n\ndef check_update():\n    try:\n        if cfg.update_prerelease_enable:\n            response = requests.get(FastestMirror.get_github_api_mirror(\"moesnow\", \"March7thAssistant\", False), timeout=10, headers=cfg.useragent)\n        else:\n            response = requests.get(FastestMirror.get_github_api_mirror(\"moesnow\", \"March7thAssistant\"), timeout=10, headers=cfg.useragent)\n        if not cfg.check_update:\n            return\n        if response.status_code == 200:\n            if cfg.update_prerelease_enable:\n                data = response.json()[0]\n            else:\n                data = response.json()\n\n            version = data[\"tag_name\"]\n\n            assert_url = None\n            for asset in data[\"assets\"]:\n                if (cfg.update_full_enable and \"full\" in asset[\"browser_download_url\"]) or \\\n                   (not cfg.update_full_enable and \"full\" not in asset[\"browser_download_url\"]):\n                    assert_url = asset[\"browser_download_url\"]\n                    break\n\n            if assert_url is not None and parse(version.lstrip('v')) > parse(cfg.version.lstrip('v')):\n                notif.notify(cfg.notify_template['NewVersion'].format(version=version))\n                log.info(f\"\u53d1\u73b0\u65b0\u7248\u672c\uff1a{cfg.version}  \u2014\u2014\u2192  {version}\")\n                log.info(data[\"html_url\"])\n            else:\n                log.info(f\"\u5df2\u7ecf\u662f\u6700\u65b0\u7248\u672c\uff1a{cfg.version}\")\n        else:\n            log.warning(\"\u68c0\u6d4b\u66f4\u65b0\u5931\u8d25\")\n            log.debug(response.text)\n    except Exception:\n        pass",
    "Code_level": "Function-level",
    "FSMID_for_test": 57,
    "right_result": "```python\nimport requests\nimport json\nfrom packaging import version\nfrom cfg import UPDATE_PREF, USER_AGENT, CURRENT_VERSION\nfrom notif import notify\n\ndef check_update():\n    repo_owner = 'example'\n    repo_name = 'example-repo'\n    url = f\"https://api.github.com/repos/{repo_owner}/{repo_name}/releases/latest\"\n    headers = {'User-Agent': USER_AGENT}\n    response = requests.get(url, headers=headers)\n    if response.status_code == 200:\n        release_data = response.json()\n        release_tag_name = release_data['tag_name']\n        release_url = release_data['html_url']\n        release_assets = release_data['assets']\n        if UPDATE_PREF['compare_pre_releases'] or not release_data['prerelease']:\n            if version.parse(release_tag_name) > version.parse(CURRENT_VERSION):\n                notify(f\"Update available: {release_tag_name} ({release_url})\")\n        else:\n            for asset in release_assets:\n                if asset['name'].endswith('.zip'):\n                    asset_url = asset['browser_download_url']\n                    notify(f\"Pre-release update available: {release_tag_name} ({asset_url})\")\n```"
  },
  {
    "Task_id": 83,
    "Instruction": "Task Description: Implement a Python class for OAuth 2.0 authentication with the Foursquare API, including methods to generate authorization URLs, retrieve access tokens, and fetch user information.\n\nClass Description: The FoursquareOauthClient class handles OAuth 2.0 authentication flow with Foursquare's API. It manages client credentials, generates authorization URLs, exchanges authorization codes for access tokens, and makes authenticated API requests to fetch user data.\n\nAttributes:\n- AUTHORIZE_URL: [str] - Foursquare's OAuth 2.0 authorization endpoint URL\n- ACCESS_TOKEN_URL: [str] - Foursquare's OAuth 2.0 token exchange endpoint URL\n- REDIRECT_URL: [str] - The redirect URI registered with Foursquare for OAuth callbacks\n- client_id: [str] - The client ID obtained from Foursquare developer portal\n- client_secret: [str] - The client secret obtained from Foursquare developer portal\n- access_token: [str/None] - The access token obtained after successful authentication (None initially)\n\nMethods:\n- get_authorize_url() -> [str] - Generates and returns the authorization URL for user redirection. Takes no parameters.\n- get_access_token(code: str) -> [None] - Exchanges an authorization code for an access token. Takes the authorization code as input and stores the access token internally. Raises an exception if the request fails.\n- get_user_info(api_version: str = '20140806') -> [dict] - Fetches user information from Foursquare API using the stored access token. Takes an optional API version parameter and returns user data as a dictionary. Raises an exception if the request fails.",
    "Canonical_solution": "import urllib\nimport requests\n\nclass FoursquareOauthClient:\n    AUTHORIZE_URL = 'https://foursquare.com/oauth2/authenticate'\n    ACCESS_TOKEN_URL = 'https://foursquare.com/oauth2/access_token'\n    REDIRECT_URL = 'http://localhost:8000/hackathon'\n\n    def __init__(self, client_id, client_secret):\n        self.client_id = client_id\n        self.client_secret = client_secret\n        self.access_token = None\n\n    def get_authorize_url(self):\n        authSettings = {'client_id': self.client_id,\n                        'response_type': 'code',\n                        'redirect_uri': self.REDIRECT_URL}\n        params = urllib.urlencode(authSettings)\n        return self.AUTHORIZE_URL + '?' + params\n\n    def get_access_token(self, code):\n        authSettings = {'client_id': self.client_id,\n                        'client_secret': self.client_secret,\n                        'grant_type': 'authorization_code',\n                        'redirect_uri': self.REDIRECT_URL,\n                        'code': code}\n        params = urllib.urlencode(authSettings)\n        response = requests.get(self.ACCESS_TOKEN_URL + '?' + params)\n\n        if response.status_code != 200:\n            raise Exception('Invalid response,response code: {c}'.format(c=response.status_code))\n\n        self.access_token = response.json()['access_token']\n\n    def get_user_info(self, api_version='20140806'):\n        USER_INFO_API_URL = 'https://api.foursquare.com/v2/users/self'\n        authSettings = {'v': api_version,\n                        'oauth_token': self.access_token}\n        params = urllib.urlencode(authSettings)\n        response = requests.get(USER_INFO_API_URL + '?' + params)\n\n        if response.status_code != 200:\n            raise Exception('Invalid response,response code: {c}'.format(c=response.status_code))\n\n        return response.json()['response']['user']",
    "Code_level": "Class-level",
    "FSMID_for_test": 57,
    "right_result": "```python\nclass FoursquareOauthClient:\n    AUTHORIZE_URL = \"https://foursquare.com/oauth2/authenticate\"\n    ACCESS_TOKEN_URL = \"https://foursquare.com/oauth2/access_token\"\n    REDIRECT_URL = \"https://example.com/callback\"\n\n    def __init__(self, client_id, client_secret):\n        self.client_id = client_id\n        self.client_secret = client_secret\n        self.access_token = None\n\n    def get_authorize_url(self):\n        return f\"{self.AUTHORIZE_URL}?client_id={self.client_id}&response_type=code&redirect_uri={self.REDIRECT_URL}\"\n\n    def get_access_token(self, code):\n        import requests\n        data = {\n            'client_id': self.client_id,\n            'client_secret': self.client_secret,\n            'grant_type': 'authorization_code',\n            'redirect_uri': self.REDIRECT_URL,\n            'code': code\n        }\n        response = requests.post(self.ACCESS_TOKEN_URL, data=data)\n        if response.status_code == 200:\n            self.access_token = response.json().get('access_token')\n        else:\n            raise Exception(\"Failed to retrieve access token\")\n\n    def get_user_info(self, api_version='20140806'):\n        import requests\n        headers = {\n            'Authorization': f'Bearer {self.access_token}'\n        }\n        response = requests.get(f\"https://api.foursquare.com/v2/users/self?oauth_token={self.access_token}&v={api_version}\")\n        if response.status_code == 200:\n            return response.json()\n        else:\n            raise Exception(\"Failed to fetch user information\")\n```"
  },
  {
    "Task_id": 84,
    "Instruction": "Task Description: Implement a Python function to authenticate with the GitHub API using Basic Authentication, handling both regular credentials and two-factor authentication cases.\n\nFunction Description: The function prompts the user for GitHub credentials (username and password) and attempts to authenticate with the GitHub API. If two-factor authentication is detected (status code 401 with X-Github-OTP header), it guides the user to create and use a personal access token instead. The function returns an authentication object that can be used for subsequent API requests.\n\nInput: None (user input is collected interactively)\n\nOutput: requests.auth.HTTPBasicAuth - An authentication object containing either:\n        1. The provided username and password (if 2FA not required)\n        2. A personal access token (if 2FA is required)\n\nTask Description: Implement a Python function to create multiple labels in a GitHub repository using the GitHub API.\n\nFunction Description: The function reads label definitions from a CSV file and creates them in a specified GitHub repository using authenticated API requests. Each label is created via a separate POST request to the GitHub API.\n\nInput:\n1. auth (requests.auth.HTTPBasicAuth) - Authentication object for GitHub API\n2. filename (str, optional) - Path to CSV file containing label definitions (default: 'etc/default_labels.csv')\n\nOutput: None (side effect: creates labels in GitHub repository)",
    "Canonical_solution": "import requests\nfrom requests.auth import HTTPBasicAuth\nimport json\nimport logging\nimport os\nimport app_config\n\nlogging.basicConfig(format=app_config.LOG_FORMAT)\nlogger = logging.getLogger(__name__)\nlogger.setLevel(app_config.LOG_LEVEL)\n\ndef get_auth():\n    \"\"\"\n    Construct a basic auth object from a username and password\n    \"\"\"\n    username = raw_input('Username: ')\n    password = getpass.getpass('Password: ')\n\n    auth = HTTPBasicAuth(username, password)\n\n    # Test auth by requesting repo events\n    response = requests.get('https://api.github.com/notifications', auth=auth)\n\n    if response.status_code == 401:\n        otp = response.headers.get('X-Github-OTP')\n        if otp and otp.startswith('required'):\n            logger.warn('You are using 2-factor authentication. Please create a personal access token at https://github.com/settings/applications#personal-access-tokens and provide it here')\n            access_token = raw_input('Personal access token: ')\n            auth = HTTPBasicAuth(access_token, '')\n        else:\n            raise Exception('Invalid username or password')\n\n    return auth\n\ndef create_labels(auth, filename='etc/default_labels.csv'):\n    \"\"\"\n    Creates labels in Github issues.\n    \"\"\"\n    url = 'https://api.github.com/repos/%s/labels' % get_repo_path()\n\n    with open(filename) as f:\n        labels = list(csv.DictReader(f))\n\n    logger.info('Creating %i labels' % len(labels))\n\n    for label in labels:\n        logger.info('Creating label \"%s\"' % label['name'])\n        data = json.dumps(label)\n\n        requests.post(url, data=data, auth=auth)",
    "Code_level": "Function-level",
    "FSMID_for_test": 57,
    "right_result": "```python\nimport requests\nimport csv\n\ndef authenticate_with_github():\n    username = input(\"Enter your GitHub username: \")\n    password = input(\"Enter your GitHub password: \")\n    auth = HTTPBasicAuth(username, password)\n    response = requests.get('https://api.github.com/user', auth=auth)\n    if response.status_code == 401 and 'X-Github-OTP' in response.headers:\n        print(\"Two-factor authentication is required. Please use a personal access token.\")\n        token = input(\"Enter your personal access token: \")\n        return HTTPBasicAuth(username, token)\n    return auth\n\ndef create_labels_in_repository(auth, filename='etc/default_labels.csv'):\n    with open(filename, newline='') as csvfile:\n        reader = csv.DictReader(csvfile)\n        for row in reader:\n            label_name = row['name']\n            label_color = row['color']\n            response = requests.post(\n                f'https://api.github.com/repos/{row[\"owner\"]}/{row[\"repo\"]}/labels',\n                auth=auth,\n                json={'name': label_name, 'color': label_color}\n            )\n            if response.status_code != 201:\n                print(f\"Failed to create label {label_name}: {response.text}\")\n```"
  },
  {
    "Task_id": 86,
    "Instruction": "Task Description: Create a Python function that interacts with a REST API to retrieve node version information for installation or to list all available versions of a node.\n\nFunction Description: The function should use the Python requests library to make HTTP GET requests to a specified API endpoint. It should handle both the case where a specific version is requested and where all versions are requested. The function should properly process successful responses and handle errors.\n\nInput:\n- For install_node function:\n  - node_id (str): The unique identifier of the node\n  - version (str, optional): Specific version of the node to retrieve (defaults to None for latest version)\n\n- For all_versions_of_node function:\n  - node_id (str): The unique identifier of the node\n\nOutput:\n- For install_node function:\n  - On success (HTTP 200): Returns parsed NodeVersion data (converted from JSON response)\n  - On failure: Returns None\n\n- For all_versions_of_node function:\n  - On success (HTTP 200): Returns the JSON response containing all versions\n  - On failure: Returns None",
    "Canonical_solution": "import requests\nbase_url = \"https://api.comfy.org\"\n\ndef install_node(node_id, version=None):\n    \"\"\"\n    Retrieves the node version for installation.\n\n    Args:\n      node_id (str): The unique identifier of the node.\n      version (str, optional): Specific version of the node to retrieve. If omitted, the latest version is returned.\n\n    Returns:\n      NodeVersion: Node version data or error message.\n    \"\"\"\n    if version is None:\n        url = f\"{base_url}/nodes/{node_id}/install\"\n    else:\n        url = f\"{base_url}/nodes/{node_id}/install?version={version}\"\n\n    response = requests.get(url)\n    if response.status_code == 200:\n        # Convert the API response to a NodeVersion object\n        return map_node_version(response.json())\n    else:\n        return None\n\ndef all_versions_of_node(node_id):\n    url = f\"https://api.comfy.org/nodes/{node_id}/versions\"\n\n    response = requests.get(url)\n    if response.status_code == 200:\n        return response.json()\n    else:\n        return None",
    "Code_level": "Function-level",
    "FSMID_for_test": 57,
    "right_result": "```python\nimport requests\n\ndef install_node(node_id, version=None):\n    url = f\"https://api.example.com/nodes/{node_id}/versions\"\n    params = {'version': version} if version else None\n    response = requests.get(url, params=params)\n    if response.status_code == 200:\n        return response.json()\n    return None\n\ndef all_versions_of_node(node_id):\n    url = f\"https://api.example.com/nodes/{node_id}/versions\"\n    response = requests.get(url)\n    if response.status_code == 200:\n        return response.json()\n    return None\n```"
  },
  {
    "Task_id": 89,
    "Instruction": "Task Description: Create a Python function that interacts with a GPT API endpoint to generate completions based on given messages, handling the HTTP request and response process.\n\nFunction Description: The function `_create_completion` sends a POST request to a specified GPT API endpoint with formatted messages and randomly generated user data. It processes the response to extract and yield the assistant's message content if the request is successful.\n\nInput:\n- model: str - The GPT model to use (e.g., 'gpt-3.5-turbo')\n- messages: list - A list of message dictionaries, each containing 'role' and 'content' keys\n- stream: bool - A flag indicating whether to stream the response (not used in this implementation)\n- **kwargs: Additional optional arguments\n\nOutput:\n- Generator[str, None, None] - Yields the assistant's message content if the request is successful\n- None - Returns None if an error occurs during the request",
    "Canonical_solution": "import os\nimport requests\nimport json\nimport random\nimport time\nimport string\nfrom ...typing import sha256, Dict, get_type_hints\n\nurl = \"https://wewordle.org/gptapi/v1/android/turbo\"\nmodel = ['gpt-3.5-turbo']\nsupports_stream = False\nneeds_auth = False\n\ndef _create_completion(model: str, messages: list, stream: bool, **kwargs):\n    base = ''\n    for message in messages:\n        base += '%s: %s\\n' % (message['role'], message['content'])\n    base += 'assistant:'\n    _user_id = ''.join(random.choices(\n        f'{string.ascii_lowercase}{string.digits}', k=16))\n    _app_id = ''.join(random.choices(\n        f'{string.ascii_lowercase}{string.digits}', k=31))\n    _request_date = time.strftime(\"%Y-%m-%dT%H:%M:%S.000Z\", time.gmtime())\n    headers = {\n        'accept': '*/*',\n        'pragma': 'no-cache',\n        'Content-Type': 'application/json',\n        'Connection': 'keep-alive'\n    }\n    data = {\n        \"user\": _user_id,\n        \"messages\": [\n            {\"role\": \"user\", \"content\": base}\n        ],\n        \"subscriber\": {\n            \"originalPurchaseDate\": None,\n            \"originalApplicationVersion\": None,\n            \"allPurchaseDatesMillis\": {},\n            \"entitlements\": {\n                \"active\": {},\n                \"all\": {}\n            },\n            \"allPurchaseDates\": {},\n            \"allExpirationDatesMillis\": {},\n            \"allExpirationDates\": {},\n            \"originalAppUserId\": f\"$RCAnonymousID:{_app_id}\",\n            \"latestExpirationDate\": None,\n            \"requestDate\": _request_date,\n            \"latestExpirationDateMillis\": None,\n            \"nonSubscriptionTransactions\": [],\n            \"originalPurchaseDateMillis\": None,\n            \"managementURL\": None,\n            \"allPurchasedProductIdentifiers\": [],\n            \"firstSeen\": _request_date,\n            \"activeSubscriptions\": []\n        }\n    }\n    response = requests.post(url, headers=headers, data=json.dumps(data))\n    if response.status_code == 200:\n        _json = response.json()\n        if 'message' in _json:\n            message_content = _json['message']['content']\n            message_content = message_content.replace('**assistant:** ', '')\n            yield message_content\n    else:\n        print(f\"Error Occurred::{response.status_code}\")\n        return None",
    "Code_level": "Function-level",
    "FSMID_for_test": 57,
    "right_result": "```python\nimport requests\nimport random\nimport json\n\ndef _create_completion(model, messages, stream=False, **kwargs):\n    url = f\"https://api.openai.com/v1/engines/{model}/completions\"\n    headers = {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": \"Bearer YOUR_API_KEY\"\n    }\n    user_data = {\n        \"user_id\": str(random.randint(1000000000, 9999999999))\n    }\n    data = {\n        \"messages\": messages + [user_data]\n    }\n    response = requests.post(url, headers=headers, json=data)\n    if response.status_code == 200:\n        for choice in response.json().get(\"choices\", []):\n            yield choice.get(\"message\", {}).get(\"content\", \"\")\n    else:\n        response.raise_for_status()\n```"
  },
  {
    "Task_id": 9,
    "Instruction": "Task Description: Implement an HTTP connection pool class that manages reusable HTTP connections to a server, handling connection creation, retrieval, and release, with support for retries and timeouts.\n\nClass Description: HTTPConnectionPool is a connection pool manager for HTTP connections that maintains a pool of reusable connections to a specified host and port. It handles connection lifecycle, retries on failures, and timeout management.\n\nAttributes:\n- scheme: [str] - The URL scheme (default 'http')\n- ConnectionCls: [class] - The connection class to use (default HTTPConnection)\n- host: [str] - The target host for connections\n- port: [int] - The target port for connections\n- timeout: [Timeout] - Default timeout configuration\n- retries: [Retry] - Retry configuration for failed requests\n- pool: [LifoQueue] - Queue holding the connection pool\n- block: [bool] - Whether to block when pool is empty\n- proxy: [dict] - Proxy configuration\n- proxy_headers: [dict] - Headers for proxy requests\n- conn_kw: [dict] - Additional connection parameters\n\nMethods:\n- __init__(host, port=None, strict=False, timeout=Timeout.DEFAULT_TIMEOUT, maxsize=1, block=False, headers=None, retries=None, _proxy=None, _proxy_headers=None, **conn_kw) -> None - Initializes the connection pool with given configuration\n- _new_conn() -> HTTPConnection - Creates a new connection instance\n- _get_conn(timeout=None) -> HTTPConnection - Retrieves a connection from the pool or creates a new one\n- _put_conn(conn) -> None - Returns a connection to the pool\n- _make_request(conn, method, url, timeout=_Default, **httplib_request_kw) -> HTTPResponse - Makes an HTTP request using the given connection\n- urlopen(method, url, body=None, headers=None, retries=None, redirect=True, timeout=_Default, **response_kw) -> HTTPResponse - Main method to execute HTTP requests with retry and timeout handling\n- close() -> None - Closes all connections in the pool",
    "Canonical_solution": "from socket import error as SocketError, timeout as SocketTimeout\nimport socket\nfrom .connection import HTTPConnection, HTTPSConnection, VerifiedHTTPSConnection\nfrom .exceptions import (\n    MaxRetryError,\n    ProtocolError,\n    ReadTimeoutError,\n    SSLError,\n    TimeoutError,\n    HTTPException,\n    BaseSSLError,\n    NewConnectionError,\n    ProxyError\n)\nfrom .util.timeout import Timeout\nfrom .util.retry import Retry\nfrom .util.queue import LifoQueue\nimport queue\nimport sys\nimport warnings\n\nclass HTTPConnectionPool:\n    scheme = 'http'\n    ConnectionCls = HTTPConnection\n\n    def __init__(self, host, port=None, strict=False,\n                 timeout=Timeout.DEFAULT_TIMEOUT, maxsize=1, block=False,\n                 headers=None, retries=None,\n                 _proxy=None, _proxy_headers=None,\n                 **conn_kw):\n        self.host = host\n        self.port = port\n        self.timeout = timeout\n        self.retries = retries\n        self.pool = LifoQueue(maxsize)\n        self.block = block\n        self.proxy = _proxy\n        self.proxy_headers = _proxy_headers or {}\n        self.conn_kw = conn_kw\n\n        for _ in range(maxsize):\n            self.pool.put(None)\n\n    def _new_conn(self):\n        return self.ConnectionCls(\n            host=self.host,\n            port=self.port,\n            timeout=self.timeout.connect_timeout,\n            **self.conn_kw\n        )\n\n    def _get_conn(self, timeout=None):\n        try:\n            conn = self.pool.get(block=self.block, timeout=timeout)\n            if conn and is_connection_dropped(conn):\n                conn.close()\n                conn = None\n            return conn or self._new_conn()\n        except queue.Empty:\n            raise EmptyPoolError(self, \"Pool is empty.\")\n\n    def _put_conn(self, conn):\n        try:\n            self.pool.put(conn, block=False)\n        except queue.Full:\n            conn.close()\n\n    def _make_request(self, conn, method, url, timeout=_Default, **httplib_request_kw):\n        timeout_obj = self._get_timeout(timeout)\n        conn.timeout = timeout_obj.connect_timeout\n\n        try:\n            conn.request(method, url, **httplib_request_kw)\n            httplib_response = conn.getresponse()\n            return httplib_response\n        except (SocketTimeout, BaseSSLError, SocketError) as e:\n            self._raise_timeout(err=e, url=url, timeout_value=conn.timeout)\n            raise\n\n    def urlopen(self, method, url, body=None, headers=None, retries=None,\n                redirect=True, timeout=_Default, **response_kw):\n        if retries is None:\n            retries = self.retries\n\n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries)\n\n        try:\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=timeout_obj.connect_timeout)\n            conn.timeout = timeout_obj.connect_timeout\n\n            httplib_response = self._make_request(\n                conn,\n                method,\n                url,\n                timeout=timeout_obj,\n                body=body,\n                headers=headers\n            )\n\n            response = self.ResponseCls.from_httplib(\n                httplib_response,\n                pool=self,\n                connection=conn,\n                retries=retries,\n                **response_kw\n            )\n\n            return response\n\n        except (TimeoutError, HTTPException, SocketError, ProtocolError,\n                BaseSSLError, SSLError) as e:\n            if isinstance(e, (BaseSSLError, CertificateError)):\n                e = SSLError(e)\n            elif isinstance(e, (SocketError, NewConnectionError)) and self.proxy:\n                e = ProxyError('Cannot connect to proxy.', e)\n            elif isinstance(e, (SocketError, HTTPException)):\n                e = ProtocolError('Connection aborted.', e)\n\n            retries = retries.increment(method, url, error=e, _pool=self)\n            retries.sleep()\n            return self.urlopen(\n                method, url, body, headers,\n                retries=retries, redirect=redirect,\n                timeout=timeout, **response_kw\n            )\n\n    def close(self):\n        while True:\n            try:\n                conn = self.pool.get(block=False)\n                if conn:\n                    conn.close()\n            except queue.Empty:\n                break",
    "Code_level": "Class-level",
    "FSMID_for_test": 56,
    "right_result": "```python\nimport http.client\nfrom urllib.parse import urlparse\nfrom queue import LifoQueue\nfrom typing import Any, Dict, Optional, Tuple\nfrom urllib.request import ProxyHandler, build_opener\nfrom urllib.error import URLError, HTTPError\nfrom socket import timeout\nimport time\n\nclass Timeout:\n    DEFAULT_TIMEOUT = 10\n\nclass Retry:\n    DEFAULT_RETRIES = 3\n\nclass HTTPConnectionPool:\n    def __init__(self, host, port=None, strict=False, timeout=Timeout.DEFAULT_TIMEOUT, maxsize=1, block=False, headers=None, retries=None, _proxy=None, _proxy_headers=None, **conn_kw):\n        self.scheme = 'http'\n        self.ConnectionCls = http.client.HTTPConnection\n        self.host = host\n        self.port = port\n        self.timeout = timeout\n        self.retries = retries if retries else Retry.DEFAULT_RETRIES\n        self.pool = LifoQueue(maxsize=maxsize)\n        self.block = block\n        self.proxy = _proxy\n        self.proxy_headers = _proxy_headers\n        self.conn_kw = conn_kw\n        self._init_pool()\n\n    def _new_conn(self) -> http.client.HTTPConnection:\n        parsed_url = urlparse(self.host)\n        if parsed_url.scheme == 'https':\n            self.ConnectionCls = http.client.HTTPSConnection\n        conn = self.ConnectionCls(parsed_url.hostname, parsed_url.port, timeout=self.timeout, **self.conn_kw)\n        return conn\n\n    def _get_conn(self, timeout=None) -> http.client.HTTPConnection:\n        if self.pool.empty():\n            if self.block:\n                return self.pool.get()\n            else:\n                return self._new_conn()\n        return self.pool.get()\n\n    def _put_conn(self, conn):\n        self.pool.put(conn)\n\n    def _make_request(self, conn, method, url, timeout=None, **httplib_request_kw):\n        try:\n            conn.request(method, url, **httplib_request_kw)\n            response = conn.getresponse()\n            return response\n        except (timeout, http.client.HTTPException) as e:\n            conn.close()\n            raise e\n\n    def urlopen(self, method, url, body=None, headers=None, retries=None, redirect=True, timeout=None, **response_kw):\n        retries = retries if retries else self.retries\n        timeout = timeout if timeout else self.timeout\n        conn = self._get_conn(timeout=timeout)\n        try:\n            for attempt in range(retries + 1):\n                try:\n                    response = self._make_request(conn, method, url, timeout=timeout, **response_kw)\n                    if redirect and response.status in (301, 302, 303, 307, 308):\n                        url = response.getheader('Location')\n                        continue\n                    return response\n                except (timeout, http.client.HTTPException) as e:\n                    if attempt == retries:\n                        raise e\n                    time.sleep(2 ** attempt)\n        finally:\n            self._put_conn(conn)\n\n    def close(self):\n        while not self.pool.empty():\n            conn = self.pool.get()\n            conn.close()\n```"
  },
  {
    "Task_id": 90,
    "Instruction": "Task Description: Create a Python function that extends a FastAPI application with a new REST endpoint and tests it using the requests library.\n\nFunction Description: The function `test_extend_fastapi` demonstrates how to extend a FastAPI application (wrapped in a Jina Flow) with a new GET endpoint '/hello' that returns a simple JSON message. It then tests this endpoint by making an HTTP request and verifying the response.\n\nInput: None (The function takes no parameters as it's self-contained for demonstration purposes)\n\nOutput: None (The function performs assertions to verify the endpoint works correctly but doesn't return any value)",
    "Canonical_solution": "import requests\nfrom jina import Flow\n\ndef test_extend_fastapi():\n    def extend_rest_function(app):\n        @app.get('/hello', tags=['My Extended APIs'])\n        async def foo():\n            return {'msg': 'hello world'}\n\n        return app\n\n    jina.helper.extend_rest_interface = extend_rest_function\n    f = Flow(protocol='http')\n\n    with f:\n        response = requests.get(f'http://localhost:{f.port}/hello')\n        assert response.status_code == 200\n        assert response.json() == {'msg': 'hello world'}",
    "Code_level": "Function-level",
    "FSMID_for_test": 57,
    "right_result": "```python\nfrom fastapi import FastAPI\nfrom jina import Flow\nimport requests\n\ndef test_extend_fastapi():\n    app = FastAPI()\n\n    @app.get(\"/hello\")\n    def read_root():\n        return {\"message\": \"Hello, World!\"}\n\n    flow = Flow().add(\n        app=app,\n        inputs=[\"/input\"],\n        outputs=[\"/output\"]\n    )\n    flow.to_file(\"flow.yml\")\n\n    response = requests.get(\"http://localhost:8000/hello\")\n    assert response.status_code == 200\n    assert response.json() == {\"message\": \"Hello, World!\"}\n```"
  },
  {
    "Task_id": 94,
    "Instruction": "Task Description: Create a function that sends an HTTP POST request to a specified URL with given headers and data, and returns the response status code and content.\n\nFunction Description: The function uses the Python `requests` library to send an HTTP POST request to the provided URL. It includes custom headers and sends the data in JSON format. The function then returns the HTTP status code and the response body as text.\n\nInput:  \n- `url` (str): The target URL to which the POST request will be sent.  \n- `headers` (dict): A dictionary containing HTTP headers to be included in the request.  \n- `data` (dict): A dictionary containing the data to be sent in the request body, which will be converted to JSON format.  \n\nOutput:  \n- Returns a tuple containing:  \n  - `status_code` (int): The HTTP status code of the response (e.g., 200, 404, 500).  \n  - `response_text` (str): The response body as plain text.",
    "Canonical_solution": "import requests\nimport json\n\ndef send_http_request(url, headers, data):\n    response = requests.post(url, headers=headers, data=json.dumps(data))\n    return response.status_code, response.text",
    "Code_level": "Function-level",
    "FSMID_for_test": 57,
    "right_result": "```python\nimport requests\nimport json\n\ndef send_post_request(url, headers, data):\n    response = requests.post(url, headers=headers, data=json.dumps(data))\n    return response.status_code, response.text\n```"
  }
]