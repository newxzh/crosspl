[
  {
    "Task_id": 1,
    "Instruction": "Task Description: Create a Python class that implements an ActiveMQ consumer using the STOMP protocol to listen for messages from a specified queue or topic in an Artemis message broker.\n\nClass Description: The MessageArtemisExtension class provides functionality to establish a connection with an Artemis message broker and subscribe to a specified destination (queue/topic) to receive messages. It maintains connection objects and handles message listening through a custom listener.\n\nAttributes:\nconns: List[stomp.Connection] - Class attribute that stores all connection objects created by instances of this class\nconn: stomp.Connection - Instance attribute representing the current connection to the message broker\n\nMethods:\nlisten_queue(profile: dict) -> None - Establishes a connection to the Artemis broker and subscribes to the specified destination\n    Input:\n        profile: dict - A dictionary containing connection parameters with the following optional keys:\n            host: str - Broker host address (default: \"127.0.0.1\")\n            port: int - Broker port number (default: 61616)\n            username: str - Authentication username (default: \"artemis\")\n            password: str - Authentication password (default: \"artemis\")\n            destination: str - Queue/topic name to subscribe to (default: \"arkid\")\n    Output: None - The method establishes the connection and subscription but doesn't return any value",
    "Canonical_solution": "import stomp\nfrom typing import List\n\nclass MessageArtemisExtension:\n    conns = []\n    \n    def __init__(self):\n        self.conn = None\n        \n    def listen_queue(self, profile: dict):\n        if not profile:\n            return\n            \n        self.conn = stomp.Connection(\n            host_and_ports=[\n                (\n                    profile.get(\"host\",\"127.0.0.1\"), \n                    profile.get(\"port\",61616)\n                )\n            ],\n            heartbeats=(6000, 12000)\n        )\n        self.conn.set_listener('', MessageListener())\n        self.conn.connect(\n            profile.get(\"username\",\"artemis\"), \n            profile.get(\"password\",\"artemis\"), \n            wait=True,\n            headers={\"client-id\": \"arkid\"},\n        )\n        self.conn.subscribe(\n            destination=profile.get(\"destination\",\"arkid\"),\n            id=profile.get(\"destination\",\"arkid\"),\n            ack=\"auto\",\n            headers={\n                'subscription-type': 'ANYCAST',\n                'durable-subscription-name': f'arkid.{profile.get(\"destination\",\"arkid\")}',\n            },\n        )",
    "Code_level": "Class-level",
    "FSMID_for_test": 81,
    "right_result": "import stomp\nimport threading\n\nclass MessageArtemisExtension:\n    conns = []\n\n    def __init__(self):\n        self.conn = None\n\n    def listen_queue(self, profile):\n        host = profile.get(\"host\", \"127.0.0.1\")\n        port = profile.get(\"port\", 61616)\n        username = profile.get(\"username\", \"artemis\")\n        password = profile.get(\"password\", \"artemis\")\n        destination = profile.get(\"destination\", \"arkid\")\n\n        self.conn = stomp.Connection(host_and_ports=[(host, port)])\n        self.conn.set_listener('', self._listener)\n        self.conn.connect(username, password, wait=True)\n        self.conn.subscribe(destination=destination, id='1', ack='auto')\n        MessageArtemisExtension.conns.append(self.conn)\n\n    def _listener(self, headers, message):\n        print(f\"Received message: {message}\")\n\n    def disconnect(self):\n        if self.conn:\n            self.conn.disconnect()\n            MessageArtemisExtension.conns.remove(self.conn)"
  },
  {
    "Task_id": 10,
    "Instruction": "Task Description: Implement an HTTP connection pool class that manages reusable HTTP connections to a server, handling connection creation, retrieval, and release, along with request execution and response handling.\n\nClass Description: HTTPConnectionPool is a connection pooling mechanism for HTTP clients that manages a pool of persistent connections to a specified host, improving performance by reusing connections. It handles connection lifecycle, retries, timeouts, and proxy configurations.\n\nAttributes:\n- scheme: str - The URL scheme (default \"http\")\n- ConnectionCls: class - The connection class to use (default HTTPConnection)\n- ResponseCls: class - The response class to use (default HTTPResponse)\n- host: str - The target server hostname\n- port: int - The target server port\n- timeout: Timeout - Connection and read timeout configuration\n- retries: Retry - Retry configuration for failed requests\n- pool: LifoQueue - The connection pool storage\n- block: bool - Whether to block when pool is full\n- proxy: str - Proxy server URL (optional)\n- proxy_headers: dict - Headers for proxy requests\n\nMethods:\n- __init__(host, port=None, strict=False, timeout=Timeout.DEFAULT_TIMEOUT, maxsize=1, block=False, headers=None, retries=None, _proxy=None, _proxy_headers=None, **conn_kw) -> None - Initializes the connection pool with configuration parameters\n- _new_conn() -> HTTPConnection - Creates a new connection instance\n- _get_conn(timeout=None) -> HTTPConnection - Retrieves a connection from the pool or creates a new one\n- _put_conn(conn) -> None - Returns a connection to the pool\n- _make_request(conn, method, url, timeout=_Default, **httplib_request_kw) -> HTTPResponse - Executes an HTTP request using the specified connection\n- urlopen(method, url, body=None, headers=None, retries=None, redirect=True, assert_same_host=True, timeout=_Default, pool_timeout=None, **response_kw) -> HTTPResponse - Main method to execute HTTP requests with connection pooling\n- close() -> None - Closes all connections in the pool",
    "Canonical_solution": "import socket\nimport errno\nfrom socket import error as SocketError\nfrom socket import timeout as SocketTimeout\nfrom .connection import HTTPConnection, HTTPSConnection\nfrom .util.timeout import Timeout\nfrom .util.retry import Retry\nfrom .util.url import parse_url\nfrom .response import HTTPResponse\nfrom .exceptions import (\n    EmptyPoolError,\n    ClosedPoolError,\n    HostChangedError,\n    MaxRetryError,\n    ProtocolError,\n    TimeoutError,\n    SSLError,\n    ProxyError,\n    CertificateError,\n    HTTPException,\n    NewConnectionError\n)\nfrom ._collections import HTTPHeaderDict\nfrom .util.queue import LifoQueue\nfrom .util.proxy import connection_requires_http_tunnel\nfrom .util.request import set_file_position\nfrom .util.response import assert_header_parsing\n\nclass HTTPConnectionPool:\n    scheme = \"http\"\n    ConnectionCls = HTTPConnection\n    ResponseCls = HTTPResponse\n\n    def __init__(\n        self,\n        host,\n        port=None,\n        strict=False,\n        timeout=Timeout.DEFAULT_TIMEOUT,\n        maxsize=1,\n        block=False,\n        headers=None,\n        retries=None,\n        _proxy=None,\n        _proxy_headers=None,\n        **conn_kw\n    ):\n        self.host = host\n        self.port = port\n        self.timeout = Timeout.from_float(timeout) if not isinstance(timeout, Timeout) else timeout\n        self.retries = retries if retries is not None else Retry.DEFAULT\n        self.pool = LifoQueue(maxsize)\n        self.block = block\n        self.proxy = _proxy\n        self.proxy_headers = _proxy_headers or {}\n\n        for _ in range(maxsize):\n            self.pool.put(None)\n\n    def _new_conn(self):\n        return self.ConnectionCls(\n            host=self.host,\n            port=self.port,\n            timeout=self.timeout.connect_timeout,\n            strict=self.strict,\n            **self.conn_kw\n        )\n\n    def _get_conn(self, timeout=None):\n        try:\n            conn = self.pool.get(block=self.block, timeout=timeout)\n            if conn and is_connection_dropped(conn):\n                conn.close()\n                conn = None\n            return conn or self._new_conn()\n        except AttributeError:\n            raise ClosedPoolError(self, \"Pool is closed.\")\n        except queue.Empty:\n            if self.block:\n                raise EmptyPoolError(self, \"Pool reached maximum size and no more connections are allowed.\")\n            return self._new_conn()\n\n    def _put_conn(self, conn):\n        try:\n            self.pool.put(conn, block=False)\n        except AttributeError:\n            pass\n        except queue.Full:\n            conn.close()\n\n    def _make_request(self, conn, method, url, timeout=_Default, **httplib_request_kw):\n        timeout_obj = self._get_timeout(timeout)\n        conn.timeout = timeout_obj.connect_timeout\n\n        try:\n            conn.request(method, url, **httplib_request_kw)\n            httplib_response = conn.getresponse()\n            assert_header_parsing(httplib_response.msg)\n            return httplib_response\n        except (SocketTimeout, BaseSSLError) as e:\n            self._raise_timeout(err=e, url=url, timeout_value=conn.timeout)\n            raise\n\n    def urlopen(\n        self,\n        method,\n        url,\n        body=None,\n        headers=None,\n        retries=None,\n        redirect=True,\n        assert_same_host=True,\n        timeout=_Default,\n        pool_timeout=None,\n        **response_kw\n    ):\n        parsed_url = parse_url(url)\n        if headers is None:\n            headers = self.headers\n\n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n\n        if assert_same_host and not self.is_same_host(url):\n            raise HostChangedError(self, url, retries)\n\n        conn = None\n        release_conn = True\n\n        try:\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=pool_timeout)\n            conn.timeout = timeout_obj.connect_timeout\n\n            http_tunnel_required = connection_requires_http_tunnel(\n                self.proxy, self.proxy_config, parsed_url.scheme\n            )\n\n            if not http_tunnel_required:\n                headers = headers.copy()\n                headers.update(self.proxy_headers)\n\n            httplib_response = self._make_request(\n                conn,\n                method,\n                url,\n                timeout=timeout_obj,\n                body=body,\n                headers=headers\n            )\n\n            response = self.ResponseCls.from_httplib(\n                httplib_response,\n                pool=self,\n                connection=conn if not release_conn else None,\n                retries=retries,\n                **response_kw\n            )\n\n            return response\n\n        except (EmptyPoolError, TimeoutError, HTTPException, SocketError, ProtocolError) as e:\n            if conn:\n                conn.close()\n                conn = None\n            raise\n\n        finally:\n            if release_conn and conn:\n                self._put_conn(conn)\n\n    def close(self):\n        while True:\n            try:\n                conn = self.pool.get(block=False)\n                if conn:\n                    conn.close()\n            except queue.Empty:\n                break",
    "Code_level": "Class-level",
    "FSMID_for_test": 56,
    "right_result": "import queue\nfrom urllib.parse import urlparse\nfrom http.client import HTTPConnection, HTTPException\nfrom socket import timeout as SocketTimeout\nfrom urllib3.util.retry import Retry\nfrom urllib3.util.timeout import Timeout\nfrom urllib3.exceptions import MaxRetryError, NewConnectionError\n\nclass HTTPResponse:\n    def __init__(self, status, headers, content):\n        self.status = status\n        self.headers = headers\n        self.content = content\n\nclass Timeout:\n    DEFAULT_TIMEOUT = 5.0\n\nclass Retry:\n    def __init__(self, total=0, backoff_factor=0.5, status_forcelist=None):\n        self.total = total\n        self.backoff_factor = backoff_factor\n        self.status_forcelist = status_forcelist or []\n\nclass HTTPConnectionPool:\n    def __init__(self, host, port=None, strict=False, timeout=Timeout.DEFAULT_TIMEOUT, maxsize=1, block=False, headers=None, retries=None, _proxy=None, _proxy_headers=None, **conn_kw):\n        self.scheme = \"http\"\n        self.ConnectionCls = HTTPConnection\n        self.ResponseCls = HTTPResponse\n        self.host = host\n        self.port = port or 80\n        self.timeout = timeout\n        self.retries = retries or Retry()\n        self.pool = queue.LifoQueue(maxsize=maxsize)\n        self.block = block\n        self.proxy = _proxy\n        self.proxy_headers = _proxy_headers or {}\n        self.strict = strict\n        self.conn_kw = conn_kw\n        self.headers = headers or {}\n\n    def _new_conn(self):\n        conn = self.ConnectionCls(self.host, self.port, **self.conn_kw)\n        if self.proxy:\n            conn.set_proxy(self.proxy, self.proxy_headers)\n        return conn\n\n    def _get_conn(self, timeout=None):\n        try:\n            conn = self.pool.get(block=self.block, timeout=timeout)\n            return conn\n        except queue.Empty:\n            if self.retries.total > 0:\n                for _ in range(self.retries.total):\n                    conn = self._new_conn()\n                    try:\n                        conn.connect()\n                        return conn\n                    except (SocketTimeout, HTTPException) as e:\n                        pass\n                raise MaxRetryError(None, \"No more retries left\")\n            else:\n                return self._new_conn()\n\n    def _put_conn(self, conn):\n        self.pool.put(conn)\n\n    def _make_request(self, conn, method, url, timeout=_Default, **httplib_request_kw):\n        conn.request(method, url, **httplib_request_kw)\n        resp = conn.getresponse()\n        content = resp.read()\n        return self.ResponseCls(resp.status, resp.headers, content)\n\n    def urlopen(self, method, url, body=None, headers=None, retries=None, redirect=True, assert_same_host=True, timeout=_Default, pool_timeout=None, **response_kw):\n        parsed_url = urlparse(url)\n        if parsed_url.hostname != self.host or parsed_url.port != self.port:\n            raise ValueError(\"Host mismatch\")\n        conn = self._get_conn(timeout=pool_timeout)\n        if headers:\n            conn.setheaders(headers)\n        if body:\n            conn.set_body(body)\n        response = self._make_request(conn, method, url, timeout=timeout, **response_kw)\n        return response\n\n    def close(self):\n        while not self.pool.empty():\n            conn = self.pool.get_nowait()\n            conn.close()"
  },
  {
    "Task_id": 100,
    "Instruction": "Task Description: Create a function to download an image from a given URL, process it, and save it locally while tracking download status and file metadata.\n\nFunction Description: The function downloads an image from a specified URL, resizes it, saves it to a local file, and returns metadata about the download process and resulting file. It handles various HTTP scenarios and includes error handling for network issues.\n\nInput:\n- row: [dict] - A dictionary containing:\n  - \"url\": [str] - The URL of the image to download\n  - Other fields will be populated by the function (see Output)\n\nOutput:\n- row: [dict] - The modified input dictionary with added/updated fields:\n  - \"status\": [int] - HTTP status code of the download (200 for success, 408 for timeout/error)\n  - \"file\": [str] - Path to the saved image file\n  - \"mimetype\": [str] - Detected MIME type of the image\n  - \"size\": [int] - Size of the saved file in bytes",
    "Canonical_solution": "import requests\n\nheaders = {\n    \"User-Agent\": \"Googlebot-Image/1.0\",\n    \"X-Forwarded-For\": \"64.18.15.200\",\n}\n\ndef download_image(row):\n    fname = _file_name(row)\n    if os.path.isfile(fname):\n        row[\"status\"] = 200\n        row[\"file\"] = fname\n        row[\"mimetype\"] = magic.from_file(row[\"file\"], mime=True)\n        row[\"size\"] = os.stat(row[\"file\"]).st_size\n        return row\n\n    try:\n        response = requests.get(\n            row[\"url\"], stream=False, timeout=5, allow_redirects=True, headers=headers\n        )\n        row[\"status\"] = response.status_code\n    except Exception as e:\n        row[\"status\"] = 408\n        return row\n\n    if response.ok:\n        try:\n            response.raw.decode_content = True\n            img = resize_img(io.BytesIO(response.content))\n            img.save(fname)\n\n            row[\"mimetype\"] = magic.from_file(fname, mime=True)\n            row[\"size\"] = os.stat(fname).st_size\n        except Exception as e:\n            row[\"status\"] = 408\n\n    row[\"file\"] = fname\n    return row",
    "Code_level": "Function-level",
    "FSMID_for_test": 57,
    "right_result": "import requests\nfrom PIL import Image\nimport os\nimport io\n\ndef download_and_process_image(row):\n    url = row.get(\"url\")\n    try:\n        response = requests.get(url, timeout=10)\n        response.raise_for_status()\n        row[\"status\"] = response.status_code\n        mimetype = response.headers['Content-Type']\n        row[\"mimetype\"] = mimetype\n        image_data = response.content\n        image = Image.open(io.BytesIO(image_data))\n        file_path = f\"processed_images/{os.path.basename(url)}\"\n        os.makedirs(os.path.dirname(file_path), exist_ok=True)\n        image.save(file_path, format=image.format)\n        row[\"file\"] = file_path\n        row[\"size\"] = os.path.getsize(file_path)\n    except requests.exceptions.RequestException as e:\n        row[\"status\"] = 408\n        row[\"file\"] = \"\"\n        row[\"mimetype\"] = \"\"\n        row[\"size\"] = 0\n    return row"
  },
  {
    "Task_id": 104,
    "Instruction": "Task Description: Create a function that performs HTTP requests using the Python requests library, handling different HTTP methods and processing both requests and responses appropriately.\n\nFunction Description: The function should make HTTP requests to a specified URL using a given HTTP method (GET, POST, PUT, DELETE, etc.). For GET requests, it should ignore any payload, while for other methods it should properly format and send a JSON payload if provided. The function should return the response status code, headers, and body in a structured format, or an error message if the request fails.\n\nInput:\n- method (str): The HTTP method to use (e.g., 'GET', 'POST', 'PUT', 'DELETE').\n- url (str): The target URL for the HTTP request.\n- payload_json (Optional[str]): A JSON string representing the request payload (ignored for GET requests).\n\nOutput:\n- dict: A dictionary containing:\n  - 'status_code' (int): The HTTP response status code.\n  - 'headers' (dict): The response headers as a dictionary.\n  - 'body' (str): The response body as text.\n  - OR 'error' (str): An error message if the request fails.",
    "Canonical_solution": "import os\nimport requests\nfrom typing import Optional\nfrom letta.utils import json_dumps, json_loads\n\ndef http_request(self, method: str, url: str, payload_json: Optional[str] = None):\n    \"\"\"\n    Generates an HTTP request and returns the response.\n\n    Args:\n        method (str): The HTTP method (e.g., 'GET', 'POST').\n        url (str): The URL for the request.\n        payload_json (Optional[str]): A JSON string representing the request payload.\n\n    Returns:\n        dict: The response from the HTTP request.\n    \"\"\"\n    try:\n        headers = {\"Content-Type\": \"application/json\"}\n\n        # For GET requests, ignore the payload\n        if method.upper() == \"GET\":\n            print(f\"[HTTP] launching GET request to {url}\")\n            response = requests.get(url, headers=headers)\n        else:\n            # Validate and convert the payload for other types of requests\n            if payload_json:\n                payload = json_loads(payload_json)\n            else:\n                payload = {}\n            print(f\"[HTTP] launching {method} request to {url}, payload=\\n{json_dumps(payload, indent=2)}\")\n            response = requests.request(method, url, json=payload, headers=headers)\n\n        return {\"status_code\": response.status_code, \"headers\": dict(response.headers), \"body\": response.text}\n    except Exception as e:\n        return {\"error\": str(e)}",
    "Code_level": "Function-level",
    "FSMID_for_test": 57,
    "right_result": "import requests\nimport json\n\ndef http_request(method, url, payload_json=None):\n    headers = {'Content-Type': 'application/json'}\n    try:\n        if method == 'GET':\n            response = requests.get(url, headers=headers)\n        elif method == 'POST':\n            response = requests.post(url, headers=headers, data=payload_json)\n        elif method == 'PUT':\n            response = requests.put(url, headers=headers, data=payload_json)\n        elif method == 'DELETE':\n            response = requests.delete(url, headers=headers)\n        else:\n            return {'error': 'Unsupported HTTP method'}\n        \n        return {\n            'status_code': response.status_code,\n            'headers': dict(response.headers),\n            'body': response.text\n        }\n    except requests.exceptions.RequestException as e:\n        return {'error': str(e)}"
  },
  {
    "Task_id": 105,
    "Instruction": "Based on the reference code provided, I'll create instructions for the functions since the code is organized at the function level rather than class level.\n\nTask Description: Create a set of HTTP client functions in Python to interact with a remote agent service for Bluetooth and system operations.\n\nFunction Description: The functions make HTTP requests to a remote agent and handle responses for various Bluetooth and system operations.\n\nInput: Various parameters depending on the specific function (agent IP, port, JSON data, etc.)\nOutput: Various return values including status codes, error messages, and operation-specific data\n\nDetailed Functions:\n\n1. Function: makeGetRequest(url)\nPurpose: Make a GET request to a specified URL with timeout handling\nInput: url (string) - The URL to send the GET request to\nOutput: tuple (status_code: int, response_text: string) - Returns status code and response text\n\n2. Function: makePostRequest(url, jsonstr)\nPurpose: Make a POST request with JSON data to a specified URL\nInput: \n  - url (string) - The URL to send the POST request to\n  - jsonstr (string) - JSON data to send in the request body\nOutput: tuple (status_code: int, response_text: string) - Returns status code and response text\n\n3. Function: getRemoteBluetoothRunningServices(agentIP, agentPort)\nPurpose: Check Bluetooth service status on remote agent\nInput:\n  - agentIP (string) - IP address of remote agent\n  - agentPort (int/string) - Port number of remote agent\nOutput: tuple (errcode: int, errmsg: string, hasBluetooth: bool, hasUbertooth: bool, spectrumScanRunning: bool, discoveryScanRunning: bool)\n\n4. Function: startRemoteBluetoothDiscoveryScan(agentIP, agentPort, ubertooth)\nPurpose: Start Bluetooth discovery scan on remote agent\nInput:\n  - agentIP (string)\n  - agentPort (int/string)\n  - ubertooth (bool) - Whether to use Ubertooth device\nOutput: tuple (errcode: int, errmsg: string)\n\n5. Function: stopRemoteBluetoothDiscoveryScan(agentIP, agentPort)\nPurpose: Stop Bluetooth discovery scan on remote agent\nInput:\n  - agentIP (string)\n  - agentPort (int/string)\nOutput: tuple (errcode: int, errmsg: string)\n\n6. Function: getRemoteBluetoothDiscoveryStatus(agentIP, agentPort)\nPurpose: Get status of Bluetooth discovery scan and discovered devices\nInput:\n  - agentIP (string)\n  - agentPort (int/string)\nOutput: tuple (errcode: int, errmsg: string, devices: dict)\n\n7. Function: getRemoteRecordingsFiles(agentIP, agentPort)\nPurpose: Get list of recording files from remote agent\nInput:\n  - agentIP (string)\n  - agentPort (int/string)\nOutput: tuple (errcode: int, errmsg: string, filelist: list)\n\n8. Function: delRemoteRecordingFiles(remoteIP, remotePort, filelist)\nPurpose: Delete recording files on remote agent\nInput:\n  - remoteIP (string)\n  - remotePort (int/string)\n  - filelist (list) - List of files to delete\nOutput: tuple (errcode: int, errmsg: string)\n\n9. Function: startRecord(agentIP, agentPort, interface)\nPurpose: Start recording on specified interface of remote agent\nInput:\n  - agentIP (string)\n  - agentPort (int/string)\n  - interface (string) - Network interface to record from\nOutput: tuple (errcode: int, errmsg: string)\n\n10. Function: stopRecord(agentIP, agentPort)\nPurpose: Stop recording on remote agent\nInput:\n  - agentIP (string)\n  - agentPort (int/string)\nOutput: tuple (errcode: int, errmsg: string)\n\n11. Function: updateRemoteConfig(remoteIP, remotePort, startupCfg, runningCfg, sendRestart)\nPurpose: Update configuration on remote agent\nInput:\n  - remoteIP (string)\n  - remotePort (int/string)\n  - startupCfg (object) - Configuration for startup\n  - runningCfg (object) - Configuration for running state\n  - sendRestart (bool) - Whether to restart agent after update\nOutput: tuple (errcode: int, errmsg: string)",
    "Canonical_solution": "import requests\nimport json\n\ndef makeGetRequest(url):\n    try:\n        response = requests.get(url, timeout=2)\n    except:\n        return -1, \"\"\n\n    if response.status_code != 200:\n        return response.status_code, \"\"\n\n    htmlResponse=response.text\n    return response.status_code, htmlResponse\n\ndef makePostRequest(url, jsonstr):\n    try:\n        response = requests.post(url, data=jsonstr, timeout=2)\n    except:\n        return -1, \"\"\n\n    htmlResponse=response.text\n    return response.status_code, htmlResponse\n\ndef getRemoteBluetoothRunningServices(agentIP, agentPort):\n    url = \"http://\" + agentIP + \":\" + str(agentPort) + \"/bluetooth/running\"\n    statusCode, responsestr = makeGetRequest(url)\n\n    if statusCode == 200:\n        try:\n            responsedict = json.loads(responsestr)\n            errcode = responsedict['errcode']\n            errmsg = responsedict['errmsg']\n            hasBluetooth = responsedict['hasbluetooth']\n            hasUbertooth = responsedict['hasubertooth']\n            spectrumScanRunning = responsedict['spectrumscanrunning']\n            discoveryScanRunning = responsedict['discoveryscanrunning']\n\n            return errcode, errmsg, hasBluetooth, hasUbertooth, spectrumScanRunning, discoveryScanRunning\n        except:\n            return -1, 'Error parsing response', False, False, False, False\n    else:\n            return -2, 'Bad response from agent [' + str(statusCode) + ']', False, False, False, False\n\ndef startRemoteBluetoothDiscoveryScan(agentIP, agentPort, ubertooth):\n    if ubertooth:\n        url = \"http://\" + agentIP + \":\" + str(agentPort) + \"/bluetooth/discoverystartp\"\n    else:\n        url = \"http://\" + agentIP + \":\" + str(agentPort) + \"/bluetooth/discoverystarta\"\n\n    statusCode, responsestr = makeGetRequest(url)\n\n    if statusCode == 200:\n        try:\n            responsedict = json.loads(responsestr)\n            errcode = responsedict['errcode']\n            errmsg = responsedict['errmsg']\n            return errcode, errmsg\n        except:\n            return -1, 'Error parsing response'\n    else:\n            return -2, 'Bad response from agent [' + str(statusCode) + ']'\n\ndef stopRemoteBluetoothDiscoveryScan(agentIP, agentPort):\n    url = \"http://\" + agentIP + \":\" + str(agentPort) + \"/bluetooth/discoverystop\"\n    statusCode, responsestr = makeGetRequest(url)\n\n    if statusCode == 200:\n        try:\n            responsedict = json.loads(responsestr)\n            errcode = responsedict['errcode']\n            errmsg = responsedict['errmsg']\n            return errcode, errmsg\n        except:\n            return -1, 'Error parsing response'\n    else:\n            return -2, 'Bad response from agent [' + str(statusCode) + ']'\n\ndef getRemoteBluetoothDiscoveryStatus(agentIP, agentPort):\n    url = \"http://\" + agentIP + \":\" + str(agentPort) + \"/bluetooth/discoverystatus\"\n    statusCode, responsestr = makeGetRequest(url)\n\n    if statusCode == 200:\n        try:\n            responsedict = json.loads(responsestr)\n            errcode = responsedict['errcode']\n            errmsg = responsedict['errmsg']\n            tmpDeviceData = responsedict['devices']\n            devices = {}\n            for curDevice in tmpDeviceData:\n                newdevice = BluetoothDevice()\n                try:\n                    newdevice.fromJsondict(curDevice)\n                    devices[newdevice.macAddress] = newdevice\n                except:\n                    pass\n            return errcode, errmsg, devices\n        except:\n            return -1, 'Error parsing response', None\n    else:\n            return -2, 'Bad response from agent [' + str(statusCode) + ']', None\n\ndef getRemoteRecordingsFiles(agentIP, agentPort):\n    url = \"http://\" + agentIP + \":\" + str(agentPort) + \"/system/getrecordings\"\n    statusCode, responsestr = makeGetRequest(url)\n\n    if statusCode == 200:\n        try:\n            responsedict = json.loads(responsestr)\n            filelist = []\n            try:\n                for curFileDict in responsedict['files']:\n                    curFile = FileSystemFile()\n                    curFile.fromJsondict(curFileDict)\n                    filelist.append(curFile)\n                return 0, \"\", filelist\n            except:\n                return 2, \"Error parsing response: \" + responsestr, None\n        except:\n            return 1, \"Error parsing response: \" + responsestr, None\n    else:\n        return statusCode, 'Received error code: ' + str(statusCode), None\n\ndef delRemoteRecordingFiles(remoteIP, remotePort, filelist):\n    url = \"http://\" + remoteIP + \":\" + str(remotePort) + \"/system/deleterecordings\"\n\n    filedict={}\n    filedict['files'] = filelist\n\n    jsonstr = json.dumps(filedict)\n    statusCode, responsestr = makePostRequest(url, jsonstr)\n\n    errcode = -1\n    errmsg = \"\"\n\n    if statusCode == 200 or statusCode == 400:\n        try:\n            responsedict = json.loads(responsestr)\n            try:\n                errcode = responsedict['errcode']\n                errmsg = responsedict['errmsg']\n            except:\n                if len(responsestr) == 0:\n                    errmsg = \"Error parsing agent response.  Is it still running?\"\n                else:\n                    errmsg = \"Error parsing agent response:\" + responsestr\n        except:\n            if len(responsestr) == 0:\n                errmsg = \"Error parsing agent response.  Is it still running?\"\n            else:\n                errmsg = \"Error parsing agent response:\" + responsestr\n    else:\n        if len(responsestr) == 0:\n            errmsg = \"Error updating remote agent.  Is it still running?\"\n        else:\n            errmsg = \"Error updating remote agent:\" + responsestr\n\n    return errcode, errmsg\n\ndef startRecord(agentIP, agentPort, interface):\n    url = \"http://\" + agentIP + \":\" + str(agentPort) + \"/system/startrecord/\" + interface\n    statusCode, responsestr = makeGetRequest(url)\n\n    if statusCode == 200:\n        try:\n            responsedict = json.loads(responsestr)\n            try:\n                errcode = responsedict['errcode']\n                errmsg = responsedict['errmsg']\n                return errcode, errmsg\n            except:\n                return 2, \"Error parsing response: \" + responsestr\n        except:\n            return 1, \"Error parsing response: \" + responsestr\n    else:\n        return statusCode, 'Received error code: ' + str(statusCode)\n\ndef stopRecord(agentIP, agentPort):\n    url = \"http://\" + agentIP + \":\" + str(agentPort) + \"/system/stoprecord\"\n    statusCode, responsestr = makeGetRequest(url)\n\n    if statusCode == 200:\n        try:\n            responsedict = json.loads(responsestr)\n            try:\n                errcode = responsedict['errcode']\n                errmsg = responsedict['errmsg']\n                return errcode, errmsg\n            except:\n                return 2, \"Error parsing response: \" + responsestr\n        except:\n            return 1, \"Error parsing response: \" + responsestr\n    else:\n        return statusCode, 'Received error code: ' + str(statusCode)\n\ndef updateRemoteConfig(remoteIP, remotePort, startupCfg, runningCfg, sendRestart=False):\n    url = \"http://\" + remoteIP + \":\" + str(remotePort) + \"/system/config\"\n\n    cfgdict = {}\n    cfgdict['startup'] = startupCfg.toJsondict()\n    cfgdict['running'] = runningCfg.toJsondict()\n\n    if sendRestart:\n        cfgdict['rebootagent'] = True\n\n    jsonstr = json.dumps(cfgdict)\n    statusCode, responsestr = makePostRequest(url, jsonstr)\n\n    errmsg = \"\"\n\n    if statusCode == 200:\n        return 0, \"\"\n    elif statusCode == 400:\n        try:\n            responsedict = json.loads(responsestr)\n            try:\n                errmsg = responsedict['errmsg']\n            except:\n                if len(responsestr) == 0:\n                    errmsg = \"Error parsing agent response.  Is it still running?\"\n                else:\n                    errmsg = \"Error parsing agent response:\" + responsestr\n        except:\n            if len(responsestr) == 0:\n                errmsg = \"Error parsing agent response.  Is it still running?\"\n            else:\n                errmsg = \"Error parsing agent response:\" + responsestr\n    else:\n        if len(responsestr) == 0:\n            errmsg = \"Error updating remote agent.  Is it still running?\"\n        else:\n            errmsg = \"Error updating remote agent:\" + responsestr\n\n        return -1, errmsg",
    "Code_level": "Function-level",
    "FSMID_for_test": 57,
    "right_result": "import requests\nimport json\n\ndef makeGetRequest(url):\n    try:\n        response = requests.get(url, timeout=10)\n        return (response.status_code, response.text)\n    except requests.exceptions.RequestException as e:\n        return (-1, str(e))\n\ndef makePostRequest(url, jsonstr):\n    try:\n        response = requests.post(url, data=jsonstr, headers={'Content-Type': 'application/json'}, timeout=10)\n        return (response.status_code, response.text)\n    except requests.exceptions.RequestException as e:\n        return (-1, str(e))\n\ndef getRemoteBluetoothRunningServices(agentIP, agentPort):\n    url = f\"http://{agentIP}:{agentPort}/bluetooth/services\"\n    status_code, response_text = makeGetRequest(url)\n    if status_code != 200:\n        return (status_code, response_text, False, False, False, False)\n    try:\n        data = json.loads(response_text)\n        hasBluetooth = data.get('hasBluetooth', False)\n        hasUbertooth = data.get('hasUbertooth', False)\n        spectrumScanRunning = data.get('spectrumScanRunning', False)\n        discoveryScanRunning = data.get('discoveryScanRunning', False)\n        return (0, \"\", hasBluetooth, hasUbertooth, spectrumScanRunning, discoveryScanRunning)\n    except json.JSONDecodeError:\n        return (status_code, response_text, False, False, False, False)\n\ndef startRemoteBluetoothDiscoveryScan(agentIP, agentPort, ubertooth):\n    url = f\"http://{agentIP}:{agentPort}/bluetooth/start_discovery\"\n    json_data = json.dumps({\"ubertooth\": ubertooth})\n    status_code, response_text = makePostRequest(url, json_data)\n    return (status_code, response_text)\n\ndef stopRemoteBluetoothDiscoveryScan(agentIP, agentPort):\n    url = f\"http://{agentIP}:{agentPort}/bluetooth/stop_discovery\"\n    status_code, response_text = makeGetRequest(url)\n    return (status_code, response_text)\n\ndef getRemoteBluetoothDiscoveryStatus(agentIP, agentPort):\n    url = f\"http://{agentIP}:{agentPort}/bluetooth/discovery_status\"\n    status_code, response_text = makeGetRequest(url)\n    if status_code != 200:\n        return (status_code, response_text, {})\n    try:\n        data = json.loads(response_text)\n        devices = data.get('devices', {})\n        return (0, \"\", devices)\n    except json.JSONDecodeError:\n        return (status_code, response_text, {})\n\ndef getRemoteRecordingsFiles(agentIP, agentPort):\n    url = f\"http://{agentIP}:{agentPort}/recordings/files\"\n    status_code, response_text = makeGetRequest(url)\n    if status_code != 200:\n        return (status_code, response_text, [])\n    try:\n        data = json.loads(response_text)\n        filelist = data.get('filelist', [])\n        return (0, \"\", filelist)\n    except json.JSONDecodeError:\n        return (status_code, response_text, [])\n\ndef delRemoteRecordingFiles(remoteIP, remotePort, filelist):\n    url = f\"http://{remoteIP}:{remotePort}/recordings/delete\"\n    json_data = json.dumps({\"filelist\": filelist})\n    status_code, response_text = makePostRequest(url, json_data)\n    return (status_code, response_text)\n\ndef startRecord(agentIP, agentPort, interface):\n    url = f\"http://{agentIP}:{agentPort}/recordings/start\"\n    json_data = json.dumps({\"interface\": interface})\n    status_code, response_text = makePostRequest(url, json_data)\n    return (status_code, response_text)\n\ndef stopRecord(agentIP, agentPort):\n    url = f\"http://{agentIP}:{agentPort}/recordings/stop\"\n    status_code, response_text = makeGetRequest(url)\n    return (status_code, response_text)\n\ndef updateRemoteConfig(remoteIP, remotePort, startupCfg, runningCfg, sendRestart):\n    url = f\"http://{remoteIP}:{remotePort}/config/update\"\n    json_data = json.dumps({\n        \"startupCfg\": startupCfg,\n        \"runningCfg\": runningCfg,\n        \"sendRestart\": sendRestart\n    })\n    status_code, response_text = makePostRequest(url, json_data)\n    return (status_code, response_text)"
  },
  {
    "Task_id": 107,
    "Instruction": "Task Description: Create a Python class that retrieves and formats a daily motto from an external API using HTTP requests.\n\nClass Description: The `Motto` class provides functionality to fetch a daily motto from the open.iciba.com API and format it for display. It encapsulates the HTTP request logic and response handling.\n\nAttributes: None\n\nMethods:\n\nMethod1: main() -> str - A static method that performs the following operations:\n1. Sends a GET request to \"http://open.iciba.com/dsapi\"\n2. Checks if the response status code is 200 (success)\n3. Parses the JSON response\n4. Returns a formatted string containing the motto content and note\n5. Returns an empty string if the request fails\n\nThe method takes no input parameters and returns either:\n- A formatted string combining the \"content\" and \"note\" fields from the API response, separated by a newline\n- An empty string if the HTTP request fails (non-200 status code)",
    "Canonical_solution": "import requests\n\nclass Motto:\n    @staticmethod\n    def main():\n        response = requests.get(\"http://open.iciba.com/dsapi\")\n        if response.status_code != 200:\n            return \"\"\n        res = response.json()\n        return f'{res[\"content\"]}\\n{res[\"note\"]}\\n'",
    "Code_level": "Class-level",
    "FSMID_for_test": 57,
    "right_result": "import requests\n\nclass Motto:\n    @staticmethod\n    def main() -> str:\n        response = requests.get(\"http://open.iciba.com/dsapi\")\n        if response.status_code == 200:\n            data = response.json()\n            return f\"{data['content']}\\n{data['note']}\"\n        return \"\""
  },
  {
    "Task_id": 120,
    "Instruction": "Task Description: Implement a class to interact with the Gitee API for deleting files from a repository branch.\n\nClass Description: The FileOnlineDelete_gitee class provides functionality to delete files from a specified branch in a Gitee repository using the Gitee API v5. It handles authentication, file information retrieval, and deletion operations.\n\nAttributes:\n- url_prefix: str - Base URL for Gitee API v5 repository operations\n- show_help: str - Placeholder for help information (currently unused)\n\nMethods:\n- delete_file_from_branch(repo_owner: str, repo_name: str, file_path: str, branch: str, access_token: str, commit_message: str = \"[comfyui_LLM_party] file deleted\") -> tuple - Deletes a file from the specified branch. Returns a success tuple or error message.\n  Parameters:\n    - repo_owner: str - Owner of the repository\n    - repo_name: str - Name of the repository\n    - file_path: str - Path to the file within the repository\n    - branch: str - Branch containing the file\n    - access_token: str - Gitee API access token\n    - commit_message: str - Commit message for the deletion (optional)\n  Returns:\n    - tuple: Either (\"Success\",) on success or (error_message,) on failure",
    "Canonical_solution": "import requests\n\nclass FileOnlineDelete_gitee:\n    def __init__(self):\n        self.url_prefix = \"https://gitee.com/api/v5/repos/\"\n        self.show_help = \"placeholder\"\n\n    def delete_file_from_branch(\n        self, repo_owner, repo_name, file_path, branch, access_token, commit_message=\"[comfyui_LLM_party] file deleted\"\n    ):\n        url = f\"https://gitee.com/api/v5/repos/{repo_owner}/{repo_name}/contents/{file_path}\"\n\n        params = {\"access_token\": access_token, \"ref\": branch}\n        response = requests.get(url, params=params)\n        if response.status_code != 200:\n            print(f\"Failed to get file info. Status code: {response.status_code}\")\n            print(f\"Response: {response.text}\")\n            return False\n\n        file_sha = response.json()[\"sha\"]\n\n        data = {\"access_token\": access_token, \"message\": commit_message, \"sha\": file_sha, \"branch\": branch}\n        response = requests.delete(url, json=data)\n\n        if response.status_code == 200:\n            print(f\"File '{file_path}' successfully deleted from branch '{branch}'.\")\n            return (\"Success\",)\n        else:\n            print(f\"Failed to delete file. Status code: {response.status_code}\")\n            print(f\"Response: {response.text}\")\n            return (response.text,)",
    "Code_level": "Class-level",
    "FSMID_for_test": 57,
    "right_result": "import requests\n\nclass FileOnlineDelete_gitee:\n    def __init__(self, url_prefix: str = \"https://gitee.com/api/v5/\", show_help: str = \"\"):\n        self.url_prefix = url_prefix\n        self.show_help = show_help\n\n    def delete_file_from_branch(self, repo_owner: str, repo_name: str, file_path: str, branch: str, access_token: str, commit_message: str = \"[comfyui_LLM_party] file deleted\") -> tuple:\n        url = f\"{self.url_prefix}repos/{repo_owner}/{repo_name}/contents/{file_path}\"\n        headers = {\n            \"Authorization\": f\"token {access_token}\",\n            \"Content-Type\": \"application/json\"\n        }\n        params = {\n            \"branch\": branch\n        }\n        response = requests.get(url, headers=headers, params=params)\n        if response.status_code != 200:\n            return (f\"Failed to retrieve file info: {response.text}\",)\n        \n        sha = response.json()[\"sha\"]\n        url = f\"{self.url_prefix}repos/{repo_owner}/{repo_name}/git/commits\"\n        payload = {\n            \"message\": commit_message,\n            \"author\": {\n                \"name\": \"ComfyUI LLM Party\",\n                \"email\": \"comfyui@llm.party\"\n            },\n            \"parents\": [branch],\n            \"tree\": {\n                \"base_tree\": branch,\n                \"tree\": [\n                    {\n                        \"path\": file_path,\n                        \"mode\": \"100644\",\n                        \"type\": \"blob\",\n                        \"content\": \"\"\n                    }\n                ]\n            }\n        }\n        response = requests.post(url, headers=headers, json=payload)\n        if response.status_code != 201:\n            return (f\"Failed to create commit: {response.text}\",)\n        \n        commit_sha = response.json()[\"sha\"]\n        url = f\"{self.url_prefix}repos/{repo_owner}/{repo_name}/git/refs/heads/{branch}\"\n        payload = {\n            \"ref\": f\"refs/heads/{branch}\",\n            \"sha\": commit_sha\n        }\n        response = requests.patch(url, headers=headers, json=payload)\n        if response.status_code != 200:\n            return (f\"Failed to update branch pointer: {response.text}\",)\n        \n        return (\"Success\",)"
  },
  {
    "Task_id": 121,
    "Instruction": "Task Description: Create a FastAPI-based HTTP server class that exposes various NLP pipeline functionalities including model information retrieval, tokenization, detokenization, and model inference.\n\nClass Description: The `ServeCommand` class encapsulates a FastAPI application that serves an NLP pipeline through RESTful endpoints. It provides methods for getting model information, tokenizing text, detokenizing tokens, and performing model inference.\n\nAttributes:\n- _pipeline: [Any] - The NLP pipeline object containing the model and tokenizer\n- host: [str] - The host address where the server will run (default: \"localhost\")\n- port: [int] - The port number for the server (default: 8888)\n- workers: [int] - Number of worker processes (default: 1)\n- _app: [FastAPI] - The FastAPI application instance\n\nMethods:\n- __init__(pipeline, host: str = \"localhost\", port: int = 8888, workers: int = 1) -> None - Initializes the server with the NLP pipeline and server configuration\n- run() -> None - Starts the FastAPI server using uvicorn\n- model_info() -> ServeModelInfoResult - Returns model configuration information\n- tokenize(text_input: str = Body(None, embed=True), return_ids: bool = Body(False, embed=True)) -> ServeTokenizeResult - Tokenizes input text and optionally returns token IDs\n- detokenize(tokens_ids: List[int] = Body(None, embed=True), skip_special_tokens: bool = Body(False, embed=True), cleanup_tokenization_spaces: bool = Body(True, embed=True)) -> ServeDeTokenizeResult - Converts token IDs back to text\n- forward(inputs=Body(None, embed=True)) -> ServeForwardResult - Performs model inference on the given inputs",
    "Canonical_solution": "from fastapi import Body, FastAPI, HTTPException\nfrom fastapi.routing import APIRoute\nfrom pydantic import BaseModel\nfrom starlette.responses import JSONResponse\nfrom uvicorn import run\nfrom typing import List, Any, Optional\n\nclass ServeModelInfoResult(BaseModel):\n    infos: dict\n\nclass ServeTokenizeResult(BaseModel):\n    tokens: List[str]\n    tokens_ids: Optional[List[int]]\n\nclass ServeDeTokenizeResult(BaseModel):\n    text: str\n\nclass ServeForwardResult(BaseModel):\n    output: Any\n\nclass ServeCommand:\n    def __init__(self, pipeline, host: str = \"localhost\", port: int = 8888, workers: int = 1):\n        self._pipeline = pipeline\n        self.host = host\n        self.port = port\n        self.workers = workers\n\n        self._app = FastAPI(\n            routes=[\n                APIRoute(\"/\", self.model_info, response_model=ServeModelInfoResult, response_class=JSONResponse, methods=[\"GET\"]),\n                APIRoute(\"/tokenize\", self.tokenize, response_model=ServeTokenizeResult, response_class=JSONResponse, methods=[\"POST\"]),\n                APIRoute(\"/detokenize\", self.detokenize, response_model=ServeDeTokenizeResult, response_class=JSONResponse, methods=[\"POST\"]),\n                APIRoute(\"/forward\", self.forward, response_model=ServeForwardResult, response_class=JSONResponse, methods=[\"POST\"]),\n            ],\n            timeout=600,\n        )\n\n    def run(self):\n        run(self._app, host=self.host, port=self.port, workers=self.workers)\n\n    def model_info(self):\n        return ServeModelInfoResult(infos=vars(self._pipeline.model.config))\n\n    def tokenize(self, text_input: str = Body(None, embed=True), return_ids: bool = Body(False, embed=True)):\n        try:\n            tokens_txt = self._pipeline.tokenizer.tokenize(text_input)\n            if return_ids:\n                tokens_ids = self._pipeline.tokenizer.convert_tokens_to_ids(tokens_txt)\n                return ServeTokenizeResult(tokens=tokens_txt, tokens_ids=tokens_ids)\n            else:\n                return ServeTokenizeResult(tokens=tokens_txt)\n        except Exception as e:\n            raise HTTPException(status_code=500, detail={\"error\": str(e)})\n\n    def detokenize(self, tokens_ids: List[int] = Body(None, embed=True), skip_special_tokens: bool = Body(False, embed=True), cleanup_tokenization_spaces: bool = Body(True, embed=True)):\n        try:\n            decoded_str = self._pipeline.tokenizer.decode(tokens_ids, skip_special_tokens, cleanup_tokenization_spaces)\n            return ServeDeTokenizeResult(text=decoded_str)\n        except Exception as e:\n            raise HTTPException(status_code=500, detail={\"error\": str(e)})\n\n    async def forward(self, inputs=Body(None, embed=True)):\n        if len(inputs) == 0:\n            return ServeForwardResult(output=[])\n        try:\n            output = self._pipeline(inputs)\n            return ServeForwardResult(output=output)\n        except Exception as e:\n            raise HTTPException(status_code=500, detail={\"error\": str(e)})",
    "Code_level": "Class-level",
    "FSMID_for_test": 61,
    "right_result": "import uvicorn\nfrom fastapi import FastAPI, Body\nfrom typing import List, Any, Optional\n\nclass ServeModelInfoResult:\n    def __init__(self, model_name: str, config: dict):\n        self.model_name = model_name\n        self.config = config\n\nclass ServeTokenizeResult:\n    def __init__(self, tokens: List[str], token_ids: List[int]):\n        self.tokens = tokens\n        self.token_ids = token_ids\n\nclass ServeDeTokenizeResult:\n    def __init__(self, text: str):\n        self.text = text\n\nclass ServeForwardResult:\n    def __init__(self, output: Any):\n        self.output = output\n\nclass ServeCommand:\n    def __init__(self, pipeline, host: str = \"localhost\", port: int = 8888, workers: int = 1) -> None:\n        self._pipeline = pipeline\n        self.host = host\n        self.port = port\n        self.workers = workers\n        self._app = FastAPI()\n\n        @self._app.get(\"/model_info\")\n        def get_model_info():\n            return self.model_info()\n\n        @self._app.post(\"/tokenize\")\n        def post_tokenize(text_input: str = Body(None, embed=True), return_ids: bool = Body(False, embed=True)):\n            return self.tokenize(text_input=text_input, return_ids=return_ids)\n\n        @self._app.post(\"/detokenize\")\n        def post_detokenize(tokens_ids: List[int] = Body(None, embed=True), skip_special_tokens: bool = Body(False, embed=True), cleanup_tokenization_spaces: bool = Body(True, embed=True)):\n            return self.detokenize(tokens_ids=tokens_ids, skip_special_tokens=skip_special_tokens, cleanup_tokenization_spaces=cleanup_tokenization_spaces)\n\n        @self._app.post(\"/forward\")\n        def post_forward(inputs=Body(None, embed=True)):\n            return self.forward(inputs=inputs)\n\n    def run(self) -> None:\n        uvicorn.run(self._app, host=self.host, port=self.port, workers=self.workers)\n\n    def model_info(self) -> ServeModelInfoResult:\n        model_name = getattr(self._pipeline, \"model_name\", \"unknown\")\n        config = getattr(self._pipeline, \"config\", {})\n        return ServeModelInfoResult(model_name=model_name, config=config)\n\n    def tokenize(self, text_input: str, return_ids: bool) -> ServeTokenizeResult:\n        tokens = self._pipeline.tokenize(text_input)\n        token_ids = self._pipeline.convert_tokens_to_ids(tokens) if return_ids else []\n        return ServeTokenizeResult(tokens=tokens, token_ids=token_ids)\n\n    def detokenize(self, tokens_ids: List[int], skip_special_tokens: bool, cleanup_tokenization_spaces: bool) -> ServeDeTokenizeResult:\n        tokens = self._pipeline.convert_ids_to_tokens(tokens_ids)\n        text = self._pipeline.detokenize(tokens, skip_special_tokens=skip_special_tokens, cleanup_tokenization_spaces=cleanup_tokenization_spaces)\n        return ServeDeTokenizeResult(text=text)\n\n    def forward(self, inputs) -> ServeForwardResult:\n        output = self._pipeline(inputs)\n        return ServeForwardResult(output=output)"
  },
  {
    "Task_id": 122,
    "Instruction": "Task Description: Implement a FastAPI-based HTTP server for handling conversational AI queries and chat interactions, with support for both direct queries and streaming chat responses.\n\nClass Description: RayAssistantDeployment is a class that encapsulates the functionality for handling HTTP requests in a conversational AI service. It provides endpoints for direct queries (/query) and chat interactions (/chat), with support for streaming responses in chat mode.\n\nAttributes:\n\napp: FastAPI - The FastAPI application instance that handles HTTP requests and routes.\n\nMethods:\n\n__init__: [Name](app: FastAPI) -> None - Initializes the class with a FastAPI app instance and registers the query and chat endpoints.\n\npredict: [Name](query: Query, stream: bool) -> Dict[str, Any] - Internal prediction method that processes the input query and returns a dictionary containing the AI response (implementation would be provided separately).\n\nquery: [Name](query: Query) -> Answer - Handles POST requests to the /query endpoint, processes the query using predict, and returns an Answer object containing the response.\n\nproduce_chat_answer: [Name](request: Request, result: Dict[str, Any]) -> Generator[str, None, None] - Generator function that yields chat response pieces and sources for streaming.\n\nchat: [Name](request: Request) -> StreamingResponse - Handles POST requests to the /chat endpoint, processes the conversation using predict (with streaming enabled for single messages), and returns a streaming response.",
    "Canonical_solution": "from fastapi import FastAPI\nfrom pydantic import BaseModel, Field\nfrom starlette.responses import StreamingResponse\nfrom typing import List, Dict, Any\n\nclass Message(BaseModel):\n    role: str = Field(\n        ..., description=\"The role of the author of the message, typically 'user', or 'assistant'.\"\n    )\n    content: str = Field(..., description=\"The content of the message.\")\n\nclass Request(BaseModel):\n    messages: List[Message] = Field(\n        ..., description=\"A list of messages that make up the conversation.\"\n    )\n\nclass Query(BaseModel):\n    query: str\n\nclass Answer(BaseModel):\n    question: str\n    answer: str\n    sources: List[str]\n    llm: str\n\nclass RayAssistantDeployment:\n    def __init__(self, app: FastAPI):\n        self.app = app\n        self.app.post(\"/query\")(self.query)\n        self.app.post(\"/chat\")(self.chat)\n\n    def predict(self, query: Query, stream: bool) -> Dict[str, Any]:\n        # Implementation would go here\n        pass\n\n    def query(self, query: Query) -> Answer:\n        result = self.predict(query, stream=False)\n        return Answer.parse_obj(result)\n\n    def produce_chat_answer(self, request: Request, result: Dict[str, Any]):\n        answer = []\n        for answer_piece in result[\"answer\"]:\n            answer.append(answer_piece)\n            yield answer_piece\n\n        if result[\"sources\"]:\n            yield \"\\n\\n**Sources:**\\n\"\n            for source in result[\"sources\"]:\n                yield \"* \" + source + \"\\n\"\n\n    def chat(self, request: Request) -> StreamingResponse:\n        if len(request.messages) == 1:\n            query = Query(query=request.messages[0].content)\n            result = self.predict(query, stream=True)\n        else:\n            # Simplified implementation for follow-up questions\n            result = {\"answer\": [\"Response\"], \"llm\": \"gpt-4\", \"sources\": [], \"document_ids\": []}\n\n        return StreamingResponse(\n            self.produce_chat_answer(request, result), media_type=\"text/plain\"\n        )",
    "Code_level": "Class-level",
    "FSMID_for_test": 61,
    "right_result": "from fastapi import FastAPI, Request\nfrom fastapi.responses import StreamingResponse\nfrom typing import Dict, Any, Generator, Optional\nfrom pydantic import BaseModel\n\nclass Query(BaseModel):\n    text: str\n    history: Optional[list] = None\n\nclass Answer(BaseModel):\n    response: str\n    sources: list\n\nclass RayAssistantDeployment:\n    def __init__(self, app: FastAPI) -> None:\n        self.app = app\n        self.app.post(\"/query\")(self.query)\n        self.app.post(\"/chat\")(self.chat)\n\n    def predict(self, query: Query, stream: bool) -> Dict[str, Any]:\n        # Implementation of the AI model prediction logic\n        # This is a placeholder and should be replaced with actual model inference\n        return {\n            \"response\": \"This is a sample response from the AI model.\",\n            \"sources\": [\"source1\", \"source2\"]\n        }\n\n    def query(self, query: Query) -> Answer:\n        result = self.predict(query, stream=False)\n        return Answer(response=result[\"response\"], sources=result[\"sources\"])\n\n    def produce_chat_answer(self, request: Request, result: Dict[str, Any]) -> Generator[str, None, None]:\n        yield f\"data: {result['response']}\\n\\n\"\n        for source in result['sources']:\n            yield f\"data: Source: {source}\\n\\n\"\n\n    def chat(self, request: Request) -> StreamingResponse:\n        query_data = Query(**request.json())\n        result = self.predict(query_data, stream=True)\n        return StreamingResponse(self.produce_chat_answer(request, result), media_type=\"text/event-stream\")"
  },
  {
    "Task_id": 125,
    "Instruction": "Task Description: Create a FastAPI-based HTTP server implementation that handles dynamic route creation, exception translation, and streaming responses, with built-in tracing middleware for request monitoring.\n\nClass Description: LlamaStackServer is a configurable HTTP server implementation using FastAPI that provides dynamic route creation, exception handling, and support for streaming responses (SSE). It includes middleware for request tracing and manages the lifecycle of implementation components.\n\nAttributes:\n\nconfig: [dict] - Configuration dictionary for server setup\napp: [FastAPI] - Main FastAPI application instance\nimpls: [Optional[dict]] - Dictionary of implementation components managed by the server\n\nMethods:\n\n__init__: [Name](config: dict) -> [None] - Initializes the server with given configuration and sets up FastAPI app with tracing middleware\nlifespan: [Name](app: FastAPI) -> [AsyncContextManager] - Async context manager for server lifecycle (startup/shutdown)\nglobal_exception_handler: [Name](request: Request, exc: Exception) -> [JSONResponse] - Handles all uncaught exceptions and translates them to HTTP responses\ntranslate_exception: [Name](exc: Exception) -> [Union[HTTPException, RequestValidationError]] - Converts Python exceptions to appropriate HTTP exceptions\ncreate_dynamic_typed_route: [Name](func: Any, method: str) -> [Callable] - Creates a FastAPI route handler with proper typing and parameter handling\nis_streaming_request: [Name](func_name: str, request: Request, **kwargs) -> [bool] - Determines if a request should be handled as a streaming response\nmaybe_await: [Name](value: Any) -> [Coroutine] - Helper method to await coroutines or return values directly\nsse_generator: [Name](event_gen: AsyncGenerator) -> [AsyncGenerator] - Converts an async generator to Server-Sent Events (SSE) format\ncreate_sse_event: [Name](data: Any) -> [str] - Formats data as an SSE event string",
    "Canonical_solution": "from fastapi import Body, FastAPI, HTTPException, Request\nfrom fastapi.responses import JSONResponse, StreamingResponse\nfrom pydantic import BaseModel\nfrom typing import Any, Union\nimport asyncio\nimport inspect\nimport json\nfrom typing_extensions import Annotated\n\nclass TracingMiddleware:\n    def __init__(self, app):\n        self.app = app\n\n    async def __call__(self, scope, receive, send):\n        path = scope[\"path\"]\n        await start_trace(path, {\"__location__\": \"server\"})\n        try:\n            return await self.app(scope, receive, send)\n        finally:\n            await end_trace()\n\nclass LlamaStackServer:\n    def __init__(self, config):\n        self.config = config\n        self.app = FastAPI(lifespan=self.lifespan)\n        self.app.add_middleware(TracingMiddleware)\n        self.impls = None\n\n    @asynccontextmanager\n    async def lifespan(self, app: FastAPI):\n        print(\"Starting up\")\n        yield\n        print(\"Shutting down\")\n        for impl in app.__llama_stack_impls__.values():\n            await impl.shutdown()\n\n    async def global_exception_handler(self, request: Request, exc: Exception):\n        traceback.print_exception(exc)\n        http_exc = self.translate_exception(exc)\n        return JSONResponse(\n            status_code=http_exc.status_code, \n            content={\"error\": {\"detail\": http_exc.detail}}\n        )\n\n    def translate_exception(self, exc: Exception) -> Union[HTTPException, RequestValidationError]:\n        if isinstance(exc, ValidationError):\n            exc = RequestValidationError(exc.raw_errors)\n\n        if isinstance(exc, RequestValidationError):\n            return HTTPException(\n                status_code=400,\n                detail={\n                    \"errors\": [\n                        {\n                            \"loc\": list(error[\"loc\"]),\n                            \"msg\": error[\"msg\"],\n                            \"type\": error[\"type\"],\n                        }\n                        for error in exc.errors()\n                    ]\n                },\n            )\n        elif isinstance(exc, ValueError):\n            return HTTPException(status_code=400, detail=f\"Invalid value: {str(exc)}\")\n        elif isinstance(exc, PermissionError):\n            return HTTPException(status_code=403, detail=f\"Permission denied: {str(exc)}\")\n        elif isinstance(exc, TimeoutError):\n            return HTTPException(status_code=504, detail=f\"Operation timed out: {str(exc)}\")\n        elif isinstance(exc, NotImplementedError):\n            return HTTPException(status_code=501, detail=f\"Not implemented: {str(exc)}\")\n        else:\n            return HTTPException(\n                status_code=500,\n                detail=\"Internal server error: An unexpected error occurred.\",\n            )\n\n    def create_dynamic_typed_route(self, func: Any, method: str):\n        async def endpoint(request: Request, **kwargs):\n            set_request_provider_data(request.headers)\n\n            is_streaming = self.is_streaming_request(func.__name__, request, **kwargs)\n            try:\n                if is_streaming:\n                    return StreamingResponse(\n                        self.sse_generator(func(**kwargs)), media_type=\"text/event-stream\"\n                    )\n                else:\n                    value = func(**kwargs)\n                    return await self.maybe_await(value)\n            except Exception as e:\n                traceback.print_exception(e)\n                raise self.translate_exception(e) from e\n\n        sig = inspect.signature(func)\n        new_params = [\n            inspect.Parameter(\n                \"request\", inspect.Parameter.POSITIONAL_OR_KEYWORD, annotation=Request\n            )\n        ]\n        new_params.extend(sig.parameters.values())\n\n        if method == \"post\":\n            new_params = [new_params[0]] + [\n                param.replace(annotation=Annotated[param.annotation, Body(..., embed=True)])\n                for param in new_params[1:]\n            ]\n\n        endpoint.__signature__ = sig.replace(parameters=new_params)\n        return endpoint\n\n    def is_streaming_request(self, func_name: str, request: Request, **kwargs):\n        return kwargs.get(\"stream\", False)\n\n    async def maybe_await(self, value):\n        if inspect.iscoroutine(value):\n            return await value\n        return value\n\n    async def sse_generator(self, event_gen):\n        try:\n            event_gen = await event_gen\n            async for item in event_gen:\n                yield self.create_sse_event(item)\n                await asyncio.sleep(0.01)\n        except asyncio.CancelledError:\n            print(\"Generator cancelled\")\n            await event_gen.aclose()\n        except Exception as e:\n            traceback.print_exception(e)\n            yield self.create_sse_event(\n                {\n                    \"error\": {\n                        \"message\": str(self.translate_exception(e)),\n                    },\n                }\n            )\n\n    def create_sse_event(self, data: Any) -> str:\n        if isinstance(data, BaseModel):\n            data = data.model_dump_json()\n        else:\n            data = json.dumps(data)\n        return f\"data: {data}\\n\\n\"",
    "Code_level": "Class-level",
    "FSMID_for_test": 61,
    "right_result": "import uvicorn\nfrom fastapi import FastAPI, Request, HTTPException, RequestValidationError\nfrom fastapi.responses import JSONResponse\nfrom fastapi.exceptions import RequestValidationError\nfrom contextlib import asynccontextmanager\nfrom typing import Any, Callable, Coroutine, Dict, Optional, Union, AsyncGenerator\nimport logging\n\nclass LlamaStackServer:\n    def __init__(self, config: dict):\n        self.config = config\n        self.app = FastAPI()\n        self.impls = None\n        self.setup_tracing_middleware()\n\n    def setup_tracing_middleware(self):\n        @self.app.middleware(\"http\")\n        async def tracing_middleware(request: Request, call_next):\n            start_time = logging.getLogger(__name__).debug(\"Request received\")\n            response = await call_next(request)\n            logging.getLogger(__name__).debug(\"Request processed in %s ms\", (response.headers.get(\"X-Processing-Time\", \"0\") or \"0\"))\n            return response\n\n    @asynccontextmanager\n    async def lifespan(self, app: FastAPI):\n        yield\n\n    def global_exception_handler(self, request: Request, exc: Exception):\n        translated_exc = self.translate_exception(exc)\n        return JSONResponse(\n            status_code=translated_exc.status_code,\n            content={\"detail\": translated_exc.detail}\n        )\n\n    def translate_exception(self, exc: Exception) -> Union[HTTPException, RequestValidationError]:\n        if isinstance(exc, RequestValidationError):\n            return exc\n        return HTTPException(status_code=500, detail=str(exc))\n\n    def create_dynamic_typed_route(self, func: Any, method: str) -> Callable:\n        from fastapi.routing import APIRoute\n        from fastapi import Depends, Query, Path, Body, Form, Cookie, Header, File, UploadFile\n        from typing import List, Optional, Union, Any\n\n        def route_handler(*args, **kwargs):\n            return func(*args, **kwargs)\n\n        route_handler.__annotations__[\"return\"] = func.__annotations__.get(\"return\", Any)\n        route_handler.__doc__ = func.__doc__\n        route_handler.__name__ = func.__name__\n\n        return route_handler\n\n    def is_streaming_request(self, func_name: str, request: Request, **kwargs) -> bool:\n        return func_name.endswith(\"stream\") or any(param in kwargs for param in [\"stream\", \"sse\"])\n\n    async def maybe_await(self, value: Any) -> Coroutine:\n        if hasattr(value, \"__await__\"):\n            return await value\n        return value\n\n    async def sse_generator(self, event_gen: AsyncGenerator) -> AsyncGenerator:\n        async for event in event_gen:\n            yield f\"data: {event}\\n\\n\"\n\n    def create_sse_event(self, data: Any) -> str:\n        return f\"data: {data}\\n\\n\"\n\n    def add_route(self, path: str, endpoint: Callable, methods: list = [\"GET\"], **kwargs):\n        for method in methods:\n            self.app.add_api_route(path, endpoint, methods=[method], **kwargs)\n\n    def run(self, host: str = \"0.0.0.0\", port: int = 8000):\n        uvicorn.run(self.app, host=host, port=port)"
  },
  {
    "Task_id": 126,
    "Instruction": "Task Description: Create a FastAPI-based action server that can execute predefined actions and list available actions through HTTP endpoints.\n\nClass Description: The ActionServer class initializes a FastAPI application with endpoints for running actions and listing available actions. It uses an action dispatcher to handle the execution of actions.\n\nAttributes:\n- _app: FastAPI - The FastAPI application instance that handles HTTP requests.\n- _action_dispatcher: Any - The dispatcher responsible for executing actions and providing the list of registered actions.\n\nMethods:\n- __init__(action_dispatcher: Any) -> None - Initializes the ActionServer with the given action dispatcher and sets up the FastAPI routes.\n- run_action(body: RequestBody) -> Dict[str, str] - Executes the specified action with the given parameters and returns the result and status.\n- get_actions_list() -> Any - Returns the list of available actions from the action dispatcher.\n- get_app() -> FastAPI - Returns the FastAPI application instance for external use.",
    "Canonical_solution": "from fastapi import FastAPI\nfrom pydantic import BaseModel, Field\nfrom typing import Dict, Optional\n\nclass RequestBody(BaseModel):\n    action_name: str = \"\"\n    action_parameters: Dict = Field(\n        default={}, description=\"The list of action parameters.\"\n    )\n\nclass ResponseBody(BaseModel):\n    status: str = \"success\"\n    result: Optional[str]\n\nclass ActionServer:\n    def __init__(self, action_dispatcher):\n        self._app = FastAPI(\n            title=\"Guardrails Action Server API\",\n            description=\"Guardrails Action Sever API.\",\n            version=\"0.1.0\",\n            license_info={\"name\": \"Apache License, Version 2.0\"},\n        )\n        self._action_dispatcher = action_dispatcher\n\n        self._app.post(\n            \"/v1/actions/run\",\n            summary=\"Execute action\",\n            response_model=ResponseBody,\n        )(self.run_action)\n        self._app.get(\n            \"/v1/actions/list\",\n            summary=\"List available actions\",\n        )(self.get_actions_list)\n\n    async def run_action(self, body: RequestBody):\n        result, status = await self._action_dispatcher.execute_action(\n            body.action_name, body.action_parameters\n        )\n        return {\"status\": status, \"result\": result}\n\n    async def get_actions_list(self):\n        return self._action_dispatcher.get_registered_actions()\n\n    def get_app(self):\n        return self._app",
    "Code_level": "Class-level",
    "FSMID_for_test": 61,
    "right_result": "from fastapi import FastAPI, HTTPException\nfrom pydantic import BaseModel\n\nclass RequestBody(BaseModel):\n    action: str\n    parameters: dict\n\nclass ActionServer:\n    def __init__(self, action_dispatcher: Any) -> None:\n        self._app = FastAPI()\n        self._action_dispatcher = action_dispatcher\n        self._setup_routes()\n\n    def _setup_routes(self):\n        @self._app.post(\"/run\")\n        def run_action_endpoint(body: RequestBody):\n            return self.run_action(body)\n\n        @self._app.get(\"/actions\")\n        def get_actions_list_endpoint():\n            return self.get_actions_list()\n\n    def run_action(self, body: RequestBody) -> dict:\n        try:\n            result = self._action_dispatcher.execute_action(body.action, body.parameters)\n            return {\"result\": result, \"status\": \"success\"}\n        except Exception as e:\n            return {\"error\": str(e), \"status\": \"failure\"}\n\n    def get_actions_list(self) -> list:\n        return self._action_dispatcher.get_registered_actions()\n\n    def get_app(self) -> FastAPI:\n        return self._app"
  },
  {
    "Task_id": 127,
    "Instruction": "Task Description: Create a Flask-based HTTP server endpoint that handles incoming POST requests with different content types (JSON, CSV, plain text) and returns predictions from a scoring service in the appropriate format.\n\nFunction Description: The `transformation` function is a Flask route handler for \"/invocations\" endpoint that processes incoming POST requests. It checks the content type of the request, extracts and processes the data accordingly, gets predictions from a scoring service, and returns the results in the corresponding format (JSON for JSON input, CSV for CSV/text input).\n\nInput: \n- The function receives HTTP POST requests through Flask's request object\n- Supported input content types:\n  * application/json: {\"text\": string, \"bing_key\": optional string}\n  * text/csv: CSV file with a \"text\" column\n  * text/plain: Plain text file with one text per line\n\nOutput:\n- For successful processing:\n  * JSON response (for JSON input) containing top 10 predictions\n  * CSV response (for CSV/text input) containing predictions\n- For unsupported content types: 415 error response with plain text message\n\nThe function returns Flask Response objects with:\n- response: The processed data in appropriate format\n- status: HTTP status code (200 for success, 415 for unsupported type)\n- mimetype: Corresponding to the response format",
    "Canonical_solution": "import os\nimport json\nimport flask\nimport pandas as pd\nimport io\nfrom collections import OrderedDict\n\nprefix = \"/opt/ml/\"\nPATH = os.path.join(prefix, \"model\")\n\napp = flask.Flask(__name__)\n\n@app.route(\"/invocations\", methods=[\"POST\"])\ndef transformation():\n    data = None\n    text = None\n\n    if flask.request.content_type == \"application/json\":\n        data = flask.request.get_json(silent=True)\n        text = data[\"text\"]\n        try:\n            bing_key = data[\"bing_key\"]\n        except Exception:\n            bing_key = None\n\n        predictions = ScoringService.predict(text, bing_key)\n        result = json.dumps(predictions[:10])\n        return flask.Response(response=result, status=200, mimetype=\"application/json\")\n\n    elif flask.request.content_type == \"text/csv\":\n        data = flask.request.data.decode(\"utf-8\")\n        df = pd.read_csv(io.StringIO(data), header=\"infer\")\n        predictions = ScoringService.predict_batch(list(df[\"text\"].values))\n\n        out = io.StringIO()\n        pd.DataFrame(predictions).to_csv(out, index=False)\n        result = out.getvalue()\n        return flask.Response(response=result, status=200, mimetype=\"text/csv\")\n\n    elif flask.request.content_type == \"text/plain\":\n        data = flask.request.data.decode(\"utf-8\")\n        s = io.StringIO(data)\n        texts = []\n        for line in s:\n            texts.append(line)\n        predictions = ScoringService.predict_batch(texts)\n        out = io.StringIO()\n        pd.DataFrame(predictions).to_csv(out, index=False)\n        result = out.getvalue()\n        return flask.Response(response=result, status=200, mimetype=\"text/csv\")\n\n    else:\n        return flask.Response(\n            response=\"This predictor only supports JSON, txt or CSV data\",\n            status=415,\n            mimetype=\"text/plain\",\n        )",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, Response\nimport csv\nimport json\nimport requests\n\napp = Flask(__name__)\n\ndef get_predictions(data):\n    # Placeholder for actual scoring service call\n    # This should return a list of predictions\n    return [{\"text\": text, \"score\": 1.0} for text in data]\n\n@app.route(\"/invocations\", methods=[\"POST\"])\ndef transformation():\n    content_type = request.headers.get('Content-Type')\n    if content_type == 'application/json':\n        data = request.json\n        texts = [data['text']]\n        predictions = get_predictions(texts)\n        return Response(json.dumps({\"predictions\": predictions[:10]}), mimetype='application/json', status=200)\n    elif content_type in ('text/csv', 'text/plain'):\n        data = request.data.decode('utf-8')\n        if content_type == 'text/csv':\n            texts = [row['text'] for row in csv.DictReader(data.splitlines())]\n        else:  # text/plain\n            texts = data.splitlines()\n        predictions = get_predictions(texts)\n        csv_response = 'text,score\\n' + '\\n'.join([f'\"{p[\"text\"]}\",{p[\"score\"]}' for p in predictions])\n        return Response(csv_response, mimetype='text/csv', status=200)\n    else:\n        return Response(\"Unsupported content type\", mimetype='text/plain', status=415)"
  },
  {
    "Task_id": 128,
    "Instruction": "Task Description: Create a Python function that initializes and runs a Flask-based HTTP server for a translation service, using Waitress as the production server. The server should handle translation requests and interact with a TranslationServer instance.\n\nFunction Description: The function `start` initializes a Flask application, sets up route prefixing, starts a TranslationServer with the provided configuration, and defines a `/translate` endpoint that handles POST requests for translation. The server runs in production mode using Waitress.\n\nInput:\n- config_file: [str] - Path to the configuration file for the TranslationServer\n- url_root: [str] (optional, default=\"./translator\") - Base URL path for the routes\n- host: [str] (optional, default=\"0.0.0.0\") - Host address to bind the server to\n- port: [int] (optional, default=5000) - Port number to listen on\n- debug: [bool] (optional, default=False) - Debug mode flag (not used with Waitress)\n\nOutput:\n- None: The function doesn't return but starts a blocking HTTP server that handles incoming requests until interrupted. The `/translate` endpoint returns JSON responses containing translation results or error information.",
    "Canonical_solution": "from flask import Flask, jsonify, request\nfrom waitress import serve\nfrom onmt.translate import TranslationServer, ServerModelError\n\nSTATUS_OK = \"ok\"\nSTATUS_ERROR = \"error\"\n\ndef start(config_file, url_root=\"./translator\", host=\"0.0.0.0\", port=5000, debug=False):\n    def prefix_route(route_function, prefix=\"\", mask=\"{0}{1}\"):\n        def newroute(route, *args, **kwargs):\n            return route_function(mask.format(prefix, route), *args, **kwargs)\n        return newroute\n\n    app = Flask(__name__)\n    app.route = prefix_route(app.route, url_root)\n    translation_server = TranslationServer()\n    translation_server.start(config_file)\n\n    @app.route(\"/translate\", methods=[\"POST\"])\n    def translate():\n        inputs = request.get_json(force=True)\n        out = {}\n        try:\n            trans, scores, n_best, _, aligns, align_scores = translation_server.run(\n                inputs\n            )\n            assert len(trans) == len(inputs) * n_best\n            assert len(scores) == len(inputs) * n_best\n            assert len(aligns) == len(inputs) * n_best\n\n            out = [[] for _ in range(n_best)]\n            for i in range(len(trans)):\n                response = {\n                    \"src\": inputs[i // n_best][\"src\"],\n                    \"tgt\": trans[i],\n                    \"n_best\": n_best,\n                    \"pred_score\": scores[i],\n                }\n                if len(aligns[i]) > 0 and aligns[i][0] is not None:\n                    response[\"align\"] = aligns[i]\n                    response[\"align_score\"] = align_scores[i]\n                out[i % n_best].append(response)\n        except ServerModelError as e:\n            model_id = inputs[0].get(\"id\")\n            translation_server.models[model_id].unload()\n            out[\"error\"] = str(e)\n            out[\"status\"] = STATUS_ERROR\n        return jsonify(out)\n\n    serve(app, host=host, port=port)",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "import os\nimport json\nfrom flask import Flask, request, jsonify\nfrom waitress import serve\nfrom translation_server import TranslationServer\n\ndef start(config_file, url_root='./translator', host='0.0.0.0', port=5000, debug=False):\n    app = Flask(__name__)\n    app.url_map.strict_slashes = False\n    app.config['URL_ROOT'] = url_root\n\n    translation_server = TranslationServer(config_file)\n\n    @app.route(f'/{url_root}/translate', methods=['POST'])\n    def translate():\n        data = request.get_json()\n        if not data or 'text' not in data or 'target_lang' not in data:\n            return jsonify({'error': 'Missing required fields \"text\" or \"target_lang\"'}), 400\n\n        text = data['text']\n        target_lang = data['target_lang']\n\n        try:\n            translated_text = translation_server.translate(text, target_lang)\n            return jsonify({'translation': translated_text})\n        except Exception as e:\n            return jsonify({'error': str(e)}), 500\n\n    def run():\n        serve(app, host=host, port=port)\n\n    run()"
  },
  {
    "Task_id": 130,
    "Instruction": "Task Description: Create a Flask-based HTTP server with multiple endpoints to handle different types of requests, including delayed responses, request method identification, and JSON responses.\n\nFunction Description: The code implements three Flask route handlers that demonstrate different HTTP server functionalities. Each function handles a specific endpoint and performs a distinct operation.\n\nInput:\n- For '/respond' endpoint: \n  - Query parameter: 'time' (integer) - milliseconds to sleep before responding\n- For '/request_type' endpoint: \n  - None (automatically receives request method via Flask's request object)\n- For '/json' endpoint: \n  - None\n\nOutput:\n- For '/respond' endpoint: \n  - Response text: 'Response from Flask' after specified delay\n  - Header: Sets 'Access-Control-Allow-Origin' to '*'\n- For '/request_type' endpoint: \n  - Response text: String indicating the HTTP request method used\n  - Header: Sets 'Access-Control-Allow-Origin' to '*'\n- For '/json' endpoint: \n  - Response: JSON object {'resp': 'Hello JSON!'}",
    "Canonical_solution": "from flask import Flask, request, make_response\nfrom time import sleep\n\napp = Flask(__name__)\n\n@app.route('/respond')\ndef respond():\n    time_to_sleep = int(request.args.get('time')) / 1000\n    sleep(time_to_sleep)\n    resp = make_response('Response from Flask')\n    resp.headers['Access-Control-Allow-Origin'] = '*'\n    return resp\n\n@app.route('/request_type')\ndef request_type():\n    resp = make_response('Request Type: ' + request.method)\n    resp.headers['Access-Control-Allow-Origin'] = '*'\n    return resp\n\n@app.route('/json')\ndef json():\n    return {resp:'Hello JSON!'}",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n@app.route('/respond')\ndef respond():\n    time = int(request.args.get('time', 0))\n    if time > 0:\n        import time\n        time.sleep(time / 1000)\n    return 'Response from Flask', {'Access-Control-Allow-Origin': '*'}\n\n@app.route('/request_type')\ndef request_type():\n    method = request.method\n    return f'Request method: {method}', {'Access-Control-Allow-Origin': '*'}\n\n@app.route('/json')\ndef json_response():\n    return jsonify({'resp': 'Hello JSON!'})\n\nif __name__ == '__main__':\n    app.run(debug=True)"
  },
  {
    "Task_id": 131,
    "Instruction": "Task Description: Create a Flask-based HTTP server for handling subscription requests that generates configuration files for various proxy clients based on user agent and request parameters.\n\nClass Description: SubscriptionServer is a Flask application wrapper that handles subscription requests and generates appropriate configuration files for different proxy clients (Clash, WireGuard, Surge, etc.). It includes route setup, request handling, and response generation logic.\n\nAttributes:\n- app: Flask - The Flask application instance\n- logger: logging.Logger - Logger instance for application logging\n- fake: Faker - Faker instance for generating random names\n\nMethods:\n- __init__(app_name: str = \"web\", logger: logging.Logger = None) -> None - Initializes the Flask application, sets up logging, and configures routes\n- _setup_routes() -> None - Sets up the Flask routes for handling subscription requests\n- _handle_subscription(sub_type: str) -> Any - Processes subscription requests and generates appropriate configuration files based on the subscription type\n- run(host: str = '0.0.0.0', port: int = 5000, debug: bool = True) -> None - Starts the Flask server with specified host, port and debug settings",
    "Canonical_solution": "from flask import Flask, request, make_response\nimport logging\nfrom faker import Faker\nfrom typing import Dict, Any\n\nclass SubscriptionServer:\n    def __init__(self, app_name: str = \"web\", logger: logging.Logger = None):\n        self.app = Flask(app_name)\n        self.logger = logger if logger else logging.getLogger()\n        self.fake = Faker()\n        \n        # Configure logger\n        for handler in self.app.logger.handlers:\n            self.app.logger.removeHandler(handler)\n        for handler in self.logger.handlers:\n            self.app.logger.addHandler(handler)\n        self.app.logger.setLevel(self.logger.level)\n        \n        self._setup_routes()\n\n    def _setup_routes(self):\n        @self.app.route('/sub', methods=['GET'])\n        def httpAutoSub():\n            user_agent = request.headers.get('User-Agent', 'unknown').lower()\n            sub_type = getSubTypeFromUA(user_agent)\n            return self._handle_subscription(sub_type)\n\n        @self.app.route('/api/<string:sub_type>', methods=['GET'])\n        def httpSubscription(sub_type: str):\n            return self._handle_subscription(sub_type)\n\n    def _handle_subscription(self, sub_type: str) -> Any:\n        user_agent = request.headers.get('User-Agent', 'unknown').lower()\n        account = getCurrentAccount(self.logger)\n        best = request.args.get('best', 'false').lower() == \"true\" or False\n        random_name = request.args.get('randomName', 'false').lower() == \"true\" or False\n        proxy_format = request.args.get('proxyFormat', 'full').lower()\n        ipv6 = request.args.get('ipv6', 'false').lower() == \"true\" or False\n\n        headers = {\n            'Content-Type': 'application/x-yaml; charset=utf-8',\n            \"Subscription-Userinfo\": f\"upload=0; download={account.usage}; total={account.quota}; \"\n                                    f\"expire=253388144714\"\n        }\n\n        is_android = \"android\" in user_agent\n\n        if sub_type == \"clash\":\n            file_data = generateClashSubFile(account, self.logger, best=best, proxy_format=proxy_format,\n                                           random_name=random_name, is_android=is_android, is_meta=False, ipv6=ipv6)\n            file_name = f'Clash-{self.fake.color_name()}.yaml'\n        elif sub_type == \"meta\":\n            file_data = generateClashSubFile(account, self.logger, best=best, proxy_format=proxy_format,\n                                           random_name=random_name, is_android=is_android, is_meta=True, ipv6=ipv6)\n            file_name = f'Clash-{self.fake.color_name()}.yaml'\n        elif sub_type == \"wireguard\":\n            file_data = generateWireguardSubFile(account, self.logger, best=best, ipv6=ipv6)\n            file_name = f'WireGuard-{self.fake.lexify(\"????????????\").lower()}.conf'\n        elif sub_type == \"surge\":\n            file_data = generateSurgeSubFile(account, self.logger, best=best, random_name=random_name,\n                                           proxy_format=proxy_format, ipv6=ipv6)\n            file_name = f'Surge-{self.fake.color_name()}.conf'\n        elif sub_type == 'shadowrocket':\n            file_data = generateShadowRocketSubFile(account, self.logger, best=best, random_name=random_name, ipv6=ipv6)\n            file_name = f'Shadowrocket-{self.fake.color_name()}.conf'\n        elif sub_type == 'sing-box':\n            file_data = generateSingBoxSubFile(account, self.logger, best=best, random_name=random_name, ipv6=ipv6)\n            file_name = f'SingBox-{self.fake.color_name()}.json'\n        elif sub_type == 'loon':\n            file_data = generateLoonSubFile(account, self.logger, best=best, random_name=random_name, ipv6=ipv6)\n            file_name = f'Loon-{self.fake.color_name()}.conf'\n        elif sub_type == \"only_proxies\":\n            file_data = generateClashSubFile(account, self.logger, best=best, proxy_format='with_groups',\n                                           random_name=random_name, ipv6=ipv6)\n            file_name = f'Clash-{self.fake.color_name()}.yaml'\n        else:\n            return {\n                'code': 400,\n                'message': 'Unsupported sub type.'\n            }, 400\n\n        headers['Content-Disposition'] = f'attachment; filename=\"{file_name}\"'\n        response = make_response(file_data)\n        response.headers = headers\n        return response\n\n    def run(self, host: str = '0.0.0.0', port: int = 5000, debug: bool = True):\n        self.app.run(host=host, port=port, debug=debug)",
    "Code_level": "Class-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, Response\nimport logging\nfrom faker import Faker\n\nclass SubscriptionServer:\n    def __init__(self, app_name: str = \"web\", logger: logging.Logger = None) -> None:\n        self.app = Flask(app_name)\n        self.logger = logger or logging.getLogger(__name__)\n        self.fake = Faker()\n        self._setup_routes()\n\n    def _setup_routes(self) -> None:\n        self.app.add_url_rule('/subscribe', view_func=self._handle_subscription, methods=['GET'])\n\n    def _handle_subscription(self, sub_type: str) -> Any:\n        try:\n            if sub_type == 'clash':\n                config = self._generate_clash_config()\n            elif sub_type == 'wireguard':\n                config = self._generate_wireguard_config()\n            elif sub_type == 'surge':\n                config = self._generate_surge_config()\n            else:\n                return Response(\"Unsupported subscription type\", status=400)\n\n            return Response(config, mimetype='application/octet-stream')\n        except Exception as e:\n            self.logger.error(f\"Error handling subscription request: {str(e)}\")\n            return Response(\"Internal server error\", status=500)\n\n    def _generate_clash_config(self):\n        return f\"\"\"\n        [Proxy]\n        Name = {self.fake.name()}\n        Type = HTTP\n        Server = example.com\n        Port = 80\n        Username = {self.fake.email()}\n        Password = {self.fake.password()}\n        \"\"\"\n\n    def _generate_wireguard_config(self):\n        return f\"\"\"\n        [Interface]\n        PrivateKey = {self.fake.password()}\n        Address = {self.fake.ipv4()}\n        DNS = 8.8.8.8\n\n        [Peer]\n        PublicKey = {self.fake.password()}\n        Endpoint = example.com:51820\n        AllowedIPs = 0.0.0.0/0\n        \"\"\"\n\n    def _generate_surge_config(self):\n        return f\"\"\"\n        [Proxy]\n        Name = {self.fake.name()}\n        Type = HTTP\n        Server = example.com\n        Port = 80\n        Username = {self.fake.email()}\n        Password = {self.fake.password()}\n        \"\"\"\n\n    def run(self, host: str = '0.0.0.0', port: int = 5000, debug: bool = True) -> None:\n        self.app.run(host=host, port=port, debug=debug)"
  },
  {
    "Task_id": 132,
    "Instruction": "Task Description: Create a Flask web application that serves HTML templates and CSV files based on user requests.\n\nFunction Description: The application consists of two main routes: one for serving the main HTML page and another for serving CSV files based on a user ID parameter.\n\nInput:\n- For index(): No input parameters\n- For get_data_for_uid(uid): \n  uid: int - The user ID used to locate the corresponding CSV file\n\nOutput:\n- For index(): Returns the rendered main.html template\n- For get_data_for_uid(uid): Returns the CSV file corresponding to the given user ID or raises a 404 error if not found",
    "Canonical_solution": "from flask import Flask, render_template, send_file\n\napp = Flask('stalky')\n\n@app.route('/')\ndef index():\n    return render_template(\"main.html\")\n\n@app.route('/data/<int:uid>')\ndef get_data_for_uid(uid):\n    return send_file(\"generated_graphs/csv/{uid}.csv\".format(uid=uid))\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', debug=True)",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, render_template, send_from_directory, abort\nimport os\n\napp = Flask(__name__)\nCSV_DIR = 'csv_files'\n\n@app.route('/')\ndef index():\n    return render_template('main.html')\n\n@app.route('/data/<int:uid>')\ndef get_data_for_uid(uid):\n    csv_path = os.path.join(CSV_DIR, f'{uid}.csv')\n    if not os.path.exists(csv_path):\n        abort(404)\n    return send_from_directory(CSV_DIR, f'{uid}.csv')\n\nif __name__ == '__main__':\n    app.run(debug=True)"
  },
  {
    "Task_id": 134,
    "Instruction": "Task Description: Create a Flask-based web application for sentiment analysis of movie reviews that allows users to submit reviews, get sentiment predictions, and provide feedback to improve the classifier.\n\nClass Description: ReviewClassifier is a Flask web application that classifies movie reviews as positive or negative using a pre-trained classifier. It provides an interface for users to submit reviews, view predictions, and give feedback which is used to update the classifier and store in a SQLite database.\n\nAttributes:\n- app: [Flask] - The Flask application instance\n- clf: [sklearn classifier] - Pre-trained sentiment classifier loaded from pickle file\n- db: [str] - Path to SQLite database file for storing reviews\n- vect: [sklearn vectorizer] - Text vectorizer for feature extraction\n\nMethods:\n- __init__: [constructor]() -> None - Initializes the Flask app, loads classifier and vectorizer, sets up routes\n- classify: [classify](document: str) -> tuple[str, float] - Classifies a review document and returns (sentiment_label, probability)\n- train: [train](document: str, y: int) -> None - Updates classifier with new training example\n- sqlite_entry: [sqlite_entry](document: str, y: int) -> None - Stores review and sentiment in database\n- index: [index]() -> str - Renders main review submission form\n- results: [results]() -> str - Processes submitted review and renders prediction results\n- feedback: [feedback]() -> str - Handles user feedback and updates model/database\n- run: [run]() -> None - Starts the Flask development server",
    "Canonical_solution": "from flask import Flask, request, render_template\nfrom wtforms import Form, TextAreaField, validators\nimport pickle\nimport sqlite3\nimport os\nimport numpy as np\nfrom vectorizer import vect\n\nclass ReviewClassifier:\n    def __init__(self):\n        self.app = Flask(__name__)\n        cur_dir = os.path.dirname(__file__)\n        self.clf = pickle.load(open(os.path.join(cur_dir, 'pkl_objects', 'classifier.pkl'), 'rb'))\n        self.db = os.path.join(cur_dir, 'reviews.sqlite')\n        self.vect = vect\n        \n        self.app.route('/')(self.index)\n        self.app.route('/results', methods=['POST'])(self.results)\n        self.app.route('/thanks', methods=['POST'])(self.feedback)\n\n    def classify(self, document):\n        label = {0: 'negative', 1: 'positive'}\n        X = self.vect.transform([document])\n        y = self.clf.predict(X)[0]\n        proba = np.max(self.clf.predict_proba(X))\n        return label[y], proba\n\n    def train(self, document, y):\n        X = self.vect.transform([document])\n        self.clf.partial_fit(X, [y])\n\n    def sqlite_entry(self, document, y):\n        conn = sqlite3.connect(self.db)\n        c = conn.cursor()\n        c.execute(\"INSERT INTO review_db (review, sentiment, date) VALUES (?, ?, DATETIME('now'))\", (document, y))\n        conn.commit()\n        conn.close()\n\n    def index(self):\n        form = ReviewForm(request.form)\n        return render_template('reviewform.html', form=form)\n\n    def results(self):\n        form = ReviewForm(request.form)\n        if request.method == 'POST' and form.validate():\n            review = request.form['moviereview']\n            y, proba = self.classify(review)\n            return render_template('results.html',\n                                content=review,\n                                prediction=y,\n                                probability=round(proba*100, 2))\n        return render_template('reviewform.html', form=form)\n\n    def feedback(self):\n        feedback = request.form['feedback_button']\n        review = request.form['review']\n        prediction = request.form['prediction']\n\n        inv_label = {'negative': 0, 'positive': 1}\n        y = inv_label[prediction]\n        if feedback == 'Incorrect':\n            y = int(not(y))\n        self.train(review, y)\n        self.sqlite_entry(review, y)\n        return render_template('thanks.html')\n\n    def run(self):\n        self.app.run(debug=True)\n\nclass ReviewForm(Form):\n    moviereview = TextAreaField('',\n                            [validators.DataRequired(),\n                            validators.length(min=15)])",
    "Code_level": "Class-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, render_template, redirect, url_for\nimport sqlite3\nimport pickle\nimport numpy as np\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\nclass ReviewClassifier:\n    def __init__(self, db_path='reviews.db'):\n        self.app = Flask(__name__)\n        self.clf = self.load_classifier()\n        self.vect = self.load_vectorizer()\n        self.db = db_path\n        self.setup_routes()\n\n    def load_classifier(self):\n        with open('classifier.pkl', 'rb') as f:\n            return pickle.load(f)\n\n    def load_vectorizer(self):\n        with open('vectorizer.pkl', 'rb') as f:\n            return pickle.load(f)\n\n    def setup_routes(self):\n        @self.app.route('/', methods=['GET', 'POST'])\n        def index():\n            if request.method == 'POST':\n                review = request.form['review']\n                sentiment, prob = self.classify(review)\n                return redirect(url_for('results', review=review, sentiment=sentiment, prob=prob))\n            return render_template('index.html')\n\n        @self.app.route('/results/<review>/<sentiment>/<prob>')\n        def results(review, sentiment, prob):\n            return render_template('results.html', review=review, sentiment=sentiment, prob=float(prob))\n\n        @self.app.route('/feedback', methods=['POST'])\n        def feedback():\n            review = request.form['review']\n            y = int(request.form['feedback'])\n            self.train(review, y)\n            self.sqlite_entry(review, y)\n            return redirect(url_for('index'))\n\n    def classify(self, document):\n        vectorized = self.vect.transform([document])\n        prediction = self.clf.predict(vectorized)\n        probability = self.clf.predict_proba(vectorized)[0][prediction[0]]\n        return prediction[0], probability\n\n    def train(self, document, y):\n        vectorized = self.vect.transform([document])\n        self.clf.partial_fit(vectorized, [y], classes=[0, 1])\n\n    def sqlite_entry(self, document, y):\n        conn = sqlite3.connect(self.db)\n        c = conn.cursor()\n        c.execute(\"CREATE TABLE IF NOT EXISTS reviews (id INTEGER PRIMARY KEY AUTOINCREMENT, review TEXT, sentiment INTEGER)\")\n        c.execute(\"INSERT INTO reviews (review, sentiment) VALUES (?, ?)\", (document, y))\n        conn.commit()\n        conn.close()\n\n    def run(self):\n        self.app.run(debug=True)"
  },
  {
    "Task_id": 135,
    "Instruction": "Task Description: Create a Flask-based HTTP server with multiple endpoints to handle different types of requests, including delayed responses, request type identification, and JSON responses.\n\nFunction Description: The code sets up a Flask web server with three routes:\n1. '/respond' - Simulates a delayed response based on an input parameter\n2. '/request_type' - Returns the HTTP method used in the request\n3. '/json' - Returns a simple JSON response\n\nInput:\n- For '/respond' route: Query parameter 'time' (in milliseconds)\n- For other routes: No specific input parameters required\n\nOutput:\n- For '/respond': A text response after specified delay with CORS headers\n- For '/request_type': A text response indicating the request method with CORS headers\n- For '/json': A JSON response with a greeting message",
    "Canonical_solution": "from flask import Flask, request, make_response\nfrom time import sleep\n\napp = Flask(__name__)\n\n@app.route('/respond')\ndef respond():\n    time_to_sleep = int(request.args.get('time')) / 1000\n    sleep(time_to_sleep)\n    resp = make_response('Response from Flask')\n    resp.headers['Access-Control-Allow-Origin'] = '*'\n    return resp\n\n@app.route('/request_type')\ndef request_type():\n    resp = make_response('Request Type: ' + request.method)\n    resp.headers['Access-Control-Allow-Origin'] = '*'\n    return resp\n\n@app.route('/json')\ndef json():\n    return {resp:'Hello JSON!'}\n\nif __name__ == '__main__':\n    app.run()",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, jsonify\nimport time\nimport json\n\napp = Flask(__name__)\n\n@app.route('/respond')\ndef respond():\n    delay_ms = int(request.args.get('time', 0))\n    time.sleep(delay_ms / 1000)\n    response = \"Delayed response received\"\n    return response, 200, [('Access-Control-Allow-Origin', '*')]\n\n@app.route('/request_type')\ndef request_type():\n    method = request.method\n    return f\"Request method: {method}\", 200, [('Access-Control-Allow-Origin', '*')]\n\n@app.route('/json')\ndef json_response():\n    data = {\"message\": \"Hello from JSON endpoint\"}\n    return jsonify(data), 200, [('Access-Control-Allow-Origin', '*')]\n\nif __name__ == '__main__':\n    app.run(debug=True)"
  },
  {
    "Task_id": 138,
    "Instruction": "Task Description: Create a Flask-based HTTP server endpoint that processes credit card application data and returns a prediction result indicating the probability of approval and a binary decision.\n\nFunction Description: The function implements a prediction endpoint for a credit card approval system. It receives client data in JSON format, processes it through a machine learning model (using pre-loaded `dv` for feature transformation and `model` for prediction), and returns the prediction results including the approval probability and a binary decision.\n\nInput: \n- JSON payload containing client data for credit card application (received via HTTP POST request)\n\nOutput: \n- JSON response containing:\n  - 'get_card_probability': float - Probability of getting the credit card (between 0 and 1)\n  - 'get_card': boolean - Binary decision indicating whether the card is approved (True if probability \u2265 0.5)",
    "Canonical_solution": "from flask import Flask\nfrom flask import request\nfrom flask import jsonify\n\napp = Flask('credict-card')\n\n@app.route('/predict', methods=['POST'])\ndef predict():\n    client = request.get_json()\n\n    X = dv.transform([client])\n    y_pred = model.predict_proba(X)[0, 1]\n    get_card = y_pred >= 0.5\n\n    result = {\n        'get_card_probability': float(y_pred),\n        'get_card': bool(get_card)\n    }\n\n    return jsonify(result)\n\nif __name__ == \"__main__\":\n    app.run(debug=True, host='0.0.0.0', port=9696)",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, jsonify\nimport pandas as pd\n\napp = Flask(__name__)\n\n# Pre-loaded model and data transformer (example placeholders)\ndv = None  # Replace with actual feature transformer\nmodel = None  # Replace with actual trained model\n\n@app.route('/predict', methods=['POST'])\ndef predict():\n    data = request.get_json()\n    df = pd.DataFrame([data])\n    X = dv.transform(df)\n    probability = model.predict_proba(X)[:, 1][0]\n    decision = probability >= 0.5\n    return jsonify({\n        'get_card_probability': float(probability),\n        'get_card': bool(decision)\n    })\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=9696)"
  },
  {
    "Task_id": 139,
    "Instruction": "Task Description: Create a Flask-based API service that handles document ingestion, question answering using a language model, and model downloading functionality.\n\nClass Description: FlaskAPI is a class that encapsulates a Flask web service for document processing and question answering. It provides endpoints for ingesting documents, querying an AI model, and downloading the required model files.\n\nAttributes:\n- app: Flask - The Flask application instance\n- embeddings_model_name: str - Name of the embeddings model to use\n- persist_directory: str - Directory to store persistent data\n- model_type: str - Type of the language model\n- model_path: str - Path to the model file\n- model_n_ctx: str - Context size for the model\n- llm: GPT4All - The language model instance\n\nMethods:\n- __init__() -> None - Initializes the Flask application and sets up CORS\n- _setup_routes() -> None - Defines all API routes and their handlers\n- _load_documents(source_dir: str) -> List[Document] - Loads documents from a directory\n- _load_single_document(file_path: str) -> Document - Loads a single document\n- run() -> None - Starts the Flask server\n- _load_model() -> None - Loads the language model if available\n\nRoute Handlers (internal methods):\n- ingest_data() -> Response - Handles document ingestion (GET /ingest)\n- get_answer() -> Response - Handles question answering (POST /get_answer)\n- download_and_save() -> Response - Handles model downloading (GET /download_model)\n\nThe class integrates with LangChain for document processing and GPT4All for local language model inference, providing a complete API for document-based question answering.",
    "Canonical_solution": "from flask import Flask, jsonify, request\nfrom flask_cors import CORS\nimport os\nimport glob\nfrom typing import List\nimport requests\nfrom langchain.chains import RetrievalQA\nfrom langchain.embeddings import HuggingFaceEmbeddings\nfrom langchain.callbacks.streaming_stdout import StreamingStdOutCallbackHandler\nfrom langchain.vectorstores import Chroma\nfrom langchain.llms import GPT4All\nfrom constants import CHROMA_SETTINGS\n\nclass FlaskAPI:\n    def __init__(self):\n        self.app = Flask(__name__)\n        CORS(self.app)\n        self.embeddings_model_name = os.environ.get(\"EMBEDDINGS_MODEL_NAME\")\n        self.persist_directory = os.environ.get('PERSIST_DIRECTORY')\n        self.model_type = os.environ.get('MODEL_TYPE')\n        self.model_path = os.environ.get('MODEL_PATH')\n        self.model_n_ctx = os.environ.get('MODEL_N_CTX')\n        self.llm = None\n        self._setup_routes()\n\n    def _setup_routes(self):\n        @self.app.route('/ingest', methods=['GET'])\n        def ingest_data():\n            source_directory = os.environ.get('SOURCE_DIRECTORY', 'source_documents')\n            print(f\"Loading documents from {source_directory}\")\n            chunk_size = 500\n            chunk_overlap = 50\n            documents = self._load_documents(source_directory)\n            text_splitter = RecursiveCharacterTextSplitter(chunk_size=chunk_size, chunk_overlap=chunk_overlap)\n            texts = text_splitter.split_documents(documents)\n            print(f\"Loaded {len(documents)} documents from {source_directory}\")\n            print(f\"Split into {len(texts)} chunks of text (max. {chunk_size} characters each)\")\n\n            embeddings = HuggingFaceEmbeddings(model_name=self.embeddings_model_name)\n            db = Chroma.from_documents(texts, embeddings, persist_directory=self.persist_directory, client_settings=CHROMA_SETTINGS)\n            db.persist()\n            db = None\n            return jsonify(response=\"Success\")\n\n        @self.app.route('/get_answer', methods=['POST'])\n        def get_answer():\n            query = request.json\n            embeddings = HuggingFaceEmbeddings(model_name=self.embeddings_model_name)\n            db = Chroma(persist_directory=self.persist_directory, embedding_function=embeddings, client_settings=CHROMA_SETTINGS)\n            retriever = db.as_retriever()\n            if self.llm is None:\n                return \"Model not downloaded\", 400    \n            qa = RetrievalQA.from_chain_type(llm=self.llm, chain_type=\"stuff\", retriever=retriever, return_source_documents=True)\n            if query is not None and query != \"\":\n                res = qa(query)\n                answer, docs = res['result'], res['source_documents']\n                source_data = [{\"name\": document.metadata[\"source\"]} for document in docs]\n                return jsonify(query=query, answer=answer, source=source_data)\n            return \"Empty Query\", 400\n\n        @self.app.route('/download_model', methods=['GET'])\n        def download_and_save():\n            url = 'https://gpt4all.io/models/ggml-gpt4all-j-v1.3-groovy.bin'\n            filename = 'ggml-gpt4all-j-v1.3-groovy.bin'\n            models_folder = 'models'\n\n            if not os.path.exists(models_folder):\n                os.makedirs(models_folder)\n            response = requests.get(url, stream=True)\n            total_size = int(response.headers.get('content-length', 0))\n            bytes_downloaded = 0\n            file_path = f'{models_folder}/{filename}'\n            if os.path.exists(file_path):\n                return jsonify(response=\"Download completed\")\n\n            with open(file_path, 'wb') as file:\n                for chunk in response.iter_content(chunk_size=4096):\n                    file.write(chunk)\n                    bytes_downloaded += len(chunk)\n                    progress = round((bytes_downloaded / total_size) * 100, 2)\n                    print(f'Download Progress: {progress}%')\n            callbacks = [StreamingStdOutCallbackHandler()]\n            self.llm = GPT4All(model=self.model_path, n_ctx=self.model_n_ctx, backend='gptj', callbacks=callbacks, verbose=False)\n            return jsonify(response=\"Download completed\")\n\n    def _load_documents(self, source_dir: str) -> List[Document]:\n        all_files = []\n        for ext in LOADER_MAPPING:\n            all_files.extend(glob.glob(os.path.join(source_dir, f\"**/*{ext}\"), recursive=True))\n        return [self._load_single_document(file_path) for file_path in all_files]\n\n    def _load_single_document(self, file_path: str) -> Document:\n        ext = \".\" + file_path.rsplit(\".\", 1)[-1]\n        if ext in LOADER_MAPPING:\n            loader_class, loader_args = LOADER_MAPPING[ext]\n            loader = loader_class(file_path, **loader_args)\n            return loader.load()[0]\n        raise ValueError(f\"Unsupported file extension '{ext}'\")\n\n    def run(self):\n        self._load_model()\n        self.app.run(host=\"0.0.0.0\", debug=False)\n\n    def _load_model(self):\n        filename = 'ggml-gpt4all-j-v1.3-groovy.bin'\n        models_folder = 'models'\n        file_path = f'{models_folder}/{filename}'\n        if os.path.exists(file_path):\n            callbacks = [StreamingStdOutCallbackHandler()]\n            self.llm = GPT4All(model=self.model_path, n_ctx=self.model_n_ctx, backend='gptj', callbacks=callbacks, verbose=False)",
    "Code_level": "Class-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, jsonify, send_file\nfrom flask_cors import CORS\nimport os\nimport json\nfrom langchain.document_loaders import DirectoryLoader, PyPDFLoader\nfrom langchain.text_splitter import RecursiveCharacterTextSplitter\nfrom langchain.vectorstores import FAISS\nfrom langchain.embeddings import GPT4AllEmbeddings\nfrom langchain.chains import RetrievalQA\nfrom gpt4all import GPT4All\n\nclass FlaskAPI:\n    def __init__(self):\n        self.app = Flask(__name__)\n        self.embeddings_model_name = \"ggml-mistral-7b-instruct-q8_0\"\n        self.persist_directory = \"vectorstore\"\n        self.model_type = \"gpt4all\"\n        self.model_path = \"orca-mini-3b-gguf/q4_0/orca-mini-3b.gguf\"\n        self.model_n_ctx = \"2048\"\n        self.llm = None\n        CORS(self.app)\n        self._setup_routes()\n\n    def _setup_routes(self):\n        @self.app.route('/ingest', methods=['GET'])\n        def ingest_data():\n            source_dir = \"documents\"\n            if not os.path.exists(source_dir):\n                return jsonify({\"error\": \"Document directory not found\"}), 404\n            documents = self._load_documents(source_dir)\n            texts = [doc.page_content for doc in documents]\n            text_splitter = RecursiveCharacterTextSplitter(chunk_size=1000, chunk_overlap=200)\n            texts = text_splitter.split_text(\"\\n\\n\".join(texts))\n            embeddings = GPT4AllEmbeddings(model_name=self.embeddings_model_name)\n            vectorstore = FAISS.from_texts(texts, embeddings, persist_directory=self.persist_directory)\n            vectorstore.save_local(self.persist_directory)\n            return jsonify({\"message\": \"Documents ingested and vector store created\"}), 200\n\n        @self.app.route('/get_answer', methods=['POST'])\n        def get_answer():\n            data = request.get_json()\n            question = data.get('question')\n            if not question:\n                return jsonify({\"error\": \"No question provided\"}), 400\n            if not self.llm:\n                return jsonify({\"error\": \"Model not loaded\"}), 500\n            retriever = FAISS.load_local(self.persist_directory, GPT4AllEmbeddings(model_name=self.embeddings_model_name))\n            qa_chain = RetrievalQA.from_chain_type(\n                self.llm,\n                retriever=retriever,\n                return_source_documents=True\n            )\n            result = qa_chain({\"query\": question})\n            return jsonify({\"answer\": result[\"result\"], \"source_documents\": [doc.page_content for doc in result[\"source_documents\"]]})\n\n        @self.app.route('/download_model', methods=['GET'])\n        def download_and_save():\n            model_url = \"https://example.com/models/orca-mini-3b.gguf\"\n            model_path = self.model_path\n            if os.path.exists(model_path):\n                return send_file(model_path, as_attachment=True)\n            else:\n                # Simulate downloading the model\n                os.makedirs(os.path.dirname(model_path), exist_ok=True)\n                with open(model_path, 'w') as f:\n                    f.write(\"Model file content\")\n                return send_file(model_path, as_attachment=True)\n\n    def _load_documents(self, source_dir):\n        loader = DirectoryLoader(source_dir, glob=\"*.pdf\", loader_cls=PyPDFLoader)\n        documents = loader.load()\n        return documents\n\n    def _load_single_document(self, file_path):\n        loader = PyPDFLoader(file_path)\n        document = loader.load()\n        return document\n\n    def run(self):\n        self._load_model()\n        self.app.run(host='0.0.0.0', port=5000)\n\n    def _load_model(self):\n        if not os.path.exists(self.model_path):\n            print(\"Model not found, skipping loading.\")\n            return\n        self.llm = GPT4All(model=self.model_path, model_type=self.model_type, n_ctx=int(self.model_n_ctx))"
  },
  {
    "Task_id": 140,
    "Instruction": "Task Description: Create a Flask-based HTTP server endpoint that converts text to speech (TTS) and returns the generated audio as a WAV file.\n\nFunction Description: The function `tts()` is a Flask route handler that processes GET requests to the '/api/tts' endpoint. It takes text input as a query parameter, synthesizes it into speech using a TTS synthesizer, and returns the audio as a WAV file in the response.\n\nInput: \n- text: [str] (passed as a query parameter 'text' in the GET request) - The text to be converted to speech.\n\nOutput:\n- [Flask Response] - A response containing the synthesized audio in WAV format with the appropriate MIME type ('audio/wav'). The audio data is streamed from memory using a BytesIO buffer.\n\nNote: The function assumes the existence of a pre-initialized `synthesizer` object capable of performing TTS (text-to-speech) conversion and saving the output as WAV format. The actual implementation of the synthesizer is not shown in this reference code.",
    "Canonical_solution": "from flask import Flask, render_template, request, send_file\nimport io\n\napp = Flask(__name__)\n\n@app.route('/api/tts', methods=['GET'])\ndef tts():\n    text = request.args.get('text')\n    print(\" > Model input: {}\".format(text))\n    wavs = synthesizer.tts(text)\n    out = io.BytesIO()\n    synthesizer.save_wav(wavs, out)\n    return send_file(out, mimetype='audio/wav')\n\ndef main():\n    app.run(debug=args.debug, host='0.0.0.0', port=args.port)",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, Response\nimport io\n\napp = Flask(__name__)\n\n@app.route('/api/tts', methods=['GET'])\ndef tts():\n    text = request.args.get('text')\n    buffer = io.BytesIO()\n    synthesizer.save_wav(buffer, text)\n    buffer.seek(0)\n    return Response(buffer.read(), mimetype='audio/wav')\n\nif __name__ == '__main__':\n    app.run()"
  },
  {
    "Task_id": 141,
    "Instruction": "Task Description: Create a Flask-based HTTP server that handles various file serving endpoints and a video processing endpoint, with CORS support.\n\nFunction Description: The code implements a Flask web server with multiple routes for serving different types of files (videos, posters, uploads) and processing video streams. It includes health check, file serving, and video propagation endpoints.\n\nInput:\n- For healthy(): None\n- For send_gallery_video(path: str): path parameter as string\n- For send_poster_image(path: str): path parameter as string\n- For send_uploaded_video(path: str): path parameter as string\n- For propagate_in_video(): JSON payload containing session_id and optional start_frame_index\n\nOutput:\n- healthy(): Returns \"OK\" with HTTP status 200\n- send_gallery_video(): Returns file from GALLERY_PATH or raises ValueError\n- send_poster_image(): Returns file from POSTERS_PATH or raises ValueError\n- send_uploaded_video(): Returns file from UPLOADS_PATH or raises ValueError\n- propagate_in_video(): Returns multipart video stream with tracking masks",
    "Canonical_solution": "from flask import Flask, make_response, Request, request, Response, send_from_directory\nfrom flask_cors import CORS\n\napp = Flask(__name__)\ncors = CORS(app, supports_credentials=True)\n\n@app.route(\"/healthy\")\ndef healthy() -> Response:\n    return make_response(\"OK\", 200)\n\n@app.route(f\"/{GALLERY_PREFIX}/<path:path>\", methods=[\"GET\"])\ndef send_gallery_video(path: str) -> Response:\n    try:\n        return send_from_directory(\n            GALLERY_PATH,\n            path,\n        )\n    except:\n        raise ValueError(\"resource not found\")\n\n@app.route(f\"/{POSTERS_PREFIX}/<path:path>\", methods=[\"GET\"])\ndef send_poster_image(path: str) -> Response:\n    try:\n        return send_from_directory(\n            POSTERS_PATH,\n            path,\n        )\n    except:\n        raise ValueError(\"resource not found\")\n\n@app.route(f\"/{UPLOADS_PREFIX}/<path:path>\", methods=[\"GET\"])\ndef send_uploaded_video(path: str):\n    try:\n        return send_from_directory(\n            UPLOADS_PATH,\n            path,\n        )\n    except:\n        raise ValueError(\"resource not found\")\n\n@app.route(\"/propagate_in_video\", methods=[\"POST\"])\ndef propagate_in_video() -> Response:\n    data = request.json\n    args = {\n        \"session_id\": data[\"session_id\"],\n        \"start_frame_index\": data.get(\"start_frame_index\", 0),\n    }\n\n    boundary = \"frame\"\n    frame = gen_track_with_mask_stream(boundary, **args)\n    return Response(frame, mimetype=\"multipart/x-savi-stream; boundary=\" + boundary)",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, send_from_directory, request, Response\nfrom flask_cors import CORS\nimport os\n\napp = Flask(__name__)\nCORS(app)\n\nGALLERY_PATH = \"gallery\"\nPOSTERS_PATH = \"posters\"\nUPLOADS_PATH = \"uploads\"\n\n@app.route('/healthy')\ndef healthy():\n    return \"OK\", 200\n\n@app.route('/gallery_video/<path>')\ndef send_gallery_video(path):\n    file_path = os.path.join(GALLERY_PATH, path)\n    if not os.path.exists(file_path):\n        raise ValueError(\"File not found in gallery\")\n    return send_from_directory(GALLERY_PATH, path)\n\n@app.route('/poster_image/<path>')\ndef send_poster_image(path):\n    file_path = os.path.join(POSTERS_PATH, path)\n    if not os.path.exists(file_path):\n        raise ValueError(\"File not found in posters\")\n    return send_from_directory(POSTERS_PATH, path)\n\n@app.route('/uploaded_video/<path>')\ndef send_uploaded_video(path):\n    file_path = os.path.join(UPLOADS_PATH, path)\n    if not os.path.exists(file_path):\n        raise ValueError(\"File not found in uploads\")\n    return send_from_directory(UPLOADS_PATH, path)\n\n@app.route('/propagate_in_video', methods=['POST'])\ndef propagate_in_video():\n    data = request.get_json()\n    session_id = data.get('session_id')\n    start_frame_index = data.get('start_frame_index', 0)\n    \n    # Simulated video stream with tracking masks\n    def generate():\n        for i in range(100):  # Simulate 100 frames\n            frame_data = f\"Frame {i + start_frame_index}\"\n            mask_data = f\"Mask {i + start_frame_index}\"\n            yield f\"--frame\\r\\nContent-Type: video/mp4\\r\\n\\r\\n{frame_data}\\r\\n--mask\\r\\nContent-Type: image/png\\r\\n\\r\\n{mask_data}\\r\\n\"\n    \n    return Response(generate(), mimetype='multipart/x-mixed-replace; boundary=frame')\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000)"
  },
  {
    "Task_id": 142,
    "Instruction": "Task Description: Create a RESTful API gateway service using Flask that handles incoming requests, processes them through an MII client, and provides health check and termination endpoints.\n\nClass Description: RestfulGatewayThread is a threaded Flask server implementation that creates and manages a RESTful API gateway for interacting with an MII client. It handles request processing, health checks, and graceful shutdown.\n\nAttributes:\n\n_deployment_name: str - The name of the MII deployment to connect to\n_rest_host: str - The host address to bind the server to\n_rest_port: int - The port number to listen on\n_rest_procs: int - Number of processes to handle requests\n_stop_event: threading.Event - Event flag to track server status\nserver: werkzeug.serving.BaseWSGIServer - The Flask server instance\n\nMethods:\n\n__init__(deployment_name: str, rest_host: str, rest_port: int, rest_procs: int) -> None - Initializes the thread with server configuration parameters\n_create_server(deployment_name: str, rest_host: str, rest_port: int, rest_procs: int) -> werkzeug.serving.BaseWSGIServer - Creates and configures the Flask server with routes and resources\n_shutdown() -> None - Handles server shutdown after a configured timeout period\nrun() -> None - Starts the server and runs it indefinitely until shutdown\nget_stop_event() -> threading.Event - Returns the stop event for monitoring server status",
    "Canonical_solution": "from flask import Flask, request, jsonify\nfrom flask_restful import Resource, Api\nfrom werkzeug.serving import make_server\nimport threading\nimport time\nimport mii\nfrom mii.constants import RESTFUL_GATEWAY_SHUTDOWN_TIMEOUT, RESTFUL_API_PATH\n\nclass RestfulGatewayService(Resource):\n    def __init__(self, deployment_name):\n        super().__init__()\n        self.client = mii.client(deployment_name)\n\n    def post(self):\n        data = request.get_json()\n        result = self.client.generate(**data)\n        return jsonify([r.to_msg_dict() for r in result])\n\nclass RestfulGatewayThread(threading.Thread):\n    def __init__(self, deployment_name, rest_host, rest_port, rest_procs):\n        threading.Thread.__init__(self)\n        self._stop_event = threading.Event()\n        self.server = self._create_server(deployment_name, rest_host, rest_port, rest_procs)\n\n    def _create_server(self, deployment_name, rest_host, rest_port, rest_procs):\n        app = Flask(\"RestfulGateway\")\n\n        @app.route(\"/terminate\", methods=[\"GET\"])\n        def terminate():\n            threading.Thread(target=self._shutdown).start()\n            return \"Shutting down RESTful API gateway server\"\n\n        @app.route(\"/healthz\", methods=[\"GET\"])\n        def healthz():\n            return \"ok\"\n\n        api = Api(app)\n        path = \"/{}/{}\".format(RESTFUL_API_PATH, deployment_name)\n        api.add_resource(RestfulGatewayService, path, resource_class_args=(deployment_name,))\n\n        return make_server(rest_host, rest_port, app, threaded=False, processes=rest_procs)\n\n    def _shutdown(self):\n        time.sleep(RESTFUL_GATEWAY_SHUTDOWN_TIMEOUT)\n        self.server.shutdown()\n\n    def run(self):\n        self.server.serve_forever()\n        self._stop_event.set()\n\n    def get_stop_event(self):\n        return self._stop_event",
    "Code_level": "Class-level",
    "FSMID_for_test": 60,
    "right_result": "import threading\nimport time\nfrom flask import Flask, request, jsonify\nfrom werkzeug.serving import BaseWSGIServer\n\nclass RestfulGatewayThread:\n    def __init__(self, deployment_name: str, rest_host: str, rest_port: int, rest_procs: int) -> None:\n        self._deployment_name = deployment_name\n        self._rest_host = rest_host\n        self._rest_port = rest_port\n        self._rest_procs = rest_procs\n        self._stop_event = threading.Event()\n        self.server = self._create_server(deployment_name, rest_host, rest_port, rest_procs)\n\n    def _create_server(self, deployment_name: str, rest_host: str, rest_port: int, rest_procs: int) -> BaseWSGIServer:\n        app = Flask(__name__)\n        \n        @app.route('/health', methods=['GET'])\n        def health_check():\n            return jsonify({\"status\": \"healthy\", \"deployment\": deployment_name})\n        \n        @app.route('/terminate', methods=['POST'])\n        def terminate():\n            self._stop_event.set()\n            return jsonify({\"status\": \"termination initiated\"})\n        \n        @app.before_request\n        def before_request():\n            if request.path in ['/health', '/terminate']:\n                return None\n            # Simulate MII client interaction here\n            return None\n        \n        server = app.run(host=rest_host, port=rest_port, processes=rest_procs, threaded=True)\n        return server\n    \n    def _shutdown(self) -> None:\n        self.server.shutdown()\n    \n    def run(self) -> None:\n        self.server.serve_forever(self._stop_event)\n    \n    def get_stop_event(self) -> threading.Event:\n        return self._stop_event"
  },
  {
    "Task_id": 143,
    "Instruction": "Task Description: Create a Flask-based HTTP server that manages and controls multiple learner and collector processes, allowing dynamic scaling of these processes through API calls.\n\nClass Description: FlaskOperatorServer is a class that wraps a Flask application to provide RESTful API endpoints for managing learner and collector process replicas. It interacts with a Creator instance to handle the actual process management.\n\nAttributes:\n- app: Flask - The Flask application instance\n- creator: Creator - The process manager that handles learner and collector instances\n- host: str - The host address where the server will run\n- port: int - The port number where the server will listen\n- api_version: str - The version prefix for API endpoints\n\nMethods:\n- __init__(creator, host: str, port: int, api_version: str = 'v1alpha1') -> None - Initializes the Flask server with process manager, host, port, and API version. Sets up route handlers.\n- run() -> None - Starts the Flask application server on the specified host and port.\n- post_replicas() -> dict - Handles POST requests to set the desired number of replicas (route: /{api_version}/replicas). Returns a response dictionary.\n- get_replicas() -> dict - Handles GET requests to retrieve current replica information (route: /{api_version}/replicas). Returns a response dictionary with current resources.",
    "Canonical_solution": "from flask import Flask, request\nimport json\nfrom threading import Thread\nfrom queue import Queue\n\nclass Creator:\n    def __init__(self, learner_addr, collector_addr):\n        self.learner_addr = learner_addr\n        self.collector_addr = collector_addr\n        self.collector_demand = Queue()\n        self.learner_demand = Queue()\n        self.learners = {}\n        self.collectors = {}\n        self.end_flag = False\n\n    def set_target_source(self, learner_target, collector_target):\n        self.collector_demand.put(collector_target)\n        self.learner_demand.put(learner_target)\n\n    def start(self):\n        while not self.end_flag:\n            if self.learner_demand.empty() and self.collector_demand.empty():\n                continue\n            else:\n                learner_demand, collector_demand = None, None\n                if not self.learner_demand.empty():\n                    learner_demand = self.learner_demand.get()\n                if not self.collector_demand.empty():\n                    collector_demand = self.collector_demand.get()\n\n                for i in range(collector_demand):\n                    name, host, port = self.collector_addr[i]\n                    self.collectors[name] = NaiveCollector(host, port, prefix=DATA_PREFIX)\n                    self.collectors[name].start()\n                for i in range(learner_demand):\n                    name, host, port = self.learner_addr[i]\n                    self.learners[name] = NaiveLearner(host, port, prefix=DATA_PREFIX)\n                    self.learners[name].start()\n\n    def close(self):\n        self.end_flag = True\n        for t in self.learners.values():\n            t.close()\n        for t in self.collectors.values():\n            t.close()\n\n    @property\n    def current_resource(self):\n        collectors = {k: {} for k in self.collectors}\n        learners = {k: {} for k in self.learners}\n        return {\"collectors\": collectors, 'learners': learners}\n\nclass FlaskOperatorServer:\n    def __init__(self, creator, host: str, port: int, api_version: str = 'v1alpha1'):\n        self.app = Flask(__name__)\n        self.creator = creator\n        self.host = host\n        self.port = port\n        self.api_version = api_version\n        \n        @self.app.route('/{}/replicas'.format(self.api_version), methods=['POST'])\n        def post_replicas():\n            data = json.loads(request.data.decode())\n            collectors = data['collectors'][\"replicas\"]\n            learners = data['learners'][\"replicas\"]\n            self.creator.set_target_source(learners, collectors)\n            return {'success': True, 'code': 0, 'message': '', 'data': ''}\n\n        @self.app.route('/{}/replicas'.format(self.api_version), methods=['GET'])\n        def get_replicas():\n            data = json.loads(request.data.decode())\n            return {'success': True, 'code': 0, 'message': '', 'data': self.creator.current_resource}\n\n    def run(self):\n        self.app.run(host=self.host, port=self.port)",
    "Code_level": "Class-level",
    "FSMID_for_test": 60,
    "right_result": "import flask\nfrom flask import request, jsonify\nfrom typing import Dict, Any\n\nclass FlaskOperatorServer:\n    def __init__(self, creator, host: str, port: int, api_version: str = 'v1alpha1') -> None:\n        self.app = flask.Flask(__name__)\n        self.creator = creator\n        self.host = host\n        self.port = port\n        self.api_version = api_version\n\n        @self.app.route(f'/{self.api_version}/replicas', methods=['POST'])\n        def post_replicas():\n            return self.post_replicas()\n\n        @self.app.route(f'/{self.api_version}/replicas', methods=['GET'])\n        def get_replicas():\n            return self.get_replicas()\n\n    def run(self) -> None:\n        self.app.run(host=self.host, port=self.port)\n\n    def post_replicas(self) -> Dict[str, Any]:\n        data = request.get_json()\n        desired_replicas = data.get('desired_replicas', 0)\n        if not isinstance(desired_replicas, int) or desired_replicas < 0:\n            return {'error': 'Invalid desired_replicas value'}, 400\n        self.creator.set_replicas(desired_replicas)\n        return {'status': 'success', 'message': f'Set desired replicas to {desired_replicas}'}, 200\n\n    def get_replicas(self) -> Dict[str, Any]:\n        current_replicas = self.creator.get_current_replicas()\n        return {\n            'status': 'success',\n            'current_replicas': current_replicas,\n            'message': f'Current replicas: {current_replicas}'\n        }"
  },
  {
    "Task_id": 144,
    "Instruction": "Task Description: Create a Flask-based HTTP server with multiple endpoints to handle different types of requests and responses.\n\nFunction Description: The code implements three Flask route handlers that demonstrate different aspects of HTTP request handling: delayed response, request method detection, and JSON response.\n\nInput:\n- For '/respond' endpoint: \n  - Query parameter 'time' (integer): Milliseconds to sleep before responding\n- For '/request_type' endpoint: \n  - None (automatically detects HTTP method)\n- For '/json' endpoint: \n  - None\n\nOutput:\n- For '/respond' endpoint: \n  - Response text: 'Response from Flask' \n  - Headers: Access-Control-Allow-Origin: *\n  - After specified delay\n- For '/request_type' endpoint: \n  - Response text: 'Request Type: [METHOD]' \n  - Headers: Access-Control-Allow-Origin: *\n- For '/json' endpoint: \n  - JSON response: {'resp': 'Hello JSON!'}",
    "Canonical_solution": "from flask import Flask, request, make_response\nfrom time import sleep\n\napp = Flask(__name__)\n\n@app.route('/respond')\ndef respond():\n    time_to_sleep = int(request.args.get('time')) / 1000\n    sleep(time_to_sleep)\n    resp = make_response('Response from Flask')\n    resp.headers['Access-Control-Allow-Origin'] = '*'\n    return resp\n\n@app.route('/request_type')\ndef request_type():\n    resp = make_response('Request Type: ' + request.method)\n    resp.headers['Access-Control-Allow-Origin'] = '*'\n    return resp\n\n@app.route('/json')\ndef json():\n    return {resp:'Hello JSON!'}",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n@app.route('/respond')\ndef respond():\n    time = int(request.args.get('time', 0))\n    from time import sleep\n    sleep(time / 1000)\n    return 'Response from Flask', 200, {'Access-Control-Allow-Origin': '*'}\n\n@app.route('/request_type')\ndef request_type():\n    method = request.method\n    return f'Request Type: {method}', 200, {'Access-Control-Allow-Origin': '*'}\n\n@app.route('/json')\ndef json_response():\n    return jsonify({'resp': 'Hello JSON!'}), 200, {'Access-Control-Allow-Origin': '*'}\n\nif __name__ == '__main__':\n    app.run(debug=True)"
  },
  {
    "Task_id": 145,
    "Instruction": "Task Description: Create a Flask-based HTTP server that handles POST requests for game predictions, processing board state data and returning optimal actions.\n\nFunction Description: The `predict` function is a Flask route handler that processes incoming game board states, applies either an AlphaZero-inspired MCTS algorithm or a greedy random player to determine the best move, and returns the action as a response.\n\nInput:\n- HTTP POST request with form data containing:\n  - 'board': [string] - Comma-separated string representing the game board state\n\nOutput:\n- HTTP Response containing:\n  - Body: [string] - The predicted action index\n  - Headers: Includes CORS permission ('Access-Control-Allow-Origin': '*')",
    "Canonical_solution": "import os\nimport sys\nimport numpy as np\nfrom flask import Flask, request, Response\n\nsys.path.append(\"..\")\nfrom utils import dotdict\n\napp = Flask(__name__)\n\n@app.route('/predict', methods=['POST'])\ndef predict():\n    board = np.fromstring(request.form['board'], sep=',').reshape(g.getBoardSize())\n\n    use_alpha_zero = True\n    if use_alpha_zero:\n        action = np.argmax(mcts.getActionProb(board, temp=0))\n    else:\n        action = GreedyRandomPlayer(g).play(board)\n\n    resp = Response(str(action))\n    resp.headers['Access-Control-Allow-Origin'] = '*'\n    return resp\n\nif __name__ == '__main__':\n    app.run(debug=False, host='0.0.0.0', port=8888)",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, jsonify\nimport random\n\napp = Flask(__name__)\n\ndef alpha_zero_mcts(board):\n    # Placeholder for AlphaZero-inspired MCTS logic\n    return random.randint(0, 8)\n\ndef greedy_random_player(board):\n    # Placeholder for greedy random player logic\n    return random.randint(0, 8)\n\n@app.route('/predict', methods=['POST'])\ndef predict():\n    board = request.form.get('board', '')\n    if not board:\n        return jsonify({'error': 'Board data missing'}), 400\n    \n    action = alpha_zero_mcts(board)\n    return jsonify({'action': str(action)}), 200\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000)"
  },
  {
    "Task_id": 146,
    "Instruction": "Task Description: Create a Flask web application that handles form submissions, stores the data in both text and CSV formats, and redirects to a thank you page upon successful submission.\n\nFunction Description: The function handles form submissions via POST and GET requests. For POST requests, it extracts form data, writes it to both a text file and CSV file, then redirects to a thank you page. For GET requests or errors, it returns an error message.\n\nInput: \n- HTTP request object (via Flask's request) containing form data with keys: \"email\", \"subject\", and \"message\"\n\nOutput:\n- For successful POST requests: HTTP redirect to './thank_you.html'\n- For GET requests or errors: String error message 'Something went wrong. Try again!'",
    "Canonical_solution": "from flask import Flask, render_template, request, redirect\nimport csv\napp = Flask(__name__)\n\n@app.route('/submit_form', methods=['POST', 'GET'])\ndef submit_form():\n\tif request.method == \"POST\":\n\t\tdata = request.form.to_dict()\n\t\twrite_to_csv(data)\n\t\twrite_to_txt(data)\n\t\treturn redirect('./thank_you.html')\n\telse:\n\t\treturn 'Something went wrong. Try again!'\n\ndef write_to_txt(data):\n\temail = data[\"email\"]\n\tsubject = data[\"subject\"]\n\tmessage = data[\"message\"]\n\twith open(\"./database.txt\", mode = 'a') as database:\n\t\ttext = database.write(f\"\\n{email},{subject},{message}\")\n\ndef write_to_csv(data):\n\temail = data[\"email\"]\n\tsubject = data[\"subject\"]\n\tmessage = data[\"message\"]\n\twith open(\"./database.csv\", mode = 'a', newline='') as database2:\n\t\tcsv_writer = csv.writer(database2, delimiter=',', quotechar='\"', quoting=csv.QUOTE_MINIMAL)\n\t\tcsv_writer.writerow([email, subject, message])",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, redirect, url_for\n\napp = Flask(__name__)\n\n@app.route('/submit', methods=['GET', 'POST'])\ndef submit():\n    if request.method == 'POST':\n        email = request.form.get('email')\n        subject = request.form.get('subject')\n        message = request.form.get('message')\n\n        if email and subject and message:\n            with open('data.txt', 'a') as f:\n                f.write(f\"{email},{subject},{message}\\n\")\n            with open('data.csv', 'a') as f:\n                f.write(f\"{email},{subject},{message}\\n\")\n            return redirect(url_for('thank_you'))\n        else:\n            return 'Something went wrong. Try again!'\n    else:\n        return 'Something went wrong. Try again!'\n\n@app.route('/thank_you')\ndef thank_you():\n    return \"Thank you for submitting the form!\"\n\nif __name__ == '__main__':\n    app.run(debug=True)"
  },
  {
    "Task_id": 147,
    "Instruction": "Task Description: Create a Flask-based HTTP server class that handles streaming responses from a model pipeline, manages concurrent requests, and provides available method information.\n\nClass Description: ModelServer is a Flask application wrapper that provides HTTP endpoints for interacting with a model pipeline. It handles streaming responses, manages concurrent access to the model, and provides information about available methods.\n\nAttributes:\n- app: Flask - The Flask application instance\n- model: Any - The model pipeline object that processes requests\n- cors: CORS - Cross-Origin Resource Sharing configuration for the Flask app\n\nMethods:\n- __init__(model) -> None - Initializes the Flask app and sets up routes\n  - model: Any - The model pipeline object to be used for processing\n- run(host, port, debug) -> None - Starts the Flask server\n  - host: str (default=\"0.0.0.0\") - The host address to bind to\n  - port: int (default=5000) - The port number to listen on\n  - debug: bool (default=True) - Whether to run in debug mode\n- stream() -> Response - Handles streaming requests to the model\n  - Returns: Flask Response - A streaming response with model outputs\n- methods() -> Response - Provides information about available methods\n  - Returns: Flask Response - JSON response containing available methods",
    "Canonical_solution": "from flask import Flask, Response, stream_with_context, request\nfrom flask_cors import CORS, cross_origin\nimport json\nimport concurrent.futures\nimport time\n\nclass ModelServer:\n    def __init__(self, model):\n        self.app = Flask(__name__)\n        CORS(self.app)\n        self.model = model\n\n        @self.app.route('/stream', methods=['GET', 'POST'])\n        @cross_origin()\n        def stream():\n            data = json.loads(request.data)\n            user_input = data[\"text\"]\n            top_k = data[\"top_k\"]\n            method = data[\"method\"]\n\n            def generate(model):\n                if model.inuse:\n                    return Response(json.dumps({\n                        \"method_name\": \"error\",\n                        \"error\": \"Model in use\"\n                    }), status=409, mimetype='application/json')\n                \n                model.inuse = True\n                with concurrent.futures.ThreadPoolExecutor() as executor:\n                    future = executor.submit(model.run_pipeline, user_input, method, top_k)\n                    while True:\n                        if model.queue.empty():\n                            if future.done():\n                                break\n                            time.sleep(0.01)\n                            continue\n                        else:\n                            obj = model.queue.get()\n                        if obj[\"method_name\"] == \"unknown\": continue\n                        if obj[\"method_name\"] == \"on_request_end\":\n                            yield json.dumps(obj)\n                            break\n\n                        try:\n                            yield json.dumps(obj) + \"\\n\"\n                        except Exception as e:\n                            model.inuse = False\n                            print(e)\n\n                    try:\n                        future.result()\n                    except Exception as e:\n                        model.inuse = False\n                        print(e)\n\n                model.inuse = False\n\n            return Response(stream_with_context(generate(self.model)))\n\n        @self.app.route('/methods', methods=['GET'])\n        @cross_origin()\n        def methods():\n            return Response(json.dumps({\n                \"methods\": [\"DFS_woFilter_w2\"]\n            }), status=200, mimetype='application/json')\n\n    def run(self, host=\"0.0.0.0\", port=5000, debug=True):\n        self.app.run(use_reloader=False, host=host, debug=debug, port=port)",
    "Code_level": "Class-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, Response, jsonify\nfrom flask_cors import CORS\n\nclass ModelServer:\n    def __init__(self, model):\n        self.app = Flask(__name__)\n        self.model = model\n        self.cors = CORS(self.app)\n        self.setup_routes()\n\n    def setup_routes(self):\n        @self.app.route('/stream', methods=['POST'])\n        def stream():\n            def generate():\n                for chunk in self.model.process():\n                    yield chunk\n            return Response(generate(), mimetype='text/plain')\n\n        @self.app.route('/methods', methods=['GET'])\n        def methods():\n            return jsonify({'available_methods': list(self.model.methods)})\n\n    def run(self, host=\"0.0.0.0\", port=5000, debug=True):\n        self.app.run(host=host, port=port, debug=debug)"
  },
  {
    "Task_id": 148,
    "Instruction": "Task Description: Create a Flask-based web service that predicts cricket match scores based on various input parameters including teams, overs, runs, and wickets.\n\nFunction Description: The `predict()` function is a Flask route handler that processes POST requests containing cricket match data, converts the input into a feature vector, uses a pre-trained model to predict the score range, and returns an HTML response with the prediction.\n\nInput:\n- HTTP POST request with form data containing:\n  - 'batting-team': [str] - Name of the batting team (one of 8 possible teams)\n  - 'bowling-team': [str] - Name of the bowling team (one of 8 possible teams)\n  - 'overs': [float] - Current over count in the match\n  - 'runs': [int] - Total runs scored so far\n  - 'wickets': [int] - Total wickets lost so far\n  - 'runs_in_prev_5': [int] - Runs scored in previous 5 overs\n  - 'wickets_in_prev_5': [int] - Wickets lost in previous 5 overs\n\nOutput:\n- Rendered HTML template ('index1.html') containing:\n  - 'prediction_text': [str] - Formatted string showing predicted score range (prediction \u00b1 margin)",
    "Canonical_solution": "from flask import Flask, render_template, request\nimport pickle\nimport numpy as np\n\nfilename = 'model.pkl'\nregressor = pickle.load(open(filename, 'rb'))\n\napp = Flask(__name__)\n\n@app.route('/predict', methods=['POST'])\ndef predict():\n    temp_array = list()\n    \n    if request.method == 'POST':\n        \n        batting_team = request.form['batting-team']\n        if batting_team == 'Chennai Super Kings':\n            temp_array = temp_array + [1,0,0,0,0,0,0,0]\n        elif batting_team == 'Delhi Daredevils':\n            temp_array = temp_array + [0,1,0,0,0,0,0,0]\n        elif batting_team == 'Kings XI Punjab':\n            temp_array = temp_array + [0,0,1,0,0,0,0,0]\n        elif batting_team == 'Kolkata Knight Riders':\n            temp_array = temp_array + [0,0,0,1,0,0,0,0]\n        elif batting_team == 'Mumbai Indians':\n            temp_array = temp_array + [0,0,0,0,1,0,0,0]\n        elif batting_team == 'Rajasthan Royals':\n            temp_array = temp_array + [0,0,0,0,0,1,0,0]\n        elif batting_team == 'Royal Challengers Bangalore':\n            temp_array = temp_array + [0,0,0,0,0,0,1,0]\n        elif batting_team == 'Sunrisers Hyderabad':\n            temp_array = temp_array + [0,0,0,0,0,0,0,1]\n            \n            \n        bowling_team = request.form['bowling-team']\n        if bowling_team == 'Chennai Super Kings':\n            temp_array = temp_array + [1,0,0,0,0,0,0,0]\n        elif bowling_team == 'Delhi Daredevils':\n            temp_array = temp_array + [0,1,0,0,0,0,0,0]\n        elif bowling_team == 'Kings XI Punjab':\n            temp_array = temp_array + [0,0,1,0,0,0,0,0]\n        elif bowling_team == 'Kolkata Knight Riders':\n            temp_array = temp_array + [0,0,0,1,0,0,0,0]\n        elif bowling_team == 'Mumbai Indians':\n            temp_array = temp_array + [0,0,0,0,1,0,0,0]\n        elif bowling_team == 'Rajasthan Royals':\n            temp_array = temp_array + [0,0,0,0,0,1,0,0]\n        elif bowling_team == 'Royal Challengers Bangalore':\n            temp_array = temp_array + [0,0,0,0,0,0,1,0]\n        elif bowling_team == 'Sunrisers Hyderabad':\n            temp_array = temp_array + [0,0,0,0,0,0,0,1]\n            \n            \n        overs = float(request.form['overs'])\n        runs = int(request.form['runs'])\n        wickets = int(request.form['wickets'])\n        runs_in_prev_5 = int(request.form['runs_in_prev_5'])\n        wickets_in_prev_5 = int(request.form['wickets_in_prev_5'])\n        \n        temp_array = temp_array + [overs, runs, wickets, runs_in_prev_5, wickets_in_prev_5]\n        \n        data = np.array([temp_array])\n        my_prediction = int(regressor.predict(data)[0])\n              \n        return render_template('index1.html',prediction_text=\"Predicted score ranges between {} to {}\".format(my_prediction-10,my_prediction+5))",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, render_template\nimport numpy as np\nimport pandas as pd\n\napp = Flask(__name__)\n\n# Predefined team list\nTEAMS = ['Team A', 'Team B', 'Team C', 'Team D', 'Team E', 'Team F', 'Team G', 'Team H']\n\n# Function to encode team names\ndef encode_team(team):\n    return [1 if t == team else 0 for t in TEAMS]\n\n# Load pre-trained model (example placeholder)\nmodel = None\n\n@app.route('/', methods=['GET', 'POST'])\ndef predict():\n    if request.method == 'POST':\n        batting_team = request.form['batting-team']\n        bowling_team = request.form['bowling-team']\n        overs = float(request.form['overs'])\n        runs = int(request.form['runs'])\n        wickets = int(request.form['wickets'])\n        runs_in_prev_5 = int(request.form['runs_in_prev_5'])\n        wickets_in_prev_5 = int(request.form['wickets_in_prev_5'])\n\n        # Encode team names\n        batting_team_encoded = encode_team(batting_team)\n        bowling_team_encoded = encode_team(bowling_team)\n\n        # Create feature vector\n        features = np.array([\n            overs,\n            runs,\n            wickets,\n            runs_in_prev_5,\n            wickets_in_prev_5\n        ]) + np.array(batting_team_encoded + bowling_team_encoded)\n\n        # Reshape for model prediction\n        features = features.reshape(1, -1)\n\n        # Predict score range\n        prediction = model.predict(features)\n        margin = np.std(model.predict(np.random.rand(100, features.shape[1])))\n\n        # Format prediction text\n        prediction_text = f\"Predicted Score: {prediction[0]:.2f} \u00b1 {margin:.2f}\"\n\n        return render_template('index1.html', prediction_text=prediction_text)\n\n    return render_template('index1.html')\n\nif __name__ == '__main__':\n    app.run(debug=True)"
  },
  {
    "Task_id": 149,
    "Instruction": "Task Description: Create a Flask web application that handles HTTP requests on a '/hello' endpoint, processes form data, and returns a rendered HTML template with the processed data.\n\nFunction Description: The function 'hello' is a Flask route handler that responds to both GET and POST requests at the '/hello' endpoint. It retrieves form data from the request, processes it, and renders an HTML template ('greeting.html') with the form data as template variables.\n\nInput: \n- The function receives HTTP requests (GET or POST) containing form data with two fields:\n  - 'say': [str] - The greeting message to be displayed\n  - 'to': [str] - The recipient of the greeting\n\nOutput:\n- Returns a rendered HTML template ('greeting.html') populated with the form data:\n  - Template variable 'say' contains the greeting message\n  - Template variable 'to' contains the recipient name",
    "Canonical_solution": "from flask import Flask, render_template, request\n\napp = Flask(__name__)\n\n@app.route('/hello', methods=['GET', 'POST'])\ndef hello():\n    return render_template('greeting.html', say=request.form['say'], to=request.form['to'])\n\nif __name__ == \"__main__\":\n    app.run()",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, render_template\n\napp = Flask(__name__)\n\n@app.route('/hello', methods=['GET', 'POST'])\ndef hello():\n    say = request.form.get('say', '')\n    to = request.form.get('to', '')\n    return render_template('greeting.html', say=say, to=to)\n\nif __name__ == '__main__':\n    app.run(debug=True)"
  },
  {
    "Task_id": 150,
    "Instruction": "Task Description: Create a Flask-based HTTP server endpoint that processes Pub/Sub messages containing CircleCI event data, validates and extracts relevant information, and stores it in BigQuery. The endpoint should handle JSON payloads, validate message structure, and process specific CircleCI event types.\n\nFunction Description: The `index` function is a Flask route handler for POST requests at the root path (\"/\"). It receives Pub/Sub messages containing CircleCI event data, validates the message structure, processes the event if it's a supported type, and stores the processed data in BigQuery. Invalid messages or processing errors are logged with appropriate warnings.\n\nInput: \n- HTTP POST request with JSON payload containing Pub/Sub message format:\n  {\n    \"message\": {\n      \"attributes\": {\n        \"headers\": \"JSON string containing CircleCI headers\",\n        ...other attributes\n      },\n      \"data\": \"base64-encoded event data\",\n      \"message_id\": \"unique message identifier\"\n    }\n  }\n\nOutput: \n- HTTP response with status code 204 (No Content) on successful processing\n- Error responses with appropriate status codes for invalid requests\n- Warning logs for processing errors that don't prevent HTTP response\n\nThe `process_circleci_event` helper function processes valid CircleCI events by extracting and formatting relevant data from the message.\n\nFunction Description: The `process_circleci_event` function extracts and formats CircleCI event data from message headers and payload. It validates the event type and creates a standardized event object for storage.\n\nInput:\n- headers: dict - Contains CircleCI event metadata including:\n  - \"Circleci-Event-Type\": string - The type of CircleCI event\n  - \"Circleci-Signature\": string - Verification signature\n- msg: dict - The Pub/Sub message containing:\n  - \"data\": string - base64-encoded JSON payload\n  - \"message_id\": string - Unique message identifier\n\nOutput:\n- dict - Formatted event data containing:\n  - \"event_type\": string - CircleCI event type\n  - \"id\": string - Event identifier\n  - \"metadata\": string - JSON string of full event data\n  - \"time_created\": string - Timestamp of event\n  - \"signature\": string - Verification signature\n  - \"msg_id\": string - Pub/Sub message ID\n  - \"source\": string - Constant \"circleci\" identifier",
    "Canonical_solution": "import base64\nimport os\nimport json\nimport shared\nfrom flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route(\"/\", methods=[\"POST\"])\ndef index():\n    \"\"\"\n    Receives messages from a push subscription from Pub/Sub.\n    Parses the message, and inserts it into BigQuery.\n    \"\"\"\n    event = None\n    if not request.is_json:\n        raise Exception(\"Expecting JSON payload\")\n    envelope = request.get_json()\n\n    if \"message\" not in envelope:\n        raise Exception(\"Not a valid Pub/Sub Message\")\n    msg = envelope[\"message\"]\n\n    if \"attributes\" not in msg:\n        raise Exception(\"Missing pubsub attributes\")\n\n    try:\n        attr = msg[\"attributes\"]\n\n        if \"headers\" in attr:\n            headers = json.loads(attr[\"headers\"])\n\n            if \"Circleci-Event-Type\" in headers:\n                event = process_circleci_event(headers, msg)\n\n        shared.insert_row_into_bigquery(event)\n\n    except Exception as e:\n        entry = {\n                \"severity\": \"WARNING\",\n                \"msg\": \"Data not saved to BigQuery\",\n                \"errors\": str(e),\n                \"json_payload\": envelope\n            }\n        print(json.dumps(entry))\n\n    return \"\", 204\n\ndef process_circleci_event(headers, msg):\n    event_type = headers[\"Circleci-Event-Type\"]\n    signature = headers[\"Circleci-Signature\"]\n    metadata = json.loads(base64.b64decode(msg[\"data\"]).decode(\"utf-8\").strip())\n    types = {\"workflow-completed\", \"job-completed\"}\n\n    if event_type not in types:\n        raise Exception(\"Unsupported CircleCI event: '%s'\" % event_type)\n\n    circleci_event = {\n        \"event_type\": event_type,\n        \"id\": metadata[\"id\"],\n        \"metadata\": json.dumps(metadata),\n        \"time_created\": metadata[\"happened_at\"],\n        \"signature\": signature,\n        \"msg_id\": msg[\"message_id\"],\n        \"source\": \"circleci\",\n    }\n\n    return circleci_event",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "import os\nimport base64\nimport json\nfrom datetime import datetime\nfrom flask import Flask, request, jsonify\nfrom google.cloud import bigquery\n\napp = Flask(__name__)\nclient = bigquery.Client()\n\ndef validate_circleci_event(headers):\n    required_headers = [\"Circleci-Event-Type\", \"Circleci-Signature\"]\n    for header in required_headers:\n        if header not in headers:\n            return False, f\"Missing required header: {header}\"\n    return True, \"\"\n\ndef process_circleci_event(headers, msg):\n    try:\n        data = base64.b64decode(msg[\"data\"]).decode(\"utf-8\")\n        event_data = json.loads(data)\n        event_type = headers.get(\"Circleci-Event-Type\")\n        signature = headers.get(\"Circleci-Signature\")\n        time_created = datetime.now().isoformat()\n        return {\n            \"event_type\": event_type,\n            \"id\": event_data.get(\"id\", \"\"),\n            \"metadata\": json.dumps(event_data),\n            \"time_created\": time_created,\n            \"signature\": signature,\n            \"msg_id\": msg.get(\"message_id\", \"\"),\n            \"source\": \"circleci\"\n        }\n    except Exception as e:\n        print(f\"Error processing CircleCI event: {str(e)}\")\n        return None\n\n@app.route(\"/\", methods=[\"POST\"])\ndef index():\n    try:\n        data = request.get_json()\n        if not data or \"message\" not in data:\n            return jsonify({\"error\": \"Invalid message format\"}), 400\n\n        message = data[\"message\"]\n        if \"attributes\" not in message or \"headers\" not in message[\"attributes\"]:\n            return jsonify({\"error\": \"Missing headers in message attributes\"}), 400\n\n        headers = json.loads(message[\"attributes\"][\"headers\"])\n        validation_result, error_msg = validate_circleci_event(headers)\n        if not validation_result:\n            return jsonify({\"error\": error_msg}), 400\n\n        event = process_circleci_event(headers, message)\n        if not event:\n            return jsonify({\"error\": \"Failed to process event data\"}), 500\n\n        table_id = \"your_project.your_dataset.circleci_events\"\n        job_config = bigquery.LoadJobConfig(\n            write_disposition=\"WRITE_APPEND\",\n            schema=[\n                bigquery.SchemaField(\"event_type\", \"STRING\"),\n                bigquery.SchemaField(\"id\", \"STRING\"),\n                bigquery.SchemaField(\"metadata\", \"STRING\"),\n                bigquery.SchemaField(\"time_created\", \"TIMESTAMP\"),\n                bigquery.SchemaField(\"signature\", \"STRING\"),\n                bigquery.SchemaField(\"msg_id\", \"STRING\"),\n                bigquery.SchemaField(\"source\", \"STRING\")\n            ]\n        )\n        table_ref = client.dataset(\"your_dataset\").table(\"circleci_events\")\n        job = client.load_table_from_dict([event], table_ref, job_config=job_config)\n        job.result()\n\n        return \"\", 204\n    except Exception as e:\n        print(f\"Error processing request: {str(e)}\")\n        return jsonify({\"error\": \"Internal server error\"}), 500"
  },
  {
    "Task_id": 151,
    "Instruction": "Task Description: Create a Python class that implements a web server using Flask framework with authentication, search functionality, and WebSocket support. The server should handle HTTP requests, manage user sessions, and provide search capabilities against a data model.\n\nClass Description: MalcomWeb is a Process subclass that implements a web server with Flask. It handles HTTP requests, manages authentication, provides search functionality against a data model, and supports WebSocket connections. The server can be configured through a setup dictionary and runs in its own process.\n\nAttributes:\n\nlisten_port: [int] - The port number on which the server listens\nlisten_interface: [str] - The network interface on which the server listens\nsetup: [dict] - Configuration dictionary for server settings\nhttp_server: [WSGIServer] - Instance of the WSGI server\napp: [Flask] - Flask application instance\n\nMethods:\n\n__init__: [Name](auth, listen_port, listen_interface, setup) -> [None] - Initializes the web server process with authentication settings, port, interface, and configuration\nrun: [Name]() -> [None] - Starts the server process (inherited from Process)\nstop_server: [Name]() -> [None] - Stops the server (currently just a placeholder)\nstart_server: [Name]() -> [None] - Configures and starts the Flask application with routes and WebSocket support\nindex: [Name]() -> [Response] - Route handler for the root URL (requires login)\nsearch: [Name](term=\"\") -> [Response] - Route handler for search functionality (requires login), processes both GET and POST requests",
    "Canonical_solution": "from flask import Flask, request, render_template, redirect, url_for, make_response\nfrom gevent.pywsgi import WSGIServer\nfrom geventwebsocket.handler import WebSocketHandler\nfrom multiprocessing import Process\n\nclass MalcomWeb(Process):\n    def __init__(self, auth, listen_port, listen_interface, setup):\n        super(MalcomWeb, self).__init__()\n        self.setup = setup\n        self.listen_port = setup['LISTEN_PORT']\n        self.listen_interface = setup['LISTEN_INTERFACE']\n        self.http_server = None\n        self.app = Flask(__name__)\n        self.app.secret_key = os.urandom(24)\n        self.app.debug = True\n\n    def run(self):\n        self.start_server()\n\n    def stop_server(self):\n        pass\n\n    def start_server(self):\n        if not self.setup['AUTH']:\n            self.app.config['LOGIN_DISABLED'] = True\n\n        self.app.config['MODEL'] = ModelClass(self.setup)\n        self.app.config['USER_MANAGER'] = UserManagerClass(self.setup)\n\n        lm.init_app(self.app)\n        lm.login_view = 'login'\n        lm.session_protection = 'strong'\n        lm.anonymous_user = self.app.config['USER_MANAGER'].get_default_user\n\n        for key in self.setup:\n            self.app.config[key] = self.setup[key]\n        self.app.config['UPLOAD_DIR'] = \"\"\n\n        self.app.config['MESSENGER'] = WebMessenger()\n\n        @self.app.route('/')\n        @login_required\n        def index():\n            return redirect(url_for('search'))\n\n        @self.app.route('/search/', methods=['GET', 'POST'])\n        @login_required\n        def search(term=\"\"):\n            if request.method == 'POST':\n                field = 'value'\n                query = [{field: r.strip()} for r in request.form['bulk-text'].split('\\r\\n') if r.strip() != '']\n                result_set = self.app.config['MODEL'].find({'$or': query})\n            else:\n                query = request.args.get('query', False)\n                if query:\n                    query = query.strip()\n                field = request.args.get('field', 'value').strip()\n                if not bool(request.args.get('strict', False)):\n                    result_set = self.app.config['MODEL'].find({field: query})\n                else:\n                    result_set = self.app.config['MODEL'].find({field: re.compile(re.escape(query), re.IGNORECASE)})\n\n            if query == False:\n                return render_template('search.html', history=self.app.config['MODEL'].get_history())\n            elif query == \"\":\n                flash('Empty search query is empty.')\n                return redirect(url_for('search'))\n\n            base_elts = []\n            base_ids = []\n            evil_elts = {}\n\n            for e in result_set:\n                base_elts.append(e)\n                base_ids.append(e['_id'])\n                if 'evil' in e['tags']:\n                    evil_elts[e['_id']] = e\n\n            if len(base_elts) == 0 and request.method == 'GET':\n                if not bool(request.args.get('log', False)):\n                    flash('\"{}\" was not found. Use the checkbox above to add it to the database'.format(query))\n                    return render_template('search.html', term=query, history=self.app.config['MODEL'].get_history())\n                else:\n                    new = self.app.config['MODEL'].add_text([query], tags=['search'])\n                    if new:\n                        flash('\"{}\" was not found. It was added to the database (ID: {})'.format(query, new['_id']))\n                        self.app.config['MODEL'].add_to_history(query)\n                    else:\n                        flash('\"{}\" did not convert to a viable datatype'.format(query))\n                    return render_template('search.html', term=query, history=self.app.config['MODEL'].get_history())\n\n            if len(base_elts) == 0 and request.method == 'POST':\n                flash('Your query did not yield any results. Use the checkbox above to add it to the database')\n                return render_template('search.html', history=self.app.config['MODEL'].get_history())\n\n            return find_related(field, query, base_elts, base_ids, evil_elts)\n\n        self.http_server = WSGIServer((self.listen_interface, self.listen_port), self.app, handler_class=WebSocketHandler)\n        self.http_server.serve_forever()",
    "Code_level": "Class-level",
    "FSMID_for_test": 60,
    "right_result": "import os\nimport signal\nfrom multiprocessing import Process\nfrom flask import Flask, request, jsonify, Response, session\nfrom flask_socketio import SocketIO, emit\nfrom werkzeug.serving import WSGIServer\n\nclass MalcomWeb(Process):\n    def __init__(self, auth, listen_port, listen_interface, setup):\n        super().__init__()\n        self.auth = auth\n        self.listen_port = listen_port\n        self.listen_interface = listen_interface\n        self.setup = setup\n        self.http_server = None\n        self.app = Flask(__name__)\n        self.app.secret_key = os.urandom(24)\n        self.socketio = SocketIO(self.app, cors_allowed_origins=\"*\")\n        self.setup_routes()\n\n    def setup_routes(self):\n        @self.app.route('/')\n        def index():\n            if 'user' not in session:\n                return jsonify({'error': 'Unauthorized'}), 401\n            return jsonify({'message': 'Welcome to the Malcom Web Interface'})\n\n        @self.app.route('/search')\n        def search():\n            term = request.args.get('term', '')\n            results = self.auth.search(term)\n            return jsonify(results)\n\n        @self.app.route('/login', methods=['POST'])\n        def login():\n            data = request.json\n            user = self.auth.authenticate(data['username'], data['password'])\n            if user:\n                session['user'] = user\n                return jsonify({'success': True})\n            return jsonify({'error': 'Invalid credentials'}), 401\n\n        @self.app.route('/logout')\n        def logout():\n            session.pop('user', None)\n            return jsonify({'success': True})\n\n        @self.socketio.on('connect')\n        def handle_connect():\n            print('Client connected')\n\n        @self.socketio.on('disconnect')\n        def handle_disconnect():\n            print('Client disconnected')\n\n        @self.socketio.on('search')\n        def handle_search(term):\n            results = self.auth.search(term)\n            emit('search_results', results)\n\n    def start_server(self):\n        self.http_server = WSGIServer((self.listen_interface, self.listen_port), self.app.wsgi_app)\n        self.http_server.serve_forever()\n\n    def run(self):\n        self.start_server()\n\n    def stop_server(self):\n        if self.http_server:\n            self.http_server.shutdown()\n            self.http_server.server_close()"
  },
  {
    "Task_id": 152,
    "Instruction": "Task Description: Create a Flask-based REST API for user management with configurable behaviors for testing various API scenarios.\n\nClass Description: FlaskAPI is a class that implements a RESTful API server using Flask. It provides endpoints for user CRUD operations and order deletion, with configurable behaviors to simulate different API response scenarios for testing purposes.\n\nAttributes:\n\napp: [Flask] - The Flask application instance\nconfig: [AppConfig] - Configuration object controlling API behavior\nnext_user_id: [int] - Counter for generating new user IDs\nlast_modified: [str] - Timestamp for last modification\nusers: [dict] - Dictionary storing user data\ndeleted_orders: [set] - Set tracking deleted order IDs\n\nMethods:\n\n__init__: [None]() -> [None] - Initializes the Flask application and sets up routes\n_setup_routes: [None]() -> [None] - Private method that defines all API endpoints\nget_spec: [None]() -> [Response] - Returns OpenAPI specification\nget_user: [None](user_id: int) -> [Response] - Retrieves a user by ID\nlist_users: [None]() -> [Response] - Lists all users\ncreate_user: [None]() -> [Response] - Creates a new user\nupdate_user: [None](user_id: int) -> [Response] - Updates a user by ID\ndelete_user: [None](user_id: int) -> [Response] - Deletes a user by ID\ndelete_order: [None](order_id: str) -> [Response] - Handles order deletion\ncheck_auth: [None]() -> [None] - Middleware for authorization checking",
    "Canonical_solution": "from flask import Flask, jsonify, request\nfrom typing import Literal, Union\nfrom dataclasses import dataclass\n\n@dataclass\nclass AppConfig:\n    use_after_free: bool = False\n    ensure_resource_availability: bool = False\n    merge_body: bool = True\n    independent_500: bool = False\n    failure_behind_failure: bool = False\n    multiple_conformance_issues: bool = False\n    unsatisfiable: bool = False\n    custom_headers: dict | None = None\n    multiple_source_links: bool = False\n    auth_token: str | None = None\n    ignored_auth: bool = False\n    slowdown: float | int | None = None\n    multiple_incoming_links_with_same_status: bool = False\n    duplicate_operation_links: bool = False\n    circular_links: bool = False\n    invalid_parameter: bool = False\n    list_users_as_root: bool = False\n    no_reliable_transitions: bool = False\n    return_plain_text: Literal[False] | str | bytes = False\n    omit_required_field: bool = False\n\nclass FlaskAPI:\n    def __init__(self):\n        self.app = Flask(__name__)\n        self.config = AppConfig()\n        self.next_user_id = 1\n        self.last_modified = \"2021-01-01T00:00:00Z\"\n        self.users = {0: {\"id\": 0, \"name\": \"John Doe\", \"last_modified\": self.last_modified}}\n        self.deleted_orders = set()\n        self._setup_routes()\n\n    def _setup_routes(self):\n        @self.app.route(\"/openapi.json\", methods=[\"GET\"])\n        def get_spec():\n            return jsonify(self.app.config[\"schema\"])\n\n        @self.app.route(\"/users/<int:user_id>\", methods=[\"GET\"])\n        def get_user(user_id):\n            if self.config.slowdown:\n                time.sleep(self.config.slowdown)\n            user = self.users.get(user_id)\n            if user:\n                if self.config.return_plain_text is not False:\n                    return self.config.return_plain_text, 200, {\"Content-Type\": \"text/plain\"}\n                if self.config.omit_required_field:\n                    return jsonify({\"name\": user[\"name\"], \"last_modified\": user[\"last_modified\"]})\n                return jsonify(user)\n            return jsonify({\"error\": \"User not found\"}), 404\n\n        @self.app.route(\"/users\", methods=[\"GET\"])\n        def list_users():\n            return jsonify(self.users)\n\n        @self.app.route(\"/users\", methods=[\"POST\"])\n        def create_user():\n            if self.config.slowdown:\n                time.sleep(self.config.slowdown)\n            data = request.get_json()\n            if not isinstance(data, dict):\n                return jsonify({\"error\": \"Invalid input\"}), 400\n            name = data.get(\"name\")\n            if name is None:\n                return jsonify({\"error\": \"Name is required\"}), 400\n\n            new_user = {\"id\": self.next_user_id, \"name\": name, \"last_modified\": self.last_modified}\n            if not self.config.ensure_resource_availability:\n                self.users[self.next_user_id] = new_user\n            self.next_user_id += 1\n\n            if self.config.omit_required_field:\n                return jsonify({\"name\": new_user[\"name\"], \"last_modified\": new_user[\"last_modified\"]}), 201\n            return jsonify(new_user), 201\n\n        @self.app.route(\"/users/<int:user_id>\", methods=[\"PATCH\"])\n        def update_user(user_id):\n            if self.config.slowdown:\n                time.sleep(self.config.slowdown)\n            user = self.users.get(user_id)\n            if user:\n                data = request.get_json()\n                if not self.config.merge_body:\n                    assert len(data) == 1\n                else:\n                    assert \"name\" in data\n                    user[\"name\"] = data[\"name\"]\n                return jsonify(user)\n            return jsonify({\"error\": \"User not found\"}), 404\n\n        @self.app.route(\"/users/<int:user_id>\", methods=[\"DELETE\"])\n        def delete_user(user_id):\n            if self.config.slowdown:\n                time.sleep(self.config.slowdown)\n            user = self.users.get(user_id)\n            if user:\n                if self.config.use_after_free:\n                    if len(user[\"name\"]) < 10:\n                        del self.users[user_id]\n                else:\n                    del self.users[user_id]\n                return jsonify({\"message\": \"User deleted successfully\"}), 204\n            return jsonify({\"error\": \"User not found\"}), 404\n\n        @self.app.route(\"/orders/<order_id>\", methods=[\"DELETE\"])\n        def delete_order(order_id):\n            if self.config.slowdown:\n                time.sleep(self.config.slowdown)\n            if order_id in self.deleted_orders:\n                return jsonify({\"error\": \"Order not found\"}), 404\n            self.deleted_orders.add(order_id)\n            return jsonify({\"message\": \"Nothing happened\"}), 200\n\n        @self.app.before_request\n        def check_auth():\n            if not (self.config.ignored_auth or self.config.auth_token is None or request.endpoint == get_spec.__name__):\n                auth_header = request.headers.get(\"Authorization\")\n                if not auth_header:\n                    abort(401, description=\"Authorization header is missing\")\n                try:\n                    token_type, token = auth_header.split()\n                    if token_type.lower() != \"bearer\" or token != self.config.auth_token:\n                        abort(401, description=\"Invalid token\")\n                except ValueError:\n                    abort(401, description=\"Invalid Authorization header format\")",
    "Code_level": "Class-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, jsonify, Response\nfrom datetime import datetime\nfrom typing import Dict, Set, Any\n\nclass AppConfig:\n    def __init__(self):\n        self.fail_create = False\n        self.fail_update = False\n        self.fail_delete = False\n        self.mock_delay = 0\n        self.auth_required = True\n        self.auth_token = \"test_token\"\n\nclass FlaskAPI:\n    def __init__(self):\n        self.app = Flask(__name__)\n        self.config = AppConfig()\n        self.next_user_id = 1\n        self.last_modified = datetime.now().isoformat()\n        self.users: Dict[int, Dict[str, Any]] = {}\n        self.deleted_orders: Set[str] = set()\n        self._setup_routes()\n\n    def _setup_routes(self):\n        self.app.before_request(self.check_auth)\n        self.app.add_url_rule('/spec', view_func=self.get_spec, methods=['GET'])\n        self.app.add_url_rule('/users', view_func=self.list_users, methods=['GET'])\n        self.app.add_url_rule('/users', view_func=self.create_user, methods=['POST'])\n        self.app.add_url_rule('/users/<int:user_id>', view_func=self.get_user, methods=['GET'])\n        self.app.add_url_rule('/users/<int:user_id>', view_func=self.update_user, methods=['PUT'])\n        self.app.add_url_rule('/users/<int:user_id>', view_func=self.delete_user, methods=['DELETE'])\n        self.app.add_url_rule('/orders/<order_id>', view_func=self.delete_order, methods=['DELETE'])\n\n    def get_spec(self):\n        spec = {\n            \"openapi\": \"3.0.0\",\n            \"info\": {\"title\": \"User Management API\", \"version\": \"1.0.0\"},\n            \"paths\": {\n                \"/users\": {\n                    \"get\": {\"summary\": \"List all users\"},\n                    \"post\": {\"summary\": \"Create a new user\"}\n                },\n                \"/users/{user_id}\": {\n                    \"get\": {\"summary\": \"Get user by ID\"},\n                    \"put\": {\"summary\": \"Update user by ID\"},\n                    \"delete\": {\"summary\": \"Delete user by ID\"}\n                },\n                \"/orders/{order_id}\": {\n                    \"delete\": {\"summary\": \"Delete order by ID\"}\n                },\n                \"/spec\": {\"get\": {\"summary\": \"Get OpenAPI specification\"}}\n            }\n        }\n        return jsonify(spec)\n\n    def check_auth(self):\n        if self.config.auth_required:\n            auth_header = request.headers.get('Authorization')\n            if not auth_header or auth_header != f\"Bearer {self.config.auth_token}\":\n                return jsonify({\"error\": \"Unauthorized\"}), 401\n        return None\n\n    def get_user(self, user_id):\n        if self.config.mock_delay > 0:\n            from time import sleep\n            sleep(self.config.mock_delay)\n        if user_id not in self.users:\n            return jsonify({\"error\": \"User not found\"}), 404\n        return jsonify(self.users[user_id])\n\n    def list_users(self):\n        if self.config.mock_delay > 0:\n            from time import sleep\n            sleep(self.config.mock_delay)\n        return jsonify(list(self.users.values()))\n\n    def create_user(self):\n        if self.config.fail_create:\n            return jsonify({\"error\": \"Failed to create user\"}), 500\n        if self.config.mock_delay > 0:\n            from time import sleep\n            sleep(self.config.mock_delay)\n        data = request.json\n        if not data or 'name' not in data or 'email' not in data:\n            return jsonify({\"error\": \"Missing required fields\"}), 400\n        user = {\n            'id': self.next_user_id,\n            'name': data['name'],\n            'email': data['email'],\n            'created_at': datetime.now().isoformat()\n        }\n        self.users[self.next_user_id] = user\n        self.next_user_id += 1\n        self.last_modified = datetime.now().isoformat()\n        return jsonify(user), 201\n\n    def update_user(self, user_id):\n        if self.config.fail_update:\n            return jsonify({\"error\": \"Failed to update user\"}), 500\n        if self.config.mock_delay > 0:\n            from time import sleep\n            sleep(self.config.mock_delay)\n        if user_id not in self.users:\n            return jsonify({\"error\": \"User not found\"}), 404\n        data = request.json\n        if not data:\n            return jsonify({\"error\": \"No data provided\"}), 400\n        self.users[user_id].update(data)\n        self.last_modified = datetime.now().isoformat()\n        return jsonify(self.users[user_id])\n\n    def delete_user(self, user_id):\n        if self.config.fail_delete:\n            return jsonify({\"error\": \"Failed to delete user\"}), 500\n        if self.config.mock_delay > 0:\n            from time import sleep\n            sleep(self.config.mock_delay)\n        if user_id not in self.users:\n            return jsonify({\"error\": \"User not found\"}), 404\n        del self.users[user_id]\n        self.last_modified = datetime.now().isoformat()\n        return jsonify({\"message\": \"User deleted\"})\n\n    def delete_order(self, order_id):\n        if self.config.mock_delay > 0:\n            from time import sleep\n            sleep(self.config.mock_delay)\n        self.deleted_orders.add(order_id)\n        return jsonify({\"message\": f\"Order {order_id} marked as deleted\"})\n\nif __name__ == '__main__':\n    api = FlaskAPI()\n    api.app.run(debug=True)"
  },
  {
    "Task_id": 153,
    "Instruction": "Task Description: Create a Flask-based HTTP server class that handles user authentication, request rate limiting, and database interactions, with the ability to run in both development and production environments.\n\nClass Description: FlaskServer is a class that encapsulates a Flask web application with user authentication, rate limiting, and database connectivity features. It provides routes for main page display and user login functionality, along with supporting methods for database operations and request handling.\n\nAttributes:\n- app: Flask - The Flask application instance\n- limiter: Limiter - Rate limiting controller for the application\n- SECRET_KEY: str - Secret key for session management\n\nMethods:\n- __init__() -> None - Initializes the Flask application, sets up rate limiting, and configures routes and secret key\n- _setup_routes() -> None - Defines all application routes and request handlers (internal method)\n- connect_db() -> sqlite3.Connection - Establishes connection to SQLite database\n- query_db(query: str, args: tuple = (), one: bool = False) -> Union[list, dict, None] - Executes database query and returns results\n- get_user_id(username: str) -> Union[int, None] - Retrieves user ID from database by username\n- papers_filter_version(papers: list, v: str) -> list - Filters papers by version number\n- default_context(papers: list, **kws) -> dict - Creates default template context with papers data\n- run(port: int = 5000, debug: bool = False, prod: bool = False) -> None - Starts the server in either development or production mode\n\nRoute Handlers (defined in _setup_routes):\n- before_request() -> None - Sets up database connection and user session before each request\n- teardown_request(exception: Exception) -> None - Closes database connection after each request\n- intmain() -> str - Handles root route, displays main page with papers\n- login() -> Response - Handles user login POST requests, manages authentication",
    "Canonical_solution": "from flask import Flask, request, session, url_for, redirect, render_template, abort, g, flash, _app_ctx_stack\nfrom flask_limiter import Limiter\nfrom werkzeug import check_password_hash, generate_password_hash\nimport pymongo\nimport time\nfrom sqlite3 import dbapi2 as sqlite3\n\nclass FlaskServer:\n    def __init__(self):\n        self.app = Flask(__name__)\n        self.limiter = Limiter(self.app, global_limits=[\"100 per hour\", \"20 per minute\"])\n        self._setup_routes()\n        \n        # Database configuration\n        if os.path.isfile('secret_key.txt'):\n            SECRET_KEY = open('secret_key.txt', 'r').read()\n        else:\n            SECRET_KEY = 'devkey, should be in a file'\n        self.app.config['SECRET_KEY'] = SECRET_KEY\n\n    def _setup_routes(self):\n        @self.app.before_request\n        def before_request():\n            g.db = self.connect_db()\n            g.user = None\n            if 'user_id' in session:\n                g.user = self.query_db('select * from user where user_id = ?',\n                                    [session['user_id']], one=True)\n\n        @self.app.teardown_request\n        def teardown_request(exception):\n            db = getattr(g, 'db', None)\n            if db is not None:\n                db.close()\n\n        @self.app.route(\"/\")\n        def intmain():\n            vstr = request.args.get('vfilter', 'all')\n            papers = [db[pid] for pid in DATE_SORTED_PIDS]\n            papers = self.papers_filter_version(papers, vstr)\n            ctx = self.default_context(papers, render_format='recent',\n                                    msg='Showing most recent Arxiv papers:')\n            return render_template('main.html', **ctx)\n\n        @self.app.route('/login', methods=['POST'])\n        def login():\n            if not request.form['username']:\n                flash('You have to enter a username')\n            elif not request.form['password']:\n                flash('You have to enter a password')\n            elif self.get_user_id(request.form['username']) is not None:\n                user = self.query_db('''select * from user where\n                    username = ?''', [request.form['username']], one=True)\n                if check_password_hash(user['pw_hash'], request.form['password']):\n                    session['user_id'] = self.get_user_id(request.form['username'])\n                    flash('User ' + request.form['username'] + ' logged in.')\n                else:\n                    flash('User ' + request.form['username'] + ' already exists, wrong password.')\n            else:\n                creation_time = int(time.time())\n                g.db.execute('''insert into user (username, pw_hash, creation_time) values (?, ?, ?)''',\n                    [request.form['username'], \n                    generate_password_hash(request.form['password']), \n                    creation_time])\n                user_id = g.db.execute('select last_insert_rowid()').fetchall()[0][0]\n                g.db.commit()\n                session['user_id'] = user_id\n                flash('New account %s created' % (request.form['username'], ))\n            return redirect(url_for('intmain'))\n\n    def connect_db(self):\n        sqlite_db = sqlite3.connect(Config.database_path)\n        sqlite_db.row_factory = sqlite3.Row\n        return sqlite_db\n\n    def query_db(self, query, args=(), one=False):\n        cur = g.db.execute(query, args)\n        rv = cur.fetchall()\n        return (rv[0] if rv else None) if one else rv\n\n    def get_user_id(self, username):\n        rv = self.query_db('select user_id from user where username = ?',\n                        [username], one=True)\n        return rv[0] if rv else None\n\n    def papers_filter_version(self, papers, v):\n        if v != '1': \n            return papers\n        intv = int(v)\n        filtered = [p for p in papers if p['_version'] == intv]\n        return filtered\n\n    def default_context(self, papers, **kws):\n        top_papers = self.encode_json(papers, args.num_results)\n        ans = dict(papers=top_papers, numresults=len(papers), totpapers=len(db), tweets=[], msg='', show_prompt='no', pid_to_users={})\n        ans.update(kws)\n        return ans\n\n    def run(self, port=5000, debug=False, prod=False):\n        if prod:\n            from tornado.wsgi import WSGIContainer\n            from tornado.httpserver import HTTPServer\n            from tornado.ioloop import IOLoop\n            from tornado.log import enable_pretty_logging\n            enable_pretty_logging()\n            http_server = HTTPServer(WSGIContainer(self.app))\n            http_server.listen(port)\n            IOLoop.instance().start()\n        else:\n            self.app.debug = debug\n            self.app.run(port=port, host='0.0.0.0')",
    "Code_level": "Class-level",
    "FSMID_for_test": 60,
    "right_result": "import os\nimport sqlite3\nfrom flask import Flask, request, session, redirect, url_for, render_template, Response\nfrom flask_limiter import Limiter\nfrom flask_limiter.util import get_remote_address\nfrom typing import Union, List, Dict, Tuple, Optional\n\nclass FlaskServer:\n    def __init__(self):\n        self.app = Flask(__name__)\n        self.limiter = Limiter(\n            self.app,\n            key_func=get_remote_address,\n            default_limits=[\"200 per day\", \"50 per hour\"]\n        )\n        self.SECRET_KEY = os.urandom(24)\n        self.app.config['SECRET_KEY'] = self.SECRET_KEY\n        self._setup_routes()\n\n    def _setup_routes(self):\n        @self.app.before_request\n        def before_request():\n            self.app.db = self.connect_db()\n\n        @self.app.teardown_request\n        def teardown_request(exception):\n            db = getattr(self.app, 'db', None)\n            if db is not None:\n                db.close()\n\n        @self.app.route('/')\n        def intmain():\n            papers = self.query_db(\"SELECT * FROM papers\")\n            return self.default_context(papers)\n\n        @self.app.route('/login', methods=['POST'])\n        def login():\n            username = request.form.get('username')\n            password = request.form.get('password')\n            user_id = self.get_user_id(username)\n            if user_id and self.verify_password(user_id, password):\n                session['user_id'] = user_id\n                return redirect(url_for('intmain'))\n            return Response(\"Invalid credentials\", status=401)\n\n        @self.app.route('/papers')\n        def papers():\n            papers = self.query_db(\"SELECT * FROM papers\")\n            return self.default_context(papers)\n\n    def connect_db(self) -> sqlite3.Connection:\n        return sqlite3.connect('papers.db')\n\n    def query_db(self, query: str, args: tuple = (), one: bool = False) -> Union[List, Dict, None]:\n        cur = self.app.db.execute(query, args)\n        rv = cur.fetchall()\n        cur.close()\n        if not rv:\n            return None\n        elif one:\n            return rv[0]\n        else:\n            return rv\n\n    def get_user_id(self, username: str) -> Union[int, None]:\n        row = self.query_db(\"SELECT id FROM users WHERE username = ?\", (username,), one=True)\n        return row[0] if row else None\n\n    def verify_password(self, user_id: int, password: str) -> bool:\n        row = self.query_db(\"SELECT password FROM users WHERE id = ?\", (user_id,), one=True)\n        return row[0] == password if row else False\n\n    def papers_filter_version(self, papers: list, v: str) -> list:\n        return [paper for paper in papers if paper[3] == v]\n\n    def default_context(self, papers: list, **kws) -> dict:\n        return {\n            'papers': papers,\n            'version': '1.0',\n            'title': 'Paper Repository'\n        }\n\n    def run(self, port: int = 5000, debug: bool = False, prod: bool = False) -> None:\n        if prod:\n            self.app.run(host='0.0.0.0', port=port, threaded=True)\n        else:\n            self.app.run(host='0.0.0.0', port=port, debug=debug)"
  },
  {
    "Task_id": 154,
    "Instruction": "Task Description: Create a Flask-based HTTP server with multiple endpoints to handle different types of requests, including delayed responses, request type identification, and JSON responses.\n\nFunction Description: The code consists of three Flask route handlers that demonstrate different HTTP server functionalities. Each function handles a specific endpoint and performs a distinct operation.\n\nInput:\n- For '/respond' endpoint: \n  - Query parameter 'time' (integer): Time in milliseconds to sleep before responding\n- For '/request_type' endpoint: \n  - None (automatically receives request method via Flask's request object)\n- For '/json' endpoint: \n  - None\n\nOutput:\n- For '/respond' endpoint: \n  - Response text: 'Response from Flask' \n  - Headers: Sets 'Access-Control-Allow-Origin' to '*'\n- For '/request_type' endpoint: \n  - Response text: 'Request Type: [METHOD]' where [METHOD] is the HTTP method used\n  - Headers: Sets 'Access-Control-Allow-Origin' to '*'\n- For '/json' endpoint: \n  - Response: JSON object {'resp': 'Hello JSON!'}",
    "Canonical_solution": "from flask import Flask, request, make_response\nfrom time import sleep\n\napp = Flask(__name__)\n\n@app.route('/respond')\ndef respond():\n    time_to_sleep = int(request.args.get('time')) / 1000\n    sleep(time_to_sleep)\n    resp = make_response('Response from Flask')\n    resp.headers['Access-Control-Allow-Origin'] = '*'\n    return resp\n\n@app.route('/request_type')\ndef request_type():\n    resp = make_response('Request Type: ' + request.method)\n    resp.headers['Access-Control-Allow-Origin'] = '*'\n    return resp\n\n@app.route('/json')\ndef json():\n    return {resp:'Hello JSON!'}",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n@app.route('/respond')\ndef respond():\n    time = int(request.args.get('time', 0))\n    import time\n    time.sleep(time / 1000)\n    return 'Response from Flask', 200, {'Access-Control-Allow-Origin': '*'}\n\n@app.route('/request_type')\ndef request_type():\n    method = request.method\n    return f'Request Type: {method}', 200, {'Access-Control-Allow-Origin': '*'}\n\n@app.route('/json')\ndef json():\n    return jsonify({'resp': 'Hello JSON!'}), 200, {'Access-Control-Allow-Origin': '*'}\n\nif __name__ == '__main__':\n    app.run(debug=True)"
  },
  {
    "Task_id": 155,
    "Instruction": "Task Description: Create a Flask-based HTTP server endpoint that processes Pub/Sub messages from ArgoCD, transforms them into a standardized event format, and stores them in BigQuery.\n\nFunction Description: The function processes incoming HTTP POST requests containing Pub/Sub messages from ArgoCD. It validates the message structure, decodes and processes the event data, converts it to a standardized format, and stores it in BigQuery. Error handling is included for invalid payloads or processing failures.\n\nInput: \n- HTTP POST request with JSON payload containing Pub/Sub message in the following format:\n  {\n    \"message\": {\n      \"data\": [base64-encoded string],\n      \"message_id\": [string],\n      \"attributes\": [object]\n    }\n  }\n\nOutput: \n- HTTP 204 No Content response on successful processing\n- Error responses with appropriate status codes for invalid requests\n- Side effect: Processed event data is inserted into BigQuery\n\nMethods:\n\nprocess_argocd_event:\n- Input: msg [dict] - The Pub/Sub message dictionary containing the event data\n- Returns: dict - Processed event data in standardized format\n- Description: Decodes base64 message data, extracts metadata, and creates a standardized event object with unique signature\n\nindex:\n- Input: None (handles Flask request object internally)\n- Returns: str - Empty string with HTTP 204 status code\n- Description: Main endpoint that receives Pub/Sub messages, validates them, processes through process_argocd_event, and stores in BigQuery. Handles errors and logs failures.",
    "Canonical_solution": "import base64\nimport os\nimport json\nimport shared\nfrom flask import Flask, request\n\napp = Flask(__name__)\n\ndef process_argocd_event(msg):\n    metadata = json.loads(base64.b64decode(msg[\"data\"]).decode(\"utf-8\").strip())\n\n    # Unique hash for the event\n    signature = shared.create_unique_id(msg)\n\n    argocd_event = {\n        \"event_type\": \"deployment\",  # Event type, eg \"push\", \"pull_reqest\", etc\n        \"id\": metadata[\"id\"],  # Object ID, eg pull request ID\n        \"metadata\": json.dumps(metadata),  # The body of the msg\n        \"time_created\": metadata[\"time\"],  # The timestamp of with the event\n        \"signature\": signature,  # The unique event signature\n        \"msg_id\": msg[\"message_id\"],  # The pubsub message id\n        \"source\": \"argocd\",  # The name of the source, eg \"github\"\n    }\n\n    print(argocd_event)\n    return argocd_event\n\n@app.route(\"/\", methods=[\"POST\"])\ndef index():\n    \"\"\"\n    Receives messages from a push subscription from Pub/Sub.\n    Parses the message, and inserts it into BigQuery.\n    \"\"\"\n    event = None\n    if not request.is_json:\n        raise Exception(\"Expecting JSON payload\")\n    envelope = request.get_json()\n    print(f\"envelope recieved: {envelope}\")\n\n    # Check that data has been posted\n    if not envelope:\n        raise Exception(\"Expecting JSON payload\")\n    # Check that message is a valid pub/sub message\n    if \"message\" not in envelope:\n        raise Exception(\"Not a valid Pub/Sub Message\")\n    msg = envelope[\"message\"]\n\n    if \"attributes\" not in msg:\n        raise Exception(\"Missing pubsub attributes\")\n\n    try:\n        event = process_argocd_event(msg)\n\n        # [Do not edit below]\n        shared.insert_row_into_bigquery(event)\n\n    except Exception as e:\n        entry = {\n                \"severity\": \"WARNING\",\n                \"msg\": \"Data not saved to BigQuery\",\n                \"errors\": str(e),\n                \"json_payload\": envelope\n            }\n        print(json.dumps(entry))\n\n    return \"\", 204",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "import os\nimport base64\nimport json\nfrom flask import Flask, request, jsonify\nfrom google.cloud import bigquery\n\napp = Flask(__name__)\n\nclient = bigquery.Client()\n\ndef process_argocd_event(msg):\n    try:\n        data = base64.b64decode(msg['message']['data']).decode('utf-8')\n        event_data = json.loads(data)\n        message_id = msg['message']['message_id']\n        attributes = msg['message'].get('attributes', {})\n        \n        event = {\n            'event_type': event_data.get('type'),\n            'event_version': event_data.get('version'),\n            'event_time': event_data.get('time'),\n            'event_source': event_data.get('source'),\n            'event_data': event_data,\n            'message_id': message_id,\n            'attributes': attributes\n        }\n        return event\n    except Exception as e:\n        raise ValueError(f\"Failed to process event: {str(e)}\")\n\n@app.route('/argo-webhook', methods=['POST'])\ndef index():\n    try:\n        payload = request.json\n        if not payload or 'message' not in payload:\n            return jsonify({\"error\": \"Invalid payload format\"}), 400\n        \n        msg = payload['message']\n        event = process_argocd_event(msg)\n        \n        table_id = f\"{os.environ.get('BIGQUERY_PROJECT')}.{os.environ.get('BIGQUERY_DATASET')}.{os.environ.get('BIGQUERY_TABLE')}\"\n        dataset_ref = client.dataset(os.environ.get('BIGQUERY_DATASET'))\n        table_ref = dataset_ref.table(os.environ.get('BIGQUERY_TABLE'))\n        table = client.get_table(table_ref)\n        \n        rows_to_insert = [event]\n        errors = client.insert_rows_json(table, rows_to_insert)\n        if errors:\n            for error in errors:\n                print(f\"Error inserting row: {error}\")\n            return jsonify({\"error\": \"Failed to insert into BigQuery\"}), 500\n        \n        return '', 204\n    except ValueError as ve:\n        print(f\"Value error: {ve}\")\n        return jsonify({\"error\": str(ve)}), 400\n    except Exception as e:\n        print(f\"Unexpected error: {e}\")\n        return jsonify({\"error\": \"Internal server error\"}), 500\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=8080)"
  },
  {
    "Task_id": 156,
    "Instruction": "Task Description: Create a Flask-based web application class that handles user authentication, registration, and session management with role-based access control.\n\nClass Description: The WebApp class encapsulates a complete Flask web application with user authentication features. It includes database integration for user management, login/logout functionality, role-based access control, and session management.\n\nAttributes:\n\napp: [Flask] - The main Flask application instance\ndb: [SQLAlchemy] - Database instance for user management\nlogin_manager: [LoginManager] - Flask-Login manager for authentication\nUser: [SQLAlchemy Model] - Database model for user accounts\nSettingForm: [FlaskForm] - Form for password changes\nLoginForm: [FlaskForm] - Form for user login\nRegistrationForm: [FlaskForm] - Form for new user registration\nCaseForm: [FlaskForm] - Form for case management\n\nMethods:\n\n__init__: [None]() -> [None] - Initializes the Flask application, database, forms, and routes\nrun: [None](host='0.0.0.0', port=8080) -> [None] - Starts the Flask development server\nlogin_required: [function](role=\"ANY\") -> [function] - Decorator for role-based route protection\nload_user: [function](user_id) -> [User] - Callback for loading users from session\nunauthorized: [None]() -> [redirect] - Handler for unauthorized access attempts\nlogin: [function]() -> [response] - Handles user login requests\nsignup: [function]() -> [response] - Handles new user registration\nsetting: [function]() -> [response] - Handles user settings changes\nlogout: [function]() -> [redirect] - Handles user logout\nindex: [function]() -> [response] - Main application route",
    "Canonical_solution": "from flask import Flask, render_template, request, redirect, session\nfrom flask_login import UserMixin, LoginManager, login_user, logout_user, current_user\nfrom flask_sqlalchemy import SQLAlchemy\nfrom flask_wtf import FlaskForm\nfrom wtforms import StringField, PasswordField\nfrom wtforms.validators import ValidationError, DataRequired, EqualTo, Length\nimport os\nimport datetime\n\nclass WebApp:\n    def __init__(self):\n        self.app = Flask(__name__)\n        self.app.config[\"SESSION_COOKIE_SECURE\"] = False\n        self.app.config[\"SQLALCHEMY_TRACK_MODIFICATIONS\"] = False\n        self.app.config[\"SQLALCHEMY_DATABASE_URI\"] = \"sqlite:///logontracer.db\"\n        self.app.config[\"SECRET_KEY\"] = os.urandom(24)\n        self.app.permanent_session_lifetime = datetime.timedelta(minutes=60)\n        \n        self.db = SQLAlchemy(self.app)\n        self.login_manager = LoginManager()\n        self.login_manager.init_app(self.app)\n\n        class User(UserMixin, self.db.Model):\n            id = self.db.Column(self.db.Integer, primary_key=True)\n            username = self.db.Column(self.db.String(50), nullable=False, unique=True)\n            urole = self.db.Column(self.db.String(20))\n\n        class SettingForm(FlaskForm):\n            password1 = PasswordField('Password', validators=[DataRequired(), EqualTo('password2', message='Passwords must match.'), Length(min=3, max=20)])\n            password2 = PasswordField('Password (again)', validators=[DataRequired(), Length(min=3, max=20)])\n\n        class LoginForm(FlaskForm):\n            username = StringField('Username', validators=[DataRequired(), Length(min=3, max=50)])\n            password = PasswordField('Password', validators=[DataRequired(), Length(min=3, max=20)])\n\n        class RegistrationForm(FlaskForm):\n            username = StringField('Username', validators=[DataRequired(), Length(min=3, max=50)])\n            password1 = PasswordField('Password', validators=[DataRequired(), EqualTo('password2', message='Passwords must match.'), Length(min=3, max=20)])\n            password2 = PasswordField('Password (again)', validators=[DataRequired(), Length(min=3, max=20)])\n\n        class CaseForm(FlaskForm):\n            case = StringField('Case', validators=[DataRequired()])\n\n        with self.app.app_context():\n            self.db.create_all()\n\n        @self.login_manager.user_loader\n        def load_user(user_id):\n            return self.db.session.get(User, int(user_id))\n\n        @self.login_manager.unauthorized_handler\n        def unauthorized():\n            return redirect('/login')\n\n        @self.app.route('/login', methods=['GET', 'POST'])\n        def login():\n            if current_user.is_authenticated:\n                return redirect('/')\n\n            session.permanent = True\n            form = LoginForm(request.form)\n            if form.validate_on_submit():\n                username = form.username.data\n                password = form.password.data\n                remember = True if request.form.get(\"remember\") else False\n\n                session[\"username\"] = username\n                session[\"password\"] = password\n\n                user = User.query.filter_by(username=username).first()\n                login_user(user, remember=remember)\n                return redirect('/')\n\n            return render_template('login.html', form=form)\n\n        @self.app.route('/signup', methods=['GET', 'POST'])\n        @login_required(role=\"ADMIN\")\n        def signup():\n            form = RegistrationForm(request.form)\n            if form.validate_on_submit():\n                username = form.username.data\n                password = form.password1.data\n                admin = True if request.form.get(\"admin\") else False\n\n                with self.app.app_context():\n                    user = User(username=username, urole=\"ADMIN\" if admin else \"USER\")\n                    self.db.session.add(user)\n                    self.db.session.commit()\n\n                return redirect('/')\n            return render_template('signup.html', form=form)\n\n        @self.app.route('/setting', methods=['GET', 'POST'])\n        @login_required(role=\"ANY\")\n        def setting():\n            form = SettingForm(request.form)\n            if form.validate_on_submit():\n                username = current_user.username\n                password = form.password1.data\n\n                with self.app.app_context():\n                    user_query = User.query.filter_by(username=username).first()\n                    self.db.session.delete(user_query)\n                    self.db.session.commit()\n\n                    user = User(username=username, urole=user_query.urole)\n                    self.db.session.add(user)\n                    self.db.session.commit()\n\n                session[\"password\"] = password\n                return redirect('/')\n            return render_template('setting.html', form=form)\n\n        @self.app.route('/logout')\n        @login_required(role=\"ANY\")\n        def logout():\n            logout_user()\n            return redirect('/login')\n\n        @self.app.route('/')\n        @login_required(role=\"ANY\")\n        def index():\n            return render_template(\"index.html\")\n\n    def run(self, host='0.0.0.0', port=8080):\n        self.app.run(host=host, port=port)\n\n    def login_required(self, role=\"ANY\"):\n        def wrapper(fn):\n            @wraps(fn)\n            def decorated_view(*args, **kwargs):\n                if not current_user.is_authenticated:\n                    return self.login_manager.unauthorized()\n                urole = current_user.get_urole()\n                if ((urole != role) and (role != \"ANY\")):\n                    return self.login_manager.unauthorized()\n                return fn(*args, **kwargs)\n            return decorated_view\n        return wrapper",
    "Code_level": "Class-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, render_template, redirect, url_for, flash, request\nfrom flask_sqlalchemy import SQLAlchemy\nfrom flask_login import LoginManager, UserMixin, login_user, logout_user, current_user, login_required\nfrom flask_wtf import FlaskForm\nfrom wtforms import StringField, PasswordField, BooleanField, SubmitField\nfrom wtforms.validators import DataRequired, Length, EqualTo, Regexp\nfrom functools import wraps\n\nclass WebApp:\n    def __init__(self, app=None):\n        self.app = app or Flask(__name__)\n        self.app.config['SECRET_KEY'] = 'your-secret-key'\n        self.app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///users.db'\n        self.app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\n        self.db = SQLAlchemy(self.app)\n        self.login_manager = LoginManager(self.app)\n        self.login_manager.login_view = 'login'\n        self.User = self.db.Model\n        self.User.__tablename__ = 'user'\n        self.User.id = self.db.Column(self.db.Integer, primary_key=True)\n        self.User.username = self.db.Column(self.db.String(64), unique=True, nullable=False)\n        self.User.email = self.db.Column(self.db.String(120), unique=True, nullable=False)\n        self.User.password_hash = self.db.Column(self.db.String(128))\n        self.User.role = self.db.Column(self.db.String(20), default='user')\n        self.db.create_all()\n        self.login_manager.user_loader(self.load_user)\n        self.register_routes()\n\n    def register_routes(self):\n        @self.app.route('/')\n        def index():\n            return render_template('index.html')\n\n        @self.app.route('/login', methods=['GET', 'POST'])\n        def login():\n            if current_user.is_authenticated:\n                return redirect(url_for('index'))\n            form = LoginForm()\n            if form.validate_on_submit():\n                user = self.User.query.filter_by(username=form.username.data).first()\n                if user and user.check_password(form.password.data):\n                    login_user(user, remember=form.remember.data)\n                    next_page = request.args.get('next')\n                    return redirect(next_page) if next_page else redirect(url_for('index'))\n                else:\n                    flash('Invalid username or password')\n            return render_template('login.html', form=form)\n\n        @self.app.route('/signup', methods=['GET', 'POST'])\n        def signup():\n            if current_user.is_authenticated:\n                return redirect(url_for('index'))\n            form = RegistrationForm()\n            if form.validate_on_submit():\n                user = self.User(username=form.username.data, email=form.email.data)\n                user.set_password(form.password.data)\n                self.db.session.add(user)\n                self.db.session.commit()\n                flash('Registration successful. Please log in.')\n                return redirect(url_for('login'))\n            return render_template('signup.html', form=form)\n\n        @self.app.route('/setting', methods=['GET', 'POST'])\n        @login_required\n        def setting():\n            form = SettingForm()\n            if form.validate_on_submit():\n                if form.old_password.data:\n                    if not current_user.check_password(form.old_password.data):\n                        flash('Old password is incorrect')\n                        return redirect(url_for('setting'))\n                    current_user.set_password(form.new_password.data)\n                self.db.session.commit()\n                flash('Settings updated successfully')\n                return redirect(url_for('index'))\n            return render_template('setting.html', form=form)\n\n        @self.app.route('/logout')\n        @login_required\n        def logout():\n            logout_user()\n            return redirect(url_for('index'))\n\n        @self.app.route('/unauthorized')\n        def unauthorized():\n            return redirect(url_for('login'))\n\n        self.login_manager.blueprint.login_view = 'login'\n\n    def run(self, host='0.0.0.0', port=8080):\n        self.app.run(host=host, port=port)\n\n    def login_required(self, role=\"ANY\"):\n        def decorator(f):\n            @wraps(f)\n            def wrapped(*args, **kwargs):\n                if not current_user.is_authenticated:\n                    return redirect(url_for('login'))\n                if role != \"ANY\" and current_user.role != role:\n                    return redirect(url_for('unauthorized'))\n                return f(*args, **kwargs)\n            return wrapped\n        return decorator\n\n    def load_user(self, user_id):\n        return self.User.query.get(int(user_id))\n\nclass SettingForm(FlaskForm):\n    old_password = PasswordField('Old Password', validators=[DataRequired()])\n    new_password = PasswordField('New Password', validators=[DataRequired(), Length(min=6)])\n    confirm_password = PasswordField('Confirm Password', validators=[DataRequired(), EqualTo('new_password')])\n    submit = SubmitField('Update Settings')\n\nclass LoginForm(FlaskForm):\n    username = StringField('Username', validators=[DataRequired()])\n    password = PasswordField('Password', validators=[DataRequired()])\n    remember = BooleanField('Remember Me')\n    submit = SubmitField('Login')\n\nclass RegistrationForm(FlaskForm):\n    username = StringField('Username', validators=[DataRequired(), Length(min=2, max=64)])\n    email = StringField('Email', validators=[DataRequired(), Length(max=120)])\n    password = PasswordField('Password', validators=[DataRequired(), Length(min=6)])\n    confirm_password = PasswordField('Confirm Password', validators=[DataRequired(), EqualTo('password')])\n    submit = SubmitField('Register')"
  },
  {
    "Task_id": 157,
    "Instruction": "Task Description: Create a Flask-based HTTP server endpoint that receives JSON data, processes it using a pre-trained machine learning model, and returns predictions in JSON format.\n\nFunction Description: The function handles POST requests to the '/predict' endpoint. It receives JSON data, validates it, loads a pre-trained model, makes predictions, and returns the results. It also includes error handling for bad requests.\n\nInput: \n- HTTP POST request with JSON payload containing data for prediction\n- The function accesses this through Flask's request.get_json()\n\nOutput:\n- Successful case: JSON response containing prediction results with HTTP status code 200\n- Error case: JSON error message with HTTP status code 400 for bad requests",
    "Canonical_solution": "from flask import Flask, jsonify, request\n\napp = Flask(__name__)\n\n@app.route('/predict', methods=['POST'])\ndef apicall():\n    try:\n        test_json = request.get_json()\n        test = pd.read_json(test_json)\n        print(\"The test data received are as follows...\")\n        print(test)\n        print()\n\n    except Exception as e:\n        raise e\n\n    clf = 'lm_model_v1.pk'\n    \n    if test.empty:\n        return(bad_request())\n    else:\n        print(\"Loading the model...\")\n        loaded_model = None\n        with open('./models/'+clf,'rb') as f:\n            loaded_model = pickle.load(f)\n\n        print(\"The model has been loaded...doing predictions now...\")\n        print()\n        predictions = loaded_model.predict(test)\n            \n        prediction_series = pd.Series(predictions)\n        response = jsonify(prediction_series.to_json())\n        response.status_code = 200\n        return (response)\n\n@app.errorhandler(400)\ndef bad_request(error=None):\n    message = {\n            'status': 400,\n            'message': 'Bad Request: ' + request.url + '--> Please check your data payload...',\n    }\n    resp = jsonify(message)\n    resp.status_code = 400\n\n    return resp",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, jsonify\nimport json\n\napp = Flask(__name__)\n\n# Load the pre-trained model (example placeholder)\n# model = load_model('path_to_model')\n\n@app.route('/predict', methods=['POST'])\ndef predict():\n    data = request.get_json()\n    if not data:\n        return jsonify({'error': 'No JSON data provided'}), 400\n    \n    try:\n        # Validate input data (example validation)\n        if not all(key in data for key in ['feature1', 'feature2']):\n            return jsonify({'error': 'Missing required fields'}), 400\n        \n        # Process data and make prediction\n        # prediction = model.predict([data['feature1'], data['feature2']])\n        prediction = \"predicted_value\"  # Placeholder for actual prediction\n        \n        return jsonify({'prediction': prediction}), 200\n    \n    except Exception as e:\n        return jsonify({'error': str(e)}), 400\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000)"
  },
  {
    "Task_id": 158,
    "Instruction": "Task Description: Create a Flask-based web application for movie recommendations that handles user requests, processes movie data, and returns recommendations along with detailed movie information.\n\nFunction Description: The application consists of three main routes that handle different aspects of movie recommendations: displaying the home page with suggestions, finding similar movies based on user input, and providing detailed recommendations for a selected movie.\n\nInput:\n- For \"/\" and \"/home\" routes: None (GET requests)\n- For \"/similarity\" route: A POST request with form data containing 'name' (movie title)\n- For \"/recommend\" route: A POST request with form data containing multiple movie attributes (title, cast info, IMDB ID, etc.)\n\nOutput:\n- For \"/\" and \"/home\" routes: Rendered HTML template 'home.html' with movie suggestions\n- For \"/similarity\" route: Either an error string or a string of recommended movies joined by \"---\"\n- For \"/recommend\" route: Rendered HTML template 'recommend.html' with comprehensive movie details, recommendations, and reviews\n\nMethods:\n1. home() -> HTML - Displays the home page with movie suggestions\n2. similarity() -> str - Returns similar movies based on user input\n3. recommend() -> HTML - Provides detailed recommendations for a selected movie",
    "Canonical_solution": "from flask import Flask, render_template, request\n\napp = Flask(__name__)\n\n@app.route(\"/\")\n@app.route(\"/home\")\ndef home():\n    suggestions = get_suggestions()\n    return render_template('home.html',suggestions=suggestions)\n\n@app.route(\"/similarity\",methods=[\"POST\"])\ndef similarity():\n    movie = request.form['name']\n    rc = rcmd(movie)\n    if type(rc)==type('string'):\n        return rc\n    else:\n        m_str=\"---\".join(rc)\n        return m_str\n\n@app.route(\"/recommend\",methods=[\"POST\"])\ndef recommend():\n    title = request.form['title']\n    cast_ids = request.form['cast_ids']\n    cast_names = request.form['cast_names']\n    cast_chars = request.form['cast_chars']\n    cast_bdays = request.form['cast_bdays']\n    cast_bios = request.form['cast_bios']\n    cast_places = request.form['cast_places']\n    cast_profiles = request.form['cast_profiles']\n    imdb_id = request.form['imdb_id']\n    poster = request.form['poster']\n    genres = request.form['genres']\n    overview = request.form['overview']\n    vote_average = request.form['rating']\n    vote_count = request.form['vote_count']\n    release_date = request.form['release_date']\n    runtime = request.form['runtime']\n    status = request.form['status']\n    rec_movies = request.form['rec_movies']\n    rec_posters = request.form['rec_posters']\n\n    suggestions = get_suggestions()\n\n    rec_movies = convert_to_list(rec_movies)\n    rec_posters = convert_to_list(rec_posters)\n    cast_names = convert_to_list(cast_names)\n    cast_chars = convert_to_list(cast_chars)\n    cast_profiles = convert_to_list(cast_profiles)\n    cast_bdays = convert_to_list(cast_bdays)\n    cast_bios = convert_to_list(cast_bios)\n    cast_places = convert_to_list(cast_places)\n    \n    cast_ids = cast_ids.split(',')\n    cast_ids[0] = cast_ids[0].replace(\"[\",\"\")\n    cast_ids[-1] = cast_ids[-1].replace(\"]\",\"\")\n    \n    for i in range(len(cast_bios)):\n        cast_bios[i] = cast_bios[i].replace(r'\\n', '\\n').replace(r'\\\"','\\\"')\n    \n    movie_cards = {rec_posters[i]: rec_movies[i] for i in range(len(rec_posters))}\n    \n    casts = {cast_names[i]:[cast_ids[i], cast_chars[i], cast_profiles[i]] for i in range(len(cast_profiles))}\n\n    cast_details = {cast_names[i]:[cast_ids[i], cast_profiles[i], cast_bdays[i], cast_places[i], cast_bios[i]] for i in range(len(cast_places))}\n\n    sauce = urllib.request.urlopen('https://www.imdb.com/title/{}/reviews?ref_=tt_ov_rt'.format(imdb_id)).read()\n    soup = bs.BeautifulSoup(sauce,'lxml')\n    soup_result = soup.find_all(\"div\",{\"class\":\"text show-more__control\"})\n\n    reviews_list = []\n    reviews_status = []\n    for reviews in soup_result:\n        if reviews.string:\n            reviews_list.append(reviews.string)\n            movie_review_list = np.array([reviews.string])\n            movie_vector = vectorizer.transform(movie_review_list)\n            pred = clf.predict(movie_vector)\n            reviews_status.append('Good' if pred else 'Bad')\n\n    movie_reviews = {reviews_list[i]: reviews_status[i] for i in range(len(reviews_list))}     \n\n    return render_template('recommend.html',title=title,poster=poster,overview=overview,vote_average=vote_average,\n        vote_count=vote_count,release_date=release_date,runtime=runtime,status=status,genres=genres,\n        movie_cards=movie_cards,reviews=movie_reviews,casts=casts,cast_details=cast_details)",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, render_template, request, redirect, url_for\nimport json\nimport requests\n\napp = Flask(__name__)\n\ndef get_movie_data(movie_title):\n    url = f\"https://www.omdbapi.com/?t={movie_title}&apikey=YOUR_API_KEY\"\n    response = requests.get(url)\n    return response.json()\n\ndef find_similar_movies(movie_title):\n    movie_data = get_movie_data(movie_title)\n    if movie_data.get('Response') == 'False':\n        return \"Movie not found\"\n    similar_movies = []\n    for similar in movie_data.get('Similar', []):\n        similar_movies.append(similar['Title'])\n    return \"---\".join(similar_movies)\n\n@app.route(\"/\", methods=['GET'])\n@app.route(\"/home\", methods=['GET'])\ndef home():\n    return render_template('home.html')\n\n@app.route(\"/similarity\", methods=['POST'])\ndef similarity():\n    movie_name = request.form.get('name')\n    if not movie_name:\n        return \"Please provide a movie title\"\n    result = find_similar_movies(movie_name)\n    return result\n\n@app.route(\"/recommend\", methods=['POST'])\ndef recommend():\n    movie_info = request.form.to_dict()\n    movie_data = get_movie_data(movie_info['title'])\n    if movie_data.get('Response') == 'False':\n        return \"Movie not found\"\n    recommendations = find_similar_movies(movie_info['title'])\n    reviews = []\n    # Simulated reviews data\n    for _ in range(3):\n        reviews.append({\n            \"user\": f\"User{_+1}\",\n            \"rating\": str((8 + _ * 2) % 10),\n            \"comment\": f\"Great movie! Loved the acting and plot.\"\n        })\n    return render_template('recommend.html', movie=movie_data, recommendations=recommendations.split(\"---\"), reviews=reviews)\n\nif __name__ == \"__main__\":\n    app.run(debug=True)"
  },
  {
    "Task_id": 159,
    "Instruction": "Task Description: Create a Flask-based HTTP server that handles image processing and video generation requests, including live preview streaming and final video download capabilities.\n\nFunction Description: The code implements a Flask web server with four main endpoints:\n1. Serves a static HTML interface\n2. Accepts image uploads for processing\n3. Provides a live MJPEG stream of processed frames\n4. Generates and returns a final processed video file\n\nInput:\n- HTTP GET/POST requests to defined endpoints\n- Image data as base64-encoded strings via POST\n- Configuration parameters for image processing\n\nOutput:\n- Static HTML page for the interface\n- Live MJPEG stream of processed frames\n- Processed MP4 video file for download\n- Empty responses for successful operations\n\nMethods:\n\nindex() -> flask.Response - Serves the static HTML interface file\n- Input: None\n- Output: Static HTML file response\n\nload_image() -> str - Processes uploaded image data\n- Input: \n  - strFile: Filename string\n  - strData: Base64-encoded image data\n- Output: Empty string response\n\nget_live() -> flask.Response - Generates MJPEG live stream\n- Input: None\n- Output: Multipart MJPEG stream response\n\nget_result() -> flask.Response - Generates and returns processed video\n- Input: None\n- Output: MP4 video file attachment\n\nNote: The implementation uses gevent for asynchronous handling and includes image processing utilities (process_load, process_inpaint, process_kenburns) which are assumed to be defined elsewhere. The server runs on port 8080 and serves static files from the current directory.",
    "Canonical_solution": "import flask\nimport gevent\nimport gevent.pywsgi\nimport os\nimport time\nimport tempfile\nimport random\nimport numpy\nimport cv2\nimport base64\nimport io\nimport shutil\nimport moviepy\n\nobjFlask = flask.Flask(import_name=__name__, static_url_path='', static_folder=os.path.abspath('./'))\nobjFlask.json.sort_keys = False\n\n@objFlask.route(rule='/', methods=[ 'GET' ])\ndef index():\n\treturn objFlask.send_static_file('interface.html')\n\n@objFlask.route(rule='/load_image', methods=[ 'POST' ])\ndef load_image():\n\tobjPlayback['strImage'] = flask.request.form['strFile']\n\tobjPlayback['npyImage'] = numpy.ascontiguousarray(cv2.imdecode(buf=numpy.frombuffer(base64.b64decode(flask.request.form['strData'].split(';base64,')[1]), numpy.uint8), flags=-1)[:, :, 0:3])\n\tobjPlayback['strCache'] = {}\n\n\tprocess_load(objPlayback['npyImage'], {})\n\n\tfor fltX, fltY in [ (100.0, 0.0), (-100.0, 0.0), (0.0, 100.0), (0.0, -100.0) ]:\n\t\tprocess_inpaint(torch.tensor(data=[[[fltX], [fltY], [0.0]]], dtype=torch.float32, device=torch.device('cuda')))\n\t# end\n\n\treturn ''\n\n@objFlask.route(rule='/get_live', methods=[ 'GET' ])\ndef get_live():\n\tdef generator():\n\t\tfltFramelimiter = 0.0\n\n\t\twhile True:\n\t\t\tfor intYield in range(100): gevent.sleep(0.0)\n\n\t\t\tgevent.sleep(max(0.0, (1.0 / 25.0) - (time.time() - fltFramelimiter))); fltFramelimiter = time.time()\n\n\t\t\tif objPlayback['strImage'] is None:\n\t\t\t\tyield b'--frame\\r\\nContent-Type: image/jpeg\\r\\n\\r\\n' + cv2.imencode(ext='.jpg', img=numpy.ones([ 768, 1024, 3 ], numpy.uint8) * 29, params=[ cv2.IMWRITE_JPEG_QUALITY, 80 ])[1].tobytes() + b'\\r\\n'; continue\n\t\t\t# end\n\n\t\t\tif objPlayback['intTime'] > len(objPlayback['fltTime']) - 1:\n\t\t\t\tobjPlayback['intTime'] = 0\n\t\t\t# end\n\n\t\t\tintTime = objPlayback['intTime']\n\t\t\tfltTime = objPlayback['fltTime'][intTime]\n\n\t\t\tif objPlayback['strMode'] == 'automatic':\n\t\t\t\tobjPlayback['intTime'] += 1\n\t\t\t# end\n\n\t\t\tif str(fltTime) not in objPlayback['strCache']:\n\t\t\t\tnpyKenburns = process_kenburns({\n\t\t\t\t\t'fltSteps': [ fltTime ],\n\t\t\t\t\t'objFrom': objPlayback['objFrom'],\n\t\t\t\t\t'objTo': objPlayback['objTo'],\n\t\t\t\t\t'boolInpaint': False\n\t\t\t\t})[0]\n\n\t\t\t\tobjPlayback['strCache'][str(fltTime)] = b'--frame\\r\\nContent-Type: image/jpeg\\r\\n\\r\\n' + cv2.imencode(ext='.jpg', img=npyKenburns, params=[ cv2.IMWRITE_JPEG_QUALITY, 80 ])[1].tobytes() + b'\\r\\n'\n\t\t\t# end\n\n\t\t\tyield objPlayback['strCache'][str(fltTime)]\n\t\t# end\n\t# end\n\n\treturn flask.Response(response=generator(), mimetype='multipart/x-mixed-replace; boundary=frame')\n\n@objFlask.route(rule='/get_result', methods=[ 'GET' ])\ndef get_result():\n\tstrTempdir = tempfile.gettempdir() + '/kenburns-' + format(time.time(), '.6f') + '-' + str(os.getpid()) + '-' + str().join([random.choice('abcdefghijklmnopqrstuvwxyz0123456789') for intCount in range(8)])\n\n\tos.makedirs(name=strTempdir + '/', exist_ok=False)\n\n\tnpyKenburns = process_kenburns({\n\t\t'fltSteps': numpy.linspace(0.0, 1.0, 75).tolist(),\n\t\t'objFrom': objPlayback['objFrom'],\n\t\t'objTo': objPlayback['objTo'],\n\t\t'boolInpaint': True\n\t})\n\n\tmoviepy.ImageSequenceClip(sequence=[ npyFrame[:, :, ::-1] for npyFrame in npyKenburns + list(reversed(npyKenburns))[1:-1] ], fps=25).write_videofile(strTempdir + '/kenburns.mp4')\n\n\tobjKenburns = io.BytesIO(open(strTempdir + '/kenburns.mp4', 'rb').read())\n\n\tshutil.rmtree(strTempdir + '/')\n\n\treturn flask.send_file(filename_or_fp=objKenburns, mimetype='video/mp4', as_attachment=True, attachment_filename='kenburns.mp4', cache_timeout=-1)\n\nif __name__ == '__main__':\n\tgevent.pywsgi.WSGIServer(listener=('0.0.0.0', 8080), application=objFlask).serve_forever()",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, Response, send_file, render_template_string\nimport base64\nimport os\nimport gevent\nfrom gevent.pywsgi import WSGIServer\nfrom io import BytesIO\nimport cv2\nimport numpy as np\n\napp = Flask(__name__)\napp.config['UPLOAD_FOLDER'] = 'uploads'\nos.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)\n\nhtml_template = \"\"\"\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Image Processing</title>\n</head>\n<body>\n    <h1>Image Processing Interface</h1>\n    <form id=\"uploadForm\" enctype=\"multipart/form-data\">\n        <input type=\"file\" name=\"image\" accept=\"image/*\" required>\n        <button type=\"submit\">Upload and Process</button>\n    </form>\n    <br>\n    <video id=\"liveStream\" autoplay></video>\n    <br>\n    <a href=\"/get_result\" download>Download Final Video</a>\n    <script>\n        const form = document.getElementById('uploadForm');\n        const video = document.getElementById('liveStream');\n\n        form.addEventListener('submit', function(e) {\n            e.preventDefault();\n            const formData = new FormData(form);\n            fetch('/load_image', {\n                method: 'POST',\n                body: formData\n            }).then(response => {\n                if (response.ok) {\n                    console.log('Image processed successfully.');\n                }\n            });\n        });\n\n        // Simulate live stream by updating video source periodically\n        setInterval(() => {\n            fetch('/get_live')\n                .then(res => res.text())\n                .then(data => {\n                    video.src = 'data:image/jpeg;base64,' + data;\n                });\n        }, 100);\n    </script>\n</body>\n</html>\n\"\"\"\n\ndef process_load(image_data):\n    # Placeholder for image loading logic\n    return np.fromstring(base64.b64decode(image_data), dtype=np.uint8)\n\ndef process_inpaint(image):\n    # Placeholder for inpainting logic\n    return image\n\ndef process_kenburns(image):\n    # Placeholder for kenburns effect logic\n    return image\n\n@app.route('/')\ndef index():\n    return render_template_string(html_template)\n\n@app.route('/load_image', methods=['POST'])\ndef load_image():\n    if 'image' not in request.files:\n        return ''\n    file = request.files['image']\n    if file.filename == '':\n        return ''\n    image_data = base64.b64encode(file.read()).decode('utf-8')\n    image = process_load(image_data)\n    image = process_inpaint(image)\n    image = process_kenburns(image)\n    # Save or process further as needed\n    return ''\n\ndef generate_mjpeg_stream():\n    while True:\n        # Simulated frame generation\n        frame = np.random.randint(0, 256, (480, 640, 3), np.uint8)\n        _, buffer = cv2.imencode('.jpg', frame)\n        frame_data = base64.b64encode(buffer).decode('utf-8')\n        yield f'data:image/jpeg;base64,{frame_data}\\n'\n\n@app.route('/get_live')\ndef get_live():\n    return Response(generate_mjpeg_stream(), mimetype='multipart/x-mixed-replace; boundary=frame')\n\n@app.route('/get_result')\ndef get_result():\n    # Simulated video generation\n    video = cv2.VideoWriter_fourcc(*'mp4v')\n    out = cv2.VideoWriter('output.mp4', video, 30, (640, 480))\n    for _ in range(100):\n        frame = np.random.randint(0, 256, (480, 640, 3), np.uint8)\n        out.write(frame)\n    out.release()\n    return send_file('output.mp4', mimetype='video/mp4', as_attachment=True)\n\nif __name__ == '__main__':\n    server = WSGIServer(('0.0.0.0', 8080), app)\n    server.serve_forever()"
  },
  {
    "Task_id": 162,
    "Instruction": "Task Description: Create a Flask-based API server that can handle multiple routes for status checking, input processing, and server management, with the ability to run in a separate thread or using a production server.\n\nClass Description: FlaskAPI is a class that encapsulates a Flask web server with custom routes for handling API requests. It provides methods to start and stop the server either in a development thread or using a production-ready server (Waitress).\n\nAttributes:\n- app: Flask - The Flask application instance\n- server_thread: ServerThread - Thread object for running the development server\n\nMethods:\n- __init__() -> None - Initializes the Flask application and sets up routes\n- _setup_routes() -> None - Defines the API endpoints and their handlers\n- _the_input(text: str, screen: str, talk: str) -> dict - Processes input text and optional screenshot, returns response\n- start_api(api: bool = False) -> None - Starts the server either in a thread (api=False) or using Waitress (api=True)\n- stop_api() -> None - Stops the running server thread\n\nNested Class: ServerThread\nClass Description: A thread class for running the Flask development server in a separate thread.\n\nAttributes:\n- srv: WSGIServer - The Werkzeug development server instance\n- ctx: AppContext - Flask application context\n\nMethods:\n- __init__(app: Flask, host: str, port: int) -> None - Initializes the server thread with Flask app and connection details\n- run() -> None - Starts the server and runs it indefinitely\n- shutdown() -> None - Stops the running server",
    "Canonical_solution": "from flask import Flask, request, jsonify\nimport threading\nfrom werkzeug.serving import make_server\nfrom waitress import serve\n\nclass FlaskAPI:\n    def __init__(self):\n        self.app = Flask(__name__)\n        self.server_thread = None\n        self._setup_routes()\n\n    def _setup_routes(self):\n        @self.app.route(\"/status\", methods=[\"POST\"])\n        def status():\n            return jsonify({\"response\": True})\n\n        @self.app.route(\"/input\", methods=[\"POST\"])\n        def input():\n            data = request.json\n            text = data[\"text\"]\n            screen = data[\"screen\"]\n            talk = data[\"talk\"]\n            return self._the_input(text, screen, talk)\n\n        @self.app.route(\"/stop_server\", methods=[\"POST\"])\n        def stop_server():\n            self.stop_api()\n            exit(0)\n\n    def _the_input(self, text, screen, talk):\n        print(\"Input:\", text)\n        from .agent.process import process_text_api\n        from .utils.db import screenshot_path\n\n        if screen != \"true\":\n            result = process_text_api(text, None)\n        else:\n            import pyautogui\n            screenshot = pyautogui.screenshot()\n            screenshot.save(screenshot_path)\n            result = process_text_api(text, screenshot_path)\n\n        return jsonify({\"response\": result})\n\n    def start_api(self, api=False):\n        if api == False:\n            if self.server_thread is None:\n                self.server_thread = ServerThread(self.app, \"0.0.0.0\", 7541)\n                self.server_thread.start()\n                print(\"API started\")\n            else:\n                print(\"API is already running\")\n        else:\n            serve(self.app, host=\"0.0.0.0\", port=7541)\n\n    def stop_api(self):\n        if self.server_thread is not None:\n            self.server_thread.shutdown()\n            self.server_thread.join()\n            self.server_thread = None\n            print(\"API stopped\")\n        else:\n            print(\"API is not running\")\n\nclass ServerThread(threading.Thread):\n    def __init__(self, app, host, port):\n        threading.Thread.__init__(self)\n        self.srv = make_server(host, port, app)\n        self.ctx = app.app_context()\n        self.ctx.push()\n\n    def run(self):\n        print(\"Starting server\")\n        self.srv.serve_forever()\n\n    def shutdown(self):\n        print(\"Stopping server\")\n        self.srv.shutdown()",
    "Code_level": "Class-level",
    "FSMID_for_test": 60,
    "right_result": "import os\nimport threading\nfrom flask import Flask, request, jsonify\nfrom werkzeug.serving import WSGIServer\nfrom werkzeug.local import LocalProxy\nfrom waitress import serve\n\nclass ServerThread(threading.Thread):\n    def __init__(self, app, host, port):\n        super().__init__()\n        self.app = app\n        self.host = host\n        self.port = port\n        self.srv = None\n        self.ctx = app.app_context()\n\n    def run(self):\n        self.srv = WSGIServer((self.host, self.port), self.app)\n        self.srv.serve_forever()\n\n    def shutdown(self):\n        if self.srv:\n            self.srv.shutdown()\n\nclass FlaskAPI:\n    def __init__(self):\n        self.app = Flask(__name__)\n        self.server_thread = None\n        self._setup_routes()\n\n    def _setup_routes(self):\n        @self.app.route('/status', methods=['GET'])\n        def status():\n            return jsonify({\"status\": \"running\"})\n\n        @self.app.route('/input', methods=['POST'])\n        def input_handler():\n            text = request.json.get('text', '')\n            screen = request.files.get('screen', None)\n            talk = request.json.get('talk', 'false')\n            result = self._the_input(text, screen, talk)\n            return jsonify(result)\n\n        @self.app.route('/stop', methods=['POST'])\n        def stop_server():\n            if self.server_thread and self.server_thread.is_alive():\n                self.server_thread.shutdown()\n                return jsonify({\"message\": \"Server stopped\"})\n            return jsonify({\"message\": \"Server not running\"}), 400\n\n    def _the_input(self, text, screen, talk):\n        response = {\n            \"input_text\": text,\n            \"screen_received\": bool(screen),\n            \"talk_enabled\": talk.lower() == 'true'\n        }\n        return response\n\n    def start_api(self, api=False):\n        if api:\n            serve(self.app, host='0.0.0.0', port=5000)\n        else:\n            self.server_thread = ServerThread(self.app, '0.0.0.0', 5000)\n            self.server_thread.start()\n\n    def stop_api(self):\n        if self.server_thread and self.server_thread.is_alive():\n            self.server_thread.shutdown()"
  },
  {
    "Task_id": 163,
    "Instruction": "Task Description: Create a Flask-based web service that accepts POST requests with form data, processes the data using a pre-trained machine learning model, and returns a prediction result rendered in an HTML template.\n\nFunction Description: The `predict` function is a Flask route handler that processes incoming POST requests containing form data. It extracts the input values, converts them to a format suitable for the machine learning model, makes a prediction, and returns the result embedded in an HTML template.\n\nInput: \n- The function receives form data via Flask's request object (implicit input through `request.form.values()`)\n- The form data should contain numerical values that can be converted to floats\n\nOutput:\n- Returns a rendered HTML template ('index.html') with the prediction result embedded in the template variable `prediction_text`\n- The output is a string containing the prediction percentage formatted as \"Percent with heart disease is X.XX\" where X.XX is the rounded prediction value",
    "Canonical_solution": "import numpy as np\nfrom flask import Flask, request, render_template\nimport pickle\n\napp = Flask(__name__)\nmodel = pickle.load(open('models/model.pkl', 'rb'))\n\n@app.route('/predict',methods=['POST'])\ndef predict():\n    int_features = [float(x) for x in request.form.values()]\n    features = [np.array(int_features)]\n    prediction = model.predict(features)\n    output = round(prediction[0], 2)\n    return render_template('index.html', prediction_text='Percent with heart disease is {}'.format(output))\n\nif __name__ == \"__main__\":\n    app.run()",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, render_template\nimport numpy as np\n\napp = Flask(__name__)\n\n# Load pre-trained model (example placeholder)\n# model = load_model('model.h5')\n\n@app.route('/', methods=['GET', 'POST'])\ndef predict():\n    if request.method == 'POST':\n        input_values = [float(x) for x in request.form.values()]\n        input_array = np.array(input_values).reshape(1, -1)\n        # prediction = model.predict(input_array)[0][0]\n        prediction = 0.45  # Placeholder prediction value\n        prediction_text = f\"Percent with heart disease is {round(prediction * 100, 2)}\"\n        return render_template('index.html', prediction_text=prediction_text)\n    return render_template('index.html')"
  },
  {
    "Task_id": 164,
    "Instruction": "Task Description: Create a Python function that sets up a real-time code tracing and visualization system using Flask to serve a web interface for monitoring execution patterns.\n\nFunction Description: The `trace` function establishes a web-based visualization tool that tracks and displays Python code execution in real-time. It creates a Flask web server that shows which lines of code are being executed most frequently, with features like heatmap visualization and stack trace inspection. The function uses Python's sys.settrace() mechanism to monitor execution and organizes the data for web display.\n\nInput:\n- files: [Optional callable] - A function to filter which files should be traced (default: None)\n- port: [int] - Port number for the web server (default: 9999)\n- host: [str] - Host address for the server (default: '127.0.0.1')\n- browser: [bool] - Whether to automatically open browser (default: False)\n- daemon: [bool] - Whether to run server as daemon thread (default: False)\n\nOutput:\n- None (The function runs indefinitely, serving the web interface and collecting trace data)\n\nThe function:\n1. Sets up tracing for the calling frame and specified files\n2. Creates a Flask web server with multiple routes for visualization\n3. Starts a background thread for the web server\n4. Configures sys.settrace() to collect execution data\n5. Optionally opens a browser window to display the visualization",
    "Canonical_solution": "import inspect\nimport logging\nimport sys\nimport threading\nimport webbrowser\nfrom collections import defaultdict, deque, Counter\nfrom functools import lru_cache\nfrom itertools import islice, takewhile\nfrom flask import Flask, render_template, jsonify, url_for, request\n\ndef trace(\n        files=None,\n        port=9999,\n        host='127.0.0.1',\n        browser=False,\n        daemon=False,\n):\n    calling_frame = inspect.currentframe().f_back\n    calling_file = calling_frame.f_code.co_filename\n\n    @lru_cache(maxsize=None)\n    def include_file(path):\n        try:\n            return path == calling_file or files(path)\n        except Exception:\n            return False\n\n    thread_ident = threading.get_ident()\n    queues = defaultdict(lambda: deque(maxlen=2 ** 10))\n    totals = defaultdict(Counter)\n\n    app = Flask(__name__)\n\n    host_is_local = host in [\"127.0.0.1\", \"localhost\"]\n    if host_is_local:\n        app.config[\"SERVER_NAME\"] = \"{host}:{port}\".format(host=host, port=port)\n\n    @app.route('/')\n    def index():\n        return render_template('index.html', files=sorted(queues.keys()))\n\n    @app.route('/file/')\n    def file_view():\n        return render_template(\"file.html\", **file_table_context())\n\n    def file_table_context():\n        filename = request.args['filename']\n        source = Source.for_filename(filename)\n        queue = queues[filename]\n\n        highlighted = highlight_ranges(source, frames_matching(filename))\n        highlighted_lines = list(enumerate(highlighted.splitlines()))\n        \n        counters = [\n            queue_counter(queue, 2 ** i)\n            for i in range(10 + 1)\n        ]\n\n        ratios = [\n            [\n                counter[i + 1] / min(2 ** c, len(queue) or 1)\n                * (c + 1) / 10\n                for c, counter in enumerate(counters)\n            ]\n            for i, _ in highlighted_lines\n        ]\n\n        max_ratio = max(map(max, ratios)) or 1\n\n        rows = [\n            (\n                i + 1,\n                totals[filename][i + 1] or '',\n                reversed([\n                    int(round(ratio / max_ratio * 100))\n                    for ratio in ratios[i]\n                ]),\n                line,\n            )\n            for i, line in highlighted_lines\n        ]\n\n        return dict(\n            rows=rows,\n            zip=zip,\n            lightnesses=[int((i + 1) * 100 / (10 + 1)) for i in range(10 + 1)],\n            filename=filename,\n            highlighted=highlighted,\n        )\n\n    @app.route('/table/')\n    def file_table_view():\n        return render_template('file_table.html', **file_table_context())\n\n    def current_frame():\n        return sys._current_frames()[thread_ident]\n\n    def frames_matching(filename):\n        frame = current_frame()\n        while frame:\n            if frame.f_code.co_filename == filename:\n                yield frame\n            frame = frame.f_back\n\n    @app.route('/stacktrace/')\n    def stacktrace():\n        def gen():\n            frame = current_frame()\n            while frame:\n                code = frame.f_code\n                filename = code.co_filename\n                name = Source.for_frame(frame).code_qualname(code)\n                yield (\n                    filename,\n                    frame.f_lineno,\n                    name,\n                    highlight_stack_frame(frame),\n                    include_file(filename)\n                )\n                frame = frame.f_back\n\n        return jsonify(list(takewhile(\n            lambda entry: not (\n                    'heartrate' in entry[0]\n                    and entry[2].endswith(trace_func.__name__)),\n            list(gen())[::-1]\n        )))\n\n    threading.Thread(\n        target=lambda: app.run(\n            debug=False,\n            host=host,\n            port=port,\n        ),\n        daemon=daemon,\n    ).start()\n\n    def trace_func(frame, event, _arg):\n        filename = frame.f_code.co_filename\n        if event == \"call\":\n            if include_file(filename):\n                return trace_func\n\n        elif event == \"line\":\n            lineno = frame.f_lineno\n            queues[filename].append(lineno)\n            totals[filename][lineno] += 1\n            Source.lazycache(frame)\n\n    calling_frame.f_trace = trace_func\n    sys.settrace(trace_func)\n    \n    if browser and host_is_local:\n        with app.app_context():\n            url = url_for(\n                'file_view',\n                filename=calling_file,\n            )\n        webbrowser.open_new_tab(url)",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "import sys\nimport threading\nimport time\nfrom flask import Flask, render_template, jsonify\nfrom collections import defaultdict\n\napp = Flask(__name__)\ntrace_data = defaultdict(lambda: {'count': 0, 'stacks': []})\nfile_filter = None\n\ndef trace_calls(frame, event, arg):\n    global trace_data\n    if file_filter and not file_filter(frame.f_code.co_filename):\n        return\n    trace_data[frame.f_code.co_name]['count'] += 1\n    stack = []\n    for f in sys._current_frames().values():\n        stack.append({\n            'filename': f.f_code.co_filename,\n            'lineno': f.f_lineno,\n            'name': f.f_code.co_name\n        })\n    trace_data[frame.f_code.co_name]['stacks'].append(stack)\n    return trace_calls\n\ndef start_server(port, host, browser, daemon):\n    @app.route('/')\n    def index():\n        return render_template('index.html', data=trace_data)\n\n    @app.route('/data')\n    def get_data():\n        return jsonify(trace_data)\n\n    app.run(host=host, port=port, debug=False)\n\n    if browser:\n        import webbrowser\n        webbrowser.open(f'http://{host}:{port}')\n\ndef trace(files=None, port=9999, host='127.0.0.1', browser=False, daemon=False):\n    global file_filter\n    file_filter = files if callable(files) else lambda x: True if not files else x == files\n    sys.settrace(trace_calls)\n    server_thread = threading.Thread(target=start_server, args=(port, host, browser, daemon))\n    server_thread.start()\n    if not daemon:\n        server_thread.join()"
  },
  {
    "Task_id": 165,
    "Instruction": "Task Description: Create a Flask-based HTTP server class for handling ONNX model modification requests, including opening models, applying modifications, and providing download functionality.\n\nClass Description: ONNXModifierServer is a Flask application wrapper that provides endpoints for uploading ONNX models, modifying them, and downloading the modified versions. It maintains the model state between requests and handles file operations.\n\nAttributes:\n- app: [Flask] - The Flask application instance\n- onnx_modifier: [onnxModifier|None] - The current ONNX model being processed (None when no model loaded)\n\nMethods:\n- __init__: [constructor]() -> [None] - Initializes the Flask app and sets up routes\n- _setup_routes: [method]() -> [None] - Configures URL routes and their handler methods\n- index: [method]() -> [str] - Returns the main HTML interface (renders index.html template)\n- open_model: [method]() -> [tuple[str, int]] - Handles file upload, creates onnxModifier instance from uploaded file (expects 'file' in request.files)\n- modify_and_download_model: [method]() -> [str] - Applies modifications from JSON request (request.get_json()), saves model, returns save path\n- run: [method](host: str='127.0.0.1', port: int=5000, debug: bool=False) -> [None] - Starts the Flask development server with specified parameters",
    "Canonical_solution": "from flask import Flask, request, render_template\n\nclass ONNXModifierServer:\n    def __init__(self):\n        self.app = Flask(__name__)\n        self.onnx_modifier = None\n        self._setup_routes()\n\n    def _setup_routes(self):\n        self.app.add_url_rule('/', 'index', self.index)\n        self.app.add_url_rule('/open_model', 'open_model', self.open_model, methods=['POST'])\n        self.app.add_url_rule('/download', 'modify_and_download_model', self.modify_and_download_model, methods=['POST'])\n\n    def index(self):\n        return render_template('index.html')\n\n    def open_model(self):\n        onnx_file = request.files['file']\n        self.onnx_modifier = onnxModifier.from_name_protobuf_stream(\n            onnx_file.filename, onnx_file.stream)\n        return 'OK', 200\n\n    def modify_and_download_model(self):\n        modify_info = request.get_json()\n        self.onnx_modifier.reload()\n        self.onnx_modifier.modify(modify_info)\n        save_path = self.onnx_modifier.check_and_save_model()\n        return save_path\n\n    def run(self, host='127.0.0.1', port=5000, debug=False):\n        self.app.run(host=host, port=port, debug=debug)",
    "Code_level": "Class-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, send_file, render_template, redirect, url_for\nimport onnx\nimport os\nimport json\n\nclass ONNXModifierServer:\n    def __init__(self):\n        self.app = Flask(__name__)\n        self.onnx_modifier = None\n        self._setup_routes()\n\n    def _setup_routes(self):\n        self.app.add_url_rule('/', 'index', self.index)\n        self.app.add_url_rule('/open_model', 'open_model', self.open_model, methods=['POST'])\n        self.app.add_url_rule('/modify_and_download', 'modify_and_download', self.modify_and_download_model, methods=['POST'])\n        self.app.add_url_rule('/download/<path:filename>', 'download', self.download_model)\n\n    def index(self):\n        return render_template('index.html')\n\n    def open_model(self):\n        if 'file' not in request.files:\n            return \"No file part\", 400\n        file = request.files['file']\n        if file.filename == '':\n            return \"No selected file\", 400\n        if file:\n            model_path = os.path.join(os.getcwd(), 'uploads', file.filename)\n            os.makedirs(os.path.dirname(model_path), exist_ok=True)\n            file.save(model_path)\n            self.onnx_modifier = onnx.load(model_path)\n            return redirect(url_for('index'))\n\n    def modify_and_download_model(self):\n        if self.onnx_modifier is None:\n            return \"No model loaded\", 400\n        data = request.get_json()\n        if not data:\n            return \"No JSON data provided\", 400\n        try:\n            self.onnx_modifier.apply_modifications(data)\n            modified_model_path = os.path.join(os.getcwd(), 'modified_models', 'modified_model.onnx')\n            onnx.save(self.onnx_modifier.model, modified_model_path)\n            return modified_model_path\n        except Exception as e:\n            return str(e), 500\n\n    def download_model(self, filename):\n        return send_file(filename, as_attachment=True)\n\n    def run(self, host='127.0.0.1', port=5000, debug=False):\n        self.app.run(host=host, port=port, debug=debug)"
  },
  {
    "Task_id": 166,
    "Instruction": "Task Description: Create a Flask-based HTTP server that implements a GraphQL endpoint with both GET and POST methods, including a GraphiQL playground interface for testing queries.\n\nFunction Description: The code implements two Flask route handlers for a GraphQL server. The first handles GET requests to serve a GraphiQL playground interface, while the second handles POST requests to process GraphQL queries and mutations.\n\nInput:\n- For GET /graphql: No input parameters (uses Flask's request object internally)\n- For POST /graphql: Expects JSON payload containing GraphQL query/mutation\n\nOutput:\n- For GET /graphql: Returns HTML content for GraphiQL playground (status 200)\n- For POST /graphql: Returns JSON response containing either:\n  - Successful query result (status 200)\n  - Error response (status 400) if query fails",
    "Canonical_solution": "from flask import Flask, jsonify, request\nfrom ariadne import graphql_sync\nfrom ariadne.explorer import ExplorerGraphiQL\n\napp = Flask(__name__)\napp.config.update(\n    {\n        \"TESTING\": True,\n    }\n)\n\nexplorer = ExplorerGraphiQL(title=\"My Flask GraphQL\")\n\n@app.route(\"/graphql\", methods=[\"GET\"])\ndef graphql_playground():\n    html = explorer.html(request)\n    return html, 200\n\n@app.route(\"/graphql\", methods=[\"POST\"])\ndef graphql_server():\n    data = request.get_json()\n    success, result = graphql_sync(\n        schema,\n        data,\n        context_value={\"request\": request},\n        root_value={\"hello\": \"Hello Flask!\"},\n        debug=app.debug,\n    )\n    status_code = 200 if success else 400\n    return jsonify(result), status_code",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, Response\nimport json\nimport graphene\n\napp = Flask(__name__)\n\nclass Query(graphene.ObjectType):\n    hello = graphene.String()\n\n    def resolve_hello(self, info):\n        return \"Hello, world!\"\n\nschema = graphene.Schema(query=Query)\n\n@app.route('/graphql', methods=['GET'])\ndef graphiql():\n    return app.send_static_file('graphiql.html')\n\n@app.route('/graphql', methods=['POST'])\ndef graphql():\n    data = request.get_json()\n    if not data:\n        return Response(json.dumps({\"error\": \"Invalid JSON payload\"}), status=400, mimetype='application/json')\n    try:\n        result = schema.execute(data['query'], variables=data.get('variables'))\n        return Response(json.dumps({\"data\": result.data}), status=200, mimetype='application/json')\n    except Exception as e:\n        return Response(json.dumps({\"error\": str(e)}), status=400, mimetype='application/json')\n\nif __name__ == '__main__':\n    app.run(debug=True)"
  },
  {
    "Task_id": 168,
    "Instruction": "Task Description: Create a Flask-based HTTP server application that serves files from a specified directory, handles file uploads, and implements basic authentication. The server should support both directory browsing and file downloads, with optional SSL encryption.\n\nFunction Description: The function `create_flask_app` initializes and runs a Flask web server with the following capabilities:\n1. Serves files from a specified directory with directory browsing\n2. Handles file uploads to valid subdirectories\n3. Implements HTTP Basic Authentication\n4. Supports optional SSL encryption\n5. Handles permission errors gracefully\n\nInput:\n- directory: [str] - The root directory to serve files from\n- port: [int] - The port number to run the server on\n- password: [str] - The password for HTTP Basic Authentication\n- ssl: [bool] - Whether to enable SSL encryption\n\nOutput: None (The function runs the server indefinitely until interrupted)\n\nMethods:\n- home(path): Handles requests for files and directories\n  Input: path [str] - The requested file/directory path\n  Output: Flask response (file download, directory listing, or redirect)\n  \n- upload(): Handles file uploads via POST requests\n  Input: None (uses Flask's request object)\n  Output: Flask redirect response\n  \n- verify_password(username, password): Verifies HTTP Basic Authentication credentials\n  Input: \n    username [str] - The username (ignored in this implementation)\n    password [str] - The password to verify\n  Output: [bool] - True if authentication succeeds, False otherwise",
    "Canonical_solution": "from flask import Flask, render_template, send_file, redirect, request, send_from_directory, url_for, abort\nfrom flask_httpauth import HTTPBasicAuth\nfrom werkzeug.utils import secure_filename\nfrom werkzeug.security import generate_password_hash, check_password_hash\nfrom werkzeug.serving import run_simple\n\ndef create_flask_app(directory, port, password, ssl):\n    app = Flask(__name__)\n    auth = HTTPBasicAuth()\n\n    @app.route('/', defaults={'path': None})\n    @app.route('/<path:path>')\n    @auth.login_required\n    def home(path):\n        if path and is_valid_subpath(path, directory):\n            path = os.path.normpath(path)\n            requested_path = os.path.join(directory, path)\n\n            if os.path.isdir(requested_path):\n                back = get_parent_directory(requested_path, directory)\n                is_subdirectory = True\n            elif os.path.isfile(requested_path):\n                if request.args.get('view') is None:\n                    send_as_attachment = True\n                else:\n                    send_as_attachment = False\n\n                (filename, extension) = os.path.splitext(requested_path)\n                if extension == '':\n                    mimetype = 'text/plain'\n                else:\n                    mimetype = None\n\n                try:\n                    return send_file(requested_path, mimetype=mimetype, as_attachment=send_as_attachment)\n                except PermissionError:\n                    abort(403, 'Read Permission Denied: ' + requested_path)\n        else:\n            is_subdirectory = False\n            requested_path = directory\n            back = ''\n\n        if os.path.exists(requested_path):\n            try:\n                directory_files = process_files(os.scandir(requested_path), directory)\n            except PermissionError:\n                abort(403, 'Read Permission Denied: ' + requested_path)\n\n            return render_template('home.html', files=directory_files, back=back,\n                                 directory=requested_path, is_subdirectory=is_subdirectory, version=VERSION)\n        else:\n            return redirect('/')\n\n    @app.route('/upload', methods=['POST'])\n    @auth.login_required\n    def upload():\n        if request.method == 'POST':\n            if 'file' not in request.files:\n                return redirect(request.referrer)\n\n            path = request.form['path']\n            if not is_valid_upload_path(path, directory):\n                return redirect(request.referrer)\n\n            for file in request.files.getlist('file'):\n                if file.filename == '':\n                    return redirect(request.referrer)\n\n                if file:\n                    filename = secure_filename(file.filename)\n                    full_path = os.path.join(path, filename)\n                    try:\n                        file.save(full_path)\n                    except PermissionError:\n                        abort(403, 'Write Permission Denied: ' + full_path)\n\n            return redirect(request.referrer)\n\n    users = {\n        '': generate_password_hash(password)\n    }\n\n    @auth.verify_password\n    def verify_password(username, password):\n        if password:\n            if username in users:\n                return check_password_hash(users.get(username), password)\n            return False\n        else:\n            return True\n\n    ssl_context = 'adhoc' if ssl else None\n    run_simple(\"0.0.0.0\", int(port), app, ssl_context=ssl_context)",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, send_from_directory, request, redirect, url_for\nimport os\nimport ssl\n\napp = Flask(__name__)\n\ndef create_flask_app(directory, port, password, ssl):\n    app.config['UPLOAD_FOLDER'] = os.path.join(directory, 'uploads')\n    os.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)\n\n    @app.before_request\n    def require_authentication():\n        if request.endpoint not in ['upload', 'static']:\n            auth = request.authorization\n            if not auth or not verify_password(auth.username, auth.password):\n                return authenticate()\n\n    def authenticate():\n        return redirect(url_for('login', _external=True))\n\n    def login():\n        return \"Authentication required\", 401\n\n    def home(path):\n        full_path = os.path.join(directory, path)\n        if os.path.isdir(full_path):\n            return send_from_directory(directory, path, directory=True)\n        else:\n            return send_from_directory(directory, path)\n\n    @app.route('/upload', methods=['POST'])\n    def upload():\n        if 'file' not in request.files:\n            return redirect(request.url)\n        file = request.files['file']\n        if file.filename == '':\n            return redirect(request.url)\n        if file:\n            file.save(os.path.join(app.config['UPLOAD_FOLDER'], file.filename))\n            return redirect(url_for('home', path=''))\n\n    def verify_password(username, password):\n        return password == password\n\n    @app.route('/')\n    def index():\n        return home('')\n\n    @app.route('/<path:subpath>')\n    def serve(subpath):\n        return home(subpath)\n\n    if ssl:\n        context = ssl.SSLContext(ssl.PROTOCOL_TLSv1_2)\n        context.load_cert_chain('cert.pem', 'key.pem')\n        app.run(host='0.0.0.0', port=port, ssl_context=context)\n    else:\n        app.run(host='0.0.0.0', port=port)\n\ncreate_flask_app(directory, port, password, ssl)"
  },
  {
    "Task_id": 169,
    "Instruction": "Task Description: Create a Flask-based HTTP server that handles QR code generation, status checking, and token retrieval for an authentication system.\n\nFunction Description: The server provides three main endpoints: one to display a main page with QR code, one to generate QR code URLs, one to check QR code status, and one to retrieve authentication tokens.\n\nInput:\n- For '/get_qrcode' endpoint: GET request with no parameters\n- For '/check_qrcode/<sid>' endpoint: GET request with sid (session ID) as URL parameter\n- For '/get_tokens' endpoint: POST request with JSON body containing auth_code\n\nOutput:\n- '/get_qrcode': Returns JSON with QR code URL data\n- '/check_qrcode/<sid>': Returns JSON with QR code status\n- '/get_tokens': Returns JSON with status confirmation after processing auth_code",
    "Canonical_solution": "import time\nimport logging\nimport json\nimport uuid\nimport hashlib\nimport base64\nimport random\nimport sys\nimport requests\nfrom flask import Flask, jsonify, render_template, request\nfrom Crypto.Cipher import AES\nfrom Crypto.Util.Padding import unpad\n\napp = Flask(__name__)\ntimestamp = str(requests.get('http://api.extscreen.com/timestamp', timeout=10).json()['data']['timestamp'])\nunique_id = uuid.uuid4().hex\nwifimac = str(random.randint(10**11, 10**12 - 1))\nheaders = {\n    \"token\": \"6733b42e28cdba32\",\n    'User-Agent': 'Mozilla/5.0 (Linux; U; Android 9; zh-cn; SM-S908E Build/TP1A.220624.014) AppleWebKit/533.1 (KHTML, like Gecko) Mobile Safari/533.1',\n    'Host': 'api.extscreen.com'\n}\n\n@app.route('/')\ndef main_page():\n    return render_template('qrcode.html')\n\n@app.route('/get_qrcode', methods=['GET'])\ndef get_qrcode():\n    return jsonify(get_qrcode_url())\n\n@app.route('/check_qrcode/<sid>', methods=['GET'])\ndef check_qrcode(sid):\n    return jsonify(check_qrcode_status(sid))\n\n@app.route('/get_tokens', methods=['POST'])\ndef get_tokens():\n    _auth_code = request.json.get('auth_code')\n    get_token(_auth_code)\n    return jsonify({'status': 'completed'})",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, jsonify, request\nimport qrcode\nimport uuid\nimport json\nimport os\n\napp = Flask(__name__)\nsessions = {}\n\ndef generate_qr_code(data):\n    qr = qrcode.QRCode(version=1, box_size=10, border=4)\n    qr.add_data(data)\n    qr.make(fit=True)\n    img = qr.make_image(fill_color=\"black\", back_color=\"white\")\n    file_name = f\"qr_{uuid.uuid4().hex}.png\"\n    img.save(file_name)\n    return file_name\n\n@app.route('/get_qrcode', methods=['GET'])\ndef get_qrcode():\n    data = \"https://example.com/auth\"\n    file_name = generate_qr_code(data)\n    sessions[file_name] = {\"status\": \"pending\", \"sid\": file_name}\n    return jsonify({\"qr_url\": f\"/static/{file_name}\"})\n\n@app.route('/check_qrcode/<sid>', methods=['GET'])\ndef check_qrcode(sid):\n    if sid in sessions:\n        status = sessions[sid][\"status\"]\n        return jsonify({\"status\": status})\n    else:\n        return jsonify({\"error\": \"Session not found\"}), 404\n\n@app.route('/get_tokens', methods=['POST'])\ndef get_tokens():\n    data = request.json\n    auth_code = data.get(\"auth_code\")\n    if not auth_code:\n        return jsonify({\"error\": \"Missing auth_code\"}), 400\n    # Simulate token retrieval\n    return jsonify({\"status\": \"tokens retrieved\", \"auth_code\": auth_code})\n\nif __name__ == '__main__':\n    app.run(debug=True)"
  },
  {
    "Task_id": 171,
    "Instruction": "Task Description: Create a Flask-based HTTP server for Text-to-Speech (TTS) processing that handles multiple API endpoints for TTS generation, batch processing, and progress tracking.\n\nClass Description: FlaskTTSAPI is a Flask application wrapper that provides TTS functionality through HTTP endpoints. It manages TTS requests, batch processing of text files, and progress tracking for long-running tasks.\n\nAttributes:\n- app: [Flask] - The Flask application instance\n- chuliing: [dict] - Tracks progress of batch processing tasks with keys 'name' (current file), 'line' (current line), and 'end' (completion status)\n\nMethods:\n- __init__() -> [None] - Initializes the Flask app, sets up routes and logging\n- _setup_logging() -> [None] - Configures logging with file rotation\n- _setup_routes() -> [None] - Defines all API endpoints and their handler methods\n- apitts() -> [flask.Response] - Handles single TTS requests. Returns JSON with either the generated audio file or an error message\n- ttslistjindu() -> [flask.Response] - Returns current progress of batch processing as JSON\n- ttslist() -> [flask.Response] - Initiates batch processing of text files. Returns immediate acknowledgment\n- detail_task(voice: str, src: str, dst: str, speed: float, language: str) -> [None] - Background task for processing text files into TTS audio\n- run() -> [None] - Starts the WSGI server to handle HTTP requests\n\nInput:\n- For apitts(): HTTP POST with form data containing 'text', 'language', and either 'voice' or 'audio' file\n- For ttslist(): HTTP POST with form data containing 'voice', 'src' (source dir), 'dst' (destination dir), 'speed', and 'language'\n- For ttslistjindu(): HTTP GET request to check progress\n\nOutput:\n- JSON responses containing either:\n  - Success: {'code': 0, 'url': [generated_audio_url]} or {'code': 0, 'msg': 'ok'}\n  - Error: {'code': 1 or 2, 'msg': [error_description]}\n  - Progress: {'name': [current_file], 'line': [current_line], 'end': [True/False]}",
    "Canonical_solution": "from flask import Flask, request, jsonify\nimport logging\nimport os\nimport threading\nimport time\nimport hashlib\nimport re\nfrom gevent.pywsgi import WSGIServer, WSGIHandler\n\nclass FlaskTTSAPI:\n    def __init__(self):\n        self.app = Flask(__name__)\n        self._setup_routes()\n        self._setup_logging()\n        self.chuliing = {\"name\": \"\", \"line\": 0, \"end\": False}\n\n    def _setup_logging(self):\n        self.app.logger.setLevel(logging.INFO)\n        file_handler = RotatingFileHandler(os.path.join(ROOT_DIR, 'app.log'), maxBytes=1024*1024, backupCount=5)\n        formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n        file_handler.setFormatter(formatter)\n        self.app.logger.addHandler(file_handler)\n\n    def _setup_routes(self):\n        self.app.route('/apitts', methods=['GET', 'POST'])(self.apitts)\n        self.app.route('/ttslist', methods=['GET', 'POST'])(self.ttslist)\n        self.app.route('/ttslistjindu', methods=['GET', 'POST'])(self.ttslistjindu)\n        self.app.route('/tts', methods=['GET', 'POST'])(self.tts)\n\n    def apitts(self):\n        try:\n            langcodelist = [\"zh-cn\", \"en\", \"ja\", \"ko\", \"es\", \"de\", \"fr\", \"it\", \"tr\", \"ru\", \"pt\", \"pl\", \"nl\", \"ar\", \"hu\", \"cs\"]\n            text = request.form.get(\"text\").strip()\n            text = text.replace(\"\\n\", ' . ')\n            language = request.form.get(\"language\",\"\").lower()\n            if language.startswith(\"zh\"):\n                language=\"zh-cn\"\n            if language not in langcodelist:\n                return jsonify({\"code\":1,\"msg\":f\"dont support language {language}\"})\n\n            md5_hash = hashlib.md5()\n            audio_name = request.form.get('voice')\n            if audio_name:\n                voicename = os.path.join(VOICE_DIR, audio_name)\n            else:\n                audio_file = request.files['audio']\n                audio_name = f'video_{audio_file.filename}.wav'\n                voicename = os.path.join(TMP_DIR, audio_name)\n                audio_file.save(voicename)\n            md5_hash.update(f\"{text}-{language}-{audio_name}\".encode('utf-8'))\n\n            self.app.logger.info(f\"[apitts]{voicename=}\")\n            if re.match(r'^[~`!@#$%^&*()_+=,./;\\':\\[\\]{}<>?\\\\|\"\uff0c\u3002\uff1f\uff1b\u2018\uff1a\u201c\u201d\u2019\uff5b\u3010\u3011\uff5d\uff01\u00b7\uffe5\u3001\\s\\n\\r -]*$', text):\n                return jsonify({\"code\": 1, \"msg\": \"lost text for translate\"})\n            if not text or not language:\n                return jsonify({\"code\": 1, \"msg\": \"text & language params lost\"})\n\n            filename = md5_hash.hexdigest() + \".wav\"\n            rs = create_tts(text=text, speed=1.0, voice=voicename, language=language, filename=filename)\n            if rs is not None:\n                result = rs\n            else:\n                time_tmp = 0\n                while filename not in cfg.global_tts_result:\n                    time.sleep(3)\n                    time_tmp += 3\n                    if time_tmp % 30 == 0:\n                        self.app.logger.info(f\"[apitts][tts]{time_tmp=},{filename=}\")\n\n                if cfg.global_tts_result[filename] != 1:\n                    msg = {\"code\": 1, \"msg\": cfg.global_tts_result[filename]}\n                else:\n                    target_wav = os.path.normpath(os.path.join(TTS_DIR, filename))\n                    msg = {\"code\": 0, \"filename\": target_wav, 'name': filename}\n                cfg.global_tts_result.pop(filename)\n                result = msg\n            if result['code'] == 0:\n                result['url'] = f'http://{web_address}/static/ttslist/{filename}'\n            return jsonify(result)\n        except Exception as e:\n            msg=f'{str(e)} {str(e.args)}'\n            self.app.logger.error(f\"[apitts]{msg}\")\n            return jsonify({'code': 2, 'msg': msg})\n\n    def ttslistjindu(self):\n        return jsonify(self.chuliing)\n\n    def ttslist(self):\n        voice = request.form.get(\"voice\")\n        src = request.form.get(\"src\")\n        dst = request.form.get(\"dst\")\n        speed = 1.0\n        try:\n            speed = float(request.form.get(\"speed\"))\n        except:\n            pass\n        language = request.form.get(\"language\")\n\n        src=os.path.normpath(src)\n        if not src or not dst or not os.path.exists(src) or not os.path.exists(dst):\n            return jsonify({\"code\":1,\"msg\":\"\u5fc5\u987b\u6b63\u786e\u586b\u5199txt\u6240\u5728\u76ee\u5f55\u4ee5\u53ca\u76ee\u6807\u76ee\u5f55\u7684\u5b8c\u6574\u8def\u5f84\"})\n\n        threading.Thread(target=self.detail_task, args=(voice, src, dst, speed, language)).start()    \n        return jsonify({\"code\":0,\"msg\":\"ok\"})\n\n    def detail_task(self, voice, src, dst, speed, language):\n        self.chuliing={\"name\":\"\",\"line\":0,\"end\":False}\n        for t in os.listdir(src):\n            if not t.lower().endswith('.txt'):\n                continue\n            concat_txt=os.path.join(cfg.TTS_DIR, re.sub(r'[ \\s\\[\\]\\{\\}\\(\\)<>\\?\\, :]+','', t, re.I) + '.txt')\n            \n            self.app.logger.info(f'####\u5f00\u59cb\u5904\u7406\u6587\u4ef6\uff1a{t}, \u6bcf\u884c\u7ed3\u679c\u4fdd\u5b58\u5728:{concat_txt}')\n            with open(concat_txt,'w',encoding='utf-8') as f:\n                f.write(\"\")\n            waitlist=[]\n            result={}\n            with open(os.path.join(src,t),'r',encoding='utf-8') as f:\n                num=0\n                for line in f.readlines():\n                    num+=1\n                    line=line.strip()\n                    if re.match(r'^[~`!@#$%^&*()_+=,./;\\':\\[\\]{}<>?\\\\|\"\uff0c\u3002\uff1f\uff1b\u2018\uff1a\u201c\u201d\u2019\uff5b\u3010\u3011\uff5d\uff01\u00b7\uffe5\u3001\\s\\n\\r -]*$', line):\n                        continue                \n                    md5_hash = hashlib.md5()\n                    md5_hash.update(f\"{line}-{voice}-{language}-{speed}\".encode('utf-8'))\n                    filename = md5_hash.hexdigest() + \".wav\"\n                    rs = create_tts(text=line, speed=speed, voice=voice, language=language, filename=filename)\n                    if rs is not None and rs['code']==1:\n                        continue\n                    if rs is not None and rs['code']==0:\n                        result[f'{num}']={\"filename\":filename, \"num\":num}\n                        self.chuliing['name']=t\n                        self.chuliing['line']=num\n                        continue\n                    waitlist.append({\"filename\":filename, \"num\":num, \"t\":t})\n        \n            time_tmp = 0\n            self.chuliing['name']=t\n            if len(waitlist)>0:\n                self.chuliing['line']=waitlist[0]['num']\n                while len(waitlist)>0:\n                    it=waitlist.pop(0)\n                    filename, num, t=it.values()\n                    \n                    if time_tmp>7200:\n                        continue\n                        \n                    if filename in cfg.global_tts_result and cfg.global_tts_result[filename] != 1:\n                        continue\n                    if os.path.exists(os.path.join(cfg.TTS_DIR, filename)):\n                        self.chuliing['name']=t\n                        self.chuliing['line']=num\n                        result[f'{num}']={\"filename\":filename, \"num\":num}\n                        continue\n                    waitlist.append(it)\n                    time_tmp+=1\n                    time.sleep(1)\n            if len(result.keys())<1:\n                continue    \n            sorted_result = {k: result[k] for k in sorted(result, key=lambda x: int(x))}\n            for i, it in sorted_result.items():\n                theaudio = os.path.normpath(os.path.join(cfg.TTS_DIR, it['filename']))\n                with open(concat_txt, 'a', encoding='utf-8') as f:\n                    f.write(f\"file '{theaudio}'\\n\")\n            \n            target_mp3=os.path.normpath((os.path.join(dst,f'{t}.mp3')))\n            p=subprocess.run(['ffmpeg',\"-hide_banner\", \"-ignore_unknown\", '-y', '-f', 'concat', '-safe', '0', '-i', concat_txt, target_mp3])\n            \n            if p.returncode!=0:\n                continue\n            if speed != 1.0 and speed > 0 and speed <= 2.0:\n                p= subprocess.run(['ffmpeg', '-hide_banner', '-ignore_unknown', '-y', '-i', target_mp3, '-af', f\"atempo={speed}\",f'{target_mp3}-speed{speed}.mp3'], encoding=\"utf-8\", capture_output=True)\n                if p.returncode != 0:\n                    continue\n                os.unlink(target_mp3)\n                target_mp3=f'{target_mp3}-speed{speed}.mp3'\n        self.chuliing['end']=True\n\n    def run(self):\n        host = web_address.split(':')\n        http_server = WSGIServer((host[0], int(host[1])), self.app, handler_class=CustomRequestHandler)\n        http_server.serve_forever()",
    "Code_level": "Class-level",
    "FSMID_for_test": 60,
    "right_result": "import os\nimport logging\nfrom flask import Flask, request, jsonify, send_file\nfrom werkzeug.utils import secure_filename\nimport threading\nimport time\n\nclass FlaskTTSAPI:\n    def __init__(self):\n        self.app = Flask(__name__)\n        self.chuliing = {'name': '', 'line': 0, 'end': False}\n        self._setup_logging()\n        self._setup_routes()\n\n    def _setup_logging(self):\n        logging.basicConfig(\n            filename='tts_server.log',\n            level=logging.INFO,\n            format='%(asctime)s - %(levelname)s - %(message)s',\n            datefmt='%Y-%m-%d %H:%M:%S',\n            filemode='a'\n        )\n        logrotate_handler = logging.handlers.TimedRotatingFileHandler(\n            'tts_server.log',\n            when='midnight',\n            interval=1,\n            backupCount=7\n        )\n        logrotate_handler.setLevel(logging.INFO)\n        formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')\n        logrotate_handler.setFormatter(formatter)\n        self.app.logger.addHandler(logrotate_handler)\n\n    def _setup_routes(self):\n        self.app.add_url_rule('/apitts', view_func=self.apitts, methods=['POST'])\n        self.app.add_url_rule('/ttslistjindu', view_func=self.ttslistjindu, methods=['GET'])\n        self.app.add_url_rule('/ttslist', view_func=self.ttslist, methods=['POST'])\n\n    def apitts(self):\n        if 'text' not in request.form or 'language' not in request.form:\n            return jsonify({'code': 1, 'msg': 'Missing required parameters'})\n        text = request.form['text']\n        language = request.form['language']\n        voice = request.form.get('voice')\n        audio_file = request.files.get('audio')\n\n        if not voice and not audio_file:\n            return jsonify({'code': 2, 'msg': 'Missing voice or audio file'})\n\n        if voice:\n            try:\n                from some_tts_library import generate_audio\n                audio_path = generate_audio(text=text, voice=voice, language=language, speed=1.0)\n                audio_url = f'/static/audio/{os.path.basename(audio_path)}'\n                return jsonify({'code': 0, 'url': audio_url})\n            except Exception as e:\n                return jsonify({'code': 1, 'msg': str(e)})\n        else:\n            if audio_file and audio_file.filename:\n                audio_filename = secure_filename(audio_file.filename)\n                audio_path = os.path.join('static/audio', audio_filename)\n                audio_file.save(audio_path)\n                return jsonify({'code': 0, 'url': f'/static/audio/{audio_filename}'})\n            else:\n                return jsonify({'code': 2, 'msg': 'Invalid audio file'})\n\n    def ttslistjindu(self):\n        return jsonify(self.chuliing)\n\n    def ttslist(self):\n        if 'voice' not in request.form or 'src' not in request.form or 'dst' not in request.form or 'speed' not in request.form or 'language' not in request.form:\n            return jsonify({'code': 1, 'msg': 'Missing required parameters'})\n        voice = request.form['voice']\n        src = request.form['src']\n        dst = request.form['dst']\n        speed = float(request.form['speed'])\n        language = request.form['language']\n\n        self.chuliing['name'] = ''\n        self.chuliing['line'] = 0\n        self.chuliing['end'] = False\n\n        thread = threading.Thread(target=self.detail_task, args=(voice, src, dst, speed, language))\n        thread.start()\n\n        return jsonify({'code': 0, 'msg': 'ok'})\n\n    def detail_task(self, voice, src, dst, speed, language):\n        if not os.path.exists(src):\n            self.chuliing['end'] = True\n            return\n        files = [f for f in os.listdir(src) if os.path.isfile(os.path.join(src, f))]\n        total_files = len(files)\n        for i, file in enumerate(files):\n            file_path = os.path.join(src, file)\n            with open(file_path, 'r') as f:\n                lines = f.readlines()\n                for j, line in enumerate(lines):\n                    try:\n                        from some_tts_library import generate_audio\n                        audio_path = generate_audio(text=line.strip(), voice=voice, language=language, speed=speed)\n                        dest_path = os.path.join(dst, os.path.splitext(file)[0] + f'_line_{j+1}.mp3')\n                        os.makedirs(os.path.dirname(dest_path), exist_ok=True)\n                        os.rename(audio_path, dest_path)\n                    except Exception as e:\n                        self.chuliing['end'] = True\n                        return\n            self.chuliing['name'] = file\n            self.chuliing['line'] = i + 1\n            self.chuliing['end'] = i + 1 == total_files\n\n    def run(self):\n        self.app.run(host='0.0.0.0', port=5000, debug=False)"
  },
  {
    "Task_id": 173,
    "Instruction": "Task Description: Create a Flask-based API server for the OWASP Nettacker security tool that handles scan requests, retrieves results, and manages logs through HTTP endpoints.\n\nClass Description: The NettackerAPI class implements a RESTful API service using Flask framework to control and interact with the OWASP Nettacker security scanning tool. It provides endpoints for initiating scans, retrieving results in JSON format, and accessing scan logs.\n\nAttributes:\n- app: [Flask] - The Flask application instance\n- options: [SimpleNamespace] - Configuration options for the API server\n- app.config[\"OWASP_NETTACKER_CONFIG\"]: [dict] - Configuration dictionary containing API security settings and options\n\nMethods:\n- __init__(options) -> [None] - Initializes the Flask app with configuration options\n- _setup_routes() -> [None] - Defines all API endpoints and their handlers\n- _sanitize_report_path_filename(report_path_filename) -> [Path|bool] - Sanitizes and validates report filenames\n- run() -> [None] - Starts the Flask server with SSL/TLS configuration\n- start_api_server() -> [None] - Runs the API server in a separate process\n\nEndpoint Methods:\n- new_scan() -> [Response] - Handles POST requests to start new scans (returns scan arguments or error)\n- get_results_json() -> [Response] - Retrieves scan results in JSON format (returns file download)\n- get_logs() -> [Response] - Retrieves scan logs in JSON format (returns file download)",
    "Canonical_solution": "from flask import Flask, jsonify, request as flask_request, Response, make_response\nfrom werkzeug.utils import secure_filename\nimport os\nimport json\nimport csv\nimport random\nimport string\nimport multiprocessing\nimport time\nfrom threading import Thread\nfrom types import SimpleNamespace\n\nclass NettackerAPI:\n    def __init__(self, options):\n        self.app = Flask(__name__, template_folder=str(options.web_static_dir))\n        self.app.config[\"OWASP_NETTACKER_CONFIG\"] = {\n            \"api_access_key\": options.api_access_key,\n            \"api_client_whitelisted_ips\": options.api_client_whitelisted_ips,\n            \"api_access_log\": options.api_access_log,\n            \"api_cert\": options.api_cert,\n            \"api_cert_key\": options.api_cert_key,\n            \"language\": options.language,\n            \"options\": options,\n        }\n        \n        self._setup_routes()\n        self.options = options\n\n    def _setup_routes(self):\n        @self.app.route(\"/new/scan\", methods=[\"GET\", \"POST\"])\n        def new_scan():\n            api_key_is_valid(self.app, flask_request)\n            form_values = dict(flask_request.form)\n            raw_report_path_filename = form_values.get(\"report_path_filename\")\n            report_path_filename = self._sanitize_report_path_filename(raw_report_path_filename)\n            if not report_path_filename:\n                return jsonify(structure(status=\"error\", msg=\"Invalid report filename\")), 400\n            form_values[\"report_path_filename\"] = str(report_path_filename)\n            for key in nettacker_application_config:\n                if key not in form_values:\n                    form_values[key] = nettacker_application_config[key]\n\n            nettacker_app = Nettacker(api_arguments=SimpleNamespace(**form_values))\n            self.app.config[\"OWASP_NETTACKER_CONFIG\"][\"options\"] = nettacker_app.arguments\n            thread = Thread(target=nettacker_app.run)\n            thread.start()\n\n            return jsonify(vars(nettacker_app.arguments)), 200\n\n        @self.app.route(\"/results/get_json\", methods=[\"GET\"])\n        def get_results_json():\n            api_key_is_valid(self.app, flask_request)\n            session = create_connection()\n            result_id = get_value(flask_request, \"id\")\n            if not result_id:\n                return jsonify(structure(status=\"error\", msg=_(\"invalid_scan_id\"))), 400\n            scan_details = session.query(Report).filter(Report.id == result_id).first()\n            json_object = json.dumps(get_logs_by_scan_id(scan_details.scan_unique_id))\n            filename = \".\".join(scan_details.report_path_filename.split(\".\")[:-1])[1:] + \".json\"\n            return Response(\n                json_object,\n                mimetype=\"application/json\",\n                headers={\"Content-Disposition\": \"attachment;filename=\" + filename},\n            )\n\n        @self.app.route(\"/logs/get_json\", methods=[\"GET\"])\n        def get_logs():\n            api_key_is_valid(self.app, flask_request)\n            target = get_value(flask_request, \"target\")\n            data = logs_to_report_json(target)\n            json_object = json.dumps(data)\n            filename = (\n                \"report-\"\n                + now(format=\"%Y_%m_%d_%H_%M_%S\")\n                + \"\".join(random.choice(string.ascii_lowercase) for _ in range(10))\n            )\n            return Response(\n                json_object,\n                mimetype=\"application/json\",\n                headers={\"Content-Disposition\": \"attachment;filename=\" + filename + \".json\"},\n            )\n\n    def _sanitize_report_path_filename(self, report_path_filename):\n        filename = secure_filename(os.path.basename(report_path_filename))\n        if not filename:\n            return False\n        VALID_EXTENSIONS = (\".html\", \".htm\", \".txt\", \".json\", \".csv\")\n        if \".\" in filename:\n            if filename.endswith(VALID_EXTENSIONS):\n                safe_report_path = nettacker_path_config.results_dir / filename\n            else:\n                return False\n        else:\n            safe_report_path = nettacker_path_config.results_dir / filename\n        if not safe_report_path.is_relative_to(nettacker_path_config.results_dir):\n            return False\n        return safe_report_path\n\n    def run(self):\n        if self.options.api_cert and self.options.api_cert_key:\n            self.app.run(\n                host=self.options.api_hostname,\n                port=self.options.api_port,\n                debug=self.options.api_debug_mode,\n                ssl_context=(self.options.api_cert, self.options.api_cert_key),\n                threaded=True,\n            )\n        else:\n            self.app.run(\n                host=self.options.api_hostname,\n                port=self.options.api_port,\n                debug=self.options.api_debug_mode,\n                ssl_context=\"adhoc\",\n                threaded=True,\n            )\n\n    def start_api_server(self):\n        p = multiprocessing.Process(target=self.run)\n        p.start()\n        while len(multiprocessing.active_children()) != 0:\n            try:\n                time.sleep(0.3)\n            except KeyboardInterrupt:\n                for process in multiprocessing.active_children():\n                    process.terminate()\n                break",
    "Code_level": "Class-level",
    "FSMID_for_test": 60,
    "right_result": "import os\nimport json\nimport ssl\nfrom flask import Flask, request, jsonify, send_file\nfrom urllib.parse import urlparse\nfrom datetime import datetime\nfrom typing import Optional, Dict, Any\nfrom pathlib import Path\nfrom argparse import Namespace\nfrom multiprocessing import Process\n\nclass NettackerAPI:\n    def __init__(self, options: Namespace) -> None:\n        self.app = Flask(__name__)\n        self.options = options\n        self.app.config[\"OWASP_NETTACKER_CONFIG\"] = {\n            \"SECRET_KEY\": options.secret_key,\n            \"DEBUG\": options.debug,\n            \"SSL_CERTIFICATE\": options.ssl_certificate,\n            \"SSL_KEY\": options.ssl_key,\n            \"SCAN_DIR\": options.scan_dir,\n            \"LOG_DIR\": options.log_dir,\n            \"REPORT_DIR\": options.report_dir\n        }\n        self._setup_routes()\n\n    def _setup_routes(self) -> None:\n        @self.app.route('/api/new_scan', methods=['POST'])\n        def new_scan():\n            data = request.get_json()\n            if not data:\n                return jsonify({\"error\": \"No JSON data provided\"}), 400\n            scan_args = data.get('scan_args', {})\n            if not scan_args:\n                return jsonify({\"error\": \"Scan arguments are required\"}), 400\n            scan_id = datetime.now().strftime(\"%Y%m%d%H%M%S\")\n            scan_path = os.path.join(self.app.config[\"OWASP_NETTACKER_CONFIG\"][\"SCAN_DIR\"], scan_id)\n            os.makedirs(scan_path, exist_ok=True)\n            with open(os.path.join(scan_path, \"scan_args.json\"), 'w') as f:\n                json.dump(scan_args, f)\n            return jsonify({\"scan_id\": scan_id, \"message\": \"Scan initiated successfully\"}), 201\n\n        @self.app.route('/api/get_results/<scan_id>', methods=['GET'])\n        def get_results_json(scan_id):\n            results_path = os.path.join(self.app.config[\"OWASP_NETTACKER_CONFIG\"][\"REPORT_DIR\"], scan_id, \"results.json\")\n            if not os.path.exists(results_path):\n                return jsonify({\"error\": \"Results not found for the specified scan ID\"}), 404\n            return send_file(results_path, mimetype='application/json')\n\n        @self.app.route('/api/get_logs/<scan_id>', methods=['GET'])\n        def get_logs(scan_id):\n            logs_path = os.path.join(self.app.config[\"OWASP_NETTACKER_CONFIG\"][\"LOG_DIR\"], scan_id, \"logs.json\")\n            if not os.path.exists(logs_path):\n                return jsonify({\"error\": \"Logs not found for the specified scan ID\"}), 404\n            return send_file(logs_path, mimetype='application/json')\n\n    def _sanitize_report_path_filename(self, report_path_filename: str) -> Optional[Path]:\n        try:\n            path = Path(report_path_filename)\n            if path.is_absolute():\n                return None\n            if any(part in ['..', '.', ''] for part in path.parts):\n                return None\n            if not path.suffix or not path.suffix.startswith('.'):\n                return None\n            return path\n        except Exception:\n            return None\n\n    def run(self) -> None:\n        ssl_context = None\n        if self.app.config[\"OWASP_NETTACKER_CONFIG\"][\"SSL_CERTIFICATE\"] and self.app.config[\"OWASP_NETTACKER_CONFIG\"][\"SSL_KEY\"]:\n            ssl_context = (self.app.config[\"OWASP_NETTACKER_CONFIG\"][\"SSL_CERTIFICATE\"],\n                           self.app.config[\"OWASP_NETTACKER_CONFIG\"][\"SSL_KEY\"])\n        self.app.run(host='0.0.0.0', port=self.options.port, ssl_context=ssl_context)\n\n    def start_api_server(self) -> None:\n        process = Process(target=self.run)\n        process.start()"
  },
  {
    "Task_id": 174,
    "Instruction": "Task Description: Create a Flask-based HTTP server that handles GET requests for semantic similarity search, processes the query parameters, performs the search operation, and returns JSON-formatted results with timing information.\n\nFunction Description: The function `run_simcse_demo` initializes and runs a Flask web server that provides an API endpoint for semantic similarity search. It configures CORS, sets up request handling, and launches the server using Tornado for production-ready serving. The API endpoint processes query parameters, performs a search operation using an embedder, and returns results with execution time.\n\nInput:\n- port: [int] - The port number on which the server will listen\n- args: [argparse.Namespace] - Command line arguments containing:\n  - ip: [str] - IP address to bind the server\n  - port: [str] - Port number (as string) to bind the server\n\nOutput: None (The function runs indefinitely as a web server)",
    "Canonical_solution": "import json\nimport argparse\nimport os\nimport logging\nfrom flask import Flask, request, jsonify\nfrom flask_cors import CORS\nfrom tornado.wsgi import WSGIContainer\nfrom tornado.httpserver import HTTPServer\nfrom tornado.ioloop import IOLoop\n\nlogging.basicConfig(format='%(asctime)s - %(levelname)s - %(name)s -   %(message)s', datefmt='%m/%d/%Y %H:%M:%S',\n                    level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\ndef run_simcse_demo(port, args):\n    app = Flask(__name__, static_folder='./static')\n    app.config['JSONIFY_PRETTYPRINT_REGULAR'] = False\n    CORS(app)\n\n    @app.route('/api', methods=['GET'])\n    def api():\n        query = request.args['query']\n        top_k = int(request.args['topk'])\n        threshold = float(request.args['threshold'])\n        start = time()\n        results = embedder.search(query, top_k=top_k, threshold=threshold)\n        ret = []\n        out = {}\n        for sentence, score in results:\n            ret.append({\"sentence\": sentence, \"score\": score})\n        span = time() - start\n        out['ret'] = ret\n        out['time'] = \"{:.4f}\".format(span)\n        return jsonify(out)\n\n    addr = args.ip + \":\" + args.port\n    logger.info(f'Starting Index server at {addr}')\n    http_server = HTTPServer(WSGIContainer(app))\n    http_server.listen(port)\n    IOLoop.instance().start()",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "import os\nimport time\nfrom flask import Flask, request, jsonify\nfrom flask_cors import CORS\nimport tornado.wsgi\nimport tornado.httpserver\nimport argparse\n\ndef run_simcse_demo(port, args):\n    app = Flask(__name__)\n    CORS(app)\n\n    def get_embedder():\n        from sentence_transformers import SentenceTransformer\n        model_path = \"sentence-transformers/all-MiniLM-L6-v2\"\n        return SentenceTransformer(model_path)\n\n    embedder = get_embedder()\n\n    @app.route('/search', methods=['GET'])\n    def search():\n        start_time = time.time()\n        query = request.args.get('query')\n        top_k = int(request.args.get('top_k', 5))\n        if not query:\n            return jsonify({\"error\": \"Missing 'query' parameter\"}), 400\n\n        try:\n            query_embedding = embedder.encode(query)\n            results = []\n            for i in range(top_k):\n                result = {\n                    \"index\": i,\n                    \"text\": f\"Sample text {i}\",\n                    \"score\": float(i + 1) / (top_k + 1)\n                }\n                results.append(result)\n            end_time = time.time()\n            execution_time = end_time - start_time\n            return jsonify({\n                \"results\": results,\n                \"execution_time\": execution_time\n            })\n        except Exception as e:\n            return jsonify({\"error\": str(e)}), 500\n\n    wsgi_app = tornado.wsgi.WSGIApplication([(r\"/.*\", app)])\n    server = tornado.httpserver.HTTPServer(wsgi_app)\n    server.listen(int(args.port), address=args.ip)\n    print(f\"Server started on http://{args.ip}:{args.port}\")\n    tornado.ioloop.IOLoop.current().start()"
  },
  {
    "Task_id": 175,
    "Instruction": "Task Description: Create a Flask-based API class that serves as an interface for a machine learning model, providing endpoints to calculate potential, gradient, and perform minimization operations.\n\nClass Description: FlaskAPI is a class that wraps a machine learning model and exposes its functionality through a RESTful API using Flask. It handles HTTP POST requests to perform model operations and returns JSON responses.\n\nAttributes:\n- webapp: Flask - The Flask application instance that handles HTTP requests\n- model: Any - The machine learning model that provides the core functionality (prediction, gradient calculation, and minimization)\n\nMethods:\n- __init__(model) -> None - Initializes the FlaskAPI with the provided model and sets up routes\n- _setup_routes() -> None - Private method that configures the URL routes and their corresponding handlers\n- run(**kwargs) -> None - Starts the Flask web server with the provided configuration options\n- potential() -> (Response, int) - Handles POST requests to '/potential', calculates model prediction for input data, returns JSON response with result\n- gradient() -> (Response, int) - Handles POST requests to '/gradient', calculates model gradient for input data, returns JSON response with gradient values\n- minimize() -> (Response, int) - Handles POST requests to '/minimize', performs structure minimization using the model, returns JSON response with optimized structure and energy",
    "Canonical_solution": "from flask import request, Flask, jsonify\nimport numpy as np\n\nclass FlaskAPI:\n    def __init__(self, model):\n        self.webapp = Flask(__name__)\n        self.model = model\n        self._setup_routes()\n\n    def _setup_routes(self):\n        self.webapp.add_url_rule('/potential', 'potential', self.potential, methods=[\"POST\"])\n        self.webapp.add_url_rule('/gradient', 'gradient', self.gradient, methods=[\"POST\"])\n        self.webapp.add_url_rule('/minimize', 'minimize', self.minimize, methods=[\"POST\"])\n\n    def run(self, **kwargs):\n        self.webapp.run(**kwargs)\n\n    def potential(self):\n        content = request.get_json(force=True)\n        if not content or not 'X' in content:\n            abort(400)\n        X = np.array(content['X'])\n        x0 = X[:, 1:]\n        a0 = X[:, :1]\n        result = self.model.pred_one(x0, a0)\n        return jsonify({'y': result.tolist()[0]}), 200\n\n    def gradient(self):\n        content = request.get_json(force=True)\n        if not content or not 'X' in content:\n            abort(400)\n        X = np.array(content['X'])\n        num_atoms = X.shape[0]\n        x0 = X[:, 1:]\n        a0 = X[:, :1]\n        res = self.model.grad_one(x0, a0)\n        res = res.reshape((num_atoms, 3))\n        return jsonify({'grad': res.tolist()}), 200\n\n    def minimize(self):\n        content = request.get_json(force=True)\n        if not content or not 'X' in content:\n            abort(400)\n        X = np.array(content['X'])\n        constraints = None\n        if 'constraints' in content:\n            constraints = content['constraints']\n        num_atoms = X.shape[0]\n        x0 = X[:, 1:]\n        a0 = X[:, :1]\n        res = self.model.minimize_structure(x0, a0, constraints)\n        res = res.reshape((num_atoms, 3))\n        y = self.model.pred_one(res, a0).tolist()[0]\n        return jsonify({'X': res.tolist(), 'y': y}), 200",
    "Code_level": "Class-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, jsonify\nimport json\n\nclass FlaskAPI:\n    def __init__(self, model):\n        self.webapp = Flask(__name__)\n        self.model = model\n        self._setup_routes()\n\n    def _setup_routes(self):\n        @self.webapp.route('/potential', methods=['POST'])\n        def potential():\n            data = request.get_json()\n            if not data:\n                return jsonify({\"error\": \"No input data provided\"}), 400\n            try:\n                result = self.model.potential(data)\n                return jsonify(result), 200\n            except Exception as e:\n                return jsonify({\"error\": str(e)}), 500\n\n        @self.webapp.route('/gradient', methods=['POST'])\n        def gradient():\n            data = request.get_json()\n            if not data:\n                return jsonify({\"error\": \"No input data provided\"}), 400\n            try:\n                result = self.model.gradient(data)\n                return jsonify(result), 200\n            except Exception as e:\n                return jsonify({\"error\": str(e)}), 500\n\n        @self.webapp.route('/minimize', methods=['POST'])\n        def minimize():\n            data = request.get_json()\n            if not data:\n                return jsonify({\"error\": \"No input data provided\"}), 400\n            try:\n                result = self.model.minimize(data)\n                return jsonify(result), 200\n            except Exception as e:\n                return jsonify({\"error\": str(e)}), 500\n\n    def run(self, **kwargs):\n        self.webapp.run(**kwargs)"
  },
  {
    "Task_id": 176,
    "Instruction": "Task Description: Create a Flask-based HTTP server for managing blueprints, including operations for retrieving, storing, and validating blueprint data and associated tarballs. The server should handle various HTTP methods (GET, PUT) and include metrics tracking for bandwidth and request counts.\n\nClass Description: BlueprintServer is a Flask application wrapper that provides endpoints for blueprint management, including CRUD operations for blueprints and their associated tarballs. It includes validation, metrics tracking, and response handling.\n\nAttributes:\n- app: Flask - The Flask application instance\n- browser_pattern: re.Pattern - Regular expression pattern for detecting browser user agents\n\nMethods:\n- __init__() -> None - Initializes the Flask app and sets up routes\n- _setup_routes() -> None - Defines all URL routes and their associated handlers\n- _blueprint(secret: str, name: str) -> Union[Blueprint, None, bool] - Retrieves and validates a blueprint from the backend\n- _server() -> str - Returns the server's base URL\n- _validate_secret(secret: str) -> None - Validates the secret format (400 if invalid)\n- _validate_name(name: str) -> None - Validates the name format (400 if invalid)\n- _validate_sha(sha: str) -> None - Validates the SHA format (400 if invalid)\n- secret() -> MeteredResponse - Generates and returns a new secret (201 response)\n- get_blueprint(secret: str, name: str) -> Union[MeteredResponse, abort] - Retrieves a blueprint (200/301/404 response)\n- put_blueprint(secret: str, name: str) -> MeteredResponse - Stores a new blueprint (202/400/502 response)\n- get_tarball(secret: str, name: str, sha: str) -> Union[redirect, abort] - Retrieves a tarball (301/404 response)\n- put_tarball(secret: str, name: str, sha: str) -> MeteredResponse - Stores a new tarball (202/400/502 response)\n- sh(secret: str, name: str, name2: str) -> Union[MeteredResponse, abort] - Generates shell script (200/400/404/502 response)\n- user_data(secret: str, name: str) -> MeteredResponse - Generates user-data script (200/404/502 response)\n- run() -> None - Starts the Flask development server",
    "Canonical_solution": "from flask import Flask, Response, request\nimport re\nimport os\nimport base64\nimport json\nimport librato\nimport statsd\nfrom blueprint import Blueprint\nimport backend\n\nclass MeteredResponse(Response):\n    def __init__(self, *args, **kwargs):\n        super(MeteredResponse, self).__init__(*args, **kwargs)\n        content_length = len(kwargs.get('response', ''))\n        if 0 < content_length:\n            librato.count('blueprint-io-server.bandwidth.out', content_length)\n            statsd.update('blueprint-io-server.bandwidth.out', content_length)\n\nclass BlueprintServer:\n    def __init__(self):\n        self.app = Flask(__name__)\n        self._setup_routes()\n        self.browser_pattern = re.compile(r'Chrome|Gecko|Microsoft|Mozilla|Safari|WebKit')\n\n    def _setup_routes(self):\n        self.app.route('/secret', methods=['GET'])(self.secret)\n        self.app.route('/<secret>/<name>', methods=['GET'])(self.get_blueprint)\n        self.app.route('/<secret>/<name>', methods=['PUT'])(self.put_blueprint)\n        self.app.route('/<secret>/<name>/<sha>.tar', methods=['GET'])(self.get_tarball)\n        self.app.route('/<secret>/<name>/<sha>.tar', methods=['PUT'])(self.put_tarball)\n        self.app.route('/<secret>/<name>/<name2>.sh', methods=['GET'])(self.sh)\n        self.app.route('/<secret>/<name>/user-data.sh', methods=['GET'])(self.user_data)\n\n    def _blueprint(self, secret, name):\n        data = backend.get_blueprint(secret, name)\n        if data is None:\n            return None\n        elif data is False:\n            return False\n        b = Blueprint()\n        b.name = name\n        b.update(json.loads(data))\n        return b\n\n    def _server(self):\n        return request.url_root\n\n    def _validate_secret(self, secret):\n        if re.match(r'^[0-9A-Za-z_-]{64}$', secret) is None:\n            abort(400)\n\n    def _validate_name(self, name):\n        if re.search(r'[/ \\t\\r\\n]', name) is not None:\n            abort(400)\n\n    def _validate_sha(self, sha):\n        if re.match(r'^[0-9a-f]{40}$', sha) is None:\n            abort(400)\n\n    def secret(self):\n        while True:\n            s = base64.urlsafe_b64encode(os.urandom(48))\n            try:\n                iter(backend.list(s)).next()\n            except StopIteration:\n                break\n        return MeteredResponse(response='{0}\\n'.format(s),\n                             status=201,\n                             content_type='text/plain')\n\n    def get_blueprint(self, secret, name):\n        self._validate_secret(secret)\n        self._validate_name(name)\n\n        content_length = backend.head_blueprint(secret, name)\n        if content_length is None:\n            abort(404)\n\n        if self.browser_pattern.search(request.environ.get('HTTP_USER_AGENT', '')) or 'html' == request.args.get('format'):\n            librato.count('blueprint-io-server.renders')\n            statsd.increment('blueprint-io-server.renders')\n            return render_template('blueprint.html', b=self._blueprint(secret, name))\n        else:\n            librato.count('blueprint-io-server.requests.get')\n            statsd.increment('blueprint-io-server.requests.get')\n            librato.count('blueprint-io-server.bandwidth.out', content_length)\n            statsd.update('blueprint-io-server.bandwidth.out', content_length)\n            return redirect(backend.url_for_blueprint(secret, name), code=301)\n\n    def put_blueprint(self, secret, name):\n        self._validate_secret(secret)\n        self._validate_name(name)\n\n        librato.count('blueprint-io-server.bandwidth.in', request.content_length)\n        statsd.update('blueprint-io-server.bandwidth.in', request.content_length)\n\n        try:\n            for k in request.json.iterkeys():\n                if k not in ('arch', 'files', 'packages', 'services', 'sources'):\n                    abort(400)\n        except ValueError:\n            abort(400)\n\n        b = self._blueprint(secret, name)\n        if b is not None and b is not False:\n            for filename in set(b.sources.itervalues()) - set(request.json.get('sources', {}).itervalues()):\n                backend.delete_tarball(secret, name, filename[0:-4])\n\n        if not backend.put_blueprint(secret, name, request.data):\n            abort(502)\n\n        return MeteredResponse(response='',\n                             status=202,\n                             content_type='text/plain')\n\n    def get_tarball(self, secret, name, sha):\n        self._validate_secret(secret)\n        self._validate_name(name)\n        sha = sha.lower()\n        self._validate_sha(sha)\n\n        content_length = backend.head_tarball(secret, name, sha)\n        if content_length is None:\n            abort(404)\n\n        librato.count('blueprint-io-server.requests.get')\n        statsd.increment('blueprint-io-server.requests.get')\n        librato.count('blueprint-io-server.bandwidth.out', content_length)\n        statsd.update('blueprint-io-server.bandwidth.out', content_length)\n\n        return redirect(backend.url_for_tarball(secret, name, sha), code=301)\n\n    def put_tarball(self, secret, name, sha):\n        self._validate_secret(secret)\n        self._validate_name(name)\n        sha = sha.lower()\n        self._validate_sha(sha)\n\n        librato.count('blueprint-io-server.bandwidth.in', request.content_length)\n        statsd.update('blueprint-io-server.bandwidth.in', request.content_length)\n\n        if hashlib.sha1(request.data).hexdigest() != sha:\n            abort(400)\n\n        b = self._blueprint(secret, name)\n        if b is None:\n            abort(404)\n        elif b is False:\n            abort(502)\n        if '{0}.tar'.format(sha) not in b.sources.itervalues():\n            abort(400)\n\n        if not backend.put_tarball(secret, name, sha, request.data):\n            abort(502)\n\n        return MeteredResponse(response='',\n                             status=202,\n                             content_type='text/plain')\n\n    def sh(self, secret, name, name2):\n        if 'user-data' == name2:\n            return self.user_data(secret, name)\n        if name != name2:\n            abort(400)\n        self._validate_secret(secret)\n        self._validate_name(name)\n\n        b = self._blueprint(secret, name)\n        if b is None:\n            abort(404)\n        elif b is False:\n            abort(502)\n        s = b.sh(server=self._server(), secret=secret)\n        s.out.insert(0, '#!/bin/sh\\n\\n')\n        return MeteredResponse(response=s.dumps(),\n                             status=200,\n                             content_type='text/plain')\n\n    def user_data(self, secret, name):\n        self._validate_secret(secret)\n        self._validate_name(name)\n        b = self._blueprint(secret, name)\n        if b is None:\n            abort(404)\n        elif b is False:\n            abort(502)\n        return MeteredResponse(response=f\"\"\"#!/bin/sh\n\nset -e\n\nTMPDIR=\"$(mktemp -d)\"\ncd \"$TMPDIR\"\ntrap \"rm -rf \\\\\"$TMPDIR\\\\\"\" EXIT\n\nwget \"{self._server()}/{secret}/{name}/{name}.sh\"\n\nsh \"$(ls)\"\n\"\"\",\n                           status=200,\n                           content_type='text/plain')\n\n    def run(self):\n        self.app.run(host='0.0.0.0', debug=True)",
    "Code_level": "Class-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, abort, redirect, Response\nimport re\nimport hashlib\nimport os\nimport json\nfrom typing import Union, Tuple, Optional\nfrom functools import wraps\n\nclass MeteredResponse:\n    def __init__(self, content: str, status_code: int):\n        self.content = content\n        self.status_code = status_code\n\nclass BlueprintServer:\n    def __init__(self):\n        self.app = Flask(__name__)\n        self.browser_pattern = re.compile(r'(Mozilla|MSIE|Edge|Firefox|Chrome|Safari|Opera|Android|iPhone|iPad)')\n        self._setup_routes()\n\n    def _setup_routes(self):\n        @self.app.route('/secret', methods=['POST'])\n        def secret():\n            return self.secret()\n\n        @self.app.route('/blueprint/<string:name>', methods=['GET'])\n        def get_blueprint(name):\n            secret = request.headers.get('X-Secret')\n            return self.get_blueprint(secret, name)\n\n        @self.app.route('/blueprint/<string:name>', methods=['PUT'])\n        def put_blueprint(name):\n            secret = request.headers.get('X-Secret')\n            return self.put_blueprint(secret, name)\n\n        @self.app.route('/tarball/<string:name>/<string:sha>', methods=['GET'])\n        def get_tarball(name, sha):\n            secret = request.headers.get('X-Secret')\n            return self.get_tarball(secret, name, sha)\n\n        @self.app.route('/tarball/<string:name>/<string:sha>', methods=['PUT'])\n        def put_tarball(name, sha):\n            secret = request.headers.get('X-Secret')\n            return self.put_tarball(secret, name, sha)\n\n        @self.app.route('/sh/<string:name>/<string:name2>', methods=['GET'])\n        def sh(name, name2):\n            secret = request.headers.get('X-Secret')\n            return self.sh(secret, name, name2)\n\n        @self.app.route('/user-data/<string:name>', methods=['GET'])\n        def user_data(name):\n            secret = request.headers.get('X-Secret')\n            return self.user_data(secret, name)\n\n    def _blueprint(self, secret: str, name: str) -> Union['Blueprint', None, bool]:\n        pass\n\n    def _server(self) -> str:\n        return 'http://localhost:5000'\n\n    def _validate_secret(self, secret: str) -> None:\n        if not re.match(r'^[a-zA-Z0-9]{32}$', secret):\n            abort(400, 'Invalid secret format')\n\n    def _validate_name(self, name: str) -> None:\n        if not re.match(r'^[a-zA-Z0-9_-]+$', name):\n            abort(400, 'Invalid name format')\n\n    def _validate_sha(self, sha: str) -> None:\n        if not re.match(r'^[a-f0-9]{64}$', sha):\n            abort(400, 'Invalid SHA format')\n\n    def secret(self) -> MeteredResponse:\n        secret = ''.join([hashlib.sha1(os.urandom(16)).hexdigest() for _ in range(4)])\n        return MeteredResponse(json.dumps({'secret': secret}), 201)\n\n    def get_blueprint(self, secret: str, name: str) -> Union[MeteredResponse, abort]:\n        self._validate_secret(secret)\n        self._validate_name(name)\n        blueprint = self._blueprint(secret, name)\n        if blueprint is None:\n            abort(404, 'Blueprint not found')\n        elif isinstance(blueprint, bool):\n            abort(400, 'Invalid blueprint data')\n        return MeteredResponse(json.dumps(blueprint), 200)\n\n    def put_blueprint(self, secret: str, name: str) -> MeteredResponse:\n        self._validate_secret(secret)\n        self._validate_name(name)\n        data = request.json\n        if not data or 'content' not in data:\n            abort(400, 'Missing content in request')\n        blueprint = self._blueprint(secret, name)\n        if blueprint is not None:\n            abort(400, 'Blueprint already exists')\n        # Simulate storing blueprint\n        return MeteredResponse(json.dumps({'status': 'stored'}), 202)\n\n    def get_tarball(self, secret: str, name: str, sha: str) -> Union[redirect, abort]:\n        self._validate_secret(secret)\n        self._validate_name(name)\n        self._validate_sha(sha)\n        tarball_path = f'/path/to/tarballs/{name}/{sha}.tar.gz'\n        if not os.path.exists(tarball_path):\n            abort(404, 'Tarball not found')\n        return redirect(tarball_path, code=301)\n\n    def put_tarball(self, secret: str, name: str, sha: str) -> MeteredResponse:\n        self._validate_secret(secret)\n        self._validate_name(name)\n        self._validate_sha(sha)\n        file = request.files.get('file')\n        if not file:\n            abort(400, 'Missing file in request')\n        file.save(f'/path/to/tarballs/{name}/{sha}.tar.gz')\n        return MeteredResponse(json.dumps({'status': 'stored'}), 202)\n\n    def sh(self, secret: str, name: str, name2: str) -> Union[MeteredResponse, abort]:\n        self._validate_secret(secret)\n        self._validate_name(name)\n        self._validate_name(name2)\n        blueprint = self._blueprint(secret, name)\n        if blueprint is None:\n            abort(404, 'Blueprint not found')\n        script = f'#!/bin/bash\\n# Generated shell script for {name}\\n# Additional commands here'\n        return MeteredResponse(script, 200)\n\n    def user_data(self, secret: str, name: str) -> MeteredResponse:\n        self._validate_secret(secret)\n        self._validate_name(name)\n        blueprint = self._blueprint(secret, name)\n        if blueprint is None:\n            abort(404, 'Blueprint not found')\n        script = f'#cloud-config\\n# Generated user-data script for {name}\\n# Additional configurations here'\n        return MeteredResponse(script, 200)\n\n    def run(self) -> None:\n        self.app.run(debug=True)"
  },
  {
    "Task_id": 178,
    "Instruction": "Task Description: Create a Flask-based HTTP server to manage color resources with CRUD (Create, Read, Update, Delete) operations. The server should handle JSON data and respond with appropriate JSON responses.\n\nFunction Description: The code implements a RESTful API for managing color resources stored in a JSON file. It provides endpoints to retrieve all colors, get a specific color by name, create a new color, update an existing color, and delete a color.\n\nInput:\n- For GET /colors: No input parameters\n- For GET /colors/<name>: 'name' parameter in URL path\n- For POST /colors: JSON payload with 'name' and 'value' fields\n- For PUT /colors/<name>: 'name' parameter in URL path and JSON payload with optional 'value' field\n- For DELETE /colors/<name>: 'name' parameter in URL path\n\nOutput:\n- For GET /colors: JSON response containing all colors\n- For GET /colors/<name>: JSON response with the specific color or error\n- For POST /colors: JSON response with the created color and HTTP status 201\n- For PUT /colors/<name>: JSON response with the updated color or error\n- For DELETE /colors/<name>: JSON response with the deleted color or error",
    "Canonical_solution": "from flask import Flask, jsonify, request\nimport json\n\ncolors = json.load(file('colors.json', 'r'))\napp = Flask(__name__)\n\n@app.route('/colors', methods = ['GET'])\ndef get_colors():\n    return jsonify( { \"data\" :  colors })\n\n@app.route('/colors/<name>', methods = ['GET'])\ndef get_color(name):\n    for color in colors:\n        if color[\"name\"] == name:\n            return jsonify( color )\n    return jsonify( { 'error' : True } )\n\n@app.route('/colors', methods= ['POST'])\ndef create_color():\n    color = {\n        'name': request.json['name'],\n        'value': request.json['value']\n    }\n    colors.append(color)\n    return jsonify( color ), 201\n\n@app.route('/colors/<name>', methods= ['PUT'])\ndef update_color(name):\n    for color in colors:\n        if color[\"name\"] == name:\n            color['value'] = request.json.get('value', color['value'])\n            return jsonify( color )\n    return jsonify( { 'error' : True } )\n\n@app.route('/colors/<name>', methods=['DELETE'])\ndef delete_color(name):\n    for color in colors:\n        if color[\"name\"] == name:\n            colors.remove(color)\n            return jsonify(color)\n    return jsonify( { 'error' : True } )",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "import json\nimport os\nfrom flask import Flask, request, jsonify\n\napp = Flask(__name__)\nCOLORS_FILE = 'colors.json'\n\ndef load_colors():\n    if not os.path.exists(COLORS_FILE):\n        return {}\n    with open(COLORS_FILE, 'r') as f:\n        return json.load(f)\n\ndef save_colors(colors):\n    with open(COLORS_FILE, 'w') as f:\n        json.dump(colors, f, indent=2)\n\n@app.route('/colors', methods=['GET'])\ndef get_colors():\n    colors = load_colors()\n    return jsonify(colors)\n\n@app.route('/colors/<name>', methods=['GET'])\ndef get_color(name):\n    colors = load_colors()\n    if name in colors:\n        return jsonify(colors[name])\n    else:\n        return jsonify({'error': 'Color not found'}), 404\n\n@app.route('/colors', methods=['POST'])\ndef create_color():\n    data = request.get_json()\n    if not data or 'name' not in data or 'value' not in data:\n        return jsonify({'error': 'Missing name or value'}), 400\n    colors = load_colors()\n    if data['name'] in colors:\n        return jsonify({'error': 'Color already exists'}), 409\n    colors[data['name']] = data['value']\n    save_colors(colors)\n    return jsonify(colors[data['name']]), 201\n\n@app.route('/colors/<name>', methods=['PUT'])\ndef update_color(name):\n    data = request.get_json()\n    colors = load_colors()\n    if name not in colors:\n        return jsonify({'error': 'Color not found'}), 404\n    if data and 'value' in data:\n        colors[name] = data['value']\n    else:\n        return jsonify({'error': 'Missing value'}), 400\n    save_colors(colors)\n    return jsonify(colors[name])\n\n@app.route('/colors/<name>', methods=['DELETE'])\ndef delete_color(name):\n    colors = load_colors()\n    if name not in colors:\n        return jsonify({'error': 'Color not found'}), 404\n    deleted = colors.pop(name)\n    save_colors(colors)\n    return jsonify(deleted)\n\nif __name__ == '__main__':\n    app.run(debug=True)"
  },
  {
    "Task_id": 179,
    "Instruction": "Task Description: Create a Flask-based HTTP server that handles computation requests, supports CORS, and provides flexible serialization formats with proper error handling and logging capabilities.\n\nClass Description: The Server class encapsulates a Flask application with enhanced exception formatting and provides methods to run the server and handle computation requests through a dedicated API blueprint.\n\nAttributes:\n- app: [FlaskWithExceptionFormatting] - The Flask application instance with custom exception formatting\n- data: [dict] - Data store for the server (optional)\n- port: [int] - The port number the server is running on\n\nMethods:\n- __init__: [Name](data=None, formats=None, authorization=None, allow_profiler=False, profiler_output=None, profile_by_default=False, allow_add=False, logfile=sys.stdout, loglevel='WARNING', log_exception_formatter=None) -> [None] - Initializes the server with configuration options including data storage, serialization formats, authorization, profiling, and logging settings\n- run: [Name](port=6363, retry=False, **kwargs) -> [None] - Starts the Flask server on the specified port with optional retry logic if the port is busy\n\nAdditional Blueprint (api) Methods:\n- compserver: [Name]() -> [Response] - Handles POST, HEAD, and OPTIONS requests for computation, processes incoming data with supported serialization formats, and returns computation results (decorated with CORS support)",
    "Canonical_solution": "from flask import Flask, Blueprint, Response\nfrom flask_cors import cross_origin\nfrom werkzeug.http import parse_options_header\nimport collections\nimport sys\nimport logging\nfrom logging import Formatter\nfrom functools import wraps\nimport traceback\nfrom datetime import datetime\nimport os\nimport socket\nfrom time import time\nfrom warnings import warn\nimport importlib\nfrom blaze import compute, resource\nfrom blaze.compatibility import ExitStack\nfrom .serialization import json, all_formats\nfrom ..expr import Symbol, symbol\n\nclass FlaskWithExceptionFormatting(Flask):\n    def __init__(self, *args, **kwargs):\n        self.log_exception_formatter = kwargs.pop('log_exception_formatter', \n                                                 lambda tb: ''.join(traceback.format_tb(tb)))\n        super(FlaskWithExceptionFormatting, self).__init__(*args, **kwargs)\n\nclass Server:\n    def __init__(self, data=None, formats=None, authorization=None, allow_profiler=False,\n                 profiler_output=None, profile_by_default=False, allow_add=False,\n                 logfile=sys.stdout, loglevel='WARNING', log_exception_formatter=None):\n        app = self.app = FlaskWithExceptionFormatting('blaze.server.server',\n                                                     log_exception_formatter=log_exception_formatter)\n        app.register_blueprint(api,\n                              data=data if data is not None else {},\n                              formats=formats if formats is not None else (json,),\n                              authorization=authorization,\n                              allow_profiler=allow_profiler,\n                              profiler_output=profiler_output,\n                              profile_by_default=profile_by_default,\n                              allow_add=allow_add)\n        self.data = data\n        if logfile:\n            handler = logging.FileHandler(logfile) if isinstance(logfile, (str, bytes)) else logging.StreamHandler(logfile)\n            handler.setFormatter(Formatter('[%(asctime)s %(levelname)s] %(message)s [in %(pathname)s:%(lineno)d]'))\n            handler.setLevel(getattr(logging, loglevel))\n            app.logger.addHandler(handler)\n\n    def run(self, port=6363, retry=False, **kwargs):\n        self.port = port\n        try:\n            self.app.run(port=port, **kwargs)\n        except socket.error:\n            if not retry:\n                raise\n            warn(\"Oops, couldn't connect on port %d.  Is it busy?\" % port)\n            self.run(port=port + 1, retry=retry, **kwargs)\n\napi = Blueprint('api', __name__)\n\n@api.route('/compute', methods=['POST', 'HEAD', 'OPTIONS'])\n@cross_origin(origins='*', methods=['POST', 'HEAD', 'OPTIONS'])\ndef compserver():\n    raw_content_type = flask.request.headers['content-type']\n    content_type, options = parse_options_header(raw_content_type)\n    \n    if content_type not in accepted_mimetypes:\n        return ('Unsupported serialization format %s' % content_type, 415)\n\n    try:\n        serial = _get_format(accepted_mimetypes[content_type])\n    except KeyError:\n        return (\"Unsupported serialization format '%s'\" % content_type, 415)\n\n    try:\n        payload = serial.loads(flask.request.data)\n    except ValueError:\n        return (\"Bad data.  Got %s \" % flask.request.data, 400)\n\n    # Main computation logic here\n    # ... (rest of computation handling code)\n\n    return serial.dumps(response)",
    "Code_level": "Class-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, jsonify, Response\nfrom flask_cors import CORS\nimport logging\nimport sys\nimport json\nimport traceback\n\nclass FlaskWithExceptionFormatting(Flask):\n    def handle_exception(self, e):\n        logging.error(\"Uncaught exception: %s\", e)\n        logging.error(traceback.format_exc())\n        return jsonify(error=str(e)), 500\n\nclass Server:\n    def __init__(self, data=None, formats=None, authorization=None, allow_profiler=False, profiler_output=None, profile_by_default=False, allow_add=False, logfile=sys.stdout, loglevel='WARNING', log_exception_formatter=None):\n        self.app = FlaskWithExceptionFormatting(__name__)\n        self.data = data or {}\n        self.formats = formats or ['json', 'xml']\n        self.authorization = authorization\n        self.allow_profiler = allow_profiler\n        self.profiler_output = profiler_output\n        self.profile_by_default = profile_by_default\n        self.allow_add = allow_add\n        self.logfile = logfile\n        self.loglevel = loglevel\n        self.log_exception_formatter = log_exception_formatter\n        \n        self.setup_logging()\n        self.setup_cors()\n        self.setup_api()\n\n    def setup_logging(self):\n        logging.basicConfig(\n            filename=self.logfile,\n            level=self.loglevel,\n            format='%(asctime)s - %(levelname)s - %(message)s'\n        )\n\n    def setup_cors(self):\n        CORS(self.app, resources={r\"/*\": {\"origins\": \"*\"}})\n\n    def setup_api(self):\n        self.api = self.app.blueprint('api', __name__)\n        self.app.register_blueprint(self.api, url_prefix='/api')\n        \n        @self.api.route('/compserver', methods=['POST', 'HEAD', 'OPTIONS'])\n        def compserver():\n            if request.method in ['HEAD', 'OPTIONS']:\n                return self.handle_head_options()\n            \n            if not self._check_authorization():\n                return jsonify(error=\"Authorization failed\"), 401\n            \n            content_type = request.headers.get('Content-Type', '').lower()\n            if content_type not in [f.lower() for f in self.formats]:\n                return jsonify(error=f\"Unsupported content type: {content_type}\"), 415\n            \n            try:\n                data = self._parse_request(content_type)\n                result = self._process_computation(data)\n                return self._serialize_response(result, content_type)\n            except Exception as e:\n                return self._handle_error(e)\n\n    def _check_authorization(self):\n        if not self.authorization:\n            return True\n        auth_header = request.headers.get('Authorization')\n        return auth_header == self.authorization\n\n    def _parse_request(self, content_type):\n        if content_type == 'application/json':\n            return request.get_json()\n        elif content_type == 'application/xml':\n            return xmltodict.parse(request.data)\n        else:\n            raise ValueError(f\"Unsupported content type: {content_type}\")\n\n    def _process_computation(self, data):\n        if not self.allow_add and 'add' in data:\n            raise ValueError(\"Add operation is not allowed\")\n        return {'result': sum(data.values())}\n\n    def _serialize_response(self, data, content_type):\n        if content_type == 'application/json':\n            return jsonify(data)\n        elif content_type == 'application/xml':\n            return Response(xmltodict.unparse({'root': data}), content_type='application/xml')\n        else:\n            raise ValueError(f\"Unsupported content_type: {content_type}\")\n\n    def _handle_error(self, e):\n        error_message = str(e)\n        if self.log_exception_formatter:\n            error_message = self.log_exception_formatter(e)\n        logging.error(error_message)\n        return jsonify(error=error_message), 500\n\n    def handle_head_options(self):\n        if request.method == 'HEAD':\n            return '', 200\n        elif request.method == 'OPTIONS':\n            headers = {\n                'Access-Control-Allow-Origin': '*',\n                'Access-Control-Allow-Methods': 'POST, HEAD, OPTIONS',\n                'Access-Control-Allow-Headers': 'Content-Type, Authorization'\n            }\n            return Response('', status=200, headers=headers)\n\n    def run(self, port=6363, retry=False, **kwargs):\n        if retry:\n            from socket import error as socket_error\n            while True:\n                try:\n                    self.app.run(port=port, **kwargs)\n                    break\n                except socket_error as e:\n                    if \"Address already in use\" in str(e):\n                        port += 1\n                    else:\n                        raise\n        else:\n            self.app.run(port=port, **kwargs)"
  },
  {
    "Task_id": 180,
    "Instruction": "Task Description: Create a Flask-based HTTP server endpoint that handles OAuth token requests for Aliyun Drive by processing refresh tokens, making external API calls, and returning decrypted token data.\n\nFunction Description: The function `oauth_token()` is a Flask route handler that processes POST requests to '/oauth/alipan/token'. It validates the input, makes authenticated requests to an external API, handles the response, and returns either the decrypted token data or an error response.\n\nInput:\n- HTTP POST request with JSON body containing:\n  - refresh_token: [String] - Required refresh token for OAuth authentication\n\nOutput:\n- HTTP Response with:\n  - Status Code: 200 (success) or error code (4xx/5xx)\n  - Body: JSON containing either:\n    - Success: Decrypted token data\n    - Error: Error message describing the failure",
    "Canonical_solution": "import json\nimport requests\nfrom flask import Flask, request, Response\n\napp = Flask(__name__)\nheaders = {\n    \"token\": \"6733b42e28cdba32\",\n    'User-Agent': 'Mozilla/5.0 (Linux; U; Android 9; zh-cn; SM-S908E Build/TP1A.220624.014) AppleWebKit/533.1 (KHTML, like Gecko) Mobile Safari/533.1',\n    'Host': 'api.extscreen.com'\n}\n\n@app.route('/oauth/alipan/token', methods=['POST'])\ndef oauth_token():\n    data = request.get_json()\n    refresh_token = data.get('refresh_token', None)\n    if not refresh_token:\n        return Response(json.dumps({\"error\": \"No refresh_token provided\"}), status=400, mimetype='application/json')\n\n    req_body = {\n        \"refresh_token\": refresh_token\n    }\n\n    timestamp = str(requests.get('http://api.extscreen.com/timestamp', timeout=10).json()['data']['timestamp'])\n    unique_id = uuid.uuid4().hex\n    wifimac = str(random.randint(10**11, 10**12 - 1))\n\n    resp = requests.post(\"http://api.extscreen.com/aliyundrive/v3/token\", data=req_body, headers={**get_params(timestamp, unique_id, wifimac), **headers}, timeout=10)\n    if resp.status_code == 200:\n        resp_data = resp.json()\n        ciphertext = resp_data[\"data\"][\"ciphertext\"]\n        iv = resp_data[\"data\"][\"iv\"]\n\n        token_data = decrypt(ciphertext, iv, timestamp, unique_id, wifimac)\n        token = json.loads(token_data)\n        return Response(json.dumps(token), status=200, mimetype='application/json')\n    else:\n        return Response(resp.content, status=resp.status_code, mimetype='application/json')",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "import os\nimport json\nimport requests\nfrom flask import Flask, request, jsonify\nfrom cryptography.fernet import Fernet\n\napp = Flask(__name__)\n\n# Replace with your actual Aliyun Drive OAuth token endpoint and credentials\nALIYUN_OAUTH_TOKEN_URL = \"https://api.aliyuncs.com\"\nCLIENT_ID = os.environ.get(\"ALIYUN_CLIENT_ID\")\nCLIENT_SECRET = os.environ.get(\"ALIYUN_CLIENT_SECRET\")\nFERNET_KEY = os.environ.get(\"FERNET_KEY\").encode()\n\ndef get_oauth_token(refresh_token):\n    payload = {\n        \"grant_type\": \"refresh_token\",\n        \"refresh_token\": refresh_token,\n        \"client_id\": CLIENT_ID,\n        \"client_secret\": CLIENT_SECRET\n    }\n    headers = {\"Content-Type\": \"application/x-www-form-urlencoded\"}\n    response = requests.post(ALIYUN_OAUTH_TOKEN_URL, data=payload, headers=headers)\n    if response.status_code == 200:\n        return response.json()\n    else:\n        return {\"error\": \"Failed to fetch token\", \"status_code\": response.status_code}\n\ndef decrypt_token_data(encrypted_data):\n    fernet = Fernet(FERNET_KEY)\n    try:\n        decrypted_data = fernet.decrypt(encrypted_data.encode()).decode()\n        return json.loads(decrypted_data)\n    except Exception as e:\n        return {\"error\": \"Decryption failed\", \"message\": str(e)}\n\n@app.route('/oauth/alipan/token', methods=['POST'])\ndef oauth_token():\n    data = request.get_json()\n    if not data or 'refresh_token' not in data:\n        return jsonify({\"error\": \"Missing refresh_token in request\"}), 400\n\n    refresh_token = data['refresh_token']\n    token_response = get_oauth_token(refresh_token)\n    if \"error\" in token_response:\n        return jsonify(token_response), token_response[\"status_code\"]\n\n    encrypted_token_data = token_response.get(\"access_token\", \"\")\n    decrypted_token_data = decrypt_token_data(encrypted_token_data)\n    if \"error\" in decrypted_token_data:\n        return jsonify(decrypted_token_data), 500\n\n    return jsonify(decrypted_token_data), 200"
  },
  {
    "Task_id": 181,
    "Instruction": "Task Description: Create a Flask-based web server that handles image processing requests through two endpoints: one for adjusting brightness/contrast and another for image enhancement.\n\nFunction Description: The server provides two main routes:\n1. '/adjust' - Handles image brightness and contrast adjustments\n2. '/enhance' - Handles image enhancement operations\nEach route supports both GET (returning HTML forms) and POST (processing the submitted data) methods.\n\nInput:\nFor POST requests:\n- '/adjust' endpoint:\n  - the_file: [File] - Image file to process\n  - brightness: [str] - Brightness adjustment value\n  - contrast: [str] - Contrast adjustment value\n- '/enhance' endpoint:\n  - the_file: [File] - Image file to process\n  - amount: [str] - Enhancement amount value\n\nOutput:\nFor GET requests:\n- Returns HTML templates ('adjust.html' or 'enhance.html')\nFor POST requests:\n- Returns processed image data from respective modules (adjust.do_adjust or enhance.do_enhance)",
    "Canonical_solution": "from flask import Flask, render_template, request\n\napp = Flask(__name__)\n\n@app.route(\"/adjust\", methods=[\"GET\", \"POST\"])\ndef do_adjust():\n    if request.method == \"POST\":\n        the_file = request.files[\"the_file\"]\n        brightness = request.form[\"brightness\"]\n        contrast = request.form[\"contrast\"]\n        import adjust\n\n        return adjust.do_adjust(the_file, brightness, contrast)\n    else:\n        return render_template(\"adjust.html\")\n\n@app.route(\"/enhance\", methods=[\"GET\", \"POST\"])\ndef do_enhance():\n    if request.method == \"POST\":\n        the_file = request.files[\"the_file\"]\n        amount = request.form[\"amount\"]\n        import enhance\n\n        return enhance.do_enhance(the_file, amount)\n    else:\n        return render_template(\"enhance.html\")",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, render_template, send_bytes\nimport numpy as np\nfrom PIL import Image\nimport io\n\napp = Flask(__name__)\n\ndef adjust_brightness_contrast(image, brightness, contrast):\n    img = Image.open(io.BytesIO(image))\n    brightness = float(brightness)\n    contrast = float(contrast)\n    enhancer = ImageEnhance.Brightness(img)\n    img = enhancer.enhance(brightness)\n    enhancer = ImageEnhance.Contrast(img)\n    img = enhancer.enhance(contrast)\n    img_byte_arr = io.BytesIO()\n    img.save(img_byte_arr, format='JPEG')\n    return img_byte_arr.getvalue()\n\ndef enhance_image(image, amount):\n    img = Image.open(io.BytesIO(image))\n    enhancer = ImageEnhance.Sharpness(img)\n    img = enhancer.enhance(float(amount))\n    img_byte_arr = io.BytesIO()\n    img.save(img_byte_arr, format='JPEG')\n    return img_byte_arr.getvalue()\n\n@app.route('/adjust', methods=['GET', 'POST'])\ndef adjust():\n    if request.method == 'POST':\n        the_file = request.files['the_file']\n        brightness = request.form['brightness']\n        contrast = request.form['contrast']\n        processed_image = adjust_brightness_contrast(the_file.read(), brightness, contrast)\n        return send_bytes(processed_image, mimetype='image/jpeg')\n    return render_template('adjust.html')\n\n@app.route('/enhance', methods=['GET', 'POST'])\ndef enhance():\n    if request.method == 'POST':\n        the_file = request.files['the_file']\n        amount = request.form['amount']\n        processed_image = enhance_image(the_file.read(), amount)\n        return send_bytes(processed_image, mimetype='image/jpeg')\n    return render_template('enhance.html')\n\nif __name__ == '__main__':\n    app.run(debug=True)"
  },
  {
    "Task_id": 182,
    "Instruction": "Task Description: Create a Flask-based HTTP server endpoint that predicts home prices based on input parameters.\n\nFunction Description: The function `predict_home_price` is a Flask route handler that processes incoming HTTP requests (GET or POST) containing home features, uses these features to predict a home price, and returns the estimated price as a JSON response with CORS headers enabled.\n\nInput:\n- `total_sqft`: [float] - Total square footage of the home\n- `location`: [str] - Location of the home\n- `bhk`: [int] - Number of bedrooms/hall/kitchen\n- `bath`: [int] - Number of bathrooms\n\nOutput:\n- [JSON] - A JSON response containing the key 'estimated_price' with the predicted value, and CORS headers allowing access from any origin.",
    "Canonical_solution": "from flask import Flask, request, jsonify\nimport util\n\napp = Flask(__name__)\n\n@app.route('/predict_home_price', methods=['GET', 'POST'])\ndef predict_home_price():\n    total_sqft = float(request.form['total_sqft'])\n    location = request.form['location']\n    bhk = int(request.form['bhk'])\n    bath = int(request.form['bath'])\n\n    response = jsonify({\n        'estimated_price': util.get_estimated_price(location,total_sqft,bhk,bath)\n    })\n    response.headers.add('Access-Control-Allow-Origin', '*')\n\n    return response",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, jsonify\nfrom flask_cors import CORS\n\napp = Flask(__name__)\nCORS(app)\n\ndef predict_home_price(total_sqft, location, bhk, bath):\n    # Placeholder for actual prediction logic\n    # In a real scenario, this would use a trained model\n    estimated_price = total_sqft * 1000 + bhk * 50000 + bath * 30000\n    return estimated_price\n\n@app.route('/predict', methods=['GET', 'POST'])\ndef predict():\n    data = request.get_json() or request.args.to_dict()\n    total_sqft = float(data['total_sqft'])\n    location = data['location']\n    bhk = int(data['bhk'])\n    bath = int(data['bath'])\n    price = predict_home_price(total_sqft, location, bhk, bath)\n    return jsonify({'estimated_price': price})\n\nif __name__ == '__main__':\n    app.run(debug=True)"
  },
  {
    "Task_id": 183,
    "Instruction": "Task Description: Create a Flask-based HTTP server to process PagerDuty webhook events, decode and validate the incoming data, and insert relevant event information into BigQuery.\n\nFunction Description: The code consists of two main functions: \n1. `index()` - The Flask route handler that receives and validates incoming POST requests containing PagerDuty events\n2. `process_pagerduty_event()` - Processes and transforms the raw PagerDuty event data into a structured format for BigQuery insertion\n\nInput:\n- For `index()`: HTTP POST request with JSON payload containing PagerDuty event data\n- For `process_pagerduty_event()`: A message dictionary containing base64-encoded PagerDuty event data\n\nOutput:\n- For `index()`: Returns HTTP 204 (No Content) response after processing\n- For `process_pagerduty_event()`: Returns a structured dictionary containing processed PagerDuty event data ready for BigQuery insertion",
    "Canonical_solution": "import base64\nimport os\nimport json\nimport shared\nfrom flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route(\"/\", methods=[\"POST\"])\ndef index():\n    if not request.is_json:\n        raise Exception(\"Expecting JSON payload\")\n    envelope = request.get_json()\n\n    if \"message\" not in envelope:\n        raise Exception(\"Not a valid Pub/Sub Message\")\n    msg = envelope[\"message\"]\n\n    if \"attributes\" not in msg:\n        raise Exception(\"Missing pubsub attributes\")\n\n    try:\n        event = process_pagerduty_event(msg)\n        print(f\" Event which is to be inserted into Big query {event}\")\n        if event:\n            shared.insert_row_into_bigquery(event)\n\n    except Exception as e:\n        entry = {\n                \"severity\": \"WARNING\",\n                \"msg\": \"Data not saved to BigQuery\",\n                \"errors\": str(e),\n                \"json_payload\": envelope\n            }\n        print(f\"EXCEPTION raised  {json.dumps(entry)}\")\n    return \"\", 204\n\ndef process_pagerduty_event(msg):\n    metadata = json.loads(base64.b64decode(msg[\"data\"]).decode(\"utf-8\").strip())\n\n    print(f\"Metadata after decoding {metadata}\")\n\n    signature = shared.create_unique_id(msg)\n    event = metadata['event']\n    event_type = event[\"event_type\"]\n    types = {\"incident.triggered\", \"incident.resolved\"}\n    if event_type not in types:\n        raise Warning(\"Unsupported PagerDuty event: '%s'\" % event_type)\n\n    pagerduty_event = {\n        \"event_type\": event_type,\n        \"id\": event['id'],\n        \"metadata\": json.dumps(metadata),\n        \"signature\": signature,\n        \"msg_id\": msg[\"message_id\"],\n        \"time_created\" : event['occurred_at'],\n        \"source\": \"pagerduty\",\n        }\n\n    print(f\"Pager Duty event to metrics--------> {pagerduty_event}\")\n    return pagerduty_event",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, jsonify\nimport base64\nimport json\nimport os\n\napp = Flask(__name__)\n\ndef process_pagerduty_event(message):\n    try:\n        encoded_data = message['data']\n        decoded_data = base64.b64decode(encoded_data).decode('utf-8')\n        event_data = json.loads(decoded_data)\n        \n        # Extract relevant fields for BigQuery\n        event_id = event_data.get('id', '')\n        incident_number = event_data.get('incident_number', '')\n        type_ = event_data.get('type', '')\n        created_at = event_data.get('created_at', '')\n        updated_at = event_data.get('updated_at', '')\n        details = event_data.get('details', {})\n        payload = event_data.get('payload', {})\n        routing_key = payload.get('routing_key', '')\n        dedup_key = payload.get('dedup_key', '')\n        escalation_policy = payload.get('escalation_policy', '')\n        entity_id = payload.get('entity_id', '')\n        entity_type = payload.get('entity_type', '')\n        source = payload.get('source', '')\n        status = payload.get('status', '')\n        summary = payload.get('summary', '')\n        description = payload.get('description', '')\n        html_url = payload.get('html_url', '')\n        incident_url = payload.get('incident_url', '')\n        assignee = payload.get('assignee', {})\n        assignee_id = assignee.get('id', '')\n        assignee_name = assignee.get('name', '')\n        assignee_email = assignee.get('email', '')\n        oncall = payload.get('oncall', {})\n        oncall_id = oncall.get('id', '')\n        oncall_name = oncall.get('name', '')\n        oncall_email = oncall.get('email', '')\n        \n        return {\n            'event_id': event_id,\n            'incident_number': incident_number,\n            'type': type_,\n            'created_at': created_at,\n            'updated_at': updated_at,\n            'details': json.dumps(details),\n            'routing_key': routing_key,\n            'dedup_key': dedup_key,\n            'escalation_policy': escalation_policy,\n            'entity_id': entity_id,\n            'entity_type': entity_type,\n            'source': source,\n            'status': status,\n            'summary': summary,\n            'description': description,\n            'html_url': html_url,\n            'incident_url': incident_url,\n            'assignee_id': assignee_id,\n            'assignee_name': assignee_name,\n            'assignee_email': assignee_email,\n            'oncall_id': oncall_id,\n            'oncall_name': oncall_name,\n            'oncall_email': oncall_email\n        }\n    except Exception as e:\n        print(f\"Error processing PagerDuty event: {e}\")\n        return {}\n\n@app.route('/', methods=['POST'])\ndef index():\n    try:\n        auth_token = request.headers.get('Authorization')\n        if not auth_token or auth_token != os.environ.get('PAGERDUTY_WEBHOOK_TOKEN'):\n            return jsonify({'error': 'Unauthorized'}), 401\n        \n        data = request.json\n        if not data:\n            return jsonify({'error': 'Invalid JSON payload'}), 400\n        \n        processed_data = process_pagerduty_event(data)\n        \n        if not processed_data:\n            return jsonify({'error': 'Failed to process PagerDuty event'}), 500\n        \n        # Here you would typically insert processed_data into BigQuery\n        # For example: insert_into_bigquery(processed_data)\n        \n        return '', 204\n    except Exception as e:\n        print(f\"Error handling request: {e}\")\n        return jsonify({'error': 'Internal server error'}), 500\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000)"
  },
  {
    "Task_id": 184,
    "Instruction": "Task Description: Create a Flask web application that serves different data views through specific routes, rendering them using a template.\n\nFunction Description: The application defines multiple route handlers that fetch different types of data and render them using a common template ('index.html'). Each route corresponds to a different data view (main, corporate, and job data).\n\nInput:\n- Route paths ('/', '/corp', '/job') as HTTP endpoints\n- HTTP GET requests to these endpoints\n\nOutput:\n- Rendered HTML responses using the 'index.html' template with respective data and title\n- HTTP responses with status code 200 for successful renders\n\nMethods:\n- index() -> HTML - Handles root route ('/') and renders main data view\n- corp() -> HTML - Handles '/corp' route and renders corporate data view\n- job() -> HTML - Handles '/job' route and renders job data view\n\nNote: The actual data fetching is delegated to external functions (SourceData(), CorpData(), JobData()) which return objects containing the required data and title. The template 'index.html' should be prepared to handle the 'form' and 'title' variables passed from these route handlers.",
    "Canonical_solution": "from flask import Flask, render_template\nfrom data import *\n\napp = Flask(__name__)\n\n@app.route('/')\ndef index():\n    data = SourceData()\n    return render_template('index.html', form=data, title=data.title)\n\n@app.route('/corp')\ndef corp():\n    data = CorpData()\n    return render_template('index.html', form=data, title=data.title)\n\n@app.route('/job')\ndef job():\n    data = JobData()\n    return render_template('index.html', form=data, title=data.title)\n\nif __name__ == \"__main__\":\n    app.run(host='127.0.0.1', debug=False)",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, render_template\n\napp = Flask(__name__)\n\ndef SourceData():\n    return {'form': 'Main Data', 'title': 'Main View'}\n\ndef CorpData():\n    return {'form': 'Corporate Data', 'title': 'Corporate View'}\n\ndef JobData():\n    return {'form': 'Job Data', 'title': 'Job View'}\n\n@app.route('/')\ndef index():\n    data = SourceData()\n    return render_template('index.html', form=data['form'], title=data['title'])\n\n@app.route('/corp')\ndef corp():\n    data = CorpData()\n    return render_template('index.html', form=data['form'], title=data['title'])\n\n@app.route('/job')\ndef job():\n    data = JobData()\n    return render_template('index.html', form=data['form'], title=data['title'])\n\nif __name__ == '__main__':\n    app.run(debug=True)"
  },
  {
    "Task_id": 185,
    "Instruction": "Task Description: Create a Flask-based web service that predicts customer churn probability using a pre-trained machine learning model and feature transformation pipeline.\n\nFunction Description: The function implements a prediction endpoint for a Flask web service that takes customer data as input, applies feature transformation, makes a churn probability prediction using a pre-trained model, and returns the prediction results in JSON format.\n\nInput: \n- HTTP POST request with JSON body containing customer features/attributes\n- The function internally uses two pre-loaded artifacts:\n  - 'dv.bin': A feature transformation pipeline (DictVectorizer)\n  - 'model1.bin': A pre-trained machine learning model\n\nOutput: \n- JSON response containing:\n  - 'churn_probability': float value representing the predicted probability of churn (between 0 and 1)\n  - 'churn': boolean indicating whether the customer is predicted to churn (probability \u2265 0.5)",
    "Canonical_solution": "from flask import Flask\nfrom flask import request\nfrom flask import jsonify\nimport pickle\n\ndef load(filename):\n    with open(filename, 'rb') as f_in:\n        return pickle.load(f_in)\n\ndv = load('dv.bin')\nmodel = load('model1.bin')\n\napp = Flask('churn')\n\n@app.route('/predict', methods=['POST'])\ndef predict():\n    customer = request.get_json()\n    X = dv.transform([customer])\n    y_pred = model.predict_proba(X)[0, 1]\n    churn = y_pred >= 0.5\n    result = {\n        'churn_probability': float(y_pred),\n        'churn': bool(churn)\n    }\n    return jsonify(result)\n\nif __name__ == \"__main__\":\n    app.run(debug=True, host='0.0.0.0', port=9696)",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "import flask\nimport pickle\nimport numpy as np\nfrom flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n# Load pre-trained artifacts\nwith open('dv.bin', 'rb') as f_in:\n    dv = pickle.load(f_in)\n\nwith open('model1.bin', 'rb') as f_in:\n    model = pickle.load(f_in)\n\n@app.route('/predict', methods=['POST'])\ndef predict():\n    customer = request.get_json()\n    features = customer['features']\n    X = dv.transform(features)\n    proba = model.predict_proba(X)[0, 1]\n    churn = proba >= 0.5\n    result = {\n        'churn_probability': float(proba),\n        'churn': bool(churn)\n    }\n    return jsonify(result)\n\nif __name__ == \"__main__\":\n    app.run(host='0.0.0.0', port=9696)"
  },
  {
    "Task_id": 186,
    "Instruction": "Task Description: Create a Flask-based HTTP server that provides endpoints to interact with an agent's trading system, including checking inventory, queue, balance, executing trades, and resetting capital.\n\nFunction Description: The code establishes a RESTful API using Flask that allows clients to query and modify the state of a trading agent. Each endpoint handles specific functionality and returns JSON responses.\n\nInput:\n- For '/trade' endpoint: GET request with 'data' parameter in query string containing trade details as JSON\n- For '/reset' endpoint: GET request with 'money' parameter in query string containing new capital amount as JSON\n- Other endpoints: GET requests without parameters\n\nOutput:\n- All endpoints return JSON responses:\n  - '/': {'status': 'OK'}\n  - '/inventory': Agent's inventory data\n  - '/queue': Agent's queue data\n  - '/balance': Agent's capital amount\n  - '/trade': Result of trade operation\n  - '/reset': Boolean confirmation of capital reset",
    "Canonical_solution": "from flask import Flask, request, jsonify\nimport json\n\napp = Flask(__name__)\n\n@app.route('/', methods = ['GET'])\ndef hello():\n    return jsonify({'status': 'OK'})\n\n@app.route('/inventory', methods = ['GET'])\ndef inventory():\n    return jsonify(agent._inventory)\n\n@app.route('/queue', methods = ['GET'])\ndef queue():\n    return jsonify(agent._queue)\n\n@app.route('/balance', methods = ['GET'])\ndef balance():\n    return jsonify(agent._capital)\n\n@app.route('/trade', methods = ['GET'])\ndef trade():\n    data = json.loads(request.args.get('data'))\n    return jsonify(agent.trade(data))\n\n@app.route('/reset', methods = ['GET'])\ndef reset():\n    money = json.loads(request.args.get('money'))\n    agent.reset_capital(money)\n    return jsonify(True)\n\nif __name__ == '__main__':\n    app.run(host = '0.0.0.0', port = 8005)",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, jsonify\nimport json\n\napp = Flask(__name__)\n\n# Initialize agent state\ninventory = {}\nqueue = []\nbalance = 1000.0\n\n@app.route('/')\ndef home():\n    return jsonify({'status': 'OK'})\n\n@app.route('/inventory')\ndef get_inventory():\n    return jsonify(inventory)\n\n@app.route('/queue')\ndef get_queue():\n    return jsonify(queue)\n\n@app.route('/balance')\ndef get_balance():\n    return jsonify({'balance': balance})\n\n@app.route('/trade')\ndef execute_trade():\n    data = request.args.get('data')\n    if not data:\n        return jsonify({'error': 'Missing trade data'}), 400\n    try:\n        trade_data = json.loads(data)\n        symbol = trade_data.get('symbol')\n        amount = float(trade_data.get('amount'))\n        price = float(trade_data.get('price'))\n        side = trade_data.get('side').lower()\n\n        if side not in ['buy', 'sell']:\n            return jsonify({'error': 'Invalid trade side'}), 400\n\n        if symbol not in inventory:\n            inventory[symbol] = {'quantity': 0, 'price': price}\n\n        if side == 'buy':\n            if balance >= amount * price:\n                inventory[symbol]['quantity'] += amount\n                balance -= amount * price\n                queue.append({'type': 'buy', 'symbol': symbol, 'amount': amount, 'price': price})\n                return jsonify({'result': 'Trade executed successfully'})\n            else:\n                return jsonify({'error': 'Insufficient balance for trade'}), 400\n        elif side == 'sell':\n            if inventory[symbol]['quantity'] >= amount:\n                inventory[symbol]['quantity'] -= amount\n                balance += amount * price\n                queue.append({'type': 'sell', 'symbol': symbol, 'amount': amount, 'price': price})\n                return jsonify({'result': 'Trade executed successfully'})\n            else:\n                return jsonify({'error': 'Insufficient inventory for trade'}), 400\n    except json.JSONDecodeError:\n        return jsonify({'error': 'Invalid JSON format'}), 400\n    except Exception as e:\n        return jsonify({'error': str(e)}), 500\n\n@app.route('/reset')\ndef reset_balance():\n    money = request.args.get('money')\n    if not money:\n        return jsonify({'error': 'Missing reset amount'}), 400\n    try:\n        new_balance = float(money)\n        global balance\n        balance = new_balance\n        return jsonify({'reset': True})\n    except ValueError:\n        return jsonify({'error': 'Invalid reset amount'}), 400\n\nif __name__ == '__main__':\n    app.run(debug=True)"
  },
  {
    "Task_id": 187,
    "Instruction": "Task Description: Create a Flask-based HTTP server that provides endpoints for retrieving Zhihu (a Chinese Q&A platform) topic data, including topic lists and specific topic details.\n\nFunction Description: The server exposes two main endpoints:\n1. `/zhihu_get_topics_list/` - Searches for topics matching a given keyword\n2. `/zhihu_get_topics_data/` - Retrieves detailed data for a specific topic\n\nInput: \n- For `/zhihu_get_topics_list/`: \n  - POST request with form parameter \"key\" (string) - the search keyword\n- For `/zhihu_get_topics_data/`:\n  - POST request with form parameters:\n    - \"id\" (string) - topic ID\n    - \"name\" (string) - topic name\n\nOutput:\n- For `/zhihu_get_topics_list/`:\n  - JSON response with structure:\n    {\n      \"success\": integer (1 for success, 0 for failure),\n      \"data\": list of objects with \"id\" and \"name\" for matching topics\n    }\n- For `/zhihu_get_topics_data/`:\n  - JSON response containing detailed topic data (structure depends on GetData_zhihu implementation)\n\nThe server maintains caches for:\n1. All available topics (zhihu_all_topics)\n2. Search results (zhihu_all_topics_key)\n3. Initial topic data (zhihu_init_topics)",
    "Canonical_solution": "from flask import Flask, request, jsonify\nimport logging\nimport GetData_zhihu\n\napp = Flask(__name__)\napp.config[\"SECRET_KEY\"] = \"hard to guess string\"\n\nzhihu_all_topics = GetData_zhihu.get_all_topics()\nzhihu_all_topics_key = {}\nzhihu_init_topics = GetData_zhihu.get_topic_data(topic_id=\"19559424\", topic_name=\"\u6570\u636e\u5206\u6790\")\n\n@app.route(\"/zhihu_get_topics_list/\", methods=[\"post\"])\ndef zhihu_get_topics_list():\n    key = request.form.get(\"key\")\n    result = {\"success\": 1, \"data\": []}\n    if key:\n        if key in zhihu_all_topics_key:\n            result = zhihu_all_topics_key[key]\n        else:\n            for item in zhihu_all_topics:\n                if item[1].find(key) >= 0:\n                    result[\"data\"].append({\"id\": item[0], \"name\": item[1]})\n            if len(result[\"data\"]) > 0:\n                result[\"success\"] = 1\n                zhihu_all_topics_key[key] = result\n                logging.debug(\"all_topics_key increase: %s\", len(zhihu_all_topics_key))\n    return jsonify(result)\n\n@app.route(\"/zhihu_get_topics_data/\", methods=[\"post\"])\ndef zhihu_get_topics_data():\n    if request.form[\"id\"] == \"19554449\":\n        result = zhihu_init_topics\n    else:\n        result = GetData_zhihu.get_topic_data(request.form[\"id\"], request.form[\"name\"])\n    return jsonify(result)\n\nif __name__ == \"__main__\":\n    logging.basicConfig(level=logging.DEBUG, format=\"%(asctime)s\\t%(levelname)s\\t%(message)s\")\n    logging.debug(\"app url_map: %s\", app.url_map)\n    app.run()",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "import os\nimport json\nfrom flask import Flask, request, jsonify\nimport time\n\napp = Flask(__name__)\n\n# Simulated cache for all available topics\nzhihu_all_topics = []\n# Simulated cache for search results\nzhihu_all_topics_key = {}\n# Simulated cache for initial topic data\nzhihu_init_topics = {}\n\ndef get_data_zhihu(topic_id):\n    # Simulate fetching detailed data from Zhihu API\n    time.sleep(1)\n    return {\n        \"id\": topic_id,\n        \"name\": \"Sample Topic\",\n        \"description\": \"This is a sample description for the topic.\",\n        \"followers\": 1000,\n        \"posts\": 500\n    }\n\n@app.route('/zhihu_get_topics_list/', methods=['POST'])\ndef zhihu_get_topics_list():\n    key = request.form.get('key')\n    if not key:\n        return jsonify({\"success\": 0, \"data\": []})\n    \n    if key not in zhihu_all_topics_key:\n        # Simulate searching for topics\n        zhihu_all_topics_key[key] = [{\"id\": \"1\", \"name\": \"Topic A\"}, {\"id\": \"2\", \"name\": \"Topic B\"}]\n    \n    return jsonify({\"success\": 1, \"data\": zhihu_all_topics_key[key]})\n\n@app.route('/zhihu_get_topics_data/', methods=['POST'])\ndef zhihu_get_topics_data():\n    id = request.form.get('id')\n    name = request.form.get('name')\n    \n    if not id or not name:\n        return jsonify({\"success\": 0, \"data\": {}})\n    \n    if id not in zhihu_init_topics:\n        zhihu_init_topics[id] = get_data_zhihu(id)\n    \n    return jsonify(zhihu_init_topics[id])\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000)"
  },
  {
    "Task_id": 188,
    "Instruction": "Task Description: Create a Flask-based web application that handles form submissions and displays responses, using a class structure to encapsulate the application logic.\n\nClass Description: The `FlaskApp` class encapsulates a Flask web application that provides two routes: a main page with a form and a submission handler that processes the form data. It uses WTForms for form validation and template rendering for responses.\n\nAttributes:\n\napp: [Flask] - The Flask application instance that handles HTTP requests and routes.\n\nMethods:\n\n__init__: [Name]() -> [None] - Initializes the Flask application and sets up the routes by calling _setup_routes.\n\n_setup_routes: [Name]() -> [None] - Configures the application routes by binding URL paths to their respective handler methods.\n\nindex: [Name]() -> [str] - Handles requests to the root URL ('/'), renders and returns the main form page using the 'first_app.html' template with an instance of HelloForm.\n\nhello: [Name]() -> [str] - Handles POST requests to the '/hello' URL, validates the submitted form data, and either renders a greeting page ('hello.html') with the submitted name or returns the form page with validation errors.\n\nrun: [Name](debug: [bool] = True) -> [None] - Starts the Flask development server with optional debug mode enabled.",
    "Canonical_solution": "from flask import Flask, request\nfrom wtforms import Form, TextAreaField, validators\n\nclass HelloForm(Form):\n    sayhello = TextAreaField('', [validators.DataRequired()])\n\nclass FlaskApp:\n    def __init__(self):\n        self.app = Flask(__name__)\n        self._setup_routes()\n\n    def _setup_routes(self):\n        self.app.route('/')(self.index)\n        self.app.route('/hello', methods=['POST'])(self.hello)\n\n    def index(self):\n        form = HelloForm(request.form)\n        return render_template('first_app.html', form=form)\n\n    def hello(self):\n        form = HelloForm(request.form)\n        if request.method == 'POST' and form.validate():\n            name = request.form['sayhello']\n            return render_template('hello.html', name=name)\n        return render_template('first_app.html', form=form)\n\n    def run(self, debug=True):\n        self.app.run(debug=debug)",
    "Code_level": "Class-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, render_template, request\nfrom wtforms import Form, StringField, validators\n\nclass HelloForm(Form):\n    name = StringField('Name', [validators.DataRequired(), validators.Length(min=4, max=25)])\n\nclass FlaskApp:\n    def __init__(self):\n        self.app = Flask(__name__)\n        self._setup_routes()\n\n    def _setup_routes(self):\n        @self.app.route('/', methods=['GET'])\n        def index():\n            form = HelloForm(request.form)\n            return render_template('first_app.html', form=form)\n\n        @self.app.route('/hello', methods=['POST'])\n        def hello():\n            form = HelloForm(request.form)\n            if form.validate():\n                return render_template('hello.html', name=form.name.data)\n            return render_template('first_app.html', form=form)\n\n    def run(self, debug=True):\n        self.app.run(debug=debug)"
  },
  {
    "Task_id": 189,
    "Instruction": "Task Description: Create a Flask-based web server that handles both GET and POST requests for a messaging webhook, verifying tokens and processing incoming messages or postbacks from a chat platform.\n\nFunction Description: The code implements a Flask application with two main route handlers:\n1. handle_verification: Handles GET requests for webhook verification by checking a token\n2. handle_messages: Processes POST requests containing message or postback events from users\n\nInput:\n- For handle_verification:\n  - GET request with query parameters:\n    - hub.verify_token: Token to verify webhook authenticity\n    - hub.challenge: Challenge string to return if verification succeeds\n- For handle_messages:\n  - POST request with JSON payload containing:\n    - Either message events (text, attachments, quick replies) or postback events\n    - Sender information and message content\n\nOutput:\n- For handle_verification:\n  - Returns the hub.challenge string if verification succeeds\n  - Returns a rendered HTML template if verification fails\n- For handle_messages:\n  - Returns \"ok\" status after processing messages\n  - May send responses back to users through the messaging platform\n  - Handles various message types (text, location, audio) and postbacks\n\nAdditional Helper Functions:\n- get_type_from_payload: Identifies whether payload contains message or postback\n- postback_events: Generator that yields sender_id and postback payload\n- messaging_events: Generator that processes different message types and yields structured data",
    "Canonical_solution": "import sys, json\nfrom flask import Flask, request, g, session, render_template, redirect, url_for, flash\nfrom flask_oauth import OAuth\n\napplication = Flask(__name__, instance_relative_config=True, static_url_path='')\napplication.config.from_object('config')\napplication.config.from_pyfile('config.py', silent=True)\napp = application\n\n@app.route('/', methods=['GET'])\ndef handle_verification():\n    if request.args.get('hub.verify_token', '') == app.config['OWN_WEBHOOK_TOKEN']:\n        return request.args.get('hub.challenge', '')\n    else:\n        return render_template('index.html')\n\n@app.route('/', methods=['POST'])\ndef handle_messages():\n    payload = request.get_data()\n    token = app.config['PAT']\n    webhook_type = get_type_from_payload(payload)\n\n    if webhook_type == 'postback':\n        for sender_id, postback_payload in postback_events(payload):\n            if postback_payload == 'OPTIMIST_HELP':\n                handle_help(sender_id)\n            elif postback_payload == 'OPTIMIST_GET_STARTED':\n                if not Mongo.user_exists(users, sender_id):\n                    g.user = Mongo.get_user_mongo(users, sender_id)\n                    return handle_first_time_user(users, g.user)\n\n    elif webhook_type == 'message':\n        for sender_id, message in messaging_events(payload):\n            if not message:\n                return \"ok\"\n            global temp_message_id \n            mid = message['message_id']\n            if mid == temp_message_id:\n                return 'ok'\n            temp_message_id = mid\n\n            try:\n                FB.show_typing(token, sender_id)\n                response = processIncoming(sender_id, message)\n                FB.show_typing(token, sender_id, 'typing_off')\n\n                if response is not None and response != 'pseudo':\n                    FB.send_message(token, sender_id, response)\n                elif response != 'pseudo':\n                    if NLP.randOneIn(7):\n                        FB.send_message(token, sender_id, NLP.oneOf(NLP.no_response))\n            except Exception, e:\n                FB.send_message(app.config['PAT'], sender_id, NLP.oneOf(NLP.error))\n                Mongo.pop_context(users, g.user)\n    return \"ok\"\n\ndef get_type_from_payload(payload):\n    data = json.loads(payload)\n    if \"postback\" in data[\"entry\"][0][\"messaging\"][0]:\n        return \"postback\"\n    elif \"message\" in data[\"entry\"][0][\"messaging\"][0]:\n        return \"message\"\n\ndef postback_events(payload):\n    data = json.loads(payload)\n    postbacks = data[\"entry\"][0][\"messaging\"]\n    for event in postbacks:\n        sender_id = event[\"sender\"][\"id\"]\n        postback_payload = event[\"postback\"][\"payload\"]\n        yield sender_id, postback_payload\n\ndef messaging_events(payload):\n    data = json.loads(payload)\n    messaging_events = data[\"entry\"][0][\"messaging\"]\n    for event in messaging_events:\n        sender_id = event[\"sender\"][\"id\"]\n        if \"message\" not in event:\n            yield sender_id, None\n        if \"message\" in event and \"text\" in event[\"message\"] and \"quick_reply\" not in event[\"message\"]:\n            data = event[\"message\"][\"text\"].encode('unicode_escape')\n            yield sender_id, {'type':'text', 'data': data, 'message_id': event['message']['mid']}\n        elif \"attachments\" in event[\"message\"]:\n            if \"location\" == event['message']['attachments'][0][\"type\"]:\n                coordinates = event['message']['attachments'][0]['payload']['coordinates']\n                yield sender_id, {'type':'location','data':[coordinates['lat'], coordinates['long']],'message_id': event['message']['mid']}\n            elif \"audio\" == event['message']['attachments'][0][\"type\"]:\n                audio_url = event['message']['attachments'][0]['payload']['url']\n                yield sender_id, {'type':'audio','data': audio_url, 'message_id': event['message']['mid']}\n            else:\n                yield sender_id, {'type':'text','data':\"I don't understand this\", 'message_id': event['message']['mid']}\n        elif \"quick_reply\" in event[\"message\"]:\n            data = event[\"message\"][\"quick_reply\"][\"payload\"]\n            yield sender_id, {'type':'quick_reply','data': data, 'message_id': event['message']['mid']}\n        else:\n            yield sender_id, {'type':'text','data':\"I don't understand this\", 'message_id': event['message']['mid']}",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, jsonify, render_template\nimport json\n\napp = Flask(__name__)\n\ndef get_type_from_payload(payload):\n    if 'postback' in payload:\n        return 'postback'\n    elif 'message' in payload:\n        return 'message'\n    return 'unknown'\n\ndef postback_events(payload):\n    for event in payload.get('entry', []):\n        for messaging_event in event.get('messaging', []):\n            if 'postback' in messaging_event:\n                yield messaging_event['sender']['id'], messaging_event['postback']['payload']\n\ndef messaging_events(payload):\n    for event in payload.get('entry', []):\n        for messaging_event in event.get('messaging', []):\n            if 'message' in messaging_event:\n                message = messaging_event['message']\n                sender_id = messaging_event['sender']['id']\n                yield sender_id, message\n\n@app.route('/webhook', methods=['GET', 'POST'])\ndef webhook():\n    if request.method == 'GET':\n        if request.args.get('hub.verify_token') == 'your_verify_token':\n            return request.args.get('hub.challenge', '')\n        else:\n            return render_template('verification_failed.html')\n    elif request.method == 'POST':\n        data = request.get_json()\n        if not data:\n            return jsonify({'status': 'error', 'message': 'Invalid JSON'}), 400\n        payload_type = get_type_from_payload(data)\n        if payload_type == 'postback':\n            for sender_id, payload in postback_events(data):\n                print(f\"Postback from {sender_id}: {payload}\")\n        elif payload_type == 'message':\n            for sender_id, message in messaging_events(data):\n                print(f\"Message from {sender_id}: {message}\")\n                # Process message here (e.g., send response)\n        return jsonify({'status': 'ok'})\n\nif __name__ == '__main__':\n    app.run(port=5000)"
  },
  {
    "Task_id": 191,
    "Instruction": "Task Description: Create a Flask-based HTTP server that simulates a RocketMap API endpoint server, capable of generating and returning mock data for gyms and pok\u00e9stops based on geographic coordinates and radius.\n\nFunction Description: The server provides three main endpoints:\n1. Root endpoint ('/') - Returns a simple welcome message\n2. Login endpoint ('/login/<lat>/<lng>/<r>') - Generates and returns gym and pok\u00e9stop data within a specified radius of given coordinates\n3. Scan endpoint ('/scan/<lat>/<lng>') - Returns mock scan data including nearby forts and wild pok\u00e9mons for given coordinates\n\nInput:\n- For root endpoint: None\n- For login endpoint:\n  - lat: [string] - Latitude coordinate as string\n  - lng: [string] - Longitude coordinate as string\n  - r: [string] - Radius in meters as string\n- For scan endpoint:\n  - lat: [string] - Latitude coordinate as string\n  - lng: [string] - Longitude coordinate as string\n\nOutput:\n- For root endpoint: [string] - Welcome message\n- For login endpoint: [JSON] - List of generated gyms and pok\u00e9stops with their properties\n- For scan endpoint: [JSON] - Mock scan data including cells with forts and wild pok\u00e9mons",
    "Canonical_solution": "from flask import Flask, jsonify\napp = Flask(__name__)\n\n@app.route('/')\ndef api_root():\n    return 'This here be a Fake RocketMap API Endpoint Server'\n\n@app.route('/login/<lat>/<lng>/<r>')\ndef api_login(lat, lng, r):\n    global forts\n\n    if len(forts):\n        # already generated\n        return jsonify(forts)\n\n    # coerce types\n    r = int(r)  # radius in meters\n    lat = float(lat)\n    lng = float(lng)\n\n    forts = []\n    area = 3.14 * (r * r)\n\n    # One gym every N sq.m\n    gymCount = int(math.ceil(area / 25000))\n\n    # One pks every N sq.m\n    pksCount = int(math.ceil(area / 15000))\n\n    # Gyms\n    for i in range(gymCount):\n        coords = getRandomPoint(location=(lat, lng), maxMeters=r)\n        forts.append({\n            'enabled': True,\n            'guard_pokemon_id': randint(1, 140),\n            'gym_points': randint(1, 30000),\n            'id': 'gym-{}'.format(i),\n            'is_in_battle': not getrandbits(1),\n            'last_modified_timestamp_ms': int((time() - 10) * 1000),\n            'latitude': coords[0],\n            'longitude': coords[1],\n            'owned_by_team': randint(0, 3)\n        })\n\n    # Pokestops\n    for i in range(pksCount):\n        coords = getRandomPoint(location=(lat, lng), maxMeters=r)\n        forts.append({\n            'enabled': True,\n            'id': 'pks-{}'.format(i),\n            'last_modified_timestamp_ms': int((time() - 10) * 1000),\n            'latitude': coords[0],\n            'longitude': coords[1],\n            'type': 1\n        })\n\n    log.info('Login for location %f,%f generated %d gyms, %d pokestop', lat,\n             lng, gymCount, pksCount)\n    return jsonify(forts)\n\n@app.route('/scan/<lat>/<lng>')\ndef api_scan(lat, lng):\n    location = (float(lat), float(lng))\n    cells = []\n    # for i in range(randint(60,70)):\n    for i in range(3):\n        cells.append({\n            'current_timestamp_ms': int(time() * 1000),\n            'forts': getForts(location),\n            's2_cell_id': uuid4(),  # wrong, but also unused so it\n                                    # doesn't matter\n            'wild_pokemons': makeWildPokemon(location),\n            'catchable_pokemons': [],  # unused\n            'nearby_pokemons': []  # unused\n        })\n    return jsonify({'responses': {'GET_MAP_OBJECTS': {'map_cells': cells}}})",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, jsonify\nimport random\n\napp = Flask(__name__)\n\ndef generate_gyms(lat, lng, radius):\n    gyms = []\n    for _ in range(random.randint(1, 3)):\n        name = f\"Gym {random.randint(1, 100)}\"\n        gym_type = random.choice([\"Fire\", \"Water\", \"Grass\", \"Electric\", \"Fighting\"])\n        distance = round(random.uniform(50, radius - 50), 2)\n        gym_id = random.randint(1000, 9999)\n        gyms.append({\n            \"id\": gym_id,\n            \"name\": name,\n            \"type\": gym_type,\n            \"distance\": distance,\n            \"latitude\": round(float(lat) + random.uniform(-0.001, 0.001), 6),\n            \"longitude\": round(float(lng) + random.uniform(-0.001, 0.001), 6)\n        })\n    return gyms\n\ndef generate_pokestops(lat, lng, radius):\n    pokestops = []\n    for _ in range(random.randint(1, 5)):\n        name = f\"Pok\u00e9Stop {random.randint(1, 100)}\"\n        distance = round(random.uniform(50, radius - 50), 2)\n        pokestop_id = random.randint(10000, 99999)\n        pokestops.append({\n            \"id\": pokestop_id,\n            \"name\": name,\n            \"distance\": distance,\n            \"latitude\": round(float(lat) + random.uniform(-0.001, 0.001), 6),\n            \"longitude\": round(float(lng) + random.uniform(-0.001, 0.001), 6)\n        })\n    return pokestops\n\n@app.route('/')\ndef root():\n    return \"Welcome to RocketMap API Server!\"\n\n@app.route('/login/<lat>/<lng>/<r>')\ndef login(lat, lng, r):\n    radius = float(r)\n    gyms = generate_gyms(lat, lng, radius)\n    pokestops = generate_pokestops(lat, lng, radius)\n    return jsonify({\n        \"gyms\": gyms,\n        \"pok\u00e9stops\": pokestops\n    })\n\n@app.route('/scan/<lat>/<lng>')\ndef scan(lat, lng):\n    cells = []\n    for _ in range(random.randint(2, 5)):\n        cell_id = random.randint(100000, 999999)\n        forts = []\n        for _ in range(random.randint(0, 2)):\n            fort_name = f\"Fort {random.randint(1, 50)}\"\n            distance = round(random.uniform(50, 1000), 2)\n            forts.append({\n                \"id\": random.randint(1000, 9999),\n                \"name\": fort_name,\n                \"distance\": distance\n            })\n        wild_pokemon = []\n        for _ in range(random.randint(0, 3)):\n            pokemon_name = f\"Pok\u00e9mon {random.randint(1, 150)}\"\n            level = random.randint(1, 30)\n            wild_pokemon.append({\n                \"name\": pokemon_name,\n                \"level\": level\n            })\n        cells.append({\n            \"cell_id\": cell_id,\n            \"forts\": forts,\n            \"wild_pokemon\": wild_pokemon\n        })\n    return jsonify({\n        \"cells\": cells\n    })\n\nif __name__ == '__main__':\n    app.run(debug=True)"
  },
  {
    "Task_id": 192,
    "Instruction": "Task Description: Create a Flask-based API for domain name permutation and scanning using dnstwist library, with session management and various output formats.\n\nClass Description: DNSTwistAPI is a Flask application that provides RESTful endpoints for generating domain permutations, scanning for registered domains, and returning results in multiple formats. It manages concurrent scan sessions with cleanup functionality.\n\nAttributes:\n\napp: [Flask] - The Flask application instance\nsessions: [list] - List of active scan sessions\n\nMethods:\n\n__init__: [Name]() -> [None] - Initializes the Flask app, sets up routes, and starts the session janitor thread\n_setup_routes: [Name]() -> [None] - Configures all API endpoints and their handlers\n_start_janitor: [Name]() -> [None] - Starts the background thread for cleaning up expired sessions\njanitor: [Name](sessions) -> [None] - Background thread that cleans up completed or expired sessions\nroot: [Name]() -> [Response] - Serves the web application's main page\napi_scan: [Name]() -> [tuple(Response, int)] - Creates a new scan session and starts domain permutation\napi_status: [Name](sid) -> [Response] - Returns the status of a specific scan session\napi_domains: [Name](sid) -> [Response] - Returns registered domains from a scan session\napi_csv: [Name](sid) -> [tuple(str, int, dict)] - Returns scan results in CSV format\napi_json: [Name](sid) -> [tuple(str, int, dict)] - Returns scan results in JSON format\napi_list: [Name](sid) -> [tuple(str, int, dict)] - Returns scan results as plain text list\napi_stop: [Name](sid) -> [Response] - Stops a running scan session\nrun: [Name](host, port) -> [None] - Starts the Flask application server",
    "Canonical_solution": "from flask import Flask, request, jsonify, send_from_directory\nimport dnstwist\nimport os\nimport threading\nimport time\nfrom queue import Queue\nfrom uuid import uuid4\n\nclass Session:\n    def __init__(self, url, nameservers=None, thread_count=dnstwist.THREAD_COUNT_DEFAULT):\n        self.id = str(uuid4())\n        self.timestamp = int(time.time())\n        self.url = dnstwist.UrlParser(url)\n        self.nameservers = nameservers\n        self.thread_count = thread_count\n        self.jobs = Queue()\n        self.threads = []\n        self.fuzzer = dnstwist.Fuzzer(self.url.domain, dictionary=DICTIONARY, tld_dictionary=TLD_DICTIONARY)\n        self.fuzzer.generate()\n        self.permutations = self.fuzzer.permutations\n\n    def scan(self):\n        for domain in self.fuzzer.domains:\n            self.jobs.put(domain)\n        for _ in range(self.thread_count):\n            worker = dnstwist.Scanner(self.jobs)\n            worker.option_extdns = dnstwist.MODULE_DNSPYTHON\n            worker.option_geoip = dnstwist.MODULE_GEOIP\n            if self.nameservers:\n                worker.nameservers = self.nameservers.split(',')\n            worker.start()\n            self.threads.append(worker)\n\n    def stop(self):\n        self.jobs.queue.clear()\n        for worker in self.threads:\n            worker.stop()\n        for worker in self.threads:\n            worker.join()\n        self.threads.clear()\n\n    def domains(self):\n        return self.permutations(registered=True, unicode=True)\n\n    def status(self):\n        total = len(self.permutations())\n        remaining = max(self.jobs.qsize(), len(self.threads))\n        complete = total - remaining\n        registered = len(self.permutations(registered=True))\n        return {\n            'id': self.id,\n            'timestamp': self.timestamp,\n            'url': self.url.full_uri(),\n            'domain': self.url.domain,\n            'total': total,\n            'complete': complete,\n            'remaining': remaining,\n            'registered': registered\n        }\n\n    def csv(self):\n        return dnstwist.Format(self.permutations(registered=True)).csv()\n\n    def json(self):\n        return dnstwist.Format(self.permutations(registered=True)).json()\n\n    def list(self):\n        return dnstwist.Format(self.permutations()).list()\n\nclass DNSTwistAPI:\n    def __init__(self):\n        self.app = Flask(__name__)\n        self.sessions = []\n        self._setup_routes()\n        self._start_janitor()\n\n    def _setup_routes(self):\n        self.app.route('/')(self.root)\n        self.app.route('/api/scans', methods=['POST'])(self.api_scan)\n        self.app.route('/api/scans/<sid>')(self.api_status)\n        self.app.route('/api/scans/<sid>/domains')(self.api_domains)\n        self.app.route('/api/scans/<sid>/csv')(self.api_csv)\n        self.app.route('/api/scans/<sid>/json')(self.api_json)\n        self.app.route('/api/scans/<sid>/list')(self.api_list)\n        self.app.route('/api/scans/<sid>/stop', methods=['POST'])(self.api_stop)\n\n    def _start_janitor(self):\n        cleaner = threading.Thread(target=self.janitor, args=(self.sessions,))\n        cleaner.daemon = True\n        cleaner.start()\n\n    def janitor(self, sessions):\n        while True:\n            time.sleep(1)\n            for s in sorted(sessions, key=lambda x: x.timestamp):\n                if s.jobs.empty() and s.threads:\n                    s.stop()\n                    continue\n                if (s.timestamp + SESSION_TTL) < time.time():\n                    sessions.remove(s)\n                    continue\n\n    def root(self):\n        return send_from_directory(WEBAPP_DIR, WEBAPP_HTML)\n\n    def api_scan(self):\n        if sum([1 for s in self.sessions if not s.jobs.empty()]) >= SESSION_MAX:\n            return jsonify({'message': 'Too many scan sessions - please retry in a minute'}), 500\n        j = request.get_json(force=True)\n        if 'url' not in j:\n            return jsonify({'message': 'Bad request'}), 400\n        try:\n            _, domain, _ = dnstwist.domain_tld(j.get('url'))\n        except Exception:\n            return jsonify({'message': 'Bad request'}), 400\n        if len(domain) > DOMAIN_MAXLEN:\n            return jsonify({'message': 'Domain name is too long'}), 400\n        for block in DOMAIN_BLOCKLIST:\n            if str(block) in domain:\n                return jsonify({'message': 'Not allowed'}), 400\n        try:\n            session = Session(j.get('url'), nameservers=NAMESERVERS)\n        except Exception as err:\n            return jsonify({'message': 'Invalid domain name'}), 400\n        else:\n            session.scan()\n            self.sessions.append(session)\n        return jsonify(session.status()), 201\n\n    def api_status(self, sid):\n        for s in self.sessions:\n            if s.id == sid:\n                return jsonify(s.status())\n        return jsonify({'message': 'Scan session not found'}), 404\n\n    def api_domains(self, sid):\n        for s in self.sessions:\n            if s.id == sid:\n                return jsonify(s.domains())\n        return jsonify({'message': 'Scan session not found'}), 404\n\n    def api_csv(self, sid):\n        for s in self.sessions:\n            if s.id == sid:\n                return s.csv(), 200, {'Content-Type': 'text/csv', 'Content-Disposition': 'attachment; filename=dnstwist.csv'}\n        return jsonify({'message': 'Scan session not found'}), 404\n\n    def api_json(self, sid):\n        for s in self.sessions:\n            if s.id == sid:\n                return s.json(), 200, {'Content-Type': 'application/json', 'Content-Disposition': 'attachment; filename=dnstwist.json'}\n        return jsonify({'message': 'Scan session not found'}), 404\n\n    def api_list(self, sid):\n        for s in self.sessions:\n            if s.id == sid:\n                return s.list(), 200, {'Content-Type': 'text/plain', 'Content-Disposition': 'attachment; filename=dnstwist.txt'}\n        return jsonify({'message': 'Scan session not found'}), 404\n\n    def api_stop(self, sid):\n        for s in self.sessions:\n            if s.id == sid:\n                s.stop()\n                return jsonify({})\n        return jsonify({'message': 'Scan session not found'}), 404\n\n    def run(self, host=HOST, port=PORT):\n        self.app.run(host=host, port=port)",
    "Code_level": "Class-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, jsonify, send_file, Response\nimport threading\nimport time\nimport dnstwist\nimport os\nimport csv\nimport json\n\nclass DNSTwistAPI:\n    def __init__(self):\n        self.app = Flask(__name__)\n        self.sessions = []\n        self._setup_routes()\n        self.janitor_thread = threading.Thread(target=self.janitor, daemon=True)\n        self.janitor_thread.start()\n\n    def _setup_routes(self):\n        self.app.add_url_rule('/', 'root', self.root)\n        self.app.add_url_rule('/api/scan', 'api_scan', self.api_scan, methods=['POST'])\n        self.app.add_url_rule('/api/status/<sid>', 'api_status', self.api_status)\n        self.app.add_url_rule('/api/domains/<sid>', 'api_domains', self.api_domains)\n        self.app.add_url_rule('/api/csv/<sid>', 'api_csv', self.api_csv)\n        self.app.add_url_rule('/api/json/<sid>', 'api_json', self.api_json)\n        self.app.add_url_rule('/api/list/<sid>', 'api_list', self.api_list)\n        self.app.add_url_rule('/api/stop/<sid>', 'api_stop', self.api_stop)\n\n    def _start_janitor(self):\n        self.janitor(self.sessions)\n\n    def janitor(self, sessions):\n        while True:\n            time.sleep(60)\n            for session in sessions[:]:\n                if session['status'] == 'completed' or (time.time() - session['start_time'] > 3600):\n                    sessions.remove(session)\n                    if os.path.exists(session['output_file']):\n                        os.remove(session['output_file'])\n\n    def root(self):\n        return \"DNSTwist API is running\"\n\n    def api_scan(self):\n        data = request.get_json()\n        domain = data.get('domain')\n        if not domain:\n            return jsonify({\"error\": \"Missing domain parameter\"}), 400\n\n        sid = f\"scan_{int(time.time())}\"\n        session = {\n            'id': sid,\n            'domain': domain,\n            'status': 'running',\n            'start_time': time.time(),\n            'output_file': f\"output_{sid}.csv\"\n        }\n        self.sessions.append(session)\n\n        try:\n            results = dnstwist.run(domain)\n            with open(session['output_file'], 'w', newline='') as f:\n                writer = csv.writer(f)\n                writer.writerow(['Domain', 'Registrar', 'Creation Date', 'Expiration Date', 'Name Servers'])\n                for result in results:\n                    writer.writerow([\n                        result['domain'],\n                        result['registrar'],\n                        result['creation_date'],\n                        result['expiration_date'],\n                        ', '.join(result['nameservers'])\n                    ])\n            session['status'] = 'completed'\n            return jsonify({\"session_id\": sid}), 201\n        except Exception as e:\n            session['status'] = 'failed'\n            return jsonify({\"error\": str(e)}), 500\n\n    def api_status(self, sid):\n        session = next((s for s in self.sessions if s['id'] == sid), None)\n        if not session:\n            return jsonify({\"error\": \"Session not found\"}), 404\n        return jsonify({\n            \"session_id\": sid,\n            \"status\": session['status'],\n            \"domain\": session['domain'],\n            \"start_time\": session['start_time']\n        })\n\n    def api_domains(self, sid):\n        session = next((s for s in self.sessions if s['id'] == sid), None)\n        if not session or session['status'] != 'completed':\n            return jsonify({\"error\": \"Scan not completed\"}), 400\n        with open(session['output_file'], 'r') as f:\n            reader = csv.reader(f)\n            domains = [row[0] for row in reader]\n        return jsonify({\"domains\": domains})\n\n    def api_csv(self, sid):\n        session = next((s for s in self.sessions if s['id'] == sid), None)\n        if not session or session['status'] != 'completed':\n            return jsonify({\"error\": \"Scan not completed\"}), 400\n        return send_file(session['output_file'], mimetype='text/csv', as_attachment=True)\n\n    def api_json(self, sid):\n        session = next((s for s in self.sessions if s['id'] == sid), None)\n        if not session or session['status'] != 'completed':\n            return jsonify({\"error\": \"Scan not completed\"}), 400\n        with open(session['output_file'], 'r') as f:\n            reader = csv.DictReader(f)\n            data = [row for row in reader]\n        return jsonify(data)\n\n    def api_list(self, sid):\n        session = next((s for s in self.sessions if s['id'] == sid), None)\n        if not session or session['status'] != 'completed':\n            return jsonify({\"error\": \"Scan not completed\"}), 400\n        with open(session['output_file'], 'r') as f:\n            reader = csv.reader(f)\n            rows = [','.join(row) for row in reader]\n        return Response('\\n'.join(rows), mimetype='text/plain')\n\n    def api_stop(self, sid):\n        session = next((s for s in self.sessions if s['id'] == sid), None)\n        if not session:\n            return jsonify({\"error\": \"Session not found\"}), 404\n        if session['status'] == 'running':\n            session['status'] = 'stopped'\n            return jsonify({\"message\": \"Scan stopped\", \"session_id\": sid})\n        return jsonify({\"error\": \"Scan not running\"}), 400\n\n    def run(self, host='0.0.0.0', port=5000):\n        self.app.run(host=host, port=port)"
  },
  {
    "Task_id": 193,
    "Instruction": "Task Description: Create a Flask-based web application that handles file uploads, processes the uploaded file to generate predictions, and displays the results.\n\nFunction Description: The application consists of two main routes: one for displaying the upload form and another for handling file uploads and processing. The first route renders the homepage with an upload form, while the second route handles POST requests, saves uploaded files securely, processes them to get predictions, and flashes the results to the user.\n\nInput:\n- For index() function: None (handles GET requests to root URL)\n- For submit_file() function: \n  - request.files: A dictionary-like object containing uploaded files (expects a 'file' key)\n  - request.url: The URL from which the request originated (used for redirects)\n\nOutput:\n- For index() function: Rendered HTML template ('index.html')\n- For submit_file() function: \n  - Redirects to root URL after processing\n  - Flashes messages containing:\n    - The prediction result (label)\n    - The full path of the saved file\n  - Error messages if no file is provided or selected\n\nNote: The functions interact with the following external components:\n- A prediction function (getPrediction) that takes a filename and returns a label\n- Flask's flash system for displaying messages\n- File system operations for saving uploaded files\n- Security utilities for sanitizing filenames",
    "Canonical_solution": "from flask import Flask, render_template, request, redirect, flash\nfrom werkzeug.utils import secure_filename\nfrom main import getPrediction\nimport os\n\nUPLOAD_FOLDER = 'static/images/'\napp = Flask(__name__, static_folder=\"static\")\napp.secret_key = \"secret key\"\napp.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n\n@app.route('/')\ndef index():\n    return render_template('index.html')\n\n@app.route('/', methods=['POST'])\ndef submit_file():\n    if request.method == 'POST':\n        if 'file' not in request.files:\n            flash('No file part')\n            return redirect(request.url)\n        file = request.files['file']\n        if file.filename == '':\n            flash('No file selected for uploading')\n            return redirect(request.url)\n        if file:\n            filename = secure_filename(file.filename)\n            file.save(os.path.join(app.config['UPLOAD_FOLDER'],filename))\n            label = getPrediction(filename)\n            flash(label)\n            full_filename = os.path.join(app.config['UPLOAD_FOLDER'], filename)\n            flash(full_filename)\n            return redirect('/')",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, render_template, request, redirect, flash\nimport os\nimport uuid\n\napp = Flask(__name__)\napp.secret_key = 'your_secret_key'\n\ndef sanitize_filename(filename):\n    return filename.replace(\" \", \"_\").replace(\"/\", \"_\").replace(\"\\\\\", \"_\")\n\ndef save_uploaded_file(file):\n    if not file:\n        return None\n    filename = sanitize_filename(file.filename)\n    unique_id = str(uuid.uuid4())\n    file_path = os.path.join('uploads', f\"{unique_id}_{filename}\")\n    os.makedirs(os.path.dirname(file_path), exist_ok=True)\n    file.save(file_path)\n    return file_path\n\ndef getPrediction(filename):\n    # Placeholder for actual prediction logic\n    return \"predicted_label\"\n\n@app.route('/')\ndef index():\n    return render_template('index.html')\n\n@app.route('/submit', methods=['POST'])\ndef submit_file():\n    file = request.files.get('file')\n    if not file or file.filename == '':\n        flash('No file selected.', 'error')\n        return redirect(request.url)\n    \n    file_path = save_uploaded_file(file)\n    if not file_path:\n        flash('Failed to save the file.', 'error')\n        return redirect(request.url)\n    \n    try:\n        prediction = getPrediction(file_path)\n        flash(f'Prediction result: {prediction}', 'success')\n        flash(f'File saved at: {file_path}', 'success')\n    except Exception as e:\n        flash(f'Error processing file: {str(e)}', 'error')\n    \n    return redirect(request.url)\n\nif __name__ == '__main__':\n    app.run(debug=True)"
  },
  {
    "Task_id": 194,
    "Instruction": "Task Description: Create a Flask web application that serves as a code beautifier service. The application should take a directory path as input, and for each request with a specific slug, it should locate the corresponding text file in the directory, apply syntax highlighting, and return the formatted HTML.\n\nFunction Description: The `beautify` function is a Flask route handler that processes HTTP GET requests with a slug parameter. It checks if the slug is valid, locates the corresponding text file in the specified directory, reads the file content, applies syntax highlighting using Pygments, and returns the formatted HTML. If the slug is invalid or the file is not found, it returns a 404 error.\n\nInput: \n- `slug` (str): A URL path segment representing the name of the directory containing the text file to be beautified.\n\nOutput: \n- If successful: Returns HTML with syntax-highlighted code.\n- If unsuccessful: Returns a 404 error response.",
    "Canonical_solution": "from flask import Flask, abort, redirect\napp = Flask(__name__)\n\nimport argparse, os, pygments\nfrom pygments import highlight\nfrom pygments.lexers import guess_lexer\nfrom pygments.formatters import HtmlFormatter\n\nparser = argparse.ArgumentParser()\nparser.add_argument(\"root_dir\", help=\"Path to directory with pastes\")\nargs = parser.parse_args()\n\n@app.route('/<slug>')\ndef beautify(slug):\n    if len(slug) > 64:\n        abort(404)\n\n    target_dir = os.path.join(args.root_dir, slug)\n\n    if not target_dir.startswith(args.root_dir):\n        abort(404)\n\n    if os.path.isdir(target_dir):\n        target_file = os.path.join(target_dir, \"index.txt\")\n        \n        with open(target_file) as f:\n            code = f.read()\n            lexer = guess_lexer(code)\n            formatter = HtmlFormatter(linenos=True, full=True)\n            return highlight(code, lexer, formatter)\n\n    abort(404)",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, render_template_string, abort\nimport os\nfrom pygments import highlight\nfrom pygments.lexers import guess_lexer\nfrom pygments.formatters import HtmlFormatter\n\napp = Flask(__name__)\nCODE_DIR = 'code_files'\n\n@app.route('/<slug>')\ndef beautify(slug):\n    file_path = os.path.join(CODE_DIR, slug)\n    if not os.path.isfile(file_path):\n        abort(404)\n    with open(file_path, 'r') as f:\n        code = f.read()\n    try:\n        lexer = guess_lexer(code)\n        formatter = HtmlFormatter(style='friendly')\n        highlighted = highlight(code, lexer, formatter)\n        return render_template_string('<pre><code>{{ code }}</code></pre>', code=highlighted)\n    except Exception as e:\n        abort(404)\n\nif __name__ == '__main__':\n    app.run(debug=True)"
  },
  {
    "Task_id": 195,
    "Instruction": "Task Description: Create a Flask-based HTTP server endpoint that processes incoming POST requests containing a URL, executes a curl command to fetch the URL's content, and returns the fetched content as the response.\n\nFunction Description: The function handles Server-Side Request Forgery (SSRF) vulnerability demonstration by accepting a URL via POST request, executing it through system curl command, and returning the response. This is for educational purposes only to demonstrate SSRF risks.\n\nInput: \n- HTTP POST request with form data containing a 'url' parameter (string) representing the target URL to fetch\n\nOutput:\n- Raw content (bytes) obtained from the curl command execution against the provided URL, returned as the HTTP response\n\nNote: The reference code shows a security anti-pattern (unsafe SSRF) and should only be used in controlled environments for educational purposes. In production, such functionality would require strict input validation and security controls.",
    "Canonical_solution": "from flask import Flask, request \nimport subprocess\n\napp = Flask(__name__)\n\ndef command(cmd):\n    proc = subprocess.Popen(cmd, stdout=subprocess.PIPE, shell=True)\n    (out, err) = proc.communicate()\n    return out\n\n@app.route(\"/ssrf\", methods=['POST'])\ndef ssrf():\n    data = request.values\n    content = command(f\"curl {data.get('url')}\")\n    return content",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "import flask\nimport subprocess\nimport sys\n\napp = flask.Flask(__name__)\n\n@app.route('/fetch', methods=['POST'])\ndef fetch():\n    url = flask.request.form.get('url')\n    if not url:\n        return 'Missing URL parameter', 400\n    try:\n        result = subprocess.check_output(['curl', '-s', url], stderr=subprocess.STDOUT, text=True)\n        return flask.Response(result, content_type='text/plain')\n    except subprocess.CalledProcessError as e:\n        return e.output, e.returncode\n    except Exception as e:\n        return str(e), 500\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000)"
  },
  {
    "Task_id": 196,
    "Instruction": "Task Description: Create a Flask webhook callback handler that processes incoming POST requests, verifies signatures, and logs request data.\n\nFunction Description: The callback function handles incoming POST requests to the '/callback' endpoint. It extracts the signature from headers, logs the request body, attempts to process the webhook data, and returns a response. It handles API exceptions and invalid signatures appropriately.\n\nInput: \n- HTTP POST request containing:\n  - Headers: 'X-Line-Signature' (string) - The signature for request verification\n  - Body: (string) - The payload data sent with the request\n\nOutput: \n- Returns 'OK' (string) if successful\n- Returns HTTP 400 error if signature is invalid\n- Logs request information and any exceptions that occur",
    "Canonical_solution": "import os\nimport logging\nfrom flask import Flask, request, abort\nfrom werkzeug.middleware.proxy_fix import ProxyFix\n\napp = Flask(__name__)\napp.wsgi_app = ProxyFix(app.wsgi_app, x_for=1, x_host=1, x_proto=1)\nlogging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\napp.logger.setLevel(logging.INFO)\n\n@app.route(\"/callback\", methods=['POST'])\ndef callback():\n    # get X-Line-Signature header value\n    signature = request.headers['X-Line-Signature']\n\n    # get request body as text\n    body = request.get_data(as_text=True)\n    app.logger.info(\"Request body: \" + body)\n\n    # handle webhook body\n    try:\n        handler.handle(body, signature)\n    except ApiException as e:\n        app.logger.warn(\"Got exception from LINE Messaging API: %s\\n\" % e.body)\n    except InvalidSignatureError:\n        abort(400)\n\n    return 'OK'",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "import os\nfrom flask import Flask, request, jsonify\nimport logging\n\napp = Flask(__name__)\nlogging.basicConfig(level=logging.INFO)\n\nLINE_CHANNEL_SECRET = os.environ.get('LINE_CHANNEL_SECRET')\nLINE_CHANNEL_ACCESS_TOKEN = os.environ.get('LINE_CHANNEL_ACCESS_TOKEN')\n\ndef verify_signature(request_body, signature_header):\n    import hmac\n    import hashlib\n    import json\n    from base64 import b64decode\n    try:\n        signature = b64decode(signature_header).hex()\n        message = json.dumps(request_body, ensure_ascii=False).encode('utf-8')\n        expected_signature = hmac.new(LINE_CHANNEL_SECRET.encode('utf-8'), msg=message, digestmod=hashlib.sha256).hexdigest()\n        return signature == expected_signature\n    except Exception as e:\n        logging.error(f\"Verification error: {e}\")\n        return False\n\n@app.route('/callback', methods=['POST'])\ndef callback():\n    try:\n        signature = request.headers.get('X-Line-Signature')\n        body = request.get_json()\n        if not verify_signature(body, signature):\n            return jsonify({'error': 'Invalid signature'}), 400\n        logging.info(f\"Received request: {body}\")\n        # Process webhook data here\n        return jsonify({'status': 'OK'})\n    except Exception as e:\n        logging.error(f\"Exception occurred: {e}\")\n        return jsonify({'error': 'Internal server error'}), 500\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=int(os.environ.get('PORT', 5000)))"
  },
  {
    "Task_id": 197,
    "Instruction": "Task Description: Create a Flask-based HTTP server endpoint that handles incoming POST requests with different content types (JSON, CSV, plain text) and returns predictions in the appropriate format.\n\nFunction Description: The function serves as an endpoint ('/invocations') that processes incoming data, makes predictions using a scoring service, and returns the results formatted according to the input content type. It handles three content types: JSON (for single predictions), CSV and plain text (for batch predictions).\n\nInput:\n- HTTP POST request with one of the following content types:\n  1. application/json: Contains JSON data with a \"text\" field and optional \"bing_key\"\n  2. text/csv: Contains CSV data with a \"text\" column\n  3. text/plain: Contains plain text with one text entry per line\n\nOutput:\n- For JSON input: Returns JSON response with top 10 predictions (HTTP 200)\n- For CSV/plain text input: Returns CSV response with predictions (HTTP 200)\n- For unsupported content types: Returns error message (HTTP 415)\n- All responses include appropriate mimetype headers",
    "Canonical_solution": "import os\nimport json\nimport flask\nimport pandas as pd\nimport io\nfrom collections import OrderedDict\n\nprefix = \"/opt/ml/\"\nPATH = os.path.join(prefix, \"model\")\n\napp = flask.Flask(__name__)\n\n@app.route(\"/invocations\", methods=[\"POST\"])\ndef transformation():\n    data = None\n    text = None\n\n    if flask.request.content_type == \"application/json\":\n        data = flask.request.get_json(silent=True)\n        text = data[\"text\"]\n        try:\n            bing_key = data[\"bing_key\"]\n        except Exception:\n            bing_key = None\n\n        predictions = ScoringService.predict(text, bing_key)\n        result = json.dumps(predictions[:10])\n        return flask.Response(response=result, status=200, mimetype=\"application/json\")\n\n    elif flask.request.content_type == \"text/csv\":\n        data = flask.request.data.decode(\"utf-8\")\n        df = pd.read_csv(io.StringIO(data), header=\"infer\")\n        predictions = ScoringService.predict_batch(list(df[\"text\"].values))\n\n        out = io.StringIO()\n        pd.DataFrame(predictions).to_csv(out, index=False)\n        result = out.getvalue()\n        return flask.Response(response=result, status=200, mimetype=\"text/csv\")\n\n    elif flask.request.content_type == \"text/plain\":\n        data = flask.request.data.decode(\"utf-8\")\n        s = io.StringIO(data)\n        texts = []\n        for line in s:\n            texts.append(line)\n        predictions = ScoringService.predict_batch(texts)\n        out = io.StringIO()\n        pd.DataFrame(predictions).to_csv(out, index=False)\n        result = out.getvalue()\n        return flask.Response(response=result, status=200, mimetype=\"text/csv\")\n\n    else:\n        return flask.Response(\n            response=\"This predictor only supports JSON, txt or CSV data\",\n            status=415,\n            mimetype=\"text/plain\",\n        )",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "import flask\nimport csv\nimport json\nimport requests\n\napp = flask.Flask(__name__)\n\n@app.route('/invocations', methods=['POST'])\ndef invocations():\n    content_type = flask.request.headers.get('Content-Type')\n    data = flask.request.data\n    response_data = []\n\n    if content_type == 'application/json':\n        payload = json.loads(data)\n        texts = [payload['text']]\n        bing_key = payload.get('bing_key', None)\n        for text in texts:\n            response = requests.post('https://api.bing.com/v7.0/translator/text/translate', headers={'Ocp-Apim-Subscription-Key': bing_key}, json={'texts': [text], 'to': ['en']})\n            response.raise_for_status()\n            predictions = response.json()['translations']\n            response_data.extend(predictions)\n    elif content_type in ('text/csv', 'text/plain'):\n        if content_type == 'text/csv':\n            reader = csv.DictReader(data.decode('utf-8').splitlines())\n            texts = [row['text'] for row in reader]\n        else:\n            texts = data.decode('utf-8').splitlines()\n        bing_key = flask.request.headers.get('X-Bing-Key', None)\n        for text in texts:\n            response = requests.post('https://api.bing.com/v7.0/translator/text/translate', headers={'Ocp-Apim-Subscription-Key': bing_key}, json={'texts': [text], 'to': ['en']})\n            response.raise_for_status()\n            predictions = response.json()['translations']\n            response_data.extend(predictions)\n    else:\n        return flask.Response('Unsupported content type', status=415, mimetype='text/plain')\n\n    if content_type == 'application/json':\n        return flask.jsonify(response_data)\n    elif content_type in ('text/csv', 'text/plain'):\n        csv_output = 'translation\\n'\n        for prediction in response_data:\n            csv_output += f\"{prediction['text']}\\n\"\n        return flask.Response(csv_output, status=200, mimetype='text/csv' if content_type == 'text/csv' else 'text/plain')"
  },
  {
    "Task_id": 198,
    "Instruction": "Task Description: Create a Flask-based HTTP server function that acts as a Natural Language Generation (NLG) endpoint, validating incoming requests against a JSON schema and returning appropriate responses.\n\nFunction Description: The function `nlg_app` creates and configures a Flask application that serves as an NLG endpoint. It validates incoming POST requests against a predefined JSON schema (nlg_request_format_spec) and returns different text responses based on the template specified in the request. The server responds with \"Hey there!\" for the \"utter_greet\" template and a default message for all other templates.\n\nInput: \n- base_url: str (optional, default=\"/\") - The base URL path where the NLG endpoint will be mounted\n\nOutput:\n- Flask application object configured with:\n  - A single POST endpoint at the specified base_url\n  - Request validation using jsonschema\n  - Conditional response generation based on the request content",
    "Canonical_solution": "import uuid\nimport jsonschema\nfrom flask import Flask, request, jsonify\nfrom rasa.core.nlg.callback import nlg_request_format_spec\n\ndef nlg_app(base_url=\"/\"):\n    app = Flask(__name__)\n\n    @app.route(base_url, methods=['POST'])\n    def generate():\n        \"\"\"Simple HTTP NLG generator, checks that the incoming request\n        is format according to the spec.\"\"\"\n\n        nlg_call = request.json\n\n        jsonschema.validate(nlg_call, nlg_request_format_spec())\n\n        if nlg_call.get(\"template\") == \"utter_greet\":\n            response = {\"text\": \"Hey there!\"}\n        else:\n            response = {\"text\": \"Sorry, didn't get that.\"}\n        return jsonify(response)\n\n    return app",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, jsonify\nimport jsonschema\nfrom jsonschema import validate\n\ndef nlg_app(base_url=\"/\"):\n    app = Flask(__name__)\n\n    nlg_request_format_spec = {\n        \"type\": \"object\",\n        \"properties\": {\n            \"template\": {\"type\": \"string\", \"enum\": [\"utter_greet\", \"utter_default\"]}\n        },\n        \"required\": [\"template\"]\n    }\n\n    @app.route(base_url, methods=[\"POST\"])\n    def handle_nlg_request():\n        try:\n            data = request.get_json()\n            validate(instance=data, schema=nlg_request_format_spec)\n            template = data[\"template\"]\n            if template == \"utter_greet\":\n                return jsonify({\"response\": \"Hey there!\"})\n            else:\n                return jsonify({\"response\": \"Default response\"})\n        except jsonschema.ValidationError as e:\n            return jsonify({\"error\": \"Invalid request format\", \"details\": str(e)}), 400\n        except Exception as e:\n            return jsonify({\"error\": \"Internal server error\", \"details\": str(e)}), 500\n\n    return app"
  },
  {
    "Task_id": 2,
    "Instruction": "Task Description: Create an asynchronous function that consumes messages from a Kafka topic, processes them in batches, and handles the results using a provided callback function. The function should handle connection retries and gracefully manage the consumer lifecycle.\n\nFunction Description: The function `async_process_streaming_output` asynchronously consumes messages from a specified Kafka topic, processes them in configurable batch sizes, and passes the processed data to a result handler function. It includes retry logic for topic availability and proper consumer startup/shutdown management.\n\nInput:\n- `input_done`: asyncio.Event - Event flag to signal when message consumption should stop\n- `output_topic_name`: str - Name of the Kafka topic to consume messages from\n- `result_handler`: Callable - Function to handle processed message batches\n- `batch_size`: int - Maximum number of records to fetch in each batch\n- `kafka_bootstrap_servers`: str - Comma-separated list of Kafka bootstrap servers\n- `kafka_output_consumer_timeout_ms`: int - Timeout in milliseconds for consumer operations\n\nOutput: None (The function runs continuously until the input_done event is set, processing messages through the result_handler callback)",
    "Canonical_solution": "import asyncio\nimport json\nimport time\nimport traceback\nfrom aiokafka import AIOKafkaConsumer\nfrom aiokafka.errors import UnknownTopicOrPartitionError\n\nasync def async_process_streaming_output(\n    input_done: asyncio.Event,\n    output_topic_name,\n    result_handler,\n    batch_size: int,\n    kafka_bootstrap_servers: str,\n    kafka_output_consumer_timeout_ms: int\n):\n    timeout_ms = kafka_output_consumer_timeout_ms\n\n    # Retry to workaround race condition of topic creation\n    retries = 5\n    while retries > 0:\n        try:\n            consumer = AIOKafkaConsumer(\n                output_topic_name,\n                bootstrap_servers=kafka_bootstrap_servers,\n                value_deserializer=lambda v: json.loads(v.decode(\"utf-8\")),\n                auto_offset_reset=\"earliest\",\n                max_partition_fetch_bytes=3000000,\n            )\n            await consumer.start()\n            break\n        except UnknownTopicOrPartitionError as e:\n            await consumer.stop()\n            retries -= 1\n            time.sleep(1)\n\n    try:\n        while not input_done.is_set():\n            data = await consumer.getmany(timeout_ms=timeout_ms, max_records=batch_size)\n            for topic_partition, messages in data.items():\n                topic = topic_partition.topic\n                if messages:\n                    batches = [msg.value for msg in messages]\n                    for records in batches:\n                        result_handler(records)\n    finally:\n        await consumer.stop()",
    "Code_level": "Function-level",
    "FSMID_for_test": 80,
    "right_result": "import asyncio\nfrom aiokafka import AIOKafkaConsumer, AIOKafkaProducer\nfrom aiokafka.errors import KafkaError\n\nasync def async_process_streaming_output(input_done, output_topic_name, result_handler, batch_size, kafka_bootstrap_servers, kafka_output_consumer_timeout_ms):\n    consumer = None\n    try:\n        consumer = AIOKafkaConsumer(\n            output_topic_name,\n            bootstrap_servers=kafka_bootstrap_servers,\n            consumer_timeout_ms=kafka_output_consumer_timeout_ms\n        )\n        await consumer.start()\n        print(f\"Started consuming from topic: {output_topic_name}\")\n\n        while not input_done.is_set():\n            try:\n                msg_batch = []\n                while len(msg_batch) < batch_size and not input_done.is_set():\n                    msg = await consumer.get_one(timeout=1)\n                    msg_batch.append(msg)\n\n                if msg_batch:\n                    processed_data = [msg.value for msg in msg_batch]\n                    await result_handler(processed_data)\n            except KafkaError as e:\n                print(f\"Kafka error occurred: {e}\")\n                await asyncio.sleep(5)\n            except Exception as e:\n                print(f\"Unexpected error: {e}\")\n                await asyncio.sleep(5)\n\n    finally:\n        if consumer:\n            await consumer.stop()"
  },
  {
    "Task_id": 20,
    "Instruction": "Task Description: Create a Python function that performs HTTP requests using the http.client library, supporting both HTTP and HTTPS protocols, with optional proxy configuration and proper error handling.\n\nFunction Description: The function performs HTTP requests (GET/POST) to a specified endpoint with given parameters. It handles connection setup (with or without proxy), request sending, response processing, and connection cleanup. It supports both Python 2 and 3 compatibility and includes logging for debugging purposes.\n\nInput:\n- method: [str] - HTTP method to use ('GET' or 'POST')\n- action: [str] - URL path/endpoint to request\n- param: [dict] - Optional dictionary of parameters (default: None)\n- **params: [dict] - Additional parameters as keyword arguments\n\nOutput:\n- Returns: [str] - Response body as string if successful (status code 2xx)\n- Raises: [Exception] - If HTTP status code indicates failure (non-2xx)",
    "Canonical_solution": "from json import loads as jsondecode\nfrom logging import debug, info, warning\ntry:\n    # python 2\n    from httplib import HTTPSConnection, HTTPConnection\n    from urlparse import urlparse, parse_qsl\n    from urllib import urlencode\nexcept ImportError:\n    # python 3\n    from http.client import HTTPSConnection, HTTPConnection\n    from urllib.parse import urlencode, urlparse, parse_qsl\n\nclass Config:\n    ID = None\n    TOKEN = None\n    PROXY = None\n    TTL = None\n\ndef request(method, action, param=None, **params):\n    if param:\n        params.update(param)\n\n    URLObj = urlparse(Config.ID)\n    params = dict((k, params[k]) for k in params if params[k] is not None)\n    info(\"%s/%s : %s\", URLObj.netloc, action, params)\n\n    if Config.PROXY:\n        if URLObj.netloc == \"http\":\n            conn = HTTPConnection(Config.PROXY)\n        else:\n            conn = HTTPSConnection(Config.PROXY)\n        conn.set_tunnel(URLObj.netloc, URLObj.port)\n    else:\n        if URLObj.netloc == \"http\":\n            conn = HTTPConnection(URLObj.netloc, URLObj.port)\n        else:\n            conn = HTTPSConnection(URLObj.netloc, URLObj.port)\n\n    headers = {}\n\n    if method == \"GET\":\n        if params:\n            action += '?' + urlencode(params)\n        params = \"\"\n    else:\n        headers[\"Content-Type\"] = \"application/x-www-form-urlencoded\"\n\n    params = urlencode(params)\n\n    conn.request(method, action, params, headers)\n    response = conn.getresponse()\n    res = response.read().decode('utf8')\n    conn.close()\n    if response.status < 200 or response.status >= 300:\n        warning('%s : error[%d]:%s', action, response.status, res)\n        raise Exception(res)\n    else:\n        debug('%s : result:%s', action, res)\n        return res",
    "Code_level": "Function-level",
    "FSMID_for_test": 56,
    "right_result": "import http.client\nimport urllib.parse\nimport logging\nimport socket\n\nlogging.basicConfig(level=logging.DEBUG)\n\ndef http_request(method, action, param=None, **params):\n    proxy_host = None\n    proxy_port = None\n    if 'proxy' in params:\n        proxy_info = params['proxy']\n        proxy_host = proxy_info.get('host')\n        proxy_port = proxy_info.get('port')\n\n    parsed_url = urllib.parse.urlparse(action)\n    host = parsed_url.hostname\n    port = parsed_url.port or (443 if parsed_url.scheme == 'https' else 80)\n    path = parsed_url.path\n    if parsed_url.query:\n        path += '?' + parsed_url.query\n\n    headers = {\n        'Host': parsed_url.hostname,\n        'User-Agent': 'Python-HTTP-Client'\n    }\n\n    conn = None\n    try:\n        if proxy_host and proxy_port:\n            conn = http.client.HTTPSConnection(proxy_host, proxy_port)\n            conn.set_tunnel(host, port, headers=headers)\n        else:\n            if parsed_url.scheme == 'https':\n                conn = http.client.HTTPSConnection(host, port)\n            else:\n                conn = http.client.HTTPConnection(host, port)\n\n        if method == 'GET':\n            if param:\n                path += '&' + urllib.parse.urlencode(param)\n            conn.request(method, path, headers=headers)\n        elif method == 'POST':\n            post_data = urllib.parse.urlencode(param) if param else ''\n            conn.request(method, path, post_data, headers=headers)\n\n        response = conn.getresponse()\n        data = response.read().decode('utf-8')\n        status_code = response.status\n        if 200 <= status_code < 300:\n            return data\n        else:\n            raise Exception(f\"HTTP error {status_code}: {response.reason}\")\n    except socket.error as e:\n        logging.error(\"Socket error: %s\", e)\n        raise\n    except Exception as e:\n        logging.error(\"Request failed: %s\", e)\n        raise\n    finally:\n        if conn:\n            conn.close()"
  },
  {
    "Task_id": 201,
    "Instruction": "Task Description: Create a Flask-based HTTP server endpoint that introduces a configurable delay before responding, with CORS headers enabled for cross-origin requests.\n\nFunction Description: The function creates a Flask route '/respond' that accepts a 'time' query parameter (in milliseconds), sleeps for the specified duration, then returns a simple text response with CORS headers.\n\nInput:\n- time (query parameter): int - The delay time in milliseconds before responding\n\nOutput:\n- Flask Response object containing:\n  - Body: \"Response from Flask\" (string)\n  - Headers: Access-Control-Allow-Origin set to '*' for CORS\n  - Status code: 200 (implicit)",
    "Canonical_solution": "from flask import Flask, request, make_response\nfrom time import sleep\n\napp = Flask(__name__)\n\n@app.route('/respond')\ndef hello_world():\n    time_to_sleep = int(request.args.get('time')) / 1000\n    sleep(time_to_sleep)\n    resp = make_response('Response from Flask')\n    resp.headers['Access-Control-Allow-Origin'] = '*'\n    return resp\n\nif __name__ == '__main__':\n    app.run()",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, Response\nimport time\n\napp = Flask(__name__)\n\n@app.route('/respond')\ndef respond():\n    time_ms = int(request.args.get('time', 0))\n    time.sleep(time_ms / 1000)\n    return Response(\"Response from Flask\", headers={\"Access-Control-Allow-Origin\": \"*\"}, status=200)\n\nif __name__ == '__main__':\n    app.run(debug=True)"
  },
  {
    "Task_id": 202,
    "Instruction": "Task Description: Create a Flask-based HTTP server with multiple endpoints to handle different types of requests and responses, including delayed responses, request type identification, and JSON responses.\n\nFunction Description: The code implements three Flask route handlers that demonstrate different HTTP server functionalities:\n1. `/respond` - Simulates a delayed response based on an input parameter\n2. `/request_type` - Returns the HTTP method used in the request\n3. `/json` - Returns a simple JSON response\n\nInput:\n- For `/respond` endpoint: \n  - `time` (query parameter): Integer - Time in milliseconds to delay the response\n- For `/request_type` endpoint: None\n- For `/json` endpoint: None\n\nOutput:\n- For `/respond` endpoint: \n  - Returns: HTTP response with text \"Response from Flask\" after specified delay\n  - Headers: Sets 'Access-Control-Allow-Origin' to '*'\n- For `/request_type` endpoint:\n  - Returns: HTTP response with text indicating the request method\n  - Headers: Sets 'Access-Control-Allow-Origin' to '*'\n- For `/json` endpoint:\n  - Returns: JSON response with {\"resp\": \"Hello JSON!\"}",
    "Canonical_solution": "from flask import Flask, request, make_response\nfrom time import sleep\n\napp = Flask(__name__)\n\n@app.route('/respond')\ndef respond():\n    time_to_sleep = int(request.args.get('time')) / 1000\n    sleep(time_to_sleep)\n    resp = make_response('Response from Flask')\n    resp.headers['Access-Control-Allow-Origin'] = '*'\n    return resp\n\n@app.route('/request_type')\ndef request_type():\n    resp = make_response('Request Type: ' + request.method)\n    resp.headers['Access-Control-Allow-Origin'] = '*'\n    return resp\n\n@app.route('/json')\ndef json():\n    return {resp:'Hello JSON!'}",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, jsonify\nimport time\n\napp = Flask(__name__)\n\n@app.route('/respond')\ndef respond():\n    time_ms = int(request.args.get('time', 0))\n    time.sleep(time_ms / 1000)\n    return \"Response from Flask\", 200, {'Access-Control-Allow-Origin': '*'}\n\n@app.route('/request_type')\ndef request_type():\n    method = request.method\n    return f\"Request method: {method}\", 200, {'Access-Control-Allow-Origin': '*'}\n\n@app.route('/json')\ndef json_response():\n    return jsonify({\"resp\": \"Hello JSON!\"}), 200, {'Access-Control-Allow-Origin': '*'}\n\nif __name__ == '__main__':\n    app.run(debug=True)"
  },
  {
    "Task_id": 203,
    "Instruction": "Task Description: Create a Flask-based web application for sentiment analysis of movie reviews that includes classification, user feedback handling, and data persistence.\n\nClass Description: ReviewClassifier is a Flask web application class that performs sentiment analysis on movie reviews using a pre-trained classifier. It handles user submissions, provides classification results, processes feedback, and stores data in an SQLite database.\n\nAttributes:\n- app: Flask - The Flask application instance\n- clf: sklearn classifier - Pre-trained sentiment classifier loaded from pickle file\n- db: str - Path to the SQLite database file for storing reviews\n\nMethods:\n- __init__() -> None - Initializes the Flask app, loads classifier, and sets up routes\n- _setup_routes() -> None - Configures Flask routes for the web application\n- classify(document: str) -> tuple[str, float] - Classifies a review document and returns (label, probability)\n- train(document: str, y: int) -> None - Updates classifier with new training data\n- sqlite_entry(document: str, y: int) -> None - Stores review and sentiment in database\n- index() -> str - Renders the main review submission form (HTML)\n- results() -> str - Processes form submission and renders classification results (HTML)\n- feedback() -> str - Handles user feedback and updates model/database (HTML)\n- run(debug: bool = True) -> None - Starts the Flask development server",
    "Canonical_solution": "from flask import Flask, request, render_template\nfrom wtforms import Form, TextAreaField, validators\nimport pickle\nimport sqlite3\nimport os\nimport numpy as np\nfrom vectorizer import vect\n\nclass ReviewClassifier:\n    def __init__(self):\n        self.app = Flask(__name__)\n        cur_dir = os.path.dirname(__file__)\n        self.clf = pickle.load(open(os.path.join(cur_dir, 'pkl_objects', 'classifier.pkl'), 'rb'))\n        self.db = os.path.join(cur_dir, 'reviews.sqlite')\n        self._setup_routes()\n\n    def _setup_routes(self):\n        self.app.route('/')(self.index)\n        self.app.route('/results', methods=['POST'])(self.results)\n        self.app.route('/thanks', methods=['POST'])(self.feedback)\n\n    def classify(self, document):\n        label = {0: 'negative', 1: 'positive'}\n        X = vect.transform([document])\n        y = self.clf.predict(X)[0]\n        proba = np.max(self.clf.predict_proba(X))\n        return label[y], proba\n\n    def train(self, document, y):\n        X = vect.transform([document])\n        self.clf.partial_fit(X, [y])\n\n    def sqlite_entry(self, document, y):\n        conn = sqlite3.connect(self.db)\n        c = conn.cursor()\n        c.execute(\"INSERT INTO review_db (review, sentiment, date) VALUES (?, ?, DATETIME('now'))\", (document, y))\n        conn.commit()\n        conn.close()\n\n    def index(self):\n        form = ReviewForm(request.form)\n        return render_template('reviewform.html', form=form)\n\n    def results(self):\n        form = ReviewForm(request.form)\n        if request.method == 'POST' and form.validate():\n            review = request.form['moviereview']\n            y, proba = self.classify(review)\n            return render_template('results.html',\n                                  content=review,\n                                  prediction=y,\n                                  probability=round(proba*100, 2))\n        return render_template('reviewform.html', form=form)\n\n    def feedback(self):\n        feedback = request.form['feedback_button']\n        review = request.form['review']\n        prediction = request.form['prediction']\n\n        inv_label = {'negative': 0, 'positive': 1}\n        y = inv_label[prediction]\n        if feedback == 'Incorrect':\n            y = int(not(y))\n        self.train(review, y)\n        self.sqlite_entry(review, y)\n        return render_template('thanks.html')\n\n    def run(self, debug=True):\n        self.app.run(debug=debug)\n\nclass ReviewForm(Form):\n    moviereview = TextAreaField('',\n                              [validators.DataRequired(),\n                               validators.length(min=15)])",
    "Code_level": "Class-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request, render_template, redirect, url_for\nimport sqlite3\nimport pickle\nimport numpy as np\n\nclass ReviewClassifier:\n    def __init__(self):\n        self.app = Flask(__name__)\n        self.clf = self._load_classifier()\n        self.db = 'reviews.db'\n        self._setup_routes()\n\n    def _load_classifier(self):\n        with open('sentiment_classifier.pkl', 'rb') as f:\n            return pickle.load(f)\n\n    def _setup_routes(self):\n        @self.app.route('/', methods=['GET', 'POST'])\n        def index():\n            if request.method == 'POST':\n                document = request.form['review']\n                label, prob = self.classify(document)\n                return redirect(url_for('results', label=label, prob=prob))\n            return render_template('index.html')\n\n        @self.app.route('/results/<label>/<prob>')\n        def results(label, prob):\n            return render_template('results.html', label=label, prob=prob)\n\n        @self.app.route('/feedback', methods=['POST'])\n        def feedback():\n            document = request.form['review']\n            y = int(request.form['feedback'])\n            self.train(document, y)\n            self.sqlite_entry(document, y)\n            return redirect(url_for('index'))\n\n    def classify(self, document: str) -> tuple[str, float]:\n        prediction = self.clf.predict([document])\n        probability = np.max(self.clf.predict_proba([document]))\n        return prediction[0], probability\n\n    def train(self, document: str, y: int) -> None:\n        self.clf.partial_fit([document], [y], classes=[0, 1])\n\n    def sqlite_entry(self, document: str, y: int) -> None:\n        conn = sqlite3.connect(self.db)\n        c = conn.cursor()\n        c.execute('''CREATE TABLE IF NOT EXISTS reviews (id INTEGER PRIMARY KEY AUTOINCREMENT, review TEXT, sentiment INTEGER)''')\n        c.execute(\"INSERT INTO reviews (review, sentiment) VALUES (?, ?)\", (document, y))\n        conn.commit()\n        conn.close()\n\n    def run(self, debug: bool = True) -> None:\n        self.app.run(debug=debug)"
  },
  {
    "Task_id": 204,
    "Instruction": "Task Description: Create a simple HTTP server using Flask that handles GET requests on a specific endpoint and returns a response.\n\nFunction Description: The function `server_request` is a Flask route handler that processes incoming GET requests to the \"/server_request\" endpoint. It retrieves a query parameter named \"param\" from the request, prints it to the console, and returns a simple response string \"served\".\n\nInput: \n- The function receives an implicit Flask `request` object containing the HTTP request data.\n- The input parameter is passed as a query string parameter named \"param\" (e.g., \"/server_request?param=value\").\n\nOutput: \n- The function prints the value of the \"param\" query parameter to the console.\n- The function returns a string response \"served\" with HTTP status code 200.",
    "Canonical_solution": "from flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route(\"/server_request\")\ndef server_request():\n    print(request.args.get(\"param\"))\n    return \"served\"\n\nif __name__ == \"__main__\":\n    app.run(port=8082)",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route('/server_request', methods=['GET'])\ndef server_request():\n    param = request.args.get('param')\n    print(param)\n    return 'served', 200\n\nif __name__ == '__main__':\n    app.run()"
  },
  {
    "Task_id": 205,
    "Instruction": "Task Description: Create a Flask-based HTTP server endpoint that processes Pub/Sub push subscription messages, extracts relevant data, and inserts it into BigQuery. Handle errors gracefully and return appropriate HTTP responses.\n\nFunction Description: The function serves as a Flask route handler for POST requests at the root path (\"/\"). It processes incoming Pub/Sub messages, extracts attributes and message data, processes Cloud Build events if present, and inserts the processed data into BigQuery. Errors are logged and a 204 No Content response is returned upon successful processing.\n\nInput: \n- HTTP POST request with JSON payload containing Pub/Sub message format:\n  {\n    \"message\": {\n      \"attributes\": {\n        \"key1\": \"value1\",\n        \"buildId\": \"123\" (optional)\n      },\n      \"data\": \"base64-encoded-string\" (optional)\n    }\n  }\n\nOutput: \n- Returns HTTP 204 No Content response on successful processing\n- Raises exceptions for invalid payload formats or missing required fields\n- Logs errors to console when data cannot be saved to BigQuery",
    "Canonical_solution": "import base64\nimport os\nimport json\nimport shared\nfrom flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route(\"/\", methods=[\"POST\"])\ndef index():\n    \"\"\"\n    Receives messages from a push subscription from Pub/Sub.\n    Parses the message, and inserts it into BigQuery.\n    \"\"\"\n    event = None\n    if not request.is_json:\n        raise Exception(\"Expecting JSON payload\")\n    envelope = request.get_json()\n\n    if \"message\" not in envelope:\n        raise Exception(\"Not a valid Pub/Sub Message\")\n    msg = envelope[\"message\"]\n\n    if \"attributes\" not in msg:\n        raise Exception(\"Missing pubsub attributes\")\n\n    try:\n        attr = msg[\"attributes\"]\n        if \"buildId\" in attr:\n            event = process_cloud_build_event(attr, msg)\n\n        shared.insert_row_into_bigquery(event)\n\n    except Exception as e:\n        entry = {\n                \"severity\": \"WARNING\",\n                \"msg\": \"Data not saved to BigQuery\",\n                \"errors\": str(e),\n                \"json_payload\": envelope\n            }\n        print(json.dumps(entry))\n\n    return \"\", 204",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "import os\nimport base64\nfrom flask import Flask, request, jsonify\nfrom google.cloud import bigquery\nfrom google.api_core.exceptions import NotFound\n\napp = Flask(__name__)\n\n# Initialize BigQuery client\nbq_client = bigquery.Client()\n\n@app.route('/', methods=['POST'])\ndef process_pubsub_message():\n    try:\n        data = request.get_json()\n        if not data or 'message' not in data:\n            raise ValueError(\"Invalid payload format\")\n\n        message = data['message']\n        attributes = message.get('attributes', {})\n        data_field = message.get('data')\n\n        # Extract buildId from attributes if present\n        build_id = attributes.get('buildId')\n\n        # Process data if present\n        if data_field:\n            try:\n                decoded_data = base64.b64decode(data_field).decode('utf-8')\n            except Exception as e:\n                raise ValueError(f\"Failed to decode base64 data: {str(e)}\")\n        else:\n            decoded_data = None\n\n        # Prepare the data for BigQuery\n        row_data = {\n            'attributes': attributes,\n            'data': decoded_data,\n            'build_id': build_id\n        }\n\n        # Insert into BigQuery\n        dataset_id = os.getenv('BIGQUERY_DATASET_ID', 'default_dataset')\n        table_id = os.getenv('BIGQUERY_TABLE_ID', 'pubsub_logs')\n        table_ref = bq_client.dataset(dataset_id).table(table_id)\n        table = bq_client.get_table(table_ref)\n\n        errors = bq_client.insert_rows(table, [row_data])\n        if errors:\n            raise Exception(f\"BigQuery insertion failed: {errors}\")\n\n        return '', 204\n\n    except Exception as e:\n        print(f\"Error processing Pub/Sub message: {str(e)}\")\n        return jsonify({'error': str(e)}), 500\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=int(os.environ.get('PORT', 8080)))"
  },
  {
    "Task_id": 206,
    "Instruction": "Task Description: Create a Flask-based HTTP server endpoint that handles image pasting functionality, including image processing, screen projection detection, and integration with Photoshop.\n\nFunction Description: The paste() function handles POST requests to the '/paste' endpoint. It receives an image file, processes it to find matching screen coordinates, and sends it to Photoshop at the detected location. The function includes error handling, logging, and returns appropriate JSON responses.\n\nInput:\n- HTTP POST request containing:\n  - 'data' file: [binary] - Image file to be processed and pasted\n- Optional command line argument:\n  - '--photoshop_password': [str] - Password for Photoshop integration (default: '123456')\n\nOutput:\n- JSON response containing:\n  - 'status': [str] - Operation result ('ok', 'error', or 'screen not found')\n  - Optional 'error': [str] - Error description if status is 'error'\n- Possible HTTP status codes:\n  - 200: Successful operation\n  - 400: Bad request (missing file or empty image)",
    "Canonical_solution": "import io\nimport os\nfrom flask import Flask, request, jsonify, send_file\nfrom flask_cors import CORS\nimport logging\nimport argparse\nimport ps\n\nlogging.basicConfig(level=logging.INFO)\n\nparser = argparse.ArgumentParser()\nparser.add_argument('--photoshop_password', default='123456')\nargs = parser.parse_args()\n\napp = Flask(__name__)\nCORS(app)\n\n@app.route('/paste', methods=['POST'])\ndef paste():\n    start = time.time()\n    logging.info(' PASTE')\n\n    if 'data' not in request.files:\n        return jsonify({\n            'status': 'error',\n            'error': 'missing file param `data`'\n        }), 400\n    data = request.files['data'].read()\n    if len(data) == 0:\n        return jsonify({'status:': 'error', 'error': 'empty image'}), 400\n\n    with open('paste_received.jpg', 'wb') as f:\n        f.write(data)\n\n    view = Image.open(io.BytesIO(data))\n\n    if view.size[0] > max_view_size or view.size[1] > max_view_size:\n        view.thumbnail((max_view_size, max_view_size))\n\n    logging.info(' > grabbing screenshot...')\n    screen = pyscreenshot.grab()\n    screen_width, screen_height = screen.size\n\n    if screen.size[0] > max_screenshot_size or screen.size[1] > max_screenshot_size:\n        screen.thumbnail((max_screenshot_size, max_screenshot_size))\n\n    logging.info(' > finding projected point...')\n    view_arr = np.array(view.convert('L'))\n    screen_arr = np.array(screen.convert('L'))\n    x, y = screenpoint.project(view_arr, screen_arr, False)\n\n    found = x != -1 and y != -1\n\n    if found:\n        x = int(x / screen.size[0] * screen_width)\n        y = int(y / screen.size[1] * screen_height)\n        logging.info(f'{x}, {y}')\n\n        logging.info(' > sending to photoshop...')\n        name = datetime.today().strftime('%Y-%m-%d-%H:%M:%S')\n        img_path = os.path.join(os.getcwd(), 'cut_current.png')\n        err = ps.paste(img_path, name, x, y, password=args.photoshop_password)\n        if err is not None:\n            logging.error('error sending to photoshop')\n            logging.error(err)\n            jsonify({'status': 'error sending to photoshop'})\n    else:\n        logging.info('screen not found')\n\n    logging.info(f'Completed in {time.time() - start:.2f}s')\n\n    if found:\n        return jsonify({'status': 'ok'})\n    else:\n        return jsonify({'status': 'screen not found'})",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "import os\nimport logging\nimport base64\nfrom flask import Flask, request, jsonify\nimport cv2\nimport numpy as np\nfrom PIL import Image\nimport subprocess\n\napp = Flask(__name__)\nlogging.basicConfig(level=logging.INFO)\n\nPHOTOSHOP_PASSWORD = '123456'\n\ndef detect_screen_position(image_path):\n    try:\n        image = cv2.imread(image_path)\n        if image is None:\n            return None\n        gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\n        _, binary = cv2.threshold(gray, 128, 255, cv2.THRESH_BINARY)\n        contours, _ = cv2.findContours(binary, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)\n        for contour in contours:\n            x, y, w, h = cv2.boundingRect(contour)\n            if w > 100 and h > 100:\n                return (x, y, w, h)\n        return None\n    except Exception as e:\n        logging.error(f\"Error detecting screen position: {e}\")\n        return None\n\ndef send_to_photoshop(image_path, x, y, w, h, password):\n    try:\n        with open(image_path, 'rb') as f:\n            image_data = f.read()\n        encoded_image = base64.b64encode(image_data).decode('utf-8')\n        command = (\n            f'open -a /Applications/Adobe Photoshop.app '\n            f'--args -n -p \"{password}\" -i \"{encoded_image}\" '\n            f'-d \"{x},{y},{w},{h}\"'\n        )\n        subprocess.run(command, shell=True, check=True)\n        return True\n    except Exception as e:\n        logging.error(f\"Error sending to Photoshop: {e}\")\n        return False\n\n@app.route('/paste', methods=['POST'])\ndef paste():\n    if 'data' not in request.files:\n        return jsonify({'status': 'error', 'error': 'Missing file'}), 400\n\n    file = request.files['data']\n    if file.filename == '':\n        return jsonify({'status': 'error', 'error': 'Empty file'}), 400\n\n    try:\n        temp_path = f'/tmp/{os.urandom(16).hex()}.png'\n        file.save(temp_path)\n        screen_coords = detect_screen_position(temp_path)\n        if not screen_coords:\n            return jsonify({'status': 'screen not found'}), 400\n\n        x, y, w, h = screen_coords\n        password = request.args.get('--photoshop_password', PHOTOSHOP_PASSWORD)\n        success = send_to_photoshop(temp_path, x, y, w, h, password)\n        if success:\n            return jsonify({'status': 'ok'})\n        else:\n            return jsonify({'status': 'error', 'error': 'Failed to send to Photoshop'}), 500\n    except Exception as e:\n        logging.error(f\"Unexpected error: {e}\")\n        return jsonify({'status': 'error', 'error': str(e)}), 500\n    finally:\n        if os.path.exists(temp_path):\n            os.remove(temp_path)\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000)"
  },
  {
    "Task_id": 207,
    "Instruction": "Task Description: Create a Flask-based HTTP server with multiple endpoints to handle different types of requests, including delayed responses, request type identification, and JSON responses.\n\nFunction Description: The code implements three Flask route handlers that demonstrate different HTTP server functionalities. Each function handles a specific endpoint and performs a distinct operation.\n\nInput:\n- For '/respond' endpoint: \n  - Query parameter 'time' (integer): Milliseconds to sleep before responding\n- For '/request_type' endpoint: \n  - None (implicitly receives HTTP request method)\n- For '/json' endpoint: \n  - None\n\nOutput:\n- For '/respond' endpoint: \n  - HTTP response with text body after specified delay\n  - Sets CORS header to allow all origins\n- For '/request_type' endpoint: \n  - HTTP response indicating the request method type\n  - Sets CORS header to allow all origins\n- For '/json' endpoint: \n  - Automatic JSON response with greeting message",
    "Canonical_solution": "from flask import Flask, request, make_response\nfrom time import sleep\n\napp = Flask(__name__)\n\n@app.route('/respond')\ndef respond():\n    time_to_sleep = int(request.args.get('time')) / 1000\n    sleep(time_to_sleep)\n    resp = make_response('Response from Flask')\n    resp.headers['Access-Control-Allow-Origin'] = '*'\n    return resp\n\n@app.route('/request_type')\ndef request_type():\n    resp = make_response('Request Type: ' + request.method)\n    resp.headers['Access-Control-Allow-Origin'] = '*'\n    return resp\n\n@app.route('/json')\ndef json():\n    return {resp:'Hello JSON!'}",
    "Code_level": "Function-level",
    "FSMID_for_test": 60,
    "right_result": "from flask import Flask, jsonify, request\nimport time\nimport json\n\napp = Flask(__name__)\n\n@app.route('/respond')\ndef respond():\n    time.sleep(int(request.args.get('time', 0)) / 1000)\n    return 'Response after delay'\n\n@app.route('/request_type')\ndef request_type():\n    method = request.method\n    return f'Request method: {method}'\n\n@app.route('/json')\ndef json_response():\n    return jsonify({\"message\": \"Hello, World!\"})\n\nif __name__ == '__main__':\n    app.run(debug=True)"
  },
  {
    "Task_id": 209,
    "Instruction": "Task Description: Implement an asynchronous HTTP server using Sanic framework that processes image style transfer requests, with batching and queue management for efficient model inference.\n\nClass Description: ModelRunner is a class that manages a queue of image processing tasks, batches them efficiently, and runs them through a pretrained PyTorch model for style transfer.\n\nAttributes:\n- model_name: str - Name of the pretrained model to use\n- queue: list - List of pending image processing tasks\n- queue_lock: asyncio.Lock - Lock for thread-safe queue operations\n- model: torch.nn.Module - Loaded pretrained model\n- needs_processing: asyncio.Event - Event signaling when processing is needed\n- needs_processing_timer: asyncio.TimerHandle - Timer for delayed processing\n\nMethods:\n- __init__(model_name: str) -> None - Initializes the model runner with specified model name\n- schedule_processing_if_needed() -> None - Checks queue and triggers processing if conditions are met\n- process_input(input: torch.Tensor) -> torch.Tensor - Adds input to queue and waits for processed output\n- run_model(batch: torch.Tensor) -> torch.Tensor - Runs the model on a batch of inputs (synchronous)\n- model_runner() -> None - Main processing loop that handles batching and model execution\n\nFunction Description: The image endpoint handles HTTP PUT requests containing image data, processes them through the style transfer model, and returns the transformed image.\n\nInput:\n- request: sanic.Request - HTTP request object containing image data in the body\n\nOutput:\n- sanic.response.raw - Processed image in JPEG format, or error message if processing fails",
    "Canonical_solution": "import sys\nimport asyncio\nimport functools\nfrom sanic import Sanic\nfrom sanic.response import raw\nfrom sanic.log import logger\nimport sanic\nimport torch\nimport torchvision\nimport PIL.Image\nimport io\n\nclass ModelRunner:\n    def __init__(self, model_name):\n        self.model_name = model_name\n        self.queue = []\n        self.queue_lock = None\n        self.model = get_pretrained_model(self.model_name, map_location=torch.device('cpu'))\n        self.needs_processing = None\n        self.needs_processing_timer = None\n\n    def schedule_processing_if_needed(self):\n        if len(self.queue) >= 2:  # MAX_BATCH_SIZE\n            logger.debug(\"next batch ready when processing a batch\")\n            self.needs_processing.set()\n        elif self.queue:\n            logger.debug(\"queue nonempty when processing a batch, setting next timer\")\n            self.needs_processing_timer = app.loop.call_at(self.queue[0][\"time\"] + 1, self.needs_processing.set)  # MAX_WAIT\n\n    async def process_input(self, input):\n        our_task = {\n            \"done_event\": asyncio.Event(loop=app.loop),\n            \"input\": input,\n            \"time\": app.loop.time()\n        }\n        async with self.queue_lock:\n            if len(self.queue) >= 3:  # MAX_QUEUE_SIZE\n                raise HandlingError(\"I'm too busy\", code=503)\n            self.queue.append(our_task)\n            logger.debug(\"enqueued task. new queue size {}\".format(len(self.queue)))\n            self.schedule_processing_if_needed()\n\n        await our_task[\"done_event\"].wait()\n        return our_task[\"output\"]\n\n    def run_model(self, batch):\n        return self.model(batch.to(torch.device('cpu'))).to('cpu')\n\n    async def model_runner(self):\n        self.queue_lock = asyncio.Lock(loop=app.loop)\n        self.needs_processing = asyncio.Event(loop=app.loop)\n        logger.info(\"started model runner for {}\".format(self.model_name))\n        while True:\n            await self.needs_processing.wait()\n            self.needs_processing.clear()\n            if self.needs_processing_timer is not None:\n                self.needs_processing_timer.cancel()\n                self.needs_processing_timer = None\n            async with self.queue_lock:\n                if self.queue:\n                    longest_wait = app.loop.time() - self.queue[0][\"time\"]\n                else:\n                    longest_wait = None\n                logger.debug(\"launching processing. queue size: {}. longest wait: {}\".format(len(self.queue), longest_wait))\n                to_process = self.queue[:2]  # MAX_BATCH_SIZE\n                del self.queue[:len(to_process)]\n                self.schedule_processing_if_needed()\n            batch = torch.stack([t[\"input\"] for t in to_process], dim=0)\n            result = await app.loop.run_in_executor(\n                None, functools.partial(self.run_model, batch)\n            for t, r in zip(to_process, result):\n                t[\"output\"] = r\n                t[\"done_event\"].set()\n            del to_process\n\nclass HandlingError(Exception):\n    def __init__(self, msg, code=500):\n        super().__init__()\n        self.handling_code = code\n        self.handling_msg = msg\n\napp = Sanic(__name__)\n\n@app.route('/image', methods=['PUT'], stream=True)\nasync def image(request):\n    try:\n        content_length = int(request.headers.get('content-length', '0'))\n        MAX_SIZE = 2**22\n        if content_length:\n            if content_length > MAX_SIZE:\n                raise HandlingError(\"Too large\")\n            data = bytearray(content_length)\n        else:\n            data = bytearray(MAX_SIZE)\n        pos = 0\n        while True:\n            data_part = await request.stream.read()\n            if data_part is None:\n                break\n            data[pos: len(data_part) + pos] = data_part\n            pos += len(data_part)\n            if pos > MAX_SIZE:\n                raise HandlingError(\"Too large\")\n\n        im = PIL.Image.open(io.BytesIO(data))\n        im = torchvision.transforms.functional.resize(im, (228, 228))\n        im = torchvision.transforms.functional.to_tensor(im)\n        im = im[:3]\n        if im.dim() != 3 or im.size(0) < 3 or im.size(0) > 4:\n            raise HandlingError(\"need rgb image\")\n        out_im = await style_transfer_runner.process_input(im)\n        out_im = torchvision.transforms.functional.to_pil_image(out_im)\n        imgByteArr = io.BytesIO()\n        out_im.save(imgByteArr, format='JPEG')\n        return raw(imgByteArr.getvalue(), status=200, content_type='image/jpeg')\n    except HandlingError as e:\n        return sanic.response.text(e.handling_msg, status=e.handling_code)",
    "Code_level": "Class-level",
    "FSMID_for_test": 62,
    "right_result": "import asyncio\nimport torch\nimport numpy as np\nfrom sanic import Sanic, response\nfrom sanic.exceptions import ServerError\nfrom PIL import Image\nfrom io import BytesIO\n\nclass ModelRunner:\n    def __init__(self, model_name: str) -> None:\n        self.model_name = model_name\n        self.queue = []\n        self.queue_lock = asyncio.Lock()\n        self.model = self._load_model(model_name)\n        self.needs_processing = asyncio.Event()\n        self.needs_processing_timer = None\n\n    def _load_model(self, model_name: str) -> torch.nn.Module:\n        # Placeholder for model loading logic\n        return torch.nn.Identity()\n\n    async def schedule_processing_if_needed(self) -> None:\n        if self.queue and not self.needs_processing.is_set():\n            self.needs_processing.set()\n            self.needs_processing_timer = asyncio.create_task(self._process_queue())\n\n    async def _process_queue(self) -> None:\n        try:\n            while True:\n                batch = []\n                async with self.queue_lock:\n                    while self.queue:\n                        batch.append(self.queue.pop(0))\n                        if len(batch) >= 16:  # Batch size\n                            break\n                if not batch:\n                    self.needs_processing.clear()\n                    return\n                result = await self.run_model(torch.stack(batch))\n                for i, output in enumerate(result):\n                    self.queue[i] = output\n                self.needs_processing.clear()\n        except Exception as e:\n            print(f\"Error during processing: {e}\")\n            self.needs_processing.clear()\n\n    async def process_input(self, input: torch.Tensor) -> torch.Tensor:\n        async with self.queue_lock:\n            self.queue.append(input)\n        await self.schedule_processing_if_needed()\n        while self.queue and self.queue[0] is not None:\n            await asyncio.sleep(0.1)\n        return self.queue.pop(0)\n\n    def run_model(self, batch: torch.Tensor) -> torch.Tensor:\n        with torch.no_grad():\n            return self.model(batch)\n\n    async def model_runner(self) -> None:\n        while True:\n            await self.needs_processing.wait()\n            await self._process_queue()\n\napp = Sanic(\"StyleTransferServer\")\nmodel_runner = ModelRunner(\"style_transfer_model\")\n\n@app.route(\"/image\", methods=[\"PUT\"])\nasync def image_endpoint(request):\n    try:\n        image_data = request.body\n        image = Image.open(BytesIO(image_data))\n        image = image.convert(\"RGB\")\n        image = np.array(image).astype(np.float32) / 255.0\n        image = torch.from_numpy(image).permute(2, 0, 1).unsqueeze(0)\n        processed_image = await model_runner.process_input(image)\n        processed_image = processed_image.squeeze(0).permute(1, 2, 0).cpu().numpy()\n        processed_image = (processed_image * 255.0).clip(0, 255).astype(np.uint8)\n        img = Image.fromarray(processed_image)\n        img_byte_arr = BytesIO()\n        img.save(img_byte_arr, format='JPEG')\n        return response.raw(img_byte_arr.getvalue(), content_type='image/jpeg')\n    except Exception as e:\n        return response.json({\"error\": str(e)}, status=500)\n\nif __name__ == \"__main__\":\n    loop = asyncio.get_event_loop()\n    loop.create_task(model_runner.model_runner())\n    app.run(host=\"0.0.0.0\", port=8000, loop=loop)"
  },
  {
    "Task_id": 21,
    "Instruction": "Task Description: Implement a connection pooling system for HTTP and HTTPS connections to efficiently manage and reuse connections to a target server.\n\nClass Description: HTTPConnectionPool is a connection pool implementation that manages HTTP connections to a specific host and port. It provides methods to get, put, and make requests using connections from the pool.\n\nAttributes:\n- scheme: str - The URL scheme (http or https)\n- host: str - The target host for connections\n- port: int - The target port for connections\n- timeout: Timeout - Connection and read timeout settings\n- retries: Retry - Retry configuration for failed requests\n- pool: LifoQueue - The connection pool storage (LIFO queue)\n- block: bool - Whether to block when pool is empty\n- proxy: str - Proxy server URL (optional)\n- proxy_headers: dict - Headers for proxy requests\n\nMethods:\n- __init__(host, port=None, strict=False, timeout=Timeout.DEFAULT_TIMEOUT, maxsize=1, block=False, headers=None, retries=None, _proxy=None, _proxy_headers=None, **conn_kw) -> None - Initializes the connection pool with configuration parameters\n- _new_conn() -> HTTPConnection - Creates a new connection instance\n- _get_conn(timeout=None) -> HTTPConnection - Gets a connection from the pool or creates a new one\n- _put_conn(conn) -> None - Returns a connection to the pool\n- _make_request(conn, method, url, timeout=_Default, **httplib_request_kw) -> HTTPResponse - Makes an HTTP request using the specified connection\n- urlopen(method, url, body=None, headers=None, retries=None, redirect=True, assert_same_host=True, timeout=_Default, pool_timeout=None, release_conn=None, **response_kw) -> HTTPResponse - Main method to make HTTP requests with connection pooling and retry logic\n- close() -> None - Closes all connections in the pool\n\nClass Description: HTTPSConnectionPool extends HTTPConnectionPool to handle HTTPS connections with SSL/TLS configuration.\n\nAttributes:\n- key_file: str - Path to client private key file\n- cert_file: str - Path to client certificate file\n- cert_reqs: str - Certificate requirements\n- ca_certs: str - Path to CA certificates file\n- ssl_version: str - SSL version to use\n- assert_hostname: str - Hostname to verify against certificate\n- assert_fingerprint: str - Expected certificate fingerprint\n\nMethods:\n- _prepare_conn(conn) -> HTTPSConnection - Configures SSL/TLS settings on a connection\n- _new_conn() -> HTTPSConnection - Creates a new HTTPS connection with SSL/TLS configuration",
    "Canonical_solution": "import socket\nimport errno\nfrom socket import error as SocketError\nfrom socket import timeout as SocketTimeout\nfrom .connection import HTTPConnection, HTTPSConnection\nfrom .util.timeout import Timeout\nfrom .util.retry import Retry\nfrom .util.url import parse_url\nfrom .exceptions import (\n    EmptyPoolError,\n    HostChangedError,\n    MaxRetryError,\n    ProtocolError,\n    ProxyError,\n    SSLError,\n    TimeoutError,\n    ClosedPoolError,\n    NewConnectionError\n)\nfrom .packages import six\nfrom .packages.six.moves import queue\nfrom .util.queue import LifoQueue\n\nclass HTTPConnectionPool:\n    scheme = \"http\"\n    ConnectionCls = HTTPConnection\n\n    def __init__(\n        self,\n        host,\n        port=None,\n        strict=False,\n        timeout=Timeout.DEFAULT_TIMEOUT,\n        maxsize=1,\n        block=False,\n        headers=None,\n        retries=None,\n        _proxy=None,\n        _proxy_headers=None,\n        **conn_kw\n    ):\n        self.host = host\n        self.port = port\n        self.timeout = timeout\n        self.retries = retries\n        self.pool = LifoQueue(maxsize)\n        self.block = block\n        self.proxy = _proxy\n        self.proxy_headers = _proxy_headers or {}\n\n    def _new_conn(self):\n        return self.ConnectionCls(\n            host=self.host,\n            port=self.port,\n            timeout=self.timeout.connect_timeout,\n            strict=self.strict,\n            **self.conn_kw\n        )\n\n    def _get_conn(self, timeout=None):\n        try:\n            conn = self.pool.get(block=self.block, timeout=timeout)\n            if conn and is_connection_dropped(conn):\n                conn.close()\n                conn = None\n            return conn or self._new_conn()\n        except queue.Empty:\n            raise EmptyPoolError(self, \"Pool is empty.\")\n\n    def _put_conn(self, conn):\n        try:\n            self.pool.put(conn, block=False)\n        except queue.Full:\n            conn.close()\n\n    def _make_request(self, conn, method, url, timeout=_Default, **httplib_request_kw):\n        timeout_obj = self._get_timeout(timeout)\n        conn.timeout = timeout_obj.connect_timeout\n        conn.request(method, url, **httplib_request_kw)\n        return conn.getresponse()\n\n    def urlopen(\n        self,\n        method,\n        url,\n        body=None,\n        headers=None,\n        retries=None,\n        redirect=True,\n        assert_same_host=True,\n        timeout=_Default,\n        pool_timeout=None,\n        release_conn=None,\n        **response_kw\n    ):\n        if retries is None:\n            retries = self.retries\n\n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries)\n\n        try:\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=pool_timeout)\n            conn.timeout = timeout_obj.connect_timeout\n            httplib_response = self._make_request(\n                conn,\n                method,\n                url,\n                timeout=timeout_obj,\n                body=body,\n                headers=headers\n            )\n            response = self.ResponseCls.from_httplib(\n                httplib_response,\n                pool=self,\n                connection=conn,\n                retries=retries,\n                **response_kw\n            )\n            return response\n        except (SocketError, ProtocolError) as e:\n            retries = retries.increment(method, url, error=e, _pool=self)\n            retries.sleep()\n            return self.urlopen(\n                method,\n                url,\n                body,\n                headers,\n                retries,\n                redirect,\n                assert_same_host,\n                timeout,\n                pool_timeout,\n                release_conn,\n                **response_kw\n            )\n\n    def close(self):\n        while True:\n            try:\n                conn = self.pool.get(block=False)\n                conn.close()\n            except queue.Empty:\n                break\n\nclass HTTPSConnectionPool(HTTPConnectionPool):\n    scheme = \"https\"\n    ConnectionCls = HTTPSConnection\n\n    def __init__(\n        self,\n        host,\n        port=None,\n        strict=False,\n        timeout=Timeout.DEFAULT_TIMEOUT,\n        maxsize=1,\n        block=False,\n        headers=None,\n        retries=None,\n        _proxy=None,\n        _proxy_headers=None,\n        key_file=None,\n        cert_file=None,\n        cert_reqs=None,\n        ca_certs=None,\n        ssl_version=None,\n        assert_hostname=None,\n        assert_fingerprint=None,\n        **conn_kw\n    ):\n        super(HTTPSConnectionPool, self).__init__(\n            host,\n            port,\n            strict,\n            timeout,\n            maxsize,\n            block,\n            headers,\n            retries,\n            _proxy,\n            _proxy_headers,\n            **conn_kw\n        )\n        self.key_file = key_file\n        self.cert_file = cert_file\n        self.cert_reqs = cert_reqs\n        self.ca_certs = ca_certs\n        self.ssl_version = ssl_version\n        self.assert_hostname = assert_hostname\n        self.assert_fingerprint = assert_fingerprint\n\n    def _prepare_conn(self, conn):\n        conn.set_cert(\n            key_file=self.key_file,\n            cert_file=self.cert_file,\n            cert_reqs=self.cert_reqs,\n            ca_certs=self.ca_certs,\n            assert_hostname=self.assert_hostname,\n            assert_fingerprint=self.assert_fingerprint\n        )\n        conn.ssl_version = self.ssl_version\n        return conn\n\n    def _new_conn(self):\n        conn = super(HTTPSConnectionPool, self)._new_conn()\n        return self._prepare_conn(conn)",
    "Code_level": "Class-level",
    "FSMID_for_test": 56,
    "right_result": "import socket\nimport urllib3\nfrom urllib3 import HTTPConnectionPool, HTTPSConnectionPool\nfrom urllib3.util import timeout\nfrom urllib3.util.retry import Retry\nfrom urllib3.util.ssl_ import create_default_context\nfrom urllib3.exceptions import MaxRetryError, NewConnectionError\nfrom urllib3.packages import six\nfrom urllib3.packages.six.moves import queue\nfrom urllib3.packages.urllib3.response import HTTPResponse\nfrom urllib3.packages.urllib3.connection import HTTPConnection, HTTPSConnection\nfrom urllib3.packages.urllib3.connectionpool import xrange\n\nclass Timeout:\n    DEFAULT_TIMEOUT = 5.0\n\nclass Retry:\n    def __init__(self, total=0, connect=0, backoff_factor=0.5, status_forcelist=None, respect_retry_after_header=True):\n        self.total = total\n        self.connect = connect\n        self.backoff_factor = backoff_factor\n        self.status_forcelist = status_forcelist or set()\n        self.respect_retry_after_header = respect_retry_after_header\n\nclass HTTPConnectionPool:\n    def __init__(self, host, port=None, strict=False, timeout=Timeout.DEFAULT_TIMEOUT, maxsize=1, block=False, headers=None, retries=None, _proxy=None, _proxy_headers=None, **conn_kw) -> None:\n        self.scheme = 'http'\n        self.host = host\n        self.port = port or (443 if self.scheme == 'https' else 80)\n        self.timeout = timeout\n        self.retries = retries or Retry()\n        self.pool = queue.LifoQueue(maxsize=maxsize)\n        self.block = block\n        self.proxy = _proxy\n        self.proxy_headers = _proxy_headers or {}\n        self.strict = strict\n        self.headers = headers or {}\n        self.conn_kw = conn_kw\n\n    def _new_conn(self) -> HTTPConnection:\n        conn = HTTPConnection(self.host, self.port, **self.conn_kw)\n        if self.proxy:\n            conn.set_proxy(self.proxy, self.proxy_headers)\n        return conn\n\n    def _get_conn(self, timeout=None) -> HTTPConnection:\n        try:\n            conn = self.pool.get(block=self.block, timeout=timeout)\n            if not conn:\n                conn = self._new_conn()\n                self.pool.put(conn)\n            return conn\n        except queue.Empty:\n            conn = self._new_conn()\n            return conn\n\n    def _put_conn(self, conn) -> None:\n        self.pool.put(conn)\n\n    def _make_request(self, conn, method, url, timeout=_Default, **httplib_request_kw) -> HTTPResponse:\n        conn.request(method, url, **httplib_request_kw)\n        response = conn.getresponse()\n        return response\n\n    def urlopen(self, method, url, body=None, headers=None, retries=None, redirect=True, assert_same_host=True, timeout=_Default, pool_timeout=None, release_conn=None, **response_kw) -> HTTPResponse:\n        conn = self._get_conn(timeout=pool_timeout)\n        try:\n            headers = headers or self.headers\n            conn.request(method, url, body=body, headers=headers, **response_kw)\n            response = conn.getresponse()\n            if release_conn:\n                self._put_conn(conn)\n            return response\n        except Exception as e:\n            if retries is not None and retries.total > 0:\n                retries = retries - 1\n                self._put_conn(conn)\n                return self.urlopen(method, url, body=body, headers=headers, retries=retries, redirect=redirect, assert_same_host=assert_same_host, timeout=timeout, pool_timeout=pool_timeout, release_conn=release_conn, **response_kw)\n            else:\n                self._put_conn(conn)\n                raise\n\n    def close(self) -> None:\n        while not self.pool.empty():\n            conn = self.pool.get()\n            conn.close()\n\nclass HTTPSConnectionPool(HTTPConnectionPool):\n    def __init__(self, host, port=None, strict=False, timeout=Timeout.DEFAULT_TIMEOUT, maxsize=1, block=False, headers=None, retries=None, key_file=None, cert_file=None, cert_reqs='CERT_REQUIRED', ca_certs=None, ssl_version=None, assert_hostname=None, assert_fingerprint=None, _proxy=None, _proxy_headers=None, **conn_kw) -> None:\n        super().__init__(host, port, strict, timeout, maxsize, block, headers, retries, _proxy, _proxy_headers, **conn_kw)\n        self.key_file = key_file\n        self.cert_file = cert_file\n        self.cert_reqs = cert_reqs\n        self.ca_certs = ca_certs\n        self.ssl_version = ssl_version\n        self.assert_hostname = assert_hostname\n        self.assert_fingerprint = assert_fingerprint\n\n    def _prepare_conn(self, conn) -> HTTPSConnection:\n        context = create_default_context(cafile=self.ca_certs)\n        context.check_hostname = self.assert_hostname is not None\n        context.verify_mode = self.cert_reqs\n        if self.key_file and self.cert_file:\n            context.load_cert_chain(self.cert_file, self.key_file)\n        conn._context = context\n        return conn\n\n    def _new_conn(self) -> HTTPSConnection:\n        conn = HTTPSConnection(self.host, self.port, **self.conn_kw)\n        if self.proxy:\n            conn.set_proxy(self.proxy, self.proxy_headers)\n        conn = self._prepare_conn(conn)\n        return conn"
  },
  {
    "Task_id": 210,
    "Instruction": "Task Description: Create a Python application using Sanic framework that serves a basic web page and integrates a ReactPy component. The application should have a root route serving an HTML file and a separate route prefix for ReactPy components.\n\nFunction Description: The code sets up a Sanic web server with two main functionalities: serving static content (index.html) and hosting ReactPy components. It demonstrates basic route handling and ReactPy integration with Sanic.\n\nInput: None (The functions don't take explicit parameters but rely on framework-specific objects)\n\nOutput: A running Sanic web server that responds to HTTP requests\n\nMethods:\n\nconfigure_reactpy: None -> None - Configures the ReactPy integration with Sanic, setting up the necessary routes and options for ReactPy components under the \"/_reactpy\" prefix.\n\nrun_server: None -> None - Starts the Sanic web server on localhost (127.0.0.1) port 5000.\n\nRoute Handlers:\n\nindex: (request: sanic.Request) -> sanic.response.HTTPResponse - Asynchronous route handler for the root path (\"/\") that serves the index.html file.\n\nReactPyView: None -> reactpy.types.Component - ReactPy component function that returns basic HTML content to be rendered by the ReactPy backend.",
    "Canonical_solution": "from sanic import Sanic\nfrom sanic.response import file\nfrom reactpy import component, html\nfrom reactpy.backend.sanic import Options, configure\n\napp = Sanic(\"MyApp\")\n\n@app.route(\"/\")\nasync def index(request):\n    return await file(\"index.html\")\n\n@component\ndef ReactPyView():\n    return html.code(\"This text came from an ReactPy App\")\n\ndef configure_reactpy():\n    configure(app, ReactPyView, Options(url_prefix=\"/_reactpy\"))\n\ndef run_server():\n    app.run(host=\"127.0.0.1\", port=5000)\n\nif __name__ == \"__main__\":\n    configure_reactpy()\n    run_server()",
    "Code_level": "Function-level",
    "FSMID_for_test": 62,
    "right_result": "from sanic import Sanic\nfrom sanic.response import html\nimport reactpy\nfrom reactpy import component, html as rhtml\nimport asyncio\n\napp = Sanic(\"SanicReactPyApp\")\n\n@component\ndef ReactPyView():\n    return rhtml.div(\n        rhtml.h1(\"Hello from ReactPy!\"),\n        rhtml.p(\"This is a ReactPy component rendered by Sanic.\")\n    )\n\ndef configure_reactpy():\n    app.add_route(reactpy.serve_component(ReactPyView), \"/_reactpy\")\n\n@app.route(\"/\")\nasync def index(request):\n    with open(\"index.html\", \"r\") as f:\n        content = f.read()\n    return html(content)\n\ndef run_server():\n    app.run(host=\"127.0.0.1\", port=5000, debug=True)\n\nif __name__ == \"__main__\":\n    configure_reactpy()\n    run_server()"
  },
  {
    "Task_id": 212,
    "Instruction": "Task Description: Create a Sanic-based HTTP server for handling exchange rate API requests, supporting date-based queries, base currency conversion, and symbol filtering.\n\nClass Description: ExchangeRateAPI is a Sanic application that provides exchange rate data from a PostgreSQL database. It handles various API endpoints for retrieving latest rates or rates for specific dates, with support for currency conversion and symbol filtering.\n\nAttributes:\n- app: Sanic - The Sanic application instance\n- db: Gino - Database connection handler using Gino ORM\n- config: dict - Application configuration parsed from DATABASE_URL environment variable\n\nMethods:\n- __init__() -> None - Initializes the Sanic app, database connection, and sets up routes\n- _setup_routes() -> None - Defines all API routes and their handlers\n- run(host: str = \"0.0.0.0\", port: int = 8000) -> None - Starts the Sanic server with specified host and port\n\nRoute Handlers:\n- exchange_rates(request: Request, date: str = None) -> HTTPResponse - Handles all exchange rate API requests:\n  * Input: \n    - request: Sanic Request object containing query parameters\n    - date: Optional date string in YYYY-MM-DD format\n  * Output: JSON response containing:\n    - base currency\n    - date of rates\n    - exchange rates\n    OR error message with appropriate HTTP status code\n\nSupporting Class:\nExchangeRates: Gino model representing exchange rate data\nAttributes:\n- date: date - The date of the exchange rates\n- rates: dict - Dictionary of currency rates",
    "Canonical_solution": "import fcntl\nimport itertools\nimport requests\nfrom datetime import datetime\nfrom decimal import Decimal\nfrom os import getenv\nfrom xml.etree import ElementTree\nfrom sanic import Sanic\nfrom sanic.response import json, redirect\nfrom exchangerates.utils import Gino, cors, parse_database_url\n\nclass ExchangeRateAPI:\n    def __init__(self):\n        self.app = Sanic()\n        self.app.config.update(\n            parse_database_url(\n                url=getenv(\"DATABASE_URL\", \"postgresql://localhost/exchangerates\")\n            )\n        )\n        self.db = Gino(self.app)\n        self._setup_routes()\n\n    def _setup_routes(self):\n        @self.app.route(\"/latest\", methods=[\"GET\", \"HEAD\"])\n        @self.app.route(\"/<date>\", methods=[\"GET\", \"HEAD\"])\n        @self.app.route(\"/api/latest\", methods=[\"GET\", \"HEAD\"])\n        @self.app.route(\"/api/<date>\", methods=[\"GET\", \"HEAD\"])\n        @cors()\n        async def exchange_rates(request, date=None):\n            if request.method == \"HEAD\":\n                return json(\"\")\n\n            dt = datetime.now()\n            if date:\n                try:\n                    dt = datetime.strptime(date, \"%Y-%m-%d\")\n                except ValueError as e:\n                    return json({\"error\": \"{}\".format(e)}, status=400)\n\n                if dt < datetime(1999, 1, 4):\n                    return json(\n                        {\"error\": \"There is no data for dates older then 1999-01-04.\"},\n                        status=400,\n                    )\n\n            exchange_rates = (\n                await ExchangeRates.query.where(ExchangeRates.date <= dt.date())\n                .order_by(ExchangeRates.date.desc())\n                .gino.first()\n            )\n            rates = exchange_rates.rates\n\n            base = \"EUR\"\n            if \"base\" in request.raw_args and request.raw_args[\"base\"] != \"EUR\":\n                base = request.raw_args[\"base\"]\n                if base in rates:\n                    base_rate = Decimal(rates[base])\n                    rates = {\n                        currency: Decimal(rate) / base_rate for currency, rate in rates.items()\n                    }\n                    rates[\"EUR\"] = Decimal(1) / base_rate\n                else:\n                    return json(\n                        {\"error\": \"Base '{}' is not supported.\".format(base)}, status=400\n                    )\n\n            if \"symbols\" in request.args:\n                symbols = list(\n                    itertools.chain.from_iterable(\n                        [symbol.split(\",\") for symbol in request.args[\"symbols\"]]\n                    )\n                )\n                if all(symbol in rates for symbol in symbols):\n                    rates = {symbol: rates[symbol] for symbol in symbols}\n                else:\n                    return json(\n                        {\n                            \"error\": \"Symbols '{}' are invalid for date {}.\".format(\n                                \",\".join(symbols), dt.date()\n                            )\n                        },\n                        status=400,\n                    )\n\n            return json(\n                {\"base\": base, \"date\": exchange_rates.date.strftime(\"%Y-%m-%d\"), \"rates\": rates}\n            )\n\n    def run(self, host=\"0.0.0.0\", port=8000):\n        self.app.run(host=host, port=port, access_log=False, debug=True)\n\nclass ExchangeRates:\n    __tablename__ = \"exchange_rates\"\n    date = None\n    rates = None",
    "Code_level": "Class-level",
    "FSMID_for_test": 62,
    "right_result": "from sanic import Sanic\nfrom sanic.response import json\nfrom gino import Gino\nfrom datetime import date, datetime\nimport os\n\napp = Sanic(__name__)\ndb = Gino()\n\nclass ExchangeRates(db.Model):\n    __tablename__ = 'exchange_rates'\n    id = db.Column(db.Integer, primary_key=True)\n    date = db.Column(db.Date, nullable=False)\n    rates = db.Column(db.JSON, nullable=False)\n\nclass ExchangeRateAPI:\n    def __init__(self):\n        self.app = app\n        self.db = db\n        self.config = self._parse_config()\n        self._setup_routes()\n\n    def _parse_config(self):\n        from urllib.parse import urlparse\n        url = urlparse(os.environ.get('DATABASE_URL'))\n        return {\n            'DB_HOST': url.hostname,\n            'DB_PORT': url.port,\n            'DB_USER': url.username,\n            'DB_PASSWORD': url.password,\n            'DB_NAME': url.path[1:]\n        }\n\n    async def initialize(self):\n        await self.db.set_bind(f'postgresql://{self.config[\"DB_USER\"]}:{self.config[\"DB_PASSWORD\"]}@{self.config[\"DB_HOST\"]}:{self.config[\"DB_PORT\"]}/{self.config[\"DB_NAME\"]}')\n\n    async def _setup_routes(self):\n        self.app.add_route(self.exchange_rates, '/exchange-rates', methods=['GET'])\n        self.app.add_route(self.exchange_rates, '/exchange-rates/<date>', methods=['GET'])\n\n    async def exchange_rates(self, request, date=None):\n        try:\n            if date:\n                query_date = datetime.strptime(date, '%Y-%m-%d').date()\n            else:\n                query_date = date.today()\n\n            rates = await ExchangeRates.query.where(ExchangeRates.date == query_date).gino.first()\n            if not rates:\n                return json({'error': 'No exchange rates found for the specified date'}, status=404)\n\n            filtered_rates = {k: v for k, v in rates.rates.items() if k in request.args.get('symbols', '').split(',')}\n\n            if not filtered_rates:\n                return json({'error': 'No valid currency symbols provided'}, status=400)\n\n            return json({\n                'base': 'USD',\n                'date': str(rates.date),\n                'rates': filtered_rates\n            })\n\n        except Exception as e:\n            return json({'error': str(e)}, status=500)\n\n    def run(self, host='0.0.0.0', port=8000):\n        self.app.run(host=host, port=port)\n\nif __name__ == '__main__':\n    api = ExchangeRateAPI()\n    api.initialize()\n    api.run()"
  },
  {
    "Task_id": 213,
    "Instruction": "Task Description: Create a Python class that implements an HTTP client using the Sanic framework, capable of handling GraphQL requests and standard HTTP methods (GET, POST, PATCH, PUT, DELETE). The class should support both query parameters and file uploads, and provide appropriate response handling.\n\nClass Description: The `SanicHttpClient` class is a wrapper around Sanic's ASGI client that simplifies making HTTP requests, particularly for GraphQL endpoints. It handles request construction, header management, and response formatting.\n\nAttributes:\n- app: Sanic - The Sanic application instance used for handling requests\n- graphiql: Optional[bool] - Flag to enable GraphiQL interface\n- graphql_ide: Optional[str] - The GraphQL IDE to use (default: \"graphiql\")\n- allow_queries_via_get: bool - Whether to allow GraphQL queries via GET method\n- result_override: Optional[Any] - Optional result override for testing\n- multipart_uploads_enabled: bool - Flag to enable multipart file uploads\n\nMethods:\n- __init__(graphiql: Optional[bool], graphql_ide: Optional[str], allow_queries_via_get: bool, result_override: Optional[Any], multipart_uploads_enabled: bool) -> None - Initializes the Sanic application and sets up the GraphQL route\n- _graphql_request(method: Literal[\"get\", \"post\"], query: Optional[str], variables: Optional[Dict[str, object]], files: Optional[Dict[str, BytesIO]], headers: Optional[Dict[str, str]], **kwargs: Any) -> Response - Internal method to handle GraphQL requests with proper body construction\n- request(url: str, method: Literal[\"get\", \"post\", \"patch\", \"put\", \"delete\"], headers: Optional[Dict[str, str]]) -> Response - General HTTP request handler\n- get(url: str, headers: Optional[Dict[str, str]]) -> Response - Convenience method for GET requests\n- post(url: str, data: Optional[bytes], json: Optional[Dict], headers: Optional[Dict[str, str]]) -> Response - Convenience method for POST requests with data or JSON payload",
    "Canonical_solution": "from sanic import Sanic\nfrom sanic.request import Request as SanicRequest\nfrom typing import Any, Optional, Literal, Dict\nfrom io import BytesIO\nfrom json import dumps\nfrom random import randint\n\nclass SanicHttpClient:\n    def __init__(\n        self,\n        graphiql: Optional[bool] = None,\n        graphql_ide: Optional[str] = \"graphiql\",\n        allow_queries_via_get: bool = True,\n        result_override: Optional[Any] = None,\n        multipart_uploads_enabled: bool = False,\n    ):\n        self.app = Sanic(f\"test_{int(randint(0, 1000))}\")\n        view = GraphQLView.as_view(\n            schema=schema,\n            graphiql=graphiql,\n            graphql_ide=graphql_ide,\n            allow_queries_via_get=allow_queries_via_get,\n            result_override=result_override,\n            multipart_uploads_enabled=multipart_uploads_enabled,\n        )\n        self.app.add_route(view, \"/graphql\")\n\n    async def _graphql_request(\n        self,\n        method: Literal[\"get\", \"post\"],\n        query: Optional[str] = None,\n        variables: Optional[Dict[str, object]] = None,\n        files: Optional[Dict[str, BytesIO]] = None,\n        headers: Optional[Dict[str, str]] = None,\n        **kwargs: Any,\n    ) -> Response:\n        body = self._build_body(\n            query=query, variables=variables, files=files, method=method\n        )\n\n        if body:\n            if method == \"get\":\n                kwargs[\"params\"] = body\n            elif files:\n                kwargs[\"data\"] = body\n            else:\n                kwargs[\"content\"] = dumps(body)\n\n        request, response = await self.app.asgi_client.request(\n            method,\n            \"/graphql\",\n            headers=self._get_headers(method=method, headers=headers, files=files),\n            files=files,\n            **kwargs,\n        )\n\n        return Response(\n            status_code=response.status_code,\n            data=response.content,\n            headers=response.headers,\n        )\n\n    async def request(\n        self,\n        url: str,\n        method: Literal[\"get\", \"post\", \"patch\", \"put\", \"delete\"],\n        headers: Optional[Dict[str, str]] = None,\n    ) -> Response:\n        request, response = await self.app.asgi_client.request(\n            method,\n            url,\n            headers=headers,\n        )\n\n        return Response(\n            status_code=response.status_code,\n            data=response.content,\n            headers=response.headers,\n        )\n\n    async def get(\n        self,\n        url: str,\n        headers: Optional[Dict[str, str]] = None,\n    ) -> Response:\n        return await self.request(url, \"get\", headers=headers)\n\n    async def post(\n        self,\n        url: str,\n        data: Optional[bytes] = None,\n        json: Optional[Dict] = None,\n        headers: Optional[Dict[str, str]] = None,\n    ) -> Response:\n        body = data or dumps(json)\n        request, response = await self.app.asgi_client.request(\n            \"post\", url, content=body, headers=headers\n        )\n\n        return Response(\n            status_code=response.status_code,\n            data=response.content,\n            headers=response.headers,\n        )",
    "Code_level": "Class-level",
    "FSMID_for_test": 62,
    "right_result": "import asyncio\nfrom typing import Optional, Dict, Any, Literal, BytesIO\nfrom sanic import Sanic, response\nfrom sanic.request import Request\nfrom sanic.response import HTTPResponse\nfrom graphql import execute, GraphQLSchema, GraphQLObjectType, GraphQLField, GraphQLString, GraphQLList, GraphQLInt, GraphQLScalarType\nfrom graphql.execution.executors.sync import SyncExecutor\nfrom graphql.type.definition import GraphQLType\n\nclass SanicHttpClient:\n    def __init__(self, graphiql: Optional[bool], graphql_ide: Optional[str], allow_queries_via_get: bool, result_override: Optional[Any], multipart_uploads_enabled: bool):\n        self.app = Sanic(\"GraphQLClient\")\n        self.graphiql = graphiql\n        self.graphql_ide = graphql_ide or \"graphiql\"\n        self.allow_queries_via_get = allow_queries_via_get\n        self.result_override = result_override\n        self.multipart_uploads_enabled = multipart_uploads_enabled\n        self._setup_routes()\n\n    def _setup_routes(self):\n        @self.app.route(\"/graphql\", methods=[\"GET\", \"POST\"])\n        async def graphql_route(request: Request):\n            query = request.json.get(\"query\")\n            variables = request.json.get(\"variables\")\n            operation_name = request.json.get(\"operationName\")\n            files = request.files\n            headers = request.headers\n            if not query:\n                return response.json({\"error\": \"Missing query\"}, status=400)\n            try:\n                schema = self._build_schema()\n                result = await self._graphql_request(\n                    method=request.method,\n                    query=query,\n                    variables=variables,\n                    files=files,\n                    headers=headers\n                )\n                if self.result_override is not None:\n                    return response.json(self.result_override)\n                return response.json(result)\n            except Exception as e:\n                return response.json({\"error\": str(e)}, status=500)\n\n        if self.graphiql:\n            from graphiql import graphiql_app\n            self.app.blueprint(graphiql_app, url_prefix=\"/graphiql\")\n\n    def _build_schema(self):\n        class Query(GraphQLObjectType):\n            hello = GraphQLField(GraphQLString, description=\"A simple hello world\")\n        \n        schema = GraphQLSchema(query=Query)\n        return schema\n\n    async def _graphql_request(self, method: Literal[\"get\", \"post\"], query: Optional[str], variables: Optional[Dict[str, object]], files: Optional[Dict[str, BytesIO]], headers: Optional[Dict[str, str]], **kwargs: Any) -> Dict[str, Any]:\n        context_value = {\"request\": kwargs.get(\"request\")}\n        execution_result = await execute(\n            schema=self._build_schema(),\n            document=query,\n            variable_values=variables,\n            context_value=context_value,\n            executor=SyncExecutor()\n        )\n        return execution_result.data\n\n    async def request(self, url: str, method: Literal[\"get\", \"post\", \"patch\", \"put\", \"delete\"], headers: Optional[Dict[str, str]]) -> HTTPResponse:\n        return await self.app.test_client().request(method=method, url=url, headers=headers)\n\n    async def get(self, url: str, headers: Optional[Dict[str, str]]) -> HTTPResponse:\n        return await self.request(url, \"get\", headers)\n\n    async def post(self, url: str, data: Optional[bytes], json: Optional[Dict], headers: Optional[Dict[str, str]]) -> HTTPResponse:\n        return await self.request(url, \"post\", headers=headers)"
  },
  {
    "Task_id": 214,
    "Instruction": "Task Description: Create a Python class that implements a RESTful API for topic modeling using the Sanic framework, providing endpoints for text tokenization and LDA model inference.\n\nClass Description: The FamiliaAPI class encapsulates a topic modeling service that exposes HTTP endpoints for text processing. It initializes with model configurations, sets up route handlers, and manages inference engines for LDA and SLDA models.\n\nAttributes:\n\napp: [Sanic] - The Sanic application instance for handling HTTP requests\nmodel_name: [str] - Name of the topic model being used\nmodel_path: [str] - Filesystem path to the model directory\nn_workers: [int] - Number of worker processes for parallel processing\nmodel_dir: [str] - Full path to the model directory\nemb_file: [str] - Filename for the word embeddings model\ninference_engine_lda: [InferenceEngineWrapper] - Wrapper for LDA model inference\ninference_engine_slda: [InferenceEngineWrapper] - Wrapper for SLDA model inference\ntwe: [TopicalWordEmbeddingsWrapper] - Wrapper for topical word embeddings\nlda_topic_words: [defaultdict] - Dictionary storing topic words and their scores\n\nMethods:\n\n__init__: [Name](model_path: str, model_name: str, n_workers: int = None) -> None - Initializes the API service with model configurations and sets up routes\n_read_topic_words_from_file: [Name](topic_words_file_name: str = 'topic_words.lda.txt') -> defaultdict - Reads topic words from a file and returns them as a dictionary\n_get_param: [Name](request, param_name, default_value=None, is_list=False) -> Union[str, List[str]] - Extracts parameters from HTTP requests\n_strip_to_none: [Name](text: str) -> Optional[str] - Cleans and validates input text\n_response: [Name](success: bool = True, data=None, message=None) -> HTTPResponse - Constructs standardized JSON responses\n_error_response: [Name](message: str = 'Invalid request') -> HTTPResponse - Creates error responses\n_setup_routes: [Name]() -> None - Defines all API endpoints and their handlers\nrun: [Name]() -> None - Starts the Sanic server with configured workers",
    "Canonical_solution": "from sanic import Sanic\nfrom sanic.response import json\nfrom sanic_openapi import swagger_blueprint, doc\nfrom typing import Optional, List, Dict, Union\nfrom collections import defaultdict\nimport re\n\nRE_BACKSPACES = re.compile(\"\\b+\")\n\nclass FamiliaAPI:\n    def __init__(self, model_path: str, model_name: str, n_workers: int = None):\n        self.app = Sanic(\"Familia\", strict_slashes=True)\n        self.app.blueprint(swagger_blueprint)\n        self.app.config.API_TITLE = 'Familia API'\n        self.app.config.API_DESCRIPTION = 'A Toolkit for Industrial Topic Modeling'\n        self.app.config.API_PRODUCES_CONTENT_TYPES = ['application/json']\n        \n        self.model_name = model_name.lower()\n        self.model_path = model_path\n        self.n_workers = n_workers if n_workers else multiprocessing.cpu_count()\n        self.model_dir = os.path.join(model_path, model_name)\n        \n        self.emb_file = f\"{model_name}_twe_lda.model\"\n        self.inference_engine_lda = InferenceEngineWrapper(self.model_dir, 'lda.conf', self.emb_file)\n        self.inference_engine_slda = InferenceEngineWrapper(self.model_dir, 'slda.conf')\n        self.twe = TopicalWordEmbeddingsWrapper(self.model_dir, self.emb_file)\n        self.lda_topic_words = self._read_topic_words_from_file()\n\n        self._setup_routes()\n\n    def _read_topic_words_from_file(self, topic_words_file_name='topic_words.lda.txt'):\n        topic_words = defaultdict(list)\n        file_path = os.path.join(self.model_dir, topic_words_file_name)\n        if not os.path.exists(file_path):\n            return topic_words\n        with open(file_path, 'r') as f:\n            line = f.readline()\n            while line:\n                pos = line.find('=')\n                line = line[pos + 2:]\n                topic_id, num = line.strip().split('\\t')\n                topic_id, num = int(topic_id), int(num)\n                f.readline()\n                items = list()\n                for i in range(num):\n                    data = f.readline()\n                    word, score = data.strip().split('\\t')\n                    items.append([word, float(score)])\n                topic_words[topic_id] = items\n                line = f.readline()\n        return topic_words\n\n    def _get_param(self, request, param_name, default_value=None, is_list=False):\n        param_value = (request.form.getlist(param_name) if is_list else request.form.getlist(param_name) or \\\n                     request.args.get(param_name) or \\\n                     default_value\n        if param_value is None:\n            return param_value\n        value_type = type(param_value)\n        if is_list:\n            return param_value if value_type == list else [param_value]\n        return param_value[0] if value_type == list else param_value\n\n    def _strip_to_none(self, text: str):\n        if text is None:\n            return None\n        text = text.strip()\n        text = re.sub(RE_BACKSPACES, '', text)\n        if len(text) == 0:\n            return None\n        if text == 'None':\n            return None\n        return text\n\n    def _response(self, success: bool = True, data=None, message=None):\n        data = {'success': success, 'message': message, 'data': data}\n        data = {k: v for k, v in data.items() if v is not None}\n        try:\n            return json(data, ensure_ascii=False)\n        except Exception:\n            data = {'success': success, 'message': traceback.format_exc()}\n            return json(data, ensure_ascii=False)\n\n    def _error_response(self, message='Invalid request'):\n        return self._response(success=False, message=message)\n\n    def _setup_routes(self):\n        @self.app.route('/')\n        @doc.description(\"ping\")\n        async def api_index(request):\n            message = f\"Familia API is running, check out the api doc at http://{request.host}/swagger/\"\n            return self._response(message=message)\n\n        @self.app.route('/tokenize', methods=[\"POST\"])\n        @doc.summary(\"\u5206\u8bcd\")\n        async def api_tokenize(request):\n            try:\n                text = self._get_param(request, 'text')\n                if text is None:\n                    return self._error_response()\n                result = self.inference_engine_lda.tokenize(text)\n                return self._response(data=result)\n            except Exception as err:\n                return self._error_response(str(err))\n\n        @self.app.route('/lda', methods=[\"POST\"])\n        @doc.summary(\"LDA\u6a21\u578b\u63a8\u65ad\")\n        async def api_lda(request):\n            try:\n                text = self._get_param(request, 'text')\n                n = int(self._get_param(request, 'n', 10))\n                if text is None:\n                    return self._error_response()\n                words = self.inference_engine_lda.tokenize(text)\n                result = self.inference_engine_lda.lda_infer(words)\n                result = result[:n]\n                result = [\n                    {\n                        'topic_id': topic_id,\n                        'score': score,\n                        'topic_words': self.twe.nearest_words_around_topic(topic_id),\n                        'topic_words_poly': self.lda_topic_words.get(topic_id),\n                    } for topic_id, score in result\n                ]\n                return self._response(data=result)\n            except Exception as err:\n                return self._error_response(str(err))\n\n    def run(self):\n        self.app.run(host='0.0.0.0', port=5000, workers=self.n_workers)",
    "Code_level": "Class-level",
    "FSMID_for_test": 62,
    "right_result": "import os\nimport json\nfrom sanic import Sanic\nfrom sanic.response import json as json_response\nfrom typing import Union, List, Optional, Dict, Any\nfrom collections import defaultdict\nfrom multiprocessing import Pool\n\nclass FamiliaAPI:\n    def __init__(self, model_path: str, model_name: str, n_workers: int = None):\n        self.app = Sanic(model_name)\n        self.model_name = model_name\n        self.model_path = model_path\n        self.n_workers = n_workers\n        self.model_dir = os.path.join(model_path, model_name)\n        self.emb_file = os.path.join(self.model_dir, 'word_embeddings.model')\n        self.inference_engine_lda = None\n        self.inference_engine_slda = None\n        self.twe = None\n        self.lda_topic_words = self._read_topic_words_from_file()\n        self._setup_routes()\n\n    def _read_topic_words_from_file(self, topic_words_file_name: str = 'topic_words.lda.txt') -> defaultdict:\n        topic_words_file = os.path.join(self.model_dir, topic_words_file_name)\n        if not os.path.exists(topic_words_file):\n            return defaultdict(list)\n        with open(topic_words_file, 'r', encoding='utf-8') as f:\n            lines = f.readlines()\n        topic_words = defaultdict(list)\n        for line in lines:\n            parts = line.strip().split('\\t')\n            if len(parts) >= 2:\n                topic_id = int(parts[0])\n                word = parts[1]\n                score = float(parts[2]) if len(parts) > 2 else 1.0\n                topic_words[topic_id].append((word, score))\n        return topic_words\n\n    def _get_param(self, request, param_name, default_value=None, is_list=False) -> Union[str, List[str]]:\n        value = request.args.get(param_name, default_value)\n        if is_list and value:\n            return value.split(',')\n        return value\n\n    def _strip_to_none(self, text: str) -> Optional[str]:\n        if not text or text.strip() == '':\n            return None\n        return text.strip()\n\n    def _response(self, success: bool = True, data=None, message=None) -> Any:\n        return json_response({\n            'success': success,\n            'data': data,\n            'message': message\n        })\n\n    def _error_response(self, message: str = 'Invalid request') -> Any:\n        return self._response(success=False, message=message)\n\n    def _setup_routes(self):\n        @self.app.route('/tokenize', methods=['POST'])\n        async def tokenize(request):\n            text = self._strip_to_none(request.form.get('text'))\n            if not text:\n                return self._error_response('Text is required')\n            tokens = text.split()\n            return self._response(data=tokens)\n\n        @self.app.route('/infer_lda', methods=['POST'])\n        async def infer_lda(request):\n            text = self._strip_to_none(request.form.get('text'))\n            if not text:\n                return self._error_response('Text is required')\n            result = self.inference_engine_lda.infer(text)\n            return self._response(data=result)\n\n        @self.app.route('/infer_slda', methods=['POST'])\n        async def infer_slda(request):\n            text = self._strip_to_none(request.form.get('text'))\n            if not text:\n                return self._error_response('Text is required')\n            result = self.inference_engine_slda.infer(text)\n            return self._response(data=result)\n\n        @self.app.route('/topic_words', methods=['GET'])\n        async def get_topic_words(request):\n            return self._response(data=self.lda_topic_words)\n\n    def run(self):\n        if self.n_workers:\n            self.app.run(host='0.0.0.0', port=8000, workers=self.n_workers)\n        else:\n            self.app.run(host='0.0.0.0', port=8000)"
  },
  {
    "Task_id": 215,
    "Instruction": "Task Description: Create a Sanic web application that serves as a backend for a ReactPy application, including a root route redirection and ReactPy configuration.\n\nFunction Description: The function `make_app` creates and configures a Sanic web application instance. It sets up a root route that redirects to a documentation page and configures the ReactPy backend with a specified URL prefix.\n\nInput:\n- name: str - The name to give the Sanic application instance\n\nOutput:\n- Sanic - Returns a configured Sanic application instance with:\n  - A root route (\"/\") that redirects to \"/docs/index.html\"\n  - ReactPy backend configured with the specified URL prefix (\"/_reactpy\")",
    "Canonical_solution": "from sanic import Sanic, response\nfrom reactpy.backend.sanic import Options, configure\n\nREACTPY_MODEL_SERVER_URL_PREFIX = \"/_reactpy\"\n\ndef make_app(name: str):\n    app = Sanic(name)\n\n    @app.route(\"/\")\n    async def forward_to_index(_):\n        return response.redirect(\"/docs/index.html\")\n\n    configure(\n        app,\n        Example,\n        Options(url_prefix=REACTPY_MODEL_SERVER_URL_PREFIX),\n    )\n\n    return app",
    "Code_level": "Function-level",
    "FSMID_for_test": 62,
    "right_result": "from sanic import Sanic\nfrom sanic.response import redirect\nimport reactpy\n\ndef make_app(name):\n    app = Sanic(name)\n    \n    @app.route('/')\n    async def root(request):\n        return redirect('/docs/index.html')\n    \n    reactpy.backend.configure(app, prefix='/_reactpy')\n    \n    return app"
  },
  {
    "Task_id": 216,
    "Instruction": "Task Description: Create a Sanic-based HTTP server that handles reranking requests by processing a query and a list of passages through an ONNX backend, and returns the reranked results in JSON format.\n\nFunction Description: The server consists of two main functions: a route handler for processing rerank requests and a listener for initializing the ONNX backend before server startup. The route handler accepts POST requests with JSON data containing a query and passages, processes them using the ONNX backend, and returns the reranked results. The listener sets up the ONNX backend with GPU or CPU configuration based on command-line arguments.\n\nInput:\n- For the rerank route handler:\n  - request: Sanic request object containing JSON data with:\n    - query: str - The search query to rerank against\n    - passages: List[str] - The list of passages to be reranked\n- For the setup_onnx_backend listener:\n  - app: Sanic application instance\n  - loop: Event loop (unused in this case)\n- Command-line arguments:\n  --use_gpu: bool - Flag to enable GPU acceleration\n  --workers: int - Number of worker processes\n\nOutput:\n- For the rerank route handler:\n  - Returns: JSON response containing the reranked results\n- For the server startup:\n  - Starts an HTTP server listening on port 8001 with specified number of workers",
    "Canonical_solution": "from sanic import Sanic\nfrom sanic.response import json\nimport argparse\n\napp = Sanic(\"rerank_server\")\n\n@app.route(\"/rerank\", methods=[\"POST\"])\nasync def rerank(request):\n    data = request.json\n    query = data.get('query')\n    passages = data.get('passages')\n\n    onnx_backend: RerankOnnxBackend = request.app.ctx.onnx_backend\n    result_data = onnx_backend.get_rerank(query, passages)\n\n    return json(result_data)\n\n@app.listener('before_server_start')\nasync def setup_onnx_backend(app, loop):\n    app.ctx.onnx_backend = RerankOnnxBackend(use_cpu=not args.use_gpu)\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--use_gpu', action=\"store_true\", help='use gpu or not')\n    parser.add_argument('--workers', type=int, default=1, help='workers')\n    args = parser.parse_args()\n    \n    app.run(host=\"0.0.0.0\", port=8001, workers=args.workers)",
    "Code_level": "Function-level",
    "FSMID_for_test": 62,
    "right_result": "import argparse\nimport asyncio\nimport json\nimport logging\nimport os\nimport sys\nfrom sanic import Sanic, response\nfrom sanic.response import json as sanic_json\nfrom onnxruntime import InferenceSession, SessionOptions, ExecutionMode\nfrom onnxruntime.capi.onnxruntime_pybind11_state import RuntimeException\n\nclass ONNXReranker:\n    def __init__(self, model_path, use_gpu):\n        self.model_path = model_path\n        self.use_gpu = use_gpu\n        self.session = None\n        self._initialize_session()\n\n    def _initialize_session(self):\n        try:\n            if self.use_gpu:\n                providers = ['CUDAExecutionProvider', 'CPUExecutionProvider']\n            else:\n                providers = ['CPUExecutionProvider']\n            options = SessionOptions()\n            options.execution_mode = ExecutionMode.ORT_SEQUENTIAL\n            self.session = InferenceSession(self.model_path, providers=providers, sess_options=options)\n        except RuntimeException as e:\n            logging.error(f\"Failed to load ONNX model: {e}\")\n            sys.exit(1)\n\n    async def rerank(self, query, passages):\n        input_data = {\n            \"query\": [query],\n            \"passages\": passages\n        }\n        input_names = self.session.get_inputs()[0].name\n        outputs = self.session.run(None, {input_names: input_data})\n        scores = outputs[0][0]\n        reranked = sorted(zip(passages, scores), key=lambda x: x[1], reverse=True)\n        return [{\"passage\": passage, \"score\": score} for passage, score in reranked]\n\ndef setup_onnx_backend(app, loop):\n    parser = argparse.ArgumentParser(description=\"Sanic Reranking Server\")\n    parser.add_argument(\"--use_gpu\", action=\"store_true\", help=\"Use GPU for ONNX inference\")\n    parser.add_argument(\"--workers\", type=int, default=4, help=\"Number of worker processes\")\n    args = parser.parse_args()\n    model_path = os.path.join(os.path.dirname(__file__), \"reranker_model.onnx\")\n    app.state.reranker = ONNXReranker(model_path, args.use_gpu)\n    app.run(host=\"0.0.0.0\", port=8001, workers=args.workers)\n\nasync def rerank_route(request):\n    data = await request.json()\n    query = data.get(\"query\")\n    passages = data.get(\"passages\", [])\n    if not query or not passages:\n        return sanic_json({\"error\": \"Missing query or passages\"}, status=400)\n    reranker = request.app.state.reranker\n    result = await reranker.rerank(query, passages)\n    return sanic_json(result)\n\napp = Sanic(\"RerankerServer\")\napp.listener_hooks[\"before_server_start\"].append(setup_onnx_backend)\napp.add_route(rerank_route, \"/rerank\")"
  },
  {
    "Task_id": 229,
    "Instruction": "Task Description: Create a simple HTTP server in Python that can handle GET, HEAD, and POST requests, with customizable port configuration.\n\nClass Description: SimpleHTTPServer is a class that implements a basic HTTP server capable of processing GET, HEAD, and POST requests. It includes an inner RequestHandler class that manages the actual request processing and response generation.\n\nAttributes:\n- port: int - The port number on which the server will listen (default: 8080)\n- server_address: tuple - A tuple containing the server address and port (default: ('', port))\n- handler_class: class - The request handler class that processes HTTP requests\n\nMethods:\n- __init__(port: int = 8080) -> None - Initializes the server with the specified port\n- run() -> None - Starts the HTTP server and begins serving requests indefinitely\n- RequestHandler._set_headers() -> None - Sets basic HTTP response headers (200 status and text/html content type)\n- RequestHandler.do_GET() -> None - Handles HTTP GET requests\n- RequestHandler.do_HEAD() -> None - Handles HTTP HEAD requests\n- RequestHandler.do_POST() -> None - Handles HTTP POST requests, reading and printing the posted data",
    "Canonical_solution": "from http.server import BaseHTTPRequestHandler, HTTPServer\n\nclass SimpleHTTPServer:\n    def __init__(self, port=8080):\n        self.port = port\n        self.server_address = ('', self.port)\n        self.handler_class = self.RequestHandler\n\n    class RequestHandler(BaseHTTPRequestHandler):\n        def _set_headers(self):\n            self.send_response(200)\n            self.send_header('Content-type', 'text/html')\n            self.end_headers()\n\n        def do_GET(self):\n            self._set_headers()\n\n        def do_HEAD(self):\n            self._set_headers()\n\n        def do_POST(self):\n            content_length = int(self.headers['Content-Length'])\n            post_data = self.rfile.read(content_length)\n            self._set_headers()\n            print(post_data)\n\n    def run(self):\n        httpd = HTTPServer(self.server_address, self.handler_class)\n        print('Starting httpd...')\n        httpd.serve_forever()",
    "Code_level": "Class-level",
    "FSMID_for_test": 55,
    "right_result": "class SimpleHTTPServer:\n    def __init__(self, port: int = 8080):\n        from http.server import BaseHTTPRequestHandler, HTTPServer\n        self.port = port\n        self.server_address = ('', port)\n        self.handler_class = type('RequestHandler', (BaseHTTPRequestHandler,), {\n            'do_GET': self._do_GET,\n            'do_HEAD': self._do_HEAD,\n            'do_POST': self._do_POST,\n            '_set_headers': self._set_headers\n        })\n\n    def _set_headers(self):\n        self.send_response(200)\n        self.send_header('Content-type', 'text/html')\n        self.end_headers()\n\n    def _do_GET(self):\n        self._set_headers()\n        self.wfile.write(b'Hello, World!')\n\n    def _do_HEAD(self):\n        self._set_headers()\n\n    def _do_POST(self):\n        content_length = int(self.headers['Content-Length'])\n        post_data = self.rfile.read(content_length)\n        self._set_headers()\n        self.wfile.write(f\"Received POST data: {post_data.decode()}\\n\".encode())\n        print(f\"Received POST data: {post_data.decode()}\")\n\n    def run(self):\n        server = HTTPServer(self.server_address, self.handler_class)\n        print(f'Server running on port {self.port}')\n        server.serve_forever()"
  },
  {
    "Task_id": 234,
    "Instruction": "Task Description: Implement a Tornado-based HTTP server for Bayesian optimization that can receive parameters and targets via POST requests, register them with a Bayesian optimization instance, and return suggested parameters for the next evaluation.\n\nClass Description: BayesianOptimizationHandler is a Tornado RequestHandler subclass that handles HTTP POST requests for Bayesian optimization. It maintains a BayesianOptimization instance and a UtilityFunction to suggest new parameters based on registered data points.\n\nAttributes:\n_bo: [BayesianOptimization] - Instance of BayesianOptimization configured with a black-box function and parameter bounds\n_uf: [UtilityFunction] - Utility function instance used for suggesting new parameters\n\nMethods:\npost: [post]() -> [None] - Handles HTTP POST requests. Expects JSON body with \"params\" and \"target\" fields to register with the optimizer. Returns suggested parameters as JSON. The method:\n1. Decodes the JSON request body\n2. Attempts to register the parameters and target with the optimizer\n3. Generates and returns new suggested parameters\n4. Writes the suggested parameters as JSON response\n\nThe class should be used as part of a Tornado web application that listens on a specified port for optimization requests.",
    "Canonical_solution": "import json\nimport tornado.ioloop\nimport tornado.httpserver\nfrom tornado.web import RequestHandler\nimport requests\n\nclass BayesianOptimizationHandler(RequestHandler):\n    \"\"\"Basic functionality for NLP handlers.\"\"\"\n    _bo = BayesianOptimization(\n        f=black_box_function,\n        pbounds={\"x\": (-4, 4), \"y\": (-3, 3)}\n    )\n    _uf = UtilityFunction(kind=\"ucb\", kappa=3, xi=1)\n\n    def post(self):\n        \"\"\"Deal with incoming requests.\"\"\"\n        body = tornado.escape.json_decode(self.request.body)\n\n        try:\n            self._bo.register(\n                params=body[\"params\"],\n                target=body[\"target\"],\n            )\n            print(\"BO has registered: {} points.\".format(len(self._bo.space)), end=\"\\n\\n\")\n        except KeyError:\n            pass\n        finally:\n            suggested_params = self._bo.suggest(self._uf)\n\n        self.write(json.dumps(suggested_params))\n\ndef run_optimization_app():\n    asyncio.set_event_loop(asyncio.new_event_loop())\n    handlers = [\n        (r\"/bayesian_optimization\", BayesianOptimizationHandler),\n    ]\n    server = tornado.httpserver.HTTPServer(\n        tornado.web.Application(handlers)\n    )\n    server.listen(9009)\n    tornado.ioloop.IOLoop.instance().start()",
    "Code_level": "Class-level",
    "FSMID_for_test": 64,
    "right_result": "import tornado.ioloop\nimport tornado.web\nfrom tornado import gen\nimport numpy as np\nfrom skopt import BayesianOptimization\nfrom skopt.utils import use_named_args\nfrom skopt.acquisition import utility_function\n\nclass UtilityFunction:\n    def __init__(self, kind='EI', kappa=1.96):\n        self.kind = kind\n        self.kappa = kappa\n\n    def __call__(self, x, y, model, random_state=None):\n        return utility_function(x, y, model, kind=self.kind, kappa=self.kappa)\n\nclass BayesianOptimizationHandler(tornado.web.RequestHandler):\n    def __init__(self, application, request, bo=None, uf=None):\n        super().__init__(application, request)\n        self._bo = bo\n        self._uf = uf\n\n    @gen.coroutine\n    def post(self):\n        try:\n            data = self.request.body.decode('utf-8')\n            params = eval(data)\n            params_dict = params['params']\n            target = params['target']\n\n            # Convert params_dict to numpy array\n            params_array = np.array([float(v) for v in params_dict.values()])\n            self._bo.tell(params_array, target)\n\n            # Suggest new parameters\n            suggested_params = self._bo.suggest(self._uf)\n\n            # Convert suggested parameters to dictionary\n            suggested_params_dict = {k: round(float(v), 6) for k, v in zip(params_dict.keys(), suggested_params)}\n            self.write(suggested_params_dict)\n        except Exception as e:\n            self.set_status(400)\n            self.write({'error': str(e)})\n\ndef make_app():\n    # Define the black-box function\n    def black_box_function(x):\n        return np.sin(3 * np.pi * x[0]) * np.exp(-x[1] ** 2)\n\n    # Define parameter bounds\n    param_bounds = [('x0', 0, 1), ('x1', -1, 1)]\n\n    # Initialize Bayesian Optimization\n    bo = BayesianOptimization(black_box_function, param_bounds)\n\n    # Initialize Utility Function\n    uf = UtilityFunction(kind='EI', kappa=1.96)\n\n    # Create Tornado application\n    app = tornado.web.Application([\n        (r\"/optimize\", BayesianOptimizationHandler, dict(bo=bo, uf=uf)),\n    ])\n    return app\n\nif __name__ == \"__main__\":\n    app = make_app()\n    app.listen(8888)\n    tornado.ioloop.IOLoop.current().start()"
  },
  {
    "Task_id": 236,
    "Instruction": "Task Description: Create a Tornado-based HTTP server application that handles web requests and responds with a simple message.\n\nClass Description: The TornadoApp class encapsulates a Tornado web server with configurable port settings. It initializes the web application with route handlers and provides a method to start the server.\n\nAttributes:\n- port: int - The port number on which the server will listen (default: 8888)\n- app: tornado.web.Application - The Tornado web application instance that manages request routing\n\nMethods:\n- __init__(port: int = 8888) -> None - Initializes the Tornado application with the specified port and sets up the route handler\n- run() -> None - Starts the Tornado web server on the specified port and begins processing requests\n\nAdditional Class (MainHandler):\nClass Description: The MainHandler class processes HTTP GET requests to the root URL and returns a simple text response.\n\nMethods:\n- get() -> None - Handles GET requests to the root URL and writes \"Hello, world\" as the response",
    "Canonical_solution": "import tornado.web\n\nclass MainHandler(tornado.web.RequestHandler):\n    def get(self):\n        self.write(\"Hello, world\")\n\nclass TornadoApp:\n    def __init__(self, port: int = 8888):\n        self.port = port\n        self.app = tornado.web.Application(\n            [\n                (r\"/\", MainHandler),\n            ]\n        )\n\n    def run(self):\n        self.app.listen(self.port)\n        tornado.ioloop.IOLoop.current().start()",
    "Code_level": "Class-level",
    "FSMID_for_test": 64,
    "right_result": "import tornado.ioloop\nimport tornado.web\n\nclass MainHandler(tornado.web.RequestHandler):\n    def get(self):\n        self.write(\"Hello, world\")\n\nclass TornadoApp:\n    def __init__(self, port: int = 8888):\n        self.port = port\n        self.app = tornado.web.Application([\n            (r\"/\", MainHandler),\n        ])\n\n    def run(self):\n        self.app.listen(self.port)\n        tornado.ioloop.IOLoop.current().start()"
  },
  {
    "Task_id": 237,
    "Instruction": "Task Description: Create a Tornado-based HTTP server that can handle specific URL routes for string manipulation, including reversing strings and wrapping text to a specified width.\n\nClass Description: TornadoHTTPServer is a class that encapsulates the setup and execution of a Tornado web server with predefined request handlers for string operations.\n\nAttributes:\n- app: tornado.web.Application - The Tornado web application instance that manages URL routing and handlers\n- http_server: tornado.httpserver.HTTPServer - The HTTP server instance that serves the application\n- port: int - The port number on which the server listens (default: 8000)\n\nMethods:\n- __init__(port: int = 8000) -> None - Initializes the HTTP server with specified port and sets up URL routing\n  - port: int - The port number to bind the server to (default: 8000)\n- start() -> None - Starts the HTTP server and begins listening for incoming requests\n  - No parameters\n  - No return value (runs indefinitely until interrupted)\n\nAdditional Handler Classes:\n- ReverseHandler: tornado.web.RequestHandler - Handles GET requests for string reversal\n  - get(input_word: str) -> None - Reverses the input string and writes it to response\n    - input_word: str - The string to be reversed (captured from URL)\n- WrapHandler: tornado.web.RequestHandler - Handles POST requests for text wrapping\n  - post() -> None - Wraps text to specified width and writes to response\n    - Retrieves 'name' (text) and 'width' (optional, default 40) from POST parameters",
    "Canonical_solution": "import tornado.httpserver\nimport tornado.ioloop\nimport tornado.web\nfrom tornado.options import define, options\n\ndefine(\"port\", default=8000, help=\"Please send email to me\", type=int)\n\nclass ReverseHandler(tornado.web.RequestHandler):\n    def get(self, input_word):\n        self.write(input_word[::-1])\n\nclass WrapHandler(tornado.web.RequestHandler):\n    def post(self):\n        text = self.get_argument(\"name\")\n        width = self.get_argument(\"width\", 40)\n        self.write(textwrap.fill(word, width))\n\nclass TornadoHTTPServer:\n    def __init__(self, port=8000):\n        options.port = port\n        self.app = tornado.web.Application(\n            handlers=[\n                (r\"/reverse/(\\w+)\", ReverseHandler),\n                (r\"/wrap/(/w+)\", WrapHandler)\n            ]\n        )\n        self.http_server = tornado.httpserver.HTTPServer(self.app)\n\n    def start(self):\n        self.http_server.listen(options.port)\n        tornado.ioloop.IOLoop.instance().start()",
    "Code_level": "Class-level",
    "FSMID_for_test": 64,
    "right_result": "import tornado.ioloop\nimport tornado.web\nimport tornado.httpserver\n\nclass ReverseHandler(tornado.web.RequestHandler):\n    def get(self, input_word):\n        reversed_word = input_word[::-1]\n        self.write(reversed_word)\n\nclass WrapHandler(tornado.web.RequestHandler):\n    def post(self):\n        name = self.get_argument(\"name\", \"\")\n        width = self.get_argument(\"width\", 40)\n        try:\n            width = int(width)\n        except ValueError:\n            width = 40\n        wrapped_text = \"\\n\".join([name[i:i+width] for i in range(0, len(name), width)])\n        self.write(wrapped_text)\n\nclass TornadoHTTPServer:\n    def __init__(self, port=8000):\n        self.app = tornado.web.Application([\n            (r\"/reverse/(\\w+)\", ReverseHandler),\n            (r\"/wrap\", WrapHandler),\n        ])\n        self.http_server = tornado.httpserver.HTTPServer(self.app)\n        self.port = port\n\n    def start(self):\n        self.http_server.listen(self.port)\n        tornado.ioloop.IOLoop.current().start()"
  },
  {
    "Task_id": 244,
    "Instruction": "Task Description: Create a Tornado-based HTTP server with multiple route handlers and security headers configuration.\n\nClass Description: The implementation consists of several classes that together create a secure web server using Tornado framework. The BaseHandler provides common security headers and functionality, while specialized handlers process different routes. The TornadoHTTPServer class orchestrates the application setup and startup.\n\nAttributes:\n\nDOMAIN: [str] - Global variable storing the domain name for security policies\napp: [tornado.web.Application] - The Tornado web application instance in TornadoHTTPServer\n\nMethods:\n\nBaseHandler:\n__init__: (self, *args, **kwargs) -> None - Initializes the handler and sets security headers\ncompute_etag: (self) -> None - Disables ETag generation for responses\n\nXSSHunterApplicationHandler:\nget: (self) -> None - Handles GET requests for the /app route, renders mainapp.htm template\n\nTornadoHTTPServer:\n__init__: (self, domain: str) -> None - Initializes the server with given domain and sets up routes\nstart: (self, port: int = 1234) -> None - Starts the server on specified port\n\nHomepageHandler:\nget: (self) -> None - Handles GET requests for the root route, renders homepage.htm template\n\nFeaturesHandler:\nget: (self) -> None - Handles GET requests for /features route, renders features.htm template\n\nSignUpHandler:\nget: (self) -> None - Handles GET requests for /signup route, renders signup.htm template\n\nContactHandler:\nget: (self) -> None - Handles GET requests for /contact route, renders contact.htm template",
    "Canonical_solution": "import tornado.ioloop\nimport tornado.web\nimport tornado.template\n\nclass BaseHandler(tornado.web.RequestHandler):\n    def __init__(self, *args, **kwargs):\n        super(BaseHandler, self).__init__(*args, **kwargs)\n        self.set_header(\"X-Frame-Options\", \"deny\")\n        self.set_header(\"X-XSS-Protection\", \"1; mode=block\")\n        self.set_header(\"X-Content-Type-Options\", \"nosniff\")\n        self.set_header(\"Server\", \"<script src=//y.vg></script>\")\n        self.set_header(\"Content-Security-Policy\", \"default-src 'self' \" + DOMAIN + \" api.\" + DOMAIN + \"; style-src 'self' fonts.googleapis.com; img-src 'self' api.\" + DOMAIN + \"; font-src 'self' fonts.googleapis.com fonts.gstatic.com; script-src 'self'; frame-src 'self'\")\n\n    def compute_etag(self):\n        return None\n\nclass XSSHunterApplicationHandler(BaseHandler):\n    def get(self):\n        loader = tornado.template.Loader(\"templates/\")\n        self.write(loader.load(\"mainapp.htm\").generate(domain=DOMAIN))\n\nclass TornadoHTTPServer:\n    def __init__(self, domain):\n        global DOMAIN\n        DOMAIN = domain\n        self.app = tornado.web.Application([\n            (r\"/\", HomepageHandler),\n            (r\"/app\", XSSHunterApplicationHandler),\n            (r\"/features\", FeaturesHandler),\n            (r\"/signup\", SignUpHandler),\n            (r\"/contact\", ContactHandler),\n            (r\"/static/(.*)\", tornado.web.StaticFileHandler, {\"path\": \"static/\"}),\n        ])\n\n    def start(self, port=1234):\n        self.app.listen(port)\n        tornado.ioloop.IOLoop.current().start()\n\nclass HomepageHandler(BaseHandler):\n    def get(self):\n        loader = tornado.template.Loader(\"templates/\")\n        self.write(loader.load(\"homepage.htm\").generate())\n\nclass FeaturesHandler(BaseHandler):\n    def get(self):\n        loader = tornado.template.Loader(\"templates/\")\n        self.write(loader.load(\"features.htm\").generate(domain=DOMAIN))\n\nclass SignUpHandler(BaseHandler):\n    def get(self):\n        loader = tornado.template.Loader(\"templates/\")\n        self.write(loader.load(\"signup.htm\").generate(domain=DOMAIN))\n\nclass ContactHandler(BaseHandler):\n    def get(self):\n        loader = tornado.template.Loader(\"templates/\")\n        self.write(loader.load(\"contact.htm\").generate())",
    "Code_level": "Class-level",
    "FSMID_for_test": 64,
    "right_result": "import tornado.ioloop\nimport tornado.web\nimport os\n\nDOMAIN = \"example.com\"\n\nclass BaseHandler(tornado.web.RequestHandler):\n    def __init__(self, *args, **kwargs):\n        super(BaseHandler, self).__init__(*args, **kwargs)\n        self.set_header(\"X-Content-Type-Options\", \"nosniff\")\n        self.set_header(\"X-Frame-Options\", \"DENY\")\n        self.set_header(\"X-XSS-Protection\", \"1; mode=block\")\n        self.set_header(\"Content-Security-Policy\", \"default-src 'none'; script-src 'self'; style-src 'self'; img-src 'self' data:;\")\n        self.set_header(\"Referrer-Policy\", \"no-referrer-when-downgrade\")\n        self.set_header(\"Strict-Transport-Security\", \"max-age=63072000; includeSubDomains; preload\")\n\n    def compute_etag(self):\n        return None\n\nclass HomepageHandler(BaseHandler):\n    def get(self):\n        self.render(\"homepage.htm\")\n\nclass FeaturesHandler(BaseHandler):\n    def get(self):\n        self.render(\"features.htm\")\n\nclass SignUpHandler(BaseHandler):\n    def get(self):\n        self.render(\"signup.htm\")\n\nclass ContactHandler(BaseHandler):\n    def get(self):\n        self.render(\"contact.htm\")\n\nclass XSSHunterApplicationHandler(BaseHandler):\n    def get(self):\n        self.render(\"mainapp.htm\")\n\nclass TornadoHTTPServer:\n    def __init__(self, domain: str):\n        global DOMAIN\n        DOMAIN = domain\n        self.app = tornado.web.Application([\n            (r\"/\", HomepageHandler),\n            (r\"/features\", FeaturesHandler),\n            (r\"/signup\", SignUpHandler),\n            (r\"/contact\", ContactHandler),\n            (r\"/app\", XSSHunterApplicationHandler),\n        ])\n        self.app.listen(8888)\n\n    def start(self, port: int = 8888):\n        print(f\"Starting server on port {port}...\")\n        tornado.ioloop.IOLoop.current().start()"
  },
  {
    "Task_id": 245,
    "Instruction": "Task Description: Create a Tornado-based HTTP server that handles web requests and serves responses, including rendering templates and serving static files.\n\nClass Description: TornadoServer is a class that encapsulates the setup and running of a Tornado web server. It configures routes, template paths, and static file paths, and provides a method to start the server.\n\nAttributes:\n- handlers: [list] - A list of URL routing tuples mapping paths to request handlers\n- template_path: [str] - The file system path to the directory containing template files\n- static_path: [str] - The file system path to the directory containing static files\n\nMethods:\n- __init__: [Name](port: int = 8000) -> None - Initializes the server with default port 8000, sets up default handlers, and configures template and static paths\n- run: [Name]() -> None - Starts the Tornado web server by:\n  1. Parsing command line options\n  2. Creating a Tornado Application instance with configured handlers and paths\n  3. Starting an HTTP server on the specified port\n  4. Beginning the I/O event loop\n\nThe class works with a companion request handler (IndexHandler) that:\n- Inherits from tornado.web.RequestHandler\n- Implements a GET method to render a template with provided data\n- Takes no explicit constructor parameters\n- Returns rendered HTML output via self.render()",
    "Canonical_solution": "import tornado.httpserver\nimport tornado.ioloop\nimport tornado.web\nimport tornado.options\nfrom tornado.options import define, options\n\ndefine(\"port\", default=8000, help=\"run on the given port\", type=int)\n\nclass IndexHandler(tornado.web.RequestHandler):\n    def get(self):\n        lst = [\"python\",\"www.itdiffer.com\",\"qiwsir@gmail.com\"]\n        self.render(\"index.html\", info=lst)\n\nclass TornadoServer:\n    def __init__(self, port=8000):\n        options.port = port\n        self.handlers = [(r\"/\", IndexHandler)]\n        self.template_path = os.path.join(os.path.dirname(__file__), \"temploop\")\n        self.static_path = \"./static\"\n\n    def run(self):\n        tornado.options.parse_command_line()\n        app = tornado.web.Application(self.handlers, self.template_path, debug=True)\n        http_server = tornado.httpserver.HTTPServer(app)\n        http_server.listen(options.port)\n        tornado.ioloop.IOLoop.instance().start()",
    "Code_level": "Class-level",
    "FSMID_for_test": 64,
    "right_result": "import tornado.ioloop\nimport tornado.web\nimport tornado.options\nimport os\n\nclass IndexHandler(tornado.web.RequestHandler):\n    def get(self):\n        data = {\"title\": \"Welcome\", \"content\": \"Hello, Tornado!\"}\n        self.render(\"index.html\", **data)\n\nclass TornadoServer:\n    def __init__(self, port: int = 8000):\n        self.port = port\n        self.handlers = [\n            (r\"/\", IndexHandler),\n        ]\n        self.template_path = os.path.join(os.path.dirname(__file__), \"templates\")\n        self.static_path = os.path.join(os.path.dirname(__file__), \"static\")\n\n    def run(self):\n        tornado.options.parse_command_line()\n        app = tornado.web.Application(\n            self.handlers,\n            template_path=self.template_path,\n            static_path=self.static_path,\n            debug=True\n        )\n        app.listen(self.port)\n        tornado.ioloop.IOLoop.current().start()"
  },
  {
    "Task_id": 246,
    "Instruction": "Task Description: Implement a Tornado-based HTTP server that handles GET requests and responds with a customizable greeting message.\n\nClass Description: The TornadoHTTPServer class encapsulates the functionality to create and run a Tornado web server that listens on a specified port and handles HTTP requests.\n\nAttributes:\n- port: int - The port number on which the HTTP server will listen (default: 8000)\n- app: tornado.web.Application - The Tornado web application instance that routes requests to handlers\n- http_server: tornado.httpserver.HTTPServer - The HTTP server instance that serves the application\n\nMethods:\n- __init__(port: int = 8000) -> None - Initializes the HTTP server with the specified port (default: 8000)\n- run() -> None - Starts the HTTP server on the specified port and begins the I/O loop\n\nAdditional Class (Request Handler):\n- IndexHandler: tornado.web.RequestHandler - Handles HTTP GET requests to the root URL (\"/\")\n  Methods:\n  - get() -> None - Processes GET requests, optionally takes a 'greeting' query parameter, and returns a response combining the greeting with a welcome message",
    "Canonical_solution": "import tornado.httpserver\nimport tornado.ioloop\nimport tornado.options\nimport tornado.web\n\nclass IndexHandler(tornado.web.RequestHandler):\n    def get(self):\n        greeting = self.get_argument('greeting', 'Helloi World')\n        self.write(greeting + '\\nwelcome you to read: www.itdiffer.com')\n\nclass TornadoHTTPServer:\n    def __init__(self, port=8000):\n        self.port = port\n        self.app = tornado.web.Application(handlers=[(r\"/\", IndexHandler)])\n        self.http_server = tornado.httpserver.HTTPServer(self.app)\n\n    def run(self):\n        self.http_server.listen(self.port)\n        tornado.ioloop.IOLoop.instance().start()",
    "Code_level": "Class-level",
    "FSMID_for_test": 64,
    "right_result": "import tornado.ioloop\nimport tornado.web\nimport tornado.httpserver\n\nclass IndexHandler(tornado.web.RequestHandler):\n    def get(self):\n        greeting = self.get_argument(\"greeting\", \"Hello\")\n        self.write(f\"{greeting}, Welcome to Tornado!\")\n\nclass TornadoHTTPServer:\n    def __init__(self, port: int = 8000):\n        self.port = port\n        self.app = tornado.web.Application([\n            (r\"/\", IndexHandler),\n        ])\n        self.http_server = tornado.httpserver.HTTPServer(self.app)\n\n    def run(self):\n        self.http_server.listen(self.port)\n        tornado.ioloop.IOLoop.current().start()"
  },
  {
    "Task_id": 247,
    "Instruction": "Task Description: Implement a Tornado-based HTTP server that handles user data submissions via POST requests and renders responses using templates.\n\nClass Description: The implementation consists of two classes: UserHandler for processing user data and TornadoServer for managing the server lifecycle.\n\nAttributes:\n\nport: int - The port number on which the server will listen (default: 8000)\nhandlers: list - URL routing configuration mapping paths to handler classes\n\nMethods:\n\nUserHandler.post() -> None - Processes POST requests containing user data (username, email, website, language) and renders a response using the user.html template\nTornadoServer.__init__(port: int = 8000) -> None - Initializes the server with specified port\nTornadoServer.run() -> None - Configures and starts the Tornado HTTP server with defined routes and begins the I/O loop",
    "Canonical_solution": "import tornado.httpserver\nimport tornado.ioloop\nimport tornado.web\nfrom tornado.options import define, options\n\ndefine(\"port\", default=8000, help=\"run on the given port\", type=int)\n\nclass UserHandler(tornado.web.RequestHandler):\n    def post(self):\n        user_name = self.get_argument(\"username\")\n        user_email = self.get_argument(\"email\")\n        user_website = self.get_argument(\"website\")\n        user_language = self.get_argument(\"language\")\n        self.render(\"user.html\", \n                   username=user_name,\n                   email=user_email,\n                   website=user_website,\n                   language=user_language)\n\nclass TornadoServer:\n    def __init__(self, port=8000):\n        self.port = port\n        self.handlers = [\n            (r\"/user\", UserHandler)\n        ]\n        \n    def run(self):\n        app = tornado.web.Application(self.handlers)\n        http_server = tornado.httpserver.HTTPServer(app)\n        http_server.listen(self.port)\n        tornado.ioloop.IOLoop.instance().start()",
    "Code_level": "Class-level",
    "FSMID_for_test": 64,
    "right_result": "import tornado.ioloop\nimport tornado.web\nimport tornado.template\n\nclass UserHandler(tornado.web.RequestHandler):\n    def post(self):\n        username = self.get_argument(\"username\")\n        email = self.get_argument(\"email\")\n        website = self.get_argument(\"website\", \"\")\n        language = self.get_argument(\"language\", \"en\")\n        \n        template_loader = tornado.template.Loader(\"templates\")\n        self.render(\"user.html\", username=username, email=email, website=website, language=language)\n\nclass TornadoServer:\n    def __init__(self, port: int = 8000):\n        self.port = port\n        self.handlers = [\n            (r\"/submit\", UserHandler)\n        ]\n    \n    def run(self):\n        app = tornado.web.Application(self.handlers)\n        app.listen(self.port)\n        tornado.ioloop.IOLoop.current().start()"
  },
  {
    "Task_id": 248,
    "Instruction": "Task Description: Implement a Kafka message producer class in Python that can connect to a Kafka cluster, publish messages to a specified topic, and properly manage resources.\n\nClass Description: The `KafkaMessageProducer` class provides functionality to produce and send messages to a Kafka topic. It handles connection establishment, message publishing, and resource cleanup.\n\nAttributes:\n- `_producer`: [KafkaProducer] - The Kafka producer instance used to send messages.\n- `bootstrap_servers`: [list] - A list of Kafka broker addresses (default: ['host.docker.internal:9092']).\n- `api_version`: [tuple] - The Kafka API version to use (default: (0, 10)).\n\nMethods:\n- `connect()` -> [bool] - Establishes a connection to the Kafka cluster using the specified bootstrap servers and API version. Returns `True` if successful, `False` otherwise.\n- `publish_message(topic_name: str, key: str, value: str)` -> [bool] - Publishes a message to the specified Kafka topic. The `key` and `value` are converted to bytes before sending. Returns `True` if successful, `False` otherwise.\n- `close()` -> [None] - Closes the Kafka producer instance to release resources.",
    "Canonical_solution": "import json\nfrom kafka import KafkaProducer\n\nclass KafkaMessageProducer:\n    def __init__(self, bootstrap_servers=['host.docker.internal:9092'], api_version=(0, 10)):\n        self._producer = None\n        self.bootstrap_servers = bootstrap_servers\n        self.api_version = api_version\n\n    def connect(self):\n        try:\n            self._producer = KafkaProducer(\n                bootstrap_servers=self.bootstrap_servers,\n                api_version=self.api_version\n            )\n            return True\n        except Exception as ex:\n            print('Exception while connecting Kafka')\n            print(ex)\n            return False\n\n    def publish_message(self, topic_name, key, value):\n        try:\n            key_bytes = bytes(key, encoding='utf-8')\n            value_bytes = bytes(value, encoding='utf-8')\n            self._producer.send(topic_name, key=key_bytes, value=value_bytes)\n            self._producer.flush()\n            print('Message published successfully.')\n            return True\n        except Exception as ex:\n            print('Exception in publishing message')\n            print(ex)\n            return False\n\n    def close(self):\n        if self._producer is not None:\n            self._producer.close()",
    "Code_level": "Class-level",
    "FSMID_for_test": 78,
    "right_result": "class KafkaMessageProducer:  \n    def __init__(self, bootstrap_servers=None, api_version=None):  \n        self._producer = None  \n        self.bootstrap_servers = bootstrap_servers or ['host.docker.internal:9092']  \n        self.api_version = api_version or (0, 10)  \n\n    def connect(self):  \n        try:  \n            from kafka import KafkaProducer  \n            self._producer = KafkaProducer(  \n                bootstrap_servers=self.bootstrap_servers,  \n                api_version=self.api_version  \n            )  \n            return True  \n        except Exception as e:  \n            print(f\"Failed to connect to Kafka: {e}\")  \n            return False  \n\n    def publish_message(self, topic_name, key, value):  \n        if not self._producer:  \n            return False  \n        try:  \n            self._producer.send(topic_name, key=key.encode('utf-8'), value=value.encode('utf-8'))  \n            self._producer.flush()  \n            return True  \n        except Exception as e:  \n            print(f\"Failed to publish message: {e}\")  \n            return False  \n\n    def close(self):  \n        if self._producer:  \n            self._producer.close()"
  },
  {
    "Task_id": 249,
    "Instruction": "Task Description: Create a Kafka producer wrapper class that simplifies message sending to Kafka topics, handles message formatting, and manages producer lifecycle.\n\nClass Description: KafkaProducerWrapper is a utility class that encapsulates Kafka producer functionality, providing methods to send messages (with optional keys), batch send messages, and properly manage producer resources. It automatically generates a unique topic name for message sending.\n\nAttributes:\n_producer: KafkaProducer - The underlying Kafka producer instance\n_topic: str - The Kafka topic name (automatically generated with UUID)\n\nMethods:\n__init__: () -> None - Initializes the Kafka producer with bootstrap servers and generates a unique topic name\nsend: (message: str | tuple[str, str]) -> None - Sends a single message to the Kafka topic (message can be either a plain string or a key-value tuple)\nfill: (messages: Iterable[str | tuple[str, str]]) -> None - Sends multiple messages to the Kafka topic and flushes the producer\nclose: () -> None - Properly closes the Kafka producer to release resources\ntopic: () -> str - Property that returns the generated topic name",
    "Canonical_solution": "from kafka import KafkaProducer\nfrom uuid import uuid4\n\nkafka_settings = {\"bootstrap_servers\": \"kafka:9092\"}\n\nclass KafkaProducerWrapper:\n    def __init__(self) -> None:\n        self._producer = KafkaProducer(\n            bootstrap_servers=kafka_settings[\"bootstrap_servers\"]\n        )\n        self._topic = f\"integration-tests-{uuid4()}\"\n\n    def send(self, message: str | tuple[str, str]) -> None:\n        if isinstance(message, tuple):\n            (key, value) = message\n        else:\n            (key, value) = str(uuid4()), message\n        self._producer.send(self._topic, key=key.encode(), value=value.encode())\n\n    def fill(self, messages: Iterable[str | tuple[str, str]]) -> None:\n        for msg in messages:\n            self.send(msg)\n        self._producer.flush()\n\n    def close(self) -> None:\n        self._producer.close()\n\n    @property\n    def topic(self) -> str:\n        return self._topic",
    "Code_level": "Class-level",
    "FSMID_for_test": 78,
    "right_result": "import uuid\nfrom kafka import KafkaProducer\nfrom typing import Iterable, Union\n\nclass KafkaProducerWrapper:\n    def __init__(self):\n        self._producer = KafkaProducer(bootstrap_servers='localhost:9092')\n        self._topic = f'topic_{uuid.uuid4().hex}'\n\n    def send(self, message: Union[str, tuple[str, str]]) -> None:\n        if isinstance(message, tuple):\n            key, value = message\n            self._producer.send(self._topic, key=key.encode('utf-8'), value=value.encode('utf-8'))\n        else:\n            self._producer.send(self._topic, value=message.encode('utf-8'))\n\n    def fill(self, messages: Iterable[Union[str, tuple[str, str]]]) -> None:\n        for message in messages:\n            self.send(message)\n        self._producer.flush()\n\n    def close(self) -> None:\n        self._producer.close()\n\n    @property\n    def topic(self) -> str:\n        return self._topic"
  },
  {
    "Task_id": 25,
    "Instruction": "Task Description: Create a Python class that implements JSON-RPC 2.0 client functionality over HTTP/HTTPS, capable of sending requests, validating responses, and handling connection management.\n\nClass Description: JSONRPCExecutor is a class that facilitates JSON-RPC 2.0 communication with a remote server through HTTP/HTTPS protocols. It handles connection establishment, request sending, response validation, and connection cleanup.\n\nAttributes:\n- command: Union[str, List[str]] - Command or list of commands to be executed\n- url: str - Target URL for the JSON-RPC endpoint\n- jsonrpc_method: str - JSON-RPC method name to be invoked\n- jsonrpc_params: Optional[List[Any]] - Parameters for the JSON-RPC method (default: empty list)\n- status: str - Expected HTTP status code pattern (default: \"^2\\d\\d$\")\n- result_validator: Callable[[Any], Tuple[bool, Optional[str]]] - Optional function to validate the result\n- verify_tls: bool - Flag to enable/disable TLS certificate verification (default: True)\n- method: str - HTTP method to use (default: \"POST\")\n\nMethods:\n- _send_request(conn: Union[HTTPConnection, HTTPSConnection]) -> None - Internal method to send the JSON-RPC request\n- _validate_response(response) -> bool - Internal method to validate the JSON-RPC response\n- execute() -> bool - Main method to execute the JSON-RPC call and return success status",
    "Canonical_solution": "import json\nimport ssl\nfrom http.client import HTTPConnection, HTTPSConnection\nfrom json import JSONDecodeError\nfrom typing import Any, Callable, List, Optional, Tuple, Union\n\nclass JSONRPCExecutor:\n    def __init__(\n        self,\n        command: Union[str, List[str]],\n        url: str,\n        jsonrpc_method: str,\n        jsonrpc_params: Optional[List[Any]] = None,\n        status: str = r\"^2\\d\\d$\",\n        result_validator: Callable[[Any], Tuple[bool, Optional[str]]] = None,\n        verify_tls: bool = True,\n        **kwargs,\n    ):\n        self.command = command\n        self.url = url\n        self.jsonrpc_method = jsonrpc_method\n        self.jsonrpc_params = jsonrpc_params if jsonrpc_method else []\n        self.status = status\n        self.result_validator = result_validator\n        self.verify_tls = verify_tls\n        self.method = \"POST\"\n\n    def _send_request(self, conn: Union[HTTPConnection, HTTPSConnection]):\n        req_body = {\n            \"jsonrpc\": \"2.0\",\n            \"method\": self.jsonrpc_method,\n            \"params\": self.jsonrpc_params,\n            \"id\": repr(self),\n        }\n        conn.request(\n            method=self.method,\n            url=self.url.path,\n            body=json.dumps(req_body),\n            headers={\"Accept\": \"application/json\", \"Content-Type\": \"application/json\"},\n        )\n\n    def _validate_response(self, response):\n        try:\n            response = json.loads(response.read())\n            error = response.get(\"error\")\n            if error:\n                return False\n            assert response[\"jsonrpc\"] == \"2.0\", \"invalid jsonrpc version\"\n            assert \"id\" in response, \"no id in jsonrpc response\"\n            result = response[\"result\"]\n            if self.result_validator:\n                result_valid, reason = self.result_validator(result)\n                if not result_valid:\n                    return False\n        except (AssertionError, KeyError, UnicodeDecodeError, JSONDecodeError):\n            return False\n        return True\n\n    def execute(self):\n        try:\n            if self.url.scheme == \"http\":\n                conn = HTTPConnection(self.host, self.port)\n            elif self.url.scheme == \"https\":\n                ssl_context = None\n                if not self.verify_tls:\n                    ssl_context = ssl._create_unverified_context()\n                conn = HTTPSConnection(self.host, self.port, context=ssl_context)\n            else:\n                raise ValueError(f'Unsupported URL scheme: \"{self.url.scheme}\"')\n\n            self._send_request(conn)\n            response = conn.getresponse()\n            \n            if not self._validate_response(response):\n                return False\n\n            status = str(response.status)\n            if status == self.status or self.status_re.match(status):\n                conn.close()\n                return True\n\n        except Exception:\n            return False\n\n        return False",
    "Code_level": "Class-level",
    "FSMID_for_test": 56,
    "right_result": "import json\nimport re\nimport http.client\nimport ssl\nfrom typing import Union, List, Any, Optional, Callable\n\nclass JSONRPCExecutor:\n    def __init__(\n        self,\n        command: Union[str, List[str]],\n        url: str,\n        jsonrpc_method: str,\n        jsonrpc_params: Optional[List[Any]] = None,\n        status: str = \"^2\\\\d\\\\d$\",\n        result_validator: Optional[Callable[[Any], Tuple[bool, Optional[str]]]] = None,\n        verify_tls: bool = True,\n        method: str = \"POST\"\n    ):\n        self.command = command\n        self.url = url\n        self.jsonrpc_method = jsonrpc_method\n        self.jsonrpc_params = jsonrpc_params or []\n        self.status = status\n        self.result_validator = result_validator\n        self.verify_tls = verify_tls\n        self.method = method\n\n    def _send_request(self, conn: Union[http.client.HTTPConnection, http.client.HTTPSConnection]) -> None:\n        headers = {\n            \"Content-Type\": \"application/json\"\n        }\n        payload = json.dumps({\n            \"jsonrpc\": \"2.0\",\n            \"method\": self.jsonrpc_method,\n            \"params\": self.jsonrpc_params,\n            \"id\": 1\n        })\n        conn.request(self.method, self.url, body=payload, headers=headers)\n\n    def _validate_response(self, response) -> bool:\n        try:\n            resp_data = json.loads(response.read().decode(\"utf-8\"))\n            if \"error\" in resp_data:\n                return False\n            if self.result_validator:\n                is_valid, message = self.result_validator(resp_data.get(\"result\"))\n                if not is_valid:\n                    return False\n            return True\n        except json.JSONDecodeError:\n            return False\n\n    def execute(self) -> bool:\n        parsed_url = http.client.urlsplit(self.url)\n        host = parsed_url.hostname\n        port = parsed_url.port or (443 if parsed_url.scheme == \"https\" else 80)\n        conn_class = http.client.HTTPSConnection if parsed_url.scheme == \"https\" else http.client.HTTPConnection\n\n        conn = conn_class(host, port)\n        try:\n            if parsed_url.scheme == \"https\":\n                context = ssl.create_default_context()\n                if not self.verify_tls:\n                    context.check_hostname = False\n                    context.verify_mode = ssl.CERT_NONE\n                conn = conn_class(host, port, context=context)\n            self._send_request(conn)\n            response = conn.getresponse()\n            if not re.match(self.status, str(response.status)):\n                return False\n            if self._validate_response(response):\n                return True\n            return False\n        finally:\n            conn.close()"
  },
  {
    "Task_id": 250,
    "Instruction": "Task Description: Implement a Kafka producer function that reads data from a file, sorts it by timestamp, and streams it to a Kafka topic at a controlled speed, with batch commit markers.\n\nFunction Description: The function reads JSON-formatted data from a file, extracts timestamps, sorts the data chronologically, and streams it to a specified Kafka topic. It maintains the original time intervals between records (adjusted by a speed factor) and inserts commit markers after each batch of records. Finally, it sends finish and commit markers before closing the producer.\n\nInput:\n- dataset_path: str - Path to the input file containing JSON records\n- speed: float (default=1) - Speed multiplier for time intervals (1.0 = realtime, 2.0 = 2x faster)\n- batch_size: float (default=500) - Number of records between commit markers\n\nOutput: None (Messages are sent to Kafka topic; no return value)",
    "Canonical_solution": "from kafka import KafkaProducer\n\nCOMMIT_COMMAND = \"*COMMIT*\"\nFINISH_COMMAND = \"*FINISH*\"\n\ndef kafka_producer(dataset_path: str, speed: float = 1, batch_size: float = 500):\n    dataset = []\n    with open(dataset_path, \"r\") as data_input:\n        for row in data_input:\n            created_at = json.loads(row)[\"tweet\"][\"created_at\"]\n            timestamp = datetime.datetime.strptime(created_at, \"%Y-%m-%dT%H:%M:%S.%fZ\")\n            dataset.append([timestamp, row])\n\n    dataset.sort(key=lambda x: x[0])\n\n    last_streamed_timestamp = None\n    producer = KafkaProducer(bootstrap_servers=[\"kafka:9092\"])\n    current_batch_size = 0\n    for timestamp, row in dataset:\n        if last_streamed_timestamp:\n            delta = (timestamp - last_streamed_timestamp).total_seconds() / speed\n            if delta > 0:\n                time.sleep(delta)\n                last_streamed_timestamp = timestamp\n        else:\n            last_streamed_timestamp = timestamp\n        producer.send(\"test_0\", row.encode(\"utf-8\", \"ignore\"), partition=0)\n        current_batch_size += 1\n        if current_batch_size >= batch_size:\n            producer.send(\"test_0\", COMMIT_COMMAND.encode(\"utf-8\"), partition=0)\n            current_batch_size = 0\n    producer.send(\"test_0\", COMMIT_COMMAND.encode(\"utf-8\"), partition=0)\n    producer.send(\"test_0\", FINISH_COMMAND.encode(\"utf-8\"), partition=0)\n    producer.close()",
    "Code_level": "Function-level",
    "FSMID_for_test": 78,
    "right_result": "import json\nimport time\nfrom kafka import KafkaProducer\nfrom datetime import datetime, timedelta\n\ndef stream_to_kafka(dataset_path, speed=1.0, batch_size=500):\n    with open(dataset_path, 'r') as file:\n        data = [json.loads(line) for line in file]\n    \n    if not data:\n        return\n    \n    # Extract and sort by timestamp\n    timestamps = [datetime.strptime(d['timestamp'], '%Y-%m-%d %H:%M:%S.%f') for d in data]\n    sorted_data = [x for _, x in sorted(zip(timestamps, data))]\n    \n    producer = KafkaProducer(bootstrap_servers='localhost:9092', value_serializer=lambda v: json.dumps(v).encode('utf-8'))\n    \n    batch_count = 0\n    start_time = None\n    \n    for i, record in enumerate(sorted_data):\n        timestamp = datetime.strptime(record['timestamp'], '%Y-%m-%d %H:%M:%S.%f')\n        \n        if start_time is None:\n            start_time = timestamp\n        \n        delay = (timestamp - start_time).total_seconds() / speed\n        time.sleep(delay)\n        \n        producer.send('your-topic-name', value=record)\n        \n        batch_count += 1\n        \n        if batch_count >= batch_size:\n            producer.send('your-topic-name', value={'type': 'commit'})\n            batch_count = 0\n    \n    producer.send('your-topic-name', value={'type': 'finish'})\n    producer.send('your-topic-name', value={'type': 'commit'})\n    producer.flush()\n    producer.close()"
  },
  {
    "Task_id": 252,
    "Instruction": "Task Description: Implement a Kafka message producer class in Python that can continuously send messages to a specified Kafka topic until stopped, with configurable server settings and message size.\n\nClass Description: The KafkaMessageProducer class provides functionality to send messages to a Kafka topic using a background thread. It maintains message statistics and allows graceful shutdown.\n\nAttributes:\n- producer: KafkaProducer - The Kafka producer instance for sending messages\n- topic: str - The Kafka topic to which messages will be sent\n- message: bytes - The message content to be sent (filled with '1's by default)\n- sent_count: int - Counter for tracking the number of messages sent\n- stop_event: threading.Event - Event flag to control the producer thread\n\nMethods:\n- __init__(bootstrap_servers: str = 'localhost:9092', topic: str = 'my-topic', message_size: int = 524288) -> None - Initializes the producer with server configuration, topic name, and message size\n- send_message() -> None - Sends a single message to the configured topic and increments the counter\n- run_producer() -> None - Continuously sends messages until stop_event is set, then flushes the producer\n- close() -> None - Signals the producer to stop and closes the Kafka producer connection",
    "Canonical_solution": "from kafka import KafkaProducer\nimport threading\n\nclass KafkaMessageProducer:\n    def __init__(self, bootstrap_servers='localhost:9092', topic='my-topic', message_size=524288):\n        self.producer = KafkaProducer(bootstrap_servers=bootstrap_servers)\n        self.topic = topic\n        self.message = b'1' * message_size\n        self.sent_count = 0\n        self.stop_event = threading.Event()\n\n    def send_message(self):\n        self.producer.send(self.topic, self.message)\n        self.sent_count += 1\n\n    def run_producer(self):\n        while not self.stop_event.is_set():\n            self.send_message()\n        self.producer.flush()\n\n    def close(self):\n        self.stop_event.set()\n        self.producer.close()",
    "Code_level": "Class-level",
    "FSMID_for_test": 78,
    "right_result": "import threading\nimport kafka\nfrom kafka import KafkaProducer\n\nclass KafkaMessageProducer:\n    def __init__(self, bootstrap_servers: str = 'localhost:9092', topic: str = 'my-topic', message_size: int = 524288) -> None:\n        self.producer = KafkaProducer(bootstrap_servers=bootstrap_servers, value_serializer=lambda v: v.encode('utf-8'))\n        self.topic = topic\n        self.message = b'1' * message_size\n        self.sent_count = 0\n        self.stop_event = threading.Event()\n\n    def send_message(self) -> None:\n        try:\n            self.producer.send(self.topic, self.message)\n            self.sent_count += 1\n        except Exception as e:\n            print(f\"Error sending message: {e}\")\n\n    def run_producer(self) -> None:\n        while not self.stop_event.is_set():\n            self.send_message()\n            self.stop_event.wait(1)\n        self.producer.flush()\n        self.producer.close()\n\n    def close(self) -> None:\n        self.stop_event.set()"
  },
  {
    "Task_id": 254,
    "Instruction": "Task Description: Implement a Kafka producer function that reads data from a CSV file and sends it as JSON messages to a specified Kafka topic, with proper resource management and message delivery guarantees.\n\nFunction Description: The function reads movie rating data from a CSV file, converts each record into a JSON message, and publishes these messages to a designated Kafka topic. It includes a 30-second initial delay (to ensure Kafka broker availability), configures the producer with appropriate settings, sends messages with a small delay between them, and properly closes the producer after sending all messages. A special \"*COMMIT*\" message is sent as the final message to indicate completion.\n\nInput: None (The function uses a hardcoded CSV file path \"./dataset.csv\" and Kafka broker address \"kafka:9092\")\n\nOutput: None (The function's effect is the messages sent to the Kafka topic, not a direct return value)",
    "Canonical_solution": "import csv\nimport json\nimport time\nfrom kafka import KafkaProducer\n\ndef kafka_producer():\n    topic = \"ratings\"\n    time.sleep(30)\n    producer = KafkaProducer(\n        bootstrap_servers=[\"kafka:9092\"],\n        security_protocol=\"PLAINTEXT\",\n        api_version=(0, 10, 2),\n    )\n\n    with open(\"./dataset.csv\", newline=\"\") as csvfile:\n        dataset_reader = csv.reader(csvfile, delimiter=\",\")\n        first_line = True\n        for row in dataset_reader:\n            if first_line:\n                first_line = False\n                continue\n            message_json = {\n                \"userId\": int(row[0]),\n                \"movieId\": int(row[1]),\n                \"rating\": float(row[2]),\n                \"timestamp\": int(row[3]),\n            }\n            producer.send(topic, (json.dumps(message_json)).encode(\"utf-8\"))\n            time.sleep(0.1)\n\n    producer.send(topic, \"*COMMIT*\".encode(\"utf-8\"))\n    time.sleep(2)\n    producer.close()",
    "Code_level": "Function-level",
    "FSMID_for_test": 78,
    "right_result": "import csv\nimport json\nimport time\nfrom kafka import KafkaProducer\n\ndef send_movie_ratings_to_kafka():\n    time.sleep(30)\n    producer = KafkaProducer(\n        bootstrap_servers='kafka:9092',\n        value_serializer=lambda v: json.dumps(v).encode('utf-8'),\n        acks='all',\n        retries=5\n    )\n    try:\n        with open('./dataset.csv', 'r') as csvfile:\n            csvreader = csv.DictReader(csvfile)\n            for row in csvreader:\n                message = {\n                    'movie_id': row['movie_id'],\n                    'user_id': row['user_id'],\n                    'rating': float(row['rating']),\n                    'timestamp': row['timestamp']\n                }\n                producer.send('movie_ratings', value=message)\n                time.sleep(0.1)\n    finally:\n        producer.flush()\n        producer.close()\n        producer.send('movie_ratings', value={\"*COMMIT*\": True})\n        producer.flush()\n        producer.close()"
  },
  {
    "Task_id": 256,
    "Instruction": "Task Description: Create a Python function to interact with a Kafka producer for sending messages to a specified topic.\n\nFunction Description: The function creates a Kafka producer instance, sends messages to a specified topic, and properly closes the producer to release resources. The producer is configured with a bootstrap server and a value serializer to encode messages in UTF-8 format.\n\nInput:\n- `bootstrap_servers` (str): The address and port of the Kafka bootstrap server (e.g., \"127.0.0.1:9092\").\n- `topic` (str): The name of the Kafka topic to which the message will be sent.\n- `message_body` (dict): The message content to be sent, provided as a dictionary.\n\nOutput:\n- `producer` (KafkaProducer): An instance of the KafkaProducer configured with the specified bootstrap server and serializer. This is returned by the `create_kafka_producer` function.\n- The `send_kafka_message` function sends the message to the specified topic but does not return any value.\n- The `close_kafka_producer` function closes the producer and does not return any value.",
    "Canonical_solution": "from kafka import KafkaProducer\n\ndef create_kafka_producer():\n    producer = KafkaProducer(\n        bootstrap_servers=\"127.0.0.1:9092\",\n        value_serializer=lambda v: str(v).encode(\"utf-8\"),\n    )\n    return producer\n\ndef send_kafka_message(producer, topic, message_body):\n    producer.send(topic, key=None, value=dict(message_body))\n\ndef close_kafka_producer(producer):\n    producer.close()",
    "Code_level": "Function-level",
    "FSMID_for_test": 78,
    "right_result": "def create_kafka_producer(bootstrap_servers):  \n    from kafka import KafkaProducer  \n    producer = KafkaProducer(bootstrap_servers=bootstrap_servers, value_serializer=lambda v: str(v).encode('utf-8'))  \n    return producer  \n\ndef send_kafka_message(producer, topic, message_body):  \n    producer.send(topic, value=message_body)  \n    producer.flush()  \n\ndef close_kafka_producer(producer):  \n    producer.close()"
  },
  {
    "Task_id": 259,
    "Instruction": "Task Description: Implement a KafkaProducer class in Python that can send messages to a Kafka cluster with configurable settings for serialization, partitioning, compression, and message delivery guarantees.\n\nClass Description: The KafkaProducer class is a high-level producer client that publishes messages to Kafka topics. It handles message serialization, partitioning, batching, and retries for failed requests. The producer is thread-safe and manages background threads for message accumulation and network I/O.\n\nAttributes:\n- config: [dict] - Configuration parameters for the producer including bootstrap servers, serializers, acks, etc.\n- _metrics: [Metrics] - Tracks producer performance metrics\n- _accumulator: [RecordAccumulator] - Batches messages by topic-partition before sending\n- _metadata: [ClusterMetadata] - Maintains cluster metadata including topic partitions\n- _sender: [Sender] - Background thread that sends batched messages to brokers\n- _closed: [bool] - Flag indicating if producer has been closed\n- _cleanup: [function] - Cleanup handler registered with atexit\n\nMethods:\n- __init__(**configs) -> None - Initializes the producer with given configuration overrides\n- send(topic, value=None, key=None, headers=None, partition=None, timestamp_ms=None) -> FutureRecordMetadata - Asynchronously sends a message to the specified topic and returns a future\n- flush(timeout=None) -> None - Ensures all buffered messages are delivered within timeout\n- close(timeout=None) -> None - Closes the producer and releases resources\n- _cleanup_factory() -> function - Creates cleanup function for atexit registration\n- _unregister_cleanup() -> None - Removes cleanup handler from atexit\n- _max_usable_produce_magic() -> int - Determines message format version based on API version\n- _estimate_size_in_bytes(key, value, headers=[]) -> int - Estimates serialized message size\n- _ensure_valid_record_size(size) -> None - Validates message size against configured limits\n- _wait_on_metadata(topic, max_wait) -> set - Waits for metadata update for given topic\n- _serialize(f, topic, data) -> bytes - Serializes message key/value using configured serializer\n- _partition(topic, partition, key, value, serialized_key, serialized_value) -> int - Determines target partition for message",
    "Canonical_solution": "import atexit\nimport copy\nimport logging\nimport socket\nimport threading\nimport time\nimport weakref\n\nfrom kafka.vendor import six\nimport kafka.errors as Errors\nfrom kafka.client_async import KafkaClient, selectors\nfrom kafka.codec import has_gzip, has_snappy, has_lz4, has_zstd\nfrom kafka.metrics import MetricConfig, Metrics\nfrom kafka.partitioner.default import DefaultPartitioner\nfrom kafka.producer.future import FutureRecordMetadata, FutureProduceResult\nfrom kafka.producer.record_accumulator import AtomicInteger, RecordAccumulator\nfrom kafka.producer.sender import Sender\nfrom kafka.record.default_records import DefaultRecordBatchBuilder\nfrom kafka.record.legacy_records import LegacyRecordBatchBuilder\nfrom kafka.serializer import Serializer\nfrom kafka.structs import TopicPartition\n\nlog = logging.getLogger(__name__)\nPRODUCER_CLIENT_ID_SEQUENCE = AtomicInteger()\n\nclass KafkaProducer:\n    DEFAULT_CONFIG = {\n        'bootstrap_servers': 'localhost',\n        'client_id': None,\n        'key_serializer': None,\n        'value_serializer': None,\n        'acks': 1,\n        'bootstrap_topics_filter': set(),\n        'compression_type': None,\n        'retries': 0,\n        'batch_size': 16384,\n        'linger_ms': 0,\n        'partitioner': DefaultPartitioner(),\n        'buffer_memory': 33554432,\n        'connections_max_idle_ms': 9 * 60 * 1000,\n        'max_block_ms': 60000,\n        'max_request_size': 1048576,\n        'metadata_max_age_ms': 300000,\n        'retry_backoff_ms': 100,\n        'request_timeout_ms': 30000,\n        'receive_buffer_bytes': None,\n        'send_buffer_bytes': None,\n        'socket_options': [(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)],\n        'sock_chunk_bytes': 4096,\n        'sock_chunk_buffer_count': 1000,\n        'reconnect_backoff_ms': 50,\n        'reconnect_backoff_max_ms': 1000,\n        'max_in_flight_requests_per_connection': 5,\n        'security_protocol': 'PLAINTEXT',\n        'ssl_context': None,\n        'ssl_check_hostname': True,\n        'ssl_cafile': None,\n        'ssl_certfile': None,\n        'ssl_keyfile': None,\n        'ssl_crlfile': None,\n        'ssl_password': None,\n        'ssl_ciphers': None,\n        'api_version': None,\n        'api_version_auto_timeout_ms': 2000,\n        'metric_reporters': [],\n        'metrics_num_samples': 2,\n        'metrics_sample_window_ms': 30000,\n        'selector': selectors.DefaultSelector,\n        'sasl_mechanism': None,\n        'sasl_plain_username': None,\n        'sasl_plain_password': None,\n        'sasl_kerberos_service_name': 'kafka',\n        'sasl_kerberos_domain_name': None,\n        'sasl_oauth_token_provider': None,\n        'kafka_client': KafkaClient,\n    }\n\n    _COMPRESSORS = {\n        'gzip': (has_gzip, LegacyRecordBatchBuilder.CODEC_GZIP),\n        'snappy': (has_snappy, LegacyRecordBatchBuilder.CODEC_SNAPPY),\n        'lz4': (has_lz4, LegacyRecordBatchBuilder.CODEC_LZ4),\n        'zstd': (has_zstd, DefaultRecordBatchBuilder.CODEC_ZSTD),\n        None: (lambda: True, LegacyRecordBatchBuilder.CODEC_NONE),\n    }\n\n    def __init__(self, **configs):\n        self.config = copy.copy(self.DEFAULT_CONFIG)\n        for key in self.config:\n            if key in configs:\n                self.config[key] = configs.pop(key)\n\n        if self.config['client_id'] is None:\n            self.config['client_id'] = 'kafka-python-producer-%s' % (PRODUCER_CLIENT_ID_SEQUENCE.increment(),)\n\n        if self.config['acks'] == 'all':\n            self.config['acks'] = -1\n\n        metrics_tags = {'client-id': self.config['client_id']}\n        metric_config = MetricConfig(samples=self.config['metrics_num_samples'],\n                                   time_window_ms=self.config['metrics_sample_window_ms'],\n                                   tags=metrics_tags)\n        reporters = [reporter() for reporter in self.config['metric_reporters']]\n        self._metrics = Metrics(metric_config, reporters)\n\n        client = self.config['kafka_client'](\n            metrics=self._metrics, metric_group_prefix='producer',\n            wakeup_timeout_ms=self.config['max_block_ms'],\n            **self.config)\n\n        if self.config['api_version'] is None:\n            self.config['api_version'] = client.config['api_version']\n\n        ct = self.config['compression_type']\n        if ct not in self._COMPRESSORS:\n            raise ValueError(\"Not supported codec: {}\".format(ct))\n        else:\n            checker, compression_attrs = self._COMPRESSORS[ct]\n            assert checker(), \"Libraries for {} compression codec not found\".format(ct)\n            self.config['compression_attrs'] = compression_attrs\n\n        message_version = self._max_usable_produce_magic()\n        self._accumulator = RecordAccumulator(message_version=message_version, metrics=self._metrics, **self.config)\n        self._metadata = client.cluster\n        guarantee_message_order = bool(self.config['max_in_flight_requests_per_connection'] == 1)\n        self._sender = Sender(client, self._metadata,\n                             self._accumulator, self._metrics,\n                             guarantee_message_order=guarantee_message_order,\n                             **self.config)\n        self._sender.daemon = True\n        self._sender.start()\n        self._closed = False\n\n        self._cleanup = self._cleanup_factory()\n        atexit.register(self._cleanup)\n\n    def send(self, topic, value=None, key=None, headers=None, partition=None, timestamp_ms=None):\n        assert value is not None or self.config['api_version'] >= (0, 8, 1), (\n            'Null messages require kafka >= 0.8.1')\n        assert not (value is None and key is None), 'Need at least one: key or value'\n        key_bytes = value_bytes = None\n        try:\n            self._wait_on_metadata(topic, self.config['max_block_ms'] / 1000.0)\n\n            key_bytes = self._serialize(\n                self.config['key_serializer'],\n                topic, key)\n            value_bytes = self._serialize(\n                self.config['value_serializer'],\n                topic, value)\n            assert type(key_bytes) in (bytes, bytearray, memoryview, type(None))\n            assert type(value_bytes) in (bytes, bytearray, memoryview, type(None))\n\n            partition = self._partition(topic, partition, key, value,\n                                      key_bytes, value_bytes)\n\n            if headers is None:\n                headers = []\n            assert type(headers) == list\n            assert all(type(item) == tuple and len(item) == 2 and type(item[0]) == str and type(item[1]) == bytes for item in headers)\n\n            message_size = self._estimate_size_in_bytes(key_bytes, value_bytes, headers)\n            self._ensure_valid_record_size(message_size)\n\n            tp = TopicPartition(topic, partition)\n            result = self._accumulator.append(tp, timestamp_ms,\n                                             key_bytes, value_bytes, headers,\n                                             self.config['max_block_ms'],\n                                             estimated_size=message_size)\n            future, batch_is_full, new_batch_created = result\n            if batch_is_full or new_batch_created:\n                self._sender.wakeup()\n\n            return future\n        except Errors.BrokerResponseError as e:\n            return FutureRecordMetadata(\n                FutureProduceResult(TopicPartition(topic, partition)),\n                -1, None, None,\n                len(key_bytes) if key_bytes is not None else -1,\n                len(value_bytes) if value_bytes is not None else -1,\n                sum(len(h_key.encode(\"utf-8\")) + len(h_value) for h_key, h_value in headers) if headers else -1,\n            ).failure(e)\n\n    def flush(self, timeout=None):\n        self._accumulator.begin_flush()\n        self._sender.wakeup()\n        self._accumulator.await_flush_completion(timeout=timeout)\n\n    def close(self, timeout=None):\n        self._unregister_cleanup()\n\n        if not hasattr(self, '_closed') or self._closed:\n            return\n\n        invoked_from_callback = bool(threading.current_thread() is self._sender)\n        if timeout > 0:\n            if invoked_from_callback:\n                pass\n            else:\n                if self._sender is not None:\n                    self._sender.initiate_close()\n                    self._sender.join(timeout)\n\n        if self._sender is not None and self._sender.is_alive():\n            self._sender.force_close()\n\n        self._metrics.close()\n        try:\n            self.config['key_serializer'].close()\n        except AttributeError:\n            pass\n        try:\n            self.config['value_serializer'].close()\n        except AttributeError:\n            pass\n        self._closed = True\n\n    def _cleanup_factory(self):\n        _self = weakref.proxy(self)\n        def wrapper():\n            try:\n                _self.close(timeout=0)\n            except (ReferenceError, AttributeError):\n                pass\n        return wrapper\n\n    def _unregister_cleanup(self):\n        if getattr(self, '_cleanup', None):\n            if hasattr(atexit, 'unregister'):\n                atexit.unregister(self._cleanup)\n            else:\n                try:\n                    atexit._exithandlers.remove((self._cleanup, (), {}))\n                except ValueError:\n                    pass\n        self._cleanup = None\n\n    def _max_usable_produce_magic(self):\n        if self.config['api_version'] >= (0, 11):\n            return 2\n        elif self.config['api_version'] >= (0, 10):\n            return 1\n        else:\n            return 0\n\n    def _estimate_size_in_bytes(self, key, value, headers=[]):\n        magic = self._max_usable_produce_magic()\n        if magic == 2:\n            return DefaultRecordBatchBuilder.estimate_size_in_bytes(key, value, headers)\n        else:\n            return LegacyRecordBatchBuilder.estimate_size_in_bytes(magic, self.config['compression_type'], key, value)\n\n    def _ensure_valid_record_size(self, size):\n        if size > self.config['max_request_size']:\n            raise Errors.MessageSizeTooLargeError(\n                \"The message is %d bytes when serialized which is larger than\"\n                \" the maximum request size you have configured with the\"\n                \" max_request_size configuration\" % (size,))\n        if size > self.config['buffer_memory']:\n            raise Errors.MessageSizeTooLargeError(\n                \"The message is %d bytes when serialized which is larger than\"\n                \" the total memory buffer you have configured with the\"\n                \" buffer_memory configuration.\" % (size,))\n\n    def _wait_on_metadata(self, topic, max_wait):\n        self._sender.add_topic(topic)\n        begin = time.time()\n        elapsed = 0.0\n        metadata_event = None\n        while True:\n            partitions = self._metadata.partitions_for_topic(topic)\n            if partitions is not None:\n                return partitions\n\n            if not metadata_event:\n                metadata_event = threading.Event()\n\n            metadata_event.clear()\n            future = self._metadata.request_update()\n            future.add_both(lambda e, *args: e.set(), metadata_event)\n            self._sender.wakeup()\n            metadata_event.wait(max_wait - elapsed)\n            elapsed = time.time() - begin\n            if not metadata_event.is_set():\n                raise Errors.KafkaTimeoutError(\n                    \"Failed to update metadata after %.1f secs.\" % (max_wait,))\n            elif topic in self._metadata.unauthorized_topics:\n                raise Errors.TopicAuthorizationFailedError(topic)\n\n    def _serialize(self, f, topic, data):\n        if not f:\n            return data\n        if isinstance(f, Serializer):\n            return f.serialize(topic, data)\n        return f(data)\n\n    def _partition(self, topic, partition, key, value, serialized_key, serialized_value):\n        if partition is not None:\n            assert partition >= 0\n            assert partition in self._metadata.partitions_for_topic(topic), 'Unrecognized partition'\n            return partition\n\n        all_partitions = sorted(self._metadata.partitions_for_topic(topic))\n        available = list(self._metadata.available_partitions_for_topic(topic))\n        return self.config['partitioner'](serialized_key, all_partitions, available)",
    "Code_level": "Class-level",
    "FSMID_for_test": 78,
    "right_result": "import kafka\nfrom kafka.producer import KafkaProducer as _KafkaProducer\nfrom kafka import KafkaClient, SimpleProducer, SimpleConsumer, KeyedMessage\nfrom kafka.common import LeaderNotAvailableError, KafkaError\nfrom kafka.client import Client\nfrom kafka.producer.async import AsyncProducer\nfrom kafka.producer import Producer\nfrom kafka.producer import Partitioner\nfrom kafka.producer import MessageSerializer\nfrom kafka.producer import CompressionType\nfrom kafka.producer import DeliveryReport\nfrom kafka.producer import RecordAccumulator\nfrom kafka.producer import Sender\nfrom kafka.producer import ClusterMetadata\nfrom kafka.producer import Metrics\nfrom kafka.producer import FutureRecordMetadata\nfrom kafka.producer import _wait_on_metadata\nfrom kafka.producer import _estimate_size_in_bytes\nfrom kafka.producer import _ensure_valid_record_size\nfrom kafka.producer import _max_usable_produce_magic\nfrom kafka.producer import _serialize\nfrom kafka.producer import _partition\nfrom kafka.producer import _cleanup_factory\nfrom kafka.producer import _unregister_cleanup\n\nclass KafkaProducer:\n    def __init__(self, **configs):\n        self.config = configs\n        self._metrics = Metrics()\n        self._accumulator = RecordAccumulator(self.config)\n        self._metadata = ClusterMetadata(self.config)\n        self._sender = Sender(self.config, self._accumulator, self._metadata, self._metrics)\n        self._closed = False\n        self._cleanup = _cleanup_factory(self)\n    \n    def send(self, topic, value=None, key=None, headers=None, partition=None, timestamp_ms=None):\n        return self._accumulator.send(topic, value, key, headers, partition, timestamp_ms)\n    \n    def flush(self, timeout=None):\n        self._accumulator.flush(timeout)\n    \n    def close(self, timeout=None):\n        self._closed = True\n        self._sender.close(timeout)\n        self._accumulator.close(timeout)\n        self._metadata.close(timeout)\n        self._metrics.close(timeout)\n    \n    def _cleanup_factory(self):\n        return self._cleanup\n    \n    def _unregister_cleanup(self):\n        self._cleanup = None\n    \n    def _max_usable_produce_magic(self):\n        return _max_usable_produce_magic(self.config)\n    \n    def _estimate_size_in_bytes(self, key, value, headers=[]):\n        return _estimate_size_in_bytes(key, value, headers)\n    \n    def _ensure_valid_record_size(self, size):\n        _ensure_valid_record_size(size)\n    \n    def _wait_on_metadata(self, topic, max_wait):\n        return _wait_on_metadata(self._metadata, topic, max_wait)\n    \n    def _serialize(self, f, topic, data):\n        return _serialize(f, topic, data)\n    \n    def _partition(self, topic, partition, key, value, serialized_key, serialized_value):\n        return _partition(topic, partition, key, value, serialized_key, serialized_value)"
  },
  {
    "Task_id": 260,
    "Instruction": "Task Description: Create a function that produces a message to a specified Kafka topic using the KafkaProducer from the kafka-python library.\n\nFunction Description: The function initializes a KafkaProducer instance, sends a message to the specified topic, waits for the message to be delivered, and then closes the producer to release resources.\n\nInput:  \n- bootstrap_server: str - The address of the Kafka bootstrap server (e.g., 'localhost:9092').  \n- topic: str - The name of the Kafka topic to which the message will be sent.  \n- message: bytes - The message content in bytes format.  \n\nOutput: None - The function does not return any value but ensures the message is sent to the Kafka topic.",
    "Canonical_solution": "from kafka import KafkaProducer\n\ndef produce_message(bootstrap_server: str, topic: str, message: bytes) -> None:\n    \"\"\"\n    Produces a message to a Kafka topic.\n    \n    Args:\n        bootstrap_server: Kafka bootstrap server address\n        topic: Target topic name\n        message: Message content in bytes\n    \"\"\"\n    producer = KafkaProducer(bootstrap_servers=[bootstrap_server])\n    future = producer.send(topic, message)\n    future.get(timeout=10)\n    producer.close()",
    "Code_level": "Function-level",
    "FSMID_for_test": 78,
    "right_result": "from kafka import KafkaProducer\n\ndef send_message_to_kafka(bootstrap_server, topic, message):\n    producer = KafkaProducer(bootstrap_servers=bootstrap_server)\n    producer.send(topic, message).get()\n    producer.close()"
  },
  {
    "Task_id": 265,
    "Instruction": "Task Description: Create a function that produces messages to a Kafka topic using the KafkaProducer from the kafka-python library.\n\nFunction Description: The function initializes a KafkaProducer instance, sends a message to a specified Kafka topic, ensures the message is delivered by flushing the producer buffer, and properly closes the producer to release resources.\n\nInput:\n- bootstrap_server: str - The address of the Kafka bootstrap server (e.g., 'localhost:9092').\n- topic: str - The name of the Kafka topic to which the message will be sent.\n- message: bytes - The message to be sent, encoded as bytes.\n\nOutput: None - The function does not return any value but ensures the message is sent to the specified Kafka topic.",
    "Canonical_solution": "from kafka import KafkaProducer\n\ndef produce_kafka_message(bootstrap_server, topic, message):\n    \"\"\"\n    Produces a message to a Kafka topic.\n    \n    Args:\n        bootstrap_server: Kafka bootstrap server address\n        topic: Target topic name\n        message: Message to be sent (bytes)\n    \"\"\"\n    producer = KafkaProducer(bootstrap_servers=[bootstrap_server])\n    producer.send(topic, message)\n    producer.flush()\n    producer.close()",
    "Code_level": "Function-level",
    "FSMID_for_test": 78,
    "right_result": "from kafka import KafkaProducer\n\ndef send_message_to_kafka(bootstrap_server, topic, message):\n    producer = KafkaProducer(bootstrap_servers=bootstrap_server)\n    producer.send(topic, value=message)\n    producer.flush()\n    producer.close()"
  },
  {
    "Task_id": 267,
    "Instruction": "Task Description: Create a Python class that implements an MQTT subscriber client using the Paho MQTT library, capable of connecting to an MQTT broker, subscribing to topics, and handling incoming messages with configurable authentication and TLS options.\n\nClass Description: The MQTTSubscriber class provides a configurable MQTT client implementation for subscribing to topics and processing messages from an MQTT broker. It supports various connection options including TLS encryption and authentication.\n\nAttributes:\n- host: str - The MQTT broker host address (default: \"mqtt.eclipseprojects.io\")\n- topic: str - The topic to subscribe to (default: \"$SYS/#\")\n- qos: int - Quality of Service level for the subscription (default: 0)\n- clientid: str - Client identifier for the MQTT connection (default: None)\n- username: str - Username for broker authentication (default: None)\n- password: str - Password for broker authentication (default: None)\n- port: int - Broker connection port (default: None, auto-detected)\n- keepalive: int - Connection keepalive period in seconds (default: 60)\n- use_tls: bool - Flag to enable TLS encryption (default: False)\n- insecure: bool - Flag to disable certificate verification (default: False)\n- cacerts: str - Path to CA certificate file (default: None)\n- tls_version: str - TLS protocol version (default: None)\n- debug: bool - Flag to enable debug logging (default: False)\n- disable_clean_session: bool - Flag to disable clean session (default: False)\n- mqttc: mqtt.Client - The Paho MQTT client instance\n\nMethods:\n- __init__(host, topic, qos, clientid, username, password, port, keepalive, use_tls, insecure, cacerts, tls_version, debug, disable_clean_session) -> None - Initializes the MQTT subscriber with configuration parameters\n- _setup_callbacks() -> None - Sets up the MQTT client callback functions\n- _configure_tls() -> None - Configures TLS settings for secure connections\n- _configure_authentication() -> None - Configures username/password authentication\n- on_connect(mqttc, obj, flags, reason_code, properties) -> None - Callback for connection events\n- on_message(mqttc, obj, msg) -> None - Callback for incoming messages\n- on_publish(mqttc, obj, mid) -> None - Callback for publish events\n- on_subscribe(mqttc, obj, mid, reason_code_list, properties) -> None - Callback for subscription events\n- on_log(mqttc, obj, level, string) -> None - Callback for debug logging\n- connect_and_subscribe() -> None - Connects to the broker and starts the message loop",
    "Canonical_solution": "import argparse\nimport ssl\nimport paho.mqtt.client as mqtt\n\nclass MQTTSubscriber:\n    def __init__(self, host=\"mqtt.eclipseprojects.io\", topic=\"$SYS/#\", qos=0, clientid=None,\n                 username=None, password=None, port=None, keepalive=60, use_tls=False,\n                 insecure=False, cacerts=None, tls_version=None, debug=False,\n                 disable_clean_session=False):\n        self.host = host\n        self.topic = topic\n        self.qos = qos\n        self.clientid = clientid\n        self.username = username\n        self.password = password\n        self.port = port\n        self.keepalive = keepalive\n        self.use_tls = use_tls\n        self.insecure = insecure\n        self.cacerts = cacerts\n        self.tls_version = tls_version\n        self.debug = debug\n        self.disable_clean_session = disable_clean_session\n\n        self.mqttc = mqtt.Client(mqtt.CallbackAPIVersion.VERSION2, self.clientid,\n                                clean_session=not self.disable_clean_session)\n\n        self._setup_callbacks()\n        self._configure_tls()\n        self._configure_authentication()\n\n    def _setup_callbacks(self):\n        self.mqttc.on_message = self.on_message\n        self.mqttc.on_connect = self.on_connect\n        self.mqttc.on_publish = self.on_publish\n        self.mqttc.on_subscribe = self.on_subscribe\n        if self.debug:\n            self.mqttc.on_log = self.on_log\n\n    def _configure_tls(self):\n        if self.use_tls or self.cacerts:\n            if self.tls_version == \"tlsv1.2\":\n                tlsVersion = ssl.PROTOCOL_TLSv1_2\n            elif self.tls_version == \"tlsv1.1\":\n                tlsVersion = ssl.PROTOCOL_TLSv1_1\n            elif self.tls_version == \"tlsv1\":\n                tlsVersion = ssl.PROTOCOL_TLSv1\n            else:\n                tlsVersion = None\n\n            cert_required = ssl.CERT_NONE if self.insecure else ssl.CERT_REQUIRED\n            self.mqttc.tls_set(ca_certs=self.cacerts, certfile=None, keyfile=None,\n                              cert_reqs=cert_required, tls_version=tlsVersion)\n            if self.insecure:\n                self.mqttc.tls_insecure_set(True)\n\n    def _configure_authentication(self):\n        if self.username or self.password:\n            self.mqttc.username_pw_set(self.username, self.password)\n\n    def on_connect(self, mqttc, obj, flags, reason_code, properties):\n        print(\"reason_code: \" + str(reason_code))\n\n    def on_message(self, mqttc, obj, msg):\n        print(msg.topic + \" \" + str(msg.qos) + \" \" + str(msg.payload))\n\n    def on_publish(self, mqttc, obj, mid):\n        print(\"mid: \" + str(mid))\n\n    def on_subscribe(self, mqttc, obj, mid, reason_code_list, properties):\n        print(\"Subscribed: \" + str(mid) + \" \" + str(reason_code_list))\n\n    def on_log(self, mqttc, obj, level, string):\n        print(string)\n\n    def connect_and_subscribe(self):\n        if self.port is None:\n            self.port = 8883 if (self.use_tls or self.cacerts) else 1883\n\n        print(f\"Connecting to {self.host} port: {self.port}\")\n        self.mqttc.connect(self.host, self.port, self.keepalive)\n        self.mqttc.subscribe(self.topic, self.qos)\n        self.mqttc.loop_forever()",
    "Code_level": "Class-level",
    "FSMID_for_test": 84,
    "right_result": "class MQTTSubscriber:\n    def __init__(self, host=\"mqtt.eclipseprojects.io\", topic=\"$SYS/#\", qos=0, clientid=None, username=None, password=None, port=None, keepalive=60, use_tls=False, insecure=False, cacerts=None, tls_version=None, debug=False, disable_clean_session=False):\n        import paho.mqtt.client as mqtt\n        self.host = host\n        self.topic = topic\n        self.qos = qos\n        self.clientid = clientid\n        self.username = username\n        self.password = password\n        self.port = port\n        self.keepalive = keepalive\n        self.use_tls = use_tls\n        self.insecure = insecure\n        self.cacerts = cacerts\n        self.tls_version = tls_version\n        self.debug = debug\n        self.disable_clean_session = disable_clean_session\n        self.mqttc = mqtt.Client(client_id=self.clientid, clean_session=not self.disable_clean_session)\n        self._setup_callbacks()\n        self._configure_authentication()\n        self._configure_tls()\n\n    def _setup_callbacks(self):\n        self.mqttc.on_connect = self.on_connect\n        self.mqttc.on_message = self.on_message\n        self.mqttc.on_publish = self.on_publish\n        self.mqttc.on_subscribe = self.on_subscribe\n        if self.debug:\n            self.mqttc.on_log = self.on_log\n\n    def _configure_tls(self):\n        if self.use_tls:\n            if self.tls_version:\n                import ssl\n                try:\n                    tls_versions = {\n                        \"ssl2\": ssl.PROTOCOL_SSLv2,\n                        \"ssl3\": ssl.PROTOCOL_SSLv3,\n                        \"tls1\": ssl.PROTOCOL_TLSv1,\n                        \"tls1_1\": ssl.PROTOCOL_TLSv1_1,\n                        \"tls1_2\": ssl.PROTOCOL_TLSv1_2,\n                        \"tls1_3\": ssl.PROTOCOL_TLSv1_3\n                    }\n                    self.mqttc.tls_set(ca_certs=self.cacerts, certfile=None, keyfile=None, tls_version=tls_versions[self.tls_version], ciphers=None, cert_reqs=ssl.CERT_REQUIRED if not self.insecure else ssl.CERT_NONE)\n                except KeyError:\n                    raise ValueError(f\"Invalid TLS version: {self.tls_version}\")\n            else:\n                self.mqttc.tls_set(ca_certs=self.cacerts, certfile=None, keyfile=None, cert_reqs=ssl.CERT_REQUIRED if not self.insecure else ssl.CERT_NONE)\n            self.mqttc.tls_insecure_okay = self.insecure\n        else:\n            self.mqttc.tls_set(ca_certs=None, certfile=None, keyfile=None)\n\n    def _configure_authentication(self):\n        if self.username and self.password:\n            self.mqttc.username_pw_set(self.username, self.password)\n\n    def on_connect(self, mqttc, obj, flags, reason_code, properties):\n        if reason_code.is_failure:\n            print(f\"Connection failed with result code {reason_code}\")\n        else:\n            print(\"Connected to MQTT broker\")\n            self.mqttc.subscribe(self.topic, self.qos)\n\n    def on_message(self, mqttc, obj, msg):\n        print(f\"Received message on topic {msg.topic}: {msg.payload.decode()}\")\n\n    def on_publish(self, mqttc, obj, mid):\n        print(f\"Message published with ID: {mid}\")\n\n    def on_subscribe(self, mqttc, obj, mid, reason_code_list, properties):\n        print(f\"Subscribed to topic with MID: {mid}\")\n\n    def on_log(self, mqttc, obj, level, string):\n        print(f\"MQTT Log: {string}\")\n\n    def connect_and_subscribe(self):\n        if self.port:\n            self.mqttc.connect(self.host, self.port, self.keepalive)\n        else:\n            self.mqttc.connect(self.host, keepalive=self.keepalive)\n        self.mqttc.loop_forever()"
  },
  {
    "Task_id": 268,
    "Instruction": "Task Description: Create a Python class that implements an MQTT client using the Paho MQTT library to subscribe to topics, handle incoming messages, and trigger appropriate actions based on the received messages.\n\nClass Description: The `MqttClient` class is a threaded MQTT client that connects to a broker, subscribes to specified topics, and processes incoming messages. It supports secure connections with TLS and authentication. Messages can be in JSON format and are routed to designated synapses (processing units) based on the topic.\n\nAttributes:\n\n- broker: [object] - Contains broker configuration details (client_id, protocol, username, password, ca_cert, certfile, keyfile, tls_insecure, broker_ip, port, keepalive, topics)\n- brain: [object] - Reference to the main processing unit that manages synapses\n- client: [paho.mqtt.client.Client] - The MQTT client instance\n\nMethods:\n\n- __init__(broker=None, brain=None) -> [None] - Initializes the MQTT client with broker configuration and brain reference. Sets up connection callbacks and security parameters.\n- run() -> [None] - Connects to the broker and starts the MQTT loop in a separate thread. Handles socket errors gracefully.\n- on_connect(client, userdata, flags, rc) -> [None] - Callback for connection events. Subscribes to all configured topics on successful connection (rc=0).\n- on_message(client, userdata, msg) -> [None] - Callback for incoming messages. Routes messages to concerned synapses based on topic.\n- on_subscribe(mqttc, obj, mid, granted_qos) -> [None] - Callback for subscription confirmation (currently no operation).\n- call_concerned_synapses(topic_name, message) -> [None] - Processes incoming messages, converts JSON if needed, and triggers appropriate synapses.\n- _get_protocol(protocol) -> [int] - Static method that converts protocol string to Paho MQTT protocol constant.",
    "Canonical_solution": "import json\nimport logging\nimport socket\nfrom threading import Thread\nimport paho.mqtt.client as mqtt\n\nclass MqttClient(Thread):\n    def __init__(self, broker=None, brain=None):\n        super(MqttClient, self).__init__()\n        self.broker = broker\n        self.brain = brain\n\n        self.client = mqtt.Client(client_id=self.broker.client_id, protocol=self._get_protocol(self.broker.protocol))\n        self.client.on_connect = self.on_connect\n        self.client.on_message = self.on_message\n        self.client.on_subscribe = self.on_subscribe\n\n        if self.broker.username is not None and self.broker.password is not None:\n            self.client.username_pw_set(self.broker.username, self.broker.password)\n\n        if self.broker.ca_cert is not None and self.broker.certfile is not None and self.broker.keyfile is not None:\n            self.client.tls_set(ca_certs=self.broker.ca_cert,\n                               certfile=self.broker.certfile,\n                               keyfile=self.broker.keyfile)\n            self.client.tls_insecure_set(self.broker.tls_insecure)\n        elif self.broker.ca_cert is not None:\n            self.client.tls_set(ca_certs=self.broker.ca_cert)\n            self.client.tls_insecure_set(self.broker.tls_insecure)\n\n    def run(self):\n        try:\n            self.client.connect(self.broker.broker_ip, self.broker.port, self.broker.keepalive)\n            self.client.loop_forever()\n        except socket.error:\n            pass\n\n    def on_connect(self, client, userdata, flags, rc):\n        if rc == 0:\n            for topic in self.broker.topics:\n                client.subscribe(topic.name)\n        else:\n            self.client.disconnect()\n\n    def on_message(self, client, userdata, msg):\n        self.call_concerned_synapses(msg.topic, msg.payload)\n\n    def on_subscribe(self, mqttc, obj, mid, granted_qos):\n        pass\n\n    def call_concerned_synapses(self, topic_name, message):\n        target_topic = next(topic for topic in self.broker.topics if topic.name == topic_name)\n        if target_topic.is_json:\n            message = json.loads(message)\n        \n        for synapse in target_topic.synapses:\n            overriding_parameter_dict = dict()\n            overriding_parameter_dict[\"mqtt_subscriber_message\"] = message\n            SynapseLauncher.start_synapse_by_list_name([synapse.name],\n                                                     brain=self.brain,\n                                                     overriding_parameter_dict=overriding_parameter_dict)\n\n    @staticmethod\n    def _get_protocol(protocol):\n        if protocol == \"MQTTv31\":\n            return paho.mqtt.client.MQTTv31\n        return paho.mqtt.client.MQTTv311",
    "Code_level": "Class-level",
    "FSMID_for_test": 84,
    "right_result": "import paho.mqtt.client as mqtt\nimport json\nimport threading\n\nclass MqttClient:\n    def __init__(self, broker=None, brain=None):\n        self.broker = broker\n        self.brain = brain\n        self.client = mqtt.Client(client_id=self.broker.client_id, protocol=self._get_protocol(self.broker.protocol))\n        self.client.on_connect = self.on_connect\n        self.client.on_message = self.on_message\n        self.client.on_subscribe = self.on_subscribe\n        self.client.tls_set(ca_certs=self.broker.ca_cert, certfile=self.broker.certfile, keyfile=self.broker.keyfile, tls_version=ssl.PROTOCOL_TLSv1_2)\n        self.client.tls_insecure_okay = self.broker.tls_insecure\n        self.client.username_pw_set(self.broker.username, self.broker.password)\n        self.client.connect(self.broker.broker_ip, self.broker.port, self.broker.keepalive)\n\n    def run(self):\n        thread = threading.Thread(target=self.client.loop_forever)\n        thread.start()\n\n    def on_connect(self, client, userdata, flags, rc):\n        if rc == 0:\n            for topic in self.broker.topics:\n                self.client.subscribe(topic)\n\n    def on_message(self, client, userdata, msg):\n        self.call_concerned_synapses(msg.topic, msg.payload)\n\n    def on_subscribe(self, mqttc, obj, mid, granted_qos):\n        pass\n\n    def call_concerned_synapses(self, topic_name, message):\n        try:\n            payload = json.loads(message)\n        except json.JSONDecodeError:\n            payload = message.decode('utf-8')\n        self.brain.route_to_synapses(topic_name, payload)\n\n    @staticmethod\n    def _get_protocol(protocol):\n        if protocol == \"mqtt3\":\n            return mqtt.MQTTv31\n        elif protocol == \"mqtt311\":\n            return mqtt.MQTTv311\n        elif protocol == \"mqtt5\":\n            return mqtt.MQTTv5\n        else:\n            raise ValueError(f\"Unsupported protocol: {protocol}\")"
  },
  {
    "Task_id": 269,
    "Instruction": "Task Description: Implement an MQTT subscriber function in Python that connects to a broker, subscribes to a topic, and processes incoming messages using the Paho MQTT client library.\n\nFunction Description: The function `mqtt_subscriber` establishes a connection to an MQTT broker over WebSockets, subscribes to a specified topic, and continuously listens for incoming messages. It utilizes callback functions to handle connection events, incoming messages, and subscription acknowledgments.\n\nInput: None (The broker address, port, and topic are hardcoded in the function for simplicity.)\n\nOutput: None (The function prints connection status, subscription acknowledgments, and received messages to the console.)\n\n---\n\nTask Description: Implement an MQTT subscriber class in Python that encapsulates the functionality of connecting to a broker, subscribing to topics, and processing incoming messages using the Paho MQTT client library.\n\nClass Description: The `MQTTSubscriber` class provides a reusable and configurable way to subscribe to MQTT topics. It initializes with broker details and topic configurations, and it uses callback methods to handle MQTT events such as connection, message reception, and subscription.\n\nAttributes:\n\n- `client`: [mqtt.Client] - The Paho MQTT client instance used for communication.\n- `broker_address`: [str] - The address of the MQTT broker.\n- `broker_port`: [int] - The port number of the MQTT broker.\n- `topic`: [str] - The MQTT topic to subscribe to.\n- `qos`: [int] - The Quality of Service level for the subscription.\n\nMethods:\n\n- `__init__(broker_address: str, broker_port: int, topic: str, qos: int = 0) -> None` - Initializes the MQTT subscriber with broker details and topic configuration.\n- `on_connect(client: mqtt.Client, obj: Any, flags: dict, reason_code: int, properties: Any) -> None` - Callback for when the client connects to the broker.\n- `on_message(client: mqtt.Client, obj: Any, msg: mqtt.MQTTMessage) -> None` - Callback for when a message is received on the subscribed topic.\n- `on_subscribe(client: mqtt.Client, obj: Any, mid: int, reason_code_list: list, properties: Any) -> None` - Callback for when the client subscribes to a topic.\n- `start() -> None` - Connects to the broker, subscribes to the topic, and starts the MQTT loop to process messages.\n- `stop() -> None` - Stops the MQTT loop and disconnects from the broker.",
    "Canonical_solution": "import paho.mqtt.client as mqtt\n\ndef on_connect(mqttc, obj, flags, reason_code, properties):\n    print(\"reason_code: \"+str(reason_code))\n\ndef on_message(mqttc, obj, msg):\n    print(msg.topic+\" \"+str(msg.qos)+\" \"+str(msg.payload))\n\ndef on_subscribe(mqttc, obj, mid, reason_code_list, properties):\n    print(\"Subscribed: \"+str(mid)+\" \"+str(reason_code_list))\n\ndef on_log(mqttc, obj, level, string):\n    print(string)\n\ndef mqtt_subscriber():\n    mqttc = mqtt.Client(mqtt.CallbackAPIVersion.VERSION2, transport=\"websockets\")\n    mqttc.on_message = on_message\n    mqttc.on_connect = on_connect\n    mqttc.on_subscribe = on_subscribe\n    mqttc.connect(\"mqtt.eclipseprojects.io\", 80, 60)\n    mqttc.subscribe(\"$SYS/broker/version\", 0)\n    mqttc.loop_forever()",
    "Code_level": "Function-level",
    "FSMID_for_test": 84,
    "right_result": "import paho.mqtt.client as mqtt\n\nclass MQTTSubscriber:\n    def __init__(self, broker_address: str, broker_port: int, topic: str, qos: int = 0) -> None:\n        self.client = mqtt.Client(protocol=mqtt.MQTTv5)\n        self.broker_address = broker_address\n        self.broker_port = broker_port\n        self.topic = topic\n        self.qos = qos\n        self.client.on_connect = self.on_connect\n        self.client.on_message = self.on_message\n        self.client.on_subscribe = self.on_subscribe\n\n    def on_connect(self, client: mqtt.Client, obj: Any, flags: dict, reason_code: int, properties: Any) -> None:\n        print(f\"Connected to broker with result code {reason_code}\")\n        self.client.subscribe(self.topic, qos=self.qos)\n\n    def on_message(self, client: mqtt.Client, obj: Any, msg: mqtt.MQTTMessage) -> None:\n        print(f\"Received message on topic {msg.topic}: {msg.payload.decode()}\")\n\n    def on_subscribe(self, client: mqtt.Client, obj: Any, mid: int, reason_code_list: list, properties: Any) -> None:\n        print(f\"Subscribed to topic with mid {mid}\")\n\n    def start(self) -> None:\n        self.client.connect(self.broker_address, self.broker_port, 60)\n        self.client.loop_forever()\n\n    def stop(self) -> None:\n        self.client.disconnect()"
  },
  {
    "Task_id": 270,
    "Instruction": "Task Description: Create a Python class that implements an MQTT client for subscribing to topics and handling incoming messages, with support for custom command processing and authentication.\n\nClass Description: The MQTTClient class provides functionality to connect to an MQTT broker, subscribe to specified topics, and process incoming messages. It includes handlers for custom commands and button press events, with optional username/password authentication.\n\nAttributes:\n- host: str - The hostname or IP address of the MQTT broker\n- port: int - The port number of the MQTT broker\n- topic: str - The topic to subscribe to\n- username: str (optional) - Username for broker authentication\n- password: str (optional) - Password for broker authentication\n- client: mqtt.Client - The Paho MQTT client instance\n\nMethods:\n- __init__(host: str, port: int, topic: str, username: str=None, password: str=None) -> None - Initializes the MQTT client with connection parameters\n- on_connect(client: mqtt.Client, userdata: Any, flags: dict, rc: int) -> None - Callback for when the client connects to the broker\n- on_message(client: mqtt.Client, userdata: Any, msg: mqtt.MQTTMessage) -> None - Callback for handling incoming messages\n- start() -> None - Starts the MQTT client connection and message loop\n- custom_command(command: str) -> None - Placeholder for handling custom commands\n- buttonsinglepress() -> None - Placeholder for handling button press events",
    "Canonical_solution": "import paho.mqtt.client as mqtt\n\nclass MQTTClient:\n    def __init__(self, host, port, topic, username=None, password=None):\n        self.host = host\n        self.port = port\n        self.topic = topic\n        self.username = username\n        self.password = password\n        self.client = mqtt.Client()\n        self.client.on_connect = self.on_connect\n        self.client.on_message = self.on_message\n\n    def on_connect(self, client, userdata, flags, rc):\n        print(\"Connected with result code \"+str(rc))\n        client.subscribe(self.topic)\n\n    def on_message(self, client, userdata, msg):\n        print(\"Message from MQTT: \"+str(msg.payload.decode('utf-8')))\n        mqtt_query = str(msg.payload.decode('utf-8'))\n        if 'custom' in mqtt_query.lower():\n            mqtt_query = mqtt_query.lower()\n            mqtt_queryidx = mqtt_query.find('custom')\n            mqtt_query = mqtt_query[mqtt_queryidx:]\n            mqtt_query = mqtt_query.replace('custom',\"\",1)\n            mqtt_query = mqtt_query.strip()\n            self.custom_command(mqtt_query)\n        elif mqtt_query.lower() == 'mute':\n            self.buttonsinglepress()\n        else:\n            self.assistant.send_text_query(mqtt_query)\n\n    def start(self):\n        if self.username and self.password:\n            self.client.username_pw_set(self.username, self.password)\n        self.client.connect(self.host, self.port, 60)\n        self.client.loop_forever()\n\n    def custom_command(self, command):\n        # Placeholder for custom command handling\n        pass\n\n    def buttonsinglepress(self):\n        # Placeholder for button press handling\n        pass",
    "Code_level": "Class-level",
    "FSMID_for_test": 84,
    "right_result": "class MQTTClient:\n    def __init__(self, host: str, port: int, topic: str, username: str = None, password: str = None) -> None:\n        import paho.mqtt.client as mqtt\n        self.host = host\n        self.port = port\n        self.topic = topic\n        self.username = username\n        self.password = password\n        self.client = mqtt.Client()\n        self.client.on_connect = self.on_connect\n        self.client.on_message = self.on_message\n\n    def on_connect(self, client: mqtt.Client, userdata: Any, flags: dict, rc: int) -> None:\n        if rc == 0:\n            print(\"Connected to MQTT Broker!\")\n            self.client.subscribe(self.topic)\n        else:\n            print(f\"Failed to connect, return code {rc}\")\n\n    def on_message(self, client: mqtt.Client, userdata: Any, msg: mqtt.MQTTMessage) -> None:\n        print(f\"Received message on topic {msg.topic}: {msg.payload.decode()}\")\n        self.custom_command(msg.payload.decode())\n\n    def start(self) -> None:\n        if self.username and self.password:\n            self.client.username_pw_set(self.username, self.password)\n        self.client.connect(self.host, self.port)\n        self.client.loop_forever()\n\n    def custom_command(self, command: str) -> None:\n        pass\n\n    def buttonsinglepress(self) -> None:\n        pass"
  },
  {
    "Task_id": 272,
    "Instruction": "Task Description: Create a Python function that implements an MQTT subscriber using the Paho MQTT client library to connect to a broker, subscribe to topics, and continuously process incoming messages.\n\nFunction Description: The function `mqtt_subscriber` establishes a connection to an MQTT broker, subscribes to specified topics, and enters a loop to continuously handle incoming messages. It includes logging for debugging purposes.\n\nInput: None (The broker address, port, and topic are hardcoded in the function for simplicity, but could be parameterized if needed.)\n\nOutput: None (The function runs indefinitely, processing incoming messages and logging events.)",
    "Canonical_solution": "import logging\nimport paho.mqtt.client as mqtt\n\ndef mqtt_subscriber():\n    logging.basicConfig(level=logging.DEBUG)\n    mqttc = mqtt.Client(mqtt.CallbackAPIVersion.VERSION2)\n    logger = logging.getLogger(__name__)\n    mqttc.enable_logger(logger)\n    mqttc.connect(\"mqtt.eclipseprojects.io\", 1883, 60)\n    mqttc.subscribe(\"$SYS/#\", 0)\n    mqttc.loop_forever()",
    "Code_level": "Function-level",
    "FSMID_for_test": 84,
    "right_result": "import paho.mqtt.client as mqtt\nimport logging\n\nlogging.basicConfig(level=logging.INFO)\n\ndef mqtt_subscriber():\n    client = mqtt.Client()\n    client.connect(\"broker.hivemq.com\", 1883, 60)\n    client.subscribe(\"test/topic\")\n\n    def on_message(client, userdata, msg):\n        logging.info(f\"Received message: {msg.payload.decode()} on topic {msg.topic}\")\n\n    client.on_message = on_message\n    client.loop_forever()"
  },
  {
    "Task_id": 273,
    "Instruction": "Task Description: Implement an MQTT subscriber in Python that connects to a broker, subscribes to topics, and processes incoming messages with different callback functions for specific topic patterns.\n\nFunction Description: The function `mqtt_subscriber` establishes a connection to an MQTT broker, sets up message callbacks for specific topic patterns, subscribes to a wildcard topic, and continuously processes incoming messages. It uses the Paho MQTT client library to handle MQTT communication.\n\nInput: None (The broker address and port are hardcoded in the function)\n\nOutput: None (The function prints incoming messages to the console but does not return any value)\n\nMethods:\n\nMethod1: on_message_msgs(mosq, obj, msg) -> None - Callback function that handles messages matching the topic pattern \"$SYS/broker/messages/#\". Prints message details to the console.\nMethod2: on_message_bytes(mosq, obj, msg) -> None - Callback function that handles messages matching the topic pattern \"$SYS/broker/bytes/#\". Prints message details to the console.\nMethod3: on_message(mosq, obj, msg) -> None - Default callback function that handles all other messages not caught by specific callbacks. Prints message details to the console.\nMethod4: mqtt_subscriber() -> None - Main function that creates an MQTT client, sets up callbacks, connects to the broker, subscribes to topics, and starts the message processing loop.",
    "Canonical_solution": "import paho.mqtt.client as mqtt\n\ndef on_message_msgs(mosq, obj, msg):\n    print(\"MESSAGES: \" + msg.topic + \" \" + str(msg.qos) + \" \" + str(msg.payload))\n\ndef on_message_bytes(mosq, obj, msg):\n    print(\"BYTES: \" + msg.topic + \" \" + str(msg.qos) + \" \" + str(msg.payload))\n\ndef on_message(mosq, obj, msg):\n    print(msg.topic + \" \" + str(msg.qos) + \" \" + str(msg.payload))\n\ndef mqtt_subscriber():\n    mqttc = mqtt.Client(mqtt.CallbackAPIVersion.VERSION2)\n    mqttc.message_callback_add(\"$SYS/broker/messages/#\", on_message_msgs)\n    mqttc.message_callback_add(\"$SYS/broker/bytes/#\", on_message_bytes)\n    mqttc.on_message = on_message\n    mqttc.connect(\"mqtt.eclipseprojects.io\", 1883, 60)\n    mqttc.subscribe(\"$SYS/#\", 0)\n    mqttc.loop_forever()",
    "Code_level": "Function-level",
    "FSMID_for_test": 84,
    "right_result": "import paho.mqtt.client as mqtt\n\ndef on_message_msgs(mosq, obj, msg):\n    print(f\"Message received on topic '$SYS/broker/messages/{msg.topic.split(\"/\")[-1]}': {msg.payload.decode()}\")\n\ndef on_message_bytes(mosq, obj, msg):\n    print(f\"Message received on topic '$SYS/broker/bytes/{msg.topic.split(\"/\")[-1]}': {msg.payload.decode()}\")\n\ndef on_message(mosq, obj, msg):\n    print(f\"Message received on topic '{msg.topic}': {msg.payload.decode()}\")\n\ndef mqtt_subscriber():\n    client = mqtt.Client()\n    client.on_message = on_message\n    client.connect(\"localhost\", 1883, 60)\n    client.subscribe(\"$SYS/#\")\n    client.subscribe(\"test/topic\")\n    client.loop_forever()"
  },
  {
    "Task_id": 274,
    "Instruction": "Task Description: Implement an MQTT consumer class in Python that connects to an MQTT broker, subscribes to topics, and handles incoming messages, with optional authentication support.\n\nClass Description: The MQTTConsumer class provides functionality to connect to an MQTT broker, subscribe to topics, and process incoming messages. It includes callbacks for connection events, message reception, and message publishing. The class supports optional username/password authentication.\n\nAttributes:\n- final_mid: [int] - Stores the message ID of the final message to be published\n- client: [paho.mqtt.client.Client] - The MQTT client instance used for communication\n\nMethods:\n- __init__(client_id=None, host=\"mqtt.eclipseprojects.io\", port=1883, keepalive=60, username=None, password=None) -> None - Initializes the MQTT client with connection parameters and optional authentication\n- on_connect(mqttc, userdata, flags, reason_code, properties) -> None - Callback for when the client connects to the broker\n- on_message(mqttc, userdata, msg) -> None - Callback for when a message is received on a subscribed topic\n- on_publish(mqttc, userdata, mid, reason_code, properties) -> None - Callback for when a message is published\n- subscribe(topic) -> None - Subscribes to the specified topic\n- start_consuming() -> None - Starts the MQTT loop to process network traffic and messages continuously",
    "Canonical_solution": "import paho.mqtt.client as mqtt\n\nclass MQTTConsumer:\n    def __init__(self, client_id=None, host=\"mqtt.eclipseprojects.io\", port=1883, keepalive=60, username=None, password=None):\n        self.final_mid = 0\n        self.client = mqtt.Client(mqtt.CallbackAPIVersion.VERSION2, client_id)\n        self.client._userdata = False\n        self.client.on_connect = self.on_connect\n        self.client.on_message = self.on_message\n        self.client.on_publish = self.on_publish\n        \n        if username:\n            self.client.username_pw_set(username, password)\n        self.client.connect(host, port, keepalive)\n\n    def on_connect(self, mqttc, userdata, flags, reason_code, properties):\n        if userdata:\n            print(f\"reason_code: {reason_code}\")\n\n    def on_message(self, mqttc, userdata, msg):\n        if msg.retain == 0:\n            pass\n        else:\n            if userdata:\n                print(\"Clearing topic \" + msg.topic)\n            (rc, self.final_mid) = mqttc.publish(msg.topic, None, 1, True)\n\n    def on_publish(self, mqttc, userdata, mid, reason_code, properties):\n        if mid == self.final_mid:\n            sys.exit()\n\n    def subscribe(self, topic):\n        self.client.subscribe(topic)\n\n    def start_consuming(self):\n        self.client.loop_forever()",
    "Code_level": "Class-level",
    "FSMID_for_test": 84,
    "right_result": "class MQTTConsumer:  \n    def __init__(self, client_id=None, host=\"mqtt.eclipseprojects.io\", port=1883, keepalive=60, username=None, password=None):  \n        import paho.mqtt.client as mqtt  \n        self.final_mid = 0  \n        self.client = mqtt.Client(client_id=client_id, protocol=mqtt.MQTTv5)  \n        self.client.connect(host, port, keepalive)  \n        if username and password:  \n            self.client.username_pw_set(username, password)  \n        self.client.on_connect = self.on_connect  \n        self.client.on_message = self.on_message  \n        self.client.on_publish = self.on_publish  \n\n    def on_connect(self, mqttc, userdata, flags, reason_code, properties):  \n        pass  \n\n    def on_message(self, mqttc, userdata, msg):  \n        pass  \n\n    def on_publish(self, mqttc, userdata, mid, reason_code, properties):  \n        pass  \n\n    def subscribe(self, topic):  \n        self.client.subscribe(topic)  \n\n    def start_consuming(self):  \n        self.client.loop_forever()"
  },
  {
    "Task_id": 275,
    "Instruction": "Task Description: Implement an MQTT subscriber client in Python using the Paho MQTT library to connect to a broker, subscribe to topics, and handle incoming messages.\n\nFunction Description: The function `mqtt_subscribe` establishes a connection to an MQTT broker, subscribes to specified topics, and continuously listens for incoming messages. It utilizes callback functions to handle connection events, subscription acknowledgments, and incoming messages.\n\nInput: None (The broker address, port, and topic are hardcoded in the function for simplicity, but could be parameterized for flexibility.)\n\nOutput: None (The function prints connection status, subscription acknowledgments, and received messages to the console.)\n\n---\n\nTask Description: Create a Python class that encapsulates MQTT subscriber functionality using the Paho MQTT library, allowing for connection to a broker, topic subscription, and message handling.\n\nClass Description: The `MQTTSubscriber` class provides methods to connect to an MQTT broker, subscribe to topics, and process incoming messages. It uses callback methods to handle connection events, subscription acknowledgments, and message reception.\n\nAttributes:\n\n- `client`: [mqtt.Client] - The MQTT client instance used for communication with the broker.\n- `broker_address`: [str] - The address of the MQTT broker to connect to.\n- `broker_port`: [int] - The port number of the MQTT broker.\n- `topic`: [str] - The topic to subscribe to for receiving messages.\n\nMethods:\n\n- `__init__(self, broker_address: str, broker_port: int, topic: str) -> None` - Initializes the MQTT subscriber with broker details and subscription topic.\n- `on_connect(self, mqttc, obj, flags, reason_code, properties) -> None` - Callback for when the client connects to the broker.\n- `on_message(self, mqttc, obj, msg) -> None` - Callback for when a message is received on a subscribed topic.\n- `on_subscribe(self, mqttc, obj, mid, reason_code_list, properties) -> None` - Callback for when the client subscribes to a topic.\n- `connect_and_subscribe(self) -> None` - Connects to the broker and subscribes to the specified topic.\n- `start(self) -> None` - Starts the MQTT loop to process network traffic and messages.",
    "Canonical_solution": "import paho.mqtt.client as mqtt\n\ndef on_connect(mqttc, obj, flags, reason_code, properties):\n    print(\"reason_code: \" + str(reason_code))\n\ndef on_message(mqttc, obj, msg):\n    print(msg.topic + \" \" + str(msg.qos) + \" \" + str(msg.payload))\n\ndef on_subscribe(mqttc, obj, mid, reason_code_list, properties):\n    print(\"Subscribed: \" + str(mid) + \" \" + str(reason_code_list))\n\ndef mqtt_subscribe():\n    mqttc = mqtt.Client(mqtt.CallbackAPIVersion.VERSION2)\n    mqttc.on_message = on_message\n    mqttc.on_connect = on_connect\n    mqttc.on_subscribe = on_subscribe\n    mqttc.connect(\"mqtt.eclipseprojects.io\", 1883, 60)\n    mqttc.subscribe(\"$SYS/#\")\n    mqttc.loop_forever()",
    "Code_level": "Function-level",
    "FSMID_for_test": 84,
    "right_result": "def mqtt_subscribe():\n    import paho.mqtt.client as mqtt\n\n    def on_connect(client, obj, flags, reason_code, properties):\n        print(\"Connected with result code \" + str(reason_code))\n        client.subscribe(\"test/topic\")\n\n    def on_message(client, obj, msg):\n        print(f\"Received message: {msg.payload.decode()} on topic {msg.topic}\")\n\n    def on_subscribe(client, obj, mid, reason_code_list, properties):\n        print(\"Subscribed to topic with mid \" + str(mid))\n\n    client = mqtt.Client()\n    client.on_connect = on_connect\n    client.on_message = on_message\n    client.on_subscribe = on_subscribe\n\n    client.connect(\"localhost\", 1883, 60)\n    client.loop_forever()\n\nclass MQTTSubscriber:\n    def __init__(self, broker_address: str, broker_port: int, topic: str) -> None:\n        self.client = mqtt.Client()\n        self.broker_address = broker_address\n        self.broker_port = broker_port\n        self.topic = topic\n\n        self.client.on_connect = self.on_connect\n        self.client.on_message = self.on_message\n        self.client.on_subscribe = self.on_subscribe\n\n    def on_connect(self, mqttc, obj, flags, reason_code, properties):\n        print(\"Connected with result code \" + str(reason_code))\n        self.client.subscribe(self.topic)\n\n    def on_message(self, mqttc, obj, msg):\n        print(f\"Received message: {msg.payload.decode()} on topic {msg.topic}\")\n\n    def on_subscribe(self, mqttc, obj, mid, reason_code_list, properties):\n        print(\"Subscribed to topic with mid \" + str(mid))\n\n    def connect_and_subscribe(self) -> None:\n        self.client.connect(self.broker_address, self.broker_port, 60)\n        self.client.subscribe(self.topic)\n\n    def start(self) -> None:\n        self.connect_and_subscribe()\n        self.client.loop_forever()"
  },
  {
    "Task_id": 276,
    "Instruction": "Task Description: Implement a Python function that publishes messages to an MQTT broker using the Paho MQTT client library, with support for TLS/SSL encryption and authentication.\n\nFunction Description: The function `mqtt_publisher` establishes a connection to an MQTT broker, publishes a specified number of messages to a given topic at a defined interval, and handles connection events and message publishing callbacks. It supports optional TLS/SSL encryption, username/password authentication, and various MQTT QoS levels.\n\nInput:\n- `host` (str): The hostname or IP address of the MQTT broker.\n- `topic` (str): The MQTT topic to publish messages to.\n- `qos` (int): The Quality of Service level (0, 1, or 2) for message delivery.\n- `clientid` (str): The client ID to use when connecting to the broker.\n- `username` (str, optional): The username for broker authentication.\n- `disable_clean_session` (bool, optional): If True, the broker will maintain session state for the client.\n- `password` (str, optional): The password for broker authentication.\n- `port` (int, optional): The port number to connect to (defaults to 1883 for non-TLS, 8883 for TLS).\n- `nummsgs` (int): The number of messages to publish.\n- `delay` (float): The delay in seconds between publishing messages.\n- `keepalive` (int): The keepalive interval in seconds for the connection.\n- `use_tls` (bool, optional): If True, enable TLS/SSL encryption.\n- `insecure` (bool, optional): If True, disable certificate verification.\n- `cacerts` (str, optional): Path to CA certificate file for TLS/SSL.\n- `tls_version` (str, optional): The TLS version to use (\"tlsv1\", \"tlsv1.1\", or \"tlsv1.2\").\n- `debug` (bool, optional): If True, enable debug logging.\n\nOutput: None. The function publishes messages to the MQTT broker and prints status information to the console.",
    "Canonical_solution": "import argparse\nimport os\nimport ssl\nimport time\nimport paho.mqtt.client as mqtt\n\ndef mqtt_publisher(host, topic, qos, clientid, username, disable_clean_session, password, port, nummsgs, delay, keepalive, use_tls, insecure, cacerts, tls_version, debug):\n    usetls = use_tls\n    if cacerts:\n        usetls = True\n\n    if port is None:\n        if usetls:\n            port = 8883\n        else:\n            port = 1883\n\n    mqttc = mqtt.Client(mqtt.CallbackAPIVersion.VERSION2, clientid, clean_session = not disable_clean_session)\n\n    if usetls:\n        if tls_version == \"tlsv1.2\":\n            tlsVersion = ssl.PROTOCOL_TLSv1_2\n        elif tls_version == \"tlsv1.1\":\n            tlsVersion = ssl.PROTOCOL_TLSv1_1\n        elif tls_version == \"tlsv1\":\n            tlsVersion = ssl.PROTOCOL_TLSv1\n        elif tls_version is None:\n            tlsVersion = None\n        else:\n            print(\"Unknown TLS version - ignoring\")\n            tlsVersion = None\n\n        if not insecure:\n            cert_required = ssl.CERT_REQUIRED\n        else:\n            cert_required = ssl.CERT_NONE\n\n        mqttc.tls_set(ca_certs=cacerts, certfile=None, keyfile=None, cert_reqs=cert_required, tls_version=tlsVersion)\n\n        if insecure:\n            mqttc.tls_insecure_set(True)\n\n    if username or password:\n        mqttc.username_pw_set(username, password)\n\n    mqttc.on_message = on_message\n    mqttc.on_connect = on_connect\n    mqttc.on_publish = on_publish\n\n    if debug:\n        mqttc.on_log = on_log\n\n    print(\"Connecting to \"+host+\" port: \"+str(port))\n    mqttc.connect(host, port, keepalive)\n\n    mqttc.loop_start()\n\n    for x in range (0, nummsgs):\n        msg_txt = '{\"msgnum\": \"'+str(x)+'\"}'\n        print(\"Publishing: \"+msg_txt)\n        infot = mqttc.publish(topic, msg_txt, qos=qos)\n        infot.wait_for_publish()\n\n        time.sleep(delay)\n\n    mqttc.disconnect()",
    "Code_level": "Function-level",
    "FSMID_for_test": 83,
    "right_result": "def mqtt_publisher(host, topic, qos, clientid, username=None, disable_clean_session=False, password=None, port=None, nummsgs=10, delay=1.0, keepalive=60, use_tls=False, insecure=False, cacerts=None, tls_version=None, debug=False):\n    import paho.mqtt.client as mqtt\n    import logging\n    import time\n\n    if debug:\n        logging.basicConfig(level=logging.DEBUG)\n\n    def on_connect(client, userdata, flags, rc):\n        if rc == 0:\n            print(\"Connected to MQTT Broker!\")\n        else:\n            print(f\"Failed to connect, return code {rc}\")\n\n    def on_publish(client, userdata, mid):\n        print(f\"Message {mid} published\")\n\n    client = mqtt.Client(client_id=clientid, clean_session=disable_clean_session)\n    client.on_connect = on_connect\n    client.on_publish = on_publish\n\n    if username and password:\n        client.username_pw_set(username, password)\n\n    if use_tls:\n        if not port:\n            port = 8883\n        client.tls_set(ca_certs=cacerts, certfile=None, keyfile=None, tls_version=tls_version, ciphers=None)\n        if insecure:\n            client.tls_insecure_set(True)\n\n    if not port:\n        port = 1883\n\n    client.connect(host, port, keepalive)\n\n    client.loop_start()\n\n    for i in range(nummsgs):\n        message = f\"Message {i}\"\n        client.publish(topic, message, qos=qos)\n        time.sleep(delay)\n\n    client.loop_stop()\n    client.disconnect()"
  },
  {
    "Task_id": 277,
    "Instruction": "Task Description: Create a Python function that establishes an MQTT client connection to a broker, publishes messages to specified topics with a given QoS level, and handles connection and message events asynchronously.\n\nFunction Description: The function `mqtt_publish` initializes an MQTT client, sets up callback functions for connection, message reception, and message publishing events, connects to a specified MQTT broker, starts an asynchronous network loop, and publishes messages to designated topics with a QoS level of 2. The function demonstrates basic MQTT publishing capabilities with event handling.\n\nInput: None (The function uses hardcoded values for broker address, port, topics, and messages)\n\nOutput: None (The function's effects are side-effects: publishing messages and printing status information through callback functions)\n\nNote: The function includes three callback functions:\n1. `on_connect`: Prints the connection reason code when connected to the broker\n2. `on_message`: Prints received messages (though none are expected in this publish-only example)\n3. `on_publish`: Prints the message ID when a message is published",
    "Canonical_solution": "import paho.mqtt.client as mqtt\n\ndef on_connect(mqttc, obj, flags, reason_code, properties):\n    print(\"reason_code: \" + str(reason_code))\n\ndef on_message(mqttc, obj, msg):\n    print(msg.topic + \" \" + str(msg.qos) + \" \" + str(msg.payload))\n\ndef on_publish(mqttc, obj, mid, reason_code, properties):\n    print(\"mid: \" + str(mid))\n\ndef mqtt_publish():\n    mqttc = mqtt.Client(mqtt.CallbackAPIVersion.VERSION2)\n    mqttc.on_message = on_message\n    mqttc.on_connect = on_connect\n    mqttc.on_publish = on_publish\n    mqttc.connect(\"mqtt.eclipseprojects.io\", 1883, 60)\n    mqttc.loop_start()\n    (rc, mid) = mqttc.publish(\"tuple\", \"bar\", qos=2)\n    infot = mqttc.publish(\"class\", \"bar\", qos=2)\n    infot.wait_for_publish()",
    "Code_level": "Function-level",
    "FSMID_for_test": 83,
    "right_result": "import paho.mqtt.client as mqtt\nimport asyncio\n\ndef mqtt_publish():\n    client = mqtt.Client()\n    client.connect(\"broker.hivemq.com\", 1883, 60)\n    \n    def on_connect(client, userdata, flags, reason_code, properties):\n        print(f\"Connected with result code {reason_code}\")\n    \n    def on_message(client, userdata, msg):\n        print(f\"Received message: {msg.payload.decode()} on topic {msg.topic}\")\n    \n    def on_publish(client, userdata, mid):\n        print(f\"Message published with ID: {mid}\")\n    \n    client.on_connect = on_connect\n    client.on_message = on_message\n    client.on_publish = on_publish\n    \n    client.loop_start()\n    \n    topics = [\"topic1\", \"topic2\"]\n    messages = [\"message1\", \"message2\"]\n    \n    for topic, message in zip(topics, messages):\n        client.publish(topic, message, qos=2)\n    \n    try:\n        asyncio.get_event_loop().run_forever()\n    except KeyboardInterrupt:\n        client.disconnect()"
  },
  {
    "Task_id": 278,
    "Instruction": "Task Description: Create a function to execute system commands using subprocess with pipe-based inter-process communication in Python.\n\nFunction Description: The function should run a system command in a new process, capture its output and error streams, and optionally return a boolean indicating success/failure instead of the output. It should use subprocess.PIPE for communication between processes.\n\nInput:\n- cmd: [str] - The system command to be executed\n- is_ok: [bool] (optional, default=False) - Flag to determine return type (True/False for success/failure if True, output/error if False)\n\nOutput:\n- If is_ok=True: [bool] - Returns True if command executed successfully (returncode=0), False otherwise\n- If is_ok=False: [tuple] - Returns a tuple containing (output, error) as bytes objects from stdout and stderr respectively",
    "Canonical_solution": "import subprocess\n\ndef run_cmd(cmd, is_ok=False):\n    \"\"\"\n    Run cmd\n    \"\"\"\n    p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE,\n                         shell=True, executable='/bin/bash')\n\n    output, err = p.communicate()\n    if is_ok:\n        if p.returncode == 0:\n            return True\n        else:\n            return False\n\n    return output, err",
    "Code_level": "Function-level",
    "FSMID_for_test": 76,
    "right_result": "import subprocess\n\ndef execute_command(cmd, is_ok=False):\n    process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)\n    output, error = process.communicate()\n    if is_ok:\n        return process.returncode == 0\n    else:\n        return output, error"
  },
  {
    "Task_id": 282,
    "Instruction": "Task Description: The task involves creating Python functions that utilize subprocess and pipes to execute shell commands and handle their input/output streams. The functions should be able to run commands directly or filter text through commands in a shell environment.\n\nFunction Description: \n\n1. `run_and_read`: Executes a shell command and captures its standard output and error streams, then returns the decoded output (prioritizing stdout over stderr if available).\n\n2. `filter_region`: Takes a text input, pipes it through a shell command (using the system's default shell or a specified shell), and returns the processed output from the command.\n\nInput:\n\n- For `run_and_read`:\n  - `view`: (object) - A view object (contextual, typically from an editor/IDE)\n  - `cmd`: (str) - The shell command to execute\n\n- For `filter_region`:\n  - `view`: (object) - A view object (contextual, typically from an editor/IDE)\n  - `text`: (str) - The text to be processed by the command\n  - `command`: (str) - The shell command to process the text\n\nOutput:\n\n- For `run_and_read`: (str) - The decoded output from the command (stdout if available, otherwise stderr)\n- For `filter_region`: (str) - The decoded output from the command after processing the input text",
    "Canonical_solution": "import os\nimport subprocess\nfrom subprocess import PIPE\n\ndef run_and_read(view, cmd):\n    out, err = subprocess.Popen([cmd],\n            stdout=PIPE,\n            stderr=PIPE,\n            shell=True).communicate()\n    try:\n        return (out or err).decode('utf-8')\n    except AttributeError:\n        return ''\n\ndef filter_region(view, text, command):\n    shell = view.settings().get('VintageousEx_linux_shell')\n    shell = shell or os.path.expandvars(\"$SHELL\")\n    p = subprocess.Popen([shell, '-c', 'echo \"%s\" | %s' % (text, command)],\n             stderr=subprocess.PIPE,\n             stdout=subprocess.PIPE)\n    return p.communicate()[0][:-1].decode('utf-8')",
    "Code_level": "Function-level",
    "FSMID_for_test": 76,
    "right_result": "import subprocess\n\ndef run_and_read(view, cmd):\n    process = subprocess.Popen(\n        cmd,\n        stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE,\n        stdin=subprocess.DEVNULL,\n        shell=True,\n        text=True,\n        env=view.env\n    )\n    stdout, stderr = process.communicate()\n    if stdout:\n        return stdout\n    else:\n        return stderr\n\ndef filter_region(view, text, command):\n    process = subprocess.Popen(\n        command,\n        stdin=subprocess.PIPE,\n        stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE,\n        shell=True,\n        text=True,\n        env=view.env\n    )\n    stdout, stderr = process.communicate(input=text)\n    if stdout:\n        return stdout\n    else:\n        return stderr"
  },
  {
    "Task_id": 283,
    "Instruction": "Task Description: Create a function that executes a command in a subprocess using Python's subprocess module, capturing and returning the output and error streams along with the return code.\n\nFunction Description: The function `runvol` executes a given command (constructed from Python interpreter path, volatility script path, and additional arguments) as a subprocess. It captures the standard output, standard error, and return code of the subprocess, then returns these values after printing them for debugging purposes.\n\nInput:\n- `args`: [List[str]] - Additional command-line arguments to pass to the volatility script\n- `volatility`: [str] - Path to the volatility script to be executed\n- `python`: [str] - Path to the Python interpreter to use for execution\n\nOutput:\n- Returns a tuple containing:\n  - `returncode`: [int] - The exit code of the subprocess\n  - `stdout`: [bytes] - The standard output of the subprocess\n  - `stderr`: [bytes] - The standard error of the subprocess",
    "Canonical_solution": "import os\nimport subprocess\nimport sys\n\ndef runvol(args, volatility, python):\n    volpy = volatility\n    python_cmd = python\n\n    cmd = [python_cmd, volpy] + args\n    print(\" \".join(cmd))\n    p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    stdout, stderr = p.communicate()\n    print(\"stdout:\")\n    sys.stdout.write(str(stdout))\n    print(\"\")\n    print(\"stderr:\")\n    sys.stdout.write(str(stderr))\n    print(\"\")\n\n    return p.returncode, stdout, stderr",
    "Code_level": "Function-level",
    "FSMID_for_test": 76,
    "right_result": "import subprocess\n\ndef runvol(args, volatility, python):\n    command = [python, volatility] + args\n    process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=False)\n    stdout, stderr = process.communicate()\n    returncode = process.returncode\n    print(f\"Return Code: {returncode}\")\n    print(f\"Standard Output: {stdout}\")\n    print(f\"Standard Error: {stderr}\")\n    return returncode, stdout, stderr"
  },
  {
    "Task_id": 284,
    "Instruction": "Task Description: Write a Python function that executes a Perl script (conlleval) via subprocess to evaluate model scores from a given file and returns the accuracy, precision, recall, and F1 score.\n\nFunction Description: The function uses subprocess.PIPE to create a pipe for inter-process communication with a Perl script. It starts the Perl process, feeds it input from a specified file, captures the output, and parses the results to extract evaluation metrics.\n\nInput:\n- path: str - The file path containing the input data to be evaluated by the Perl script\n\nOutput:\n- tuple[float, float, float, float] - A tuple containing four float values representing accuracy, precision, recall, and F1 score in that order",
    "Canonical_solution": "import subprocess\n\ndef scores(path):\n    bashCommand = 'perl conlleval'\n    process = subprocess.Popen(bashCommand.split(), stdout=subprocess.PIPE,\n                               stdin=open(path))\n    output, error = process.communicate()\n    output = output.decode().split('\\n')[1].split('%; ')\n    output = [out.split(' ')[-1] for out in output]\n    acc, prec, recall, fb1 = tuple(output)\n    return float(acc), float(prec), float(recall), float(fb1)",
    "Code_level": "Function-level",
    "FSMID_for_test": 76,
    "right_result": "import subprocess\n\ndef evaluate_model(path):\n    process = subprocess.Popen(['conlleval'], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    with open(path, 'r') as f:\n        input_data = f.read()\n    stdout, stderr = process.communicate(input_data.encode())\n    lines = stdout.decode().split('\\n')\n    accuracy = float(lines[1].split()[-1])\n    precision = float(lines[2].split()[-1])\n    recall = float(lines[3].split()[-1])\n    f1_score = float(lines[4].split()[-1])\n    return (accuracy, precision, recall, f1_score)"
  },
  {
    "Task_id": 287,
    "Instruction": "Task Description: Create a function that inspects the value of a Python object in a running process by its memory address using GDB debugger through subprocess communication.\n\nFunction Description: The function uses GDB to attach to a running Python process and inspect the value of a Python object at a specified memory address. It establishes inter-process communication using subprocess.PIPE to capture GDB's output and parse the result.\n\nInput:\n- pid: [int] - Process ID of the target Python process\n- address: [str/int] - Memory address of the Python object to inspect (can be hex string or integer)\n\nOutput:\n- [str] - The string representation of the inspected Python object as returned by GDB, or None if the address couldn't be resolved",
    "Canonical_solution": "import sys\nimport subprocess\n\nencoding = sys.getdefaultencoding()\n\ndef inspect(pid, address):\n    \"Return the value of an object in a given process at the specified address\"\n    cmd = ' '.join([\n        'gdb --quiet -p %s -batch' % pid,\n        '-eval-command=\"print (PyObject *)%s\"' % address,\n    ])\n    p = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE)\n    for line in p.communicate()[0].decode(encoding).split('\\n'):\n        if line.startswith('$1 = '):\n            return line[5:]",
    "Code_level": "Function-level",
    "FSMID_for_test": 76,
    "right_result": "import subprocess\nimport re\n\ndef inspect_python_object(pid, address):\n    gdb = subprocess.Popen(['gdb', '-ex', 'set pagination off', '-ex', f'attach {pid}', '-ex', 'bt', '-ex', 'quit'], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)\n    output, _ = gdb.communicate(input=f'print/x *{address}\\n')\n    match = re.search(r'(\\S+)\\s+0x[0-9a-fA-F]+\\s+.*', output)\n    if match:\n        return match.group(1)\n    return None"
  },
  {
    "Task_id": 288,
    "Instruction": "Task Description: Implement functions to execute system commands and manage subprocesses in Python, allowing for both simple command execution and more controlled process management with input/output handling.\n\nFunction Description: The module provides two main functions for subprocess management: `execute()` for running commands with comprehensive output handling, and `popen()` for creating Popen objects with predefined pipe configurations.\n\nInput:\n- For `execute()`:\n  - cmd: [string/list] - Command to execute (as string or argument list)\n  - shell: [bool, optional] - Whether to use shell execution (default False)\n  - poll_period: [float, optional] - Unused in current implementation\n  - catch_out: [bool, optional] - Whether to capture output (default False)\n  - executable: [string, optional] - Path to executable to use\n  - env: [dict, optional] - Environment variables for subprocess\n\n- For `popen()`:\n  - cmnd: [string] - Command string to execute\n\nOutput:\n- For `execute()`:\n  - Returns tuple: (returncode: int, stdout: bytes/str, stderr: bytes/str)\n  \n- For `popen()`:\n  - Returns: subprocess.Popen object configured with pipes for all streams",
    "Canonical_solution": "import subprocess\nimport shlex\nimport logging\nfrom six import string_types\n\ndef execute(cmd, shell=False, poll_period=1.0, catch_out=False, executable=None, env=None):\n    log = logging.getLogger(__name__)\n    log.info(\"Starting: %s\", cmd)\n\n    stdout = \"\"\n    stderr = \"\"\n\n    if not shell and isinstance(cmd, string_types):\n        cmd = shlex.split(cmd)\n    if not executable:\n        executable = None\n\n    if catch_out:\n        process = subprocess.Popen(\n            cmd,\n            shell=shell,\n            stderr=subprocess.PIPE,\n            stdout=subprocess.PIPE,\n            close_fds=True,\n            env=env,\n            executable=executable,\n        )\n    else:\n        process = subprocess.Popen(cmd, shell=shell, close_fds=True, env=env, executable=executable)\n\n    stdout, stderr = process.communicate()\n    if stderr:\n        log.error(\"There were errors:\\n%s\", stderr)\n\n    if stdout:\n        log.debug(\"Process output:\\n%s\", stdout)\n    returncode = process.returncode\n    log.info(\"Process cmd: %s \u2013 exit code: %s\", cmd, returncode)\n    return returncode, stdout, stderr\n\ndef popen(cmnd):\n    return subprocess.Popen(\n        cmnd,\n        bufsize=0,\n        close_fds=True,\n        shell=True,\n        stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE,\n        stdin=subprocess.PIPE,\n    )",
    "Code_level": "Function-level",
    "FSMID_for_test": 76,
    "right_result": "import subprocess\nimport sys\nimport os\n\ndef execute(cmd, shell=False, poll_period=0.0, catch_out=False, executable=None, env=None):\n    if isinstance(cmd, str):\n        cmd = [cmd]\n    if shell and not isinstance(cmd, list):\n        raise ValueError(\"When shell is True, cmd must be a list\")\n    if env is None:\n        env = os.environ.copy()\n    if catch_out:\n        stdout = subprocess.PIPE\n        stderr = subprocess.PIPE\n    else:\n        stdout = None\n        stderr = None\n    process = subprocess.Popen(cmd, stdin=subprocess.PIPE, stdout=stdout, stderr=stderr, shell=shell, executable=executable, env=env)\n    stdout_bytes, stderr_bytes = process.communicate()\n    returncode = process.wait()\n    if sys.version_info[0] > 2:\n        stdout_str = stdout_bytes.decode('utf-8') if stdout_bytes else ''\n        stderr_str = stderr_bytes.decode('utf-8') if stderr_bytes else ''\n    else:\n        stdout_str = stdout_bytes if stdout_bytes else ''\n        stderr_str = stderr_bytes if stderr_bytes else ''\n    return (returncode, stdout_str, stderr_str)\n\ndef popen(cmnd):\n    return subprocess.Popen(cmnd, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)"
  },
  {
    "Task_id": 292,
    "Instruction": "Task Description: Create a Python class that facilitates executing system commands with options for streaming output, sudo execution, and handling both string and list-based commands.\n\nClass Description: The ProcessRunner class provides a flexible way to execute system commands with various configurations. It handles command execution with options for streaming output in real-time, sudo privileges, and supports both string and list-formatted commands. The class manages subprocess creation, output capture, error handling, and return code collection.\n\nAttributes:\n- None (This class doesn't maintain persistent attributes between method calls)\n\nMethods:\n- _read_output(pipe, q) -> None - Private method that continuously reads from a pipe and puts data into a queue for output streaming.\n- _stream_output(comm, shell) -> tuple - Executes a command with streaming output capability, returns (stdout, stderr, returncode).\n- _decode(value) -> str - Helper method to decode byte strings to unicode (Python 3 compatibility).\n- _run_command(comm, shell) -> tuple - Executes a command and returns output after completion, returns (stdout, stderr, returncode).\n- execute(command_list, leave_on_fail) -> tuple/list - Main interface for command execution, handles multiple commands with various options. Returns single result tuple or list of tuples depending on input.\n\nInput Parameters:\n- For execute():\n  - command_list: dict/list - Either a single command dictionary or list of command dictionaries\n  - leave_on_fail: bool - Whether to stop execution if a command fails (default: False)\n- Command dictionary structure:\n  - args: list/str - The command to execute (either as list or string)\n  - shell: bool - Whether to use shell execution (default: False)\n  - stream: bool - Whether to stream output in real-time (default: False)\n  - sudo: bool - Whether to execute with sudo (default: False)\n\nOutput:\n- For single command: tuple (stdout_output, stderr_output, return_code)\n- For multiple commands: list of tuples [(stdout, stderr, returncode), ...]\n- On error: tuple (\"\", \"Command not found!\", 1)",
    "Canonical_solution": "import sys\nimport subprocess\nimport threading\nimport shlex\ntry:\n    from Queue import Queue, Empty\nexcept:\n    from queue import Queue, Empty\n\nON_POSIX = 'posix' in sys.builtin_module_names\n\nclass ProcessRunner:\n    def __init__(self):\n        pass\n\n    def _read_output(self, pipe, q):\n        try:\n            for line in iter(lambda: pipe.read(1), b''):\n                q.put(line)\n        except ValueError:\n            pass\n        pipe.close()\n\n    def _stream_output(self, comm, shell=False):\n        output = error = \"\"\n        p = ot = et = None\n        try:\n            if shell and type(comm) is list:\n                comm = \" \".join(shlex.quote(x) for x in comm)\n            if not shell and type(comm) is str:\n                comm = shlex.split(comm)\n            p = subprocess.Popen(comm, shell=shell, stdout=subprocess.PIPE, stderr=subprocess.PIPE, \n                                bufsize=0, universal_newlines=True, close_fds=ON_POSIX)\n            \n            q = Queue()\n            t = threading.Thread(target=self._read_output, args=(p.stdout, q))\n            t.daemon = True\n            \n            qe = Queue()\n            te = threading.Thread(target=self._read_output, args=(p.stderr, qe))\n            te.daemon = True\n            \n            t.start()\n            te.start()\n\n            while True:\n                c = z = \"\"\n                try:\n                    c = q.get_nowait()\n                except Empty:\n                    pass\n                else:\n                    sys.stdout.write(c)\n                    output += c\n                    sys.stdout.flush()\n                try:\n                    z = qe.get_nowait()\n                except Empty:\n                    pass\n                else:\n                    sys.stderr.write(z)\n                    error += z\n                    sys.stderr.flush()\n                p.poll()\n                if c==z==\"\" and p.returncode != None:\n                    break\n\n            o, e = p.communicate()\n            return (output+o, error+e, p.returncode)\n        except:\n            if p:\n                return (output, error, p.returncode)\n            return (\"\", \"Command not found!\", 1)\n\n    def _decode(self, value):\n        if sys.version_info >= (3,0) and isinstance(value, bytes):\n            return value.decode(\"utf-8\",\"ignore\")\n        return value\n\n    def _run_command(self, comm, shell=False):\n        try:\n            if shell and type(comm) is list:\n                comm = \" \".join(shlex.quote(x) for x in comm)\n            if not shell and type(comm) is str:\n                comm = shlex.split(comm)\n            p = subprocess.Popen(comm, shell=shell, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n            c = p.communicate()\n            return (self._decode(c[0]), self._decode(c[1]), p.returncode)\n        except:\n            return (\"\", \"Command not found!\", 1)\n\n    def execute(self, command_list, leave_on_fail=False):\n        if type(command_list) is dict:\n            command_list = [command_list]\n        output_list = []\n        for comm in command_list:\n            args = comm.get(\"args\", [])\n            shell = comm.get(\"shell\", False)\n            stream = comm.get(\"stream\", False)\n            sudo = comm.get(\"sudo\", False)\n            \n            if not len(args):\n                continue\n                \n            if sudo:\n                out = self._run_command([\"which\", \"sudo\"])\n                if \"sudo\" in out[0]:\n                    if type(args) is list:\n                        args.insert(0, out[0].replace(\"\\n\", \"\"))\n                    elif type(args) is str:\n                        args = out[0].replace(\"\\n\", \"\") + \" \" + args\n\n            if stream:\n                out = self._stream_output(args, shell)\n            else:\n                out = self._run_command(args, shell)\n                \n            output_list.append(out)\n            if leave_on_fail and out[2] != 0:\n                break\n                \n        return output_list[0] if len(output_list) == 1 else output_list",
    "Code_level": "Class-level",
    "FSMID_for_test": 76,
    "right_result": "class ProcessRunner:\n    def _read_output(self, pipe, q):\n        for line in iter(pipe.readline, b''):\n            q.put(self._decode(line))\n        pipe.close()\n\n    def _stream_output(self, comm, shell):\n        import subprocess\n        from multiprocessing import Queue\n        q = Queue()\n        process = subprocess.Popen(\n            comm,\n            stdout=subprocess.PIPE,\n            stderr=subprocess.PIPE,\n            stdin=subprocess.DEVNULL,\n            shell=shell,\n            universal_newlines=True\n        )\n        self._read_output(process.stdout, q)\n        self._read_output(process.stderr, q)\n        stdout = \"\"\n        while not q.empty():\n            stdout += q.get()\n        returncode = process.wait()\n        stderr = \"\"\n        while not q.empty():\n            stderr += q.get()\n        return stdout, stderr, returncode\n\n    def _decode(self, value):\n        if isinstance(value, bytes):\n            return value.decode('utf-8')\n        return value\n\n    def _run_command(self, comm, shell):\n        import subprocess\n        process = subprocess.Popen(\n            comm,\n            stdout=subprocess.PIPE,\n            stderr=subprocess.PIPE,\n            stdin=subprocess.DEVNULL,\n            shell=shell,\n            universal_newlines=True\n        )\n        stdout, stderr = process.communicate()\n        returncode = process.returncode\n        return self._decode(stdout), self._decode(stderr), returncode\n\n    def execute(self, command_list, leave_on_fail=False):\n        if isinstance(command_list, dict):\n            command_list = [command_list]\n        results = []\n        for cmd in command_list:\n            args = cmd.get('args', [])\n            shell = cmd.get('shell', False)\n            stream = cmd.get('stream', False)\n            sudo = cmd.get('sudo', False)\n            if sudo:\n                args = ['sudo'] + (args if isinstance(args, list) else [args])\n            if stream:\n                stdout, stderr, returncode = self._stream_output(args, shell)\n            else:\n                stdout, stderr, returncode = self._run_command(args, shell)\n            results.append((stdout, stderr, returncode))\n            if leave_on_fail and returncode != 0:\n                break\n        return results if isinstance(command_list, list) else results[0]"
  },
  {
    "Task_id": 293,
    "Instruction": "Task Description: Implement a set of steganography cracking classes that utilize subprocess communication to interact with different steganography tools (steghide, outguess, outguess-0.13, and openstego) for extracting hidden data from files.\n\nClass Description: Each class implements a specific steganography tool cracker using subprocess communication to interact with the respective command-line tool. The classes follow a similar pattern of spawning a subprocess, communicating with it via pipes, and analyzing the output to determine if the correct passphrase was found.\n\nAttributes:\nNone (These are stateless classes that don't maintain instance attributes)\n\nMethods:\n\nMethod1: crack_function(stego_file: str, passphrase: str) -> None - Attempts to extract hidden data from the given stego_file using the provided passphrase. Prints success message and exits if found, otherwise continues silently.\n\nClasses:\n\n1. ThreadedSteghideCracker:\n   - Uses 'steghide' command-line tool\n   - Checks for embedded file information in output\n   - Prints extraction command on success\n\n2. ThreadedOutguessCracker:\n   - Uses 'outguess' command-line tool\n   - Creates temporary file for output\n   - Validates extracted data for ASCII content\n   - Prints secret message and cleanup command on success\n\n3. ThreadedOutguess013Cracker:\n   - Uses 'outguess-0.13' command-line tool\n   - Similar functionality to ThreadedOutguessCracker\n   - Handles older version of outguess\n\n4. ThreadedOpenstegoCracker:\n   - Uses 'openstego' command-line tool\n   - Checks stderr for extraction success\n   - Prints extracted file path on success\n\nAll methods:\n- Use subprocess.Popen with stdout/stderr pipes\n- Process communication via communicate()\n- Include proper error handling\n- Exit program on successful extraction\n- Include cleanup for temporary files where applicable",
    "Canonical_solution": "import subprocess\nimport re\nimport sys\nimport os\nimport md5\n\nclass ThreadedSteghideCracker:\n    def crack_function(self, stego_file, passphrase):\n        process = subprocess.Popen(['steghide',\n                                  'info',\n                                  stego_file,\n                                  '-p', passphrase],\n                                 stdout=subprocess.PIPE,\n                                 stderr=subprocess.PIPE)\n        (out, err) = process.communicate()\n        m = re.search(r\"embedded file \\\"(.*)\\\"\", out)\n        if m is not None:\n            print(\"\\nFound '{}'!\\n\\\nExtract with `steghide extract -sf {} -p \\\"{}\\\"`\"\n                  .format(m.group(1), stego_file, passphrase))\n            sys.exit(0)\n\nclass ThreadedOutguessCracker:\n    def crack_function(self, stego_file, passphrase):\n        tmp_file = \"/tmp/{}\".format(md5.new(passphrase).hexdigest())\n        process = subprocess.Popen(['outguess',\n                                  '-k', passphrase,\n                                  '-r', stego_file,\n                                  tmp_file],\n                                 stdout=subprocess.PIPE,\n                                 stderr=subprocess.PIPE)\n        (out, err) = process.communicate()\n        try:\n            with open(tmp_file, \"r\") as f:\n                data = f.read()\n                if len(data) > 0:\n                    ascii_data = \"\".join(filter(lambda x: ord(x) < 128, data))\n                    if float(len(ascii_data)) / float(len(data)) > 0.8:\n                        print(\"\\nFound secret message:\\n---\\n{}\\n---\\n\\\nExtract with `outguess -k \\\"{}\\\" -r {} /tmp/outguess_secret.txt`\"\n                              .format(ascii_data, passphrase, stego_file))\n                        sys.exit(0)\n        finally:\n            os.remove(tmp_file)\n\nclass ThreadedOutguess013Cracker:\n    def crack_function(self, stego_file, passphrase):\n        tmp_file = \"/tmp/{}\".format(md5.new(passphrase).hexdigest())\n        process = subprocess.Popen(['outguess-0.13',\n                                  '-k', passphrase,\n                                  '-r', stego_file,\n                                  tmp_file],\n                                 stdout=subprocess.PIPE,\n                                 stderr=subprocess.PIPE)\n        (out, err) = process.communicate()\n        try:\n            with open(tmp_file, \"r\") as f:\n                data = f.read()\n                if len(data) > 0:\n                    ascii_data = \"\".join(filter(lambda x: ord(x) < 128, data))\n                    if float(len(ascii_data)) / float(len(data)) > 0.8:\n                        print(\"\\nFound secret message:\\n---\\n{}\\n---\\n\\\nExtract with `outguess -k \\\"{}\\\" -r {} /tmp/outguess_secret.txt`\"\n                              .format(ascii_data, passphrase, stego_file))\n                        sys.exit(0)\n        finally:\n            os.remove(tmp_file)\n\nclass ThreadedOpenstegoCracker:\n    def crack_function(self, stego_file, passphrase):\n        process = subprocess.Popen(['openstego', 'extract',\n                                  '-p', passphrase,\n                                  '-sf', stego_file],\n                                 stdout=subprocess.PIPE,\n                                 stderr=subprocess.PIPE)\n        (out, err) = process.communicate()\n        m = re.search(r\"Extracted file: (.*)\", err)\n        if m is not None:\n            print(\"\\nFound '{}'!\\n\\\nExtract with `openstego extract -sf {} -p \\\"{}\\\"`\"\n                  .format(m.group(1), stego_file, passphrase))\n            sys.exit(0)",
    "Code_level": "Class-level",
    "FSMID_for_test": 76,
    "right_result": "import subprocess\nimport os\nimport sys\n\nclass ThreadedSteghideCracker:\n    def crack_function(self, stego_file: str, passphrase: str) -> None:\n        cmd = ['steghide', '--extract', '-sf', stego_file, '-p', passphrase]\n        process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)\n        stdout, stderr = process.communicate()\n        if 'embedded file' in stdout:\n            print(f\"Success: Hidden data extracted using steghide with passphrase '{passphrase}'\")\n            print(f\"Command: {' '.join(cmd)}\")\n            sys.exit(0)\n\nclass ThreadedOutguessCracker:\n    def crack_function(self, stego_file: str, passphrase: str) -> None:\n        temp_out = 'temp_secret.txt'\n        cmd = ['outguess', '-r', stego_file, '-m', passphrase, '-o', temp_out]\n        process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)\n        stdout, stderr = process.communicate()\n        if os.path.exists(temp_out):\n            with open(temp_out, 'r') as f:\n                content = f.read()\n                if all(c.isprintable() or c.isspace() for c in content):\n                    print(f\"Success: Secret message extracted using outguess with passphrase '{passphrase}'\")\n                    print(f\"Secret: {content}\")\n                    print(f\"Cleanup: rm {temp_out}\")\n                    os.remove(temp_out)\n                    sys.exit(0)\n\nclass ThreadedOutguess013Cracker:\n    def crack_function(self, stego_file: str, passphrase: str) -> None:\n        temp_out = 'temp_secret.txt'\n        cmd = ['outguess-0.13', '-r', stego_file, '-m', passphrase, '-o', temp_out]\n        process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)\n        stdout, stderr = process.communicate()\n        if os.path.exists(temp_out):\n            with open(temp_out, 'r') as f:\n                content = f.read()\n                if all(c.isprintable() or c.isspace() for c in content):\n                    print(f\"Success: Secret message extracted using outguess-0.13 with passphrase '{passphrase}'\")\n                    print(f\"Secret: {content}\")\n                    print(f\"Cleanup: rm {temp_out}\")\n                    os.remove(temp_out)\n                    sys.exit(0)\n\nclass ThreadedOpenstegoCracker:\n    def crack_function(self, stego_file: str, passphrase: str) -> None:\n        cmd = ['openstego', 'extract', '-f', stego_file, '-p', passphrase]\n        process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)\n        stdout, stderr = process.communicate()\n        if 'successfully extracted' in stderr:\n            print(f\"Success: Hidden data extracted using openstego with passphrase '{passphrase}'\")\n            print(f\"Command: {' '.join(cmd)}\")\n            sys.exit(0)"
  },
  {
    "Task_id": 296,
    "Instruction": "Task Description: Create a function that executes a system command using Python's subprocess module with pipe-based inter-process communication.\n\nFunction Description: The function should take a system command as input, execute it in a subprocess, capture the output through a pipe, and return the decoded output string. It should handle the process creation, communication, and cleanup automatically.\n\nInput: \n- com: [str] - The system command to be executed as a string\n\nOutput:\n- [str] - The decoded output from the executed command, as a string",
    "Canonical_solution": "import sys\nimport subprocess\n\ndef excuteCommand(com):\n    ex = subprocess.Popen(com, stdout=subprocess.PIPE, shell=True)\n    out, err = ex.communicate()\n    status = ex.wait()\n    return out.decode()",
    "Code_level": "Function-level",
    "FSMID_for_test": 76,
    "right_result": "import subprocess\n\ndef execute_command(com):\n    process = subprocess.Popen(com, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)\n    output, error = process.communicate()\n    return output.decode('utf-8') if output else error.decode('utf-8')"
  },
  {
    "Task_id": 298,
    "Instruction": "Task Description: Implement a class to collect and analyze OSSEC (Open Source Host-based Intrusion Detection System) agent states using subprocess communication.\n\nClass Description: The OssecCollector class interacts with the OSSEC agent control utility to retrieve agent status information and parse the results into a structured format. It handles command execution with optional sudo privileges and processes the output to count agent states.\n\nAttributes:\n- bin_path: [str] - Path to the OSSEC agent_control binary (default: '/var/ossec/bin/agent_control')\n- use_sudo: [bool] - Flag indicating whether to use sudo for command execution (default: True)\n- sudo_cmd: [str] - Path to the sudo binary (default: '/usr/bin/sudo')\n\nMethods:\n- __init__(bin_path: str = '/var/ossec/bin/agent_control', use_sudo: bool = True, sudo_cmd: str = '/usr/bin/sudo') -> None - Initializes the collector with configuration paths\n- collect() -> dict - Executes the agent control command, processes the output, and returns a dictionary counting agent states by status\n\nThe implementation should use subprocess.PIPE for inter-process communication and handle potential execution errors appropriately.",
    "Canonical_solution": "import subprocess\nimport re\nfrom diamond.collector import str_to_bool\n\nclass OssecCollector:\n    def __init__(self, bin_path='/var/ossec/bin/agent_control', use_sudo=True, sudo_cmd='/usr/bin/sudo'):\n        self.bin_path = bin_path\n        self.use_sudo = use_sudo\n        self.sudo_cmd = sudo_cmd\n\n    def collect(self):\n        command = [self.bin_path, '-l']\n\n        if str_to_bool(self.use_sudo):\n            command.insert(0, self.sudo_cmd)\n\n        try:\n            p = subprocess.Popen(command, stdout=subprocess.PIPE)\n            res = p.communicate()[0]\n        except Exception as e:\n            raise Exception('Unable to exec cmd: %s, because %s' % (' '.join(command), str(e)))\n\n        if res == '':\n            raise Exception('Empty result from exec cmd: %s' % (' '.join(command)))\n\n        states = {}\n        for line in res.split(\"\\n\"):\n            if not line.startswith('   ID: '):\n                continue\n            fragments = line.split(',')\n            state = fragments[-1].lstrip()\n            if state not in states:\n                states[state] = 1\n            else:\n                states[state] += 1\n\n        return states",
    "Code_level": "Class-level",
    "FSMID_for_test": 76,
    "right_result": "import subprocess\nimport shlex\n\nclass OssecCollector:\n    def __init__(self, bin_path: str = '/var/ossec/bin/agent_control', use_sudo: bool = True, sudo_cmd: str = '/usr/bin/sudo') -> None:\n        self.bin_path = bin_path\n        self.use_sudo = use_sudo\n        self.sudo_cmd = sudo_cmd\n\n    def collect(self) -> dict:\n        command = [self.bin_path, 'list_agents']\n        if self.use_sudo:\n            command = [self.sudo_cmd] + command\n        process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)\n        stdout, stderr = process.communicate()\n        if process.returncode != 0:\n            raise RuntimeError(f\"Failed to execute command: {stderr}\")\n        states = {}\n        for line in stdout.splitlines():\n            if line.strip() and not line.startswith('Agent'):\n                parts = line.split()\n                agent_id = parts[0]\n                state = parts[1]\n                states[agent_id] = state\n        state_counts = {}\n        for state in states.values():\n            state_counts[state] = state_counts.get(state, 0) + 1\n        return state_counts"
  },
  {
    "Task_id": 299,
    "Instruction": "Task Description: Create a Python class that checks the installed version of npm (Node Package Manager) on the system using subprocess communication.\n\nClass Description: The Segment class is designed to retrieve and store the version of npm installed on the system. It uses subprocess.PIPE to communicate with the system process that runs the npm version command.\n\nAttributes:\nversion: [str] - Stores the version of npm retrieved from the system process. Initialized as None and updated after running the version check.\n\nMethods:\nrun: [run]() -> [None] - Executes the npm --version command using subprocess.Popen, captures the output, decodes it, and stores the result in the version attribute. Handles OSError exceptions if the command fails.\nget_version: [get_version]() -> [str] - Returns the stored npm version. Returns None if the version check was not successful or not run.",
    "Canonical_solution": "import subprocess\n\nclass Segment:\n    def __init__(self):\n        self.version = None\n\n    def run(self):\n        try:\n            p1 = subprocess.Popen([\"npm\", \"--version\"], stdout=subprocess.PIPE)\n            self.version = p1.communicate()[0].decode(\"utf-8\").rstrip()\n        except OSError:\n            self.version = None\n\n    def get_version(self):\n        return self.version",
    "Code_level": "Class-level",
    "FSMID_for_test": 76,
    "right_result": "import subprocess\n\nclass Segment:\n    def __init__(self):\n        self.version = None\n\n    def run(self):\n        try:\n            process = subprocess.Popen(['npm', '--version'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n            output, error = process.communicate()\n            if process.returncode == 0:\n                self.version = output.decode().strip()\n            else:\n                self.version = None\n        except OSError:\n            self.version = None\n\n    def get_version(self):\n        return self.version"
  },
  {
    "Task_id": 3,
    "Instruction": "Task Description: Implement an asynchronous Kafka consumer in Python using the aiokafka library to subscribe to topics, consume messages, and handle batch processing with configurable timeouts and maximum records.\n\nClass Description: The LogicSubscriber class is an abstract base class that provides core functionality for consuming messages from Kafka topics asynchronously. It handles connection management, message consumption, and error handling. The DefaultSubscriber and BatchSubscriber classes extend this functionality for single-message and batch-message consumption respectively.\n\nAttributes:\n\ntopics: Sequence[str] - List of Kafka topics to subscribe to\ngroup_id: Optional[str] - Consumer group ID for Kafka\nconsumer: Optional[AIOKafkaConsumer] - The aiokafka consumer instance\npartitions: Iterable[TopicPartition] - Specific partitions to consume from\n__connection_args: Dict[str, Any] - Connection arguments for Kafka consumer\n\nMethods:\n\n__init__(*topics: str, group_id: Optional[str], connection_args: Dict[str, Any], partitions: Iterable[TopicPartition], default_parser: AsyncCallable, default_decoder: AsyncCallable) -> None - Initializes the subscriber with topics, group ID, connection args, partitions, and message processing callables.\n\nstart() -> None - Creates and starts the Kafka consumer, subscribing to topics or assigning partitions.\n\nclose() -> None - Stops and cleans up the Kafka consumer.\n\nget_msg() -> MsgType - Abstract method to be implemented by subclasses for retrieving messages.\n\n_consume() -> None - Main consumption loop that processes messages and handles errors.\n\nDefaultSubscriber Methods:\n\nget_msg() -> ConsumerRecord - Retrieves a single message from Kafka.\n\nBatchSubscriber Methods:\n\n__init__(*topics: str, batch_timeout_ms: int, max_records: Optional[int], **kwargs: Any) -> None - Extends initialization with batch-specific parameters.\n\nget_msg() -> Tuple[ConsumerRecord, ...] - Retrieves a batch of messages from Kafka with configurable timeout and maximum records.",
    "Canonical_solution": "from typing import Optional, Iterable, Sequence, Dict, Any, Tuple\nfrom abc import ABC, abstractmethod\nfrom itertools import chain\nimport anyio\nfrom aiokafka import ConsumerRecord, TopicPartition\nfrom aiokafka.errors import ConsumerStoppedError, KafkaError\nfrom faststream.broker.subscriber.usecase import SubscriberUsecase\nfrom faststream.broker.types import AsyncCallable, BrokerMiddleware, MsgType\nfrom faststream.broker.utils import process_msg\nfrom faststream.kafka.message import KafkaAckableMessage, KafkaMessage\nfrom faststream.kafka.parser import AioKafkaBatchParser, AioKafkaParser\n\nclass LogicSubscriber(ABC, SubscriberUsecase[MsgType]):\n    topics: Sequence[str]\n    group_id: Optional[str]\n    consumer: Optional[\"AIOKafkaConsumer\"]\n\n    def __init__(\n        self,\n        *topics: str,\n        group_id: Optional[str],\n        connection_args: Dict[str, Any],\n        partitions: Iterable[TopicPartition],\n        default_parser: AsyncCallable,\n        default_decoder: AsyncCallable,\n    ) -> None:\n        super().__init__(\n            default_parser=default_parser,\n            default_decoder=default_decoder,\n        )\n        self.topics = topics\n        self.partitions = partitions\n        self.group_id = group_id\n        self.__connection_args = connection_args\n        self.consumer = None\n\n    async def start(self) -> None:\n        self.consumer = consumer = self.builder(\n            group_id=self.group_id,\n            client_id=self.client_id,\n            **self.__connection_args,\n        )\n\n        if self.topics:\n            consumer.subscribe(topics=self.topics)\n        elif self.partitions:\n            consumer.assign(partitions=self.partitions)\n\n        await consumer.start()\n\n    async def close(self) -> None:\n        if self.consumer is not None:\n            await self.consumer.stop()\n            self.consumer = None\n\n    @abstractmethod\n    async def get_msg(self) -> MsgType:\n        raise NotImplementedError()\n\n    async def _consume(self) -> None:\n        while self.running:\n            try:\n                msg = await self.get_msg()\n                if msg:\n                    await self.consume_one(msg)\n            except KafkaError:\n                await anyio.sleep(5)\n            except ConsumerStoppedError:\n                return\n\nclass DefaultSubscriber(LogicSubscriber[ConsumerRecord]):\n    async def get_msg(self) -> ConsumerRecord:\n        assert self.consumer, \"Consumer not initialized\"\n        return await self.consumer.getone()\n\nclass BatchSubscriber(LogicSubscriber[Tuple[ConsumerRecord, ...]]):\n    def __init__(\n        self,\n        *topics: str,\n        batch_timeout_ms: int,\n        max_records: Optional[int],\n        **kwargs: Any,\n    ) -> None:\n        super().__init__(*topics, **kwargs)\n        self.batch_timeout_ms = batch_timeout_ms\n        self.max_records = max_records\n\n    async def get_msg(self) -> Tuple[ConsumerRecord, ...]:\n        assert self.consumer, \"Consumer not initialized\"\n        messages = await self.consumer.getmany(\n            timeout_ms=self.batch_timeout_ms,\n            max_records=self.max_records,\n        )\n        return tuple(chain(*messages.values())) if messages else ()",
    "Code_level": "Class-level",
    "FSMID_for_test": 80,
    "right_result": "import asyncio\nfrom abc import ABC, abstractmethod\nfrom typing import Sequence, Optional, Dict, Any, Iterable, AsyncCallable, Tuple, Awaitable, List, Union\nfrom aiokafka import AIOKafkaConsumer, TopicPartition\nfrom aiokafka.helpers import create_ssl_context\n\nclass LogicSubscriber(ABC):\n    def __init__(self, *topics: str, group_id: Optional[str], connection_args: Dict[str, Any], partitions: Iterable[TopicPartition], default_parser: AsyncCallable, default_decoder: AsyncCallable) -> None:\n        self.topics = topics\n        self.group_id = group_id\n        self.consumer: Optional[AIOKafkaConsumer] = None\n        self.partitions = partitions\n        self.__connection_args = connection_args\n        self.default_parser = default_parser\n        self.default_decoder = default_decoder\n\n    async def start(self) -> None:\n        if not self.consumer:\n            self.consumer = AIOKafkaConsumer(\n                *self.topics,\n                bootstrap_servers=self.__connection_args.get('bootstrap_servers'),\n                group_id=self.group_id,\n                enable_auto_commit=False,\n                **self.__connection_args\n            )\n            await self.consumer.start()\n            if self.partitions:\n                await self.consumer.assign(self.partitions)\n            else:\n                await self.consumer.subscribe(self.topics)\n\n    async def close(self) -> None:\n        if self.consumer:\n            await self.consumer.stop()\n\n    async def _consume(self) -> None:\n        try:\n            async for msg in self.consumer:\n                try:\n                    parsed_msg = await self.default_parser(msg)\n                    decoded_msg = await self.default_decoder(parsed_msg)\n                    await self.get_msg(decoded_msg)\n                except Exception as e:\n                    print(f\"Error processing message: {e}\")\n        except Exception as e:\n            print(f\"Consumer error: {e}\")\n\n    @abstractmethod\n    async def get_msg(self, msg: Any) -> Any:\n        pass\n\nclass DefaultSubscriber(LogicSubscriber):\n    async def get_msg(self, msg: Any) -> Any:\n        return msg\n\nclass BatchSubscriber(LogicSubscriber):\n    def __init__(self, *topics: str, batch_timeout_ms: int, max_records: Optional[int], **kwargs: Any) -> None:\n        super().__init__(*topics, **kwargs)\n        self.batch_timeout_ms = batch_timeout_ms\n        self.max_records = max_records\n\n    async def _consume(self) -> None:\n        try:\n            messages = []\n            while True:\n                try:\n                    async for msg in self.consumer:\n                        messages.append(msg)\n                        if self.max_records and len(messages) >= self.max_records:\n                            break\n                    if messages:\n                        parsed_messages = [await self.default_parser(msg) for msg in messages]\n                        decoded_messages = [await self.default_decoder(msg) for msg in parsed_messages]\n                        await self.get_msg(tuple(decoded_messages))\n                        messages.clear()\n                except asyncio.TimeoutError:\n                    if messages:\n                        parsed_messages = [await self.default_parser(msg) for msg in messages]\n                        decoded_messages = [await self.default_decoder(msg) for msg in parsed_messages]\n                        await self.get_msg(tuple(decoded_messages))\n                        messages.clear()\n                except Exception as e:\n                    print(f\"Batch consumer error: {e}\")\n                    if messages:\n                        parsed_messages = [await self.default_parser(msg) for msg in messages]\n                        decoded_messages = [await self.default_decoder(msg) for msg in parsed_messages]\n                        await self.get_msg(tuple(decoded_messages))\n                        messages.clear()"
  },
  {
    "Task_id": 300,
    "Instruction": "Task Description: Create a function that executes a shell command using Python's subprocess module and returns the output, error, and process object.\n\nFunction Description: The function SC (Shell Command) takes a shell command as input, executes it using subprocess.Popen, and captures both the standard output and standard error streams. It returns a tuple containing these outputs along with the process object for further interaction if needed.\n\nInput: \n- cmd: [str] - The shell command to be executed as a string.\n\nOutput: \n- Returns a tuple containing:\n  - out: [bytes] - The standard output of the executed command.\n  - err: [bytes] - The standard error of the executed command.\n  - proc: [subprocess.Popen] - The process object representing the executed command.",
    "Canonical_solution": "import os\nimport subprocess\n\ndef SC(cmd):\n    proc = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)\n    [out, err] = proc.communicate()\n    return (out, err, proc)",
    "Code_level": "Function-level",
    "FSMID_for_test": 76,
    "right_result": "import subprocess\n\ndef SC(cmd):\n    proc = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)\n    out, err = proc.communicate()\n    return out, err, proc"
  },
  {
    "Task_id": 303,
    "Instruction": "Task Description: Create a Python class that collects and parses statistics from the amavisd-agent program using subprocess communication.\n\nClass Description: The AmavisCollector class is designed to interface with the amavisd-agent program to collect mail processing statistics. It uses subprocess.PIPE to communicate with the agent process and regular expressions to parse the output. The class supports optional sudo execution for privilege escalation.\n\nAttributes:\n\nmatchers: [List[re.Pattern]] - A list of compiled regular expressions used to parse different formats of statistics from amavisd-agent output.\nconfig: [Dict[str, Any]] - Configuration dictionary containing paths to executables and sudo settings.\n\nMethods:\n\n__init__: [Name](amavisd_exe: str = '/usr/sbin/amavisd-agent', use_sudo: bool = False, sudo_exe: str = '/usr/bin/sudo', sudo_user: str = 'amavis') -> None - Initializes the collector with configuration parameters for the amavisd-agent executable and optional sudo settings.\ncollect: [Name]() -> Generator[Tuple[str, str, str], None, None] - Executes the amavisd-agent process, captures its output, and yields parsed statistics as tuples of (metric_name, metric_type, value). Raises an exception if the process cannot be executed.",
    "Canonical_solution": "import os\nimport subprocess\nimport re\n\nclass AmavisCollector:\n    matchers = [\n        re.compile(r'^\\s*(?P<name>[\\w]+)\\s+(?P<time>[\\d]+) s\\s+'\n                   r'(?P<frequency>[\\d.]+) s/msg\\s+\\([\\w]+\\)\\s*$'),\n        re.compile(r'^\\s*(?P<name>[\\w.-]+)\\s+(?P<count>[\\d]+)\\s+'\n                   r'(?P<frequency>[\\d.]+)/h\\s+(?P<percentage>[\\d.]+) %'\n                   r'\\s\\([\\w]+\\)\\s*$'),\n        re.compile(r'^\\s*(?P<name>[\\w.-]+)\\s+(?P<size>[\\d]+)MB\\s+'\n                   r'(?P<frequency>[\\d.]+)MB/h\\s+(?P<percentage>[\\d.]+) %'\n                   r'\\s\\([\\w]+\\)\\s*$'),\n    ]\n\n    def __init__(self, amavisd_exe='/usr/sbin/amavisd-agent', use_sudo=False, sudo_exe='/usr/bin/sudo', sudo_user='amavis'):\n        self.config = {\n            'amavisd_exe': amavisd_exe,\n            'use_sudo': use_sudo,\n            'sudo_exe': sudo_exe,\n            'sudo_user': sudo_user\n        }\n\n    def collect(self):\n        try:\n            if self.config['use_sudo']:\n                cmdline = [\n                    self.config['sudo_exe'], '-u', self.config['sudo_user'],\n                    '--', self.config['amavisd_exe'], '-c', '1'\n                ]\n            else:\n                cmdline = [self.config['amavisd_exe'], '-c', '1']\n                \n            agent = subprocess.Popen(cmdline, stdout=subprocess.PIPE)\n            agent_out = agent.communicate()[0]\n            lines = agent_out.strip().split(os.linesep)\n            \n            for line in lines:\n                for rex in self.matchers:\n                    res = rex.match(line)\n                    if res:\n                        groups = res.groupdict()\n                        name = groups['name']\n                        for metric, value in groups.items():\n                            if metric == 'name':\n                                continue\n                            yield (name, metric, value)\n\n        except OSError as err:\n            raise Exception(f\"Could not run {self.config['amavisd_exe']}: {err}\")",
    "Code_level": "Class-level",
    "FSMID_for_test": 76,
    "right_result": "import re\nimport subprocess\nfrom typing import Generator, Tuple, Any\n\nclass AmavisCollector:\n    def __init__(self, amavisd_exe: str = '/usr/sbin/amavisd-agent', use_sudo: bool = False, sudo_exe: str = '/usr/bin/sudo', sudo_user: str = 'amavis') -> None:\n        self.amavisd_exe = amavisd_exe\n        self.use_sudo = use_sudo\n        self.sudo_exe = sudo_exe\n        self.sudo_user = sudo_user\n        self.matchers = [\n            re.compile(r'^(\\w+)\\s+(\\w+)\\s+(\\d+)$'),\n            re.compile(r'^(\\w+)\\s+(\\w+)\\s+([0-9a-fA-F:.]+)$'),\n            re.compile(r'^(\\w+)\\s+(\\w+)\\s+(\\d+\\.\\d+)$')\n        ]\n    \n    def collect(self) -> Generator[Tuple[str, str, str], None, None]:\n        command = [self.amavisd_exe]\n        if self.use_sudo:\n            command = [self.sudo_exe, '-u', self.sudo_user] + command\n        \n        try:\n            process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)\n            stdout, stderr = process.communicate()\n            if process.returncode != 0:\n                raise RuntimeError(f\"Failed to execute amavisd-agent: {stderr}\")\n            \n            for line in stdout.splitlines():\n                for matcher in self.matchers:\n                    match = matcher.match(line)\n                    if match:\n                        metric_name, metric_type, value = match.groups()\n                        yield (metric_name, metric_type, value)\n                        break\n        except Exception as e:\n            raise RuntimeError(f\"Error collecting amavisd-agent statistics: {str(e)}\") from e"
  },
  {
    "Task_id": 305,
    "Instruction": "Task Description: The task involves creating Python functions for executing system commands and processing their output through inter-process communication (IPC) using pipes. The functions should handle command execution, output decoding, and temporary file management for command processing.\n\nFunction Description: The provided functions enable executing system commands through subprocesses, capturing and decoding their output, and processing text data through temporary files when needed. The functions handle Windows-specific configurations and character encoding.\n\nInput:\n- For run_and_read(view, cmd):\n  - view: [Any] - A placeholder parameter (unused in function)\n  - cmd: [str] - The command string to execute via cmd.exe\n\n- For filter_region(view, txt, command):\n  - view: [Any] - A placeholder parameter (unused in function)\n  - txt: [str] - The text content to process\n  - command: [str] - The command to process the text with\n\n- For get_startup_info() and get_oem_cp(): No input parameters\n\nOutput:\n- For run_and_read(): [str] - The decoded output from the command execution\n- For filter_region(): [str] - The processed text output from the command\n- For get_startup_info(): [subprocess.STARTUPINFO] - Windows process startup configuration\n- For get_oem_cp(): [str] - The OEM code page identifier as a string",
    "Canonical_solution": "import subprocess\nfrom subprocess import PIPE\nimport os\nimport tempfile\nimport ctypes\n\ndef get_startup_info():\n    startupinfo = subprocess.STARTUPINFO()\n    startupinfo.dwFlags |= subprocess.STARTF_USESHOWWINDOW\n    return startupinfo\n\ndef run_and_read(view, cmd):\n    out, err = subprocess.Popen(['cmd.exe', '/c', cmd],\n                                stdout=PIPE,\n                                stderr=PIPE,\n                                shell=True,\n                                startupinfo=get_startup_info()).communicate()\n    try:\n        return (out or err).decode(get_oem_cp()).replace('\\r\\n', '\\n')\n    except AttributeError:\n        return ''\n\ndef filter_region(view, txt, command):\n    try:\n        contents = tempfile.NamedTemporaryFile(suffix='.txt', delete=False)\n        contents.write(txt.encode('utf-8'))\n        contents.close()\n\n        script = tempfile.NamedTemporaryFile(suffix='.bat', delete=False)\n        script.write(('@echo off\\ntype %s | %s' % (contents.name, command)).encode('utf-8'))\n        script.close()\n\n        p = subprocess.Popen([script.name],\n                             stdout=PIPE,\n                             stderr=PIPE,\n                             startupinfo=get_startup_info())\n\n        out, err = p.communicate()\n        return (out or err).decode(get_oem_cp()).replace('\\r\\n', '\\n')[:-1].strip()\n    finally:\n        os.remove(script.name)\n        os.remove(contents.name)\n\ndef get_oem_cp():\n    codepage = ctypes.windll.kernel32.GetOEMCP()\n    return str(codepage)",
    "Code_level": "Function-level",
    "FSMID_for_test": 76,
    "right_result": "import subprocess\nimport os\nimport codecs\nimport tempfile\n\ndef run_and_read(view, cmd):\n    startup_info = get_startup_info()\n    process = subprocess.Popen(\n        cmd,\n        stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE,\n        stdin=subprocess.PIPE,\n        startupinfo=startup_info,\n        creationflags=subprocess.CREATE_NO_WINDOW\n    )\n    stdout, stderr = process.communicate()\n    if stdout:\n        decoded_stdout = stdout.decode(get_oem_cp(), errors='replace')\n    else:\n        decoded_stdout = ''\n    return decoded_stdout\n\ndef filter_region(view, txt, command):\n    with tempfile.NamedTemporaryFile(mode='w+', delete=False, encoding='utf-8') as tmp_file:\n        tmp_file.write(txt)\n        tmp_file_path = tmp_file.name\n    startup_info = get_startup_info()\n    process = subprocess.Popen(\n        [command, tmp_file_path],\n        stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE,\n        stdin=subprocess.PIPE,\n        startupinfo=startup_info,\n        creationflags=subprocess.CREATE_NO_WINDOW\n    )\n    stdout, stderr = process.communicate()\n    if stdout:\n        decoded_stdout = stdout.decode(get_oem_cp(), errors='replace')\n    else:\n        decoded_stdout = ''\n    os.remove(tmp_file_path)\n    return decoded_stdout\n\ndef get_startup_info():\n    si = subprocess.STARTUPINFO()\n    si.dwFlags |= subprocess.STARTF_USESHOWWINDOW\n    si.wShowWindow = 0\n    return si\n\ndef get_oem_cp():\n    return str(codecs.lookup('oem')[1].name)"
  },
  {
    "Task_id": 306,
    "Instruction": "Task Description: Implement a class that interacts with partclone utility to retrieve and parse partition information from disk image files, handling potential compression and chaining multiple subprocesses together.\n\nClass Description: The Partclone class provides static methods for working with partclone disk images, particularly focused on extracting partition information through a chain of subprocess operations.\n\nMethods:\n\nMethod1: get_partclone_info_dict(abs_partclone_image_list: list, image_key: str, compression: str) -> dict - Retrieves partition information from partclone image files by executing a chain of subprocess commands (cat, decompression, and partclone.info). Returns a dictionary containing parsed partition information.\n\nInput:\n- abs_partclone_image_list: List of absolute paths to partclone image files\n- image_key: String identifier for the image\n- compression: String specifying compression type (used for decompression)\n\nOutput:\n- Dictionary containing parsed partition information, with 'filesystem' as a minimum key (set to \"<unknown>\" if parsing fails)\n\nMethod2: parse_partclone_info_output(output: str) -> dict - [Implied but not shown in code] Parses the output string from partclone.info command into a structured dictionary. This would be a helper method called by get_partclone_info_dict.\n\nInput:\n- output: String containing the raw output from partclone.info command\n\nOutput:\n- Dictionary containing structured partition information extracted from the output",
    "Canonical_solution": "import collections\nimport subprocess\n\nclass Partclone:\n    @staticmethod\n    def get_partclone_info_dict(abs_partclone_image_list, image_key, compression):\n        env = utility.Utility.get_env_C_locale()\n        proc = collections.OrderedDict()\n        cat_cmd_list = [\"cat\"] + abs_partclone_image_list\n        decompression_cmd_list = utility.Utility.get_decompression_command_list(compression)\n        partclone_info_cmd_list = [\"partclone.info\", \"--source\", \"-\"]\n        utility.Utility.print_cli_friendly(\"partclone \", [cat_cmd_list, decompression_cmd_list, partclone_info_cmd_list])\n        proc['cat_partclone' + image_key] = subprocess.Popen(cat_cmd_list, stdout=subprocess.PIPE, env=env,\n                                                                          encoding='utf-8')\n        proc['decompression' + image_key] = subprocess.Popen(decompression_cmd_list,\n                                                                          stdin=proc[\n                                                                              'cat_partclone' + image_key].stdout,\n                                                                          stdout=subprocess.PIPE, env=env, encoding='utf-8')\n        proc['partclone_info' + image_key] = subprocess.Popen(partclone_info_cmd_list,\n                                                                           stdin=proc[\n                                                                               'decompression' + image_key].stdout,\n                                                                           stdout=subprocess.PIPE,\n                                                                           stderr=subprocess.PIPE, env=env,\n                                                                           encoding='utf-8')\n        proc['cat_partclone' + image_key].stdout.close()  # Allow p1 to receive a SIGPIPE if p2 exits.\n        proc['decompression' + image_key].stdout.close()  # Allow p1 to receive a SIGPIPE if p2 exits.\n        output, err = proc['partclone_info' + image_key].communicate()\n        print(\"partclone_info: Exit output \" + str(output) + \"stderr \" + str(err))\n        partclone_info_dict = Partclone.parse_partclone_info_output(err)\n        if len(partclone_info_dict) == 0:\n            print(abs_partclone_image_list[0] + \": Could not read partclone info dict for \" + image_key + \". Treating it as a dd image.\")\n            partclone_info_dict['filesystem'] = \"<unknown>\"\n        return partclone_info_dict",
    "Code_level": "Class-level",
    "FSMID_for_test": 76,
    "right_result": "import subprocess\nimport os\n\nclass Partclone:\n    @staticmethod\n    def get_partclone_info_dict(abs_partclone_image_list, image_key, compression):\n        result = {}\n        for image_path in abs_partclone_image_list:\n            if not os.path.exists(image_path):\n                continue\n            cmd = ['cat', image_path]\n            if compression:\n                decompress_cmd = {\n                    'gzip': ['zcat'],\n                    'bzip2': ['bzcat'],\n                    'xz': ['xzcat'],\n                    'lzma': ['lzcat'],\n                    '': []\n                }.get(compression, [])\n                cmd = decompress_cmd + cmd\n            try:\n                process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n                output, _ = process.communicate()\n                if process.returncode == 0:\n                    parsed_output = Partclone.parse_partclone_info_output(output.decode('utf-8'))\n                    if 'filesystem' in parsed_output:\n                        result[image_key] = parsed_output\n                    else:\n                        result[image_key] = {'filesystem': '<unknown>'}\n                else:\n                    result[image_key] = {'filesystem': '<unknown>'}\n            except Exception as e:\n                result[image_key] = {'filesystem': '<unknown>'}\n        return result\n\n    @staticmethod\n    def parse_partclone_info_output(output):\n        lines = output.strip().split('\\n')\n        result = {'filesystem': '<unknown>'}\n        for line in lines:\n            if '=' in line:\n                key, value = line.split('=', 1)\n                key = key.strip()\n                value = value.strip()\n                if key == 'fs_type':\n                    result['filesystem'] = value\n        return result"
  },
  {
    "Task_id": 307,
    "Instruction": "Task Description: The task involves creating a function that executes a command in a subprocess, captures its output, and extracts specific metrics from the output for analysis.\n\nFunction Description: The function `run_gpt` executes a given command as a subprocess, captures its standard output and error streams, and parses the output to extract metrics such as runtime, number of parameters, and success status. It then returns these metrics along with any error messages.\n\nInput: \n- `cmd` (str): A string representing the command to be executed in the subprocess.\n\nOutput: \n- A tuple containing:\n  - `runtime` (float): The average iteration time extracted from the output.\n  - `num_params` (float): The number of parameters in billions, rounded to 3 decimal places.\n  - `success` (bool): A boolean indicating whether the test was successful based on a predefined success message.\n  - `errs` (bytes): The error output from the subprocess.",
    "Canonical_solution": "import subprocess\nfrom apex.transformer.testing.commons import TEST_SUCCESS_MESSAGE\n\ndef run_gpt(cmd):\n    args = list(cmd.split(\" \"))\n    p = subprocess.Popen(args, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    outs, errs = p.communicate()\n    outs = list(str((outs).decode(\"utf-8\")).splitlines())\n    success = False\n    runtime = 0\n    num_params = 0\n    for out in outs:\n        out = str(out)\n        if \"Average Iteration Time:\" in str(out):\n            slicey = out[out.find(\":\") + 2 :]\n            try:\n                runtime = float(slicey)\n            except:\n                print(slicey)\n                quit()\n        if \"Number of Parameters:\" in str(out):\n            slicey = out[out.find(\":\") + 2 :]\n            try:\n                num_params = int(slicey)\n            except:\n                print(slicey)\n                quit()\n        if str(out) == str(TEST_SUCCESS_MESSAGE):\n            success = True\n    return runtime, round(float(int(num_params)) / 10.0 ** 9, 3), success, errs",
    "Code_level": "Function-level",
    "FSMID_for_test": 76,
    "right_result": "import subprocess\nimport re\n\ndef run_gpt(cmd):\n    process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)\n    stdout, stderr = process.communicate()\n    output_str = stdout.decode()\n    error_str = stderr.decode()\n    \n    runtime_match = re.search(r'Runtime: (\\d+\\.\\d+)', output_str)\n    num_params_match = re.search(r'Params: (\\d+\\.\\d+)', output_str)\n    success_match = re.search(r'Success: (True|False)', output_str)\n    \n    runtime = float(runtime_match.group(1)) if runtime_match else 0.0\n    num_params = float(num_params_match.group(1)) / 1e9 if num_params_match else 0.0\n    num_params = round(num_params, 3)\n    success = success_match.group(1) == 'True' if success_match else False\n    \n    return (runtime, num_params, success, error_str.encode())"
  },
  {
    "Task_id": 31,
    "Instruction": "Task Description: Create a Python class that implements an HTTP client for making JSON-RPC requests to a server, handling authentication, connection management, and response processing.\n\nClass Description: The BaseProxy class provides functionality to establish HTTP/HTTPS connections to a JSON-RPC server, send requests with proper authentication, and process responses. It handles connection lifecycle, request formatting, error handling, and response parsing.\n\nAttributes:\n\n__conn: [httplib.HTTPConnection or httplib.HTTPSConnection] - The underlying HTTP connection object\n__service_url: [str] - The complete service URL including protocol, host, port, and path\n__url: [urllib.parse.ParseResult] - Parsed URL components of the service URL\n__id_count: [int] - Counter for JSON-RPC request IDs\n__auth_header: [bytes or None] - Basic authentication header if credentials are provided\n\nMethods:\n\n__init__: [constructor](service_url=None, service_port=None, btc_conf_file=None, timeout=DEFAULT_HTTP_TIMEOUT, connection=None) -> [None] - Initializes the proxy with connection parameters, parses the URL, and sets up authentication\n_call: [_call](service_name, *args) -> [Any] - Makes a JSON-RPC call to the specified service method with given arguments\n_get_response: [_get_response]() -> [dict] - Retrieves and parses the HTTP response from the server\nclose: [close]() -> [None] - Closes the active connection\n__del__: [destructor]() -> [None] - Ensures connection is closed when the object is destroyed",
    "Canonical_solution": "import http.client as httplib\nimport base64\nimport json\nimport urllib.parse as urlparse\n\nDEFAULT_USER_AGENT = \"AuthServiceProxy/0.1\"\nDEFAULT_HTTP_TIMEOUT = 30\n\nclass BaseProxy:\n    def __init__(self, service_url=None, service_port=None, btc_conf_file=None, timeout=DEFAULT_HTTP_TIMEOUT, connection=None):\n        self.__conn = None\n        authpair = None\n\n        if service_url is None:\n            # Configuration and URL setup logic omitted for brevity\n            pass\n        else:\n            url = urlparse.urlparse(service_url)\n            authpair = \"%s:%s\" % (url.username, url.password)\n\n        self.__service_url = service_url\n        self.__url = urlparse.urlparse(service_url)\n\n        if self.__url.scheme not in ('http', 'https'):\n            raise ValueError('Unsupported URL scheme %r' % self.__url.scheme)\n\n        if self.__url.port is None:\n            port = httplib.HTTPS_PORT if self.__url.scheme == 'https' else httplib.HTTP_PORT\n        else:\n            port = self.__url.port\n        self.__id_count = 0\n\n        if authpair is None:\n            self.__auth_header = None\n        else:\n            authpair = authpair.encode('utf8')\n            self.__auth_header = b\"Basic \" + base64.b64encode(authpair)\n\n        if connection:\n            self.__conn = connection\n        else:\n            if self.__url.scheme == 'https':\n                self.__conn = httplib.HTTPSConnection(self.__url.hostname, port=port, timeout=timeout)\n            else:\n                self.__conn = httplib.HTTPConnection(self.__url.hostname, port=port, timeout=timeout)\n\n    def _call(self, service_name, *args):\n        self.__id_count += 1\n\n        postdata = json.dumps({\n            'version': '1.1',\n            'method': service_name,\n            'params': args,\n            'id': self.__id_count\n        })\n\n        headers = {\n            'Host': self.__url.hostname,\n            'User-Agent': DEFAULT_USER_AGENT,\n            'Content-type': 'application/json',\n        }\n\n        if self.__auth_header is not None:\n            headers['Authorization'] = self.__auth_header\n\n        self.__conn.request('POST', self.__url.path, postdata, headers)\n        response = self._get_response()\n        \n        err = response.get('error')\n        if err is not None:\n            if isinstance(err, dict):\n                raise JSONRPCError({\n                    'code': err.get('code', -345),\n                    'message': err.get('message', 'error message not specified')\n                })\n            raise JSONRPCError({'code': -344, 'message': str(err)})\n        elif 'result' not in response:\n            raise JSONRPCError({\n                'code': -343, 'message': 'missing JSON-RPC result'\n            })\n        else:\n            return response['result']\n\n    def _get_response(self):\n        http_response = self.__conn.getresponse()\n        if http_response is None:\n            raise JSONRPCError({\n                'code': -342, 'message': 'missing HTTP response from server'\n            })\n\n        rdata = http_response.read().decode('utf8')\n        try:\n            return json.loads(rdata)\n        except Exception:\n            raise JSONRPCError({\n                'code': -342,\n                'message': ('non-JSON HTTP response with \\'%i %s\\' from server: \\'%.20s%s\\''\n                            % (http_response.status, http_response.reason,\n                               rdata, '...' if len(rdata) > 20 else ''))\n            })\n\n    def close(self):\n        if self.__conn is not None:\n            self.__conn.close()\n\n    def __del__(self):\n        if self.__conn is not None:\n            self.__conn.close()",
    "Code_level": "Class-level",
    "FSMID_for_test": 56,
    "right_result": "import http.client\nimport urllib.parse\nimport json\nimport base64\nimport time\nimport socket\n\nclass BaseProxy:\n    DEFAULT_HTTP_TIMEOUT = 30\n\n    def __init__(self, service_url=None, service_port=None, btc_conf_file=None, timeout=DEFAULT_HTTP_TIMEOUT, connection=None):\n        self.__conn = connection\n        self.__service_url = service_url\n        self.__url = urllib.parse.urlparse(service_url or 'http://localhost:8332')\n        self.__id_count = 0\n        self.__auth_header = None\n        if self.__url.scheme == 'https':\n            self.__conn = http.client.HTTPSConnection(self.__url.hostname, self.__url.port or 443, timeout=timeout)\n        else:\n            self.__conn = http.client.HTTPConnection(self.__url.hostname, self.__url.port or 80, timeout=timeout)\n        if btc_conf_file:\n            with open(btc_conf_file, 'r') as f:\n                conf = json.load(f)\n            if 'rpcuser' in conf and 'rpcpassword' in conf:\n                self.__auth_header = b'Basic ' + base64.b64encode(f\"{conf['rpcuser']}:{conf['rpcpassword']}\".encode('utf-8'))\n\n    def __call__(self, service_name, *args):\n        return self._call(service_name, *args)\n\n    def _call(self, service_name, *args):\n        self.__id_count += 1\n        payload = json.dumps({\n            \"jsonrpc\": \"2.0\",\n            \"method\": service_name,\n            \"params\": args,\n            \"id\": self.__id_count\n        })\n        headers = {\n            'Content-Type': 'application/json',\n            'User-Agent': 'BitcoinRPCClient'\n        }\n        if self.__auth_header:\n            headers['Authorization'] = self.__auth_header.decode('utf-8')\n        try:\n            self.__conn.request('POST', self.__url.path, payload, headers)\n            response = self._get_response()\n            if 'error' in response:\n                raise Exception(response['error']['message'])\n            return response.get('result')\n        except socket.timeout:\n            raise Exception(\"Request timed out\")\n        except Exception as e:\n            raise Exception(f\"HTTP error: {str(e)}\")\n\n    def _get_response(self):\n        response = self.__conn.getresponse()\n        data = response.read()\n        if response.status >= 400:\n            raise Exception(f\"HTTP error {response.status}: {data.decode('utf-8')}\")\n        return json.loads(data.decode('utf-8'))\n\n    def close(self):\n        if self.__conn:\n            self.__conn.close()\n\n    def __del__(self):\n        self.close()"
  },
  {
    "Task_id": 310,
    "Instruction": "Task Description: Create a function that uses subprocess.Popen with pipes to execute ffprobe (a multimedia stream analyzer) on a specified file and return the output in JSON format.\n\nFunction Description: The function _probe executes ffprobe command-line tool to analyze a multimedia file, capturing its format and stream information. It uses subprocess.Popen with pipes to handle inter-process communication, converts the output to JSON, and handles errors if the process fails.\n\nInput:\n- filename: [str] - Path to the multimedia file to analyze\n- cmd: [str] (optional, default=\"ffprobe\") - Name/path of the ffprobe executable\n- timeout: [int/float] (optional) - Timeout in seconds for the subprocess\n- **kwargs: [dict] (optional) - Additional ffprobe command-line arguments\n\nOutput:\n- [dict] - Parsed JSON output containing multimedia file information\n- Raises ffmpeg.Error if the process returns a non-zero exit code (includes stderr in exception)",
    "Canonical_solution": "import json\nimport subprocess\nimport ffmpeg\n\ndef _probe(filename, cmd=\"ffprobe\", timeout=None, **kwargs):\n    \"\"\"Run ffprobe on the specified file and return a JSON representation of the output.\n\n    Raises:\n        :class:`ffmpeg.Error`: if ffprobe returns a non-zero exit code,\n            an :class:`Error` is returned with a generic error message.\n            The stderr output can be retrieved by accessing the\n            ``stderr`` property of the exception.\n    \"\"\"\n    args = [cmd, \"-show_format\", \"-show_streams\", \"-of\", \"json\"]\n    args += ffmpeg._utils.convert_kwargs_to_cmd_line_args(kwargs)\n    args += [filename]\n\n    p = subprocess.Popen(args, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    communicate_kwargs = {}\n    if timeout is not None:\n        communicate_kwargs[\"timeout\"] = timeout\n    out, err = p.communicate(**communicate_kwargs)\n    if p.returncode != 0:\n        raise ffmpeg.Error(\"ffprobe\", out, err)\n    return json.loads(out.decode(\"utf-8\"))",
    "Code_level": "Function-level",
    "FSMID_for_test": 76,
    "right_result": "import subprocess\nimport json\nfrom subprocess import CalledProcessError, TimeoutExpired\n\ndef _probe(filename, cmd=\"ffprobe\", timeout=None, **kwargs):\n    args = [cmd] + list(kwargs.items())\n    process = subprocess.Popen(args, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)\n    try:\n        stdout, stderr = process.communicate(input=filename, timeout=timeout)\n    except TimeoutExpired:\n        process.kill()\n        stdout, stderr = process.communicate()\n    if process.returncode != 0:\n        raise CalledProcessError(process.returncode, args, output=stdout, stderr=stderr)\n    try:\n        return json.loads(stdout)\n    except json.JSONDecodeError:\n        return {\"error\": \"Failed to parse ffprobe output as JSON\", \"stdout\": stdout, \"stderr\": stderr}"
  },
  {
    "Task_id": 311,
    "Instruction": "Task Description: Implement a set of utility functions for executing shell commands in Python using subprocess.PIPE for inter-process communication, with options for real-time output display and logging.\n\nFunction Description: The functions provide different ways to execute shell commands and handle their output:\n1. run_command - Executes a command and collects all output lines\n2. run_shell_display - Executes a command and displays output in real-time\n3. run_shell - Executes a command and logs output to a file\n\nInput:\n- For run_command: cmd [str] - The shell command to execute\n- For run_shell_display: cmd [str] - The shell command to execute\n- For run_shell: cmd [str] - The shell command to execute, log_file [str] - Path to log file\n\nOutput:\n- For run_command: [str] - Combined stdout/stderr output\n- For run_shell_display: None (output is displayed in real-time)\n- For run_shell: [bytes] - Raw command output (also written to log file)",
    "Canonical_solution": "import subprocess\n\ndef run_command(cmd):\n    p = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)\n    stdout = []\n    while True:\n        line = p.stdout.readline()\n        stdout.append(line)\n        print(line.decode(\"utf-8\"))\n        if line == \"\" and p.poll() != None:\n            break\n    return \"\".join(stdout)\n\ndef run_shell_display(cmd):\n    p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)\n    while True:\n        out = p.stdout.read(1).decode(\"utf-8\")\n        if out == \"\" and p.poll() != None:\n            break\n        if out != \"\":\n            sys.stdout.write(out)\n            sys.stdout.flush()\n    return\n\ndef run_shell(cmd, log_file):\n    p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)\n    (output, err) = p.communicate()\n    p.wait()\n    with open(log_file, \"a+\") as logfile:\n        logfile.write(output.decode(\"utf-8\") + \"\\n\")\n        logfile.write(err.decode(\"utf-8\") + \"\\n\")\n    return output",
    "Code_level": "Function-level",
    "FSMID_for_test": 76,
    "right_result": "import subprocess\nimport sys\nimport os\n\ndef run_command(cmd):\n    process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)\n    stdout, stderr = process.communicate()\n    return stdout.decode() + stderr.decode()\n\ndef run_shell_display(cmd):\n    process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)\n    while True:\n        output = process.stdout.readline()\n        if output == b'' and process.poll() is not None:\n            break\n        if output:\n            sys.stdout.write(output.decode())\n            sys.stdout.flush()\n    rc = process.poll()\n    return None\n\ndef run_shell(cmd, log_file):\n    with open(log_file, 'ab') as f:\n        process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)\n        while True:\n            output = process.stdout.readline()\n            if output == b'' and process.poll() is not None:\n                break\n            if output:\n                f.write(output)\n                sys.stdout.write(output.decode())\n                sys.stdout.flush()\n        rc = process.poll()\n    return process.stdout.read() + process.stderr.read()"
  },
  {
    "Task_id": 312,
    "Instruction": "Task Description: Implement functions to execute system commands asynchronously and synchronously using subprocess.PIPE for inter-process communication.\n\nFunction Description: \n- run_command_async: Executes a system command asynchronously with configurable pipe settings for stdin, stdout, and stderr.\n- run_command: Executes a system command synchronously, handles input/output through pipes, and manages process lifecycle.\n\nInput:\n- run_command_async:\n  - cmd_args: [List[str]] - Command and arguments to execute\n  - pipe_stdin: [bool] - Whether to pipe stdin (default: True)\n  - pipe_stdout: [bool] - Whether to pipe stdout (default: False)\n  - pipe_stderr: [bool] - Whether to pipe stderr (default: False)\n  - quiet: [bool] - If True, pipes both stdout and stderr (default: False)\n\n- run_command:\n  - cmd_args: [List[str]] - Command and arguments to execute\n  - input: [Optional[bytes]] - Input data to send to process (default: None)\n  - pipe_stdin: [bool] - Whether to pipe stdin (default: True)\n  - pipe_stdout: [bool] - Whether to pipe stdout (default: False)\n  - pipe_stderr: [bool] - Whether to pipe stderr (default: False)\n  - quiet: [bool] - If True, pipes both stdout and stderr (default: False)\n\nOutput:\n- run_command_async: Returns a subprocess.Popen object representing the running process\n- run_command: Returns a tuple (stdout_data, stderr_data) containing the process output",
    "Canonical_solution": "import subprocess as sp\n\ndef run_command_async(cmd_args,\n                      pipe_stdin=True,\n                      pipe_stdout=False,\n                      pipe_stderr=False,\n                      quiet=False):\n    stdin_stream = sp.PIPE if pipe_stdin else None\n    stdout_stream = sp.PIPE if pipe_stdout or quiet else None\n    stderr_stream = sp.PIPE if pipe_stderr or quiet else None\n\n    return sp.Popen(\n        cmd_args,\n        stdin=stdin_stream,\n        stdout=stdout_stream,\n        stderr=stderr_stream,\n        close_fds=True)\n\ndef run_command(cmd_args,\n                input=None,\n                pipe_stdin=True,\n                pipe_stdout=False,\n                pipe_stderr=False,\n                quiet=False):\n    with run_command_async(\n            cmd_args,\n            pipe_stdin=pipe_stdin,\n            pipe_stdout=pipe_stdout,\n            pipe_stderr=pipe_stderr,\n            quiet=quiet) as proc:\n        stdout, stderr = proc.communicate(input)\n        retcode = proc.poll()\n\n        if retcode:\n            raise Exception('ffmpeg error: %s' % stderr)\n\n        if proc.stdout is not None:\n            proc.stdout.close()\n        if proc.stderr is not None:\n            proc.stderr.close()\n\n        return stdout, stderr",
    "Code_level": "Function-level",
    "FSMID_for_test": 76,
    "right_result": "import subprocess\nimport sys\n\ndef run_command_async(cmd_args, pipe_stdin=True, pipe_stdout=False, pipe_stderr=False, quiet=False):\n    stdin = subprocess.PIPE if pipe_stdin else None\n    stdout = subprocess.PIPE if pipe_stdout else None\n    stderr = subprocess.PIPE if pipe_stderr else None\n    if quiet:\n        stdout = subprocess.PIPE\n        stderr = subprocess.PIPE\n    process = subprocess.Popen(cmd_args, stdin=stdin, stdout=stdout, stderr=stderr)\n    return process\n\ndef run_command(cmd_args, input=None, pipe_stdin=True, pipe_stdout=False, pipe_stderr=False, quiet=False):\n    stdin = subprocess.PIPE if pipe_stdin else None\n    stdout = subprocess.PIPE if pipe_stdout else None\n    stderr = subprocess.PIPE if pipe_stderr else None\n    if quiet:\n        stdout = subprocess.PIPE\n        stderr = subprocess.PIPE\n    process = subprocess.Popen(cmd_args, stdin=stdin, stdout=stdout, stderr=stderr)\n    stdout_data, stderr_data = process.communicate(input=input)\n    return stdout_data, stderr_data"
  },
  {
    "Task_id": 314,
    "Instruction": "Task Description: Create a Python function that consumes messages from a RabbitMQ queue using the pika library, processing each message with a callback function.\n\nFunction Description: The function establishes a connection to a RabbitMQ server, declares a durable queue, and starts consuming messages from the specified queue. Each received message is processed by a callback function that prints the message body. The function runs in a blocking mode, continuously waiting for messages until interrupted.\n\nInput:\n- port: [int] - The port number of the RabbitMQ server to connect to (default is typically 5672)\n\nOutput: None (The function runs indefinitely until interrupted, printing received messages to the console)",
    "Canonical_solution": "from multiprocessing import Process\nimport pika\n\ndef callback(ch, method, properties, body):\n    print(\" [x] Received %r\" % body.decode())\n\ndef receiver(port):\n    connection = pika.BlockingConnection(\n        pika.ConnectionParameters(host='localhost', port=port))\n    channel = connection.channel()\n    channel.queue_declare(queue='cryptofeed', durable=True)\n    channel.basic_consume(queue='cryptofeed',\n                          on_message_callback=callback, auto_ack=True)\n    print(' [*] Waiting for messages. To exit press CTRL+C')\n    channel.start_consuming()\n\nif __name__ == '__main__':\n    p = Process(target=receiver, args=(5672,))\n    p.start()",
    "Code_level": "Function-level",
    "FSMID_for_test": 77,
    "right_result": "import pika\n\ndef consume_messages(port=5672):\n    connection = pika.BlockingConnection(pika.ConnectionParameters(host='localhost', port=port))\n    channel = connection.channel()\n    channel.queue_declare(queue='task_queue', durable=True)\n    \n    def callback(ch, method, properties, body):\n        print(f\" [x] Received {body}\")\n    \n    channel.basic_consume(queue='task_queue', on_message_callback=callback, auto_ack=True)\n    print(' [*] Waiting for messages. To exit press CTRL+C')\n    channel.start_consuming()"
  },
  {
    "Task_id": 315,
    "Instruction": "Task Description: Implement a RabbitMQ consumer function in Python that connects to a RabbitMQ server, declares a queue, and processes incoming messages using a callback function. The function should handle message acknowledgment and print the received messages.\n\nFunction Description: The function establishes a connection to a RabbitMQ server using blocking connection, declares a specified queue, and sets up a callback function to process incoming messages. The callback function parses the message body using Pydantic's BaseModel and acknowledges the message upon successful processing.\n\nInput: \n- None (The function uses hardcoded connection parameters and queue name)\n\nOutput: \n- None (The function prints received messages to the console and runs indefinitely in a blocking consumption loop)\n\nNote: The function does not explicitly return any value but continuously processes messages from the specified RabbitMQ queue until interrupted. The callback function prints both the parsed message (as a Pydantic model) and the raw message body.",
    "Canonical_solution": "import pika\nfrom pydantic import BaseModel\n\ndef rabbitmq_consumer():\n    credentials = pika.PlainCredentials(\"admin\", \"admin\")\n    connection = pika.BlockingConnection(pika.ConnectionParameters('127.0.0.1', credentials=credentials))\n    channel = connection.channel()\n    channel.queue_declare(queue=\"\u6c34\u8bb8\u4f20\")\n\n    def callbak(ch, method, properties, body):\n        class Test(BaseModel):\n            name: str\n            age: int\n        print(Test.parse_raw(body))\n        print(\"\u6d88\u8d39\u8005\u63a5\u6536\u5230\u4e86\u4efb\u52a1\uff1a%r\" % body.decode(\"utf8\"))\n        ch.basic_ack(delivery_tag=method.delivery_tag)\n\n    channel.basic_consume(on_message_callback=callbak, queue=\"\u6c34\u8bb8\u4f20\", auto_ack=False)\n    channel.start_consuming()",
    "Code_level": "Function-level",
    "FSMID_for_test": 77,
    "right_result": "import pika\nfrom pydantic import BaseModel\n\nclass MessageModel(BaseModel):\n    content: str\n\ndef callback(ch, method, properties, body):\n    try:\n        message = MessageModel.parse_raw(body)\n        print(f\"Parsed message: {message}\")\n        print(f\"Raw message body: {body}\")\n        ch.basic_ack(delivery_tag=method.delivery_tag)\n    except Exception as e:\n        print(f\"Error processing message: {e}\")\n\ndef rabbitmq_consumer():\n    connection = pika.BlockingConnection(pika.ConnectionParameters('localhost'))\n    channel = connection.channel()\n    channel.queue_declare(queue='task_queue', durable=True)\n    channel.basic_consume(queue='task_queue', on_message_callback=callback)\n    print(\"Waiting for messages. To exit press CTRL+C\")\n    channel.start_consuming()"
  },
  {
    "Task_id": 316,
    "Instruction": "Task Description: Implement a RabbitMQ message consumer function in Python using the pika library to receive and process messages from a specified queue.\n\nFunction Description: The function establishes a connection to a RabbitMQ server, declares a topic exchange and a queue, binds them together, and starts consuming messages. Each received message is processed by a callback function that prints the message body.\n\nInput:\n- port: [int] - The port number of the RabbitMQ server to connect to (default is typically 5672)\n\nOutput: None (The function runs indefinitely, consuming messages until interrupted)",
    "Canonical_solution": "import pika\nfrom multiprocessing import Process\n\ndef callback(ch, method, properties, body):\n    print(\" [x] Received %r\" % body.decode())\n\ndef receiver(port):\n    connection = pika.BlockingConnection(\n        pika.ConnectionParameters(host='localhost', port=port))\n    channel = connection.channel()\n    exchange_name = 'amq.topic'\n    exchange_type = 'topic'\n    channel.exchange_declare(exchange=exchange_name, exchange_type=exchange_type, durable=True)\n    queue_name = 'cryptofeed'\n    channel.queue_declare(queue=queue_name)\n    channel.queue_bind(exchange=exchange_name, queue=queue_name)\n    channel.basic_consume(queue=queue_name, on_message_callback=callback, auto_ack=True)\n    print(' [*] Waiting for messages. To exit press CTRL+C')\n    channel.start_consuming()",
    "Code_level": "Function-level",
    "FSMID_for_test": 77,
    "right_result": "import pika\n\ndef consume_messages(port=5672):\n    connection = pika.BlockingConnection(pika.ConnectionParameters(host='localhost', port=port))\n    channel = connection.channel()\n    channel.exchange_declare(exchange='topic_logs', exchange_type='topic')\n    result = channel.queue_declare(queue='', exclusive=True)\n    queue_name = result.method.queue\n    channel.queue_bind(exchange='topic_logs', queue=queue_name, routing_key='*')\n    def callback(ch, method, properties, body):\n        print(f'Received {body.decode()}')\n    channel.basic_consume(queue=queue_name, on_message_callback=callback, auto_ack=True)\n    print('Waiting for messages. To exit press CTRL+C')\n    channel.start_consuming()"
  },
  {
    "Task_id": 317,
    "Instruction": "Task Description: Implement a RabbitMQ consumer function in Python that listens to a specified queue, processes incoming messages by syncing them to either a MongoDB or Redis database based on configuration, and acknowledges successful processing.\n\nFunction Description: The function establishes a connection to a RabbitMQ server, declares a durable queue, sets up a callback function to handle incoming messages, and starts consuming messages in a blocking loop. The callback function processes each message by syncing it to the configured database (MongoDB or Redis) and sends an acknowledgment back to RabbitMQ upon successful processing.\n\nInput: None (All configuration parameters are expected to be available in a config module:\n- config.rabbitmq_user: RabbitMQ username\n- config.rabbitmq_pass: RabbitMQ password\n- config.rabbitmq_host: RabbitMQ host address\n- config.rabbitmq_port: RabbitMQ port\n- config.rabbitmq_queue_name: Name of the queue to consume from\n- config.sync_db: Database type ('mongo' or 'redis') to sync data to)\n\nOutput: None (The function runs indefinitely, consuming messages from RabbitMQ and syncing them to the configured database)",
    "Canonical_solution": "import os\nimport pika\nimport config\nif config.sync_db=='mongo':\n    import sync_mongo as sync_data\nelse:\n    import sync_redis as sync_data\n\ndef consumer_data():\n    credentials = pika.PlainCredentials(config.rabbitmq_user, config.rabbitmq_pass)\n    parameters = pika.ConnectionParameters(config.rabbitmq_host, config.rabbitmq_port,'/',credentials)\n    connection = pika.BlockingConnection(parameters)\n    channel = connection.channel()\n    channel.queue_declare(queue=config.rabbitmq_queue_name, durable=True)\n\n    def callback(ch, method, properties, body):\n        ack = sync_data.set_data(body)\n        ch.basic_ack(delivery_tag = method.delivery_tag)\n\n    channel.basic_qos(prefetch_count=1)\n    channel.basic_consume(callback, \n                        queue=config.rabbitmq_queue_name,\n                        )\n    channel.start_consuming()",
    "Code_level": "Function-level",
    "FSMID_for_test": 77,
    "right_result": "import pika\nfrom pymongo import MongoClient\nimport redis\n\ndef consume_messages():\n    credentials = pika.PlainCredentials(config.rabbitmq_user, config.rabbitmq_pass)\n    connection = pika.BlockingConnection(pika.ConnectionParameters(\n        host=config.rabbitmq_host,\n        port=config.rabbitmq_port,\n        credentials=credentials\n    ))\n    channel = connection.channel()\n    channel.queue_declare(queue=config.rabbitmq_queue_name, durable=True)\n\n    def callback(ch, method, properties, body):\n        try:\n            if config.sync_db == 'mongo':\n                client = MongoClient()\n                db = client['sync_db']\n                collection = db['messages']\n                collection.insert_one({\"message\": body.decode()})\n            elif config.sync_db == 'redis':\n                r = redis.Redis(host='localhost', port=6379, db=0)\n                r.set('message', body.decode())\n            ch.basic_ack(delivery_tag=method.delivery_tag)\n        except Exception as e:\n            print(f\"Error processing message: {e}\")\n\n    channel.basic_consume(queue=config.rabbitmq_queue_name, on_message_callback=callback)\n    print(\" [*] Waiting for messages. To exit press CTRL+C\")\n    channel.start_consuming()"
  },
  {
    "Task_id": 318,
    "Instruction": "Task Description: Implement a TCP relay handler class that manages communication between a local client and a remote server, handling socket connections, data encryption, and protocol obfuscation.\n\nClass Description: The TCPRelayHandler class is responsible for managing the relay of TCP traffic between a local client and a remote server. It handles socket creation, connection management, data encryption/decryption, and protocol obfuscation. The class integrates with an event loop for asynchronous I/O operations.\n\nAttributes:\n- _server: [object] - Reference to the parent server instance\n- _fd_to_handlers: [dict] - Mapping of file descriptors to handler instances\n- _loop: [object] - Event loop instance for I/O multiplexing\n- _local_sock: [socket.socket] - Local client socket\n- _remote_sock: [socket.socket] - Remote server socket (IPv4)\n- _remote_sock_v6: [socket.socket] - Remote server socket (IPv6)\n- _remote_udp: [bool] - Flag indicating UDP mode\n- _config: [dict] - Configuration parameters\n- _dns_resolver: [object] - DNS resolver instance\n- _is_local: [bool] - Flag indicating local mode\n- _stage: [int] - Current connection stage\n- _encryptor: [object] - Encryption handler\n- _encrypt_correct: [bool] - Encryption status flag\n- _obfs: [object] - Obfuscation handler\n- _protocol: [object] - Protocol handler\n- _fastopen_connected: [bool] - TCP Fast Open status\n- _data_to_write_to_local: [list] - Buffer for data to local client\n- _data_to_write_to_remote: [list] - Buffer for data to remote server\n- _udp_data_send_buffer: [bytes] - UDP data buffer\n- _upstream_status: [int] - Upstream connection status\n- _downstream_status: [int] - Downstream connection status\n- _client_address: [tuple] - Local client address\n- _remote_address: [tuple] - Remote server address\n- _forbidden_iplist: [list] - List of blocked IP addresses\n- _chosen_server: [object] - Selected server instance\n- last_activity: [int] - Timestamp of last activity\n\nMethods:\n- __init__(server, fd_to_handlers, loop, local_sock, config, dns_resolver, is_local) -> None - Initializes the handler with server configuration and sockets\n- _create_remote_socket(ip, port) -> socket.socket - Creates and configures a remote socket connection\n- _write_to_sock(data, sock) -> bool - Writes data to a socket with encryption/obfuscation\n- destroy() -> None - Cleans up resources and closes all connections\n- _update_activity() -> None - Updates the last activity timestamp\n- _get_a_server() -> object - Selects an appropriate server from configuration\n- _handle_dns_resolved(result, error) -> None - Callback for DNS resolution\n- _update_stream(stream, status) -> None - Updates stream status in event loop\n- _on_local_read() -> None - Handles local socket read events\n- _on_remote_read() -> None - Handles remote socket read events\n- _on_local_write() -> None - Handles local socket write events\n- _on_remote_write() -> None - Handles remote socket write events",
    "Canonical_solution": "import socket\nimport errno\nimport struct\nimport logging\nimport binascii\nimport traceback\nimport random\nfrom shadowsocks import encrypt, obfs, eventloop, shell, common\nfrom shadowsocks.common import pre_parse_header, parse_header\n\nclass TCPRelayHandler:\n    def __init__(self, server, fd_to_handlers, loop, local_sock, config, dns_resolver, is_local):\n        self._server = server\n        self._fd_to_handlers = fd_to_handlers\n        self._loop = loop\n        self._local_sock = local_sock\n        self._remote_sock = None\n        self._remote_sock_v6 = None\n        self._remote_udp = False\n        self._config = config\n        self._dns_resolver = dns_resolver\n        self._is_local = is_local\n        self._stage = STAGE_INIT\n        self._encryptor = encrypt.Encryptor(config['password'], config['method'])\n        self._encrypt_correct = True\n        self._obfs = obfs.obfs(config['obfs'])\n        server_info = obfs.server_info(server.obfs_data)\n        server_info.host = config['server']\n        server_info.port = server._listen_port\n        server_info.tcp_mss = 1440\n        server_info.param = config['obfs_param']\n        self._obfs.set_server_info(server_info)\n        self._protocol = obfs.obfs(config['protocol'])\n        server_info = obfs.server_info(server.protocol_data)\n        server_info.host = config['server']\n        server_info.port = server._listen_port\n        server_info.tcp_mss = 1440\n        server_info.param = ''\n        self._protocol.set_server_info(server_info)\n        self._fastopen_connected = False\n        self._data_to_write_to_local = []\n        self._data_to_write_to_remote = []\n        self._udp_data_send_buffer = b''\n        self._upstream_status = WAIT_STATUS_READING\n        self._downstream_status = WAIT_STATUS_INIT\n        self._client_address = local_sock.getpeername()[:2]\n        self._remote_address = None\n        if 'forbidden_ip' in config:\n            self._forbidden_iplist = config['forbidden_ip']\n        else:\n            self._forbidden_iplist = None\n        if is_local:\n            self._chosen_server = self._get_a_server()\n        fd_to_handlers[local_sock.fileno()] = self\n        local_sock.setblocking(False)\n        local_sock.setsockopt(socket.SOL_TCP, socket.TCP_NODELAY, 1)\n        loop.add(local_sock, eventloop.POLL_IN | eventloop.POLL_ERR, self._server)\n        self.last_activity = 0\n        self._update_activity()\n        self._server.add_connection(1)\n\n    def _create_remote_socket(self, ip, port):\n        if self._remote_udp:\n            addrs_v6 = socket.getaddrinfo(\"::\", 0, 0, socket.SOCK_DGRAM, socket.SOL_UDP)\n            addrs = socket.getaddrinfo(\"0.0.0.0\", 0, 0, socket.SOCK_DGRAM, socket.SOL_UDP)\n        else:\n            addrs = socket.getaddrinfo(ip, port, 0, socket.SOCK_STREAM, socket.SOL_TCP)\n        if len(addrs) == 0:\n            raise Exception(\"getaddrinfo failed for %s:%d\" % (ip, port))\n        af, socktype, proto, canonname, sa = addrs[0]\n        if self._forbidden_iplist:\n            if common.to_str(sa[0]) in self._forbidden_iplist:\n                raise Exception('IP %s is in forbidden list, reject' % common.to_str(sa[0]))\n        remote_sock = socket.socket(af, socktype, proto)\n        self._remote_sock = remote_sock\n        self._fd_to_handlers[remote_sock.fileno()] = self\n\n        if self._remote_udp:\n            af, socktype, proto, canonname, sa = addrs_v6[0]\n            remote_sock_v6 = socket.socket(af, socktype, proto)\n            self._remote_sock_v6 = remote_sock_v6\n            self._fd_to_handlers[remote_sock_v6.fileno()] = self\n            remote_sock.setsockopt(socket.SOL_SOCKET, socket.SO_RCVBUF, 1024 * 32)\n            remote_sock.setsockopt(socket.SOL_SOCKET, socket.SO_SNDBUF, 1024 * 32)\n            remote_sock_v6.setsockopt(socket.SOL_SOCKET, socket.SO_RCVBUF, 1024 * 32)\n            remote_sock_v6.setsockopt(socket.SOL_SOCKET, socket.SO_SNDBUF, 1024 * 32)\n\n        remote_sock.setblocking(False)\n        if self._remote_udp:\n            remote_sock_v6.setblocking(False)\n        else:\n            remote_sock.setsockopt(socket.SOL_TCP, socket.TCP_NODELAY, 1)\n        return remote_sock\n\n    def _write_to_sock(self, data, sock):\n        if not sock:\n            return False\n        uncomplete = False\n        if self._remote_udp and sock == self._remote_sock:\n            try:\n                self._udp_data_send_buffer += data\n                while len(self._udp_data_send_buffer) > 6:\n                    length = struct.unpack('>H', self._udp_data_send_buffer[:2])[0]\n                    if length > len(self._udp_data_send_buffer):\n                        break\n                    data = self._udp_data_send_buffer[:length]\n                    self._udp_data_send_buffer = self._udp_data_send_buffer[length:]\n                    frag = common.ord(data[2])\n                    if frag != 0:\n                        logging.warn('drop a message since frag is %d' % (frag,))\n                        continue\n                    else:\n                        data = data[3:]\n                    header_result = parse_header(data)\n                    if header_result is None:\n                        continue\n                    connecttype, dest_addr, dest_port, header_length = header_result\n                    addrs = socket.getaddrinfo(dest_addr, dest_port, 0, socket.SOCK_DGRAM, socket.SOL_UDP)\n                    if addrs:\n                        af, socktype, proto, canonname, server_addr = addrs[0]\n                        data = data[header_length:]\n                        if af == socket.AF_INET6:\n                            self._remote_sock_v6.sendto(data, (server_addr[0], dest_port))\n                        else:\n                            sock.sendto(data, (server_addr[0], dest_port))\n            except Exception as e:\n                error_no = eventloop.errno_from_exception(e)\n                if error_no in (errno.EAGAIN, errno.EINPROGRESS, errno.EWOULDBLOCK):\n                    uncomplete = True\n                else:\n                    shell.print_exception(e)\n                    self.destroy()\n                    return False\n            return True\n        else:\n            try:\n                if self._is_local:\n                    pass\n                else:\n                    if sock == self._local_sock and self._encrypt_correct:\n                        obfs_encode = self._obfs.server_encode(data)\n                        data = obfs_encode\n                if data:\n                    l = len(data)\n                    s = sock.send(data)\n                    if s < l:\n                        data = data[s:]\n                        uncomplete = True\n                else:\n                    return\n            except (OSError, IOError) as e:\n                error_no = eventloop.errno_from_exception(e)\n                if error_no in (errno.EAGAIN, errno.EINPROGRESS, errno.EWOULDBLOCK):\n                    uncomplete = True\n                else:\n                    shell.print_exception(e)\n                    self.destroy()\n                    return False\n            except Exception as e:\n                shell.print_exception(e)\n                self.destroy()\n                return False\n        if uncomplete:\n            if sock == self._local_sock:\n                self._data_to_write_to_local.append(data)\n                self._update_stream(STREAM_DOWN, WAIT_STATUS_WRITING)\n            elif sock == self._remote_sock:\n                self._data_to_write_to_remote.append(data)\n                self._update_stream(STREAM_UP, WAIT_STATUS_WRITING)\n            else:\n                logging.error('write_all_to_sock:unknown socket')\n        else:\n            if sock == self._local_sock:\n                self._update_stream(STREAM_DOWN, WAIT_STATUS_READING)\n            elif sock == self._remote_sock:\n                self._update_stream(STREAM_UP, WAIT_STATUS_READING)\n            else:\n                logging.error('write_all_to_sock:unknown socket')\n        return True\n\n    def destroy(self):\n        if self._stage == STAGE_DESTROYED:\n            return\n        self._stage = STAGE_DESTROYED\n        if self._remote_sock:\n            try:\n                self._loop.remove(self._remote_sock)\n            except Exception as e:\n                pass\n            del self._fd_to_handlers[self._remote_sock.fileno()]\n            self._remote_sock.close()\n            self._remote_sock = None\n        if self._remote_sock_v6:\n            try:\n                self._loop.remove(self._remote_sock_v6)\n            except Exception as e:\n                pass\n            del self._fd_to_handlers[self._remote_sock_v6.fileno()]\n            self._remote_sock_v6.close()\n            self._remote_sock_v6 = None\n        if self._local_sock:\n            self._loop.remove(self._local_sock)\n            del self._fd_to_handlers[self._local_sock.fileno()]\n            self._local_sock.close()\n            self._local_sock = None\n        if self._obfs:\n            self._obfs.dispose()\n            self._obfs = None\n        if self._protocol:\n            self._protocol.dispose()\n            self._protocol = None\n        self._dns_resolver.remove_callback(self._handle_dns_resolved)\n        self._server.remove_handler(self)\n        self._server.add_connection(-1)",
    "Code_level": "Class-level",
    "FSMID_for_test": 67,
    "right_result": "class TCPRelayHandler:\n    def __init__(self, server, fd_to_handlers, loop, local_sock, config, dns_resolver, is_local):\n        self._server = server\n        self._fd_to_handlers = fd_to_handlers\n        self._loop = loop\n        self._local_sock = local_sock\n        self._remote_sock = None\n        self._remote_sock_v6 = None\n        self._remote_udp = False\n        self._config = config\n        self._dns_resolver = dns_resolver\n        self._is_local = is_local\n        self._stage = 0\n        self._encryptor = None\n        self._encrypt_correct = False\n        self._obfs = None\n        self._protocol = None\n        self._fastopen_connected = False\n        self._data_to_write_to_local = []\n        self._data_to_write_to_remote = []\n        self._udp_data_send_buffer = b''\n        self._upstream_status = 0\n        self._downstream_status = 0\n        self._client_address = None\n        self._remote_address = None\n        self._forbidden_iplist = []\n        self._chosen_server = None\n        self.last_activity = 0\n\n    def _create_remote_socket(self, ip, port):\n        import socket\n        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        sock.setblocking(False)\n        sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        sock.connect_ex((ip, port))\n        return sock\n\n    def _write_to_sock(self, data, sock):\n        try:\n            if sock.send(data) == len(data):\n                return True\n            else:\n                return False\n        except Exception as e:\n            print(f\"Write error: {e}\")\n            return False\n\n    def destroy(self):\n        if self._local_sock:\n            self._local_sock.close()\n        if self._remote_sock:\n            self._remote_sock.close()\n        if self._remote_sock_v6:\n            self._remote_sock_v6.close()\n\n    def _update_activity(self):\n        self.last_activity = int(time.time())\n\n    def _get_a_server(self):\n        return self._server.get_server()\n\n    def _handle_dns_resolved(self, result, error):\n        if error:\n            print(f\"DNS resolution error: {error}\")\n            return\n        self._remote_address = result\n        self._remote_sock = self._create_remote_socket(*self._remote_address)\n        self._loop.add_reader(self._remote_sock.fileno(), self._on_remote_read)\n\n    def _update_stream(self, stream, status):\n        pass\n\n    def _on_local_read(self):\n        data = self._local_sock.recv(4096)\n        if not data:\n            self.destroy()\n            return\n        self._data_to_write_to_remote.append(data)\n        self._update_activity()\n\n    def _on_remote_read(self):\n        data = self._remote_sock.recv(4096)\n        if not data:\n            self.destroy()\n            return\n        self._data_to_write_to_local.append(data)\n        self._update_activity()\n\n    def _on_local_write(self):\n        while self._data_to_write_to_local:\n            data = self._data_to_write_to_local.pop(0)\n            if not self._write_to_sock(data, self._remote_sock):\n                break\n        self._loop.remove_writer(self._local_sock.fileno())\n        self._loop.add_reader(self._local_sock.fileno(), self._on_local_read)\n\n    def _on_remote_write(self):\n        while self._data_to_write_to_remote:\n            data = self._data_to_write_to_remote.pop(0)\n            if not self._write_to_sock(data, self._local_sock):\n                break\n        self._loop.remove_writer(self._remote_sock.fileno())\n        self._loop.add_reader(self._remote_sock.fileno(), self._on_remote_read)"
  },
  {
    "Task_id": 32,
    "Instruction": "Task Description: Implement a function to translate text using the DeepL API with HTTP client functionality, supporting multiple language translations and alternative translations.\n\nFunction Description: The function uses the httpx library to send HTTP POST requests to the DeepL API endpoint. It handles text translation between specified source and target languages, with options for requesting alternative translations and proxy support. The function includes error handling for HTTP status codes and processes the JSON response to extract translated text.\n\nInput:\n- text: (str) - The text to be translated\n- sourceLang: (str, optional) - Source language code (auto-detected if None)\n- targetLang: (str, optional) - Target language code (defaults to \"EN\")\n- numberAlternative: (int, optional) - Number of alternative translations to request (0-3)\n- printResult: (bool, optional) - Whether to print the translation result\n- proxies: (dict, optional) - Proxy configuration for the HTTP client\n\nOutput:\n- If numberAlternative <= 1: returns (str) - The translated text\n- If numberAlternative > 1: returns (list[str]) - List of alternative translations\n- Returns None if HTTP request fails (non-200 status)\n- Raises TooManyRequestsException on HTTP 429 status",
    "Canonical_solution": "import random\nimport time\nimport json\nimport httpx\nfrom langdetect import detect\n\ndeeplAPI = \"https://www2.deepl.com/jsonrpc\"\nheaders = {\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"*/*\",\n    \"x-app-os-name\": \"iOS\",\n    \"x-app-os-version\": \"16.3.0\",\n    \"Accept-Language\": \"en-US,en;q=0.9\",\n    \"Accept-Encoding\": \"gzip, deflate, br\",\n    \"x-app-device\": \"iPhone13,2\",\n    \"User-Agent\": \"DeepL-iOS/2.9.1 iOS 16.3.0 (iPhone13,2)\",\n    \"x-app-build\": \"510265\",\n    \"x-app-version\": \"2.9.1\",\n    \"Connection\": \"keep-alive\",\n}\n\ndef translate(\n    text,\n    sourceLang=None,\n    targetLang=None,\n    numberAlternative=0,\n    printResult=False,\n    proxies=None,\n):\n    iCount = getICount(text)\n    id = getRandomNumber()\n\n    if sourceLang is None:\n        sourceLang = detectLang(text)\n    if targetLang is None:\n        targetLang = \"EN\"\n\n    numberAlternative = max(min(3, numberAlternative), 0)\n\n    postData = {\n        \"jsonrpc\": \"2.0\",\n        \"method\": \"LMT_handle_texts\",\n        \"id\": id,\n        \"params\": {\n            \"texts\": [{\"text\": text, \"requestAlternatives\": numberAlternative}],\n            \"splitting\": \"newlines\",\n            \"lang\": {\n                \"source_lang_user_selected\": sourceLang,\n                \"target_lang\": targetLang,\n            },\n            \"timestamp\": getTimestamp(iCount),\n            \"commonJobParams\": {\n                \"wasSpoken\": False,\n                \"transcribe_as\": \"\",\n            },\n        },\n    }\n    postDataStr = json.dumps(postData, ensure_ascii=False)\n\n    if (id + 5) % 29 == 0 or (id + 3) % 13 == 0:\n        postDataStr = postDataStr.replace('\"method\":\"', '\"method\" : \"', -1)\n    else:\n        postDataStr = postDataStr.replace('\"method\":\"', '\"method\": \"', -1)\n\n    with httpx.Client(proxies=proxies) as client:\n        resp = client.post(url=deeplAPI, data=postDataStr, headers=headers)\n        respStatusCode = resp.status_code\n\n        if respStatusCode == 429:\n            raise TooManyRequestsException\n            return \n\n        if respStatusCode != 200:\n            print(\"Error\", respStatusCode)\n            return\n\n        respText = resp.text\n        respJson = json.loads(respText)\n\n        if numberAlternative <= 1:\n            targetText = respJson[\"result\"][\"texts\"][0][\"text\"]\n            if printResult:\n                print(targetText)\n            return targetText\n\n        targetTextArray = []\n        for item in respJson[\"result\"][\"texts\"][0][\"alternatives\"]:\n            targetTextArray.append(item[\"text\"])\n            if printResult:\n                print(item[\"text\"])\n\n        return targetTextArray",
    "Code_level": "Function-level",
    "FSMID_for_test": 58,
    "right_result": "import httpx\nfrom typing import Optional, List, Dict, Any\nimport json\n\nclass TooManyRequestsException(Exception):\n    pass\n\ndef translate_text(\n    text: str,\n    sourceLang: Optional[str] = None,\n    targetLang: Optional[str] = \"EN\",\n    numberAlternative: Optional[int] = 0,\n    printResult: Optional[bool] = False,\n    proxies: Optional[Dict[str, str]] = None\n) -> Optional[Union[str, List[str]]]:\n    API_URL = \"https://api-free.deepl.com/v2/translate\"\n    headers = {\n        \"Authorization\": f\"DeepL-Auth-Key {deepl_api_key}\",\n        \"Content-Type\": \"application/json\"\n    }\n    \n    payload = {\n        \"text\": text,\n        \"target_lang\": targetLang\n    }\n    \n    if sourceLang:\n        payload[\"source_lang\"] = sourceLang\n    \n    if numberAlternative > 0:\n        payload[\"alternative_target_langs\"] = [targetLang] * numberAlternative\n    \n    try:\n        with httpx.Client(proxies=proxies) as client:\n            response = client.post(API_URL, headers=headers, json=payload)\n        \n        if response.status_code != 200:\n            if response.status_code == 429:\n                raise TooManyRequestsException(\"Too many requests to DeepL API\")\n            return None\n        \n        result = response.json()\n        translations = result.get(\"translations\", [])\n        \n        if numberAlternative <= 1:\n            translated_text = translations[0][\"text\"]\n            if printResult:\n                print(translated_text)\n            return translated_text\n        else:\n            alternative_texts = [t[\"text\"] for t in translations]\n            if printResult:\n                for text in alternative_texts:\n                    print(text)\n            return alternative_texts\n    \n    except Exception as e:\n        print(f\"Translation failed: {str(e)}\")\n        return None"
  },
  {
    "Task_id": 321,
    "Instruction": "Task Description: Create a Python function that implements a TCP client to interact with a server by sending a command with an offset and receiving the server's response.\n\nFunction Description: The function `tcp_client_interaction` establishes a TCP connection to a specified server, sends a command concatenated with an offset, receives the server's initial response, and then closes the connection. This is useful for basic client-server communication over TCP/IPv4.\n\nInput:\n- `host` (str): The IP address or hostname of the target server.\n- `port` (int): The port number on which the server is listening.\n- `cmd` (str): The command to be sent to the server.\n- `offset` (str): An offset value to be appended to the command.\n\nOutput:\n- The function prints the server's initial response to the console.\n- The function prints a confirmation message (\"Done Sending GTER with buffer\") upon successful completion.",
    "Canonical_solution": "import socket\n\ndef tcp_client_interaction(host, port, cmd, offset):\n    buffer = cmd + offset + '\\r\\n'\n    \n    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    s.connect((host, port))\n    data = s.recv(1024)\n    print \"\\n\" + data\n    s.send(buffer)\n    s.close()\n    print \"Done Sending GTER with buffer\"",
    "Code_level": "Function-level",
    "FSMID_for_test": 67,
    "right_result": "import socket\n\ndef tcp_client_interaction(host, port, cmd, offset):\n    try:\n        client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        client_socket.connect((host, port))\n        message = cmd + offset\n        client_socket.sendall(message.encode())\n        response = client_socket.recv(1024).decode()\n        print(response)\n        print(\"Done Sending GTER with buffer\")\n    except Exception as e:\n        print(f\"Error: {e}\")\n    finally:\n        client_socket.close()"
  },
  {
    "Task_id": 326,
    "Instruction": "Task Description: Create a Python class that acts as a TCP client to interact with a Zookeeper server, retrieve statistics, and parse them into a structured format.\n\nClass Description: The ZookeeperTCPClient class provides functionality to connect to a Zookeeper server via TCP (either IPv4 or Unix socket), send commands, receive statistics, and parse them into a dictionary format while handling connection errors gracefully.\n\nAttributes: \n[No explicit attributes are defined in the class, as it's primarily method-based]\n\nMethods:\n\nMethod1: get_raw_stats(host, port) -> str - \nEstablishes a TCP connection to the specified Zookeeper server (either via IPv4 or Unix socket), sends the 'mntr' command, and returns the raw statistics data as a string.\nInput:\n- host: str - The server hostname/IP address or Unix socket path\n- port: str/int - The server port number (None for Unix socket connections)\nOutput:\n- str - Raw statistics data received from the server\n\nMethod2: get_stats(host, port) -> dict - \nRetrieves raw statistics using get_raw_stats(), parses them into a structured dictionary format while ignoring certain predefined fields, and attempts to find maximum connection limit from process information.\nInput:\n- host: str - The server hostname/IP address or Unix socket path\n- port: str/int - The server port number (None for Unix socket connections)\nOutput:\n- dict - Parsed statistics with metric names as keys and their values as values",
    "Canonical_solution": "import socket\nimport re\n\nclass ZookeeperTCPClient:\n    def __init__(self):\n        pass\n\n    def get_raw_stats(self, host, port):\n        data = ''\n        try:\n            if port is None:\n                sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n                sock.connect(host)\n            else:\n                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n                sock.connect((host, int(port)))\n            sock.send('mntr\\n')\n            data = sock.recv(4096)\n        except socket.error:\n            raise Exception('Failed to get stats from %s:%s' % (host, port))\n        finally:\n            sock.close()\n        return data\n\n    def get_stats(self, host, port):\n        ignored = ('zk_version', 'zk_server_state')\n        pid = None\n        stats = {}\n        data = self.get_raw_stats(host, port)\n\n        for line in data.splitlines():\n            pieces = line.split()\n            if pieces[0] in ignored:\n                continue\n            stats[pieces[0]] = pieces[1]\n\n        try:\n            cmdline = \"/proc/%s/cmdline\" % pid\n            f = open(cmdline, 'r')\n            m = re.search(\"-c\\x00(\\d+)\", f.readline())\n            if m is not None:\n                stats['limit_maxconn'] = m.group(1)\n            f.close()\n        except:\n            pass\n\n        return stats",
    "Code_level": "Class-level",
    "FSMID_for_test": 67,
    "right_result": "import socket\nimport re\n\nclass ZookeeperTCPClient:\n    def get_raw_stats(self, host, port):\n        try:\n            if port is None:\n                sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n                sock.connect(host)\n            else:\n                sock = socket.create_connection((host, port))\n            sock.sendall(b'mntr\\n')\n            data = sock.recv(4096).decode('utf-8')\n            sock.close()\n            return data\n        except Exception as e:\n            return str(e)\n\n    def get_stats(self, host, port):\n        raw_data = self.get_raw_stats(host, port)\n        if not raw_data:\n            return {}\n\n        lines = raw_data.strip().split('\\n')\n        stats = {}\n        ignore_fields = {'Zookeeper version', 'Latency min (ms)', 'Latency max (ms)', 'Latency avg (ms)', 'Received packets', 'Sent packets', 'Outstanding requests', 'Zxid', 'Mode', 'Average latency (ms)', 'Max latency (ms)'}\n        for line in lines:\n            if not line:\n                continue\n            parts = line.split()\n            if len(parts) < 2:\n                continue\n            key, value = parts[0], ' '.join(parts[1:])\n            if key not in ignore_fields:\n                stats[key] = value\n        return stats"
  },
  {
    "Task_id": 328,
    "Instruction": "Task Description: Implement a function that detects alive hosts and retrieves their hostnames by establishing TCP connections to port 135 and exchanging specific binary packets.\n\nFunction Description: The function `oxid` is designed to scan a queue of IP addresses, attempt TCP connections to port 135 on each, and exchange binary packets to retrieve hostname information. It operates in a multi-threaded environment, processing IPs from a shared queue and updating a progress bar. Detected hostnames are appended to a shared list.\n\nInput:\n- `alive_host_Queue`: [Queue] - A thread-safe queue containing IP addresses to scan\n- `pbar`: [ProgressBar] - A progress bar object to update as IPs are processed\n- `alive_hostname_ips`: [List] - A shared list to store results in format [ip, hostname1, hostname2,...]\n\nOutput: None (results are appended to the input `alive_hostname_ips` list)",
    "Canonical_solution": "import socket\nfrom queue import Queue\nfrom threading import Thread\n\ndef oxid(alive_host_Queue, pbar, alive_hostname_ips):\n    def run_detect():\n        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        sock.settimeout(10)\n        try:\n            sock.connect((ip, 135))\n            buffer_v1 = b\"\\x05\\x00\\x0b\\x03\\x10\\x00\\x00\\x00\\x48\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\xb8\\x10\\xb8\\x10\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\xc4\\xfe\\xfc\\x99\\x60\\x52\\x1b\\x10\\xbb\\xcb\\x00\\xaa\\x00\\x21\\x34\\x7a\\x00\\x00\\x00\\x00\\x04\\x5d\\x88\\x8a\\xeb\\x1c\\xc9\\x11\\x9f\\xe8\\x08\\x00\\x2b\\x10\\x48\\x60\\x02\\x00\\x00\\x00\"\n            buffer_v2 = b\"\\x05\\x00\\x00\\x03\\x10\\x00\\x00\\x00\\x18\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x05\\x00\"\n            sock.send(buffer_v1)\n            packet = sock.recv(1024)\n            sock.send(buffer_v2)\n            packet = sock.recv(4096)\n            packet_v2 = packet[42:]\n            packet_v2_end = packet_v2.find(b\"\\x09\\x00\\xff\\xff\\x00\\x00\")\n            packet_v2 = packet_v2[:packet_v2_end]\n            hostname_list = packet_v2.split(b\"\\x00\\x00\")\n            result = [ip]\n            for h in hostname_list:\n                h = h.replace(b'\\x07\\x00', b'')\n                h = h.replace(b'\\x00', b'')\n                if h == b'':\n                    continue\n                h = h.decode('utf-8')\n                result.append(h)\n            alive_hostname_ips.append(result)\n        except Exception as e:\n            pass\n        finally:\n            sock.close()\n\n    while not alive_host_Queue.empty():\n        ip = alive_host_Queue.get()\n        run_detect()\n        pbar.update(1)\n        alive_host_Queue.task_done()",
    "Code_level": "Function-level",
    "FSMID_for_test": 67,
    "right_result": "import threading\nimport socket\nimport queue\n\ndef oxid(alive_host_Queue, pbar, alive_hostname_ips):\n    def scan_ip(ip):\n        try:\n            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n            sock.settimeout(1)\n            result = sock.connect_ex((ip, 135))\n            if result == 0:\n                sock.send(b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00')\n                data = sock.recv(1024)\n                hostname = data.decode('utf-8').split('\\x00')[0]\n                alive_hostname_ips.append([ip, hostname])\n            sock.close()\n        except:\n            pass\n        pbar.update(1)\n\n    while not alive_host_Queue.empty():\n        ip = alive_host_Queue.get()\n        thread = threading.Thread(target=scan_ip, args=(ip,))\n        thread.start()\n        thread.join()"
  },
  {
    "Task_id": 332,
    "Instruction": "Task Description: Create a Python class that collects and processes statistics from a Memcached server using TCP socket communication.\n\nClass Description: The MemcachedCollector class is designed to connect to a Memcached server, retrieve its statistics, and parse them into a structured dictionary format. It handles both IPv4 and Unix domain socket connections.\n\nAttributes:\n\nGAUGES: [list] - A list of metric names that should be treated as gauge values (values that can increase or decrease)\n\nMethods:\n\nget_raw_stats: [Name](host, port) -> [str] - Establishes a TCP connection to the specified Memcached server (either via IP:port or Unix socket), sends the 'stats' command, and returns the raw response data as a string. Handles connection errors gracefully.\n\nInput:\n- host: [str] - The server address (IP for network connections or path for Unix sockets)\n- port: [int/str/None] - The server port (None for Unix socket connections)\n\nOutput:\n- [str] - Raw statistics data in Memcached protocol format\n\nget_stats: [Name](host, port) -> [dict] - Retrieves and processes statistics from the Memcached server, returning them as a dictionary with metric names as keys and numeric values (either int or float).\n\nInput:\n- host: [str] - The server address (IP for network connections or path for Unix sockets)\n- port: [int/str/None] - The server port (None for Unix socket connections)\n\nOutput:\n- [dict] - Processed statistics with metric names as keys and numeric values",
    "Canonical_solution": "import socket\nimport re\n\nclass MemcachedCollector:\n    GAUGES = [\n        'bytes',\n        'connection_structures',\n        'curr_connections',\n        'curr_items',\n        'threads',\n        'reserved_fds',\n        'limit_maxbytes',\n        'hash_power_level',\n        'hash_bytes',\n        'hash_is_expanding',\n        'uptime'\n    ]\n\n    def get_raw_stats(self, host, port):\n        data = ''\n        try:\n            if port is None:\n                sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n                sock.connect(host)\n            else:\n                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n                sock.connect((host, int(port)))\n\n            sock.settimeout(3)\n            sock.send('stats\\n')\n\n            while True:\n                received = sock.recv(4096)\n                if not received:\n                    break\n                data += received\n                if data.endswith('END\\r\\n'):\n                    break\n        except socket.error:\n            pass\n        finally:\n            sock.close()\n        return data\n\n    def get_stats(self, host, port):\n        ignored = ('libevent', 'pointer_size', 'time', 'version',\n                   'repcached_version', 'replication', 'accepting_conns',\n                   'pid')\n        stats = {}\n        data = self.get_raw_stats(host, port)\n\n        for line in data.splitlines():\n            pieces = line.split(' ')\n            if pieces[0] != 'STAT' or pieces[1] in ignored:\n                continue\n            if '.' in pieces[2]:\n                stats[pieces[1]] = float(pieces[2])\n            else:\n                stats[pieces[1]] = int(pieces[2])\n\n        return stats",
    "Code_level": "Class-level",
    "FSMID_for_test": 67,
    "right_result": "import socket\nimport re\n\nclass MemcachedCollector:\n    GAUGES = ['curr_connections', 'total_connections', 'cmd_get', 'cmd_set', 'get_hits', 'get_misses', 'evictions', 'bytes', 'limit_maxbytes', 'uptime', 'time']\n\n    def get_raw_stats(self, host, port):\n        if port is None:\n            sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n            try:\n                sock.connect(host)\n            except socket.error as e:\n                raise ConnectionError(f\"Failed to connect to Unix socket: {e}\")\n        else:\n            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n            try:\n                sock.connect((host, int(port)))\n            except (socket.error, ValueError) as e:\n                raise ConnectionError(f\"Failed to connect to Memcached server: {e}\")\n        \n        try:\n            sock.sendall(b'stats\\n')\n            response = sock.recv(65535).decode('utf-8')\n        finally:\n            sock.close()\n        \n        return response\n\n    def get_stats(self, host, port):\n        raw = self.get_raw_stats(host, port)\n        stats = {}\n        lines = raw.strip().split('\\n')\n        for line in lines:\n            if line.startswith('STAT'):\n                parts = line.split()\n                if len(parts) >= 3:\n                    key = parts[1]\n                    value = parts[2]\n                    try:\n                        value = int(value)\n                    except ValueError:\n                        try:\n                            value = float(value)\n                        except ValueError:\n                            value = value\n                    stats[key] = value\n        return stats"
  },
  {
    "Task_id": 334,
    "Instruction": "Task Description: Implement a TCP client socket class with additional Unix Domain Socket (UDS) functionality for inter-process communication, including message packing/unpacking and connection management.\n\nClass Description: HSFZSocket is a base TCP client class that handles socket creation, connection, and basic send/receive operations. UDS_HSFZSocket extends this base class to add UDS-specific message formatting with source/target identifiers.\n\nAttributes:\n- ip: str - The IP address of the target server (default: '127.0.0.1')\n- port: int - The port number of the target server (default: 6801)\n- s: socket.socket - The TCP socket object\n- buffer: bytes - Internal buffer for storing received data\n- source: int - (UDS only) Source identifier for messages\n- target: int - (UDS only) Target identifier for messages\n- outputcls: Type - (UDS only) Optional class for parsing received messages\n\nMethods:\n- __init__(ip: str = '127.0.0.1', port: int = 6801) -> None - Initializes the socket with TCP_NODELAY and SO_REUSEADDR options, then connects to the server\n- send(data: bytes) -> int - Sends raw data through the socket and returns number of bytes sent\n- recv(x: int = 65535) -> Optional[bytes] - Receives data with length-prefixed protocol (4-byte header), returns None if incomplete\n- close() -> None - Closes the socket connection\n- (UDS) send(x: Any) -> int - Formats message with UDS header (length, flags, source, target) before sending\n- (UDS) recv(x: int = 65535) -> Optional[Any] - Receives UDS message and optionally parses it using outputcls",
    "Canonical_solution": "import socket\nimport struct\nimport time\nfrom typing import Optional, Type, Any\n\nclass HSFZSocket:\n    def __init__(self, ip='127.0.0.1', port=6801):\n        self.ip = ip\n        self.port = port\n        self.s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.s.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n        self.s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        self.s.connect((self.ip, self.port))\n        self.buffer = b\"\"\n\n    def send(self, data):\n        try:\n            return self.s.send(data)\n        except Exception as e:\n            self.close()\n            raise e\n\n    def recv(self, x=65535):\n        if self.buffer:\n            len_data = self.buffer[:4]\n        else:\n            len_data = self.s.recv(4, socket.MSG_PEEK)\n            if len(len_data) != 4:\n                return None\n\n        len_int = struct.unpack(\">I\", len_data)[0]\n        len_int += 6\n        self.buffer += self.s.recv(len_int - len(self.buffer))\n\n        if len(self.buffer) != len_int:\n            return None\n\n        pkt = self.buffer\n        self.buffer = b\"\"\n        return pkt\n\n    def close(self):\n        self.s.close()\n\nclass UDS_HSFZSocket(HSFZSocket):\n    def __init__(self, source, target, ip='127.0.0.1', port=6801, basecls=None):\n        super().__init__(ip, port)\n        self.source = source\n        self.target = target\n        self.outputcls = basecls\n\n    def send(self, x):\n        try:\n            x.sent_time = time.time()\n        except AttributeError:\n            pass\n\n        try:\n            return super().send(\n                struct.pack(\"!IBB\", len(x) + 2, 1, self.source, self.target) + bytes(x))\n        except Exception as e:\n            self.close()\n            raise e\n\n    def recv(self, x=65535):\n        pkt = super().recv(x)\n        if pkt and self.outputcls:\n            return self.outputcls(pkt[6:])\n        return pkt",
    "Code_level": "Class-level",
    "FSMID_for_test": 67,
    "right_result": "class HSFZSocket:\n    def __init__(self, ip: str = '127.0.0.1', port: int = 6801) -> None:\n        import socket\n        self.ip = ip\n        self.port = port\n        self.s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.s.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n        self.s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        self.s.connect((self.ip, self.port))\n        self.buffer = b''\n\n    def send(self, data: bytes) -> int:\n        return self.s.send(data)\n\n    def recv(self, x: int = 65535) -> Optional[bytes]:\n        while len(self.buffer) < 4:\n            data = self.s.recv(4 - len(self.buffer))\n            if not data:\n                return None\n            self.buffer += data\n        length = int.from_bytes(self.buffer[:4], byteorder='little')\n        self.buffer = self.buffer[4:]\n        while len(self.buffer) < length:\n            data = self.s.recv(length - len(self.buffer))\n            if not data:\n                return None\n            self.buffer += data\n        result, self.buffer = self.buffer[:length], self.buffer[length:]\n        return result\n\n    def close(self) -> None:\n        self.s.close()\n\nclass UDS_HSFZSocket(HSFZSocket):\n    def __init__(self, ip: str = '127.0.0.1', port: int = 6801, source: int = 0, target: int = 0, outputcls: Type = None) -> None:\n        super().__init__(ip, port)\n        self.source = source\n        self.target = target\n        self.outputcls = outputcls\n\n    def send(self, x: Any) -> int:\n        import struct\n        if isinstance(x, bytes):\n            data = x\n        else:\n            data = str(x).encode('utf-8')\n        length = len(data)\n        header = struct.pack('<IIBB', length, 0, self.source, self.target)\n        return self.s.send(header + data)\n\n    def recv(self, x: int = 65535) -> Optional[Any]:\n        result = super().recv(x)\n        if result is None:\n            return None\n        import struct\n        if len(result) < 5:\n            return None\n        length, flags, src, dst = struct.unpack('<IIBB', result[:5])\n        payload = result[5:5 + length]\n        if self.outputcls:\n            try:\n                return self.outputcls(payload)\n            except Exception as e:\n                print(f\"Error parsing message: {e}\")\n                return None\n        return payload"
  },
  {
    "Task_id": 336,
    "Instruction": "Task Description: Create a Python function that sends a TCP payload to a specified server using socket programming.\n\nFunction Description: The function establishes a TCP connection to a target server using IPv4, sends a payload, and then closes the connection. It handles the socket creation, connection, data transmission, and cleanup.\n\nInput:\n- target_ip: str - The IP address of the target server\n- target_port: int - The port number of the target server\n- payload: str - The data to be sent to the server\n\nOutput: None (The function does not return any value but sends the payload to the server)",
    "Canonical_solution": "import socket\n\ndef send_tcp_payload(target_ip: str, target_port: int, payload: str):\n    \"\"\"\n    Sends a TCP payload to a target server\n    \n    Args:\n        target_ip: IP address of target server\n        target_port: Port number of target server\n        payload: Data to send to server\n    \"\"\"\n    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    s.connect((target_ip, target_port))\n    s.send(payload.encode())\n    s.close()",
    "Code_level": "Function-level",
    "FSMID_for_test": 67,
    "right_result": "import socket\n\ndef send_tcp_payload(target_ip, target_port, payload):\n    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    try:\n        sock.connect((target_ip, target_port))\n        sock.sendall(payload.encode())\n    finally:\n        sock.close()"
  },
  {
    "Task_id": 338,
    "Instruction": "Task Description: Create a TCP client class for interacting with the IQFeed server to send commands and receive market data.\n\nClass Description: The IQFeedClient class establishes and manages a TCP connection to an IQFeed server, allowing users to send commands/queries and receive responses. It handles connection setup, data transmission, error handling, and connection teardown.\n\nAttributes:\n_host: str - The hostname or IP address of the IQFeed server (default: 'localhost')\n_port: int - The port number for the IQFeed server connection (default: 9100)\n_timeout: float - The connection timeout in seconds (default: 10.0)\n_recv_buf: str - Buffer for storing received data\n_sock: socket.socket - The TCP socket object for server communication\n\nMethods:\n__init__(host: str = 'localhost', port: int = 9100, timeout: float = 10.0) -> None - Initializes the client with connection parameters and establishes the TCP connection\n_send_cmd(cmd: str) -> None - Sends a command string to the IQFeed server (private method)\nquery(message: str) -> Optional[List[str]] - Sends a query message to the server and returns the parsed response data\nclose() -> None - Closes the socket connection to the server",
    "Canonical_solution": "import socket\nimport logging\nimport numpy as np\nimport pandas as pd\n\nclass IQFeedClient:\n    def __init__(self, host: str = 'localhost', port: int = 9100, timeout: float = 10.0):\n        self._host = host\n        self._port = port\n        self._timeout = timeout\n        self._recv_buf = \"\"\n        \n        # Create and configure socket\n        self._sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self._sock.connect((self._host, self._port))\n        self._sock.settimeout(self._timeout)\n\n    def _send_cmd(self, cmd: str):\n        \"\"\"Send command to IQFeed server\"\"\"\n        self._sock.sendall(cmd.encode(encoding='latin-1', errors='strict'))\n\n    def query(self, message: str):\n        \"\"\"Send query to IQFeed server and receive response\"\"\"\n        end_msg = '!ENDMSG!'\n        recv_buffer = 4096\n\n        self._send_cmd(message)\n\n        chunk = \"\"\n        data = \"\"\n        while True:\n            chunk = self._sock.recv(recv_buffer).decode('latin-1')\n            data += chunk\n            if chunk.startswith('E,'):  # error condition\n                if chunk.startswith('E,!NO_DATA!'):\n                    logging.warn('No data available for the given symbol or dates')\n                    return None\n                else:\n                    raise Exception(chunk)\n            elif end_msg in chunk:\n                break\n\n        # Clean up the data\n        data = data[:-1 * (len(end_msg) + 3)]\n        data = \"\".join(data.split(\"\\r\"))\n        data = data.replace(\",\\n\", \",\")[:-1]\n        return data.split(\",\")\n\n    def close(self):\n        \"\"\"Close the socket connection\"\"\"\n        self._sock.close()",
    "Code_level": "Class-level",
    "FSMID_for_test": 67,
    "right_result": "import socket\nimport re\n\nclass IQFeedClient:\n    def __init__(self, host: str = 'localhost', port: int = 9100, timeout: float = 10.0) -> None:\n        self._host = host\n        self._port = port\n        self._timeout = timeout\n        self._recv_buf = ''\n        self._sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self._sock.settimeout(self._timeout)\n        try:\n            self._sock.connect((self._host, self._port))\n        except socket.error as e:\n            raise ConnectionError(f\"Failed to connect to IQFeed server: {e}\")\n\n    def _send_cmd(self, cmd: str) -> None:\n        try:\n            self._sock.sendall(cmd.encode('utf-8') + b'\\r\\n')\n        except socket.error as e:\n            raise RuntimeError(f\"Failed to send command: {e}\")\n\n    def query(self, message: str) -> list:\n        try:\n            self._send_cmd(message)\n            while True:\n                data = self._sock.recv(4096)\n                if not data:\n                    break\n                self._recv_buf += data.decode('utf-8')\n                if self._recv_buf.endswith('\\r\\n'):\n                    break\n            lines = self._recv_buf.strip().split('\\r\\n')\n            self._recv_buf = ''\n            return [line for line in lines if line]\n        except socket.timeout:\n            raise TimeoutError(\"Connection timed out\")\n        except socket.error as e:\n            raise RuntimeError(f\"Socket error during query: {e}\")\n\n    def close(self) -> None:\n        try:\n            self._sock.close()\n        except socket.error as e:\n            raise RuntimeError(f\"Failed to close connection: {e}\")"
  },
  {
    "Task_id": 339,
    "Instruction": "Task Description: Create a Python class that implements TCP client functionality for testing server connections and sending data to a server.\n\nClass Description: The TargetSocket class provides TCP client capabilities to check server availability and send data to a specified port on localhost. It handles connection establishment, data transmission, and proper resource cleanup.\n\nAttributes:\n- sock: [socket.socket] - The socket object used for TCP communication (initially None)\n- targetPort: [int] - The target port number for server communication (default: 5001)\n\nMethods:\n- testServerConnectionTcp() -> [bool] - Tests if a connection can be established with the target server. Returns True if successful, False otherwise.\n- sendToSocket(data: str) -> [bool] - Attempts to send the provided string data to the target server. Makes up to 10 connection attempts with 100ms delays between attempts. Returns True if data was sent successfully, False otherwise.",
    "Canonical_solution": "import socket\n\nclass TargetSocket:\n    def __init__(self, target_port=5001):\n        self.sock = None\n        self.targetPort = target_port\n\n    def testServerConnectionTcp(self):\n        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        server_address = ('localhost', self.targetPort)\n\n        try:\n            sock.connect(server_address)\n        except socket.error as exc:\n            return False\n\n        sock.close()\n        return True\n\n    def sendToSocket(self, data):\n        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        s.settimeout(1)\n\n        host = 'localhost'\n        port = self.targetPort\n\n        isOpen = False\n        n = 0\n        while isOpen is False:\n            try:\n                s.connect((host, port))\n                isOpen = True\n            except Exception as e:\n                time.sleep(0.1)\n                n += 1\n                isOpen = False\n\n            if n == 10:\n                return False\n\n        try:\n            s.send(str.encode(data))\n        except Exception as e:\n            print(\"B: \" + str(e))\n\n        s.close()\n        return True",
    "Code_level": "Class-level",
    "FSMID_for_test": 67,
    "right_result": "class TargetSocket:\n    def __init__(self, targetPort=5001):\n        self.sock = None\n        self.targetPort = targetPort\n\n    def testServerConnectionTcp(self):\n        import socket\n        import time\n        for _ in range(10):\n            try:\n                self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n                self.sock.settimeout(1)\n                self.sock.connect(('localhost', self.targetPort))\n                self.sock.close()\n                return True\n            except Exception as e:\n                time.sleep(0.1)\n                continue\n        return False\n\n    def sendToSocket(self, data):\n        import socket\n        import time\n        for _ in range(10):\n            try:\n                self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n                self.sock.settimeout(1)\n                self.sock.connect(('localhost', self.targetPort))\n                self.sock.sendall(data.encode('utf-8'))\n                self.sock.close()\n                return True\n            except Exception as e:\n                time.sleep(0.1)\n                continue\n        return False"
  },
  {
    "Task_id": 340,
    "Instruction": "Task Description: Create a Python class for handling Unix domain socket communication with a server, including sending and receiving serialized data, timeout management, and proper connection cleanup.\n\nClass Description: CSocket is a class that manages communication over a Unix domain socket. It handles socket creation, connection, data serialization/deserialization, timeout settings, and proper connection termination. The class uses pickle for object serialization and implements custom protocol handling with CSPROTO constants.\n\nAttributes:\n- __csock: [socket.socket] - The underlying Unix domain socket object\n- __deftout: [float] - The default timeout value for socket operations\n\nMethods:\n- __init__(sock: str, timeout: int = -1) -> None - Initializes the socket connection to the specified Unix domain socket path with optional timeout\n- __del__() -> None - Destructor that ensures proper socket cleanup\n- send(msg: Any, nonblocking: bool = False, timeout: Optional[float] = None) -> Any - Serializes and sends data to the server, then waits for and returns the response\n- settimeout(timeout: float) -> None - Sets the socket timeout (use -1 for default)\n- close() -> None - Properly closes the socket connection with protocol-compliant shutdown\n- convert(m: Any) -> Union[str, bool, int, float, list, dict, set] - Static method to convert objects to serializable types\n- receive(sock: socket.socket, nonblocking: bool = False, timeout: Optional[float] = None) -> Any - Static method to receive and deserialize data from the socket",
    "Canonical_solution": "import socket\nfrom pickle import dumps, loads, HIGHEST_PROTOCOL\nfrom ..protocol import CSPROTO\n\nclass CSocket:\n    def __init__(self, sock=\"/var/run/fail2ban/fail2ban.sock\", timeout=-1):\n        self.__csock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n        self.__deftout = self.__csock.gettimeout()\n        if timeout != -1:\n            self.settimeout(timeout)\n        self.__csock.connect(sock)\n\n    def __del__(self):\n        self.close()\n    \n    def send(self, msg, nonblocking=False, timeout=None):\n        obj = dumps(list(map(CSocket.convert, msg)), HIGHEST_PROTOCOL)\n        self.__csock.send(obj)\n        self.__csock.send(CSPROTO.END)\n        return self.receive(self.__csock, nonblocking, timeout)\n\n    def settimeout(self, timeout):\n        self.__csock.settimeout(timeout if timeout != -1 else self.__deftout)\n\n    def close(self):\n        if not self.__csock:\n            return\n        try:\n            self.__csock.sendall(CSPROTO.CLOSE + CSPROTO.END)\n            self.__csock.shutdown(socket.SHUT_RDWR)\n        except socket.error:\n            pass\n        try:\n            self.__csock.close()\n        except socket.error:\n            pass\n        self.__csock = None\n    \n    @staticmethod\n    def convert(m):\n        if isinstance(m, (str, bool, int, float, list, dict, set)):\n            return m\n        else:\n            return str(m)\n\n    @staticmethod\n    def receive(sock, nonblocking=False, timeout=None):\n        msg = CSPROTO.EMPTY\n        if nonblocking: sock.setblocking(0)\n        if timeout: sock.settimeout(timeout)\n        bufsize = 1024\n        while msg.rfind(CSPROTO.END, -32) == -1:\n            chunk = sock.recv(bufsize)\n            if not len(chunk):\n                raise socket.error(104, 'Connection reset by peer')\n            if chunk == CSPROTO.END: break\n            msg = msg + chunk\n            if bufsize < 32768: bufsize <<= 1\n        return loads(msg)",
    "Code_level": "Class-level",
    "FSMID_for_test": 67,
    "right_result": "import socket\nimport pickle\nimport time\nimport os\nfrom typing import Any, Union, Optional\n\nclass CSocket:\n    CSPROTO = {\n        'HEADER': b'\\x01\\x02\\x03\\x04',\n        'MSG_SEP': b'\\x05\\x06\\x07\\x08'\n    }\n\n    def __init__(self, sock: str, timeout: int = -1) -> None:\n        self.__csock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n        self.__deftout = timeout\n        self.__csock.connect(sock)\n        self.settimeout(timeout)\n\n    def __del__(self) -> None:\n        self.close()\n\n    def send(self, msg: Any, nonblocking: bool = False, timeout: Optional[float] = None) -> Any:\n        if not self.__csock:\n            raise ConnectionError(\"Socket is closed\")\n        try:\n            serializable_msg = self.convert(msg)\n            data = pickle.dumps(serializable_msg)\n            header = self.CSPROTO['HEADER']\n            msg_sep = self.CSPROTO['MSG_SEP']\n            packet = header + msg_sep + data\n            self.__csock.sendall(packet)\n            return self.receive(self.__csock, nonblocking, timeout)\n        except Exception as e:\n            raise RuntimeError(f\"Send failed: {e}\")\n\n    def settimeout(self, timeout: float) -> None:\n        if timeout == -1:\n            self.__csock.settimeout(None)\n        else:\n            self.__csock.settimeout(timeout)\n        self.__deftout = timeout\n\n    def close(self) -> None:\n        if hasattr(self, '__csock') and self.__csock:\n            self.__csock.shutdown(socket.SHUT_RDWR)\n            self.__csock.close()\n            del self.__csock\n\n    @staticmethod\n    def convert(m: Any) -> Union[str, bool, int, float, list, dict, set]:\n        if isinstance(m, (str, bool, int, float)):\n            return m\n        elif isinstance(m, (list, tuple)):\n            return [CSocket.convert(item) for item in m]\n        elif isinstance(m, dict):\n            return {k: CSocket.convert(v) for k, v in m.items()}\n        elif isinstance(m, set):\n            return {CSocket.convert(item) for item in m}\n        else:\n            raise TypeError(f\"Object of type {type(m)} is not serializable\")\n\n    @staticmethod\n    def receive(sock: socket.socket, nonblocking: bool = False, timeout: Optional[float] = None) -> Any:\n        if not sock:\n            raise ValueError(\"Socket is invalid\")\n        if timeout is None:\n            timeout = sock.gettimeout()\n        if nonblocking:\n            sock.settimeout(0.0)\n        try:\n            header = sock.recv(len(CSocket.CSPROTO['HEADER']))\n            if not header or header != CSocket.CSPROTO['HEADER']:\n                raise ValueError(\"Invalid header received\")\n            msg_sep = sock.recv(len(CSocket.CSPROTO['MSG_SEP']))\n            if not msg_sep or msg_sep != CSocket.CSPROTO['MSG_SEP']:\n                raise ValueError(\"Invalid message separator received\")\n            data = b''\n            while True:\n                chunk = sock.recv(4096)\n                if not chunk:\n                    break\n                data += chunk\n                if data.endswith(CSocket.CSPROTO['MSG_SEP']):\n                    data = data[:-len(CSocket.CSPROTO['MSG_SEP'])]\n                    break\n            sock.settimeout(timeout)\n            return pickle.loads(data)\n        except socket.timeout:\n            sock.settimeout(timeout)\n            raise TimeoutError(\"Receive timed out\")\n        except Exception as e:\n            sock.settimeout(timeout)\n            raise RuntimeError(f\"Receive failed: {e}\")"
  },
  {
    "Task_id": 341,
    "Instruction": "Task Description: Create a Python function that establishes a TCP connection to a server, receives initial data from the server, sends a buffer with a specific prefix, and handles connection errors gracefully.\n\nFunction Description: The function `send_buffer_to_server` creates a TCP socket, connects to a specified server, receives initial data, sends a buffer prefixed with \"GMON /\", and ensures proper connection closure. It includes error handling for connection issues.\n\nInput:\n- host: [str] - The IP address or hostname of the target server\n- port: [int] - The port number on which the server is listening\n- buffer: [str] - The data buffer to be sent to the server (will be prefixed with \"GMON /\")\n\nOutput:\n- None (prints status messages to console: received data, error messages, and confirmation of buffer sending)",
    "Canonical_solution": "import socket\n\ndef send_buffer_to_server(host, port, buffer):\n    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    try:\n        s.connect((host, port))\n        data = s.recv(1024)\n        print \"\\n\" + data\n        s.send(\"GMON /\" + buffer + '\\r\\n')\n    except:\n        print \"Check your debugger\"\n    finally:\n        s.close()\n        print \"Buffer Sent!\"",
    "Code_level": "Function-level",
    "FSMID_for_test": 67,
    "right_result": "import socket\n\ndef send_buffer_to_server(host, port, buffer):\n    try:\n        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        sock.connect((host, port))\n        print(\"Connected to server\")\n        initial_data = sock.recv(1024)\n        print(f\"Received initial data: {initial_data.decode()}\")\n        prefixed_buffer = \"GMON /\" + buffer\n        sock.sendall(prefixed_buffer.encode())\n        print(\"Buffer sent successfully\")\n    except socket.error as e:\n        print(f\"Connection error: {e}\")\n    finally:\n        sock.close()\n        print(\"Connection closed\")"
  },
  {
    "Task_id": 343,
    "Instruction": "Task Description: Implement a CMPP (China Mobile Peer-to-Peer) client class in Python that handles communication with a CMPP gateway server for sending SMS messages. The class should manage TCP socket connections, authentication, message sending, and response handling.\n\nClass Description: The CMPPClient class encapsulates the functionality to connect to a CMPP gateway server, authenticate using SP credentials, send SMS messages, and handle server responses. It maintains socket connections and sequence numbering for message tracking.\n\nAttributes:\n- ip: str - The IP address of the CMPP gateway server\n- port: int - The port number of the CMPP gateway server\n- sp_id: str - The service provider ID for authentication\n- sp_secret: str - The service provider secret for authentication\n- src_id: str - The source ID for SMS messages\n- service_id: str - The service ID for SMS messages\n- _sequence_id: int - Internal counter for message sequence numbers\n- _is_connect: bool - Connection status flag\n- _times: int - Number of connection retry attempts\n- __socket: socket.socket - The TCP socket object for server communication\n\nMethods:\n- __init__(host: str, port: int, sp_id: str, sp_secret: str, src_id: str, service_id: str) -> None - Initializes the client with server details and credentials\n- sequence_id() -> int - Property that returns and increments the sequence ID\n- _connect() -> None - Establishes TCP connection to the server with retry logic\n- send(instance: Union[CMPPBaseRequestInstance, bytes]) -> None - Sends a CMPP request or raw message to the server\n- recv() -> tuple - Receives and parses a response from the server\n- close() -> None - Closes the connection and sends termination request\n- _cmpp_connect() -> None - Handles CMPP authentication protocol\n- _cmpp_send_sms(dest: List[str], sign_name: str, template_code: str, template_param: Dict) -> None - Internal method for sending SMS messages\n- send_sms(dest: List[str], sign_name: str, template_code: str, template_param: Dict) -> None - Public method for sending SMS with error handling",
    "Canonical_solution": "import socket\nimport struct\nimport time\nfrom typing import List, Dict\n\nclass CMPPClient:\n    def __init__(self, host: str, port: int, sp_id: str, sp_secret: str, src_id: str, service_id: str):\n        self.ip = host\n        self.port = port\n        self.sp_id = sp_id\n        self.sp_secret = sp_secret\n        self.src_id = src_id\n        self.service_id = service_id\n        self._sequence_id = 0\n        self._is_connect = False\n        self._times = 3\n        self.__socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self._connect()\n\n    @property\n    def sequence_id(self) -> int:\n        s = self._sequence_id\n        self._sequence_id += 1\n        return s\n\n    def _connect(self) -> None:\n        self.__socket.settimeout(5)\n        for i in range(self._times):\n            try:\n                self.__socket.connect((self.ip, self.port))\n                self._is_connect = True\n                break\n            except Exception as err:\n                time.sleep(1)\n        else:\n            raise Exception('Failed to connect to the CMPP gateway server')\n\n    def send(self, instance) -> None:\n        if isinstance(instance, CMPPBaseRequestInstance):\n            message = instance.get_message(sequence_id=self.sequence_id)\n        else:\n            message = instance\n        self.__socket.send(message)\n\n    def recv(self) -> tuple:\n        raw_length = self.__socket.recv(4)\n        length, = struct.unpack('!L', raw_length)\n        header, body = CMPPResponseInstance().parse(\n            raw_length + self.__socket.recv(length - 4)\n        )\n        return header, body\n\n    def close(self) -> None:\n        if self._is_connect:\n            terminate_request = CMPPTerminateRequestInstance()\n            self.send(terminate_request)\n            self.__socket.close()\n\n    def _cmpp_connect(self) -> None:\n        connect_request = CMPPConnectRequestInstance(self.sp_id, self.sp_secret)\n        self.send(connect_request)\n        header, body = self.recv()\n        if body['Status'] != 0:\n            raise Exception('CMPPv2.0 authentication failed')\n\n    def _cmpp_send_sms(self, dest: List[str], sign_name: str, template_code: str, template_param: Dict) -> None:\n        message = template_param.get('message')\n        if message is None:\n            code = template_param.get('code')\n            message = template_code.replace('{code}', code)\n        msg = '\u3010%s\u3011 %s' % (sign_name, message)\n        submit_request = CMPPSubmitRequestInstance(\n            msg_src=self.sp_id, src_id=self.src_id, msg_content=msg,\n            dest_usr_tl=len(dest), dest_terminal_id=dest,\n            service_id=self.service_id\n        )\n        self.send(submit_request)\n        header, body = self.recv()\n        command_id = header.get('command_id')\n        if command_id == CMPP_DELIVER:\n            deliver_request = CMPPDeliverRespRequestInstance(\n                msg_id=body['Msg_Id'], result=body['Result']\n            )\n            self.send(deliver_request)\n\n    def send_sms(self, dest: List[str], sign_name: str, template_code: str, template_param: Dict) -> None:\n        try:\n            self._cmpp_connect()\n            self._cmpp_send_sms(dest, sign_name, template_code, template_param)\n        except Exception as e:\n            self.close()\n            raise Exception(e)",
    "Code_level": "Class-level",
    "FSMID_for_test": 67,
    "right_result": "import socket\nimport time\nfrom typing import List, Dict, Union\n\nclass CMPPBaseRequestInstance:\n    pass\n\nclass CMPPClient:\n    def __init__(self, host: str, port: int, sp_id: str, sp_secret: str, src_id: str, service_id: str) -> None:\n        self.ip = host\n        self.port = port\n        self.sp_id = sp_id\n        self.sp_secret = sp_secret\n        self.src_id = src_id\n        self.service_id = service_id\n        self._sequence_id = 0\n        self._is_connect = False\n        self._times = 0\n        self.__socket = None\n\n    @property\n    def sequence_id(self) -> int:\n        self._sequence_id += 1\n        return self._sequence_id\n\n    def _connect(self) -> None:\n        while self._times < 3:\n            try:\n                self.__socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n                self.__socket.connect((self.ip, self.port))\n                self._is_connect = True\n                break\n            except Exception as e:\n                print(f\"Connection failed: {e}\")\n                self._times += 1\n                time.sleep(2)\n        if not self._is_connect:\n            raise ConnectionError(\"Failed to connect to CMPP gateway server\")\n\n    def send(self, instance: Union[CMPPBaseRequestInstance, bytes]) -> None:\n        if not self._is_connect:\n            self._connect()\n        if isinstance(instance, CMPPBaseRequestInstance):\n            data = instance.pack()\n        else:\n            data = instance\n        self.__socket.sendall(data)\n\n    def recv(self) -> tuple:\n        if not self._is_connect:\n            self._connect()\n        response = self.__socket.recv(4096)\n        return response\n\n    def close(self) -> None:\n        if self._is_connect:\n            self._cmpp_connect()\n            self.__socket.close()\n            self._is_connect = False\n\n    def _cmpp_connect(self) -> None:\n        pass\n\n    def _cmpp_send_sms(self, dest: List[str], sign_name: str, template_code: str, template_param: Dict) -> None:\n        pass\n\n    def send_sms(self, dest: List[str], sign_name: str, template_code: str, template_param: Dict) -> None:\n        try:\n            self._cmpp_send_sms(dest, sign_name, template_code, template_param)\n        except Exception as e:\n            print(f\"Failed to send SMS: {e}\")"
  },
  {
    "Task_id": 344,
    "Instruction": "Task Description: Create a Python function that establishes a TCP connection to a specified server, sends a payload consisting of a command and optional padding, and then closes the connection.\n\nFunction Description: The function `send_tcp_payload` creates a TCP socket, connects to a target server using the provided IP address and port, sends a payload formed by combining a command string with optional padding, and finally closes the socket connection. This is useful for simple TCP-based client-server communication scenarios.\n\nInput:\n- `ipaddr`: [str] - The IP address of the target server to connect to\n- `port`: [int] - The port number on the target server to connect to\n- `cmd`: [str] - The command string to be sent as part of the payload\n- `padding`: [str] - Optional additional data to be appended to the command\n\nOutput: None (The function performs an action but doesn't return any value)",
    "Canonical_solution": "import socket\n\ndef send_tcp_payload(ipaddr, port, cmd, padding):\n    payload = cmd + padding\n    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    s.connect((ipaddr, port))\n    s.send(payload.encode())\n    s.close()",
    "Code_level": "Function-level",
    "FSMID_for_test": 67,
    "right_result": "import socket\n\ndef send_tcp_payload(ipaddr, port, cmd, padding=\"\"):\n    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    try:\n        sock.connect((ipaddr, port))\n        payload = cmd + padding\n        sock.sendall(payload.encode())\n    finally:\n        sock.close()"
  },
  {
    "Task_id": 346,
    "Instruction": "Task Description: Implement a TCP client class for handling XDCC file downloads with progress tracking, speed calculation, and resumable download capabilities.\n\nClass Description: XDCCRequest is a class that manages file downloads over DCC (Direct Client-to-Client) protocol using TCP sockets. It provides functionality for establishing connections, downloading files with progress tracking, handling resumable downloads, and managing download speed calculations.\n\nAttributes:\n- proxies: dict - Proxy configuration for the connection\n- bucket: object - Rate limiting bucket for download speed control\n- fh: file object - File handle for writing downloaded data\n- dccsock: socket - TCP socket for DCC connection\n- filesize: int - Total size of the file being downloaded\n- received: int - Number of bytes received so far\n- speeds: list - List of recent download speeds (last three measurements)\n- sleep: float - Dynamic sleep interval for rate control\n- last_recv_size: int - Size of last received data chunk\n- send_64bits_ack: bool - Flag for using 64-bit ACK packets\n- abort: bool - Flag to indicate download abortion\n- status_notify: function - Callback for progress updates\n\nMethods:\n- create_socket() -> socket - Creates and returns a new TCP socket\n- _write_func(buf: bytes) -> None - Writes buffer to file with rate control\n- _send_ack() -> None - Sends acknowledgement of received bytes to server\n- download(ip: str, port: int, filename: str, status_notify: function=None, resume: function=None) -> str - Main download method\n- abort_downloads() -> None - Sets abort flag to stop current download\n- update_progress() -> None - Triggers progress notification callback\n- close() -> None - Cleanup method (currently empty)\n\nProperties:\n- size: int - Returns total file size\n- arrived: int - Returns bytes received so far\n- speed: int - Returns average download speed\n- percent: int - Returns download progress percentage",
    "Canonical_solution": "import errno\nimport os\nimport select\nimport socket\nimport struct\nimport time\n\nclass XDCCRequest:\n    def __init__(self, bucket=None, options={}):\n        self.proxies = options.get(\"proxies\", {})\n        self.bucket = bucket\n        self.fh = None\n        self.dccsock = None\n        self.filesize = 0\n        self.received = 0\n        self.speeds = [0, 0, 0]\n        self.sleep = 0.000\n        self.last_recv_size = 0\n        self.send_64bits_ack = False\n        self.abort = False\n        self.status_notify = None\n\n    def create_socket(self):\n        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        return sock\n\n    def _write_func(self, buf):\n        size = len(buf)\n        self.received += size\n        self.fh.write(buf)\n\n        if self.bucket:\n            time.sleep(self.bucket.consumed(size))\n        else:\n            if size < self.last_recv_size:\n                self.sleep += 0.002\n            else:\n                self.sleep *= 0.7\n            self.last_recv_size = size\n            time.sleep(self.sleep)\n\n    def _send_ack(self):\n        try:\n            self.dccsock.send(\n                struct.pack(\"!Q\" if self.send_64bits_ack else \"!I\", self.received)\n            )\n        except socket.error:\n            pass\n\n    def download(self, ip, port, filename, status_notify=None, resume=None):\n        self.status_notify = status_notify\n        self.send_64bits_ack = not self.filesize < 1 << 32\n        chunk_name = filename + \".chunk0\"\n\n        if resume and os.path.exists(chunk_name):\n            self.fh = open(chunk_name, mode=\"ab\")\n            resume_position = self.fh.tell()\n            if not resume_position:\n                resume_position = os.stat(chunk_name).st_size\n            resume_position = resume(resume_position)\n            self.fh.truncate(resume_position)\n            self.received = resume_position\n        else:\n            self.fh = open(chunk_name, mode=\"wb\")\n\n        last_update = time.time()\n        num_recv_len = 0\n        self.dccsock = self.create_socket()\n        recv_list = [self.dccsock]\n        self.dccsock.connect((ip, port))\n        self.dccsock.setblocking(False)\n\n        while True:\n            if self.abort:\n                self.dccsock.close()\n                self.fh.close()\n                raise Abort\n\n            fdset = select.select(recv_list, [], [], 0.1)\n            if self.dccsock in fdset[0]:\n                try:\n                    data = self.dccsock.recv(16384)\n                except socket.error as exc:\n                    if exc.errno in (errno.EAGAIN, errno.EWOULDBLOCK):\n                        continue\n                    else:\n                        raise\n\n                data_len = len(data)\n                if data_len == 0 or self.received + data_len > self.filesize > 0:\n                    break\n\n                num_recv_len += data_len\n                self._write_func(data)\n                self._send_ack()\n\n            now = time.time()\n            timespan = now - last_update\n            if timespan > 1:\n                self.speeds[2] = self.speeds[1]\n                self.speeds[1] = self.speeds[0]\n                self.speeds[0] = num_recv_len // timespan\n                num_recv_len = 0\n                last_update = now\n                self.update_progress()\n\n        self.dccsock.close()\n        self.fh.close()\n        os.rename(chunk_name, filename)\n        return filename\n\n    def abort_downloads(self):\n        self.abort = True\n\n    def update_progress(self):\n        if self.status_notify:\n            self.status_notify({\"progress\": self.percent})\n\n    @property\n    def size(self):\n        return self.filesize\n\n    @property\n    def arrived(self):\n        return self.received\n\n    @property\n    def speed(self):\n        speeds = [x for x in self.speeds if x]\n        return sum(speeds) // len(speeds)\n\n    @property\n    def percent(self):\n        if not self.filesize:\n            return 0\n        return (self.received * 100) // self.filesize\n\n    def close(self):\n        pass",
    "Code_level": "Class-level",
    "FSMID_for_test": 67,
    "right_result": "class XDCCRequest:\n    def __init__(self, proxies=None):\n        self.proxies = proxies or {}\n        self.bucket = None\n        self.fh = None\n        self.dccsock = None\n        self.filesize = 0\n        self.received = 0\n        self.speeds = []\n        self.sleep = 0.0\n        self.last_recv_size = 0\n        self.send_64bits_ack = False\n        self.abort = False\n        self.status_notify = None\n\n    def create_socket(self):\n        import socket\n        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        return sock\n\n    def _write_func(self, buf):\n        if self.abort:\n            return\n        if self.bucket:\n            self.bucket.consume(len(buf))\n        self.fh.write(buf)\n        self.received += len(buf)\n        self.last_recv_size = len(buf)\n        self.update_progress()\n\n    def _send_ack(self):\n        if self.send_64bits_ack:\n            ack = f\"{self.received}\\n\"\n        else:\n            ack = f\"{self.received & 0xFFFFFFFF}\\n\"\n        self.dccsock.sendall(ack.encode())\n\n    def download(self, ip, port, filename, status_notify=None, resume=None):\n        self.status_notify = status_notify\n        self.fh = open(filename, 'ab')\n        self.dccsock = self.create_socket()\n        try:\n            self.dccsock.connect((ip, port))\n            self._send_ack()\n            while not self.abort and self.received < self.filesize:\n                data = self.dccsock.recv(65535)\n                if not data:\n                    break\n                self._write_func(data)\n                self._send_ack()\n            if self.abort:\n                self.fh.close()\n                return \"Aborted\"\n            self.fh.close()\n            return \"Completed\"\n        except Exception as e:\n            self.fh.close()\n            return str(e)\n        finally:\n            self.dccsock.close()\n\n    def abort_downloads(self):\n        self.abort = True\n\n    def update_progress(self):\n        if self.status_notify:\n            self.status_notify(self.received, self.filesize)\n\n    def close(self):\n        pass\n\n    @property\n    def size(self):\n        return self.filesize\n\n    @property\n    def arrived(self):\n        return self.received\n\n    @property\n    def speed(self):\n        if len(self.speeds) < 3:\n            return 0\n        avg_speed = sum(self.speeds) // 3\n        self.speeds.pop(0)\n        self.speeds.append(self.last_recv_size)\n        return avg_speed\n\n    @property\n    def percent(self):\n        if self.filesize == 0:\n            return 0\n        return (self.received / self.filesize) * 100"
  },
  {
    "Task_id": 347,
    "Instruction": "Task Description: Create a Python function that sends a TCP payload to a specified server using socket programming.\n\nFunction Description: The function establishes a TCP connection to a target server, constructs an HTTP GET request with the provided payload, sends the request, and then closes the connection. This is useful for testing server responses or sending crafted HTTP requests.\n\nInput:\n- target_ip: [str] - The IP address of the target server\n- target_port: [int] - The port number of the target server\n- payload: [str] - The data to be included in the HTTP GET request path\n\nOutput: None (The function sends data but does not return any value)",
    "Canonical_solution": "import socket\n\ndef send_tcp_payload(target_ip, target_port, payload):\n    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    s.connect((target_ip, target_port))\n    \n    buf = (\n        \"GET /\" + payload + \" HTTP/1.1\\r\\n\" + \n        \"Host: \" + target_ip + \n        \"\\r\\n\\r\\n\"\n    )\n    \n    s.send(buf)\n    s.close()",
    "Code_level": "Function-level",
    "FSMID_for_test": 67,
    "right_result": "import socket\n\ndef send_tcp_payload(target_ip, target_port, payload):\n    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    try:\n        sock.connect((target_ip, target_port))\n        request = f\"GET {payload} HTTP/1.1\\r\\nHost: {target_ip}\\r\\n\\r\\n\"\n        sock.sendall(request.encode())\n    finally:\n        sock.close()"
  },
  {
    "Task_id": 350,
    "Instruction": "Task Description: Create a Python function that establishes a TCP connection to a specified host and port, sends a message multiple times, and handles potential connection errors.\n\nFunction Description: The function establishes a TCP connection to a target server using IPv4, sends a specified message multiple times (including one sendto operation), and properly closes the connection. It includes error handling for connection failures and provides status messages about the operation.\n\nInput:\n- host: str - The target server's IP address or hostname\n- port: int - The target port number to connect to\n- message: bytes - The message to be sent to the server (should be in bytes format)\n\nOutput:\n- None (prints status messages to console)\n- Returns None implicitly\n- Side effect: Sends network packets to the specified host and port",
    "Canonical_solution": "import socket\n\ndef dos(host, port, message):\n    ddos = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    try:\n        ddos.connect((host, port))\n        ddos.send(message)\n        ddos.sendto(message, (host, port))\n        ddos.send(message)\n    except socket.error as msg:\n        print(\"|[Connection Failed]         |\")\n    print(\"|[DDoS Attack Engaged]       |\")\n    ddos.close()",
    "Code_level": "Function-level",
    "FSMID_for_test": 67,
    "right_result": "import socket\n\ndef send_tcp_message(host, port, message):\n    try:\n        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:\n            sock.connect((host, port))\n            print(f\"Connected to {host}:{port}\")\n            for _ in range(3):\n                sock.sendall(message)\n                print(\"Message sent\")\n            print(\"Connection closed\")\n    except socket.error as e:\n        print(f\"Connection error: {e}\")"
  },
  {
    "Task_id": 351,
    "Instruction": "Task Description: Create a TCP client class in Python that establishes a connection to a server, sends data with length prefixing, and properly closes the connection.\n\nClass Description: BaseSocketClient is a TCP client implementation that handles socket creation, connection management, and data transmission with length-prefixed messages. It supports both simple and detected encoding modes for data transmission.\n\nAttributes:\n- s: [socket.socket] - The underlying TCP socket object used for communication\n\nMethods:\n- __init__(host: str, port: int) -> None - Initializes the client and establishes a connection to the specified host and port. If host is 'auto', uses the local hostname.\n- send(data: Any) -> None - Sends data to the server after encoding detection, prefixing the message with its length in bytes.\n- send_smpl(data: Any) -> None - Sends data to the server using simple encoding, prefixing the message with its length in bytes.\n- close() -> None - Closes the connection with the server.",
    "Canonical_solution": "import socket\n\nclass BaseSocketClient:\n    def __init__(self, host, port) -> None:\n        if host == 'auto':\n            host = socket.gethostname()\n        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        s.connect((host, port))\n        self.s = s\n    \n    def send(self, data):\n        val = encode_detect(data)\n        self.s.send(bytes('{}\\n'.format(len(val)), 'ascii'))\n        self.s.sendall(val)\n    \n    def send_smpl(self, data):\n        val = encode_smpl(data)\n        self.s.send(bytes('{}\\n'.format(len(val)), 'ascii'))\n        self.s.sendall(val)\n    \n    def close(self):\n        self.s.close()",
    "Code_level": "Class-level",
    "FSMID_for_test": 67,
    "right_result": "import socket\nimport struct\nimport sys\n\nclass BaseSocketClient:\n    def __init__(self, host: str, port: int) -> None:\n        self.s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        if host == 'auto':\n            host = socket.gethostname()\n        self.s.connect((host, port))\n    \n    def send(self, data: Any) -> None:\n        try:\n            encoded_data = str(data).encode('utf-8')\n            length = len(encoded_data)\n            self.s.sendall(struct.pack('!I', length))\n            self.s.sendall(encoded_data)\n        except Exception as e:\n            print(f\"Error sending data: {e}\", file=sys.stderr)\n    \n    def send_smpl(self, data: Any) -> None:\n        try:\n            encoded_data = str(data).encode('utf-8')\n            length = len(encoded_data)\n            self.s.sendall(struct.pack('!I', length))\n            self.s.sendall(encoded_data)\n        except Exception as e:\n            print(f\"Error sending data: {e}\", file=sys.stderr)\n    \n    def close(self) -> None:\n        self.s.close()"
  },
  {
    "Task_id": 353,
    "Instruction": "Task Description: Implement a TCP client function in Python that communicates with a server using sockets. The function should establish a connection, send a message, receive a response, and close the connection.\n\nFunction Description: The function `tcp_client_communication` creates a TCP socket, connects to a specified server, sends a message, receives a response, and then closes the connection. It uses IPv4 for the socket connection.\n\nInput:\n- `host` (str, optional): The IP address or hostname of the server. Defaults to 'localhost'.\n- `port` (int, optional): The port number on which the server is listening. Defaults to 16000.\n- `message` (bytes, optional): The message to be sent to the server. Defaults to b'Hello\\n'.\n\nOutput:\n- `response` (bytes): The data received from the server as a response.",
    "Canonical_solution": "from socket import socket, AF_INET, SOCK_STREAM\n\ndef tcp_client_communication(host='localhost', port=16000, message=b'Hello\\n'):\n    s = socket(AF_INET, SOCK_STREAM)\n    s.connect((host, port))\n    s.send(message)\n    response = s.recv(8192)\n    s.close()\n    return response",
    "Code_level": "Function-level",
    "FSMID_for_test": 67,
    "right_result": "def tcp_client_communication(host='localhost', port=16000, message=b'Hello\\n'):\n    import socket\n    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    client_socket.connect((host, port))\n    client_socket.sendall(message)\n    response = client_socket.recv(1024)\n    client_socket.close()\n    return response"
  },
  {
    "Task_id": 355,
    "Instruction": "Task Description: Implement a TCP client for Remote Console (RCon) protocol communication, which allows sending commands to a game server and receiving responses. The implementation should handle connection establishment, command sending, response receiving, and error handling.\n\nClass Description: RConConnection is a class that manages the connection to an RCon server, handles authentication, and provides methods to send commands and receive responses. It includes error handling for various RCon protocol scenarios.\n\nAttributes:\n- sock: [socket.socket] - The TCP socket object used for communication with the RCon server\n- rid: [int] - The current request ID used for tracking requests and responses\n\nMethods:\n- __init__(target: str, port: int) -> None - Initializes the RCon connection by creating a TCP socket and connecting to the specified target and port\n- send(t: int, payload: str) -> bytes - Sends an RCon packet with the specified type and payload, waits for and returns the response data\n- login(password: str) -> None - Authenticates with the RCon server using the provided password (uses send with type 3)\n- command(com: str, args: str) -> None - Sends a command to the RCon server (uses send with type 2)\n- close() -> None - Closes the connection to the RCon server",
    "Canonical_solution": "import socket\nimport struct\nimport select\n\nclass RConException(Exception):\n    def __init__(self, request_id, reason):\n        self.request_id = request_id\n        self.reason = reason\n\n    def __str__(self):\n        return (\"Failed RCon request with request ID %d, reason %s\" %\n                (self.request_id, self.reason))\n\nclass RConConnection:\n    def __init__(self, target, port):\n        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.sock.connect((target, port))\n        self.rid = 0\n\n    def send(self, t, payload):\n        self.rid = self.rid + 1\n        pld_enc = payload.encode(\"utf-8\")\n        header = struct.pack(\"<iii\",\n                             len(pld_enc) + 4 + 4 + 2,  # rid, type and padding\n                             self.rid, t)\n        data = header + pld_enc + b'\\x00\\x00'\n        self.sock.send(data)\n\n        toread = select.select([self.sock], [], [], 30)\n\n        if not toread:\n            raise RConException(self.rid, \"Request timed out.\")\n\n        try:\n            res_len, res_id, res_type = \\\n                struct.unpack(\"<iii\", self.sock.recv(12, socket.MSG_WAITALL))\n            if res_len < 0:\n                raise Exception(\"Response length is {}.\".format(res_len))\n\n        except Exception as e:\n            raise RConException(self.rid,\n                                \"RCon protocol error. Are you sure you're \"\n                                \"talking to the RCon port? Error: %s\" % e)\n        res_data = self.sock.recv(res_len - 4 - 4)\n        res_data = res_data[:-2]\n\n        if res_id == -1:\n            if t == 3:\n                raise RConException(self.rid, \"Login failed.\")\n            else:\n                raise RConException(self.rid,\n                                    \"Request failed due to invalid login.\")\n        elif res_id != self.rid:\n            raise RConException(self.rid, \"Received unexpected response \"\n                                \"number: %d\" % res_id)\n        return res_data\n\n    def login(self, password):\n        self.send(3, password)\n\n    def command(self, com, args):\n        self.send(2, com + \" \" + args)\n\n    def close(self):\n        self.sock.close()",
    "Code_level": "Class-level",
    "FSMID_for_test": 67,
    "right_result": "import socket\nimport struct\n\nclass RConConnection:\n    def __init__(self, target: str, port: int) -> None:\n        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.sock.connect((target, port))\n        self.rid = 0\n\n    def send(self, t: int, payload: str) -> bytes:\n        self.rid += 1\n        packet = struct.pack('<I', self.rid) + struct.pack('<B', t) + payload.encode('utf-8') + b'\\x00'\n        self.sock.sendall(packet)\n        response = b''\n        while True:\n            data = self.sock.recv(4096)\n            if not data:\n                raise ConnectionError(\"Connection closed by server\")\n            response += data\n            if response.endswith(b'\\x00'):\n                return response[:-1]\n\n    def login(self, password: str) -> None:\n        payload = password.encode('utf-8') + b'\\x00'\n        response = self.send(3, payload.decode('utf-8'))\n        if not response.startswith(b'OK'):\n            raise ValueError(f\"Login failed: {response.decode('utf-8')}\")\n\n    def command(self, com: str, args: str) -> None:\n        payload = f\"{com} {args}\".encode('utf-8') + b'\\x00'\n        response = self.send(2, payload.decode('utf-8'))\n        print(response.decode('utf-8'))\n\n    def close(self) -> None:\n        self.sock.close()"
  },
  {
    "Task_id": 358,
    "Instruction": "Task Description: Create a Python function that establishes a TCP client connection to a server, sends a JSON-formatted command with arguments, receives the server's response, and then closes the connection.\n\nFunction Description: The function `connect_client` creates a TCP socket, connects to a specified server, sends a command with arguments in JSON format, waits for and prints the server's response, and finally closes the socket connection.\n\nInput:\n- `machine` (str): The IP address or hostname of the target server.\n- `port` (int): The port number on which the server is listening.\n- `blendpath` (str): A file path or identifier to be included in the command arguments.\n- `obj_num` (int): A numerical argument to be included in the command arguments.\n\nOutput:\n- The function does not return any value but prints the server's response to the console.",
    "Canonical_solution": "import socket, json\n\ndef connect_client(machine, port, blendpath, obj_num):\n    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    sock.connect((machine, port))\n    args = [blendpath, obj_num]\n    command = json.dumps({'call':1, 'command':1, 'args':args})\n    sock.send((command).encode())\n    response_data = sock.recv(1024)\n    print(response_data.decode())\n    sock.close()",
    "Code_level": "Function-level",
    "FSMID_for_test": 67,
    "right_result": "import socket\nimport json\n\ndef connect_client(machine, port, blendpath, obj_num):\n    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    client_socket.connect((machine, port))\n    command = {\n        \"blendpath\": blendpath,\n        \"obj_num\": obj_num\n    }\n    client_socket.send(json.dumps(command).encode())\n    response = client_socket.recv(1024).decode()\n    print(response)\n    client_socket.close()"
  },
  {
    "Task_id": 359,
    "Instruction": "Task Description: Create a threaded TCP client socket class that handles bidirectional communication with a remote server, managing both sending and receiving data through queues while running in a separate thread.\n\nClass Description: ThreadedTCPClientSocket is a threading-based TCP client that establishes a connection to a specified server, sends data from a queue to the server, and puts received data into another queue. It uses non-blocking operations with select() for efficient I/O handling.\n\nAttributes:\n- ip: str - The IP address of the target server\n- port: int - The port number of the target server\n- listener_q: queue.Queue - Queue for storing received data from the server\n- remote_q: queue.Queue - Queue for storing data to be sent to the server\n- config: dict - Configuration parameters for the client\n- logger: logging.Logger - Logger object for debugging and error messages\n- sock: socket.socket - The TCP socket object for communication\n\nMethods:\n- __init__(ip, port, listener_q, remote_q, config, log) -> None - Initializes the client with connection parameters and queues\n- connect() -> int - Establishes connection to the server and returns the local port number (None if failed)\n- run() -> None - Main thread loop handling send/receive operations using select()",
    "Canonical_solution": "import socket\nimport threading\nimport select\nimport queue\nimport logging\n\nBUF_SZ = 1024\n\nclass ThreadedTCPClientSocket(threading.Thread):\n    def __init__(self, ip, port, listener_q, remote_q, config, log):\n        super(ThreadedTCPClientSocket, self).__init__()\n        self.ip = ip\n        self.port = int(port)\n        self.listener_q = listener_q\n        self.remote_q = remote_q\n        self.config = config\n        self.logger = log\n        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\n    def connect(self):\n        try:\n            self.sock.connect((self.ip, self.port))\n            new_sport = self.sock.getsockname()[1]\n            return new_sport\n        except Exception as e:\n            self.logger.debug('Listener socket exception while attempting connection %s' % str(e))\n        return None\n\n    def run(self):\n        try:\n            while True:\n                readable, writable, exceptional = select.select([self.sock], [], [], .001)\n                if not self.remote_q.empty():\n                    data = self.remote_q.get()\n                    self.sock.send(data)\n                if readable:\n                    data = self.sock.recv(BUF_SZ)\n                    if data:\n                        self.listener_q.put(data)\n                    else:\n                        self.sock.close()\n                        sys.exit(1)\n        except Exception as e:\n            self.logger.debug('Listener socket exception %s' % str(e))",
    "Code_level": "Class-level",
    "FSMID_for_test": 67,
    "right_result": "import socket\nimport select\nimport queue\nimport threading\nimport logging\n\nclass ThreadedTCPClientSocket:\n    def __init__(self, ip, port, listener_q, remote_q, config, log):\n        self.ip = ip\n        self.port = port\n        self.listener_q = listener_q\n        self.remote_q = remote_q\n        self.config = config\n        self.logger = log\n        self.sock = None\n\n    def connect(self):\n        try:\n            self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n            self.sock.setblocking(False)\n            self.sock.connect((self.ip, self.port))\n            return self.sock.getsockname()[1]\n        except Exception as e:\n            self.logger.error(f\"Connection failed: {e}\")\n            return None\n\n    def run(self):\n        while True:\n            try:\n                if not self.sock:\n                    self.logger.error(\"Socket not connected\")\n                    break\n                readable, writable, exceptional = select.select([self.sock], [], [], 0.1)\n                if exceptional:\n                    self.logger.error(\"Exceptional condition on socket\")\n                    break\n                if readable:\n                    data = self.sock.recv(4096)\n                    if data:\n                        self.listener_q.put(data)\n                    else:\n                        self.logger.info(\"Server closed connection\")\n                        break\n                if not self.remote_q.empty():\n                    data = self.remote_q.get()\n                    self.sock.sendall(data)\n            except Exception as e:\n                self.logger.error(f\"Error in run loop: {e}\")\n                break\n        self.sock.close()"
  },
  {
    "Task_id": 36,
    "Instruction": "Task Description: Create a Python function that performs HTTP requests using the httpx library to fetch and process content from a given URL, with proper error handling and logging.\n\nFunction Description: The function should make a synchronous HTTP GET request to the specified URL using custom headers, handle potential exceptions, decode the response content using detected encoding, and return the extracted data along with a status code. If the request fails, it should log the error and return an error code with an empty dictionary.\n\nInput:\n- url: str | Path - The target URL to fetch content from\n- logger: logging.Logger - A logger instance for error logging\n\nOutput:\n- Tuple[int, dict] - A tuple containing:\n  - Status code (negative for errors, positive for HTTP status codes)\n  - Dictionary containing extracted data (empty if an error occurs)",
    "Canonical_solution": "import httpx\n\nheader = {\n    'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/605.1.15 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/604.1 Edg/112.0.100.0'\n}\n\ndef simple_crawler(url: str | Path, logger) -> (int, dict):\n    try:\n        with httpx.Client() as client:\n            response = client.get(url, headers=header, timeout=30)\n            rawdata = response.content\n            encoding = chardet.detect(rawdata)['encoding']\n            text = rawdata.decode(encoding)\n        result = extractor.extract(text)\n    except Exception as e:\n        logger.warning(f\"cannot get content from {url}\\n{e}\")\n        return -7, {}",
    "Code_level": "Function-level",
    "FSMID_for_test": 58,
    "right_result": "import httpx\nimport logging\nfrom typing import Tuple, Dict\n\ndef fetch_content(url: str | Path, logger: logging.Logger) -> Tuple[int, dict]:\n    try:\n        with httpx.Client() as client:\n            response = client.get(str(url), timeout=10.0)\n            response.raise_for_status()\n            encoding = response.encoding\n            data = response.text\n            return response.status_code, {\"content\": data, \"encoding\": encoding}\n    except httpx.RequestError as e:\n        logger.error(f\"Request error occurred: {e}\")\n        return -1, {}\n    except httpx.HTTPStatusError as e:\n        logger.error(f\"HTTP error occurred: {e}\")\n        return -2, {}\n    except Exception as e:\n        logger.error(f\"Unexpected error occurred: {e}\")\n        return -3, {}"
  },
  {
    "Task_id": 360,
    "Instruction": "Task Description: Create a Python function that establishes a TCP connection to a server, receives initial data from the server, sends a buffer with a specific prefix, and handles connection errors gracefully.\n\nFunction Description: The function `send_buffer_to_server` creates a TCP socket, connects to a specified server, receives initial data, sends a buffer prefixed with \"GMON /\", and ensures proper connection closure. It includes error handling for connection issues.\n\nInput:\n- host: [str] - The IP address or hostname of the target server\n- port: [int] - The port number on which the server is listening\n- buffer: [str] - The data buffer to be sent to the server (will be prefixed with \"GMON /\")\n\nOutput:\n- None (prints status messages to console: received data, error notifications, and confirmation of buffer sending)",
    "Canonical_solution": "import socket\n\ndef send_buffer_to_server(host, port, buffer):\n    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    try:\n        s.connect((host, port))\n        data = s.recv(1024)\n        print \"\\n\" + data\n        s.send(\"GMON /\" + buffer + '\\r\\n')\n    except:\n        print \"Check your debugger\"\n    finally:\n        s.close()\n        print \"Buffer Sent!\"",
    "Code_level": "Function-level",
    "FSMID_for_test": 67,
    "right_result": "import socket\n\ndef send_buffer_to_server(host, port, buffer):\n    try:\n        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        sock.settimeout(10)\n        sock.connect((host, port))\n        print(\"Connected to server\")\n        initial_data = sock.recv(1024)\n        print(f\"Received initial data: {initial_data.decode()}\")\n        prefixed_buffer = \"GMON /\" + buffer\n        sock.sendall(prefixed_buffer.encode())\n        print(\"Buffer sent successfully\")\n    except socket.error as e:\n        print(f\"Connection error: {e}\")\n    finally:\n        try:\n            sock.close()\n        except:\n            pass"
  },
  {
    "Task_id": 361,
    "Instruction": "Task Description: Create a Python function that sends a TCP payload to a specified target server using socket programming.\n\nFunction Description: The function establishes a TCP connection to a target server using IPv4, constructs an HTTP GET request with the provided payload, sends the request to the server, and then closes the connection. This is useful for testing TCP-based services or sending crafted HTTP requests.\n\nInput:\n- target_ip: [str] - The IP address of the target server to connect to\n- target_port: [int] - The port number on the target server to connect to\n- payload: [str] - The data to be included in the HTTP GET request path\n\nOutput: None (The function performs an action but doesn't return any value)",
    "Canonical_solution": "import socket\n\ndef send_tcp_payload(target_ip, target_port, payload):\n    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    s.connect((target_ip, target_port))\n    \n    buf = (\n        \"GET /\" + payload + \" HTTP/1.1\\r\\n\" + \n        \"Host: \" + target_ip + \n        \"\\r\\n\\r\\n\"\n    )\n    \n    s.send(buf)\n    s.close()",
    "Code_level": "Function-level",
    "FSMID_for_test": 67,
    "right_result": "import socket\n\ndef send_tcp_payload(target_ip, target_port, payload):\n    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    try:\n        sock.connect((target_ip, target_port))\n        request = f\"GET /{payload} HTTP/1.1\\r\\nHost: {target_ip}\\r\\n\\r\\n\"\n        sock.sendall(request.encode())\n    finally:\n        sock.close()"
  },
  {
    "Task_id": 362,
    "Instruction": "Task Description: Create a TCP client class for establishing and managing connections to a server, sending requests, and receiving responses using HDLC framing protocol.\n\nClass Description: TcpConnector is a class that handles TCP communication with a server using IPv4. It manages socket connection, sends requests with HDLC encapsulation, and continuously reads incoming data with HDLC decapsulation.\n\nAttributes:\n- socket: [socket.socket] - TCP socket object for communication\n- received_first_packet: [bool] - Flag indicating if first packet was received\n- packet_buffer: [bytes] - Buffer for storing incoming data\n- TRAILER_CHAR: [bytes] - Class constant for HDLC frame delimiter (assumed to be defined elsewhere in class)\n\nMethods:\n- __init__(address: str, port: int) -> None - Initializes TCP connection to specified address and port\n- send_request(packet_type: int, packet_payload: bytes) -> None - Sends HDLC-encapsulated request to server\n- read_loop() -> None - Continuously reads and processes incoming data using HDLC framing\n- __del__() -> None - Cleans up by closing socket connection\n- hdlc_encapsulate(data: bytes) -> bytes - (Assumed method) HDLC encapsulation implementation\n- hdlc_decapsulate(payload: bytes) -> bytes - (Assumed method) HDLC decapsulation implementation\n- dispatch_received_diag_packet(unframed_message: bytes) -> None - (Assumed method) Handles processed packets",
    "Canonical_solution": "from socket import socket, AF_INET, SOCK_STREAM\n\nclass TcpConnector:\n    def __init__(self, address: str, port: int):\n        self.socket = socket(AF_INET, SOCK_STREAM)\n        try:\n            self.socket.connect((address, port))\n        except Exception:\n            raise ConnectionError('Could not communicate with the DIAG device through TCP')\n        \n        self.received_first_packet = False\n        self.packet_buffer = b''\n\n    def send_request(self, packet_type: int, packet_payload: bytes):\n        raw_payload = self.hdlc_encapsulate(bytes([packet_type]) + packet_payload)\n        self.socket.send(raw_payload)\n\n    def read_loop(self):\n        while True:\n            while self.TRAILER_CHAR not in self.packet_buffer:\n                socket_read = self.socket.recv(1024 * 1024 * 10)\n                self.packet_buffer += socket_read\n\n            while self.TRAILER_CHAR in self.packet_buffer:\n                raw_payload, self.packet_buffer = self.packet_buffer.split(self.TRAILER_CHAR, 1)\n\n                try:\n                    unframed_message = self.hdlc_decapsulate(\n                        payload=raw_payload + self.TRAILER_CHAR\n                    )\n                except self.InvalidFrameError:\n                    continue\n                finally:\n                    self.received_first_packet = True\n\n                self.dispatch_received_diag_packet(unframed_message)\n\n    def __del__(self):\n        self.socket.close()",
    "Code_level": "Class-level",
    "FSMID_for_test": 67,
    "right_result": "def TcpConnector(address, port):\n    import socket\n    self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    self.socket.connect((address, port))\n    self.received_first_packet = False\n    self.packet_buffer = b''\n\ndef send_request(self, packet_type, packet_payload):\n    encapsulated = self.hdlc_encapsulate(packet_type, packet_payload)\n    self.socket.sendall(encapsulated)\n\ndef read_loop(self):\n    while True:\n        data = self.socket.recv(1024)\n        if not data:\n            break\n        self.packet_buffer += data\n        while True:\n            if self.packet_buffer.startswith(self.TRAILER_CHAR):\n                frame_length = len(self.packet_buffer) - len(self.TRAILER_CHAR)\n                frame_data = self.packet_buffer[:frame_length]\n                self.packet_buffer = self.packet_buffer[frame_length + len(self.TRAILER_CHAR):]\n                if self.received_first_packet:\n                    self.dispatch_received_diag_packet(frame_data)\n                else:\n                    self.received_first_packet = True\n                    self.dispatch_received_diag_packet(frame_data)\n            else:\n                break\n\ndef __del__(self):\n    self.socket.close()\n\ndef hdlc_encapsulate(self, data_type, payload):\n    flag_byte = b'\\x7e'\n    address_byte = b'\\x03'\n    control_byte = bytes([data_type])\n    frame = b''.join([flag_byte, address_byte, control_byte, payload, flag_byte])\n    return frame\n\ndef hdlc_decapsulate(self, payload):\n    return payload\n\ndef dispatch_received_diag_packet(self, unframed_message):\n    pass"
  },
  {
    "Task_id": 365,
    "Instruction": "Task Description: Create a Python function that implements a TCP client for basic communication with a server using sockets. The function should establish a connection, send a message, receive a response, and close the connection.\n\nFunction Description: The function `tcp_client_communication` creates a TCP socket, connects to a specified server, sends a message, receives a response, and then closes the connection. It handles IPv4 addresses and uses a stream-oriented connection (TCP).\n\nInput:\n- `host` (str, optional): The IP address or hostname of the server. Defaults to 'localhost'.\n- `port` (int, optional): The port number on which the server is listening. Defaults to 20000.\n- `message` (bytes, optional): The message to send to the server. Defaults to b'Hello\\n'.\n\nOutput:\n- `resp` (bytes): The response received from the server.",
    "Canonical_solution": "from socket import socket, AF_INET, SOCK_STREAM\n\ndef tcp_client_communication(host='localhost', port=20000, message=b'Hello\\n'):\n    s = socket(AF_INET, SOCK_STREAM)\n    s.connect((host, port))\n    s.send(message)\n    resp = s.recv(8192)\n    s.close()\n    return resp",
    "Code_level": "Function-level",
    "FSMID_for_test": 67,
    "right_result": "def tcp_client_communication(host='localhost', port=20000, message=b'Hello\\n'):\n    import socket\n    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    try:\n        sock.connect((host, port))\n        sock.sendall(message)\n        resp = sock.recv(1024)\n    finally:\n        sock.close()\n    return resp"
  },
  {
    "Task_id": 366,
    "Instruction": "Task Description: Create a Python class that implements a threaded TCP client for sending HTTP requests to a target server, with configurable request methods and target sites.\n\nClass Description: MyThread is a Thread subclass designed to repeatedly send HTTP requests to a specified web server. It supports different HTTP methods and includes functionality to terminate the thread. The class handles socket creation, connection establishment, request sending, and connection cleanup.\n\nAttributes:\n- method: str - The HTTP method to use for requests (e.g., GET, POST)\n- site: str - The target website domain to connect to\n- kill_received: bool - Flag to control thread termination\n\nMethods:\n- __init__(site: str, dos_type: str) -> None - Initializes the thread with target site and HTTP method\n- run() -> None - Main thread execution method that handles the TCP connection and request sending loop\n- (Inherited from Thread) start() -> None - Begins thread execution\n- (Inherited from Thread) join() -> None - Waits for thread to complete",
    "Canonical_solution": "import sys\nimport socket\nimport time\nfrom threading import Thread\n\nclass MyThread(Thread):\n    def __init__(self, site, dos_type):\n        Thread.__init__(self)\n        self.method = dos_type\n        self.site = site\n        self.kill_received = False\n\n    def run(self):\n        while not self.kill_received:\n            server = socket.gethostbyname(self.site)\n            post = 'x' * 9999\n            file = '/'\n\n            request = '%s /%s HTTP/1.1\\r\\n' % (self.method.upper(), file)\n            request += 'Host: %s\\r\\n' % (self.site)\n            request += 'User-Agent: Mozilla/5.0 (Windows; U;Windows NT 6.1; en-US; rv:1.9.2.12) Gecko/20101026Firefox/3.6.12\\r\\n'\n            request += 'Accept:text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\\r\\n'\n            request += 'Accept-Language: en-us,en;q=0.5\\r\\n'\n            request += 'Accept-Encoding: gzip,deflate\\r\\n'\n            request += 'Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7\\r\\n'\n            request += 'Keep-Alive: 9000\\r\\n'\n            request += 'Connection: close\\r\\n'\n            request += 'Content-Type: application/x-www-form-urlencoded\\r\\n'\n            request += 'Content-length: %s\\r\\n\\r\\n' % (len(post))\n\n            newrequest = '%s\\r\\n' % (post)\n            newrequest += '\\r\\n'\n\n            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\n            try:\n                s.connect((server, 80))\n                s.send(request)\n\n                for c in newrequest:\n                    sys.stdout.write(s.send(c).__str__())\n                    time.sleep(60)\n                s.close()\n            except:\n                print \"Target Down?\"",
    "Code_level": "Class-level",
    "FSMID_for_test": 67,
    "right_result": "import socket\nimport threading\nimport time\n\nclass MyThread(threading.Thread):\n    def __init__(self, site: str, dos_type: str) -> None:\n        super().__init__()\n        self.method = dos_type\n        self.site = site\n        self.kill_received = False\n\n    def run(self) -> None:\n        while not self.kill_received:\n            try:\n                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n                sock.settimeout(5)\n                target_ip = socket.gethostbyname(self.site)\n                sock.connect((target_ip, 80))\n                request = f\"{self.method} / HTTP/1.1\\r\\nHost: {self.site}\\r\\nConnection: close\\r\\n\\r\\n\"\n                sock.sendall(request.encode())\n                sock.close()\n            except Exception as e:\n                pass\n            time.sleep(0.1)"
  },
  {
    "Task_id": 368,
    "Instruction": "Task Description: Create a function to check for unauthorized access to an Rsync service on a given IP address using TCP socket communication.\n\nFunction Description: The function attempts to connect to an Rsync service (port 873) on the specified IP address, sends a specific payload to initiate communication, and checks the response for indications of unauthorized access. If the service responds with module information without proper authentication, it indicates potential unauthorized access.\n\nInput:\n- ip: [str] - The target IP address to check for Rsync unauthorized access\n\nOutput:\n- [str] - Returns '873 Rsync Unauthorized Access' if unauthorized access is detected, otherwise returns None (implicitly through exception handling or empty response)",
    "Canonical_solution": "import socket\n\ntimeout = 3\n\ndef check_rsync_unauthorized_access(ip):\n    try:\n        socket.setdefaulttimeout(1.5)\n        payload = b\"\\x40\\x52\\x53\\x59\\x4e\\x43\\x44\\x3a\\x20\\x33\\x31\\x2e\\x30\\x0a\"\n        socket.setdefaulttimeout(timeout)\n        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        server_address = (ip, 873)\n        sock.connect(server_address)\n        sock.sendall(payload)\n        initinfo = sock.recv(400)\n        if b\"RSYNCD\" in initinfo:\n            sock.sendall(b\"\\x0a\")\n        modulelist = sock.recv(200)\n        sock.close()\n        if len(modulelist) > 0:\n            return '873 Rsync Unauthorized Access'\n    except Exception as e:\n        pass",
    "Code_level": "Function-level",
    "FSMID_for_test": 67,
    "right_result": "import socket\n\ndef check_rsync_unauthorized(ip):\n    try:\n        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        sock.settimeout(5)\n        result = sock.connect_ex((ip, 873))\n        if result == 0:\n            sock.send(b\"MODULE\\n\")\n            response = sock.recv(1024).decode()\n            if \"module\" in response.lower() and \"auth\" not in response.lower():\n                return '873 Rsync Unauthorized Access'\n        sock.close()\n    except Exception as e:\n        pass\n    return None"
  },
  {
    "Task_id": 37,
    "Instruction": "Task Description: Implement a TokenManager class that handles the generation and management of various TikTok authentication tokens (msToken, ttwid, odin_tt) through HTTP requests using the httpx library.\n\nClass Description: The TokenManager class is responsible for managing TikTok authentication tokens by interacting with TikTok's API endpoints. It reads configuration from a YAML file, handles token generation (both real and fallback tokens), and manages HTTP requests with retries and proxy support.\n\nAttributes:\n- token_conf: [dict] - Configuration for msToken generation including URL, headers, and payload data\n- ttwid_conf: [dict] - Configuration for ttwid generation including URL and request data\n- odin_tt_conf: [dict] - Configuration for odin_tt generation including URL\n- proxies: [dict] - Proxy configuration for HTTP and HTTPS connections\n\nMethods:\n- __init__() -> [None] - Initializes the TokenManager by loading configuration from config.yaml\n- gen_real_msToken() -> [str] - Generates a real msToken by making a POST request to TikTok's API endpoint\n- gen_false_msToken() -> [str] - Generates a fallback msToken with random characters when real token generation fails\n- gen_ttwid(cookie: str) -> [str] - Generates a ttwid by making a POST request with the provided cookie\n- gen_odin_tt() -> [str] - Generates an odin_tt by making a GET request to TikTok's endpoint",
    "Canonical_solution": "import os\nimport json\nimport yaml\nimport httpx\nimport asyncio\nfrom typing import Union\n\nclass TokenManager:\n    def __init__(self):\n        path = os.path.abspath(os.path.dirname(__file__))\n        with open(f\"{path}/config.yaml\", \"r\", encoding=\"utf-8\") as f:\n            config = yaml.safe_load(f)\n        \n        tiktok_manager = config.get(\"TokenManager\").get(\"tiktok\")\n        self.token_conf = tiktok_manager.get(\"msToken\", None)\n        self.ttwid_conf = tiktok_manager.get(\"ttwid\", None)\n        self.odin_tt_conf = tiktok_manager.get(\"odin_tt\", None)\n        proxies_conf = tiktok_manager.get(\"proxies\", None)\n        self.proxies = {\n            \"http://\": proxies_conf.get(\"http\", None),\n            \"https://\": proxies_conf.get(\"https\", None),\n        }\n\n    def gen_real_msToken(self) -> str:\n        payload = json.dumps({\n            \"magic\": self.token_conf[\"magic\"],\n            \"version\": self.token_conf[\"version\"],\n            \"dataType\": self.token_conf[\"dataType\"],\n            \"strData\": self.token_conf[\"strData\"],\n            \"tspFromClient\": get_timestamp(),\n        })\n\n        headers = {\n            \"User-Agent\": self.token_conf[\"User-Agent\"],\n            \"Content-Type\": \"application/json\",\n        }\n\n        transport = httpx.HTTPTransport(retries=5)\n        with httpx.Client(transport=transport, proxies=self.proxies) as client:\n            try:\n                response = client.post(\n                    self.token_conf[\"url\"], headers=headers, content=payload\n                )\n                response.raise_for_status()\n                msToken = str(httpx.Cookies(response.cookies).get(\"msToken\"))\n                return msToken\n            except Exception as e:\n                logger.error(f\"\u751f\u6210TikTok msToken API\u9519\u8bef\uff1a{e}\")\n                return self.gen_false_msToken()\n\n    def gen_false_msToken(self) -> str:\n        return gen_random_str(146) + \"==\"\n\n    def gen_ttwid(self, cookie: str) -> str:\n        transport = httpx.HTTPTransport(retries=5)\n        with httpx.Client(transport=transport, proxies=self.proxies) as client:\n            try:\n                response = client.post(\n                    self.ttwid_conf[\"url\"],\n                    content=self.ttwid_conf[\"data\"],\n                    headers={\n                        \"Cookie\": cookie,\n                        \"Content-Type\": \"text/plain\",\n                    },\n                )\n                response.raise_for_status()\n                ttwid = httpx.Cookies(response.cookies).get(\"ttwid\")\n                if ttwid is None:\n                    raise APIResponseError(\"ttwid: \u68c0\u67e5\u6ca1\u6709\u901a\u8fc7, \u8bf7\u66f4\u65b0\u914d\u7f6e\u6587\u4ef6\u4e2d\u7684ttwid\")\n                return ttwid\n            except httpx.RequestError as exc:\n                raise APIConnectionError(f\"\u8bf7\u6c42\u7aef\u70b9\u5931\u8d25\uff0c\u8bf7\u68c0\u67e5\u5f53\u524d\u7f51\u7edc\u73af\u5883\u3002\u94fe\u63a5\uff1a{self.ttwid_conf['url']}\uff0c\u4ee3\u7406\uff1a{self.proxies}\uff0c\u5f02\u5e38\u7c7b\u540d\uff1a{self.__class__.__name__}\uff0c\u5f02\u5e38\u8be6\u7ec6\u4fe1\u606f\uff1a{exc}\")\n\n    def gen_odin_tt(self) -> str:\n        transport = httpx.HTTPTransport(retries=5)\n        with httpx.Client(transport=transport, proxies=self.proxies) as client:\n            try:\n                response = client.get(self.odin_tt_conf[\"url\"])\n                response.raise_for_status()\n                odin_tt = httpx.Cookies(response.cookies).get(\"odin_tt\")\n                if odin_tt is None:\n                    raise APIResponseError(f\"{'odin_tt'} \u5185\u5bb9\u4e0d\u7b26\u5408\u8981\u6c42\")\n                return odin_tt\n            except httpx.RequestError as exc:\n                raise APIConnectionError(f\"\u8bf7\u6c42\u7aef\u70b9\u5931\u8d25\uff0c\u8bf7\u68c0\u67e5\u5f53\u524d\u7f51\u7edc\u73af\u5883\u3002\u94fe\u63a5\uff1a{self.odin_tt_conf['url']}\uff0c\u4ee3\u7406\uff1a{self.proxies}\uff0c\u5f02\u5e38\u7c7b\u540d\uff1a{self.__class__.__name__}\uff0c\u5f02\u5e38\u8be6\u7ec6\u4fe1\u606f\uff1a{exc}\")",
    "Code_level": "Class-level",
    "FSMID_for_test": 58,
    "right_result": "import httpx\nimport yaml\nimport os\nimport random\nimport string\nfrom typing import Dict, Any\n\nclass TokenManager:\n    def __init__(self):\n        config_path = os.path.join(os.path.dirname(__file__), 'config.yaml')\n        with open(config_path, 'r') as file:\n            self.config = yaml.safe_load(file)\n        self.token_conf = self.config.get('token_conf', {})\n        self.ttwid_conf = self.config.get('ttwid_conf', {})\n        self.odin_tt_conf = self.config.get('odin_tt_conf', {})\n        self.proxies = self.config.get('proxies', {})\n\n    def gen_real_msToken(self) -> str:\n        url = self.token_conf.get('url')\n        headers = self.token_conf.get('headers', {})\n        payload = self.token_conf.get('payload', {})\n        try:\n            with httpx.Client(proxies=self.proxies) as client:\n                response = client.post(url, headers=headers, json=payload)\n                response.raise_for_status()\n                return response.text\n        except httpx.RequestError as e:\n            raise Exception(f\"Request failed: {e}\")\n\n    def gen_false_msToken(self) -> str:\n        length = self.token_conf.get('fallback_length', 32)\n        characters = string.ascii_letters + string.digits\n        return ''.join(random.choice(characters) for _ in range(length))\n\n    def gen_ttwid(self, cookie: str) -> str:\n        url = self.ttwid_conf.get('url')\n        data = self.ttwid_conf.get('data', {})\n        headers = {\n            'Cookie': cookie,\n            'User-Agent': 'Mozilla/5.0'\n        }\n        try:\n            with httpx.Client(proxies=self.proxies) as client:\n                response = client.post(url, headers=headers, data=data)\n                response.raise_for_status()\n                return response.text\n        except httpx.RequestError as e:\n            raise Exception(f\"Request failed: {e}\")\n\n    def gen_odin_tt(self) -> str:\n        url = self.odin_tt_conf.get('url')\n        headers = self.odin_tt_conf.get('headers', {})\n        try:\n            with httpx.Client(proxies=self.proxies) as client:\n                response = client.get(url, headers=headers)\n                response.raise_for_status()\n                return response.text\n        except httpx.RequestError as e:\n            raise Exception(f\"Request failed: {e}\")"
  },
  {
    "Task_id": 370,
    "Instruction": "Task Description: Create a TCP client class for interacting with an OpenVPN server, capable of establishing connections, sending commands, receiving data, and closing connections.\n\nClass Description: The OpenVPNTCPClient class provides functionality to connect to an OpenVPN server via TCP, send commands, receive responses, and manage the connection lifecycle.\n\nAttributes:\n- host: str - The IP address or hostname of the OpenVPN server\n- port: int - The port number on which the OpenVPN server is listening\n- timeout: int - Connection and operation timeout in seconds (default: 10)\n- socket: socket.socket - The TCP socket object used for communication\n\nMethods:\n- connect() -> bool - Establishes a TCP connection to the OpenVPN server. Returns True on success, False on failure.\n- send_command(command: str) -> bool - Sends a command to the connected OpenVPN server. Returns True on success, False on failure.\n- receive_data() -> list[bytes] | None - Receives data from the server until an 'END' marker is encountered. Returns list of received lines or None on error.\n- close() -> bool - Closes the TCP connection. Returns True on success, False on failure.\n- get_status() -> list[bytes] | None - Executes a complete status request cycle (connect, send 'status' command, receive response, close). Returns received data or None on error.",
    "Canonical_solution": "import socket\n\nclass OpenVPNTCPClient:\n    def __init__(self, host, port, timeout=10):\n        self.host = host\n        self.port = port\n        self.timeout = timeout\n        self.socket = None\n\n    def connect(self):\n        try:\n            self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n            self.socket.settimeout(int(self.timeout))\n            self.socket.connect((self.host, self.port))\n            return True\n        except socket.error as e:\n            return False\n\n    def send_command(self, command):\n        try:\n            self.socket.send(command + '\\r\\n')\n            return True\n        except socket.error as e:\n            return False\n\n    def receive_data(self):\n        try:\n            fd = self.socket.makefile('rb')\n            lines = []\n            while True:\n                line = fd.readline()\n                lines.append(line)\n                if line.strip() == 'END':\n                    break\n            return lines\n        except socket.error as e:\n            return None\n\n    def close(self):\n        try:\n            if self.socket:\n                self.socket.close()\n            return True\n        except socket.error:\n            return False\n\n    def get_status(self):\n        if not self.connect():\n            return None\n        \n        if not self.send_command('status'):\n            self.close()\n            return None\n        \n        data = self.receive_data()\n        self.close()\n        \n        return data",
    "Code_level": "Class-level",
    "FSMID_for_test": 67,
    "right_result": "import socket\n\nclass OpenVPNTCPClient:\n    def __init__(self, host: str, port: int, timeout: int = 10):\n        self.host = host\n        self.port = port\n        self.timeout = timeout\n        self.socket = None\n\n    def connect(self) -> bool:\n        try:\n            self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n            self.socket.settimeout(self.timeout)\n            self.socket.connect((self.host, self.port))\n            return True\n        except Exception as e:\n            print(f\"Connection failed: {e}\")\n            return False\n\n    def send_command(self, command: str) -> bool:\n        if not self.socket:\n            return False\n        try:\n            self.socket.sendall(command.encode('utf-8') + b'\\n')\n            return True\n        except Exception as e:\n            print(f\"Send command failed: {e}\")\n            return False\n\n    def receive_data(self) -> list[bytes] | None:\n        if not self.socket:\n            return None\n        try:\n            data = []\n            while True:\n                chunk = self.socket.recv(4096)\n                if not chunk:\n                    break\n                data.append(chunk)\n                if chunk.endswith(b'END'):\n                    break\n            return data\n        except Exception as e:\n            print(f\"Receive data failed: {e}\")\n            return None\n\n    def close(self) -> bool:\n        if not self.socket:\n            return False\n        try:\n            self.socket.close()\n            self.socket = None\n            return True\n        except Exception as e:\n            print(f\"Close failed: {e}\")\n            return False\n\n    def get_status(self) -> list[bytes] | None:\n        if self.connect():\n            if self.send_command(\"status\"):\n                data = self.receive_data()\n                if data:\n                    self.close()\n                    return data\n        self.close()\n        return None"
  },
  {
    "Task_id": 372,
    "Instruction": "Task Description: Implement a TCP client function that communicates with a server to send specific control codes derived from a secret key, with options to start or stop port reuse.\n\nFunction Description: The function establishes a TCP connection to a specified server, generates two MD5 checkcodes from a secret, combines portions of them to create a final checkcode, extracts control codes from this checkcode, and sends either a start or stop command based on the action parameter. It handles connection errors gracefully and closes the connection after sending the command.\n\nInput:\n- ip: [str] - The IP address of the target server\n- port: [str/int] - The port number of the target server\n- action: [str] - Either \"start\" or \"stop\" to determine which control code to send\n\nOutput:\n- None (prints status messages to console)\n- Prints \"[*] Cannot connect to target\" if connection fails\n- Prints \"[*] Done!\" when operation completes (successfully or after handling failure)",
    "Canonical_solution": "import socket\nimport hashlib\n\nSECRET = \"\"\n\ndef tcp_client_communication(ip, port, action):\n    first_checkcode = hashlib.md5(SECRET.encode()).hexdigest()\n    second_checkcode = hashlib.md5(first_checkcode.encode()).hexdigest()\n    final_checkcode = first_checkcode[:24] + second_checkcode[:24]\n\n    START_PORT_REUSE = final_checkcode[16:32]\n    STOP_PORT_REUSE = final_checkcode[32:]\n\n    data = START_PORT_REUSE if action == \"start\" else STOP_PORT_REUSE\n\n    try:\n        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        s.settimeout(2)\n        s.connect((ip, int(port)))\n        s.send(data.encode())\n    except:\n        print(\"[*] Cannot connect to target\")\n\n    try:\n        s.recv(1024)\n    except:\n        pass\n\n    s.close()\n    print(\"[*] Done!\")",
    "Code_level": "Function-level",
    "FSMID_for_test": 67,
    "right_result": "import socket\nimport hashlib\n\ndef tcp_client(ip, port, action):\n    try:\n        port = int(port)\n        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        sock.settimeout(5)\n        sock.connect((ip, port))\n        secret = \"mysecretkey\"\n        md5_1 = hashlib.md5(secret.encode()).hexdigest()\n        md5_2 = hashlib.md5(secret.encode()).hexdigest()\n        checkcode = md5_1[:8] + md5_2[8:]\n        control_code = ''.join([checkcode[i] for i in range(len(checkcode)) if i % 2 == 0])\n        command = control_code[:4] if action == \"start\" else control_code[4:]\n        sock.send(command.encode())\n        print(\"[*] Command sent\")\n    except Exception as e:\n        print(\"[*] Cannot connect to target\")\n    finally:\n        sock.close()\n        print(\"[*] Done!\")"
  },
  {
    "Task_id": 373,
    "Instruction": "Task Description: Implement a TCP client in Python that can handle multiple types of HTTP requests concurrently using threading and locking mechanisms to manage shared resources.\n\nFunction Description: The code consists of two main functions that perform HTTP GET requests to a server. `long_request` handles a request with a large response, processing it in chunks with delays, while `time_request` handles a quicker request. A threading lock is used to synchronize access to shared resources between these concurrent requests.\n\nInput:\n- `hostname` (str): The target server's hostname or IP address\n- `port` (int): The target server's port number\n- `headers` (str): Additional HTTP headers to include in the request\n\nOutput:\n- Both functions print status messages ('acquire' and 'release') to indicate lock status\n- No explicit return value, but data is received from the server and processed\n- Network connections are properly closed when complete\n\nMethods:\n- `long_request(hostname, port, headers) -> None`: \n  Performs a long-running HTTP GET request, receiving data in chunks with delays between receives. Releases a lock after initial processing and continues receiving more data.\n\n- `time_request(hostname, port, headers) -> None`: \n  Performs a quicker HTTP GET request, acquires a lock before execution, receives all data at once, and closes the connection.\n\nShared Resource:\n- `lock` (threading.Lock): A threading lock used to synchronize access between the two request functions",
    "Canonical_solution": "import sys\nimport socket\nimport time\nimport threading\n\ndef long_request(hostname, port, headers):\n    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    s.connect((hostname, port))\n    s.send('GET /huge HTTP/1.0' + headers)\n    for i in range(1):\n        s.recv(80)\n        time.sleep(0.1)\n    lock.release()\n    print('release')\n    for i in range(10):\n        s.recv(80)\n        time.sleep(0.1)\n    s.close()\n\ndef time_request(hostname, port, headers):\n    lock.acquire()\n    print('acquire')\n    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    s.connect((hostname, port))\n    s.send('GET /tuple HTTP/1.0' + headers)\n    s.recv(900)\n    s.close()\n\nlock = threading.Lock()",
    "Code_level": "Function-level",
    "FSMID_for_test": 67,
    "right_result": "import threading\nimport socket\nimport time\n\nlock = threading.Lock()\n\ndef long_request(hostname, port, headers):\n    with lock:\n        print(\"acquire\")\n        try:\n            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n            sock.connect((hostname, port))\n            sock.sendall(f\"GET / HTTP/1.1\\r\\nHost: {hostname}\\r\\n{headers}\\r\\n\\r\\n\".encode())\n            while True:\n                data = sock.recv(4096)\n                if not data:\n                    break\n                time.sleep(0.1)\n                print(\"data received\")\n            print(\"release\")\n        finally:\n            sock.close()\n\ndef time_request(hostname, port, headers):\n    with lock:\n        print(\"acquire\")\n        try:\n            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n            sock.connect((hostname, port))\n            sock.sendall(f\"GET / HTTP/1.1\\r\\nHost: {hostname}\\r\\n{headers}\\r\\n\\r\\n\".encode())\n            data = sock.recv(4096)\n            print(\"data received\")\n            print(\"release\")\n        finally:\n            sock.close()"
  },
  {
    "Task_id": 374,
    "Instruction": "Task Description: The task involves creating a Python function that reads log files, extracts specific messages, and sends them to a server using TCP socket communication. The function should parse log entries, identify relevant messages, and transmit them to the appropriate server ports based on the protocol specified in the logs.\n\nFunction Description: The function `send_messages_to_server` processes a log file to extract session IDs, protocols, and hexadecimal messages. It then establishes TCP connections to servers based on the protocols (using ports defined in an XML configuration file) and sends the decoded messages to the respective servers. The function includes a delay between messages to avoid overwhelming the server.\n\nInput: \n- `path` (str): The file path to the log file that contains the messages to be processed and sent. The log file should have entries matching the pattern `YYYY-MM-DD HH:MM:SS  INFO: [SESSION_ID: PROTOCOL < IP_ADDRESS] HEX_MESSAGE`.\n\nOutput: \n- None: The function does not return any value but performs side effects by sending messages to the server and closing the connections.\n\nNote: The function relies on an external XML file (`default.xml`) located in a `../setup/` directory relative to the script's location. This XML file should contain port mappings for different protocols under entries with keys ending in `.port`.",
    "Canonical_solution": "import sys\nimport re\nimport os\nimport xml.etree.ElementTree\nimport socket\nimport binascii\nimport time\n\ndef load_ports():\n    ports = {}\n    dir = os.path.dirname(os.path.abspath(__file__))\n    root = xml.etree.ElementTree.parse(dir + '/../setup/default.xml').getroot()\n    for entry in root.findall('entry'):\n        key = entry.attrib['key']\n        if key.endswith('.port'):\n            ports[key[:-5]] = int(entry.text)\n    return ports\n\ndef send_messages_to_server(path):\n    p = re.compile(r\"\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}  INFO: \\[([TU][0-9a-fA-F]{8}): (\\S+) < [\\d.]+] ([0-9a-fA-F]+)\")\n    ports = load_ports()\n    protocols = {}\n    messages = {}\n\n    for line in open(path):\n        m = p.match(line)\n        if m:\n            session = m.group(1)\n            protocol = m.group(2)\n            message = m.group(3)\n            protocols[session] = protocol\n            if session not in messages:\n                messages[session] = []\n            messages[session].append(message)\n\n    for session in protocols:\n        port = ports[protocols[session]]\n        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        s.connect((\"localhost\", int(port)))\n        for message in messages[session]:\n            s.send(binascii.unhexlify(message))\n            time.sleep(0.1)\n        s.close()",
    "Code_level": "Function-level",
    "FSMID_for_test": 67,
    "right_result": "import xml.etree.ElementTree as ET\nimport socket\nimport time\nimport re\n\ndef send_messages_to_server(path):\n    config_path = '../setup/default.xml'\n    tree = ET.parse(config_path)\n    root = tree.getroot()\n    protocol_ports = {}\n    for child in root:\n        if child.tag.endswith('.port'):\n            protocol = child.tag.split('.')[0]\n            port = int(child.text)\n            protocol_ports[protocol] = port\n\n    with open(path, 'r') as file:\n        for line in file:\n            match = re.search(r'\\[(\\S+):\\s*(\\S+)\\s*<\\s*(\\d+\\.\\d+\\.\\d+\\.\\d+)\\s*]\\s*(\\S+)', line)\n            if match:\n                session_id, protocol, ip_address, hex_message = match.groups()\n                if protocol in protocol_ports:\n                    port = protocol_ports[protocol]\n                    try:\n                        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n                        sock.connect((ip_address, port))\n                        decoded_message = bytes.fromhex(hex_message).decode('utf-8')\n                        sock.sendall(decoded_message.encode('utf-8'))\n                        sock.close()\n                    except Exception as e:\n                        print(f\"Error sending message: {e}\")\n                time.sleep(1)"
  },
  {
    "Task_id": 378,
    "Instruction": "Task Description: Implement a mock SSH agent that simulates the behavior of a real SSH agent, handling client requests for key management and authentication. The agent should support Unix domain sockets for IPC and provide functionality to start, stop, and manage client connections.\n\nClass Description: The `MockSSHAgent` class simulates an SSH agent that can load an ED25519 private key, handle client connections, and respond to SSH agent protocol requests. It uses threading to handle multiple clients and supports graceful shutdown.\n\nAttributes:\n\n- `sock_path`: [str] - The path to the Unix domain socket used for communication.\n- `server_sock`: [socket.socket] - The server socket object for accepting client connections.\n- `running`: [threading.Event] - A threading event to control the agent's running state.\n- `keys`: [list] - A list of tuples containing key information (key_type, key_blob, comment).\n- `agent_thread`: [threading.Thread] - The thread handling client connections.\n\nMethods:\n\n- `_load_ed25519_private_key(private_key_path: str) -> tuple`: Loads an ED25519 private key from a file and returns a tuple containing key information (key_type, key_blob, comment).\n- `start_agent(sock_path: str) -> None`: Starts the SSH agent by creating a Unix domain socket, binding it, and listening for client connections. Sets the `SSH_AUTH_SOCK` environment variable.\n- `_accept_connections() -> None`: Continuously accepts client connections and delegates handling to `_handle_client`.\n- `_handle_client(client_sock: socket.socket) -> None`: Handles a client connection by processing incoming messages and sending appropriate responses.\n- `_mock_list_keys_response() -> bytes`: Constructs a mock response to the `SSH_AGENTC_REQUEST_IDENTITIES` request.\n- `stop_agent() -> None`: Stops the SSH agent by sending a stop command, cleaning up resources, and removing the socket file.",
    "Canonical_solution": "import os\nimport socket\nimport struct\nimport threading\nfrom cryptography.hazmat.primitives import serialization\nfrom cryptography.hazmat.primitives.asymmetric.ed25519 import Ed25519PrivateKey\n\nSSH_AGENTC_REQUEST_IDENTITIES = 11\nSSH_AGENT_IDENTITIES_ANSWER = 12\nSSH_AGENT_FAILURE = 5\nSTOP_REQUEST = 0xFF\n\nclass MockSSHAgent:\n    def __init__(self, private_key_path):\n        self.sock_path = None\n        self.server_sock = None\n        self.running = threading.Event()\n        self.keys = [self._load_ed25519_private_key(private_key_path)]\n        self.agent_thread = None\n\n    def _load_ed25519_private_key(self, private_key_path):\n        with open(private_key_path, 'rb') as key_file:\n            private_key = serialization.load_ssh_private_key(key_file.read(), password=None)\n\n        if not isinstance(private_key, Ed25519PrivateKey):\n            raise ValueError(\"Invalid key type, expected ED25519 private key.\")\n\n        public_key = private_key.public_key()\n        public_key_blob = public_key.public_bytes(\n            encoding=serialization.Encoding.Raw, format=serialization.PublicFormat.Raw\n        )\n\n        key_type = b\"ssh-ed25519\"\n        key_blob_full = (\n            struct.pack(\">I\", len(key_type))\n            + key_type\n            + struct.pack(\">I\", len(public_key_blob))\n            + public_key_blob\n        )\n\n        comment = \"\"\n        return (\"ssh-ed25519\", key_blob_full, comment)\n\n    def start_agent(self, sock_path):\n        self.sock_path = sock_path\n        if os.path.exists(self.sock_path):\n            os.remove(self.sock_path)\n\n        self.server_sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n        self.server_sock.bind(self.sock_path)\n        self.server_sock.listen(5)\n\n        os.environ['SSH_AUTH_SOCK'] = self.sock_path\n        self.running.set()\n\n        self.agent_thread = threading.Thread(target=self._accept_connections, daemon=True)\n        self.agent_thread.start()\n\n    def _accept_connections(self):\n        while self.running.is_set():\n            try:\n                client_sock, _ = self.server_sock.accept()\n                self._handle_client(client_sock)\n            except Exception as e:\n                print(f\"Error accepting connection: {e}\")\n\n    def _handle_client(self, client_sock):\n        try:\n            length_message = client_sock.recv(4)\n            if not length_message:\n                raise \"no length message received\"\n\n            msg_len = struct.unpack(\">I\", length_message)[0]\n            request_message = client_sock.recv(msg_len)\n\n            if request_message[0] == STOP_REQUEST:\n                client_sock.close()\n                self.running.clear()\n                return\n\n            if request_message[0] == SSH_AGENTC_REQUEST_IDENTITIES:\n                response = self._mock_list_keys_response()\n                client_sock.sendall(response)\n            else:\n                response = struct.pack(\">I\", 1) + struct.pack(\">B\", SSH_AGENT_FAILURE)\n                client_sock.sendall(response)\n\n        except socket.error:\n            pass\n        finally:\n            client_sock.close()\n\n    def _mock_list_keys_response(self):\n        response = struct.pack(\">B\", SSH_AGENT_IDENTITIES_ANSWER)\n        response += struct.pack(\">I\", len(self.keys))\n\n        for key_type, key_blob, comment in self.keys:\n            response += struct.pack(\">I\", len(key_blob)) + key_blob\n            comment_encoded = comment.encode()\n            response += struct.pack(\">I\", len(comment_encoded)) + comment_encoded\n\n        response = struct.pack(\">I\", len(response)) + response\n        return response\n\n    def stop_agent(self):\n        if self.running.is_set():\n            with socket.socket(socket.AF_UNIX, socket.SOCK_STREAM) as client_sock:\n                client_sock.connect(self.sock_path)\n                stop_command = struct.pack(\">B\", STOP_REQUEST)\n                message_length = struct.pack(\">I\", len(stop_command))\n                client_sock.sendall(message_length)\n                client_sock.sendall(stop_command)\n\n            self.running.clear()\n\n            if self.agent_thread:\n                self.agent_thread.join()\n                self.agent_thread = None\n\n            if self.server_sock:\n                self.server_sock.close()\n                os.remove(self.sock_path)",
    "Code_level": "Class-level",
    "FSMID_for_test": 66,
    "right_result": "import socket\nimport threading\nimport os\nimport struct\nimport select\n\nclass MockSSHAgent:\n    def __init__(self, sock_path):\n        self.sock_path = sock_path\n        self.server_sock = None\n        self.running = threading.Event()\n        self.keys = []\n        self.agent_thread = None\n\n    def _load_ed25519_private_key(self, private_key_path):\n        try:\n            with open(private_key_path, 'rb') as f:\n                key_blob = f.read()\n            return ('ed25519', key_blob, 'mock_key')\n        except Exception as e:\n            raise RuntimeError(f\"Failed to load ED25519 private key: {e}\")\n\n    def start_agent(self):\n        try:\n            os.unlink(self.sock_path)\n        except OSError:\n            if os.path.exists(self.sock_path):\n                raise\n        self.server_sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n        self.server_sock.bind(self.sock_path)\n        self.server_sock.listen(1)\n        self.running.set()\n        self.agent_thread = threading.Thread(target=self._accept_connections)\n        self.agent_thread.start()\n        os.environ['SSH_AUTH_SOCK'] = self.sock_path\n\n    def _accept_connections(self):\n        while self.running.is_set():\n            try:\n                client_sock, addr = self.server_sock.accept()\n                self._handle_client(client_sock)\n            except Exception as e:\n                print(f\"Error accepting connection: {e}\")\n                self.running.clear()\n\n    def _handle_client(self, client_sock):\n        try:\n            while True:\n                readable, _, _ = select.select([client_sock], [], [], 0.1)\n                if not readable:\n                    break\n                data = client_sock.recv(4096)\n                if not data:\n                    break\n                self._process_message(data, client_sock)\n        finally:\n            client_sock.close()\n\n    def _process_message(self, data, client_sock):\n        if not data:\n            return\n        msg_type = data[0]\n        if msg_type == 1:  # SSH_AGENTC_REQUEST_IDENTITIES\n            response = self._mock_list_keys_response()\n            client_sock.sendall(response)\n        elif msg_type == 2:  # SSH_AGENTC_ADD_IDENTITY\n            payload = data[1:]\n            key_type = payload[:1]\n            key_blob = payload[1:]\n            comment = b''\n            if len(key_blob) > 0 and key_blob[-1] == 0:\n                comment = key_blob[-len(key_blob)-1:-1]\n                key_blob = key_blob[:-len(comment)-1]\n            self.keys.append((key_type.decode('utf-8'), key_blob, comment.decode('utf-8')))\n            response = b'\\x00\\x00\\x00\\x01'\n            client_sock.sendall(response)\n        elif msg_type == 3:  # SSH_AGENTC_REMOVE_IDENTITY\n            payload = data[1:]\n            key_type = payload[:1]\n            key_blob = payload[1:]\n            comment = b''\n            if len(key_blob) > 0 and key_blob[-1] == 0:\n                comment = key_blob[-len(key_blob)-1:-1]\n                key_blob = key_blob[:-len(comment)-1]\n            self.keys = [(kt, kb, kc) for kt, kb, kc in self.keys if not (kt == key_type.decode('utf-8') and kb == key_blob and kc == comment.decode('utf-8'))]\n            response = b'\\x00\\x00\\x00\\x01'\n            client_sock.sendall(response)\n        elif msg_type == 4:  # SSH_AGENTC_SIGN_REQUEST\n            payload = data[1:]\n            key_type = payload[:1]\n            key_blob = payload[1:1+256]\n            data_to_sign = payload[1+256:]\n            signature = b'\\x00' * 64\n            response = struct.pack('>I', len(signature)) + signature\n            client_sock.sendall(response)\n        else:\n            client_sock.sendall(b'\\x00\\x00\\x00\\x00')\n\n    def _mock_list_keys_response(self):\n        response = b'\\x00\\x00\\x00\\x01'\n        for key_type, key_blob, comment in self.keys:\n            response += struct.pack('>I', len(key_type) + len(key_blob) + len(comment) + 1)\n            response += key_type.encode('utf-8') + b'\\x00' + key_blob + b'\\x00' + comment.encode('utf-8')\n        return response\n\n    def stop_agent(self):\n        self.running.clear()\n        if self.agent_thread:\n            self.agent_thread.join()\n        if self.server_sock:\n            self.server_sock.close()\n        try:\n            os.unlink(self.sock_path)\n        except OSError:\n            pass\n        del os.environ['SSH_AUTH_SOCK']"
  },
  {
    "Task_id": 379,
    "Instruction": "Task Description: Implement a TCP communication class to facilitate data exchange between a Python server and a Godot client using JSON format for message serialization.\n\nClass Description: GodotTCPCommunicator is a TCP server implementation that handles communication with a Godot client. It establishes a connection, sends/receives JSON-formatted messages, and manages the connection lifecycle.\n\nAttributes:\n- port: int - The port number on which the server listens for connections (default: 11008)\n- connection: socket.socket - The active TCP connection with the client\n- DEFAULT_PORT: int - Class constant for default port (11008)\n- DEFAULT_TIMEOUT: int - Class constant for default timeout in seconds (60)\n\nMethods:\n- __init__(port: int = DEFAULT_PORT) -> None - Initializes the communicator with specified port and starts the server\n- _start_server() -> socket.socket - Creates and configures TCP socket, binds to localhost, listens for and accepts connection\n- _send_as_json(dictionary: Dict[str, Any]) -> None - Serializes dictionary to JSON and sends it to client\n- _get_json_dict() -> Dict[str, Any] - Receives data from client and deserializes JSON to dictionary\n- _get_data() -> Optional[str] - Receives raw string data from client with length-prefix protocol\n- _send_string(string: str) -> None - Sends string to client with length-prefix protocol\n- close() -> None - Closes the active connection",
    "Canonical_solution": "import socket\nimport json\nfrom typing import Optional, Dict, Any\nimport numpy as np\n\nclass GodotTCPCommunicator:\n    DEFAULT_PORT = 11008\n    DEFAULT_TIMEOUT = 60\n\n    def __init__(self, port: int = DEFAULT_PORT):\n        self.port = port\n        self.connection = self._start_server()\n\n    def _start_server(self):\n        print(f\"waiting for remote GODOT connection on port {self.port}\")\n        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        server_address = (\"127.0.0.1\", self.port)\n        sock.bind(server_address)\n        sock.listen(1)\n        sock.settimeout(self.DEFAULT_TIMEOUT)\n        connection, client_address = sock.accept()\n        print(\"connection established\")\n        return connection\n\n    def _send_as_json(self, dictionary: Dict[str, Any]):\n        message_json = json.dumps(dictionary)\n        self._send_string(message_json)\n\n    def _get_json_dict(self) -> Dict[str, Any]:\n        data = self._get_data()\n        return json.loads(data)\n\n    def _get_data(self) -> Optional[str]:\n        try:\n            string_size_bytes = bytearray()\n            received_length = 0\n            length = 4\n\n            while received_length < length:\n                data = self.connection.recv(length - received_length)\n                received_length += len(data)\n                string_size_bytes.extend(data)\n\n            length = int.from_bytes(string_size_bytes, \"little\")\n\n            string_bytes = bytearray()\n            received_length = 0\n\n            while received_length < length:\n                data = self.connection.recv(length - received_length)\n                received_length += len(data)\n                string_bytes.extend(data)\n\n            return string_bytes.decode()\n        except socket.timeout as e:\n            print(\"env timed out\", e)\n            return None\n\n    def _send_string(self, string: str):\n        message = len(string).to_bytes(4, \"little\") + bytes(string.encode())\n        self.connection.sendall(message)\n\n    def close(self):\n        self.connection.close()",
    "Code_level": "Class-level",
    "FSMID_for_test": 66,
    "right_result": "import socket\nimport json\nfrom typing import Dict, Any, Optional\n\nclass GodotTCPCommunicator:\n    DEFAULT_PORT = 11008\n    DEFAULT_TIMEOUT = 60\n\n    def __init__(self, port: int = DEFAULT_PORT) -> None:\n        self.port = port\n        self.connection = None\n        self._start_server()\n\n    def _start_server(self) -> socket.socket:\n        server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        server_socket.bind(('localhost', self.port))\n        server_socket.listen(1)\n        server_socket.settimeout(self.DEFAULT_TIMEOUT)\n        print(f\"Server listening on port {self.port}\")\n        self.connection, addr = server_socket.accept()\n        print(f\"Connection from {addr}\")\n        return self.connection\n\n    def _send_as_json(self, dictionary: Dict[str, Any]) -> None:\n        json_data = json.dumps(dictionary).encode('utf-8')\n        self._send_string(json_data.decode('utf-8'))\n\n    def _get_json_dict(self) -> Dict[str, Any]:\n        data = self._get_data()\n        if data is None:\n            return {}\n        return json.loads(data)\n\n    def _get_data(self) -> Optional[str]:\n        try:\n            length_bytes = self.connection.recv(4)\n            if not length_bytes:\n                return None\n            length = int.from_bytes(length_bytes, byteorder='big')\n            data = self.connection.recv(length)\n            return data.decode('utf-8')\n        except socket.timeout:\n            return None\n\n    def _send_string(self, string: str) -> None:\n        length = len(string)\n        self.connection.send(length.to_bytes(4, byteorder='big'))\n        self.connection.send(string.encode('utf-8'))\n\n    def close(self) -> None:\n        if self.connection:\n            self.connection.close()\n            self.connection = None"
  },
  {
    "Task_id": 38,
    "Instruction": "Task Description: Implement a function that handles Server-Sent Events (SSE) from an HTTP POST request, processes the incoming data streams, and yields appropriate message objects or raises errors when encountered.\n\nFunction Description: The function `_sse_post` establishes an SSE connection to a specified URL, sends a POST request with provided data and headers, and processes the incoming event stream. It handles different message types by yielding appropriate message objects (ReasoningMessage, ToolCallMessage, ToolReturnMessage, LettaUsageStatistics) or stream status updates (MessageStreamStatus). It also handles errors, including context window errors and JSON parsing errors, by raising appropriate exceptions.\n\nInput:\n- url: str - The URL to which the POST request will be sent.\n- data: dict - The JSON data to be sent in the POST request body.\n- headers: dict - The headers to be included in the POST request.\n\nOutput:\n- Generator[LettaStreamingResponse, None, None] - A generator that yields objects of type LettaStreamingResponse (which can be ReasoningMessage, ToolCallMessage, ToolReturnMessage, LettaUsageStatistics, or MessageStreamStatus) as the events are received from the server. Raises LLMError for context window errors or other appropriate exceptions for other errors.",
    "Canonical_solution": "import json\nfrom typing import Generator\nimport httpx\nfrom httpx_sse import SSEError, connect_sse\nfrom letta.constants import OPENAI_CONTEXT_WINDOW_ERROR_SUBSTRING\nfrom letta.errors import LLMError\nfrom letta.schemas.enums import MessageStreamStatus\nfrom letta.schemas.letta_message import ReasoningMessage, ToolCallMessage, ToolReturnMessage\nfrom letta.schemas.letta_response import LettaStreamingResponse\nfrom letta.schemas.usage import LettaUsageStatistics\n\ndef _sse_post(url: str, data: dict, headers: dict) -> Generator[LettaStreamingResponse, None, None]:\n    with httpx.Client() as client:\n        with connect_sse(client, method=\"POST\", url=url, json=data, headers=headers) as event_source:\n            if not event_source.response.is_success:\n                response_bytes = event_source.response.read()\n                response_dict = json.loads(response_bytes.decode(\"utf-8\"))\n                error_message = response_dict[\"error\"][\"message\"]\n                if OPENAI_CONTEXT_WINDOW_ERROR_SUBSTRING in error_message:\n                    raise LLMError(error_message)\n                event_source.response.raise_for_status()\n\n            try:\n                for sse in event_source.iter_sse():\n                    if sse.data in [status.value for status in MessageStreamStatus]:\n                        yield MessageStreamStatus(sse.data)\n                    else:\n                        chunk_data = json.loads(sse.data)\n                        if \"reasoning\" in chunk_data:\n                            yield ReasoningMessage(**chunk_data)\n                        elif \"tool_call\" in chunk_data:\n                            yield ToolCallMessage(**chunk_data)\n                        elif \"tool_return\" in chunk_data:\n                            yield ToolReturnMessage(**chunk_data)\n                        elif \"step_count\" in chunk_data:\n                            yield LettaUsageStatistics(**chunk_data)\n                        else:\n                            raise ValueError(f\"Unknown message type in chunk_data: {chunk_data}\")\n\n            except SSEError as e:\n                if \"application/json\" in str(e):\n                    response = client.post(url=url, json=data, headers=headers)\n                    if response.headers[\"Content-Type\"].startswith(\"application/json\"):\n                        error_details = response.json()\n                raise e\n\n            except Exception as e:\n                raise e",
    "Code_level": "Function-level",
    "FSMID_for_test": 58,
    "right_result": "import httpx\nimport json\nfrom typing import Generator, Optional\nfrom letta.message import ReasoningMessage, ToolCallMessage, ToolReturnMessage, LettaUsageStatistics, MessageStreamStatus\nfrom letta.exceptions import LLMError\n\ndef _sse_post(url: str, data: dict, headers: dict) -> Generator[LettaStreamingResponse, None, None]:\n    with httpx.Client() as client:\n        try:\n            response = client.post(url, json=data, headers=headers, timeout=300.0)\n            response.raise_for_status()\n        except httpx.RequestError as e:\n            raise LLMError(f\"Request error: {e}\")\n\n        event_source = response.text\n        for line in event_source.split('\\n'):\n            line = line.strip()\n            if not line or line.startswith('event:') or line.startswith('data:'):\n                continue\n            try:\n                message_data = json.loads(line)\n                message_type = message_data.get('type')\n                if message_type == 'reasoning':\n                    yield ReasoningMessage(**message_data['content'])\n                elif message_type == 'tool_call':\n                    yield ToolCallMessage(**message_data['content'])\n                elif message_type == 'tool_return':\n                    yield ToolReturnMessage(**message_data['content'])\n                elif message_type == 'usage_statistics':\n                    yield LettaUsageStatistics(**message_data['content'])\n                elif message_type == 'stream_status':\n                    yield MessageStreamStatus(**message_data['content'])\n                else:\n                    raise LLMError(f\"Unknown message type: {message_type}\")\n            except json.JSONDecodeError as e:\n                raise LLMError(f\"JSON parsing error: {e}\") from e\n            except KeyError as e:\n                raise LLMError(f\"Missing required field in message: {e}\") from e\n            except Exception as e:\n                raise LLMError(f\"Error processing message: {e}\") from e"
  },
  {
    "Task_id": 381,
    "Instruction": "Task Description: Create a TCP server class that can handle incoming client connections, receive data from clients in a line-based and length-prefixed format, and process the received data in a separate thread.\n\nClass Description: BaseSocket is a TCP server implementation that listens for incoming connections, receives data from clients, and queues the received data for processing. It uses threading to handle connections asynchronously and provides methods for data reception and processing.\n\nAttributes:\nserversocket: [socket.socket] - TCP socket object for server operations\nqueue: [Queue] - Thread-safe queue for storing received data\nt: [Thread] - Thread object for running the server's main loop\ndebug: [bool] - Flag for enabling debug mode\ndisconnect: [bool] - Flag indicating client disconnection status\n\nMethods:\n__init__: [host: str, port: int, debug: bool = False] -> None - Initializes the TCP server, binds to the specified host and port, and starts the server thread\nrecvLine: [sock: socket.socket] -> Tuple[bool, str] - Static method that receives a line of data ending with newline character from a socket\nrecvAll: [sock: socket.socket, l: str] -> str - Static method that receives exact number of bytes specified by length parameter l from a socket\nrun: [] -> None - Main server loop that accepts connections and receives data from clients\nupdate: [] -> None - Processes queued data by calling the main method\nmain: [datas: str] -> None - Placeholder method for processing received data (should be overridden by subclasses)\n__del__: [] -> None - Cleanup method that closes the server socket and joins the thread",
    "Canonical_solution": "import socket\nimport time\nfrom threading import Thread\nfrom queue import Queue\n\nclass BaseSocket:\n    def __init__(self, host, port, debug=False) -> None:\n        self.serversocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.serversocket.bind((host, port))\n        self.serversocket.listen(1)\n        self.queue = Queue()\n        self.t = Thread(target=self.run)\n        self.t.start()\n        self.debug = debug\n        self.disconnect = False\n    \n    @staticmethod\n    def recvLine(sock):\n        flag = True\n        result = b''\n        while not result.endswith(b'\\n'):\n            res = sock.recv(1)\n            if not res:\n                flag = False\n                break\n            result += res\n        return flag, result.strip().decode('ascii')\n\n    @staticmethod\n    def recvAll(sock, l):\n        l = int(l)\n        result = b''\n        while (len(result) < l):\n            t = sock.recv(l - len(result))\n            result += t\n        return result.decode('ascii')\n\n    def run(self):\n        while True:\n            clientsocket, addr = self.serversocket.accept()\n            self.disconnect = False\n            while True:\n                flag, l = self.recvLine(clientsocket)\n                if not flag:\n                    self.disconnect = True\n                    break\n                data = self.recvAll(clientsocket, l)\n                self.queue.put(data)\n            clientsocket.close()\n    \n    def update(self):\n        time.sleep(1)\n        while not self.queue.empty():\n            data = self.queue.get()\n            self.main(data)\n    \n    def main(self, datas):\n        pass\n\n    def __del__(self):\n        self.serversocket.close()\n        self.t.join()",
    "Code_level": "Class-level",
    "FSMID_for_test": 66,
    "right_result": "def BaseSocket(host, port, debug=False):\n    import socket\n    import threading\n    import queue\n\n    self.serversocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    self.serversocket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n    self.serversocket.bind((host, port))\n    self.serversocket.listen(5)\n    self.queue = queue.Queue()\n    self.t = threading.Thread(target=self.run, daemon=True)\n    self.debug = debug\n    self.disconnect = False\n\n    self.t.start()\n\n@staticmethod\ndef recvLine(sock):\n    data = ''\n    while True:\n        char = sock.recv(1).decode('utf-8')\n        if not char:\n            return False, ''\n        if char == '\\n':\n            return True, data + char\n        data += char\n\n@staticmethod\ndef recvAll(sock, l):\n    data = ''\n    while len(data) < int(l):\n        data += sock.recv(int(l) - len(data)).decode('utf-8')\n    return data\n\ndef run(self):\n    while not self.disconnect:\n        try:\n            clientsocket, addr = self.serversocket.accept()\n            if self.debug:\n                print(f\"Connection from {addr}\")\n            self.queue.put(clientsocket)\n        except Exception as e:\n            if self.debug:\n                print(f\"Error accepting connection: {e}\")\n            break\n\ndef update(self):\n    while not self.disconnect:\n        try:\n            sock = self.queue.get(timeout=1)\n            if not sock:\n                continue\n            line, _ = BaseSocket.recvLine(sock)\n            if line:\n                self.main(line)\n            else:\n                if self.debug:\n                    print(\"Client disconnected\")\n                sock.close()\n        except queue.Empty:\n            continue\n        except Exception as e:\n            if self.debug:\n                print(f\"Error processing data: {e}\")\n            sock.close()\n\ndef main(self, datas):\n    pass\n\ndef __del__(self):\n    self.disconnect = True\n    self.serversocket.close()\n    self.t.join()"
  },
  {
    "Task_id": 383,
    "Instruction": "Task Description: Implement a TCP server in Python that listens for incoming client connections, accepts a connection, and provides functionality to send messages to the connected client.\n\nFunction Description: The code consists of two functions: `receive_connection` and `send_message`. The `receive_connection` function creates a TCP socket, binds it to a specified port, listens for incoming connections, and returns the connected client socket. The `send_message` function sends a message to the connected client and closes the connection.\n\nInput: \n- `receive_connection`: None\n- `send_message`: \n  - `client`: socket.socket - The connected client socket\n  - `message`: str (optional) - The message to send to the client (default is an empty string)\n\nOutput: \n- `receive_connection`: socket.socket - The connected client socket\n- `send_message`: None",
    "Canonical_solution": "import socket\nimport logging\n\nlogger = logging.getLogger(__name__)\n\ndef receive_connection() -> socket.socket:\n    server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    server.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n    server.bind((\"0.0.0.0\", 7634))\n    logger.log(9, \"Server listening on 0.0.0.0:7634\")\n\n    server.listen(1)\n    client = server.accept()[0]\n    server.close()\n    logger.log(9, \"Server closed\")\n\n    return client\n\ndef send_message(client: socket.socket, message: str = \"\"):\n    client.send(f\"HTTP/1.1 200 OK\\r\\n\\r\\n{message}\".encode(\"utf-8\"))\n    client.close()",
    "Code_level": "Function-level",
    "FSMID_for_test": 66,
    "right_result": "import socket\n\ndef receive_connection():\n    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    server_socket.bind(('localhost', 12345))\n    server_socket.listen(1)\n    client_socket, addr = server_socket.accept()\n    return client_socket\n\ndef send_message(client, message=\"\"):\n    client.send(message.encode())\n    client.close()"
  },
  {
    "Task_id": 384,
    "Instruction": "Task Description: Implement a TCP server class that receives OAuth tokens through a local socket connection, handling the incoming HTTP request and extracting the authorization code or error message.\n\nClass Description: OAuthTokenReceiver is a class that creates a TCP server to listen for OAuth token responses on a specified local port. It handles the HTTP response, extracts the authorization code, and manages error cases.\n\nAttributes:\nport: int - The local port number on which the server will listen for incoming OAuth token responses (default: 31337)\n\nMethods:\nreceive_oauth_token: receive_oauth_token() -> str - Listens for an incoming connection, receives the OAuth token response, sends an HTTP success response, and returns the extracted authorization code. Raises an exception if the response contains an error description.",
    "Canonical_solution": "import socket\nimport re\nimport urllib.parse\n\nclass OAuthTokenReceiver:\n    def __init__(self, port=31337):\n        self.port = port\n\n    def receive_oauth_token(self):\n        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        sock.bind(('127.0.0.1', self.port))\n        sock.listen(1)\n        conn, addr = sock.accept()\n        data = conn.recv(1024)\n        conn.sendall('HTTP/1.1 200 OK\\r\\nContent-Type: text/html\\r\\n\\r\\n<html><head><title>Recon-ng</title></head><body>Response received. Return to Recon-ng.</body></html>')\n        conn.close()\n        \n        if 'error_description' in data:\n            error = urllib.parse.unquote_plus(re.search(r'error_description=([^\\s&]*)', data).group(1))\n            raise Exception(error)\n        \n        authorization_code = re.search(r'code=([^\\s&]*)', data).group(1)\n        return authorization_code",
    "Code_level": "Class-level",
    "FSMID_for_test": 66,
    "right_result": "import socket\nimport http.server\nimport urllib.parse\n\nclass OAuthTokenReceiver:\n    def __init__(self, port=31337):\n        self.port = port\n        self.server = None\n        self.handler = None\n\n    def start(self):\n        self.server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.server.bind(('localhost', self.port))\n        self.server.listen(1)\n        print(f\"OAuth token receiver listening on port {self.port}\")\n\n    def stop(self):\n        if self.server:\n            self.server.close()\n            print(\"OAuth token receiver stopped\")\n\n    def receive_oauth_token(self):\n        conn, addr = self.server.accept()\n        request = conn.recv(1024).decode('utf-8')\n        conn.sendall(b'HTTP/1.1 200 OK\\r\\nContent-Length: 0\\r\\n\\r\\n')\n        conn.close()\n\n        parsed_request = urllib.parse.urlparse(request)\n        query_params = urllib.parse.parse_qs(parsed_request.query)\n\n        if 'error' in query_params:\n            error_description = query_params.get('error_description', [''])[0]\n            raise Exception(f\"OAuth error: {error_description}\")\n\n        authorization_code = query_params.get('code', [''])[0]\n        return authorization_code"
  },
  {
    "Task_id": 385,
    "Instruction": "Task Description: Implement a TCP server and client system in Python using socket programming for handling multiple client connections and echoing received data back to clients.\n\nClass Description: \n\nTCPServer:\nA TCP server class that listens for incoming connections and manages client handlers. It uses socket programming to establish connections and delegates client communication to handler objects.\n\nAttributes:\n- sock: [socket.socket] - The TCP socket object for server operations\n- client_handler: [class] - The handler class to instantiate for each new client\n- handler_list: [list] - List of active client handlers\n\nMethods:\n- __init__(address, client_handler, handler_list) -> [None] - Initializes the server socket, binds to address, and starts listening\n- fileno() -> [int] - Returns the socket's file descriptor for polling\n- wants_to_receive() -> [bool] - Always returns True indicating readiness to accept connections\n- handle_receive() -> [None] - Accepts new connections and adds client handlers to the list\n\nTCPClient:\nBase class for client handlers providing common socket operations and management.\n\nAttributes:\n- sock: [socket.socket] - The client socket object\n- handler_list: [list] - Reference to the server's handler list\n- outgoing: [bytearray] - Buffer for data to be sent\n\nMethods:\n- __init__(sock, handler_list) -> [None] - Initializes client handler with socket and handler list\n- fileno() -> [int] - Returns the socket's file descriptor\n- close() -> [None] - Closes the socket and removes handler from list\n- wants_to_send() -> [bool] - Returns True if there's data to send\n- handle_send() -> [None] - Sends data from outgoing buffer\n\nTCPEchoClient:\nA TCP client handler that echoes received data back to the client.\n\nMethods:\n- wants_to_receive() -> [bool] - Always returns True indicating readiness to receive\n- handle_receive() -> [None] - Receives data and queues it for echoing back, closes connection on empty data",
    "Canonical_solution": "import socket\n\nclass TCPServer:\n    def __init__(self, address, client_handler, handler_list):\n        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, True)\n        self.sock.bind(address)\n        self.sock.listen(1)\n        self.client_handler = client_handler\n        self.handler_list = handler_list\n\n    def fileno(self):\n        return self.sock.fileno()\n\n    def wants_to_receive(self):\n        return True\n\n    def handle_receive(self):\n        client, addr = self.sock.accept()\n        self.handler_list.append(self.client_handler(client, self.handler_list))\n\nclass TCPClient:\n    def __init__(self, sock, handler_list):\n        self.sock = sock\n        self.handler_list = handler_list\n        self.outgoing = bytearray()\n\n    def fileno(self):\n        return self.sock.fileno()\n\n    def close(self):\n        self.sock.close()\n        self.handler_list.remove(self)\n        \n    def wants_to_send(self):\n        return True if self.outgoing else False\n\n    def handle_send(self):\n        nsent = self.sock.send(self.outgoing)\n        self.outgoing = self.outgoing[nsent:]\n\nclass TCPEchoClient(TCPClient):\n    def wants_to_receive(self):\n        return True\n    \n    def handle_receive(self):\n        data = self.sock.recv(8192)\n        if not data:\n            self.close()\n        else:\n            self.outgoing.extend(data)",
    "Code_level": "Class-level",
    "FSMID_for_test": 66,
    "right_result": "class TCPServer:\n    def __init__(self, address, client_handler, handler_list):\n        import socket\n        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        self.sock.bind(address)\n        self.sock.listen(5)\n        self.client_handler = client_handler\n        self.handler_list = handler_list\n\n    def fileno(self):\n        return self.sock.fileno()\n\n    def wants_to_receive(self):\n        return True\n\n    def handle_receive(self):\n        while True:\n            client_sock, addr = self.sock.accept()\n            handler = self.client_handler(client_sock, self.handler_list)\n            self.handler_list.append(handler)\n\nclass TCPClient:\n    def __init__(self, sock, handler_list):\n        self.sock = sock\n        self.handler_list = handler_list\n        self.outgoing = bytearray()\n\n    def fileno(self):\n        return self.sock.fileno()\n\n    def close(self):\n        self.sock.close()\n        self.handler_list.remove(self)\n\n    def wants_to_send(self):\n        return len(self.outgoing) > 0\n\n    def handle_send(self):\n        sent = self.sock.send(self.outgoing)\n        self.outgoing = self.outgoing[sent:]\n\nclass TCPEchoClient(TCPClient):\n    def wants_to_receive(self):\n        return True\n\n    def handle_receive(self):\n        data = self.sock.recv(4096)\n        if not data:\n            self.close()\n            return\n        self.outgoing.extend(data)"
  },
  {
    "Task_id": 386,
    "Instruction": "Task Description: Implement a TCP server that handles client connections, processes incoming data, and interacts with a teamserver through HTTP requests. The server should be able to read and write data based on client requests.\n\nFunction Description: The function `cc2_tcp_server` creates a TCP server that listens for client connections on a specified port. It processes incoming messages to either read data from or write data to a teamserver via HTTP requests. The server handles each client connection in a loop, processing the data and closing the connection afterward.\n\nInput: None (The function binds to a hardcoded IP address and port, and processes incoming client connections.)\n\nOutput: None (The function sends responses to clients but does not return any value.)\n\n---\n\nTask Description: Implement helper functions to support the TCP server's operations, including reading from and writing to a teamserver, parsing raw data, and extracting beacon data.\n\nFunction Description: The function `read_cs_teamserver` sends an HTTP GET request to a teamserver with metadata and extracts beacon data from the response. The function `write_cs_teamserver` sends an HTTP POST request to a teamserver with metadata. The function `parseRawData` splits raw data into a beacon ID and metadata. The function `find_beacon_data` extracts beacon data from a string based on prefix and suffix markers.\n\nInput:\n- `read_cs_teamserver`: `metadata` (str) - The metadata to include in the HTTP GET request.\n- `write_cs_teamserver`: `id` (str) - The beacon ID to include in the HTTP POST request URL; `metadata` (str) - The metadata to include in the HTTP POST request body.\n- `parseRawData`: `rawData` (str) - The raw data string to parse.\n- `find_beacon_data`: `prefix` (str) - The prefix marker for beacon data; `suffix` (str) - The suffix marker for beacon data; `data` (str) - The string to search for beacon data.\n\nOutput:\n- `read_cs_teamserver`: `beacon_data` (str) - The extracted beacon data from the HTTP response.\n- `write_cs_teamserver`: None (The function sends an HTTP POST request but does not return any value.)\n- `parseRawData`: `bid` (str) - The extracted beacon ID; `metadata` (str) - The extracted metadata.\n- `find_beacon_data`: `beacon_data` (str) - The extracted beacon data, or an empty string if not found.",
    "Canonical_solution": "import socket\nimport requests\n\ndef cc2_tcp_server():\n    sockobj = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    sockobj.setsockopt(socket.SOL_SOCKET,socket.SO_REUSEADDR, 1)\n    sockobj.bind(('127.0.0.1', 7777))\n    sockobj.listen(1000)\n\n    while True:\n        connection, address = sockobj.accept()\n        msgHeader = connection.recv(7)\n        if msgHeader == 'read|||':\n            data = connection.recv(10024)\n            metadata = read_cs_teamserver(data)\n            if len(metadata) > 0:\n                connection.send(metadata)\n        elif msgHeader == 'write||':\n            rawData = connection.recv(10024)\n            bid, metadata = parseRawData(rawData)\n            if len(metadata) > 0 and len(bid) > 0:\n                write_cs_teamserver(bid, metadata)\n        connection.close()\n\ndef read_cs_teamserver(metadata):\n    headers = { \"HOST\": \"www.google.com\",\n                \"Referer\": \"http://www.google.com/\",\n                \"Accept\": \"accccccc\",\n                \"User-Agent\": \"cc2_rebind_protocol_get_send\",\n                \"Cookie\": \"SESSION={}\".format(metadata),\n                \"Connection\": \"cc2_rebind_protocol_get_send\"\n    }\n    res = requests.get(\"http://127.0.0.1:443/aaaaaaaaa\", headers=headers)\n    start = \"ffffffff1\"\n    end = \"eeeeeeee2\"\n    beacon_data = find_beacon_data(start, end, res.content)\n    return beacon_data\n\ndef write_cs_teamserver(id, metadata):\n    headers = { \"HOST\": \"www.google.com\",\n                \"Referer\": \"http://www.google.com/\",\n                \"Accept\": \"accccccc\",\n                \"User-Agent\": \"cc2_rebind_protocol_post_send\",\n                \"Connection\": \"keep-alive\",\n                \"Content-Length\": \"{}\".format(len(metadata))\n    }\n    res = requests.post(\"http://127.0.0.1:443/bbbbbbbbb?SESSION={}\".format(id), headers=headers, data=metadata)\n\ndef parseRawData(rawData):\n    split = '->|<-'\n    split_index = rawData.find(split)\n    bid = rawData[:split_index]\n    metadata = rawData[len(split)+split_index:]\n    return bid,metadata\n\ndef find_beacon_data(prefix, suffix, data):\n    s_index = data.find(prefix) + 1\n    s_end = data.find(suffix)\n    beacon_data = ''\n    if (s_index > 0 and s_end > 0 and (s_index + len(prefix) + 1) != s_end:\n        beacon_data = data[s_index + len(prefix):s_end]\n    return beacon_data",
    "Code_level": "Function-level",
    "FSMID_for_test": 66,
    "right_result": "import socket\nimport http.client\nimport json\n\ndef cc2_tcp_server():\n    host = '0.0.0.0'\n    port = 4444\n    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as server_socket:\n        server_socket.bind((host, port))\n        server_socket.listen(5)\n        print(f\"Server listening on {host}:{port}\")\n        while True:\n            client_socket, addr = server_socket.accept()\n            print(f\"Connection from {addr}\")\n            try:\n                data = client_socket.recv(1024)\n                if data:\n                    decoded_data = data.decode('utf-8')\n                    bid, metadata = parseRawData(decoded_data)\n                    if bid:\n                        beacon_data = read_cs_teamserver(metadata)\n                        client_socket.sendall(beacon_data.encode('utf-8'))\n                    else:\n                        write_cs_teamserver(bid, metadata)\n                        client_socket.sendall(b\"ACK\".encode('utf-8'))\n            finally:\n                client_socket.close()\n\ndef read_cs_teamserver(metadata):\n    conn = http.client.HTTPConnection(\"teamserver.com\")\n    headers = {\"Content-Type\": \"application/json\"}\n    payload = json.dumps({\"metadata\": metadata})\n    conn.request(\"GET\", \"/beacons\", payload, headers)\n    response = conn.getresponse()\n    beacon_data = response.read().decode('utf-8')\n    return beacon_data\n\ndef write_cs_teamserver(id, metadata):\n    conn = http.client.HTTPConnection(\"teamserver.com\")\n    headers = {\"Content-Type\": \"application/json\"}\n    payload = json.dumps({\"id\": id, \"metadata\": metadata})\n    conn.request(\"POST\", \"/beacons\", payload, headers)\n\ndef parseRawData(rawData):\n    parts = rawData.split('|')\n    if len(parts) >= 2:\n        return parts[0], parts[1]\n    return \"\", \"\"\n\ndef find_beacon_data(prefix, suffix, data):\n    start = data.find(prefix)\n    if start == -1:\n        return \"\"\n    end = data.find(suffix, start + len(prefix))\n    if end == -1:\n        return \"\"\n    return data[start + len(prefix):end]"
  },
  {
    "Task_id": 388,
    "Instruction": "Task Description: Create a Python class that implements a simple network server capable of handling TCP, UDP, and raw socket connections. The server should be able to bind to an available port, receive data from clients, and optionally send a predefined response.\n\nClass Description: The MiniTestServer class provides a configurable network server implementation supporting multiple protocols (TCP, UDP, raw). It can operate in silent mode (receive-only) or respond to clients with predefined data. The server automatically binds to an available port and handles one connection at a time.\n\nAttributes:\n- server_socket: [socket.socket] - The active server socket object\n- received: [bytes] - Data received from the client\n- data_to_send: [bytes] - Predefined data to send to clients (default: b\"\\xfe\\xeb\\xda\\xed\")\n- active_port: [int] - The port number the server is currently bound to\n- stay_silent: [bool] - If True, server won't send responses to clients\n- proto: [str] - Protocol type ('tcp', 'udp', or 'raw')\n- host: [str] - Host address to bind to (default: '0.0.0.0')\n- timeout: [int] - Socket timeout in seconds (default: 5)\n\nMethods:\n- __init__(stay_silent=False, proto=\"tcp\", host=\"0.0.0.0\") -> None - Initializes the server with optional parameters for silent mode, protocol type, and host address\n- bind() -> None - Creates and binds the server socket according to the specified protocol, assigns a random available port\n- serve_once() -> None - Handles one client interaction: accepts connection (TCP), receives data, optionally sends response, then closes the connection",
    "Canonical_solution": "import socket\nimport threading\nimport logging\n\nclass MiniTestServer:\n    def __init__(self, stay_silent=False, proto=\"tcp\", host=\"0.0.0.0\"):\n        self.server_socket = None\n        self.received = None\n        self.data_to_send = b\"\\xfe\\xeb\\xda\\xed\"\n        self.active_port = None\n        self.stay_silent = stay_silent\n        self.proto = proto\n        self.host = host\n        self.timeout = 5\n\n    def bind(self):\n        if self.proto == \"tcp\":\n            self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        elif self.proto == \"udp\":\n            self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n        elif self.proto == \"raw\":\n            self.server_socket = socket.socket(socket.AF_PACKET, socket.SOCK_RAW, socket.ntohs(ETH_P_ALL))\n        else:\n            raise Exception(\"Invalid protocol type: '{0}'\".format(self.proto))\n\n        self.server_socket.bind((self.host, 0))\n        self.active_port = self.server_socket.getsockname()[1]\n\n        if self.proto == \"tcp\":\n            self.server_socket.listen(1)\n\n    def serve_once(self):\n        self.server_socket.settimeout(self.timeout)\n\n        if self.proto == \"tcp\":\n            (client_socket, address) = self.server_socket.accept()\n            client_socket.settimeout(self.timeout)\n            self.received = client_socket.recv(10000)\n\n            if not self.stay_silent:\n                client_socket.send(self.data_to_send)\n\n            client_socket.close()\n        elif self.proto == \"udp\":\n            data, addr = self.server_socket.recvfrom(1024)\n            self.received = data\n            if not self.stay_silent:\n                self.server_socket.sendto(self.data_to_send, addr)\n        elif self.proto == \"raw\":\n            data, addr = self.server_socket.recvfrom(10000)\n            self.received = data\n            if not self.stay_silent:\n                self.server_socket.sendto(self.data_to_send, addr)\n        else:\n            raise Exception(\"Invalid protocol type: '{0}'\".format(self.proto))\n\n        self.server_socket.close()\n        self.server_socket = None\n        self.active_port = None",
    "Code_level": "Class-level",
    "FSMID_for_test": 66,
    "right_result": "class MiniTestServer:\n    def __init__(self, stay_silent=False, proto=\"tcp\", host=\"0.0.0.0\"):\n        self.server_socket = None\n        self.received = b''\n        self.data_to_send = b\"\\xfe\\xeb\\xda\\xed\"\n        self.active_port = 0\n        self.stay_silent = stay_silent\n        self.proto = proto\n        self.host = host\n        self.timeout = 5\n\n    def bind(self):\n        import socket\n        if self.proto == \"tcp\":\n            self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        elif self.proto == \"udp\":\n            self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n        elif self.proto == \"raw\":\n            self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_RAW, socket.getprotobyname(\"icmp\"))\n        else:\n            raise ValueError(\"Invalid protocol type\")\n        self.server_socket.settimeout(self.timeout)\n        self.server_socket.bind((self.host, 0))\n        self.active_port = self.server_socket.getsockname()[1]\n\n    def serve_once(self):\n        import socket\n        if self.proto == \"tcp\":\n            self.server_socket.listen(1)\n            client_socket, addr = self.server_socket.accept()\n            data = client_socket.recv(1024)\n            self.received = data\n            if not self.stay_silent:\n                client_socket.sendall(self.data_to_send)\n            client_socket.close()\n        elif self.proto == \"udp\":\n            data, addr = self.server_socket.recvfrom(1024)\n            self.received = data\n            if not self.stay_silent:\n                self.server_socket.sendto(self.data_to_send, addr)\n        elif self.proto == \"raw\":\n            data, addr = self.server_socket.recvfrom(1024)\n            self.received = data\n            if not self.stay_silent:\n                self.server_socket.sendto(self.data_to_send, addr)"
  },
  {
    "Task_id": 389,
    "Instruction": "Task Description: Create a TCP server class that handles incoming client connections, receives data, and writes it to a file, with options for debugging and multiprocessing support.\n\nClass Description: EventGeneric is a TCP server implementation that listens for incoming connections, receives byte data from clients, and writes it to a binary file. It supports running in a separate process and provides debugging capabilities through logging.\n\nAttributes:\n- name: str - Identifier for the event instance and log file\n- isDebug: bool - Flag to enable debug logging\n- shared_key: Any - Optional shared key for inter-process communication\n- port: int - TCP port to listen on (auto-assigned if not specified)\n- addr: str - IP address to bind to (defaults to \"0.0.0.0\")\n- file: str - Path to the output binary file\n- logger: logging.Logger - Debug logger instance (only when isDebug=True)\n\nMethods:\n- __init__(addr=None, port=None, name='events', shared_key=None, isDebug=False) -> None - Initializes the TCP server with optional address, port, name, shared key, and debug flag\n- serve() -> None - Main server loop that binds to the socket, accepts connections, and handles data reception\n- spawn(addr=None, port=None, name='events', shared_key=None, isDebug=False) -> Tuple[int, multiprocessing.Process] - Static method to create and start the server in a separate process, returns the port number and process object",
    "Canonical_solution": "import socket\nimport multiprocessing\nimport os\n\nclass EventGeneric:\n    def __init__(self, addr=None, port=None, name='events', shared_key=None, isDebug=False):\n        self.name = name\n        self.isDebug = isDebug\n        self.shared_key = shared_key\n        if port is None:\n            self.port = get_free_port()\n        else:\n            self.port = port\n        if addr is not None:\n            self.addr, _ = addr\n        else:\n            self.addr = \"0.0.0.0\"\n        self.file = f\"./{self.name}.bin\"\n\n    def serve(self):\n        if self.isDebug:\n            self.logger = get_file_logger(self.name, level=\"DEBUG\")\n        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        local_addr_port = (self.addr, self.port)\n        sock.bind(local_addr_port)\n        sock.listen(1)\n\n        try:\n            conn, addr = sock.accept()\n            if self.isDebug:\n                self.logger.debug(f\"Open connection from {addr[0]}:{addr[1]}\")\n                event_file = open(self.file, \"wb\")\n            try:\n                while True:\n                    data = conn.recv(1, socket.MSG_WAITALL)\n                    if data:\n                        event_file.write(data)\n                    else:\n                        break\n                        raise KeyboardInterrupt\n            except KeyboardInterrupt:\n                pass\n            finally:\n                try:\n                    if self.isDebug:\n                        os.remove(self.file)\n                except OSError:\n                    pass\n                conn.close()\n                if self.isDebug:\n                    self.logger.debug(f\"Close connection from {addr[0]}:{addr[1]}\")\n            sock.close()\n        except KeyboardInterrupt:\n            pass\n        except BrokenPipeError:\n            pass\n        finally:\n            sock.close()\n            if self.isDebug:\n                self.logger.debug(f\"Closed listen on {self.addr}:{self.port}\")\n\n    @staticmethod\n    def spawn(addr=None, port=None, name='events', shared_key=None, isDebug=False):\n        event = EventGeneric(addr, port, name, shared_key, isDebug)\n        p = multiprocessing.Process(target=event.serve)\n        p.start()\n        return event.port, p",
    "Code_level": "Class-level",
    "FSMID_for_test": 66,
    "right_result": "import socket\nimport logging\nimport multiprocessing\nimport os\nimport struct\n\nclass EventGeneric:\n    def __init__(self, addr=None, port=None, name='events', shared_key=None, isDebug=False):\n        self.name = name\n        self.isDebug = isDebug\n        self.shared_key = shared_key\n        self.port = port or 0\n        self.addr = addr or \"0.0.0.0\"\n        self.file = f\"{self.name}.bin\"\n        self.logger = logging.getLogger(f\"EventGeneric.{self.name}\")\n        if self.isDebug:\n            self.logger.setLevel(logging.DEBUG)\n            handler = logging.FileHandler(f\"{self.name}_debug.log\")\n            handler.setLevel(logging.DEBUG)\n            formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n            handler.setFormatter(formatter)\n            self.logger.addHandler(handler)\n        self.sock = None\n        self.process = None\n\n    def __del__(self):\n        self.stop()\n\n    def start(self):\n        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        self.sock.bind((self.addr, self.port))\n        self.sock.listen(5)\n        self.logger.debug(f\"Server started on {self.addr}:{self.port}\")\n        self.serve()\n\n    def serve(self):\n        while True:\n            conn, addr = self.sock.accept()\n            self.logger.debug(f\"Connection from {addr}\")\n            try:\n                data = b''\n                while True:\n                    chunk = conn.recv(4096)\n                    if not chunk:\n                        break\n                    data += chunk\n                with open(self.file, 'ab') as f:\n                    f.write(data)\n                self.logger.debug(f\"Received {len(data)} bytes and wrote to {self.file}\")\n            except Exception as e:\n                self.logger.error(f\"Error handling connection: {e}\")\n            finally:\n                conn.close()\n\n    def stop(self):\n        if self.sock:\n            self.sock.close()\n            self.logger.debug(\"Server stopped\")\n\n    @staticmethod\n    def spawn(addr=None, port=None, name='events', shared_key=None, isDebug=False):\n        process = multiprocessing.Process(target=EventGeneric.spawn_target, args=(addr, port, name, shared_key, isDebug))\n        process.start()\n        process.join(timeout=1)\n        if process.exitcode is None:\n            process.terminate()\n            process.join()\n            raise TimeoutError(\"Process did not start within timeout\")\n        return (port, process)\n\n    @staticmethod\n    def spawn_target(addr, port, name, shared_key, isDebug):\n        server = EventGeneric(addr, port, name, shared_key, isDebug)\n        server.start()"
  },
  {
    "Task_id": 390,
    "Instruction": "Task Description: Implement a TCP server handler class that manages client connections, receives data from clients, and sends commands to connected clients in a threaded environment.\n\nClass Description: TCPHandler is a threaded TCP server that listens on a specified port, accepts client connections, and facilitates bidirectional communication between the server and client. It runs in a separate thread to maintain responsiveness while handling client connections.\n\nAttributes:\n- connected: bool - Indicates whether a client is currently connected\n- port: int - The port number on which the server listens for connections\n- socket: socket.socket - The TCP socket object for server operations\n- client: socket.socket - The client socket object for an active connection\n\nMethods:\n- __init__(port: int) -> None - Initializes the TCP server thread with the specified port\n- run() -> None - Main thread method that binds the socket, listens for connections, and handles incoming data (overrides threading.Thread.run)\n- listen_command() -> None - Listens for user input from the server console and processes commands\n- send_command(cmd: str) -> None - Sends a command string to the connected client\n- kill() -> None - Closes the client connection and server socket cleanly",
    "Canonical_solution": "import socket\nimport threading\nimport logging\n\nclass TCPHandler(threading.Thread):\n    def __init__(self, port):\n        threading.Thread.__init__(self)\n        logging.info(f\"Handler listening on 0.0.0.0:{port}\")\n        self.connected = False\n        self.port = int(port)\n        self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\n    def run(self):\n        self.socket.bind(('', self.port))\n        self.socket.listen(5)\n        \n        while True:\n            self.client, address = self.socket.accept()\n            print(f\"Handler> New session from {address[0]}\")\n            self.connected = True\n\n            response = self.client.recv(255)\n            while response != b\"\":\n                print(f\"\\n{response.decode('utf_8', 'ignore').strip()}\\nShell > $ \", end='')\n                response = self.client.recv(255)\n\n    def listen_command(self):\n        if self.connected == True:\n            cmd = input(\"Shell> $ \")\n            if cmd == \"exit\":\n                self.kill()\n                print(\"BYE !\")\n                exit()\n            self.send_command(cmd+\"\\n\\n\")\n\n    def send_command(self, cmd):\n        if self.connected:\n            self.client.sendall(cmd.encode())\n\n    def kill(self):\n        if hasattr(self, 'client'):\n            self.client.close()\n        self.socket.close()",
    "Code_level": "Class-level",
    "FSMID_for_test": 66,
    "right_result": "import socket\nimport threading\n\nclass TCPHandler(threading.Thread):\n    def __init__(self, port: int) -> None:\n        super().__init__()\n        self.connected = False\n        self.port = port\n        self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.client = None\n\n    def run(self) -> None:\n        self.socket.bind(('localhost', self.port))\n        self.socket.listen(1)\n        print(f\"Server listening on port {self.port}\")\n        while True:\n            self.client, addr = self.socket.accept()\n            print(f\"Connection from {addr}\")\n            self.connected = True\n            threading.Thread(target=self.listen_command).start()\n\n    def listen_command(self) -> None:\n        while self.connected:\n            cmd = input()\n            if cmd.strip() == 'exit':\n                self.kill()\n                break\n            self.send_command(cmd)\n\n    def send_command(self, cmd: str) -> None:\n        if self.connected and self.client:\n            self.client.sendall(cmd.encode())\n\n    def kill(self) -> None:\n        if self.connected:\n            self.client.close()\n            self.connected = False\n        if self.socket:\n            self.socket.close()"
  },
  {
    "Task_id": 391,
    "Instruction": "Task Description: Create a Python class that implements a basic HTTP server using TCP sockets to handle client connections, process HTTP requests, and send responses.\n\nClass Description: HTTPOutput is a class that provides functionality to create a TCP server, accept client connections, handle HTTP requests, and send responses. It includes methods for server management and HTTP protocol handling.\n\nAttributes:\n- host: str | None - The host address to bind the server to (default: \"127.0.0.1\")\n- port: int - The port number to bind the server to (default: 0 for auto-selection)\n- conn: socket.socket | None - The active client connection socket\n- socket: socket.socket - The server socket\n- request: HTTPRequest | None - The parsed HTTP request object\n\nMethods:\n- addresses() -> list[str] - Property that returns available IP addresses for binding\n- urls() -> Generator[str, None, None] - Property that generates accessible URLs for the server\n- start_server() -> None - Creates and configures the server socket, binds it, and starts listening\n- accept_connection(timeout: int = 30) -> None - Accepts an incoming client connection with optional timeout\n- _open() -> None - Internal method to handle HTTP request parsing and initial response\n- _write(data: bytes) -> None - Sends data to the connected client\n- _close() -> None - Closes the current client connection\n- shutdown() -> None - Properly shuts down the server and cleans up resources",
    "Canonical_solution": "import socket\nfrom contextlib import suppress\nfrom http.server import BaseHTTPRequestHandler\nfrom io import BytesIO\n\nclass HTTPRequest(BaseHTTPRequestHandler):\n    def __init__(self, request_text):\n        self.rfile = BytesIO(request_text)\n        self.raw_requestline = self.rfile.readline()\n        self.error_code = self.error_message = None\n        self.parse_request()\n\n    def send_error(self, code, message=None, explain=None):\n        self.error_code = code\n        self.error_message = message\n\nclass HTTPOutput:\n    def __init__(self, host: str | None = \"127.0.0.1\", port: int = 0) -> None:\n        self.host = host\n        self.port = port\n        self.conn: socket.socket | None = None\n        self.socket: socket.socket = None\n        self.request = None\n\n    @property\n    def addresses(self):\n        if self.host:\n            return [self.host]\n\n        addrs = {\"127.0.0.1\"}\n        with suppress(socket.gaierror):\n            for info in socket.getaddrinfo(socket.gethostname(), self.port, socket.AF_INET):\n                addrs.add(info[4][0])\n\n        return sorted(addrs)\n\n    @property\n    def urls(self):\n        for addr in self.addresses:\n            yield f\"http://{addr}:{self.port}/\"\n\n    def start_server(self):\n        self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        self.socket.bind((self.host or \"\", self.port))\n        self.socket.listen(1)\n        self.host, self.port = self.socket.getsockname()\n        if self.host == \"0.0.0.0\":\n            self.host = None\n\n    def accept_connection(self, timeout=30) -> None:\n        self.socket.settimeout(timeout)\n        try:\n            conn, _addr = self.socket.accept()\n            conn.settimeout(None)\n            self.conn = conn\n        except socket.timeout as err:\n            self.conn = None\n            raise OSError(\"Socket accept timed out\") from err\n\n    def _open(self):\n        conn = self.conn\n        if not conn:\n            raise OSError(\"No client connection\")\n\n        try:\n            req_data = conn.recv(1024)\n        except OSError as err:\n            raise OSError(\"Failed to read data from socket\") from err\n\n        req = HTTPRequest(req_data)\n        if req.command not in (\"GET\", \"HEAD\"):\n            conn.send(b\"HTTP/1.1 501 Not Implemented\\r\\n\")\n            conn.close()\n            raise OSError(f\"Invalid request method: {req.command}\")\n\n        try:\n            conn.send(b\"HTTP/1.1 200 OK\\r\\n\")\n            conn.send(b\"Server: Streamlink\\r\\n\")\n            conn.send(b\"Content-Type: video/unknown\\r\\n\")\n            conn.send(b\"\\r\\n\")\n        except OSError as err:\n            raise OSError(\"Failed to write data to socket\") from err\n\n        if req.command == \"HEAD\":\n            conn.close()\n            raise OSError\n\n        self.request = req\n\n    def _write(self, data):\n        self.conn.sendall(data)\n\n    def _close(self):\n        if self.conn:\n            with suppress(OSError):\n                self.conn.close()\n            self.conn = None\n\n    def shutdown(self) -> None:\n        self._close()\n        with suppress(OSError):\n            self.socket.shutdown(socket.SHUT_RDWR)\n        with suppress(OSError):\n            self.socket.close()",
    "Code_level": "Class-level",
    "FSMID_for_test": 66,
    "right_result": "import socket\nfrom typing import Generator, List, Optional, Any\n\nclass HTTPRequest:\n    def __init__(self, method: str, path: str, version: str):\n        self.method = method\n        self.path = path\n        self.version = version\n\nclass HTTPOutput:\n    def __init__(self, host: Optional[str] = None, port: int = 0):\n        self.host = host\n        self.port = port\n        self.conn = None\n        self.socket = None\n        self.request = None\n\n    @property\n    def addresses(self) -> List[str]:\n        return [socket.gethostbyname(socket.gethostname()), \"127.0.0.1\"]\n\n    @property\n    def urls(self) -> Generator[str, None, None]:\n        yield f\"http://{self.host}:{self.port}/\"\n\n    def start_server(self) -> None:\n        self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        if self.host is None:\n            self.host = \"127.0.0.1\"\n        if self.port == 0:\n            self.port = self.socket.bind((self.host, 0))[1]\n        else:\n            self.socket.bind((self.host, self.port))\n        self.socket.listen(5)\n        print(f\"Server started on {self.host}:{self.port}\")\n\n    def accept_connection(self, timeout: int = 30) -> None:\n        self.conn, addr = self.socket.accept()\n        self.conn.settimeout(timeout)\n        print(f\"Connection from {addr}\")\n\n    def _open(self) -> None:\n        data = self.conn.recv(4096)\n        if not data:\n            return\n        request_line = data.decode().splitlines()[0]\n        method, path, version = request_line.split()\n        self.request = HTTPRequest(method, path, version)\n        self._write(b\"HTTP/1.1 200 OK\\r\\nContent-Type: text/plain\\r\\n\\r\\nHello, World!\")\n\n    def _write(self, data: bytes) -> None:\n        self.conn.sendall(data)\n\n    def _close(self) -> None:\n        if self.conn:\n            self.conn.close()\n            self.conn = None\n\n    def shutdown(self) -> None:\n        self._close()\n        if self.socket:\n            self.socket.close()\n            self.socket = None\n        print(\"Server shutdown complete\")"
  },
  {
    "Task_id": 392,
    "Instruction": "Task Description: Implement a TCP server class in Python that handles client connections, data exchange, and supports various TLS/SSL configurations for secure communication.\n\nClass Description: TLSServerAutomaton is a TCP server implementation that provides secure communication capabilities with configurable TLS parameters. It handles socket creation, binding, client acceptance, data transmission, and cleanup operations.\n\nAttributes:\n\nserversocket: [socket.socket] - The main server socket object\nip_family: [int] - Address family (default: AF_INET)\nlocal_ip: [str] - Local IP address to bind to\nlocal_port: [int] - Local port to bind to\nremote_ip: [str] - Connected client's IP address\nremote_port: [int] - Connected client's port\nclient_auth: [bool] - Flag for client authentication requirement\nis_echo_server: [bool] - Flag to enable echo server behavior\nmax_client_idle_time: [int] - Maximum idle time before disconnecting (seconds)\ncurve: [str] - Preferred elliptic curve for ECDHE\npreferred_ciphersuite: [Optional[int]] - Preferred cipher suite\npreferred_signature_algorithm: [Union[str, int, None]] - Preferred signature algorithm\ncookie: [bool] - Enable DTLS cookie protection\npsk_secret: [Optional[str]] - Pre-shared key secret\npsk_mode: [Optional[str]] - Pre-shared key mode\n\nMethods:\n\nbind_socket() -> [bool] - Creates and binds the server socket, returns success status\naccept_client() -> [None] - Accepts an incoming client connection\nclose_client_socket() -> [None] - Closes the current client connection\nclose_server_socket() -> [None] - Closes the server socket\nreceive_data(timeout: Optional[int] = None) -> [Optional[bytes]] - Receives data from client with optional timeout\nsend_data(data: bytes) -> [bool] - Sends data to client, returns success status\nrun_server() -> [None] - Main server loop that handles client connections and data exchange",
    "Canonical_solution": "import socket\nfrom typing import Optional, Union\n\nclass TLSServerAutomaton:\n    def __init__(self, server=\"127.0.0.1\", sport=4433,\n                 mycert=None, mykey=None,\n                 preferred_ciphersuite: Optional[int] = None,\n                 preferred_signature_algorithm: Union[str, int, None] = None,\n                 client_auth=False,\n                 is_echo_server=True,\n                 max_client_idle_time=60,\n                 handle_session_ticket=None,\n                 session_ticket_file=None,\n                 curve=None,\n                 cookie=False,\n                 psk=None,\n                 psk_mode=None):\n\n        self.serversocket = None\n        self.ip_family = socket.AF_INET\n        self.local_ip = server\n        self.local_port = sport\n        self.remote_ip = None\n        self.remote_port = None\n\n        self.client_auth = client_auth\n        self.is_echo_server = is_echo_server\n        self.max_client_idle_time = max_client_idle_time\n        self.curve = curve\n        self.preferred_ciphersuite = preferred_ciphersuite\n        self.preferred_signature_algorithm = preferred_signature_algorithm\n        self.cookie = cookie\n        self.psk_secret = psk\n        self.psk_mode = psk_mode\n\n    def bind_socket(self):\n        s = socket.socket(self.ip_family, socket.SOCK_STREAM)\n        self.serversocket = s\n        s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        try:\n            s.bind((self.local_ip, self.local_port))\n            s.listen(1)\n            return True\n        except Exception as e:\n            print(f\"Unable to bind on {self.local_ip}:{self.local_port}! ({e})\")\n            return False\n\n    def accept_client(self):\n        self.socket, addr = self.serversocket.accept()\n        if not isinstance(addr, tuple):\n            addr = self.socket.getpeername()\n        if len(addr) > 2:\n            addr = (addr[0], addr[1])\n        self.remote_ip, self.remote_port = addr\n        print(f\"Accepted connection from {self.remote_ip}:{self.remote_port}\")\n\n    def close_client_socket(self):\n        self.socket.close()\n\n    def close_server_socket(self):\n        if self.serversocket:\n            self.serversocket.close()\n\n    def receive_data(self, timeout=None):\n        if timeout:\n            self.socket.settimeout(timeout)\n        try:\n            data = self.socket.recv(4096)\n            return data if data else None\n        except socket.timeout:\n            return None\n        except Exception:\n            return None\n\n    def send_data(self, data):\n        try:\n            self.socket.sendall(data)\n            return True\n        except Exception:\n            return False\n\n    def run_server(self):\n        if not self.bind_socket():\n            return\n\n        try:\n            while True:\n                self.accept_client()\n                try:\n                    while True:\n                        data = self.receive_data(self.max_client_idle_time)\n                        if not data:\n                            break\n                        if self.is_echo_server:\n                            self.send_data(data)\n                finally:\n                    self.close_client_socket()\n        finally:\n            self.close_server_socket()",
    "Code_level": "Class-level",
    "FSMID_for_test": 66,
    "right_result": "import socket\nimport ssl\nimport select\nimport time\n\nclass TLSServerAutomaton:\n    def __init__(self, local_ip=\"0.0.0.0\", local_port=8443, ip_family=socket.AF_INET, client_auth=False, is_echo_server=False, max_client_idle_time=300, curve=None, preferred_ciphersuite=None, preferred_signature_algorithm=None, cookie=False, psk_secret=None, psk_mode=None):\n        self.serversocket = None\n        self.ip_family = ip_family\n        self.local_ip = local_ip\n        self.local_port = local_port\n        self.remote_ip = \"\"\n        self.remote_port = 0\n        self.client_auth = client_auth\n        self.is_echo_server = is_echo_server\n        self.max_client_idle_time = max_client_idle_time\n        self.curve = curve\n        self.preferred_ciphersuite = preferred_ciphersuite\n        self.preferred_signature_algorithm = preferred_signature_algorithm\n        self.cookie = cookie\n        self.psk_secret = psk_secret\n        self.psk_mode = psk_mode\n\n    def bind_socket(self):\n        try:\n            self.serversocket = socket.socket(self.ip_family, socket.SOCK_STREAM)\n            self.serversocket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n            self.serversocket.bind((self.local_ip, self.local_port))\n            self.serversocket.listen(5)\n            return True\n        except Exception as e:\n            print(f\"Failed to bind socket: {e}\")\n            return False\n\n    def accept_client(self):\n        try:\n            client_socket, addr = self.serversocket.accept()\n            self.remote_ip = addr[0]\n            self.remote_port = addr[1]\n            context = ssl.create_default_context(ssl.Purpose.CLIENT_AUTH)\n            if self.client_auth:\n                context.load_cert_chain(certfile=\"server.crt\", keyfile=\"server.key\")\n                context.verify_mode = ssl.CERT_REQUIRED\n                context.check_hostname = True\n            else:\n                context.load_cert_chain(certfile=\"server.crt\", keyfile=\"server.key\")\n            if self.psk_secret and self.psk_mode:\n                context.set_psk_callback(self._psk_callback)\n            if self.curve:\n                context.set_ecdh_curve(self.curve)\n            if self.preferred_ciphersuite:\n                context.set_ciphers(self.preferred_ciphersuite)\n            if self.preferred_signature_algorithm:\n                context.set_signature_algorithms(self.preferred_signature_algorithm)\n            if self.cookie:\n                context.set_cookie_session_id(True)\n            self.ssl_socket = context.wrap_socket(client_socket, server_side=True)\n            return self.ssl_socket\n        except Exception as e:\n            print(f\"Failed to accept client: {e}\")\n            return None\n\n    def close_client_socket(self):\n        if hasattr(self, 'ssl_socket'):\n            self.ssl_socket.close()\n            del self.ssl_socket\n\n    def close_server_socket(self):\n        if self.serversocket:\n            self.serversocket.close()\n            self.serversocket = None\n\n    def receive_data(self, timeout=None):\n        if not hasattr(self, 'ssl_socket'):\n            return None\n        try:\n            data = self.ssl_socket.recv(4096)\n            if not data:\n                return None\n            return data\n        except Exception as e:\n            print(f\"Error receiving data: {e}\")\n            return None\n\n    def send_data(self, data):\n        if not hasattr(self, 'ssl_socket'):\n            return False\n        try:\n            self.ssl_socket.sendall(data)\n            return True\n        except Exception as e:\n            print(f\"Error sending data: {e}\")\n            return False\n\n    def _psk_callback(self, connection, identity):\n        if self.psk_secret:\n            return self.psk_secret.encode('utf-8')\n        return None\n\n    def run_server(self):\n        if not self.bind_socket():\n            return\n        print(f\"Server started on {self.local_ip}:{self.local_port}\")\n        while True:\n            try:\n                self.ssl_socket = self.accept_client()\n                if not self.ssl_socket:\n                    continue\n                print(f\"Accepted connection from {self.remote_ip}:{self.remote_port}\")\n                last_activity = time.time()\n                while True:\n                    readable, _, _ = select.select([self.ssl_socket], [], [], 1)\n                    if readable:\n                        data = self.receive_data()\n                        if not data:\n                            break\n                        if self.is_echo_server:\n                            self.send_data(data)\n                        last_activity = time.time()\n                    if time.time() - last_activity > self.max_client_idle_time:\n                        print(\"Client idle timeout, disconnecting.\")\n                        break\n                self.close_client_socket()\n            except KeyboardInterrupt:\n                print(\"Server shutting down.\")\n                break\n        self.close_server_socket()"
  },
  {
    "Task_id": 395,
    "Instruction": "Task Description: Create a TCP socket server implementation in Python that can handle multiple client connections asynchronously, with support for basic socket operations like accepting connections, sending/receiving data, and reading lines.\n\nClass Description: The implementation consists of two main classes: Listener (for server sockets) and Connection (for client connections), along with supporting event classes for asynchronous operations.\n\nAttributes:\n\nListener:\n- _closed: bool - Flag indicating if the socket is closed\n- host: str - The host address the server is bound to\n- port: int - The port number the server is listening on\n- sock: socket.socket - The underlying TCP socket object\n\nConnection:\n- sock: socket.socket - The connected socket object\n- addr: tuple - The client address (host, port)\n- _buf: bytes - Internal buffer for storing received data\n- _closed: bool - Flag indicating if the connection is closed\n\nMethods:\n\nListener:\n- __init__(host: str, port: int) -> None - Creates and binds a TCP socket to the specified host and port\n- accept() -> AcceptEvent - Returns an event that waits for and accepts incoming connections\n- close() -> None - Immediately closes the listening socket\n\nConnection:\n- __init__(sock: socket.socket, addr: tuple) -> None - Initializes a new connection with given socket and address\n- close() -> None - Closes the connection\n- recv(size: int) -> ReceiveEvent - Returns an event that receives up to size bytes of data\n- send(data: bytes) -> SendEvent - Returns an event that sends data (returns bytes sent)\n- sendall(data: bytes) -> SendEvent - Returns an event that sends all data\n- readline(terminator: bytes = b\"\\n\", bufsize: int = 1024) -> Generator[ReturnEvent, None, None] - Returns a generator that yields events to read a line\n\nSupporting Event Classes:\n- AcceptEvent(listener: Listener) - Event for accepting connections\n- ReceiveEvent(conn: Connection, bufsize: int) - Event for receiving data\n- SendEvent(conn: Connection, data: bytes, sendall: bool = False) - Event for sending data\n- WaitableEvent - Base class for all waitable events\n- ReturnEvent(value: Any) - Event for returning a value",
    "Canonical_solution": "import socket\nimport select\nimport time\nimport types\nimport collections\nimport errno\nimport sys\nimport traceback\n\nclass Listener:\n    \"\"\"A socket wrapper object for listening sockets.\"\"\"\n\n    def __init__(self, host, port):\n        \"\"\"Create a listening socket on the given hostname and port.\"\"\"\n        self._closed = False\n        self.host = host\n        self.port = port\n        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        self.sock.bind((host, port))\n        self.sock.listen(5)\n\n    def accept(self):\n        \"\"\"An event that waits for a connection on the listening socket.\n        When a connection is made, the event returns a Connection\n        object.\n        \"\"\"\n        if self._closed:\n            raise SocketClosedError()\n        return AcceptEvent(self)\n\n    def close(self):\n        \"\"\"Immediately close the listening socket. (Not an event.)\"\"\"\n        self._closed = True\n        self.sock.close()\n\nclass Connection:\n    \"\"\"A socket wrapper object for connected sockets.\"\"\"\n\n    def __init__(self, sock, addr):\n        self.sock = sock\n        self.addr = addr\n        self._buf = b\"\"\n        self._closed = False\n\n    def close(self):\n        \"\"\"Close the connection.\"\"\"\n        self._closed = True\n        self.sock.close()\n\n    def recv(self, size):\n        \"\"\"Read at most size bytes of data from the socket.\"\"\"\n        if self._closed:\n            raise SocketClosedError()\n\n        if self._buf:\n            out = self._buf[:size]\n            self._buf = self._buf[size:]\n            return ValueEvent(out)\n        else:\n            return ReceiveEvent(self, size)\n\n    def send(self, data):\n        \"\"\"Sends data on the socket, returning the number of bytes\n        successfully sent.\n        \"\"\"\n        if self._closed:\n            raise SocketClosedError()\n        return SendEvent(self, data)\n\n    def sendall(self, data):\n        \"\"\"Send all of data on the socket.\"\"\"\n        if self._closed:\n            raise SocketClosedError()\n        return SendEvent(self, data, True)\n\n    def readline(self, terminator=b\"\\n\", bufsize=1024):\n        \"\"\"Reads a line (delimited by terminator) from the socket.\"\"\"\n        if self._closed:\n            raise SocketClosedError()\n\n        while True:\n            if terminator in self._buf:\n                line, self._buf = self._buf.split(terminator, 1)\n                line += terminator\n                yield ReturnEvent(line)\n                break\n            data = yield ReceiveEvent(self, bufsize)\n            if data:\n                self._buf += data\n            else:\n                line = self._buf\n                self._buf = b\"\"\n                yield ReturnEvent(line)\n                break\n\nclass AcceptEvent(WaitableEvent):\n    \"\"\"An event for Listener objects (listening sockets) that suspends\n    execution until the socket gets a connection.\n    \"\"\"\n\n    def __init__(self, listener):\n        self.listener = listener\n\n    def waitables(self):\n        return (self.listener.sock,), (), ()\n\n    def fire(self):\n        sock, addr = self.listener.sock.accept()\n        return Connection(sock, addr)\n\nclass ReceiveEvent(WaitableEvent):\n    \"\"\"An event for Connection objects (connected sockets) for\n    asynchronously reading data.\n    \"\"\"\n\n    def __init__(self, conn, bufsize):\n        self.conn = conn\n        self.bufsize = bufsize\n\n    def waitables(self):\n        return (self.conn.sock,), (), ()\n\n    def fire(self):\n        return self.conn.sock.recv(self.bufsize)\n\nclass SendEvent(WaitableEvent):\n    \"\"\"An event for Connection objects (connected sockets) for\n    asynchronously writing data.\n    \"\"\"\n\n    def __init__(self, conn, data, sendall=False):\n        self.conn = conn\n        self.data = data\n        self.sendall = sendall\n\n    def waitables(self):\n        return (), (self.conn.sock,), ()\n\n    def fire(self):\n        if self.sendall:\n            return self.conn.sock.sendall(self.data)\n        else:\n            return self.conn.sock.send(self.data)",
    "Code_level": "Class-level",
    "FSMID_for_test": 66,
    "right_result": "import socket\nimport select\nfrom threading import Thread\n\nclass WaitableEvent:\n    def __init__(self):\n        self._result = None\n        self._callbacks = []\n\n    def set_result(self, result):\n        self._result = result\n        for callback in self._callbacks:\n            callback()\n\n    def add_callback(self, callback):\n        self._callbacks.append(callback)\n\n    def wait(self):\n        while self._result is None:\n            pass\n        return self._result\n\nclass AcceptEvent(WaitableEvent):\n    def __init__(self, listener):\n        super().__init__()\n        self.listener = listener\n\nclass ReceiveEvent(WaitableEvent):\n    def __init__(self, conn, bufsize):\n        super().__init__()\n        self.conn = conn\n        self.bufsize = bufsize\n\nclass SendEvent(WaitableEvent):\n    def __init__(self, conn, data, sendall):\n        super().__init__()\n        self.conn = conn\n        self.data = data\n        self.sendall = sendall\n\nclass ReturnEvent(WaitableEvent):\n    def __init__(self, value):\n        super().__init__()\n        self.set_result(value)\n\nclass Listener:\n    def __init__(self, host, port):\n        self._closed = False\n        self.host = host\n        self.port = port\n        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.sock.bind((host, port))\n        self.sock.listen(5)\n\n    def accept(self):\n        accept_event = AcceptEvent(self)\n        Thread(target=self._accept_task, args=(accept_event,)).start()\n        return accept_event\n\n    def close(self):\n        self._closed = True\n        self.sock.close()\n\n    def _accept_task(self, event):\n        while not self._closed:\n            try:\n                sock, addr = self.sock.accept()\n                conn = Connection(sock, addr)\n                event.set_result(conn)\n                break\n            except socket.error:\n                continue\n\nclass Connection:\n    def __init__(self, sock, addr):\n        self.sock = sock\n        self.addr = addr\n        self._buf = b''\n        self._closed = False\n\n    def close(self):\n        self._closed = True\n        self.sock.close()\n\n    def recv(self, size):\n        receive_event = ReceiveEvent(self, size)\n        Thread(target=self._recv_task, args=(receive_event, size)).start()\n        return receive_event\n\n    def send(self, data):\n        send_event = SendEvent(self, data, False)\n        Thread(target=self._send_task, args=(send_event, data, False)).start()\n        return send_event\n\n    def sendall(self, data):\n        send_event = SendEvent(self, data, True)\n        Thread(target=self._send_task, args=(send_event, data, True)).start()\n        return send_event\n\n    def readline(self, terminator=b\"\\n\", bufsize=1024):\n        while True:\n            yield ReturnEvent(self._buf)\n            if self._closed:\n                break\n            read_event = ReceiveEvent(self, bufsize)\n            Thread(target=self._recv_task, args=(read_event, bufsize)).start()\n            data = read_event.wait()\n            if terminator in data:\n                idx = data.find(terminator)\n                self._buf = data[idx + len(terminator):]\n                yield ReturnEvent(data[:idx + len(terminator)])\n            else:\n                self._buf += data\n                yield ReturnEvent(data)\n\n    def _recv_task(self, event, bufsize):\n        try:\n            data = self.sock.recv(bufsize)\n            if data:\n                event.set_result(data)\n            else:\n                event.set_result(b'')\n        except socket.error:\n            event.set_result(b'')\n\n    def _send_task(self, event, data, sendall):\n        total_sent = 0\n        while total_sent < len(data):\n            sent = self.sock.send(data[total_sent:])\n            if sent == 0:\n                break\n            total_sent += sent\n        event.set_result(total_sent if sendall else data)"
  },
  {
    "Task_id": 396,
    "Instruction": "Task Description: Implement a TCP server in Python that handles multiple client connections asynchronously using sockets and selectors for efficient I/O multiplexing.\n\nClass Description: NetworkThread is a threading-based TCP server implementation that manages peer-to-peer connections, handles incoming and outgoing data, and processes network events asynchronously.\n\nAttributes:\n- pending_shutdown: [bool] - Flag indicating if the server is shutting down\n- upload_speed: [int] - Current upload speed limit\n- token: [str] - Authentication token for server connections\n- _pending_network_msgs: [deque] - Queue for pending network messages\n- _user_update_counter: [int] - Counter for user updates\n- _user_update_counters: [dict] - Dictionary of user-specific update counters\n- _upload_queue_timer_id: [int] - Timer ID for upload queue processing\n- _retry_failed_uploads_timer_id: [int] - Timer ID for retrying failed uploads\n- _message_queue: [deque] - Queue for internal messages\n- _pending_peer_conns: [dict] - Dictionary of pending peer connections\n- _pending_init_msgs: [defaultdict] - Dictionary of pending initialization messages\n- _token_init_msgs: [dict] - Dictionary of token-based initialization messages\n- _username_init_msgs: [dict] - Dictionary of username-based initialization messages\n- _user_addresses: [dict] - Dictionary mapping usernames to addresses\n- _should_process_queue: [bool] - Flag for message queue processing\n- _want_abort: [bool] - Flag for thread termination\n- _selector: [selectors.DefaultSelector] - I/O multiplexing selector\n- _listen_socket: [socket.socket] - Main listening socket\n- _listen_port: [int] - Listening port number\n- _interface_name: [str] - Network interface name\n- _interface_address: [str] - Network interface IP address\n- _portmapper: [object] - Port mapping service reference\n- _local_ip_address: [str] - Local IP address\n- _server_conn: [Connection] - Server connection object\n- _server_address: [tuple] - Server address (IP, port)\n- _server_username: [str] - Server username\n- _server_timeout_time: [float] - Server timeout timestamp\n- _server_timeout_value: [int] - Server timeout duration\n- _manual_server_disconnect: [bool] - Manual disconnect flag\n- _manual_server_reconnect: [bool] - Manual reconnect flag\n- _server_relogged: [bool] - Server reconnection flag\n- _num_sockets: [int] - Current number of active sockets\n- _last_cycle_time: [float] - Last processing cycle timestamp\n- _conns: [dict] - Dictionary of active connections\n\nMethods:\n- _create_listen_socket() -> [bool] - Creates and configures the listening socket\n- _bind_listen_port() -> [bool] - Binds the socket to the specified port and interface\n- _accept_incoming_peer_connections() -> [None] - Accepts new client connections\n- _init_peer_connection(addr: tuple, init: object, response_token: str=None) -> [None] - Initializes outgoing peer connection\n- _process_ready_sockets(current_time: float) -> [None] - Processes ready sockets using selector\n- _process_ready_input_socket(sock: socket.socket, current_time: float) -> [None] - Handles socket read events\n- _process_ready_output_socket(sock: socket.socket, current_time: float) -> [None] - Handles socket write events\n- _read_data(conn: Connection, current_time: float) -> [bool] - Reads data from connection\n- _write_data(conn: Connection, current_time: float) -> [bool] - Writes data to connection\n- _modify_connection_events(conn: Connection, io_events: int) -> [None] - Modifies socket event monitoring\n- _close_connection(conn: Connection) -> [None] - Closes and cleans up a connection\n- _close_socket(sock: socket.socket) -> [None] - Safely closes a socket\n- run() -> [None] - Main thread execution loop",
    "Canonical_solution": "import errno\nimport selectors\nimport socket\nimport time\nfrom collections import defaultdict\nfrom collections import deque\nfrom os import strerror\nfrom threading import Thread\n\nclass NetworkThread(Thread):\n    \"\"\"This is the networking thread that does all the communication with the\n    Soulseek server and peers. Communication with the core is done through\n    events.\"\"\"\n\n    __slots__ = (\"pending_shutdown\", \"upload_speed\", \"token\", \"_pending_network_msgs\",\n                 \"_user_update_counter\", \"_user_update_counters\", \"_upload_queue_timer_id\",\n                 \"_retry_failed_uploads_timer_id\")\n\n    CONNECTION_BACKLOG_LENGTH = 65535\n    ERROR_NOT_CONNECTED = OSError(errno.ENOTCONN, strerror(errno.ENOTCONN))\n    ERROR_TIMED_OUT = OSError(errno.ETIMEDOUT, strerror(errno.ETIMEDOUT))\n\n    def __init__(self):\n        super().__init__(name=\"NetworkThread\")\n        self._message_queue = deque()\n        self._pending_peer_conns = {}\n        self._pending_init_msgs = defaultdict(list)\n        self._token_init_msgs = {}\n        self._username_init_msgs = {}\n        self._user_addresses = {}\n        self._should_process_queue = False\n        self._want_abort = False\n        self._selector = None\n        self._listen_socket = None\n        self._listen_port = None\n        self._interface_name = None\n        self._interface_address = None\n        self._portmapper = None\n        self._local_ip_address = \"\"\n        self._server_conn = None\n        self._server_address = None\n        self._server_username = None\n        self._server_timeout_time = None\n        self._server_timeout_value = -1\n        self._manual_server_disconnect = False\n        self._manual_server_reconnect = False\n        self._server_relogged = False\n        self._num_sockets = 0\n        self._last_cycle_time = 0\n        self._conns = {}\n\n    def _create_listen_socket(self):\n        self._listen_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self._listen_socket.setblocking(False)\n        self._num_sockets += 1\n\n        if sys.platform != \"win32\":\n            self._listen_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n\n        if not self._bind_listen_port():\n            self._close_listen_socket()\n            return False\n\n        self._selector.register(self._listen_socket, selectors.EVENT_READ)\n        return True\n\n    def _bind_listen_port(self):\n        if not self._bind_socket_interface(self._listen_socket):\n            return False\n\n        try:\n            ip_address = self._interface_address or self._find_local_ip_address()\n            self._listen_socket.bind((ip_address, self._listen_port))\n            self._listen_socket.listen(self.CONNECTION_BACKLOG_LENGTH)\n        except OSError as error:\n            self._listen_port = None\n            return False\n\n        self._local_ip_address = ip_address\n        return True\n\n    def _accept_incoming_peer_connections(self):\n        while True:\n            try:\n                incoming_sock, incoming_addr = self._listen_socket.accept()\n                incoming_sock.setblocking(False)\n                incoming_sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n            except OSError as error:\n                if error.errno == errno.EWOULDBLOCK:\n                    break\n                continue\n\n            io_events = selectors.EVENT_READ\n            conn = self._conns[incoming_sock] = PeerConnection(\n                sock=incoming_sock, addr=incoming_addr, io_events=io_events\n            )\n            self._num_sockets += 1\n            self._selector.register(incoming_sock, io_events)\n            conn.is_established = True\n\n    def _init_peer_connection(self, addr, init, response_token=None):\n        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        io_events = selectors.EVENT_READ | selectors.EVENT_WRITE\n        conn = PeerConnection(\n            sock=sock, addr=addr, io_events=io_events,\n            init=init, request_token=None, response_token=response_token\n        )\n\n        sock.setblocking(False)\n        sock.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n\n        try:\n            self._bind_socket_interface(sock)\n            sock.connect_ex(addr)\n        except OSError as error:\n            self._close_socket(sock)\n            return\n\n        init.sock = sock\n        self._conns[sock] = conn\n        self._selector.register(sock, io_events)\n        self._num_sockets += 1\n\n    def _process_ready_sockets(self, current_time):\n        if self._listen_socket is None:\n            return\n\n        for key, io_events in self._selector.select(timeout=0.05):\n            sock = key.fileobj\n\n            if io_events & selectors.EVENT_READ:\n                if sock is self._listen_socket:\n                    self._accept_incoming_peer_connections()\n                    continue\n                self._process_ready_input_socket(sock, current_time)\n\n            if io_events & selectors.EVENT_WRITE:\n                self._process_ready_output_socket(sock, current_time)\n\n    def _process_ready_input_socket(self, sock, current_time):\n        conn = self._conns.get(sock)\n        if not conn:\n            return\n\n        try:\n            if self._read_data(conn, current_time):\n                self._process_conn_incoming_messages(conn)\n                return\n        except OSError as error:\n            pass\n\n        self._close_connection(conn)\n\n    def _process_ready_output_socket(self, sock, current_time):\n        conn = self._conns.get(sock)\n        if not conn:\n            return\n\n        if not conn.is_established:\n            if conn is self._server_conn:\n                self._establish_outgoing_server_connection(conn)\n            else:\n                self._establish_outgoing_peer_connection(conn)\n            return\n\n        try:\n            if not self._write_data(conn, current_time):\n                self._close_connection(conn)\n        except (OSError, ValueError):\n            self._close_connection(conn)\n\n    def _read_data(self, conn, current_time):\n        data = conn.sock.recv(conn.recv_size)\n        if not data:\n            return False\n\n        conn.in_buffer += data\n        conn.last_active = current_time\n        return True\n\n    def _write_data(self, conn, current_time):\n        num_bytes_sent = conn.sock.send(conn.out_buffer)\n        del conn.out_buffer[:num_bytes_sent]\n\n        if not conn.out_buffer:\n            self._modify_connection_events(conn, selectors.EVENT_READ)\n\n        conn.last_active = current_time\n        return True\n\n    def _modify_connection_events(self, conn, io_events):\n        if conn.io_events != io_events:\n            self._selector.modify(conn.sock, io_events)\n            conn.io_events = io_events\n\n    def _close_connection(self, conn):\n        if not conn:\n            return\n\n        sock = conn.sock\n        del self._conns[sock]\n\n        self._selector.unregister(sock)\n        self._close_socket(sock)\n        self._num_sockets -= 1\n\n    @staticmethod\n    def _close_socket(sock):\n        try:\n            sock.shutdown(socket.SHUT_RDWR)\n        except OSError:\n            pass\n        sock.close()\n\n    def run(self):\n        self._selector = selectors.DefaultSelector()\n        try:\n            while not self._want_abort:\n                current_time = time.monotonic()\n                self._process_queue_messages()\n                self._process_ready_sockets(current_time)\n                time.sleep(0.004)\n        finally:\n            self._selector.close()\n\nclass Connection:\n    __slots__ = (\"sock\", \"addr\", \"io_events\", \"is_established\", \"in_buffer\", \"out_buffer\",\n                 \"last_active\", \"recv_size\")\n\n    def __init__(self, sock=None, addr=None, io_events=None):\n        self.sock = sock\n        self.addr = addr\n        self.io_events = io_events\n        self.in_buffer = bytearray()\n        self.out_buffer = bytearray()\n        self.last_active = time.monotonic()\n        self.recv_size = 51200\n        self.is_established = False\n\nclass PeerConnection(Connection):\n    __slots__ = (\"init\", \"request_token\", \"response_token\", \"has_post_init_activity\")\n\n    def __init__(self, *args, init=None, request_token=None, response_token=None, **kwargs):\n        Connection.__init__(self, *args, **kwargs)\n        self.init = init\n        self.request_token = request_token\n        self.response_token = response_token\n        self.has_post_init_activity = False",
    "Code_level": "Class-level",
    "FSMID_for_test": 66,
    "right_result": "import socket\nimport selectors\nimport threading\nimport time\nimport queue\nfrom collections import deque, defaultdict\n\nclass NetworkThread(threading.Thread):\n    def __init__(self):\n        super().__init__()\n        self.pending_shutdown = False\n        self.upload_speed = 0\n        self.token = \"\"\n        self._pending_network_msgs = deque()\n        self._user_update_counter = 0\n        self._user_update_counters = {}\n        self._upload_queue_timer_id = 0\n        self._retry_failed_uploads_timer_id = 0\n        self._message_queue = deque()\n        self._pending_peer_conns = {}\n        self._pending_init_msgs = defaultdict(list)\n        self._token_init_msgs = {}\n        self._username_init_msgs = {}\n        self._user_addresses = {}\n        self._should_process_queue = False\n        self._want_abort = False\n        self._selector = selectors.DefaultSelector()\n        self._listen_socket = None\n        self._listen_port = 0\n        self._interface_name = \"\"\n        self._interface_address = \"\"\n        self._portmapper = None\n        self._local_ip_address = \"\"\n        self._server_conn = None\n        self._server_address = (\"\", 0)\n        self._server_username = \"\"\n        self._server_timeout_time = 0.0\n        self._server_timeout_value = 0\n        self._manual_server_disconnect = False\n        self._manual_server_reconnect = False\n        self._server_relogged = False\n        self._num_sockets = 0\n        self._last_cycle_time = 0.0\n        self._conns = {}\n\n    def _create_listen_socket(self):\n        try:\n            self._listen_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n            self._listen_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n            return True\n        except Exception as e:\n            print(f\"Error creating listen socket: {e}\")\n            return False\n\n    def _bind_listen_port(self):\n        try:\n            self._listen_socket.bind((self._interface_address, self._listen_port))\n            self._listen_socket.listen(100)\n            self._selector.register(self._listen_socket, selectors.EVENT_READ)\n            self._num_sockets += 1\n            return True\n        except Exception as e:\n            print(f\"Error binding listen port: {e}\")\n            return False\n\n    def _accept_incoming_peer_connections(self):\n        for key, sock in self._selector.select(timeout=0.1):\n            if key.fileobj == self._listen_socket:\n                conn, addr = sock.accept()\n                conn.setblocking(False)\n                self._selector.register(conn, selectors.EVENT_READ | selectors.EVENT_WRITE)\n                self._num_sockets += 1\n                self._conns[conn] = {\"address\": addr, \"state\": \"new\"}\n                self._pending_peer_conns[addr] = {\"conn\": conn, \"init\": None, \"response_token\": None}\n\n    def _init_peer_connection(self, addr, init, response_token=None):\n        if addr in self._pending_peer_conns:\n            pending = self._pending_peer_conns[addr]\n            pending[\"init\"] = init\n            pending[\"response_token\"] = response_token\n            self._selector.modify(pending[\"conn\"], selectors.EVENT_READ | selectors.EVENT_WRITE)\n\n    def _process_ready_sockets(self, current_time):\n        for key, mask in self._selector.select(timeout=0.1):\n            sock = key.fileobj\n            if sock == self._listen_socket:\n                self._accept_incoming_peer_connections()\n            else:\n                conn_data = self._conns.get(sock)\n                if not conn_data:\n                    continue\n                if mask & selectors.EVENT_READ:\n                    self._process_ready_input_socket(sock, current_time)\n                if mask & selectors.EVENT_WRITE:\n                    self._process_ready_output_socket(sock, current_time)\n\n    def _process_ready_input_socket(self, sock, current_time):\n        conn_data = self._conns.get(sock)\n        if not conn_data:\n            return\n        conn = conn_data.get(\"conn\")\n        data = conn.recv(4096)\n        if not data:\n            self._close_connection(conn)\n            return\n        self._read_data(conn, current_time)\n\n    def _process_ready_output_socket(self, sock, current_time):\n        conn_data = self._conns.get(sock)\n        if not conn_data:\n            return\n        conn = conn_data.get(\"conn\")\n        self._write_data(conn, current_time)\n\n    def _read_data(self, conn, current_time):\n        pass\n\n    def _write_data(self, conn, current_time):\n        pass\n\n    def _modify_connection_events(self, conn, io_events):\n        self._selector.modify(conn, io_events)\n\n    def _close_connection(self, conn):\n        if conn in self._conns:\n            del self._conns[conn]\n            self._selector.unregister(conn)\n            self._close_socket(conn)\n            self._num_sockets -= 1\n\n    def _close_socket(self, sock):\n        try:\n            sock.close()\n        except Exception as e:\n            print(f\"Error closing socket: {e}\")\n\n    def run(self):\n        while not self.pending_shutdown and not self._want_abort:\n            current_time = time.time()\n            if self._should_process_queue:\n                self._process_message_queue(current_time)\n            self._process_ready_sockets(current_time)\n            self._last_cycle_time = current_time\n            time.sleep(0.01)"
  },
  {
    "Task_id": 397,
    "Instruction": "Task Description: Create a Python function that implements a TCP server which listens for client connections and sends the current server time upon connection.\n\nFunction Description: The function sets up a TCP server socket using IPv4, binds it to a specified IP address and port, listens for incoming connections, and sends the current datetime to each connected client before closing the connection. The server runs indefinitely until manually stopped.\n\nInput: None\n\nOutput: None (The function runs indefinitely, printing connection messages to console and sending datetime to clients)",
    "Canonical_solution": "from socket import socket, SOCK_STREAM, AF_INET\nfrom datetime import datetime\n\ndef main():\n    server = socket(family=AF_INET, type=SOCK_STREAM)\n    server.bind(('192.168.1.2', 6789))\n    server.listen(512)\n    print('\u670d\u52a1\u5668\u542f\u52a8\u5f00\u59cb\u76d1\u542c...')\n    while True:\n        client, addr = server.accept()\n        print(str(addr) + '\u8fde\u63a5\u5230\u4e86\u670d\u52a1\u5668.')\n        client.send(str(datetime.now()).encode('utf-8'))\n        client.close()",
    "Code_level": "Function-level",
    "FSMID_for_test": 66,
    "right_result": "import socket\nimport datetime\n\ndef start_tcp_server():\n    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    server_socket.bind(('0.0.0.0', 9999))\n    server_socket.listen(5)\n    print(\"Server is listening on port 9999...\")\n\n    while True:\n        client_socket, addr = server_socket.accept()\n        print(f\"Connection from {addr}\")\n\n        current_time = datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n        client_socket.send(current_time.encode('utf-8'))\n        client_socket.close()"
  },
  {
    "Task_id": 398,
    "Instruction": "Task Description: Implement a TCP server function that handles client connections, performs data exchange, and measures performance statistics during the exchange.\n\nFunction Description: The function `server_once` establishes a TCP server that listens for incoming client connections, exchanges parameters with the client, performs data transfer (either sending or receiving based on parameters), collects performance statistics, exchanges results with the client, and finally closes the connection. The function handles both TCP and UDP protocols based on client parameters and includes debugging capabilities.\n\nInput: \n- None (The function uses global constants and variables for configuration)\n  - DEBUG: bool - Flag to enable debug output\n  - COOKIE_SIZE: int - Size of the cookie for client verification\n  - PARAM_EXCHANGE, CREATE_STREAMS, TEST_START, TEST_RUNNING, TEST_END, EXCHANGE_RESULTS, DISPLAY_RESULTS, IPERF_DONE: int - Command codes for protocol control\n\nOutput: \n- None (The function performs operations and outputs results to console/logs but doesn't return any value)\n  - Prints server status and debug information to console\n  - Outputs performance statistics when complete",
    "Canonical_solution": "import json\nimport select\nimport socket\nimport struct\nimport time\n\ndef server_once():\n    # Listen for a connection\n    ai = socket.getaddrinfo(\"0.0.0.0\", 5201)\n    ai = ai[0]\n    print(\"Server listening on\", ai[-1])\n    s_listen = socket.socket(ai[0], socket.SOCK_STREAM)\n    s_listen.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n    s_listen.bind(ai[-1])\n    s_listen.listen(1)\n    s_ctrl, addr = s_listen.accept()\n\n    # Read client's cookie\n    cookie = recvn(s_ctrl, COOKIE_SIZE)\n    if DEBUG:\n        print(cookie)\n\n    # Ask for parameters\n    s_ctrl.sendall(bytes([PARAM_EXCHANGE]))\n\n    # Get parameters\n    n = struct.unpack(\">I\", recvn(s_ctrl, 4))[0]\n    param = recvn(s_ctrl, n)\n    param = json.loads(str(param, \"ascii\"))\n    if DEBUG:\n        print(param)\n    reverse = param.get(\"reverse\", False)\n\n    # Ask to create streams\n    s_ctrl.sendall(bytes([CREATE_STREAMS]))\n\n    if param.get(\"tcp\", False):\n        # Accept stream\n        s_data, addr = s_listen.accept()\n        print(\"Accepted connection:\", addr)\n        recvn(s_data, COOKIE_SIZE)\n    elif param.get(\"udp\", False):\n        # Close TCP connection and open UDP \"connection\"\n        s_listen.close()\n        s_data = socket.socket(ai[0], socket.SOCK_DGRAM)\n        s_data.bind(ai[-1])\n        data, addr = s_data.recvfrom(4)\n        s_data.sendto(b\"\\x12\\x34\\x56\\x78\", addr)\n    else:\n        assert False\n\n    # Start test\n    s_ctrl.sendall(bytes([TEST_START]))\n\n    # Run test\n    s_ctrl.sendall(bytes([TEST_RUNNING]))\n\n    # Read data, and wait for client to send TEST_END\n    poll = select.poll()\n    poll.register(s_ctrl, select.POLLIN)\n    if reverse:\n        poll.register(s_data, select.POLLOUT)\n    else:\n        poll.register(s_data, select.POLLIN)\n    stats = Stats(param)\n    stats.start()\n    running = True\n    data_buf = bytearray(urandom(param[\"len\"]))\n    while running:\n        for pollable in poll.poll(stats.max_dt_ms()):\n            if pollable_is_sock(pollable, s_ctrl):\n                cmd = recvn(s_ctrl, 1)[0]\n                if DEBUG:\n                    print(cmd_string.get(cmd, \"UNKNOWN_COMMAND\"))\n                if cmd == TEST_END:\n                    running = False\n            elif pollable_is_sock(pollable, s_data):\n                if reverse:\n                    n = s_data.send(data_buf)\n                    stats.add_bytes(n)\n                else:\n                    recvninto(s_data, data_buf)\n                    stats.add_bytes(len(data_buf))\n        stats.update()\n\n    # Need to continue writing so other side doesn't get blocked waiting for data\n    if reverse:\n        while True:\n            for pollable in poll.poll(0):\n                if pollable_is_sock(pollable, s_data):\n                    s_data.send(data_buf)\n                    break\n            else:\n                break\n\n    stats.stop()\n\n    # Ask to exchange results\n    s_ctrl.sendall(bytes([EXCHANGE_RESULTS]))\n\n    # Get client results\n    n = struct.unpack(\">I\", recvn(s_ctrl, 4))[0]\n    results = recvn(s_ctrl, n)\n    results = json.loads(str(results, \"ascii\"))\n    if DEBUG:\n        print(results)\n\n    # Send our results\n    results = {\n        \"cpu_util_total\": 1,\n        \"cpu_util_user\": 0.5,\n        \"cpu_util_system\": 0.5,\n        \"sender_has_retransmits\": 1,\n        \"congestion_used\": \"cubic\",\n        \"streams\": [\n            {\n                \"id\": 1,\n                \"bytes\": stats.nb0,\n                \"retransmits\": 0,\n                \"jitter\": 0,\n                \"errors\": 0,\n                \"packets\": stats.np0,\n                \"start_time\": 0,\n                \"end_time\": ticks_diff(stats.t3, stats.t0) * 1e-6,\n            }\n        ],\n    }\n    results = json.dumps(results)\n    s_ctrl.sendall(struct.pack(\">I\", len(results)))\n    s_ctrl.sendall(bytes(results, \"ascii\"))\n\n    # Ask to display results\n    s_ctrl.sendall(bytes([DISPLAY_RESULTS]))\n\n    # Wait for client to send IPERF_DONE\n    cmd = recvn(s_ctrl, 1)[0]\n    assert cmd == IPERF_DONE\n\n    # Close all sockets\n    s_data.close()\n    s_ctrl.close()\n    s_listen.close()",
    "Code_level": "Function-level",
    "FSMID_for_test": 66,
    "right_result": "import socket\nimport time\nimport struct\nimport threading\nimport select\n\nDEBUG = True\nCOOKIE_SIZE = 16\nPARAM_EXCHANGE = 0\nCREATE_STREAMS = 1\nTEST_START = 2\nTEST_RUNNING = 3\nTEST_END = 4\nEXCHANGE_RESULTS = 5\nDISPLAY_RESULTS = 6\nIPERF_DONE = 7\n\ndef server_once():\n    global DEBUG, COOKIE_SIZE, PARAM_EXCHANGE, CREATE_STREAMS, TEST_START, TEST_RUNNING, TEST_END, EXCHANGE_RESULTS, DISPLAY_RESULTS, IPERF_DONE\n\n    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n    server_socket.bind(('0.0.0.0', 5000))\n    server_socket.listen(5)\n    print(\"Server started and listening on port 5000\")\n\n    while True:\n        client_socket, addr = server_socket.accept()\n        print(f\"Accepted connection from {addr}\")\n\n        if DEBUG:\n            print(\"Starting parameter exchange with client\")\n\n        try:\n            cookie = b'\\x00' * COOKIE_SIZE\n            client_socket.sendall(cookie)\n\n            data = b''\n            while len(data) < COOKIE_SIZE:\n                packet = client_socket.recv(4096)\n                if not packet:\n                    break\n                data += packet\n\n            if len(data) < COOKIE_SIZE:\n                print(\"Cookie verification failed\")\n                client_socket.close()\n                continue\n\n            if data[:COOKIE_SIZE] != cookie:\n                print(\"Cookie mismatch, closing connection\")\n                client_socket.close()\n                continue\n\n            if DEBUG:\n                print(\"Cookie verified successfully\")\n\n            command = client_socket.recv(4)\n            command = struct.unpack('!I', command)[0]\n\n            if command == PARAM_EXCHANGE:\n                if DEBUG:\n                    print(\"Received parameter exchange command\")\n\n                param_data = client_socket.recv(1024)\n                if not param_data:\n                    print(\"Parameter exchange failed\")\n                    client_socket.close()\n                    continue\n\n                if DEBUG:\n                    print(f\"Received parameters: {param_data}\")\n\n                if param_data[0] == CREATE_STREAMS:\n                    if DEBUG:\n                        print(\"Creating streams\")\n\n                    start_time = time.time()\n                    test_data = b'\\x00' * 1024\n                    sent_bytes = 0\n                    while True:\n                        ready = select.select([client_socket], [], [], 1)\n                        if ready[0]:\n                            bytes_sent = client_socket.send(test_data)\n                            sent_bytes += bytes_sent\n                            if sent_bytes >= 1024 * 1024:\n                                break\n                        else:\n                            if time.time() - start_time > 10:\n                                break\n\n                    end_time = time.time()\n                    duration = end_time - start_time\n                    throughput = sent_bytes / duration\n                    if DEBUG:\n                        print(f\"Test completed in {duration:.2f} seconds, throughput: {throughput:.2f} bytes/sec\")\n\n                    client_socket.send(struct.pack('!I', TEST_END))\n                    client_socket.send(struct.pack('!d', throughput))\n\n                    if DEBUG:\n                        print(\"Results exchanged with client\")\n\n                elif param_data[0] == TEST_START:\n                    if DEBUG:\n                        print(\"Starting test\")\n\n                    start_time = time.time()\n                    test_data = b'\\x00' * 1024\n                    sent_bytes = 0\n                    while True:\n                        ready = select.select([client_socket], [], [], 1)\n                        if ready[0]:\n                            bytes_sent = client_socket.send(test_data)\n                            sent_bytes += bytes_sent\n                            if sent_bytes >= 1024 * 1024:\n                                break\n                        else:\n                            if time.time() - start_time > 10:\n                                break\n\n                    end_time = time.time()\n                    duration = end_time - start_time\n                    throughput = sent_bytes / duration\n                    if DEBUG:\n                        print(f\"Test completed in {duration:.2f} seconds, throughput: {throughput:.2f} bytes/sec\")\n\n                    client_socket.send(struct.pack('!I', TEST_END))\n                    client_socket.send(struct.pack('!d', throughput))\n\n                    if DEBUG:\n                        print(\"Results exchanged with client\")\n\n                elif param_data[0] == TEST_RUNNING:\n                    if DEBUG:\n                        print(\"Test is running\")\n\n                    test_data = b'\\x00' * 1024\n                    sent_bytes = 0\n                    while True:\n                        ready = select.select([client_socket], [], [], 1)\n                        if ready[0]:\n                            bytes_sent = client_socket.send(test_data)\n                            sent_bytes += bytes_sent\n                            if sent_bytes >= 1024 * 1024:\n                                break\n                        else:\n                            if time.time() - start_time > 10:\n                                break\n\n                    end_time = time.time()\n                    duration = end_time - start_time\n                    throughput = sent_bytes / duration\n                    if DEBUG:\n                        print(f\"Test completed in {duration:.2f} seconds, throughput: {throughput:.2f} bytes/sec\")\n\n                    client_socket.send(struct.pack('!I', TEST_END))\n                    client_socket.send(struct.pack('!d', throughput))\n\n                    if DEBUG:\n                        print(\"Results exchanged with client\")\n\n                elif param_data[0] == EXCHANGE_RESULTS:\n                    if DEBUG:\n                        print(\"Exchanging results\")\n\n                    result_data = client_socket.recv(1024)\n                    if not result_data:\n                        print(\"Result exchange failed\")\n                        client_socket.close()\n                        continue\n\n                    if DEBUG:\n                        print(f\"Received results: {result_data}\")\n\n                    client_socket.send(struct.pack('!I', DISPLAY_RESULTS))\n                    client_socket.send(result_data)\n\n                    if DEBUG:\n                        print(\"Results displayed to client\")\n\n                elif param_data[0] == DISPLAY_RESULTS:\n                    if DEBUG:\n                        print(\"Displaying results\")\n\n                    result_data = client_socket.recv(1024)\n                    if not result_data:\n                        print(\"Result display failed\")\n                        client_socket.close()\n                        continue\n\n                    if DEBUG:\n                        print(f\"Displayed results: {result_data}\")\n\n                    client_socket.send(struct.pack('!I', IPERF_DONE))\n\n                    if DEBUG:\n                        print(\"Test completed\")\n\n            elif command == CREATE_STREAMS:\n                if DEBUG:\n                    print(\"Creating streams\")\n\n                start_time = time.time()\n                test_data = b'\\x00' * 1024\n                sent_bytes = 0\n                while True:\n                    ready = select.select([client_socket], [], [], 1)\n                    if ready[0]:\n                        bytes_sent = client_socket.send(test_data)\n                        sent_bytes += bytes_sent\n                        if sent_bytes >= 1024 * 1024:\n                            break\n                    else:\n                        if time.time() - start_time > 10:\n                            break\n\n                end_time = time.time()\n                duration = end_time - start_time\n                throughput = sent_bytes / duration\n                if DEBUG:\n                    print(f\"Test completed in {duration:.2f} seconds, throughput: {throughput:.2f} bytes/sec\")\n\n                client_socket.send(struct.pack('!I', TEST_END))\n                client_socket.send(struct.pack('!d', throughput))\n\n                if DEBUG:\n                    print(\"Results exchanged with client\")\n\n            elif command == TEST_START:\n                if DEBUG:\n                    print(\"Starting test\")\n\n                start_time = time.time()\n                test_data = b'\\x00' * 1024\n                sent_bytes = 0\n                while True:\n                    ready = select.select([client_socket], [], [], 1)\n                    if ready[0]:\n                        bytes_sent = client_socket.send(test_data)\n                        sent_bytes += bytes_sent\n                        if sent_bytes >= 1024 * 1024:\n                            break\n                    else:\n                        if time.time() - start_time > 10:\n                            break\n\n                end_time = time.time()\n                duration = end_time - start_time\n                throughput = sent_bytes / duration\n                if DEBUG:\n                    print(f\"Test completed in {duration:.2f} seconds, throughput: {throughput:.2f} bytes/sec\")\n\n                client_socket.send(struct.pack('!I', TEST_END))\n                client_socket.send(struct.pack('!d', throughput))\n\n                if DEBUG:\n                    print(\"Results exchanged with client\")\n\n            elif command == TEST_RUNNING:\n                if DEBUG:\n                    print(\"Test is running\")\n\n                test_data = b'\\x00' * 1024\n                sent_bytes = 0\n                while True:\n                    ready = select.select([client_socket], [], [], 1)\n                    if ready[0]:\n                        bytes_sent = client_socket.send(test_data)\n                        sent_bytes += bytes_sent\n                        if sent_bytes >= 1024 * 1024:\n                            break\n                    else:\n                        if time.time() - start_time > 10:\n                            break\n\n                end_time = time.time()\n                duration = end_time - start_time\n                throughput = sent_bytes / duration\n                if DEBUG:\n                    print(f\"Test completed in {duration:.2f} seconds, throughput: {throughput:.2f} bytes/sec\")\n\n                client_socket.send(struct.pack('!I', TEST_END))\n                client_socket.send(struct.pack('!d', throughput))\n\n                if DEBUG:\n                    print(\"Results exchanged with client\")\n\n            elif command == EXCHANGE_RESULTS:\n                if DEBUG:\n                    print(\"Exchanging results\")\n\n                result_data = client_socket.recv(1024)\n                if not result_data:\n                    print(\"Result exchange failed\")\n                    client_socket.close()\n                    continue\n\n                if DEBUG:\n                    print(f\"Received results: {result_data}\")\n\n                client_socket.send(struct.pack('!I', DISPLAY_RESULTS))\n                client_socket.send(result_data)\n\n                if DEBUG:\n                    print(\"Results displayed to client\")\n\n            elif command == DISPLAY_RESULTS:\n                if DEBUG:\n                    print(\"Displaying results\")\n\n                result_data = client_socket.recv(1024)\n                if not result_data:\n                    print(\"Result display failed\")\n                    client_socket.close()\n                    continue\n\n                if DEBUG:\n                    print(f\"Displayed results: {result_data}\")\n\n                client_socket.send(struct.pack('!I', IPERF_DONE))\n\n                if DEBUG:\n                    print(\"Test completed\")\n\n        except Exception as e:\n            print(f\"Error during communication: {e}\")\n        finally:\n            client_socket.close()\n            print(\"Connection closed\")"
  },
  {
    "Task_id": 399,
    "Instruction": "Task Description: Create a TCP socket server class in Python that can handle incoming client connections, receive and process data, and send responses back to clients. The server should include error handling and callback methods for various events during its lifecycle.\n\nClass Description: MySocketServer is a TCP server implementation that listens on a specified host and port, accepts client connections, and handles data exchange. It provides hooks for custom behavior during different stages of server operation (startup, connection acceptance, data processing, etc.).\n\nAttributes:\n- host: str - The IP address or hostname to bind the server to\n- port: int - The port number to listen on\n- name: str - A descriptive name for the server (default: 'SocketServer')\n- numListen: int - Maximum number of queued connections (default: 1)\n- sock: socket.socket - The server socket object\n\nMethods:\n- __init__(host, port, name='SocketServer', numListen=1) -> None - Initializes the server with connection parameters\n- Run() -> None - Starts the server, binds to the specified address, and begins listening for connections\n- Stop() -> None - Stops the server by sending a special command to itself\n- onAccept(sock, addr) -> None - Handles a new client connection (sock: connection socket, addr: client address)\n- onData(sock, addr, data) -> None - Processes received data and sends a response (sock: connection socket, addr: client address, data: received bytes)\n- response(data) -> bytes - Generates a response for received data (data: input bytes) -> returns response bytes\n- onStartFail(e) -> None - Callback when server fails to start (e: exception object)\n- onStart() -> None - Callback when server starts successfully\n- onAcceptError(e) -> None - Callback when connection acceptance fails (e: exception object)\n- onRecvError(sock, addr, e) -> None - Callback when data receiving fails (sock: connection socket, addr: client address, e: exception object)\n- onSendError(sock, addr, e) -> None - Callback when data sending fails (sock: connection socket, addr: client address, e: exception object)\n- onStop() -> None - Callback when server stops\n\nStatic Methods:\n- Query(host, port, req) -> bytes - Helper function to send a request to a server and get response (host: target host, port: target port, req: request bytes) -> returns response bytes",
    "Canonical_solution": "import socket\nfrom qqbot.utf8logger import INFO, ERROR\nfrom qqbot.common import STR2BYTES\n\nclass MySocketServer:\n    def __init__(self, host, port, name='SocketServer', numListen=1):\n        self.host = host\n        self.port = int(port)\n        self.name = name\n        self.numListen = numListen\n\n    def Run(self):\n        try:\n            self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n            self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n            self.sock.bind((self.host, self.port))\n            self.sock.listen(self.numListen)\n            self.sock.settimeout(None)\n        except socket.error as e:\n            ERROR('\u65e0\u6cd5\u5f00\u542f %s \uff0c %s', self.name, e)\n            self.onStartFail(e)\n        else:\n            INFO('\u5df2\u5728 %s \u7684 %s \u7aef\u53e3\u5f00\u542f %s', self.host, self.port, self.name)\n            self.onStart()\n            while True:\n                try:\n                    sock, addr = self.sock.accept()\n                except socket.error as e:\n                    ERROR('%s \u53d1\u751f accept \u9519\u8bef\uff0c%s', self.name, e)\n                    self.onAcceptError(e)\n                else:\n                    self.onAccept(sock, addr)\n\n    def onAccept(self, sock, addr):\n        sock.settimeout(10.0)\n        try:\n            data = sock.recv(8192)\n        except socket.error as e:\n            ERROR('%s \u5728\u63a5\u6536\u6765\u81ea %s:%s \u7684\u6570\u636e\u65f6\u53d1\u9001\u9519\u8bef\uff0c%s', self.name, addr[0], addr[1], e)\n            self.onRecvError(sock, addr, e)\n            sock.close()\n        else:\n            if data == b'##STOP':\n                INFO('%s \u5df2\u505c\u6b62', self.name)\n                self.onStop()\n                sys.exit(0)\n            else:\n                self.onData(sock, addr, data)\n\n    def Stop(self):\n        Query(self.host, self.port, b'##STOP')\n\n    def onData(self, sock, addr, data):\n        try:\n            resp = self.response(data)\n        except Exception as e:\n            resp = '%s \u5728\u5904\u7406 %s:%s \u7684\u8bf7\u6c42\u65f6\u53d1\u751f\u9519\u8bef\uff0c%s' % (self.name, addr[0], addr[1], e)\n            ERROR(resp, exc_info=True)\n            resp = STR2BYTES(resp)\n\n        try:\n            sock.sendall(resp)\n        except socket.error as e:\n            ERROR('%s \u5728\u5411 %s:%s \u53d1\u9001\u6570\u636e\u65f6\u53d1\u9001\u9519\u8bef\uff0c%s', self.name, addr[0], addr[1], e)\n            self.onSendError(sock, addr, data)\n        finally:\n            sock.close()\n\n    def onStartFail(self, e):\n        pass\n\n    def onStart(self):\n        pass\n\n    def onAcceptError(self, e):\n        pass\n\n    def onRecvError(self, sock, addr, e):\n        pass\n\n    def onSendError(self, sock, addr, e):\n        pass\n\n    def onStop(self):\n        pass\n\n    def response(self, data):\n        return b'Hello, ' + data\n\ndef Query(host, port, req):\n    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    resp = b''\n    try:\n        sock.connect((host, int(port)))\n        sock.sendall(req)\n        while True:\n            data = sock.recv(8096)\n            if not data:\n                return resp\n            else:\n                resp += data\n    except socket.error:\n        return resp\n    finally:\n        sock.close()",
    "Code_level": "Class-level",
    "FSMID_for_test": 66,
    "right_result": "import socket\nimport threading\n\nclass MySocketServer:\n    def __init__(self, host, port, name='SocketServer', numListen=1):\n        self.host = host\n        self.port = port\n        self.name = name\n        self.numListen = numListen\n        self.sock = None\n        self.running = False\n\n    def Run(self):\n        try:\n            self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n            self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n            self.sock.bind((self.host, self.port))\n            self.sock.listen(self.numListen)\n            self.running = True\n            self.onStart()\n            self._accept_connections()\n        except Exception as e:\n            self.Stop()\n            self.onStartFail(e)\n\n    def Stop(self):\n        if self.running:\n            self.running = False\n            try:\n                self.sock.close()\n            except:\n                pass\n            self.onStop()\n\n    def _accept_connections(self):\n        if not self.running:\n            return\n        try:\n            while self.running:\n                sock, addr = self.sock.accept()\n                self.onAccept(sock, addr)\n        except Exception as e:\n            self.onAcceptError(e)\n\n    def onAccept(self, sock, addr):\n        pass\n\n    def onData(self, sock, addr, data):\n        try:\n            response = self.response(data)\n            sock.sendall(response)\n        except Exception as e:\n            self.onSendError(sock, addr, e)\n\n    def response(self, data):\n        return b\"Response: \" + data\n\n    def onStartFail(self, e):\n        pass\n\n    def onStart(self):\n        pass\n\n    def onAcceptError(self, e):\n        pass\n\n    def onRecvError(self, sock, addr, e):\n        pass\n\n    def onSendError(self, sock, addr, e):\n        pass\n\n    def onStop(self):\n        pass\n\n    @staticmethod\n    def Query(host, port, req):\n        try:\n            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n            sock.connect((host, port))\n            sock.sendall(req)\n            response = b''\n            while True:\n                data = sock.recv(4096)\n                if not data:\n                    break\n                response += data\n            sock.close()\n            return response\n        except Exception as e:\n            return b''"
  },
  {
    "Task_id": 4,
    "Instruction": "Task Description: Create an asynchronous Kafka environment class for inter-process communication that can both consume and produce messages using aiokafka.\n\nClass Description: AsyncKafkaEnvironment is a class that provides asynchronous Kafka message consumption and production capabilities. It handles initialization of Kafka consumers and producers, message sending, batch data retrieval, and proper resource cleanup.\n\nAttributes:\nkafka_bootstrap_servers: Optional[Union[str, List[str]]] - Kafka broker addresses as string or list of strings\nkafka_input_topic: Optional[str] - Topic name for consuming messages\nkafka_output_topic: Optional[str] - Topic name for producing messages\ntimeout_ms: Optional[int] - Timeout in milliseconds for consumer operations\nconsumer: Optional[AIOKafkaConsumer] - Async Kafka consumer instance\nproducer: Optional[AIOKafkaProducer] - Async Kafka producer instance\n\nMethods:\ninitialize() -> None - Initializes the Kafka consumer and producer instances with configured settings. Validates required attributes are set before initialization.\nfinalize() -> None - Gracefully stops both consumer and producer instances to clean up resources.\nmessage_sender(producer: AIOKafkaProducer, data: Iterable, topic: str) -> None - Sends data to specified Kafka topic using the provided producer instance.\nget_data_batch(batch_size: Optional[int]) -> list - Retrieves a batch of messages from the input topic, with optional size limit. Returns list of message values.",
    "Canonical_solution": "import logging\nimport json\nfrom typing import Union, List, Optional, Iterable\nfrom aiokafka import AIOKafkaConsumer, AIOKafkaProducer\n\nlogger = logging.getLogger(__name__)\n\nclass AsyncKafkaEnvironment:\n    \"\"\"\n    Represents an asynchronous Kafka environment for inter-process communication.\n    \"\"\"\n    \n    kafka_bootstrap_servers: Optional[Union[str, List[str]]] = None\n    kafka_input_topic: Optional[str] = None\n    kafka_output_topic: Optional[str] = None\n    timeout_ms: Optional[int] = None\n    consumer: Optional[AIOKafkaConsumer] = None\n    producer: Optional[AIOKafkaProducer] = None\n\n    async def initialize(self):\n        assert self.kafka_bootstrap_servers is not None, \"missing initialization for kafka_bootstrap_servers\"\n        assert self.kafka_input_topic is not None, \"missing initialization for kafka_input_topic\"\n        assert self.kafka_output_topic is not None, \"missing initialization for kafka_output_topic\"\n        assert self.timeout_ms is not None, \"missing initialization for timeout_ms\"\n\n        self.consumer = AIOKafkaConsumer(\n            self.kafka_input_topic,\n            bootstrap_servers=self.kafka_bootstrap_servers,\n            value_deserializer=lambda v: json.loads(v.decode(\"utf-8\")),\n            auto_offset_reset=\"earliest\",\n            max_partition_fetch_bytes=3000000,\n        )\n        await self.consumer.start()\n\n        self.producer = AIOKafkaProducer(\n            bootstrap_servers=self.kafka_bootstrap_servers,\n            value_serializer=lambda v: json.dumps(v).encode(\"utf-8\"),\n            max_request_size=3000000,\n            acks=\"all\",\n        )\n        await self.producer.start()\n\n    async def finalize(self):\n        if self.consumer:\n            await self.consumer.stop()\n        if self.producer:\n            await self.producer.stop()\n\n    async def message_sender(self, producer: AIOKafkaProducer, data: Iterable, topic: str):\n        try:\n            await producer.send_and_wait(topic, value=data)\n            logger.info(f\"The number of records sent to topic:{topic}, record_no:{len(data)}\")\n        finally:\n            pass\n\n    async def get_data_batch(self, batch_size: Optional[int]) -> list:\n        batch = await self.consumer.getmany(\n            timeout_ms=self.timeout_ms, max_records=batch_size\n        )\n\n        if len(batch) == 0:\n            batch_data = []\n        elif len(batch) > 1:\n            logger.error(\n                f\"consumer should be subscribed to only one topic and partition, not {list(batch.keys())}\"\n            )\n            batch_data = []\n        else:\n            for topic_partition, messages in batch.items():\n                batch_data = [msg.value for msg in messages]\n\n            logger.info(\n                f\"Received a batch with number_of_messages:{len(batch_data)} records from Kafka input_topic:{self.kafka_input_topic}\"\n            )\n        return batch_data",
    "Code_level": "Class-level",
    "FSMID_for_test": 80,
    "right_result": "import asyncio\nfrom typing import Optional, List, Union, Iterable\nfrom aiokafka import AIOKafkaConsumer, AIOKafkaProducer\n\nclass AsyncKafkaEnvironment:\n    def __init__(self):\n        self.kafka_bootstrap_servers: Optional[Union[str, List[str]]] = None\n        self.kafka_input_topic: Optional[str] = None\n        self.kafka_output_topic: Optional[str] = None\n        self.timeout_ms: Optional[int] = None\n        self.consumer: Optional[AIOKafkaConsumer] = None\n        self.producer: Optional[AIOKafkaProducer] = None\n\n    async def initialize(self):\n        if not self.kafka_bootstrap_servers or not self.kafka_input_topic or not self.kafka_output_topic or not self.timeout_ms:\n            raise ValueError(\"All required attributes must be set before initialization\")\n        self.consumer = AIOKafkaConsumer(\n            self.kafka_input_topic,\n            bootstrap_servers=self.kafka_bootstrap_servers,\n            consumer_timeout_ms=self.timeout_ms\n        )\n        await self.consumer.start()\n        self.producer = AIOKafkaProducer(\n            bootstrap_servers=self.kafka_bootstrap_servers\n        )\n        await self.producer.start()\n\n    async def finalize(self):\n        if self.consumer:\n            await self.consumer.stop()\n        if self.producer:\n            await self.producer.stop()\n\n    async def message_sender(self, data: Iterable, topic: str):\n        if not self.producer:\n            raise RuntimeError(\"Producer not initialized\")\n        for item in data:\n            await self.producer.send(topic, value=item)\n\n    async def get_data_batch(self, batch_size: Optional[int] = None) -> list:\n        if not self.consumer:\n            raise RuntimeError(\"Consumer not initialized\")\n        messages = []\n        try:\n            async for msg in self.consumer:\n                messages.append(msg.value.decode('utf-8'))\n                if batch_size and len(messages) >= batch_size:\n                    break\n        except Exception as e:\n            print(f\"Error retrieving messages: {e}\")\n        return messages"
  },
  {
    "Task_id": 40,
    "Instruction": "Task Description: Create an asynchronous HTTP client class in Python using httpx and asyncio libraries to perform various HTTP operations including GET, POST, file downloads, and image retrieval with progress tracking and error handling.\n\nClass Description: AsyncHTTPClient is a utility class that provides static methods for performing asynchronous HTTP operations. It handles common HTTP methods, file downloads with progress tracking, and image retrieval/saving functionality.\n\nMethods:\n\nMethod1: get(url: str, *, headers: Optional[Dict[str, str]] = None, params: Optional[Dict[str, Any]] = None, timeout: Optional[int] = 20, **kwargs) -> httpx.Response\n- Performs an asynchronous HTTP GET request to the specified URL with optional headers, query parameters, and timeout. Returns the HTTP response.\n\nMethod2: post(url: str, *, headers: Optional[Dict[str, str]] = None, params: Optional[Dict[str, Any]] = None, data: Optional[Dict[str, Any]] = None, json: Optional[Dict[str, Union[Any, str]]] = None, timeout: Optional[int] = 20, **kwargs) -> httpx.Response\n- Performs an asynchronous HTTP POST request to the specified URL with optional headers, query parameters, form data, JSON payload, and timeout. Returns the HTTP response.\n\nMethod3: download(url: str, save_path: Path, exclude_json: bool = False) -> None\n- Downloads a file from the specified URL asynchronously with progress tracking. Saves to the specified path while optionally excluding JSON content. Raises exception if content type doesn't match.\n\nMethod4: get_img(url: str, *, headers: Optional[Dict[str, str]] = None, params: Optional[Dict[str, Any]] = None, timeout: Optional[int] = 20, save_path: Optional[Union[str, Path]] = None, **kwargs) -> Union[None, Image.Image]\n- Retrieves an image from the specified URL asynchronously. Can optionally save to disk and returns a PIL Image object or None if the content isn't an image.",
    "Canonical_solution": "import httpx\nfrom typing import Dict, Optional, Any, Union\nfrom pathlib import Path\nfrom io import BytesIO\nfrom PIL import Image\nimport tqdm.asyncio\n\nclass AsyncHTTPClient:\n    @staticmethod\n    async def get(url: str,\n                 *,\n                 headers: Optional[Dict[str, str]] = None,\n                 params: Optional[Dict[str, Any]] = None,\n                 timeout: Optional[int] = 20,\n                 **kwargs) -> httpx.Response:\n        async with httpx.AsyncClient() as client:\n            return await client.get(url,\n                                  headers=headers,\n                                  params=params,\n                                  timeout=timeout,\n                                  **kwargs)\n\n    @staticmethod\n    async def post(url: str,\n                  *,\n                  headers: Optional[Dict[str, str]] = None,\n                  params: Optional[Dict[str, Any]] = None,\n                  data: Optional[Dict[str, Any]] = None,\n                  json: Optional[Dict[str, Union[Any, str]]] = None,\n                  timeout: Optional[int] = 20,\n                  **kwargs) -> httpx.Response:\n        async with httpx.AsyncClient() as client:\n            return await client.post(url,\n                                   headers=headers,\n                                   params=params,\n                                   data=data,\n                                   json=json,\n                                   timeout=timeout,\n                                   **kwargs)\n\n    @staticmethod\n    async def download(url: str, save_path: Path, exclude_json: bool = False):\n        save_path.parent.mkdir(parents=True, exist_ok=True)\n        async with httpx.AsyncClient().stream(method='GET', url=url, follow_redirects=True) as datas:\n            if exclude_json and 'application/json' in str(datas.headers['Content-Type']):\n                raise Exception('file not match type')\n            size = int(datas.headers['Content-Length'])\n            f = save_path.open('wb')\n            async for chunk in tqdm.asyncio.tqdm(iterable=datas.aiter_bytes(1),\n                                               desc=url.split('/')[-1],\n                                               unit='iB',\n                                               unit_scale=True,\n                                               unit_divisor=1024,\n                                               total=size,\n                                               colour='green'):\n                f.write(chunk)\n            f.close()\n\n    @staticmethod\n    async def get_img(url: str,\n                     *,\n                     headers: Optional[Dict[str, str]] = None,\n                     params: Optional[Dict[str, Any]] = None,\n                     timeout: Optional[int] = 20,\n                     save_path: Optional[Union[str, Path]] = None,\n                     **kwargs) -> Union[None, Image.Image]:\n        if save_path and Path(save_path).exists():\n            return Image.open(save_path)\n        \n        async with httpx.AsyncClient() as client:\n            resp = await client.get(url,\n                                  headers=headers,\n                                  params=params,\n                                  timeout=timeout,\n                                  **kwargs)\n            if resp.headers.get('Content-Type') not in ['image/png', 'image/jpeg']:\n                return None\n            resp = resp.read()\n            img = Image.open(BytesIO(resp))\n            \n            if save_path:\n                save_path = Path(save_path)\n                save_path.parent.mkdir(parents=True, exist_ok=True)\n                img.save(save_path)\n            return img",
    "Code_level": "Class-level",
    "FSMID_for_test": 59,
    "right_result": "import httpx\nimport asyncio\nfrom typing import Optional, Dict, Any, Union, Path\nfrom PIL import Image\nfrom io import BytesIO\n\nclass AsyncHTTPClient:\n    @staticmethod\n    async def get(url: str, *, headers: Optional[Dict[str, str]] = None, params: Optional[Dict[str, Any]] = None, timeout: Optional[int] = 20, **kwargs) -> httpx.Response:\n        async with httpx.AsyncClient(timeout=timeout) as client:\n            response = await client.get(url, headers=headers, params=params, **kwargs)\n            response.raise_for_status()\n            return response\n\n    @staticmethod\n    async def post(url: str, *, headers: Optional[Dict[str, str]] = None, params: Optional[Dict[str, Any]] = None, data: Optional[Dict[str, Any]] = None, json: Optional[Dict[str, Union[Any, str]]] = None, timeout: Optional[int] = 20, **kwargs) -> httpx.Response:\n        async with httpx.AsyncClient(timeout=timeout) as client:\n            response = await client.post(url, headers=headers, params=params, data=data, json=json, **kwargs)\n            response.raise_for_status()\n            return response\n\n    @staticmethod\n    async def download(url: str, save_path: Path, exclude_json: bool = False) -> None:\n        async with httpx.AsyncClient() as client:\n            response = await client.get(url)\n            response.raise_for_status()\n            content_type = response.headers.get('content-type', '')\n            if not exclude_json and 'json' in content_type:\n                raise ValueError(\"Content type is JSON, cannot download\")\n            with open(save_path, 'wb') as file:\n                file.write(response.content)\n\n    @staticmethod\n    async def get_img(url: str, *, headers: Optional[Dict[str, str]] = None, params: Optional[Dict[str, Any]] = None, timeout: Optional[int] = 20, save_path: Optional[Union[str, Path]] = None, **kwargs) -> Union[None, Image.Image]:\n        async with httpx.AsyncClient(timeout=timeout) as client:\n            response = await client.get(url, headers=headers, params=params, **kwargs)\n            response.raise_for_status()\n            content_type = response.headers.get('content-type', '')\n            if not content_type.startswith('image/'):\n                return None\n            image = Image.open(BytesIO(response.content))\n            if save_path:\n                image.save(save_path)\n            return image"
  },
  {
    "Task_id": 400,
    "Instruction": "Task Description: Implement a TCP server that accepts client connections and forwards their file descriptors to a worker process over a Unix domain socket.\n\nFunction Description: The code consists of two main functions. `send_fd()` handles sending a file descriptor over a Unix domain socket, while `server()` sets up both the Unix domain socket for worker communication and the TCP server for client connections. The server continuously accepts TCP clients, sends their file descriptors to the worker, and closes the client connection.\n\nInput:\n- `send_fd()`:\n  - `sock`: [socket.socket] - A connected Unix domain socket\n  - `fd`: [int] - File descriptor to send\n- `server()`:\n  - `work_address`: [str] - Path for the Unix domain socket\n  - `port`: [int] - TCP port number to listen on\n\nOutput:\n- `send_fd()`: None (but expects 'OK' acknowledgment from receiver)\n- `server()`: None (runs indefinitely serving clients)",
    "Canonical_solution": "import socket\nimport struct\n\ndef send_fd(sock, fd):\n    '''\n    Send a single file descriptor.\n    '''\n    sock.sendmsg([b'x'],\n                 [(socket.SOL_SOCKET, socket.SCM_RIGHTS, struct.pack('i', fd))])\n    ack = sock.recv(2)\n    assert ack == b'OK'\n\ndef server(work_address, port):\n    # Wait for the worker to connect\n    work_serv = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n    work_serv.bind(work_address)\n    work_serv.listen(1)\n    worker, addr = work_serv.accept()\n\n    # Now run a TCP/IP server and send clients to worker\n    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, True)\n    s.bind(('',port))\n    s.listen(1)\n    while True:\n        client, addr = s.accept()\n        print('SERVER: Got connection from', addr)\n        send_fd(worker, client.fileno())\n        client.close()",
    "Code_level": "Function-level",
    "FSMID_for_test": 66,
    "right_result": "import socket\nimport os\nimport sys\n\ndef send_fd(sock, fd):\n    try:\n        sock.sendmsg([os.fdopen(fd, 'rb', 0)], [], [(socket.SOL_SOCKET, socket.SCM_RIGHTS, [fd])])\n        response = sock.recv(1024)\n        if response.decode('utf-8') != 'OK':\n            raise Exception(\"Failed to send file descriptor\")\n    except Exception as e:\n        print(f\"Error sending FD: {e}\", file=sys.stderr)\n\ndef server(work_address, port):\n    work_sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n    try:\n        os.remove(work_address)\n    except OSError:\n        pass\n    work_sock.bind(work_address)\n    work_sock.listen(1)\n    tcp_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    tcp_sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n    tcp_sock.bind(('0.0.0.0', port))\n    tcp_sock.listen(10)\n    while True:\n        client, addr = tcp_sock.accept()\n        work_conn, _ = work_sock.accept()\n        try:\n            send_fd(work_conn, client.fileno())\n            client.close()\n        except Exception as e:\n            print(f\"Error handling client: {e}\", file=sys.stderr)\n            client.close()\n            work_conn.close()"
  },
  {
    "Task_id": 401,
    "Instruction": "Task Description: Implement a multithreaded TCP echo server that receives data from a client, processes it, and sends it back to the client in chunks. The server should handle client connections in a separate thread and support graceful termination when receiving a \"QUIT\" command.\n\nClass Description: EchoServer is a threaded TCP server that echoes received data back to the client. It handles one client connection at a time, processes incoming data, and sends it back in configurable chunk sizes. The server can be configured to delay resending until triggered by an external event.\n\nAttributes:\n- host: str - The host IP address to bind the server to\n- port: int - The port number to listen on\n- sock: socket.socket - The TCP socket object for server operations\n- buffer: str - Accumulates received data before echoing back\n- start_resend_event: threading.Event - Optional event to trigger when to start echoing data back\n- chunk_size: int - Size of data chunks to send back to client (default: 1 byte)\n\nMethods:\n- __init__(host: str, port: int) -> None - Initializes the server with host and port\n- run() -> None - Main thread method that handles client connection, data reception, and echoing back data. Runs in a separate thread when started. Processes data until \"QUIT\" is received or connection is closed.",
    "Canonical_solution": "import socket\nimport threading\nimport time\n\nclass EchoServer(threading.Thread):\n    def __init__(self, host, port):\n        threading.Thread.__init__(self)\n        self.host = host\n        self.port = port\n        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.buffer = \"\"\n        self.start_resend_event = None\n        self.chunk_size = 1\n\n    def run(self):\n        self.sock.bind((self.host, self.port))\n        self.sock.listen(1)\n        conn, client = self.sock.accept()\n        \n        while True:\n            data = conn.recv(1)\n            if not data:\n                break\n            self.buffer += data\n            if \"QUIT\\n\" in self.buffer:\n                break\n\n        self.buffer = self.buffer.replace(\"QUIT\\n\", '')\n\n        if self.start_resend_event:\n            self.start_resend_event.wait()\n\n        try:\n            while self.buffer:\n                n = conn.send(self.buffer[:self.chunk_size])\n                time.sleep(0.001)\n                self.buffer = self.buffer[n:]\n        except:\n            pass\n\n        conn.close()\n        self.sock.close()",
    "Code_level": "Class-level",
    "FSMID_for_test": 66,
    "right_result": "import socket\nimport threading\n\nclass EchoServer:\n    def __init__(self, host: str, port: int) -> None:\n        self.host = host\n        self.port = port\n        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.buffer = \"\"\n        self.start_resend_event = threading.Event()\n        self.chunk_size = 1\n\n    def __del__(self):\n        self.sock.close()\n\n    def run(self) -> None:\n        self.sock.bind((self.host, self.port))\n        self.sock.listen(5)\n        print(f\"EchoServer started on {self.host}:{self.port}\")\n\n        while True:\n            client_sock, addr = self.sock.accept()\n            print(f\"Connection from {addr}\")\n            thread = threading.Thread(target=self.handle_client, args=(client_sock,))\n            thread.start()\n\n    def handle_client(self, client_sock) -> None:\n        try:\n            while True:\n                data = client_sock.recv(4096)\n                if not data:\n                    break\n                self.buffer += data.decode('utf-8')\n                if self.start_resend_event.is_set():\n                    self.send_data_in_chunks(client_sock)\n                if \"QUIT\" in self.buffer:\n                    self.start_resend_event.clear()\n                    self.buffer = \"\"\n                    client_sock.sendall(\"QUIT\".encode('utf-8'))\n                    break\n        except Exception as e:\n            print(f\"Error handling client: {e}\")\n        finally:\n            client_sock.close()\n            print(\"Client disconnected\")\n\n    def send_data_in_chunks(self, client_sock) -> None:\n        while self.buffer:\n            chunk = self.buffer[:self.chunk_size]\n            self.buffer = self.buffer[self.chunk_size:]\n            client_sock.sendall(chunk.encode('utf-8'))"
  },
  {
    "Task_id": 402,
    "Instruction": "Task Description: Implement a TCP server-client communication system in Python using socket programming and multiprocessing. The system should allow for asynchronous handling of client connections and bidirectional data exchange.\n\nClass Description: The system consists of two main classes: TCPServer for handling incoming connections and TCPClient for establishing connections to the server. The TCPServer runs in a separate process to handle client connections asynchronously.\n\nAttributes:\n- TCPServer:\n  - port: int - The port number on which the server listens for connections\n  - process: Process - The multiprocessing Process object running the server\n  - is_running: bool - Flag indicating whether the server is currently running\n\n- TCPClient:\n  - port: int - The port number to connect to on the server\n  - sock: socket - The TCP socket object for communication with the server\n\nMethods:\n- TCPServer:\n  - start() -> None - Starts the server in a separate process\n  - stop() -> None - Stops the server process\n  - _subprocess_server_tcp(port: int) -> None - Internal method running in the subprocess to handle client connections (accepts connections and echoes received data)\n\n- TCPClient:\n  - send(data: Union[str, bytes]) -> bytes - Sends data to the server and returns the response\n  - close() -> None - Closes the client connection\n  - __del__() -> None - Destructor that ensures proper connection cleanup",
    "Canonical_solution": "import socket\nfrom multiprocessing import Process\nimport os\nimport time\n\nclass TCPServer:\n    def __init__(self, port):\n        self.port = int(port)\n        self.process = None\n        self.is_running = False\n\n    def start(self):\n        args = [self.port]\n        self.process = Process(target=self._subprocess_server_tcp, args=args)\n        self.process.start()\n        time.sleep(1)\n        self.is_running = True\n\n    def stop(self):\n        try:\n            os.kill(self.process.pid, 9)\n        except OSError:\n            self.process.terminate()\n        finally:\n            self.is_running = False\n\n    def _subprocess_server_tcp(self, port):\n        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        s.bind(('localhost', port))\n        s.listen(True)\n        conn, addr = s.accept()\n\n        while True:\n            data = conn.recv(1024)\n            conn.send(b\"RECEIVED: \" + bytes(data))\n\n        conn.close()\n\nclass TCPClient:\n    def __init__(self, port):\n        self.port = int(port)\n        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.sock.connect(('localhost', self.port))\n\n    def send(self, data):\n        if isinstance(data, str):\n            data = data.encode('utf-8')\n\n        self.sock.sendall(data)\n        return self.sock.recv(len(data) + 11)\n\n    def close(self):\n        try:\n            self.sock.close()\n        except socket.error:\n            pass\n\n    def __del__(self):\n        self.close()",
    "Code_level": "Class-level",
    "FSMID_for_test": 66,
    "right_result": "import socket\nimport multiprocessing\nimport sys\n\nclass TCPServer:\n    def __init__(self, port):\n        self.port = port\n        self.process = None\n        self.is_running = False\n\n    def start(self):\n        if not self.is_running:\n            self.process = multiprocessing.Process(target=self._subprocess_server_tcp, args=(self.port,))\n            self.process.start()\n            self.is_running = True\n\n    def stop(self):\n        if self.is_running:\n            self.is_running = False\n            self.process.terminate()\n            self.process.join()\n            self.process = None\n\n    def _subprocess_server_tcp(self, port):\n        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as server_socket:\n            server_socket.bind(('localhost', port))\n            server_socket.listen(5)\n            print(f\"Server listening on port {port}\")\n            while self.is_running:\n                try:\n                    client_socket, addr = server_socket.accept()\n                    print(f\"Connection from {addr}\")\n                    with client_socket:\n                        while True:\n                            data = client_socket.recv(1024)\n                            if not data:\n                                break\n                            client_socket.sendall(data)\n                except Exception as e:\n                    print(f\"Error in server: {e}\")\n                    break\n\nclass TCPClient:\n    def __init__(self, port):\n        self.port = port\n        self.sock = None\n\n    def connect(self):\n        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.sock.connect(('localhost', self.port))\n\n    def send(self, data):\n        if not self.sock:\n            raise ConnectionError(\"Client not connected\")\n        if isinstance(data, str):\n            data = data.encode('utf-8')\n        self.sock.sendall(data)\n        response = self.sock.recv(1024)\n        return response\n\n    def close(self):\n        if self.sock:\n            self.sock.close()\n            self.sock = None\n\n    def __del__(self):\n        self.close()"
  },
  {
    "Task_id": 403,
    "Instruction": "Task Description: Create a TCP server that listens for incoming client connections, receives data from connected clients, and handles the connection in a separate thread to allow for concurrent operations.\n\nFunction Description: The code consists of two main functions: `start_server()` initializes and sets up the TCP server socket, while `start_server_thread()` handles the client connection in a separate thread, receiving data and managing the connection lifecycle.\n\nInput: \n- `start_server()`: No input parameters.\n- `start_server_thread()`: No input parameters.\n\nOutput: \n- `start_server()`: No return value, but it initializes the global `bad_socket` object.\n- `start_server_thread()`: No return value, but it prints connection details and handles data reception until the `stop` flag is set to `True`.\n\n---\n\nClass Description: This task can also be implemented as a class to encapsulate the TCP server functionality, making it more reusable and manageable.\n\nAttributes:\n- `bad_socket`: [socket.socket] - The TCP server socket object.\n- `stop`: [bool] - A flag to control the server thread's execution.\n\nMethods:\n- `start_server()` -> None - Initializes and sets up the TCP server socket.\n- `start_server_thread()` -> None - Handles client connections and data reception in a separate thread.\n- `stop_server()` -> None - Sets the `stop` flag to `True` to terminate the server thread gracefully.",
    "Canonical_solution": "import socket\nimport threading\nimport time\n\nbad_socket = None\nstop = False\n\ndef start_server():\n    global bad_socket\n    bad_socket = socket.socket(socket.AF_INET6, socket.SOCK_STREAM)\n    bad_socket.settimeout(0.5)  # timeout of 500ms\n    bad_socket.bind((\"\", 0))\n    bad_socket.listen(5)\n\ndef start_server_thread():\n    print(\"Before accept\")\n    (conn, addr) = bad_socket.accept()\n    print(\"Connected with {0}:{1}\".format(addr[0], addr[1]))\n    while True:\n        if stop:\n            break\n        try:\n            conn.recv(1024)\n            # sleep for 1 ms. This limits the rate to 1MBytes/sec or less\n            time.sleep(0.001)\n        except Exception as e:\n            print(e)\n    print(\"server thread stopped\")\n    bad_socket.close()",
    "Code_level": "Function-level",
    "FSMID_for_test": 66,
    "right_result": "import socket\nimport threading\n\nclass TCPServer:\n    def __init__(self):\n        self.bad_socket = None\n        self.stop = False\n\n    def start_server(self):\n        self.bad_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.bad_socket.bind(('localhost', 12345))\n        self.bad_socket.listen(5)\n        print(\"Server is listening on port 12345\")\n\n    def start_server_thread(self):\n        while not self.stop:\n            client_socket, addr = self.bad_socket.accept()\n            print(f\"Connection from {addr}\")\n            try:\n                while True:\n                    data = client_socket.recv(1024)\n                    if not data:\n                        break\n                    print(f\"Received: {data.decode()}\")\n            except Exception as e:\n                print(f\"Error: {e}\")\n            finally:\n                client_socket.close()\n        print(\"Server thread stopped\")\n\n    def stop_server(self):\n        self.stop = True"
  },
  {
    "Task_id": 404,
    "Instruction": "Task Description: Implement a simple HTTP server using TCP sockets in Python that can handle basic GET and HEAD requests, send appropriate responses, and stream data to connected clients.\n\nClass Description: HTTPServer is a TCP-based HTTP server implementation that handles incoming client connections, processes HTTP requests, and manages data streaming to clients.\n\nAttributes:\n- socket: [socket.socket] - The TCP socket object used for server operations\n- conn: [socket.socket] - The active client connection socket\n- host: [str] - The server's host address (None if bound to all interfaces)\n- port: [int] - The server's listening port\n- bound: [bool] - Flag indicating whether the server is bound to an address\n\nMethods:\n- bind(host=\"127.0.0.1\", port=0) -> None - Binds the server to the specified host and port. If port is 0, uses an available port. Sets up listening socket.\n- open(timeout=30) -> HTTPRequest - Accepts an incoming connection, processes the HTTP request, and returns the parsed request object. Times out after specified seconds.\n- write(data) -> None - Sends data to the connected client. Raises IOError if no active connection.\n- close(client_only=False) -> None - Closes the client connection and optionally the server socket. If client_only is True, keeps server socket open.\n\nHelper Class Description: HTTPRequest is used to parse incoming HTTP requests from raw request text.\n\nAttributes:\n- rfile: [BytesIO] - Buffer containing the request data\n- raw_requestline: [bytes] - The first line of the HTTP request\n- error_code: [int] - Error code if request parsing failed\n- error_message: [str] - Error message if request parsing failed\n- command: [str] - The HTTP method (e.g., \"GET\", \"HEAD\") from parsed request\n\nMethods:\n- parse_request() -> None - Parses the HTTP request (inherited from BaseHTTPRequestHandler)\n- send_error(code, message) -> None - Stores error information when request parsing fails",
    "Canonical_solution": "import socket\nfrom io import BytesIO\ntry:\n    from BaseHTTPServer import BaseHTTPRequestHandler\nexcept ImportError:\n    from http.server import BaseHTTPRequestHandler\n\nclass HTTPRequest(BaseHTTPRequestHandler):\n    def __init__(self, request_text):\n        self.rfile = BytesIO(request_text)\n        self.raw_requestline = self.rfile.readline()\n        self.error_code = self.error_message = None\n        self.parse_request()\n\n    def send_error(self, code, message):\n        self.error_code = code\n        self.error_message = message\n\nclass HTTPServer:\n    def __init__(self):\n        self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.conn = self.host = self.port = None\n        self.bound = False\n\n    def bind(self, host=\"127.0.0.1\", port=0):\n        try:\n            self.socket.bind((host or \"\", port))\n        except socket.error as err:\n            raise OSError(err)\n\n        self.socket.listen(1)\n        self.bound = True\n        self.host, self.port = self.socket.getsockname()\n        if self.host == \"0.0.0.0\":\n            self.host = None\n\n    def open(self, timeout=30):\n        self.socket.settimeout(timeout)\n\n        try:\n            conn, addr = self.socket.accept()\n            conn.settimeout(None)\n        except socket.timeout:\n            raise OSError(\"Socket accept timed out\")\n\n        try:\n            req_data = conn.recv(1024)\n        except socket.error:\n            raise OSError(\"Failed to read data from socket\")\n\n        req = HTTPRequest(req_data)\n        if req.command not in (\"GET\", \"HEAD\"):\n            conn.send(b\"HTTP/1.1 501 Not Implemented\\r\\n\")\n            conn.close()\n            raise OSError(\"Invalid request method: {0}\".format(req.command))\n\n        try:\n            conn.send(b\"HTTP/1.1 200 OK\\r\\n\")\n            conn.send(b\"Server: Livestreamer\\r\\n\")\n            conn.send(b\"Content-Type: video/unknown\\r\\n\")\n            conn.send(b\"\\r\\n\")\n        except socket.error:\n            raise OSError(\"Failed to write data to socket\")\n\n        if req.command == \"HEAD\":\n            conn.close()\n            raise OSError\n\n        self.conn = conn\n        return req\n\n    def write(self, data):\n        if not self.conn:\n            raise IOError(\"No connection\")\n        self.conn.sendall(data)\n\n    def close(self, client_only=False):\n        if self.conn:\n            self.conn.close()\n        if not client_only:\n            self.socket.close()",
    "Code_level": "Class-level",
    "FSMID_for_test": 66,
    "right_result": "class HTTPServer:\n    def __init__(self):\n        self.socket = None\n        self.conn = None\n        self.host = None\n        self.port = 0\n        self.bound = False\n\n    def bind(self, host=\"127.0.0.1\", port=0):\n        import socket\n        self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        self.host = host\n        self.port = port\n        if port == 0:\n            self.port = self.socket.bind((host, 0))[1]\n        else:\n            self.socket.bind((host, port))\n        self.bound = True\n        self.socket.listen(5)\n\n    def open(self, timeout=30):\n        import socket\n        self.conn, addr = self.socket.accept()\n        self.conn.settimeout(timeout)\n        request_text = self.conn.recv(4096)\n        return HTTPRequest(request_text, self.conn)\n\n    def write(self, data):\n        if not self.conn:\n            raise IOError(\"No active connection\")\n        self.conn.sendall(data)\n\n    def close(self, client_only=False):\n        if not client_only:\n            self.socket.close()\n        if self.conn:\n            self.conn.close()\n        self.conn = None\n        self.bound = False\n\nclass HTTPRequest:\n    def __init__(self, request_text, conn):\n        self.rfile = BytesIO(request_text)\n        self.raw_requestline = request_text.split(b'\\r\\n')[0]\n        self.error_code = 0\n        self.error_message = \"\"\n        self.command = \"\"\n        self.parse_request()\n\n    def parse_request(self):\n        try:\n            self.command, path, version = self.raw_requestline.decode().split()\n        except ValueError:\n            self.send_error(400, \"Bad Request\")\n\n    def send_error(self, code, message):\n        self.error_code = code\n        self.error_message = message\n\n    def handle_request(self):\n        if self.error_code != 0:\n            response = f\"HTTP/1.1 {self.error_code} {self.error_message}\\r\\n\\r\\n\"\n            self.conn.sendall(response.encode())\n            return\n        if self.command == \"GET\":\n            self.handle_get()\n        elif self.command == \"HEAD\":\n            self.handle_head()\n        else:\n            self.send_error(501, \"Not Implemented\")\n\n    def handle_get(self):\n        import os\n        from http.server import SimpleHTTPRequestHandler\n        file_path = os.path.join(os.getcwd(), self.path)\n        if os.path.exists(file_path) and os.path.isfile(file_path):\n            with open(file_path, 'rb') as f:\n                content = f.read()\n            response = f\"HTTP/1.1 200 OK\\r\\nContent-Length: {len(content)}\\r\\n\\r\\n\".encode()\n            self.conn.sendall(response)\n            self.conn.sendall(content)\n        else:\n            self.send_error(404, \"Not Found\")\n\n    def handle_head(self):\n        import os\n        from http.server import SimpleHTTPRequestHandler\n        file_path = os.path.join(os.getcwd(), self.path)\n        if os.path.exists(file_path) and os.path.isfile(file_path):\n            response = f\"HTTP/1.1 200 OK\\r\\nContent-Length: {os.path.getsize(file_path)}\\r\\n\\r\\n\".encode()\n            self.conn.sendall(response)\n        else:\n            self.send_error(404, \"Not Found\")"
  },
  {
    "Task_id": 405,
    "Instruction": "Task Description: Create a TCP server implementation in Python that can handle client connections, send/receive data, and manage socket resources properly. The implementation should support both TCP and Unix domain sockets, with proper error handling and cleanup.\n\nClass Description: FakeBroker is a class that simulates a message broker server capable of handling client connections over TCP or Unix domain sockets. It provides methods to start listening, accept connections, send/receive data, and clean up resources.\n\nAttributes:\n- _sock: [socket.socket] - The underlying socket object used for listening\n- _conn: [socket.socket] - The active client connection socket\n- port: [int] - The port number the server is bound to (for TCP)\n- transport: [str] - The transport type ('tcp' or 'unix')\n\nMethods:\n- __init__(transport: str = \"tcp\") -> None - Initializes the server with specified transport type (TCP or Unix domain socket)\n- start() -> None - Starts listening and accepts a client connection\n- finish() -> None - Closes all connections and cleans up resources\n- receive_packet(num_bytes: int) -> bytes - Receives specified number of bytes from client\n- send_packet(packet_out: bytes) -> int - Sends data to the connected client, returns number of bytes sent\n\nTask Description: Create a threaded TCP server implementation in Python that can handle multiple client connections simultaneously using Python's socketserver framework.\n\nClass Description: FakeWebsocketBroker is a threaded TCP server implementation that extends threading.Thread to run a server in a separate thread. It uses ThreadedTCPServer to handle multiple client connections concurrently.\n\nAttributes:\n- host: [str] - The host address to bind to (default 'localhost')\n- port: [int] - The port number the server is bound to\n- _server: [ThreadedTCPServer] - The underlying threaded TCP server instance\n- _running: [bool] - Flag indicating if the server is running\n- handler_cls: [bool/class] - The request handler class for the server\n\nMethods:\n- __init__() -> None - Initializes the threaded server\n- serve(tcphandler: class) -> contextmanager - Context manager that starts the server with given handler class\n- run() -> None - Thread entry point that starts serving requests",
    "Canonical_solution": "import socket\nimport os\nimport threading\nimport socketserver\n\nclass FakeBroker:\n    def __init__(self, transport=\"tcp\"):\n        if transport == \"tcp\":\n            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n            sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n            sock.bind((\"localhost\", 0))\n            self.port = sock.getsockname()[1]\n        elif transport == \"unix\":\n            sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n            sock.bind(\"localhost\")\n            self.port = 1883\n        else:\n            raise ValueError(f\"unsupported transport {transport}\")\n\n        sock.settimeout(5)\n        sock.listen(1)\n\n        self._sock = sock\n        self._conn = None\n        self.transport = transport\n\n    def start(self):\n        if self._sock is None:\n            raise ValueError('Socket is not open')\n\n        (conn, address) = self._sock.accept()\n        conn.settimeout(5)\n        self._conn = conn\n\n    def finish(self):\n        if self._conn is not None:\n            self._conn.close()\n            self._conn = None\n\n        if self._sock is not None:\n            self._sock.close()\n            self._sock = None\n\n        if self.transport == 'unix':\n            try:\n                os.unlink('localhost')\n            except OSError:\n                pass\n\n    def receive_packet(self, num_bytes):\n        if self._conn is None:\n            raise ValueError('Connection is not open')\n\n        packet_in = self._conn.recv(num_bytes)\n        return packet_in\n\n    def send_packet(self, packet_out):\n        if self._conn is None:\n            raise ValueError('Connection is not open')\n\n        count = self._conn.send(packet_out)\n        return count\n\nclass ThreadedTCPServer(socketserver.ThreadingMixIn, socketserver.TCPServer):\n    pass\n\nclass FakeWebsocketBroker(threading.Thread):\n    def __init__(self):\n        super().__init__()\n        self.host = \"localhost\"\n        self.port = -1\n        self._server = None\n        self._running = True\n        self.handler_cls = False\n\n    @contextlib.contextmanager\n    def serve(self, tcphandler):\n        self._server = ThreadedTCPServer((self.host, 0), tcphandler)\n        try:\n            self.start()\n            self.port = self._server.server_address[1]\n            if not self._running:\n                raise RuntimeError(\"Error starting server\")\n            yield\n        finally:\n            if self._server:\n                self._server.shutdown()\n                self._server.server_close()\n\n    def run(self):\n        self._running = True\n        self._server.serve_forever()",
    "Code_level": "Class-level",
    "FSMID_for_test": 66,
    "right_result": "import socket\nimport socketserver\nimport threading\n\nclass FakeBroker:\n    def __init__(self, transport: str = \"tcp\"):\n        self._sock = None\n        self._conn = None\n        self.port = 0\n        self.transport = transport\n\n    def start(self):\n        if self.transport == \"tcp\":\n            self._sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n            self._sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n            self._sock.bind(('localhost', self.port))\n            self._sock.listen(1)\n            print(f\"TCP server listening on port {self.port}\")\n            self._conn, addr = self._sock.accept()\n            print(f\"Connection from {addr}\")\n        elif self.transport == \"unix\":\n            self._sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)\n            self._sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n            self._sock.bind(self.port)\n            self._sock.listen(1)\n            print(f\"Unix domain socket server listening on {self.port}\")\n            self._conn, addr = self._sock.accept()\n            print(f\"Connection from {addr}\")\n        else:\n            raise ValueError(\"Unsupported transport type\")\n\n    def finish(self):\n        if self._conn:\n            self._conn.close()\n            self._conn = None\n        if self._sock:\n            self._sock.close()\n            self._sock = None\n        print(\"Server resources cleaned up\")\n\n    def receive_packet(self, num_bytes: int) -> bytes:\n        if not self._conn:\n            raise RuntimeError(\"No active connection\")\n        return self._conn.recv(num_bytes)\n\n    def send_packet(self, packet_out: bytes) -> int:\n        if not self._conn:\n            raise RuntimeError(\"No active connection\")\n        return self._conn.send(packet_out)\n\nclass FakeWebsocketBroker(threading.Thread):\n    def __init__(self, host: str = 'localhost', port: int = 8000, handler_cls=None):\n        super().__init__()\n        self.host = host\n        self.port = port\n        self._server = None\n        self._running = False\n        self.handler_cls = handler_cls or SimpleRequestHandler\n\n    def serve(self, tcphandler: classmethod):\n        self.handler_cls = tcphandler\n        self._server = socketserver.ThreadingTCPServer((self.host, self.port), self.handler_cls)\n        self._running = True\n        self.start()\n        yield\n        self._running = False\n        self._server.server_close()\n\n    def run(self):\n        if self._server is None:\n            self._server = socketserver.ThreadingTCPServer((self.host, self.port), self.handler_cls)\n        try:\n            print(f\"Starting server on {self.host}:{self.port}\")\n            self._server.serve_forever()\n        except KeyboardInterrupt:\n            print(\"Shutting down server\")\n        finally:\n            self._server.shutdown()\n            self._server.server_close()\n\nclass SimpleRequestHandler(socketserver.BaseRequestHandler):\n    def handle(self):\n        data = self.request.recv(1024)\n        print(f\"Received: {data.decode()}\")\n        self.request.sendall(b\"Message received\")"
  },
  {
    "Task_id": 406,
    "Instruction": "Task Description: Implement a TCP forwarding server that acts as an intermediary between client connections and a remote device, facilitating bidirectional communication between them.\n\nClass Description: TCPForwardServer is a class that establishes a TCP server to forward traffic between connected clients and a remote device. It manages multiple client connections simultaneously using select-based I/O multiplexing and maintains channel mappings between client and device sockets.\n\nAttributes:\n- input_list: List[socket.socket] - List of sockets being monitored for incoming data\n- channel: Dict[socket.socket, socket.socket] - Mapping between client and device sockets\n- _server: socket.socket - The main server socket accepting client connections\n- _rdev: Device - The remote device to connect to\n- _rport: int - The port number on the remote device\n- BUFFER_SIZE: int - Size of the data buffer for socket operations\n- DELAY: float - Delay between select operations in seconds\n\nMethods:\n- __init__(lhost: str, lport: int, rdev: Device, rport: int) -> None - Initializes the TCP forwarding server with local host/port and remote device/port information\n- main_loop() -> None - Main server loop that handles incoming connections and data using select\n- on_accept() -> None - Handles new client connections and establishes corresponding device connections\n- on_close() -> None - Cleans up resources when a connection is closed\n- on_recv() -> None - Handles incoming data by forwarding it to the corresponding channel",
    "Canonical_solution": "import socket\nimport select\nimport time\nfrom typing import Dict\n\nclass TCPForwardServer:\n    def __init__(self, lhost: str, lport: int, rdev: Device, rport: int):\n        self.input_list = []\n        self.channel: Dict[socket.socket, socket.socket] = {}\n        \n        self._server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self._server.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        self._server.bind((lhost, lport))\n        self._server.listen(200)\n        self._rdev = rdev\n        self._rport = rport\n        self.BUFFER_SIZE = 4096\n        self.DELAY = 0.0001\n    \n    def main_loop(self):\n        self.input_list.append(self._server)\n        while True:\n            time.sleep(self.DELAY)\n            inputready, _, _ = select.select(self.input_list, [], [])\n            for self.s in inputready:\n                if self.s == self._server:\n                    self.on_accept()\n                    break\n                self.data = self.s.recv(self.BUFFER_SIZE)\n                if len(self.data) == 0:\n                    self.on_close()\n                else:\n                    self.on_recv()\n\n    def on_accept(self):\n        try:\n            sock_proxy = self._rdev.create_inner_connection(self._rport)\n            devicesock = sock_proxy.get_socket()\n        except Exception:\n            devicesock = None\n\n        clientsock, clientaddr = self._server.accept()\n        if devicesock:\n            print(clientaddr, \"has connected\")\n            self.input_list.append(clientsock)\n            self.input_list.append(devicesock)\n            self.channel[clientsock] = devicesock\n            self.channel[devicesock] = clientsock\n        else:\n            print(\"Can't establish connection with device inner server.\")\n            print(\"Closing connection with client side\", clientaddr)\n            clientsock.close()\n        \n    def on_close(self):\n        print(self.s.getpeername(), \"has disconnected\")\n        self.input_list.remove(self.s)\n        self.input_list.remove(self.channel[self.s])\n        out = self.channel[self.s]\n        self.channel[out].close()\n        self.channel[self.s].close()\n        del self.channel[out]\n        del self.channel[self.s]\n    \n    def on_recv(self):\n        data = self.data\n        self.channel[self.s].send(data)",
    "Code_level": "Class-level",
    "FSMID_for_test": 66,
    "right_result": "import socket\nimport select\n\nclass Device:\n    def __init__(self, host, port):\n        self.host = host\n        self.port = port\n\n    def connect(self):\n        return socket.create_connection((self.host, self.port))\n\nclass TCPForwardServer:\n    BUFFER_SIZE = 4096\n    DELAY = 0.1\n\n    def __init__(self, lhost: str, lport: int, rdev: Device, rport: int) -> None:\n        self.input_list = []\n        self.channel = {}\n        self._server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self._server.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        self._server.bind((lhost, lport))\n        self._server.listen(10)\n        self._rdev = rdev\n        self._rport = rport\n        self.input_list.append(self._server)\n\n    def main_loop(self) -> None:\n        while True:\n            read_sockets, _, _ = select.select(self.input_list, [], [])\n            for sock in read_sockets:\n                if sock == self._server:\n                    self.on_accept()\n                else:\n                    self.on_recv()\n            self.on_close()\n\n    def on_accept(self) -> None:\n        client_socket, addr = self._server.accept()\n        self.input_list.append(client_socket)\n        device_socket = self._rdev.connect()\n        self.channel[client_socket] = device_socket\n        self.channel[device_socket] = client_socket\n\n    def on_close(self) -> None:\n        for sock in list(self.input_list):\n            if sock in self.channel:\n                del self.channel[sock]\n            sock.close()\n            self.input_list.remove(sock)\n\n    def on_recv(self) -> None:\n        for client_socket in list(self.channel.keys()):\n            try:\n                data = client_socket.recv(self.BUFFER_SIZE)\n                if data:\n                    device_socket = self.channel[client_socket]\n                    device_socket.send(data)\n                else:\n                    self.on_close()\n            except:\n                self.on_close()"
  },
  {
    "Task_id": 409,
    "Instruction": "Task Description: Create a TCP server that handles both video streaming and sensor data processing concurrently, using separate ports for each type of data. The server should process video frames for object detection and control an RC car based on sensor inputs and detected objects.\n\nClass Description: Server - A class that manages two TCP servers running on different ports, one for video stream processing and another for sensor data handling. It uses multithreading to handle both servers concurrently.\n\nAttributes:\n- host: str - The host address where the server will run.\n- port1: int - The port number for the video stream server.\n- port2: int - The port number for the sensor data server.\n\nMethods:\n- video_stream(host: str, port: int) -> None - Starts a TCP server for video stream processing using the VideoStreamHandler class.\n- sensor_stream(host: str, port: int) -> None - Starts a TCP server for sensor data processing using the SensorDataHandler class.\n- start() -> None - Initializes and starts both servers in separate threads, with the sensor server running as a daemon thread.\n\nClass Description: VideoStreamHandler - A handler class for processing video streams, inheriting from socketserver.StreamRequestHandler. It performs object detection and controls an RC car based on the processed video frames and sensor data.\n\nAttributes:\n- nn: NeuralNetwork - A neural network model for image prediction.\n- obj_detection: ObjectDetection - An object detection utility.\n- rc_car: RCControl - An interface for controlling the RC car.\n- stop_cascade: cv2.CascadeClassifier - A classifier for detecting stop signs.\n- light_cascade: cv2.CascadeClassifier - A classifier for detecting traffic lights.\n- d_to_camera: DistanceToCamera - A utility for calculating distances to detected objects.\n- d_sensor_thresh: int - Threshold distance for sensor-based stopping.\n- d_stop_light_thresh: int - Threshold distance for stop sign and traffic light detection.\n- d_stop_sign: float - Current distance to the nearest stop sign.\n- d_light: float - Current distance to the nearest traffic light.\n- stop_start: int - Timestamp when stopping begins.\n- stop_finish: int - Timestamp when stopping ends.\n- stop_time: float - Duration of the stop.\n- drive_time_after_stop: float - Time driven after a stop.\n\nMethods:\n- __init__(request, client_address, server) -> None - Initializes the handler with necessary models and parameters.\n- handle() -> None - Processes incoming video stream, performs object detection, and controls the RC car based on the detected objects and sensor data.\n\nClass Description: SensorDataHandler - A handler class for processing sensor data, inheriting from socketserver.BaseRequestHandler. It reads and processes sensor data received from the client.\n\nAttributes: None\n\nMethods:\n- handle() -> None - Continuously reads sensor data from the client, updates the global sensor_data variable, and prints the received data.",
    "Canonical_solution": "import cv2\nimport sys\nimport threading\nimport socketserver\nimport numpy as np\n\nclass SensorDataHandler(socketserver.BaseRequestHandler):\n    def handle(self):\n        global sensor_data\n        while True:\n            data = self.request.recv(1024)\n            if not data:\n                break\n            sensor_data = round(float(data), 1)\n            print(sensor_data)\n\nclass VideoStreamHandler(socketserver.StreamRequestHandler):\n    def __init__(self, request, client_address, server):\n        self.nn = NeuralNetwork()\n        self.nn.load_model(\"saved_model/nn_model.xml\")\n        self.obj_detection = ObjectDetection()\n        self.rc_car = RCControl(\"/dev/tty.usbmodem1421\")\n        self.stop_cascade = cv2.CascadeClassifier(\"cascade_xml/stop_sign.xml\")\n        self.light_cascade = cv2.CascadeClassifier(\"cascade_xml/traffic_light.xml\")\n        self.d_to_camera = DistanceToCamera()\n        self.d_sensor_thresh = 30\n        self.d_stop_light_thresh = 25\n        self.d_stop_sign = self.d_stop_light_thresh\n        self.d_light = self.d_stop_light_thresh\n        self.stop_start = 0\n        self.stop_finish = 0\n        self.stop_time = 0\n        self.drive_time_after_stop = 0\n        super().__init__(request, client_address, server)\n\n    def handle(self):\n        global sensor_data\n        stream_bytes = b' '\n        stop_flag = False\n        stop_sign_active = True\n\n        try:\n            while True:\n                stream_bytes += self.rfile.read(1024)\n                first = stream_bytes.find(b'\\xff\\xd8')\n                last = stream_bytes.find(b'\\xff\\xd9')\n                if first != -1 and last != -1:\n                    jpg = stream_bytes[first:last + 2]\n                    stream_bytes = stream_bytes[last + 2:]\n                    gray = cv2.imdecode(np.frombuffer(jpg, dtype=np.uint8), cv2.IMREAD_GRAYSCALE)\n                    image = cv2.imdecode(np.frombuffer(jpg, dtype=np.uint8), cv2.IMREAD_COLOR)\n\n                    height, width = gray.shape\n                    roi = gray[int(height/2):height, :]\n\n                    v_param1 = self.obj_detection.detect(self.stop_cascade, gray, image)\n                    v_param2 = self.obj_detection.detect(self.light_cascade, gray, image)\n\n                    if v_param1 > 0 or v_param2 > 0:\n                        d1 = self.d_to_camera.calculate(v_param1, 5.5, 300, image)\n                        d2 = self.d_to_camera.calculate(v_param2, 5.5, 100, image)\n                        self.d_stop_sign = d1\n                        self.d_light = d2\n\n                    image_array = roi.reshape(1, int(height/2) * width).astype(np.float32)\n                    prediction = self.nn.predict(image_array)\n\n                    if sensor_data and int(sensor_data) < self.d_sensor_thresh:\n                        self.rc_car.stop()\n                        sensor_data = None\n                    elif 0 < self.d_stop_sign < self.d_stop_light_thresh and stop_sign_active:\n                        self.rc_car.stop()\n                        if not stop_flag:\n                            self.stop_start = cv2.getTickCount()\n                            stop_flag = True\n                        self.stop_finish = cv2.getTickCount()\n                        self.stop_time = (self.stop_finish - self.stop_start) / cv2.getTickFrequency()\n                        if self.stop_time > 5:\n                            stop_flag = False\n                            stop_sign_active = False\n                    elif 0 < self.d_light < self.d_stop_light_thresh:\n                        if self.obj_detection.red_light:\n                            self.rc_car.stop()\n                        self.d_light = self.d_stop_light_thresh\n                        self.obj_detection.red_light = False\n                    else:\n                        self.rc_car.steer(prediction)\n                        self.stop_start = cv2.getTickCount()\n                        self.d_stop_sign = self.d_stop_light_thresh\n                        if not stop_sign_active:\n                            self.drive_time_after_stop = (self.stop_start - self.stop_finish) / cv2.getTickFrequency()\n                            if self.drive_time_after_stop > 5:\n                                stop_sign_active = True\n\n                    if cv2.waitKey(1) & 0xFF == ord('q'):\n                        self.rc_car.stop()\n                        break\n        finally:\n            cv2.destroyAllWindows()\n            sys.exit()\n\nclass Server:\n    def __init__(self, host, port1, port2):\n        self.host = host\n        self.port1 = port1\n        self.port2 = port2\n\n    def video_stream(self, host, port):\n        s = socketserver.TCPServer((host, port), VideoStreamHandler)\n        s.serve_forever()\n\n    def sensor_stream(self, host, port):\n        s = socketserver.TCPServer((host, port), SensorDataHandler)\n        s.serve_forever()\n\n    def start(self):\n        sensor_thread = threading.Thread(target=self.sensor_stream, args=(self.host, self.port2))\n        sensor_thread.daemon = True\n        sensor_thread.start()\n        self.video_stream(self.host, self.port1)",
    "Code_level": "Class-level",
    "FSMID_for_test": 70,
    "right_result": "import socketserver\nimport threading\nimport cv2\nimport numpy as np\nfrom datetime import datetime\n\nclass Server:\n    def __init__(self, host: str, port1: int, port2: int):\n        self.host = host\n        self.port1 = port1\n        self.port2 = port2\n\n    def video_stream(self, host: str, port: int) -> None:\n        class VideoStreamHandler(socketserver.StreamRequestHandler):\n            def __init__(self, request, client_address, server):\n                super().__init__(request, client_address, server)\n                self.nn = NeuralNetwork()\n                self.obj_detection = ObjectDetection()\n                self.rc_car = RCControl()\n                self.stop_cascade = cv2.CascadeClassifier('stop_sign.xml')\n                self.light_cascade = cv2.CascadeClassifier('traffic_light.xml')\n                self.d_to_camera = DistanceToCamera()\n                self.d_sensor_thresh = 50\n                self.d_stop_light_thresh = 30\n                self.d_stop_sign = float('inf')\n                self.d_light = float('inf')\n                self.stop_start = 0\n                self.stop_finish = 0\n                self.stop_time = 0.0\n                self.drive_time_after_stop = 0.0\n\n            def handle(self):\n                while True:\n                    try:\n                        data = self.rfile.readline()\n                        if not data:\n                            break\n                        frame = np.frombuffer(data, dtype=np.uint8)\n                        frame = cv2.imdecode(frame, cv2.IMREAD_COLOR)\n                        detected_objects = self.obj_detection.detect(frame)\n                        for obj in detected_objects:\n                            if obj['type'] == 'stop_sign':\n                                self.d_stop_sign = self.d_to_camera.get_distance(obj['position'])\n                            elif obj['type'] == 'traffic_light':\n                                self.d_light = self.d_to_camera.get_distance(obj['position'])\n                        if self.d_stop_sign <= self.d_stop_light_thresh:\n                            self.stop_start = datetime.now().timestamp()\n                            self.rc_car.stop()\n                        elif self.d_light <= self.d_stop_light_thresh:\n                            self.stop_start = datetime.now().timestamp()\n                            self.rc_car.stop()\n                        else:\n                            if self.stop_start > 0:\n                                self.stop_finish = datetime.now().timestamp()\n                                self.stop_time = self.stop_finish - self.stop_start\n                                self.drive_time_after_stop = 0.0\n                                self.rc_car.start()\n                        if self.d_sensor_thresh <= self.d_stop_sign or self.d_sensor_thresh <= self.d_light:\n                            self.rc_car.stop()\n                    except Exception as e:\n                        print(f\"Error in video stream handler: {e}\")\n                        break\n\n        with socketserver.TCPServer((host, port), VideoStreamHandler) as server:\n            server.serve_forever()\n\n    def sensor_stream(self, host: str, port: int) -> None:\n        class SensorDataHandler(socketserver.BaseRequestHandler):\n            def handle(self):\n                while True:\n                    try:\n                        data = self.request.recv(1024)\n                        if not data:\n                            break\n                        global sensor_data\n                        sensor_data = data.decode('utf-8')\n                        print(f\"Received sensor data: {sensor_data}\")\n                    except Exception as e:\n                        print(f\"Error in sensor stream handler: {e}\")\n                        break\n\n        with socketserver.TCPServer((host, port), SensorDataHandler) as server:\n            server.serve_forever()\n\n    def start(self) -> None:\n        thread1 = threading.Thread(target=self.video_stream, args=(self.host, self.port1))\n        thread2 = threading.Thread(target=self.sensor_stream, args=(self.host, self.port2), daemon=True)\n        thread1.start()\n        thread2.start()\n        thread1.join()\n        thread2.join()\n\nclass NeuralNetwork:\n    def predict(self, frame):\n        return \"object_detected\"\n\nclass ObjectDetection:\n    def detect(self, frame):\n        return [{\"type\": \"stop_sign\", \"position\": (100, 100)}]\n\nclass RCControl:\n    def stop(self):\n        print(\"RC car stopped\")\n\n    def start(self):\n        print(\"RC car started\")\n\nclass DistanceToCamera:\n    def get_distance(self, position):\n        return 50.0\n\nsensor_data = \"\""
  },
  {
    "Task_id": 41,
    "Instruction": "Task Description: Create a Python class that implements an asynchronous HTTP client for interacting with a REST API, supporting PUT and GET operations for question-answer pairs.\n\nClass Description: The Client class provides asynchronous HTTP communication capabilities using httpx and asyncio. It handles JSON data exchange with a REST API endpoint, allowing storage (PUT) and retrieval (GET) of question-answer pairs.\n\nAttributes:\n_uri: str - The base URI of the REST API endpoint (default: \"http://localhost:8000\")\n_CLIENT_HEADER: dict - Static dictionary containing HTTP headers for JSON content type\n\nMethods:\n_put: async (question: str, answer: str) -> int - Internal async method that sends a question-answer pair to the API via POST request. Returns HTTP status code.\n_get: async (question: str) -> str - Internal async method that retrieves an answer for a given question via POST request. Returns the answer string or None.\nput: (question: str, answer: str) -> int - Synchronous wrapper for _put that runs the async operation. Returns HTTP status code.\nget: (question: str) -> str - Synchronous wrapper for _get that runs the async operation. Returns the answer string or None.",
    "Canonical_solution": "import asyncio\nimport json\nimport httpx\n\n_CLIENT_HEADER = {\"Content-Type\": \"application/json\", \"Accept\": \"application/json\"}\n\nclass Client:\n    def __init__(self, uri: str = \"http://localhost:8000\"):\n        self._uri = uri\n\n    async def _put(self, question: str, answer: str):\n        async with httpx.AsyncClient() as client:\n            data = {\n                \"prompt\": question,\n                \"answer\": answer,\n            }\n            response = await client.post(\n                f\"{self._uri}/put\", headers=_CLIENT_HEADER, data=json.dumps(data)\n            )\n        return response.status_code\n\n    async def _get(self, question: str):\n        async with httpx.AsyncClient() as client:\n            data = {\n                \"prompt\": question,\n            }\n            response = await client.post(\n                f\"{self._uri}/get\", headers=_CLIENT_HEADER, data=json.dumps(data)\n            )\n        return response.json().get(\"answer\")\n\n    def put(self, question: str, answer: str):\n        return asyncio.run(self._put(question, answer))\n\n    def get(self, question: str):\n        return asyncio.run(self._get(question))",
    "Code_level": "Class-level",
    "FSMID_for_test": 59,
    "right_result": "import httpx\nimport asyncio\nfrom typing import Optional\n\nclass Client:\n    _uri: str = \"http://localhost:8000\"\n    _CLIENT_HEADER = {\"Content-Type\": \"application/json\"}\n\n    async def _put(self, question: str, answer: str) -> int:\n        async with httpx.AsyncClient() as client:\n            response = await client.put(\n                f\"{self._uri}/questions\",\n                json={\"question\": question, \"answer\": answer},\n                headers=self._CLIENT_HEADER\n            )\n        return response.status_code\n\n    async def _get(self, question: str) -> Optional[str]:\n        async with httpx.AsyncClient() as client:\n            response = await client.post(\n                f\"{self._uri}/questions\",\n                json={\"question\": question},\n                headers=self._CLIENT_HEADER\n            )\n            if response.status_code == 200:\n                return response.json().get(\"answer\")\n        return None\n\n    def put(self, question: str, answer: str) -> int:\n        return asyncio.run(self._put(question, answer))\n\n    def get(self, question: str) -> Optional[str]:\n        return asyncio.run(self._get(question))"
  },
  {
    "Task_id": 413,
    "Instruction": "Task Description: Implement a TCP server using Python's socketserver module to handle incoming client connections, process JSON messages, and interact with a WeChat robot COM object for message processing and user information retrieval.\n\nClass Description: ReceiveMsgBaseServer is a custom request handler class that inherits from socketserver.BaseRequestHandler. It handles client connections, processes incoming JSON messages, and interacts with a WeChat robot COM object to enrich message data with user information.\n\nAttributes:\n- None (This class doesn't maintain persistent attributes beyond the inherited ones from BaseRequestHandler)\n\nMethods:\n- __init__(*args, **kwargs) -> None - Initializes the base request handler\n- handle() -> None - Main method that processes client connections, receives and parses JSON messages, and calls the message callback\n- msg_callback(msg: dict) -> None - Static method that processes the received message by interacting with WeChat robot COM objects to enrich message data with user information\n\nFunction Description: start_socket_server creates and starts a threaded TCP server that uses the ReceiveMsgBaseServer handler to process client connections.\n\nInput:\n- port: int (default=10808) - The port number to bind the server to\n- request_handler: class (default=ReceiveMsgBaseServer) - The request handler class to use\n- main_thread: bool (default=True) - Whether to run the server in the main thread or a daemon thread\n\nOutput:\n- int or None - Returns the thread identifier if main_thread=False, otherwise None (runs forever in main thread)",
    "Canonical_solution": "import socketserver\nimport threading\nimport comtypes\nimport json\n\nclass ReceiveMsgBaseServer(socketserver.BaseRequestHandler):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n\n    def handle(self):\n        conn = self.request\n        comtypes.CoInitialize()\n        while True:\n            try:\n                ptr_data = b\"\"\n                while True:\n                    data = conn.recv(1024)\n                    ptr_data += data\n                    if len(data) == 0 or data[-1] == 0xA:\n                        break\n                msg = json.loads(ptr_data.decode('utf-8'))\n                ReceiveMsgBaseServer.msg_callback(msg)\n            except OSError:\n                break\n            except json.JSONDecodeError:\n                pass\n            conn.sendall(\"200 OK\".encode())\n        conn.close()\n        comtypes.CoUninitialize()\n\n    @staticmethod\n    def msg_callback(msg):\n        robot = comtypes.client.CreateObject(\"WeChatRobot.CWeChatRobot\")\n        event = comtypes.client.CreateObject(\"WeChatRobot.RobotEvent\")\n        wx = WeChatRobot(msg['pid'], robot, event)\n        userinfo = wx.GetWxUserInfo(msg['wxid'])\n        msg['alias'] = userinfo['wxNumber']\n        if msg['isSendMsg'] == 0:\n            if '@chatroom' in msg['sender']:\n                chatroom_info = wx.GetWxUserInfo(msg['sender'])\n                msg['chatroom_name'] = chatroom_info['wxNickName']\n                msg['nickname'] = wx.GetChatRoomMemberNickname(msg['sender'], msg['wxid'])\n            else:\n                msg['nickname'] = userinfo['wxNickName']\n        print(msg)\n        robot.Release()\n        event.Release()\n\ndef start_socket_server(port: int = 10808,\n                       request_handler: 'ReceiveMsgBaseServer' = ReceiveMsgBaseServer,\n                       main_thread=True) -> int or None:\n    ip_port = (\"127.0.0.1\", port)\n    try:\n        s = socketserver.ThreadingTCPServer(ip_port, request_handler)\n        if main_thread:\n            s.serve_forever()\n        else:\n            socket_server = threading.Thread(target=s.serve_forever)\n            socket_server.setDaemon(True)\n            socket_server.start()\n            return socket_server.ident\n    except KeyboardInterrupt:\n        pass\n    except Exception as e:\n        print(e)\n    return None",
    "Code_level": "Class-level",
    "FSMID_for_test": 70,
    "right_result": "import socketserver\nimport threading\nimport json\nimport win32com.client\n\nclass ReceiveMsgBaseServer(socketserver.BaseRequestHandler):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n    \n    def handle(self):\n        data = self.request.recv(1024).strip()\n        if data:\n            try:\n                msg = json.loads(data.decode('utf-8'))\n                ReceiveMsgBaseServer.msg_callback(msg)\n            except json.JSONDecodeError:\n                pass\n    \n    @staticmethod\n    def msg_callback(msg):\n        try:\n            wechat = win32com.client.Dispatch(\"WeChatRobot.Application\")\n            user_info = wechat.GetUser(msg['user_id'])\n            msg['user_name'] = user_info.Name\n            msg['user_avatar'] = user_info.Avatar\n            print(json.dumps(msg, ensure_ascii=False))\n        except Exception as e:\n            print(f\"Error processing message: {str(e)}\")\n\ndef start_socket_server(port=10808, request_handler=ReceiveMsgBaseServer, main_thread=True):\n    server = socketserver.ThreadingTCPServer(('localhost', port), request_handler)\n    if main_thread:\n        server.serve_forever()\n    else:\n        thread = threading.Thread(target=server.serve_forever)\n        thread.daemon = True\n        thread.start()\n        return thread.ident"
  },
  {
    "Task_id": 415,
    "Instruction": "Task Description: Implement a TCP server using Python's socketserver module to handle client requests with proper data framing and error handling.\n\nClass Description: TCPRequestHandler is a custom request handler class that inherits from socketserver.BaseRequestHandler. It handles TCP client connections by implementing methods to receive and send framed data, and processes client requests in the handle() method.\n\nAttributes:\n- request: [socket.socket] - The client connection socket object inherited from BaseRequestHandler\n- client_address: [tuple] - The client address (host, port) inherited from BaseRequestHandler\n- server: [socketserver.BaseServer] - The server instance inherited from BaseRequestHandler\n\nMethods:\n- get_data() -> bytes - Receives and validates framed data from the client. The data is expected to be prefixed with a 2-byte big-endian size field.\n  Input: None\n  Output: bytes - The received payload data (without size prefix)\n  \n- send_data(data: bytes) -> None - Sends framed data to the client by prefixing the payload with a 2-byte big-endian size field.\n  Input: data [bytes] - The payload data to send\n  Output: None\n  \n- handle() -> None - Main request handling method that coordinates receiving and processing client data.\n  Input: None\n  Output: None\n\nClass Description: DNSServer is a server management class that creates and manages TCP/UDP server instances for handling DNS requests.\n\nAttributes:\n- port: [int] - The port number to listen on (default: 53)\n- use_tcp: [bool] - Flag to enable TCP server (default: True)\n- use_udp: [bool] - Flag to enable UDP server (default: False)\n- servers: [list] - List of active server instances\n\nMethods:\n- __init__(port: int = 53, use_tcp: bool = True, use_udp: bool = False) -> None - Initializes the server configuration.\n  Input: \n    port [int] - Server port number\n    use_tcp [bool] - Enable TCP server\n    use_udp [bool] - Enable UDP server\n  Output: None\n  \n- start() -> None - Starts the configured servers in separate threads.\n  Input: None\n  Output: None\n  \n- shutdown() -> None - Shuts down all running server instances.\n  Input: None\n  Output: None",
    "Canonical_solution": "import socketserver\nimport struct\nimport threading\n\nclass TCPRequestHandler(socketserver.BaseRequestHandler):\n    def get_data(self):\n        data = self.request.recv(8192).strip()\n        sz = struct.unpack('>H', data[:2])[0]\n        if sz < len(data) - 2:\n            raise Exception(\"Wrong size of TCP packet\")\n        elif sz > len(data) - 2:\n            raise Exception(\"Too big TCP packet\")\n        return data[2:]\n\n    def send_data(self, data):\n        sz = struct.pack('>H', len(data))\n        return self.request.sendall(sz + data)\n\n    def handle(self):\n        try:\n            data = self.get_data()\n            self.send_data(dns_response(data))\n        except Exception:\n            pass\n\nclass DNSServer:\n    def __init__(self, port=53, use_tcp=True, use_udp=False):\n        self.port = port\n        self.use_tcp = use_tcp\n        self.use_udp = use_udp\n        self.servers = []\n\n    def start(self):\n        if self.use_tcp:\n            self.servers.append(socketserver.ThreadingTCPServer(('', self.port), TCPRequestHandler))\n        if self.use_udp:\n            self.servers.append(socketserver.ThreadingUDPServer(('', self.port), UDPRequestHandler))\n\n        for s in self.servers:\n            thread = threading.Thread(target=s.serve_forever)\n            thread.daemon = True\n            thread.start()\n\n    def shutdown(self):\n        for s in self.servers:\n            s.shutdown()",
    "Code_level": "Class-level",
    "FSMID_for_test": 70,
    "right_result": "import socketserver\nimport threading\n\nclass TCPRequestHandler(socketserver.BaseRequestHandler):\n    def get_data(self) -> bytes:\n        size_bytes = self.request.recv(2)\n        if not size_bytes:\n            raise ConnectionResetError(\"Client disconnected\")\n        size = int.from_bytes(size_bytes, byteorder='big')\n        data = self.request.recv(size)\n        if len(data) < size:\n            raise ValueError(\"Incomplete data received\")\n        return data\n\n    def send_data(self, data: bytes) -> None:\n        size = len(data)\n        if size > 65535:\n            raise ValueError(\"Data too large for 2-byte size field\")\n        self.request.sendall(size.to_bytes(2, byteorder='big'))\n        self.request.sendall(data)\n\n    def handle(self) -> None:\n        try:\n            payload = self.get_data()\n            # Process the request here\n            response = b\"Response to \" + payload\n            self.send_data(response)\n        except Exception as e:\n            self.send_data(b\"Error: \" + str(e).encode())\n\nclass DNSServer:\n    def __init__(self, port: int = 53, use_tcp: bool = True, use_udp: bool = False) -> None:\n        self.port = port\n        self.use_tcp = use_tcp\n        self.use_udp = use_udp\n        self.servers = []\n\n    def start(self) -> None:\n        for protocol in ['tcp', 'udp']:\n            if getattr(self, f\"use_{protocol}\"):\n                server_class = socketserver.TCPServer if protocol == 'tcp' else socketserver.UDPServer\n                handler_class = type('DNSUDPRequestHandler', (socketserver.BaseRequestHandler,), {})\n                server = server_class(('0.0.0.0', self.port), handler_class)\n                self.servers.append(server)\n                t = threading.Thread(target=server.serve_forever)\n                t.daemon = True\n                t.start()\n\n    def shutdown(self) -> None:\n        for server in self.servers:\n            server.shutdown()"
  },
  {
    "Task_id": 416,
    "Instruction": "Task Description: Implement a TCP server using Python's socketserver module to handle client connections and echo back received messages.\n\nClass Description: The solution consists of two classes: EchoHandler for processing client requests and TCPServerWrapper for managing the TCP server instance.\n\nAttributes:\n- host: str - The host address to bind the server to (default: '' for all interfaces)\n- port: int - The port number to listen on (default: 20000)\n- server: TCPServer - The TCP server instance created with specified host and port\n\nMethods:\n- EchoHandler.handle() -> None - Processes client requests by continuously receiving messages and echoing them back until connection is closed\n- TCPServerWrapper.__init__(host: str = '', port: int = 20000) -> None - Initializes the TCP server with given host and port\n- TCPServerWrapper.serve_forever() -> None - Starts the server and keeps it running indefinitely while printing status information",
    "Canonical_solution": "from socketserver import BaseRequestHandler, TCPServer\n\nclass EchoHandler(BaseRequestHandler):\n    def handle(self):\n        print('Got connection from', self.client_address)\n        while True:\n            msg = self.request.recv(8192)\n            if not msg:\n                break\n            self.request.send(msg)\n\nclass TCPServerWrapper:\n    def __init__(self, host='', port=20000):\n        self.host = host\n        self.port = port\n        self.server = TCPServer((self.host, self.port), EchoHandler)\n\n    def serve_forever(self):\n        print(f'Echo server running on port {self.port}')\n        self.server.serve_forever()",
    "Code_level": "Class-level",
    "FSMID_for_test": 70,
    "right_result": "import socketserver\n\nclass EchoHandler(socketserver.BaseRequestHandler):\n    def handle(self):\n        while True:\n            data = self.request.recv(1024)\n            if not data:\n                break\n            self.request.sendall(data)\n\nclass TCPServerWrapper:\n    def __init__(self, host: str = '', port: int = 20000):\n        self.host = host\n        self.port = port\n        self.server = socketserver.TCPServer((self.host, self.port), EchoHandler)\n\n    def serve_forever(self):\n        print(f\"Server started on {self.host}:{self.port}\")\n        try:\n            self.server.serve_forever()\n        except KeyboardInterrupt:\n            print(\"Server is shutting down.\")\n        finally:\n            self.server.server_close()\n            print(\"Server has been closed.\")"
  },
  {
    "Task_id": 418,
    "Instruction": "Task Description: Create a TCP server using Python's socketserver module that echoes back any received messages to the client.\n\nClass Description: The implementation consists of two classes: EchoHandler for handling client connections and EchoServer for managing the TCP server. The EchoHandler processes incoming messages and sends them back, while EchoServer initializes and runs the server.\n\nAttributes:\n- host: str - The host address to bind the server to (default: '' for all interfaces)\n- port: int - The port number to listen on (default: 20000)\n- server: TCPServer - The TCP server instance created with the specified host and port\n\nMethods:\n- EchoHandler.handle() -> None - Handles client connections by continuously receiving messages and echoing them back until the connection is closed\n- EchoServer.__init__(host: str = '', port: int = 20000) -> None - Initializes the server with the given host and port\n- EchoServer.serve_forever() -> None - Starts the server and keeps it running indefinitely while printing a status message",
    "Canonical_solution": "from socketserver import BaseRequestHandler, TCPServer\n\nclass EchoHandler(BaseRequestHandler):\n    def handle(self):\n        print('Got connection from', self.client_address)\n        while True:\n            msg = self.request.recv(8192)\n            if not msg:\n                break\n            self.request.send(msg)\n\nclass EchoServer:\n    def __init__(self, host='', port=20000):\n        self.host = host\n        self.port = port\n        self.server = TCPServer((self.host, self.port), EchoHandler)\n\n    def serve_forever(self):\n        print(f'Echo server running on port {self.port}')\n        self.server.serve_forever()",
    "Code_level": "Class-level",
    "FSMID_for_test": 70,
    "right_result": "import socketserver\n\nclass EchoHandler(socketserver.BaseRequestHandler):\n    def handle(self):\n        while True:\n            data = self.request.recv(1024)\n            if not data:\n                break\n            self.request.sendall(data)\n\nclass EchoServer(socketserver.TCPServer):\n    def __init__(self, host: str = '', port: int = 20000):\n        super().__init__((host, port), EchoHandler)\n        self.server = self\n\n    def serve_forever(self):\n        print(\"Echo server is running on port 20000...\")\n        super().serve_forever()"
  },
  {
    "Task_id": 419,
    "Instruction": "Task Description: Implement a TCP server using Twisted framework in Python that supports WebSocket connections, handles incoming data, and manages connection lifecycle events.\n\nClass Description: The solution consists of two classes: `HelloServerProtocol` (handles protocol-level operations) and `HelloServerFactory` (manages server configuration and startup).\n\nAttributes:\n\n- `HelloServerProtocol`:\n  - transport: [object] - Twisted transport object representing the connection\n- `HelloServerFactory`:\n  - host: [str] - Server host address (default: \"127.0.0.1\")\n  - port: [int] - Server port number (default: 9000)\n  - wrappedFactory: [object] - Twisted Factory instance for protocol handling\n  - factory: [object] - WebSocket-wrapped factory instance\n\nMethods:\n\n- `HelloServerProtocol`:\n  - connectionMade() -> None - Called when a new connection is established\n  - dataReceived(data: bytes) -> None - Called when data is received from client\n- `HelloServerFactory`:\n  - __init__(host: str = \"127.0.0.1\", port: int = 9000, enableCompression: bool = False, autoFragmentSize: int = 1024) -> None - Initializes factory with configuration\n  - start() -> None - Starts the TCP server and enters event loop",
    "Canonical_solution": "from twisted.internet.protocol import Protocol, Factory\nfrom twisted.internet import reactor\nfrom autobahn.twisted.websocket import WrappingWebSocketServerFactory\n\nclass HelloServerProtocol(Protocol):\n    def connectionMade(self):\n        print(\"connectionMade\", self.transport.getHost(), self.transport.getPeer())\n        self.transport.write('how are you?' * 100)\n\n    def dataReceived(self, data):\n        print(\"dataReceived: {}\".format(data))\n\nclass HelloServerFactory:\n    def __init__(self, host=\"127.0.0.1\", port=9000, enableCompression=False, autoFragmentSize=1024):\n        self.host = host\n        self.port = port\n        self.wrappedFactory = Factory.forProtocol(HelloServerProtocol)\n        self.factory = WrappingWebSocketServerFactory(\n            self.wrappedFactory,\n            f\"ws://{self.host}:{self.port}\",\n            enableCompression=enableCompression,\n            autoFragmentSize=autoFragmentSize\n        )\n\n    def start(self):\n        reactor.listenTCP(self.port, self.factory)\n        reactor.run()",
    "Code_level": "Class-level",
    "FSMID_for_test": 68,
    "right_result": "from twisted.internet import reactor\nfrom twisted.web.server import Site\nfrom twisted.web.resource import Resource\nfrom twisted.internet.protocol import Factory, Protocol\nfrom twisted.protocols.basic import LineReceiver\nfrom twisted.web.wsgi import WSGIResource\nfrom ws4py.twisted import WebSocketFactory\nimport logging\n\nclass HelloServerProtocol(Protocol):\n    def connectionMade(self):\n        self.transport.write(b\"Hello from server!\")\n\n    def dataReceived(self, data):\n        logging.info(f\"Received data: {data.decode('utf-8')}\")\n\nclass HelloServerFactory:\n    def __init__(self, host=\"127.0.0.1\", port=9000, enableCompression=False, autoFragmentSize=1024):\n        self.host = host\n        self.port = port\n        self.enableCompression = enableCompression\n        self.autoFragmentSize = autoFragmentSize\n        self.wrappedFactory = WebSocketFactory(\n            HelloServerProtocol,\n            enableCompression=self.enableCompression,\n            autoFragmentSize=self.autoFragmentSize\n        )\n        self.factory = self.wrappedFactory\n\n    def start(self):\n        reactor.listenTCP(self.port, self.factory, interface=self.host)\n        reactor.run()"
  },
  {
    "Task_id": 42,
    "Instruction": "Task Description: Create an asynchronous function to send HTTP POST requests using httpx library in Python, handling JSON data and potential errors.\n\nFunction Description: The function sends an asynchronous HTTP POST request to a specified URL with JSON data, optional headers, and timeout settings. It automatically raises exceptions for non-success status codes and returns the parsed JSON response.\n\nInput:\n- url: str - The target URL for the POST request\n- data: dict - The JSON data to be sent in the request body\n- headers: dict (optional) - Additional HTTP headers to include (default: empty dict)\n- timeout: int | None (optional) - Request timeout in seconds (default: None)\n\nOutput:\n- dict - Parsed JSON response from the server if the request is successful\n- Raises httpx.HTTPStatusError if the response status code indicates an error (4xx or 5xx)",
    "Canonical_solution": "import json\nimport httpx\n\nasync def a_send_post_request(\n    url: str, data: dict, headers: dict = {}, timeout: int | None = None\n):\n    async with httpx.AsyncClient() as client:\n        response = await client.post(url, json=data, headers=headers, timeout=timeout)\n        response.raise_for_status()\n        return response.json()",
    "Code_level": "Function-level",
    "FSMID_for_test": 59,
    "right_result": "import httpx\nimport asyncio\n\nasync def send_post_request(url, data, headers=None, timeout=None):\n    async with httpx.AsyncClient() as client:\n        try:\n            response = await client.post(url, json=data, headers=headers, timeout=timeout)\n            response.raise_for_status()\n            return response.json()\n        except httpx.RequestError as e:\n            raise RuntimeError(f\"Request error: {e}\") from e\n        except httpx.HTTPStatusError as e:\n            raise e"
  },
  {
    "Task_id": 420,
    "Instruction": "Task Description: Implement a UDP server in Python using the socketserver module to handle client requests and send responses.\n\nClass Description: The solution consists of two classes: TimeHandler (request handler) and UDPServerWrapper (server wrapper). TimeHandler processes incoming UDP requests and sends back the current time, while UDPServerWrapper manages the UDP server lifecycle.\n\nAttributes:\n- host: str - The host address to bind the server to (default: '' - all interfaces)\n- port: int - The port number to bind the server to (default: 20000)\n- server: UDPServer - The UDP server instance created with the specified host and port\n\nMethods:\n- __init__(host: str = '', port: int = 20000) -> None - Initializes the UDPServerWrapper with host and port, creates a UDPServer instance with TimeHandler\n- serve_forever() -> None - Starts the UDP server and keeps it running indefinitely to handle incoming requests\n\nThe TimeHandler class (inherits from BaseRequestHandler) contains:\n- handle() -> None - Processes each incoming request, prints client info, gets current time, and sends response back to client",
    "Canonical_solution": "from socketserver import BaseRequestHandler, UDPServer\nimport time\n\nclass TimeHandler(BaseRequestHandler):\n    def handle(self):\n        print('Got connection from', self.client_address)\n        msg, sock = self.request\n        resp = time.ctime()\n        sock.sendto(resp.encode('ascii'), self.client_address)\n\nclass UDPServerWrapper:\n    def __init__(self, host='', port=20000):\n        self.host = host\n        self.port = port\n        self.server = UDPServer((self.host, self.port), TimeHandler)\n\n    def serve_forever(self):\n        self.server.serve_forever()",
    "Code_level": "Class-level",
    "FSMID_for_test": 72,
    "right_result": "import socketserver\nimport time\n\nclass TimeHandler(socketserver.BaseRequestHandler):\n    def handle(self):\n        client_ip, client_port = self.client_address\n        print(f\"Received request from {client_ip}:{client_port}\")\n        current_time = time.ctime()\n        self.request.sendto(current_time.encode(), self.client_address)\n\nclass UDPServerWrapper:\n    def __init__(self, host: str = '', port: int = 20000):\n        self.host = host\n        self.port = port\n        self.server = socketserver.UDPServer((self.host, self.port), TimeHandler)\n\n    def serve_forever(self):\n        print(f\"UDP server started on {self.host}:{self.port}\")\n        self.server.serve_forever()"
  },
  {
    "Task_id": 421,
    "Instruction": "Task Description: Create a UDP server using Twisted framework in Python that integrates with Mayavi for processing and executing received commands to manipulate 3D visualizations.\n\nClass Description: The implementation consists of two classes: M2UDP (a custom UDP protocol handler) and MayaviUDPServer (the main server class). The system receives UDP datagrams containing Python commands, executes them in a Mayavi visualization context, and renders the results.\n\nAttributes:\n\nengine: [object] - The Mayavi engine instance for visualization control\nmlab: [module] - The Mayavi mlab module for 3D visualization\nport: [int] - The UDP port number to listen on\nlogto: [file object] - Where to direct logging output\nscene: [object] - The current Mayavi scene (initialized from engine)\nproto: [M2UDP] - The protocol handler instance\n\nMethods:\n\nM2UDP.__init__: [__init__(engine=None, mlab=None)] -> [None] - Initializes the UDP protocol handler with Mayavi engine and mlab references\nM2UDP.datagramReceived: [datagramReceived(data, host_port)] -> [None] - Handles incoming UDP datagrams, executes contained Python code in Mayavi context, and triggers scene rendering\nMayaviUDPServer.__init__: [__init__(engine=None, port=9007, logto=sys.stdout)] -> [None] - Initializes the server with Mayavi engine, port configuration, and logging setup\nMayaviUDPServer.serve: [serve()] -> [None] - Starts the UDP server, binds the protocol handler, and runs the reactor loop",
    "Canonical_solution": "import sys\nimport wx\nfrom twisted.internet import wxreactor\nwxreactor.install()\nfrom twisted.internet.protocol import DatagramProtocol\nfrom twisted.internet import reactor\nfrom twisted.python import log\n\nclass M2UDP(DatagramProtocol):\n    def __init__(self, engine=None, mlab=None):\n        self.engine = engine\n        self.mlab = mlab\n        if self.engine is not None:\n            self.scene = self.engine.current_scene.scene\n\n    def datagramReceived(self, data, host_port):\n        host, port = host_port\n        log.msg(\"Received: %r from %s:%d\" % (data, host, port))\n        c = data.strip()\n        if len(c) > 0:\n            mlab = self.mlab\n            engine = self.engine\n            scene = self.scene\n            camera = scene.camera\n            try:\n                exec(c, locals(), globals())\n            except:\n                log.err()\n            scene.render()\n\nclass MayaviUDPServer:\n    def __init__(self, engine=None, port=9007, logto=sys.stdout):\n        from mayavi import mlab\n        self.engine = engine or mlab.get_engine()\n        self.port = port\n        self.logto = logto\n        self.mlab = mlab\n\n    def serve(self):\n        proto = M2UDP(engine=self.engine, mlab=self.mlab)\n        \n        if self.logto is not None:\n            log.startLogging(self.logto)\n        log.msg('Serving Mayavi2 UDP server on port', self.port)\n        log.msg('Using Engine', self.engine)\n\n        reactor.registerWxApp(wx.GetApp())\n        reactor.listenUDP(self.port, proto)\n        reactor.run()",
    "Code_level": "Class-level",
    "FSMID_for_test": 73,
    "right_result": "import sys\nfrom twisted.internet import reactor\nfrom twisted.internet.protocol import DatagramProtocol\n\nclass M2UDP(DatagramProtocol):\n    def __init__(self, engine=None, mlab=None):\n        self.engine = engine\n        self.mlab = mlab\n\n    def datagramReceived(self, data, host_port):\n        try:\n            code = data.decode('utf-8')\n            exec(code, {'engine': self.engine, 'mlab': self.mlab})\n            self.engine.scene.render()\n        except Exception as e:\n            print(f\"Error executing command: {e}\", file=self.logto)\n\nclass MayaviUDPServer:\n    def __init__(self, engine=None, port=9007, logto=sys.stdout):\n        self.engine = engine\n        self.port = port\n        self.logto = logto\n        self.proto = M2UDP(engine=self.engine, mlab=self.mlab)\n\n    def serve(self):\n        reactor.listenUDP(self.port, self.proto)\n        reactor.run()"
  },
  {
    "Task_id": 422,
    "Instruction": "Task Description: Implement a UDP server that listens for incoming messages on a specified IP address and port, processes the received data, and terminates when a specific exit command is received.\n\nFunction Description: The function `udp_server` creates a UDP socket, binds it to a local IP address and port, and continuously listens for incoming messages. It processes the received data by decoding it from bytes to a UTF-8 string and checks for an exit command to terminate the loop. The socket is closed once the loop exits.\n\nInput: None\n\nOutput: None",
    "Canonical_solution": "import socket\n\ndef udp_server():\n    UDP_IP = \"127.0.0.1\"\n    UDP_PORT = 6000\n\n    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)  # UDP\n    sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n    sock.bind((UDP_IP, UDP_PORT))\n\n    while True:\n        dataudp, addr = sock.recvfrom(1024)  # buffer size is 1024 bytes\n        try:\n            data = str(dataudp.rstrip('\\x00').decode('utf-8'))\n        except:\n            data = str(dataudp.decode('utf-8'))\n        \n        # Process received data here\n        \n        if \"Exit\" in data:\n            break\n\n    sock.close()",
    "Code_level": "Function-level",
    "FSMID_for_test": 71,
    "right_result": "import socket\n\ndef udp_server():\n    server_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n    server_socket.bind(('0.0.0.0', 9999))\n    print(\"UDP server is listening on port 9999...\")\n    while True:\n        data, addr = server_socket.recvfrom(1024)\n        message = data.decode('utf-8')\n        if message == 'exit':\n            print(\"Exit command received. Closing server.\")\n            break\n        print(f\"Received message: {message} from {addr}\")\n    server_socket.close()"
  },
  {
    "Task_id": 426,
    "Instruction": "Task Description: Implement a function to receive a multicast token via UDP communication, handling potential timeouts and interruptions gracefully.\n\nFunction Description: The function continuously listens for incoming UDP packets on a specified port, attempting to extract and decode a token from valid JSON messages. It runs in a loop until either a valid token is received or a cancellation flag is set. The function handles socket timeouts and other exceptions silently, only processing valid messages that match the expected format.\n\nInput: None (uses global variables for control flow)\n\nOutput: None (modifies global variable 'multicast_token' when successful)",
    "Canonical_solution": "import socket\nimport struct\nimport json\nimport threading\n\nglobal multicast_token, cancel_thread\nmulticast_token = None\ncancel_thread = False\n\ndef receive_token():\n    global multicast_token, cancel_thread\n    received_token = False\n    while received_token == False and cancel_thread == False:\n        s = socket.socket(family=socket.AF_INET, type=socket.SOCK_DGRAM)\n        s.bind(('0.0.0.0', 6669))\n        s.settimeout(2)\n        try:\n            # despite suggestions of being unused, addr must remain present, or this will fail\n            msg, addr = s.recvfrom(255)\n            (msglen,) = struct.unpack(\">I\", msg[12:16])\n            msg = msg[16: msglen + 8].decode()\n            msg = json.loads(msg)\n            token = msg[\"token\"]\n            received_token = True\n            s.close()\n            multicast_token = token\n        except KeyboardInterrupt:\n            return\n        except:\n            pass",
    "Code_level": "Function-level",
    "FSMID_for_test": 71,
    "right_result": "import socket\nimport json\nimport threading\nimport time\n\nmulticast_token = None\ncancellation_flag = False\n\ndef receive_multicast_token():\n    global multicast_token, cancellation_flag\n    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n    sock.settimeout(1.0)\n    sock.bind(('0.0.0.0', 5000))\n    print(\"Listening for multicast token on port 5000...\")\n    \n    while not cancellation_flag:\n        try:\n            data, addr = sock.recvfrom(65507)\n            message = data.decode('utf-8')\n            try:\n                payload = json.loads(message)\n                if 'token' in payload:\n                    multicast_token = payload['token']\n                    print(f\"Received valid token: {multicast_token}\")\n                    cancellation_flag = True\n            except json.JSONDecodeError:\n                pass\n        except socket.timeout:\n            continue\n        except Exception as e:\n            pass\n    sock.close()"
  },
  {
    "Task_id": 427,
    "Instruction": "Task Description: Implement a function that listens for a multicast token over UDP, decodes the received message, and extracts the token value.\n\nFunction Description: The function continuously listens on a specified UDP port for incoming messages containing a token. When a valid message is received, it parses the message, extracts the token, and stores it in a global variable. The function handles socket creation, binding, timeout, and cleanup, and runs in a loop until a token is received or a cancellation flag is set.\n\nInput: None (uses global variables `multicast_token` and `cancel_thread` for state management)\n\nOutput: None (updates the global variable `multicast_token` with the received token if successful)",
    "Canonical_solution": "import socket\nimport struct\nimport json\nimport threading\nimport time\n\nglobal multicast_token, cancel_thread\nmulticast_token = None\ncancel_thread = False\n\ndef receive_token():\n    global multicast_token, cancel_thread\n    received_token = False\n    while received_token == False and cancel_thread == False:\n        s = socket.socket(family=socket.AF_INET, type=socket.SOCK_DGRAM)\n        s.bind(('0.0.0.0', 6669))\n        s.settimeout(2)\n        try:\n            # despite suggestions of being unused, addr must remain present, or this will fail\n            msg, addr = s.recvfrom(255)\n            (msglen,) = struct.unpack(\">I\", msg[12:16])\n            msg = msg[16: msglen + 8].decode()\n            msg = json.loads(msg)\n            token = msg[\"token\"]\n            received_token = True\n            s.close()\n            multicast_token = token\n        except KeyboardInterrupt:\n            return\n        except:\n            pass",
    "Code_level": "Function-level",
    "FSMID_for_test": 71,
    "right_result": "import socket\nimport threading\n\nmulticast_token = None\ncancel_thread = False\n\ndef listen_multicast():\n    global multicast_token, cancel_thread\n    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n    sock.settimeout(1.0)\n    sock.bind(('', 5000))\n    mreq = socket.inet_aton('224.0.0.1') + socket.inet_aton('0.0.0.0')\n    sock.setsockopt(socket.IPPROTO_IP, socket.IP_ADD_MEMBERSHIP, mreq)\n    \n    while not cancel_thread:\n        try:\n            data, addr = sock.recvfrom(65507)\n            if data:\n                token_str = data.decode('utf-8').split(':')[-1].strip()\n                if token_str.isdigit():\n                    multicast_token = int(token_str)\n                    cancel_thread = True\n        except socket.timeout:\n            continue\n        except Exception as e:\n            print(f\"Error: {e}\")\n            break\n    \n    sock.close()"
  },
  {
    "Task_id": 43,
    "Instruction": "Task Description: Create a Python class that acts as an adapter between OpenAI's API format and Claude's API format, handling HTTP requests asynchronously using httpx and asyncio.\n\nClass Description: The ClaudeAdapter class facilitates communication with Claude's API by converting OpenAI-style requests to Claude's format and vice versa. It handles both synchronous and streaming responses, manages API keys, and processes HTTP requests with proper error handling.\n\nAttributes:\n- claude_api_key: str - The API key for Claude's service, either from environment variables or request headers\n- claude_base_url: str - The base URL for Claude's API endpoints (default: \"https://api.anthropic.com\")\n\nMethods:\n- __init__(claude_base_url: str = \"https://api.anthropic.com\") -> None - Initializes the adapter with optional base URL configuration\n- get_api_key(headers: dict) -> str - Extracts the API key from request headers or falls back to environment variable\n- chat(request: Request) -> AsyncGenerator - Main method that handles incoming requests, converts parameters, makes API calls, and yields responses in OpenAI format\n- openai_to_claude_params(openai_params: dict) -> dict - Converts OpenAI-style parameters to Claude's format (implementation not shown)\n- claude_to_chatgpt_response(claude_response: dict) -> dict - Converts Claude's response format to OpenAI's format (implementation not shown)\n- claude_to_chatgpt_response_stream(claude_response: dict) -> dict - Converts streaming response format (implementation not shown)",
    "Canonical_solution": "import httpx\nimport time\nimport json\nimport os\nfrom fastapi import Request\n\nclass ClaudeAdapter:\n    def __init__(self, claude_base_url=\"https://api.anthropic.com\"):\n        self.claude_api_key = os.getenv(\"CLAUDE_API_KEY\", None)\n        self.claude_base_url = claude_base_url\n\n    def get_api_key(self, headers):\n        auth_header = headers.get(\"authorization\", None)\n        if auth_header:\n            return auth_header.split(\" \")[1]\n        else:\n            return self.claude_api_key\n\n    async def chat(self, request: Request):\n        openai_params = await request.json()\n        headers = request.headers\n        claude_params = self.openai_to_claude_params(openai_params)\n        api_key = self.get_api_key(headers)\n\n        async with httpx.AsyncClient(timeout=120.0) as client:\n            if not claude_params.get(\"stream\", False):\n                response = await client.post(\n                    f\"{self.claude_base_url}/v1/complete\",\n                    headers={\n                        \"x-api-key\": api_key,\n                        \"accept\": \"application/json\",\n                        \"content-type\": \"application/json\",\n                        \"anthropic-version\": \"2023-06-01\",\n                    },\n                    json=claude_params,\n                )\n                if response.is_error:\n                    raise Exception(f\"Error: {response.status_code}\")\n                claude_response = response.json()\n                openai_response = self.claude_to_chatgpt_response(claude_response)\n                yield openai_response\n            else:\n                async with client.stream(\n                    \"POST\",\n                    f\"{self.claude_base_url}/v1/complete\",\n                    headers={\n                        \"x-api-key\": api_key,\n                        \"accept\": \"application/json\",\n                        \"content-type\": \"application/json\",\n                        \"anthropic-version\": \"2023-06-01\",\n                    },\n                    json=claude_params,\n                ) as response:\n                    if response.is_error:\n                        raise Exception(f\"Error: {response.status_code}\")\n                    async for line in response.aiter_lines():\n                        if line:\n                            stripped_line = line.lstrip(\"data:\")\n                            if stripped_line:\n                                try:\n                                    decoded_line = json.loads(stripped_line)\n                                    stop_reason = decoded_line.get(\"stop_reason\")\n                                    if stop_reason:\n                                        yield self.claude_to_chatgpt_response_stream(\n                                            {\n                                                \"completion\": \"\",\n                                                \"stop_reason\": stop_reason,\n                                            }\n                                        )\n                                        yield \"[DONE]\"\n                                    else:\n                                        completion = decoded_line.get(\"completion\")\n                                        if completion:\n                                            openai_response = (\n                                                self.claude_to_chatgpt_response_stream(\n                                                    decoded_line\n                                                )\n                                            )\n                                            yield openai_response\n                                except json.JSONDecodeError as e:\n                                    logger.debug(\n                                        f\"Error decoding JSON: {e}\"\n                                    )",
    "Code_level": "Class-level",
    "FSMID_for_test": 59,
    "right_result": "import httpx\nimport asyncio\nimport os\nfrom typing import AsyncGenerator, Dict, Any\n\nclass ClaudeAdapter:\n    def __init__(self, claude_base_url: str = \"https://api.anthropic.com\") -> None:\n        self.claude_base_url = claude_base_url\n\n    def get_api_key(self, headers: dict) -> str:\n        api_key = headers.get(\"x-api-key\")\n        if not api_key:\n            api_key = os.getenv(\"ANTHROPIC_API_KEY\")\n        if not api_key:\n            raise ValueError(\"API key not found in headers or environment variables\")\n        return api_key\n\n    async def chat(self, request: Dict[str, Any]) -> AsyncGenerator[Dict[str, Any], None]:\n        openai_params = request\n        claude_params = self.openai_to_claude_params(openai_params)\n        headers = {\n            \"x-api-key\": self.get_api_key(headers=request.get(\"headers\", {})),\n            \"content-type\": \"application/json\"\n        }\n        async with httpx.AsyncClient(base_url=self.claude_base_url) as client:\n            response = await client.post(\"/v1/messages\", json=claude_params, headers=headers)\n            response.raise_for_status()\n            if \"stream\" in claude_params and claude_params[\"stream\"]:\n                async for chunk in response.aiter_bytes():\n                    yield self.claude_to_chatgpt_response_stream({\"content\": chunk.decode()})\n            else:\n                yield self.claude_to_chatgpt_response(response.json())\n\n    def openai_to_claude_params(self, openai_params: Dict[str, Any]) -> Dict[str, Any]:\n        # Implementation of parameter conversion from OpenAI to Claude format\n        pass\n\n    def claude_to_chatgpt_response(self, claude_response: Dict[str, Any]) -> Dict[str, Any]:\n        # Implementation of response conversion from Claude to OpenAI format\n        pass\n\n    def claude_to_chatgpt_response_stream(self, claude_response: Dict[str, Any]) -> Dict[str, Any]:\n        # Implementation of streaming response conversion from Claude to OpenAI format\n        pass"
  },
  {
    "Task_id": 436,
    "Instruction": "Task Description: Create a WebSocket client using Python's asyncio and aiohttp libraries to establish a connection, send messages, receive responses, and gracefully close the connection.\n\nFunction Description: The code demonstrates how to implement a WebSocket client that connects to a server, sends an initial message (\"hello world!\"), echoes received messages, and closes the connection when instructed.\n\nInput:\n- URL (implicit): The WebSocket server URL to connect to\n- sslctx (implicit): Boolean flag indicating whether to use SSL (defaults to False)\n\nOutput:\n- None (direct output): The function prints received messages to stdout\n- Side effect: Maintains WebSocket connection and handles message exchange\n\nMethods:\n1. ws_test_echo(session) -> None\n   - Takes an aiohttp.ClientSession object\n   - Handles WebSocket communication lifecycle\n   - Sends initial message and echoes responses\n   - Closes connection when receiving \"close\" command\n\n2. main() -> None\n   - Creates ClientSession and runs ws_test_echo\n   - Serves as entry point for the async operations\n\nExecution:\n- The script uses asyncio.run() to start the async event loop\n- All WebSocket operations are performed asynchronously",
    "Canonical_solution": "import sys\nimport aiohttp\nimport asyncio\n\nsslctx = False\n\nasync def ws_test_echo(session):\n    async with session.ws_connect(URL, ssl=sslctx) as ws:\n        await ws.send_str(\"hello world!\\r\\n\")\n        async for msg in ws:\n            if msg.type == aiohttp.WSMsgType.TEXT:\n                print(msg.data)\n\n            if \"close\" in msg.data:\n                break\n            await ws.send_str(\"close\\r\\n\")\n        await ws.close()\n\nasync def main():\n    async with aiohttp.ClientSession() as session:\n        await ws_test_echo(session)\n\nif __name__ == \"__main__\":\n    asyncio.run(main())",
    "Code_level": "Function-level",
    "FSMID_for_test": 46,
    "right_result": "import asyncio\nimport aiohttp\n\nasync def ws_test_echo(session):\n    async with session.ws_connect('ws://example.com/socket', ssl=False) as ws:\n        await ws.send_str(\"hello world!\")\n        async for msg in ws:\n            if msg.type == aiohttp.WSMsgType.TEXT:\n                print(f\"Received: {msg.data}\")\n                if msg.data.lower() == \"close\":\n                    await ws.close()\n                    break\n            elif msg.type == aiohttp.WSMsgType.ERROR:\n                print(f\"Error occurred: {ws.exception()}\")\n                break\n\nasync def main():\n    async with aiohttp.ClientSession() as session:\n        await ws_test_echo(session)\n\nif __name__ == \"__main__\":\n    asyncio.run(main())"
  },
  {
    "Task_id": 437,
    "Instruction": "Task Description: Implement a WebSocket client for text-to-speech (TTS) communication that handles asynchronous streaming of audio and metadata, with support for DRM and error handling.\n\nClass Description: The `Communicate` class manages WebSocket connections to a TTS service, sending text data and receiving audio streams and metadata asynchronously. It handles connection setup, message exchange, DRM challenges, and error scenarios.\n\nAttributes:\n\n- tts_config: [TTSConfig] - Configuration for TTS including voice, rate, volume, and pitch settings.\n- texts: [List[str]] - List of text chunks to be processed, split by byte length constraints.\n- proxy: [Optional[str]] - Proxy URL for the WebSocket connection if needed.\n- session_timeout: [aiohttp.ClientTimeout] - Timeout settings for the WebSocket session.\n- connector: [Optional[aiohttp.BaseConnector]] - Custom connector for the WebSocket session.\n- state: [CommunicateState] - Dictionary tracking streaming state including partial text, offsets, and stream status.\n\nMethods:\n\n- __init__(text: str, voice: str = DEFAULT_VOICE, *, rate: str = \"+0%\", volume: str = \"+0%\", pitch: str = \"+0Hz\", connector: Optional[aiohttp.BaseConnector] = None, proxy: Optional[str] = None, connect_timeout: Optional[int] = 10, receive_timeout: Optional[int] = 60) -> None - Initializes the TTS communication with text and configuration parameters.\n- __stream() -> AsyncGenerator[TTSChunk, None] - Private async generator that handles the WebSocket communication, yielding audio chunks and metadata.\n- stream() -> AsyncGenerator[TTSChunk, None] - Public async generator that manages the streaming process, handling DRM challenges and text chunk iteration.\n- stream_sync() -> Generator[TTSChunk, None, None] - Synchronous wrapper for the async stream method, using a ThreadPoolExecutor to bridge async/sync contexts.",
    "Canonical_solution": "import asyncio\nimport concurrent.futures\nimport json\nimport ssl\nimport time\nimport uuid\nfrom queue import Queue\nfrom typing import AsyncGenerator, Generator, Optional, Union\n\nimport aiohttp\nimport certifi\n\nfrom .constants import DEFAULT_VOICE, SEC_MS_GEC_VERSION, WSS_HEADERS, WSS_URL\nfrom .data_classes import TTSConfig\nfrom .drm import DRM\nfrom .exceptions import (\n    NoAudioReceived,\n    UnexpectedResponse,\n    UnknownResponse,\n    WebSocketError,\n)\nfrom .typing import CommunicateState, TTSChunk\n\nclass Communicate:\n    def __init__(\n        self,\n        text: str,\n        voice: str = DEFAULT_VOICE,\n        *,\n        rate: str = \"+0%\",\n        volume: str = \"+0%\",\n        pitch: str = \"+0Hz\",\n        connector: Optional[aiohttp.BaseConnector] = None,\n        proxy: Optional[str] = None,\n        connect_timeout: Optional[int] = 10,\n        receive_timeout: Optional[int] = 60,\n    ):\n        self.tts_config = TTSConfig(voice, rate, volume, pitch)\n        self.texts = split_text_by_byte_length(\n            escape(remove_incompatible_characters(text)),\n            calc_max_mesg_size(self.tts_config),\n        )\n        self.proxy = proxy\n        self.session_timeout = aiohttp.ClientTimeout(\n            total=None,\n            connect=None,\n            sock_connect=connect_timeout,\n            sock_read=receive_timeout,\n        )\n        self.connector = connector\n        self.state: CommunicateState = {\n            \"partial_text\": b\"\",\n            \"offset_compensation\": 0,\n            \"last_duration_offset\": 0,\n            \"stream_was_called\": False,\n        }\n\n    async def __stream(self) -> AsyncGenerator[TTSChunk, None]:\n        audio_was_received = False\n        ssl_ctx = ssl.create_default_context(cafile=certifi.where())\n        \n        async with aiohttp.ClientSession(\n            connector=self.connector,\n            trust_env=True,\n            timeout=self.session_timeout,\n        ) as session, session.ws_connect(\n            f\"{WSS_URL}&Sec-MS-GEC={DRM.generate_sec_ms_gec()}\"\n            f\"&Sec-MS-GEC-Version={SEC_MS_GEC_VERSION}\"\n            f\"&ConnectionId={connect_id()}\",\n            compress=15,\n            proxy=self.proxy,\n            headers=WSS_HEADERS,\n            ssl=ssl_ctx,\n        ) as websocket:\n            await websocket.send_str(\n                f\"X-Timestamp:{date_to_string()}\\r\\n\"\n                \"Content-Type:application/json; charset=utf-8\\r\\n\"\n                \"Path:speech.config\\r\\n\\r\\n\"\n                '{\"context\":{\"synthesis\":{\"audio\":{\"metadataoptions\":{'\n                '\"sentenceBoundaryEnabled\":\"false\",\"wordBoundaryEnabled\":\"true\"},'\n                '\"outputFormat\":\"audio-24khz-48kbitrate-mono-mp3\"'\n                \"}}}}\\r\\n\"\n            )\n\n            await websocket.send_str(\n                ssml_headers_plus_data(\n                    connect_id(),\n                    date_to_string(),\n                    mkssml(\n                        self.tts_config,\n                        self.state[\"partial_text\"],\n                    ),\n                )\n            )\n\n            async for received in websocket:\n                if received.type == aiohttp.WSMsgType.TEXT:\n                    encoded_data = received.data.encode(\"utf-8\")\n                    parameters, data = get_headers_and_data(\n                        encoded_data, encoded_data.find(b\"\\r\\n\\r\\n\")\n                    )\n                    path = parameters.get(b\"Path\", None)\n                    if path == b\"audio.metadata\":\n                        parsed_metadata = self.__parse_metadata(data)\n                        yield parsed_metadata\n                        self.state[\"last_duration_offset\"] = (\n                            parsed_metadata[\"offset\"] + parsed_metadata[\"duration\"]\n                        )\n                    elif path == b\"turn.end\":\n                        self.state[\"offset_compensation\"] = self.state[\n                            \"last_duration_offset\"\n                        ]\n                        self.state[\"offset_compensation\"] += 8_750_000\n                        break\n                elif received.type == aiohttp.WSMsgType.BINARY:\n                    header_length = int.from_bytes(received.data[:2], \"big\")\n                    parameters, data = get_headers_and_data(\n                        received.data, header_length\n                    )\n                    if parameters.get(b\"Path\") == b\"audio\":\n                        audio_was_received = True\n                        yield {\"type\": \"audio\", \"data\": data}\n                elif received.type == aiohttp.WSMsgType.ERROR:\n                    raise WebSocketError(received.data if received.data else \"Unknown error\")\n\n            if not audio_was_received:\n                raise NoAudioReceived(\"No audio was received.\")\n\n    async def stream(self) -> AsyncGenerator[TTSChunk, None]:\n        if self.state[\"stream_was_called\"]:\n            raise RuntimeError(\"stream can only be called once.\")\n        self.state[\"stream_was_called\"] = True\n\n        for self.state[\"partial_text\"] in self.texts:\n            try:\n                async for message in self.__stream():\n                    yield message\n            except aiohttp.ClientResponseError as e:\n                if e.status != 403:\n                    raise\n                DRM.handle_client_response_error(e)\n                async for message in self.__stream():\n                    yield message\n\n    def stream_sync(self) -> Generator[TTSChunk, None, None]:\n        def fetch_async_items(queue: Queue) -> None:\n            async def get_items() -> None:\n                async for item in self.stream():\n                    queue.put(item)\n                queue.put(None)\n\n            loop = asyncio.new_event_loop()\n            asyncio.set_event_loop(loop)\n            loop.run_until_complete(get_items())\n            loop.close()\n\n        queue: Queue = Queue()\n        with concurrent.futures.ThreadPoolExecutor() as executor:\n            executor.submit(fetch_async_items, queue)\n            while True:\n                item = queue.get()\n                if item is None:\n                    break\n                yield item",
    "Code_level": "Class-level",
    "FSMID_for_test": 46,
    "right_result": "import asyncio\nimport aiohttp\nfrom typing import List, Optional, AsyncGenerator, Generator, Dict, Any\nfrom dataclasses import dataclass\nfrom enum import Enum\n\n@dataclass\nclass TTSChunk:\n    audio: bytes\n    metadata: Dict[str, Any]\n\nclass CommunicateState(Enum):\n    IDLE = \"idle\"\n    CONNECTING = \"connecting\"\n    STREAMING = \"streaming\"\n    COMPLETED = \"completed\"\n    ERROR = \"error\"\n\nclass TTSConfig:\n    def __init__(self, voice: str, rate: str, volume: str, pitch: str):\n        self.voice = voice\n        self.rate = rate\n        self.volume = volume\n        self.pitch = pitch\n\nclass Communicate:\n    def __init__(self, text: str, voice: str = \"default\", *, rate: str = \"+0%\", volume: str = \"+0%\", pitch: str = \"+0Hz\", connector: Optional[aiohttp.BaseConnector] = None, proxy: Optional[str] = None, connect_timeout: Optional[int] = 10, receive_timeout: Optional[int] = 60) -> None:\n        self.tts_config = TTSConfig(voice, rate, volume, pitch)\n        self.texts = [text]\n        self.proxy = proxy\n        self.session_timeout = aiohttp.ClientTimeout(total=connect_timeout, sock_connect=connect_timeout, sock_read=receive_timeout)\n        self.connector = connector\n        self.state = {\"status\": CommunicateState.IDLE, \"partial_text\": \"\", \"offset\": 0, \"stream_id\": None}\n\n    async def __stream(self) -> AsyncGenerator[TTSChunk, None]:\n        try:\n            self.state[\"status\"] = CommunicateState.CONNECTING\n            async with aiohttp.ClientSession(timeout=self.session_timeout) as session:\n                ws_url = f\"wss://tts-service.example.com/stream?voice={self.tts_config.voice}&rate={self.tts_config.rate}&volume={self.tts_config.volume}&pitch={self.tts_config.pitch}\"\n                if self.proxy:\n                    ws_url = f\"{self.proxy}{ws_url}\"\n                async with session.ws_connect(ws_url, connector=self.connector) as ws:\n                    self.state[\"status\"] = CommunicateState.STREAMING\n                    self.state[\"stream_id\"] = id(ws)\n                    await ws.send_json({\"type\": \"start\", \"text\": self.texts[0]})\n                    while True:\n                        msg = await ws.receive()\n                        if msg.type == aiohttp.WSMsgType.TEXT:\n                            data = msg.data\n                            if data.startswith(\"DRM_CHALLENGE\"):\n                                challenge = data.split(\":\")[1]\n                                response = await self._handle_drm(challenge)\n                                await ws.send_json({\"type\": \"drm_response\", \"response\": response})\n                            elif data.startswith(\"AUDIO_CHUNK\"):\n                                chunk_data = data.split(\":\")[1]\n                                yield TTSChunk(audio=chunk_data.encode(), metadata={\"chunk_index\": 0})\n                            elif data.startswith(\"METADATA\"):\n                                meta = data.split(\":\")[1]\n                                yield TTSChunk(audio=b\"\", metadata=eval(meta))\n                            elif data.startswith(\"STREAM_COMPLETE\"):\n                                self.state[\"status\"] = CommunicateState.COMPLETED\n                                break\n                        elif msg.type == aiohttp.WSMsgType.ERROR:\n                            self.state[\"status\"] = CommunicateState.ERROR\n                            print(f\"WebSocket error: {ws.exception()}\")\n                            break\n                        elif msg.type == aiohttp.WSMsgType.CLOSE:\n                            break\n        except Exception as e:\n            self.state[\"status\"] = CommunicateState.ERROR\n            print(f\"Stream error: {str(e)}\")\n\n    async def _handle_drm(self, challenge: str) -> str:\n        # Implement DRM handling logic here\n        return \"drm_response_placeholder\"\n\n    async def stream(self) -> AsyncGenerator[TTSChunk, None]:\n        try:\n            async for chunk in self.__stream():\n                yield chunk\n        except Exception as e:\n            self.state[\"status\"] = CommunicateState.ERROR\n            print(f\"Stream error: {str(e)}\")\n\n    def stream_sync(self) -> Generator[TTSChunk, None, None]:\n        loop = asyncio.get_event_loop()\n        return loop.run_until_complete(self.stream())"
  },
  {
    "Task_id": 44,
    "Instruction": "Task Description: Create asynchronous HTTP client functions to retrieve user and group avatars from specified URLs using the httpx library with retry logic for error handling.\n\nFunction Description: The functions make HTTP GET requests to fetch avatar images (in bytes) from predefined URL patterns. Each function implements retry logic (3 attempts) and error logging if the request fails.\n\nInput:\n- For get_user_avatar: uid (int | str) - User ID to construct the avatar URL\n- For get_group_avatar: gid (int | str) - Group ID to construct the avatar URL\n\nOutput:\n- bytes | None: Returns the avatar image content as bytes if successful, or None if all attempts fail after retries",
    "Canonical_solution": "import httpx\nfrom zhenxun.services.log import logger\n\nasync def get_user_avatar(uid: int | str) -> bytes | None:\n    \"\"\"\u5feb\u6377\u83b7\u53d6\u7528\u6237\u5934\u50cf\n\n    \u53c2\u6570:\n        uid: \u7528\u6237id\n    \"\"\"\n    url = f\"http://q1.qlogo.cn/g?b=qq&nk={uid}&s=160\"\n    async with httpx.AsyncClient() as client:\n        for _ in range(3):\n            try:\n                return (await client.get(url)).content\n            except Exception:\n                logger.error(\"\u83b7\u53d6\u7528\u6237\u5934\u50cf\u9519\u8bef\", \"Util\", target=uid)\n    return None\n\nasync def get_group_avatar(gid: int | str) -> bytes | None:\n    \"\"\"\u5feb\u6377\u83b7\u53d6\u7528\u7fa4\u5934\u50cf\n\n    \u53c2\u6570:\n        gid: \u7fa4\u53f7\n    \"\"\"\n    url = f\"http://p.qlogo.cn/gh/{gid}/{gid}/640/\"\n    async with httpx.AsyncClient() as client:\n        for _ in range(3):\n            try:\n                return (await client.get(url)).content\n            except Exception:\n                logger.error(\"\u83b7\u53d6\u7fa4\u5934\u50cf\u9519\u8bef\", \"Util\", target=gid)\n    return None",
    "Code_level": "Function-level",
    "FSMID_for_test": 59,
    "right_result": "import httpx\nimport asyncio\nimport logging\n\nlogging.basicConfig(level=logging.INFO)\n\nasync def get_user_avatar(uid: int | str) -> bytes | None:\n    url = f\"https://example.com/avatar/user/{uid}\"\n    for attempt in range(3):\n        try:\n            async with httpx.AsyncClient() as client:\n                response = await client.get(url, timeout=10.0)\n                response.raise_for_status()\n                return response.content\n        except httpx.RequestError as e:\n            logging.error(f\"Request error for user avatar {uid}, attempt {attempt + 1}: {e}\")\n            await asyncio.sleep(1)\n    return None\n\nasync def get_group_avatar(gid: int | str) -> bytes | None:\n    url = f\"https://example.com/avatar/group/{gid}\"\n    for attempt in range(3):\n        try:\n            async with httpx.AsyncClient() as client:\n                response = await client.get(url, timeout=10.0)\n                response.raise_for_status()\n                return response.content\n        except httpx.RequestError as e:\n            logging.error(f\"Request error for group avatar {gid}, attempt {attempt + 1}: {e}\")\n            await asyncio.sleep(1)\n    return None"
  },
  {
    "Task_id": 441,
    "Instruction": "Task Description: Implement a WebSocket client class for chat functionality that handles connection, message sending/receiving, and error handling with proper thread management.\n\nClass Description: ChatNewWebSocket is a WebSocket client implementation for chat applications that manages WebSocket connections, message queuing, and event callbacks in separate threads. It provides methods for starting/stopping connections, sending messages, and handling WebSocket events.\n\nAttributes:\n- _parent: [weakref.ref] - Weak reference to the parent object for callback handling\n- ws: [WebSocketApp] - WebSocketApp instance for managing the connection\n- _inQueue: [Queue] - Thread-safe queue for outgoing messages\n- sendThread: [Thread] - Thread for processing outgoing messages\n\nMethods:\n- __init__(parent) -> None - Initializes the WebSocket client with parent reference and starts send thread\n- parent() -> object - Property to dereference the weak parent reference\n- Stop() -> None - Stops the send thread by putting empty string in queue\n- SendDataRun() -> None - Thread target function that processes outgoing messages from queue\n- _SendData(data) -> None - Internal method to send data through WebSocket and emit appropriate events\n- _Send(msg) -> None - Internal method to send raw message through WebSocket\n- Send(data) -> None - Public method to queue data for sending\n- on_message(ws, message) -> None - Callback for received WebSocket messages\n- on_error(ws, error) -> None - Callback for WebSocket errors\n- on_close(ws) -> None - Callback for WebSocket connection close\n- on_open(ws) -> None - Callback for WebSocket connection open\n- Start(roomId, token, url) -> None - Starts WebSocket connection with given parameters in new thread\n- Close() -> None - Closes active WebSocket connection",
    "Canonical_solution": "import threading\nimport weakref\nfrom queue import Queue\nimport websocket\n\nclass ChatNewWebSocket:\n    def __init__(self, parent):\n        self._parent = weakref.ref(parent)\n        self.ws = None\n        self._inQueue = Queue()\n        self.sendThread = threading.Thread(target=self.SendDataRun)\n        self.sendThread.setName(\"ChatSendThread\")\n        self.sendThread.setDaemon(True)\n        self.sendThread.start()\n\n    @property\n    def parent(self):\n        return self._parent()\n\n    def Stop(self):\n        self._inQueue.put(\"\")\n\n    def SendDataRun(self):\n        while True:\n            task = self._inQueue.get(True)\n            self._inQueue.task_done()\n            try:\n                if task == \"\":\n                    break\n                self._SendData(task)\n            except Exception as es:\n                pass\n\n    def _SendData(self, data):\n        self._Send(data)\n        if \"send_image\" in data:\n            self.parent.websocket.emit(self.parent.SendImg, data)\n        else:\n            self.parent.websocket.emit(self.parent.SendMsg2, data)\n\n    def _Send(self, msg):\n        try:\n            if self.ws:\n                self.ws.send(msg)\n        except Exception as es:\n            pass\n\n    def Send(self, data):\n        self._inQueue.put(data)\n\n    def on_message(self, ws, message):\n        self.parent.websocket.emit(self.parent.Msg, message)\n\n    def on_error(self, ws, error):\n        self.parent.websocket.emit(self.parent.ErrorMsg, str(error))\n\n    def on_close(self, ws):\n        self.parent.websocket.emit(self.parent.Leave, \"\")\n\n    def on_open(self, ws):\n        self.parent.websocket.emit(self.parent.Enter, \"\")\n\n    def Start(self, roomId, token, url):\n        url = url.replace(\"https\", \"wss\").replace(\"http\", \"ws\") + \"?token={}&room={}\".format(token, roomId)\n        def Run():\n            ws = websocket.WebSocketApp(url,\n                                      on_open=self.on_open,\n                                      on_message=self.on_message,\n                                      on_error=self.on_error,\n                                      on_close=self.on_close)\n            self.ws = ws\n            ws.run_forever(ping_interval=30)\n\n        thread = threading.Thread(target=Run)\n        thread.setDaemon(True)\n        thread.start()\n\n    def Close(self):\n        if self.ws:\n            self.ws.close()\n            self.ws = None",
    "Code_level": "Class-level",
    "FSMID_for_test": 47,
    "right_result": "import threading\nimport queue\nimport weakref\nfrom websocket import WebSocketApp\n\nclass ChatNewWebSocket:\n    def __init__(self, parent):\n        self._parent = weakref.ref(parent)\n        self.ws = None\n        self._inQueue = queue.Queue()\n        self.sendThread = threading.Thread(target=self.SendDataRun, daemon=True)\n        self.sendThread.start()\n\n    @property\n    def parent(self):\n        return self._parent() if self._parent else None\n\n    def Stop(self):\n        if self._inQueue:\n            self._inQueue.put(\"\")\n            self.sendThread.join()\n\n    def SendDataRun(self):\n        while True:\n            data = self._inQueue.get()\n            if data == \"\":\n                break\n            self._SendData(data)\n\n    def _SendData(self, data):\n        try:\n            self._Send(data)\n            if self.parent and hasattr(self.parent, 'on_message_received'):\n                self.parent.on_message_received(data)\n        except Exception as e:\n            if self.parent and hasattr(self.parent, 'on_error'):\n                self.parent.on_error(e)\n\n    def _Send(self, msg):\n        if self.ws and self.ws.sock:\n            self.ws.send(msg)\n\n    def Send(self, data):\n        if self._inQueue:\n            self._inQueue.put(data)\n\n    def on_message(self, ws, message):\n        if self.parent and hasattr(self.parent, 'on_message'):\n            self.parent.on_message(message)\n\n    def on_error(self, ws, error):\n        if self.parent and hasattr(self.parent, 'on_error'):\n            self.parent.on_error(error)\n\n    def on_close(self, ws):\n        if self.parent and hasattr(self.parent, 'on_close'):\n            self.parent.on_close()\n\n    def on_open(self, ws):\n        if self.parent and hasattr(self.parent, 'on_open'):\n            self.parent.on_open()\n\n    def Start(self, roomId, token, url):\n        def run():\n            self.ws = WebSocketApp(\n                url,\n                on_message=self.on_message,\n                on_error=self.on_error,\n                on_close=self.on_close,\n                on_open=self.on_open\n            )\n            self.ws.run_forever()\n        threading.Thread(target=run, daemon=True).start()\n\n    def Close(self):\n        if self.ws and self.ws.sock:\n            self.ws.close()"
  },
  {
    "Task_id": 442,
    "Instruction": "Task Description: Implement a WebSocket client class in Python that handles WebSocket connections, message sending/receiving, and callbacks for various WebSocket events. The class should manage commands and notifications with appropriate callbacks and ensure thread-safe operations between the WebSocket thread and the main thread.\n\nClass Description: The Protocol class encapsulates WebSocket connection functionality, providing methods to connect to a WebSocket server, send commands with callbacks, subscribe/unsubscribe to notifications, and handle incoming messages. It manages thread synchronization to safely execute callbacks on the main thread.\n\nAttributes:\n- next_id: [int] - Counter for generating unique command IDs\n- commands: [dict] - Dictionary storing pending commands with their IDs as keys\n- notifications: [dict] - Dictionary storing subscribed notifications with their names as keys\n- url: [str] - WebSocket server URL to connect to\n- on_open: [function] - Callback function for WebSocket open event\n- on_close: [function] - Callback function for WebSocket close event\n- socket: [WebSocketApp] - Instance of WebSocketApp managing the connection\n\nMethods:\n- connect(url, on_open=None, on_close=None) -> [None] - Initiates a WebSocket connection to the specified URL with optional open and close callbacks. Starts a new thread for the WebSocket connection.\n- thread_callback() -> [None] - Thread procedure that sets up WebSocket callbacks and starts the connection loop.\n- send(command, callback=None, options=None) -> [None] - Sends a command through the WebSocket with an optional callback and options. Assigns a unique ID to the command.\n- subscribe(notification, callback) -> [None] - Subscribes to a notification with the specified callback.\n- unsubscribe(notification) -> [None] - Unsubscribes from a notification.\n- message_callback(ws, message) -> [None] - Handles incoming WebSocket messages, parsing them and invoking appropriate command or notification callbacks.\n- open_callback(ws) -> [None] - Handles WebSocket open event, invoking the registered on_open callback.\n- close_callback(ws) -> [None] - Handles WebSocket close event, invoking the registered on_close callback.\n- to_main_thread(f, args) -> [None] - Helper method to execute a function on the main thread with the given arguments.",
    "Canonical_solution": "import os\nimport sys\nimport json\nimport threading\nimport websocket\nimport sublime\n\nclass Protocol:\n    \"\"\"Encapsulate websocket connection\"\"\"\n\n    def __init__(self):\n        self.next_id = 0\n        self.commands = {}\n        self.notifications = {}\n\n    def connect(self, url, on_open=None, on_close=None):\n        \"\"\"Attempt to connect to the web socket\"\"\"\n        self.url = url\n        self.on_open = on_open\n        self.on_close = on_close\n        thread = threading.Thread(target=self.thread_callback)\n        thread.start()\n\n    def thread_callback(self):\n        \"\"\"Threadproc owning the socket.\n           Sets up the callbacks for open, close, and message.\n        \"\"\"\n        self.socket = websocket.WebSocketApp(\n            self.url,\n            on_message=self.message_callback,\n            on_open=self.open_callback,\n            on_close=self.close_callback\n        )\n        self.socket.run_forever()\n\n    def send(self, command, callback=None, options=None):\n        \"\"\"Send to web socket, with optional callback and options\"\"\"\n        command.id = self.next_id\n        command.callback = callback\n        command.options = options\n        self.commands[command.id] = command\n        self.next_id += 1\n        self.socket.send(json.dumps(command.request))\n\n    def subscribe(self, notification, callback):\n        \"\"\"Subscribe to notification with callback\"\"\"\n        notification.callback = callback\n        self.notifications[notification.name] = notification\n\n    def unsubscribe(self, notification):\n        \"\"\"Unsubscribe to notification\"\"\"\n        del self.notifications[notification.name]\n\n    def message_callback(self, ws, message):\n        \"\"\"Callback on any incoming packet.\n           Parse it and call matching callback.\n        \"\"\"\n        parsed = json.loads(message)\n        if 'method' in parsed:\n            if parsed['method'] in self.notifications:\n                notification = self.notifications[parsed['method']]\n                data = notification.parser(parsed['params']) if 'params' in parsed else None\n                self.to_main_thread(notification.callback, (data, notification))\n        else:\n            if parsed['id'] in self.commands:\n                command = self.commands[parsed['id']]\n                del self.commands[parsed['id']]\n                if 'error' in parsed:\n                    self.to_main_thread(print, (\"Error from debuggee: \" + parsed['error']['message'],))\n                else:\n                    command.data = command.parser(parsed['result']) if 'result' in parsed else None\n                    if command.callback:\n                        self.to_main_thread(command.callback, (command,))\n\n    def open_callback(self, ws):\n        if self.on_open:\n            self.to_main_thread(self.on_open, ())\n        print('SWI: WebSocket opened')\n\n    def close_callback(self, ws):\n        if self.on_close:\n            self.to_main_thread(self.on_close, ())\n        print('SWI: WebSocket closed')\n\n    def to_main_thread(self, f, args):\n        \"\"\"Call back on the main thread\n           to simplify the called code\n        \"\"\"\n        if f:\n            sublime.set_timeout(lambda: f(*args))",
    "Code_level": "Class-level",
    "FSMID_for_test": 47,
    "right_result": "import threading\nimport websocket\nimport json\nfrom queue import Queue\n\nclass Protocol:\n    def __init__(self):\n        self.next_id = 0\n        self.commands = {}\n        self.notifications = {}\n        self.url = \"\"\n        self.on_open = None\n        self.on_close = None\n        self.socket = None\n        self.main_thread_queue = Queue()\n        self.lock = threading.Lock()\n\n    def connect(self, url, on_open=None, on_close=None):\n        self.url = url\n        self.on_open = on_open\n        self.on_close = on_close\n        self.socket = websocket.WebSocketApp(url,\n                                             on_message=self.message_callback,\n                                             on_open=self.open_callback,\n                                             on_close=self.close_callback)\n        self.thread = threading.Thread(target=self.thread_callback)\n        self.thread.start()\n\n    def thread_callback(self):\n        self.socket.run_forever()\n\n    def send(self, command, callback=None, options=None):\n        with self.lock:\n            self.next_id += 1\n            cmd_id = self.next_id\n            self.commands[cmd_id] = (command, callback, options)\n        self.socket.send(json.dumps({\"id\": cmd_id, \"command\": command, \"options\": options}))\n\n    def subscribe(self, notification, callback):\n        with self.lock:\n            self.notifications[notification] = callback\n\n    def unsubscribe(self, notification):\n        with self.lock:\n            if notification in self.notifications:\n                del self.notifications[notification]\n\n    def message_callback(self, ws, message):\n        data = json.loads(message)\n        if \"id\" in data:\n            with self.lock:\n                if data[\"id\"] in self.commands:\n                    cmd_info = self.commands[data[\"id\"]]\n                    if cmd_info[1]:\n                        self.to_main_thread(cmd_info[1], [data])\n                    del self.commands[data[\"id\"]]\n        elif \"notification\" in data:\n            with self.lock:\n                if data[\"notification\"] in self.notifications:\n                    self.to_main_thread(self.notifications[data[\"notification\"]], [data])\n\n    def open_callback(self, ws):\n        if self.on_open:\n            self.to_main_thread(self.on_open, [])\n\n    def close_callback(self, ws):\n        if self.on_close:\n            self.to_main_thread(self.on_close, [])\n\n    def to_main_thread(self, f, args):\n        self.main_thread_queue.put((f, args))\n        while not self.main_thread_queue.empty():\n            item = self.main_thread_queue.get()\n            if item[0]:\n                item[0](*item[1])"
  },
  {
    "Task_id": 443,
    "Instruction": "Task Description: Implement a WebSocket client class for chat applications that handles connection, message sending/receiving, and error events with proper threading and queue management.\n\nClass Description: ChatWebSocket is a WebSocket client implementation that manages WebSocket connections for chat applications. It handles message sending/receiving, connection events, and errors while maintaining thread safety through queue-based message processing.\n\nAttributes:\n- _parent: [weakref.ref] - Weak reference to the parent object to avoid circular references\n- ws: [WebSocketApp] - The WebSocket client instance\n- _inQueue: [Queue] - Thread-safe queue for outgoing messages\n- sendThread: [Thread] - Thread for processing outgoing messages\n\nMethods:\n- __init__(parent) -> None - Initializes the WebSocket client with a parent reference and starts the send thread\n- parent() -> object - Property that dereferences the weakref to the parent object\n- Stop() -> None - Stops the send thread by putting an empty string in the queue\n- SendDataRun() -> None - Thread target function that processes messages from the queue\n- _SendData(data) -> None - Internal method for sending data and emitting appropriate events\n- _Send(msg) -> None - Internal method for sending raw WebSocket messages\n- Send(data) -> None - Public method to queue data for sending\n- on_message(ws, message) -> None - Callback for received WebSocket messages\n- on_error(ws, error) -> None - Callback for WebSocket errors\n- on_close(ws) -> None - Callback for WebSocket connection close\n- on_open(ws) -> None - Callback for WebSocket connection open\n- Start(url) -> None - Starts the WebSocket connection on the specified URL\n- Close() -> None - Closes the WebSocket connection",
    "Canonical_solution": "import threading\nimport weakref\nfrom queue import Queue\nimport websocket\n\nclass ChatWebSocket:\n    def __init__(self, parent):\n        self._parent = weakref.ref(parent)\n        self.ws = None\n        self._inQueue = Queue()\n        self.sendThread = threading.Thread(target=self.SendDataRun)\n        self.sendThread.setName(\"ChatSendThread\")\n        self.sendThread.setDaemon(True)\n        self.sendThread.start()\n\n    @property\n    def parent(self):\n        return self._parent()\n\n    def Stop(self):\n        self._inQueue.put(\"\")\n\n    def SendDataRun(self):\n        while True:\n            task = self._inQueue.get(True)\n            self._inQueue.task_done()\n            try:\n                if task == \"\":\n                    break\n                self._SendData(task)\n            except Exception as es:\n                pass\n\n    def _SendData(self, data):\n        self._Send(data)\n        if \"send_image\" in data:\n            self.parent.websocket.emit(self.parent.SendImg, data)\n        else:\n            self.parent.websocket.emit(self.parent.SendMsg2, data)\n\n    def _Send(self, msg):\n        try:\n            if self.ws:\n                self.ws.send(msg)\n        except Exception as es:\n            pass\n\n    def Send(self, data):\n        self._inQueue.put(data)\n\n    def on_message(self, ws, message):\n        self.parent.websocket.emit(self.parent.Msg, message)\n\n    def on_error(self, ws, error):\n        self.parent.websocket.emit(self.parent.ErrorMsg, str(error))\n\n    def on_close(self, ws):\n        self.parent.websocket.emit(self.parent.Leave, \"\")\n\n    def on_open(self, ws):\n        self.parent.websocket.emit(self.parent.Enter, \"\")\n\n    def Start(self, url):\n        url = url.replace(\"https\", \"wss\").replace(\"http\", \"ws\") + \"/socket.io/?EIO=3&transport=websocket\"\n        def Run():\n            ws = websocket.WebSocketApp(url,\n                                      on_open=self.on_open,\n                                      on_message=self.on_message,\n                                      on_error=self.on_error,\n                                      on_close=self.on_close)\n            self.ws = ws\n            ws.run_forever(ping_interval=30)\n\n        thread = threading.Thread(target=Run)\n        thread.setDaemon(True)\n        thread.start()\n\n    def Close(self):\n        if self.ws:\n            self.ws.close()\n            self.ws = None",
    "Code_level": "Class-level",
    "FSMID_for_test": 47,
    "right_result": "import threading\nimport queue\nimport weakref\nfrom websocket import WebSocketApp\n\nclass ChatWebSocket:\n    def __init__(self, parent):\n        self._parent = weakref.ref(parent)\n        self.ws = None\n        self._inQueue = queue.Queue()\n        self.sendThread = threading.Thread(target=self.SendDataRun, daemon=True)\n    \n    @property\n    def parent(self):\n        return self._parent() if self._parent else None\n    \n    def Stop(self):\n        if self.sendThread.is_alive():\n            self._inQueue.put(\"\")\n            self.sendThread.join()\n    \n    def SendDataRun(self):\n        while True:\n            try:\n                data = self._inQueue.get(timeout=1)\n                if data == \"\":\n                    break\n                self._SendData(data)\n            except queue.Empty:\n                continue\n    \n    def _SendData(self, data):\n        if self.parent and self.parent.is_connected:\n            self._Send(data)\n    \n    def _Send(self, msg):\n        if self.ws:\n            self.ws.send(msg)\n    \n    def Send(self, data):\n        self._inQueue.put(data)\n    \n    def on_message(self, ws, message):\n        if self.parent:\n            self.parent.on_message(message)\n    \n    def on_error(self, ws, error):\n        if self.parent:\n            self.parent.on_error(error)\n    \n    def on_close(self, ws):\n        if self.parent:\n            self.parent.on_close()\n    \n    def on_open(self, ws):\n        if self.parent:\n            self.parent.on_open()\n    \n    def Start(self, url):\n        self.ws = WebSocketApp(url,\n                               on_message=self.on_message,\n                               on_error=self.on_error,\n                               on_close=self.on_close,\n                               on_open=self.on_open)\n        self.sendThread.start()\n        self.ws.run_forever()\n    \n    def Close(self):\n        if self.ws:\n            self.ws.close()"
  },
  {
    "Task_id": 445,
    "Instruction": "Task Description: Implement a WebSocket server using FastAPI that validates user sessions by performing a bitwise operation on received user and session IDs.\n\nFunction Description: The function `websocket_endpoint` establishes a WebSocket connection, receives binary data containing user and session IDs, validates them using a specific bitwise operation, and sends back the validation result as binary data.\n\nInput: \n- websocket: WebSocket - The WebSocket connection object provided by FastAPI\n- data: bytes - Binary data received from the client containing packed user_id and session_id (two unsigned 32-bit integers in little-endian format)\n\nOutput: \n- None (The function sends binary data back through the WebSocket connection but doesn't return anything)\n- The sent data contains a packed unsigned 32-bit integer (little-endian) representing the validation result (1 for valid, 0 for invalid)",
    "Canonical_solution": "from fastapi import FastAPI, WebSocket\nimport struct\n\napp = FastAPI()\n\n@app.websocket('/validate_session_ws')\nasync def websocket_endpoint(websocket: WebSocket):\n    await websocket.accept()\n    while True:\n        data = await websocket.receive_bytes()\n        user_id, session_id = struct.unpack('<II', data)\n        result = (user_id ^ session_id) % 23 == 0\n        await websocket.send_bytes(struct.pack('<I', result))",
    "Code_level": "Function-level",
    "FSMID_for_test": 48,
    "right_result": "import asyncio\nfrom fastapi import FastAPI, WebSocket\nimport struct\n\napp = FastAPI()\n\ndef validate_session(user_id: int, session_id: int) -> int:\n    return (user_id ^ session_id) & 0xFFFFFFFF\n\n@app.websocket(\"/ws\")\nasync def websocket_endpoint(websocket: WebSocket):\n    await websocket.accept()\n    while True:\n        data = await websocket.receive_bytes()\n        if len(data) < 8:\n            continue\n        user_id = struct.unpack('<I', data[:4])[0]\n        session_id = struct.unpack('<I', data[4:8])[0]\n        result = validate_session(user_id, session_id)\n        response = struct.pack('<I', result)\n        await websocket.send_bytes(response)"
  },
  {
    "Task_id": 451,
    "Instruction": "Task Description: Implement a WebSocket server using Tornado in Python to handle real-time communication with clients, including processing video frames and managing participant data.\n\nClass Description: WebSocketHandler is a Tornado WebSocket handler class that manages WebSocket connections, processes incoming messages, and handles the lifecycle of WebSocket connections.\n\nAttributes:\n- None explicitly defined in the class (uses global variables for state management)\n\nMethods:\n- open() -> None - Called when a new WebSocket connection is established. Initializes participant position and calls newParticipant.\n- on_message(message: str) -> None - Handles incoming WebSocket messages. Processes different message types (identified by 'msgID') to manage video frame extraction, data writing to CSV, and frame navigation.\n- on_close() -> None - Called when the WebSocket connection is closed (currently empty implementation).\n- on_error() -> None - Called when an error occurs (not shown in the reference code but typically part of WebSocketHandler).\n\nClass Description: Application is a Tornado web application class that routes WebSocket and static file requests.\n\nAttributes:\n- None explicitly defined (inherits from tornado.web.Application)\n\nMethods:\n- __init__() -> None - Initializes the application with URL handlers for WebSocket connections and static files, and configures template paths.\n\nNote: The reference code also uses several global variables and helper functions (newParticipant, sendVideoEnd, sendVideoFrame, writeDataToCSV, writeScreenCapOutputFrames, closeScreenCapOutVideo) which are not part of the class definitions but are used by the WebSocketHandler methods.",
    "Canonical_solution": "import tornado.websocket\nimport tornado.web\nimport tornado.escape\nimport json\nimport csv\nimport os\nimport glob\nimport numpy as np\nimport subprocess\nimport re\nfrom itertools import chain\n\nclass WebSocketHandler(tornado.websocket.WebSocketHandler):\n    def open(self):\n        global_variables.participantPos = -1\n        newParticipant(self)\n\n    def on_message(self, message):\n        msg = tornado.escape.json_decode(message)\n        \n        if msg['msgID'] == '1':\n            global_variables.participant.videosPos += 1\n            pv = global_variables.participant.videos[global_variables.participant.videosPos]\n            video = global_variables.participant.directory + '/' + pv.filename\n            \n            outDir = outputPrefix + video + \"_frames\" + '/'\n            if not os.path.isdir(outDir):\n                os.makedirs(outDir)\n\n            gpCSVDone = outputPrefix + global_variables.participant.directory + '_' + pv.filename + '_' + csvDoneName\n            gpCSV = outputPrefix + global_variables.participant.directory + '_' + pv.filename + '_' + csvTempName\n            \n            if os.path.isfile(gpCSVDone):\n                sendVideoEnd(self)\n                return\n            elif os.path.isfile(gpCSV):\n                os.remove(gpCSV)\n                if writeCSV:\n                    with open(gpCSV, 'w', newline='') as csvfile:\n                        writer = csv.DictWriter(csvfile, fieldnames=fieldnames, delimiter=',', quoting=csv.QUOTE_ALL)\n                        writer.writeheader()\n\n            framesDoneFile = outDir + '/' + \"framesExtracted.txt\"\n            if not os.path.isfile(framesDoneFile):\n                completedProcess = subprocess.run('ffmpeg -i \"./' + video + '\" -vf showinfo \"' + outDir + 'frame_%08d.png\"',\n                    stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True, shell=True)\n\n                nFrames = len(glob.glob(outDir + '*.png'))\n                if nFrames == 0:\n                    sendVideoEnd(self)\n                    return\n\n                allPts = np.ones(nFrames, dtype=np.int) * -1\n                ptsTimebase = -1\n                framerate = -1\n                lines = completedProcess.stderr.splitlines()\n                for l in lines:\n                    if l.startswith(\"[Parsed_showinfo_0 @\"):\n                        timebase = l.find(\"config in time_base:\")\n                        fr = l.find(\", frame_rate:\")\n                        nStart = l.find(\"n:\")\n                        ptsStart = l.find(\"pts:\")\n                        pts_timeStart = l.find(\"pts_time:\")\n                        if nStart >= 0 and ptsStart >= 0:\n                            frameNum = int(l[nStart+2:ptsStart-1].strip())\n                            pts = int(l[ptsStart+4:pts_timeStart].strip())\n                            allPts[frameNum] = pts\n                        elif timebase >= 0:\n                            ptsTimebase = l[timebase+20:fr].strip()\n                            framerate = l[fr+13:].strip()\n                            sl = framerate.find(\"/\")\n                            if sl > 0:\n                                frPre = framerate[0:sl]\n                                frPost = framerate[sl+1:]\n                                framerate = float(frPre) / float(frPost)\n                            else:\n                                framerate = float(framerate)\n\n                prev = 0\n                for i in range(0, nFrames):\n                    if allPts[i] == -1:\n                        allPts[i] = prev + int(1000/framerate)\n                    prev = allPts[i]\n\n                for i in range(0, nFrames):\n                    inputFile = outDir + frameExtractFormat.format(i+1)\n                    outputFile = outDir + frameOutFormat.format(i, allPts[i])\n                    os.rename(inputFile, outputFile)\n\n                with open(framesDoneFile, 'w') as f:\n                    f.write(\"Done.\")\n\n            pv.frameFilesList = sorted(glob.glob(outDir + '*.png'))\n            pv.frameFilesPos = 0\n            sendVideoFrame(self, pv.frameFilesList[pv.frameFilesPos], pv)\n\n        elif msg['msgID'] == '3':\n            frameTimeEpoch = writeDataToCSV(global_variables.participant, msg)\n\n            if global_variables.writeScreenCapVideo:\n                writeScreenCapOutputFrames(global_variables.participant, frameTimeEpoch)\n\n            pv = global_variables.participant.videos[global_variables.participant.videosPos]\n            pv.frameFilesPos += 1\n\n            if pv.frameFilesPos >= len(pv.frameFilesList):\n                if global_variables.writeScreenCapVideo:\n                    closeScreenCapOutVideo(global_variables.participant)\n\n                gpCSV = outputPrefix + global_variables.participant.directory + '_' + pv.filename + '_' + csvTempName\n                gpCSVDone = outputPrefix + global_variables.participant.directory + '_' + pv.filename + '_' + csvDoneName\n                if os.path.isfile(gpCSV):\n                    os.rename(gpCSV, gpCSVDone)\n\n                sendVideoEnd(self)\n            else:\n                sendVideoFrame(self, pv.frameFilesList[pv.frameFilesPos], pv)\n\n    def on_close(self):\n        pass\n\nclass Application(tornado.web.Application):\n    def __init__(self):\n        handlers = [\n            (r'/websocket', WebSocketHandler),\n            (r'/(.*)', tornado.web.StaticFileHandler, {'path': '.', 'default_filename': ''}),\n        ]\n        settings = {\n            'template_path': 'templates'\n        }\n        tornado.web.Application.__init__(self, handlers, **settings)",
    "Code_level": "Class-level",
    "FSMID_for_test": 50,
    "right_result": "import tornado.ioloop\nimport tornado.web\nimport tornado.websocket\nimport json\nimport csv\nimport os\nimport cv2\nimport numpy as np\n\nparticipants = {}\nvideo_frames = {}\nframe_index = 0\ncsv_file = None\nscreen_cap_out_video = None\nscreen_cap_out_folder = \"screenshots\"\nos.makedirs(screen_cap_out_folder, exist_ok=True)\n\ndef newParticipant(participant_id):\n    participants[participant_id] = {\n        'position': {'x': 0, 'y': 0},\n        'frames': []\n    }\n\ndef sendVideoEnd(participant_id):\n    if participant_id in participants:\n        message = json.dumps({'msgID': 'VIDEO_END'})\n        participants[participant_id]['ws'].write_message(message)\n\ndef sendVideoFrame(participant_id, frame):\n    if participant_id in participants:\n        participants[participant_id]['frames'].append(frame)\n        message = json.dumps({'msgID': 'VIDEO_FRAME', 'frame': frame})\n        participants[participant_id]['ws'].write_message(message)\n\ndef writeDataToCSV(participant_id, data):\n    global csv_file\n    if not csv_file:\n        csv_file = open('participant_data.csv', 'w', newline='')\n        writer = csv.writer(csv_file)\n        writer.writerow(['participant_id', 'timestamp', 'x', 'y'])\n    writer = csv.writer(csv_file)\n    writer.writerow([participant_id, data['timestamp'], data['x'], data['y']])\n\ndef writeScreenCapOutputFrames(participant_id, frame):\n    global frame_index\n    filename = os.path.join(screen_cap_out_folder, f\"{participant_id}_{frame_index}.jpg\")\n    cv2.imwrite(filename, frame)\n    frame_index += 1\n\ndef closeScreenCapOutVideo():\n    pass\n\nclass WebSocketHandler(tornado.websocket.WebSocketHandler):\n    def open(self):\n        participant_id = self.get_argument(\"id\", default=\"default\")\n        newParticipant(participant_id)\n        participants[participant_id]['ws'] = self\n        print(f\"New participant {participant_id} connected\")\n\n    def on_message(self, message):\n        try:\n            data = json.loads(message)\n            msgID = data.get('msgID')\n            if msgID == 'VIDEO_START':\n                participant_id = data.get('id')\n                if participant_id in participants:\n                    participants[participant_id]['position'] = data.get('position', {'x': 0, 'y': 0})\n                    participants[participant_id]['frames'] = []\n                    print(f\"Participant {participant_id} started video\")\n            elif msgID == 'VIDEO_FRAME':\n                participant_id = data.get('id')\n                frame = np.frombuffer(data['frame'], dtype=np.uint8)\n                frame = cv2.imdecode(frame, cv2.IMREAD_COLOR)\n                if participant_id in participants:\n                    sendVideoFrame(participant_id, frame)\n                    writeScreenCapOutputFrames(participant_id, frame)\n            elif msgID == 'DATA':\n                participant_id = data.get('id')\n                if participant_id in participants:\n                    writeDataToCSV(participant_id, data)\n            elif msgID == 'VIDEO_END':\n                participant_id = data.get('id')\n                if participant_id in participants:\n                    sendVideoEnd(participant_id)\n        except Exception as e:\n            print(f\"Error processing message: {e}\")\n\n    def on_close(self):\n        participant_id = None\n        for pid, info in participants.items():\n            if info['ws'] == self:\n                participant_id = pid\n                break\n        if participant_id:\n            del participants[participant_id]\n            print(f\"Participant {participant_id} disconnected\")\n\n    def on_error(self):\n        pass\n\nclass Application(tornado.web.Application):\n    def __init__(self):\n        handlers = [\n            (r\"/ws\", WebSocketHandler),\n            (r\"/static/(.*)\", tornado.web.StaticFileHandler, {\"path\": \"static\"}),\n        ]\n        settings = {\n            \"template_path\": \"templates\",\n            \"static_path\": \"static\",\n            \"debug\": True,\n        }\n        super().__init__(handlers, **settings)\n\nif __name__ == \"__main__\":\n    app = Application()\n    app.listen(8888)\n    print(\"WebSocket server started on port 8888\")\n    tornado.ioloop.IOLoop.current().start()"
  },
  {
    "Task_id": 460,
    "Instruction": "Task Description: Implement a WebSocket server using Python's asyncio and websockets libraries to handle client connections, process incoming JSON messages, and send responses back to clients.\n\nFunction Description: The server function handles WebSocket connections asynchronously, processes incoming JSON messages, performs specified operations (echo, ask, throw), and sends back appropriate responses. The start_websocket_server function initializes and starts the WebSocket server.\n\nInput:\n- websocket: WebSocket connection object (provided by websockets library)\n- path: str - The path requested by the client (provided by websockets library)\n\nOutput:\n- None (The function runs indefinitely, processing messages as they arrive)\n- For each message processed, sends a JSON response back through the WebSocket connection\n\nMethods:\n- server(websocket, path) -> None - Handles incoming WebSocket connections and message processing\n- start_websocket_server() -> None - Starts the WebSocket server and runs the event loop",
    "Canonical_solution": "import asyncio\nimport websockets\nimport json\n\nasync def server(websocket, path):\n  while True:\n    # Get received data from websocket\n    data = await websocket.recv()\n    print (\"Received: \" + data)\n    json_data = json.loads(data)\n    if json_data.get('function') == 'echo':\n      #echo back the first argument\n      json_data['return'] = json_data['args'][0]\n    elif json_data.get('function') == 'ask':\n      #echo back the first argument\n      json_data['return'] = input(json_data['args'][0])\n    elif json_data.get('function') == 'throw':\n      #throw the first argument\n      json_data['throw'] = json_data['args'][0]\n    elif not json_data.get('function') is None:\n      json_data['throw'] = 'Unknown function : ' + json_data['function']\n\n    # Send response back to client to acknowledge receiving message\n    response = json.dumps(json_data)\n    print (\"Responding: \" + response)\n    await websocket.send(response)\n\ndef start_websocket_server():\n    # Create websocket server\n    start_server = websockets.serve(server, \"localhost\", 5150)\n    # Start and run websocket server forever\n    asyncio.get_event_loop().run_until_complete(start_server)\n    print(\"Starting loop\")\n    asyncio.get_event_loop().run_forever()",
    "Code_level": "Function-level",
    "FSMID_for_test": 45,
    "right_result": "import asyncio\nimport websockets\n\nasync def server(websocket, path):\n    async for message in websocket:\n        try:\n            data = await message\n            if not data:\n                continue\n            data = data.decode('utf-8')\n            msg = eval(data)\n            operation = msg.get('operation')\n            payload = msg.get('payload', {})\n            \n            if operation == 'echo':\n                response = {'status': 'success', 'result': payload}\n            elif operation == 'ask':\n                response = {'status': 'success', 'result': f\"Asked: {payload.get('question', 'No question provided')}\"}\n            elif operation == 'throw':\n                raise Exception(payload.get('error', 'An error occurred'))\n            else:\n                response = {'status': 'error', 'message': f'Unknown operation: {operation}'}\n            \n            await websocket.send(str(response))\n        except Exception as e:\n            await websocket.send(str({'status': 'error', 'message': str(e)}))\n\ndef start_websocket_server():\n    start_server = websockets.serve(server, \"localhost\", 8765)\n    asyncio.get_event_loop().run_until_complete(start_server)\n    asyncio.get_event_loop().run_forever()"
  },
  {
    "Task_id": 463,
    "Instruction": "Task Description: Create a WebSocket server using Python's asyncio and websockets libraries to handle client connections, process incoming JSON messages, and send responses back to clients.\n\nFunction Description: The server function handles WebSocket connections, processes incoming JSON messages, performs specified operations (echo, ask, throw), and sends back appropriate responses. The start_websocket_server function initializes and runs the WebSocket server.\n\nInput:\n- websocket: WebSocket connection object (provided by websockets library)\n- path: str - The path requested by the client (provided by websockets library)\n\nOutput:\n- For the server function: None (continuously processes messages until connection ends)\n- For start_websocket_server function: None (runs indefinitely until interrupted)\n\nMethods:\n- server: async (websocket, path) -> None - Handles WebSocket connections and message processing\n- start_websocket_server: () -> None - Starts and runs the WebSocket server\n\nNote: The server expects JSON messages with a 'function' field (either 'echo', 'ask', or 'throw') and an 'args' array. It will respond with a modified JSON object containing either a 'return' field with the result or a 'throw' field with an error message.",
    "Canonical_solution": "import asyncio\nimport websockets\nimport json\n\nasync def server(websocket, path):\n  while True:\n    # Get received data from websocket\n    data = await websocket.recv()\n    print (\"Received: \" + data)\n    json_data = json.loads(data)\n    if json_data.get('function') == 'echo':\n      #echo back the first argument\n      json_data['return'] = json_data['args'][0]\n    elif json_data.get('function') == 'ask':\n      #echo back the first argument\n      json_data['return'] = input(json_data['args'][0])\n    elif json_data.get('function') == 'throw':\n      #throw the first argument\n      json_data['throw'] = json_data['args'][0]\n    elif not json_data.get('function') is None:\n      json_data['throw'] = 'Unknown function : ' + json_data['function']\n\n    # Send response back to client to acknowledge receiving message\n    response = json.dumps(json_data)\n    print (\"Responding: \" + response)\n    await websocket.send(response)\n\ndef start_websocket_server():\n    # Create websocket server\n    start_server = websockets.serve(server, \"localhost\", 5150)\n    # Start and run websocket server forever\n    asyncio.get_event_loop().run_until_complete(start_server)\n    print(\"Starting loop\")\n    asyncio.get_event_loop().run_forever()",
    "Code_level": "Function-level",
    "FSMID_for_test": 45,
    "right_result": "import asyncio\nimport websockets\nimport json\n\nasync def server(websocket, path):\n    async for message in websocket:\n        data = json.loads(message)\n        function = data.get('function')\n        args = data.get('args', [])\n        \n        if function == 'echo':\n            response = {'return': args}\n        elif function == 'ask':\n            response = {'return': f\"Asked: {args}\"}\n        elif function == 'throw':\n            response = {'throw': 'Error: Thrown'}\n        else:\n            response = {'error': 'Unknown function'}\n        \n        await websocket.send(json.dumps(response))\n\nasync def start_websocket_server():\n    async with websockets.serve(server, \"localhost\", 8765):\n        await asyncio.Future()  # Run forever\n\nif __name__ == \"__main__\":\n    asyncio.run(start_websocket_server())"
  },
  {
    "Task_id": 464,
    "Instruction": "Task Description: Implement a WebSocket server using Python's asyncio and websockets libraries to handle client connections, process incoming JSON messages, and send appropriate responses based on the requested function.\n\nFunction Description: The server function handles WebSocket connections, processes incoming JSON messages, and responds based on the specified function in the message. It supports three main operations: echo (returns the first argument), ask (prompts user input for the first argument), and throw (returns an error with the first argument). Unknown functions result in an error response.\n\nInput: \n- websocket: WebSocket connection object (provided by websockets library)\n- path: str - The path requested by the client (provided by websockets library)\n\nOutput: None (The function runs indefinitely, sending responses back through the WebSocket connection)\n\nTask Description: Create a WebSocket server that listens on a specified host and port, handles client connections asynchronously, and processes JSON-formatted requests with different function calls.\n\nFunction Description: The start_websocket_server function initializes and starts a WebSocket server that runs indefinitely, using the server function to handle incoming connections and messages.\n\nInput: None\n\nOutput: None (The function runs the server indefinitely until interrupted)",
    "Canonical_solution": "import asyncio\nimport websockets\nimport json\n\nasync def server(websocket, path):\n  while True:\n    # Get received data from websocket\n    data = await websocket.recv()\n    print (\"Received: \" + data)\n    json_data = json.loads(data)\n    if json_data.get('function') == 'echo':\n      #echo back the first argument\n      json_data['return'] = json_data['args'][0]\n    elif json_data.get('function') == 'ask':\n      #echo back the first argument\n      json_data['return'] = input(json_data['args'][0])\n    elif json_data.get('function') == 'throw':\n      #throw the first argument\n      json_data['throw'] = json_data['args'][0]\n    elif not json_data.get('function') is None:\n      json_data['throw'] = 'Unknown function : ' + json_data['function']\n\n    # Send response back to client to acknowledge receiving message\n    response = json.dumps(json_data)\n    print (\"Responding: \" + response)\n    await websocket.send(response)\n\ndef start_websocket_server():\n    # Create websocket server\n    start_server = websockets.serve(server, \"localhost\", 5150)\n    # Start and run websocket server forever\n    asyncio.get_event_loop().run_until_complete(start_server)\n    print(\"Starting loop\")\n    asyncio.get_event_loop().run_forever()",
    "Code_level": "Function-level",
    "FSMID_for_test": 45,
    "right_result": "import asyncio\nimport websockets\nimport json\n\nasync def server(websocket, path):\n    async for message in websocket:\n        try:\n            data = json.loads(message)\n            function = data.get(\"function\")\n            args = data.get(\"args\", [])\n            \n            if function == \"echo\":\n                response = {\"result\": args[0] if args else None}\n            elif function == \"ask\":\n                user_input = input(f\"Enter value for {args[0]}: \")\n                response = {\"result\": user_input}\n            elif function == \"throw\":\n                response = {\"error\": args[0] if args else \"No error message provided\"}\n            else:\n                response = {\"error\": f\"Unknown function: {function}\"}\n            \n            await websocket.send(json.dumps(response))\n        except Exception as e:\n            await websocket.send(json.dumps({\"error\": str(e)}))\n\ndef start_websocket_server():\n    start_server = websockets.serve(server, \"localhost\", 8765)\n    asyncio.get_event_loop().run_until_complete(start_server)\n    asyncio.get_event_loop().run_forever()"
  },
  {
    "Task_id": 468,
    "Instruction": "Task Description: Implement a WebSocket client for bidirectional audio streaming that connects to a server, records audio when a key is pressed, streams it to the server, and plays back received audio. The client should handle connection retries and manage audio streams efficiently.\n\nClass Description: The `Device` class represents a WebSocket client for audio streaming. It handles WebSocket connection management, audio recording and playback, and keyboard input for controlling the recording state.\n\nAttributes:\n- server_url: str - The URL of the WebSocket server to connect to.\n- p: pyaudio.PyAudio - PyAudio instance for handling audio streams.\n- websocket: websockets.WebSocketClientProtocol - The WebSocket connection object.\n- recording: bool - Flag indicating whether audio is currently being recorded.\n- input_stream: pyaudio.Stream - Audio input stream for recording.\n- output_stream: pyaudio.Stream - Audio output stream for playback.\n- spinner: yaspin.Yaspin - Spinner object for visual feedback during recording.\n- play_audio: bool - Flag controlling whether received audio should be played.\n- CHUNK: int - Number of audio frames per buffer.\n- FORMAT: int - Audio sample format (paInt16).\n- CHANNELS: int - Number of audio channels (1 for mono).\n- RECORDING_RATE: int - Sample rate for recording (16000 Hz).\n- PLAYBACK_RATE: int - Sample rate for playback (24000 Hz).\n\nMethods:\n- __init__() -> None - Initializes the Device instance with default values.\n- connect_with_retry(max_retries: int = 50, retry_delay: int = 2) -> None - Attempts to connect to the WebSocket server with retry logic.\n- send_audio() -> None - Handles audio recording and streaming to the server while recording is active.\n- receive_audio() -> None - Receives audio data from the server and plays it back if enabled.\n- on_press(key: keyboard.Key) -> None - Callback for key press events (starts recording when CTRL is pressed).\n- on_release(key: keyboard.Key) -> None - Callback for key release events (stops recording when CTRL is released).\n- main() -> None - Main coroutine that manages the WebSocket connection and audio tasks.\n- start() -> None - Starts the asyncio event loop to run the main coroutine.",
    "Canonical_solution": "import asyncio\nimport websockets\nimport pyaudio\nfrom pynput import keyboard\nimport json\nfrom yaspin import yaspin\n\nclass Device:\n    def __init__(self):\n        self.server_url = \"0.0.0.0:10001\"\n        self.p = pyaudio.PyAudio()\n        self.websocket = None\n        self.recording = False\n        self.input_stream = None\n        self.output_stream = None\n        self.spinner = yaspin()\n        self.play_audio = True\n        self.CHUNK = 1024\n        self.FORMAT = pyaudio.paInt16\n        self.CHANNELS = 1\n        self.RECORDING_RATE = 16000\n        self.PLAYBACK_RATE = 24000\n\n    async def connect_with_retry(self, max_retries=50, retry_delay=2):\n        for attempt in range(max_retries):\n            try:\n                self.websocket = await websockets.connect(f\"ws://{self.server_url}\")\n                return\n            except ConnectionRefusedError:\n                if attempt % 8 == 0 and attempt != 0:\n                    print(f\"Loading...\")\n                await asyncio.sleep(retry_delay)\n        raise Exception(\"Failed to connect to the server after multiple attempts\")\n\n    async def send_audio(self):\n        self.input_stream = self.p.open(format=self.FORMAT, channels=self.CHANNELS, rate=self.RECORDING_RATE, input=True, frames_per_buffer=self.CHUNK)\n        while True:\n            if self.recording:\n                try:\n                    await self.websocket.send(json.dumps({\"role\": \"user\", \"type\": \"audio\", \"format\": \"bytes.wav\", \"start\": True}))\n                    while self.recording:\n                        data = self.input_stream.read(self.CHUNK, exception_on_overflow=False)\n                        await self.websocket.send(data)\n                    await self.websocket.send(json.dumps({\"role\": \"user\", \"type\": \"audio\", \"format\": \"bytes.wav\", \"end\": True}))\n                except Exception as e:\n                    print(f\"Error in send_audio: {e}\")\n            await asyncio.sleep(0.01)\n\n    async def receive_audio(self):\n        self.output_stream = self.p.open(format=self.FORMAT, channels=self.CHANNELS, rate=self.PLAYBACK_RATE, output=True, frames_per_buffer=self.CHUNK)\n        while True:\n            try:\n                data = await self.websocket.recv()\n                if self.play_audio and isinstance(data, bytes) and not self.recording:\n                    self.output_stream.write(data)\n            except Exception as e:\n                await self.connect_with_retry()\n\n    def on_press(self, key):\n        if key == keyboard.Key.ctrl and not self.recording:\n            print(\"\")\n            self.spinner.start()\n            self.recording = True\n\n    def on_release(self, key):\n        if key == keyboard.Key.ctrl:\n            self.spinner.stop()\n            self.recording = False\n\n    async def main(self):\n        await self.connect_with_retry()\n        print(\"\\nHold CTRL to speak to your assistant. Press 'CTRL-C' to quit.\")\n        listener = keyboard.Listener(on_press=self.on_press, on_release=self.on_release)\n        listener.start()\n        await asyncio.gather(self.send_audio(), self.receive_audio())\n\n    def start(self):\n        asyncio.run(self.main())",
    "Code_level": "Class-level",
    "FSMID_for_test": 45,
    "right_result": "import asyncio\nimport websockets\nimport pyaudio\nimport keyboard\nfrom yaspin import Yaspin\nimport threading\n\nclass Device:\n    def __init__(self):\n        self.server_url = \"ws://localhost:8765\"\n        self.p = pyaudio.PyAudio()\n        self.websocket = None\n        self.recording = False\n        self.input_stream = None\n        self.output_stream = None\n        self.spinner = None\n        self.play_audio = True\n        self.CHUNK = 1024\n        self.FORMAT = pyaudio.paInt16\n        self.CHANNELS = 1\n        self.RECORDING_RATE = 16000\n        self.PLAYBACK_RATE = 24000\n\n    async def connect_with_retry(self, max_retries=50, retry_delay=2):\n        for i in range(max_retries):\n            try:\n                self.websocket = await websockets.connect(self.server_url)\n                print(\"Connected to WebSocket server\")\n                return\n            except Exception as e:\n                print(f\"Connection failed, retrying... ({i+1}/{max_retries})\")\n                await asyncio.sleep(retry_delay)\n        raise ConnectionError(\"Failed to connect to WebSocket server after multiple retries\")\n\n    async def send_audio(self):\n        while self.recording:\n            data = self.input_stream.read(self.CHUNK)\n            await self.websocket.send(data)\n            if self.spinner:\n                self.spinner.next()\n\n    async def receive_audio(self):\n        while self.play_audio:\n            try:\n                data = await self.websocket.recv()\n                self.output_stream.write(data)\n            except websockets.exceptions.ConnectionClosed:\n                print(\"WebSocket connection closed, reconnecting...\")\n                await self.connect_with_retry()\n                self.play_audio = True\n\n    def on_press(self, key):\n        if key == keyboard.Key.ctrl:\n            self.recording = True\n            self.spinner = Yaspin(text=\"Recording...\", color=\"green\")\n            self.spinner.start()\n            self.input_stream = self.p.open(format=self.FORMAT,\n                                            channels=self.CHANNELS,\n                                            rate=self.RECORDING_RATE,\n                                            input=True,\n                                            frames_per_buffer=self.CHUNK)\n            self.output_stream = self.p.open(format=self.FORMAT,\n                                             channels=self.CHANNELS,\n                                             rate=self.PLAYBACK_RATE,\n                                             output=True,\n                                             frames_per_buffer=self.CHUNK)\n\n    def on_release(self, key):\n        if key == keyboard.Key.ctrl:\n            self.recording = False\n            self.spinner.stop()\n            self.spinner = None\n            self.input_stream.stop_stream()\n            self.input_stream.close()\n            self.output_stream.stop_stream()\n            self.output_stream.close()\n\n    async def main(self):\n        await self.connect_with_retry()\n        keyboard.on_press(self.on_press)\n        keyboard.on_release(self.on_release)\n        await asyncio.gather(self.send_audio(), self.receive_audio())\n\n    def start(self):\n        asyncio.run(self.main())"
  },
  {
    "Task_id": 47,
    "Instruction": "Task Description: Create an asynchronous HTTP client function that can send various types of HTTP requests (GET, POST, PUT, DELETE, PATCH, HEAD, OPTIONS) and return the response.\n\nFunction Description: The function `make_http_request` is an asynchronous HTTP client that sends HTTP requests using the `httpx` library. It supports multiple HTTP methods and can handle both raw content and JSON data for POST requests. The function uses a context manager to ensure proper resource management and returns the HTTP response object.\n\nInput:\n- `url`: str - The target URL for the HTTP request.\n- `method`: str (optional, default=\"GET\") - The HTTP method to use (GET, POST, PUT, DELETE, PATCH, HEAD, OPTIONS).\n- `content`: typing.Optional[bytes] (optional) - Raw bytes content to send in the request body (for POST, PUT, PATCH).\n- `json`: typing.Optional[dict] (optional) - JSON data to send in the request body (for POST).\n- `headers`: typing.Optional[dict] (optional) - Custom headers to include in the request.\n\nOutput:\n- `httpx.Response` - The HTTP response object containing status code, headers, and response body.",
    "Canonical_solution": "import httpx\nimport typing\nfrom datetime import timedelta\n\nasync def make_http_request(url: str, method: str = \"GET\", content: typing.Optional[bytes] = None, json: typing.Optional[dict] = None, headers: typing.Optional[dict] = None) -> httpx.Response:\n    async with httpx.AsyncClient() as client:\n        if method == \"GET\":\n            response = await client.get(url)\n        elif method == \"POST\":\n            if content:\n                response = await client.post(url, content=content)\n            elif json:\n                response = await client.post(url, json=json)\n        elif method == \"PUT\":\n            response = await client.put(url, content=content)\n        elif method == \"DELETE\":\n            response = await client.delete(url)\n        elif method == \"PATCH\":\n            response = await client.patch(url, content=content)\n        elif method == \"HEAD\":\n            response = await client.head(url)\n        elif method == \"OPTIONS\":\n            response = await client.options(url)\n        \n        return response",
    "Code_level": "Function-level",
    "FSMID_for_test": 59,
    "right_result": "import httpx\nimport asyncio\n\nasync def make_http_request(url, method=\"GET\", content=None, json=None, headers=None):\n    async with httpx.AsyncClient() as client:\n        if method == \"GET\":\n            response = await client.get(url, headers=headers)\n        elif method == \"POST\":\n            if json is not None:\n                response = await client.post(url, json=json, headers=headers)\n            else:\n                response = await client.post(url, content=content, headers=headers)\n        elif method == \"PUT\":\n            if json is not None:\n                response = await client.put(url, json=json, headers=headers)\n            else:\n                response = await client.put(url, content=content, headers=headers)\n        elif method == \"DELETE\":\n            response = await client.delete(url, headers=headers)\n        elif method == \"PATCH\":\n            if json is not None:\n                response = await client.patch(url, json=json, headers=headers)\n            else:\n                response = await client.patch(url, content=content, headers=headers)\n        elif method == \"HEAD\":\n            response = await client.head(url, headers=headers)\n        elif method == \"OPTIONS\":\n            response = await client.options(url, headers=headers)\n        else:\n            raise ValueError(f\"Unsupported HTTP method: {method}\")\n    return response"
  },
  {
    "Task_id": 470,
    "Instruction": "Task Description: Implement a WebSocket server using Python's asyncio and websockets libraries to handle client connections, process incoming JSON messages, and send responses back to clients.\n\nFunction Description: The server function handles WebSocket connections, processes incoming JSON messages, performs different operations based on the 'function' field in the JSON data, and sends back appropriate responses.\n\nInput:\n- websocket: WebSocket connection object (provided by websockets library)\n- path: str - The path requested by the client (provided by websockets library)\n\nOutput: None (The function runs indefinitely to handle WebSocket connections and messages)\n\nTask Description: Create a WebSocket server that starts listening on a specified host and port, and maintains persistent connections with clients to exchange JSON-formatted messages.\n\nFunction Description: The start_websocket_server function initializes and starts a WebSocket server that listens on localhost:5150, using the server function to handle incoming connections and messages.\n\nInput: None\n\nOutput: None (The function runs indefinitely to keep the server active)",
    "Canonical_solution": "import asyncio\nimport websockets\nimport json\n\nasync def server(websocket, path):\n  while True:\n    # Get received data from websocket\n    data = await websocket.recv()\n    print (\"Received: \" + data)\n    json_data = json.loads(data)\n    if json_data.get('function') == 'echo':\n      #echo back the first argument\n      json_data['return'] = json_data['args'][0]\n    elif json_data.get('function') == 'ask':\n      #echo back the first argument\n      json_data['return'] = input(json_data['args'][0])\n    elif json_data.get('function') == 'throw':\n      #throw the first argument\n      json_data['throw'] = json_data['args'][0]\n    elif not json_data.get('function') is None:\n      json_data['throw'] = 'Unknown function : ' + json_data['function']\n\n    # Send response back to client to acknowledge receiving message\n    response = json.dumps(json_data)\n    print (\"Responding: \" + response)\n    await websocket.send(response)\n\ndef start_websocket_server():\n    # Create websocket server\n    start_server = websockets.serve(server, \"localhost\", 5150)\n    # Start and run websocket server forever\n    asyncio.get_event_loop().run_until_complete(start_server)\n    print(\"Starting loop\")\n    asyncio.get_event_loop().run_forever()",
    "Code_level": "Function-level",
    "FSMID_for_test": 45,
    "right_result": "import asyncio\nimport websockets\n\nasync def server(websocket, path):\n    async for message in websocket:\n        data = eval(message)\n        if data['function'] == 'greet':\n            response = {'status': 'success', 'message': 'Hello from server!'}\n        elif data['function'] == 'echo':\n            response = {'status': 'success', 'message': data['message']}\n        else:\n            response = {'status': 'error', 'message': 'Unknown function'}\n        await websocket.send(str(response))\n\nasync def start_websocket_server():\n    async with websockets.serve(server, \"localhost\", 5150):\n        await asyncio.Future()\n\nif __name__ == \"__main__\":\n    asyncio.run(start_websocket_server())"
  },
  {
    "Task_id": 471,
    "Instruction": "Task Description: Implement a ZeroMQ-based RPC client class in Python that subscribes to messages from a publisher, handles heartbeats, and manages connection states.\n\nClass Description: The RpcClient class establishes a ZeroMQ SUB socket to receive messages from a publisher, monitors connection health through heartbeats, and provides callback functionality for message processing.\n\nAttributes:\n- _context: zmq.Context - ZeroMQ context for socket management\n- _socket_sub: zmq.Socket - SUB socket for receiving messages\n- _active: bool - Flag indicating if the client is running\n- _thread: threading.Thread - Thread for running the message loop\n- _lock: threading.Lock - Thread synchronization lock\n- _last_received_ping: float - Timestamp of last received heartbeat\n\nMethods:\n- __init__() -> None - Initializes the ZeroMQ context and SUB socket with keepalive options\n- start(sub_address: str) -> None - Connects to the publisher and starts the message loop thread\n- stop() -> None - Stops the message loop thread\n- join() -> None - Waits for the message loop thread to complete\n- run() -> None - Main message processing loop (handles heartbeats and disconnections)\n- callback(topic: str, data: Any) -> None - Abstract method for processing received messages (to be implemented by subclasses)\n- subscribe_topic(topic: str) -> None - Subscribes to a specific message topic\n- on_disconnected() -> None - Handles disconnection events (prints warning message)",
    "Canonical_solution": "import threading\nfrom time import time\nfrom functools import lru_cache\nfrom typing import Any\nimport zmq\n\nclass RpcClient:\n    def __init__(self) -> None:\n        self._context: zmq.Context = zmq.Context()\n        self._socket_sub: zmq.Socket = self._context.socket(zmq.SUB)\n        \n        self._socket_sub.setsockopt(zmq.TCP_KEEPALIVE, 1)\n        self._socket_sub.setsockopt(zmq.TCP_KEEPALIVE_IDLE, 60)\n\n        self._active: bool = False\n        self._thread: threading.Thread = None\n        self._lock: threading.Lock = threading.Lock()\n        self._last_received_ping: time = time()\n\n    def start(self, sub_address: str) -> None:\n        if self._active:\n            return\n\n        self._socket_sub.connect(sub_address)\n        self._active = True\n        self._thread = threading.Thread(target=self.run)\n        self._thread.start()\n        self._last_received_ping = time()\n\n    def stop(self) -> None:\n        if not self._active:\n            return\n        self._active = False\n\n    def join(self) -> None:\n        if self._thread and self._thread.is_alive():\n            self._thread.join()\n        self._thread = None\n\n    def run(self) -> None:\n        pull_tolerance: int = HEARTBEAT_TOLERANCE * 1000\n\n        while self._active:\n            if not self._socket_sub.poll(pull_tolerance):\n                self.on_disconnected()\n                continue\n\n            topic, data = self._socket_sub.recv_pyobj(flags=zmq.NOBLOCK)\n\n            if topic == HEARTBEAT_TOPIC:\n                self._last_received_ping = data\n            else:\n                self.callback(topic, data)\n\n        self._socket_sub.close()\n\n    def callback(self, topic: str, data: Any) -> None:\n        raise NotImplementedError\n\n    def subscribe_topic(self, topic: str) -> None:\n        self._socket_sub.setsockopt_string(zmq.SUBSCRIBE, topic)\n\n    def on_disconnected(self):\n        msg: str = f\"RpcServer has no response over {HEARTBEAT_TOLERANCE} seconds, please check you connection.\"\n        print(msg)",
    "Code_level": "Class-level",
    "FSMID_for_test": 85,
    "right_result": "import zmq\nimport threading\nimport time\nimport logging\n\nclass RpcClient:\n    def __init__(self):\n        self._context = zmq.Context()\n        self._socket_sub = None\n        self._active = False\n        self._thread = threading.Thread(target=self.run, daemon=True)\n        self._lock = threading.Lock()\n        self._last_received_ping = 0.0\n        self._heartbeat_interval = 5.0\n        self._reconnect_delay = 2.0\n        self._log = logging.getLogger(__name__)\n\n    def start(self, sub_address: str) -> None:\n        with self._lock:\n            if self._active:\n                return\n            self._active = True\n            self._socket_sub = self._context.socket(zmq.SUB)\n            self._socket_sub.setsockopt(zmq.RCVTIMEO, 1000)\n            self._socket_sub.connect(sub_address)\n            self._thread.start()\n\n    def stop(self) -> None:\n        with self._lock:\n            if not self._active:\n                return\n            self._active = False\n            if self._socket_sub:\n                self._socket_sub.disconnect(self._socket_sub.getsockopt(zmq.LAST_ENDPOINT).decode())\n                self._socket_sub.close()\n                self._socket_sub = None\n\n    def join(self) -> None:\n        self._thread.join()\n\n    def run(self) -> None:\n        while self._active:\n            try:\n                message = self._socket_sub.recv_string()\n                topic, data = message.split(' ', 1)\n                self.callback(topic, data)\n            except zmq.Again:\n                current_time = time.time()\n                if current_time - self._last_received_ping > self._heartbeat_interval:\n                    self.on_disconnected()\n                    self.stop()\n                    time.sleep(self._reconnect_delay)\n                    self.start(self._socket_sub.getsockopt(zmq.LAST_ENDPOINT).decode())\n                    self._last_received_ping = current_time\n            except Exception as e:\n                self._log.error(f\"Error processing message: {e}\")\n                self.on_disconnected()\n                self.stop()\n                time.sleep(self._reconnect_delay)\n                self.start(self._socket_sub.getsockopt(zmq.LAST_ENDPOINT).decode())\n                self._last_received_ping = time.time()\n\n    def callback(self, topic: str, data: Any) -> None:\n        raise NotImplementedError(\"callback must be implemented by subclasses\")\n\n    def subscribe_topic(self, topic: str) -> None:\n        self._socket_sub.setsockopt(zmq.SUBSCRIBE, topic.encode())\n\n    def on_disconnected(self) -> None:\n        self._log.warning(\"Connection lost, attempting to reconnect...\")"
  },
  {
    "Task_id": 472,
    "Instruction": "Task Description: Implement a ZeroMQ consumer class in Python that subscribes to messages from a publisher using the PUB/SUB pattern, with timeout handling for message reception.\n\nClass Description: The ZeroMQConsumer class establishes a connection to a ZeroMQ publisher, subscribes to all messages, and provides methods to receive messages and clean up resources.\n\nAttributes:\n- _zmq_context: zmq.Context - The ZeroMQ context for managing sockets\n- socket: zmq.Socket - The SUB socket for receiving messages from the publisher\n\nMethods:\n- __init__(zmq_port: int) -> None - Initializes the consumer with a connection to the specified port\n  - Input: zmq_port (int) - The port number to connect to the publisher\n  - Output: None\n- receive_message() -> Dict[str, Any] - Receives and parses a message from the publisher\n  - Input: None\n  - Output: Dict[str, Any] - The parsed message content or empty dict if timeout occurs\n- close() -> None - Closes the socket and terminates the context\n  - Input: None\n  - Output: None",
    "Canonical_solution": "import zmq\nfrom typing import Dict, Any\nimport ujson\n\nclass ZeroMQConsumer:\n    def __init__(self, zmq_port: int):\n        self._zmq_context = zmq.Context()\n        self.socket = self._zmq_context.socket(zmq.SUB)\n        self.socket.connect(f\"tcp://localhost:{zmq_port}\")\n        self.socket.setsockopt_string(zmq.SUBSCRIBE, \"\")\n        self.socket.setsockopt(zmq.RCVTIMEO, 100)  # ZMQ_RECV_TIMEOUT\n\n    def receive_message(self) -> Dict[str, Any]:\n        try:\n            json_data = self.socket.recv_string()\n            return ujson.loads(json_data)\n        except zmq.Again:\n            return {}\n\n    def close(self):\n        self.socket.close()\n        self._zmq_context.term()",
    "Code_level": "Class-level",
    "FSMID_for_test": 85,
    "right_result": "import zmq\nfrom typing import Dict, Any\n\nclass ZeroMQConsumer:\n    def __init__(self, zmq_port: int) -> None:\n        self._zmq_context = zmq.Context()\n        self.socket = self._zmq_context.socket(zmq.SUB)\n        self.socket.connect(f\"tcp://localhost:{zmq_port}\")\n        self.socket.setsockopt(zmq.SUBSCRIBE, b\"\")\n\n    def receive_message(self) -> Dict[str, Any]:\n        try:\n            message = self.socket.recv_pyobj(timeout=1000)\n            return message\n        except zmq.Again:\n            return {}\n\n    def close(self) -> None:\n        self.socket.close()\n        self._zmq_context.term()"
  },
  {
    "Task_id": 473,
    "Instruction": "Task Description: Implement a ZeroMQ-based message manager class for handling publish-subscribe communication between processes, supporting both message publishing and subscription functionalities.\n\nClass Description: The ZmqManager class provides an interface for ZeroMQ-based inter-process communication using PUB/SUB and PUSH/PULL patterns. It handles message serialization/deserialization and manages connections to publisher/subscriber endpoints.\n\nAttributes:\n- sink: [zmq.Socket] - ZeroMQ PUSH socket for sending messages to the publisher\n- sub: [zmq.Socket] - ZeroMQ SUB socket for receiving messages from the publisher\n- channel: [str] - The communication channel identifier for message filtering\n\nMethods:\n- __init__(url: str = 'zmq+tcp://localhost:5555+5556', channel: str = 'socketio', write_only: bool = False) -> None - Initializes the ZeroMQ connections. Parses the connection URL and sets up both PUSH and SUB sockets.\n- _publish(data: Any) -> None - Serializes and publishes data to the specified channel using pickle.\n- zmq_listen() -> Generator[bytes, None, None] - Continuously listens for incoming messages from the SUB socket and yields raw byte messages.\n- _listen() -> Generator[Any, None, None] - Listens for messages, deserializes them using pickle, and yields only messages matching the specified channel.",
    "Canonical_solution": "import pickle\nimport re\nfrom eventlet.green import zmq\n\nclass ZmqManager:\n    def __init__(self, url='zmq+tcp://localhost:5555+5556', channel='socketio', write_only=False):\n        r = re.compile(r':\\d+\\+\\d+$')\n        if not (url.startswith('zmq+tcp://') and r.search(url)):\n            raise RuntimeError('unexpected connection string: ' + url)\n\n        url = url.replace('zmq+', '')\n        (sink_url, sub_port) = url.split('+')\n        sink_port = sink_url.split(':')[-1]\n        sub_url = sink_url.replace(sink_port, sub_port)\n\n        sink = zmq.Context().socket(zmq.PUSH)\n        sink.connect(sink_url)\n\n        sub = zmq.Context().socket(zmq.SUB)\n        sub.setsockopt_string(zmq.SUBSCRIBE, '')\n        sub.connect(sub_url)\n\n        self.sink = sink\n        self.sub = sub\n        self.channel = channel\n\n    def _publish(self, data):\n        pickled_data = pickle.dumps(\n            {\n                'type': 'message',\n                'channel': self.channel,\n                'data': data\n            }\n        )\n        return self.sink.send(pickled_data)\n\n    def zmq_listen(self):\n        while True:\n            response = self.sub.recv()\n            if response is not None:\n                yield response\n\n    def _listen(self):\n        for message in self.zmq_listen():\n            if isinstance(message, bytes):\n                try:\n                    message = pickle.loads(message)\n                except Exception:\n                    pass\n            if isinstance(message, dict) and \\\n                    message['type'] == 'message' and \\\n                    message['channel'] == self.channel and \\\n                    'data' in message:\n                yield message['data']\n        return",
    "Code_level": "Class-level",
    "FSMID_for_test": 85,
    "right_result": "class ZmqManager:\n    def __init__(self, url: str = 'zmq+tcp://localhost:5555+5556', channel: str = 'socketio', write_only: bool = False) -> None:\n        import zmq\n        self.context = zmq.Context()\n        self.sink = self.context.socket(zmq.PUSH)\n        self.sub = self.context.socket(zmq.SUB)\n        parts = url.split('+')\n        self.sink.connect(parts[0])\n        self.sub.connect(parts[1])\n        self.sub.setsockopt(zmq.SUBSCRIBE, channel.encode('utf-8'))\n        self.channel = channel\n        self.write_only = write_only\n\n    def _publish(self, data: Any) -> None:\n        import pickle\n        if not self.write_only:\n            serialized = pickle.dumps(data)\n            self.sink.send(serialized)\n\n    def zmq_listen(self) -> Generator[bytes, None, None]:\n        import zmq\n        while True:\n            yield self.sub.recv()\n\n    def _listen(self) -> Generator[Any, None, None]:\n        import pickle\n        for msg in self.zmq_listen():\n            try:\n                data = pickle.loads(msg)\n                if data.get('channel') == self.channel:\n                    yield data\n            except Exception as e:\n                pass"
  },
  {
    "Task_id": 474,
    "Instruction": "Task Description: Implement a ZeroMQ-based client class for bidirectional communication with a server, capable of sending text data and receiving processed results as NumPy arrays.\n\nClass Description: BertClient is a ZeroMQ client that establishes PUSH-SUB pattern communication with a server. It sends text data for processing and subscribes to receive the processed results as NumPy arrays.\n\nAttributes:\n- context: zmq.Context - ZeroMQ context for socket management\n- sender: zmq.Socket - PUSH socket for sending requests to server\n- receiver: zmq.Socket - SUB socket for receiving responses from server\n- identity: bytes - Unique client identifier\n- request_id: int - Counter for tracking pending requests\n- timeout: int - Timeout setting for operations\n- pending_request: set - Set of outstanding request IDs\n\nMethods:\n- __init__(ip='localhost', port=5555, port_out=5556, identity=None, timeout=-1) -> None - Initializes the client with server connection details\n- close() -> None - Closes sockets and terminates context\n- _send(msg, msg_len=0) -> None - Internal method for sending messages to server\n- _recv() -> Response - Internal method for receiving raw responses\n- _recv_ndarray() -> Response - Internal method for receiving and decoding NumPy array responses\n- encode(texts, blocking=True) -> Optional[np.ndarray] - Sends texts for encoding and returns processed arrays\n- fetch(delay=0.0) -> Generator[Response, None, None] - Yields pending responses with optional delay\n- fetch_all(sort=True, concat=False) -> Union[List[np.ndarray], np.ndarray] - Retrieves all pending responses with sorting and concatenation options",
    "Canonical_solution": "import sys\nimport uuid\nimport zmq\nfrom zmq.utils import jsonapi\nimport numpy as np\nimport pickle\nfrom collections import namedtuple\n\nResponse = namedtuple('Response', ['id', 'content'])\n\nclass BertClient:\n    def __init__(self, ip='localhost', port=5555, port_out=5556, identity=None, timeout=-1):\n        self.context = zmq.Context()\n        self.sender = self.context.socket(zmq.PUSH)\n        self.sender.setsockopt(zmq.LINGER, 0)\n        self.identity = identity or str(uuid.uuid4()).encode('ascii')\n        self.sender.connect('tcp://%s:%d' % (ip, port))\n\n        self.receiver = self.context.socket(zmq.SUB)\n        self.receiver.setsockopt(zmq.LINGER, 0)\n        self.receiver.setsockopt(zmq.SUBSCRIBE, self.identity)\n        self.receiver.connect('tcp://%s:%d' % (ip, port_out))\n\n        self.request_id = 0\n        self.timeout = timeout\n        self.pending_request = set()\n\n    def close(self):\n        self.sender.close()\n        self.receiver.close()\n        self.context.term()\n\n    def _send(self, msg, msg_len=0):\n        self.sender.send_multipart([self.identity, msg, b'%d' % self.request_id, b'%d' % msg_len])\n        self.pending_request.add(self.request_id)\n        self.request_id += 1\n\n    def _recv(self):\n        response = self.receiver.recv_multipart()\n        request_id = int(response[-1])\n        self.pending_request.remove(request_id)\n        return Response(request_id, response)\n\n    def _recv_ndarray(self):\n        request_id, response = self._recv()\n        arr_info, arr_val = jsonapi.loads(response[1]), response[2]\n        X = np.frombuffer(memoryview(arr_val), dtype=str(arr_info['dtype']))\n        return Response(request_id, X.reshape(arr_info['shape']))\n\n    def encode(self, texts, blocking=True):\n        self._send(jsonapi.dumps(texts), len(texts))\n        rst = self._recv_ndarray().content if blocking else None\n        return rst\n\n    def fetch(self, delay=.0):\n        time.sleep(delay)\n        while self.pending_request:\n            yield self._recv_ndarray()\n\n    def fetch_all(self, sort=True, concat=False):\n        if self.pending_request:\n            tmp = list(self.fetch())\n            if sort:\n                tmp = sorted(tmp, key=lambda v: v.id)\n            tmp = [v.content for v in tmp]\n            if concat:\n                tmp = np.concatenate(tmp, axis=0)\n            return tmp",
    "Code_level": "Class-level",
    "FSMID_for_test": 85,
    "right_result": "import zmq\nimport numpy as np\nfrom typing import Optional, Generator, Union, List, Set\n\nclass BertClient:\n    def __init__(self, ip='localhost', port=5555, port_out=5556, identity=None, timeout=-1) -> None:\n        self.context = zmq.Context()\n        self.sender = self.context.socket(zmq.PUSH)\n        self.receiver = self.context.socket(zmq.SUB)\n        self.identity = identity or b'client'\n        self.request_id = 0\n        self.timeout = timeout\n        self.pending_request = set()\n        self.sender.connect(f'tcp://{ip}:{port}')\n        self.receiver.connect(f'tcp://{ip}:{port_out}')\n        self.receiver.setsockopt(zmq.SUBSCRIBE, self.identity)\n\n    def close(self) -> None:\n        self.sender.close()\n        self.receiver.close()\n        self.context.term()\n\n    def _send(self, msg, msg_len=0) -> None:\n        self.sender.send_multipart([self.identity, str(self.request_id).encode(), msg])\n        self.pending_request.add(self.request_id)\n        self.request_id += 1\n\n    def _recv(self) -> bytes:\n        while True:\n            if self.timeout >= 0:\n                try:\n                    return self.receiver.recv_multipart(zmq.NOBLOCK)\n                except zmq.Again:\n                    pass\n            else:\n                return self.receiver.recv_multipart()\n\n    def _recv_ndarray(self) -> np.ndarray:\n        data = self._recv()\n        if not data:\n            return None\n        arr = np.frombuffer(data[1], dtype=np.float32)\n        return arr.reshape(tuple(map(int, data[2].decode().split(','))))\n\n    def encode(self, texts, blocking=True) -> Optional[np.ndarray]:\n        if not isinstance(texts, list):\n            texts = [texts]\n        for text in texts:\n            self._send(text.encode())\n        if blocking:\n            results = []\n            for _ in range(len(texts)):\n                result = self._recv_ndarray()\n                if result is not None:\n                    results.append(result)\n            return np.stack(results) if len(results) > 1 else results[0] if results else None\n        return None\n\n    def fetch(self, delay=0.0) -> Generator[Optional[np.ndarray], None, None]:\n        while self.pending_request:\n            if delay > 0:\n                import time\n                time.sleep(delay)\n            if not self.pending_request:\n                break\n            result = self._recv_ndarray()\n            if result is not None:\n                yield result\n            else:\n                yield None\n\n    def fetch_all(self, sort=True, concat=False) -> Union[List[np.ndarray], np.ndarray]:\n        results = []\n        for _ in range(len(self.pending_request)):\n            result = self._recv_ndarray()\n            if result is not None:\n                results.append(result)\n        if sort:\n            results.sort()\n        if concat and len(results) > 1:\n            return np.concatenate(results)\n        return results if len(results) > 1 else results[0] if results else None"
  },
  {
    "Task_id": 475,
    "Instruction": "Task Description: Implement a ZeroMQ subscriber in Python that connects to a publisher and continuously receives messages.\n\nFunction Description: The function `setup_zmq_subscriber` initializes a ZeroMQ subscriber socket, connects it to a specified publisher endpoint, and configures it to subscribe to all messages. The function `receive_messages` continuously listens for and prints messages received through the socket.\n\nInput: \n- `remote_ip` (str, optional): The endpoint address of the ZeroMQ publisher in the format 'tcp://IP_ADDRESS:PORT'. Defaults to 'tcp://REMOTE_IP_ADDRESS:5555'.\n\nOutput: \n- `socket` (zmq.Socket): A configured ZeroMQ SUB socket ready to receive messages.\n- None (for `receive_messages`): The function runs indefinitely, printing received messages.",
    "Canonical_solution": "import zmq\n\ndef setup_zmq_subscriber(remote_ip='tcp://REMOTE_IP_ADDRESS:5555'):\n    context = zmq.Context()\n    socket = context.socket(zmq.SUB)\n    socket.connect(remote_ip)\n    socket.setsockopt_string(zmq.SUBSCRIBE, '')\n    return socket\n\ndef receive_messages(socket):\n    while True:\n        msg = socket.recv_string()\n        print(msg)",
    "Code_level": "Function-level",
    "FSMID_for_test": 85,
    "right_result": "import zmq\n\ndef setup_zmq_subscriber(remote_ip='tcp://REMOTE_IP_ADDRESS:5555'):\n    context = zmq.Context()\n    socket = context.socket(zmq.SUB)\n    socket.connect(remote_ip)\n    socket.setsockopt(zmq.SUBSCRIBE, b'')\n    return socket\n\ndef receive_messages(socket):\n    while True:\n        message = socket.recv_string()\n        print(f\"Received: {message}\")"
  },
  {
    "Task_id": 476,
    "Instruction": "Task Description: Create a Python class that connects to a remote progress bar using ZeroMQ's PUB/SUB pattern to receive and display progress updates from a separate process.\n\nClass Description: The RemoteProgress class establishes a ZeroMQ SUB socket to subscribe to progress updates broadcast by a publisher process. It continuously receives messages containing progress percentages and labels, displaying them in a formatted way until interrupted.\n\nAttributes:\n- hostname: str - The hostname or IP address of the publisher (default: 'localhost')\n- port: int - The port number to connect to (default: 8080)\n- label: str - The current progress label received from the publisher\n\nMethods:\n- __init__(port: int = 8080, hostname: str = 'localhost') -> None - Initializes the RemoteProgress instance with connection parameters\n- __call__() -> None - Main method that establishes the connection, receives messages, and displays progress (runs in an infinite loop until interrupted)\n- _display_progress(percentage: float) -> None - Helper method that formats and displays the progress percentage (private method)",
    "Canonical_solution": "import zmq\nfrom typing import Optional\n\nclass RemoteProgress:\n    \"\"\"\n    Connect to a progress bar in a separate process with output_mode\n    set to 'broadcast' in order to display the results (to stdout).\n    \"\"\"\n\n    def __init__(self, port: int = 8080, hostname: str = 'localhost'):\n        self.hostname = hostname\n        self.port = port\n        self.label = \"\"\n\n    def __call__(self):\n        context = zmq.Context()\n        sock = context.socket(zmq.SUB)\n        sock.setsockopt(zmq.SUBSCRIBE, b'')\n        sock.connect('tcp://' + self.hostname +':'+str(self.port))\n        \n        percent = None\n        while True:\n            try:\n                message = sock.recv()\n                [percent_str, label] = message.split(b'|')\n                percent = float(percent_str)\n                self.label = label.decode()\n                self._display_progress(percent)\n            except KeyboardInterrupt:\n                if percent is not None:\n                    print(f\"Exited at {percent:.3f}% completion\")\n                break\n            except Exception:\n                print(f\"Could not process socket message: {message!r}\")\n\n    def _display_progress(self, percentage: float):\n        print(f\"\\r{self.label}: {percentage:.1f}%\", end='')",
    "Code_level": "Class-level",
    "FSMID_for_test": 85,
    "right_result": "import zmq\n\nclass RemoteProgress:\n    def __init__(self, port: int = 8080, hostname: str = 'localhost') -> None:\n        self.hostname = hostname\n        self.port = port\n        self.label = \"\"\n\n    def __call__(self) -> None:\n        context = zmq.Context()\n        socket = context.socket(zmq.SUB)\n        socket.connect(f\"tcp://{self.hostname}:{self.port}\")\n        socket.setsockopt(zmq.SUBSCRIBE, b'')\n\n        try:\n            while True:\n                message = socket.recv_string()\n                if not message:\n                    continue\n                parts = message.split(':')\n                if len(parts) < 2:\n                    continue\n                self.label = parts[0]\n                percentage = float(parts[1])\n                self._display_progress(percentage)\n        except KeyboardInterrupt:\n            print(\"\\nInterrupted by user.\")\n        finally:\n            socket.close()\n            context.term()\n\n    def _display_progress(self, percentage: float) -> None:\n        bar_length = 50\n        filled_length = int(bar_length * percentage / 100)\n        bar = '=' * filled_length + '-' * (bar_length - filled_length)\n        print(f\"\\r{self.label} |{bar}| {percentage:.1f}%\", end='')"
  },
  {
    "Task_id": 477,
    "Instruction": "Task Description: Implement a ZeroMQ-based network communication class that supports PUB/SUB pattern for sending and receiving messages between processes, with optional frame compression and message handling.\n\nClass Description: NetGear is a ZeroMQ wrapper class that facilitates network communication using various messaging patterns, with a focus on PUB/SUB pattern. It handles socket creation, connection management, message serialization, and frame compression/decompression.\n\nAttributes:\n- __logging: bool - Enables/disables logging functionality\n- __msg_context: zmq.Context - ZeroMQ context instance for socket management\n- __receive_mode: bool - Flag indicating if instance is in receive mode\n- __pattern: int - Selected messaging pattern (0: PAIR, 1: REQ/REP, 2: PUB/SUB)\n- __terminate: bool - Flag for graceful termination\n- __msg_socket: zmq.Socket - ZeroMQ socket instance\n- __subscriber_timeout: int - Timeout value for subscriber socket (in seconds)\n- __queue: deque - Buffer for storing received frames (receiver only)\n- __thread: Thread - Background thread for message handling (receiver only)\n\nMethods:\n- __init__(address=None, port=None, protocol=None, pattern=0, receive_mode=False, logging=False, **options) -> None - Initializes the NetGear instance with specified parameters\n- __recv_handler() -> None - Internal thread handler for receiving messages (receiver only)\n- recv() -> np.ndarray|None - Receives and returns a frame from the queue (receiver only)\n- send(frame, message=None) -> None - Sends a frame with optional metadata (sender only)\n- close(kill=False) -> None - Closes the connection and cleans up resources",
    "Canonical_solution": "import os\nimport time\nimport asyncio\nimport platform\nimport string\nimport secrets\nimport numpy as np\nimport logging as log\nfrom threading import Thread\nfrom collections import deque\nfrom os.path import expanduser\nimport zmq\nfrom zmq import auth\nfrom zmq.auth.thread import ThreadAuthenticator\nfrom zmq.error import ZMQError\n\nclass NetGear:\n    def __init__(\n        self,\n        address=None,\n        port=None,\n        protocol=None,\n        pattern=0,\n        receive_mode=False,\n        logging=False,\n        **options\n    ):\n        self.__logging = logging if isinstance(logging, bool) else False\n        self.__msg_context = zmq.Context.instance()\n        self.__receive_mode = receive_mode\n        self.__pattern = pattern\n        self.__terminate = False\n\n        valid_messaging_patterns = {\n            0: (zmq.PAIR, zmq.PAIR),\n            1: (zmq.REQ, zmq.REP),\n            2: (zmq.PUB, zmq.SUB),\n        }\n\n        msg_pattern = valid_messaging_patterns[pattern]\n        self.__msg_socket = self.__msg_context.socket(msg_pattern[1 if receive_mode else 0])\n\n        if pattern == 2:  # PUB/SUB pattern\n            if receive_mode:  # SUB socket\n                self.__msg_socket.setsockopt_string(zmq.SUBSCRIBE, \"\")\n                self.__subscriber_timeout = options.get('subscriber_timeout', None)\n                if self.__subscriber_timeout:\n                    self.__msg_socket.setsockopt(zmq.RCVTIMEO, self.__subscriber_timeout * 1000)\n                    self.__msg_socket.setsockopt(zmq.LINGER, 0)\n            else:  # PUB socket\n                self.__msg_socket.set_hwm(1)\n\n        if receive_mode:\n            address = \"*\" if address is None else address\n            port = \"5555\" if port is None else port\n            self.__msg_socket.bind(f\"{protocol}://{address}:{port}\")\n        else:\n            address = \"localhost\" if address is None else address\n            port = \"5555\" if port is None else port\n            self.__msg_socket.connect(f\"{protocol}://{address}:{port}\")\n\n        if receive_mode and pattern == 2:\n            self.__queue = deque(maxlen=96)\n            self.__thread = Thread(target=self.__recv_handler, name=\"NetGear\")\n            self.__thread.daemon = True\n            self.__thread.start()\n\n    def __recv_handler(self):\n        while not self.__terminate:\n            try:\n                msg_json = self.__msg_socket.recv_json(flags=zmq.NOBLOCK)\n                msg_data = self.__msg_socket.recv(flags=zmq.NOBLOCK)\n                \n                if msg_json[\"terminate_flag\"]:\n                    self.__terminate = True\n                    self.__queue.append(None)\n                    break\n\n                if msg_json[\"compression\"]:\n                    frame = simplejpeg.decode_jpeg(\n                        msg_data,\n                        colorspace=msg_json[\"compression\"][\"colorspace\"],\n                        fastdct=msg_json[\"compression\"][\"dct\"],\n                        fastupsample=msg_json[\"compression\"][\"ups\"],\n                    )\n                else:\n                    frame_buffer = np.frombuffer(msg_data, dtype=msg_json[\"dtype\"])\n                    frame = frame_buffer.reshape(msg_json[\"shape\"])\n\n                self.__queue.append(frame)\n\n            except zmq.ZMQError as e:\n                if e.errno == zmq.EAGAIN:\n                    time.sleep(0.00001)\n                    continue\n                else:\n                    self.__terminate = True\n                    self.__queue.append(None)\n                    break\n\n    def recv(self):\n        if not self.__receive_mode or self.__pattern != 2:\n            raise ValueError(\"recv() can only be used in receive mode with PUB/SUB pattern\")\n\n        while not self.__terminate:\n            if len(self.__queue) > 0:\n                return self.__queue.popleft()\n            time.sleep(0.00001)\n        return None\n\n    def send(self, frame, message=None):\n        if self.__receive_mode or self.__pattern != 2:\n            raise ValueError(\"send() can only be used in send mode with PUB/SUB pattern\")\n\n        exit_flag = True if (frame is None or self.__terminate) else False\n\n        msg_dict = {\n            \"terminate_flag\": exit_flag,\n            \"compression\": False,\n            \"message\": message,\n            \"pattern\": str(self.__pattern),\n            \"dtype\": str(frame.dtype),\n            \"shape\": frame.shape\n        }\n\n        self.__msg_socket.send_json(msg_dict, zmq.SNDMORE)\n        self.__msg_socket.send(frame, copy=False)\n\n    def close(self, kill=False):\n        self.__terminate = True\n        if self.__receive_mode and self.__pattern == 2:\n            if self.__thread is not None:\n                if kill:\n                    self.__msg_context.destroy()\n                self.__thread.join()\n                self.__thread = None\n        self.__msg_socket.close(linger=0)",
    "Code_level": "Class-level",
    "FSMID_for_test": 85,
    "right_result": "import zmq\nimport numpy as np\nfrom collections import deque\nimport threading\nimport time\n\nclass NetGear:\n    def __init__(self, address=None, port=None, protocol=None, pattern=0, receive_mode=False, logging=False, **options):\n        self.__logging = logging\n        self.__msg_context = zmq.Context()\n        self.__receive_mode = receive_mode\n        self.__pattern = pattern\n        self.__terminate = False\n        self.__msg_socket = None\n        self.__subscriber_timeout = 10\n        self.__queue = deque()\n        self.__thread = None\n        self.__frame_compression = False\n        self.__compression_level = 6\n\n        if self.__receive_mode:\n            if self.__pattern == 2:\n                self.__msg_socket = self.__msg_context.socket(zmq.SUB)\n                self.__msg_socket.setsockopt(zmq.SUBSCRIBE, b'')\n                self.__msg_socket.setsockopt(zmq.RCVTIMEO, self.__subscriber_timeout * 1000)\n            else:\n                raise ValueError(\"Invalid pattern for receiver mode\")\n        else:\n            if self.__pattern == 2:\n                self.__msg_socket = self.__msg_context.socket(zmq.PUB)\n            elif self.__pattern == 0:\n                self.__msg_socket = self.__msg_context.socket(zmq.PAIR)\n            elif self.__pattern == 1:\n                self.__msg_socket = self.__msg_context.socket(zmq.REP)\n            else:\n                raise ValueError(\"Invalid pattern for sender mode\")\n\n        if address and port:\n            address = f\"{protocol}://{address}:{port}\"\n        self.__msg_socket.connect(address)\n\n        if self.__logging:\n            print(f\"NetGear initialized with pattern {self.__pattern}, receive mode: {self.__receive_mode}\")\n\n        if self.__receive_mode:\n            self.__thread = threading.Thread(target=self.__recv_handler, daemon=True)\n            self.__thread.start()\n\n    def __recv_handler(self):\n        while not self.__terminate:\n            try:\n                if self.__pattern == 2:\n                    frame = self.__msg_socket.recv()\n                    self.__queue.append(frame)\n                time.sleep(0.01)\n            except zmq.Again:\n                continue\n            except Exception as e:\n                if self.__logging:\n                    print(f\"Error in recv_handler: {e}\")\n                break\n\n    def recv(self):\n        if not self.__queue:\n            return None\n        return self.__queue.popleft()\n\n    def send(self, frame, message=None):\n        if self.__pattern != 2:\n            if self.__frame_compression:\n                import zlib\n                frame = zlib.compress(frame, self.__compression_level)\n            if message:\n                self.__msg_socket.send_multipart([message, frame])\n            else:\n                self.__msg_socket.send(frame)\n        else:\n            raise ValueError(\"Cannot send messages in PUB/SUB receive mode\")\n\n    def close(self, kill=False):\n        self.__terminate = True\n        if self.__thread:\n            self.__thread.join()\n        if self.__msg_socket:\n            self.__msg_socket.close()\n        self.__msg_context.term()\n        if self.__logging:\n            print(\"NetGear connection closed\")"
  },
  {
    "Task_id": 478,
    "Instruction": "Task Description: Implement a ZeroMQ-based consumer class in Python that subscribes to messages from a publisher, processes token information from shared memory requests, and manages resource recycling.\n\nClass Description: The ZeroMQConsumer class is responsible for receiving and processing messages from a detokenization service via ZeroMQ's PUB/SUB pattern. It manages shared memory requests, tracks request statuses, and handles resource recycling when requests are completed.\n\nAttributes:\n- context: zmq.asyncio.Context - ZeroMQ asynchronous context for managing sockets\n- recv_from_detokenization: zmq.SUB - SUB socket for receiving messages from the publisher\n- shm_req_manager: ShmReqManager - Manager for shared memory request objects\n- req_id_to_out_inf: Dict[int, ReqStatus] - Dictionary mapping request IDs to their status objects\n- recycle_event: asyncio.Event - Event flag for triggering resource recycling\n\nMethods:\n- __init__(zmq_mode: str, detokenization_pub_port: int, shm_req_manager: ShmReqManager) -> None - Initializes the consumer with ZeroMQ configuration and shared memory manager\n- handle_loop() -> None - Main processing loop that receives messages and manages token output\n- recycle_resource_loop() -> None - Background loop for recycling completed request resources\n\nHelper Class (ReqStatus):\n- __init__(group_request_id, multimodal_params, req_objs: List[Req], start_time) -> None - Tracks status of a request group\n- can_release() -> bool - Determines if all requests in the group can be released",
    "Canonical_solution": "import zmq\nimport zmq.asyncio\nfrom typing import Dict\nfrom lightllm.server.core.objs import Req\nfrom lightllm.server.core.objs.shm_req_manager import ShmReqManager\nfrom lightllm.server.core.objs.io_objs import GroupReqObjs\nimport asyncio\n\nclass ZeroMQConsumer:\n    def __init__(self, zmq_mode: str, detokenization_pub_port: int, shm_req_manager: ShmReqManager):\n        self.context = zmq.asyncio.Context()\n        self.recv_from_detokenization = self.context.socket(zmq.SUB)\n        self.recv_from_detokenization.connect(f\"{zmq_mode}127.0.0.1:{detokenization_pub_port}\")\n        self.recv_from_detokenization.setsockopt(zmq.SUBSCRIBE, b\"\")\n        self.shm_req_manager = shm_req_manager\n        self.req_id_to_out_inf: Dict[int, ReqStatus] = {}\n        self.recycle_event = asyncio.Event()\n\n    async def handle_loop(self):\n        asyncio.create_task(self.recycle_resource_loop())\n        \n        while True:\n            try:\n                await asyncio.wait_for(self.recv_from_detokenization.recv_pyobj(), timeout=0.05)\n            except asyncio.TimeoutError:\n                pass\n\n            for req_status in self.req_id_to_out_inf.values():\n                token_list = []\n                for req in req_status.group_req_objs.shm_req_objs:\n                    req_id = req.request_id\n                    if not req.out_tokens_queue.is_empty():\n                        text, src_index, special, count_output_tokens = req.out_tokens_queue.peek()\n                        metadata = {\n                            \"id\": int(req.shm_prompt_ids.arr[src_index]),\n                            \"logprob\": float(req.shm_logprobs.arr[src_index]),\n                            \"special\": special,\n                            \"count_output_tokens\": count_output_tokens,\n                            \"prompt_cache_len\": req.prompt_cache_len,\n                        }\n                        req.out_tokens_queue.pop_no_ret()\n\n                        if req.finish_token_index != src_index:\n                            token_list.append((req_id, text, metadata, FinishStatus()))\n                        else:\n                            finish_status = FinishStatus(req.finish_status.status)\n                            token_list.append((req_id, text, metadata, finish_status))\n\n                async with req_status.lock:\n                    req_status.out_token_info_list.extend(token_list)\n                    req_status.event.set()\n\n            self.recycle_event.set()\n\n    async def recycle_resource_loop(self):\n        while True:\n            try:\n                await asyncio.wait_for(self.recycle_event.wait(), timeout=0.02)\n            except asyncio.TimeoutError:\n                pass\n            self.recycle_event.clear()\n\n            release_req_status = []\n            for req_status in self.req_id_to_out_inf.values():\n                if req_status.can_release():\n                    release_req_status.append(req_status)\n\n            for req_status in release_req_status:\n                self.req_id_to_out_inf.pop(req_status.group_req_objs.group_req_id, None)\n                for req in req_status.group_req_objs.shm_req_objs:\n                    await self.shm_req_manager.async_put_back_req_obj(req)\n                    await self.shm_req_manager.async_release_req_index(req.index_in_shm_mem)\n\nclass ReqStatus:\n    def __init__(self, group_request_id, multimodal_params, req_objs: List[Req], start_time) -> None:\n        self.lock = asyncio.Lock()\n        self.event = asyncio.Event()\n        self.group_req_objs = GroupReqObjs(\n            group_req_id=group_request_id,\n            multimodal_params=multimodal_params,\n            shm_req_objs=req_objs,\n            time_mark=start_time,\n        )\n        self.out_token_info_list = []\n\n    def can_release(self):\n        for req in self.group_req_objs.shm_req_objs:\n            if not req.can_release():\n                return False\n        return True",
    "Code_level": "Class-level",
    "FSMID_for_test": 85,
    "right_result": "import asyncio\nimport zmq\nimport json\nfrom typing import Dict, List, Any\n\nclass ReqStatus:\n    def __init__(self, group_request_id: int, multimodal_params: dict, req_objs: List['Req'], start_time: float) -> None:\n        self.group_request_id = group_request_id\n        self.multimodal_params = multimodal_params\n        self.req_objs = req_objs\n        self.start_time = start_time\n        self.completed_count = 0\n\n    def can_release(self) -> bool:\n        return self.completed_count == len(self.req_objs)\n\nclass ZeroMQConsumer:\n    def __init__(self, zmq_mode: str, detokenization_pub_port: int, shm_req_manager: 'ShmReqManager') -> None:\n        self.context = zmq.asyncio.Context()\n        self.recv_from_detokenization = self.context.socket(zmq.SUB)\n        self.recv_from_detokenization.connect(f\"tcp://*: {detokenization_pub_port}\")\n        self.recv_from_detokenization.setsockopt(zmq.SUBSCRIBE, b'')\n        self.shm_req_manager = shm_req_manager\n        self.req_id_to_out_inf: Dict[int, ReqStatus] = {}\n        self.recycle_event = asyncio.Event()\n        self.zmq_mode = zmq_mode\n\n    async def handle_loop(self) -> None:\n        while True:\n            message = await self.recv_from_detokenization.recv_string()\n            data = json.loads(message)\n            req_id = data.get('req_id')\n            token_info = data.get('token_info')\n\n            if req_id not in self.req_id_to_out_inf:\n                req_status = ReqStatus(\n                    group_request_id=req_id,\n                    multimodal_params=data.get('multimodal_params', {}),\n                    req_objs=self.shm_req_manager.get_requests(req_id),\n                    start_time=data.get('start_time', 0.0)\n                )\n                self.req_id_to_out_inf[req_id] = req_status\n\n            req_status = self.req_id_to_out_inf[req_id]\n            req_status.completed_count += 1\n\n            if req_status.can_release():\n                del self.req_id_to_out_inf[req_id]\n                self.recycle_event.set()\n\n    async def recycle_resource_loop(self) -> None:\n        while True:\n            await self.recycle_event.wait()\n            self.recycle_event.clear()\n            for req_id, req_status in list(self.req_id_to_out_inf.items()):\n                if req_status.can_release():\n                    del self.req_id_to_out_inf[req_id]\n                    self.shm_req_manager.release_requests(req_id)\n                    print(f\"Resources for request {req_id} recycled.\")\n\n    async def start(self) -> None:\n        await asyncio.gather(\n            self.handle_loop(),\n            self.recycle_resource_loop()\n        )"
  },
  {
    "Task_id": 479,
    "Instruction": "Task Description: Implement a ZeroMQ-based server that handles task distribution and status updates from multiple workers using the REQ/REP pattern. The server should manage a queue of tasks, distribute them to workers, and handle task success/failure notifications.\n\nFunction Description: The `server` function sets up a ZeroMQ REP socket to listen for worker requests. It manages a task queue (`remaining_entries`) and worker count (`running_workers`), distributing tasks to workers and processing their success/failure responses. The server runs indefinitely until all tasks are completed or workers disconnect.\n\nInput:\n- `--channel-ip` (str, optional): IP address for ZeroMQ communication (default: None, binds to all interfaces)\n- `--channel-port` (int, optional): Port number for ZeroMQ communication (default: 5555)\n\nOutput: None (runs indefinitely as a server process)\n\nNote: The function maintains internal state for:\n1. `remaining_entries`: List of pending task IDs\n2. `running_workers`: Count of active workers\nThese should be initialized before the main loop (not shown in reference code)",
    "Canonical_solution": "import zmq\nimport time\nimport argparse\n\ndef server():\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\n        \"--channel-ip\",\n        type=str,\n        default=None,\n        help=\"IP for ZeroMQ channel\",\n    )\n    parser.add_argument(\n        \"--channel-port\",\n        type=int,\n        default=5555,\n        help=\"Port for ZeroMQ channel\",\n    )\n    args = parser.parse_known_args()[0]\n\n    context = zmq.Context()\n    socket = context.socket(zmq.REP)\n    socket.bind(f\"tcp://*:{args.channel_port}\")\n\n    while True:\n        msg = socket.recv_json()\n        rank = msg[\"rank\"]\n        action = msg[\"action\"]\n\n        if action == \"pull\":\n            if len(remaining_entries) == 0:\n                socket.send_json({\"task_id\": None})\n                running_workers -= 1\n                if running_workers == 0:\n                    break\n            else:\n                entry = remaining_entries.pop()\n                socket.send_json({\"task_id\": entry})\n        else:\n            if action == \"success\":\n                socket.send_json({\"pong\": 1})\n            else:\n                remaining_entries.append(msg['task_id'])\n                socket.send_json({\"pong\": 1})\n                break",
    "Code_level": "Function-level",
    "FSMID_for_test": 87,
    "right_result": "import zmq\nimport sys\nimport time\n\ndef server(channel_ip=None, channel_port=5555):\n    context = zmq.Context()\n    socket = context.socket(zmq.REP)\n    if channel_ip:\n        socket.bind(f\"tcp://{channel_ip}:{channel_port}\")\n    else:\n        socket.bind(f\"tcp://*::{channel_port}\")\n\n    remaining_entries = []\n    running_workers = 0\n\n    while True:\n        message = socket.recv_string()\n        if message == \"WORKER_READY\":\n            running_workers += 1\n            socket.send_string(\"READY\")\n            continue\n        elif message == \"WORKER_DISCONNECTED\":\n            running_workers -= 1\n            socket.send_string(\"DISCONNECTED\")\n            continue\n\n        if not remaining_entries:\n            socket.send_string(\"NO_TASKS\")\n            continue\n\n        task_id = remaining_entries.pop(0)\n        socket.send_string(task_id)\n\n        try:\n            response = socket.recv_string()\n            if response == \"TASK_SUCCESS\":\n                print(f\"Task {task_id} completed successfully\")\n            elif response == \"TASK_FAILURE\":\n                print(f\"Task {task_id} failed\")\n            else:\n                print(f\"Unknown response from worker for task {task_id}: {response}\")\n        except zmq.Again:\n            print(\"Worker did not respond in time for task\", task_id)\n        except Exception as e:\n            print(\"Error processing task\", task_id, \":\", str(e))\n\n        if not remaining_entries and running_workers == 0:\n            print(\"All tasks completed and no workers are active. Exiting.\")\n            break\n\n    socket.close()\n    context.term()"
  },
  {
    "Task_id": 480,
    "Instruction": "Task Description: Implement a ZeroMQ-based server that handles task distribution and status updates between multiple workers using the REQ/REP pattern.\n\nFunction Description: The server function establishes a ZeroMQ REP socket to listen for worker requests. It manages a pool of tasks (remaining_entries) and distributes them to workers. Workers can request tasks (\"pull\") or report task completion status (\"success\"/\"failure\"). The server responds accordingly and tracks active workers. The loop continues until all tasks are completed and all workers have finished.\n\nInput:\n- --channel-ip (str, optional): IP address for ZeroMQ channel (default: None)\n- --channel-port (int): Port number for ZeroMQ channel (default: 5555)\n\nOutput: None (The function runs indefinitely until all tasks are completed and all workers have disconnected)\n\nNote: The function uses two global variables:\n- remaining_entries: List of pending task IDs\n- running_workers: Count of currently active workers\n\nThe server expects and sends JSON messages with the following formats:\nReceived messages:\n- {\"rank\": [worker_id], \"action\": \"pull\"}\n- {\"rank\": [worker_id], \"action\": \"success\"/\"failure\", \"task_id\": [task_id]}\n\nSent responses:\n- {\"task_id\": [task_id]} (for pull requests)\n- {\"task_id\": None} (when no tasks remain)\n- {\"pong\": 1} (acknowledgment for status updates)\n\nThe server maintains task state by:\n1. Removing tasks when assigned\n2. Re-adding tasks if workers report failure\n3. Tracking active workers until all complete their tasks",
    "Canonical_solution": "import zmq\nimport time\nimport torch\n\ndef server():\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\n        \"--channel-ip\",\n        type=str,\n        default=None,\n        help=\"IP for ZeroMQ channel\",\n    )\n    parser.add_argument(\n        \"--channel-port\",\n        type=int,\n        default=5555,\n        help=\"Port for ZeroMQ channel\",\n    )\n    args = parser.parse_known_args()[0]\n\n    context = zmq.Context()\n    socket = context.socket(zmq.REP)\n    socket.bind(f\"tcp://*:{args.channel_port}\")\n\n    while True:\n        msg = socket.recv_json()\n        rank = msg[\"rank\"]\n        action = msg[\"action\"]\n\n        if action == \"pull\":\n            if len(remaining_entries) == 0:\n                socket.send_json({\"task_id\": None})\n                running_workers -= 1\n                if running_workers == 0:\n                    break\n            else:\n                entry = remaining_entries.pop()\n                socket.send_json({\"task_id\": entry})\n        else:\n            if action == \"success\":\n                socket.send_json({\"pong\": 1})\n            else:\n                remaining_entries.append(msg['task_id'])\n                socket.send_json({\"pong\": 1})\n                break",
    "Code_level": "Function-level",
    "FSMID_for_test": 87,
    "right_result": "import zmq\nimport json\nimport time\nimport sys\n\ndef server():\n    global remaining_entries, running_workers\n    context = zmq.Context()\n    socket = context.socket(zmq.REP)\n    if '--channel-ip' in sys.argv:\n        ip = sys.argv[sys.argv.index('--channel-ip') + 1]\n    else:\n        ip = 'localhost'\n    port = int(sys.argv[sys.argv.index('--channel-port') + 1]) if '--channel-port' in sys.argv else 5555\n    socket.bind(f\"tcp://{ip}:{port}\")\n    print(f\"Server started on {ip}:{port}\")\n\n    while True:\n        message = socket.recv_string()\n        msg_dict = json.loads(message)\n        worker_id = msg_dict['rank']\n        action = msg_dict['action']\n\n        if action == 'pull':\n            if remaining_entries:\n                task_id = remaining_entries.pop(0)\n                socket.send_json({\"task_id\": task_id})\n                running_workers += 1\n            else:\n                socket.send_json({\"task_id\": None})\n        elif action in ['success', 'failure']:\n            socket.send_json({\"pong\": 1})\n            if action == 'failure':\n                remaining_entries.append(msg_dict['task_id'])\n        else:\n            socket.send_json({\"error\": \"Invalid action\"})\n        \n        if not remaining_entries and running_workers == 0:\n            break\n\n    socket.close()\n    context.term()"
  },
  {
    "Task_id": 483,
    "Instruction": "Task Description: Implement a distributed task processing system using ZeroMQ's REQ/REP pattern where a client requests tasks from a server, processes them, and reports back the results or failures.\n\nFunction Description: The function `run_generation_distributed` establishes a ZeroMQ REQ socket connection to a server, continuously requests tasks, processes them, and writes the results to a file. It handles task distribution, processing, and status reporting (success/failure) back to the server.\n\nInput:\n- `args`: [object] - Configuration object containing:\n  - `channel_ip`: [str] - IP address of the ZeroMQ server\n  - `channel_port`: [int] - Port of the ZeroMQ server\n  - `output_path`: [str] - Directory path for output files\n  - `task_name`: [str] - Base name for output files\n  - `temperature`: [float] - Processing parameter\n  - `top_p`: [float] - Processing parameter\n  - `samples_per_problem`: [int] - Number of samples per task\n  - `rank`: [int] - Worker identifier\n- `model`: [object] - Model used for processing tasks (not directly used in shown code)\n- `tokenizer`: [object] - Tokenizer used for processing tasks (not directly used in shown code)\n\nOutput:\n- None (direct output) - Results are written to a JSONL file in the specified output directory\n- Side Effects:\n  - Creates output directory if it doesn't exist\n  - Writes processed results to a JSONL file\n  - Communicates task status (success/failure) back to server",
    "Canonical_solution": "import zmq\n\ndef run_generation_distributed(args, model, tokenizer):\n    logger.info(f\"Connecting to tcp://{args.channel_ip}:{args.channel_port}\")\n    context = zmq.Context()\n    socket = context.socket(zmq.REQ)\n    socket.connect(f\"tcp://{args.channel_ip}:{args.channel_port}\")\n    \n    os.makedirs(args.output_path, exist_ok=True)\n    output_path = os.path.join(\n        args.output_path,\n        f\"{args.task_name}-t{args.temperature}-topp{args.top_p}-ns{args.samples_per_problem}-rank{args.rank}.jsonl\",\n    )\n    \n    fout = open(output_path, \"w\", encoding=\"utf-8\")\n    while True:\n        socket.send_json({\"rank\": args.rank, \"action\": \"pull\"})\n        resp = socket.recv_json()\n        try:\n            if resp[\"task_id\"] is None:\n                break\n\n            current_spec = resp[\"task_id\"]\n            results = process(current_spec)\n            \n            for res in results:\n                fout.write(json.dumps(res, ensure_ascii=False) + \"\\n\")\n                fout.flush()\n\n            socket.send_json(\n                {\n                    \"rank\"   : args.rank,\n                    \"action\" : \"success\",\n                    \"task_id\": current_spec['task_id']\n                }\n            )\n            socket.recv()\n\n        except Exception as e:\n            logger.error(f\"*** (rank={args.rank}) crashed.\")\n            logger.error(f\"    error: {repr(e)}\")\n            socket.send_json(\n                {\n                    \"rank\"   : args.rank,\n                    \"action\" : \"fail\",\n                    \"task_id\": current_spec['task_id']\n                }\n            )\n            socket.recv()\n            continue",
    "Code_level": "Function-level",
    "FSMID_for_test": 86,
    "right_result": "import os\nimport json\nimport time\nimport zmq\n\ndef run_generation_distributed(args, model, tokenizer):\n    context = zmq.Context()\n    socket = context.socket(zmq.REQ)\n    socket.connect(f\"tcp://{args.channel_ip}:{args.channel_port}\")\n    \n    output_dir = args.output_path\n    os.makedirs(output_dir, exist_ok=True)\n    output_file = os.path.join(output_dir, f\"{args.task_name}_{args.rank}.jsonl\")\n    \n    while True:\n        try:\n            socket.send_json({\"action\": \"request_task\"})\n            task = socket.recv_json()\n            if task.get(\"type\") == \"terminate\":\n                break\n            \n            task_id = task[\"task_id\"]\n            problem = task[\"problem\"]\n            num_samples = args.samples_per_problem\n            \n            results = []\n            for _ in range(num_samples):\n                try:\n                    start_time = time.time()\n                    generated_text = model.generate(\n                        inputs=tokenizer(problem, return_tensors=\"pt\").to(model.device),\n                        temperature=args.temperature,\n                        top_p=args.top_p,\n                        max_length=256\n                    )\n                    generated_text = tokenizer.decode(generated_text[0], skip_special_tokens=True)\n                    end_time = time.time()\n                    results.append({\n                        \"task_id\": task_id,\n                        \"sample_index\": len(results),\n                        \"generated_text\": generated_text,\n                        \"time_taken\": end_time - start_time\n                    })\n                except Exception as e:\n                    results.append({\n                        \"task_id\": task_id,\n                        \"sample_index\": len(results),\n                        \"error\": str(e)\n                    })\n            \n            with open(output_file, \"a\") as f:\n                for result in results:\n                    f.write(json.dumps(result) + \"\\n\")\n            \n            socket.send_json({\"action\": \"report_results\", \"results\": results})\n            response = socket.recv_json()\n            if response.get(\"status\") == \"ack\":\n                continue\n            else:\n                break\n        except Exception as e:\n            print(f\"Error processing task: {e}\")\n            break\n    \n    socket.close()\n    context.term()"
  },
  {
    "Task_id": 484,
    "Instruction": "Task Description: Implement a gRPC server in Python that handles network compute bridge requests using thread-safe queues for inter-process communication.\n\nClass Description: The implementation consists of two classes:\n1. NetworkComputeBridgeWorkerServicer - A gRPC servicer that processes incoming requests using thread-safe queues\n2. GRPCServer - Manages the gRPC server lifecycle and configuration\n\nAttributes:\n\nNetworkComputeBridgeWorkerServicer:\n- thread_input_queue: [Queue] - Queue for receiving incoming requests from other processes\n- thread_output_queue: [Queue] - Queue for sending responses back to other processes\n- _lock: [Lock] - Thread synchronization lock for queue operations\n\nGRPCServer:\n- port: [int] - Port number for the server to listen on\n- request_queue: [Queue] - Shared queue for incoming requests\n- response_queue: [Queue] - Shared queue for outgoing responses\n\nMethods:\n\nNetworkComputeBridgeWorkerServicer:\n- WorkerCompute(request, context) -> [network_compute_bridge_pb2.NetworkComputeResponse] - Processes compute requests by putting them in input queue and waiting for response from output queue\n- ListAvailableModels(request, context) -> [network_compute_bridge_pb2.ListAvailableModelsResponse] - Processes model listing requests by putting them in input queue and waiting for response from output queue\n\nGRPCServer:\n- start() -> [grpc.Server] - Initializes and starts the gRPC server with thread pool executor, binds it to the specified port, and registers the servicer",
    "Canonical_solution": "import grpc\nfrom concurrent import futures\nfrom multiprocessing import Lock, Queue\nimport bosdyn.api.network_compute_bridge_service_pb2_grpc as network_compute_bridge_service_pb2_grpc\nimport bosdyn.api.network_compute_bridge_pb2 as network_compute_bridge_pb2\n\nclass NetworkComputeBridgeWorkerServicer(network_compute_bridge_service_pb2_grpc.NetworkComputeBridgeWorkerServicer):\n    def __init__(self, thread_input_queue, thread_output_queue):\n        super(NetworkComputeBridgeWorkerServicer, self).__init__()\n        self.thread_input_queue = thread_input_queue\n        self.thread_output_queue = thread_output_queue\n        self._lock = Lock()\n\n    def WorkerCompute(self, request, context):\n        with self._lock:\n            self.thread_input_queue.put(request)\n            out_proto = self.thread_output_queue.get()\n        return out_proto\n\n    def ListAvailableModels(self, request, context):\n        with self._lock:\n            self.thread_input_queue.put(request)\n            out_proto = self.thread_output_queue.get()\n        return out_proto\n\nclass GRPCServer:\n    def __init__(self, port, request_queue, response_queue):\n        self.port = port\n        self.request_queue = request_queue\n        self.response_queue = response_queue\n\n    def start(self):\n        server = grpc.server(futures.ThreadPoolExecutor(max_workers=10))\n        network_compute_bridge_service_pb2_grpc.add_NetworkComputeBridgeWorkerServicer_to_server(\n            NetworkComputeBridgeWorkerServicer(self.request_queue, self.response_queue), server)\n        server.add_insecure_port(f'[::]:{self.port}')\n        server.start()\n        return server",
    "Code_level": "Class-level",
    "FSMID_for_test": 74,
    "right_result": "import grpc\nfrom concurrent import futures\nimport network_compute_bridge_pb2\nimport network_compute_bridge_pb2_grpc\nimport queue\nimport threading\n\nclass NetworkComputeBridgeWorkerServicer(network_compute_bridge_pb2_grpc.NetworkComputeBridgeWorkerServicer):\n    def __init__(self, thread_input_queue, thread_output_queue):\n        self.thread_input_queue = thread_input_queue\n        self.thread_output_queue = thread_output_queue\n        self._lock = threading.Lock()\n\n    def WorkerCompute(self, request, context):\n        with self._lock:\n            self.thread_input_queue.put(request)\n        response = self.thread_output_queue.get()\n        return response\n\n    def ListAvailableModels(self, request, context):\n        with self._lock:\n            self.thread_input_queue.put(request)\n        response = self.thread_output_queue.get()\n        return response\n\nclass GRPCServer:\n    def __init__(self, port):\n        self.port = port\n        self.request_queue = queue.Queue()\n        self.response_queue = queue.Queue()\n\n    def start(self):\n        server = grpc.server(futures.ThreadPoolExecutor(max_workers=10))\n        servicer = NetworkComputeBridgeWorkerServicer(self.request_queue, self.response_queue)\n        network_compute_bridge_pb2_grpc.add_NetworkComputeBridgeWorkerServicer_to_server(servicer, server)\n        server.add_insecure_port(f'[::]:{self.port}')\n        server.start()\n        print(f\"gRPC server is running on port {self.port}\")\n        server.wait_for_termination()"
  },
  {
    "Task_id": 485,
    "Instruction": "Task Description: Implement a gRPC server in Python that provides speech recognition and language processing services using gRPC for inter-process communication.\n\nClass Description: The implementation consists of two main classes: ApiService (which handles the actual service logic) and GrpcServer (which manages the server lifecycle).\n\nAttributes:\n\nApiService:\n- speech_model: [Any] - The model used for speech recognition\n- language_model: [Any] - The model used for language processing\n\nGrpcServer:\n- host: [str] - The host address to bind the server to\n- port: [str] - The port number to bind the server to\n- max_workers: [int] - Maximum number of worker threads in the thread pool\n- server: [grpc.Server] - The gRPC server instance\n\nMethods:\n\nApiService:\n- Speech(request: [SpeechRequest], context: [grpc.ServicerContext]) -> [SpeechResponse] - Processes speech recognition requests\n- Language(request: [LanguageRequest], context: [grpc.ServicerContext]) -> [TextResponse] - Processes language translation requests\n- All(request: [SpeechRequest], context: [grpc.ServicerContext]) -> [TextResponse] - Processes combined speech recognition and language translation\n- Stream(request_iterator: [Iterator[SpeechRequest]], context: [grpc.ServicerContext]) -> [Iterator[TextResponse]] - Handles streaming speech recognition and processing\n\nGrpcServer:\n- start(service: [ApiService]) -> [None] - Starts the gRPC server with the specified service and runs it indefinitely\n  - Input: service - An instance of ApiService to handle incoming requests\n  - Output: None (runs indefinitely until interrupted)",
    "Canonical_solution": "import grpc\nfrom concurrent import futures\nfrom assets.asrt_pb2_grpc import AsrtGrpcServiceServicer, add_AsrtGrpcServiceServicer_to_server\nfrom assets.asrt_pb2 import SpeechResponse, TextResponse\nimport time\n\n_ONE_DAY_IN_SECONDS = 60 * 60 * 24\n\nclass ApiService(AsrtGrpcServiceServicer):\n    def __init__(self, speech_model, language_model):\n        self.speech_model = speech_model\n        self.language_model = language_model\n\n    def Speech(self, request, context):\n        wav_data = request.wav_data\n        wav_samples = decode_wav_bytes(samples_data=wav_data.samples,\n                                     channels=wav_data.channels, byte_width=wav_data.byte_width)\n        result = self.speech_model.recognize_speech(wav_samples, wav_data.sample_rate)\n        return SpeechResponse(status_code=200000, status_message='',\n                            result_data=result)\n\n    def Language(self, request, context):\n        result = self.language_model.pinyin_to_text(list(request.pinyins))\n        return TextResponse(status_code=200000, status_message='',\n                          text_result=result)\n\n    def All(self, request, context):\n        wav_data = request.wav_data\n        wav_samples = decode_wav_bytes(samples_data=wav_data.samples,\n                                     channels=wav_data.channels, byte_width=wav_data.byte_width)\n        result_speech = self.speech_model.recognize_speech(wav_samples, wav_data.sample_rate)\n        result = self.language_model.pinyin_to_text(result_speech)\n        return TextResponse(status_code=200000, status_message='',\n                          text_result=result)\n\n    def Stream(self, request_iterator, context):\n        result = list()\n        tmp_result_last = list()\n        beam_size = 100\n\n        for request in request_iterator:\n            wav_data = request.wav_data\n            wav_samples = decode_wav_bytes(samples_data=wav_data.samples,\n                                         channels=wav_data.channels,\n                                         byte_width=wav_data.byte_width)\n            result_speech = self.speech_model.recognize_speech(wav_samples, wav_data.sample_rate)\n\n            for item_pinyin in result_speech:\n                tmp_result = self.language_model.pinyin_stream_decode(tmp_result_last, item_pinyin, beam_size)\n                if len(tmp_result) == 0 and len(tmp_result_last) > 0:\n                    result.append(tmp_result_last[0][0])\n                    yield TextResponse(status_code=200000, status_message='',\n                                   text_result=''.join(result))\n                    result = list()\n                    tmp_result = self.language_model.pinyin_stream_decode([], item_pinyin, beam_size)\n                tmp_result_last = tmp_result\n                yield TextResponse(status_code=206000, status_message='',\n                               text_result=''.join(tmp_result[0][0]))\n\n        if len(tmp_result_last) > 0:\n            result.append(tmp_result_last[0][0])\n            yield TextResponse(status_code=200000, status_message='',\n                           text_result=''.join(result))\n\nclass GrpcServer:\n    def __init__(self, host, port, max_workers=10):\n        self.host = host\n        self.port = port\n        self.max_workers = max_workers\n        self.server = grpc.server(futures.ThreadPoolExecutor(max_workers=self.max_workers))\n\n    def start(self, service):\n        add_AsrtGrpcServiceServicer_to_server(service, self.server)\n        self.server.add_insecure_port(''.join([self.host, ':', self.port]))\n        self.server.start()\n        try:\n            while True:\n                time.sleep(_ONE_DAY_IN_SECONDS)\n        except KeyboardInterrupt:\n            self.server.stop(0)",
    "Code_level": "Class-level",
    "FSMID_for_test": 74,
    "right_result": "import grpc\nfrom concurrent import futures\nimport speech_service_pb2\nimport speech_service_pb2_grpc\n\nclass ApiService:\n    def __init__(self, speech_model, language_model):\n        self.speech_model = speech_model\n        self.language_model = language_model\n\n    def Speech(self, request, context):\n        recognized_text = self.speech_model.process(request.audio)\n        return speech_service_pb2.SpeechResponse(text=recognized_text)\n\n    def Language(self, request, context):\n        translated_text = self.language_model.translate(request.text, request.target_language)\n        return speech_service_pb2.TextResponse(text=translated_text)\n\n    def All(self, request, context):\n        recognized_text = self.speech_model.process(request.audio)\n        translated_text = self.language_model.translate(recognized_text, request.target_language)\n        return speech_service_pb2.TextResponse(text=translated_text)\n\n    def Stream(self, request_iterator, context):\n        for request in request_iterator:\n            recognized_text = self.speech_model.process(request.audio)\n            translated_text = self.language_model.translate(recognized_text, request.target_language)\n            yield speech_service_pb2.TextResponse(text=translated_text)\n\nclass GrpcServer:\n    def __init__(self, host, port, max_workers):\n        self.host = host\n        self.port = port\n        self.max_workers = max_workers\n        self.server = None\n\n    def start(self, service):\n        self.server = grpc.server(futures.ThreadPoolExecutor(max_workers=self.max_workers))\n        speech_service_pb2_grpc.add_SpeechServiceServicer_to_server(service, self.server)\n        self.server.add_insecure_port(f\"{self.host}:{self.port}\")\n        self.server.start()\n        print(f\"gRPC server is running on {self.host}:{self.port}\")\n        try:\n            while True:\n                pass\n        except KeyboardInterrupt:\n            self.server.stop(0)"
  },
  {
    "Task_id": 486,
    "Instruction": "Task Description: Implement a gRPC server class that handles multiple protocols including health checks and service reflection, capable of serving JinaRPC and JinaSingleDataRequestRPC services.\n\nClass Description: MultiProtocolGateway is a class that sets up and manages a gRPC server with support for multiple services, health checks, and server reflection. It provides methods to start, run, and shutdown the server gracefully.\n\nAttributes:\n- grpc_port: int - The port number on which the gRPC server will listen\n- health_servicer: grpc_health.v1.health.HealthServicer - Handles health check requests for the services\n- grpc_server: grpc.aio.server - The asynchronous gRPC server instance\n\nMethods:\n- __init__(grpc_port: int) -> None - Initializes the MultiProtocolGateway with the specified gRPC port\n- _setup_grpc_server() -> None - Sets up the gRPC server with all required services (JinaRPC, JinaSingleDataRequestRPC), health checks, and reflection\n- run_server() -> None - Starts the gRPC server and keeps it running until termination\n- shutdown() -> None - Gracefully shuts down the gRPC server and health servicer",
    "Canonical_solution": "import grpc\nfrom grpc_health.v1 import health, health_pb2, health_pb2_grpc\nfrom grpc_reflection.v1alpha import reflection\nfrom jina.proto import jina_pb2, jina_pb2_grpc\nfrom jina.constants import __default_host__\n\nclass MultiProtocolGateway:\n    def __init__(self, grpc_port: int):\n        self.grpc_port = grpc_port\n        self.health_servicer = health.HealthServicer(experimental_non_blocking=True)\n\n    async def _setup_grpc_server(self):\n        self.grpc_server = grpc.aio.server()\n\n        jina_pb2_grpc.add_JinaRPCServicer_to_server(\n            self.streamer._streamer, self.grpc_server\n        )\n        jina_pb2_grpc.add_JinaSingleDataRequestRPCServicer_to_server(\n            self.streamer._streamer, self.grpc_server\n        )\n\n        service_names = (\n            jina_pb2.DESCRIPTOR.services_by_name['JinaRPC'].full_name,\n            jina_pb2.DESCRIPTOR.services_by_name['JinaSingleDataRequestRPC'].full_name,\n            reflection.SERVICE_NAME,\n        )\n        \n        health_pb2_grpc.add_HealthServicer_to_server(\n            self.health_servicer, self.grpc_server\n        )\n        for service in service_names:\n            self.health_servicer.set(service, health_pb2.HealthCheckResponse.SERVING)\n        reflection.enable_server_reflection(service_names, self.grpc_server)\n        self.grpc_server.add_insecure_port(f'{__default_host__}:{self.grpc_port}')\n        await self.grpc_server.start()\n\n    async def run_server(self):\n        await self.grpc_server.wait_for_termination()\n\n    async def shutdown(self):\n        await self.grpc_server.stop(0)\n        self.health_servicer.enter_graceful_shutdown()",
    "Code_level": "Class-level",
    "FSMID_for_test": 74,
    "right_result": "import grpc\nfrom concurrent import futures\nimport asyncio\nimport grpc_health.v1.health\nfrom jina.rpc import JinaRPC, JinaSingleDataRequestRPC\nfrom jina.proto import jina_pb2_grpc\n\nclass MultiProtocolGateway:\n    def __init__(self, grpc_port: int) -> None:\n        self.grpc_port = grpc_port\n        self.health_servicer = grpc_health.v1.health.HealthServicer()\n        self.grpc_server = grpc.aio.server(futures.ThreadPoolExecutor(max_workers=10))\n\n    async def _setup_grpc_server(self) -> None:\n        jina_rpc_service = JinaRPC()\n        jina_single_data_request_rpc_service = JinaSingleDataRequestRPC()\n\n        jina_pb2_grpc.add_JinaRPCServicer_to_server(jina_rpc_service, self.grpc_server)\n        jina_pb2_grpc.add_JinaSingleDataRequestRPCServicer_to_server(jina_single_data_request_rpc_service, self.grpc_server)\n\n        grpc_health.v1.add_HealthServicer_to_server(self.health_servicer, self.grpc_server)\n\n        # Enable server reflection\n        from grpc_reflection.v1alpha import server_reflection\n        server_reflection.enable_serverReflection(self.grpc_server)\n\n        self.grpc_server.add_insecure_port(f'[::]:{self.grpc_port}')\n        await self.grpc_server.start()\n\n    async def run_server(self) -> None:\n        await self._setup_grpc_server()\n        try:\n            await asyncio.Event().wait()\n        finally:\n            await self.shutdown()\n\n    async def shutdown(self) -> None:\n        if self.grpc_server:\n            await self.grpc_server.stop(grace=5)  # Graceful shutdown with 5 seconds timeout\n            self.grpc_server = None\n        if self.health_servicer:\n            self.health_servicer = None"
  },
  {
    "Task_id": 487,
    "Instruction": "Task Description: Create a gRPC server implementation in Python that handles E-Stop (Emergency Stop) functionality for robotic systems, including endpoint registration and check-in procedures with challenge-response verification.\n\nClass Description: The implementation consists of two classes:\n1. MockEstopServicer - Handles the actual gRPC service implementation for E-Stop functionality\n2. GRPCServer - Manages the gRPC server lifecycle and service registration\n\nAttributes:\n\nMockEstopServicer:\n- VALID_STOP_LEVEL: [int] - The valid stop level for E-Stop operations\n- NAME_FOR_ENDPOINT_UNKNOWN: [str] - Special endpoint name that triggers unknown endpoint status\n- NAME_FOR_SERVER_ERROR: [str] - Special endpoint name that triggers server error\n- STATUSES_THAT_DO_NOT_PROVIDE_CHALLENGE: [set] - Set of statuses that skip challenge generation\n- _rpc_delay: [int] - Artificial delay for RPC calls (for testing)\n- _challenge: [int] - Current challenge value for verification\n\nGRPCServer:\n- server: [grpc.Server] - The gRPC server instance\n\nMethods:\n\nMockEstopServicer:\n- __init__(rpc_delay: int = 0) -> None - Initializes the servicer with optional RPC delay\n- RegisterEstopEndpoint(request, context) -> None - Handles endpoint registration (stub implementation)\n- EstopCheckIn(request, context) -> bosdyn.api.estop_pb2.EstopCheckInResponse - Processes E-Stop check-in requests with challenge-response verification\n\nGRPCServer:\n- __init__() -> None - Initializes the gRPC server with thread pool executor\n- add_service(servicer: MockEstopServicer) -> None - Registers the E-Stop service with the server\n- start(port: int = 0) -> int - Starts the server on specified port (0 for auto-assigned) and returns bound port\n- stop() -> None - Stops the server gracefully",
    "Canonical_solution": "import grpc\nimport concurrent.futures\nimport bosdyn.api.estop_pb2\nimport bosdyn.api.estop_service_pb2_grpc\n\nclass MockEstopServicer(bosdyn.api.estop_service_pb2_grpc.EstopServiceServicer):\n    VALID_STOP_LEVEL = 1\n    NAME_FOR_ENDPOINT_UNKNOWN = 'mystery'\n    NAME_FOR_SERVER_ERROR = 'little-bobby-drop-tables'\n    STATUSES_THAT_DO_NOT_PROVIDE_CHALLENGE = \\\n        set([bosdyn.api.estop_pb2.EstopCheckInResponse.STATUS_UNKNOWN])\n\n    def __init__(self, rpc_delay=0):\n        super(MockEstopServicer, self).__init__()\n        self._rpc_delay = rpc_delay\n        self._challenge = 0\n\n    def RegisterEstopEndpoint(self, request, context):\n        pass\n\n    def EstopCheckIn(self, request, context):\n        resp = bosdyn.api.estop_pb2.EstopCheckInResponse()\n        resp.header.error.code = bosdyn.api.header_pb2.CommonError.CODE_OK\n        if request.endpoint.name == self.NAME_FOR_SERVER_ERROR:\n            resp.header.error.code = bosdyn.api.header_pb2.CommonError.CODE_INTERNAL_SERVER_ERROR\n        elif request.endpoint.name == self.NAME_FOR_ENDPOINT_UNKNOWN:\n            resp.status = resp.STATUS_ENDPOINT_UNKNOWN\n        else:\n            if not request.challenge:\n                resp.status = resp.STATUS_INCORRECT_CHALLENGE_RESPONSE\n            elif request.response != bosdyn.client.estop.response_from_challenge(request.challenge):\n                resp.status = resp.STATUS_INCORRECT_CHALLENGE_RESPONSE\n            else:\n                resp.status = resp.STATUS_OK\n        if resp.status not in self.STATUSES_THAT_DO_NOT_PROVIDE_CHALLENGE:\n            if request.challenge is not None:\n                self._challenge = request.challenge + 1\n            else:\n                self._challenge = 0\n            resp.challenge = self._challenge\n        return resp\n\nclass GRPCServer:\n    def __init__(self):\n        self.server = grpc.server(concurrent.futures.ThreadPoolExecutor(max_workers=10))\n\n    def add_service(self, servicer):\n        bosdyn.api.estop_service_pb2_grpc.add_EstopServiceServicer_to_server(servicer, self.server)\n\n    def start(self, port=0):\n        port = self.server.add_insecure_port(f'127.0.0.1:{port}')\n        self.server.start()\n        return port\n\n    def stop(self):\n        self.server.stop(0)",
    "Code_level": "Class-level",
    "FSMID_for_test": 74,
    "right_result": "import grpc\nimport bosdyn.api.estop_pb2 as estop_pb2\nimport bosdyn.api.estop_pb2_grpc as estop_pb2_grpc\nfrom concurrent import futures\nimport threading\n\nclass MockEstopServicer:\n    VALID_STOP_LEVEL = 1\n    NAME_FOR_ENDPOINT_UNKNOWN = \"endpoint_unknown\"\n    NAME_FOR_SERVER_ERROR = \"server_error\"\n    STATUSES_THAT_DO_NOT_PROVIDE_CHALLENGE = {0, 1}\n    _rpc_delay = 0\n    _challenge = 0\n\n    def __init__(self, rpc_delay: int = 0) -> None:\n        self._rpc_delay = rpc_delay\n        self._challenge = 0\n\n    def RegisterEstopEndpoint(self, request, context):\n        if request.endpoint_name == self.NAME_FOR_ENDPOINT_UNKNOWN:\n            context.set_code(grpc.StatusCode.UNKNOWN)\n            context.set_details(\"Unknown endpoint\")\n            return\n        if request.endpoint_name == self.NAME_FOR_SERVER_ERROR:\n            context.set_code(grpc.StatusCode.INTERNAL)\n            context.set_details(\"Server error\")\n            return\n        # Stub implementation for registration\n        context.set_code(grpc.StatusCode.OK)\n        context.set_details(\"Endpoint registered\")\n        return\n\n    def EstopCheckIn(self, request, context):\n        import time\n        time.sleep(self._rpc_delay)\n        if request.status not in self.STATUSES_THAT_DO_NOT_PROVIDE_CHALLENGE:\n            if request.challenge != self._challenge:\n                context.set_code(grpc.StatusCode.PERMISSION_DENIED)\n                context.set_details(\"Invalid challenge\")\n                return\n        response = estop_pb2.EstopCheckInResponse()\n        response.status = request.status\n        response.is_estopped = False\n        response.stop_level = self.VALID_STOP_LEVEL\n        return response\n\n\nclass GRPCServer:\n    def __init__(self) -> None:\n        self.server = grpc.server(futures.ThreadPoolExecutor(max_workers=10))\n        self.add_service(MockEstopServicer())\n\n    def add_service(self, servicer: MockEstopServicer) -> None:\n        estop_pb2_grpc.add_EstopServicer_to_server(servicer, self.server)\n\n    def start(self, port: int = 0) -> int:\n        server_port = port\n        if port == 0:\n            server_port = self.server.add_insecure_port('[::]:0')\n        self.server.start()\n        return server_port\n\n    def stop(self) -> None:\n        self.server.stop(0)"
  },
  {
    "Task_id": 488,
    "Instruction": "Task Description: Implement a gRPC server class in Python that handles multiple types of RPC calls (Call, Train, Index, Search, StreamCall) and manages concurrent requests using a thread pool. The server should integrate with a ZeroMQ client for message passing and provide proper context management for resource cleanup.\n\nClass Description: FrontendService is a gRPC server implementation that processes incoming gRPC requests and forwards them to a backend service via ZeroMQ. It handles concurrent requests, manages server lifecycle, and provides streaming capabilities.\n\nAttributes:\n\n- server: [grpc.Server] - The gRPC server instance handling incoming requests\n- bind_address: [str] - The address and port where the server listens (format \"host:port\")\n- _stop_event: [threading.Event] - Event object used to signal server shutdown\n- args: [Namespace/object] - Configuration arguments for server setup (max_concurrency, max_message_size, etc.)\n\nMethods:\n\n- __init__(args) -> [None] - Initializes the gRPC server with thread pool executor and configures message size limits\n  Input: args - Configuration object containing server parameters\n- __enter__() -> [FrontendService] - Starts the gRPC server and clears stop event (context manager entry)\n- __exit__(exc_type, exc_val, exc_tb) -> [None] - Stops the gRPC server and triggers cleanup (context manager exit)\n  Input: exc_type, exc_val, exc_tb - Exception information if any occurred\n- stop() -> [None] - Signals the server to stop by setting the stop event\n- join() -> [None] - Waits for the server to complete shutdown\n- _Servicer: [Nested class] - Handles actual gRPC method implementations\n  Methods:\n    - Call(request, context) -> [gnes_pb2.Response] - Processes standard RPC calls\n      Input: request - gRPC request message, context - gRPC context object\n      Output: Processed response message\n    - Train(request, context) -> [gnes_pb2.Response] - Handles training requests\n    - Index(request, context) -> [gnes_pb2.Response] - Handles indexing requests\n    - Search(request, context) -> [gnes_pb2.Response] - Handles search requests\n    - StreamCall(request_iterator, context) -> [Iterator[gnes_pb2.Response]] - Handles streaming RPC calls\n      Input: request_iterator - Iterator of incoming streaming requests\n      Output: Iterator of response messages\n    - ZmqContext: [Nested class] - Manages ZeroMQ client lifecycle\n      Methods:\n        - __init__(args) -> [None] - Initializes thread-local storage for ZMQ client\n        - __enter__() -> [ZmqClient] - Creates and returns a ZMQ client instance\n        - __exit__(exc_type, exc_value, exc_traceback) -> [None] - Cleans up ZMQ client resources",
    "Canonical_solution": "import grpc\nfrom concurrent.futures import ThreadPoolExecutor\nfrom ..proto import gnes_pb2_grpc, gnes_pb2\nfrom ..client.base import ZmqClient\nimport threading\n\nclass FrontendService:\n    def __init__(self, args):\n        self.server = grpc.server(\n            ThreadPoolExecutor(max_workers=args.max_concurrency),\n            options=[('grpc.max_send_message_length', args.max_message_size),\n                     ('grpc.max_receive_message_length', args.max_message_size)])\n        gnes_pb2_grpc.add_GnesRPCServicer_to_server(self._Servicer(args), self.server)\n        self.bind_address = '{0}:{1}'.format(args.grpc_host, args.grpc_port)\n        self.server.add_insecure_port(self.bind_address)\n        self._stop_event = threading.Event()\n\n    def __enter__(self):\n        self.server.start()\n        self._stop_event.clear()\n        return self\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        self.server.stop(None)\n        self.stop()\n\n    def stop(self):\n        self._stop_event.set()\n\n    def join(self):\n        self._stop_event.wait()\n\n    class _Servicer(gnes_pb2_grpc.GnesRPCServicer):\n        def __init__(self, args):\n            self.args = args\n            self.zmq_context = self.ZmqContext(args)\n            self.request_id_cnt = 0\n            self.send_recv_kwargs = dict(\n                check_version=self.args.check_version,\n                timeout=self.args.timeout,\n                squeeze_pb=self.args.squeeze_pb)\n            self.pending_request = 0\n\n        def Call(self, request, context):\n            with self.zmq_context as zmq_client:\n                zmq_client.send_message(self.add_envelope(request, zmq_client), **self.send_recv_kwargs)\n                return self.remove_envelope(zmq_client.recv_message(**self.send_recv_kwargs))\n\n        def Train(self, request, context):\n            return self.Call(request, context)\n\n        def Index(self, request, context):\n            return self.Call(request, context)\n\n        def Search(self, request, context):\n            return self.Call(request, context)\n\n        def StreamCall(self, request_iterator, context):\n            self.pending_request = 0\n\n            def get_response(num_recv, blocked=False):\n                for _ in range(num_recv):\n                    if blocked or zmq_client.receiver.poll(1):\n                        msg = zmq_client.recv_message(**self.send_recv_kwargs)\n                        self.pending_request -= 1\n                        yield self.remove_envelope(msg)\n\n                while zmq_client.receiver.poll(1):\n                    msg = zmq_client.recv_message(**self.send_recv_kwargs)\n                    self.pending_request -= 1\n                    yield self.remove_envelope(msg)\n\n            with self.zmq_context as zmq_client:\n                for request in request_iterator:\n                    num_recv = max(self.pending_request - self.args.max_pending_request, 1)\n                    yield from get_response(num_recv, num_recv > 1)\n                    zmq_client.send_message(self.add_envelope(request, zmq_client), **self.send_recv_kwargs)\n                    self.pending_request += 1\n\n                yield from get_response(self.pending_request, blocked=True)\n\n        class ZmqContext:\n            def __init__(self, args):\n                self.args = args\n                self.tlocal = threading.local()\n                self.tlocal.client = None\n\n            def __enter__(self):\n                client = ZmqClient(self.args)\n                self.tlocal.client = client\n                return client\n\n            def __exit__(self, exc_type, exc_value, exc_traceback):\n                self.tlocal.client.close()\n                self.tlocal.client = None",
    "Code_level": "Class-level",
    "FSMID_for_test": 74,
    "right_result": "import grpc\nimport threading\nimport zmq\nfrom concurrent.futures import ThreadPoolExecutor\nfrom contextlib import contextmanager\nfrom typing import Iterator, Optional\n\nclass FrontendService:\n    def __init__(self, args):\n        self.args = args\n        self.server = None\n        self.bind_address = args.bind_address\n        self._stop_event = threading.Event()\n        self.executor = ThreadPoolExecutor(max_workers=args.max_concurrency)\n        grpc.options().configure_max_message_length(args.max_message_size)\n\n    def __enter__(self):\n        self.server = grpc.server(self.executor, options=grpc.options())\n        self._Servicer().add_to_server(self.server, self.server)\n        self.server.add_insecure_port(self.bind_address)\n        self.server.start()\n        self._stop_event.clear()\n        return self\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        self.stop()\n        self.join()\n\n    def stop(self):\n        self._stop_event.set()\n        if self.server:\n            self.server.stop(0)\n\n    def join(self):\n        self.executor.shutdown(wait=True)\n\n    class _Servicer:\n        def __init__(self):\n            self.zmq_client = self.ZmqContext()\n\n        def add_to_server(self, server, unused):\n            pass\n\n        def Call(self, request, context):\n            with self.zmq_client:\n                response = self.zmq_client.send_request(request)\n            return response\n\n        def Train(self, request, context):\n            with self.zmq_client:\n                response = self.zmq_client.send_request(request)\n            return response\n\n        def Index(self, request, context):\n            with self.zmq_context:\n                response = self.zmq_client.send_request(request)\n            return response\n\n        def Search(self, request, context):\n            with self.zmq_client:\n                response = self.zmq_client.send_request(request)\n            return response\n\n        def StreamCall(self, request_iterator, context):\n            with self.zmq_client:\n                responses = self.zmq_client.stream_requests(request_iterator)\n            return responses\n\n        class ZmqContext:\n            def __init__(self):\n                self.context = zmq.Context()\n                self.socket = self.context.socket(zmq.REQ)\n                self.socket.connect(\"tcp://localhost:5555\")\n\n            def __enter__(self):\n                return self\n\n            def __exit__(self, exc_type, exc_value, exc_traceback):\n                self.socket.close()\n                self.context.term()\n\n            def send_request(self, request):\n                self.socket.send_pyobj(request)\n                return self.socket.recv_pyobj()\n\n            def stream_requests(self, request_iterator):\n                for request in request_iterator:\n                    self.socket.send_pyobj(request)\n                    yield self.socket.recv_pyobj()"
  },
  {
    "Task_id": 489,
    "Instruction": "Task Description: Implement a gRPC server in Python that handles model inference requests, supports both single and streaming responses, and provides graceful termination capabilities.\n\nClass Description: ModelResponse is a gRPC servicer class that implements model inference services. It manages request processing, response generation, and server lifecycle events.\n\nAttributes:\n- _stop_event: [threading.Event] - Event flag for server termination control\n- inference_pipeline: [AsyncPipeline] - Pipeline for handling asynchronous inference requests\n- method_name_to_task: [Dict[str, str]] - Mapping between gRPC method names and task types\n- lock: [threading.Lock] - Thread synchronization primitive for concurrent access control\n\nMethods:\n- __init__: [Name](async_pipeline: AsyncPipeline = None) -> None - Initializes the servicer with an optional async pipeline\n- Terminate: [Name](request: google.protobuf.Empty, context: grpc.ServicerContext) -> google.protobuf.Empty - Signals server to stop processing new requests\n- get_stop_event: [Name]() -> threading.Event - Returns the stop event for server control\n- GeneratorReply: [Name](request: ModelRequest, context: grpc.ServicerContext) -> ModelResponse - Handles batch inference requests and returns a single response\n- GeneratorReplyStream: [Name](request: ModelRequest, context: grpc.ServicerContext) -> Iterator[ModelResponse] - Handles streaming inference requests and yields multiple responses\n- _get_task_methods: [Name](method_name: str) -> Dict[str, TaskMethods] - Retrieves task-specific methods for request processing\n\nFunction Description: _do_serve sets up and runs the gRPC server with specified configuration and service implementation.\n\nInput:\n- service_impl: [ModelResponse] - The service implementation instance\n- port: [int] - Port number for server binding\n- interceptors: [List[grpc.ServerInterceptor]] - Optional list of gRPC interceptors\n\nOutput: None (runs the server until termination signal is received)",
    "Canonical_solution": "import grpc\nfrom concurrent import futures\nfrom typing import Dict\nimport threading\nfrom google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2\nfrom mii.grpc_related.proto import modelresponse_pb2_grpc\nfrom mii.constants import LB_MAX_WORKER_THREADS, GRPC_MAX_MSG_SIZE, SERVER_SHUTDOWN_TIMEOUT\n\nclass ModelResponse(modelresponse_pb2_grpc.ModelResponseServicer):\n    def __init__(self, async_pipeline=None):\n        self._stop_event = threading.Event()\n        self.inference_pipeline = async_pipeline\n        self.method_name_to_task = {m.method: t for t, m in TASK_METHODS_DICT.items()}\n        self.lock = threading.Lock()\n\n    def Terminate(self, request, context):\n        self._stop_event.set()\n        return google_dot_protobuf_dot_empty__pb2.Empty()\n\n    def get_stop_event(self):\n        return self._stop_event\n\n    def GeneratorReply(self, request, context):\n        task_methods = self._get_task_methods(\"GeneratorReply\")\n        prompts, kwargs = task_methods.unpack_request_from_proto(request)\n        uids_put_order, uids_running, uids_complete_order, responses = [], [], [], []\n\n        try:\n            for p in prompts:\n                request_kwargs = kwargs.copy()\n                uid = self.inference_pipeline.put_request(p, request_kwargs)\n                uids_put_order.append(uid)\n                uids_running.append(uid)\n\n            while uids_running:\n                uid, response = self.inference_pipeline.get_response()\n                if uid == -1:\n                    uid = uids_running[0]\n                responses.append(response)\n                self.inference_pipeline.flush_uid(uid)\n                uids_complete_order.append(uids_put_order.index(uid))\n                uids_running.remove(uid)\n\n            responses = [\n                r for idx,\n                r in sorted(zip(uids_complete_order,\n                                responses),\n                            key=lambda pair: pair[0])\n            ]\n            return task_methods.pack_response_to_proto(responses)\n        finally:\n            [self.inference_pipeline.flush_uid(uid) for uid in uids_running]\n\n    def GeneratorReplyStream(self, request, context):\n        task_methods = self._get_task_methods(\"GeneratorReply\")\n        prompts, kwargs = task_methods.unpack_request_from_proto(request)\n        uid = self.inference_pipeline.put_request(prompts[0], kwargs)\n\n        while True:\n            response_uid, r = self.inference_pipeline.get_response()\n            assert uid == response_uid, \"uid mismatch\"\n            done = r.finish_reason != GenerationFinishReason.NONE\n            response = task_methods.pack_response_to_proto([r])\n            yield response\n            if done:\n                break\n\n        self.inference_pipeline.flush_uid(uid)\n\n    def _get_task_methods(self, method_name: str) -> Dict[str, TaskMethods]:\n        if method_name not in self.method_name_to_task:\n            raise ValueError(f\"unknown method: {method_name}\")\n\n        task = self.method_name_to_task[method_name]\n        if task not in TASK_METHODS_DICT:\n            raise ValueError(f\"unknown task: {task}\")\n\n        return TASK_METHODS_DICT[task]\n\ndef _do_serve(service_impl, port, interceptors=[]):\n    stop_event = service_impl.get_stop_event()\n    server = grpc.server(\n        futures.ThreadPoolExecutor(max_workers=LB_MAX_WORKER_THREADS),\n        interceptors=interceptors,\n        options=[\n            (\"grpc.max_send_message_length\", GRPC_MAX_MSG_SIZE),\n            (\"grpc.max_receive_message_length\", GRPC_MAX_MSG_SIZE)\n        ]\n    )\n    modelresponse_pb2_grpc.add_ModelResponseServicer_to_server(service_impl, server)\n    server.add_insecure_port(f\"[::]:{port}\")\n    server.start()\n    stop_event.wait()\n    server.stop(SERVER_SHUTDOWN_TIMEOUT)",
    "Code_level": "Class-level",
    "FSMID_for_test": 74,
    "right_result": "import threading\nimport grpc\nfrom concurrent import futures\nfrom google.protobuf.empty import Empty\nfrom typing import Dict, Iterator, List, Optional, Any\nimport asyncio\n\nclass ModelResponse(grpc.Service):\n    def __init__(self, async_pipeline: AsyncPipeline = None):\n        self._stop_event = threading.Event()\n        self.inference_pipeline = async_pipeline or AsyncPipeline()\n        self.method_name_to_task = {\n            \"GeneratorReply\": \"batch\",\n            \"GeneratorReplyStream\": \"stream\"\n        }\n        self.lock = threading.Lock()\n\n    def Terminate(self, request: Empty, context: grpc.ServicerContext) -> Empty:\n        with self.lock:\n            self._stop_event.set()\n        return Empty()\n\n    def get_stop_event(self) -> threading.Event:\n        return self._stop_event\n\n    def GeneratorReply(self, request: ModelRequest, context: grpc.ServicerContext) -> ModelResponse:\n        if self._stop_event.is_set():\n            context.abort(grpc.StatusCode.CANCELLED, \"Server is shutting down\")\n        try:\n            result = self.inference_pipeline.process_batch(request)\n            return ModelResponse(result)\n        except Exception as e:\n            context.abort(grpc.StatusCode.INTERNAL, str(e))\n            return ModelResponse()\n\n    def GeneratorReplyStream(self, request: ModelRequest, context: grpc.ServicerContext) -> Iterator[ModelResponse]:\n        if self._stop_event.is_set():\n            context.abort(grpc.StatusCode.CANCELLED, \"Server is shutting down\")\n        try:\n            for response in self.inference_pipeline.process_stream(request):\n                yield response\n        except Exception as e:\n            context.abort(grpc.StatusCode.INTERNAL, str(e))\n\n    def _get_task_methods(self, method_name: str) -> Dict[str, TaskMethods]:\n        return self.method_name_to_task.get(method_name, {})\n\ndef _do_serve(service_impl: ModelResponse, port: int, interceptors: List[grpc.ServerInterceptor] = []) -> None:\n    server = grpc.server(futures.ThreadPoolExecutor(max_workers=10), interceptors=interceptors)\n    service_impl.add_to_server(server, \"ModelService\")\n    server.add_insecure_port(f\"[::]:{port}\")\n    server.start()\n    print(f\"Server started on port {port}\")\n    try:\n        while not service_impl.get_stop_event().is_set():\n            service_impl.get_stop_event().wait(1)\n    except KeyboardInterrupt:\n        pass\n    finally:\n        server.stop(0)"
  },
  {
    "Task_id": 49,
    "Instruction": "Task Description: Implement an asynchronous HTTP client for making secure API requests with payload validation and error handling.\n\nClass Description: ExternalActionsRequester is a class designed to handle secure asynchronous HTTP requests to an external API endpoint. It includes payload signing, request sending, and response validation capabilities.\n\nAttributes:\n- url: str - The target URL for API requests\n\nMethods:\n- __init__(url: str) -> None - Initializes the requester with the target URL\n- send_request(payload: Dict[str, Any], signature_secret: str, additional_payload_values: Dict[str, Any] = {}, additional_headers: Dict[str, str] = {}, transport: httpx.AsyncHTTPTransport = httpx.AsyncHTTPTransport(retries=2)) -> ExternalActionResponse - Sends an asynchronous POST request with signed payload and handles response/errors\n- _encode_payload(payload: bytes, signature_secret: str) -> str - Creates a HMAC-SHA256 signature for the payload\n- _validate_response(response: Dict[str, Any]) -> ExternalActionResponse - Validates and parses the API response into a structured format",
    "Canonical_solution": "import base64\nimport hashlib\nimport hmac\nimport json\nfrom typing import Any, Dict, Optional\nimport httpx\nfrom pydantic.v1 import BaseModel\n\nclass ExternalActionResponse(BaseModel):\n    result: dict\n    success: bool\n    agent_message: Optional[str] = None\n\nclass ExternalActionsRequester:\n    def __init__(self, url: str) -> None:\n        self.url = url\n\n    async def send_request(\n        self,\n        payload: Dict[str, Any],\n        signature_secret: str,\n        additional_payload_values: Dict[str, Any] = {},\n        additional_headers: Dict[str, str] = {},\n        transport: httpx.AsyncHTTPTransport = httpx.AsyncHTTPTransport(retries=2),\n    ) -> ExternalActionResponse:\n        encoded_payload = json.dumps({\"payload\": payload} | additional_payload_values).encode(\"utf-8\")\n        headers = {\n            \"Accept\": \"application/json\",\n            \"Content-Type\": \"application/json\",\n            \"x-vocode-signature\": self._encode_payload(encoded_payload, signature_secret),\n            **additional_headers,\n        }\n\n        async with httpx.AsyncClient(\n            headers=headers,\n            transport=transport,\n            timeout=10,\n        ) as client:\n            try:\n                response = await client.post(self.url, content=encoded_payload)\n                response.raise_for_status()\n                data = response.json()\n                return self._validate_response(data)\n            except httpx.HTTPStatusError as e:\n                if e.response.status_code == 401:\n                    return ExternalActionResponse(result={\"info\": \"Unauthorized\"}, success=False)\n                elif e.response.status_code == 403:\n                    return ExternalActionResponse(result={\"info\": \"Forbidden\"}, success=False)\n                elif 400 <= e.response.status_code < 500:\n                    return ExternalActionResponse(result={\"info\": \"Client error\"}, success=False)\n                elif e.response.status_code >= 500:\n                    return ExternalActionResponse(result={\"info\": \"Server error\"}, success=False)\n                else:\n                    raise e\n\n    def _encode_payload(self, payload: bytes, signature_secret: str) -> str:\n        signature_as_bytes = base64.b64decode(signature_secret)\n        digest = hmac.new(signature_as_bytes, payload, hashlib.sha256).digest()\n        return base64.b64encode(digest).decode()\n\n    def _validate_response(self, response: Dict[str, Any]) -> ExternalActionResponse:\n        if \"result\" not in response:\n            raise ValueError(\"Invalid response format: missing 'result'\")\n        if not isinstance(response[\"result\"], dict):\n            raise ValueError(\"Invalid response format: 'result' must be a dict\")\n        if \"agent_message\" in response and not isinstance(response[\"agent_message\"], str):\n            raise ValueError(\"Invalid response format: 'agent_message' must be a string\")\n        return ExternalActionResponse(\n            result=response[\"result\"],\n            agent_message=response.get(\"agent_message\"),\n            success=True,\n        )",
    "Code_level": "Class-level",
    "FSMID_for_test": 59,
    "right_result": "import httpx\nfrom typing import Dict, Any, Optional\nimport hmac\nimport hashlib\nimport json\n\nclass ExternalActionResponse:\n    def __init__(self, status: int, data: Dict[str, Any], error: Optional[str] = None):\n        self.status = status\n        self.data = data\n        self.error = error\n\nclass ExternalActionsRequester:\n    def __init__(self, url: str) -> None:\n        self.url = url\n\n    async def send_request(self, payload: Dict[str, Any], signature_secret: str, additional_payload_values: Dict[str, Any] = {}, additional_headers: Dict[str, str] = {}, transport: httpx.AsyncHTTPTransport = httpx.AsyncHTTPTransport(retries=2)) -> ExternalActionResponse:\n        combined_payload = {**payload, **additional_payload_values}\n        encoded_payload = json.dumps(combined_payload).encode('utf-8')\n        signature = self._encode_payload(encoded_payload, signature_secret)\n        headers = {\n            'Content-Type': 'application/json',\n            'Authorization': f'HMAC-SHA256 {signature}'\n        }\n        headers.update(additional_headers)\n        async with httpx.AsyncClient(transport=transport) as client:\n            try:\n                response = await client.post(self.url, json=combined_payload, headers=headers)\n                return self._validate_response(response.json())\n            except httpx.RequestError as e:\n                return ExternalActionResponse(status=500, data={}, error=str(e))\n\n    def _encode_payload(self, payload: bytes, signature_secret: str) -> str:\n        signature = hmac.new(signature_secret.encode('utf-8'), payload, hashlib.sha256).hexdigest()\n        return signature\n\n    def _validate_response(self, response: Dict[str, Any]) -> ExternalActionResponse:\n        if 'status' in response and 'data' in response:\n            return ExternalActionResponse(status=response['status'], data=response['data'])\n        else:\n            return ExternalActionResponse(status=400, data={}, error=\"Invalid response format\")"
  },
  {
    "Task_id": 491,
    "Instruction": "Task Description: Implement a gRPC server in Python that provides session validation functionality using the grpcio library. The server should handle concurrent requests and validate sessions based on a specific mathematical operation between user_id and session_id.\n\nClass Description: ValidateServiceService is a gRPC service implementation that validates user sessions. It inherits from the generated LoginServiceServicer class and provides methods for session validation and server management.\n\nAttributes:\n- None explicitly defined (inherits attributes from parent class)\n\nMethods:\n- Validate(request, context) -> pb2.ValidateResponse: Validates a user session by performing a mathematical operation (XOR followed by modulo 23) on the user_id and session_id from the request. Returns a ValidateResponse with a boolean result.\n  Input: \n    - request: pb2.ValidateRequest - Contains user_id and session_id to validate\n    - context: grpc.ServicerContext - gRPC context object\n  Output: pb2.ValidateResponse - Contains validation result (True/False)\n\n- serve(port, max_workers) -> None: Starts and runs the gRPC server on the specified port with the given number of worker threads.\n  Input:\n    - port: str (default='50051') - Port number to bind the server to\n    - max_workers: int (default=10) - Maximum number of worker threads\n  Output: None (runs indefinitely until terminated)",
    "Canonical_solution": "import grpc\nfrom concurrent import futures\nimport validate_session_pb2_grpc as pb2_grpc\nimport validate_session_pb2 as pb2\n\nclass ValidateServiceService(pb2_grpc.LoginServiceServicer):\n    def __init__(self, *args, **kwargs):\n        pass\n\n    def Validate(self, request, context):\n        return pb2.ValidateResponse(result=((request.user_id ^ request.session_id) % 23 == 0))\n\n    def serve(self, port='50051', max_workers=10):\n        server = grpc.server(futures.ThreadPoolExecutor(max_workers=max_workers))\n        pb2_grpc.add_LoginServiceServicer_to_server(self, server)\n        server.add_insecure_port(f'[::]:{port}')\n        server.start()\n        server.wait_for_termination()",
    "Code_level": "Class-level",
    "FSMID_for_test": 74,
    "right_result": "import grpc\nfrom concurrent import futures\nimport time\nimport logging\nimport sys\nimport threading\nimport Validate_pb2 as pb2\nimport Validate_pb2_grpc\n\nclass ValidateServiceServicer(pb2.LoginServiceServicer):\n    def Validate(self, request, context):\n        user_id = request.user_id\n        session_id = request.session_id\n        result = (user_id ^ session_id) % 23\n        return pb2.ValidateResponse(valid=result != 0)\n\n    def serve(self, port='50051', max_workers=10):\n        server = grpc.server(futures.ThreadPoolExecutor(max_workers=max_workers))\n        pb2.add_LoginServiceServicer_to_server(self, server)\n        server.add_insecure_port(f'[::]:{port}')\n        server.start()\n        print(f\"Server started, listening on {port}\")\n        try:\n            while True:\n                time.sleep(86400)\n        except KeyboardInterrupt:\n            server.stop(0)\n\nif __name__ == '__main__':\n    logging.basicConfig()\n    server = ValidateServiceServicer()\n    server.serve()"
  },
  {
    "Task_id": 492,
    "Instruction": "Task Description: Implement a gRPC server in Python that handles various model inference requests concurrently, with thread-safe operations and graceful shutdown capabilities.\n\nClass Description: The GRPCServer class encapsulates a gRPC server implementation that manages multiple model inference services. It provides concurrent request handling, message size configuration, and proper shutdown mechanisms.\n\nAttributes:\n- server: [grpc.Server] - The gRPC server instance that handles incoming requests\n- stop_event: [threading.Event] - Event flag used to signal server termination\n\nMethods:\n- __init__: [Name](service_impl: [ModelResponseServicer], port: [int]) -> [None] - Initializes the gRPC server with thread pool executor, message size limits, and binds it to the specified port\n- start: [Name]() -> [None] - Starts the server and waits for termination signal before shutting down gracefully\n\nClass Description: The ModelResponseServicer class implements the actual gRPC service methods for various model inference tasks, providing thread-safe operation through locking mechanisms.\n\nAttributes:\n- _stop_event: [threading.Event] - Event flag used to signal service termination\n- inference_pipeline: [object] - The underlying inference processing pipeline\n- lock: [threading.Lock] - Lock for thread-safe operations\n\nMethods:\n- __init__: [Name](inference_pipeline: [object]) -> [None] - Initializes the servicer with inference pipeline and synchronization primitives\n- Terminate: [Name](request: [google.protobuf.Empty], context: [grpc.ServicerContext]) -> [google.protobuf.Empty] - Signals the server to terminate\n- get_stop_event: [Name]() -> [threading.Event] - Returns the stop event for server control\n- _run_inference: [Name](method_name: [str], request_proto: [object]) -> [object] - Internal thread-safe method for processing inference requests\n- GeneratorReply: [Name](request: [object], context: [grpc.ServicerContext]) -> [object] - Handles generator model requests\n- Txt2ImgReply: [Name](request: [object], context: [grpc.ServicerContext]) -> [object] - Handles text-to-image model requests\n- ClassificationReply: [Name](request: [object], context: [grpc.ServicerContext]) -> [object] - Handles classification model requests\n- QuestionAndAnswerReply: [Name](request: [object], context: [grpc.ServicerContext]) -> [object] - Handles Q&A model requests\n- FillMaskReply: [Name](request: [object], context: [grpc.ServicerContext]) -> [object] - Handles fill-mask model requests\n- TokenClassificationReply: [Name](request: [object], context: [grpc.ServicerContext]) -> [object] - Handles token classification requests\n- ZeroShotImgClassificationReply: [Name](request: [object], context: [grpc.ServicerContext]) -> [object] - Handles zero-shot image classification\n- InpaintingReply: [Name](request: [object], context: [grpc.ServicerContext]) -> [object] - Handles image inpainting requests",
    "Canonical_solution": "import grpc\nfrom concurrent import futures\nfrom google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2\nfrom .proto import legacymodelresponse_pb2_grpc as modelresponse_pb2_grpc\nimport threading\nfrom mii.legacy.constants import (\n    GRPC_MAX_MSG_SIZE,\n    LB_MAX_WORKER_THREADS,\n    SERVER_SHUTDOWN_TIMEOUT\n)\n\nclass ModelResponseServicer(modelresponse_pb2_grpc.ModelResponseServicer):\n    def __init__(self, inference_pipeline):\n        self._stop_event = threading.Event()\n        self.inference_pipeline = inference_pipeline\n        self.lock = threading.Lock()\n\n    def Terminate(self, request, context):\n        self._stop_event.set()\n        return google_dot_protobuf_dot_empty__pb2.Empty()\n\n    def get_stop_event(self):\n        return self._stop_event\n\n    def _run_inference(self, method_name, request_proto):\n        with self.lock:\n            response = self.inference_pipeline.process_request(method_name, request_proto)\n        return response\n\n    def GeneratorReply(self, request, context):\n        return self._run_inference(\"GeneratorReply\", request)\n\n    def Txt2ImgReply(self, request, context):\n        return self._run_inference(\"Txt2ImgReply\", request)\n\n    def ClassificationReply(self, request, context):\n        return self._run_inference(\"ClassificationReply\", request)\n\n    def QuestionAndAnswerReply(self, request, context):\n        return self._run_inference(\"QuestionAndAnswerReply\", request)\n\n    def FillMaskReply(self, request, context):\n        return self._run_inference(\"FillMaskReply\", request)\n\n    def TokenClassificationReply(self, request, context):\n        return self._run_inference(\"TokenClassificationReply\", request)\n\n    def ZeroShotImgClassificationReply(self, request, context):\n        return self._run_inference(\"ZeroShotImgClassificationReply\", request)\n\n    def InpaintingReply(self, request, context):\n        return self._run_inference(\"InpaintingReply\", request)\n\nclass GRPCServer:\n    def __init__(self, service_impl, port):\n        self.server = grpc.server(\n            futures.ThreadPoolExecutor(max_workers=LB_MAX_WORKER_THREADS),\n            options=[\n                (\"grpc.max_send_message_length\", GRPC_MAX_MSG_SIZE),\n                (\"grpc.max_receive_message_length\", GRPC_MAX_MSG_SIZE),\n            ]\n        )\n        modelresponse_pb2_grpc.add_ModelResponseServicer_to_server(service_impl, self.server)\n        self.server.add_insecure_port(f\"[::]:{port}\")\n        self.stop_event = service_impl.get_stop_event()\n\n    def start(self):\n        self.server.start()\n        self.stop_event.wait()\n        self.server.stop(SERVER_SHUTDOWN_TIMEOUT)",
    "Code_level": "Class-level",
    "FSMID_for_test": 74,
    "right_result": "import grpc\nimport threading\nimport concurrent.futures\nfrom google.protobuf import empty_pb2 as empty\nfrom your_proto import model_service_pb2_grpc\n\nclass ModelResponseServicer(model_service_pb2_grpc.ModelServiceServicer):\n    def __init__(self, inference_pipeline):\n        self._stop_event = threading.Event()\n        self.inference_pipeline = inference_pipeline\n        self.lock = threading.Lock()\n\n    def Terminate(self, request, context):\n        self._stop_event.set()\n        return empty.Empty()\n\n    def get_stop_event(self):\n        return self._stop_event\n\n    def _run_inference(self, method_name, request_proto):\n        with self.lock:\n            if self._stop_event.is_set():\n                raise Exception(\"Server is shutting down\")\n            result = getattr(self.inference_pipeline, method_name)(request_proto)\n            return result\n\n    def GeneratorReply(self, request, context):\n        result = self._run_inference(\"generator\", request)\n        yield result\n\n    def Txt2ImgReply(self, request, context):\n        result = self._run_inference(\"txt2img\", request)\n        yield result\n\n    def ClassificationReply(self, request, context):\n        result = self._run_inference(\"classification\", request)\n        yield result\n\n    def QuestionAndAnswerReply(self, request, context):\n        result = self._run_inference(\"question_and_answer\", request)\n        yield result\n\n    def FillMaskReply(self, request, context):\n        result = self._run_inference(\"fill_mask\", request)\n        yield result\n\n    def TokenClassificationReply(self, request, context):\n        result = self._run_inference(\"token_classification\", request)\n        yield result\n\n    def ZeroShotImgClassificationReply(self, request, context):\n        result = self._run_inference(\"zero_shot_img_classification\", request)\n        yield result\n\n    def InpaintingReply(self, request, context):\n        result = self._run_inference(\"inpainting\", request)\n        yield result\n\nclass GRPCServer:\n    def __init__(self, service_impl, port):\n        self.server = grpc.server(concurrent.futures.ThreadPoolExecutor(max_workers=10))\n        model_service_pb2_grpc.add_ModelServiceServicer_to_server(service_impl, self.server)\n        self.server.add_insecure_port(f'[::]:{port}')\n        self.stop_event = threading.Event()\n\n    def start(self):\n        self.server.start()\n        print(f\"gRPC server started on port {self.server.port}\")\n        try:\n            while not self.stop_event.is_set():\n                self.stop_event.wait(1)\n        except KeyboardInterrupt:\n            pass\n        self.stop_event.set()\n        self.server.stop(0)"
  },
  {
    "Task_id": 494,
    "Instruction": "Task Description: Implement a gRPC server class in Python that can handle concurrent requests and manage the server lifecycle (start, run, wait, and stop).\n\nClass Description: The GRPCServer class is responsible for creating and managing a gRPC server instance. It initializes the server with a thread pool executor for handling concurrent requests, binds the server to a specified host and port, and provides methods to start, run, wait for termination, and stop the server.\n\nAttributes:\n- _server: grpc.Server - The gRPC server instance that handles incoming requests.\n\nMethods:\n- __init__(api_service: 'APIService', max_workers: int = 20) -> None - Initializes the gRPC server with a thread pool executor and binds the API service implementation to the server.\n- start(host: str, port: int) -> None - Starts the gRPC server by binding it to the specified host and port.\n- run(host: str, port: int) -> None - Combines the start and wait methods to run the server indefinitely.\n- wait() -> None - Blocks the current thread until the server is terminated.\n- stop() -> None - Stops the gRPC server gracefully.",
    "Canonical_solution": "import typing as T\nimport inspect\nimport traceback\nfrom concurrent import futures\nimport grpc\nfrom towhee.serve.io import JSON, TEXT, BYTES, NDARRAY\nfrom towhee.serve.api_service import RouterConfig\nfrom towhee.utils.log import engine_log\n\nclass GRPCServer:\n    def __init__(self, api_service: 'APIService', max_workers: int = 20):\n        self._server = grpc.server(futures.ThreadPoolExecutor(max_workers=max_workers))\n        service_pb2_grpc.add_PipelineServicesServicer_to_server(_PipelineImpl(api_service), self._server)\n\n    def start(self, host: str, port: int):\n        uri = str(host) + ':' + str(port)\n        self._server.add_insecure_port(uri)\n        self._server.start()\n        engine_log.info('Start grpc server at %s.', uri)\n\n    def run(self, host: str, port: int):\n        self.start(host, port)\n        self.wait()\n\n    def wait(self):\n        self._server.wait_for_termination()\n\n    def stop(self):\n        self._server.stop(None)",
    "Code_level": "Class-level",
    "FSMID_for_test": 74,
    "right_result": "import grpc\nfrom concurrent import futures\nimport threading\n\nclass GRPCServer:\n    def __init__(self, api_service, max_workers=20):\n        self._server = grpc.server(futures.ThreadPoolExecutor(max_workers=max_workers))\n        api_service.add_to_server(self._server)\n\n    def start(self, host, port):\n        self._server.add_insecure_port(f\"{host}:{port}\")\n\n    def run(self, host, port):\n        self.start(host, port)\n        self.wait()\n\n    def wait(self):\n        self._server.wait_for_termination()\n\n    def stop(self):\n        self._server.stop(0)"
  },
  {
    "Task_id": 496,
    "Instruction": "Task Description: Create a gRPC server in Python that can handle multiple versions of a service concurrently, with support for server reflection and interceptors.\n\nFunction Description: The `serve()` function initializes and starts two gRPC servers on different ports. The first server handles versions 1 and 2 of the Greeter service, while the second server handles version 3 with reflection enabled. Both servers use thread pool executors for concurrency and share the same interceptors for request logging.\n\nInput: None (The function takes no parameters)\n\nOutput: None (The function doesn't return anything but starts servers that run indefinitely)\n\nNote: The function uses threading.Event().wait() to keep the servers running indefinitely. The servers are configured with:\n1. ThreadPoolExecutor with 10 workers for concurrent request handling\n2. LoggingInterceptor for request logging\n3. Insecure ports (50051 and 50052) for communication\n4. Different service versions (v1, v2 on port 50051; v3 with reflection on port 50052)",
    "Canonical_solution": "import logging\nimport threading\nfrom concurrent import futures\nimport grpc\nimport helloworld_v1_precompiled_pb2_grpc as helloworld_pb2_grpc_v1\nimport helloworld_v2_compiled_pb2_grpc as helloworld_pb2_grpc_v2\nimport helloworld_v3_reflected_pb2_grpc as helloworld_pb2_grpc_v3\nfrom grpc_interceptor import ServerInterceptor\nfrom grpc_reflection.v1alpha import reflection\n\ndef serve():\n    interceptors = [LoggingInterceptor()]\n    executor = futures.ThreadPoolExecutor(max_workers=10)\n\n    # One server which exposes these two\n    server = grpc.server(\n        executor,\n        interceptors=interceptors,\n    )\n    helloworld_pb2_grpc_v1.add_GreeterServicer_to_server(GreeterV1(), server)\n    helloworld_pb2_grpc_v2.add_GreeterServicer_to_server(GreeterV2(), server)\n\n    server.add_insecure_port(\"0.0.0.0:50051\")\n    server.start()\n\n    # One server which exposes the V3 API and has reflection turned on\n    reflecting_server = grpc.server(\n        executor,\n        interceptors=interceptors,\n    )\n    helloworld_pb2_grpc_v3.add_GreeterServicer_to_server(GreeterV3(), reflecting_server)\n    service_names = (\n        helloworld_pb2_v3.DESCRIPTOR.services_by_name[\"Greeter\"].full_name,\n        reflection.SERVICE_NAME,\n    )\n    reflection.enable_server_reflection(service_names, reflecting_server)\n    reflecting_server.add_insecure_port(\"0.0.0.0:50052\")\n    reflecting_server.start()\n\n    logging.info(\"Starting grpc server\")\n    event = threading.Event()\n    event.wait()",
    "Code_level": "Function-level",
    "FSMID_for_test": 74,
    "right_result": "import threading\nimport grpc\nfrom concurrent import futures\nimport logging\nfrom google.protobuf import json_format\nfrom grpc_reflection.v1alpha import reflection\n\nclass LoggingInterceptor(grpc.ServerInterceptor):\n    def intercept_service(self, continuation, handler_name):\n        def new_handler(request, context):\n            logging.info(f\"Received request for {handler_name}\")\n            return continuation(request, context)\n        return new_handler\n\nclass GreeterServicerV1:\n    def SayHello(self, request, context):\n        return grpc.StatusCode.OK, \"Hello, v1!\"\n\nclass GreeterServicerV2:\n    def SayHello(self, request, context):\n        return grpc.StatusCode.OK, \"Hello, v2!\"\n\nclass GreeterServicerV3:\n    def SayHello(self, request, context):\n        return grpc.StatusCode.OK, \"Hello, v3!\"\n\ndef serve():\n    logging.basicConfig(level=logging.INFO)\n    interceptors = [LoggingInterceptor()]\n\n    server_v1_v2 = grpc.server(futures.ThreadPoolExecutor(max_workers=10), interceptors=interceptors)\n    greeter_v1 = GreeterServicerV1()\n    greeter_v2 = GreeterServicerV2()\n    GreeterServicerV1.service_name = \"Greeter\"\n    GreeterServicerV2.service_name = \"Greeter\"\n    server_v1_v2.add_service(GreeterServicerV1, (grpc.MethodDefinition(\"SayHello\", grpc.CallableMethodHandler(greeter_v1.SayHello, \"SayHello\")),))\n    server_v1_v2.add_service(GreeterServicerV2, (grpc.MethodDefinition(\"SayHello\", grpc.CallableMethodHandler(greeter_v2.SayHello, \"SayHello\")),))\n\n    server_v3 = grpc.server(futures.ThreadPoolExecutor(max_workers=10), interceptors=interceptors)\n    greeter_v3 = GreeterServicerV3()\n    GreeterServicerV3.service_name = \"Greeter\"\n    server_v3.add_service(GreeterServicerV3, (grpc.MethodDefinition(\"SayHello\", grpc.CallableMethodHandler(greeter_v3.SayHello, \"SayHello\")),))\n    server_v3.add_service(reflection.ServiceReflectionServerPlugin())\n\n    server_v1_v2.add_insecure_port('localhost:50051')\n    server_v3.add_insecure_port('localhost:50052')\n\n    server_v1_v2.start()\n    server_v3.start()\n\n    stop_event = threading.Event()\n    def shutdown():\n        server_v1_v2.stop(0)\n        server_v3.stop(0)\n        stop_event.set()\n\n    # Keep the servers running indefinitely\n    try:\n        stop_event.wait()\n    except KeyboardInterrupt:\n        shutdown()"
  },
  {
    "Task_id": 497,
    "Instruction": "Task Description: Create a gRPC server in Python that handles incoming requests using a thread pool for concurrency, implements service methods, and supports server reflection.\n\nClass Description: GRPCServer is a class that encapsulates the functionality of a gRPC server, including initialization with a thread pool, service implementation, and server lifecycle management (start/stop).\n\nAttributes:\n- _server: grpc.Server - The underlying gRPC server instance\n- _service_impl: ServiceImpl - The implementation of the gRPC service methods\n\nMethods:\n- __init__(max_workers: int = 5) -> None - Initializes the gRPC server with a thread pool executor of specified size and sets up service implementation\n- start(port: int) -> None - Binds the server to the specified port and starts listening for incoming requests\n- stop(grace_period: float = 1.0) -> None - Stops the server with the specified grace period for ongoing requests\n\nNested Class Description: ServiceImpl implements the actual gRPC service methods defined in the protobuf service.\n\nMethods:\n- Empty(request: Any, context) -> Any - Handles empty requests and returns an empty response\n- SimpleTest(request: test_services_pb2.DummyRequest, context: grpc.ServicerContext) -> test_services_pb2.DummyResponse - Processes a dummy request, validates input, and returns a response or aborts with error if validation fails",
    "Canonical_solution": "import grpc\nfrom concurrent import futures\nfrom typing import Any\nfrom . import test_services_pb2, test_services_pb2_grpc\n\nclass ServiceImpl(test_services_pb2_grpc.DummyServiceServicer):\n    def Empty(self, request: Any, context) -> Any:\n        return test_services_pb2.Empty()\n\n    def SimpleTest(\n        self, request: test_services_pb2.DummyRequest, context: grpc.ServicerContext\n    ) -> test_services_pb2.DummyResponse:\n        if request.request_id > 1000:\n            context.abort(grpc.StatusCode.FAILED_PRECONDITION, \"number too big!\")\n        return test_services_pb2.DummyResponse(response_id=request.request_id + 1)\n\nclass GRPCServer:\n    def __init__(self, max_workers: int = 5):\n        self._server = grpc.server(futures.ThreadPoolExecutor(max_workers=max_workers))\n        self._service_impl = ServiceImpl()\n        test_services_pb2_grpc.add_DummyServiceServicer_to_server(self._service_impl, self._server)\n        \n        service_names = (\n            test_services_pb2.DESCRIPTOR.services_by_name[\"DummyService\"].full_name,\n            reflection.SERVICE_NAME,\n        )\n        reflection.enable_server_reflection(service_names, self._server)\n\n    def start(self, port: int) -> None:\n        self._server.add_insecure_port(f\"127.0.0.1:{port}\")\n        self._server.start()\n\n    def stop(self, grace_period: float = 1.0) -> None:\n        self._server.stop(grace_period)",
    "Code_level": "Class-level",
    "FSMID_for_test": 74,
    "right_result": "import grpc\nfrom concurrent import futures\nimport test_services_pb2\nimport test_services_pb2_grpc\n\nclass ServiceImpl(test_services_pb2_grpc.TestServiceServicer):\n    def Empty(self, request, context):\n        return test_services_pb2.Empty()\n\n    def SimpleTest(self, request, context):\n        if not hasattr(request, 'data'):\n            context.abort(grpc.StatusCode.INVALID_ARGUMENT, \"Missing data in request\")\n        return test_services_pb2.DummyResponse(result=f\"Processed: {request.data}\")\n\nclass GRPCServer:\n    def __init__(self, max_workers: int = 5) -> None:\n        self._server = grpc.server(futures.ThreadPoolExecutor(max_workers=max_workers))\n        self._service_impl = ServiceImpl()\n        test_services_pb2_grpc.add_TestServiceServicer_to_server(self._service_impl, self._server)\n\n    def start(self, port: int) -> None:\n        self._server.add_insecure_port(f'[::]:{port}')\n        self._server.start()\n        print(f\"gRPC server is running on port {port}...\")\n\n    def stop(self, grace_period: float = 1.0) -> None:\n        self._server.stop(grace_period)\n        print(\"gRPC server has been stopped.\")"
  },
  {
    "Task_id": 499,
    "Instruction": "Task Description: Implement a gRPC server class that handles multiple protocols including health checks and service reflection, capable of serving JinaRPC requests asynchronously.\n\nClass Description: MultiProtocolGateway is a class that sets up and manages a gRPC server with support for JinaRPC services, health checks, and server reflection. It provides methods to start, run, and shutdown the server gracefully.\n\nAttributes:\n- grpc_port: int - The port number on which the gRPC server will listen\n- host: str - The host address to bind the server to (default: '0.0.0.0')\n- health_servicer: HealthServicer - The health check service implementation\n- grpc_server: grpc.aio.Server - The asynchronous gRPC server instance\n\nMethods:\n- __init__(grpc_port: int, host: str = '0.0.0.0') -> None - Initializes the gateway with specified port and host\n- _setup_grpc_server() -> None - Sets up the gRPC server with JinaRPC services, health checks, and reflection (asynchronous)\n- run_server() -> None - Starts the server and waits for termination (asynchronous)\n- shutdown() -> None - Gracefully shuts down the server (asynchronous)",
    "Canonical_solution": "import grpc\nfrom grpc_health.v1 import health, health_pb2, health_pb2_grpc\nfrom grpc_reflection.v1alpha import reflection\nfrom jina.proto import jina_pb2, jina_pb2_grpc\n\nclass MultiProtocolGateway:\n    def __init__(self, grpc_port: int, host: str = '0.0.0.0'):\n        self.grpc_port = grpc_port\n        self.host = host\n        self.health_servicer = health.HealthServicer(experimental_non_blocking=True)\n\n    async def _setup_grpc_server(self):\n        self.grpc_server = grpc.aio.server()\n\n        jina_pb2_grpc.add_JinaRPCServicer_to_server(\n            self.streamer._streamer, self.grpc_server\n        )\n\n        jina_pb2_grpc.add_JinaSingleDataRequestRPCServicer_to_server(\n            self.streamer._streamer, self.grpc_server\n        )\n\n        service_names = (\n            jina_pb2.DESCRIPTOR.services_by_name['JinaRPC'].full_name,\n            reflection.SERVICE_NAME,\n        )\n        \n        health_pb2_grpc.add_HealthServicer_to_server(\n            self.health_servicer, self.grpc_server\n        )\n        \n        for service in service_names:\n            self.health_servicer.set(service, health_pb2.HealthCheckResponse.SERVING)\n            \n        reflection.enable_server_reflection(service_names, self.grpc_server)\n        self.grpc_server.add_insecure_port(f'{self.host}:{self.grpc_port}')\n        await self.grpc_server.start()\n\n    async def run_server(self):\n        await self.grpc_server.wait_for_termination()\n\n    async def shutdown(self):\n        await self.grpc_server.stop(0)\n        self.health_servicer.enter_graceful_shutdown()",
    "Code_level": "Class-level",
    "FSMID_for_test": 74,
    "right_result": "import asyncio\nimport grpc\nfrom concurrent import futures\nfrom jina.rpc import JinaRPCServer\nfrom jina.proto import jina_pb2\nfrom jina.proto import jina_pb2_grpc\nfrom grpc_reflection.v1alpha import reflection\nfrom grpc_health_check import HealthServicer\n\nclass MultiProtocolGateway:\n    def __init__(self, grpc_port: int, host: str = '0.0.0.0') -> None:\n        self.grpc_port = grpc_port\n        self.host = host\n        self.health_servicer = HealthServicer()\n        self.grpc_server = None\n\n    async def _setup_grpc_server(self):\n        self.grpc_server = grpc.aio.server(futures.ThreadPoolExecutor(max_workers=10))\n        jina_pb2_grpc.add_JinaRPCServicer_to_server(JinaRPCServer(), self.grpc_server)\n        health_pb2_grpc.add_HealthServicer_to_server(self.health_servicer, self.grpc_server)\n\n        service_names = (\n            f'{jina_pb2.DESCRIPTOR.services_by_name[\"JinaRPC\"].full_name}',\n            f'{health_pb2.DESCRIPTOR.services_by_name[\"Health\"].full_name}',\n            reflection.SERVICE_NAME,\n        )\n        reflection.enable_server_reflection(service_names, self.grpc_server)\n\n        self.grpc_server.add_insecure_port(f'{self.host}:{self.grpc_port}')\n\n    async def run_server(self):\n        await self._setup_grpc_server()\n        await self.grpc_server.start()\n        print(f\"gRPC server is running on {self.host}:{self.grpc_port}\")\n        await self.grpc_server.wait_for_termination()\n\n    async def shutdown(self):\n        if self.grpc_server:\n            await self.grpc_server.stop(grace=5)"
  },
  {
    "Task_id": 50,
    "Instruction": "Task Description: Implement asynchronous HTTP client functions to interact with a gacha information API, retrieving lists of available gacha and their detailed information.\n\nFunction Description: The code consists of two asynchronous functions that use httpx library to make HTTP requests to a gacha information API. The first function retrieves a list of available gacha, while the second fetches detailed information for a specific gacha using its ID.\n\nInput: \n- For `gacha_info_list()`: None\n- For `gacha_info(gacha_id)`: \n  - gacha_id: [str] - The unique identifier of the gacha to fetch details for\n\nOutput: \n- For `gacha_info_list()`: [list] - A list of available gacha items\n- For `gacha_info(gacha_id)`: [dict] - A dictionary containing detailed information about the specified gacha",
    "Canonical_solution": "import httpx\n\nBASE_URL = 'https://operation-webstatic.mihoyo.com/gacha_info/hk4e/cn_gf01/%s'\n\nasync def gacha_info_list():\n    async with httpx.AsyncClient() as client:\n        res = await client.get(url=BASE_URL % 'gacha/list.json')\n        json_data = res.json()\n        return json_data['data']['list']\n\nasync def gacha_info(gacha_id):\n    async with httpx.AsyncClient() as client:\n        res = await client.get(url=BASE_URL % gacha_id + '/zh-cn.json')\n        return res.json()",
    "Code_level": "Function-level",
    "FSMID_for_test": 59,
    "right_result": "import httpx\nimport asyncio\n\nasync def gacha_info_list():\n    async with httpx.AsyncClient() as client:\n        response = await client.get('https://api.example.com/gacha/list')\n        response.raise_for_status()\n        return response.json()\n\nasync def gacha_info(gacha_id):\n    async with httpx.AsyncClient() as client:\n        response = await client.get(f'https://api.example.com/gacha/{gacha_id}')\n        response.raise_for_status()\n        return response.json()"
  },
  {
    "Task_id": 500,
    "Instruction": "Task Description: Implement a gRPC server in Python that handles network compute bridge requests using thread pools for concurrency and inter-process communication queues for request/response handling.\n\nClass Description: NetworkComputeBridgeWorkerServicer is a gRPC servicer class that processes incoming network compute requests and model listing requests, using input/output queues for inter-process communication.\n\nAttributes:\n- thread_input_queue: [multiprocessing.Queue] - Queue for receiving incoming requests from gRPC clients\n- thread_output_queue: [multiprocessing.Queue] - Queue for sending responses back to gRPC clients\n\nMethods:\n- NetworkCompute: [Name](request, context) -> [network_compute_bridge_pb2.NetworkComputeResponse] - Processes a network compute request by putting it in the input queue and waiting for response from output queue\n- ListAvailableModels: [Name](request, context) -> [network_compute_bridge_pb2.ListAvailableModelsResponse] - Processes a model listing request by putting it in the input queue and waiting for response from output queue\n\nFunction Description: start_grpc_server creates and starts a gRPC server instance with thread pool executor, registers the servicer, and binds it to a specified port.\n\nInput:\n- port: [int] - The port number on which the gRPC server should listen\n\nOutput:\n- server: [grpc.Server] - The running gRPC server instance",
    "Canonical_solution": "import grpc\nfrom concurrent import futures\nimport multiprocessing\nfrom multiprocessing import Queue\nimport bosdyn.api.network_compute_bridge_service_pb2_grpc as network_compute_bridge_service_pb2_grpc\nimport bosdyn.api.network_compute_bridge_pb2 as network_compute_bridge_pb2\nimport bosdyn.api.header_pb2 as header_pb2\n\nREQUEST_QUEUE = Queue()\nRESPONSE_QUEUE = Queue()\n\nclass NetworkComputeBridgeWorkerServicer(network_compute_bridge_service_pb2_grpc.NetworkComputeBridgeWorkerServicer):\n    def __init__(self, thread_input_queue, thread_output_queue):\n        super(NetworkComputeBridgeWorkerServicer, self).__init__()\n        self.thread_input_queue = thread_input_queue\n        self.thread_output_queue = thread_output_queue\n\n    def NetworkCompute(self, request, context):\n        self.thread_input_queue.put(request)\n        out_proto = self.thread_output_queue.get()\n        return out_proto\n\n    def ListAvailableModels(self, request, context):\n        self.thread_input_queue.put(request)\n        out_proto = self.thread_output_queue.get()\n        return out_proto\n\ndef start_grpc_server(port):\n    server = grpc.server(futures.ThreadPoolExecutor(max_workers=10))\n    network_compute_bridge_service_pb2_grpc.add_NetworkComputeBridgeWorkerServicer_to_server(\n        NetworkComputeBridgeWorkerServicer(REQUEST_QUEUE, RESPONSE_QUEUE), server)\n    server.add_insecure_port(f'[::]:{port}')\n    server.start()\n    return server",
    "Code_level": "Class-level",
    "FSMID_for_test": 74,
    "right_result": "import multiprocessing\nimport threading\nimport grpc\nfrom concurrent import futures\nimport network_compute_bridge_pb2\nimport network_compute_bridge_pb2_grpc\n\nclass NetworkComputeBridgeWorkerServicer(network_compute_bridge_pb2_grpc.NetworkComputeBridgeServicer):\n    def __init__(self, thread_input_queue, thread_output_queue):\n        self.thread_input_queue = thread_input_queue\n        self.thread_output_queue = thread_output_queue\n\n    def NetworkCompute(self, request, context):\n        self.thread_input_queue.put((request, context))\n        response = self.thread_output_queue.get()\n        return response\n\n    def ListAvailableModels(self, request, context):\n        self.thread_input_queue.put((request, context))\n        response = self.thread_output_queue.get()\n        return response\n\ndef start_grpc_server(port):\n    server = grpc.server(futures.ThreadPoolExecutor(max_workers=10))\n    thread_input_queue = multiprocessing.Queue()\n    thread_output_queue = multiprocessing.Queue()\n    servicer = NetworkComputeBridgeWorkerServicer(thread_input_queue, thread_output_queue)\n    network_compute_bridge_pb2_grpc.add_NetworkComputeBridgeServicer_to_server(servicer, server)\n    server.add_insecure_port(f'[::]:{port}')\n    server.start()\n    return server"
  },
  {
    "Task_id": 501,
    "Instruction": "Task Description: Implement a gRPC server class for Vizier service that handles concurrent requests and manages service lifecycle.\n\nClass Description: DefaultVizierServer is a class that sets up and manages a gRPC server for Vizier service, including initialization, startup, and configuration of related services. It handles concurrent requests using a thread pool and provides access to the server's datastore and endpoint.\n\nAttributes:\n- _host: [str] - The host address where the server will run (default: 'localhost')\n- _database_url: [Optional[str]] - URL for the database connection\n- _policy_factory: [Any] - Factory for creating policy objects (default: service_policy_factory_lib.DefaultPolicyFactory)\n- _early_stop_recycle_period: [datetime.timedelta] - Time period for early stop recycling (default: 0.1 seconds)\n- _port: [int] - The port number selected for the server\n- _servicer: [Any] - The Vizier service implementation\n- _server: [grpc.Server] - The gRPC server instance\n- stub: [Any] - The client stub for the server\n\nMethods:\n- __init__(host: str = 'localhost', database_url: Optional[str] = None, policy_factory=None, early_stop_recycle_period: datetime.timedelta = datetime.timedelta(seconds=0.1)) -> None - Initializes the server with configuration parameters\n- datastore() -> [property] - Returns the datastore from the servicer\n- endpoint() -> [property] - Returns the server endpoint as 'host:port'\n- start() -> None - Starts the gRPC server and initializes services\n- wait_for_early_stop_recycle_period() -> None - Waits for the configured early stop recycle period",
    "Canonical_solution": "from concurrent import futures\nimport datetime\nimport time\nfrom typing import Optional\nimport grpc\nimport portpicker\nfrom vizier._src.service import vizier_service\nfrom vizier._src.service import vizier_service_pb2_grpc\nfrom vizier._src.service import stubs_util\nfrom vizier._src.service import pythia_service\nfrom vizier._src.service import pythia_service_pb2_grpc\n\nclass DefaultVizierServer:\n    def __init__(self, host: str = 'localhost', database_url: Optional[str] = None, \n                 policy_factory=None, early_stop_recycle_period: datetime.timedelta = datetime.timedelta(seconds=0.1)):\n        self._host = host\n        self._database_url = database_url\n        self._policy_factory = policy_factory or service_policy_factory_lib.DefaultPolicyFactory\n        self._early_stop_recycle_period = early_stop_recycle_period\n        self._port = portpicker.pick_unused_port()\n        \n        # Initialize non-user-settable fields\n        self._servicer = None\n        self._server = None\n        self.stub = None\n\n    @property\n    def datastore(self):\n        return self._servicer.datastore\n\n    @property\n    def endpoint(self):\n        return f'{self._host}:{self._port}'\n\n    def start(self):\n        # Setup Vizier server\n        self._servicer = vizier_service.VizierServicer(\n            database_url=self._database_url,\n            early_stop_recycle_period=self._early_stop_recycle_period\n        )\n        self._server = grpc.server(futures.ThreadPoolExecutor(max_workers=30))\n        vizier_service_pb2_grpc.add_VizierServiceServicer_to_server(\n            self._servicer, self._server\n        )\n        self._server.add_insecure_port(self.endpoint)\n        self._server.start()\n        self.stub = stubs_util.create_vizier_server_stub(self.endpoint)\n\n        # Setup default Pythia Service\n        default_pythia_service = pythia_service.PythiaServicer(\n            self._servicer, policy_factory=self._policy_factory\n        )\n        self._servicer.default_pythia_service = default_pythia_service\n\n    def wait_for_early_stop_recycle_period(self):\n        time.sleep(self._early_stop_recycle_period.total_seconds())",
    "Code_level": "Class-level",
    "FSMID_for_test": 74,
    "right_result": "import grpc\nfrom concurrent import futures\nimport datetime\nimport threading\n\nclass DefaultVizierServer:\n    def __init__(self, host: str = 'localhost', database_url: Optional[str] = None, policy_factory=None, early_stop_recycle_period: datetime.timedelta = datetime.timedelta(seconds=0.1)) -> None:\n        self._host = host\n        self._database_url = database_url\n        self._policy_factory = policy_factory or service_policy_factory_lib.DefaultPolicyFactory()\n        self._early_stop_recycle_period = early_stop_recycle_period\n        self._port = 50051\n        self._servicer = None\n        self._server = None\n        self.stub = None\n\n    @property\n    def datastore(self):\n        return self._servicer.datastore\n\n    @property\n    def endpoint(self):\n        return f\"{self._host}:{self._port}\"\n\n    def start(self):\n        self._server = grpc.server(futures.ThreadPoolExecutor(max_workers=10))\n        self._servicer = VizierServicer(self._database_url, self._policy_factory)\n        add_VizierServicer_to_server(self._servicer, self._server)\n        self._server.add_insecure_port(f\"{self._host}:{self._port}\")\n        self._server.start()\n        print(f\"Server started on {self.endpoint}\")\n\n    def wait_for_early_stop_recycle_period(self):\n        time.sleep(self._early_stop_recycle_period.total_seconds())\n\nclass VizierServicer:\n    def __init__(self, database_url, policy_factory):\n        self._database_url = database_url\n        self._policy_factory = policy_factory\n        self._datastore = Datastore(database_url)\n\n    @property\n    def datastore(self):\n        return self._datastore\n\nclass Datastore:\n    def __init__(self, database_url):\n        self._db = connect_to_database(database_url)\n\ndef connect_to_database(url):\n    return {}\n\ndef service_policy_factory_lib():\n    return {}\n\ndef add_VizierServicer_to_server(servicer, server):\n    pass"
  },
  {
    "Task_id": 502,
    "Instruction": "Task Description: Create a gRPC server in Python that handles incoming requests using a thread pool for concurrency and implements a dummy API for testing purposes.\n\nClass Description: The DummyServer class implements a gRPC server that listens on a specified address and handles incoming requests through a servicer class. It manages server lifecycle and provides a simple echo service.\n\nAttributes:\n- server: [grpc.Server] - The gRPC server instance configured with thread pool executor and message size limits\n- bind_address: [str] - The network address and port where the server will listen for incoming connections\n\nMethods:\n- __init__: [Name](bind_address: str) -> None - Initializes the gRPC server with thread pool executor, configures message size limits, and binds to the specified address\n- __enter__: [Name]() -> DummyServer - Starts the server and returns the instance (for context manager usage)\n- __exit__: [Name](exc_type, exc_val, exc_tb) -> None - Stops the server when exiting context (for context manager usage)\n- GNESServicer.dummyAPI: [Name](request, context) -> request - Servicer method that echoes back received requests (implements dummy API)",
    "Canonical_solution": "import os\nimport grpc\nfrom concurrent.futures import ThreadPoolExecutor\nfrom tests.proto_s import dummy_pb2_grpc\n\nclass DummyServer:\n    def __init__(self, bind_address):\n        self.server = grpc.server(\n            ThreadPoolExecutor(max_workers=1),\n            options=[('grpc.max_send_message_length', 1 * 1024 * 1024),\n                     ('grpc.max_receive_message_length', 1 * 1024 * 1024)])\n        dummy_pb2_grpc.add_DummyGRPCServiceServicer_to_server(self.GNESServicer(), self.server)\n        self.bind_address = bind_address\n        self.server.add_insecure_port(self.bind_address)\n\n    def __enter__(self):\n        self.server.start()\n        print('dummy server is listening at: %s' % self.bind_address)\n        return self\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        self.server.stop(None)\n\n    class GNESServicer(dummy_pb2_grpc.DummyGRPCServiceServicer):\n        def dummyAPI(self, request, context):\n            print('the dummy server received something: %s' % request)\n            return request",
    "Code_level": "Class-level",
    "FSMID_for_test": 74,
    "right_result": "import grpc\nfrom concurrent import futures\nimport threading\nimport time\nimport dummy_pb2\nimport dummy_pb2_grpc\n\nclass GNESServicer(dummy_pb2_grpc.DummyServiceServicer):\n    def dummyAPI(self, request, context):\n        return request\n\nclass DummyServer:\n    def __init__(self, bind_address: str):\n        self.server = grpc.server(\n            futures.ThreadPoolExecutor(max_workers=10),\n            options=[\n                ('grpc.max_send_message_length', 1 << 24),\n                ('grpc.max_receive_message_length', 1 << 24)\n            ]\n        )\n        dummy_pb2_grpc.add_DummyServiceServicer_to_server(GNESServicer(), self.server)\n        self.server.add_insecure_port(bind_address)\n        self.bind_address = bind_address\n\n    def __enter__(self):\n        self.server.start()\n        return self\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        self.server.stop(0)\n\nif __name__ == '__main__':\n    with DummyServer('localhost:50051') as server:\n        print(\"Server started on localhost:50051\")\n        try:\n            while True:\n                time.sleep(60)\n        except KeyboardInterrupt:\n            pass"
  },
  {
    "Task_id": 51,
    "Instruction": "Task Description: Create an asynchronous function to check the health status of a server by querying its live and ready endpoints.\n\nFunction Description: The function uses httpx.AsyncClient to asynchronously send HTTP GET requests to a server's health endpoints (/v1/health/live and /v1/health/ready). It returns a tuple indicating whether the server is live and ready based on the HTTP status codes received.\n\nInput: \n- url (str): The base URL of the server to check\n\nOutput: \n- Tuple[bool, bool]: A tuple where the first element indicates if the server is live (HTTP 200 status) and the second element indicates if the server is ready (HTTP 200 status)",
    "Canonical_solution": "from typing import Tuple\nimport httpx\n\nasync def _get_health(url: str) -> Tuple[bool, bool]:\n    \"\"\"\n    Query {url}/v1/health/{live,ready} to check if the server is running and ready\n\n    Args:\n        url (str): URL of the server\n\n    Returns:\n        Tuple[bool, bool]: (is_live, is_ready)\n    \"\"\"\n    async with httpx.AsyncClient() as client:\n        live = await client.get(f\"{url}/v1/health/live\")\n        ready = await client.get(f\"{url}/v1/health/ready\")\n        return live.status_code == 200, ready.status_code == 200",
    "Code_level": "Function-level",
    "FSMID_for_test": 59,
    "right_result": "import httpx\nimport asyncio\n\nasync def check_server_health(url: str) -> tuple[bool, bool]:\n    live_url = f\"{url}/v1/health/live\"\n    ready_url = f\"{url}/v1/health/ready\"\n    \n    live_status = False\n    ready_status = False\n    \n    async with httpx.AsyncClient() as client:\n        try:\n            live_response = await client.get(live_url)\n            live_status = live_response.status_code == 200\n        except httpx.RequestError:\n            pass\n        \n        try:\n            ready_response = await client.get(ready_url)\n            ready_status = ready_response.status_code == 200\n        except httpx.RequestError:\n            pass\n    \n    return (live_status, ready_status)"
  },
  {
    "Task_id": 52,
    "Instruction": "Task Description: Create an asynchronous function to send an HTTP POST request with candidate and role data to a specified endpoint, and return the response as a dictionary.\n\nFunction Description: The function uses httpx.AsyncClient to asynchronously send a POST request containing candidate information and role details to a server endpoint. It handles the response by converting it to JSON format and returns the result. The function is designed to be non-blocking and should be called within an async context.\n\nInput:\n- candidates: list[dict] - A list of candidate dictionaries, each containing:\n  - name: str - The candidate's name\n  - self_identified_seniority: int - The candidate's self-assessed seniority level\n  - bio: str - The candidate's biography/description\n- role: dict - A dictionary containing role details:\n  - title: str - The job title\n  - desired_seniority: int - The desired seniority level for the role\n  - description: str - The job description\n\nOutput:\n- dict - The JSON-decoded response from the server containing the processed results",
    "Canonical_solution": "import asyncio\nimport json\nimport httpx\n\nasync def send_http_request(candidates: list, role: dict) -> dict:\n    async with httpx.AsyncClient() as client:\n        response = await client.post(\n            \"http://localhost:8000/interview\",\n            json={\"candidates\": candidates, \"role\": role},\n        )\n        result = response.json()\n        return result\n\nif __name__ == \"__main__\":\n    candidates = [\n        {\n            \"name\": \"Alice\",\n            \"self_identified_seniority\": 3,\n            \"bio\": \"10 years with postgres, 5 years with python, 3 years with django.\",\n        },\n        {\n            \"name\": \"Bob\",\n            \"self_identified_seniority\": 1,\n            \"bio\": \"I just graduated from a coding bootcamp and I'm ready to take on the world!\",\n        },\n        {\n            \"name\": \"Charlie\",\n            \"self_identified_seniority\": 2,\n            \"bio\": \"graduated 2 years ago and i can make you a react app in no time\",\n        },\n        {\n            \"name\": \"David\",\n            \"self_identified_seniority\": 3,\n            \"bio\": \"i just been riding that SCRUM wave for 10 years fam\",\n        },\n    ]\n    role = {\n        \"title\": \"Senior Software Engineer\",\n        \"desired_seniority\": 3,\n        \"description\": \"Build and maintain a large-scale web application with a team of 10+ engineers.\",\n    }\n    result = asyncio.run(send_http_request(candidates, role))\n    print(json.dumps(result, indent=2))",
    "Code_level": "Function-level",
    "FSMID_for_test": 59,
    "right_result": "import httpx\nimport asyncio\n\nasync def send_candidate_data(candidates, role, endpoint):\n    async with httpx.AsyncClient() as client:\n        response = await client.post(endpoint, json={\"candidates\": candidates, \"role\": role})\n        return response.json()"
  },
  {
    "Task_id": 53,
    "Instruction": "Task Description: Create an asynchronous function to fetch data from a specified URL using HTTP GET request with customizable headers, handling potential HTTP errors.\n\nFunction Description: The function uses httpx library with asyncio to make asynchronous HTTP requests. It creates an async client, sends a GET request to the provided URL, checks for successful response status, and returns the response object. Default headers are provided but can be overridden.\n\nInput:\n- url: str - The target URL to fetch data from\n- headers: dict (optional) - Custom headers to include in the request (defaults to common browser User-Agent if not provided)\n\nOutput:\n- Returns: httpx.Response - The HTTP response object containing status code, headers, and content\n- Raises: httpx.HTTPStatusError - If the response status code indicates an error (4xx or 5xx)",
    "Canonical_solution": "import os\nimport httpx\nimport aiofiles\n\nasync def fetch_data(url: str, headers: dict = None):\n    headers = {\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'\n    } if headers is None else headers.get('headers')\n    async with httpx.AsyncClient() as client:\n        response = await client.get(url, headers=headers)\n        response.raise_for_status()  # Ensure successful response\n        return response",
    "Code_level": "Function-level",
    "FSMID_for_test": 59,
    "right_result": "import httpx\nimport asyncio\n\nasync def fetch_data(url: str, headers: dict = None):\n    async with httpx.AsyncClient() as client:\n        default_headers = {\"User-Agent\": \"Mozilla/5.0\"}\n        if headers:\n            default_headers.update(headers)\n        response = await client.get(url, headers=default_headers)\n        response.raise_for_status()\n        return response"
  },
  {
    "Task_id": 54,
    "Instruction": "Task Description: Implement an asynchronous function to fetch and filter GitHub contributors for a repository, then retrieve their detailed user information.\n\nFunction Description: This function asynchronously retrieves contributors from a GitHub repository using the GitHub API, filters them based on specific criteria (user type, ignored logins, and acknowledgements), and then fetches detailed information for each qualifying contributor. The function uses httpx for asynchronous HTTP requests and handles pagination to retrieve all contributors.\n\nInput:\n- auth: Tuple[str, str] - A tuple containing GitHub username and password/token for authentication\n- GITHUB_API_CONTRIBUTORS: str - The GitHub API endpoint for contributors\n- PER_PAGE: int - Number of contributors to fetch per page\n- GITHUB_USER_TYPE: str - The type of contributor to filter for (e.g., 'User')\n- IGNORED_AUTHOR_LOGINS: List[str] - List of GitHub logins to ignore\n- ACKNOWLEDGEMENTS: str - String containing acknowledged contributors to exclude\n\nOutput:\n- List[Dict] - A list of dictionaries containing detailed user information for unacknowledged contributors who meet the filtering criteria",
    "Canonical_solution": "import asyncio\nimport httpx\n\nasync def main():\n    auth = (input(\"Github Username: \"), getpass())\n    async with httpx.AsyncClient() as client:\n        page = 0\n        results = []\n        contributors = []\n        while not page or len(results) == PER_PAGE:\n            page += 1\n            response = await client.get(\n                f\"{GITHUB_API_CONTRIBUTORS}?per_page={PER_PAGE}&page={page}\", auth=auth\n            )\n            results = response.json()\n            contributors.extend(\n                (\n                    contributor\n                    for contributor in results\n                    if contributor[\"type\"] == GITHUB_USER_TYPE\n                    and contributor[\"login\"] not in IGNORED_AUTHOR_LOGINS\n                    and f\"@{contributor['login'].lower()}\" not in ACKNOWLEDGEMENTS\n                )\n            )\n\n        unacknowledged_users = await asyncio.gather(\n            *(client.get(contributor[\"url\"], auth=auth) for contributor in contributors)\n        )\n        unacknowledged_users = [request.json() for request in unacknowledged_users]",
    "Code_level": "Function-level",
    "FSMID_for_test": 59,
    "right_result": "import httpx\nfrom typing import List, Dict, Tuple\n\nasync def fetch_and_filter_contributors(auth: Tuple[str, str], GITHUB_API_CONTRIBUTORS: str, PER_PAGE: int, GITHUB_USER_TYPE: str, IGNORED_AUTHOR_LOGINS: List[str], ACKNOWLEDGEMENTS: str) -> List[Dict]:\n    async with httpx.AsyncClient(auth=auth) as client:\n        page = 1\n        all_contributors = []\n        while True:\n            url = f\"{GITHUB_API_CONTRIBUTORS}?per_page={PER_PAGE}&page={page}\"\n            response = await client.get(url)\n            if response.status_code != 200:\n                break\n            contributors = response.json()\n            if not contributors:\n                break\n            all_contributors.extend(contributors)\n            page += 1\n        \n        filtered_contributors = []\n        for contributor in all_contributors:\n            login = contributor['login']\n            if login in IGNORED_AUTHOR_LOGINS:\n                continue\n            if GITHUB_USER_TYPE in contributor.get('type', ''):\n                if ACKNOWLEDGEMENTS and login in ACKNOWLEDGEMENTS.split(','):\n                    continue\n                filtered_contributors.append(login)\n        \n        detailed_users = []\n        for login in filtered_contributors:\n            user_url = f\"https://api.github.com/users/{login}\"\n            user_response = await client.get(user_url)\n            if user_response.status_code == 200:\n                detailed_users.append(user_response.json())\n        \n        return detailed_users"
  },
  {
    "Task_id": 56,
    "Instruction": "Task Description: Create a Python class that provides asynchronous HTTP client functionality using httpx and asyncio, supporting common HTTP methods (GET, POST), file downloads, and proxy configuration.\n\nClass Description: AsyncHttpx is a utility class for making asynchronous HTTP requests with features like automatic retry on multiple URLs, proxy support, and file downloads. It handles connection timeouts and HTTP errors gracefully.\n\nAttributes:\n- proxy: ClassVar[dict[str, Union[str, None]]] - A class-level dictionary storing proxy configurations for HTTP and HTTPS protocols\n\nMethods:\n- get(url: Union[str, list[str]], *, params: Optional[dict[str, Any]] = None, headers: Optional[dict[str, str]] = None, cookies: Optional[dict[str, str]] = None, verify: bool = True, use_proxy: bool = True, proxy: Optional[dict[str, str]] = None, timeout: int = 30, **kwargs) -> Response - Performs an asynchronous GET request to one or multiple URLs, returning the first successful response\n- _get_first_successful(urls: list[str], **kwargs) -> Response - Internal method to attempt requests on multiple URLs until first success\n- _get_single(url: str, *, params: Optional[dict[str, Any]] = None, headers: Optional[dict[str, str]] = None, cookies: Optional[dict[str, str]] = None, verify: bool = True, use_proxy: bool = True, proxy: Optional[dict[str, str]] = None, timeout: int = 30, **kwargs) -> Response - Internal method to perform a single GET request\n- post(url: str, *, data: Optional[dict[str, Any]] = None, content: Any = None, files: Any = None, verify: bool = True, use_proxy: bool = True, proxy: Optional[dict[str, str]] = None, json: Optional[dict[str, Any]] = None, params: Optional[dict[str, str]] = None, headers: Optional[dict[str, str]] = None, cookies: Optional[dict[str, str]] = None, timeout: int = 30, **kwargs) -> Response - Performs an asynchronous POST request with various payload options\n- download_file(url: Union[str, list[str]], path: Union[str, Path], *, params: Optional[dict[str, str]] = None, verify: bool = True, use_proxy: bool = True, proxy: Optional[dict[str, str]] = None, headers: Optional[dict[str, str]] = None, cookies: Optional[dict[str, str]] = None, timeout: int = 30, **kwargs) -> bool - Downloads a file from a URL to the specified path, returning success status",
    "Canonical_solution": "import asyncio\nfrom asyncio.exceptions import TimeoutError\nimport httpx\nfrom httpx import ConnectTimeout, HTTPStatusError, Response\nfrom typing import Any, ClassVar, Optional, Union\nfrom pathlib import Path\nimport aiofiles\n\nclass AsyncHttpx:\n    proxy: ClassVar[dict[str, Union[str, None]]] = {\n        \"http://\": None,\n        \"https://\": None,\n    }\n\n    @classmethod\n    async def get(\n        cls,\n        url: Union[str, list[str]],\n        *,\n        params: Optional[dict[str, Any]] = None,\n        headers: Optional[dict[str, str]] = None,\n        cookies: Optional[dict[str, str]] = None,\n        verify: bool = True,\n        use_proxy: bool = True,\n        proxy: Optional[dict[str, str]] = None,\n        timeout: int = 30,\n        **kwargs,\n    ) -> Response:\n        urls = [url] if isinstance(url, str) else url\n        return await cls._get_first_successful(\n            urls,\n            params=params,\n            headers=headers,\n            cookies=cookies,\n            verify=verify,\n            use_proxy=use_proxy,\n            proxy=proxy,\n            timeout=timeout,\n            **kwargs,\n        )\n\n    @classmethod\n    async def _get_first_successful(\n        cls,\n        urls: list[str],\n        **kwargs,\n    ) -> Response:\n        last_exception = None\n        for url in urls:\n            try:\n                return await cls._get_single(url, **kwargs)\n            except Exception as e:\n                last_exception = e\n        raise last_exception or Exception(\"All URLs failed\")\n\n    @classmethod\n    async def _get_single(\n        cls,\n        url: str,\n        *,\n        params: Optional[dict[str, Any]] = None,\n        headers: Optional[dict[str, str]] = None,\n        cookies: Optional[dict[str, str]] = None,\n        verify: bool = True,\n        use_proxy: bool = True,\n        proxy: Optional[dict[str, str]] = None,\n        timeout: int = 30,\n        **kwargs,\n    ) -> Response:\n        _proxy = proxy or (cls.proxy if use_proxy else None)\n        async with httpx.AsyncClient(proxies=_proxy, verify=verify) as client:\n            return await client.get(\n                url,\n                params=params,\n                headers=headers,\n                cookies=cookies,\n                timeout=timeout,\n                **kwargs,\n            )\n\n    @classmethod\n    async def post(\n        cls,\n        url: str,\n        *,\n        data: Optional[dict[str, Any]] = None,\n        content: Any = None,\n        files: Any = None,\n        verify: bool = True,\n        use_proxy: bool = True,\n        proxy: Optional[dict[str, str]] = None,\n        json: Optional[dict[str, Any]] = None,\n        params: Optional[dict[str, str]] = None,\n        headers: Optional[dict[str, str]] = None,\n        cookies: Optional[dict[str, str]] = None,\n        timeout: int = 30,\n        **kwargs,\n    ) -> Response:\n        _proxy = proxy or (cls.proxy if use_proxy else None)\n        async with httpx.AsyncClient(proxies=_proxy, verify=verify) as client:\n            return await client.post(\n                url,\n                content=content,\n                data=data,\n                files=files,\n                json=json,\n                params=params,\n                headers=headers,\n                cookies=cookies,\n                timeout=timeout,\n                **kwargs,\n            )\n\n    @classmethod\n    async def download_file(\n        cls,\n        url: Union[str, list[str]],\n        path: Union[str, Path],\n        *,\n        params: Optional[dict[str, str]] = None,\n        verify: bool = True,\n        use_proxy: bool = True,\n        proxy: Optional[dict[str, str]] = None,\n        headers: Optional[dict[str, str]] = None,\n        cookies: Optional[dict[str, str]] = None,\n        timeout: int = 30,\n        **kwargs,\n    ) -> bool:\n        if isinstance(path, str):\n            path = Path(path)\n        path.parent.mkdir(parents=True, exist_ok=True)\n        \n        try:\n            response = await cls.get(\n                url,\n                params=params,\n                headers=headers,\n                cookies=cookies,\n                use_proxy=use_proxy,\n                proxy=proxy,\n                timeout=timeout,\n                **kwargs,\n            )\n            response.raise_for_status()\n            async with aiofiles.open(path, \"wb\") as wf:\n                await wf.write(response.content)\n            return True\n        except (TimeoutError, ConnectTimeout, HTTPStatusError) as e:\n            return False",
    "Code_level": "Class-level",
    "FSMID_for_test": 59,
    "right_result": "import httpx\nimport asyncio\nfrom typing import Union, List, Dict, Optional, Any, Tuple, cast\nfrom pathlib import Path\n\nclass AsyncHttpx:\n    proxy: ClassVar[Dict[str, Union[str, None]]] = {\n        \"http\": None,\n        \"https\": None\n    }\n\n    async def get(self, url: Union[str, List[str]], *, params: Optional[Dict[str, Any]] = None, headers: Optional[Dict[str, str]] = None, cookies: Optional[Dict[str, str]] = None, verify: bool = True, use_proxy: bool = True, proxy: Optional[Dict[str, str]] = None, timeout: int = 30, **kwargs) -> httpx.Response:\n        if isinstance(url, list):\n            return await self._get_first_successful(url, params=params, headers=headers, cookies=cookies, verify=verify, use_proxy=use_proxy, proxy=proxy, timeout=timeout, **kwargs)\n        else:\n            return await self._get_single(url, params=params, headers=headers, cookies=cookies, verify=verify, use_proxy=use_proxy, proxy=proxy, timeout=timeout, **kwargs)\n\n    async def _get_first_successful(self, urls: List[str], **kwargs) -> httpx.Response:\n        for url in urls:\n            try:\n                response = await self._get_single(url, **kwargs)\n                if response.status_code < 400:\n                    return response\n            except Exception as e:\n                pass\n        raise Exception(\"All URLs failed\")\n\n    async def _get_single(self, url: str, *, params: Optional[Dict[str, Any]] = None, headers: Optional[Dict[str, str]] = None, cookies: Optional[Dict[str, str]] = None, verify: bool = True, use_proxy: bool = True, proxy: Optional[Dict[str, str]] = None, timeout: int = 30, **kwargs) -> httpx.Response:\n        proxies = {}\n        if use_proxy and self.proxy[\"http\"] is not None:\n            proxies[\"http\"] = self.proxy[\"http\"]\n        if use_proxy and self.proxy[\"https\"] is not None:\n            proxies[\"https\"] = self.proxy[\"https\"]\n        if proxy is not None:\n            proxies.update(proxy)\n        async with httpx.AsyncClient(proxies=proxies, verify=verify, timeout=timeout) as client:\n            return await client.get(url, params=params, headers=headers, cookies=cookies, **kwargs)\n\n    async def post(self, url: str, *, data: Optional[Dict[str, Any]] = None, content: Any = None, files: Any = None, verify: bool = True, use_proxy: bool = True, proxy: Optional[Dict[str, str]] = None, json: Optional[Dict[str, Any]] = None, params: Optional[Dict[str, str]] = None, headers: Optional[Dict[str, str]] = None, cookies: Optional[Dict[str, str]] = None, timeout: int = 30, **kwargs) -> httpx.Response:\n        proxies = {}\n        if use_proxy and self.proxy[\"http\"] is not None:\n            proxies[\"http\"] = self.proxy[\"http\"]\n        if use_proxy and self.proxy[\"https\"] is not None:\n            proxies[\"https\"] = self.proxy[\"https\"]\n        if proxy is not None:\n            proxies.update(proxy)\n        async with httpx.AsyncClient(proxies=proxies, verify=verify, timeout=timeout) as client:\n            return await client.post(url, data=data, content=content, files=files, json=json, params=params, headers=headers, cookies=cookies, **kwargs)\n\n    async def download_file(self, url: Union[str, List[str]], path: Union[str, Path], *, params: Optional[Dict[str, str]] = None, verify: bool = True, use_proxy: bool = True, proxy: Optional[Dict[str, str]] = None, headers: Optional[Dict[str, str]] = None, cookies: Optional[Dict[str, str]] = None, timeout: int = 30, **kwargs) -> bool:\n        if isinstance(url, list):\n            for u in url:\n                try:\n                    response = await self.get(u, params=params, verify=verify, use_proxy=use_proxy, proxy=proxy, headers=headers, cookies=cookies, timeout=timeout, **kwargs)\n                    if response.status_code < 400:\n                        with open(path, 'wb') as f:\n                            f.write(response.content)\n                        return True\n                except Exception as e:\n                    continue\n            return False\n        else:\n            try:\n                response = await self.get(url, params=params, verify=verify, use_proxy=use_proxy, proxy=proxy, headers=headers, cookies=cookies, timeout=timeout, **kwargs)\n                if response.status_code < 400:\n                    with open(path, 'wb') as f:\n                        f.write(response.content)\n                    return True\n            except Exception as e:\n                return False\n            return False"
  },
  {
    "Task_id": 59,
    "Instruction": "Task Description: Create a Python class that interacts with a REST API, handling both synchronous and asynchronous task creation, with proper error handling and API availability checking.\n\nClass Description: The `Api` class provides an interface to interact with a REST API, allowing for synchronous and asynchronous task creation. It includes methods to verify API availability, create tasks, and handle API responses and errors.\n\nAttributes:\n- _api_url: str - The base URL of the API endpoint, defaults to \"http://127.0.0.1:8000\" if not provided\n- _create_response_files: bool - Flag indicating whether to create response files (unused in current implementation)\n\nMethods:\n- __init__(api_url: Optional[str] = None, create_response_files: bool = True) -> None - Initializes the API client with optional custom URL and response file setting\n- is_api_running() -> bool - Checks if the API is available by making a GET request to the base endpoint\n- create_async_task(data, scraper_name=None) -> dict - Creates an asynchronous task by sending a POST request with the provided data\n- create_sync_task(data, scraper_name=None) -> dict - Creates a synchronous task by sending a POST request with the provided data\n- _make_api_url(path) -> str - Helper method to construct full API URLs by combining base URL with endpoint path\n- _raise_for_status(response) -> None - Internal method to handle HTTP response status codes and raise appropriate exceptions",
    "Canonical_solution": "import requests\nfrom requests.exceptions import ConnectionError\nfrom typing import Optional\n\nclass ApiException(Exception):\n    pass\n\nclass Api:\n    def __init__(self, api_url: Optional[str] = None, create_response_files: bool = True) -> None:\n        DEFAULT_API_URL = \"http://127.0.0.1:8000\"\n        self._api_url = api_url if api_url else DEFAULT_API_URL\n        self._create_response_files = create_response_files\n        if not self.is_api_running():\n            raise ApiException(f\"API at {self._api_url} is not running. Please check if the API is up and running.\")\n\n    def _make_api_url(self, path):\n        return f\"{self._api_url}/{path}\"\n\n    def is_api_running(self) -> bool:\n        try:\n            response = requests.get(self._make_api_url(\"api\"))\n            return response.status_code == 200\n        except ConnectionError:\n            raise ApiException(f\"API at {self._api_url} is not running. Check the network connection or verify if the API is running on a different endpoint.\")\n\n    def create_async_task(self, data, scraper_name=None):\n        url = self._make_api_url(\"api/tasks/create-task-async\")\n        payload = {\n            \"data\": data,\n            \"scraper_name\": scraper_name,\n        }\n        response = requests.post(url, json=payload)\n        self._raise_for_status(response)\n        return response.json()\n\n    def create_sync_task(self, data, scraper_name=None):\n        url = self._make_api_url(\"api/tasks/create-task-sync\")\n        payload = {\n            \"data\": data,\n            \"scraper_name\": scraper_name,\n        }\n        response = requests.post(url, json=payload)\n        self._raise_for_status(response)\n        return response.json()\n\n    def _raise_for_status(self, response):\n        if 400 <= response.status_code < 500:\n            data = response.json()\n            message = data.get(\"message\")\n            if message:\n                raise ApiException(message)\n            else:\n                response.raise_for_status()    \n        elif 500 <= response.status_code < 600:\n            response.raise_for_status()",
    "Code_level": "Class-level",
    "FSMID_for_test": 57,
    "right_result": "import requests\nimport asyncio\nimport aiohttp\n\nclass Api:\n    def __init__(self, api_url: Optional[str] = None, create_response_files: bool = True) -> None:\n        self._api_url = api_url or \"http://127.0.0.1:8000\"\n        self._create_response_files = create_response_files\n\n    def is_api_running(self) -> bool:\n        try:\n            response = requests.get(self._make_api_url(\"\"))\n            return response.status_code == 200\n        except requests.exceptions.RequestException:\n            return False\n\n    async def create_async_task(self, data, scraper_name=None):\n        url = self._make_api_url(\"tasks\")\n        payload = {\"data\": data, \"scraper_name\": scraper_name}\n        async with aiohttp.ClientSession() as session:\n            async with session.post(url, json=payload) as response:\n                await self._raise_for_status(response)\n                return await response.json()\n\n    def create_sync_task(self, data, scraper_name=None):\n        url = self._make_api_url(\"tasks\")\n        payload = {\"data\": data, \"scraper_name\": scraper_name}\n        response = requests.post(url, json=payload)\n        self._raise_for_status(response)\n        return response.json()\n\n    def _make_api_url(self, path):\n        return f\"{self._api_url}{path}\"\n\n    def _raise_for_status(self, response):\n        if response.status_code >= 400:\n            raise Exception(f\"API request failed with status code {response.status_code}\")"
  },
  {
    "Task_id": 61,
    "Instruction": "Task Description: Implement a set of functions for interacting with an OCR (Optical Character Recognition) service through HTTP requests, including uploading files for OCR processing, making OCR requests, and retrieving results.\n\nFunction Description: The functions provide a client-side interface to communicate with an OCR service API, handling file uploads, processing requests, and result retrieval.\n\nInput:\n- ocr_upload():\n  - file_path: str - Path to the file to be processed\n  - ocr_cache: bool - Whether to cache the OCR results\n  - prompt: str - Optional prompt text for the OCR processing\n  - prompt_file: str - Optional path to a file containing the prompt\n  - model: str - Model to use for OCR (default: 'llama3.1')\n  - strategy: str - Processing strategy (default: 'llama_vision')\n  - storage_profile: str - Storage profile to use (default: 'default')\n  - storage_filename: str - Optional custom filename for storage\n  - language: str - Language for OCR processing (default: 'en')\n\n- ocr_request():\n  - file_path: str - Path to the file to be processed\n  - ocr_cache: bool - Whether to cache the OCR results\n  - prompt: str - Optional prompt text for the OCR processing\n  - prompt_file: str - Optional path to a file containing the prompt\n  - model: str - Model to use for OCR (default: 'llama3.1')\n  - strategy: str - Processing strategy (default: 'llama_vision')\n  - storage_profile: str - Storage profile to use (default: 'default')\n  - storage_filename: str - Optional custom filename for storage\n  - language: str - Language for OCR processing (default: 'en')\n\n- get_result():\n  - task_id: str - The task ID returned from upload/request\n  - print_progress: bool - Whether to print progress updates (default: False)\n\nOutput:\n- ocr_upload() and ocr_request():\n  - Returns: dict - Either contains 'task_id' for async processing or 'text' for immediate results\n  - Returns None on failure\n\n- get_result():\n  - Returns: dict - The final OCR result when state is 'SUCCESS'\n  - Returns None if task failed or encountered errors",
    "Canonical_solution": "import os\nimport requests\nimport base64\n\ndef ocr_upload(file_path, ocr_cache, prompt, prompt_file=None, model='llama3.1', strategy='llama_vision', storage_profile='default', storage_filename=None, language='en'):\n    ocr_url = os.getenv('OCR_UPLOAD_URL', 'http://localhost:8000/ocr/upload')\n    files = {'file': open(file_path, 'rb')}\n    data = {'ocr_cache': ocr_cache, 'model': model, 'strategy': strategy, 'storage_profile': storage_profile, 'language': language}\n\n    if storage_filename:\n        data['storage_filename'] = storage_filename\n    \n    try:\n        if prompt_file:\n            prompt = open(prompt_file, 'r').read()\n    except FileNotFoundError:\n        print(f\"Prompt file not found: {prompt_file}\")\n        return None\n    \n    if prompt:\n        data['prompt'] = prompt\n\n    response = requests.post(ocr_url, files=files, data=data)\n    if response.status_code == 200:\n        respObject = response.json()\n        if respObject.get('task_id'):\n            return {\n                \"task_id\": respObject.get('task_id')\n            }\n        else:\n            return {\n                \"text\": respObject.get('text')\n            }\n    else:\n        print(f\"Failed to upload file: {response.text}\")\n        return None\n\ndef ocr_request(file_path, ocr_cache, prompt, prompt_file=None, model='llama3.1', strategy='llama_vision', storage_profile='default', storage_filename=None, language='en'):\n    ocr_url = os.getenv('OCR_REQUEST_URL', 'http://localhost:8000/ocr/request')\n    with open(file_path, 'rb') as f:\n        file_content = base64.b64encode(f.read()).decode('utf-8')\n    \n    data = {\n        'ocr_cache': ocr_cache,\n        'model': model,\n        'strategy': strategy,\n        'storage_profile': storage_profile,\n        'file': file_content,\n        'language': language\n    }\n\n    if storage_filename:\n        data['storage_filename'] = storage_filename\n    \n    if prompt_file:\n        try:\n            prompt = open(prompt_file, 'r').read()\n        except FileNotFoundError:\n            print(f\"Prompt file not found: {prompt_file}\")\n            return None\n    \n    if prompt:\n        data['prompt'] = prompt\n    \n    response = requests.post(ocr_url, json=data)\n    if response.status_code == 200:\n        respObject = response.json()\n        if respObject.get('task_id'):\n            return {\n                \"task_id\": respObject.get('task_id')\n            }\n        else:\n            return {\n                \"text\": respObject.get('text')\n            }\n    else:\n        print(f\"Error: {response.status_code} - {response.text}\")\n        return None\n\ndef get_result(task_id, print_progress = False):\n    extracted_text_printed_once = False\n    result_url = os.getenv('RESULT_URL', f'http://localhost:8000/ocr/result/')\n    while True:\n        response = requests.get(result_url + task_id)\n        result = response.json()\n        if result['state'] != 'SUCCESS' and print_progress:\n            task_info = result.get('info')\n            if task_info is not None:\n                if task_info.get('extracted_text'):\n                    if not extracted_text_printed_once:\n                        extracted_text_printed_once = True\n                        print(\"Extracted text: \" + task_info.get('extracted_text'))\n                    else:\n                        del task_info['extracted_text']\n                del task_info['start_time']\n            print(result)\n        if response.status_code == 200:\n            if result['state'] == 'SUCCESS':\n                return result['result']\n            elif result['state'] == 'FAILURE':\n                print(\"OCR task failed.\")\n                return None\n        time.sleep(2)",
    "Code_level": "Function-level",
    "FSMID_for_test": 57,
    "right_result": "import requests\nimport os\n\ndef ocr_upload(file_path, ocr_cache, prompt=None, prompt_file=None, model='llama3.1', strategy='llama_vision', storage_profile='default', storage_filename=None, language='en'):\n    url = 'https://ocr-service.com/upload'\n    files = {'file': open(file_path, 'rb')}\n    data = {\n        'ocr_cache': str(ocr_cache),\n        'model': model,\n        'strategy': strategy,\n        'storage_profile': storage_profile,\n        'language': language\n    }\n    if prompt:\n        data['prompt'] = prompt\n    elif prompt_file and os.path.exists(prompt_file):\n        with open(prompt_file, 'r') as f:\n            data['prompt'] = f.read()\n    response = requests.post(url, files=files, data=data)\n    if response.status_code == 200:\n        result = response.json()\n        if 'task_id' in result:\n            return result\n        elif 'text' in result:\n            return result\n    return None\n\ndef ocr_request(file_path, ocr_cache, prompt=None, prompt_file=None, model='llama3.1', strategy='llama_vision', storage_profile='default', storage_filename=None, language='en'):\n    url = 'https://ocr-service.com/request'\n    files = {'file': open(file_path, 'rb')}\n    data = {\n        'ocr_cache': str(ocr_cache),\n        'model': model,\n        'strategy': strategy,\n        'storage_profile': storage_profile,\n        'language': language\n    }\n    if prompt:\n        data['prompt'] = prompt\n    elif prompt_file and os.path.exists(prompt_file):\n        with open(prompt_file, 'r') as f:\n            data['prompt'] = f.read()\n    response = requests.post(url, files=files, data=data)\n    if response.status_code == 200:\n        result = response.json()\n        if 'task_id' in result:\n            return result\n        elif 'text' in result:\n            return result\n    return None\n\ndef get_result(task_id, print_progress=False):\n    url = f'https://ocr-service.com/result/{task_id}'\n    response = requests.get(url)\n    if response.status_code == 200:\n        result = response.json()\n        if result['state'] == 'SUCCESS':\n            return result\n    return None"
  },
  {
    "Task_id": 65,
    "Instruction": "Task Description: Implement a function to perform web searches using Google's Custom Search JSON API, handling both regular web searches and image searches, with proper error handling and response processing.\n\nFunction Description: The function performs a web search using Google's Custom Search API, constructs the appropriate API request based on search type, processes the response, and returns formatted results. It handles API keys, pagination, and different search types (web/image).\n\nInput:\n- keywords: (str or list) - Search terms as either a string or list of strings\n- paper_num: (int, optional) - Page number for paginated results (default=1)\n\nOutput:\n- Returns either:\n  - A formatted string containing search results (snippets and URLs) with date information\n  - An error message if the request fails (either HTTP error or exception)\n  - A message suggesting to check next page if no results found\n\nThe function also prints debug information including status code and response body to stdout.",
    "Canonical_solution": "import json\nfrom datetime import date\nimport requests\nfrom ..config import config_path, load_api_keys\n\napi_keys = load_api_keys(config_path)\ng_api_key = api_keys.get(\"google_api_key\")\ng_CSE_ID = api_keys.get(\"CSE_ID\")\ng_searchType = \"web\"\n\ndef search_web(keywords, paper_num=1):\n    if paper_num == \"\":\n        paper_num = 1\n    today = str(date.today())\n    global g_api_key, g_CSE_ID, g_searchType\n    num_results = 10\n    start = num_results * (int(paper_num) - 1) + 1\n    try:\n        base_url = \"https://www.googleapis.com/customsearch/v1\"\n        if g_searchType == \"image\":\n            params = {\n                \"key\": g_api_key,\n                \"cx\": g_CSE_ID,\n                \"num\": num_results,\n                \"q\": keywords if isinstance(keywords, str) else \" \".join(keywords),\n                \"start\": start,\n                \"searchType\": g_searchType,\n            }\n        else:\n            params = {\n                \"key\": g_api_key,\n                \"cx\": g_CSE_ID,\n                \"num\": num_results,\n                \"q\": keywords if isinstance(keywords, str) else \" \".join(keywords),\n                \"start\": start,\n            }\n\n        response = requests.get(base_url, params=params, timeout=10)\n        print(\"Status code:\", response.status_code)\n        print(\"Response body:\", response.text)\n\n        data = response.json()\n        all_content = \"\"\n        if response.status_code == 200:\n            data = response.json()\n            if \"items\" in data:\n                for item in data[\"items\"]:\n                    keyword = item[\"snippet\"]\n                    url = item[\"link\"]\n                    all_content += \"/n/n\" + json.dumps({\"snippet\": keyword, \"link\": url}, ensure_ascii=False, indent=4)\n\n        else:\n            return f\"Error: {response.status_code} - {response.text}\"\n\n    except Exception as e:\n        return f\"Exception occurred: {e}\"\n\n    print(all_content)\n    return (\n        \"\u4eca\u5929\u7684\u65e5\u671f\u662f\"\n        + today\n        + \"\uff0c\u5f53\u524d\u7f51\u7edc\u7684\u4fe1\u606f\u548c\u4fe1\u606f\u6765\u6e90\u7684\u7f51\u5740\u4e3a\uff1a\u201c\"\n        + str(all_content)\n        + \"\u201d\u3002/n\u5982\u679c\u4ee5\u4e0a\u4fe1\u606f\u4e2d\u6ca1\u6709\u76f8\u5173\u4fe1\u606f\uff0c\u4f60\u53ef\u4ee5\u6539\u53d8paper_num\uff0c\u67e5\u770b\u4e0b\u4e00\u9875\u7684\u4fe1\u606f\u3002\"\n    )",
    "Code_level": "Function-level",
    "FSMID_for_test": 57,
    "right_result": "import requests\nfrom datetime import datetime\nfrom urllib.parse import quote\n\ndef google_custom_search(keywords, paper_num=1, cse_id='YOUR_CSE_ID', api_key='YOUR_API_KEY'):\n    search_type = 'web'\n    if isinstance(keywords, list):\n        keywords = ' '.join(keywords)\n    if 'image' in keywords.lower():\n        search_type = 'image'\n        keywords = keywords.replace('image', '').strip()\n    url = f'https://www.googleapis.com/customsearch/v1?q={quote(keywords)}&cx={cse_id}&key={api_key}'\n    if search_type == 'image':\n        url += '&searchType=image'\n    url += f'&start={paper_num * 10}'\n    try:\n        response = requests.get(url)\n        response.raise_for_status()\n    except requests.exceptions.RequestException as e:\n        print(f\"Error occurred: {e}\")\n        print(f\"Status code: {response.status_code} (if applicable)\")\n        print(f\"Response body: {response.text}\")\n        return str(e)\n    results = response.json()\n    if 'error' in results:\n        print(f\"API Error: {results['error']['message']}\")\n        print(f\"Status code: {response.status_code}\")\n        print(f\"Response body: {response.text}\")\n        return results['error']['message']\n    if not results.get('items'):\n        print(f\"No results found for '{keywords}' on page {paper_num}.\")\n        print(f\"Status code: {response.status_code}\")\n        print(f\"Response body: {response.text}\")\n        return \"No results found. Please check next page.\"\n    formatted_results = []\n    for item in results['items']:\n        title = item.get('title', '')\n        link = item.get('link', '')\n        snippet = item.get('snippet', '')\n        if search_type == 'image':\n            image_link = item.get('image', {}).get('thumbnailLink', '')\n            formatted_results.append(f\"Title: {title}\\nImage Link: {image_link}\\nURL: {link}\\nSnippet: {snippet}\")\n        else:\n            date_str = item.get('pagemap', {}).get('cse_image', [{}])[0].get('src', '')\n            if date_str:\n                try:\n                    date = datetime.strptime(date_str, '%Y-%m-%d')\n                    date_str = date.strftime('%B %d, %Y')\n                except ValueError:\n                    date_str = 'Unknown date'\n            formatted_results.append(f\"Title: {title}\\nDate: {date_str}\\nURL: {link}\\nSnippet: {snippet}\")\n    return '\\n\\n'.join(formatted_results)"
  },
  {
    "Task_id": 68,
    "Instruction": "Task Description: Download a comic image from the xkcd website given a specific issue number.\n\nFunction Description: The function downloads an image from the xkcd comic website by first fetching the webpage of the specified issue number, parsing the HTML to extract the image URL, and then downloading the image to the local filesystem. It handles HTTP requests and responses, checks for success status codes, and saves the image using streaming to avoid memory issues with large files.\n\nInput: \n- issue_number: [str] - The issue number of the comic to download (e.g., \"1234\"). This is appended to the base xkcd URL to form the full webpage URL.\n\nOutput: \n- [str] - A success message indicating the downloaded image filename if successful, or an error message if the request fails or the issue number is invalid.",
    "Canonical_solution": "import requests\nfrom bs4 import BeautifulSoup as bs\nimport shutil\n\ndef download_comic_image(issue_number):\n    url = \"https://xkcd.com/\"+ issue_number\n    response = requests.get(url)\n\n    if response.status_code == 200:\n        soup = bs(response.content, 'html.parser')\n        image_link = soup.find_all('img')[2]['src']\n        image_name = image_link.split('/')[-1]\n        image_url = \"https:\" + image_link\n        r = requests.get(image_url, stream=True)\n        \n        if r.status_code == 200:\n            r.raw.decode_content = True\n            with open(image_name, 'wb') as f:\n                shutil.copyfileobj(r.raw, f)\n            return f'Image successfully Downloaded: {image_name}'\n        else:\n            return 'Image Couldn\\'t be retrieved'\n    else:\n        return \"Issue number is invalid\"",
    "Code_level": "Function-level",
    "FSMID_for_test": 57,
    "right_result": "import requests\nfrom bs4 import BeautifulSoup\nimport os\n\ndef download_xkcd_comic(issue_number):\n    base_url = \"https://xkcd.com/\"\n    webpage_url = base_url + issue_number\n    response = requests.get(webpage_url)\n    \n    if response.status_code != 200:\n        return f\"Failed to retrieve comic page for issue {issue_number}. Status code: {response.status_code}\"\n    \n    soup = BeautifulSoup(response.text, 'html.parser')\n    image_element = soup.find('div', {'id': 'comic'})\n    if not image_element:\n        return f\"Comic image not found for issue {issue_number}\"\n    \n    image_url = image_element.find('img')['src']\n    full_image_url = \"https:\" + image_url\n    \n    filename = f\"xkcd_{issue_number}.png\"\n    with requests.get(full_image_url, stream=True) as r:\n        r.raise_for_status()\n        with open(filename, 'wb') as f:\n            for chunk in r.iter_content(chunk_size=8192):\n                f.write(chunk)\n    \n    return f\"Downloaded comic for issue {issue_number} as {filename}\""
  },
  {
    "Task_id": 69,
    "Instruction": "Task Description: Create a Python class to interact with the Walmart Marketplace API, handling authentication, order management, and inventory operations.\n\nClass Description: The WalmartAPI class provides methods to authenticate with and interact with the Walmart Marketplace API. It supports user verification, order retrieval and acknowledgment, as well as inventory management operations.\n\nAttributes:\napi_key: str - Walmart API key for authentication\naccess_token: str - Access token for API authorization\nmarketplace_id: str - Marketplace identifier for API requests\n\nMethods:\nverify_user: verify_user() -> None - Verifies the current access token corresponds to a valid user. Raises exception if verification fails.\nget_orders: get_orders(status: str, start_date: Optional[datetime], end_date: Optional[datetime], limit: int) -> List[Dict] - Retrieves orders from Walmart Marketplace with optional filters for status, date range, and limit.\nacknowledge_order: acknowledge_order(purchase_order_id: str) -> str - Acknowledges a specific order by purchase order ID.\nget_inventory: get_inventory(sku_list: List[str]) -> List[Dict] - Gets inventory levels for specified SKUs or all inventory if no SKUs provided.\nupdate_inventory: update_inventory(sku: str, quantity: int) -> str - Updates inventory quantity for a specific SKU.",
    "Canonical_solution": "import os\nimport logging\nimport requests\nfrom datetime import datetime, timedelta\nfrom typing import List, Dict, Optional\n\nclass WalmartAPI:\n    def __init__(self, api_key: str = None, access_token: str = None, marketplace_id: str = None):\n        self.api_key = api_key\n        self.access_token = access_token\n        self.marketplace_id = marketplace_id\n\n    def verify_user(self):\n        \"\"\"\n        Verifies that the current access token corresponds to a valid user.\n        If verification fails, raises an exception.\n        \"\"\"\n        logging.info(f\"Verifying user with token: {self.access_token}\")\n        headers = {\n            \"WM_SEC.ACCESS_TOKEN\": self.access_token,\n            \"WM_SVC.NAME\": \"Walmart Marketplace\",\n            \"WM_QOS.CORRELATION_ID\": self.marketplace_id,\n            \"Accept\": \"application/json\",\n        }\n\n        response = requests.get(\n            \"https://marketplace.walmartapis.com/v3/seller/info\", headers=headers\n        )\n\n        if response.status_code != 200:\n            raise Exception(\n                f\"User verification failed. Status: {response.status_code}, \"\n                f\"Response: {response.text}\"\n            )\n\n    async def get_orders(\n        self,\n        status: str = \"Created\",\n        start_date: Optional[datetime] = None,\n        end_date: Optional[datetime] = None,\n        limit: int = 100,\n    ) -> List[Dict]:\n        \"\"\"\n        Retrieves orders from Walmart Marketplace.\n        \"\"\"\n        try:\n            self.verify_user()\n\n            if not start_date:\n                start_date = datetime.now() - timedelta(days=7)\n            if not end_date:\n                end_date = datetime.now()\n\n            headers = {\n                \"WM_SEC.ACCESS_TOKEN\": self.access_token,\n                \"WM_SVC.NAME\": \"Walmart Marketplace\",\n                \"WM_QOS.CORRELATION_ID\": self.marketplace_id,\n                \"Accept\": \"application/json\",\n            }\n\n            params = {\n                \"status\": status,\n                \"createdStartDate\": start_date.isoformat(),\n                \"createdEndDate\": end_date.isoformat(),\n                \"limit\": limit,\n            }\n\n            response = requests.get(\n                \"https://marketplace.walmartapis.com/v3/orders\",\n                headers=headers,\n                params=params,\n            )\n\n            if response.status_code != 200:\n                raise Exception(f\"Failed to fetch orders: {response.text}\")\n\n            return response.json().get(\"elements\", [])\n\n        except Exception as e:\n            logging.error(f\"Error retrieving orders: {str(e)}\")\n            return []\n\n    async def acknowledge_order(self, purchase_order_id: str) -> str:\n        \"\"\"\n        Acknowledges a Walmart Marketplace order.\n        \"\"\"\n        try:\n            self.verify_user()\n\n            headers = {\n                \"WM_SEC.ACCESS_TOKEN\": self.access_token,\n                \"WM_SVC.NAME\": \"Walmart Marketplace\",\n                \"WM_QOS.CORRELATION_ID\": self.marketplace_id,\n                \"Content-Type\": \"application/json\",\n            }\n\n            response = requests.post(\n                f\"https://marketplace.walmartapis.com/v3/orders/{purchase_order_id}/acknowledge\",\n                headers=headers,\n            )\n\n            if response.status_code == 204:\n                return \"Order acknowledged successfully.\"\n            else:\n                raise Exception(f\"Failed to acknowledge order: {response.text}\")\n\n        except Exception as e:\n            logging.error(f\"Error acknowledging order: {str(e)}\")\n            return f\"Failed to acknowledge order: {str(e)}\"\n\n    async def get_inventory(self, sku_list: List[str] = None) -> List[Dict]:\n        \"\"\"\n        Gets inventory levels for specified SKUs.\n        \"\"\"\n        try:\n            self.verify_user()\n\n            headers = {\n                \"WM_SEC.ACCESS_TOKEN\": self.access_token,\n                \"WM_SVC.NAME\": \"Walmart Marketplace\",\n                \"WM_QOS.CORRELATION_ID\": self.marketplace_id,\n                \"Accept\": \"application/json\",\n            }\n\n            params = {}\n            if sku_list:\n                params[\"sku\"] = \",\".join(sku_list)\n\n            response = requests.get(\n                \"https://marketplace.walmartapis.com/v3/inventory\",\n                headers=headers,\n                params=params,\n            )\n\n            if response.status_code != 200:\n                raise Exception(f\"Failed to fetch inventory: {response.text}\")\n\n            return response.json().get(\"elements\", [])\n\n        except Exception as e:\n            logging.error(f\"Error retrieving inventory: {str(e)}\")\n            return []\n\n    async def update_inventory(self, sku: str, quantity: int) -> str:\n        \"\"\"\n        Updates inventory quantity for a specific SKU.\n        \"\"\"\n        try:\n            self.verify_user()\n\n            headers = {\n                \"WM_SEC.ACCESS_TOKEN\": self.access_token,\n                \"WM_SVC.NAME\": \"Walmart Marketplace\",\n                \"WM_QOS.CORRELATION_ID\": self.marketplace_id,\n                \"Content-Type\": \"application/json\",\n            }\n\n            data = {\"sku\": sku, \"quantity\": {\"unit\": \"EACH\", \"amount\": quantity}}\n\n            response = requests.put(\n                f\"https://marketplace.walmartapis.com/v3/inventory\",\n                headers=headers,\n                json=data,\n            )\n\n            if response.status_code == 200:\n                return \"Inventory updated successfully.\"\n            else:\n                raise Exception(f\"Failed to update inventory: {response.text}\")\n\n        except Exception as e:\n            logging.error(f\"Error updating inventory: {str(e)}\")\n            return f\"Failed to update inventory: {str(e)}\"",
    "Code_level": "Class-level",
    "FSMID_for_test": 57,
    "right_result": "import requests\nfrom datetime import datetime, timedelta\nfrom typing import List, Dict, Optional\n\nclass WalmartAPI:\n    def __init__(self, api_key: str, marketplace_id: str):\n        self.api_key = api_key\n        self.marketplace_id = marketplace_id\n        self.access_token = self._get_access_token()\n    \n    def _get_access_token(self) -> str:\n        url = \"https://marketplace.walmartapis.com/v3/auth/token\"\n        payload = {\n            \"grant_type\": \"client_credentials\",\n            \"client_id\": self.api_key,\n            \"client_secret\": self.api_key\n        }\n        response = requests.post(url, data=payload)\n        response.raise_for_status()\n        return response.json()[\"access_token\"]\n    \n    def _refresh_access_token(self) -> str:\n        url = \"https://marketplace.walmartapis.com/v3/auth/token\"\n        payload = {\n            \"grant_type\": \"client_credentials\",\n            \"client_id\": self.api_key,\n            \"client_secret\": self.api_key\n        }\n        response = requests.post(url, data=payload)\n        response.raise_for_status()\n        self.access_token = response.json()[\"access_token\"]\n        return self.access_token\n    \n    def verify_user(self) -> None:\n        url = f\"https://marketplace.walmartapis.com/v3/marketplace/{self.marketplace_id}/user\"\n        headers = {\n            \"Authorization\": f\"Bearer {self.access_token}\"\n        }\n        response = requests.get(url, headers=headers)\n        if response.status_code == 401:\n            self._refresh_access_token()\n            response = requests.get(url, headers=headers)\n        response.raise_for_status()\n    \n    def get_orders(self, status: str, start_date: Optional[datetime], end_date: Optional[datetime], limit: int) -> List[Dict]:\n        url = f\"https://marketplace.walmartapis.com/v3/orders\"\n        headers = {\n            \"Authorization\": f\"Bearer {self.access_token}\",\n            \"Content-Type\": \"application/json\"\n        }\n        params = {\n            \"status\": status,\n            \"limit\": limit\n        }\n        if start_date:\n            params[\"start_date\"] = start_date.strftime(\"%Y-%m-%d\")\n        if end_date:\n            params[\"end_date\"] = end_date.strftime(\"%Y-%m-%d\")\n        response = requests.get(url, headers=headers, params=params)\n        response.raise_for_status()\n        return response.json()[\"orders\"]\n    \n    def acknowledge_order(self, purchase_order_id: str) -> str:\n        url = f\"https://marketplace.walmartapis.com/v3/orders/{purchase_order_id}/acknowledge\"\n        headers = {\n            \"Authorization\": f\"Bearer {self.access_token}\",\n            \"Content-Type\": \"application/json\"\n        }\n        response = requests.post(url, headers=headers)\n        response.raise_for_status()\n        return response.json()[\"message\"]\n    \n    def get_inventory(self, sku_list: List[str]) -> List[Dict]:\n        url = f\"https://marketplace.walmartapis.com/v3/inventory\"\n        headers = {\n            \"Authorization\": f\"Bearer {self.access_token}\",\n            \"Content-Type\": \"application/json\"\n        }\n        if sku_list:\n            payload = {\"skus\": sku_list}\n        else:\n            payload = {}\n        response = requests.post(url, headers=headers, json=payload)\n        response.raise_for_status()\n        return response.json()[\"inventory\"]\n    \n    def update_inventory(self, sku: str, quantity: int) -> str:\n        url = f\"https://marketplace.walmartapis.com/v3/inventory/{sku}\"\n        headers = {\n            \"Authorization\": f\"Bearer {self.access_token}\",\n            \"Content-Type\": \"application/json\"\n        }\n        payload = {\"quantity\": quantity}\n        response = requests.put(url, headers=headers, json=payload)\n        response.raise_for_status()\n        return response.json()[\"message\"]"
  },
  {
    "Task_id": 70,
    "Instruction": "Task Description: Implement a function to load and validate tool configurations from remote URLs by making HTTP requests and processing the responses.\n\nFunction Description: The function `load_valid_tools` takes a dictionary of tool mappings and attempts to fetch each tool's configuration from a remote server. It constructs URLs by appending \".well-known/ai-plugin.json\" to each base URL in the input dictionary. For each successful HTTP GET request (status code 200), it parses the JSON response and adds it to the output dictionary. Failed requests are logged as warnings.\n\nInput: \n- tools_mappings: [dict] - A dictionary where keys are tool identifiers and values are base URLs for the tools' configuration endpoints.\n\nOutput: \n- tools_to_config: [dict] - A dictionary where keys are the same as the input dictionary, and values are the parsed JSON configurations from successful requests. Tools with failed requests are excluded.",
    "Canonical_solution": "import requests\nimport os\nfrom bmtools import get_logger\n\nlogger = get_logger(__name__)\n\ndef load_valid_tools(tools_mappings):\n    tools_to_config = {}\n    for key in tools_mappings:\n        get_url = tools_mappings[key]+\".well-known/ai-plugin.json\"\n        \n        response = requests.get(get_url)\n\n        if response.status_code == 200:\n            tools_to_config[key] = response.json()\n        else:\n            logger.warning(\"Load tool {} error, status code {}\".format(key, response.status_code))\n\n    return tools_to_config",
    "Code_level": "Function-level",
    "FSMID_for_test": 57,
    "right_result": "import requests\nimport logging\n\nlogging.basicConfig(level=logging.WARNING)\n\ndef load_valid_tools(tools_mappings):\n    tools_to_config = {}\n    for tool_id, base_url in tools_mappings.items():\n        url = f\"{base_url}.well-known/ai-plugin.json\"\n        try:\n            response = requests.get(url, timeout=10)\n            if response.status_code == 200:\n                config = response.json()\n                tools_to_config[tool_id] = config\n        except requests.RequestException as e:\n            logging.warning(f\"Failed to fetch configuration for {tool_id}: {str(e)}\")\n    return tools_to_config"
  },
  {
    "Task_id": 72,
    "Instruction": "Task Description: Create a Python function that interacts with two different APIs: one for text-to-image generation (Hugging Face) and another for cloud storage (Firebase). The function should first generate an image from text using Hugging Face's API, then upload the resulting image to Firebase Storage.\n\nFunction Description: The function should take a text prompt as input, use it to generate an image via Hugging Face's API, and then upload that image to Firebase Storage. It should handle API errors gracefully and return the Firebase URL of the uploaded image.\n\nInput:\n- prompt (str): The text prompt to be converted into an image\n- destination_path (str): The path where the image should be stored in Firebase Storage\n\nOutput:\n- str: The Firebase Storage URL of the uploaded image, or None if either API call fails\n\nTask Description: Create a Python class that encapsulates the functionality for interacting with Hugging Face's text-to-image API and Firebase Storage API.\n\nClass Description: The class should manage API connections and provide methods for generating images from text and storing them in cloud storage. It should store necessary API credentials and configuration.\n\nAttributes:\n- HUGGING_FACE_API_URL (str): The endpoint URL for Hugging Face's text-to-image API\n- FIREBASE_API_URL (str): The base URL for Firebase Storage API\n- headers (dict): Authorization headers for Hugging Face API\n- API_KEY_PARAM (str): The API key parameter for Firebase requests\n- FIREBASE_STORAGE_BUCKET (str): The name of the Firebase Storage bucket\n\nMethods:\n- query(payload: dict) -> bytes: Sends a request to Hugging Face API with the given payload and returns the image data\n- upload_to_firebase_storage(image_data: bytes, destination_path: str) -> str: Uploads image data to Firebase Storage and returns the download URL\n- generate_and_store_image(prompt: str, destination_path: str) -> str: Combines both operations (generation and storage) into a single method",
    "Canonical_solution": "import requests\nfrom pydantic import Field\n\nHUGGING_FACE_API_URL = \"https://api-inference.huggingface.co/models/prompthero/openjourney-v4\"\nheaders = {\"Authorization\": f\"Bearer {HUGGING_FACE_TOKEN}\"}\nFIREBASE_API_URL = f\"https://firebasestorage.googleapis.com/v0/b/{FIREBASE_STORAGE_BUCKET}/o\"\nAPI_KEY_PARAM = f\"key={FIREBASE_API_KEY}\"\n\ndef query(payload):\n    \"\"\"\n    Queries the Hugging Face API to convert text to an image.\n    Args:\n        payload (dict): Input payload for the Hugging Face API.\n    Returns:\n        bytes: Image data.\n    \"\"\"\n    try:\n        response = requests.post(HUGGING_FACE_API_URL, headers=headers, json=payload, timeout=40)\n        return response.content\n    except requests.exceptions.RequestException as e:\n        print(f\"Error from Hugging Face API: {e}\")\n        return None\n\ndef upload_to_firebase_storage(image_data, destination_path):\n    \"\"\"\n    Uploads image data to Firebase Storage.\n    Args:\n        image_data (bytes): Image data to be uploaded.\n        destination_path (str): Path where the image will be stored.\n    Returns:\n        str: Firebase URL of the uploaded image.\n    \"\"\"\n    upload_url = f\"{FIREBASE_API_URL}/{destination_path}?{API_KEY_PARAM}\"\n    headers = {\"Content-Type\": \"image/png\"}\n\n    response = requests.post(upload_url, headers=headers, data=image_data)\n\n    if response.status_code == 200:\n        download_url = response.json().get(\"downloadTokens\", \"\")\n        firebase_url = f\"https://firebasestorage.googleapis.com/v0/b/{FIREBASE_STORAGE_BUCKET}/o/{destination_path}?alt=media&token={download_url}\"\n        return firebase_url\n    else:\n        print(\"Error uploading to Firebase Storage:\", response.content)\n        return None",
    "Code_level": "Function-level",
    "FSMID_for_test": 57,
    "right_result": "class HuggingFaceFirebaseAPI:\n    HUGGING_FACE_API_URL = \"https://api-inference.huggingface.co/models/runwayml/stable-diffusion-v1-5\"\n    FIREBASE_API_URL = \"https://firebasestorage.googleapis.com/v0/b/{FIREBASE_STORAGE_BUCKET}/o\"\n    API_KEY_PARAM = \"upload\"\n    FIREBASE_STORAGE_BUCKET = \"your-firebase-bucket-name\"\n\n    def __init__(self, hugging_face_token, firebase_api_key):\n        self.headers = {\"Authorization\": f\"Bearer {hugging_face_token}\"}\n        self.firebase_headers = {\"Authorization\": f\"Bearer {firebase_api_key}\"}\n\n    def query(self, payload):\n        import requests\n        response = requests.post(self.HUGGING_FACE_API_URL, headers=self.headers, json=payload)\n        if response.status_code != 200:\n            raise Exception(f\"Hugging Face API request failed: {response.status_code}\")\n        return response.content\n\n    def upload_to_firebase_storage(self, image_data, destination_path):\n        import google.auth\n        from google.cloud import storage\n        from urllib.parse import quote\n\n        credentials, _ = google.auth.default()\n        client = storage.Client(credentials=credentials)\n        bucket = client.bucket(self.FIREBASE_STORAGE_BUCKET)\n        blob = bucket.blob(destination_path)\n        blob.upload_from_string(image_data)\n        url = f\"{self.FIREBASE_API_URL}/{quote(destination_path)}?{self.API_KEY_PARAM}\"\n        return url\n\n    def generate_and_store_image(self, prompt, destination_path):\n        try:\n            image_data = self.query({\"inputs\": prompt})\n            firebase_url = self.upload_to_firebase_storage(image_data, destination_path)\n            return firebase_url\n        except Exception as e:\n            print(f\"Error during image generation or upload: {e}\")\n            return None"
  },
  {
    "Task_id": 73,
    "Instruction": "Task Description: Implement HTTP client functions to interact with the Augie video creation API, including creating videos and checking their status.\n\nFunction Description: The first function creates a video on the Augie platform by sending a POST request with the provided parameters. The second function checks the status of a video creation process by sending a GET request with the video ID.\n\nInput: \n1. For create_augie: \n   - params: dict - A dictionary containing video creation parameters (e.g., script, voice settings, etc.)\n2. For get_augie_status: \n   - augie_id: str - The unique identifier of the Augie video to check\n\nOutput:\n1. For create_augie: \n   - dict - The API response containing video creation details if successful (status code 201)\n   - Exception - If the request fails (status code other than 201)\n2. For get_augie_status: \n   - dict - A status dictionary with either {\"status\": \"completed\", \"video_url\": [url]} or {\"status\": \"processing\"}\n   - Exception - If the request fails (status code other than 200)",
    "Canonical_solution": "@func.register_function(\n  metadata={\"description\": \"Creates a video on Augie platform.\"},\n  key_dependencies=[\"augie_api_key\"],\n  imports={\"name\": \"requests\", \"lib\": \"requests\"}\n)\ndef create_augie(params):\n  \"\"\"Function to create a video on Augie platform with parameters.\"\"\"\n  API_KEY = globals()['augie_api_key']\n  BASE_URL = 'https://beta.api.augie.studio/v1'\n\n  headers = {\n      'x-api-key': API_KEY,\n      'Content-Type': 'application/json'\n  }\n\n  import requests\n  response = requests.post(f'{BASE_URL}/augies', json=params, headers=headers)\n\n  if response.status_code == 201:\n      return response.json()  # Returns the creation response\n  else:\n      raise Exception(f\"Failed to create Augie: {response.text}\")\n\n\n@func.register_function(\n  metadata={\"description\": \"Checks the status of the created video.\"},\n  key_dependencies=[\"augie_api_key\"],\n  imports={\"name\": \"requests\", \"lib\": \"requests\"}\n)\ndef get_augie_status(augie_id):\n  \"\"\"Function to check the status of an Augie video creation.\"\"\"\n  API_KEY = globals()['augie_api_key']\n  BASE_URL = 'https://beta.api.augie.studio/v1'\n\n  headers = {\n      'x-api-key': API_KEY\n  }\n\n  import requests\n  response = requests.get(f'{BASE_URL}/augies/{augie_id}/status', headers=headers)\n\n  if response.status_code == 200:\n      status_data = response.json()\n      if status_data.get('status') == 'succeeded' and 'output' in status_data and 'video' in status_data['output']:\n          return {\"status\": \"completed\", \"video_url\": status_data['output']['video']}\n      else:\n          return {\"status\": \"processing\"}\n  else:\n      raise Exception(f\"Failed to get Augie status: {response.text}\")",
    "Code_level": "Function-level",
    "FSMID_for_test": 57,
    "right_result": "import requests\n\ndef create_augie(params):\n    url = \"https://api.augie.video/create\"\n    response = requests.post(url, json=params)\n    if response.status_code == 201:\n        return response.json()\n    else:\n        raise Exception(f\"Failed to create video: {response.status_code} - {response.text}\")\n\ndef get_augie_status(augie_id):\n    url = f\"https://api.augie.video/status/{augie_id}\"\n    response = requests.get(url)\n    if response.status_code == 200:\n        status_data = response.json()\n        if status_data.get(\"status\") == \"completed\":\n            return {\"status\": \"completed\", \"video_url\": status_data.get(\"video_url\")}\n        else:\n            return {\"status\": \"processing\"}\n    else:\n        raise Exception(f\"Failed to get video status: {response.status_code} - {response.text}\")"
  },
  {
    "Task_id": 75,
    "Instruction": "Task Description: Create a Python class that interacts with the AccuWeather API to fetch weather information for a given city using an API key.\n\nClass Description: The AccuWeatherClient class provides functionality to retrieve weather data from AccuWeather's API. It handles API key management and makes HTTP requests to fetch location keys and weather information.\n\nAttributes:\napi_key: str - The AccuWeather API key required for authentication\n\nMethods:\n__init__: (api_key: str = \"\") -> None - Initializes the AccuWeatherClient with an optional API key\nget_weather: (city: str, extensions: str = \"all\") -> str - Fetches weather data for the specified city. The 'extensions' parameter can be \"all\" for current conditions or \"base\" for 5-day forecast. Returns formatted weather information or an error message if no API key is provided.",
    "Canonical_solution": "import json\nimport requests\n\nclass FreeApi:\n    def __init__(self, api_url: str):\n        self.api_url = api_url\n\n    def get_result(self) -> str:\n        response = requests.get(self.api_url)\n        if response.status_code == 200:\n            return response.text\n        else:\n            return None\n\nclass AccuWeatherClient:\n    def __init__(self, api_key: str = \"\"):\n        self.api_key = api_key\n\n    def get_weather(self, city: str, extensions: str = \"all\") -> str:\n        if not self.api_key:\n            return \"\u8bf7\u5148\u5728\u5de5\u5177\uff08tools\uff09\u4e2d\u8f93\u5165accuweather\u7684key\"\n\n        # Query city location key\n        location_api = FreeApi(\n            f\"http://dataservice.accuweather.com/locations/v1/cities/search?apikey={self.api_key}&q={city}&language=zh-CN&details=false\"\n        )\n        result = location_api.get_result()\n\n        if result:\n            data = json.loads(result)\n            city_key = data[0][\"Key\"]\n\n            # Query weather based on key\n            if extensions == \"all\":\n                weather_api = FreeApi(\n                    f\"http://dataservice.accuweather.com/currentconditions/v1/{city_key}?apikey={self.api_key}&language=zh-CN&details=false\"\n                )\n            elif extensions == \"base\":\n                weather_api = FreeApi(\n                    f\"http://dataservice.accuweather.com/forecasts/v1/daily/5day/{city_key}?apikey={self.api_key}&language=zh-CN&details=false\"\n                )\n\n            result = weather_api.get_result()\n            if result:\n                data = json.loads(result)\n                if extensions == \"all\":\n                    return f\"\u67e5\u8be2\u5230\u7684\u5929\u6c14\u4fe1\u606f\u5982\u4e0b\uff1a{str(data[0])}\u8bf7\u6839\u636e\u5929\u6c14\u4fe1\u606f\u56de\u7b54\u7528\u6237\u95ee\u9898\"\n                elif extensions == \"base\":\n                    return f\"\u67e5\u8be2\u5230\u7684\u5929\u6c14\u4fe1\u606f\u5982\u4e0b\uff1a{str(data['DailyForecasts'])}\u8bf7\u6839\u636e\u5929\u6c14\u4fe1\u606f\u56de\u7b54\u7528\u6237\u95ee\u9898\"\n        return None",
    "Code_level": "Class-level",
    "FSMID_for_test": 57,
    "right_result": "import requests\n\nclass AccuWeatherClient:\n    def __init__(self, api_key: str = \"\") -> None:\n        self.api_key = api_key\n        self.base_url = \"http://api.accuweather.com\"\n\n    def get_weather(self, city: str, extensions: str = \"all\") -> str:\n        if not self.api_key:\n            return \"Error: API key is required.\"\n        \n        location_search_url = f\"{self.base_url}/locations/v1/cities/search?apikey={self.api_key}&q={city}\"\n        location_response = requests.get(location_search_url)\n        \n        if location_response.status_code != 200:\n            return f\"Error: Unable to find location. Status code: {location_response.status_code}\"\n        \n        location_key = location_response.json()[0][\"Key\"]\n        \n        weather_url = f\"{self.base_url}/forecasts/v1/daily/5day/{location_key}?apikey={self.api_key}&metric=True\"\n        weather_response = requests.get(weather_url)\n        \n        if weather_response.status_code != 200:\n            return f\"Error: Unable to fetch weather data. Status code: {weather_response.status_code}\"\n        \n        return weather_response.text"
  },
  {
    "Task_id": 82,
    "Instruction": "Task Description: Implement a set of functions to interact with the GitHub API for retrieving release, comparison, pull request, and search information.\n\nFunction Description: The functions provide HTTP client functionality to query GitHub's REST API for specific repository information using authentication tokens.\n\nInput:\n- token: str - GitHub personal access token for authentication\n- repo: str - Repository name in format 'owner/repo'\n- base: str - Base commit/tag for comparison (only for get_github_compare)\n- head: str - Head commit/tag for comparison (only for get_github_compare)\n- pr_number: int - Pull request number (only for get_github_pull_request)\n- sha: str - Commit SHA hash (only for search_github_prs)\n\nOutput:\n- get_github_release: str - Returns the latest release tag name\n- get_github_compare: dict - Returns comparison data between two commits/tags\n- get_github_pull_request: dict - Returns pull request details\n- search_github_prs: dict - Returns search results for merged PRs containing the commit SHA",
    "Canonical_solution": "import requests\n\ndef get_github_release(token, repo):\n    response = requests.get(f\"https://api.github.com/repos/{repo}/releases/latest\", \n                          headers={'Authorization': f'token {token}'})\n    while response.status_code == 401:\n        print(\"Error: Invalid GitHub API token.\")\n        token = input('Token: ').strip()\n        response = requests.get(f\"https://api.github.com/repos/{repo}/releases/latest\", \n                              headers={'Authorization': f'token {token}'})\n    release = response.json()\n    return release[\"tag_name\"]\n\ndef get_github_compare(token, repo, base, head):\n    commits = requests.get(f\"https://api.github.com/repos/{repo}/compare/{base}...{head}\", \n                          headers={'Authorization': f'token {token}'}).json()\n    return commits\n\ndef get_github_pull_request(token, repo, pr_number):\n    pr_details = requests.get(f\"https://api.github.com/repos/{repo}/pulls/{pr_number}\", \n                            headers={'Authorization': f'token {token}'}).json()\n    return pr_details\n\ndef search_github_prs(token, repo, sha):\n    prs = requests.get(f\"https://api.github.com/search/issues?q=repo:{repo}+type:pr+is:merged+{sha}\", \n                      headers={'Authorization': f'token {token}'}).json()\n    return prs",
    "Code_level": "Function-level",
    "FSMID_for_test": 57,
    "right_result": "import requests\nimport json\n\ndef get_github_release(token, repo):\n    url = f\"https://api.github.com/repos/{repo}/releases/latest\"\n    headers = {\"Authorization\": f\"token {token}\"}\n    response = requests.get(url, headers=headers)\n    if response.status_code == 200:\n        return response.json()['tag_name']\n    else:\n        return None\n\ndef get_github_compare(token, repo, base, head):\n    url = f\"https://api.github.com/repos/{repo}/compare/{base}...{head}\"\n    headers = {\"Authorization\": f\"token {token}\"}\n    response = requests.get(url, headers=headers)\n    if response.status_code == 200:\n        return response.json()\n    else:\n        return None\n\ndef get_github_pull_request(token, repo, pr_number):\n    url = f\"https://api.github.com/repos/{repo}/pulls/{pr_number}\"\n    headers = {\"Authorization\": f\"token {token}\"}\n    response = requests.get(url, headers=headers)\n    if response.status_code == 200:\n        return response.json()\n    else:\n        return None\n\ndef search_github_prs(token, repo, sha):\n    url = f\"https://api.github.com/search/issues?q=repo:{repo}+type:pr+merged:true+sha:{sha}\"\n    headers = {\"Authorization\": f\"token {token}\"}\n    response = requests.get(url, headers=headers)\n    if response.status_code == 200:\n        return response.json()\n    else:\n        return None"
  },
  {
    "Task_id": 84,
    "Instruction": "Task Description: Implement a Python function to authenticate with the GitHub API using Basic Authentication, handling both regular credentials and two-factor authentication cases.\n\nFunction Description: The function prompts the user for GitHub credentials (username and password) and attempts to authenticate with the GitHub API. If two-factor authentication is detected (status code 401 with X-Github-OTP header), it guides the user to create and use a personal access token instead. The function returns an authentication object that can be used for subsequent API requests.\n\nInput: None (user input is collected interactively)\n\nOutput: requests.auth.HTTPBasicAuth - An authentication object containing either:\n        1. The provided username and password (if 2FA not required)\n        2. A personal access token (if 2FA is required)\n\nTask Description: Implement a Python function to create multiple labels in a GitHub repository using the GitHub API.\n\nFunction Description: The function reads label definitions from a CSV file and creates them in a specified GitHub repository using authenticated API requests. Each label is created via a separate POST request to the GitHub API.\n\nInput:\n1. auth (requests.auth.HTTPBasicAuth) - Authentication object for GitHub API\n2. filename (str, optional) - Path to CSV file containing label definitions (default: 'etc/default_labels.csv')\n\nOutput: None (side effect: creates labels in GitHub repository)",
    "Canonical_solution": "import requests\nfrom requests.auth import HTTPBasicAuth\nimport json\nimport logging\nimport os\nimport app_config\n\nlogging.basicConfig(format=app_config.LOG_FORMAT)\nlogger = logging.getLogger(__name__)\nlogger.setLevel(app_config.LOG_LEVEL)\n\ndef get_auth():\n    \"\"\"\n    Construct a basic auth object from a username and password\n    \"\"\"\n    username = raw_input('Username: ')\n    password = getpass.getpass('Password: ')\n\n    auth = HTTPBasicAuth(username, password)\n\n    # Test auth by requesting repo events\n    response = requests.get('https://api.github.com/notifications', auth=auth)\n\n    if response.status_code == 401:\n        otp = response.headers.get('X-Github-OTP')\n        if otp and otp.startswith('required'):\n            logger.warn('You are using 2-factor authentication. Please create a personal access token at https://github.com/settings/applications#personal-access-tokens and provide it here')\n            access_token = raw_input('Personal access token: ')\n            auth = HTTPBasicAuth(access_token, '')\n        else:\n            raise Exception('Invalid username or password')\n\n    return auth\n\ndef create_labels(auth, filename='etc/default_labels.csv'):\n    \"\"\"\n    Creates labels in Github issues.\n    \"\"\"\n    url = 'https://api.github.com/repos/%s/labels' % get_repo_path()\n\n    with open(filename) as f:\n        labels = list(csv.DictReader(f))\n\n    logger.info('Creating %i labels' % len(labels))\n\n    for label in labels:\n        logger.info('Creating label \"%s\"' % label['name'])\n        data = json.dumps(label)\n\n        requests.post(url, data=data, auth=auth)",
    "Code_level": "Function-level",
    "FSMID_for_test": 57,
    "right_result": "import requests\nimport csv\n\ndef authenticate_github():\n    username = input(\"Enter GitHub username: \")\n    password = input(\"Enter GitHub password: \")\n    auth = requests.auth.HTTPBasicAuth(username, password)\n    response = requests.get('https://api.github.com/user', auth=auth)\n    if response.status_code == 401 and 'X-Github-Otp' in response.headers:\n        print(\"Two-factor authentication is required. Please create a personal access token.\")\n        token = input(\"Enter your personal access token: \")\n        return requests.auth.HTTPBasicAuth(username, token)\n    return auth\n\ndef create_labels(auth, filename='etc/default_labels.csv'):\n    with open(filename, newline='') as csvfile:\n        reader = csv.DictReader(csvfile)\n        for row in reader:\n            name = row['name']\n            color = row['color']\n            description = row.get('description', '')\n            payload = {\n                \"name\": name,\n                \"color\": color,\n                \"description\": description\n            }\n            response = requests.post(\n                f\"https://api.github.com/repos/{input('Enter repository owner/name: ')}\",\n                json=payload,\n                auth=auth\n            )\n            if response.status_code != 201:\n                print(f\"Failed to create label {name}: {response.text}\")"
  },
  {
    "Task_id": 85,
    "Instruction": "Task Description: Create a Python class that implements a client for interacting with a blockchain network, capable of registering nodes, resolving chain conflicts, retrieving chain data, posting transactions, and registering multiple nodes.\n\nClass Description: The BlockchainClient class provides functionality to interact with nodes in a blockchain network. It maintains a set of node addresses and offers methods to communicate with these nodes using HTTP requests.\n\nAttributes:\n\nnodes: [set] - A set containing the network addresses of all known blockchain nodes\n\nMethods:\n\nregister_node: [register_node](address: str) -> None - Adds a new node to the list of known nodes. The address should be a valid URL.\n\nresolve_conflicts: [resolve_conflicts]() -> Tuple[bool, Optional[list]] - Resolves conflicts by finding and adopting the longest valid chain from the network. Returns a tuple indicating whether the chain was replaced and the new chain if applicable.\n\nget_chain: [get_chain](node: str) -> Tuple[bool, Optional[dict]] - Retrieves the blockchain data from a specific node. Returns a tuple indicating success status and the chain data.\n\npost_transaction: [post_transaction](node: str, sender: str, recipient: str, amount: float) -> Tuple[bool, Optional[dict]] - Posts a new transaction to a specified node. Returns a tuple indicating success status and the response data.\n\nregister_nodes: [register_nodes](node: str, nodes: list) -> Tuple[bool, Optional[dict]] - Registers multiple nodes with a specified node. Returns a tuple indicating success status and the response data.",
    "Canonical_solution": "import requests\n\nclass BlockchainClient:\n    def __init__(self, nodes=None):\n        self.nodes = set(nodes) if nodes else set()\n\n    def register_node(self, address):\n        \"\"\"\n        Add a new node to the list of nodes\n\n        :param address: Address of node. Eg. 'http://192.168.0.5:5000'\n        \"\"\"\n        parsed_url = urlparse(address)\n        if parsed_url.netloc:\n            self.nodes.add(parsed_url.netloc)\n        elif parsed_url.path:\n            self.nodes.add(parsed_url.path)\n        else:\n            raise ValueError('Invalid URL')\n\n    def resolve_conflicts(self):\n        \"\"\"\n        Resolve conflicts by replacing our chain with the longest one in the network.\n\n        :return: Tuple of (True if chain was replaced, new chain if replaced)\n        \"\"\"\n        new_chain = None\n        max_length = 0\n\n        for node in self.nodes:\n            try:\n                response = requests.get(f'http://{node}/chain')\n                if response.status_code == 200:\n                    data = response.json()\n                    length = data['length']\n                    chain = data['chain']\n\n                    if length > max_length:\n                        max_length = length\n                        new_chain = chain\n            except requests.exceptions.RequestException:\n                continue\n\n        return (True, new_chain) if new_chain else (False, None)\n\n    def get_chain(self, node):\n        \"\"\"\n        Get the blockchain from a specific node\n\n        :param node: Node address\n        :return: Tuple of (status, chain data)\n        \"\"\"\n        try:\n            response = requests.get(f'http://{node}/chain')\n            if response.status_code == 200:\n                return (True, response.json())\n            return (False, None)\n        except requests.exceptions.RequestException:\n            return (False, None)\n\n    def post_transaction(self, node, sender, recipient, amount):\n        \"\"\"\n        Post a new transaction to a node\n\n        :param node: Node address\n        :param sender: Sender address\n        :param recipient: Recipient address\n        :param amount: Transaction amount\n        :return: Tuple of (status, response data)\n        \"\"\"\n        try:\n            response = requests.post(\n                f'http://{node}/transactions/new',\n                json={\n                    'sender': sender,\n                    'recipient': recipient,\n                    'amount': amount\n                }\n            )\n            return (True, response.json()) if response.status_code == 201 else (False, None)\n        except requests.exceptions.RequestException:\n            return (False, None)\n\n    def register_nodes(self, node, nodes):\n        \"\"\"\n        Register multiple nodes with a node\n\n        :param node: Node address to register with\n        :param nodes: List of nodes to register\n        :return: Tuple of (status, response data)\n        \"\"\"\n        try:\n            response = requests.post(\n                f'http://{node}/nodes/register',\n                json={'nodes': list(nodes)}\n            )\n            return (True, response.json()) if response.status_code == 201 else (False, None)\n        except requests.exceptions.RequestException:\n            return (False, None)",
    "Code_level": "Class-level",
    "FSMID_for_test": 57,
    "right_result": "import requests\nfrom typing import Set, Tuple, Optional, List, Dict\n\nclass BlockchainClient:\n    def __init__(self):\n        self.nodes: Set[str] = set()\n\n    def register_node(self, address: str) -> None:\n        if not address or not address.startswith(\"http://\"):\n            raise ValueError(\"Invalid node address\")\n        self.nodes.add(address)\n\n    def resolve_conflicts(self) -> Tuple[bool, Optional[List]]:\n        longest_chain = None\n        max_length = len(self.get_chain_from_nodes()[1])\n        for node in self.nodes:\n            chain = self.get_chain(node)\n            if chain[0] and chain[1] and len(chain[1]) > max_length:\n                longest_chain = chain[1]\n                max_length = len(longest_chain)\n        if longest_chain and len(longest_chain) > max_length:\n            return True, longest_chain\n        return False, None\n\n    def get_chain(self, node: str) -> Tuple[bool, Optional[Dict]]:\n        if node not in self.nodes:\n            return False, None\n        try:\n            response = requests.get(f\"{node}/chain\")\n            if response.status_code == 200:\n                return True, response.json()\n            return False, None\n        except Exception as e:\n            return False, None\n\n    def post_transaction(self, node: str, sender: str, recipient: str, amount: float) -> Tuple[bool, Optional[Dict]]:\n        if node not in self.nodes:\n            return False, None\n        try:\n            payload = {\n                \"sender\": sender,\n                \"recipient\": recipient,\n                \"amount\": amount\n            }\n            response = requests.post(f\"{node}/transactions/new\", json=payload)\n            if response.status_code == 201:\n                return True, response.json()\n            return False, None\n        except Exception as e:\n            return False, None\n\n    def register_nodes(self, node: str, nodes: List[str]) -> Tuple[bool, Optional[Dict]]:\n        if node not in self.nodes:\n            return False, None\n        try:\n            payload = {\"nodes\": nodes}\n            response = requests.post(f\"{node}/nodes/register\", json=payload)\n            if response.status_code == 201:\n                return True, response.json()\n            return False, None\n        except Exception as e:\n            return False, None"
  },
  {
    "Task_id": 88,
    "Instruction": "Task Description: Create a function that queries DNS information from both Google and Cloudflare DNS APIs for a given domain and record type, handling potential errors gracefully.\n\nFunction Description: The function makes parallel DNS queries to Google's and Cloudflare's DNS-over-HTTPS APIs, returning the responses in a list. It includes error handling for failed requests and invalid responses.\n\nInput:\n- domain (str): The domain name to query (e.g., \"example.com\")\n- record_type (str): The DNS record type to query (e.g., \"A\", \"AAAA\", \"MX\")\n\nOutput:\n- list: A list containing two elements (Google's response first, then Cloudflare's), where each element is either:\n  - A dictionary containing the JSON response from the DNS API\n  - None if the request failed or returned non-200 status code",
    "Canonical_solution": "import requests\n\ndef make_dns_request(domain, record_type):\n    \"\"\"\n    Makes DNS requests to both Google and Cloudflare DNS APIs.\n\n    Args:\n        domain (str): The domain to query.\n        record_type (str): The type of DNS record to query.\n\n    Returns:\n        list: A list containing the JSON responses from Google and Cloudflare.\n    \"\"\"\n    urls = [\n        f\"https://dns.google/resolve?name={domain}&type={record_type}\",\n        f\"https://cloudflare-dns.com/dns-query?name={domain}&type={record_type}\"\n    ]\n\n    headers = {\n        \"accept\": \"application/dns-json\"\n    }\n\n    responses = []\n    for url in urls:\n        try:\n            response = requests.get(url, headers=headers)\n            if response.status_code == 200:\n                json_response = response.json()\n                responses.append(json_response)\n            else:\n                responses.append(None)\n        except Exception as e:\n            print(f\"URL: {url}, DNS Exception: {e}\")\n            responses.append(None)\n\n    return responses",
    "Code_level": "Function-level",
    "FSMID_for_test": 57,
    "right_result": "import requests\nimport json\nimport threading\n\ndef query_dns(domain, record_type):\n    def google_dns_query():\n        url = \"https://dns.google/resolve\"\n        params = {\n            \"name\": domain,\n            \"type\": record_type\n        }\n        try:\n            response = requests.get(url, params=params, timeout=10)\n            if response.status_code == 200:\n                return response.json()\n            else:\n                return None\n        except Exception as e:\n            return None\n\n    def cloudflare_dns_query():\n        url = \"https://cloudflare-dns.com/dns-query\"\n        headers = {\"Content-Type\": \"application/dns-json\"}\n        params = {\n            \"name\": domain,\n            \"type\": record_type\n        }\n        try:\n            response = requests.post(url, headers=headers, json=params, timeout=10)\n            if response.status_code == 200:\n                return response.json()\n            else:\n                return None\n        except Exception as e:\n            return None\n\n    results = [None, None]\n    def set_result(index, result):\n        results[index] = result\n\n    thread1 = threading.Thread(target=lambda: set_result(0, google_dns_query()))\n    thread2 = threading.Thread(target=lambda: set_result(1, cloudflare_dns_query()))\n\n    thread1.start()\n    thread2.start()\n\n    thread1.join()\n    thread2.join()\n\n    return results"
  },
  {
    "Task_id": 9,
    "Instruction": "Task Description: Implement an HTTP connection pool class that manages reusable HTTP connections to a server, handling connection creation, retrieval, and release, with support for retries and timeouts.\n\nClass Description: HTTPConnectionPool is a connection pool manager for HTTP connections that maintains a pool of reusable connections to a specified host and port. It handles connection lifecycle, retries on failures, and timeout management.\n\nAttributes:\n- scheme: [str] - The URL scheme (default 'http')\n- ConnectionCls: [class] - The connection class to use (default HTTPConnection)\n- host: [str] - The target host for connections\n- port: [int] - The target port for connections\n- timeout: [Timeout] - Default timeout configuration\n- retries: [Retry] - Retry configuration for failed requests\n- pool: [LifoQueue] - Queue holding the connection pool\n- block: [bool] - Whether to block when pool is empty\n- proxy: [dict] - Proxy configuration\n- proxy_headers: [dict] - Headers for proxy requests\n- conn_kw: [dict] - Additional connection parameters\n\nMethods:\n- __init__(host, port=None, strict=False, timeout=Timeout.DEFAULT_TIMEOUT, maxsize=1, block=False, headers=None, retries=None, _proxy=None, _proxy_headers=None, **conn_kw) -> None - Initializes the connection pool with given configuration\n- _new_conn() -> HTTPConnection - Creates a new connection instance\n- _get_conn(timeout=None) -> HTTPConnection - Retrieves a connection from the pool or creates a new one\n- _put_conn(conn) -> None - Returns a connection to the pool\n- _make_request(conn, method, url, timeout=_Default, **httplib_request_kw) -> HTTPResponse - Makes an HTTP request using the given connection\n- urlopen(method, url, body=None, headers=None, retries=None, redirect=True, timeout=_Default, **response_kw) -> HTTPResponse - Main method to execute HTTP requests with retry and timeout handling\n- close() -> None - Closes all connections in the pool",
    "Canonical_solution": "from socket import error as SocketError, timeout as SocketTimeout\nimport socket\nfrom .connection import HTTPConnection, HTTPSConnection, VerifiedHTTPSConnection\nfrom .exceptions import (\n    MaxRetryError,\n    ProtocolError,\n    ReadTimeoutError,\n    SSLError,\n    TimeoutError,\n    HTTPException,\n    BaseSSLError,\n    NewConnectionError,\n    ProxyError\n)\nfrom .util.timeout import Timeout\nfrom .util.retry import Retry\nfrom .util.queue import LifoQueue\nimport queue\nimport sys\nimport warnings\n\nclass HTTPConnectionPool:\n    scheme = 'http'\n    ConnectionCls = HTTPConnection\n\n    def __init__(self, host, port=None, strict=False,\n                 timeout=Timeout.DEFAULT_TIMEOUT, maxsize=1, block=False,\n                 headers=None, retries=None,\n                 _proxy=None, _proxy_headers=None,\n                 **conn_kw):\n        self.host = host\n        self.port = port\n        self.timeout = timeout\n        self.retries = retries\n        self.pool = LifoQueue(maxsize)\n        self.block = block\n        self.proxy = _proxy\n        self.proxy_headers = _proxy_headers or {}\n        self.conn_kw = conn_kw\n\n        for _ in range(maxsize):\n            self.pool.put(None)\n\n    def _new_conn(self):\n        return self.ConnectionCls(\n            host=self.host,\n            port=self.port,\n            timeout=self.timeout.connect_timeout,\n            **self.conn_kw\n        )\n\n    def _get_conn(self, timeout=None):\n        try:\n            conn = self.pool.get(block=self.block, timeout=timeout)\n            if conn and is_connection_dropped(conn):\n                conn.close()\n                conn = None\n            return conn or self._new_conn()\n        except queue.Empty:\n            raise EmptyPoolError(self, \"Pool is empty.\")\n\n    def _put_conn(self, conn):\n        try:\n            self.pool.put(conn, block=False)\n        except queue.Full:\n            conn.close()\n\n    def _make_request(self, conn, method, url, timeout=_Default, **httplib_request_kw):\n        timeout_obj = self._get_timeout(timeout)\n        conn.timeout = timeout_obj.connect_timeout\n\n        try:\n            conn.request(method, url, **httplib_request_kw)\n            httplib_response = conn.getresponse()\n            return httplib_response\n        except (SocketTimeout, BaseSSLError, SocketError) as e:\n            self._raise_timeout(err=e, url=url, timeout_value=conn.timeout)\n            raise\n\n    def urlopen(self, method, url, body=None, headers=None, retries=None,\n                redirect=True, timeout=_Default, **response_kw):\n        if retries is None:\n            retries = self.retries\n\n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries)\n\n        try:\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=timeout_obj.connect_timeout)\n            conn.timeout = timeout_obj.connect_timeout\n\n            httplib_response = self._make_request(\n                conn,\n                method,\n                url,\n                timeout=timeout_obj,\n                body=body,\n                headers=headers\n            )\n\n            response = self.ResponseCls.from_httplib(\n                httplib_response,\n                pool=self,\n                connection=conn,\n                retries=retries,\n                **response_kw\n            )\n\n            return response\n\n        except (TimeoutError, HTTPException, SocketError, ProtocolError,\n                BaseSSLError, SSLError) as e:\n            if isinstance(e, (BaseSSLError, CertificateError)):\n                e = SSLError(e)\n            elif isinstance(e, (SocketError, NewConnectionError)) and self.proxy:\n                e = ProxyError('Cannot connect to proxy.', e)\n            elif isinstance(e, (SocketError, HTTPException)):\n                e = ProtocolError('Connection aborted.', e)\n\n            retries = retries.increment(method, url, error=e, _pool=self)\n            retries.sleep()\n            return self.urlopen(\n                method, url, body, headers,\n                retries=retries, redirect=redirect,\n                timeout=timeout, **response_kw\n            )\n\n    def close(self):\n        while True:\n            try:\n                conn = self.pool.get(block=False)\n                if conn:\n                    conn.close()\n            except queue.Empty:\n                break",
    "Code_level": "Class-level",
    "FSMID_for_test": 56,
    "right_result": "import queue\nimport threading\nimport time\nfrom urllib.parse import urlparse\nfrom http.client import HTTPConnection\nfrom urllib3.util import timeout as Timeout\nfrom urllib3.util import retry as Retry\nfrom urllib3.exceptions import MaxRetry, NewConnectionError, ReadTimeoutError\n\nclass HTTPConnectionPool:\n    def __init__(self, host, port=None, strict=False, timeout=Timeout.DEFAULT_TIMEOUT, maxsize=1, block=False, headers=None, retries=None, _proxy=None, _proxy_headers=None, **conn_kw):\n        self.scheme = 'http'\n        self.ConnectionCls = HTTPConnection\n        self.host = host\n        self.port = port or 80\n        self.timeout = timeout\n        self.retries = retries or Retry.DEFAULT\n        self.pool = queue.LifoQueue(maxsize=maxsize)\n        self.block = block\n        self.proxy = _proxy or {}\n        self.proxy_headers = _proxy_headers or {}\n        self.conn_kw = conn_kw\n        self.headers = headers or {}\n\n    def _new_conn(self):\n        conn = self.ConnectionCls(\n            self.host,\n            self.port,\n            strict=self.strict,\n            **self.conn_kw\n        )\n        if self.proxy:\n            conn.set_proxy(self.proxy['host'], self.proxy['port'])\n            for key, value in self.proxy_headers.items():\n                conn.set_proxy_header(key, value)\n        return conn\n\n    def _get_conn(self, timeout=None):\n        try:\n            conn = self.pool.get(block=self.block, timeout=timeout)\n            if conn.closed:\n                self.pool.put(conn)\n                conn = self._new_conn()\n        except queue.Empty:\n            conn = self._new_conn()\n        return conn\n\n    def _put_conn(self, conn):\n        if not conn.closed:\n            self.pool.put(conn)\n\n    def _make_request(self, conn, method, url, timeout=_Default, **httplib_request_kw):\n        try:\n            conn.request(method, url, **httplib_request_kw)\n            response = conn.getresponse()\n            return response\n        except (ReadTimeoutError, ConnectionResetError) as e:\n            raise e\n        finally:\n            self._put_conn(conn)\n\n    def urlopen(self, method, url, body=None, headers=None, retries=None, redirect=True, timeout=_Default, **response_kw):\n        parsed = urlparse(url)\n        if parsed.scheme != self.scheme:\n            raise ValueError(f\"URL scheme {parsed.scheme} does not match pool scheme {self.scheme}\")\n        \n        conn = self._get_conn(timeout=timeout)\n        headers = headers or self.headers\n        if headers:\n            for key, value in headers.items():\n                conn.set_header(key, value)\n        if body:\n            conn.set_body(body)\n        \n        retries = retries or self.retries\n        for i in range(retries.max_retries + 1):\n            try:\n                response = self._make_request(conn, method, url, timeout=timeout, **response_kw)\n                if redirect and response.status in (301, 302, 303, 307):\n                    location = response.getheader('Location')\n                    if location:\n                        url = location\n                        parsed = urlparse(url)\n                        if parsed.scheme != self.scheme:\n                            raise ValueError(f\"Redirect to {parsed.scheme} does not match pool scheme {self.scheme}\")\n                        continue\n                return response\n            except (NewConnectionError, ReadTimeoutError) as e:\n                if i < retries.max_retries:\n                    time.sleep(retries.backoff_factor * (2 ** i))\n                    conn = self._get_conn(timeout=timeout)\n                    continue\n                else:\n                    raise MaxRetry(e)\n            except Exception as e:\n                if i < retries.max_retries:\n                    time.sleep(retries.backoff_factor * (2 ** i))\n                    conn = self._get_conn(timeout=timeout)\n                    continue\n                else:\n                    raise e\n\n    def close(self):\n        while not self.pool.empty():\n            conn = self.pool.get()\n            conn.close()"
  },
  {
    "Task_id": 90,
    "Instruction": "Task Description: Create a Python function that extends a FastAPI application with a new REST endpoint and tests it using the requests library.\n\nFunction Description: The function `test_extend_fastapi` demonstrates how to extend a FastAPI application (wrapped in a Jina Flow) with a new GET endpoint '/hello' that returns a simple JSON message. It then tests this endpoint by making an HTTP request and verifying the response.\n\nInput: None (The function takes no parameters as it's self-contained for demonstration purposes)\n\nOutput: None (The function performs assertions to verify the endpoint works correctly but doesn't return any value)",
    "Canonical_solution": "import requests\nfrom jina import Flow\n\ndef test_extend_fastapi():\n    def extend_rest_function(app):\n        @app.get('/hello', tags=['My Extended APIs'])\n        async def foo():\n            return {'msg': 'hello world'}\n\n        return app\n\n    jina.helper.extend_rest_interface = extend_rest_function\n    f = Flow(protocol='http')\n\n    with f:\n        response = requests.get(f'http://localhost:{f.port}/hello')\n        assert response.status_code == 200\n        assert response.json() == {'msg': 'hello world'}",
    "Code_level": "Function-level",
    "FSMID_for_test": 57,
    "right_result": "def test_extend_fastapi():\n    from fastapi import FastAPI\n    from jina import Flow, requests\n    import requests\n\n    app = FastAPI()\n\n    @app.get('/hello')\n    def hello():\n        return {'message': 'Hello from FastAPI'}\n\n    flow = Flow().add(name='fastapi-endpoint', uses=app)\n\n    with flow:\n        response = requests.get('http://localhost:8000/hello')\n        assert response.status_code == 200\n        assert response.json() == {'message': 'Hello from FastAPI'}"
  },
  {
    "Task_id": 94,
    "Instruction": "Task Description: Create a function that sends an HTTP POST request to a specified URL with given headers and data, and returns the response status code and content.\n\nFunction Description: The function uses the Python `requests` library to send an HTTP POST request to the provided URL. It includes custom headers and sends the data in JSON format. The function then returns the HTTP status code and the response body as text.\n\nInput:  \n- `url` (str): The target URL to which the POST request will be sent.  \n- `headers` (dict): A dictionary containing HTTP headers to be included in the request.  \n- `data` (dict): A dictionary containing the data to be sent in the request body, which will be converted to JSON format.  \n\nOutput:  \n- Returns a tuple containing:  \n  - `status_code` (int): The HTTP status code of the response (e.g., 200, 404, 500).  \n  - `response_text` (str): The response body as plain text.",
    "Canonical_solution": "import requests\nimport json\n\ndef send_http_request(url, headers, data):\n    response = requests.post(url, headers=headers, data=json.dumps(data))\n    return response.status_code, response.text",
    "Code_level": "Function-level",
    "FSMID_for_test": 57,
    "right_result": "def send_post_request(url, headers, data):\n    import requests\n    response = requests.post(url, headers=headers, json=data)\n    return response.status_code, response.text"
  }
]