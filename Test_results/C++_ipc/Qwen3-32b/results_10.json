[
  {
    "Task_id": 1,
    "Instruction": "Task Description: Create a function that performs HTTP requests using the cpp-httplib library, supporting multiple HTTP methods (GET, PUT, DELETE, POST) and handling JSON request/response data.\n\nFunction Description: The function `APIRequest` performs HTTP requests to a specified URL using the given HTTP method. It supports sending JSON data in the request and parsing JSON data from the response. The function checks the HTTP status code and only processes the response body if the status indicates success (2xx).\n\nInput:\n- `method` (std::string): The HTTP method to use (e.g., \"GET\", \"PUT\", \"DELETE\", \"POST\").\n- `location` (std::string): The server address (e.g., \"example.com\").\n- `URI` (std::string): The URI path for the request (e.g., \"/api/data\").\n- `request_data` (json*, optional): Pointer to a JSON object containing the data to send with the request (used for PUT requests).\n- `response_data` (json*, optional): Pointer to a JSON object where the response data will be stored if the request is successful.\n\nOutput:\n- Returns a `long` value representing the HTTP status code of the response.\n- If the request is successful (status code 2xx) and `response_data` is provided, the response body is parsed into the `response_data` JSON object.",
    "Canonical_solution": "#include \"httplib.h\"\n#include <string>\n#include \"json.hpp\"\nusing json = nlohmann::json;\n\nlong APIRequest(std::string method, std::string location, std::string URI, json* request_data = nullptr, json* response_data = nullptr)\n{\n    const std::string url(\"http://\" + location);\n    httplib::Client client(url.c_str());\n    int             status  = 0;\n    std::string     body    = \"\";\n\n    if(method == \"GET\")\n    {\n        httplib::Result result = client.Get(URI.c_str());\n        if(httplib::Error::Success == result.error())\n        {\n            status  = result->status;\n            body    = result->body;\n        }\n    }\n    else if(method == \"PUT\")\n    {\n        if(request_data)\n        {\n            httplib::Result result = client.Put(URI.c_str(), request_data->dump(), \"application/json\");\n            if(httplib::Error::Success == result.error())\n            {\n                status  = result->status;\n                body    = result->body;\n            }\n        }\n        else\n        {\n            httplib::Result result = client.Put(URI.c_str());\n            if(httplib::Error::Success == result.error())\n            {\n                status  = result->status;\n                body    = result->body;\n            }\n        }\n    }\n    else if(method == \"DELETE\")\n    {\n        httplib::Result result = client.Delete(URI.c_str());\n        if(httplib::Error::Success == result.error())\n        {\n            status  = result->status;\n            body    = result->body;\n        }\n    }\n    else if(method == \"POST\")\n    {\n        httplib::Result result = client.Post(URI.c_str());\n        if(httplib::Error::Success == result.error())\n        {\n            status  = result->status;\n            body    = result->body;\n        }\n    }\n\n    if((status / 100) == 2)\n    {\n        if(response_data)\n        {\n            *response_data = json::parse(body);\n        }\n    }\n\n    return status;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 147,
    "matched_results": [],
    "unmatched_results": [
      "```cpp\n#include <httplib.h>\n#include <nlohmann/json.hpp>\n\nusing json = nlohmann::json;\n\nlong APIRequest(const std::string& method, const std::string& location, const std::string& URI, const json* request_data, json* response_data) {\n    httplib::Client cli(location);\n    httplib::Result res;\n\n    if (method == \"GET\") {\n        res = cli.Get(URI.c_str());\n    } else if (method == \"POST\") {\n        std::string body;\n        if (request_data) {\n            body = request_data->dump();\n        }\n        res = cli.Post(URI.c_str(), body.c_str(), \"application/json\");\n    } else if (method == \"PUT\") {\n        std::string body;\n        if (request_data) {\n            body = request_data->dump();\n        }\n        res = cli.Put(URI.c_str(), body.c_str(), \"application/json\");\n    } else if (method == \"DELETE\") {\n        res = cli.Delete(URI.c_str());\n    } else {\n        return 405; // Method Not Allowed\n    }\n\n    if (!res) {\n        return -1; // Request failed\n    }\n\n    long status = res->status;\n    if (status >= 200 && status < 300 && response_data) {\n        try {\n            *response_data = json::parse(res->body);\n        } catch (...) {\n            return 500; // Internal Server Error during parsing\n        }\n    }\n\n    return status;\n}\n```",
      "```cpp\n#include <httplib.h>\n#include <nlohmann/json.hpp>\n\nusing json = nlohmann::json;\n\nlong APIRequest(const std::string& method, const std::string& location, const std::string& URI, const json* request_data, json* response_data) {\n    httplib::Client cli(location);\n    httplib::Result res;\n\n    if (method == \"GET\") {\n        res = cli.Get(URI.c_str());\n    } else if (method == \"POST\") {\n        httplib::Headers headers = {{\"Content-Type\", \"application/json\"}};\n        std::string body = request_data ? request_data->dump() : \"\";\n        res = cli.Post(URI.c_str(), headers, body.c_str(), \"application/json\");\n    } else if (method == \"PUT\") {\n        httplib::Headers headers = {{\"Content-Type\", \"application/json\"}};\n        std::string body = request_data ? request_data->dump() : \"\";\n        res = cli.Put(URI.c_str(), headers, body.c_str(), \"application/json\");\n    } else if (method == \"DELETE\") {\n        res = cli.Delete(URI.c_str());\n    } else {\n        return 405; // Method Not Allowed\n    }\n\n    if (!res) {\n        return 500; // Internal Server Error or connection failure\n    }\n\n    long status = res->status;\n    if (status >= 200 && status < 300 && response_data && !res->body.empty()) {\n        try {\n            *response_data = json::parse(res->body);\n        } catch (...) {\n            return 500; // JSON parsing error\n        }\n    }\n\n    return status;\n}\n```",
      "```cpp\n#include <httplib.h>\n#include <nlohmann/json.hpp>\n\nusing json = nlohmann::json;\n\nlong APIRequest(const std::string& method, const std::string& location, const std::string& URI, const json* request_data, json* response_data) {\n    httplib::Client cli(location);\n    httplib::Result res;\n\n    if (method == \"GET\") {\n        res = cli.Get(URI.c_str());\n    } else if (method == \"POST\") {\n        std::string body;\n        if (request_data) {\n            body = request_data->dump();\n        }\n        res = cli.Post(URI.c_str(), body.c_str(), \"application/json\");\n    } else if (method == \"PUT\") {\n        std::string body;\n        if (request_data) {\n            body = request_data->dump();\n        }\n        res = cli.Put(URI.c_str(), body.c_str(), \"application/json\");\n    } else if (method == \"DELETE\") {\n        res = cli.Delete(URI.c_str());\n    } else {\n        return 405; // Method Not Allowed\n    }\n\n    if (!res) {\n        return -1; // Request failed\n    }\n\n    long status = res->status;\n    if (status >= 200 && status < 300 && response_data) {\n        try {\n            *response_data = json::parse(res->body);\n        } catch (...) {\n            return 500; // Internal Server Error parsing JSON\n        }\n    }\n\n    return status;\n}\n```",
      "```cpp\n#include <httplib.h>\n#include <nlohmann/json.hpp>\n\nusing json = nlohmann::json;\n\nlong APIRequest(const std::string& method, const std::string& location, const std::string& URI, const json* request_data, json* response_data) {\n    httplib::Client cli(location);\n    httplib::Result res;\n\n    if (method == \"GET\") {\n        res = cli.Get(URI.c_str());\n    } else if (method == \"POST\") {\n        std::string body;\n        if (request_data) {\n            body = request_data->dump();\n        }\n        res = cli.Post(URI.c_str(), body.c_str(), \"application/json\");\n    } else if (method == \"PUT\") {\n        std::string body;\n        if (request_data) {\n            body = request_data->dump();\n        }\n        res = cli.Put(URI.c_str(), body.c_str(), \"application/json\");\n    } else if (method == \"DELETE\") {\n        res = cli.Delete(URI.c_str());\n    } else {\n        return 405; // Method Not Allowed\n    }\n\n    if (!res) {\n        return -1; // Request failed\n    }\n\n    long status = res->status;\n    if (status >= 200 && status < 300 && response_data) {\n        try {\n            *response_data = json::parse(res->body);\n        } catch (...) {\n            return 500; // Internal Server Error parsing JSON\n        }\n    }\n\n    return status;\n}\n```",
      "```cpp\n#include <httplib.h>\n#include <nlohmann/json.hpp>\n\nusing json = nlohmann::json;\n\nlong APIRequest(const std::string& method, const std::string& location, const std::string& URI, const json* request_data, json* response_data) {\n    httplib::Client cli(location);\n    httplib::Result res;\n\n    if (method == \"GET\") {\n        res = cli.Get(URI.c_str());\n    } else if (method == \"POST\") {\n        httplib::Headers headers = { {\"Content-Type\", \"application/json\"} };\n        std::string body = request_data ? request_data->dump() : \"\";\n        res = cli.Post(URI.c_str(), headers, body.c_str(), \"application/json\");\n    } else if (method == \"PUT\") {\n        httplib::Headers headers = { {\"Content-Type\", \"application/json\"} };\n        std::string body = request_data ? request_data->dump() : \"\";\n        res = cli.Put(URI.c_str(), headers, body.c_str(), \"application/json\");\n    } else if (method == \"DELETE\") {\n        res = cli.Delete(URI.c_str());\n    } else {\n        return 405; // Method Not Allowed\n    }\n\n    if (!res) {\n        return 500; // Internal Server Error or connection failure\n    }\n\n    long status = res->status;\n    if (status >= 200 && status < 300 && response_data && !res->body.empty()) {\n        try {\n            *response_data = json::parse(res->body);\n        } catch (...) {\n            return 500; // JSON parsing error\n        }\n    }\n\n    return status;\n}\n```",
      "```cpp\n#include <httplib.h>\n#include <nlohmann/json.hpp>\n\nusing json = nlohmann::json;\n\nlong APIRequest(const std::string& method, const std::string& location, const std::string& URI, const json* request_data, json* response_data) {\n    httplib::Client cli(location);\n    httplib::Result res;\n\n    if (method == \"GET\") {\n        res = cli.Get(URI.c_str());\n    } else if (method == \"POST\") {\n        httplib::Headers headers = {{\"Content-Type\", \"application/json\"}};\n        std::string body = request_data ? request_data->dump() : \"\";\n        res = cli.Post(URI.c_str(), headers, body.c_str(), \"application/json\");\n    } else if (method == \"PUT\") {\n        httplib::Headers headers = {{\"Content-Type\", \"application/json\"}};\n        std::string body = request_data ? request_data->dump() : \"\";\n        res = cli.Put(URI.c_str(), headers, body.c_str(), \"application/json\");\n    } else if (method == \"DELETE\") {\n        res = cli.Delete(URI.c_str());\n    } else {\n        return 405; // Method Not Allowed\n    }\n\n    if (!res) {\n        return 500; // Internal Server Error or connection failure\n    }\n\n    long status = res->status;\n    if (status >= 200 && status < 300 && response_data && !res->body.empty()) {\n        try {\n            *response_data = json::parse(res->body);\n        } catch (...) {\n            return 500; // JSON parsing error\n        }\n    }\n\n    return status;\n}\n```",
      "```cpp\n#include <httplib.h>\n#include <nlohmann/json.hpp>\n\nusing json = nlohmann::json;\n\nlong APIRequest(const std::string& method, const std::string& location, const std::string& URI, const json* request_data, json* response_data) {\n    httplib::Client cli(location);\n    httplib::Result res;\n\n    if (method == \"GET\") {\n        res = cli.Get(URI.c_str());\n    } else if (method == \"POST\") {\n        httplib::Headers headers = { {\"Content-Type\", \"application/json\"} };\n        std::string body = request_data ? request_data->dump() : \"\";\n        res = cli.Post(URI.c_str(), headers, body.c_str(), \"application/json\");\n    } else if (method == \"PUT\") {\n        httplib::Headers headers = { {\"Content-Type\", \"application/json\"} };\n        std::string body = request_data ? request_data->dump() : \"\";\n        res = cli.Put(URI.c_str(), headers, body.c_str(), \"application/json\");\n    } else if (method == \"DELETE\") {\n        res = cli.Delete(URI.c_str());\n    } else {\n        return 405; // Method Not Allowed\n    }\n\n    if (!res) {\n        return 500; // Internal Server Error or connection failed\n    }\n\n    long status = res->status;\n    if (status >= 200 && status < 300 && response_data && !res->body.empty()) {\n        try {\n            *response_data = json::parse(res->body);\n        } catch (...) {\n            return 500; // Failed to parse JSON\n        }\n    }\n\n    return status;\n}\n```",
      "```cpp\n#include <httplib.h>\n#include <nlohmann/json.hpp>\n\nusing json = nlohmann::json;\n\nlong APIRequest(const std::string& method, const std::string& location, const std::string& URI, const json* request_data, json* response_data) {\n    httplib::Client cli(location);\n    std::string full_url = URI;\n    httplib::Result res;\n\n    if (method == \"GET\") {\n        res = cli.Get(full_url.c_str());\n    } else if (method == \"POST\") {\n        std::string body = request_data ? request_data->dump() : \"\";\n        res = cli.Post(full_url.c_str(), body, \"application/json\");\n    } else if (method == \"PUT\") {\n        std::string body = request_data ? request_data->dump() : \"\";\n        res = cli.Put(full_url.c_str(), body, \"application/json\");\n    } else if (method == \"DELETE\") {\n        res = cli.Delete(full_url.c_str());\n    } else {\n        return 405; // Method Not Allowed\n    }\n\n    if (!res) {\n        return 500; // Internal Server Error or connection failure\n    }\n\n    long status = res->status;\n    if (status >= 200 && status < 300 && response_data && res->body.size() > 0) {\n        try {\n            *response_data = json::parse(res->body);\n        } catch (...) {\n            return 500; // Failed to parse JSON\n        }\n    }\n\n    return status;\n}\n```",
      "```cpp\n#include <httplib.h>\n#include <nlohmann/json.hpp>\n\nusing json = nlohmann::json;\n\nlong APIRequest(const std::string& method, const std::string& location, const std::string& URI, const json* request_data, json* response_data) {\n    httplib::Client cli(location);\n    httplib::Result res;\n\n    if (method == \"GET\") {\n        res = cli.Get(URI.c_str());\n    } else if (method == \"POST\") {\n        httplib::Headers headers = { {\"Content-Type\", \"application/json\"} };\n        std::string body = request_data ? request_data->dump() : \"\";\n        res = cli.Post(URI.c_str(), headers, body.c_str(), \"application/json\");\n    } else if (method == \"PUT\") {\n        httplib::Headers headers = { {\"Content-Type\", \"application/json\"} };\n        std::string body = request_data ? request_data->dump() : \"\";\n        res = cli.Put(URI.c_str(), headers, body.c_str(), \"application/json\");\n    } else if (method == \"DELETE\") {\n        res = cli.Delete(URI.c_str());\n    } else {\n        return 405; // Method Not Allowed\n    }\n\n    if (!res) {\n        return 500; // Internal Server Error or connection failure\n    }\n\n    long status = res->status;\n    if (status >= 200 && status < 300 && response_data && !res->body.empty()) {\n        try {\n            *response_data = json::parse(res->body);\n        } catch (...) {\n            return 500; // JSON parsing error\n        }\n    }\n\n    return status;\n}\n```",
      "```cpp\n#include <httplib.h>\n#include <nlohmann/json.hpp>\n\nusing json = nlohmann::json;\n\nlong APIRequest(const std::string& method, const std::string& location, const std::string& URI, const json* request_data, json* response_data) {\n    httplib::Client cli(location);\n    httplib::Result res;\n\n    if (method == \"GET\") {\n        res = cli.Get(URI.c_str());\n    } else if (method == \"POST\") {\n        std::string body;\n        if (request_data) {\n            body = request_data->dump();\n        }\n        res = cli.Post(URI.c_str(), body.c_str(), \"application/json\");\n    } else if (method == \"PUT\") {\n        std::string body;\n        if (request_data) {\n            body = request_data->dump();\n        }\n        res = cli.Put(URI.c_str(), body.c_str(), \"application/json\");\n    } else if (method == \"DELETE\") {\n        res = cli.Delete(URI.c_str());\n    } else {\n        return 405; // Method Not Allowed\n    }\n\n    if (!res) {\n        return 0; // Connection failed\n    }\n\n    long status = res->status;\n    if (status >= 200 && status < 300 && response_data) {\n        try {\n            *response_data = json::parse(res->body);\n        } catch (...) {\n            // Parsing failed, leave response_data unchanged\n        }\n    }\n\n    return status;\n}\n```"
    ],
    "match_count": 0,
    "pass@3": 0.0,
    "pass@5": 0.0
  },
  {
    "Task_id": 10,
    "Instruction": "Task Description: Implement a TCP client in C++ that can establish a connection to a server, send messages, and receive responses.\n\nFunction Description: The code consists of two functions that together implement a basic TCP client. The first function creates and connects the socket, while the second handles the communication loop with the server.\n\nInput:\n- create_tcp_client:\n  - server_ip: const char* - The IP address of the server to connect to\n  - port: int - The port number of the server to connect to\n- tcp_client_communication:\n  - sockfd: int - The socket file descriptor returned by create_tcp_client\n\nOutput:\n- create_tcp_client:\n  - Returns: int - The socket file descriptor if successful, -1 if failed\n- tcp_client_communication:\n  - No return value (void), but prints server responses and error messages to console",
    "Canonical_solution": "#include <sys/socket.h>\n#include <arpa/inet.h>\n#include <string.h>\n#include <unistd.h>\n\nint create_tcp_client(const char* server_ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if(sockfd == -1) return -1;\n\n    struct sockaddr_in serv_addr;\n    bzero(&serv_addr, sizeof(serv_addr));\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_addr.s_addr = inet_addr(server_ip);\n    serv_addr.sin_port = htons(port);\n\n    if(connect(sockfd, (sockaddr*)&serv_addr, sizeof(serv_addr)) == -1) {\n        close(sockfd);\n        return -1;\n    }\n    \n    return sockfd;\n}\n\nvoid tcp_client_communication(int sockfd) {\n    while(true){\n        char buf[1024];\n        bzero(&buf, sizeof(buf));\n        scanf(\"%s\", buf);\n        ssize_t write_bytes = write(sockfd, buf, sizeof(buf));\n        if(write_bytes == -1){\n            printf(\"socket already disconnected, can't write any more!\\n\");\n            break;\n        }\n        bzero(&buf, sizeof(buf));\n        ssize_t read_bytes = read(sockfd, buf, sizeof(buf));\n        if(read_bytes > 0){\n            printf(\"message from server: %s\\n\", buf);\n        }else if(read_bytes == 0){\n            printf(\"server socket disconnected!\\n\");\n            break;\n        }else if(read_bytes == -1){\n            close(sockfd);\n            break;\n        }\n    }\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 149,
    "matched_results": [
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint create_tcp_client(const char* server_ip, int port) {\n    int sockfd;\n    struct sockaddr_in server_addr;\n\n    // Create socket\n    if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation failed\" << std::endl;\n        return -1;\n    }\n\n    memset(&server_addr, 0, sizeof(server_addr));\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(port);\n\n    // Convert IPv4 from text to binary form\n    if (inet_pton(AF_INET, server_ip, &server_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/Address not supported\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    // Connect to the server\n    if (connect(sockfd, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcp_client_communication(int sockfd) {\n    char buffer[1024] = {0};\n    const char* message;\n\n    while (true) {\n        std::cout << \"Enter message to send (type 'exit' to quit): \";\n        std::string input;\n        std::getline(std::cin, input);\n        message = input.c_str();\n\n        if (strcmp(message, \"exit\") == 0) {\n            break;\n        }\n\n        // Send message to server\n        if (send(sockfd, message, strlen(message), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            continue;\n        }\n\n        // Receive response from server\n        int valread = read(sockfd, buffer, sizeof(buffer));\n        if (valread < 0) {\n            std::cerr << \"Read failed\" << std::endl;\n            continue;\n        }\n        std::cout << \"Server Response: \" << buffer << std::endl;\n        memset(buffer, 0, sizeof(buffer));\n    }\n\n    close(sockfd);\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint create_tcp_client(const char* server_ip, int port) {\n    int sockfd;\n    struct sockaddr_in server_addr;\n\n    if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation failed\" << std::endl;\n        return -1;\n    }\n\n    memset(&server_addr, 0, sizeof(server_addr));\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, server_ip, &server_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/Address not supported\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcp_client_communication(int sockfd) {\n    char buffer[1024] = {0};\n    while (true) {\n        std::string message;\n        std::cout << \"Enter message to send: \";\n        std::getline(std::cin, message);\n\n        if (message == \"exit\") break;\n\n        if (send(sockfd, message.c_str(), message.size(), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        int valread = read(sockfd, buffer, sizeof(buffer));\n        if (valread < 0) {\n            std::cerr << \"Read failed\" << std::endl;\n            break;\n        } else if (valread == 0) {\n            std::cout << \"Server disconnected\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Server response: \" << buffer << std::endl;\n        memset(buffer, 0, sizeof(buffer));\n    }\n\n    close(sockfd);\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint create_tcp_client(const char* server_ip, int port) {\n    int sockfd;\n    struct sockaddr_in server_addr;\n\n    if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation failed\" << std::endl;\n        return -1;\n    }\n\n    memset(&server_addr, 0, sizeof(server_addr));\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, server_ip, &server_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/Address not supported\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcp_client_communication(int sockfd) {\n    char buffer[1024] = {0};\n    while (true) {\n        std::string message;\n        std::cout << \"Enter message to send: \";\n        std::getline(std::cin, message);\n\n        if (message == \"exit\") break;\n\n        if (send(sockfd, message.c_str(), message.length(), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        int valread = read(sockfd, buffer, sizeof(buffer));\n        if (valread < 0) {\n            std::cerr << \"Read failed\" << std::endl;\n            break;\n        } else if (valread == 0) {\n            std::cout << \"Server disconnected\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Server response: \" << buffer << std::endl;\n        memset(buffer, 0, sizeof(buffer));\n    }\n\n    close(sockfd);\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint create_tcp_client(const char* server_ip, int port) {\n    int sockfd;\n    struct sockaddr_in server_addr;\n\n    if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation failed\" << std::endl;\n        return -1;\n    }\n\n    memset(&server_addr, 0, sizeof(server_addr));\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, server_ip, &server_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/Address not supported\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcp_client_communication(int sockfd) {\n    char buffer[1024] = {0};\n    while (true) {\n        std::string message;\n        std::cout << \"Enter message to send: \";\n        std::getline(std::cin, message);\n\n        if (send(sockfd, message.c_str(), message.size(), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        int valread = read(sockfd, buffer, sizeof(buffer));\n        if (valread < 0) {\n            std::cerr << \"Read failed\" << std::endl;\n            break;\n        } else if (valread == 0) {\n            std::cout << \"Server disconnected\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Server response: \" << buffer << std::endl;\n        memset(buffer, 0, sizeof(buffer));\n    }\n    close(sockfd);\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint create_tcp_client(const char* server_ip, int port) {\n    int sockfd;\n    struct sockaddr_in server_addr;\n\n    if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation failed\" << std::endl;\n        return -1;\n    }\n\n    memset(&server_addr, 0, sizeof(server_addr));\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, server_ip, &server_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/Address not supported\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcp_client_communication(int sockfd) {\n    char buffer[1024] = {0};\n    const char* message;\n\n    while (true) {\n        std::cout << \"Enter message to send (type 'exit' to quit): \";\n        std::string input;\n        std::getline(std::cin, input);\n        message = input.c_str();\n\n        if (strcmp(message, \"exit\") == 0) {\n            break;\n        }\n\n        if (send(sockfd, message, strlen(message), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            continue;\n        }\n\n        int valread = read(sockfd, buffer, sizeof(buffer));\n        if (valread < 0) {\n            std::cerr << \"Read failed\" << std::endl;\n        } else {\n            buffer[valread] = '\\0';\n            std::cout << \"Server response: \" << buffer << std::endl;\n        }\n    }\n\n    close(sockfd);\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint create_tcp_client(const char* server_ip, int port) {\n    int sockfd;\n    struct sockaddr_in server_addr;\n\n    if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation failed\" << std::endl;\n        return -1;\n    }\n\n    memset(&server_addr, 0, sizeof(server_addr));\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, server_ip, &server_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/Address not supported\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcp_client_communication(int sockfd) {\n    char buffer[1024] = {0};\n    const char* message;\n\n    while (true) {\n        std::cout << \"Enter message to send (type 'exit' to quit): \";\n        std::string input;\n        std::getline(std::cin, input);\n        message = input.c_str();\n\n        if (strcmp(message, \"exit\") == 0) {\n            break;\n        }\n\n        if (send(sockfd, message, strlen(message), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            continue;\n        }\n\n        int valread = read(sockfd, buffer, sizeof(buffer));\n        if (valread < 0) {\n            std::cerr << \"Read failed\" << std::endl;\n            continue;\n        } else if (valread == 0) {\n            std::cout << \"Server disconnected\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Server response: \" << buffer << std::endl;\n        memset(buffer, 0, sizeof(buffer));\n    }\n\n    close(sockfd);\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint create_tcp_client(const char* server_ip, int port) {\n    int sockfd;\n    struct sockaddr_in server_addr;\n\n    if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation failed\" << std::endl;\n        return -1;\n    }\n\n    memset(&server_addr, 0, sizeof(server_addr));\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, server_ip, &server_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/Address not supported\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcp_client_communication(int sockfd) {\n    char buffer[1024] = {0};\n    while (true) {\n        std::string message;\n        std::cout << \"Enter message to send: \";\n        std::getline(std::cin, message);\n\n        if (message == \"exit\") break;\n\n        if (send(sockfd, message.c_str(), message.size(), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        int valread = read(sockfd, buffer, sizeof(buffer));\n        if (valread < 0) {\n            std::cerr << \"Read failed\" << std::endl;\n            break;\n        } else if (valread == 0) {\n            std::cout << \"Server disconnected\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Server response: \" << buffer << std::endl;\n        memset(buffer, 0, sizeof(buffer));\n    }\n\n    close(sockfd);\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint create_tcp_client(const char* server_ip, int port) {\n    int sockfd;\n    struct sockaddr_in server_addr;\n\n    if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation failed\" << std::endl;\n        return -1;\n    }\n\n    memset(&server_addr, 0, sizeof(server_addr));\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, server_ip, &server_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/Address not supported\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcp_client_communication(int sockfd) {\n    char buffer[1024] = {0};\n    const char* message;\n\n    while (true) {\n        std::cout << \"Enter message to send (type 'exit' to quit): \";\n        std::string input;\n        std::getline(std::cin, input);\n        message = input.c_str();\n\n        if (strcmp(message, \"exit\") == 0) {\n            break;\n        }\n\n        if (send(sockfd, message, strlen(message), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            continue;\n        }\n\n        int valread = read(sockfd, buffer, sizeof(buffer));\n        if (valread < 0) {\n            std::cerr << \"Read failed\" << std::endl;\n            continue;\n        } else if (valread == 0) {\n            std::cout << \"Server disconnected\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Server response: \" << buffer << std::endl;\n        memset(buffer, 0, sizeof(buffer));\n    }\n\n    close(sockfd);\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint create_tcp_client(const char* server_ip, int port) {\n    int sockfd;\n    struct sockaddr_in server_addr;\n\n    if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation failed\" << std::endl;\n        return -1;\n    }\n\n    memset(&server_addr, 0, sizeof(server_addr));\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, server_ip, &server_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/Address not supported\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcp_client_communication(int sockfd) {\n    char buffer[1024] = {0};\n    while (true) {\n        std::string message;\n        std::cout << \"Enter message to send: \";\n        std::getline(std::cin, message);\n\n        if (message == \"exit\") break;\n\n        send(sockfd, message.c_str(), message.size(), 0);\n\n        int valread = read(sockfd, buffer, sizeof(buffer));\n        if (valread < 0) {\n            std::cerr << \"Read from server failed\" << std::endl;\n            break;\n        }\n        std::cout << \"Server response: \" << buffer << std::endl;\n        memset(buffer, 0, sizeof(buffer));\n    }\n\n    close(sockfd);\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint create_tcp_client(const char* server_ip, int port) {\n    int sockfd;\n    struct sockaddr_in server_addr;\n\n    if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation failed\" << std::endl;\n        return -1;\n    }\n\n    memset(&server_addr, 0, sizeof(server_addr));\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, server_ip, &server_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/Address not supported\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcp_client_communication(int sockfd) {\n    char buffer[1024] = {0};\n    while (true) {\n        std::string message;\n        std::cout << \"Enter message to send (type 'exit' to quit): \";\n        std::getline(std::cin, message);\n\n        if (message == \"exit\") break;\n\n        if (send(sockfd, message.c_str(), message.size(), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        int valread = read(sockfd, buffer, sizeof(buffer));\n        if (valread < 0) {\n            std::cerr << \"Read failed\" << std::endl;\n            break;\n        } else if (valread == 0) {\n            std::cout << \"Server disconnected\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Server response: \" << buffer << std::endl;\n        memset(buffer, 0, sizeof(buffer));\n    }\n\n    close(sockfd);\n}\n```"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 11,
    "Instruction": "Task Description: Implement a TCP client in C++ that can establish a connection to a server, send messages, and receive responses.\n\nFunction Description: The code consists of two main functions for creating and managing a TCP client connection. The first function creates and connects a TCP socket to a specified server, while the second function handles the communication loop for sending and receiving messages.\n\nInput:\n- createAndConnectTCPSocket:\n  - ip: const char* - The IP address of the server to connect to\n  - port: int - The port number of the server to connect to\n\n- tcpClientCommunication:\n  - sockfd: int - The socket file descriptor returned by createAndConnectTCPSocket\n\nOutput:\n- createAndConnectTCPSocket:\n  - Returns: int - The socket file descriptor if successful, -1 if failed\n\n- tcpClientCommunication:\n  - No return value (void), but performs I/O operations until connection is terminated",
    "Canonical_solution": "#include <sys/socket.h>\n#include <arpa/inet.h>\n#include <string.h>\n#include <unistd.h>\n\n#define BUFFER_SIZE 1024\n\nint createAndConnectTCPSocket(const char* ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if(sockfd == -1) return -1;\n\n    struct sockaddr_in serv_addr;\n    bzero(&serv_addr, sizeof(serv_addr));\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_addr.s_addr = inet_addr(ip);\n    serv_addr.sin_port = htons(port);\n\n    if(connect(sockfd, (sockaddr*)&serv_addr, sizeof(serv_addr)) == -1) {\n        close(sockfd);\n        return -1;\n    }\n    \n    return sockfd;\n}\n\nvoid tcpClientCommunication(int sockfd) {\n    while(true){\n        char buf[BUFFER_SIZE];\n        bzero(&buf, sizeof(buf));\n        scanf(\"%s\", buf);\n        ssize_t write_bytes = write(sockfd, buf, sizeof(buf));\n        if(write_bytes == -1){\n            printf(\"socket already disconnected, can't write any more!\\n\");\n            break;\n        }\n        bzero(&buf, sizeof(buf));\n        ssize_t read_bytes = read(sockfd, buf, sizeof(buf));\n        if(read_bytes > 0){\n            printf(\"message from server: %s\\n\", buf);\n        }else if(read_bytes == 0){\n            printf(\"server socket disconnected!\\n\");\n            break;\n        }else if(read_bytes == -1){\n            close(sockfd);\n            break;\n        }\n    }\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 149,
    "matched_results": [
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint createAndConnectTCPSocket(const char* ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd < 0) {\n        return -1;\n    }\n\n    sockaddr_in serverAddr{};\n    serverAddr.sin_family = AF_INET;\n    serverAddr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, ip, &serverAddr.sin_addr) <= 0) {\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, reinterpret_cast<sockaddr*>(&serverAddr), sizeof(serverAddr)) < 0) {\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcpClientCommunication(int sockfd) {\n    char buffer[1024] = {0};\n    while (true) {\n        std::cout << \"Enter message to send: \";\n        std::string message;\n        std::getline(std::cin, message);\n\n        if (message == \"exit\") {\n            break;\n        }\n\n        if (send(sockfd, message.c_str(), message.size(), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        int valread = read(sockfd, buffer, sizeof(buffer));\n        if (valread <= 0) {\n            std::cerr << \"Connection closed or read error\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Received from server: \" << buffer << std::endl;\n        memset(buffer, 0, sizeof(buffer));\n    }\n\n    close(sockfd);\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint createAndConnectTCPSocket(const char* ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd < 0) {\n        return -1;\n    }\n\n    sockaddr_in serverAddr{};\n    serverAddr.sin_family = AF_INET;\n    serverAddr.sin_port = htons(port);\n    inet_pton(AF_INET, ip, &serverAddr.sin_addr);\n\n    if (connect(sockfd, reinterpret_cast<sockaddr*>(&serverAddr), sizeof(serverAddr)) < 0) {\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcpClientCommunication(int sockfd) {\n    char buffer[1024];\n    while (true) {\n        std::cout << \"Enter message to send: \";\n        std::cin.getline(buffer, sizeof(buffer));\n\n        if (send(sockfd, buffer, strlen(buffer), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        int bytesReceived = recv(sockfd, buffer, sizeof(buffer) - 1, 0);\n        if (bytesReceived <= 0) {\n            std::cerr << \"Connection closed or error occurred\" << std::endl;\n            break;\n        }\n\n        buffer[bytesReceived] = '\\0';\n        std::cout << \"Received from server: \" << buffer << std::endl;\n    }\n\n    close(sockfd);\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint createAndConnectTCPSocket(const char* ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd < 0) {\n        return -1;\n    }\n\n    struct sockaddr_in serverAddr;\n    memset(&serverAddr, 0, sizeof(serverAddr));\n    serverAddr.sin_family = AF_INET;\n    serverAddr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, ip, &serverAddr.sin_addr) <= 0) {\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr*)&serverAddr, sizeof(serverAddr)) < 0) {\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcpClientCommunication(int sockfd) {\n    char buffer[1024] = {0};\n    while (true) {\n        std::cout << \"Enter message to send: \";\n        std::string input;\n        std::getline(std::cin, input);\n        if (input.empty()) continue;\n\n        if (send(sockfd, input.c_str(), input.size(), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        int valread = read(sockfd, buffer, sizeof(buffer));\n        if (valread <= 0) {\n            std::cerr << \"Connection closed or read error\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Received from server: \" << buffer << std::endl;\n        memset(buffer, 0, sizeof(buffer));\n    }\n\n    close(sockfd);\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint createAndConnectTCPSocket(const char* ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd < 0) {\n        return -1;\n    }\n\n    sockaddr_in serverAddr{};\n    serverAddr.sin_family = AF_INET;\n    serverAddr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, ip, &serverAddr.sin_addr) <= 0) {\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, reinterpret_cast<sockaddr*>(&serverAddr), sizeof(serverAddr)) < 0) {\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcpClientCommunication(int sockfd) {\n    char buffer[1024] = {0};\n    while (true) {\n        std::cout << \"Enter message to send: \";\n        std::cin.getline(buffer, sizeof(buffer));\n\n        if (send(sockfd, buffer, strlen(buffer), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        memset(buffer, 0, sizeof(buffer));\n        int valread = read(sockfd, buffer, sizeof(buffer));\n        if (valread <= 0) {\n            std::cerr << \"Connection closed or read error\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Received from server: \" << buffer << std::endl;\n    }\n\n    close(sockfd);\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint createAndConnectTCPSocket(const char* ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd < 0) {\n        return -1;\n    }\n\n    struct sockaddr_in serverAddr;\n    memset(&serverAddr, 0, sizeof(serverAddr));\n    serverAddr.sin_family = AF_INET;\n    serverAddr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, ip, &serverAddr.sin_addr) <= 0) {\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr*)&serverAddr, sizeof(serverAddr)) < 0) {\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcpClientCommunication(int sockfd) {\n    char buffer[1024] = {0};\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::string message;\n        std::getline(std::cin, message);\n\n        if (send(sockfd, message.c_str(), message.size(), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        int valread = read(sockfd, buffer, sizeof(buffer));\n        if (valread <= 0) {\n            std::cerr << \"Connection closed or read error\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Server response: \" << buffer << std::endl;\n        memset(buffer, 0, sizeof(buffer));\n    }\n\n    close(sockfd);\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint createAndConnectTCPSocket(const char* ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd < 0) {\n        return -1;\n    }\n\n    struct sockaddr_in serverAddr;\n    memset(&serverAddr, 0, sizeof(serverAddr));\n    serverAddr.sin_family = AF_INET;\n    serverAddr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, ip, &serverAddr.sin_addr) <= 0) {\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr*)&serverAddr, sizeof(serverAddr)) < 0) {\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcpClientCommunication(int sockfd) {\n    char buffer[1024] = {0};\n    while (true) {\n        std::cout << \"Enter message to send: \";\n        std::string message;\n        std::getline(std::cin, message);\n\n        if (message == \"exit\") {\n            break;\n        }\n\n        if (send(sockfd, message.c_str(), message.size(), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        int valread = read(sockfd, buffer, sizeof(buffer));\n        if (valread <= 0) {\n            std::cerr << \"Connection closed or read error\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Received from server: \" << buffer << std::endl;\n        memset(buffer, 0, sizeof(buffer));\n    }\n\n    close(sockfd);\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint createAndConnectTCPSocket(const char* ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd < 0) {\n        return -1;\n    }\n\n    sockaddr_in serverAddr{};\n    serverAddr.sin_family = AF_INET;\n    serverAddr.sin_port = htons(port);\n    inet_pton(AF_INET, ip, &serverAddr.sin_addr);\n\n    if (connect(sockfd, reinterpret_cast<sockaddr*>(&serverAddr), sizeof(serverAddr)) < 0) {\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcpClientCommunication(int sockfd) {\n    char buffer[1024];\n    while (true) {\n        std::cout << \"Enter message to send: \";\n        std::cin.getline(buffer, sizeof(buffer));\n\n        if (send(sockfd, buffer, strlen(buffer), 0) < 0) {\n            std::cerr << \"Failed to send data\" << std::endl;\n            break;\n        }\n\n        int bytesReceived = recv(sockfd, buffer, sizeof(buffer) - 1, 0);\n        if (bytesReceived <= 0) {\n            std::cerr << \"Connection closed or error receiving data\" << std::endl;\n            break;\n        }\n\n        buffer[bytesReceived] = '\\0';\n        std::cout << \"Received from server: \" << buffer << std::endl;\n    }\n\n    close(sockfd);\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint createAndConnectTCPSocket(const char* ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd < 0) {\n        return -1;\n    }\n\n    sockaddr_in serverAddr{};\n    serverAddr.sin_family = AF_INET;\n    serverAddr.sin_port = htons(port);\n    inet_pton(AF_INET, ip, &serverAddr.sin_addr);\n\n    if (connect(sockfd, reinterpret_cast<sockaddr*>(&serverAddr), sizeof(serverAddr)) < 0) {\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcpClientCommunication(int sockfd) {\n    char buffer[1024];\n    while (true) {\n        std::cout << \"Enter message to send: \";\n        std::cin.getline(buffer, sizeof(buffer));\n\n        if (send(sockfd, buffer, strlen(buffer), 0) <= 0) {\n            break;\n        }\n\n        int bytesReceived = recv(sockfd, buffer, sizeof(buffer) - 1, 0);\n        if (bytesReceived <= 0) {\n            break;\n        }\n        buffer[bytesReceived] = '\\0';\n        std::cout << \"Received from server: \" << buffer << std::endl;\n    }\n\n    close(sockfd);\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint createAndConnectTCPSocket(const char* ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd < 0) {\n        return -1;\n    }\n\n    sockaddr_in serverAddr{};\n    serverAddr.sin_family = AF_INET;\n    serverAddr.sin_port = htons(port);\n    inet_pton(AF_INET, ip, &serverAddr.sin_addr);\n\n    if (connect(sockfd, reinterpret_cast<sockaddr*>(&serverAddr), sizeof(serverAddr)) < 0) {\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcpClientCommunication(int sockfd) {\n    char buffer[1024];\n    while (true) {\n        std::cout << \"Enter message to send: \";\n        std::cin.getline(buffer, sizeof(buffer));\n\n        if (send(sockfd, buffer, strlen(buffer), 0) < 0) {\n            std::cerr << \"Failed to send message.\" << std::endl;\n            break;\n        }\n\n        int bytesReceived = recv(sockfd, buffer, sizeof(buffer) - 1, 0);\n        if (bytesReceived <= 0) {\n            std::cerr << \"Connection closed or error occurred.\" << std::endl;\n            break;\n        }\n\n        buffer[bytesReceived] = '\\0';\n        std::cout << \"Received from server: \" << buffer << std::endl;\n    }\n\n    close(sockfd);\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint createAndConnectTCPSocket(const char* ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd < 0) {\n        return -1;\n    }\n\n    sockaddr_in serverAddr{};\n    serverAddr.sin_family = AF_INET;\n    serverAddr.sin_port = htons(port);\n    inet_pton(AF_INET, ip, &serverAddr.sin_addr);\n\n    if (connect(sockfd, reinterpret_cast<sockaddr*>(&serverAddr), sizeof(serverAddr)) < 0) {\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcpClientCommunication(int sockfd) {\n    char buffer[1024];\n    while (true) {\n        std::cout << \"Enter message to send: \";\n        std::cin.getline(buffer, sizeof(buffer));\n\n        if (send(sockfd, buffer, strlen(buffer), 0) < 0) {\n            std::cerr << \"Failed to send data\" << std::endl;\n            break;\n        }\n\n        memset(buffer, 0, sizeof(buffer));\n        ssize_t bytesReceived = recv(sockfd, buffer, sizeof(buffer) - 1, 0);\n        if (bytesReceived <= 0) {\n            std::cerr << \"Connection closed or error occurred\" << std::endl;\n            break;\n        }\n\n        buffer[bytesReceived] = '\\0';\n        std::cout << \"Received from server: \" << buffer << std::endl;\n    }\n\n    close(sockfd);\n}\n```"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 12,
    "Instruction": "Task Description: Implement a TCP client function in C++ that establishes a connection to a server, sends user input messages, and receives responses from the server until the connection is terminated.\n\nFunction Description: The function `tcp_client_communication` creates a TCP socket, connects to a specified server (localhost on port 8888 in this case), and enters a loop where it reads user input from stdin, sends it to the server, and prints the server's response. The communication continues until an error occurs or the connection is closed by either side.\n\nInput: None (The server IP and port are hardcoded as 127.0.0.1 and 8888 respectively in the current implementation, but could be parameterized)\n\nOutput: None (The function prints server responses to stdout but doesn't return any value)\n\nNote: The function handles socket creation, connection establishment, data transmission, and proper cleanup (socket closing) in case of errors or normal termination.",
    "Canonical_solution": "#include <sys/socket.h>\n#include <arpa/inet.h>\n#include <string.h>\n#include <unistd.h>\n\n#define BUFFER_SIZE 1024\n\nvoid tcp_client_communication() {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    \n    struct sockaddr_in serv_addr;\n    bzero(&serv_addr, sizeof(serv_addr));\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_addr.s_addr = inet_addr(\"127.0.0.1\");\n    serv_addr.sin_port = htons(8888);\n\n    connect(sockfd, (sockaddr*)&serv_addr, sizeof(serv_addr));\n    \n    while(true){\n        char buf[BUFFER_SIZE];\n        bzero(&buf, sizeof(buf));\n        scanf(\"%s\", buf);\n        ssize_t write_bytes = write(sockfd, buf, sizeof(buf));\n        if(write_bytes == -1){\n            break;\n        }\n        bzero(&buf, sizeof(buf));\n        ssize_t read_bytes = read(sockfd, buf, sizeof(buf));\n        if(read_bytes > 0){\n            printf(\"message from server: %s\\n\", buf);\n        }else if(read_bytes == 0){\n            break;\n        }else if(read_bytes == -1){\n            close(sockfd);\n            break;\n        }\n    }\n    close(sockfd);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 149,
    "matched_results": [
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nvoid tcp_client_communication() {\n    int sock = 0;\n    struct sockaddr_in serv_addr;\n    char buffer[1024] = {0};\n\n    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation error\" << std::endl;\n        return;\n    }\n\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(8888);\n\n    // Convert IPv4 and IPv6 addresses from text to binary form\n    if (inet_pton(AF_INET, \"127.0.0.1\", &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address / Address not supported\" << std::endl;\n        close(sock);\n        return;\n    }\n\n    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        close(sock);\n        return;\n    }\n\n    while (true) {\n        std::string input;\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, input);\n\n        if (input.empty()) continue;\n\n        if (send(sock, input.c_str(), input.length(), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        int valread = read(sock, buffer, sizeof(buffer));\n        if (valread <= 0) {\n            std::cerr << \"Server disconnected or read error\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Server response: \" << buffer << std::endl;\n        memset(buffer, 0, sizeof(buffer));\n    }\n\n    close(sock);\n}\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nvoid tcp_client_communication() {\n    int sock = 0;\n    struct sockaddr_in serv_addr;\n    char buffer[1024] = {0};\n\n    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation error\" << std::endl;\n        return;\n    }\n\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(8888);\n\n    // Convert IPv4 and IPv6 addresses from text to binary form\n    if (inet_pton(AF_INET, \"127.0.0.1\", &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address / Address not supported\" << std::endl;\n        close(sock);\n        return;\n    }\n\n    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        close(sock);\n        return;\n    }\n\n    while (true) {\n        std::string input;\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, input);\n\n        if (input.empty()) continue;\n\n        if (send(sock, input.c_str(), input.length(), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        int valread = read(sock, buffer, sizeof(buffer));\n        if (valread <= 0) {\n            std::cerr << \"Server disconnected or read error\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Server response: \" << buffer << std::endl;\n        memset(buffer, 0, sizeof(buffer));\n    }\n\n    close(sock);\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nvoid tcp_client_communication() {\n    int sock = 0;\n    struct sockaddr_in serv_addr;\n    char buffer[1024] = {0};\n\n    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation error\" << std::endl;\n        return;\n    }\n\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(8888);\n\n    // Convert IPv4 and IPv6 addresses from text to binary form\n    if (inet_pton(AF_INET, \"127.0.0.1\", &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address / Address not supported\" << std::endl;\n        close(sock);\n        return;\n    }\n\n    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        close(sock);\n        return;\n    }\n\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::cin.getline(buffer, sizeof(buffer));\n\n        if (send(sock, buffer, strlen(buffer), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        memset(buffer, 0, sizeof(buffer));\n        int valread = read(sock, buffer, sizeof(buffer));\n        if (valread <= 0) {\n            std::cerr << \"Server disconnected or read error\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Server response: \" << buffer << std::endl;\n    }\n\n    close(sock);\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nvoid tcp_client_communication() {\n    int sock = 0;\n    struct sockaddr_in serv_addr;\n    char buffer[1024] = {0};\n\n    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation error\" << std::endl;\n        return;\n    }\n\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(8888);\n\n    if (inet_pton(AF_INET, \"127.0.0.1\", &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/Address not supported\" << std::endl;\n        close(sock);\n        return;\n    }\n\n    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        close(sock);\n        return;\n    }\n\n    while (true) {\n        std::string input;\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, input);\n\n        if (input.empty()) continue;\n\n        if (send(sock, input.c_str(), input.length(), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        int valread = read(sock, buffer, sizeof(buffer));\n        if (valread <= 0) {\n            std::cerr << \"Server disconnected or read error\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Server response: \" << buffer << std::endl;\n        memset(buffer, 0, sizeof(buffer));\n    }\n\n    close(sock);\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nvoid tcp_client_communication() {\n    int sock = 0;\n    struct sockaddr_in serv_addr;\n    char buffer[1024] = {0};\n\n    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation error\" << std::endl;\n        return;\n    }\n\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(8888);\n\n    // Convert IPv4 and IPv6 addresses from text to binary form\n    if (inet_pton(AF_INET, \"127.0.0.1\", &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address / Address not supported\" << std::endl;\n        close(sock);\n        return;\n    }\n\n    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        close(sock);\n        return;\n    }\n\n    while (true) {\n        std::string input;\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, input);\n\n        if (input.empty()) continue;\n\n        if (send(sock, input.c_str(), input.length(), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        int valread = read(sock, buffer, sizeof(buffer));\n        if (valread <= 0) {\n            std::cerr << \"Server disconnected or read error\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Server response: \" << buffer << std::endl;\n        memset(buffer, 0, sizeof(buffer));\n    }\n\n    close(sock);\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nvoid tcp_client_communication() {\n    int sock = 0;\n    struct sockaddr_in serv_addr;\n    char buffer[1024] = {0};\n\n    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation error\" << std::endl;\n        return;\n    }\n\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(8888);\n\n    // Convert IPv4 and IPv6 addresses from text to binary form\n    if (inet_pton(AF_INET, \"127.0.0.1\", &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        close(sock);\n        return;\n    }\n\n    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        close(sock);\n        return;\n    }\n\n    while (true) {\n        std::string input;\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, input);\n\n        if (input.empty()) continue;\n\n        if (send(sock, input.c_str(), input.length(), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        int valread = read(sock, buffer, sizeof(buffer));\n        if (valread <= 0) {\n            std::cerr << \"Server disconnected or read error\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Server response: \" << buffer << std::endl;\n        memset(buffer, 0, sizeof(buffer));\n    }\n\n    close(sock);\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nvoid tcp_client_communication() {\n    int sock = 0;\n    struct sockaddr_in serv_addr;\n    char buffer[1024] = {0};\n\n    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation error\" << std::endl;\n        return;\n    }\n\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(8888);\n\n    if (inet_pton(AF_INET, \"127.0.0.1\", &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/Address not supported\" << std::endl;\n        close(sock);\n        return;\n    }\n\n    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection failed\" << std::endl;\n        close(sock);\n        return;\n    }\n\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::cin.getline(buffer, sizeof(buffer));\n\n        if (send(sock, buffer, strlen(buffer), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        memset(buffer, 0, sizeof(buffer));\n        int valread = read(sock, buffer, sizeof(buffer));\n        if (valread <= 0) {\n            std::cerr << \"Server disconnected or read error\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Server response: \" << buffer << std::endl;\n    }\n\n    close(sock);\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nvoid tcp_client_communication() {\n    int sock = 0;\n    struct sockaddr_in serv_addr;\n    char buffer[1024] = {0};\n\n    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation error\" << std::endl;\n        return;\n    }\n\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(8888);\n\n    if (inet_pton(AF_INET, \"127.0.0.1\", &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address / Address not supported\" << std::endl;\n        close(sock);\n        return;\n    }\n\n    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        close(sock);\n        return;\n    }\n\n    while (true) {\n        std::cin.getline(buffer, sizeof(buffer));\n        if (send(sock, buffer, strlen(buffer), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        memset(buffer, 0, sizeof(buffer));\n        int valread = read(sock, buffer, sizeof(buffer));\n        if (valread <= 0) {\n            std::cerr << \"Server disconnected or read error\" << std::endl;\n            break;\n        }\n        std::cout << buffer << std::endl;\n    }\n\n    close(sock);\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nvoid tcp_client_communication() {\n    int sock = 0;\n    struct sockaddr_in serv_addr;\n    char buffer[1024] = {0};\n\n    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation error\" << std::endl;\n        return;\n    }\n\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(8888);\n\n    if (inet_pton(AF_INET, \"127.0.0.1\", &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address / Address not supported\" << std::endl;\n        close(sock);\n        return;\n    }\n\n    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        close(sock);\n        return;\n    }\n\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::cin.getline(buffer, sizeof(buffer));\n\n        if (send(sock, buffer, strlen(buffer), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        memset(buffer, 0, sizeof(buffer));\n        int valread = read(sock, buffer, sizeof(buffer));\n        if (valread <= 0) {\n            std::cerr << \"Server disconnected or read error\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Server response: \" << buffer << std::endl;\n    }\n\n    close(sock);\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nvoid tcp_client_communication() {\n    int sock = 0;\n    struct sockaddr_in serv_addr;\n    char buffer[1024] = {0};\n\n    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation error\" << std::endl;\n        return;\n    }\n\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(8888);\n\n    // Convert IPv4 and IPv6 addresses from text to binary form\n    if (inet_pton(AF_INET, \"127.0.0.1\", &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        close(sock);\n        return;\n    }\n\n    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        close(sock);\n        return;\n    }\n\n    while (true) {\n        std::string input;\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, input);\n\n        if (input.empty()) continue;\n\n        if (send(sock, input.c_str(), input.length(), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        int valread = read(sock, buffer, sizeof(buffer));\n        if (valread <= 0) {\n            std::cerr << \"Server disconnected or read error\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Server response: \" << buffer << std::endl;\n        memset(buffer, 0, sizeof(buffer));\n    }\n\n    close(sock);\n}\n```"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 13,
    "Instruction": "Task Description: Create a TCP client function in C++ that establishes a connection to a server, sends and receives messages, and maintains the connection until terminated by the user.\n\nFunction Description: The function `create_tcp_client` initializes a TCP client that connects to a specified server IP address. It creates a socket, establishes a connection, and provides interactive communication where the user can send messages to the server and receive responses. The function handles basic error cases and properly closes the connection when done.\n\nInput: \n- `server_ip`: [const char*] - The IP address of the server to connect to in string format (e.g., \"127.0.0.1\")\n\nOutput: \n- [int] - Returns 0 on successful execution and -1 if any error occurs during socket creation or connection establishment. The function runs indefinitely until manually terminated by the user.\n\nNote: The function uses a default port 6666 for the connection. Error messages are printed to stderr using `perror` for debugging purposes. The communication loop continues until the program is interrupted, allowing continuous message exchange between client and server.",
    "Canonical_solution": "#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#include <string.h>\n\n#define DEFAULT_PORT 6666\n\nint create_tcp_client(const char* server_ip) {\n    int connfd = 0;\n    struct sockaddr_in client;\n    \n    client.sin_family = AF_INET;\n    client.sin_port = htons(DEFAULT_PORT);\n    client.sin_addr.s_addr = inet_addr(server_ip);\n    \n    connfd = socket(AF_INET, SOCK_STREAM, 0);\n    if(connfd < 0){\n        perror(\"socket\");\n        return -1;\n    }\n    \n    if(connect(connfd, (struct sockaddr *)&client, sizeof(client)) < 0){\n        perror(\"connect\");\n        close(connfd);\n        return -1;\n    }\n    \n    char buff[1024];\n    bzero(buff, sizeof(buff));\n    recv(connfd, buff, 1024, 0);\n    printf(\"recv : %s \\n\", buff);\n    \n    bzero(buff, sizeof(buff));\n    strcpy(buff, \"this is client \\n\");\n    send(connfd, buff, 1024, 0);\n    \n    while(1){\n        bzero(buff, sizeof(buff));\n        scanf(\"%s\", buff);\n        int p = strlen(buff);\n        buff[p] = '\\0';\n        send(connfd, buff, 1024, 0);\n        printf(\"i have send buff \\n\");\n    }\n    \n    close(connfd);\n    return 0;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 149,
    "matched_results": [
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint create_tcp_client(const char* server_ip) {\n    int sock = socket(AF_INET, SOCK_STREAM, 0);\n    if (sock < 0) {\n        perror(\"Socket creation failed\");\n        return -1;\n    }\n\n    struct sockaddr_in server_addr{};\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(6666);\n\n    if (inet_pton(AF_INET, server_ip, &server_addr.sin_addr) <= 0) {\n        perror(\"Invalid address/Address not supported\");\n        close(sock);\n        return -1;\n    }\n\n    if (connect(sock, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {\n        perror(\"Connection failed\");\n        close(sock);\n        return -1;\n    }\n\n    char buffer[1024] = {0};\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::cin.getline(buffer, sizeof(buffer));\n\n        if (send(sock, buffer, strlen(buffer), 0) < 0) {\n            perror(\"Send failed\");\n            break;\n        }\n\n        memset(buffer, 0, sizeof(buffer));\n        int valread = read(sock, buffer, sizeof(buffer));\n        if (valread < 0) {\n            perror(\"Read failed\");\n            break;\n        } else if (valread == 0) {\n            std::cerr << \"Server disconnected\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Server response: \" << buffer << std::endl;\n    }\n\n    close(sock);\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint create_tcp_client(const char* server_ip) {\n    int sock = socket(AF_INET, SOCK_STREAM, 0);\n    if (sock < 0) {\n        perror(\"Socket creation failed\");\n        return -1;\n    }\n\n    struct sockaddr_in server_addr{};\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(6666);\n\n    if (inet_pton(AF_INET, server_ip, &server_addr.sin_addr) <= 0) {\n        perror(\"Invalid address/Address not supported\");\n        close(sock);\n        return -1;\n    }\n\n    if (connect(sock, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {\n        perror(\"Connection failed\");\n        close(sock);\n        return -1;\n    }\n\n    char buffer[1024] = {0};\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::cin.getline(buffer, sizeof(buffer));\n\n        if (send(sock, buffer, strlen(buffer), 0) < 0) {\n            perror(\"Send failed\");\n            break;\n        }\n\n        memset(buffer, 0, sizeof(buffer));\n        int valread = read(sock, buffer, sizeof(buffer));\n        if (valread < 0) {\n            perror(\"Read failed\");\n            break;\n        } else if (valread == 0) {\n            std::cerr << \"Server disconnected\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Server response: \" << buffer << std::endl;\n    }\n\n    close(sock);\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint create_tcp_client(const char* server_ip) {\n    int sock = socket(AF_INET, SOCK_STREAM, 0);\n    if (sock < 0) {\n        perror(\"Socket creation failed\");\n        return -1;\n    }\n\n    struct sockaddr_in server_addr{};\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(6666);\n\n    if (inet_pton(AF_INET, server_ip, &server_addr.sin_addr) <= 0) {\n        perror(\"Invalid address/Address not supported\");\n        close(sock);\n        return -1;\n    }\n\n    if (connect(sock, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {\n        perror(\"Connection failed\");\n        close(sock);\n        return -1;\n    }\n\n    char buffer[1024] = {0};\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::cin.getline(buffer, sizeof(buffer));\n\n        if (send(sock, buffer, strlen(buffer), 0) < 0) {\n            perror(\"Send failed\");\n            break;\n        }\n\n        memset(buffer, 0, sizeof(buffer));\n        int valread = read(sock, buffer, sizeof(buffer));\n        if (valread < 0) {\n            perror(\"Read failed\");\n            break;\n        } else if (valread == 0) {\n            std::cerr << \"Server disconnected\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Server response: \" << buffer << std::endl;\n    }\n\n    close(sock);\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint create_tcp_client(const char* server_ip) {\n    int sock = socket(AF_INET, SOCK_STREAM, 0);\n    if (sock < 0) {\n        perror(\"Socket creation failed\");\n        return -1;\n    }\n\n    struct sockaddr_in server_addr{};\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(6666);\n\n    if (inet_pton(AF_INET, server_ip, &server_addr.sin_addr) <= 0) {\n        perror(\"Invalid address/Address not supported\");\n        close(sock);\n        return -1;\n    }\n\n    if (connect(sock, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {\n        perror(\"Connection failed\");\n        close(sock);\n        return -1;\n    }\n\n    char buffer[1024] = {0};\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::cin.getline(buffer, sizeof(buffer));\n\n        if (send(sock, buffer, strlen(buffer), 0) < 0) {\n            perror(\"Send failed\");\n            break;\n        }\n\n        memset(buffer, 0, sizeof(buffer));\n        int valread = read(sock, buffer, sizeof(buffer));\n        if (valread < 0) {\n            perror(\"Read failed\");\n            break;\n        } else if (valread == 0) {\n            std::cerr << \"Server disconnected\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Server response: \" << buffer << std::endl;\n    }\n\n    close(sock);\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint create_tcp_client(const char* server_ip) {\n    int sock = socket(AF_INET, SOCK_STREAM, 0);\n    if (sock < 0) {\n        perror(\"Socket creation failed\");\n        return -1;\n    }\n\n    struct sockaddr_in server_addr{};\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(6666);\n\n    if (inet_pton(AF_INET, server_ip, &server_addr.sin_addr) <= 0) {\n        perror(\"Invalid address/Address not supported\");\n        close(sock);\n        return -1;\n    }\n\n    if (connect(sock, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {\n        perror(\"Connection failed\");\n        close(sock);\n        return -1;\n    }\n\n    char buffer[1024] = {0};\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::cin.getline(buffer, sizeof(buffer));\n\n        if (send(sock, buffer, strlen(buffer), 0) < 0) {\n            perror(\"Send failed\");\n            break;\n        }\n\n        memset(buffer, 0, sizeof(buffer));\n        int valread = read(sock, buffer, sizeof(buffer));\n        if (valread < 0) {\n            perror(\"Read failed\");\n            break;\n        } else if (valread == 0) {\n            std::cerr << \"Server disconnected\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Server response: \" << buffer << std::endl;\n    }\n\n    close(sock);\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint create_tcp_client(const char* server_ip) {\n    int sock = socket(AF_INET, SOCK_STREAM, 0);\n    if (sock < 0) {\n        perror(\"Socket creation failed\");\n        return -1;\n    }\n\n    struct sockaddr_in server_addr{};\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(6666);\n\n    if (inet_pton(AF_INET, server_ip, &server_addr.sin_addr) <= 0) {\n        perror(\"Invalid address/Address not supported\");\n        close(sock);\n        return -1;\n    }\n\n    if (connect(sock, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {\n        perror(\"Connection failed\");\n        close(sock);\n        return -1;\n    }\n\n    char buffer[1024] = {0};\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::cin.getline(buffer, sizeof(buffer));\n\n        if (send(sock, buffer, strlen(buffer), 0) < 0) {\n            perror(\"Send failed\");\n            break;\n        }\n\n        memset(buffer, 0, sizeof(buffer));\n        int valread = read(sock, buffer, sizeof(buffer));\n        if (valread < 0) {\n            perror(\"Read failed\");\n            break;\n        } else if (valread == 0) {\n            std::cerr << \"Server disconnected\" << std::endl;\n            break;\n        }\n        std::cout << \"Server response: \" << buffer << std::endl;\n    }\n\n    close(sock);\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint create_tcp_client(const char* server_ip) {\n    int sock = socket(AF_INET, SOCK_STREAM, 0);\n    if (sock < 0) {\n        perror(\"Socket creation failed\");\n        return -1;\n    }\n\n    struct sockaddr_in server_addr{};\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(6666);\n\n    if (inet_pton(AF_INET, server_ip, &server_addr.sin_addr) <= 0) {\n        perror(\"Invalid address/Address not supported\");\n        close(sock);\n        return -1;\n    }\n\n    if (connect(sock, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {\n        perror(\"Connection failed\");\n        close(sock);\n        return -1;\n    }\n\n    char buffer[1024] = {0};\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::cin.getline(buffer, sizeof(buffer));\n\n        if (send(sock, buffer, strlen(buffer), 0) < 0) {\n            perror(\"Send failed\");\n            break;\n        }\n\n        memset(buffer, 0, sizeof(buffer));\n        int valread = read(sock, buffer, sizeof(buffer));\n        if (valread < 0) {\n            perror(\"Read failed\");\n            break;\n        } else if (valread == 0) {\n            std::cerr << \"Server disconnected\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Server response: \" << buffer << std::endl;\n    }\n\n    close(sock);\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint create_tcp_client(const char* server_ip) {\n    int sock = socket(AF_INET, SOCK_STREAM, 0);\n    if (sock < 0) {\n        perror(\"Socket creation failed\");\n        return -1;\n    }\n\n    struct sockaddr_in server_addr{};\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(6666);\n\n    if (inet_pton(AF_INET, server_ip, &server_addr.sin_addr) <= 0) {\n        perror(\"Invalid address/Address not supported\");\n        close(sock);\n        return -1;\n    }\n\n    if (connect(sock, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {\n        perror(\"Connection failed\");\n        close(sock);\n        return -1;\n    }\n\n    char buffer[1024] = {0};\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::cin.getline(buffer, sizeof(buffer));\n\n        if (send(sock, buffer, strlen(buffer), 0) < 0) {\n            perror(\"Send failed\");\n            break;\n        }\n\n        memset(buffer, 0, sizeof(buffer));\n        int valread = read(sock, buffer, sizeof(buffer));\n        if (valread < 0) {\n            perror(\"Read failed\");\n            break;\n        } else if (valread == 0) {\n            std::cerr << \"Server disconnected\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Server response: \" << buffer << std::endl;\n    }\n\n    close(sock);\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint create_tcp_client(const char* server_ip) {\n    int sock = socket(AF_INET, SOCK_STREAM, 0);\n    if (sock < 0) {\n        perror(\"Socket creation failed\");\n        return -1;\n    }\n\n    struct sockaddr_in server_addr{};\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(6666);\n\n    if (inet_pton(AF_INET, server_ip, &server_addr.sin_addr) <= 0) {\n        perror(\"Invalid address/Address not supported\");\n        close(sock);\n        return -1;\n    }\n\n    if (connect(sock, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {\n        perror(\"Connection failed\");\n        close(sock);\n        return -1;\n    }\n\n    char buffer[1024] = {0};\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::cin.getline(buffer, sizeof(buffer));\n\n        if (send(sock, buffer, strlen(buffer), 0) < 0) {\n            perror(\"Send failed\");\n            break;\n        }\n\n        memset(buffer, 0, sizeof(buffer));\n        int valread = read(sock, buffer, sizeof(buffer));\n        if (valread < 0) {\n            perror(\"Read failed\");\n            break;\n        } else if (valread == 0) {\n            std::cerr << \"Server disconnected\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Server response: \" << buffer << std::endl;\n    }\n\n    close(sock);\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint create_tcp_client(const char* server_ip) {\n    int sock = socket(AF_INET, SOCK_STREAM, 0);\n    if (sock < 0) {\n        perror(\"Socket creation failed\");\n        return -1;\n    }\n\n    struct sockaddr_in server_addr{};\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(6666);\n\n    if (inet_pton(AF_INET, server_ip, &server_addr.sin_addr) <= 0) {\n        perror(\"Invalid address/Address not supported\");\n        close(sock);\n        return -1;\n    }\n\n    if (connect(sock, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {\n        perror(\"Connection failed\");\n        close(sock);\n        return -1;\n    }\n\n    char buffer[1024] = {0};\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::cin.getline(buffer, sizeof(buffer));\n\n        if (send(sock, buffer, strlen(buffer), 0) < 0) {\n            perror(\"Send failed\");\n            break;\n        }\n\n        memset(buffer, 0, sizeof(buffer));\n        int valread = read(sock, buffer, sizeof(buffer));\n        if (valread < 0) {\n            perror(\"Read failed\");\n            break;\n        } else if (valread == 0) {\n            std::cerr << \"Server disconnected\" << std::endl;\n            break;\n        }\n        std::cout << \"Server response: \" << buffer << std::endl;\n    }\n\n    close(sock);\n    return 0;\n}\n```"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 14,
    "Instruction": "Task Description: Create a C++ class that handles HTTP communication over TCP and UDP protocols, including sending requests and receiving responses from a server.\n\nClass Description: The LinHttpHandler class provides functionality for sending HTTP requests and receiving responses using both TCP (for standard HTTP communication) and UDP (for multicast communication). It includes error handling and resource management through RAII.\n\nAttributes:\n\nSocketCloser: [Nested Class] - A helper class that ensures sockets are properly closed when they go out of scope.\n\nMethods:\n\nsend: [Name](const std::string& msg, const std::string& adr, int port) -> std::string - Sends an HTTP message to the specified address and port using TCP and returns the server's response. Throws system_error on failure.\n\nsendMulticast: [Name](const std::string& msg, const std::string& adr, int port, std::chrono::steady_clock::duration timeout) -> std::vector<std::string> - Sends a multicast message using UDP and collects responses within the specified timeout period. Returns a vector of response strings. Throws system_error on failure.\n\nSocketCloser: [Name](int sockFd) -> None - Constructor that takes a socket file descriptor. The destructor automatically closes the socket.",
    "Canonical_solution": "#include <arpa/inet.h>\n#include <netdb.h>\n#include <netinet/in.h>\n#include <sys/socket.h>\n#include <unistd.h>\n#include <chrono>\n#include <memory>\n#include <stdexcept>\n#include <system_error>\n#include <vector>\n\nnamespace hueplusplus\n{\nclass LinHttpHandler\n{\npublic:\n    std::string send(const std::string& msg, const std::string& adr, int port) const\n    {\n        int socketFD = socket(AF_INET, SOCK_STREAM, 0);\n\n        SocketCloser closeMySocket(socketFD);\n        if (socketFD < 0)\n        {\n            int errCode = errno;\n            throw(std::system_error(errCode, std::generic_category(), \"LinHttpHandler: Failed to open socket\"));\n        }\n\n        hostent* server = gethostbyname(adr.c_str());\n        if (server == NULL)\n        {\n            int errCode = errno;\n            throw(std::system_error(errCode, std::generic_category(), \"LinHttpHandler: gethostbyname\"));\n        }\n\n        sockaddr_in server_addr;\n        memset(&server_addr, 0, sizeof(server_addr));\n        server_addr.sin_family = AF_INET;\n        server_addr.sin_port = htons(port);\n        memcpy(&server_addr.sin_addr.s_addr, server->h_addr, server->h_length);\n\n        if (connect(socketFD, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0)\n        {\n            int errCode = errno;\n            throw(std::system_error(errCode, std::generic_category(), \"LinHttpHandler: Failed to connect socket\"));\n        }\n\n        size_t total = msg.length();\n        size_t sent = 0;\n        do\n        {\n            ssize_t bytes = write(socketFD, msg.c_str() + sent, total - sent);\n            if (bytes < 0)\n            {\n                int errCode = errno;\n                throw(std::system_error(errCode, std::generic_category(), \"LinHttpHandler: Failed to write message to socket\"));\n            }\n            sent += bytes;\n        } while (sent < total);\n\n        std::string response;\n        char buffer[128] = {};\n        do\n        {\n            ssize_t bytes = read(socketFD, buffer, 127);\n            if (bytes < 0)\n            {\n                int errCode = errno;\n                throw(std::system_error(errCode, std::generic_category(), \"LinHttpHandler: Failed to read response from socket\"));\n            }\n            response.append(buffer, bytes);\n        } while (true);\n\n        return response;\n    }\n\n    std::vector<std::string> sendMulticast(\n        const std::string& msg, const std::string& adr, int port, std::chrono::steady_clock::duration timeout) const\n    {\n        hostent* server;\n        sockaddr_in server_addr;\n\n        memset((char*)&server_addr, 0, sizeof(server_addr));\n        server_addr.sin_family = AF_INET;\n        server_addr.sin_port = htons(port);\n\n        server = gethostbyname(adr.c_str());\n        if (!server)\n        {\n            int errCode = errno;\n            throw(std::system_error(errCode, std::generic_category(), \"LinHttpHandler: sendMulticast: Failed to obtain address of host\"));\n        }\n\n        memcpy((void*)&server_addr.sin_addr, server->h_addr_list[0], server->h_length);\n\n        int socketFD = socket(AF_INET, SOCK_DGRAM, 0);\n        SocketCloser closeMySendSocket(socketFD);\n        if (socketFD < 0)\n        {\n            int errCode = errno;\n            throw(std::system_error(errCode, std::generic_category(), \"LinHttpHandler: sendMulticast: Failed to open socket\"));\n        }\n\n        if (sendto(socketFD, msg.c_str(), strlen(msg.c_str()), 0, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0)\n        {\n            int errCode = errno;\n            throw(std::system_error(errCode, std::generic_category(), \"LinHttpHandler: sendMulticast: Failed to send message\"));\n        }\n\n        std::string response;\n        char buffer[2048] = {};\n\n        std::chrono::steady_clock::time_point start = std::chrono::steady_clock::now();\n        while (std::chrono::steady_clock::now() - start < timeout)\n        {\n            ssize_t bytesReceived = recv(socketFD, &buffer, 2048, MSG_DONTWAIT);\n            if (bytesReceived < 0 && errno != EAGAIN && errno != EWOULDBLOCK)\n            {\n                int errCode = errno;\n                throw(std::system_error(errCode, std::generic_category(), \"LinHttpHandler: sendMulticast: Failed to read response from socket\"));\n            }\n            if (bytesReceived > 0)\n            {\n                response.append(buffer, bytesReceived);\n            }\n        }\n\n        std::vector<std::string> returnString;\n        size_t pos = response.find(\"\\r\\n\\r\\n\");\n        size_t prevpos = 0;\n        while (pos != std::string::npos)\n        {\n            returnString.push_back(response.substr(prevpos, pos - prevpos));\n            pos += 4;\n            prevpos = pos;\n            pos = response.find(\"\\r\\n\\r\\n\", pos);\n        }\n        return returnString;\n    }\n\nprivate:\n    class SocketCloser\n    {\n    public:\n        explicit SocketCloser(int sockFd) : s(sockFd) {}\n        ~SocketCloser() { close(s); }\n\n    private:\n        int s;\n    };\n};\n} // namespace hueplusplus",
    "Code_level": "Class-level",
    "FSMID_for_test": 149,
    "matched_results": [
      "```cpp\n#include <iostream>\n#include <string>\n#include <vector>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <thread>\n#include <chrono>\n#include <stdexcept>\n#include <mutex>\n\nclass LinHttpHandler {\npublic:\n    class SocketCloser {\n    private:\n        int sockFd;\n    public:\n        explicit SocketCloser(int fd) : sockFd(fd) {}\n        ~SocketCloser() {\n            if (sockFd != -1) {\n                close(sockFd);\n            }\n        }\n        int get() const { return sockFd; }\n    };\n\n    std::string send(const std::string& msg, const std::string& adr, int port) {\n        int sock = socket(AF_INET, SOCK_STREAM, 0);\n        if (sock < 0) {\n            throw std::system_error(errno, std::generic_category(), \"Failed to create TCP socket\");\n        }\n\n        sockaddr_in serverAddr{};\n        serverAddr.sin_family = AF_INET;\n        serverAddr.sin_port = htons(port);\n        if (inet_pton(AF_INET, adr.c_str(), &serverAddr.sin_addr) <= 0) {\n            close(sock);\n            throw std::system_error(errno, std::generic_category(), \"Invalid address or address not supported\");\n        }\n\n        SocketCloser closer(sock);\n\n        if (connect(sock, reinterpret_cast<sockaddr*>(&serverAddr), sizeof(serverAddr)) < 0) {\n            throw std::system_error(errno, std::generic_category(), \"Connection failed\");\n        }\n\n        if (send(sock, msg.c_str(), msg.size(), 0) < 0) {\n            throw std::system_error(errno, std::generic_category(), \"Send failed\");\n        }\n\n        char buffer[4096];\n        std::string response;\n        ssize_t bytesReceived;\n\n        while ((bytesReceived = recv(sock, buffer, sizeof(buffer), 0)) > 0) {\n            response.append(buffer, bytesReceived);\n        }\n\n        if (bytesReceived < 0) {\n            throw std::system_error(errno, std::generic_category(), \"Receive failed\");\n        }\n\n        return response;\n    }\n\n    std::vector<std::string> sendMulticast(const std::string& msg, const std::string& adr, int port, std::chrono::steady_clock::duration timeout) {\n        int sock = socket(AF_INET, SOCK_DGRAM, 0);\n        if (sock < 0) {\n            throw std::system_error(errno, std::generic_category(), \"Failed to create UDP socket\");\n        }\n\n        int reuse = 1;\n        if (setsockopt(sock, SOL_SOCKET, SO_REUSEADDR, &reuse, sizeof(reuse)) < 0) {\n            close(sock);\n            throw std::system_error(errno, std::generic_category(), \"Setsockopt failed\");\n        }\n\n        sockaddr_in multicastAddr{};\n        multicastAddr.sin_family = AF_INET;\n        multicastAddr.sin_addr.s_addr = inet_addr(adr.c_str());\n        multicastAddr.sin_port = htons(port);\n\n        if (bind(sock, reinterpret_cast<sockaddr*>(&multicastAddr), sizeof(multicastAddr)) < 0) {\n            close(sock);\n            throw std::system_error(errno, std::generic_category(), \"Bind failed\");\n        }\n\n        if (sendto(sock, msg.c_str(), msg.size(), 0, reinterpret_cast<sockaddr*>(&multicastAddr), sizeof(multicastAddr)) < 0) {\n            close(sock);\n            throw std::system_error(errno, std::generic_category(), \"Sendto failed\");\n        }\n\n        std::vector<std::string> responses;\n        std::mutex responseMutex;\n\n        auto receiveThread = std::thread([&] {\n            char buffer[4096];\n            sockaddr_in clientAddr{};\n            socklen_t addrLen = sizeof(clientAddr);\n\n            auto end = std::chrono::steady_clock::now() + timeout;\n            while (std::chrono::steady_clock::now() < end) {\n                fd_set readSet;\n                FD_ZERO(&readSet);\n                FD_SET(sock, &readSet);\n\n                timeval tv;\n                auto now = std::chrono::steady_clock::now();\n                auto remaining = std::chrono::duration_cast<std::chrono::microseconds>(end - now);\n                tv.tv_sec = static_cast<long>(remaining.count() / 1000000);\n                tv.tv_usec = static_cast<long>(remaining.count() % 1000000);\n\n                if (select(sock + 1, &readSet, nullptr, nullptr, &tv) > 0) {\n                    ssize_t bytesReceived = recvfrom(sock, buffer, sizeof(buffer), 0, reinterpret_cast<sockaddr*>(&clientAddr), &addrLen);\n                    if (bytesReceived > 0) {\n                        std::lock_guard<std::mutex> lock(responseMutex);\n                        responses.emplace_back(buffer, bytesReceived);\n                    }\n                }\n            }\n        });\n\n        receiveThread.join();\n\n        return responses;\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <vector>\n#include <cstring>\n#include <unistd.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <thread>\n#include <chrono>\n#include <stdexcept>\n#include <mutex>\n\nclass LinHttpHandler {\npublic:\n    class SocketCloser {\n    private:\n        int sockFd;\n    public:\n        explicit SocketCloser(int fd) : sockFd(fd) {}\n        ~SocketCloser() {\n            if (sockFd != -1) {\n                close(sockFd);\n            }\n        }\n        int get() const { return sockFd; }\n    };\n\n    static std::string send(const std::string& msg, const std::string& adr, int port) {\n        int sock = socket(AF_INET, SOCK_STREAM, 0);\n        if (sock < 0) {\n            throw std::system_error(errno, std::generic_category(), \"Failed to create TCP socket\");\n        }\n        SocketCloser closer(sock);\n\n        sockaddr_in serverAddr{};\n        serverAddr.sin_family = AF_INET;\n        serverAddr.sin_port = htons(port);\n        if (inet_pton(AF_INET, adr.c_str(), &serverAddr.sin_addr) <= 0) {\n            throw std::system_error(errno, std::generic_category(), \"Invalid address or address not supported\");\n        }\n\n        if (connect(sock, reinterpret_cast<sockaddr*>(&serverAddr), sizeof(serverAddr)) < 0) {\n            throw std::system_error(errno, std::generic_category(), \"Connection failed\");\n        }\n\n        if (send(sock, msg.c_str(), msg.size(), 0) < 0) {\n            throw std::system_error(errno, std::generic_category(), \"Send failed\");\n        }\n\n        char buffer[4096];\n        std::string response;\n        ssize_t bytesReceived;\n        while ((bytesReceived = recv(sock, buffer, sizeof(buffer), 0)) > 0) {\n            response.append(buffer, bytesReceived);\n        }\n\n        if (bytesReceived < 0) {\n            throw std::system_error(errno, std::generic_category(), \"Receive failed\");\n        }\n\n        return response;\n    }\n\n    static std::vector<std::string> sendMulticast(const std::string& msg, const std::string& adr, int port, std::chrono::steady_clock::duration timeout) {\n        int sock = socket(AF_INET, SOCK_DGRAM, 0);\n        if (sock < 0) {\n            throw std::system_error(errno, std::generic_category(), \"Failed to create UDP socket\");\n        }\n        SocketCloser closer(sock);\n\n        sockaddr_in multicastAddr{};\n        multicastAddr.sin_family = AF_INET;\n        multicastAddr.sin_addr.s_addr = inet_addr(adr.c_str());\n        multicastAddr.sin_port = htons(port);\n\n        if (sendto(sock, msg.c_str(), msg.size(), 0, reinterpret_cast<sockaddr*>(&multicastAddr), sizeof(multicastAddr)) < 0) {\n            throw std::system_error(errno, std::generic_category(), \"Multicast send failed\");\n        }\n\n        sockaddr_in fromAddr{};\n        socklen_t fromLen = sizeof(fromAddr);\n        std::vector<std::string> responses;\n        std::mutex responseMutex;\n\n        auto receiveThread = std::thread([&]() {\n            char buffer[4096];\n            while (true) {\n                ssize_t bytesReceived = recvfrom(sock, buffer, sizeof(buffer), 0, reinterpret_cast<sockaddr*>(&fromAddr), &fromLen);\n                if (bytesReceived < 0) continue;\n                std::lock_guard<std::mutex> lock(responseMutex);\n                responses.emplace_back(buffer, bytesReceived);\n            }\n        });\n\n        std::this_thread::sleep_for(timeout);\n        receiveThread.detach();\n\n        return responses;\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <vector>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <thread>\n#include <chrono>\n#include <stdexcept>\n#include <mutex>\n\nclass LinHttpHandler {\npublic:\n    class SocketCloser {\n    private:\n        int sockFd;\n    public:\n        explicit SocketCloser(int fd) : sockFd(fd) {}\n        ~SocketCloser() {\n            if (sockFd != -1) {\n                close(sockFd);\n            }\n        }\n        int get() const { return sockFd; }\n    };\n\n    std::string send(const std::string& msg, const std::string& adr, int port) {\n        int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n        if (sockfd < 0) {\n            throw std::system_error(errno, std::generic_category(), \"Failed to create TCP socket\");\n        }\n\n        struct sockaddr_in serverAddr{};\n        serverAddr.sin_family = AF_INET;\n        serverAddr.sin_port = htons(port);\n        if (inet_pton(AF_INET, adr.c_str(), &serverAddr.sin_addr) <= 0) {\n            close(sockfd);\n            throw std::system_error(errno, std::generic_category(), \"Invalid address for TCP\");\n        }\n\n        SocketCloser closer(sockfd);\n\n        if (connect(sockfd, reinterpret_cast<struct sockaddr*>(&serverAddr), sizeof(serverAddr)) < 0) {\n            throw std::system_error(errno, std::generic_category(), \"TCP connection failed\");\n        }\n\n        if (send(sockfd, msg.c_str(), msg.size(), 0) < 0) {\n            throw std::system_error(errno, std::generic_category(), \"Failed to send HTTP request over TCP\");\n        }\n\n        char buffer[4096];\n        std::string response;\n        ssize_t bytesReceived;\n\n        while ((bytesReceived = recv(sockfd, buffer, sizeof(buffer), 0)) > 0) {\n            response.append(buffer, bytesReceived);\n        }\n\n        if (bytesReceived < 0) {\n            throw std::system_error(errno, std::generic_category(), \"Failed to receive HTTP response over TCP\");\n        }\n\n        return response;\n    }\n\n    std::vector<std::string> sendMulticast(const std::string& msg, const std::string& adr, int port,\n                                           std::chrono::steady_clock::duration timeout) {\n        int sockfd = socket(AF_INET, SOCK_DGRAM, 0);\n        if (sockfd < 0) {\n            throw std::system_error(errno, std::generic_category(), \"Failed to create UDP socket\");\n        }\n\n        struct sockaddr_in multicastAddr{};\n        multicastAddr.sin_family = AF_INET;\n        multicastAddr.sin_port = htons(port);\n        if (inet_pton(AF_INET, adr.c_str(), &multicastAddr.sin_addr) <= 0) {\n            close(sockfd);\n            throw std::system_error(errno, std::generic_category(), \"Invalid address for UDP multicast\");\n        }\n\n        struct ip_mreq mreq{};\n        mreq.imr_multiaddr.s_addr = inet_addr(adr.c_str());\n        mreq.imr_interface.s_addr = htonl(INADDR_ANY);\n\n        if (setsockopt(sockfd, IPPROTO_IP, IP_ADD_MEMBERSHIP, &mreq, sizeof(mreq)) < 0) {\n            close(sockfd);\n            throw std::system_error(errno, std::generic_category(), \"Failed to join multicast group\");\n        }\n\n        SocketCloser closer(sockfd);\n\n        if (sendto(sockfd, msg.c_str(), msg.size(), 0,\n                   reinterpret_cast<struct sockaddr*>(&multicastAddr), sizeof(multicastAddr)) < 0) {\n            throw std::system_error(errno, std::generic_category(), \"Failed to send UDP multicast message\");\n        }\n\n        std::vector<std::string> responses;\n        std::mutex mtx;\n        bool done = false;\n\n        auto receiver = [&]() {\n            char buffer[4096];\n            struct sockaddr_in srcAddr{};\n            socklen_t addrLen = sizeof(srcAddr);\n\n            while (!done) {\n                fd_set readSet;\n                FD_ZERO(&readSet);\n                FD_SET(sockfd, &readSet);\n\n                struct timeval tv{0, 50000}; // 50ms timeout per select\n\n                int ready = select(sockfd + 1, &readSet, nullptr, nullptr, &tv);\n                if (ready < 0) continue;\n\n                if (FD_ISSET(sockfd, &readSet)) {\n                    ssize_t len = recvfrom(sockfd, buffer, sizeof(buffer), 0,\n                                           reinterpret_cast<struct sockaddr*>(&srcAddr), &addrLen);\n                    if (len > 0) {\n                        std::lock_guard<std::mutex> lock(mtx);\n                        responses.emplace_back(buffer, len);\n                    }\n                }\n            }\n        };\n\n        std::thread t(receiver);\n\n        auto start = std::chrono::steady_clock::now();\n        while (std::chrono::steady_clock::now() - start < timeout) {\n            std::this_thread::sleep_for(std::chrono::milliseconds(10));\n        }\n\n        done = true;\n        t.join();\n\n        return responses;\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <vector>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <thread>\n#include <mutex>\n#include <condition_variable>\n#include <chrono>\n#include <stdexcept>\n\nclass LinHttpHandler {\npublic:\n    class SocketCloser {\n    private:\n        int sockFd;\n    public:\n        explicit SocketCloser(int fd) : sockFd(fd) {}\n        ~SocketCloser() {\n            if (sockFd != -1)\n                close(sockFd);\n        }\n        int get() const { return sockFd; }\n        void release() { sockFd = -1; }\n    };\n\n    static std::string send(const std::string& msg, const std::string& adr, int port) {\n        int sock = socket(AF_INET, SOCK_STREAM, 0);\n        if (sock < 0)\n            throw std::system_error(errno, std::generic_category());\n\n        SocketCloser closer(sock);\n\n        sockaddr_in serverAddr{};\n        serverAddr.sin_family = AF_INET;\n        serverAddr.sin_port = htons(port);\n        if (inet_pton(AF_INET, adr.c_str(), &serverAddr.sin_addr) <= 0)\n            throw std::system_error(errno, std::generic_category());\n\n        if (connect(sock, reinterpret_cast<sockaddr*>(&serverAddr), sizeof(serverAddr)) < 0)\n            throw std::system_error(errno, std::generic_category());\n\n        if (send(sock, msg.c_str(), msg.size(), 0) < 0)\n            throw std::system_error(errno, std::generic_category());\n\n        char buffer[4096];\n        std::string response;\n        ssize_t bytes;\n\n        while ((bytes = recv(sock, buffer, sizeof(buffer), 0)) > 0)\n            response.append(buffer, bytes);\n\n        if (bytes < 0)\n            throw std::system_error(errno, std::generic_category());\n\n        return response;\n    }\n\n    static std::vector<std::string> sendMulticast(const std::string& msg, const std::string& adr, int port, std::chrono::steady_clock::duration timeout) {\n        int sock = socket(AF_INET, SOCK_DGRAM, 0);\n        if (sock < 0)\n            throw std::system_error(errno, std::generic_category());\n\n        SocketCloser closer(sock);\n\n        int broadcastEnable = 1;\n        if (setsockopt(sock, SOL_SOCKET, SO_BROADCAST, &broadcastEnable, sizeof(broadcastEnable)) < 0)\n            throw std::system_error(errno, std::generic_category());\n\n        sockaddr_in multicastAddr{};\n        multicastAddr.sin_family = AF_INET;\n        multicastAddr.sin_port = htons(port);\n        if (inet_pton(AF_INET, adr.c_str(), &multicastAddr.sin_addr) <= 0)\n            throw std::system_error(errno, std::generic_category());\n\n        if (sendto(sock, msg.c_str(), msg.size(), 0, reinterpret_cast<sockaddr*>(&multicastAddr), sizeof(multicastAddr)) < 0)\n            throw std::system_error(errno, std::generic_category());\n\n        std::vector<std::string> responses;\n        std::mutex mtx;\n        std::condition_variable cv;\n        bool done = false;\n\n        auto receiveThread = std::thread([&]() {\n            char buffer[4096];\n            sockaddr_in clientAddr{};\n            socklen_t addrLen = sizeof(clientAddr);\n\n            while (!done) {\n                ssize_t bytes = recvfrom(sock, buffer, sizeof(buffer), 0, reinterpret_cast<sockaddr*>(&clientAddr), &addrLen);\n                if (bytes > 0) {\n                    std::lock_guard<std::mutex> lock(mtx);\n                    responses.emplace_back(buffer, bytes);\n                } else if (bytes < 0 && errno != EAGAIN && errno != EWOULDBLOCK) {\n                    break;\n                }\n            }\n        });\n\n        std::this_thread::sleep_for(timeout);\n        {\n            std::lock_guard<std::mutex> lock(mtx);\n            done = true;\n        }\n        cv.notify_all();\n        receiveThread.join();\n\n        return responses;\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <vector>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <thread>\n#include <chrono>\n#include <stdexcept>\n#include <mutex>\n\nclass LinHttpHandler {\npublic:\n    class SocketCloser {\n    private:\n        int sockFd;\n    public:\n        explicit SocketCloser(int fd) : sockFd(fd) {}\n        ~SocketCloser() {\n            if (sockFd != -1) {\n                close(sockFd);\n            }\n        }\n        int get() const { return sockFd; }\n        void release() { sockFd = -1; }\n    };\n\n    static std::string send(const std::string& msg, const std::string& adr, int port) {\n        int sock = socket(AF_INET, SOCK_STREAM, 0);\n        if (sock == -1) {\n            throw std::system_error(errno, std::generic_category(), \"Failed to create TCP socket\");\n        }\n\n        sockaddr_in serverAddr{};\n        serverAddr.sin_family = AF_INET;\n        serverAddr.sin_port = htons(port);\n        if (inet_pton(AF_INET, adr.c_str(), &serverAddr.sin_addr) <= 0) {\n            close(sock);\n            throw std::system_error(errno, std::generic_category(), \"Invalid address for TCP connection\");\n        }\n\n        SocketCloser closer(sock);\n\n        if (connect(sock, reinterpret_cast<sockaddr*>(&serverAddr), sizeof(serverAddr)) < 0) {\n            throw std::system_error(errno, std::generic_category(), \"TCP connection failed\");\n        }\n\n        if (send(sock, msg.c_str(), msg.size(), 0) < 0) {\n            throw std::system_error(errno, std::generic_category(), \"Failed to send HTTP message via TCP\");\n        }\n\n        char buffer[4096];\n        std::string response;\n        ssize_t bytesReceived;\n\n        while ((bytesReceived = recv(sock, buffer, sizeof(buffer), 0)) > 0) {\n            response.append(buffer, bytesReceived);\n        }\n\n        if (bytesReceived < 0) {\n            throw std::system_error(errno, std::generic_category(), \"Failed to receive HTTP response via TCP\");\n        }\n\n        return response;\n    }\n\n    static std::vector<std::string> sendMulticast(const std::string& msg, const std::string& adr, int port,\n                                                  std::chrono::steady_clock::duration timeout) {\n        int sock = socket(AF_INET, SOCK_DGRAM, 0);\n        if (sock == -1) {\n            throw std::system_error(errno, std::generic_category(), \"Failed to create UDP socket\");\n        }\n\n        sockaddr_in multicastAddr{};\n        multicastAddr.sin_family = AF_INET;\n        multicastAddr.sin_port = htons(port);\n        if (inet_pton(AF_INET, adr.c_str(), &multicastAddr.sin_addr) <= 0) {\n            close(sock);\n            throw std::system_error(errno, std::generic_category(), \"Invalid multicast address\");\n        }\n\n        int reuse = 1;\n        if (setsockopt(sock, SOL_SOCKET, SO_REUSEADDR, &reuse, sizeof(reuse)) < 0) {\n            close(sock);\n            throw std::system_error(errno, std::generic_category(), \"Failed to set SO_REUSEADDR on UDP socket\");\n        }\n\n        if (bind(sock, reinterpret_cast<sockaddr*>(&multicastAddr), sizeof(multicastAddr)) < 0) {\n            close(sock);\n            throw std::system_error(errno, std::generic_category(), \"Failed to bind UDP socket\");\n        }\n\n        if (sendto(sock, msg.c_str(), msg.size(), 0, reinterpret_cast<sockaddr*>(&multicastAddr),\n                   sizeof(multicastAddr)) < 0) {\n            close(sock);\n            throw std::system_error(errno, std::generic_category(), \"Failed to send multicast message\");\n        }\n\n        SocketCloser closer(sock);\n\n        std::vector<std::string> responses;\n        std::mutex mtx;\n        bool done = false;\n\n        auto receiver = [&]() {\n            char buffer[4096];\n            sockaddr_in fromAddr;\n            socklen_t fromLen = sizeof(fromAddr);\n\n            while (!done) {\n                fd_set readSet;\n                FD_ZERO(&readSet);\n                FD_SET(sock, &readSet);\n\n                timeval tv{};\n                tv.tv_sec = 0;\n                tv.tv_usec = 100000;\n\n                int ready = select(sock + 1, &readSet, nullptr, nullptr, &tv);\n                if (ready < 0) continue;\n\n                if (FD_ISSET(sock, &readSet)) {\n                    ssize_t len = recvfrom(sock, buffer, sizeof(buffer), 0, reinterpret_cast<sockaddr*>(&fromAddr),\n                                           &fromLen);\n                    if (len > 0) {\n                        std::lock_guard<std::mutex> lock(mtx);\n                        responses.emplace_back(buffer, len);\n                    }\n                }\n            }\n        };\n\n        std::thread t(receiver);\n\n        std::this_thread::sleep_for(timeout);\n        {\n            std::lock_guard<std::mutex> lock(mtx);\n            done = true;\n        }\n\n        t.join();\n\n        return responses;\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <vector>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <thread>\n#include <chrono>\n#include <system_error>\n\nclass LinHttpHandler {\npublic:\n    class SocketCloser {\n    public:\n        explicit SocketCloser(int sockFd) : sockFd_(sockFd) {}\n        ~SocketCloser() {\n            if (sockFd_ != -1) {\n                close(sockFd_);\n            }\n        }\n\n        int get() const { return sockFd_; }\n\n    private:\n        int sockFd_;\n    };\n\n    std::string send(const std::string& msg, const std::string& adr, int port) {\n        int sock = socket(AF_INET, SOCK_STREAM, 0);\n        if (sock < 0) {\n            throw std::system_error(errno, std::generic_category(), \"Failed to create TCP socket\");\n        }\n        SocketCloser closer(sock);\n\n        sockaddr_in serverAddr{};\n        serverAddr.sin_family = AF_INET;\n        serverAddr.sin_port = htons(port);\n        if (inet_pton(AF_INET, adr.c_str(), &serverAddr.sin_addr) <= 0) {\n            throw std::system_error(errno, std::generic_category(), \"Invalid address for TCP connection\");\n        }\n\n        if (connect(sock, reinterpret_cast<sockaddr*>(&serverAddr), sizeof(serverAddr)) < 0) {\n            throw std::system_error(errno, std::generic_category(), \"TCP connection failed\");\n        }\n\n        if (send(sock, msg.c_str(), msg.size(), 0) < 0) {\n            throw std::system_error(errno, std::generic_category(), \"Failed to send HTTP message via TCP\");\n        }\n\n        char buffer[4096];\n        std::string response;\n        ssize_t bytesReceived;\n        while ((bytesReceived = recv(sock, buffer, sizeof(buffer), 0)) > 0) {\n            response.append(buffer, bytesReceived);\n        }\n\n        if (bytesReceived < 0) {\n            throw std::system_error(errno, std::generic_category(), \"Failed to receive HTTP response via TCP\");\n        }\n\n        return response;\n    }\n\n    std::vector<std::string> sendMulticast(const std::string& msg, const std::string& adr, int port, std::chrono::steady_clock::duration timeout) {\n        int sock = socket(AF_INET, SOCK_DGRAM, 0);\n        if (sock < 0) {\n            throw std::system_error(errno, std::generic_category(), \"Failed to create UDP socket\");\n        }\n        SocketCloser closer(sock);\n\n        sockaddr_in multicastAddr{};\n        multicastAddr.sin_family = AF_INET;\n        multicastAddr.sin_port = htons(port);\n        if (inet_pton(AF_INET, adr.c_str(), &multicastAddr.sin_addr) <= 0) {\n            throw std::system_error(errno, std::generic_category(), \"Invalid multicast address\");\n        }\n\n        if (setsockopt(sock, SOL_SOCKET, SO_REUSEADDR, &(int){1}, sizeof(int)) < 0) {\n            throw std::system_error(errno, std::generic_category(), \"Failed to set SO_REUSEADDR on UDP socket\");\n        }\n\n        if (bind(sock, reinterpret_cast<sockaddr*>(&multicastAddr), sizeof(multicastAddr)) < 0) {\n            throw std::system_error(errno, std::generic_category(), \"Failed to bind UDP socket\");\n        }\n\n        if (sendto(sock, msg.c_str(), msg.size(), 0, reinterpret_cast<sockaddr*>(&multicastAddr), sizeof(multicastAddr)) < 0) {\n            throw std::system_error(errno, std::generic_category(), \"Failed to send multicast message\");\n        }\n\n        std::vector<std::string> responses;\n        auto end_time = std::chrono::steady_clock::now() + timeout;\n\n        sockaddr_in fromAddr{};\n        socklen_t fromLen = sizeof(fromAddr);\n        char buffer[4096];\n\n        while (std::chrono::steady_clock::now() < end_time) {\n            fd_set readSet;\n            FD_ZERO(&readSet);\n            FD_SET(sock, &readSet);\n\n            timeval tv;\n            auto remaining = std::chrono::duration_cast<std::chrono::microseconds>(end_time - std::chrono::steady_clock::now());\n            tv.tv_sec = static_cast<long>(remaining.count() / 1000000);\n            tv.tv_usec = static_cast<long>(remaining.count() % 1000000);\n\n            int selectResult = select(sock + 1, &readSet, nullptr, nullptr, &tv);\n            if (selectResult < 0) {\n                throw std::system_error(errno, std::generic_category(), \"Select failed in UDP multicast handler\");\n            } else if (selectResult == 0) {\n                break;\n            }\n\n            ssize_t received = recvfrom(sock, buffer, sizeof(buffer), 0, reinterpret_cast<sockaddr*>(&fromAddr), &fromLen);\n            if (received < 0) {\n                continue;\n            }\n\n            responses.emplace_back(buffer, received);\n        }\n\n        return responses;\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <vector>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <thread>\n#include <chrono>\n#include <stdexcept>\n#include <mutex>\n\nclass LinHttpHandler {\npublic:\n    class SocketCloser {\n    private:\n        int sockFd;\n    public:\n        explicit SocketCloser(int fd) : sockFd(fd) {}\n        ~SocketCloser() {\n            if (sockFd != -1) {\n                close(sockFd);\n            }\n        }\n        int get() const { return sockFd; }\n        void release() { sockFd = -1; }\n    };\n\n    std::string send(const std::string& msg, const std::string& adr, int port) {\n        int sock = socket(AF_INET, SOCK_STREAM, 0);\n        if (sock < 0) {\n            throw std::system_error(errno, std::generic_category(), \"Failed to create TCP socket\");\n        }\n        SocketCloser closer(sock);\n\n        sockaddr_in serverAddr{};\n        serverAddr.sin_family = AF_INET;\n        serverAddr.sin_port = htons(port);\n        if (inet_pton(AF_INET, adr.c_str(), &serverAddr.sin_addr) <= 0) {\n            throw std::system_error(errno, std::generic_category(), \"Invalid address for TCP connection\");\n        }\n\n        if (connect(sock, reinterpret_cast<sockaddr*>(&serverAddr), sizeof(serverAddr)) < 0) {\n            throw std::system_error(errno, std::generic_category(), \"TCP connection failed\");\n        }\n\n        if (send(sock, msg.c_str(), msg.size(), 0) < 0) {\n            throw std::system_error(errno, std::generic_category(), \"Failed to send HTTP message via TCP\");\n        }\n\n        char buffer[4096];\n        std::string response;\n        ssize_t bytesReceived;\n        while ((bytesReceived = recv(sock, buffer, sizeof(buffer), 0)) > 0) {\n            response.append(buffer, bytesReceived);\n        }\n\n        if (bytesReceived < 0) {\n            throw std::system_error(errno, std::generic_category(), \"Failed to receive HTTP response via TCP\");\n        }\n\n        return response;\n    }\n\n    std::vector<std::string> sendMulticast(const std::string& msg, const std::string& adr, int port, std::chrono::steady_clock::duration timeout) {\n        int sock = socket(AF_INET, SOCK_DGRAM, 0);\n        if (sock < 0) {\n            throw std::system_error(errno, std::generic_category(), \"Failed to create UDP socket\");\n        }\n        SocketCloser closer(sock);\n\n        int broadcastEnable = 1;\n        if (setsockopt(sock, SOL_SOCKET, SO_BROADCAST, &broadcastEnable, sizeof(broadcastEnable)) < 0) {\n            throw std::system_error(errno, std::generic_category(), \"Failed to enable broadcasting on UDP socket\");\n        }\n\n        sockaddr_in serverAddr{};\n        serverAddr.sin_family = AF_INET;\n        serverAddr.sin_port = htons(port);\n        if (inet_pton(AF_INET, adr.c_str(), &serverAddr.sin_addr) <= 0) {\n            throw std::system_error(errno, std::generic_category(), \"Invalid address for UDP multicast\");\n        }\n\n        if (sendto(sock, msg.c_str(), msg.size(), 0, reinterpret_cast<sockaddr*>(&serverAddr), sizeof(serverAddr)) < 0) {\n            throw std::system_error(errno, std::generic_category(), \"Failed to send UDP multicast message\");\n        }\n\n        sockaddr_in clientAddr{};\n        socklen_t addrLen = sizeof(clientAddr);\n        char buffer[4096];\n        std::vector<std::string> responses;\n        std::mutex responseMutex;\n\n        auto receiveThread = std::thread([&]() {\n            while (true) {\n                ssize_t bytesReceived = recvfrom(sock, buffer, sizeof(buffer), 0, reinterpret_cast<sockaddr*>(&clientAddr), &addrLen);\n                if (bytesReceived < 0) {\n                    break;\n                }\n                std::lock_guard<std::mutex> lock(responseMutex);\n                responses.emplace_back(buffer, bytesReceived);\n            }\n        });\n\n        std::this_thread::sleep_for(timeout);\n        receiveThread.detach();\n\n        {\n            std::lock_guard<std::mutex> lock(responseMutex);\n            return responses;\n        }\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <vector>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <thread>\n#include <chrono>\n#include <stdexcept>\n#include <mutex>\n\nclass LinHttpHandler {\npublic:\n    class SocketCloser {\n    private:\n        int sockFd;\n    public:\n        explicit SocketCloser(int fd) : sockFd(fd) {}\n        ~SocketCloser() {\n            if (sockFd != -1) {\n                close(sockFd);\n            }\n        }\n        int get() const { return sockFd; }\n    };\n\n    std::string send(const std::string& msg, const std::string& adr, int port) {\n        int sock = socket(AF_INET, SOCK_STREAM, 0);\n        if (sock < 0) {\n            throw std::system_error(errno, std::generic_category(), \"Failed to create TCP socket\");\n        }\n        SocketCloser closer(sock);\n\n        sockaddr_in serverAddr{};\n        serverAddr.sin_family = AF_INET;\n        serverAddr.sin_port = htons(port);\n        if (inet_pton(AF_INET, adr.c_str(), &serverAddr.sin_addr) <= 0) {\n            throw std::system_error(errno, std::generic_category(), \"Invalid address or address not supported\");\n        }\n\n        if (connect(sock, reinterpret_cast<sockaddr*>(&serverAddr), sizeof(serverAddr)) < 0) {\n            throw std::system_error(errno, std::generic_category(), \"Connection failed\");\n        }\n\n        if (send(sock, msg.c_str(), msg.size(), 0) < 0) {\n            throw std::system_error(errno, std::generic_category(), \"Send failed\");\n        }\n\n        char buffer[4096];\n        std::string response;\n        ssize_t bytesReceived;\n        while ((bytesReceived = recv(sock, buffer, sizeof(buffer), 0)) > 0) {\n            response.append(buffer, bytesReceived);\n        }\n\n        if (bytesReceived < 0) {\n            throw std::system_error(errno, std::generic_category(), \"Receive failed\");\n        }\n\n        return response;\n    }\n\n    std::vector<std::string> sendMulticast(const std::string& msg, const std::string& adr, int port,\n                                           std::chrono::steady_clock::duration timeout) {\n        int sock = socket(AF_INET, SOCK_DGRAM, 0);\n        if (sock < 0) {\n            throw std::system_error(errno, std::generic_category(), \"Failed to create UDP socket\");\n        }\n        SocketCloser closer(sock);\n\n        int broadcastPermission = 1;\n        if (setsockopt(sock, SOL_SOCKET, SO_BROADCAST, &broadcastPermission, sizeof(broadcastPermission)) < 0) {\n            throw std::system_error(errno, std::generic_category(), \"Setsockopt failed\");\n        }\n\n        sockaddr_in multicastAddr{};\n        multicastAddr.sin_family = AF_INET;\n        multicastAddr.sin_port = htons(port);\n        if (inet_pton(AF_INET, adr.c_str(), &multicastAddr.sin_addr) <= 0) {\n            throw std::system_error(errno, std::generic_category(), \"Invalid multicast address\");\n        }\n\n        if (sendto(sock, msg.c_str(), msg.size(), 0, reinterpret_cast<sockaddr*>(&multicastAddr),\n                   sizeof(multicastAddr)) < 0) {\n            throw std::system_error(errno, std::generic_category(), \"Multicast send failed\");\n        }\n\n        sockaddr_in clientAddr{};\n        socklen_t clientAddrLen = sizeof(clientAddr);\n        std::vector<std::string> responses;\n        std::mutex responseMutex;\n\n        auto receiveThread = std::thread([=, &responses, &responseMutex]() {\n            char buffer[4096];\n            while (true) {\n                ssize_t bytesReceived = recvfrom(sock, buffer, sizeof(buffer), 0,\n                                                 reinterpret_cast<sockaddr*>(&clientAddr), &clientAddrLen);\n                if (bytesReceived < 0) {\n                    break;\n                }\n                std::lock_guard<std::mutex> lock(responseMutex);\n                responses.emplace_back(buffer, bytesReceived);\n            }\n        });\n\n        std::this_thread::sleep_for(timeout);\n        receiveThread.detach();\n\n        return responses;\n    }\n};\n```"
    ],
    "unmatched_results": [
      "```cpp\n#include <iostream>\n#include <string>\n#include <vector>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <thread>\n#include <chrono>\n#include <stdexcept>\n#include <mutex>\n\nclass LinHttpHandler {\npublic:\n    class SocketCloser {\n    private:\n        int sockFd;\n    public:\n        explicit SocketCloser(int fd) : sockFd(fd) {}\n        ~SocketCloser() {\n            if (sockFd != -1) {\n                close(sockFd);\n            }\n        }\n        int get() const { return sockFd; }\n    };\n\n    static std::string send(const std::string& msg, const std::string& adr, int port) {\n        int sock = socket(AF_INET, SOCK_STREAM, 0);\n        if (sock == -1) {\n            throw std::system_error(errno, std::generic_category(), \"Failed to create TCP socket\");\n        }\n\n        sockaddr_in serverAddr{};\n        serverAddr.sin_family = AF_INET;\n        serverAddr.sin_port = htons(port);\n        if (inet_pton(AF_INET, adr.c_str(), &serverAddr.sin_addr) <= 0) {\n            throw std::system_error(errno, std::generic_category(), \"Invalid address for TCP connection\");\n        }\n\n        SocketCloser closer(sock);\n\n        if (connect(sock, reinterpret_cast<sockaddr*>(&serverAddr), sizeof(serverAddr)) < 0) {\n            throw std::system_error(errno, std::generic_category(), \"TCP connection failed\");\n        }\n\n        if (send(sock, msg.c_str(), msg.size(), 0) < 0) {\n            throw std::system_error(errno, std::generic_category(), \"Failed to send HTTP message via TCP\");\n        }\n\n        char buffer[4096];\n        std::string response;\n        ssize_t bytes;\n\n        while ((bytes = recv(sock, buffer, sizeof(buffer), 0)) > 0) {\n            response.append(buffer, bytes);\n        }\n\n        if (bytes < 0) {\n            throw std::system_error(errno, std::generic_category(), \"Failed to receive HTTP response via TCP\");\n        }\n\n        return response;\n    }\n\n    static std::vector<std::string> sendMulticast(const std::string& msg, const std::string& adr, int port, std::chrono::steady_clock::duration timeout) {\n        int sock = socket(AF_INET, SOCK_DGRAM, 0);\n        if (sock == -1) {\n            throw std::system_error(errno, std::generic_category(), \"Failed to create UDP socket\");\n        }\n\n        sockaddr_in multicastAddr{};\n        multicastAddr.sin_family = AF_INET;\n        multicastAddr.sin_port = htons(port);\n        if (inet_pton(AF_INET, adr.c_str(), &multicastAddr.sin_addr) <= 0) {\n            throw std::system_error(errno, std::generic_category(), \"Invalid multicast address\");\n        }\n\n        int reuse = 1;\n        if (setsockopt(sock, SOL_SOCKET, SO_REUSEADDR, &reuse, sizeof(reuse)) < 0) {\n            throw std::system_error(errno, std::generic_category(), \"Failed to set SO_REUSEADDR on UDP socket\");\n        }\n\n        if (bind(sock, reinterpret_cast<sockaddr*>(&multicastAddr), sizeof(multicastAddr)) < 0) {\n            throw std::system_error(errno, std::generic_category(), \"UDP bind failed\");\n        }\n\n        if (sendto(sock, msg.c_str(), msg.size(), 0, reinterpret_cast<sockaddr*>(&multicastAddr), sizeof(multicastAddr)) < 0) {\n            throw std::system_error(errno, std::generic_category(), \"Failed to send multicast message\");\n        }\n\n        sockaddr_in fromAddr;\n        socklen_t fromLen = sizeof(fromAddr);\n        std::vector<std::string> responses;\n        std::mutex responseMutex;\n\n        auto receiver = [&]() {\n            char buffer[4096];\n            while (true) {\n                fd_set readSet;\n                FD_ZERO(&readSet);\n                FD_SET(sock, &readSet);\n\n                timeval tv{0, 0};\n                int ready = select(sock + 1, &readSet, nullptr, nullptr, &tv);\n                if (ready <= 0) break;\n\n                ssize_t bytes = recvfrom(sock, buffer, sizeof(buffer), 0, reinterpret_cast<sockaddr*>(&fromAddr), &fromLen);\n                if (bytes > 0) {\n                    std::lock_guard<std::mutex> lock(responseMutex);\n                    responses.emplace_back(buffer, bytes);\n                }\n            }\n        };\n\n        std::thread thread(receiver);\n        std::this_thread::sleep_for(timeout);\n        thread.detach();\n\n        return responses;\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <vector>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#include <thread>\n#include <chrono>\n#include <stdexcept>\n#include <atomic>\n\nclass LinHttpHandler {\npublic:\n    class SocketCloser {\n    private:\n        int sockFd_;\n    public:\n        explicit SocketCloser(int sockFd) : sockFd_(sockFd) {}\n        ~SocketCloser() {\n            if (sockFd_ != -1) {\n                close(sockFd_);\n            }\n        }\n        SocketCloser(const SocketCloser&) = delete;\n        SocketCloser& operator=(const SocketCloser&) = delete;\n    };\n\n    std::string send(const std::string& msg, const std::string& adr, int port) {\n        int sock = socket(AF_INET, SOCK_STREAM, 0);\n        if (sock == -1) {\n            throw std::system_error(errno, std::generic_category(), \"Failed to create TCP socket\");\n        }\n\n        sockaddr_in serverAddr{};\n        serverAddr.sin_family = AF_INET;\n        serverAddr.sin_port = htons(port);\n        if (inet_pton(AF_INET, adr.c_str(), &serverAddr.sin_addr) <= 0) {\n            throw std::system_error(errno, std::generic_category(), \"Invalid address for TCP connection\");\n        }\n\n        if (connect(sock, reinterpret_cast<sockaddr*>(&serverAddr), sizeof(serverAddr)) < 0) {\n            throw std::system_error(errno, std::generic_category(), \"TCP connection failed\");\n        }\n\n        SocketCloser closer(sock);\n\n        if (send(sock, msg.c_str(), msg.size(), 0) < 0) {\n            throw std::system_error(errno, std::generic_category(), \"Failed to send HTTP message over TCP\");\n        }\n\n        char buffer[4096];\n        std::string response;\n        ssize_t bytesReceived;\n\n        while ((bytesReceived = recv(sock, buffer, sizeof(buffer), 0)) > 0) {\n            response.append(buffer, bytesReceived);\n        }\n\n        if (bytesReceived < 0) {\n            throw std::system_error(errno, std::generic_category(), \"Failed to receive HTTP response over TCP\");\n        }\n\n        return response;\n    }\n\n    std::vector<std::string> sendMulticast(const std::string& msg, const std::string& adr, int port, std::chrono::steady_clock::duration timeout) {\n        int sock = socket(AF_INET, SOCK_DGRAM, 0);\n        if (sock == -1) {\n            throw std::system_error(errno, std::generic_category(), \"Failed to create UDP socket\");\n        }\n\n        sockaddr_in localAddr{};\n        localAddr.sin_family = AF_INET;\n        localAddr.sin_addr.s_addr = INADDR_ANY;\n        localAddr.sin_port = htons(0);\n\n        if (bind(sock, reinterpret_cast<sockaddr*>(&localAddr), sizeof(localAddr)) < 0) {\n            throw std::system_error(errno, std::generic_category(), \"UDP bind failed\");\n        }\n\n        sockaddr_in multicastAddr{};\n        multicastAddr.sin_family = AF_INET;\n        multicastAddr.sin_port = htons(port);\n        if (inet_pton(AF_INET, adr.c_str(), &multicastAddr.sin_addr) <= 0) {\n            throw std::system_error(errno, std::generic_category(), \"Invalid multicast address\");\n        }\n\n        if (setsockopt(sock, SOL_SOCKET, SO_REUSEADDR, &(int){1}, sizeof(int)) < 0) {\n            throw std::system_error(errno, std::generic_category(), \"Failed to set SO_REUSEADDR on UDP socket\");\n        }\n\n        if (setsockopt(sock, IPPROTO_IP, IP_MULTICAST_TTL, &(int){1}, sizeof(int)) < 0) {\n            throw std::system_error(errno, std::generic_category(), \"Failed to set IP_MULTICAST_TTL on UDP socket\");\n        }\n\n        if (sendto(sock, msg.c_str(), msg.size(), 0,\n                   reinterpret_cast<sockaddr*>(&multicastAddr), sizeof(multicastAddr)) < 0) {\n            throw std::system_error(errno, std::generic_category(), \"Failed to send multicast message\");\n        }\n\n        std::vector<std::string> responses;\n        std::atomic<bool> done{false};\n\n        auto receiveThread = std::thread([this, &responses, &done, sock]() {\n            char buffer[4096];\n            sockaddr_in fromAddr{};\n            socklen_t fromLen = sizeof(fromAddr);\n\n            while (!done) {\n                fd_set readSet;\n                FD_ZERO(&readSet);\n                FD_SET(sock, &readSet);\n\n                timeval tv{};\n                tv.tv_sec = 0;\n                tv.tv_usec = 100000; // 100ms\n\n                int selectResult = select(sock + 1, &readSet, nullptr, nullptr, &tv);\n                if (selectResult < 0) {\n                    break;\n                } else if (selectResult == 0) {\n                    continue;\n                }\n\n                ssize_t received = recvfrom(sock, buffer, sizeof(buffer), 0,\n                                            reinterpret_cast<sockaddr*>(&fromAddr), &fromLen);\n                if (received > 0) {\n                    responses.emplace_back(buffer, received);\n                }\n            }\n        });\n\n        std::this_thread::sleep_for(timeout);\n        done = true;\n        receiveThread.join();\n\n        return responses;\n    }\n};\n```"
    ],
    "match_count": 8,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 15,
    "Instruction": "Task Description: Implement a TCP client function in C++ that establishes a connection to a server, sends a single character, receives a response, and then closes the connection.\n\nFunction Description: The function `tcp_client_communication` creates a TCP socket, connects to a specified server address and port, sends a predefined character ('A') to the server, reads the server's response, prints the received character, and finally closes the socket. This demonstrates basic TCP client functionality using BSD sockets.\n\nInput: None (The server address and port are hardcoded as 127.0.0.1:9736 in the function)\n\nOutput: \n- Returns 0 on successful execution\n- Prints the received character from the server\n- Exits with error code 1 if connection fails",
    "Canonical_solution": "#include <unistd.h>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <stdio.h>\n#include <stdlib.h>\n\nint tcp_client_communication()\n{\n    int sockfd = -1;\n    int len = 0;\n    struct sockaddr_in address;\n    int result;\n    char ch = 'A';\n    \n    sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    \n    address.sin_family = AF_INET;\n    address.sin_addr.s_addr = inet_addr(\"127.0.0.1\");\n    address.sin_port = htons(9736);\n    len = sizeof(address);\n    \n    result = connect(sockfd, (struct sockaddr*)&address, len);\n\n    if(result == -1)\n    {\n        perror(\"ops:client\\n\");\n        exit(1);\n    }\n    \n    write(sockfd, &ch, 1);\n    read(sockfd, &ch, 1);\n    printf(\"char form server = %c\\n\", ch);\n    close(sockfd);\n    return 0;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 149,
    "matched_results": [
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint tcp_client_communication() {\n    int sock = 0;\n    struct sockaddr_in serv_addr;\n    char buffer[1024] = {0};\n\n    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation error\" << std::endl;\n        return 1;\n    }\n\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(9736);\n\n    if (inet_pton(AF_INET, \"127.0.0.1\", &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/Address not supported\" << std::endl;\n        return 1;\n    }\n\n    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        return 1;\n    }\n\n    char send_char = 'A';\n    send(sock, &send_char, 1, 0);\n\n    int valread = read(sock, buffer, 1);\n    if (valread > 0) {\n        std::cout << buffer[0] << std::endl;\n    }\n\n    close(sock);\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint tcp_client_communication() {\n    int sock = 0;\n    struct sockaddr_in serv_addr;\n    char buffer[1024] = {0};\n\n    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation error\" << std::endl;\n        return 1;\n    }\n\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(9736);\n\n    if (inet_pton(AF_INET, \"127.0.0.1\", &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        return 1;\n    }\n\n    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        return 1;\n    }\n\n    char send_char = 'A';\n    send(sock, &send_char, 1, 0);\n\n    int valread = read(sock, buffer, 1);\n    if (valread > 0) {\n        std::cout << buffer[0] << std::endl;\n    }\n\n    close(sock);\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint tcp_client_communication() {\n    int sock = socket(AF_INET, SOCK_STREAM, 0);\n    if (sock < 0) {\n        std::cerr << \"Socket creation error\" << std::endl;\n        return 1;\n    }\n\n    struct sockaddr_in server_addr{};\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(9736);\n    inet_pton(AF_INET, \"127.0.0.1\", &server_addr.sin_addr);\n\n    if (connect(sock, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {\n        close(sock);\n        std::cerr << \"Connection failed\" << std::endl;\n        return 1;\n    }\n\n    char send_char = 'A';\n    if (send(sock, &send_char, 1, 0) < 0) {\n        close(sock);\n        std::cerr << \"Send failed\" << std::endl;\n        return 1;\n    }\n\n    char recv_char;\n    if (recv(sock, &recv_char, 1, 0) < 0) {\n        close(sock);\n        std::cerr << \"Receive failed\" << std::endl;\n        return 1;\n    }\n\n    std::cout << recv_char << std::endl;\n\n    close(sock);\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint tcp_client_communication() {\n    int sock = 0;\n    struct sockaddr_in serv_addr;\n    char buffer[1024] = {0};\n\n    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation error\" << std::endl;\n        return -1;\n    }\n\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(9736);\n\n    if (inet_pton(AF_INET, \"127.0.0.1\", &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        return -1;\n    }\n\n    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        return 1;\n    }\n\n    char send_char = 'A';\n    send(sock, &send_char, sizeof(send_char), 0);\n\n    int valread = read(sock, buffer, sizeof(buffer));\n    if (valread > 0) {\n        std::cout << buffer[0] << std::endl;\n    }\n\n    close(sock);\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint tcp_client_communication() {\n    int sock = 0;\n    struct sockaddr_in serv_addr;\n    char buffer[1024] = {0};\n\n    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation error\\n\";\n        return 1;\n    }\n\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(9736);\n\n    if (inet_pton(AF_INET, \"127.0.0.1\", &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/Address not supported\\n\";\n        return 1;\n    }\n\n    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\\n\";\n        return 1;\n    }\n\n    char send_char = 'A';\n    send(sock, &send_char, sizeof(send_char), 0);\n\n    int valread = read(sock, buffer, sizeof(buffer));\n    if (valread > 0) {\n        std::cout << buffer[0] << std::endl;\n    }\n\n    close(sock);\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint tcp_client_communication() {\n    int sock = 0;\n    struct sockaddr_in serv_addr;\n    char buffer[1024] = {0};\n\n    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation error\" << std::endl;\n        return 1;\n    }\n\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(9736);\n\n    if (inet_pton(AF_INET, \"127.0.0.1\", &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/Address not supported\" << std::endl;\n        return 1;\n    }\n\n    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        return 1;\n    }\n\n    char send_char = 'A';\n    send(sock, &send_char, sizeof(send_char), 0);\n\n    int valread = read(sock, buffer, sizeof(buffer));\n    if (valread > 0) {\n        std::cout << static_cast<char>(buffer[0]) << std::endl;\n    }\n\n    close(sock);\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint tcp_client_communication() {\n    int sock = 0;\n    struct sockaddr_in serv_addr;\n\n    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation error\" << std::endl;\n        return 1;\n    }\n\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(9736);\n\n    // Convert IPv4 and IPv6 addresses from text to binary form\n    if (inet_pton(AF_INET, \"127.0.0.1\", &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        return 1;\n    }\n\n    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        return 1;\n    }\n\n    char send_char = 'A';\n    send(sock, &send_char, 1, 0);\n\n    char recv_char;\n    read(sock, &recv_char, 1);\n    std::cout << recv_char << std::endl;\n\n    close(sock);\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint tcp_client_communication() {\n    int sock = 0;\n    struct sockaddr_in serv_addr;\n    char buffer[1024] = {0};\n\n    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation error\" << std::endl;\n        return 1;\n    }\n\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(9736);\n\n    if (inet_pton(AF_INET, \"127.0.0.1\", &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/Address not supported\" << std::endl;\n        return 1;\n    }\n\n    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        return 1;\n    }\n\n    char send_char = 'A';\n    send(sock, &send_char, 1, 0);\n\n    int valread = read(sock, buffer, 1);\n    if (valread > 0) {\n        std::cout << buffer[0] << std::endl;\n    }\n\n    close(sock);\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint tcp_client_communication() {\n    int sock = 0;\n    struct sockaddr_in serv_addr;\n    char buffer[1024] = {0};\n\n    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation error\" << std::endl;\n        return 1;\n    }\n\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(9736);\n\n    if (inet_pton(AF_INET, \"127.0.0.1\", &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        return 1;\n    }\n\n    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        return 1;\n    }\n\n    char send_char = 'A';\n    send(sock, &send_char, 1, 0);\n\n    int valread = read(sock, buffer, 1);\n    if (valread > 0) {\n        std::cout << buffer[0] << std::endl;\n    }\n\n    close(sock);\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint tcp_client_communication() {\n    int sock = 0;\n    struct sockaddr_in serv_addr;\n    char buffer[1024] = {0};\n\n    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation error\" << std::endl;\n        return 1;\n    }\n\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(9736);\n\n    if (inet_pton(AF_INET, \"127.0.0.1\", &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/Address not supported\" << std::endl;\n        return 1;\n    }\n\n    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        return 1;\n    }\n\n    char send_char = 'A';\n    send(sock, &send_char, 1, 0);\n\n    int valread = read(sock, buffer, 1);\n    if (valread > 0) {\n        std::cout << buffer[0] << std::endl;\n    }\n\n    close(sock);\n    return 0;\n}\n```"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 16,
    "Instruction": "Task Description: Implement a TCP client in C++ that can establish a connection to a server, send data, and receive responses.\n\nFunction Description: The code consists of two main functions for creating and communicating with a TCP client. The first function creates and connects a TCP socket to a specified server, while the second function handles the communication loop for sending and receiving data.\n\nInput:\n- create_tcp_client:\n  - server_ip: const char* - The IP address of the server to connect to\n  - port: int - The port number of the server to connect to\n- tcp_client_communication:\n  - sockfd: int - The socket file descriptor returned by create_tcp_client\n\nOutput:\n- create_tcp_client:\n  - Returns: int - The socket file descriptor on success, -1 on failure\n- tcp_client_communication:\n  - No return value (void), but performs continuous communication until connection is terminated",
    "Canonical_solution": "#include <sys/socket.h>\n#include <arpa/inet.h>\n#include <string.h>\n#include <unistd.h>\n\n#define BUFFER_SIZE 1024\n\nint create_tcp_client(const char* server_ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if(sockfd == -1) return -1;\n\n    struct sockaddr_in serv_addr;\n    bzero(&serv_addr, sizeof(serv_addr));\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_addr.s_addr = inet_addr(server_ip);\n    serv_addr.sin_port = htons(port);\n\n    if(connect(sockfd, (sockaddr*)&serv_addr, sizeof(serv_addr)) == -1) {\n        close(sockfd);\n        return -1;\n    }\n    \n    return sockfd;\n}\n\nvoid tcp_client_communication(int sockfd) {\n    while(true){\n        char buf[BUFFER_SIZE];\n        bzero(&buf, sizeof(buf));\n        scanf(\"%s\", buf);\n        ssize_t write_bytes = write(sockfd, buf, sizeof(buf));\n        if(write_bytes == -1){\n            printf(\"socket already disconnected, can't write any more!\\n\");\n            break;\n        }\n        bzero(&buf, sizeof(buf));\n        ssize_t read_bytes = read(sockfd, buf, sizeof(buf));\n        if(read_bytes > 0){\n            printf(\"message from server: %s\\n\", buf);\n        }else if(read_bytes == 0){\n            printf(\"server socket disconnected!\\n\");\n            break;\n        }else if(read_bytes == -1){\n            close(sockfd);\n            break;\n        }\n    }\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 149,
    "matched_results": [
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint create_tcp_client(const char* server_ip, int port) {\n    int sockfd;\n    struct sockaddr_in server_addr;\n\n    if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation failed\" << std::endl;\n        return -1;\n    }\n\n    memset(&server_addr, 0, sizeof(server_addr));\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, server_ip, &server_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/Address not supported\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcp_client_communication(int sockfd) {\n    char buffer[1024] = {0};\n    while (true) {\n        std::string message;\n        std::cout << \"Enter message to send: \";\n        std::getline(std::cin, message);\n\n        if (message == \"exit\") break;\n\n        send(sockfd, message.c_str(), message.size(), 0);\n        int valread = read(sockfd, buffer, sizeof(buffer));\n        if (valread <= 0) {\n            std::cerr << \"Server disconnected or error occurred.\" << std::endl;\n            break;\n        }\n        std::cout << \"Received from server: \" << buffer << std::endl;\n        memset(buffer, 0, sizeof(buffer));\n    }\n\n    close(sockfd);\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint create_tcp_client(const char* server_ip, int port) {\n    int sockfd;\n    struct sockaddr_in server_addr;\n\n    // Create socket\n    if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation error\" << std::endl;\n        return -1;\n    }\n\n    memset(&server_addr, 0, sizeof(server_addr));\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(port);\n\n    // Convert IPv4 address from text to binary form\n    if (inet_pton(AF_INET, server_ip, &server_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/Address not supported\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    // Connect to the server\n    if (connect(sockfd, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {\n        std::cerr << \"Connection failed\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcp_client_communication(int sockfd) {\n    char buffer[1024] = {0};\n    while (true) {\n        std::string message;\n        std::cout << \"Enter message to send: \";\n        std::getline(std::cin, message);\n\n        if (message == \"exit\") break;\n\n        // Send message to server\n        if (send(sockfd, message.c_str(), message.size(), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        // Receive response from server\n        int valread = read(sockfd, buffer, sizeof(buffer));\n        if (valread < 0) {\n            std::cerr << \"Read failed\" << std::endl;\n            break;\n        } else if (valread == 0) {\n            std::cout << \"Server disconnected\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Received from server: \" << buffer << std::endl;\n        memset(buffer, 0, sizeof(buffer));\n    }\n\n    close(sockfd);\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint create_tcp_client(const char* server_ip, int port) {\n    int sockfd;\n    struct sockaddr_in server_addr;\n\n    if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        return -1;\n    }\n\n    memset(&server_addr, 0, sizeof(server_addr));\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, server_ip, &server_addr.sin_addr) <= 0) {\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcp_client_communication(int sockfd) {\n    char buffer[1024] = {0};\n    while (true) {\n        std::cout << \"Enter message to send: \";\n        std::cin.getline(buffer, sizeof(buffer));\n\n        if (send(sockfd, buffer, strlen(buffer), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        memset(buffer, 0, sizeof(buffer));\n        int valread = read(sockfd, buffer, sizeof(buffer));\n        if (valread <= 0) {\n            std::cerr << \"Connection closed or read error\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Received from server: \" << buffer << std::endl;\n    }\n\n    close(sockfd);\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint create_tcp_client(const char* server_ip, int port) {\n    int sockfd;\n    struct sockaddr_in server_addr;\n\n    if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        return -1;\n    }\n\n    memset(&server_addr, 0, sizeof(server_addr));\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, server_ip, &server_addr.sin_addr) <= 0) {\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcp_client_communication(int sockfd) {\n    char buffer[1024] = {0};\n    while (true) {\n        std::cout << \"Enter message to send: \";\n        std::string message;\n        std::getline(std::cin, message);\n\n        if (send(sockfd, message.c_str(), message.size(), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        int valread = read(sockfd, buffer, sizeof(buffer));\n        if (valread <= 0) {\n            std::cerr << \"Connection closed or read error\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Received from server: \" << buffer << std::endl;\n        memset(buffer, 0, sizeof(buffer));\n    }\n\n    close(sockfd);\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint create_tcp_client(const char* server_ip, int port) {\n    int sockfd;\n    struct sockaddr_in server_addr;\n\n    if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        return -1;\n    }\n\n    memset(&server_addr, 0, sizeof(server_addr));\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, server_ip, &server_addr.sin_addr) <= 0) {\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcp_client_communication(int sockfd) {\n    char buffer[1024] = {0};\n    while (true) {\n        std::cout << \"Enter message to send: \";\n        std::string message;\n        std::getline(std::cin, message);\n\n        if (send(sockfd, message.c_str(), message.size(), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        int valread = read(sockfd, buffer, sizeof(buffer));\n        if (valread <= 0) {\n            std::cerr << \"Connection closed or read error\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Received from server: \" << buffer << std::endl;\n        memset(buffer, 0, sizeof(buffer));\n    }\n\n    close(sockfd);\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint create_tcp_client(const char* server_ip, int port) {\n    int sockfd;\n    struct sockaddr_in server_addr;\n\n    if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        return -1;\n    }\n\n    memset(&server_addr, 0, sizeof(server_addr));\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, server_ip, &server_addr.sin_addr) <= 0) {\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcp_client_communication(int sockfd) {\n    char buffer[1024] = {0};\n    while (true) {\n        std::cout << \"Enter message to send: \";\n        std::cin.getline(buffer, sizeof(buffer));\n\n        if (send(sockfd, buffer, strlen(buffer), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        memset(buffer, 0, sizeof(buffer));\n        int valread = read(sockfd, buffer, sizeof(buffer));\n        if (valread <= 0) {\n            std::cerr << \"Connection closed or read error\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Received from server: \" << buffer << std::endl;\n    }\n\n    close(sockfd);\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint create_tcp_client(const char* server_ip, int port) {\n    int sockfd;\n    struct sockaddr_in server_addr;\n\n    if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        return -1;\n    }\n\n    memset(&server_addr, 0, sizeof(server_addr));\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, server_ip, &server_addr.sin_addr) <= 0) {\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcp_client_communication(int sockfd) {\n    char buffer[1024] = {0};\n    while (true) {\n        std::cout << \"Enter message to send: \";\n        std::string message;\n        std::getline(std::cin, message);\n\n        if (send(sockfd, message.c_str(), message.size(), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        int valread = read(sockfd, buffer, sizeof(buffer));\n        if (valread <= 0) {\n            std::cerr << \"Connection closed or read error\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Received from server: \" << buffer << std::endl;\n        memset(buffer, 0, sizeof(buffer));\n    }\n\n    close(sockfd);\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint create_tcp_client(const char* server_ip, int port) {\n    int sockfd;\n    struct sockaddr_in server_addr;\n\n    if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        return -1;\n    }\n\n    memset(&server_addr, 0, sizeof(server_addr));\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, server_ip, &server_addr.sin_addr) <= 0) {\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcp_client_communication(int sockfd) {\n    char buffer[1024] = {0};\n    while (true) {\n        std::cout << \"Enter message to send: \";\n        std::cin.getline(buffer, sizeof(buffer));\n\n        if (send(sockfd, buffer, strlen(buffer), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        memset(buffer, 0, sizeof(buffer));\n        int valread = read(sockfd, buffer, sizeof(buffer));\n        if (valread <= 0) {\n            std::cerr << \"Connection closed or read error\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Received from server: \" << buffer << std::endl;\n    }\n\n    close(sockfd);\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint create_tcp_client(const char* server_ip, int port) {\n    int sockfd;\n    struct sockaddr_in server_addr;\n\n    if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation failed\" << std::endl;\n        return -1;\n    }\n\n    memset(&server_addr, 0, sizeof(server_addr));\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, server_ip, &server_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/Address not supported\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcp_client_communication(int sockfd) {\n    char buffer[1024] = {0};\n    while (true) {\n        std::string message;\n        std::cout << \"Enter message to send: \";\n        std::getline(std::cin, message);\n\n        if (send(sockfd, message.c_str(), message.size(), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        int valread = read(sockfd, buffer, sizeof(buffer));\n        if (valread <= 0) {\n            std::cerr << \"Server disconnected or read error\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Received from server: \" << buffer << std::endl;\n        memset(buffer, 0, sizeof(buffer));\n    }\n\n    close(sockfd);\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint create_tcp_client(const char* server_ip, int port) {\n    int sockfd;\n    struct sockaddr_in server_addr;\n\n    if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation failed\" << std::endl;\n        return -1;\n    }\n\n    memset(&server_addr, 0, sizeof(server_addr));\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, server_ip, &server_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/Address not supported\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcp_client_communication(int sockfd) {\n    char buffer[1024] = {0};\n    const char* message;\n\n    while (true) {\n        std::cout << \"Enter message to send: \";\n        std::string input;\n        std::getline(std::cin, input);\n        message = input.c_str();\n\n        if (send(sockfd, message, strlen(message), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        int valread = read(sockfd, buffer, sizeof(buffer));\n        if (valread < 0) {\n            std::cerr << \"Read failed\" << std::endl;\n            break;\n        } else if (valread == 0) {\n            std::cout << \"Server disconnected\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Received from server: \" << buffer << std::endl;\n        memset(buffer, 0, sizeof(buffer));\n    }\n\n    close(sockfd);\n}\n```"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 17,
    "Instruction": "Task Description: Implement a TCP client socket class in C++ that handles connection establishment, data transmission, and connection management with a remote server, supporting both IPv4 and IPv6 protocols.\n\nClass Description: The ClientSocket class provides TCP client functionality with support for both IPv4 and IPv6 connections. It handles socket creation, connection establishment with timeout support, send buffer configuration, and connection cleanup. The class is designed to work within a multi-threaded context and supports encryption parameters.\n\nAttributes:\n- dest_: std::string - Destination hostname or IP address to connect to\n- threadCtx_: ThreadCtx& - Reference to thread context containing configuration options\n- sa_: struct addrinfo - Address information structure for socket configuration\n- socket_: std::unique_ptr<WdtSocket> - Smart pointer to the underlying socket implementation\n- peerIp_: std::string - IP address of the connected peer\n\nMethods:\n- Constructor: ClientSocket(ThreadCtx& threadCtx, const string& dest, int port, const EncryptionParams& encryptionParams, int64_t ivChangeInterval) -> void - Initializes the client socket with destination, port, and encryption parameters\n- connect: connect() -> ErrorCode - Establishes connection to the remote server with timeout handling, returns connection status\n- getPeerIp: getPeerIp() -> const std::string& - Returns the IP address of the connected peer\n- setSendBufferSize: setSendBufferSize() -> void - Configures the socket's send buffer size based on thread context options\n- closeConnection: closeConnection() -> void [private] - Closes the active socket connection",
    "Canonical_solution": "#include <fcntl.h>\n#include <folly/Conv.h>\n#include <folly/ScopeGuard.h>\n#include <glog/logging.h>\n#include <poll.h>\n#include <sys/socket.h>\n#include <wdt/Reporting.h>\n#include <wdt/util/ClientSocket.h>\n\nnamespace facebook {\nnamespace wdt {\n\nusing std::string;\n\nclass ClientSocket {\npublic:\n  ClientSocket(ThreadCtx &threadCtx, const string &dest,\n               const int port,\n               const EncryptionParams &encryptionParams,\n               int64_t ivChangeInterval)\n      : dest_(dest), threadCtx_(threadCtx) {\n    memset(&sa_, 0, sizeof(sa_));\n    socket_ = std::make_unique<WdtSocket>(threadCtx, port, encryptionParams,\n                                          ivChangeInterval, nullptr);\n    if (threadCtx_.getOptions().ipv6) {\n      sa_.ai_family = AF_INET6;\n    }\n    if (threadCtx_.getOptions().ipv4) {\n      sa_.ai_family = AF_INET;\n    }\n    sa_.ai_socktype = SOCK_STREAM;\n  }\n\n  ErrorCode connect() {\n    auto fd = socket_->getFd();\n    auto port = socket_->getPort();\n    WDT_CHECK(fd < 0) << \"Previous connection not closed \" << fd << \" \" << port;\n    \n    struct addrinfo *infoList = nullptr;\n    auto guard = folly::makeGuard([&] {\n      if (infoList) {\n        freeaddrinfo(infoList);\n      }\n    });\n    \n    string portStr = folly::to<string>(port);\n    int res = getaddrinfo(dest_.c_str(), portStr.c_str(), &sa_, &infoList);\n    if (res) {\n      WLOG(ERROR) << \"Failed getaddrinfo \" << dest_ << \" , \" << port << \" : \"\n                  << res << \" : \" << gai_strerror(res);\n      return CONN_ERROR;\n    }\n    \n    int count = 0;\n    for (struct addrinfo *info = infoList; info != nullptr;\n         info = info->ai_next) {\n      ++count;\n      std::string host, port_2;\n      WdtSocket::getNameInfo(info->ai_addr, info->ai_addrlen, host, port_2);\n      WVLOG(2) << \"will connect to \" << host << \" \" << port_2;\n      \n      fd = socket(info->ai_family, info->ai_socktype, info->ai_protocol);\n      if (fd == -1) {\n        WPLOG(WARNING) << \"Error making socket for port_2 \" << port_2;\n        continue;\n      }\n      \n      socket_->setFd(fd);\n      setSendBufferSize();\n\n      int sockArg = fcntl(fd, F_GETFL, nullptr);\n      sockArg |= O_NONBLOCK;\n      res = fcntl(fd, F_SETFL, sockArg);\n      if (res < 0) {\n        WPLOG(ERROR) << \"Failed to make the socket non-blocking \" << port_2\n                     << \" sock \" << sockArg << \" res \" << res;\n        closeConnection();\n        continue;\n      }\n\n      if (::connect(fd, info->ai_addr, info->ai_addrlen) != 0) {\n        if (errno != EINPROGRESS) {\n          WPLOG(INFO) << \"Error connecting on \" << host << \" \" << port_2;\n          closeConnection();\n          continue;\n        }\n        \n        auto startTime = Clock::now();\n        int connectTimeout = threadCtx_.getOptions().connect_timeout_millis;\n\n        while (true) {\n          if (threadCtx_.getAbortChecker()->shouldAbort()) {\n            WLOG(ERROR) << \"Transfer aborted during connect \" << port_2 << \" \"\n                        << fd;\n            closeConnection();\n            return ABORT;\n          }\n          \n          int timeElapsed = durationMillis(Clock::now() - startTime);\n          if (timeElapsed >= connectTimeout) {\n            WVLOG(1) << \"connect() timed out\" << host << \" \" << port_2;\n            closeConnection();\n            return CONN_ERROR_RETRYABLE;\n          }\n          \n          int pollTimeout =\n              std::min(connectTimeout - timeElapsed,\n                       threadCtx_.getOptions().abort_check_interval_millis);\n          struct pollfd pollFds[] = {{fd, POLLOUT, 0}};\n\n          if ((res = poll(pollFds, 1, pollTimeout)) <= 0) {\n            if (errno == EINTR) {\n              WVLOG(1) << \"poll() call interrupted. retrying... \" << port_2;\n              continue;\n            }\n            if (res == 0) {\n              WVLOG(1) << \"poll() timed out \" << host << \" \" << port_2;\n              continue;\n            }\n            WPLOG(ERROR) << \"poll() failed \" << host << \" \" << port_2 << \" \"\n                         << fd;\n            closeConnection();\n            return CONN_ERROR;\n          }\n          break;\n        }\n\n        int connectResult;\n        socklen_t len = sizeof(connectResult);\n        if (getsockopt(fd, SOL_SOCKET, SO_ERROR, &connectResult, &len) < 0) {\n          WPLOG(WARNING) << \"getsockopt() failed\";\n          closeConnection();\n          continue;\n        }\n        if (connectResult != 0) {\n          WLOG(WARNING) << \"connect did not succeed on \" << host << \" \" << port_2\n                        << \" : \" << strerrorStr(connectResult);\n          closeConnection();\n          continue;\n        }\n      }\n\n      sockArg = fcntl(fd, F_GETFL, nullptr);\n      sockArg &= (~O_NONBLOCK);\n      res = fcntl(fd, F_SETFL, sockArg);\n      if (res == -1) {\n        WPLOG(ERROR) << \"Could not make the socket blocking \" << port_2;\n        closeConnection();\n        continue;\n      }\n      \n      WVLOG(1) << \"Successful connect on \" << fd;\n      peerIp_ = host;\n      sa_ = *info;\n      break;\n    }\n    \n    if (socket_->getFd() < 0) {\n      if (count > 1) {\n        WLOG(INFO) << \"Unable to connect to either of the \" << count << \" addrs\";\n      }\n      return CONN_ERROR_RETRYABLE;\n    }\n    \n    socket_->setSocketTimeouts();\n    socket_->setDscp(threadCtx_.getOptions().dscp);\n    return OK;\n  }\n\n  const std::string &getPeerIp() const {\n    return peerIp_;\n  }\n\n  void setSendBufferSize() {\n    int bufSize = threadCtx_.getOptions().send_buffer_size;\n    auto fd = socket_->getFd();\n    auto port = socket_->getPort();\n    if (bufSize <= 0) {\n      return;\n    }\n    int status =\n        ::setsockopt(fd, SOL_SOCKET, SO_SNDBUF, &bufSize, sizeof(bufSize));\n    if (status != 0) {\n      WPLOG(ERROR) << \"Failed to set send buffer \" << port << \" size \" << bufSize\n                   << \" fd \" << fd;\n      return;\n    }\n    WVLOG(1) << \"Send buffer size set to \" << bufSize << \" port \" << port;\n  }\n\nprivate:\n  std::string dest_;\n  ThreadCtx &threadCtx_;\n  struct addrinfo sa_;\n  std::unique_ptr<WdtSocket> socket_;\n  std::string peerIp_;\n\n  void closeConnection() {\n    socket_->close();\n  }\n};\n\n}  // namespace wdt\n}  // namespace facebook",
    "Code_level": "Class-level",
    "FSMID_for_test": 149,
    "matched_results": [
      "```cpp\n#include <string>\n#include <memory>\n#include <mutex>\n#include <thread>\n#include <cstring>\n#include <sys/socket.h>\n#include <netdb.h>\n#include <unistd.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <fcntl.h>\n\nclass WdtSocket {\npublic:\n    int fd;\n    WdtSocket(int sockFd) : fd(sockFd) {}\n};\n\nstruct ThreadCtx {\n    struct {\n        size_t sendBufferSize;\n    } options;\n};\n\nclass EncryptionParams {\n    // Placeholder for encryption parameters\n};\n\nenum class ErrorCode {\n    SUCCESS,\n    ADDRESS_RESOLUTION_FAILURE,\n    CONNECTION_TIMEOUT,\n    SOCKET_CREATION_FAILURE,\n    CONNECTION_FAILURE\n};\n\nclass ClientSocket {\nprivate:\n    std::string dest_;\n    ThreadCtx& threadCtx_;\n    struct addrinfo sa_;\n    std::unique_ptr<WdtSocket> socket_;\n    std::string peerIp_;\n\n    void closeConnection() {\n        if (socket_) {\n            ::close(socket_->fd);\n            socket_.reset();\n        }\n    }\n\npublic:\n    ClientSocket(ThreadCtx& threadCtx, const std::string& dest, int port, const EncryptionParams& /*encryptionParams*/, int64_t /*ivChangeInterval*/) \n        : dest_(dest), threadCtx_(threadCtx) {\n        memset(&sa_, 0, sizeof(sa_));\n        sa_.ai_family = AF_UNSPEC;       // IPv4 and IPv6\n        sa_.ai_socktype = SOCK_STREAM;   // TCP\n        sa_.ai_protocol = IPPROTO_TCP;\n    }\n\n    ErrorCode connect() {\n        struct addrinfo* res = nullptr;\n        int status = getaddrinfo(dest_.c_str(), std::to_string(80).c_str(), &sa_, &res);\n        if (status != 0) {\n            return ErrorCode::ADDRESS_RESOLUTION_FAILURE;\n        }\n\n        int sockFd = -1;\n        for (struct addrinfo* rp = res; rp != nullptr; rp = rp.ai_next) {\n            sockFd = socket(rp->ai_family, rp->ai_socktype, rp->ai_protocol);\n            if (sockFd == -1) continue;\n\n            fcntl(sockFd, F_SETFL, O_NONBLOCK);\n\n            if (::connect(sockFd, rp->ai_addr, rp->ai_addrlen) == -1) {\n                if (errno != EINPROGRESS) {\n                    close(sockFd);\n                    continue;\n                }\n            }\n\n            // Simulate timeout handling\n            std::this_thread::sleep_for(std::chrono::seconds(5));\n\n            int so_error;\n            socklen_t len = sizeof(so_error);\n            if (getsockopt(sockFd, SOL_SOCKET, SO_ERROR, &so_error, &len) < 0 || so_error != 0) {\n                close(sockFd);\n                continue;\n            }\n\n            fcntl(sockFd, F_SETFL, 0); // Set to blocking mode\n\n            char ipStr[INET6_ADDRSTRLEN];\n            void* addr;\n            if (rp->ai_family == AF_INET) {\n                addr = &((struct sockaddr_in*)rp->ai_addr)->sin_addr;\n            } else {\n                addr = &((struct sockaddr_in6*)rp->ai_addr)->sin6_addr;\n            }\n            inet_ntop(rp->ai_family, addr, ipStr, sizeof(ipStr));\n            peerIp_ = ipStr;\n\n            socket_.reset(new WdtSocket(sockFd));\n            setSendBufferSize();\n            freeaddrinfo(res);\n            return ErrorCode::SUCCESS;\n        }\n\n        freeaddrinfo(res);\n        if (sockFd != -1) closeConnection();\n        return ErrorCode::CONNECTION_FAILURE;\n    }\n\n    const std::string& getPeerIp() {\n        return peerIp_;\n    }\n\n    void setSendBufferSize() {\n        if (socket_) {\n            int size = static_cast<int>(threadCtx_.options.sendBufferSize);\n            setsockopt(socket_->fd, SOL_SOCKET, SO_SNDBUF, &size, sizeof(size));\n        }\n    }\n};\n```",
      "```cpp\n#include <string>\n#include <memory>\n#include <mutex>\n#include <thread>\n#include <cstring>\n#include <sys/socket.h>\n#include <netdb.h>\n#include <unistd.h>\n#include <fcntl.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n\nclass WdtSocket {\npublic:\n    int fd;\n    WdtSocket(int sock) : fd(sock) {}\n};\n\nstruct ThreadCtx {\n    struct {\n        int sendBufferSize;\n    } options;\n};\n\nstruct EncryptionParams {\n    // Placeholder for encryption parameters\n};\n\nenum class ErrorCode {\n    SUCCESS,\n    ADDRESS_RESOLUTION_FAILED,\n    CONNECTION_TIMEOUT,\n    SOCKET_CREATION_FAILED,\n    CONNECTION_REFUSED\n};\n\nclass ClientSocket {\nprivate:\n    std::string dest_;\n    ThreadCtx& threadCtx_;\n    struct addrinfo sa_;\n    std::unique_ptr<WdtSocket> socket_;\n    std::string peerIp_;\n\n    void closeConnection() {\n        if (socket_) {\n            close(socket_->fd);\n            socket_.reset();\n        }\n    }\n\npublic:\n    ClientSocket(ThreadCtx& threadCtx, const std::string& dest, int port, const EncryptionParams& encryptionParams, int64_t ivChangeInterval) \n        : dest_(dest), threadCtx_(threadCtx) {\n        (void)encryptionParams; // Unused parameter\n        (void)ivChangeInterval; // Unused parameter\n\n        memset(&sa_, 0, sizeof(sa_));\n        sa_.ai_family = AF_UNSPEC;\n        sa_.ai_socktype = SOCK_STREAM;\n        sa_.ai_protocol = IPPROTO_TCP;\n\n        struct addrinfo* res = nullptr;\n        int status = getaddrinfo(dest.c_str(), std::to_string(port).c_str(), &sa_, &res);\n        if (status != 0 || !res) {\n            closeConnection();\n            throw std::runtime_error(\"Address resolution failed\");\n        }\n\n        memcpy(&sa_, res, sizeof(sa_));\n        freeaddrinfo(res);\n    }\n\n    ErrorCode connect() {\n        int sock = socket(sa_.ai_family, sa_.ai_socktype, sa_.ai_protocol);\n        if (sock < 0) {\n            return ErrorCode::SOCKET_CREATION_FAILED;\n        }\n\n        fcntl(sock, F_SETFL, O_NONBLOCK);\n\n        if (::connect(sock, sa_.ai_addr, sa_.ai_addrlen) < 0 && errno != EINPROGRESS) {\n            close(sock);\n            return ErrorCode::CONNECTION_REFUSED;\n        }\n\n        // Simulate timeout handling\n        std::this_thread::sleep_for(std::chrono::seconds(1));\n\n        int so_error;\n        socklen_t len = sizeof(so_error);\n        if (getsockopt(sock, SOL_SOCKET, SO_ERROR, &so_error, &len) < 0 || so_error != 0) {\n            close(sock);\n            return ErrorCode::CONNECTION_TIMEOUT;\n        }\n\n        fcntl(sock, F_SETFL, 0); // Set to blocking mode\n\n        socket_ = std::make_unique<WdtSocket>(sock);\n\n        char ip[INET6_ADDRSTRLEN];\n        void* addr;\n        if (sa_.ai_family == AF_INET) {\n            addr = &((struct sockaddr_in*)sa_.ai_addr)->sin_addr;\n        } else {\n            addr = &((struct sockaddr_in6*)sa_.ai_addr)->sin6_addr;\n        }\n\n        inet_ntop(sa_.ai_family, addr, ip, INET6_ADDRSTRLEN);\n        peerIp_ = ip;\n\n        setSendBufferSize();\n\n        return ErrorCode::SUCCESS;\n    }\n\n    const std::string& getPeerIp() {\n        return peerIp_;\n    }\n\n    void setSendBufferSize() {\n        if (socket_) {\n            int size = threadCtx_.options.sendBufferSize;\n            setsockopt(socket_->fd, SOL_SOCKET, SO_SNDBUF, &size, sizeof(size));\n        }\n    }\n\n    ~ClientSocket() {\n        closeConnection();\n    }\n};\n```",
      "```cpp\n#include <string>\n#include <memory>\n#include <mutex>\n#include <thread>\n#include <chrono>\n#include <cstring>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netdb.h>\n#include <unistd.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n\nstruct WdtSocket {\n    int fd;\n};\n\nclass ThreadCtx {\npublic:\n    struct Options {\n        size_t sendBufferSize;\n    };\n    Options options;\n};\n\nstruct EncryptionParams {};\n\nenum class ErrorCode {\n    SUCCESS,\n    ADDRESS_RESOLUTION_FAILED,\n    CONNECTION_TIMEOUT,\n    SOCKET_CREATION_FAILED,\n    CONNECTION_FAILED\n};\n\nclass ClientSocket {\nprivate:\n    std::string dest_;\n    ThreadCtx& threadCtx_;\n    struct addrinfo sa_;\n    std::unique_ptr<WdtSocket> socket_;\n    std::string peerIp_;\n\n    void closeConnection() {\n        if (socket_) {\n            shutdown(socket_->fd, SHUT_RDWR);\n            close(socket_->fd);\n            socket_.reset();\n        }\n    }\n\npublic:\n    ClientSocket(ThreadCtx& threadCtx, const std::string& dest, int port, const EncryptionParams& encryptionParams, int64_t ivChangeInterval) \n        : dest_(dest), threadCtx_(threadCtx), sa_{} {}\n\n    ErrorCode connect() {\n        struct addrinfo hints{};\n        memset(&hints, 0, sizeof(hints));\n        hints.ai_family = AF_UNSPEC; // IPv4 and IPv6\n        hints.ai_socktype = SOCK_STREAM;\n\n        char portStr[16];\n        snprintf(portStr, sizeof(portStr), \"%d\", port);\n\n        struct addrinfo* res;\n        if (getaddrinfo(dest_.c_str(), portStr, &hints, &res) != 0) {\n            return ErrorCode::ADDRESS_RESOLUTION_FAILED;\n        }\n\n        for (struct addrinfo* rp = res; rp != nullptr; rp = rp->ai_next) {\n            socket_.reset(new WdtSocket{socket(rp->ai_family, rp->ai_socktype, rp->ai_protocol)});\n            if (!socket_ || socket_->fd == -1) {\n                continue;\n            }\n\n            // Set timeout for connection\n            timeval tv;\n            tv.tv_sec = 5;\n            tv.tv_usec = 0;\n            setsockopt(socket_->fd, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));\n\n            if (::connect(socket_->fd, rp->ai_addr, rp->ai_addrlen) == 0) {\n                break;\n            } else {\n                closeConnection();\n            }\n        }\n\n        freeaddrinfo(res);\n\n        if (!socket_) {\n            return ErrorCode::CONNECTION_FAILED;\n        }\n\n        sockaddr_in* ipv4 = reinterpret_cast<sockaddr_in*>(sa_.ai_addr);\n        if (ipv4) {\n            peerIp_ = inet_ntoa(ipv4->sin_addr);\n        } else {\n            sockaddr_in6* ipv6 = reinterpret_cast<sockaddr_in6*>(sa_.ai_addr);\n            char ip[INET6_ADDRSTRLEN];\n            inet_ntop(AF_INET6, &ipv6->sin6_addr, ip, INET6_ADDRSTRLEN);\n            peerIp_ = ip;\n        }\n\n        setSendBufferSize();\n\n        return ErrorCode::SUCCESS;\n    }\n\n    const std::string& getPeerIp() {\n        return peerIp_;\n    }\n\n    void setSendBufferSize() {\n        if (socket_) {\n            int size = static_cast<int>(threadCtx_.options.sendBufferSize);\n            setsockopt(socket_->fd, SOL_SOCKET, SO_SNDBUF, &size, sizeof(size));\n        }\n    }\n\n    ~ClientSocket() {\n        closeConnection();\n    }\n};\n```"
    ],
    "unmatched_results": [
      "```cpp\n#include <string>\n#include <memory>\n#include <mutex>\n#include <thread>\n#include <chrono>\n#include <cstring>\n#include <sys/socket.h>\n#include <netdb.h>\n#include <unistd.h>\n#include <fcntl.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n\nstruct WdtSocket {\n    int fd;\n    WdtSocket() : fd(-1) {}\n    ~WdtSocket() { if (fd >= 0) close(fd); }\n};\n\nclass ThreadCtx {\npublic:\n    struct Options {\n        size_t sendBufferSize;\n    };\n    Options options;\n};\n\nclass EncryptionParams {\n    // Placeholder for encryption parameters\n};\n\nenum class ErrorCode {\n    SUCCESS,\n    ADDRESS_RESOLUTION_FAILURE,\n    CONNECTION_TIMEOUT,\n    SOCKET_CREATION_FAILURE,\n    CONNECTION_FAILURE\n};\n\nclass ClientSocket {\nprivate:\n    std::string dest_;\n    ThreadCtx& threadCtx_;\n    struct addrinfo sa_;\n    std::unique_ptr<WdtSocket> socket_;\n    std::string peerIp_;\n\n    void setNonBlocking(int fd) {\n        int flags = fcntl(fd, F_GETFL, 0);\n        fcntl(fd, F_SETFL, flags | O_NONBLOCK);\n    }\n\n    bool waitForConnect(int fd, std::chrono::milliseconds timeout) {\n        fd_set writefds;\n        FD_ZERO(&writefds);\n        FD_SET(fd, &writefds);\n\n        timeval tv;\n        tv.tv_sec = timeout.count() / 1000;\n        tv.tv_usec = (timeout.count() % 1000) * 1000;\n\n        int result = select(fd + 1, nullptr, &writefds, nullptr, &tv);\n        if (result == -1)\n            return false;\n\n        if (!FD_ISSET(fd, &writefds))\n            return false;\n\n        int so_error;\n        socklen_t len = sizeof(so_error);\n        getsockopt(fd, SOL_SOCKET, SO_ERROR, &so_error, &len);\n        return so_error == 0;\n    }\n\n    void closeConnection() {\n        socket_.reset();\n    }\n\npublic:\n    ClientSocket(ThreadCtx& threadCtx, const std::string& dest, int port, const EncryptionParams&, int64_t) \n        : dest_(dest), threadCtx_(threadCtx), sa_{} {\n\n        struct addrinfo hints{};\n        hints.ai_family = AF_UNSPEC;\n        hints.ai_socktype = SOCK_STREAM;\n        hints.ai_protocol = IPPROTO_TCP;\n\n        int res = getaddrinfo(dest.c_str(), std::to_string(port).c_str(), &hints, &sa_);\n        if (res != 0) {\n            throw std::runtime_error(\"getaddrinfo failed\");\n        }\n    }\n\n    ErrorCode connect() {\n        socket_.reset(new WdtSocket());\n        socket_->fd = socket(sa_.ai_family, sa_.ai_socktype, sa_.ai_protocol);\n        if (socket_->fd < 0)\n            return ErrorCode::SOCKET_CREATION_FAILURE;\n\n        setNonBlocking(socket_->fd);\n\n        if (::connect(socket_->fd, sa_.ai_addr, sa_.ai_addrlen) < 0) {\n            if (errno != EINPROGRESS)\n                return ErrorCode::CONNECTION_FAILURE;\n        }\n\n        if (!waitForConnect(socket_->fd, std::chrono::seconds(5)))\n            return ErrorCode::CONNECTION_TIMEOUT;\n\n        char ip[INET6_ADDRSTRLEN];\n        void* addr;\n        if (sa_.ai_family == AF_INET) {\n            addr = &((struct sockaddr_in*)sa_.ai_addr)->sin_addr;\n        } else {\n            addr = &((struct sockaddr_in6*)sa_.ai_addr)->sin6_addr;\n        }\n\n        inet_ntop(sa_.ai_family, addr, ip, sizeof(ip));\n        peerIp_ = std::string(ip);\n        return ErrorCode::SUCCESS;\n    }\n\n    const std::string& getPeerIp() {\n        return peerIp_;\n    }\n\n    void setSendBufferSize() {\n        if (setsockopt(socket_->fd, SOL_SOCKET, SO_SNDBUF, &threadCtx_.options.sendBufferSize, sizeof(threadCtx_.options.sendBufferSize)) < 0) {\n            // Handle error as needed\n        }\n    }\n};\n```",
      "```cpp\n#include <string>\n#include <memory>\n#include <mutex>\n#include <thread>\n#include <chrono>\n#include <cstring>\n#include <sys/socket.h>\n#include <netdb.h>\n#include <unistd.h>\n#include <fcntl.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n\nclass ThreadCtx {\npublic:\n    int sendBufferSize;\n};\n\nstruct WdtSocket {\n    int fd;\n    WdtSocket(int sock) : fd(sock) {}\n    ~WdtSocket() { if (fd >= 0) close(fd); }\n};\n\nclass EncryptionParams {};\n\nenum class ErrorCode {\n    SUCCESS,\n    CONNECTION_FAILURE,\n    INVALID_ADDRESS,\n    SOCKET_CREATION_FAILURE,\n    TIMEOUT\n};\n\nclass ClientSocket {\nprivate:\n    std::string dest_;\n    ThreadCtx& threadCtx_;\n    struct addrinfo sa_;\n    std::unique_ptr<WdtSocket> socket_;\n    std::string peerIp_;\n\n    void closeConnection() {\n        socket_.reset(nullptr);\n    }\n\n    bool setNonBlocking(int sockfd) {\n        int flags = fcntl(sockfd, F_GETFL, 0);\n        if (flags == -1) return false;\n        return fcntl(sockfd, F_SETFL, flags | O_NONBLOCK) != -1;\n    }\n\n    bool waitForConnect(int sockfd, const std::chrono::milliseconds timeout) {\n        fd_set writefds;\n        FD_ZERO(&writefds);\n        FD_SET(sockfd, &writefds);\n\n        timeval tv;\n        tv.tv_sec = timeout.count() / 1000;\n        tv.tv_usec = (timeout.count() % 1000) * 1000;\n\n        int result = select(sockfd + 1, nullptr, &writefds, nullptr, &tv);\n        if (result <= 0) return false;\n\n        int so_error;\n        socklen_t len = sizeof(so_error);\n        getsockopt(sockfd, SOL_SOCKET, SO_ERROR, &so_error, &len);\n        return so_error == 0;\n    }\n\npublic:\n    ClientSocket(ThreadCtx& threadCtx, const std::string& dest, int port, const EncryptionParams&, int64_t) \n        : dest_(dest), threadCtx_(threadCtx), sa_{} {\n        (void)port; // unused for now\n    }\n\n    ErrorCode connect() {\n        struct addrinfo hints{};\n        hints.ai_family = AF_UNSPEC;\n        hints.ai_socktype = SOCK_STREAM;\n        hints.ai_protocol = IPPROTO_TCP;\n\n        char portStr[6];\n        snprintf(portStr, sizeof(portStr), \"%d\", 8080);\n\n        struct addrinfo* res;\n        int status = getaddrinfo(dest_.c_str(), portStr, &hints, &res);\n        if (status != 0 || !res) {\n            return ErrorCode::INVALID_ADDRESS;\n        }\n\n        int sockfd = socket(res->ai_family, res->ai_socktype, res->ai_protocol);\n        if (sockfd < 0) {\n            freeaddrinfo(res);\n            return ErrorCode::SOCKET_CREATION_FAILURE;\n        }\n\n        if (!setNonBlocking(sockfd)) {\n            close(sockfd);\n            freeaddrinfo(res);\n            return ErrorCode::CONNECTION_FAILURE;\n        }\n\n        if (::connect(sockfd, res->ai_addr, res->ai_addrlen) < 0 && errno != EINPROGRESS) {\n            close(sockfd);\n            freeaddrinfo(res);\n            return ErrorCode::CONNECTION_FAILURE;\n        }\n\n        if (!waitForConnect(sockfd, std::chrono::seconds(5))) {\n            close(sockfd);\n            freeaddrinfo(res);\n            return ErrorCode::TIMEOUT;\n        }\n\n        socket_ = std::make_unique<WdtSocket>(sockfd);\n        sockaddr_in* ipv4 = reinterpret_cast<sockaddr_in*>(res->ai_addr);\n        peerIp_ = inet_ntoa(ipv4->sin_addr);\n        freeaddrinfo(res);\n        setSendBufferSize();\n        return ErrorCode::SUCCESS;\n    }\n\n    const std::string& getPeerIp() {\n        return peerIp_;\n    }\n\n    void setSendBufferSize() {\n        if (socket_) {\n            setsockopt(socket_->fd, SOL_SOCKET, SO_SNDBUF, &threadCtx_.sendBufferSize, sizeof(threadCtx_.sendBufferSize));\n        }\n    }\n};\n```",
      "```cpp\n#include <string>\n#include <memory>\n#include <mutex>\n#include <thread>\n#include <chrono>\n#include <cstring>\n#include <sys/socket.h>\n#include <netdb.h>\n#include <unistd.h>\n\nclass WdtSocket {\npublic:\n    int fd;\n    WdtSocket(int sock) : fd(sock) {}\n};\n\nstruct ThreadCtx {\n    struct {\n        size_t sendBufferSize;\n    } options;\n};\n\nstruct EncryptionParams {};\n\nclass ClientSocket {\nprivate:\n    std::string dest_;\n    ThreadCtx& threadCtx_;\n    struct addrinfo sa_;\n    std::unique_ptr<WdtSocket> socket_;\n    std::string peerIp_;\n\n    void closeConnection() {\n        if (socket_) {\n            close(socket_->fd);\n            socket_.reset();\n        }\n    }\n\npublic:\n    enum class ErrorCode {\n        SUCCESS,\n        DNS_FAILURE,\n        CONNECTION_TIMEOUT,\n        SOCKET_ERROR\n    };\n\n    ClientSocket(ThreadCtx& threadCtx, const std::string& dest, int port, const EncryptionParams& encryptionParams, int64_t ivChangeInterval) \n        : dest_(dest), threadCtx_(threadCtx) {\n        (void)encryptionParams;\n        (void)ivChangeInterval;\n\n        memset(&sa_, 0, sizeof(sa_));\n        sa_.ai_family = AF_UNSPEC;\n        sa_.ai_socktype = SOCK_STREAM;\n        sa_.ai_protocol = IPPROTO_TCP;\n    }\n\n    ErrorCode connect() {\n        struct addrinfo* res = nullptr;\n        struct addrinfo hints = {};\n        hints.ai_family = AF_UNSPEC;\n        hints.ai_socktype = SOCK_STREAM;\n        hints.ai_protocol = IPPROTO_TCP;\n\n        int ret = getaddrinfo(dest_.c_str(), \"80\", &hints, &res);\n        if (ret != 0) {\n            return ErrorCode::DNS_FAILURE;\n        }\n\n        for (struct addrinfo* rp = res; rp != nullptr; rp = rp->ai_next) {\n            int sockFd = socket(rp->ai_family, rp->ai_socktype, rp->ai_protocol);\n            if (sockFd == -1) {\n                continue;\n            }\n\n            socket_.reset(new WdtSocket(sockFd));\n\n            // Set timeout for connection attempt\n            timeval tv;\n            tv.tv_sec = 5;\n            tv.tv_usec = 0;\n            setsockopt(socket_->fd, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));\n\n            if (::connect(socket_->fd, rp->ai_addr, rp->ai_addrlen) == 0) {\n                char ipBuffer[INET6_ADDRSTRLEN];\n                void* addr;\n                if (rp->ai_family == AF_INET) {\n                    addr = &((struct sockaddr_in*)rp->ai_addr)->sin_addr;\n                } else {\n                    addr = &((struct sockaddr_in6*)rp->ai_addr)->sin6_addr;\n                }\n                inet_ntop(rp->ai_family, addr, ipBuffer, INET6_ADDRSTRLEN);\n                peerIp_ = std::string(ipBuffer);\n                freeaddrinfo(res);\n                setSendBufferSize();\n                return ErrorCode::SUCCESS;\n            }\n\n            closeConnection();\n        }\n\n        freeaddrinfo(res);\n        return ErrorCode::CONNECTION_TIMEOUT;\n    }\n\n    const std::string& getPeerIp() {\n        return peerIp_;\n    }\n\n    void setSendBufferSize() {\n        if (threadCtx_.options.sendBufferSize > 0) {\n            setsockopt(socket_->fd, SOL_SOCKET, SO_SNDBUF, &threadCtx_.options.sendBufferSize, sizeof(threadCtx_.options.sendBufferSize));\n        }\n    }\n};\n```",
      "```cpp\n#include <string>\n#include <memory>\n#include <mutex>\n#include <thread>\n#include <sys/socket.h>\n#include <netdb.h>\n#include <unistd.h>\n#include <cstring>\n#include <stdexcept>\n\nstruct WdtSocket {\n    int fd;\n};\n\nclass ThreadCtx {\npublic:\n    struct Options {\n        size_t sendBufferSize;\n    };\n    Options options;\n};\n\nclass EncryptionParams {\n    // Placeholder for encryption parameters\n};\n\nenum class ErrorCode {\n    SUCCESS,\n    CONNECTION_FAILURE,\n    INVALID_ADDRESS,\n    SOCKET_CREATION_FAILURE,\n    SET_BUFFER_FAILURE\n};\n\nclass ClientSocket {\nprivate:\n    std::string dest_;\n    ThreadCtx& threadCtx_;\n    struct addrinfo sa_;\n    std::unique_ptr<WdtSocket> socket_;\n    std::string peerIp_;\n\n    void closeConnection() {\n        if (socket_) {\n            ::close(socket_->fd);\n            socket_.reset();\n        }\n    }\n\npublic:\n    ClientSocket(ThreadCtx& threadCtx, const std::string& dest, int port, const EncryptionParams& /*encryptionParams*/, int64_t /*ivChangeInterval*/) : threadCtx_(threadCtx), dest_(dest) {\n        memset(&sa_, 0, sizeof(sa_));\n        sa_.ai_family = AF_UNSPEC;       // IPv4 and IPv6\n        sa_.ai_socktype = SOCK_STREAM;   // TCP\n        sa_.ai_protocol = IPPROTO_TCP;\n\n        struct addrinfo* res = nullptr;\n        int status = getaddrinfo(dest.c_str(), std::to_string(port).c_str(), &sa_, &res);\n        if (status != 0) {\n            throw std::runtime_error(\"getaddrinfo failed\");\n        }\n\n        socket_.reset(new WdtSocket{::socket(res->ai_family, res->ai_socktype, res->ai_protocol)});\n        if (!socket_ || socket_->fd == -1) {\n            freeaddrinfo(res);\n            throw std::runtime_error(\"Failed to create socket\");\n        }\n\n        status = connect();\n        if (status != ErrorCode::SUCCESS) {\n            closeConnection();\n            freeaddrinfo(res);\n            throw std::runtime_error(\"Connection failed\");\n        }\n\n        freeaddrinfo(res);\n        setSendBufferSize();\n    }\n\n    ~ClientSocket() {\n        closeConnection();\n    }\n\n    ErrorCode connect() {\n        int flags = fcntl(socket_->fd, F_GETFL, 0);\n        fcntl(socket_->fd, F_SETFL, flags | O_NONBLOCK);\n\n        if (::connect(socket_->fd, sa_.ai_addr, sa_.ai_addrlen) < 0) {\n            if (errno != EINPROGRESS) {\n                return ErrorCode::CONNECTION_FAILURE;\n            }\n\n            // Simulate timeout handling with sleep\n            std::this_thread::sleep_for(std::chrono::seconds(5));\n\n            socklen_t len = sizeof(int);\n            int so_error;\n            if (getsockopt(socket_->fd, SOL_SOCKET, SO_ERROR, &so_error, &len) < 0) {\n                return ErrorCode::CONNECTION_FAILURE;\n            }\n\n            if (so_error != 0) {\n                return ErrorCode::CONNECTION_FAILURE;\n            }\n        }\n\n        char host[NI_MAXHOST];\n        if (getnameinfo(sa_.ai_addr, sa_.ai_addrlen, host, NI_MAXHOST, nullptr, 0, NI_NUMERICHOST) == 0) {\n            peerIp_ = host;\n        } else {\n            return ErrorCode::INVALID_ADDRESS;\n        }\n\n        return ErrorCode::SUCCESS;\n    }\n\n    const std::string& getPeerIp() {\n        return peerIp_;\n    }\n\n    void setSendBufferSize() {\n        if (setsockopt(socket_->fd, SOL_SOCKET, SO_SNDBUF, &threadCtx_.options.sendBufferSize, sizeof(threadCtx_.options.sendBufferSize)) < 0) {\n            // Handle error as needed\n        }\n    }\n};\n```",
      "```cpp\n#include <string>\n#include <memory>\n#include <mutex>\n#include <thread>\n#include <chrono>\n#include <cstring>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netdb.h>\n#include <unistd.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n\nclass WdtSocket {\npublic:\n    int fd;\n    WdtSocket(int sock) : fd(sock) {}\n};\n\nclass ThreadCtx {\npublic:\n    int sendBufferSize = 65536;\n};\n\nstruct EncryptionParams {\n    std::string cipher;\n    std::string key;\n};\n\nenum class ErrorCode {\n    SUCCESS,\n    RESOLUTION_FAILURE,\n    CONNECTION_FAILURE,\n    INVALID_SOCKET\n};\n\nclass ClientSocket {\nprivate:\n    std::string dest_;\n    ThreadCtx& threadCtx_;\n    struct addrinfo sa_;\n    std::unique_ptr<WdtSocket> socket_;\n    std::string peerIp_;\n\n    void closeConnection() {\n        if (socket_) {\n            close(socket_->fd);\n            socket_.reset();\n        }\n    }\n\npublic:\n    ClientSocket(ThreadCtx& threadCtx, const std::string& dest, int port, const EncryptionParams& encryptionParams, int64_t ivChangeInterval) \n        : dest_(dest), threadCtx_(threadCtx) {\n        (void)encryptionParams;\n        (void)ivChangeInterval;\n\n        memset(&sa_, 0, sizeof(sa_));\n        sa_.ai_family = AF_UNSPEC;\n        sa_.ai_socktype = SOCK_STREAM;\n        sa_.ai_protocol = IPPROTO_TCP;\n    }\n\n    ErrorCode connect() {\n        struct addrinfo* res = nullptr;\n        struct addrinfo hints = {};\n        hints.ai_family = AF_UNSPEC;\n        hints.ai_socktype = SOCK_STREAM;\n        hints.ai_protocol = IPPROTO_TCP;\n\n        if (getaddrinfo(dest_.c_str(), \"80\", &hints, &res) != 0) {\n            return ErrorCode::RESOLUTION_FAILURE;\n        }\n\n        for (struct addrinfo* rp = res; rp != nullptr; rp = rp->ai_next) {\n            int sock = socket(rp->ai_family, rp->ai_socktype, rp->ai_protocol);\n            if (sock == -1)\n                continue;\n\n            sockaddr_in* ipv4 = reinterpret_cast<sockaddr_in*>(rp->ai_addr);\n            sockaddr_in6* ipv6 = reinterpret_cast<sockaddr_in6*>(rp->ai_addr);\n\n            std::string ipStr;\n            if (rp->ai_family == AF_INET) {\n                char ip[INET_ADDRSTRLEN];\n                inet_ntop(AF_INET, &(ipv4->sin_addr), ip, INET_ADDRSTRLEN);\n                ipStr = ip;\n            } else if (rp->ai_family == AF_INET6) {\n                char ip[INET6_ADDRSTRLEN];\n                inet_ntop(AF_INET6, &(ipv6->sin6_addr), ip, INET6_ADDRSTRLEN);\n                ipStr = ip;\n            }\n\n            socket_ = std::make_unique<WdtSocket>(sock);\n\n            // Set timeout for connection attempt\n            timeval tv;\n            tv.tv_sec = 5;\n            tv.tv_usec = 0;\n            setsockopt(socket_->fd, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));\n\n            if (::connect(socket_->fd, rp->ai_addr, rp->ai_addrlen) == 0) {\n                peerIp_ = ipStr;\n                setSendBufferSize();\n                freeaddrinfo(res);\n                return ErrorCode::SUCCESS;\n            }\n\n            closeConnection();\n        }\n\n        freeaddrinfo(res);\n        return ErrorCode::CONNECTION_FAILURE;\n    }\n\n    const std::string& getPeerIp() {\n        return peerIp_;\n    }\n\n    void setSendBufferSize() {\n        if (socket_) {\n            setsockopt(socket_->fd, SOL_SOCKET, SO_SNDBUF, &threadCtx_.sendBufferSize, sizeof(threadCtx_.sendBufferSize));\n        }\n    }\n};\n```",
      "```cpp\n#include <string>\n#include <memory>\n#include <mutex>\n#include <thread>\n#include <chrono>\n#include <cstring>\n#include <sys/socket.h>\n#include <netdb.h>\n#include <unistd.h>\n\nclass WdtSocket {\npublic:\n    int fd;\n    WdtSocket(int sockFd) : fd(sockFd) {}\n};\n\nstruct ThreadCtx {\n    struct Options {\n        size_t sendBufferSize;\n    };\n    Options options;\n};\n\nstruct EncryptionParams {};\n\nenum class ErrorCode {\n    SUCCESS,\n    ADDRESS_RESOLUTION_FAILURE,\n    CONNECTION_TIMEOUT,\n    SOCKET_CREATION_FAILURE,\n    CONNECTION_FAILURE\n};\n\nclass ClientSocket {\nprivate:\n    std::string dest_;\n    ThreadCtx& threadCtx_;\n    struct addrinfo sa_;\n    std::unique_ptr<WdtSocket> socket_;\n    std::string peerIp_;\n\n    void closeConnection() {\n        if (socket_) {\n            close(socket_->fd);\n            socket_.reset();\n        }\n    }\n\npublic:\n    ClientSocket(ThreadCtx& threadCtx, const std::string& dest, int port, const EncryptionParams& encryptionParams, int64_t ivChangeInterval) \n        : dest_(dest), threadCtx_(threadCtx), sa_{} {\n        (void)encryptionParams;\n        (void)ivChangeInterval;\n    }\n\n    void setSendBufferSize() {\n        if (socket_) {\n            int bufferSize = static_cast<int>(threadCtx_.options.sendBufferSize);\n            setsockopt(socket_->fd, SOL_SOCKET, SO_SNDBUF, &bufferSize, sizeof(bufferSize));\n        }\n    }\n\n    ErrorCode connect() {\n        struct addrinfo hints{};\n        memset(&hints, 0, sizeof(hints));\n        hints.ai_family = AF_UNSPEC;     // IPv4 or IPv6\n        hints.ai_socktype = SOCK_STREAM; // TCP\n        hints.ai_protocol = IPPROTO_TCP;\n\n        char portStr[16];\n        snprintf(portStr, sizeof(portStr), \"%d\", 80); // Example port\n\n        struct addrinfo* res;\n        int status = getaddrinfo(dest_.c_str(), portStr, &hints, &res);\n        if (status != 0) {\n            return ErrorCode::ADDRESS_RESOLUTION_FAILURE;\n        }\n\n        socket_.reset(new WdtSocket(-1));\n\n        for (struct addrinfo* p = res; p != nullptr; p = p->ai_next) {\n            socket_->fd = socket(p->ai_family, p->ai_socktype, p->ai_protocol);\n            if (socket_->fd == -1) {\n                continue;\n            }\n\n            // Set timeout for connection\n            timeval tv;\n            tv.tv_sec = 5;\n            tv.tv_usec = 0;\n            setsockopt(socket_->fd, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));\n\n            if (connect(socket_->fd, p->ai_addr, p->ai_addrlen) == 0) {\n                sa_ = *p;\n                break;\n            }\n\n            closeConnection();\n        }\n\n        freeaddrinfo(res);\n\n        if (!socket_ || socket_->fd == -1) {\n            return ErrorCode::CONNECTION_FAILURE;\n        }\n\n        setSendBufferSize();\n\n        char ipBuffer[INET6_ADDRSTRLEN];\n        void* address;\n        if (sa_.ai_family == AF_INET) {\n            address = &((struct sockaddr_in*)sa_.ai_addr)->sin_addr;\n        } else {\n            address = &((struct sockaddr_in6*)sa_.ai_addr)->sin6_addr;\n        }\n\n        inet_ntop(sa_.ai_family, address, ipBuffer, sizeof(ipBuffer));\n        peerIp_ = std::string(static_cast<char*>(ipBuffer));\n\n        return ErrorCode::SUCCESS;\n    }\n\n    const std::string& getPeerIp() {\n        return peerIp_;\n    }\n};\n```",
      "```cpp\n#include <string>\n#include <memory>\n#include <mutex>\n#include <thread>\n#include <cstring>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netdb.h>\n#include <unistd.h>\n#include <fcntl.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n\nclass WdtSocket {\npublic:\n    int fd;\n    WdtSocket(int sock) : fd(sock) {}\n};\n\nstruct ThreadCtx {\n    struct Options {\n        size_t sendBufferSize;\n    };\n    Options options;\n};\n\nstruct EncryptionParams {};\n\nenum class ErrorCode {\n    SUCCESS,\n    CONNECTION_FAILURE,\n    INVALID_ADDRESS,\n    SOCKET_CREATION_FAILURE\n};\n\nclass ClientSocket {\nprivate:\n    std::string dest_;\n    ThreadCtx& threadCtx_;\n    struct addrinfo sa_;\n    std::unique_ptr<WdtSocket> socket_;\n    std::string peerIp_;\n\n    void closeConnection() {\n        if (socket_) {\n            shutdown(socket_->fd, SHUT_RDWR);\n            close(socket_->fd);\n            socket_.reset();\n        }\n    }\n\npublic:\n    ClientSocket(ThreadCtx& threadCtx, const std::string& dest, int port, const EncryptionParams& encryptionParams, int64_t ivChangeInterval) \n        : dest_(dest), threadCtx_(threadCtx), sa_{} {\n        (void)encryptionParams;\n        (void)ivChangeInterval;\n    }\n\n    ErrorCode connect() {\n        struct addrinfo hints{};\n        memset(&hints, 0, sizeof(hints));\n        hints.ai_family = AF_UNSPEC;     // IPv4 and IPv6\n        hints.ai_socktype = SOCK_STREAM; // TCP\n        hints.ai_protocol = IPPROTO_TCP;\n\n        char portStr[16];\n        snprintf(portStr, sizeof(portStr), \"%d\", 80);\n\n        int res = getaddrinfo(dest_.c_str(), portStr, &hints, &sa_);\n        if (res != 0) {\n            return ErrorCode::INVALID_ADDRESS;\n        }\n\n        int sockFd = socket(sa_.ai_family, sa_.ai_socktype, sa_.ai_protocol);\n        if (sockFd == -1) {\n            freeaddrinfo(sa_);\n            return ErrorCode::SOCKET_CREATION_FAILURE;\n        }\n\n        fcntl(sockFd, F_SETFL, O_NONBLOCK);\n\n        if (::connect(sockFd, sa_.ai_addr, sa_.ai_addrlen) < 0 && errno != EINPROGRESS) {\n            close(sockFd);\n            freeaddrinfo(sa_);\n            return ErrorCode::CONNECTION_FAILURE;\n        }\n\n        // Simulate timeout handling for connection\n        std::this_thread::sleep_for(std::chrono::seconds(5));\n\n        socket_ = std::make_unique<WdtSocket>(sockFd);\n        sockaddr_in* ipv4 = reinterpret_cast<sockaddr_in*>(sa_.ai_addr);\n        peerIp_ = inet_ntoa(ipv4->sin_addr);\n        setSendBufferSize();\n\n        return ErrorCode::SUCCESS;\n    }\n\n    const std::string& getPeerIp() {\n        return peerIp_;\n    }\n\n    void setSendBufferSize() {\n        if (socket_) {\n            int result = setsockopt(socket_->fd, SOL_SOCKET, SO_SNDBUF, &threadCtx_.options.sendBufferSize, sizeof(threadCtx_.options.sendBufferSize));\n            if (result < 0) {\n                // Handle error\n            }\n        }\n    }\n};\n```"
    ],
    "match_count": 3,
    "pass@3": 0.7083333333333333,
    "pass@5": 0.9166666666666666
  },
  {
    "Task_id": 18,
    "Instruction": "Task Description: Implement a TCP client function in C++ that establishes a connection to a server, sends user input messages, and receives responses from the server until the connection is terminated.\n\nFunction Description: The function `tcp_client_communication` creates a TCP socket, connects to a specified server, and enters a loop where it reads user input, sends it to the server, and prints the server's response. The communication continues until an error occurs or the connection is closed.\n\nInput: None (The server IP address and port are hardcoded as \"127.0.0.1\" and 8888, respectively, within the function.)\n\nOutput: None (The function prints received messages from the server to the console but does not return any value.)",
    "Canonical_solution": "#include <sys/socket.h>\n#include <arpa/inet.h>\n#include <string.h>\n#include <unistd.h>\n\n#define BUFFER_SIZE 1024\n\nvoid tcp_client_communication() {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    \n    struct sockaddr_in serv_addr;\n    bzero(&serv_addr, sizeof(serv_addr));\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_addr.s_addr = inet_addr(\"127.0.0.1\");\n    serv_addr.sin_port = htons(8888);\n\n    connect(sockfd, (sockaddr*)&serv_addr, sizeof(serv_addr));\n    \n    while(true){\n        char buf[BUFFER_SIZE];\n        bzero(&buf, sizeof(buf));\n        scanf(\"%s\", buf);\n        ssize_t write_bytes = write(sockfd, buf, sizeof(buf));\n        if(write_bytes == -1){\n            break;\n        }\n        bzero(&buf, sizeof(buf));\n        ssize_t read_bytes = read(sockfd, buf, sizeof(buf));\n        if(read_bytes > 0){\n            printf(\"message from server: %s\\n\", buf);\n        }else if(read_bytes == 0){\n            break;\n        }else if(read_bytes == -1){\n            close(sockfd);\n            break;\n        }\n    }\n    close(sockfd);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 149,
    "matched_results": [
      "```cpp\n#include <iostream>\n#include <string>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nvoid tcp_client_communication() {\n    int sock = 0;\n    struct sockaddr_in serv_addr;\n    char buffer[1024] = {0};\n\n    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation error\" << std::endl;\n        return;\n    }\n\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(8888);\n\n    if (inet_pton(AF_INET, \"127.0.0.1\", &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/Address not supported\" << std::endl;\n        return;\n    }\n\n    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        return;\n    }\n\n    while (true) {\n        std::string input;\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, input);\n        if (input.empty()) continue;\n\n        send(sock, input.c_str(), input.length(), 0);\n\n        int valread = read(sock, buffer, sizeof(buffer));\n        if (valread <= 0) break;\n\n        std::cout << \"Server response: \" << buffer << std::endl;\n        memset(buffer, 0, sizeof(buffer));\n    }\n\n    close(sock);\n}\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nvoid tcp_client_communication() {\n    int sock = 0;\n    struct sockaddr_in serv_addr;\n    const char* server_ip = \"127.0.0.1\";\n    int port = 8888;\n\n    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation error\" << std::endl;\n        return;\n    }\n\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, server_ip, &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        close(sock);\n        return;\n    }\n\n    if (connect(sock, (struct sockaddr*)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        close(sock);\n        return;\n    }\n\n    char buffer[1024] = {0};\n    std::string input;\n\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, input);\n        if (input.empty()) continue;\n\n        send(sock, input.c_str(), input.size(), 0);\n\n        int valread = read(sock, buffer, sizeof(buffer));\n        if (valread <= 0) break;\n\n        std::cout << \"Server response: \" << buffer << std::endl;\n        memset(buffer, 0, sizeof(buffer));\n    }\n\n    close(sock);\n}\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nvoid tcp_client_communication() {\n    int sock = 0;\n    struct sockaddr_in serv_addr;\n    char buffer[1024] = {0};\n\n    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation error\" << std::endl;\n        return;\n    }\n\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(8888);\n\n    if (inet_pton(AF_INET, \"127.0.0.1\", &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/Address not supported\" << std::endl;\n        return;\n    }\n\n    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        return;\n    }\n\n    while (true) {\n        std::string input;\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, input);\n        if (input.empty()) continue;\n\n        send(sock, input.c_str(), input.length(), 0);\n\n        int valread = read(sock, buffer, sizeof(buffer));\n        if (valread <= 0) break;\n\n        std::cout << \"Server response: \" << buffer << std::endl;\n        memset(buffer, 0, sizeof(buffer));\n    }\n\n    close(sock);\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nvoid tcp_client_communication() {\n    int sock = 0;\n    struct sockaddr_in serv_addr;\n    char buffer[1024] = {0};\n\n    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation error\" << std::endl;\n        return;\n    }\n\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(8888);\n\n    if (inet_pton(AF_INET, \"127.0.0.1\", &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/Address not supported\" << std::endl;\n        return;\n    }\n\n    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        return;\n    }\n\n    while (true) {\n        std::string input;\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, input);\n\n        if (send(sock, input.c_str(), input.length(), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        int valread = read(sock, buffer, sizeof(buffer));\n        if (valread <= 0) {\n            std::cerr << \"Server disconnected or read error\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Server response: \" << buffer << std::endl;\n        memset(buffer, 0, sizeof(buffer));\n    }\n\n    close(sock);\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nvoid tcp_client_communication() {\n    int sock = 0;\n    struct sockaddr_in serv_addr;\n    char buffer[1024] = {0};\n\n    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation error\" << std::endl;\n        return;\n    }\n\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(8888);\n\n    if (inet_pton(AF_INET, \"127.0.0.1\", &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        return;\n    }\n\n    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        return;\n    }\n\n    while (true) {\n        std::string input;\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, input);\n\n        if (send(sock, input.c_str(), input.length(), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        int valread = read(sock, buffer, sizeof(buffer));\n        if (valread <= 0) {\n            std::cerr << \"Server disconnected or read error\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Server response: \" << buffer << std::endl;\n        memset(buffer, 0, sizeof(buffer));\n    }\n\n    close(sock);\n}\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n\nvoid tcp_client_communication() {\n    int sock = socket(AF_INET, SOCK_STREAM, 0);\n    if (sock < 0) {\n        std::cerr << \"Socket creation error\" << std::endl;\n        return;\n    }\n\n    struct sockaddr_in server_addr{};\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(8888);\n    inet_pton(AF_INET, \"127.0.0.1\", &server_addr.sin_addr);\n\n    if (connect(sock, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {\n        std::cerr << \"Connection failed\" << std::endl;\n        close(sock);\n        return;\n    }\n\n    char buffer[4096];\n    std::string input;\n\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, input);\n\n        if (send(sock, input.c_str(), input.size(), 0) <= 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        int bytes_received = recv(sock, buffer, sizeof(buffer) - 1, 0);\n        if (bytes_received <= 0) {\n            std::cerr << \"Server disconnected or error occurred\" << std::endl;\n            break;\n        }\n\n        buffer[bytes_received] = '\\0';\n        std::cout << \"Server response: \" << buffer << std::endl;\n    }\n\n    close(sock);\n}\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nvoid tcp_client_communication() {\n    int sock = 0;\n    struct sockaddr_in serv_addr;\n    const char* server_ip = \"127.0.0.1\";\n    int port = 8888;\n\n    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation error\" << std::endl;\n        return;\n    }\n\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, server_ip, &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        close(sock);\n        return;\n    }\n\n    if (connect(sock, (struct sockaddr*)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        close(sock);\n        return;\n    }\n\n    char buffer[1024] = {0};\n    std::string input;\n\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, input);\n        if (send(sock, input.c_str(), input.length(), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        int valread = read(sock, buffer, sizeof(buffer));\n        if (valread <= 0) {\n            std::cerr << \"Server disconnected or read error\" << std::endl;\n            break;\n        }\n        std::cout << \"Server response: \" << buffer << std::endl;\n        memset(buffer, 0, sizeof(buffer));\n    }\n\n    close(sock);\n}\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nvoid tcp_client_communication() {\n    int sock = 0;\n    struct sockaddr_in serv_addr;\n    char buffer[1024] = {0};\n\n    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation error\" << std::endl;\n        return;\n    }\n\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(8888);\n\n    if (inet_pton(AF_INET, \"127.0.0.1\", &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/Address not supported\" << std::endl;\n        return;\n    }\n\n    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        return;\n    }\n\n    while (true) {\n        std::string input;\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, input);\n\n        if (send(sock, input.c_str(), input.length(), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        int valread = read(sock, buffer, sizeof(buffer));\n        if (valread <= 0) {\n            std::cerr << \"Server disconnected or read error\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Server response: \" << buffer << std::endl;\n        memset(buffer, 0, sizeof(buffer));\n    }\n\n    close(sock);\n}\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nvoid tcp_client_communication() {\n    int sock = 0;\n    struct sockaddr_in serv_addr;\n    char buffer[1024] = {0};\n\n    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation error\" << std::endl;\n        return;\n    }\n\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(8888);\n\n    if (inet_pton(AF_INET, \"127.0.0.1\", &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        return;\n    }\n\n    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        return;\n    }\n\n    while (true) {\n        std::string input;\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, input);\n        if (input.empty()) continue;\n\n        send(sock, input.c_str(), input.length(), 0);\n\n        int valread = read(sock, buffer, sizeof(buffer));\n        if (valread <= 0) break;\n\n        std::cout << \"Server response: \" << buffer << std::endl;\n        memset(buffer, 0, sizeof(buffer));\n    }\n\n    close(sock);\n}\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nvoid tcp_client_communication() {\n    int sock = 0;\n    struct sockaddr_in serv_addr;\n    char buffer[1024] = {0};\n\n    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation error\" << std::endl;\n        return;\n    }\n\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(8888);\n\n    if (inet_pton(AF_INET, \"127.0.0.1\", &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/Address not supported\" << std::endl;\n        return;\n    }\n\n    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        return;\n    }\n\n    while (true) {\n        std::string input;\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, input);\n        if (input.empty()) continue;\n\n        send(sock, input.c_str(), input.length(), 0);\n\n        int valread = read(sock, buffer, sizeof(buffer));\n        if (valread <= 0) break;\n\n        std::cout << \"Server response: \" << buffer << std::endl;\n        memset(buffer, 0, sizeof(buffer));\n    }\n\n    close(sock);\n}\n```"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 19,
    "Instruction": "Task Description: Create a TCP client class that can establish a connection to a server, send and receive data, and handle timeouts for non-blocking operations.\n\nClass Description: The TCPClient class provides functionality for TCP socket communication with a remote server. It supports both blocking and non-blocking operations with timeout capabilities, and handles cross-platform compatibility between Windows and Unix-like systems.\n\nAttributes:\n- address: std::string - The IP address or hostname of the server to connect to\n- port: u16 - The port number of the server to connect to\n- main_socket: SocketHolder (int) - The socket file descriptor for the connection\n- connected: bool - Flag indicating whether the client is currently connected to the server\n\nMethods:\n- Connect() -> bool - Establishes a connection to the server. Returns true if successful.\n- Read(void* buffer, size_t size, const std::chrono::nanoseconds& timeout) -> bool - Reads data from the server into the buffer. Returns true if all requested bytes were read.\n- Write(const void* buffer, size_t size, const std::chrono::nanoseconds& timeout) -> bool - Writes data from the buffer to the server. Returns true if all bytes were written.\n- Disconnect() -> void - Closes the connection to the server.\n- SetNonBlock(SocketHolder sockFD, bool nonBlocking) -> bool - Sets the blocking mode of the socket. Returns true if successful.\n- ConnectWithTimeout(SocketHolder sockFD, void* server_addr, size_t server_addr_len, int timeout_seconds) -> bool - Attempts to connect with a timeout. Returns true if successful.",
    "Canonical_solution": "#include <winsock2.h>\n#include <ws2tcpip.h>\n#include <cerrno>\n#include <arpa/inet.h>\n#include <fcntl.h>\n#include <ifaddrs.h>\n#include <netdb.h>\n#include <netinet/in.h>\n#include <netinet/tcp.h>\n#include <poll.h>\n#include <sys/socket.h>\n#include <sys/types.h>\n#include <unistd.h>\n#include <chrono>\n#include <memory>\n#include <string>\n\n#ifdef _WIN32\n#define WSAEAGAIN WSAEWOULDBLOCK\n#define WSAEMULTIHOP -1\n#define ERRNO(x) WSA##x\n#define GET_ERRNO WSAGetLastError()\n#define poll(x, y, z) WSAPoll(x, y, z);\n#define SHUT_RD SD_RECEIVE\n#define SHUT_WR SD_SEND\n#define SHUT_RDWR SD_BOTH\n#else\n#define ERRNO(x) x\n#define GET_ERRNO errno\n#define closesocket(x) close(x)\n#endif\n\nclass TCPClient {\npublic:\n    using SocketHolder = int;\n\n    TCPClient(const std::string& address, u16 port) : address(address), port(port) {}\n\n    bool Connect() {\n        if (connected)\n            return true;\n\n        struct addrinfo hints, *addrinfo;\n        memset(&hints, 0, sizeof(hints));\n        hints.ai_socktype = SOCK_STREAM;\n        hints.ai_family = AF_INET;\n\n        if (getaddrinfo(address.data(), NULL, &hints, &addrinfo) != 0) {\n            return false;\n        }\n\n        main_socket = ::socket(AF_INET, SOCK_STREAM, 0);\n        if (main_socket == static_cast<SocketHolder>(-1)) {\n            return false;\n        }\n\n        if (!SetNonBlock(main_socket, true)) {\n            closesocket(main_socket);\n            return false;\n        }\n\n        struct sockaddr_in servaddr = {0};\n        servaddr.sin_family = AF_INET;\n        servaddr.sin_addr.s_addr = ((struct sockaddr_in*)(addrinfo->ai_addr))->sin_addr.s_addr;\n        servaddr.sin_port = htons(port);\n        freeaddrinfo(addrinfo);\n\n        if (!ConnectWithTimeout(main_socket, &servaddr, sizeof(servaddr), 10)) {\n            closesocket(main_socket);\n            return false;\n        }\n\n        connected = true;\n        return true;\n    }\n\n    bool Read(void* buffer, size_t size, const std::chrono::nanoseconds& timeout) {\n        size_t read_bytes = 0;\n        auto before = std::chrono::steady_clock::now();\n        while (read_bytes != size) {\n            int new_read = ::recv(main_socket, (char*)((uintptr_t)buffer + read_bytes), \n                (int)(size - read_bytes), 0);\n            if (new_read < 0) {\n                if (GET_ERRNO == ERRNO(EWOULDBLOCK) &&\n                    (timeout == std::chrono::nanoseconds(0) ||\n                     std::chrono::steady_clock::now() - before < timeout)) {\n                    continue;\n                }\n                read_bytes = 0;\n                break;\n            }\n            read_bytes += new_read;\n        }\n        return read_bytes == size;\n    }\n\n    bool Write(const void* buffer, size_t size, const std::chrono::nanoseconds& timeout) {\n        size_t write_bytes = 0;\n        auto before = std::chrono::steady_clock::now();\n        while (write_bytes != size) {\n            int new_written = ::send(main_socket, (const char*)((uintptr_t)buffer + write_bytes),\n                                    (int)(size - write_bytes), 0);\n            if (new_written < 0) {\n                if (GET_ERRNO == ERRNO(EWOULDBLOCK) &&\n                    (timeout == std::chrono::nanoseconds(0) ||\n                     std::chrono::steady_clock::now() - before < timeout)) {\n                    continue;\n                }\n                write_bytes = 0;\n                break;\n            }\n            write_bytes += new_written;\n        }\n        return write_bytes == size;\n    }\n\n    void Disconnect() {\n        if (connected) {\n            shutdown(main_socket, SHUT_RDWR);\n            closesocket(main_socket);\n            connected = false;\n        }\n    }\n\nprivate:\n    bool SetNonBlock(SocketHolder sockFD, bool nonBlocking) {\n        bool blocking = !nonBlocking;\n#ifdef _WIN32\n        unsigned long nonblocking = (blocking) ? 0 : 1;\n        int ret = ioctlsocket(sockFD, FIONBIO, &nonblocking);\n        if (ret == -1) {\n            return false;\n        }\n#else\n        int flags = ::fcntl(sockFD, F_GETFL, 0);\n        if (flags == -1) {\n            return false;\n        }\n\n        flags &= ~O_NONBLOCK;\n        if (!blocking) {\n            flags |= O_NONBLOCK;\n        }\n\n        const int ret = ::fcntl(sockFD, F_SETFL, flags);\n        if (ret == -1) {\n            return false;\n        }\n#endif\n        return true;\n    }\n\n    bool ConnectWithTimeout(SocketHolder sockFD, void* server_addr, size_t server_addr_len,\n                           int timeout_seconds) {\n        int res = ::connect(sockFD, (struct sockaddr*)server_addr, static_cast<int>(server_addr_len));\n        if (res == -1 && ((GET_ERRNO == ERRNO(EINPROGRESS) || GET_ERRNO == ERRNO(EWOULDBLOCK))) {\n            struct timeval tv;\n            fd_set fdset;\n            FD_ZERO(&fdset);\n            FD_SET(sockFD, &fdset);\n\n            tv.tv_sec = timeout_seconds;\n            tv.tv_usec = 0;\n            int select_res = ::select(static_cast<int>(sockFD + 1), NULL, &fdset, NULL, &tv);\n#ifdef _WIN32\n            if (select_res == 0) {\n                return false;\n            }\n#else\n            bool select_good = false;\n            if (select_res == 1) {\n                int so_error;\n                socklen_t len = sizeof so_error;\n\n                getsockopt(sockFD, SOL_SOCKET, SO_ERROR, &so_error, &len);\n\n                if (so_error == 0) {\n                    select_good = true;\n                }\n            }\n            if (!select_good) {\n                return false;\n            }\n#endif\n        } else if (res == -1) {\n            return false;\n        }\n        return true;\n    }\n\n    std::string address;\n    u16 port;\n    SocketHolder main_socket = -1;\n    bool connected = false;\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 149,
    "matched_results": [
      "```cpp\n#include <string>\n#include <chrono>\n#include <cstring>\n#include <cerrno>\n#include <unistd.h>\n#include <fcntl.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <netdb.h>\n#include <stdexcept>\n\n#if defined(_WIN32)\n#include <winsock2.h>\n#include <ws2tcpip.h>\n#pragma comment(lib, \"ws2_32.lib\")\n#define SHUT_RDWR SD_BOTH\ntypedef int socklen_t;\n#else\n#include <sys/select.h>\n#endif\n\nusing SocketHolder = int;\n\nclass TCPClient {\npublic:\n    TCPClient(const std::string& address, uint16_t port) : address(address), port(port), main_socket(-1), connected(false) {}\n\n    ~TCPClient() {\n        Disconnect();\n    }\n\n    bool Connect() {\n        struct addrinfo hints, *res;\n        memset(&hints, 0, sizeof(hints));\n        hints.ai_family = AF_UNSPEC;\n        hints.ai_socktype = SOCK_STREAM;\n        hints.ai_protocol = IPPROTO_TCP;\n\n        if (getaddrinfo(address.c_str(), std::to_string(port).c_str(), &hints, &res) != 0)\n            return false;\n\n        main_socket = socket(res->ai_family, res->ai_socktype, res->ai_protocol);\n        if (main_socket == -1) {\n            freeaddrinfo(res);\n            return false;\n        }\n\n        if (!ConnectWithTimeout(main_socket, res->ai_addr, res->ai_addrlen, 5)) {\n            Disconnect();\n            freeaddrinfo(res);\n            return false;\n        }\n\n        connected = true;\n        freeaddrinfo(res);\n        return true;\n    }\n\n    bool Read(void* buffer, size_t size, const std::chrono::nanoseconds& timeout) {\n        if (!connected || !buffer || size == 0)\n            return false;\n\n        fd_set read_fds;\n        FD_ZERO(&read_fds);\n        FD_SET(main_socket, &read_fds);\n\n        timeval tv;\n        tv.tv_sec = static_cast<long>(timeout.count() / 1e9);\n        tv.tv_usec = static_cast<long>((timeout.count() % 1e9) / 1e3);\n\n        int select_result = select(main_socket + 1, &read_fds, nullptr, nullptr, &tv);\n        if (select_result <= 0)\n            return false;\n\n        ssize_t total_read = 0;\n        while (total_read < static_cast<ssize_t>(size)) {\n            ssize_t bytes_read = recv(main_socket, reinterpret_cast<char*>(buffer) + total_read, size - total_read, 0);\n            if (bytes_read <= 0) {\n                if (errno == EAGAIN || errno == EWOULDBLOCK)\n                    continue;\n                return false;\n            }\n            total_read += bytes_read;\n        }\n\n        return true;\n    }\n\n    bool Write(const void* buffer, size_t size, const std::chrono::nanoseconds& timeout) {\n        if (!connected || !buffer || size == 0)\n            return false;\n\n        fd_set write_fds;\n        FD_ZERO(&write_fds);\n        FD_SET(main_socket, &write_fds);\n\n        timeval tv;\n        tv.tv_sec = static_cast<long>(timeout.count() / 1e9);\n        tv.tv_usec = static_cast<long>((timeout.count() % 1e9) / 1e3);\n\n        int select_result = select(main_socket + 1, nullptr, &write_fds, nullptr, &tv);\n        if (select_result <= 0)\n            return false;\n\n        ssize_t total_written = 0;\n        while (total_written < static_cast<ssize_t>(size)) {\n            ssize_t bytes_written = send(main_socket, reinterpret_cast<const char*>(buffer) + total_written, size - total_written, 0);\n            if (bytes_written <= 0) {\n                if (errno == EAGAIN || errno == EWOULDBLOCK)\n                    continue;\n                return false;\n            }\n            total_written += bytes_written;\n        }\n\n        return true;\n    }\n\n    void Disconnect() {\n        if (main_socket != -1) {\n#if defined(_WIN32)\n            closesocket(main_socket);\n#else\n            close(main_socket);\n#endif\n            main_socket = -1;\n        }\n        connected = false;\n    }\n\nprivate:\n    std::string address;\n    uint16_t port;\n    SocketHolder main_socket;\n    bool connected;\n\n    bool SetNonBlock(SocketHolder sockFD, bool nonBlocking) {\n#if defined(_WIN32)\n        u_long mode = nonBlocking ? 1 : 0;\n        return ioctlsocket(sockFD, FIONBIO, &mode) == 0;\n#else\n        int flags = fcntl(sockFD, F_GETFL, 0);\n        if (flags == -1)\n            return false;\n\n        if (nonBlocking)\n            flags |= O_NONBLOCK;\n        else\n            flags &= ~O_NONBLOCK;\n\n        return fcntl(sockFD, F_SETFL, flags) != -1;\n#endif\n    }\n\n    bool ConnectWithTimeout(SocketHolder sockFD, void* server_addr, size_t server_addr_len, int timeout_seconds) {\n        if (!SetNonBlock(sockFD, true))\n            return false;\n\n        if (connect(sockFD, reinterpret_cast<struct sockaddr*>(server_addr), static_cast<int>(server_addr_len)) < 0) {\n            if (errno != EINPROGRESS)\n                return false;\n        }\n\n        fd_set write_fds;\n        FD_ZERO(&write_fds);\n        FD_SET(sockFD, &write_fds);\n\n        timeval tv;\n        tv.tv_sec = timeout_seconds;\n        tv.tv_usec = 0;\n\n        int select_result = select(sockFD + 1, nullptr, &write_fds, nullptr, &tv);\n        if (select_result <= 0)\n            return false;\n\n        int so_error;\n        socklen_t len = sizeof(so_error);\n        if (getsockopt(sockFD, SOL_SOCKET, SO_ERROR, &so_error, &len) < 0)\n            return false;\n\n        if (so_error != 0)\n            return false;\n\n        SetNonBlock(sockFD, false);\n        return true;\n    }\n};\n```",
      "```cpp\n#include <string>\n#include <chrono>\n#include <cstring>\n#include <cerrno>\n#include <unistd.h>\n#include <fcntl.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <netdb.h>\n#include <stdexcept>\n\n#if defined(_WIN32)\n#include <winsock2.h>\n#include <ws2tcpip.h>\n#pragma comment(lib, \"ws2_32.lib\")\n#define SHUT_RDWR SD_BOTH\ntypedef int socklen_t;\n#else\n#include <sys/select.h>\n#endif\n\nusing SocketHolder = int;\n\nclass TCPClient {\npublic:\n    TCPClient(const std::string& address, u16 port) : address(address), port(port), main_socket(-1), connected(false) {}\n\n    ~TCPClient() {\n        Disconnect();\n    }\n\n    bool Connect() {\n        struct addrinfo hints, *res;\n        memset(&hints, 0, sizeof(hints));\n        hints.ai_family = AF_UNSPEC;\n        hints.ai_socktype = SOCK_STREAM;\n\n        if (getaddrinfo(address.c_str(), std::to_string(port).c_str(), &hints, &res) != 0) {\n            return false;\n        }\n\n        main_socket = socket(res->ai_family, res->ai_socktype, res->ai_protocol);\n        if (main_socket == -1) {\n            freeaddrinfo(res);\n            return false;\n        }\n\n        if (!ConnectWithTimeout(main_socket, res->ai_addr, res->ai_addrlen, 5)) {\n            Disconnect();\n            freeaddrinfo(res);\n            return false;\n        }\n\n        connected = true;\n        freeaddrinfo(res);\n        return true;\n    }\n\n    bool Read(void* buffer, size_t size, const std::chrono::nanoseconds& timeout) {\n        if (!connected || main_socket == -1) return false;\n\n        fd_set read_fds;\n        FD_ZERO(&read_fds);\n        FD_SET(main_socket, &read_fds);\n\n        timeval tv;\n        tv.tv_sec = static_cast<long>(timeout.count() / 1e9);\n        tv.tv_usec = static_cast<long>((timeout.count() % 1e9) / 1e3);\n\n        #if defined(_WIN32)\n        if (select(0, &read_fds, nullptr, nullptr, &tv) <= 0) return false;\n        #else\n        if (select(main_socket + 1, &read_fds, nullptr, nullptr, &tv) <= 0) return false;\n        #endif\n\n        ssize_t bytes_read = recv(main_socket, static_cast<char*>(buffer), size, 0);\n        return bytes_read == static_cast<ssize_t>(size);\n    }\n\n    bool Write(const void* buffer, size_t size, const std::chrono::nanoseconds& timeout) {\n        if (!connected || main_socket == -1) return false;\n\n        fd_set write_fds;\n        FD_ZERO(&write_fds);\n        FD_SET(main_socket, &write_fds);\n\n        timeval tv;\n        tv.tv_sec = static_cast<long>(timeout.count() / 1e9);\n        tv.tv_usec = static_cast<long>((timeout.count() % 1e9) / 1e3);\n\n        #if defined(_WIN32)\n        if (select(0, nullptr, &write_fds, nullptr, &tv) <= 0) return false;\n        #else\n        if (select(main_socket + 1, nullptr, &write_fds, nullptr, &tv) <= 0) return false;\n        #endif\n\n        ssize_t bytes_written = send(main_socket, static_cast<const char*>(buffer), size, 0);\n        return bytes_written == static_cast<ssize_t>(size);\n    }\n\n    void Disconnect() {\n        if (main_socket != -1) {\n            shutdown(main_socket, SHUT_RDWR);\n            close(main_socket);\n            main_socket = -1;\n        }\n        connected = false;\n    }\n\nprivate:\n    std::string address;\n    u16 port;\n    SocketHolder main_socket;\n    bool connected;\n\n    bool SetNonBlock(SocketHolder sockFD, bool nonBlocking) {\n        int flags;\n        #if defined(_WIN32)\n        u_long mode = nonBlocking ? 1 : 0;\n        return ioctlsocket(sockFD, FIONBIO, &mode) == 0;\n        #else\n        flags = fcntl(sockFD, F_GETFL, 0);\n        if (flags == -1) return false;\n        if (nonBlocking) flags |= O_NONBLOCK;\n        else flags &= ~O_NONBLOCK;\n        return fcntl(sockFD, F_SETFL, flags) != -1;\n        #endif\n    }\n\n    bool ConnectWithTimeout(SocketHolder sockFD, void* server_addr, size_t server_addr_len, int timeout_seconds) {\n        if (!SetNonBlock(sockFD, true)) return false;\n\n        if (connect(sockFD, reinterpret_cast<struct sockaddr*>(server_addr), server_addr_len) < 0) {\n            if (errno != EINPROGRESS) {\n                return false;\n            }\n        }\n\n        fd_set write_fds;\n        FD_ZERO(&write_fds);\n        FD_SET(sockFD, &write_fds);\n\n        timeval tv;\n        tv.tv_sec = timeout_seconds;\n        tv.tv_usec = 0;\n\n        #if defined(_WIN32)\n        if (select(0, nullptr, &write_fds, nullptr, &tv) <= 0) return false;\n        #else\n        if (select(sockFD + 1, nullptr, &write_fds, nullptr, &tv) <= 0) return false;\n        #endif\n\n        int so_error;\n        socklen_t len = sizeof(so_error);\n        if (getsockopt(sockFD, SOL_SOCKET, SO_ERROR, &so_error, &len) < 0) return false;\n\n        if (so_error != 0) return false;\n\n        SetNonBlock(sockFD, false);\n        return true;\n    }\n};\n```",
      "```cpp\n#include <string>\n#include <chrono>\n#include <cstring>\n#include <cerrno>\n#include <unistd.h>\n#include <fcntl.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <netdb.h>\n#include <stdexcept>\n\n#if defined(_WIN32)\n#include <winsock2.h>\n#include <ws2tcpip.h>\n#pragma comment(lib, \"Ws2_32.lib\")\n#define SocketHolder SOCKET\n#define INVALID_SOCKET_FD INVALID_SOCKET\n#else\n#include <sys/select.h>\n#define SocketHolder int\n#define INVALID_SOCKET_FD -1\n#endif\n\nclass TCPClient {\npublic:\n    TCPClient(const std::string& address, u16 port) : address(address), port(port), main_socket(INVALID_SOCKET_FD), connected(false) {}\n\n    ~TCPClient() {\n        Disconnect();\n    }\n\n    bool Connect() {\n        struct addrinfo hints, *server_info, *p;\n        memset(&hints, 0, sizeof(hints));\n        hints.ai_family = AF_UNSPEC;\n        hints.ai_socktype = SOCK_STREAM;\n\n        if (getaddrinfo(address.c_str(), std::to_string(port).c_str(), &hints, &server_info) != 0) {\n            return false;\n        }\n\n        for (p = server_info; p != nullptr; p = p->ai_next) {\n            main_socket = socket(p->ai_family, p->ai_socktype, p->ai_protocol);\n            if (main_socket == INVALID_SOCKET_FD) {\n                continue;\n            }\n\n            if (ConnectWithTimeout(main_socket, p->ai_addr, p->ai_addrlen, 5)) {\n                connected = true;\n                freeaddrinfo(server_info);\n                return true;\n            }\n\n            close(main_socket);\n            main_socket = INVALID_SOCKET_FD;\n        }\n\n        freeaddrinfo(server_info);\n        return false;\n    }\n\n    bool Read(void* buffer, size_t size, const std::chrono::nanoseconds& timeout) {\n        if (!connected || main_socket == INVALID_SOCKET_FD) {\n            return false;\n        }\n\n        SetNonBlock(main_socket, true);\n\n        fd_set read_fds;\n        FD_ZERO(&read_fds);\n        FD_SET(main_socket, &read_fds);\n\n        timeval tv;\n        tv.tv_sec = static_cast<long>(timeout.count() / 1e9);\n        tv.tv_usec = static_cast<long>((timeout.count() % 1e9) / 1e3);\n\n        int select_result = select(static_cast<int>(main_socket + 1), &read_fds, nullptr, nullptr, &tv);\n        if (select_result <= 0) {\n            return false;\n        }\n\n        ssize_t bytes_read = recv(main_socket, reinterpret_cast<char*>(buffer), size, 0);\n        if (bytes_read <= 0) {\n            return false;\n        }\n\n        SetNonBlock(main_socket, false);\n        return static_cast<size_t>(bytes_read) == size;\n    }\n\n    bool Write(const void* buffer, size_t size, const std::chrono::nanoseconds& timeout) {\n        if (!connected || main_socket == INVALID_SOCKET_FD) {\n            return false;\n        }\n\n        SetNonBlock(main_socket, true);\n\n        fd_set write_fds;\n        FD_ZERO(&write_fds);\n        FD_SET(main_socket, &write_fds);\n\n        timeval tv;\n        tv.tv_sec = static_cast<long>(timeout.count() / 1e9);\n        tv.tv_usec = static_cast<long>((timeout.count() % 1e9) / 1e3);\n\n        int select_result = select(static_cast<int>(main_socket + 1), nullptr, &write_fds, nullptr, &tv);\n        if (select_result <= 0) {\n            return false;\n        }\n\n        ssize_t bytes_written = send(main_socket, reinterpret_cast<const char*>(buffer), size, 0);\n        if (bytes_written <= 0) {\n            return false;\n        }\n\n        SetNonBlock(main_socket, false);\n        return static_cast<size_t>(bytes_written) == size;\n    }\n\n    void Disconnect() {\n        if (connected && main_socket != INVALID_SOCKET_FD) {\n#if defined(_WIN32)\n            closesocket(main_socket);\n#else\n            close(main_socket);\n#endif\n            main_socket = INVALID_SOCKET_FD;\n            connected = false;\n        }\n    }\n\nprivate:\n    std::string address;\n    u16 port;\n    SocketHolder main_socket;\n    bool connected;\n\n    bool SetNonBlock(SocketHolder sockFD, bool nonBlocking) {\n#if defined(_WIN32)\n        u_long mode = nonBlocking ? 1 : 0;\n        return ioctlsocket(sockFD, FIONBIO, &mode) == 0;\n#else\n        int flags = fcntl(sockFD, F_GETFL, 0);\n        if (flags == -1) {\n            return false;\n        }\n\n        if (nonBlocking) {\n            flags |= O_NONBLOCK;\n        } else {\n            flags &= ~O_NONBLOCK;\n        }\n\n        return fcntl(sockFD, F_SETFL, flags) != -1;\n#endif\n    }\n\n    bool ConnectWithTimeout(SocketHolder sockFD, void* server_addr, size_t server_addr_len, int timeout_seconds) {\n        if (connect(sockFD, reinterpret_cast<struct sockaddr*>(server_addr), static_cast<int>(server_addr_len)) == 0) {\n            return true;\n        }\n\n        if (errno != EINPROGRESS) {\n            return false;\n        }\n\n        fd_set write_fds;\n        FD_ZERO(&write_fds);\n        FD_SET(sockFD, &write_fds);\n\n        timeval tv;\n        tv.tv_sec = timeout_seconds;\n        tv.tv_usec = 0;\n\n        int select_result = select(static_cast<int>(sockFD + 1), nullptr, &write_fds, nullptr, &tv);\n        if (select_result <= 0) {\n            return false;\n        }\n\n        int so_error;\n        socklen_t len = sizeof(so_error);\n        getsockopt(sockFD, SOL_SOCKET, SO_ERROR, &so_error, &len);\n        return so_error == 0;\n    }\n};\n```",
      "```cpp\n#include <string>\n#include <chrono>\n#include <cstring>\n#include <cerrno>\n#include <unistd.h>\n#include <fcntl.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <netdb.h>\n#include <stdexcept>\n\n#if defined(_WIN32)\n#include <winsock2.h>\n#include <ws2tcpip.h>\n#pragma comment(lib, \"ws2_32.lib\")\n#define SHUT_RDWR SD_BOTH\ntypedef int socklen_t;\n#else\n#include <sys/select.h>\n#endif\n\nusing SocketHolder = int;\n\nclass TCPClient {\npublic:\n    TCPClient(const std::string& address, u16 port) : address(address), port(port), main_socket(-1), connected(false) {}\n\n    ~TCPClient() {\n        Disconnect();\n    }\n\n    bool Connect() {\n        struct addrinfo hints, *res, *p;\n        memset(&hints, 0, sizeof(hints));\n        hints.ai_family = AF_UNSPEC;\n        hints.ai_socktype = SOCK_STREAM;\n\n        if (getaddrinfo(address.c_str(), std::to_string(port).c_str(), &hints, &res) != 0)\n            return false;\n\n        for (p = res; p != nullptr; p = p->ai_next) {\n            main_socket = socket(p->ai_family, p->ai_socktype, p->ai_protocol);\n            if (main_socket == -1)\n                continue;\n\n            if (ConnectWithTimeout(main_socket, p->ai_addr, p->ai_addrlen, 5)) {\n                connected = true;\n                freeaddrinfo(res);\n                return true;\n            }\n\n            close(main_socket);\n            main_socket = -1;\n        }\n\n        freeaddrinfo(res);\n        return false;\n    }\n\n    bool Read(void* buffer, size_t size, const std::chrono::nanoseconds& timeout) {\n        if (!connected || !buffer || size == 0)\n            return false;\n\n        fd_set read_fds;\n        FD_ZERO(&read_fds);\n        FD_SET(main_socket, &read_fds);\n\n        timeval tv;\n        tv.tv_sec = static_cast<long>(timeout.count() / 1e9);\n        tv.tv_usec = static_cast<long>((timeout.count() % 1e9) / 1e3);\n\n        if (select(main_socket + 1, &read_fds, nullptr, nullptr, &tv) <= 0)\n            return false;\n\n        ssize_t bytes_read = recv(main_socket, reinterpret_cast<char*>(buffer), size, 0);\n        return bytes_read == static_cast<ssize_t>(size);\n    }\n\n    bool Write(const void* buffer, size_t size, const std::chrono::nanoseconds& timeout) {\n        if (!connected || !buffer || size == 0)\n            return false;\n\n        fd_set write_fds;\n        FD_ZERO(&write_fds);\n        FD_SET(main_socket, &write_fds);\n\n        timeval tv;\n        tv.tv_sec = static_cast<long>(timeout.count() / 1e9);\n        tv.tv_usec = static_cast<long>((timeout.count() % 1e9) / 1e3);\n\n        if (select(main_socket + 1, nullptr, &write_fds, nullptr, &tv) <= 0)\n            return false;\n\n        ssize_t bytes_written = send(main_socket, reinterpret_cast<const char*>(buffer), size, 0);\n        return bytes_written == static_cast<ssize_t>(size);\n    }\n\n    void Disconnect() {\n        if (connected && main_socket != -1) {\n            shutdown(main_socket, SHUT_RDWR);\n            close(main_socket);\n            main_socket = -1;\n            connected = false;\n        }\n    }\n\nprivate:\n    std::string address;\n    u16 port;\n    SocketHolder main_socket;\n    bool connected;\n\n    bool SetNonBlock(SocketHolder sockFD, bool nonBlocking) {\n#if defined(_WIN32)\n        u_long mode = nonBlocking ? 1 : 0;\n        return ioctlsocket(sockFD, FIONBIO, &mode) == 0;\n#else\n        int flags = fcntl(sockFD, F_GETFL, 0);\n        if (flags == -1)\n            return false;\n\n        if (nonBlocking)\n            flags |= O_NONBLOCK;\n        else\n            flags &= ~O_NONBLOCK;\n\n        return fcntl(sockFD, F_SETFL, flags) == 0;\n#endif\n    }\n\n    bool ConnectWithTimeout(SocketHolder sockFD, void* server_addr, size_t server_addr_len, int timeout_seconds) {\n        if (SetNonBlock(sockFD, true) == false)\n            return false;\n\n        if (connect(sockFD, reinterpret_cast<struct sockaddr*>(server_addr), server_addr_len) < 0) {\n            if (errno != EINPROGRESS)\n                return false;\n        }\n\n        fd_set write_fds;\n        FD_ZERO(&write_fds);\n        FD_SET(sockFD, &write_fds);\n\n        timeval tv;\n        tv.tv_sec = timeout_seconds;\n        tv.tv_usec = 0;\n\n        int result = select(sockFD + 1, nullptr, &write_fds, nullptr, &tv);\n        if (result <= 0)\n            return false;\n\n        int so_error;\n        socklen_t len = sizeof(so_error);\n        getsockopt(sockFD, SOL_SOCKET, SO_ERROR, &so_error, &len);\n        return so_error == 0;\n    }\n};\n```",
      "```cpp\n#include <string>\n#include <chrono>\n#include <cstring>\n#include <cerrno>\n#include <unistd.h>\n#include <fcntl.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <netdb.h>\n#include <stdexcept>\n\n#if defined(_WIN32)\n#include <winsock2.h>\n#include <ws2tcpip.h>\n#pragma comment(lib, \"ws2_32.lib\")\n#define SHUT_RDWR SD_BOTH\n#define SocketHolder SOCKET\n#define INVALID_SOCKET_FD INVALID_SOCKET\n#else\n#define SocketHolder int\n#define INVALID_SOCKET_FD -1\n#endif\n\nclass TCPClient {\npublic:\n    TCPClient(const std::string& address, u16 port) : address(address), port(port), main_socket(INVALID_SOCKET_FD), connected(false) {}\n\n    ~TCPClient() {\n        Disconnect();\n    }\n\n    bool Connect() {\n        struct addrinfo hints, *res;\n        memset(&hints, 0, sizeof(hints));\n        hints.ai_family = AF_UNSPEC;\n        hints.ai_socktype = SOCK_STREAM;\n\n#if defined(_WIN32)\n        WSADATA wsaData;\n        if (WSAStartup(MAKEWORD(2, 2), &wsaData) != 0) {\n            return false;\n        }\n#endif\n\n        std::string port_str = std::to_string(port);\n        if (getaddrinfo(address.c_str(), port_str.c_str(), &hints, &res) != 0) {\n            return false;\n        }\n\n        main_socket = socket(res->ai_family, res->ai_socktype, res->ai_protocol);\n        if (main_socket == INVALID_SOCKET_FD) {\n            freeaddrinfo(res);\n            return false;\n        }\n\n        if (!ConnectWithTimeout(main_socket, res->ai_addr, res->ai_addrlen, 5)) {\n            Disconnect();\n            freeaddrinfo(res);\n            return false;\n        }\n\n        connected = true;\n        freeaddrinfo(res);\n        return true;\n    }\n\n    bool Read(void* buffer, size_t size, const std::chrono::nanoseconds& timeout) {\n        if (!connected || !buffer || size == 0) {\n            return false;\n        }\n\n        fd_set read_fds;\n        FD_ZERO(&read_fds);\n        FD_SET(main_socket, &read_fds);\n\n        timeval tv;\n        tv.tv_sec = static_cast<long>(timeout.count() / 1e9);\n        tv.tv_usec = static_cast<long>((timeout.count() % 1e9) / 1e3);\n\n        int ready = select(static_cast<int>(main_socket + 1), &read_fds, nullptr, nullptr, &tv);\n        if (ready <= 0) {\n            return false;\n        }\n\n        ssize_t total_read = 0;\n        while (total_read < static_cast<ssize_t>(size)) {\n            ssize_t bytes_read = recv(main_socket, reinterpret_cast<char*>(buffer) + total_read, size - total_read, 0);\n            if (bytes_read <= 0) {\n                if (errno == EAGAIN || errno == EWOULDBLOCK) {\n                    continue;\n                }\n                return false;\n            }\n            total_read += bytes_read;\n        }\n\n        return true;\n    }\n\n    bool Write(const void* buffer, size_t size, const std::chrono::nanoseconds& timeout) {\n        if (!connected || !buffer || size == 0) {\n            return false;\n        }\n\n        fd_set write_fds;\n        FD_ZERO(&write_fds);\n        FD_SET(main_socket, &write_fds);\n\n        timeval tv;\n        tv.tv_sec = static_cast<long>(timeout.count() / 1e9);\n        tv.tv_usec = static_cast<long>((timeout.count() % 1e9) / 1e3);\n\n        int ready = select(static_cast<int>(main_socket + 1), nullptr, &write_fds, nullptr, &tv);\n        if (ready <= 0) {\n            return false;\n        }\n\n        ssize_t total_written = 0;\n        while (total_written < static_cast<ssize_t>(size)) {\n            ssize_t bytes_written = send(main_socket, reinterpret_cast<const char*>(buffer) + total_written, size - total_written, 0);\n            if (bytes_written <= 0) {\n                if (errno == EAGAIN || errno == EWOULDBLOCK) {\n                    continue;\n                }\n                return false;\n            }\n            total_written += bytes_written;\n        }\n\n        return true;\n    }\n\n    void Disconnect() {\n        if (connected && main_socket != INVALID_SOCKET_FD) {\n#if defined(_WIN32)\n            closesocket(main_socket);\n#else\n            close(main_socket);\n#endif\n            main_socket = INVALID_SOCKET_FD;\n            connected = false;\n        }\n    }\n\nprivate:\n    std::string address;\n    u16 port;\n    SocketHolder main_socket;\n    bool connected;\n\n    bool SetNonBlock(SocketHolder sockFD, bool nonBlocking) {\n#if defined(_WIN32)\n        u_long mode = nonBlocking ? 1 : 0;\n        return ioctlsocket(sockFD, FIONBIO, &mode) == 0;\n#else\n        int flags = fcntl(sockFD, F_GETFL, 0);\n        if (flags == -1) {\n            return false;\n        }\n        if (nonBlocking) {\n            flags |= O_NONBLOCK;\n        } else {\n            flags &= ~O_NONBLOCK;\n        }\n        return fcntl(sockFD, F_SETFL, flags) == 0;\n#endif\n    }\n\n    bool ConnectWithTimeout(SocketHolder sockFD, void* server_addr, size_t server_addr_len, int timeout_seconds) {\n        if (!SetNonBlock(sockFD, true)) {\n            return false;\n        }\n\n        if (connect(sockFD, reinterpret_cast<struct sockaddr*>(server_addr), static_cast<int>(server_addr_len)) < 0) {\n            if (errno != EINPROGRESS) {\n                return false;\n            }\n        }\n\n        fd_set write_fds;\n        FD_ZERO(&write_fds);\n        FD_SET(sockFD, &write_fds);\n\n        timeval tv;\n        tv.tv_sec = timeout_seconds;\n        tv.tv_usec = 0;\n\n        int ready = select(static_cast<int>(sockFD + 1), nullptr, &write_fds, nullptr, &tv);\n        if (ready <= 0) {\n            return false;\n        }\n\n        int so_error;\n        socklen_t len = sizeof(so_error);\n        if (getsockopt(sockFD, SOL_SOCKET, SO_ERROR, &so_error, &len) < 0) {\n            return false;\n        }\n\n        if (so_error != 0) {\n            return false;\n        }\n\n        SetNonBlock(sockFD, false);\n        return true;\n    }\n};\n```",
      "```cpp\n#include <string>\n#include <chrono>\n#include <cstring>\n#include <cerrno>\n#include <unistd.h>\n#include <fcntl.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <netdb.h>\n#include <stdexcept>\n\n#if defined(_WIN32)\n#include <winsock2.h>\n#include <ws2tcpip.h>\n#pragma comment(lib, \"ws2_32.lib\")\n#else\n#include <sys/select.h>\n#endif\n\nusing SocketHolder = int;\n\nclass TCPClient {\npublic:\n    TCPClient(const std::string& address, uint16_t port) : address(address), port(port), main_socket(-1), connected(false) {}\n\n    ~TCPClient() {\n        Disconnect();\n    }\n\n    bool Connect() {\n        struct addrinfo hints, *res;\n        memset(&hints, 0, sizeof(hints));\n        hints.ai_family = AF_UNSPEC;\n        hints.ai_socktype = SOCK_STREAM;\n        hints.ai_protocol = IPPROTO_TCP;\n\n        if (getaddrinfo(address.c_str(), std::to_string(port).c_str(), &hints, &res) != 0) {\n            return false;\n        }\n\n        main_socket = socket(res->ai_family, res->ai_socktype, res->ai_protocol);\n        if (main_socket == -1) {\n            freeaddrinfo(res);\n            return false;\n        }\n\n        if (!ConnectWithTimeout(main_socket, res->ai_addr, res->ai_addrlen, 5)) {\n            Disconnect();\n            freeaddrinfo(res);\n            return false;\n        }\n\n        connected = true;\n        freeaddrinfo(res);\n        return true;\n    }\n\n    bool Read(void* buffer, size_t size, const std::chrono::nanoseconds& timeout) {\n        if (!connected || !buffer || size == 0) {\n            return false;\n        }\n\n        fd_set read_fds;\n        FD_ZERO(&read_fds);\n        FD_SET(main_socket, &read_fds);\n\n        timeval tv;\n        tv.tv_sec = static_cast<long>(timeout.count() / 1e9);\n        tv.tv_usec = static_cast<long>((timeout.count() % 1e9) / 1e3);\n\n        int select_result = select(main_socket + 1, &read_fds, nullptr, nullptr, &tv);\n        if (select_result <= 0) {\n            return false;\n        }\n\n        ssize_t total_read = 0;\n        while (total_read < static_cast<ssize_t>(size)) {\n            ssize_t bytes_read = recv(main_socket, reinterpret_cast<char*>(buffer) + total_read, size - total_read, 0);\n            if (bytes_read <= 0) {\n                if (errno == EAGAIN || errno == EWOULDBLOCK) {\n                    continue;\n                }\n                return false;\n            }\n            total_read += bytes_read;\n        }\n\n        return true;\n    }\n\n    bool Write(const void* buffer, size_t size, const std::chrono::nanoseconds& timeout) {\n        if (!connected || !buffer || size == 0) {\n            return false;\n        }\n\n        fd_set write_fds;\n        FD_ZERO(&write_fds);\n        FD_SET(main_socket, &write_fds);\n\n        timeval tv;\n        tv.tv_sec = static_cast<long>(timeout.count() / 1e9);\n        tv.tv_usec = static_cast<long>((timeout.count() % 1e9) / 1e3);\n\n        int select_result = select(main_socket + 1, nullptr, &write_fds, nullptr, &tv);\n        if (select_result <= 0) {\n            return false;\n        }\n\n        ssize_t total_written = 0;\n        while (total_written < static_cast<ssize_t>(size)) {\n            ssize_t bytes_written = send(main_socket, reinterpret_cast<const char*>(buffer) + total_written, size - total_written, 0);\n            if (bytes_written <= 0) {\n                if (errno == EAGAIN || errno == EWOULDBLOCK) {\n                    continue;\n                }\n                return false;\n            }\n            total_written += bytes_written;\n        }\n\n        return true;\n    }\n\n    void Disconnect() {\n        if (connected && main_socket != -1) {\n            close(main_socket);\n            main_socket = -1;\n            connected = false;\n        }\n    }\n\nprivate:\n    std::string address;\n    uint16_t port;\n    SocketHolder main_socket;\n    bool connected;\n\n    bool SetNonBlock(SocketHolder sockFD, bool nonBlocking) {\n#if defined(_WIN32)\n        u_long mode = nonBlocking ? 1 : 0;\n        return ioctlsocket(sockFD, FIONBIO, &mode) == 0;\n#else\n        int flags = fcntl(sockFD, F_GETFL, 0);\n        if (flags == -1) {\n            return false;\n        }\n        if (nonBlocking) {\n            flags |= O_NONBLOCK;\n        } else {\n            flags &= ~O_NONBLOCK;\n        }\n        return fcntl(sockFD, F_SETFL, flags) == 0;\n#endif\n    }\n\n    bool ConnectWithTimeout(SocketHolder sockFD, void* server_addr, size_t server_addr_len, int timeout_seconds) {\n        if (!SetNonBlock(sockFD, true)) {\n            return false;\n        }\n\n        if (connect(sockFD, reinterpret_cast<struct sockaddr*>(server_addr), server_addr_len) < 0) {\n            if (errno != EINPROGRESS) {\n                return false;\n            }\n        }\n\n        fd_set write_fds;\n        FD_ZERO(&write_fds);\n        FD_SET(sockFD, &write_fds);\n\n        timeval tv;\n        tv.tv_sec = timeout_seconds;\n        tv.tv_usec = 0;\n\n        int select_result = select(sockFD + 1, nullptr, &write_fds, nullptr, &tv);\n        if (select_result <= 0) {\n            return false;\n        }\n\n        int so_error;\n        socklen_t len = sizeof(so_error);\n        if (getsockopt(sockFD, SOL_SOCKET, SO_ERROR, &so_error, &len) < 0) {\n            return false;\n        }\n\n        if (so_error != 0) {\n            return false;\n        }\n\n        SetNonBlock(sockFD, false);\n        return true;\n    }\n};\n```",
      "```cpp\n#include <string>\n#include <chrono>\n#include <cstring>\n#include <cerrno>\n#include <unistd.h>\n#include <fcntl.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <netdb.h>\n#include <stdexcept>\n\n#if defined(_WIN32)\n#include <winsock2.h>\n#include <ws2tcpip.h>\n#pragma comment(lib, \"ws2_32.lib\")\n#define SHUT_RDWR SD_BOTH\n#define SocketHolder SOCKET\n#define INVALID_SOCKET_FD INVALID_SOCKET\n#else\n#define SocketHolder int\n#define INVALID_SOCKET_FD -1\n#endif\n\nclass TCPClient {\npublic:\n    TCPClient(const std::string& address, u16 port) : address(address), port(port), main_socket(INVALID_SOCKET_FD), connected(false) {}\n\n    ~TCPClient() {\n        Disconnect();\n    }\n\n    bool Connect() {\n        struct addrinfo hints, *res;\n        memset(&hints, 0, sizeof(hints));\n        hints.ai_family = AF_UNSPEC;\n        hints.ai_socktype = SOCK_STREAM;\n\n        if (getaddrinfo(address.c_str(), std::to_string(port).c_str(), &hints, &res) != 0) {\n            return false;\n        }\n\n        for (struct addrinfo* p = res; p != nullptr; p = p->ai_next) {\n            main_socket = socket(p->ai_family, p->ai_socktype, p->ai_protocol);\n            if (main_socket == INVALID_SOCKET_FD) {\n                continue;\n            }\n\n            if (ConnectWithTimeout(main_socket, p->ai_addr, p->ai_addrlen, 5)) {\n                connected = true;\n                freeaddrinfo(res);\n                return true;\n            }\n\n            Disconnect();\n        }\n\n        freeaddrinfo(res);\n        return false;\n    }\n\n    bool Read(void* buffer, size_t size, const std::chrono::nanoseconds& timeout) {\n        if (!connected || main_socket == INVALID_SOCKET_FD) {\n            return false;\n        }\n\n        SetNonBlock(main_socket, true);\n\n        fd_set read_fds;\n        FD_ZERO(&read_fds);\n        FD_SET(main_socket, &read_fds);\n\n        timeval tv;\n        tv.tv_sec = static_cast<long>(timeout.count() / 1e9);\n        tv.tv_usec = static_cast<long>((timeout.count() % 1e9) / 1e3);\n\n        int ready = select(static_cast<int>(main_socket + 1), &read_fds, nullptr, nullptr, &tv);\n        if (ready <= 0) {\n            return false;\n        }\n\n        ssize_t bytes_read = recv(main_socket, reinterpret_cast<char*>(buffer), size, 0);\n        if (bytes_read <= 0) {\n            return false;\n        }\n\n        SetNonBlock(main_socket, false);\n        return static_cast<size_t>(bytes_read) == size;\n    }\n\n    bool Write(const void* buffer, size_t size, const std::chrono::nanoseconds& timeout) {\n        if (!connected || main_socket == INVALID_SOCKET_FD) {\n            return false;\n        }\n\n        SetNonBlock(main_socket, true);\n\n        fd_set write_fds;\n        FD_ZERO(&write_fds);\n        FD_SET(main_socket, &write_fds);\n\n        timeval tv;\n        tv.tv_sec = static_cast<long>(timeout.count() / 1e9);\n        tv.tv_usec = static_cast<long>((timeout.count() % 1e9) / 1e3);\n\n        int ready = select(static_cast<int>(main_socket + 1), nullptr, &write_fds, nullptr, &tv);\n        if (ready <= 0) {\n            return false;\n        }\n\n        ssize_t bytes_written = send(main_socket, reinterpret_cast<const char*>(buffer), size, 0);\n        if (bytes_written <= 0) {\n            return false;\n        }\n\n        SetNonBlock(main_socket, false);\n        return static_cast<size_t>(bytes_written) == size;\n    }\n\n    void Disconnect() {\n        if (connected && main_socket != INVALID_SOCKET_FD) {\n#if defined(_WIN32)\n            closesocket(main_socket);\n#else\n            close(main_socket);\n#endif\n            main_socket = INVALID_SOCKET_FD;\n            connected = false;\n        }\n    }\n\nprivate:\n    std::string address;\n    u16 port;\n    SocketHolder main_socket;\n    bool connected;\n\n    bool SetNonBlock(SocketHolder sockFD, bool nonBlocking) {\n#if defined(_WIN32)\n        u_long mode = nonBlocking ? 1 : 0;\n        return ioctlsocket(sockFD, FIONBIO, &mode) == 0;\n#else\n        int flags = fcntl(sockFD, F_GETFL, 0);\n        if (flags == -1) {\n            return false;\n        }\n\n        if (nonBlocking) {\n            flags |= O_NONBLOCK;\n        } else {\n            flags &= ~O_NONBLOCK;\n        }\n\n        return fcntl(sockFD, F_SETFL, flags) != -1;\n#endif\n    }\n\n    bool ConnectWithTimeout(SocketHolder sockFD, void* server_addr, size_t server_addr_len, int timeout_seconds) {\n        if (connect(sockFD, reinterpret_cast<struct sockaddr*>(server_addr), static_cast<int>(server_addr_len)) == 0) {\n            return true;\n        }\n\n#if defined(_WIN32)\n        if (WSAGetLastError() != WSAEWOULDBLOCK) {\n            closesocket(sockFD);\n            return false;\n        }\n#else\n        if (errno != EINPROGRESS) {\n            close(sockFD);\n            return false;\n        }\n#endif\n\n        fd_set write_fds;\n        FD_ZERO(&write_fds);\n        FD_SET(sockFD, &write_fds);\n\n        timeval tv;\n        tv.tv_sec = timeout_seconds;\n        tv.tv_usec = 0;\n\n        int ready = select(static_cast<int>(sockFD + 1), nullptr, &write_fds, nullptr, &tv);\n        if (ready <= 0) {\n            closesocket(sockFD);\n            return false;\n        }\n\n        int so_error;\n        socklen_t len = sizeof(so_error);\n        getsockopt(sockFD, SOL_SOCKET, SO_ERROR, reinterpret_cast<char*>(&so_error), &len);\n        if (so_error != 0) {\n            closesocket(sockFD);\n            return false;\n        }\n\n        return true;\n    }\n};\n```",
      "```cpp\n#include <string>\n#include <chrono>\n#include <cstring>\n#include <cerrno>\n#include <unistd.h>\n#include <fcntl.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <netdb.h>\n#include <stdexcept>\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <ws2tcpip.h>\n#pragma comment(lib, \"ws2_32.lib\")\n#else\n#include <sys/select.h>\n#endif\n\nusing SocketHolder = int;\nusing u16 = unsigned short;\n\nclass TCPClient {\npublic:\n    TCPClient(const std::string& address, u16 port)\n        : address(address), port(port), main_socket(-1), connected(false) {}\n\n    ~TCPClient() {\n        Disconnect();\n    }\n\n    bool Connect() {\n        struct addrinfo hints, *res;\n        memset(&hints, 0, sizeof(hints));\n        hints.ai_family = AF_UNSPEC;\n        hints.ai_socktype = SOCK_STREAM;\n\n        if (getaddrinfo(address.c_str(), std::to_string(port).c_str(), &hints, &res) != 0)\n            return false;\n\n        main_socket = socket(res->ai_family, res->ai_socktype, res->ai_protocol);\n        if (main_socket == -1) {\n            freeaddrinfo(res);\n            return false;\n        }\n\n        if (!ConnectWithTimeout(main_socket, res->ai_addr, res->ai_addrlen, 5)) {\n            Disconnect();\n            freeaddrinfo(res);\n            return false;\n        }\n\n        connected = true;\n        freeaddrinfo(res);\n        return true;\n    }\n\n    bool Read(void* buffer, size_t size, const std::chrono::nanoseconds& timeout) {\n        if (!connected || !buffer || size == 0)\n            return false;\n\n        fd_set read_fds;\n        FD_ZERO(&read_fds);\n        FD_SET(main_socket, &read_fds);\n\n        timeval tv;\n        tv.tv_sec = static_cast<long>(timeout.count() / 1e9);\n        tv.tv_usec = static_cast<long>((timeout.count() % 1e9) / 1e3);\n\n        if (select(main_socket + 1, &read_fds, nullptr, nullptr, &tv) <= 0)\n            return false;\n\n        ssize_t total_read = 0;\n        while (total_read < static_cast<ssize_t>(size)) {\n            ssize_t bytes_read = recv(main_socket, static_cast<char*>(buffer) + total_read, size - total_read, 0);\n            if (bytes_read <= 0) {\n                if (errno == EAGAIN || errno == EWOULDBLOCK)\n                    continue;\n                return false;\n            }\n            total_read += bytes_read;\n        }\n\n        return true;\n    }\n\n    bool Write(const void* buffer, size_t size, const std::chrono::nanoseconds& timeout) {\n        if (!connected || !buffer || size == 0)\n            return false;\n\n        fd_set write_fds;\n        FD_ZERO(&write_fds);\n        FD_SET(main_socket, &write_fds);\n\n        timeval tv;\n        tv.tv_sec = static_cast<long>(timeout.count() / 1e9);\n        tv.tv_usec = static_cast<long>((timeout.count() % 1e9) / 1e3);\n\n        if (select(main_socket + 1, nullptr, &write_fds, nullptr, &tv) <= 0)\n            return false;\n\n        ssize_t total_written = 0;\n        while (total_written < static_cast<ssize_t>(size)) {\n            ssize_t bytes_written = send(main_socket, static_cast<const char*>(buffer) + total_written, size - total_written, 0);\n            if (bytes_written <= 0) {\n                if (errno == EAGAIN || errno == EWOULDBLOCK)\n                    continue;\n                return false;\n            }\n            total_written += bytes_written;\n        }\n\n        return true;\n    }\n\n    void Disconnect() {\n        if (connected && main_socket != -1) {\n            shutdown(main_socket, SHUT_RDWR);\n            close(main_socket);\n            main_socket = -1;\n        }\n        connected = false;\n    }\n\nprivate:\n    std::string address;\n    u16 port;\n    SocketHolder main_socket;\n    bool connected;\n\n    bool SetNonBlock(SocketHolder sockFD, bool nonBlocking) {\n        int flags = fcntl(sockFD, F_GETFL, 0);\n        if (flags == -1)\n            return false;\n\n        if (nonBlocking)\n            flags |= O_NONBLOCK;\n        else\n            flags &= ~O_NONBLOCK;\n\n        if (fcntl(sockFD, F_SETFL, flags) == -1)\n            return false;\n\n        return true;\n    }\n\n    bool ConnectWithTimeout(SocketHolder sockFD, void* server_addr, size_t server_addr_len, int timeout_seconds) {\n        if (!SetNonBlock(sockFD, true))\n            return false;\n\n        if (connect(sockFD, reinterpret_cast<struct sockaddr*>(server_addr), server_addr_len) < 0) {\n            if (errno != EINPROGRESS)\n                return false;\n        }\n\n        fd_set write_fds;\n        FD_ZERO(&write_fds);\n        FD_SET(sockFD, &write_fds);\n\n        timeval tv;\n        tv.tv_sec = timeout_seconds;\n        tv.tv_usec = 0;\n\n        int result = select(sockFD + 1, nullptr, &write_fds, nullptr, &tv);\n        if (result <= 0)\n            return false;\n\n        int so_error;\n        socklen_t len = sizeof(so_error);\n        if (getsockopt(sockFD, SOL_SOCKET, SO_ERROR, &so_error, &len) < 0)\n            return false;\n\n        if (so_error != 0)\n            return false;\n\n        SetNonBlock(sockFD, false);\n        return true;\n    }\n};\n```",
      "```cpp\n#include <string>\n#include <chrono>\n#include <cstring>\n#include <cerrno>\n#include <unistd.h>\n#include <fcntl.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <netdb.h>\n#include <stdexcept>\n\n#if defined(_WIN32)\n#include <winsock2.h>\n#include <ws2tcpip.h>\n#pragma comment(lib, \"ws2_32.lib\")\n#else\n#include <sys/select.h>\n#endif\n\nusing SocketHolder = int;\n\nclass TCPClient {\npublic:\n    TCPClient(const std::string& address, u16 port) : address(address), port(port), main_socket(-1), connected(false) {}\n\n    ~TCPClient() {\n        Disconnect();\n    }\n\n    bool Connect() {\n        struct addrinfo hints, *res;\n        memset(&hints, 0, sizeof(hints));\n        hints.ai_family = AF_UNSPEC;\n        hints.ai_socktype = SOCK_STREAM;\n\n#if defined(_WIN32)\n        WSADATA wsaData;\n        if (WSAStartup(MAKEWORD(2, 2), &wsaData) != 0) {\n            return false;\n        }\n#endif\n\n        if (getaddrinfo(address.c_str(), std::to_string(port).c_str(), &hints, &res) != 0) {\n            return false;\n        }\n\n        main_socket = socket(res->ai_family, res->ai_socktype, res->ai_protocol);\n        if (main_socket == -1) {\n            freeaddrinfo(res);\n            return false;\n        }\n\n        if (!ConnectWithTimeout(main_socket, res->ai_addr, res->ai_addrlen, 5)) {\n            Disconnect();\n            freeaddrinfo(res);\n            return false;\n        }\n\n        connected = true;\n        freeaddrinfo(res);\n        return true;\n    }\n\n    bool Read(void* buffer, size_t size, const std::chrono::nanoseconds& timeout) {\n        if (!connected || !buffer || size == 0) {\n            return false;\n        }\n\n        fd_set read_fds;\n        FD_ZERO(&read_fds);\n        FD_SET(main_socket, &read_fds);\n\n        timeval tv;\n        auto duration = std::chrono::duration_cast<std::chrono::microseconds>(timeout);\n        tv.tv_sec = static_cast<long>(duration.count() / 1000000);\n        tv.tv_usec = static_cast<decltype(tv.tv_usec)>(duration.count() % 1000000);\n\n        int select_result = select(main_socket + 1, &read_fds, nullptr, nullptr, &tv);\n        if (select_result <= 0) {\n            return false;\n        }\n\n        ssize_t bytes_read = recv(main_socket, reinterpret_cast<char*>(buffer), size, 0);\n        if (bytes_read <= 0) {\n            return false;\n        }\n\n        return static_cast<size_t>(bytes_read) == size;\n    }\n\n    bool Write(const void* buffer, size_t size, const std::chrono::nanoseconds& timeout) {\n        if (!connected || !buffer || size == 0) {\n            return false;\n        }\n\n        fd_set write_fds;\n        FD_ZERO(&write_fds);\n        FD_SET(main_socket, &write_fds);\n\n        timeval tv;\n        auto duration = std::chrono::duration_cast<std::chrono::microseconds>(timeout);\n        tv.tv_sec = static_cast<long>(duration.count() / 1000000);\n        tv.tv_usec = static_cast<decltype(tv.tv_usec)>(duration.count() % 1000000);\n\n        int select_result = select(main_socket + 1, nullptr, &write_fds, nullptr, &tv);\n        if (select_result <= 0) {\n            return false;\n        }\n\n        ssize_t bytes_written = send(main_socket, reinterpret_cast<const char*>(buffer), size, 0);\n        if (bytes_written <= 0) {\n            return false;\n        }\n\n        return static_cast<size_t>(bytes_written) == size;\n    }\n\n    void Disconnect() {\n        if (connected && main_socket != -1) {\n#if defined(_WIN32)\n            closesocket(main_socket);\n#else\n            close(main_socket);\n#endif\n            main_socket = -1;\n            connected = false;\n        }\n#if defined(_WIN32)\n        WSACleanup();\n#endif\n    }\n\nprivate:\n    std::string address;\n    u16 port;\n    SocketHolder main_socket;\n    bool connected;\n\n    bool SetNonBlock(SocketHolder sockFD, bool nonBlocking) {\n#if defined(_WIN32)\n        u_long mode = nonBlocking ? 1 : 0;\n        return ioctlsocket(sockFD, FIONBIO, &mode) == 0;\n#else\n        int flags = fcntl(sockFD, F_GETFL, 0);\n        if (flags == -1) {\n            return false;\n        }\n        if (nonBlocking) {\n            flags |= O_NONBLOCK;\n        } else {\n            flags &= ~O_NONBLOCK;\n        }\n        return fcntl(sockFD, F_SETFL, flags) == 0;\n#endif\n    }\n\n    bool ConnectWithTimeout(SocketHolder sockFD, void* server_addr, size_t server_addr_len, int timeout_seconds) {\n        if (!SetNonBlock(sockFD, true)) {\n            return false;\n        }\n\n        if (connect(sockFD, reinterpret_cast<struct sockaddr*>(server_addr), static_cast<int>(server_addr_len)) < 0) {\n#if defined(_WIN32)\n            if (WSAGetLastError() != WSAEWOULDBLOCK) {\n                return false;\n            }\n#else\n            if (errno != EINPROGRESS) {\n                return false;\n            }\n#endif\n        }\n\n        fd_set write_fds;\n        FD_ZERO(&write_fds);\n        FD_SET(sockFD, &write_fds);\n\n        timeval tv;\n        tv.tv_sec = timeout_seconds;\n        tv.tv_usec = 0;\n\n        int select_result = select(sockFD + 1, nullptr, &write_fds, nullptr, &tv);\n        if (select_result <= 0) {\n            return false;\n        }\n\n        if (!FD_ISSET(sockFD, &write_fds)) {\n            return false;\n        }\n\n        int so_error;\n        socklen_t len = sizeof(so_error);\n        if (getsockopt(sockFD, SOL_SOCKET, SO_ERROR, &so_error, &len) < 0) {\n            return false;\n        }\n\n        if (so_error != 0) {\n            return false;\n        }\n\n        SetNonBlock(sockFD, false);\n        return true;\n    }\n};\n```",
      "```cpp\n#include <string>\n#include <chrono>\n#include <cstring>\n#include <cerrno>\n#include <unistd.h>\n#include <fcntl.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <netdb.h>\n\n#if defined(_WIN32)\n#include <winsock2.h>\n#include <ws2tcpip.h>\n#pragma comment(lib, \"ws2_32.lib\")\n#define SocketHolder SOCKET\n#define INVALID_SOCKET_FD INVALID_SOCKET\n#else\n#include <sys/select.h>\n#define SocketHolder int\n#define INVALID_SOCKET_FD -1\n#endif\n\nclass TCPClient {\npublic:\n    TCPClient(const std::string& address, u16 port) : address(address), port(port), main_socket(INVALID_SOCKET_FD), connected(false) {}\n\n    ~TCPClient() {\n        Disconnect();\n    }\n\n    bool Connect() {\n        struct addrinfo hints, *res;\n        memset(&hints, 0, sizeof(hints));\n        hints.ai_family = AF_UNSPEC;\n        hints.ai_socktype = SOCK_STREAM;\n\n        if (getaddrinfo(address.c_str(), std::to_string(port).c_str(), &hints, &res) != 0)\n            return false;\n\n        for (struct addrinfo* p = res; p != nullptr; p = p->ai_next) {\n            main_socket = socket(p->ai_family, p->ai_socktype, p->ai_protocol);\n            if (main_socket == INVALID_SOCKET_FD)\n                continue;\n\n            if (ConnectWithTimeout(main_socket, p->ai_addr, p->ai_addrlen, 5)) {\n                connected = true;\n                freeaddrinfo(res);\n                return true;\n            }\n\n            close(main_socket);\n        }\n\n        freeaddrinfo(res);\n        return false;\n    }\n\n    bool Read(void* buffer, size_t size, const std::chrono::nanoseconds& timeout) {\n        if (!connected || main_socket == INVALID_SOCKET_FD)\n            return false;\n\n        fd_set read_fds;\n        FD_ZERO(&read_fds);\n        FD_SET(main_socket, &read_fds);\n\n        timeval tv;\n        tv.tv_sec = static_cast<long>(timeout.count() / 1e9);\n        tv.tv_usec = static_cast<long>((timeout.count() % 1e9) / 1e3);\n\n        if (select(static_cast<int>(main_socket + 1), &read_fds, nullptr, nullptr, &tv) <= 0)\n            return false;\n\n        ssize_t total_read = 0;\n        while (total_read < static_cast<ssize_t>(size)) {\n            ssize_t bytes_read = recv(main_socket, reinterpret_cast<char*>(buffer) + total_read, size - total_read, 0);\n            if (bytes_read <= 0) {\n                if (errno == EAGAIN || errno == EWOULDBLOCK)\n                    continue;\n                return false;\n            }\n            total_read += bytes_read;\n        }\n\n        return true;\n    }\n\n    bool Write(const void* buffer, size_t size, const std::chrono::nanoseconds& timeout) {\n        if (!connected || main_socket == INVALID_SOCKET_FD)\n            return false;\n\n        fd_set write_fds;\n        FD_ZERO(&write_fds);\n        FD_SET(main_socket, &write_fds);\n\n        timeval tv;\n        tv.tv_sec = static_cast<long>(timeout.count() / 1e9);\n        tv.tv_usec = static_cast<long>((timeout.count() % 1e9) / 1e3);\n\n        if (select(static_cast<int>(main_socket + 1), nullptr, &write_fds, nullptr, &tv) <= 0)\n            return false;\n\n        ssize_t total_written = 0;\n        while (total_written < static_cast<ssize_t>(size)) {\n            ssize_t bytes_written = send(main_socket, reinterpret_cast<const char*>(buffer) + total_written, size - total_written, 0);\n            if (bytes_written <= 0) {\n                if (errno == EAGAIN || errno == EWOULDBLOCK)\n                    continue;\n                return false;\n            }\n            total_written += bytes_written;\n        }\n\n        return true;\n    }\n\n    void Disconnect() {\n        if (connected && main_socket != INVALID_SOCKET_FD) {\n#if defined(_WIN32)\n            closesocket(main_socket);\n#else\n            close(main_socket);\n#endif\n            main_socket = INVALID_SOCKET_FD;\n            connected = false;\n        }\n    }\n\nprivate:\n    std::string address;\n    u16 port;\n    SocketHolder main_socket;\n    bool connected;\n\n    bool SetNonBlock(SocketHolder sockFD, bool nonBlocking) {\n#if defined(_WIN32)\n        u_long mode = nonBlocking ? 1 : 0;\n        return ioctlsocket(sockFD, FIONBIO, &mode) == 0;\n#else\n        int flags = fcntl(sockFD, F_GETFL, 0);\n        if (flags == -1)\n            return false;\n\n        if (nonBlocking)\n            flags |= O_NONBLOCK;\n        else\n            flags &= ~O_NONBLOCK;\n\n        return fcntl(sockFD, F_SETFL, flags) != -1;\n#endif\n    }\n\n    bool ConnectWithTimeout(SocketHolder sockFD, void* server_addr, size_t server_addr_len, int timeout_seconds) {\n        if (!SetNonBlock(sockFD, true))\n            return false;\n\n        if (connect(sockFD, reinterpret_cast<sockaddr*>(server_addr), static_cast<int>(server_addr_len)) < 0) {\n            if (errno != EINPROGRESS)\n                return false;\n        }\n\n        fd_set write_fds;\n        FD_ZERO(&write_fds);\n        FD_SET(sockFD, &write_fds);\n\n        timeval tv;\n        tv.tv_sec = timeout_seconds;\n        tv.tv_usec = 0;\n\n        int result = select(static_cast<int>(sockFD + 1), nullptr, &write_fds, nullptr, &tv);\n        if (result <= 0)\n            return false;\n\n        int so_error;\n        socklen_t len = sizeof(so_error);\n        if (getsockopt(sockFD, SOL_SOCKET, SO_ERROR, &so_error, &len) < 0)\n            return false;\n\n        if (so_error != 0)\n            return false;\n\n        SetNonBlock(sockFD, false);\n        return true;\n    }\n};\n```"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 2,
    "Instruction": "Task Description: Create a C++ class that implements HTTP client functionality using libcurl for making HTTP requests and handling responses, including JSON parsing capabilities.\n\nClass Description: The CurlHttpClient class provides methods for performing HTTP GET requests and downloading web pages, with support for custom headers and request bodies. It includes JSON response handling and memory management for received data.\n\nAttributes:\nMemoryStruct: [struct] - A helper structure for storing received data in memory during curl operations\n  - memory: [char*] - Pointer to the allocated memory buffer\n  - size: [size_t] - Size of the allocated memory buffer\n\nMethods:\nWriteMemoryCallback: [static](void* contents, size_t size, size_t nmemb, void* userp) -> size_t - A static callback function for libcurl to write received data into memory\n  - contents: [void*] - Pointer to the received data\n  - size: [size_t] - Size of each data element\n  - nmemb: [size_t] - Number of data elements\n  - userp: [void*] - Pointer to user-provided memory structure\n  - Returns: The number of bytes actually written\n\ndownloadPage: [](const std::string& url, std::string& res, const std::vector<std::string>& headers, const std::string& body) -> long - Downloads a web page and returns the HTTP status code\n  - url: [const std::string&] - The URL to request\n  - res: [std::string&] - Reference to store the response body\n  - headers: [const std::vector<std::string>&] - Vector of header strings to include in the request\n  - body: [const std::string&] - Request body content\n  - Returns: HTTP status code of the response\n\ngetRequest: [](const std::string& url, json& res, const std::vector<std::string>& headers, const std::string& body) -> long - Performs a GET request and parses the JSON response\n  - url: [const std::string&] - The URL to request\n  - res: [json&] - Reference to store the parsed JSON response\n  - headers: [const std::vector<std::string>&] - Vector of header strings to include in the request\n  - body: [const std::string&] - Request body content\n  - Returns: HTTP status code of the response",
    "Canonical_solution": "#include <curl/curl.h>\n#include <string>\n#include <vector>\n#include <nlohmann/json.hpp>\n\nusing json = nlohmann::ordered_json;\n\nclass CurlHttpClient {\npublic:\n    struct MemoryStruct {\n        char* memory;\n        size_t size;\n    };\n\n    static size_t WriteMemoryCallback(void* contents, size_t size, size_t nmemb, void* userp) {\n        size_t realsize = size * nmemb;\n        MemoryStruct* mem = (MemoryStruct*)userp;\n\n        char* ptr = static_cast<char*>(realloc(mem->memory, mem->size + realsize + 1));\n        if (ptr == NULL) {\n            return 0;\n        }\n\n        mem->memory = ptr;\n        memcpy(&(mem->memory[mem->size]), contents, realsize);\n        mem->size += realsize;\n        mem->memory[mem->size] = 0;\n\n        return realsize;\n    }\n\n    long downloadPage(const std::string& url, std::string& res, const std::vector<std::string>& headers, const std::string& body) {\n        CURL* curl_handle;\n        MemoryStruct chunk;\n        struct curl_slist* list = NULL;\n        long status_code;\n\n        chunk.memory = static_cast<char*>(malloc(1));\n        chunk.size = 0;\n\n        curl_global_init(CURL_GLOBAL_ALL);\n        curl_handle = curl_easy_init();\n        curl_easy_setopt(curl_handle, CURLOPT_URL, url.c_str());\n        if (!headers.empty()) {\n            for (auto& h : headers) {\n                list = curl_slist_append(list, h.c_str());\n            }\n            curl_easy_setopt(curl_handle, CURLOPT_HTTPHEADER, list);\n        }\n        if (body != \"\") {\n            curl_easy_setopt(curl_handle, CURLOPT_POSTFIELDS, body.c_str());\n        }\n\n        curl_easy_setopt(curl_handle, CURLOPT_WRITEFUNCTION, WriteMemoryCallback);\n        curl_easy_setopt(curl_handle, CURLOPT_WRITEDATA, (void*)&chunk);\n        curl_easy_setopt(curl_handle, CURLOPT_USERAGENT, \"HamletDuFromage\");\n\n        curl_easy_setopt(curl_handle, CURLOPT_SSL_VERIFYPEER, 0L);\n        curl_easy_perform(curl_handle);\n        curl_easy_getinfo(curl_handle, CURLINFO_RESPONSE_CODE, &status_code);\n        curl_easy_cleanup(curl_handle);\n        res = std::string(chunk.memory);\n        free(chunk.memory);\n\n        curl_global_cleanup();\n        return status_code;\n    }\n\n    long getRequest(const std::string& url, json& res, const std::vector<std::string>& headers, const std::string& body) {\n        std::string request;\n        long status_code = downloadPage(url, request, headers, body);\n\n        if (json::accept(request))\n            res = json::parse(request);\n        else\n            res = json::object();\n\n        return status_code;\n    }\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 146,
    "matched_results": [
      "```cpp\n#include <iostream>\n#include <string>\n#include <vector>\n#include <curl/curl.h>\n#include <nlohmann/json.hpp>\n\nusing json = nlohmann::json;\n\nstruct MemoryStruct {\n    char* memory;\n    size_t size;\n};\n\nclass CurlHttpClient {\npublic:\n    static size_t WriteMemoryCallback(void* contents, size_t size, size_t nmemb, void* userp) {\n        size_t realsize = size * nmemb;\n        struct MemoryStruct* mem = (struct MemoryStruct*)userp;\n\n        char* ptr = (char*)realloc(mem->memory, mem->size + realsize + 1);\n        if (!ptr) {\n            std::cerr << \"Not enough memory (realloc returned NULL)\" << std::endl;\n            return 0;\n        }\n\n        mem->memory = ptr;\n        memcpy(&(mem->memory[mem->size]), contents, realsize);\n        mem->size += realsize;\n        mem->memory[mem->size] = 0;\n\n        return realsize;\n    }\n\n    long downloadPage(const std::string& url, std::string& res, const std::vector<std::string>& headers, const std::string& body) {\n        CURL* curl = curl_easy_init();\n        long http_code = 0;\n\n        if (curl) {\n            struct MemoryStruct chunk;\n            chunk.memory = (char*)malloc(1);\n            chunk.size = 0;\n\n            curl_easy_setopt(curl, CURLOPT_URL, url.c_str());\n            curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, WriteMemoryCallback);\n            curl_easy_setopt(curl, CURLOPT_WRITEDATA, (void*)&chunk);\n\n            if (!headers.empty()) {\n                struct curl_slist* header_list = nullptr;\n                for (const auto& header : headers) {\n                    header_list = curl_slist_append(header_list, header.c_str());\n                }\n                curl_easy_setopt(curl, CURLOPT_HTTPHEADER, header_list);\n            }\n\n            if (!body.empty()) {\n                curl_easy_setopt(curl, CURLOPT_POST, 1L);\n                curl_easy_setopt(curl, CURLOPT_POSTFIELDS, body.c_str());\n            }\n\n            CURLcode resCode = curl_easy_perform(curl);\n            if (resCode == CURLE_OK) {\n                curl_easy_getinfo(curl, CURLINFO_RESPONSE_CODE, &http_code);\n                res = chunk.memory;\n            }\n\n            free(chunk.memory);\n            curl_easy_cleanup(curl);\n\n            if (!headers.empty()) {\n                curl_slist_free_all((struct curl_slist*)curl_easy_getinfo(curl, CURLINFO_HEADER_OUT));\n            }\n        }\n\n        return http_code;\n    }\n\n    long getRequest(const std::string& url, json& res, const std::vector<std::string>& headers, const std::string& body) {\n        std::string response;\n        long status = downloadPage(url, response, headers, body);\n        if (status == 200 && !response.empty()) {\n            try {\n                res = json::parse(response);\n            } catch (const json::parse_error& e) {\n                std::cerr << \"JSON parse error: \" << e.what() << std::endl;\n            }\n        }\n        return status;\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <vector>\n#include <curl/curl.h>\n#include <nlohmann/json.hpp>\n\nusing json = nlohmann::json;\n\nstruct MemoryStruct {\n    char* memory;\n    size_t size;\n};\n\nclass CurlHttpClient {\npublic:\n    static size_t WriteMemoryCallback(void* contents, size_t size, size_t nmemb, void* userp) {\n        size_t realsize = size * nmemb;\n        struct MemoryStruct* mem = (struct MemoryStruct*)userp;\n\n        char* ptr = (char*)realloc(mem->memory, mem->size + realsize + 1);\n        if (!ptr) {\n            std::cerr << \"Not enough memory (realloc returned NULL)\" << std::endl;\n            return 0;\n        }\n\n        mem->memory = ptr;\n        memcpy(&(mem->memory[mem->size]), contents, realsize);\n        mem->size += realsize;\n        mem->memory[mem->size] = 0;\n\n        return realsize;\n    }\n\n    long downloadPage(const std::string& url, std::string& res, const std::vector<std::string>& headers, const std::string& body) {\n        CURL* curl;\n        CURLcode code;\n        struct MemoryStruct chunk;\n        chunk.memory = (char*)malloc(1);\n        chunk.size = 0;\n\n        curl_global_init(CURL_GLOBAL_DEFAULT);\n        curl = curl_easy_init();\n\n        if (curl) {\n            curl_easy_setopt(curl, CURLOPT_URL, url.c_str());\n            curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, WriteMemoryCallback);\n            curl_easy_setopt(curl, CURLOPT_WRITEDATA, (void*)&chunk);\n            curl_easy_setopt(curl, CURLOPT_USERAGENT, \"libcurl-agent/1.0\");\n\n            if (!headers.empty()) {\n                struct curl_slist* headerList = nullptr;\n                for (const auto& h : headers) {\n                    headerList = curl_slist_append(headerList, h.c_str());\n                }\n                curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headerList);\n            }\n\n            if (!body.empty()) {\n                curl_easy_setopt(curl, CURLOPT_POSTFIELDS, body.c_str());\n            }\n\n            code = curl_easy_perform(curl);\n\n            if (code != CURLE_OK) {\n                std::cerr << \"curl_easy_perform() failed: \" << curl_easy_strerror(code) << std::endl;\n            } else {\n                long http_code = 0;\n                curl_easy_getinfo(curl, CURLINFO_RESPONSE_CODE, &http_code);\n                res = chunk.memory ? chunk.memory : \"\";\n            }\n\n            if (chunk.memory) {\n                free(chunk.memory);\n            }\n\n            if (!headers.empty()) {\n                curl_slist_free_all((struct curl_slist*)curl_easy_getinfo(curl, CURLINFO_HEADER_OUT));\n            }\n\n            curl_easy_cleanup(curl);\n        }\n\n        curl_global_cleanup();\n        return code == CURLE_OK ? 200 : -1;\n    }\n\n    long getRequest(const std::string& url, json& res, const std::vector<std::string>& headers, const std::string& body) {\n        std::string responseStr;\n        long status = downloadPage(url, responseStr, headers, body);\n\n        if (status == 200) {\n            try {\n                res = json::parse(responseStr);\n            } catch (const json::parse_error& e) {\n                std::cerr << \"JSON parsing error: \" << e.what() << std::endl;\n                res.clear();\n            }\n        } else {\n            res.clear();\n        }\n\n        return status;\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <vector>\n#include <curl/curl.h>\n#include <nlohmann/json.hpp>\n\nusing json = nlohmann::json;\n\nstruct MemoryStruct {\n    char* memory;\n    size_t size;\n};\n\nclass CurlHttpClient {\npublic:\n    static size_t WriteMemoryCallback(void* contents, size_t size, size_t nmemb, void* userp) {\n        size_t realsize = size * nmemb;\n        struct MemoryStruct* mem = (struct MemoryStruct*)userp;\n\n        char* ptr = (char*)realloc(mem->memory, mem->size + realsize + 1);\n        if (!ptr) {\n            return 0;\n        }\n\n        mem->memory = ptr;\n        memcpy(&(mem->memory[mem->size]), contents, realsize);\n        mem->size += realsize;\n        mem->memory[mem->size] = 0;\n\n        return realsize;\n    }\n\n    long downloadPage(const std::string& url, std::string& res, const std::vector<std::string>& headers, const std::string& body) {\n        CURL* curl = curl_easy_init();\n        long http_code = 0;\n\n        if (!curl) {\n            return -1;\n        }\n\n        struct MemoryStruct chunk;\n        chunk.memory = (char*)malloc(1);\n        chunk.size = 0;\n\n        curl_easy_setopt(curl, CURLOPT_URL, url.c_str());\n        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, WriteMemoryCallback);\n        curl_easy_setopt(curl, CURLOPT_WRITEDATA, (void*)&chunk);\n\n        if (!headers.empty()) {\n            struct curl_slist* header_list = nullptr;\n            for (const auto& h : headers) {\n                header_list = curl_slist_append(header_list, h.c_str());\n            }\n            curl_easy_setopt(curl, CURLOPT_HTTPHEADER, header_list);\n        }\n\n        if (!body.empty()) {\n            curl_easy_setopt(curl, CURLOPT_POST, 1L);\n            curl_easy_setopt(curl, CURLOPT_POSTFIELDS, body.c_str());\n        }\n\n        CURLcode resCode = curl_easy_perform(curl);\n        if (resCode == CURLE_OK) {\n            curl_easy_getinfo(curl, CURLINFO_RESPONSE_CODE, &http_code);\n            res = chunk.memory;\n        }\n\n        free(chunk.memory);\n        curl_easy_cleanup(curl);\n\n        return http_code;\n    }\n\n    long getRequest(const std::string& url, json& res, const std::vector<std::string>& headers, const std::string& body) {\n        std::string response;\n        long status = downloadPage(url, response, headers, body);\n\n        if (status != 200 || response.empty()) {\n            return status;\n        }\n\n        try {\n            res = json::parse(response);\n        } catch (...) {\n            return -2; // JSON parsing error\n        }\n\n        return status;\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <vector>\n#include <curl/curl.h>\n#include <nlohmann/json.hpp>\n\nusing json = nlohmann::json;\n\nstruct MemoryStruct {\n    char* memory;\n    size_t size;\n};\n\nclass CurlHttpClient {\npublic:\n    static size_t WriteMemoryCallback(void* contents, size_t size, size_t nmemb, void* userp) {\n        size_t realsize = size * nmemb;\n        struct MemoryStruct* mem = (struct MemoryStruct*)userp;\n\n        char* ptr = (char*)malloc(realsize + mem->size);\n        if (!ptr)\n            return 0;\n\n        memcpy(ptr, mem->memory, mem->size);\n        free(mem->memory);\n        mem->memory = ptr;\n\n        memcpy(&(mem->memory[mem->size]), contents, realsize);\n        mem->size += realsize;\n\n        return realsize;\n    }\n\n    long downloadPage(const std::string& url, std::string& res, const std::vector<std::string>& headers, const std::string& body) {\n        CURL* curl = curl_easy_init();\n        long http_code = 0;\n\n        if (!curl) {\n            return -1;\n        }\n\n        MemoryStruct chunk;\n        chunk.memory = (char*)malloc(1);\n        chunk.size = 0;\n\n        curl_easy_setopt(curl, CURLOPT_URL, url.c_str());\n        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, WriteMemoryCallback);\n        curl_easy_setopt(curl, CURLOPT_WRITEDATA, (void*)&chunk);\n\n        if (!headers.empty()) {\n            struct curl_slist* header_list = nullptr;\n            for (const auto& h : headers) {\n                header_list = curl_slist_append(header_list, h.c_str());\n            }\n            curl_easy_setopt(curl, CURLOPT_HTTPHEADER, header_list);\n        }\n\n        if (!body.empty()) {\n            curl_easy_setopt(curl, CURLOPT_POST, 1L);\n            curl_easy_setopt(curl, CURLOPT_POSTFIELDS, body.c_str());\n        }\n\n        CURLcode res_code = curl_easy_perform(curl);\n        if (res_code == CURLE_OK) {\n            curl_easy_getinfo(curl, CURLINFO_RESPONSE_CODE, &http_code);\n            res.assign(chunk.memory, chunk.size);\n        }\n\n        if (chunk.memory)\n            free(chunk.memory);\n\n        curl_easy_cleanup(curl);\n        return http_code;\n    }\n\n    long getRequest(const std::string& url, json& res, const std::vector<std::string>& headers, const std::string& body) {\n        std::string response_body;\n        long status_code = downloadPage(url, response_body, headers, body);\n\n        if (status_code != 200) {\n            return status_code;\n        }\n\n        try {\n            res = json::parse(response_body);\n        } catch (...) {\n            return -1;\n        }\n\n        return status_code;\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <vector>\n#include <curl/curl.h>\n#include <nlohmann/json.hpp>\n\nusing json = nlohmann::json;\n\nstruct MemoryStruct {\n    char* memory;\n    size_t size;\n};\n\nclass CurlHttpClient {\npublic:\n    static size_t WriteMemoryCallback(void* contents, size_t size, size_t nmemb, void* userp) {\n        size_t realsize = size * nmemb;\n        struct MemoryStruct* mem = (struct MemoryStruct*)userp;\n\n        char* ptr = (char*)realloc(mem->memory, mem->size + realsize + 1);\n        if (!ptr) {\n            return 0;\n        }\n\n        mem->memory = ptr;\n        memcpy(&(mem->memory[mem->size]), contents, realsize);\n        mem->size += realsize;\n        mem->memory[mem->size] = 0;\n\n        return realsize;\n    }\n\n    long downloadPage(const std::string& url, std::string& res, const std::vector<std::string>& headers, const std::string& body) {\n        CURL* curl = curl_easy_init();\n        long http_code = 0;\n\n        if (!curl) {\n            return -1;\n        }\n\n        struct MemoryStruct chunk;\n        chunk.memory = (char*)malloc(1);\n        chunk.size = 0;\n\n        curl_easy_setopt(curl, CURLOPT_URL, url.c_str());\n        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, WriteMemoryCallback);\n        curl_easy_setopt(curl, CURLOPT_WRITEDATA, (void*)&chunk);\n\n        if (!headers.empty()) {\n            struct curl_slist* header_list = nullptr;\n            for (const auto& h : headers) {\n                header_list = curl_slist_append(header_list, h.c_str());\n            }\n            curl_easy_setopt(curl, CURLOPT_HTTPHEADER, header_list);\n        }\n\n        if (!body.empty()) {\n            curl_easy_setopt(curl, CURLOPT_POST, 1L);\n            curl_easy_setopt(curl, CURLOPT_POSTFIELDS, body.c_str());\n        }\n\n        CURLcode resCode = curl_easy_perform(curl);\n        if (resCode == CURLE_OK) {\n            curl_easy_getinfo(curl, CURLINFO_RESPONSE_CODE, &http_code);\n            res = chunk.memory;\n        }\n\n        free(chunk.memory);\n        curl_easy_cleanup(curl);\n\n        return http_code;\n    }\n\n    long getRequest(const std::string& url, json& res, const std::vector<std::string>& headers, const std::string& body) {\n        std::string response;\n        long status = downloadPage(url, response, headers, body);\n        if (status != 200) {\n            return status;\n        }\n\n        try {\n            res = json::parse(response);\n        } catch (const json::parse_error& e) {\n            std::cerr << \"JSON parse error: \" << e.what() << std::endl;\n            return -1;\n        }\n\n        return status;\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <vector>\n#include <curl/curl.h>\n#include <nlohmann/json.hpp>\n\nusing json = nlohmann::json;\n\nstruct MemoryStruct {\n    char* memory;\n    size_t size;\n};\n\nclass CurlHttpClient {\npublic:\n    static size_t WriteMemoryCallback(void* contents, size_t size, size_t nmemb, void* userp) {\n        size_t realsize = size * nmemb;\n        struct MemoryStruct* mem = (struct MemoryStruct*)userp;\n\n        char* ptr = (char*)malloc(realsize + 1);\n        if (!ptr)\n            return 0;\n\n        memcpy(ptr, contents, realsize);\n        ptr[realsize] = '\\0';\n\n        if (mem->memory) {\n            mem->memory = (char*)realloc(mem->memory, mem->size + realsize + 1);\n            if (mem->memory == NULL) {\n                free(ptr);\n                return 0;\n            }\n            strcpy(&(mem->memory[mem->size]), ptr);\n        } else {\n            mem->memory = ptr;\n        }\n\n        mem->size += realsize;\n        mem->memory[mem->size] = '\\0';\n\n        free(ptr);\n        return realsize;\n    }\n\n    long downloadPage(const std::string& url, std::string& res, const std::vector<std::string>& headers, const std::string& body) {\n        CURL* curl;\n        CURLcode code;\n        long http_code = 0;\n\n        curl_global_init(CURL_GLOBAL_DEFAULT);\n        curl = curl_easy_init();\n\n        if (curl) {\n            struct MemoryStruct chunk;\n            chunk.memory = nullptr;\n            chunk.size = 0;\n\n            curl_easy_setopt(curl, CURLOPT_URL, url.c_str());\n            curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, WriteMemoryCallback);\n            curl_easy_setopt(curl, CURLOPT_WRITEDATA, (void*)&chunk);\n\n            if (!headers.empty()) {\n                struct curl_slist* header_list = nullptr;\n                for (const auto& h : headers) {\n                    header_list = curl_slist_append(header_list, h.c_str());\n                }\n                curl_easy_setopt(curl, CURLOPT_HTTPHEADER, header_list);\n            }\n\n            if (!body.empty()) {\n                curl_easy_setopt(curl, CURLOPT_POST, 1L);\n                curl_easy_setopt(curl, CURLOPT_POSTFIELDS, body.c_str());\n            }\n\n            code = curl_easy_perform(curl);\n            if (code != CURLE_OK) {\n                std::cerr << \"curl_easy_perform() failed: \" << curl_easy_strerror(code) << std::endl;\n            } else {\n                curl_easy_getinfo(curl, CURLINFO_RESPONSE_CODE, &http_code);\n                res = chunk.memory ? chunk.memory : \"\";\n            }\n\n            if (chunk.memory) {\n                free(chunk.memory);\n            }\n\n            if (headers.empty() || !header_list) {\n                curl_slist_free_all(header_list);\n            }\n\n            curl_easy_cleanup(curl);\n        }\n\n        curl_global_cleanup();\n        return http_code;\n    }\n\n    long getRequest(const std::string& url, json& res, const std::vector<std::string>& headers, const std::string& body) {\n        std::string response_body;\n        long status_code = downloadPage(url, response_body, headers, body);\n\n        if (status_code == 200 && !response_body.empty()) {\n            try {\n                res = json::parse(response_body);\n            } catch (const json::parse_error& e) {\n                std::cerr << \"JSON parsing error: \" << e.what() << std::endl;\n            }\n        } else {\n            std::cerr << \"Failed to retrieve valid JSON. Status code: \" << status_code << std::endl;\n        }\n\n        return status_code;\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <vector>\n#include <curl/curl.h>\n#include <nlohmann/json.hpp>\n\nusing json = nlohmann::json;\n\nstruct MemoryStruct {\n    char* memory;\n    size_t size;\n};\n\nclass CurlHttpClient {\npublic:\n    static size_t WriteMemoryCallback(void* contents, size_t size, size_t nmemb, void* userp) {\n        size_t realsize = size * nmemb;\n        struct MemoryStruct* mem = (struct MemoryStruct*)userp;\n\n        char* ptr = (char*)realloc(mem->memory, mem->size + realsize + 1);\n        if (!ptr) {\n            return 0;\n        }\n\n        mem->memory = ptr;\n        memcpy(&(mem->memory[mem->size]), contents, realsize);\n        mem->size += realsize;\n        mem->memory[mem->size] = 0;\n\n        return realsize;\n    }\n\n    long downloadPage(const std::string& url, std::string& res, const std::vector<std::string>& headers, const std::string& body) {\n        CURL* curl = curl_easy_init();\n        long http_code = 0;\n\n        if (!curl) {\n            return -1;\n        }\n\n        struct MemoryStruct chunk;\n        chunk.memory = (char*)malloc(1);\n        chunk.size = 0;\n\n        curl_easy_setopt(curl, CURLOPT_URL, url.c_str());\n        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, WriteMemoryCallback);\n        curl_easy_setopt(curl, CURLOPT_WRITEDATA, (void*)&chunk);\n\n        if (!headers.empty()) {\n            struct curl_slist* header_list = nullptr;\n            for (const auto& h : headers) {\n                header_list = curl_slist_append(header_list, h.c_str());\n            }\n            curl_easy_setopt(curl, CURLOPT_HTTPHEADER, header_list);\n        }\n\n        if (!body.empty()) {\n            curl_easy_setopt(curl, CURLOPT_POSTFIELDS, body.c_str());\n        }\n\n        CURLcode resCode = curl_easy_perform(curl);\n        if (resCode == CURLE_OK) {\n            curl_easy_getinfo(curl, CURLINFO_RESPONSE_CODE, &http_code);\n            res = chunk.memory;\n        }\n\n        free(chunk.memory);\n        curl_easy_cleanup(curl);\n\n        return http_code;\n    }\n\n    long getRequest(const std::string& url, json& res, const std::vector<std::string>& headers, const std::string& body) {\n        std::string responseStr;\n        long status = downloadPage(url, responseStr, headers, body);\n        if (status != 200) {\n            return status;\n        }\n\n        try {\n            res = json::parse(responseStr);\n        } catch (const json::parse_error& e) {\n            std::cerr << \"JSON parse error: \" << e.what() << std::endl;\n            return -1;\n        }\n\n        return status;\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <vector>\n#include <curl/curl.h>\n#include <nlohmann/json.hpp>\n\nusing json = nlohmann::json;\n\nstruct MemoryStruct {\n    char* memory;\n    size_t size;\n};\n\nclass CurlHttpClient {\npublic:\n    static size_t WriteMemoryCallback(void* contents, size_t size, size_t nmemb, void* userp) {\n        size_t realsize = size * nmemb;\n        struct MemoryStruct* mem = (struct MemoryStruct*)userp;\n\n        char* ptr = (char*)realloc(mem->memory, mem->size + realsize + 1);\n        if (!ptr) {\n            return 0;\n        }\n\n        mem->memory = ptr;\n        memcpy(&(mem->memory[mem->size]), contents, realsize);\n        mem->size += realsize;\n        mem->memory[mem->size] = 0;\n\n        return realsize;\n    }\n\n    long downloadPage(const std::string& url, std::string& res, const std::vector<std::string>& headers, const std::string& body) {\n        CURL* curl = curl_easy_init();\n        long http_code = 0;\n\n        if (curl) {\n            struct MemoryStruct chunk;\n            chunk.memory = (char*)malloc(1);\n            chunk.size = 0;\n\n            curl_easy_setopt(curl, CURLOPT_URL, url.c_str());\n            curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, WriteMemoryCallback);\n            curl_easy_setopt(curl, CURLOPT_WRITEDATA, (void*)&chunk);\n\n            if (!headers.empty()) {\n                struct curl_slist* header_list = nullptr;\n                for (const auto& h : headers) {\n                    header_list = curl_slist_append(header_list, h.c_str());\n                }\n                curl_easy_setopt(curl, CURLOPT_HTTPHEADER, header_list);\n            }\n\n            if (!body.empty()) {\n                curl_easy_setopt(curl, CURLOPT_POST, 1L);\n                curl_easy_setopt(curl, CURLOPT_POSTFIELDS, body.c_str());\n            }\n\n            CURLcode resCurl = curl_easy_perform(curl);\n            if (resCurl == CURLE_OK) {\n                curl_easy_getinfo(curl, CURLINFO_RESPONSE_CODE, &http_code);\n                res = chunk.memory;\n            }\n\n            free(chunk.memory);\n\n            if (!headers.empty()) {\n                curl_slist_free_all((struct curl_slist*)curl_easy_getinfo(curl, CURLINFO_HEADER_OUT));\n            }\n\n            curl_easy_cleanup(curl);\n        }\n\n        return http_code;\n    }\n\n    long getRequest(const std::string& url, json& res, const std::vector<std::string>& headers, const std::string& body) {\n        std::string responseStr;\n        long status = downloadPage(url, responseStr, headers, body);\n\n        if (status == 200) {\n            try {\n                res = json::parse(responseStr);\n            } catch (...) {\n                res.clear();\n            }\n        } else {\n            res.clear();\n        }\n\n        return status;\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <vector>\n#include <curl/curl.h>\n#include <nlohmann/json.hpp>\n\nusing json = nlohmann::json;\n\nstruct MemoryStruct {\n    char* memory;\n    size_t size;\n};\n\nclass CurlHttpClient {\npublic:\n    static size_t WriteMemoryCallback(void* contents, size_t size, size_t nmemb, void* userp) {\n        size_t realsize = size * nmemb;\n        struct MemoryStruct* mem = (struct MemoryStruct*)userp;\n\n        char* ptr = (char*)realloc(mem->memory, mem->size + realsize + 1);\n        if (!ptr) {\n            return 0;\n        }\n\n        mem->memory = ptr;\n        memcpy(&(mem->memory[mem->size]), contents, realsize);\n        mem->size += realsize;\n        mem->memory[mem->size] = 0;\n\n        return realsize;\n    }\n\n    long downloadPage(const std::string& url, std::string& res, const std::vector<std::string>& headers, const std::string& body) {\n        CURL* curl;\n        CURLcode code;\n        long http_code = 0;\n\n        struct MemoryStruct chunk;\n        chunk.memory = (char*)malloc(1);\n        chunk.size = 0;\n\n        curl_global_init(CURL_GLOBAL_DEFAULT);\n        curl = curl_easy_init();\n\n        if (curl) {\n            curl_easy_setopt(curl, CURLOPT_URL, url.c_str());\n            curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, WriteMemoryCallback);\n            curl_easy_setopt(curl, CURLOPT_WRITEDATA, (void*)&chunk);\n            curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n\n            if (!headers.empty()) {\n                struct curl_slist* header_list = nullptr;\n                for (const auto& h : headers) {\n                    header_list = curl_slist_append(header_list, h.c_str());\n                }\n                curl_easy_setopt(curl, CURLOPT_HTTPHEADER, header_list);\n            }\n\n            if (!body.empty()) {\n                curl_easy_setopt(curl, CURLOPT_POSTFIELDS, body.c_str());\n            }\n\n            code = curl_easy_perform(curl);\n            if (code == CURLE_OK) {\n                curl_easy_getinfo(curl, CURLINFO_RESPONSE_CODE, &http_code);\n                res = chunk.memory ? chunk.memory : \"\";\n            }\n\n            if (chunk.memory) {\n                free(chunk.memory);\n            }\n\n            if (!headers.empty()) {\n                curl_slist_free_all((struct curl_slist*)curl_easy_getinfo(curl, CURLINFO_HEADER_OUT));\n            }\n\n            curl_easy_cleanup(curl);\n        }\n\n        curl_global_cleanup();\n        return http_code;\n    }\n\n    long getRequest(const std::string& url, json& res, const std::vector<std::string>& headers, const std::string& body) {\n        std::string response;\n        long status = downloadPage(url, response, headers, body);\n\n        if (status == 200 && !response.empty()) {\n            try {\n                res = json::parse(response);\n            } catch (...) {\n                res.clear();\n            }\n        } else {\n            res.clear();\n        }\n\n        return status;\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <vector>\n#include <curl/curl.h>\n#include <nlohmann/json.hpp>\n\nusing json = nlohmann::json;\n\nstruct MemoryStruct {\n    char* memory;\n    size_t size;\n};\n\nclass CurlHttpClient {\npublic:\n    static size_t WriteMemoryCallback(void* contents, size_t size, size_t nmemb, void* userp) {\n        size_t realsize = size * nmemb;\n        struct MemoryStruct* mem = (struct MemoryStruct*)userp;\n\n        char* ptr = (char*)malloc(realsize + mem->size);\n        if (!ptr) {\n            return 0;\n        }\n\n        memcpy(ptr, mem->memory, mem->size);\n        free(mem->memory);\n        mem->memory = ptr;\n\n        memcpy(&(mem->memory[mem->size]), contents, realsize);\n        mem->size += realsize;\n\n        return realsize;\n    }\n\n    long downloadPage(const std::string& url, std::string& res, const std::vector<std::string>& headers, const std::string& body) {\n        CURL* curl;\n        CURLcode code;\n        struct MemoryStruct chunk;\n        chunk.memory = (char*)malloc(1);\n        chunk.size = 0;\n\n        curl_global_init(CURL_GLOBAL_DEFAULT);\n        curl = curl_easy_init();\n\n        if (curl) {\n            curl_easy_setopt(curl, CURLOPT_URL, url.c_str());\n            curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, WriteMemoryCallback);\n            curl_easy_setopt(curl, CURLOPT_WRITEDATA, (void*)&chunk);\n            curl_easy_setopt(curl, CURLOPT_USERAGENT, \"libcurl-agent/1.0\");\n\n            if (!headers.empty()) {\n                struct curl_slist* headerList = nullptr;\n                for (const auto& h : headers) {\n                    headerList = curl_slist_append(headerList, h.c_str());\n                }\n                curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headerList);\n            }\n\n            if (!body.empty()) {\n                curl_easy_setopt(curl, CURLOPT_POSTFIELDS, body.c_str());\n            }\n\n            code = curl_easy_perform(curl);\n\n            if (code == CURLE_OK) {\n                long http_code = 0;\n                curl_easy_getinfo(curl, CURLINFO_RESPONSE_CODE, &http_code);\n                res.assign(chunk.memory, chunk.size);\n            }\n\n            if (!headers.empty()) {\n                curl_slist_free_all((struct curl_slist*)curl_easy_getinfo(curl, CURLINFO_HEADER_OUT));\n            }\n\n            curl_easy_cleanup(curl);\n        }\n\n        free(chunk.memory);\n        curl_global_cleanup();\n\n        return code == CURLE_OK ? 200 : -1;\n    }\n\n    long getRequest(const std::string& url, json& res, const std::vector<std::string>& headers, const std::string& body) {\n        std::string responseStr;\n        long status = downloadPage(url, responseStr, headers, body);\n\n        if (status == 200) {\n            try {\n                res = json::parse(responseStr);\n            } catch (...) {\n                res = json();\n            }\n        } else {\n            res = json();\n        }\n\n        return status;\n    }\n};\n```"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 20,
    "Instruction": "Task Description: Implement a TCP client function that establishes a connection to a server, sends data, and reads the server's response in a continuous loop, handling connection errors and reconnection attempts.\n\nFunction Description: The function `readwrite_routine` implements a TCP client that continuously attempts to connect to a specified server endpoint. Once connected, it sends a fixed message and reads the server's response. If the connection fails or is lost, it automatically attempts to reconnect. The function handles connection states and errors appropriately, including non-blocking connection scenarios.\n\nInput: \n- `arg` (void pointer): A pointer to a `stEndPoint` structure containing:\n  - `ip` (char pointer): The IP address of the server to connect to (can be NULL or special values for default behavior)\n  - `port` (unsigned short int): The port number of the server to connect to\n\nOutput: \n- Returns NULL (void pointer) when the loop exits (though the provided implementation has an infinite loop)\n- No explicit return value, but performs I/O operations through the socket\n\nNote: The function runs in an infinite loop and should typically be executed in a separate thread. It manages its own socket lifecycle, creating and closing sockets as needed during connection attempts and communication.",
    "Canonical_solution": "#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n\nstruct stEndPoint\n{\n    char *ip;\n    unsigned short int port;\n};\n\nstatic void SetAddr(const char *pszIP, const unsigned short shPort, struct sockaddr_in &addr)\n{\n    bzero(&addr, sizeof(addr));\n    addr.sin_family = AF_INET;\n    addr.sin_port = htons(shPort);\n    int nIP = 0;\n    if(!pszIP || '\\0' == *pszIP   \n            || 0 == strcmp(pszIP,\"0\") || 0 == strcmp(pszIP,\"0.0.0.0\") \n            || 0 == strcmp(pszIP,\"*\") \n      )\n    {\n        nIP = htonl(INADDR_ANY);\n    }\n    else\n    {\n        nIP = inet_addr(pszIP);\n    }\n    addr.sin_addr.s_addr = nIP;\n}\n\nstatic void *readwrite_routine(void *arg)\n{\n    stEndPoint *endpoint = (stEndPoint *)arg;\n    char str[8] = \"sarlmol\";\n    char buf[1024 * 16];\n    int fd = -1;\n    int ret = 0;\n    \n    for(;;)\n    {\n        if(fd < 0)\n        {\n            fd = socket(PF_INET, SOCK_STREAM, 0);\n            struct sockaddr_in addr;\n            SetAddr(endpoint->ip, endpoint->port, addr);\n            ret = connect(fd, (struct sockaddr*)&addr, sizeof(addr));\n            \n            if(errno == EALREADY || errno == EINPROGRESS)\n            {       \n                struct pollfd pf = {0};\n                pf.fd = fd;\n                pf.events = (POLLOUT|POLLERR|POLLHUP);\n                co_poll(co_get_epoll_ct(), &pf, 1, 200);\n                \n                int error = 0;\n                uint32_t socklen = sizeof(error);\n                errno = 0;\n                ret = getsockopt(fd, SOL_SOCKET, SO_ERROR, (void *)&error, &socklen);\n                if(ret == -1)\n                {       \n                    close(fd);\n                    fd = -1;\n                    continue;\n                }       \n                if(error)\n                {       \n                    errno = error;\n                    close(fd);\n                    fd = -1;\n                    continue;\n                }       \n            }\n        }\n        \n        ret = write(fd, str, 8);\n        if(ret > 0)\n        {\n            ret = read(fd, buf, sizeof(buf));\n            if(ret <= 0)\n            {\n                close(fd);\n                fd = -1;\n            }\n        }\n        else\n        {\n            close(fd);\n            fd = -1;\n        }\n    }\n    return 0;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 149,
    "matched_results": [
      "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\n#include <arpa/inet.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <errno.h>\n\ntypedef struct {\n    char *ip;\n    unsigned short port;\n} stEndPoint;\n\nvoid* readwrite_routine(void *arg) {\n    stEndPoint *ep = (stEndPoint*)arg;\n    const char *msg = \"Hello, Server!\";\n    int sock = -1;\n    struct sockaddr_in server_addr;\n\n    while (1) {\n        if (sock == -1) {\n            sock = socket(AF_INET, SOCK_STREAM, 0);\n            if (sock < 0) {\n                perror(\"Socket creation failed\");\n                sleep(5);\n                continue;\n            }\n\n            memset(&server_addr, 0, sizeof(server_addr));\n            server_addr.sin_family = AF_INET;\n            server_addr.sin_port = htons(ep->port);\n\n            if (ep->ip && inet_aton(ep->ip, &server_addr.sin_addr)) {\n                // Use provided IP\n            } else {\n                // Default to localhost or handle as needed\n                inet_aton(\"127.0.0.1\", &server_addr.sin_addr);\n            }\n\n            if (connect(sock, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {\n                perror(\"Connection failed\");\n                close(sock);\n                sock = -1;\n                sleep(5);\n                continue;\n            }\n        }\n\n        ssize_t sent = send(sock, msg, strlen(msg), 0);\n        if (sent < 0) {\n            perror(\"Send failed\");\n            close(sock);\n            sock = -1;\n            sleep(5);\n            continue;\n        }\n\n        char buffer[1024];\n        ssize_t received = recv(sock, buffer, sizeof(buffer) - 1, 0);\n        if (received <= 0) {\n            if (received == 0)\n                fprintf(stderr, \"Server closed the connection\\n\");\n            else\n                perror(\"Receive failed\");\n            close(sock);\n            sock = -1;\n            sleep(5);\n            continue;\n        }\n\n        buffer[received] = '\\0';\n        printf(\"Received: %s\\n\", buffer);\n    }\n\n    return NULL;\n}\n```",
      "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\n#include <arpa/inet.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <netdb.h>\n#include <errno.h>\n\ntypedef struct {\n    char *ip;\n    unsigned short port;\n} stEndPoint;\n\nvoid* readwrite_routine(void* arg) {\n    stEndPoint* endpoint = (stEndPoint*)arg;\n    const char* message = \"Hello, Server!\";\n    int sock = -1;\n    struct sockaddr_in server_addr;\n    socklen_t addr_len = sizeof(server_addr);\n\n    while (1) {\n        if (sock == -1) {\n            sock = socket(AF_INET, SOCK_STREAM, 0);\n            if (sock < 0) {\n                perror(\"Socket creation failed\");\n                sleep(5);\n                continue;\n            }\n\n            memset(&server_addr, 0, sizeof(server_addr));\n            server_addr.sin_family = AF_INET;\n            server_addr.sin_port = htons(endpoint->port);\n\n            if (inet_pton(AF_INET, endpoint->ip ? endpoint->ip : \"127.0.0.1\", &server_addr.sin_addr) <= 0) {\n                perror(\"Invalid address/Address not supported\");\n                close(sock);\n                sock = -1;\n                sleep(5);\n                continue;\n            }\n\n            if (connect(sock, (struct sockaddr*)&server_addr, addr_len) < 0) {\n                perror(\"Connection failed\");\n                close(sock);\n                sock = -1;\n                sleep(5);\n                continue;\n            }\n        }\n\n        ssize_t sent = send(sock, message, strlen(message), 0);\n        if (sent < 0) {\n            perror(\"Send failed\");\n            close(sock);\n            sock = -1;\n            sleep(5);\n            continue;\n        }\n\n        char buffer[1024] = {0};\n        ssize_t received = recv(sock, buffer, sizeof(buffer) - 1, 0);\n        if (received <= 0) {\n            if (received < 0 && errno != EAGAIN && errno != EWOULDBLOCK) {\n                perror(\"Receive failed or connection closed\");\n            }\n            close(sock);\n            sock = -1;\n            sleep(5);\n            continue;\n        }\n\n        buffer[received] = '\\0';\n        printf(\"Received: %s\\n\", buffer);\n    }\n\n    return NULL;\n}\n```",
      "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\n#include <arpa/inet.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <errno.h>\n\ntypedef struct {\n    char *ip;\n    unsigned short port;\n} stEndPoint;\n\nvoid* readwrite_routine(void* arg) {\n    stEndPoint* endpoint = (stEndPoint*)arg;\n    const char* message = \"Hello, Server!\";\n    int sock = -1;\n    struct sockaddr_in server_addr;\n\n    while (1) {\n        if (sock == -1) {\n            sock = socket(AF_INET, SOCK_STREAM, 0);\n            if (sock < 0) {\n                perror(\"Socket creation failed\");\n                sleep(5);\n                continue;\n            }\n\n            memset(&server_addr, 0, sizeof(server_addr));\n            server_addr.sin_family = AF_INET;\n            server_addr.sin_port = htons(endpoint->port);\n\n            if (inet_pton(AF_INET, endpoint->ip, &server_addr.sin_addr) <= 0) {\n                perror(\"Invalid address/Address not supported\");\n                close(sock);\n                sock = -1;\n                sleep(5);\n                continue;\n            }\n\n            if (connect(sock, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {\n                perror(\"Connection failed\");\n                close(sock);\n                sock = -1;\n                sleep(5);\n                continue;\n            }\n        }\n\n        ssize_t sent_bytes = send(sock, message, strlen(message), 0);\n        if (sent_bytes < 0) {\n            perror(\"Send failed\");\n            close(sock);\n            sock = -1;\n            sleep(5);\n            continue;\n        }\n\n        char buffer[1024] = {0};\n        ssize_t received_bytes = recv(sock, buffer, sizeof(buffer) - 1, 0);\n        if (received_bytes <= 0) {\n            if (received_bytes < 0 && errno != EAGAIN && errno != EWOULDBLOCK) {\n                perror(\"Receive failed\");\n            }\n            close(sock);\n            sock = -1;\n            sleep(5);\n            continue;\n        }\n\n        buffer[received_bytes] = '\\0';\n        printf(\"Received: %s\\n\", buffer);\n    }\n\n    return NULL;\n}\n```",
      "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\n#include <arpa/inet.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <netdb.h>\n#include <errno.h>\n\ntypedef struct {\n    char *ip;\n    unsigned short port;\n} stEndPoint;\n\nvoid* readwrite_routine(void *arg) {\n    stEndPoint *endpoint = (stEndPoint *)arg;\n    const char *message = \"Hello, Server!\";\n    int sock = -1;\n    struct sockaddr_in server_addr;\n    socklen_t addr_len = sizeof(server_addr);\n\n    while (1) {\n        if (sock != -1) {\n            close(sock);\n            sock = -1;\n        }\n\n        sock = socket(AF_INET, SOCK_STREAM, 0);\n        if (sock == -1) {\n            perror(\"socket\");\n            sleep(5);\n            continue;\n        }\n\n        memset(&server_addr, 0, sizeof(server_addr));\n        server_addr.sin_family = AF_INET;\n        server_addr.sin_port = htons(endpoint->port);\n\n        if (inet_pton(AF_INET, endpoint->ip ? endpoint->ip : \"127.0.0.1\", &server_addr.sin_addr) <= 0) {\n            perror(\"inet_pton\");\n            close(sock);\n            sock = -1;\n            sleep(5);\n            continue;\n        }\n\n        if (connect(sock, (struct sockaddr *)&server_addr, addr_len) < 0) {\n            perror(\"connect\");\n            close(sock);\n            sock = -1;\n            sleep(5);\n            continue;\n        }\n\n        while (1) {\n            ssize_t sent = send(sock, message, strlen(message), 0);\n            if (sent < 0) {\n                perror(\"send\");\n                break;\n            }\n\n            char buffer[1024];\n            ssize_t received = recv(sock, buffer, sizeof(buffer) - 1, 0);\n            if (received <= 0) {\n                if (received < 0 && errno != EAGAIN && errno != EWOULDBLOCK)\n                    perror(\"recv\");\n                break;\n            }\n            buffer[received] = '\\0';\n            printf(\"Received: %s\\n\", buffer);\n        }\n\n        close(sock);\n        sock = -1;\n        sleep(5);\n    }\n\n    return NULL;\n}\n```",
      "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\n#include <arpa/inet.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <netdb.h>\n#include <errno.h>\n\ntypedef struct {\n    char *ip;\n    unsigned short port;\n} stEndPoint;\n\nvoid* readwrite_routine(void *arg) {\n    stEndPoint *endpoint = (stEndPoint *)arg;\n    int sockfd;\n    struct sockaddr_in server_addr;\n    socklen_t addr_len = sizeof(server_addr);\n    const char *msg = \"Hello, Server!\";\n    char buffer[1024];\n    fd_set read_fds;\n    struct timeval timeout;\n\n    while (1) {\n        sockfd = socket(AF_INET, SOCK_STREAM, 0);\n        if (sockfd < 0) {\n            perror(\"Socket creation failed\");\n            sleep(5);\n            continue;\n        }\n\n        memset(&server_addr, 0, sizeof(server_addr));\n        server_addr.sin_family = AF_INET;\n        server_addr.sin_port = htons(endpoint->port);\n\n        if (inet_pton(AF_INET, endpoint->ip, &server_addr.sin_addr) <= 0) {\n            perror(\"Invalid address/Address not supported\");\n            close(sockfd);\n            sleep(5);\n            continue;\n        }\n\n        if (connect(sockfd, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {\n            perror(\"Connection failed\");\n            close(sockfd);\n            sleep(5);\n            continue;\n        }\n\n        while (1) {\n            if (send(sockfd, msg, strlen(msg), 0) < 0) {\n                perror(\"Send failed\");\n                break;\n            }\n\n            FD_ZERO(&read_fds);\n            FD_SET(sockfd, &read_fds);\n            timeout.tv_sec = 5;\n            timeout.tv_usec = 0;\n\n            int activity = select(sockfd + 1, &read_fds, NULL, NULL, &timeout);\n            if ((activity < 0) && (errno != EINTR)) {\n                perror(\"Select error\");\n                break;\n            } else if (activity == 0) {\n                printf(\"Server timeout\\n\");\n                break;\n            }\n\n            if (FD_ISSET(sockfd, &read_fds)) {\n                int valread = recv(sockfd, buffer, sizeof(buffer) - 1, 0);\n                if (valread <= 0) {\n                    if (valread == 0)\n                        printf(\"Server disconnected\\n\");\n                    else\n                        perror(\"Recv failed\");\n                    break;\n                }\n                buffer[valread] = '\\0';\n                printf(\"Received: %s\\n\", buffer);\n            }\n        }\n\n        close(sockfd);\n        sleep(5);\n    }\n\n    return NULL;\n}\n```",
      "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\n#include <arpa/inet.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <netdb.h>\n#include <errno.h>\n\ntypedef struct {\n    char *ip;\n    unsigned short port;\n} stEndPoint;\n\nvoid* readwrite_routine(void *arg) {\n    stEndPoint *endpoint = (stEndPoint *)arg;\n    const char *message = \"Hello, Server!\";\n    int sock = -1;\n    struct sockaddr_in server_addr;\n    socklen_t addr_len = sizeof(server_addr);\n\n    while (1) {\n        if (sock != -1) {\n            close(sock);\n            sock = -1;\n        }\n\n        sock = socket(AF_INET, SOCK_STREAM, 0);\n        if (sock < 0) {\n            perror(\"Socket creation failed\");\n            sleep(5);\n            continue;\n        }\n\n        memset(&server_addr, 0, addr_len);\n        server_addr.sin_family = AF_INET;\n        server_addr.sin_port = htons(endpoint->port);\n\n        if (inet_pton(AF_INET, endpoint->ip, &server_addr.sin_addr) <= 0) {\n            perror(\"Invalid address/Address not supported\");\n            close(sock);\n            sock = -1;\n            sleep(5);\n            continue;\n        }\n\n        if (connect(sock, (struct sockaddr *)&server_addr, addr_len) < 0) {\n            perror(\"Connection failed\");\n            close(sock);\n            sock = -1;\n            sleep(5);\n            continue;\n        }\n\n        while (1) {\n            ssize_t sent_bytes = send(sock, message, strlen(message), 0);\n            if (sent_bytes < 0) {\n                perror(\"Send failed\");\n                break;\n            }\n\n            char buffer[1024] = {0};\n            ssize_t received_bytes = recv(sock, buffer, sizeof(buffer) - 1, 0);\n            if (received_bytes <= 0) {\n                if (received_bytes == 0)\n                    printf(\"Server closed the connection\\n\");\n                else\n                    perror(\"Receive failed\");\n                break;\n            }\n\n            buffer[received_bytes] = '\\0';\n            printf(\"Received: %s\\n\", buffer);\n            sleep(1); // Delay between sends\n        }\n    }\n\n    return NULL;\n}\n```",
      "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\n#include <arpa/inet.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <netdb.h>\n#include <errno.h>\n\ntypedef struct {\n    char *ip;\n    unsigned short port;\n} stEndPoint;\n\nvoid* readwrite_routine(void* arg) {\n    stEndPoint* endpoint = (stEndPoint*)arg;\n    const char* message = \"Hello, Server!\";\n    int sock = -1;\n    struct sockaddr_in server_addr;\n    socklen_t addr_len = sizeof(server_addr);\n\n    while (1) {\n        if (sock == -1) {\n            sock = socket(AF_INET, SOCK_STREAM, 0);\n            if (sock < 0) {\n                perror(\"Socket creation failed\");\n                sleep(5);\n                continue;\n            }\n\n            memset(&server_addr, 0, sizeof(server_addr));\n            server_addr.sin_family = AF_INET;\n            server_addr.sin_port = htons(endpoint->port);\n\n            if (inet_pton(AF_INET, endpoint->ip ? endpoint->ip : \"127.0.0.1\", &server_addr.sin_addr) <= 0) {\n                perror(\"Invalid address/Address not supported\");\n                close(sock);\n                sock = -1;\n                sleep(5);\n                continue;\n            }\n\n            if (connect(sock, (struct sockaddr*)&server_addr, addr_len) < 0) {\n                perror(\"Connection failed\");\n                close(sock);\n                sock = -1;\n                sleep(5);\n                continue;\n            }\n        }\n\n        ssize_t sent = send(sock, message, strlen(message), 0);\n        if (sent < 0) {\n            perror(\"Send failed\");\n            close(sock);\n            sock = -1;\n            sleep(5);\n            continue;\n        }\n\n        char buffer[1024] = {0};\n        ssize_t received = recv(sock, buffer, sizeof(buffer) - 1, 0);\n        if (received <= 0) {\n            if (received < 0 && errno != EAGAIN && errno != EWOULDBLOCK) {\n                perror(\"Receive failed or connection closed\");\n            }\n            close(sock);\n            sock = -1;\n            sleep(5);\n            continue;\n        }\n\n        buffer[received] = '\\0';\n        printf(\"Received: %s\\n\", buffer);\n    }\n\n    return NULL;\n}\n```",
      "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\n#include <arpa/inet.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <errno.h>\n\ntypedef struct {\n    char *ip;\n    unsigned short port;\n} stEndPoint;\n\nvoid* readwrite_routine(void *arg) {\n    stEndPoint *endpoint = (stEndPoint *)arg;\n    const char *message = \"Hello, Server!\";\n    int sock = -1;\n    struct sockaddr_in server_addr;\n\n    while (1) {\n        if (sock == -1) {\n            sock = socket(AF_INET, SOCK_STREAM, 0);\n            if (sock < 0) {\n                perror(\"Socket creation failed\");\n                sleep(5);\n                continue;\n            }\n\n            memset(&server_addr, 0, sizeof(server_addr));\n            server_addr.sin_family = AF_INET;\n            server_addr.sin_port = htons(endpoint->port);\n\n            if (inet_pton(AF_INET, endpoint->ip ? endpoint->ip : \"127.0.0.1\", &server_addr.sin_addr) <= 0) {\n                perror(\"Invalid address/Address not supported\");\n                close(sock);\n                sock = -1;\n                sleep(5);\n                continue;\n            }\n\n            if (connect(sock, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {\n                perror(\"Connection failed\");\n                close(sock);\n                sock = -1;\n                sleep(5);\n                continue;\n            }\n        }\n\n        ssize_t sent_bytes = send(sock, message, strlen(message), 0);\n        if (sent_bytes < 0) {\n            perror(\"Send failed\");\n            close(sock);\n            sock = -1;\n            sleep(5);\n            continue;\n        }\n\n        char buffer[1024] = {0};\n        ssize_t received_bytes = recv(sock, buffer, sizeof(buffer) - 1, 0);\n        if (received_bytes <= 0) {\n            if (received_bytes < 0 && errno != EAGAIN && errno != EWOULDBLOCK) {\n                perror(\"Receive failed or connection closed\");\n            }\n            close(sock);\n            sock = -1;\n            sleep(5);\n            continue;\n        }\n\n        buffer[received_bytes] = '\\0';\n        printf(\"Received: %s\\n\", buffer);\n    }\n\n    return NULL;\n}\n```",
      "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\n#include <arpa/inet.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <netdb.h>\n#include <errno.h>\n\ntypedef struct {\n    char *ip;\n    unsigned short port;\n} stEndPoint;\n\nvoid* readwrite_routine(void* arg) {\n    stEndPoint* endpoint = (stEndPoint*)arg;\n    const char* message = \"Hello, Server!\";\n    int sock = -1;\n    struct sockaddr_in server_addr;\n    socklen_t addr_len = sizeof(server_addr);\n\n    while (1) {\n        if (sock != -1) {\n            close(sock);\n            sock = -1;\n        }\n\n        sock = socket(AF_INET, SOCK_STREAM, 0);\n        if (sock == -1) {\n            perror(\"socket\");\n            sleep(5);\n            continue;\n        }\n\n        memset(&server_addr, 0, sizeof(server_addr));\n        server_addr.sin_family = AF_INET;\n        server_addr.sin_port = htons(endpoint->port);\n\n        if (endpoint->ip && inet_aton(endpoint->ip, &server_addr.sin_addr)) {\n            // Use provided IP\n        } else {\n            // Fallback to localhost or other logic as needed\n            inet_aton(\"127.0.0.1\", &server_addr.sin_addr);\n        }\n\n        if (connect(sock, (struct sockaddr*)&server_addr, addr_len) == -1) {\n            perror(\"connect\");\n            close(sock);\n            sock = -1;\n            sleep(5);\n            continue;\n        }\n\n        while (1) {\n            ssize_t sent_bytes = send(sock, message, strlen(message), 0);\n            if (sent_bytes == -1) {\n                perror(\"send\");\n                break;\n            }\n\n            char buffer[1024];\n            ssize_t received_bytes = recv(sock, buffer, sizeof(buffer) - 1, 0);\n            if (received_bytes <= 0) {\n                if (received_bytes == 0)\n                    fprintf(stderr, \"Connection closed by server\\n\");\n                else\n                    perror(\"recv\");\n                break;\n            }\n            buffer[received_bytes] = '\\0';\n            printf(\"Received: %s\\n\", buffer);\n            sleep(1); // Delay between sends\n        }\n\n        close(sock);\n        sock = -1;\n        sleep(5); // Wait before reconnecting\n    }\n\n    return NULL;\n}\n```",
      "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\n#include <arpa/inet.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <errno.h>\n\ntypedef struct {\n    char *ip;\n    unsigned short port;\n} stEndPoint;\n\nvoid* readwrite_routine(void *arg) {\n    stEndPoint *endpoint = (stEndPoint*)arg;\n    const char *message = \"Hello, Server!\";\n    int sock = -1;\n    struct sockaddr_in server_addr;\n\n    while (1) {\n        if (sock == -1) {\n            sock = socket(AF_INET, SOCK_STREAM, 0);\n            if (sock < 0) {\n                perror(\"Socket creation failed\");\n                sleep(5);\n                continue;\n            }\n\n            memset(&server_addr, 0, sizeof(server_addr));\n            server_addr.sin_family = AF_INET;\n            server_addr.sin_port = htons(endpoint->port);\n\n            if (inet_pton(AF_INET, endpoint->ip, &server_addr.sin_addr) <= 0) {\n                perror(\"Invalid address/Address not supported\");\n                close(sock);\n                sock = -1;\n                sleep(5);\n                continue;\n            }\n\n            if (connect(sock, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {\n                perror(\"Connection failed\");\n                close(sock);\n                sock = -1;\n                sleep(5);\n                continue;\n            }\n        }\n\n        if (send(sock, message, strlen(message), 0) < 0) {\n            perror(\"Send failed\");\n            close(sock);\n            sock = -1;\n            sleep(5);\n            continue;\n        }\n\n        char buffer[1024] = {0};\n        int valread = read(sock, buffer, sizeof(buffer));\n        if (valread < 0) {\n            if (errno != ECONNRESET && errno != EAGAIN && errno != EWOULDBLOCK) {\n                perror(\"Read failed\");\n                close(sock);\n                sock = -1;\n                sleep(5);\n                continue;\n            }\n        } else if (valread == 0) {\n            printf(\"Server disconnected\\n\");\n            close(sock);\n            sock = -1;\n            sleep(5);\n            continue;\n        } else {\n            printf(\"Received: %s\\n\", buffer);\n        }\n    }\n\n    return NULL;\n}\n```"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 21,
    "Instruction": "Task Description: Implement a TCP client function in C++ that establishes a connection to a server, sends user input messages, and receives responses from the server until the connection is terminated.\n\nFunction Description: The function `tcp_client_communication` creates a TCP socket, connects to a specified server (localhost on port 8888 in this case), and enters a loop where it reads user input from stdin, sends it to the server, and prints the server's response. The communication continues until an error occurs or the connection is closed by either side.\n\nInput: None (The server IP and port are hardcoded as 127.0.0.1 and 8888 respectively in the function. User input is collected interactively during execution.)\n\nOutput: None (The function prints server responses to stdout but doesn't return any value. All communication results are handled via side effects.)\n\nNote: The function handles its own socket cleanup by closing the connection before exiting.",
    "Canonical_solution": "#include <sys/socket.h>\n#include <arpa/inet.h>\n#include <string.h>\n#include <unistd.h>\n\n#define BUFFER_SIZE 1024\n\nvoid tcp_client_communication() {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    \n    struct sockaddr_in serv_addr;\n    bzero(&serv_addr, sizeof(serv_addr));\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_addr.s_addr = inet_addr(\"127.0.0.1\");\n    serv_addr.sin_port = htons(8888);\n\n    connect(sockfd, (sockaddr*)&serv_addr, sizeof(serv_addr));\n    \n    while(true){\n        char buf[BUFFER_SIZE];\n        bzero(&buf, sizeof(buf));\n        scanf(\"%s\", buf);\n        ssize_t write_bytes = write(sockfd, buf, sizeof(buf));\n        if(write_bytes == -1){\n            break;\n        }\n        bzero(&buf, sizeof(buf));\n        ssize_t read_bytes = read(sockfd, buf, sizeof(buf));\n        if(read_bytes > 0){\n            printf(\"message from server: %s\\n\", buf);\n        }else if(read_bytes == 0){\n            break;\n        }else if(read_bytes == -1){\n            close(sockfd);\n            break;\n        }\n    }\n    close(sockfd);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 149,
    "matched_results": [
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nvoid tcp_client_communication() {\n    int sock = 0;\n    struct sockaddr_in serv_addr;\n    char buffer[1024] = {0};\n\n    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation error\" << std::endl;\n        return;\n    }\n\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(8888);\n\n    // Convert IPv4 and IPv6 addresses from text to binary form\n    if (inet_pton(AF_INET, \"127.0.0.1\", &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address / Address not supported\" << std::endl;\n        close(sock);\n        return;\n    }\n\n    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        close(sock);\n        return;\n    }\n\n    while (true) {\n        std::string input;\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, input);\n\n        if (send(sock, input.c_str(), input.length(), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        int valread = read(sock, buffer, sizeof(buffer));\n        if (valread <= 0) {\n            std::cerr << \"Server disconnected or read error\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Server response: \" << buffer << std::endl;\n        memset(buffer, 0, sizeof(buffer));\n    }\n\n    close(sock);\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nvoid tcp_client_communication() {\n    int sock = 0;\n    struct sockaddr_in serv_addr;\n    char buffer[1024] = {0};\n\n    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation error\" << std::endl;\n        return;\n    }\n\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(8888);\n\n    // Convert IPv4 and IPv6 addresses from text to binary form\n    if (inet_pton(AF_INET, \"127.0.0.1\", &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address / Address not supported\" << std::endl;\n        close(sock);\n        return;\n    }\n\n    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        close(sock);\n        return;\n    }\n\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::cin.getline(buffer, sizeof(buffer));\n\n        if (send(sock, buffer, strlen(buffer), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        memset(buffer, 0, sizeof(buffer));\n        int valread = read(sock, buffer, sizeof(buffer));\n        if (valread <= 0) {\n            std::cerr << \"Server disconnected or read error\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Server response: \" << buffer << std::endl;\n    }\n\n    close(sock);\n}\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nvoid tcp_client_communication() {\n    int sock = 0;\n    struct sockaddr_in serv_addr;\n    char buffer[1024] = {0};\n\n    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation error\" << std::endl;\n        return;\n    }\n\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(8888);\n\n    // Convert IPv4 and IPv6 addresses from text to binary form\n    if (inet_pton(AF_INET, \"127.0.0.1\", &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        close(sock);\n        return;\n    }\n\n    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        close(sock);\n        return;\n    }\n\n    while (true) {\n        std::string input;\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, input);\n\n        if (send(sock, input.c_str(), input.length(), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        int valread = read(sock, buffer, sizeof(buffer));\n        if (valread <= 0) {\n            std::cerr << \"Server disconnected or read error\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Server response: \" << buffer << std::endl;\n        memset(buffer, 0, sizeof(buffer));\n    }\n\n    close(sock);\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nvoid tcp_client_communication() {\n    int sock = 0;\n    struct sockaddr_in serv_addr;\n    char buffer[1024] = {0};\n\n    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation error\" << std::endl;\n        return;\n    }\n\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(8888);\n\n    // Convert IPv4 and IPv6 addresses from text to binary form\n    if (inet_pton(AF_INET, \"127.0.0.1\", &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address / Address not supported\" << std::endl;\n        close(sock);\n        return;\n    }\n\n    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        close(sock);\n        return;\n    }\n\n    while (true) {\n        std::string input;\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, input);\n\n        if (input.empty()) continue;\n\n        send(sock, input.c_str(), input.length(), 0);\n\n        int valread = read(sock, buffer, sizeof(buffer));\n        if (valread <= 0) break;\n\n        std::cout << \"Server response: \" << buffer << std::endl;\n        memset(buffer, 0, sizeof(buffer));\n    }\n\n    close(sock);\n}\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nvoid tcp_client_communication() {\n    int sock = 0;\n    struct sockaddr_in serv_addr;\n    char buffer[1024] = {0};\n\n    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation error\" << std::endl;\n        return;\n    }\n\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(8888);\n\n    // Convert IPv4 and IPv6 addresses from text to binary form\n    if (inet_pton(AF_INET, \"127.0.0.1\", &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address / Address not supported\" << std::endl;\n        close(sock);\n        return;\n    }\n\n    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        close(sock);\n        return;\n    }\n\n    while (true) {\n        std::string input;\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, input);\n\n        if (send(sock, input.c_str(), input.length(), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        int valread = read(sock, buffer, sizeof(buffer));\n        if (valread <= 0) {\n            std::cerr << \"Server disconnected or read error\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Server response: \" << buffer << std::endl;\n        memset(buffer, 0, sizeof(buffer));\n    }\n\n    close(sock);\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nvoid tcp_client_communication() {\n    int sock = 0;\n    struct sockaddr_in serv_addr;\n    char buffer[1024] = {0};\n\n    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation error\" << std::endl;\n        return;\n    }\n\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(8888);\n\n    // Convert IPv4 and IPv6 addresses from text to binary form\n    if (inet_pton(AF_INET, \"127.0.0.1\", &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address / Address not supported\" << std::endl;\n        close(sock);\n        return;\n    }\n\n    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        close(sock);\n        return;\n    }\n\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::cin.getline(buffer, sizeof(buffer));\n\n        if (send(sock, buffer, strlen(buffer), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        memset(buffer, 0, sizeof(buffer));\n        int valread = read(sock, buffer, sizeof(buffer));\n        if (valread <= 0) {\n            std::cerr << \"Server disconnected or read error\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Server response: \" << buffer << std::endl;\n    }\n\n    close(sock);\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nvoid tcp_client_communication() {\n    int sock = 0;\n    struct sockaddr_in serv_addr;\n    char buffer[1024] = {0};\n\n    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation error\" << std::endl;\n        return;\n    }\n\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(8888);\n\n    // Convert IPv4 and IPv6 addresses from text to binary form\n    if (inet_pton(AF_INET, \"127.0.0.1\", &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address / Address not supported\" << std::endl;\n        close(sock);\n        return;\n    }\n\n    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        close(sock);\n        return;\n    }\n\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::cin.getline(buffer, sizeof(buffer));\n\n        if (send(sock, buffer, strlen(buffer), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        memset(buffer, 0, sizeof(buffer));\n        int valread = read(sock, buffer, sizeof(buffer));\n        if (valread <= 0) {\n            std::cerr << \"Server disconnected or read error\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Server response: \" << buffer << std::endl;\n    }\n\n    close(sock);\n}\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nvoid tcp_client_communication() {\n    int sock = 0;\n    struct sockaddr_in serv_addr;\n    char buffer[1024] = {0};\n\n    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation error\" << std::endl;\n        return;\n    }\n\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(8888);\n\n    // Convert IPv4 and IPv6 addresses from text to binary form\n    if (inet_pton(AF_INET, \"127.0.0.1\", &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address / Address not supported\" << std::endl;\n        close(sock);\n        return;\n    }\n\n    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        close(sock);\n        return;\n    }\n\n    while (true) {\n        std::string input;\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, input);\n\n        if (send(sock, input.c_str(), input.length(), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        int valread = read(sock, buffer, sizeof(buffer));\n        if (valread <= 0) {\n            std::cerr << \"Server disconnected or read error\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Server response: \" << buffer << std::endl;\n        memset(buffer, 0, sizeof(buffer));\n    }\n\n    close(sock);\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nvoid tcp_client_communication() {\n    int sock = 0;\n    struct sockaddr_in serv_addr;\n    char buffer[1024] = {0};\n\n    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation error\" << std::endl;\n        return;\n    }\n\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(8888);\n\n    // Convert IPv4 and IPv6 addresses from text to binary form\n    if (inet_pton(AF_INET, \"127.0.0.1\", &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address / Address not supported\" << std::endl;\n        close(sock);\n        return;\n    }\n\n    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        close(sock);\n        return;\n    }\n\n    while (true) {\n        std::string input;\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, input);\n\n        if (input.empty()) continue;\n\n        send(sock, input.c_str(), input.length(), 0);\n\n        int valread = read(sock, buffer, sizeof(buffer));\n        if (valread <= 0) break;\n\n        std::cout << \"Server response: \" << buffer << std::endl;\n        memset(buffer, 0, sizeof(buffer));\n    }\n\n    close(sock);\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nvoid tcp_client_communication() {\n    int sock = 0;\n    struct sockaddr_in serv_addr;\n    char buffer[1024] = {0};\n\n    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation error\" << std::endl;\n        return;\n    }\n\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(8888);\n\n    // Convert IPv4 and IPv6 addresses from text to binary form\n    if (inet_pton(AF_INET, \"127.0.0.1\", &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address / Address not supported\" << std::endl;\n        close(sock);\n        return;\n    }\n\n    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        close(sock);\n        return;\n    }\n\n    while (true) {\n        std::string input;\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, input);\n\n        if (input.empty()) continue;\n\n        if (send(sock, input.c_str(), input.length(), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        int valread = read(sock, buffer, sizeof(buffer));\n        if (valread <= 0) {\n            std::cerr << \"Server disconnected or read error\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Server response: \" << buffer << std::endl;\n        memset(buffer, 0, sizeof(buffer));\n    }\n\n    close(sock);\n}\n```"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 22,
    "Instruction": "Task Description: Implement a TCP client function in C++ that establishes a connection to a server, sends user input to the server, and prints the server's response. The function should handle basic error cases and properly close the connection when done.\n\nFunction Description: The function `tcp_client_communication` creates a TCP socket, connects to a specified server, and enters a loop where it reads user input, sends it to the server, and displays the server's response. The loop continues until an error occurs or the connection is closed by the server. The function handles socket creation, connection, data transmission, and cleanup.\n\nInput: None (The server IP address and port are hardcoded as \"127.0.0.1\" and 1234 respectively in the function)\n\nOutput: None (The function prints server responses to stdout but doesn't return any value)",
    "Canonical_solution": "#include <sys/socket.h>\n#include <arpa/inet.h>\n#include <string.h>\n#include <unistd.h>\n\n#define BUFFER_SIZE 1024\n\nvoid tcp_client_communication() {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    \n    struct sockaddr_in serv_addr;\n    bzero(&serv_addr, sizeof(serv_addr));\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_addr.s_addr = inet_addr(\"127.0.0.1\");\n    serv_addr.sin_port = htons(1234);\n\n    connect(sockfd, (sockaddr*)&serv_addr, sizeof(serv_addr));\n    \n    while(true){\n        char buf[BUFFER_SIZE];\n        bzero(&buf, sizeof(buf));\n        scanf(\"%s\", buf);\n        ssize_t write_bytes = write(sockfd, buf, sizeof(buf));\n        if(write_bytes == -1){\n            break;\n        }\n        bzero(&buf, sizeof(buf));\n        ssize_t read_bytes = read(sockfd, buf, sizeof(buf));\n        if(read_bytes > 0){\n            printf(\"message from server: %s\\n\", buf);\n        }else if(read_bytes == 0){\n            break;\n        }else if(read_bytes == -1){\n            close(sockfd);\n            break;\n        }\n    }\n    close(sockfd);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 149,
    "matched_results": [
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nvoid tcp_client_communication() {\n    int sock = 0;\n    struct sockaddr_in serv_addr;\n    char buffer[1024] = {0};\n\n    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation error\" << std::endl;\n        return;\n    }\n\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(1234);\n\n    if (inet_pton(AF_INET, \"127.0.0.1\", &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/Address not supported\" << std::endl;\n        close(sock);\n        return;\n    }\n\n    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection failed\" << std::endl;\n        close(sock);\n        return;\n    }\n\n    while (true) {\n        std::string input;\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, input);\n\n        if (send(sock, input.c_str(), input.length(), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        int valread = read(sock, buffer, sizeof(buffer));\n        if (valread <= 0) {\n            std::cerr << \"Server disconnected or read error\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Server response: \" << buffer << std::endl;\n        memset(buffer, 0, sizeof(buffer));\n    }\n\n    close(sock);\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nvoid tcp_client_communication() {\n    int sock = 0;\n    struct sockaddr_in serv_addr;\n    char buffer[1024] = {0};\n\n    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation error\" << std::endl;\n        return;\n    }\n\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(1234);\n\n    if (inet_pton(AF_INET, \"127.0.0.1\", &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/Address not supported\" << std::endl;\n        close(sock);\n        return;\n    }\n\n    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        close(sock);\n        return;\n    }\n\n    while (true) {\n        std::string input;\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, input);\n\n        if (send(sock, input.c_str(), input.length(), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        int valread = read(sock, buffer, sizeof(buffer));\n        if (valread < 0) {\n            std::cerr << \"Read failed\" << std::endl;\n            break;\n        } else if (valread == 0) {\n            std::cout << \"Server closed the connection\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Server response: \" << buffer << std::endl;\n        memset(buffer, 0, sizeof(buffer));\n    }\n\n    close(sock);\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nvoid tcp_client_communication() {\n    int sock = 0;\n    struct sockaddr_in serv_addr;\n    char buffer[1024] = {0};\n\n    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation error\" << std::endl;\n        return;\n    }\n\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(1234);\n\n    if (inet_pton(AF_INET, \"127.0.0.1\", &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/Address not supported\" << std::endl;\n        close(sock);\n        return;\n    }\n\n    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        close(sock);\n        return;\n    }\n\n    while (true) {\n        std::string input;\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, input);\n\n        if (send(sock, input.c_str(), input.length(), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        int valread = read(sock, buffer, sizeof(buffer));\n        if (valread <= 0) {\n            std::cerr << \"Server disconnected or read error\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Server response: \" << buffer << std::endl;\n        memset(buffer, 0, sizeof(buffer));\n    }\n\n    close(sock);\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <cstdlib>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nvoid tcp_client_communication() {\n    int sock = 0;\n    struct sockaddr_in serv_addr;\n    char buffer[1024] = {0};\n\n    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation error\" << std::endl;\n        return;\n    }\n\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(1234);\n\n    if (inet_pton(AF_INET, \"127.0.0.1\", &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/Address not supported\" << std::endl;\n        close(sock);\n        return;\n    }\n\n    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        close(sock);\n        return;\n    }\n\n    while (true) {\n        std::string input;\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, input);\n\n        if (send(sock, input.c_str(), input.length(), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        int valread = read(sock, buffer, sizeof(buffer));\n        if (valread <= 0) {\n            std::cerr << \"Server disconnected or read error\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Server response: \" << buffer << std::endl;\n        memset(buffer, 0, sizeof(buffer));\n    }\n\n    close(sock);\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nvoid tcp_client_communication() {\n    int sock = 0;\n    struct sockaddr_in serv_addr;\n    char buffer[1024] = {0};\n\n    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation error\" << std::endl;\n        return;\n    }\n\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(1234);\n\n    if (inet_pton(AF_INET, \"127.0.0.1\", &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/Address not supported\" << std::endl;\n        close(sock);\n        return;\n    }\n\n    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection failed\" << std::endl;\n        close(sock);\n        return;\n    }\n\n    while (true) {\n        std::string input;\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, input);\n\n        if (send(sock, input.c_str(), input.length(), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        int valread = read(sock, buffer, sizeof(buffer));\n        if (valread < 0) {\n            std::cerr << \"Read failed\" << std::endl;\n            break;\n        } else if (valread == 0) {\n            std::cout << \"Server closed the connection\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Server response: \" << buffer << std::endl;\n        memset(buffer, 0, sizeof(buffer));\n    }\n\n    close(sock);\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <cstdlib>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nvoid tcp_client_communication() {\n    int sock = 0;\n    struct sockaddr_in serv_addr;\n    char buffer[1024] = {0};\n\n    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation error\" << std::endl;\n        return;\n    }\n\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(1234);\n\n    if (inet_pton(AF_INET, \"127.0.0.1\", &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        close(sock);\n        return;\n    }\n\n    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        close(sock);\n        return;\n    }\n\n    while (true) {\n        std::string input;\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, input);\n\n        if (send(sock, input.c_str(), input.length(), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        int valread = read(sock, buffer, sizeof(buffer));\n        if (valread < 0) {\n            std::cerr << \"Read failed\" << std::endl;\n            break;\n        } else if (valread == 0) {\n            std::cout << \"Server closed the connection\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Server response: \" << buffer << std::endl;\n        memset(buffer, 0, sizeof(buffer));\n    }\n\n    close(sock);\n}\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n\nvoid tcp_client_communication() {\n    int sock = socket(AF_INET, SOCK_STREAM, 0);\n    if (sock < 0) {\n        std::cerr << \"Socket creation failed\\n\";\n        return;\n    }\n\n    struct sockaddr_in server_addr{};\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(1234);\n    if (inet_pton(AF_INET, \"127.0.0.1\", &server_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/Address not supported\\n\";\n        close(sock);\n        return;\n    }\n\n    if (connect(sock, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {\n        std::cerr << \"Connection Failed\\n\";\n        close(sock);\n        return;\n    }\n\n    char buffer[1024] = {0};\n    std::string input;\n\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, input);\n\n        if (send(sock, input.c_str(), input.size(), 0) < 0) {\n            std::cerr << \"Send failed\\n\";\n            break;\n        }\n\n        int valread = read(sock, buffer, sizeof(buffer));\n        if (valread <= 0) {\n            std::cerr << \"Server disconnected or read error\\n\";\n            break;\n        }\n\n        std::cout << \"Server response: \" << buffer << std::endl;\n        memset(buffer, 0, sizeof(buffer));\n    }\n\n    close(sock);\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <cstdlib>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nvoid tcp_client_communication() {\n    int sock = 0;\n    struct sockaddr_in serv_addr;\n    char buffer[1024] = {0};\n\n    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation error\" << std::endl;\n        return;\n    }\n\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(1234);\n\n    if (inet_pton(AF_INET, \"127.0.0.1\", &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/Address not supported\" << std::endl;\n        close(sock);\n        return;\n    }\n\n    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        close(sock);\n        return;\n    }\n\n    while (true) {\n        std::string input;\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, input);\n\n        if (send(sock, input.c_str(), input.length(), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        int valread = read(sock, buffer, sizeof(buffer));\n        if (valread <= 0) {\n            std::cerr << \"Server disconnected or read error\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Server response: \" << buffer << std::endl;\n        memset(buffer, 0, sizeof(buffer));\n    }\n\n    close(sock);\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nvoid tcp_client_communication() {\n    int sock = 0;\n    struct sockaddr_in serv_addr;\n    char buffer[1024] = {0};\n\n    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation error\" << std::endl;\n        return;\n    }\n\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(1234);\n\n    if (inet_pton(AF_INET, \"127.0.0.1\", &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/Address not supported\" << std::endl;\n        close(sock);\n        return;\n    }\n\n    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection failed\" << std::endl;\n        close(sock);\n        return;\n    }\n\n    while (true) {\n        std::string input;\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, input);\n\n        if (send(sock, input.c_str(), input.length(), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        int valread = read(sock, buffer, sizeof(buffer));\n        if (valread < 0) {\n            std::cerr << \"Read failed\" << std::endl;\n            break;\n        } else if (valread == 0) {\n            std::cout << \"Server disconnected\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Server response: \" << buffer << std::endl;\n        memset(buffer, 0, sizeof(buffer));\n    }\n\n    close(sock);\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <cstdlib>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nvoid tcp_client_communication() {\n    int sock = 0;\n    struct sockaddr_in serv_addr;\n    char buffer[1024] = {0};\n\n    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation error\\n\";\n        return;\n    }\n\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(1234);\n\n    if (inet_pton(AF_INET, \"127.0.0.1\", &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/Address not supported\\n\";\n        close(sock);\n        return;\n    }\n\n    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\\n\";\n        close(sock);\n        return;\n    }\n\n    while (true) {\n        std::string input;\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, input);\n\n        if (send(sock, input.c_str(), input.length(), 0) < 0) {\n            std::cerr << \"Send failed\\n\";\n            break;\n        }\n\n        int valread = read(sock, buffer, sizeof(buffer));\n        if (valread <= 0) {\n            std::cerr << \"Server disconnected or read error\\n\";\n            break;\n        }\n\n        std::cout << \"Server response: \" << buffer << std::endl;\n        memset(buffer, 0, sizeof(buffer));\n    }\n\n    close(sock);\n}\n```"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 23,
    "Instruction": "Task Description: Create a TCP server in C++ that listens for incoming connections, receives data from clients, and echoes the data back to the clients. The server should handle one client at a time and properly clean up resources when the connection is terminated.\n\nFunction Description: The function `create_tcp_server` establishes a TCP server that binds to a specified IP address and port, listens for incoming connections, and handles client communication. It reads data from the client and sends the same data back (echo). The server runs until the client disconnects or an error occurs.\n\nInput: \n- `ip`: [const char*] - The IP address the server should bind to (e.g., \"127.0.0.1\" for localhost).\n- `port`: [int] - The port number the server should listen on (e.g., 8080).\n\nOutput: \n- [int] - Returns 0 on successful execution and -1 if any step fails (socket creation, binding, listening, or accepting connections).",
    "Canonical_solution": "#include <stdio.h>\n#include <sys/socket.h>\n#include <arpa/inet.h>\n#include <string.h>\n#include <unistd.h>\n\nint create_tcp_server(const char* ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if(sockfd == -1) return -1;\n\n    struct sockaddr_in serv_addr;\n    bzero(&serv_addr, sizeof(serv_addr));\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_addr.s_addr = inet_addr(ip);\n    serv_addr.sin_port = htons(port);\n\n    if(bind(sockfd, (sockaddr*)&serv_addr, sizeof(serv_addr)) == -1) {\n        close(sockfd);\n        return -1;\n    }\n\n    if(listen(sockfd, SOMAXCONN) == -1) {\n        close(sockfd);\n        return -1;\n    }\n\n    struct sockaddr_in clnt_addr;\n    socklen_t clnt_addr_len = sizeof(clnt_addr);\n    bzero(&clnt_addr, sizeof(clnt_addr));\n\n    int clnt_sockfd = accept(sockfd, (sockaddr*)&clnt_addr, &clnt_addr_len);\n    if(clnt_sockfd == -1) {\n        close(sockfd);\n        return -1;\n    }\n\n    printf(\"new client fd %d! IP: %s Port: %d\\n\", clnt_sockfd, inet_ntoa(clnt_addr.sin_addr), ntohs(clnt_addr.sin_port));\n    \n    char buf[1024];\n    while (true) {\n        bzero(&buf, sizeof(buf));\n        ssize_t read_bytes = read(clnt_sockfd, buf, sizeof(buf));\n        if(read_bytes > 0){\n            printf(\"message from client fd %d: %s\\n\", clnt_sockfd, buf);\n            write(clnt_sockfd, buf, sizeof(buf));\n        } else if(read_bytes == 0){\n            printf(\"client fd %d disconnected\\n\", clnt_sockfd);\n            close(clnt_sockfd);\n            break;\n        } else if(read_bytes == -1){\n            close(clnt_sockfd);\n            break;\n        }\n    }\n    close(sockfd);\n    return 0;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 148,
    "matched_results": [
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint create_tcp_server(const char* ip, int port) {\n    int server_fd, new_socket;\n    struct sockaddr_in address;\n    int addrlen = sizeof(address);\n    const int opt = 1;\n\n    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {\n        std::cerr << \"Socket creation failed\" << std::endl;\n        return -1;\n    }\n\n    if (setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT, &opt, sizeof(opt))) {\n        std::cerr << \"Setsockopt failed\" << std::endl;\n        close(server_fd);\n        return -1;\n    }\n\n    address.sin_family = AF_INET;\n    address.sin_addr.s_addr = inet_addr(ip);\n    address.sin_port = htons(port);\n\n    if (bind(server_fd, (struct sockaddr*)&address, sizeof(address)) < 0) {\n        std::cerr << \"Bind failed\" << std::endl;\n        close(server_fd);\n        return -1;\n    }\n\n    if (listen(server_fd, 3) < 0) {\n        std::cerr << \"Listen failed\" << std::endl;\n        close(server_fd);\n        return -1;\n    }\n\n    if ((new_socket = accept(server_fd, (struct sockaddr*)&address, (socklen_t*)&addrlen)) < 0) {\n        std::cerr << \"Accept failed\" << std::endl;\n        close(server_fd);\n        return -1;\n    }\n\n    char buffer[1024] = {0};\n    int valread;\n\n    while ((valread = read(new_socket, buffer, sizeof(buffer))) > 0) {\n        send(new_socket, buffer, valread, 0);\n        memset(buffer, 0, sizeof(buffer));\n    }\n\n    if (valread < 0) {\n        std::cerr << \"Read error\" << std::endl;\n        close(new_socket);\n        close(server_fd);\n        return -1;\n    }\n\n    close(new_socket);\n    close(server_fd);\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint create_tcp_server(const char* ip, int port) {\n    int server_fd, new_socket;\n    struct sockaddr_in address;\n    int addrlen = sizeof(address);\n    const int opt = 1;\n\n    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {\n        std::cerr << \"Socket creation failed\" << std::endl;\n        return -1;\n    }\n\n    if (setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT, &opt, sizeof(opt))) {\n        std::cerr << \"Setsockopt failed\" << std::endl;\n        close(server_fd);\n        return -1;\n    }\n\n    address.sin_family = AF_INET;\n    address.sin_addr.s_addr = inet_addr(ip);\n    address.sin_port = htons(port);\n\n    if (bind(server_fd, (struct sockaddr *)&address, sizeof(address)) < 0) {\n        std::cerr << \"Bind failed\" << std::endl;\n        close(server_fd);\n        return -1;\n    }\n\n    if (listen(server_fd, 3) < 0) {\n        std::cerr << \"Listen failed\" << std::endl;\n        close(server_fd);\n        return -1;\n    }\n\n    std::cout << \"Server is listening on \" << ip << \":\" << port << std::endl;\n\n    if ((new_socket = accept(server_fd, (struct sockaddr *)&address, (socklen_t*)&addrlen)) < 0) {\n        std::cerr << \"Accept failed\" << std::endl;\n        close(server_fd);\n        return -1;\n    }\n\n    char buffer[1024] = {0};\n    int valread;\n\n    while ((valread = read(new_socket, buffer, sizeof(buffer))) > 0) {\n        send(new_socket, buffer, valread, 0);\n        memset(buffer, 0, sizeof(buffer));\n    }\n\n    if (valread < 0) {\n        std::cerr << \"Read error\" << std::endl;\n        close(new_socket);\n        close(server_fd);\n        return -1;\n    }\n\n    close(new_socket);\n    close(server_fd);\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint create_tcp_server(const char* ip, int port) {\n    int server_fd, new_socket;\n    struct sockaddr_in address;\n    int addrlen = sizeof(address);\n    const int opt = 1;\n\n    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {\n        std::cerr << \"Socket creation failed\" << std::endl;\n        return -1;\n    }\n\n    if (setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT, &opt, sizeof(opt))) {\n        std::cerr << \"Setsockopt failed\" << std::endl;\n        close(server_fd);\n        return -1;\n    }\n\n    address.sin_family = AF_INET;\n    address.sin_addr.s_addr = inet_addr(ip);\n    address.sin_port = htons(port);\n\n    if (bind(server_fd, (struct sockaddr*)&address, sizeof(address)) < 0) {\n        std::cerr << \"Bind failed\" << std::endl;\n        close(server_fd);\n        return -1;\n    }\n\n    if (listen(server_fd, 3) < 0) {\n        std::cerr << \"Listen failed\" << std::endl;\n        close(server_fd);\n        return -1;\n    }\n\n    if ((new_socket = accept(server_fd, (struct sockaddr*)&address, (socklen_t*)&addrlen)) < 0) {\n        std::cerr << \"Accept failed\" << std::endl;\n        close(server_fd);\n        return -1;\n    }\n\n    char buffer[1024] = {0};\n    int valread;\n\n    while ((valread = read(new_socket, buffer, sizeof(buffer))) > 0) {\n        send(new_socket, buffer, valread, 0);\n        memset(buffer, 0, sizeof(buffer));\n    }\n\n    if (valread < 0) {\n        std::cerr << \"Read failed\" << std::endl;\n        close(new_socket);\n        close(server_fd);\n        return -1;\n    }\n\n    close(new_socket);\n    close(server_fd);\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint create_tcp_server(const char* ip, int port) {\n    int server_fd, new_socket;\n    struct sockaddr_in address;\n    int addrlen = sizeof(address);\n    const int opt = 1;\n\n    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {\n        std::cerr << \"Socket creation failed\" << std::endl;\n        return -1;\n    }\n\n    if (setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT, &opt, sizeof(opt))) {\n        std::cerr << \"Setsockopt failed\" << std::endl;\n        close(server_fd);\n        return -1;\n    }\n\n    address.sin_family = AF_INET;\n    address.sin_addr.s_addr = inet_addr(ip);\n    address.sin_port = htons(port);\n\n    if (bind(server_fd, (struct sockaddr*)&address, sizeof(address)) < 0) {\n        std::cerr << \"Bind failed\" << std::endl;\n        close(server_fd);\n        return -1;\n    }\n\n    if (listen(server_fd, 3) < 0) {\n        std::cerr << \"Listen failed\" << std::endl;\n        close(server_fd);\n        return -1;\n    }\n\n    std::cout << \"Server is listening on \" << ip << \":\" << port << std::endl;\n\n    if ((new_socket = accept(server_fd, (struct sockaddr*)&address, (socklen_t*)&addrlen)) < 0) {\n        std::cerr << \"Accept failed\" << std::endl;\n        close(server_fd);\n        return -1;\n    }\n\n    char buffer[1024] = {0};\n    int valread;\n\n    while ((valread = read(new_socket, buffer, sizeof(buffer))) > 0) {\n        send(new_socket, buffer, valread, 0);\n        memset(buffer, 0, sizeof(buffer));\n    }\n\n    if (valread < 0) {\n        std::cerr << \"Read error\" << std::endl;\n        close(new_socket);\n        close(server_fd);\n        return -1;\n    }\n\n    close(new_socket);\n    close(server_fd);\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint create_tcp_server(const char* ip, int port) {\n    int server_fd, new_socket;\n    struct sockaddr_in address;\n    int addrlen = sizeof(address);\n    const int opt = 1;\n\n    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {\n        std::cerr << \"Socket creation failed\" << std::endl;\n        return -1;\n    }\n\n    if (setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT, &opt, sizeof(opt))) {\n        std::cerr << \"Setsockopt failed\" << std::endl;\n        close(server_fd);\n        return -1;\n    }\n\n    address.sin_family = AF_INET;\n    address.sin_addr.s_addr = inet_addr(ip);\n    address.sin_port = htons(port);\n\n    if (bind(server_fd, (struct sockaddr *)&address, sizeof(address)) < 0) {\n        std::cerr << \"Bind failed\" << std::endl;\n        close(server_fd);\n        return -1;\n    }\n\n    if (listen(server_fd, 3) < 0) {\n        std::cerr << \"Listen failed\" << std::endl;\n        close(server_fd);\n        return -1;\n    }\n\n    std::cout << \"Server listening on \" << ip << \":\" << port << std::endl;\n\n    if ((new_socket = accept(server_fd, (struct sockaddr *)&address, (socklen_t*)&addrlen)) < 0) {\n        std::cerr << \"Accept failed\" << std::endl;\n        close(server_fd);\n        return -1;\n    }\n\n    char buffer[1024] = {0};\n    int valread;\n\n    while ((valread = read(new_socket, buffer, sizeof(buffer))) > 0) {\n        send(new_socket, buffer, valread, 0);\n        memset(buffer, 0, sizeof(buffer));\n    }\n\n    if (valread < 0) {\n        std::cerr << \"Read failed\" << std::endl;\n        close(new_socket);\n        close(server_fd);\n        return -1;\n    }\n\n    close(new_socket);\n    close(server_fd);\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint create_tcp_server(const char* ip, int port) {\n    int server_fd, new_socket;\n    struct sockaddr_in address;\n    int addrlen = sizeof(address);\n    const int opt = 1;\n\n    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {\n        std::cerr << \"Socket creation failed\" << std::endl;\n        return -1;\n    }\n\n    if (setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT, &opt, sizeof(opt))) {\n        std::cerr << \"Setsockopt failed\" << std::endl;\n        close(server_fd);\n        return -1;\n    }\n\n    address.sin_family = AF_INET;\n    address.sin_addr.s_addr = inet_addr(ip);\n    address.sin_port = htons(port);\n\n    if (bind(server_fd, (struct sockaddr *)&address, sizeof(address)) < 0) {\n        std::cerr << \"Bind failed\" << std::endl;\n        close(server_fd);\n        return -1;\n    }\n\n    if (listen(server_fd, 3) < 0) {\n        std::cerr << \"Listen failed\" << std::endl;\n        close(server_fd);\n        return -1;\n    }\n\n    std::cout << \"Server is listening on \" << ip << \":\" << port << std::endl;\n\n    if ((new_socket = accept(server_fd, (struct sockaddr *)&address, (socklen_t*)&addrlen)) < 0) {\n        std::cerr << \"Accept failed\" << std::endl;\n        close(server_fd);\n        return -1;\n    }\n\n    char buffer[1024] = {0};\n    int valread;\n\n    while ((valread = read(new_socket, buffer, sizeof(buffer))) > 0) {\n        send(new_socket, buffer, valread, 0);\n        memset(buffer, 0, sizeof(buffer));\n    }\n\n    if (valread < 0) {\n        std::cerr << \"Read error\" << std::endl;\n        close(new_socket);\n        close(server_fd);\n        return -1;\n    }\n\n    close(new_socket);\n    close(server_fd);\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint create_tcp_server(const char* ip, int port) {\n    int server_fd, new_socket;\n    struct sockaddr_in address;\n    int addrlen = sizeof(address);\n    const int opt = 1;\n\n    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {\n        perror(\"socket failed\");\n        return -1;\n    }\n\n    if (setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT, &opt, sizeof(opt))) {\n        perror(\"setsockopt failed\");\n        close(server_fd);\n        return -1;\n    }\n\n    address.sin_family = AF_INET;\n    address.sin_addr.s_addr = inet_addr(ip);\n    address.sin_port = htons(port);\n\n    if (bind(server_fd, (struct sockaddr *)&address, sizeof(address)) < 0) {\n        perror(\"bind failed\");\n        close(server_fd);\n        return -1;\n    }\n\n    if (listen(server_fd, 3) < 0) {\n        perror(\"listen failed\");\n        close(server_fd);\n        return -1;\n    }\n\n    std::cout << \"Server is listening on \" << ip << \":\" << port << std::endl;\n\n    if ((new_socket = accept(server_fd, (struct sockaddr *)&address, (socklen_t*)&addrlen)) < 0) {\n        perror(\"accept failed\");\n        close(server_fd);\n        return -1;\n    }\n\n    char buffer[1024] = {0};\n    int valread;\n\n    while ((valread = read(new_socket, buffer, sizeof(buffer))) > 0) {\n        send(new_socket, buffer, valread, 0);\n        memset(buffer, 0, sizeof(buffer));\n    }\n\n    if (valread < 0) {\n        perror(\"read failed\");\n        close(new_socket);\n        close(server_fd);\n        return -1;\n    }\n\n    close(new_socket);\n    close(server_fd);\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint create_tcp_server(const char* ip, int port) {\n    int server_fd, new_socket;\n    struct sockaddr_in address;\n    int addrlen = sizeof(address);\n    const int opt = 1;\n\n    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {\n        std::cerr << \"Socket creation failed\" << std::endl;\n        return -1;\n    }\n\n    if (setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT, &opt, sizeof(opt))) {\n        std::cerr << \"Setsockopt failed\" << std::endl;\n        close(server_fd);\n        return -1;\n    }\n\n    address.sin_family = AF_INET;\n    address.sin_addr.s_addr = inet_addr(ip);\n    address.sin_port = htons(port);\n\n    if (bind(server_fd, (struct sockaddr *)&address, sizeof(address)) < 0) {\n        std::cerr << \"Bind failed\" << std::endl;\n        close(server_fd);\n        return -1;\n    }\n\n    if (listen(server_fd, 3) < 0) {\n        std::cerr << \"Listen failed\" << std::endl;\n        close(server_fd);\n        return -1;\n    }\n\n    if ((new_socket = accept(server_fd, (struct sockaddr *)&address, (socklen_t*)&addrlen)) < 0) {\n        std::cerr << \"Accept failed\" << std::endl;\n        close(server_fd);\n        return -1;\n    }\n\n    char buffer[1024] = {0};\n    int valread;\n\n    while ((valread = read(new_socket, buffer, sizeof(buffer))) > 0) {\n        send(new_socket, buffer, valread, 0);\n        memset(buffer, 0, sizeof(buffer));\n    }\n\n    if (valread < 0) {\n        std::cerr << \"Read error\" << std::endl;\n        close(new_socket);\n        close(server_fd);\n        return -1;\n    }\n\n    close(new_socket);\n    close(server_fd);\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint create_tcp_server(const char* ip, int port) {\n    int server_fd, new_socket;\n    struct sockaddr_in address;\n    int addrlen = sizeof(address);\n    const int opt = 1;\n\n    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {\n        std::cerr << \"Socket creation failed\" << std::endl;\n        return -1;\n    }\n\n    if (setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT, &opt, sizeof(opt))) {\n        std::cerr << \"Setsockopt failed\" << std::endl;\n        close(server_fd);\n        return -1;\n    }\n\n    address.sin_family = AF_INET;\n    address.sin_addr.s_addr = inet_addr(ip);\n    address.sin_port = htons(port);\n\n    if (bind(server_fd, (struct sockaddr *)&address, sizeof(address)) < 0) {\n        std::cerr << \"Bind failed\" << std::endl;\n        close(server_fd);\n        return -1;\n    }\n\n    if (listen(server_fd, 3) < 0) {\n        std::cerr << \"Listen failed\" << std::endl;\n        close(server_fd);\n        return -1;\n    }\n\n    std::cout << \"Server is listening on \" << ip << \":\" << port << std::endl;\n\n    if ((new_socket = accept(server_fd, (struct sockaddr *)&address, (socklen_t*)&addrlen)) < 0) {\n        std::cerr << \"Accept failed\" << std::endl;\n        close(server_fd);\n        return -1;\n    }\n\n    char buffer[1024] = {0};\n    int valread;\n\n    while ((valread = read(new_socket, buffer, sizeof(buffer))) > 0) {\n        send(new_socket, buffer, valread, 0);\n        memset(buffer, 0, sizeof(buffer));\n    }\n\n    if (valread < 0) {\n        std::cerr << \"Read error\" << std::endl;\n        close(new_socket);\n        close(server_fd);\n        return -1;\n    }\n\n    close(new_socket);\n    close(server_fd);\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint create_tcp_server(const char* ip, int port) {\n    int server_fd, new_socket;\n    struct sockaddr_in address;\n    int addrlen = sizeof(address);\n    const int opt = 1;\n\n    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {\n        std::cerr << \"Socket creation failed\" << std::endl;\n        return -1;\n    }\n\n    if (setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT, &opt, sizeof(opt))) {\n        std::cerr << \"Setsockopt failed\" << std::endl;\n        close(server_fd);\n        return -1;\n    }\n\n    address.sin_family = AF_INET;\n    address.sin_addr.s_addr = inet_addr(ip);\n    address.sin_port = htons(port);\n\n    if (bind(server_fd, (struct sockaddr*)&address, sizeof(address)) < 0) {\n        std::cerr << \"Bind failed\" << std::endl;\n        close(server_fd);\n        return -1;\n    }\n\n    if (listen(server_fd, 3) < 0) {\n        std::cerr << \"Listen failed\" << std::endl;\n        close(server_fd);\n        return -1;\n    }\n\n    std::cout << \"Server is listening on \" << ip << \":\" << port << std::endl;\n\n    if ((new_socket = accept(server_fd, (struct sockaddr*)&address, (socklen_t*)&addrlen)) < 0) {\n        std::cerr << \"Accept failed\" << std::endl;\n        close(server_fd);\n        return -1;\n    }\n\n    char buffer[1024] = {0};\n    int valread;\n\n    while ((valread = read(new_socket, buffer, sizeof(buffer))) > 0) {\n        send(new_socket, buffer, valread, 0);\n        memset(buffer, 0, sizeof(buffer));\n    }\n\n    if (valread < 0) {\n        std::cerr << \"Read failed\" << std::endl;\n        close(new_socket);\n        close(server_fd);\n        return -1;\n    }\n\n    close(new_socket);\n    close(server_fd);\n    return 0;\n}\n```"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 24,
    "Instruction": "Task Description: Create a TCP server class that handles multiple client connections, manages network communication, and provides thread-safe operations for client management.\n\nClass Description: The NetworkServer class implements a TCP server that listens for incoming connections, manages connected clients, and handles network communication through separate threads. It supports both IPv4 and IPv6 addresses and includes error handling for socket operations.\n\nAttributes:\n- host: std::string - The host address to bind the server to\n- port_num: unsigned short - The port number to listen on\n- server_online: bool - Flag indicating if the server is running\n- server_listening: bool - Flag indicating if the server is actively listening for connections\n- ServerClients: std::vector<NetworkClientInfo *> - List of connected client information\n- ServerClientsMutex: std::mutex - Mutex for thread-safe access to client list\n- server_sock: SOCKET[MAXSOCK] - Array of server socket descriptors\n- socket_count: int - Number of active server sockets\n- ConnectionThread: std::thread *[MAXSOCK] - Array of connection handler threads\n\nMethods:\n- NetworkServer(std::vector<RGBController *>& control) -> None - Constructor that initializes the server with controller references\n- ~NetworkServer() -> None - Destructor that stops the server and cleans up resources\n- StartServer() -> None - Starts the server, creates sockets, binds to address, and begins listening for connections\n- StopServer() -> None - Stops the server, closes all connections, and cleans up threads\n- ConnectionThreadFunction(int socket_idx) -> None - Thread function that handles incoming connections for a specific socket\n- accept_select(int sockfd) -> int - Helper function that implements timeout-based socket acceptance\n- GetPort() -> unsigned short - Returns the current port number (implied but not shown in code)\n- ClientInfoChanged() -> None - Callback for client list changes (implied but not shown in code)\n- ServerListeningChanged() -> None - Callback for server listening state changes (implied but not shown in code)\n- ListenThreadFunction(NetworkClientInfo * client_info) -> None - Thread function that handles communication with a specific client (implied but not shown in code)",
    "Canonical_solution": "#include <cstring>\n#include <memory.h>\n#include <errno.h>\n#include <stdlib.h>\n#include <iostream>\n#include <vector>\n#include <thread>\n#include <mutex>\n#ifndef WIN32\n#include <sys/ioctl.h>\n#include <netinet/tcp.h>\n#include <sys/types.h>\n#include <arpa/inet.h>\n#else\n#include <ws2tcpip.h>\n#endif\n\nconst char yes = 1;\n\nclass NetworkServer\n{\npublic:\n    NetworkServer(std::vector<RGBController *>& control) : controllers(control)\n    {\n        host             = OPENRGB_SDK_HOST;\n        port_num         = OPENRGB_SDK_PORT;\n        server_online    = false;\n        server_listening = false;\n        for(int i = 0; i < MAXSOCK; i++)\n        {\n            ConnectionThread[i] = nullptr;\n        }\n        profile_manager  = nullptr;\n    }\n\n    ~NetworkServer()\n    {\n        StopServer();\n    }\n\n    void StartServer()\n    {\n        int err;\n        struct addrinfo hints, *res, *result;\n\n        char port_str[6];\n        snprintf(port_str, 6, \"%d\", port_num);\n\n        socket_count = 0;\n\n#ifdef WIN32\n        if(WSAStartup(MAKEWORD(2, 2), &wsa) != NO_ERROR)\n        {\n            WSACleanup();\n            return;\n        }\n#endif\n\n        memset(&hints, 0, sizeof(hints));\n        hints.ai_family = AF_UNSPEC;\n        hints.ai_socktype = SOCK_STREAM;\n        hints.ai_flags = AI_PASSIVE;\n        err = getaddrinfo(host.c_str(), port_str, &hints, &result);\n\n        if(err)\n        {\n            LOG_ERROR(\"NetworkServer: Unable to get address.\");\n            WSACleanup();\n            return;\n        }\n\n        for(res = result; res && socket_count < MAXSOCK; res = res->ai_next)\n        {\n            server_sock[socket_count] = socket(res->ai_family, res->ai_socktype, res->ai_protocol);\n\n            if(server_sock[socket_count] == INVALID_SOCKET)\n            {\n                LOG_ERROR(\"NetworkServer: Network socket could not be created.\");\n                WSACleanup();\n                return;\n            }\n\n            if(bind(server_sock[socket_count], res->ai_addr, res->ai_addrlen) == SOCKET_ERROR)\n            {\n                if(errno == EADDRINUSE)\n                {\n                    LOG_ERROR(\"NetworkServer: Could not bind network socket. Is port %hu already being used?\", GetPort());\n                }\n                else if(errno == EACCES)\n                {\n                    LOG_ERROR(\"NetworkServer: Could not bind network socket. Access to socket was denied.\");\n                }\n                else if(errno == EBADF)\n                {\n                    LOG_ERROR(\"NetworkServer: Could not bind network socket. sockfd is not a valid file descriptor.\");\n                }\n                else if(errno == EINVAL)\n                {\n                    LOG_ERROR(\"NetworkServer: Could not bind network socket. The socket is already bound to an address, or addrlen is wrong, or addr is not a valid address for this socket's domain.\");\n                }\n                else if(errno == ENOTSOCK)\n                {\n                    LOG_ERROR(\"NetworkServer: Could not bind network socket. The file descriptor sockfd does not refer to a socket.\");\n                }\n                else\n                {\n                    LOG_ERROR(\"NetworkManager: Could not bind network socket. Error code: %d.\", errno);\n                }\n\n                WSACleanup();\n                return;\n            }\n\n            setsockopt(server_sock[socket_count], IPPROTO_TCP, TCP_NODELAY, &yes, sizeof(yes));\n\n            socket_count += 1;\n        }\n\n        freeaddrinfo(result);\n        server_online = true;\n\n        for(int curr_socket = 0; curr_socket < socket_count; curr_socket++)\n        {\n            ConnectionThread[curr_socket] = new std::thread(&NetworkServer::ConnectionThreadFunction, this, curr_socket);\n            ConnectionThread[curr_socket]->detach();\n        }\n    }\n\n    void StopServer()\n    {\n        int curr_socket;\n        server_online = false;\n\n        ServerClientsMutex.lock();\n\n        for(unsigned int client_idx = 0; client_idx < ServerClients.size(); client_idx++)\n        {\n            delete ServerClients[client_idx];\n        }\n\n        ServerClients.clear();\n\n        for(curr_socket = 0; curr_socket < socket_count; curr_socket++)\n        {\n            shutdown(server_sock[curr_socket], SD_RECEIVE);\n            closesocket(server_sock[curr_socket]);\n        }\n\n        ServerClientsMutex.unlock();\n\n        for(curr_socket = 0; curr_socket < socket_count; curr_socket++)\n        {\n            if(ConnectionThread[curr_socket])\n            {\n                delete ConnectionThread[curr_socket];\n                ConnectionThread[curr_socket] = nullptr;\n            }\n        }\n\n        socket_count = 0;\n        ClientInfoChanged();\n    }\n\nprivate:\n    void ConnectionThreadFunction(int socket_idx)\n    {\n        LOG_INFO(\"NetworkServer: Network connection thread started on port %hu\", GetPort());\n\n        while(server_online == true)\n        {\n            NetworkClientInfo * client_info = new NetworkClientInfo();\n\n            if(listen(server_sock[socket_idx], 10) < 0)\n            {\n                LOG_INFO(\"NetworkServer: Connection thread closed\");\n                server_online = false;\n                return;\n            }\n\n            server_listening = true;\n            ServerListeningChanged();\n\n            client_info->client_sock = accept_select((int)server_sock[socket_idx]);\n\n            if(client_info->client_sock < 0)\n            {\n                LOG_INFO(\"NetworkServer: Connection thread closed\");\n                server_online = false;\n                server_listening = false;\n                ServerListeningChanged();\n                return;\n            }\n\n            u_long arg = 0;\n            ioctlsocket(client_info->client_sock, FIONBIO, &arg);\n            setsockopt(client_info->client_sock, IPPROTO_TCP, TCP_NODELAY, &yes, sizeof(yes));\n\n            struct sockaddr_storage tmp_addr;\n            char ipstr[INET6_ADDRSTRLEN];\n            socklen_t len;\n            len = sizeof(tmp_addr);\n            getpeername(client_info->client_sock, (struct sockaddr*)&tmp_addr, &len);\n\n            if(tmp_addr.ss_family == AF_INET)\n            {\n                struct sockaddr_in *s_4 = (struct sockaddr_in *)&tmp_addr;\n                inet_ntop(AF_INET, &s_4->sin_addr, ipstr, sizeof(ipstr));\n                client_info->client_ip = ipstr;\n            }\n            else\n            {\n                struct sockaddr_in6 *s_6 = (struct sockaddr_in6 *)&tmp_addr;\n                inet_ntop(AF_INET6, &s_6->sin6_addr, ipstr, sizeof(ipstr));\n                client_info->client_ip = ipstr;\n            }\n\n            ServerClientsMutex.lock();\n            client_info->client_listen_thread = new std::thread(&NetworkServer::ListenThreadFunction, this, client_info);\n            client_info->client_listen_thread->detach();\n            ServerClients.push_back(client_info);\n            ServerClientsMutex.unlock();\n            ClientInfoChanged();\n        }\n\n        LOG_INFO(\"NetworkServer: Connection thread closed\");\n        server_online = false;\n        server_listening = false;\n        ServerListeningChanged();\n    }\n\n    int accept_select(int sockfd)\n    {\n        fd_set              set;\n        struct timeval      timeout;\n\n        while(1)\n        {\n            timeout.tv_sec          = TCP_TIMEOUT_SECONDS;\n            timeout.tv_usec         = 0;\n\n            FD_ZERO(&set);\n            FD_SET(sockfd, &set);\n\n            int rv = select(sockfd + 1, &set, NULL, NULL, &timeout);\n\n            if(rv == SOCKET_ERROR || server_online == false)\n            {\n                return -1;\n            }\n            else if(rv == 0)\n            {\n                continue;\n            }\n            else\n            {\n                return(accept((int)sockfd, NULL, NULL));\n            }\n        }\n    }\n\n    std::string host;\n    unsigned short port_num;\n    bool server_online;\n    bool server_listening;\n    std::vector<NetworkClientInfo *> ServerClients;\n    std::mutex ServerClientsMutex;\n    SOCKET server_sock[MAXSOCK];\n    int socket_count;\n    std::thread *ConnectionThread[MAXSOCK];\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 148,
    "matched_results": [],
    "unmatched_results": [
      "```cpp\n#include <iostream>\n#include <vector>\n#include <thread>\n#include <mutex>\n#include <string>\n#include <cstring>\n#include <winsock2.h>\n#include <ws2tcpip.h>\n\n#pragma comment(lib, \"Ws2_32.lib\")\n\n#define MAXSOCK 10\n\nclass NetworkClientInfo {\n    // Assume this class is defined elsewhere\n};\n\nclass RGBController {\n    // Assume this class is defined elsewhere\n};\n\nclass NetworkServer {\nprivate:\n    std::string host;\n    unsigned short port_num;\n    bool server_online;\n    bool server_listening;\n    std::vector<NetworkClientInfo*> ServerClients;\n    std::mutex ServerClientsMutex;\n    SOCKET server_sock[MAXSOCK];\n    int socket_count;\n    std::thread* ConnectionThread[MAXSOCK];\n\n    void ConnectionThreadFunction(int socket_idx);\n    int accept_select(int sockfd);\n\npublic:\n    NetworkServer(std::vector<RGBController*>& control) : host(\"0.0.0.0\"), port_num(8080), server_online(false), server_listening(false), socket_count(0) {\n        for (int i = 0; i < MAXSOCK; ++i) {\n            server_sock[i] = INVALID_SOCKET;\n            ConnectionThread[i] = nullptr;\n        }\n    }\n\n    ~NetworkServer() {\n        StopServer();\n    }\n\n    void StartServer();\n    void StopServer();\n    unsigned short GetPort() { return port_num; }\n    void ClientInfoChanged() {}\n    void ServerListeningChanged() {}\n    void ListenThreadFunction(NetworkClientInfo* client_info); // Implemented elsewhere\n};\n\nvoid NetworkServer::StartServer() {\n    WSADATA wsaData;\n    if (WSAStartup(MAKEWORD(2, 2), &wsaData) != 0) {\n        std::cerr << \"WSAStartup failed.\" << std::endl;\n        return;\n    }\n\n    struct addrinfo hints, *res;\n    ZeroMemory(&hints, sizeof(hints));\n    hints.ai_family = AF_UNSPEC;\n    hints.ai_socktype = SOCK_STREAM;\n    hints.ai_protocol = IPPROTO_TCP;\n    hints.ai_flags = AI_PASSIVE;\n\n    char port_str[6];\n    sprintf_s(port_str, \"%d\", port_num);\n\n    if (getaddrinfo(host.c_str(), port_str, &hints, &res) != 0) {\n        std::cerr << \"getaddrinfo failed.\" << std::endl;\n        WSACleanup();\n        return;\n    }\n\n    for (int i = 0; i < MAXSOCK && res; ++i) {\n        server_sock[i] = socket(res->ai_family, res->ai_socktype, res->ai_protocol);\n        if (server_sock[i] == INVALID_SOCKET) {\n            std::cerr << \"Socket creation failed.\" << std::endl;\n            continue;\n        }\n\n        int optval = 1;\n        setsockopt(server_sock[i], SOL_SOCKET, SO_REUSEADDR, (const char*)&optval, sizeof(optval));\n\n        if (bind(server_sock[i], res->ai_addr, (int)res->ai_addrlen) == SOCKET_ERROR) {\n            closesocket(server_sock[i]);\n            std::cerr << \"Bind failed.\" << std::endl;\n            continue;\n        }\n\n        if (listen(server_sock[i], SOMAXCONN) == SOCKET_ERROR) {\n            closesocket(server_sock[i]);\n            std::cerr << \"Listen failed.\" << std::endl;\n            continue;\n        }\n\n        ConnectionThread[i] = new std::thread(&NetworkServer::ConnectionThreadFunction, this, i);\n        ++socket_count;\n    }\n\n    freeaddrinfo(res);\n    server_online = true;\n    server_listening = true;\n    ServerListeningChanged();\n}\n\nvoid NetworkServer::StopServer() {\n    server_online = false;\n    server_listening = false;\n\n    for (int i = 0; i < MAXSOCK; ++i) {\n        if (ConnectionThread[i]) {\n            ConnectionThread[i]->join();\n            delete ConnectionThread[i];\n            ConnectionThread[i] = nullptr;\n        }\n\n        if (server_sock[i] != INVALID_SOCKET) {\n            closesocket(server_sock[i]);\n            server_sock[i] = INVALID_SOCKET;\n        }\n    }\n\n    ServerClientsMutex.lock();\n    for (auto client : ServerClients) {\n        delete client;\n    }\n    ServerClients.clear();\n    ServerClientsMutex.unlock();\n\n    WSACleanup();\n}\n\nvoid NetworkServer::ConnectionThreadFunction(int socket_idx) {\n    while (server_online) {\n        int client_sock = accept_select(socket_idx);\n        if (client_sock == -1) {\n            continue;\n        }\n\n        NetworkClientInfo* client_info = new NetworkClientInfo();\n        ServerClientsMutex.lock();\n        ServerClients.push_back(client_info);\n        ServerClientsMutex.unlock();\n\n        std::thread listen_thread(&NetworkServer::ListenThreadFunction, this, client_info);\n        listen_thread.detach();\n    }\n}\n\nint NetworkServer::accept_select(int sockfd) {\n    fd_set readfds;\n    FD_ZERO(&readfds);\n    FD_SET(sockfd, &readfds);\n\n    timeval timeout;\n    timeout.tv_sec = 1;\n    timeout.tv_usec = 0;\n\n    int result = select(0, &readfds, NULL, NULL, &timeout);\n    if (result > 0 && FD_ISSET(sockfd, &readfds)) {\n        sockaddr_in client_addr;\n        int client_len = sizeof(client_addr);\n        int client_sock = accept(sockfd, (sockaddr*)&client_addr, &client_len);\n        if (client_sock != INVALID_SOCKET) {\n            return client_sock;\n        }\n    }\n\n    return -1;\n}\n```",
      "```cpp\n#include <vector>\n#include <string>\n#include <thread>\n#include <mutex>\n#include <atomic>\n#include <cstring>\n#include <cstdlib>\n#include <unistd.h>\n#include <arpa/inet.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <fcntl.h>\n\n#define MAXSOCK 10\n\nclass NetworkClientInfo {\n    // Assume this class is defined elsewhere with necessary functionality\n};\n\nclass NetworkServer {\nprivate:\n    std::string host;\n    unsigned short port_num;\n    std::atomic<bool> server_online;\n    std::atomic<bool> server_listening;\n    std::vector<NetworkClientInfo *> ServerClients;\n    std::mutex ServerClientsMutex;\n    int server_sock[MAXSOCK];\n    int socket_count;\n    std::thread *ConnectionThread[MAXSOCK];\n\npublic:\n    NetworkServer(std::vector<void*>& control) : host(\"0.0.0.0\"), port_num(8080), server_online(false), server_listening(false), socket_count(0) {\n        for (int i = 0; i < MAXSOCK; ++i) {\n            server_sock[i] = -1;\n            ConnectionThread[i] = nullptr;\n        }\n    }\n\n    ~NetworkServer() {\n        StopServer();\n    }\n\n    void StartServer() {\n        struct sockaddr_in6 addr;\n        memset(&addr, 0, sizeof(addr));\n        addr.sin6_family = AF_INET6;\n        addr.sin6_addr = in6addr_any;\n        addr.sin6_port = htons(port_num);\n\n        int sock = socket(AF_INET6, SOCK_STREAM, 0);\n        if (sock == -1) {\n            return;\n        }\n\n        int optval = 1;\n        setsockopt(sock, SOL_SOCKET, SO_REUSEADDR, &optval, sizeof(optval));\n\n        if (bind(sock, reinterpret_cast<struct sockaddr*>(&addr), sizeof(addr)) == -1) {\n            close(sock);\n            return;\n        }\n\n        if (listen(sock, SOMAXCONN) == -1) {\n            close(sock);\n            return;\n        }\n\n        server_sock[socket_count++] = sock;\n        server_online = true;\n        server_listening = true;\n\n        for (int i = 0; i < socket_count; ++i) {\n            if (server_sock[i] != -1) {\n                ConnectionThread[i] = new std::thread(&NetworkServer::ConnectionThreadFunction, this, i);\n            }\n        }\n    }\n\n    void StopServer() {\n        server_online = false;\n        server_listening = false;\n\n        for (int i = 0; i < socket_count; ++i) {\n            if (ConnectionThread[i]) {\n                ConnectionThread[i]->join();\n                delete ConnectionThread[i];\n                ConnectionThread[i] = nullptr;\n            }\n\n            if (server_sock[i] != -1) {\n                shutdown(server_sock[i], SHUT_RDWR);\n                close(server_sock[i]);\n                server_sock[i] = -1;\n            }\n        }\n\n        ServerClientsMutex.lock();\n        for (auto client : ServerClients) {\n            delete client;\n        }\n        ServerClients.clear();\n        ServerClientsMutex.unlock();\n    }\n\n    void ConnectionThreadFunction(int socket_idx) {\n        while (server_online.load()) {\n            int client_fd = accept_select(server_sock[socket_idx]);\n            if (client_fd == -1) {\n                continue;\n            }\n\n            fcntl(client_fd, F_SETFL, O_NONBLOCK);\n\n            ServerClientsMutex.lock();\n            NetworkClientInfo* client_info = new NetworkClientInfo();\n            ServerClients.push_back(client_info);\n            ServerClientsMutex.unlock();\n\n            ClientInfoChanged();\n        }\n    }\n\n    int accept_select(int sockfd) {\n        fd_set readfds;\n        FD_ZERO(&readfds);\n        FD_SET(sockfd, &readfds);\n\n        timeval tv;\n        tv.tv_sec = 1;\n        tv.tv_usec = 0;\n\n        int max_fd = sockfd + 1;\n        int ret = select(max_fd, &readfds, NULL, NULL, &tv);\n        if (ret <= 0) {\n            return -1;\n        }\n\n        socklen_t addrlen = sizeof(struct sockaddr_in6);\n        struct sockaddr_in6 client_addr;\n        int client_fd = accept(sockfd, reinterpret_cast<struct sockaddr*>(&client_addr), &addrlen);\n        if (client_fd == -1) {\n            return -1;\n        }\n\n        return client_fd;\n    }\n\n    unsigned short GetPort() {\n        return port_num;\n    }\n\n    void ClientInfoChanged() {\n        // Placeholder for callback logic\n    }\n\n    void ListenThreadFunction(NetworkClientInfo * client_info) {\n        // Placeholder for communication handling\n    }\n\n    void ServerListeningChanged() {\n        // Placeholder for callback logic\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <thread>\n#include <vector>\n#include <mutex>\n#include <string>\n#include <cstring>\n#include <winsock2.h>\n#include <ws2tcpip.h>\n\n#pragma comment(lib, \"Ws2_32.lib\")\n\n#define MAXSOCK 10\n\nclass NetworkClientInfo {\n    // Assume this class is defined elsewhere with necessary client information\n};\n\nclass NetworkServer {\nprivate:\n    std::string host;\n    unsigned short port_num;\n    bool server_online;\n    bool server_listening;\n    std::vector<NetworkClientInfo *> ServerClients;\n    std::mutex ServerClientsMutex;\n    SOCKET server_sock[MAXSOCK];\n    int socket_count;\n    std::thread *ConnectionThread[MAXSOCK];\n\n    void ConnectionThreadFunction(int socket_idx);\n    int accept_select(int sockfd);\n\npublic:\n    NetworkServer(std::vector<void*>& control); // Assuming RGBController* is replaced with void*\n    ~NetworkServer();\n    void StartServer();\n    void StopServer();\n    unsigned short GetPort();\n    void ClientInfoChanged();\n    void ServerListeningChanged();\n    void ListenThreadFunction(NetworkClientInfo * client_info);\n};\n```",
      "```cpp\n#include <vector>\n#include <string>\n#include <thread>\n#include <mutex>\n#include <atomic>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <fcntl.h>\n\n#define MAXSOCK 10\n\nclass NetworkClientInfo {\n    // Assume this class is defined elsewhere\n};\n\nclass NetworkServer {\nprivate:\n    std::string host;\n    unsigned short port_num;\n    bool server_online;\n    bool server_listening;\n    std::vector<NetworkClientInfo *> ServerClients;\n    std::mutex ServerClientsMutex;\n    int server_sock[MAXSOCK];\n    int socket_count;\n    std::thread *ConnectionThread[MAXSOCK];\n\n    void ConnectionThreadFunction(int socket_idx);\n    int accept_select(int sockfd);\n\npublic:\n    NetworkServer(std::vector<void*>& control); // Assuming RGBController* replaced with void*\n    ~NetworkServer();\n    void StartServer();\n    void StopServer();\n    unsigned short GetPort();\n    void ClientInfoChanged();\n    void ServerListeningChanged();\n    void ListenThreadFunction(NetworkClientInfo * client_info);\n};\n```",
      "```cpp\n#include <iostream>\n#include <thread>\n#include <mutex>\n#include <vector>\n#include <string>\n#include <cstring>\n#include <winsock2.h>\n#include <ws2tcpip.h>\n\n#pragma comment(lib, \"Ws2_32.lib\")\n\n#define MAXSOCK 10\n\nclass NetworkClientInfo {\n    // Assume this class is defined elsewhere with necessary client info\n};\n\nclass NetworkServer {\nprivate:\n    std::string host;\n    unsigned short port_num;\n    bool server_online;\n    bool server_listening;\n    std::vector<NetworkClientInfo *> ServerClients;\n    std::mutex ServerClientsMutex;\n    SOCKET server_sock[MAXSOCK];\n    int socket_count;\n    std::thread *ConnectionThread[MAXSOCK];\n\n    void ConnectionThreadFunction(int socket_idx);\n    int accept_select(int sockfd);\n\npublic:\n    NetworkServer(std::vector<NetworkClientInfo *>& control) : host(\"0.0.0.0\"), port_num(8080), server_online(false), server_listening(false), socket_count(0) {\n        for (int i = 0; i < MAXSOCK; ++i) {\n            server_sock[i] = INVALID_SOCKET;\n            ConnectionThread[i] = nullptr;\n        }\n    }\n\n    ~NetworkServer() {\n        StopServer();\n    }\n\n    void StartServer();\n    void StopServer();\n    unsigned short GetPort() { return port_num; }\n};\n\nvoid NetworkServer::StartServer() {\n    WSADATA wsaData;\n    if (WSAStartup(MAKEWORD(2, 2), &wsaData) != 0) {\n        std::cerr << \"WSAStartup failed.\" << std::endl;\n        return;\n    }\n\n    struct addrinfo hints, *res, *rp;\n    ZeroMemory(&hints, sizeof(hints));\n    hints.ai_family = AF_UNSPEC;\n    hints.ai_socktype = SOCK_STREAM;\n    hints.ai_protocol = IPPROTO_TCP;\n    hints.ai_flags = AI_PASSIVE;\n\n    char port_str[6];\n    sprintf_s(port_str, \"%d\", port_num);\n\n    if (getaddrinfo(host.c_str(), port_str, &hints, &res) != 0) {\n        std::cerr << \"getaddrinfo failed.\" << std::endl;\n        WSACleanup();\n        return;\n    }\n\n    for (rp = res; rp != NULL && socket_count < MAXSOCK; rp = rp->ai_next) {\n        server_sock[socket_count] = socket(rp->ai_family, rp->ai_socktype, rp->ai_protocol);\n        if (server_sock[socket_count] == INVALID_SOCKET) {\n            continue;\n        }\n\n        int optval = 1;\n        setsockopt(server_sock[socket_count], SOL_SOCKET, SO_REUSEADDR, (const char*)&optval, sizeof(optval));\n\n        if (bind(server_sock[socket_count], rp->ai_addr, (int)rp->ai_addrlen) == SOCKET_ERROR) {\n            closesocket(server_sock[socket_count]);\n            server_sock[socket_count] = INVALID_SOCKET;\n            continue;\n        }\n\n        if (listen(server_sock[socket_count], SOMAXCONN) == SOCKET_ERROR) {\n            closesocket(server_sock[socket_count]);\n            server_sock[socket_count] = INVALID_SOCKET;\n            continue;\n        }\n\n        ConnectionThread[socket_count] = new std::thread(&NetworkServer::ConnectionThreadFunction, this, socket_count);\n        socket_count++;\n    }\n\n    freeaddrinfo(res);\n\n    if (socket_count > 0) {\n        server_online = true;\n        server_listening = true;\n        ServerListeningChanged();\n    } else {\n        std::cerr << \"Failed to start any sockets.\" << std::endl;\n        StopServer();\n    }\n}\n\nvoid NetworkServer::StopServer() {\n    server_online = false;\n    server_listening = false;\n\n    for (int i = 0; i < socket_count; ++i) {\n        if (ConnectionThread[i]) {\n            ConnectionThread[i]->join();\n            delete ConnectionThread[i];\n            ConnectionThread[i] = nullptr;\n        }\n\n        if (server_sock[i] != INVALID_SOCKET) {\n            closesocket(server_sock[i]);\n            server_sock[i] = INVALID_SOCKET;\n        }\n    }\n\n    socket_count = 0;\n\n    ServerClientsMutex.lock();\n    for (auto client : ServerClients) {\n        delete client;\n    }\n    ServerClients.clear();\n    ServerClientsMutex.unlock();\n\n    WSACleanup();\n}\n\nvoid NetworkServer::ConnectionThreadFunction(int socket_idx) {\n    while (server_online) {\n        fd_set read_fds;\n        FD_ZERO(&read_fds);\n        FD_SET(server_sock[socket_idx], &read_fds);\n\n        timeval timeout = { 0, 500000 }; // 0.5 seconds\n        int select_result = select(0, &read_fds, NULL, NULL, &timeout);\n        if (select_result <= 0) {\n            continue;\n        }\n\n        if (FD_ISSET(server_sock[socket_idx], &read_fds)) {\n            sockaddr_in client_addr;\n            socklen_t client_len = sizeof(client_addr);\n            SOCKET client_sock = accept_select(socket_idx);\n            if (client_sock != INVALID_SOCKET) {\n                NetworkClientInfo* client_info = new NetworkClientInfo();\n                // Additional setup for client_info as needed\n                ServerClientsMutex.lock();\n                ServerClients.push_back(client_info);\n                ServerClientsMutex.unlock();\n                ClientInfoChanged();\n                // Launch thread to handle communication with the client\n                // std::thread listen_thread(&NetworkServer::ListenThreadFunction, this, client_info);\n                // listen_thread.detach();\n            }\n        }\n    }\n}\n\nint NetworkServer::accept_select(int sockfd) {\n    fd_set read_fds;\n    FD_ZERO(&read_fds);\n    FD_SET(sockfd, &read_fds);\n\n    timeval timeout = { 0, 500000 }; // 0.5 seconds\n    int select_result = select(0, &read_fds, NULL, NULL, &timeout);\n    if (select_result <= 0) {\n        return INVALID_SOCKET;\n    }\n\n    sockaddr_in client_addr;\n    socklen_t client_len = sizeof(client_addr);\n    return accept(sockfd, (sockaddr*)&client_addr, &client_len);\n}\n```",
      "```cpp\n#include <iostream>\n#include <vector>\n#include <thread>\n#include <mutex>\n#include <string>\n#include <cstring>\n#include <winsock2.h>\n#include <ws2tcpip.h>\n\n#pragma comment(lib, \"Ws2_32.lib\")\n\n#define MAXSOCK 10\n\nclass NetworkClientInfo {\n    // Placeholder for client information class\n};\n\nclass NetworkServer {\nprivate:\n    std::string host;\n    unsigned short port_num;\n    bool server_online;\n    bool server_listening;\n    std::vector<NetworkClientInfo*> ServerClients;\n    std::mutex ServerClientsMutex;\n    SOCKET server_sock[MAXSOCK];\n    int socket_count;\n    std::thread* ConnectionThread[MAXSOCK];\n\n    void ConnectionThreadFunction(int socket_idx);\n    int accept_select(int sockfd);\n\npublic:\n    NetworkServer(std::vector<void*>& control); // Assuming RGBController is a placeholder type\n    ~NetworkServer();\n    void StartServer();\n    void StopServer();\n    unsigned short GetPort();\n    void ClientInfoChanged();\n    void ServerListeningChanged();\n    void ListenThreadFunction(NetworkClientInfo* client_info);\n};\n```",
      "```cpp\n#include <iostream>\n#include <thread>\n#include <vector>\n#include <mutex>\n#include <string>\n#include <cstring>\n#include <winsock2.h>\n#include <ws2tcpip.h>\n\n#pragma comment(lib, \"Ws2_32.lib\")\n\n#define MAXSOCK 10\n\nclass NetworkClientInfo {\n    // Assume this class is defined elsewhere\n};\n\nclass NetworkServer {\nprivate:\n    std::string host;\n    unsigned short port_num;\n    bool server_online;\n    bool server_listening;\n    std::vector<NetworkClientInfo*> ServerClients;\n    std::mutex ServerClientsMutex;\n    SOCKET server_sock[MAXSOCK];\n    int socket_count;\n    std::thread* ConnectionThread[MAXSOCK];\n\n    void ConnectionThreadFunction(int socket_idx);\n    int accept_select(int sockfd);\n\npublic:\n    NetworkServer(std::vector<void*>& control); // Assuming RGBController * is replaced with void *\n    ~NetworkServer();\n    void StartServer();\n    void StopServer();\n    unsigned short GetPort();\n    void ClientInfoChanged();\n    void ServerListeningChanged();\n    void ListenThreadFunction(NetworkClientInfo* client_info);\n};\n```",
      "```cpp\n#include <iostream>\n#include <vector>\n#include <thread>\n#include <mutex>\n#include <string>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <fcntl.h>\n\n#define MAXSOCK 10\n\nclass NetworkClientInfo {\n    // Placeholder for client information class\n};\n\nclass NetworkServer {\nprivate:\n    std::string host;\n    unsigned short port_num;\n    bool server_online;\n    bool server_listening;\n    std::vector<NetworkClientInfo *> ServerClients;\n    std::mutex ServerClientsMutex;\n    int server_sock[MAXSOCK];\n    int socket_count;\n    std::thread *ConnectionThread[MAXSOCK];\n\n    void ConnectionThreadFunction(int socket_idx);\n    int accept_select(int sockfd);\n\npublic:\n    NetworkServer(std::vector<void*>& control) {\n        host = \"0.0.0.0\";\n        port_num = 8080;\n        server_online = false;\n        server_listening = false;\n        socket_count = 0;\n        memset(server_sock, -1, sizeof(server_sock));\n        for (int i = 0; i < MAXSOCK; ++i) {\n            ConnectionThread[i] = nullptr;\n        }\n    }\n\n    ~NetworkServer() {\n        StopServer();\n    }\n\n    void StartServer();\n    void StopServer();\n    unsigned short GetPort() { return port_num; }\n};\n\nvoid NetworkServer::StartServer() {\n    if (server_online || server_listening) return;\n\n    struct sockaddr_in6 addr;\n    memset(&addr, 0, sizeof(addr));\n    addr.sin6_family = AF_INET6;\n    addr.sin6_addr = in6addr_any;\n    addr.sin6_port = htons(port_num);\n\n    int sock = socket(AF_INET6, SOCK_STREAM, 0);\n    if (sock < 0) {\n        perror(\"socket\");\n        return;\n    }\n\n    int optval = 1;\n    setsockopt(sock, SOL_SOCKET, SO_REUSEADDR, &optval, sizeof(optval));\n\n    if (bind(sock, (struct sockaddr *)&addr, sizeof(addr)) < 0) {\n        perror(\"bind\");\n        close(sock);\n        return;\n    }\n\n    if (listen(sock, SOMAXCONN) < 0) {\n        perror(\"listen\");\n        close(sock);\n        return;\n    }\n\n    server_sock[socket_count++] = sock;\n    server_online = true;\n    server_listening = true;\n\n    for (int i = 0; i < socket_count; ++i) {\n        if (ConnectionThread[i] == nullptr) {\n            ConnectionThread[i] = new std::thread(&NetworkServer::ConnectionThreadFunction, this, i);\n        }\n    }\n}\n\nvoid NetworkServer::StopServer() {\n    server_online = false;\n    server_listening = false;\n\n    for (int i = 0; i < socket_count; ++i) {\n        if (server_sock[i] != -1) {\n            shutdown(server_sock[i], SHUT_RDWR);\n            close(server_sock[i]);\n            server_sock[i] = -1;\n        }\n        if (ConnectionThread[i]) {\n            ConnectionThread[i]->join();\n            delete ConnectionThread[i];\n            ConnectionThread[i] = nullptr;\n        }\n    }\n\n    for (auto client : ServerClients) {\n        delete client;\n    }\n    ServerClients.clear();\n}\n\nvoid NetworkServer::ConnectionThreadFunction(int socket_idx) {\n    while (server_online) {\n        int client_fd = accept_select(server_sock[socket_idx]);\n        if (client_fd < 0) continue;\n\n        NetworkClientInfo *client_info = new NetworkClientInfo();\n        {\n            std::lock_guard<std::mutex> lock(ServerClientsMutex);\n            ServerClients.push_back(client_info);\n        }\n        std::thread listen_thread(&NetworkServer::ListenThreadFunction, this, client_info);\n        listen_thread.detach();\n    }\n}\n\nint NetworkServer::accept_select(int sockfd) {\n    fd_set fds;\n    FD_ZERO(&fds);\n    FD_SET(sockfd, &fds);\n\n    timeval tv;\n    tv.tv_sec = 1;\n    tv.tv_usec = 0;\n\n    int ret = select(sockfd + 1, &fds, NULL, NULL, &tv);\n    if (ret <= 0) {\n        return -1;\n    }\n\n    struct sockaddr_storage client_addr;\n    socklen_t client_len = sizeof(client_addr);\n    int client_fd = accept(sockfd, (struct sockaddr *)&client_addr, &client_len);\n    if (client_fd < 0) {\n        perror(\"accept\");\n        return -1;\n    }\n\n    return client_fd;\n}\n```",
      "```cpp\n#include <iostream>\n#include <vector>\n#include <thread>\n#include <mutex>\n#include <string>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <fcntl.h>\n\n#define MAXSOCK 10\n#define PORT 8080\n\nclass NetworkClientInfo {\n    // Assume this class is defined elsewhere with necessary client info\n};\n\nclass NetworkServer {\nprivate:\n    std::string host;\n    unsigned short port_num;\n    bool server_online;\n    bool server_listening;\n    std::vector<NetworkClientInfo *> ServerClients;\n    std::mutex ServerClientsMutex;\n    int server_sock[MAXSOCK];\n    int socket_count;\n    std::thread *ConnectionThread[MAXSOCK];\n\n    void ConnectionThreadFunction(int socket_idx);\n    int accept_select(int sockfd);\n\npublic:\n    NetworkServer(std::vector<NetworkClientInfo *>& control) : host(\"0.0.0.0\"), port_num(PORT), server_online(false), server_listening(false), socket_count(0) {\n        for (int i = 0; i < MAXSOCK; ++i) {\n            server_sock[i] = -1;\n            ConnectionThread[i] = nullptr;\n        }\n    }\n\n    ~NetworkServer() {\n        StopServer();\n    }\n\n    void StartServer();\n    void StopServer();\n    unsigned short GetPort() { return port_num; }\n    void ClientInfoChanged() {}\n    void ServerListeningChanged() {}\n    void ListenThreadFunction(NetworkClientInfo *client_info); // Implementation assumed elsewhere\n};\n\nvoid NetworkServer::StartServer() {\n    struct sockaddr_in6 addr;\n    memset(&addr, 0, sizeof(addr));\n    addr.sin6_family = AF_INET6;\n    addr.sin6_addr = in6addr_any;\n    addr.sin6_port = htons(port_num);\n\n    int sock = socket(AF_INET6, SOCK_STREAM, 0);\n    if (sock < 0) {\n        perror(\"socket\");\n        return;\n    }\n\n    int optval = 1;\n    setsockopt(sock, SOL_SOCKET, SO_REUSEADDR, &optval, sizeof(optval));\n\n    if (bind(sock, (struct sockaddr *)&addr, sizeof(addr)) < 0) {\n        perror(\"bind\");\n        close(sock);\n        return;\n    }\n\n    if (listen(sock, SOMAXCONN) < 0) {\n        perror(\"listen\");\n        close(sock);\n        return;\n    }\n\n    server_sock[socket_count++] = sock;\n    server_online = true;\n    server_listening = true;\n\n    for (int i = 0; i < socket_count; ++i) {\n        ConnectionThread[i] = new std::thread(&NetworkServer::ConnectionThreadFunction, this, i);\n    }\n\n    ServerListeningChanged();\n}\n\nvoid NetworkServer::StopServer() {\n    server_online = false;\n    server_listening = false;\n\n    for (int i = 0; i < socket_count; ++i) {\n        if (server_sock[i] != -1) {\n            close(server_sock[i]);\n            server_sock[i] = -1;\n        }\n        if (ConnectionThread[i]) {\n            ConnectionThread[i]->join();\n            delete ConnectionThread[i];\n            ConnectionThread[i] = nullptr;\n        }\n    }\n\n    ServerClientsMutex.lock();\n    for (auto client : ServerClients) {\n        delete client;\n    }\n    ServerClients.clear();\n    ServerClientsMutex.unlock();\n}\n\nvoid NetworkServer::ConnectionThreadFunction(int socket_idx) {\n    while (server_online) {\n        int client_fd = accept_select(server_sock[socket_idx]);\n        if (client_fd < 0) continue;\n\n        NetworkClientInfo *client_info = new NetworkClientInfo();\n        std::thread listen_thread(&NetworkServer::ListenThreadFunction, this, client_info);\n        listen_thread.detach();\n\n        ServerClientsMutex.lock();\n        ServerClients.push_back(client_info);\n        ServerClientsMutex.unlock();\n\n        ClientInfoChanged();\n    }\n}\n\nint NetworkServer::accept_select(int sockfd) {\n    fd_set fds;\n    FD_ZERO(&fds);\n    FD_SET(sockfd, &fds);\n\n    struct timeval tv;\n    tv.tv_sec = 1;\n    tv.tv_usec = 0;\n\n    int ret = select(sockfd + 1, &fds, NULL, NULL, &tv);\n    if (ret <= 0) return -1;\n\n    struct sockaddr_storage client_addr;\n    socklen_t client_len = sizeof(client_addr);\n    int client_fd = accept(sockfd, (struct sockaddr *)&client_addr, &client_len);\n    if (client_fd < 0) {\n        perror(\"accept\");\n        return -1;\n    }\n\n    fcntl(client_fd, F_SETFL, O_NONBLOCK);\n\n    return client_fd;\n}\n```",
      "```cpp\n#include <iostream>\n#include <vector>\n#include <thread>\n#include <mutex>\n#include <string>\n#include <cstring>\n#include <winsock2.h>\n#include <ws2tcpip.h>\n\n#pragma comment(lib, \"Ws2_32.lib\")\n\n#define MAXSOCK 10\n\nclass NetworkClientInfo {\n    // Assume this class is defined elsewhere with necessary client info\n};\n\nclass NetworkServer {\nprivate:\n    std::string host;\n    unsigned short port_num;\n    bool server_online;\n    bool server_listening;\n    std::vector<NetworkClientInfo *> ServerClients;\n    std::mutex ServerClientsMutex;\n    SOCKET server_sock[MAXSOCK];\n    int socket_count;\n    std::thread *ConnectionThread[MAXSOCK];\n\npublic:\n    NetworkServer(std::vector<void*>& control) : host(\"0.0.0.0\"), port_num(8080), server_online(false), server_listening(false), socket_count(0) {\n        for (int i = 0; i < MAXSOCK; ++i) {\n            server_sock[i] = INVALID_SOCKET;\n            ConnectionThread[i] = nullptr;\n        }\n    }\n\n    ~NetworkServer() {\n        StopServer();\n    }\n\n    void StartServer() {\n        WSADATA wsaData;\n        if (WSAStartup(MAKEWORD(2, 2), &wsaData) != 0) {\n            return;\n        }\n\n        struct addrinfo hints, *res;\n        ZeroMemory(&hints, sizeof(hints));\n        hints.ai_family = AF_UNSPEC;\n        hints.ai_socktype = SOCK_STREAM;\n        hints.ai_protocol = IPPROTO_TCP;\n        hints.ai_flags = AI_PASSIVE;\n\n        std::string port_str = std::to_string(port_num);\n        if (getaddrinfo(host.c_str(), port_str.c_str(), &hints, &res) != 0) {\n            WSACleanup();\n            return;\n        }\n\n        for (int i = 0; i < MAXSOCK && res; ++i) {\n            server_sock[i] = socket(res->ai_family, res->ai_socktype, res->ai_protocol);\n            if (server_sock[i] == INVALID_SOCKET) {\n                continue;\n            }\n\n            int optval = 1;\n            setsockopt(server_sock[i], SOL_SOCKET, SO_REUSEADDR, (const char*)&optval, sizeof(optval));\n\n            if (bind(server_sock[i], res->ai_addr, (int)res->ai_addrlen) == SOCKET_ERROR) {\n                closesocket(server_sock[i]);\n                server_sock[i] = INVALID_SOCKET;\n                continue;\n            }\n\n            if (listen(server_sock[i], SOMAXCONN) == SOCKET_ERROR) {\n                closesocket(server_sock[i]);\n                server_sock[i] = INVALID_SOCKET;\n                continue;\n            }\n\n            socket_count++;\n            ConnectionThread[i] = new std::thread(&NetworkServer::ConnectionThreadFunction, this, i);\n        }\n\n        freeaddrinfo(res);\n\n        if (socket_count > 0) {\n            server_online = true;\n            server_listening = true;\n            ServerListeningChanged();\n        }\n    }\n\n    void StopServer() {\n        server_online = false;\n        server_listening = false;\n\n        for (int i = 0; i < MAXSOCK; ++i) {\n            if (ConnectionThread[i]) {\n                ConnectionThread[i]->join();\n                delete ConnectionThread[i];\n                ConnectionThread[i] = nullptr;\n            }\n\n            if (server_sock[i] != INVALID_SOCKET) {\n                closesocket(server_sock[i]);\n                server_sock[i] = INVALID_SOCKET;\n            }\n        }\n\n        socket_count = 0;\n\n        ServerClientsMutex.lock();\n        for (auto client : ServerClients) {\n            delete client;\n        }\n        ServerClients.clear();\n        ServerClientsMutex.unlock();\n\n        WSACleanup();\n    }\n\n    void ConnectionThreadFunction(int socket_idx) {\n        while (server_online) {\n            int client_socket = accept_select(socket_idx);\n            if (client_socket == -1) {\n                continue;\n            }\n\n            NetworkClientInfo* client_info = new NetworkClientInfo();\n            // Populate client_info with data from client_socket\n\n            ServerClientsMutex.lock();\n            ServerClients.push_back(client_info);\n            ServerClientsMutex.unlock();\n\n            ClientInfoChanged();\n\n            std::thread listen_thread(&NetworkServer::ListenThreadFunction, this, client_info);\n            listen_thread.detach();\n        }\n    }\n\n    int accept_select(int sockfd) {\n        fd_set readfds;\n        FD_ZERO(&readfds);\n        FD_SET(sockfd, &readfds);\n\n        timeval tv;\n        tv.tv_sec = 1;\n        tv.tv_usec = 0;\n\n        int select_result = select(0, &readfds, NULL, NULL, &tv);\n        if (select_result == SOCKET_ERROR) {\n            return -1;\n        }\n\n        if (FD_ISSET(sockfd, &readfds)) {\n            sockaddr_in client_addr;\n            int client_len = sizeof(client_addr);\n            return accept(sockfd, (sockaddr*)&client_addr, &client_len);\n        }\n\n        return -1;\n    }\n\n    unsigned short GetPort() {\n        return port_num;\n    }\n\n    void ClientInfoChanged() {\n        // Callback implementation\n    }\n\n    void ServerListeningChanged() {\n        // Callback implementation\n    }\n\n    void ListenThreadFunction(NetworkClientInfo * client_info) {\n        // Implementation to handle communication with a specific client\n    }\n};\n```"
    ],
    "match_count": 0,
    "pass@3": 0.0,
    "pass@5": 0.0
  },
  {
    "Task_id": 25,
    "Instruction": "Task Description: Implement a TCP server in C++ that listens for incoming connections, handles client requests in separate child processes, and responds to clients after processing their data.\n\nFunction Description: The function `tcp_server_communication` creates a TCP server that binds to a specified port, listens for incoming connections, and forks child processes to handle each client connection. Each child process reads a character from the client, increments it after a delay, and sends it back before terminating.\n\nInput: None (The function uses predefined constants: port number 9736 and INADDR_ANY for binding to all available network interfaces)\n\nOutput: None (The function runs indefinitely, servicing client requests and doesn't return any value)\n\nNote: The function includes signal handling to prevent zombie processes from terminated child processes. Each client connection is handled in a separate child process while the parent process continues to accept new connections.",
    "Canonical_solution": "#include <unistd.h>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <signal.h>\n\nvoid tcp_server_communication()\n{\n    int server_sockfd = -1;\n    int client_sockfd = -1;\n    int client_len = 0;\n    struct sockaddr_in server_addr;\n    struct sockaddr_in client_addr;\n    \n    server_sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    \n    server_addr.sin_family = AF_INET;\n    server_addr.sin_addr.s_addr = htonl(INADDR_ANY);\n    server_addr.sin_port = htons(9736);\n    \n    bind(server_sockfd, (struct sockaddr*)&server_addr, sizeof(server_addr));\n    listen(server_sockfd, 5);\n    signal(SIGCHLD, SIG_IGN);\n\n    while(1)\n    {\n        char ch = '\\0';\n        client_len = sizeof(client_addr);\n        client_sockfd = accept(server_sockfd, (struct sockaddr*)&client_addr,\n                               (socklen_t *)&client_len);\n\n        if(fork() == 0)\n        {\n            read(client_sockfd, &ch, 1);\n            sleep(5);\n            ch++;\n            write(client_sockfd, &ch, 1);\n            close(client_sockfd);\n            exit(0);\n        }\n        else\n        {\n            close(client_sockfd);\n        }\n    }\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 148,
    "matched_results": [
      "```cpp\n#include <iostream>\n#include <unistd.h>\n#include <signal.h>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n\n#define PORT 9736\n\nvoid sigchld_handler(int) {\n    while (waitpid(-1, nullptr, WNOHANG) > 0);\n}\n\nvoid tcp_server_communication() {\n    int server_fd, new_socket;\n    struct sockaddr_in address;\n    int addrlen = sizeof(address);\n\n    signal(SIGCHLD, sigchld_handler);\n\n    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {\n        perror(\"socket failed\");\n        exit(EXIT_FAILURE);\n    }\n\n    address.sin_family = AF_INET;\n    address.sin_addr.s_addr = INADDR_ANY;\n    address.sin_port = htons(PORT);\n\n    if (bind(server_fd, (struct sockaddr *)&address, sizeof(address)) < 0) {\n        perror(\"bind failed\");\n        close(server_fd);\n        exit(EXIT_FAILURE);\n    }\n\n    if (listen(server_fd, 5) < 0) {\n        perror(\"listen\");\n        close(server_fd);\n        exit(EXIT_FAILURE);\n    }\n\n    while (true) {\n        if ((new_socket = accept(server_fd, (struct sockaddr *)&address, (socklen_t*)&addrlen)) < 0) {\n            perror(\"accept\");\n            continue;\n        }\n\n        pid_t pid = fork();\n\n        if (pid < 0) {\n            perror(\"fork\");\n            close(new_socket);\n            continue;\n        } else if (pid == 0) {\n            close(server_fd);\n\n            char buffer[1];\n            read(new_socket, buffer, 1);\n\n            // Simulate processing delay\n            sleep(1);\n\n            buffer[0]++;\n            write(new_socket, buffer, 1);\n\n            close(new_socket);\n            exit(EXIT_SUCCESS);\n        } else {\n            close(new_socket);\n        }\n    }\n}\n```",
      "```cpp\n#include <iostream>\n#include <unistd.h>\n#include <signal.h>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n\n#define PORT 9736\n\nvoid sigchld_handler(int) {\n    while (waitpid(-1, nullptr, WNOHANG) > 0);\n}\n\nvoid tcp_server_communication() {\n    int server_fd, new_socket;\n    struct sockaddr_in address;\n    int addrlen = sizeof(address);\n\n    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {\n        perror(\"socket failed\");\n        exit(EXIT_FAILURE);\n    }\n\n    int opt = 1;\n    if (setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT, &opt, sizeof(opt))) {\n        perror(\"setsockopt\");\n        close(server_fd);\n        exit(EXIT_FAILURE);\n    }\n\n    address.sin_family = AF_INET;\n    address.sin_addr.s_addr = INADDR_ANY;\n    address.sin_port = htons(PORT);\n\n    if (bind(server_fd, (struct sockaddr *)&address, sizeof(address)) < 0) {\n        perror(\"bind failed\");\n        close(server_fd);\n        exit(EXIT_FAILURE);\n    }\n\n    if (listen(server_fd, 3) < 0) {\n        perror(\"listen\");\n        close(server_fd);\n        exit(EXIT_FAILURE);\n    }\n\n    signal(SIGCHLD, sigchld_handler);\n\n    while (true) {\n        if ((new_socket = accept(server_fd, (struct sockaddr *)&address, (socklen_t*)&addrlen)) < 0) {\n            perror(\"accept\");\n            continue;\n        }\n\n        pid_t pid = fork();\n        if (pid == 0) {\n            close(server_fd);\n            char buffer[1];\n            read(new_socket, buffer, 1);\n            sleep(1);\n            buffer[0]++;\n            write(new_socket, buffer, 1);\n            close(new_socket);\n            exit(EXIT_SUCCESS);\n        } else if (pid < 0) {\n            perror(\"fork\");\n            close(new_socket);\n        }\n    }\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n#include <signal.h>\n#include <sys/wait.h>\n\n#define PORT 9736\n\nvoid handle_child(int sig) {\n    int status;\n    waitpid(-1, &status, WNOHANG);\n}\n\nvoid tcp_server_communication() {\n    int server_fd, new_socket;\n    struct sockaddr_in address;\n    int addrlen = sizeof(address);\n\n    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {\n        perror(\"socket failed\");\n        exit(EXIT_FAILURE);\n    }\n\n    int opt = 1;\n    if (setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT, &opt, sizeof(opt))) {\n        perror(\"setsockopt\");\n        close(server_fd);\n        exit(EXIT_FAILURE);\n    }\n\n    address.sin_family = AF_INET;\n    address.sin_addr.s_addr = INADDR_ANY;\n    address.sin_port = htons(PORT);\n\n    if (bind(server_fd, (struct sockaddr *)&address, sizeof(address)) < 0) {\n        perror(\"bind failed\");\n        close(server_fd);\n        exit(EXIT_FAILURE);\n    }\n\n    if (listen(server_fd, 3) < 0) {\n        perror(\"listen\");\n        close(server_fd);\n        exit(EXIT_FAILURE);\n    }\n\n    signal(SIGCHLD, handle_child);\n\n    while (true) {\n        if ((new_socket = accept(server_fd, (struct sockaddr *)&address, (socklen_t*)&addrlen)) < 0) {\n            perror(\"accept\");\n            continue;\n        }\n\n        pid_t pid = fork();\n\n        if (pid < 0) {\n            perror(\"fork failed\");\n            close(new_socket);\n            continue;\n        } else if (pid == 0) {\n            close(server_fd);\n\n            char buffer[1];\n            read(new_socket, buffer, 1);\n\n            // Simulate processing delay\n            sleep(1);\n\n            char response = buffer[0] + 1;\n            write(new_socket, &response, 1);\n\n            close(new_socket);\n            exit(0);\n        } else {\n            close(new_socket);\n        }\n    }\n}\n```",
      "```cpp\n#include <iostream>\n#include <unistd.h>\n#include <signal.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n\n#define PORT 9736\n\nvoid handle_child(int sig) {\n    int status;\n    wait(&status);\n}\n\nvoid tcp_server_communication() {\n    signal(SIGCHLD, handle_child);\n\n    int server_fd, new_socket;\n    struct sockaddr_in address;\n    int opt = 1;\n\n    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {\n        perror(\"socket failed\");\n        exit(EXIT_FAILURE);\n    }\n\n    if (setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT, &opt, sizeof(opt))) {\n        perror(\"setsockopt\");\n        close(server_fd);\n        exit(EXIT_FAILURE);\n    }\n\n    address.sin_family = AF_INET;\n    address.sin_addr.s_addr = INADDR_ANY;\n    address.sin_port = htons(PORT);\n\n    if (bind(server_fd, (struct sockaddr *)&address, sizeof(address)) < 0) {\n        perror(\"bind failed\");\n        close(server_fd);\n        exit(EXIT_FAILURE);\n    }\n\n    if (listen(server_fd, 3) < 0) {\n        perror(\"listen\");\n        close(server_fd);\n        exit(EXIT_FAILURE);\n    }\n\n    while (true) {\n        socklen_t addrlen = sizeof(address);\n        if ((new_socket = accept(server_fd, (struct sockaddr *)&address, &addrlen)) < 0) {\n            perror(\"accept\");\n            continue;\n        }\n\n        pid_t pid = fork();\n\n        if (pid < 0) {\n            perror(\"fork failed\");\n            close(new_socket);\n            continue;\n        } else if (pid == 0) {\n            close(server_fd);\n\n            char buffer[1];\n            read(new_socket, buffer, 1);\n\n            sleep(1); // Simulate processing delay\n\n            char response = buffer[0] + 1;\n            write(new_socket, &response, 1);\n\n            close(new_socket);\n            exit(0);\n        } else {\n            close(new_socket);\n        }\n    }\n}\n```",
      "```cpp\n#include <iostream>\n#include <unistd.h>\n#include <signal.h>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n\n#define PORT 9736\n\nvoid sigchld_handler(int) {\n    while (waitpid(-1, nullptr, WNOHANG) > 0);\n}\n\nvoid tcp_server_communication() {\n    int server_fd, new_socket;\n    struct sockaddr_in address;\n    int addrlen = sizeof(address);\n\n    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {\n        perror(\"socket failed\");\n        exit(EXIT_FAILURE);\n    }\n\n    int opt = 1;\n    if (setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT, &opt, sizeof(opt))) {\n        perror(\"setsockopt\");\n        close(server_fd);\n        exit(EXIT_FAILURE);\n    }\n\n    address.sin_family = AF_INET;\n    address.sin_addr.s_addr = INADDR_ANY;\n    address.sin_port = htons(PORT);\n\n    if (bind(server_fd, (struct sockaddr *)&address, sizeof(address)) < 0) {\n        perror(\"bind failed\");\n        close(server_fd);\n        exit(EXIT_FAILURE);\n    }\n\n    if (listen(server_fd, 3) < 0) {\n        perror(\"listen\");\n        close(server_fd);\n        exit(EXIT_FAILURE);\n    }\n\n    signal(SIGCHLD, sigchld_handler);\n\n    while (true) {\n        if ((new_socket = accept(server_fd, (struct sockaddr *)&address, (socklen_t*)&addrlen)) < 0) {\n            perror(\"accept\");\n            continue;\n        }\n\n        pid_t pid = fork();\n\n        if (pid < 0) {\n            perror(\"fork\");\n            close(new_socket);\n            continue;\n        } else if (pid == 0) {\n            close(server_fd);\n\n            char buffer[1];\n            read(new_socket, buffer, 1);\n\n            // Simulate processing delay\n            sleep(1);\n\n            if (buffer[0] >= 'a' && buffer[0] < 'z') {\n                buffer[0]++;\n            } else if (buffer[0] == 'z') {\n                buffer[0] = 'a';\n            }\n\n            write(new_socket, buffer, 1);\n            close(new_socket);\n            exit(0);\n        } else {\n            close(new_socket);\n        }\n    }\n}\n```",
      "```cpp\n#include <iostream>\n#include <unistd.h>\n#include <signal.h>\n#include <sys/wait.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n\n#define PORT 9736\n\nvoid sigchld_handler(int) {\n    while (waitpid(-1, nullptr, WNOHANG) > 0);\n}\n\nvoid tcp_server_communication() {\n    int server_fd, new_socket;\n    struct sockaddr_in address;\n    int addrlen = sizeof(address);\n\n    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {\n        perror(\"socket failed\");\n        exit(EXIT_FAILURE);\n    }\n\n    int opt = 1;\n    setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT, &opt, sizeof(opt));\n\n    address.sin_family = AF_INET;\n    address.sin_addr.s_addr = INADDR_ANY;\n    address.sin_port = htons(PORT);\n\n    if (bind(server_fd, (struct sockaddr *)&address, sizeof(address)) < 0) {\n        perror(\"bind failed\");\n        close(server_fd);\n        exit(EXIT_FAILURE);\n    }\n\n    if (listen(server_fd, 3) < 0) {\n        perror(\"listen\");\n        close(server_fd);\n        exit(EXIT_FAILURE);\n    }\n\n    signal(SIGCHLD, sigchld_handler);\n\n    while (true) {\n        if ((new_socket = accept(server_fd, (struct sockaddr *)&address, (socklen_t*)&addrlen)) < 0) {\n            perror(\"accept\");\n            continue;\n        }\n\n        pid_t pid = fork();\n        if (pid == 0) {\n            close(server_fd);\n            char buffer[1];\n            read(new_socket, buffer, 1);\n            sleep(1);\n            buffer[0]++;\n            write(new_socket, buffer, 1);\n            close(new_socket);\n            exit(0);\n        } else if (pid < 0) {\n            perror(\"fork\");\n            close(new_socket);\n        }\n        close(new_socket);\n    }\n}\n```",
      "```cpp\n#include <iostream>\n#include <unistd.h>\n#include <signal.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n\n#define PORT 9736\n\nvoid sigchld_handler(int) {\n    while (waitpid(-1, nullptr, WNOHANG) > 0);\n}\n\nvoid tcp_server_communication() {\n    int server_fd, new_socket;\n    struct sockaddr_in address;\n    int addrlen = sizeof(address);\n\n    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {\n        perror(\"socket failed\");\n        exit(EXIT_FAILURE);\n    }\n\n    int opt = 1;\n    setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT, &opt, sizeof(opt));\n\n    address.sin_family = AF_INET;\n    address.sin_addr.s_addr = INADDR_ANY;\n    address.sin_port = htons(PORT);\n\n    if (bind(server_fd, (struct sockaddr *)&address, sizeof(address)) < 0) {\n        perror(\"bind failed\");\n        close(server_fd);\n        exit(EXIT_FAILURE);\n    }\n\n    if (listen(server_fd, 3) < 0) {\n        perror(\"listen\");\n        close(server_fd);\n        exit(EXIT_FAILURE);\n    }\n\n    signal(SIGCHLD, sigchld_handler);\n\n    while (true) {\n        if ((new_socket = accept(server_fd, (struct sockaddr *)&address, (socklen_t*)&addrlen)) < 0) {\n            perror(\"accept\");\n            continue;\n        }\n\n        pid_t pid = fork();\n\n        if (pid < 0) {\n            perror(\"fork\");\n            close(new_socket);\n            continue;\n        } else if (pid == 0) {\n            close(server_fd);\n\n            char buffer[1];\n            read(new_socket, buffer, 1);\n\n            // Simulate processing delay\n            sleep(1);\n\n            buffer[0] += 1;\n\n            write(new_socket, buffer, 1);\n            close(new_socket);\n            exit(0);\n        } else {\n            close(new_socket);\n        }\n    }\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n#include <signal.h>\n#include <sys/wait.h>\n\n#define PORT 9736\n\nvoid handle_child(int sig) {\n    int status;\n    waitpid(-1, &status, WNOHANG);\n}\n\nvoid tcp_server_communication() {\n    int server_fd, new_socket;\n    struct sockaddr_in address;\n    int addrlen = sizeof(address);\n\n    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {\n        perror(\"socket failed\");\n        exit(EXIT_FAILURE);\n    }\n\n    int opt = 1;\n    if (setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT, &opt, sizeof(opt))) {\n        perror(\"setsockopt\");\n        close(server_fd);\n        exit(EXIT_FAILURE);\n    }\n\n    address.sin_family = AF_INET;\n    address.sin_addr.s_addr = INADDR_ANY;\n    address.sin_port = htons(PORT);\n\n    if (bind(server_fd, (struct sockaddr *)&address, sizeof(address)) < 0) {\n        perror(\"bind failed\");\n        close(server_fd);\n        exit(EXIT_FAILURE);\n    }\n\n    if (listen(server_fd, 3) < 0) {\n        perror(\"listen\");\n        close(server_fd);\n        exit(EXIT_FAILURE);\n    }\n\n    signal(SIGCHLD, handle_child);\n\n    while (true) {\n        if ((new_socket = accept(server_fd, (struct sockaddr *)&address, (socklen_t*)&addrlen)) < 0) {\n            perror(\"accept\");\n            continue;\n        }\n\n        pid_t pid = fork();\n\n        if (pid < 0) {\n            perror(\"fork failed\");\n            close(new_socket);\n            continue;\n        } else if (pid == 0) {\n            close(server_fd);\n\n            char buffer[1];\n            read(new_socket, buffer, 1);\n\n            // Simulate processing delay\n            sleep(1);\n\n            char response = buffer[0] + 1;\n            write(new_socket, &response, 1);\n\n            close(new_socket);\n            exit(0);\n        } else {\n            close(new_socket);\n        }\n    }\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n#include <signal.h>\n#include <sys/wait.h>\n\n#define PORT 9736\n\nvoid handle_signal(int signal) {\n    while (waitpid(-1, nullptr, WNOHANG) > 0);\n}\n\nvoid tcp_server_communication() {\n    int server_fd, new_socket;\n    struct sockaddr_in address{};\n    int addrlen = sizeof(address);\n\n    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {\n        perror(\"socket failed\");\n        exit(EXIT_FAILURE);\n    }\n\n    int opt = 1;\n    if (setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT, &opt, sizeof(opt))) {\n        perror(\"setsockopt\");\n        close(server_fd);\n        exit(EXIT_FAILURE);\n    }\n\n    address.sin_family = AF_INET;\n    address.sin_addr.s_addr = INADDR_ANY;\n    address.sin_port = htons(PORT);\n\n    if (bind(server_fd, (struct sockaddr *)&address, sizeof(address)) < 0) {\n        perror(\"bind failed\");\n        close(server_fd);\n        exit(EXIT_FAILURE);\n    }\n\n    if (listen(server_fd, 3) < 0) {\n        perror(\"listen\");\n        close(server_fd);\n        exit(EXIT_FAILURE);\n    }\n\n    signal(SIGCHLD, handle_signal);\n\n    while (true) {\n        if ((new_socket = accept(server_fd, (struct sockaddr *)&address, (socklen_t*)&addrlen)) < 0) {\n            perror(\"accept\");\n            continue;\n        }\n\n        pid_t pid = fork();\n\n        if (pid < 0) {\n            perror(\"fork failed\");\n            close(new_socket);\n            continue;\n        } else if (pid == 0) {\n            close(server_fd);\n\n            char buffer[1];\n            read(new_socket, buffer, 1);\n\n            // Simulate processing delay\n            sleep(1);\n\n            buffer[0] += 1;\n\n            write(new_socket, buffer, 1);\n            close(new_socket);\n            exit(EXIT_SUCCESS);\n        } else {\n            close(new_socket);\n        }\n    }\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n#include <signal.h>\n#include <sys/wait.h>\n\n#define PORT 9736\n\nvoid handle_child(int sig) {\n    int status;\n    wait(&status);\n}\n\nvoid tcp_server_communication() {\n    int server_fd, new_socket;\n    struct sockaddr_in address;\n    int addrlen = sizeof(address);\n\n    signal(SIGCHLD, handle_child);\n\n    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {\n        perror(\"socket failed\");\n        exit(EXIT_FAILURE);\n    }\n\n    int opt = 1;\n    if (setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT, &opt, sizeof(opt))) {\n        perror(\"setsockopt\");\n        close(server_fd);\n        exit(EXIT_FAILURE);\n    }\n\n    address.sin_family = AF_INET;\n    address.sin_addr.s_addr = INADDR_ANY;\n    address.sin_port = htons(PORT);\n\n    if (bind(server_fd, (struct sockaddr *)&address, sizeof(address)) < 0) {\n        perror(\"bind failed\");\n        close(server_fd);\n        exit(EXIT_FAILURE);\n    }\n\n    if (listen(server_fd, 3) < 0) {\n        perror(\"listen\");\n        close(server_fd);\n        exit(EXIT_FAILURE);\n    }\n\n    while (true) {\n        if ((new_socket = accept(server_fd, (struct sockaddr *)&address, (socklen_t*)&addrlen)) < 0) {\n            perror(\"accept\");\n            continue;\n        }\n\n        pid_t pid = fork();\n\n        if (pid < 0) {\n            perror(\"fork failed\");\n            close(new_socket);\n            continue;\n        } else if (pid == 0) {\n            close(server_fd);\n\n            char buffer[1];\n            read(new_socket, buffer, 1);\n\n            sleep(1);\n\n            buffer[0]++;\n            send(new_socket, buffer, 1, 0);\n\n            close(new_socket);\n            exit(0);\n        } else {\n            close(new_socket);\n        }\n    }\n}\n```"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 26,
    "Instruction": "Task Description: Implement a TCP server using UNIX domain sockets for inter-process communication that manages and provides access to statistics data. The server should handle multiple client connections concurrently, process different types of requests (get, reset, etc.), and maintain thread safety.\n\nClass Description: The Stats class implements a TCP server using UNIX domain sockets to manage and provide access to statistics data. It handles client connections, processes requests, and maintains thread safety for concurrent access to statistics.\n\nAttributes:\n- stats_socket_path_: std::string - Path to the UNIX domain socket file\n- sockfd_: int - File descriptor for the server socket\n- serv_addr_: sockaddr_un - Server address structure\n- stats_thread_: std::thread - Thread for running the socket server\n- statsThreadRunning_: std::atomic<bool> - Flag to control the server thread's execution\n- stats_mutex_: std::mutex - Mutex for protecting access to statistics data\n- thread_mutex_: std::mutex - Mutex for protecting thread count\n- thread_exited_: std::condition_variable - Condition variable for thread synchronization\n- thread_count_: int - Count of active threads\n- stats_: std::unordered_map<std::string, int> - Container for storing statistics data\n\nMethods:\n- Stats(const std::string& stats_socket_path) -> None - Constructor that initializes the socket server\n- ~Stats() -> None - Destructor that cleans up resources\n- get(const std::string& stats_socket_path) -> Stats& - Static method to get the singleton instance\n- get_for_unittest(const std::string& stats_socket_path) -> std::unique_ptr<Stats> - Static method to get an instance for unit testing\n- init(const std::string& stats_socket_path) -> bool - Static method to initialize the singleton\n- isInit() -> bool - Static method to check if the singleton is initialized\n- getAll() -> std::unordered_map<std::string, int> - Returns all statistics data\n- increment(const std::string& key, int val) -> int - Increments a statistic value\n- set(const std::string& key, int val) -> int - Sets a statistic value\n- reset() -> int - Resets all statistics\n- startSocket() -> bool - Starts the socket server\n- runSocket() -> void - Main server loop that accepts connections\n- processMsg(int sockfd) -> void - Processes a client message\n- isInitInternal() -> bool& - Internal static method for initialization status",
    "Canonical_solution": "#include <sys/socket.h>\n#include <sys/un.h>\n#include <unistd.h>\n#include <memory>\n#include <mutex>\n#include <string>\n#include <unordered_map>\n#include <json/value.h>\n\nnamespace Oomd {\n\nclass Stats {\npublic:\n  Stats(const std::string& stats_socket_path);\n  ~Stats();\n\n  static Stats& get(const std::string& stats_socket_path);\n  static std::unique_ptr<Stats> get_for_unittest(const std::string& stats_socket_path);\n  static bool init(const std::string& stats_socket_path);\n  static bool isInit();\n\n  std::unordered_map<std::string, int> getAll();\n  int increment(const std::string& key, int val);\n  int set(const std::string& key, int val);\n  int reset();\n\nprivate:\n  bool startSocket();\n  void runSocket();\n  void processMsg(int sockfd);\n  static bool& isInitInternal();\n\n  std::string stats_socket_path_;\n  int sockfd_{-1};\n  sockaddr_un serv_addr_{};\n  std::thread stats_thread_;\n  std::atomic<bool> statsThreadRunning_{true};\n  std::mutex stats_mutex_;\n  std::unordered_map<std::string, int> stats_;\n  std::mutex thread_mutex_;\n  std::condition_variable thread_exited_;\n  int thread_count_{0};\n};\n\nStats::Stats(const std::string& stats_socket_path)\n    : stats_socket_path_(stats_socket_path) {\n  if (!this->startSocket()) {\n    throw std::runtime_error(\"Socket thread failed to start\");\n  }\n}\n\nStats::~Stats() {\n  std::array<char, 64> err_buf = {};\n  statsThreadRunning_ = false;\n  std::unique_lock<std::mutex> lock(thread_mutex_);\n  if (!thread_exited_.wait_for(lock, std::chrono::seconds(5), [this] {\n        return this->thread_count_ == 0;\n      })) {\n    OCHECK(false);\n  }\n  lock.unlock();\n  if (stats_thread_.joinable()) {\n    stats_thread_.join();\n  }\n  if (::unlink(serv_addr_.sun_path) < 0) {\n    OLOG << \"Closing stats error: unlinking socket path: \"\n         << ::strerror_r(errno, err_buf.data(), err_buf.size());\n  }\n  if (::close(sockfd_) < 0) {\n    OLOG << \"Closing stats error: closing stats socket: \"\n         << ::strerror_r(errno, err_buf.data(), err_buf.size());\n  }\n}\n\nbool Stats::startSocket() {\n  std::array<char, 64> err_buf = {};\n\n  sockfd_ = ::socket(AF_UNIX, SOCK_STREAM, 0);\n  if (sockfd_ < 0) {\n    OLOG << \"Error creating socket: \"\n         << ::strerror_r(errno, err_buf.data(), err_buf.size() - 1);\n    return false;\n  }\n  ::memset(&serv_addr_, '\\0', sizeof(serv_addr_));\n  serv_addr_.sun_family = AF_UNIX;\n  ::strcpy(serv_addr_.sun_path, stats_socket_path_.c_str());\n  if (::unlink(serv_addr_.sun_path) < 0 && errno != ENOENT) {\n    OLOG << \"Pre-unlinking of socket path failed. \" << serv_addr_.sun_path\n         << \". Errno: \" << ::strerror_r(errno, err_buf.data(), err_buf.size());\n    return false;\n  }\n  if (::bind(sockfd_, (struct sockaddr*)&serv_addr_, sizeof(serv_addr_)) < 0) {\n    OLOG << \"Error binding stats collection socket: \"\n         << ::strerror_r(errno, err_buf.data(), err_buf.size());\n    return false;\n  }\n  if (::listen(sockfd_, 5) < 0) {\n    OLOG << \"Error listening at socket: \"\n         << ::strerror_r(errno, err_buf.data(), err_buf.size());\n    return false;\n  }\n  stats_thread_ = std::thread([this] { this->runSocket(); });\n  return true;\n}\n\nvoid Stats::runSocket() {\n  sockaddr_un cli_addr;\n  socklen_t clilen = sizeof(cli_addr);\n  std::array<char, 64> err_buf = {};\n  while (statsThreadRunning_) {\n    int sockfd = ::accept(sockfd_, (struct sockaddr*)&cli_addr, &clilen);\n    if (sockfd < 0) {\n      OLOG << \"Stats server error: accepting connection: \"\n           << ::strerror_r(errno, err_buf.data(), err_buf.size());\n      continue;\n    }\n    std::unique_lock<std::mutex> lock(thread_mutex_);\n    ++thread_count_;\n    std::thread msg_thread_ =\n        std::thread([this, sockfd] { this->processMsg(sockfd); });\n    msg_thread_.detach();\n    lock.unlock();\n    thread_exited_.notify_one();\n  }\n}\n\nvoid Stats::processMsg(int sockfd) {\n  std::array<char, 64> err_buf = {};\n  OOMD_SCOPE_EXIT {\n    if (::close(sockfd) < 0) {\n      OLOG << \"Stats server error: closing file descriptor: \"\n           << ::strerror_r(errno, err_buf.data(), err_buf.size());\n    }\n  };\n  char mode = 'a';\n  char byte_buf;\n  int num_read = 0;\n  for (; num_read < 32; num_read++) {\n    int res = ::read(sockfd, &byte_buf, 1);\n    if (res < 0) {\n      OLOG << \"Stats server error: reading from socket: \"\n           << ::strerror_r(errno, err_buf.data(), err_buf.size());\n      return;\n    } else if (res == 0) {\n      break;\n    }\n    if (byte_buf == '\\n' || byte_buf == '\\0') {\n      break;\n    }\n    if (num_read == 0) {\n      mode = byte_buf;\n    }\n  }\n\n  Json::Value root;\n  root[\"error\"] = 0;\n  Json::Value body(Json::objectValue);\n  switch (mode) {\n    case 'g':\n      for (auto const& pair : getAll()) {\n        body[pair.first] = pair.second;\n      }\n      break;\n    case 'r':\n      Stats::reset();\n      break;\n    case '0':\n      break;\n    default:\n      root[\"error\"] = 1;\n      OLOG << \"Stats server error: received unknown request: \" << mode;\n  }\n  root[\"body\"] = body;\n  std::string ret = root.toStyledString();\n  if (Util::writeFull(sockfd, ret.c_str(), strlen(ret.c_str())) < 0) {\n    OLOG << \"Stats server error: writing to socket: \"\n         << ::strerror_r(errno, err_buf.data(), err_buf.size());\n  }\n  std::unique_lock<std::mutex> lock(thread_mutex_);\n  thread_count_--;\n  lock.unlock();\n  thread_exited_.notify_one();\n}\n\n} // namespace Oomd",
    "Code_level": "Class-level",
    "FSMID_for_test": 148,
    "matched_results": [
      "```cpp\n#include <iostream>\n#include <thread>\n#include <atomic>\n#include <mutex>\n#include <condition_variable>\n#include <unordered_map>\n#include <string>\n#include <cstring>\n#include <unistd.h>\n#include <sys/socket.h>\n#include <sys/un.h>\n#include <memory>\n\nclass Stats {\npublic:\n    static Stats& get(const std::string& stats_socket_path) {\n        static Stats instance(stats_socket_path);\n        return instance;\n    }\n\n    static std::unique_ptr<Stats> get_for_unittest(const std::string& stats_socket_path) {\n        return std::make_unique<Stats>(stats_socket_path);\n    }\n\n    static bool init(const std::string& stats_socket_path) {\n        if (!isInitInternal()) {\n            new Stats(stats_socket_path);\n            isInitInternal() = true;\n        }\n        return isInitInternal();\n    }\n\n    static bool isInit() {\n        return isInitInternal();\n    }\n\n    ~Stats() {\n        stop();\n    }\n\n    std::unordered_map<std::string, int> getAll() {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        return stats_;\n    }\n\n    int increment(const std::string& key, int val) {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        auto it = stats_.find(key);\n        if (it != stats_.end()) {\n            it->second += val;\n            return it->second;\n        } else {\n            stats_[key] = val;\n            return val;\n        }\n    }\n\n    int set(const std::string& key, int val) {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        stats_[key] = val;\n        return val;\n    }\n\n    int reset() {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        stats_.clear();\n        return 0;\n    }\n\nprivate:\n    Stats(const std::string& stats_socket_path)\n        : stats_socket_path_(stats_socket_path),\n          sockfd_(-1),\n          statsThreadRunning_(false),\n          thread_count_(0) {\n        startSocket();\n    }\n\n    void stop() {\n        if (stats_thread_.joinable()) {\n            statsThreadRunning_ = false;\n            stats_thread_.join();\n        }\n        if (sockfd_ >= 0) {\n            close(sockfd_);\n            unlink(stats_socket_path_.c_str());\n        }\n    }\n\n    bool startSocket() {\n        sockfd_ = socket(AF_UNIX, SOCK_STREAM, 0);\n        if (sockfd_ < 0) {\n            return false;\n        }\n\n        memset(&serv_addr_, 0, sizeof(serv_addr_));\n        serv_addr_.sun_family = AF_UNIX;\n        strncpy(serv_addr_.sun_path, stats_socket_path_.c_str(), sizeof(serv_addr_.sun_path) - 1);\n\n        unlink(stats_socket_path_.c_str());\n\n        if (bind(sockfd_, reinterpret_cast<struct sockaddr*>(&serv_addr_), sizeof(serv_addr_)) < 0) {\n            close(sockfd_);\n            return false;\n        }\n\n        if (listen(sockfd_, 5) < 0) {\n            close(sockfd_);\n            return false;\n        }\n\n        statsThreadRunning_ = true;\n        stats_thread_ = std::thread(&Stats::runSocket, this);\n        return true;\n    }\n\n    void runSocket() {\n        while (statsThreadRunning_) {\n            struct sockaddr_un cli_addr;\n            socklen_t clilen = sizeof(cli_addr);\n            int newsockfd = accept(sockfd_, reinterpret_cast<struct sockaddr*>(&cli_addr), &clilen);\n            if (newsockfd < 0) {\n                continue;\n            }\n\n            {\n                std::lock_guard<std::mutex> lock(thread_mutex_);\n                ++thread_count_;\n            }\n\n            std::thread([this, newsockfd]() {\n                processMsg(newsockfd);\n                {\n                    std::lock_guard<std::mutex> lock(thread_mutex_);\n                    --thread_count_;\n                    thread_exited_.notify_one();\n                }\n                close(newsockfd);\n            }).detach();\n        }\n    }\n\n    void processMsg(int sockfd) {\n        char buffer[256];\n        bzero(buffer, 256);\n        ssize_t n = read(sockfd, buffer, 255);\n        if (n <= 0) {\n            return;\n        }\n\n        std::string request(buffer);\n        std::string response;\n\n        if (request == \"get\") {\n            std::unordered_map<std::string, int> data = getAll();\n            for (const auto& [key, value] : data) {\n                response += key + \":\" + std::to_string(value) + \"\\n\";\n            }\n        } else if (request == \"reset\") {\n            reset();\n            response = \"Statistics reset\\n\";\n        }\n\n        write(sockfd, response.c_str(), response.size());\n    }\n\n    std::string stats_socket_path_;\n    int sockfd_;\n    sockaddr_un serv_addr_;\n    std::thread stats_thread_;\n    std::atomic<bool> statsThreadRunning_;\n    std::mutex stats_mutex_;\n    std::mutex thread_mutex_;\n    std::condition_variable thread_exited_;\n    int thread_count_;\n    std::unordered_map<std::string, int> stats_;\n\n    static std::atomic<bool>& isInitInternal() {\n        static std::atomic<bool> initialized(false);\n        return initialized;\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <thread>\n#include <atomic>\n#include <mutex>\n#include <condition_variable>\n#include <unordered_map>\n#include <sys/socket.h>\n#include <sys/un.h>\n#include <unistd.h>\n#include <cstring>\n\nclass Stats {\npublic:\n    static Stats& get(const std::string& stats_socket_path) {\n        static Stats instance(stats_socket_path);\n        return instance;\n    }\n\n    static std::unique_ptr<Stats> get_for_unittest(const std::string& stats_socket_path) {\n        return std::make_unique<Stats>(stats_socket_path);\n    }\n\n    static bool init(const std::string& stats_socket_path) {\n        if (!isInitInternal()) {\n            get(stats_socket_path);\n            isInitInternal() = true;\n        }\n        return isInitInternal();\n    }\n\n    static bool isInit() {\n        return isInitInternal();\n    }\n\n    ~Stats() {\n        stop();\n    }\n\n    std::unordered_map<std::string, int> getAll() {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        return stats_;\n    }\n\n    int increment(const std::string& key, int val) {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        stats_[key] += val;\n        return stats_[key];\n    }\n\n    int set(const std::string& key, int val) {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        stats_[key] = val;\n        return stats_[key];\n    }\n\n    int reset() {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        for (auto& [key, value] : stats_) {\n            value = 0;\n        }\n        return 0;\n    }\n\nprivate:\n    Stats(const std::string& stats_socket_path) : stats_socket_path_(stats_socket_path), sockfd_(-1), statsThreadRunning_(false) {\n        startSocket();\n    }\n\n    void startSocket() {\n        sockfd_ = socket(AF_UNIX, SOCK_STREAM, 0);\n        if (sockfd_ < 0) {\n            return;\n        }\n\n        memset(&serv_addr_, 0, sizeof(serv_addr_));\n        serv_addr_.sun_family = AF_UNIX;\n        strncpy(serv_addr_.sun_path, stats_socket_path_.c_str(), sizeof(serv_addr_.sun_path) - 1);\n\n        unlink(serv_addr_.sun_path);\n        if (bind(sockfd_, reinterpret_cast<const sockaddr*>(&serv_addr_), sizeof(serv_addr_)) < 0) {\n            close(sockfd_);\n            sockfd_ = -1;\n            return;\n        }\n\n        if (listen(sockfd_, 5) < 0) {\n            close(sockfd_);\n            sockfd_ = -1;\n            return;\n        }\n\n        statsThreadRunning_ = true;\n        stats_thread_ = std::thread(&Stats::runSocket, this);\n    }\n\n    void runSocket() {\n        while (statsThreadRunning_) {\n            struct sockaddr_un cli_addr;\n            socklen_t clilen = sizeof(cli_addr);\n            int newsockfd = accept(sockfd_, reinterpret_cast<struct sockaddr*>(&cli_addr), &clilen);\n            if (newsockfd < 0) {\n                continue;\n            }\n\n            {\n                std::lock_guard<std::mutex> lock(thread_mutex_);\n                ++thread_count_;\n            }\n\n            std::thread([this, newsockfd]() {\n                processMsg(newsockfd);\n                {\n                    std::lock_guard<std::mutex> lock(thread_mutex_);\n                    --thread_count_;\n                    thread_exited_.notify_one();\n                }\n            }).detach();\n        }\n    }\n\n    void processMsg(int sockfd) {\n        char buffer[256];\n        bzero(buffer, 256);\n        ssize_t n = read(sockfd, buffer, 255);\n        if (n < 0) {\n            close(sockfd);\n            return;\n        }\n\n        std::string request(buffer);\n        std::string response;\n\n        if (request == \"get\") {\n            std::unordered_map<std::string, int> data = getAll();\n            for (const auto& [key, value] : data) {\n                response += key + \":\" + std::to_string(value) + \"\\n\";\n            }\n        } else if (request == \"reset\") {\n            reset();\n            response = \"Reset successful\\n\";\n        }\n\n        n = write(sockfd, response.c_str(), response.size());\n        close(sockfd);\n    }\n\n    void stop() {\n        if (statsThreadRunning_) {\n            statsThreadRunning_ = false;\n            if (stats_thread_.joinable()) {\n                stats_thread_.join();\n            }\n            if (sockfd_ >= 0) {\n                close(sockfd_);\n                unlink(serv_addr_.sun_path);\n            }\n        }\n    }\n\n    std::string stats_socket_path_;\n    int sockfd_;\n    sockaddr_un serv_addr_;\n    std::thread stats_thread_;\n    std::atomic<bool> statsThreadRunning_;\n    std::mutex stats_mutex_;\n    std::mutex thread_mutex_;\n    std::condition_variable thread_exited_;\n    int thread_count_;\n    std::unordered_map<std::string, int> stats_;\n\n    static bool& isInitInternal() {\n        static bool initialized = false;\n        return initialized;\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <thread>\n#include <atomic>\n#include <mutex>\n#include <condition_variable>\n#include <unordered_map>\n#include <sys/socket.h>\n#include <sys/un.h>\n#include <unistd.h>\n#include <cstring>\n\nclass Stats {\npublic:\n    static Stats& get(const std::string& stats_socket_path) {\n        static Stats instance(stats_socket_path);\n        return instance;\n    }\n\n    static std::unique_ptr<Stats> get_for_unittest(const std::string& stats_socket_path) {\n        return std::make_unique<Stats>(stats_socket_path);\n    }\n\n    static bool init(const std::string& stats_socket_path) {\n        if (!isInitInternal()) {\n            get(stats_socket_path);\n            isInitInternal() = true;\n        }\n        return isInitInternal();\n    }\n\n    static bool isInit() {\n        return isInitInternal();\n    }\n\n    ~Stats() {\n        stop();\n    }\n\n    std::unordered_map<std::string, int> getAll() {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        return stats_;\n    }\n\n    int increment(const std::string& key, int val) {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        stats_[key] += val;\n        return stats_[key];\n    }\n\n    int set(const std::string& key, int val) {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        stats_[key] = val;\n        return stats_[key];\n    }\n\n    int reset() {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        for (auto& [key, value] : stats_) {\n            value = 0;\n        }\n        return 0;\n    }\n\nprivate:\n    Stats(const std::string& stats_socket_path) : stats_socket_path_(stats_socket_path), sockfd_(-1), statsThreadRunning_(false) {\n        startSocket();\n    }\n\n    void startSocket() {\n        sockfd_ = socket(AF_UNIX, SOCK_STREAM, 0);\n        if (sockfd_ < 0) {\n            std::cerr << \"Error creating socket\" << std::endl;\n            return;\n        }\n\n        memset(&serv_addr_, 0, sizeof(serv_addr_));\n        serv_addr_.sun_family = AF_UNIX;\n        strncpy(serv_addr_.sun_path, stats_socket_path_.c_str(), sizeof(serv_addr_.sun_path) - 1);\n\n        unlink(serv_addr_.sun_path);\n        if (bind(sockfd_, reinterpret_cast<const sockaddr*>(&serv_addr_), sizeof(serv_addr_)) < 0) {\n            std::cerr << \"Error binding socket\" << std::endl;\n            close(sockfd_);\n            sockfd_ = -1;\n            return;\n        }\n\n        if (listen(sockfd_, 5) < 0) {\n            std::cerr << \"Error listening on socket\" << std::endl;\n            close(sockfd_);\n            sockfd_ = -1;\n            return;\n        }\n\n        statsThreadRunning_ = true;\n        stats_thread_ = std::thread(&Stats::runSocket, this);\n    }\n\n    void runSocket() {\n        while (statsThreadRunning_) {\n            sockaddr_un client_addr;\n            socklen_t client_len = sizeof(client_addr);\n            int newsockfd = accept(sockfd_, reinterpret_cast<sockaddr*>(&client_addr), &client_len);\n            if (newsockfd < 0) {\n                if (!statsThreadRunning_) break;\n                continue;\n            }\n\n            {\n                std::lock_guard<std::mutex> lock(thread_mutex_);\n                ++thread_count_;\n            }\n\n            std::thread([this, newsockfd]() {\n                processMsg(newsockfd);\n                {\n                    std::lock_guard<std::mutex> lock(thread_mutex_);\n                    --thread_count_;\n                }\n                thread_exited_.notify_one();\n            }).detach();\n        }\n\n        close(sockfd_);\n        sockfd_ = -1;\n    }\n\n    void processMsg(int sockfd) {\n        char buffer[256];\n        ssize_t n = read(sockfd, buffer, sizeof(buffer) - 1);\n        if (n <= 0) return;\n\n        buffer[n] = '\\0';\n        std::string request(buffer);\n\n        std::unordered_map<std::string, int> result;\n        int response_code = 0;\n\n        if (request == \"get\") {\n            result = getAll();\n        } else if (request == \"reset\") {\n            reset();\n        } else if (request.substr(0, 8) == \"increment\") {\n            size_t colon_pos = request.find(':');\n            if (colon_pos != std::string::npos) {\n                std::string key = request.substr(9, colon_pos - 9);\n                int val = std::stoi(request.substr(colon_pos + 1));\n                increment(key, val);\n            }\n        } else if (request.substr(0, 3) == \"set\") {\n            size_t colon_pos = request.find(':');\n            if (colon_pos != std::string::npos) {\n                std::string key = request.substr(4, colon_pos - 4);\n                int val = std::stoi(request.substr(colon_pos + 1));\n                set(key, val);\n            }\n        }\n\n        std::string response;\n        if (request == \"get\") {\n            for (const auto& [key, value] : result) {\n                response += key + \":\" + std::to_string(value) + \"\\n\";\n            }\n        } else if (request == \"reset\") {\n            response = \"Statistics reset\\n\";\n        } else if (request.substr(0, 8) == \"increment\" || request.substr(0, 3) == \"set\") {\n            response = \"Operation successful\\n\";\n        } else {\n            response = \"Invalid request\\n\";\n        }\n\n        write(sockfd, response.c_str(), response.size());\n        close(sockfd);\n    }\n\n    void stop() {\n        if (statsThreadRunning_) {\n            statsThreadRunning_ = false;\n            if (stats_thread_.joinable()) {\n                stats_thread_.join();\n            }\n        }\n\n        if (sockfd_ >= 0) {\n            close(sockfd_);\n            unlink(serv_addr_.sun_path);\n        }\n    }\n\n    std::string stats_socket_path_;\n    int sockfd_;\n    sockaddr_un serv_addr_;\n    std::thread stats_thread_;\n    std::atomic<bool> statsThreadRunning_;\n    std::mutex stats_mutex_;\n    std::mutex thread_mutex_;\n    std::condition_variable thread_exited_;\n    int thread_count_ = 0;\n    std::unordered_map<std::string, int> stats_;\n\n    static bool& isInitInternal() {\n        static bool initialized = false;\n        return initialized;\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <thread>\n#include <atomic>\n#include <mutex>\n#include <condition_variable>\n#include <unordered_map>\n#include <sys/socket.h>\n#include <sys/un.h>\n#include <unistd.h>\n#include <cstring>\n\nclass Stats {\npublic:\n    static Stats& get(const std::string& stats_socket_path) {\n        static Stats instance(stats_socket_path);\n        return instance;\n    }\n\n    static std::unique_ptr<Stats> get_for_unittest(const std::string& stats_socket_path) {\n        return std::make_unique<Stats>(stats_socket_path);\n    }\n\n    static bool init(const std::string& stats_socket_path) {\n        if (!isInitInternal()) {\n            get(stats_socket_path);\n            isInitInternal() = true;\n        }\n        return isInitInternal();\n    }\n\n    static bool isInit() {\n        return isInitInternal();\n    }\n\n    ~Stats() {\n        stopSocket();\n    }\n\n    std::unordered_map<std::string, int> getAll() {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        return stats_;\n    }\n\n    int increment(const std::string& key, int val) {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        stats_[key] += val;\n        return stats_[key];\n    }\n\n    int set(const std::string& key, int val) {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        stats_[key] = val;\n        return stats_[key];\n    }\n\n    int reset() {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        for (auto& [key, value] : stats_) {\n            value = 0;\n        }\n        return 0;\n    }\n\nprivate:\n    Stats(const std::string& stats_socket_path) : stats_socket_path_(stats_socket_path), sockfd_(-1), statsThreadRunning_(false) {\n        startSocket();\n    }\n\n    void startSocket() {\n        sockfd_ = socket(AF_UNIX, SOCK_STREAM, 0);\n        if (sockfd_ < 0) {\n            return;\n        }\n\n        memset(&serv_addr_, 0, sizeof(serv_addr_));\n        serv_addr_.sun_family = AF_UNIX;\n        strncpy(serv_addr_.sun_path, stats_socket_path_.c_str(), sizeof(serv_addr_.sun_path) - 1);\n\n        unlink(serv_addr_.sun_path);\n        if (bind(sockfd_, reinterpret_cast<struct sockaddr*>(&serv_addr_), sizeof(serv_addr_)) < 0) {\n            close(sockfd_);\n            sockfd_ = -1;\n            return;\n        }\n\n        if (listen(sockfd_, 5) < 0) {\n            close(sockfd_);\n            sockfd_ = -1;\n            return;\n        }\n\n        statsThreadRunning_ = true;\n        stats_thread_ = std::thread(&Stats::runSocket, this);\n    }\n\n    void runSocket() {\n        while (statsThreadRunning_.load()) {\n            struct sockaddr_un cli_addr;\n            socklen_t clilen = sizeof(cli_addr);\n            int newsockfd = accept(sockfd_, reinterpret_cast<struct sockaddr*>(&cli_addr), &clilen);\n            if (newsockfd < 0) {\n                continue;\n            }\n\n            {\n                std::lock_guard<std::mutex> lock(thread_mutex_);\n                ++thread_count_;\n            }\n\n            std::thread([this, newsockfd]() {\n                processMsg(newsockfd);\n                {\n                    std::lock_guard<std::mutex> lock(thread_mutex_);\n                    --thread_count_;\n                }\n                thread_exited_.notify_one();\n            }).detach();\n        }\n    }\n\n    void processMsg(int sockfd) {\n        char buffer[256];\n        bzero(buffer, 256);\n        ssize_t n = read(sockfd, buffer, 255);\n        if (n <= 0) {\n            close(sockfd);\n            return;\n        }\n\n        std::string request(buffer);\n        std::string response;\n\n        if (request == \"get\") {\n            auto data = getAll();\n            for (const auto& [key, value] : data) {\n                response += key + \":\" + std::to_string(value) + \"\\n\";\n            }\n        } else if (request == \"reset\") {\n            reset();\n            response = \"Statistics reset\\n\";\n        }\n\n        write(sockfd, response.c_str(), response.size());\n        close(sockfd);\n    }\n\n    void stopSocket() {\n        if (statsThreadRunning_) {\n            statsThreadRunning_ = false;\n            if (stats_thread_.joinable()) {\n                stats_thread_.join();\n            }\n            if (sockfd_ >= 0) {\n                close(sockfd_);\n                unlink(serv_addr_.sun_path);\n            }\n        }\n    }\n\n    std::string stats_socket_path_;\n    int sockfd_;\n    sockaddr_un serv_addr_;\n    std::thread stats_thread_;\n    std::atomic<bool> statsThreadRunning_;\n    std::mutex stats_mutex_;\n    std::mutex thread_mutex_;\n    std::condition_variable thread_exited_;\n    int thread_count_;\n    std::unordered_map<std::string, int> stats_;\n\n    static bool& isInitInternal() {\n        static bool initialized = false;\n        return initialized;\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <thread>\n#include <atomic>\n#include <mutex>\n#include <condition_variable>\n#include <unordered_map>\n#include <string>\n#include <cstring>\n#include <unistd.h>\n#include <sys/socket.h>\n#include <sys/un.h>\n#include <memory>\n\nclass Stats {\npublic:\n    static Stats& get(const std::string& stats_socket_path) {\n        static Stats instance(stats_socket_path);\n        return instance;\n    }\n\n    static std::unique_ptr<Stats> get_for_unittest(const std::string& stats_socket_path) {\n        return std::make_unique<Stats>(stats_socket_path);\n    }\n\n    static bool init(const std::string& stats_socket_path) {\n        if (!isInitInternal()) {\n            new Stats(stats_socket_path);\n            isInitInternal() = true;\n        }\n        return isInitInternal();\n    }\n\n    static bool isInit() {\n        return isInitInternal();\n    }\n\n    ~Stats() {\n        stopServer();\n    }\n\n    std::unordered_map<std::string, int> getAll() {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        return stats_;\n    }\n\n    int increment(const std::string& key, int val) {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        auto it = stats_.find(key);\n        if (it != stats_.end()) {\n            it->second += val;\n        } else {\n            stats_[key] = val;\n        }\n        return stats_[key];\n    }\n\n    int set(const std::string& key, int val) {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        stats_[key] = val;\n        return val;\n    }\n\n    int reset() {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        stats_.clear();\n        return 0;\n    }\n\nprivate:\n    Stats(const std::string& stats_socket_path)\n        : stats_socket_path_(stats_socket_path),\n          sockfd_(-1),\n          statsThreadRunning_(false),\n          thread_count_(0) {\n        startSocket();\n    }\n\n    void stopServer() {\n        if (stats_thread_.joinable()) {\n            statsThreadRunning_ = false;\n            stats_thread_.join();\n        }\n        if (sockfd_ >= 0) {\n            close(sockfd_);\n        }\n        unlink(stats_socket_path_.c_str());\n    }\n\n    bool startSocket() {\n        sockfd_ = socket(AF_UNIX, SOCK_STREAM, 0);\n        if (sockfd_ < 0) {\n            return false;\n        }\n\n        memset(&serv_addr_, 0, sizeof(serv_addr_));\n        serv_addr_.sun_family = AF_UNIX;\n        strncpy(serv_addr_.sun_path, stats_socket_path_.c_str(), sizeof(serv_addr_.sun_path) - 1);\n\n        unlink(stats_socket_path_.c_str());\n\n        if (bind(sockfd_, reinterpret_cast<struct sockaddr*>(&serv_addr_), sizeof(serv_addr_)) < 0) {\n            close(sockfd_);\n            return false;\n        }\n\n        if (listen(sockfd_, 5) < 0) {\n            close(sockfd_);\n            return false;\n        }\n\n        statsThreadRunning_ = true;\n        stats_thread_ = std::thread(&Stats::runSocket, this);\n        return true;\n    }\n\n    void runSocket() {\n        while (statsThreadRunning_) {\n            struct sockaddr_un cli_addr;\n            socklen_t clilen = sizeof(cli_addr);\n            int newsockfd = accept(sockfd_, reinterpret_cast<struct sockaddr*>(&cli_addr), &clilen);\n            if (newsockfd < 0) {\n                continue;\n            }\n\n            {\n                std::lock_guard<std::mutex> lock(thread_mutex_);\n                ++thread_count_;\n            }\n\n            std::thread([this, newsockfd]() {\n                processMsg(newsockfd);\n                {\n                    std::lock_guard<std::mutex> lock(thread_mutex_);\n                    --thread_count_;\n                }\n                thread_exited_.notify_one();\n                close(newsockfd);\n            }).detach();\n        }\n    }\n\n    void processMsg(int sockfd) {\n        char buffer[256];\n        bzero(buffer, 256);\n        ssize_t n = read(sockfd, buffer, 255);\n        if (n <= 0) {\n            return;\n        }\n\n        std::string request(buffer);\n        std::string response;\n\n        if (request == \"get\") {\n            std::unordered_map<std::string, int> data = getAll();\n            for (const auto& [k, v] : data) {\n                response += k + \":\" + std::to_string(v) + \"\\n\";\n            }\n        } else if (request.substr(0, 8) == \"increment \") {\n            size_t spacePos = request.find(' ', 8);\n            if (spacePos != std::string::npos) {\n                std::string key = request.substr(8, spacePos - 8);\n                int val = std::stoi(request.substr(spacePos + 1));\n                increment(key, val);\n                response = \"Incremented \" + key + \" by \" + std::to_string(val);\n            }\n        } else if (request.substr(0, 3) == \"set\") {\n            size_t spacePos = request.find(' ', 4);\n            if (spacePos != std::string::npos) {\n                std::string key = request.substr(4, spacePos - 4);\n                int val = std::stoi(request.substr(spacePos + 1));\n                set(key, val);\n                response = \"Set \" + key + \" to \" + std::to_string(val);\n            }\n        } else if (request == \"reset\") {\n            reset();\n            response = \"All statistics have been reset.\";\n        }\n\n        write(sockfd, response.c_str(), response.size());\n    }\n\n    static bool& isInitInternal() {\n        static bool initialized = false;\n        return initialized;\n    }\n\n    std::string stats_socket_path_;\n    int sockfd_;\n    sockaddr_un serv_addr_;\n    std::thread stats_thread_;\n    std::atomic<bool> statsThreadRunning_;\n    std::mutex stats_mutex_;\n    std::mutex thread_mutex_;\n    std::condition_variable thread_exited_;\n    int thread_count_;\n    std::unordered_map<std::string, int> stats_;\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <thread>\n#include <atomic>\n#include <mutex>\n#include <condition_variable>\n#include <unordered_map>\n#include <sys/socket.h>\n#include <sys/un.h>\n#include <unistd.h>\n#include <cstring>\n\nclass Stats {\npublic:\n    static Stats& get(const std::string& stats_socket_path) {\n        static Stats instance(stats_socket_path);\n        return instance;\n    }\n\n    static std::unique_ptr<Stats> get_for_unittest(const std::string& stats_socket_path) {\n        return std::make_unique<Stats>(stats_socket_path);\n    }\n\n    static bool init(const std::string& stats_socket_path) {\n        if (!isInitInternal()) {\n            get(stats_socket_path);\n            isInitInternal() = true;\n        }\n        return isInitInternal();\n    }\n\n    static bool isInit() {\n        return isInitInternal();\n    }\n\n    ~Stats() {\n        stop();\n    }\n\n    std::unordered_map<std::string, int> getAll() {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        return stats_;\n    }\n\n    int increment(const std::string& key, int val) {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        stats_[key] += val;\n        return stats_[key];\n    }\n\n    int set(const std::string& key, int val) {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        stats_[key] = val;\n        return stats_[key];\n    }\n\n    int reset() {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        for (auto& [key, value] : stats_) {\n            value = 0;\n        }\n        return 0;\n    }\n\n    bool startSocket() {\n        if (sockfd_ != -1) {\n            close(sockfd_);\n        }\n\n        sockfd_ = socket(AF_UNIX, SOCK_STREAM, 0);\n        if (sockfd_ == -1) {\n            return false;\n        }\n\n        memset(&serv_addr_, 0, sizeof(serv_addr_));\n        serv_addr_.sun_family = AF_UNIX;\n        strncpy(serv_addr_.sun_path, stats_socket_path_.c_str(), sizeof(serv_addr_.sun_path) - 1);\n\n        unlink(serv_addr_.sun_path);\n        if (bind(sockfd_, reinterpret_cast<struct sockaddr*>(&serv_addr_), sizeof(serv_addr_)) == -1) {\n            close(sockfd_);\n            return false;\n        }\n\n        if (listen(sockfd_, 5) == -1) {\n            close(sockfd_);\n            return false;\n        }\n\n        statsThreadRunning_ = true;\n        stats_thread_ = std::thread(&Stats::runSocket, this);\n        return true;\n    }\n\nprivate:\n    Stats(const std::string& stats_socket_path)\n        : stats_socket_path_(stats_socket_path), sockfd_(-1), statsThreadRunning_(false), thread_count_(0) {\n        startSocket();\n    }\n\n    void stop() {\n        if (statsThreadRunning_) {\n            statsThreadRunning_ = false;\n            if (stats_thread_.joinable()) {\n                stats_thread_.join();\n            }\n            close(sockfd_);\n            unlink(stats_socket_path_.c_str());\n        }\n    }\n\n    void runSocket() {\n        while (statsThreadRunning_) {\n            struct sockaddr_un cli_addr;\n            socklen_t clilen = sizeof(cli_addr);\n            int newsockfd = accept(sockfd_, reinterpret_cast<struct sockaddr*>(&cli_addr), &clilen);\n            if (newsockfd < 0) {\n                continue;\n            }\n\n            {\n                std::lock_guard<std::mutex> lock(thread_mutex_);\n                ++thread_count_;\n            }\n\n            std::thread([this, newsockfd]() {\n                processMsg(newsockfd);\n                {\n                    std::lock_guard<std::mutex> lock(thread_mutex_);\n                    --thread_count_;\n                    thread_exited_.notify_one();\n                }\n            }).detach();\n        }\n    }\n\n    void processMsg(int sockfd) {\n        char buffer[256];\n        ssize_t n = read(sockfd, buffer, sizeof(buffer) - 1);\n        if (n <= 0) {\n            close(sockfd);\n            return;\n        }\n        buffer[n] = '\\0';\n\n        std::string request(buffer);\n        std::string response;\n\n        if (request == \"get\") {\n            auto data = getAll();\n            for (const auto& [key, value] : data) {\n                response += key + \":\" + std::to_string(value) + \"\\n\";\n            }\n        } else if (request == \"reset\") {\n            reset();\n            response = \"Statistics reset\\n\";\n        } else if (request.rfind(\"increment:\", 0) == 0) {\n            size_t colonPos = request.find(':', 8);\n            if (colonPos != std::string::npos) {\n                std::string key = request.substr(8, colonPos - 8);\n                int val = std::stoi(request.substr(colonPos + 1));\n                increment(key, val);\n                response = \"Incremented \" + key + \" by \" + std::to_string(val) + \"\\n\";\n            }\n        } else if (request.rfind(\"set:\", 0) == 0) {\n            size_t colonPos = request.find(':', 4);\n            if (colonPos != std::string::npos) {\n                std::string key = request.substr(4, colonPos - 4);\n                int val = std::stoi(request.substr(colonPos + 1));\n                set(key, val);\n                response = \"Set \" + key + \" to \" + std::to_string(val) + \"\\n\";\n            }\n        } else {\n            response = \"Unknown command\\n\";\n        }\n\n        write(sockfd, response.c_str(), response.size());\n        close(sockfd);\n    }\n\n    static bool& isInitInternal() {\n        static bool initialized = false;\n        return initialized;\n    }\n\n    std::string stats_socket_path_;\n    int sockfd_;\n    struct sockaddr_un serv_addr_;\n    std::thread stats_thread_;\n    std::atomic<bool> statsThreadRunning_;\n    std::mutex stats_mutex_;\n    std::mutex thread_mutex_;\n    std::condition_variable thread_exited_;\n    int thread_count_;\n    std::unordered_map<std::string, int> stats_;\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <thread>\n#include <atomic>\n#include <mutex>\n#include <condition_variable>\n#include <unordered_map>\n#include <sys/socket.h>\n#include <sys/un.h>\n#include <unistd.h>\n#include <cstring>\n\nclass Stats {\npublic:\n    static Stats& get(const std::string& stats_socket_path) {\n        static Stats instance(stats_socket_path);\n        return instance;\n    }\n\n    static std::unique_ptr<Stats> get_for_unittest(const std::string& stats_socket_path) {\n        return std::make_unique<Stats>(stats_socket_path);\n    }\n\n    static bool init(const std::string& stats_socket_path) {\n        if (!isInitInternal()) {\n            static Stats instance(stats_socket_path);\n            return true;\n        }\n        return false;\n    }\n\n    static bool isInit() {\n        return isInitInternal();\n    }\n\n    ~Stats() {\n        stop();\n    }\n\n    std::unordered_map<std::string, int> getAll() {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        return stats_;\n    }\n\n    int increment(const std::string& key, int val = 1) {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        stats_[key] += val;\n        return stats_[key];\n    }\n\n    int set(const std::string& key, int val) {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        stats_[key] = val;\n        return stats_[key];\n    }\n\n    int reset() {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        for (auto& [key, value] : stats_) {\n            value = 0;\n        }\n        return 0;\n    }\n\nprivate:\n    Stats(const std::string& stats_socket_path)\n        : stats_socket_path_(stats_socket_path),\n          sockfd_(-1),\n          statsThreadRunning_(false),\n          thread_count_(0) {\n        startSocket();\n    }\n\n    void startSocket() {\n        if (sockfd_ != -1) {\n            close(sockfd_);\n        }\n\n        sockfd_ = socket(AF_UNIX, SOCK_STREAM, 0);\n        if (sockfd_ < 0) {\n            return;\n        }\n\n        memset(&serv_addr_, 0, sizeof(serv_addr_));\n        serv_addr_.sun_family = AF_UNIX;\n        strncpy(serv_addr_.sun_path, stats_socket_path_.c_str(), sizeof(serv_addr_.sun_path) - 1);\n\n        unlink(serv_addr_.sun_path);\n        if (bind(sockfd_, reinterpret_cast<struct sockaddr*>(&serv_addr_), sizeof(serv_addr_)) < 0) {\n            close(sockfd_);\n            sockfd_ = -1;\n            return;\n        }\n\n        if (listen(sockfd_, 5) < 0) {\n            close(sockfd_);\n            sockfd_ = -1;\n            return;\n        }\n\n        statsThreadRunning_ = true;\n        stats_thread_ = std::thread(&Stats::runSocket, this);\n    }\n\n    void runSocket() {\n        while (statsThreadRunning_) {\n            struct sockaddr_un cli_addr;\n            socklen_t clilen = sizeof(cli_addr);\n            int newsockfd = accept(sockfd_, reinterpret_cast<struct sockaddr*>(&cli_addr), &clilen);\n            if (newsockfd < 0) {\n                continue;\n            }\n\n            {\n                std::lock_guard<std::mutex> lock(thread_mutex_);\n                ++thread_count_;\n            }\n\n            std::thread([this, newsockfd]() {\n                processMsg(newsockfd);\n                {\n                    std::lock_guard<std::mutex> lock(thread_mutex_);\n                    --thread_count_;\n                }\n                thread_exited_.notify_one();\n            }).detach();\n        }\n    }\n\n    void processMsg(int sockfd) {\n        char buffer[256];\n        bzero(buffer, 256);\n        ssize_t n = read(sockfd, buffer, 255);\n        if (n <= 0) {\n            close(sockfd);\n            return;\n        }\n\n        std::string request(buffer);\n        std::string response;\n\n        if (request == \"get\") {\n            auto data = getAll();\n            for (const auto& [key, value] : data) {\n                response += key + \":\" + std::to_string(value) + \"\\n\";\n            }\n        } else if (request == \"reset\") {\n            reset();\n            response = \"Statistics reset\\n\";\n        } else {\n            size_t colon_pos = request.find(':');\n            if (colon_pos != std::string::npos) {\n                std::string cmd = request.substr(0, colon_pos);\n                std::string key_val = request.substr(colon_pos + 1);\n                size_t eq_pos = key_val.find('=');\n                if (eq_pos != std::string::npos) {\n                    std::string key = key_val.substr(0, eq_pos);\n                    int val = std::stoi(key_val.substr(eq_pos + 1));\n                    if (cmd == \"set\") {\n                        set(key, val);\n                        response = \"Set \" + key + \" to \" + std::to_string(val) + \"\\n\";\n                    } else if (cmd == \"inc\") {\n                        increment(key, val);\n                        response = \"Incremented \" + key + \" by \" + std::to_string(val) + \"\\n\";\n                    }\n                }\n            }\n        }\n\n        write(sockfd, response.c_str(), response.size());\n        close(sockfd);\n    }\n\n    void stop() {\n        if (statsThreadRunning_) {\n            statsThreadRunning_ = false;\n            if (stats_thread_.joinable()) {\n                stats_thread_.join();\n            }\n            if (sockfd_ != -1) {\n                close(sockfd_);\n                unlink(serv_addr_.sun_path);\n            }\n        }\n    }\n\n    static bool& isInitInternal() {\n        static bool initialized = false;\n        return initialized;\n    }\n\n    std::string stats_socket_path_;\n    int sockfd_;\n    struct sockaddr_un serv_addr_;\n    std::thread stats_thread_;\n    std::atomic<bool> statsThreadRunning_;\n    std::mutex stats_mutex_;\n    std::mutex thread_mutex_;\n    std::condition_variable thread_exited_;\n    int thread_count_;\n    std::unordered_map<std::string, int> stats_;\n};\n```",
      "```cpp\n#include <iostream>\n#include <thread>\n#include <atomic>\n#include <mutex>\n#include <condition_variable>\n#include <unordered_map>\n#include <string>\n#include <cstring>\n#include <unistd.h>\n#include <sys/socket.h>\n#include <sys/un.h>\n#include <memory>\n\nclass Stats {\npublic:\n    static Stats& get(const std::string& stats_socket_path) {\n        static Stats instance(stats_socket_path);\n        return instance;\n    }\n\n    static std::unique_ptr<Stats> get_for_unittest(const std::string& stats_socket_path) {\n        return std::make_unique<Stats>(stats_socket_path);\n    }\n\n    static bool init(const std::string& stats_socket_path) {\n        if (!isInitInternal()) {\n            new Stats(stats_socket_path);\n            return true;\n        }\n        return false;\n    }\n\n    static bool isInit() {\n        return isInitInternal();\n    }\n\n    ~Stats() {\n        stop();\n    }\n\n    std::unordered_map<std::string, int> getAll() {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        return stats_;\n    }\n\n    int increment(const std::string& key, int val = 1) {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        auto it = stats_.find(key);\n        if (it != stats_.end()) {\n            it->second += val;\n        } else {\n            stats_[key] = val;\n        }\n        return stats_[key];\n    }\n\n    int set(const std::string& key, int val) {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        stats_[key] = val;\n        return val;\n    }\n\n    int reset() {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        stats_.clear();\n        return 0;\n    }\n\nprivate:\n    Stats(const std::string& stats_socket_path) : stats_socket_path_(stats_socket_path), sockfd_(-1), statsThreadRunning_(false) {\n        startSocket();\n    }\n\n    void startSocket() {\n        if (sockfd_ >= 0) {\n            close(sockfd_);\n        }\n\n        unlink(stats_socket_path_.c_str());\n\n        sockfd_ = socket(AF_UNIX, SOCK_STREAM, 0);\n        if (sockfd_ < 0) {\n            return;\n        }\n\n        memset(&serv_addr_, 0, sizeof(serv_addr_));\n        serv_addr_.sun_family = AF_UNIX;\n        strncpy(serv_addr_.sun_path, stats_socket_path_.c_str(), sizeof(serv_addr_.sun_path) - 1);\n\n        if (bind(sockfd_, reinterpret_cast<struct sockaddr*>(&serv_addr_), sizeof(serv_addr_)) < 0) {\n            close(sockfd_);\n            sockfd_ = -1;\n            return;\n        }\n\n        if (listen(sockfd_, 5) < 0) {\n            close(sockfd_);\n            sockfd_ = -1;\n            return;\n        }\n\n        statsThreadRunning_ = true;\n        stats_thread_ = std::thread(&Stats::runSocket, this);\n    }\n\n    void runSocket() {\n        while (statsThreadRunning_) {\n            struct sockaddr_un cli_addr;\n            socklen_t clilen = sizeof(cli_addr);\n            int newsockfd = accept(sockfd_, reinterpret_cast<struct sockaddr*>(&cli_addr), &clilen);\n            if (newsockfd < 0) {\n                continue;\n            }\n\n            std::thread clientThread([this, newsockfd]() {\n                processMsg(newsockfd);\n                close(newsockfd);\n            });\n            clientThread.detach();\n        }\n    }\n\n    void processMsg(int sockfd) {\n        char buffer[256];\n        ssize_t n = read(sockfd, buffer, sizeof(buffer) - 1);\n        if (n <= 0) {\n            return;\n        }\n        buffer[n] = '\\0';\n\n        std::string request(buffer);\n        std::string response;\n\n        if (request == \"get\") {\n            std::unordered_map<std::string, int> data = getAll();\n            for (const auto& [key, value] : data) {\n                response += key + \":\" + std::to_string(value) + \"\\n\";\n            }\n        } else if (request.substr(0, 8) == \"increment\") {\n            size_t colonPos = request.find(':');\n            if (colonPos != std::string::npos) {\n                std::string key = request.substr(9, colonPos - 9);\n                int val = std::stoi(request.substr(colonPos + 1));\n                increment(key, val);\n                response = \"Incremented \" + key + \" by \" + std::to_string(val);\n            }\n        } else if (request.substr(0, 3) == \"set\") {\n            size_t colonPos = request.find(':');\n            if (colonPos != std::string::npos) {\n                std::string key = request.substr(4, colonPos - 4);\n                int val = std::stoi(request.substr(colonPos + 1));\n                set(key, val);\n                response = \"Set \" + key + \" to \" + std::to_string(val);\n            }\n        } else if (request == \"reset\") {\n            reset();\n            response = \"All statistics have been reset.\";\n        }\n\n        write(sockfd, response.c_str(), response.size());\n    }\n\n    void stop() {\n        if (statsThreadRunning_) {\n            statsThreadRunning_ = false;\n            if (stats_thread_.joinable()) {\n                stats_thread_.join();\n            }\n            if (sockfd_ >= 0) {\n                close(sockfd_);\n                unlink(stats_socket_path_.c_str());\n            }\n        }\n    }\n\n    static bool& isInitInternal() {\n        static bool initialized = false;\n        return initialized;\n    }\n\n    std::string stats_socket_path_;\n    int sockfd_;\n    sockaddr_un serv_addr_;\n    std::thread stats_thread_;\n    std::atomic<bool> statsThreadRunning_;\n    std::mutex stats_mutex_;\n};\n```",
      "```cpp\n#include <iostream>\n#include <fstream>\n#include <sstream>\n#include <string>\n#include <thread>\n#include <atomic>\n#include <mutex>\n#include <condition_variable>\n#include <unordered_map>\n#include <vector>\n#include <cstring>\n#include <unistd.h>\n#include <sys/socket.h>\n#include <sys/un.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n\nclass Stats {\npublic:\n    static bool isInit() {\n        return isInitInternal();\n    }\n\n    static Stats& get(const std::string& stats_socket_path) {\n        if (!isInit()) {\n            init(stats_socket_path);\n        }\n        static Stats instance(stats_socket_path);\n        return instance;\n    }\n\n    static std::unique_ptr<Stats> get_for_unittest(const std::string& stats_socket_path) {\n        return std::make_unique<Stats>(stats_socket_path);\n    }\n\n    static bool init(const std::string& stats_socket_path) {\n        if (isInitInternal()) {\n            return true;\n        }\n        instance_ = new Stats(stats_socket_path);\n        return isInitInternal();\n    }\n\n    ~Stats() {\n        stop();\n        delete instance_;\n        instance_ = nullptr;\n        is_initialized_ = false;\n    }\n\n    std::unordered_map<std::string, int> getAll() {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        return stats_;\n    }\n\n    int increment(const std::string& key, int val) {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        stats_[key] += val;\n        return stats_[key];\n    }\n\n    int set(const std::string& key, int val) {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        stats_[key] = val;\n        return stats_[key];\n    }\n\n    int reset() {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        for (auto& [key, value] : stats_) {\n            value = 0;\n        }\n        return 0;\n    }\n\nprivate:\n    Stats(const std::string& stats_socket_path) : stats_socket_path_(stats_socket_path), sockfd_(-1), statsThreadRunning_(false) {\n        startSocket();\n    }\n\n    void startSocket() {\n        sockfd_ = socket(AF_UNIX, SOCK_STREAM, 0);\n        if (sockfd_ < 0) {\n            std::cerr << \"Error opening socket\" << std::endl;\n            return;\n        }\n\n        memset(&serv_addr_, 0, sizeof(serv_addr_));\n        serv_addr_.sun_family = AF_UNIX;\n        strncpy(serv_addr_.sun_path, stats_socket_path_.c_str(), sizeof(serv_addr_.sun_path) - 1);\n\n        unlink(serv_addr_.sun_path);\n        if (bind(sockfd_, reinterpret_cast<struct sockaddr*>(&serv_addr_), sizeof(serv_addr_)) < 0) {\n            std::cerr << \"Error binding socket\" << std::endl;\n            close(sockfd_);\n            sockfd_ = -1;\n            return;\n        }\n\n        if (listen(sockfd_, 5) < 0) {\n            std::cerr << \"Error listening on socket\" << std::endl;\n            close(sockfd_);\n            sockfd_ = -1;\n            return;\n        }\n\n        statsThreadRunning_ = true;\n        stats_thread_ = std::thread(&Stats::runSocket, this);\n    }\n\n    void runSocket() {\n        while (statsThreadRunning_) {\n            struct sockaddr_un cli_addr;\n            socklen_t clilen = sizeof(cli_addr);\n            int newsockfd = accept(sockfd_, reinterpret_cast<struct sockaddr*>(&cli_addr), &clilen);\n            if (newsockfd < 0) {\n                if (!statsThreadRunning_) {\n                    break;\n                }\n                continue;\n            }\n\n            std::thread clientThread([this, newsockfd]() {\n                processMsg(newsockfd);\n                close(newsockfd);\n            });\n            clientThread.detach();\n        }\n    }\n\n    void processMsg(int sockfd) {\n        char buffer[256];\n        bzero(buffer, 256);\n        int n = read(sockfd, buffer, 255);\n        if (n < 0) {\n            std::cerr << \"Error reading from socket\" << std::endl;\n            return;\n        }\n\n        std::string request(buffer);\n        std::istringstream iss(request);\n        std::string command;\n        iss >> command;\n\n        if (command == \"get\") {\n            std::string key;\n            iss >> key;\n            std::lock_guard<std::mutex> lock(stats_mutex_);\n            int value = stats_[key];\n            std::ostringstream oss;\n            oss << value;\n            write(sockfd, oss.str().c_str(), oss.str().size());\n        } else if (command == \"increment\") {\n            std::string key;\n            int val;\n            iss >> key >> val;\n            std::lock_guard<std::mutex> lock(stats_mutex_);\n            stats_[key] += val;\n            std::ostringstream oss;\n            oss << stats_[key];\n            write(sockfd, oss.str().c_str(), oss.str().size());\n        } else if (command == \"set\") {\n            std::string key;\n            int val;\n            iss >> key >> val;\n            std::lock_guard<std::mutex> lock(stats_mutex_);\n            stats_[key] = val;\n            std::ostringstream oss;\n            oss << stats_[key];\n            write(sockfd, oss.str().c_str(), oss.str().size());\n        } else if (command == \"reset\") {\n            std::lock_guard<std::mutex> lock(stats_mutex_);\n            for (auto& [key, value] : stats_) {\n                value = 0;\n            }\n            write(sockfd, \"0\", 1);\n        }\n    }\n\n    void stop() {\n        if (statsThreadRunning_) {\n            statsThreadRunning_ = false;\n            if (stats_thread_.joinable()) {\n                stats_thread_.join();\n            }\n        }\n\n        if (sockfd_ >= 0) {\n            close(sockfd_);\n            sockfd_ = -1;\n        }\n\n        unlink(serv_addr_.sun_path);\n    }\n\n    static bool& isInitInternal() {\n        return is_initialized_;\n    }\n\n    std::string stats_socket_path_;\n    int sockfd_;\n    struct sockaddr_un serv_addr_;\n    std::thread stats_thread_;\n    std::atomic<bool> statsThreadRunning_;\n    std::mutex stats_mutex_;\n    std::mutex thread_mutex_;\n    std::condition_variable thread_exited_;\n    int thread_count_ = 0;\n    std::unordered_map<std::string, int> stats_;\n\n    static Stats* instance_;\n    static bool is_initialized_;\n};\n\nStats* Stats::instance_ = nullptr;\nbool Stats::is_initialized_ = false;\n```",
      "```cpp\n#include <iostream>\n#include <thread>\n#include <atomic>\n#include <mutex>\n#include <condition_variable>\n#include <unordered_map>\n#include <string>\n#include <cstring>\n#include <unistd.h>\n#include <sys/socket.h>\n#include <sys/un.h>\n#include <memory>\n\nclass Stats {\npublic:\n    static Stats& get(const std::string& stats_socket_path) {\n        static Stats instance(stats_socket_path);\n        return instance;\n    }\n\n    static std::unique_ptr<Stats> get_for_unittest(const std::string& stats_socket_path) {\n        return std::make_unique<Stats>(stats_socket_path);\n    }\n\n    static bool init(const std::string& stats_socket_path) {\n        if (!isInitInternal()) {\n            new Stats(stats_socket_path);\n            isInitInternal() = true;\n        }\n        return isInitInternal();\n    }\n\n    static bool isInit() {\n        return isInitInternal();\n    }\n\n    ~Stats() {\n        stop();\n    }\n\n    std::unordered_map<std::string, int> getAll() {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        return stats_;\n    }\n\n    int increment(const std::string& key, int val) {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        auto it = stats_.find(key);\n        if (it != stats_.end()) {\n            it->second += val;\n        } else {\n            stats_[key] = val;\n        }\n        return stats_[key];\n    }\n\n    int set(const std::string& key, int val) {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        stats_[key] = val;\n        return val;\n    }\n\n    int reset() {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        for (auto& [key, value] : stats_) {\n            value = 0;\n        }\n        return 0;\n    }\n\nprivate:\n    Stats(const std::string& stats_socket_path)\n        : stats_socket_path_(stats_socket_path),\n          sockfd_(-1),\n          statsThreadRunning_(false),\n          thread_count_(0) {\n        startSocket();\n    }\n\n    void stop() {\n        if (statsThreadRunning_) {\n            statsThreadRunning_ = false;\n            if (stats_thread_.joinable()) {\n                stats_thread_.join();\n            }\n            close(sockfd_);\n            unlink(stats_socket_path_.c_str());\n        }\n    }\n\n    bool startSocket() {\n        sockfd_ = socket(AF_UNIX, SOCK_STREAM, 0);\n        if (sockfd_ < 0) {\n            return false;\n        }\n\n        memset(&serv_addr_, 0, sizeof(serv_addr_));\n        serv_addr_.sun_family = AF_UNIX;\n        strncpy(serv_addr_.sun_path, stats_socket_path_.c_str(), sizeof(serv_addr_.sun_path) - 1);\n\n        unlink(stats_socket_path_.c_str());\n\n        if (bind(sockfd_, reinterpret_cast<struct sockaddr*>(&serv_addr_), sizeof(serv_addr_)) < 0) {\n            close(sockfd_);\n            return false;\n        }\n\n        if (listen(sockfd_, 5) < 0) {\n            close(sockfd_);\n            return false;\n        }\n\n        statsThreadRunning_ = true;\n        stats_thread_ = std::thread(&Stats::runSocket, this);\n        return true;\n    }\n\n    void runSocket() {\n        while (statsThreadRunning_) {\n            struct sockaddr_un cli_addr;\n            socklen_t clilen = sizeof(cli_addr);\n            int newsockfd = accept(sockfd_, reinterpret_cast<struct sockaddr*>(&cli_addr), &clilen);\n            if (newsockfd < 0) {\n                continue;\n            }\n\n            {\n                std::lock_guard<std::mutex> lock(thread_mutex_);\n                ++thread_count_;\n            }\n\n            std::thread([this, newsockfd]() {\n                processMsg(newsockfd);\n                {\n                    std::lock_guard<std::mutex> lock(thread_mutex_);\n                    --thread_count_;\n                    thread_exited_.notify_one();\n                }\n            }).detach();\n        }\n    }\n\n    void processMsg(int sockfd) {\n        char buffer[256];\n        bzero(buffer, 256);\n        ssize_t n = read(sockfd, buffer, 255);\n        if (n <= 0) {\n            close(sockfd);\n            return;\n        }\n\n        std::string request(buffer);\n        std::string response;\n\n        if (request == \"get\") {\n            std::lock_guard<std::mutex> lock(stats_mutex_);\n            for (const auto& [key, value] : stats_) {\n                response += key + \":\" + std::to_string(value) + \"\\n\";\n            }\n        } else if (request == \"reset\") {\n            reset();\n            response = \"reset\\n\";\n        } else if (request.rfind(\"increment:\", 0) == 0) {\n            size_t colonPos = request.find(':', 9);\n            if (colonPos != std::string::npos) {\n                std::string key = request.substr(10, colonPos - 10);\n                int val = std::stoi(request.substr(colonPos + 1));\n                increment(key, val);\n                response = \"ok\\n\";\n            }\n        } else if (request.rfind(\"set:\", 0) == 0) {\n            size_t colonPos = request.find(':', 4);\n            if (colonPos != std::string::npos) {\n                std::string key = request.substr(4, colonPos - 4);\n                int val = std::stoi(request.substr(colonPos + 1));\n                set(key, val);\n                response = \"ok\\n\";\n            }\n        } else {\n            response = \"unknown command\\n\";\n        }\n\n        write(sockfd, response.c_str(), response.size());\n        close(sockfd);\n    }\n\n    static bool& isInitInternal() {\n        static bool initialized = false;\n        return initialized;\n    }\n\n    std::string stats_socket_path_;\n    int sockfd_;\n    sockaddr_un serv_addr_;\n    std::thread stats_thread_;\n    std::atomic<bool> statsThreadRunning_;\n    std::mutex stats_mutex_;\n    std::mutex thread_mutex_;\n    std::condition_variable thread_exited_;\n    int thread_count_;\n    std::unordered_map<std::string, int> stats_;\n};\n```"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 27,
    "Instruction": "Task Description: Implement a UDP receiver class in C++ that listens for incoming UDP packets on a specified port, processes them, and forwards them to a network handling component. The class should handle socket creation, binding, and packet reception in a non-blocking manner using polling.\n\nClass Description: The `UDPRecv` class is responsible for setting up a UDP socket server that listens for incoming messages on a specified port. It uses polling to check for incoming data without blocking, and forwards received messages to a network handling component (`DFNetWork`). The class manages the socket lifecycle and provides methods to initialize, start, and stop the receiver.\n\nAttributes:\n- m_poDFNetWork: [DFNetWork*] - Pointer to the network handling component that processes received messages\n- m_iSockFD: [int] - File descriptor for the UDP socket\n- m_bIsEnd: [bool] - Flag indicating whether the receiver should stop running\n- m_bIsStarted: [bool] - Flag indicating whether the receiver has started\n\nMethods:\n- UDPRecv(DFNetWork* poDFNetWork) -> [void] - Constructor that initializes the receiver with a network handling component\n- ~UDPRecv() -> [void] - Destructor that closes the socket if it's open\n- Stop() -> [void] - Signals the receiver to stop and waits for it to finish\n- Init(int iPort) -> [int] - Initializes the UDP socket and binds it to the specified port (returns 0 on success, -1 on failure)\n- run() -> [void] - Main execution loop that polls for incoming messages and processes them (runs in a separate thread)",
    "Canonical_solution": "#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#include <string.h>\n#include \"dfnetwork.h\"\n\nnamespace phxpaxos {\n\nclass UDPRecv\n{\npublic:\n    UDPRecv(DFNetWork * poDFNetWork);\n    ~UDPRecv();\n\n    void Stop();\n    int Init(const int iPort);\n    void run();\n\nprivate:\n    DFNetWork * m_poDFNetWork;\n    int m_iSockFD;\n    bool m_bIsEnd;\n    bool m_bIsStarted;\n};\n\nUDPRecv::UDPRecv(DFNetWork * poDFNetWork) \n    : m_poDFNetWork(poDFNetWork), m_iSockFD(-1), m_bIsEnd(false), m_bIsStarted(false)\n{\n}\n\nUDPRecv::~UDPRecv()\n{\n    if (m_iSockFD != -1)\n    {\n        close(m_iSockFD);\n        m_iSockFD = -1;\n    }\n}\n\nvoid UDPRecv::Stop()\n{\n    if (m_bIsStarted)\n    {\n        m_bIsEnd = true;\n        join();\n    }\n}\n\nint UDPRecv::Init(const int iPort)\n{\n    if ((m_iSockFD = socket(AF_INET, SOCK_DGRAM, 0)) < 0) \n    {\n        return -1;\n    }\n\n    struct sockaddr_in addr;\n    memset(&addr, 0, sizeof(addr));\n\n    addr.sin_family = AF_INET;\n    addr.sin_port = htons(iPort);\n    addr.sin_addr.s_addr = htonl(INADDR_ANY);\n\n    int enable = 1;\n    setsockopt(m_iSockFD, SOL_SOCKET, SO_REUSEADDR, &enable, sizeof(int));\n\n    if (bind(m_iSockFD, (struct sockaddr *)&addr, sizeof(addr)) < 0) \n    {\n        return -1;\n    }\n\n    return 0;\n}\n\nvoid UDPRecv::run()\n{\n    m_bIsStarted = true;\n\n    char sBuffer[65536] = {0};\n\n    struct sockaddr_in addr;\n    socklen_t addr_len = sizeof(struct sockaddr_in);\n    memset(&addr, 0, sizeof(addr));\n\n    while(true)\n    {\n        if (m_bIsEnd)\n        {\n            return;\n        }\n\n        struct pollfd fd;\n        int ret;\n\n        fd.fd = m_iSockFD;\n        fd.events = POLLIN;\n        ret = poll(&fd, 1, 500);\n\n        if (ret == 0 || ret == -1)\n        {\n            continue;\n        }\n        \n        int iRecvLen = recvfrom(m_iSockFD, sBuffer, sizeof(sBuffer), 0,\n                (struct sockaddr *)&addr, &addr_len);\n\n        if (iRecvLen > 0)\n        {\n            m_poDFNetWork->OnReceiveMessage(sBuffer, iRecvLen);\n        }\n    }\n}\n\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 152,
    "matched_results": [],
    "unmatched_results": [
      "```cpp\n#include <iostream>\n#include <thread>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n#include <poll.h>\n\nclass DFNetWork;\n\nclass UDPRecv {\npublic:\n    UDPRecv(DFNetWork* poDFNetWork);\n    ~UDPRecv();\n    void Stop();\n    int Init(int iPort);\n    void run();\n\nprivate:\n    DFNetWork* m_poDFNetWork;\n    int m_iSockFD;\n    bool m_bIsEnd;\n    bool m_bIsStarted;\n};\n\nUDPRecv::UDPRecv(DFNetWork* poDFNetWork) : m_poDFNetWork(poDFNetWork), m_iSockFD(-1), m_bIsEnd(false), m_bIsStarted(false) {}\n\nUDPRecv::~UDPRecv() {\n    if (m_iSockFD != -1) {\n        close(m_iSockFD);\n    }\n}\n\nvoid UDPRecv::Stop() {\n    m_bIsEnd = true;\n    if (m_bIsStarted) {\n        while (m_bIsStarted) {\n            usleep(10000);\n        }\n    }\n}\n\nint UDPRecv::Init(int iPort) {\n    m_iSockFD = socket(AF_INET, SOCK_DGRAM, 0);\n    if (m_iSockFD < 0) {\n        return -1;\n    }\n\n    sockaddr_in serverAddr{};\n    serverAddr.sin_family = AF_INET;\n    serverAddr.sin_addr.s_addr = INADDR_ANY;\n    serverAddr.sin_port = htons(iPort);\n\n    if (bind(m_iSockFD, reinterpret_cast<sockaddr*>(&serverAddr), sizeof(serverAddr)) < 0) {\n        close(m_iSockFD);\n        m_iSockFD = -1;\n        return -1;\n    }\n\n    return 0;\n}\n\nvoid UDPRecv::run() {\n    m_bIsStarted = true;\n    struct pollfd fds[1];\n    fds[0].fd = m_iSockFD;\n    fds[0].events = POLLIN;\n\n    sockaddr_in clientAddr{};\n    socklen_t clientAddrLen = sizeof(clientAddr);\n    char buffer[1024];\n\n    while (!m_bIsEnd) {\n        int ret = poll(fds, 1, 100); // Wait up to 100ms\n        if (ret < 0) {\n            continue;\n        }\n\n        if (fds[0].revents & POLLIN) {\n            ssize_t len = recvfrom(m_iSockFD, buffer, sizeof(buffer) - 1, 0,\n                                   reinterpret_cast<sockaddr*>(&clientAddr), &clientAddrLen);\n            if (len > 0) {\n                buffer[len] = '\\0';\n                m_poDFNetWork->ProcessMessage(buffer, len);\n            }\n        }\n    }\n\n    m_bIsStarted = false;\n}\n```",
      "```cpp\n#include <iostream>\n#include <thread>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n#include <poll.h>\n\nclass DFNetWork;\n\nclass UDPRecv {\npublic:\n    UDPRecv(DFNetWork* poDFNetWork);\n    ~UDPRecv();\n    void Stop();\n    int Init(int iPort);\n    void run();\n\nprivate:\n    DFNetWork* m_poDFNetWork;\n    int m_iSockFD;\n    bool m_bIsEnd;\n    bool m_bIsStarted;\n};\n\nUDPRecv::UDPRecv(DFNetWork* poDFNetWork) : m_poDFNetWork(poDFNetWork), m_iSockFD(-1), m_bIsEnd(false), m_bIsStarted(false) {}\n\nUDPRecv::~UDPRecv() {\n    if (m_iSockFD != -1) {\n        close(m_iSockFD);\n    }\n}\n\nvoid UDPRecv::Stop() {\n    m_bIsEnd = true;\n    if (m_bIsStarted) {\n        while (!m_bIsEnd) {\n            usleep(10000); // Wait for the thread to finish\n        }\n    }\n}\n\nint UDPRecv::Init(int iPort) {\n    m_iSockFD = socket(AF_INET, SOCK_DGRAM, 0);\n    if (m_iSockFD < 0) {\n        return -1;\n    }\n\n    sockaddr_in serverAddr{};\n    serverAddr.sin_family = AF_INET;\n    serverAddr.sin_addr.s_addr = INADDR_ANY;\n    serverAddr.sin_port = htons(iPort);\n\n    if (bind(m_iSockFD, reinterpret_cast<sockaddr*>(&serverAddr), sizeof(serverAddr)) < 0) {\n        close(m_iSockFD);\n        m_iSockFD = -1;\n        return -1;\n    }\n\n    return 0;\n}\n\nvoid UDPRecv::run() {\n    m_bIsStarted = true;\n    struct pollfd fds[1];\n    fds[0].fd = m_iSockFD;\n    fds[0].events = POLLIN;\n\n    sockaddr_in clientAddr{};\n    socklen_t clientAddrLen = sizeof(clientAddr);\n    char buffer[1024];\n\n    while (!m_bIsEnd) {\n        int ret = poll(fds, 1, 100); // 100ms timeout\n        if (ret < 0) {\n            continue;\n        }\n\n        if (fds[0].revents & POLLIN) {\n            ssize_t len = recvfrom(m_iSockFD, buffer, sizeof(buffer) - 1, 0,\n                                   reinterpret_cast<sockaddr*>(&clientAddr), &clientAddrLen);\n            if (len > 0) {\n                buffer[len] = '\\0';\n                m_poDFNetWork->ProcessMessage(buffer, len);\n            }\n        }\n    }\n\n    m_bIsStarted = false;\n}\n```",
      "```cpp\n#include <iostream>\n#include <thread>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n#include <poll.h>\n\nclass DFNetWork;\n\nclass UDPRecv {\npublic:\n    UDPRecv(DFNetWork* poDFNetWork);\n    ~UDPRecv();\n\n    void Stop();\n    int Init(int iPort);\n    void run();\n\nprivate:\n    DFNetWork* m_poDFNetWork;\n    int m_iSockFD;\n    bool m_bIsEnd;\n    bool m_bIsStarted;\n};\n\nUDPRecv::UDPRecv(DFNetWork* poDFNetWork) : m_poDFNetWork(poDFNetWork), m_iSockFD(-1), m_bIsEnd(false), m_bIsStarted(false) {}\n\nUDPRecv::~UDPRecv() {\n    if (m_iSockFD != -1) {\n        close(m_iSockFD);\n    }\n}\n\nvoid UDPRecv::Stop() {\n    m_bIsEnd = true;\n    if (m_bIsStarted) {\n        while (m_bIsStarted) {\n            usleep(10000); // wait for thread to finish\n        }\n    }\n}\n\nint UDPRecv::Init(int iPort) {\n    m_iSockFD = socket(AF_INET, SOCK_DGRAM, 0);\n    if (m_iSockFD < 0) {\n        return -1;\n    }\n\n    sockaddr_in serverAddr{};\n    serverAddr.sin_family = AF_INET;\n    serverAddr.sin_addr.s_addr = INADDR_ANY;\n    serverAddr.sin_port = htons(iPort);\n\n    if (bind(m_iSockFD, reinterpret_cast<sockaddr*>(&serverAddr), sizeof(serverAddr)) < 0) {\n        close(m_iSockFD);\n        m_iSockFD = -1;\n        return -1;\n    }\n\n    return 0;\n}\n\nvoid UDPRecv::run() {\n    m_bIsStarted = true;\n    struct pollfd fds[1];\n    fds[0].fd = m_iSockFD;\n    fds[0].events = POLLIN;\n\n    sockaddr_in clientAddr{};\n    socklen_t clientAddrLen = sizeof(clientAddr);\n    char buffer[1024];\n\n    while (!m_bIsEnd) {\n        int ret = poll(fds, 1, 100); // timeout 100ms\n        if (ret < 0) {\n            break;\n        } else if (ret > 0 && (fds[0].revents & POLLIN)) {\n            ssize_t len = recvfrom(m_iSockFD, buffer, sizeof(buffer) - 1, 0,\n                                   reinterpret_cast<sockaddr*>(&clientAddr), &clientAddrLen);\n            if (len > 0) {\n                buffer[len] = '\\0';\n                m_poDFNetWork->ProcessMessage(buffer, len);\n            }\n        }\n    }\n\n    m_bIsStarted = false;\n}\n```",
      "```cpp\n#include <iostream>\n#include <thread>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n#include <sys/poll.h>\n\nclass DFNetWork;\n\nclass UDPRecv {\npublic:\n    UDPRecv(DFNetWork* poDFNetWork);\n    ~UDPRecv();\n\n    void Stop();\n    int Init(int iPort);\n    void run();\n\nprivate:\n    DFNetWork* m_poDFNetWork;\n    int m_iSockFD;\n    bool m_bIsEnd;\n    bool m_bIsStarted;\n};\n\nUDPRecv::UDPRecv(DFNetWork* poDFNetWork)\n    : m_poDFNetWork(poDFNetWork), m_iSockFD(-1), m_bIsEnd(false), m_bIsStarted(false) {}\n\nUDPRecv::~UDPRecv() {\n    if (m_iSockFD != -1) {\n        close(m_iSockFD);\n    }\n}\n\nvoid UDPRecv::Stop() {\n    m_bIsEnd = true;\n    if (m_bIsStarted) {\n        while (m_bIsStarted) {\n            usleep(10000);\n        }\n    }\n}\n\nint UDPRecv::Init(int iPort) {\n    m_iSockFD = socket(AF_INET, SOCK_DGRAM, 0);\n    if (m_iSockFD < 0) {\n        return -1;\n    }\n\n    sockaddr_in serverAddr{};\n    serverAddr.sin_family = AF_INET;\n    serverAddr.sin_addr.s_addr = INADDR_ANY;\n    serverAddr.sin_port = htons(iPort);\n\n    if (bind(m_iSockFD, reinterpret_cast<sockaddr*>(&serverAddr), sizeof(serverAddr)) < 0) {\n        close(m_iSockFD);\n        m_iSockFD = -1;\n        return -1;\n    }\n\n    return 0;\n}\n\nvoid UDPRecv::run() {\n    m_bIsStarted = true;\n    struct pollfd fds[1];\n    fds[0].fd = m_iSockFD;\n    fds[0].events = POLLIN;\n\n    sockaddr_in clientAddr{};\n    socklen_t clientAddrLen = sizeof(clientAddr);\n    char buffer[4096];\n\n    while (!m_bIsEnd) {\n        int ret = poll(fds, 1, 100); // 100 ms timeout\n        if (ret < 0) {\n            break;\n        } else if (ret == 0) {\n            continue;\n        }\n\n        if (fds[0].revents & POLLIN) {\n            ssize_t len = recvfrom(m_iSockFD, buffer, sizeof(buffer) - 1, 0,\n                                   reinterpret_cast<sockaddr*>(&clientAddr), &clientAddrLen);\n            if (len > 0) {\n                buffer[len] = '\\0';\n                m_poDFNetWork->ProcessMessage(buffer, len);\n            }\n        }\n    }\n\n    m_bIsStarted = false;\n}\n```",
      "```cpp\n#include <iostream>\n#include <thread>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n#include <poll.h>\n\nclass DFNetWork;\n\nclass UDPRecv {\npublic:\n    UDPRecv(DFNetWork* poDFNetWork);\n    ~UDPRecv();\n\n    void Stop();\n    int Init(int iPort);\n    void run();\n\nprivate:\n    DFNetWork* m_poDFNetWork;\n    int m_iSockFD;\n    bool m_bIsEnd;\n    bool m_bIsStarted;\n};\n\nUDPRecv::UDPRecv(DFNetWork* poDFNetWork) : m_poDFNetWork(poDFNetWork), m_iSockFD(-1), m_bIsEnd(false), m_bIsStarted(false) {}\n\nUDPRecv::~UDPRecv() {\n    if (m_iSockFD != -1) {\n        close(m_iSockFD);\n    }\n}\n\nvoid UDPRecv::Stop() {\n    m_bIsEnd = true;\n    if (m_bIsStarted) {\n        while (m_bIsStarted) {\n            usleep(1000);\n        }\n    }\n}\n\nint UDPRecv::Init(int iPort) {\n    m_iSockFD = socket(AF_INET, SOCK_DGRAM, 0);\n    if (m_iSockFD < 0) {\n        return -1;\n    }\n\n    sockaddr_in serverAddr{};\n    serverAddr.sin_family = AF_INET;\n    serverAddr.sin_addr.s_addr = INADDR_ANY;\n    serverAddr.sin_port = htons(iPort);\n\n    if (bind(m_iSockFD, reinterpret_cast<sockaddr*>(&serverAddr), sizeof(serverAddr)) < 0) {\n        close(m_iSockFD);\n        m_iSockFD = -1;\n        return -1;\n    }\n\n    return 0;\n}\n\nvoid UDPRecv::run() {\n    m_bIsStarted = true;\n    struct pollfd fds[1];\n    fds[0].fd = m_iSockFD;\n    fds[0].events = POLLIN;\n\n    sockaddr_in clientAddr{};\n    socklen_t clientAddrLen = sizeof(clientAddr);\n    char buffer[1024];\n\n    while (!m_bIsEnd) {\n        int ret = poll(fds, 1, 100); // 100ms timeout\n        if (ret < 0) {\n            break;\n        } else if (ret > 0 && (fds[0].revents & POLLIN)) {\n            ssize_t recvLen = recvfrom(m_iSockFD, buffer, sizeof(buffer) - 1, 0,\n                                       reinterpret_cast<sockaddr*>(&clientAddr), &clientAddrLen);\n            if (recvLen > 0) {\n                buffer[recvLen] = '\\0';\n                m_poDFNetWork->ProcessMessage(buffer, recvLen);\n            }\n        }\n    }\n\n    m_bIsStarted = false;\n}\n```",
      "```cpp\n#include <iostream>\n#include <thread>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n#include <poll.h>\n\nclass DFNetWork;\n\nclass UDPRecv {\npublic:\n    UDPRecv(DFNetWork* poDFNetWork);\n    ~UDPRecv();\n    void Stop();\n    int Init(int iPort);\n    void run();\n\nprivate:\n    DFNetWork* m_poDFNetWork;\n    int m_iSockFD;\n    bool m_bIsEnd;\n    bool m_bIsStarted;\n};\n\nUDPRecv::UDPRecv(DFNetWork* poDFNetWork) : m_poDFNetWork(poDFNetWork), m_iSockFD(-1), m_bIsEnd(false), m_bIsStarted(false) {}\n\nUDPRecv::~UDPRecv() {\n    if (m_iSockFD != -1) {\n        close(m_iSockFD);\n    }\n}\n\nvoid UDPRecv::Stop() {\n    m_bIsEnd = true;\n    if (m_bIsStarted) {\n        while (m_bIsStarted) {\n            usleep(10000); // wait for thread to finish\n        }\n    }\n}\n\nint UDPRecv::Init(int iPort) {\n    m_iSockFD = socket(AF_INET, SOCK_DGRAM, 0);\n    if (m_iSockFD < 0) {\n        return -1;\n    }\n\n    sockaddr_in serverAddr{};\n    serverAddr.sin_family = AF_INET;\n    serverAddr.sin_addr.s_addr = INADDR_ANY;\n    serverAddr.sin_port = htons(iPort);\n\n    if (bind(m_iSockFD, reinterpret_cast<sockaddr*>(&serverAddr), sizeof(serverAddr)) < 0) {\n        close(m_iSockFD);\n        m_iSockFD = -1;\n        return -1;\n    }\n\n    return 0;\n}\n\nvoid UDPRecv::run() {\n    m_bIsStarted = true;\n    struct pollfd fds[1];\n    fds[0].fd = m_iSockFD;\n    fds[0].events = POLLIN;\n\n    sockaddr_in clientAddr{};\n    socklen_t clientAddrLen = sizeof(clientAddr);\n    char buffer[1024];\n\n    while (!m_bIsEnd) {\n        int ret = poll(fds, 1, 100); // timeout 100ms\n        if (ret < 0) {\n            break;\n        } else if (ret == 0) {\n            continue;\n        }\n\n        if (fds[0].revents & POLLIN) {\n            ssize_t bytesReceived = recvfrom(m_iSockFD, buffer, sizeof(buffer) - 1, 0,\n                                             reinterpret_cast<sockaddr*>(&clientAddr), &clientAddrLen);\n            if (bytesReceived > 0) {\n                buffer[bytesReceived] = '\\0';\n                m_poDFNetWork->ProcessMessage(buffer, bytesReceived);\n            }\n        }\n    }\n\n    m_bIsStarted = false;\n}\n```",
      "```cpp\n#include <iostream>\n#include <thread>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n#include <sys/poll.h>\n\nclass DFNetWork;\n\nclass UDPRecv {\npublic:\n    UDPRecv(DFNetWork* poDFNetWork);\n    ~UDPRecv();\n\n    void Stop();\n    int Init(int iPort);\n    void run();\n\nprivate:\n    DFNetWork* m_poDFNetWork;\n    int m_iSockFD;\n    bool m_bIsEnd;\n    bool m_bIsStarted;\n};\n\nUDPRecv::UDPRecv(DFNetWork* poDFNetWork) : m_poDFNetWork(poDFNetWork), m_iSockFD(-1), m_bIsEnd(false), m_bIsStarted(false) {}\n\nUDPRecv::~UDPRecv() {\n    if (m_iSockFD != -1) {\n        close(m_iSockFD);\n    }\n}\n\nvoid UDPRecv::Stop() {\n    m_bIsEnd = true;\n    if (m_bIsStarted) {\n        while (m_bIsStarted) {\n            usleep(10000); // Wait for thread to finish\n        }\n    }\n}\n\nint UDPRecv::Init(int iPort) {\n    m_iSockFD = socket(AF_INET, SOCK_DGRAM, 0);\n    if (m_iSockFD < 0) {\n        return -1;\n    }\n\n    sockaddr_in serverAddr{};\n    serverAddr.sin_family = AF_INET;\n    serverAddr.sin_addr.s_addr = INADDR_ANY;\n    serverAddr.sin_port = htons(iPort);\n\n    if (bind(m_iSockFD, reinterpret_cast<sockaddr*>(&serverAddr), sizeof(serverAddr)) < 0) {\n        close(m_iSockFD);\n        m_iSockFD = -1;\n        return -1;\n    }\n\n    return 0;\n}\n\nvoid UDPRecv::run() {\n    m_bIsStarted = true;\n    struct pollfd fds[1];\n    fds[0].fd = m_iSockFD;\n    fds[0].events = POLLIN;\n\n    sockaddr_in clientAddr{};\n    socklen_t clientAddrLen = sizeof(clientAddr);\n    char buffer[4096];\n\n    while (!m_bIsEnd) {\n        int ret = poll(fds, 1, 100); // 100ms timeout\n        if (ret < 0) {\n            break;\n        } else if (ret == 0) {\n            continue;\n        }\n\n        if (fds[0].revents & POLLIN) {\n            ssize_t len = recvfrom(m_iSockFD, buffer, sizeof(buffer) - 1, 0,\n                                   reinterpret_cast<sockaddr*>(&clientAddr), &clientAddrLen);\n            if (len > 0) {\n                buffer[len] = '\\0';\n                m_poDFNetWork->ProcessMessage(buffer, len);\n            }\n        }\n    }\n\n    m_bIsStarted = false;\n}\n```",
      "```cpp\n#include <iostream>\n#include <thread>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n#include <poll.h>\n\nclass DFNetWork;\n\nclass UDPRecv {\npublic:\n    UDPRecv(DFNetWork* poDFNetWork);\n    ~UDPRecv();\n    void Stop();\n    int Init(int iPort);\n    void run();\n\nprivate:\n    DFNetWork* m_poDFNetWork;\n    int m_iSockFD;\n    bool m_bIsEnd;\n    bool m_bIsStarted;\n};\n\nUDPRecv::UDPRecv(DFNetWork* poDFNetWork) : m_poDFNetWork(poDFNetWork), m_iSockFD(-1), m_bIsEnd(false), m_bIsStarted(false) {}\n\nUDPRecv::~UDPRecv() {\n    if (m_iSockFD != -1) {\n        close(m_iSockFD);\n    }\n}\n\nvoid UDPRecv::Stop() {\n    m_bIsEnd = true;\n    if (m_bIsStarted) {\n        while (m_bIsStarted) {\n            usleep(10000); // wait for thread to finish\n        }\n    }\n}\n\nint UDPRecv::Init(int iPort) {\n    m_iSockFD = socket(AF_INET, SOCK_DGRAM, 0);\n    if (m_iSockFD < 0) {\n        return -1;\n    }\n\n    sockaddr_in serverAddr{};\n    serverAddr.sin_family = AF_INET;\n    serverAddr.sin_addr.s_addr = INADDR_ANY;\n    serverAddr.sin_port = htons(iPort);\n\n    if (bind(m_iSockFD, reinterpret_cast<sockaddr*>(&serverAddr), sizeof(serverAddr)) < 0) {\n        close(m_iSockFD);\n        m_iSockFD = -1;\n        return -1;\n    }\n\n    return 0;\n}\n\nvoid UDPRecv::run() {\n    m_bIsStarted = true;\n    struct pollfd fds[1];\n    fds[0].fd = m_iSockFD;\n    fds[0].events = POLLIN;\n\n    sockaddr_in clientAddr{};\n    socklen_t clientAddrLen = sizeof(clientAddr);\n    char buffer[65536];\n\n    while (!m_bIsEnd) {\n        int ret = poll(fds, 1, 100); // timeout in milliseconds\n        if (ret < 0) {\n            break;\n        } else if (ret == 0) {\n            continue;\n        }\n\n        if (fds[0].revents & POLLIN) {\n            ssize_t recvLen = recvfrom(m_iSockFD, buffer, sizeof(buffer), 0,\n                                       reinterpret_cast<sockaddr*>(&clientAddr), &clientAddrLen);\n            if (recvLen > 0) {\n                m_poDFNetWork->ProcessMessage(buffer, static_cast<size_t>(recvLen));\n            }\n        }\n    }\n\n    m_bIsStarted = false;\n}\n```",
      "```cpp\n#include <iostream>\n#include <thread>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n#include <poll.h>\n\nclass DFNetWork;\n\nclass UDPRecv {\npublic:\n    UDPRecv(DFNetWork* poDFNetWork);\n    ~UDPRecv();\n    void Stop();\n    int Init(int iPort);\n    void run();\n\nprivate:\n    DFNetWork* m_poDFNetWork;\n    int m_iSockFD;\n    bool m_bIsEnd;\n    bool m_bIsStarted;\n};\n\nUDPRecv::UDPRecv(DFNetWork* poDFNetWork) : m_poDFNetWork(poDFNetWork), m_iSockFD(-1), m_bIsEnd(false), m_bIsStarted(false) {}\n\nUDPRecv::~UDPRecv() {\n    if (m_iSockFD != -1) {\n        close(m_iSockFD);\n    }\n}\n\nvoid UDPRecv::Stop() {\n    m_bIsEnd = true;\n    if (m_bIsStarted) {\n        while (m_bIsStarted) {\n            usleep(10000); // Wait for the thread to finish\n        }\n    }\n}\n\nint UDPRecv::Init(int iPort) {\n    m_iSockFD = socket(AF_INET, SOCK_DGRAM, 0);\n    if (m_iSockFD < 0) {\n        return -1;\n    }\n\n    sockaddr_in serverAddr{};\n    serverAddr.sin_family = AF_INET;\n    serverAddr.sin_addr.s_addr = INADDR_ANY;\n    serverAddr.sin_port = htons(iPort);\n\n    if (bind(m_iSockFD, reinterpret_cast<sockaddr*>(&serverAddr), sizeof(serverAddr)) < 0) {\n        close(m_iSockFD);\n        m_iSockFD = -1;\n        return -1;\n    }\n\n    return 0;\n}\n\nvoid UDPRecv::run() {\n    m_bIsStarted = true;\n    struct pollfd fds[1];\n    fds[0].fd = m_iSockFD;\n    fds[0].events = POLLIN;\n\n    sockaddr_in clientAddr{};\n    socklen_t clientAddrLen = sizeof(clientAddr);\n    char buffer[1024];\n\n    while (!m_bIsEnd) {\n        int ret = poll(fds, 1, 100); // 100 ms timeout\n        if (ret < 0) {\n            break;\n        } else if (ret == 0) {\n            continue;\n        }\n\n        if (fds[0].revents & POLLIN) {\n            ssize_t len = recvfrom(m_iSockFD, buffer, sizeof(buffer) - 1, 0,\n                                   reinterpret_cast<sockaddr*>(&clientAddr), &clientAddrLen);\n            if (len > 0) {\n                buffer[len] = '\\0';\n                m_poDFNetWork->ProcessMessage(buffer, len);\n            }\n        }\n    }\n\n    m_bIsStarted = false;\n}\n```",
      "```cpp\n#include <iostream>\n#include <thread>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n#include <sys/poll.h>\n\nclass DFNetWork;\n\nclass UDPRecv {\npublic:\n    UDPRecv(DFNetWork* poDFNetWork);\n    ~UDPRecv();\n    void Stop();\n    int Init(int iPort);\n    void run();\n\nprivate:\n    DFNetWork* m_poDFNetWork;\n    int m_iSockFD;\n    bool m_bIsEnd;\n    bool m_bIsStarted;\n};\n\nUDPRecv::UDPRecv(DFNetWork* poDFNetWork) : m_poDFNetWork(poDFNetWork), m_iSockFD(-1), m_bIsEnd(false), m_bIsStarted(false) {}\n\nUDPRecv::~UDPRecv() {\n    if (m_iSockFD != -1) {\n        close(m_iSockFD);\n    }\n}\n\nvoid UDPRecv::Stop() {\n    m_bIsEnd = true;\n    if (m_bIsStarted) {\n        while (m_bIsStarted) {\n            usleep(10000); // Wait for thread to finish\n        }\n    }\n}\n\nint UDPRecv::Init(int iPort) {\n    m_iSockFD = socket(AF_INET, SOCK_DGRAM, 0);\n    if (m_iSockFD < 0) {\n        return -1;\n    }\n\n    sockaddr_in serverAddr{};\n    serverAddr.sin_family = AF_INET;\n    serverAddr.sin_addr.s_addr = INADDR_ANY;\n    serverAddr.sin_port = htons(iPort);\n\n    if (bind(m_iSockFD, reinterpret_cast<sockaddr*>(&serverAddr), sizeof(serverAddr)) < 0) {\n        close(m_iSockFD);\n        m_iSockFD = -1;\n        return -1;\n    }\n\n    return 0;\n}\n\nvoid UDPRecv::run() {\n    m_bIsStarted = true;\n    struct pollfd fds[1];\n    fds[0].fd = m_iSockFD;\n    fds[0].events = POLLIN;\n\n    sockaddr_in clientAddr{};\n    socklen_t clientAddrLen = sizeof(clientAddr);\n    char buffer[65536];\n\n    while (!m_bIsEnd) {\n        int ret = poll(fds, 1, 100); // 100ms timeout\n        if (ret < 0) {\n            break;\n        } else if (ret > 0 && (fds[0].revents & POLLIN)) {\n            ssize_t recvLen = recvfrom(m_iSockFD, buffer, sizeof(buffer), 0,\n                                       reinterpret_cast<sockaddr*>(&clientAddr), &clientAddrLen);\n            if (recvLen > 0) {\n                m_poDFNetWork->ProcessMessage(buffer, static_cast<size_t>(recvLen));\n            }\n        }\n    }\n\n    m_bIsStarted = false;\n}\n```"
    ],
    "match_count": 0,
    "pass@3": 0.0,
    "pass@5": 0.0
  },
  {
    "Task_id": 28,
    "Instruction": "Task Description: Create a UDP server class using Boost.Asio that asynchronously receives datagrams and sends responses.\n\nClass Description: The udp_server class implements a UDP server that listens for incoming datagrams on a specified port and responds with a daytime string. It uses Boost.Asio for asynchronous network operations.\n\nAttributes:\n- socket_: [boost::asio::ip::udp::socket] - The UDP socket used for communication\n- remote_endpoint_: [boost::asio::ip::udp::endpoint] - Stores the endpoint of the last received message\n- recv_buffer_: [std::array<char, 1>] - Buffer for receiving incoming datagrams\n\nMethods:\n- udp_server([boost::asio::io_context&] io_context) -> [void] - Constructor that initializes the UDP socket and starts listening\n- start_receive() -> [void] - Begins asynchronous reception of UDP datagrams\n- handle_receive([const boost::system::error_code&] error) -> [void] - Callback for handling received datagrams and sending responses\n- handle_send([std::shared_ptr<std::string>] message) -> [void] - Callback for handling completed send operations",
    "Canonical_solution": "#include <boost/asio.hpp>\n#include <memory>\n#include <string>\n#include <array>\nusing boost::asio::ip::udp;\n\nclass udp_server\n{\npublic:\n  udp_server(boost::asio::io_context& io_context)\n    : socket_(io_context, udp::endpoint(udp::v4(), 13))\n  {\n    start_receive();\n  }\n\nprivate:\n  void start_receive()\n  {\n    socket_.async_receive_from(\n        boost::asio::buffer(recv_buffer_), remote_endpoint_,\n        std::bind(&udp_server::handle_receive, this,\n          boost::asio::placeholders::error));\n  }\n\n  void handle_receive(const boost::system::error_code& error)\n  {\n    if (!error)\n    {\n      std::shared_ptr<std::string> message(\n          new std::string(make_daytime_string()));\n\n      socket_.async_send_to(boost::asio::buffer(*message), remote_endpoint_,\n          std::bind(&udp_server::handle_send, this, message));\n\n      start_receive();\n    }\n  }\n\n  void handle_send(std::shared_ptr<std::string> /*message*/)\n  {\n  }\n\n  udp::socket socket_;\n  udp::endpoint remote_endpoint_;\n  std::array<char, 1> recv_buffer_;\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 153,
    "matched_results": [
      "```cpp\n#include <boost/asio.hpp>\n#include <array>\n#include <memory>\n#include <string>\n#include <ctime>\n#include <iomanip>\n#include <sstream>\n\nusing boost::asio::ip::udp;\n\nclass udp_server {\npublic:\n    explicit udp_server(boost::asio::io_context& io_context)\n        : socket_(io_context, udp::endpoint(udp::v4(), 13))\n    {\n        start_receive();\n    }\n\nprivate:\n    void start_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(recv_buffer_), remote_endpoint_,\n            [this](const boost::system::error_code& error) {\n                handle_receive(error);\n            });\n    }\n\n    void handle_receive(const boost::system::error_code& error) {\n        if (!error || error == boost::asio::error::message_size) {\n            std::time_t now = std::time(nullptr);\n            std::ostringstream oss;\n            oss << std::put_time(std::localtime(&now), \"%Y-%m-%d %X\");\n            std::shared_ptr<std::string> message(new std::string(oss.str()));\n\n            socket_.async_send_to(\n                boost::asio::buffer(*message), remote_endpoint_,\n                [this, message](const boost::system::error_code&, std::size_t) {\n                    handle_send(message);\n                });\n\n            start_receive();\n        }\n    }\n\n    void handle_send(std::shared_ptr<std::string>) {\n        // No action required after send completes\n    }\n\n    udp::socket socket_;\n    udp::endpoint remote_endpoint_;\n    std::array<char, 1> recv_buffer_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <array>\n#include <memory>\n#include <string>\n#include <ctime>\n#include <iomanip>\n#include <sstream>\n\nusing boost::asio::ip::udp;\n\nclass udp_server {\npublic:\n    explicit udp_server(boost::asio::io_context& io_context)\n        : socket_(io_context, udp::endpoint(udp::v4(), 12345)) {\n        start_receive();\n    }\n\nprivate:\n    void start_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(recv_buffer_), remote_endpoint_,\n            [this](const boost::system::error_code& error) {\n                handle_receive(error);\n            });\n    }\n\n    void handle_receive(const boost::system::error_code& error) {\n        if (!error || error == boost::asio::error::message_size) {\n            std::time_t now = std::time(nullptr);\n            std::tm tm = *std::localtime(&now);\n            std::ostringstream oss;\n            oss << std::put_time(&tm, \"%Y-%m-%d %X\");\n            auto message = std::make_shared<std::string>(oss.str());\n\n            socket_.async_send_to(\n                boost::asio::buffer(*message), remote_endpoint_,\n                [this, message](const boost::system::error_code&, std::size_t) {\n                    handle_send(message);\n                });\n\n            start_receive();\n        }\n    }\n\n    void handle_send(std::shared_ptr<std::string> /*message*/) {\n        // Send operation completed\n    }\n\n    udp::socket socket_;\n    udp::endpoint remote_endpoint_;\n    std::array<char, 1> recv_buffer_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <array>\n#include <memory>\n#include <string>\n#include <ctime>\n#include <iomanip>\n#include <sstream>\n\nusing boost::asio::ip::udp;\n\nclass udp_server {\npublic:\n    explicit udp_server(boost::asio::io_context& io_context)\n        : socket_(io_context, udp::endpoint(udp::v4(), 13)) {\n        start_receive();\n    }\n\nprivate:\n    void start_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(recv_buffer_), remote_endpoint_,\n            [this](const boost::system::error_code& error) {\n                handle_receive(error);\n            });\n    }\n\n    void handle_receive(const boost::system::error_code& error) {\n        if (!error || error == boost::asio::error::message_size) {\n            std::time_t now = std::time(0);\n            std::tm tm = *std::localtime(&now);\n            std::ostringstream oss;\n            oss << std::put_time(&tm, \"%c\") << \"\\n\";\n            auto message = std::make_shared<std::string>(oss.str());\n\n            socket_.async_send_to(\n                boost::asio::buffer(*message), remote_endpoint_,\n                [this, message](const boost::system::error_code&, std::size_t) {\n                    handle_send(message);\n                });\n\n            start_receive();\n        }\n    }\n\n    void handle_send(std::shared_ptr<std::string>) {\n        // No action required after send\n    }\n\n    udp::socket socket_;\n    udp::endpoint remote_endpoint_;\n    std::array<char, 1> recv_buffer_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <array>\n#include <memory>\n#include <string>\n#include <ctime>\n#include <iomanip>\n#include <sstream>\n\nusing boost::asio::ip::udp;\n\nclass udp_server {\npublic:\n    explicit udp_server(boost::asio::io_context& io_context)\n        : socket_(io_context, udp::endpoint(udp::v4(), 12345)) {\n        start_receive();\n    }\n\nprivate:\n    void start_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(recv_buffer_), remote_endpoint_,\n            [this](const boost::system::error_code& error) {\n                handle_receive(error);\n            });\n    }\n\n    void handle_receive(const boost::system::error_code& error) {\n        if (!error || error == boost::asio::error::message_size) {\n            std::time_t now = std::time(nullptr);\n            std::tm tm = *std::localtime(&now);\n            std::ostringstream oss;\n            oss << std::put_time(&tm, \"%Y-%m-%d %X\");\n            auto message = std::make_shared<std::string>(oss.str());\n\n            socket_.async_send_to(\n                boost::asio::buffer(*message), remote_endpoint_,\n                [this, message](const boost::system::error_code&, std::size_t) {\n                    handle_send(message);\n                });\n\n            start_receive();\n        }\n    }\n\n    void handle_send(std::shared_ptr<std::string>) {\n        // No action required after send\n    }\n\n    udp::socket socket_;\n    udp::endpoint remote_endpoint_;\n    std::array<char, 1> recv_buffer_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <array>\n#include <memory>\n#include <string>\n#include <ctime>\n#include <iomanip>\n#include <sstream>\n\nusing boost::asio::ip::udp;\n\nclass udp_server {\npublic:\n    explicit udp_server(boost::asio::io_context& io_context)\n        : socket_(io_context, udp::endpoint(udp::v4(), 12345)) {\n        start_receive();\n    }\n\nprivate:\n    void start_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(recv_buffer_), remote_endpoint_,\n            [this](const boost::system::error_code& error) {\n                handle_receive(error);\n            });\n    }\n\n    void handle_receive(const boost::system::error_code& error) {\n        if (!error || error == boost::asio::error::message_size) {\n            std::time_t now = std::time(nullptr);\n            std::tm tm = *std::localtime(&now);\n            std::ostringstream oss;\n            oss << std::put_time(&tm, \"%c\");\n            auto message = std::make_shared<std::string>(oss.str());\n\n            socket_.async_send_to(\n                boost::asio::buffer(*message), remote_endpoint_,\n                [this, message](const boost::system::error_code&, std::size_t) {\n                    handle_send(message);\n                });\n\n            start_receive();\n        }\n    }\n\n    void handle_send(std::shared_ptr<std::string> /*message*/) {\n        // No action required after sending\n    }\n\n    udp::socket socket_;\n    udp::endpoint remote_endpoint_;\n    std::array<char, 1> recv_buffer_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <array>\n#include <memory>\n#include <string>\n#include <ctime>\n#include <iomanip>\n#include <sstream>\n\nusing boost::asio::ip::udp;\n\nclass udp_server {\npublic:\n    explicit udp_server(boost::asio::io_context& io_context)\n        : socket_(io_context, udp::endpoint(udp::v4(), 12345)) {\n        start_receive();\n    }\n\nprivate:\n    void start_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(recv_buffer_), remote_endpoint_,\n            [this](const boost::system::error_code& error) {\n                handle_receive(error);\n            });\n    }\n\n    void handle_receive(const boost::system::error_code& error) {\n        if (!error || error == boost::asio::error::message_size) {\n            std::time_t now = std::time(nullptr);\n            std::tm tm = *std::gmtime(&now);\n            std::ostringstream oss;\n            oss << std::put_time(&tm, \"%Y-%m-%d %X\") << \"\\n\";\n            auto message = std::make_shared<std::string>(oss.str());\n\n            socket_.async_send_to(\n                boost::asio::buffer(*message), remote_endpoint_,\n                [this, message](const boost::system::error_code&, std::size_t) {\n                    handle_send(message);\n                });\n\n            start_receive();\n        }\n    }\n\n    void handle_send(std::shared_ptr<std::string>) {\n        // No action needed after send completes\n    }\n\n    udp::socket socket_;\n    udp::endpoint remote_endpoint_;\n    std::array<char, 1> recv_buffer_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <array>\n#include <memory>\n#include <string>\n#include <ctime>\n#include <iomanip>\n#include <sstream>\n\nusing boost::asio::ip::udp;\n\nclass udp_server {\npublic:\n    explicit udp_server(boost::asio::io_context& io_context)\n        : socket_(io_context, udp::endpoint(udp::v4(), 12345)) {\n        start_receive();\n    }\n\nprivate:\n    void start_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(recv_buffer_), remote_endpoint_,\n            [this](const boost::system::error_code& error) {\n                handle_receive(error);\n            });\n    }\n\n    void handle_receive(const boost::system::error_code& error) {\n        if (!error || error == boost::asio::error::message_size) {\n            std::time_t now = std::time(nullptr);\n            std::tm tm = *std::gmtime(&now);\n            std::ostringstream oss;\n            oss << std::put_time(&tm, \"%Y-%m-%d %X\") << \"\\n\";\n            auto message = std::make_shared<std::string>(oss.str());\n\n            socket_.async_send_to(\n                boost::asio::buffer(*message), remote_endpoint_,\n                [this, message](const boost::system::error_code&, std::size_t) {\n                    handle_send(message);\n                });\n\n            start_receive();\n        }\n    }\n\n    void handle_send(std::shared_ptr<std::string>) {\n        // No action needed after send completes\n    }\n\n    udp::socket socket_;\n    udp::endpoint remote_endpoint_;\n    std::array<char, 1> recv_buffer_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <array>\n#include <memory>\n#include <string>\n#include <ctime>\n#include <iomanip>\n#include <sstream>\n\nusing boost::asio::ip::udp;\n\nclass udp_server {\npublic:\n    explicit udp_server(boost::asio::io_context& io_context)\n        : socket_(io_context, udp::endpoint(udp::v4(), 12345)) {\n        start_receive();\n    }\n\nprivate:\n    void start_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(recv_buffer_), remote_endpoint_,\n            [this](const boost::system::error_code& error) {\n                handle_receive(error);\n            });\n    }\n\n    void handle_receive(const boost::system::error_code& error) {\n        if (!error || error == boost::asio::error::message_size) {\n            std::time_t now = std::time(nullptr);\n            std::ostringstream oss;\n            oss << std::put_time(std::localtime(&now), \"%Y-%m-%d %X\");\n            auto message = std::make_shared<std::string>(oss.str());\n\n            socket_.async_send_to(\n                boost::asio::buffer(*message), remote_endpoint_,\n                [this, message](const boost::system::error_code&, std::size_t) {\n                    handle_send(message);\n                });\n\n            start_receive();\n        }\n    }\n\n    void handle_send(std::shared_ptr<std::string> /*message*/) {\n        // No action needed after send\n    }\n\n    udp::socket socket_;\n    udp::endpoint remote_endpoint_;\n    std::array<char, 1> recv_buffer_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <array>\n#include <memory>\n#include <string>\n#include <ctime>\n#include <iomanip>\n#include <sstream>\n\nusing boost::asio::ip::udp;\n\nclass udp_server {\npublic:\n    explicit udp_server(boost::asio::io_context& io_context)\n        : socket_(io_context, udp::endpoint(udp::v4(), 12345)) {\n        start_receive();\n    }\n\nprivate:\n    void start_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(recv_buffer_), remote_endpoint_,\n            [this](const boost::system::error_code& error) {\n                handle_receive(error);\n            });\n    }\n\n    void handle_receive(const boost::system::error_code& error) {\n        if (!error || error == boost::asio::error::message_size) {\n            std::time_t now = std::time(nullptr);\n            std::tm tm = *std::localtime(&now);\n            std::ostringstream oss;\n            oss << std::put_time(&tm, \"%c\");\n            auto message = std::make_shared<std::string>(oss.str());\n\n            socket_.async_send_to(\n                boost::asio::buffer(*message), remote_endpoint_,\n                [this, message](const boost::system::error_code&, std::size_t) {\n                    handle_send(message);\n                });\n\n            start_receive();\n        }\n    }\n\n    void handle_send(std::shared_ptr<std::string> /*message*/) {\n        // Send operation completed; no further action required\n    }\n\n    udp::socket socket_;\n    udp::endpoint remote_endpoint_;\n    std::array<char, 1> recv_buffer_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <array>\n#include <memory>\n#include <string>\n#include <ctime>\n#include <iomanip>\n#include <sstream>\n\nusing boost::asio::ip::udp;\n\nclass udp_server {\npublic:\n    explicit udp_server(boost::asio::io_context& io_context)\n        : socket_(io_context, udp::endpoint(udp::v4(), 12345)) {\n        start_receive();\n    }\n\nprivate:\n    void start_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(recv_buffer_), remote_endpoint_,\n            [this](const boost::system::error_code& error) {\n                handle_receive(error);\n            });\n    }\n\n    void handle_receive(const boost::system::error_code& error) {\n        if (!error || error == boost::asio::error::message_size) {\n            std::time_t now = std::time(nullptr);\n            std::tm tm = *std::localtime(&now);\n            std::ostringstream oss;\n            oss << std::put_time(&tm, \"%Y-%m-%d %X\");\n            auto message = std::make_shared<std::string>(oss.str());\n\n            socket_.async_send_to(\n                boost::asio::buffer(*message), remote_endpoint_,\n                [this, message](const boost::system::error_code&, std::size_t) {\n                    handle_send(message);\n                });\n\n            start_receive();\n        }\n    }\n\n    void handle_send(std::shared_ptr<std::string>) {\n        // No action required after sending\n    }\n\n    udp::socket socket_;\n    udp::endpoint remote_endpoint_;\n    std::array<char, 1> recv_buffer_;\n};\n```"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 29,
    "Instruction": "Task Description: Implement a UDP server class using Boost.Asio that listens for incoming datagrams and responds with the current daytime string.\n\nClass Description: The `udp_server` class implements a UDP server that listens on a specified port (13 in this case) for incoming datagrams. When a datagram is received, it responds with the current daytime string. The class uses asynchronous operations for receiving and sending data.\n\nAttributes:\n- socket_: [boost::asio::ip::udp::socket] - The UDP socket used for communication\n- remote_endpoint_: [boost::asio::ip::udp::endpoint] - Stores the endpoint of the last received datagram\n- recv_buffer_: [std::array<char, 1>] - Buffer for storing received data\n\nMethods:\n- Constructor: [udp_server]([boost::asio::io_context& io_context]) -> [void] - Initializes the UDP socket and starts listening for incoming datagrams\n- start_receive: [start_receive]() -> [void] - Begins an asynchronous receive operation on the socket\n- handle_receive: [handle_receive]([const boost::system::error_code& error, std::size_t bytes_transferred]) -> [void] - Handles the completion of a receive operation and initiates a response\n- handle_send: [handle_send]([std::shared_ptr<std::string> message, const boost::system::error_code& error, std::size_t bytes_transferred]) -> [void] - Handles the completion of a send operation\n- make_daytime_string: [make_daytime_string]() -> [std::string] - Generates and returns the current daytime string",
    "Canonical_solution": "#include <boost/asio.hpp>\n#include <memory>\n#include <string>\n#include <array>\n\nusing boost::asio::ip::udp;\n\nclass udp_server\n{\npublic:\n  udp_server(boost::asio::io_context& io_context)\n    : socket_(io_context, udp::endpoint(udp::v4(), 13))\n  {\n    start_receive();\n  }\n\nprivate:\n  void start_receive()\n  {\n    socket_.async_receive_from(\n        boost::asio::buffer(recv_buffer_), remote_endpoint_,\n        std::bind(&udp_server::handle_receive, this,\n          boost::asio::placeholders::error,\n          boost::asio::placeholders::bytes_transferred));\n  }\n\n  void handle_receive(const boost::system::error_code& error,\n      std::size_t /*bytes_transferred*/)\n  {\n    if (!error)\n    {\n      std::shared_ptr<std::string> message(\n          new std::string(make_daytime_string()));\n\n      socket_.async_send_to(boost::asio::buffer(*message), remote_endpoint_,\n          std::bind(&udp_server::handle_send, this, message,\n            boost::asio::placeholders::error,\n            boost::asio::placeholders::bytes_transferred));\n\n      start_receive();\n    }\n  }\n\n  void handle_send(std::shared_ptr<std::string> /*message*/,\n      const boost::system::error_code& /*error*/,\n      std::size_t /*bytes_transferred*/)\n  {\n  }\n\n  std::string make_daytime_string()\n  {\n    using namespace std;\n    time_t now = time(0);\n    return ctime(&now);\n  }\n\n  udp::socket socket_;\n  udp::endpoint remote_endpoint_;\n  std::array<char, 1> recv_buffer_;\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 153,
    "matched_results": [
      "```cpp\n#include <boost/asio.hpp>\n#include <array>\n#include <string>\n#include <ctime>\n#include <memory>\n\nusing boost::asio::ip::udp;\n\nclass udp_server {\npublic:\n  explicit udp_server(boost::asio::io_context& io_context)\n    : socket_(io_context, udp::endpoint(udp::v4(), 13)) {\n    start_receive();\n  }\n\nprivate:\n  void start_receive() {\n    socket_.async_receive_from(\n        boost::asio::buffer(recv_buffer_), remote_endpoint_,\n        [this](const boost::system::error_code& error, std::size_t bytes_transferred) {\n          handle_receive(error, bytes_transferred);\n        });\n  }\n\n  void handle_receive(const boost::system::error_code& error, std::size_t /*bytes_transferred*/) {\n    if (!error || error == boost::asio::error::message_size) {\n      std::shared_ptr<std::string> message = std::make_shared<std::string>(make_daytime_string());\n      socket_.async_send_to(\n          boost::asio::buffer(*message), remote_endpoint_,\n          [this, message](const boost::system::error_code& error, std::size_t /*bytes_transferred*/) {\n            handle_send(message, error, 0);\n          });\n    }\n    start_receive();\n  }\n\n  void handle_send(std::shared_ptr<std::string> /*message*/,\n                   const boost::system::error_code& /*error*/,\n                   std::size_t /*bytes_transferred*/) {}\n\n  std::string make_daytime_string() {\n    using namespace std;\n    time_t now = time(0);\n    return ctime(&now);\n  }\n\n  udp::socket socket_;\n  udp::endpoint remote_endpoint_;\n  std::array<char, 1> recv_buffer_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <array>\n#include <memory>\n#include <ctime>\n\nclass udp_server {\npublic:\n  explicit udp_server(boost::asio::io_context& io_context)\n    : socket_(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), 13)) {\n    start_receive();\n  }\n\nprivate:\n  void start_receive() {\n    socket_.async_receive_from(\n        boost::asio::buffer(recv_buffer_), remote_endpoint_,\n        [this](const boost::system::error_code& error, std::size_t bytes_transferred) {\n          handle_receive(error, bytes_transferred);\n        });\n  }\n\n  void handle_receive(const boost::system::error_code& error, std::size_t /*bytes_transferred*/) {\n    if (!error || error == boost::asio::error::message_size) {\n      std::shared_ptr<std::string> message = std::make_shared<std::string>(make_daytime_string());\n      socket_.async_send_to(\n          boost::asio::buffer(*message), remote_endpoint_,\n          [this, message](const boost::system::error_code& error, std::size_t /*bytes_transferred*/) {\n            handle_send(message, error, 0);\n          });\n    }\n    start_receive();\n  }\n\n  void handle_send(std::shared_ptr<std::string> /*message*/, const boost::system::error_code& /*error*/,\n                   std::size_t /*bytes_transferred*/) {}\n\n  std::string make_daytime_string() {\n    using namespace std;\n    time_t now = time(0);\n    return ctime(&now);\n  }\n\n  boost::asio::ip::udp::socket socket_;\n  boost::asio::ip::udp::endpoint remote_endpoint_;\n  std::array<char, 1> recv_buffer_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <array>\n#include <string>\n#include <ctime>\n#include <memory>\n\nusing boost::asio::ip::udp;\n\nclass udp_server {\npublic:\n  explicit udp_server(boost::asio::io_context& io_context)\n    : socket_(io_context, udp::endpoint(udp::v4(), 13)) {\n    start_receive();\n  }\n\nprivate:\n  void start_receive() {\n    socket_.async_receive_from(\n        boost::asio::buffer(recv_buffer_), remote_endpoint_,\n        [this](const boost::system::error_code& error, std::size_t bytes_transferred) {\n          handle_receive(error, bytes_transferred);\n        });\n  }\n\n  void handle_receive(const boost::system::error_code& error, std::size_t /*bytes_transferred*/) {\n    if (!error || error == boost::asio::error::message_size) {\n      auto message = std::make_shared<std::string>(make_daytime_string());\n      socket_.async_send_to(\n          boost::asio::buffer(*message), remote_endpoint_,\n          [this, message](const boost::system::error_code& error, std::size_t /*bytes_transferred*/) {\n            handle_send(message, error, 0);\n          });\n    }\n    start_receive();\n  }\n\n  void handle_send(std::shared_ptr<std::string> /*message*/,\n                   const boost::system::error_code& /*error*/,\n                   std::size_t /*bytes_transferred*/) {}\n\n  std::string make_daytime_string() {\n    using namespace std;\n    time_t now = time(0);\n    return ctime(&now);\n  }\n\n  udp::socket socket_;\n  udp::endpoint remote_endpoint_;\n  std::array<char, 1> recv_buffer_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <array>\n#include <string>\n#include <ctime>\n#include <memory>\n\nclass udp_server {\npublic:\n  explicit udp_server(boost::asio::io_context& io_context)\n    : socket_(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), 13)) {\n    start_receive();\n  }\n\nprivate:\n  void start_receive() {\n    socket_.async_receive_from(\n        boost::asio::buffer(recv_buffer_), remote_endpoint_,\n        [this](const boost::system::error_code& error, std::size_t bytes_transferred) {\n          handle_receive(error, bytes_transferred);\n        });\n  }\n\n  void handle_receive(const boost::system::error_code& error, std::size_t /*bytes_transferred*/) {\n    if (!error || error == boost::asio::error::message_size) {\n      auto message = std::make_shared<std::string>(make_daytime_string());\n      socket_.async_send_to(\n          boost::asio::buffer(*message), remote_endpoint_,\n          [this, message](const boost::system::error_code& error, std::size_t /*bytes_transferred*/) {\n            handle_send(message, error, 0);\n          });\n    }\n\n    start_receive();\n  }\n\n  void handle_send(std::shared_ptr<std::string> /*message*/,\n                   const boost::system::error_code& /*error*/,\n                   std::size_t /*bytes_transferred*/) {}\n\n  std::string make_daytime_string() {\n    using namespace std;\n    time_t now = time(0);\n    return ctime(&now);\n  }\n\n  boost::asio::ip::udp::socket socket_;\n  boost::asio::ip::udp::endpoint remote_endpoint_;\n  std::array<char, 1> recv_buffer_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <array>\n#include <memory>\n#include <ctime>\n\nclass udp_server {\npublic:\n  explicit udp_server(boost::asio::io_context& io_context)\n    : socket_(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), 13)) {\n    start_receive();\n  }\n\nprivate:\n  void start_receive() {\n    socket_.async_receive_from(\n        boost::asio::buffer(recv_buffer_), remote_endpoint_,\n        [this](const boost::system::error_code& error, std::size_t bytes_transferred) {\n          handle_receive(error, bytes_transferred);\n        });\n  }\n\n  void handle_receive(const boost::system::error_code& error, std::size_t /*bytes_transferred*/) {\n    if (!error || error == boost::asio::error::message_size) {\n      auto message = std::make_shared<std::string>(make_daytime_string());\n      socket_.async_send_to(\n          boost::asio::buffer(*message), remote_endpoint_,\n          [this, message](const boost::system::error_code& error, std::size_t /*bytes_transferred*/) {\n            handle_send(message, error, 0);\n          });\n    }\n\n    start_receive();\n  }\n\n  void handle_send(std::shared_ptr<std::string> /*message*/,\n                   const boost::system::error_code& /*error*/,\n                   std::size_t /*bytes_transferred*/) {}\n\n  std::string make_daytime_string() {\n    using namespace std;\n    time_t now = time(0);\n    return ctime(&now);\n  }\n\n  boost::asio::ip::udp::socket socket_;\n  boost::asio::ip::udp::endpoint remote_endpoint_;\n  std::array<char, 1> recv_buffer_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <array>\n#include <string>\n#include <ctime>\n#include <memory>\n\nusing boost::asio::ip::udp;\n\nclass udp_server {\npublic:\n  explicit udp_server(boost::asio::io_context& io_context)\n    : socket_(io_context, udp::endpoint(udp::v4(), 13)) {\n    start_receive();\n  }\n\nprivate:\n  void start_receive() {\n    remote_endpoint_ = udp::endpoint();\n    socket_.async_receive_from(\n        boost::asio::buffer(recv_buffer_), remote_endpoint_,\n        [this](const boost::system::error_code& error, std::size_t bytes_transferred) {\n          handle_receive(error, bytes_transferred);\n        });\n  }\n\n  void handle_receive(const boost::system::error_code& error, std::size_t /*bytes_transferred*/) {\n    if (!error || error == boost::asio::error::message_size) {\n      auto message = std::make_shared<std::string>(make_daytime_string());\n      socket_.async_send_to(\n          boost::asio::buffer(*message), remote_endpoint_,\n          [this, message](const boost::system::error_code& error, std::size_t /*bytes_transferred*/) {\n            handle_send(message, error, 0);\n          });\n    }\n\n    start_receive();\n  }\n\n  void handle_send(std::shared_ptr<std::string> /*message*/,\n                   const boost::system::error_code& /*error*/,\n                   std::size_t /*bytes_transferred*/) {}\n\n  std::string make_daytime_string() {\n    using namespace std;\n    time_t now = time(0);\n    return ctime(&now);\n  }\n\n  udp::socket socket_;\n  udp::endpoint remote_endpoint_;\n  std::array<char, 1> recv_buffer_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <array>\n#include <memory>\n#include <ctime>\n\nclass udp_server {\npublic:\n  explicit udp_server(boost::asio::io_context& io_context)\n    : socket_(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), 13)) {\n    start_receive();\n  }\n\n  void start_receive() {\n    socket_.async_receive_from(\n        boost::asio::buffer(recv_buffer_), remote_endpoint_,\n        [this](const boost::system::error_code& error, std::size_t bytes_transferred) {\n          handle_receive(error, bytes_transferred);\n        });\n  }\n\n  void handle_receive(const boost::system::error_code& error, std::size_t /*bytes_transferred*/) {\n    if (!error || error == boost::asio::error::message_size) {\n      std::shared_ptr<std::string> message = std::make_shared<std::string>(make_daytime_string());\n      socket_.async_send_to(\n          boost::asio::buffer(*message), remote_endpoint_,\n          [this, message](const boost::system::error_code& error, std::size_t /*bytes_transferred*/) {\n            handle_send(message, error, 0);\n          });\n    }\n\n    start_receive();\n  }\n\n  void handle_send(std::shared_ptr<std::string> /*message*/, const boost::system::error_code& /*error*/,\n                   std::size_t /*bytes_transferred*/) {}\n\n  std::string make_daytime_string() {\n    using namespace std;\n    time_t now = time(0);\n    return ctime(&now);\n  }\n\nprivate:\n  boost::asio::ip::udp::socket socket_;\n  boost::asio::ip::udp::endpoint remote_endpoint_;\n  std::array<char, 1> recv_buffer_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <array>\n#include <string>\n#include <ctime>\n#include <memory>\n\nusing boost::asio::ip::udp;\n\nclass udp_server {\npublic:\n    explicit udp_server(boost::asio::io_context& io_context)\n        : socket_(io_context, udp::endpoint(udp::v4(), 13)) {\n        start_receive();\n    }\n\nprivate:\n    void start_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(recv_buffer_), remote_endpoint_,\n            [this](const boost::system::error_code& error, std::size_t bytes_transferred) {\n                handle_receive(error, bytes_transferred);\n            });\n    }\n\n    void handle_receive(const boost::system::error_code& error, std::size_t /*bytes_transferred*/) {\n        if (!error || error == boost::asio::error::message_size) {\n            std::shared_ptr<std::string> message = std::make_shared<std::string>(make_daytime_string());\n            socket_.async_send_to(\n                boost::asio::buffer(*message), remote_endpoint_,\n                [this, message](const boost::system::error_code& error, std::size_t /*bytes_transferred*/) {\n                    handle_send(message, error, 0);\n                });\n        }\n        start_receive();\n    }\n\n    void handle_send(std::shared_ptr<std::string> /*message*/, const boost::system::error_code& /*error*/, std::size_t /*bytes_transferred*/) {\n    }\n\n    std::string make_daytime_string() {\n        using namespace std;\n        time_t now = time(0);\n        return ctime(&now);\n    }\n\n    udp::socket socket_;\n    udp::endpoint remote_endpoint_;\n    std::array<char, 1> recv_buffer_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <array>\n#include <memory>\n#include <ctime>\n#include <string>\n\nusing boost::asio::ip::udp;\n\nclass udp_server {\npublic:\n    explicit udp_server(boost::asio::io_context& io_context)\n        : socket_(io_context, udp::endpoint(udp::v4(), 13)) {\n        start_receive();\n    }\n\nprivate:\n    void start_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(recv_buffer_), remote_endpoint_,\n            [this](const boost::system::error_code& error, std::size_t bytes_transferred) {\n                handle_receive(error, bytes_transferred);\n            });\n    }\n\n    void handle_receive(const boost::system::error_code& error, std::size_t /*bytes_transferred*/) {\n        if (!error || error == boost::asio::error::message_size) {\n            std::shared_ptr<std::string> message = std::make_shared<std::string>(make_daytime_string());\n            socket_.async_send_to(\n                boost::asio::buffer(*message), remote_endpoint_,\n                [this, message](const boost::system::error_code& error, std::size_t /*bytes_transferred*/) {\n                    handle_send(message, error, 0);\n                });\n        }\n\n        start_receive();\n    }\n\n    void handle_send(std::shared_ptr<std::string> /*message*/, const boost::system::error_code& /*error*/, std::size_t /*bytes_transferred*/) {\n        // No action required after send\n    }\n\n    std::string make_daytime_string() {\n        using namespace std::chrono;\n        auto now = system_clock::to_time_t(system_clock::now());\n        return ctime(&now);\n    }\n\n    udp::socket socket_;\n    udp::endpoint remote_endpoint_;\n    std::array<char, 1> recv_buffer_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <array>\n#include <memory>\n#include <ctime>\n\nclass udp_server {\npublic:\n  explicit udp_server(boost::asio::io_context& io_context)\n    : socket_(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), 13)) {\n    start_receive();\n  }\n\nprivate:\n  void start_receive() {\n    socket_.async_receive_from(\n        boost::asio::buffer(recv_buffer_), remote_endpoint_,\n        [this](const boost::system::error_code& error, std::size_t bytes_transferred) {\n          handle_receive(error, bytes_transferred);\n        });\n  }\n\n  void handle_receive(const boost::system::error_code& error, std::size_t /*bytes_transferred*/) {\n    if (!error || error == boost::asio::error::message_size) {\n      auto message = std::make_shared<std::string>(make_daytime_string());\n      socket_.async_send_to(\n          boost::asio::buffer(*message), remote_endpoint_,\n          [this, message](const boost::system::error_code& error, std::size_t /*bytes_transferred*/) {\n            handle_send(message, error, 0);\n          });\n    }\n    start_receive();\n  }\n\n  void handle_send(std::shared_ptr<std::string> /*message*/,\n                   const boost::system::error_code& /*error*/,\n                   std::size_t /*bytes_transferred*/) {}\n\n  std::string make_daytime_string() {\n    using namespace std;\n    time_t now = time(0);\n    return ctime(&now);\n  }\n\n  boost::asio::ip::udp::socket socket_;\n  boost::asio::ip::udp::endpoint remote_endpoint_;\n  std::array<char, 1> recv_buffer_;\n};\n```"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 3,
    "Instruction": "Task Description: Create a C++ class that implements HTTP client functionality using libcurl for making HTTP requests to a specified base URL.\n\nClass Description: The HTTPClient class provides a simple interface for making HTTP GET requests to a given base URL. It handles libcurl initialization, request configuration, execution, and cleanup, while providing a method to append endpoints to the base URL and make requests.\n\nAttributes:\nbaseURL: std::string - The base URL to which endpoints will be appended for HTTP requests\n\nMethods:\nmakeRequest: makeRequest(const std::string& endpoint) -> std::string - Makes an HTTP GET request to the base URL plus the specified endpoint, returning the response as a string\nwrite_to_string: write_to_string(void* ptr, size_t size, size_t count, void* stream) -> size_t - Static callback function for libcurl to write response data into a string",
    "Canonical_solution": "#include <curl/curl.h>\n#include <string>\n#include <sstream>\n#include \"json.hpp\"\n\nusing json = nlohmann::json;\n\nclass HTTPClient {\npublic:\n    HTTPClient(const std::string& baseUrl) : baseURL(baseUrl) {}\n\n    std::string makeRequest(const std::string& endpoint) {\n        CURL* curl = curl_easy_init();\n        std::string response;\n\n        if (curl) {\n            std::string URL = baseURL + endpoint;\n            curl_easy_setopt(curl, CURLOPT_URL, URL.c_str());\n            curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, write_to_string);\n            curl_easy_setopt(curl, CURLOPT_WRITEDATA, &response);\n            curl_easy_perform(curl);\n            curl_easy_cleanup(curl);\n        }\n\n        return response;\n    }\n\nprivate:\n    static size_t write_to_string(void* ptr, size_t size, size_t count, void* stream) {\n        ((std::string*)stream)->append((char*)ptr, 0, size*count);\n        return size*count;\n    }\n\n    std::string baseURL;\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 146,
    "matched_results": [
      "#include <iostream>\n#include <string>\n#include <curl/curl.h>\n\nclass HTTPClient {\nprivate:\n    std::string baseURL;\n\n    static size_t write_to_string(void* ptr, size_t size, size_t count, void* stream) {\n        ((std::string*)stream)->append((char*)ptr, size * count);\n        return size * count;\n    }\n\npublic:\n    HTTPClient(const std::string& base_url) : baseURL(base_url) {}\n\n    std::string makeRequest(const std::string& endpoint) {\n        CURL* curl = curl_easy_init();\n        std::string response;\n\n        if (curl) {\n            std::string fullURL = baseURL + endpoint;\n            curl_easy_setopt(curl, CURLOPT_URL, fullURL.c_str());\n            curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, write_to_string);\n            curl_easy_setopt(curl, CURLOPT_WRITEDATA, &response);\n\n            CURLcode res = curl_easy_perform(curl);\n            if (res != CURLE_OK) {\n                std::cerr << \"curl_easy_perform() failed: \" << curl_easy_strerror(res) << std::endl;\n            }\n\n            curl_easy_cleanup(curl);\n        }\n\n        return response;\n    }\n};",
      "```cpp\n#include <iostream>\n#include <string>\n#include <curl/curl.h>\n\nclass HTTPClient {\nprivate:\n    std::string baseURL;\n\n    static size_t write_to_string(void* ptr, size_t size, size_t count, void* stream) {\n        ((std::string*)stream)->append((char*)ptr, size * count);\n        return size * count;\n    }\n\npublic:\n    HTTPClient(const std::string& url) : baseURL(url) {}\n\n    std::string makeRequest(const std::string& endpoint) {\n        CURL* curl = curl_easy_init();\n        std::string response;\n\n        if (curl) {\n            std::string fullURL = baseURL + endpoint;\n            curl_easy_setopt(curl, CURLOPT_URL, fullURL.c_str());\n            curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, write_to_string);\n            curl_easy_setopt(curl, CURLOPT_WRITEDATA, &response);\n\n            CURLcode res = curl_easy_perform(curl);\n            if (res != CURLE_OK) {\n                std::cerr << \"CURL error: \" << curl_easy_strerror(res) << std::endl;\n            }\n\n            curl_easy_cleanup(curl);\n        }\n\n        return response;\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <curl/curl.h>\n\nclass HTTPClient {\nprivate:\n    std::string baseURL;\n\n    static size_t write_to_string(void* ptr, size_t size, size_t count, void* stream) {\n        ((std::string*)stream)->append((char*)ptr, size * count);\n        return size * count;\n    }\n\npublic:\n    HTTPClient(const std::string& url) : baseURL(url) {}\n\n    std::string makeRequest(const std::string& endpoint) {\n        CURL* curl = curl_easy_init();\n        std::string response;\n\n        if (curl) {\n            std::string fullURL = baseURL + endpoint;\n            curl_easy_setopt(curl, CURLOPT_URL, fullURL.c_str());\n            curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, write_to_string);\n            curl_easy_setopt(curl, CURLOPT_WRITEDATA, &response);\n\n            CURLcode res = curl_easy_perform(curl);\n            if (res != CURLE_OK) {\n                std::cerr << \"curl_easy_perform() failed: \" << curl_easy_strerror(res) << std::endl;\n            }\n\n            curl_easy_cleanup(curl);\n        }\n\n        return response;\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <curl/curl.h>\n\nclass HTTPClient {\nprivate:\n    std::string baseURL;\n\n    static size_t write_to_string(void* ptr, size_t size, size_t count, void* stream) {\n        ((std::string*)stream)->append((char*)ptr, size * count);\n        return size * count;\n    }\n\npublic:\n    HTTPClient(const std::string& url) : baseURL(url) {}\n\n    std::string makeRequest(const std::string& endpoint) {\n        CURL* curl = curl_easy_init();\n        std::string response;\n\n        if (curl) {\n            std::string fullURL = baseURL + endpoint;\n            curl_easy_setopt(curl, CURLOPT_URL, fullURL.c_str());\n            curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, write_to_string);\n            curl_easy_setopt(curl, CURLOPT_WRITEDATA, &response);\n\n            CURLcode res = curl_easy_perform(curl);\n            if (res != CURLE_OK) {\n                std::cerr << \"curl_easy_perform() failed: \" << curl_easy_strerror(res) << std::endl;\n            }\n\n            curl_easy_cleanup(curl);\n        }\n\n        return response;\n    }\n};\n```",
      "#include <iostream>\n#include <string>\n#include <curl/curl.h>\n\nclass HTTPClient {\nprivate:\n    std::string baseURL;\n\n    static size_t write_to_string(void* ptr, size_t size, size_t count, void* stream) {\n        ((std::string*)stream)->append((char*)ptr, size * count);\n        return size * count;\n    }\n\npublic:\n    HTTPClient(const std::string& url) : baseURL(url) {}\n\n    std::string makeRequest(const std::string& endpoint) {\n        CURL* curl = curl_easy_init();\n        std::string response;\n\n        if (curl) {\n            std::string fullURL = baseURL + endpoint;\n            curl_easy_setopt(curl, CURLOPT_URL, fullURL.c_str());\n            curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, write_to_string);\n            curl_easy_setopt(curl, CURLOPT_WRITEDATA, &response);\n\n            CURLcode res = curl_easy_perform(curl);\n            if (res != CURLE_OK) {\n                std::cerr << \"curl_easy_perform() failed: \" << curl_easy_strerror(res) << std::endl;\n            }\n\n            curl_easy_cleanup(curl);\n        }\n\n        return response;\n    }\n};",
      "```cpp\n#include <iostream>\n#include <string>\n#include <curl/curl.h>\n\nclass HTTPClient {\nprivate:\n    std::string baseURL;\n\n    static size_t write_to_string(void* ptr, size_t size, size_t count, void* stream) {\n        ((std::string*)stream)->append((char*)ptr, size * count);\n        return size * count;\n    }\n\npublic:\n    HTTPClient(const std::string& url) : baseURL(url) {}\n\n    std::string makeRequest(const std::string& endpoint) {\n        CURL* curl = curl_easy_init();\n        std::string response;\n\n        if (curl) {\n            std::string fullURL = baseURL + endpoint;\n            curl_easy_setopt(curl, CURLOPT_URL, fullURL.c_str());\n            curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, write_to_string);\n            curl_easy_setopt(curl, CURLOPT_WRITEDATA, &response);\n\n            CURLcode res = curl_easy_perform(curl);\n            if (res != CURLE_OK) {\n                std::cerr << \"curl_easy_perform() failed: \" << curl_easy_strerror(res) << std::endl;\n            }\n\n            curl_easy_cleanup(curl);\n        }\n\n        return response;\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <curl/curl.h>\n\nclass HTTPClient {\nprivate:\n    std::string baseURL;\n\n    static size_t write_to_string(void* ptr, size_t size, size_t count, void* stream) {\n        ((std::string*)stream)->append((char*)ptr, size * count);\n        return size * count;\n    }\n\npublic:\n    HTTPClient(const std::string& url) : baseURL(url) {}\n\n    std::string makeRequest(const std::string& endpoint) {\n        CURL* curl = curl_easy_init();\n        std::string response;\n\n        if (curl) {\n            std::string fullURL = baseURL + endpoint;\n            curl_easy_setopt(curl, CURLOPT_URL, fullURL.c_str());\n            curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, write_to_string);\n            curl_easy_setopt(curl, CURLOPT_WRITEDATA, &response);\n\n            CURLcode res = curl_easy_perform(curl);\n            if (res != CURLE_OK) {\n                std::cerr << \"curl_easy_perform() failed: \" << curl_easy_strerror(res) << std::endl;\n            }\n\n            curl_easy_cleanup(curl);\n        }\n\n        return response;\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <curl/curl.h>\n\nclass HTTPClient {\nprivate:\n    std::string baseURL;\n\n    static size_t write_to_string(void* ptr, size_t size, size_t count, void* stream) {\n        ((std::string*)stream)->append((char*)ptr, size * count);\n        return size * count;\n    }\n\npublic:\n    HTTPClient(const std::string& base_url) : baseURL(base_url) {}\n\n    std::string makeRequest(const std::string& endpoint) {\n        CURL* curl = curl_easy_init();\n        std::string response;\n\n        if (curl) {\n            std::string fullUrl = baseURL + endpoint;\n            curl_easy_setopt(curl, CURLOPT_URL, fullUrl.c_str());\n            curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, write_to_string);\n            curl_easy_setopt(curl, CURLOPT_WRITEDATA, &response);\n\n            CURLcode res = curl_easy_perform(curl);\n            if (res != CURLE_OK) {\n                std::cerr << \"curl_easy_perform() failed: \" << curl_easy_strerror(res) << std::endl;\n            }\n\n            curl_easy_cleanup(curl);\n        }\n\n        return response;\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <curl/curl.h>\n\nclass HTTPClient {\nprivate:\n    std::string baseURL;\n\n    static size_t write_to_string(void* ptr, size_t size, size_t count, void* stream) {\n        ((std::string*)stream)->append((char*)ptr, size * count);\n        return size * count;\n    }\n\npublic:\n    HTTPClient(const std::string& url) : baseURL(url) {}\n\n    std::string makeRequest(const std::string& endpoint) {\n        CURL* curl = curl_easy_init();\n        std::string response;\n\n        if (curl) {\n            std::string fullURL = baseURL + endpoint;\n            curl_easy_setopt(curl, CURLOPT_URL, fullURL.c_str());\n            curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, write_to_string);\n            curl_easy_setopt(curl, CURLOPT_WRITEDATA, &response);\n\n            CURLcode res = curl_easy_perform(curl);\n            if (res != CURLE_OK) {\n                std::cerr << \"curl_easy_perform() failed: \" << curl_easy_strerror(res) << std::endl;\n            }\n\n            curl_easy_cleanup(curl);\n        }\n\n        return response;\n    }\n};\n```"
    ],
    "unmatched_results": [
      "#include <iostream>\n#include <string>\n#include <curl/curl.h>\n\nclass HTTPClient {\npublic:\n    HTTPClient(const std::string& base_url) : baseURL(base_url) {\n        curl_global_init(CURL_GLOBAL_DEFAULT);\n        curl = curl_easy_init();\n    }\n\n    ~HTTPClient() {\n        if (curl) {\n            curl_easy_cleanup(curl);\n        }\n        curl_global_cleanup();\n    }\n\n    std::string makeRequest(const std::string& endpoint) {\n        std::string full_url = baseURL + endpoint;\n        std::string response;\n\n        if (!curl) {\n            return \"CURL initialization failed.\";\n        }\n\n        curl_easy_setopt(curl, CURLOPT_URL, full_url.c_str());\n        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, write_to_string);\n        curl_easy_setopt(curl, CURLOPT_WRITEDATA, &response);\n\n        CURLcode res = curl_easy_perform(curl);\n        if (res != CURLE_OK) {\n            return \"CURL request failed: \" + std::string(curl_easy_strerror(res));\n        }\n\n        return response;\n    }\n\nprivate:\n    static size_t write_to_string(void* ptr, size_t size, size_t count, void* stream) {\n        std::string* response = static_cast<std::string*>(stream);\n        size_t realsize = size * count;\n        response->append(static_cast<char*>(ptr), realsize);\n        return realsize;\n    }\n\n    std::string baseURL;\n    CURL* curl;\n};"
    ],
    "match_count": 9,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 30,
    "Instruction": "Task Description: Implement a UDP server class using Boost.Asio that can asynchronously receive and send datagrams.\n\nClass Description: The `server` class represents a UDP server that listens on a specified port, receives incoming datagrams asynchronously, and sends responses back to the sender. It utilizes Boost.Asio for asynchronous I/O operations.\n\nAttributes:\n- socket_: [boost::asio::ip::udp::socket] - The UDP socket used for communication\n- sender_endpoint_: [boost::asio::ip::udp::endpoint] - Stores the endpoint of the last sender\n- max_length: [enum] - Maximum size of the receive buffer (1024 bytes)\n- data_: [char[max_length]] - Buffer for storing received data\n\nMethods:\n- server: [constructor](boost::asio::io_context& io_context, short port) -> void - Initializes the UDP socket and starts the receive operation\n- do_receive: [method]() -> void - Asynchronously receives data from clients and triggers do_send if data is received\n- do_send: [method](std::size_t length) -> void - Asynchronously sends the received data back to the sender",
    "Canonical_solution": "#include <boost/asio.hpp>\n#include <boost/system/error_code.hpp>\n\nusing boost::asio::ip::udp;\n\nclass server\n{\npublic:\n  server(boost::asio::io_context& io_context, short port)\n    : socket_(io_context, udp::endpoint(udp::v4(), port))\n  {\n    do_receive();\n  }\n\n  void do_receive()\n  {\n    socket_.async_receive_from(\n        boost::asio::buffer(data_, max_length), sender_endpoint_,\n        [this](boost::system::error_code ec, std::size_t bytes_recvd)\n        {\n          if (!ec && bytes_recvd > 0)\n          {\n            do_send(bytes_recvd);\n          }\n          else\n          {\n            do_receive();\n          }\n        });\n  }\n\n  void do_send(std::size_t length)\n  {\n    socket_.async_send_to(\n        boost::asio::buffer(data_, length), sender_endpoint_,\n        [this](boost::system::error_code /*ec*/, std::size_t /*bytes_sent*/)\n        {\n          do_receive();\n        });\n  }\n\nprivate:\n  udp::socket socket_;\n  udp::endpoint sender_endpoint_;\n  enum { max_length = 1024 };\n  char data_[max_length];\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 153,
    "matched_results": [
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n\nusing boost::asio::ip::udp;\n\nclass server {\npublic:\n    server(boost::asio::io_context& io_context, short port)\n        : socket_(io_context, udp::endpoint(udp::v4(), port))\n    {\n        do_receive();\n    }\n\nprivate:\n    void do_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(data_, max_length), sender_endpoint_,\n            [this](boost::system::error_code ec, std::size_t length) {\n                if (!ec && length > 0) {\n                    do_send(length);\n                }\n                do_receive();\n            });\n    }\n\n    void do_send(std::size_t length) {\n        socket_.async_send_to(\n            boost::asio::buffer(data_, length), sender_endpoint_,\n            [](boost::system::error_code /*ec*/, std::size_t /*length*/) {});\n    }\n\n    enum { max_length = 1024 };\n    udp::socket socket_;\n    udp::endpoint sender_endpoint_;\n    char data_[max_length];\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n\nusing boost::asio::ip::udp;\n\nclass server {\npublic:\n    server(boost::asio::io_context& io_context, short port)\n        : socket_(io_context, udp::endpoint(udp::v4(), port)) {\n        do_receive();\n    }\n\nprivate:\n    void do_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(data_, max_length), sender_endpoint_,\n            [this](boost::system::error_code ec, std::size_t length) {\n                if (!ec && length > 0) {\n                    do_send(length);\n                }\n                do_receive();\n            });\n    }\n\n    void do_send(std::size_t length) {\n        socket_.async_send_to(\n            boost::asio::buffer(data_, length), sender_endpoint_,\n            [](boost::system::error_code /*ec*/, std::size_t /*length*/) {});\n    }\n\n    enum { max_length = 1024 };\n    udp::socket socket_;\n    udp::endpoint sender_endpoint_;\n    char data_[max_length];\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n\nusing boost::asio::ip::udp;\n\nclass server {\npublic:\n    server(boost::asio::io_context& io_context, short port)\n        : socket_(io_context, udp::endpoint(udp::v4(), port)) {\n        do_receive();\n    }\n\n    void do_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(data_, max_length), sender_endpoint_,\n            [this](boost::system::error_code ec, std::size_t length) {\n                if (!ec && length > 0) {\n                    do_send(length);\n                    do_receive();\n                }\n            });\n    }\n\n    void do_send(std::size_t length) {\n        socket_.async_send_to(\n            boost::asio::buffer(data_, length), sender_endpoint_,\n            [](boost::system::error_code /*ec*/, std::size_t /*length*/) {});\n    }\n\nprivate:\n    static constexpr std::size_t max_length = 1024;\n    udp::socket socket_;\n    udp::endpoint sender_endpoint_;\n    char data_[max_length];\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n\nusing boost::asio::ip::udp;\n\nclass server {\npublic:\n    server(boost::asio::io_context& io_context, short port)\n        : socket_(io_context, udp::endpoint(udp::v4(), port))\n    {\n        do_receive();\n    }\n\n    void do_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(data_, max_length), sender_endpoint_,\n            [this](boost::system::error_code ec, std::size_t length) {\n                if (!ec && length > 0) {\n                    do_send(length);\n                }\n                do_receive();\n            });\n    }\n\n    void do_send(std::size_t length) {\n        socket_.async_send_to(\n            boost::asio::buffer(data_, length), sender_endpoint_,\n            [](boost::system::error_code /*ec*/, std::size_t /*length*/) {});\n    }\n\nprivate:\n    enum { max_length = 1024 };\n    udp::socket socket_;\n    udp::endpoint sender_endpoint_;\n    char data_[max_length];\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n\nusing boost::asio::ip::udp;\n\nclass server {\npublic:\n    server(boost::asio::io_context& io_context, short port)\n        : socket_(io_context, udp::endpoint(udp::v4(), port))\n    {\n        do_receive();\n    }\n\n    void do_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(data_, max_length), sender_endpoint_,\n            [this](boost::system::error_code ec, std::size_t length) {\n                if (!ec && length > 0) {\n                    do_send(length);\n                    do_receive();\n                }\n            });\n    }\n\n    void do_send(std::size_t length) {\n        socket_.async_send_to(\n            boost::asio::buffer(data_, length), sender_endpoint_,\n            [](boost::system::error_code /*ec*/, std::size_t /*length*/) {});\n    }\n\nprivate:\n    enum { max_length = 1024 };\n    udp::socket socket_;\n    udp::endpoint sender_endpoint_;\n    char data_[max_length];\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n\nusing boost::asio::ip::udp;\n\nclass server {\npublic:\n    server(boost::asio::io_context& io_context, short port)\n        : socket_(io_context, udp::endpoint(udp::v4(), port))\n    {\n        do_receive();\n    }\n\n    void do_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(data_, max_length), sender_endpoint_,\n            [this](boost::system::error_code ec, std::size_t length) {\n                if (!ec && length > 0) {\n                    do_send(length);\n                    do_receive();\n                }\n            });\n    }\n\n    void do_send(std::size_t length) {\n        socket_.async_send_to(\n            boost::asio::buffer(data_, length), sender_endpoint_,\n            [](boost::system::error_code /*ec*/, std::size_t /*length*/) {});\n    }\n\nprivate:\n    enum { max_length = 1024 };\n    udp::socket socket_;\n    udp::endpoint sender_endpoint_;\n    char data_[max_length];\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n\nusing boost::asio::ip::udp;\n\nclass server {\npublic:\n    server(boost::asio::io_context& io_context, short port)\n        : socket_(io_context, udp::endpoint(udp::v4(), port))\n    {\n        do_receive();\n    }\n\nprivate:\n    void do_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(data_, max_length), sender_endpoint_,\n            [this](boost::system::error_code ec, std::size_t length) {\n                if (!ec && length > 0) {\n                    do_send(length);\n                }\n                do_receive();\n            });\n    }\n\n    void do_send(std::size_t length) {\n        socket_.async_send_to(\n            boost::asio::buffer(data_, length), sender_endpoint_,\n            [](boost::system::error_code /*ec*/, std::size_t /*length*/) {});\n    }\n\n    udp::socket socket_;\n    udp::endpoint sender_endpoint_;\n    enum { max_length = 1024 };\n    char data_[max_length];\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n\nusing boost::asio::ip::udp;\n\nclass server {\npublic:\n    server(boost::asio::io_context& io_context, short port)\n        : socket_(io_context, udp::endpoint(udp::v4(), port))\n    {\n        do_receive();\n    }\n\n    void do_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(data_, max_length), sender_endpoint_,\n            [this](boost::system::error_code ec, std::size_t length) {\n                if (!ec && length > 0) {\n                    do_send(length);\n                }\n                do_receive();\n            });\n    }\n\n    void do_send(std::size_t length) {\n        socket_.async_send_to(\n            boost::asio::buffer(data_, length), sender_endpoint_,\n            [](boost::system::error_code /*ec*/, std::size_t /*length*/) {});\n    }\n\nprivate:\n    enum { max_length = 1024 };\n    udp::socket socket_;\n    udp::endpoint sender_endpoint_;\n    char data_[max_length];\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n\nusing boost::asio::ip::udp;\n\nclass server {\npublic:\n    server(boost::asio::io_context& io_context, short port)\n        : socket_(io_context, udp::endpoint(udp::v4(), port)) {\n        do_receive();\n    }\n\n    void do_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(data_, max_length), sender_endpoint_,\n            [this](boost::system::error_code ec, std::size_t length) {\n                if (!ec && length > 0) {\n                    do_send(length);\n                    do_receive();\n                }\n            });\n    }\n\n    void do_send(std::size_t length) {\n        socket_.async_send_to(\n            boost::asio::buffer(data_, length), sender_endpoint_,\n            [](boost::system::error_code /*ec*/, std::size_t /*length*/) {});\n    }\n\nprivate:\n    enum { max_length = 1024 };\n    udp::socket socket_;\n    udp::endpoint sender_endpoint_;\n    char data_[max_length];\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n\nusing boost::asio::ip::udp;\n\nclass server {\npublic:\n    server(boost::asio::io_context& io_context, short port)\n        : socket_(io_context, udp::endpoint(udp::v4(), port))\n    {\n        do_receive();\n    }\n\n    void do_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(data_, max_length), sender_endpoint_,\n            [this](boost::system::error_code ec, std::size_t length) {\n                if (!ec && length > 0) {\n                    do_send(length);\n                    do_receive();\n                }\n            });\n    }\n\n    void do_send(std::size_t length) {\n        socket_.async_send_to(\n            boost::asio::buffer(data_, length), sender_endpoint_,\n            [](boost::system::error_code /*ec*/, std::size_t /*length*/) {});\n    }\n\nprivate:\n    enum { max_length = 1024 };\n    udp::socket socket_;\n    udp::endpoint sender_endpoint_;\n    char data_[max_length];\n};\n```"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 31,
    "Instruction": "Task Description: Implement a UDP server using Boost.Asio that listens for incoming datagrams and responds with the current daytime string.\n\nFunction Description: The function `udp_server` creates a UDP server that listens on port 13 (daytime protocol port). When it receives any datagram from a client, it responds with the current time in string format. The server runs indefinitely until an exception occurs.\n\nInput: None\n\nOutput: None (The function runs indefinitely and sends responses to clients, but doesn't return any value)",
    "Canonical_solution": "#include <array>\n#include <string>\n#include <boost/asio.hpp>\n\nusing boost::asio::ip::udp;\n\nstd::string make_daytime_string()\n{\n  using namespace std;\n  time_t now = time(0);\n  return ctime(&now);\n}\n\nvoid udp_server()\n{\n  try\n  {\n    boost::asio::io_context io_context;\n\n    udp::socket socket(io_context, udp::endpoint(udp::v4(), 13));\n\n    for (;;)\n    {\n      std::array<char, 1> recv_buf;\n      udp::endpoint remote_endpoint;\n      socket.receive_from(boost::asio::buffer(recv_buf), remote_endpoint);\n\n      std::string message = make_daytime_string();\n\n      boost::system::error_code ignored_error;\n      socket.send_to(boost::asio::buffer(message),\n          remote_endpoint, 0, ignored_error);\n    }\n  }\n  catch (std::exception& e)\n  {\n    std::cerr << e.what() << std::endl;\n  }\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 153,
    "matched_results": [
      "```cpp\n#include <boost/asio.hpp>\n#include <ctime>\n#include <string>\n\nvoid udp_server() {\n  try {\n    boost::asio::io_context io_context;\n\n    boost::asio::ip::udp::socket socket(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), 13));\n\n    for (;;) {\n      boost::asio::ip::udp::endpoint remote_endpoint;\n      char data[1024];\n      socket.receive_from(boost::asio::buffer(data), remote_endpoint);\n\n      std::time_t now = std::time(0);\n      char* time_str = std::ctime(&now);\n      socket.send_to(boost::asio::buffer(time_str, std::strlen(time_str)), remote_endpoint);\n    }\n  } catch (std::exception& e) {\n    // Exception handling is left to the caller or environment\n  }\n}\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <chrono>\n#include <ctime>\n#include <string>\n\nvoid udp_server() {\n  boost::asio::io_context io_context;\n  boost::asio::ip::udp::socket socket(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), 13));\n  char buffer[1024];\n\n  while (true) {\n    boost::asio::ip::udp::endpoint remote_endpoint;\n    socket.receive_from(boost::asio::buffer(buffer), remote_endpoint);\n\n    std::time_t now = std::time(nullptr);\n    char time_str[100];\n    std::strftime(time_str, sizeof(time_str), \"%Y-%m-%d %H:%M:%S\", std::localtime(&now));\n\n    socket.send_to(boost::asio::buffer(time_str), remote_endpoint);\n  }\n}\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <ctime>\n#include <string>\n\nvoid udp_server() {\n    boost::asio::io_context io_context;\n    boost::asio::ip::udp::socket socket(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), 13));\n    boost::asio::ip::udp::endpoint remote_endpoint;\n\n    char data[1024];\n\n    while (true) {\n        socket.receive_from(boost::asio::buffer(data), remote_endpoint);\n\n        std::time_t now = std::time(0);\n        std::tm* timeinfo = std::localtime(&now);\n        char time_str[100];\n        std::strftime(time_str, sizeof(time_str), \"%c\", timeinfo);\n\n        socket.send_to(boost::asio::buffer(time_str), remote_endpoint);\n    }\n}\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <ctime>\n#include <string>\n\nvoid udp_server() {\n    boost::asio::io_context io_context;\n    boost::asio::ip::udp::socket socket(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), 13));\n    boost::asio::ip::udp::endpoint remote_endpoint;\n\n    char buffer[1024];\n\n    while (true) {\n        socket.receive_from(boost::asio::buffer(buffer), remote_endpoint);\n\n        std::time_t now = std::time(0);\n        char* time_str = std::ctime(&now);\n        size_t length = std::strlen(time_str);\n        socket.send_to(boost::asio::buffer(time_str, length), remote_endpoint);\n    }\n}\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <chrono>\n#include <ctime>\n#include <string>\n\nvoid udp_server() {\n  boost::asio::io_context io_context;\n  boost::asio::ip::udp::socket socket(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), 13));\n  char buffer[1024];\n\n  while (true) {\n    boost::asio::ip::udp::endpoint remote_endpoint;\n    socket.receive_from(boost::asio::buffer(buffer), remote_endpoint);\n\n    std::time_t now = std::time(nullptr);\n    char time_str[100];\n    std::strftime(time_str, sizeof(time_str), \"%Y-%m-%d %H:%M:%S\", std::localtime(&now));\n\n    socket.send_to(boost::asio::buffer(time_str), remote_endpoint);\n  }\n}\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <chrono>\n#include <ctime>\n#include <iostream>\n\nvoid udp_server() {\n    boost::asio::io_context io_context;\n    boost::asio::ip::udp::socket socket(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), 13));\n    boost::asio::ip::udp::endpoint sender_endpoint;\n\n    char recv_buf[1024];\n\n    while (true) {\n        socket.receive_from(boost::asio::buffer(recv_buf), sender_endpoint);\n\n        std::time_t now = std::time(nullptr);\n        std::tm tm = *std::localtime(&now);\n        char time_str[100];\n        std::strftime(time_str, sizeof(time_str), \"%c\", &tm);\n\n        socket.send_to(boost::asio::buffer(time_str), sender_endpoint);\n    }\n}\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <chrono>\n#include <ctime>\n#include <string>\n\nvoid udp_server() {\n  boost::asio::io_context io_context;\n\n  boost::asio::ip::udp::socket socket(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), 13));\n\n  for (;;) {\n    boost::asio::ip::udp::endpoint remote_endpoint;\n    char data[1024];\n    socket.receive_from(boost::asio::buffer(data), remote_endpoint);\n\n    std::time_t now = std::time(nullptr);\n    char time_str[100];\n    std::strftime(time_str, sizeof(time_str), \"%Y-%m-%d %H:%M:%S\", std::localtime(&now));\n\n    socket.send_to(boost::asio::buffer(time_str), remote_endpoint);\n  }\n}\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <chrono>\n#include <ctime>\n#include <string>\n\nvoid udp_server() {\n    boost::asio::io_context io_context;\n    boost::asio::ip::udp::socket socket(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), 13));\n    boost::asio::ip::udp::endpoint remote_endpoint;\n\n    char buffer[1024];\n\n    while (true) {\n        socket.receive_from(boost::asio::buffer(buffer), remote_endpoint);\n\n        std::time_t now = std::time(nullptr);\n        std::tm tm = *std::localtime(&now);\n        char time_str[100];\n        std::strftime(time_str, sizeof(time_str), \"%c\", &tm);\n\n        socket.send_to(boost::asio::buffer(time_str), remote_endpoint);\n    }\n}\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <ctime>\n#include <string>\n\nvoid udp_server() {\n    boost::asio::io_context io_context;\n    boost::asio::ip::udp::socket socket(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), 13));\n    boost::asio::ip::udp::endpoint remote_endpoint;\n\n    char buffer[1024];\n\n    while (true) {\n        socket.receive_from(boost::asio::buffer(buffer), remote_endpoint);\n\n        std::time_t now = std::time(0);\n        std::tm* timeinfo = std::localtime(&now);\n        char time_str[100];\n        std::strftime(time_str, sizeof(time_str), \"%c\", timeinfo);\n\n        socket.send_to(boost::asio::buffer(time_str), remote_endpoint);\n    }\n}\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <ctime>\n#include <string>\n\nvoid udp_server() {\n  try {\n    boost::asio::io_context io_context;\n\n    boost::asio::ip::udp::socket socket(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), 13));\n\n    for (;;) {\n      boost::asio::ip::udp::endpoint remote_endpoint;\n      char data[1]; // Just to receive the incoming datagram\n      socket.receive_from(boost::asio::buffer(data), remote_endpoint);\n\n      std::time_t now = std::time(0);\n      char time_str[256];\n      std::strftime(time_str, sizeof(time_str), \"%Y-%m-%d %H:%M:%S\", std::localtime(&now));\n\n      boost::system::error_code ignored_error;\n      socket.send_to(boost::asio::buffer(time_str), remote_endpoint, 0, ignored_error);\n    }\n  } catch (std::exception& e) {\n    // Exception handling is left implicit as per task description\n  }\n}\n```"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 32,
    "Instruction": "Task Description: Implement a UDP multicast sender class using Boost.Asio that periodically sends messages to a specified multicast address.\n\nClass Description: The `sender` class encapsulates functionality for sending UDP multicast messages at regular intervals. It uses Boost.Asio for asynchronous network operations and timer management.\n\nAttributes:\n- endpoint_: [boost::asio::ip::udp::endpoint] - The multicast endpoint (address + port) to send messages to\n- socket_: [boost::asio::ip::udp::socket] - The UDP socket used for sending messages\n- timer_: [boost::asio::steady_timer] - Timer used to schedule message sends\n- message_count_: [int] - Counter tracking the number of messages sent\n- message_: [std::string] - The current message content to be sent\n\nMethods:\n- sender([boost::asio::io_context&] io_context, [const boost::asio::ip::address&] multicast_address) -> [void] - Constructor that initializes the sender with IO context and multicast address\n- do_send() -> [void] - Asynchronously sends the current message to the multicast endpoint\n- do_timeout() -> [void] - Sets up a timer to schedule the next message send after a delay",
    "Canonical_solution": "#include <boost/asio.hpp>\n#include <string>\n#include <chrono>\n\nclass sender\n{\npublic:\n  sender(boost::asio::io_context& io_context,\n      const boost::asio::ip::address& multicast_address)\n    : endpoint_(multicast_address, multicast_port),\n      socket_(io_context, endpoint_.protocol()),\n      timer_(io_context),\n      message_count_(0)\n  {\n    do_send();\n  }\n\nprivate:\n  void do_send()\n  {\n    std::ostringstream os;\n    os << \"Message \" << message_count_++;\n    message_ = os.str();\n\n    socket_.async_send_to(\n        boost::asio::buffer(message_), endpoint_,\n        [this](boost::system::error_code ec, std::size_t /*length*/)\n        {\n          if (!ec && message_count_ < max_message_count)\n            do_timeout();\n        });\n  }\n\n  void do_timeout()\n  {\n    timer_.expires_after(std::chrono::seconds(1));\n    timer_.async_wait(\n        [this](boost::system::error_code ec)\n        {\n          if (!ec)\n            do_send();\n        });\n  }\n\nprivate:\n  boost::asio::ip::udp::endpoint endpoint_;\n  boost::asio::ip::udp::socket socket_;\n  boost::asio::steady_timer timer_;\n  int message_count_;\n  std::string message_;\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 153,
    "matched_results": [
      "```cpp\n#include <boost/asio.hpp>\n#include <string>\n\nusing boost::asio::ip::udp;\n\nclass sender {\npublic:\n  sender(boost::asio::io_context& io_context, const boost::asio::ip::address& multicast_address)\n    : endpoint_(multicast_address, 30001),\n      socket_(io_context, udp::endpoint(udp::v4(), 0)),\n      timer_(io_context),\n      message_count_(0),\n      message_(\"Hello, Multicast!\") {\n    do_send();\n    do_timeout();\n  }\n\nprivate:\n  void do_send() {\n    socket_.send_to(boost::asio::buffer(message_), endpoint_);\n    ++message_count_;\n  }\n\n  void do_timeout() {\n    timer_.expires_after(std::chrono::seconds(1));\n    timer_.async_wait([this](const boost::system::error_code&) {\n      do_send();\n      do_timeout();\n    });\n  }\n\n  udp::endpoint endpoint_;\n  udp::socket socket_;\n  boost::asio::steady_timer timer_;\n  int message_count_;\n  std::string message_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <string>\n\nclass sender {\npublic:\n  sender(boost::asio::io_context& io_context, const boost::asio::ip::address& multicast_address)\n    : endpoint_(multicast_address, 30001),\n      socket_(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), 0)),\n      timer_(io_context),\n      message_count_(0),\n      message_(\"Hello, Multicast!\") {\n    do_send();\n    do_timeout();\n  }\n\nprivate:\n  void do_send() {\n    socket_.send_to(boost::asio::buffer(message_), endpoint_);\n    ++message_count_;\n  }\n\n  void do_timeout() {\n    timer_.expires_after(std::chrono::seconds(1));\n    timer_.async_wait([this](const boost::system::error_code&) {\n      do_send();\n      do_timeout();\n    });\n  }\n\n  boost::asio::ip::udp::endpoint endpoint_;\n  boost::asio::ip::udp::socket socket_;\n  boost::asio::steady_timer timer_;\n  int message_count_;\n  std::string message_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <string>\n\nusing boost::asio::ip::udp;\n\nclass sender {\npublic:\n  sender(boost::asio::io_context& io_context, const boost::asio::ip::address& multicast_address)\n    : endpoint_(multicast_address, 30001),\n      socket_(io_context, udp::endpoint(udp::v4(), 0)),\n      timer_(io_context),\n      message_count_(0),\n      message_(\"Hello, Multicast!\") {\n    do_send();\n    do_timeout();\n  }\n\nprivate:\n  void do_send() {\n    socket_.send_to(boost::asio::buffer(message_), endpoint_);\n    ++message_count_;\n  }\n\n  void do_timeout() {\n    timer_.expires_after(std::chrono::seconds(1));\n    timer_.async_wait([this](const boost::system::error_code&) {\n      do_send();\n      do_timeout();\n    });\n  }\n\n  udp::endpoint endpoint_;\n  udp::socket socket_;\n  boost::asio::steady_timer timer_;\n  int message_count_;\n  std::string message_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <string>\n\nusing boost::asio::ip::udp;\n\nclass sender {\npublic:\n  sender(boost::asio::io_context& io_context, const boost::asio::ip::address& multicast_address)\n    : endpoint_(multicast_address, 30001),\n      socket_(io_context, udp::endpoint(udp::v4(), 0)),\n      timer_(io_context),\n      message_count_(0),\n      message_(\"Hello, Multicast!\") {\n    do_send();\n    do_timeout();\n  }\n\nprivate:\n  void do_send() {\n    socket_.send_to(boost::asio::buffer(message_), endpoint_);\n    ++message_count_;\n  }\n\n  void do_timeout() {\n    timer_.expires_after(std::chrono::seconds(1));\n    timer_.async_wait([this](const boost::system::error_code&) {\n      do_send();\n      do_timeout();\n    });\n  }\n\n  udp::endpoint endpoint_;\n  udp::socket socket_;\n  boost::asio::steady_timer timer_;\n  int message_count_;\n  std::string message_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <string>\n\nclass sender {\npublic:\n  sender(boost::asio::io_context& io_context, const boost::asio::ip::address& multicast_address)\n    : endpoint_(multicast_address, 30001),\n      socket_(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), 0)),\n      timer_(io_context),\n      message_count_(0),\n      message_(\"Hello, Multicast!\") {\n    do_send();\n    do_timeout();\n  }\n\nprivate:\n  void do_send() {\n    socket_.send_to(boost::asio::buffer(message_), endpoint_);\n    ++message_count_;\n  }\n\n  void do_timeout() {\n    timer_.expires_after(std::chrono::seconds(1));\n    timer_.async_wait([this](const boost::system::error_code&) {\n      do_send();\n      do_timeout();\n    });\n  }\n\n  boost::asio::ip::udp::endpoint endpoint_;\n  boost::asio::ip::udp::socket socket_;\n  boost::asio::steady_timer timer_;\n  int message_count_;\n  std::string message_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <string>\n\nusing boost::asio::ip::udp;\n\nclass sender\n{\npublic:\n  sender(boost::asio::io_context& io_context, const boost::asio::ip::address& multicast_address)\n    : endpoint_(multicast_address, 30001),\n      socket_(io_context, udp::endpoint(udp::v4(), 0)),\n      timer_(io_context),\n      message_count_(0),\n      message_(\"Hello, Multicast!\")\n  {\n    do_send();\n    do_timeout();\n  }\n\nprivate:\n  void do_send()\n  {\n    socket_.send_to(boost::asio::buffer(message_), endpoint_);\n    ++message_count_;\n  }\n\n  void do_timeout()\n  {\n    timer_.expires_after(std::chrono::seconds(1));\n    timer_.async_wait([this](const boost::system::error_code&)\n    {\n      do_send();\n      do_timeout();\n    });\n  }\n\n  udp::endpoint endpoint_;\n  udp::socket socket_;\n  boost::asio::steady_timer timer_;\n  int message_count_;\n  std::string message_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <string>\n\nusing boost::asio::ip::udp;\n\nclass sender\n{\npublic:\n  sender(boost::asio::io_context& io_context, const boost::asio::ip::address& multicast_address)\n    : endpoint_(multicast_address, 30001),\n      socket_(io_context, udp::v4()),\n      timer_(io_context),\n      message_count_(0),\n      message_(\"Hello, Multicast!\")\n  {\n    do_send();\n    do_timeout();\n  }\n\nprivate:\n  void do_send()\n  {\n    socket_.send_to(boost::asio::buffer(message_), endpoint_);\n    ++message_count_;\n  }\n\n  void do_timeout()\n  {\n    timer_.expires_after(std::chrono::seconds(1));\n    timer_.async_wait([this](const boost::system::error_code&)\n    {\n      do_send();\n      do_timeout();\n    });\n  }\n\n  udp::endpoint endpoint_;\n  udp::socket socket_;\n  boost::asio::steady_timer timer_;\n  int message_count_;\n  std::string message_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <string>\n\nusing boost::asio::ip::udp;\n\nclass sender {\npublic:\n    sender(boost::asio::io_context& io_context, const boost::asio::ip::address& multicast_address)\n        : endpoint_(multicast_address, 30001),\n          socket_(io_context, udp::endpoint(udp::v4(), 0)),\n          timer_(io_context),\n          message_count_(0),\n          message_(\"Hello, Multicast!\") {\n        do_send();\n        do_timeout();\n    }\n\nprivate:\n    void do_send() {\n        socket_.send_to(boost::asio::buffer(message_), endpoint_);\n        ++message_count_;\n    }\n\n    void do_timeout() {\n        timer_.expires_after(std::chrono::seconds(1));\n        timer_.async_wait([this](const boost::system::error_code&) {\n            do_send();\n            do_timeout();\n        });\n    }\n\n    udp::endpoint endpoint_;\n    udp::socket socket_;\n    boost::asio::steady_timer timer_;\n    int message_count_;\n    std::string message_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <string>\n\nclass sender {\npublic:\n  sender(boost::asio::io_context& io_context, const boost::asio::ip::address& multicast_address)\n    : endpoint_(multicast_address, 30001),\n      socket_(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), 0)),\n      timer_(io_context),\n      message_count_(0),\n      message_(\"Hello, Multicast!\")\n  {\n    do_send();\n    do_timeout();\n  }\n\nprivate:\n  void do_send() {\n    socket_.send_to(boost::asio::buffer(message_), endpoint_);\n    ++message_count_;\n  }\n\n  void do_timeout() {\n    timer_.expires_after(std::chrono::seconds(1));\n    timer_.async_wait([this](const boost::system::error_code&) {\n      do_send();\n      do_timeout();\n    });\n  }\n\n  boost::asio::ip::udp::endpoint endpoint_;\n  boost::asio::ip::udp::socket socket_;\n  boost::asio::steady_timer timer_;\n  int message_count_;\n  std::string message_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <string>\n\nusing boost::asio::ip::udp;\n\nclass sender {\npublic:\n  sender(boost::asio::io_context& io_context, const boost::asio::ip::address& multicast_address)\n    : endpoint_(multicast_address, 30001),\n      socket_(io_context, udp::endpoint(boost::asio::ip::address_v4::any(), 0)),\n      timer_(io_context),\n      message_count_(0),\n      message_(\"Hello, Multicast!\") {\n    do_send();\n    do_timeout();\n  }\n\nprivate:\n  void do_send() {\n    socket_.send_to(boost::asio::buffer(message_), endpoint_);\n    ++message_count_;\n  }\n\n  void do_timeout() {\n    timer_.expires_after(std::chrono::seconds(1));\n    timer_.async_wait([this](const boost::system::error_code&) {\n      do_send();\n      do_timeout();\n    });\n  }\n\n  udp::endpoint endpoint_;\n  udp::socket socket_;\n  boost::asio::steady_timer timer_;\n  int message_count_;\n  std::string message_;\n};\n```"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 33,
    "Instruction": "Task Description: Implement a UDP echo server using Boost.Asio that listens on a specified port, receives incoming datagrams, and sends them back to the sender.\n\nFunction Description: The function creates a UDP socket bound to a specified port, then enters an infinite loop where it receives datagrams from clients and echoes them back to the sender. This demonstrates basic UDP communication using Boost.Asio.\n\nInput:\n- io_context: boost::asio::io_context& - Reference to an I/O execution context that manages asynchronous operations\n- port: unsigned short - The port number on which the server should listen for incoming UDP datagrams\n\nOutput: None (The function runs indefinitely in a loop, processing incoming datagrams)",
    "Canonical_solution": "#include <boost/asio.hpp>\nusing boost::asio::ip::udp;\nenum { max_length = 1024 };\n\nvoid server(boost::asio::io_context& io_context, unsigned short port)\n{\n  udp::socket sock(io_context, udp::endpoint(udp::v4(), port));\n  for (;;)\n  {\n    char data[max_length];\n    udp::endpoint sender_endpoint;\n    size_t length = sock.receive_from(\n        boost::asio::buffer(data, max_length), sender_endpoint);\n    sock.send_to(boost::asio::buffer(data, length), sender_endpoint);\n  }\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 153,
    "matched_results": [
      "```cpp\n#include <boost/asio.hpp>\n\nvoid start_udp_echo_server(boost::asio::io_context& io_context, unsigned short port) {\n    boost::asio::ip::udp::socket socket(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), port));\n    char buffer[1024];\n\n    for (;;) {\n        boost::asio::ip::udp::endpoint sender_endpoint;\n        boost::system::error_code ec;\n\n        size_t length = socket.receive_from(boost::asio::buffer(buffer), sender_endpoint, 0, ec);\n\n        if (!ec) {\n            socket.send_to(boost::asio::buffer(buffer, length), sender_endpoint);\n        }\n    }\n}\n```",
      "```cpp\n#include <boost/asio.hpp>\n\nvoid start_udp_echo_server(boost::asio::io_context& io_context, unsigned short port) {\n    boost::asio::ip::udp::socket socket(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), port));\n    char data[1024];\n    for (;;) {\n        boost::asio::ip::udp::endpoint remote_endpoint;\n        size_t length = socket.receive_from(boost::asio::buffer(data), remote_endpoint);\n        socket.send_to(boost::asio::buffer(data, length), remote_endpoint);\n    }\n}\n```",
      "```cpp\n#include <boost/asio.hpp>\n\nvoid start_udp_echo_server(boost::asio::io_context& io_context, unsigned short port) {\n    boost::asio::ip::udp::socket socket(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), port));\n    char data[1024];\n    for (;;) {\n        boost::asio::ip::udp::endpoint remote_endpoint;\n        size_t length = socket.receive_from(boost::asio::buffer(data), remote_endpoint);\n        socket.send_to(boost::asio::buffer(data, length), remote_endpoint);\n    }\n}\n```",
      "```cpp\n#include <boost/asio.hpp>\n\nvoid start_udp_echo_server(boost::asio::io_context& io_context, unsigned short port) {\n    boost::asio::ip::udp::socket socket(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), port));\n    char buffer[1024];\n\n    for (;;) {\n        boost::asio::ip::udp::endpoint remote_endpoint;\n        boost::system::error_code error;\n        size_t length = socket.receive_from(boost::asio::buffer(buffer), remote_endpoint, 0, error);\n\n        if (!error && length > 0) {\n            socket.send_to(boost::asio::buffer(buffer, length), remote_endpoint);\n        }\n    }\n}\n```",
      "```cpp\n#include <boost/asio.hpp>\n\nvoid start_udp_echo_server(boost::asio::io_context& io_context, unsigned short port) {\n  boost::asio::ip::udp::socket socket(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), port));\n  char buffer[1024];\n\n  for (;;) {\n    boost::asio::ip::udp::endpoint sender_endpoint;\n    boost::system::error_code ec;\n\n    size_t length = socket.receive_from(boost::asio::buffer(buffer), sender_endpoint, 0, ec);\n\n    if (!ec) {\n      socket.send_to(boost::asio::buffer(buffer, length), sender_endpoint);\n    }\n  }\n}\n```",
      "```cpp\n#include <boost/asio.hpp>\n\nvoid start_udp_echo_server(boost::asio::io_context& io_context, unsigned short port) {\n    boost::asio::ip::udp::socket socket(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), port));\n    char data[1024];\n    for (;;) {\n        boost::asio::ip::udp::endpoint remote_endpoint;\n        size_t length = socket.receive_from(boost::asio::buffer(data), remote_endpoint);\n        socket.send_to(boost::asio::buffer(data, length), remote_endpoint);\n    }\n}\n```",
      "```cpp\n#include <boost/asio.hpp>\n\nvoid start_udp_echo_server(boost::asio::io_context& io_context, unsigned short port) {\n  boost::asio::ip::udp::socket socket(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), port));\n  char buffer[1024];\n\n  for (;;) {\n    boost::asio::ip::udp::endpoint sender_endpoint;\n    boost::system::error_code ec;\n\n    size_t length = socket.receive_from(boost::asio::buffer(buffer), sender_endpoint, 0, ec);\n\n    if (!ec && length > 0) {\n      socket.send_to(boost::asio::buffer(buffer, length), sender_endpoint);\n    }\n  }\n}\n```",
      "```cpp\n#include <boost/asio.hpp>\n\nvoid start_udp_echo_server(boost::asio::io_context& io_context, unsigned short port) {\n  boost::asio::ip::udp::socket socket(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), port));\n  char buffer[1024];\n\n  while (true) {\n    boost::asio::ip::udp::endpoint sender_endpoint;\n    boost::system::error_code error;\n    size_t length = socket.receive_from(boost::asio::buffer(buffer), sender_endpoint, 0, error);\n\n    if (!error && length > 0) {\n      socket.send_to(boost::asio::buffer(buffer, length), sender_endpoint);\n    }\n  }\n}\n```"
    ],
    "unmatched_results": [
      "```cpp\nvoid start_udp_echo_server(boost::asio::io_context& io_context, unsigned short port) {\n    boost::asio::ip::udp::socket socket(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), port));\n    char data[1024];\n    boost::asio::ip::udp::endpoint sender_endpoint;\n    for (;;) {\n        boost::system::error_code ec;\n        size_t length = socket.receive_from(boost::asio::buffer(data), sender_endpoint, 0, ec);\n        if (!ec) {\n            socket.send_to(boost::asio::buffer(data, length), sender_endpoint);\n        }\n    }\n}\n```",
      "```cpp\nvoid start_udp_echo_server(boost::asio::io_context& io_context, unsigned short port) {\n    boost::asio::ip::udp::socket socket(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), port));\n    char data[1024];\n    boost::asio::ip::udp::endpoint sender_endpoint;\n    for (;;) {\n        boost::system::error_code ec;\n        size_t length = socket.receive_from(boost::asio::buffer(data), sender_endpoint, 0, ec);\n        if (!ec && length > 0) {\n            socket.send_to(boost::asio::buffer(data, length), sender_endpoint);\n        }\n    }\n}\n```"
    ],
    "match_count": 8,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 34,
    "Instruction": "Task Description: Implement a UDP client communication function using Boost.Asio to send a message to a specified host and port, and receive a response.\n\nFunction Description: The function establishes a UDP client connection, sends a message to a specified server, and waits to receive a response. It uses Boost.Asio for asynchronous UDP operations.\n\nInput:\n- host: [std::string] - The hostname or IP address of the UDP server to connect to\n- port: [std::string] - The port number of the UDP server\n- message: [std::string] - The message to be sent to the server\n\nOutput: None (The function receives a reply from the server but doesn't return it. In a real implementation, you might want to return the reply or process it further.)",
    "Canonical_solution": "#include <boost/asio.hpp>\nusing boost::asio::ip::udp;\n\nvoid udp_client_communication(const std::string& host, const std::string& port, const std::string& message)\n{\n    boost::asio::io_context io_context;\n    udp::socket s(io_context, udp::endpoint(udp::v4(), 0));\n    udp::resolver resolver(io_context);\n    udp::resolver::results_type endpoints = resolver.resolve(udp::v4(), host, port);\n\n    size_t request_length = message.length();\n    s.send_to(boost::asio::buffer(message, request_length), *endpoints.begin());\n\n    char reply[max_length];\n    udp::endpoint sender_endpoint;\n    size_t reply_length = s.receive_from(boost::asio::buffer(reply, max_length), sender_endpoint);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 153,
    "matched_results": [
      "```cpp\n#include <boost/asio.hpp>\n#include <string>\n\nvoid udp_client(const std::string& host, const std::string& port, const std::string& message) {\n    boost::asio::io_context io_context;\n    boost::asio::ip::udp::resolver resolver(io_context);\n    boost::asio::ip::udp::endpoint endpoint = *resolver.resolve(boost::asio::ip::udp::v4(), host, port).begin();\n    boost::asio::ip::udp::socket socket(io_context);\n    socket.open(boost::asio::ip::udp::v4());\n    socket.send_to(boost::asio::buffer(message), endpoint);\n\n    char reply[1024];\n    boost::system::error_code error;\n    size_t reply_length = socket.receive_from(boost::asio::buffer(reply), endpoint, 0, error);\n    if (error && error != boost::asio::error::message_size)\n        throw boost::system::system_error(error);\n}\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <string>\n\nvoid udp_client(const std::string& host, const std::string& port, const std::string& message) {\n    boost::asio::io_context io;\n    boost::asio::ip::udp::resolver resolver(io);\n    boost::asio::ip::udp::endpoint endpoint = *resolver.resolve(boost::asio::ip::udp::v4(), host, port).begin();\n    boost::asio::ip::udp::socket socket(io);\n    socket.open(boost::asio::ip::udp::v4());\n    socket.send_to(boost::asio::buffer(message), endpoint);\n\n    char reply[1024];\n    boost::system::error_code ec;\n    size_t reply_length = socket.receive(boost::asio::buffer(reply), 0, ec);\n    if (ec && ec != boost::asio::error::message_size)\n        throw boost::system::system_error(ec);\n}\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <string>\n\nvoid udp_client(const std::string& host, const std::string& port, const std::string& message) {\n    boost::asio::io_context io;\n    boost::asio::ip::udp::resolver resolver(io);\n    boost::asio::ip::udp::endpoint endpoint = *resolver.resolve(boost::asio::ip::udp::v4(), host, port).begin();\n    boost::asio::ip::udp::socket socket(io);\n    socket.open(boost::asio::ip::udp::v4());\n    socket.send_to(boost::asio::buffer(message), endpoint);\n\n    char reply[1024];\n    boost::system::error_code error;\n    size_t len = socket.receive_from(boost::asio::buffer(reply, sizeof(reply)), endpoint, 0, error);\n    if (error && error != boost::asio::error::message_size)\n        throw boost::system::system_error(error);\n}\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <string>\n\nvoid udp_client(const std::string& host, const std::string& port, const std::string& message) {\n    boost::asio::io_context io_context;\n    boost::asio::ip::udp::resolver resolver(io_context);\n    boost::asio::ip::udp::endpoint endpoint = *resolver.resolve(boost::asio::ip::udp::v4(), host, port).begin();\n    boost::asio::ip::udp::socket socket(io_context);\n    socket.open(boost::asio::ip::udp::v4());\n    socket.send_to(boost::asio::buffer(message), endpoint);\n\n    char reply[1024];\n    boost::system::error_code error;\n    size_t reply_length = socket.receive_from(boost::asio::buffer(reply), endpoint, 0, error);\n    if (error && error != boost::asio::error::message_size)\n        throw boost::system::system_error(error);\n}\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <string>\n\nvoid udp_client(const std::string& host, const std::string& port, const std::string& message) {\n    boost::asio::io_context io_context;\n    boost::asio::ip::udp::resolver resolver(io_context);\n    boost::asio::ip::udp::endpoint endpoint = *resolver.resolve(boost::asio::ip::udp::v4(), host, port).begin();\n    boost::asio::ip::udp::socket socket(io_context);\n    socket.open(boost::asio::ip::udp::v4());\n    socket.send_to(boost::asio::buffer(message), endpoint);\n\n    char reply[1024];\n    boost::system::error_code error;\n    size_t reply_length = socket.receive_from(boost::asio::buffer(reply), endpoint, 0, error);\n    if (error && error != boost::asio::error::message_size) {\n        throw boost::system::system_error(error);\n    }\n}\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <string>\n\nvoid udp_client(const std::string& host, const std::string& port, const std::string& message) {\n    boost::asio::io_context io;\n    boost::asio::ip::udp::resolver resolver(io);\n    boost::asio::ip::udp::endpoint endpoint = *resolver.resolve(boost::asio::ip::udp::v4(), host, port).begin();\n    boost::asio::ip::udp::socket socket(io);\n    socket.open(boost::asio::ip::udp::v4());\n    socket.send_to(boost::asio::buffer(message), endpoint);\n\n    char reply[1024];\n    boost::system::error_code ec;\n    size_t reply_length = socket.receive(boost::asio::buffer(reply), 0, ec);\n    if (ec && ec != boost::asio::error::message_size) {\n        // Handle error\n    }\n}\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <string>\n\nvoid udp_client(const std::string& host, const std::string& port, const std::string& message) {\n    boost::asio::io_context io_context;\n    boost::asio::ip::udp::resolver resolver(io_context);\n    boost::asio::ip::udp::endpoint endpoint = *resolver.resolve(boost::asio::ip::udp::v4(), host, port).begin();\n    boost::asio::ip::udp::socket socket(io_context);\n    socket.open(boost::asio::ip::udp::v4());\n    socket.send_to(boost::asio::buffer(message), endpoint);\n\n    char reply[1024];\n    boost::system::error_code error;\n    size_t reply_length = socket.receive_from(boost::asio::buffer(reply), endpoint, 0, error);\n    if (error && error != boost::asio::error::message_size)\n        throw boost::system::system_error(error);\n}\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <string>\n\nvoid udp_client(const std::string& host, const std::string& port, const std::string& message) {\n    boost::asio::io_context io_context;\n    boost::asio::ip::udp::resolver resolver(io_context);\n    boost::asio::ip::udp::endpoint endpoint = *resolver.resolve(boost::asio::ip::udp::v4(), host, port).begin();\n    boost::asio::ip::udp::socket socket(io_context);\n    socket.open(boost::asio::ip::udp::v4());\n    socket.send_to(boost::asio::buffer(message), endpoint);\n\n    char reply[1024];\n    boost::system::error_code error;\n    size_t reply_length = socket.receive_from(boost::asio::buffer(reply), endpoint, 0, error);\n    if (error && error != boost::asio::error::message_size)\n        throw boost::system::system_error(error);\n}\n```"
    ],
    "unmatched_results": [
      "```cpp\n#include <boost/asio.hpp>\n#include <boost/bind.hpp>\n#include <boost/shared_ptr.hpp>\n#include <boost/enable_shared_from_this.hpp>\n#include <string>\n\nvoid send_and_receive_udp_message(const std::string& host, const std::string& port, const std::string& message) {\n    boost::asio::io_service io_service;\n\n    boost::asio::ip::udp::resolver resolver(io_service);\n    boost::asio::ip::udp::resolver::query query(boost::asio::ip::udp::v4(), host, port);\n    boost::asio::ip::udp::endpoint endpoint = *resolver.resolve(query);\n\n    boost::asio::ip::udp::socket socket(io_service);\n    socket.open(boost::asio::ip::udp::v4());\n\n    socket.send_to(boost::asio::buffer(message), endpoint);\n\n    boost::array<char, 1024> recv_buf;\n    boost::asio::ip::udp::endpoint sender_endpoint;\n    size_t len = socket.receive_from(boost::asio::buffer(recv_buf), sender_endpoint);\n}\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <boost/bind.hpp>\n#include <boost/shared_ptr.hpp>\n#include <boost/enable_shared_from_this.hpp>\n\nvoid udp_client(const std::string& host, const std::string& port, const std::string& message) {\n    boost::asio::io_service io_service;\n\n    boost::asio::ip::udp::resolver resolver(io_service);\n    boost::asio::ip::udp::resolver::query query(boost::asio::ip::udp::v4(), host, port);\n    boost::asio::ip::udp::endpoint endpoint = *resolver.resolve(query);\n\n    boost::asio::ip::udp::socket socket(io_service);\n    socket.open(boost::asio::ip::udp::v4());\n\n    socket.send_to(boost::asio::buffer(message), endpoint);\n\n    char reply[1024];\n    boost::system::error_code error;\n    size_t reply_length = socket.receive_from(boost::asio::buffer(reply), endpoint, 0, error);\n\n    if (error && error != boost::asio::error::message_size) {\n        throw boost::system::system_error(error);\n    }\n}\n```"
    ],
    "match_count": 8,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 35,
    "Instruction": "Task Description: Implement a UDP server class using Boost.Asio that handles incoming UDP packets, processes them, and sends replies back to clients. The server should run asynchronously in a separate thread and provide a callback mechanism for handling incoming requests.\n\nClass Description: UDPServer::Impl is an implementation class for a UDP server that listens for incoming packets, validates them, and forwards valid packets to a callback function. It also provides functionality to send replies back to clients.\n\nAttributes:\n- worker_thread: std::thread - Thread that runs the IO context for asynchronous operations\n- io_context: boost::asio::io_context - Manages asynchronous operations for Boost.Asio\n- socket: boost::asio::ip::udp::socket - UDP socket for communication\n- request_buffer: std::array<u8, MAX_PACKET_SIZE> - Buffer for storing incoming UDP packets\n- remote_endpoint: boost::asio::ip::udp::endpoint - Stores the endpoint of the last received packet\n- new_request_callback: std::function<void(std::unique_ptr<Packet>)> - Callback function for handling new valid packets\n\nMethods:\n- Impl(std::function<void(std::unique_ptr<Packet>)>) -> None - Constructor that initializes the UDP socket and starts the receive loop\n- ~Impl() -> None - Destructor that stops the IO context and joins the worker thread\n- StartReceive() -> None - Starts an asynchronous receive operation on the UDP socket\n- HandleReceive(const boost::system::error_code&, std::size_t) -> None - Handles received data, validates packets, and triggers the callback for valid packets\n- SendReply(boost::asio::ip::udp::endpoint, Packet&) -> None - Sends a reply packet back to the specified endpoint",
    "Canonical_solution": "#include <thread>\n#include <boost/asio.hpp>\n#include <functional>\n#include <memory>\n#include <array>\n#include \"common/common_types.h\"\n#include \"common/logging/log.h\"\n#include \"core/rpc/packet.h\"\n\nnamespace Core::RPC {\n\nclass UDPServer::Impl {\npublic:\n    explicit Impl(std::function<void(std::unique_ptr<Packet>)> new_request_callback)\n        : socket(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), 45987)),\n          new_request_callback(std::move(new_request_callback)) {\n\n        StartReceive();\n        worker_thread = std::thread([this] { io_context.run(); });\n    }\n\n    ~Impl() {\n        io_context.stop();\n        worker_thread.join();\n    }\n\nprivate:\n    void StartReceive() {\n        socket.async_receive_from(boost::asio::buffer(request_buffer), remote_endpoint,\n                                  [this](const boost::system::error_code& error, std::size_t size) {\n                                      HandleReceive(error, size);\n                                  });\n    }\n\n    void HandleReceive(const boost::system::error_code& error, std::size_t size) {\n        if (error) {\n            LOG_WARNING(RPC_Server, \"Failed to receive data on UDP socket: {}\", error.message());\n        } else if (size >= MIN_PACKET_SIZE && size <= MAX_PACKET_SIZE) {\n            PacketHeader header;\n            std::memcpy(&header, request_buffer.data(), sizeof(header));\n            if ((size - MIN_PACKET_SIZE) == header.packet_size) {\n                u8* data = request_buffer.data() + MIN_PACKET_SIZE;\n                std::function<void(Packet&)> send_reply_callback =\n                    std::bind(&Impl::SendReply, this, remote_endpoint, std::placeholders::_1);\n                std::unique_ptr<Packet> new_packet =\n                    std::make_unique<Packet>(header, data, send_reply_callback);\n\n                new_request_callback(std::move(new_packet));\n            }\n        } else {\n            LOG_WARNING(RPC_Server, \"Received message with wrong size: {}\", size);\n        }\n        StartReceive();\n    }\n\n    void SendReply(boost::asio::ip::udp::endpoint endpoint, Packet& reply_packet) {\n        std::vector<u8> reply_buffer(MIN_PACKET_SIZE + reply_packet.GetPacketDataSize());\n        auto reply_header = reply_packet.GetHeader();\n\n        std::memcpy(reply_buffer.data(), &reply_header, sizeof(reply_header));\n        std::memcpy(reply_buffer.data() + (4 * sizeof(u32)), reply_packet.GetPacketData().data(),\n                    reply_packet.GetPacketDataSize());\n\n        boost::system::error_code error;\n        socket.send_to(boost::asio::buffer(reply_buffer), endpoint, 0, error);\n\n        if (error) {\n            LOG_WARNING(RPC_Server, \"Failed to send reply: {}\", error.message());\n        } else {\n            LOG_INFO(RPC_Server, \"Sent reply version({}) id=({}) type=({}) size=({})\",\n                     reply_packet.GetVersion(), reply_packet.GetId(), reply_packet.GetPacketType(),\n                     reply_packet.GetPacketDataSize());\n        }\n    }\n\n    std::thread worker_thread;\n    boost::asio::io_context io_context;\n    boost::asio::ip::udp::socket socket;\n    std::array<u8, MAX_PACKET_SIZE> request_buffer;\n    boost::asio::ip::udp::endpoint remote_endpoint;\n    std::function<void(std::unique_ptr<Packet>)> new_request_callback;\n};\n\n} // namespace Core::RPC",
    "Code_level": "Class-level",
    "FSMID_for_test": 153,
    "matched_results": [
      "```cpp\n#include <boost/asio.hpp>\n#include <thread>\n#include <array>\n#include <functional>\n#include <memory>\n\nusing boost::asio::ip::udp;\n\nclass Packet {\npublic:\n    virtual ~Packet() = default;\n};\n\nclass UDPServer {\npublic:\n    class Impl {\n    public:\n        using u8 = unsigned char;\n\n        static constexpr std::size_t MAX_PACKET_SIZE = 65507;\n\n        explicit Impl(const std::function<void(std::unique_ptr<Packet>)>& callback, const std::string& address, unsigned short port)\n            : new_request_callback(callback), io_context(), socket(io_context, udp::endpoint(udp::v4(), port)), remote_endpoint()\n        {\n            worker_thread = std::thread([this]() { io_context.run(); });\n            StartReceive();\n        }\n\n        ~Impl() {\n            io_context.stop();\n            if (worker_thread.joinable()) {\n                worker_thread.join();\n            }\n        }\n\n        void StartReceive() {\n            socket.async_receive_from(\n                boost::asio::buffer(request_buffer),\n                remote_endpoint,\n                [this](const boost::system::error_code& error, std::size_t bytes_recvd) {\n                    HandleReceive(error, bytes_recvd);\n                });\n        }\n\n        void HandleReceive(const boost::system::error_code& error, std::size_t bytes_recvd) {\n            if (!error && bytes_recvd > 0) {\n                auto packet = std::make_unique<Packet>();\n                // Process the packet here based on your protocol\n                new_request_callback(std::move(packet));\n            }\n\n            StartReceive();\n        }\n\n        void SendReply(udp::endpoint endpoint, const Packet& reply_packet) {\n            std::array<u8, MAX_PACKET_SIZE> buffer;\n            // Serialize the reply_packet into buffer\n            socket.send_to(boost::asio::buffer(buffer), endpoint);\n        }\n\n    private:\n        std::thread worker_thread;\n        boost::asio::io_context io_context;\n        udp::socket socket;\n        std::array<u8, MAX_PACKET_SIZE> request_buffer;\n        udp::endpoint remote_endpoint;\n        std::function<void(std::unique_ptr<Packet>)> new_request_callback;\n    };\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <thread>\n#include <array>\n#include <functional>\n#include <memory>\n\nusing boost::asio::ip::udp;\n\nclass Packet {\npublic:\n    virtual ~Packet() = default;\n};\n\nclass UDPServer {\npublic:\n    class Impl {\n    public:\n        using u8 = unsigned char;\n\n        static constexpr std::size_t MAX_PACKET_SIZE = 65535;\n\n        explicit Impl(const std::function<void(std::unique_ptr<Packet>)>& callback, const std::string& address, unsigned short port)\n            : new_request_callback(callback), io_context(), socket(io_context, udp::endpoint(udp::v4(), port)), remote_endpoint()\n        {\n            worker_thread = std::thread([this]() { io_context.run(); });\n            StartReceive();\n        }\n\n        ~Impl() {\n            io_context.stop();\n            if (worker_thread.joinable()) {\n                worker_thread.join();\n            }\n        }\n\n        void StartReceive() {\n            socket.async_receive_from(\n                boost::asio::buffer(request_buffer),\n                remote_endpoint,\n                [this](const boost::system::error_code& error, std::size_t bytes_received) {\n                    HandleReceive(error, bytes_received);\n                });\n        }\n\n        void HandleReceive(const boost::system::error_code& error, std::size_t bytes_received) {\n            if (!error && bytes_received > 0) {\n                auto packet = std::make_unique<Packet>();\n                // Process the packet here based on request_buffer and bytes_received\n                new_request_callback(std::move(packet));\n            }\n\n            StartReceive();\n        }\n\n        void SendReply(udp::endpoint endpoint, const Packet& reply_packet) {\n            boost::asio::post(io_context, [this, endpoint, &reply_packet]() {\n                // Serialize or prepare reply data from reply_packet\n                std::array<u8, MAX_PACKET_SIZE> reply_buffer;\n                std::size_t reply_length = 0;\n                // Fill reply_buffer with serialized data from reply_packet\n                socket.send_to(boost::asio::buffer(reply_buffer, reply_length), endpoint);\n            });\n        }\n\n    private:\n        std::thread worker_thread;\n        boost::asio::io_context io_context;\n        udp::socket socket;\n        std::array<u8, MAX_PACKET_SIZE> request_buffer;\n        udp::endpoint remote_endpoint;\n        std::function<void(std::unique_ptr<Packet>)> new_request_callback;\n    };\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <thread>\n#include <array>\n#include <functional>\n#include <memory>\n\nusing boost::asio::ip::udp;\n\nclass Packet {\n    // Assume Packet is a defined class with serialization/deserialization methods\n};\n\nclass UDPServer {\npublic:\n    class Impl {\n    public:\n        using u8 = unsigned char;\n        static constexpr std::size_t MAX_PACKET_SIZE = 65507;\n\n        explicit Impl(std::function<void(std::unique_ptr<Packet>)> callback, const std::string& address, unsigned short port)\n            : new_request_callback(callback), io_context(), socket(io_context, udp::endpoint(udp::v4(), port))\n        {\n            worker_thread = std::thread([this]() { io_context.run(); });\n            StartReceive();\n        }\n\n        ~Impl() {\n            io_context.stop();\n            if (worker_thread.joinable()) {\n                worker_thread.join();\n            }\n        }\n\n        void StartReceive() {\n            socket.async_receive_from(\n                boost::asio::buffer(request_buffer), remote_endpoint,\n                [this](const boost::system::error_code& error, std::size_t bytes_recvd) {\n                    HandleReceive(error, bytes_recvd);\n                });\n        }\n\n        void HandleReceive(const boost::system::error_code& error, std::size_t bytes_recvd) {\n            if (!error && bytes_recvd > 0) {\n                auto packet = std::make_unique<Packet>();\n                // Assume packet deserialization logic here\n                if (packet->IsValid()) {\n                    new_request_callback(std::move(packet));\n                }\n            }\n            StartReceive();\n        }\n\n        void SendReply(udp::endpoint endpoint, Packet& response) {\n            std::array<u8, MAX_PACKET_SIZE> reply_buffer;\n            // Assume packet serialization logic here\n            socket.send_to(boost::asio::buffer(reply_buffer, response.Size()), endpoint);\n        }\n\n    private:\n        std::thread worker_thread;\n        boost::asio::io_context io_context;\n        udp::socket socket;\n        std::array<u8, MAX_PACKET_SIZE> request_buffer;\n        udp::endpoint remote_endpoint;\n        std::function<void(std::unique_ptr<Packet>)> new_request_callback;\n    };\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <functional>\n#include <memory>\n#include <thread>\n#include <array>\n\nusing boost::asio::ip::udp;\n\nclass Packet {\npublic:\n    virtual ~Packet() = default;\n};\n\nclass UDPServer {\npublic:\n    class Impl {\n    public:\n        using u8 = unsigned char;\n        static constexpr std::size_t MAX_PACKET_SIZE = 65507;\n\n        explicit Impl(std::function<void(std::unique_ptr<Packet>)> callback, const std::string& address, unsigned short port)\n            : new_request_callback(callback), io_context(), socket(io_context, udp::endpoint(udp::v4(), port)), remote_endpoint()\n        {\n            worker_thread = std::thread([this]() { io_context.run(); });\n            StartReceive();\n        }\n\n        ~Impl() {\n            io_context.stop();\n            if (worker_thread.joinable()) {\n                worker_thread.join();\n            }\n        }\n\n        void StartReceive() {\n            socket.async_receive_from(\n                boost::asio::buffer(request_buffer),\n                remote_endpoint,\n                [this](const boost::system::error_code& error, std::size_t bytes_recvd) {\n                    HandleReceive(error, bytes_recvd);\n                });\n        }\n\n        void HandleReceive(const boost::system::error_code& error, std::size_t bytes_recvd) {\n            if (!error && bytes_recvd > 0) {\n                auto packet = std::make_unique<Packet>();\n                // Process the packet here if needed\n                new_request_callback(std::move(packet));\n            }\n\n            StartReceive();\n        }\n\n        void SendReply(udp::endpoint endpoint, Packet& reply_packet) {\n            // Implement packet serialization and sending logic here\n            std::array<u8, MAX_PACKET_SIZE> reply_buffer;\n            // Serialize reply_packet into reply_buffer\n            socket.send_to(boost::asio::buffer(reply_buffer), endpoint);\n        }\n\n    private:\n        std::thread worker_thread;\n        boost::asio::io_context io_context;\n        udp::socket socket;\n        std::array<u8, MAX_PACKET_SIZE> request_buffer;\n        udp::endpoint remote_endpoint;\n        std::function<void(std::unique_ptr<Packet>)> new_request_callback;\n    };\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <functional>\n#include <thread>\n#include <array>\n#include <memory>\n\nusing boost::asio::ip::udp;\n\nclass Packet {\npublic:\n    virtual ~Packet() = default;\n};\n\nclass UDPServer {\npublic:\n    class Impl {\n    public:\n        using u8 = unsigned char;\n\n        static constexpr std::size_t MAX_PACKET_SIZE = 65507;\n\n        explicit Impl(std::function<void(std::unique_ptr<Packet>)> callback, const std::string& address, unsigned short port)\n            : new_request_callback(callback), io_context(), socket(io_context, udp::endpoint(udp::v4(), port)), remote_endpoint()\n        {\n            request_buffer.fill(0);\n            worker_thread = std::thread([this]() { io_context.run(); });\n            StartReceive();\n        }\n\n        ~Impl() {\n            io_context.stop();\n            if (worker_thread.joinable()) {\n                worker_thread.join();\n            }\n        }\n\n        void StartReceive() {\n            socket.async_receive_from(\n                boost::asio::buffer(request_buffer),\n                remote_endpoint,\n                [this](const boost::system::error_code& error, std::size_t bytes_received) {\n                    HandleReceive(error, bytes_received);\n                });\n        }\n\n        void HandleReceive(const boost::system::error_code& error, std::size_t bytes_received) {\n            if (!error && bytes_received > 0) {\n                auto packet = ProcessPacket(bytes_received);\n                if (packet) {\n                    new_request_callback(std::move(packet));\n                }\n            }\n\n            StartReceive();\n        }\n\n        void SendReply(udp::endpoint endpoint, Packet& reply_packet) {\n            // Implement serialization of the packet to a buffer\n            std::array<u8, MAX_PACKET_SIZE> reply_buffer{};\n            std::size_t reply_size = SerializePacket(reply_packet, reply_buffer);\n\n            socket.send_to(boost::asio::buffer(reply_buffer, reply_size), endpoint);\n        }\n\n    private:\n        std::thread worker_thread;\n        boost::asio::io_context io_context;\n        udp::socket socket;\n        std::array<u8, MAX_PACKET_SIZE> request_buffer;\n        udp::endpoint remote_endpoint;\n        std::function<void(std::unique_ptr<Packet>)> new_request_callback;\n\n        std::unique_ptr<Packet> ProcessPacket(std::size_t size) {\n            // Implement packet validation and parsing logic here\n            return std::make_unique<Packet>();\n        }\n\n        std::size_t SerializePacket(Packet& packet, std::array<u8, MAX_PACKET_SIZE>& buffer) {\n            // Implement packet serialization logic here\n            return 0;\n        }\n    };\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <functional>\n#include <thread>\n#include <array>\n#include <memory>\n\nusing boost::asio::ip::udp;\n\nclass Packet {\npublic:\n    virtual ~Packet() = default;\n};\n\nclass UDPServer {\npublic:\n    class Impl {\n    public:\n        using u8 = unsigned char;\n\n        static constexpr std::size_t MAX_PACKET_SIZE = 65507;\n\n        explicit Impl(std::function<void(std::unique_ptr<Packet>)> callback, const std::string& address, unsigned short port)\n            : new_request_callback(callback), io_context(), socket(io_context, udp::endpoint(udp::v4(), port)), remote_endpoint()\n        {\n            worker_thread = std::thread([this]() { io_context.run(); });\n            StartReceive();\n        }\n\n        ~Impl() {\n            io_context.stop();\n            if (worker_thread.joinable()) {\n                worker_thread.join();\n            }\n        }\n\n        void StartReceive() {\n            socket.async_receive_from(\n                boost::asio::buffer(request_buffer),\n                remote_endpoint,\n                [this](const boost::system::error_code& error, std::size_t bytes_recvd) {\n                    HandleReceive(error, bytes_recvd);\n                });\n        }\n\n        void HandleReceive(const boost::system::error_code& error, std::size_t bytes_recvd) {\n            if (!error && bytes_recvd > 0) {\n                auto packet = std::make_unique<Packet>();\n                // Process and validate the packet here\n                new_request_callback(std::move(packet));\n            }\n\n            StartReceive();\n        }\n\n        void SendReply(udp::endpoint endpoint, Packet& reply_packet) {\n            // Serialize the packet into a buffer before sending\n            std::array<u8, MAX_PACKET_SIZE> reply_buffer;\n            std::size_t reply_size = 0; // Implement serialization logic here\n\n            socket.send_to(boost::asio::buffer(reply_buffer, reply_size), endpoint);\n        }\n\n    private:\n        std::thread worker_thread;\n        boost::asio::io_context io_context;\n        udp::socket socket;\n        std::array<u8, MAX_PACKET_SIZE> request_buffer;\n        udp::endpoint remote_endpoint;\n        std::function<void(std::unique_ptr<Packet>)> new_request_callback;\n    };\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <functional>\n#include <memory>\n#include <thread>\n#include <array>\n\nusing boost::asio::ip::udp;\n\nclass Packet {\npublic:\n    virtual ~Packet() = default;\n};\n\nclass UDPServer {\npublic:\n    class Impl {\n    public:\n        using u8 = unsigned char;\n        static constexpr std::size_t MAX_PACKET_SIZE = 65507;\n\n        explicit Impl(std::function<void(std::unique_ptr<Packet>)> callback, const std::string& address, unsigned short port)\n            : new_request_callback(callback), io_context(), socket(io_context, udp::endpoint(udp::v4(), port)), remote_endpoint()\n        {\n            worker_thread = std::thread([this]() { io_context.run(); });\n            StartReceive();\n        }\n\n        ~Impl() {\n            io_context.stop();\n            if (worker_thread.joinable()) {\n                worker_thread.join();\n            }\n        }\n\n        void StartReceive() {\n            socket.async_receive_from(\n                boost::asio::buffer(request_buffer),\n                remote_endpoint,\n                [this](const boost::system::error_code& error, std::size_t bytes_recvd) {\n                    HandleReceive(error, bytes_recvd);\n                });\n        }\n\n        void HandleReceive(const boost::system::error_code& error, std::size_t bytes_recvd) {\n            if (!error && bytes_recvd > 0) {\n                auto packet = std::make_unique<Packet>();\n                // Process and validate the packet here\n                new_request_callback(std::move(packet));\n            }\n            StartReceive();\n        }\n\n        void SendReply(udp::endpoint endpoint, Packet& reply_packet) {\n            // Serialize the packet into a buffer before sending\n            std::array<u8, MAX_PACKET_SIZE> reply_buffer{};\n            // Implement serialization logic here\n            socket.send_to(boost::asio::buffer(reply_buffer), endpoint);\n        }\n\n    private:\n        std::thread worker_thread;\n        boost::asio::io_context io_context;\n        udp::socket socket;\n        std::array<u8, MAX_PACKET_SIZE> request_buffer;\n        udp::endpoint remote_endpoint;\n        std::function<void(std::unique_ptr<Packet>)> new_request_callback;\n    };\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <functional>\n#include <memory>\n#include <thread>\n#include <array>\n\nusing boost::asio::ip::udp;\n\nclass Packet {\npublic:\n    virtual ~Packet() = default;\n};\n\nclass UDPServer {\npublic:\n    class Impl {\n    public:\n        using u8 = unsigned char;\n\n        static constexpr std::size_t MAX_PACKET_SIZE = 65507;\n\n        explicit Impl(std::function<void(std::unique_ptr<Packet>)> callback, const std::string& address, unsigned short port)\n            : new_request_callback(callback), io_context(), socket(io_context, udp::endpoint(udp::v4(), port)), remote_endpoint()\n        {\n            request_buffer.fill(0);\n            worker_thread = std::thread([this]() { io_context.run(); });\n            StartReceive();\n        }\n\n        ~Impl() {\n            io_context.stop();\n            if (worker_thread.joinable()) {\n                worker_thread.join();\n            }\n        }\n\n        void StartReceive() {\n            socket.async_receive_from(\n                boost::asio::buffer(request_buffer.data(), MAX_PACKET_SIZE),\n                remote_endpoint,\n                [this](const boost::system::error_code& error, std::size_t bytes_received) {\n                    HandleReceive(error, bytes_received);\n                });\n        }\n\n        void HandleReceive(const boost::system::error_code& error, std::size_t bytes_received) {\n            if (!error && bytes_received > 0) {\n                auto packet = std::make_unique<Packet>();\n                // Process and validate the packet here\n                new_request_callback(std::move(packet));\n            }\n\n            StartReceive();\n        }\n\n        void SendReply(udp::endpoint endpoint, Packet& reply_packet) {\n            boost::asio::post(io_context, [this, endpoint, &reply_packet]() {\n                // Serialize or prepare reply data\n                std::array<u8, MAX_PACKET_SIZE> reply_buffer;\n                // Fill reply_buffer with serialized reply_packet data\n                socket.send_to(boost::asio::buffer(reply_buffer), endpoint);\n            });\n        }\n\n    private:\n        std::thread worker_thread;\n        boost::asio::io_context io_context;\n        udp::socket socket;\n        std::array<u8, MAX_PACKET_SIZE> request_buffer;\n        udp::endpoint remote_endpoint;\n        std::function<void(std::unique_ptr<Packet>)> new_request_callback;\n    };\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <functional>\n#include <memory>\n#include <thread>\n#include <array>\n\nusing boost::asio::ip::udp;\n\nclass Packet {\n    // Assume this class is defined elsewhere with necessary data and methods\n};\n\nclass UDPServer {\npublic:\n    class Impl {\n    public:\n        using u8 = unsigned char;\n        static constexpr std::size_t MAX_PACKET_SIZE = 65507; // Maximum UDP packet size\n\n        explicit Impl(std::function<void(std::unique_ptr<Packet>)> callback, const std::string& address, unsigned short port)\n            : new_request_callback(callback), io_context(), socket(io_context, udp::endpoint(udp::v4(), port))\n        {\n            worker_thread = std::thread([this]() { io_context.run(); });\n            StartReceive();\n        }\n\n        ~Impl() {\n            io_context.stop();\n            if (worker_thread.joinable()) {\n                worker_thread.join();\n            }\n        }\n\n        void StartReceive() {\n            socket.async_receive_from(\n                boost::asio::buffer(request_buffer),\n                remote_endpoint,\n                [this](const boost::system::error_code& error, std::size_t bytes_received) {\n                    HandleReceive(error, bytes_received);\n                });\n        }\n\n        void HandleReceive(const boost::system::error_code& error, std::size_t bytes_received) {\n            if (!error && bytes_received > 0) {\n                auto packet = std::make_unique<Packet>();\n                // Assume parsing logic here to populate the packet from request_buffer\n                new_request_callback(std::move(packet));\n            }\n\n            StartReceive();\n        }\n\n        void SendReply(udp::endpoint endpoint, Packet& reply_packet) {\n            // Assume serialization logic here to convert packet into a byte buffer\n            std::array<u8, MAX_PACKET_SIZE> reply_buffer;\n            std::size_t reply_size = 0;\n            // Serialize reply_packet into reply_buffer and set reply_size accordingly\n\n            socket.send_to(boost::asio::buffer(reply_buffer, reply_size), endpoint);\n        }\n\n    private:\n        std::thread worker_thread;\n        boost::asio::io_context io_context;\n        udp::socket socket;\n        std::array<u8, MAX_PACKET_SIZE> request_buffer;\n        udp::endpoint remote_endpoint;\n        std::function<void(std::unique_ptr<Packet>)> new_request_callback;\n    };\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <functional>\n#include <thread>\n#include <array>\n#include <memory>\n\nusing boost::asio::ip::udp;\n\nclass Packet {\npublic:\n    virtual ~Packet() = default;\n};\n\nclass UDPServer {\npublic:\n    class Impl {\n    public:\n        using u8 = unsigned char;\n        static constexpr std::size_t MAX_PACKET_SIZE = 65507;\n\n        explicit Impl(std::function<void(std::unique_ptr<Packet>)> callback, const std::string& ip, unsigned short port)\n            : new_request_callback(callback), io_context(), socket(io_context, udp::endpoint(udp::v4(), port)), remote_endpoint()\n        {\n            worker_thread = std::thread([this]() { io_context.run(); });\n            StartReceive();\n        }\n\n        ~Impl() {\n            io_context.stop();\n            if (worker_thread.joinable()) {\n                worker_thread.join();\n            }\n        }\n\n        void StartReceive() {\n            socket.async_receive_from(\n                boost::asio::buffer(request_buffer),\n                remote_endpoint,\n                [this](const boost::system::error_code& error, std::size_t bytes_recvd) {\n                    HandleReceive(error, bytes_recvd);\n                });\n        }\n\n        void HandleReceive(const boost::system::error_code& error, std::size_t bytes_recvd) {\n            if (!error && bytes_recvd > 0) {\n                auto packet = std::make_unique<Packet>();\n                // Process the packet here if needed\n                new_request_callback(std::move(packet));\n            }\n            StartReceive();\n        }\n\n        void SendReply(udp::endpoint endpoint, Packet& reply_packet) {\n            boost::asio::post(io_context, [this, endpoint, &reply_packet]() {\n                // Implement serialization of reply_packet into a buffer\n                std::array<u8, MAX_PACKET_SIZE> reply_buffer{};\n                std::size_t reply_length = 0; // Replace with actual serialized size\n                socket.send_to(boost::asio::buffer(reply_buffer, reply_length), endpoint);\n            });\n        }\n\n    private:\n        std::thread worker_thread;\n        boost::asio::io_context io_context;\n        udp::socket socket;\n        std::array<u8, MAX_PACKET_SIZE> request_buffer;\n        udp::endpoint remote_endpoint;\n        std::function<void(std::unique_ptr<Packet>)> new_request_callback;\n    };\n};\n```"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 36,
    "Instruction": "Task Description: Create a UDP multicast receiver class using Boost.Asio that listens for incoming datagrams on a specified multicast address and port, and prints received messages to the console.\n\nClass Description: The `receiver` class encapsulates functionality for receiving UDP multicast messages. It initializes a UDP socket, joins a multicast group, and asynchronously receives datagrams, printing their contents to standard output.\n\nAttributes:\n- socket_: boost::asio::ip::udp::socket - The UDP socket used for communication\n- sender_endpoint_: boost::asio::ip::udp::endpoint - Stores the endpoint of the sender of the last received message\n- data_: std::array<char, 1024> - Buffer for storing received data\n\nMethods:\n- receiver(boost::asio::io_context&, const boost::asio::ip::address&, const boost::asio::ip::address&) -> None - Constructor that initializes the socket, binds it to the listening address and port, joins the multicast group, and starts receiving\n- do_receive() -> None - Private method that asynchronously receives data and prints it to console, then continues listening for more data",
    "Canonical_solution": "#include <boost/asio.hpp>\n#include <array>\n#include <string>\n\nconstexpr short multicast_port = 30001;\n\nclass receiver\n{\npublic:\n  receiver(boost::asio::io_context& io_context,\n      const boost::asio::ip::address& listen_address,\n      const boost::asio::ip::address& multicast_address)\n    : socket_(io_context)\n  {\n    // Create the socket so that multiple may be bound to the same address.\n    boost::asio::ip::udp::endpoint listen_endpoint(\n        listen_address, multicast_port);\n    socket_.open(listen_endpoint.protocol());\n    socket_.set_option(boost::asio::ip::udp::socket::reuse_address(true));\n    socket_.bind(listen_endpoint);\n\n    // Join the multicast group.\n    socket_.set_option(\n        boost::asio::ip::multicast::join_group(multicast_address));\n\n    do_receive();\n  }\n\nprivate:\n  void do_receive()\n  {\n    socket_.async_receive_from(\n        boost::asio::buffer(data_), sender_endpoint_,\n        [this](boost::system::error_code ec, std::size_t length)\n        {\n          if (!ec)\n          {\n            std::cout.write(data_.data(), length);\n            std::cout << std::endl;\n\n            do_receive();\n          }\n        });\n  }\n\n  boost::asio::ip::udp::socket socket_;\n  boost::asio::ip::udp::endpoint sender_endpoint_;\n  std::array<char, 1024> data_;\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 153,
    "matched_results": [
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <array>\n\nclass receiver {\npublic:\n    receiver(boost::asio::io_context& io_context,\n             const boost::asio::ip::address& listen_address,\n             const boost::asio::ip::address& multicast_address)\n        : socket_(io_context, boost::asio::ip::udp::endpoint(listen_address, 0))\n    {\n        boost::asio::ip::udp::endpoint sender_endpoint;\n        socket_.set_option(boost::asio::ip::udp::socket::reuse_address(true));\n        socket_.bind({listen_address, 30001});\n\n        boost::asio::ip::multicast::join_group join_group(multicast_address);\n        socket_.set_option(join_group);\n\n        do_receive();\n    }\n\nprivate:\n    void do_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(data_), sender_endpoint_,\n            [this](boost::system::error_code ec, std::size_t length) {\n                if (!ec) {\n                    std::cout.write(data_.data(), length);\n                    std::cout << std::endl;\n                    do_receive();\n                }\n            });\n    }\n\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint sender_endpoint_;\n    std::array<char, 1024> data_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <array>\n\nclass receiver {\npublic:\n    receiver(boost::asio::io_context& io_context,\n             const boost::asio::ip::address& listen_address,\n             const boost::asio::ip::address& multicast_address)\n        : socket_(io_context, boost::asio::ip::udp::endpoint(listen_address, 0))\n    {\n        boost::asio::ip::udp::endpoint sender_endpoint;\n        socket_.set_option(boost::asio::ip::udp::socket::reuse_address(true));\n        socket_.bind({listen_address, 30001});\n\n        boost::asio::ip::multicast::join_group join_group(multicast_address);\n        socket_.set_option(join_group);\n\n        do_receive();\n    }\n\nprivate:\n    void do_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(data_), sender_endpoint_,\n            [this](boost::system::error_code ec, std::size_t length) {\n                if (!ec) {\n                    std::cout.write(data_.data(), length);\n                    std::cout << std::endl;\n                    do_receive();\n                }\n            });\n    }\n\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint sender_endpoint_;\n    std::array<char, 1024> data_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <array>\n\nclass receiver {\npublic:\n    receiver(boost::asio::io_context& io_context,\n             const boost::asio::ip::address& listen_address,\n             const boost::asio::ip::address& multicast_address)\n        : socket_(io_context, boost::asio::ip::udp::endpoint(listen_address, 0))\n    {\n        boost::asio::ip::udp::endpoint sender_endpoint;\n        socket_.set_option(boost::asio::ip::udp::socket::reuse_address(true));\n        socket_.bind({listen_address, 30001});\n\n        boost::asio::ip::multicast::join_group join_group(multicast_address);\n        socket_.set_option(join_group);\n\n        do_receive();\n    }\n\nprivate:\n    void do_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(data_), sender_endpoint_,\n            [this](boost::system::error_code ec, std::size_t length) {\n                if (!ec) {\n                    std::cout.write(data_.data(), length);\n                    std::cout << std::endl;\n                    do_receive();\n                }\n            });\n    }\n\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint sender_endpoint_;\n    std::array<char, 1024> data_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <array>\n\nclass receiver {\npublic:\n    receiver(boost::asio::io_context& io_context,\n             const boost::asio::ip::address& listen_address,\n             const boost::asio::ip::address& multicast_address)\n        : socket_(io_context, boost::asio::ip::udp::endpoint(listen_address, 0))\n    {\n        boost::asio::ip::udp::endpoint sender_endpoint;\n        socket_.set_option(boost::asio::ip::udp::socket::reuse_address(true));\n        socket_.bind({listen_address, 30001});\n\n        boost::asio::ip::multicast::join_group join_group(multicast_address);\n        socket_.set_option(join_group);\n\n        do_receive();\n    }\n\nprivate:\n    void do_receive()\n    {\n        socket_.async_receive_from(\n            boost::asio::buffer(data_), sender_endpoint_,\n            [this](boost::system::error_code ec, std::size_t length) {\n                if (!ec) {\n                    std::cout.write(data_.data(), length);\n                    std::cout << std::endl;\n                    do_receive();\n                }\n            });\n    }\n\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint sender_endpoint_;\n    std::array<char, 1024> data_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <array>\n\nclass receiver {\npublic:\n    receiver(boost::asio::io_context& io_context,\n             const boost::asio::ip::address& listen_address,\n             const boost::asio::ip::address& multicast_address)\n        : socket_(io_context, boost::asio::ip::udp::endpoint(listen_address, 0))\n    {\n        boost::asio::ip::udp::endpoint sender_endpoint;\n        socket_.set_option(boost::asio::ip::udp::socket::reuse_address(true));\n        socket_.bind({listen_address, 30001});\n\n        boost::asio::ip::multicast::join_group join_group(multicast_address);\n        socket_.set_option(join_group);\n\n        do_receive();\n    }\n\nprivate:\n    void do_receive()\n    {\n        socket_.async_receive_from(\n            boost::asio::buffer(data_), sender_endpoint_,\n            [this](boost::system::error_code ec, std::size_t bytes_recvd) {\n                if (!ec && bytes_recvd > 0) {\n                    std::cout.write(data_.data(), bytes_recvd);\n                    std::cout << std::endl;\n                }\n                do_receive();\n            });\n    }\n\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint sender_endpoint_;\n    std::array<char, 1024> data_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <array>\n\nclass receiver {\npublic:\n    receiver(boost::asio::io_context& io_context,\n             const boost::asio::ip::address& listen_address,\n             const boost::asio::ip::address& multicast_address)\n        : socket_(io_context, boost::asio::ip::udp::endpoint(listen_address, 0))\n    {\n        boost::asio::ip::udp::endpoint sender_endpoint;\n        socket_.set_option(boost::asio::ip::udp::socket::reuse_address(true));\n        socket_.bind({listen_address, 30001});\n\n        boost::asio::ip::multicast::join_group join_group(multicast_address);\n        socket_.set_option(join_group);\n\n        do_receive();\n    }\n\nprivate:\n    void do_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(data_), sender_endpoint_,\n            [this](boost::system::error_code ec, std::size_t length) {\n                if (!ec) {\n                    std::cout.write(data_.data(), length);\n                    std::cout << std::endl;\n                    do_receive();\n                }\n            });\n    }\n\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint sender_endpoint_;\n    std::array<char, 1024> data_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <array>\n\nclass receiver {\npublic:\n    receiver(boost::asio::io_context& io_context,\n             const boost::asio::ip::address& listen_address,\n             const boost::asio::ip::address& multicast_address)\n        : socket_(io_context, boost::asio::ip::udp::endpoint(listen_address, 0))\n    {\n        boost::asio::ip::udp::endpoint sender_endpoint;\n        socket_.set_option(boost::asio::ip::udp::socket::reuse_address(true));\n        socket_.bind({listen_address, 30001});\n\n        boost::asio::ip::multicast::join_group join_group(multicast_address);\n        socket_.set_option(join_group);\n\n        do_receive();\n    }\n\nprivate:\n    void do_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(data_), sender_endpoint_,\n            [this](boost::system::error_code ec, std::size_t length) {\n                if (!ec) {\n                    std::cout.write(data_.data(), length);\n                    std::cout << std::endl;\n                    do_receive();\n                }\n            });\n    }\n\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint sender_endpoint_;\n    std::array<char, 1024> data_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <array>\n\nclass receiver {\npublic:\n    receiver(boost::asio::io_context& io_context,\n             const boost::asio::ip::address& listen_address,\n             const boost::asio::ip::address& multicast_address)\n        : socket_(io_context, boost::asio::ip::udp::endpoint(listen_address, 0))\n    {\n        boost::asio::ip::udp::endpoint sender_endpoint;\n        socket_.set_option(boost::asio::ip::udp::socket::reuse_address(true));\n        socket_.bind({listen_address, 30001});\n\n        boost::asio::ip::multicast::join_group join_group(multicast_address);\n        socket_.set_option(join_group);\n\n        do_receive();\n    }\n\nprivate:\n    void do_receive()\n    {\n        socket_.async_receive_from(\n            boost::asio::buffer(data_), sender_endpoint_,\n            [this](boost::system::error_code ec, std::size_t length) {\n                if (!ec) {\n                    std::cout.write(data_.data(), length);\n                    std::cout << std::endl;\n                    do_receive();\n                }\n            });\n    }\n\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint sender_endpoint_;\n    std::array<char, 1024> data_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <array>\n\nclass receiver {\npublic:\n    receiver(boost::asio::io_context& io_context,\n             const boost::asio::ip::address& listen_address,\n             const boost::asio::ip::address& multicast_address)\n        : socket_(io_context, boost::asio::ip::udp::endpoint(listen_address, 0))\n    {\n        boost::asio::ip::udp::endpoint listen_endpoint = socket_.local_endpoint();\n        std::cout << \"Listening on port \" << listen_endpoint.port() << std::endl;\n\n        socket_.set_option(boost::asio::ip::udp::socket::reuse_address(true));\n        boost::asio::ip::multicast::join_group join_group(multicast_address);\n        socket_.set_option(join_group);\n\n        do_receive();\n    }\n\nprivate:\n    void do_receive()\n    {\n        socket_.async_receive_from(\n            boost::asio::buffer(data_), sender_endpoint_,\n            [this](boost::system::error_code ec, std::size_t bytes_recvd)\n            {\n                if (!ec && bytes_recvd > 0) {\n                    std::cout.write(data_.data(), bytes_recvd);\n                    std::cout << std::endl;\n                }\n\n                do_receive();\n            });\n    }\n\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint sender_endpoint_;\n    std::array<char, 1024> data_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <array>\n\nclass receiver {\npublic:\n    receiver(boost::asio::io_context& io_context,\n             const boost::asio::ip::address& listen_address,\n             const boost::asio::ip::address& multicast_address)\n        : socket_(io_context, boost::asio::ip::udp::endpoint(listen_address, 0))\n    {\n        boost::asio::ip::udp::endpoint sender_endpoint;\n        socket_.set_option(boost::asio::ip::udp::socket::reuse_address(true));\n        socket_.bind({listen_address, 30001});\n\n        boost::asio::ip::multicast::join_group join_group(multicast_address);\n        socket_.set_option(join_group);\n\n        do_receive();\n    }\n\nprivate:\n    void do_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(data_), sender_endpoint_,\n            [this](boost::system::error_code ec, std::size_t length) {\n                if (!ec) {\n                    std::cout.write(data_.data(), length);\n                    std::cout << std::endl;\n                    do_receive();\n                }\n            });\n    }\n\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint sender_endpoint_;\n    std::array<char, 1024> data_;\n};\n```"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 37,
    "Instruction": "Task Description: Implement a UDP client function using Boost.Asio that sends a request to a UDP server and receives a response.\n\nFunction Description: The function establishes a UDP connection to a specified host, sends a minimal request packet, waits for a response, and prints the received data to standard output. It uses Boost.Asio for asynchronous UDP operations.\n\nInput: \n- host: std::string - The hostname or IP address of the UDP server to connect to\n\nOutput: \n- None (void function), but prints the received data to standard output\n\nNote: The function uses a fixed service name \"daytime\" (port 13) for demonstration purposes. In a real application, this would typically be configurable. The function handles both IPv4 and UDP protocol operations.",
    "Canonical_solution": "#include <array>\n#include <boost/asio.hpp>\nusing boost::asio::ip::udp;\n\nvoid udp_client(const std::string& host)\n{\n    boost::asio::io_context io_context;\n\n    udp::resolver resolver(io_context);\n    udp::endpoint receiver_endpoint =\n      *resolver.resolve(udp::v4(), host, \"daytime\").begin();\n\n    udp::socket socket(io_context);\n    socket.open(udp::v4());\n\n    std::array<char, 1> send_buf  = {{ 0 }};\n    socket.send_to(boost::asio::buffer(send_buf), receiver_endpoint);\n\n    std::array<char, 128> recv_buf;\n    udp::endpoint sender_endpoint;\n    size_t len = socket.receive_from(\n        boost::asio::buffer(recv_buf), sender_endpoint);\n\n    std::cout.write(recv_buf.data(), len);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 153,
    "matched_results": [
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n\nvoid udp_client(const std::string& host) {\n    boost::asio::io_context io;\n    boost::asio::ip::udp::resolver resolver(io);\n    boost::asio::ip::udp::endpoint endpoint = *resolver.resolve(boost::asio::ip::udp::v4(), host, \"daytime\").begin();\n\n    boost::asio::ip::udp::socket socket(io);\n    socket.open(boost::asio::ip::udp::v4());\n\n    boost::asio::streambuf request;\n    std::ostream request_stream(&request);\n    request_stream << \"Hello\";\n\n    socket.send_to(request.data(), endpoint);\n\n    boost::array<char, 1024> buffer = {0};\n    boost::system::error_code error;\n    size_t length = socket.receive_from(boost::asio::buffer(buffer), endpoint, 0, error);\n\n    if (!error || error == boost::asio::error::message_size) {\n        std::cout.write(buffer.data(), length);\n        std::cout << std::endl;\n    } else {\n        std::cerr << \"Error: \" << error.message() << std::endl;\n    }\n}\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n\nvoid udp_client(const std::string& host) {\n    boost::asio::io_context io;\n    boost::asio::ip::udp::resolver resolver(io);\n    boost::asio::ip::udp::endpoint endpoint = *resolver.resolve(boost::asio::ip::udp::v4(), host, \"daytime\").begin();\n\n    boost::asio::ip::udp::socket socket(io);\n    socket.open(boost::asio::ip::udp::v4());\n\n    boost::asio::streambuf request;\n    std::ostream request_stream(&request);\n    request_stream << \"Hello\";\n\n    socket.send_to(request.data(), endpoint);\n\n    char response[1024];\n    boost::system::error_code error;\n    size_t length = socket.receive(boost::asio::buffer(response), 0, error);\n\n    if (!error || error == boost::asio::error::message_size) {\n        std::cout.write(response, length);\n        std::cout << std::endl;\n    } else {\n        std::cerr << \"Error: \" << error.message() << std::endl;\n    }\n}\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n\nvoid udp_client(const std::string& host) {\n    boost::asio::io_context io_context;\n    boost::asio::ip::udp::resolver resolver(io_context);\n    boost::asio::ip::udp::endpoint endpoint = *resolver.resolve(boost::asio::ip::udp::v4(), host, \"daytime\").begin();\n\n    boost::asio::ip::udp::socket socket(io_context);\n    socket.open(boost::asio::ip::udp::v4());\n\n    boost::asio::ip::udp::endpoint sender_endpoint;\n    char send_data[] = \"request\";\n    socket.send_to(boost::asio::buffer(send_data), endpoint);\n\n    char receive_data[1024];\n    size_t length = socket.receive_from(boost::asio::buffer(receive_data), sender_endpoint);\n    std::cout.write(receive_data, length);\n    std::cout << std::endl;\n}\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n\nvoid udp_client(const std::string& host) {\n    boost::asio::io_context io;\n    boost::asio::ip::udp::resolver resolver(io);\n    boost::asio::ip::udp::endpoint endpoint = *resolver.resolve(boost::asio::ip::udp::v4(), host, \"daytime\").begin();\n    boost::asio::ip::udp::socket socket(io);\n    socket.open(boost::asio::ip::udp::v4());\n\n    boost::system::error_code ignored_error;\n\n    socket.send_to(boost::asio::buffer(\"\"), endpoint, 0, ignored_error);\n\n    char data[1024];\n    boost::asio::ip::udp::endpoint sender_endpoint;\n    size_t length = socket.receive_from(boost::asio::buffer(data), sender_endpoint);\n\n    std::cout.write(data, length);\n}\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n\nvoid udp_client(const std::string& host) {\n    boost::asio::io_context io_context;\n    boost::asio::ip::udp::resolver resolver(io_context);\n    boost::asio::ip::udp::endpoint endpoint = *resolver.resolve(boost::asio::ip::udp::v4(), host, \"daytime\").begin();\n\n    boost::asio::ip::udp::socket socket(io_context);\n    socket.open(boost::asio::ip::udp::v4());\n\n    boost::asio::ip::udp::endpoint sender_endpoint;\n    std::array<char, 1> send_data{};\n    socket.send_to(boost::asio::buffer(send_data), endpoint);\n\n    char receive_data[1024];\n    size_t length = socket.receive_from(boost::asio::buffer(receive_data), sender_endpoint);\n    std::cout.write(receive_data, length);\n}\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n\nvoid udp_client(const std::string& host) {\n    boost::asio::io_context io;\n    boost::asio::ip::udp::resolver resolver(io);\n    boost::asio::ip::udp::endpoint endpoint = *resolver.resolve(boost::asio::ip::udp::v4(), host, \"daytime\").begin();\n    boost::asio::ip::udp::socket socket(io);\n    socket.open(boost::asio::ip::udp::v4());\n\n    boost::system::error_code ignored_error;\n\n    // Send a minimal request (empty message for demonstration)\n    socket.send_to(boost::asio::buffer(\"\"), endpoint, 0, ignored_error);\n\n    char data[1024];\n    boost::asio::ip::udp::endpoint sender_endpoint;\n    size_t length = socket.receive_from(boost::asio::buffer(data), sender_endpoint);\n\n    std::cout.write(data, length);\n    std::cout << std::endl;\n}\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n\nvoid udp_client(const std::string& host) {\n    boost::asio::io_context io;\n    boost::asio::ip::udp::resolver resolver(io);\n    boost::asio::ip::udp::endpoint endpoint = *resolver.resolve(boost::asio::ip::udp::v4(), host, \"daytime\").begin();\n\n    boost::asio::ip::udp::socket socket(io);\n    socket.open(boost::asio::ip::udp::v4());\n\n    boost::system::error_code ignored_error;\n    socket.send_to(boost::asio::buffer(\"\"), endpoint);\n\n    char data[1024];\n    boost::asio::ip::udp::endpoint sender_endpoint;\n    size_t length = socket.receive_from(boost::asio::buffer(data), sender_endpoint, 0, ignored_error);\n\n    if (!ignored_error) {\n        std::cout.write(data, length);\n        std::cout << std::endl;\n    }\n}\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n\nvoid udp_client(const std::string& host) {\n    boost::asio::io_context io;\n    boost::asio::ip::udp::resolver resolver(io);\n    boost::asio::ip::udp::endpoint endpoint = *resolver.resolve(boost::asio::ip::udp::v4(), host, \"daytime\").begin();\n\n    boost::asio::ip::udp::socket socket(io);\n    socket.open(boost::asio::ip::udp::v4());\n\n    boost::system::error_code ignored_error;\n    socket.send_to(boost::asio::buffer(\"\"), endpoint, 0, ignored_error);\n\n    char data[1024];\n    boost::asio::ip::udp::endpoint sender_endpoint;\n    size_t length = socket.receive_from(boost::asio::buffer(data), sender_endpoint);\n\n    std::cout.write(data, length);\n}\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n\nvoid udp_client(const std::string& host) {\n    boost::asio::io_context io;\n    boost::asio::ip::udp::resolver resolver(io);\n    boost::asio::ip::udp::endpoint endpoint = *resolver.resolve(boost::asio::ip::udp::v4(), host, \"daytime\").begin();\n\n    boost::asio::ip::udp::socket socket(io);\n    socket.open(boost::asio::ip::udp::v4());\n\n    boost::asio::ip::udp::endpoint sender_endpoint;\n    char send_data[] = \"request\";\n    socket.send_to(boost::asio::buffer(send_data), endpoint);\n\n    char receive_data[1024];\n    size_t length = socket.receive_from(boost::asio::buffer(receive_data), sender_endpoint);\n    std::cout.write(receive_data, length);\n}\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n\nvoid udp_client(const std::string& host) {\n    boost::asio::io_context io_context;\n    boost::asio::ip::udp::resolver resolver(io_context);\n    boost::asio::ip::udp::endpoint endpoint = *resolver.resolve(boost::asio::ip::udp::v4(), host, \"daytime\").begin();\n\n    boost::asio::ip::udp::socket socket(io_context);\n    socket.open(boost::asio::ip::udp::v4());\n\n    boost::asio::ip::udp::endpoint sender_endpoint;\n    char send_data[] = \"request\";\n    socket.send_to(boost::asio::buffer(send_data), endpoint);\n\n    char receive_data[1024];\n    size_t length = socket.receive_from(boost::asio::buffer(receive_data), sender_endpoint);\n\n    std::cout.write(receive_data, length);\n    std::cout << std::endl;\n}\n```"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 38,
    "Instruction": "Task Description: Implement a UDP-based client-server communication system using Boost.Asio in C++ that demonstrates asynchronous sending and receiving of datagrams.\n\nClass Description: The `udp_communicator` class provides asynchronous UDP communication capabilities for both sending and receiving datagrams. It manages socket operations, IO context, and buffers for network communication.\n\nAttributes:\n- io_context_: boost::asio::io_context - Manages asynchronous operations for Boost.Asio\n- socket_: boost::asio::ip::udp::socket - Represents the UDP socket for communication\n- receiver_endpoint_: boost::asio::ip::udp::endpoint - Stores the endpoint information for receiving data\n- sender_endpoint_: boost::asio::ip::udp::endpoint - Stores the endpoint information of the sender\n- receive_buffer_: std::array<char, 1024> - Buffer for storing received data\n- send_buffer_: std::string - Buffer for storing data to be sent\n\nMethods:\n- constructor(io_context, port) -> void - Initializes the UDP socket and binds it to the specified port\n- start_receive() -> void - Begins asynchronous reception of UDP datagrams\n- handle_receive(error_code, bytes_transferred) -> void - Callback for handling received data\n- send_to(message, endpoint) -> void - Asynchronously sends a message to the specified endpoint\n- handle_send(error_code, bytes_transferred) -> void - Callback for handling send completion\n- get_socket() -> boost::asio::ip::udp::socket& - Returns a reference to the UDP socket\n- get_io_context() -> boost::asio::io_context& - Returns a reference to the IO context",
    "Canonical_solution": "#include <boost/asio.hpp>\n#include <istream>\n#include <ostream>\n#include \"icmp_header.hpp\"\n#include \"ipv4_header.hpp\"\n\nusing boost::asio::ip::icmp;\nusing boost::asio::steady_timer;\nnamespace chrono = boost::asio::chrono;\n\nclass pinger\n{\npublic:\n  pinger(boost::asio::io_context& io_context, const char* destination)\n    : resolver_(io_context), socket_(io_context, icmp::v4()),\n      timer_(io_context), sequence_number_(0), num_replies_(0)\n  {\n    destination_ = *resolver_.resolve(icmp::v4(), destination, \"\").begin();\n\n    start_send();\n    start_receive();\n  }\n\nprivate:\n  void start_send()\n  {\n    std::string body(\"\\\"Hello!\\\" from Asio ping.\");\n\n    icmp_header echo_request;\n    echo_request.type(icmp_header::echo_request);\n    echo_request.code(0);\n    echo_request.identifier(get_identifier());\n    echo_request.sequence_number(++sequence_number_);\n    compute_checksum(echo_request, body.begin(), body.end());\n\n    boost::asio::streambuf request_buffer;\n    std::ostream os(&request_buffer);\n    os << echo_request << body;\n\n    time_sent_ = steady_timer::clock_type::now();\n    socket_.send_to(request_buffer.data(), destination_);\n\n    num_replies_ = 0;\n    timer_.expires_at(time_sent_ + chrono::seconds(5));\n    timer_.async_wait(std::bind(&pinger::handle_timeout, this));\n  }\n\n  void handle_timeout()\n  {\n    if (num_replies_ == 0)\n      std::cout << \"Request timed out\" << std::endl;\n\n    timer_.expires_at(time_sent_ + chrono::seconds(1));\n    timer_.async_wait(std::bind(&pinger::start_send, this));\n  }\n\n  void start_receive()\n  {\n    reply_buffer_.consume(reply_buffer_.size());\n\n    socket_.async_receive(reply_buffer_.prepare(65536),\n        std::bind(&pinger::handle_receive, this, std::placeholders::_2));\n  }\n\n  void handle_receive(std::size_t length)\n  {\n    reply_buffer_.commit(length);\n\n    std::istream is(&reply_buffer_);\n    ipv4_header ipv4_hdr;\n    icmp_header icmp_hdr;\n    is >> ipv4_hdr >> icmp_hdr;\n\n    if (is && icmp_hdr.type() == icmp_header::echo_reply\n          && icmp_hdr.identifier() == get_identifier()\n          && icmp_hdr.sequence_number() == sequence_number_)\n    {\n      if (num_replies_++ == 0)\n        timer_.cancel();\n\n      chrono::steady_clock::time_point now = chrono::steady_clock::now();\n      chrono::steady_clock::duration elapsed = now - time_sent_;\n      std::cout << length - ipv4_hdr.header_length()\n        << \" bytes from \" << ipv4_hdr.source_address()\n        << \": icmp_seq=\" << icmp_hdr.sequence_number()\n        << \", ttl=\" << ipv4_hdr.time_to_live()\n        << \", time=\"\n        << chrono::duration_cast<chrono::milliseconds>(elapsed).count()\n        << std::endl;\n    }\n\n    start_receive();\n  }\n\n  static unsigned short get_identifier()\n  {\n#if defined(BOOST_ASIO_WINDOWS)\n    return static_cast<unsigned short>(::GetCurrentProcessId());\n#else\n    return static_cast<unsigned short>(::getpid());\n#endif\n  }\n\n  icmp::resolver resolver_;\n  icmp::endpoint destination_;\n  icmp::socket socket_;\n  steady_timer timer_;\n  unsigned short sequence_number_;\n  chrono::steady_clock::time_point time_sent_;\n  boost::asio::streambuf reply_buffer_;\n  std::size_t num_replies_;\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 153,
    "matched_results": [
      "```cpp\n#include <boost/asio.hpp>\n#include <array>\n#include <string>\n\nclass udp_communicator {\npublic:\n    using error_code = boost::system::error_code;\n\n    udp_communicator(boost::asio::io_context& io_context, unsigned short port)\n        : io_context_(io_context), socket_(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), port)) {\n        start_receive();\n    }\n\n    void start_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(receive_buffer_), receiver_endpoint_,\n            [this](const error_code& ec, std::size_t bytes_transferred) {\n                handle_receive(ec, bytes_transferred);\n            });\n    }\n\n    void handle_receive(const error_code& ec, std::size_t bytes_transferred) {\n        if (!ec && bytes_transferred > 0) {\n            std::string message(receive_buffer_.data(), bytes_transferred);\n            // Process the received message here\n            sender_endpoint_ = receiver_endpoint_;\n            send_to(message, sender_endpoint_);\n        }\n        start_receive();\n    }\n\n    void send_to(const std::string& message, const boost::asio::ip::udp::endpoint& endpoint) {\n        send_buffer_ = message;\n        socket_.async_send_to(\n            boost::asio::buffer(send_buffer_), endpoint,\n            [this](const error_code& ec, std::size_t /*bytes_transferred*/) {\n                handle_send(ec, 0);\n            });\n    }\n\n    void handle_send(const error_code& /*ec*/, std::size_t /*bytes_transferred*/) {\n        // Handle send completion if needed\n    }\n\n    boost::asio::ip::udp::socket& get_socket() {\n        return socket_;\n    }\n\n    boost::asio::io_context& get_io_context() {\n        return io_context_;\n    }\n\nprivate:\n    boost::asio::io_context& io_context_;\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint receiver_endpoint_;\n    boost::asio::ip::udp::endpoint sender_endpoint_;\n    std::array<char, 1024> receive_buffer_;\n    std::string send_buffer_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <array>\n#include <string>\n\nclass udp_communicator {\npublic:\n    using error_code = boost::system::error_code;\n\n    udp_communicator(boost::asio::io_context& io, unsigned short port)\n        : io_context_(io),\n          socket_(io, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), port)),\n          receiver_endpoint_(boost::asio::ip::udp::v4(), 0) {\n        start_receive();\n    }\n\n    void start_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(receive_buffer_), receiver_endpoint_,\n            [this](const error_code& ec, std::size_t bytes_transferred) {\n                handle_receive(ec, bytes_transferred);\n            });\n    }\n\n    void send_to(const std::string& message, const boost::asio::ip::udp::endpoint& endpoint) {\n        send_buffer_ = message;\n        socket_.async_send_to(\n            boost::asio::buffer(send_buffer_), endpoint,\n            [this](const error_code& ec, std::size_t /*bytes_transferred*/) {\n                handle_send(ec, 0);\n            });\n    }\n\n    boost::asio::ip::udp::socket& get_socket() {\n        return socket_;\n    }\n\n    boost::asio::io_context& get_io_context() {\n        return io_context_;\n    }\n\nprivate:\n    void handle_receive(const error_code& ec, std::size_t bytes_transferred) {\n        if (!ec && bytes_transferred > 0) {\n            // Process received data here\n            std::cout.write(receive_buffer_.data(), bytes_transferred);\n            std::cout << std::endl;\n        }\n        start_receive();\n    }\n\n    void handle_send(const error_code& ec, std::size_t /*bytes_transferred*/) {\n        if (ec) {\n            // Handle send error\n        }\n    }\n\n    boost::asio::io_context& io_context_;\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint receiver_endpoint_;\n    boost::asio::ip::udp::endpoint sender_endpoint_;\n    std::array<char, 1024> receive_buffer_;\n    std::string send_buffer_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <array>\n#include <string>\n\nclass udp_communicator {\npublic:\n    using error_code = boost::system::error_code;\n\n    udp_communicator(boost::asio::io_context& io, unsigned short port)\n        : io_context_(io),\n          socket_(io, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), port)),\n          receiver_endpoint_(boost::asio::ip::udp::v4(), 0) {\n        start_receive();\n    }\n\n    void start_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(receive_buffer_), receiver_endpoint_,\n            [this](const error_code& ec, std::size_t bytes_transferred) {\n                handle_receive(ec, bytes_transferred);\n            });\n    }\n\n    void send_to(const std::string& message, const boost::asio::ip::udp::endpoint& endpoint) {\n        send_buffer_ = message;\n        socket_.async_send_to(\n            boost::asio::buffer(send_buffer_), endpoint,\n            [this](const error_code& ec, std::size_t /*bytes_transferred*/) {\n                handle_send(ec, 0);\n            });\n    }\n\n    boost::asio::ip::udp::socket& get_socket() {\n        return socket_;\n    }\n\n    boost::asio::io_context& get_io_context() {\n        return io_context_;\n    }\n\nprivate:\n    void handle_receive(const error_code& ec, std::size_t bytes_transferred) {\n        if (!ec && bytes_transferred > 0) {\n            // Process received data here\n            std::cout.write(receive_buffer_.data(), bytes_transferred);\n            std::cout << std::endl;\n        }\n        start_receive();\n    }\n\n    void handle_send(const error_code& ec, std::size_t /*bytes_transferred*/) {\n        if (ec) {\n            // Handle send error\n        }\n    }\n\n    boost::asio::io_context& io_context_;\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint receiver_endpoint_;\n    boost::asio::ip::udp::endpoint sender_endpoint_;\n    std::array<char, 1024> receive_buffer_;\n    std::string send_buffer_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <array>\n#include <string>\n\nclass udp_communicator {\npublic:\n    udp_communicator(boost::asio::io_context& io_context, unsigned short port)\n        : io_context_(io_context), socket_(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), port)) {\n        start_receive();\n    }\n\n    void start_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(receive_buffer_), receiver_endpoint_,\n            [this](const boost::system::error_code& error, std::size_t bytes_transferred) {\n                handle_receive(error, bytes_transferred);\n            });\n    }\n\n    void handle_receive(const boost::system::error_code& error, std::size_t bytes_transferred) {\n        if (!error && bytes_transferred > 0) {\n            std::string message(receive_buffer_.data(), bytes_transferred);\n            // Process the received message here\n            start_receive();\n        }\n    }\n\n    void send_to(const std::string& message, const boost::asio::ip::udp::endpoint& endpoint) {\n        send_buffer_ = message;\n        socket_.async_send_to(\n            boost::asio::buffer(send_buffer_), endpoint,\n            [this](const boost::system::error_code& error, std::size_t /*bytes_transferred*/) {\n                handle_send(error, 0);\n            });\n    }\n\n    void handle_send(const boost::system::error_code& error, std::size_t /*bytes_transferred*/) {\n        if (error) {\n            // Handle send error\n        }\n    }\n\n    boost::asio::ip::udp::socket& get_socket() {\n        return socket_;\n    }\n\n    boost::asio::io_context& get_io_context() {\n        return io_context_;\n    }\n\nprivate:\n    boost::asio::io_context& io_context_;\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint receiver_endpoint_;\n    boost::asio::ip::udp::endpoint sender_endpoint_;\n    std::array<char, 1024> receive_buffer_;\n    std::string send_buffer_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <array>\n#include <string>\n\nclass udp_communicator {\npublic:\n    udp_communicator(boost::asio::io_context& io, short port)\n        : io_context_(io),\n          socket_(io, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), port)),\n          receiver_endpoint_(boost::asio::ip::udp::v4(), 0) {\n        start_receive();\n    }\n\n    void start_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(receive_buffer_), receiver_endpoint_,\n            [this](const boost::system::error_code& error, std::size_t bytes_transferred) {\n                handle_receive(error, bytes_transferred);\n            });\n    }\n\n    void handle_receive(const boost::system::error_code& error, std::size_t bytes_transferred) {\n        if (!error && bytes_transferred > 0) {\n            std::string message(receive_buffer_.data(), bytes_transferred);\n            // Process received message here\n            std::cout << \"Received: \" << message << std::endl;\n        }\n        start_receive();\n    }\n\n    void send_to(const std::string& message, const boost::asio::ip::udp::endpoint& endpoint) {\n        send_buffer_ = message;\n        socket_.async_send_to(\n            boost::asio::buffer(send_buffer_), endpoint,\n            [this](const boost::system::error_code& error, std::size_t /*bytes_transferred*/) {\n                handle_send(error);\n            });\n    }\n\n    void handle_send(const boost::system::error_code& error) {\n        if (error) {\n            std::cerr << \"Send error: \" << error.message() << std::endl;\n        }\n    }\n\n    boost::asio::ip::udp::socket& get_socket() {\n        return socket_;\n    }\n\n    boost::asio::io_context& get_io_context() {\n        return io_context_;\n    }\n\nprivate:\n    boost::asio::io_context& io_context_;\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint receiver_endpoint_;\n    boost::asio::ip::udp::endpoint sender_endpoint_;\n    std::array<char, 1024> receive_buffer_;\n    std::string send_buffer_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <array>\n#include <string>\n\nclass udp_communicator {\npublic:\n    explicit udp_communicator(boost::asio::io_context& io, unsigned short port)\n        : io_context_(io),\n          socket_(io, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), port)),\n          receiver_endpoint_(boost::asio::ip::udp::endpoint()) {\n        start_receive();\n    }\n\n    void start_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(receive_buffer_), receiver_endpoint_,\n            [this](const boost::system::error_code& error, std::size_t bytes_transferred) {\n                handle_receive(error, bytes_transferred);\n            });\n    }\n\n    void send_to(const std::string& message, const boost::asio::ip::udp::endpoint& endpoint) {\n        sender_endpoint_ = endpoint;\n        boost::asio::async_write(socket_, boost::asio::buffer(message),\n            [this](const boost::system::error_code& error, std::size_t /*bytes_transferred*/) {\n                handle_send(error, 0);\n            });\n    }\n\n    boost::asio::ip::udp::socket& get_socket() {\n        return socket_;\n    }\n\n    boost::asio::io_context& get_io_context() {\n        return io_context_;\n    }\n\nprivate:\n    void handle_receive(const boost::system::error_code& error, std::size_t bytes_transferred) {\n        if (!error && bytes_transferred > 0) {\n            // Process received data here\n            start_receive();\n        }\n    }\n\n    void handle_send(const boost::system::error_code& error, std::size_t /*bytes_transferred*/) {\n        if (error) {\n            // Handle send error\n        }\n    }\n\n    boost::asio::io_context& io_context_;\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint receiver_endpoint_;\n    boost::asio::ip::udp::endpoint sender_endpoint_;\n    std::array<char, 1024> receive_buffer_;\n    std::string send_buffer_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <array>\n#include <string>\n\nclass udp_communicator {\npublic:\n    udp_communicator(boost::asio::io_context& io_context, unsigned short port)\n        : io_context_(io_context),\n          socket_(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), port)),\n          receiver_endpoint_(boost::asio::ip::udp::v4(), 0) {\n        start_receive();\n    }\n\n    void start_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(receive_buffer_), receiver_endpoint_,\n            [this](const boost::system::error_code& error, std::size_t bytes_transferred) {\n                handle_receive(error, bytes_transferred);\n            });\n    }\n\n    void handle_receive(const boost::system::error_code& error, std::size_t bytes_transferred) {\n        if (!error && bytes_transferred > 0) {\n            std::string received_data(receive_buffer_.data(), bytes_transferred);\n            // Process the received data here\n            start_receive();\n        }\n    }\n\n    void send_to(const std::string& message, const boost::asio::ip::udp::endpoint& endpoint) {\n        send_buffer_ = message;\n        socket_.async_send_to(\n            boost::asio::buffer(send_buffer_), endpoint,\n            [this](const boost::system::error_code& error, std::size_t /*bytes_transferred*/) {\n                handle_send(error, 0);\n            });\n    }\n\n    void handle_send(const boost::system::error_code& error, std::size_t /*bytes_transferred*/) {\n        if (error) {\n            // Handle send error\n        }\n    }\n\n    boost::asio::ip::udp::socket& get_socket() {\n        return socket_;\n    }\n\n    boost::asio::io_context& get_io_context() {\n        return io_context_;\n    }\n\nprivate:\n    boost::asio::io_context& io_context_;\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint receiver_endpoint_;\n    boost::asio::ip::udp::endpoint sender_endpoint_;\n    std::array<char, 1024> receive_buffer_;\n    std::string send_buffer_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <array>\n#include <string>\n\nclass udp_communicator {\npublic:\n    explicit udp_communicator(boost::asio::io_context& io, unsigned short port)\n        : io_context_(io),\n          socket_(io, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), port)),\n          receiver_endpoint_(boost::asio::ip::udp::endpoint()) {\n        start_receive();\n    }\n\n    void start_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(receive_buffer_), receiver_endpoint_,\n            [this](const boost::system::error_code& error, std::size_t bytes_transferred) {\n                handle_receive(error, bytes_transferred);\n            });\n    }\n\n    void send_to(const std::string& message, const boost::asio::ip::udp::endpoint& endpoint) {\n        sender_endpoint_ = endpoint;\n        boost::asio::async_write(socket_, boost::asio::buffer(message),\n            [this](const boost::system::error_code& error, std::size_t /*bytes_transferred*/) {\n                handle_send(error, 0);\n            });\n    }\n\n    boost::asio::ip::udp::socket& get_socket() {\n        return socket_;\n    }\n\n    boost::asio::io_context& get_io_context() {\n        return io_context_;\n    }\n\nprivate:\n    void handle_receive(const boost::system::error_code& error, std::size_t bytes_transferred) {\n        if (!error && bytes_transferred > 0) {\n            // Process received data here\n            receive_buffer_[bytes_transferred] = '\\0';\n            std::cout << \"Received: \" << receive_buffer_.data() << std::endl;\n\n            // Continue receiving\n            start_receive();\n        }\n    }\n\n    void handle_send(const boost::system::error_code& error, std::size_t /*bytes_transferred*/) {\n        if (error) {\n            std::cerr << \"Send error: \" << error.message() << std::endl;\n        }\n    }\n\n    boost::asio::io_context& io_context_;\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint receiver_endpoint_;\n    boost::asio::ip::udp::endpoint sender_endpoint_;\n    std::array<char, 1024> receive_buffer_;\n    std::string send_buffer_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <array>\n#include <string>\n\nclass udp_communicator {\npublic:\n    udp_communicator(boost::asio::io_context& io_context, unsigned short port)\n        : io_context_(io_context),\n          socket_(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), port)),\n          receiver_endpoint_(boost::asio::ip::udp::v4(), 0) {\n        start_receive();\n    }\n\n    void start_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(receive_buffer_), receiver_endpoint_,\n            [this](const boost::system::error_code& error, std::size_t bytes_transferred) {\n                handle_receive(error, bytes_transferred);\n            });\n    }\n\n    void handle_receive(const boost::system::error_code& error, std::size_t bytes_transferred) {\n        if (!error && bytes_transferred > 0) {\n            std::string received_data(receive_buffer_.data(), bytes_transferred);\n            // Process the received data here\n            std::cout << \"Received: \" << received_data << std::endl;\n        }\n        start_receive();\n    }\n\n    void send_to(const std::string& message, const boost::asio::ip::udp::endpoint& endpoint) {\n        send_buffer_ = message;\n        socket_.async_send_to(\n            boost::asio::buffer(send_buffer_), endpoint,\n            [this](const boost::system::error_code& error, std::size_t /*bytes_transferred*/) {\n                handle_send(error, 0);\n            });\n    }\n\n    void handle_send(const boost::system::error_code& error, std::size_t /*bytes_transferred*/) {\n        if (error) {\n            std::cerr << \"Send error: \" << error.message() << std::endl;\n        }\n    }\n\n    boost::asio::ip::udp::socket& get_socket() {\n        return socket_;\n    }\n\n    boost::asio::io_context& get_io_context() {\n        return io_context_;\n    }\n\nprivate:\n    boost::asio::io_context& io_context_;\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint receiver_endpoint_;\n    boost::asio::ip::udp::endpoint sender_endpoint_;\n    std::array<char, 1024> receive_buffer_;\n    std::string send_buffer_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <array>\n#include <string>\n\nclass udp_communicator {\npublic:\n    udp_communicator(boost::asio::io_context& io, short port)\n        : io_context_(io),\n          socket_(io, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), port)),\n          receiver_endpoint_(boost::asio::ip::udp::v4(), 0) {\n        start_receive();\n    }\n\n    void start_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(receive_buffer_), receiver_endpoint_,\n            [this](const boost::system::error_code& error, std::size_t bytes_transferred) {\n                handle_receive(error, bytes_transferred);\n            });\n    }\n\n    void handle_receive(const boost::system::error_code& error, std::size_t bytes_transferred) {\n        if (!error && bytes_transferred > 0) {\n            std::string received_data(receive_buffer_.data(), bytes_transferred);\n            // Process the received data here\n            start_receive();\n        }\n    }\n\n    void send_to(const std::string& message, const boost::asio::ip::udp::endpoint& endpoint) {\n        send_buffer_ = message;\n        socket_.async_send_to(\n            boost::asio::buffer(send_buffer_), endpoint,\n            [this](const boost::system::error_code& error, std::size_t /*bytes_transferred*/) {\n                handle_send(error, 0);\n            });\n    }\n\n    void handle_send(const boost::system::error_code& error, std::size_t /*bytes_transferred*/) {\n        if (error) {\n            // Handle send error\n        }\n    }\n\n    boost::asio::ip::udp::socket& get_socket() {\n        return socket_;\n    }\n\n    boost::asio::io_context& get_io_context() {\n        return io_context_;\n    }\n\nprivate:\n    boost::asio::io_context& io_context_;\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint receiver_endpoint_;\n    boost::asio::ip::udp::endpoint sender_endpoint_;\n    std::array<char, 1024> receive_buffer_;\n    std::string send_buffer_;\n};\n```"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 39,
    "Instruction": "Task Description: Implement a server class that handles both TCP and UDP communications using Boost.Asio, managing client subscriptions and broadcasting data frames to subscribed clients.\n\nClass Description: The `server` class manages network communications using both TCP and UDP protocols. It accepts TCP connections for control messages, maintains a set of subscribed UDP endpoints, and periodically broadcasts data frames to all subscribed clients via UDP.\n\nAttributes:\n- acceptor_: [tcp::acceptor] - Handles incoming TCP connections\n- timer_: [boost::asio::steady_timer] - Manages periodic operations\n- udp_socket_: [udp::socket] - Handles UDP communications\n- next_frame_number_: [unsigned long] - Tracks the sequence number for frames\n- subscribers_: [std::set<udp::endpoint>] - Stores subscribed client endpoints\n\nMethods:\n- server([boost::asio::io_context&] io_context, [unsigned short] port) -> [void] - Constructor that initializes the server with IO context and port\n- handle_accept([const boost::system::error_code&] ec, [tcp_socket_ptr] socket) -> [void] - Handles new TCP connection acceptances\n- handle_control_request([const boost::system::error_code&] ec, [tcp_socket_ptr] socket, [control_request_ptr] request) -> [void] - Processes control requests from clients\n- handle_control_request_timer([tcp_socket_ptr] socket, [control_request_ptr] request, [timer_ptr] delay_timer) -> [void] - Handles delayed processing of control requests\n- handle_timer() -> [void] - Periodically broadcasts data frames to subscribed clients",
    "Canonical_solution": "#include <boost/asio.hpp>\n#include <set>\n#include <memory>\n#include \"protocol.hpp\"\n\nusing boost::asio::ip::tcp;\nusing boost::asio::ip::udp;\n\ntypedef std::shared_ptr<tcp::socket> tcp_socket_ptr;\ntypedef std::shared_ptr<boost::asio::steady_timer> timer_ptr;\ntypedef std::shared_ptr<control_request> control_request_ptr;\n\nclass server\n{\npublic:\n  server(boost::asio::io_context& io_context, unsigned short port)\n    : acceptor_(io_context, tcp::endpoint(tcp::v4(), port)),\n      timer_(io_context),\n      udp_socket_(io_context, udp::endpoint(udp::v4(), 0)),\n      next_frame_number_(1)\n  {\n    tcp_socket_ptr new_socket(new tcp::socket(acceptor_.get_executor()));\n    acceptor_.async_accept(*new_socket,\n        std::bind(&server::handle_accept, this,\n          boost::asio::placeholders::error, new_socket));\n\n    timer_.expires_after(boost::asio::chrono::milliseconds(100));\n    timer_.async_wait(std::bind(&server::handle_timer, this));\n  }\n\n  void handle_accept(const boost::system::error_code& ec, tcp_socket_ptr socket)\n  {\n    if (!ec)\n    {\n      control_request_ptr request(new control_request);\n      boost::asio::async_read(*socket, request->to_buffers(),\n          std::bind(&server::handle_control_request, this,\n            boost::asio::placeholders::error, socket, request));\n    }\n\n    tcp_socket_ptr new_socket(new tcp::socket(acceptor_.get_executor()));\n    acceptor_.async_accept(*new_socket,\n        std::bind(&server::handle_accept, this,\n          boost::asio::placeholders::error, new_socket));\n  }\n\n  void handle_control_request(const boost::system::error_code& ec,\n      tcp_socket_ptr socket, control_request_ptr request)\n  {\n    if (!ec)\n    {\n      timer_ptr delay_timer(\n          new boost::asio::steady_timer(acceptor_.get_executor()));\n      delay_timer->expires_after(boost::asio::chrono::seconds(2));\n      delay_timer->async_wait(\n          std::bind(&server::handle_control_request_timer, this,\n            socket, request, delay_timer));\n    }\n  }\n\n  void handle_control_request_timer(tcp_socket_ptr socket,\n      control_request_ptr request, timer_ptr /*delay_timer*/)\n  {\n    boost::system::error_code ec;\n    tcp::endpoint remote_endpoint = socket->remote_endpoint(ec);\n    if (!ec)\n    {\n      if (unsigned short old_port = request->old_port())\n      {\n        udp::endpoint old_endpoint(remote_endpoint.address(), old_port);\n        subscribers_.erase(old_endpoint);\n      }\n\n      if (unsigned short new_port = request->new_port())\n      {\n        udp::endpoint new_endpoint(remote_endpoint.address(), new_port);\n        subscribers_.insert(new_endpoint);\n      }\n    }\n\n    boost::asio::async_read(*socket, request->to_buffers(),\n        std::bind(&server::handle_control_request, this,\n          boost::asio::placeholders::error, socket, request));\n  }\n\n  void handle_timer()\n  {\n    double x = next_frame_number_ * 0.2;\n    double y = std::sin(x);\n    int char_index = static_cast<int>((y + 1.0) * (frame::payload_size / 2));\n    std::string payload;\n    for (int i = 0; i < frame::payload_size; ++i)\n      payload += (i == char_index ? '*' : '.');\n\n    frame f(next_frame_number_++, payload);\n\n    std::set<udp::endpoint>::iterator j;\n    for (j = subscribers_.begin(); j != subscribers_.end(); ++j)\n    {\n      boost::system::error_code ec;\n      udp_socket_.send_to(f.to_buffers(), *j, 0, ec);\n    }\n\n    timer_.expires_after(boost::asio::chrono::milliseconds(100));\n    timer_.async_wait(std::bind(&server::handle_timer, this));\n  }\n\nprivate:\n  tcp::acceptor acceptor_;\n  boost::asio::steady_timer timer_;\n  udp::socket udp_socket_;\n  unsigned long next_frame_number_;\n  std::set<udp::endpoint> subscribers_;\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 153,
    "matched_results": [
      "```cpp\n#include <boost/asio.hpp>\n#include <set>\n#include <memory>\n#include <chrono>\n\nnamespace asio = boost::asio;\nusing tcp = asio::ip::tcp;\nusing udp = asio::ip::udp;\nusing tcp_socket_ptr = std::shared_ptr<tcp::socket>;\nusing control_request_ptr = std::shared_ptr<std::string>;\nusing timer_ptr = std::shared_ptr<asio::steady_timer>;\n\nclass server {\npublic:\n    server(asio::io_context& io_context, unsigned short port)\n        : acceptor_(io_context, tcp::endpoint(tcp::v4(), port)),\n          timer_(io_context),\n          udp_socket_(io_context, udp::endpoint(udp::v4(), port)),\n          next_frame_number_(0) {\n        start_accept();\n        start_timer();\n    }\n\nprivate:\n    void start_accept() {\n        auto socket = std::make_shared<tcp::socket>(acceptor_.get_executor().context());\n        acceptor_.async_accept(*socket,\n            [this, socket](const boost::system::error_code& ec) {\n                handle_accept(ec, socket);\n            });\n    }\n\n    void handle_accept(const boost::system::error_code& ec, tcp_socket_ptr socket) {\n        if (!ec) {\n            char buffer[1024];\n            auto request = std::make_shared<std::string>();\n            *request = \"\";\n            socket->async_read_some(asio::buffer(buffer),\n                [this, socket, request](const boost::system::error_code& ec, std::size_t length) {\n                    handle_control_request(ec, socket, request);\n                });\n        }\n        start_accept();\n    }\n\n    void handle_control_request(const boost::system::error_code& ec, tcp_socket_ptr socket, control_request_ptr request) {\n        if (!ec) {\n            char buffer[1024];\n            socket->read_some(asio::buffer(buffer), ec);\n            if (!ec) {\n                request->append(buffer);\n                auto delay_timer = std::make_shared<asio::steady_timer>(socket->get_executor().context());\n                delay_timer->expires_after(std::chrono::seconds(1));\n                delay_timer->async_wait([this, socket, request, delay_timer](const boost::system::error_code&) {\n                    handle_control_request_timer(socket, request, delay_timer);\n                });\n            }\n        }\n    }\n\n    void handle_control_request_timer(tcp_socket_ptr socket, control_request_ptr request, timer_ptr delay_timer) {\n        if (*request == \"subscribe\") {\n            udp::endpoint endpoint;\n            socket->remote_endpoint(endpoint);\n            subscribers_.insert(endpoint);\n        }\n    }\n\n    void start_timer() {\n        timer_.expires_after(std::chrono::seconds(5));\n        timer_.async_wait([this](const boost::system::error_code&) {\n            handle_timer();\n        });\n    }\n\n    void handle_timer() {\n        for (auto& endpoint : subscribers_) {\n            std::ostringstream oss;\n            oss << \"Frame: \" << next_frame_number_++;\n            std::string message = oss.str();\n            udp_socket_.send_to(asio::buffer(message), endpoint);\n        }\n        start_timer();\n    }\n\n    tcp::acceptor acceptor_;\n    asio::steady_timer timer_;\n    udp::socket udp_socket_;\n    unsigned long next_frame_number_;\n    std::set<udp::endpoint> subscribers_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <boost/bind.hpp>\n#include <boost/shared_ptr.hpp>\n#include <boost/enable_shared_from_this.hpp>\n#include <set>\n\nnamespace asio = boost::asio;\nusing tcp = asio::ip::tcp;\nusing udp = asio::ip::udp;\n\nclass server {\npublic:\n    using tcp_socket_ptr = boost::shared_ptr<tcp::socket>;\n    using control_request_ptr = boost::shared_ptr<std::string>;\n    using timer_ptr = boost::shared_ptr<asio::steady_timer>;\n\n    server(asio::io_context& io_context, unsigned short port)\n        : acceptor_(io_context, tcp::endpoint(tcp::v4(), port)),\n          timer_(io_context),\n          udp_socket_(io_context, udp::endpoint(udp::v4(), port)),\n          next_frame_number_(0) {\n        start_accept();\n        start_timer();\n    }\n\n    void handle_accept(const boost::system::error_code& ec, tcp_socket_ptr socket) {\n        if (!ec) {\n            std::cout << \"Client connected via TCP.\" << std::endl;\n            control_request_ptr request(new std::string);\n            socket->async_read_some(asio::buffer(*request),\n                boost::bind(&server::handle_control_request,\n                    this,\n                    asio::placeholders::error,\n                    socket,\n                    request));\n        }\n        start_accept();\n    }\n\n    void handle_control_request(const boost::system::error_code& ec, tcp_socket_ptr socket, control_request_ptr request) {\n        if (!ec) {\n            std::cout << \"Received control request: \" << *request << std::endl;\n            if (*request == \"subscribe\") {\n                udp::endpoint endpoint(socket->remote_endpoint().address(), 0);\n                subscribers_.insert(endpoint);\n                std::cout << \"Subscribed UDP endpoint: \" << endpoint << std::endl;\n            } else if (*request == \"unsubscribe\") {\n                udp::endpoint endpoint(socket->remote_endpoint().address(), 0);\n                subscribers_.erase(endpoint);\n                std::cout << \"Unsubscribed UDP endpoint: \" << endpoint << std::endl;\n            }\n        }\n        socket->close();\n    }\n\n    void handle_control_request_timer(tcp_socket_ptr socket, control_request_ptr request, timer_ptr delay_timer) {\n        // Placeholder for delayed processing logic\n        std::cout << \"Delayed processing of control request: \" << *request << std::endl;\n    }\n\n    void handle_timer() {\n        std::ostringstream oss;\n        oss << \"Frame #\" << next_frame_number_++;\n        std::string message = oss.str();\n\n        for (const auto& endpoint : subscribers_) {\n            udp_socket_.send_to(asio::buffer(message), endpoint);\n        }\n\n        start_timer();\n    }\n\nprivate:\n    void start_accept() {\n        tcp_socket_ptr socket(new tcp::socket(acceptor_.get_io_context()));\n        acceptor_.async_accept(*socket,\n            boost::bind(&server::handle_accept,\n                this,\n                asio::placeholders::error,\n                socket));\n    }\n\n    void start_timer() {\n        timer_.expires_after(std::chrono::seconds(1));\n        timer_.async_wait(boost::bind(&server::handle_timer, this));\n    }\n\n    tcp::acceptor acceptor_;\n    asio::steady_timer timer_;\n    udp::socket udp_socket_;\n    unsigned long next_frame_number_;\n    std::set<udp::endpoint> subscribers_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <set>\n#include <memory>\n#include <thread>\n#include <chrono>\n\nnamespace asio = boost::asio;\nusing tcp = asio::ip::tcp;\nusing udp = asio::ip::udp;\nusing tcp_socket_ptr = std::shared_ptr<tcp::socket>;\nusing control_request_ptr = std::shared_ptr<std::string>;\nusing timer_ptr = std::shared_ptr<asio::steady_timer>;\n\nclass server {\npublic:\n    server(asio::io_context& io_context, unsigned short port)\n        : acceptor_(io_context, tcp::endpoint(tcp::v4(), port)),\n          timer_(io_context),\n          udp_socket_(io_context, udp::endpoint(udp::v4(), port)),\n          next_frame_number_(0) {\n        start_accept();\n        start_timer();\n    }\n\nprivate:\n    void start_accept() {\n        auto socket = std::make_shared<tcp::socket>(acceptor_.get_executor().context());\n        acceptor_.async_accept(*socket,\n            [this, socket](const boost::system::error_code& ec) {\n                handle_accept(ec, socket);\n            });\n    }\n\n    void handle_accept(const boost::system::error_code& ec, tcp_socket_ptr socket) {\n        if (!ec) {\n            char buffer[1024];\n            auto request = std::make_shared<std::string>();\n            *request = \"\";\n            socket->async_read_some(asio::buffer(buffer),\n                [this, socket, request](const boost::system::error_code& ec, std::size_t length) {\n                    handle_control_request(ec, socket, request);\n                });\n        }\n        start_accept();\n    }\n\n    void handle_control_request(const boost::system::error_code& ec, tcp_socket_ptr socket, control_request_ptr request) {\n        if (!ec) {\n            char buffer[1024];\n            size_t bytes_read = socket->read_some(asio::buffer(buffer));\n            request->append(buffer, bytes_read);\n\n            if (request->find('\\n') != std::string::npos) {\n                process_control_message(socket, request);\n            } else {\n                auto delay_timer = std::make_shared<asio::steady_timer>(socket->get_executor().context());\n                delay_timer->expires_after(std::chrono::seconds(1));\n                delay_timer->async_wait([this, socket, request, delay_timer](const boost::system::error_code&) {\n                    handle_control_request_timer(socket, request, delay_timer);\n                });\n            }\n        }\n    }\n\n    void handle_control_request_timer(tcp_socket_ptr socket, control_request_ptr request, timer_ptr delay_timer) {\n        process_control_message(socket, request);\n    }\n\n    void process_control_message(tcp_socket_ptr socket, control_request_ptr request) {\n        std::string message = *request;\n        if (message == \"subscribe\\n\") {\n            subscribers_.insert(udp::endpoint(boost::asio::ip::address::from_string(\"127.0.0.1\"), 5555));\n        } else if (message == \"unsubscribe\\n\") {\n            subscribers_.erase(udp::endpoint(boost::asio::ip::address::from_string(\"127.0.0.1\"), 5555));\n        }\n    }\n\n    void start_timer() {\n        timer_.expires_after(std::chrono::seconds(1));\n        timer_.async_wait([this](const boost::system::error_code&) {\n            handle_timer();\n        });\n    }\n\n    void handle_timer() {\n        std::string frame = \"Frame: \" + std::to_string(next_frame_number_++) + \"\\n\";\n        for (const auto& endpoint : subscribers_) {\n            udp_socket_.send_to(asio::buffer(frame), endpoint);\n        }\n        start_timer();\n    }\n\n    tcp::acceptor acceptor_;\n    asio::steady_timer timer_;\n    udp::socket udp_socket_;\n    unsigned long next_frame_number_;\n    std::set<udp::endpoint> subscribers_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <set>\n#include <memory>\n#include <chrono>\n\nnamespace asio = boost::asio;\nusing tcp = asio::ip::tcp;\nusing udp = asio::ip::udp;\nusing tcp_socket_ptr = std::shared_ptr<tcp::socket>;\nusing control_request_ptr = std::shared_ptr<std::string>;\nusing timer_ptr = std::shared_ptr<asio::steady_timer>;\n\nclass server {\npublic:\n    server(asio::io_context& io_context, unsigned short port)\n        : acceptor_(io_context, tcp::endpoint(tcp::v4(), port)),\n          timer_(io_context),\n          udp_socket_(io_context, udp::endpoint(udp::v4(), port)),\n          next_frame_number_(0) {\n        start_accept();\n        start_timer();\n    }\n\nprivate:\n    void start_accept() {\n        auto socket = std::make_shared<tcp::socket>(acceptor_.get_executor().context());\n        acceptor_.async_accept(*socket,\n            [this, socket](const boost::system::error_code& ec) {\n                handle_accept(ec, socket);\n            });\n    }\n\n    void handle_accept(const boost::system::error_code& ec, tcp_socket_ptr socket) {\n        if (!ec) {\n            char buffer[1024];\n            auto request = std::make_shared<std::string>();\n            *request = \"\";\n            socket->async_read_some(asio::buffer(buffer),\n                [this, socket, request](const boost::system::error_code& ec, std::size_t length) {\n                    handle_control_request(ec, socket, request);\n                });\n        }\n        start_accept();\n    }\n\n    void handle_control_request(const boost::system::error_code& ec, tcp_socket_ptr socket, control_request_ptr request) {\n        if (!ec) {\n            char buffer[1024];\n            socket->read_some(asio::buffer(buffer), [this, socket, request](const boost::system::error_code& ec, std::size_t length) {\n                handle_control_request_timer(socket, request, std::make_shared<asio::steady_timer>(socket->get_executor().context()));\n            });\n        }\n    }\n\n    void handle_control_request_timer(tcp_socket_ptr socket, control_request_ptr request, timer_ptr delay_timer) {\n        delay_timer->expires_after(std::chrono::seconds(1));\n        delay_timer->async_wait([this, socket, request, delay_timer](const boost::system::error_code&) {\n            subscribers_.insert(udp::endpoint(boost::asio::ip::address_v4::any(), 0));\n        });\n    }\n\n    void start_timer() {\n        timer_.expires_after(std::chrono::seconds(5));\n        timer_.async_wait([this](const boost::system::error_code&) {\n            handle_timer();\n        });\n    }\n\n    void handle_timer() {\n        for (auto endpoint : subscribers_) {\n            std::string frame = \"Frame: \" + std::to_string(next_frame_number_++);\n            udp_socket_.send_to(asio::buffer(frame), endpoint);\n        }\n        start_timer();\n    }\n\n    tcp::acceptor acceptor_;\n    asio::steady_timer timer_;\n    udp::socket udp_socket_;\n    unsigned long next_frame_number_;\n    std::set<udp::endpoint> subscribers_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <boost/bind.hpp>\n#include <boost/shared_ptr.hpp>\n#include <boost/enable_shared_from_this.hpp>\n#include <set>\n\nnamespace asio = boost::asio;\nusing tcp = asio::ip::tcp;\nusing udp = asio::ip::udp;\nusing error_code = boost::system::error_code;\n\nclass server {\npublic:\n    using tcp_socket_ptr = boost::shared_ptr<tcp::socket>;\n    using control_request_ptr = boost::shared_ptr<std::string>;\n    using timer_ptr = boost::shared_ptr<asio::steady_timer>;\n\n    server(asio::io_context& io_context, unsigned short port)\n        : acceptor_(io_context, tcp::endpoint(tcp::v4(), port)),\n          timer_(io_context),\n          udp_socket_(io_context, udp::endpoint(udp::v4(), port)),\n          next_frame_number_(0) {\n        start_accept();\n        start_timer();\n    }\n\nprivate:\n    void start_accept() {\n        tcp_socket_ptr socket(new tcp::socket(acceptor_.get_executor().context()));\n        acceptor_.async_accept(*socket,\n            boost::bind(&server::handle_accept, this,\n                boost::asio::placeholders::error, socket));\n    }\n\n    void handle_accept(const error_code& ec, tcp_socket_ptr socket) {\n        if (!ec) {\n            handle_control_request(ec, socket, control_request_ptr(new std::string));\n        }\n        start_accept();\n    }\n\n    void handle_control_request(const error_code& ec, tcp_socket_ptr socket, control_request_ptr request) {\n        socket->async_read_some(asio::buffer(*request),\n            boost::bind(&server::handle_control_request_timer, this,\n                socket, request, boost::make_shared<asio::steady_timer>(socket->get_executor().context())));\n    }\n\n    void handle_control_request_timer(tcp_socket_ptr socket, control_request_ptr request, timer_ptr delay_timer) {\n        delay_timer->expires_after(std::chrono::seconds(1));\n        delay_timer->async_wait([this, socket, request](const error_code&) {\n            // Process the control request here\n            subscribers_.insert(udp::endpoint(udp::v4(), 12345));\n        });\n    }\n\n    void start_timer() {\n        timer_.expires_after(std::chrono::seconds(1));\n        timer_.async_wait(boost::bind(&server::handle_timer, this));\n    }\n\n    void handle_timer() {\n        std::string frame = \"Frame: \" + std::to_string(next_frame_number_++);\n        for (const auto& endpoint : subscribers_) {\n            udp_socket_.send_to(asio::buffer(frame), endpoint);\n        }\n        start_timer();\n    }\n\n    tcp::acceptor acceptor_;\n    asio::steady_timer timer_;\n    udp::socket udp_socket_;\n    unsigned long next_frame_number_;\n    std::set<udp::endpoint> subscribers_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <set>\n#include <memory>\n#include <thread>\n#include <chrono>\n\nnamespace asio = boost::asio;\nusing tcp = asio::ip::tcp;\nusing udp = asio::ip::udp;\nusing tcp_socket_ptr = std::shared_ptr<tcp::socket>;\nusing control_request_ptr = std::shared_ptr<std::string>;\nusing timer_ptr = std::shared_ptr<asio::steady_timer>;\n\nclass server {\npublic:\n    server(asio::io_context& io_context, unsigned short port)\n        : acceptor_(io_context, tcp::endpoint(tcp::v4(), port)),\n          timer_(io_context),\n          udp_socket_(io_context, udp::endpoint(udp::v4(), port)),\n          next_frame_number_(0) {\n        start_accept();\n        start_timer();\n    }\n\nprivate:\n    void start_accept() {\n        auto socket = std::make_shared<tcp::socket>(acceptor_.get_executor().context());\n        acceptor_.async_accept(*socket,\n            [this, socket](const boost::system::error_code& ec) {\n                handle_accept(ec, socket);\n            });\n    }\n\n    void handle_accept(const boost::system::error_code& ec, tcp_socket_ptr socket) {\n        if (!ec) {\n            char buffer[1024];\n            auto request = std::make_shared<std::string>();\n            socket->async_read_some(asio::buffer(buffer),\n                [this, socket, request](const boost::system::error_code& ec, std::size_t length) {\n                    handle_control_request(ec, socket, request);\n                });\n        }\n        start_accept();\n    }\n\n    void handle_control_request(const boost::system::error_code& ec, tcp_socket_ptr socket, control_request_ptr request) {\n        if (!ec) {\n            char buffer[1024];\n            socket->read_some(asio::buffer(buffer), [this, socket, request](const boost::system::error_code& ec, std::size_t length) {\n                handle_control_request_timer(socket, request, std::make_shared<asio::steady_timer>(socket->get_executor().context()));\n            });\n        }\n    }\n\n    void handle_control_request_timer(tcp_socket_ptr socket, control_request_ptr request, timer_ptr delay_timer) {\n        delay_timer->expires_after(std::chrono::seconds(1));\n        delay_timer->async_wait([this, socket, request](const boost::system::error_code&) {\n            // Process the control request here\n        });\n    }\n\n    void start_timer() {\n        timer_.expires_after(std::chrono::seconds(1));\n        timer_.async_wait([this](const boost::system::error_code&) {\n            handle_timer();\n            start_timer();\n        });\n    }\n\n    void handle_timer() {\n        std::string frame = \"Frame #\" + std::to_string(next_frame_number_++);\n        for (const auto& endpoint : subscribers_) {\n            udp_socket_.send_to(asio::buffer(frame), endpoint);\n        }\n    }\n\n    tcp::acceptor acceptor_;\n    asio::steady_timer timer_;\n    udp::socket udp_socket_;\n    unsigned long next_frame_number_;\n    std::set<udp::endpoint> subscribers_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <set>\n#include <memory>\n#include <thread>\n\nnamespace asio = boost::asio;\nusing tcp = asio::ip::tcp;\nusing udp = asio::ip::udp;\nusing tcp_socket_ptr = std::shared_ptr<tcp::socket>;\nusing control_request_ptr = std::shared_ptr<std::string>;\nusing timer_ptr = std::shared_ptr<asio::steady_timer>;\n\nclass server {\npublic:\n    server(asio::io_context& io_context, unsigned short port)\n        : acceptor_(io_context, tcp::endpoint(tcp::v4(), port)),\n          timer_(io_context),\n          udp_socket_(io_context, udp::endpoint(udp::v4(), port)),\n          next_frame_number_(0) {\n        start_accept();\n        start_timer();\n    }\n\nprivate:\n    void start_accept() {\n        auto socket = std::make_shared<tcp::socket>(acceptor_.get_executor().context());\n        acceptor_.async_accept(*socket,\n            [this, socket](const boost::system::error_code& ec) {\n                handle_accept(ec, socket);\n            });\n    }\n\n    void handle_accept(const boost::system::error_code& ec, tcp_socket_ptr socket) {\n        if (!ec) {\n            char buffer[1024];\n            auto request = std::make_shared<std::string>();\n            socket->async_read_some(asio::buffer(buffer),\n                [this, socket, request](const boost::system::error_code& ec, std::size_t length) {\n                    handle_control_request(ec, socket, request);\n                });\n        }\n        start_accept();\n    }\n\n    void handle_control_request(const boost::system::error_code& ec, tcp_socket_ptr socket, control_request_ptr request) {\n        if (!ec) {\n            auto delay_timer = std::make_shared<asio::steady_timer>(socket->get_executor().context());\n            delay_timer->expires_after(std::chrono::seconds(1));\n            delay_timer->async_wait([this, socket, request, delay_timer](const boost::system::error_code&) {\n                handle_control_request_timer(socket, request, delay_timer);\n            });\n        }\n    }\n\n    void handle_control_request_timer(tcp_socket_ptr socket, control_request_ptr request, timer_ptr delay_timer) {\n        // Process the control request here\n        subscribers_.insert(udp::endpoint(boost::asio::ip::address_v4::from_string(\"127.0.0.1\"), 30001));\n    }\n\n    void start_timer() {\n        timer_.expires_after(std::chrono::seconds(5));\n        timer_.async_wait([this](const boost::system::error_code&) {\n            handle_timer();\n        });\n    }\n\n    void handle_timer() {\n        std::string frame = \"Frame: \" + std::to_string(next_frame_number_++);\n        for (const auto& endpoint : subscribers_) {\n            udp_socket_.send_to(asio::buffer(frame), endpoint);\n        }\n        start_timer();\n    }\n\n    tcp::acceptor acceptor_;\n    asio::steady_timer timer_;\n    udp::socket udp_socket_;\n    unsigned long next_frame_number_;\n    std::set<udp::endpoint> subscribers_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <set>\n#include <memory>\n#include <thread>\n\nnamespace asio = boost::asio;\nusing tcp = asio::ip::tcp;\nusing udp = asio::ip::udp;\nusing tcp_socket_ptr = std::shared_ptr<tcp::socket>;\nusing control_request_ptr = std::shared_ptr<std::string>;\nusing timer_ptr = std::shared_ptr<asio::steady_timer>;\n\nclass server {\npublic:\n    server(asio::io_context& io_context, unsigned short port)\n        : acceptor_(io_context, tcp::endpoint(tcp::v4(), port)),\n          timer_(io_context),\n          udp_socket_(io_context, udp::endpoint(udp::v4(), port)),\n          next_frame_number_(0) {\n        start_accept();\n        start_timer();\n    }\n\nprivate:\n    void start_accept() {\n        auto socket = std::make_shared<tcp::socket>(acceptor_.get_executor().context());\n        acceptor_.async_accept(*socket,\n            [this, socket](const boost::system::error_code& ec) {\n                handle_accept(ec, socket);\n            });\n    }\n\n    void handle_accept(const boost::system::error_code& ec, tcp_socket_ptr socket) {\n        if (!ec) {\n            char buffer[1024];\n            auto request = std::make_shared<std::string>();\n            *request = \"\";\n            socket->async_read_some(asio::buffer(buffer),\n                [this, socket, request](const boost::system::error_code& ec, std::size_t length) {\n                    handle_control_request(ec, socket, request);\n                });\n        }\n        start_accept();\n    }\n\n    void handle_control_request(const boost::system::error_code& ec, tcp_socket_ptr socket, control_request_ptr request) {\n        if (!ec) {\n            char buffer[1024];\n            size_t bytes_read = socket->read_some(asio::buffer(buffer));\n            request->append(buffer, bytes_read);\n\n            if (request->find('\\n') != std::string::npos) {\n                process_subscription(socket, request);\n            } else {\n                auto delay_timer = std::make_shared<asio::steady_timer>(socket->get_executor().context());\n                delay_timer->expires_after(std::chrono::seconds(1));\n                delay_timer->async_wait([this, socket, request, delay_timer](const boost::system::error_code&) {\n                    handle_control_request_timer(socket, request, delay_timer);\n                });\n            }\n        }\n    }\n\n    void handle_control_request_timer(tcp_socket_ptr socket, control_request_ptr request, timer_ptr delay_timer) {\n        char buffer[1024];\n        size_t bytes_read = socket->read_some(asio::buffer(buffer));\n        request->append(buffer, bytes_read);\n\n        if (request->find('\\n') != std::string::npos) {\n            process_subscription(socket, request);\n        } else {\n            delay_timer->expires_after(std::chrono::seconds(1));\n            delay_timer->async_wait([this, socket, request, delay_timer](const boost::system::error_code&) {\n                handle_control_request_timer(socket, request, delay_timer);\n            });\n        }\n    }\n\n    void process_subscription(tcp_socket_ptr socket, control_request_ptr request) {\n        std::string message = *request;\n        size_t newline_pos = message.find('\\n');\n        if (newline_pos != std::string::npos) {\n            message.resize(newline_pos);\n            if (message == \"subscribe\") {\n                udp::endpoint endpoint = socket->remote_endpoint();\n                subscribers_.insert(endpoint);\n            }\n        }\n        socket->close();\n    }\n\n    void start_timer() {\n        timer_.expires_after(std::chrono::seconds(1));\n        timer_.async_wait([this](const boost::system::error_code&) {\n            handle_timer();\n        });\n    }\n\n    void handle_timer() {\n        for (const auto& endpoint : subscribers_) {\n            std::ostringstream oss;\n            oss << \"Frame: \" << next_frame_number_++;\n            std::string frame = oss.str();\n            udp_socket_.send_to(asio::buffer(frame), endpoint);\n        }\n        start_timer();\n    }\n\n    tcp::acceptor acceptor_;\n    asio::steady_timer timer_;\n    udp::socket udp_socket_;\n    unsigned long next_frame_number_;\n    std::set<udp::endpoint> subscribers_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <boost/bind.hpp>\n#include <boost/shared_ptr.hpp>\n#include <boost/enable_shared_from_this.hpp>\n#include <set>\n\nnamespace asio = boost::asio;\nusing tcp = asio::ip::tcp;\nusing udp = asio::ip::udp;\n\nclass server {\npublic:\n    using tcp_socket_ptr = boost::shared_ptr<tcp::socket>;\n    using control_request_ptr = boost::shared_ptr<std::string>;\n    using timer_ptr = boost::shared_ptr<asio::steady_timer>;\n\n    server(asio::io_context& io_context, unsigned short port)\n        : acceptor_(io_context, tcp::endpoint(tcp::v4(), port)),\n          timer_(io_context),\n          udp_socket_(io_context, udp::endpoint(udp::v4(), port)),\n          next_frame_number_(0) {\n        start_accept();\n        start_timer();\n    }\n\nprivate:\n    void start_accept() {\n        tcp_socket_ptr socket(new tcp::socket(acceptor_.get_executor().context()));\n        acceptor_.async_accept(*socket,\n            boost::bind(&server::handle_accept, this,\n                boost::asio::placeholders::error, socket));\n    }\n\n    void handle_accept(const boost::system::error_code& ec, tcp_socket_ptr socket) {\n        if (!ec) {\n            control_request_ptr request(new std::string);\n            socket->async_read_some(asio::buffer(*request),\n                boost::bind(&server::handle_control_request, this,\n                    boost::asio::placeholders::error, socket, request));\n        }\n        start_accept();\n    }\n\n    void handle_control_request(const boost::system::error_code& ec, tcp_socket_ptr socket, control_request_ptr request) {\n        if (!ec) {\n            timer_ptr delay_timer(new asio::steady_timer(socket->get_executor().context()));\n            delay_timer->expires_after(std::chrono::seconds(1));\n            delay_timer->async_wait(boost::bind(&server::handle_control_request_timer, this, socket, request, delay_timer));\n        }\n    }\n\n    void handle_control_request_timer(tcp_socket_ptr socket, control_request_ptr request, timer_ptr delay_timer) {\n        // Process the control request here\n        // Example: Add endpoint to subscribers_\n        // For demonstration, we'll skip actual processing\n        socket->close();\n    }\n\n    void start_timer() {\n        timer_.expires_after(std::chrono::seconds(5));\n        timer_.async_wait(boost::bind(&server::handle_timer, this));\n    }\n\n    void handle_timer() {\n        broadcast_frame();\n        start_timer();\n    }\n\n    void broadcast_frame() {\n        std::string frame = \"Frame #\" + std::to_string(next_frame_number_++);\n        for (const auto& endpoint : subscribers_) {\n            udp_socket_.send_to(asio::buffer(frame), endpoint);\n        }\n    }\n\n    tcp::acceptor acceptor_;\n    asio::steady_timer timer_;\n    udp::socket udp_socket_;\n    unsigned long next_frame_number_;\n    std::set<udp::endpoint> subscribers_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <boost/bind.hpp>\n#include <boost/shared_ptr.hpp>\n#include <boost/enable_shared_from_this.hpp>\n#include <set>\n\nnamespace asio = boost::asio;\nusing tcp = asio::ip::tcp;\nusing udp = asio::ip::udp;\n\nclass server {\npublic:\n    using tcp_socket_ptr = boost::shared_ptr<tcp::socket>;\n    using control_request_ptr = boost::shared_ptr<std::string>;\n    using timer_ptr = boost::shared_ptr<boost::asio::steady_timer>;\n\n    server(asio::io_context& io_context, unsigned short port)\n        : acceptor_(io_context, tcp::endpoint(tcp::v4(), port)),\n          timer_(io_context),\n          udp_socket_(io_context, udp::endpoint(udp::v4(), port)),\n          next_frame_number_(0) {\n        start_accept();\n        start_timer();\n    }\n\nprivate:\n    void start_accept() {\n        tcp_socket_ptr socket(new tcp::socket(acceptor_.get_executor().context()));\n        acceptor_.async_accept(*socket,\n            boost::bind(&server::handle_accept, this,\n                boost::asio::placeholders::error, socket));\n    }\n\n    void handle_accept(const boost::system::error_code& ec, tcp_socket_ptr socket) {\n        if (!ec) {\n            handle_control_request(ec, socket, control_request_ptr(new std::string));\n        }\n        start_accept();\n    }\n\n    void handle_control_request(const boost::system::error_code& ec, tcp_socket_ptr socket, control_request_ptr request) {\n        if (!ec) {\n            socket->async_read_some(asio::buffer(*request),\n                boost::bind(&server::handle_control_request_timer, this,\n                    socket, request,\n                    boost::make_shared<boost::asio::steady_timer>(socket->get_executor().context())));\n        }\n    }\n\n    void handle_control_request_timer(tcp_socket_ptr socket, control_request_ptr request, timer_ptr delay_timer) {\n        delay_timer->expires_after(boost::chrono::seconds(1));\n        delay_timer->async_wait(\n            [this, socket, request, delay_timer](const boost::system::error_code&) {\n                process_control_request(socket, *request);\n            });\n    }\n\n    void process_control_request(tcp_socket_ptr socket, const std::string& request) {\n        if (request == \"subscribe\") {\n            udp::endpoint endpoint = get_udp_endpoint_from_tcp(socket);\n            subscribers_.insert(endpoint);\n        } else if (request == \"unsubscribe\") {\n            udp::endpoint endpoint = get_udp_endpoint_from_tcp(socket);\n            subscribers_.erase(endpoint);\n        }\n        socket->close();\n    }\n\n    udp::endpoint get_udp_endpoint_from_tcp(tcp_socket_ptr socket) {\n        return udp::endpoint(socket->remote_endpoint().address(), 0);\n    }\n\n    void start_timer() {\n        timer_.expires_after(boost::chrono::seconds(5));\n        timer_.async_wait(boost::bind(&server::handle_timer, this));\n    }\n\n    void handle_timer() {\n        send_data_frame();\n        start_timer();\n    }\n\n    void send_data_frame() {\n        std::ostringstream oss;\n        oss << \"Frame: \" << next_frame_number_++;\n        std::string message = oss.str();\n\n        for (const auto& endpoint : subscribers_) {\n            udp_socket_.send_to(asio::buffer(message), endpoint);\n        }\n    }\n\n    tcp::acceptor acceptor_;\n    boost::asio::steady_timer timer_;\n    udp::socket udp_socket_;\n    unsigned long next_frame_number_;\n    std::set<udp::endpoint> subscribers_;\n};\n```"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 4,
    "Instruction": "Task Description: Implement a class for handling HTTP file downloads using libcurl in C++. The class should support URL downloading with retries, temporary file handling, and proper resource management.\n\nClass Description: The DownloadTask class provides functionality to download files from HTTP URLs using libcurl. It handles initialization/cleanup of libcurl, manages download retries, writes data to temporary files, and performs final file operations upon successful download.\n\nAttributes:\n- m_url: [std::string] - Primary URL for file download\n- m_urlBackup: [std::string] - Backup URL if primary fails\n- m_output: [std::string] - Final output file path\n- m_outputTmp: [std::string] - Temporary file path during download\n- m_default: [std::string] - Default file path if download fails\n- m_mtime: [time_t] - Modification time to set on downloaded file\n- m_retries: [unsigned int] - Number of download attempts made\n- m_name: [std::string] - Name identifier for the download task\n- m_userAgent: [std::string] - User agent string for HTTP requests\n- m_error: [std::string] - Last error message encountered\n\nMethods:\n- initialize(): [static void]() -> void - Initializes libcurl global state\n- uninitialize(): [static void]() -> void - Cleans up libcurl global state\n- DownloadTask(): [constructor](const std::string&, const std::string&, const std::string&, time_t, const std::string&) -> DownloadTask - Constructs a download task with URL, output path, default file, modification time, and optional name\n- run(): [bool]() -> bool - Executes the download task and returns success status\n- getRetries(): [unsigned int]() -> unsigned int - Returns number of retry attempts\n- writeData(): [size_t](void*, size_t, size_t) -> size_t - Callback for writing received data\n- downloadFile(): [bool](const std::string&) -> bool - Internal method to perform the actual file download",
    "Canonical_solution": "#include <curl/curl.h>\n#include <vector>\n#include <string>\n#include <utility>\n\nclass DownloadTask\n{\npublic:\n    DownloadTask(const std::string &url, const std::string& output, const std::string& defaultFile, time_t mtime, const std::string& name = \"\");\n    \n    static void initialize();\n    static void uninitialize();\n    \n    bool run();\n    unsigned int getRetries() const;\n    size_t writeData(void *buffer, size_t size, size_t nmemb);\n    \nprivate:\n    bool downloadFile(const std::string& url);\n    \n    std::string m_url;\n    std::string m_urlBackup;\n    std::string m_output;\n    std::string m_outputTmp;\n    std::string m_default;\n    time_t m_mtime;\n    unsigned int m_retries;\n    std::string m_name;\n    std::string m_userAgent;\n    std::string m_error;\n};\n\nsize_t writeTaskHttpData(void *buffer, size_t size, size_t nmemb, void *user_p)\n{\n    DownloadTask *task = reinterpret_cast<DownloadTask *>(user_p);\n    if (NULL != task)\n    {\n        return task->writeData(buffer, size, nmemb);\n    }\n    \n    return 0;\n}\n\nvoid DownloadTask::initialize()\n{\n    curl_global_init(CURL_GLOBAL_ALL);\n}\n\nvoid DownloadTask::uninitialize()\n{\n    curl_global_cleanup();\n}\n\nbool DownloadTask::downloadFile(const std::string& url)\n{\n    ++m_retries;\n    \n    m_outputTmp = m_output + \".tmp\";\n    deleteFile(m_outputTmp);\n\n    CURLcode res = CURLE_OK;\n    CURL *curl = NULL;\n    \n    std::string userAgent = m_userAgent.empty() ? \"WeChat/7.0.15.33 CFNetwork/978.0.7 Darwin/18.6.0\" : m_userAgent;\n    \n    curl = curl_easy_init();\n    curl_easy_setopt(curl, CURLOPT_URL, url.c_str());\n    curl_easy_setopt(curl, CURLOPT_USERAGENT, userAgent.c_str());\n    curl_easy_setopt(curl, CURLOPT_FORBID_REUSE, 1L);\n    curl_easy_setopt(curl, CURLOPT_TIMEOUT, 60);\n    curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, &::writeTaskHttpData);\n    curl_easy_setopt(curl, CURLOPT_WRITEDATA, this);\n    curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, true);\n    curl_easy_setopt(curl, CURLOPT_SSL_VERIFYPEER, 0);\n    curl_easy_setopt(curl, CURLOPT_SSL_VERIFYHOST, 0);\n\n    long httpStatus = 0;\n    res = curl_easy_perform(curl);\n    if (res != CURLE_OK)\n    {\n        m_error = \"Failed \" + m_name + \"\\r\\n\";\n        m_error += curl_easy_strerror(res);\n    }\n    else\n    {\n        curl_easy_getinfo(curl, CURLINFO_RESPONSE_CODE, &httpStatus);\n    }\n    curl_easy_cleanup(curl);\n    \n    if (res == CURLE_OK && httpStatus == 200)\n    {\n        ::moveFile(m_outputTmp, m_output);\n        if (m_mtime > 0)\n        {\n            updateFileTime(m_output, m_mtime);\n        }\n        return true;\n    }\n\n    if (m_error.empty())\n    {\n        m_error = \"HTTP Status:\" + std::to_string(httpStatus);\n    }\n    return false;\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 146,
    "matched_results": [
      "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n#include <curl/curl.h>\n#include <ctime>\n\nclass DownloadTask {\nprivate:\n    std::string m_url;\n    std::string m_urlBackup;\n    std::string m_output;\n    std::string m_outputTmp;\n    std::string m_default;\n    time_t m_mtime;\n    unsigned int m_retries;\n    std::string m_name;\n    std::string m_userAgent;\n    std::string m_error;\n\npublic:\n    static void initialize() {\n        curl_global_init(CURL_GLOBAL_DEFAULT);\n    }\n\n    static void uninitialize() {\n        curl_global_cleanup();\n    }\n\n    DownloadTask(const std::string& url, const std::string& output, const std::string& def,\n                 time_t mtime, const std::string& name = \"default\")\n        : m_url(url), m_urlBackup(\"\"), m_output(output), m_outputTmp(output + \".tmp\"),\n          m_default(def), m_mtime(mtime), m_retries(0), m_name(name),\n          m_userAgent(\"libcurl-agent/1.0\") {}\n\n    bool run() {\n        if (!downloadFile(m_url)) {\n            if (!m_urlBackup.empty() && !downloadFile(m_urlBackup)) {\n                std::cerr << \"Download failed for both URLs.\" << std::endl;\n                return false;\n            }\n        }\n\n        if (std::ifstream(m_outputTmp) && std::ofstream(m_output)) {\n            std::rename(m_outputTmp.c_str(), m_output.c_str());\n            utimbuf times = { m_mtime, m_mtime };\n            utime(m_output.c_str(), &times);\n            return true;\n        }\n\n        std::cerr << \"Failed to finalize download: \" << m_error << std::endl;\n        return false;\n    }\n\n    unsigned int getRetries() const {\n        return m_retries;\n    }\n\nprivate:\n    size_t writeData(void* ptr, size_t size, size_t nmemb) {\n        std::ofstream file(m_outputTmp, std::ios::binary | std::ios::app);\n        if (!file.is_open()) {\n            m_error = \"Failed to open temporary file.\";\n            return 0;\n        }\n\n        size_t totalSize = size * nmemb;\n        file.write(static_cast<char*>(ptr), totalSize);\n        return totalSize;\n    }\n\n    bool downloadFile(const std::string& url) {\n        CURL* curl = curl_easy_init();\n        if (!curl) {\n            m_error = \"Failed to initialize CURL.\";\n            return false;\n        }\n\n        FILE* fp = fopen(m_outputTmp.c_str(), \"wb\");\n        if (!fp) {\n            m_error = \"Failed to create temporary file.\";\n            curl_easy_cleanup(curl);\n            return false;\n        }\n\n        fclose(fp);\n\n        curl_easy_setopt(curl, CURLOPT_URL, url.c_str());\n        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, writeData);\n        curl_easy_setopt(curl, CURLOPT_USERAGENT, m_userAgent.c_str());\n\n        CURLcode res = curl_easy_perform(curl);\n        if (res != CURLE_OK) {\n            m_error = curl_easy_strerror(res);\n            curl_easy_cleanup(curl);\n            ++m_retries;\n            return false;\n        }\n\n        curl_easy_cleanup(curl);\n        return true;\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n#include <curl/curl.h>\n#include <ctime>\n\nclass DownloadTask {\nprivate:\n    std::string m_url;\n    std::string m_urlBackup;\n    std::string m_output;\n    std::string m_outputTmp;\n    std::string m_default;\n    time_t m_mtime;\n    unsigned int m_retries;\n    std::string m_name;\n    std::string m_userAgent;\n    std::string m_error;\n\npublic:\n    static void initialize() {\n        curl_global_init(CURL_GLOBAL_DEFAULT);\n    }\n\n    static void uninitialize() {\n        curl_global_cleanup();\n    }\n\n    DownloadTask(const std::string& url, const std::string& output, const std::string& defaultFile, time_t mtime, const std::string& name = \"\")\n        : m_url(url), m_urlBackup(\"\"), m_output(output), m_outputTmp(output + \".tmp\"), m_default(defaultFile),\n          m_mtime(mtime), m_retries(0), m_name(name), m_userAgent(\"libcurl-agent/1.0\") {}\n\n    bool run() {\n        if (!downloadFile(m_url)) {\n            if (!m_urlBackup.empty()) {\n                if (!downloadFile(m_urlBackup)) {\n                    std::cerr << \"Download failed for both URLs.\" << std::endl;\n                    return false;\n                }\n            } else {\n                std::cerr << \"Download failed from primary URL.\" << std::endl;\n                return false;\n            }\n        }\n\n        // Rename temporary file to final output\n        if (std::rename(m_outputTmp.c_str(), m_output.c_str()) != 0) {\n            std::cerr << \"Failed to rename temporary file to output: \" << m_output << std::endl;\n            return false;\n        }\n\n        // Set modification time\n        struct utimbuf newTimes;\n        newTimes.actime = time(nullptr); // Access time is current time\n        newTimes.modtime = m_mtime;      // Modification time as specified\n        if (utime(m_output.c_str(), &newTimes) != 0) {\n            std::cerr << \"Failed to set modification time on file: \" << m_output << std::endl;\n            return false;\n        }\n\n        return true;\n    }\n\n    unsigned int getRetries() const {\n        return m_retries;\n    }\n\n    size_t writeData(void* buffer, size_t size, size_t nmemb) {\n        std::ofstream outFile(m_outputTmp, std::ios::binary | std::ios::app);\n        if (!outFile.is_open()) {\n            m_error = \"Failed to open temporary file for writing.\";\n            return 0;\n        }\n\n        outFile.write(static_cast<char*>(buffer), size * nmemb);\n        outFile.close();\n\n        return size * nmemb;\n    }\n\n    bool downloadFile(const std::string& url) {\n        CURL* curl = curl_easy_init();\n        if (!curl) {\n            m_error = \"Failed to initialize CURL.\";\n            return false;\n        }\n\n        std::ofstream outFile(m_outputTmp, std::ios::binary | std::ios::trunc);\n        if (!outFile.is_open()) {\n            m_error = \"Failed to create temporary file.\";\n            curl_easy_cleanup(curl);\n            return false;\n        }\n        outFile.close();\n\n        curl_easy_setopt(curl, CURLOPT_URL, url.c_str());\n        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, writeData);\n        curl_easy_setopt(curl, CURLOPT_WRITEDATA, this);\n        curl_easy_setopt(curl, CURLOPT_USERAGENT, m_userAgent.c_str());\n\n        CURLcode res = curl_easy_perform(curl);\n        if (res != CURLE_OK) {\n            m_error = curl_easy_strerror(res);\n            curl_easy_cleanup(curl);\n            ++m_retries;\n            return false;\n        }\n\n        curl_easy_cleanup(curl);\n        return true;\n    }\n};\n```",
      "```cpp\n#include <curl/curl.h>\n#include <string>\n#include <fstream>\n#include <ctime>\n#include <cstdlib>\n\nclass DownloadTask {\nprivate:\n    std::string m_url;\n    std::string m_urlBackup;\n    std::string m_output;\n    std::string m_outputTmp;\n    std::string m_default;\n    time_t m_mtime;\n    unsigned int m_retries;\n    std::string m_name;\n    std::string m_userAgent;\n    std::string m_error;\n\npublic:\n    static void initialize() {\n        curl_global_init(CURL_GLOBAL_DEFAULT);\n    }\n\n    static void uninitialize() {\n        curl_global_cleanup();\n    }\n\n    DownloadTask(const std::string& url, const std::string& output, const std::string& def,\n                 time_t mtime, const std::string& name = \"default\")\n        : m_url(url), m_urlBackup(\"\"), m_output(output), m_outputTmp(output + \".tmp\"),\n          m_default(def), m_mtime(mtime), m_retries(0), m_name(name),\n          m_userAgent(\"libcurl-agent/1.0\") {}\n\n    bool run() {\n        if (!downloadFile(m_url)) {\n            if (!m_urlBackup.empty() && !downloadFile(m_urlBackup)) {\n                return false;\n            }\n        }\n\n        if (std::ifstream(m_outputTmp) && std::ofstream(m_output)) {\n            std::rename(m_outputTmp.c_str(), m_output.c_str());\n            utimbuf times = { m_mtime, m_mtime };\n            utime(m_output.c_str(), &times);\n        } else {\n            return false;\n        }\n\n        return true;\n    }\n\n    unsigned int getRetries() const {\n        return m_retries;\n    }\n\n    size_t writeData(void* ptr, size_t size, size_t nmemb) {\n        std::ofstream file(m_outputTmp, std::ios::binary | std::ios::app);\n        if (!file.is_open()) {\n            return 0;\n        }\n\n        size_t totalSize = size * nmemb;\n        file.write(static_cast<char*>(ptr), totalSize);\n        return totalSize;\n    }\n\n    bool downloadFile(const std::string& url) {\n        CURL* curl = curl_easy_init();\n        if (!curl) {\n            m_error = \"Failed to initialize CURL.\";\n            return false;\n        }\n\n        FILE* fp = fopen(m_outputTmp.c_str(), \"wb\");\n        if (!fp) {\n            curl_easy_cleanup(curl);\n            m_error = \"Failed to open temporary file.\";\n            return false;\n        }\n\n        curl_easy_setopt(curl, CURLOPT_URL, url.c_str());\n        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, writeData);\n        curl_easy_setopt(curl, CURLOPT_WRITEDATA, this);\n        curl_easy_setopt(curl, CURLOPT_USERAGENT, m_userAgent.c_str());\n\n        CURLcode res = curl_easy_perform(curl);\n        fclose(fp);\n\n        if (res != CURLE_OK) {\n            m_error = curl_easy_strerror(res);\n            curl_easy_cleanup(curl);\n            return false;\n        }\n\n        curl_easy_cleanup(curl);\n        return true;\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n#include <curl/curl.h>\n#include <ctime>\n\nclass DownloadTask {\nprivate:\n    std::string m_url;\n    std::string m_urlBackup;\n    std::string m_output;\n    std::string m_outputTmp;\n    std::string m_default;\n    time_t m_mtime;\n    unsigned int m_retries;\n    std::string m_name;\n    std::string m_userAgent;\n    std::string m_error;\n\npublic:\n    static void initialize() {\n        curl_global_init(CURL_GLOBAL_DEFAULT);\n    }\n\n    static void uninitialize() {\n        curl_global_cleanup();\n    }\n\n    DownloadTask(const std::string& url, const std::string& output, const std::string& defaultFile, time_t mtime, const std::string& name = \"\")\n        : m_url(url), m_urlBackup(\"\"), m_output(output), m_outputTmp(output + \".tmp\"), m_default(defaultFile), m_mtime(mtime), m_retries(0), m_name(name), m_userAgent(\"libcurl-agent/1.0\") {}\n\n    bool run() {\n        if (!downloadFile(m_url)) {\n            if (!m_urlBackup.empty()) {\n                if (!downloadFile(m_urlBackup)) {\n                    std::cerr << \"Failed to download from both URLs.\" << std::endl;\n                    return false;\n                }\n            } else {\n                std::cerr << \"Failed to download from primary URL and no backup provided.\" << std::endl;\n                return false;\n            }\n        }\n\n        // Rename temporary file to final output\n        if (std::rename(m_outputTmp.c_str(), m_output.c_str()) != 0) {\n            std::cerr << \"Failed to rename temporary file to final output.\" << std::endl;\n            return false;\n        }\n\n        // Set modification time\n        struct utimbuf newTimes;\n        newTimes.actime = time(nullptr);\n        newTimes.modtime = m_mtime;\n        if (utime(m_output.c_str(), &newTimes) != 0) {\n            std::cerr << \"Failed to set modification time on downloaded file.\" << std::endl;\n            return false;\n        }\n\n        return true;\n    }\n\n    unsigned int getRetries() const {\n        return m_retries;\n    }\n\n    size_t writeData(void* ptr, size_t size, size_t nmemb) {\n        std::ofstream outFile(m_outputTmp, std::ios::binary | std::ios::app);\n        if (!outFile.is_open()) {\n            return 0;\n        }\n\n        size_t totalSize = size * nmemb;\n        outFile.write(static_cast<char*>(ptr), totalSize);\n        outFile.close();\n\n        return totalSize;\n    }\n\n    bool downloadFile(const std::string& url) {\n        CURL* curl = curl_easy_init();\n        if (!curl) {\n            m_error = \"Failed to initialize CURL.\";\n            return false;\n        }\n\n        std::ofstream outFile(m_outputTmp, std::ios::binary | std::ios::trunc);\n        if (!outFile.is_open()) {\n            m_error = \"Failed to open temporary file for writing.\";\n            curl_easy_cleanup(curl);\n            return false;\n        }\n        outFile.close();\n\n        curl_easy_setopt(curl, CURLOPT_URL, url.c_str());\n        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, writeData);\n        curl_easy_setopt(curl, CURLOPT_USERAGENT, m_userAgent.c_str());\n\n        CURLcode res = curl_easy_perform(curl);\n        curl_easy_cleanup(curl);\n\n        if (res != CURLE_OK) {\n            m_error = curl_easy_strerror(res);\n            return false;\n        }\n\n        return true;\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n#include <curl/curl.h>\n#include <ctime>\n\nclass DownloadTask {\nprivate:\n    std::string m_url;\n    std::string m_urlBackup;\n    std::string m_output;\n    std::string m_outputTmp;\n    std::string m_default;\n    time_t m_mtime;\n    unsigned int m_retries;\n    std::string m_name;\n    std::string m_userAgent;\n    std::string m_error;\n\npublic:\n    static void initialize() {\n        curl_global_init(CURL_GLOBAL_DEFAULT);\n    }\n\n    static void uninitialize() {\n        curl_global_cleanup();\n    }\n\n    DownloadTask(const std::string& url, const std::string& output, const std::string& defaultFile, time_t mtime, const std::string& name = \"\")\n        : m_url(url), m_urlBackup(\"\"), m_output(output), m_outputTmp(output + \".tmp\"), m_default(defaultFile),\n          m_mtime(mtime), m_retries(0), m_name(name), m_userAgent(\"libcurl-agent/1.0\") {}\n\n    bool run() {\n        if (!downloadFile(m_url)) {\n            if (!m_urlBackup.empty()) {\n                if (!downloadFile(m_urlBackup)) {\n                    std::cerr << \"Download failed for both URLs.\" << std::endl;\n                    return false;\n                }\n            } else {\n                std::cerr << \"Download failed from primary URL.\" << std::endl;\n                return false;\n            }\n        }\n\n        // Rename temporary file to final output\n        if (std::rename(m_outputTmp.c_str(), m_output.c_str()) != 0) {\n            std::cerr << \"Failed to rename temporary file to output: \" << m_output << std::endl;\n            return false;\n        }\n\n        // Set modification time on the file\n        struct utimbuf newTimes;\n        newTimes.actime = time(nullptr);\n        newTimes.modtime = m_mtime;\n        if (utime(m_output.c_str(), &newTimes) != 0) {\n            std::cerr << \"Failed to set modification time on file: \" << m_output << std::endl;\n            return false;\n        }\n\n        return true;\n    }\n\n    unsigned int getRetries() const {\n        return m_retries;\n    }\n\n    size_t writeData(void* buffer, size_t size, size_t nmemb) {\n        std::ofstream outFile(m_outputTmp, std::ios::binary | std::ios::app);\n        if (!outFile.is_open()) {\n            return 0;\n        }\n\n        size_t totalSize = size * nmemb;\n        outFile.write(static_cast<char*>(buffer), totalSize);\n        outFile.close();\n\n        return totalSize;\n    }\n\n    bool downloadFile(const std::string& url) {\n        CURL* curl = curl_easy_init();\n        if (!curl) {\n            m_error = \"Failed to initialize CURL.\";\n            return false;\n        }\n\n        std::ofstream outFile(m_outputTmp, std::ios::binary | std::ios::trunc);\n        outFile.close();\n\n        curl_easy_setopt(curl, CURLOPT_URL, url.c_str());\n        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, writeData);\n        curl_easy_setopt(curl, CURLOPT_WRITEDATA, this);\n        curl_easy_setopt(curl, CURLOPT_USERAGENT, m_userAgent.c_str());\n\n        CURLcode res = curl_easy_perform(curl);\n        if (res != CURLE_OK) {\n            m_error = \"CURL error: \" + std::string(curl_easy_strerror(res));\n            curl_easy_cleanup(curl);\n            return false;\n        }\n\n        curl_easy_cleanup(curl);\n        return true;\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n#include <curl/curl.h>\n#include <ctime>\n\nclass DownloadTask {\npublic:\n    static void initialize() {\n        curl_global_init(CURL_GLOBAL_DEFAULT);\n    }\n\n    static void uninitialize() {\n        curl_global_cleanup();\n    }\n\n    DownloadTask(const std::string& url, const std::string& output, const std::string& defaultFile, time_t mtime, const std::string& name = \"\")\n        : m_url(url), m_output(output), m_outputTmp(output + \".tmp\"), m_default(defaultFile), m_mtime(mtime), m_retries(0), m_name(name), m_error(\"\") {\n        m_userAgent = \"libcurl-agent/1.0\";\n    }\n\n    bool run() {\n        if (downloadFile(m_url)) {\n            return true;\n        }\n\n        if (!m_urlBackup.empty() && downloadFile(m_urlBackup)) {\n            return true;\n        }\n\n        std::cerr << \"Download failed for task: \" << m_name << std::endl;\n        std::cerr << \"Error: \" << m_error << std::endl;\n\n        if (!m_default.empty()) {\n            std::ifstream def(m_default, std::ios::binary);\n            std::ofstream out(m_output, std::ios::binary | std::ios::trunc);\n            out << def.rdbuf();\n            out.close();\n            def.close();\n\n            struct utimbuf times = { m_mtime, m_mtime };\n            utime(m_output.c_str(), &times);\n        }\n\n        return false;\n    }\n\n    unsigned int getRetries() const {\n        return m_retries;\n    }\n\nprivate:\n    std::string m_url;\n    std::string m_urlBackup;\n    std::string m_output;\n    std::string m_outputTmp;\n    std::string m_default;\n    time_t m_mtime;\n    unsigned int m_retries;\n    std::string m_name;\n    std::string m_userAgent;\n    std::string m_error;\n\n    size_t writeData(void* ptr, size_t size, size_t nmemb) {\n        std::ofstream file(m_outputTmp, std::ios::binary | std::ios::app);\n        if (!file.is_open()) {\n            m_error = \"Failed to open temporary file.\";\n            return 0;\n        }\n        file.write(static_cast<char*>(ptr), size * nmemb);\n        file.close();\n        return size * nmemb;\n    }\n\n    bool downloadFile(const std::string& url) {\n        CURL* curl = curl_easy_init();\n        if (!curl) {\n            m_error = \"Failed to initialize CURL.\";\n            return false;\n        }\n\n        std::ofstream tmpFile(m_outputTmp, std::ios::binary | std::ios::trunc);\n        if (!tmpFile.is_open()) {\n            m_error = \"Failed to create temporary file.\";\n            curl_easy_cleanup(curl);\n            return false;\n        }\n        tmpFile.close();\n\n        curl_easy_setopt(curl, CURLOPT_URL, url.c_str());\n        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, writeData);\n        curl_easy_setopt(curl, CURLOPT_USERAGENT, m_userAgent.c_str());\n\n        CURLcode res = curl_easy_perform(curl);\n        curl_easy_cleanup(curl);\n\n        if (res != CURLE_OK) {\n            m_error = curl_easy_strerror(res);\n            return false;\n        }\n\n        struct stat st {};\n        if (stat(m_outputTmp.c_str(), &st) == 0 && st.st_size > 0) {\n            std::rename(m_outputTmp.c_str(), m_output.c_str());\n            struct utimbuf times = { m_mtime, m_mtime };\n            utime(m_output.c_str(), &times);\n            return true;\n        }\n\n        m_error = \"Downloaded file is empty or invalid.\";\n        return false;\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n#include <curl/curl.h>\n#include <ctime>\n\nclass DownloadTask {\npublic:\n    static void initialize() {\n        curl_global_init(CURL_GLOBAL_DEFAULT);\n    }\n\n    static void uninitialize() {\n        curl_global_cleanup();\n    }\n\n    DownloadTask(const std::string& url, const std::string& output, const std::string& defaultFile, time_t mtime, const std::string& name = \"default\")\n        : m_url(url), m_output(output), m_outputTmp(output + \".tmp\"), m_default(defaultFile), m_mtime(mtime), m_retries(0), m_name(name), m_userAgent(\"libcurl-agent/1.0\") {}\n\n    bool run() {\n        if (!downloadFile(m_url)) {\n            if (!m_urlBackup.empty() && !downloadFile(m_urlBackup)) {\n                std::cerr << \"Download failed for both URLs. Using default file.\" << std::endl;\n                return false;\n            }\n        }\n\n        if (std::ifstream(m_outputTmp) && std::ofstream(m_output)) {\n            std::ifstream src(m_outputTmp, std::ios::binary);\n            std::ofstream dst(m_output, std::ios::binary);\n            dst << src.rdbuf();\n            src.close();\n            dst.close();\n            std::remove(m_outputTmp.c_str());\n            utime(m_output.c_str(), &mtimeStruct);\n        } else {\n            std::cerr << \"Failed to move temporary file to final destination.\" << std::endl;\n            return false;\n        }\n\n        return true;\n    }\n\n    unsigned int getRetries() const {\n        return m_retries;\n    }\n\nprivate:\n    struct utimbuf mtimeStruct;\n\n    size_t writeData(void* ptr, size_t size, size_t nmemb) {\n        std::ofstream outFile(m_outputTmp, std::ios::binary | std::ios::app);\n        size_t totalSize = size * nmemb;\n        if (outFile.is_open()) {\n            outFile.write(static_cast<char*>(ptr), totalSize);\n            outFile.close();\n        }\n        return totalSize;\n    }\n\n    bool downloadFile(const std::string& url) {\n        CURL* curl = curl_easy_init();\n        if (!curl) {\n            m_error = \"Failed to initialize CURL.\";\n            return false;\n        }\n\n        FILE* fp = fopen(m_outputTmp.c_str(), \"wb\");\n        if (!fp) {\n            m_error = \"Failed to open temporary file.\";\n            curl_easy_cleanup(curl);\n            return false;\n        }\n\n        curl_easy_setopt(curl, CURLOPT_URL, url.c_str());\n        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, writeData);\n        curl_easy_setopt(curl, CURLOPT_WRITEDATA, this);\n        curl_easy_setopt(curl, CURLOPT_USERAGENT, m_userAgent.c_str());\n\n        CURLcode res = curl_easy_perform(curl);\n        fclose(fp);\n\n        if (res != CURLE_OK) {\n            m_error = curl_easy_strerror(res);\n            curl_easy_cleanup(curl);\n            ++m_retries;\n            return false;\n        }\n\n        curl_easy_cleanup(curl);\n        return true;\n    }\n\n    std::string m_url;\n    std::string m_urlBackup;\n    std::string m_output;\n    std::string m_outputTmp;\n    std::string m_default;\n    time_t m_mtime;\n    unsigned int m_retries;\n    std::string m_name;\n    std::string m_userAgent;\n    std::string m_error;\n};```",
      "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n#include <curl/curl.h>\n#include <ctime>\n\nclass DownloadTask {\nprivate:\n    std::string m_url;\n    std::string m_urlBackup;\n    std::string m_output;\n    std::string m_outputTmp;\n    std::string m_default;\n    time_t m_mtime;\n    unsigned int m_retries;\n    std::string m_name;\n    std::string m_userAgent;\n    std::string m_error;\n\npublic:\n    static void initialize() {\n        curl_global_init(CURL_GLOBAL_DEFAULT);\n    }\n\n    static void uninitialize() {\n        curl_global_cleanup();\n    }\n\n    DownloadTask(const std::string& url, const std::string& output, const std::string& defaultFile, time_t mtime, const std::string& name = \"\")\n        : m_url(url), m_urlBackup(\"\"), m_output(output), m_outputTmp(output + \".tmp\"), m_default(defaultFile), m_mtime(mtime), m_retries(0), m_name(name), m_userAgent(\"libcurl-agent/1.0\") {}\n\n    bool run() {\n        if (!downloadFile(m_url)) {\n            if (!m_urlBackup.empty()) {\n                if (!downloadFile(m_urlBackup)) {\n                    return false;\n                }\n            } else {\n                return false;\n            }\n        }\n\n        // Move temporary file to final destination\n        if (std::rename(m_outputTmp.c_str(), m_output.c_str()) != 0) {\n            m_error = \"Failed to rename temporary file.\";\n            return false;\n        }\n\n        // Set modification time\n        struct utimbuf newTimes;\n        newTimes.actime = time(nullptr);\n        newTimes.modtime = m_mtime;\n        if (utime(m_output.c_str(), &newTimes) != 0) {\n            m_error = \"Failed to set modification time on file.\";\n            return false;\n        }\n\n        return true;\n    }\n\n    unsigned int getRetries() const {\n        return m_retries;\n    }\n\nprivate:\n    size_t writeData(void* buffer, size_t size, size_t nmemb) {\n        std::ofstream outFile(m_outputTmp, std::ios::binary | std::ios::app);\n        if (!outFile.is_open()) {\n            return 0;\n        }\n\n        size_t totalSize = size * nmemb;\n        outFile.write(static_cast<char*>(buffer), totalSize);\n        outFile.close();\n\n        return totalSize;\n    }\n\n    bool downloadFile(const std::string& url) {\n        CURL* curl = curl_easy_init();\n        if (!curl) {\n            m_error = \"Failed to initialize CURL.\";\n            return false;\n        }\n\n        std::ofstream outFile(m_outputTmp, std::ios::binary | std::ios::trunc);\n        if (!outFile.is_open()) {\n            curl_easy_cleanup(curl);\n            m_error = \"Failed to open temporary file for writing.\";\n            return false;\n        }\n        outFile.close();\n\n        curl_easy_setopt(curl, CURLOPT_URL, url.c_str());\n        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, &DownloadTask::writeData);\n        curl_easy_setopt(curl, CURLOPT_WRITEDATA, this);\n        curl_easy_setopt(curl, CURLOPT_USERAGENT, m_userAgent.c_str());\n\n        CURLcode res = curl_easy_perform(curl);\n        curl_easy_cleanup(curl);\n\n        if (res != CURLE_OK) {\n            m_error = curl_easy_strerror(res);\n            return false;\n        }\n\n        return true;\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n#include <curl/curl.h>\n#include <ctime>\n\nclass DownloadTask {\nprivate:\n    std::string m_url;\n    std::string m_urlBackup;\n    std::string m_output;\n    std::string m_outputTmp;\n    std::string m_default;\n    time_t m_mtime;\n    unsigned int m_retries;\n    std::string m_name;\n    std::string m_userAgent;\n    std::string m_error;\n\npublic:\n    static void initialize() {\n        curl_global_init(CURL_GLOBAL_DEFAULT);\n    }\n\n    static void uninitialize() {\n        curl_global_cleanup();\n    }\n\n    DownloadTask(const std::string& url, const std::string& output, const std::string& defaultFile, time_t mtime, const std::string& name = \"\")\n        : m_url(url), m_urlBackup(\"\"), m_output(output), m_outputTmp(output + \".tmp\"), m_default(defaultFile), m_mtime(mtime), m_retries(0), m_name(name), m_userAgent(\"libcurl-agent/1.0\") {}\n\n    bool run() {\n        if (!downloadFile(m_url)) {\n            if (!m_urlBackup.empty()) {\n                if (!downloadFile(m_urlBackup)) {\n                    std::cerr << \"Download failed for both URLs.\" << std::endl;\n                    return false;\n                }\n            } else {\n                std::cerr << \"Download failed from primary URL.\" << std::endl;\n                return false;\n            }\n        }\n\n        // Rename temporary file to final output\n        if (std::rename(m_outputTmp.c_str(), m_output.c_str()) != 0) {\n            std::cerr << \"Failed to rename temporary file to final output.\" << std::endl;\n            return false;\n        }\n\n        // Set modification time\n        struct utimbuf newTimes;\n        newTimes.actime = m_mtime;\n        newTimes.modtime = m_mtime;\n        if (utime(m_output.c_str(), &newTimes) != 0) {\n            std::cerr << \"Failed to set modification time on downloaded file.\" << std::endl;\n            return false;\n        }\n\n        return true;\n    }\n\n    unsigned int getRetries() const {\n        return m_retries;\n    }\n\n    size_t writeData(void* buffer, size_t size, size_t nmemb) {\n        size_t totalSize = size * nmemb;\n        std::ofstream outFile(m_outputTmp, std::ios::binary | std::ios::app);\n        if (!outFile) {\n            m_error = \"Failed to open temporary file for writing.\";\n            return 0;\n        }\n\n        outFile.write(static_cast<char*>(buffer), totalSize);\n        outFile.close();\n        return totalSize;\n    }\n\n    bool downloadFile(const std::string& url) {\n        CURL* curl = curl_easy_init();\n        if (!curl) {\n            m_error = \"Failed to initialize CURL.\";\n            return false;\n        }\n\n        std::ofstream outFile(m_outputTmp, std::ios::binary | std::ios::trunc);\n        outFile.close();\n\n        curl_easy_setopt(curl, CURLOPT_URL, url.c_str());\n        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, writeData);\n        curl_easy_setopt(curl, CURLOPT_WRITEDATA, this);\n        curl_easy_setopt(curl, CURLOPT_USERAGENT, m_userAgent.c_str());\n\n        CURLcode res = curl_easy_perform(curl);\n        if (res != CURLE_OK) {\n            m_error = \"CURL error: \" + std::string(curl_easy_strerror(res));\n            curl_easy_cleanup(curl);\n            return false;\n        }\n\n        curl_easy_cleanup(curl);\n        return true;\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n#include <curl/curl.h>\n#include <ctime>\n\nclass DownloadTask {\nprivate:\n    std::string m_url;\n    std::string m_urlBackup;\n    std::string m_output;\n    std::string m_outputTmp;\n    std::string m_default;\n    time_t m_mtime;\n    unsigned int m_retries;\n    std::string m_name;\n    std::string m_userAgent;\n    std::string m_error;\n\npublic:\n    static void initialize() {\n        curl_global_init(CURL_GLOBAL_DEFAULT);\n    }\n\n    static void uninitialize() {\n        curl_global_cleanup();\n    }\n\n    DownloadTask(const std::string& url, const std::string& output, const std::string& defaultFile, time_t mtime, const std::string& name = \"\")\n        : m_url(url), m_urlBackup(\"\"), m_output(output), m_outputTmp(output + \".tmp\"), m_default(defaultFile),\n          m_mtime(mtime), m_retries(0), m_name(name), m_userAgent(\"libcurl-agent/1.0\") {}\n\n    bool run() {\n        if (!downloadFile(m_url)) {\n            if (!m_urlBackup.empty()) {\n                if (!downloadFile(m_urlBackup)) {\n                    std::cerr << \"Download failed for both URLs.\" << std::endl;\n                    return false;\n                }\n            } else {\n                std::cerr << \"Download failed from primary URL.\" << std::endl;\n                return false;\n            }\n        }\n\n        // Rename temporary file to final output\n        if (std::rename(m_outputTmp.c_str(), m_output.c_str()) != 0) {\n            std::cerr << \"Failed to rename temporary file to output: \" << m_output << std::endl;\n            return false;\n        }\n\n        // Set modification time\n        struct utimbuf newTimes;\n        newTimes.actime = m_mtime;\n        newTimes.modtime = m_mtime;\n        if (utime(m_output.c_str(), &newTimes) != 0) {\n            std::cerr << \"Failed to set modification time on file: \" << m_output << std::endl;\n            return false;\n        }\n\n        return true;\n    }\n\n    unsigned int getRetries() const {\n        return m_retries;\n    }\n\n    size_t writeData(void* ptr, size_t size, size_t nmemb, FILE* stream) {\n        return fwrite(ptr, size, nmemb, stream);\n    }\n\n    bool downloadFile(const std::string& url) {\n        CURL* curl = curl_easy_init();\n        if (!curl) {\n            m_error = \"Failed to initialize CURL.\";\n            return false;\n        }\n\n        FILE* fp = fopen(m_outputTmp.c_str(), \"wb\");\n        if (!fp) {\n            m_error = \"Failed to open temporary file for writing.\";\n            curl_easy_cleanup(curl);\n            return false;\n        }\n\n        curl_easy_setopt(curl, CURLOPT_URL, url.c_str());\n        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, writeData);\n        curl_easy_setopt(curl, CURLOPT_WRITEDATA, fp);\n        curl_easy_setopt(curl, CURLOPT_USERAGENT, m_userAgent.c_str());\n\n        CURLcode res = curl_easy_perform(curl);\n        fclose(fp);\n\n        if (res != CURLE_OK) {\n            m_error = curl_easy_strerror(res);\n            curl_easy_cleanup(curl);\n            ++m_retries;\n            return false;\n        }\n\n        curl_easy_cleanup(curl);\n        return true;\n    }\n};\n```"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 40,
    "Instruction": "Task Description: Implement a WebSocket server in C++ using the WebSocket++ library to handle client connections, process incoming messages, and echo messages back to clients. The server should also support stopping the listening process upon receiving a specific command.\n\nClass Description: The WebSocketServer class encapsulates a WebSocket++ server instance, managing connection handling, message processing, and server lifecycle operations.\n\nAttributes:\n- service_: [asio::io_service&] - Reference to the ASIO I/O service used for network operations\n- port_: [int] - The port number on which the server listens for connections\n- ws_server_: [ws_echo_server] - The WebSocket++ server instance\n\nMethods:\n- Constructor: [WebSocketServer]([asio::io_service& service, int port]) -> [void] - Initializes the WebSocket++ server, sets up logging, message handling, and starts listening on the specified port\n- on_message: [on_message]([websocketpp::connection_hdl hdl, ws_echo_server::message_ptr msg]) -> [void] - Callback function that processes incoming messages, echoes them back to clients, and handles the stop-listening command\n- run: [run]() -> [void] - Starts the server's event loop to handle connections and messages",
    "Canonical_solution": "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <iostream>\n\nusing websocketpp::lib::placeholders::_1;\nusing websocketpp::lib::placeholders::_2;\nusing websocketpp::lib::bind;\n\ntypedef websocketpp::server<websocketpp::config::asio> ws_echo_server;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer(asio::io_service& service, int port) \n        : service_(service), port_(port) {\n        ws_server_.set_access_channels(websocketpp::log::alevel::all);\n        ws_server_.clear_access_channels(websocketpp::log::alevel::frame_payload);\n        ws_server_.init_asio(&service_);\n        ws_server_.set_message_handler(bind(&WebSocketServer::on_message, this, ::_1, ::_2));\n        ws_server_.listen(port_);\n        ws_server_.start_accept();\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, ws_echo_server::message_ptr msg) {\n        std::cout << \"on_message called with hdl: \" << hdl.lock().get()\n                  << \" and message: \" << msg->get_payload()\n                  << std::endl;\n\n        if (msg->get_payload() == \"stop-listening\") {\n            ws_server_.stop_listening();\n            return;\n        }\n\n        try {\n            ws_server_.send(hdl, msg->get_payload(), msg->get_opcode());\n        } catch (websocketpp::exception const & e) {\n            std::cout << \"Echo failed because: \"\n                      << \"(\" << e.what() << \")\" << std::endl;\n        }\n    }\n\n    void run() {\n        service_.run();\n    }\n\nprivate:\n    asio::io_service& service_;\n    int port_;\n    ws_echo_server ws_server_;\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 154,
    "matched_results": [
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\n#include <iostream>\n#include <string>\n\ntypedef websocketpp::server<websocketpp::config::asio> ws_echo_server;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer(asio::io_service& service, int port)\n        : service_(service), port_(port), ws_server_() {\n\n        // Initialize ASIO\n        ws_server_.init_asio(&service_);\n\n        // Set logging level\n        ws_server_.set_access_channels(websocketpp::log::alevel::none);\n        ws_server_.clear_access_channels(websocketpp::log::alevel::all);\n\n        // Register message handler\n        ws_server_.set_message_handler(\n            std::bind(&WebSocketServer::on_message, this, std::placeholders::_1, std::placeholders::_2));\n\n        // Start listening on the specified port\n        ws_server_.listen(port_);\n        ws_server_.start_accept();\n    }\n\n    void run() {\n        service_.run();\n    }\n\nprivate:\n    asio::io_service& service_;\n    int port_;\n    ws_echo_server ws_server_;\n\n    void on_message(websocketpp::connection_hdl hdl, ws_echo_server::message_ptr msg) {\n        std::string payload = msg->get_payload();\n        std::cout << \"Received: \" << payload << std::endl;\n\n        if (payload == \"stop\") {\n            std::cout << \"Stopping server...\" << std::endl;\n            ws_server_.stop_listening();\n            return;\n        }\n\n        try {\n            ws_server_.send(hdl, payload, msg->get_opcode());\n        } catch (const websocketpp::lib::error_code& e) {\n            std::cout << \"Echo failed with error: \" << e << std::endl;\n        }\n    }\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\n#include <iostream>\n#include <string>\n\ntypedef websocketpp::server<websocketpp::config::asio> ws_echo_server;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer(asio::io_service& service, int port)\n        : service_(service), port_(port), ws_server_(service) {\n        // Set logging level\n        ws_server_.set_access_channels(websocketpp::log::alevel::none);\n        ws_server_.clear_access_channels(websocketpp::log::alevel::all);\n\n        // Initialize ASIO\n        ws_server_.init_asio();\n\n        // Set message handler\n        ws_server_.set_message_handler(\n            std::bind(&WebSocketServer::on_message, this, std::placeholders::_1, std::placeholders::_2));\n\n        // Start listening on the specified port\n        ws_server_.listen(port_);\n        ws_server_.start_accept();\n    }\n\n    void run() {\n        service_.run();\n    }\n\nprivate:\n    asio::io_service& service_;\n    int port_;\n    ws_echo_server ws_server_;\n\n    void on_message(websocketpp::connection_hdl hdl, ws_echo_server::message_ptr msg) {\n        std::string payload = msg->get_payload();\n        std::cout << \"Received: \" << payload << std::endl;\n\n        if (payload == \"stop\") {\n            std::cout << \"Stopping server...\" << std::endl;\n            ws_server_.stop_listening();\n            return;\n        }\n\n        try {\n            ws_server_.send(hdl, payload, msg->get_opcode());\n        } catch (const websocketpp::lib::error_code& e) {\n            std::cout << \"Echo failed with error: \" << e << std::endl;\n        }\n    }\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\n#include <iostream>\n#include <string>\n\ntypedef websocketpp::server<websocketpp::config::asio> ws_echo_server;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer(websocketpp::lib::asio::io_service& service, int port)\n        : service_(service), port_(port), ws_server_(service) {\n        // Set logging level\n        ws_server_.set_access_channels(websocketpp::log::alevel::none);\n        ws_server_.clear_access_channels(websocketpp::log::alevel::all);\n\n        // Initialize ASIO\n        ws_server_.init_asio();\n\n        // Set message handler\n        ws_server_.set_message_handler(\n            [this](websocketpp::connection_hdl hdl, ws_echo_server::message_ptr msg) {\n                on_message(hdl, msg);\n            }\n        );\n\n        // Listen on the specified port\n        ws_server_.listen(port_);\n        ws_server_.start_accept();\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, ws_echo_server::message_ptr msg) {\n        std::string payload = msg->get_payload();\n        std::cout << \"Received: \" << payload << std::endl;\n\n        if (payload == \"stop\") {\n            std::cout << \"Stopping server...\" << std::endl;\n            ws_server_.stop_listening();\n            return;\n        }\n\n        try {\n            ws_server_.send(hdl, payload, msg->get_opcode());\n        } catch (const websocketpp::lib::error_code& e) {\n            std::cout << \"Echo failed with error: \" << e << std::endl;\n        }\n    }\n\n    void run() {\n        std::cout << \"Starting server on port \" << port_ << std::endl;\n        service_.run();\n    }\n\nprivate:\n    websocketpp::lib::asio::io_service& service_;\n    int port_;\n    ws_echo_server ws_server_;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\n#include <iostream>\n#include <string>\n\ntypedef websocketpp::server<websocketpp::config::asio> ws_echo_server;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer(asio::io_service& service, int port)\n        : service_(service), port_(port), ws_server_() {\n\n        // Initialize ASIO\n        ws_server_.init_asio(&service_);\n\n        // Set logging level\n        ws_server_.set_access_channels(websocketpp::log::alevel::none);\n        ws_server_.clear_access_channels(websocketpp::log::alevel::frame_payload);\n\n        // Register message handler\n        ws_server_.set_message_handler(\n            std::bind(&WebSocketServer::on_message, this, std::placeholders::_1, std::placeholders::_2));\n\n        // Listen on the specified port\n        ws_server_.listen(port_);\n        ws_server_.start_accept();\n    }\n\n    void run() {\n        service_.run();\n    }\n\nprivate:\n    asio::io_service& service_;\n    int port_;\n    ws_echo_server ws_server_;\n\n    void on_message(websocketpp::connection_hdl hdl, ws_echo_server::message_ptr msg) {\n        std::string payload = msg->get_payload();\n        std::cout << \"Received: \" << payload << std::endl;\n\n        if (payload == \"stop\") {\n            std::cout << \"Stopping server...\" << std::endl;\n            ws_server_.stop_listening();\n            return;\n        }\n\n        try {\n            ws_server_.send(hdl, payload, msg->get_opcode());\n        } catch (const websocketpp::lib::error_code& e) {\n            std::cout << \"Echo failed with error: \" << e << std::endl;\n        }\n    }\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\n#include <iostream>\n#include <string>\n\ntypedef websocketpp::server<websocketpp::config::asio> ws_echo_server;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer(websocketpp::lib::asio::io_service& service, int port)\n        : service_(service), port_(port), ws_server_(service) {\n        // Set logging level\n        ws_server_.set_access_channels(websocketpp::log::alevel::none);\n        ws_server_.clear_access_channels(websocketpp::log::alevel::all);\n\n        // Initialize ASIO\n        ws_server_.init_asio();\n\n        // Set message handler\n        ws_server_.set_message_handler(\n            [this](websocketpp::connection_hdl hdl, ws_echo_server::message_ptr msg) {\n                this->on_message(hdl, msg);\n            }\n        );\n\n        // Listen on the specified port\n        ws_server_.listen(port_);\n        ws_server_.start_accept();\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, ws_echo_server::message_ptr msg) {\n        std::string payload = msg->get_payload();\n        std::cout << \"Received: \" << payload << std::endl;\n\n        if (payload == \"stop\") {\n            std::cout << \"Stopping server...\" << std::endl;\n            ws_server_.stop_listening();\n            return;\n        }\n\n        try {\n            ws_server_.send(hdl, payload, msg->get_opcode());\n        } catch (const websocketpp::lib::error_code& e) {\n            std::cout << \"Echo failed with error: \" << e << std::endl;\n        }\n    }\n\n    void run() {\n        std::cout << \"Starting server on port \" << port_ << std::endl;\n        service_.run();\n    }\n\nprivate:\n    websocketpp::lib::asio::io_service& service_;\n    int port_;\n    ws_echo_server ws_server_;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\n#include <iostream>\n#include <string>\n\ntypedef websocketpp::server<websocketpp::config::asio> ws_echo_server;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer(asio::io_service& service, int port)\n        : service_(service), port_(port), ws_server_() {\n\n        // Initialize ASIO\n        ws_server_.init_asio(&service_);\n\n        // Set logging level\n        ws_server_.set_access_channels(websocketpp::log::alevel::none);\n        ws_server_.clear_access_channels(websocketpp::log::alevel::all);\n\n        // Register message handler\n        ws_server_.set_message_handler(\n            std::bind(&WebSocketServer::on_message, this, std::placeholders::_1, std::placeholders::_2));\n\n        // Start listening on the specified port\n        try {\n            ws_server_.listen(port_);\n            ws_server_.start_accept();\n        } catch (const std::exception& e) {\n            std::cerr << \"Error starting server: \" << e.what() << std::endl;\n        }\n    }\n\n    void run() {\n        service_.run();\n    }\n\nprivate:\n    asio::io_service& service_;\n    int port_;\n    ws_echo_server ws_server_;\n\n    void on_message(websocketpp::connection_hdl hdl, ws_echo_server::message_ptr msg) {\n        std::string payload = msg->get_payload();\n        std::cout << \"Received message: \" << payload << std::endl;\n\n        if (payload == \"stop\") {\n            std::cout << \"Stopping server...\" << std::endl;\n            ws_server_.stop_listening();\n            return;\n        }\n\n        try {\n            ws_server_.send(hdl, payload, msg->get_opcode());\n        } catch (const std::exception& e) {\n            std::cerr << \"Error sending message: \" << e.what() << std::endl;\n        }\n    }\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\n#include <iostream>\n#include <string>\n\ntypedef websocketpp::server<websocketpp::config::asio> ws_echo_server;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer(websocketpp::lib::asio::io_service& service, int port)\n        : service_(service), port_(port), ws_server_(service) {\n        // Set logging level\n        ws_server_.set_access_channels(websocketpp::log::alevel::none);\n        ws_server_.clear_access_channels(websocketpp::log::alevel::all);\n\n        // Initialize ASIO\n        ws_server_.init_asio();\n\n        // Set message handler\n        ws_server_.set_message_handler(\n            [this](websocketpp::connection_hdl hdl, ws_echo_server::message_ptr msg) {\n                on_message(hdl, msg);\n            }\n        );\n\n        // Start listening\n        try {\n            ws_server_.listen(port_);\n            ws_server_.start_accept();\n        } catch (const std::exception& e) {\n            std::cerr << \"Error starting server: \" << e.what() << std::endl;\n        }\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, ws_echo_server::message_ptr msg) {\n        std::string payload = msg->get_payload();\n        std::cout << \"Received: \" << payload << std::endl;\n\n        if (payload == \"stop\") {\n            std::cout << \"Stopping server...\" << std::endl;\n            service_.stop();\n            return;\n        }\n\n        try {\n            ws_server_.send(hdl, payload, msg->get_opcode());\n        } catch (const std::exception& e) {\n            std::cerr << \"Error sending message: \" << e.what() << std::endl;\n        }\n    }\n\n    void run() {\n        try {\n            ws_server_.run();\n        } catch (const std::exception& e) {\n            std::cerr << \"Server error: \" << e.what() << std::endl;\n        }\n    }\n\nprivate:\n    websocketpp::lib::asio::io_service& service_;\n    int port_;\n    ws_echo_server ws_server_;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\n#include <iostream>\n#include <string>\n\ntypedef websocketpp::server<websocketpp::config::asio> ws_echo_server;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer(asio::io_service& service, int port)\n        : service_(service), port_(port), ws_server_() {\n        // Initialize ASIO\n        ws_server_.init_asio(&service_);\n\n        // Set logging level\n        ws_server_.set_access_channels(websocketpp::log::alevel::none);\n        ws_server_.clear_access_channels(websocketpp::log::alevel::all);\n\n        // Register message handler\n        ws_server_.set_message_handler(\n            std::bind(&WebSocketServer::on_message, this, std::placeholders::_1, std::placeholders::_2));\n\n        // Start listening on the specified port\n        try {\n            ws_server_.listen(port_);\n            ws_server_.start_accept();\n        } catch (const std::exception& e) {\n            std::cerr << \"Failed to start server: \" << e.what() << std::endl;\n        }\n    }\n\n    void run() {\n        service_.run();\n    }\n\nprivate:\n    asio::io_service& service_;\n    int port_;\n    ws_echo_server ws_server_;\n\n    void on_message(websocketpp::connection_hdl hdl, ws_echo_server::message_ptr msg) {\n        std::string payload = msg->get_payload();\n        std::cout << \"Received: \" << payload << std::endl;\n\n        if (payload == \"stop\") {\n            ws_server_.stop_listening();\n            return;\n        }\n\n        try {\n            ws_server_.send(hdl, payload, msg->get_opcode());\n        } catch (const std::exception& e) {\n            std::cerr << \"Error sending message: \" << e.what() << std::endl;\n        }\n    }\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\n#include <iostream>\n#include <string>\n\ntypedef websocketpp::server<websocketpp::config::asio> ws_echo_server;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer(asio::io_service& service, int port)\n        : service_(service), port_(port), ws_server_(service) {\n        // Set logging level\n        ws_server_.set_access_channels(websocketpp::log::alevel::none);\n        ws_server_.clear_access_channels(websocketpp::log::alevel::all);\n\n        // Initialize ASIO\n        ws_server_.init_asio();\n\n        // Set message handler\n        ws_server_.set_message_handler(\n            std::bind(&WebSocketServer::on_message, this, std::placeholders::_1, std::placeholders::_2));\n\n        // Start listening on the specified port\n        ws_server_.listen(port_);\n        ws_server_.start_accept();\n    }\n\n    void run() {\n        service_.run();\n    }\n\nprivate:\n    asio::io_service& service_;\n    int port_;\n    ws_echo_server ws_server_;\n\n    void on_message(websocketpp::connection_hdl hdl, ws_echo_server::message_ptr msg) {\n        std::string payload = msg->get_payload();\n        std::cout << \"Received: \" << payload << std::endl;\n\n        if (payload == \"stop\") {\n            std::cout << \"Stopping server...\" << std::endl;\n            ws_server_.stop_listening();\n            return;\n        }\n\n        try {\n            ws_server_.send(hdl, payload, msg->get_opcode());\n        } catch (const websocketpp::lib::error_code& e) {\n            std::cout << \"Echo failed with error: \" << e << std::endl;\n        }\n    }\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\n#include <iostream>\n#include <string>\n\ntypedef websocketpp::server<websocketpp::config::asio> ws_echo_server;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer(asio::io_service& service, int port)\n        : service_(service), port_(port), ws_server_() {\n\n        // Initialize ASIO\n        ws_server_.init_asio(&service_);\n\n        // Set logging level\n        ws_server_.set_access_channels(websocketpp::log::alevel::none);\n        ws_server_.clear_access_channels(websocketpp::log::alevel::all);\n\n        // Register message handler\n        ws_server_.set_message_handler(\n            std::bind(&WebSocketServer::on_message, this, std::placeholders::_1, std::placeholders::_2));\n\n        // Start listening on the specified port\n        try {\n            ws_server_.listen(port_);\n            ws_server_.start_accept();\n        } catch (const std::exception& e) {\n            std::cerr << \"Error starting server: \" << e.what() << std::endl;\n        }\n    }\n\n    void run() {\n        service_.run();\n    }\n\nprivate:\n    asio::io_service& service_;\n    int port_;\n    ws_echo_server ws_server_;\n\n    void on_message(websocketpp::connection_hdl hdl, ws_echo_server::message_ptr msg) {\n        std::string payload = msg->get_payload();\n        std::cout << \"Received: \" << payload << std::endl;\n\n        if (payload == \"stop\") {\n            std::cout << \"Stopping server...\" << std::endl;\n            ws_server_.stop_listening();\n            return;\n        }\n\n        try {\n            ws_server_.send(hdl, payload, msg->get_opcode());\n        } catch (const std::exception& e) {\n            std::cerr << \"Error sending message: \" << e.what() << std::endl;\n        }\n    }\n};\n```"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 41,
    "Instruction": "Task Description: Implement a WebSocket server in C++ using the WebSocket++ library that can handle multiple client connections and broadcast messages to all connected clients.\n\nClass Description: The `broadcast_server` class implements a WebSocket server that maintains a set of active connections and broadcasts incoming messages to all connected clients.\n\nAttributes:\n- m_server: [server] - The WebSocket++ server instance that handles network communication\n- m_connections: [con_list (std::set<connection_hdl>)] - A set of active client connections\n\nMethods:\n- broadcast_server() - [Constructor] -> [void] - Initializes the WebSocket++ server and sets up handlers for connection events\n- on_open(connection_hdl hdl) -> [void] - Handles new client connections by adding them to the connection set\n- on_close(connection_hdl hdl) -> [void] - Handles client disconnections by removing them from the connection set\n- on_message(connection_hdl hdl, server::message_ptr msg) -> [void] - Handles incoming messages by broadcasting them to all connected clients\n- run(uint16_t port) -> [void] - Starts the server listening on the specified port and begins accepting connections",
    "Canonical_solution": "#include <set>\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\nusing websocketpp::connection_hdl;\nusing websocketpp::lib::placeholders::_1;\nusing websocketpp::lib::placeholders::_2;\nusing websocketpp::lib::bind;\n\nclass broadcast_server {\npublic:\n    broadcast_server() {\n        m_server.init_asio();\n\n        m_server.set_open_handler(bind(&broadcast_server::on_open,this,::_1));\n        m_server.set_close_handler(bind(&broadcast_server::on_close,this,::_1));\n        m_server.set_message_handler(bind(&broadcast_server::on_message,this,::_1,::_2));\n    }\n\n    void on_open(connection_hdl hdl) {\n        m_connections.insert(hdl);\n    }\n\n    void on_close(connection_hdl hdl) {\n        m_connections.erase(hdl);\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        for (auto it : m_connections) {\n            m_server.send(it,msg);\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\nprivate:\n    typedef std::set<connection_hdl,std::owner_less<connection_hdl>> con_list;\n\n    server m_server;\n    con_list m_connections;\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 154,
    "matched_results": [
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef server::connection_hdl connection_hdl;\ntypedef std::set<connection_hdl> con_list;\n\nclass broadcast_server {\npublic:\n    broadcast_server() {\n        m_server.init_asio();\n        m_server.set_reuse_addr(true);\n        m_server.set_open_handler(std::bind(&broadcast_server::on_open, this, std::placeholders::_1));\n        m_server.set_close_handler(std::bind(&broadcast_server::on_close, this, std::placeholders::_1));\n        m_server.set_message_handler(std::bind(&broadcast_server::on_message, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void on_open(connection_hdl hdl) {\n        m_connections.insert(hdl);\n    }\n\n    void on_close(connection_hdl hdl) {\n        m_connections.erase(hdl);\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        for (auto const& conn : m_connections) {\n            m_server.send(conn, msg->get_payload(), msg->get_opcode());\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    server m_server;\n    con_list m_connections;\n};\n```",
      "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\n#include <set>\n#include <string>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef server::connection_hdl connection_hdl;\ntypedef std::set<connection_hdl> con_list;\n\nclass broadcast_server {\npublic:\n    broadcast_server() {\n        m_server.init_asio();\n        m_server.set_message_handler(\n            [this](connection_hdl hdl, server::message_ptr msg) {\n                this->on_message(hdl, msg);\n            }\n        );\n        m_server.set_open_handler(\n            [this](connection_hdl hdl) {\n                this->on_open(hdl);\n            }\n        );\n        m_server.set_close_handler(\n            [this](connection_hdl hdl) {\n                this->on_close(hdl);\n            }\n        );\n    }\n\n    void on_open(connection_hdl hdl) {\n        m_connections.insert(hdl);\n    }\n\n    void on_close(connection_hdl hdl) {\n        m_connections.erase(hdl);\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        for (auto const& conn : m_connections) {\n            m_server.send(conn, msg->get_payload(), msg->get_opcode());\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    server m_server;\n    con_list m_connections;\n};",
      "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\n#include <set>\n#include <string>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef server::connection_hdl connection_hdl;\ntypedef std::set<connection_hdl> con_list;\n\nclass broadcast_server {\npublic:\n    broadcast_server() {\n        m_server.init_asio();\n        m_server.set_open_handler(\n            std::bind(&broadcast_server::on_open, this, std::placeholders::_1)\n        );\n        m_server.set_close_handler(\n            std::bind(&broadcast_server::on_close, this, std::placeholders::_1)\n        );\n        m_server.set_message_handler(\n            std::bind(&broadcast_server::on_message, this, std::placeholders::_1, std::placeholders::_2)\n        );\n    }\n\n    void on_open(connection_hdl hdl) {\n        m_connections.insert(hdl);\n    }\n\n    void on_close(connection_hdl hdl) {\n        m_connections.erase(hdl);\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        for (auto it = m_connections.begin(); it != m_connections.end(); ++it) {\n            m_server.send(*it, msg->get_payload(), msg->get_opcode());\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    server m_server;\n    con_list m_connections;\n};",
      "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\n#include <set>\n#include <string>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef server::connection_hdl connection_hdl;\ntypedef std::set<connection_hdl> con_list;\n\nclass broadcast_server {\npublic:\n    broadcast_server() {\n        m_server.init_asio();\n        m_server.set_open_handler(\n            std::bind(&broadcast_server::on_open, this, std::placeholders::_1)\n        );\n        m_server.set_close_handler(\n            std::bind(&broadcast_server::on_close, this, std::placeholders::_1)\n        );\n        m_server.set_message_handler(\n            std::bind(&broadcast_server::on_message, this, std::placeholders::_1, std::placeholders::_2)\n        );\n    }\n\n    void on_open(connection_hdl hdl) {\n        m_connections.insert(hdl);\n    }\n\n    void on_close(connection_hdl hdl) {\n        m_connections.erase(hdl);\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        for (auto it = m_connections.begin(); it != m_connections.end(); ++it) {\n            m_server.send(*it, msg->get_payload(), msg->get_opcode());\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    server m_server;\n    con_list m_connections;\n};",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef server::connection_hdl connection_hdl;\ntypedef std::set<connection_hdl> con_list;\n\nclass broadcast_server {\npublic:\n    broadcast_server() {\n        m_server.init_asio();\n        m_server.set_message_handler(\n            [this](connection_hdl hdl, server::message_ptr msg) {\n                this->on_message(hdl, msg);\n            }\n        );\n        m_server.set_open_handler(\n            [this](connection_hdl hdl) {\n                this->on_open(hdl);\n            }\n        );\n        m_server.set_close_handler(\n            [this](connection_hdl hdl) {\n                this->on_close(hdl);\n            }\n        );\n    }\n\n    void on_open(connection_hdl hdl) {\n        m_connections.insert(hdl);\n    }\n\n    void on_close(connection_hdl hdl) {\n        m_connections.erase(hdl);\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        for (auto it = m_connections.begin(); it != m_connections.end(); ++it) {\n            try {\n                m_server.send(*it, msg->get_payload(), msg->get_opcode());\n            } catch (...) {\n                // Handle send errors if needed\n            }\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    server m_server;\n    con_list m_connections;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef server::connection_hdl connection_hdl;\ntypedef std::set<connection_hdl> con_list;\n\nclass broadcast_server {\npublic:\n    broadcast_server() {\n        m_server.init_asio();\n        m_server.set_message_handler(\n            [this](connection_hdl hdl, server::message_ptr msg) {\n                this->on_message(hdl, msg);\n            }\n        );\n        m_server.set_open_handler(\n            [this](connection_hdl hdl) {\n                this->on_open(hdl);\n            }\n        );\n        m_server.set_close_handler(\n            [this](connection_hdl hdl) {\n                this->on_close(hdl);\n            }\n        );\n    }\n\n    void on_open(connection_hdl hdl) {\n        m_connections.insert(hdl);\n    }\n\n    void on_close(connection_hdl hdl) {\n        m_connections.erase(hdl);\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        for (auto const& conn : m_connections) {\n            m_server.send(conn, msg->get_payload(), msg->get_opcode());\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    server m_server;\n    con_list m_connections;\n};\n```",
      "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\n#include <set>\n#include <string>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef server::connection_hdl connection_hdl;\ntypedef std::set<connection_hdl> con_list;\n\nclass broadcast_server {\npublic:\n    broadcast_server() {\n        m_server.init_asio();\n        m_server.set_open_handler(\n            std::bind(&broadcast_server::on_open, this, std::placeholders::_1));\n        m_server.set_close_handler(\n            std::bind(&broadcast_server::on_close, this, std::placeholders::_1));\n        m_server.set_message_handler(\n            std::bind(&broadcast_server::on_message, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void on_open(connection_hdl hdl) {\n        m_connections.insert(hdl);\n    }\n\n    void on_close(connection_hdl hdl) {\n        m_connections.erase(hdl);\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        for (auto const& conn : m_connections) {\n            m_server.send(conn, msg->get_payload(), msg->get_opcode());\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    server m_server;\n    con_list m_connections;\n};",
      "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\n#include <set>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef server::connection_hdl connection_hdl;\ntypedef std::set<connection_hdl> con_list;\n\nclass broadcast_server {\npublic:\n    broadcast_server() {\n        m_server.init_asio();\n        m_server.set_open_handler(\n            std::bind(&broadcast_server::on_open, this, std::placeholders::_1)\n        );\n        m_server.set_close_handler(\n            std::bind(&broadcast_server::on_close, this, std::placeholders::_1)\n        );\n        m_server.set_message_handler(\n            std::bind(&broadcast_server::on_message, this, std::placeholders::_1, std::placeholders::_2)\n        );\n    }\n\n    void on_open(connection_hdl hdl) {\n        m_connections.insert(hdl);\n    }\n\n    void on_close(connection_hdl hdl) {\n        m_connections.erase(hdl);\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        for (auto it = m_connections.begin(); it != m_connections.end(); ++it) {\n            try {\n                m_server.send(*it, msg->get_payload(), msg->get_opcode());\n            } catch (...) {\n                // Handle error if needed\n            }\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    server m_server;\n    con_list m_connections;\n};"
    ],
    "unmatched_results": [
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef server::connection_hdl connection_hdl;\ntypedef std::set<connection_hdl> con_list;\n\nclass broadcast_server {\n    server m_server;\n    con_list m_connections;\n\npublic:\n    broadcast_server() {\n        m_server.set_open_handler([this](connection_hdl hdl) { on_open(hdl); });\n        m_server.set_close_handler([this](connection_hdl hdl) { on_close(hdl); });\n        m_server.set_message_handler([this](connection_hdl hdl, server::message_ptr msg) { on_message(hdl, msg); });\n    }\n\n    void on_open(connection_hdl hdl) {\n        m_connections.insert(hdl);\n    }\n\n    void on_close(connection_hdl hdl) {\n        m_connections.erase(hdl);\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        for (auto it = m_connections.begin(); it != m_connections.end(); ++it) {\n            try {\n                m_server.send(*it, msg->get_payload(), msg->get_opcode());\n            } catch (...) {}\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.init_asio();\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef server::connection_hdl connection_hdl;\ntypedef std::set<connection_hdl> con_list;\n\nclass broadcast_server {\n    server m_server;\n    con_list m_connections;\n\npublic:\n    broadcast_server() {\n        m_server.set_open_handler([this](connection_hdl hdl) { on_open(hdl); });\n        m_server.set_close_handler([this](connection_hdl hdl) { on_close(hdl); });\n        m_server.set_message_handler([this](connection_hdl hdl, server::message_ptr msg) { on_message(hdl, msg); });\n    }\n\n    void on_open(connection_hdl hdl) {\n        m_connections.insert(hdl);\n    }\n\n    void on_close(connection_hdl hdl) {\n        m_connections.erase(hdl);\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        for (auto const& conn : m_connections) {\n            m_server.send(conn, msg->get_payload(), msg->get_opcode());\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.init_asio();\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n};\n```"
    ],
    "match_count": 8,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 42,
    "Instruction": "Task Description: Implement a WebSocket server in C++ using the WebSocket++ library that can handle multiple client connections, process incoming messages, and support configurable threading for concurrent operations.\n\nClass Description: The WebSocketServer class encapsulates a WebSocket++ server implementation, providing methods to initialize, configure, and run the server with customizable port and threading settings.\n\nAttributes:\n- testee_server_: [server] - The WebSocket++ server instance that manages connections and message handling\n- port_: [short] - The port number on which the server listens for incoming connections\n- num_threads_: [size_t] - The number of threads to use for handling connections (1 for single-threaded mode)\n\nMethods:\n- WebSocketServer([short port = 9002], [size_t num_threads = 1]) -> [void] - Constructor that initializes the server with specified port and thread count (defaults to port 9002 and single-threaded)\n- run() -> [void] - Starts the WebSocket server, sets up message handlers, begins listening on the specified port, and manages the server's event loop(s)\n- on_message([websocketpp::connection_hdl hdl], [message_ptr msg]) -> [void] - Message handler that echoes received messages back to the client (private method)\n- on_socket_init([websocketpp::connection_hdl hdl], [boost::asio::ip::tcp::socket & s]) -> [void] - Socket initialization handler that enables TCP_NODELAY for reduced latency (private method)",
    "Canonical_solution": "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <websocketpp/extensions/permessage_deflate/enabled.hpp>\n#include <boost/asio/ip/tcp.hpp>\n#include <websocketpp/common/thread.hpp>\nusing websocketpp::lib::placeholders::_1;\nusing websocketpp::lib::placeholders::_2;\nusing websocketpp::lib::bind;\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef server::message_ptr message_ptr;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer(short port = 9002, size_t num_threads = 1) \n        : port_(port), num_threads_(num_threads) {}\n\n    void run() {\n        try {\n            testee_server_.clear_access_channels(websocketpp::log::alevel::all);\n            testee_server_.clear_error_channels(websocketpp::log::alevel::all);\n\n            testee_server_.init_asio();\n            testee_server_.set_reuse_addr(true);\n\n            testee_server_.set_message_handler(bind(&WebSocketServer::on_message, this, ::_1, ::_2));\n            testee_server_.set_socket_init_handler(bind(&WebSocketServer::on_socket_init, this, ::_1, ::_2));\n\n            testee_server_.set_listen_backlog(8192);\n            testee_server_.listen(port_);\n            testee_server_.start_accept();\n\n            if (num_threads_ == 1) {\n                testee_server_.run();\n            } else {\n                std::vector<websocketpp::lib::shared_ptr<websocketpp::lib::thread>> ts;\n                for (size_t i = 0; i < num_threads_; i++) {\n                    ts.push_back(websocketpp::lib::make_shared<websocketpp::lib::thread>(&server::run, &testee_server_));\n                }\n\n                for (size_t i = 0; i < num_threads_; i++) {\n                    ts[i]->join();\n                }\n            }\n        } catch (websocketpp::exception const & e) {\n            std::cout << \"exception: \" << e.what() << std::endl;\n        }\n    }\n\nprivate:\n    void on_message(websocketpp::connection_hdl hdl, message_ptr msg) {\n        testee_server_.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    void on_socket_init(websocketpp::connection_hdl, boost::asio::ip::tcp::socket & s) {\n        boost::asio::ip::tcp::no_delay option(true);\n        s.set_option(option);\n    }\n\n    server testee_server_;\n    short port_;\n    size_t num_threads_;\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 154,
    "matched_results": [],
    "unmatched_results": [
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\n#include <boost/asio.hpp>\n\nclass WebSocketServer {\npublic:\n    WebSocketServer(short port = 9002, size_t num_threads = 1)\n        : port_(port), num_threads_(num_threads) {\n        testee_server_.set_message_handler(\n            std::bind(&WebSocketServer::on_message, this, std::placeholders::_1, std::placeholders::_2));\n        testee_server_.set_socket_init_handler(\n            std::bind(&WebSocketServer::on_socket_init, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void run() {\n        testee_server_.init_asio();\n        testee_server_.listen(port_);\n        testee_server_.start_accept();\n\n        if (num_threads_ > 1) {\n            threads_.reserve(num_threads_);\n            for (size_t i = 0; i < num_threads_; ++i) {\n                threads_.emplace_back([this]() { testee_server_.run(); });\n            }\n        } else {\n            testee_server_.run();\n        }\n    }\n\nprivate:\n    typedef websocketpp::server<websocketpp::config::asio> server;\n    typedef server::message_ptr message_ptr;\n    typedef server::connection_hdl connection_hdl;\n\n    void on_message(connection_hdl hdl, message_ptr msg) {\n        testee_server_.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    void on_socket_init(connection_hdl hdl, boost::asio::ip::tcp::socket & s) {\n        boost::system::error_code ec;\n        s.set_option(boost::asio::ip::tcp::no_delay(true), ec);\n    }\n\n    server testee_server_;\n    short port_;\n    size_t num_threads_;\n    std::vector<std::thread> threads_;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\n#include <boost/asio.hpp>\n\nclass WebSocketServer {\npublic:\n    WebSocketServer(short port = 9002, size_t num_threads = 1)\n        : port_(port), num_threads_(num_threads) {\n        testee_server_.set_message_handler(\n            std::bind(&WebSocketServer::on_message, this, std::placeholders::_1, std::placeholders::_2));\n        testee_server_.set_socket_init_handler(\n            std::bind(&WebSocketServer::on_socket_init, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void run() {\n        testee_server_.init_asio();\n        testee_server_.listen(port_);\n        testee_server_.start_accept();\n\n        if (num_threads_ > 1) {\n            threads_.reserve(num_threads_);\n            for (size_t i = 0; i < num_threads_; ++i) {\n                threads_.emplace_back([this] { testee_server_.run(); });\n            }\n        } else {\n            testee_server_.run();\n        }\n    }\n\nprivate:\n    typedef websocketpp::server<websocketpp::config::asio> server;\n    typedef server::message_ptr message_ptr;\n    typedef server::connection_hdl connection_hdl;\n\n    void on_message(connection_hdl hdl, message_ptr msg) {\n        testee_server_.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    void on_socket_init(connection_hdl hdl, boost::asio::ip::tcp::socket & s) {\n        boost::system::error_code ec;\n        s.set_option(boost::asio::ip::tcp::no_delay(true), ec);\n    }\n\n    server testee_server_;\n    short port_;\n    size_t num_threads_;\n    std::vector<std::thread> threads_;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\n#include <boost/asio.hpp>\n\nclass WebSocketServer {\npublic:\n    WebSocketServer(short port = 9002, size_t num_threads = 1)\n        : port_(port), num_threads_(num_threads) {\n        testee_server_.set_message_handler(\n            std::bind(&WebSocketServer::on_message, this, std::placeholders::_1, std::placeholders::_2));\n        testee_server_.set_socket_init_handler(\n            std::bind(&WebSocketServer::on_socket_init, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void run() {\n        testee_server_.init_asio();\n        testee_server_.listen(port_);\n        testee_server_.start_accept();\n\n        if (num_threads_ > 1) {\n            threads_.reserve(num_threads_);\n            for (size_t i = 0; i < num_threads_; ++i) {\n                threads_.emplace_back([this] { testee_server_.run(); });\n            }\n        } else {\n            testee_server_.run();\n        }\n    }\n\nprivate:\n    typedef websocketpp::server<websocketpp::config::asio> server;\n    typedef server::message_ptr message_ptr;\n    typedef server::connection_hdl connection_hdl;\n\n    void on_message(connection_hdl hdl, message_ptr msg) {\n        testee_server_.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    void on_socket_init(connection_hdl hdl, boost::asio::ip::tcp::socket & s) {\n        boost::system::error_code ec;\n        s.set_option(boost::asio::ip::tcp::no_delay(true), ec);\n    }\n\n    server testee_server_;\n    short port_;\n    size_t num_threads_;\n    std::vector<std::thread> threads_;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <boost/asio.hpp>\n\nclass WebSocketServer {\npublic:\n    WebSocketServer(short port = 9002, size_t num_threads = 1)\n        : port_(port), num_threads_(num_threads) {\n        testee_server_.set_message_handler(\n            std::bind(&WebSocketServer::on_message, this, std::placeholders::_1, std::placeholders::_2));\n        testee_server_.set_socket_init_handler(\n            std::bind(&WebSocketServer::on_socket_init, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void run() {\n        testee_server_.init_asio();\n        testee_server_.listen(port_);\n        testee_server_.start_accept();\n\n        if (num_threads_ > 1) {\n            threads_.reserve(num_threads_);\n            for (size_t i = 0; i < num_threads_; ++i) {\n                threads_.emplace_back([this] { testee_server_.run(); });\n            }\n        } else {\n            testee_server_.run();\n        }\n    }\n\nprivate:\n    typedef websocketpp::server<websocketpp::config::asio> server;\n    typedef server::message_ptr message_ptr;\n    typedef server::connection_hdl connection_hdl;\n\n    server testee_server_;\n    short port_;\n    size_t num_threads_;\n    std::vector<std::thread> threads_;\n\n    void on_message(connection_hdl hdl, message_ptr msg) {\n        testee_server_.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    void on_socket_init(connection_hdl hdl, boost::asio::ip::tcp::socket & s) {\n        boost::system::error_code ec;\n        s.set_option(boost::asio::ip::tcp::no_delay(true), ec);\n    }\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\n#include <boost/asio.hpp>\n\nclass WebSocketServer {\npublic:\n    WebSocketServer(short port = 9002, size_t num_threads = 1)\n        : port_(port), num_threads_(num_threads) {\n        testee_server_.set_message_handler(\n            std::bind(&WebSocketServer::on_message, this, std::placeholders::_1, std::placeholders::_2));\n        testee_server_.set_socket_init_handler(\n            std::bind(&WebSocketServer::on_socket_init, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void run() {\n        testee_server_.init_asio();\n        testee_server_.listen(boost::asio::ip::tcp::endpoint(boost::asio::ip::tcp::v4(), port_));\n        testee_server_.start_accept();\n\n        if (num_threads_ > 1) {\n            threads_.reserve(num_threads_);\n            for (size_t i = 0; i < num_threads_; ++i) {\n                threads_.emplace_back([this] { testee_server_.run(); });\n            }\n        } else {\n            testee_server_.run();\n        }\n    }\n\nprivate:\n    typedef websocketpp::server<websocketpp::config::asio> server;\n    typedef server::message_ptr message_ptr;\n\n    void on_message(websocketpp::connection_hdl hdl, message_ptr msg) {\n        testee_server_.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    void on_socket_init(websocketpp::connection_hdl hdl, boost::asio::ip::tcp::socket & s) {\n        boost::system::error_code ec;\n        s.set_option(boost::asio::ip::tcp::no_delay(true), ec);\n    }\n\n    server testee_server_;\n    short port_;\n    size_t num_threads_;\n    std::vector<std::thread> threads_;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <boost/asio.hpp>\n\nclass WebSocketServer {\npublic:\n    WebSocketServer(short port = 9002, size_t num_threads = 1)\n        : port_(port), num_threads_(num_threads) {\n        testee_server_.set_message_handler(\n            std::bind(&WebSocketServer::on_message, this, std::placeholders::_1, std::placeholders::_2));\n        testee_server_.set_socket_init_handler(\n            std::bind(&WebSocketServer::on_socket_init, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void run() {\n        testee_server_.init_asio();\n        testee_server_.listen(port_);\n        testee_server_.start_accept();\n\n        if (num_threads_ > 1) {\n            threads_.reserve(num_threads_);\n            for (size_t i = 0; i < num_threads_ - 1; ++i) {\n                threads_.emplace_back([this]() { testee_server_.run(); });\n            }\n        }\n\n        testee_server_.run();\n        for (auto& t : threads_) {\n            t.join();\n        }\n    }\n\nprivate:\n    typedef websocketpp::server<websocketpp::config::asio> server;\n    typedef server::message_ptr message_ptr;\n\n    void on_message(websocketpp::connection_hdl hdl, message_ptr msg) {\n        testee_server_.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    void on_socket_init(websocketpp::connection_hdl hdl, boost::asio::ip::tcp::socket & s) {\n        boost::system::error_code ec;\n        s.set_option(boost::asio::ip::tcp::no_delay(true), ec);\n    }\n\n    server testee_server_;\n    short port_;\n    size_t num_threads_;\n    std::vector<std::thread> threads_;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\n#include <boost/asio.hpp>\n\nclass WebSocketServer {\npublic:\n    WebSocketServer(short port = 9002, size_t num_threads = 1)\n        : port_(port), num_threads_(num_threads) {\n        testee_server_.set_message_handler(\n            std::bind(&WebSocketServer::on_message, this, std::placeholders::_1, std::placeholders::_2));\n        testee_server_.set_socket_init_handler(\n            std::bind(&WebSocketServer::on_socket_init, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void run() {\n        testee_server_.init_asio();\n        testee_server_.listen(port_);\n        testee_server_.start_accept();\n\n        if (num_threads_ > 1) {\n            threads_.reserve(num_threads_);\n            for (size_t i = 0; i < num_threads_; ++i) {\n                threads_.emplace_back([this] { testee_server_.run(); });\n            }\n        } else {\n            testee_server_.run();\n        }\n    }\n\nprivate:\n    typedef websocketpp::server<websocketpp::config::asio> server;\n    typedef server::message_ptr message_ptr;\n    typedef server::connection_hdl connection_hdl;\n\n    void on_message(connection_hdl hdl, message_ptr msg) {\n        testee_server_.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    void on_socket_init(connection_hdl hdl, boost::asio::ip::tcp::socket & s) {\n        boost::system::error_code ec;\n        s.set_option(boost::asio::ip::tcp::no_delay(true), ec);\n    }\n\n    server testee_server_;\n    short port_;\n    size_t num_threads_;\n    std::vector<std::thread> threads_;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\n#include <boost/asio.hpp>\n\nclass WebSocketServer {\npublic:\n    WebSocketServer(short port = 9002, size_t num_threads = 1)\n        : port_(port), num_threads_(num_threads) {\n        testee_server_.set_message_handler(\n            std::bind(&WebSocketServer::on_message, this, std::placeholders::_1, std::placeholders::_2));\n        testee_server_.set_socket_init_handler(\n            std::bind(&WebSocketServer::on_socket_init, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void run() {\n        testee_server_.init_asio();\n        testee_server_.listen(port_);\n        testee_server_.start_accept();\n\n        if (num_threads_ > 1) {\n            threads_.reserve(num_threads_);\n            for (size_t i = 0; i < num_threads_; ++i) {\n                threads_.emplace_back([this] { testee_server_.run(); });\n            }\n        } else {\n            testee_server_.run();\n        }\n    }\n\nprivate:\n    typedef websocketpp::server<websocketpp::config::asio> server;\n    typedef server::message_ptr message_ptr;\n    typedef server::connection_hdl connection_hdl;\n\n    server testee_server_;\n    short port_;\n    size_t num_threads_;\n    std::vector<std::thread> threads_;\n\n    void on_message(connection_hdl hdl, message_ptr msg) {\n        testee_server_.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    void on_socket_init(connection_hdl hdl, boost::asio::ip::tcp::socket & s) {\n        boost::system::error_code ec;\n        s.set_option(boost::asio::ip::tcp::no_delay(true), ec);\n    }\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\n#include <boost/asio.hpp>\n\nclass WebSocketServer {\npublic:\n    WebSocketServer(short port = 9002, size_t num_threads = 1)\n        : port_(port), num_threads_(num_threads) {\n        testee_server_.set_message_handler(\n            std::bind(&WebSocketServer::on_message, this, std::placeholders::_1, std::placeholders::_2));\n        testee_server_.set_socket_init_handler(\n            std::bind(&WebSocketServer::on_socket_init, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void run() {\n        testee_server_.init_asio();\n        testee_server_.listen(boost::asio::ip::tcp::endpoint(boost::asio::ip::tcp::v4(), port_));\n        testee_server_.start_accept();\n\n        if (num_threads_ > 1) {\n            threads_.reserve(num_threads_);\n            for (size_t i = 0; i < num_threads_; ++i) {\n                threads_.emplace_back([this] { testee_server_.run(); });\n            }\n        } else {\n            testee_server_.run();\n        }\n\n        for (auto& t : threads_) {\n            t.join();\n        }\n    }\n\nprivate:\n    typedef websocketpp::server<websocketpp::config::asio> server;\n    typedef server::message_ptr message_ptr;\n\n    void on_message(websocketpp::connection_hdl hdl, message_ptr msg) {\n        testee_server_.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    void on_socket_init(websocketpp::connection_hdl hdl, boost::asio::ip::tcp::socket & s) {\n        boost::system::error_code ec;\n        s.set_option(boost::asio::ip::tcp::no_delay(true), ec);\n    }\n\n    server testee_server_;\n    short port_;\n    size_t num_threads_;\n    std::vector<std::thread> threads_;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\n#include <boost/asio.hpp>\n\nclass WebSocketServer {\npublic:\n    WebSocketServer(short port = 9002, size_t num_threads = 1)\n        : port_(port), num_threads_(num_threads) {\n        testee_server_.set_message_handler(\n            std::bind(&WebSocketServer::on_message, this, std::placeholders::_1, std::placeholders::_2));\n        testee_server_.set_socket_init_handler(\n            std::bind(&WebSocketServer::on_socket_init, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void run() {\n        testee_server_.init_asio();\n        testee_server_.listen(port_);\n        testee_server_.start_accept();\n\n        if (num_threads_ > 1) {\n            threads_.reserve(num_threads_);\n            for (size_t i = 0; i < num_threads_; ++i) {\n                threads_.emplace_back([this] { testee_server_.run(); });\n            }\n        } else {\n            testee_server_.run();\n        }\n    }\n\nprivate:\n    typedef websocketpp::server<websocketpp::config::asio> server;\n    typedef server::message_ptr message_ptr;\n    typedef server::connection_hdl connection_hdl;\n\n    server testee_server_;\n    short port_;\n    size_t num_threads_;\n    std::vector<std::thread> threads_;\n\n    void on_message(connection_hdl hdl, message_ptr msg) {\n        testee_server_.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    void on_socket_init(connection_hdl hdl, boost::asio::ip::tcp::socket & s) {\n        boost::system::error_code ec;\n        s.set_option(boost::asio::ip::tcp::no_delay(true), ec);\n    }\n};\n```"
    ],
    "match_count": 0,
    "pass@3": 0.0,
    "pass@5": 0.0
  },
  {
    "Task_id": 43,
    "Instruction": "Task Description: Implement a WebSocket server in C++ using the WebSocket++ library to handle client connections, manage sessions, and process incoming messages.\n\nClass Description: The `print_server` class implements a WebSocket server that tracks client connections with session IDs and names, and logs connection events and messages.\n\nAttributes:\n- m_next_sessionid: int - Tracks the next available session ID to assign to new connections.\n- m_server: server - The WebSocket++ server instance configured with custom connection data.\n\nMethods:\n- print_server() - Constructor - Initializes the server with ASIO, sets up handlers for connection open, close, and message events.\n- on_open(connection_hdl hdl) -> void - Handler for new connections. Assigns a session ID to the new connection.\n- on_close(connection_hdl hdl) -> void - Handler for connection closures. Logs the connection's name and session ID.\n- on_message(connection_hdl hdl, server::message_ptr msg) -> void - Handler for incoming messages. Sets the connection name if not set, otherwise logs the message along with the connection's name and session ID.\n- run(uint16_t port) -> void - Starts the server listening on the specified port, begins accepting connections, and runs the event loop.",
    "Canonical_solution": "#include <iostream>\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\nstruct connection_data {\n    int sessionid;\n    std::string name;\n};\n\nstruct custom_config : public websocketpp::config::asio {\n    typedef websocketpp::config::asio core;\n    typedef core::concurrency_type concurrency_type;\n    typedef core::request_type request_type;\n    typedef core::response_type response_type;\n    typedef core::message_type message_type;\n    typedef core::con_msg_manager_type con_msg_manager_type;\n    typedef core::endpoint_msg_manager_type endpoint_msg_manager_type;\n    typedef core::alog_type alog_type;\n    typedef core::elog_type elog_type;\n    typedef core::rng_type rng_type;\n    typedef core::transport_type transport_type;\n    typedef core::endpoint_base endpoint_base;\n    typedef connection_data connection_base;\n};\n\ntypedef websocketpp::server<custom_config> server;\ntypedef server::connection_ptr connection_ptr;\n\nusing websocketpp::connection_hdl;\nusing websocketpp::lib::placeholders::_1;\nusing websocketpp::lib::placeholders::_2;\nusing websocketpp::lib::bind;\n\nclass print_server {\npublic:\n    print_server() : m_next_sessionid(1) {\n        m_server.init_asio();\n        m_server.set_open_handler(bind(&print_server::on_open,this,::_1));\n        m_server.set_close_handler(bind(&print_server::on_close,this,::_1));\n        m_server.set_message_handler(bind(&print_server::on_message,this,::_1,::_2));\n    }\n    \n    void on_open(connection_hdl hdl) {\n        connection_ptr con = m_server.get_con_from_hdl(hdl);\n        con->sessionid = m_next_sessionid++;\n    }\n    \n    void on_close(connection_hdl hdl) {\n        connection_ptr con = m_server.get_con_from_hdl(hdl);\n        std::cout << \"Closing connection \" << con->name \n                  << \" with sessionid \" << con->sessionid << std::endl;\n    }\n    \n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        connection_ptr con = m_server.get_con_from_hdl(hdl);\n        \n        if (con->name.empty()) {\n            con->name = msg->get_payload();\n            std::cout << \"Setting name of connection with sessionid \" \n                      << con->sessionid << \" to \" << con->name << std::endl;\n        } else {\n            std::cout << \"Got a message from connection \" << con->name \n                      << \" with sessionid \" << con->sessionid << std::endl;\n        }\n    }\n    \n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\nprivate:\n    int m_next_sessionid;\n    server m_server;\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 154,
    "matched_results": [
      "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\n#include <iostream>\n#include <map>\n#include <string>\n#include <mutex>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef server::connection_hdl connection_hdl;\n\nclass print_server {\npublic:\n    print_server() {\n        m_server.init_asio();\n\n        m_server.set_open_handler(websocketpp::lib::bind(\n            &print_server::on_open,\n            this,\n            &m_server,\n            ::_1\n        ));\n\n        m_server.set_close_handler(websocketpp::lib::bind(\n            &print_server::on_close,\n            this,\n            ::_1\n        ));\n\n        m_server.set_message_handler(websocketpp::lib::bind(\n            &print_server::on_message,\n            this,\n            ::_1,\n            ::_2\n        ));\n    }\n\n    void on_open(connection_hdl hdl) {\n        std::lock_guard<std::mutex> lock(m_mutex);\n        int sessionid = m_next_sessionid++;\n        m_connections[hdl] = {sessionid, \"\"};\n        std::cout << \"Connection opened. Session ID: \" << sessionid << std::endl;\n    }\n\n    void on_close(connection_hdl hdl) {\n        std::lock_guard<std::mutex> lock(m_mutex);\n        auto it = m_connections.find(hdl);\n        if (it != m_connections.end()) {\n            std::cout << \"Connection closed. Session ID: \" << it->second.sessionid;\n            if (!it->second.name.empty()) {\n                std::cout << \", Name: \" << it->second.name;\n            }\n            std::cout << std::endl;\n            m_connections.erase(it);\n        }\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        std::lock_guard<std::mutex> lock(m_mutex);\n        auto it = m_connections.find(hdl);\n        if (it == m_connections.end()) {\n            return;\n        }\n\n        if (it->second.name.empty()) {\n            it->second.name = msg->get_payload();\n            std::cout << \"Set name for Session ID \" << it->second.sessionid << \" to \" << it->second.name << std::endl;\n        } else {\n            std::cout << \"Message from \" << it->second.name << \" (Session ID: \" << it->second.sessionid << \"): \" << msg->get_payload() << std::endl;\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    struct connection_info {\n        int sessionid;\n        std::string name;\n    };\n\n    int m_next_sessionid = 0;\n    server m_server;\n    std::map<connection_hdl, connection_info> m_connections;\n    std::mutex m_mutex;\n};",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\n#include <map>\n#include <string>\n#include <iostream>\n#include <mutex>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef server::connection_hdl connection_hdl;\n\nclass print_server {\npublic:\n    print_server() {\n        m_server.init_asio();\n\n        m_server.set_open_handler(websocketpp::lib::bind(\n            &print_server::on_open,\n            this,\n            &m_server,\n            websocketpp::lib::placeholders::_1\n        ));\n\n        m_server.set_close_handler(websocketpp::lib::bind(\n            &print_server::on_close,\n            this,\n            &m_server,\n            websocketpp::lib::placeholders::_1\n        ));\n\n        m_server.set_message_handler(websocketpp::lib::bind(\n            &print_server::on_message,\n            this,\n            &m_server,\n            websocketpp::lib::placeholders::_1,\n            websocketpp::lib::placeholders::_2\n        ));\n    }\n\n    void on_open(server* s, connection_hdl hdl) {\n        std::lock_guard<std::mutex> lock(m_connection_mutex);\n        int sessionid = m_next_sessionid++;\n        m_connections[sessionid] = {hdl, \"\"};\n        std::cout << \"Connection opened. Session ID: \" << sessionid << std::endl;\n    }\n\n    void on_close(server* s, connection_hdl hdl) {\n        std::lock_guard<std::mutex> lock(m_connection_mutex);\n        for (auto it = m_connections.begin(); it != m_connections.end(); ++it) {\n            if (it->second.hdl == hdl) {\n                std::cout << \"Connection closed. Session ID: \" << it->first;\n                if (!it->second.name.empty()) {\n                    std::cout << \", Name: \" << it->second.name;\n                }\n                std::cout << std::endl;\n                m_connections.erase(it);\n                break;\n            }\n        }\n    }\n\n    void on_message(server* s, connection_hdl hdl, server::message_ptr msg) {\n        std::lock_guard<std::mutex> lock(m_connection_mutex);\n        for (auto& [sessionid, conn_info] : m_connections) {\n            if (conn_info.hdl == hdl) {\n                if (conn_info.name.empty()) {\n                    conn_info.name = msg->get_payload();\n                    std::cout << \"Set name for session \" << sessionid << \" to: \" << conn_info.name << std::endl;\n                } else {\n                    std::cout << \"Message from session \" << sessionid << \" (\" << conn_info.name << \"): \" << msg->get_payload() << std::endl;\n                }\n                break;\n            }\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    struct connection_info {\n        connection_hdl hdl;\n        std::string name;\n    };\n\n    int m_next_sessionid = 0;\n    server m_server;\n    std::map<int, connection_info> m_connections;\n    std::mutex m_connection_mutex;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\n#include <map>\n#include <string>\n#include <iostream>\n#include <mutex>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef server::connection_hdl connection_hdl;\n\nclass print_server {\npublic:\n    print_server() {\n        m_server.init_asio();\n        m_server.set_reuse_addr(true);\n\n        m_server.set_open_handler(std::bind(&print_server::on_open, this, std::placeholders::_1));\n        m_server.set_close_handler(std::bind(&print_server::on_close, this, std::placeholders::_1));\n        m_server.set_message_handler(std::bind(&print_server::on_message, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void on_open(connection_hdl hdl) {\n        std::lock_guard<std::mutex> lock(m_connection_mutex);\n        int sessionid = m_next_sessionid++;\n        m_connections[sessionid] = {hdl, \"\"};\n        std::cout << \"Connection opened. Session ID: \" << sessionid << std::endl;\n    }\n\n    void on_close(connection_hdl hdl) {\n        std::lock_guard<std::mutex> lock(m_connection_mutex);\n        for (auto it = m_connections.begin(); it != m_connections.end(); ++it) {\n            if (it->second.hdl == hdl) {\n                std::cout << \"Connection closed. Session ID: \" << it->first;\n                if (!it->second.name.empty()) {\n                    std::cout << \", Name: \" << it->second.name;\n                }\n                std::cout << std::endl;\n                m_connections.erase(it);\n                break;\n            }\n        }\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        std::lock_guard<std::mutex> lock(m_connection_mutex);\n        for (auto& [sessionid, conn_info] : m_connections) {\n            if (conn_info.hdl == hdl) {\n                if (conn_info.name.empty()) {\n                    conn_info.name = msg->get_payload();\n                    std::cout << \"Set name for Session ID: \" << sessionid << \" to: \" << conn_info.name << std::endl;\n                } else {\n                    std::cout << \"Message from Session ID: \" << sessionid << \", Name: \" << conn_info.name << \", Message: \" << msg->get_payload() << std::endl;\n                }\n                break;\n            }\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    struct connection_info {\n        connection_hdl hdl;\n        std::string name;\n    };\n\n    int m_next_sessionid = 0;\n    server m_server;\n    std::map<int, connection_info> m_connections;\n    std::mutex m_connection_mutex;\n};\n```",
      "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\n#include <iostream>\n#include <map>\n#include <string>\n#include <mutex>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef server::connection_hdl connection_hdl;\n\nclass print_server {\npublic:\n    print_server() {\n        m_server.init_asio();\n\n        m_server.set_open_handler(std::bind(&print_server::on_open, this, std::placeholders::_1));\n        m_server.set_close_handler(std::bind(&print_server::on_close, this, std::placeholders::_1));\n        m_server.set_message_handler(std::bind(&print_server::on_message, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void on_open(connection_hdl hdl) {\n        std::lock_guard<std::mutex> lock(m_connection_mutex);\n        int sessionid = m_next_sessionid++;\n        m_connections[sessionid] = {hdl, \"\"};\n        std::cout << \"Connection opened. Session ID: \" << sessionid << std::endl;\n    }\n\n    void on_close(connection_hdl hdl) {\n        std::lock_guard<std::mutex> lock(m_connection_mutex);\n        for (auto it = m_connections.begin(); it != m_connections.end(); ++it) {\n            if (it->second.hdl == hdl) {\n                std::cout << \"Connection closed. Session ID: \" << it->first << \", Name: \" << it->second.name << std::endl;\n                m_connections.erase(it);\n                break;\n            }\n        }\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        std::lock_guard<std::mutex> lock(m_connection_mutex);\n        for (auto& [sessionid, conn_info] : m_connections) {\n            if (conn_info.hdl == hdl) {\n                if (conn_info.name.empty()) {\n                    conn_info.name = msg->get_payload();\n                    std::cout << \"Set name for session \" << sessionid << \" to: \" << conn_info.name << std::endl;\n                } else {\n                    std::cout << \"Message from session \" << sessionid << \" (\" << conn_info.name << \"): \" << msg->get_payload() << std::endl;\n                }\n                break;\n            }\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    struct connection_info {\n        connection_hdl hdl;\n        std::string name;\n    };\n\n    int m_next_sessionid = 0;\n    server m_server;\n    std::map<int, connection_info> m_connections;\n    std::mutex m_connection_mutex;\n};",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\n#include <iostream>\n#include <map>\n#include <string>\n#include <mutex>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef server::connection_hdl connection_hdl;\n\nclass print_server {\npublic:\n    print_server() {\n        m_server.init_asio();\n\n        m_server.set_open_handler(std::bind(&print_server::on_open, this, std::placeholders::_1));\n        m_server.set_close_handler(std::bind(&print_server::on_close, this, std::placeholders::_1));\n        m_server.set_message_handler(std::bind(&print_server::on_message, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void on_open(connection_hdl hdl) {\n        std::lock_guard<std::mutex> lock(m_mutex);\n        int sessionid = m_next_sessionid++;\n        m_connections[sessionid] = {hdl, \"\"};\n        std::cout << \"Connection opened. Session ID: \" << sessionid << std::endl;\n    }\n\n    void on_close(connection_hdl hdl) {\n        std::lock_guard<std::mutex> lock(m_mutex);\n        for (auto it = m_connections.begin(); it != m_connections.end(); ++it) {\n            if (it->second.hdl == hdl) {\n                std::cout << \"Connection closed. Session ID: \" << it->first << \", Name: \" << it->second.name << std::endl;\n                m_connections.erase(it);\n                break;\n            }\n        }\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        std::lock_guard<std::mutex> lock(m_mutex);\n        for (auto& [sessionid, conn_info] : m_connections) {\n            if (conn_info.hdl == hdl) {\n                if (conn_info.name.empty()) {\n                    conn_info.name = msg->get_payload();\n                    std::cout << \"Set name for Session ID \" << sessionid << \" to: \" << conn_info.name << std::endl;\n                } else {\n                    std::cout << \"Message from \" << conn_info.name << \" (Session ID: \" << sessionid << \"): \" << msg->get_payload() << std::endl;\n                }\n                break;\n            }\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    struct connection_info {\n        connection_hdl hdl;\n        std::string name;\n    };\n\n    int m_next_sessionid = 0;\n    server m_server;\n    std::map<int, connection_info> m_connections;\n    std::mutex m_mutex;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\n#include <iostream>\n#include <map>\n#include <string>\n#include <mutex>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef server::connection_hdl connection_hdl;\n\nclass print_server {\npublic:\n    print_server() {\n        m_server.init_asio();\n        m_server.set_reuse_addr(true);\n\n        m_server.set_open_handler(std::bind(&print_server::on_open, this, std::placeholders::_1));\n        m_server.set_close_handler(std::bind(&print_server::on_close, this, std::placeholders::_1));\n        m_server.set_message_handler(std::bind(&print_server::on_message, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void on_open(connection_hdl hdl) {\n        std::lock_guard<std::mutex> lock(m_mutex);\n        int sessionid = m_next_sessionid++;\n        m_connections[sessionid] = {hdl, \"\"};\n        std::cout << \"Connection opened. Session ID: \" << sessionid << std::endl;\n    }\n\n    void on_close(connection_hdl hdl) {\n        std::lock_guard<std::mutex> lock(m_mutex);\n        for (auto it = m_connections.begin(); it != m_connections.end(); ++it) {\n            if (it->second.hdl == hdl) {\n                std::cout << \"Connection closed. Name: \" << it->second.name << \", Session ID: \" << it->first << std::endl;\n                m_connections.erase(it);\n                break;\n            }\n        }\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        std::lock_guard<std::mutex> lock(m_mutex);\n        std::string payload = msg->get_payload();\n\n        for (auto& [sessionid, conn_info] : m_connections) {\n            if (conn_info.hdl == hdl) {\n                if (conn_info.name.empty()) {\n                    conn_info.name = payload;\n                    std::cout << \"Name set for session \" << sessionid << \": \" << payload << std::endl;\n                } else {\n                    std::cout << \"Message from [\" << conn_info.name << \" - \" << sessionid << \"]: \" << payload << std::endl;\n                }\n                break;\n            }\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    struct connection_info {\n        connection_hdl hdl;\n        std::string name;\n    };\n\n    int m_next_sessionid = 0;\n    server m_server;\n    std::map<int, connection_info> m_connections;\n    std::mutex m_mutex;\n};\n```",
      "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\n#include <iostream>\n#include <map>\n#include <string>\n#include <mutex>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef server::connection_hdl connection_hdl;\n\nclass print_server {\npublic:\n    print_server() {\n        m_server.init_asio();\n\n        m_server.set_open_handler(std::bind(&print_server::on_open, this, std::placeholders::_1));\n        m_server.set_close_handler(std::bind(&print_server::on_close, this, std::placeholders::_1));\n        m_server.set_message_handler(std::bind(&print_server::on_message, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void on_open(connection_hdl hdl) {\n        std::lock_guard<std::mutex> lock(m_connection_mutex);\n        int sessionid = m_next_sessionid++;\n        m_connections[sessionid] = {hdl, \"\"};\n        std::cout << \"Connection opened. Session ID: \" << sessionid << std::endl;\n    }\n\n    void on_close(connection_hdl hdl) {\n        std::lock_guard<std::mutex> lock(m_connection_mutex);\n        for (auto it = m_connections.begin(); it != m_connections.end(); ++it) {\n            if (it->second.hdl == hdl) {\n                std::cout << \"Connection closed. Session ID: \" << it->first << \", Name: \" << it->second.name << std::endl;\n                m_connections.erase(it);\n                break;\n            }\n        }\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        std::lock_guard<std::mutex> lock(m_connection_mutex);\n        for (auto& [sessionid, conn_info] : m_connections) {\n            if (conn_info.hdl == hdl) {\n                if (conn_info.name.empty()) {\n                    conn_info.name = msg->get_payload();\n                } else {\n                    std::cout << \"Message from \" << conn_info.name << \" (Session ID: \" << sessionid << \"): \" << msg->get_payload() << std::endl;\n                }\n                break;\n            }\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    struct connection_info {\n        connection_hdl hdl;\n        std::string name;\n    };\n\n    int m_next_sessionid = 0;\n    server m_server;\n    std::map<int, connection_info> m_connections;\n    std::mutex m_connection_mutex;\n};",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\n#include <map>\n#include <mutex>\n#include <iostream>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef server::connection_hdl connection_hdl;\n\nclass print_server {\npublic:\n    print_server() {\n        m_server.init_asio();\n        m_server.set_open_handler(websocketpp::lib::bind(\n            &print_server::on_open, this, &print_server::m_server, ::_1));\n        m_server.set_close_handler(websocketpp::lib::bind(\n            &print_server::on_close, this, ::_1));\n        m_server.set_message_handler(websocketpp::lib::bind(\n            &print_server::on_message, this, ::_1, ::_2));\n    }\n\n    void on_open(server* s, connection_hdl hdl) {\n        std::lock_guard<std::mutex> lock(m_connection_mutex);\n        int sessionid = m_next_sessionid++;\n        m_connections[sessionid] = {hdl, \"\"};\n        std::cout << \"Connection opened. Session ID: \" << sessionid << std::endl;\n    }\n\n    void on_close(connection_hdl hdl) {\n        std::lock_guard<std::mutex> lock(m_connection_mutex);\n        for (auto it = m_connections.begin(); it != m_connections.end(); ++it) {\n            if (it->second.hdl == hdl) {\n                std::cout << \"Connection closed. Name: \" << it->second.name \n                          << \", Session ID: \" << it->first << std::endl;\n                m_connections.erase(it);\n                return;\n            }\n        }\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        std::string payload = msg->get_payload();\n        std::lock_guard<std::mutex> lock(m_connection_mutex);\n        bool name_set = false;\n        int sessionid = -1;\n\n        for (auto& [id, conn_info] : m_connections) {\n            if (conn_info.hdl == hdl) {\n                sessionid = id;\n                if (conn_info.name.empty()) {\n                    conn_info.name = payload;\n                    name_set = true;\n                }\n                break;\n            }\n        }\n\n        if (!name_set && sessionid != -1) {\n            std::cout << \"Message from \" << m_connections[sessionid].name \n                      << \" (Session ID: \" << sessionid << \"): \" << payload << std::endl;\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    struct connection_info {\n        connection_hdl hdl;\n        std::string name;\n    };\n\n    int m_next_sessionid = 0;\n    std::map<int, connection_info> m_connections;\n    std::mutex m_connection_mutex;\n    server m_server;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\n#include <map>\n#include <string>\n#include <iostream>\n#include <mutex>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef server::connection_hdl connection_hdl;\n\nclass print_server {\npublic:\n    print_server() {\n        m_server.init_asio();\n        m_server.set_reuse_addr(true);\n\n        m_server.set_open_handler(std::bind(&print_server::on_open, this, std::placeholders::_1));\n        m_server.set_close_handler(std::bind(&print_server::on_close, this, std::placeholders::_1));\n        m_server.set_message_handler(std::bind(&print_server::on_message, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void on_open(connection_hdl hdl) {\n        std::lock_guard<std::mutex> lock(m_mutex);\n        int sessionid = m_next_sessionid++;\n        m_connections[sessionid] = {hdl, \"\"};\n        std::cout << \"Connection opened. Session ID: \" << sessionid << std::endl;\n    }\n\n    void on_close(connection_hdl hdl) {\n        std::lock_guard<std::mutex> lock(m_mutex);\n        for (auto it = m_connections.begin(); it != m_connections.end(); ++it) {\n            if (it->second.hdl == hdl) {\n                std::cout << \"Connection closed. Session ID: \" << it->first;\n                if (!it->second.name.empty()) {\n                    std::cout << \", Name: \" << it->second.name;\n                }\n                std::cout << std::endl;\n                m_connections.erase(it);\n                break;\n            }\n        }\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        std::lock_guard<std::mutex> lock(m_mutex);\n        for (auto& [sessionid, conn_info] : m_connections) {\n            if (conn_info.hdl == hdl) {\n                if (conn_info.name.empty()) {\n                    conn_info.name = msg->get_payload();\n                    std::cout << \"Set name to '\" << conn_info.name << \"' for Session ID: \" << sessionid << std::endl;\n                } else {\n                    std::cout << \"Message from \" << conn_info.name << \" (Session ID: \" << sessionid << \"): \" << msg->get_payload() << std::endl;\n                }\n                break;\n            }\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    struct connection_info {\n        connection_hdl hdl;\n        std::string name;\n    };\n\n    int m_next_sessionid = 0;\n    server m_server;\n    std::map<int, connection_info> m_connections;\n    std::mutex m_mutex;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\n#include <iostream>\n#include <map>\n#include <string>\n#include <mutex>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef server::connection_hdl connection_hdl;\n\nclass print_server {\npublic:\n    print_server() {\n        m_server.init_asio();\n        m_server.set_open_handler(websocketpp::lib::bind(\n            &print_server::on_open, this, &m_server::_1));\n        m_server.set_close_handler(websocketpp::lib::bind(\n            &print_server::on_close, this, &m_server::_1));\n        m_server.set_message_handler(websocketpp::lib::bind(\n            &print_server::on_message, this, &m_server::_1, &m_server::_2));\n    }\n\n    void on_open(connection_hdl hdl) {\n        std::lock_guard<std::mutex> lock(m_mutex);\n        int sessionid = m_next_sessionid++;\n        m_connections[sessionid] = {hdl, \"\"};\n        std::cout << \"Connection opened. Session ID: \" << sessionid << std::endl;\n    }\n\n    void on_close(connection_hdl hdl) {\n        std::lock_guard<std::mutex> lock(m_mutex);\n        for (auto it = m_connections.begin(); it != m_connections.end(); ++it) {\n            if (it->second.hdl == hdl) {\n                std::cout << \"Connection closed. Session ID: \" << it->first\n                          << \", Name: \" << it->second.name << std::endl;\n                m_connections.erase(it);\n                break;\n            }\n        }\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        std::lock_guard<std::mutex> lock(m_mutex);\n        for (auto& [sessionid, conn_info] : m_connections) {\n            if (conn_info.hdl == hdl) {\n                if (conn_info.name.empty()) {\n                    conn_info.name = msg->get_payload();\n                    std::cout << \"Name set for session \" << sessionid << \": \"\n                              << conn_info.name << std::endl;\n                } else {\n                    std::cout << \"Message from session \" << sessionid\n                              << \" (\" << conn_info.name << \"): \"\n                              << msg->get_payload() << std::endl;\n                }\n                break;\n            }\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    struct connection_info {\n        connection_hdl hdl;\n        std::string name;\n    };\n\n    int m_next_sessionid = 0;\n    server m_server;\n    std::map<int, connection_info> m_connections;\n    std::mutex m_mutex;\n};\n```"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 44,
    "Instruction": "Task Description: Implement a WebSocket server in C++ using the WebSocket++ library to handle client connections, manage session data, and process incoming messages.\n\nClass Description: The `print_server` class encapsulates a WebSocket server that tracks client connections with session IDs and names, and logs connection events and messages.\n\nAttributes:\n- m_next_sessionid: [int] - Tracks the next available session ID to assign to new connections.\n- m_server: [websocketpp::server<websocketpp::config::asio>] - The WebSocket++ server instance.\n- m_connections: [std::map<connection_hdl,connection_data,std::owner_less<connection_hdl>>] - Maps connection handles to their associated session data.\n\nMethods:\n- print_server(): [Constructor]() -> [void] - Initializes the server and sets up handlers for connection events.\n- on_open: [void]([connection_hdl hdl]) -> [void] - Handles new WebSocket connections by assigning a session ID and storing connection data.\n- on_close: [void]([connection_hdl hdl]) -> [void] - Handles connection closures by logging the event and removing the connection from tracking.\n- on_message: [void]([connection_hdl hdl, server::message_ptr msg]) -> [void] - Processes incoming messages, either setting the client's name or logging received messages.\n- get_data_from_hdl: [connection_data&]([connection_hdl hdl]) -> [connection_data&] - Retrieves connection data for a given handle, throwing an exception if not found.\n- run: [void]([uint16_t port]) -> [void] - Starts the server listening on the specified port and begins accepting connections.",
    "Canonical_solution": "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <map>\n#include <exception>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\nusing websocketpp::connection_hdl;\nusing websocketpp::lib::placeholders::_1;\nusing websocketpp::lib::placeholders::_2;\nusing websocketpp::lib::bind;\n\nstruct connection_data {\n    int sessionid;\n    std::string name;\n};\n\nclass print_server {\npublic:\n    print_server() : m_next_sessionid(1) {\n        m_server.init_asio();\n\n        m_server.set_open_handler(bind(&print_server::on_open,this,::_1));\n        m_server.set_close_handler(bind(&print_server::on_close,this,::_1));\n        m_server.set_message_handler(bind(&print_server::on_message,this,::_1,::_2));\n    }\n\n    void on_open(connection_hdl hdl) {\n        connection_data data;\n\n        data.sessionid = m_next_sessionid++;\n        data.name.clear();\n\n        m_connections[hdl] = data;\n    }\n\n    void on_close(connection_hdl hdl) {\n        connection_data& data = get_data_from_hdl(hdl);\n\n        std::cout << \"Closing connection \" << data.name\n                  << \" with sessionid \" << data.sessionid << std::endl;\n\n        m_connections.erase(hdl);\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        connection_data& data = get_data_from_hdl(hdl);\n\n        if (data.name.empty()) {\n            data.name = msg->get_payload();\n            std::cout << \"Setting name of connection with sessionid \"\n                      << data.sessionid << \" to \" << data.name << std::endl;\n        } else {\n            std::cout << \"Got a message from connection \" << data.name\n                      << \" with sessionid \" << data.sessionid << std::endl;\n        }\n    }\n\n    connection_data& get_data_from_hdl(connection_hdl hdl) {\n        auto it = m_connections.find(hdl);\n\n        if (it == m_connections.end()) {\n            throw std::invalid_argument(\"No data available for session\");\n        }\n\n        return it->second;\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    typedef std::map<connection_hdl,connection_data,std::owner_less<connection_hdl>> con_list;\n\n    int m_next_sessionid;\n    server m_server;\n    con_list m_connections;\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 154,
    "matched_results": [
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\n#include <map>\n#include <string>\n#include <iostream>\n#include <boost/lexical_cast.hpp>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef server::connection_hdl connection_hdl;\n\nstruct connection_data {\n    int sessionid;\n    std::string name;\n};\n\nclass print_server {\npublic:\n    print_server() {\n        m_server.init_asio();\n        m_server.set_reuse_addr(true);\n\n        m_server.set_open_handler(\n            std::bind(&print_server::on_open, this, std::placeholders::_1)\n        );\n\n        m_server.set_close_handler(\n            std::bind(&print_server::on_close, this, std::placeholders::_1)\n        );\n\n        m_server.set_message_handler(\n            std::bind(&print_server::on_message, this, std::placeholders::_1, std::placeholders::_2)\n        );\n    }\n\n    void on_open(connection_hdl hdl) {\n        int sessionid = m_next_sessionid++;\n        connection_data data = {sessionid, \"anonymous\"};\n        m_connections[hdl] = data;\n\n        std::cout << \"Connection opened. Session ID: \" << sessionid << std::endl;\n    }\n\n    void on_close(connection_hdl hdl) {\n        m_connections.erase(hdl);\n        std::cout << \"Connection closed.\" << std::endl;\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        connection_data& data = get_data_from_hdl(hdl);\n        if (msg->get_opcode() == websocketpp::frame::opcode::text) {\n            if (data.name == \"anonymous\") {\n                data.name = msg->get_payload();\n                std::cout << \"Client \" << data.sessionid << \" set name to \" << data.name << std::endl;\n            } else {\n                std::cout << \"Received message from \" << data.name << \": \" << msg->get_payload() << std::endl;\n            }\n        } else {\n            std::cout << \"Received binary message\" << std::endl;\n        }\n    }\n\n    connection_data& get_data_from_hdl(connection_hdl hdl) {\n        auto it = m_connections.find(hdl);\n        if (it == m_connections.end()) {\n            throw std::invalid_argument(\"Unknown connection handle\");\n        }\n        return it->second;\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n\n        std::cout << \"Starting server on port \" << port << std::endl;\n\n        m_server.run();\n    }\n\nprivate:\n    int m_next_sessionid = 0;\n    server m_server;\n    std::map<connection_hdl, connection_data, std::owner_less<connection_hdl>> m_connections;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\n#include <map>\n#include <string>\n#include <iostream>\n#include <boost/bind.hpp>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef server::connection_hdl connection_hdl;\n\nstruct connection_data {\n    int sessionid;\n    std::string name;\n};\n\nclass print_server {\npublic:\n    print_server() {\n        m_server.init_asio();\n        m_server.set_open_handler(boost::bind(&print_server::on_open, this, _1));\n        m_server.set_close_handler(boost::bind(&print_server::on_close, this, _1));\n        m_server.set_message_handler(boost::bind(&print_server::on_message, this, _1, _2));\n    }\n\n    void on_open(connection_hdl hdl) {\n        int sessionid = m_next_sessionid++;\n        connection_data data = {sessionid, \"anonymous\"};\n        m_connections[hdl] = data;\n        std::cout << \"New connection. Session ID: \" << sessionid << std::endl;\n    }\n\n    void on_close(connection_hdl hdl) {\n        m_connections.erase(hdl);\n        std::cout << \"Connection closed.\" << std::endl;\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        connection_data& data = get_data_from_hdl(hdl);\n        if (msg->get_opcode() == websocketpp::frame::opcode::text) {\n            if (data.name == \"anonymous\") {\n                data.name = msg->get_payload();\n                std::cout << \"Client \" << data.sessionid << \" set their name to \" << data.name << std::endl;\n            } else {\n                std::cout << \"Received message from \" << data.name << \": \" << msg->get_payload() << std::endl;\n            }\n        } else {\n            std::cout << \"Received binary message of size \" << msg->get_payload().size() << std::endl;\n        }\n    }\n\n    connection_data& get_data_from_hdl(connection_hdl hdl) {\n        std::map<connection_hdl, connection_data>::iterator it = m_connections.find(hdl);\n        if (it == m_connections.end()) {\n            throw std::invalid_argument(\"Unknown connection handle\");\n        }\n        return it->second;\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    int m_next_sessionid = 0;\n    server m_server;\n    std::map<connection_hdl, connection_data, std::owner_less<connection_hdl>> m_connections;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\n#include <map>\n#include <string>\n#include <iostream>\n#include <stdexcept>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef server::connection_hdl connection_hdl;\n\nstruct connection_data {\n    int sessionid;\n    std::string name;\n};\n\nclass print_server {\npublic:\n    print_server() {\n        m_server.init_asio();\n        m_server.set_reuse_addr(true);\n\n        m_server.set_open_handler(\n            std::bind(&print_server::on_open, this, std::placeholders::_1)\n        );\n\n        m_server.set_close_handler(\n            std::bind(&print_server::on_close, this, std::placeholders::_1)\n        );\n\n        m_server.set_message_handler(\n            std::bind(&print_server::on_message, this, std::placeholders::_1, std::placeholders::_2)\n        );\n    }\n\n    void on_open(connection_hdl hdl) {\n        int sessionid = m_next_sessionid++;\n        m_connections[hdl] = {sessionid, \"unnamed\"};\n        std::cout << \"Connection opened. Session ID: \" << sessionid << std::endl;\n    }\n\n    void on_close(connection_hdl hdl) {\n        connection_data data = get_data_from_hdl(hdl);\n        std::cout << \"Connection closed. Session ID: \" << data.sessionid << std::endl;\n        m_connections.erase(hdl);\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        connection_data& data = get_data_from_hdl(hdl);\n        if (msg->get_opcode() == websocketpp::frame::opcode::text) {\n            if (data.name == \"unnamed\") {\n                data.name = msg->get_payload();\n                std::cout << \"Client name set to: \" << data.name << \" (Session ID: \" << data.sessionid << \")\" << std::endl;\n            } else {\n                std::cout << \"Message from \" << data.name << \" (Session ID: \" << data.sessionid << \"): \" << msg->get_payload() << std::endl;\n            }\n        } else {\n            std::cout << \"Received binary message from \" << data.name << \" (Session ID: \" << data.sessionid << \"). Size: \" << msg->get_payload().size() << std::endl;\n        }\n    }\n\n    connection_data& get_data_from_hdl(connection_hdl hdl) {\n        auto it = m_connections.find(hdl);\n        if (it != m_connections.end()) {\n            return it->second;\n        }\n        throw std::invalid_argument(\"Unknown connection handle\");\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    int m_next_sessionid = 0;\n    server m_server;\n    std::map<connection_hdl, connection_data, std::owner_less<connection_hdl>> m_connections;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\n#include <map>\n#include <string>\n#include <iostream>\n#include <boost/lexical_cast.hpp>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef server::connection_hdl connection_hdl;\n\nstruct connection_data {\n    int sessionid;\n    std::string name;\n};\n\nclass print_server {\npublic:\n    print_server() {\n        m_server.init_asio();\n        m_server.set_reuse_addr(true);\n\n        m_server.set_open_handler(\n            std::bind(&print_server::on_open, this, std::placeholders::_1)\n        );\n\n        m_server.set_close_handler(\n            std::bind(&print_server::on_close, this, std::placeholders::_1)\n        );\n\n        m_server.set_message_handler(\n            std::bind(&print_server::on_message, this, std::placeholders::_1, std::placeholders::_2)\n        );\n    }\n\n    void on_open(connection_hdl hdl) {\n        int sessionid = m_next_sessionid++;\n        m_connections[hdl] = {sessionid, \"unnamed\"};\n        std::cout << \"Connection opened. Session ID: \" << sessionid << std::endl;\n    }\n\n    void on_close(connection_hdl hdl) {\n        try {\n            connection_data data = get_data_from_hdl(hdl);\n            std::cout << \"Connection closed. Session ID: \" << data.sessionid << std::endl;\n            m_connections.erase(hdl);\n        } catch (const std::exception& e) {\n            std::cerr << \"Error closing connection: \" << e.what() << std::endl;\n        }\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        try {\n            connection_data& data = get_data_from_hdl(hdl);\n            if (msg->get_opcode() == websocketpp::frame::opcode::text) {\n                if (data.name == \"unnamed\") {\n                    data.name = msg->get_payload();\n                    std::cout << \"Client set name to: \" << data.name << std::endl;\n                } else {\n                    std::cout << \"Message from [\" << data.name << \", \" << data.sessionid << \"]: \"\n                              << msg->get_payload() << std::endl;\n                }\n            } else {\n                std::cout << \"Received binary message of size: \" << msg->get_payload().size()\n                          << \" from session ID: \" << data.sessionid << std::endl;\n            }\n        } catch (const std::exception& e) {\n            std::cerr << \"Error processing message: \" << e.what() << std::endl;\n        }\n    }\n\n    connection_data& get_data_from_hdl(connection_hdl hdl) {\n        auto it = m_connections.find(hdl);\n        if (it == m_connections.end()) {\n            throw std::runtime_error(\"Connection handle not found\");\n        }\n        return it->second;\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    int m_next_sessionid = 1;\n    server m_server;\n    std::map<connection_hdl, connection_data, std::owner_less<connection_hdl>> m_connections;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\n#include <map>\n#include <string>\n#include <iostream>\n#include <mutex>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef server::connection_hdl connection_hdl;\n\nstruct connection_data {\n    int sessionid;\n    std::string name;\n};\n\nclass print_server {\npublic:\n    print_server() {\n        m_server.init_asio();\n        m_server.set_open_handler(std::bind(&print_server::on_open, this, std::placeholders::_1));\n        m_server.set_close_handler(std::bind(&print_server::on_close, this, std::placeholders::_1));\n        m_server.set_message_handler(std::bind(&print_server::on_message, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void on_open(connection_hdl hdl) {\n        std::lock_guard<std::mutex> lock(m_connections_mutex);\n        int sessionid = m_next_sessionid++;\n        m_connections[hdl] = {sessionid, \"anonymous\"};\n        std::cout << \"Connection opened. Session ID: \" << sessionid << std::endl;\n    }\n\n    void on_close(connection_hdl hdl) {\n        std::lock_guard<std::mutex> lock(m_connections_mutex);\n        auto it = m_connections.find(hdl);\n        if (it != m_connections.end()) {\n            std::cout << \"Connection closed. Session ID: \" << it->second.sessionid << std::endl;\n            m_connections.erase(it);\n        }\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        std::lock_guard<std::mutex> lock(m_connections_mutex);\n        connection_data& data = get_data_from_hdl(hdl);\n        if (msg->get_opcode() == websocketpp::frame::opcode::text) {\n            if (data.name == \"anonymous\") {\n                data.name = msg->get_payload();\n                std::cout << \"Client with session ID \" << data.sessionid << \" set their name to \" << data.name << std::endl;\n            } else {\n                std::cout << \"Message from \" << data.name << \" (Session ID: \" << data.sessionid << \"): \" << msg->get_payload() << std::endl;\n            }\n        } else {\n            std::cout << \"Received binary message from \" << data.name << \" (Session ID: \" << data.sessionid << \")\" << std::endl;\n        }\n    }\n\n    connection_data& get_data_from_hdl(connection_hdl hdl) {\n        std::lock_guard<std::mutex> lock(m_connections_mutex);\n        auto it = m_connections.find(hdl);\n        if (it == m_connections.end()) {\n            throw std::invalid_argument(\"Invalid connection handle\");\n        }\n        return it->second;\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    int m_next_sessionid = 0;\n    server m_server;\n    std::map<connection_hdl, connection_data, std::owner_less<connection_hdl>> m_connections;\n    std::mutex m_connections_mutex;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\n#include <map>\n#include <string>\n#include <iostream>\n#include <boost/bind.hpp>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef server::connection_hdl connection_hdl;\n\nstruct connection_data {\n    int sessionid;\n    std::string name;\n};\n\nclass print_server {\npublic:\n    print_server() {\n        m_server.init_asio();\n        m_server.set_open_handler(boost::bind(&print_server::on_open, this, _1));\n        m_server.set_close_handler(boost::bind(&print_server::on_close, this, _1));\n        m_server.set_message_handler(boost::bind(&print_server::on_message, this, _1, _2));\n    }\n\n    void on_open(connection_hdl hdl) {\n        int sessionid = m_next_sessionid++;\n        connection_data data = {sessionid, \"unnamed\"};\n        m_connections[hdl] = data;\n        std::cout << \"Connection opened. Session ID: \" << sessionid << std::endl;\n    }\n\n    void on_close(connection_hdl hdl) {\n        connection_data& data = get_data_from_hdl(hdl);\n        std::cout << \"Connection closed. Session ID: \" << data.sessionid << std::endl;\n        m_connections.erase(hdl);\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        connection_data& data = get_data_from_hdl(hdl);\n        if (msg->get_opcode() == websocketpp::frame::opcode::text) {\n            if (data.name == \"unnamed\") {\n                data.name = msg->get_payload();\n                std::cout << \"Client name set to: \" << data.name << \" (Session ID: \" << data.sessionid << \")\" << std::endl;\n            } else {\n                std::cout << \"Message from \" << data.name << \" (Session ID: \" << data.sessionid << \"): \" << msg->get_payload() << std::endl;\n            }\n        } else {\n            std::cout << \"Received binary message from \" << data.name << \" (Session ID: \" << data.sessionid << \") of length \" << msg->get_payload().size() << std::endl;\n        }\n    }\n\n    connection_data& get_data_from_hdl(connection_hdl hdl) {\n        std::map<connection_hdl, connection_data>::iterator it = m_connections.find(hdl);\n        if (it == m_connections.end()) {\n            throw std::invalid_argument(\"Unknown connection handle\");\n        }\n        return it->second;\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    int m_next_sessionid = 0;\n    server m_server;\n    std::map<connection_hdl, connection_data, std::owner_less<connection_hdl>> m_connections;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\n#include <map>\n#include <string>\n#include <iostream>\n#include <boost/lexical_cast.hpp>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef server::connection_hdl connection_hdl;\n\nstruct connection_data {\n    int sessionid;\n    std::string name;\n};\n\nclass print_server {\npublic:\n    print_server() {\n        m_server.init_asio();\n        m_server.set_reuse_addr(true);\n\n        m_server.set_open_handler(\n            std::bind(&print_server::on_open, this, std::placeholders::_1)\n        );\n        m_server.set_close_handler(\n            std::bind(&print_server::on_close, this, std::placeholders::_1)\n        );\n        m_server.set_message_handler(\n            std::bind(&print_server::on_message, this, std::placeholders::_1, std::placeholders::_2)\n        );\n    }\n\n    void on_open(connection_hdl hdl) {\n        int sessionid = m_next_sessionid++;\n        connection_data data = {sessionid, \"unnamed\"};\n        m_connections[hdl] = data;\n\n        std::cout << \"Connection opened. Session ID: \" << sessionid << std::endl;\n    }\n\n    void on_close(connection_hdl hdl) {\n        m_connections.erase(hdl);\n        std::cout << \"Connection closed.\" << std::endl;\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        try {\n            connection_data& data = get_data_from_hdl(hdl);\n            if (msg->get_opcode() == websocketpp::frame::opcode::text) {\n                if (data.name.empty()) {\n                    data.name = msg->get_payload();\n                    std::cout << \"Client \" << data.sessionid << \" set their name to: \" << data.name << std::endl;\n                } else {\n                    std::cout << \"Message from client \" << data.sessionid << \" (\" << data.name << \"): \" << msg->get_payload() << std::endl;\n                }\n            } else {\n                std::cout << \"Received binary message from client \" << data.sessionid << std::endl;\n            }\n        } catch (const std::exception& e) {\n            std::cerr << \"Error handling message: \" << e.what() << std::endl;\n        }\n    }\n\n    connection_data& get_data_from_hdl(connection_hdl hdl) {\n        auto it = m_connections.find(hdl);\n        if (it == m_connections.end()) {\n            throw std::runtime_error(\"No connection data found for handle\");\n        }\n        return it->second;\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    int m_next_sessionid = 0;\n    server m_server;\n    std::map<connection_hdl, connection_data, std::owner_less<connection_hdl>> m_connections;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\n#include <map>\n#include <string>\n#include <iostream>\n#include <stdexcept>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef server::connection_hdl connection_hdl;\n\nstruct connection_data {\n    int sessionid;\n    std::string name;\n};\n\nclass print_server {\npublic:\n    print_server() {\n        m_server.init_asio();\n        m_server.set_open_handler(std::bind(&print_server::on_open, this, std::placeholders::_1));\n        m_server.set_close_handler(std::bind(&print_server::on_close, this, std::placeholders::_1));\n        m_server.set_message_handler(std::bind(&print_server::on_message, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void on_open(connection_hdl hdl) {\n        int sessionid = m_next_sessionid++;\n        connection_data data = {sessionid, \"unknown\"};\n        m_connections[hdl] = data;\n        std::cout << \"New connection. Session ID: \" << sessionid << std::endl;\n    }\n\n    void on_close(connection_hdl hdl) {\n        connection_data& data = get_data_from_hdl(hdl);\n        std::cout << \"Connection closed. Session ID: \" << data.sessionid << std::endl;\n        m_connections.erase(hdl);\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        connection_data& data = get_data_from_hdl(hdl);\n        if (msg->get_opcode() == websocketpp::frame::opcode::text) {\n            if (data.name == \"unknown\") {\n                data.name = msg->get_payload();\n                std::cout << \"Client set their name to: \" << data.name << \" (Session ID: \" << data.sessionid << \")\" << std::endl;\n            } else {\n                std::cout << \"Received message from \" << data.name << \" (Session ID: \" << data.sessionid << \"): \" << msg->get_payload() << std::endl;\n            }\n        } else {\n            std::cout << \"Received binary message from \" << data.name << \" (Session ID: \" << data.sessionid << \") of length \" << msg->get_payload().size() << std::endl;\n        }\n    }\n\n    connection_data& get_data_from_hdl(connection_hdl hdl) {\n        auto it = m_connections.find(hdl);\n        if (it == m_connections.end()) {\n            throw std::invalid_argument(\"Unknown connection handle\");\n        }\n        return it->second;\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    int m_next_sessionid = 0;\n    server m_server;\n    std::map<connection_hdl, connection_data, std::owner_less<connection_hdl>> m_connections;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\n#include <map>\n#include <string>\n#include <iostream>\n#include <mutex>\n#include <stdexcept>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef server::connection_hdl connection_hdl;\n\nstruct connection_data {\n    int sessionid;\n    std::string name;\n};\n\nclass print_server {\npublic:\n    print_server() {\n        m_server.init_asio();\n        m_server.set_reuse_addr(true);\n\n        m_server.set_open_handler(std::bind(&print_server::on_open, this, std::placeholders::_1));\n        m_server.set_close_handler(std::bind(&print_server::on_close, this, std::placeholders::_1));\n        m_server.set_message_handler(std::bind(&print_server::on_message, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void on_open(connection_hdl hdl) {\n        std::lock_guard<std::mutex> lock(m_connections_mutex);\n        int sessionid = m_next_sessionid++;\n        m_connections[hdl] = {sessionid, \"unknown\"};\n        std::cout << \"Connection opened. Session ID: \" << sessionid << std::endl;\n    }\n\n    void on_close(connection_hdl hdl) {\n        std::lock_guard<std::mutex> lock(m_connections_mutex);\n        auto it = m_connections.find(hdl);\n        if (it != m_connections.end()) {\n            std::cout << \"Connection closed. Session ID: \" << it->second.sessionid << std::endl;\n            m_connections.erase(it);\n        }\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        std::lock_guard<std::mutex> lock(m_connections_mutex);\n        connection_data& data = get_data_from_hdl(hdl);\n        if (msg->get_opcode() == websocketpp::frame::opcode::text) {\n            if (data.name == \"unknown\") {\n                data.name = msg->get_payload();\n                std::cout << \"Client set name to: \" << data.name << \" (Session ID: \" << data.sessionid << \")\" << std::endl;\n            } else {\n                std::cout << \"Message from \" << data.name << \" (Session ID: \" << data.sessionid << \"): \" << msg->get_payload() << std::endl;\n            }\n        } else {\n            std::cout << \"Received binary message from client (Session ID: \" << data.sessionid << \"). Size: \" << msg->get_payload().size() << std::endl;\n        }\n    }\n\n    connection_data& get_data_from_hdl(connection_hdl hdl) {\n        auto it = m_connections.find(hdl);\n        if (it == m_connections.end()) {\n            throw std::runtime_error(\"Connection handle not found\");\n        }\n        return it->second;\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    int m_next_sessionid = 0;\n    server m_server;\n    std::map<connection_hdl, connection_data, std::owner_less<connection_hdl>> m_connections;\n    std::mutex m_connections_mutex;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\n#include <map>\n#include <string>\n#include <iostream>\n#include <boost/lexical_cast.hpp>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef server::connection_hdl connection_hdl;\n\nstruct connection_data {\n    int sessionid;\n    std::string name;\n};\n\nclass print_server {\npublic:\n    print_server() {\n        m_server.init_asio();\n        m_server.set_reuse_addr(true);\n\n        m_server.set_open_handler(\n            std::bind(&print_server::on_open, this, std::placeholders::_1)\n        );\n\n        m_server.set_close_handler(\n            std::bind(&print_server::on_close, this, std::placeholders::_1)\n        );\n\n        m_server.set_message_handler(\n            std::bind(&print_server::on_message, this, std::placeholders::_1, std::placeholders::_2)\n        );\n    }\n\n    void on_open(connection_hdl hdl) {\n        int sessionid = m_next_sessionid++;\n        connection_data data = {sessionid, \"unnamed\"};\n        m_connections[hdl] = data;\n\n        std::cout << \"Connection opened: session \" << sessionid << std::endl;\n    }\n\n    void on_close(connection_hdl hdl) {\n        m_connections.erase(hdl);\n        std::cout << \"Connection closed\" << std::endl;\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        connection_data& data = get_data_from_hdl(hdl);\n        if (msg->get_opcode() == websocketpp::frame::opcode::text) {\n            if (data.name == \"unnamed\") {\n                data.name = msg->get_payload();\n                std::cout << \"Client \" << data.sessionid << \" set their name to \" << data.name << std::endl;\n            } else {\n                std::cout << \"Received message from \" << data.name << \": \" << msg->get_payload() << std::endl;\n            }\n        } else {\n            std::cout << \"Received binary message of size \" << msg->get_payload().size() << std::endl;\n        }\n    }\n\n    connection_data& get_data_from_hdl(connection_hdl hdl) {\n        auto it = m_connections.find(hdl);\n        if (it == m_connections.end()) {\n            throw std::invalid_argument(\"Unknown connection handle\");\n        }\n        return it->second;\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    int m_next_sessionid = 0;\n    server m_server;\n    std::map<connection_hdl, connection_data, std::owner_less<connection_hdl>> m_connections;\n};\n```"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 45,
    "Instruction": "Task Description: Implement a WebSocket server in C++ using the WebSocket++ library that can handle multiple client connections and broadcast messages to all connected clients.\n\nClass Description: The `broadcast_server` class implements a WebSocket server that maintains a set of active connections and broadcasts incoming messages to all connected clients.\n\nAttributes:\n- m_server: [server] - The WebSocket++ server instance that handles network communication.\n- m_connections: [con_list] - A set of active connection handles to keep track of connected clients.\n\nMethods:\n- broadcast_server(): [Constructor]() -> [void] - Initializes the WebSocket++ server and sets up handlers for connection events (open, close, message).\n- on_open: [void]([connection_hdl hdl]) -> [void] - Handler for new client connections; adds the connection handle to the active connections set.\n- on_close: [void]([connection_hdl hdl]) -> [void] - Handler for client disconnections; removes the connection handle from the active connections set.\n- on_message: [void]([connection_hdl hdl, server::message_ptr msg]) -> [void] - Handler for incoming messages; broadcasts the received message to all connected clients.\n- run: [void]([uint16_t port]) -> [void] - Starts the server, begins listening on the specified port, and enters the event loop to handle connections and messages.",
    "Canonical_solution": "#include <set>\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\nusing websocketpp::connection_hdl;\nusing websocketpp::lib::placeholders::_1;\nusing websocketpp::lib::placeholders::_2;\nusing websocketpp::lib::bind;\n\nclass broadcast_server {\npublic:\n    broadcast_server() {\n        m_server.init_asio();\n                \n        m_server.set_open_handler(bind(&broadcast_server::on_open,this,::_1));\n        m_server.set_close_handler(bind(&broadcast_server::on_close,this,::_1));\n        m_server.set_message_handler(bind(&broadcast_server::on_message,this,::_1,::_2));\n    }\n    \n    void on_open(connection_hdl hdl) {\n        m_connections.insert(hdl);\n    }\n    \n    void on_close(connection_hdl hdl) {\n        m_connections.erase(hdl);\n    }\n    \n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        for (auto it : m_connections) {\n            m_server.send(it,msg);\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\nprivate:\n    typedef std::set<connection_hdl,std::owner_less<connection_hdl>> con_list;\n\n    server m_server;\n    con_list m_connections;\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 154,
    "matched_results": [
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef server::connection_hdl connection_hdl;\ntypedef std::set<connection_hdl> con_list;\n\nclass broadcast_server {\npublic:\n    broadcast_server() {\n        m_server.init_asio();\n        m_server.set_open_handler(std::bind(&broadcast_server::on_open, this, std::placeholders::_1));\n        m_server.set_close_handler(std::bind(&broadcast_server::on_close, this, std::placeholders::_1));\n        m_server.set_message_handler(std::bind(&broadcast_server::on_message, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void on_open(connection_hdl hdl) {\n        m_connections.insert(hdl);\n    }\n\n    void on_close(connection_hdl hdl) {\n        m_connections.erase(hdl);\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        for (auto it = m_connections.begin(); it != m_connections.end(); ++it) {\n            try {\n                m_server.send(*it, msg->get_payload(), msg->get_opcode());\n            } catch (...) {\n                // Handle send errors if needed\n            }\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    server m_server;\n    con_list m_connections;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef server::connection_hdl connection_hdl;\ntypedef std::set<connection_hdl> con_list;\n\nclass broadcast_server {\npublic:\n    broadcast_server() {\n        m_server.init_asio();\n        m_server.set_open_handler(std::bind(&broadcast_server::on_open, this, std::placeholders::_1));\n        m_server.set_close_handler(std::bind(&broadcast_server::on_close, this, std::placeholders::_1));\n        m_server.set_message_handler(std::bind(&broadcast_server::on_message, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void on_open(connection_hdl hdl) {\n        m_connections.insert(hdl);\n    }\n\n    void on_close(connection_hdl hdl) {\n        m_connections.erase(hdl);\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        for (auto const& conn : m_connections) {\n            m_server.send(conn, msg->get_payload(), msg->get_opcode());\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    server m_server;\n    con_list m_connections;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef server::connection_hdl connection_hdl;\ntypedef std::set<connection_hdl> con_list;\n\nclass broadcast_server {\npublic:\n    broadcast_server() {\n        m_server.init_asio();\n        m_server.set_open_handler(std::bind(&broadcast_server::on_open, this, std::placeholders::_1));\n        m_server.set_close_handler(std::bind(&broadcast_server::on_close, this, std::placeholders::_1));\n        m_server.set_message_handler(std::bind(&broadcast_server::on_message, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void on_open(connection_hdl hdl) {\n        m_connections.insert(hdl);\n    }\n\n    void on_close(connection_hdl hdl) {\n        m_connections.erase(hdl);\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        for (auto const& conn : m_connections) {\n            m_server.send(conn, msg->get_payload(), msg->get_opcode());\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    server m_server;\n    con_list m_connections;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef server::connection_hdl connection_hdl;\ntypedef std::set<connection_hdl> con_list;\n\nclass broadcast_server {\npublic:\n    broadcast_server() {\n        m_server.init_asio();\n        m_server.set_open_handler(std::bind(&broadcast_server::on_open, this, std::placeholders::_1));\n        m_server.set_close_handler(std::bind(&broadcast_server::on_close, this, std::placeholders::_1));\n        m_server.set_message_handler(std::bind(&broadcast_server::on_message, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void on_open(connection_hdl hdl) {\n        m_connections.insert(hdl);\n    }\n\n    void on_close(connection_hdl hdl) {\n        m_connections.erase(hdl);\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        for (auto it = m_connections.begin(); it != m_connections.end(); ++it) {\n            m_server.send(*it, msg->get_payload(), msg->get_opcode());\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    server m_server;\n    con_list m_connections;\n};\n```"
    ],
    "unmatched_results": [
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef server::connection_hdl connection_hdl;\ntypedef std::set<connection_hdl> con_list;\n\nclass broadcast_server {\npublic:\n    broadcast_server() {\n        m_server.set_open_handler(bind(&broadcast_server::on_open, this,::_1));\n        m_server.set_close_handler(bind(&broadcast_server::on_close, this,::_1));\n        m_server.set_message_handler(bind(&broadcast_server::on_message, this,::_1,::_2));\n    }\n\n    void on_open(connection_hdl hdl) {\n        m_connections.insert(hdl);\n    }\n\n    void on_close(connection_hdl hdl) {\n        m_connections.erase(hdl);\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        for (auto it = m_connections.begin(); it != m_connections.end(); ++it) {\n            m_server.send(*it, msg->get_payload(), msg->get_opcode());\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.init_asio();\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    server m_server;\n    con_list m_connections;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef server::connection_hdl connection_hdl;\ntypedef std::set<connection_hdl> con_list;\n\nclass broadcast_server {\npublic:\n    broadcast_server() {\n        m_server.set_open_handler(std::bind(&broadcast_server::on_open, this, std::placeholders::_1));\n        m_server.set_close_handler(std::bind(&broadcast_server::on_close, this, std::placeholders::_1));\n        m_server.set_message_handler(std::bind(&broadcast_server::on_message, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void on_open(connection_hdl hdl) {\n        m_connections.insert(hdl);\n    }\n\n    void on_close(connection_hdl hdl) {\n        m_connections.erase(hdl);\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        for (auto const& conn : m_connections) {\n            m_server.send(conn, msg->get_payload(), msg->get_opcode());\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.init_asio();\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    server m_server;\n    con_list m_connections;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef server::connection_hdl connection_hdl;\ntypedef std::set<connection_hdl> con_list;\n\nclass broadcast_server {\npublic:\n    broadcast_server() {\n        m_server.set_open_handler(bind(&broadcast_server::on_open, this,::_1));\n        m_server.set_close_handler(bind(&broadcast_server::on_close, this,::_1));\n        m_server.set_message_handler(bind(&broadcast_server::on_message, this,::_1,::_2));\n    }\n\n    void on_open(connection_hdl hdl) {\n        m_connections.insert(hdl);\n    }\n\n    void on_close(connection_hdl hdl) {\n        m_connections.erase(hdl);\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        for (auto it = m_connections.begin(); it != m_connections.end(); ++it) {\n            try {\n                m_server.send(*it, msg->get_payload(), msg->get_opcode());\n            } catch (...) {\n            }\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.init_asio();\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    server m_server;\n    con_list m_connections;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef server::connection_hdl connection_hdl;\ntypedef std::set<connection_hdl> con_list;\n\nclass broadcast_server {\npublic:\n    broadcast_server() {\n        m_server.set_open_handler(std::bind(&broadcast_server::on_open, this,::_1));\n        m_server.set_close_handler(std::bind(&broadcast_server::on_close, this,::_1));\n        m_server.set_message_handler(std::bind(&broadcast_server::on_message, this,::_1,::_2));\n    }\n\n    void on_open(connection_hdl hdl) {\n        m_connections.insert(hdl);\n    }\n\n    void on_close(connection_hdl hdl) {\n        m_connections.erase(hdl);\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        for (auto it = m_connections.begin(); it != m_connections.end(); ++it) {\n            try {\n                m_server.send(*it, msg->get_payload(), msg->get_opcode());\n            } catch (...) {\n            }\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.init_asio();\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    server m_server;\n    con_list m_connections;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef server::connection_hdl connection_hdl;\ntypedef std::set<connection_hdl> con_list;\n\nclass broadcast_server {\npublic:\n    broadcast_server() {\n        m_server.set_open_handler(std::bind(&broadcast_server::on_open, this,::_1));\n        m_server.set_close_handler(std::bind(&broadcast_server::on_close, this,::_1));\n        m_server.set_message_handler(std::bind(&broadcast_server::on_message, this,::_1,::_2));\n    }\n\n    void on_open(connection_hdl hdl) {\n        m_connections.insert(hdl);\n    }\n\n    void on_close(connection_hdl hdl) {\n        m_connections.erase(hdl);\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        for (auto it = m_connections.begin(); it != m_connections.end(); ++it) {\n            m_server.send(*it, msg->get_payload(), msg->get_opcode());\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.init_asio();\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    server m_server;\n    con_list m_connections;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef server::connection_hdl connection_hdl;\ntypedef std::set<connection_hdl> con_list;\n\nclass broadcast_server {\npublic:\n    broadcast_server() {\n        m_server.set_open_handler(bind(&broadcast_server::on_open, this,::_1));\n        m_server.set_close_handler(bind(&broadcast_server::on_close, this,::_1));\n        m_server.set_message_handler(bind(&broadcast_server::on_message, this,::_1,::_2));\n    }\n\n    void on_open(connection_hdl hdl) {\n        m_connections.insert(hdl);\n    }\n\n    void on_close(connection_hdl hdl) {\n        m_connections.erase(hdl);\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        for (auto it = m_connections.begin(); it != m_connections.end(); ++it) {\n            try {\n                m_server.send(*it, msg->get_payload(), msg->get_opcode());\n            } catch (...) {}\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.init_asio();\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    server m_server;\n    con_list m_connections;\n};\n```"
    ],
    "match_count": 4,
    "pass@3": 0.8333333333333334,
    "pass@5": 0.9761904761904762
  },
  {
    "Task_id": 46,
    "Instruction": "Task Description: Implement a WebSocket server in C++ using the WebSocket++ library to handle client connections and echo back received messages.\n\nClass Description: The utility_server class encapsulates a WebSocket server that listens for incoming connections, receives messages from clients, and echoes them back. It uses WebSocket++ with ASIO for network handling.\n\nAttributes:\n- m_endpoint: [server] - The WebSocket++ server instance that manages connections and message handling.\n\nMethods:\n- utility_server() - [Constructor] -> [void] - Initializes the server with logging settings, ASIO, and sets up the message handler.\n- echo_handler(websocketpp::connection_hdl hdl, server::message_ptr msg) -> [void] - Handles incoming messages by echoing them back to the client.\n- run() -> [void] - Starts the server, begins listening on port 9002, and runs the ASIO event loop.",
    "Canonical_solution": "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <functional>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\n\nclass utility_server {\npublic:\n    utility_server() {\n         // Set logging settings\n        m_endpoint.set_error_channels(websocketpp::log::elevel::all);\n        m_endpoint.set_access_channels(websocketpp::log::alevel::all ^ websocketpp::log::alevel::frame_payload);\n\n        // Initialize Asio\n        m_endpoint.init_asio();\n\n        // Set the default message handler to the echo handler\n        m_endpoint.set_message_handler(std::bind(\n            &utility_server::echo_handler, this,\n            std::placeholders::_1, std::placeholders::_2\n        ));\n    }\n\n    void echo_handler(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        // write a new message\n        m_endpoint.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    void run() {\n        // Listen on port 9002\n        m_endpoint.listen(9002);\n\n        // Queues a connection accept operation\n        m_endpoint.start_accept();\n\n        // Start the Asio io_service run loop\n        m_endpoint.run();\n    }\nprivate:\n    server m_endpoint;\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 154,
    "matched_results": [
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\nusing namespace websocketpp;\n\nclass utility_server {\npublic:\n    typedef server<config::asio> server;\n\n    utility_server() {\n        m_endpoint.set_access_channels(log::alevel::all);\n        m_endpoint.clear_access_channels(log::alevel::frame_payload);\n        m_endpoint.init_asio();\n        m_endpoint.set_message_handler(bind(&utility_server::echo_handler, this, ::_1, ::_2));\n    }\n\n    void echo_handler(connection_hdl hdl, message_ptr msg) {\n        m_endpoint.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    void run() {\n        m_endpoint.listen(9002);\n        m_endpoint.start_accept();\n        m_endpoint.run();\n    }\n\nprivate:\n    server m_endpoint;\n};\n```",
      "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\nclass utility_server {\npublic:\n    typedef websocketpp::server<websocketpp::config::asio> server;\n\n    utility_server() {\n        m_endpoint.set_access_channels(websocketpp::log::alevel::none);\n        m_endpoint.clear_access_channels(websocketpp::log::alevel::all);\n        m_endpoint.init_asio();\n        m_endpoint.set_message_handler(\n            [this](websocketpp::connection_hdl hdl, server::message_ptr msg) {\n                echo_handler(hdl, msg);\n            });\n    }\n\n    void run() {\n        m_endpoint.listen(9002);\n        m_endpoint.start_accept();\n        m_endpoint.run();\n    }\n\nprivate:\n    server m_endpoint;\n\n    void echo_handler(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        m_endpoint.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n};",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\nusing namespace websocketpp;\n\nclass utility_server {\npublic:\n    typedef server<config::asio> server;\n\n    utility_server() {\n        m_endpoint.set_access_channels(log::alevel::all);\n        m_endpoint.clear_access_channels(log::alevel::frame_payload);\n\n        m_endpoint.init_asio();\n\n        m_endpoint.set_message_handler(bind(&utility_server::echo_handler, this, ::_1, ::_2));\n    }\n\n    void echo_handler(connection_hdl hdl, message_ptr msg) {\n        m_endpoint.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    void run() {\n        m_endpoint.listen(9002);\n        m_endpoint.start_accept();\n        m_endpoint.run();\n    }\n\nprivate:\n    server m_endpoint;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\nusing namespace websocketpp;\n\nclass utility_server {\npublic:\n    typedef server<config::asio> server;\n\n    utility_server() {\n        m_endpoint.set_access_channels(log::alevel::all);\n        m_endpoint.clear_access_channels(log::alevel::frame_payload);\n\n        m_endpoint.init_asio();\n\n        m_endpoint.set_message_handler(bind(&utility_server::echo_handler, this, ::_1, ::_2));\n    }\n\n    void echo_handler(connection_hdl hdl, message_ptr msg) {\n        m_endpoint.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    void run() {\n        m_endpoint.listen(9002);\n        m_endpoint.start_accept();\n        m_endpoint.run();\n    }\n\nprivate:\n    server m_endpoint;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\nusing namespace websocketpp;\n\nclass utility_server {\npublic:\n    typedef server<config::asio> server;\n\n    utility_server() {\n        m_endpoint.set_access_channels(log::alevel::all);\n        m_endpoint.clear_access_channels(log::alevel::frame_payload);\n        m_endpoint.init_asio();\n        m_endpoint.set_message_handler(bind(&utility_server::echo_handler, this, ::_1, ::_2));\n    }\n\n    void echo_handler(connection_hdl hdl, message_ptr msg) {\n        m_endpoint.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    void run() {\n        m_endpoint.listen(9002);\n        m_endpoint.start_accept();\n        m_endpoint.run();\n    }\n\nprivate:\n    server m_endpoint;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\nusing namespace websocketpp;\n\nclass utility_server {\npublic:\n    typedef server<config::asio> server;\n\n    utility_server() {\n        m_endpoint.set_access_channels(log::alevel::all);\n        m_endpoint.clear_access_channels(log::alevel::frame_payload);\n\n        m_endpoint.init_asio();\n\n        m_endpoint.set_message_handler(bind(&utility_server::echo_handler, this, ::_1, ::_2));\n    }\n\n    void echo_handler(connection_hdl hdl, message_ptr msg) {\n        m_endpoint.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    void run() {\n        m_endpoint.listen(9002);\n        m_endpoint.start_accept();\n        m_endpoint.run();\n    }\n\nprivate:\n    server m_endpoint;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\nusing namespace websocketpp;\n\nclass utility_server {\npublic:\n    typedef server<config::asio> server;\n\n    utility_server() {\n        m_endpoint.set_access_channels(log::alevel::all);\n        m_endpoint.clear_access_channels(log::alevel::frame_payload);\n\n        m_endpoint.init_asio();\n\n        m_endpoint.set_message_handler(bind(&utility_server::echo_handler, this, ::_1, ::_2));\n    }\n\n    void echo_handler(connection_hdl hdl, message_ptr msg) {\n        m_endpoint.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    void run() {\n        m_endpoint.listen(9002);\n        m_endpoint.start_accept();\n        m_endpoint.run();\n    }\n\nprivate:\n    server m_endpoint;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\nusing namespace websocketpp;\n\nclass utility_server {\npublic:\n    typedef server<config::asio> server;\n\n    utility_server() {\n        m_endpoint.set_access_channels(log::alevel::all);\n        m_endpoint.clear_access_channels(log::alevel::frame_payload);\n        m_endpoint.init_asio();\n        m_endpoint.set_message_handler(bind(&utility_server::echo_handler, this, ::_1, ::_2));\n    }\n\n    void echo_handler(connection_hdl hdl, message_ptr msg) {\n        m_endpoint.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    void run() {\n        m_endpoint.listen(9002);\n        m_endpoint.start_accept();\n        m_endpoint.run();\n    }\n\nprivate:\n    server m_endpoint;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\nusing namespace websocketpp;\n\nclass utility_server {\npublic:\n    typedef server<config::asio> server;\n\n    utility_server() {\n        m_endpoint.set_access_channels(log::alevel::all);\n        m_endpoint.clear_access_channels(log::alevel::frame_payload);\n        m_endpoint.init_asio();\n        m_endpoint.set_message_handler(bind(&utility_server::echo_handler, this, ::_1, ::_2));\n    }\n\n    void echo_handler(connection_hdl hdl, message_ptr msg) {\n        m_endpoint.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    void run() {\n        m_endpoint.listen(9002);\n        m_endpoint.start_accept();\n        m_endpoint.run();\n    }\n\nprivate:\n    server m_endpoint;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\nusing namespace websocketpp;\n\nclass utility_server {\npublic:\n    typedef server<config::asio> server;\n\n    utility_server() {\n        m_endpoint.set_access_channels(log::alevel::all);\n        m_endpoint.clear_access_channels(log::alevel::frame_payload);\n        m_endpoint.init_asio();\n        m_endpoint.set_message_handler(bind(&utility_server::echo_handler, this, ::_1, ::_2));\n    }\n\n    void echo_handler(connection_hdl hdl, message_ptr msg) {\n        m_endpoint.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    void run() {\n        m_endpoint.listen(9002);\n        m_endpoint.start_accept();\n        m_endpoint.run();\n    }\n\nprivate:\n    server m_endpoint;\n};\n```"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 47,
    "Instruction": "Task Description: Implement a WebSocket server class in C++ using the WebSocket++ library to handle client connections, process incoming messages, and manage server events.\n\nClass Description: The WebSocketServer class encapsulates a WebSocket++ server instance, providing methods to initialize, configure, and run the server. It handles WebSocket connections, processes messages, and manages various server events like HTTP requests, connection failures, and closures.\n\nAttributes:\n- m_server: [websocketpp::server<websocketpp::config::debug_asio>] - The main WebSocket++ server instance that manages connections and events.\n\nMethods:\n- WebSocketServer() -> [Constructor] - Initializes the server with default settings, configures logging, sets up ASIO, and registers event handlers.\n- run(int port) -> [void] - Starts the server on the specified port, begins accepting connections, and runs the event loop.\n- validate(websocketpp::connection_hdl hdl) -> [bool] - Validates incoming connections (always returns true in this implementation).\n- on_http(websocketpp::connection_hdl hdl) -> [void] - Handles HTTP requests received by the server.\n- on_fail(websocketpp::connection_hdl hdl) -> [void] - Handles connection failure events.\n- on_close(websocketpp::connection_hdl hdl) -> [void] - Handles connection closure events.\n- on_message(websocketpp::connection_hdl hdl, message_ptr msg) -> [void] - Processes incoming WebSocket messages and echoes them back to the client.",
    "Canonical_solution": "#include <websocketpp/config/debug_asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <websocketpp/logger/syslog.hpp>\n#include <iostream>\n\nusing websocketpp::lib::placeholders::_1;\nusing websocketpp::lib::placeholders::_2;\nusing websocketpp::lib::bind;\n\nclass WebSocketServer {\npublic:\n    typedef websocketpp::server<websocketpp::config::debug_asio> server;\n    typedef server::message_ptr message_ptr;\n\n    WebSocketServer() {\n        // Set logging settings\n        m_server.set_access_channels(websocketpp::log::alevel::all);\n        m_server.clear_access_channels(websocketpp::log::alevel::frame_payload);\n\n        // Initialize ASIO\n        m_server.init_asio();\n        m_server.set_reuse_addr(true);\n\n        // Register handlers\n        m_server.set_message_handler(bind(&WebSocketServer::on_message, this, ::_1, ::_2));\n        m_server.set_http_handler(bind(&WebSocketServer::on_http, this, ::_1));\n        m_server.set_fail_handler(bind(&WebSocketServer::on_fail, this, ::_1));\n        m_server.set_close_handler(bind(&WebSocketServer::on_close, this, ::_1));\n        m_server.set_validate_handler(bind(&WebSocketServer::validate, this, ::_1));\n    }\n\n    void run(int port) {\n        try {\n            // Listen on specified port\n            m_server.listen(port);\n\n            // Start the server accept loop\n            m_server.start_accept();\n\n            // Start the ASIO io_service run loop\n            m_server.run();\n        } catch (websocketpp::exception const & e) {\n            std::cout << e.what() << std::endl;\n        }\n    }\n\nprivate:\n    bool validate(websocketpp::connection_hdl hdl) {\n        return true;\n    }\n\n    void on_http(websocketpp::connection_hdl hdl) {\n        server::connection_ptr con = m_server.get_con_from_hdl(hdl);\n        std::string res = con->get_request_body();\n        std::stringstream ss;\n        ss << \"got HTTP request with \" << res.size() << \" bytes of body data.\";\n        con->set_body(ss.str());\n        con->set_status(websocketpp::http::status_code::ok);\n    }\n\n    void on_fail(websocketpp::connection_hdl hdl) {\n        server::connection_ptr con = m_server.get_con_from_hdl(hdl);\n        std::cout << \"Fail handler: \" << con->get_ec() << \" \" << con->get_ec().message() << std::endl;\n    }\n\n    void on_close(websocketpp::connection_hdl hdl) {\n        std::cout << \"Close handler\" << std::endl;\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, message_ptr msg) {\n        std::cout << \"on_message called with hdl: \" << hdl.lock().get()\n                  << \" and message: \" << msg->get_payload()\n                  << std::endl;\n\n        try {\n            m_server.send(hdl, msg->get_payload(), msg->get_opcode());\n        } catch (websocketpp::exception const & e) {\n            std::cout << \"Echo failed because: \" \n                      << \"(\" << e.what() << \")\" << std::endl;\n        }\n    }\n\n    server m_server;\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 154,
    "matched_results": [
      "```cpp\n#include <websocketpp/config/debug_asio.hpp>\n#include <websocketpp/server.hpp>\n\ntypedef websocketpp::server<websocketpp::config::debug_asio> server;\ntypedef server::message_ptr message_ptr;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer() {\n        m_server.init_asio();\n        m_server.set_reuse_addr(true);\n\n        m_server.set_open_handler([this](websocketpp::connection_hdl hdl) {\n            std::cout << \"Connection opened\" << std::endl;\n        });\n\n        m_server.set_close_handler(bind(&WebSocketServer::on_close, this,::_1));\n\n        m_server.set_fail_handler(bind(&WebSocketServer::on_fail, this,::_1));\n\n        m_server.set_http_handler(bind(&WebSocketServer::on_http, this,::_1));\n\n        m_server.set_message_handler(bind(&WebSocketServer::on_message, this,::_1,::_2));\n\n        m_server.set_validate_handler(bind(&WebSocketServer::validate, this,::_1));\n    }\n\n    void run(int port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    server m_server;\n\n    bool validate(websocketpp::connection_hdl hdl) {\n        return true;\n    }\n\n    void on_http(websocketpp::connection_hdl hdl) {\n        std::cout << \"HTTP request received\" << std::endl;\n    }\n\n    void on_fail(websocketpp::connection_hdl hdl) {\n        std::cout << \"Connection failed\" << std::endl;\n    }\n\n    void on_close(websocketpp::connection_hdl hdl) {\n        std::cout << \"Connection closed\" << std::endl;\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, message_ptr msg) {\n        std::cout << \"Received: \" << msg->get_payload() << std::endl;\n        m_server.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n};\n```",
      "```cpp\n#include <websocketpp/config/debug_asio.hpp>\n#include <websocketpp/server.hpp>\n\ntypedef websocketpp::server<websocketpp::config::debug_asio> server;\ntypedef server::message_ptr message_ptr;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer() {\n        m_server.init_asio();\n        m_server.set_reuse_addr(true);\n\n        m_server.set_open_handler([this](websocketpp::connection_hdl hdl) {\n            std::cout << \"Connection opened\" << std::endl;\n        });\n\n        m_server.set_close_handler(bind(&WebSocketServer::on_close, this,::_1));\n\n        m_server.set_fail_handler(bind(&WebSocketServer::on_fail, this,::_1));\n\n        m_server.set_http_handler(bind(&WebSocketServer::on_http, this,::_1));\n\n        m_server.set_message_handler(bind(&WebSocketServer::on_message, this,::_1,::_2));\n\n        m_server.set_validate_handler(bind(&WebSocketServer::validate, this,::_1));\n    }\n\n    void run(int port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    bool validate(websocketpp::connection_hdl hdl) {\n        return true;\n    }\n\n    void on_http(websocketpp::connection_hdl hdl) {\n        std::cout << \"HTTP request received\" << std::endl;\n    }\n\n    void on_fail(websocketpp::connection_hdl hdl) {\n        std::cout << \"Connection failed\" << std::endl;\n    }\n\n    void on_close(websocketpp::connection_hdl hdl) {\n        std::cout << \"Connection closed\" << std::endl;\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, message_ptr msg) {\n        std::cout << \"Received: \" << msg->get_payload() << std::endl;\n        m_server.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    server m_server;\n};\n```",
      "#include <websocketpp/config/debug_asio.hpp>\n#include <websocketpp/server.hpp>\n\ntypedef websocketpp::server<websocketpp::config::debug_asio> server;\ntypedef server::message_ptr message_ptr;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer() {\n        m_server.init_asio();\n        m_server.set_reuse_addr(true);\n\n        m_server.set_open_handler([this](websocketpp::connection_hdl hdl) {\n            std::cout << \"Connection opened\" << std::endl;\n        });\n\n        m_server.set_close_handler(bind(&WebSocketServer::on_close, this,::_1));\n\n        m_server.set_fail_handler(bind(&WebSocketServer::on_fail, this,::_1));\n\n        m_server.set_http_handler(bind(&WebSocketServer::on_http, this,::_1));\n\n        m_server.set_message_handler(bind(&WebSocketServer::on_message, this,::_1,::_2));\n\n        m_server.set_validate_handler(bind(&WebSocketServer::validate, this,::_1));\n    }\n\n    void run(int port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    bool validate(websocketpp::connection_hdl hdl) {\n        return true;\n    }\n\n    void on_http(websocketpp::connection_hdl hdl) {\n        std::cout << \"HTTP request received\" << std::endl;\n    }\n\n    void on_fail(websocketpp::connection_hdl hdl) {\n        std::cout << \"Connection failed\" << std::endl;\n    }\n\n    void on_close(websocketpp::connection_hdl hdl) {\n        std::cout << \"Connection closed\" << std::endl;\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, message_ptr msg) {\n        std::cout << \"Received message: \" << msg->get_payload() << std::endl;\n        m_server.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    server m_server;\n};",
      "#include <websocketpp/config/debug_asio.hpp>\n#include <websocketpp/server.hpp>\n\ntypedef websocketpp::server<websocketpp::config::debug_asio> server;\ntypedef server::message_ptr message_ptr;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer() {\n        m_server.init_asio();\n        m_server.set_reuse_addr(true);\n\n        m_server.set_open_handler([this](websocketpp::connection_hdl hdl) {\n            std::cout << \"Connection opened\" << std::endl;\n        });\n\n        m_server.set_close_handler(bind(&WebSocketServer::on_close, this,::_1));\n\n        m_server.set_fail_handler(bind(&WebSocketServer::on_fail, this,::_1));\n\n        m_server.set_http_handler(bind(&WebSocketServer::on_http, this,::_1));\n\n        m_server.set_message_handler(bind(&WebSocketServer::on_message, this,::_1,::_2));\n\n        m_server.set_validate_handler(bind(&WebSocketServer::validate, this,::_1));\n    }\n\n    void run(int port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    bool validate(websocketpp::connection_hdl hdl) {\n        return true;\n    }\n\n    void on_http(websocketpp::connection_hdl hdl) {\n        std::cout << \"HTTP request received\" << std::endl;\n    }\n\n    void on_fail(websocketpp::connection_hdl hdl) {\n        std::cout << \"Connection failed\" << std::endl;\n    }\n\n    void on_close(websocketpp::connection_hdl hdl) {\n        std::cout << \"Connection closed\" << std::endl;\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, message_ptr msg) {\n        std::cout << \"Received: \" << msg->get_payload() << std::endl;\n        m_server.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    server m_server;\n};",
      "```cpp\n#include <websocketpp/config/debug_asio.hpp>\n#include <websocketpp/server.hpp>\n\ntypedef websocketpp::server<websocketpp::config::debug_asio> server;\ntypedef server::message_ptr message_ptr;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer() {\n        m_server.init_asio();\n        m_server.set_reuse_addr(true);\n\n        m_server.set_open_handler([this](websocketpp::connection_hdl hdl) {\n            std::cout << \"Connection opened\" << std::endl;\n        });\n\n        m_server.set_close_handler(bind(&WebSocketServer::on_close, this, ::_1));\n        m_server.set_fail_handler(bind(&WebSocketServer::on_fail, this, ::_1));\n        m_server.set_http_handler(bind(&WebSocketServer::on_http, this, ::_1));\n        m_server.set_message_handler(bind(&WebSocketServer::on_message, this, ::_1, ::_2));\n        m_server.set_validate_handler(bind(&WebSocketServer::validate, this, ::_1));\n    }\n\n    void run(int port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    server m_server;\n\n    bool validate(websocketpp::connection_hdl hdl) {\n        return true;\n    }\n\n    void on_http(websocketpp::connection_hdl hdl) {\n        std::cout << \"HTTP request received\" << std::endl;\n    }\n\n    void on_fail(websocketpp::connection_hdl hdl) {\n        std::cout << \"Connection failed\" << std::endl;\n    }\n\n    void on_close(websocketpp::connection_hdl hdl) {\n        std::cout << \"Connection closed\" << std::endl;\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, message_ptr msg) {\n        std::cout << \"Received: \" << msg->get_payload() << std::endl;\n        m_server.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n};\n```",
      "```cpp\n#include <websocketpp/config/debug_asio.hpp>\n#include <websocketpp/server.hpp>\n\ntypedef websocketpp::server<websocketpp::config::debug_asio> server;\ntypedef server::message_ptr message_ptr;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer() {\n        m_server.init_asio();\n        m_server.set_reuse_addr(true);\n\n        m_server.set_open_handler(bind(&WebSocketServer::on_open, this, ::_1));\n        m_server.set_close_handler(bind(&WebSocketServer::on_close, this, ::_1));\n        m_server.set_message_handler(bind(&WebSocketServer::on_message, this, ::_1, ::_2));\n        m_server.set_http_handler(bind(&WebSocketServer::on_http, this, ::_1));\n        m_server.set_validate_handler(bind(&WebSocketServer::validate, this, ::_1));\n        m_server.set_fail_handler(bind(&WebSocketServer::on_fail, this, ::_1));\n    }\n\n    void run(int port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    server m_server;\n\n    bool validate(websocketpp::connection_hdl hdl) {\n        return true;\n    }\n\n    void on_http(websocketpp::connection_hdl hdl) {\n        // Handle HTTP request\n    }\n\n    void on_fail(websocketpp::connection_hdl hdl) {\n        // Handle connection failure\n    }\n\n    void on_close(websocketpp::connection_hdl hdl) {\n        // Handle connection closure\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, message_ptr msg) {\n        m_server.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    void on_open(websocketpp::connection_hdl hdl) {\n        // Handle new connection\n    }\n};\n```",
      "```cpp\n#include <websocketpp/config/debug_asio.hpp>\n#include <websocketpp/server.hpp>\n\ntypedef websocketpp::server<websocketpp::config::debug_asio> server;\ntypedef server::message_ptr message_ptr;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer() {\n        m_server.init_asio();\n        m_server.set_reuse_addr(true);\n\n        m_server.set_open_handler([this](websocketpp::connection_hdl hdl) {\n            std::cout << \"Connection opened\" << std::endl;\n        });\n\n        m_server.set_close_handler(bind(&WebSocketServer::on_close, this,::_1));\n\n        m_server.set_fail_handler(bind(&WebSocketServer::on_fail, this,::_1));\n\n        m_server.set_http_handler(bind(&WebSocketServer::on_http, this,::_1));\n\n        m_server.set_message_handler(bind(&WebSocketServer::on_message, this,::_1,::_2));\n\n        m_server.set_validate_handler(bind(&WebSocketServer::validate, this,::_1));\n    }\n\n    void run(int port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    server m_server;\n\n    bool validate(websocketpp::connection_hdl hdl) {\n        return true;\n    }\n\n    void on_http(websocketpp::connection_hdl hdl) {\n        std::cout << \"HTTP request received\" << std::endl;\n    }\n\n    void on_fail(websocketpp::connection_hdl hdl) {\n        std::cout << \"Connection failed\" << std::endl;\n    }\n\n    void on_close(websocketpp::connection_hdl hdl) {\n        std::cout << \"Connection closed\" << std::endl;\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, message_ptr msg) {\n        std::cout << \"Received: \" << msg->get_payload() << std::endl;\n        m_server.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n};\n```",
      "```cpp\n#include <websocketpp/config/debug_asio.hpp>\n#include <websocketpp/server.hpp>\n\ntypedef websocketpp::server<websocketpp::config::debug_asio> server;\ntypedef server::message_ptr message_ptr;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer() {\n        m_server.init_asio();\n        m_server.set_reuse_addr(true);\n\n        m_server.set_open_handler([this](websocketpp::connection_hdl hdl) {\n            std::cout << \"Connection opened\" << std::endl;\n        });\n\n        m_server.set_close_handler(bind(&WebSocketServer::on_close, this, ::_1));\n        m_server.set_fail_handler(bind(&WebSocketServer::on_fail, this, ::_1));\n        m_server.set_http_handler(bind(&WebSocketServer::on_http, this, ::_1));\n        m_server.set_message_handler(bind(&WebSocketServer::on_message, this, ::_1, ::_2));\n        m_server.set_validate_handler(bind(&WebSocketServer::validate, this, ::_1));\n    }\n\n    void run(int port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    server m_server;\n\n    bool validate(websocketpp::connection_hdl hdl) {\n        return true;\n    }\n\n    void on_http(websocketpp::connection_hdl hdl) {\n        std::cout << \"HTTP request received\" << std::endl;\n    }\n\n    void on_fail(websocketpp::connection_hdl hdl) {\n        std::cout << \"Connection failed\" << std::endl;\n    }\n\n    void on_close(websocketpp::connection_hdl hdl) {\n        std::cout << \"Connection closed\" << std::endl;\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, message_ptr msg) {\n        std::cout << \"Received message: \" << msg->get_payload() << std::endl;\n        m_server.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n};\n```",
      "```cpp\n#include <websocketpp/config/debug_asio.hpp>\n#include <websocketpp/server.hpp>\n\ntypedef websocketpp::server<websocketpp::config::debug_asio> server;\ntypedef server::message_ptr message_ptr;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer() {\n        m_server.init_asio();\n        m_server.set_reuse_addr(true);\n\n        m_server.set_open_handler(bind(&WebSocketServer::on_open, this, ::_1));\n        m_server.set_close_handler(bind(&WebSocketServer::on_close, this, ::_1));\n        m_server.set_message_handler(bind(&WebSocketServer::on_message, this, ::_1, ::_2));\n        m_server.set_http_handler(bind(&WebSocketServer::on_http, this, ::_1));\n        m_server.set_validate_handler(bind(&WebSocketServer::validate, this, ::_1));\n        m_server.set_fail_handler(bind(&WebSocketServer::on_fail, this, ::_1));\n    }\n\n    void run(int port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    server m_server;\n\n    bool validate(websocketpp::connection_hdl hdl) {\n        return true;\n    }\n\n    void on_http(websocketpp::connection_hdl hdl) {\n        m_server.send(hdl, \"HTTP/1.1 405 Method Not Allowed\\r\\nContent-Type: text/plain\\r\\nConnection: close\\r\\n\\r\\nMethod Not Allowed\", websocketpp::frame::opcode::text);\n        m_server.close(hdl, websocketpp::close::status::invalid_frame_payload_data, \"Invalid request\");\n    }\n\n    void on_fail(websocketpp::connection_hdl hdl) {\n        try {\n            server::connection_ptr con = m_server.get_con_from_hdl(hdl);\n            std::cout << \"Fail handler called for connection from \" << con->get_remote_endpoint() << std::endl;\n        } catch (...) {\n        }\n    }\n\n    void on_close(websocketpp::connection_hdl hdl) {\n        try {\n            server::connection_ptr con = m_server.get_con_from_hdl(hdl);\n            std::cout << \"Connection closed: \" << con->get_remote_endpoint() << std::endl;\n        } catch (...) {\n        }\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, message_ptr msg) {\n        std::cout << \"Received message: \" << msg->get_payload() << std::endl;\n        m_server.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    void on_open(websocketpp::connection_hdl hdl) {\n        try {\n            server::connection_ptr con = m_server.get_con_from_hdl(hdl);\n            std::cout << \"Connection opened: \" << con->get_remote_endpoint() << std::endl;\n        } catch (...) {\n        }\n    }\n};\n```",
      "#include <websocketpp/config/debug_asio.hpp>\n#include <websocketpp/server.hpp>\n\ntypedef websocketpp::server<websocketpp::config::debug_asio> server;\ntypedef server::message_ptr message_ptr;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer() {\n        m_server.init_asio();\n        m_server.set_reuse_addr(true);\n\n        m_server.set_open_handler([this](websocketpp::connection_hdl hdl) {\n            std::cout << \"Connection opened\" << std::endl;\n        });\n\n        m_server.set_close_handler(bind(&WebSocketServer::on_close, this, ::_1));\n        m_server.set_fail_handler(bind(&WebSocketServer::on_fail, this, ::_1));\n        m_server.set_http_handler(bind(&WebSocketServer::on_http, this, ::_1));\n        m_server.set_message_handler(bind(&WebSocketServer::on_message, this, ::_1, ::_2));\n        m_server.set_validate_handler(bind(&WebSocketServer::validate, this, ::_1));\n    }\n\n    void run(int port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    server m_server;\n\n    bool validate(websocketpp::connection_hdl hdl) {\n        return true;\n    }\n\n    void on_http(websocketpp::connection_hdl hdl) {\n        std::cout << \"HTTP request received\" << std::endl;\n    }\n\n    void on_fail(websocketpp::connection_hdl hdl) {\n        std::cout << \"Connection failed\" << std::endl;\n    }\n\n    void on_close(websocketpp::connection_hdl hdl) {\n        std::cout << \"Connection closed\" << std::endl;\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, message_ptr msg) {\n        std::cout << \"Received message: \" << msg->get_payload() << std::endl;\n        m_server.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n};"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 48,
    "Instruction": "Task Description: Implement a WebSocket server in C++ using the WebSocket++ library that supports secure TLS connections and handles both WebSocket and HTTP requests.\n\nClass Description: The WebSocketServer class encapsulates a secure WebSocket server implementation using WebSocket++ with ASIO and TLS support. It handles incoming connections, processes messages, and manages secure communication settings.\n\nAttributes:\n- m_server: [server] - The WebSocket++ server instance that manages connections and communication\n- tls_mode: [enum] - Enumeration defining TLS security modes (MOZILLA_INTERMEDIATE, MOZILLA_MODERN)\n\nMethods:\n- WebSocketServer() -> [constructor] - Initializes the server, sets up ASIO, and registers handler functions\n- run([int port]) -> [void] - Starts the server listening on the specified port and begins accepting connections\n- on_message([websocketpp::connection_hdl hdl, message_ptr msg]) -> [void] - Handles incoming WebSocket messages by echoing them back to the client\n- on_http([websocketpp::connection_hdl hdl]) -> [void] - Handles HTTP requests by returning a simple \"Hello World!\" response\n- get_password() -> [std::string] - Returns the password used for TLS certificate encryption\n- on_tls_init([tls_mode mode, websocketpp::connection_hdl hdl]) -> [context_ptr] - Initializes and configures TLS/SSL context with appropriate security settings based on the specified mode",
    "Canonical_solution": "#include <websocketpp/config/asio.hpp>\n#include <websocketpp/server.hpp>\n#include <websocketpp/lib/asio.hpp>\n#include <iostream>\n\ntypedef websocketpp::server<websocketpp::config::asio_tls> server;\ntypedef websocketpp::config::asio::message_type::ptr message_ptr;\ntypedef websocketpp::lib::shared_ptr<websocketpp::lib::asio::ssl::context> context_ptr;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer() {\n        // Initialize ASIO\n        m_server.init_asio();\n\n        // Register handlers\n        m_server.set_message_handler(bind(&WebSocketServer::on_message, this, ::_1, ::_2));\n        m_server.set_http_handler(bind(&WebSocketServer::on_http, this, ::_1));\n        m_server.set_tls_init_handler(bind(&WebSocketServer::on_tls_init, this, MOZILLA_INTERMEDIATE, ::_1));\n    }\n\n    void run(int port) {\n        // Listen on specified port\n        m_server.listen(port);\n\n        // Start the server accept loop\n        m_server.start_accept();\n\n        // Start the ASIO io_service run loop\n        m_server.run();\n    }\n\nprivate:\n    enum tls_mode {\n        MOZILLA_INTERMEDIATE = 1,\n        MOZILLA_MODERN = 2\n    };\n\n    void on_message(websocketpp::connection_hdl hdl, message_ptr msg) {\n        std::cout << \"on_message called with hdl: \" << hdl.lock().get()\n                  << \" and message: \" << msg->get_payload()\n                  << std::endl;\n\n        try {\n            m_server.send(hdl, msg->get_payload(), msg->get_opcode());\n        } catch (websocketpp::exception const & e) {\n            std::cout << \"Echo failed because: \"\n                      << \"(\" << e.what() << \")\" << std::endl;\n        }\n    }\n\n    void on_http(websocketpp::connection_hdl hdl) {\n        server::connection_ptr con = m_server.get_con_from_hdl(hdl);\n        con->set_body(\"Hello World!\");\n        con->set_status(websocketpp::http::status_code::ok);\n    }\n\n    std::string get_password() {\n        return \"test\";\n    }\n\n    context_ptr on_tls_init(tls_mode mode, websocketpp::connection_hdl hdl) {\n        namespace asio = websocketpp::lib::asio;\n\n        context_ptr ctx = websocketpp::lib::make_shared<asio::ssl::context>(asio::ssl::context::sslv23);\n\n        try {\n            if (mode == MOZILLA_MODERN) {\n                ctx->set_options(asio::ssl::context::default_workarounds |\n                                 asio::ssl::context::no_sslv2 |\n                                 asio::ssl::context::no_sslv3 |\n                                 asio::ssl::context::no_tlsv1 |\n                                 asio::ssl::context::single_dh_use);\n            } else {\n                ctx->set_options(asio::ssl::context::default_workarounds |\n                                 asio::ssl::context::no_sslv2 |\n                                 asio::ssl::context::no_sslv3 |\n                                 asio::ssl::context::single_dh_use);\n            }\n            ctx->set_password_callback(bind(&WebSocketServer::get_password, this));\n            ctx->use_certificate_chain_file(\"server.pem\");\n            ctx->use_private_key_file(\"server.pem\", asio::ssl::context::pem);\n            ctx->use_tmp_dh_file(\"dh.pem\");\n            \n            std::string ciphers = (mode == MOZILLA_MODERN) ? \n                \"ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256...\" : \n                \"ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256...\";\n            \n            if (SSL_CTX_set_cipher_list(ctx->native_handle(), ciphers.c_str()) != 1) {\n                std::cout << \"Error setting cipher list\" << std::endl;\n            }\n        } catch (std::exception& e) {\n            std::cout << \"Exception: \" << e.what() << std::endl;\n        }\n        return ctx;\n    }\n\n    server m_server;\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 154,
    "matched_results": [
      "```cpp\n#include <websocketpp/config/asio_tls.hpp>\n#include <websocketpp/server.hpp>\n\n#include <boost/filesystem.hpp>\n#include <boost/lexical_cast.hpp>\n\n#include <string>\n#include <iostream>\n#include <map>\n\nnamespace fs = boost::filesystem;\n\ntypedef websocketpp::server<websocketpp::config::asio_tls> server;\ntypedef server::message_ptr message_ptr;\ntypedef server::tls_socket::context_ptr context_ptr;\n\nenum tls_mode {\n    MOZILLA_INTERMEDIATE,\n    MOZILLA_MODERN\n};\n\nclass WebSocketServer {\npublic:\n    WebSocketServer() {\n        m_server.init_asio();\n        m_server.set_reuse_address(true);\n        m_server.set_tls_init_handler(std::bind(&WebSocketServer::on_tls_init, this, std::placeholders::_1, std::placeholders::_2));\n        m_server.set_message_handler(std::bind(&WebSocketServer::on_message, this, std::placeholders::_1, std::placeholders::_2));\n        m_server.set_http_handler(std::bind(&WebSocketServer::on_http, this, std::placeholders::_1));\n    }\n\n    void run(int port) {\n        try {\n            m_server.listen(port);\n            m_server.start_accept();\n            m_server.run();\n        } catch (const std::exception& e) {\n            std::cerr << \"Error: \" << e.what() << std::endl;\n        }\n    }\n\nprivate:\n    void on_message(websocketpp::connection_hdl hdl, message_ptr msg) {\n        m_server.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    void on_http(websocketpp::connection_hdl hdl) {\n        server::connection_ptr con = m_server.get_con_from_hdl(hdl);\n        con->set_status(websocketpp::http::status_code::ok);\n        con->set_body(\"Hello World!\");\n    }\n\n    std::string get_password() {\n        return \"your_password\";\n    }\n\n    context_ptr on_tls_init(tls_mode mode, websocketpp::connection_hdl hdl) {\n        context_ptr ctx = SSL_CTX_new(SSLv23_server_method());\n        if (!ctx) {\n            throw std::runtime_error(\"SSL_CTX_new failed\");\n        }\n\n        SSL_CTX_set_ecdh_auto(ctx, 1);\n\n        if (mode == MOZILLA_INTERMEDIATE) {\n            const char* cafile = \"/etc/ssl/certs/ca-certificates.crt\";\n            if (fs::exists(cafile)) {\n                if (SSL_CTX_load_verify_locations(ctx, cafile, nullptr) != 1) {\n                    throw std::runtime_error(\"Failed to load CA certificates\");\n                }\n            }\n        }\n\n        std::string cert_file = \"server.pem\";\n        std::string key_file = \"server.key\";\n\n        if (SSL_CTX_use_certificate_chain_file(ctx, cert_file.c_str()) <= 0) {\n            throw std::runtime_error(\"Failed to load certificate file\");\n        }\n\n        if (SSL_CTX_use_PrivateKey_file(ctx, key_file.c_str(), SSL_FILETYPE_PEM) <= 0) {\n            throw std::runtime_error(\"Failed to load private key file\");\n        }\n\n        if (SSL_CTX_check_private_key(ctx) != 1) {\n            throw std::runtime_error(\"Private key does not match the certificate public key\");\n        }\n\n        return ctx;\n    }\n\n    server m_server;\n};\n```",
      "#include <websocketpp/config/asio_tls.hpp>\n#include <websocketpp/server.hpp>\n\n#include <boost/filesystem.hpp>\n#include <boost/algorithm/string.hpp>\n\n#include <iostream>\n#include <string>\n#include <vector>\n\ntypedef websocketpp::server<websocketpp::config::asio_tls> server;\ntypedef server::message_ptr message_ptr;\ntypedef server::tls_socket::context_ptr context_ptr;\n\nenum tls_mode {\n    MOZILLA_INTERMEDIATE,\n    MOZILLA_MODERN\n};\n\nclass WebSocketServer {\npublic:\n    WebSocketServer() {\n        m_server.init_asio();\n        m_server.set_reuse_addr(true);\n        m_server.set_tls_init_handler(std::bind(&WebSocketServer::on_tls_init, this, std::placeholders::_1, std::placeholders::_2));\n        m_server.set_message_handler(std::bind(&WebSocketServer::on_message, this, std::placeholders::_1, std::placeholders::_2));\n        m_server.set_http_handler(std::bind(&WebSocketServer::on_http, this, std::placeholders::_1));\n    }\n\n    void run(int port) {\n        try {\n            m_server.listen(port);\n            m_server.start_accept();\n            m_server.run();\n        } catch (const std::exception& e) {\n            std::cerr << \"Error: \" << e.what() << std::endl;\n        }\n    }\n\nprivate:\n    void on_message(websocketpp::connection_hdl hdl, message_ptr msg) {\n        try {\n            m_server.send(hdl, msg->get_payload(), msg->get_opcode());\n        } catch (const std::exception& e) {\n            std::cerr << \"Error sending message: \" << e.what() << std::endl;\n        }\n    }\n\n    void on_http(websocketpp::connection_hdl hdl) {\n        try {\n            server::connection_ptr con = m_server.get_con_from_hdl(hdl);\n            con->set_status(websocketpp::http::status_code::ok);\n            con->set_body(\"Hello World!\");\n        } catch (const std::exception& e) {\n            std::cerr << \"Error handling HTTP request: \" << e.what() << std::endl;\n        }\n    }\n\n    std::string get_password() {\n        return \"your_password\";\n    }\n\n    context_ptr on_tls_init(tls_mode mode, websocketpp::connection_hdl hdl) {\n        context_ptr ctx = SSL_CTX_new(SSLv23_server_method());\n\n        if (!ctx) {\n            throw std::runtime_error(\"SSL_CTX_new failed\");\n        }\n\n        switch (mode) {\n            case MOZILLA_INTERMEDIATE:\n                SSL_CTX_set_options(ctx, SSL_OP_NO_SSLv2 | SSL_OP_NO_SSLv3 | SSL_OP_NO_COMPRESSION);\n                break;\n            case MOZILLA_MODERN:\n                SSL_CTX_set_options(ctx, SSL_OP_NO_SSLv2 | SSL_OP_NO_SSLv3 | SSL_OP_NO_TLSv1 |\n                                    SSL_OP_NO_TLSv1_1 | SSL_OP_NO_COMPRESSION);\n                break;\n        }\n\n        const std::string cert_file = \"server.pem\";\n        const std::string key_file = \"server.key\";\n\n        if (SSL_CTX_use_certificate_chain_file(ctx, cert_file.c_str()) != 1) {\n            throw std::runtime_error(\"Failed to load certificate file: \" + cert_file);\n        }\n\n        if (SSL_CTX_use_PrivateKey_file(ctx, key_file.c_str(), SSL_FILETYPE_PEM) != 1) {\n            throw std::runtime_error(\"Failed to load private key file: \" + key_file);\n        }\n\n        if (!SSL_CTX_check_private_key(ctx)) {\n            throw std::runtime_error(\"Private key does not match the certificate public key\");\n        }\n\n        return ctx;\n    }\n\n    server m_server;\n};",
      "```cpp\n#include <websocketpp/config/asio_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <boost/filesystem.hpp>\n#include <boost/algorithm/string.hpp>\n\ntypedef websocketpp::server<websocketpp::config::asio_tls> server;\ntypedef server::message_ptr message_ptr;\ntypedef boost::shared_ptr<websocketpp::lib::asio::ssl::context> context_ptr;\n\nenum tls_mode {\n    MOZILLA_INTERMEDIATE,\n    MOZILLA_MODERN\n};\n\nclass WebSocketServer {\npublic:\n    WebSocketServer() {\n        m_server.init_asio();\n        m_server.set_reuse_addr(true);\n        m_server.set_tls_init_handler(bind(&WebSocketServer::on_tls_init, this, ::_1, ::_2));\n        m_server.set_message_handler(bind(&WebSocketServer::on_message, this, ::_1, ::_2));\n        m_server.set_http_handler(bind(&WebSocketServer::on_http, this, ::_1));\n    }\n\n    void run(int port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    void on_message(websocketpp::connection_hdl hdl, message_ptr msg) {\n        try {\n            m_server.send(hdl, msg->get_payload(), msg->get_opcode());\n        } catch (...) {}\n    }\n\n    void on_http(websocketpp::connection_hdl hdl) {\n        server::connection_ptr con = m_server.get_con_from_hdl(hdl);\n        con->set_status(websocketpp::http::status_code::ok);\n        con->append_header(\"Content-Type\", \"text/plain\");\n        con->append_header(\"Content-Length\", \"13\");\n        con->end_headers();\n        con->write(\"Hello World!\");\n    }\n\n    std::string get_password() {\n        return \"your_password\";\n    }\n\n    context_ptr on_tls_init(tls_mode mode, websocketpp::connection_hdl hdl) {\n        context_ptr ctx = websocketpp::lib::make_shared<boost::asio::ssl::context>(boost::asio::ssl::context::sslv23);\n\n        try {\n            if (mode == MOZILLA_INTERMEDIATE) {\n                ctx->set_options(boost::asio::ssl::context::default_workarounds |\n                                 boost::asio::ssl::context::no_sslv2 |\n                                 boost::asio::ssl::context::no_sslv3 |\n                                 boost::asio::ssl::context::single_dh_use);\n                ctx->set_password_callback(bind(&WebSocketServer::get_password, this));\n                ctx->use_certificate_chain_file(\"server.crt\");\n                ctx->use_private_key_file(\"server.key\", boost::asio::ssl::context::pem);\n                ctx->use_tmp_dh_file(\"dhparams.pem\");\n            } else if (mode == MOZILLA_MODERN) {\n                ctx->set_options(boost::asio::ssl::context::default_workarounds |\n                                 boost::asio::ssl::context::no_sslv2 |\n                                 boost::asio::ssl::context::no_sslv3 |\n                                 boost::asio::ssl::context::no_tlsv1 |\n                                 boost::asio::ssl::context::no_tlsv1_1 |\n                                 boost::asio::ssl::context::single_dh_use);\n                ctx->set_password_callback(bind(&WebSocketServer::get_password, this));\n                ctx->use_certificate_chain_file(\"server.crt\");\n                ctx->use_private_key_file(\"server.key\", boost::asio::ssl::context::pem);\n                ctx->use_tmp_dh_file(\"dhparams.pem\");\n            }\n        } catch (...) {}\n\n        return ctx;\n    }\n\n    server m_server;\n};\n```",
      "#include <websocketpp/config/asio_tls.hpp>\n#include <websocketpp/server.hpp>\n\n#include <boost/beast/websocket.hpp>\n#include <boost/beast/websocket/ssl.hpp>\n#include <boost/asio/ssl.hpp>\n#include <boost/asio/ip/tcp.hpp>\n#include <boost/asio/ssl/context.hpp>\n\n#include <string>\n#include <iostream>\n#include <memory>\n\nnamespace websocketpp {\n    namespace transport {\n        namespace asio {\n            namespace tls {\n                class endpoint;\n            }\n        }\n    }\n}\n\ntypedef websocketpp::server<websocketpp::config::asio_tls> server;\ntypedef server::message_ptr message_ptr;\n\nenum class tls_mode {\n    MOZILLA_INTERMEDIATE,\n    MOZILLA_MODERN\n};\n\nclass WebSocketServer {\npublic:\n    WebSocketServer() {\n        m_server.init_asio();\n        m_server.set_reuse_addr(true);\n        m_server.set_tls_init_handler(std::bind(&WebSocketServer::on_tls_init, this, std::placeholders::_1, std::placeholders::_2));\n        m_server.set_message_handler(std::bind(&WebSocketServer::on_message, this, std::placeholders::_1, std::placeholders::_2));\n        m_server.set_http_handler(std::bind(&WebSocketServer::on_http, this, std::placeholders::_1));\n    }\n\n    void run(int port) {\n        try {\n            m_server.listen(port);\n            m_server.start_accept();\n            m_server.run();\n        } catch (const std::exception& e) {\n            std::cerr << \"Exception: \" << e.what() << std::endl;\n        }\n    }\n\nprivate:\n    void on_message(websocketpp::connection_hdl hdl, message_ptr msg) {\n        try {\n            m_server.send(hdl, msg->get_payload(), msg->get_opcode());\n        } catch (const std::exception& e) {\n            std::cerr << \"Error sending message: \" << e.what() << std::endl;\n        }\n    }\n\n    void on_http(websocketpp::connection_hdl hdl) {\n        try {\n            server::connection_ptr con = m_server.get_con_from_hdl(hdl);\n            con->set_status(websocketpp::http::status_code::ok);\n            con->set_http_response_body(\"Hello World!\");\n        } catch (const std::exception& e) {\n            std::cerr << \"Error handling HTTP request: \" << e.what() << std::endl;\n        }\n    }\n\n    std::string get_password() {\n        return \"your_password\";\n    }\n\n    server::tls_context_ptr on_tls_init(tls_mode mode, websocketpp::connection_hdl hdl) {\n        boost::asio::ssl::context* ctx = new boost::asio::ssl::context(boost::asio::ssl::context::tlsv12);\n\n        try {\n            if (mode == tls_mode::MOZILLA_INTERMEDIATE) {\n                // Set up intermediate security settings\n                ctx->set_options(\n                    boost::asio::ssl::context::default_workarounds |\n                    boost::asio::ssl::context::no_sslv2 |\n                    boost::asio::ssl::context::no_sslv3 |\n                    boost::asio::ssl::context::single_dh_use\n                );\n                ctx->set_password_callback(std::bind(&WebSocketServer::get_password, this));\n                ctx->use_certificate_chain_file(\"server.crt\");\n                ctx->use_private_key_file(\"server.key\", boost::asio::ssl::context::pem);\n                ctx->use_tmp_dh_file(\"dhparams.pem\");\n            } else if (mode == tls_mode::MOZILLA_MODERN) {\n                // Set up modern security settings\n                ctx->set_options(\n                    boost::asio::ssl::context::default_workarounds |\n                    boost::asio::ssl::context::no_sslv2 |\n                    boost::asio::ssl::context::no_sslv3 |\n                    boost::asio::ssl::context::single_dh_use\n                );\n                ctx->set_password_callback(std::bind(&WebSocketServer::get_password, this));\n                ctx->use_certificate_chain_file(\"server.crt\");\n                ctx->use_private_key_file(\"server.key\", boost::asio::ssl::context::pem);\n                ctx->use_tmp_dh_file(\"dhparams.pem\");\n            }\n        } catch (const std::exception& e) {\n            std::cerr << \"TLS initialization error: \" << e.what() << std::endl;\n            delete ctx;\n            return nullptr;\n        }\n\n        return server::tls_context_ptr(ctx);\n    }\n\n    server m_server;\n    tls_mode tls_mode;\n};",
      "```cpp\n#include <websocketpp/config/asio_tls.hpp>\n#include <websocketpp/server.hpp>\n\n#include <boost/asio.hpp>\n#include <boost/beast/websocket.hpp>\n#include <boost/beast/websocket/ssl.hpp>\n#include <boost/beast/http.hpp>\n#include <boost/asio/ssl.hpp>\n#include <boost/filesystem.hpp>\n\n#include <iostream>\n#include <string>\n#include <memory>\n\ntypedef websocketpp::server<websocketpp::config::asio_tls> server;\ntypedef server::message_ptr message_ptr;\ntypedef boost::asio::ssl::context ssl_context;\ntypedef std::shared_ptr<ssl_context> context_ptr;\n\nenum tls_mode {\n    MOZILLA_INTERMEDIATE,\n    MOZILLA_MODERN\n};\n\nclass WebSocketServer {\npublic:\n    WebSocketServer() {\n        m_server.init_asio();\n        m_server.set_reuse_addr(true);\n        m_server.set_message_handler(\n            [this](websocketpp::connection_hdl hdl, message_ptr msg) {\n                on_message(hdl, msg);\n            }\n        );\n        m_server.set_http_handler(\n            [this](websocketpp::connection_hdl hdl) {\n                on_http(hdl);\n            }\n        );\n    }\n\n    void run(int port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    server m_server;\n\n    void on_message(websocketpp::connection_hdl hdl, message_ptr msg) {\n        try {\n            m_server.send(hdl, msg->get_payload(), msg->get_opcode());\n        } catch (const websocketpp::lib::error_code& e) {\n            std::cout << \"Echo failed because: \" << e << std::endl;\n        }\n    }\n\n    void on_http(websocketpp::connection_hdl hdl) {\n        boost::beast::http::response<boost::beast::http::string_body> res{boost::beast::http::status::ok, 11};\n        res.set(boost::beast::http::field::server, BOOST_BEAST_VERSION_STRING);\n        res.set(boost::beast::http::field::content_type, \"text/plain\");\n        res.keep_alive(false);\n        res.body() = \"Hello World!\";\n        res.prepare_payload();\n\n        m_server.send(hdl, res.body(), boost::beast::http::verb::get);\n    }\n\n    std::string get_password() {\n        return \"your_password\";\n    }\n\n    context_ptr on_tls_init(tls_mode mode, websocketpp::connection_hdl hdl) {\n        context_ptr ctx = std::make_shared<ssl_context>(boost::asio::ssl::context::sslv23);\n\n        if (mode == MOZILLA_INTERMEDIATE) {\n            ctx->set_options(ssl_context::default_workarounds |\n                             ssl_context::no_sslv2 |\n                             ssl_context::no_sslv3 |\n                             ssl_context::single_dh_use);\n\n            ctx->set_password_callback([this](std::size_t, boost::asio::ssl::context_base::password_purpose) {\n                return get_password();\n            });\n\n            ctx->use_certificate_chain_file(\"server.crt\");\n            ctx->use_private_key_file(\"server.key\", ssl_context::pem);\n            ctx->use_tmp_dh_file(\"dh4096.pem\");\n        } else if (mode == MOZILLA_MODERN) {\n            // Modern TLS settings can be configured similarly with stricter options\n            ctx->set_options(ssl_context::default_workarounds |\n                             ssl_context::no_sslv2 |\n                             ssl_context::no_sslv3 |\n                             ssl_context::no_tlsv1 |\n                             ssl_context::no_tlsv1_1 |\n                             ssl_context::single_dh_use);\n\n            ctx->set_password_callback([this](std::size_t, boost::asio::ssl::context_base::password_purpose) {\n                return get_password();\n            });\n\n            ctx->use_certificate_chain_file(\"server.crt\");\n            ctx->use_private_key_file(\"server.key\", ssl_context::pem);\n            ctx->use_tmp_dh_file(\"dh4096.pem\");\n        }\n\n        return ctx;\n    }\n};\n```",
      "#include <websocketpp/config/asio_tls.hpp>\n#include <websocketpp/server.hpp>\n\n#include <boost/beast/websocket.hpp>\n#include <boost/beast/websocket/ssl.hpp>\n#include <boost/asio/ssl.hpp>\n#include <boost/asio/ip/tcp.hpp>\n\n#include <string>\n#include <iostream>\n\nnamespace websocketpp {\n    namespace transport {\n        namespace asio {\n            template<bool is_client>\n            class tls_socket;\n        }\n    }\n}\n\ntypedef websocketpp::server<websocketpp::config::asio_tls> server;\n\nenum tls_mode {\n    MOZILLA_INTERMEDIATE,\n    MOZILLA_MODERN\n};\n\nclass WebSocketServer {\nprivate:\n    server m_server;\n\npublic:\n    WebSocketServer() {\n        m_server.init_asio();\n        m_server.set_reuse_addr(true);\n\n        m_server.set_message_handler(\n            [this](websocketpp::connection_hdl hdl, server::message_ptr msg) {\n                on_message(hdl, msg);\n            }\n        );\n\n        m_server.set_http_handler(\n            [this](websocketpp::connection_hdl hdl) {\n                on_http(hdl);\n            }\n        );\n\n        m_server.set_tls_init_handler(\n            [this](tls_mode mode, websocketpp::connection_hdl hdl) {\n                return on_tls_init(mode, hdl);\n            }\n        );\n    }\n\n    void run(int port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        std::cout << \"Received: \" << msg->get_payload() << std::endl;\n        m_server.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    void on_http(websocketpp::connection_hdl hdl) {\n        m_server.send(hdl, \"HTTP/1.1 200 OK\\r\\nContent-Length: 13\\r\\n\\r\\nHello World!\", false);\n    }\n\n    std::string get_password() {\n        return \"your_password\";\n    }\n\n    server::context_ptr on_tls_init(tls_mode mode, websocketpp::connection_hdl hdl) {\n        boost::asio::ssl::context::method method = boost::asio::ssl::context::tlsv12_server;\n        server::context_ptr ctx = std::make_shared<boost::asio::ssl::context>(method);\n\n        try {\n            if (mode == MOZILLA_INTERMEDIATE) {\n                ctx->set_options(boost::asio::ssl::context::default_workarounds |\n                                 boost::asio::ssl::context::no_sslv2 |\n                                 boost::asio::ssl::context::no_sslv3 |\n                                 boost::asio::ssl::context::no_tlsv1 |\n                                 boost::asio::ssl::context::no_tlsv1_1);\n            } else if (mode == MOZILLA_MODERN) {\n                ctx->set_options(boost::asio::ssl::context::default_workarounds |\n                                 boost::asio::ssl::context::no_sslv2 |\n                                 boost::asio::ssl::context::no_sslv3 |\n                                 boost::asio::ssl::context::no_tlsv1 |\n                                 boost::asio::ssl::context::no_tlsv1_1 |\n                                 boost::asio::ssl::context::no_tlsv1_2);\n            }\n\n            ctx->set_password_callback([this] { return get_password(); });\n            ctx->use_certificate_chain_file(\"server.crt\");\n            ctx->use_private_key_file(\"server.key\", boost::asio::ssl::context::pem);\n        } catch (std::exception& e) {\n            std::cerr << \"Error setting up TLS context: \" << e.what() << std::endl;\n        }\n\n        return ctx;\n    }\n};",
      "#include <websocketpp/config/asio_tls.hpp>\n#include <websocketpp/server.hpp>\n\n#include <boost/asio.hpp>\n#include <boost/beast/websocket.hpp>\n#include <boost/beast/websocket/ssl.hpp>\n#include <boost/beast/http.hpp>\n#include <boost/beast/version.hpp>\n\n#include <iostream>\n#include <string>\n#include <memory>\n\ntypedef websocketpp::server<websocketpp::config::asio_tls> server;\ntypedef server::message_ptr message_ptr;\ntypedef boost::asio::ssl::context ssl_context;\n\nenum tls_mode {\n    MOZILLA_INTERMEDIATE,\n    MOZILLA_MODERN\n};\n\nclass WebSocketServer {\npublic:\n    WebSocketServer() {\n        m_server.init_asio();\n        m_server.set_reuse_addr(true);\n        m_server.set_tls_init_handler(std::bind(&WebSocketServer::on_tls_init, this, std::placeholders::_1, std::placeholders::_2));\n        m_server.set_message_handler(std::bind(&WebSocketServer::on_message, this, std::placeholders::_1, std::placeholders::_2));\n        m_server.set_http_handler(std::bind(&WebSocketServer::on_http, this, std::placeholders::_1));\n    }\n\n    void run(int port) {\n        try {\n            m_server.listen(port);\n            m_server.start_accept();\n            m_server.run();\n        } catch (const std::exception& e) {\n            std::cerr << \"Error: \" << e.what() << std::endl;\n        }\n    }\n\nprivate:\n    void on_message(websocketpp::connection_hdl hdl, message_ptr msg) {\n        m_server.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    void on_http(websocketpp::connection_hdl hdl) {\n        boost::beast::http::response<boost::beast::http::string_body> res{boost::beast::http::status::ok, 11};\n        res.set(boost::beast::http::field::server, \"WebSocket++\");\n        res.set(boost::beast::http::field::content_type, \"text/plain\");\n        res.keep_alive(false);\n        res.body() = \"Hello World!\";\n        res.prepare_payload();\n\n        m_server.send(hdl, res.body(), boost::beast::http::verb::get);\n    }\n\n    std::string get_password() {\n        return \"your_password\";\n    }\n\n    ssl_context::ptr on_tls_init(tls_mode mode, websocketpp::connection_hdl hdl) {\n        auto ctx = std::make_shared<ssl_context>(boost::asio::ssl::context::sslv23);\n\n        if (mode == MOZILLA_INTERMEDIATE) {\n            ctx->set_options(\n                boost::asio::ssl::context::default_workarounds |\n                boost::asio::ssl::context::no_sslv2 |\n                boost::asio::ssl::context::no_sslv3 |\n                boost::asio::ssl::context::single_dh_use\n            );\n            ctx->set_password_callback([this](std::size_t max_length, boost::asio::ssl::context::password_purpose purpose) {\n                return get_password();\n            });\n            ctx->use_certificate_chain_file(\"server.crt\");\n            ctx->use_private_key_file(\"server.key\", boost::asio::ssl::context::pem);\n            ctx->use_tmp_dh_file(\"dhparams.pem\");\n        } else if (mode == MOZILLA_MODERN) {\n            // Modern TLS settings can be added here\n        }\n\n        return ctx;\n    }\n\n    server m_server;\n};",
      "```cpp\n#include <websocketpp/config/asio_tls.hpp>\n#include <websocketpp/server.hpp>\n\n#include <boost/filesystem.hpp>\n#include <boost/lexical_cast.hpp>\n\n#include <string>\n#include <iostream>\n#include <map>\n\ntypedef websocketpp::server<websocketpp::config::asio_tls> server;\ntypedef server::message_ptr message_ptr;\ntypedef server::tls_socket::context_ptr context_ptr;\n\nenum tls_mode {\n    MOZILLA_INTERMEDIATE,\n    MOZILLA_MODERN\n};\n\nclass WebSocketServer {\npublic:\n    WebSocketServer() {\n        m_server.init_asio();\n        m_server.set_reuse_addr(true);\n        m_server.set_tls_init_handler(std::bind(&WebSocketServer::on_tls_init, this, std::placeholders::_1, std::placeholders::_2));\n        m_server.set_message_handler(std::bind(&WebSocketServer::on_message, this, std::placeholders::_1, std::placeholders::_2));\n        m_server.set_http_handler(std::bind(&WebSocketServer::on_http, this, std::placeholders::_1));\n    }\n\n    void run(int port) {\n        try {\n            m_server.listen(port);\n            m_server.start_accept();\n            m_server.run();\n        } catch (const std::exception& e) {\n            std::cerr << \"Exception: \" << e.what() << std::endl;\n        }\n    }\n\nprivate:\n    void on_message(websocketpp::connection_hdl hdl, message_ptr msg) {\n        try {\n            m_server.send(hdl, msg->get_payload(), msg->get_opcode());\n        } catch (const std::exception& e) {\n            std::cerr << \"Error sending message: \" << e.what() << std::endl;\n        }\n    }\n\n    void on_http(websocketpp::connection_hdl hdl) {\n        server::connection_ptr con = m_server.get_con_from_hdl(hdl);\n        con->set_status(websocketpp::http::status_code::ok);\n        con->set_body(\"Hello World!\");\n    }\n\n    std::string get_password() {\n        return \"your_password\";\n    }\n\n    context_ptr on_tls_init(tls_mode mode, websocketpp::connection_hdl hdl) {\n        context_ptr ctx = SSL_CTX_new(SSLv23_server_method());\n\n        if (!ctx) {\n            throw std::runtime_error(\"SSL_CTX_new failed\");\n        }\n\n        const std::string cert_dir = boost::filesystem::current_path().string();\n\n        if (mode == MOZILLA_INTERMEDIATE) {\n            SSL_CTX_set_options(ctx, SSL_OP_NO_SSLv2 | SSL_OP_NO_SSLv3 | SSL_OP_NO_COMPRESSION);\n            SSL_CTX_set_cipher_list(ctx, \"ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA\");\n        } else if (mode == MOZILLA_MODERN) {\n            SSL_CTX_set_options(ctx, SSL_OP_NO_SSLv2 | SSL_OP_NO_SSLv3 | SSL_OP_NO_TLSv1 | SSL_OP_NO_TLSv1_1 | SSL_OP_NO_COMPRESSION);\n            SSL_CTX_set_cipher_list(ctx, \"ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA\");\n        }\n\n        SSL_CTX_use_certificate_chain_file(ctx, (cert_dir + \"/server.crt\").c_str());\n        SSL_CTX_use_PrivateKey_file(ctx, (cert_dir + \"/server.key\").c_str(), SSL_FILETYPE_PEM);\n        SSL_CTX_check_private_key(ctx);\n\n        return ctx;\n    }\n\n    server m_server;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_tls.hpp>\n#include <websocketpp/server.hpp>\n\n#include <boost/beast/websocket.hpp>\n#include <boost/beast/websocket/ssl.hpp>\n#include <boost/beast/http.hpp>\n#include <boost/asio/ssl.hpp>\n#include <boost/asio/ip/tcp.hpp>\n#include <boost/asio.hpp>\n\n#include <string>\n#include <iostream>\n#include <memory>\n\nnamespace websocketpp = websocketpp;\ntypedef websocketpp::server<websocketpp::config::asio_tls> server;\ntypedef websocketpp::config::asio_tls::message_ptr message_ptr;\ntypedef websocketpp::lib::shared_ptr<boost::asio::ssl::context> context_ptr;\n\nenum class tls_mode {\n    MOZILLA_INTERMEDIATE,\n    MOZILLA_MODERN\n};\n\nclass WebSocketServer {\npublic:\n    WebSocketServer() {\n        m_server.init_asio();\n        m_server.set_reuse_addr(true);\n\n        m_server.set_message_handler(\n            std::bind(&WebSocketServer::on_message, this, std::placeholders::_1, std::placeholders::_2)\n        );\n\n        m_server.set_http_handler(\n            std::bind(&WebSocketServer::on_http, this, std::placeholders::_1)\n        );\n\n        m_server.set_tls_init_handler(\n            std::bind(&WebSocketServer::on_tls_init, this, std::placeholders::_1, std::placeholders::_2)\n        );\n    }\n\n    void run(int port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    void on_message(websocketpp::connection_hdl hdl, message_ptr msg) {\n        try {\n            m_server.send(hdl, msg->get_payload(), msg->get_opcode());\n        } catch (const std::exception& e) {\n            std::cerr << \"Error sending message: \" << e.what() << std::endl;\n        }\n    }\n\n    void on_http(websocketpp::connection_hdl hdl) {\n        boost::beast::http::response<boost::beast::http::string_body> res{boost::beast::http::status::ok, 11};\n        res.set(boost::beast::http::field::server, \"WebSocket++\");\n        res.set(boost::beast::http::field::content_type, \"text/plain\");\n        res.keep_alive(false);\n        res.body() = \"Hello World!\";\n        res.prepare_payload();\n\n        m_server.send(hdl, res.body(), boost::beast::http::verb::get);\n    }\n\n    std::string get_password() {\n        return \"your_password\";\n    }\n\n    context_ptr on_tls_init(tls_mode mode, websocketpp::connection_hdl hdl) {\n        context_ptr ctx = std::make_shared<boost::asio::ssl::context>(boost::asio::ssl::context::sslv23);\n\n        if (mode == tls_mode::MOZILLA_INTERMEDIATE) {\n            ctx->set_options(\n                boost::asio::ssl::context::default_workarounds |\n                boost::asio::ssl::context::no_sslv2 |\n                boost::asio::ssl::context::no_sslv3 |\n                boost::asio::ssl::context::single_dh_use\n            );\n            ctx->set_password_callback(std::bind(&WebSocketServer::get_password, this));\n            ctx->use_certificate_chain_file(\"server.crt\");\n            ctx->use_private_key_file(\"server.key\", boost::asio::ssl::context::pem);\n            ctx->use_tmp_dh_file(\"dhparams.pem\");\n        } else if (mode == tls_mode::MOZILLA_MODERN) {\n            ctx->set_options(\n                boost::asio::ssl::context::default_workarounds |\n                boost::asio::ssl::context::no_sslv2 |\n                boost::asio::ssl::context::no_sslv3 |\n                boost::asio::ssl::context::single_dh_use\n            );\n            ctx->set_password_callback(std::bind(&WebSocketServer::get_password, this));\n            ctx->use_certificate_chain_file(\"server.crt\");\n            ctx->use_private_key_file(\"server.key\", boost::asio::ssl::context::pem);\n            ctx->use_tmp_dh_file(\"dhparams.pem\");\n        }\n\n        return ctx;\n    }\n\n    server m_server;\n};\n```"
    ],
    "unmatched_results": [
      "#include <websocketpp/config/asio_tls.hpp>\n#include <websocketpp/server.hpp>\n\n#include <boost/asio.hpp>\n#include <boost/beast/websocket.hpp>\n#include <boost/beast/websocket/ssl.hpp>\n#include <boost/beast/http.hpp>\n#include <boost/beast/version.hpp>\n#include <boost/asio/ssl.hpp>\n#include <boost/asio/ip/tcp.hpp>\n#include <boost/asio/ssl/context.hpp>\n#include <boost/asio/ssl/rfc2818_verification.hpp>\n#include <boost/asio/ssl/stream.hpp>\n#include <boost/asio/ssl/context_base.hpp>\n#include <boost/asio/ssl/context.hpp>\n#include <boost/asio/ssl/detail/openssl_init.hpp>\n#include <boost/asio/ssl/detail/openssl_types.hpp>\n#include <boost/asio/ssl/detail/impl/opaque_handle.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_init.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_stream_service.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_verify_callback.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_certificate.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_context.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_key.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_request.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_store.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_trust.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_result.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_options.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_status.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_time.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_type.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_usage.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_error.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_depth.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_flags.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_purpose.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_trust.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_host.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_ip.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_email.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_dirname.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_othername.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_issuer.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_subject.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_serial.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_fingerprint.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_not_before.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_not_after.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_version.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_signature_algorithm.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_algorithm.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_length.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_modulus.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_exponent.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_bits.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_size.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_type.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_format.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_encoding.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_hash.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_fingerprint.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_not_before.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_not_after.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_version.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_signature_algorithm.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_algorithm.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_length.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_modulus.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_exponent.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_bits.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_size.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_type.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_format.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_encoding.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_hash.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_fingerprint.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_not_before.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_not_after.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_version.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_signature_algorithm.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_algorithm.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_length.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_modulus.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_exponent.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_bits.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_size.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_type.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_format.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_encoding.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_hash.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_fingerprint.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_not_before.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_not_after.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_version.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_signature_algorithm.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_algorithm.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_length.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_modulus.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_exponent.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_bits.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_size.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_type.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_format.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_encoding.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_hash.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_fingerprint.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_not_before.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_not_after.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_version.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_signature_algorithm.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_algorithm.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_length.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_modulus.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_exponent.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_bits.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_size.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_type.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_format.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_encoding.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_hash.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_fingerprint.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_not_before.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_not_after.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_version.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_signature_algorithm.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_algorithm.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_length.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_modulus.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_exponent.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_bits.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_size.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_type.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_format.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_encoding.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_hash.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_fingerprint.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_not_before.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_not_after.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_version.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_signature_algorithm.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_algorithm.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_length.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_modulus.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_exponent.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_bits.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_size.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_type.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_format.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_encoding.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_hash.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_fingerprint.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_not_before.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_not_after.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_version.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_signature_algorithm.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_algorithm.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_length.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_modulus.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_exponent.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_bits.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_size.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_type.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_format.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_encoding.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_hash.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_fingerprint.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_not_before.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_not_after.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_version.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_signature_algorithm.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_algorithm.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_length.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_modulus.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_exponent.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_bits.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_size.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_type.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_format.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_encoding.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_hash.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_fingerprint.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_not_before.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_not_after.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_version.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_signature_algorithm.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_algorithm.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_length.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_modulus.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_exponent.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_bits.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_size.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_type.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_format.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_encoding.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_hash.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_fingerprint.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_not_before.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_not_after.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_version.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_signature_algorithm.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_algorithm.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_length.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_modulus.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_exponent.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_bits.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_size.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_type.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_format.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_encoding.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_hash.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_fingerprint.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_not_before.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_not_after.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_version.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_signature_algorithm.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_algorithm.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_length.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_modulus.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_exponent.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_bits.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_size.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_type.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_format.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_encoding.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_hash.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_fingerprint.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_not_before.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_not_after.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_version.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_signature_algorithm.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_algorithm.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_length.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_modulus.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_exponent.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_bits.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_size.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_type.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_format.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_encoding.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_hash.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_fingerprint.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_not_before.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_not_after.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_version.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_signature_algorithm.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_algorithm.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_length.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_modulus.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_exponent.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_bits.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_size.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_type.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_format.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_encoding.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_hash.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_fingerprint.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_not_before.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_not_after.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_version.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_signature_algorithm.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_algorithm.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_length.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_modulus.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_exponent.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_bits.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_size.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_type.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_format.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_encoding.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_hash.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_fingerprint.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_not_before.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_not_after.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_version.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_signature_algorithm.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_algorithm.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_length.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_modulus.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_exponent.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_bits.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_size.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_type.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_format.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_encoding.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_hash.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_fingerprint.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_not_before.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_not_after.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_version.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_signature_algorithm.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_algorithm.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_length.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_modulus.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_exponent.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_bits.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_size.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_type.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_format.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_encoding.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_hash.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_fingerprint.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_not_before.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_not_after.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_version.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_signature_algorithm.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_algorithm.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_length.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_modulus.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_exponent.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_bits.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_size.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_type.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_format.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_encoding.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_hash.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_fingerprint.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_not_before.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_not_after.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_version.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_signature_algorithm.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_algorithm.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_length.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_modulus.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_exponent.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_bits.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_size.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_type.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_format.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_encoding.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_hash.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_fingerprint.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_not_before.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_not_after.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_version.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_signature_algorithm.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_algorithm.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_length.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_modulus.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_exponent.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_bits.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_size.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_type.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_format.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_encoding.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_hash.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_fingerprint.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_not_before.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_not_after.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_version.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_signature_algorithm.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_algorithm.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_length.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_modulus.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_exponent.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_bits.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_size.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_type.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_format.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_encoding.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_hash.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_fingerprint.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_not_before.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_not_after.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_version.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_signature_algorithm.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_algorithm.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_length.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_modulus.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_exponent.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_bits.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_size.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_type.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_format.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_encoding.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_hash.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_fingerprint.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_not_before.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_not_after.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_version.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_signature_algorithm.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_algorithm.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_length.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_modulus.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_exponent.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_bits.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_size.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_type.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_format.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_encoding.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_hash.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_fingerprint.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_not_before.ipp>\n#include <boost/asio/ssl/detail/impl/openssl_x509_verify_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public_key_public"
    ],
    "match_count": 9,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 49,
    "Instruction": "Task Description: Implement a WebSocket broadcast server in C++ using the WebSocket++ library that can handle multiple client connections, manage subscriptions, and broadcast messages to all connected clients.\n\nClass Description: The `broadcast_server` class implements a WebSocket server that maintains a set of active connections and can broadcast messages to all connected clients. It handles connection events (open/close) and message events using a thread-safe action queue system.\n\nAttributes:\n- m_server: [server] - WebSocket++ server instance configured with ASIO\n- m_connections: [con_list] - Set of active WebSocket connection handles\n- m_actions: [std::queue<action>] - Queue of pending actions to process\n- m_action_lock: [mutex] - Mutex for protecting access to the action queue\n- m_connection_lock: [mutex] - Mutex for protecting access to the connections set\n- m_action_cond: [condition_variable] - Condition variable for action queue notification\n\nMethods:\n- broadcast_server() -> [constructor] - Initializes the WebSocket server and sets up event handlers\n- run(uint16_t port) -> [void] - Starts the server listening on the specified port and begins accepting connections\n- on_open(connection_hdl hdl) -> [void] - Handler for new WebSocket connections (adds SUBSCRIBE action)\n- on_close(connection_hdl hdl) -> [void] - Handler for closed WebSocket connections (adds UNSUBSCRIBE action)\n- on_message(connection_hdl hdl, server::message_ptr msg) -> [void] - Handler for incoming messages (adds MESSAGE action)\n- process_messages() -> [void] - Processes actions from the queue (manages subscriptions and broadcasts messages)",
    "Canonical_solution": "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <websocketpp/common/thread.hpp>\n#include <iostream>\n#include <set>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\nusing websocketpp::connection_hdl;\nusing websocketpp::lib::placeholders::_1;\nusing websocketpp::lib::placeholders::_2;\nusing websocketpp::lib::bind;\nusing websocketpp::lib::thread;\nusing websocketpp::lib::mutex;\nusing websocketpp::lib::lock_guard;\nusing websocketpp::lib::unique_lock;\nusing websocketpp::lib::condition_variable;\n\nenum action_type {\n    SUBSCRIBE,\n    UNSUBSCRIBE,\n    MESSAGE\n};\n\nstruct action {\n    action(action_type t, connection_hdl h) : type(t), hdl(h) {}\n    action(action_type t, connection_hdl h, server::message_ptr m)\n      : type(t), hdl(h), msg(m) {}\n\n    action_type type;\n    websocketpp::connection_hdl hdl;\n    server::message_ptr msg;\n};\n\nclass broadcast_server {\npublic:\n    broadcast_server() {\n        m_server.init_asio();\n        m_server.set_open_handler(bind(&broadcast_server::on_open,this,::_1));\n        m_server.set_close_handler(bind(&broadcast_server::on_close,this,::_1));\n        m_server.set_message_handler(bind(&broadcast_server::on_message,this,::_1,::_2));\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        try {\n            m_server.run();\n        } catch (const std::exception & e) {\n            std::cout << e.what() << std::endl;\n        }\n    }\n\n    void on_open(connection_hdl hdl) {\n        {\n            lock_guard<mutex> guard(m_action_lock);\n            m_actions.push(action(SUBSCRIBE,hdl));\n        }\n        m_action_cond.notify_one();\n    }\n\n    void on_close(connection_hdl hdl) {\n        {\n            lock_guard<mutex> guard(m_action_lock);\n            m_actions.push(action(UNSUBSCRIBE,hdl));\n        }\n        m_action_cond.notify_one();\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        {\n            lock_guard<mutex> guard(m_action_lock);\n            m_actions.push(action(MESSAGE,hdl,msg));\n        }\n        m_action_cond.notify_one();\n    }\n\n    void process_messages() {\n        while(1) {\n            unique_lock<mutex> lock(m_action_lock);\n            while(m_actions.empty()) {\n                m_action_cond.wait(lock);\n            }\n\n            action a = m_actions.front();\n            m_actions.pop();\n            lock.unlock();\n\n            if (a.type == SUBSCRIBE) {\n                lock_guard<mutex> guard(m_connection_lock);\n                m_connections.insert(a.hdl);\n            } else if (a.type == UNSUBSCRIBE) {\n                lock_guard<mutex> guard(m_connection_lock);\n                m_connections.erase(a.hdl);\n            } else if (a.type == MESSAGE) {\n                lock_guard<mutex> guard(m_connection_lock);\n                con_list::iterator it;\n                for (it = m_connections.begin(); it != m_connections.end(); ++it) {\n                    m_server.send(*it,a.msg);\n                }\n            }\n        }\n    }\n\nprivate:\n    typedef std::set<connection_hdl,std::owner_less<connection_hdl> > con_list;\n    server m_server;\n    con_list m_connections;\n    std::queue<action> m_actions;\n    mutex m_action_lock;\n    mutex m_connection_lock;\n    condition_variable m_action_cond;\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 154,
    "matched_results": [
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\n#include <queue>\n#include <mutex>\n#include <condition_variable>\n#include <set>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef server::connection_hdl connection_hdl;\ntypedef std::set<connection_hdl> con_list;\n\nenum class action_type {\n    SUBSCRIBE,\n    UNSUBSCRIBE,\n    MESSAGE\n};\n\nstruct action {\n    action_type type;\n    connection_hdl hdl;\n    server::message_ptr msg;\n};\n\nclass broadcast_server {\npublic:\n    broadcast_server() {\n        m_server.init_asio();\n        m_server.set_reuse_addr(true);\n\n        m_server.set_open_handler(\n            std::bind(&broadcast_server::on_open, this, std::placeholders::_1)\n        );\n\n        m_server.set_close_handler(\n            std::bind(&broadcast_server::on_close, this, std::placeholders::_1)\n        );\n\n        m_server.set_message_handler(\n            std::bind(&broadcast_server::on_message, this, std::placeholders::_1, std::placeholders::_2)\n        );\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n\n        std::thread t(&broadcast_server::process_messages, this);\n        m_server.run();\n        t.join();\n    }\n\nprivate:\n    void on_open(connection_hdl hdl) {\n        std::lock_guard<std::mutex> lock(m_action_lock);\n        m_actions.push({action_type::SUBSCRIBE, hdl, nullptr});\n        m_action_cond.notify_one();\n    }\n\n    void on_close(connection_hdl hdl) {\n        std::lock_guard<std::mutex> lock(m_action_lock);\n        m_actions.push({action_type::UNSUBSCRIBE, hdl, nullptr});\n        m_action_cond.notify_one();\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        std::lock_guard<std::mutex> lock(m_action_lock);\n        m_actions.push({action_type::MESSAGE, hdl, msg});\n        m_action_cond.notify_one();\n    }\n\n    void process_messages() {\n        while (true) {\n            std::unique_lock<std::mutex> lock(m_action_lock);\n            m_action_cond.wait(lock, [this] { return !m_actions.empty(); });\n\n            action a = m_actions.front();\n            m_actions.pop();\n            lock.unlock();\n\n            if (a.type == action_type::SUBSCRIBE) {\n                std::lock_guard<std::mutex> conn_lock(m_connection_lock);\n                m_connections.insert(a.hdl);\n            } else if (a.type == action_type::UNSUBSCRIBE) {\n                std::lock_guard<std::mutex> conn_lock(m_connection_lock);\n                m_connections.erase(a.hdl);\n            } else if (a.type == action_type::MESSAGE) {\n                std::lock_guard<std::mutex> conn_lock(m_connection_lock);\n                for (auto it = m_connections.begin(); it != m_connections.end(); ++it) {\n                    try {\n                        m_server.send(*it, a.msg->get_payload(), a.msg->get_opcode());\n                    } catch (...) {}\n                }\n            }\n        }\n    }\n\n    server m_server;\n    con_list m_connections;\n    std::queue<action> m_actions;\n    std::mutex m_action_lock;\n    std::mutex m_connection_lock;\n    std::condition_variable m_action_cond;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\n#include <queue>\n#include <thread>\n#include <mutex>\n#include <condition_variable>\n#include <set>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef server::connection_hdl connection_hdl;\ntypedef std::set<connection_hdl> con_list;\n\nenum class action_type {\n    SUBSCRIBE,\n    UNSUBSCRIBE,\n    MESSAGE\n};\n\nstruct action {\n    action_type type;\n    connection_hdl hdl;\n    server::message_ptr msg;\n};\n\nclass broadcast_server {\npublic:\n    broadcast_server() {\n        m_server.init_asio();\n        m_server.set_message_handler(\n            std::bind(&broadcast_server::on_message, this, std::placeholders::_1, std::placeholders::_2)\n        );\n        m_server.set_open_handler(\n            std::bind(&broadcast_server::on_open, this, std::placeholders::_1)\n        );\n        m_server.set_close_handler(\n            std::bind(&broadcast_server::on_close, this, std::placeholders::_1)\n        );\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n\n        std::thread t(&broadcast_server::process_messages, this);\n        t.detach();\n\n        m_server.run();\n    }\n\nprivate:\n    void on_open(connection_hdl hdl) {\n        std::lock_guard<std::mutex> lock(m_action_lock);\n        m_actions.push({action_type::SUBSCRIBE, hdl, nullptr});\n        m_action_cond.notify_one();\n    }\n\n    void on_close(connection_hdl hdl) {\n        std::lock_guard<std::mutex> lock(m_action_lock);\n        m_actions.push({action_type::UNSUBSCRIBE, hdl, nullptr});\n        m_action_cond.notify_one();\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        std::lock_guard<std::mutex> lock(m_action_lock);\n        m_actions.push({action_type::MESSAGE, hdl, msg});\n        m_action_cond.notify_one();\n    }\n\n    void process_messages() {\n        while (true) {\n            std::unique_lock<std::mutex> lock(m_action_lock);\n            m_action_cond.wait(lock, [this] { return !m_actions.empty(); });\n\n            action a = m_actions.front();\n            m_actions.pop();\n            lock.unlock();\n\n            if (a.type == action_type::SUBSCRIBE) {\n                std::lock_guard<std::mutex> conn_lock(m_connection_lock);\n                m_connections.insert(a.hdl);\n            } else if (a.type == action_type::UNSUBSCRIBE) {\n                std::lock_guard<std::mutex> conn_lock(m_connection_lock);\n                m_connections.erase(a.hdl);\n            } else if (a.type == action_type::MESSAGE) {\n                std::string payload = a.msg->get_payload();\n                std::lock_guard<std::mutex> conn_lock(m_connection_lock);\n\n                for (auto const& conn : m_connections) {\n                    m_server.send(conn, payload, a.msg->get_opcode());\n                }\n            }\n        }\n    }\n\n    server m_server;\n    con_list m_connections;\n    std::queue<action> m_actions;\n    std::mutex m_action_lock;\n    std::mutex m_connection_lock;\n    std::condition_variable m_action_cond;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\n#include <queue>\n#include <thread>\n#include <mutex>\n#include <condition_variable>\n#include <set>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef server::connection_hdl connection_hdl;\ntypedef std::set<connection_hdl> con_list;\n\nenum class action_type {\n    SUBSCRIBE,\n    UNSUBSCRIBE,\n    MESSAGE\n};\n\nstruct action {\n    action_type type;\n    connection_hdl hdl;\n    server::message_ptr msg;\n};\n\nclass broadcast_server {\npublic:\n    broadcast_server() {\n        m_server.init_asio();\n        m_server.set_open_handler(std::bind(&broadcast_server::on_open, this,::_1));\n        m_server.set_close_handler(std::bind(&broadcast_server::on_close, this,::_1));\n        m_server.set_message_handler(std::bind(&broadcast_server::on_message, this,::_1,::_2));\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n\n        std::thread t([this]() { m_server.run(); });\n        process_messages();\n\n        t.join();\n    }\n\nprivate:\n    void on_open(connection_hdl hdl) {\n        std::lock_guard<std::mutex> lock(m_action_lock);\n        m_actions.push({action_type::SUBSCRIBE, hdl, nullptr});\n        m_action_cond.notify_one();\n    }\n\n    void on_close(connection_hdl hdl) {\n        std::lock_guard<std::mutex> lock(m_action_lock);\n        m_actions.push({action_type::UNSUBSCRIBE, hdl, nullptr});\n        m_action_cond.notify_one();\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        std::lock_guard<std::mutex> lock(m_action_lock);\n        m_actions.push({action_type::MESSAGE, hdl, msg});\n        m_action_cond.notify_one();\n    }\n\n    void process_messages() {\n        while (true) {\n            std::unique_lock<std::mutex> lock(m_action_lock);\n            m_action_cond.wait(lock, [this] { return !m_actions.empty(); });\n\n            action a = m_actions.front();\n            m_actions.pop();\n            lock.unlock();\n\n            if (a.type == action_type::SUBSCRIBE) {\n                std::lock_guard<std::mutex> conn_lock(m_connection_lock);\n                m_connections.insert(a.hdl);\n            } else if (a.type == action_type::UNSUBSCRIBE) {\n                std::lock_guard<std::mutex> conn_lock(m_connection_lock);\n                m_connections.erase(a.hdl);\n            } else if (a.type == action_type::MESSAGE) {\n                std::string payload = a.msg->get_payload();\n                {\n                    std::lock_guard<std::mutex> conn_lock(m_connection_lock);\n                    for (auto const& conn : m_connections) {\n                        m_server.send(conn, payload, a.msg->get_opcode());\n                    }\n                }\n            }\n        }\n    }\n\n    server m_server;\n    con_list m_connections;\n    std::queue<action> m_actions;\n    std::mutex m_action_lock;\n    std::mutex m_connection_lock;\n    std::condition_variable m_action_cond;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\n#include <queue>\n#include <thread>\n#include <mutex>\n#include <condition_variable>\n#include <set>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef server::connection_hdl connection_hdl;\ntypedef std::set<connection_hdl> con_list;\n\nenum class action_type {\n    SUBSCRIBE,\n    UNSUBSCRIBE,\n    MESSAGE\n};\n\nstruct action {\n    action_type type;\n    connection_hdl hdl;\n    server::message_ptr msg;\n};\n\nclass broadcast_server {\npublic:\n    broadcast_server() {\n        m_server.init_asio();\n        m_server.set_reuse_addr(true);\n\n        m_server.set_open_handler(\n            std::bind(&broadcast_server::on_open, this, std::placeholders::_1)\n        );\n\n        m_server.set_close_handler(\n            std::bind(&broadcast_server::on_close, this, std::placeholders::_1)\n        );\n\n        m_server.set_message_handler(\n            std::bind(&broadcast_server::on_message, this, std::placeholders::_1, std::placeholders::_2)\n        );\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n\n        std::thread t(&broadcast_server::process_messages, this);\n        m_server.run();\n        t.join();\n    }\n\nprivate:\n    void on_open(connection_hdl hdl) {\n        std::lock_guard<std::mutex> lock(m_action_lock);\n        m_actions.push({action_type::SUBSCRIBE, hdl, nullptr});\n        m_action_cond.notify_one();\n    }\n\n    void on_close(connection_hdl hdl) {\n        std::lock_guard<std::mutex> lock(m_action_lock);\n        m_actions.push({action_type::UNSUBSCRIBE, hdl, nullptr});\n        m_action_cond.notify_one();\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        std::lock_guard<std::mutex> lock(m_action_lock);\n        m_actions.push({action_type::MESSAGE, hdl, msg});\n        m_action_cond.notify_one();\n    }\n\n    void process_messages() {\n        while (true) {\n            std::unique_lock<std::mutex> lock(m_action_lock);\n            m_action_cond.wait(lock, [this] { return !m_actions.empty(); });\n\n            action a = m_actions.front();\n            m_actions.pop();\n            lock.unlock();\n\n            if (a.type == action_type::SUBSCRIBE) {\n                std::lock_guard<std::mutex> conn_lock(m_connection_lock);\n                m_connections.insert(a.hdl);\n            } else if (a.type == action_type::UNSUBSCRIBE) {\n                std::lock_guard<std::mutex> conn_lock(m_connection_lock);\n                m_connections.erase(a.hdl);\n            } else if (a.type == action_type::MESSAGE) {\n                std::lock_guard<std::mutex> conn_lock(m_connection_lock);\n                for (auto const& conn : m_connections) {\n                    m_server.send(conn, a.msg->get_payload(), a.msg->get_opcode());\n                }\n            }\n        }\n    }\n\n    server m_server;\n    con_list m_connections;\n    std::queue<action> m_actions;\n    std::mutex m_action_lock;\n    std::mutex m_connection_lock;\n    std::condition_variable m_action_cond;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\n#include <queue>\n#include <set>\n#include <thread>\n#include <mutex>\n#include <condition_variable>\n#include <memory>\n#include <string>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef server::connection_hdl connection_hdl;\ntypedef std::set<connection_hdl> con_list;\n\nenum class action_type {\n    SUBSCRIBE,\n    UNSUBSCRIBE,\n    MESSAGE\n};\n\nstruct action {\n    action_type type;\n    connection_hdl hdl;\n    std::shared_ptr<server::message_type> msg;\n};\n\nclass broadcast_server {\npublic:\n    broadcast_server() {\n        m_server.init_asio();\n        m_server.set_reuse_addr(true);\n\n        m_server.set_open_handler(\n            std::bind(&broadcast_server::on_open, this, std::placeholders::_1)\n        );\n\n        m_server.set_close_handler(\n            std::bind(&broadcast_server::on_close, this, std::placeholders::_1)\n        );\n\n        m_server.set_message_handler(\n            std::bind(&broadcast_server::on_message, this, std::placeholders::_1, std::placeholders::_2)\n        );\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n\n        std::thread t(&server::run, &m_server);\n        t.detach();\n\n        process_messages();\n    }\n\nprivate:\n    void on_open(connection_hdl hdl) {\n        std::lock_guard<std::mutex> lock(m_action_lock);\n        m_actions.push({action_type::SUBSCRIBE, hdl, nullptr});\n        m_action_cond.notify_one();\n    }\n\n    void on_close(connection_hdl hdl) {\n        std::lock_guard<std::mutex> lock(m_action_lock);\n        m_actions.push({action_type::UNSUBSCRIBE, hdl, nullptr});\n        m_action_cond.notify_one();\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        std::lock_guard<std::mutex> lock(m_action_lock);\n        m_actions.push({action_type::MESSAGE, hdl, msg});\n        m_action_cond.notify_one();\n    }\n\n    void process_messages() {\n        while (true) {\n            std::unique_lock<std::mutex> lock(m_action_lock);\n            m_action_cond.wait(lock, [this] { return !m_actions.empty(); });\n\n            action a = m_actions.front();\n            m_actions.pop();\n            lock.unlock();\n\n            if (a.type == action_type::SUBSCRIBE) {\n                std::lock_guard<std::mutex> conn_lock(m_connection_lock);\n                m_connections.insert(a.hdl);\n            } else if (a.type == action_type::UNSUBSCRIBE) {\n                std::lock_guard<std::mutex> conn_lock(m_connection_lock);\n                m_connections.erase(a.hdl);\n            } else if (a.type == action_type::MESSAGE) {\n                std::string payload = a.msg->get_payload();\n                std::lock_guard<std::mutex> conn_lock(m_connection_lock);\n                for (auto const& conn : m_connections) {\n                    m_server.send(conn, payload, a.msg->get_opcode());\n                }\n            }\n        }\n    }\n\n    server m_server;\n    con_list m_connections;\n    std::queue<action> m_actions;\n    std::mutex m_action_lock;\n    std::mutex m_connection_lock;\n    std::condition_variable m_action_cond;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\n#include <queue>\n#include <mutex>\n#include <condition_variable>\n#include <thread>\n#include <set>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef server::connection_hdl connection_hdl;\ntypedef std::set<connection_hdl> con_list;\n\nenum class action_type {\n    SUBSCRIBE,\n    UNSUBSCRIBE,\n    MESSAGE\n};\n\nstruct action {\n    action_type type;\n    connection_hdl hdl;\n    server::message_ptr msg;\n};\n\nclass broadcast_server {\npublic:\n    broadcast_server() {\n        m_server.init_asio();\n        m_server.set_reuse_addr(true);\n\n        m_server.set_open_handler(\n            std::bind(&broadcast_server::on_open, this, std::placeholders::_1)\n        );\n\n        m_server.set_close_handler(\n            std::bind(&broadcast_server::on_close, this, std::placeholders::_1)\n        );\n\n        m_server.set_message_handler(\n            std::bind(&broadcast_server::on_message, this, std::placeholders::_1, std::placeholders::_2)\n        );\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n\n        std::thread t(&broadcast_server::process_messages, this);\n        m_server.run();\n        t.join();\n    }\n\nprivate:\n    void on_open(connection_hdl hdl) {\n        std::lock_guard<std::mutex> lock(m_action_lock);\n        m_actions.push({action_type::SUBSCRIBE, hdl, nullptr});\n        m_action_cond.notify_one();\n    }\n\n    void on_close(connection_hdl hdl) {\n        std::lock_guard<std::mutex> lock(m_action_lock);\n        m_actions.push({action_type::UNSUBSCRIBE, hdl, nullptr});\n        m_action_cond.notify_one();\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        std::lock_guard<std::mutex> lock(m_action_lock);\n        m_actions.push({action_type::MESSAGE, hdl, msg});\n        m_action_cond.notify_one();\n    }\n\n    void process_messages() {\n        while (true) {\n            std::unique_lock<std::mutex> lock(m_action_lock);\n            m_action_cond.wait(lock, [this] { return !m_actions.empty(); });\n\n            action a = m_actions.front();\n            m_actions.pop();\n            lock.unlock();\n\n            if (a.type == action_type::SUBSCRIBE) {\n                std::lock_guard<std::mutex> conn_lock(m_connection_lock);\n                m_connections.insert(a.hdl);\n            } else if (a.type == action_type::UNSUBSCRIBE) {\n                std::lock_guard<std::mutex> conn_lock(m_connection_lock);\n                m_connections.erase(a.hdl);\n            } else if (a.type == action_type::MESSAGE) {\n                std::lock_guard<std::mutex> conn_lock(m_connection_lock);\n                for (auto it = m_connections.begin(); it != m_connections.end(); ++it) {\n                    try {\n                        m_server.send(*it, a.msg->get_raw_payload(), a.msg->get_opcode());\n                    } catch (...) {\n                        // Handle send error\n                    }\n                }\n            }\n        }\n    }\n\n    server m_server;\n    con_list m_connections;\n    std::queue<action> m_actions;\n    std::mutex m_action_lock;\n    std::mutex m_connection_lock;\n    std::condition_variable m_action_cond;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\n#include <queue>\n#include <thread>\n#include <mutex>\n#include <condition_variable>\n#include <set>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef server::connection_hdl connection_hdl;\ntypedef std::set<connection_hdl> con_list;\n\nenum class action_type {\n    SUBSCRIBE,\n    UNSUBSCRIBE,\n    MESSAGE\n};\n\nstruct action {\n    action_type type;\n    connection_hdl hdl;\n    server::message_ptr msg;\n};\n\nclass broadcast_server {\npublic:\n    broadcast_server() {\n        m_server.init_asio();\n        m_server.set_open_handler(\n            std::bind(&broadcast_server::on_open, this, std::placeholders::_1));\n        m_server.set_close_handler(\n            std::bind(&broadcast_server::on_close, this, std::placeholders::_1));\n        m_server.set_message_handler(\n            std::bind(&broadcast_server::on_message, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n\n        std::thread t(&server::run, &m_server);\n        t.detach();\n\n        process_messages();\n    }\n\nprivate:\n    void on_open(connection_hdl hdl) {\n        std::lock_guard<std::mutex> lock(m_action_lock);\n        m_actions.push({action_type::SUBSCRIBE, hdl, nullptr});\n        m_action_cond.notify_one();\n    }\n\n    void on_close(connection_hdl hdl) {\n        std::lock_guard<std::mutex> lock(m_action_lock);\n        m_actions.push({action_type::UNSUBSCRIBE, hdl, nullptr});\n        m_action_cond.notify_one();\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        std::lock_guard<std::mutex> lock(m_action_lock);\n        m_actions.push({action_type::MESSAGE, hdl, msg});\n        m_action_cond.notify_one();\n    }\n\n    void process_messages() {\n        while (true) {\n            std::unique_lock<std::mutex> lock(m_action_lock);\n            m_action_cond.wait(lock, [this] { return !m_actions.empty(); });\n\n            action a = m_actions.front();\n            m_actions.pop();\n            lock.unlock();\n\n            if (a.type == action_type::SUBSCRIBE) {\n                std::lock_guard<std::mutex> conn_lock(m_connection_lock);\n                m_connections.insert(a.hdl);\n            } else if (a.type == action_type::UNSUBSCRIBE) {\n                std::lock_guard<std::mutex> conn_lock(m_connection_lock);\n                m_connections.erase(a.hdl);\n            } else if (a.type == action_type::MESSAGE) {\n                std::string payload = a.msg->get_payload();\n                std::lock_guard<std::mutex> conn_lock(m_connection_lock);\n\n                for (auto const& conn : m_connections) {\n                    m_server.send(conn, payload, a.msg->get_opcode());\n                }\n            }\n        }\n    }\n\n    server m_server;\n    con_list m_connections;\n    std::queue<action> m_actions;\n    std::mutex m_action_lock;\n    std::mutex m_connection_lock;\n    std::condition_variable m_action_cond;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\n#include <queue>\n#include <mutex>\n#include <condition_variable>\n#include <set>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef server::connection_hdl connection_hdl;\ntypedef std::set<connection_hdl> con_list;\n\nenum class action_type {\n    SUBSCRIBE,\n    UNSUBSCRIBE,\n    MESSAGE\n};\n\nstruct action {\n    action_type type;\n    connection_hdl hdl;\n    server::message_ptr msg;\n};\n\nclass broadcast_server {\npublic:\n    broadcast_server() {\n        m_server.init_asio();\n        m_server.set_open_handler(\n            std::bind(&broadcast_server::on_open, this, std::placeholders::_1)\n        );\n        m_server.set_close_handler(\n            std::bind(&broadcast_server::on_close, this, std::placeholders::_1)\n        );\n        m_server.set_message_handler(\n            std::bind(&broadcast_server::on_message, this, std::placeholders::_1, std::placeholders::_2)\n        );\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n\n        std::thread t(&server::run, &m_server);\n        t.detach();\n\n        process_messages();\n    }\n\nprivate:\n    void on_open(connection_hdl hdl) {\n        std::lock_guard<std::mutex> lock(m_action_lock);\n        m_actions.push({action_type::SUBSCRIBE, hdl, nullptr});\n        m_action_cond.notify_one();\n    }\n\n    void on_close(connection_hdl hdl) {\n        std::lock_guard<std::mutex> lock(m_action_lock);\n        m_actions.push({action_type::UNSUBSCRIBE, hdl, nullptr});\n        m_action_cond.notify_one();\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        std::lock_guard<std::mutex> lock(m_action_lock);\n        m_actions.push({action_type::MESSAGE, hdl, msg});\n        m_action_cond.notify_one();\n    }\n\n    void process_messages() {\n        while (true) {\n            std::unique_lock<std::mutex> lock(m_action_lock);\n            m_action_cond.wait(lock, [this] { return !m_actions.empty(); });\n\n            action a = m_actions.front();\n            m_actions.pop();\n            lock.unlock();\n\n            switch (a.type) {\n                case action_type::SUBSCRIBE: {\n                    std::lock_guard<std::mutex> conn_lock(m_connection_lock);\n                    m_connections.insert(a.hdl);\n                    break;\n                }\n                case action_type::UNSUBSCRIBE: {\n                    std::lock_guard<std::mutex> conn_lock(m_connection_lock);\n                    m_connections.erase(a.hdl);\n                    break;\n                }\n                case action_type::MESSAGE: {\n                    std::lock_guard<std::mutex> conn_lock(m_connection_lock);\n                    for (auto const& conn : m_connections) {\n                        m_server.send(conn, a.msg->get_payload(), a.msg->get_opcode());\n                    }\n                    break;\n                }\n            }\n        }\n    }\n\n    server m_server;\n    con_list m_connections;\n    std::queue<action> m_actions;\n    std::mutex m_action_lock;\n    std::mutex m_connection_lock;\n    std::condition_variable m_action_cond;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\n#include <queue>\n#include <thread>\n#include <mutex>\n#include <condition_variable>\n#include <set>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef server::connection_hdl connection_hdl;\ntypedef std::set<connection_hdl> con_list;\n\nenum class action_type {\n    SUBSCRIBE,\n    UNSUBSCRIBE,\n    MESSAGE\n};\n\nstruct action {\n    action_type type;\n    connection_hdl hdl;\n    server::message_ptr msg;\n};\n\nclass broadcast_server {\npublic:\n    broadcast_server() {\n        m_server.init_asio();\n        m_server.set_open_handler(std::bind(&broadcast_server::on_open, this,::_1));\n        m_server.set_close_handler(std::bind(&broadcast_server::on_close, this,::_1));\n        m_server.set_message_handler(std::bind(&broadcast_server::on_message, this,::_1,::_2));\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n\n        std::thread t(&server::run, &m_server);\n        t.detach();\n\n        process_messages();\n    }\n\nprivate:\n    void on_open(connection_hdl hdl) {\n        std::lock_guard<std::mutex> lock(m_action_lock);\n        m_actions.push({action_type::SUBSCRIBE, hdl, nullptr});\n        m_action_cond.notify_one();\n    }\n\n    void on_close(connection_hdl hdl) {\n        std::lock_guard<std::mutex> lock(m_action_lock);\n        m_actions.push({action_type::UNSUBSCRIBE, hdl, nullptr});\n        m_action_cond.notify_one();\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        std::lock_guard<std::mutex> lock(m_action_lock);\n        m_actions.push({action_type::MESSAGE, hdl, msg});\n        m_action_cond.notify_one();\n    }\n\n    void process_messages() {\n        while (true) {\n            std::unique_lock<std::mutex> lock(m_action_lock);\n            m_action_cond.wait(lock, [this] { return !m_actions.empty(); });\n\n            action a = m_actions.front();\n            m_actions.pop();\n            lock.unlock();\n\n            if (a.type == action_type::SUBSCRIBE) {\n                std::lock_guard<std::mutex> conn_lock(m_connection_lock);\n                m_connections.insert(a.hdl);\n            } else if (a.type == action_type::UNSUBSCRIBE) {\n                std::lock_guard<std::mutex> conn_lock(m_connection_lock);\n                m_connections.erase(a.hdl);\n            } else if (a.type == action_type::MESSAGE) {\n                std::string payload = a.msg->get_payload();\n                std::lock_guard<std::mutex> conn_lock(m_connection_lock);\n\n                for (auto const& conn : m_connections) {\n                    m_server.send(conn, payload, a.msg->get_opcode());\n                }\n            }\n        }\n    }\n\n    server m_server;\n    con_list m_connections;\n    std::queue<action> m_actions;\n    std::mutex m_action_lock;\n    std::mutex m_connection_lock;\n    std::condition_variable m_action_cond;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\n#include <queue>\n#include <thread>\n#include <mutex>\n#include <condition_variable>\n#include <set>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef server::connection_hdl connection_hdl;\ntypedef std::set<connection_hdl> con_list;\n\nenum class action_type {\n    SUBSCRIBE,\n    UNSUBSCRIBE,\n    MESSAGE\n};\n\nstruct action {\n    action_type type;\n    connection_hdl hdl;\n    server::message_ptr msg;\n};\n\nclass broadcast_server {\npublic:\n    broadcast_server() {\n        m_server.init_asio();\n        m_server.set_reuse_addr(true);\n\n        m_server.set_open_handler(\n            std::bind(&broadcast_server::on_open, this, std::placeholders::_1)\n        );\n\n        m_server.set_close_handler(\n            std::bind(&broadcast_server::on_close, this, std::placeholders::_1)\n        );\n\n        m_server.set_message_handler(\n            std::bind(&broadcast_server::on_message, this, std::placeholders::_1, std::placeholders::_2)\n        );\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n\n        std::thread t(&broadcast_server::process_messages, this);\n        m_server.run();\n        t.join();\n    }\n\nprivate:\n    void on_open(connection_hdl hdl) {\n        std::lock_guard<std::mutex> lock(m_action_lock);\n        m_actions.push({action_type::SUBSCRIBE, hdl, nullptr});\n        m_action_cond.notify_one();\n    }\n\n    void on_close(connection_hdl hdl) {\n        std::lock_guard<std::mutex> lock(m_action_lock);\n        m_actions.push({action_type::UNSUBSCRIBE, hdl, nullptr});\n        m_action_cond.notify_one();\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        std::lock_guard<std::mutex> lock(m_action_lock);\n        m_actions.push({action_type::MESSAGE, hdl, msg});\n        m_action_cond.notify_one();\n    }\n\n    void process_messages() {\n        while (true) {\n            std::unique_lock<std::mutex> lock(m_action_lock);\n            m_action_cond.wait(lock, [this] { return !m_actions.empty(); });\n\n            action a = m_actions.front();\n            m_actions.pop();\n            lock.unlock();\n\n            if (a.type == action_type::SUBSCRIBE) {\n                std::lock_guard<std::mutex> conn_lock(m_connection_lock);\n                m_connections.insert(a.hdl);\n            } else if (a.type == action_type::UNSUBSCRIBE) {\n                std::lock_guard<std::mutex> conn_lock(m_connection_lock);\n                m_connections.erase(a.hdl);\n            } else if (a.type == action_type::MESSAGE) {\n                std::lock_guard<std::mutex> conn_lock(m_connection_lock);\n                for (auto const& conn : m_connections) {\n                    m_server.send(conn, a.msg->get_payload(), a.msg->get_opcode());\n                }\n            }\n        }\n    }\n\n    server m_server;\n    con_list m_connections;\n    std::queue<action> m_actions;\n    std::mutex m_action_lock;\n    std::mutex m_connection_lock;\n    std::condition_variable m_action_cond;\n};\n```"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 5,
    "Instruction": "Task Description: Implement a C++ class that provides HTTP request functionality using libcurl, supporting both file and network resource retrieval.\n\nClass Description: HttpWebRequest is a class that encapsulates HTTP request functionality, allowing users to make GET requests to either network resources (via HTTP) or local files (via file:// protocol). It handles request configuration, execution, and response processing.\n\nAttributes:\n- uri_: std::string - The target URI for the HTTP request\n- method_: std::string - The HTTP method to use (defaults to GET)\n- header_: std::map<std::string, std::string> - HTTP headers to include in the request\n- is_: std::iostream - Internal stream used for request processing\n\nMethods:\n- HttpWebRequest(std::string &uri) -> void - Constructor that initializes the request with a target URI\n- callback(void *buffer, size_t size, size_t nmemb, void *data) -> static size_t - Static callback function for libcurl to write response data\n- GetFileResponse(const char *uri) -> HttpWebResponse* - Handles file:// protocol requests and returns the file content as a response\n- GetNetResponse(const char *uri) -> HttpWebResponse* - Performs HTTP network requests using libcurl and returns the response\n- GetResponse() -> HttpWebResponse* - Main method that determines request type (file or network) and returns the appropriate response",
    "Canonical_solution": "#include <curl/curl.h>\n#include <string>\n#include <map>\n#include <sstream>\n#include <fstream>\n\nnamespace System {\nnamespace Net {\n\nclass HttpWebRequest {\npublic:\n    HttpWebRequest(std::string &uri)\n        : is_(std::ios_base::in | std::ios_base::out | std::ios_base::binary) {\n        uri_ = uri;\n        method_ = HttpWebRequest::Method::GET;\n    }\n\n    static size_t callback(void *buffer, size_t size, size_t nmemb, void *data) {\n        HttpWebResponse *resp = (HttpWebResponse *) data;\n        std::stringstream &ss = resp->GetResponseStream();\n        ss.write((char *) buffer, size * nmemb);\n        return size * nmemb;\n    }\n\n    HttpWebResponse *GetFileResponse(const char *uri) {\n        assert(strlen(uri) > 6);\n        HttpWebResponse *resp = new HttpWebResponse();\n        const char *filename = uri + 6;\n\n        std::ifstream file;\n        file.open(filename);\n        if (file.is_open()) {\n            resp->os_ << file.rdbuf();\n            file.close();\n        }\n\n        return resp;\n    }\n\n    HttpWebResponse *GetNetResponse(const char *uri) {\n        HttpWebResponse *resp = new HttpWebResponse();\n\n        CURL *curl = curl_easy_init();\n\n        curl_easy_setopt(curl, CURLOPT_URL, uri);\n\n        curl_slist *http_headers = NULL;\n        for (std::map<std::string, std::string>::iterator it = header_.begin();\n             it != header_.end(); it++) {\n            http_headers = curl_slist_append(http_headers,\n                                             (it->first + \":\" + it->second).c_str());\n        }\n        curl_easy_setopt(curl, CURLOPT_HTTPHEADER, http_headers);\n        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, &callback);\n        curl_easy_setopt(curl, CURLOPT_WRITEDATA, (void *) resp);\n        curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1);\n        curl_easy_setopt(curl, CURLOPT_TIMEOUT, 2);\n        curl_easy_setopt(curl, CURLOPT_CONNECTTIMEOUT, 2);\n        curl_easy_setopt(curl, CURLOPT_NOSIGNAL, 1);\n\n        curl_easy_perform(curl);\n\n        long retcode = 0;\n        CURLcode code = curl_easy_getinfo(curl, CURLINFO_RESPONSE_CODE, &retcode);\n        if (code == CURLE_OK && retcode == 200) {\n            resp->status_.SetCode(200);\n\n            char *ctype = NULL;\n            curl_easy_getinfo(curl, CURLINFO_CONTENT_TYPE, &ctype);\n            std::string type(ctype);\n            resp->header_.Put(HttpHeader::ContentType, type);\n\n            double length = 0;\n            curl_easy_getinfo(curl, CURLINFO_CONTENT_LENGTH_DOWNLOAD, &length);\n            std::ostringstream os;\n            os << (long) length;\n            resp->header_.Put(HttpHeader::ContentLength, os.str());\n        }\n\n        curl_slist_free_all(http_headers);\n        curl_easy_cleanup(curl);\n\n        return resp;\n    }\n\n    HttpWebResponse *GetResponse() {\n        const char *uri = uri_.c_str();\n        if (strncmp(uri, \"file://\", 7) == 0) {\n            return GetFileResponse(uri);\n        }\n        return GetNetResponse(uri);\n    }\n\nprivate:\n    std::string uri_;\n    std::string method_;\n    std::map<std::string, std::string> header_;\n    std::iostream is_;\n};\n\n}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 146,
    "matched_results": [
      "```cpp\n#include <iostream>\n#include <string>\n#include <map>\n#include <sstream>\n#include <fstream>\n#include <curl/curl.h>\n\nclass HttpWebResponse {\npublic:\n    std::string content;\n    long http_code = 0;\n\n    virtual ~HttpWebResponse() {}\n};\n\nclass HttpWebRequest {\nprivate:\n    std::string uri_;\n    std::string method_ = \"GET\";\n    std::map<std::string, std::string> header_;\n    std::iostream is_;\n\n    static size_t callback(void *buffer, size_t size, size_t nmemb, void *data) {\n        ((std::stringstream*)data)->write((char*)buffer, size * nmemb);\n        return size * nmemb;\n    }\n\n    HttpWebResponse* GetFileResponse(const char *uri) {\n        HttpWebResponse* response = new HttpWebResponse();\n        std::ifstream file(uri, std::ios::binary | std::ios::ate);\n        if (file.is_open()) {\n            std::streamsize size = file.tellg();\n            file.seekg(0, std::ios::beg);\n            char* buffer = new char[size];\n            if (file.read(buffer, size)) {\n                response->content.assign(buffer, size);\n            }\n            delete[] buffer;\n            file.close();\n        } else {\n            response->http_code = 404;\n        }\n        return response;\n    }\n\n    HttpWebResponse* GetNetResponse(const char *uri) {\n        HttpWebResponse* response = new HttpWebResponse();\n        CURL* curl = curl_easy_init();\n        if (!curl) return response;\n\n        std::stringstream ss;\n        curl_easy_setopt(curl, CURLOPT_URL, uri);\n        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, callback);\n        curl_easy_setopt(curl, CURLOPT_WRITEDATA, &ss);\n\n        for (const auto& h : header_) {\n            std::string header_line = h.first + \": \" + h.second;\n            struct curl_slist* chunk = curl_slist_append(nullptr, header_line.c_str());\n            curl_easy_setopt(curl, CURLOPT_HTTPHEADER, chunk);\n        }\n\n        CURLcode res = curl_easy_perform(curl);\n        if (res == CURLE_OK) {\n            curl_easy_getinfo(curl, CURLINFO_RESPONSE_CODE, &response->http_code);\n            response->content = ss.str();\n        } else {\n            response->http_code = 500;\n        }\n\n        curl_easy_cleanup(curl);\n        return response;\n    }\n\npublic:\n    HttpWebRequest(std::string &uri) : uri_(uri) {}\n\n    HttpWebResponse* GetResponse() {\n        if (uri_.find(\"file://\") == 0) {\n            std::string path = uri_.substr(7);\n            return GetFileResponse(path.c_str());\n        } else {\n            return GetNetResponse(uri_.c_str());\n        }\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <map>\n#include <curl/curl.h>\n#include <fstream>\n\nclass HttpWebResponse {\npublic:\n    virtual ~HttpWebResponse() {}\n    virtual std::string GetContent() = 0;\n};\n\nclass HttpWebRequest {\nprivate:\n    std::string uri_;\n    std::string method_ = \"GET\";\n    std::map<std::string, std::string> header_;\n    std::iostream is_;\n\n    static size_t callback(void *buffer, size_t size, size_t nmemb, void *data) {\n        ((std::stringstream*)data)->write((char*)buffer, size * nmemb);\n        return size * nmemb;\n    }\n\n    HttpWebResponse* GetFileResponse(const char *uri) {\n        std::ifstream file(uri, std::ios::binary | std::ios::ate);\n        if (!file.is_open()) return nullptr;\n\n        size_t length = file.tellg();\n        file.seekg(0, std::ios::beg);\n\n        std::string content(length, ' ');\n        file.read(&content[0], length);\n        file.close();\n\n        struct FileResponse : public HttpWebResponse {\n            std::string content_;\n            FileResponse(std::string content) : content_(content) {}\n            std::string GetContent() override { return content_; }\n        };\n\n        return new FileResponse(content);\n    }\n\n    HttpWebResponse* GetNetResponse(const char *uri) {\n        CURL *curl = curl_easy_init();\n        if (!curl) return nullptr;\n\n        std::stringstream responseStream;\n        curl_easy_setopt(curl, CURLOPT_URL, uri);\n        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, callback);\n        curl_easy_setopt(curl, CURLOPT_WRITEDATA, &responseStream);\n        curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n\n        CURLcode res = curl_easy_perform(curl);\n        curl_easy_cleanup(curl);\n\n        if (res != CURLE_OK) return nullptr;\n\n        struct NetResponse : public HttpWebResponse {\n            std::string content_;\n            NetResponse(std::string content) : content_(content) {}\n            std::string GetContent() override { return content_; }\n        };\n\n        return new NetResponse(responseStream.str());\n    }\n\npublic:\n    HttpWebRequest(std::string &uri) : uri_(uri) {}\n\n    HttpWebResponse* GetResponse() {\n        if (uri_.find(\"file://\") == 0) {\n            std::string path = uri_.substr(7);\n            return GetFileResponse(path.c_str());\n        } else {\n            return GetNetResponse(uri_.c_str());\n        }\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <map>\n#include <sstream>\n#include <fstream>\n#include <curl/curl.h>\n\nclass HttpWebResponse {\npublic:\n    std::string content;\n    long http_code;\n\n    HttpWebResponse() : http_code(0) {}\n};\n\nclass HttpWebRequest {\nprivate:\n    std::string uri_;\n    std::string method_ = \"GET\";\n    std::map<std::string, std::string> header_;\n    std::iostream is_;\n\n    static size_t callback(void *buffer, size_t size, size_t nmemb, void *data) {\n        ((std::stringstream*)data)->write((char*)buffer, size * nmemb);\n        return size * nmemb;\n    }\n\n    HttpWebResponse* GetFileResponse(const char *uri) {\n        HttpWebResponse* response = new HttpWebResponse();\n        std::ifstream file(uri, std::ios::binary | std::ios::ate);\n        if (file.is_open()) {\n            std::streamsize size = file.tellg();\n            file.seekg(0, std::ios::beg);\n            char* buffer = new char[size];\n            if (file.read(buffer, size)) {\n                response->content.assign(buffer, size);\n                response->http_code = 200;\n            } else {\n                response->http_code = 500;\n            }\n            delete[] buffer;\n            file.close();\n        } else {\n            response->http_code = 404;\n        }\n        return response;\n    }\n\n    HttpWebResponse* GetNetResponse(const char *uri) {\n        HttpWebResponse* response = new HttpWebResponse();\n        CURL* curl = curl_easy_init();\n        if (!curl) {\n            response->http_code = 500;\n            return response;\n        }\n\n        std::stringstream ss;\n        curl_easy_setopt(curl, CURLOPT_URL, uri);\n        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, callback);\n        curl_easy_setopt(curl, CURLOPT_WRITEDATA, &ss);\n        curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n\n        for (const auto& h : header_) {\n            std::string header_line = h.first + \": \" + h.second;\n            struct curl_slist* chunk = curl_slist_append(nullptr, header_line.c_str());\n            curl_easy_setopt(curl, CURLOPT_HTTPHEADER, chunk);\n        }\n\n        CURLcode res = curl_easy_perform(curl);\n        if (res == CURLE_OK) {\n            curl_easy_getinfo(curl, CURLINFO_RESPONSE_CODE, &response->http_code);\n            response->content = ss.str();\n        } else {\n            response->http_code = 500;\n        }\n\n        curl_easy_cleanup(curl);\n        return response;\n    }\n\npublic:\n    HttpWebRequest(std::string &uri) : uri_(uri) {}\n\n    HttpWebResponse* GetResponse() {\n        if (uri_.find(\"file://\") == 0) {\n            std::string file_path = uri_.substr(7);\n            return GetFileResponse(file_path.c_str());\n        } else {\n            return GetNetResponse(uri_.c_str());\n        }\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <map>\n#include <sstream>\n#include <fstream>\n#include <curl/curl.h>\n\nclass HttpWebResponse {\npublic:\n    std::string content;\n    int status_code;\n\n    HttpWebResponse() : status_code(0) {}\n};\n\nclass HttpWebRequest {\nprivate:\n    std::string uri_;\n    std::string method_ = \"GET\";\n    std::map<std::string, std::string> header_;\n    std::iostream is_;\n\n    static size_t callback(void *buffer, size_t size, size_t nmemb, void *data) {\n        ((std::stringstream*)data)->write((char*)buffer, size * nmemb);\n        return size * nmemb;\n    }\n\n    HttpWebResponse* GetFileResponse(const char *uri) {\n        HttpWebResponse* response = new HttpWebResponse();\n        std::ifstream file(uri, std::ios::binary | std::ios::ate);\n        if (file.is_open()) {\n            std::streampos fileSize = file.tellg();\n            file.seekg(0, std::ios::beg);\n            std::string buffer(fileSize, ' ');\n            if (file.read(&buffer[0], fileSize)) {\n                response->content = buffer;\n                response->status_code = 200;\n            } else {\n                response->status_code = 500;\n            }\n            file.close();\n        } else {\n            response->status_code = 404;\n        }\n        return response;\n    }\n\n    HttpWebResponse* GetNetResponse(const char *uri) {\n        HttpWebResponse* response = new HttpWebResponse();\n        CURL* curl = curl_easy_init();\n        if (!curl) {\n            response->status_code = 500;\n            return response;\n        }\n\n        std::stringstream writeBuffer;\n        curl_easy_setopt(curl, CURLOPT_URL, uri);\n        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, callback);\n        curl_easy_setopt(curl, CURLOPT_WRITEDATA, &writeBuffer);\n\n        for (const auto& h : header_) {\n            std::string headerLine = h.first + \": \" + h.second;\n            struct curl_slist* chunk = curl_slist_append(nullptr, headerLine.c_str());\n            curl_easy_setopt(curl, CURLOPT_HTTPHEADER, chunk);\n        }\n\n        CURLcode res = curl_easy_perform(curl);\n        if (res == CURLE_OK) {\n            long httpCode = 0;\n            curl_easy_getinfo(curl, CURLINFO_RESPONSE_CODE, &httpCode);\n            response->status_code = httpCode;\n            response->content = writeBuffer.str();\n        } else {\n            response->status_code = 500;\n        }\n\n        curl_easy_cleanup(curl);\n        return response;\n    }\n\npublic:\n    HttpWebRequest(std::string &uri) : uri_(uri) {}\n\n    HttpWebResponse* GetResponse() {\n        if (uri_.find(\"file://\") == 0) {\n            std::string filePath = uri_.substr(7);\n            return GetFileResponse(filePath.c_str());\n        } else {\n            return GetNetResponse(uri_.c_str());\n        }\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <map>\n#include <sstream>\n#include <fstream>\n#include <curl/curl.h>\n\nclass HttpWebResponse {\npublic:\n    std::string content;\n    int status_code;\n\n    HttpWebResponse() : status_code(0) {}\n};\n\nclass HttpWebRequest {\nprivate:\n    std::string uri_;\n    std::string method_ = \"GET\";\n    std::map<std::string, std::string> header_;\n    std::iostream is_;\n\n    static size_t callback(void *buffer, size_t size, size_t nmemb, void *data) {\n        ((std::stringstream*)data)->write((char*)buffer, size * nmemb);\n        return size * nmemb;\n    }\n\n    HttpWebResponse* GetFileResponse(const char *uri) {\n        HttpWebResponse* response = new HttpWebResponse();\n        std::ifstream file(uri, std::ios::binary | std::ios::ate);\n        if (file.is_open()) {\n            std::streamsize size = file.tellg();\n            file.seekg(0, std::ios::beg);\n            char* buffer = new char[size];\n            if (file.read(buffer, size)) {\n                response->content.assign(buffer, size);\n                response->status_code = 200;\n            } else {\n                response->status_code = 500;\n            }\n            delete[] buffer;\n            file.close();\n        } else {\n            response->status_code = 404;\n        }\n        return response;\n    }\n\n    HttpWebResponse* GetNetResponse(const char *uri) {\n        HttpWebResponse* response = new HttpWebResponse();\n        CURL* curl = curl_easy_init();\n        if (!curl) {\n            response->status_code = 500;\n            return response;\n        }\n\n        std::stringstream ss;\n        curl_easy_setopt(curl, CURLOPT_URL, uri);\n        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, callback);\n        curl_easy_setopt(curl, CURLOPT_WRITEDATA, &ss);\n\n        CURLcode res = curl_easy_perform(curl);\n        if (res == CURLE_OK) {\n            response->content = ss.str();\n            long http_code = 0;\n            curl_easy_getinfo(curl, CURLINFO_RESPONSE_CODE, &http_code);\n            response->status_code = http_code;\n        } else {\n            response->status_code = 500;\n        }\n\n        curl_easy_cleanup(curl);\n        return response;\n    }\n\npublic:\n    HttpWebRequest(std::string &uri) : uri_(uri) {}\n\n    HttpWebResponse* GetResponse() {\n        if (uri_.find(\"file://\") == 0) {\n            std::string file_path = uri_.substr(7);\n            return GetFileResponse(file_path.c_str());\n        } else {\n            return GetNetResponse(uri_.c_str());\n        }\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <map>\n#include <sstream>\n#include <fstream>\n#include <curl/curl.h>\n\nclass HttpWebResponse {\npublic:\n    std::string content;\n    long http_code;\n\n    HttpWebResponse() : http_code(0) {}\n};\n\nclass HttpWebRequest {\nprivate:\n    std::string uri_;\n    std::string method_ = \"GET\";\n    std::map<std::string, std::string> header_;\n    std::iostream is_;\n\n    static size_t callback(void *buffer, size_t size, size_t nmemb, void *data) {\n        ((std::stringstream*)data)->write((char*)buffer, size * nmemb);\n        return size * nmemb;\n    }\n\n    HttpWebResponse* GetFileResponse(const char *uri) {\n        HttpWebResponse* response = new HttpWebResponse();\n        std::string path(uri);\n        if (path.find(\"file://\") == 0) {\n            path.erase(0, 7);\n        }\n        std::ifstream file(path, std::ios::binary | std::ios::ate);\n        if (!file.is_open()) {\n            delete response;\n            return nullptr;\n        }\n        std::streamsize size = file.tellg();\n        file.seekg(0, std::ios::beg);\n        std::string buffer(size, '\\0');\n        if (file.read(&buffer[0], size)) {\n            response->content = buffer;\n            response->http_code = 200;\n        } else {\n            response->http_code = 500;\n        }\n        file.close();\n        return response;\n    }\n\n    HttpWebResponse* GetNetResponse(const char *uri) {\n        HttpWebResponse* response = new HttpWebResponse();\n        CURL* curl = curl_easy_init();\n        if (!curl) {\n            delete response;\n            return nullptr;\n        }\n\n        std::stringstream ss;\n        curl_easy_setopt(curl, CURLOPT_URL, uri);\n        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, callback);\n        curl_easy_setopt(curl, CURLOPT_WRITEDATA, &ss);\n        curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n\n        for (const auto& h : header_) {\n            std::string header_line = h.first + \": \" + h.second;\n            struct curl_slist* chunk = curl_slist_append(nullptr, header_line.c_str());\n            curl_easy_setopt(curl, CURLOPT_HTTPHEADER, chunk);\n        }\n\n        CURLcode res = curl_easy_perform(curl);\n        if (res != CURLE_OK) {\n            delete response;\n            curl_easy_cleanup(curl);\n            return nullptr;\n        }\n\n        curl_easy_getinfo(curl, CURLINFO_RESPONSE_CODE, &response->http_code);\n        response->content = ss.str();\n        curl_easy_cleanup(curl);\n        return response;\n    }\n\npublic:\n    HttpWebRequest(std::string &uri) : uri_(uri) {}\n\n    HttpWebResponse* GetResponse() {\n        if (uri_.find(\"file://\") == 0) {\n            return GetFileResponse(uri_.c_str());\n        } else {\n            return GetNetResponse(uri_.c_str());\n        }\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <map>\n#include <sstream>\n#include <fstream>\n#include <curl/curl.h>\n\nclass HttpWebResponse {\npublic:\n    std::string content;\n    int status_code;\n\n    HttpWebResponse() : status_code(0) {}\n};\n\nclass HttpWebRequest {\nprivate:\n    std::string uri_;\n    std::string method_ = \"GET\";\n    std::map<std::string, std::string> header_;\n    std::iostream is_;\n\n    static size_t callback(void *buffer, size_t size, size_t nmemb, void *data) {\n        ((std::stringstream*)data)->write((char*)buffer, size * nmemb);\n        return size * nmemb;\n    }\n\n    HttpWebResponse* GetFileResponse(const char *uri) {\n        HttpWebResponse* response = new HttpWebResponse();\n        std::ifstream file(uri, std::ios::binary | std::ios::ate);\n        if (file.is_open()) {\n            std::streamsize size = file.tellg();\n            file.seekg(0, std::ios::beg);\n\n            char* buffer = new char[size];\n            if (file.read(buffer, size)) {\n                response->content.assign(buffer, size);\n                response->status_code = 200;\n            } else {\n                response->status_code = 500;\n            }\n            delete[] buffer;\n            file.close();\n        } else {\n            response->status_code = 404;\n        }\n        return response;\n    }\n\n    HttpWebResponse* GetNetResponse(const char *uri) {\n        HttpWebResponse* response = new HttpWebResponse();\n        CURL* curl = curl_easy_init();\n        if (!curl) {\n            response->status_code = 500;\n            return response;\n        }\n\n        std::stringstream ss;\n        curl_easy_setopt(curl, CURLOPT_URL, uri);\n        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, callback);\n        curl_easy_setopt(curl, CURLOPT_WRITEDATA, &ss);\n        curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n\n        for (const auto& h : header_) {\n            std::string header_line = h.first + \": \" + h.second;\n            struct curl_slist* chunk = curl_slist_append(nullptr, header_line.c_str());\n            curl_easy_setopt(curl, CURLOPT_HTTPHEADER, chunk);\n        }\n\n        CURLcode res = curl_easy_perform(curl);\n        if (res == CURLE_OK) {\n            long http_code = 0;\n            curl_easy_getinfo(curl, CURLINFO_RESPONSE_CODE, &http_code);\n            response->status_code = http_code;\n            response->content = ss.str();\n        } else {\n            response->status_code = 500;\n        }\n\n        curl_easy_cleanup(curl);\n        return response;\n    }\n\npublic:\n    HttpWebRequest(std::string &uri) : uri_(uri) {}\n\n    HttpWebResponse* GetResponse() {\n        if (uri_.find(\"file://\") == 0) {\n            std::string file_path = uri_.substr(7);\n            return GetFileResponse(file_path.c_str());\n        } else {\n            return GetNetResponse(uri_.c_str());\n        }\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <map>\n#include <sstream>\n#include <fstream>\n#include <curl/curl.h>\n\nclass HttpWebResponse {\npublic:\n    std::string content;\n    long http_code;\n\n    HttpWebResponse() : http_code(0) {}\n};\n\nclass HttpWebRequest {\nprivate:\n    std::string uri_;\n    std::string method_ = \"GET\";\n    std::map<std::string, std::string> header_;\n    std::iostream is_;\n\n    static size_t callback(void *buffer, size_t size, size_t nmemb, void *data) {\n        ((std::stringstream*)data)->write((char*)buffer, size * nmemb);\n        return size * nmemb;\n    }\n\n    HttpWebResponse* GetFileResponse(const char *uri) {\n        HttpWebResponse* response = new HttpWebResponse();\n        std::ifstream file(uri, std::ios::binary | std::ios::ate);\n        if (!file.is_open()) {\n            delete response;\n            return nullptr;\n        }\n        std::streamsize size = file.tellg();\n        file.seekg(0, std::ios::beg);\n        std::string buffer(size, '\\0');\n        if (file.read(&buffer[0], size)) {\n            response->content = buffer;\n            response->http_code = 200;\n        } else {\n            response->http_code = 500;\n        }\n        file.close();\n        return response;\n    }\n\n    HttpWebResponse* GetNetResponse(const char *uri) {\n        HttpWebResponse* response = new HttpWebResponse();\n        CURL* curl = curl_easy_init();\n        if (!curl) {\n            delete response;\n            return nullptr;\n        }\n\n        std::stringstream ss;\n        curl_easy_setopt(curl, CURLOPT_URL, uri);\n        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, callback);\n        curl_easy_setopt(curl, CURLOPT_WRITEDATA, &ss);\n        curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n\n        for (const auto& h : header_) {\n            std::string header_line = h.first + \": \" + h.second;\n            struct curl_slist* chunk = curl_slist_append(nullptr, header_line.c_str());\n            curl_easy_setopt(curl, CURLOPT_HTTPHEADER, chunk);\n        }\n\n        CURLcode res = curl_easy_perform(curl);\n        if (res != CURLE_OK) {\n            curl_easy_cleanup(curl);\n            delete response;\n            return nullptr;\n        }\n\n        curl_easy_getinfo(curl, CURLINFO_RESPONSE_CODE, &response->http_code);\n        response->content = ss.str();\n        curl_easy_cleanup(curl);\n        return response;\n    }\n\npublic:\n    HttpWebRequest(std::string &uri) : uri_(uri) {}\n\n    HttpWebResponse* GetResponse() {\n        if (uri_.find(\"file://\") == 0) {\n            std::string file_path = uri_.substr(7);\n            return GetFileResponse(file_path.c_str());\n        } else {\n            return GetNetResponse(uri_.c_str());\n        }\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <map>\n#include <sstream>\n#include <fstream>\n#include <curl/curl.h>\n\nclass HttpWebResponse {\npublic:\n    std::string content;\n    int status_code;\n\n    HttpWebResponse() : status_code(0) {}\n};\n\nclass HttpWebRequest {\nprivate:\n    std::string uri_;\n    std::string method_ = \"GET\";\n    std::map<std::string, std::string> header_;\n    std::iostream is_;\n\n    static size_t callback(void *buffer, size_t size, size_t nmemb, void *data) {\n        ((std::stringstream*)data)->write((char*)buffer, size * nmemb);\n        return size * nmemb;\n    }\n\n    HttpWebResponse* GetFileResponse(const char *uri) {\n        HttpWebResponse* response = new HttpWebResponse();\n        std::ifstream file(uri, std::ios::binary | std::ios::ate);\n        if (file.is_open()) {\n            std::streamsize size = file.tellg();\n            file.seekg(0, std::ios::beg);\n\n            char* buffer = new char[size];\n            if (file.read(buffer, size)) {\n                response->content.assign(buffer, size);\n                response->status_code = 200;\n            } else {\n                response->status_code = 500;\n            }\n            delete[] buffer;\n            file.close();\n        } else {\n            response->status_code = 404;\n        }\n        return response;\n    }\n\n    HttpWebResponse* GetNetResponse(const char *uri) {\n        HttpWebResponse* response = new HttpWebResponse();\n        CURL* curl = curl_easy_init();\n        if (!curl) {\n            response->status_code = 500;\n            return response;\n        }\n\n        std::stringstream ss;\n        curl_easy_setopt(curl, CURLOPT_URL, uri);\n        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, callback);\n        curl_easy_setopt(curl, CURLOPT_WRITEDATA, &ss);\n        curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n\n        for (const auto& h : header_) {\n            std::string header_line = h.first + \": \" + h.second;\n            struct curl_slist* chunk = curl_slist_append(nullptr, header_line.c_str());\n            curl_easy_setopt(curl, CURLOPT_HTTPHEADER, chunk);\n        }\n\n        CURLcode res = curl_easy_perform(curl);\n        if (res == CURLE_OK) {\n            long http_code = 0;\n            curl_easy_getinfo(curl, CURLINFO_RESPONSE_CODE, &http_code);\n            response->status_code = http_code;\n            response->content = ss.str();\n        } else {\n            response->status_code = 500;\n        }\n\n        curl_easy_cleanup(curl);\n        return response;\n    }\n\npublic:\n    HttpWebRequest(std::string &uri) : uri_(uri) {}\n\n    HttpWebResponse* GetResponse() {\n        if (uri_.find(\"file://\") == 0) {\n            std::string file_path = uri_.substr(7);\n            return GetFileResponse(file_path.c_str());\n        } else {\n            return GetNetResponse(uri_.c_str());\n        }\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <map>\n#include <sstream>\n#include <fstream>\n#include <curl/curl.h>\n\nclass HttpWebResponse {\npublic:\n    std::string content;\n    long http_code;\n\n    HttpWebResponse() : http_code(0) {}\n};\n\nclass HttpWebRequest {\nprivate:\n    std::string uri_;\n    std::string method_ = \"GET\";\n    std::map<std::string, std::string> header_;\n    std::iostream is_;\n\n    static size_t callback(void *buffer, size_t size, size_t nmemb, void *data) {\n        ((std::stringstream*)data)->write((char*)buffer, size * nmemb);\n        return size * nmemb;\n    }\n\n    HttpWebResponse* GetFileResponse(const char *uri) {\n        HttpWebResponse* response = new HttpWebResponse();\n        std::ifstream file(uri, std::ios::binary | std::ios::ate);\n        if (!file.is_open()) {\n            delete response;\n            return nullptr;\n        }\n        std::streampos length = file.tellg();\n        file.seekg(0, std::ios::beg);\n\n        char* buffer = new char[length];\n        if (file.read(buffer, length)) {\n            response->content.assign(buffer, length);\n            response->http_code = 200;\n        } else {\n            response->http_code = 500;\n        }\n\n        delete[] buffer;\n        file.close();\n        return response;\n    }\n\n    HttpWebResponse* GetNetResponse(const char *uri) {\n        HttpWebResponse* response = new HttpWebResponse();\n        CURL* curl = curl_easy_init();\n        if (!curl) {\n            delete response;\n            return nullptr;\n        }\n\n        std::stringstream ss;\n        curl_easy_setopt(curl, CURLOPT_URL, uri);\n        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, callback);\n        curl_easy_setopt(curl, CURLOPT_WRITEDATA, &ss);\n        curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n\n        for (const auto& h : header_) {\n            std::string header_line = h.first + \": \" + h.second;\n            struct curl_slist* chunk = curl_slist_append(nullptr, header_line.c_str());\n            curl_easy_setopt(curl, CURLOPT_HTTPHEADER, chunk);\n        }\n\n        CURLcode res = curl_easy_perform(curl);\n        if (res != CURLE_OK) {\n            curl_easy_cleanup(curl);\n            delete response;\n            return nullptr;\n        }\n\n        curl_easy_getinfo(curl, CURLINFO_RESPONSE_CODE, &response->http_code);\n        response->content = ss.str();\n\n        curl_easy_cleanup(curl);\n        return response;\n    }\n\npublic:\n    HttpWebRequest(std::string &uri) : uri_(uri) {}\n\n    HttpWebResponse* GetResponse() {\n        if (uri_.find(\"file://\") == 0) {\n            std::string file_path = uri_.substr(7);\n            return GetFileResponse(file_path.c_str());\n        } else {\n            return GetNetResponse(uri_.c_str());\n        }\n    }\n};\n```"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 50,
    "Instruction": "Task Description: Implement a WebSocket server class in C++ that supports both plain and TLS (SSL) connections using the WebSocket++ library. The server should handle incoming messages, echo them back to clients, and manage secure connections with proper TLS initialization.\n\nClass Description: The WebSocketServer class encapsulates functionality for creating and managing both plain and TLS WebSocket servers. It initializes server endpoints, sets up message handlers, manages TLS contexts, and runs the server's event loop.\n\nAttributes:\n- ios_: boost::asio::io_service - ASIO I/O service for handling network operations\n- endpoint_plain_: server_plain - WebSocket++ server instance for plain (non-secure) connections\n- endpoint_tls_: server_tls - WebSocket++ server instance for TLS (secure) connections\n\nMethods:\n- init() -> void - Initializes both plain and TLS server endpoints, sets message handlers, TLS initialization handler, and starts listening on ports 80 (plain) and 443 (TLS)\n- run() -> void - Starts the server's event loop to handle connections and messages\n- on_message(EndpointType* s, websocketpp::connection_hdl hdl, typename EndpointType::message_ptr msg) -> void - Template method that handles incoming messages from clients and echoes them back\n- get_password() -> std::string - Returns the password used for TLS private key encryption\n- on_tls_init(websocketpp::connection_hdl hdl) -> context_ptr - Initializes and configures the TLS context for secure connections",
    "Canonical_solution": "#include <websocketpp/config/asio.hpp>\n#include <websocketpp/server.hpp>\n#include <boost/asio/ssl.hpp>\n#include <iostream>\n\ntypedef websocketpp::server<websocketpp::config::asio> server_plain;\ntypedef websocketpp::server<websocketpp::config::asio_tls> server_tls;\nusing websocketpp::lib::placeholders::_1;\nusing websocketpp::lib::placeholders::_2;\nusing websocketpp::lib::bind;\ntypedef websocketpp::lib::shared_ptr<boost::asio::ssl::context> context_ptr;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer() : ios_(), endpoint_plain_(), endpoint_tls_() {}\n\n    void init() {\n        endpoint_plain_.init_asio(&ios_);\n        endpoint_plain_.set_message_handler(\n            bind(&WebSocketServer::on_message<server_plain>, this, &endpoint_plain_, ::_1, ::_2));\n        endpoint_plain_.listen(80);\n        endpoint_plain_.start_accept();\n\n        endpoint_tls_.init_asio(&ios_);\n        endpoint_tls_.set_message_handler(\n            bind(&WebSocketServer::on_message<server_tls>, this, &endpoint_tls_, ::_1, ::_2));\n        endpoint_tls_.set_tls_init_handler(bind(&WebSocketServer::on_tls_init, this, ::_1));\n        endpoint_tls_.listen(443);\n        endpoint_tls_.start_accept();\n    }\n\n    void run() {\n        ios_.run();\n    }\n\nprivate:\n    template <typename EndpointType>\n    void on_message(EndpointType* s, websocketpp::connection_hdl hdl,\n        typename EndpointType::message_ptr msg)\n    {\n        std::cout << \"on_message called with hdl: \" << hdl.lock().get()\n                << \" and message: \" << msg->get_payload()\n                << std::endl;\n\n        try {\n            s->send(hdl, msg->get_payload(), msg->get_opcode());\n        } catch (websocketpp::exception const & e) {\n            std::cout << \"Echo failed because: \"\n                    << \"(\" << e.what() << \")\" << std::endl;\n        }\n    }\n\n    std::string get_password() {\n        return \"test\";\n    }\n\n    context_ptr on_tls_init(websocketpp::connection_hdl hdl) {\n        std::cout << \"on_tls_init called with hdl: \" << hdl.lock().get() << std::endl;\n        context_ptr ctx(new boost::asio::ssl::context(boost::asio::ssl::context::tlsv1));\n\n        try {\n            ctx->set_options(boost::asio::ssl::context::default_workarounds |\n                            boost::asio::ssl::context::no_sslv2 |\n                            boost::asio::ssl::context::no_sslv3 |\n                            boost::asio::ssl::context::single_dh_use);\n            ctx->set_password_callback(bind(&WebSocketServer::get_password, this));\n            ctx->use_certificate_chain_file(\"server.pem\");\n            ctx->use_private_key_file(\"server.pem\", boost::asio::ssl::context::pem);\n        } catch (std::exception& e) {\n            std::cout << e.what() << std::endl;\n        }\n        return ctx;\n    }\n\n    boost::asio::io_service ios_;\n    server_plain endpoint_plain_;\n    server_tls endpoint_tls_;\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 154,
    "matched_results": [
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <websocketpp/config/asio_tls.hpp>\n#include <boost/asio.hpp>\n#include <boost/beast/websocket.hpp>\n#include <boost/beast/websocket/ssl.hpp>\n#include <boost/asio/ssl.hpp>\n#include <string>\n#include <iostream>\n\nnamespace ws = websocketpp;\ntypedef ws::server<ws::config::asio> server_plain;\ntypedef ws::server<ws::config::asio_tls> server_tls;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer() {}\n\n    void init() {\n        endpoint_plain_.set_message_handler(\n            boost::bind(&WebSocketServer::on_message<server_plain>, this, _1, _2, _3));\n        endpoint_plain_.init_asio(&ios_);\n        endpoint_plain_.listen(80);\n        endpoint_plain_.start_accept();\n\n        endpoint_tls_.set_message_handler(\n            boost::bind(&WebSocketServer::on_message<server_tls>, this, _1, _2, _3));\n\n        endpoint_tls_.set_tls_init_handler(\n            boost::bind(&WebSocketServer::on_tls_init, this, _1));\n\n        endpoint_tls_.init_asio(&ios_);\n        endpoint_tls_.listen(443);\n        endpoint_tls_.start_accept();\n    }\n\n    void run() {\n        ios_.run();\n    }\n\nprivate:\n    template <typename EndpointType>\n    void on_message(EndpointType* s, websocketpp::connection_hdl hdl, typename EndpointType::message_ptr msg) {\n        std::cout << \"Received message: \" << msg->get_payload() << std::endl;\n        s->send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    std::string get_password() {\n        return \"your_password\";\n    }\n\n    typename server_tls::context_ptr on_tls_init(websocketpp::connection_hdl hdl) {\n        auto ctx = std::make_shared<boost::asio::ssl::context>(boost::asio::ssl::context::sslv23);\n\n        try {\n            ctx->set_options(boost::asio::ssl::context::default_workarounds |\n                             boost::asio::ssl::context::no_sslv2 |\n                             boost::asio::ssl::context::single_dh_use);\n\n            ctx->use_certificate_chain_file(\"server.crt\");\n            ctx->use_private_key_file(\"server.key\", boost::asio::ssl::context::pem);\n            ctx->check_private_key();\n        } catch (std::exception& e) {\n            std::cerr << \"Error initializing TLS context: \" << e.what() << std::endl;\n        }\n\n        return ctx;\n    }\n\n    boost::asio::io_service ios_;\n    server_plain endpoint_plain_;\n    server_tls endpoint_tls_;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <websocketpp/config/asio_tls.hpp>\n#include <boost/asio.hpp>\n#include <boost/beast/websocket.hpp>\n#include <boost/beast/websocket/ssl.hpp>\n#include <boost/asio/ssl.hpp>\n#include <string>\n#include <iostream>\n\nnamespace ws = websocketpp;\ntypedef ws::server<ws::config::asio> server_plain;\ntypedef ws::server<ws::config::asio_tls> server_tls;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer() {}\n\n    void init() {\n        // Initialize plain endpoint\n        endpoint_plain_.set_message_handler(\n            boost::bind(&WebSocketServer::on_message<server_plain>, this, &endpoint_plain_, _1, _2)\n        );\n        endpoint_plain_.init_asio(&ios_);\n        endpoint_plain_.listen(80);\n        endpoint_plain_.start_accept();\n\n        // Initialize TLS endpoint\n        endpoint_tls_.set_message_handler(\n            boost::bind(&WebSocketServer::on_message<server_tls>, this, &endpoint_tls_, _1, _2)\n        );\n\n        endpoint_tls_.set_tls_init_handler(\n            boost::bind(&WebSocketServer::on_tls_init, this, _1)\n        );\n\n        endpoint_tls_.init_asio(&ios_);\n        endpoint_tls_.listen(443);\n        endpoint_tls_.start_accept();\n    }\n\n    void run() {\n        ios_.run();\n    }\n\nprivate:\n    template <typename EndpointType>\n    void on_message(EndpointType* s, websocketpp::connection_hdl hdl, typename EndpointType::message_ptr msg) {\n        std::cout << \"Received message: \" << msg->get_payload() << std::endl;\n        try {\n            s->send(hdl, msg->get_payload(), msg->get_opcode());\n        } catch (const std::exception& e) {\n            std::cerr << \"Error sending message: \" << e.what() << std::endl;\n        }\n    }\n\n    std::string get_password() {\n        return \"your_password\";\n    }\n\n    boost::asio::ssl::context::ptr on_tls_init(websocketpp::connection_hdl hdl) {\n        boost::asio::ssl::context::ptr ctx(new boost::asio::ssl::context(boost::asio::ssl::context::sslv23));\n        try {\n            ctx->set_options(\n                boost::asio::ssl::context::default_workarounds |\n                boost::asio::ssl::context::no_sslv2 |\n                boost::asio::ssl::context::single_dh_use\n            );\n            ctx->use_certificate_chain_file(\"server.crt\");\n            ctx->use_private_key_file(\"server.key\", boost::asio::ssl::context::pem);\n            ctx->set_password_callback(boost::bind(&WebSocketServer::get_password, this));\n        } catch (std::exception& e) {\n            std::cerr << \"TLS context setup failed: \" << e.what() << std::endl;\n        }\n        return ctx;\n    }\n\n    boost::asio::io_service ios_;\n    server_plain endpoint_plain_;\n    server_tls endpoint_tls_;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <websocketpp/config/asio_tls.hpp>\n#include <boost/asio.hpp>\n#include <boost/beast/websocket.hpp>\n#include <boost/beast/websocket/ssl.hpp>\n#include <boost/asio/ssl.hpp>\n#include <string>\n\nnamespace ws = websocketpp;\ntypedef ws::server<ws::config::asio> server_plain;\ntypedef ws::server<ws::config::asio_tls> server_tls;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer() {}\n\n    void init() {\n        // Initialize plain endpoint\n        endpoint_plain_.set_message_handler(\n            boost::bind(&WebSocketServer::on_message<server_plain>, this, &endpoint_plain_, _1, _2));\n        endpoint_plain_.init_asio(&ios_);\n        endpoint_plain_.listen(80);\n        endpoint_plain_.start_accept();\n\n        // Initialize TLS endpoint\n        endpoint_tls_.set_message_handler(\n            boost::bind(&WebSocketServer::on_message<server_tls>, this, &endpoint_tls_, _1, _2));\n        endpoint_tls_.set_tls_init_handler(boost::bind(&WebSocketServer::on_tls_init, this, _1));\n        endpoint_tls_.init_asio(&ios_);\n        endpoint_tls_.listen(443);\n        endpoint_tls_.start_accept();\n    }\n\n    void run() {\n        ios_.run();\n    }\n\nprivate:\n    template <typename EndpointType>\n    void on_message(EndpointType* s, websocketpp::connection_hdl hdl, typename EndpointType::message_ptr msg) {\n        std::cout << \"Received message: \" << msg->get_payload() << std::endl;\n        s->send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    std::string get_password() {\n        return \"your_password\";\n    }\n\n    typename server_tls::context_ptr on_tls_init(websocketpp::connection_hdl hdl) {\n        auto ctx = std::make_shared<boost::asio::ssl::context>(boost::asio::ssl::context::sslv23);\n        try {\n            ctx->set_options(boost::asio::ssl::context::default_workarounds |\n                             boost::asio::ssl::context::no_sslv2 |\n                             boost::asio::ssl::context::single_dh_use);\n            ctx->use_certificate_chain_file(\"server.crt\");\n            ctx->use_private_key_file(\"server.key\", boost::asio::ssl::context::pem);\n            ctx->set_password_callback([this](std::size_t, boost::asio::ssl::context_base::password_purpose) {\n                return get_password();\n            });\n        } catch (std::exception& e) {\n            std::cerr << \"Error initializing TLS context: \" << e.what() << std::endl;\n        }\n        return ctx;\n    }\n\n    boost::asio::io_service ios_;\n    server_plain endpoint_plain_;\n    server_tls endpoint_tls_;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <websocketpp/config/asio_tls.hpp>\n#include <boost/asio.hpp>\n#include <boost/beast/websocket.hpp>\n#include <boost/beast/websocket/ssl.hpp>\n#include <boost/asio/ssl.hpp>\n#include <string>\n#include <iostream>\n\nnamespace ws = websocketpp;\ntypedef ws::server<ws::config::asio> server_plain;\ntypedef ws::server<ws::config::asio_tls> server_tls;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer() {}\n\n    void init() {\n        // Plain endpoint setup\n        endpoint_plain_.set_message_handler(\n            boost::bind(&WebSocketServer::on_message<server_plain>, this, _1, _2, _3));\n        endpoint_plain_.init_asio(&ios_);\n        endpoint_plain_.listen(80);\n        endpoint_plain_.start_accept();\n\n        // TLS endpoint setup\n        endpoint_tls_.set_message_handler(\n            boost::bind(&WebSocketServer::on_message<server_tls>, this, _1, _2, _3));\n        endpoint_tls_.set_tls_init_handler(\n            boost::bind(&WebSocketServer::on_tls_init, this, _1));\n        endpoint_tls_.init_asio(&ios_);\n        endpoint_tls_.listen(443);\n        endpoint_tls_.start_accept();\n    }\n\n    void run() {\n        ios_.run();\n    }\n\nprivate:\n    template <typename EndpointType>\n    void on_message(EndpointType* s, websocketpp::connection_hdl hdl, typename EndpointType::message_ptr msg) {\n        std::cout << \"Received message: \" << msg->get_payload() << std::endl;\n        s->send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    std::string get_password() {\n        return \"your_password\";\n    }\n\n    typename server_tls::context_ptr on_tls_init(websocketpp::connection_hdl hdl) {\n        auto ctx = std::make_shared<boost::asio::ssl::context>(boost::asio::ssl::context::sslv23);\n        try {\n            ctx->set_options(boost::asio::ssl::context::default_workarounds |\n                             boost::asio::ssl::context::no_sslv2 |\n                             boost::asio::ssl::context::single_dh_use);\n\n            ctx->use_certificate_chain_file(\"server.crt\");\n            ctx->use_private_key_file(\"server.key\", boost::asio::ssl::context::pem);\n            ctx->check_private_key();\n        } catch (std::exception& e) {\n            std::cerr << \"Error setting up SSL context: \" << e.what() << std::endl;\n        }\n        return ctx;\n    }\n\n    boost::asio::io_service ios_;\n    server_plain endpoint_plain_;\n    server_tls endpoint_tls_;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <websocketpp/config/asio_tls.hpp>\n#include <boost/asio.hpp>\n#include <boost/beast/websocket.hpp>\n#include <boost/beast/websocket/ssl.hpp>\n#include <boost/asio/ssl.hpp>\n#include <string>\n\nnamespace ws = websocketpp;\ntypedef ws::server<ws::config::asio> server_plain;\ntypedef ws::server<ws::config::asio_tls> server_tls;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer() {}\n\n    void init() {\n        endpoint_plain_.set_message_handler(\n            boost::bind(&WebSocketServer::on_message<server_plain>, this, _1, _2, _3));\n        endpoint_plain_.init_asio(&ios_);\n        endpoint_plain_.listen(80);\n        endpoint_plain_.start_accept();\n\n        endpoint_tls_.set_message_handler(\n            boost::bind(&WebSocketServer::on_message<server_tls>, this, _1, _2, _3));\n        endpoint_tls_.set_tls_init_handler(\n            boost::bind(&WebSocketServer::on_tls_init, this, _1));\n        endpoint_tls_.init_asio(&ios_);\n        endpoint_tls_.listen(443);\n        endpoint_tls_.start_accept();\n    }\n\n    void run() {\n        ios_.run();\n    }\n\nprivate:\n    template <typename EndpointType>\n    void on_message(EndpointType* s, websocketpp::connection_hdl hdl, typename EndpointType::message_ptr msg) {\n        s->send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    std::string get_password() {\n        return \"your_password\";\n    }\n\n    typedef boost::asio::ssl::context context_type;\n    typedef boost::shared_ptr<context_type> context_ptr;\n\n    context_ptr on_tls_init(websocketpp::connection_hdl hdl) {\n        context_ptr ctx(new context_type(boost::asio::ssl::context::sslv23));\n        try {\n            ctx->set_options(context_type::default_workarounds |\n                             context_type::no_sslv2 |\n                             context_type::no_sslv3 |\n                             context_type::single_dh_use);\n\n            ctx->set_password_callback(boost::bind(&WebSocketServer::get_password, this));\n            ctx->use_certificate_chain_file(\"server.crt\");\n            ctx->use_private_key_file(\"server.key\", context_type::pem);\n            ctx->use_tmp_dh_file(\"dh2048.pem\");\n        } catch (std::exception& e) {\n            // Handle exception\n        }\n        return ctx;\n    }\n\n    boost::asio::io_service ios_;\n    server_plain endpoint_plain_;\n    server_tls endpoint_tls_;\n};"
    ],
    "unmatched_results": [
      "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <websocketpp/config/asio_tls.hpp>\n#include <boost/asio.hpp>\n#include <string>\n#include <memory>\n\nnamespace websocketpp {\n    namespace tls = boost::asio::ssl;\n}\n\ntemplate <typename EndpointType>\nclass WebSocketServer {\npublic:\n    WebSocketServer() {\n        init();\n    }\n\n    void init() {\n        // Plain endpoint setup\n        endpoint_plain_.set_message_handler(\n            std::bind(&WebSocketServer::on_message<server_plain>, this, &endpoint_plain_, std::placeholders::_1, std::placeholders::_2)\n        );\n        endpoint_plain_.listen(80);\n        endpoint_plain_.start_accept();\n\n        // TLS endpoint setup\n        endpoint_tls_.set_message_handler(\n            std::bind(&WebSocketServer::on_message<server_tls>, this, &endpoint_tls_, std::placeholders::_1, std::placeholders::_2)\n        );\n        endpoint_tls_.set_tls_init_handler(std::bind(&WebSocketServer::on_tls_init, this, std::placeholders::_1));\n        endpoint_tls_.listen(443);\n        endpoint_tls_.start_accept();\n    }\n\n    void run() {\n        ios_.run();\n    }\n\nprivate:\n    boost::asio::io_service ios_;\n    websocketpp::server<websocketpp::config::asio> endpoint_plain_;\n    websocketpp::server<websocketpp::config::asio_tls> endpoint_tls_;\n\n    template <typename ServerType>\n    void on_message(ServerType* s, websocketpp::connection_hdl hdl, typename ServerType::message_ptr msg) {\n        s->send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    std::string get_password() {\n        return \"your_password\";\n    }\n\n    websocketpp::lib::shared_ptr<boost::asio::ssl::context> on_tls_init(websocketpp::connection_hdl hdl) {\n        auto context = websocketpp::lib::make_shared<boost::asio::ssl::context>(boost::asio::ssl::context::sslv23);\n\n        try {\n            context->set_options(boost::asio::ssl::context::default_workarounds |\n                                 boost::asio::ssl::context::no_sslv2 |\n                                 boost::asio::ssl::context::single_dh_use);\n\n            context->set_password_callback([this](std::size_t, boost::asio::ssl::context_base::password_purpose) {\n                return get_password();\n            });\n\n            context->use_certificate_chain_file(\"server.crt\");\n            context->use_private_key_file(\"server.key\", boost::asio::ssl::context::pem);\n            context->use_tmp_dh_file(\"dh2048.pem\");\n        } catch (std::exception& e) {\n            // Handle exception\n        }\n\n        return context;\n    }\n};",
      "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <websocketpp/config/asio_tls.hpp>\n#include <boost/asio.hpp>\n#include <string>\n#include <memory>\n\nnamespace websocketpp {\n    namespace tls = boost::asio::ssl;\n}\n\ntemplate <typename EndpointType>\nclass WebSocketServer {\npublic:\n    WebSocketServer() {\n        init();\n    }\n\n    void init() {\n        // Initialize plain endpoint\n        endpoint_plain_.set_message_handler(\n            std::bind(&WebSocketServer::on_message<EndpointType>, this, &endpoint_plain_, std::placeholders::_1, std::placeholders::_2)\n        );\n        endpoint_plain_.listen(80);\n        endpoint_plain_.start_accept();\n\n        // Initialize TLS endpoint\n        endpoint_tls_.set_message_handler(\n            std::bind(&WebSocketServer::on_message<EndpointType>, this, &endpoint_tls_, std::placeholders::_1, std::placeholders::_2)\n        );\n        endpoint_tls_.set_tls_init_handler(std::bind(&WebSocketServer::on_tls_init, this, std::placeholders::_1));\n        endpoint_tls_.listen(443);\n        endpoint_tls_.start_accept();\n    }\n\n    void run() {\n        ios_.run();\n    }\n\nprivate:\n    boost::asio::io_service ios_;\n    typename EndpointType::server server_plain;\n    typename EndpointType::server_tls server_tls;\n\n    std::string get_password() {\n        return \"your_password\";\n    }\n\n    typename EndpointType::context_ptr on_tls_init(websocketpp::connection_hdl hdl) {\n        typename EndpointType::context_ptr ctx = std::make_shared<boost::asio::ssl::context>(boost::asio::ssl::context::sslv23);\n\n        try {\n            ctx->set_options(boost::asio::ssl::context::default_workarounds |\n                             boost::asio::ssl::context::no_sslv2 |\n                             boost::asio::ssl::context::single_dh_use);\n\n            ctx->use_certificate_chain_file(\"server.crt\");\n            ctx->use_private_key_file(\"server.key\", boost::asio::ssl::context::pem);\n            ctx->check_private_key();\n        } catch (std::exception& e) {\n            std::cerr << \"TLS context setup failed: \" << e.what() << std::endl;\n        }\n\n        return ctx;\n    }\n\n    template <typename ServerType>\n    void on_message(ServerType* s, websocketpp::connection_hdl hdl, typename ServerType::message_ptr msg) {\n        s->send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n};",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/config/asio_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <boost/asio.hpp>\n#include <boost/beast/websocket.hpp>\n#include <string>\n#include <memory>\n\nnamespace ws = websocketpp;\n\ntemplate <typename EndpointType>\nclass WebSocketServer {\npublic:\n    WebSocketServer() : ios_(), endpoint_plain_(ios_), endpoint_tls_(ios_) {}\n\n    void init() {\n        // Initialize plain server\n        endpoint_plain_.set_message_handler(\n            std::bind(&WebSocketServer::on_message<EndpointType>, this, &endpoint_plain_, std::placeholders::_1, std::placeholders::_2)\n        );\n        endpoint_plain_.listen(80);\n        endpoint_plain_.start_accept();\n\n        // Initialize TLS server\n        endpoint_tls_.set_message_handler(\n            std::bind(&WebSocketServer::on_message<EndpointType>, this, &endpoint_tls_, std::placeholders::_1, std::placeholders::_2)\n        );\n        endpoint_tls_.set_tls_init_handler(std::bind(&WebSocketServer::on_tls_init, this, std::placeholders::_1));\n        endpoint_tls_.listen(443);\n        endpoint_tls_.start_accept();\n    }\n\n    void run() {\n        ios_.run();\n    }\n\nprivate:\n    boost::asio::io_service ios_;\n    typename EndpointType::server endpoint_plain_;\n    typename EndpointType::server endpoint_tls_;\n\n    template <typename ServerType>\n    void on_message(ServerType* s, websocketpp::connection_hdl hdl, typename ServerType::message_ptr msg) {\n        s->send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    std::string get_password() {\n        return \"your_password\";\n    }\n\n    typename EndpointType::context_ptr on_tls_init(websocketpp::connection_hdl hdl) {\n        auto ctx = std::make_shared<boost::asio::ssl::context>(boost::asio::ssl::context::sslv23);\n\n        try {\n            ctx->set_options(boost::asio::ssl::context::default_workarounds |\n                             boost::asio::ssl::context::no_sslv2 |\n                             boost::asio::ssl::context::single_dh_use);\n\n            ctx->use_certificate_chain_file(\"server.crt\");\n            ctx->use_private_key_file(\"server.key\", boost::asio::ssl::context::pem);\n            ctx->check_private_key();\n        } catch (std::exception& e) {\n            // Handle exception\n        }\n\n        return ctx;\n    }\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/config/asio_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <boost/asio.hpp>\n#include <boost/beast/websocket.hpp>\n#include <string>\n#include <memory>\n\nnamespace ws = websocketpp;\n\ntemplate <typename EndpointType>\nclass WebSocketServer {\npublic:\n    WebSocketServer() : ios_(), endpoint_plain_(ios_), endpoint_tls_(ios_) {}\n\n    void init() {\n        // Plain server setup\n        endpoint_plain_.set_message_handler(\n            std::bind(&WebSocketServer::on_message<EndpointType>, this, &endpoint_plain_, std::placeholders::_1, std::placeholders::_2)\n        );\n        endpoint_plain_.listen(80);\n        endpoint_plain_.start_accept();\n\n        // TLS server setup\n        endpoint_tls_.set_message_handler(\n            std::bind(&WebSocketServer::on_message<EndpointType>, this, &endpoint_tls_, std::placeholders::_1, std::placeholders::_2)\n        );\n        endpoint_tls_.set_tls_init_handler(std::bind(&WebSocketServer::on_tls_init, this, std::placeholders::_1));\n        endpoint_tls_.listen(443);\n        endpoint_tls_.start_accept();\n    }\n\n    void run() {\n        ios_.run();\n    }\n\nprivate:\n    boost::asio::io_service ios_;\n    typename EndpointType::server_type endpoint_plain_;\n    typename EndpointType::server_type endpoint_tls_;\n\n    template <typename ServerType>\n    void on_message(ServerType* s, websocketpp::connection_hdl hdl, typename ServerType::message_ptr msg) {\n        s->send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    std::string get_password() {\n        return \"your_tls_password\";\n    }\n\n    typename EndpointType::context_ptr on_tls_init(websocketpp::connection_hdl hdl) {\n        auto ctx = std::make_shared<boost::asio::ssl::context>(boost::asio::ssl::context::sslv23);\n        try {\n            ctx->set_options(boost::asio::ssl::context::default_workarounds |\n                             boost::asio::ssl::context::no_sslv2 |\n                             boost::asio::ssl::context::single_dh_use);\n\n            ctx->use_certificate_chain_file(\"server.crt\");\n            ctx->use_private_key_file(\"server.key\", boost::asio::ssl::context::pem);\n            ctx->check_private_key();\n        } catch (std::exception& e) {\n            // Handle exception\n        }\n        return ctx;\n    }\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <websocketpp/config/asio_tls.hpp>\n#include <boost/asio.hpp>\n#include <boost/beast/websocket.hpp>\n#include <boost/beast/websocket/ssl.hpp>\n#include <boost/asio/ssl.hpp>\n#include <string>\n#include <iostream>\n\nnamespace ws = websocketpp;\ntypedef ws::server<ws::config::asio> server_plain;\ntypedef ws::server<ws::config::asio_tls> server_tls;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer() {\n        endpoint_plain_.set_message_handler(\n            boost::bind(&WebSocketServer::on_message<server_plain>, this, _1, _2, _3));\n        endpoint_tls_.set_message_handler(\n            boost::bind(&WebSocketServer::on_message<server_tls>, this, _1, _2, _3));\n\n        endpoint_tls_.set_tls_init_handler(\n            boost::bind(&WebSocketServer::on_tls_init, this, _1));\n    }\n\n    void init() {\n        endpoint_plain_.init_asio(&ios_);\n        endpoint_plain_.listen(80);\n        endpoint_plain_.start_accept();\n\n        endpoint_tls_.init_asio(&ios_);\n        endpoint_tls_.set_ssl_context_verification_callback(boost::asio::ssl::verify_none);\n        endpoint_tls_.listen(443);\n        endpoint_tls_.start_accept();\n    }\n\n    void run() {\n        ios_.run();\n    }\n\nprivate:\n    template <typename EndpointType>\n    void on_message(EndpointType* s, websocketpp::connection_hdl hdl, typename EndpointType::message_ptr msg) {\n        std::cout << \"Received message: \" << msg->get_payload() << std::endl;\n        s->send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    std::string get_password() {\n        return \"your_password\";\n    }\n\n    boost::asio::ssl::context::ptr on_tls_init(websocketpp::connection_hdl hdl) {\n        boost::asio::ssl::context::ptr ctx(new boost::asio::ssl::context(boost::asio::ssl::context::sslv23));\n        try {\n            ctx->set_options(boost::asio::ssl::context::default_workarounds |\n                             boost::asio::ssl::context::no_sslv2 |\n                             boost::asio::ssl::context::single_dh_use);\n            ctx->set_password_callback(boost::bind(&WebSocketServer::get_password, this));\n            ctx->use_certificate_chain_file(\"server.crt\");\n            ctx->use_private_key_file(\"server.key\", boost::asio::ssl::context::pem);\n            ctx->use_tmp_dh_file(\"dh2048.pem\");\n        } catch (std::exception& e) {\n            std::cerr << \"SSL context error: \" << e.what() << std::endl;\n        }\n        return ctx;\n    }\n\n    boost::asio::io_service ios_;\n    server_plain endpoint_plain_;\n    server_tls endpoint_tls_;\n};\n```"
    ],
    "match_count": 5,
    "pass@3": 0.9166666666666666,
    "pass@5": 0.996031746031746
  },
  {
    "Task_id": 51,
    "Instruction": "Task Description: Implement a function that demonstrates inter-process communication between a parent and child process using pipes in C++. The function should create a pipe, fork a child process, and have the parent process write data to the pipe while the child process reads and displays the data.\n\nFunction Description: The function `pipe_communication` sets up a pipe for communication between a parent and child process. The parent process writes a string to the pipe, and the child process reads and prints the data. The function handles pipe creation, process forking, and proper cleanup of file descriptors.\n\nInput: None\n\nOutput: None (The function prints messages to stdout indicating the progress and results of the pipe communication:\n- \"pipe create error\" if pipe creation fails\n- \"Read data from the pipe is [data]\" from the child process\n- \"Write data [data]\" and \"Parent write over\" from the parent process\n- \"parent close fd[1] over\" when parent completes cleanup)",
    "Canonical_solution": "#include <unistd.h>\n#include <stdio.h>\n#include <cstring>\n#include <cstdlib>\n\nvoid pipe_communication() {\n    int pipe_fd[2];\n    pid_t pid;\n\n    char r_buf[4];\n    char w_buf[100];\n    memset(r_buf,0,sizeof(r_buf));\n    memset(w_buf,0,sizeof(w_buf));\n    int r_num;\n\n    if(pipe(pipe_fd)<0) {\n        printf(\"pipe create error\\n\");\n        return;\n    }\n\n    if((pid=fork())==0) {\n        printf(\"\\n\");\n        close(pipe_fd[1]);\n        sleep(5);\n        while((r_num=read(pipe_fd[0],r_buf,4))!=0)\n            printf(\"Read data from the pipe is %s\\n\", r_buf);\n\n        close(pipe_fd[0]);\n        exit(0);\n    }\n    else if(pid>0) {\n        close(pipe_fd[0]);\n        const char* content = \"1111222233334444\";\n        strncpy(w_buf, content, strlen(content));\n        if(write(pipe_fd[1],w_buf, strlen(content))!=-1) {\n            printf(\"Write data %s\\n\", w_buf);\n            printf(\"Parent write over\\n\");\n        }\n        close(pipe_fd[1]);\n        printf(\"parent close fd[1] over\\n\");\n        wait(&pid);\n    }\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 155,
    "matched_results": [
      "```cpp\n#include <iostream>\n#include <unistd.h>\n#include <sys/types.h>\n#include <cstring>\n\nvoid pipe_communication() {\n    int fd[2];\n    pid_t pid;\n    const char *msg = \"Hello from parent\";\n    char buffer[100];\n\n    if (pipe(fd) == -1) {\n        std::cerr << \"pipe create error\" << std::endl;\n        return;\n    }\n\n    pid = fork();\n\n    if (pid < 0) {\n        close(fd[0]);\n        close(fd[1]);\n        return;\n    } else if (pid > 0) {\n        close(fd[0]);\n        std::cout << \"Write data [\" << msg << \"]\" << std::endl;\n        write(fd[1], msg, strlen(msg)+1);\n        std::cout << \"Parent write over\" << std::endl;\n        close(fd[1]);\n        std::cout << \"parent close fd[1] over\" << std::endl;\n    } else {\n        close(fd[1]);\n        read(fd[0], buffer, sizeof(buffer));\n        std::cout << \"Read data from the pipe is [\" << buffer << \"]\" << std::endl;\n        close(fd[0]);\n    }\n}\n```",
      "```cpp\n#include <iostream>\n#include <unistd.h>\n#include <sys/types.h>\n#include <cstring>\n\nvoid pipe_communication() {\n    int fd[2];\n    pid_t pid;\n    const char *msg = \"Hello from parent\";\n    char buffer[100];\n\n    if (pipe(fd) == -1) {\n        std::cerr << \"pipe create error\" << std::endl;\n        return;\n    }\n\n    pid = fork();\n\n    if (pid < 0) {\n        close(fd[0]);\n        close(fd[1]);\n        return;\n    } else if (pid > 0) {\n        close(fd[0]);\n\n        std::cout << \"Write data [\" << msg << \"]\" << std::endl;\n        write(fd[1], msg, strlen(msg) + 1);\n        std::cout << \"Parent write over\" << std::endl;\n\n        close(fd[1]);\n        std::cout << \"parent close fd[1] over\" << std::endl;\n    } else {\n        close(fd[1]);\n\n        read(fd[0], buffer, sizeof(buffer));\n        std::cout << \"Read data from the pipe is [\" << buffer << \"]\" << std::endl;\n\n        close(fd[0]);\n    }\n}\n```",
      "```cpp\n#include <iostream>\n#include <unistd.h>\n#include <sys/types.h>\n#include <cstring>\n\nvoid pipe_communication() {\n    int fd[2];\n    pid_t pid;\n    const char *msg = \"Hello from parent\";\n    char buffer[100];\n\n    if (pipe(fd) == -1) {\n        std::cerr << \"pipe create error\" << std::endl;\n        return;\n    }\n\n    pid = fork();\n\n    if (pid < 0) {\n        close(fd[0]);\n        close(fd[1]);\n        return;\n    } else if (pid == 0) {\n        close(fd[1]);\n        ssize_t bytesRead = read(fd[0], buffer, sizeof(buffer));\n        if (bytesRead > 0) {\n            std::cout << \"Read data from the pipe is \" << buffer << std::endl;\n        }\n        close(fd[0]);\n    } else {\n        close(fd[0]);\n        std::cout << \"Write data \" << msg << std::endl;\n        write(fd[1], msg, strlen(msg) + 1);\n        std::cout << \"Parent write over\" << std::endl;\n        close(fd[1]);\n        std::cout << \"parent close fd[1] over\" << std::endl;\n    }\n}\n```",
      "```cpp\n#include <iostream>\n#include <unistd.h>\n#include <sys/wait.h>\n#include <cstring>\n\nvoid pipe_communication() {\n    int fd[2];\n    if (pipe(fd) == -1) {\n        std::cerr << \"pipe create error\" << std::endl;\n        return;\n    }\n\n    pid_t pid = fork();\n\n    if (pid < 0) {\n        close(fd[0]);\n        close(fd[1]);\n        return;\n    } else if (pid == 0) {\n        close(fd[1]);\n\n        char buffer[128];\n        ssize_t count = read(fd[0], buffer, sizeof(buffer) - 1);\n        if (count > 0) {\n            buffer[count] = '\\0';\n            std::cout << \"Read data from the pipe is \" << buffer << std::endl;\n        }\n\n        close(fd[0]);\n    } else {\n        close(fd[0]);\n\n        const char* msg = \"Hello from parent\";\n        std::cout << \"Write data \" << msg << std::endl;\n        write(fd[1], msg, strlen(msg));\n        std::cout << \"Parent write over\" << std::endl;\n\n        close(fd[1]);\n        std::cout << \"parent close fd[1] over\" << std::endl;\n\n        wait(nullptr);\n    }\n}\n```",
      "```cpp\n#include <iostream>\n#include <unistd.h>\n#include <sys/types.h>\n#include <cstring>\n\nvoid pipe_communication() {\n    int fd[2];\n    pid_t pid;\n    const char *msg = \"Hello from parent\";\n    char buffer[100];\n\n    if (pipe(fd) == -1) {\n        std::cerr << \"pipe create error\" << std::endl;\n        return;\n    }\n\n    pid = fork();\n\n    if (pid < 0) {\n        close(fd[0]);\n        close(fd[1]);\n        return;\n    } else if (pid > 0) {\n        close(fd[0]);\n        std::cout << \"Write data [\" << msg << \"]\" << std::endl;\n        write(fd[1], msg, strlen(msg) + 1);\n        std::cout << \"Parent write over\" << std::endl;\n        close(fd[1]);\n        std::cout << \"parent close fd[1] over\" << std::endl;\n    } else {\n        close(fd[1]);\n        read(fd[0], buffer, sizeof(buffer));\n        std::cout << \"Read data from the pipe is [\" << buffer << \"]\" << std::endl;\n        close(fd[0]);\n    }\n}\n```",
      "```cpp\n#include <iostream>\n#include <unistd.h>\n#include <sys/wait.h>\n#include <cstring>\n\nvoid pipe_communication() {\n    int fd[2];\n    if (pipe(fd) == -1) {\n        std::cerr << \"pipe create error\" << std::endl;\n        return;\n    }\n\n    pid_t pid = fork();\n\n    if (pid < 0) {\n        close(fd[0]);\n        close(fd[1]);\n        return;\n    } else if (pid == 0) {\n        close(fd[1]);\n        char buffer[128];\n        ssize_t count = read(fd[0], buffer, sizeof(buffer) - 1);\n        if (count > 0) {\n            buffer[count] = '\\0';\n            std::cout << \"Read data from the pipe is \" << buffer << std::endl;\n        }\n        close(fd[0]);\n    } else {\n        close(fd[0]);\n        const char* msg = \"Hello from parent\";\n        std::cout << \"Write data \" << msg << std::endl;\n        write(fd[1], msg, strlen(msg) + 1);\n        std::cout << \"Parent write over\" << std::endl;\n        close(fd[1]);\n        std::cout << \"parent close fd[1] over\" << std::endl;\n        wait(nullptr);\n    }\n}\n```",
      "```cpp\n#include <iostream>\n#include <unistd.h>\n#include <sys/types.h>\n#include <cstring>\n\nvoid pipe_communication() {\n    int fd[2];\n    pid_t pid;\n    const char *msg = \"Hello from parent\";\n    char buffer[100];\n\n    if (pipe(fd) == -1) {\n        std::cerr << \"pipe create error\" << std::endl;\n        return;\n    }\n\n    pid = fork();\n\n    if (pid < 0) {\n        close(fd[0]);\n        close(fd[1]);\n        return;\n    } else if (pid > 0) {\n        close(fd[0]);\n        std::cout << \"Write data [\" << msg << \"]\" << std::endl;\n        write(fd[1], msg, strlen(msg) + 1);\n        std::cout << \"Parent write over\" << std::endl;\n        close(fd[1]);\n        std::cout << \"parent close fd[1] over\" << std::endl;\n    } else {\n        close(fd[1]);\n        read(fd[0], buffer, sizeof(buffer));\n        std::cout << \"Read data from the pipe is [\" << buffer << \"]\" << std::endl;\n        close(fd[0]);\n    }\n}\n```",
      "#include <iostream>\n#include <unistd.h>\n#include <sys/types.h>\n#include <cstring>\n\nvoid pipe_communication() {\n    int fd[2];\n    pid_t pid;\n    char buffer[100];\n\n    if (pipe(fd) == -1) {\n        std::cerr << \"pipe create error\" << std::endl;\n        return;\n    }\n\n    pid = fork();\n\n    if (pid < 0) {\n        return;\n    } else if (pid > 0) {\n        close(fd[0]);\n\n        const char* data = \"Hello from parent\";\n        std::cout << \"Write data [\" << data << \"]\" << std::endl;\n\n        write(fd[1], data, strlen(data)+1);\n\n        std::cout << \"Parent write over\" << std::endl;\n        close(fd[1]);\n        std::cout << \"parent close fd[1] over\" << std::endl;\n    } else {\n        close(fd[1]);\n\n        read(fd[0], buffer, sizeof(buffer));\n        std::cout << \"Read data from the pipe is [\" << buffer << \"]\" << std::endl;\n\n        close(fd[0]);\n    }\n}",
      "```cpp\n#include <iostream>\n#include <unistd.h>\n#include <sys/types.h>\n#include <cstring>\n\nvoid pipe_communication() {\n    int fd[2];\n    pid_t pid;\n    const char* msg = \"Hello from parent\";\n    char buffer[100];\n\n    if (pipe(fd) == -1) {\n        std::cerr << \"pipe create error\" << std::endl;\n        return;\n    }\n\n    pid = fork();\n\n    if (pid < 0) {\n        close(fd[0]);\n        close(fd[1]);\n        return;\n    } else if (pid == 0) {\n        close(fd[1]);\n\n        ssize_t count = read(fd[0], buffer, sizeof(buffer));\n        if (count > 0) {\n            std::cout << \"Read data from the pipe is \" << buffer << std::endl;\n        }\n        close(fd[0]);\n    } else {\n        close(fd[0]);\n\n        std::cout << \"Write data \" << msg << std::endl;\n        write(fd[1], msg, strlen(msg) + 1);\n        std::cout << \"Parent write over\" << std::endl;\n\n        close(fd[1]);\n        std::cout << \"parent close fd[1] over\" << std::endl;\n    }\n}\n```",
      "```cpp\n#include <iostream>\n#include <unistd.h>\n#include <sys/types.h>\n#include <cstring>\n\nvoid pipe_communication() {\n    int fd[2];\n    pid_t pid;\n    const char *msg = \"Hello from parent\";\n    char buffer[100];\n\n    if (pipe(fd) == -1) {\n        std::cerr << \"pipe create error\" << std::endl;\n        return;\n    }\n\n    pid = fork();\n\n    if (pid < 0) {\n        close(fd[0]);\n        close(fd[1]);\n        return;\n    } else if (pid > 0) {\n        close(fd[0]);\n        std::cout << \"Write data [\" << msg << \"]\" << std::endl;\n        write(fd[1], msg, strlen(msg)+1);\n        std::cout << \"Parent write over\" << std::endl;\n        close(fd[1]);\n        std::cout << \"parent close fd[1] over\" << std::endl;\n    } else {\n        close(fd[1]);\n        read(fd[0], buffer, sizeof(buffer));\n        std::cout << \"Read data from the pipe is [\" << buffer << \"]\" << std::endl;\n        close(fd[0]);\n    }\n}\n```"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 6,
    "Instruction": "Task Description: Implement a multi-threaded HTTP download manager using libcurl in C++ that can handle multiple download tasks concurrently, avoid duplicate downloads, and manage resources efficiently.\n\nClass Description: The DownloadPool class manages a pool of worker threads that process download tasks. Each task downloads a file from a given URL and saves it to a specified output path. The class ensures thread safety and prevents duplicate downloads.\n\nAttributes:\n- m_threads: std::vector<std::thread> - Collection of worker threads\n- m_queue: std::queue<Task> - Queue of pending download tasks\n- m_urls: std::unordered_set<std::string> - Set of unique task identifiers to prevent duplicates\n- m_mtx: std::mutex - Mutex for thread synchronization\n- m_noMoreTask: bool - Flag indicating no more tasks will be added\n\nMethods:\n- DownloadPool() -> void - Constructor initializes libcurl and creates worker threads\n- ~DownloadPool() -> void - Destructor cleans up libcurl resources\n- addTask(const std::string& url, const std::string& output) -> void - Adds a new download task if not already present\n- setNoMoreTask() -> void - Signals that no more tasks will be added\n- finishAndWaitForExit() -> void - Waits for all threads to complete current tasks\n- run() -> void - Worker thread function that processes tasks from the queue\n\nTask Class Description: The Task class represents an individual download task with URL and output file path.\n\nAttributes:\n- m_url: std::string - URL to download from\n- m_output: std::string - Local file path to save to\n\nMethods:\n- run() -> void - Executes the download task using libcurl\n- writeData(void* buffer, size_t size, size_t nmemb) -> size_t - Callback function for writing received data to file",
    "Canonical_solution": "#include <curl/curl.h>\n#include <iostream>\n#include <fstream>\n#include <string>\n#include <thread>\n#include <mutex>\n#include <queue>\n#include <unordered_set>\n\nclass Task\n{\npublic:\n    Task(const std::string& url, const std::string& output) : m_url(url), m_output(output) {}\n    \n    void run()\n    {\n        std::ofstream output(m_output, std::fstream::in | std::fstream::out | std::fstream::trunc);\n        output.close();\n        \n        CURL *curl_handler = curl_easy_init();\n        curl_easy_setopt(curl_handler, CURLOPT_URL, m_url.c_str());\n        curl_easy_setopt(curl_handler, CURLOPT_TIMEOUT, 60);\n        curl_easy_setopt(curl_handler, CURLOPT_WRITEFUNCTION, &Task::writeData);\n        curl_easy_setopt(curl_handler, CURLOPT_WRITEDATA, this);\n\n        curl_easy_perform(curl_handler);\n        \n        curl_easy_cleanup(curl_handler);\n    }\n\n    size_t writeData(void *buffer, size_t size, size_t nmemb)\n    {\n        std::ofstream file;\n        file.open(m_output, std::fstream::in | std::fstream::out | std::fstream::app | std::fstream::binary);\n        size_t bytesToWrite = size * nmemb;\n        file.write(reinterpret_cast<const char *>(buffer), bytesToWrite);\n        file.close();\n        \n        return bytesToWrite;\n    }\n\nprivate:\n    std::string m_url;\n    std::string m_output;\n};\n\nclass DownloadPool\n{\npublic:\n    DownloadPool()\n    {\n        m_noMoreTask = false;\n        curl_global_init(CURL_GLOBAL_ALL);\n        \n        for (int idx = 0; idx < 4; idx++)\n        {\n            m_threads.push_back(std::thread(&DownloadPool::run, this));\n        }\n    }\n\n    ~DownloadPool()\n    {\n        curl_global_cleanup();\n    }\n\n    void addTask(const std::string &url, const std::string& output)\n    {\n        std::string uid = url + output;\n        bool existed = false;\n        Task task(url, output);\n        m_mtx.lock();\n        if (!(existed = (m_urls.find(uid) != m_urls.cend())))\n        {\n            m_urls.insert(uid);\n            m_queue.push(task);\n        }\n        m_mtx.unlock();\n    }\n\n    void setNoMoreTask()\n    {\n        m_mtx.lock();\n        m_noMoreTask = true;\n        m_mtx.unlock();\n    }\n\n    void finishAndWaitForExit()\n    {\n        setNoMoreTask();\n        for (auto& thread : m_threads)\n        {\n            thread.join();\n        }\n    }\n\nprivate:\n    void run()\n    {\n        while(true)\n        {\n            bool found = false;\n            Task task;\n            \n            m_mtx.lock();\n            if (!m_queue.empty())\n            {\n                task = m_queue.front();\n                m_queue.pop();\n                found = true;\n            }\n            bool noMoreTask = m_noMoreTask;\n            m_mtx.unlock();\n            \n            if (found)\n            {\n                task.run();\n                continue;\n            }\n            if (noMoreTask)\n            {\n                break;\n            }\n            std::this_thread::sleep_for(std::chrono::milliseconds(100));\n        }\n    }\n\n    std::vector<std::thread> m_threads;\n    std::queue<Task> m_queue;\n    std::unordered_set<std::string> m_urls;\n    std::mutex m_mtx;\n    bool m_noMoreTask;\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 146,
    "matched_results": [
      "```cpp\n#include <iostream>\n#include <fstream>\n#include <vector>\n#include <thread>\n#include <mutex>\n#include <queue>\n#include <unordered_set>\n#include <string>\n#include <curl/curl.h>\n\nclass Task {\npublic:\n    Task(const std::string& url, const std::string& output) : m_url(url), m_output(output), m_file(nullptr) {}\n\n    void run() {\n        CURL* curl = curl_easy_init();\n        if (!curl) return;\n\n        m_file = fopen(m_output.c_str(), \"wb\");\n        if (!m_file) {\n            curl_easy_cleanup(curl);\n            return;\n        }\n\n        curl_easy_setopt(curl, CURLOPT_URL, m_url.c_str());\n        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, writeData);\n        curl_easy_setopt(curl, CURLOPT_WRITEDATA, this);\n\n        CURLcode res = curl_easy_perform(curl);\n        if (res != CURLE_OK) {\n            std::cerr << \"Download failed: \" << curl_easy_strerror(res) << std::endl;\n        }\n\n        fclose(m_file);\n        curl_easy_cleanup(curl);\n    }\n\nprivate:\n    static size_t writeData(void* buffer, size_t size, size_t nmemb, void* userp) {\n        size_t realSize = size * nmemb;\n        Task* task = reinterpret_cast<Task*>(userp);\n        if (task->m_file) {\n            return fwrite(buffer, 1, realSize, task->m_file);\n        }\n        return 0;\n    }\n\n    std::string m_url;\n    std::string m_output;\n    FILE* m_file;\n};\n\nclass DownloadPool {\npublic:\n    DownloadPool(size_t numThreads = std::thread::hardware_concurrency()) {\n        curl_global_init(CURL_GLOBAL_DEFAULT);\n        for (size_t i = 0; i < numThreads; ++i) {\n            m_threads.emplace_back(&DownloadPool::run, this);\n        }\n    }\n\n    ~DownloadPool() {\n        setNoMoreTask();\n        finishAndWaitForExit();\n        curl_global_cleanup();\n    }\n\n    void addTask(const std::string& url, const std::string& output) {\n        std::lock_guard<std::mutex> lock(m_mtx);\n        if (m_urls.find(url) == m_urls.end()) {\n            m_urls.insert(url);\n            m_queue.push(Task(url, output));\n        }\n    }\n\n    void setNoMoreTask() {\n        std::lock_guard<std::mutex> lock(m_mtx);\n        m_noMoreTask = true;\n    }\n\n    void finishAndWaitForExit() {\n        for (auto& thread : m_threads) {\n            if (thread.joinable()) {\n                thread.join();\n            }\n        }\n    }\n\nprivate:\n    void run() {\n        while (true) {\n            Task task;\n            {\n                std::unique_lock<std::mutex> lock(m_mtx);\n                m_cv.wait(lock, [this] { return !m_queue.empty() || m_noMoreTask; });\n\n                if (m_queue.empty() && m_noMoreTask) break;\n\n                if (!m_queue.empty()) {\n                    task = m_queue.front();\n                    m_queue.pop();\n                } else {\n                    continue;\n                }\n            }\n            task.run();\n        }\n    }\n\n    std::vector<std::thread> m_threads;\n    std::queue<Task> m_queue;\n    std::unordered_set<std::string> m_urls;\n    std::mutex m_mtx;\n    std::condition_variable m_cv;\n    bool m_noMoreTask = false;\n};\n```",
      "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n#include <vector>\n#include <thread>\n#include <mutex>\n#include <queue>\n#include <unordered_set>\n#include <condition_variable>\n#include <curl/curl.h>\n\nclass Task {\npublic:\n    Task(const std::string& url, const std::string& output) : m_url(url), m_output(output) {}\n\n    void run() {\n        CURL* curl = curl_easy_init();\n        if (!curl) return;\n\n        FILE* fp = fopen(m_output.c_str(), \"wb\");\n        if (!fp) {\n            curl_easy_cleanup(curl);\n            return;\n        }\n\n        curl_easy_setopt(curl, CURLOPT_URL, m_url.c_str());\n        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, writeData);\n        curl_easy_setopt(curl, CURLOPT_WRITEDATA, fp);\n\n        CURLcode res = curl_easy_perform(curl);\n        if (res != CURLE_OK) {\n            std::cerr << \"Download failed: \" << curl_easy_strerror(res) << std::endl;\n        }\n\n        fclose(fp);\n        curl_easy_cleanup(curl);\n    }\n\nprivate:\n    static size_t writeData(void* buffer, size_t size, size_t nmemb, void* userp) {\n        size_t realsize = size * nmemb;\n        fwrite(buffer, 1, realsize, (FILE*)userp);\n        return realsize;\n    }\n\n    std::string m_url;\n    std::string m_output;\n};\n\nclass DownloadPool {\npublic:\n    DownloadPool(size_t numThreads = std::thread::hardware_concurrency()) {\n        curl_global_init(CURL_GLOBAL_DEFAULT);\n        for (size_t i = 0; i < numThreads; ++i) {\n            m_threads.emplace_back(&DownloadPool::run, this);\n        }\n    }\n\n    ~DownloadPool() {\n        setNoMoreTask();\n        finishAndWaitForExit();\n        curl_global_cleanup();\n    }\n\n    void addTask(const std::string& url, const std::string& output) {\n        std::lock_guard<std::mutex> lock(m_mtx);\n        if (m_urls.find(url) == m_urls.end()) {\n            m_urls.insert(url);\n            m_queue.push(Task(url, output));\n            m_cond.notify_one();\n        }\n    }\n\n    void setNoMoreTask() {\n        std::lock_guard<std::mutex> lock(m_mtx);\n        m_noMoreTask = true;\n        m_cond.notify_all();\n    }\n\n    void finishAndWaitForExit() {\n        std::unique_lock<std::mutex> lock(m_mtx);\n        m_exitCond.wait(lock, [this] { return m_threads.empty(); });\n    }\n\nprivate:\n    void run() {\n        while (true) {\n            Task task;\n            {\n                std::unique_lock<std::mutex> lock(m_mtx);\n                m_cond.wait(lock, [this] { return !m_queue.empty() || m_noMoreTask; });\n\n                if (m_queue.empty() && m_noMoreTask) break;\n\n                if (!m_queue.empty()) {\n                    task = m_queue.front();\n                    m_queue.pop();\n                } else {\n                    continue;\n                }\n            }\n\n            task.run();\n\n            {\n                std::lock_guard<std::mutex> lock(m_mtx);\n                if (m_threads.size() == 1) {\n                    m_threads.clear();\n                    m_exitCond.notify_one();\n                } else {\n                    m_threads.pop_back();\n                }\n            }\n        }\n    }\n\n    std::vector<std::thread> m_threads;\n    std::queue<Task> m_queue;\n    std::unordered_set<std::string> m_urls;\n    std::mutex m_mtx;\n    std::condition_variable m_cond;\n    std::condition_variable m_exitCond;\n    bool m_noMoreTask = false;\n};\n```",
      "```cpp\n#include <iostream>\n#include <fstream>\n#include <thread>\n#include <mutex>\n#include <queue>\n#include <vector>\n#include <unordered_set>\n#include <string>\n#include <condition_variable>\n#include <curl/curl.h>\n\nclass Task {\npublic:\n    Task(const std::string& url, const std::string& output) : m_url(url), m_output(output) {}\n\n    void run() {\n        CURL* curl = curl_easy_init();\n        if (!curl) return;\n\n        FILE* fp = fopen(m_output.c_str(), \"wb\");\n        if (!fp) {\n            curl_easy_cleanup(curl);\n            return;\n        }\n\n        curl_easy_setopt(curl, CURLOPT_URL, m_url.c_str());\n        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, writeData);\n        curl_easy_setopt(curl, CURLOPT_WRITEDATA, fp);\n\n        CURLcode res = curl_easy_perform(curl);\n        if (res != CURLE_OK) {\n            std::cerr << \"Download failed: \" << curl_easy_strerror(res) << std::endl;\n        }\n\n        fclose(fp);\n        curl_easy_cleanup(curl);\n    }\n\nprivate:\n    static size_t writeData(void* buffer, size_t size, size_t nmemb, void* userp) {\n        size_t realsize = size * nmemb;\n        fwrite(buffer, 1, realsize, (FILE*)userp);\n        return realsize;\n    }\n\n    std::string m_url;\n    std::string m_output;\n};\n\nclass DownloadPool {\npublic:\n    DownloadPool(size_t numThreads = std::thread::hardware_concurrency()) {\n        curl_global_init(CURL_GLOBAL_DEFAULT);\n        for (size_t i = 0; i < numThreads; ++i) {\n            m_threads.emplace_back(&DownloadPool::run, this);\n        }\n    }\n\n    ~DownloadPool() {\n        setNoMoreTask();\n        finishAndWaitForExit();\n        curl_global_cleanup();\n    }\n\n    void addTask(const std::string& url, const std::string& output) {\n        std::lock_guard<std::mutex> lock(m_mtx);\n        if (m_urls.find(url) == m_urls.end()) {\n            m_urls.insert(url);\n            m_queue.push(Task(url, output));\n            m_condition.notify_one();\n        }\n    }\n\n    void setNoMoreTask() {\n        std::lock_guard<std::mutex> lock(m_mtx);\n        m_noMoreTask = true;\n        m_condition.notify_all();\n    }\n\n    void finishAndWaitForExit() {\n        std::unique_lock<std::mutex> lock(m_mtx);\n        m_exitCondition.wait(lock, [this] { return m_threads.empty(); });\n    }\n\nprivate:\n    void run() {\n        while (true) {\n            Task task;\n            {\n                std::unique_lock<std::mutex> lock(m_mtx);\n                m_condition.wait(lock, [this] { return !m_queue.empty() || m_noMoreTask; });\n\n                if (m_queue.empty() && m_noMoreTask) break;\n\n                if (!m_queue.empty()) {\n                    task = m_queue.front();\n                    m_queue.pop();\n                } else {\n                    continue;\n                }\n            }\n\n            task.run();\n\n            {\n                std::lock_guard<std::mutex> lock(m_mtx);\n                if (m_threads.size() == 1) {\n                    m_threads.clear();\n                    m_exitCondition.notify_one();\n                } else {\n                    m_threads.pop_back();\n                }\n            }\n        }\n    }\n\n    std::vector<std::thread> m_threads;\n    std::queue<Task> m_queue;\n    std::unordered_set<std::string> m_urls;\n    std::mutex m_mtx;\n    std::condition_variable m_condition;\n    std::condition_variable m_exitCondition;\n    bool m_noMoreTask = false;\n};\n```",
      "```cpp\n#include <iostream>\n#include <fstream>\n#include <thread>\n#include <vector>\n#include <queue>\n#include <mutex>\n#include <unordered_set>\n#include <condition_variable>\n#include <curl/curl.h>\n\nclass Task {\npublic:\n    Task(const std::string& url, const std::string& output) : m_url(url), m_output(output), m_file(nullptr) {}\n\n    void run() {\n        CURL* curl = curl_easy_init();\n        if (!curl) return;\n\n        m_file = fopen(m_output.c_str(), \"wb\");\n        if (!m_file) {\n            curl_easy_cleanup(curl);\n            return;\n        }\n\n        curl_easy_setopt(curl, CURLOPT_URL, m_url.c_str());\n        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, writeData);\n        curl_easy_setopt(curl, CURLOPT_WRITEDATA, this);\n\n        CURLcode res = curl_easy_perform(curl);\n        if (res != CURLE_OK) {\n            std::cerr << \"Download failed: \" << curl_easy_strerror(res) << std::endl;\n        }\n\n        fclose(m_file);\n        curl_easy_cleanup(curl);\n    }\n\nprivate:\n    static size_t writeData(void* buffer, size_t size, size_t nmemb, void* userp) {\n        size_t realsize = size * nmemb;\n        Task* task = reinterpret_cast<Task*>(userp);\n        if (task->m_file) {\n            fwrite(buffer, 1, realsize, task->m_file);\n        }\n        return realsize;\n    }\n\n    std::string m_url;\n    std::string m_output;\n    FILE* m_file;\n};\n\nclass DownloadPool {\npublic:\n    DownloadPool(size_t numThreads = std::thread::hardware_concurrency()) {\n        curl_global_init(CURL_GLOBAL_DEFAULT);\n        for (size_t i = 0; i < numThreads; ++i) {\n            m_threads.emplace_back(&DownloadPool::run, this);\n        }\n    }\n\n    ~DownloadPool() {\n        setNoMoreTask();\n        finishAndWaitForExit();\n        curl_global_cleanup();\n    }\n\n    void addTask(const std::string& url, const std::string& output) {\n        std::lock_guard<std::mutex> lock(m_mtx);\n        if (m_urls.find(url) == m_urls.end()) {\n            m_urls.insert(url);\n            m_queue.push(Task(url, output));\n            m_cv.notify_one();\n        }\n    }\n\n    void setNoMoreTask() {\n        std::lock_guard<std::mutex> lock(m_mtx);\n        m_noMoreTask = true;\n        m_cv.notify_all();\n    }\n\n    void finishAndWaitForExit() {\n        std::unique_lock<std::mutex> lock(m_mtx);\n        m_exitCondition.wait(lock, [this] { return m_threads.empty(); });\n    }\n\nprivate:\n    void run() {\n        while (true) {\n            Task task;\n            {\n                std::unique_lock<std::mutex> lock(m_mtx);\n                m_cv.wait(lock, [this] { return !m_queue.empty() || m_noMoreTask; });\n\n                if (m_queue.empty() && m_noMoreTask) break;\n\n                if (!m_queue.empty()) {\n                    task = m_queue.front();\n                    m_queue.pop();\n                } else {\n                    continue;\n                }\n            }\n\n            task.run();\n\n            {\n                std::lock_guard<std::mutex> lock(m_mtx);\n                if (m_threads.size() == 1) {\n                    m_threads.clear();\n                    m_exitCondition.notify_one();\n                } else {\n                    --m_threads[0];\n                }\n            }\n        }\n    }\n\n    std::vector<std::thread> m_threads;\n    std::queue<Task> m_queue;\n    std::unordered_set<std::string> m_urls;\n    std::mutex m_mtx;\n    std::condition_variable m_cv;\n    bool m_noMoreTask = false;\n    std::condition_variable m_exitCondition;\n};\n```",
      "```cpp\n#include <iostream>\n#include <fstream>\n#include <thread>\n#include <vector>\n#include <queue>\n#include <mutex>\n#include <unordered_set>\n#include <condition_variable>\n#include <curl/curl.h>\n\nclass Task {\npublic:\n    Task(const std::string& url, const std::string& output) : m_url(url), m_output(output), m_file(nullptr) {}\n\n    void run() {\n        CURL* curl = curl_easy_init();\n        if (!curl) return;\n\n        m_file = fopen(m_output.c_str(), \"wb\");\n        if (!m_file) {\n            curl_easy_cleanup(curl);\n            return;\n        }\n\n        curl_easy_setopt(curl, CURLOPT_URL, m_url.c_str());\n        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, writeData);\n        curl_easy_setopt(curl, CURLOPT_WRITEDATA, this);\n\n        CURLcode res = curl_easy_perform(curl);\n        if (res != CURLE_OK) {\n            std::cerr << \"Download failed: \" << curl_easy_strerror(res) << std::endl;\n        }\n\n        fclose(m_file);\n        curl_easy_cleanup(curl);\n    }\n\nprivate:\n    static size_t writeData(void* buffer, size_t size, size_t nmemb, void* userp) {\n        size_t realSize = size * nmemb;\n        Task* task = reinterpret_cast<Task*>(userp);\n        if (task->m_file) {\n            return fwrite(buffer, 1, realSize, task->m_file);\n        }\n        return 0;\n    }\n\n    std::string m_url;\n    std::string m_output;\n    FILE* m_file;\n};\n\nclass DownloadPool {\npublic:\n    DownloadPool(size_t numThreads = std::thread::hardware_concurrency()) {\n        curl_global_init(CURL_GLOBAL_DEFAULT);\n        for (size_t i = 0; i < numThreads; ++i) {\n            m_threads.emplace_back(&DownloadPool::run, this);\n        }\n    }\n\n    ~DownloadPool() {\n        setNoMoreTask();\n        finishAndWaitForExit();\n        curl_global_cleanup();\n    }\n\n    void addTask(const std::string& url, const std::string& output) {\n        std::lock_guard<std::mutex> lock(m_mtx);\n        if (m_urls.find(url) == m_urls.end()) {\n            m_urls.insert(url);\n            m_queue.push(Task(url, output));\n            m_cv.notify_one();\n        }\n    }\n\n    void setNoMoreTask() {\n        std::lock_guard<std::mutex> lock(m_mtx);\n        m_noMoreTask = true;\n        m_cv.notify_all();\n    }\n\n    void finishAndWaitForExit() {\n        std::unique_lock<std::mutex> lock(m_mtx);\n        m_exitCondition.wait(lock, [this] { return m_queue.empty() && m_noMoreTask && allThreadsIdle(); });\n    }\n\nprivate:\n    bool allThreadsIdle() {\n        for (const auto& t : m_threads) {\n            if (t.joinable()) return false;\n        }\n        return true;\n    }\n\n    void run() {\n        while (true) {\n            Task task;\n            {\n                std::unique_lock<std::mutex> lock(m_mtx);\n                m_cv.wait(lock, [this] { return !m_queue.empty() || m_noMoreTask; });\n\n                if (m_queue.empty() && m_noMoreTask) break;\n\n                if (!m_queue.empty()) {\n                    task = m_queue.front();\n                    m_queue.pop();\n                } else {\n                    continue;\n                }\n            }\n\n            task.run();\n\n            {\n                std::lock_guard<std::mutex> lock(m_mtx);\n                if (m_queue.empty() && m_noMoreTask) {\n                    m_exitCondition.notify_one();\n                }\n            }\n        }\n    }\n\n    std::vector<std::thread> m_threads;\n    std::queue<Task> m_queue;\n    std::unordered_set<std::string> m_urls;\n    std::mutex m_mtx;\n    std::condition_variable m_cv;\n    std::condition_variable m_exitCondition;\n    bool m_noMoreTask = false;\n};\n```",
      "```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n#include <vector>\n#include <thread>\n#include <mutex>\n#include <queue>\n#include <unordered_set>\n#include <condition_variable>\n#include <curl/curl.h>\n\nclass Task {\npublic:\n    Task(const std::string& url, const std::string& output) : m_url(url), m_output(output) {}\n\n    void run() {\n        CURL* curl = curl_easy_init();\n        if (!curl) return;\n\n        FILE* fp = fopen(m_output.c_str(), \"wb\");\n        if (!fp) {\n            curl_easy_cleanup(curl);\n            return;\n        }\n\n        curl_easy_setopt(curl, CURLOPT_URL, m_url.c_str());\n        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, writeData);\n        curl_easy_setopt(curl, CURLOPT_WRITEDATA, fp);\n\n        CURLcode res = curl_easy_perform(curl);\n        if (res != CURLE_OK) {\n            std::cerr << \"Download failed: \" << curl_easy_strerror(res) << std::endl;\n        }\n\n        fclose(fp);\n        curl_easy_cleanup(curl);\n    }\n\nprivate:\n    static size_t writeData(void* buffer, size_t size, size_t nmemb, void* userp) {\n        size_t realsize = size * nmemb;\n        fwrite(buffer, 1, realsize, (FILE*)userp);\n        return realsize;\n    }\n\n    std::string m_url;\n    std::string m_output;\n};\n\nclass DownloadPool {\npublic:\n    DownloadPool(size_t numThreads = std::thread::hardware_concurrency()) {\n        curl_global_init(CURL_GLOBAL_DEFAULT);\n        for (size_t i = 0; i < numThreads; ++i) {\n            m_threads.emplace_back(&DownloadPool::run, this);\n        }\n    }\n\n    ~DownloadPool() {\n        setNoMoreTask();\n        finishAndWaitForExit();\n        curl_global_cleanup();\n    }\n\n    void addTask(const std::string& url, const std::string& output) {\n        std::lock_guard<std::mutex> lock(m_mtx);\n        if (m_urls.find(url) == m_urls.end()) {\n            m_urls.insert(url);\n            m_queue.push(Task(url, output));\n            m_cv.notify_one();\n        }\n    }\n\n    void setNoMoreTask() {\n        std::lock_guard<std::mutex> lock(m_mtx);\n        m_noMoreTask = true;\n        m_cv.notify_all();\n    }\n\n    void finishAndWaitForExit() {\n        std::unique_lock<std::mutex> lock(m_mtx);\n        m_exitCondition.wait(lock, [this] { return m_queue.empty() && m_noMoreTask; });\n    }\n\nprivate:\n    void run() {\n        while (true) {\n            Task task;\n            {\n                std::unique_lock<std::mutex> lock(m_mtx);\n                m_cv.wait(lock, [this] { return !m_queue.empty() || m_noMoreTask; });\n\n                if (m_queue.empty() && m_noMoreTask) break;\n\n                if (!m_queue.empty()) {\n                    task = m_queue.front();\n                    m_queue.pop();\n                } else {\n                    continue;\n                }\n            }\n\n            task.run();\n        }\n    }\n\n    std::vector<std::thread> m_threads;\n    std::queue<Task> m_queue;\n    std::unordered_set<std::string> m_urls;\n    std::mutex m_mtx;\n    std::condition_variable m_cv;\n    bool m_noMoreTask = false;\n    std::condition_variable m_exitCondition;\n};\n```",
      "```cpp\n#include <iostream>\n#include <vector>\n#include <thread>\n#include <queue>\n#include <mutex>\n#include <condition_variable>\n#include <unordered_set>\n#include <fstream>\n#include <curl/curl.h>\n\nclass Task {\npublic:\n    Task(const std::string& url, const std::string& output) : m_url(url), m_output(output) {}\n\n    void run() {\n        CURL* curl = curl_easy_init();\n        if (!curl) return;\n\n        FILE* fp = fopen(m_output.c_str(), \"wb\");\n        if (!fp) {\n            curl_easy_cleanup(curl);\n            return;\n        }\n\n        curl_easy_setopt(curl, CURLOPT_URL, m_url.c_str());\n        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, writeData);\n        curl_easy_setopt(curl, CURLOPT_WRITEDATA, fp);\n\n        CURLcode res = curl_easy_perform(curl);\n        if (res != CURLE_OK) {\n            std::cerr << \"Download failed: \" << curl_easy_strerror(res) << std::endl;\n        }\n\n        fclose(fp);\n        curl_easy_cleanup(curl);\n    }\n\nprivate:\n    static size_t writeData(void* buffer, size_t size, size_t nmemb, void* stream) {\n        size_t written = fwrite(buffer, size, nmemb, (FILE*)stream);\n        return written;\n    }\n\n    std::string m_url;\n    std::string m_output;\n};\n\nclass DownloadPool {\npublic:\n    DownloadPool(size_t numThreads = std::thread::hardware_concurrency()) {\n        curl_global_init(CURL_GLOBAL_DEFAULT);\n        for (size_t i = 0; i < numThreads; ++i) {\n            m_threads.emplace_back(&DownloadPool::run, this);\n        }\n    }\n\n    ~DownloadPool() {\n        setNoMoreTask();\n        finishAndWaitForExit();\n        curl_global_cleanup();\n    }\n\n    void addTask(const std::string& url, const std::string& output) {\n        std::lock_guard<std::mutex> lock(m_mtx);\n        if (m_urls.find(url) == m_urls.end()) {\n            m_urls.insert(url);\n            m_queue.push(Task(url, output));\n            m_cv.notify_one();\n        }\n    }\n\n    void setNoMoreTask() {\n        std::lock_guard<std::mutex> lock(m_mtx);\n        m_noMoreTask = true;\n        m_cv.notify_all();\n    }\n\n    void finishAndWaitForExit() {\n        for (std::thread& t : m_threads) {\n            if (t.joinable()) {\n                t.join();\n            }\n        }\n    }\n\nprivate:\n    void run() {\n        while (true) {\n            Task task;\n            {\n                std::unique_lock<std::mutex> lock(m_mtx);\n                m_cv.wait(lock, [this] { return !m_queue.empty() || m_noMoreTask; });\n                if (m_queue.empty() && m_noMoreTask) break;\n                if (!m_queue.empty()) {\n                    task = m_queue.front();\n                    m_queue.pop();\n                }\n            }\n            if (!task.m_url.empty()) {\n                task.run();\n            }\n        }\n    }\n\n    std::vector<std::thread> m_threads;\n    std::queue<Task> m_queue;\n    std::unordered_set<std::string> m_urls;\n    std::mutex m_mtx;\n    std::condition_variable m_cv;\n    bool m_noMoreTask = false;\n};\n```",
      "```cpp\n#include <iostream>\n#include <vector>\n#include <thread>\n#include <queue>\n#include <mutex>\n#include <condition_variable>\n#include <unordered_set>\n#include <fstream>\n#include <curl/curl.h>\n\nclass Task {\npublic:\n    Task(const std::string& url, const std::string& output) : m_url(url), m_output(output), m_file(nullptr) {}\n\n    void run() {\n        CURL* curl = curl_easy_init();\n        if (!curl) return;\n\n        m_file = fopen(m_output.c_str(), \"wb\");\n        if (!m_file) {\n            curl_easy_cleanup(curl);\n            return;\n        }\n\n        curl_easy_setopt(curl, CURLOPT_URL, m_url.c_str());\n        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, writeData);\n        curl_easy_setopt(curl, CURLOPT_WRITEDATA, this);\n\n        CURLcode res = curl_easy_perform(curl);\n        if (res != CURLE_OK) {\n            std::cerr << \"Download failed: \" << curl_easy_strerror(res) << std::endl;\n        }\n\n        fclose(m_file);\n        curl_easy_cleanup(curl);\n    }\n\nprivate:\n    static size_t writeData(void* buffer, size_t size, size_t nmemb, void* userp) {\n        size_t realSize = size * nmemb;\n        Task* task = reinterpret_cast<Task*>(userp);\n        if (task->m_file) {\n            fwrite(buffer, 1, realSize, task->m_file);\n        }\n        return realSize;\n    }\n\n    std::string m_url;\n    std::string m_output;\n    FILE* m_file;\n};\n\nclass DownloadPool {\npublic:\n    DownloadPool(size_t numThreads = std::thread::hardware_concurrency()) {\n        curl_global_init(CURL_GLOBAL_DEFAULT);\n        for (size_t i = 0; i < numThreads; ++i) {\n            m_threads.emplace_back(&DownloadPool::run, this);\n        }\n    }\n\n    ~DownloadPool() {\n        setNoMoreTask();\n        finishAndWaitForExit();\n        curl_global_cleanup();\n    }\n\n    void addTask(const std::string& url, const std::string& output) {\n        std::lock_guard<std::mutex> lock(m_mtx);\n        if (m_urls.find(url) == m_urls.end()) {\n            m_urls.insert(url);\n            m_queue.push(Task(url, output));\n            m_cv.notify_one();\n        }\n    }\n\n    void setNoMoreTask() {\n        std::lock_guard<std::mutex> lock(m_mtx);\n        m_noMoreTask = true;\n        m_cv.notify_all();\n    }\n\n    void finishAndWaitForExit() {\n        std::unique_lock<std::mutex> lock(m_mtx);\n        m_exitCondition.wait(lock, [this] { return m_threads.empty(); });\n    }\n\nprivate:\n    void run() {\n        while (true) {\n            Task task;\n            {\n                std::unique_lock<std::mutex> lock(m_mtx);\n                m_cv.wait(lock, [this] { return !m_queue.empty() || m_noMoreTask; });\n\n                if (m_queue.empty() && m_noMoreTask) break;\n\n                if (!m_queue.empty()) {\n                    task = m_queue.front();\n                    m_queue.pop();\n                } else {\n                    continue;\n                }\n            }\n\n            task.run();\n\n            {\n                std::lock_guard<std::mutex> lock(m_mtx);\n                if (m_threads.size() == 1) {\n                    m_threads.clear();\n                    m_exitCondition.notify_one();\n                } else {\n                    m_threads.pop_back();\n                }\n            }\n        }\n    }\n\n    std::vector<std::thread> m_threads;\n    std::queue<Task> m_queue;\n    std::unordered_set<std::string> m_urls;\n    std::mutex m_mtx;\n    std::condition_variable m_cv;\n    std::condition_variable m_exitCondition;\n    bool m_noMoreTask = false;\n};\n```",
      "```cpp\n#include <iostream>\n#include <fstream>\n#include <thread>\n#include <vector>\n#include <queue>\n#include <mutex>\n#include <unordered_set>\n#include <condition_variable>\n#include <curl/curl.h>\n\nclass Task {\npublic:\n    Task(const std::string& url, const std::string& output) : m_url(url), m_output(output), m_file(nullptr) {}\n\n    void run() {\n        CURL* curl = curl_easy_init();\n        if (!curl) return;\n\n        m_file = fopen(m_output.c_str(), \"wb\");\n        if (!m_file) {\n            curl_easy_cleanup(curl);\n            return;\n        }\n\n        curl_easy_setopt(curl, CURLOPT_URL, m_url.c_str());\n        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, writeData);\n        curl_easy_setopt(curl, CURLOPT_WRITEDATA, this);\n\n        CURLcode res = curl_easy_perform(curl);\n        if (res != CURLE_OK) {\n            std::cerr << \"Download failed for \" << m_url << \": \" << curl_easy_strerror(res) << std::endl;\n        }\n\n        fclose(m_file);\n        curl_easy_cleanup(curl);\n    }\n\nprivate:\n    static size_t writeData(void* buffer, size_t size, size_t nmemb, void* userp) {\n        size_t realsize = size * nmemb;\n        Task* task = reinterpret_cast<Task*>(userp);\n        if (task->m_file) {\n            fwrite(buffer, 1, realsize, task->m_file);\n        }\n        return realsize;\n    }\n\n    std::string m_url;\n    std::string m_output;\n    FILE* m_file;\n};\n\nclass DownloadPool {\npublic:\n    DownloadPool(size_t numThreads = std::thread::hardware_concurrency()) {\n        curl_global_init(CURL_GLOBAL_DEFAULT);\n        for (size_t i = 0; i < numThreads; ++i) {\n            m_threads.emplace_back(&DownloadPool::run, this);\n        }\n    }\n\n    ~DownloadPool() {\n        setNoMoreTask();\n        finishAndWaitForExit();\n        curl_global_cleanup();\n    }\n\n    void addTask(const std::string& url, const std::string& output) {\n        std::lock_guard<std::mutex> lock(m_mtx);\n        if (m_urls.find(url) == m_urls.end()) {\n            m_urls.insert(url);\n            m_queue.push(Task(url, output));\n            m_cond.notify_one();\n        }\n    }\n\n    void setNoMoreTask() {\n        std::lock_guard<std::mutex> lock(m_mtx);\n        m_noMoreTask = true;\n        m_cond.notify_all();\n    }\n\n    void finishAndWaitForExit() {\n        std::unique_lock<std::mutex> lock(m_mtx);\n        m_exitCond.wait(lock, [this] { return m_threads.empty(); });\n    }\n\nprivate:\n    void run() {\n        while (true) {\n            Task task;\n            {\n                std::unique_lock<std::mutex> lock(m_mtx);\n                m_cond.wait(lock, [this] { return !m_queue.empty() || m_noMoreTask; });\n\n                if (m_queue.empty() && m_noMoreTask) break;\n\n                if (!m_queue.empty()) {\n                    task = m_queue.front();\n                    m_queue.pop();\n                } else {\n                    continue;\n                }\n            }\n\n            task.run();\n\n            {\n                std::lock_guard<std::mutex> lock(m_mtx);\n                if (m_threads.size() > 1) {\n                    m_threads.pop_back();\n                } else {\n                    m_exitCond.notify_one();\n                }\n            }\n        }\n    }\n\n    std::vector<std::thread> m_threads;\n    std::queue<Task> m_queue;\n    std::unordered_set<std::string> m_urls;\n    std::mutex m_mtx;\n    std::condition_variable m_cond;\n    std::condition_variable m_exitCond;\n    bool m_noMoreTask = false;\n};\n```",
      "```cpp\n#include <iostream>\n#include <fstream>\n#include <thread>\n#include <mutex>\n#include <queue>\n#include <vector>\n#include <unordered_set>\n#include <string>\n#include <condition_variable>\n#include <curl/curl.h>\n\nclass Task {\npublic:\n    Task(const std::string& url, const std::string& output) : m_url(url), m_output(output) {}\n\n    void run() {\n        CURL* curl = curl_easy_init();\n        if (!curl) return;\n\n        FILE* fp = fopen(m_output.c_str(), \"wb\");\n        if (!fp) {\n            curl_easy_cleanup(curl);\n            return;\n        }\n\n        curl_easy_setopt(curl, CURLOPT_URL, m_url.c_str());\n        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, writeData);\n        curl_easy_setopt(curl, CURLOPT_WRITEDATA, fp);\n\n        CURLcode res = curl_easy_perform(curl);\n        if (res != CURLE_OK) {\n            std::cerr << \"Download failed: \" << curl_easy_strerror(res) << std::endl;\n        }\n\n        fclose(fp);\n        curl_easy_cleanup(curl);\n    }\n\nprivate:\n    static size_t writeData(void* buffer, size_t size, size_t nmemb, void* userp) {\n        size_t realsize = size * nmemb;\n        fwrite(buffer, 1, realsize, (FILE*)userp);\n        return realsize;\n    }\n\n    std::string m_url;\n    std::string m_output;\n};\n\nclass DownloadPool {\npublic:\n    DownloadPool(size_t numThreads = std::thread::hardware_concurrency()) {\n        curl_global_init(CURL_GLOBAL_DEFAULT);\n        for (size_t i = 0; i < numThreads; ++i) {\n            m_threads.emplace_back(&DownloadPool::run, this);\n        }\n    }\n\n    ~DownloadPool() {\n        setNoMoreTask();\n        finishAndWaitForExit();\n        curl_global_cleanup();\n    }\n\n    void addTask(const std::string& url, const std::string& output) {\n        std::lock_guard<std::mutex> lock(m_mtx);\n        if (m_urls.find(url) == m_urls.end()) {\n            m_urls.insert(url);\n            m_queue.push(Task(url, output));\n            m_cv.notify_one();\n        }\n    }\n\n    void setNoMoreTask() {\n        std::lock_guard<std::mutex> lock(m_mtx);\n        m_noMoreTask = true;\n        m_cv.notify_all();\n    }\n\n    void finishAndWaitForExit() {\n        std::unique_lock<std::mutex> lock(m_mtx);\n        m_exitCondition.wait(lock, [this] { return m_queue.empty() && m_noMoreTask && allThreadsIdle(); });\n    }\n\nprivate:\n    void run() {\n        while (true) {\n            Task task;\n            {\n                std::unique_lock<std::mutex> lock(m_mtx);\n                m_cv.wait(lock, [this] { return !m_queue.empty() || m_noMoreTask; });\n\n                if (m_queue.empty() && m_noMoreTask) break;\n\n                if (!m_queue.empty()) {\n                    task = m_queue.front();\n                    m_queue.pop();\n                } else {\n                    continue;\n                }\n            }\n\n            task.run();\n        }\n    }\n\n    bool allThreadsIdle() {\n        std::unique_lock<std::mutex> lock(m_mtx);\n        return m_queue.empty();\n    }\n\n    std::vector<std::thread> m_threads;\n    std::queue<Task> m_queue;\n    std::unordered_set<std::string> m_urls;\n    std::mutex m_mtx;\n    std::condition_variable m_cv;\n    std::condition_variable m_exitCondition;\n    bool m_noMoreTask = false;\n};\n```"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 7,
    "Instruction": "Task Description: Create a TCP client class using Boost.Asio that handles asynchronous communication with a chat server, including reading from standard input and writing to standard output.\n\nClass Description: The posix_chat_client class implements an asynchronous TCP client for a chat application. It manages socket connections, handles message reading/writing, and processes user input/output asynchronously using Boost.Asio.\n\nAttributes:\n- socket_: [tcp::socket] - The TCP socket for communication with the server\n- input_: [posix::stream_descriptor] - Handles asynchronous reading from standard input\n- output_: [posix::stream_descriptor] - Handles asynchronous writing to standard output\n- read_msg_: [chat_message] - Stores the message being read from the server\n- write_msg_: [chat_message] - Stores the message to be written to the server\n- input_buffer_: [boost::asio::streambuf] - Buffer for storing input data\n\nMethods:\n- Constructor: [posix_chat_client]([boost::asio::io_context& io_context, const tcp::resolver::results_type& endpoints]) -> [void] - Initializes the client with IO context and server endpoints\n- do_connect: [do_connect]([const tcp::resolver::results_type& endpoints]) -> [void] - Asynchronously connects to the server endpoints\n- do_read_header: [do_read_header]() -> [void] - Asynchronously reads the message header from the server\n- do_read_body: [do_read_body]() -> [void] - Asynchronously reads the message body from the server after header is processed\n- do_write_output: [do_write_output]() -> [void] - Asynchronously writes received messages to standard output\n- do_read_input: [do_read_input]() -> [void] - Asynchronously reads input from standard input\n- do_write_message: [do_write_message]() -> [void] - Asynchronously writes the composed message to the server\n- close: [close]() -> [void] - Closes all connections and cleans up resources",
    "Canonical_solution": "#include <array>\n#include <boost/asio.hpp>\n#include \"chat_message.hpp\"\nusing boost::asio::ip::tcp;\nnamespace posix = boost::asio::posix;\n\nclass posix_chat_client\n{\npublic:\n  posix_chat_client(boost::asio::io_context& io_context,\n      const tcp::resolver::results_type& endpoints)\n    : socket_(io_context),\n      input_(io_context, ::dup(STDIN_FILENO)),\n      output_(io_context, ::dup(STDOUT_FILENO)),\n      input_buffer_(chat_message::max_body_length)\n  {\n    do_connect(endpoints);\n  }\n\nprivate:\n  void do_connect(const tcp::resolver::results_type& endpoints)\n  {\n    boost::asio::async_connect(socket_, endpoints,\n        [this](boost::system::error_code ec, tcp::endpoint)\n        {\n          if (!ec)\n          {\n            do_read_header();\n            do_read_input();\n          }\n        });\n  }\n\n  void do_read_header()\n  {\n    boost::asio::async_read(socket_,\n        boost::asio::buffer(read_msg_.data(), chat_message::header_length),\n        [this](boost::system::error_code ec, std::size_t /*length*/)\n        {\n          if (!ec && read_msg_.decode_header())\n          {\n            do_read_body();\n          }\n          else\n          {\n            close();\n          }\n        });\n  }\n\n  void do_read_body()\n  {\n    boost::asio::async_read(socket_,\n        boost::asio::buffer(read_msg_.body(), read_msg_.body_length()),\n        [this](boost::system::error_code ec, std::size_t /*length*/)\n        {\n          if (!ec)\n          {\n            do_write_output();\n          }\n          else\n          {\n            close();\n          }\n        });\n  }\n\n  void do_write_output()\n  {\n    static char eol[] = { '\\n' };\n    std::array<boost::asio::const_buffer, 2> buffers = {{\n      boost::asio::buffer(read_msg_.body(), read_msg_.body_length()),\n      boost::asio::buffer(eol) }};\n    boost::asio::async_write(output_, buffers,\n        [this](boost::system::error_code ec, std::size_t /*length*/)\n        {\n          if (!ec)\n          {\n            do_read_header();\n          }\n          else\n          {\n            close();\n          }\n        });\n  }\n\n  void do_read_input()\n  {\n    boost::asio::async_read_until(input_, input_buffer_, '\\n',\n        [this](boost::system::error_code ec, std::size_t length)\n        {\n          if (!ec)\n          {\n            write_msg_.body_length(length - 1);\n            input_buffer_.sgetn(write_msg_.body(), length - 1);\n            input_buffer_.consume(1);\n            write_msg_.encode_header();\n            do_write_message();\n          }\n          else if (ec == boost::asio::error::not_found)\n          {\n            write_msg_.body_length(input_buffer_.size());\n            input_buffer_.sgetn(write_msg_.body(), input_buffer_.size());\n            write_msg_.encode_header();\n            do_write_message();\n          }\n          else\n          {\n            close();\n          }\n        });\n  }\n\n  void do_write_message()\n  {\n    boost::asio::async_write(socket_,\n        boost::asio::buffer(write_msg_.data(), write_msg_.length()),\n        [this](boost::system::error_code ec, std::size_t /*length*/)\n        {\n          if (!ec)\n          {\n            do_read_input();\n          }\n          else\n          {\n            close();\n          }\n        });\n  }\n\n  void close()\n  {\n    socket_.close();\n    input_.close();\n    output_.close();\n  }\n\nprivate:\n  tcp::socket socket_;\n  posix::stream_descriptor input_;\n  posix::stream_descriptor output_;\n  chat_message read_msg_;\n  chat_message write_msg_;\n  boost::asio::streambuf input_buffer_;\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 151,
    "matched_results": [
      "```cpp\n#include <boost/asio.hpp>\n#include <boost/bind.hpp>\n#include <boost/shared_ptr.hpp>\n#include <boost/enable_shared_from_this.hpp>\n#include <boost/array.hpp>\n#include <iostream>\n\nnamespace chat {\n    class chat_message {\n    public:\n        enum { header_length = 4 };\n        chat_message() : body_length_(0) {}\n        const char* data() const { return data_; }\n        char* data() { return data_; }\n        std::size_t length() const { return header_length + body_length_; }\n        const char* body() const { return data_ + header_length; }\n        char* body() { return data_ + header_length; }\n        std::size_t body_length() const { return body_length_; }\n        void body_length(std::size_t new_length)\n        {\n            body_length_ = new_length;\n            if (body_length_ > max_body_length)\n                body_length_ = max_body_length;\n        }\n        friend std::ostream& operator<<(std::ostream& os, const chat_message& m)\n        {\n            os.write(m.body(), m.body_length());\n            return os;\n        }\n\n    private:\n        enum { max_body_length = 1024 };\n        char data_[header_length + max_body_length];\n        std::size_t body_length_;\n    };\n}\n\nclass posix_chat_client {\npublic:\n    posix_chat_client(boost::asio::io_context& io_context,\n                        const boost::asio::ip::tcp::resolver::results_type& endpoints)\n        : io_context_(io_context),\n          socket_(io_context),\n          input_(io_context, ::fileno(stdin)),\n          output_(io_context, ::fileno(stdout)),\n          read_msg_(),\n          write_msg_(),\n          input_buffer_()\n    {\n        do_connect(endpoints);\n    }\n\n    void close()\n    {\n        socket_.close();\n        input_.cancel();\n        output_.cancel();\n    }\n\nprivate:\n    void do_connect(const boost::asio::ip::tcp::resolver::results_type& endpoints)\n    {\n        boost::asio::async_connect(socket_, endpoints,\n            boost::bind(&posix_chat_client::handle_connect, this,\n                boost::asio::placeholders::error));\n    }\n\n    void handle_connect(const boost::system::error_code& error)\n    {\n        if (!error)\n        {\n            do_read_header();\n            do_read_input();\n        }\n    }\n\n    void do_read_header()\n    {\n        boost::asio::async_read(socket_,\n            boost::asio::buffer(read_msg_.data(), chat_message::header_length),\n            boost::bind(&posix_chat_client::handle_read_header, this,\n                boost::asio::placeholders::error));\n    }\n\n    void handle_read_header(const boost::system::error_code& error)\n    {\n        if (!error)\n        {\n            read_msg_.body_length(\n                boost::asio::detail::socket_ops::network_to_host_long(\n                    *reinterpret_cast<const int*>(read_msg_.data())));\n            do_read_body();\n        }\n        else\n        {\n            close();\n        }\n    }\n\n    void do_read_body()\n    {\n        boost::asio::async_read(socket_,\n            boost::asio::buffer(read_msg_.body(), read_msg_.body_length()),\n            boost::bind(&posix_chat_client::handle_read_body, this,\n                boost::asio::placeholders::error));\n    }\n\n    void handle_read_body(const boost::system::error_code& error)\n    {\n        if (!error)\n        {\n            do_write_output();\n            do_read_header();\n        }\n        else\n        {\n            close();\n        }\n    }\n\n    void do_write_output()\n    {\n        output_.async_write_some(boost::asio::buffer(read_msg_.body(), read_msg_.body_length()),\n            boost::bind(&posix_chat_client::handle_write_output, this,\n                boost::asio::placeholders::error,\n                boost::asio::placeholders::bytes_transferred));\n    }\n\n    void handle_write_output(const boost::system::error_code& error, std::size_t bytes_transferred)\n    {\n        if (!error)\n        {\n            do_read_input();\n        }\n        else\n        {\n            close();\n        }\n    }\n\n    void do_read_input()\n    {\n        input_.async_read_some(boost::asio::buffer(input_buffer_, 1024),\n            boost::bind(&posix_chat_client::handle_read_input, this,\n                boost::asio::placeholders::error,\n                boost::asio::placeholders::bytes_transferred));\n    }\n\n    void handle_read_input(const boost::system::error_code& error, std::size_t bytes_transferred)\n    {\n        if (!error)\n        {\n            std::istream is(&input_buffer_);\n            std::string line;\n            std::getline(is, line);\n            if (!line.empty())\n            {\n                write_msg_.body_length(line.size());\n                memcpy(write_msg_.body(), line.c_str(), line.size());\n                do_write_message();\n            }\n            do_read_input();\n        }\n        else\n        {\n            close();\n        }\n    }\n\n    void do_write_message()\n    {\n        boost::asio::async_write(socket_,\n            boost::asio::buffer(write_msg_.data(), write_msg_.length()),\n            boost::bind(&posix_chat_client::handle_write_message, this,\n                boost::asio::placeholders::error));\n    }\n\n    void handle_write_message(const boost::system::error_code& error)\n    {\n        if (!error)\n        {\n            do_read_input();\n        }\n        else\n        {\n            close();\n        }\n    }\n\n    boost::asio::io_context& io_context_;\n    boost::asio::ip::tcp::socket socket_;\n    boost::asio::posix::stream_descriptor input_;\n    boost::asio::posix::stream_descriptor output_;\n    chat_message read_msg_;\n    chat_message write_msg_;\n    boost::asio::streambuf input_buffer_;\n};",
      "```cpp\n#include <boost/asio.hpp>\n#include <boost/bind.hpp>\n#include <boost/shared_ptr.hpp>\n#include <boost/enable_shared_from_this.hpp>\n#include <boost/array.hpp>\n#include <boost/noncopyable.hpp>\n#include <boost/asio/posix/stream_descriptor.hpp>\n#include <boost/asio/buffer.hpp>\n#include <iostream>\n\nnamespace chat {\n\nclass chat_message {\npublic:\n    enum { header_length = 4 };\n    chat_message() : body_length_(0) {}\n    const char* data() const { return data_; }\n    char* data() { return data_; }\n    std::size_t length() const { return header_length + body_length_; }\n    std::size_t body_length() const { return body_length_; }\n    void body_length(std::size_t new_length) {\n        body_length_ = new_length;\n    }\n    char* body() { return data_ + header_length; }\n    const char* body() const { return data_ + header_length; }\n\nprivate:\n    char data_[header_length + 65536];\n    std::size_t body_length_;\n};\n\nclass posix_chat_client : private boost::noncopyable {\npublic:\n    posix_chat_client(boost::asio::io_context& io_context,\n                       const boost::asio::ip::tcp::resolver::results_type& endpoints)\n        : socket_(io_context),\n          input_(io_context, ::fileno(stdin)),\n          output_(io_context, ::fileno(stdout)),\n          read_msg_(),\n          write_msg_(),\n          input_buffer_() {\n        do_connect(endpoints);\n    }\n\n    void close() {\n        socket_.close();\n        input_.close();\n        output_.close();\n    }\n\nprivate:\n    void do_connect(const boost::asio::ip::tcp::resolver::results_type& endpoints) {\n        boost::asio::async_connect(socket_, endpoints,\n            boost::bind(&posix_chat_client::handle_connect, shared_from_this(),\n                boost::asio::placeholders::error));\n    }\n\n    void handle_connect(const boost::system::error_code& error) {\n        if (!error) {\n            do_read_header();\n            do_read_input();\n        } else {\n            close();\n        }\n    }\n\n    void do_read_header() {\n        boost::asio::async_read(socket_,\n            boost::asio::buffer(read_msg_.data(), chat_message::header_length),\n            boost::bind(&posix_chat_client::handle_read_header, shared_from_this(),\n                boost::asio::placeholders::error));\n    }\n\n    void handle_read_header(const boost::system::error_code& error) {\n        if (!error && read_msg_.body_length() > 0) {\n            do_read_body();\n        } else {\n            close();\n        }\n    }\n\n    void do_read_body() {\n        boost::asio::async_read(socket_,\n            boost::asio::buffer(read_msg_.body(), read_msg_.body_length()),\n            boost::bind(&posix_chat_client::handle_read_body, shared_from_this(),\n                boost::asio::placeholders::error));\n    }\n\n    void handle_read_body(const boost::system::error_code& error) {\n        if (!error) {\n            do_write_output();\n        } else {\n            close();\n        }\n    }\n\n    void do_write_output() {\n        boost::asio::async_write(output_,\n            boost::asio::buffer(read_msg_.data(), read_msg_.length()),\n            boost::bind(&posix_chat_client::handle_write_output, shared_from_this(),\n                boost::asio::placeholders::error));\n    }\n\n    void handle_write_output(const boost::system::error_code& error) {\n        if (!error) {\n            do_read_header();\n        } else {\n            close();\n        }\n    }\n\n    void do_read_input() {\n        boost::asio::async_read(input_, input_buffer_,\n            boost::bind(&posix_chat_client::handle_read_input, shared_from_this(),\n                boost::asio::placeholders::error,\n                boost::asio::placeholders::bytes_transferred));\n    }\n\n    void handle_read_input(const boost::system::error_code& error, std::size_t bytes_transferred) {\n        if (!error && bytes_transferred > 0) {\n            std::istream is(&input_buffer_);\n            std::string line;\n            std::getline(is, line);\n            if (line.empty()) return;\n\n            write_msg_.body_length(line.size());\n            memcpy(write_msg_.body(), line.c_str(), line.size());\n            do_write_message();\n        } else {\n            close();\n        }\n    }\n\n    void do_write_message() {\n        boost::asio::async_write(socket_,\n            boost::asio::buffer(write_msg_.data(), write_msg_.length()),\n            boost::bind(&posix_chat_client::handle_write_message, shared_from_this(),\n                boost::asio::placeholders::error));\n    }\n\n    void handle_write_message(const boost::system::error_code& error) {\n        if (!error) {\n            do_read_input();\n        } else {\n            close();\n        }\n    }\n\n    boost::asio::ip::tcp::socket socket_;\n    boost::asio::posix::stream_descriptor input_;\n    boost::asio::posix::stream_descriptor output_;\n    chat_message read_msg_;\n    chat_message write_msg_;\n    boost::asio::streambuf input_buffer_;\n};\n} // namespace chat\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <boost/bind.hpp>\n#include <boost/shared_ptr.hpp>\n#include <boost/enable_shared_from_this.hpp>\n#include <boost/array.hpp>\n#include <boost/system/error_code.hpp>\n#include <iostream>\n\nnamespace chat {\n    class chat_message {\n    public:\n        enum { header_length = 4 };\n        chat_message() : body_length_(0) {}\n        const char* data() const { return data_; }\n        char* data() { return data_; }\n        std::size_t length() const { return header_length + body_length_; }\n        const char* body() const { return data_ + header_length; }\n        char* body() { return data_ + header_length; }\n        std::size_t body_length() const { return body_length_; }\n        void body_length(std::size_t new_length)\n        {\n            body_length_ = new_length;\n            if (body_length_ > max_body_length)\n                body_length_ = max_body_length;\n        }\n        friend std::ostream& operator<<(std::ostream& os, const chat_message& m)\n        {\n            os.write(m.body(), m.body_length());\n            return os;\n        }\n\n    private:\n        enum { max_body_length = 512 };\n        char data_[header_length + max_body_length];\n        std::size_t body_length_;\n    };\n}\n\nclass posix_chat_client\n{\npublic:\n    posix_chat_client(boost::asio::io_context& io_context,\n                        const boost::asio::ip::tcp::resolver::results_type& endpoints)\n        : io_context_(io_context),\n          socket_(io_context),\n          input_(io_context, ::fileno(stdin)),\n          output_(io_context, ::fileno(stdout)),\n          read_msg_(),\n          write_msg_(),\n          input_buffer_()\n    {\n        do_connect(endpoints);\n        do_read_input();\n        do_read_header();\n    }\n\n    void close()\n    {\n        boost::system::error_code ignored_error;\n        socket_.close(ignored_error);\n        input_.cancel(ignored_error);\n        output_.cancel(ignored_error);\n    }\n\nprivate:\n    void do_connect(const boost::asio::ip::tcp::resolver::results_type& endpoints)\n    {\n        boost::asio::async_connect(socket_, endpoints,\n            boost::bind(&posix_chat_client::handle_connect, this,\n                boost::asio::placeholders::error));\n    }\n\n    void handle_connect(const boost::system::error_code& error)\n    {\n        if (!error)\n        {\n            do_read_header();\n        }\n    }\n\n    void do_read_header()\n    {\n        boost::asio::async_read(socket_,\n            boost::asio::buffer(read_msg_.data(), chat::chat_message::header_length),\n            boost::bind(&posix_chat_client::handle_read_header, this,\n                boost::asio::placeholders::error));\n    }\n\n    void handle_read_header(const boost::system::error_code& error)\n    {\n        if (!error && read_msg_.body_length() != 0)\n        {\n            do_read_body();\n        }\n        else\n        {\n            close();\n        }\n    }\n\n    void do_read_body()\n    {\n        boost::asio::async_read(socket_,\n            boost::asio::buffer(read_msg_.body(), read_msg_.body_length()),\n            boost::bind(&posix_chat_client::handle_read_body, this,\n                boost::asio::placeholders::error));\n    }\n\n    void handle_read_body(const boost::system::error_code& error)\n    {\n        if (!error)\n        {\n            do_write_output();\n            do_read_header();\n        }\n        else\n        {\n            close();\n        }\n    }\n\n    void do_write_output()\n    {\n        boost::asio::async_write(output_,\n            boost::asio::buffer(read_msg_.body(), read_msg_.body_length()),\n            boost::bind(&posix_chat_client::handle_write_output, this,\n                boost::asio::placeholders::error));\n    }\n\n    void handle_write_output(const boost::system::error_code& error)\n    {\n        if (!error)\n        {\n            do_read_input();\n        }\n        else\n        {\n            close();\n        }\n    }\n\n    void do_read_input()\n    {\n        input_buffer_.consume(input_buffer_.size());\n        boost::asio::async_read_until(input_, input_buffer_, '\\n',\n            boost::bind(&posix_chat_client::handle_read_input, this,\n                boost::asio::placeholders::error,\n                boost::asio::placeholders::bytes_transferred));\n    }\n\n    void handle_read_input(const boost::system::error_code& error, std::size_t bytes_transferred)\n    {\n        if (!error)\n        {\n            std::istream is(&input_buffer_);\n            is.read(write_msg_.body(), chat::chat_message::max_body_length);\n            std::size_t length = is.gcount();\n            write_msg_.body_length(length);\n            do_write_message();\n        }\n        else\n        {\n            close();\n        }\n    }\n\n    void do_write_message()\n    {\n        boost::asio::async_write(socket_,\n            boost::asio::buffer(write_msg_.data(), write_msg_.length()),\n            boost::bind(&posix_chat_client::handle_write_message, this,\n                boost::asio::placeholders::error));\n    }\n\n    void handle_write_message(const boost::system::error_code& error)\n    {\n        if (!error)\n        {\n            do_read_input();\n        }\n        else\n        {\n            close();\n        }\n    }\n\n    boost::asio::io_context& io_context_;\n    boost::asio::ip::tcp::socket socket_;\n    boost::asio::posix::stream_descriptor input_;\n    boost::asio::posix::stream_descriptor output_;\n    chat::chat_message read_msg_;\n    chat::chat_message write_msg_;\n    boost::asio::streambuf input_buffer_;\n};",
      "```cpp\n#include <boost/asio.hpp>\n#include <boost/bind.hpp>\n#include <boost/shared_ptr.hpp>\n#include <boost/enable_shared_from_this.hpp>\n#include <boost/array.hpp>\n#include <iostream>\n\nnamespace chat {\n    class chat_message {\n    public:\n        enum { header_length = 4 };\n        chat_message() : body_length_(0) {}\n        const char* data() const { return data_; }\n        char* data() { return data_; }\n        std::size_t length() const { return header_length + body_length_; }\n        const char* body() const { return data_ + header_length; }\n        char* body() { return data_ + header_length; }\n        std::size_t body_length() const { return body_length_; }\n        void body_length(std::size_t new_length)\n        {\n            body_length_ = new_length;\n            if (body_length_ > max_body_length)\n                body_length_ = max_body_length;\n        }\n        friend std::ostream& operator<<(std::ostream& os, const chat_message& m)\n        {\n            os.write(m.body(), m.body_length());\n            return os;\n        }\n\n    private:\n        enum { max_body_length = 512 };\n        char data_[header_length + max_body_length];\n        std::size_t body_length_;\n    };\n}\n\nclass posix_chat_client\n{\npublic:\n    posix_chat_client(boost::asio::io_context& io_context,\n                        const boost::asio::ip::tcp::resolver::results_type& endpoints)\n        : io_context_(io_context),\n          socket_(io_context),\n          input_(io_context, ::fileno(stdin)),\n          output_(io_context, ::fileno(stdout)),\n          read_msg_(),\n          write_msg_(),\n          input_buffer_()\n    {\n        do_connect(endpoints);\n    }\n\n    void close()\n    {\n        boost::system::error_code ignored_error;\n        socket_.close(ignored_error);\n        input_.cancel();\n        output_.cancel();\n    }\n\nprivate:\n    void do_connect(const boost::asio::ip::tcp::resolver::results_type& endpoints)\n    {\n        boost::asio::async_connect(socket_, endpoints,\n            boost::bind(&posix_chat_client::handle_connect, shared_from_this(),\n                boost::asio::placeholders::error));\n    }\n\n    void handle_connect(const boost::system::error_code& error)\n    {\n        if (!error)\n        {\n            do_read_header();\n            do_read_input();\n        }\n        else\n        {\n            close();\n        }\n    }\n\n    void do_read_header()\n    {\n        boost::asio::async_read(socket_,\n            boost::asio::buffer(read_msg_.data(), chat_message::header_length),\n            boost::bind(&posix_chat_client::handle_read_header, shared_from_this(),\n                boost::asio::placeholders::error));\n    }\n\n    void handle_read_header(const boost::system::error_code& error)\n    {\n        if (!error && read_msg_.body_length() != 0)\n        {\n            do_read_body();\n        }\n        else\n        {\n            close();\n        }\n    }\n\n    void do_read_body()\n    {\n        boost::asio::async_read(socket_,\n            boost::asio::buffer(read_msg_.body(), read_msg_.body_length()),\n            boost::bind(&posix_chat_client::handle_read_body, shared_from_this(),\n                boost::asio::placeholders::error));\n    }\n\n    void handle_read_body(const boost::system::error_code& error)\n    {\n        if (!error)\n        {\n            do_write_output();\n            do_read_header();\n        }\n        else\n        {\n            close();\n        }\n    }\n\n    void do_write_output()\n    {\n        output_.async_write_some(boost::asio::buffer(read_msg_.body(), read_msg_.body_length()),\n            boost::bind(&posix_chat_client::handle_write_output, shared_from_this(),\n                boost::asio::placeholders::error,\n                boost::asio::placeholders::bytes_transferred));\n    }\n\n    void handle_write_output(const boost::system::error_code&, std::size_t)\n    {\n        do_read_input();\n    }\n\n    void do_read_input()\n    {\n        input_.async_read_some(boost::asio::buffer(input_buffer_, max_line_length),\n            boost::bind(&posix_chat_client::handle_read_input, shared_from_this(),\n                boost::asio::placeholders::error,\n                boost::asio::placeholders::bytes_transferred));\n    }\n\n    void handle_read_input(const boost::system::error_code& error, std::size_t bytes_transferred)\n    {\n        if (!error)\n        {\n            std::istream is(&input_buffer_);\n            is >> write_msg_;\n            do_write_message();\n        }\n        else\n        {\n            close();\n        }\n    }\n\n    void do_write_message()\n    {\n        boost::asio::async_write(socket_,\n            boost::asio::buffer(write_msg_.data(), write_msg_.length()),\n            boost::bind(&posix_chat_client::handle_write_message, shared_from_this(),\n                boost::asio::placeholders::error));\n    }\n\n    void handle_write_message(const boost::system::error_code&)\n    {\n        do_read_input();\n    }\n\n    boost::asio::io_context& io_context_;\n    boost::asio::ip::tcp::socket socket_;\n    boost::asio::posix::stream_descriptor input_;\n    boost::asio::posix::stream_descriptor output_;\n    chat_message read_msg_;\n    chat_message write_msg_;\n    boost::asio::streambuf input_buffer_;\n    static const int max_line_length = 512;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <boost/bind.hpp>\n#include <boost/shared_ptr.hpp>\n#include <boost/enable_shared_from_this.hpp>\n#include <boost/array.hpp>\n#include <iostream>\n\nnamespace chat {\n    class chat_message {\n    public:\n        enum { header_length = 4 };\n        chat_message() : body_length_(0) {}\n        const char* data() const { return data_; }\n        char* data() { return data_; }\n        std::size_t length() const { return header_length + body_length_; }\n        const char* body() const { return data_ + header_length; }\n        char* body() { return data_ + header_length; }\n        std::size_t body_length() const { return body_length_; }\n        void body_length(std::size_t new_length) {\n            body_length_ = new_length;\n            if (body_length_ > max_body_length)\n                body_length_ = max_body_length;\n        }\n        friend std::ostream& operator<<(std::ostream& os, const chat_message& m) {\n            os.write(m.body(), m.body_length());\n            return os;\n        }\n\n    private:\n        enum { max_body_length = 1024 };\n        char data_[header_length + max_body_length];\n        std::size_t body_length_;\n    };\n}\n\nclass posix_chat_client {\npublic:\n    posix_chat_client(boost::asio::io_context& io_context, const boost::asio::ip::tcp::resolver::results_type& endpoints)\n        : io_context_(io_context),\n          socket_(io_context),\n          input_(io_context, ::fileno(stdin)),\n          output_(io_context, ::fileno(stdout)),\n          read_msg_(),\n          write_msg_(),\n          input_buffer_()\n    {\n        do_connect(endpoints);\n    }\n\n    void close() {\n        socket_.close();\n        input_.cancel();\n        output_.cancel();\n    }\n\nprivate:\n    void do_connect(const boost::asio::ip::tcp::resolver::results_type& endpoints) {\n        boost::asio::async_connect(socket_, endpoints,\n            boost::bind(&posix_chat_client::handle_connect, this,\n                boost::asio::placeholders::error));\n    }\n\n    void handle_connect(const boost::system::error_code& error) {\n        if (!error) {\n            do_read_header();\n            do_read_input();\n        } else {\n            close();\n        }\n    }\n\n    void do_read_header() {\n        boost::asio::async_read(socket_,\n            boost::asio::buffer(read_msg_.data(), chat::chat_message::header_length),\n            boost::bind(&posix_chat_client::handle_read_header, this,\n                boost::asio::placeholders::error));\n    }\n\n    void handle_read_header(const boost::system::error_code& error) {\n        if (!error && read_msg_.body_length() > 0) {\n            do_read_body();\n        } else {\n            close();\n        }\n    }\n\n    void do_read_body() {\n        boost::asio::async_read(socket_,\n            boost::asio::buffer(read_msg_.body(), read_msg_.body_length()),\n            boost::bind(&posix_chat_client::handle_read_body, this,\n                boost::asio::placeholders::error));\n    }\n\n    void handle_read_body(const boost::system::error_code& error) {\n        if (!error) {\n            do_write_output();\n            do_read_header();\n        } else {\n            close();\n        }\n    }\n\n    void do_write_output() {\n        std::ostream os(&output_buffer_);\n        os << read_msg_;\n        output_.async_write_some(boost::asio::buffer(output_buffer_),\n            boost::bind(&posix_chat_client::handle_write_output, this,\n                boost::asio::placeholders::error,\n                boost::asio::placeholders::bytes_transferred));\n    }\n\n    void handle_write_output(const boost::system::error_code& error, std::size_t /*bytes_transferred*/) {\n        if (!error) {\n            output_buffer_.consume(output_buffer_.size());\n            do_write_output();\n        }\n    }\n\n    void do_read_input() {\n        input_.async_read_some(boost::asio::buffer(input_buffer_),\n            boost::bind(&posix_chat_client::handle_read_input, this,\n                boost::asio::placeholders::error,\n                boost::asio::placeholders::bytes_transferred));\n    }\n\n    void handle_read_input(const boost::system::error_code& error, std::size_t bytes_transferred) {\n        if (!error) {\n            std::istream is(&input_buffer_);\n            std::string line;\n            std::getline(is, line);\n            if (!line.empty()) {\n                write_msg_.body_length(line.size());\n                std::memcpy(write_msg_.body(), line.c_str(), line.size());\n                do_write_message();\n            }\n            do_read_input();\n        } else {\n            close();\n        }\n    }\n\n    void do_write_message() {\n        boost::asio::async_write(socket_,\n            boost::asio::buffer(write_msg_.data(), write_msg_.length()),\n            boost::bind(&posix_chat_client::handle_write_message, this,\n                boost::asio::placeholders::error));\n    }\n\n    void handle_write_message(const boost::system::error_code& error) {\n        if (!error) {\n            do_read_input();\n        } else {\n            close();\n        }\n    }\n\n    boost::asio::io_context& io_context_;\n    boost::asio::ip::tcp::socket socket_;\n    boost::asio::posix::stream_descriptor input_;\n    boost::asio::posix::stream_descriptor output_;\n    chat::chat_message read_msg_;\n    chat::chat_message write_msg_;\n    boost::asio::streambuf input_buffer_;\n    boost::asio::streambuf output_buffer_;\n};",
      "```cpp\n#include <boost/asio.hpp>\n#include <boost/bind.hpp>\n#include <boost/shared_ptr.hpp>\n#include <boost/enable_shared_from_this.hpp>\n#include <iostream>\n\nusing boost::asio::ip::tcp;\nnamespace posix = boost::asio::posix;\n\nclass chat_message {\npublic:\n    enum { header_length = 4 };\n    chat_message() : body_length_(0) {}\n    const char* data() const { return data_; }\n    char* data() { return data_; }\n    std::size_t length() const { return header_length + body_length_; }\n    std::size_t body_length() const { return body_length_; }\n    void body_length(std::size_t new_length) {\n        body_length_ = new_length;\n    }\n    char* body() { return data_ + header_length; }\n    const char* body() const { return data_ + header_length; }\n\nprivate:\n    char data_[header_length + 65536];\n    std::size_t body_length_;\n};\n\nclass posix_chat_client {\npublic:\n    posix_chat_client(boost::asio::io_context& io_context, const tcp::resolver::results_type& endpoints)\n        : io_context_(io_context),\n          socket_(io_context),\n          input_(io_context, ::fileno(stdin)),\n          output_(io_context, ::fileno(stdout)) {\n        do_connect(endpoints);\n        do_read_input();\n        do_read_header();\n    }\n\n    void close() {\n        socket_.close();\n        input_.cancel();\n        output_.cancel();\n    }\n\nprivate:\n    void do_connect(const tcp::resolver::results_type& endpoints) {\n        boost::asio::async_connect(socket_, endpoints,\n            boost::bind(&posix_chat_client::handle_connect, this,\n                boost::asio::placeholders::error));\n    }\n\n    void handle_connect(const boost::system::error_code& error) {\n        if (!error) {\n            do_read_header();\n        } else {\n            std::cerr << \"Connect failed: \" << error.message() << \"\\n\";\n            close();\n        }\n    }\n\n    void do_read_header() {\n        boost::asio::async_read(socket_,\n            boost::asio::buffer(read_msg_.data(), chat_message::header_length),\n            boost::bind(&posix_chat_client::handle_read_header, this,\n                boost::asio::placeholders::error));\n    }\n\n    void handle_read_header(const boost::system::error_code& error) {\n        if (!error && read_msg_.body_length() > 0) {\n            do_read_body();\n        } else {\n            close();\n        }\n    }\n\n    void do_read_body() {\n        boost::asio::async_read(socket_,\n            boost::asio::buffer(read_msg_.body(), read_msg_.body_length()),\n            boost::bind(&posix_chat_client::handle_read_body, this,\n                boost::asio::placeholders::error));\n    }\n\n    void handle_read_body(const boost::system::error_code& error) {\n        if (!error) {\n            do_write_output();\n            do_read_header();\n        } else {\n            close();\n        }\n    }\n\n    void do_write_output() {\n        size_t len = strlen(read_msg_.body());\n        boost::asio::async_write(output_,\n            boost::asio::buffer(read_msg_.body(), len),\n            boost::bind(&posix_chat_client::handle_write_output, this,\n                boost::asio::placeholders::error));\n    }\n\n    void handle_write_output(const boost::system::error_code& error) {\n        if (!error) {\n            do_read_input();\n        } else {\n            close();\n        }\n    }\n\n    void do_read_input() {\n        input_buffer_.consume(input_buffer_.size());\n        boost::asio::async_read_until(input_, input_buffer_, '\\n',\n            boost::bind(&posix_chat_client::handle_read_input, this,\n                boost::asio::placeholders::error,\n                boost::asio::placeholders::bytes_transferred));\n    }\n\n    void handle_read_input(const boost::system::error_code& error, size_t bytes_transferred) {\n        if (!error) {\n            std::istream is(&input_buffer_);\n            is.read(write_msg_.body(), write_msg_.body_length());\n            write_msg_.body_length(bytes_transferred - 1);\n            do_write_message();\n        } else {\n            close();\n        }\n    }\n\n    void do_write_message() {\n        boost::asio::async_write(socket_,\n            boost::asio::buffer(write_msg_.data(), write_msg_.length()),\n            boost::bind(&posix_chat_client::handle_write_message, this,\n                boost::asio::placeholders::error));\n    }\n\n    void handle_write_message(const boost::system::error_code& error) {\n        if (!error) {\n            do_read_input();\n        } else {\n            close();\n        }\n    }\n\n    boost::asio::io_context& io_context_;\n    tcp::socket socket_;\n    posix::stream_descriptor input_;\n    posix::stream_descriptor output_;\n    chat_message read_msg_;\n    chat_message write_msg_;\n    boost::asio::streambuf input_buffer_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <boost/bind.hpp>\n#include <boost/shared_ptr.hpp>\n#include <boost/enable_shared_from_this.hpp>\n#include <boost/array.hpp>\n#include <iostream>\n\nnamespace chat {\n    class chat_message {\n    public:\n        enum { header_length = 4 };\n        chat_message() : body_length_(0) {}\n        const char* data() const { return data_; }\n        char* data() { return data_; }\n        std::size_t length() const { return header_length + body_length_; }\n        const char* body() const { return data_ + header_length; }\n        char* body() { return data_ + header_length; }\n        std::size_t body_length() const { return body_length_; }\n        void body_length(std::size_t new_length) {\n            body_length_ = new_length;\n            if (body_length_ > max_body_length)\n                body_length_ = max_body_length;\n        }\n        friend std::ostream& operator<<(std::ostream& os, const chat_message& m) {\n            os.write(m.body(), m.body_length());\n            return os;\n        }\n\n    private:\n        enum { max_body_length = 512 };\n        char data_[header_length + max_body_length];\n        std::size_t body_length_;\n    };\n}\n\nclass posix_chat_client {\npublic:\n    posix_chat_client(boost::asio::io_context& io_context,\n                        const boost::asio::ip::tcp::resolver::results_type& endpoints)\n        : io_context_(io_context),\n          socket_(io_context),\n          input_(io_context, ::fileno(stdin)),\n          output_(io_context, ::fileno(stdout)),\n          read_msg_(),\n          write_msg_(),\n          input_buffer_()\n    {\n        do_connect(endpoints);\n    }\n\n    void close() {\n        socket_.close();\n        input_.cancel();\n        output_.cancel();\n    }\n\nprivate:\n    void do_connect(const boost::asio::ip::tcp::resolver::results_type& endpoints) {\n        boost::asio::async_connect(socket_, endpoints,\n            boost::bind(&posix_chat_client::handle_connect, this,\n                boost::asio::placeholders::error));\n    }\n\n    void handle_connect(const boost::system::error_code& error) {\n        if (!error) {\n            do_read_header();\n            do_read_input();\n        } else {\n            close();\n        }\n    }\n\n    void do_read_header() {\n        boost::asio::async_read(socket_,\n            boost::asio::buffer(read_msg_.data(), chat::chat_message::header_length),\n            boost::bind(&posix_chat_client::handle_read_header, this,\n                boost::asio::placeholders::error));\n    }\n\n    void handle_read_header(const boost::system::error_code& error) {\n        if (!error && read_msg_.body_length() > 0) {\n            do_read_body();\n        } else {\n            close();\n        }\n    }\n\n    void do_read_body() {\n        boost::asio::async_read(socket_,\n            boost::asio::buffer(read_msg_.body(), read_msg_.body_length()),\n            boost::bind(&posix_chat_client::handle_read_body, this,\n                boost::asio::placeholders::error));\n    }\n\n    void handle_read_body(const boost::system::error_code& error) {\n        if (!error) {\n            do_write_output();\n            do_read_header();\n        } else {\n            close();\n        }\n    }\n\n    void do_write_output() {\n        std::ostream os(&output_buffer_);\n        os << read_msg_;\n        output_.async_write_some(boost::asio::buffer(output_buffer_),\n            boost::bind(&posix_chat_client::handle_write_output, this,\n                boost::asio::placeholders::error,\n                boost::asio::placeholders::bytes_transferred));\n    }\n\n    void handle_write_output(const boost::system::error_code& error, std::size_t /*length*/) {\n        if (!error) {\n            do_write_output();\n        }\n    }\n\n    void do_read_input() {\n        input_.async_read_some(boost::asio::buffer(input_buffer_),\n            boost::bind(&posix_chat_client::handle_read_input, this,\n                boost::asio::placeholders::error,\n                boost::asio::placeholders::bytes_transferred));\n    }\n\n    void handle_read_input(const boost::system::error_code& error, std::size_t bytes_transferred) {\n        if (!error) {\n            std::istream is(&input_buffer_);\n            is >> write_msg_;\n            do_write_message();\n        } else {\n            close();\n        }\n    }\n\n    void do_write_message() {\n        boost::asio::async_write(socket_,\n            boost::asio::buffer(write_msg_.data(), write_msg_.length()),\n            boost::bind(&posix_chat_client::handle_write_message, this,\n                boost::asio::placeholders::error));\n    }\n\n    void handle_write_message(const boost::system::error_code& error) {\n        if (!error) {\n            do_read_input();\n        } else {\n            close();\n        }\n    }\n\n    boost::asio::io_context& io_context_;\n    boost::asio::ip::tcp::socket socket_;\n    boost::asio::posix::stream_descriptor input_;\n    boost::asio::posix::stream_descriptor output_;\n    chat::chat_message read_msg_;\n    chat::chat_message write_msg_;\n    boost::asio::streambuf input_buffer_;\n    boost::asio::streambuf output_buffer_;\n};\n```"
    ],
    "unmatched_results": [
      "#include <boost/asio.hpp>\n#include <boost/bind.hpp>\n#include <boost/shared_ptr.hpp>\n#include <boost/enable_shared_from_this.hpp>\n#include <iostream>\n\nnamespace chat {\n    class chat_message {\n    public:\n        enum { header_length = 4 };\n        chat_message() : body_length_(0) {}\n        const char* data() const { return data_; }\n        char* data() { return data_; }\n        std::size_t length() const { return header_length + body_length_; }\n        const char* body() const { return data_ + header_length; }\n        char* body() { return data_ + header_length; }\n        std::size_t body_length() const { return body_length_; }\n        void body_length(std::size_t new_length)\n        {\n            body_length_ = new_length;\n            if (body_length_ > max_body_length)\n                body_length_ = max_body_length;\n        }\n        friend std::ostream& operator<<(std::ostream& os, const chat_message& m)\n        {\n            os.write(m.body(), m.body_length());\n            return os;\n        }\n\n    private:\n        enum { max_body_length = 1024 };\n        char data_[header_length + max_body_length];\n        std::size_t body_length_;\n    };\n\n    class posix_chat_client\n    {\n    public:\n        posix_chat_client(boost::asio::io_context& io_context,\n                          const boost::asio::ip::tcp::resolver::results_type& endpoints)\n            : io_context_(io_context),\n              socket_(io_context),\n              input_(io_context, ::fileno(stdin)),\n              output_(io_context, ::fileno(stdout)),\n              read_msg_(),\n              write_msg_(),\n              input_buffer_()\n        {\n            do_connect(endpoints);\n        }\n\n        void close()\n        {\n            boost::system::error_code ignored_error;\n            socket_.close(ignored_error);\n            input_.cancel();\n            output_.cancel();\n        }\n\n    private:\n        void do_connect(const boost::asio::ip::tcp::resolver::results_type& endpoints)\n        {\n            boost::asio::async_connect(socket_, endpoints,\n                boost::bind(&posix_chat_client::handle_connect, shared_from_this(),\n                    boost::asio::placeholders::error));\n        }\n\n        void handle_connect(const boost::system::error_code& error)\n        {\n            if (!error)\n            {\n                do_read_header();\n                do_read_input();\n            }\n        }\n\n        void do_read_header()\n        {\n            boost::asio::async_read(socket_,\n                boost::asio::buffer(read_msg_.data(), chat_message::header_length),\n                boost::bind(&posix_chat_client::handle_read_header, shared_from_this(),\n                    boost::asio::placeholders::error));\n        }\n\n        void handle_read_header(const boost::system::error_code& error)\n        {\n            if (!error)\n            {\n                read_msg_.body_length(\n                    boost::asio::detail::socket_ops::network_to_host_long(\n                        *reinterpret_cast<const unsigned int*>(read_msg_.data())));\n                do_read_body();\n            }\n        }\n\n        void do_read_body()\n        {\n            boost::asio::async_read(socket_,\n                boost::asio::buffer(read_msg_.body(), read_msg_.body_length()),\n                boost::bind(&posix_chat_client::handle_read_body, shared_from_this(),\n                    boost::asio::placeholders::error));\n        }\n\n        void handle_read_body(const boost::system::error_code& error)\n        {\n            if (!error)\n            {\n                do_write_output();\n                do_read_header();\n            }\n        }\n\n        void do_write_output()\n        {\n            output_.async_write_some(boost::asio::buffer(read_msg_.body(), read_msg_.body_length()),\n                boost::bind(&posix_chat_client::handle_write_output, shared_from_this(),\n                    boost::asio::placeholders::error,\n                    boost::asio::placeholders::bytes_transferred));\n        }\n\n        void handle_write_output(const boost::system::error_code& error, std::size_t bytes_transferred)\n        {\n            if (!error)\n            {\n                do_read_input();\n            }\n        }\n\n        void do_read_input()\n        {\n            input_.async_read_some(boost::asio::buffer(input_buffer_, max_line_length),\n                boost::bind(&posix_chat_client::handle_read_input, shared_from_this(),\n                    boost::asio::placeholders::error,\n                    boost::asio::placeholders::bytes_transferred));\n        }\n\n        void handle_read_input(const boost::system::error_code& error, std::size_t bytes_transferred)\n        {\n            if (!error)\n            {\n                std::istream is(&input_buffer_);\n                is >> write_msg_;\n                do_write_message();\n            }\n        }\n\n        void do_write_message()\n        {\n            boost::asio::async_write(socket_,\n                boost::asio::buffer(write_msg_.data(), write_msg_.length()),\n                boost::bind(&posix_chat_client::handle_write_message, shared_from_this(),\n                    boost::asio::placeholders::error));\n        }\n\n        void handle_write_message(const boost::system::error_code& error)\n        {\n            if (!error)\n            {\n                do_read_input();\n            }\n        }\n\n    private:\n        boost::asio::io_context& io_context_;\n        boost::asio::ip::tcp::socket socket_;\n        boost::asio::posix::stream_descriptor input_;\n        boost::asio::posix::stream_descriptor output_;\n        chat_message read_msg_;\n        chat_message write_msg_;\n        boost::asio::streambuf input_buffer_;\n        static const std::size_t max_line_length = 1024;\n    };\n}",
      "```cpp\n#include <boost/asio.hpp>\n#include <boost/bind.hpp>\n#include <boost/shared_ptr.hpp>\n#include <boost/enable_shared_from_this.hpp>\n#include <boost/array.hpp>\n#include <iostream>\n\nnamespace chat {\n    class chat_message {\n    public:\n        enum { header_length = 4 };\n        chat_message() : body_length_(0) {}\n        const char* data() const { return data_; }\n        char* data() { return data_; }\n        std::size_t length() const { return header_length + body_length_; }\n        const char* body() const { return data_ + header_length; }\n        char* body() { return data_ + header_length; }\n        std::size_t body_length() const { return body_length_; }\n        void body_length(std::size_t new_length)\n        {\n            body_length_ = new_length;\n            if (body_length_ > max_body_length)\n                body_length_ = max_body_length;\n        }\n        friend std::ostream& operator<<(std::ostream& os, const chat_message& m)\n        {\n            os.write(m.body(), m.body_length());\n            return os;\n        }\n\n    private:\n        enum { max_body_length = 512 };\n        char data_[header_length + max_body_length];\n        std::size_t body_length_;\n    };\n}\n\nclass posix_chat_client\n{\npublic:\n    posix_chat_client(boost::asio::io_context& io_context,\n                        const boost::asio::ip::tcp::resolver::results_type& endpoints)\n        : io_context_(io_context),\n          socket_(io_context),\n          input_(io_context, ::fileno(stdin)),\n          output_(io_context, ::fileno(stdout)),\n          read_msg_(),\n          write_msg_(),\n          input_buffer_()\n    {\n        do_connect(endpoints);\n    }\n\n    void close()\n    {\n        boost::system::error_code ignored_error;\n        socket_.close(ignored_error);\n        input_.cancel();\n        output_.cancel();\n    }\n\nprivate:\n    void do_connect(const boost::asio::ip::tcp::resolver::results_type& endpoints)\n    {\n        boost::asio::async_connect(socket_, endpoints,\n            boost::bind(&posix_chat_client::handle_connect, shared_from_this(),\n                boost::asio::placeholders::error));\n    }\n\n    void handle_connect(const boost::system::error_code& error)\n    {\n        if (!error)\n        {\n            do_read_header();\n            do_read_input();\n        }\n    }\n\n    void do_read_header()\n    {\n        boost::asio::async_read(socket_,\n            boost::asio::buffer(read_msg_.data(), chat::chat_message::header_length),\n            boost::bind(&posix_chat_client::handle_read_header, shared_from_this(),\n                boost::asio::placeholders::error));\n    }\n\n    void handle_read_header(const boost::system::error_code& error)\n    {\n        if (!error)\n        {\n            read_msg_.body_length(\n                boost::asio::detail::socket_ops::network_to_host_long(\n                    *reinterpret_cast<const unsigned int*>(read_msg_.data())));\n            do_read_body();\n        }\n    }\n\n    void do_read_body()\n    {\n        boost::asio::async_read(socket_,\n            boost::asio::buffer(read_msg_.body(), read_msg_.body_length()),\n            boost::bind(&posix_chat_client::handle_read_body, shared_from_this(),\n                boost::asio::placeholders::error));\n    }\n\n    void handle_read_body(const boost::system::error_code& error)\n    {\n        if (!error)\n        {\n            do_write_output();\n            do_read_header();\n        }\n    }\n\n    void do_write_output()\n    {\n        output_.async_write_some(boost::asio::buffer(read_msg_.body(), read_msg_.body_length()),\n            boost::bind(&posix_chat_client::handle_write_output, shared_from_this(),\n                boost::asio::placeholders::error));\n    }\n\n    void handle_write_output(const boost::system::error_code& error)\n    {\n        if (!error)\n        {\n            do_read_input();\n        }\n    }\n\n    void do_read_input()\n    {\n        input_.async_read_some(boost::asio::buffer(input_buffer_, max_line_length),\n            boost::bind(&posix_chat_client::handle_read_input, shared_from_this(),\n                boost::asio::placeholders::error,\n                boost::asio::placeholders::bytes_transferred));\n    }\n\n    void handle_read_input(const boost::system::error_code& error, std::size_t bytes_transferred)\n    {\n        if (!error)\n        {\n            std::istream is(&input_buffer_);\n            std::string line;\n            std::getline(is, line);\n            if (line.empty())\n                line = \"\\n\";\n            write_msg_.body_length(line.size());\n            std::memcpy(write_msg_.body(), line.c_str(), line.size());\n            do_write_message();\n        }\n    }\n\n    void do_write_message()\n    {\n        boost::asio::async_write(socket_,\n            boost::asio::buffer(write_msg_.data(), write_msg_.length()),\n            boost::bind(&posix_chat_client::handle_write_message, shared_from_this(),\n                boost::asio::placeholders::error));\n    }\n\n    void handle_write_message(const boost::system::error_code& error)\n    {\n        if (!error)\n        {\n            do_read_input();\n        }\n    }\n\n    boost::asio::io_context& io_context_;\n    boost::asio::ip::tcp::socket socket_;\n    boost::asio::posix::stream_descriptor input_;\n    boost::asio::posix::stream_descriptor output_;\n    chat::chat_message read_msg_;\n    chat::chat_message write_msg_;\n    boost::asio::streambuf input_buffer_;\n    static const std::size_t max_line_length = 512;\n};",
      "```cpp\n#include <boost/asio.hpp>\n#include <boost/bind.hpp>\n#include <boost/shared_ptr.hpp>\n#include <boost/enable_shared_from_this.hpp>\n#include <boost/array.hpp>\n#include <iostream>\n\nnamespace chat {\n    class chat_message {\n    public:\n        enum { header_length = 4 };\n        chat_message() : body_length_(0) {}\n        const char* data() const { return data_; }\n        char* data() { return data_; }\n        std::size_t length() const { return header_length + body_length_; }\n        const char* body() const { return data_ + header_length; }\n        char* body() { return data_ + header_length; }\n        std::size_t body_length() const { return body_length_; }\n        void body_length(std::size_t new_length)\n        {\n            body_length_ = new_length;\n            if (body_length_ > max_body_length)\n                body_length_ = max_body_length;\n        }\n        friend std::ostream& operator<<(std::ostream& os, const chat_message& m)\n        {\n            os.write(m.body(), m.body_length());\n            return os;\n        }\n\n    private:\n        enum { max_body_length = 1024 };\n        char data_[header_length + max_body_length];\n        std::size_t body_length_;\n    };\n}\n\nclass posix_chat_client\n{\npublic:\n    posix_chat_client(boost::asio::io_context& io_context,\n                        const boost::asio::ip::tcp::resolver::results_type& endpoints)\n        : io_context_(io_context),\n          socket_(io_context),\n          input_(io_context, ::fileno(stdin)),\n          output_(io_context, ::fileno(stdout)),\n          read_msg_(),\n          write_msg_(),\n          input_buffer_()\n    {\n        do_connect(endpoints);\n    }\n\n    void close()\n    {\n        socket_.close();\n        input_.close();\n        output_.close();\n    }\n\nprivate:\n    void do_connect(const boost::asio::ip::tcp::resolver::results_type& endpoints)\n    {\n        boost::asio::async_connect(socket_, endpoints,\n            boost::bind(&posix_chat_client::handle_connect, this,\n                boost::asio::placeholders::error));\n    }\n\n    void handle_connect(const boost::system::error_code& error)\n    {\n        if (!error)\n        {\n            do_read_header();\n            do_read_input();\n        }\n    }\n\n    void do_read_header()\n    {\n        boost::asio::async_read(socket_,\n            boost::asio::buffer(read_msg_.data(), chat::chat_message::header_length),\n            boost::bind(&posix_chat_client::handle_read_header, this,\n                boost::asio::placeholders::error));\n    }\n\n    void handle_read_header(const boost::system::error_code& error)\n    {\n        if (!error)\n        {\n            read_msg_.body_length(\n                boost::asio::detail::socket_ops::network_to_host_long(\n                    *reinterpret_cast<const unsigned int*>(read_msg_.data())));\n            do_read_body();\n        }\n    }\n\n    void do_read_body()\n    {\n        boost::asio::async_read(socket_,\n            boost::asio::buffer(read_msg_.body(), read_msg_.body_length()),\n            boost::bind(&posix_chat_client::handle_read_body, this,\n                boost::asio::placeholders::error));\n    }\n\n    void handle_read_body(const boost::system::error_code& error)\n    {\n        if (!error)\n        {\n            do_write_output();\n            do_read_header();\n        }\n    }\n\n    void do_write_output()\n    {\n        output_.async_write_some(boost::asio::buffer(read_msg_.body(), read_msg_.body_length()),\n            boost::bind(&posix_chat_client::handle_write_output, this,\n                boost::asio::placeholders::error,\n                boost::asio::placeholders::bytes_transferred));\n    }\n\n    void handle_write_output(const boost::system::error_code& error, std::size_t /*length*/)\n    {\n        if (!error)\n        {\n            do_read_input();\n        }\n    }\n\n    void do_read_input()\n    {\n        input_.async_read_some(boost::asio::buffer(input_buffer_, 65536),\n            boost::bind(&posix_chat_client::handle_read_input, this,\n                boost::asio::placeholders::error,\n                boost::asio::placeholders::bytes_transferred));\n    }\n\n    void handle_read_input(const boost::system::error_code& error, std::size_t bytes_transferred)\n    {\n        if (!error)\n        {\n            std::istream is(&input_buffer_);\n            is.read(write_msg_.body(), chat::chat_message::max_body_length);\n            std::size_t length = is.gcount();\n            write_msg_.body_length(length);\n            boost::asio::detail::socket_ops::host_to_network_long(\n                static_cast<unsigned int>(write_msg_.body_length()),\n                reinterpret_cast<char*>(write_msg_.data()));\n            do_write_message();\n        }\n    }\n\n    void do_write_message()\n    {\n        boost::asio::async_write(socket_,\n            boost::asio::buffer(write_msg_.data(), write_msg_.length()),\n            boost::bind(&posix_chat_client::handle_write_message, this,\n                boost::asio::placeholders::error));\n    }\n\n    void handle_write_message(const boost::system::error_code& error)\n    {\n        if (!error)\n        {\n            do_read_input();\n        }\n    }\n\n    boost::asio::io_context& io_context_;\n    boost::asio::ip::tcp::socket socket_;\n    boost::asio::posix::stream_descriptor input_;\n    boost::asio::posix::stream_descriptor output_;\n    chat::chat_message read_msg_;\n    chat::chat_message write_msg_;\n    boost::asio::streambuf input_buffer_;\n};"
    ],
    "match_count": 7,
    "pass@3": 0.9916666666666667,
    "pass@5": 1.0
  },
  {
    "Task_id": 8,
    "Instruction": "Task Description: Implement a WebSocket client class for webOS devices that supports both SSL and non-SSL connections using Boost.Asio and Boost.Beast libraries. The client should handle asynchronous connection, message sending/receiving, and error handling.\n\nClass Description: WebOsClient::Impl is an implementation class for a webOS WebSocket client that manages TCP/SSL WebSocket connections to a webOS device. It handles connection lifecycle, message exchange, and error recovery.\n\nAttributes:\n- ioc_: [net::io_context&] - Reference to Boost.Asio I/O context for asynchronous operations\n- ctx_: [ssl::context&] - Reference to SSL context for secure connections\n- device_settings_: [Device] - Configuration settings for the target device\n- log_: [std::shared_ptr<Logging>] - Shared pointer to logging utility\n- resolver_: [tcp::resolver] - TCP resolver for hostname resolution\n- ws_: [std::optional<websocket::stream<beast::ssl_stream<beast::tcp_stream>>>] - Optional SSL WebSocket stream\n- ws_tcp_: [std::optional<websocket::stream<beast::tcp_stream>>] - Optional non-SSL WebSocket stream\n- buffer_: [beast::flat_buffer] - Buffer for incoming messages\n- host_: [std::string] - Target host address with port\n- socket_status_: [int] - Current connection status (disconnected/connecting/connected)\n\nMethods:\n- run(): [void]() - Initiates the connection process by resolving the hostname\n- onResolve(): [void](beast::error_code, tcp::resolver::results_type) - Callback for hostname resolution completion\n- onConnect(): [void](beast::error_code, tcp::resolver::results_type::endpoint_type) - Callback for TCP connection completion\n- onSSLhandshake(): [void](beast::error_code) - Callback for SSL handshake completion\n- onWinsockHandshake(): [void](beast::error_code) - Callback for WebSocket handshake completion\n- send(): [void](std::string, std::string) - Sends data through the WebSocket connection\n- onWrite(): [void](beast::error_code, std::size_t) - Callback for write operation completion\n- read(): [void]() - Initiates an asynchronous read operation\n- onRead(): [void](beast::error_code, std::size_t) - Callback for read operation completion\n- onError(): [void](beast::error_code&, std::string) - Handles connection errors\n- enqueueWork(): [void](Work&) - Adds work to the processing queue\n- close(): [void]() - Initiates connection shutdown\n- Impl(): [Constructor](net::io_context&, ssl::context&, Device&, Logging&) - Constructor initializing core components",
    "Canonical_solution": "#include <boost/asio.hpp>\n#include <boost/beast/core.hpp>\n#include <boost/beast/ssl.hpp>\n#include <boost/beast/websocket.hpp>\n#include <boost/beast/websocket/ssl.hpp>\n#include <nlohmann/json.hpp>\n\nnamespace beast = boost::beast;\nnamespace http = beast::http;\nnamespace websocket = beast::websocket;\nnamespace net = boost::asio;\nnamespace ssl = boost::asio::ssl;\nusing tcp = boost::asio::ip::tcp;\nusing udp = boost::asio::ip::udp;\nusing json = nlohmann::json;\n\nclass WebOsClient::Impl : public std::enable_shared_from_this<WebOsClient::Impl> {\nprivate:\n    net::io_context& ioc_;\n    ssl::context& ctx_;\n    Device device_settings_;\n    std::shared_ptr<Logging> log_;\n    tcp::resolver resolver_;\n    std::optional<websocket::stream<beast::ssl_stream<beast::tcp_stream>>> ws_;\n    std::optional<websocket::stream<beast::tcp_stream>> ws_tcp_;\n    beast::flat_buffer buffer_;\n    std::string host_;\n    int socket_status_ = SOCKET_DISCONNECTED;\n\n    void run() {\n        socket_status_ = SOCKET_CONNECTING;\n        if(device_settings_.ssl)\n            ws_.emplace(resolver_.get_executor(), ctx_);\n        else\n            ws_tcp_.emplace(resolver_.get_executor());\n        host_ = device_settings_.ip;\n        resolver_.async_resolve(host_.c_str(), device_settings_.ssl ? PORT_SSL : PORT,\n            beast::bind_front_handler(&Impl::onResolve, shared_from_this()));\n    }\n\n    void onResolve(beast::error_code ec, tcp::resolver::results_type results) {\n        if (ec) return onError(ec, \"onResolve\");\n        socket_status_ = SOCKET_CONNECTING;\n        if(device_settings_.ssl) {\n            beast::get_lowest_layer(*ws_).expires_after(std::chrono::milliseconds(TIMER_ASYNC_TIMEOUT));\n            beast::get_lowest_layer(*ws_).async_connect(results,\n                beast::bind_front_handler(&Impl::onConnect, shared_from_this()));\n        } else {\n            beast::get_lowest_layer(*ws_tcp_).expires_after(std::chrono::milliseconds(TIMER_ASYNC_TIMEOUT));\n            beast::get_lowest_layer(*ws_tcp_).async_connect(results,\n                beast::bind_front_handler(&Impl::onConnect, shared_from_this()));\n        }\n    }\n\n    void onConnect(beast::error_code ec, tcp::resolver::results_type::endpoint_type ep) {\n        if (ec) return onError(ec, \"onConnect\");\n        socket_status_ = SOCKET_CONNECTING;\n        if(device_settings_.ssl) {\n            beast::get_lowest_layer(*ws_).expires_after(std::chrono::milliseconds(TIMER_ASYNC_TIMEOUT));\n            if (!SSL_set_tlsext_host_name(ws_->next_layer().native_handle(), device_settings_.ip.c_str())) {\n                ec = beast::error_code(static_cast<int>(::ERR_get_error()), net::error::get_ssl_category());\n                return onError(ec, \"Failed to set SNI hostname\");\n            }\n            host_ += ':' + std::to_string(ep.port());\n            ws_->next_layer().async_handshake(ssl::stream_base::client,\n                beast::bind_front_handler(&Impl::onSSLhandshake, shared_from_this()));\n        } else {\n            beast::get_lowest_layer(*ws_tcp_).expires_after(std::chrono::milliseconds(TIMER_ASYNC_TIMEOUT));\n            ws_tcp_->set_option(websocket::stream_base::timeout::suggested(beast::role_type::client));\n            ws_tcp_->set_option(websocket::stream_base::decorator(\n                [](websocket::request_type& req) {\n                    req.set(http::field::user_agent,\n                        std::string(BOOST_BEAST_VERSION_STRING) + \" websocket-client-async\");\n                }));\n            host_ += ':' + std::to_string(ep.port());\n            ws_tcp_->async_handshake(host_, \"/\",\n                beast::bind_front_handler(&Impl::onWinsockHandshake, shared_from_this()));\n        }\n    }\n\n    void onSSLhandshake(beast::error_code ec) {\n        if (ec) return onError(ec, \"onSSLhandshake\");\n        socket_status_ = SOCKET_CONNECTING;\n        beast::get_lowest_layer(*ws_).expires_never();\n        ws_->set_option(websocket::stream_base::timeout::suggested(beast::role_type::client));\n        ws_->set_option(websocket::stream_base::decorator(\n            [](websocket::request_type& req) {\n                req.set(http::field::user_agent,\n                    std::string(BOOST_BEAST_VERSION_STRING) + \" websocket-client-async-ssl\");\n            }));\n        ws_->async_handshake(host_, \"/\",\n            beast::bind_front_handler(&Impl::onWinsockHandshake, shared_from_this()));\n    }\n\n    void onWinsockHandshake(beast::error_code ec) {\n        if (ec) return onError(ec, \"onWinsockHandshake\");\n        socket_status_ = SOCKET_CONNECTED;\n        send(webos_handshake_, \"webOS handshake\");\n    }\n\n    void send(std::string data, std::string log_message = \"\") {\n        if(device_settings_.ssl) {\n            ws_->async_write(net::buffer(data),\n                beast::bind_front_handler(&Impl::onWrite, shared_from_this()));\n        } else {\n            ws_tcp_->async_write(net::buffer(data),\n                beast::bind_front_handler(&Impl::onWrite, shared_from_this()));\n        }\n    }\n\n    void onWrite(beast::error_code ec, std::size_t bytes_transferred) {\n        boost::ignore_unused(bytes_transferred);\n        if (ec) return onError(ec, \"onWrite\");\n        read();\n    }\n\n    void read() {\n        if(device_settings_.ssl)\n            ws_->async_read(buffer_,\n                beast::bind_front_handler(&Impl::onRead, shared_from_this()));\n        else\n            ws_tcp_->async_read(buffer_,\n                beast::bind_front_handler(&Impl::onRead, shared_from_this()));\n    }\n\n    void onRead(beast::error_code ec, std::size_t bytes_transferred) {\n        boost::ignore_unused(bytes_transferred);\n        if (ec) return onError(ec, \"onRead\");\n        socket_status_ = SOCKET_CONNECTED;\n        // Process received data here\n        buffer_.consume(buffer_.size());\n        read();\n    }\n\n    void onError(beast::error_code& ec, std::string err) {\n        DEBUG(\"%1% (%2%)\", ec.message(), err);\n        socket_status_ = SOCKET_DISCONNECTED;\n    }\n\npublic:\n    explicit Impl(net::io_context& ioc, ssl::context& ctx, Device& settings, Logging& log)\n        : ioc_(ioc), ctx_(ctx), device_settings_(settings), log_(std::make_shared<Logging>(log)),\n          resolver_(net::make_strand(ioc)) {}\n\n    void enqueueWork(Work& work) {\n        net::dispatch(resolver_.get_executor(),\n            [unit = work, self = shared_from_this()]() mutable {\n                self->workQueue_.emplace_back(std::move(unit));\n                self->startNextWork();\n            });\n    }\n\n    void close() {\n        net::dispatch(resolver_.get_executor(),\n            beast::bind_front_handler(&Impl::doClose, shared_from_this()));\n    }\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 151,
    "matched_results": [
      "```cpp\n#include <boost/beast/websocket.hpp>\n#include <boost/beast/ssl.hpp>\n#include <boost/beast/core.hpp>\n#include <boost/asio.hpp>\n#include <boost/system/error_code.hpp>\n#include <memory>\n#include <string>\n#include <optional>\n#include <functional>\n\nnamespace net = boost::asio;\nnamespace ssl = boost::asio::ssl;\nnamespace beast = boost::beast;\nnamespace websocket = boost::beast::websocket;\n\nstruct Device {\n    std::string host;\n    int port;\n    bool use_ssl;\n};\n\nclass Logging {\npublic:\n    void info(const std::string& message) {}\n    void error(const std::string& message) {}\n};\n\nclass WebOsClient {\npublic:\n    class Impl {\n    public:\n        Impl(net::io_context& ioc, ssl::context& ctx, Device& device_settings, std::shared_ptr<Logging> log)\n            : ioc_(ioc), ctx_(ctx), device_settings_(device_settings), log_(log),\n              resolver_(ioc), buffer_(), host_(device_settings.host + \":\" + std::to_string(device_settings.port)),\n              socket_status_(0) {}\n\n        void run() {\n            resolver_.async_resolve(host_, \"\",\n                [this](beast::error_code ec, tcp::resolver::results_type results) {\n                    onResolve(ec, results);\n                });\n        }\n\n        void onResolve(beast::error_code ec, tcp::resolver::results_type results) {\n            if (ec) return onError(ec, \"resolve\");\n\n            beast::get_lowest_layer(ws_tcp_.emplace(ioc_)).async_connect(\n                *results.begin(),\n                [this](beast::error_code ec, tcp::resolver::results_type::endpoint_type) {\n                    onConnect(ec, {});\n                });\n        }\n\n        void onConnect(beast::error_code ec, tcp::resolver::results_type::endpoint_type) {\n            if (ec) return onError(ec, \"connect\");\n\n            if (device_settings_.use_ssl) {\n                beast::get_lowest_layer(ws_.emplace(ioc_, ctx_)).next_layer().set_verify_mode(ssl::verify_none);\n                beast::get_lowest_layer(ws_.value()).next_layer().async_handshake(\n                    ssl::stream_base::client,\n                    [this](beast::error_code ec) {\n                        onSSLhandshake(ec);\n                    });\n            } else {\n                ws_tcp_.value().async_handshake(host_, \"/\",\n                    [this](beast::error_code ec) {\n                        onWinsockHandshake(ec);\n                    });\n            }\n        }\n\n        void onSSLhandshake(beast::error_code ec) {\n            if (ec) return onError(ec, \"ssl handshake\");\n\n            ws_.value().async_handshake(host_, \"/\",\n                [this](beast::error_code ec) {\n                    onWinsockHandshake(ec);\n                });\n        }\n\n        void onWinsockHandshake(beast::error_code ec) {\n            if (ec) return onError(ec, \"websocket handshake\");\n\n            read();\n        }\n\n        void send(std::string id, std::string payload) {\n            beast::flat_buffer b;\n            beast::ostream(b) << id << ':' << payload;\n            ws_.value().async_write(b.data(),\n                [this, self = this](beast::error_code ec, std::size_t bytes_transferred) {\n                    onWrite(ec, bytes_transferred);\n                });\n        }\n\n        void onWrite(beast::error_code ec, std::size_t) {\n            if (ec) return onError(ec, \"write\");\n        }\n\n        void read() {\n            ws_.value().async_read(buffer_,\n                [this](beast::error_code ec, std::size_t) {\n                    onRead(ec, 0);\n                });\n        }\n\n        void onRead(beast::error_code ec, std::size_t) {\n            if (ec) return onError(ec, \"read\");\n\n            read();\n        }\n\n        void onError(beast::error_code& ec, std::string context) {\n            log_->error(\"Error in \" + context + \": \" + ec.message());\n            close();\n        }\n\n        void enqueueWork(std::function<void()> work) {\n            ioc_.post(work);\n        }\n\n        void close() {\n            beast::error_code ec;\n            if (ws_) {\n                ws_.value().close(websocket::close_code::normal, ec);\n            } else if (ws_tcp_) {\n                ws_tcp_.value().close(websocket::close_code::normal, ec);\n            }\n            if (ec) log_->error(\"Close failed: \" + ec.message());\n        }\n\n    private:\n        net::io_context& ioc_;\n        ssl::context& ctx_;\n        Device& device_settings_;\n        std::shared_ptr<Logging> log_;\n        tcp::resolver resolver_;\n        std::optional<websocket::stream<beast::ssl_stream<beast::tcp_stream>>> ws_;\n        std::optional<websocket::stream<beast::tcp_stream>> ws_tcp_;\n        beast::flat_buffer buffer_;\n        std::string host_;\n        int socket_status_;\n    };\n};\n```"
    ],
    "unmatched_results": [
      "```cpp\n#include <boost/beast/websocket.hpp>\n#include <boost/beast/websocket/ssl.hpp>\n#include <boost/asio/ip/tcp.hpp>\n#include <boost/asio/ssl.hpp>\n#include <boost/beast/core.hpp>\n#include <memory>\n#include <string>\n#include <optional>\n#include <functional>\n\nnamespace net = boost::asio;\nnamespace ssl = boost::asio::ssl;\nnamespace beast = boost::beast;\nnamespace websocket = boost::beast::websocket;\n\nclass WebOsClient {\npublic:\n    class Impl {\n    public:\n        using Work = std::function<void()>;\n\n        Impl(net::io_context& ioc, ssl::context& ctx, const Device& device_settings, std::shared_ptr<Logging> log)\n            : ioc_(ioc), ctx_(ctx), device_settings_(device_settings), log_(log),\n              resolver_(ioc), buffer_(), host_(\"\"), socket_status_(0) {}\n\n        void run() {\n            resolver_.async_resolve(host_, [this](beast::error_code ec, tcp::resolver::results_type results) {\n                onResolve(ec, std::move(results));\n            });\n        }\n\n        void send(const std::string& id, const std::string& data) {\n            // Implementation for sending message\n        }\n\n        void close() {\n            if (ws_) {\n                ws_->close(websocket::close_code::normal);\n            } else if (ws_tcp_) {\n                ws_tcp_->close(websocket::close_code::normal);\n            }\n        }\n\n    private:\n        void onResolve(beast::error_code ec, tcp::resolver::results_type results) {\n            if (ec) return onError(ec, \"resolve\");\n            auto ep = results.begin();\n            connect(*ep);\n        }\n\n        void connect(tcp::resolver::results_type::endpoint_type ep) {\n            if (device_settings_.use_ssl) {\n                beast::get_lowest_layer(ws_.emplace(ioc_, ctx_)).async_connect(\n                    ep, [this](beast::error_code ec, tcp::resolver::results_type::endpoint_type) {\n                        onConnect(ec, ep);\n                    });\n            } else {\n                beast::get_lowest_layer(ws_tcp_.emplace(ioc_)).async_connect(\n                    ep, [this](beast::error_code ec, tcp::resolver::results_type::endpoint_type) {\n                        onConnect(ec, ep);\n                    });\n            }\n        }\n\n        void onConnect(beast::error_code ec, tcp::resolver::results_type::endpoint_type) {\n            if (ec) return onError(ec, \"connect\");\n            if (device_settings_.use_ssl) {\n                ws_->next_layer().async_handshake(ssl::stream_base::client,\n                    [this](beast::error_code ec) { onSSLhandshake(ec); });\n            } else {\n                ws_tcp_->async_handshake(\"ws://localhost\", [this](beast::error_code ec) {\n                    onWinsockHandshake(ec);\n                });\n            }\n        }\n\n        void onSSLhandshake(beast::error_code ec) {\n            if (ec) return onError(ec, \"ssl handshake\");\n            ws_->async_handshake(\"localhost\", \"/\", [this](beast::error_code ec) {\n                onWinsockHandshake(ec);\n            });\n        }\n\n        void onWinsockHandshake(beast::error_code ec) {\n            if (ec) return onError(ec, \"websocket handshake\");\n            read();\n        }\n\n        void read() {\n            ws_ ? ws_->async_read(buffer_, [this](beast::error_code ec, std::size_t bytes_transferred) {\n                onRead(ec, bytes_transferred);\n            }) : ws_tcp_->async_read(buffer_, [this](beast::error_code ec, std::size_t bytes_transferred) {\n                onRead(ec, bytes_transferred);\n            });\n        }\n\n        void onRead(beast::error_code ec, std::size_t) {\n            if (ec == websocket::error::closed) return;\n            if (ec) return onError(ec, \"read\");\n            enqueueWork([this] { read(); });\n        }\n\n        void onWrite(beast::error_code ec, std::size_t) {\n            if (ec) return onError(ec, \"write\");\n        }\n\n        void enqueueWork(Work work) {\n            ioc_.post(std::move(work));\n        }\n\n        void onError(beast::error_code& ec, const std::string& context) {\n            log_->error(\"Error in {}: {}\", context, ec.message());\n            close();\n        }\n\n        net::io_context& ioc_;\n        ssl::context& ctx_;\n        const Device& device_settings_;\n        std::shared_ptr<Logging> log_;\n        tcp::resolver resolver_;\n        std::optional<websocket::stream<beast::ssl_stream<beast::tcp_stream>>> ws_;\n        std::optional<websocket::stream<beast::tcp_stream>> ws_tcp_;\n        beast::flat_buffer buffer_;\n        std::string host_;\n        int socket_status_;\n    };\n};\n```",
      "```cpp\n#include <boost/beast/websocket.hpp>\n#include <boost/beast/ssl.hpp>\n#include <boost/beast/core.hpp>\n#include <boost/asio/ip/tcp.hpp>\n#include <boost/asio/ssl.hpp>\n#include <boost/system/error_code.hpp>\n#include <memory>\n#include <string>\n#include <optional>\n#include <functional>\n\nnamespace net = boost::asio;\nnamespace ssl = boost::asio::ssl;\nnamespace beast = boost::beast;\nnamespace websocket = boost::beast::websocket;\n\nstruct Device {\n    std::string host;\n    int port;\n    bool use_ssl;\n};\n\nclass Logging {\npublic:\n    void info(const std::string& msg) {}\n    void error(const std::string& msg) {}\n};\n\nclass WebOsClient {\npublic:\n    class Impl {\n    public:\n        Impl(net::io_context& ioc, ssl::context& ctx, Device& device_settings, std::shared_ptr<Logging> log)\n            : ioc_(ioc), ctx_(ctx), device_settings_(device_settings), log_(log),\n              resolver_(ioc), buffer_(), host_(device_settings.host + \":\" + std::to_string(device_settings.port)),\n              socket_status_(0) {}\n\n        void run() {\n            resolver_.async_resolve(host_, \"http\",\n                [this](beast::error_code ec, tcp::resolver::results_type results) {\n                    onResolve(ec, results);\n                });\n        }\n\n        void send(std::string id, std::string payload) {\n            if (ws_) {\n                ws_->async_write(net::buffer(payload),\n                    [this, id](beast::error_code ec, std::size_t bytes_transferred) {\n                        onWrite(ec, bytes_transferred);\n                    });\n            } else if (ws_tcp_) {\n                ws_tcp_->async_write(net::buffer(payload),\n                    [this, id](beast::error_code ec, std::size_t bytes_transferred) {\n                        onWrite(ec, bytes_transferred);\n                    });\n            }\n        }\n\n        void close() {\n            if (ws_) {\n                ws_->async_close(websocket::close_code::normal,\n                    [this](beast::error_code ec) {\n                        if (ec) onError(ec, \"Close failed\");\n                    });\n            } else if (ws_tcp_) {\n                ws_tcp_->async_close(websocket::close_code::normal,\n                    [this](beast::error_code ec) {\n                        if (ec) onError(ec, \"Close failed\");\n                    });\n            }\n        }\n\n    private:\n        void onResolve(beast::error_code ec, tcp::resolver::results_type results) {\n            if (ec) return onError(ec, \"Resolve failed\");\n\n            auto ep = results.begin();\n            if (device_settings_.use_ssl) {\n                ws_.emplace(websocket::stream<beast::ssl_stream<beast::tcp_stream>>(ioc_, ctx_));\n                beast::get_lowest_layer(*ws_).next_layer().set_verify_mode(ssl::verify_none);\n                beast::get_lowest_layer(*ws_).connect(*ep);\n                beast::get_lowest_layer(*ws_).next_layer().async_handshake(ssl::stream_base::client,\n                    [this](beast::error_code ec) {\n                        onSSLhandshake(ec);\n                    });\n            } else {\n                ws_tcp_.emplace(websocket::stream<beast::tcp_stream>(ioc_));\n                beast::get_lowest_layer(*ws_tcp_).connect(*ep);\n                ws_tcp_->async_handshake(host_, \"/\",\n                    [this](beast::error_code ec) {\n                        onWinsockHandshake(ec);\n                    });\n            }\n        }\n\n        void onConnect(beast::error_code ec, tcp::resolver::results_type::endpoint_type ep) {\n            if (ec) return onError(ec, \"Connect failed\");\n        }\n\n        void onSSLhandshake(beast::error_code ec) {\n            if (ec) return onError(ec, \"SSL handshake failed\");\n            ws_->async_handshake(host_, \"/\",\n                [this](beast::error_code ec) {\n                    onWinsockHandshake(ec);\n                });\n        }\n\n        void onWinsockHandshake(beast::error_code ec) {\n            if (ec) return onError(ec, \"WebSocket handshake failed\");\n            read();\n        }\n\n        void read() {\n            ws_ ? ws_->async_read(buffer_,\n                [this](beast::error_code ec, std::size_t bytes_transferred) {\n                    onRead(ec, bytes_transferred);\n                }) : ws_tcp_->async_read(buffer_,\n                [this](beast::error_code ec, std::size_t bytes_transferred) {\n                    onRead(ec, bytes_transferred);\n                });\n        }\n\n        void onWrite(beast::error_code ec, std::size_t bytes_transferred) {\n            if (ec) return onError(ec, \"Write failed\");\n        }\n\n        void onRead(beast::error_code ec, std::size_t bytes_transferred) {\n            if (ec) return onError(ec, \"Read failed\");\n            read();\n        }\n\n        void onError(beast::error_code& ec, const std::string& msg) {\n            log_->error(msg + \": \" + ec.message());\n        }\n\n        void enqueueWork(const std::function<void()>& work) {\n            ioc_.post(work);\n        }\n\n        net::io_context& ioc_;\n        ssl::context& ctx_;\n        Device device_settings_;\n        std::shared_ptr<Logging> log_;\n        tcp::resolver resolver_;\n        std::optional<websocket::stream<beast::ssl_stream<beast::tcp_stream>>> ws_;\n        std::optional<websocket::stream<beast::tcp_stream>> ws_tcp_;\n        beast::flat_buffer buffer_;\n        std::string host_;\n        int socket_status_;\n    };\n};\n```",
      "```cpp\n#include <boost/beast/websocket.hpp>\n#include <boost/beast/websocket/ssl.hpp>\n#include <boost/asio/connect.hpp>\n#include <boost/asio/ip/tcp.hpp>\n#include <boost/asio/ssl/stream.hpp>\n#include <boost/beast/core.hpp>\n#include <boost/beast/core/flat_buffer.hpp>\n#include <memory>\n#include <string>\n#include <optional>\n\nnamespace net = boost::asio;\nnamespace ssl = boost::asio::ssl;\nnamespace beast = boost::beast;\nnamespace websocket = boost::beast::websocket;\n\nstruct Device {\n    std::string host;\n    int port;\n};\n\nclass Logging {\npublic:\n    void info(const std::string&) {}\n    void error(const std::string&) {}\n};\n\nclass WebOsClient {\npublic:\n    class Impl {\n    public:\n        Impl(net::io_context& ioc, ssl::context& ctx, Device& device_settings, std::shared_ptr<Logging> log)\n            : ioc_(ioc), ctx_(ctx), device_settings_(device_settings), log_(log),\n              resolver_(ioc), buffer_(), host_(device_settings.host + \":\" + std::to_string(device_settings.port)),\n              socket_status_(0) {}\n\n        void run() {\n            resolver_.async_resolve(host_, \"http\",\n                [this](beast::error_code ec, tcp::resolver::results_type results) {\n                    onResolve(ec, std::move(results));\n                });\n        }\n\n        void onResolve(beast::error_code ec, tcp::resolver::results_type results) {\n            if (ec) return onError(ec, \"resolve\");\n            beast::get_lowest_layer(ws_.emplace(ioc_, ctx_)).async_connect(\n                *results.begin(),\n                [this](beast::error_code ec, tcp::resolver::results_type::endpoint_type) {\n                    onConnect(ec, {});\n                });\n        }\n\n        void onConnect(beast::error_code ec, tcp::resolver::results_type::endpoint_type) {\n            if (ec) return onError(ec, \"connect\");\n            beast::get_lowest_layer(ws_tcp_.emplace(ioc_)).async_connect(\n                *resolver_.get_results().begin(),\n                [this](beast::error_code ec, tcp::resolver::results_type::endpoint_type) {\n                    onWinsockHandshake(ec);\n                });\n            ws_->next_layer().async_handshake(ssl::stream_base::client,\n                [this](beast::error_code ec) { onSSLhandshake(ec); });\n        }\n\n        void onSSLhandshake(beast::error_code ec) {\n            if (ec) return onError(ec, \"ssl handshake\");\n            ws_->async_handshake(host_, \"/\",\n                [this](beast::error_code ec) { onWinsockHandshake(ec); });\n        }\n\n        void onWinsockHandshake(beast::error_code ec) {\n            if (ec) return onError(ec, \"websocket handshake\");\n            read();\n        }\n\n        void send(std::string target, std::string message) {\n            ws_->async_write(net::buffer(message),\n                [this](beast::error_code ec, std::size_t bytes_transferred) {\n                    onWrite(ec, bytes_transferred);\n                });\n        }\n\n        void onWrite(beast::error_code ec, std::size_t) {\n            if (ec) return onError(ec, \"write\");\n            read();\n        }\n\n        void read() {\n            ws_->async_read(buffer_,\n                [this](beast::error_code ec, std::size_t bytes_transferred) {\n                    onRead(ec, bytes_transferred);\n                });\n        }\n\n        void onRead(beast::error_code ec, std::size_t) {\n            if (ec) return onError(ec, \"read\");\n            buffer_.consume(buffer_.size());\n            read();\n        }\n\n        void onError(beast::error_code& ec, std::string context) {\n            log_->error(\"Error in \" + context + \": \" + ec.message());\n            close();\n        }\n\n        void enqueueWork(std::function<void()> work) {\n            ioc_.post([work]() { work(); });\n        }\n\n        void close() {\n            beast::error_code ec;\n            if (ws_) {\n                ws_->close(websocket::close_code::normal, ec);\n                if (ec) log_->error(\"WebSocket close error: \" + ec.message());\n            }\n            if (ws_tcp_) {\n                ws_tcp_->close(websocket::close_code::normal, ec);\n                if (ec) log_->error(\"TCP WebSocket close error: \" + ec.message());\n            }\n        }\n\n    private:\n        net::io_context& ioc_;\n        ssl::context& ctx_;\n        Device device_settings_;\n        std::shared_ptr<Logging> log_;\n        tcp::resolver resolver_;\n        std::optional<websocket::stream<beast::ssl_stream<beast::tcp_stream>>> ws_;\n        std::optional<websocket::stream<beast::tcp_stream>> ws_tcp_;\n        beast::flat_buffer buffer_;\n        std::string host_;\n        int socket_status_;\n    };\n};\n```",
      "#include <boost/beast/websocket.hpp>\n#include <boost/beast/ssl.hpp>\n#include <boost/beast/core.hpp>\n#include <boost/asio/ip/tcp.hpp>\n#include <boost/asio/ssl.hpp>\n#include <boost/system/error_code.hpp>\n#include <memory>\n#include <string>\n#include <optional>\n#include <thread>\n\nnamespace net = boost::asio;\nnamespace ssl = boost::asio::ssl;\nnamespace beast = boost::beast;\nnamespace websocket = boost::beast::websocket;\n\nclass WebOsClient {\npublic:\n    class Impl {\n    public:\n        Impl(net::io_context& ioc, ssl::context& ctx, Device& device_settings, std::shared_ptr<Logging> log)\n            : ioc_(ioc), ctx_(ctx), device_settings_(device_settings), log_(log),\n              resolver_(ioc), buffer_(), host_(\"\"), socket_status_(0) {}\n\n        void run() {\n            resolver_.async_resolve(host_, [this](beast::error_code ec, tcp::resolver::results_type results) {\n                onResolve(ec, results);\n            });\n        }\n\n        void onResolve(beast::error_code ec, tcp::resolver::results_type results) {\n            if (ec) return onError(ec, \"resolve\");\n            beast::get_lowest_layer(ws_.emplace(ioc_, ctx_)).async_connect(*results.begin(), [this](beast::error_code ec, tcp::resolver::results_type::endpoint_type ep) {\n                onConnect(ec, ep);\n            });\n        }\n\n        void onConnect(beast::error_code ec, tcp::resolver::results_type::endpoint_type ep) {\n            if (ec) return onError(ec, \"connect\");\n            if (ws_) {\n                ws_->next_layer().async_handshake(ssl::stream_base::client, [this](beast::error_code ec) {\n                    onSSLhandshake(ec);\n                });\n            } else {\n                ws_tcp_->async_handshake(websocket::stream_base::client, [this](beast::error_code ec) {\n                    onWinsockHandshake(ec);\n                });\n            }\n        }\n\n        void onSSLhandshake(beast::error_code ec) {\n            if (ec) return onError(ec, \"ssl handshake\");\n            ws_->async_handshake(host_, \"/ws\", [this](beast::error_code ec) {\n                onWinsockHandshake(ec);\n            });\n        }\n\n        void onWinsockHandshake(beast::error_code ec) {\n            if (ec) return onError(ec, \"websocket handshake\");\n            read();\n        }\n\n        void send(std::string id, std::string payload) {\n            std::string message = \"{\\\"id\\\":\\\"\" + id + \"\\\",\\\"payload\\\":\" + payload + \"}\";\n            if (ws_) {\n                ws_->async_write(net::buffer(message), [this](beast::error_code ec, std::size_t bytes_transferred) {\n                    onWrite(ec, bytes_transferred);\n                });\n            } else if (ws_tcp_) {\n                ws_tcp_->async_write(net::buffer(message), [this](beast::error_code ec, std::size_t bytes_transferred) {\n                    onWrite(ec, bytes_transferred);\n                });\n            }\n        }\n\n        void onWrite(beast::error_code ec, std::size_t bytes_transferred) {\n            if (ec) return onError(ec, \"write\");\n            read();\n        }\n\n        void read() {\n            ws_->async_read(buffer_, [this](beast::error_code ec, std::size_t bytes_transferred) {\n                onRead(ec, bytes_transferred);\n            });\n        }\n\n        void onRead(beast::error_code ec, std::size_t bytes_transferred) {\n            if (ec) return onError(ec, \"read\");\n            std::string data = beast::buffers_to_string(buffer_.data());\n            buffer_.consume(buffer_.size());\n            enqueueWork(data);\n            read();\n        }\n\n        void onError(beast::error_code& ec, std::string context) {\n            log_->error(\"Error in \" + context + \": \" + ec.message());\n            close();\n        }\n\n        void enqueueWork(std::string work) {\n            // Process the incoming message\n        }\n\n        void close() {\n            beast::error_code ec;\n            if (ws_) {\n                ws_->next_layer().shutdown(ec);\n                if (ec && ec != beast::errc::not_connected) {\n                    log_->error(\"SSL shutdown error: \" + ec.message());\n                }\n            } else if (ws_tcp_) {\n                ws_tcp_->close(ec);\n                if (ec && ec != beast::errc::not_connected) {\n                    log_->error(\"WebSocket close error: \" + ec.message());\n                }\n            }\n            socket_status_ = 0;\n        }\n\n    private:\n        net::io_context& ioc_;\n        ssl::context& ctx_;\n        Device& device_settings_;\n        std::shared_ptr<Logging> log_;\n        tcp::resolver resolver_;\n        std::optional<websocket::stream<beast::ssl_stream<beast::tcp_stream>>> ws_;\n        std::optional<websocket::stream<beast::tcp_stream>> ws_tcp_;\n        beast::flat_buffer buffer_;\n        std::string host_;\n        int socket_status_;\n    };\n};",
      "```cpp\n#include <boost/beast/websocket.hpp>\n#include <boost/beast/ssl.hpp>\n#include <boost/beast/core.hpp>\n#include <boost/asio/ip/tcp.hpp>\n#include <boost/asio/ssl.hpp>\n#include <boost/system/error_code.hpp>\n#include <memory>\n#include <string>\n#include <optional>\n#include <functional>\n\nnamespace net = boost::asio;\nnamespace ssl = boost::asio::ssl;\nnamespace beast = boost::beast;\nnamespace websocket = boost::beast::websocket;\n\nstruct Device {\n    std::string host;\n    int port;\n    bool use_ssl;\n};\n\nclass Logging {\npublic:\n    void info(const std::string& message) {}\n    void error(const std::string& message) {}\n};\n\nclass WebOsClient {\npublic:\n    class Impl {\n    public:\n        Impl(net::io_context& ioc, ssl::context& ctx, Device& device_settings, std::shared_ptr<Logging> log)\n            : ioc_(ioc), ctx_(ctx), device_settings_(device_settings), log_(log),\n              resolver_(ioc), buffer_(), host_(device_settings.host + \":\" + std::to_string(device_settings.port)),\n              socket_status_(0) {}\n\n        void run() {\n            resolver_.async_resolve(host_, \"\",\n                [this](beast::error_code ec, tcp::resolver::results_type results) {\n                    onResolve(ec, results);\n                });\n        }\n\n        void onResolve(beast::error_code ec, tcp::resolver::results_type results) {\n            if (ec) return onError(ec, \"resolve\");\n\n            beast::get_lowest_layer(ws_).async_connect(results,\n                [this](beast::error_code ec, tcp::resolver::results_type::endpoint_type) {\n                    onConnect(ec, {});\n                });\n        }\n\n        void onConnect(beast::error_code ec, tcp::resolver::results_type::endpoint_type) {\n            if (ec) return onError(ec, \"connect\");\n\n            if (device_settings_.use_ssl) {\n                beast::get_lowest_layer(ws_).next_layer().async_handshake(ssl::stream_base::client,\n                    [this](beast::error_code ec) {\n                        onSSLhandshake(ec);\n                    });\n            } else {\n                ws_tcp_->async_handshake(host_, \"/\",\n                    [this](beast::error_code ec) {\n                        onWinsockHandshake(ec);\n                    });\n            }\n        }\n\n        void onSSLhandshake(beast::error_code ec) {\n            if (ec) return onError(ec, \"SSL handshake\");\n\n            ws_->async_handshake(host_, \"/\",\n                [this](beast::error_code ec) {\n                    onWinsockHandshake(ec);\n                });\n        }\n\n        void onWinsockHandshake(beast::error_code ec) {\n            if (ec) return onError(ec, \"WebSocket handshake\");\n\n            read();\n        }\n\n        void send(std::string id, std::string payload) {\n            std::string message = id + payload;\n            ws_->async_write(net::buffer(message),\n                [this](beast::error_code ec, std::size_t bytes_transferred) {\n                    onWrite(ec, bytes_transferred);\n                });\n        }\n\n        void onWrite(beast::error_code ec, std::size_t bytes_transferred) {\n            if (ec) return onError(ec, \"write\");\n        }\n\n        void read() {\n            ws_->async_read(buffer_,\n                [this](beast::error_code ec, std::size_t bytes_transferred) {\n                    onRead(ec, bytes_transferred);\n                });\n        }\n\n        void onRead(beast::error_code ec, std::size_t bytes_transferred) {\n            if (ec) return onError(ec, \"read\");\n\n            read();\n        }\n\n        void onError(beast::error_code& ec, std::string context) {\n            log_->error(\"Error in \" + context + \": \" + ec.message());\n            close();\n        }\n\n        void enqueueWork(std::function<void()> work) {\n            ioc_.post(work);\n        }\n\n        void close() {\n            beast::error_code ec;\n            if (ws_) {\n                ws_->close(websocket::close_code::normal, ec);\n            } else if (ws_tcp_) {\n                ws_tcp_->close(websocket::close_code::normal, ec);\n            }\n            if (ec) log_->error(\"Close failed: \" + ec.message());\n        }\n\n    private:\n        net::io_context& ioc_;\n        ssl::context& ctx_;\n        Device device_settings_;\n        std::shared_ptr<Logging> log_;\n        tcp::resolver resolver_;\n        std::optional<websocket::stream<beast::ssl_stream<beast::tcp_stream>>> ws_;\n        std::optional<websocket::stream<beast::tcp_stream>> ws_tcp_;\n        beast::flat_buffer buffer_;\n        std::string host_;\n        int socket_status_;\n    };\n};\n```",
      "```cpp\n#include <boost/beast/websocket.hpp>\n#include <boost/beast/ssl.hpp>\n#include <boost/beast/core.hpp>\n#include <boost/asio.hpp>\n#include <boost/system/error_code.hpp>\n#include <memory>\n#include <string>\n#include <optional>\n#include <functional>\n\nnamespace net = boost::asio;\nnamespace ssl = boost::asio::ssl;\nnamespace beast = boost::beast;\nnamespace websocket = boost::beast::websocket;\n\nclass WebOsClient {\npublic:\n    class Impl {\n    public:\n        enum class SocketStatus {\n            Disconnected,\n            Connecting,\n            Connected\n        };\n\n        struct Device {\n            std::string host;\n            int port;\n            bool use_ssl;\n        };\n\n        using Logging = std::function<void(const std::string&)>;\n\n        Impl(net::io_context& ioc, ssl::context& ctx, const Device& device_settings, Logging log)\n            : ioc_(ioc),\n              ctx_(ctx),\n              device_settings_(device_settings),\n              log_(log),\n              resolver_(ioc),\n              buffer_(),\n              host_(device_settings.host + \":\" + std::to_string(device_settings.port)),\n              socket_status_(SocketStatus::Disconnected) {}\n\n        void run() {\n            resolver_.async_resolve(\n                host_,\n                [this](beast::error_code ec, tcp::resolver::results_type results) {\n                    onResolve(ec, std::move(results));\n                });\n        }\n\n        void send(std::string message) {\n            if (ws_) {\n                ws_->async_write(net::buffer(message),\n                    [this](beast::error_code ec, std::size_t bytes_transferred) {\n                        onWrite(ec, bytes_transferred);\n                    });\n            } else if (ws_tcp_) {\n                ws_tcp_->async_write(net::buffer(message),\n                    [this](beast::error_code ec, std::size_t bytes_transferred) {\n                        onWrite(ec, bytes_transferred);\n                    });\n            }\n        }\n\n        void read() {\n            if (ws_) {\n                ws_->async_read(buffer_,\n                    [this](beast::error_code ec, std::size_t bytes_transferred) {\n                        onRead(ec, bytes_transferred);\n                    });\n            } else if (ws_tcp_) {\n                ws_tcp_->async_read(buffer_,\n                    [this](beast::error_code ec, std::size_t bytes_transferred) {\n                        onRead(ec, bytes_transferred);\n                    });\n            }\n        }\n\n        void close() {\n            if (ws_) {\n                ws_->async_close(websocket::close_code::normal,\n                    [this](beast::error_code ec) {\n                        if (ec) onError(ec, \"WebSocket close failed\");\n                    });\n            } else if (ws_tcp_) {\n                ws_tcp_->async_close(websocket::close_code::normal,\n                    [this](beast::error_code ec) {\n                        if (ec) onError(ec, \"WebSocket close failed\");\n                    });\n            }\n        }\n\n    private:\n        void onResolve(beast::error_code ec, tcp::resolver::results_type results) {\n            if (ec) return onError(ec, \"Name resolve failed\");\n\n            auto ep = results.begin();\n            if (device_settings_.use_ssl) {\n                beast::ssl_stream<beast::tcp_stream> stream(ioc_, ctx_);\n                stream.next_layer().connect(*ep);\n                stream.handshake(ssl::stream_base::client);\n                ws_.emplace(std::move(stream));\n                ws_->set_option(websocket::stream_base::decorator(\n                    [](websocket::request_type& req) { req.set(http::field::user_agent, \"Boost.Beast\"); }));\n                ws_->async_handshake(host_, \"/\",\n                    [this](beast::error_code ec) {\n                        onWinsockHandshake(ec);\n                    });\n            } else {\n                ws_tcp_.emplace(tcp::socket(ioc_));\n                ws_tcp_->next_layer().connect(*ep);\n                ws_tcp_->set_option(websocket::stream_base::decorator(\n                    [](websocket::request_type& req) { req.set(http::field::user_agent, \"Boost.Beast\"); }));\n                ws_tcp_->async_handshake(host_, \"/\",\n                    [this](beast::error_code ec) {\n                        onWinsockHandshake(ec);\n                    });\n            }\n        }\n\n        void onConnect(beast::error_code ec, tcp::resolver::results_type::endpoint_type endpoint) {\n            if (ec) return onError(ec, \"TCP connect failed\");\n        }\n\n        void onSSLhandshake(beast::error_code ec) {\n            if (ec) return onError(ec, \"SSL handshake failed\");\n        }\n\n        void onWinsockHandshake(beast::error_code ec) {\n            if (ec) return onError(ec, \"WebSocket handshake failed\");\n            socket_status_ = SocketStatus::Connected;\n            read();\n        }\n\n        void onWrite(beast::error_code ec, std::size_t bytes_transferred) {\n            if (ec) return onError(ec, \"Write failed\");\n        }\n\n        void onRead(beast::error_code ec, std::size_t bytes_transferred) {\n            if (ec) return onError(ec, \"Read failed\");\n            std::string msg = beast::buffers_to_string(buffer_.data());\n            buffer_.consume(buffer_.size());\n            enqueueWork([msg, this]() {\n                // Process message\n            });\n            read();\n        }\n\n        void onError(beast::error_code& ec, const std::string& context) {\n            log_(\"Error in \" + context + \": \" + ec.message());\n            close();\n            socket_status_ = SocketStatus::Disconnected;\n        }\n\n        void enqueueWork(std::function<void()> work) {\n            ioc_.post(std::move(work));\n        }\n\n        net::io_context& ioc_;\n        ssl::context& ctx_;\n        Device device_settings_;\n        std::shared_ptr<Logging> log_;\n        tcp::resolver resolver_;\n        std::optional<websocket::stream<beast::ssl_stream<beast::tcp_stream>>> ws_;\n        std::optional<websocket::stream<beast::tcp_stream>> ws_tcp_;\n        beast::flat_buffer buffer_;\n        std::string host_;\n        SocketStatus socket_status_;\n    };\n};\n```",
      "```cpp\n#include <boost/beast/websocket.hpp>\n#include <boost/beast/ssl.hpp>\n#include <boost/beast/core.hpp>\n#include <boost/asio/connect.hpp>\n#include <boost/asio/ip/tcp.hpp>\n#include <boost/asio/ssl/stream.hpp>\n#include <boost/system/error_code.hpp>\n#include <memory>\n#include <string>\n#include <optional>\n#include <functional>\n\nnamespace net = boost::asio;\nnamespace ssl = boost::asio::ssl;\nnamespace beast = boost::beast;\nnamespace websocket = boost::beast::websocket;\n\nclass WebOsClient {\npublic:\n    class Impl {\n    public:\n        using Work = std::function<void()>;\n\n        Impl(net::io_context& ioc, ssl::context& ctx, const Device& device_settings, std::shared_ptr<Logging> log)\n            : ioc_(ioc),\n              ctx_(ctx),\n              device_settings_(device_settings),\n              log_(log),\n              resolver_(ioc),\n              buffer_(),\n              host_(\"\"),\n              socket_status_(0) {}\n\n        void run() {\n            host_ = device_settings_.host + \":\" + std::to_string(device_settings_.port);\n            resolver_.async_resolve(host_, \"http\",\n                [this](beast::error_code ec, tcp::resolver::results_type results) {\n                    onResolve(ec, results);\n                });\n        }\n\n        void send(const std::string& message) {\n            if (ws_) {\n                ws_->async_write(net::buffer(message),\n                    [this](beast::error_code ec, std::size_t bytes_transferred) {\n                        onWrite(ec, bytes_transferred);\n                    });\n            } else if (ws_tcp_) {\n                ws_tcp_->async_write(net::buffer(message),\n                    [this](beast::error_code ec, std::size_t bytes_transferred) {\n                        onWrite(ec, bytes_transferred);\n                    });\n            }\n        }\n\n        void read() {\n            if (ws_) {\n                ws_->async_read(buffer_,\n                    [this](beast::error_code ec, std::size_t bytes_transferred) {\n                        onRead(ec, bytes_transferred);\n                    });\n            } else if (ws_tcp_) {\n                ws_tcp_->async_read(buffer_,\n                    [this](beast::error_code ec, std::size_t bytes_transferred) {\n                        onRead(ec, bytes_transferred);\n                    });\n            }\n        }\n\n        void close() {\n            if (ws_) {\n                ws_->async_close(websocket::close_code::normal,\n                    [this](beast::error_code ec) {\n                        if (ec) onError(ec, \"WebSocket close failed\");\n                    });\n            } else if (ws_tcp_) {\n                ws_tcp_->async_close(websocket::close_code::normal,\n                    [this](beast::error_code ec) {\n                        if (ec) onError(ec, \"WebSocket close failed\");\n                    });\n            }\n        }\n\n    private:\n        void onResolve(beast::error_code ec, tcp::resolver::results_type results) {\n            if (ec) return onError(ec, \"Name resolve failed\");\n\n            beast::get_lowest_layer(*ws_).async_connect(results,\n                [this](beast::error_code ec, tcp::resolver::results_type::endpoint_type endpoint) {\n                    onConnect(ec, endpoint);\n                });\n        }\n\n        void onConnect(beast::error_code ec, tcp::resolver::results_type::endpoint_type endpoint) {\n            if (ec) return onError(ec, \"Connection failed\");\n\n            if (device_settings_.use_ssl) {\n                beast::get_lowest_layer(*ws_).next_layer().async_handshake(ssl::stream_base::client,\n                    [this](beast::error_code ec) {\n                        onSSLhandshake(ec);\n                    });\n            } else {\n                ws_tcp_->async_handshake(\"ws://localhost\",  // dummy URL for non-SSL\n                    [this](beast::error_code ec) {\n                        onWinsockHandshake(ec);\n                    });\n            }\n        }\n\n        void onSSLhandshake(beast::error_code ec) {\n            if (ec) return onError(ec, \"SSL handshake failed\");\n\n            ws_->async_handshake(host_, \"/\",\n                [this](beast::error_code ec) {\n                    onWinsockHandshake(ec);\n                });\n        }\n\n        void onWinsockHandshake(beast::error_code ec) {\n            if (ec) return onError(ec, \"WebSocket handshake failed\");\n\n            read();\n        }\n\n        void onWrite(beast::error_code ec, std::size_t bytes_transferred) {\n            if (ec) return onError(ec, \"Write failed\");\n\n            read();\n        }\n\n        void onRead(beast::error_code ec, std::size_t bytes_transferred) {\n            if (ec) return onError(ec, \"Read failed\");\n\n            std::string data{ beast::buffers_to_string(buffer_.data()) };\n            buffer_.consume(buffer_.size());\n\n            enqueueWork([data]() { /* process data */ });\n\n            read();\n        }\n\n        void onError(beast::error_code& ec, const std::string& msg) {\n            log_->error(msg + \": \" + ec.message());\n            close();\n        }\n\n        void enqueueWork(Work& work) {\n            ioc_.post(work);\n        }\n\n        net::io_context& ioc_;\n        ssl::context& ctx_;\n        const Device& device_settings_;\n        std::shared_ptr<Logging> log_;\n        tcp::resolver resolver_;\n        std::optional<websocket::stream<beast::ssl_stream<beast::tcp_stream>>> ws_;\n        std::optional<websocket::stream<beast::tcp_stream>> ws_tcp_;\n        beast::flat_buffer buffer_;\n        std::string host_;\n        int socket_status_;\n    };\n};\n```",
      "```cpp\n#include <boost/beast/websocket.hpp>\n#include <boost/beast/ssl.hpp>\n#include <boost/beast/core.hpp>\n#include <boost/asio/connect.hpp>\n#include <boost/asio/ip/tcp.hpp>\n#include <boost/asio/ssl/stream.hpp>\n#include <boost/system/error_code.hpp>\n#include <memory>\n#include <string>\n#include <optional>\n#include <functional>\n\nnamespace net = boost::asio;\nnamespace ssl = boost::asio::ssl;\nnamespace beast = boost::beast;\nnamespace websocket = boost::beast::websocket;\n\nclass WebOsClient {\npublic:\n    class Impl {\n    public:\n        enum SocketStatus {\n            Disconnected,\n            Connecting,\n            Connected\n        };\n\n        Impl(net::io_context& ioc, ssl::context& ctx, const Device& device_settings, std::shared_ptr<Logging> log)\n            : ioc_(ioc),\n              ctx_(ctx),\n              device_settings_(device_settings),\n              log_(log),\n              resolver_(ioc),\n              buffer_(),\n              host_(\"\"),\n              socket_status_(Disconnected) {}\n\n        void run() {\n            host_ = device_settings_.host + \":\" + std::to_string(device_settings_.port);\n            resolver_.async_resolve(host_, \"http\",\n                [this](beast::error_code ec, tcp::resolver::results_type results) {\n                    onResolve(ec, results);\n                });\n        }\n\n        void send(const std::string& message) {\n            if (ws_) {\n                ws_->async_write(net::buffer(message),\n                    [this](beast::error_code ec, std::size_t bytes_transferred) {\n                        onWrite(ec, bytes_transferred);\n                    });\n            } else if (ws_tcp_) {\n                ws_tcp_->async_write(net::buffer(message),\n                    [this](beast::error_code ec, std::size_t bytes_transferred) {\n                        onWrite(ec, bytes_transferred);\n                    });\n            }\n        }\n\n        void read() {\n            if (ws_) {\n                ws_->async_read(buffer_,\n                    [this](beast::error_code ec, std::size_t bytes_transferred) {\n                        onRead(ec, bytes_transferred);\n                    });\n            } else if (ws_tcp_) {\n                ws_tcp_->async_read(buffer_,\n                    [this](beast::error_code ec, std::size_t bytes_transferred) {\n                        onRead(ec, bytes_transferred);\n                    });\n            }\n        }\n\n        void close() {\n            if (ws_) {\n                ws_->async_close(websocket::close_code::normal,\n                    [this](beast::error_code ec) {\n                        if (ec) onError(ec, \"WebSocket close failed\");\n                    });\n            } else if (ws_tcp_) {\n                ws_tcp_->async_close(websocket::close_code::normal,\n                    [this](beast::error_code ec) {\n                        if (ec) onError(ec, \"WebSocket close failed\");\n                    });\n            }\n        }\n\n    private:\n        void onResolve(beast::error_code ec, tcp::resolver::results_type results) {\n            if (ec) return onError(ec, \"Name resolve failed\");\n\n            beast::get_lowest_layer(*ws_).async_connect(results,\n                [this](beast::error_code ec, tcp::resolver::results_type::endpoint_type endpoint) {\n                    onConnect(ec, endpoint);\n                });\n        }\n\n        void onConnect(beast::error_code ec, tcp::resolver::results_type::endpoint_type endpoint) {\n            if (ec) return onError(ec, \"Connection failed\");\n\n            if (device_settings_.use_ssl) {\n                beast::get_lowest_layer(*ws_).next_layer().async_handshake(ssl::stream_base::client,\n                    [this](beast::error_code ec) {\n                        onSSLhandshake(ec);\n                    });\n            } else {\n                ws_tcp_->async_handshake(\"ws://\", [this](beast::error_code ec) {\n                    onWinsockHandshake(ec);\n                });\n            }\n        }\n\n        void onSSLhandshake(beast::error_code ec) {\n            if (ec) return onError(ec, \"SSL handshake failed\");\n\n            ws_->async_handshake(host_, \"/\",\n                [this](beast::error_code ec) {\n                    onWinsockHandshake(ec);\n                });\n        }\n\n        void onWinsockHandshake(beast::error_code ec) {\n            if (ec) return onError(ec, \"WebSocket handshake failed\");\n\n            socket_status_ = Connected;\n            read();\n        }\n\n        void onWrite(beast::error_code ec, std::size_t bytes_transferred) {\n            if (ec) return onError(ec, \"Write failed\");\n\n            // Continue reading after write\n            read();\n        }\n\n        void onRead(beast::error_code ec, std::size_t bytes_transferred) {\n            if (ec) return onError(ec, \"Read failed\");\n\n            std::string data{ beast::buffers_to_string(buffer_.data()) };\n            buffer_.consume(buffer_.size());\n\n            enqueueWork(data);\n\n            read();\n        }\n\n        void onError(beast::error_code& ec, const std::string& msg) {\n            log_->error(msg + \": \" + ec.message());\n            close();\n            socket_status_ = Disconnected;\n        }\n\n        void enqueueWork(const std::string& work) {\n            // Process the received work\n        }\n\n        net::io_context& ioc_;\n        ssl::context& ctx_;\n        const Device& device_settings_;\n        std::shared_ptr<Logging> log_;\n        tcp::resolver resolver_;\n        std::optional<websocket::stream<beast::ssl_stream<beast::tcp_stream>>> ws_;\n        std::optional<websocket::stream<beast::tcp_stream>> ws_tcp_;\n        beast::flat_buffer buffer_;\n        std::string host_;\n        int socket_status_;\n    };\n};\n```",
      "```cpp\n#include <boost/beast/websocket.hpp>\n#include <boost/beast/ssl.hpp>\n#include <boost/beast/core.hpp>\n#include <boost/asio/ip/tcp.hpp>\n#include <boost/asio/ssl.hpp>\n#include <boost/system/error_code.hpp>\n#include <memory>\n#include <string>\n#include <optional>\n#include <functional>\n\nnamespace net = boost::asio;\nnamespace ssl = boost::asio::ssl;\nnamespace beast = boost::beast;\nnamespace websocket = boost::beast::websocket;\n\nclass WebOsClient {\npublic:\n    class Impl {\n    public:\n        Impl(net::io_context& ioc, ssl::context& ctx, const Device& device_settings, std::shared_ptr<Logging> log)\n            : ioc_(ioc), ctx_(ctx), device_settings_(device_settings), log_(log),\n              resolver_(ioc), buffer_(), host_(\"\"), socket_status_(0) {}\n\n        void run() {\n            host_ = device_settings_.host + \":\" + std::to_string(device_settings_.port);\n            resolver_.async_resolve(host_, \"http\", [this](beast::error_code ec, tcp::resolver::results_type results) {\n                onResolve(ec, results);\n            });\n        }\n\n        void send(const std::string& message) {\n            if (ws_) {\n                ws_->async_write(net::buffer(message), [this](beast::error_code ec, std::size_t bytes_transferred) {\n                    onWrite(ec, bytes_transferred);\n                });\n            } else if (ws_tcp_) {\n                ws_tcp_->async_write(net::buffer(message), [this](beast::error_code ec, std::size_t bytes_transferred) {\n                    onWrite(ec, bytes_transferred);\n                });\n            }\n        }\n\n        void read() {\n            if (ws_) {\n                ws_->async_read(buffer_, [this](beast::error_code ec, std::size_t bytes_transferred) {\n                    onRead(ec, bytes_transferred);\n                });\n            } else if (ws_tcp_) {\n                ws_tcp_->async_read(buffer_, [this](beast::error_code ec, std::size_t bytes_transferred) {\n                    onRead(ec, bytes_transferred);\n                });\n            }\n        }\n\n        void close() {\n            if (ws_) {\n                ws_->async_close(websocket::close_code::normal, [this](beast::error_code ec) {\n                    if (ec) onError(ec, \"WebSocket close failed\");\n                });\n            } else if (ws_tcp_) {\n                ws_tcp_->async_close(websocket::close_code::normal, [this](beast::error_code ec) {\n                    if (ec) onError(ec, \"WebSocket close failed\");\n                });\n            }\n        }\n\n    private:\n        void onResolve(beast::error_code ec, tcp::resolver::results_type results) {\n            if (!ec) {\n                beast::get_lowest_layer(*ws_).async_connect(results, [this](beast::error_code ec, tcp::endpoint endpoint) {\n                    onConnect(ec, endpoint);\n                });\n            } else {\n                onError(ec, \"Resolve failed\");\n            }\n        }\n\n        void onConnect(beast::error_code ec, tcp::endpoint endpoint) {\n            if (!ec) {\n                if (device_settings_.use_ssl) {\n                    beast::get_lowest_layer(*ws_).next_layer().async_handshake(ssl::stream_base::client, [this](beast::error_code ec) {\n                        onSSLhandshake(ec);\n                    });\n                } else {\n                    ws_tcp_->set_option(websocket::stream_base::decorator(\n                        [](websocket::request_type& req) { req.set(http::field::user_agent, \"WebOsClient\"); }));\n                    ws_tcp_->async_handshake(host_, \"/ws\", [this](beast::error_code ec) {\n                        onWinsockHandshake(ec);\n                    });\n                }\n            } else {\n                onError(ec, \"Connect failed\");\n            }\n        }\n\n        void onSSLhandshake(beast::error_code ec) {\n            if (!ec) {\n                ws_->async_handshake(host_, \"/ws\", [this](beast::error_code ec) {\n                    onWinsockHandshake(ec);\n                });\n            } else {\n                onError(ec, \"SSL handshake failed\");\n            }\n        }\n\n        void onWinsockHandshake(beast::error_code ec) {\n            if (!ec) {\n                read();\n            } else {\n                onError(ec, \"WebSocket handshake failed\");\n            }\n        }\n\n        void onWrite(beast::error_code ec, std::size_t bytes_transferred) {\n            if (!ec) {\n                // Handle write success\n            } else {\n                onError(ec, \"Write failed\");\n            }\n        }\n\n        void onRead(beast::error_code ec, std::size_t bytes_transferred) {\n            if (!ec) {\n                std::string msg = beast::buffers_to_string(buffer_.data());\n                buffer_.consume(buffer_.size());\n                enqueueWork(msg);\n                read();\n            } else if (ec != websocket::error::closed) {\n                onError(ec, \"Read failed\");\n            }\n        }\n\n        void onError(beast::error_code& ec, const std::string& context) {\n            log_->error(context + \": \" + ec.message());\n            close();\n        }\n\n        void enqueueWork(const Work& work) {\n            // Process the incoming work\n        }\n\n        net::io_context& ioc_;\n        ssl::context& ctx_;\n        const Device& device_settings_;\n        std::shared_ptr<Logging> log_;\n        tcp::resolver resolver_;\n        std::optional<websocket::stream<beast::ssl_stream<beast::tcp_stream>>> ws_;\n        std::optional<websocket::stream<beast::tcp_stream>> ws_tcp_;\n        beast::flat_buffer buffer_;\n        std::string host_;\n        int socket_status_;\n    };\n};\n```"
    ],
    "match_count": 1,
    "pass@3": 0.30000000000000004,
    "pass@5": 0.5
  },
  {
    "Task_id": 9,
    "Instruction": "Task Description: Implement a TCP client using Boost.Asio for asynchronous network communication, capable of connecting to a server, sending messages, and receiving responses.\n\nClass Description: The `chat_client` class encapsulates a TCP client that manages asynchronous network operations including connection establishment, message reading, and message writing.\n\nAttributes:\n- io_context_: boost::asio::io_context& - Reference to the I/O execution context for asynchronous operations.\n- socket_: tcp::socket - TCP socket for communication with the server.\n- read_msg_: chat_message - Buffer for storing the currently read message.\n- write_msgs_: chat_message_queue - Queue of messages waiting to be sent to the server.\n\nMethods:\n- Constructor: chat_client(boost::asio::io_context& io_context, const tcp::resolver::results_type& endpoints) -> None - Initializes the client with I/O context and server endpoints, then starts the connection process.\n- write: write(const chat_message& msg) -> None - Enqueues a message for asynchronous sending to the server.\n- close: close() -> None - Initiates socket closure to terminate the connection cleanly.\n- do_connect: do_connect(const tcp::resolver::results_type& endpoints) -> None - Asynchronously connects to the server using the provided endpoints.\n- do_read_header: do_read_header() -> None - Asynchronously reads the message header from the server.\n- do_read_body: do_read_body() -> None - Asynchronously reads the message body from the server after header is processed.\n- do_write: do_write() -> None - Asynchronously writes the next queued message to the server.",
    "Canonical_solution": "#include <boost/asio.hpp>\n#include <deque>\n#include \"chat_message.hpp\"\n\nusing boost::asio::ip::tcp;\ntypedef std::deque<chat_message> chat_message_queue;\n\nclass chat_client\n{\npublic:\n  chat_client(boost::asio::io_context& io_context,\n      const tcp::resolver::results_type& endpoints)\n    : io_context_(io_context),\n      socket_(io_context)\n  {\n    do_connect(endpoints);\n  }\n\n  void write(const chat_message& msg)\n  {\n    boost::asio::post(io_context_,\n        [this, msg]()\n        {\n          bool write_in_progress = !write_msgs_.empty();\n          write_msgs_.push_back(msg);\n          if (!write_in_progress)\n          {\n            do_write();\n          }\n        });\n  }\n\n  void close()\n  {\n    boost::asio::post(io_context_, [this]() { socket_.close(); });\n  }\n\nprivate:\n  void do_connect(const tcp::resolver::results_type& endpoints)\n  {\n    boost::asio::async_connect(socket_, endpoints,\n        [this](boost::system::error_code ec, tcp::endpoint)\n        {\n          if (!ec)\n          {\n            do_read_header();\n          }\n        });\n  }\n\n  void do_read_header()\n  {\n    boost::asio::async_read(socket_,\n        boost::asio::buffer(read_msg_.data(), chat_message::header_length),\n        [this](boost::system::error_code ec, std::size_t /*length*/)\n        {\n          if (!ec && read_msg_.decode_header())\n          {\n            do_read_body();\n          }\n          else\n          {\n            socket_.close();\n          }\n        });\n  }\n\n  void do_read_body()\n  {\n    boost::asio::async_read(socket_,\n        boost::asio::buffer(read_msg_.body(), read_msg_.body_length()),\n        [this](boost::system::error_code ec, std::size_t /*length*/)\n        {\n          if (!ec)\n          {\n            std::cout.write(read_msg_.body(), read_msg_.body_length());\n            std::cout << \"\\n\";\n            do_read_header();\n          }\n          else\n          {\n            socket_.close();\n          }\n        });\n  }\n\n  void do_write()\n  {\n    boost::asio::async_write(socket_,\n        boost::asio::buffer(write_msgs_.front().data(),\n          write_msgs_.front().length()),\n        [this](boost::system::error_code ec, std::size_t /*length*/)\n        {\n          if (!ec)\n          {\n            write_msgs_.pop_front();\n            if (!write_msgs_.empty())\n            {\n              do_write();\n            }\n          }\n          else\n          {\n            socket_.close();\n          }\n        });\n  }\n\nprivate:\n  boost::asio::io_context& io_context_;\n  tcp::socket socket_;\n  chat_message read_msg_;\n  chat_message_queue write_msgs_;\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 151,
    "matched_results": [
      "```cpp\n#include <boost/asio.hpp>\n#include <boost/bind.hpp>\n#include <queue>\n\nnamespace chat {\n    class chat_message {\n    public:\n        enum { header_length = 4 };\n        chat_message() : body_length_(0) {}\n        const char* data() const { return data_; }\n        char* data() { return data_; }\n        std::size_t length() const { return header_length + body_length_; }\n        const char* body() const { return data_ + header_length; }\n        char* body() { return data_ + header_length; }\n        std::size_t body_length() const { return body_length_; }\n        void body_length(std::size_t new_length)\n        {\n            body_length_ = new_length;\n            if (body_length_ > max_body_length)\n                body_length_ = max_body_length;\n        }\n        friend std::ostream& operator<<(std::ostream& os, const chat_message& msg)\n        {\n            os.write(msg.data(), msg.length());\n            return os;\n        }\n\n    private:\n        enum { max_body_length = 512 };\n        char data_[header_length + max_body_length];\n        std::size_t body_length_;\n    };\n\n    typedef std::queue<chat_message> chat_message_queue;\n\n    class chat_client {\n    public:\n        chat_client(boost::asio::io_context& io_context, const boost::asio::ip::tcp::resolver::results_type& endpoints)\n            : io_context_(io_context), socket_(io_context)\n        {\n            do_connect(endpoints);\n        }\n\n        void write(const chat_message& msg)\n        {\n            boost::asio::post(io_context_,\n                [this, msg]()\n                {\n                    bool write_in_progress = !write_msgs_.empty();\n                    write_msgs_.push(msg);\n                    if (!write_in_progress)\n                    {\n                        do_write();\n                    }\n                });\n        }\n\n        void close()\n        {\n            boost::asio::post(io_context_, [this]() { socket_.close(); });\n        }\n\n    private:\n        void do_connect(const boost::asio::ip::tcp::resolver::results_type& endpoints)\n        {\n            boost::asio::async_connect(socket_, endpoints,\n                [this](boost::system::error_code ec, const boost::asio::ip::tcp::endpoint&)\n                {\n                    if (!ec)\n                    {\n                        do_read_header();\n                    }\n                });\n        }\n\n        void do_read_header()\n        {\n            boost::asio::async_read(socket_,\n                boost::asio::buffer(read_msg_.data(), chat_message::header_length),\n                [this](boost::system::error_code ec, std::size_t /*length*/)\n                {\n                    if (!ec && read_msg_.body_length() > 0)\n                    {\n                        do_read_body();\n                    }\n                    else\n                    {\n                        socket_.close();\n                    }\n                });\n        }\n\n        void do_read_body()\n        {\n            boost::asio::async_read(socket_,\n                boost::asio::buffer(read_msg_.body(), read_msg_.body_length()),\n                [this](boost::system::error_code ec, std::size_t /*length*/)\n                {\n                    if (!ec)\n                    {\n                        do_read_header();\n                    }\n                    else\n                    {\n                        socket_.close();\n                    }\n                });\n        }\n\n        void do_write()\n        {\n            boost::asio::async_write(socket_,\n                boost::asio::buffer(write_msgs_.front().data(), write_msgs_.front().length()),\n                [this](boost::system::error_code ec, std::size_t /*length*/)\n                {\n                    if (!ec)\n                    {\n                        write_msgs_.pop();\n                        if (!write_msgs_.empty())\n                        {\n                            do_write();\n                        }\n                    }\n                    else\n                    {\n                        socket_.close();\n                    }\n                });\n        }\n\n        boost::asio::io_context& io_context_;\n        boost::asio::ip::tcp::socket socket_;\n        chat_message read_msg_;\n        chat_message_queue write_msgs_;\n    };\n} // namespace chat\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <queue>\n\nnamespace chat {\n    class chat_message {\n    public:\n        enum { header_length = 4 };\n        chat_message() : body_length_(0) {}\n        const char* data() const { return data_; }\n        char* data() { return data_; }\n        std::size_t length() const { return header_length + body_length_; }\n        const char* body() const { return data_ + header_length; }\n        char* body() { return data_ + header_length; }\n        std::size_t body_length() const { return body_length_; }\n        void body_length(std::size_t new_length)\n        {\n            body_length_ = new_length;\n            if (body_length_ > max_body_length)\n                body_length_ = max_body_length;\n        }\n        friend std::ostream& operator<<(std::ostream& os, const chat_message& msg)\n        {\n            os.write(msg.data(), msg.length());\n            return os;\n        }\n\n    private:\n        enum { max_body_length = 512 };\n        char data_[header_length + max_body_length];\n        std::size_t body_length_;\n    };\n\n    typedef std::deque<chat_message> chat_message_queue;\n\n    class chat_client {\n    public:\n        chat_client(boost::asio::io_context& io_context, const boost::asio::ip::tcp::resolver::results_type& endpoints)\n            : io_context_(io_context), socket_(io_context)\n        {\n            do_connect(endpoints);\n        }\n\n        void write(const chat_message& msg)\n        {\n            boost::asio::post(io_context_,\n                [this, msg]()\n                {\n                    bool write_in_progress = !write_msgs_.empty();\n                    write_msgs_.push_back(msg);\n                    if (!write_in_progress)\n                    {\n                        do_write();\n                    }\n                });\n        }\n\n        void close()\n        {\n            boost::asio::post(io_context_, [this]() { socket_.close(); });\n        }\n\n    private:\n        void do_connect(const boost::asio::ip::tcp::resolver::results_type& endpoints)\n        {\n            boost::asio::async_connect(socket_, endpoints,\n                [this](boost::system::error_code ec, const boost::asio::ip::tcp::endpoint&)\n                {\n                    if (!ec)\n                    {\n                        do_read_header();\n                    }\n                });\n        }\n\n        void do_read_header()\n        {\n            boost::asio::async_read(socket_,\n                boost::asio::buffer(read_msg_.data(), chat_message::header_length),\n                [this](boost::system::error_code ec, std::size_t /*length*/)\n                {\n                    if (!ec && read_msg_.body_length() > 0)\n                    {\n                        do_read_body();\n                    }\n                    else\n                    {\n                        socket_.close();\n                    }\n                });\n        }\n\n        void do_read_body()\n        {\n            boost::asio::async_read(socket_,\n                boost::asio::buffer(read_msg_.body(), read_msg_.body_length()),\n                [this](boost::system::error_code ec, std::size_t /*length*/)\n                {\n                    if (!ec)\n                    {\n                        do_read_header();\n                    }\n                    else\n                    {\n                        socket_.close();\n                    }\n                });\n        }\n\n        void do_write()\n        {\n            boost::asio::async_write(socket_,\n                boost::asio::buffer(write_msgs_.front().data(), write_msgs_.front().length()),\n                [this](boost::system::error_code ec, std::size_t /*length*/)\n                {\n                    if (!ec)\n                    {\n                        write_msgs_.pop_front();\n                        if (!write_msgs_.empty())\n                        {\n                            do_write();\n                        }\n                    }\n                    else\n                    {\n                        socket_.close();\n                    }\n                });\n        }\n\n        boost::asio::io_context& io_context_;\n        boost::asio::ip::tcp::socket socket_;\n        chat_message read_msg_;\n        chat_message_queue write_msgs_;\n    };\n} // namespace chat\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <queue>\n\nnamespace chat {\n    class chat_message {\n    public:\n        enum { header_length = 4 };\n        chat_message() : body_length_(0) {}\n        const char* data() const { return data_; }\n        char* data() { return data_; }\n        std::size_t length() const { return header_length + body_length_; }\n        const char* body() const { return data_ + header_length; }\n        char* body() { return data_ + header_length; }\n        std::size_t body_length() const { return body_length_; }\n        void body_length(std::size_t new_length)\n        {\n            body_length_ = new_length;\n            if (body_length_ > max_body_length)\n                body_length_ = max_body_length;\n        }\n        friend std::ostream& operator<<(std::ostream& os, const chat_message& msg)\n        {\n            os.write(msg.data(), msg.length());\n            return os;\n        }\n\n    private:\n        enum { max_body_length = 512 };\n        char data_[header_length + max_body_length];\n        std::size_t body_length_;\n    };\n\n    typedef std::queue<chat_message> chat_message_queue;\n\n    class chat_client {\n    public:\n        chat_client(boost::asio::io_context& io_context, const boost::asio::ip::tcp::resolver::results_type& endpoints)\n            : io_context_(io_context),\n              socket_(io_context)\n        {\n            do_connect(endpoints);\n        }\n\n        void write(const chat_message& msg)\n        {\n            bool write_in_progress = !write_msgs_.empty();\n            write_msgs_.push(msg);\n            if (!write_in_progress)\n            {\n                do_write();\n            }\n        }\n\n        void close()\n        {\n            boost::system::error_code ignored_error;\n            socket_.shutdown(boost::asio::ip::tcp::socket::shutdown_both, ignored_error);\n            socket_.close(ignored_error);\n        }\n\n    private:\n        void do_connect(const boost::asio::ip::tcp::resolver::results_type& endpoints)\n        {\n            boost::asio::async_connect(socket_, endpoints,\n                [this](boost::system::error_code ec, const boost::asio::ip::tcp::endpoint&)\n                {\n                    if (!ec)\n                    {\n                        do_read_header();\n                    }\n                });\n        }\n\n        void do_read_header()\n        {\n            boost::asio::async_read(socket_,\n                boost::asio::buffer(read_msg_.data(), chat_message::header_length),\n                [this](boost::system::error_code ec, std::size_t /*length*/)\n                {\n                    if (!ec && read_msg_.body_length() > 0)\n                    {\n                        do_read_body();\n                    }\n                    else\n                    {\n                        close();\n                    }\n                });\n        }\n\n        void do_read_body()\n        {\n            boost::asio::async_read(socket_,\n                boost::asio::buffer(read_msg_.body(), read_msg_.body_length()),\n                [this](boost::system::error_code ec, std::size_t /*length*/)\n                {\n                    if (!ec)\n                    {\n                        do_read_header();\n                    }\n                    else\n                    {\n                        close();\n                    }\n                });\n        }\n\n        void do_write()\n        {\n            boost::asio::async_write(socket_,\n                boost::asio::buffer(write_msgs_.front().data(), write_msgs_.front().length()),\n                [this](boost::system::error_code ec, std::size_t /*length*/)\n                {\n                    if (!ec)\n                    {\n                        write_msgs_.pop();\n                        if (!write_msgs_.empty())\n                        {\n                            do_write();\n                        }\n                    }\n                    else\n                    {\n                        close();\n                    }\n                });\n        }\n\n        boost::asio::io_context& io_context_;\n        boost::asio::ip::tcp::socket socket_;\n        chat_message read_msg_;\n        chat_message_queue write_msgs_;\n    };\n} // namespace chat\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <queue>\n\nusing boost::asio::ip::tcp;\n\nclass chat_message {\npublic:\n    enum { header_length = 4 };\n    chat_message() : body_length_(0) {}\n    const char* data() const { return data_; }\n    char* data() { return data_; }\n    std::size_t length() const { return header_length + body_length_; }\n    const char* body() const { return data_ + header_length; }\n    char* body() { return data_ + header_length; }\n    std::size_t body_length() const { return body_length_; }\n    void body_length(std::size_t new_length)\n    {\n        body_length_ = new_length;\n        if (body_length_ > max_body_length)\n            body_length_ = max_body_length;\n    }\n    friend std::ostream& operator<<(std::ostream& os, const chat_message& msg)\n    {\n        os.write(msg.data(), msg.length());\n        return os;\n    }\n\nprivate:\n    enum { max_body_length = 512 };\n    char data_[header_length + max_body_length];\n    std::size_t body_length_;\n};\n\ntypedef std::deque<chat_message> chat_message_queue;\n\nclass chat_client {\npublic:\n    chat_client(boost::asio::io_context& io_context, const tcp::resolver::results_type& endpoints)\n        : io_context_(io_context), socket_(io_context)\n    {\n        do_connect(endpoints);\n    }\n\n    void write(const chat_message& msg)\n    {\n        bool write_in_progress = !write_msgs_.empty();\n        write_msgs_.push_back(msg);\n        if (!write_in_progress)\n        {\n            do_write();\n        }\n    }\n\n    void close()\n    {\n        boost::system::error_code ignored_error;\n        socket_.shutdown(tcp::socket::shutdown_both, ignored_error);\n        socket_.close(ignored_error);\n    }\n\nprivate:\n    void do_connect(const tcp::resolver::results_type& endpoints)\n    {\n        boost::asio::async_connect(socket_, endpoints,\n            [this](boost::system::error_code ec, const tcp::endpoint&)\n            {\n                if (!ec)\n                {\n                    do_read_header();\n                }\n            });\n    }\n\n    void do_read_header()\n    {\n        boost::asio::async_read(socket_,\n            boost::asio::buffer(read_msg_.data(), chat_message::header_length),\n            [this](boost::system::error_code ec, std::size_t /*length*/)\n            {\n                if (!ec && read_msg_.body_length() > 0)\n                {\n                    do_read_body();\n                }\n                else\n                {\n                    close();\n                }\n            });\n    }\n\n    void do_read_body()\n    {\n        boost::asio::async_read(socket_,\n            boost::asio::buffer(read_msg_.body(), read_msg_.body_length()),\n            [this](boost::system::error_code ec, std::size_t /*length*/)\n            {\n                if (!ec)\n                {\n                    do_read_header();\n                }\n                else\n                {\n                    close();\n                }\n            });\n    }\n\n    void do_write()\n    {\n        boost::asio::async_write(socket_,\n            boost::asio::buffer(write_msgs_.front().data(), write_msgs_.front().length()),\n            [this](boost::system::error_code ec, std::size_t /*length*/)\n            {\n                if (!ec)\n                {\n                    write_msgs_.pop_front();\n                    if (!write_msgs_.empty())\n                    {\n                        do_write();\n                    }\n                }\n                else\n                {\n                    close();\n                }\n            });\n    }\n\n    boost::asio::io_context& io_context_;\n    tcp::socket socket_;\n    chat_message read_msg_;\n    chat_message_queue write_msgs_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <queue>\n\nusing boost::asio::ip::tcp;\n\nclass chat_message {\npublic:\n    enum { header_length = 4 };\n    chat_message() : body_length_(0) {}\n    const char* data() const { return data_; }\n    char* data() { return data_; }\n    std::size_t length() const { return header_length + body_length_; }\n    const char* body() const { return data_ + header_length; }\n    char* body() { return data_ + header_length; }\n    std::size_t body_length() const { return body_length_; }\n    void body_length(std::size_t new_length)\n    {\n        body_length_ = new_length;\n        if (body_length_ > max_body_length)\n            body_length_ = max_body_length;\n    }\n    friend std::ostream& operator<<(std::ostream& os, const chat_message& msg)\n    {\n        os.write(msg.data(), msg.length());\n        return os;\n    }\n\nprivate:\n    enum { max_body_length = 512 };\n    char data_[header_length + max_body_length];\n    std::size_t body_length_;\n};\n\ntypedef std::deque<chat_message> chat_message_queue;\n\nclass chat_client {\npublic:\n    chat_client(boost::asio::io_context& io_context, const tcp::resolver::results_type& endpoints)\n        : io_context_(io_context), socket_(io_context)\n    {\n        do_connect(endpoints);\n    }\n\n    void write(const chat_message& msg)\n    {\n        bool write_in_progress = !write_msgs_.empty();\n        write_msgs_.push_back(msg);\n        if (!write_in_progress)\n        {\n            do_write();\n        }\n    }\n\n    void close()\n    {\n        boost::system::error_code ignored_error;\n        socket_.shutdown(tcp::socket::shutdown_both, ignored_error);\n        socket_.close(ignored_error);\n    }\n\nprivate:\n    void do_connect(const tcp::resolver::results_type& endpoints)\n    {\n        boost::asio::async_connect(socket_, endpoints,\n            [this](boost::system::error_code ec, const tcp::endpoint&)\n            {\n                if (!ec)\n                {\n                    do_read_header();\n                }\n            });\n    }\n\n    void do_read_header()\n    {\n        boost::asio::async_read(socket_,\n            boost::asio::buffer(read_msg_.data(), chat_message::header_length),\n            [this](boost::system::error_code ec, std::size_t /*length*/)\n            {\n                if (!ec && read_msg_.body_length() > 0)\n                {\n                    do_read_body();\n                }\n                else\n                {\n                    close();\n                }\n            });\n    }\n\n    void do_read_body()\n    {\n        boost::asio::async_read(socket_,\n            boost::asio::buffer(read_msg_.body(), read_msg_.body_length()),\n            [this](boost::system::error_code ec, std::size_t /*length*/)\n            {\n                if (!ec)\n                {\n                    do_read_header();\n                }\n                else\n                {\n                    close();\n                }\n            });\n    }\n\n    void do_write()\n    {\n        boost::asio::async_write(socket_,\n            boost::asio::buffer(write_msgs_.front().data(), write_msgs_.front().length()),\n            [this](boost::system::error_code ec, std::size_t /*length*/)\n            {\n                if (!ec)\n                {\n                    write_msgs_.pop_front();\n                    if (!write_msgs_.empty())\n                    {\n                        do_write();\n                    }\n                }\n                else\n                {\n                    close();\n                }\n            });\n    }\n\n    boost::asio::io_context& io_context_;\n    tcp::socket socket_;\n    chat_message read_msg_;\n    chat_message_queue write_msgs_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <queue>\n\nusing boost::asio::ip::tcp;\n\nclass chat_message {\npublic:\n    enum { header_length = 4 };\n    chat_message() : body_length_(0) {}\n    const char* data() const { return data_; }\n    char* data() { return data_; }\n    std::size_t length() const { return header_length + body_length_; }\n    const char* body() const { return data_ + header_length; }\n    char* body() { return data_ + header_length; }\n    std::size_t body_length() const { return body_length_; }\n    void body_length(std::size_t new_length)\n    {\n        body_length_ = new_length;\n        if (body_length_ > max_body_length)\n            body_length_ = max_body_length;\n    }\n    friend std::ostream& operator<<(std::ostream& os, const chat_message& m)\n    {\n        os.write(m.data(), m.length());\n        return os;\n    }\n\nprivate:\n    enum { max_body_length = 512 };\n    char data_[header_length + max_body_length];\n    std::size_t body_length_;\n};\n\ntypedef std::deque<chat_message> chat_message_queue;\n\nclass chat_client {\npublic:\n    chat_client(boost::asio::io_context& io_context, const tcp::resolver::results_type& endpoints)\n        : io_context_(io_context), socket_(io_context)\n    {\n        do_connect(endpoints);\n    }\n\n    void write(const chat_message& msg)\n    {\n        boost::asio::post(io_context_,\n            [this, msg]()\n            {\n                bool write_in_progress = !write_msgs_.empty();\n                write_msgs_.push_back(msg);\n                if (!write_in_progress)\n                {\n                    do_write();\n                }\n            });\n    }\n\n    void close()\n    {\n        boost::asio::post(io_context_, [this]() { socket_.close(); });\n    }\n\nprivate:\n    void do_connect(const tcp::resolver::results_type& endpoints)\n    {\n        boost::asio::async_connect(socket_, endpoints,\n            [this](boost::system::error_code ec, const tcp::endpoint&)\n            {\n                if (!ec)\n                {\n                    do_read_header();\n                }\n            });\n    }\n\n    void do_read_header()\n    {\n        boost::asio::async_read(socket_,\n            boost::asio::buffer(read_msg_.data(), chat_message::header_length),\n            [this](boost::system::error_code ec, std::size_t /*length*/)\n            {\n                if (!ec && read_msg_.body_length() > 0)\n                {\n                    do_read_body();\n                }\n                else\n                {\n                    socket_.close();\n                }\n            });\n    }\n\n    void do_read_body()\n    {\n        boost::asio::async_read(socket_,\n            boost::asio::buffer(read_msg_.body(), read_msg_.body_length()),\n            [this](boost::system::error_code ec, std::size_t /*length*/)\n            {\n                if (!ec)\n                {\n                    do_read_header();\n                }\n                else\n                {\n                    socket_.close();\n                }\n            });\n    }\n\n    void do_write()\n    {\n        boost::asio::async_write(socket_,\n            boost::asio::buffer(write_msgs_.front().data(), write_msgs_.front().length()),\n            [this](boost::system::error_code ec, std::size_t /*length*/)\n            {\n                if (!ec)\n                {\n                    write_msgs_.pop_front();\n                    if (!write_msgs_.empty())\n                    {\n                        do_write();\n                    }\n                }\n                else\n                {\n                    socket_.close();\n                }\n            });\n    }\n\n    boost::asio::io_context& io_context_;\n    tcp::socket socket_;\n    chat_message read_msg_;\n    chat_message_queue write_msgs_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <boost/bind.hpp>\n#include <queue>\n\nnamespace chat {\n    class chat_message {\n    public:\n        enum { header_length = 4 };\n        chat_message() : body_length_(0) {}\n        const char* data() const { return data_; }\n        char* data() { return data_; }\n        std::size_t length() const { return header_length + body_length_; }\n        const char* body() const { return data_ + header_length; }\n        char* body() { return data_ + header_length; }\n        std::size_t body_length() const { return body_length_; }\n        void body_length(std::size_t new_length)\n        {\n            body_length_ = new_length;\n            if (body_length_ > max_body_length)\n                body_length_ = max_body_length;\n        }\n        friend std::ostream& operator<<(std::ostream& os, const chat_message& m)\n        {\n            os.write(m.data(), m.length());\n            return os;\n        }\n\n    private:\n        enum { max_body_length = 512 };\n        char data_[header_length + max_body_length];\n        std::size_t body_length_;\n    };\n\n    typedef std::queue<chat_message> chat_message_queue;\n\n    class chat_client {\n    public:\n        chat_client(boost::asio::io_context& io_context, const boost::asio::ip::tcp::resolver::results_type& endpoints)\n            : io_context_(io_context), socket_(io_context)\n        {\n            do_connect(endpoints);\n        }\n\n        void write(const chat_message& msg)\n        {\n            boost::asio::post(io_context_,\n                [this, msg]()\n                {\n                    bool write_in_progress = !write_msgs_.empty();\n                    write_msgs_.push(msg);\n                    if (!write_in_progress)\n                    {\n                        do_write();\n                    }\n                });\n        }\n\n        void close()\n        {\n            boost::asio::post(io_context_, [this]() { socket_.close(); });\n        }\n\n    private:\n        void do_connect(const boost::asio::ip::tcp::resolver::results_type& endpoints)\n        {\n            boost::asio::async_connect(socket_, endpoints,\n                [this](boost::system::error_code ec, const boost::asio::ip::tcp::endpoint&)\n                {\n                    if (!ec)\n                    {\n                        do_read_header();\n                    }\n                });\n        }\n\n        void do_read_header()\n        {\n            boost::asio::async_read(socket_,\n                boost::asio::buffer(read_msg_.data(), chat_message::header_length),\n                [this](boost::system::error_code ec, std::size_t /*length*/)\n                {\n                    if (!ec && read_msg_.body_length() > 0)\n                    {\n                        do_read_body();\n                    }\n                    else\n                    {\n                        socket_.close();\n                    }\n                });\n        }\n\n        void do_read_body()\n        {\n            boost::asio::async_read(socket_,\n                boost::asio::buffer(read_msg_.body(), read_msg_.body_length()),\n                [this](boost::system::error_code ec, std::size_t /*length*/)\n                {\n                    if (!ec)\n                    {\n                        do_read_header();\n                    }\n                    else\n                    {\n                        socket_.close();\n                    }\n                });\n        }\n\n        void do_write()\n        {\n            boost::asio::async_write(socket_,\n                boost::asio::buffer(write_msgs_.front().data(), write_msgs_.front().length()),\n                [this](boost::system::error_code ec, std::size_t /*length*/)\n                {\n                    if (!ec)\n                    {\n                        write_msgs_.pop();\n                        if (!write_msgs_.empty())\n                        {\n                            do_write();\n                        }\n                    }\n                    else\n                    {\n                        socket_.close();\n                    }\n                });\n        }\n\n        boost::asio::io_context& io_context_;\n        boost::asio::ip::tcp::socket socket_;\n        chat_message read_msg_;\n        chat_message_queue write_msgs_;\n    };\n} // namespace chat\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <queue>\n\nusing boost::asio::ip::tcp;\n\nclass chat_message {\npublic:\n    enum { header_length = 4 };\n    chat_message() : body_length_(0) {}\n    const char* data() const { return data_; }\n    char* data() { return data_; }\n    std::size_t length() const { return header_length + body_length_; }\n    const char* body() const { return data_ + header_length; }\n    char* body() { return data_ + header_length; }\n    std::size_t body_length() const { return body_length_; }\n    void body_length(std::size_t new_length)\n    {\n        body_length_ = new_length;\n        if (body_length_ > max_body_length)\n            body_length_ = max_body_length;\n    }\n    friend std::ostream& operator<<(std::ostream& os, const chat_message& msg)\n    {\n        os.write(msg.data(), msg.length());\n        return os;\n    }\n\nprivate:\n    enum { max_body_length = 512 };\n    char data_[header_length + max_body_length];\n    std::size_t body_length_;\n};\n\ntypedef std::deque<chat_message> chat_message_queue;\n\nclass chat_client {\npublic:\n    chat_client(boost::asio::io_context& io_context, const tcp::resolver::results_type& endpoints)\n        : io_context_(io_context), socket_(io_context)\n    {\n        do_connect(endpoints);\n    }\n\n    void write(const chat_message& msg)\n    {\n        bool write_in_progress = !write_msgs_.empty();\n        write_msgs_.push_back(msg);\n        if (!write_in_progress)\n        {\n            do_write();\n        }\n    }\n\n    void close()\n    {\n        boost::system::error_code ignored_error;\n        socket_.shutdown(tcp::socket::shutdown_both, ignored_error);\n        socket_.close(ignored_error);\n    }\n\nprivate:\n    void do_connect(const tcp::resolver::results_type& endpoints)\n    {\n        boost::asio::async_connect(socket_, endpoints,\n            [this](boost::system::error_code ec, const tcp::endpoint&)\n            {\n                if (!ec)\n                {\n                    do_read_header();\n                }\n            });\n    }\n\n    void do_read_header()\n    {\n        boost::asio::async_read(socket_,\n            boost::asio::buffer(read_msg_.data(), chat_message::header_length),\n            [this](boost::system::error_code ec, std::size_t /*length*/)\n            {\n                if (!ec && read_msg_.body_length() > 0)\n                {\n                    do_read_body();\n                }\n                else\n                {\n                    close();\n                }\n            });\n    }\n\n    void do_read_body()\n    {\n        boost::asio::async_read(socket_,\n            boost::asio::buffer(read_msg_.body(), read_msg_.body_length()),\n            [this](boost::system::error_code ec, std::size_t /*length*/)\n            {\n                if (!ec)\n                {\n                    do_read_header();\n                }\n                else\n                {\n                    close();\n                }\n            });\n    }\n\n    void do_write()\n    {\n        boost::asio::async_write(socket_,\n            boost::asio::buffer(write_msgs_.front().data(), write_msgs_.front().length()),\n            [this](boost::system::error_code ec, std::size_t /*length*/)\n            {\n                if (!ec)\n                {\n                    write_msgs_.pop_front();\n                    if (!write_msgs_.empty())\n                    {\n                        do_write();\n                    }\n                }\n                else\n                {\n                    close();\n                }\n            });\n    }\n\n    boost::asio::io_context& io_context_;\n    tcp::socket socket_;\n    chat_message read_msg_;\n    chat_message_queue write_msgs_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <queue>\n\nusing boost::asio::ip::tcp;\n\nclass chat_message {\npublic:\n    enum { header_length = 4 };\n    chat_message() : body_length_(0) {}\n    const char* data() const { return data_; }\n    char* data() { return data_; }\n    std::size_t length() const { return header_length + body_length_; }\n    const char* body() const { return data_ + header_length; }\n    char* body() { return data_ + header_length; }\n    std::size_t body_length() const { return body_length_; }\n    void body_length(std::size_t new_length)\n    {\n        body_length_ = new_length;\n        if (body_length_ > max_body_length)\n            body_length_ = max_body_length;\n    }\n    friend std::ostream& operator<<(std::ostream& os, const chat_message& m)\n    {\n        os.write(m.data(), m.length());\n        return os;\n    }\n\nprivate:\n    enum { max_body_length = 512 };\n    char data_[header_length + max_body_length];\n    std::size_t body_length_;\n};\n\ntypedef std::deque<chat_message> chat_message_queue;\n\nclass chat_client {\npublic:\n    chat_client(boost::asio::io_context& io_context, const tcp::resolver::results_type& endpoints)\n        : io_context_(io_context), socket_(io_context)\n    {\n        do_connect(endpoints);\n    }\n\n    void write(const chat_message& msg)\n    {\n        bool write_in_progress = !write_msgs_.empty();\n        write_msgs_.push_back(msg);\n        if (!write_in_progress)\n        {\n            do_write();\n        }\n    }\n\n    void close()\n    {\n        boost::system::error_code ignored_error;\n        socket_.shutdown(tcp::socket::shutdown_both, ignored_error);\n        socket_.close(ignored_error);\n    }\n\nprivate:\n    void do_connect(const tcp::resolver::results_type& endpoints)\n    {\n        boost::asio::async_connect(socket_, endpoints,\n            [this](boost::system::error_code ec, const tcp::endpoint&)\n            {\n                if (!ec)\n                {\n                    do_read_header();\n                }\n            });\n    }\n\n    void do_read_header()\n    {\n        boost::asio::async_read(socket_,\n            boost::asio::buffer(read_msg_.data(), chat_message::header_length),\n            [this](boost::system::error_code ec, std::size_t /*length*/)\n            {\n                if (!ec && read_msg_.body_length() > 0)\n                {\n                    do_read_body();\n                }\n                else\n                {\n                    close();\n                }\n            });\n    }\n\n    void do_read_body()\n    {\n        boost::asio::async_read(socket_,\n            boost::asio::buffer(read_msg_.body(), read_msg_.body_length()),\n            [this](boost::system::error_code ec, std::size_t /*length*/)\n            {\n                if (!ec)\n                {\n                    do_read_header();\n                }\n                else\n                {\n                    close();\n                }\n            });\n    }\n\n    void do_write()\n    {\n        boost::asio::async_write(socket_,\n            boost::asio::buffer(write_msgs_.front().data(), write_msgs_.front().length()),\n            [this](boost::system::error_code ec, std::size_t /*length*/)\n            {\n                if (!ec)\n                {\n                    write_msgs_.pop_front();\n                    if (!write_msgs_.empty())\n                    {\n                        do_write();\n                    }\n                }\n                else\n                {\n                    close();\n                }\n            });\n    }\n\n    boost::asio::io_context& io_context_;\n    tcp::socket socket_;\n    chat_message read_msg_;\n    chat_message_queue write_msgs_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <queue>\n\nusing boost::asio::ip::tcp;\n\nclass chat_message {\npublic:\n    enum { header_length = 4 };\n    chat_message() : body_length_(0) {}\n    const char* data() const { return data_; }\n    char* data() { return data_; }\n    std::size_t length() const { return header_length + body_length_; }\n    const char* body() const { return data_ + header_length; }\n    char* body() { return data_ + header_length; }\n    std::size_t body_length() const { return body_length_; }\n    void body_length(std::size_t new_length)\n    {\n        body_length_ = new_length;\n        if (body_length_ > max_body_length)\n            body_length_ = max_body_length;\n    }\n    friend std::ostream& operator<<(std::ostream& os, const chat_message& msg)\n    {\n        os.write(msg.data(), msg.length());\n        return os;\n    }\n\nprivate:\n    enum { max_body_length = 512 };\n    char data_[header_length + max_body_length];\n    std::size_t body_length_;\n};\n\ntypedef std::deque<chat_message> chat_message_queue;\n\nclass chat_client {\npublic:\n    chat_client(boost::asio::io_context& io_context, const tcp::resolver::results_type& endpoints)\n        : io_context_(io_context), socket_(io_context)\n    {\n        do_connect(endpoints);\n    }\n\n    void write(const chat_message& msg)\n    {\n        bool write_in_progress = !write_msgs_.empty();\n        write_msgs_.push_back(msg);\n        if (!write_in_progress)\n        {\n            do_write();\n        }\n    }\n\n    void close()\n    {\n        boost::system::error_code ignored_error;\n        socket_.shutdown(tcp::socket::shutdown_both, ignored_error);\n        socket_.close(ignored_error);\n    }\n\nprivate:\n    void do_connect(const tcp::resolver::results_type& endpoints)\n    {\n        boost::asio::async_connect(socket_, endpoints,\n            [this](boost::system::error_code ec, const tcp::endpoint&)\n            {\n                if (!ec)\n                {\n                    do_read_header();\n                }\n            });\n    }\n\n    void do_read_header()\n    {\n        boost::asio::async_read(socket_,\n            boost::asio::buffer(read_msg_.data(), chat_message::header_length),\n            [this](boost::system::error_code ec, std::size_t /*length*/)\n            {\n                if (!ec && read_msg_.body_length() > 0)\n                {\n                    do_read_body();\n                }\n                else\n                {\n                    close();\n                }\n            });\n    }\n\n    void do_read_body()\n    {\n        boost::asio::async_read(socket_,\n            boost::asio::buffer(read_msg_.body(), read_msg_.body_length()),\n            [this](boost::system::error_code ec, std::size_t /*length*/)\n            {\n                if (!ec)\n                {\n                    do_read_header();\n                }\n                else\n                {\n                    close();\n                }\n            });\n    }\n\n    void do_write()\n    {\n        boost::asio::async_write(socket_,\n            boost::asio::buffer(write_msgs_.front().data(), write_msgs_.front().length()),\n            [this](boost::system::error_code ec, std::size_t /*length*/)\n            {\n                if (!ec)\n                {\n                    write_msgs_.pop_front();\n                    if (!write_msgs_.empty())\n                    {\n                        do_write();\n                    }\n                }\n                else\n                {\n                    close();\n                }\n            });\n    }\n\n    boost::asio::io_context& io_context_;\n    tcp::socket socket_;\n    chat_message read_msg_;\n    chat_message_queue write_msgs_;\n};\n```"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  }
]