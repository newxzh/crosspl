[
  {
    "Task_id": 1,
    "Instruction": "Task Description: Create a function that performs HTTP requests using the cpp-httplib library, supporting multiple HTTP methods (GET, PUT, DELETE, POST) and handling JSON request/response data.\n\nFunction Description: The function `APIRequest` performs HTTP requests to a specified URL using the given HTTP method. It supports sending JSON data in the request and parsing JSON data from the response. The function checks the HTTP status code and only processes the response body if the status indicates success (2xx).\n\nInput:\n- `method` (std::string): The HTTP method to use (e.g., \"GET\", \"PUT\", \"DELETE\", \"POST\").\n- `location` (std::string): The server address (e.g., \"example.com\").\n- `URI` (std::string): The URI path for the request (e.g., \"/api/data\").\n- `request_data` (json*, optional): Pointer to a JSON object containing the data to send with the request (used for PUT requests).\n- `response_data` (json*, optional): Pointer to a JSON object where the response data will be stored if the request is successful.\n\nOutput:\n- Returns a `long` value representing the HTTP status code of the response.\n- If the request is successful (status code 2xx) and `response_data` is provided, the response body is parsed into the `response_data` JSON object.",
    "Canonical_solution": "#include \"httplib.h\"\n#include <string>\n#include \"json.hpp\"\nusing json = nlohmann::json;\n\nlong APIRequest(std::string method, std::string location, std::string URI, json* request_data = nullptr, json* response_data = nullptr)\n{\n    const std::string url(\"http://\" + location);\n    httplib::Client client(url.c_str());\n    int             status  = 0;\n    std::string     body    = \"\";\n\n    if(method == \"GET\")\n    {\n        httplib::Result result = client.Get(URI.c_str());\n        if(httplib::Error::Success == result.error())\n        {\n            status  = result->status;\n            body    = result->body;\n        }\n    }\n    else if(method == \"PUT\")\n    {\n        if(request_data)\n        {\n            httplib::Result result = client.Put(URI.c_str(), request_data->dump(), \"application/json\");\n            if(httplib::Error::Success == result.error())\n            {\n                status  = result->status;\n                body    = result->body;\n            }\n        }\n        else\n        {\n            httplib::Result result = client.Put(URI.c_str());\n            if(httplib::Error::Success == result.error())\n            {\n                status  = result->status;\n                body    = result->body;\n            }\n        }\n    }\n    else if(method == \"DELETE\")\n    {\n        httplib::Result result = client.Delete(URI.c_str());\n        if(httplib::Error::Success == result.error())\n        {\n            status  = result->status;\n            body    = result->body;\n        }\n    }\n    else if(method == \"POST\")\n    {\n        httplib::Result result = client.Post(URI.c_str());\n        if(httplib::Error::Success == result.error())\n        {\n            status  = result->status;\n            body    = result->body;\n        }\n    }\n\n    if((status / 100) == 2)\n    {\n        if(response_data)\n        {\n            *response_data = json::parse(body);\n        }\n    }\n\n    return status;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 147,
    "matched_results": [],
    "unmatched_results": [
      "#include <httplib.h>\n#include <nlohmann/json.hpp>\n#include <string>\n\nusing json = nlohmann::json;\n\nlong APIRequest(const std::string& method, const std::string& location, const std::string& URI, const json* request_data = nullptr, json* response_data = nullptr) {\n    httplib::Client client(location.c_str());\n    httplib::Headers headers = { {\"Content-Type\", \"application/json\"} };\n    httplib::Result res;\n\n    if (method == \"GET\") {\n        res = client.Get(URI.c_str(), headers);\n    } else if (method == \"POST\") {\n        if (request_data) {\n            res = client.Post(URI.c_str(), headers, request_data->dump(), \"application/json\");\n        } else {\n            res = client.Post(URI.c_str(), headers);\n        }\n    } else if (method == \"PUT\") {\n        if (request_data) {\n            res = client.Put(URI.c_str(), headers, request_data->dump(), \"application/json\");\n        } else {\n            res = client.Put(URI.c_str(), headers);\n        }\n    } else if (method == \"DELETE\") {\n        res = client.Delete(URI.c_str(), headers);\n    } else {\n        return -1; // Invalid method\n    }\n\n    if (res && res->status >= 200 && res->status < 300) {\n        if (response_data && !res->body.empty()) {\n            *response_data = json::parse(res->body);\n        }\n    }\n\n    return res ? res->status : -1;\n}",
      "#include <httplib.h>\n#include <nlohmann/json.hpp>\n#include <string>\n\nusing json = nlohmann::json;\n\nlong APIRequest(const std::string& method, const std::string& location, const std::string& URI, const json* request_data = nullptr, json* response_data = nullptr) {\n    httplib::Client cli(location.c_str());\n    httplib::Headers headers = { {\"Content-Type\", \"application/json\"} };\n    httplib::Result res;\n\n    if (method == \"GET\") {\n        res = cli.Get(URI.c_str(), headers);\n    } else if (method == \"POST\") {\n        if (request_data) {\n            res = cli.Post(URI.c_str(), headers, request_data->dump(), \"application/json\");\n        } else {\n            res = cli.Post(URI.c_str(), headers, \"\", \"application/json\");\n        }\n    } else if (method == \"PUT\") {\n        if (request_data) {\n            res = cli.Put(URI.c_str(), headers, request_data->dump(), \"application/json\");\n        } else {\n            res = cli.Put(URI.c_str(), headers, \"\", \"application/json\");\n        }\n    } else if (method == \"DELETE\") {\n        res = cli.Delete(URI.c_str(), headers);\n    } else {\n        return -1; // Unsupported method\n    }\n\n    if (res && res->status >= 200 && res->status < 300) {\n        if (response_data) {\n            *response_data = json::parse(res->body);\n        }\n    }\n\n    return res ? res->status : -1;\n}",
      "#include <httplib.h>\n#include <nlohmann/json.hpp>\n\nusing json = nlohmann::json;\n\nlong APIRequest(const std::string& method, const std::string& location, const std::string& URI, const json* request_data = nullptr, json* response_data = nullptr) {\n    httplib::Client cli(location.c_str());\n    httplib::Headers headers = { {\"Content-Type\", \"application/json\"} };\n    httplib::Result res;\n\n    if (method == \"GET\") {\n        res = cli.Get(URI.c_str(), headers);\n    } else if (method == \"POST\") {\n        if (request_data) {\n            res = cli.Post(URI.c_str(), headers, request_data->dump(), \"application/json\");\n        } else {\n            res = cli.Post(URI.c_str(), headers, \"\", \"application/json\");\n        }\n    } else if (method == \"PUT\") {\n        if (request_data) {\n            res = cli.Put(URI.c_str(), headers, request_data->dump(), \"application/json\");\n        } else {\n            res = cli.Put(URI.c_str(), headers, \"\", \"application/json\");\n        }\n    } else if (method == \"DELETE\") {\n        res = cli.Delete(URI.c_str(), headers);\n    } else {\n        return -1; // Unsupported method\n    }\n\n    if (res && res->status >= 200 && res->status < 300) {\n        if (response_data) {\n            *response_data = json::parse(res->body);\n        }\n    }\n\n    return res ? res->status : -1;\n}",
      "#include <httplib.h>\n#include <nlohmann/json.hpp>\n#include <string>\n\nusing json = nlohmann::json;\n\nlong APIRequest(const std::string &method, const std::string &location, const std::string &URI, const json *request_data = nullptr, json *response_data = nullptr) {\n    httplib::Client cli(location.c_str());\n    httplib::Headers headers = {{\"Content-Type\", \"application/json\"}};\n    httplib::Result res;\n\n    if (method == \"GET\") {\n        res = cli.Get(URI.c_str(), headers);\n    } else if (method == \"POST\") {\n        if (request_data) {\n            res = cli.Post(URI.c_str(), headers, request_data->dump(), \"application/json\");\n        } else {\n            res = cli.Post(URI.c_str(), headers, \"\", \"application/json\");\n        }\n    } else if (method == \"PUT\") {\n        if (request_data) {\n            res = cli.Put(URI.c_str(), headers, request_data->dump(), \"application/json\");\n        } else {\n            res = cli.Put(URI.c_str(), headers, \"\", \"application/json\");\n        }\n    } else if (method == \"DELETE\") {\n        res = cli.Delete(URI.c_str(), headers);\n    } else {\n        return -1; // Invalid method\n    }\n\n    if (res) {\n        long status = res->status;\n        if (status >= 200 && status < 300) {\n            if (response_data && res->body.size() > 0) {\n                *response_data = json::parse(res->body);\n            }\n        }\n        return status;\n    } else {\n        return -1; // Request failed\n    }\n}",
      "#include <httplib.h>\n#include <nlohmann/json.hpp>\n#include <string>\n\nusing json = nlohmann::json;\n\nlong APIRequest(const std::string& method, const std::string& location, const std::string& URI, const json* request_data = nullptr, json* response_data = nullptr) {\n    httplib::Client cli(location.c_str());\n    httplib::Headers headers = { {\"Content-Type\", \"application/json\"} };\n    httplib::Result res;\n\n    if (method == \"GET\") {\n        res = cli.Get(URI.c_str(), headers);\n    } else if (method == \"POST\") {\n        if (request_data) {\n            res = cli.Post(URI.c_str(), headers, request_data->dump(), \"application/json\");\n        } else {\n            res = cli.Post(URI.c_str(), headers, \"\", \"application/json\");\n        }\n    } else if (method == \"PUT\") {\n        if (request_data) {\n            res = cli.Put(URI.c_str(), headers, request_data->dump(), \"application/json\");\n        } else {\n            res = cli.Put(URI.c_str(), headers, \"\", \"application/json\");\n        }\n    } else if (method == \"DELETE\") {\n        res = cli.Delete(URI.c_str(), headers);\n    } else {\n        return -1; // Unsupported method\n    }\n\n    if (res && res->status >= 200 && res->status < 300) {\n        if (response_data) {\n            *response_data = json::parse(res->body);\n        }\n    }\n\n    return res ? res->status : -1;\n}",
      "#include <httplib.h>\n#include <nlohmann/json.hpp>\n#include <string>\n\nusing json = nlohmann::json;\n\nlong APIRequest(const std::string& method, const std::string& location, const std::string& URI, const json* request_data = nullptr, json* response_data = nullptr) {\n    httplib::Client cli(location.c_str());\n    httplib::Headers headers = { {\"Content-Type\", \"application/json\"} };\n    httplib::Result res;\n\n    if (method == \"GET\") {\n        res = cli.Get(URI.c_str(), headers);\n    } else if (method == \"POST\") {\n        if (request_data) {\n            res = cli.Post(URI.c_str(), headers, request_data->dump(), \"application/json\");\n        } else {\n            res = cli.Post(URI.c_str(), headers, \"\", \"application/json\");\n        }\n    } else if (method == \"PUT\") {\n        if (request_data) {\n            res = cli.Put(URI.c_str(), headers, request_data->dump(), \"application/json\");\n        } else {\n            res = cli.Put(URI.c_str(), headers, \"\", \"application/json\");\n        }\n    } else if (method == \"DELETE\") {\n        res = cli.Delete(URI.c_str(), headers);\n    } else {\n        return -1; // Unsupported method\n    }\n\n    if (res && res->status >= 200 && res->status < 300) {\n        if (response_data) {\n            *response_data = json::parse(res->body);\n        }\n    }\n\n    return res ? res->status : -1;\n}",
      "#include <httplib.h>\n#include <nlohmann/json.hpp>\n#include <string>\n\nusing json = nlohmann::json;\n\nlong APIRequest(const std::string& method, const std::string& location, const std::string& URI, const json* request_data = nullptr, json* response_data = nullptr) {\n    httplib::Client cli(location.c_str());\n    httplib::Result res;\n\n    if (method == \"GET\") {\n        res = cli.Get(URI.c_str());\n    } else if (method == \"POST\") {\n        if (request_data) {\n            res = cli.Post(URI.c_str(), request_data->dump(), \"application/json\");\n        } else {\n            res = cli.Post(URI.c_str(), \"\", \"application/json\");\n        }\n    } else if (method == \"PUT\") {\n        if (request_data) {\n            res = cli.Put(URI.c_str(), request_data->dump(), \"application/json\");\n        } else {\n            res = cli.Put(URI.c_str(), \"\", \"application/json\");\n        }\n    } else if (method == \"DELETE\") {\n        res = cli.Delete(URI.c_str());\n    } else {\n        return -1; // Unsupported method\n    }\n\n    if (res) {\n        if (res->status >= 200 && res->status < 300) {\n            if (response_data) {\n                *response_data = json::parse(res->body);\n            }\n        }\n        return res->status;\n    } else {\n        return -1; // Request failed\n    }\n}",
      "#include <httplib.h>\n#include <nlohmann/json.hpp>\n\nusing json = nlohmann::json;\n\nlong APIRequest(const std::string& method, const std::string& location, const std::string& URI, const json* request_data = nullptr, json* response_data = nullptr) {\n    httplib::Client cli(location.c_str());\n    httplib::Headers headers = { {\"Content-Type\", \"application/json\"} };\n    httplib::Result res;\n\n    if (method == \"GET\") {\n        res = cli.Get(URI.c_str(), headers);\n    } else if (method == \"POST\") {\n        if (request_data) {\n            res = cli.Post(URI.c_str(), headers, request_data->dump(), \"application/json\");\n        } else {\n            res = cli.Post(URI.c_str(), headers, \"\", \"application/json\");\n        }\n    } else if (method == \"PUT\") {\n        if (request_data) {\n            res = cli.Put(URI.c_str(), headers, request_data->dump(), \"application/json\");\n        } else {\n            res = cli.Put(URI.c_str(), headers, \"\", \"application/json\");\n        }\n    } else if (method == \"DELETE\") {\n        res = cli.Delete(URI.c_str(), headers);\n    } else {\n        return -1; // Unsupported method\n    }\n\n    if (res && res->status >= 200 && res->status < 300) {\n        if (response_data) {\n            *response_data = json::parse(res->body);\n        }\n    }\n\n    return res ? res->status : -1;\n}",
      "#include <httplib.h>\n#include <nlohmann/json.hpp>\n\nusing json = nlohmann::json;\n\nlong APIRequest(const std::string& method, const std::string& location, const std::string& URI, const json* request_data = nullptr, json* response_data = nullptr) {\n    httplib::Client cli(location.c_str());\n    httplib::Headers headers = { {\"Content-Type\", \"application/json\"} };\n    httplib::Result res;\n\n    if (method == \"GET\") {\n        res = cli.Get(URI.c_str(), headers);\n    } else if (method == \"POST\") {\n        if (request_data) {\n            res = cli.Post(URI.c_str(), headers, request_data->dump(), \"application/json\");\n        } else {\n            res = cli.Post(URI.c_str(), headers, \"\", \"application/json\");\n        }\n    } else if (method == \"PUT\") {\n        if (request_data) {\n            res = cli.Put(URI.c_str(), headers, request_data->dump(), \"application/json\");\n        } else {\n            res = cli.Put(URI.c_str(), headers, \"\", \"application/json\");\n        }\n    } else if (method == \"DELETE\") {\n        res = cli.Delete(URI.c_str(), headers);\n    } else {\n        return -1; // Unsupported method\n    }\n\n    if (res && res->status >= 200 && res->status < 300) {\n        if (response_data) {\n            *response_data = json::parse(res->body);\n        }\n    }\n\n    return res ? res->status : -1;\n}",
      "#include <httplib.h>\n#include <nlohmann/json.hpp>\n#include <string>\n\nusing json = nlohmann::json;\n\nlong APIRequest(const std::string& method, const std::string& location, const std::string& URI, const json* request_data = nullptr, json* response_data = nullptr) {\n    httplib::Client client(location.c_str());\n    httplib::Result res;\n\n    if (method == \"GET\") {\n        res = client.Get(URI.c_str());\n    } else if (method == \"POST\") {\n        if (request_data) {\n            res = client.Post(URI.c_str(), request_data->dump(), \"application/json\");\n        } else {\n            res = client.Post(URI.c_str(), \"\", \"application/json\");\n        }\n    } else if (method == \"PUT\") {\n        if (request_data) {\n            res = client.Put(URI.c_str(), request_data->dump(), \"application/json\");\n        } else {\n            res = client.Put(URI.c_str(), \"\", \"application/json\");\n        }\n    } else if (method == \"DELETE\") {\n        res = client.Delete(URI.c_str());\n    } else {\n        return -1; // Invalid method\n    }\n\n    if (res && res->status >= 200 && res->status < 300) {\n        if (response_data) {\n            *response_data = json::parse(res->body);\n        }\n    }\n\n    return res ? res->status : -1;\n}"
    ],
    "match_count": 0,
    "pass@3": 0.0,
    "pass@5": 0.0
  },
  {
    "Task_id": 10,
    "Instruction": "Task Description: Implement a TCP client in C++ that can establish a connection to a server, send messages, and receive responses.\n\nFunction Description: The code consists of two functions that together implement a basic TCP client. The first function creates and connects the socket, while the second handles the communication loop with the server.\n\nInput:\n- create_tcp_client:\n  - server_ip: const char* - The IP address of the server to connect to\n  - port: int - The port number of the server to connect to\n- tcp_client_communication:\n  - sockfd: int - The socket file descriptor returned by create_tcp_client\n\nOutput:\n- create_tcp_client:\n  - Returns: int - The socket file descriptor if successful, -1 if failed\n- tcp_client_communication:\n  - No return value (void), but prints server responses and error messages to console",
    "Canonical_solution": "#include <sys/socket.h>\n#include <arpa/inet.h>\n#include <string.h>\n#include <unistd.h>\n\nint create_tcp_client(const char* server_ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if(sockfd == -1) return -1;\n\n    struct sockaddr_in serv_addr;\n    bzero(&serv_addr, sizeof(serv_addr));\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_addr.s_addr = inet_addr(server_ip);\n    serv_addr.sin_port = htons(port);\n\n    if(connect(sockfd, (sockaddr*)&serv_addr, sizeof(serv_addr)) == -1) {\n        close(sockfd);\n        return -1;\n    }\n    \n    return sockfd;\n}\n\nvoid tcp_client_communication(int sockfd) {\n    while(true){\n        char buf[1024];\n        bzero(&buf, sizeof(buf));\n        scanf(\"%s\", buf);\n        ssize_t write_bytes = write(sockfd, buf, sizeof(buf));\n        if(write_bytes == -1){\n            printf(\"socket already disconnected, can't write any more!\\n\");\n            break;\n        }\n        bzero(&buf, sizeof(buf));\n        ssize_t read_bytes = read(sockfd, buf, sizeof(buf));\n        if(read_bytes > 0){\n            printf(\"message from server: %s\\n\", buf);\n        }else if(read_bytes == 0){\n            printf(\"server socket disconnected!\\n\");\n            break;\n        }else if(read_bytes == -1){\n            close(sockfd);\n            break;\n        }\n    }\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 149,
    "matched_results": [
      "#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint create_tcp_client(const char* server_ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd < 0) {\n        std::cerr << \"Error creating socket\" << std::endl;\n        return -1;\n    }\n\n    struct sockaddr_in server_addr;\n    memset(&server_addr, 0, sizeof(server_addr));\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, server_ip, &server_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcp_client_communication(int sockfd) {\n    char buffer[1024] = {0};\n    std::string message;\n\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, message);\n\n        if (message == \"exit\") {\n            break;\n        }\n\n        send(sockfd, message.c_str(), message.size(), 0);\n        int valread = read(sockfd, buffer, 1024);\n        if (valread < 0) {\n            std::cerr << \"Read error\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Server: \" << buffer << std::endl;\n        memset(buffer, 0, sizeof(buffer));\n    }\n\n    close(sockfd);\n}",
      "#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint create_tcp_client(const char* server_ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd < 0) {\n        std::cerr << \"Error creating socket\" << std::endl;\n        return -1;\n    }\n\n    struct sockaddr_in server_addr;\n    memset(&server_addr, 0, sizeof(server_addr));\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, server_ip, &server_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcp_client_communication(int sockfd) {\n    char buffer[1024] = {0};\n    std::string message;\n\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, message);\n        if (message == \"exit\") break;\n\n        send(sockfd, message.c_str(), message.length(), 0);\n        int valread = read(sockfd, buffer, 1024);\n        if (valread < 0) {\n            std::cerr << \"Read error\" << std::endl;\n            break;\n        }\n        buffer[valread] = '\\0';\n        std::cout << \"Server: \" << buffer << std::endl;\n    }\n\n    close(sockfd);\n}",
      "#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint create_tcp_client(const char* server_ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd < 0) {\n        std::cerr << \"Error creating socket\" << std::endl;\n        return -1;\n    }\n\n    struct sockaddr_in server_addr;\n    memset(&server_addr, 0, sizeof(server_addr));\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, server_ip, &server_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {\n        std::cerr << \"Connection failed\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcp_client_communication(int sockfd) {\n    char buffer[1024] = {0};\n    std::string message;\n\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, message);\n\n        if (message == \"exit\") {\n            break;\n        }\n\n        send(sockfd, message.c_str(), message.length(), 0);\n\n        int valread = read(sockfd, buffer, 1024);\n        if (valread < 0) {\n            std::cerr << \"Error reading from socket\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Server: \" << buffer << std::endl;\n        memset(buffer, 0, sizeof(buffer));\n    }\n\n    close(sockfd);\n}",
      "#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint create_tcp_client(const char* server_ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd < 0) {\n        std::cerr << \"Error creating socket\" << std::endl;\n        return -1;\n    }\n\n    struct sockaddr_in server_addr;\n    memset(&server_addr, 0, sizeof(server_addr));\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, server_ip, &server_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {\n        std::cerr << \"Connection failed\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcp_client_communication(int sockfd) {\n    char buffer[1024] = {0};\n    std::string message;\n\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, message);\n\n        if (message == \"exit\") {\n            break;\n        }\n\n        send(sockfd, message.c_str(), message.length(), 0);\n        int valread = read(sockfd, buffer, 1024);\n        if (valread < 0) {\n            std::cerr << \"Error reading from server\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Server: \" << buffer << std::endl;\n        memset(buffer, 0, sizeof(buffer));\n    }\n\n    close(sockfd);\n}",
      "#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint create_tcp_client(const char* server_ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd < 0) {\n        std::cerr << \"Error creating socket\" << std::endl;\n        return -1;\n    }\n\n    struct sockaddr_in server_addr;\n    memset(&server_addr, 0, sizeof(server_addr));\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, server_ip, &server_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcp_client_communication(int sockfd) {\n    char buffer[1024] = {0};\n    std::string message;\n\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, message);\n\n        if (message == \"exit\") {\n            break;\n        }\n\n        send(sockfd, message.c_str(), message.length(), 0);\n        int valread = read(sockfd, buffer, 1024);\n        if (valread < 0) {\n            std::cerr << \"Read error\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Server: \" << buffer << std::endl;\n        memset(buffer, 0, sizeof(buffer));\n    }\n\n    close(sockfd);\n}",
      "#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint create_tcp_client(const char* server_ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd < 0) {\n        std::cerr << \"Error creating socket\" << std::endl;\n        return -1;\n    }\n\n    struct sockaddr_in server_addr;\n    memset(&server_addr, 0, sizeof(server_addr));\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, server_ip, &server_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcp_client_communication(int sockfd) {\n    char buffer[1024] = {0};\n    std::string message;\n\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, message);\n\n        if (message == \"exit\") {\n            break;\n        }\n\n        send(sockfd, message.c_str(), message.length(), 0);\n        int valread = read(sockfd, buffer, 1024);\n        if (valread < 0) {\n            std::cerr << \"Read error\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Server: \" << buffer << std::endl;\n        memset(buffer, 0, sizeof(buffer));\n    }\n\n    close(sockfd);\n}",
      "#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint create_tcp_client(const char* server_ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd < 0) {\n        std::cerr << \"Error creating socket\" << std::endl;\n        return -1;\n    }\n\n    struct sockaddr_in server_addr;\n    memset(&server_addr, 0, sizeof(server_addr));\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, server_ip, &server_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcp_client_communication(int sockfd) {\n    char buffer[1024] = {0};\n    std::string message;\n\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, message);\n\n        if (message == \"exit\") {\n            break;\n        }\n\n        send(sockfd, message.c_str(), message.length(), 0);\n        int valread = read(sockfd, buffer, 1024);\n        if (valread < 0) {\n            std::cerr << \"Read error\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Server: \" << buffer << std::endl;\n        memset(buffer, 0, sizeof(buffer));\n    }\n\n    close(sockfd);\n}\n\nint main() {\n    const char* server_ip = \"127.0.0.1\";\n    int port = 8080;\n\n    int sockfd = create_tcp_client(server_ip, port);\n    if (sockfd != -1) {\n        tcp_client_communication(sockfd);\n    }\n\n    return 0;\n}",
      "#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint create_tcp_client(const char* server_ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd < 0) {\n        std::cerr << \"Error creating socket\" << std::endl;\n        return -1;\n    }\n\n    struct sockaddr_in server_addr;\n    std::memset(&server_addr, 0, sizeof(server_addr));\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, server_ip, &server_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcp_client_communication(int sockfd) {\n    char buffer[1024] = {0};\n    std::string message;\n\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, message);\n\n        if (message == \"exit\") {\n            break;\n        }\n\n        send(sockfd, message.c_str(), message.size(), 0);\n        int valread = read(sockfd, buffer, 1024);\n        if (valread < 0) {\n            std::cerr << \"Error reading from server\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Server: \" << std::string(buffer, valread) << std::endl;\n    }\n\n    close(sockfd);\n}",
      "#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint create_tcp_client(const char* server_ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd < 0) {\n        std::cerr << \"Error creating socket\" << std::endl;\n        return -1;\n    }\n\n    struct sockaddr_in server_addr;\n    memset(&server_addr, 0, sizeof(server_addr));\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, server_ip, &server_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {\n        std::cerr << \"Connection failed\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcp_client_communication(int sockfd) {\n    char buffer[1024] = {0};\n    std::string message;\n\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, message);\n\n        if (message == \"exit\") {\n            break;\n        }\n\n        send(sockfd, message.c_str(), message.length(), 0);\n\n        int valread = read(sockfd, buffer, 1024);\n        if (valread < 0) {\n            std::cerr << \"Error reading from server\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Server: \" << buffer << std::endl;\n        memset(buffer, 0, sizeof(buffer));\n    }\n\n    close(sockfd);\n}",
      "#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint create_tcp_client(const char* server_ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd < 0) {\n        std::cerr << \"Error creating socket\" << std::endl;\n        return -1;\n    }\n\n    struct sockaddr_in server_addr;\n    memset(&server_addr, 0, sizeof(server_addr));\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, server_ip, &server_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {\n        std::cerr << \"Connection failed\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcp_client_communication(int sockfd) {\n    char buffer[1024] = {0};\n    std::string message;\n\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, message);\n\n        if (message == \"exit\") {\n            break;\n        }\n\n        send(sockfd, message.c_str(), message.length(), 0);\n\n        int valread = read(sockfd, buffer, 1024);\n        if (valread < 0) {\n            std::cerr << \"Error reading from server\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Server: \" << buffer << std::endl;\n        memset(buffer, 0, sizeof(buffer));\n    }\n\n    close(sockfd);\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 11,
    "Instruction": "Task Description: Implement a TCP client in C++ that can establish a connection to a server, send messages, and receive responses.\n\nFunction Description: The code consists of two main functions for creating and managing a TCP client connection. The first function creates and connects a TCP socket to a specified server, while the second function handles the communication loop for sending and receiving messages.\n\nInput:\n- createAndConnectTCPSocket:\n  - ip: const char* - The IP address of the server to connect to\n  - port: int - The port number of the server to connect to\n\n- tcpClientCommunication:\n  - sockfd: int - The socket file descriptor returned by createAndConnectTCPSocket\n\nOutput:\n- createAndConnectTCPSocket:\n  - Returns: int - The socket file descriptor if successful, -1 if failed\n\n- tcpClientCommunication:\n  - No return value (void), but performs I/O operations until connection is terminated",
    "Canonical_solution": "#include <sys/socket.h>\n#include <arpa/inet.h>\n#include <string.h>\n#include <unistd.h>\n\n#define BUFFER_SIZE 1024\n\nint createAndConnectTCPSocket(const char* ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if(sockfd == -1) return -1;\n\n    struct sockaddr_in serv_addr;\n    bzero(&serv_addr, sizeof(serv_addr));\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_addr.s_addr = inet_addr(ip);\n    serv_addr.sin_port = htons(port);\n\n    if(connect(sockfd, (sockaddr*)&serv_addr, sizeof(serv_addr)) == -1) {\n        close(sockfd);\n        return -1;\n    }\n    \n    return sockfd;\n}\n\nvoid tcpClientCommunication(int sockfd) {\n    while(true){\n        char buf[BUFFER_SIZE];\n        bzero(&buf, sizeof(buf));\n        scanf(\"%s\", buf);\n        ssize_t write_bytes = write(sockfd, buf, sizeof(buf));\n        if(write_bytes == -1){\n            printf(\"socket already disconnected, can't write any more!\\n\");\n            break;\n        }\n        bzero(&buf, sizeof(buf));\n        ssize_t read_bytes = read(sockfd, buf, sizeof(buf));\n        if(read_bytes > 0){\n            printf(\"message from server: %s\\n\", buf);\n        }else if(read_bytes == 0){\n            printf(\"server socket disconnected!\\n\");\n            break;\n        }else if(read_bytes == -1){\n            close(sockfd);\n            break;\n        }\n    }\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 149,
    "matched_results": [
      "#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint createAndConnectTCPSocket(const char* ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd < 0) {\n        std::cerr << \"Error creating socket\" << std::endl;\n        return -1;\n    }\n\n    struct sockaddr_in server_addr;\n    memset(&server_addr, 0, sizeof(server_addr));\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, ip, &server_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {\n        std::cerr << \"Connection failed\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcpClientCommunication(int sockfd) {\n    char buffer[1024] = {0};\n    std::string message;\n\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, message);\n\n        if (message == \"exit\") {\n            break;\n        }\n\n        send(sockfd, message.c_str(), message.length(), 0);\n        int valread = read(sockfd, buffer, 1024);\n        if (valread > 0) {\n            std::cout << \"Server: \" << std::string(buffer, valread) << std::endl;\n        } else {\n            std::cerr << \"Read error or connection closed by server\" << std::endl;\n            break;\n        }\n    }\n\n    close(sockfd);\n}",
      "#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint createAndConnectTCPSocket(const char* ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd < 0) {\n        std::cerr << \"Error creating socket\" << std::endl;\n        return -1;\n    }\n\n    struct sockaddr_in server_addr;\n    memset(&server_addr, 0, sizeof(server_addr));\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, ip, &server_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcpClientCommunication(int sockfd) {\n    char buffer[1024] = {0};\n    std::string message;\n\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, message);\n\n        if (message == \"exit\") {\n            break;\n        }\n\n        send(sockfd, message.c_str(), message.length(), 0);\n        int valread = read(sockfd, buffer, 1024);\n        if (valread > 0) {\n            std::cout << \"Server: \" << std::string(buffer, valread) << std::endl;\n        }\n    }\n\n    close(sockfd);\n}\n\nint main() {\n    const char* ip = \"127.0.0.1\";\n    int port = 8080;\n\n    int sockfd = createAndConnectTCPSocket(ip, port);\n    if (sockfd != -1) {\n        tcpClientCommunication(sockfd);\n    }\n\n    return 0;\n}",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint createAndConnectTCPSocket(const char* ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd < 0) {\n        std::cerr << \"Error creating socket\\n\";\n        return -1;\n    }\n\n    struct sockaddr_in server_addr;\n    std::memset(&server_addr, 0, sizeof(server_addr));\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, ip, &server_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\\n\";\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {\n        std::cerr << \"Connection Failed\\n\";\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcpClientCommunication(int sockfd) {\n    const int buffer_size = 1024;\n    char buffer[buffer_size];\n    std::string message;\n\n    while (true) {\n        std::cout << \"Enter message to send (type 'exit' to quit): \";\n        std::getline(std::cin, message);\n\n        if (message == \"exit\") {\n            break;\n        }\n\n        send(sockfd, message.c_str(), message.length(), 0);\n\n        int bytes_received = recv(sockfd, buffer, buffer_size - 1, 0);\n        if (bytes_received <= 0) {\n            std::cerr << \"Connection closed or error\\n\";\n            break;\n        }\n\n        buffer[bytes_received] = '\\0';\n        std::cout << \"Server: \" << buffer << std::endl;\n    }\n\n    close(sockfd);\n}\n\nint main() {\n    const char* server_ip = \"127.0.0.1\";\n    int server_port = 8080;\n\n    int sockfd = createAndConnectTCPSocket(server_ip, server_port);\n    if (sockfd != -1) {\n        tcpClientCommunication(sockfd);\n    }\n\n    return 0;\n}\n```",
      "#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint createAndConnectTCPSocket(const char* ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd < 0) {\n        std::cerr << \"Error creating socket\" << std::endl;\n        return -1;\n    }\n\n    struct sockaddr_in server_addr;\n    memset(&server_addr, 0, sizeof(server_addr));\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, ip, &server_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcpClientCommunication(int sockfd) {\n    char buffer[1024] = {0};\n    std::string message;\n\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, message);\n\n        if (send(sockfd, message.c_str(), message.length(), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        int valread = recv(sockfd, buffer, 1024, 0);\n        if (valread < 0) {\n            std::cerr << \"Receive failed\" << std::endl;\n            break;\n        } else if (valread == 0) {\n            std::cout << \"Server closed connection\" << std::endl;\n            break;\n        }\n\n        buffer[valread] = '\\0';\n        std::cout << \"Server: \" << buffer << std::endl;\n    }\n\n    close(sockfd);\n}",
      "#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint createAndConnectTCPSocket(const char* ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd < 0) {\n        std::cerr << \"Error creating socket\" << std::endl;\n        return -1;\n    }\n\n    struct sockaddr_in server_addr;\n    memset(&server_addr, 0, sizeof(server_addr));\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, ip, &server_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcpClientCommunication(int sockfd) {\n    char buffer[1024] = {0};\n    std::string message;\n\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, message);\n\n        if (message == \"exit\") {\n            break;\n        }\n\n        send(sockfd, message.c_str(), message.length(), 0);\n        int valread = read(sockfd, buffer, 1024);\n        if (valread > 0) {\n            std::cout << \"Server: \" << std::string(buffer, valread) << std::endl;\n        } else {\n            std::cerr << \"Read error or connection closed by server\" << std::endl;\n            break;\n        }\n    }\n\n    close(sockfd);\n}\n\nint main() {\n    const char* ip = \"127.0.0.1\";\n    int port = 8080;\n\n    int sockfd = createAndConnectTCPSocket(ip, port);\n    if (sockfd != -1) {\n        tcpClientCommunication(sockfd);\n    }\n\n    return 0;\n}",
      "#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint createAndConnectTCPSocket(const char* ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd < 0) {\n        std::cerr << \"Error creating socket\" << std::endl;\n        return -1;\n    }\n\n    struct sockaddr_in server_addr;\n    memset(&server_addr, 0, sizeof(server_addr));\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, ip, &server_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {\n        std::cerr << \"Connection failed\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcpClientCommunication(int sockfd) {\n    char buffer[1024] = {0};\n    std::string message;\n\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, message);\n\n        if (message == \"exit\") {\n            break;\n        }\n\n        send(sockfd, message.c_str(), message.length(), 0);\n        int valread = read(sockfd, buffer, 1024);\n        if (valread > 0) {\n            std::cout << \"Server: \" << std::string(buffer, valread) << std::endl;\n        }\n    }\n\n    close(sockfd);\n}\n\nint main() {\n    const char* ip = \"127.0.0.1\";\n    int port = 8080;\n\n    int sockfd = createAndConnectTCPSocket(ip, port);\n    if (sockfd != -1) {\n        tcpClientCommunication(sockfd);\n    }\n\n    return 0;\n}",
      "#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint createAndConnectTCPSocket(const char* ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd < 0) {\n        std::cerr << \"Error creating socket\" << std::endl;\n        return -1;\n    }\n\n    struct sockaddr_in server_addr;\n    memset(&server_addr, 0, sizeof(server_addr));\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, ip, &server_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcpClientCommunication(int sockfd) {\n    char buffer[1024] = {0};\n    std::string message;\n\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, message);\n\n        if (message == \"exit\") {\n            break;\n        }\n\n        send(sockfd, message.c_str(), message.length(), 0);\n        int valread = read(sockfd, buffer, 1024);\n        if (valread > 0) {\n            std::cout << \"Server: \" << std::string(buffer, valread) << std::endl;\n        } else {\n            std::cerr << \"Read error or connection closed by server\" << std::endl;\n            break;\n        }\n    }\n\n    close(sockfd);\n}\n\nint main() {\n    const char* ip = \"127.0.0.1\";\n    int port = 8080;\n\n    int sockfd = createAndConnectTCPSocket(ip, port);\n    if (sockfd != -1) {\n        tcpClientCommunication(sockfd);\n    }\n\n    return 0;\n}",
      "#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint createAndConnectTCPSocket(const char* ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd < 0) {\n        std::cerr << \"Error creating socket\" << std::endl;\n        return -1;\n    }\n\n    struct sockaddr_in server_addr;\n    memset(&server_addr, 0, sizeof(server_addr));\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, ip, &server_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcpClientCommunication(int sockfd) {\n    char buffer[1024] = {0};\n    std::string message;\n\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, message);\n\n        if (message == \"exit\") {\n            break;\n        }\n\n        send(sockfd, message.c_str(), message.length(), 0);\n        int valread = read(sockfd, buffer, 1024);\n        if (valread > 0) {\n            std::cout << \"Server: \" << std::string(buffer, valread) << std::endl;\n        }\n    }\n\n    close(sockfd);\n}\n\nint main() {\n    const char* ip = \"127.0.0.1\";\n    int port = 8080;\n\n    int sockfd = createAndConnectTCPSocket(ip, port);\n    if (sockfd != -1) {\n        tcpClientCommunication(sockfd);\n    }\n\n    return 0;\n}",
      "#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint createAndConnectTCPSocket(const char* ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd < 0) {\n        std::cerr << \"Error creating socket\" << std::endl;\n        return -1;\n    }\n\n    struct sockaddr_in server_addr;\n    memset(&server_addr, 0, sizeof(server_addr));\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, ip, &server_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcpClientCommunication(int sockfd) {\n    char buffer[1024] = {0};\n    std::string message;\n\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, message);\n\n        if (message == \"exit\") {\n            break;\n        }\n\n        send(sockfd, message.c_str(), message.length(), 0);\n        int valread = read(sockfd, buffer, 1024);\n        if (valread > 0) {\n            std::cout << \"Server: \" << std::string(buffer, valread) << std::endl;\n        } else {\n            std::cerr << \"Read error or connection closed\" << std::endl;\n            break;\n        }\n    }\n\n    close(sockfd);\n}\n\nint main() {\n    const char* ip = \"127.0.0.1\";\n    int port = 8080;\n\n    int sockfd = createAndConnectTCPSocket(ip, port);\n    if (sockfd != -1) {\n        tcpClientCommunication(sockfd);\n    }\n\n    return 0;\n}",
      "#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint createAndConnectTCPSocket(const char* ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd < 0) {\n        std::cerr << \"Error creating socket\" << std::endl;\n        return -1;\n    }\n\n    sockaddr_in server_addr;\n    std::memset(&server_addr, 0, sizeof(server_addr));\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, ip, &server_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {\n        std::cerr << \"Connection failed\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcpClientCommunication(int sockfd) {\n    char buffer[1024];\n    std::string message;\n\n    while (true) {\n        std::cout << \"Enter message to send (type 'exit' to quit): \";\n        std::getline(std::cin, message);\n\n        if (message == \"exit\") {\n            break;\n        }\n\n        send(sockfd, message.c_str(), message.length(), 0);\n\n        int bytes_received = recv(sockfd, buffer, sizeof(buffer) - 1, 0);\n        if (bytes_received < 0) {\n            std::cerr << \"Error receiving data\" << std::endl;\n            break;\n        }\n\n        buffer[bytes_received] = '\\0';\n        std::cout << \"Server response: \" << buffer << std::endl;\n    }\n\n    close(sockfd);\n}\n\nint main() {\n    const char* server_ip = \"127.0.0.1\";\n    int server_port = 8080;\n\n    int sockfd = createAndConnectTCPSocket(server_ip, server_port);\n    if (sockfd != -1) {\n        tcpClientCommunication(sockfd);\n    }\n\n    return 0;\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 12,
    "Instruction": "Task Description: Implement a TCP client function in C++ that establishes a connection to a server, sends user input messages, and receives responses from the server until the connection is terminated.\n\nFunction Description: The function `tcp_client_communication` creates a TCP socket, connects to a specified server (localhost on port 8888 in this case), and enters a loop where it reads user input from stdin, sends it to the server, and prints the server's response. The communication continues until an error occurs or the connection is closed by either side.\n\nInput: None (The server IP and port are hardcoded as 127.0.0.1 and 8888 respectively in the current implementation, but could be parameterized)\n\nOutput: None (The function prints server responses to stdout but doesn't return any value)\n\nNote: The function handles socket creation, connection establishment, data transmission, and proper cleanup (socket closing) in case of errors or normal termination.",
    "Canonical_solution": "#include <sys/socket.h>\n#include <arpa/inet.h>\n#include <string.h>\n#include <unistd.h>\n\n#define BUFFER_SIZE 1024\n\nvoid tcp_client_communication() {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    \n    struct sockaddr_in serv_addr;\n    bzero(&serv_addr, sizeof(serv_addr));\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_addr.s_addr = inet_addr(\"127.0.0.1\");\n    serv_addr.sin_port = htons(8888);\n\n    connect(sockfd, (sockaddr*)&serv_addr, sizeof(serv_addr));\n    \n    while(true){\n        char buf[BUFFER_SIZE];\n        bzero(&buf, sizeof(buf));\n        scanf(\"%s\", buf);\n        ssize_t write_bytes = write(sockfd, buf, sizeof(buf));\n        if(write_bytes == -1){\n            break;\n        }\n        bzero(&buf, sizeof(buf));\n        ssize_t read_bytes = read(sockfd, buf, sizeof(buf));\n        if(read_bytes > 0){\n            printf(\"message from server: %s\\n\", buf);\n        }else if(read_bytes == 0){\n            break;\n        }else if(read_bytes == -1){\n            close(sockfd);\n            break;\n        }\n    }\n    close(sockfd);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 149,
    "matched_results": [
      "#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nvoid tcp_client_communication() {\n    int sock = 0;\n    struct sockaddr_in serv_addr;\n    char buffer[1024] = {0};\n\n    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation error\" << std::endl;\n        return;\n    }\n\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(8888);\n\n    if (inet_pton(AF_INET, \"127.0.0.1\", &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        return;\n    }\n\n    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        return;\n    }\n\n    while (true) {\n        std::string user_input;\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, user_input);\n\n        if (send(sock, user_input.c_str(), user_input.length(), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        int valread = read(sock, buffer, 1024);\n        if (valread < 0) {\n            std::cerr << \"Read failed\" << std::endl;\n            break;\n        } else if (valread == 0) {\n            std::cout << \"Server closed the connection\" << std::endl;\n            break;\n        }\n\n        buffer[valread] = '\\0';\n        std::cout << \"Server: \" << buffer << std::endl;\n    }\n\n    close(sock);\n}",
      "#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nvoid tcp_client_communication() {\n    int sock = 0;\n    struct sockaddr_in serv_addr;\n    char buffer[1024] = {0};\n    std::string user_input;\n\n    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation error\" << std::endl;\n        return;\n    }\n\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(8888);\n\n    if (inet_pton(AF_INET, \"127.0.0.1\", &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        return;\n    }\n\n    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        return;\n    }\n\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, user_input);\n\n        if (user_input.empty()) {\n            break;\n        }\n\n        send(sock, user_input.c_str(), user_input.length(), 0);\n\n        int valread = read(sock, buffer, 1024);\n        if (valread <= 0) {\n            std::cerr << \"Server closed connection or read error\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Server: \" << std::string(buffer, valread) << std::endl;\n    }\n\n    close(sock);\n}",
      "#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nvoid tcp_client_communication() {\n    int sock = 0;\n    struct sockaddr_in serv_addr;\n    char buffer[1024] = {0};\n    \n    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation error\" << std::endl;\n        return;\n    }\n\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(8888);\n\n    if (inet_pton(AF_INET, \"127.0.0.1\", &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        return;\n    }\n\n    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        return;\n    }\n\n    while (true) {\n        std::string user_input;\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, user_input);\n\n        if (user_input.empty()) {\n            break;\n        }\n\n        send(sock, user_input.c_str(), user_input.size(), 0);\n        int valread = read(sock, buffer, 1024);\n        if (valread <= 0) {\n            std::cerr << \"Server closed connection or read error\" << std::endl;\n            break;\n        }\n        std::cout << \"Server: \" << buffer << std::endl;\n        memset(buffer, 0, sizeof(buffer));\n    }\n\n    close(sock);\n}",
      "#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nvoid tcp_client_communication() {\n    int sock = 0;\n    struct sockaddr_in serv_addr;\n    char buffer[1024] = {0};\n\n    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation error\" << std::endl;\n        return;\n    }\n\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(8888);\n\n    if (inet_pton(AF_INET, \"127.0.0.1\", &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        return;\n    }\n\n    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        return;\n    }\n\n    while (true) {\n        std::string user_input;\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, user_input);\n\n        if (send(sock, user_input.c_str(), user_input.length(), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        int valread = read(sock, buffer, 1024);\n        if (valread < 0) {\n            std::cerr << \"Read failed\" << std::endl;\n            break;\n        } else if (valread == 0) {\n            std::cout << \"Server closed the connection\" << std::endl;\n            break;\n        }\n\n        buffer[valread] = '\\0';\n        std::cout << \"Server: \" << buffer << std::endl;\n    }\n\n    close(sock);\n}",
      "#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nvoid tcp_client_communication() {\n    int sock = 0;\n    struct sockaddr_in serv_addr;\n    char buffer[1024] = {0};\n    std::string user_input;\n\n    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation error\" << std::endl;\n        return;\n    }\n\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(8888);\n\n    if (inet_pton(AF_INET, \"127.0.0.1\", &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        return;\n    }\n\n    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        return;\n    }\n\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, user_input);\n\n        if (send(sock, user_input.c_str(), user_input.length(), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        int valread = read(sock, buffer, 1024);\n        if (valread < 0) {\n            std::cerr << \"Read failed\" << std::endl;\n            break;\n        } else if (valread == 0) {\n            std::cout << \"Server closed the connection\" << std::endl;\n            break;\n        }\n\n        buffer[valread] = '\\0';\n        std::cout << \"Server: \" << buffer << std::endl;\n    }\n\n    close(sock);\n}",
      "#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nvoid tcp_client_communication() {\n    int sock = 0;\n    struct sockaddr_in serv_addr;\n    char buffer[1024] = {0};\n\n    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation error\" << std::endl;\n        return;\n    }\n\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(8888);\n\n    if (inet_pton(AF_INET, \"127.0.0.1\", &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        return;\n    }\n\n    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        return;\n    }\n\n    while (true) {\n        std::string user_input;\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, user_input);\n\n        if (send(sock, user_input.c_str(), user_input.length(), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        int valread = read(sock, buffer, 1024);\n        if (valread < 0) {\n            std::cerr << \"Read failed\" << std::endl;\n            break;\n        } else if (valread == 0) {\n            std::cout << \"Server closed connection\" << std::endl;\n            break;\n        }\n\n        buffer[valread] = '\\0';\n        std::cout << \"Server: \" << buffer << std::endl;\n    }\n\n    close(sock);\n}",
      "#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nvoid tcp_client_communication() {\n    int sock = 0;\n    struct sockaddr_in serv_addr;\n    char buffer[1024] = {0};\n\n    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation error\" << std::endl;\n        return;\n    }\n\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(8888);\n\n    if (inet_pton(AF_INET, \"127.0.0.1\", &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        return;\n    }\n\n    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        return;\n    }\n\n    while (true) {\n        std::string user_input;\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, user_input);\n\n        if (send(sock, user_input.c_str(), user_input.length(), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        int valread = read(sock, buffer, 1024);\n        if (valread < 0) {\n            std::cerr << \"Read failed\" << std::endl;\n            break;\n        } else if (valread == 0) {\n            std::cout << \"Server closed the connection\" << std::endl;\n            break;\n        }\n\n        buffer[valread] = '\\0';\n        std::cout << \"Server: \" << buffer << std::endl;\n    }\n\n    close(sock);\n}",
      "#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nvoid tcp_client_communication() {\n    int sock = 0;\n    struct sockaddr_in serv_addr;\n    char buffer[1024] = {0};\n    std::string user_input;\n\n    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation error\" << std::endl;\n        return;\n    }\n\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(8888);\n\n    if (inet_pton(AF_INET, \"127.0.0.1\", &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        return;\n    }\n\n    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        return;\n    }\n\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, user_input);\n\n        if (send(sock, user_input.c_str(), user_input.length(), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        int valread = read(sock, buffer, 1024);\n        if (valread < 0) {\n            std::cerr << \"Read failed\" << std::endl;\n            break;\n        } else if (valread == 0) {\n            std::cout << \"Server closed the connection\" << std::endl;\n            break;\n        }\n\n        buffer[valread] = '\\0';\n        std::cout << \"Server: \" << buffer << std::endl;\n    }\n\n    close(sock);\n}",
      "#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nvoid tcp_client_communication() {\n    int sock = 0;\n    struct sockaddr_in serv_addr;\n    char buffer[1024] = {0};\n\n    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation error\" << std::endl;\n        return;\n    }\n\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(8888);\n\n    if (inet_pton(AF_INET, \"127.0.0.1\", &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        return;\n    }\n\n    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        return;\n    }\n\n    while (true) {\n        std::string user_input;\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, user_input);\n\n        if (send(sock, user_input.c_str(), user_input.length(), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        int valread = read(sock, buffer, 1024);\n        if (valread < 0) {\n            std::cerr << \"Read failed\" << std::endl;\n            break;\n        } else if (valread == 0) {\n            std::cout << \"Server closed connection\" << std::endl;\n            break;\n        }\n\n        buffer[valread] = '\\0';\n        std::cout << \"Server: \" << buffer << std::endl;\n    }\n\n    close(sock);\n}",
      "#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nvoid tcp_client_communication() {\n    int sock = 0;\n    struct sockaddr_in serv_addr;\n    char buffer[1024] = {0};\n\n    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation error\" << std::endl;\n        return;\n    }\n\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(8888);\n\n    if (inet_pton(AF_INET, \"127.0.0.1\", &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        return;\n    }\n\n    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        return;\n    }\n\n    while (true) {\n        std::string user_input;\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, user_input);\n\n        if (user_input.empty()) {\n            std::cout << \"Empty message, closing connection.\" << std::endl;\n            break;\n        }\n\n        send(sock, user_input.c_str(), user_input.length(), 0);\n\n        int valread = read(sock, buffer, 1024);\n        if (valread <= 0) {\n            std::cerr << \"Server closed connection or read error\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Server: \" << std::string(buffer, valread) << std::endl;\n    }\n\n    close(sock);\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 13,
    "Instruction": "Task Description: Create a TCP client function in C++ that establishes a connection to a server, sends and receives messages, and maintains the connection until terminated by the user.\n\nFunction Description: The function `create_tcp_client` initializes a TCP client that connects to a specified server IP address. It creates a socket, establishes a connection, and provides interactive communication where the user can send messages to the server and receive responses. The function handles basic error cases and properly closes the connection when done.\n\nInput: \n- `server_ip`: [const char*] - The IP address of the server to connect to in string format (e.g., \"127.0.0.1\")\n\nOutput: \n- [int] - Returns 0 on successful execution and -1 if any error occurs during socket creation or connection establishment. The function runs indefinitely until manually terminated by the user.\n\nNote: The function uses a default port 6666 for the connection. Error messages are printed to stderr using `perror` for debugging purposes. The communication loop continues until the program is interrupted, allowing continuous message exchange between client and server.",
    "Canonical_solution": "#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#include <string.h>\n\n#define DEFAULT_PORT 6666\n\nint create_tcp_client(const char* server_ip) {\n    int connfd = 0;\n    struct sockaddr_in client;\n    \n    client.sin_family = AF_INET;\n    client.sin_port = htons(DEFAULT_PORT);\n    client.sin_addr.s_addr = inet_addr(server_ip);\n    \n    connfd = socket(AF_INET, SOCK_STREAM, 0);\n    if(connfd < 0){\n        perror(\"socket\");\n        return -1;\n    }\n    \n    if(connect(connfd, (struct sockaddr *)&client, sizeof(client)) < 0){\n        perror(\"connect\");\n        close(connfd);\n        return -1;\n    }\n    \n    char buff[1024];\n    bzero(buff, sizeof(buff));\n    recv(connfd, buff, 1024, 0);\n    printf(\"recv : %s \\n\", buff);\n    \n    bzero(buff, sizeof(buff));\n    strcpy(buff, \"this is client \\n\");\n    send(connfd, buff, 1024, 0);\n    \n    while(1){\n        bzero(buff, sizeof(buff));\n        scanf(\"%s\", buff);\n        int p = strlen(buff);\n        buff[p] = '\\0';\n        send(connfd, buff, 1024, 0);\n        printf(\"i have send buff \\n\");\n    }\n    \n    close(connfd);\n    return 0;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 149,
    "matched_results": [
      "#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n#include <sys/socket.h>\n\nint create_tcp_client(const char* server_ip) {\n    int sock = 0;\n    struct sockaddr_in serv_addr;\n\n    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        perror(\"Socket creation error\");\n        return -1;\n    }\n\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(6666);\n\n    if (inet_pton(AF_INET, server_ip, &serv_addr.sin_addr) <= 0) {\n        perror(\"Invalid address/ Address not supported\");\n        return -1;\n    }\n\n    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        perror(\"Connection Failed\");\n        return -1;\n    }\n\n    char buffer[1024] = {0};\n    std::string message;\n\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, message);\n\n        if (send(sock, message.c_str(), message.length(), 0) < 0) {\n            perror(\"Send failed\");\n            break;\n        }\n\n        int valread = read(sock, buffer, 1024);\n        if (valread < 0) {\n            perror(\"Receive failed\");\n            break;\n        }\n\n        buffer[valread] = '\\0';\n        std::cout << \"Server: \" << buffer << std::endl;\n    }\n\n    close(sock);\n    return 0;\n}",
      "#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint create_tcp_client(const char* server_ip) {\n    int sock = 0;\n    struct sockaddr_in serv_addr;\n\n    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        perror(\"Socket creation error\");\n        return -1;\n    }\n\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(6666);\n\n    if (inet_pton(AF_INET, server_ip, &serv_addr.sin_addr) <= 0) {\n        perror(\"Invalid address/ Address not supported\");\n        return -1;\n    }\n\n    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        perror(\"Connection Failed\");\n        return -1;\n    }\n\n    char buffer[1024] = {0};\n    std::string message;\n\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, message);\n\n        if (send(sock, message.c_str(), message.length(), 0) < 0) {\n            perror(\"Send failed\");\n            break;\n        }\n\n        int valread = read(sock, buffer, 1024);\n        if (valread < 0) {\n            perror(\"Read failed\");\n            break;\n        }\n\n        std::cout << \"Server: \" << buffer << std::endl;\n        memset(buffer, 0, sizeof(buffer));\n    }\n\n    close(sock);\n    return 0;\n}",
      "#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint create_tcp_client(const char* server_ip) {\n    int sockfd;\n    struct sockaddr_in servaddr;\n\n    // Create socket\n    if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        perror(\"Socket creation failed\");\n        return -1;\n    }\n\n    memset(&servaddr, 0, sizeof(servaddr));\n    servaddr.sin_family = AF_INET;\n    servaddr.sin_port = htons(6666);\n\n    // Convert IPv4 and IPv6 addresses from text to binary form\n    if (inet_pton(AF_INET, server_ip, &servaddr.sin_addr) <= 0) {\n        perror(\"Invalid address/ Address not supported\");\n        close(sockfd);\n        return -1;\n    }\n\n    // Connect to server\n    if (connect(sockfd, (struct sockaddr*)&servaddr, sizeof(servaddr)) < 0) {\n        perror(\"Connection Failed\");\n        close(sockfd);\n        return -1;\n    }\n\n    char buffer[1024];\n    std::string message;\n\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, message);\n\n        if (send(sockfd, message.c_str(), message.length(), 0) < 0) {\n            perror(\"Send failed\");\n            break;\n        }\n\n        int n = recv(sockfd, buffer, sizeof(buffer) - 1, 0);\n        if (n < 0) {\n            perror(\"Receive failed\");\n            break;\n        }\n\n        buffer[n] = '\\0';\n        std::cout << \"Server: \" << buffer << std::endl;\n    }\n\n    close(sockfd);\n    return 0;\n}",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint create_tcp_client(const char* server_ip) {\n    int sock = socket(AF_INET, SOCK_STREAM, 0);\n    if (sock < 0) {\n        perror(\"Socket creation failed\");\n        return -1;\n    }\n\n    sockaddr_in server_address;\n    memset(&server_address, 0, sizeof(server_address));\n    server_address.sin_family = AF_INET;\n    server_address.sin_port = htons(6666);\n\n    if (inet_pton(AF_INET, server_ip, &server_address.sin_addr) <= 0) {\n        perror(\"Invalid address/ Address not supported\");\n        close(sock);\n        return -1;\n    }\n\n    if (connect(sock, (struct sockaddr*)&server_address, sizeof(server_address)) < 0) {\n        perror(\"Connection failed\");\n        close(sock);\n        return -1;\n    }\n\n    char buffer[1024];\n    std::string message;\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, message);\n        if (send(sock, message.c_str(), message.length(), 0) < 0) {\n            perror(\"Send failed\");\n            break;\n        }\n\n        int bytes_received = recv(sock, buffer, sizeof(buffer) - 1, 0);\n        if (bytes_received < 0) {\n            perror(\"Receive failed\");\n            break;\n        } else if (bytes_received == 0) {\n            std::cerr << \"Server closed the connection\" << std::endl;\n            break;\n        }\n\n        buffer[bytes_received] = '\\0';\n        std::cout << \"Server: \" << buffer << std::endl;\n    }\n\n    close(sock);\n    return 0;\n}\n```",
      "#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint create_tcp_client(const char* server_ip) {\n    int sockfd;\n    struct sockaddr_in servaddr;\n\n    // Create socket\n    if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        perror(\"Socket creation failed\");\n        return -1;\n    }\n\n    memset(&servaddr, 0, sizeof(servaddr));\n    servaddr.sin_family = AF_INET;\n    servaddr.sin_port = htons(6666);\n\n    // Convert IPv4 and IPv6 addresses from text to binary form\n    if (inet_pton(AF_INET, server_ip, &servaddr.sin_addr) <= 0) {\n        perror(\"Invalid address/ Address not supported\");\n        close(sockfd);\n        return -1;\n    }\n\n    // Connect to the server\n    if (connect(sockfd, (struct sockaddr*)&servaddr, sizeof(servaddr)) < 0) {\n        perror(\"Connection failed\");\n        close(sockfd);\n        return -1;\n    }\n\n    char buffer[1024] = {0};\n    std::string message;\n\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, message);\n\n        // Send message to server\n        send(sockfd, message.c_str(), message.length(), 0);\n\n        // Receive message from server\n        int n = read(sockfd, buffer, sizeof(buffer) - 1);\n        if (n < 0) {\n            perror(\"Read failed\");\n            break;\n        }\n        buffer[n] = '\\0';\n        std::cout << \"Server: \" << buffer << std::endl;\n    }\n\n    close(sockfd);\n    return 0;\n}",
      "#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint create_tcp_client(const char* server_ip) {\n    int sock = 0;\n    struct sockaddr_in serv_addr;\n    char buffer[1024] = {0};\n\n    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        perror(\"Socket creation error\");\n        return -1;\n    }\n\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(6666);\n\n    if (inet_pton(AF_INET, server_ip, &serv_addr.sin_addr) <= 0) {\n        perror(\"Invalid address/ Address not supported\");\n        return -1;\n    }\n\n    if (connect(sock, (struct sockaddr*)&serv_addr, sizeof(serv_addr)) < 0) {\n        perror(\"Connection Failed\");\n        return -1;\n    }\n\n    while (true) {\n        std::string message;\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, message);\n\n        send(sock, message.c_str(), message.length(), 0);\n        std::cout << \"Message sent\\n\";\n\n        int valread = read(sock, buffer, 1024);\n        if (valread > 0) {\n            buffer[valread] = '\\0';\n            std::cout << \"Server: \" << buffer << std::endl;\n        } else {\n            perror(\"Read error\");\n            break;\n        }\n    }\n\n    close(sock);\n    return 0;\n}",
      "#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint create_tcp_client(const char* server_ip) {\n    int sockfd;\n    struct sockaddr_in server_addr;\n    char buffer[1024];\n    int port = 6666;\n\n    // Create socket\n    if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        perror(\"Socket creation error\");\n        return -1;\n    }\n\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(port);\n\n    // Convert IPv4 and IPv6 addresses from text to binary form\n    if (inet_pton(AF_INET, server_ip, &server_addr.sin_addr) <= 0) {\n        perror(\"Invalid address/ Address not supported\");\n        return -1;\n    }\n\n    // Connect to server\n    if (connect(sockfd, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {\n        perror(\"Connection failed\");\n        return -1;\n    }\n\n    std::cout << \"Connected to server \" << server_ip << \" on port \" << port << std::endl;\n\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::cin.getline(buffer, 1024);\n\n        // Send message to server\n        send(sockfd, buffer, strlen(buffer), 0);\n\n        // Receive message from server\n        int valread = read(sockfd, buffer, 1024);\n        if (valread < 0) {\n            perror(\"Read error\");\n            break;\n        }\n\n        buffer[valread] = '\\0';\n        std::cout << \"Server: \" << buffer << std::endl;\n    }\n\n    close(sockfd);\n    return 0;\n}",
      "#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint create_tcp_client(const char* server_ip) {\n    int sock = 0;\n    struct sockaddr_in serv_addr;\n    char buffer[1024] = {0};\n\n    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        perror(\"Socket creation error\");\n        return -1;\n    }\n\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(6666);\n\n    if (inet_pton(AF_INET, server_ip, &serv_addr.sin_addr) <= 0) {\n        perror(\"Invalid address/ Address not supported\");\n        return -1;\n    }\n\n    if (connect(sock, (struct sockaddr*)&serv_addr, sizeof(serv_addr)) < 0) {\n        perror(\"Connection Failed\");\n        return -1;\n    }\n\n    while (true) {\n        std::string message;\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, message);\n\n        if (send(sock, message.c_str(), message.length(), 0) < 0) {\n            perror(\"Send failed\");\n            break;\n        }\n\n        int valread = read(sock, buffer, 1024);\n        if (valread < 0) {\n            perror(\"Read failed\");\n            break;\n        }\n\n        buffer[valread] = '\\0';\n        std::cout << \"Server: \" << buffer << std::endl;\n    }\n\n    close(sock);\n    return 0;\n}",
      "#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint create_tcp_client(const char* server_ip) {\n    int sockfd;\n    struct sockaddr_in server_addr;\n    char buffer[1024];\n    \n    // Create socket\n    if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        perror(\"Socket creation error\");\n        return -1;\n    }\n    \n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(6666);\n    \n    // Convert IPv4 and IPv6 addresses from text to binary form\n    if (inet_pton(AF_INET, server_ip, &server_addr.sin_addr) <= 0) {\n        perror(\"Invalid address/ Address not supported\");\n        return -1;\n    }\n    \n    // Connect to server\n    if (connect(sockfd, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {\n        perror(\"Connection failed\");\n        return -1;\n    }\n    \n    std::cout << \"Connected to the server. Type your messages below:\" << std::endl;\n    \n    while (true) {\n        std::cout << \"You: \";\n        std::cin.getline(buffer, 1024);\n        \n        // Send message to server\n        send(sockfd, buffer, strlen(buffer), 0);\n        \n        // Receive message from server\n        int valread = read(sockfd, buffer, 1024);\n        if (valread > 0) {\n            buffer[valread] = '\\0';\n            std::cout << \"Server: \" << buffer << std::endl;\n        } else if (valread == 0) {\n            std::cout << \"Server disconnected\" << std::endl;\n            break;\n        } else {\n            perror(\"Read error\");\n            break;\n        }\n    }\n    \n    // Close the socket\n    close(sockfd);\n    return 0;\n}",
      "#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint create_tcp_client(const char* server_ip) {\n    int sock = 0;\n    struct sockaddr_in serv_addr;\n    char buffer[1024] = {0};\n\n    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        perror(\"Socket creation error\");\n        return -1;\n    }\n\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(6666);\n\n    if (inet_pton(AF_INET, server_ip, &serv_addr.sin_addr) <= 0) {\n        perror(\"Invalid address/ Address not supported\");\n        return -1;\n    }\n\n    if (connect(sock, (struct sockaddr*)&serv_addr, sizeof(serv_addr)) < 0) {\n        perror(\"Connection Failed\");\n        return -1;\n    }\n\n    while (true) {\n        std::string message;\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, message);\n\n        if (send(sock, message.c_str(), message.length(), 0) < 0) {\n            perror(\"Send failed\");\n            break;\n        }\n\n        int valread = read(sock, buffer, 1024);\n        if (valread < 0) {\n            perror(\"Read failed\");\n            break;\n        }\n\n        std::cout << \"Server: \" << buffer << std::endl;\n        memset(buffer, 0, sizeof(buffer));\n    }\n\n    close(sock);\n    return 0;\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 14,
    "Instruction": "Task Description: Create a C++ class that handles HTTP communication over TCP and UDP protocols, including sending requests and receiving responses from a server.\n\nClass Description: The LinHttpHandler class provides functionality for sending HTTP requests and receiving responses using both TCP (for standard HTTP communication) and UDP (for multicast communication). It includes error handling and resource management through RAII.\n\nAttributes:\n\nSocketCloser: [Nested Class] - A helper class that ensures sockets are properly closed when they go out of scope.\n\nMethods:\n\nsend: [Name](const std::string& msg, const std::string& adr, int port) -> std::string - Sends an HTTP message to the specified address and port using TCP and returns the server's response. Throws system_error on failure.\n\nsendMulticast: [Name](const std::string& msg, const std::string& adr, int port, std::chrono::steady_clock::duration timeout) -> std::vector<std::string> - Sends a multicast message using UDP and collects responses within the specified timeout period. Returns a vector of response strings. Throws system_error on failure.\n\nSocketCloser: [Name](int sockFd) -> None - Constructor that takes a socket file descriptor. The destructor automatically closes the socket.",
    "Canonical_solution": "#include <arpa/inet.h>\n#include <netdb.h>\n#include <netinet/in.h>\n#include <sys/socket.h>\n#include <unistd.h>\n#include <chrono>\n#include <memory>\n#include <stdexcept>\n#include <system_error>\n#include <vector>\n\nnamespace hueplusplus\n{\nclass LinHttpHandler\n{\npublic:\n    std::string send(const std::string& msg, const std::string& adr, int port) const\n    {\n        int socketFD = socket(AF_INET, SOCK_STREAM, 0);\n\n        SocketCloser closeMySocket(socketFD);\n        if (socketFD < 0)\n        {\n            int errCode = errno;\n            throw(std::system_error(errCode, std::generic_category(), \"LinHttpHandler: Failed to open socket\"));\n        }\n\n        hostent* server = gethostbyname(adr.c_str());\n        if (server == NULL)\n        {\n            int errCode = errno;\n            throw(std::system_error(errCode, std::generic_category(), \"LinHttpHandler: gethostbyname\"));\n        }\n\n        sockaddr_in server_addr;\n        memset(&server_addr, 0, sizeof(server_addr));\n        server_addr.sin_family = AF_INET;\n        server_addr.sin_port = htons(port);\n        memcpy(&server_addr.sin_addr.s_addr, server->h_addr, server->h_length);\n\n        if (connect(socketFD, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0)\n        {\n            int errCode = errno;\n            throw(std::system_error(errCode, std::generic_category(), \"LinHttpHandler: Failed to connect socket\"));\n        }\n\n        size_t total = msg.length();\n        size_t sent = 0;\n        do\n        {\n            ssize_t bytes = write(socketFD, msg.c_str() + sent, total - sent);\n            if (bytes < 0)\n            {\n                int errCode = errno;\n                throw(std::system_error(errCode, std::generic_category(), \"LinHttpHandler: Failed to write message to socket\"));\n            }\n            sent += bytes;\n        } while (sent < total);\n\n        std::string response;\n        char buffer[128] = {};\n        do\n        {\n            ssize_t bytes = read(socketFD, buffer, 127);\n            if (bytes < 0)\n            {\n                int errCode = errno;\n                throw(std::system_error(errCode, std::generic_category(), \"LinHttpHandler: Failed to read response from socket\"));\n            }\n            response.append(buffer, bytes);\n        } while (true);\n\n        return response;\n    }\n\n    std::vector<std::string> sendMulticast(\n        const std::string& msg, const std::string& adr, int port, std::chrono::steady_clock::duration timeout) const\n    {\n        hostent* server;\n        sockaddr_in server_addr;\n\n        memset((char*)&server_addr, 0, sizeof(server_addr));\n        server_addr.sin_family = AF_INET;\n        server_addr.sin_port = htons(port);\n\n        server = gethostbyname(adr.c_str());\n        if (!server)\n        {\n            int errCode = errno;\n            throw(std::system_error(errCode, std::generic_category(), \"LinHttpHandler: sendMulticast: Failed to obtain address of host\"));\n        }\n\n        memcpy((void*)&server_addr.sin_addr, server->h_addr_list[0], server->h_length);\n\n        int socketFD = socket(AF_INET, SOCK_DGRAM, 0);\n        SocketCloser closeMySendSocket(socketFD);\n        if (socketFD < 0)\n        {\n            int errCode = errno;\n            throw(std::system_error(errCode, std::generic_category(), \"LinHttpHandler: sendMulticast: Failed to open socket\"));\n        }\n\n        if (sendto(socketFD, msg.c_str(), strlen(msg.c_str()), 0, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0)\n        {\n            int errCode = errno;\n            throw(std::system_error(errCode, std::generic_category(), \"LinHttpHandler: sendMulticast: Failed to send message\"));\n        }\n\n        std::string response;\n        char buffer[2048] = {};\n\n        std::chrono::steady_clock::time_point start = std::chrono::steady_clock::now();\n        while (std::chrono::steady_clock::now() - start < timeout)\n        {\n            ssize_t bytesReceived = recv(socketFD, &buffer, 2048, MSG_DONTWAIT);\n            if (bytesReceived < 0 && errno != EAGAIN && errno != EWOULDBLOCK)\n            {\n                int errCode = errno;\n                throw(std::system_error(errCode, std::generic_category(), \"LinHttpHandler: sendMulticast: Failed to read response from socket\"));\n            }\n            if (bytesReceived > 0)\n            {\n                response.append(buffer, bytesReceived);\n            }\n        }\n\n        std::vector<std::string> returnString;\n        size_t pos = response.find(\"\\r\\n\\r\\n\");\n        size_t prevpos = 0;\n        while (pos != std::string::npos)\n        {\n            returnString.push_back(response.substr(prevpos, pos - prevpos));\n            pos += 4;\n            prevpos = pos;\n            pos = response.find(\"\\r\\n\\r\\n\", pos);\n        }\n        return returnString;\n    }\n\nprivate:\n    class SocketCloser\n    {\n    public:\n        explicit SocketCloser(int sockFd) : s(sockFd) {}\n        ~SocketCloser() { close(s); }\n\n    private:\n        int s;\n    };\n};\n} // namespace hueplusplus",
    "Code_level": "Class-level",
    "FSMID_for_test": 149,
    "matched_results": [
      "#include <iostream>\n#include <string>\n#include <vector>\n#include <chrono>\n#include <stdexcept>\n#include <system_error>\n#include <cstring>\n#include <arpa/inet.h>\n#include <unistd.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <poll.h>\n\nclass LinHttpHandler {\npublic:\n    class SocketCloser {\n    public:\n        explicit SocketCloser(int sockFd) : sockFd_(sockFd) {}\n        ~SocketCloser() {\n            if (sockFd_ != -1) {\n                close(sockFd_);\n            }\n        }\n    private:\n        int sockFd_;\n    };\n\n    std::string send(const std::string& msg, const std::string& adr, int port) {\n        int sockFd = socket(AF_INET, SOCK_STREAM, 0);\n        if (sockFd == -1) {\n            throw std::system_error(errno, std::generic_category(), \"Failed to create socket\");\n        }\n        SocketCloser closer(sockFd);\n\n        sockaddr_in serverAddr{};\n        serverAddr.sin_family = AF_INET;\n        serverAddr.sin_port = htons(port);\n        if (inet_pton(AF_INET, adr.c_str(), &serverAddr.sin_addr) <= 0) {\n            throw std::system_error(errno, std::generic_category(), \"Invalid address\");\n        }\n\n        if (connect(sockFd, (struct sockaddr*)&serverAddr, sizeof(serverAddr)) < 0) {\n            throw std::system_error(errno, std::generic_category(), \"Connection failed\");\n        }\n\n        if (send(sockFd, msg.c_str(), msg.size(), 0) < 0) {\n            throw std::system_error(errno, std::generic_category(), \"Send failed\");\n        }\n\n        char buffer[4096];\n        ssize_t bytesRead = recv(sockFd, buffer, sizeof(buffer) - 1, 0);\n        if (bytesRead < 0) {\n            throw std::system_error(errno, std::generic_category(), \"Receive failed\");\n        }\n        buffer[bytesRead] = '\\0';\n        return std::string(buffer);\n    }\n\n    std::vector<std::string> sendMulticast(const std::string& msg, const std::string& adr, int port, std::chrono::steady_clock::duration timeout) {\n        int sockFd = socket(AF_INET, SOCK_DGRAM, 0);\n        if (sockFd == -1) {\n            throw std::system_error(errno, std::generic_category(), \"Failed to create socket\");\n        }\n        SocketCloser closer(sockFd);\n\n        sockaddr_in multicastAddr{};\n        multicastAddr.sin_family = AF_INET;\n        multicastAddr.sin_port = htons(port);\n        if (inet_pton(AF_INET, adr.c_str(), &multicastAddr.sin_addr) <= 0) {\n            throw std::system_error(errno, std::generic_category(), \"Invalid address\");\n        }\n\n        if (sendto(sockFd, msg.c_str(), msg.size(), 0, (struct sockaddr*)&multicastAddr, sizeof(multicastAddr)) < 0) {\n            throw std::system_error(errno, std::generic_category(), \"Sendto failed\");\n        }\n\n        std::vector<std::string> responses;\n        auto endTime = std::chrono::steady_clock::now() + timeout;\n        while (std::chrono::steady_clock::now() < endTime) {\n            pollfd fds[1];\n            fds[0].fd = sockFd;\n            fds[0].events = POLLIN;\n            int ret = poll(fds, 1, std::chrono::duration_cast<std::chrono::milliseconds>(endTime - std::chrono::steady_clock::now()).count());\n            if (ret > 0 && (fds[0].revents & POLLIN)) {\n                char buffer[4096];\n                ssize_t bytesRead = recv(sockFd, buffer, sizeof(buffer) - 1, 0);\n                if (bytesRead < 0) {\n                    throw std::system_error(errno, std::generic_category(), \"Receive failed\");\n                }\n                buffer[bytesRead] = '\\0';\n                responses.push_back(std::string(buffer));\n            }\n        }\n        return responses;\n    }\n};",
      "#include <iostream>\n#include <string>\n#include <vector>\n#include <chrono>\n#include <system_error>\n#include <stdexcept>\n#include <cstring>\n#include <arpa/inet.h>\n#include <unistd.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n\nclass LinHttpHandler {\npublic:\n    class SocketCloser {\n    public:\n        explicit SocketCloser(int sockFd) : sockFd(sockFd) {}\n        ~SocketCloser() {\n            if (sockFd != -1) {\n                close(sockFd);\n            }\n        }\n    private:\n        int sockFd;\n    };\n\n    std::string send(const std::string& msg, const std::string& adr, int port) {\n        int sockFd = socket(AF_INET, SOCK_STREAM, 0);\n        if (sockFd < 0) {\n            throw std::system_error(errno, std::generic_category(), \"Failed to create socket\");\n        }\n        SocketCloser closer(sockFd);\n\n        sockaddr_in serverAddr;\n        memset(&serverAddr, 0, sizeof(serverAddr));\n        serverAddr.sin_family = AF_INET;\n        serverAddr.sin_port = htons(port);\n        if (inet_pton(AF_INET, adr.c_str(), &serverAddr.sin_addr) <= 0) {\n            throw std::system_error(errno, std::generic_category(), \"Invalid address\");\n        }\n\n        if (connect(sockFd, (struct sockaddr*)&serverAddr, sizeof(serverAddr)) < 0) {\n            throw std::system_error(errno, std::generic_category(), \"Connection failed\");\n        }\n\n        if (send(sockFd, msg.c_str(), msg.size(), 0) < 0) {\n            throw std::system_error(errno, std::generic_category(), \"Send failed\");\n        }\n\n        char buffer[4096];\n        ssize_t bytesRead = recv(sockFd, buffer, sizeof(buffer) - 1, 0);\n        if (bytesRead < 0) {\n            throw std::system_error(errno, std::generic_category(), \"Receive failed\");\n        }\n        buffer[bytesRead] = '\\0';\n        return std::string(buffer);\n    }\n\n    std::vector<std::string> sendMulticast(const std::string& msg, const std::string& adr, int port, std::chrono::steady_clock::duration timeout) {\n        int sockFd = socket(AF_INET, SOCK_DGRAM, 0);\n        if (sockFd < 0) {\n            throw std::system_error(errno, std::generic_category(), \"Failed to create socket\");\n        }\n        SocketCloser closer(sockFd);\n\n        sockaddr_in multicastAddr;\n        memset(&multicastAddr, 0, sizeof(multicastAddr));\n        multicastAddr.sin_family = AF_INET;\n        multicastAddr.sin_port = htons(port);\n        if (inet_pton(AF_INET, adr.c_str(), &multicastAddr.sin_addr) <= 0) {\n            throw std::system_error(errno, std::generic_category(), \"Invalid address\");\n        }\n\n        if (sendto(sockFd, msg.c_str(), msg.size(), 0, (struct sockaddr*)&multicastAddr, sizeof(multicastAddr)) < 0) {\n            throw std::system_error(errno, std::generic_category(), \"Send failed\");\n        }\n\n        std::vector<std::string> responses;\n        auto endTime = std::chrono::steady_clock::now() + timeout;\n        while (std::chrono::steady_clock::now() < endTime) {\n            fd_set readfds;\n            FD_ZERO(&readfds);\n            FD_SET(sockFd, &readfds);\n\n            timeval tv;\n            tv.tv_sec = std::chrono::duration_cast<std::chrono::seconds>(timeout).count();\n            tv.tv_usec = std::chrono::duration_cast<std::chrono::microseconds>(timeout).count() % 1000000;\n\n            int result = select(sockFd + 1, &readfds, nullptr, nullptr, &tv);\n            if (result < 0) {\n                throw std::system_error(errno, std::generic_category(), \"Select failed\");\n            } else if (result == 0) {\n                break;\n            }\n\n            if (FD_ISSET(sockFd, &readfds)) {\n                char buffer[4096];\n                ssize_t bytesRead = recv(sockFd, buffer, sizeof(buffer) - 1, 0);\n                if (bytesRead < 0) {\n                    throw std::system_error(errno, std::generic_category(), \"Receive failed\");\n                }\n                buffer[bytesRead] = '\\0';\n                responses.push_back(std::string(buffer));\n            }\n        }\n        return responses;\n    }\n};",
      "```cpp\n#include <iostream>\n#include <string>\n#include <vector>\n#include <chrono>\n#include <system_error>\n#include <cstring>\n#include <arpa/inet.h>\n#include <unistd.h>\n#include <sys/socket.h>\n\nclass LinHttpHandler {\npublic:\n    class SocketCloser {\n    public:\n        explicit SocketCloser(int sockFd) : sockFd(sockFd) {}\n        ~SocketCloser() {\n            if (sockFd != -1) {\n                close(sockFd);\n            }\n        }\n    private:\n        int sockFd;\n    };\n\n    std::string send(const std::string& msg, const std::string& adr, int port) {\n        int sockFd = socket(AF_INET, SOCK_STREAM, 0);\n        if (sockFd == -1) {\n            throw std::system_error(errno, std::generic_category(), \"Failed to create socket\");\n        }\n        SocketCloser closer(sockFd);\n\n        sockaddr_in serverAddr;\n        memset(&serverAddr, 0, sizeof(serverAddr));\n        serverAddr.sin_family = AF_INET;\n        serverAddr.sin_port = htons(port);\n        if (inet_pton(AF_INET, adr.c_str(), &serverAddr.sin_addr) <= 0) {\n            throw std::system_error(errno, std::generic_category(), \"Invalid address\");\n        }\n\n        if (connect(sockFd, (struct sockaddr*)&serverAddr, sizeof(serverAddr)) < 0) {\n            throw std::system_error(errno, std::generic_category(), \"Connection failed\");\n        }\n\n        if (send(sockFd, msg.c_str(), msg.size(), 0) < 0) {\n            throw std::system_error(errno, std::generic_category(), \"Send failed\");\n        }\n\n        char buffer[4096];\n        ssize_t bytesReceived = recv(sockFd, buffer, sizeof(buffer) - 1, 0);\n        if (bytesReceived < 0) {\n            throw std::system_error(errno, std::generic_category(), \"Receive failed\");\n        }\n\n        buffer[bytesReceived] = '\\0';\n        return std::string(buffer);\n    }\n\n    std::vector<std::string> sendMulticast(const std::string& msg, const std::string& adr, int port, std::chrono::steady_clock::duration timeout) {\n        int sockFd = socket(AF_INET, SOCK_DGRAM, 0);\n        if (sockFd == -1) {\n            throw std::system_error(errno, std::generic_category(), \"Failed to create socket\");\n        }\n        SocketCloser closer(sockFd);\n\n        sockaddr_in multicastAddr;\n        memset(&multicastAddr, 0, sizeof(multicastAddr));\n        multicastAddr.sin_family = AF_INET;\n        multicastAddr.sin_port = htons(port);\n        if (inet_pton(AF_INET, adr.c_str(), &multicastAddr.sin_addr) <= 0) {\n            throw std::system_error(errno, std::generic_category(), \"Invalid address\");\n        }\n\n        if (sendto(sockFd, msg.c_str(), msg.size(), 0, (struct sockaddr*)&multicastAddr, sizeof(multicastAddr)) < 0) {\n            throw std::system_error(errno, std::generic_category(), \"Send failed\");\n        }\n\n        std::vector<std::string> responses;\n        auto endTime = std::chrono::steady_clock::now() + timeout;\n        while (std::chrono::steady_clock::now() < endTime) {\n            char buffer[4096];\n            sockaddr_in senderAddr;\n            socklen_t senderAddrLen = sizeof(senderAddr);\n            ssize_t bytesReceived = recvfrom(sockFd, buffer, sizeof(buffer) - 1, 0, (struct sockaddr*)&senderAddr, &senderAddrLen);\n            if (bytesReceived < 0) {\n                if (errno == EAGAIN || errno == EWOULDBLOCK) {\n                    continue;\n                }\n                throw std::system_error(errno, std::generic_category(), \"Receive failed\");\n            }\n\n            buffer[bytesReceived] = '\\0';\n            responses.emplace_back(buffer);\n        }\n\n        return responses;\n    }\n};\n```",
      "#include <iostream>\n#include <string>\n#include <vector>\n#include <stdexcept>\n#include <system_error>\n#include <chrono>\n#include <cstring>\n#include <arpa/inet.h>\n#include <unistd.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n\nclass LinHttpHandler {\npublic:\n    class SocketCloser {\n    public:\n        explicit SocketCloser(int sockFd) : sockFd(sockFd) {}\n        ~SocketCloser() {\n            if (sockFd != -1) {\n                close(sockFd);\n            }\n        }\n    private:\n        int sockFd;\n    };\n\n    std::string send(const std::string& msg, const std::string& adr, int port) {\n        int sockFd = socket(AF_INET, SOCK_STREAM, 0);\n        if (sockFd == -1) {\n            throw std::system_error(errno, std::generic_category(), \"Failed to create socket\");\n        }\n        SocketCloser closer(sockFd);\n\n        sockaddr_in serverAddr{};\n        serverAddr.sin_family = AF_INET;\n        serverAddr.sin_port = htons(port);\n        if (inet_pton(AF_INET, adr.c_str(), &serverAddr.sin_addr) <= 0) {\n            throw std::system_error(errno, std::generic_category(), \"Invalid address\");\n        }\n\n        if (connect(sockFd, (struct sockaddr*)&serverAddr, sizeof(serverAddr)) < 0) {\n            throw std::system_error(errno, std::generic_category(), \"Connection failed\");\n        }\n\n        if (send(sockFd, msg.c_str(), msg.size(), 0) < 0) {\n            throw std::system_error(errno, std::generic_category(), \"Send failed\");\n        }\n\n        char buffer[1024] = {0};\n        int bytesRead = recv(sockFd, buffer, sizeof(buffer) - 1, 0);\n        if (bytesRead < 0) {\n            throw std::system_error(errno, std::generic_category(), \"Receive failed\");\n        }\n\n        return std::string(buffer, bytesRead);\n    }\n\n    std::vector<std::string> sendMulticast(const std::string& msg, const std::string& adr, int port, std::chrono::steady_clock::duration timeout) {\n        int sockFd = socket(AF_INET, SOCK_DGRAM, 0);\n        if (sockFd == -1) {\n            throw std::system_error(errno, std::generic_category(), \"Failed to create socket\");\n        }\n        SocketCloser closer(sockFd);\n\n        sockaddr_in multicastAddr{};\n        multicastAddr.sin_family = AF_INET;\n        multicastAddr.sin_port = htons(port);\n        if (inet_pton(AF_INET, adr.c_str(), &multicastAddr.sin_addr) <= 0) {\n            throw std::system_error(errno, std::generic_category(), \"Invalid address\");\n        }\n\n        if (sendto(sockFd, msg.c_str(), msg.size(), 0, (struct sockaddr*)&multicastAddr, sizeof(multicastAddr)) < 0) {\n            throw std::system_error(errno, std::generic_category(), \"Sendto failed\");\n        }\n\n        std::vector<std::string> responses;\n        auto endTime = std::chrono::steady_clock::now() + timeout;\n        char buffer[1024];\n        sockaddr_in fromAddr{};\n        socklen_t fromLen = sizeof(fromAddr);\n\n        while (std::chrono::steady_clock::now() < endTime) {\n            fd_set readfds;\n            FD_ZERO(&readfds);\n            FD_SET(sockFd, &readfds);\n\n            timeval tv;\n            tv.tv_sec = std::chrono::duration_cast<std::chrono::seconds>(timeout).count();\n            tv.tv_usec = std::chrono::duration_cast<std::chrono::microseconds>(timeout).count() % 1000000;\n\n            int activity = select(sockFd + 1, &readfds, nullptr, nullptr, &tv);\n            if (activity < 0 && errno != EINTR) {\n                throw std::system_error(errno, std::generic_category(), \"Select failed\");\n            }\n\n            if (activity > 0 && FD_ISSET(sockFd, &readfds)) {\n                int bytesRead = recvfrom(sockFd, buffer, sizeof(buffer) - 1, 0, (struct sockaddr*)&fromAddr, &fromLen);\n                if (bytesRead < 0) {\n                    throw std::system_error(errno, std::generic_category(), \"Recvfrom failed\");\n                }\n                responses.emplace_back(buffer, bytesRead);\n            }\n        }\n\n        return responses;\n    }\n};",
      "#include <iostream>\n#include <string>\n#include <vector>\n#include <chrono>\n#include <stdexcept>\n#include <system_error>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n\nclass LinHttpHandler {\npublic:\n    class SocketCloser {\n    public:\n        explicit SocketCloser(int sockFd) : sockFd(sockFd) {}\n        ~SocketCloser() {\n            if (sockFd != -1) {\n                close(sockFd);\n            }\n        }\n    private:\n        int sockFd;\n    };\n\n    std::string send(const std::string& msg, const std::string& adr, int port) {\n        int sockFd = socket(AF_INET, SOCK_STREAM, 0);\n        if (sockFd == -1) {\n            throw std::system_error(errno, std::generic_category(), \"Failed to create socket\");\n        }\n        SocketCloser closer(sockFd);\n\n        sockaddr_in serverAddr;\n        memset(&serverAddr, 0, sizeof(serverAddr));\n        serverAddr.sin_family = AF_INET;\n        serverAddr.sin_port = htons(port);\n        if (inet_pton(AF_INET, adr.c_str(), &serverAddr.sin_addr) <= 0) {\n            throw std::system_error(errno, std::generic_category(), \"Invalid address\");\n        }\n\n        if (connect(sockFd, (struct sockaddr*)&serverAddr, sizeof(serverAddr)) < 0) {\n            throw std::system_error(errno, std::generic_category(), \"Connection failed\");\n        }\n\n        if (send(sockFd, msg.c_str(), msg.size(), 0) < 0) {\n            throw std::system_error(errno, std::generic_category(), \"Send failed\");\n        }\n\n        char buffer[4096];\n        int bytesRead = recv(sockFd, buffer, sizeof(buffer) - 1, 0);\n        if (bytesRead < 0) {\n            throw std::system_error(errno, std::generic_category(), \"Receive failed\");\n        }\n        buffer[bytesRead] = '\\0';\n        return std::string(buffer);\n    }\n\n    std::vector<std::string> sendMulticast(const std::string& msg, const std::string& adr, int port, std::chrono::steady_clock::duration timeout) {\n        int sockFd = socket(AF_INET, SOCK_DGRAM, 0);\n        if (sockFd == -1) {\n            throw std::system_error(errno, std::generic_category(), \"Failed to create socket\");\n        }\n        SocketCloser closer(sockFd);\n\n        sockaddr_in multicastAddr;\n        memset(&multicastAddr, 0, sizeof(multicastAddr));\n        multicastAddr.sin_family = AF_INET;\n        multicastAddr.sin_port = htons(port);\n        if (inet_pton(AF_INET, adr.c_str(), &multicastAddr.sin_addr) <= 0) {\n            throw std::system_error(errno, std::generic_category(), \"Invalid address\");\n        }\n\n        if (sendto(sockFd, msg.c_str(), msg.size(), 0, (struct sockaddr*)&multicastAddr, sizeof(multicastAddr)) < 0) {\n            throw std::system_error(errno, std::generic_category(), \"Sendto failed\");\n        }\n\n        std::vector<std::string> responses;\n        auto endTime = std::chrono::steady_clock::now() + timeout;\n        while (std::chrono::steady_clock::now() < endTime) {\n            char buffer[4096];\n            sockaddr_in srcAddr;\n            socklen_t srcAddrLen = sizeof(srcAddr);\n            int bytesRead = recvfrom(sockFd, buffer, sizeof(buffer) - 1, 0, (struct sockaddr*)&srcAddr, &srcAddrLen);\n            if (bytesRead < 0) {\n                if (errno == EAGAIN || errno == EWOULDBLOCK) {\n                    continue;\n                }\n                throw std::system_error(errno, std::generic_category(), \"Recvfrom failed\");\n            }\n            buffer[bytesRead] = '\\0';\n            responses.push_back(std::string(buffer));\n        }\n        return responses;\n    }\n};",
      "#include <iostream>\n#include <string>\n#include <vector>\n#include <stdexcept>\n#include <chrono>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n\nclass LinHttpHandler {\npublic:\n    class SocketCloser {\n    public:\n        explicit SocketCloser(int sockFd) : sockFd(sockFd) {}\n        ~SocketCloser() {\n            if (sockFd != -1) {\n                close(sockFd);\n            }\n        }\n    private:\n        int sockFd;\n    };\n\n    std::string send(const std::string& msg, const std::string& adr, int port) {\n        int sockFd = socket(AF_INET, SOCK_STREAM, 0);\n        if (sockFd < 0) {\n            throw std::system_error(errno, std::generic_category(), \"Failed to create socket\");\n        }\n        SocketCloser closer(sockFd);\n\n        sockaddr_in serverAddr{};\n        serverAddr.sin_family = AF_INET;\n        serverAddr.sin_port = htons(port);\n        if (inet_pton(AF_INET, adr.c_str(), &serverAddr.sin_addr) <= 0) {\n            throw std::system_error(errno, std::generic_category(), \"Invalid address\");\n        }\n\n        if (connect(sockFd, (struct sockaddr*)&serverAddr, sizeof(serverAddr)) < 0) {\n            throw std::system_error(errno, std::generic_category(), \"Connection failed\");\n        }\n\n        if (send(sockFd, msg.c_str(), msg.size(), 0) < 0) {\n            throw std::system_error(errno, std::generic_category(), \"Send failed\");\n        }\n\n        char buffer[4096];\n        ssize_t bytesRead = recv(sockFd, buffer, sizeof(buffer) - 1, 0);\n        if (bytesRead < 0) {\n            throw std::system_error(errno, std::generic_category(), \"Receive failed\");\n        }\n        buffer[bytesRead] = '\\0';\n        return std::string(buffer);\n    }\n\n    std::vector<std::string> sendMulticast(const std::string& msg, const std::string& adr, int port, std::chrono::steady_clock::duration timeout) {\n        int sockFd = socket(AF_INET, SOCK_DGRAM, 0);\n        if (sockFd < 0) {\n            throw std::system_error(errno, std::generic_category(), \"Failed to create socket\");\n        }\n        SocketCloser closer(sockFd);\n\n        sockaddr_in multicastAddr{};\n        multicastAddr.sin_family = AF_INET;\n        multicastAddr.sin_port = htons(port);\n        if (inet_pton(AF_INET, adr.c_str(), &multicastAddr.sin_addr) <= 0) {\n            throw std::system_error(errno, std::generic_category(), \"Invalid multicast address\");\n        }\n\n        if (sendto(sockFd, msg.c_str(), msg.size(), 0, (struct sockaddr*)&multicastAddr, sizeof(multicastAddr)) < 0) {\n            throw std::system_error(errno, std::generic_category(), \"Sendto failed\");\n        }\n\n        std::vector<std::string> responses;\n        auto endTime = std::chrono::steady_clock::now() + timeout;\n        while (std::chrono::steady_clock::now() < endTime) {\n            char buffer[4096];\n            sockaddr_in senderAddr{};\n            socklen_t senderAddrLen = sizeof(senderAddr);\n            ssize_t bytesRead = recvfrom(sockFd, buffer, sizeof(buffer) - 1, MSG_DONTWAIT, (struct sockaddr*)&senderAddr, &senderAddrLen);\n            if (bytesRead > 0) {\n                buffer[bytesRead] = '\\0';\n                responses.emplace_back(buffer);\n            } else if (bytesRead < 0 && errno != EAGAIN && errno != EWOULDBLOCK) {\n                throw std::system_error(errno, std::generic_category(), \"Recvfrom failed\");\n            }\n        }\n        return responses;\n    }\n};"
    ],
    "unmatched_results": [
      "class LinHttpHandler {\npublic:\n    class SocketCloser {\n    public:\n        explicit SocketCloser(int sockFd) : sockFd_(sockFd) {}\n        ~SocketCloser() {\n            if (sockFd_ != -1) {\n                close(sockFd_);\n            }\n        }\n    private:\n        int sockFd_;\n    };\n\n    std::string send(const std::string& msg, const std::string& adr, int port) {\n        int sockFd = socket(AF_INET, SOCK_STREAM, 0);\n        if (sockFd == -1) {\n            throw std::system_error(errno, std::generic_category(), \"Failed to create socket\");\n        }\n        SocketCloser closer(sockFd);\n\n        sockaddr_in serverAddr{};\n        serverAddr.sin_family = AF_INET;\n        serverAddr.sin_port = htons(port);\n        if (inet_pton(AF_INET, adr.c_str(), &serverAddr.sin_addr) <= 0) {\n            throw std::system_error(errno, std::generic_category(), \"Invalid address\");\n        }\n\n        if (connect(sockFd, (struct sockaddr*)&serverAddr, sizeof(serverAddr)) < 0) {\n            throw std::system_error(errno, std::generic_category(), \"Connection failed\");\n        }\n\n        if (send(sockFd, msg.c_str(), msg.size(), 0) < 0) {\n            throw std::system_error(errno, std::generic_category(), \"Send failed\");\n        }\n\n        char buffer[4096];\n        ssize_t bytesRead = recv(sockFd, buffer, sizeof(buffer) - 1, 0);\n        if (bytesRead < 0) {\n            throw std::system_error(errno, std::generic_category(), \"Receive failed\");\n        }\n        buffer[bytesRead] = '\\0';\n        return std::string(buffer);\n    }\n\n    std::vector<std::string> sendMulticast(const std::string& msg, const std::string& adr, int port, std::chrono::steady_clock::duration timeout) {\n        int sockFd = socket(AF_INET, SOCK_DGRAM, 0);\n        if (sockFd == -1) {\n            throw std::system_error(errno, std::generic_category(), \"Failed to create socket\");\n        }\n        SocketCloser closer(sockFd);\n\n        sockaddr_in multicastAddr{};\n        multicastAddr.sin_family = AF_INET;\n        multicastAddr.sin_port = htons(port);\n        if (inet_pton(AF_INET, adr.c_str(), &multicastAddr.sin_addr) <= 0) {\n            throw std::system_error(errno, std::generic_category(), \"Invalid address\");\n        }\n\n        if (sendto(sockFd, msg.c_str(), msg.size(), 0, (struct sockaddr*)&multicastAddr, sizeof(multicastAddr)) < 0) {\n            throw std::system_error(errno, std::generic_category(), \"Sendto failed\");\n        }\n\n        std::vector<std::string> responses;\n        auto endTime = std::chrono::steady_clock::now() + timeout;\n        while (std::chrono::steady_clock::now() < endTime) {\n            char buffer[4096];\n            sockaddr_in fromAddr{};\n            socklen_t fromAddrLen = sizeof(fromAddr);\n            ssize_t bytesRead = recvfrom(sockFd, buffer, sizeof(buffer) - 1, 0, (struct sockaddr*)&fromAddr, &fromAddrLen);\n            if (bytesRead < 0) {\n                if (errno == EAGAIN || errno == EWOULDBLOCK) {\n                    continue;\n                }\n                throw std::system_error(errno, std::generic_category(), \"Recvfrom failed\");\n            }\n            buffer[bytesRead] = '\\0';\n            responses.push_back(std::string(buffer));\n        }\n        return responses;\n    }\n};",
      "class LinHttpHandler {\npublic:\n    class SocketCloser {\n    public:\n        explicit SocketCloser(int sockFd) : sockFd_(sockFd) {}\n        ~SocketCloser() {\n            if (sockFd_ != -1) {\n                close(sockFd_);\n            }\n        }\n    private:\n        int sockFd_;\n    };\n\n    std::string send(const std::string& msg, const std::string& adr, int port) {\n        int sockFd = socket(AF_INET, SOCK_STREAM, 0);\n        if (sockFd == -1) {\n            throw std::system_error(errno, std::generic_category(), \"Failed to create socket\");\n        }\n        SocketCloser closer(sockFd);\n\n        sockaddr_in serverAddr{};\n        serverAddr.sin_family = AF_INET;\n        serverAddr.sin_port = htons(port);\n        if (inet_pton(AF_INET, adr.c_str(), &serverAddr.sin_addr) <= 0) {\n            throw std::system_error(errno, std::generic_category(), \"Invalid address\");\n        }\n\n        if (connect(sockFd, (struct sockaddr*)&serverAddr, sizeof(serverAddr)) < 0) {\n            throw std::system_error(errno, std::generic_category(), \"Connection failed\");\n        }\n\n        if (send(sockFd, msg.c_str(), msg.size(), 0) < 0) {\n            throw std::system_error(errno, std::generic_category(), \"Send failed\");\n        }\n\n        char buffer[4096];\n        ssize_t bytesRead = recv(sockFd, buffer, sizeof(buffer) - 1, 0);\n        if (bytesRead < 0) {\n            throw std::system_error(errno, std::generic_category(), \"Receive failed\");\n        }\n        buffer[bytesRead] = '\\0';\n\n        return std::string(buffer);\n    }\n\n    std::vector<std::string> sendMulticast(const std::string& msg, const std::string& adr, int port, std::chrono::steady_clock::duration timeout) {\n        int sockFd = socket(AF_INET, SOCK_DGRAM, 0);\n        if (sockFd == -1) {\n            throw std::system_error(errno, std::generic_category(), \"Failed to create socket\");\n        }\n        SocketCloser closer(sockFd);\n\n        sockaddr_in multicastAddr{};\n        multicastAddr.sin_family = AF_INET;\n        multicastAddr.sin_port = htons(port);\n        if (inet_pton(AF_INET, adr.c_str(), &multicastAddr.sin_addr) <= 0) {\n            throw std::system_error(errno, std::generic_category(), \"Invalid address\");\n        }\n\n        if (sendto(sockFd, msg.c_str(), msg.size(), 0, (struct sockaddr*)&multicastAddr, sizeof(multicastAddr)) < 0) {\n            throw std::system_error(errno, std::generic_category(), \"Sendto failed\");\n        }\n\n        std::vector<std::string> responses;\n        auto endTime = std::chrono::steady_clock::now() + timeout;\n        while (std::chrono::steady_clock::now() < endTime) {\n            fd_set readFds;\n            FD_ZERO(&readFds);\n            FD_SET(sockFd, &readFds);\n\n            timeval tv;\n            tv.tv_sec = std::chrono::duration_cast<std::chrono::seconds>(timeout).count();\n            tv.tv_usec = std::chrono::duration_cast<std::chrono::microseconds>(timeout).count() % 1000000;\n\n            int result = select(sockFd + 1, &readFds, nullptr, nullptr, &tv);\n            if (result < 0) {\n                throw std::system_error(errno, std::generic_category(), \"Select failed\");\n            } else if (result == 0) {\n                break;\n            }\n\n            char buffer[4096];\n            sockaddr_in fromAddr{};\n            socklen_t fromLen = sizeof(fromAddr);\n            ssize_t bytesRead = recvfrom(sockFd, buffer, sizeof(buffer) - 1, 0, (struct sockaddr*)&fromAddr, &fromLen);\n            if (bytesRead < 0) {\n                throw std::system_error(errno, std::generic_category(), \"Recvfrom failed\");\n            }\n            buffer[bytesRead] = '\\0';\n            responses.emplace_back(buffer);\n        }\n\n        return responses;\n    }\n};",
      "class LinHttpHandler {\npublic:\n    class SocketCloser {\n    public:\n        explicit SocketCloser(int sockFd) : sockFd_(sockFd) {}\n        ~SocketCloser() {\n            if (sockFd_ != -1) {\n                close(sockFd_);\n            }\n        }\n    private:\n        int sockFd_;\n    };\n\n    std::string send(const std::string& msg, const std::string& adr, int port) {\n        int sockFd = socket(AF_INET, SOCK_STREAM, 0);\n        if (sockFd == -1) {\n            throw std::system_error(errno, std::generic_category(), \"Failed to create socket\");\n        }\n        SocketCloser closer(sockFd);\n\n        sockaddr_in serverAddr{};\n        serverAddr.sin_family = AF_INET;\n        serverAddr.sin_port = htons(port);\n        if (inet_pton(AF_INET, adr.c_str(), &serverAddr.sin_addr) <= 0) {\n            throw std::system_error(errno, std::generic_category(), \"Invalid address\");\n        }\n\n        if (connect(sockFd, (struct sockaddr*)&serverAddr, sizeof(serverAddr)) < 0) {\n            throw std::system_error(errno, std::generic_category(), \"Connection failed\");\n        }\n\n        if (send(sockFd, msg.c_str(), msg.size(), 0) < 0) {\n            throw std::system_error(errno, std::generic_category(), \"Send failed\");\n        }\n\n        char buffer[4096];\n        int bytesRead = recv(sockFd, buffer, sizeof(buffer) - 1, 0);\n        if (bytesRead < 0) {\n            throw std::system_error(errno, std::generic_category(), \"Receive failed\");\n        }\n        buffer[bytesRead] = '\\0';\n\n        return std::string(buffer);\n    }\n\n    std::vector<std::string> sendMulticast(const std::string& msg, const std::string& adr, int port, std::chrono::steady_clock::duration timeout) {\n        int sockFd = socket(AF_INET, SOCK_DGRAM, 0);\n        if (sockFd == -1) {\n            throw std::system_error(errno, std::generic_category(), \"Failed to create socket\");\n        }\n        SocketCloser closer(sockFd);\n\n        sockaddr_in multicastAddr{};\n        multicastAddr.sin_family = AF_INET;\n        multicastAddr.sin_port = htons(port);\n        if (inet_pton(AF_INET, adr.c_str(), &multicastAddr.sin_addr) <= 0) {\n            throw std::system_error(errno, std::generic_category(), \"Invalid address\");\n        }\n\n        if (sendto(sockFd, msg.c_str(), msg.size(), 0, (struct sockaddr*)&multicastAddr, sizeof(multicastAddr)) < 0) {\n            throw std::system_error(errno, std::generic_category(), \"Sendto failed\");\n        }\n\n        std::vector<std::string> responses;\n        auto endTime = std::chrono::steady_clock::now() + timeout;\n\n        while (std::chrono::steady_clock::now() < endTime) {\n            fd_set readfds;\n            FD_ZERO(&readfds);\n            FD_SET(sockFd, &readfds);\n\n            timeval tv;\n            tv.tv_sec = std::chrono::duration_cast<std::chrono::seconds>(timeout).count();\n            tv.tv_usec = std::chrono::duration_cast<std::chrono::microseconds>(timeout).count() % 1000000;\n\n            int ret = select(sockFd + 1, &readfds, nullptr, nullptr, &tv);\n            if (ret < 0) {\n                throw std::system_error(errno, std::generic_category(), \"Select failed\");\n            } else if (ret == 0) {\n                break;\n            }\n\n            char buffer[4096];\n            socklen_t addrLen = sizeof(multicastAddr);\n            int bytesRead = recvfrom(sockFd, buffer, sizeof(buffer) - 1, 0, (struct sockaddr*)&multicastAddr, &addrLen);\n            if (bytesRead < 0) {\n                throw std::system_error(errno, std::generic_category(), \"Recvfrom failed\");\n            }\n            buffer[bytesRead] = '\\0';\n            responses.emplace_back(buffer);\n        }\n\n        return responses;\n    }\n};",
      "class LinHttpHandler {\npublic:\n    class SocketCloser {\n    public:\n        explicit SocketCloser(int sockFd) : sockFd_(sockFd) {}\n        ~SocketCloser() {\n            if (sockFd_ != -1) {\n                close(sockFd_);\n            }\n        }\n    private:\n        int sockFd_;\n    };\n\n    std::string send(const std::string& msg, const std::string& adr, int port) {\n        int sockFd = socket(AF_INET, SOCK_STREAM, 0);\n        if (sockFd == -1) {\n            throw std::system_error(errno, std::generic_category(), \"Failed to create socket\");\n        }\n        SocketCloser closer(sockFd);\n\n        sockaddr_in serverAddr{};\n        serverAddr.sin_family = AF_INET;\n        serverAddr.sin_port = htons(port);\n        if (inet_pton(AF_INET, adr.c_str(), &serverAddr.sin_addr) <= 0) {\n            throw std::system_error(errno, std::generic_category(), \"Invalid address\");\n        }\n\n        if (connect(sockFd, (struct sockaddr*)&serverAddr, sizeof(serverAddr)) < 0) {\n            throw std::system_error(errno, std::generic_category(), \"Connection failed\");\n        }\n\n        if (send(sockFd, msg.c_str(), msg.size(), 0) < 0) {\n            throw std::system_error(errno, std::generic_category(), \"Send failed\");\n        }\n\n        char buffer[4096];\n        int bytesRead = recv(sockFd, buffer, sizeof(buffer) - 1, 0);\n        if (bytesRead < 0) {\n            throw std::system_error(errno, std::generic_category(), \"Receive failed\");\n        }\n\n        buffer[bytesRead] = '\\0';\n        return std::string(buffer);\n    }\n\n    std::vector<std::string> sendMulticast(const std::string& msg, const std::string& adr, int port, std::chrono::steady_clock::duration timeout) {\n        int sockFd = socket(AF_INET, SOCK_DGRAM, 0);\n        if (sockFd == -1) {\n            throw std::system_error(errno, std::generic_category(), \"Failed to create socket\");\n        }\n        SocketCloser closer(sockFd);\n\n        sockaddr_in multicastAddr{};\n        multicastAddr.sin_family = AF_INET;\n        multicastAddr.sin_port = htons(port);\n        if (inet_pton(AF_INET, adr.c_str(), &multicastAddr.sin_addr) <= 0) {\n            throw std::system_error(errno, std::generic_category(), \"Invalid address\");\n        }\n\n        if (sendto(sockFd, msg.c_str(), msg.size(), 0, (struct sockaddr*)&multicastAddr, sizeof(multicastAddr)) < 0) {\n            throw std::system_error(errno, std::generic_category(), \"Sendto failed\");\n        }\n\n        std::vector<std::string> responses;\n        auto endTime = std::chrono::steady_clock::now() + timeout;\n        while (std::chrono::steady_clock::now() < endTime) {\n            fd_set readfds;\n            FD_ZERO(&readfds);\n            FD_SET(sockFd, &readfds);\n\n            timeval tv;\n            tv.tv_sec = std::chrono::duration_cast<std::chrono::seconds>(timeout).count();\n            tv.tv_usec = std::chrono::duration_cast<std::chrono::microseconds>(timeout).count() % 1000000;\n\n            int ret = select(sockFd + 1, &readfds, nullptr, nullptr, &tv);\n            if (ret < 0) {\n                throw std::system_error(errno, std::generic_category(), \"Select failed\");\n            } else if (ret == 0) {\n                break;\n            }\n\n            char buffer[4096];\n            sockaddr_in senderAddr{};\n            socklen_t senderAddrLen = sizeof(senderAddr);\n            int bytesRead = recvfrom(sockFd, buffer, sizeof(buffer) - 1, 0, (struct sockaddr*)&senderAddr, &senderAddrLen);\n            if (bytesRead < 0) {\n                throw std::system_error(errno, std::generic_category(), \"Recvfrom failed\");\n            }\n\n            buffer[bytesRead] = '\\0';\n            responses.push_back(std::string(buffer));\n        }\n\n        return responses;\n    }\n};"
    ],
    "match_count": 6,
    "pass@3": 0.9666666666666667,
    "pass@5": 1.0
  },
  {
    "Task_id": 15,
    "Instruction": "Task Description: Implement a TCP client function in C++ that establishes a connection to a server, sends a single character, receives a response, and then closes the connection.\n\nFunction Description: The function `tcp_client_communication` creates a TCP socket, connects to a specified server address and port, sends a predefined character ('A') to the server, reads the server's response, prints the received character, and finally closes the socket. This demonstrates basic TCP client functionality using BSD sockets.\n\nInput: None (The server address and port are hardcoded as 127.0.0.1:9736 in the function)\n\nOutput: \n- Returns 0 on successful execution\n- Prints the received character from the server\n- Exits with error code 1 if connection fails",
    "Canonical_solution": "#include <unistd.h>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <stdio.h>\n#include <stdlib.h>\n\nint tcp_client_communication()\n{\n    int sockfd = -1;\n    int len = 0;\n    struct sockaddr_in address;\n    int result;\n    char ch = 'A';\n    \n    sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    \n    address.sin_family = AF_INET;\n    address.sin_addr.s_addr = inet_addr(\"127.0.0.1\");\n    address.sin_port = htons(9736);\n    len = sizeof(address);\n    \n    result = connect(sockfd, (struct sockaddr*)&address, len);\n\n    if(result == -1)\n    {\n        perror(\"ops:client\\n\");\n        exit(1);\n    }\n    \n    write(sockfd, &ch, 1);\n    read(sockfd, &ch, 1);\n    printf(\"char form server = %c\\n\", ch);\n    close(sockfd);\n    return 0;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 149,
    "matched_results": [
      "#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint tcp_client_communication() {\n    int sockfd;\n    struct sockaddr_in server_addr;\n    char send_char = 'A';\n    char recv_char;\n\n    sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd < 0) {\n        std::cerr << \"Error creating socket\" << std::endl;\n        return 1;\n    }\n\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(9736);\n    if (inet_pton(AF_INET, \"127.0.0.1\", &server_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        close(sockfd);\n        return 1;\n    }\n\n    if (connect(sockfd, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        close(sockfd);\n        return 1;\n    }\n\n    send(sockfd, &send_char, 1, 0);\n\n    if (recv(sockfd, &recv_char, 1, 0) <= 0) {\n        std::cerr << \"Failed to receive data\" << std::endl;\n        close(sockfd);\n        return 1;\n    }\n\n    std::cout << \"Received: \" << recv_char << std::endl;\n\n    close(sockfd);\n    return 0;\n}\n\nint main() {\n    return tcp_client_communication();\n}",
      "#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint tcp_client_communication() {\n    int sockfd;\n    struct sockaddr_in server_addr;\n    char send_char = 'A';\n    char recv_char;\n\n    sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd < 0) {\n        std::cerr << \"Error creating socket\" << std::endl;\n        return 1;\n    }\n\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(9736);\n    if (inet_pton(AF_INET, \"127.0.0.1\", &server_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        close(sockfd);\n        return 1;\n    }\n\n    if (connect(sockfd, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        close(sockfd);\n        return 1;\n    }\n\n    if (send(sockfd, &send_char, 1, 0) < 0) {\n        std::cerr << \"Send failed\" << std::endl;\n        close(sockfd);\n        return 1;\n    }\n\n    if (recv(sockfd, &recv_char, 1, 0) < 0) {\n        std::cerr << \"Receive failed\" << std::endl;\n        close(sockfd);\n        return 1;\n    }\n\n    std::cout << \"Received: \" << recv_char << std::endl;\n\n    close(sockfd);\n    return 0;\n}\n\nint main() {\n    return tcp_client_communication();\n}",
      "#include <iostream>\n#include <cstring>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n\nint tcp_client_communication() {\n    int sockfd;\n    struct sockaddr_in server_addr;\n    char send_char = 'A';\n    char recv_char;\n\n    sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd < 0) {\n        std::cerr << \"Error creating socket\" << std::endl;\n        return 1;\n    }\n\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(9736);\n    server_addr.sin_addr.s_addr = inet_addr(\"127.0.0.1\");\n\n    if (connect(sockfd, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {\n        std::cerr << \"Error connecting to server\" << std::endl;\n        close(sockfd);\n        return 1;\n    }\n\n    if (send(sockfd, &send_char, 1, 0) < 0) {\n        std::cerr << \"Error sending data\" << std::endl;\n        close(sockfd);\n        return 1;\n    }\n\n    if (recv(sockfd, &recv_char, 1, 0) < 0) {\n        std::cerr << \"Error receiving data\" << std::endl;\n        close(sockfd);\n        return 1;\n    }\n\n    std::cout << \"Received character: \" << recv_char << std::endl;\n\n    close(sockfd);\n    return 0;\n}\n\nint main() {\n    return tcp_client_communication();\n}",
      "#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint tcp_client_communication() {\n    int sock = 0;\n    struct sockaddr_in serv_addr;\n    char sendChar = 'A';\n    char recvChar;\n\n    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation error\" << std::endl;\n        return 1;\n    }\n\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(9736);\n\n    if (inet_pton(AF_INET, \"127.0.0.1\", &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        return 1;\n    }\n\n    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        return 1;\n    }\n\n    send(sock, &sendChar, 1, 0);\n    read(sock, &recvChar, 1);\n    std::cout << \"Received: \" << recvChar << std::endl;\n\n    close(sock);\n    return 0;\n}",
      "#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint tcp_client_communication() {\n    int sock = 0;\n    struct sockaddr_in serv_addr;\n    char send_char = 'A';\n    char recv_char;\n\n    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation error\" << std::endl;\n        return 1;\n    }\n\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(9736);\n\n    if (inet_pton(AF_INET, \"127.0.0.1\", &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        return 1;\n    }\n\n    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        return 1;\n    }\n\n    send(sock, &send_char, 1, 0);\n    read(sock, &recv_char, 1);\n    std::cout << \"Received: \" << recv_char << std::endl;\n\n    close(sock);\n    return 0;\n}",
      "#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint tcp_client_communication() {\n    int sockfd;\n    struct sockaddr_in server_addr;\n    char send_char = 'A';\n    char recv_char;\n\n    sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd < 0) {\n        std::cerr << \"Error creating socket\" << std::endl;\n        return 1;\n    }\n\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(9736);\n    server_addr.sin_addr.s_addr = inet_addr(\"127.0.0.1\");\n\n    if (connect(sockfd, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {\n        std::cerr << \"Error connecting to server\" << std::endl;\n        close(sockfd);\n        return 1;\n    }\n\n    if (send(sockfd, &send_char, sizeof(send_char), 0) < 0) {\n        std::cerr << \"Error sending data\" << std::endl;\n        close(sockfd);\n        return 1;\n    }\n\n    if (recv(sockfd, &recv_char, sizeof(recv_char), 0) < 0) {\n        std::cerr << \"Error receiving data\" << std::endl;\n        close(sockfd);\n        return 1;\n    }\n\n    std::cout << \"Received character: \" << recv_char << std::endl;\n\n    close(sockfd);\n    return 0;\n}\n\nint main() {\n    return tcp_client_communication();\n}",
      "#include <iostream>\n#include <cstring>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n\nint tcp_client_communication() {\n    int sockfd;\n    struct sockaddr_in server_addr;\n    char send_char = 'A';\n    char recv_char;\n\n    sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd < 0) {\n        std::cerr << \"Error creating socket\" << std::endl;\n        return 1;\n    }\n\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(9736);\n    server_addr.sin_addr.s_addr = inet_addr(\"127.0.0.1\");\n    memset(server_addr.sin_zero, '\\0', sizeof(server_addr.sin_zero));\n\n    if (connect(sockfd, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {\n        std::cerr << \"Error connecting to server\" << std::endl;\n        close(sockfd);\n        return 1;\n    }\n\n    if (send(sockfd, &send_char, sizeof(send_char), 0) < 0) {\n        std::cerr << \"Error sending data\" << std::endl;\n        close(sockfd);\n        return 1;\n    }\n\n    if (recv(sockfd, &recv_char, sizeof(recv_char), 0) < 0) {\n        std::cerr << \"Error receiving data\" << std::endl;\n        close(sockfd);\n        return 1;\n    }\n\n    std::cout << \"Received character: \" << recv_char << std::endl;\n\n    close(sockfd);\n    return 0;\n}",
      "#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint tcp_client_communication() {\n    int sockfd;\n    struct sockaddr_in server_addr;\n    char send_char = 'A';\n    char recv_char;\n\n    sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd < 0) {\n        std::cerr << \"Error creating socket\" << std::endl;\n        return 1;\n    }\n\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(9736);\n    server_addr.sin_addr.s_addr = inet_addr(\"127.0.0.1\");\n\n    if (connect(sockfd, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {\n        std::cerr << \"Error connecting to server\" << std::endl;\n        close(sockfd);\n        return 1;\n    }\n\n    if (send(sockfd, &send_char, 1, 0) < 0) {\n        std::cerr << \"Error sending data\" << std::endl;\n        close(sockfd);\n        return 1;\n    }\n\n    if (recv(sockfd, &recv_char, 1, 0) < 0) {\n        std::cerr << \"Error receiving data\" << std::endl;\n        close(sockfd);\n        return 1;\n    }\n\n    std::cout << \"Received character: \" << recv_char << std::endl;\n\n    close(sockfd);\n    return 0;\n}",
      "#include <iostream>\n#include <cstring>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n\nint tcp_client_communication() {\n    int sockfd;\n    struct sockaddr_in server_addr;\n    char send_char = 'A';\n    char recv_char;\n\n    sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd < 0) {\n        std::cerr << \"Error creating socket\" << std::endl;\n        return 1;\n    }\n\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(9736);\n    server_addr.sin_addr.s_addr = inet_addr(\"127.0.0.1\");\n    memset(server_addr.sin_zero, '\\0', sizeof(server_addr.sin_zero));\n\n    if (connect(sockfd, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {\n        std::cerr << \"Error connecting to server\" << std::endl;\n        close(sockfd);\n        return 1;\n    }\n\n    if (send(sockfd, &send_char, sizeof(send_char), 0) < 0) {\n        std::cerr << \"Error sending data\" << std::endl;\n        close(sockfd);\n        return 1;\n    }\n\n    if (recv(sockfd, &recv_char, sizeof(recv_char), 0) < 0) {\n        std::cerr << \"Error receiving data\" << std::endl;\n        close(sockfd);\n        return 1;\n    }\n\n    std::cout << \"Received: \" << recv_char << std::endl;\n\n    close(sockfd);\n    return 0;\n}",
      "#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint tcp_client_communication() {\n    int sockfd;\n    struct sockaddr_in server_addr;\n    char send_char = 'A';\n    char recv_char;\n\n    sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd < 0) {\n        std::cerr << \"Error creating socket\" << std::endl;\n        return 1;\n    }\n\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(9736);\n    server_addr.sin_addr.s_addr = inet_addr(\"127.0.0.1\");\n\n    if (connect(sockfd, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {\n        std::cerr << \"Error connecting to server\" << std::endl;\n        close(sockfd);\n        return 1;\n    }\n\n    if (send(sockfd, &send_char, sizeof(send_char), 0) < 0) {\n        std::cerr << \"Error sending data\" << std::endl;\n        close(sockfd);\n        return 1;\n    }\n\n    if (recv(sockfd, &recv_char, sizeof(recv_char), 0) < 0) {\n        std::cerr << \"Error receiving data\" << std::endl;\n        close(sockfd);\n        return 1;\n    }\n\n    std::cout << \"Received character: \" << recv_char << std::endl;\n\n    close(sockfd);\n    return 0;\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 16,
    "Instruction": "Task Description: Implement a TCP client in C++ that can establish a connection to a server, send data, and receive responses.\n\nFunction Description: The code consists of two main functions for creating and communicating with a TCP client. The first function creates and connects a TCP socket to a specified server, while the second function handles the communication loop for sending and receiving data.\n\nInput:\n- create_tcp_client:\n  - server_ip: const char* - The IP address of the server to connect to\n  - port: int - The port number of the server to connect to\n- tcp_client_communication:\n  - sockfd: int - The socket file descriptor returned by create_tcp_client\n\nOutput:\n- create_tcp_client:\n  - Returns: int - The socket file descriptor on success, -1 on failure\n- tcp_client_communication:\n  - No return value (void), but performs continuous communication until connection is terminated",
    "Canonical_solution": "#include <sys/socket.h>\n#include <arpa/inet.h>\n#include <string.h>\n#include <unistd.h>\n\n#define BUFFER_SIZE 1024\n\nint create_tcp_client(const char* server_ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if(sockfd == -1) return -1;\n\n    struct sockaddr_in serv_addr;\n    bzero(&serv_addr, sizeof(serv_addr));\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_addr.s_addr = inet_addr(server_ip);\n    serv_addr.sin_port = htons(port);\n\n    if(connect(sockfd, (sockaddr*)&serv_addr, sizeof(serv_addr)) == -1) {\n        close(sockfd);\n        return -1;\n    }\n    \n    return sockfd;\n}\n\nvoid tcp_client_communication(int sockfd) {\n    while(true){\n        char buf[BUFFER_SIZE];\n        bzero(&buf, sizeof(buf));\n        scanf(\"%s\", buf);\n        ssize_t write_bytes = write(sockfd, buf, sizeof(buf));\n        if(write_bytes == -1){\n            printf(\"socket already disconnected, can't write any more!\\n\");\n            break;\n        }\n        bzero(&buf, sizeof(buf));\n        ssize_t read_bytes = read(sockfd, buf, sizeof(buf));\n        if(read_bytes > 0){\n            printf(\"message from server: %s\\n\", buf);\n        }else if(read_bytes == 0){\n            printf(\"server socket disconnected!\\n\");\n            break;\n        }else if(read_bytes == -1){\n            close(sockfd);\n            break;\n        }\n    }\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 149,
    "matched_results": [
      "#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint create_tcp_client(const char* server_ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd < 0) {\n        std::cerr << \"Error creating socket\" << std::endl;\n        return -1;\n    }\n\n    struct sockaddr_in server_addr;\n    memset(&server_addr, 0, sizeof(server_addr));\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(port);\n    if (inet_pton(AF_INET, server_ip, &server_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcp_client_communication(int sockfd) {\n    char buffer[1024] = {0};\n    std::string message;\n\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, message);\n        if (message == \"exit\") {\n            break;\n        }\n\n        send(sockfd, message.c_str(), message.length(), 0);\n        int valread = read(sockfd, buffer, 1024);\n        if (valread < 0) {\n            std::cerr << \"Read error\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Server: \" << buffer << std::endl;\n        memset(buffer, 0, sizeof(buffer));\n    }\n\n    close(sockfd);\n}",
      "#include <iostream>\n#include <cstring>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n\nint create_tcp_client(const char* server_ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd < 0) {\n        std::cerr << \"Error creating socket\" << std::endl;\n        return -1;\n    }\n\n    struct sockaddr_in server_addr;\n    memset(&server_addr, 0, sizeof(server_addr));\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(port);\n    if (inet_pton(AF_INET, server_ip, &server_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcp_client_communication(int sockfd) {\n    char buffer[1024];\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::cin.getline(buffer, 1024);\n\n        if (send(sockfd, buffer, strlen(buffer), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        int bytes_received = recv(sockfd, buffer, 1024, 0);\n        if (bytes_received < 0) {\n            std::cerr << \"Receive failed\" << std::endl;\n            break;\n        } else if (bytes_received == 0) {\n            std::cout << \"Server closed connection\" << std::endl;\n            break;\n        }\n\n        buffer[bytes_received] = '\\0';\n        std::cout << \"Server: \" << buffer << std::endl;\n    }\n\n    close(sockfd);\n}",
      "#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint create_tcp_client(const char* server_ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd < 0) {\n        std::cerr << \"Error creating socket\" << std::endl;\n        return -1;\n    }\n\n    struct sockaddr_in server_addr;\n    memset(&server_addr, 0, sizeof(server_addr));\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, server_ip, &server_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcp_client_communication(int sockfd) {\n    char buffer[1024] = {0};\n    std::string message;\n\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, message);\n\n        if (message == \"exit\") {\n            break;\n        }\n\n        send(sockfd, message.c_str(), message.length(), 0);\n        int valread = read(sockfd, buffer, 1024);\n        if (valread > 0) {\n            std::cout << \"Server: \" << buffer << std::endl;\n        } else {\n            std::cerr << \"Read error or connection closed by server\" << std::endl;\n            break;\n        }\n    }\n\n    close(sockfd);\n}\n\nint main() {\n    const char* server_ip = \"127.0.0.1\";\n    int port = 8080;\n\n    int sockfd = create_tcp_client(server_ip, port);\n    if (sockfd != -1) {\n        tcp_client_communication(sockfd);\n    }\n\n    return 0;\n}",
      "#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint create_tcp_client(const char* server_ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd < 0) {\n        std::cerr << \"Error creating socket\" << std::endl;\n        return -1;\n    }\n\n    struct sockaddr_in server_addr;\n    memset(&server_addr, 0, sizeof(server_addr));\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(port);\n    \n    if (inet_pton(AF_INET, server_ip, &server_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {\n        std::cerr << \"Connection failed\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcp_client_communication(int sockfd) {\n    char buffer[1024] = {0};\n    std::string message;\n    \n    while (true) {\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, message);\n        \n        if (message == \"exit\") {\n            break;\n        }\n        \n        send(sockfd, message.c_str(), message.length(), 0);\n        int valread = read(sockfd, buffer, 1024);\n        if (valread > 0) {\n            std::cout << \"Server: \" << std::string(buffer, valread) << std::endl;\n        } else {\n            std::cerr << \"Read error or connection closed by server\" << std::endl;\n            break;\n        }\n    }\n    \n    close(sockfd);\n}",
      "#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint create_tcp_client(const char* server_ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd < 0) {\n        std::cerr << \"Error creating socket\" << std::endl;\n        return -1;\n    }\n\n    struct sockaddr_in server_addr;\n    memset(&server_addr, 0, sizeof(server_addr));\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, server_ip, &server_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcp_client_communication(int sockfd) {\n    char buffer[1024] = {0};\n    std::string message;\n\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, message);\n\n        if (send(sockfd, message.c_str(), message.length(), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        int valread = recv(sockfd, buffer, 1024, 0);\n        if (valread < 0) {\n            std::cerr << \"Receive failed\" << std::endl;\n            break;\n        } else if (valread == 0) {\n            std::cout << \"Server closed connection\" << std::endl;\n            break;\n        }\n\n        buffer[valread] = '\\0';\n        std::cout << \"Server: \" << buffer << std::endl;\n    }\n\n    close(sockfd);\n}\n\nint main() {\n    const char* server_ip = \"127.0.0.1\";\n    int port = 8080;\n\n    int sockfd = create_tcp_client(server_ip, port);\n    if (sockfd != -1) {\n        tcp_client_communication(sockfd);\n    }\n\n    return 0;\n}",
      "#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint create_tcp_client(const char* server_ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd < 0) {\n        std::cerr << \"Error creating socket\" << std::endl;\n        return -1;\n    }\n\n    struct sockaddr_in server_addr;\n    memset(&server_addr, 0, sizeof(server_addr));\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, server_ip, &server_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcp_client_communication(int sockfd) {\n    char buffer[1024] = {0};\n    std::string message;\n\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, message);\n\n        if (message == \"exit\") {\n            break;\n        }\n\n        send(sockfd, message.c_str(), message.length(), 0);\n\n        int valread = read(sockfd, buffer, 1024);\n        if (valread > 0) {\n            std::cout << \"Server: \" << std::string(buffer, valread) << std::endl;\n        } else {\n            std::cerr << \"Read error or connection closed by server\" << std::endl;\n            break;\n        }\n    }\n\n    close(sockfd);\n}\n\nint main() {\n    const char* server_ip = \"127.0.0.1\";\n    int port = 8080;\n\n    int sockfd = create_tcp_client(server_ip, port);\n    if (sockfd != -1) {\n        tcp_client_communication(sockfd);\n    }\n\n    return 0;\n}",
      "#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint create_tcp_client(const char* server_ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd < 0) {\n        std::cerr << \"Error creating socket\" << std::endl;\n        return -1;\n    }\n\n    struct sockaddr_in server_addr;\n    memset(&server_addr, 0, sizeof(server_addr));\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, server_ip, &server_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcp_client_communication(int sockfd) {\n    char buffer[1024] = {0};\n    std::string message;\n\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, message);\n\n        if (message == \"exit\") {\n            break;\n        }\n\n        send(sockfd, message.c_str(), message.length(), 0);\n        int valread = read(sockfd, buffer, 1024);\n        if (valread > 0) {\n            std::cout << \"Server: \" << buffer << std::endl;\n        } else {\n            std::cerr << \"Read error or connection closed by server\" << std::endl;\n            break;\n        }\n    }\n\n    close(sockfd);\n}",
      "#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint create_tcp_client(const char* server_ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd < 0) {\n        std::cerr << \"Error creating socket\" << std::endl;\n        return -1;\n    }\n\n    struct sockaddr_in server_addr;\n    memset(&server_addr, 0, sizeof(server_addr));\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, server_ip, &server_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcp_client_communication(int sockfd) {\n    char buffer[1024] = {0};\n    std::string message;\n\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, message);\n\n        if (message == \"exit\") {\n            break;\n        }\n\n        send(sockfd, message.c_str(), message.length(), 0);\n        int valread = read(sockfd, buffer, 1024);\n        if (valread > 0) {\n            std::cout << \"Server: \" << std::string(buffer, valread) << std::endl;\n        } else {\n            std::cerr << \"Connection closed by server\" << std::endl;\n            break;\n        }\n    }\n\n    close(sockfd);\n}",
      "#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint create_tcp_client(const char* server_ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd < 0) {\n        std::cerr << \"Error creating socket\" << std::endl;\n        return -1;\n    }\n\n    struct sockaddr_in server_addr;\n    memset(&server_addr, 0, sizeof(server_addr));\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, server_ip, &server_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcp_client_communication(int sockfd) {\n    char buffer[1024] = {0};\n    std::string message;\n\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, message);\n\n        if (message == \"exit\") {\n            break;\n        }\n\n        send(sockfd, message.c_str(), message.length(), 0);\n        int valread = read(sockfd, buffer, 1024);\n        if (valread > 0) {\n            std::cout << \"Server: \" << buffer << std::endl;\n        } else {\n            std::cerr << \"Read error or connection closed by server\" << std::endl;\n            break;\n        }\n        memset(buffer, 0, sizeof(buffer));\n    }\n\n    close(sockfd);\n}",
      "#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint create_tcp_client(const char* server_ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd < 0) {\n        std::cerr << \"Error creating socket\" << std::endl;\n        return -1;\n    }\n\n    struct sockaddr_in server_addr;\n    memset(&server_addr, 0, sizeof(server_addr));\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, server_ip, &server_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {\n        std::cerr << \"Connection failed\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcp_client_communication(int sockfd) {\n    char buffer[1024] = {0};\n    std::string message;\n\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, message);\n\n        if (message == \"exit\") {\n            break;\n        }\n\n        send(sockfd, message.c_str(), message.length(), 0);\n        int valread = read(sockfd, buffer, 1024);\n        if (valread > 0) {\n            std::cout << \"Server: \" << std::string(buffer, valread) << std::endl;\n        } else {\n            std::cerr << \"Read error or connection closed by server\" << std::endl;\n            break;\n        }\n    }\n\n    close(sockfd);\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 17,
    "Instruction": "Task Description: Implement a TCP client socket class in C++ that handles connection establishment, data transmission, and connection management with a remote server, supporting both IPv4 and IPv6 protocols.\n\nClass Description: The ClientSocket class provides TCP client functionality with support for both IPv4 and IPv6 connections. It handles socket creation, connection establishment with timeout support, send buffer configuration, and connection cleanup. The class is designed to work within a multi-threaded context and supports encryption parameters.\n\nAttributes:\n- dest_: std::string - Destination hostname or IP address to connect to\n- threadCtx_: ThreadCtx& - Reference to thread context containing configuration options\n- sa_: struct addrinfo - Address information structure for socket configuration\n- socket_: std::unique_ptr<WdtSocket> - Smart pointer to the underlying socket implementation\n- peerIp_: std::string - IP address of the connected peer\n\nMethods:\n- Constructor: ClientSocket(ThreadCtx& threadCtx, const string& dest, int port, const EncryptionParams& encryptionParams, int64_t ivChangeInterval) -> void - Initializes the client socket with destination, port, and encryption parameters\n- connect: connect() -> ErrorCode - Establishes connection to the remote server with timeout handling, returns connection status\n- getPeerIp: getPeerIp() -> const std::string& - Returns the IP address of the connected peer\n- setSendBufferSize: setSendBufferSize() -> void - Configures the socket's send buffer size based on thread context options\n- closeConnection: closeConnection() -> void [private] - Closes the active socket connection",
    "Canonical_solution": "#include <fcntl.h>\n#include <folly/Conv.h>\n#include <folly/ScopeGuard.h>\n#include <glog/logging.h>\n#include <poll.h>\n#include <sys/socket.h>\n#include <wdt/Reporting.h>\n#include <wdt/util/ClientSocket.h>\n\nnamespace facebook {\nnamespace wdt {\n\nusing std::string;\n\nclass ClientSocket {\npublic:\n  ClientSocket(ThreadCtx &threadCtx, const string &dest,\n               const int port,\n               const EncryptionParams &encryptionParams,\n               int64_t ivChangeInterval)\n      : dest_(dest), threadCtx_(threadCtx) {\n    memset(&sa_, 0, sizeof(sa_));\n    socket_ = std::make_unique<WdtSocket>(threadCtx, port, encryptionParams,\n                                          ivChangeInterval, nullptr);\n    if (threadCtx_.getOptions().ipv6) {\n      sa_.ai_family = AF_INET6;\n    }\n    if (threadCtx_.getOptions().ipv4) {\n      sa_.ai_family = AF_INET;\n    }\n    sa_.ai_socktype = SOCK_STREAM;\n  }\n\n  ErrorCode connect() {\n    auto fd = socket_->getFd();\n    auto port = socket_->getPort();\n    WDT_CHECK(fd < 0) << \"Previous connection not closed \" << fd << \" \" << port;\n    \n    struct addrinfo *infoList = nullptr;\n    auto guard = folly::makeGuard([&] {\n      if (infoList) {\n        freeaddrinfo(infoList);\n      }\n    });\n    \n    string portStr = folly::to<string>(port);\n    int res = getaddrinfo(dest_.c_str(), portStr.c_str(), &sa_, &infoList);\n    if (res) {\n      WLOG(ERROR) << \"Failed getaddrinfo \" << dest_ << \" , \" << port << \" : \"\n                  << res << \" : \" << gai_strerror(res);\n      return CONN_ERROR;\n    }\n    \n    int count = 0;\n    for (struct addrinfo *info = infoList; info != nullptr;\n         info = info->ai_next) {\n      ++count;\n      std::string host, port_2;\n      WdtSocket::getNameInfo(info->ai_addr, info->ai_addrlen, host, port_2);\n      WVLOG(2) << \"will connect to \" << host << \" \" << port_2;\n      \n      fd = socket(info->ai_family, info->ai_socktype, info->ai_protocol);\n      if (fd == -1) {\n        WPLOG(WARNING) << \"Error making socket for port_2 \" << port_2;\n        continue;\n      }\n      \n      socket_->setFd(fd);\n      setSendBufferSize();\n\n      int sockArg = fcntl(fd, F_GETFL, nullptr);\n      sockArg |= O_NONBLOCK;\n      res = fcntl(fd, F_SETFL, sockArg);\n      if (res < 0) {\n        WPLOG(ERROR) << \"Failed to make the socket non-blocking \" << port_2\n                     << \" sock \" << sockArg << \" res \" << res;\n        closeConnection();\n        continue;\n      }\n\n      if (::connect(fd, info->ai_addr, info->ai_addrlen) != 0) {\n        if (errno != EINPROGRESS) {\n          WPLOG(INFO) << \"Error connecting on \" << host << \" \" << port_2;\n          closeConnection();\n          continue;\n        }\n        \n        auto startTime = Clock::now();\n        int connectTimeout = threadCtx_.getOptions().connect_timeout_millis;\n\n        while (true) {\n          if (threadCtx_.getAbortChecker()->shouldAbort()) {\n            WLOG(ERROR) << \"Transfer aborted during connect \" << port_2 << \" \"\n                        << fd;\n            closeConnection();\n            return ABORT;\n          }\n          \n          int timeElapsed = durationMillis(Clock::now() - startTime);\n          if (timeElapsed >= connectTimeout) {\n            WVLOG(1) << \"connect() timed out\" << host << \" \" << port_2;\n            closeConnection();\n            return CONN_ERROR_RETRYABLE;\n          }\n          \n          int pollTimeout =\n              std::min(connectTimeout - timeElapsed,\n                       threadCtx_.getOptions().abort_check_interval_millis);\n          struct pollfd pollFds[] = {{fd, POLLOUT, 0}};\n\n          if ((res = poll(pollFds, 1, pollTimeout)) <= 0) {\n            if (errno == EINTR) {\n              WVLOG(1) << \"poll() call interrupted. retrying... \" << port_2;\n              continue;\n            }\n            if (res == 0) {\n              WVLOG(1) << \"poll() timed out \" << host << \" \" << port_2;\n              continue;\n            }\n            WPLOG(ERROR) << \"poll() failed \" << host << \" \" << port_2 << \" \"\n                         << fd;\n            closeConnection();\n            return CONN_ERROR;\n          }\n          break;\n        }\n\n        int connectResult;\n        socklen_t len = sizeof(connectResult);\n        if (getsockopt(fd, SOL_SOCKET, SO_ERROR, &connectResult, &len) < 0) {\n          WPLOG(WARNING) << \"getsockopt() failed\";\n          closeConnection();\n          continue;\n        }\n        if (connectResult != 0) {\n          WLOG(WARNING) << \"connect did not succeed on \" << host << \" \" << port_2\n                        << \" : \" << strerrorStr(connectResult);\n          closeConnection();\n          continue;\n        }\n      }\n\n      sockArg = fcntl(fd, F_GETFL, nullptr);\n      sockArg &= (~O_NONBLOCK);\n      res = fcntl(fd, F_SETFL, sockArg);\n      if (res == -1) {\n        WPLOG(ERROR) << \"Could not make the socket blocking \" << port_2;\n        closeConnection();\n        continue;\n      }\n      \n      WVLOG(1) << \"Successful connect on \" << fd;\n      peerIp_ = host;\n      sa_ = *info;\n      break;\n    }\n    \n    if (socket_->getFd() < 0) {\n      if (count > 1) {\n        WLOG(INFO) << \"Unable to connect to either of the \" << count << \" addrs\";\n      }\n      return CONN_ERROR_RETRYABLE;\n    }\n    \n    socket_->setSocketTimeouts();\n    socket_->setDscp(threadCtx_.getOptions().dscp);\n    return OK;\n  }\n\n  const std::string &getPeerIp() const {\n    return peerIp_;\n  }\n\n  void setSendBufferSize() {\n    int bufSize = threadCtx_.getOptions().send_buffer_size;\n    auto fd = socket_->getFd();\n    auto port = socket_->getPort();\n    if (bufSize <= 0) {\n      return;\n    }\n    int status =\n        ::setsockopt(fd, SOL_SOCKET, SO_SNDBUF, &bufSize, sizeof(bufSize));\n    if (status != 0) {\n      WPLOG(ERROR) << \"Failed to set send buffer \" << port << \" size \" << bufSize\n                   << \" fd \" << fd;\n      return;\n    }\n    WVLOG(1) << \"Send buffer size set to \" << bufSize << \" port \" << port;\n  }\n\nprivate:\n  std::string dest_;\n  ThreadCtx &threadCtx_;\n  struct addrinfo sa_;\n  std::unique_ptr<WdtSocket> socket_;\n  std::string peerIp_;\n\n  void closeConnection() {\n    socket_->close();\n  }\n};\n\n}  // namespace wdt\n}  // namespace facebook",
    "Code_level": "Class-level",
    "FSMID_for_test": 149,
    "matched_results": [
      "#include <iostream>\n#include <string>\n#include <memory>\n#include <thread>\n#include <chrono>\n#include <cstring>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netdb.h>\n#include <unistd.h>\n\nclass ThreadCtx {\npublic:\n    int sendBufferSize;\n    int connectTimeout;\n};\n\nclass WdtSocket {\npublic:\n    WdtSocket(int fd) : fd_(fd) {}\n    ~WdtSocket() { close(fd_); }\n    int getFd() const { return fd_; }\nprivate:\n    int fd_;\n};\n\nclass ClientSocket {\npublic:\n    ClientSocket(ThreadCtx& threadCtx, const std::string& dest, int port, const std::string& encryptionParams, int64_t ivChangeInterval)\n        : threadCtx_(threadCtx), dest_(dest), port_(port), encryptionParams_(encryptionParams), ivChangeInterval_(ivChangeInterval) {\n        memset(&sa_, 0, sizeof(sa_));\n    }\n\n    enum ErrorCode {\n        OK,\n        CONNECTION_FAILED,\n        TIMEOUT,\n        UNKNOWN_ERROR\n    };\n\n    ErrorCode connect() {\n        struct addrinfo hints, *res;\n        memset(&hints, 0, sizeof(hints));\n        hints.ai_family = AF_UNSPEC;\n        hints.ai_socktype = SOCK_STREAM;\n\n        std::string portStr = std::to_string(port_);\n        int status = getaddrinfo(dest_.c_str(), portStr.c_str(), &hints, &res);\n        if (status != 0) {\n            return CONNECTION_FAILED;\n        }\n\n        int sockfd = -1;\n        for (struct addrinfo *p = res; p != nullptr; p = p->ai_next) {\n            sockfd = socket(p->ai_family, p->ai_socktype, p->ai_protocol);\n            if (sockfd == -1) {\n                continue;\n            }\n\n            sa_ = *p;\n            break;\n        }\n\n        freeaddrinfo(res);\n\n        if (sockfd == -1) {\n            return CONNECTION_FAILED;\n        }\n\n        socket_ = std::make_unique<WdtSocket>(sockfd);\n\n        fd_set fdset;\n        struct timeval tv;\n        tv.tv_sec = threadCtx_.connectTimeout;\n        tv.tv_usec = 0;\n\n        fcntl(sockfd, F_SETFL, O_NONBLOCK);\n\n        if (::connect(sockfd, sa_.ai_addr, sa_.ai_addrlen) < 0) {\n            if (errno == EINPROGRESS) {\n                FD_ZERO(&fdset);\n                FD_SET(sockfd, &fdset);\n                if (select(sockfd + 1, nullptr, &fdset, nullptr, &tv) > 0) {\n                    socklen_t len = sizeof(int);\n                    int valopt;\n                    getsockopt(sockfd, SOL_SOCKET, SO_ERROR, (void*)(&valopt), &len);\n                    if (valopt) {\n                        close(sockfd);\n                        return CONNECTION_FAILED;\n                    }\n                } else {\n                    close(sockfd);\n                    return TIMEOUT;\n                }\n            } else {\n                close(sockfd);\n                return CONNECTION_FAILED;\n            }\n        }\n\n        fcntl(sockfd, F_SETFL, fcntl(sockfd, F_GETFL, 0) & ~O_NONBLOCK);\n\n        char ipstr[INET6_ADDRSTRLEN];\n        void *addr;\n        if (sa_.ai_family == AF_INET) {\n            struct sockaddr_in *ipv4 = (struct sockaddr_in *)sa_.ai_addr;\n            addr = &(ipv4->sin_addr);\n        } else {\n            struct sockaddr_in6 *ipv6 = (struct sockaddr_in6 *)sa_.ai_addr;\n            addr = &(ipv6->sin6_addr);\n        }\n        inet_ntop(sa_.ai_family, addr, ipstr, sizeof(ipstr));\n        peerIp_ = ipstr;\n\n        setSendBufferSize();\n\n        return OK;\n    }\n\n    const std::string& getPeerIp() const {\n        return peerIp_;\n    }\n\n    void setSendBufferSize() {\n        if (setsockopt(socket_->getFd(), SOL_SOCKET, SO_SNDBUF, &threadCtx_.sendBufferSize, sizeof(threadCtx_.sendBufferSize)) < 0) {\n            std::cerr << \"Failed to set send buffer size\" << std::endl;\n        }\n    }\n\nprivate:\n    void closeConnection() {\n        socket_.reset();\n    }\n\n    std::string dest_;\n    int port_;\n    std::string encryptionParams_;\n    int64_t ivChangeInterval_;\n    ThreadCtx& threadCtx_;\n    struct addrinfo sa_;\n    std::unique_ptr<WdtSocket> socket_;\n    std::string peerIp_;\n};",
      "#include <iostream>\n#include <string>\n#include <memory>\n#include <thread>\n#include <chrono>\n#include <cstring>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netdb.h>\n#include <unistd.h>\n\nclass ThreadCtx {\npublic:\n    int sendBufferSize;\n    int connectionTimeout;\n};\n\nclass WdtSocket {\npublic:\n    WdtSocket(int fd) : fd_(fd) {}\n    ~WdtSocket() { close(fd_); }\n    int getFd() const { return fd_; }\nprivate:\n    int fd_;\n};\n\nclass ClientSocket {\npublic:\n    ClientSocket(ThreadCtx& threadCtx, const std::string& dest, int port, const std::string& encryptionParams, int64_t ivChangeInterval)\n        : threadCtx_(threadCtx), dest_(dest), port_(port), encryptionParams_(encryptionParams), ivChangeInterval_(ivChangeInterval) {\n        memset(&sa_, 0, sizeof(sa_));\n    }\n\n    enum ErrorCode {\n        OK,\n        CONNECTION_FAILED,\n        TIMEOUT,\n        UNKNOWN_ERROR\n    };\n\n    ErrorCode connect() {\n        struct addrinfo hints, *res;\n        memset(&hints, 0, sizeof(hints));\n        hints.ai_family = AF_UNSPEC;\n        hints.ai_socktype = SOCK_STREAM;\n\n        std::string portStr = std::to_string(port_);\n        int status = getaddrinfo(dest_.c_str(), portStr.c_str(), &hints, &res);\n        if (status != 0) {\n            return CONNECTION_FAILED;\n        }\n\n        int sockfd = -1;\n        for (struct addrinfo *p = res; p != nullptr; p = p->ai_next) {\n            sockfd = socket(p->ai_family, p->ai_socktype, p->ai_protocol);\n            if (sockfd == -1) {\n                continue;\n            }\n\n            sa_ = *p;\n            break;\n        }\n\n        freeaddrinfo(res);\n\n        if (sockfd == -1) {\n            return CONNECTION_FAILED;\n        }\n\n        socket_ = std::make_unique<WdtSocket>(sockfd);\n\n        fd_set fdset;\n        struct timeval tv;\n        tv.tv_sec = threadCtx_.connectionTimeout;\n        tv.tv_usec = 0;\n\n        fcntl(sockfd, F_SETFL, O_NONBLOCK);\n\n        if (::connect(sockfd, sa_.ai_addr, sa_.ai_addrlen) < 0) {\n            if (errno == EINPROGRESS) {\n                FD_ZERO(&fdset);\n                FD_SET(sockfd, &fdset);\n                if (select(sockfd + 1, nullptr, &fdset, nullptr, &tv) > 0) {\n                    socklen_t len = sizeof(int);\n                    int valopt;\n                    getsockopt(sockfd, SOL_SOCKET, SO_ERROR, (void*)(&valopt), &len);\n                    if (valopt) {\n                        close(sockfd);\n                        return CONNECTION_FAILED;\n                    }\n                } else {\n                    close(sockfd);\n                    return TIMEOUT;\n                }\n            } else {\n                close(sockfd);\n                return CONNECTION_FAILED;\n            }\n        }\n\n        fcntl(sockfd, F_SETFL, fcntl(sockfd, F_GETFL, 0) & ~O_NONBLOCK);\n\n        char ipstr[INET6_ADDRSTRLEN];\n        void *addr;\n        if (sa_.ai_family == AF_INET) {\n            struct sockaddr_in *ipv4 = (struct sockaddr_in *)sa_.ai_addr;\n            addr = &(ipv4->sin_addr);\n        } else {\n            struct sockaddr_in6 *ipv6 = (struct sockaddr_in6 *)sa_.ai_addr;\n            addr = &(ipv6->sin6_addr);\n        }\n        inet_ntop(sa_.ai_family, addr, ipstr, sizeof(ipstr));\n        peerIp_ = ipstr;\n\n        setSendBufferSize();\n\n        return OK;\n    }\n\n    const std::string& getPeerIp() const {\n        return peerIp_;\n    }\n\n    void setSendBufferSize() {\n        if (setsockopt(socket_->getFd(), SOL_SOCKET, SO_SNDBUF, &threadCtx_.sendBufferSize, sizeof(threadCtx_.sendBufferSize)) < 0) {\n            std::cerr << \"Failed to set send buffer size\" << std::endl;\n        }\n    }\n\nprivate:\n    void closeConnection() {\n        socket_.reset();\n    }\n\n    std::string dest_;\n    int port_;\n    std::string encryptionParams_;\n    int64_t ivChangeInterval_;\n    ThreadCtx& threadCtx_;\n    struct addrinfo sa_;\n    std::unique_ptr<WdtSocket> socket_;\n    std::string peerIp_;\n};",
      "#include <string>\n#include <memory>\n#include <netdb.h>\n#include <sys/socket.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#include <cstring>\n#include <iostream>\n\nclass ThreadCtx {\npublic:\n    int sendBufferSize;\n    int connectTimeout;\n};\n\nclass WdtSocket {\npublic:\n    WdtSocket(int fd) : fd_(fd) {}\n    ~WdtSocket() { close(fd_); }\n    int getFd() const { return fd_; }\nprivate:\n    int fd_;\n};\n\nclass ClientSocket {\npublic:\n    ClientSocket(ThreadCtx& threadCtx, const std::string& dest, int port, const EncryptionParams& encryptionParams, int64_t ivChangeInterval)\n        : threadCtx_(threadCtx), dest_(dest), port_(port) {\n        memset(&sa_, 0, sizeof(sa_));\n        sa_.ai_family = AF_UNSPEC;\n        sa_.ai_socktype = SOCK_STREAM;\n        sa_.ai_protocol = IPPROTO_TCP;\n    }\n\n    ErrorCode connect() {\n        struct addrinfo* result;\n        struct addrinfo* ptr;\n        char portStr[6];\n        snprintf(portStr, sizeof(portStr), \"%d\", port_);\n        int res = getaddrinfo(dest_.c_str(), portStr, &sa_, &result);\n        if (res != 0) {\n            return ErrorCode::ADDRINFO_ERROR;\n        }\n\n        for (ptr = result; ptr != nullptr; ptr = ptr->ai_next) {\n            int sock = socket(ptr->ai_family, ptr->ai_socktype, ptr->ai_protocol);\n            if (sock == -1) {\n                continue;\n            }\n\n            struct timeval timeout;\n            timeout.tv_sec = threadCtx_.connectTimeout;\n            timeout.tv_usec = 0;\n            setsockopt(sock, SOL_SOCKET, SO_SNDTIMEO, &timeout, sizeof(timeout));\n\n            if (::connect(sock, ptr->ai_addr, ptr->ai_addrlen) == 0) {\n                socket_ = std::make_unique<WdtSocket>(sock);\n                char ipStr[INET6_ADDRSTRLEN];\n                if (ptr->ai_family == AF_INET) {\n                    struct sockaddr_in* ipv4 = (struct sockaddr_in*)ptr->ai_addr;\n                    inet_ntop(AF_INET, &(ipv4->sin_addr), ipStr, sizeof(ipStr));\n                } else {\n                    struct sockaddr_in6* ipv6 = (struct sockaddr_in6*)ptr->ai_addr;\n                    inet_ntop(AF_INET6, &(ipv6->sin6_addr), ipStr, sizeof(ipStr));\n                }\n                peerIp_ = ipStr;\n                freeaddrinfo(result);\n                return ErrorCode::SUCCESS;\n            }\n            close(sock);\n        }\n        freeaddrinfo(result);\n        return ErrorCode::CONNECT_ERROR;\n    }\n\n    const std::string& getPeerIp() const {\n        return peerIp_;\n    }\n\n    void setSendBufferSize() {\n        if (socket_) {\n            setsockopt(socket_->getFd(), SOL_SOCKET, SO_SNDBUF, &threadCtx_.sendBufferSize, sizeof(threadCtx_.sendBufferSize));\n        }\n    }\n\nprivate:\n    void closeConnection() {\n        socket_.reset();\n    }\n\n    std::string dest_;\n    int port_;\n    ThreadCtx& threadCtx_;\n    struct addrinfo sa_;\n    std::unique_ptr<WdtSocket> socket_;\n    std::string peerIp_;\n};\n\nenum class ErrorCode {\n    SUCCESS,\n    ADDRINFO_ERROR,\n    CONNECT_ERROR\n};\n\nstruct EncryptionParams {\n    // Encryption parameters\n};",
      "#include <iostream>\n#include <string>\n#include <memory>\n#include <thread>\n#include <chrono>\n#include <cstring>\n#include <netdb.h>\n#include <arpa/inet.h>\n#include <sys/socket.h>\n#include <unistd.h>\n\nclass ThreadCtx {\npublic:\n    int timeout;\n    int sendBufferSize;\n};\n\nclass EncryptionParams {};\n\nclass WdtSocket {\npublic:\n    WdtSocket(int fd) : fd_(fd) {}\n    ~WdtSocket() { close(fd_); }\n    int getFd() const { return fd_; }\nprivate:\n    int fd_;\n};\n\nclass ClientSocket {\npublic:\n    ClientSocket(ThreadCtx& threadCtx, const std::string& dest, int port, const EncryptionParams& encryptionParams, int64_t ivChangeInterval)\n        : threadCtx_(threadCtx), dest_(dest), port_(port), encryptionParams_(encryptionParams), ivChangeInterval_(ivChangeInterval) {\n        memset(&sa_, 0, sizeof(sa_));\n    }\n\n    enum ErrorCode {\n        OK,\n        CONNECTION_ERROR,\n        TIMEOUT_ERROR\n    };\n\n    ErrorCode connect() {\n        struct addrinfo hints, *res;\n        memset(&hints, 0, sizeof(hints));\n        hints.ai_family = AF_UNSPEC;\n        hints.ai_socktype = SOCK_STREAM;\n\n        std::string portStr = std::to_string(port_);\n        int status = getaddrinfo(dest_.c_str(), portStr.c_str(), &hints, &res);\n        if (status != 0) {\n            return CONNECTION_ERROR;\n        }\n\n        for (struct addrinfo *p = res; p != nullptr; p = p->ai_next) {\n            int sockfd = socket(p->ai_family, p->ai_socktype, p->ai_protocol);\n            if (sockfd == -1) {\n                continue;\n            }\n\n            sa_ = *p;\n            socket_ = std::make_unique<WdtSocket>(sockfd);\n\n            if (::connect(sockfd, p->ai_addr, p->ai_addrlen) == -1) {\n                close(sockfd);\n                socket_.reset();\n                continue;\n            }\n\n            char ipstr[INET6_ADDRSTRLEN];\n            void *addr;\n            if (p->ai_family == AF_INET) {\n                struct sockaddr_in *ipv4 = (struct sockaddr_in *)p->ai_addr;\n                addr = &(ipv4->sin_addr);\n            } else {\n                struct sockaddr_in6 *ipv6 = (struct sockaddr_in6 *)p->ai_addr;\n                addr = &(ipv6->sin6_addr);\n            }\n            inet_ntop(p->ai_family, addr, ipstr, sizeof(ipstr));\n            peerIp_ = ipstr;\n\n            freeaddrinfo(res);\n            return OK;\n        }\n\n        freeaddrinfo(res);\n        return CONNECTION_ERROR;\n    }\n\n    const std::string& getPeerIp() const {\n        return peerIp_;\n    }\n\n    void setSendBufferSize() {\n        if (socket_) {\n            setsockopt(socket_->getFd(), SOL_SOCKET, SO_SNDBUF, &threadCtx_.sendBufferSize, sizeof(threadCtx_.sendBufferSize));\n        }\n    }\n\nprivate:\n    void closeConnection() {\n        socket_.reset();\n    }\n\n    ThreadCtx& threadCtx_;\n    std::string dest_;\n    int port_;\n    EncryptionParams encryptionParams_;\n    int64_t ivChangeInterval_;\n    struct addrinfo sa_;\n    std::unique_ptr<WdtSocket> socket_;\n    std::string peerIp_;\n};",
      "#include <iostream>\n#include <string>\n#include <memory>\n#include <thread>\n#include <chrono>\n#include <cstring>\n#include <netdb.h>\n#include <unistd.h>\n#include <arpa/inet.h>\n#include <sys/socket.h>\n#include <sys/types.h>\n\nclass ThreadCtx {\npublic:\n    int sendBufferSize;\n    int connectionTimeout;\n};\n\nclass EncryptionParams {};\n\nclass WdtSocket {\npublic:\n    WdtSocket(int fd) : fd_(fd) {}\n    ~WdtSocket() { close(fd_); }\n    int getFd() const { return fd_; }\nprivate:\n    int fd_;\n};\n\nclass ClientSocket {\npublic:\n    ClientSocket(ThreadCtx& threadCtx, const std::string& dest, int port, const EncryptionParams& encryptionParams, int64_t ivChangeInterval)\n        : threadCtx_(threadCtx), dest_(dest), port_(port), encryptionParams_(encryptionParams), ivChangeInterval_(ivChangeInterval) {\n        memset(&sa_, 0, sizeof(sa_));\n    }\n\n    enum ErrorCode {\n        OK,\n        CONNECTION_FAILED,\n        TIMEOUT,\n        UNKNOWN_ERROR\n    };\n\n    ErrorCode connect() {\n        struct addrinfo hints, *res, *p;\n        int status;\n        char portStr[6];\n        snprintf(portStr, sizeof(portStr), \"%d\", port_);\n\n        memset(&hints, 0, sizeof hints);\n        hints.ai_family = AF_UNSPEC;\n        hints.ai_socktype = SOCK_STREAM;\n\n        if ((status = getaddrinfo(dest_.c_str(), portStr, &hints, &res)) != 0) {\n            return CONNECTION_FAILED;\n        }\n\n        for (p = res; p != nullptr; p = p->ai_next) {\n            int sockfd = socket(p->ai_family, p->ai_socktype, p->ai_protocol);\n            if (sockfd == -1) {\n                continue;\n            }\n\n            socket_ = std::make_unique<WdtSocket>(sockfd);\n\n            if (::connect(sockfd, p->ai_addr, p->ai_addrlen) == -1) {\n                close(sockfd);\n                socket_.reset();\n                continue;\n            }\n\n            char ipstr[INET6_ADDRSTRLEN];\n            void *addr;\n            if (p->ai_family == AF_INET) {\n                struct sockaddr_in *ipv4 = (struct sockaddr_in *)p->ai_addr;\n                addr = &(ipv4->sin_addr);\n            } else {\n                struct sockaddr_in6 *ipv6 = (struct sockaddr_in6 *)p->ai_addr;\n                addr = &(ipv6->sin6_addr);\n            }\n            inet_ntop(p->ai_family, addr, ipstr, sizeof ipstr);\n            peerIp_ = ipstr;\n\n            break;\n        }\n\n        freeaddrinfo(res);\n\n        if (!socket_) {\n            return CONNECTION_FAILED;\n        }\n\n        setSendBufferSize();\n        return OK;\n    }\n\n    const std::string& getPeerIp() const {\n        return peerIp_;\n    }\n\n    void setSendBufferSize() {\n        if (socket_) {\n            int fd = socket_->getFd();\n            setsockopt(fd, SOL_SOCKET, SO_SNDBUF, &threadCtx_.sendBufferSize, sizeof(threadCtx_.sendBufferSize));\n        }\n    }\n\nprivate:\n    void closeConnection() {\n        socket_.reset();\n    }\n\n    std::string dest_;\n    int port_;\n    ThreadCtx& threadCtx_;\n    struct addrinfo sa_;\n    std::unique_ptr<WdtSocket> socket_;\n    std::string peerIp_;\n    EncryptionParams encryptionParams_;\n    int64_t ivChangeInterval_;\n};",
      "#include <string>\n#include <memory>\n#include <netdb.h>\n#include <sys/socket.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#include <cstring>\n#include <iostream>\n#include <thread>\n#include <chrono>\n\nclass ThreadCtx {\npublic:\n    int sendBufferSize;\n    int connectionTimeout;\n};\n\nclass WdtSocket {\npublic:\n    WdtSocket(int fd) : fd_(fd) {}\n    ~WdtSocket() { close(fd_); }\n    int getFd() const { return fd_; }\nprivate:\n    int fd_;\n};\n\nclass ClientSocket {\npublic:\n    ClientSocket(ThreadCtx& threadCtx, const std::string& dest, int port, const std::string& encryptionParams, int64_t ivChangeInterval)\n        : threadCtx_(threadCtx), dest_(dest), port_(port), encryptionParams_(encryptionParams), ivChangeInterval_(ivChangeInterval) {\n        memset(&sa_, 0, sizeof(sa_));\n    }\n\n    enum ErrorCode {\n        OK,\n        CONNECTION_FAILED,\n        TIMEOUT\n    };\n\n    ErrorCode connect() {\n        struct addrinfo hints, *res, *p;\n        memset(&hints, 0, sizeof(hints));\n        hints.ai_family = AF_UNSPEC;\n        hints.ai_socktype = SOCK_STREAM;\n\n        std::string portStr = std::to_string(port_);\n        int status = getaddrinfo(dest_.c_str(), portStr.c_str(), &hints, &res);\n        if (status != 0) {\n            return CONNECTION_FAILED;\n        }\n\n        for (p = res; p != nullptr; p = p->ai_next) {\n            int sockfd = socket(p->ai_family, p->ai_socktype, p->ai_protocol);\n            if (sockfd == -1) {\n                continue;\n            }\n\n            socket_ = std::make_unique<WdtSocket>(sockfd);\n            setSendBufferSize();\n\n            if (::connect(sockfd, p->ai_addr, p->ai_addrlen) == -1) {\n                closeConnection();\n                continue;\n            }\n\n            char ipstr[INET6_ADDRSTRLEN];\n            if (p->ai_family == AF_INET) {\n                struct sockaddr_in *ipv4 = (struct sockaddr_in *)p->ai_addr;\n                inet_ntop(p->ai_family, &(ipv4->sin_addr), ipstr, sizeof(ipstr));\n            } else {\n                struct sockaddr_in6 *ipv6 = (struct sockaddr_in6 *)p->ai_addr;\n                inet_ntop(p->ai_family, &(ipv6->sin6_addr), ipstr, sizeof(ipstr));\n            }\n            peerIp_ = ipstr;\n            freeaddrinfo(res);\n            return OK;\n        }\n\n        freeaddrinfo(res);\n        return CONNECTION_FAILED;\n    }\n\n    const std::string& getPeerIp() const {\n        return peerIp_;\n    }\n\n    void setSendBufferSize() {\n        if (socket_) {\n            int fd = socket_->getFd();\n            setsockopt(fd, SOL_SOCKET, SO_SNDBUF, &threadCtx_.sendBufferSize, sizeof(threadCtx_.sendBufferSize));\n        }\n    }\n\nprivate:\n    void closeConnection() {\n        socket_.reset();\n    }\n\n    ThreadCtx& threadCtx_;\n    std::string dest_;\n    int port_;\n    std::string encryptionParams_;\n    int64_t ivChangeInterval_;\n    struct addrinfo sa_;\n    std::unique_ptr<WdtSocket> socket_;\n    std::string peerIp_;\n};",
      "#include <string>\n#include <memory>\n#include <netdb.h>\n#include <sys/socket.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#include <cstring>\n#include <iostream>\n#include <thread>\n#include <chrono>\n\nclass ThreadCtx {\npublic:\n    int sendBufferSize;\n    int connectionTimeout;\n};\n\nclass WdtSocket {\npublic:\n    WdtSocket(int fd) : fd_(fd) {}\n    ~WdtSocket() { close(fd_); }\n    int getFd() const { return fd_; }\nprivate:\n    int fd_;\n};\n\nclass ClientSocket {\npublic:\n    ClientSocket(ThreadCtx& threadCtx, const std::string& dest, int port, const std::string& encryptionParams, int64_t ivChangeInterval)\n        : threadCtx_(threadCtx), dest_(dest), port_(port), encryptionParams_(encryptionParams), ivChangeInterval_(ivChangeInterval) {\n        memset(&sa_, 0, sizeof(sa_));\n    }\n\n    enum ErrorCode {\n        OK,\n        CONNECTION_FAILED,\n        TIMEOUT,\n        UNKNOWN_ERROR\n    };\n\n    ErrorCode connect() {\n        struct addrinfo hints, *res, *p;\n        int status;\n        char portStr[6];\n        snprintf(portStr, sizeof(portStr), \"%d\", port_);\n\n        memset(&hints, 0, sizeof hints);\n        hints.ai_family = AF_UNSPEC;\n        hints.ai_socktype = SOCK_STREAM;\n\n        if ((status = getaddrinfo(dest_.c_str(), portStr, &hints, &res)) != 0) {\n            std::cerr << \"getaddrinfo: \" << gai_strerror(status) << std::endl;\n            return CONNECTION_FAILED;\n        }\n\n        for (p = res; p != nullptr; p = p->ai_next) {\n            int sockfd = socket(p->ai_family, p->ai_socktype, p->ai_protocol);\n            if (sockfd == -1) {\n                continue;\n            }\n\n            setSocketNonBlocking(sockfd);\n\n            if (::connect(sockfd, p->ai_addr, p->ai_addrlen) == -1) {\n                if (errno == EINPROGRESS) {\n                    if (waitForConnect(sockfd, threadCtx_.connectionTimeout)) {\n                        socket_ = std::make_unique<WdtSocket>(sockfd);\n                        getPeerIp(p->ai_addr, p->ai_family);\n                        freeaddrinfo(res);\n                        return OK;\n                    } else {\n                        close(sockfd);\n                        freeaddrinfo(res);\n                        return TIMEOUT;\n                    }\n                }\n                close(sockfd);\n                continue;\n            }\n\n            socket_ = std::make_unique<WdtSocket>(sockfd);\n            getPeerIp(p->ai_addr, p->ai_family);\n            freeaddrinfo(res);\n            return OK;\n        }\n\n        freeaddrinfo(res);\n        return CONNECTION_FAILED;\n    }\n\n    const std::string& getPeerIp() const {\n        return peerIp_;\n    }\n\n    void setSendBufferSize() {\n        if (socket_) {\n            setsockopt(socket_->getFd(), SOL_SOCKET, SO_SNDBUF, &threadCtx_.sendBufferSize, sizeof(threadCtx_.sendBufferSize));\n        }\n    }\n\nprivate:\n    void closeConnection() {\n        socket_.reset();\n    }\n\n    void setSocketNonBlocking(int sockfd) {\n        int flags = fcntl(sockfd, F_GETFL, 0);\n        fcntl(sockfd, F_SETFL, flags | O_NONBLOCK);\n    }\n\n    bool waitForConnect(int sockfd, int timeout) {\n        fd_set writefds;\n        struct timeval tv;\n        FD_ZERO(&writefds);\n        FD_SET(sockfd, &writefds);\n        tv.tv_sec = timeout;\n        tv.tv_usec = 0;\n\n        int ret = select(sockfd + 1, nullptr, &writefds, nullptr, &tv);\n        if (ret <= 0) {\n            return false;\n        }\n\n        int so_error;\n        socklen_t len = sizeof so_error;\n        getsockopt(sockfd, SOL_SOCKET, SO_ERROR, &so_error, &len);\n        return so_error == 0;\n    }\n\n    void getPeerIp(struct sockaddr* sa, int family) {\n        char ipstr[INET6_ADDRSTRLEN];\n        if (family == AF_INET) {\n            struct sockaddr_in* ipv4 = (struct sockaddr_in*)sa;\n            inet_ntop(AF_INET, &(ipv4->sin_addr), ipstr, sizeof ipstr);\n        } else {\n            struct sockaddr_in6* ipv6 = (struct sockaddr_in6*)sa;\n            inet_ntop(AF_INET6, &(ipv6->sin6_addr), ipstr, sizeof ipstr);\n        }\n        peerIp_ = ipstr;\n    }\n\n    std::string dest_;\n    int port_;\n    std::string encryptionParams_;\n    int64_t ivChangeInterval_;\n    ThreadCtx& threadCtx_;\n    struct addrinfo sa_;\n    std::unique_ptr<WdtSocket> socket_;\n    std::string peerIp_;\n};",
      "#include <string>\n#include <memory>\n#include <netdb.h>\n#include <sys/socket.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#include <cstring>\n#include <iostream>\n#include <stdexcept>\n\nclass ThreadCtx {\npublic:\n    int sendBufferSize;\n    int timeout;\n};\n\nclass WdtSocket {\npublic:\n    WdtSocket(int fd) : fd_(fd) {}\n    ~WdtSocket() { close(fd_); }\n    int getFd() const { return fd_; }\nprivate:\n    int fd_;\n};\n\nclass ClientSocket {\npublic:\n    ClientSocket(ThreadCtx& threadCtx, const std::string& dest, int port)\n        : threadCtx_(threadCtx), dest_(dest), port_(port), socket_(nullptr) {\n        memset(&sa_, 0, sizeof(sa_));\n        sa_.ai_family = AF_UNSPEC;\n        sa_.ai_socktype = SOCK_STREAM;\n        sa_.ai_protocol = IPPROTO_TCP;\n    }\n\n    enum ErrorCode {\n        OK,\n        CONNECTION_FAILED,\n        TIMEOUT,\n        UNKNOWN_ERROR\n    };\n\n    ErrorCode connect() {\n        struct addrinfo* res;\n        struct addrinfo* p;\n        int rv;\n        char portStr[6];\n        snprintf(portStr, sizeof(portStr), \"%d\", port_);\n\n        if ((rv = getaddrinfo(dest_.c_str(), portStr, &sa_, &res)) != 0) {\n            return UNKNOWN_ERROR;\n        }\n\n        for (p = res; p != nullptr; p = p->ai_next) {\n            int sockfd = socket(p->ai_family, p->ai_socktype, p->ai_protocol);\n            if (sockfd == -1) {\n                continue;\n            }\n\n            struct timeval tv;\n            tv.tv_sec = threadCtx_.timeout;\n            tv.tv_usec = 0;\n            setsockopt(sockfd, SOL_SOCKET, SO_RCVTIMEO, (const char*)&tv, sizeof tv);\n\n            if (::connect(sockfd, p->ai_addr, p->ai_addrlen) == -1) {\n                close(sockfd);\n                continue;\n            }\n\n            socket_ = std::make_unique<WdtSocket>(sockfd);\n            char ipstr[INET6_ADDRSTRLEN];\n            void* addr;\n            if (p->ai_family == AF_INET) {\n                struct sockaddr_in* ipv4 = (struct sockaddr_in*)p->ai_addr;\n                addr = &(ipv4->sin_addr);\n            } else {\n                struct sockaddr_in6* ipv6 = (struct sockaddr_in6*)p->ai_addr;\n                addr = &(ipv6->sin6_addr);\n            }\n            inet_ntop(p->ai_family, addr, ipstr, sizeof ipstr);\n            peerIp_ = ipstr;\n            freeaddrinfo(res);\n            return OK;\n        }\n\n        freeaddrinfo(res);\n        return CONNECTION_FAILED;\n    }\n\n    const std::string& getPeerIp() const {\n        return peerIp_;\n    }\n\n    void setSendBufferSize() {\n        if (socket_) {\n            setsockopt(socket_->getFd(), SOL_SOCKET, SO_SNDBUF, &threadCtx_.sendBufferSize, sizeof(threadCtx_.sendBufferSize));\n        }\n    }\n\nprivate:\n    void closeConnection() {\n        socket_.reset();\n    }\n\n    std::string dest_;\n    int port_;\n    ThreadCtx& threadCtx_;\n    struct addrinfo sa_;\n    std::unique_ptr<WdtSocket> socket_;\n    std::string peerIp_;\n};",
      "#include <string>\n#include <memory>\n#include <netdb.h>\n#include <unistd.h>\n#include <sys/socket.h>\n#include <arpa/inet.h>\n#include <cstring>\n#include <iostream>\n\nclass WdtSocket {\npublic:\n    WdtSocket(int fd) : fd_(fd) {}\n    ~WdtSocket() { close(fd_); }\n    int getFd() const { return fd_; }\nprivate:\n    int fd_;\n};\n\nclass ThreadCtx {\npublic:\n    int getSendBufferSize() const { return sendBufferSize_; }\n    int getConnectTimeout() const { return connectTimeout_; }\nprivate:\n    int sendBufferSize_ = 8192;\n    int connectTimeout_ = 5;\n};\n\nclass EncryptionParams {};\n\nclass ClientSocket {\npublic:\n    ClientSocket(ThreadCtx& threadCtx, const std::string& dest, int port, const EncryptionParams& encryptionParams, int64_t ivChangeInterval)\n        : threadCtx_(threadCtx), dest_(dest), port_(port), encryptionParams_(encryptionParams), ivChangeInterval_(ivChangeInterval) {\n        memset(&sa_, 0, sizeof(sa_));\n    }\n\n    enum ErrorCode {\n        OK,\n        CONNECTION_ERROR,\n        TIMEOUT_ERROR\n    };\n\n    ErrorCode connect() {\n        struct addrinfo hints, *res, *p;\n        memset(&hints, 0, sizeof(hints));\n        hints.ai_family = AF_UNSPEC;\n        hints.ai_socktype = SOCK_STREAM;\n\n        std::string portStr = std::to_string(port_);\n        if (getaddrinfo(dest_.c_str(), portStr.c_str(), &hints, &res) != 0) {\n            return CONNECTION_ERROR;\n        }\n\n        for (p = res; p != nullptr; p = p->ai_next) {\n            int sockfd = socket(p->ai_family, p->ai_socktype, p->ai_protocol);\n            if (sockfd == -1) continue;\n\n            struct timeval timeout;\n            timeout.tv_sec = threadCtx_.getConnectTimeout();\n            timeout.tv_usec = 0;\n            setsockopt(sockfd, SOL_SOCKET, SO_RCVTIMEO, &timeout, sizeof(timeout));\n            setsockopt(sockfd, SOL_SOCKET, SO_SNDTIMEO, &timeout, sizeof(timeout));\n\n            if (::connect(sockfd, p->ai_addr, p->ai_addrlen) == -1) {\n                close(sockfd);\n                continue;\n            }\n\n            socket_ = std::make_unique<WdtSocket>(sockfd);\n            char ipstr[INET6_ADDRSTRLEN];\n            if (p->ai_family == AF_INET) {\n                struct sockaddr_in *ipv4 = (struct sockaddr_in *)p->ai_addr;\n                inet_ntop(p->ai_family, &(ipv4->sin_addr), ipstr, sizeof(ipstr));\n            } else {\n                struct sockaddr_in6 *ipv6 = (struct sockaddr_in6 *)p->ai_addr;\n                inet_ntop(p->ai_family, &(ipv6->sin6_addr), ipstr, sizeof(ipstr));\n            }\n            peerIp_ = ipstr;\n            freeaddrinfo(res);\n            return OK;\n        }\n\n        freeaddrinfo(res);\n        return CONNECTION_ERROR;\n    }\n\n    const std::string& getPeerIp() const {\n        return peerIp_;\n    }\n\n    void setSendBufferSize() {\n        if (socket_) {\n            int sendBufferSize = threadCtx_.getSendBufferSize();\n            setsockopt(socket_->getFd(), SOL_SOCKET, SO_SNDBUF, &sendBufferSize, sizeof(sendBufferSize));\n        }\n    }\n\nprivate:\n    void closeConnection() {\n        if (socket_) {\n            socket_.reset();\n        }\n    }\n\n    std::string dest_;\n    int port_;\n    ThreadCtx& threadCtx_;\n    struct addrinfo sa_;\n    std::unique_ptr<WdtSocket> socket_;\n    std::string peerIp_;\n    EncryptionParams encryptionParams_;\n    int64_t ivChangeInterval_;\n};"
    ],
    "unmatched_results": [
      "class ClientSocket {\n public:\n  ClientSocket(ThreadCtx& threadCtx, const std::string& dest, int port,\n               const EncryptionParams& encryptionParams, int64_t ivChangeInterval)\n      : dest_(dest), threadCtx_(threadCtx), socket_(nullptr) {\n    struct addrinfo hints, *res;\n    memset(&hints, 0, sizeof(hints));\n    hints.ai_family = AF_UNSPEC;  // Allow IPv4 or IPv6\n    hints.ai_socktype = SOCK_STREAM;\n    hints.ai_flags = AI_PASSIVE;\n\n    std::string portStr = std::to_string(port);\n    int status = getaddrinfo(dest.c_str(), portStr.c_str(), &hints, &res);\n    if (status != 0) {\n      throw std::runtime_error(\"getaddrinfo failed\");\n    }\n    sa_ = *res;\n    freeaddrinfo(res);\n  }\n\n  ErrorCode connect() {\n    socket_.reset(new WdtSocket(sa_.ai_family, sa_.ai_socktype, sa_.ai_protocol));\n    if (!socket_->isValid()) {\n      return ErrorCode::SOCKET_ERROR;\n    }\n\n    if (socket_->connect(sa_.ai_addr, sa_.ai_addrlen) < 0) {\n      return ErrorCode::CONNECT_ERROR;\n    }\n\n    char ipStr[INET6_ADDRSTRLEN];\n    void* addr;\n    if (sa_.ai_family == AF_INET) {\n      struct sockaddr_in* ipv4 = (struct sockaddr_in*)sa_.ai_addr;\n      addr = &(ipv4->sin_addr);\n    } else {\n      struct sockaddr_in6* ipv6 = (struct sockaddr_in6*)sa_.ai_addr;\n      addr = &(ipv6->sin6_addr);\n    }\n    inet_ntop(sa_.ai_family, addr, ipStr, sizeof(ipStr));\n    peerIp_ = std::string(ipStr);\n\n    setSendBufferSize();\n    return ErrorCode::OK;\n  }\n\n  const std::string& getPeerIp() const {\n    return peerIp_;\n  }\n\n private:\n  void setSendBufferSize() {\n    int sendBufSize = threadCtx_.getSendBufferSize();\n    if (setsockopt(socket_->getFd(), SOL_SOCKET, SO_SNDBUF, &sendBufSize, sizeof(sendBufSize)) < 0) {\n      throw std::runtime_error(\"setsockopt failed\");\n    }\n  }\n\n  void closeConnection() {\n    if (socket_) {\n      socket_->close();\n    }\n  }\n\n  std::string dest_;\n  ThreadCtx& threadCtx_;\n  struct addrinfo sa_;\n  std::unique_ptr<WdtSocket> socket_;\n  std::string peerIp_;\n};"
    ],
    "match_count": 9,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 18,
    "Instruction": "Task Description: Implement a TCP client function in C++ that establishes a connection to a server, sends user input messages, and receives responses from the server until the connection is terminated.\n\nFunction Description: The function `tcp_client_communication` creates a TCP socket, connects to a specified server, and enters a loop where it reads user input, sends it to the server, and prints the server's response. The communication continues until an error occurs or the connection is closed.\n\nInput: None (The server IP address and port are hardcoded as \"127.0.0.1\" and 8888, respectively, within the function.)\n\nOutput: None (The function prints received messages from the server to the console but does not return any value.)",
    "Canonical_solution": "#include <sys/socket.h>\n#include <arpa/inet.h>\n#include <string.h>\n#include <unistd.h>\n\n#define BUFFER_SIZE 1024\n\nvoid tcp_client_communication() {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    \n    struct sockaddr_in serv_addr;\n    bzero(&serv_addr, sizeof(serv_addr));\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_addr.s_addr = inet_addr(\"127.0.0.1\");\n    serv_addr.sin_port = htons(8888);\n\n    connect(sockfd, (sockaddr*)&serv_addr, sizeof(serv_addr));\n    \n    while(true){\n        char buf[BUFFER_SIZE];\n        bzero(&buf, sizeof(buf));\n        scanf(\"%s\", buf);\n        ssize_t write_bytes = write(sockfd, buf, sizeof(buf));\n        if(write_bytes == -1){\n            break;\n        }\n        bzero(&buf, sizeof(buf));\n        ssize_t read_bytes = read(sockfd, buf, sizeof(buf));\n        if(read_bytes > 0){\n            printf(\"message from server: %s\\n\", buf);\n        }else if(read_bytes == 0){\n            break;\n        }else if(read_bytes == -1){\n            close(sockfd);\n            break;\n        }\n    }\n    close(sockfd);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 149,
    "matched_results": [
      "#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nvoid tcp_client_communication() {\n    int sock = 0;\n    struct sockaddr_in serv_addr;\n    char buffer[1024] = {0};\n    std::string user_input;\n\n    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation error\" << std::endl;\n        return;\n    }\n\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(8888);\n\n    if (inet_pton(AF_INET, \"127.0.0.1\", &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        return;\n    }\n\n    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        return;\n    }\n\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, user_input);\n\n        if (send(sock, user_input.c_str(), user_input.length(), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        int valread = read(sock, buffer, 1024);\n        if (valread < 0) {\n            std::cerr << \"Read failed\" << std::endl;\n            break;\n        } else if (valread == 0) {\n            std::cout << \"Server closed connection\" << std::endl;\n            break;\n        }\n\n        buffer[valread] = '\\0';\n        std::cout << \"Server: \" << buffer << std::endl;\n    }\n\n    close(sock);\n}",
      "#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nvoid tcp_client_communication() {\n    int sock = 0;\n    struct sockaddr_in serv_addr;\n    char buffer[1024] = {0};\n    std::string user_input;\n\n    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation error\" << std::endl;\n        return;\n    }\n\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(8888);\n\n    if (inet_pton(AF_INET, \"127.0.0.1\", &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        return;\n    }\n\n    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        return;\n    }\n\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, user_input);\n\n        if (send(sock, user_input.c_str(), user_input.length(), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        int valread = read(sock, buffer, 1024);\n        if (valread < 0) {\n            std::cerr << \"Read failed\" << std::endl;\n            break;\n        } else if (valread == 0) {\n            std::cout << \"Server closed the connection\" << std::endl;\n            break;\n        }\n\n        buffer[valread] = '\\0';\n        std::cout << \"Server: \" << buffer << std::endl;\n    }\n\n    close(sock);\n}",
      "#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nvoid tcp_client_communication() {\n    int sock = 0;\n    struct sockaddr_in serv_addr;\n    char buffer[1024] = {0};\n    std::string user_input;\n\n    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation error\" << std::endl;\n        return;\n    }\n\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(8888);\n\n    if (inet_pton(AF_INET, \"127.0.0.1\", &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        return;\n    }\n\n    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        return;\n    }\n\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, user_input);\n\n        if (send(sock, user_input.c_str(), user_input.length(), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        int valread = read(sock, buffer, 1024);\n        if (valread < 0) {\n            std::cerr << \"Read failed\" << std::endl;\n            break;\n        } else if (valread == 0) {\n            std::cout << \"Server closed the connection\" << std::endl;\n            break;\n        }\n\n        buffer[valread] = '\\0';\n        std::cout << \"Server: \" << buffer << std::endl;\n    }\n\n    close(sock);\n}",
      "#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nvoid tcp_client_communication() {\n    int sock = 0;\n    struct sockaddr_in serv_addr;\n    char buffer[1024] = {0};\n\n    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation error\" << std::endl;\n        return;\n    }\n\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(8888);\n\n    if (inet_pton(AF_INET, \"127.0.0.1\", &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        return;\n    }\n\n    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        return;\n    }\n\n    while (true) {\n        std::string user_input;\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, user_input);\n\n        if (send(sock, user_input.c_str(), user_input.length(), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        int valread = read(sock, buffer, 1024);\n        if (valread < 0) {\n            std::cerr << \"Read failed\" << std::endl;\n            break;\n        } else if (valread == 0) {\n            std::cout << \"Server closed the connection\" << std::endl;\n            break;\n        }\n\n        buffer[valread] = '\\0';\n        std::cout << \"Server: \" << buffer << std::endl;\n    }\n\n    close(sock);\n}",
      "#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nvoid tcp_client_communication() {\n    int sock = 0;\n    struct sockaddr_in serv_addr;\n    char buffer[1024] = {0};\n\n    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation error\" << std::endl;\n        return;\n    }\n\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(8888);\n\n    if (inet_pton(AF_INET, \"127.0.0.1\", &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        return;\n    }\n\n    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        return;\n    }\n\n    while (true) {\n        std::string user_input;\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, user_input);\n\n        if (send(sock, user_input.c_str(), user_input.length(), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        int valread = read(sock, buffer, 1024);\n        if (valread < 0) {\n            std::cerr << \"Read failed\" << std::endl;\n            break;\n        } else if (valread == 0) {\n            std::cout << \"Server closed connection\" << std::endl;\n            break;\n        }\n\n        buffer[valread] = '\\0';\n        std::cout << \"Server: \" << buffer << std::endl;\n    }\n\n    close(sock);\n}",
      "#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nvoid tcp_client_communication() {\n    int sock = 0;\n    struct sockaddr_in serv_addr;\n    char buffer[1024] = {0};\n    std::string user_input;\n\n    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation error\" << std::endl;\n        return;\n    }\n\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(8888);\n\n    if (inet_pton(AF_INET, \"127.0.0.1\", &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        return;\n    }\n\n    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        return;\n    }\n\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, user_input);\n\n        if (send(sock, user_input.c_str(), user_input.length(), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        int valread = read(sock, buffer, 1024);\n        if (valread < 0) {\n            std::cerr << \"Read failed\" << std::endl;\n            break;\n        } else if (valread == 0) {\n            std::cout << \"Server closed connection\" << std::endl;\n            break;\n        }\n\n        buffer[valread] = '\\0';\n        std::cout << \"Server: \" << buffer << std::endl;\n    }\n\n    close(sock);\n}",
      "#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nvoid tcp_client_communication() {\n    int sock = 0;\n    struct sockaddr_in serv_addr;\n    char buffer[1024] = {0};\n    std::string user_input;\n\n    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation error\" << std::endl;\n        return;\n    }\n\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(8888);\n\n    if (inet_pton(AF_INET, \"127.0.0.1\", &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        return;\n    }\n\n    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        return;\n    }\n\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, user_input);\n\n        if (send(sock, user_input.c_str(), user_input.length(), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        int valread = read(sock, buffer, 1024);\n        if (valread < 0) {\n            std::cerr << \"Read failed\" << std::endl;\n            break;\n        } else if (valread == 0) {\n            std::cout << \"Server closed the connection\" << std::endl;\n            break;\n        }\n\n        buffer[valread] = '\\0';\n        std::cout << \"Server: \" << buffer << std::endl;\n    }\n\n    close(sock);\n}",
      "#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nvoid tcp_client_communication() {\n    int sock = 0;\n    struct sockaddr_in serv_addr;\n    char buffer[1024] = {0};\n\n    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation error\" << std::endl;\n        return;\n    }\n\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(8888);\n\n    if (inet_pton(AF_INET, \"127.0.0.1\", &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        return;\n    }\n\n    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection failed\" << std::endl;\n        return;\n    }\n\n    while (true) {\n        std::string user_input;\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, user_input);\n\n        if (send(sock, user_input.c_str(), user_input.length(), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        int valread = read(sock, buffer, 1024);\n        if (valread < 0) {\n            std::cerr << \"Read failed\" << std::endl;\n            break;\n        } else if (valread == 0) {\n            std::cout << \"Server closed the connection\" << std::endl;\n            break;\n        }\n\n        buffer[valread] = '\\0';\n        std::cout << \"Server: \" << buffer << std::endl;\n    }\n\n    close(sock);\n}",
      "#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nvoid tcp_client_communication() {\n    int sock = 0;\n    struct sockaddr_in serv_addr;\n    char buffer[1024] = {0};\n    std::string user_input;\n\n    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation error\" << std::endl;\n        return;\n    }\n\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(8888);\n\n    if (inet_pton(AF_INET, \"127.0.0.1\", &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        return;\n    }\n\n    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        return;\n    }\n\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, user_input);\n\n        if (send(sock, user_input.c_str(), user_input.length(), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        int valread = read(sock, buffer, 1024);\n        if (valread < 0) {\n            std::cerr << \"Read failed\" << std::endl;\n            break;\n        } else if (valread == 0) {\n            std::cout << \"Server closed connection\" << std::endl;\n            break;\n        }\n\n        buffer[valread] = '\\0';\n        std::cout << \"Server: \" << buffer << std::endl;\n    }\n\n    close(sock);\n}",
      "#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nvoid tcp_client_communication() {\n    int sock = 0;\n    struct sockaddr_in serv_addr;\n    char buffer[1024] = {0};\n\n    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation error\" << std::endl;\n        return;\n    }\n\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(8888);\n\n    if (inet_pton(AF_INET, \"127.0.0.1\", &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        return;\n    }\n\n    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        return;\n    }\n\n    while (true) {\n        std::string user_input;\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, user_input);\n\n        if (send(sock, user_input.c_str(), user_input.length(), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        int valread = read(sock, buffer, 1024);\n        if (valread < 0) {\n            std::cerr << \"Read failed\" << std::endl;\n            break;\n        } else if (valread == 0) {\n            std::cout << \"Server closed connection\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Server: \" << std::string(buffer, valread) << std::endl;\n    }\n\n    close(sock);\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 19,
    "Instruction": "Task Description: Create a TCP client class that can establish a connection to a server, send and receive data, and handle timeouts for non-blocking operations.\n\nClass Description: The TCPClient class provides functionality for TCP socket communication with a remote server. It supports both blocking and non-blocking operations with timeout capabilities, and handles cross-platform compatibility between Windows and Unix-like systems.\n\nAttributes:\n- address: std::string - The IP address or hostname of the server to connect to\n- port: u16 - The port number of the server to connect to\n- main_socket: SocketHolder (int) - The socket file descriptor for the connection\n- connected: bool - Flag indicating whether the client is currently connected to the server\n\nMethods:\n- Connect() -> bool - Establishes a connection to the server. Returns true if successful.\n- Read(void* buffer, size_t size, const std::chrono::nanoseconds& timeout) -> bool - Reads data from the server into the buffer. Returns true if all requested bytes were read.\n- Write(const void* buffer, size_t size, const std::chrono::nanoseconds& timeout) -> bool - Writes data from the buffer to the server. Returns true if all bytes were written.\n- Disconnect() -> void - Closes the connection to the server.\n- SetNonBlock(SocketHolder sockFD, bool nonBlocking) -> bool - Sets the blocking mode of the socket. Returns true if successful.\n- ConnectWithTimeout(SocketHolder sockFD, void* server_addr, size_t server_addr_len, int timeout_seconds) -> bool - Attempts to connect with a timeout. Returns true if successful.",
    "Canonical_solution": "#include <winsock2.h>\n#include <ws2tcpip.h>\n#include <cerrno>\n#include <arpa/inet.h>\n#include <fcntl.h>\n#include <ifaddrs.h>\n#include <netdb.h>\n#include <netinet/in.h>\n#include <netinet/tcp.h>\n#include <poll.h>\n#include <sys/socket.h>\n#include <sys/types.h>\n#include <unistd.h>\n#include <chrono>\n#include <memory>\n#include <string>\n\n#ifdef _WIN32\n#define WSAEAGAIN WSAEWOULDBLOCK\n#define WSAEMULTIHOP -1\n#define ERRNO(x) WSA##x\n#define GET_ERRNO WSAGetLastError()\n#define poll(x, y, z) WSAPoll(x, y, z);\n#define SHUT_RD SD_RECEIVE\n#define SHUT_WR SD_SEND\n#define SHUT_RDWR SD_BOTH\n#else\n#define ERRNO(x) x\n#define GET_ERRNO errno\n#define closesocket(x) close(x)\n#endif\n\nclass TCPClient {\npublic:\n    using SocketHolder = int;\n\n    TCPClient(const std::string& address, u16 port) : address(address), port(port) {}\n\n    bool Connect() {\n        if (connected)\n            return true;\n\n        struct addrinfo hints, *addrinfo;\n        memset(&hints, 0, sizeof(hints));\n        hints.ai_socktype = SOCK_STREAM;\n        hints.ai_family = AF_INET;\n\n        if (getaddrinfo(address.data(), NULL, &hints, &addrinfo) != 0) {\n            return false;\n        }\n\n        main_socket = ::socket(AF_INET, SOCK_STREAM, 0);\n        if (main_socket == static_cast<SocketHolder>(-1)) {\n            return false;\n        }\n\n        if (!SetNonBlock(main_socket, true)) {\n            closesocket(main_socket);\n            return false;\n        }\n\n        struct sockaddr_in servaddr = {0};\n        servaddr.sin_family = AF_INET;\n        servaddr.sin_addr.s_addr = ((struct sockaddr_in*)(addrinfo->ai_addr))->sin_addr.s_addr;\n        servaddr.sin_port = htons(port);\n        freeaddrinfo(addrinfo);\n\n        if (!ConnectWithTimeout(main_socket, &servaddr, sizeof(servaddr), 10)) {\n            closesocket(main_socket);\n            return false;\n        }\n\n        connected = true;\n        return true;\n    }\n\n    bool Read(void* buffer, size_t size, const std::chrono::nanoseconds& timeout) {\n        size_t read_bytes = 0;\n        auto before = std::chrono::steady_clock::now();\n        while (read_bytes != size) {\n            int new_read = ::recv(main_socket, (char*)((uintptr_t)buffer + read_bytes), \n                (int)(size - read_bytes), 0);\n            if (new_read < 0) {\n                if (GET_ERRNO == ERRNO(EWOULDBLOCK) &&\n                    (timeout == std::chrono::nanoseconds(0) ||\n                     std::chrono::steady_clock::now() - before < timeout)) {\n                    continue;\n                }\n                read_bytes = 0;\n                break;\n            }\n            read_bytes += new_read;\n        }\n        return read_bytes == size;\n    }\n\n    bool Write(const void* buffer, size_t size, const std::chrono::nanoseconds& timeout) {\n        size_t write_bytes = 0;\n        auto before = std::chrono::steady_clock::now();\n        while (write_bytes != size) {\n            int new_written = ::send(main_socket, (const char*)((uintptr_t)buffer + write_bytes),\n                                    (int)(size - write_bytes), 0);\n            if (new_written < 0) {\n                if (GET_ERRNO == ERRNO(EWOULDBLOCK) &&\n                    (timeout == std::chrono::nanoseconds(0) ||\n                     std::chrono::steady_clock::now() - before < timeout)) {\n                    continue;\n                }\n                write_bytes = 0;\n                break;\n            }\n            write_bytes += new_written;\n        }\n        return write_bytes == size;\n    }\n\n    void Disconnect() {\n        if (connected) {\n            shutdown(main_socket, SHUT_RDWR);\n            closesocket(main_socket);\n            connected = false;\n        }\n    }\n\nprivate:\n    bool SetNonBlock(SocketHolder sockFD, bool nonBlocking) {\n        bool blocking = !nonBlocking;\n#ifdef _WIN32\n        unsigned long nonblocking = (blocking) ? 0 : 1;\n        int ret = ioctlsocket(sockFD, FIONBIO, &nonblocking);\n        if (ret == -1) {\n            return false;\n        }\n#else\n        int flags = ::fcntl(sockFD, F_GETFL, 0);\n        if (flags == -1) {\n            return false;\n        }\n\n        flags &= ~O_NONBLOCK;\n        if (!blocking) {\n            flags |= O_NONBLOCK;\n        }\n\n        const int ret = ::fcntl(sockFD, F_SETFL, flags);\n        if (ret == -1) {\n            return false;\n        }\n#endif\n        return true;\n    }\n\n    bool ConnectWithTimeout(SocketHolder sockFD, void* server_addr, size_t server_addr_len,\n                           int timeout_seconds) {\n        int res = ::connect(sockFD, (struct sockaddr*)server_addr, static_cast<int>(server_addr_len));\n        if (res == -1 && ((GET_ERRNO == ERRNO(EINPROGRESS) || GET_ERRNO == ERRNO(EWOULDBLOCK))) {\n            struct timeval tv;\n            fd_set fdset;\n            FD_ZERO(&fdset);\n            FD_SET(sockFD, &fdset);\n\n            tv.tv_sec = timeout_seconds;\n            tv.tv_usec = 0;\n            int select_res = ::select(static_cast<int>(sockFD + 1), NULL, &fdset, NULL, &tv);\n#ifdef _WIN32\n            if (select_res == 0) {\n                return false;\n            }\n#else\n            bool select_good = false;\n            if (select_res == 1) {\n                int so_error;\n                socklen_t len = sizeof so_error;\n\n                getsockopt(sockFD, SOL_SOCKET, SO_ERROR, &so_error, &len);\n\n                if (so_error == 0) {\n                    select_good = true;\n                }\n            }\n            if (!select_good) {\n                return false;\n            }\n#endif\n        } else if (res == -1) {\n            return false;\n        }\n        return true;\n    }\n\n    std::string address;\n    u16 port;\n    SocketHolder main_socket = -1;\n    bool connected = false;\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 149,
    "matched_results": [
      "#include <iostream>\n#include <string>\n#include <chrono>\n#include <cstring>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#include <fcntl.h>\n\nusing u16 = uint16_t;\nusing SocketHolder = int;\n\nclass TCPClient {\npublic:\n    TCPClient(const std::string& address, u16 port)\n        : address(address), port(port), main_socket(-1), connected(false) {}\n\n    ~TCPClient() {\n        if (connected) {\n            Disconnect();\n        }\n    }\n\n    bool Connect() {\n        main_socket = socket(AF_INET, SOCK_STREAM, 0);\n        if (main_socket < 0) {\n            return false;\n        }\n\n        struct sockaddr_in server_addr;\n        server_addr.sin_family = AF_INET;\n        server_addr.sin_port = htons(port);\n        if (inet_pton(AF_INET, address.c_str(), &server_addr.sin_addr) <= 0) {\n            return false;\n        }\n\n        if (connect(main_socket, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {\n            return false;\n        }\n\n        connected = true;\n        return true;\n    }\n\n    bool Read(void* buffer, size_t size, const std::chrono::nanoseconds& timeout) {\n        if (!SetNonBlock(main_socket, true)) {\n            return false;\n        }\n\n        fd_set read_fds;\n        FD_ZERO(&read_fds);\n        FD_SET(main_socket, &read_fds);\n\n        struct timeval tv;\n        tv.tv_sec = std::chrono::duration_cast<std::chrono::seconds>(timeout).count();\n        tv.tv_usec = std::chrono::duration_cast<std::chrono::microseconds>(timeout).count() % 1000000;\n\n        int ret = select(main_socket + 1, &read_fds, nullptr, nullptr, &tv);\n        if (ret <= 0) {\n            return false;\n        }\n\n        ssize_t bytes_read = recv(main_socket, buffer, size, 0);\n        if (bytes_read < 0) {\n            return false;\n        }\n\n        return static_cast<size_t>(bytes_read) == size;\n    }\n\n    bool Write(const void* buffer, size_t size, const std::chrono::nanoseconds& timeout) {\n        if (!SetNonBlock(main_socket, true)) {\n            return false;\n        }\n\n        fd_set write_fds;\n        FD_ZERO(&write_fds);\n        FD_SET(main_socket, &write_fds);\n\n        struct timeval tv;\n        tv.tv_sec = std::chrono::duration_cast<std::chrono::seconds>(timeout).count();\n        tv.tv_usec = std::chrono::duration_cast<std::chrono::microseconds>(timeout).count() % 1000000;\n\n        int ret = select(main_socket + 1, nullptr, &write_fds, nullptr, &tv);\n        if (ret <= 0) {\n            return false;\n        }\n\n        ssize_t bytes_sent = send(main_socket, buffer, size, 0);\n        if (bytes_sent < 0) {\n            return false;\n        }\n\n        return static_cast<size_t>(bytes_sent) == size;\n    }\n\n    void Disconnect() {\n        if (connected) {\n            close(main_socket);\n            connected = false;\n        }\n    }\n\n    bool SetNonBlock(SocketHolder sockFD, bool nonBlocking) {\n        int flags = fcntl(sockFD, F_GETFL, 0);\n        if (flags < 0) {\n            return false;\n        }\n\n        if (nonBlocking) {\n            flags |= O_NONBLOCK;\n        } else {\n            flags &= ~O_NONBLOCK;\n        }\n\n        return fcntl(sockFD, F_SETFL, flags) == 0;\n    }\n\n    bool ConnectWithTimeout(SocketHolder sockFD, void* server_addr, size_t server_addr_len, int timeout_seconds) {\n        if (!SetNonBlock(sockFD, true)) {\n            return false;\n        }\n\n        int ret = connect(sockFD, (struct sockaddr*)server_addr, server_addr_len);\n        if (ret < 0 && errno != EINPROGRESS) {\n            return false;\n        }\n\n        fd_set write_fds;\n        FD_ZERO(&write_fds);\n        FD_SET(sockFD, &write_fds);\n\n        struct timeval tv;\n        tv.tv_sec = timeout_seconds;\n        tv.tv_usec = 0;\n\n        ret = select(sockFD + 1, nullptr, &write_fds, nullptr, &tv);\n        if (ret <= 0) {\n            return false;\n        }\n\n        int so_error;\n        socklen_t len = sizeof(so_error);\n        if (getsockopt(sockFD, SOL_SOCKET, SO_ERROR, &so_error, &len) < 0 || so_error != 0) {\n            return false;\n        }\n\n        return SetNonBlock(sockFD, false);\n    }\n\nprivate:\n    std::string address;\n    u16 port;\n    SocketHolder main_socket;\n    bool connected;\n};",
      "#include <iostream>\n#include <string>\n#include <chrono>\n#include <cstring>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#include <fcntl.h>\n\nusing u16 = uint16_t;\nusing SocketHolder = int;\n\nclass TCPClient {\npublic:\n    TCPClient(const std::string& address, u16 port)\n        : address(address), port(port), main_socket(-1), connected(false) {}\n\n    bool Connect() {\n        main_socket = socket(AF_INET, SOCK_STREAM, 0);\n        if (main_socket < 0) {\n            return false;\n        }\n\n        sockaddr_in server_addr;\n        server_addr.sin_family = AF_INET;\n        server_addr.sin_port = htons(port);\n        if (inet_pton(AF_INET, address.c_str(), &server_addr.sin_addr) <= 0) {\n            return false;\n        }\n\n        if (connect(main_socket, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {\n            return false;\n        }\n\n        connected = true;\n        return true;\n    }\n\n    bool Read(void* buffer, size_t size, const std::chrono::nanoseconds& timeout) {\n        if (!SetNonBlock(main_socket, true)) {\n            return false;\n        }\n\n        fd_set read_fds;\n        FD_ZERO(&read_fds);\n        FD_SET(main_socket, &read_fds);\n\n        struct timeval tv;\n        tv.tv_sec = std::chrono::duration_cast<std::chrono::seconds>(timeout).count();\n        tv.tv_usec = std::chrono::duration_cast<std::chrono::microseconds>(timeout).count() % 1000000;\n\n        int ret = select(main_socket + 1, &read_fds, nullptr, nullptr, &tv);\n        if (ret <= 0) {\n            return false;\n        }\n\n        ssize_t bytes_read = recv(main_socket, buffer, size, 0);\n        return bytes_read == size;\n    }\n\n    bool Write(const void* buffer, size_t size, const std::chrono::nanoseconds& timeout) {\n        if (!SetNonBlock(main_socket, true)) {\n            return false;\n        }\n\n        fd_set write_fds;\n        FD_ZERO(&write_fds);\n        FD_SET(main_socket, &write_fds);\n\n        struct timeval tv;\n        tv.tv_sec = std::chrono::duration_cast<std::chrono::seconds>(timeout).count();\n        tv.tv_usec = std::chrono::duration_cast<std::chrono::microseconds>(timeout).count() % 1000000;\n\n        int ret = select(main_socket + 1, nullptr, &write_fds, nullptr, &tv);\n        if (ret <= 0) {\n            return false;\n        }\n\n        ssize_t bytes_sent = send(main_socket, buffer, size, 0);\n        return bytes_sent == size;\n    }\n\n    void Disconnect() {\n        if (connected) {\n            close(main_socket);\n            connected = false;\n        }\n    }\n\nprivate:\n    bool SetNonBlock(SocketHolder sockFD, bool nonBlocking) {\n        int flags = fcntl(sockFD, F_GETFL, 0);\n        if (flags == -1) {\n            return false;\n        }\n\n        if (nonBlocking) {\n            flags |= O_NONBLOCK;\n        } else {\n            flags &= ~O_NONBLOCK;\n        }\n\n        return fcntl(sockFD, F_SETFL, flags) == 0;\n    }\n\n    bool ConnectWithTimeout(SocketHolder sockFD, void* server_addr, size_t server_addr_len, int timeout_seconds) {\n        if (!SetNonBlock(sockFD, true)) {\n            return false;\n        }\n\n        int ret = connect(sockFD, (struct sockaddr*)server_addr, server_addr_len);\n        if (ret < 0 && errno != EINPROGRESS) {\n            return false;\n        }\n\n        fd_set write_fds;\n        FD_ZERO(&write_fds);\n        FD_SET(sockFD, &write_fds);\n\n        struct timeval tv;\n        tv.tv_sec = timeout_seconds;\n        tv.tv_usec = 0;\n\n        ret = select(sockFD + 1, nullptr, &write_fds, nullptr, &tv);\n        if (ret <= 0) {\n            return false;\n        }\n\n        int so_error;\n        socklen_t len = sizeof(so_error);\n        getsockopt(sockFD, SOL_SOCKET, SO_ERROR, &so_error, &len);\n        if (so_error != 0) {\n            return false;\n        }\n\n        return SetNonBlock(sockFD, false);\n    }\n\n    std::string address;\n    u16 port;\n    SocketHolder main_socket;\n    bool connected;\n};",
      "#include <iostream>\n#include <string>\n#include <chrono>\n#include <cstring>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <netdb.h>\n#include <unistd.h>\n#include <fcntl.h>\n#include <errno.h>\n\nusing u16 = uint16_t;\nusing SocketHolder = int;\n\nclass TCPClient {\npublic:\n    TCPClient(const std::string& address, u16 port)\n        : address(address), port(port), main_socket(-1), connected(false) {}\n\n    bool Connect() {\n        struct sockaddr_in server_addr;\n        struct hostent* server;\n\n        main_socket = socket(AF_INET, SOCK_STREAM, 0);\n        if (main_socket < 0) {\n            std::cerr << \"ERROR opening socket\" << std::endl;\n            return false;\n        }\n\n        server = gethostbyname(address.c_str());\n        if (server == nullptr) {\n            std::cerr << \"ERROR, no such host\" << std::endl;\n            return false;\n        }\n\n        bzero((char*)&server_addr, sizeof(server_addr));\n        server_addr.sin_family = AF_INET;\n        bcopy((char*)server->h_addr, (char*)&server_addr.sin_addr.s_addr, server->h_length);\n        server_addr.sin_port = htons(port);\n\n        if (connect(main_socket, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {\n            std::cerr << \"ERROR connecting\" << std::endl;\n            return false;\n        }\n\n        connected = true;\n        return true;\n    }\n\n    bool Read(void* buffer, size_t size, const std::chrono::nanoseconds& timeout) {\n        if (!SetNonBlock(main_socket, true)) return false;\n\n        fd_set read_fds;\n        FD_ZERO(&read_fds);\n        FD_SET(main_socket, &read_fds);\n\n        struct timeval tv;\n        tv.tv_sec = std::chrono::duration_cast<std::chrono::seconds>(timeout).count();\n        tv.tv_usec = std::chrono::duration_cast<std::chrono::microseconds>(timeout).count() % 1000000;\n\n        int retval = select(main_socket + 1, &read_fds, nullptr, nullptr, &tv);\n        if (retval == -1) {\n            std::cerr << \"ERROR in select\" << std::endl;\n            return false;\n        } else if (retval == 0) {\n            std::cerr << \"Read timeout\" << std::endl;\n            return false;\n        }\n\n        ssize_t bytes_read = recv(main_socket, buffer, size, 0);\n        if (bytes_read < 0) {\n            std::cerr << \"ERROR reading from socket\" << std::endl;\n            return false;\n        }\n\n        SetNonBlock(main_socket, false);\n        return bytes_read == size;\n    }\n\n    bool Write(const void* buffer, size_t size, const std::chrono::nanoseconds& timeout) {\n        if (!SetNonBlock(main_socket, true)) return false;\n\n        fd_set write_fds;\n        FD_ZERO(&write_fds);\n        FD_SET(main_socket, &write_fds);\n\n        struct timeval tv;\n        tv.tv_sec = std::chrono::duration_cast<std::chrono::seconds>(timeout).count();\n        tv.tv_usec = std::chrono::duration_cast<std::chrono::microseconds>(timeout).count() % 1000000;\n\n        int retval = select(main_socket + 1, nullptr, &write_fds, nullptr, &tv);\n        if (retval == -1) {\n            std::cerr << \"ERROR in select\" << std::endl;\n            return false;\n        } else if (retval == 0) {\n            std::cerr << \"Write timeout\" << std::endl;\n            return false;\n        }\n\n        ssize_t bytes_written = send(main_socket, buffer, size, 0);\n        if (bytes_written < 0) {\n            std::cerr << \"ERROR writing to socket\" << std::endl;\n            return false;\n        }\n\n        SetNonBlock(main_socket, false);\n        return bytes_written == size;\n    }\n\n    void Disconnect() {\n        if (connected) {\n            close(main_socket);\n            connected = false;\n        }\n    }\n\nprivate:\n    bool SetNonBlock(SocketHolder sockFD, bool nonBlocking) {\n        int flags = fcntl(sockFD, F_GETFL, 0);\n        if (flags == -1) return false;\n\n        if (nonBlocking)\n            flags |= O_NONBLOCK;\n        else\n            flags &= ~O_NONBLOCK;\n\n        return fcntl(sockFD, F_SETFL, flags) != -1;\n    }\n\n    bool ConnectWithTimeout(SocketHolder sockFD, void* server_addr, size_t server_addr_len, int timeout_seconds) {\n        if (!SetNonBlock(sockFD, true)) return false;\n\n        int result = connect(sockFD, (struct sockaddr*)server_addr, server_addr_len);\n        if (result == 0) {\n            SetNonBlock(sockFD, false);\n            return true;\n        }\n\n        if (errno != EINPROGRESS) return false;\n\n        fd_set write_fds;\n        FD_ZERO(&write_fds);\n        FD_SET(sockFD, &write_fds);\n\n        struct timeval tv;\n        tv.tv_sec = timeout_seconds;\n        tv.tv_usec = 0;\n\n        result = select(sockFD + 1, nullptr, &write_fds, nullptr, &tv);\n        if (result <= 0) return false;\n\n        int so_error;\n        socklen_t len = sizeof(so_error);\n        getsockopt(sockFD, SOL_SOCKET, SO_ERROR, &so_error, &len);\n\n        if (so_error != 0) return false;\n\n        SetNonBlock(sockFD, false);\n        return true;\n    }\n\n    std::string address;\n    u16 port;\n    SocketHolder main_socket;\n    bool connected;\n};",
      "#include <iostream>\n#include <string>\n#include <chrono>\n#include <cstring>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#include <fcntl.h>\n#include <errno.h>\n\nusing u16 = uint16_t;\nusing SocketHolder = int;\n\nclass TCPClient {\npublic:\n    TCPClient(const std::string& address, u16 port)\n        : address(address), port(port), main_socket(-1), connected(false) {}\n\n    bool Connect() {\n        main_socket = socket(AF_INET, SOCK_STREAM, 0);\n        if (main_socket < 0) {\n            std::cerr << \"Error creating socket\\n\";\n            return false;\n        }\n\n        sockaddr_in server_addr;\n        server_addr.sin_family = AF_INET;\n        server_addr.sin_port = htons(port);\n        if (inet_pton(AF_INET, address.c_str(), &server_addr.sin_addr) <= 0) {\n            std::cerr << \"Invalid address\\n\";\n            return false;\n        }\n\n        if (connect(main_socket, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {\n            std::cerr << \"Connection failed\\n\";\n            return false;\n        }\n\n        connected = true;\n        return true;\n    }\n\n    bool Read(void* buffer, size_t size, const std::chrono::nanoseconds& timeout) {\n        if (!SetNonBlock(main_socket, true)) return false;\n\n        fd_set read_fds;\n        FD_ZERO(&read_fds);\n        FD_SET(main_socket, &read_fds);\n\n        struct timeval tv;\n        tv.tv_sec = std::chrono::duration_cast<std::chrono::seconds>(timeout).count();\n        tv.tv_usec = std::chrono::duration_cast<std::chrono::microseconds>(timeout).count() % 1000000;\n\n        int ret = select(main_socket + 1, &read_fds, nullptr, nullptr, &tv);\n        if (ret <= 0) return false;\n\n        ssize_t bytes_read = recv(main_socket, buffer, size, 0);\n        if (bytes_read < 0) return false;\n\n        return bytes_read == size;\n    }\n\n    bool Write(const void* buffer, size_t size, const std::chrono::nanoseconds& timeout) {\n        if (!SetNonBlock(main_socket, true)) return false;\n\n        fd_set write_fds;\n        FD_ZERO(&write_fds);\n        FD_SET(main_socket, &write_fds);\n\n        struct timeval tv;\n        tv.tv_sec = std::chrono::duration_cast<std::chrono::seconds>(timeout).count();\n        tv.tv_usec = std::chrono::duration_cast<std::chrono::microseconds>(timeout).count() % 1000000;\n\n        int ret = select(main_socket + 1, nullptr, &write_fds, nullptr, &tv);\n        if (ret <= 0) return false;\n\n        ssize_t bytes_sent = send(main_socket, buffer, size, 0);\n        if (bytes_sent < 0) return false;\n\n        return bytes_sent == size;\n    }\n\n    void Disconnect() {\n        if (connected) {\n            close(main_socket);\n            connected = false;\n        }\n    }\n\nprivate:\n    bool SetNonBlock(SocketHolder sockFD, bool nonBlocking) {\n        int flags = fcntl(sockFD, F_GETFL, 0);\n        if (flags == -1) return false;\n\n        if (nonBlocking)\n            flags |= O_NONBLOCK;\n        else\n            flags &= ~O_NONBLOCK;\n\n        return fcntl(sockFD, F_SETFL, flags) != -1;\n    }\n\n    bool ConnectWithTimeout(SocketHolder sockFD, void* server_addr, size_t server_addr_len, int timeout_seconds) {\n        SetNonBlock(sockFD, true);\n\n        int ret = connect(sockFD, (struct sockaddr*)server_addr, server_addr_len);\n        if (ret < 0 && errno != EINPROGRESS) return false;\n\n        fd_set write_fds;\n        FD_ZERO(&write_fds);\n        FD_SET(sockFD, &write_fds);\n\n        struct timeval tv;\n        tv.tv_sec = timeout_seconds;\n        tv.tv_usec = 0;\n\n        ret = select(sockFD + 1, nullptr, &write_fds, nullptr, &tv);\n        if (ret <= 0) return false;\n\n        int so_error;\n        socklen_t len = sizeof(so_error);\n        getsockopt(sockFD, SOL_SOCKET, SO_ERROR, &so_error, &len);\n\n        if (so_error != 0) return false;\n\n        SetNonBlock(sockFD, false);\n        return true;\n    }\n\n    std::string address;\n    u16 port;\n    SocketHolder main_socket;\n    bool connected;\n};",
      "#include <iostream>\n#include <string>\n#include <chrono>\n#include <cstring>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#include <fcntl.h>\n#include <errno.h>\n\nusing u16 = uint16_t;\nusing SocketHolder = int;\n\nclass TCPClient {\npublic:\n    TCPClient(const std::string& address, u16 port)\n        : address(address), port(port), main_socket(-1), connected(false) {}\n\n    bool Connect() {\n        main_socket = socket(AF_INET, SOCK_STREAM, 0);\n        if (main_socket < 0) {\n            return false;\n        }\n\n        struct sockaddr_in server_addr;\n        memset(&server_addr, 0, sizeof(server_addr));\n        server_addr.sin_family = AF_INET;\n        server_addr.sin_port = htons(port);\n        if (inet_pton(AF_INET, address.c_str(), &server_addr.sin_addr) <= 0) {\n            return false;\n        }\n\n        if (connect(main_socket, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {\n            return false;\n        }\n\n        connected = true;\n        return true;\n    }\n\n    bool Read(void* buffer, size_t size, const std::chrono::nanoseconds& timeout) {\n        if (!SetNonBlock(main_socket, true)) {\n            return false;\n        }\n\n        fd_set read_fds;\n        FD_ZERO(&read_fds);\n        FD_SET(main_socket, &read_fds);\n\n        struct timeval tv;\n        tv.tv_sec = std::chrono::duration_cast<std::chrono::seconds>(timeout).count();\n        tv.tv_usec = std::chrono::duration_cast<std::chrono::microseconds>(timeout).count() % 1000000;\n\n        int ret = select(main_socket + 1, &read_fds, nullptr, nullptr, &tv);\n        if (ret <= 0) {\n            return false;\n        }\n\n        ssize_t bytes_read = recv(main_socket, buffer, size, 0);\n        if (bytes_read < 0) {\n            return false;\n        }\n\n        return bytes_read == size;\n    }\n\n    bool Write(const void* buffer, size_t size, const std::chrono::nanoseconds& timeout) {\n        if (!SetNonBlock(main_socket, true)) {\n            return false;\n        }\n\n        fd_set write_fds;\n        FD_ZERO(&write_fds);\n        FD_SET(main_socket, &write_fds);\n\n        struct timeval tv;\n        tv.tv_sec = std::chrono::duration_cast<std::chrono::seconds>(timeout).count();\n        tv.tv_usec = std::chrono::duration_cast<std::chrono::microseconds>(timeout).count() % 1000000;\n\n        int ret = select(main_socket + 1, nullptr, &write_fds, nullptr, &tv);\n        if (ret <= 0) {\n            return false;\n        }\n\n        ssize_t bytes_sent = send(main_socket, buffer, size, 0);\n        if (bytes_sent < 0) {\n            return false;\n        }\n\n        return bytes_sent == size;\n    }\n\n    void Disconnect() {\n        if (connected) {\n            close(main_socket);\n            connected = false;\n        }\n    }\n\n    bool SetNonBlock(SocketHolder sockFD, bool nonBlocking) {\n        int flags = fcntl(sockFD, F_GETFL, 0);\n        if (flags < 0) {\n            return false;\n        }\n        flags = nonBlocking ? (flags | O_NONBLOCK) : (flags & ~O_NONBLOCK);\n        return fcntl(sockFD, F_SETFL, flags) == 0;\n    }\n\n    bool ConnectWithTimeout(SocketHolder sockFD, void* server_addr, size_t server_addr_len, int timeout_seconds) {\n        if (!SetNonBlock(sockFD, true)) {\n            return false;\n        }\n\n        int ret = connect(sockFD, (struct sockaddr*)server_addr, server_addr_len);\n        if (ret < 0 && errno != EINPROGRESS) {\n            return false;\n        }\n\n        fd_set write_fds;\n        FD_ZERO(&write_fds);\n        FD_SET(sockFD, &write_fds);\n\n        struct timeval tv;\n        tv.tv_sec = timeout_seconds;\n        tv.tv_usec = 0;\n\n        ret = select(sockFD + 1, nullptr, &write_fds, nullptr, &tv);\n        if (ret <= 0) {\n            return false;\n        }\n\n        int so_error;\n        socklen_t len = sizeof(so_error);\n        if (getsockopt(sockFD, SOL_SOCKET, SO_ERROR, &so_error, &len) < 0 || so_error != 0) {\n            return false;\n        }\n\n        return SetNonBlock(sockFD, false);\n    }\n\nprivate:\n    std::string address;\n    u16 port;\n    SocketHolder main_socket;\n    bool connected;\n};",
      "#include <iostream>\n#include <string>\n#include <chrono>\n#include <cstring>\n#include <cerrno>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netdb.h>\n#include <unistd.h>\n#include <fcntl.h>\n#include <arpa/inet.h>\n\nusing u16 = uint16_t;\nusing SocketHolder = int;\n\nclass TCPClient {\npublic:\n    TCPClient(const std::string& address, u16 port)\n        : address(address), port(port), main_socket(-1), connected(false) {}\n\n    bool Connect() {\n        struct addrinfo hints, *res;\n        memset(&hints, 0, sizeof(hints));\n        hints.ai_family = AF_UNSPEC;\n        hints.ai_socktype = SOCK_STREAM;\n\n        if (getaddrinfo(address.c_str(), std::to_string(port).c_str(), &hints, &res) != 0) {\n            return false;\n        }\n\n        main_socket = socket(res->ai_family, res->ai_socktype, res->ai_protocol);\n        if (main_socket == -1) {\n            freeaddrinfo(res);\n            return false;\n        }\n\n        if (connect(main_socket, res->ai_addr, res->ai_addrlen) == -1) {\n            close(main_socket);\n            freeaddrinfo(res);\n            return false;\n        }\n\n        freeaddrinfo(res);\n        connected = true;\n        return true;\n    }\n\n    bool Read(void* buffer, size_t size, const std::chrono::nanoseconds& timeout) {\n        if (!SetNonBlock(main_socket, true)) {\n            return false;\n        }\n\n        fd_set read_fds;\n        FD_ZERO(&read_fds);\n        FD_SET(main_socket, &read_fds);\n\n        struct timeval tv;\n        tv.tv_sec = std::chrono::duration_cast<std::chrono::seconds>(timeout).count();\n        tv.tv_usec = std::chrono::duration_cast<std::chrono::microseconds>(timeout).count() % 1000000;\n\n        int ret = select(main_socket + 1, &read_fds, nullptr, nullptr, &tv);\n        if (ret <= 0) {\n            return false;\n        }\n\n        ssize_t bytes_read = recv(main_socket, buffer, size, 0);\n        return bytes_read == static_cast<ssize_t>(size);\n    }\n\n    bool Write(const void* buffer, size_t size, const std::chrono::nanoseconds& timeout) {\n        if (!SetNonBlock(main_socket, true)) {\n            return false;\n        }\n\n        fd_set write_fds;\n        FD_ZERO(&write_fds);\n        FD_SET(main_socket, &write_fds);\n\n        struct timeval tv;\n        tv.tv_sec = std::chrono::duration_cast<std::chrono::seconds>(timeout).count();\n        tv.tv_usec = std::chrono::duration_cast<std::chrono::microseconds>(timeout).count() % 1000000;\n\n        int ret = select(main_socket + 1, nullptr, &write_fds, nullptr, &tv);\n        if (ret <= 0) {\n            return false;\n        }\n\n        ssize_t bytes_sent = send(main_socket, buffer, size, 0);\n        return bytes_sent == static_cast<ssize_t>(size);\n    }\n\n    void Disconnect() {\n        if (connected) {\n            close(main_socket);\n            connected = false;\n        }\n    }\n\n    bool SetNonBlock(SocketHolder sockFD, bool nonBlocking) {\n        int flags = fcntl(sockFD, F_GETFL, 0);\n        if (flags == -1) {\n            return false;\n        }\n\n        flags = nonBlocking ? (flags | O_NONBLOCK) : (flags & ~O_NONBLOCK);\n        return fcntl(sockFD, F_SETFL, flags) != -1;\n    }\n\n    bool ConnectWithTimeout(SocketHolder sockFD, void* server_addr, size_t server_addr_len, int timeout_seconds) {\n        if (!SetNonBlock(sockFD, true)) {\n            return false;\n        }\n\n        int ret = connect(sockFD, static_cast<struct sockaddr*>(server_addr), server_addr_len);\n        if (ret == -1 && errno != EINPROGRESS) {\n            return false;\n        }\n\n        fd_set write_fds;\n        FD_ZERO(&write_fds);\n        FD_SET(sockFD, &write_fds);\n\n        struct timeval tv;\n        tv.tv_sec = timeout_seconds;\n        tv.tv_usec = 0;\n\n        ret = select(sockFD + 1, nullptr, &write_fds, nullptr, &tv);\n        if (ret <= 0) {\n            return false;\n        }\n\n        int so_error;\n        socklen_t len = sizeof(so_error);\n        getsockopt(sockFD, SOL_SOCKET, SO_ERROR, &so_error, &len);\n        if (so_error != 0) {\n            return false;\n        }\n\n        return SetNonBlock(sockFD, false);\n    }\n\nprivate:\n    std::string address;\n    u16 port;\n    SocketHolder main_socket;\n    bool connected;\n};",
      "#include <iostream>\n#include <string>\n#include <chrono>\n#include <cstring>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netdb.h>\n#include <unistd.h>\n#include <fcntl.h>\n#include <errno.h>\n\nusing u16 = uint16_t;\nusing SocketHolder = int;\n\nclass TCPClient {\npublic:\n    TCPClient(const std::string& address, u16 port)\n        : address(address), port(port), main_socket(-1), connected(false) {}\n\n    ~TCPClient() {\n        Disconnect();\n    }\n\n    bool Connect() {\n        struct addrinfo hints, *res;\n        memset(&hints, 0, sizeof(hints));\n        hints.ai_family = AF_UNSPEC;\n        hints.ai_socktype = SOCK_STREAM;\n\n        if (getaddrinfo(address.c_str(), std::to_string(port).c_str(), &hints, &res) != 0) {\n            return false;\n        }\n\n        main_socket = socket(res->ai_family, res->ai_socktype, res->ai_protocol);\n        if (main_socket == -1) {\n            freeaddrinfo(res);\n            return false;\n        }\n\n        if (connect(main_socket, res->ai_addr, res->ai_addrlen) == -1) {\n            close(main_socket);\n            freeaddrinfo(res);\n            return false;\n        }\n\n        freeaddrinfo(res);\n        connected = true;\n        return true;\n    }\n\n    bool Read(void* buffer, size_t size, const std::chrono::nanoseconds& timeout) {\n        if (!connected) return false;\n\n        fd_set read_fds;\n        FD_ZERO(&read_fds);\n        FD_SET(main_socket, &read_fds);\n\n        struct timeval tv;\n        tv.tv_sec = std::chrono::duration_cast<std::chrono::seconds>(timeout).count();\n        tv.tv_usec = std::chrono::duration_cast<std::chrono::microseconds>(timeout).count() % 1000000;\n\n        int ret = select(main_socket + 1, &read_fds, nullptr, nullptr, &tv);\n        if (ret <= 0) return false;\n\n        ssize_t bytes_read = recv(main_socket, buffer, size, 0);\n        return bytes_read == static_cast<ssize_t>(size);\n    }\n\n    bool Write(const void* buffer, size_t size, const std::chrono::nanoseconds& timeout) {\n        if (!connected) return false;\n\n        fd_set write_fds;\n        FD_ZERO(&write_fds);\n        FD_SET(main_socket, &write_fds);\n\n        struct timeval tv;\n        tv.tv_sec = std::chrono::duration_cast<std::chrono::seconds>(timeout).count();\n        tv.tv_usec = std::chrono::duration_cast<std::chrono::microseconds>(timeout).count() % 1000000;\n\n        int ret = select(main_socket + 1, nullptr, &write_fds, nullptr, &tv);\n        if (ret <= 0) return false;\n\n        ssize_t bytes_sent = send(main_socket, buffer, size, 0);\n        return bytes_sent == static_cast<ssize_t>(size);\n    }\n\n    void Disconnect() {\n        if (connected) {\n            close(main_socket);\n            connected = false;\n        }\n    }\n\n    bool SetNonBlock(SocketHolder sockFD, bool nonBlocking) {\n        int flags = fcntl(sockFD, F_GETFL, 0);\n        if (flags == -1) return false;\n\n        flags = nonBlocking ? (flags | O_NONBLOCK) : (flags & ~O_NONBLOCK);\n        return fcntl(sockFD, F_SETFL, flags) != -1;\n    }\n\n    bool ConnectWithTimeout(SocketHolder sockFD, void* server_addr, size_t server_addr_len, int timeout_seconds) {\n        SetNonBlock(sockFD, true);\n\n        int ret = connect(sockFD, static_cast<struct sockaddr*>(server_addr), server_addr_len);\n        if (ret == -1 && errno != EINPROGRESS) {\n            SetNonBlock(sockFD, false);\n            return false;\n        }\n\n        fd_set write_fds;\n        FD_ZERO(&write_fds);\n        FD_SET(sockFD, &write_fds);\n\n        struct timeval tv;\n        tv.tv_sec = timeout_seconds;\n        tv.tv_usec = 0;\n\n        ret = select(sockFD + 1, nullptr, &write_fds, nullptr, &tv);\n        if (ret <= 0) {\n            SetNonBlock(sockFD, false);\n            return false;\n        }\n\n        int so_error;\n        socklen_t len = sizeof(so_error);\n        getsockopt(sockFD, SOL_SOCKET, SO_ERROR, &so_error, &len);\n        if (so_error != 0) {\n            SetNonBlock(sockFD, false);\n            return false;\n        }\n\n        SetNonBlock(sockFD, false);\n        return true;\n    }\n\nprivate:\n    std::string address;\n    u16 port;\n    SocketHolder main_socket;\n    bool connected;\n};",
      "#include <iostream>\n#include <string>\n#include <chrono>\n#include <cstring>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#include <fcntl.h>\n#include <errno.h>\n\nclass TCPClient {\npublic:\n    using SocketHolder = int;\n    using u16 = uint16_t;\n\n    TCPClient(const std::string& address, u16 port)\n        : address(address), port(port), main_socket(-1), connected(false) {}\n\n    ~TCPClient() {\n        Disconnect();\n    }\n\n    bool Connect() {\n        struct sockaddr_in server_addr;\n        server_addr.sin_family = AF_INET;\n        server_addr.sin_port = htons(port);\n        if (inet_pton(AF_INET, address.c_str(), &server_addr.sin_addr) <= 0) {\n            return false;\n        }\n\n        main_socket = socket(AF_INET, SOCK_STREAM, 0);\n        if (main_socket < 0) {\n            return false;\n        }\n\n        if (!ConnectWithTimeout(main_socket, (void*)&server_addr, sizeof(server_addr), 5)) {\n            return false;\n        }\n\n        connected = true;\n        return true;\n    }\n\n    bool Read(void* buffer, size_t size, const std::chrono::nanoseconds& timeout) {\n        if (!connected) return false;\n\n        if (!SetNonBlock(main_socket, true)) return false;\n\n        fd_set read_fds;\n        FD_ZERO(&read_fds);\n        FD_SET(main_socket, &read_fds);\n\n        struct timeval tv;\n        tv.tv_sec = std::chrono::duration_cast<std::chrono::seconds>(timeout).count();\n        tv.tv_usec = std::chrono::duration_cast<std::chrono::microseconds>(timeout).count() % 1000000;\n\n        int ret = select(main_socket + 1, &read_fds, nullptr, nullptr, &tv);\n        if (ret <= 0) {\n            return false;\n        }\n\n        ssize_t bytes_read = recv(main_socket, buffer, size, 0);\n        return bytes_read == size;\n    }\n\n    bool Write(const void* buffer, size_t size, const std::chrono::nanoseconds& timeout) {\n        if (!connected) return false;\n\n        if (!SetNonBlock(main_socket, true)) return false;\n\n        fd_set write_fds;\n        FD_ZERO(&write_fds);\n        FD_SET(main_socket, &write_fds);\n\n        struct timeval tv;\n        tv.tv_sec = std::chrono::duration_cast<std::chrono::seconds>(timeout).count();\n        tv.tv_usec = std::chrono::duration_cast<std::chrono::microseconds>(timeout).count() % 1000000;\n\n        int ret = select(main_socket + 1, nullptr, &write_fds, nullptr, &tv);\n        if (ret <= 0) {\n            return false;\n        }\n\n        ssize_t bytes_written = send(main_socket, buffer, size, 0);\n        return bytes_written == size;\n    }\n\n    void Disconnect() {\n        if (connected) {\n            close(main_socket);\n            connected = false;\n        }\n    }\n\nprivate:\n    std::string address;\n    u16 port;\n    SocketHolder main_socket;\n    bool connected;\n\n    bool SetNonBlock(SocketHolder sockFD, bool nonBlocking) {\n        int flags = fcntl(sockFD, F_GETFL, 0);\n        if (flags == -1) return false;\n\n        if (nonBlocking) {\n            flags |= O_NONBLOCK;\n        } else {\n            flags &= ~O_NONBLOCK;\n        }\n\n        return fcntl(sockFD, F_SETFL, flags) != -1;\n    }\n\n    bool ConnectWithTimeout(SocketHolder sockFD, void* server_addr, size_t server_addr_len, int timeout_seconds) {\n        SetNonBlock(sockFD, true);\n\n        int ret = connect(sockFD, (struct sockaddr*)server_addr, server_addr_len);\n        if (ret < 0 && errno != EINPROGRESS) {\n            return false;\n        }\n\n        if (ret == 0) {\n            SetNonBlock(sockFD, false);\n            return true;\n        }\n\n        fd_set write_fds;\n        FD_ZERO(&write_fds);\n        FD_SET(sockFD, &write_fds);\n\n        struct timeval tv;\n        tv.tv_sec = timeout_seconds;\n        tv.tv_usec = 0;\n\n        ret = select(sockFD + 1, nullptr, &write_fds, nullptr, &tv);\n        if (ret <= 0) {\n            return false;\n        }\n\n        int so_error;\n        socklen_t len = sizeof(so_error);\n        getsockopt(sockFD, SOL_SOCKET, SO_ERROR, &so_error, &len);\n        if (so_error != 0) {\n            return false;\n        }\n\n        SetNonBlock(sockFD, false);\n        return true;\n    }\n};",
      "#include <iostream>\n#include <string>\n#include <chrono>\n#include <cstring>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netdb.h>\n#include <unistd.h>\n#include <fcntl.h>\n#include <errno.h>\n\nusing u16 = uint16_t;\nusing SocketHolder = int;\n\nclass TCPClient {\npublic:\n    TCPClient(const std::string& address, u16 port)\n        : address(address), port(port), main_socket(-1), connected(false) {}\n\n    bool Connect() {\n        struct addrinfo hints, *res;\n        memset(&hints, 0, sizeof(hints));\n        hints.ai_family = AF_UNSPEC;\n        hints.ai_socktype = SOCK_STREAM;\n\n        if (getaddrinfo(address.c_str(), std::to_string(port).c_str(), &hints, &res) != 0) {\n            return false;\n        }\n\n        main_socket = socket(res->ai_family, res->ai_socktype, res->ai_protocol);\n        if (main_socket == -1) {\n            freeaddrinfo(res);\n            return false;\n        }\n\n        if (connect(main_socket, res->ai_addr, res->ai_addrlen) == -1) {\n            close(main_socket);\n            freeaddrinfo(res);\n            return false;\n        }\n\n        freeaddrinfo(res);\n        connected = true;\n        return true;\n    }\n\n    bool Read(void* buffer, size_t size, const std::chrono::nanoseconds& timeout) {\n        if (!SetNonBlock(main_socket, true)) {\n            return false;\n        }\n\n        fd_set read_fds;\n        FD_ZERO(&read_fds);\n        FD_SET(main_socket, &read_fds);\n\n        struct timeval tv;\n        tv.tv_sec = std::chrono::duration_cast<std::chrono::seconds>(timeout).count();\n        tv.tv_usec = std::chrono::duration_cast<std::chrono::microseconds>(timeout).count() % 1000000;\n\n        int retval = select(main_socket + 1, &read_fds, NULL, NULL, &tv);\n        if (retval == -1) {\n            return false;\n        } else if (retval == 0) {\n            return false;\n        }\n\n        ssize_t bytes_read = recv(main_socket, buffer, size, 0);\n        if (bytes_read == -1) {\n            return false;\n        }\n\n        return bytes_read == size;\n    }\n\n    bool Write(const void* buffer, size_t size, const std::chrono::nanoseconds& timeout) {\n        if (!SetNonBlock(main_socket, true)) {\n            return false;\n        }\n\n        fd_set write_fds;\n        FD_ZERO(&write_fds);\n        FD_SET(main_socket, &write_fds);\n\n        struct timeval tv;\n        tv.tv_sec = std::chrono::duration_cast<std::chrono::seconds>(timeout).count();\n        tv.tv_usec = std::chrono::duration_cast<std::chrono::microseconds>(timeout).count() % 1000000;\n\n        int retval = select(main_socket + 1, NULL, &write_fds, NULL, &tv);\n        if (retval == -1) {\n            return false;\n        } else if (retval == 0) {\n            return false;\n        }\n\n        ssize_t bytes_written = send(main_socket, buffer, size, 0);\n        if (bytes_written == -1) {\n            return false;\n        }\n\n        return bytes_written == size;\n    }\n\n    void Disconnect() {\n        if (connected) {\n            close(main_socket);\n            connected = false;\n        }\n    }\n\nprivate:\n    bool SetNonBlock(SocketHolder sockFD, bool nonBlocking) {\n        int flags = fcntl(sockFD, F_GETFL, 0);\n        if (flags == -1) {\n            return false;\n        }\n\n        if (nonBlocking) {\n            flags |= O_NONBLOCK;\n        } else {\n            flags &= ~O_NONBLOCK;\n        }\n\n        return fcntl(sockFD, F_SETFL, flags) != -1;\n    }\n\n    bool ConnectWithTimeout(SocketHolder sockFD, void* server_addr, size_t server_addr_len, int timeout_seconds) {\n        if (!SetNonBlock(sockFD, true)) {\n            return false;\n        }\n\n        int result = connect(sockFD, static_cast<struct sockaddr*>(server_addr), server_addr_len);\n        if (result == -1 && errno != EINPROGRESS) {\n            return false;\n        }\n\n        fd_set write_fds;\n        FD_ZERO(&write_fds);\n        FD_SET(sockFD, &write_fds);\n\n        struct timeval tv;\n        tv.tv_sec = timeout_seconds;\n        tv.tv_usec = 0;\n\n        result = select(sockFD + 1, NULL, &write_fds, NULL, &tv);\n        if (result <= 0) {\n            return false;\n        }\n\n        int so_error;\n        socklen_t len = sizeof(so_error);\n        if (getsockopt(sockFD, SOL_SOCKET, SO_ERROR, &so_error, &len) == -1 || so_error != 0) {\n            return false;\n        }\n\n        return SetNonBlock(sockFD, false);\n    }\n\n    std::string address;\n    u16 port;\n    SocketHolder main_socket;\n    bool connected;\n};",
      "#include <iostream>\n#include <string>\n#include <chrono>\n#include <cstring>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#include <fcntl.h>\n\nusing u16 = uint16_t;\nusing SocketHolder = int;\n\nclass TCPClient {\npublic:\n    TCPClient(const std::string& address, u16 port)\n        : address(address), port(port), main_socket(-1), connected(false) {}\n\n    bool Connect() {\n        main_socket = socket(AF_INET, SOCK_STREAM, 0);\n        if (main_socket < 0) {\n            return false;\n        }\n\n        sockaddr_in server_addr;\n        std::memset(&server_addr, 0, sizeof(server_addr));\n        server_addr.sin_family = AF_INET;\n        server_addr.sin_port = htons(port);\n        if (inet_pton(AF_INET, address.c_str(), &server_addr.sin_addr) <= 0) {\n            return false;\n        }\n\n        if (connect(main_socket, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {\n            return false;\n        }\n\n        connected = true;\n        return true;\n    }\n\n    bool Read(void* buffer, size_t size, const std::chrono::nanoseconds& timeout) {\n        if (!SetNonBlock(main_socket, true)) {\n            return false;\n        }\n\n        fd_set read_fds;\n        FD_ZERO(&read_fds);\n        FD_SET(main_socket, &read_fds);\n\n        struct timeval tv;\n        tv.tv_sec = std::chrono::duration_cast<std::chrono::seconds>(timeout).count();\n        tv.tv_usec = std::chrono::duration_cast<std::chrono::microseconds>(timeout).count() % 1000000;\n\n        int ret = select(main_socket + 1, &read_fds, nullptr, nullptr, &tv);\n        if (ret <= 0) {\n            return false;\n        }\n\n        ssize_t bytes_read = recv(main_socket, buffer, size, 0);\n        if (bytes_read < 0) {\n            return false;\n        }\n\n        return static_cast<size_t>(bytes_read) == size;\n    }\n\n    bool Write(const void* buffer, size_t size, const std::chrono::nanoseconds& timeout) {\n        if (!SetNonBlock(main_socket, true)) {\n            return false;\n        }\n\n        fd_set write_fds;\n        FD_ZERO(&write_fds);\n        FD_SET(main_socket, &write_fds);\n\n        struct timeval tv;\n        tv.tv_sec = std::chrono::duration_cast<std::chrono::seconds>(timeout).count();\n        tv.tv_usec = std::chrono::duration_cast<std::chrono::microseconds>(timeout).count() % 1000000;\n\n        int ret = select(main_socket + 1, nullptr, &write_fds, nullptr, &tv);\n        if (ret <= 0) {\n            return false;\n        }\n\n        ssize_t bytes_written = send(main_socket, buffer, size, 0);\n        if (bytes_written < 0) {\n            return false;\n        }\n\n        return static_cast<size_t>(bytes_written) == size;\n    }\n\n    void Disconnect() {\n        if (connected) {\n            close(main_socket);\n            connected = false;\n        }\n    }\n\n    bool SetNonBlock(SocketHolder sockFD, bool nonBlocking) {\n        int flags = fcntl(sockFD, F_GETFL, 0);\n        if (flags < 0) {\n            return false;\n        }\n\n        if (nonBlocking) {\n            flags |= O_NONBLOCK;\n        } else {\n            flags &= ~O_NONBLOCK;\n        }\n\n        return fcntl(sockFD, F_SETFL, flags) == 0;\n    }\n\n    bool ConnectWithTimeout(SocketHolder sockFD, void* server_addr, size_t server_addr_len, int timeout_seconds) {\n        if (!SetNonBlock(sockFD, true)) {\n            return false;\n        }\n\n        int ret = connect(sockFD, (struct sockaddr*)server_addr, server_addr_len);\n        if (ret < 0 && errno != EINPROGRESS) {\n            return false;\n        }\n\n        fd_set write_fds;\n        FD_ZERO(&write_fds);\n        FD_SET(sockFD, &write_fds);\n\n        struct timeval tv;\n        tv.tv_sec = timeout_seconds;\n        tv.tv_usec = 0;\n\n        ret = select(sockFD + 1, nullptr, &write_fds, nullptr, &tv);\n        if (ret <= 0) {\n            return false;\n        }\n\n        int so_error;\n        socklen_t len = sizeof(so_error);\n        if (getsockopt(sockFD, SOL_SOCKET, SO_ERROR, &so_error, &len) < 0 || so_error != 0) {\n            return false;\n        }\n\n        return true;\n    }\n\nprivate:\n    std::string address;\n    u16 port;\n    SocketHolder main_socket;\n    bool connected;\n};"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 2,
    "Instruction": "Task Description: Create a C++ class that implements HTTP client functionality using libcurl for making HTTP requests and handling responses, including JSON parsing capabilities.\n\nClass Description: The CurlHttpClient class provides methods for performing HTTP GET requests and downloading web pages, with support for custom headers and request bodies. It includes JSON response handling and memory management for received data.\n\nAttributes:\nMemoryStruct: [struct] - A helper structure for storing received data in memory during curl operations\n  - memory: [char*] - Pointer to the allocated memory buffer\n  - size: [size_t] - Size of the allocated memory buffer\n\nMethods:\nWriteMemoryCallback: [static](void* contents, size_t size, size_t nmemb, void* userp) -> size_t - A static callback function for libcurl to write received data into memory\n  - contents: [void*] - Pointer to the received data\n  - size: [size_t] - Size of each data element\n  - nmemb: [size_t] - Number of data elements\n  - userp: [void*] - Pointer to user-provided memory structure\n  - Returns: The number of bytes actually written\n\ndownloadPage: [](const std::string& url, std::string& res, const std::vector<std::string>& headers, const std::string& body) -> long - Downloads a web page and returns the HTTP status code\n  - url: [const std::string&] - The URL to request\n  - res: [std::string&] - Reference to store the response body\n  - headers: [const std::vector<std::string>&] - Vector of header strings to include in the request\n  - body: [const std::string&] - Request body content\n  - Returns: HTTP status code of the response\n\ngetRequest: [](const std::string& url, json& res, const std::vector<std::string>& headers, const std::string& body) -> long - Performs a GET request and parses the JSON response\n  - url: [const std::string&] - The URL to request\n  - res: [json&] - Reference to store the parsed JSON response\n  - headers: [const std::vector<std::string>&] - Vector of header strings to include in the request\n  - body: [const std::string&] - Request body content\n  - Returns: HTTP status code of the response",
    "Canonical_solution": "#include <curl/curl.h>\n#include <string>\n#include <vector>\n#include <nlohmann/json.hpp>\n\nusing json = nlohmann::ordered_json;\n\nclass CurlHttpClient {\npublic:\n    struct MemoryStruct {\n        char* memory;\n        size_t size;\n    };\n\n    static size_t WriteMemoryCallback(void* contents, size_t size, size_t nmemb, void* userp) {\n        size_t realsize = size * nmemb;\n        MemoryStruct* mem = (MemoryStruct*)userp;\n\n        char* ptr = static_cast<char*>(realloc(mem->memory, mem->size + realsize + 1));\n        if (ptr == NULL) {\n            return 0;\n        }\n\n        mem->memory = ptr;\n        memcpy(&(mem->memory[mem->size]), contents, realsize);\n        mem->size += realsize;\n        mem->memory[mem->size] = 0;\n\n        return realsize;\n    }\n\n    long downloadPage(const std::string& url, std::string& res, const std::vector<std::string>& headers, const std::string& body) {\n        CURL* curl_handle;\n        MemoryStruct chunk;\n        struct curl_slist* list = NULL;\n        long status_code;\n\n        chunk.memory = static_cast<char*>(malloc(1));\n        chunk.size = 0;\n\n        curl_global_init(CURL_GLOBAL_ALL);\n        curl_handle = curl_easy_init();\n        curl_easy_setopt(curl_handle, CURLOPT_URL, url.c_str());\n        if (!headers.empty()) {\n            for (auto& h : headers) {\n                list = curl_slist_append(list, h.c_str());\n            }\n            curl_easy_setopt(curl_handle, CURLOPT_HTTPHEADER, list);\n        }\n        if (body != \"\") {\n            curl_easy_setopt(curl_handle, CURLOPT_POSTFIELDS, body.c_str());\n        }\n\n        curl_easy_setopt(curl_handle, CURLOPT_WRITEFUNCTION, WriteMemoryCallback);\n        curl_easy_setopt(curl_handle, CURLOPT_WRITEDATA, (void*)&chunk);\n        curl_easy_setopt(curl_handle, CURLOPT_USERAGENT, \"HamletDuFromage\");\n\n        curl_easy_setopt(curl_handle, CURLOPT_SSL_VERIFYPEER, 0L);\n        curl_easy_perform(curl_handle);\n        curl_easy_getinfo(curl_handle, CURLINFO_RESPONSE_CODE, &status_code);\n        curl_easy_cleanup(curl_handle);\n        res = std::string(chunk.memory);\n        free(chunk.memory);\n\n        curl_global_cleanup();\n        return status_code;\n    }\n\n    long getRequest(const std::string& url, json& res, const std::vector<std::string>& headers, const std::string& body) {\n        std::string request;\n        long status_code = downloadPage(url, request, headers, body);\n\n        if (json::accept(request))\n            res = json::parse(request);\n        else\n            res = json::object();\n\n        return status_code;\n    }\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 146,
    "matched_results": [
      "#include <iostream>\n#include <string>\n#include <vector>\n#include <curl/curl.h>\n#include <nlohmann/json.hpp>\n\nusing json = nlohmann::json;\n\nstruct MemoryStruct {\n    char* memory;\n    size_t size;\n    MemoryStruct() : memory((char*)malloc(1)), size(0) {}\n    ~MemoryStruct() { free(memory); }\n};\n\nclass CurlHttpClient {\npublic:\n    static size_t WriteMemoryCallback(void* contents, size_t size, size_t nmemb, void* userp) {\n        size_t realsize = size * nmemb;\n        MemoryStruct* mem = (MemoryStruct*)userp;\n        char* ptr = (char*)realloc(mem->memory, mem->size + realsize + 1);\n        if (ptr == nullptr) {\n            std::cerr << \"Not enough memory (realloc returned nullptr)\" << std::endl;\n            return 0;\n        }\n        mem->memory = ptr;\n        memcpy(&(mem->memory[mem->size]), contents, realsize);\n        mem->size += realsize;\n        mem->memory[mem->size] = 0;\n        return realsize;\n    }\n\n    long downloadPage(const std::string& url, std::string& res, const std::vector<std::string>& headers, const std::string& body) {\n        CURL* curl;\n        CURLcode result;\n        struct curl_slist* chunk = nullptr;\n        MemoryStruct chunkMemory;\n\n        curl_global_init(CURL_GLOBAL_DEFAULT);\n        curl = curl_easy_init();\n        if (curl) {\n            curl_easy_setopt(curl, CURLOPT_URL, url.c_str());\n            curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, WriteMemoryCallback);\n            curl_easy_setopt(curl, CURLOPT_WRITEDATA, (void*)&chunkMemory);\n\n            for (const auto& header : headers) {\n                chunk = curl_slist_append(chunk, header.c_str());\n            }\n            if (chunk) {\n                curl_easy_setopt(curl, CURLOPT_HTTPHEADER, chunk);\n            }\n\n            if (!body.empty()) {\n                curl_easy_setopt(curl, CURLOPT_POSTFIELDS, body.c_str());\n            }\n\n            result = curl_easy_perform(curl);\n            if (result != CURLE_OK) {\n                std::cerr << \"curl_easy_perform() failed: \" << curl_easy_strerror(result) << std::endl;\n            } else {\n                res = std::string(chunkMemory.memory, chunkMemory.size);\n            }\n\n            long response_code;\n            curl_easy_getinfo(curl, CURLINFO_RESPONSE_CODE, &response_code);\n\n            curl_easy_cleanup(curl);\n            if (chunk) {\n                curl_slist_free_all(chunk);\n            }\n            curl_global_cleanup();\n            return response_code;\n        }\n        return -1;\n    }\n\n    long getRequest(const std::string& url, json& res, const std::vector<std::string>& headers, const std::string& body) {\n        std::string response;\n        long http_code = downloadPage(url, response, headers, body);\n        if (http_code == 200) {\n            res = json::parse(response);\n        }\n        return http_code;\n    }\n};",
      "#include <iostream>\n#include <string>\n#include <vector>\n#include <curl/curl.h>\n#include <nlohmann/json.hpp>\n\nusing json = nlohmann::json;\n\nstruct MemoryStruct {\n    char* memory;\n    size_t size;\n    MemoryStruct() : memory(nullptr), size(0) {}\n};\n\nclass CurlHttpClient {\npublic:\n    CurlHttpClient() {\n        curl_global_init(CURL_GLOBAL_DEFAULT);\n    }\n\n    ~CurlHttpClient() {\n        curl_global_cleanup();\n    }\n\n    static size_t WriteMemoryCallback(void* contents, size_t size, size_t nmemb, void* userp) {\n        size_t realsize = size * nmemb;\n        struct MemoryStruct* mem = (struct MemoryStruct*)userp;\n\n        char* ptr = (char*)realloc(mem->memory, mem->size + realsize + 1);\n        if (ptr == nullptr) {\n            return 0;\n        }\n\n        mem->memory = ptr;\n        memcpy(&(mem->memory[mem->size]), contents, realsize);\n        mem->size += realsize;\n        mem->memory[mem->size] = 0;\n\n        return realsize;\n    }\n\n    long downloadPage(const std::string& url, std::string& res, const std::vector<std::string>& headers = {}, const std::string& body = \"\") {\n        CURL* curl;\n        CURLcode result;\n        struct MemoryStruct chunk;\n\n        curl = curl_easy_init();\n        if (!curl) {\n            return -1;\n        }\n\n        struct curl_slist* header_list = nullptr;\n        for (const auto& header : headers) {\n            header_list = curl_slist_append(header_list, header.c_str());\n        }\n\n        curl_easy_setopt(curl, CURLOPT_URL, url.c_str());\n        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, WriteMemoryCallback);\n        curl_easy_setopt(curl, CURLOPT_WRITEDATA, (void*)&chunk);\n        curl_easy_setopt(curl, CURLOPT_USERAGENT, \"libcurl-agent/1.0\");\n\n        if (!headers.empty()) {\n            curl_easy_setopt(curl, CURLOPT_HTTPHEADER, header_list);\n        }\n\n        if (!body.empty()) {\n            curl_easy_setopt(curl, CURLOPT_POSTFIELDS, body.c_str());\n        }\n\n        result = curl_easy_perform(curl);\n\n        long response_code = 0;\n        if (result == CURLE_OK) {\n            curl_easy_getinfo(curl, CURLINFO_RESPONSE_CODE, &response_code);\n            res = std::string(chunk.memory, chunk.size);\n        }\n\n        curl_easy_cleanup(curl);\n        if (header_list) {\n            curl_slist_free_all(header_list);\n        }\n        if (chunk.memory) {\n            free(chunk.memory);\n        }\n\n        return response_code;\n    }\n\n    long getRequest(const std::string& url, json& res, const std::vector<std::string>& headers = {}, const std::string& body = \"\") {\n        std::string response;\n        long http_code = downloadPage(url, response, headers, body);\n        if (http_code == 200) {\n            res = json::parse(response);\n        }\n        return http_code;\n    }\n};",
      "#include <iostream>\n#include <string>\n#include <vector>\n#include <curl/curl.h>\n#include <nlohmann/json.hpp>\n\nusing json = nlohmann::json;\n\nstruct MemoryStruct {\n    char* memory;\n    size_t size;\n    MemoryStruct() : memory((char*)malloc(1)), size(0) {}\n    ~MemoryStruct() { free(memory); }\n};\n\nclass CurlHttpClient {\npublic:\n    static size_t WriteMemoryCallback(void* contents, size_t size, size_t nmemb, void* userp) {\n        size_t realsize = size * nmemb;\n        MemoryStruct* mem = (MemoryStruct*)userp;\n\n        char* ptr = (char*)realloc(mem->memory, mem->size + realsize + 1);\n        if (ptr == NULL) {\n            std::cerr << \"Not enough memory (realloc returned NULL)\\n\";\n            return 0;\n        }\n\n        mem->memory = ptr;\n        memcpy(&(mem->memory[mem->size]), contents, realsize);\n        mem->size += realsize;\n        mem->memory[mem->size] = 0;\n\n        return realsize;\n    }\n\n    long downloadPage(const std::string& url, std::string& res, const std::vector<std::string>& headers = {}, const std::string& body = \"\") {\n        CURL* curl;\n        CURLcode result;\n        long http_code = 0;\n        struct curl_slist* chunk = NULL;\n\n        curl_global_init(CURL_GLOBAL_DEFAULT);\n        curl = curl_easy_init();\n        if (curl) {\n            MemoryStruct chunkMemory;\n\n            curl_easy_setopt(curl, CURLOPT_URL, url.c_str());\n            curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, WriteMemoryCallback);\n            curl_easy_setopt(curl, CURLOPT_WRITEDATA, (void*)&chunkMemory);\n\n            if (!headers.empty()) {\n                for (const auto& header : headers) {\n                    chunk = curl_slist_append(chunk, header.c_str());\n                }\n                curl_easy_setopt(curl, CURLOPT_HTTPHEADER, chunk);\n            }\n\n            if (!body.empty()) {\n                curl_easy_setopt(curl, CURLOPT_POSTFIELDS, body.c_str());\n            }\n\n            result = curl_easy_perform(curl);\n            if (result != CURLE_OK) {\n                std::cerr << \"curl_easy_perform() failed: \" << curl_easy_strerror(result) << \"\\n\";\n            } else {\n                curl_easy_getinfo(curl, CURLINFO_RESPONSE_CODE, &http_code);\n                res = std::string(chunkMemory.memory, chunkMemory.size);\n            }\n\n            curl_easy_cleanup(curl);\n            if (chunk) {\n                curl_slist_free_all(chunk);\n            }\n        }\n        curl_global_cleanup();\n        return http_code;\n    }\n\n    long getRequest(const std::string& url, json& res, const std::vector<std::string>& headers = {}, const std::string& body = \"\") {\n        std::string response;\n        long http_code = downloadPage(url, response, headers, body);\n        if (http_code == 200) {\n            res = json::parse(response);\n        }\n        return http_code;\n    }\n};",
      "#include <iostream>\n#include <string>\n#include <vector>\n#include <curl/curl.h>\n#include <nlohmann/json.hpp>\n\nusing json = nlohmann::json;\n\nstruct MemoryStruct {\n    char* memory;\n    size_t size;\n    MemoryStruct() : memory(nullptr), size(0) {}\n    ~MemoryStruct() { if (memory) free(memory); }\n};\n\nclass CurlHttpClient {\npublic:\n    static size_t WriteMemoryCallback(void* contents, size_t size, size_t nmemb, void* userp) {\n        size_t realsize = size * nmemb;\n        struct MemoryStruct* mem = (struct MemoryStruct*)userp;\n        char* ptr = (char*)realloc(mem->memory, mem->size + realsize + 1);\n        if (ptr == nullptr) {\n            std::cerr << \"Not enough memory (realloc returned nullptr)\\n\";\n            return 0;\n        }\n        mem->memory = ptr;\n        memcpy(&(mem->memory[mem->size]), contents, realsize);\n        mem->size += realsize;\n        mem->memory[mem->size] = 0;\n        return realsize;\n    }\n\n    long downloadPage(const std::string& url, std::string& res, const std::vector<std::string>& headers, const std::string& body) {\n        CURL* curl_handle;\n        CURLcode res_code;\n        struct MemoryStruct chunk;\n        struct curl_slist* header_list = nullptr;\n\n        curl_global_init(CURL_GLOBAL_ALL);\n        curl_handle = curl_easy_init();\n        if (curl_handle) {\n            curl_easy_setopt(curl_handle, CURLOPT_URL, url.c_str());\n            curl_easy_setopt(curl_handle, CURLOPT_WRITEFUNCTION, WriteMemoryCallback);\n            curl_easy_setopt(curl_handle, CURLOPT_WRITEDATA, (void*)&chunk);\n\n            for (const auto& header : headers) {\n                header_list = curl_slist_append(header_list, header.c_str());\n            }\n            if (header_list) {\n                curl_easy_setopt(curl_handle, CURLOPT_HTTPHEADER, header_list);\n            }\n\n            if (!body.empty()) {\n                curl_easy_setopt(curl_handle, CURLOPT_POSTFIELDS, body.c_str());\n            }\n\n            res_code = curl_easy_perform(curl_handle);\n            if (res_code != CURLE_OK) {\n                std::cerr << \"curl_easy_perform() failed: \" << curl_easy_strerror(res_code) << \"\\n\";\n            } else {\n                res = std::string(chunk.memory, chunk.size);\n            }\n\n            long response_code;\n            curl_easy_getinfo(curl_handle, CURLINFO_RESPONSE_CODE, &response_code);\n\n            curl_easy_cleanup(curl_handle);\n            if (header_list) {\n                curl_slist_free_all(header_list);\n            }\n            curl_global_cleanup();\n            return response_code;\n        }\n        return 0;\n    }\n\n    long getRequest(const std::string& url, json& res, const std::vector<std::string>& headers, const std::string& body) {\n        std::string response_str;\n        long http_code = downloadPage(url, response_str, headers, body);\n        if (http_code == 200) {\n            res = json::parse(response_str);\n        }\n        return http_code;\n    }\n};",
      "#include <iostream>\n#include <string>\n#include <vector>\n#include <curl/curl.h>\n#include <nlohmann/json.hpp>\n\nusing json = nlohmann::json;\n\nstruct MemoryStruct {\n    char* memory;\n    size_t size;\n    MemoryStruct() : memory(nullptr), size(0) {}\n};\n\nclass CurlHttpClient {\npublic:\n    static size_t WriteMemoryCallback(void* contents, size_t size, size_t nmemb, void* userp) {\n        size_t realSize = size * nmemb;\n        MemoryStruct* mem = (MemoryStruct*)userp;\n        char* ptr = (char*)realloc(mem->memory, mem->size + realSize + 1);\n        if(ptr == nullptr) {\n            std::cerr << \"Not enough memory (realloc returned nullptr)\" << std::endl;\n            return 0;\n        }\n        mem->memory = ptr;\n        memcpy(&(mem->memory[mem->size]), contents, realSize);\n        mem->size += realSize;\n        mem->memory[mem->size] = 0;\n        return realSize;\n    }\n\n    long downloadPage(const std::string& url, std::string& res, const std::vector<std::string>& headers = {}, const std::string& body = \"\") {\n        CURL* curl;\n        CURLcode result;\n        long httpCode = 0;\n        MemoryStruct chunk;\n        chunk.memory = (char*)malloc(1);\n        chunk.size = 0;\n\n        curl_global_init(CURL_GLOBAL_DEFAULT);\n        curl = curl_easy_init();\n        if(curl) {\n            struct curl_slist* headerList = nullptr;\n            for(const auto& header : headers) {\n                headerList = curl_slist_append(headerList, header.c_str());\n            }\n            curl_easy_setopt(curl, CURLOPT_URL, url.c_str());\n            curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, WriteMemoryCallback);\n            curl_easy_setopt(curl, CURLOPT_WRITEDATA, (void*)&chunk);\n            if(!headers.empty()) {\n                curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headerList);\n            }\n            if(!body.empty()) {\n                curl_easy_setopt(curl, CURLOPT_POSTFIELDS, body.c_str());\n            }\n            result = curl_easy_perform(curl);\n            if(result != CURLE_OK) {\n                std::cerr << \"curl_easy_perform() failed: \" << curl_easy_strerror(result) << std::endl;\n            } else {\n                curl_easy_getinfo(curl, CURLINFO_RESPONSE_CODE, &httpCode);\n                res = std::string(chunk.memory, chunk.size);\n            }\n            curl_easy_cleanup(curl);\n            if(headerList) {\n                curl_slist_free_all(headerList);\n            }\n        }\n        curl_global_cleanup();\n        if(chunk.memory) {\n            free(chunk.memory);\n        }\n        return httpCode;\n    }\n\n    long getRequest(const std::string& url, json& res, const std::vector<std::string>& headers = {}, const std::string& body = \"\") {\n        std::string response;\n        long httpCode = downloadPage(url, response, headers, body);\n        if(httpCode == 200) {\n            res = json::parse(response);\n        }\n        return httpCode;\n    }\n};",
      "#include <iostream>\n#include <string>\n#include <vector>\n#include <curl/curl.h>\n#include <nlohmann/json.hpp>\n\nusing json = nlohmann::json;\n\nstruct MemoryStruct {\n    char* memory;\n    size_t size;\n\n    MemoryStruct() : memory(nullptr), size(0) {}\n    ~MemoryStruct() {\n        if (memory) {\n            free(memory);\n        }\n    }\n};\n\nclass CurlHttpClient {\npublic:\n    static size_t WriteMemoryCallback(void* contents, size_t size, size_t nmemb, void* userp) {\n        size_t realsize = size * nmemb;\n        MemoryStruct* mem = (MemoryStruct*)userp;\n\n        char* ptr = (char*)realloc(mem->memory, mem->size + realsize + 1);\n        if (ptr == nullptr) {\n            return 0;\n        }\n\n        mem->memory = ptr;\n        memcpy(&(mem->memory[mem->size]), contents, realsize);\n        mem->size += realsize;\n        mem->memory[mem->size] = 0;\n\n        return realsize;\n    }\n\n    long downloadPage(const std::string& url, std::string& res, const std::vector<std::string>& headers = {}, const std::string& body = \"\") {\n        CURL* curl;\n        CURLcode result;\n        long http_code = 0;\n\n        curl_global_init(CURL_GLOBAL_DEFAULT);\n        curl = curl_easy_init();\n\n        if (curl) {\n            struct curl_slist* chunk = nullptr;\n            for (const auto& header : headers) {\n                chunk = curl_slist_append(chunk, header.c_str());\n            }\n\n            MemoryStruct chunkMemory;\n\n            curl_easy_setopt(curl, CURLOPT_URL, url.c_str());\n            curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, WriteMemoryCallback);\n            curl_easy_setopt(curl, CURLOPT_WRITEDATA, (void*)&chunkMemory);\n            curl_easy_setopt(curl, CURLOPT_HTTPHEADER, chunk);\n            if (!body.empty()) {\n                curl_easy_setopt(curl, CURLOPT_POSTFIELDS, body.c_str());\n            }\n\n            result = curl_easy_perform(curl);\n            if (result == CURLE_OK) {\n                curl_easy_getinfo(curl, CURLINFO_RESPONSE_CODE, &http_code);\n                res = std::string(chunkMemory.memory, chunkMemory.size);\n            }\n\n            curl_slist_free_all(chunk);\n            curl_easy_cleanup(curl);\n        }\n\n        curl_global_cleanup();\n        return http_code;\n    }\n\n    long getRequest(const std::string& url, json& res, const std::vector<std::string>& headers = {}, const std::string& body = \"\") {\n        std::string response;\n        long http_code = downloadPage(url, response, headers, body);\n        if (http_code == 200) {\n            res = json::parse(response);\n        }\n        return http_code;\n    }\n};",
      "#include <iostream>\n#include <string>\n#include <vector>\n#include <curl/curl.h>\n#include <nlohmann/json.hpp>\n\nusing json = nlohmann::json;\n\nstruct MemoryStruct {\n    char* memory;\n    size_t size;\n    MemoryStruct() : memory(nullptr), size(0) {}\n    ~MemoryStruct() { if (memory) free(memory); }\n};\n\nclass CurlHttpClient {\npublic:\n    static size_t WriteMemoryCallback(void* contents, size_t size, size_t nmemb, void* userp) {\n        size_t realsize = size * nmemb;\n        MemoryStruct* mem = (MemoryStruct*)userp;\n        char* ptr = (char*)realloc(mem->memory, mem->size + realsize + 1);\n        if (ptr == nullptr) {\n            std::cerr << \"Not enough memory (realloc returned nullptr)\" << std::endl;\n            return 0;\n        }\n        mem->memory = ptr;\n        memcpy(&(mem->memory[mem->size]), contents, realsize);\n        mem->size += realsize;\n        mem->memory[mem->size] = 0;\n        return realsize;\n    }\n\n    long downloadPage(const std::string& url, std::string& res, const std::vector<std::string>& headers, const std::string& body) {\n        CURL* curl;\n        CURLcode result;\n        struct curl_slist* chunk = nullptr;\n        MemoryStruct chunkData;\n\n        curl_global_init(CURL_GLOBAL_DEFAULT);\n        curl = curl_easy_init();\n        if (curl) {\n            curl_easy_setopt(curl, CURLOPT_URL, url.c_str());\n            curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, WriteMemoryCallback);\n            curl_easy_setopt(curl, CURLOPT_WRITEDATA, (void*)&chunkData);\n\n            if (!headers.empty()) {\n                for (const auto& header : headers) {\n                    chunk = curl_slist_append(chunk, header.c_str());\n                }\n                curl_easy_setopt(curl, CURLOPT_HTTPHEADER, chunk);\n            }\n\n            if (!body.empty()) {\n                curl_easy_setopt(curl, CURLOPT_POSTFIELDS, body.c_str());\n            }\n\n            result = curl_easy_perform(curl);\n            if (result != CURLE_OK) {\n                std::cerr << \"curl_easy_perform() failed: \" << curl_easy_strerror(result) << std::endl;\n            } else {\n                res = std::string(chunkData.memory, chunkData.size);\n            }\n\n            long http_code = 0;\n            curl_easy_getinfo(curl, CURLINFO_RESPONSE_CODE, &http_code);\n\n            curl_easy_cleanup(curl);\n            if (chunk) {\n                curl_slist_free_all(chunk);\n            }\n            curl_global_cleanup();\n            return http_code;\n        }\n        return -1;\n    }\n\n    long getRequest(const std::string& url, json& res, const std::vector<std::string>& headers, const std::string& body) {\n        std::string response;\n        long http_code = downloadPage(url, response, headers, body);\n        if (http_code == 200) {\n            res = json::parse(response);\n        }\n        return http_code;\n    }\n};",
      "#include <iostream>\n#include <string>\n#include <vector>\n#include <curl/curl.h>\n#include <nlohmann/json.hpp>\n\nusing json = nlohmann::json;\n\nstruct MemoryStruct {\n    char* memory;\n    size_t size;\n    MemoryStruct() : memory(nullptr), size(0) {}\n    ~MemoryStruct() {\n        if (memory) {\n            free(memory);\n        }\n    }\n};\n\nclass CurlHttpClient {\npublic:\n    static size_t WriteMemoryCallback(void* contents, size_t size, size_t nmemb, void* userp) {\n        size_t realsize = size * nmemb;\n        MemoryStruct* mem = (MemoryStruct*)userp;\n        char* ptr = (char*)realloc(mem->memory, mem->size + realsize + 1);\n        if (ptr == nullptr) {\n            return 0;\n        }\n        mem->memory = ptr;\n        memcpy(&(mem->memory[mem->size]), contents, realsize);\n        mem->size += realsize;\n        mem->memory[mem->size] = 0;\n        return realsize;\n    }\n\n    long downloadPage(const std::string& url, std::string& res, const std::vector<std::string>& headers = {}, const std::string& body = \"\") {\n        CURL* curl;\n        CURLcode result;\n        long http_code = 0;\n        struct curl_slist* chunk = nullptr;\n\n        curl_global_init(CURL_GLOBAL_DEFAULT);\n        curl = curl_easy_init();\n        if (curl) {\n            MemoryStruct chunkMemory;\n            curl_easy_setopt(curl, CURLOPT_URL, url.c_str());\n            curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, WriteMemoryCallback);\n            curl_easy_setopt(curl, CURLOPT_WRITEDATA, (void*)&chunkMemory);\n            if (!headers.empty()) {\n                for (const auto& header : headers) {\n                    chunk = curl_slist_append(chunk, header.c_str());\n                }\n                curl_easy_setopt(curl, CURLOPT_HTTPHEADER, chunk);\n            }\n            if (!body.empty()) {\n                curl_easy_setopt(curl, CURLOPT_POSTFIELDS, body.c_str());\n            }\n            result = curl_easy_perform(curl);\n            if (result == CURLE_OK) {\n                curl_easy_getinfo(curl, CURLINFO_RESPONSE_CODE, &http_code);\n                res = std::string(chunkMemory.memory, chunkMemory.size);\n            }\n            curl_easy_cleanup(curl);\n            if (chunk) {\n                curl_slist_free_all(chunk);\n            }\n        }\n        curl_global_cleanup();\n        return http_code;\n    }\n\n    long getRequest(const std::string& url, json& res, const std::vector<std::string>& headers = {}, const std::string& body = \"\") {\n        std::string response;\n        long http_code = downloadPage(url, response, headers, body);\n        if (http_code == 200) {\n            res = json::parse(response);\n        }\n        return http_code;\n    }\n};",
      "#include <iostream>\n#include <string>\n#include <vector>\n#include <curl/curl.h>\n#include <nlohmann/json.hpp>\n\nusing json = nlohmann::json;\n\nstruct MemoryStruct {\n    char* memory;\n    size_t size;\n    MemoryStruct() : memory(nullptr), size(0) {}\n};\n\nclass CurlHttpClient {\npublic:\n    static size_t WriteMemoryCallback(void* contents, size_t size, size_t nmemb, void* userp) {\n        size_t realsize = size * nmemb;\n        MemoryStruct* mem = (MemoryStruct*)userp;\n\n        char* ptr = (char*)realloc(mem->memory, mem->size + realsize + 1);\n        if (ptr == nullptr) {\n            std::cerr << \"Not enough memory (realloc returned nullptr)\" << std::endl;\n            return 0;\n        }\n\n        mem->memory = ptr;\n        memcpy(&(mem->memory[mem->size]), contents, realsize);\n        mem->size += realsize;\n        mem->memory[mem->size] = 0;\n\n        return realsize;\n    }\n\n    long downloadPage(const std::string& url, std::string& res, const std::vector<std::string>& headers = {}, const std::string& body = \"\") {\n        CURL* curl;\n        CURLcode result;\n        long http_code = 0;\n\n        MemoryStruct chunk;\n        chunk.memory = (char*)malloc(1);\n        chunk.size = 0;\n\n        curl_global_init(CURL_GLOBAL_ALL);\n        curl = curl_easy_init();\n        if (curl) {\n            struct curl_slist* header_list = nullptr;\n            for (const auto& header : headers) {\n                header_list = curl_slist_append(header_list, header.c_str());\n            }\n\n            curl_easy_setopt(curl, CURLOPT_URL, url.c_str());\n            curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, WriteMemoryCallback);\n            curl_easy_setopt(curl, CURLOPT_WRITEDATA, (void*)&chunk);\n            curl_easy_setopt(curl, CURLOPT_USERAGENT, \"libcurl-agent/1.0\");\n\n            if (!headers.empty()) {\n                curl_easy_setopt(curl, CURLOPT_HTTPHEADER, header_list);\n            }\n\n            if (!body.empty()) {\n                curl_easy_setopt(curl, CURLOPT_POSTFIELDS, body.c_str());\n            }\n\n            result = curl_easy_perform(curl);\n            if (result != CURLE_OK) {\n                std::cerr << \"curl_easy_perform() failed: \" << curl_easy_strerror(result) << std::endl;\n            } else {\n                curl_easy_getinfo(curl, CURLINFO_RESPONSE_CODE, &http_code);\n                res = std::string(chunk.memory, chunk.size);\n            }\n\n            curl_easy_cleanup(curl);\n            if (header_list) {\n                curl_slist_free_all(header_list);\n            }\n        }\n\n        free(chunk.memory);\n        curl_global_cleanup();\n        return http_code;\n    }\n\n    long getRequest(const std::string& url, json& res, const std::vector<std::string>& headers = {}, const std::string& body = \"\") {\n        std::string response;\n        long http_code = downloadPage(url, response, headers, body);\n        if (http_code == 200) {\n            res = json::parse(response);\n        }\n        return http_code;\n    }\n};",
      "#include <iostream>\n#include <string>\n#include <vector>\n#include <curl/curl.h>\n#include <nlohmann/json.hpp>\n\nusing json = nlohmann::json;\n\nstruct MemoryStruct {\n    char* memory;\n    size_t size;\n    MemoryStruct() : memory(nullptr), size(0) {}\n    ~MemoryStruct() { if (memory) free(memory); }\n};\n\nclass CurlHttpClient {\npublic:\n    static size_t WriteMemoryCallback(void* contents, size_t size, size_t nmemb, void* userp) {\n        size_t realsize = size * nmemb;\n        struct MemoryStruct* mem = (struct MemoryStruct*)userp;\n        char* ptr = (char*)realloc(mem->memory, mem->size + realsize + 1);\n        if (ptr == nullptr) {\n            std::cerr << \"Not enough memory (realloc returned nullptr)\" << std::endl;\n            return 0;\n        }\n        mem->memory = ptr;\n        memcpy(&(mem->memory[mem->size]), contents, realsize);\n        mem->size += realsize;\n        mem->memory[mem->size] = 0;\n        return realsize;\n    }\n\n    long downloadPage(const std::string& url, std::string& res, const std::vector<std::string>& headers = {}, const std::string& body = \"\") {\n        CURL* curl;\n        CURLcode result;\n        struct curl_slist* chunk = nullptr;\n        MemoryStruct chunkMemory;\n\n        curl_global_init(CURL_GLOBAL_DEFAULT);\n        curl = curl_easy_init();\n        if (curl) {\n            curl_easy_setopt(curl, CURLOPT_URL, url.c_str());\n            curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, WriteMemoryCallback);\n            curl_easy_setopt(curl, CURLOPT_WRITEDATA, (void*)&chunkMemory);\n\n            if (!headers.empty()) {\n                for (const auto& header : headers) {\n                    chunk = curl_slist_append(chunk, header.c_str());\n                }\n                curl_easy_setopt(curl, CURLOPT_HTTPHEADER, chunk);\n            }\n\n            if (!body.empty()) {\n                curl_easy_setopt(curl, CURLOPT_POSTFIELDS, body.c_str());\n            }\n\n            result = curl_easy_perform(curl);\n            if (result != CURLE_OK) {\n                std::cerr << \"curl_easy_perform() failed: \" << curl_easy_strerror(result) << std::endl;\n            } else {\n                res = std::string(chunkMemory.memory, chunkMemory.size);\n            }\n\n            long response_code;\n            curl_easy_getinfo(curl, CURLINFO_RESPONSE_CODE, &response_code);\n\n            curl_easy_cleanup(curl);\n            if (chunk) {\n                curl_slist_free_all(chunk);\n            }\n            curl_global_cleanup();\n\n            return response_code;\n        }\n        return -1;\n    }\n\n    long getRequest(const std::string& url, json& res, const std::vector<std::string>& headers = {}, const std::string& body = \"\") {\n        std::string response;\n        long http_code = downloadPage(url, response, headers, body);\n        if (http_code == 200) {\n            res = json::parse(response);\n        }\n        return http_code;\n    }\n};"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 20,
    "Instruction": "Task Description: Implement a TCP client function that establishes a connection to a server, sends data, and reads the server's response in a continuous loop, handling connection errors and reconnection attempts.\n\nFunction Description: The function `readwrite_routine` implements a TCP client that continuously attempts to connect to a specified server endpoint. Once connected, it sends a fixed message and reads the server's response. If the connection fails or is lost, it automatically attempts to reconnect. The function handles connection states and errors appropriately, including non-blocking connection scenarios.\n\nInput: \n- `arg` (void pointer): A pointer to a `stEndPoint` structure containing:\n  - `ip` (char pointer): The IP address of the server to connect to (can be NULL or special values for default behavior)\n  - `port` (unsigned short int): The port number of the server to connect to\n\nOutput: \n- Returns NULL (void pointer) when the loop exits (though the provided implementation has an infinite loop)\n- No explicit return value, but performs I/O operations through the socket\n\nNote: The function runs in an infinite loop and should typically be executed in a separate thread. It manages its own socket lifecycle, creating and closing sockets as needed during connection attempts and communication.",
    "Canonical_solution": "#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n\nstruct stEndPoint\n{\n    char *ip;\n    unsigned short int port;\n};\n\nstatic void SetAddr(const char *pszIP, const unsigned short shPort, struct sockaddr_in &addr)\n{\n    bzero(&addr, sizeof(addr));\n    addr.sin_family = AF_INET;\n    addr.sin_port = htons(shPort);\n    int nIP = 0;\n    if(!pszIP || '\\0' == *pszIP   \n            || 0 == strcmp(pszIP,\"0\") || 0 == strcmp(pszIP,\"0.0.0.0\") \n            || 0 == strcmp(pszIP,\"*\") \n      )\n    {\n        nIP = htonl(INADDR_ANY);\n    }\n    else\n    {\n        nIP = inet_addr(pszIP);\n    }\n    addr.sin_addr.s_addr = nIP;\n}\n\nstatic void *readwrite_routine(void *arg)\n{\n    stEndPoint *endpoint = (stEndPoint *)arg;\n    char str[8] = \"sarlmol\";\n    char buf[1024 * 16];\n    int fd = -1;\n    int ret = 0;\n    \n    for(;;)\n    {\n        if(fd < 0)\n        {\n            fd = socket(PF_INET, SOCK_STREAM, 0);\n            struct sockaddr_in addr;\n            SetAddr(endpoint->ip, endpoint->port, addr);\n            ret = connect(fd, (struct sockaddr*)&addr, sizeof(addr));\n            \n            if(errno == EALREADY || errno == EINPROGRESS)\n            {       \n                struct pollfd pf = {0};\n                pf.fd = fd;\n                pf.events = (POLLOUT|POLLERR|POLLHUP);\n                co_poll(co_get_epoll_ct(), &pf, 1, 200);\n                \n                int error = 0;\n                uint32_t socklen = sizeof(error);\n                errno = 0;\n                ret = getsockopt(fd, SOL_SOCKET, SO_ERROR, (void *)&error, &socklen);\n                if(ret == -1)\n                {       \n                    close(fd);\n                    fd = -1;\n                    continue;\n                }       \n                if(error)\n                {       \n                    errno = error;\n                    close(fd);\n                    fd = -1;\n                    continue;\n                }       \n            }\n        }\n        \n        ret = write(fd, str, 8);\n        if(ret > 0)\n        {\n            ret = read(fd, buf, sizeof(buf));\n            if(ret <= 0)\n            {\n                close(fd);\n                fd = -1;\n            }\n        }\n        else\n        {\n            close(fd);\n            fd = -1;\n        }\n    }\n    return 0;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 149,
    "matched_results": [
      "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\n#include <arpa/inet.h>\n#include <errno.h>\n#include <fcntl.h>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n\ntypedef struct {\n    char *ip;\n    unsigned short port;\n} stEndPoint;\n\nvoid *readwrite_routine(void *arg) {\n    stEndPoint *endpoint = (stEndPoint *)arg;\n    int sockfd;\n    struct sockaddr_in server_addr;\n    char buffer[1024];\n    const char *message = \"Hello, Server!\";\n    int flags, n;\n\n    while (1) {\n        sockfd = socket(AF_INET, SOCK_STREAM, 0);\n        if (sockfd < 0) {\n            perror(\"Socket creation failed\");\n            sleep(1);\n            continue;\n        }\n\n        memset(&server_addr, 0, sizeof(server_addr));\n        server_addr.sin_family = AF_INET;\n        server_addr.sin_port = htons(endpoint->port);\n\n        if (endpoint->ip == NULL || strcmp(endpoint->ip, \"0.0.0.0\") == 0) {\n            server_addr.sin_addr.s_addr = htonl(INADDR_ANY);\n        } else {\n            if (inet_pton(AF_INET, endpoint->ip, &server_addr.sin_addr) <= 0) {\n                perror(\"Invalid address/ Address not supported\");\n                close(sockfd);\n                sleep(1);\n                continue;\n            }\n        }\n\n        flags = fcntl(sockfd, F_GETFL, 0);\n        fcntl(sockfd, F_SETFL, flags | O_NONBLOCK);\n\n        if (connect(sockfd, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {\n            if (errno != EINPROGRESS) {\n                perror(\"Connection failed\");\n                close(sockfd);\n                sleep(1);\n                continue;\n            }\n        }\n\n        fd_set writefds;\n        struct timeval tv;\n        FD_ZERO(&writefds);\n        FD_SET(sockfd, &writefds);\n        tv.tv_sec = 5;\n        tv.tv_usec = 0;\n\n        if (select(sockfd + 1, NULL, &writefds, NULL, &tv) > 0) {\n            int so_error;\n            socklen_t len = sizeof(so_error);\n            getsockopt(sockfd, SOL_SOCKET, SO_ERROR, &so_error, &len);\n            if (so_error != 0) {\n                perror(\"Connection error after select\");\n                close(sockfd);\n                sleep(1);\n                continue;\n            }\n        } else {\n            perror(\"Connection timeout or select error\");\n            close(sockfd);\n            sleep(1);\n            continue;\n        }\n\n        fcntl(sockfd, F_SETFL, flags);\n\n        while (1) {\n            n = send(sockfd, message, strlen(message), 0);\n            if (n < 0) {\n                perror(\"Send failed\");\n                break;\n            }\n\n            n = recv(sockfd, buffer, sizeof(buffer) - 1, 0);\n            if (n < 0) {\n                perror(\"Receive failed\");\n                break;\n            } else if (n == 0) {\n                printf(\"Server closed connection\\n\");\n                break;\n            }\n\n            buffer[n] = '\\0';\n            printf(\"Server: %s\\n\", buffer);\n        }\n\n        close(sockfd);\n        sleep(1);\n    }\n\n    return NULL;\n}",
      "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\n#include <arpa/inet.h>\n#include <sys/socket.h>\n#include <errno.h>\n#include <fcntl.h>\n\ntypedef struct {\n    char *ip;\n    unsigned short port;\n} stEndPoint;\n\nvoid *readwrite_routine(void *arg) {\n    stEndPoint *endpoint = (stEndPoint *)arg;\n    int sock;\n    struct sockaddr_in server_addr;\n    char message[] = \"Hello, Server!\";\n    char buffer[1024];\n    int bytes_read;\n\n    while (1) {\n        sock = socket(AF_INET, SOCK_STREAM, 0);\n        if (sock == -1) {\n            perror(\"Socket creation failed\");\n            sleep(1);\n            continue;\n        }\n\n        server_addr.sin_family = AF_INET;\n        server_addr.sin_port = htons(endpoint->port);\n        if (endpoint->ip == NULL || strcmp(endpoint->ip, \"\") == 0) {\n            server_addr.sin_addr.s_addr = htonl(INADDR_ANY);\n        } else {\n            if (inet_pton(AF_INET, endpoint->ip, &server_addr.sin_addr) <= 0) {\n                perror(\"Invalid address/ Address not supported\");\n                close(sock);\n                sleep(1);\n                continue;\n            }\n        }\n\n        fcntl(sock, F_SETFL, O_NONBLOCK);\n\n        while (connect(sock, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {\n            if (errno == EINPROGRESS || errno == EALREADY) {\n                usleep(100000); // 100ms\n                continue;\n            } else {\n                perror(\"Connection failed\");\n                close(sock);\n                sleep(1);\n                break;\n            }\n        }\n\n        if (errno == EISCONN) {\n            while (1) {\n                if (send(sock, message, strlen(message), 0) < 0) {\n                    perror(\"Send failed\");\n                    break;\n                }\n\n                bytes_read = recv(sock, buffer, sizeof(buffer) - 1, 0);\n                if (bytes_read < 0) {\n                    if (errno == EAGAIN || errno == EWOULDBLOCK) {\n                        usleep(100000); // 100ms\n                        continue;\n                    } else {\n                        perror(\"Receive failed\");\n                        break;\n                    }\n                } else if (bytes_read == 0) {\n                    printf(\"Server closed connection\\n\");\n                    break;\n                }\n\n                buffer[bytes_read] = '\\0';\n                printf(\"Received: %s\\n\", buffer);\n            }\n        }\n\n        close(sock);\n        sleep(1);\n    }\n\n    return NULL;\n}",
      "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\n#include <arpa/inet.h>\n#include <errno.h>\n#include <fcntl.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n\ntypedef struct {\n    char *ip;\n    unsigned short port;\n} stEndPoint;\n\nvoid *readwrite_routine(void *arg) {\n    stEndPoint *endpoint = (stEndPoint *)arg;\n    int sockfd;\n    struct sockaddr_in server_addr;\n    char buffer[1024];\n    const char *message = \"Hello, Server!\";\n    int flags, n;\n\n    while (1) {\n        sockfd = socket(AF_INET, SOCK_STREAM, 0);\n        if (sockfd < 0) {\n            perror(\"Socket creation failed\");\n            sleep(1);\n            continue;\n        }\n\n        memset(&server_addr, 0, sizeof(server_addr));\n        server_addr.sin_family = AF_INET;\n        server_addr.sin_port = htons(endpoint->port);\n\n        if (endpoint->ip == NULL || strcmp(endpoint->ip, \"0.0.0.0\") == 0) {\n            server_addr.sin_addr.s_addr = htonl(INADDR_ANY);\n        } else {\n            if (inet_pton(AF_INET, endpoint->ip, &server_addr.sin_addr) <= 0) {\n                perror(\"Invalid address/ Address not supported\");\n                close(sockfd);\n                sleep(1);\n                continue;\n            }\n        }\n\n        flags = fcntl(sockfd, F_GETFL, 0);\n        fcntl(sockfd, F_SETFL, flags | O_NONBLOCK);\n\n        if (connect(sockfd, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {\n            if (errno != EINPROGRESS) {\n                perror(\"Connection failed\");\n                close(sockfd);\n                sleep(1);\n                continue;\n            }\n        }\n\n        fd_set writefds;\n        struct timeval tv;\n        tv.tv_sec = 5;\n        tv.tv_usec = 0;\n\n        FD_ZERO(&writefds);\n        FD_SET(sockfd, &writefds);\n\n        if (select(sockfd + 1, NULL, &writefds, NULL, &tv) > 0) {\n            socklen_t len = sizeof(int);\n            int sock_err;\n            getsockopt(sockfd, SOL_SOCKET, SO_ERROR, &sock_err, &len);\n            if (sock_err != 0) {\n                errno = sock_err;\n                perror(\"Connection error\");\n                close(sockfd);\n                sleep(1);\n                continue;\n            }\n        } else {\n            perror(\"Connection timeout or select error\");\n            close(sockfd);\n            sleep(1);\n            continue;\n        }\n\n        fcntl(sockfd, F_SETFL, flags);\n\n        while (1) {\n            n = send(sockfd, message, strlen(message), 0);\n            if (n < 0) {\n                perror(\"Send failed\");\n                break;\n            }\n\n            n = recv(sockfd, buffer, sizeof(buffer) - 1, 0);\n            if (n < 0) {\n                perror(\"Receive failed\");\n                break;\n            } else if (n == 0) {\n                printf(\"Server closed connection\\n\");\n                break;\n            }\n\n            buffer[n] = '\\0';\n            printf(\"Server: %s\\n\", buffer);\n            sleep(1);\n        }\n\n        close(sockfd);\n        sleep(1);\n    }\n\n    return NULL;\n}",
      "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\n#include <arpa/inet.h>\n#include <errno.h>\n#include <fcntl.h>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n\ntypedef struct {\n    char *ip;\n    unsigned short port;\n} stEndPoint;\n\nvoid *readwrite_routine(void *arg) {\n    stEndPoint *endpoint = (stEndPoint *)arg;\n    int sockfd;\n    struct sockaddr_in server_addr;\n    char buffer[1024];\n    const char *message = \"Hello, Server!\";\n    int flags, n;\n\n    while (1) {\n        sockfd = socket(AF_INET, SOCK_STREAM, 0);\n        if (sockfd < 0) {\n            perror(\"socket\");\n            sleep(1);\n            continue;\n        }\n\n        memset(&server_addr, 0, sizeof(server_addr));\n        server_addr.sin_family = AF_INET;\n        server_addr.sin_port = htons(endpoint->port);\n        if (endpoint->ip == NULL || strcmp(endpoint->ip, \"0.0.0.0\") == 0) {\n            server_addr.sin_addr.s_addr = htonl(INADDR_ANY);\n        } else {\n            if (inet_pton(AF_INET, endpoint->ip, &server_addr.sin_addr) <= 0) {\n                perror(\"inet_pton\");\n                close(sockfd);\n                sleep(1);\n                continue;\n            }\n        }\n\n        flags = fcntl(sockfd, F_GETFL, 0);\n        fcntl(sockfd, F_SETFL, flags | O_NONBLOCK);\n\n        if (connect(sockfd, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {\n            if (errno != EINPROGRESS) {\n                perror(\"connect\");\n                close(sockfd);\n                sleep(1);\n                continue;\n            }\n        }\n\n        fd_set writefds;\n        struct timeval tv;\n        FD_ZERO(&writefds);\n        FD_SET(sockfd, &writefds);\n        tv.tv_sec = 5;\n        tv.tv_usec = 0;\n\n        if (select(sockfd + 1, NULL, &writefds, NULL, &tv) > 0) {\n            int so_error;\n            socklen_t len = sizeof(so_error);\n            getsockopt(sockfd, SOL_SOCKET, SO_ERROR, &so_error, &len);\n            if (so_error != 0) {\n                fprintf(stderr, \"connect error: %s\\n\", strerror(so_error));\n                close(sockfd);\n                sleep(1);\n                continue;\n            }\n        } else {\n            perror(\"select\");\n            close(sockfd);\n            sleep(1);\n            continue;\n        }\n\n        fcntl(sockfd, F_SETFL, flags);\n\n        while (1) {\n            n = send(sockfd, message, strlen(message), 0);\n            if (n < 0) {\n                perror(\"send\");\n                break;\n            }\n\n            n = recv(sockfd, buffer, sizeof(buffer) - 1, 0);\n            if (n < 0) {\n                perror(\"recv\");\n                break;\n            } else if (n == 0) {\n                printf(\"Server closed connection\\n\");\n                break;\n            }\n\n            buffer[n] = '\\0';\n            printf(\"Received: %s\\n\", buffer);\n        }\n\n        close(sockfd);\n        sleep(1);\n    }\n\n    return NULL;\n}",
      "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\n#include <arpa/inet.h>\n#include <errno.h>\n#include <fcntl.h>\n\ntypedef struct {\n    char *ip;\n    unsigned short port;\n} stEndPoint;\n\nvoid *readwrite_routine(void *arg) {\n    stEndPoint *endpoint = (stEndPoint *)arg;\n    int sockfd;\n    struct sockaddr_in server_addr;\n    char buffer[1024];\n    const char *message = \"Hello, Server!\";\n    int flags;\n\n    while (1) {\n        sockfd = socket(AF_INET, SOCK_STREAM, 0);\n        if (sockfd < 0) {\n            perror(\"Socket creation failed\");\n            sleep(1);\n            continue;\n        }\n\n        memset(&server_addr, 0, sizeof(server_addr));\n        server_addr.sin_family = AF_INET;\n        server_addr.sin_port = htons(endpoint->port);\n\n        if (endpoint->ip == NULL || strcmp(endpoint->ip, \"0.0.0.0\") == 0) {\n            server_addr.sin_addr.s_addr = inet_addr(\"127.0.0.1\");\n        } else {\n            server_addr.sin_addr.s_addr = inet_addr(endpoint->ip);\n        }\n\n        flags = fcntl(sockfd, F_GETFL, 0);\n        fcntl(sockfd, F_SETFL, flags | O_NONBLOCK);\n\n        if (connect(sockfd, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {\n            if (errno != EINPROGRESS) {\n                perror(\"Connection failed\");\n                close(sockfd);\n                sleep(1);\n                continue;\n            }\n        }\n\n        fd_set write_fds;\n        struct timeval tv;\n        int retval;\n\n        FD_ZERO(&write_fds);\n        FD_SET(sockfd, &write_fds);\n        tv.tv_sec = 5;\n        tv.tv_usec = 0;\n\n        retval = select(sockfd + 1, NULL, &write_fds, NULL, &tv);\n        if (retval == -1) {\n            perror(\"Select error\");\n            close(sockfd);\n            sleep(1);\n            continue;\n        } else if (retval == 0) {\n            fprintf(stderr, \"Connection timeout\\n\");\n            close(sockfd);\n            sleep(1);\n            continue;\n        }\n\n        fcntl(sockfd, F_SETFL, flags);\n\n        while (1) {\n            if (send(sockfd, message, strlen(message), 0) < 0) {\n                perror(\"Send failed\");\n                break;\n            }\n\n            int bytes_received = recv(sockfd, buffer, sizeof(buffer) - 1, 0);\n            if (bytes_received < 0) {\n                perror(\"Receive failed\");\n                break;\n            } else if (bytes_received == 0) {\n                fprintf(stderr, \"Server closed connection\\n\");\n                break;\n            }\n\n            buffer[bytes_received] = '\\0';\n            printf(\"Received: %s\\n\", buffer);\n        }\n\n        close(sockfd);\n        sleep(1);\n    }\n\n    return NULL;\n}",
      "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\n#include <arpa/inet.h>\n#include <errno.h>\n#include <fcntl.h>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n\ntypedef struct {\n    char *ip;\n    unsigned short port;\n} stEndPoint;\n\nvoid *readwrite_routine(void *arg) {\n    stEndPoint *endpoint = (stEndPoint *)arg;\n    int sockfd;\n    struct sockaddr_in server_addr;\n    char buffer[1024];\n    const char *message = \"Hello, Server!\";\n    int flags, n;\n\n    while (1) {\n        sockfd = socket(AF_INET, SOCK_STREAM, 0);\n        if (sockfd < 0) {\n            perror(\"socket\");\n            sleep(1);\n            continue;\n        }\n\n        memset(&server_addr, 0, sizeof(server_addr));\n        server_addr.sin_family = AF_INET;\n        server_addr.sin_port = htons(endpoint->port);\n        if (endpoint->ip == NULL || strcmp(endpoint->ip, \"0.0.0.0\") == 0) {\n            server_addr.sin_addr.s_addr = htonl(INADDR_ANY);\n        } else {\n            if (inet_pton(AF_INET, endpoint->ip, &server_addr.sin_addr) <= 0) {\n                perror(\"inet_pton\");\n                close(sockfd);\n                sleep(1);\n                continue;\n            }\n        }\n\n        flags = fcntl(sockfd, F_GETFL, 0);\n        fcntl(sockfd, F_SETFL, flags | O_NONBLOCK);\n\n        if (connect(sockfd, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {\n            if (errno != EINPROGRESS) {\n                perror(\"connect\");\n                close(sockfd);\n                sleep(1);\n                continue;\n            }\n        }\n\n        fd_set writefds;\n        struct timeval tv;\n        FD_ZERO(&writefds);\n        FD_SET(sockfd, &writefds);\n        tv.tv_sec = 5;\n        tv.tv_usec = 0;\n\n        if (select(sockfd + 1, NULL, &writefds, NULL, &tv) > 0) {\n            int so_error;\n            socklen_t len = sizeof(so_error);\n            getsockopt(sockfd, SOL_SOCKET, SO_ERROR, &so_error, &len);\n            if (so_error != 0) {\n                errno = so_error;\n                perror(\"connect\");\n                close(sockfd);\n                sleep(1);\n                continue;\n            }\n        } else {\n            perror(\"select\");\n            close(sockfd);\n            sleep(1);\n            continue;\n        }\n\n        fcntl(sockfd, F_SETFL, flags);\n\n        while (1) {\n            n = send(sockfd, message, strlen(message), 0);\n            if (n < 0) {\n                perror(\"send\");\n                break;\n            }\n\n            n = recv(sockfd, buffer, sizeof(buffer) - 1, 0);\n            if (n < 0) {\n                perror(\"recv\");\n                break;\n            } else if (n == 0) {\n                printf(\"Server closed connection\\n\");\n                break;\n            }\n\n            buffer[n] = '\\0';\n            printf(\"Received: %s\\n\", buffer);\n        }\n\n        close(sockfd);\n        sleep(1);\n    }\n\n    return NULL;\n}",
      "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\n#include <arpa/inet.h>\n#include <errno.h>\n#include <fcntl.h>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n\ntypedef struct {\n    char *ip;\n    unsigned short port;\n} stEndPoint;\n\nvoid *readwrite_routine(void *arg) {\n    stEndPoint *endpoint = (stEndPoint *)arg;\n    int sockfd;\n    struct sockaddr_in servaddr;\n    char sendline[] = \"Hello, Server!\";\n    char recvline[1024];\n    int n;\n\n    while (1) {\n        sockfd = socket(AF_INET, SOCK_STREAM, 0);\n        if (sockfd < 0) {\n            perror(\"Socket creation failed\");\n            sleep(1);\n            continue;\n        }\n\n        memset(&servaddr, 0, sizeof(servaddr));\n        servaddr.sin_family = AF_INET;\n        servaddr.sin_port = htons(endpoint->port);\n\n        if (endpoint->ip == NULL || strcmp(endpoint->ip, \"0.0.0.0\") == 0 || strcmp(endpoint->ip, \"localhost\") == 0) {\n            servaddr.sin_addr.s_addr = htonl(INADDR_LOOPBACK);\n        } else {\n            if (inet_pton(AF_INET, endpoint->ip, &servaddr.sin_addr) <= 0) {\n                perror(\"Invalid address/ Address not supported\");\n                close(sockfd);\n                sleep(1);\n                continue;\n            }\n        }\n\n        if (connect(sockfd, (struct sockaddr *)&servaddr, sizeof(servaddr)) < 0) {\n            perror(\"Connection failed\");\n            close(sockfd);\n            sleep(1);\n            continue;\n        }\n\n        while (1) {\n            if (write(sockfd, sendline, strlen(sendline)) < 0) {\n                perror(\"Write to server failed\");\n                break;\n            }\n\n            n = read(sockfd, recvline, sizeof(recvline) - 1);\n            if (n < 0) {\n                perror(\"Read from server failed\");\n                break;\n            } else if (n == 0) {\n                printf(\"Server closed connection\\n\");\n                break;\n            }\n\n            recvline[n] = '\\0';\n            printf(\"Server response: %s\\n\", recvline);\n        }\n\n        close(sockfd);\n        sleep(1);\n    }\n\n    return NULL;\n}",
      "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\n#include <arpa/inet.h>\n#include <errno.h>\n#include <fcntl.h>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n\ntypedef struct {\n    char *ip;\n    unsigned short port;\n} stEndPoint;\n\nvoid *readwrite_routine(void *arg) {\n    stEndPoint *endpoint = (stEndPoint *)arg;\n    int sockfd;\n    struct sockaddr_in serv_addr;\n    char buffer[1024];\n    const char *message = \"Hello, Server!\";\n    int flags, n;\n\n    while (1) {\n        sockfd = socket(AF_INET, SOCK_STREAM, 0);\n        if (sockfd < 0) {\n            perror(\"Socket creation failed\");\n            sleep(1);\n            continue;\n        }\n\n        memset(&serv_addr, 0, sizeof(serv_addr));\n        serv_addr.sin_family = AF_INET;\n        serv_addr.sin_port = htons(endpoint->port);\n\n        if (endpoint->ip == NULL || strcmp(endpoint->ip, \"0.0.0.0\") == 0 || strcmp(endpoint->ip, \"localhost\") == 0) {\n            serv_addr.sin_addr.s_addr = inet_addr(\"127.0.0.1\");\n        } else {\n            if (inet_pton(AF_INET, endpoint->ip, &serv_addr.sin_addr) <= 0) {\n                perror(\"Invalid address/ Address not supported\");\n                close(sockfd);\n                sleep(1);\n                continue;\n            }\n        }\n\n        flags = fcntl(sockfd, F_GETFL, 0);\n        fcntl(sockfd, F_SETFL, flags | O_NONBLOCK);\n\n        if (connect(sockfd, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n            if (errno != EINPROGRESS) {\n                perror(\"Connection failed\");\n                close(sockfd);\n                sleep(1);\n                continue;\n            }\n        }\n\n        fd_set writefds;\n        struct timeval tv;\n        FD_ZERO(&writefds);\n        FD_SET(sockfd, &writefds);\n        tv.tv_sec = 5;\n        tv.tv_usec = 0;\n\n        if (select(sockfd + 1, NULL, &writefds, NULL, &tv) > 0) {\n            int so_error;\n            socklen_t len = sizeof(so_error);\n            getsockopt(sockfd, SOL_SOCKET, SO_ERROR, &so_error, &len);\n            if (so_error != 0) {\n                perror(\"Connection error after select\");\n                close(sockfd);\n                sleep(1);\n                continue;\n            }\n        } else {\n            perror(\"Connection timeout or select error\");\n            close(sockfd);\n            sleep(1);\n            continue;\n        }\n\n        fcntl(sockfd, F_SETFL, flags);\n\n        while (1) {\n            n = send(sockfd, message, strlen(message), 0);\n            if (n < 0) {\n                perror(\"Send failed\");\n                break;\n            }\n\n            n = recv(sockfd, buffer, sizeof(buffer) - 1, 0);\n            if (n < 0) {\n                perror(\"Receive failed\");\n                break;\n            } else if (n == 0) {\n                printf(\"Server closed connection\\n\");\n                break;\n            }\n\n            buffer[n] = '\\0';\n            printf(\"Server: %s\\n\", buffer);\n        }\n\n        close(sockfd);\n        sleep(1);\n    }\n\n    return NULL;\n}",
      "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\n#include <arpa/inet.h>\n#include <errno.h>\n#include <fcntl.h>\n#include <sys/types.h>\n#include <sys/socket.h>\n\ntypedef struct {\n    char *ip;\n    unsigned short port;\n} stEndPoint;\n\nvoid *readwrite_routine(void *arg) {\n    stEndPoint *endpoint = (stEndPoint *)arg;\n    int sockfd;\n    struct sockaddr_in server_addr;\n    char buffer[1024];\n    const char *message = \"Hello, Server!\";\n    int flags, n;\n\n    while (1) {\n        sockfd = socket(AF_INET, SOCK_STREAM, 0);\n        if (sockfd < 0) {\n            perror(\"Socket creation failed\");\n            sleep(1);\n            continue;\n        }\n\n        memset(&server_addr, 0, sizeof(server_addr));\n        server_addr.sin_family = AF_INET;\n        server_addr.sin_port = htons(endpoint->port);\n        if (endpoint->ip == NULL) {\n            server_addr.sin_addr.s_addr = htonl(INADDR_ANY);\n        } else {\n            if (inet_pton(AF_INET, endpoint->ip, &server_addr.sin_addr) <= 0) {\n                perror(\"Invalid address/ Address not supported\");\n                close(sockfd);\n                sleep(1);\n                continue;\n            }\n        }\n\n        flags = fcntl(sockfd, F_GETFL, 0);\n        fcntl(sockfd, F_SETFL, flags | O_NONBLOCK);\n\n        if (connect(sockfd, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {\n            if (errno != EINPROGRESS) {\n                perror(\"Connection failed\");\n                close(sockfd);\n                sleep(1);\n                continue;\n            }\n        }\n\n        fd_set writefds;\n        struct timeval tv;\n        tv.tv_sec = 5;\n        tv.tv_usec = 0;\n        FD_ZERO(&writefds);\n        FD_SET(sockfd, &writefds);\n\n        if (select(sockfd + 1, NULL, &writefds, NULL, &tv) > 0) {\n            int so_error;\n            socklen_t len = sizeof(so_error);\n            getsockopt(sockfd, SOL_SOCKET, SO_ERROR, &so_error, &len);\n            if (so_error == 0) {\n                fcntl(sockfd, F_SETFL, flags);\n                while (1) {\n                    n = send(sockfd, message, strlen(message), 0);\n                    if (n < 0) {\n                        perror(\"Send failed\");\n                        break;\n                    }\n\n                    n = recv(sockfd, buffer, sizeof(buffer) - 1, 0);\n                    if (n < 0) {\n                        perror(\"Receive failed\");\n                        break;\n                    } else if (n == 0) {\n                        printf(\"Server closed connection\\n\");\n                        break;\n                    }\n\n                    buffer[n] = '\\0';\n                    printf(\"Server: %s\\n\", buffer);\n                }\n            } else {\n                fprintf(stderr, \"Connection error: %s\\n\", strerror(so_error));\n            }\n        } else {\n            perror(\"Connection timeout or select error\");\n        }\n\n        close(sockfd);\n        sleep(1);\n    }\n\n    return NULL;\n}",
      "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\n#include <arpa/inet.h>\n#include <errno.h>\n#include <fcntl.h>\n#include <netinet/in.h>\n#include <sys/socket.h>\n#include <sys/types.h>\n\ntypedef struct {\n    char *ip;\n    unsigned short port;\n} stEndPoint;\n\nvoid *readwrite_routine(void *arg) {\n    stEndPoint *endpoint = (stEndPoint *)arg;\n    int sockfd;\n    struct sockaddr_in serv_addr;\n    char buffer[1024];\n    const char *message = \"Hello, Server!\";\n    int ret;\n\n    while (1) {\n        sockfd = socket(AF_INET, SOCK_STREAM, 0);\n        if (sockfd < 0) {\n            perror(\"Socket creation failed\");\n            sleep(1);\n            continue;\n        }\n\n        memset(&serv_addr, 0, sizeof(serv_addr));\n        serv_addr.sin_family = AF_INET;\n        serv_addr.sin_port = htons(endpoint->port);\n\n        if (endpoint->ip == NULL || strcmp(endpoint->ip, \"0.0.0.0\") == 0 || strcmp(endpoint->ip, \"localhost\") == 0) {\n            serv_addr.sin_addr.s_addr = htonl(INADDR_LOOPBACK);\n        } else {\n            if (inet_pton(AF_INET, endpoint->ip, &serv_addr.sin_addr) <= 0) {\n                perror(\"Invalid address/ Address not supported\");\n                close(sockfd);\n                sleep(1);\n                continue;\n            }\n        }\n\n        fcntl(sockfd, F_SETFL, O_NONBLOCK);\n\n        ret = connect(sockfd, (struct sockaddr *)&serv_addr, sizeof(serv_addr));\n        if (ret < 0 && errno != EINPROGRESS) {\n            perror(\"Connection failed\");\n            close(sockfd);\n            sleep(1);\n            continue;\n        }\n\n        fd_set writefds;\n        struct timeval tv;\n        FD_ZERO(&writefds);\n        FD_SET(sockfd, &writefds);\n        tv.tv_sec = 5;\n        tv.tv_usec = 0;\n\n        ret = select(sockfd + 1, NULL, &writefds, NULL, &tv);\n        if (ret <= 0 || !FD_ISSET(sockfd, &writefds)) {\n            perror(\"Connection timeout or error\");\n            close(sockfd);\n            sleep(1);\n            continue;\n        }\n\n        fcntl(sockfd, F_SETFL, fcntl(sockfd, F_GETFL, 0) & ~O_NONBLOCK);\n\n        while (1) {\n            ret = send(sockfd, message, strlen(message), 0);\n            if (ret < 0) {\n                perror(\"Send failed\");\n                break;\n            }\n\n            ret = recv(sockfd, buffer, sizeof(buffer) - 1, 0);\n            if (ret < 0) {\n                perror(\"Receive failed\");\n                break;\n            } else if (ret == 0) {\n                printf(\"Server closed connection\\n\");\n                break;\n            }\n\n            buffer[ret] = '\\0';\n            printf(\"Server: %s\\n\", buffer);\n            sleep(1);\n        }\n\n        close(sockfd);\n        sleep(1);\n    }\n\n    return NULL;\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 21,
    "Instruction": "Task Description: Implement a TCP client function in C++ that establishes a connection to a server, sends user input messages, and receives responses from the server until the connection is terminated.\n\nFunction Description: The function `tcp_client_communication` creates a TCP socket, connects to a specified server (localhost on port 8888 in this case), and enters a loop where it reads user input from stdin, sends it to the server, and prints the server's response. The communication continues until an error occurs or the connection is closed by either side.\n\nInput: None (The server IP and port are hardcoded as 127.0.0.1 and 8888 respectively in the function. User input is collected interactively during execution.)\n\nOutput: None (The function prints server responses to stdout but doesn't return any value. All communication results are handled via side effects.)\n\nNote: The function handles its own socket cleanup by closing the connection before exiting.",
    "Canonical_solution": "#include <sys/socket.h>\n#include <arpa/inet.h>\n#include <string.h>\n#include <unistd.h>\n\n#define BUFFER_SIZE 1024\n\nvoid tcp_client_communication() {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    \n    struct sockaddr_in serv_addr;\n    bzero(&serv_addr, sizeof(serv_addr));\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_addr.s_addr = inet_addr(\"127.0.0.1\");\n    serv_addr.sin_port = htons(8888);\n\n    connect(sockfd, (sockaddr*)&serv_addr, sizeof(serv_addr));\n    \n    while(true){\n        char buf[BUFFER_SIZE];\n        bzero(&buf, sizeof(buf));\n        scanf(\"%s\", buf);\n        ssize_t write_bytes = write(sockfd, buf, sizeof(buf));\n        if(write_bytes == -1){\n            break;\n        }\n        bzero(&buf, sizeof(buf));\n        ssize_t read_bytes = read(sockfd, buf, sizeof(buf));\n        if(read_bytes > 0){\n            printf(\"message from server: %s\\n\", buf);\n        }else if(read_bytes == 0){\n            break;\n        }else if(read_bytes == -1){\n            close(sockfd);\n            break;\n        }\n    }\n    close(sockfd);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 149,
    "matched_results": [
      "#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nvoid tcp_client_communication() {\n    int sock = 0;\n    struct sockaddr_in serv_addr;\n    char buffer[1024] = {0};\n    \n    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation error\" << std::endl;\n        return;\n    }\n\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(8888);\n    \n    if (inet_pton(AF_INET, \"127.0.0.1\", &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        return;\n    }\n\n    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        return;\n    }\n\n    while (true) {\n        std::string user_input;\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, user_input);\n\n        if (user_input.empty()) {\n            std::cout << \"Empty message, closing connection.\" << std::endl;\n            break;\n        }\n\n        send(sock, user_input.c_str(), user_input.size(), 0);\n        std::cout << \"Message sent\" << std::endl;\n\n        int valread = read(sock, buffer, 1024);\n        if (valread <= 0) {\n            std::cerr << \"Server closed connection or read error\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Server: \" << std::string(buffer, valread) << std::endl;\n    }\n\n    close(sock);\n}",
      "#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nvoid tcp_client_communication() {\n    int sock = 0;\n    struct sockaddr_in serv_addr;\n    char buffer[1024] = {0};\n    std::string user_input;\n\n    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation error\" << std::endl;\n        return;\n    }\n\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(8888);\n\n    if (inet_pton(AF_INET, \"127.0.0.1\", &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        return;\n    }\n\n    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        return;\n    }\n\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, user_input);\n\n        if (send(sock, user_input.c_str(), user_input.length(), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        int valread = read(sock, buffer, 1024);\n        if (valread < 0) {\n            std::cerr << \"Read failed\" << std::endl;\n            break;\n        } else if (valread == 0) {\n            std::cout << \"Server closed the connection\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Server: \" << std::string(buffer, valread) << std::endl;\n    }\n\n    close(sock);\n}",
      "#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nvoid tcp_client_communication() {\n    int sock = 0;\n    struct sockaddr_in serv_addr;\n    char buffer[1024] = {0};\n\n    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation error\" << std::endl;\n        return;\n    }\n\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(8888);\n\n    if (inet_pton(AF_INET, \"127.0.0.1\", &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        return;\n    }\n\n    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        return;\n    }\n\n    while (true) {\n        std::string user_input;\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, user_input);\n\n        if (send(sock, user_input.c_str(), user_input.length(), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        int valread = read(sock, buffer, 1024);\n        if (valread < 0) {\n            std::cerr << \"Read failed\" << std::endl;\n            break;\n        } else if (valread == 0) {\n            std::cout << \"Server closed connection\" << std::endl;\n            break;\n        }\n\n        buffer[valread] = '\\0';\n        std::cout << \"Server: \" << buffer << std::endl;\n    }\n\n    close(sock);\n}",
      "#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nvoid tcp_client_communication() {\n    int sock = 0;\n    struct sockaddr_in serv_addr;\n    char buffer[1024] = {0};\n\n    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation error\" << std::endl;\n        return;\n    }\n\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(8888);\n\n    if (inet_pton(AF_INET, \"127.0.0.1\", &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        return;\n    }\n\n    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        return;\n    }\n\n    while (true) {\n        std::string user_input;\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, user_input);\n\n        if (send(sock, user_input.c_str(), user_input.length(), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        int valread = read(sock, buffer, 1024);\n        if (valread < 0) {\n            std::cerr << \"Read failed\" << std::endl;\n            break;\n        } else if (valread == 0) {\n            std::cout << \"Server closed the connection\" << std::endl;\n            break;\n        }\n\n        buffer[valread] = '\\0';\n        std::cout << \"Server: \" << buffer << std::endl;\n    }\n\n    close(sock);\n}",
      "#include <iostream>\n#include <cstring>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n\nvoid tcp_client_communication() {\n    int sock = 0;\n    struct sockaddr_in server_addr;\n    char buffer[1024] = {0};\n\n    // Create socket\n    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation error\" << std::endl;\n        return;\n    }\n\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(8888);\n\n    // Convert IPv4 and IPv6 addresses from text to binary form\n    if (inet_pton(AF_INET, \"127.0.0.1\", &server_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        return;\n    }\n\n    // Connect to server\n    if (connect(sock, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        return;\n    }\n\n    while (true) {\n        std::string user_input;\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, user_input);\n\n        // Send user input to server\n        send(sock, user_input.c_str(), user_input.length(), 0);\n\n        // Receive server response\n        int valread = read(sock, buffer, 1024);\n        if (valread <= 0) {\n            std::cerr << \"Connection closed or error occurred\" << std::endl;\n            break;\n        }\n\n        // Print server response\n        std::cout << \"Server: \" << std::string(buffer, valread) << std::endl;\n    }\n\n    // Close socket\n    close(sock);\n}",
      "#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nvoid tcp_client_communication() {\n    int sock = 0;\n    struct sockaddr_in serv_addr;\n    char buffer[1024] = {0};\n\n    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation error\" << std::endl;\n        return;\n    }\n\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(8888);\n\n    if (inet_pton(AF_INET, \"127.0.0.1\", &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        return;\n    }\n\n    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        return;\n    }\n\n    while (true) {\n        std::string user_input;\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, user_input);\n\n        if (user_input.empty()) {\n            break;\n        }\n\n        send(sock, user_input.c_str(), user_input.size(), 0);\n\n        int valread = read(sock, buffer, 1024);\n        if (valread <= 0) {\n            std::cerr << \"Server closed connection or read error\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Server: \" << std::string(buffer, valread) << std::endl;\n    }\n\n    close(sock);\n}",
      "#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nvoid tcp_client_communication() {\n    int sock = 0;\n    struct sockaddr_in serv_addr;\n    char buffer[1024] = {0};\n\n    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation error\" << std::endl;\n        return;\n    }\n\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(8888);\n\n    if (inet_pton(AF_INET, \"127.0.0.1\", &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        return;\n    }\n\n    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        return;\n    }\n\n    while (true) {\n        std::string user_input;\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, user_input);\n\n        if (send(sock, user_input.c_str(), user_input.length(), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        int valread = read(sock, buffer, 1024);\n        if (valread < 0) {\n            std::cerr << \"Read failed\" << std::endl;\n            break;\n        } else if (valread == 0) {\n            std::cout << \"Server closed the connection\" << std::endl;\n            break;\n        }\n\n        buffer[valread] = '\\0';\n        std::cout << \"Server: \" << buffer << std::endl;\n    }\n\n    close(sock);\n}",
      "#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nvoid tcp_client_communication() {\n    int sock = 0;\n    struct sockaddr_in serv_addr;\n    char buffer[1024] = {0};\n\n    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation error\" << std::endl;\n        return;\n    }\n\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(8888);\n\n    if (inet_pton(AF_INET, \"127.0.0.1\", &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        return;\n    }\n\n    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        return;\n    }\n\n    while (true) {\n        std::string user_input;\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, user_input);\n\n        if (send(sock, user_input.c_str(), user_input.length(), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        int valread = read(sock, buffer, 1024);\n        if (valread < 0) {\n            std::cerr << \"Read failed\" << std::endl;\n            break;\n        } else if (valread == 0) {\n            std::cout << \"Server closed connection\" << std::endl;\n            break;\n        }\n\n        buffer[valread] = '\\0';\n        std::cout << \"Server: \" << buffer << std::endl;\n    }\n\n    close(sock);\n}",
      "#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nvoid tcp_client_communication() {\n    int sock = 0;\n    struct sockaddr_in serv_addr;\n    char buffer[1024] = {0};\n\n    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation error\" << std::endl;\n        return;\n    }\n\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(8888);\n\n    if (inet_pton(AF_INET, \"127.0.0.1\", &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        return;\n    }\n\n    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        return;\n    }\n\n    while (true) {\n        std::string user_input;\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, user_input);\n\n        if (user_input.empty()) {\n            std::cout << \"Empty message, closing connection.\" << std::endl;\n            break;\n        }\n\n        send(sock, user_input.c_str(), user_input.length(), 0);\n\n        int valread = read(sock, buffer, 1024);\n        if (valread <= 0) {\n            std::cerr << \"Server closed connection or read error occurred\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Server: \" << std::string(buffer, valread) << std::endl;\n    }\n\n    close(sock);\n}",
      "#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nvoid tcp_client_communication() {\n    int sock = 0;\n    struct sockaddr_in serv_addr;\n    char buffer[1024] = {0};\n\n    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation error\" << std::endl;\n        return;\n    }\n\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(8888);\n\n    if (inet_pton(AF_INET, \"127.0.0.1\", &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        return;\n    }\n\n    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        return;\n    }\n\n    while (true) {\n        std::string user_input;\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, user_input);\n\n        if (send(sock, user_input.c_str(), user_input.size(), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        int valread = read(sock, buffer, 1024);\n        if (valread < 0) {\n            std::cerr << \"Read failed\" << std::endl;\n            break;\n        } else if (valread == 0) {\n            std::cout << \"Server closed connection\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Server: \" << std::string(buffer, valread) << std::endl;\n    }\n\n    close(sock);\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 22,
    "Instruction": "Task Description: Implement a TCP client function in C++ that establishes a connection to a server, sends user input to the server, and prints the server's response. The function should handle basic error cases and properly close the connection when done.\n\nFunction Description: The function `tcp_client_communication` creates a TCP socket, connects to a specified server, and enters a loop where it reads user input, sends it to the server, and displays the server's response. The loop continues until an error occurs or the connection is closed by the server. The function handles socket creation, connection, data transmission, and cleanup.\n\nInput: None (The server IP address and port are hardcoded as \"127.0.0.1\" and 1234 respectively in the function)\n\nOutput: None (The function prints server responses to stdout but doesn't return any value)",
    "Canonical_solution": "#include <sys/socket.h>\n#include <arpa/inet.h>\n#include <string.h>\n#include <unistd.h>\n\n#define BUFFER_SIZE 1024\n\nvoid tcp_client_communication() {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    \n    struct sockaddr_in serv_addr;\n    bzero(&serv_addr, sizeof(serv_addr));\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_addr.s_addr = inet_addr(\"127.0.0.1\");\n    serv_addr.sin_port = htons(1234);\n\n    connect(sockfd, (sockaddr*)&serv_addr, sizeof(serv_addr));\n    \n    while(true){\n        char buf[BUFFER_SIZE];\n        bzero(&buf, sizeof(buf));\n        scanf(\"%s\", buf);\n        ssize_t write_bytes = write(sockfd, buf, sizeof(buf));\n        if(write_bytes == -1){\n            break;\n        }\n        bzero(&buf, sizeof(buf));\n        ssize_t read_bytes = read(sockfd, buf, sizeof(buf));\n        if(read_bytes > 0){\n            printf(\"message from server: %s\\n\", buf);\n        }else if(read_bytes == 0){\n            break;\n        }else if(read_bytes == -1){\n            close(sockfd);\n            break;\n        }\n    }\n    close(sockfd);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 149,
    "matched_results": [
      "#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nvoid tcp_client_communication() {\n    int sock = 0;\n    struct sockaddr_in serv_addr;\n    char buffer[1024] = {0};\n    const char *server_ip = \"127.0.0.1\";\n    const int server_port = 1234;\n\n    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation error\" << std::endl;\n        return;\n    }\n\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(server_port);\n\n    if (inet_pton(AF_INET, server_ip, &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        close(sock);\n        return;\n    }\n\n    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection failed\" << std::endl;\n        close(sock);\n        return;\n    }\n\n    while (true) {\n        std::string user_input;\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, user_input);\n\n        if (send(sock, user_input.c_str(), user_input.length(), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        int valread = read(sock, buffer, 1024);\n        if (valread < 0) {\n            std::cerr << \"Read failed\" << std::endl;\n            break;\n        } else if (valread == 0) {\n            std::cout << \"Server closed the connection\" << std::endl;\n            break;\n        }\n\n        buffer[valread] = '\\0';\n        std::cout << \"Server: \" << buffer << std::endl;\n    }\n\n    close(sock);\n}",
      "#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nvoid tcp_client_communication() {\n    int sockfd;\n    struct sockaddr_in server_addr;\n    char buffer[1024];\n    const char* server_ip = \"127.0.0.1\";\n    int server_port = 1234;\n\n    // Create socket\n    if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation error\" << std::endl;\n        return;\n    }\n\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(server_port);\n\n    // Convert IPv4 and IPv6 addresses from text to binary form\n    if (inet_pton(AF_INET, server_ip, &server_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        close(sockfd);\n        return;\n    }\n\n    // Connect to the server\n    if (connect(sockfd, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {\n        std::cerr << \"Connection failed\" << std::endl;\n        close(sockfd);\n        return;\n    }\n\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::cin.getline(buffer, sizeof(buffer));\n\n        // Send message to the server\n        if (send(sockfd, buffer, strlen(buffer), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        // Receive response from the server\n        int valread = recv(sockfd, buffer, sizeof(buffer) - 1, 0);\n        if (valread < 0) {\n            std::cerr << \"Receive failed\" << std::endl;\n            break;\n        } else if (valread == 0) {\n            std::cout << \"Server closed the connection\" << std::endl;\n            break;\n        }\n\n        buffer[valread] = '\\0';\n        std::cout << \"Server: \" << buffer << std::endl;\n    }\n\n    close(sockfd);\n}",
      "#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nvoid tcp_client_communication() {\n    int sock = 0;\n    struct sockaddr_in serv_addr;\n    char buffer[1024] = {0};\n\n    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation error\" << std::endl;\n        return;\n    }\n\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(1234);\n\n    if (inet_pton(AF_INET, \"127.0.0.1\", &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        return;\n    }\n\n    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        return;\n    }\n\n    while (true) {\n        std::string user_input;\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, user_input);\n\n        if (send(sock, user_input.c_str(), user_input.length(), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        int valread = read(sock, buffer, 1024);\n        if (valread < 0) {\n            std::cerr << \"Read failed\" << std::endl;\n            break;\n        } else if (valread == 0) {\n            std::cout << \"Server closed connection\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Server: \" << std::string(buffer, valread) << std::endl;\n    }\n\n    close(sock);\n}",
      "#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nvoid tcp_client_communication() {\n    int sock = 0;\n    struct sockaddr_in serv_addr;\n    char buffer[1024] = {0};\n\n    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation error\" << std::endl;\n        return;\n    }\n\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(1234);\n\n    if (inet_pton(AF_INET, \"127.0.0.1\", &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        return;\n    }\n\n    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        return;\n    }\n\n    while (true) {\n        std::string user_input;\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, user_input);\n\n        if (send(sock, user_input.c_str(), user_input.length(), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        int valread = read(sock, buffer, 1024);\n        if (valread < 0) {\n            std::cerr << \"Read failed\" << std::endl;\n            break;\n        } else if (valread == 0) {\n            std::cout << \"Server closed the connection\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Server: \" << std::string(buffer, valread) << std::endl;\n    }\n\n    close(sock);\n}",
      "#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nvoid tcp_client_communication() {\n    int sock = 0;\n    struct sockaddr_in serv_addr;\n    char buffer[1024] = {0};\n\n    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation error\" << std::endl;\n        return;\n    }\n\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(1234);\n\n    if (inet_pton(AF_INET, \"127.0.0.1\", &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        close(sock);\n        return;\n    }\n\n    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        close(sock);\n        return;\n    }\n\n    while (true) {\n        std::string user_input;\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, user_input);\n\n        if (send(sock, user_input.c_str(), user_input.length(), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        int valread = read(sock, buffer, 1024);\n        if (valread < 0) {\n            std::cerr << \"Read failed\" << std::endl;\n            break;\n        } else if (valread == 0) {\n            std::cout << \"Server closed the connection\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Server: \" << std::string(buffer, valread) << std::endl;\n    }\n\n    close(sock);\n}",
      "#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nvoid tcp_client_communication() {\n    int sock = 0;\n    struct sockaddr_in serv_addr;\n    char buffer[1024] = {0};\n\n    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation error\" << std::endl;\n        return;\n    }\n\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(1234);\n\n    if (inet_pton(AF_INET, \"127.0.0.1\", &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        close(sock);\n        return;\n    }\n\n    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        close(sock);\n        return;\n    }\n\n    while (true) {\n        std::string user_input;\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, user_input);\n\n        if (send(sock, user_input.c_str(), user_input.size(), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        int valread = read(sock, buffer, 1024);\n        if (valread < 0) {\n            std::cerr << \"Read failed\" << std::endl;\n            break;\n        } else if (valread == 0) {\n            std::cout << \"Server closed connection\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Server: \" << std::string(buffer, valread) << std::endl;\n    }\n\n    close(sock);\n}",
      "#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nvoid tcp_client_communication() {\n    int sock = 0;\n    struct sockaddr_in serv_addr;\n    char buffer[1024] = {0};\n\n    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation error\" << std::endl;\n        return;\n    }\n\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(1234);\n\n    if (inet_pton(AF_INET, \"127.0.0.1\", &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        close(sock);\n        return;\n    }\n\n    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        close(sock);\n        return;\n    }\n\n    while (true) {\n        std::string user_input;\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, user_input);\n\n        if (send(sock, user_input.c_str(), user_input.length(), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        int valread = read(sock, buffer, 1024);\n        if (valread < 0) {\n            std::cerr << \"Read failed\" << std::endl;\n            break;\n        } else if (valread == 0) {\n            std::cout << \"Server closed the connection\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Server: \" << buffer << std::endl;\n        memset(buffer, 0, sizeof(buffer));\n    }\n\n    close(sock);\n}",
      "#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nvoid tcp_client_communication() {\n    int sock = 0;\n    struct sockaddr_in serv_addr;\n    char buffer[1024] = {0};\n    std::string user_input;\n\n    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation error\" << std::endl;\n        return;\n    }\n\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(1234);\n\n    if (inet_pton(AF_INET, \"127.0.0.1\", &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        return;\n    }\n\n    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        return;\n    }\n\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, user_input);\n\n        if (user_input.empty()) {\n            std::cerr << \"Empty input, closing connection.\" << std::endl;\n            break;\n        }\n\n        send(sock, user_input.c_str(), user_input.length(), 0);\n\n        int valread = read(sock, buffer, 1024);\n        if (valread <= 0) {\n            std::cerr << \"Server closed connection or read error\" << std::endl;\n            break;\n        }\n\n        buffer[valread] = '\\0';\n        std::cout << \"Server: \" << buffer << std::endl;\n    }\n\n    close(sock);\n}",
      "#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nvoid tcp_client_communication() {\n    int sock = 0;\n    struct sockaddr_in serv_addr;\n    char buffer[1024] = {0};\n    const char* server_ip = \"127.0.0.1\";\n    int server_port = 1234;\n\n    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation error\" << std::endl;\n        return;\n    }\n\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(server_port);\n\n    if (inet_pton(AF_INET, server_ip, &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        close(sock);\n        return;\n    }\n\n    if (connect(sock, (struct sockaddr*)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection failed\" << std::endl;\n        close(sock);\n        return;\n    }\n\n    while (true) {\n        std::string user_input;\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, user_input);\n\n        if (send(sock, user_input.c_str(), user_input.size(), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        int valread = read(sock, buffer, 1024);\n        if (valread < 0) {\n            std::cerr << \"Read failed\" << std::endl;\n            break;\n        } else if (valread == 0) {\n            std::cout << \"Server closed the connection\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Server: \" << std::string(buffer, valread) << std::endl;\n    }\n\n    close(sock);\n}",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nvoid tcp_client_communication() {\n    int sock = 0;\n    struct sockaddr_in serv_addr;\n    char buffer[1024] = {0};\n    const char* server_ip = \"127.0.0.1\";\n    int server_port = 1234;\n\n    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation error\" << std::endl;\n        return;\n    }\n\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(server_port);\n\n    if (inet_pton(AF_INET, server_ip, &serv_addr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        close(sock);\n        return;\n    }\n\n    if (connect(sock, (struct sockaddr*)&serv_addr, sizeof(serv_addr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        close(sock);\n        return;\n    }\n\n    while (true) {\n        std::string user_input;\n        std::cout << \"Enter message: \";\n        std::getline(std::cin, user_input);\n\n        if (send(sock, user_input.c_str(), user_input.length(), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        int valread = read(sock, buffer, 1024);\n        if (valread < 0) {\n            std::cerr << \"Read failed\" << std::endl;\n            break;\n        } else if (valread == 0) {\n            std::cout << \"Server closed the connection\" << std::endl;\n            break;\n        }\n\n        buffer[valread] = '\\0';\n        std::cout << \"Server: \" << buffer << std::endl;\n    }\n\n    close(sock);\n}\n```"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 23,
    "Instruction": "Task Description: Create a TCP server in C++ that listens for incoming connections, receives data from clients, and echoes the data back to the clients. The server should handle one client at a time and properly clean up resources when the connection is terminated.\n\nFunction Description: The function `create_tcp_server` establishes a TCP server that binds to a specified IP address and port, listens for incoming connections, and handles client communication. It reads data from the client and sends the same data back (echo). The server runs until the client disconnects or an error occurs.\n\nInput: \n- `ip`: [const char*] - The IP address the server should bind to (e.g., \"127.0.0.1\" for localhost).\n- `port`: [int] - The port number the server should listen on (e.g., 8080).\n\nOutput: \n- [int] - Returns 0 on successful execution and -1 if any step fails (socket creation, binding, listening, or accepting connections).",
    "Canonical_solution": "#include <stdio.h>\n#include <sys/socket.h>\n#include <arpa/inet.h>\n#include <string.h>\n#include <unistd.h>\n\nint create_tcp_server(const char* ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if(sockfd == -1) return -1;\n\n    struct sockaddr_in serv_addr;\n    bzero(&serv_addr, sizeof(serv_addr));\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_addr.s_addr = inet_addr(ip);\n    serv_addr.sin_port = htons(port);\n\n    if(bind(sockfd, (sockaddr*)&serv_addr, sizeof(serv_addr)) == -1) {\n        close(sockfd);\n        return -1;\n    }\n\n    if(listen(sockfd, SOMAXCONN) == -1) {\n        close(sockfd);\n        return -1;\n    }\n\n    struct sockaddr_in clnt_addr;\n    socklen_t clnt_addr_len = sizeof(clnt_addr);\n    bzero(&clnt_addr, sizeof(clnt_addr));\n\n    int clnt_sockfd = accept(sockfd, (sockaddr*)&clnt_addr, &clnt_addr_len);\n    if(clnt_sockfd == -1) {\n        close(sockfd);\n        return -1;\n    }\n\n    printf(\"new client fd %d! IP: %s Port: %d\\n\", clnt_sockfd, inet_ntoa(clnt_addr.sin_addr), ntohs(clnt_addr.sin_port));\n    \n    char buf[1024];\n    while (true) {\n        bzero(&buf, sizeof(buf));\n        ssize_t read_bytes = read(clnt_sockfd, buf, sizeof(buf));\n        if(read_bytes > 0){\n            printf(\"message from client fd %d: %s\\n\", clnt_sockfd, buf);\n            write(clnt_sockfd, buf, sizeof(buf));\n        } else if(read_bytes == 0){\n            printf(\"client fd %d disconnected\\n\", clnt_sockfd);\n            close(clnt_sockfd);\n            break;\n        } else if(read_bytes == -1){\n            close(clnt_sockfd);\n            break;\n        }\n    }\n    close(sockfd);\n    return 0;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 148,
    "matched_results": [
      "#include <iostream>\n#include <cstring>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nint create_tcp_server(const char* ip, int port) {\n    int server_fd, client_fd;\n    struct sockaddr_in address;\n    int addrlen = sizeof(address);\n    char buffer[1024] = {0};\n    int opt = 1;\n\n    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {\n        return -1;\n    }\n\n    if (setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT, &opt, sizeof(opt))) {\n        close(server_fd);\n        return -1;\n    }\n\n    address.sin_family = AF_INET;\n    address.sin_addr.s_addr = inet_addr(ip);\n    address.sin_port = htons(port);\n\n    if (bind(server_fd, (struct sockaddr *)&address, sizeof(address)) < 0) {\n        close(server_fd);\n        return -1;\n    }\n\n    if (listen(server_fd, 3) < 0) {\n        close(server_fd);\n        return -1;\n    }\n\n    if ((client_fd = accept(server_fd, (struct sockaddr *)&address, (socklen_t*)&addrlen)) < 0) {\n        close(server_fd);\n        return -1;\n    }\n\n    int valread;\n    while ((valread = read(client_fd, buffer, 1024)) > 0) {\n        send(client_fd, buffer, valread, 0);\n    }\n\n    close(client_fd);\n    close(server_fd);\n    return 0;\n}",
      "#include <iostream>\n#include <cstring>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nint create_tcp_server(const char* ip, int port) {\n    int server_fd, client_fd;\n    struct sockaddr_in address;\n    int opt = 1;\n    int addrlen = sizeof(address);\n    char buffer[1024] = {0};\n\n    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {\n        perror(\"socket failed\");\n        return -1;\n    }\n\n    if (setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT, &opt, sizeof(opt))) {\n        perror(\"setsockopt\");\n        close(server_fd);\n        return -1;\n    }\n\n    address.sin_family = AF_INET;\n    address.sin_addr.s_addr = inet_addr(ip);\n    address.sin_port = htons(port);\n\n    if (bind(server_fd, (struct sockaddr *)&address, sizeof(address)) < 0) {\n        perror(\"bind failed\");\n        close(server_fd);\n        return -1;\n    }\n\n    if (listen(server_fd, 3) < 0) {\n        perror(\"listen\");\n        close(server_fd);\n        return -1;\n    }\n\n    if ((client_fd = accept(server_fd, (struct sockaddr *)&address, (socklen_t*)&addrlen)) < 0) {\n        perror(\"accept\");\n        close(server_fd);\n        return -1;\n    }\n\n    int valread;\n    while ((valread = read(client_fd, buffer, 1024)) > 0) {\n        send(client_fd, buffer, valread, 0);\n    }\n\n    close(client_fd);\n    close(server_fd);\n    return 0;\n}",
      "#include <iostream>\n#include <cstring>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nint create_tcp_server(const char* ip, int port) {\n    int server_fd, client_fd;\n    struct sockaddr_in address;\n    int addrlen = sizeof(address);\n    char buffer[1024] = {0};\n    int opt = 1;\n\n    // Creating socket file descriptor\n    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {\n        std::cerr << \"Socket creation failed\" << std::endl;\n        return -1;\n    }\n\n    // Forcefully attaching socket to the port\n    if (setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT, &opt, sizeof(opt))) {\n        std::cerr << \"setsockopt failed\" << std::endl;\n        close(server_fd);\n        return -1;\n    }\n\n    address.sin_family = AF_INET;\n    address.sin_addr.s_addr = inet_addr(ip);\n    address.sin_port = htons(port);\n\n    // Binding the socket to the specified IP and port\n    if (bind(server_fd, (struct sockaddr*)&address, sizeof(address)) < 0) {\n        std::cerr << \"Bind failed\" << std::endl;\n        close(server_fd);\n        return -1;\n    }\n\n    // Listening for incoming connections\n    if (listen(server_fd, 3) < 0) {\n        std::cerr << \"Listen failed\" << std::endl;\n        close(server_fd);\n        return -1;\n    }\n\n    // Accepting a single client connection\n    if ((client_fd = accept(server_fd, (struct sockaddr*)&address, (socklen_t*)&addrlen)) < 0) {\n        std::cerr << \"Accept failed\" << std::endl;\n        close(server_fd);\n        return -1;\n    }\n\n    // Communicating with the client\n    int valread;\n    while ((valread = read(client_fd, buffer, 1024)) > 0) {\n        send(client_fd, buffer, valread, 0);\n        memset(buffer, 0, sizeof(buffer));\n    }\n\n    // Cleaning up resources\n    close(client_fd);\n    close(server_fd);\n\n    return 0;\n}",
      "#include <iostream>\n#include <cstring>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nint create_tcp_server(const char* ip, int port) {\n    int server_fd, client_fd;\n    struct sockaddr_in address;\n    int addrlen = sizeof(address);\n    char buffer[1024] = {0};\n\n    // Creating socket file descriptor\n    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {\n        std::cerr << \"Socket creation failed\" << std::endl;\n        return -1;\n    }\n\n    // Binding socket to the specified IP and port\n    address.sin_family = AF_INET;\n    address.sin_addr.s_addr = inet_addr(ip);\n    address.sin_port = htons(port);\n\n    if (bind(server_fd, (struct sockaddr*)&address, sizeof(address)) < 0) {\n        std::cerr << \"Bind failed\" << std::endl;\n        close(server_fd);\n        return -1;\n    }\n\n    // Listening for incoming connections\n    if (listen(server_fd, 3) < 0) {\n        std::cerr << \"Listen failed\" << std::endl;\n        close(server_fd);\n        return -1;\n    }\n\n    // Accepting a single client connection\n    if ((client_fd = accept(server_fd, (struct sockaddr*)&address, (socklen_t*)&addrlen)) < 0) {\n        std::cerr << \"Accept failed\" << std::endl;\n        close(server_fd);\n        return -1;\n    }\n\n    // Communicating with the client\n    int valread;\n    while ((valread = read(client_fd, buffer, 1024)) > 0) {\n        send(client_fd, buffer, valread, 0);\n        memset(buffer, 0, sizeof(buffer));\n    }\n\n    // Cleaning up resources\n    close(client_fd);\n    close(server_fd);\n\n    return 0;\n}",
      "#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint create_tcp_server(const char* ip, int port) {\n    int server_fd, client_fd;\n    struct sockaddr_in address;\n    int opt = 1;\n    int addrlen = sizeof(address);\n    char buffer[1024] = {0};\n\n    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {\n        perror(\"socket failed\");\n        return -1;\n    }\n\n    if (setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT, &opt, sizeof(opt))) {\n        perror(\"setsockopt failed\");\n        close(server_fd);\n        return -1;\n    }\n\n    address.sin_family = AF_INET;\n    address.sin_addr.s_addr = inet_addr(ip);\n    address.sin_port = htons(port);\n\n    if (bind(server_fd, (struct sockaddr *)&address, sizeof(address)) < 0) {\n        perror(\"bind failed\");\n        close(server_fd);\n        return -1;\n    }\n\n    if (listen(server_fd, 3) < 0) {\n        perror(\"listen failed\");\n        close(server_fd);\n        return -1;\n    }\n\n    if ((client_fd = accept(server_fd, (struct sockaddr *)&address, (socklen_t*)&addrlen)) < 0) {\n        perror(\"accept failed\");\n        close(server_fd);\n        return -1;\n    }\n\n    int valread;\n    while ((valread = read(client_fd, buffer, 1024)) > 0) {\n        send(client_fd, buffer, valread, 0);\n    }\n\n    close(client_fd);\n    close(server_fd);\n    return 0;\n}",
      "#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint create_tcp_server(const char* ip, int port) {\n    int server_fd, client_fd;\n    struct sockaddr_in address;\n    int opt = 1;\n    int addrlen = sizeof(address);\n    char buffer[1024] = {0};\n\n    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {\n        perror(\"socket failed\");\n        return -1;\n    }\n\n    if (setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT, &opt, sizeof(opt))) {\n        perror(\"setsockopt\");\n        close(server_fd);\n        return -1;\n    }\n\n    address.sin_family = AF_INET;\n    address.sin_addr.s_addr = inet_addr(ip);\n    address.sin_port = htons(port);\n\n    if (bind(server_fd, (struct sockaddr *)&address, sizeof(address)) < 0) {\n        perror(\"bind failed\");\n        close(server_fd);\n        return -1;\n    }\n\n    if (listen(server_fd, 3) < 0) {\n        perror(\"listen\");\n        close(server_fd);\n        return -1;\n    }\n\n    if ((client_fd = accept(server_fd, (struct sockaddr *)&address, (socklen_t*)&addrlen)) < 0) {\n        perror(\"accept\");\n        close(server_fd);\n        return -1;\n    }\n\n    int valread;\n    while ((valread = read(client_fd, buffer, 1024)) > 0) {\n        send(client_fd, buffer, valread, 0);\n    }\n\n    close(client_fd);\n    close(server_fd);\n    return 0;\n}",
      "#include <iostream>\n#include <cstring>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nint create_tcp_server(const char* ip, int port) {\n    int server_fd, client_fd;\n    struct sockaddr_in address;\n    int opt = 1;\n    int addrlen = sizeof(address);\n    char buffer[1024] = {0};\n    int valread;\n\n    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {\n        perror(\"socket failed\");\n        return -1;\n    }\n\n    if (setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT, &opt, sizeof(opt))) {\n        perror(\"setsockopt failed\");\n        close(server_fd);\n        return -1;\n    }\n\n    address.sin_family = AF_INET;\n    address.sin_addr.s_addr = inet_addr(ip);\n    address.sin_port = htons(port);\n\n    if (bind(server_fd, (struct sockaddr *)&address, sizeof(address)) < 0) {\n        perror(\"bind failed\");\n        close(server_fd);\n        return -1;\n    }\n\n    if (listen(server_fd, 3) < 0) {\n        perror(\"listen failed\");\n        close(server_fd);\n        return -1;\n    }\n\n    if ((client_fd = accept(server_fd, (struct sockaddr *)&address, (socklen_t*)&addrlen)) < 0) {\n        perror(\"accept failed\");\n        close(server_fd);\n        return -1;\n    }\n\n    while ((valread = read(client_fd, buffer, 1024)) > 0) {\n        send(client_fd, buffer, valread, 0);\n    }\n\n    close(client_fd);\n    close(server_fd);\n    return 0;\n}",
      "#include <iostream>\n#include <cstring>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nint create_tcp_server(const char* ip, int port) {\n    int server_fd, client_fd;\n    struct sockaddr_in address;\n    int opt = 1;\n    int addrlen = sizeof(address);\n    char buffer[1024] = {0};\n\n    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {\n        perror(\"socket failed\");\n        return -1;\n    }\n\n    if (setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT, &opt, sizeof(opt))) {\n        perror(\"setsockopt\");\n        close(server_fd);\n        return -1;\n    }\n\n    address.sin_family = AF_INET;\n    address.sin_addr.s_addr = inet_addr(ip);\n    address.sin_port = htons(port);\n\n    if (bind(server_fd, (struct sockaddr *)&address, sizeof(address)) < 0) {\n        perror(\"bind failed\");\n        close(server_fd);\n        return -1;\n    }\n\n    if (listen(server_fd, 3) < 0) {\n        perror(\"listen\");\n        close(server_fd);\n        return -1;\n    }\n\n    if ((client_fd = accept(server_fd, (struct sockaddr *)&address, (socklen_t*)&addrlen)) < 0) {\n        perror(\"accept\");\n        close(server_fd);\n        return -1;\n    }\n\n    int valread;\n    while ((valread = read(client_fd, buffer, 1024)) > 0) {\n        send(client_fd, buffer, valread, 0);\n    }\n\n    close(client_fd);\n    close(server_fd);\n    return 0;\n}",
      "#include <iostream>\n#include <cstring>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nint create_tcp_server(const char* ip, int port) {\n    int server_fd, client_fd;\n    struct sockaddr_in address;\n    int addrlen = sizeof(address);\n    char buffer[1024] = {0};\n\n    // Creating socket file descriptor\n    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {\n        std::cerr << \"Socket creation failed\" << std::endl;\n        return -1;\n    }\n\n    address.sin_family = AF_INET;\n    address.sin_addr.s_addr = inet_addr(ip);\n    address.sin_port = htons(port);\n\n    // Binding socket to the IP address and port\n    if (bind(server_fd, (struct sockaddr*)&address, sizeof(address)) < 0) {\n        std::cerr << \"Bind failed\" << std::endl;\n        close(server_fd);\n        return -1;\n    }\n\n    // Listening for incoming connections\n    if (listen(server_fd, 3) < 0) {\n        std::cerr << \"Listen failed\" << std::endl;\n        close(server_fd);\n        return -1;\n    }\n\n    // Accepting a single client connection\n    if ((client_fd = accept(server_fd, (struct sockaddr*)&address, (socklen_t*)&addrlen)) < 0) {\n        std::cerr << \"Accept failed\" << std::endl;\n        close(server_fd);\n        return -1;\n    }\n\n    // Communicating with the client\n    while (true) {\n        int valread = read(client_fd, buffer, 1024);\n        if (valread <= 0) {\n            break;\n        }\n        send(client_fd, buffer, valread, 0);\n    }\n\n    // Cleaning up resources\n    close(client_fd);\n    close(server_fd);\n    return 0;\n}",
      "#include <iostream>\n#include <cstring>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nint create_tcp_server(const char* ip, int port) {\n    int server_fd, client_fd;\n    struct sockaddr_in address;\n    int opt = 1;\n    int addrlen = sizeof(address);\n    char buffer[1024] = {0};\n\n    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {\n        perror(\"socket failed\");\n        return -1;\n    }\n\n    if (setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT, &opt, sizeof(opt))) {\n        perror(\"setsockopt\");\n        close(server_fd);\n        return -1;\n    }\n\n    address.sin_family = AF_INET;\n    address.sin_addr.s_addr = inet_addr(ip);\n    address.sin_port = htons(port);\n\n    if (bind(server_fd, (struct sockaddr *)&address, sizeof(address)) < 0) {\n        perror(\"bind failed\");\n        close(server_fd);\n        return -1;\n    }\n\n    if (listen(server_fd, 3) < 0) {\n        perror(\"listen\");\n        close(server_fd);\n        return -1;\n    }\n\n    if ((client_fd = accept(server_fd, (struct sockaddr *)&address, (socklen_t*)&addrlen)) < 0) {\n        perror(\"accept\");\n        close(server_fd);\n        return -1;\n    }\n\n    while (true) {\n        int valread = read(client_fd, buffer, 1024);\n        if (valread <= 0) {\n            break;\n        }\n        send(client_fd, buffer, valread, 0);\n    }\n\n    close(client_fd);\n    close(server_fd);\n    return 0;\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 24,
    "Instruction": "Task Description: Create a TCP server class that handles multiple client connections, manages network communication, and provides thread-safe operations for client management.\n\nClass Description: The NetworkServer class implements a TCP server that listens for incoming connections, manages connected clients, and handles network communication through separate threads. It supports both IPv4 and IPv6 addresses and includes error handling for socket operations.\n\nAttributes:\n- host: std::string - The host address to bind the server to\n- port_num: unsigned short - The port number to listen on\n- server_online: bool - Flag indicating if the server is running\n- server_listening: bool - Flag indicating if the server is actively listening for connections\n- ServerClients: std::vector<NetworkClientInfo *> - List of connected client information\n- ServerClientsMutex: std::mutex - Mutex for thread-safe access to client list\n- server_sock: SOCKET[MAXSOCK] - Array of server socket descriptors\n- socket_count: int - Number of active server sockets\n- ConnectionThread: std::thread *[MAXSOCK] - Array of connection handler threads\n\nMethods:\n- NetworkServer(std::vector<RGBController *>& control) -> None - Constructor that initializes the server with controller references\n- ~NetworkServer() -> None - Destructor that stops the server and cleans up resources\n- StartServer() -> None - Starts the server, creates sockets, binds to address, and begins listening for connections\n- StopServer() -> None - Stops the server, closes all connections, and cleans up threads\n- ConnectionThreadFunction(int socket_idx) -> None - Thread function that handles incoming connections for a specific socket\n- accept_select(int sockfd) -> int - Helper function that implements timeout-based socket acceptance\n- GetPort() -> unsigned short - Returns the current port number (implied but not shown in code)\n- ClientInfoChanged() -> None - Callback for client list changes (implied but not shown in code)\n- ServerListeningChanged() -> None - Callback for server listening state changes (implied but not shown in code)\n- ListenThreadFunction(NetworkClientInfo * client_info) -> None - Thread function that handles communication with a specific client (implied but not shown in code)",
    "Canonical_solution": "#include <cstring>\n#include <memory.h>\n#include <errno.h>\n#include <stdlib.h>\n#include <iostream>\n#include <vector>\n#include <thread>\n#include <mutex>\n#ifndef WIN32\n#include <sys/ioctl.h>\n#include <netinet/tcp.h>\n#include <sys/types.h>\n#include <arpa/inet.h>\n#else\n#include <ws2tcpip.h>\n#endif\n\nconst char yes = 1;\n\nclass NetworkServer\n{\npublic:\n    NetworkServer(std::vector<RGBController *>& control) : controllers(control)\n    {\n        host             = OPENRGB_SDK_HOST;\n        port_num         = OPENRGB_SDK_PORT;\n        server_online    = false;\n        server_listening = false;\n        for(int i = 0; i < MAXSOCK; i++)\n        {\n            ConnectionThread[i] = nullptr;\n        }\n        profile_manager  = nullptr;\n    }\n\n    ~NetworkServer()\n    {\n        StopServer();\n    }\n\n    void StartServer()\n    {\n        int err;\n        struct addrinfo hints, *res, *result;\n\n        char port_str[6];\n        snprintf(port_str, 6, \"%d\", port_num);\n\n        socket_count = 0;\n\n#ifdef WIN32\n        if(WSAStartup(MAKEWORD(2, 2), &wsa) != NO_ERROR)\n        {\n            WSACleanup();\n            return;\n        }\n#endif\n\n        memset(&hints, 0, sizeof(hints));\n        hints.ai_family = AF_UNSPEC;\n        hints.ai_socktype = SOCK_STREAM;\n        hints.ai_flags = AI_PASSIVE;\n        err = getaddrinfo(host.c_str(), port_str, &hints, &result);\n\n        if(err)\n        {\n            LOG_ERROR(\"NetworkServer: Unable to get address.\");\n            WSACleanup();\n            return;\n        }\n\n        for(res = result; res && socket_count < MAXSOCK; res = res->ai_next)\n        {\n            server_sock[socket_count] = socket(res->ai_family, res->ai_socktype, res->ai_protocol);\n\n            if(server_sock[socket_count] == INVALID_SOCKET)\n            {\n                LOG_ERROR(\"NetworkServer: Network socket could not be created.\");\n                WSACleanup();\n                return;\n            }\n\n            if(bind(server_sock[socket_count], res->ai_addr, res->ai_addrlen) == SOCKET_ERROR)\n            {\n                if(errno == EADDRINUSE)\n                {\n                    LOG_ERROR(\"NetworkServer: Could not bind network socket. Is port %hu already being used?\", GetPort());\n                }\n                else if(errno == EACCES)\n                {\n                    LOG_ERROR(\"NetworkServer: Could not bind network socket. Access to socket was denied.\");\n                }\n                else if(errno == EBADF)\n                {\n                    LOG_ERROR(\"NetworkServer: Could not bind network socket. sockfd is not a valid file descriptor.\");\n                }\n                else if(errno == EINVAL)\n                {\n                    LOG_ERROR(\"NetworkServer: Could not bind network socket. The socket is already bound to an address, or addrlen is wrong, or addr is not a valid address for this socket's domain.\");\n                }\n                else if(errno == ENOTSOCK)\n                {\n                    LOG_ERROR(\"NetworkServer: Could not bind network socket. The file descriptor sockfd does not refer to a socket.\");\n                }\n                else\n                {\n                    LOG_ERROR(\"NetworkManager: Could not bind network socket. Error code: %d.\", errno);\n                }\n\n                WSACleanup();\n                return;\n            }\n\n            setsockopt(server_sock[socket_count], IPPROTO_TCP, TCP_NODELAY, &yes, sizeof(yes));\n\n            socket_count += 1;\n        }\n\n        freeaddrinfo(result);\n        server_online = true;\n\n        for(int curr_socket = 0; curr_socket < socket_count; curr_socket++)\n        {\n            ConnectionThread[curr_socket] = new std::thread(&NetworkServer::ConnectionThreadFunction, this, curr_socket);\n            ConnectionThread[curr_socket]->detach();\n        }\n    }\n\n    void StopServer()\n    {\n        int curr_socket;\n        server_online = false;\n\n        ServerClientsMutex.lock();\n\n        for(unsigned int client_idx = 0; client_idx < ServerClients.size(); client_idx++)\n        {\n            delete ServerClients[client_idx];\n        }\n\n        ServerClients.clear();\n\n        for(curr_socket = 0; curr_socket < socket_count; curr_socket++)\n        {\n            shutdown(server_sock[curr_socket], SD_RECEIVE);\n            closesocket(server_sock[curr_socket]);\n        }\n\n        ServerClientsMutex.unlock();\n\n        for(curr_socket = 0; curr_socket < socket_count; curr_socket++)\n        {\n            if(ConnectionThread[curr_socket])\n            {\n                delete ConnectionThread[curr_socket];\n                ConnectionThread[curr_socket] = nullptr;\n            }\n        }\n\n        socket_count = 0;\n        ClientInfoChanged();\n    }\n\nprivate:\n    void ConnectionThreadFunction(int socket_idx)\n    {\n        LOG_INFO(\"NetworkServer: Network connection thread started on port %hu\", GetPort());\n\n        while(server_online == true)\n        {\n            NetworkClientInfo * client_info = new NetworkClientInfo();\n\n            if(listen(server_sock[socket_idx], 10) < 0)\n            {\n                LOG_INFO(\"NetworkServer: Connection thread closed\");\n                server_online = false;\n                return;\n            }\n\n            server_listening = true;\n            ServerListeningChanged();\n\n            client_info->client_sock = accept_select((int)server_sock[socket_idx]);\n\n            if(client_info->client_sock < 0)\n            {\n                LOG_INFO(\"NetworkServer: Connection thread closed\");\n                server_online = false;\n                server_listening = false;\n                ServerListeningChanged();\n                return;\n            }\n\n            u_long arg = 0;\n            ioctlsocket(client_info->client_sock, FIONBIO, &arg);\n            setsockopt(client_info->client_sock, IPPROTO_TCP, TCP_NODELAY, &yes, sizeof(yes));\n\n            struct sockaddr_storage tmp_addr;\n            char ipstr[INET6_ADDRSTRLEN];\n            socklen_t len;\n            len = sizeof(tmp_addr);\n            getpeername(client_info->client_sock, (struct sockaddr*)&tmp_addr, &len);\n\n            if(tmp_addr.ss_family == AF_INET)\n            {\n                struct sockaddr_in *s_4 = (struct sockaddr_in *)&tmp_addr;\n                inet_ntop(AF_INET, &s_4->sin_addr, ipstr, sizeof(ipstr));\n                client_info->client_ip = ipstr;\n            }\n            else\n            {\n                struct sockaddr_in6 *s_6 = (struct sockaddr_in6 *)&tmp_addr;\n                inet_ntop(AF_INET6, &s_6->sin6_addr, ipstr, sizeof(ipstr));\n                client_info->client_ip = ipstr;\n            }\n\n            ServerClientsMutex.lock();\n            client_info->client_listen_thread = new std::thread(&NetworkServer::ListenThreadFunction, this, client_info);\n            client_info->client_listen_thread->detach();\n            ServerClients.push_back(client_info);\n            ServerClientsMutex.unlock();\n            ClientInfoChanged();\n        }\n\n        LOG_INFO(\"NetworkServer: Connection thread closed\");\n        server_online = false;\n        server_listening = false;\n        ServerListeningChanged();\n    }\n\n    int accept_select(int sockfd)\n    {\n        fd_set              set;\n        struct timeval      timeout;\n\n        while(1)\n        {\n            timeout.tv_sec          = TCP_TIMEOUT_SECONDS;\n            timeout.tv_usec         = 0;\n\n            FD_ZERO(&set);\n            FD_SET(sockfd, &set);\n\n            int rv = select(sockfd + 1, &set, NULL, NULL, &timeout);\n\n            if(rv == SOCKET_ERROR || server_online == false)\n            {\n                return -1;\n            }\n            else if(rv == 0)\n            {\n                continue;\n            }\n            else\n            {\n                return(accept((int)sockfd, NULL, NULL));\n            }\n        }\n    }\n\n    std::string host;\n    unsigned short port_num;\n    bool server_online;\n    bool server_listening;\n    std::vector<NetworkClientInfo *> ServerClients;\n    std::mutex ServerClientsMutex;\n    SOCKET server_sock[MAXSOCK];\n    int socket_count;\n    std::thread *ConnectionThread[MAXSOCK];\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 148,
    "matched_results": [
      "#include <iostream>\n#include <vector>\n#include <thread>\n#include <mutex>\n#include <string>\n#include <cstring>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n\n#define MAXSOCK 10\n\nclass NetworkClientInfo {\npublic:\n    int socket;\n    sockaddr_in address;\n    std::thread *thread;\n};\n\nclass NetworkServer {\nprivate:\n    std::string host;\n    unsigned short port_num;\n    bool server_online;\n    bool server_listening;\n    std::vector<NetworkClientInfo *> ServerClients;\n    std::mutex ServerClientsMutex;\n    int server_sock[MAXSOCK];\n    int socket_count;\n    std::thread *ConnectionThread[MAXSOCK];\n\npublic:\n    NetworkServer() : port_num(0), server_online(false), server_listening(false), socket_count(0) {\n        memset(server_sock, 0, sizeof(server_sock));\n        memset(ConnectionThread, 0, sizeof(ConnectionThread));\n    }\n\n    ~NetworkServer() {\n        StopServer();\n    }\n\n    void StartServer() {\n        server_online = true;\n        struct sockaddr_in server_addr;\n        server_addr.sin_family = AF_INET;\n        server_addr.sin_port = htons(port_num);\n        server_addr.sin_addr.s_addr = inet_addr(host.c_str());\n\n        for (int i = 0; i < MAXSOCK; ++i) {\n            server_sock[i] = socket(AF_INET, SOCK_STREAM, 0);\n            if (server_sock[i] < 0) {\n                std::cerr << \"Error creating socket\" << std::endl;\n                continue;\n            }\n\n            if (bind(server_sock[i], (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {\n                std::cerr << \"Error binding socket\" << std::endl;\n                close(server_sock[i]);\n                continue;\n            }\n\n            if (listen(server_sock[i], 5) < 0) {\n                std::cerr << \"Error listening on socket\" << std::endl;\n                close(server_sock[i]);\n                continue;\n            }\n\n            ConnectionThread[i] = new std::thread(&NetworkServer::ConnectionThreadFunction, this, i);\n            ++socket_count;\n        }\n        server_listening = true;\n    }\n\n    void StopServer() {\n        server_online = false;\n        server_listening = false;\n\n        for (int i = 0; i < socket_count; ++i) {\n            if (ConnectionThread[i]) {\n                ConnectionThread[i]->join();\n                delete ConnectionThread[i];\n                ConnectionThread[i] = nullptr;\n            }\n            close(server_sock[i]);\n        }\n\n        std::lock_guard<std::mutex> lock(ServerClientsMutex);\n        for (auto client : ServerClients) {\n            close(client->socket);\n            if (client->thread) {\n                client->thread->join();\n                delete client->thread;\n            }\n            delete client;\n        }\n        ServerClients.clear();\n    }\n\n    void ConnectionThreadFunction(int socket_idx) {\n        while (server_online) {\n            int client_sock = accept_select(server_sock[socket_idx]);\n            if (client_sock < 0) continue;\n\n            sockaddr_in client_addr;\n            socklen_t client_len = sizeof(client_addr);\n            getpeername(client_sock, (struct sockaddr *)&client_addr, &client_len);\n\n            NetworkClientInfo *client_info = new NetworkClientInfo();\n            client_info->socket = client_sock;\n            client_info->address = client_addr;\n            client_info->thread = new std::thread(&NetworkServer::ListenThreadFunction, this, client_info);\n\n            {\n                std::lock_guard<std::mutex> lock(ServerClientsMutex);\n                ServerClients.push_back(client_info);\n            }\n        }\n    }\n\n    int accept_select(int sockfd) {\n        fd_set readfds;\n        struct timeval timeout;\n        FD_ZERO(&readfds);\n        FD_SET(sockfd, &readfds);\n        timeout.tv_sec = 5;\n        timeout.tv_usec = 0;\n\n        int activity = select(sockfd + 1, &readfds, NULL, NULL, &timeout);\n        if (activity < 0) {\n            std::cerr << \"Select error\" << std::endl;\n            return -1;\n        }\n        if (activity == 0) {\n            return -1;\n        }\n        if (FD_ISSET(sockfd, &readfds)) {\n            return accept(sockfd, NULL, NULL);\n        }\n        return -1;\n    }\n\n    void ListenThreadFunction(NetworkClientInfo *client_info) {\n        char buffer[1024];\n        while (server_online) {\n            int bytes_received = recv(client_info->socket, buffer, sizeof(buffer), 0);\n            if (bytes_received <= 0) break;\n            send(client_info->socket, buffer, bytes_received, 0);\n        }\n\n        close(client_info->socket);\n        {\n            std::lock_guard<std::mutex> lock(ServerClientsMutex);\n            auto it = std::find(ServerClients.begin(), ServerClients.end(), client_info);\n            if (it != ServerClients.end()) {\n                ServerClients.erase(it);\n            }\n        }\n        delete client_info->thread;\n        delete client_info;\n    }\n};"
    ],
    "unmatched_results": [
      "#include <iostream>\n#include <vector>\n#include <thread>\n#include <mutex>\n#include <string>\n#include <cstring>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n\n#define MAXSOCK 10\n\nclass NetworkClientInfo {\n    // Placeholder for client information\n};\n\nclass RGBController {\n    // Placeholder for RGBController class\n};\n\nclass NetworkServer {\npublic:\n    NetworkServer(std::vector<RGBController*>& control);\n    ~NetworkServer();\n    void StartServer();\n    void StopServer();\n\nprivate:\n    void ConnectionThreadFunction(int socket_idx);\n    int accept_select(int sockfd);\n    void ListenThreadFunction(NetworkClientInfo* client_info);\n\n    std::string host;\n    unsigned short port_num;\n    bool server_online;\n    bool server_listening;\n    std::vector<NetworkClientInfo*> ServerClients;\n    std::mutex ServerClientsMutex;\n    int server_sock[MAXSOCK];\n    int socket_count;\n    std::thread* ConnectionThread[MAXSOCK];\n};\n\nNetworkServer::NetworkServer(std::vector<RGBController*>& control) : server_online(false), server_listening(false), socket_count(0) {\n    // Initialization code here\n}\n\nNetworkServer::~NetworkServer() {\n    StopServer();\n}\n\nvoid NetworkServer::StartServer() {\n    struct sockaddr_in server_addr;\n    server_online = true;\n    server_listening = true;\n\n    for (int i = 0; i < MAXSOCK; ++i) {\n        server_sock[i] = socket(AF_INET, SOCK_STREAM, 0);\n        if (server_sock[i] < 0) {\n            std::cerr << \"Error creating socket\" << std::endl;\n            continue;\n        }\n\n        memset(&server_addr, 0, sizeof(server_addr));\n        server_addr.sin_family = AF_INET;\n        server_addr.sin_addr.s_addr = inet_addr(host.c_str());\n        server_addr.sin_port = htons(port_num);\n\n        if (bind(server_sock[i], (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {\n            std::cerr << \"Error binding socket\" << std::endl;\n            close(server_sock[i]);\n            continue;\n        }\n\n        if (listen(server_sock[i], 5) < 0) {\n            std::cerr << \"Error listening on socket\" << std::endl;\n            close(server_sock[i]);\n            continue;\n        }\n\n        ConnectionThread[i] = new std::thread(&NetworkServer::ConnectionThreadFunction, this, i);\n        ++socket_count;\n    }\n}\n\nvoid NetworkServer::StopServer() {\n    server_online = false;\n    server_listening = false;\n\n    for (int i = 0; i < socket_count; ++i) {\n        close(server_sock[i]);\n        if (ConnectionThread[i]->joinable()) {\n            ConnectionThread[i]->join();\n        }\n        delete ConnectionThread[i];\n    }\n    socket_count = 0;\n}\n\nvoid NetworkServer::ConnectionThreadFunction(int socket_idx) {\n    while (server_online) {\n        int client_sock = accept_select(server_sock[socket_idx]);\n        if (client_sock < 0) {\n            continue;\n        }\n\n        NetworkClientInfo* client_info = new NetworkClientInfo();\n        {\n            std::lock_guard<std::mutex> lock(ServerClientsMutex);\n            ServerClients.push_back(client_info);\n        }\n        std::thread(&NetworkServer::ListenThreadFunction, this, client_info).detach();\n    }\n}\n\nint NetworkServer::accept_select(int sockfd) {\n    fd_set readfds;\n    struct timeval timeout;\n    FD_ZERO(&readfds);\n    FD_SET(sockfd, &readfds);\n    timeout.tv_sec = 5;\n    timeout.tv_usec = 0;\n\n    int activity = select(sockfd + 1, &readfds, NULL, NULL, &timeout);\n    if (activity < 0) {\n        std::cerr << \"Select error\" << std::endl;\n        return -1;\n    }\n\n    if (activity == 0) {\n        return -1;\n    }\n\n    if (FD_ISSET(sockfd, &readfds)) {\n        int client_sock = accept(sockfd, NULL, NULL);\n        if (client_sock < 0) {\n            std::cerr << \"Accept error\" << std::endl;\n            return -1;\n        }\n        return client_sock;\n    }\n    return -1;\n}\n\nvoid NetworkServer::ListenThreadFunction(NetworkClientInfo* client_info) {\n    // Placeholder for client communication handling\n}",
      "#include <iostream>\n#include <vector>\n#include <thread>\n#include <mutex>\n#include <string>\n#include <cstring>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n\n#define MAXSOCK 10\n\nclass NetworkClientInfo {\n    // Placeholder for client information\n};\n\nclass NetworkServer {\npublic:\n    NetworkServer(std::vector<RGBController*>& control);\n    ~NetworkServer();\n    void StartServer();\n    void StopServer();\n    unsigned short GetPort();\n    void ClientInfoChanged();\n    void ServerListeningChanged();\n\nprivate:\n    void ConnectionThreadFunction(int socket_idx);\n    int accept_select(int sockfd);\n    void ListenThreadFunction(NetworkClientInfo* client_info);\n\n    std::string host;\n    unsigned short port_num;\n    bool server_online;\n    bool server_listening;\n    std::vector<NetworkClientInfo*> ServerClients;\n    std::mutex ServerClientsMutex;\n    int server_sock[MAXSOCK];\n    int socket_count;\n    std::thread* ConnectionThread[MAXSOCK];\n};\n\nNetworkServer::NetworkServer(std::vector<RGBController*>& control) : port_num(0), server_online(false), server_listening(false), socket_count(0) {\n    memset(server_sock, 0, sizeof(server_sock));\n    memset(ConnectionThread, 0, sizeof(ConnectionThread));\n}\n\nNetworkServer::~NetworkServer() {\n    StopServer();\n}\n\nvoid NetworkServer::StartServer() {\n    struct sockaddr_in server_addr;\n    server_sock[0] = socket(AF_INET, SOCK_STREAM, 0);\n    if (server_sock[0] < 0) {\n        std::cerr << \"Error creating socket\" << std::endl;\n        return;\n    }\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_addr.s_addr = inet_addr(host.c_str());\n    server_addr.sin_port = htons(port_num);\n\n    if (bind(server_sock[0], (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {\n        std::cerr << \"Error binding socket\" << std::endl;\n        return;\n    }\n\n    if (listen(server_sock[0], 5) < 0) {\n        std::cerr << \"Error listening on socket\" << std::endl;\n        return;\n    }\n\n    server_online = true;\n    server_listening = true;\n    socket_count = 1;\n    ConnectionThread[0] = new std::thread(&NetworkServer::ConnectionThreadFunction, this, 0);\n}\n\nvoid NetworkServer::StopServer() {\n    server_online = false;\n    server_listening = false;\n    for (int i = 0; i < socket_count; ++i) {\n        if (ConnectionThread[i]) {\n            ConnectionThread[i]->join();\n            delete ConnectionThread[i];\n            ConnectionThread[i] = nullptr;\n        }\n        if (server_sock[i] > 0) {\n            close(server_sock[i]);\n            server_sock[i] = 0;\n        }\n    }\n    socket_count = 0;\n}\n\nvoid NetworkServer::ConnectionThreadFunction(int socket_idx) {\n    while (server_online) {\n        int client_sock = accept_select(server_sock[socket_idx]);\n        if (client_sock >= 0) {\n            NetworkClientInfo* client_info = new NetworkClientInfo();\n            {\n                std::lock_guard<std::mutex> lock(ServerClientsMutex);\n                ServerClients.push_back(client_info);\n            }\n            ClientInfoChanged();\n            std::thread(&NetworkServer::ListenThreadFunction, this, client_info).detach();\n        }\n    }\n}\n\nint NetworkServer::accept_select(int sockfd) {\n    fd_set fds;\n    struct timeval tv;\n    FD_ZERO(&fds);\n    FD_SET(sockfd, &fds);\n    tv.tv_sec = 1;\n    tv.tv_usec = 0;\n    int ret = select(sockfd + 1, &fds, NULL, NULL, &tv);\n    if (ret > 0 && FD_ISSET(sockfd, &fds)) {\n        return accept(sockfd, NULL, NULL);\n    }\n    return -1;\n}\n\nunsigned short NetworkServer::GetPort() {\n    return port_num;\n}\n\nvoid NetworkServer::ClientInfoChanged() {\n    // Placeholder for client info changed callback\n}\n\nvoid NetworkServer::ServerListeningChanged() {\n    // Placeholder for server listening state changed callback\n}\n\nvoid NetworkServer::ListenThreadFunction(NetworkClientInfo* client_info) {\n    // Placeholder for client communication handling\n}",
      "#include <iostream>\n#include <vector>\n#include <thread>\n#include <mutex>\n#include <string>\n#include <cstring>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n\n#define MAXSOCK 10\n\nclass NetworkClientInfo {\n    // Placeholder for client information\n};\n\nclass RGBController {\n    // Placeholder for RGB controller\n};\n\nclass NetworkServer {\npublic:\n    NetworkServer(std::vector<RGBController*>& control);\n    ~NetworkServer();\n    void StartServer();\n    void StopServer();\n    unsigned short GetPort() const;\n\nprivate:\n    void ConnectionThreadFunction(int socket_idx);\n    int accept_select(int sockfd);\n    void ClientInfoChanged();\n    void ServerListeningChanged();\n    void ListenThreadFunction(NetworkClientInfo* client_info);\n\n    std::string host;\n    unsigned short port_num;\n    bool server_online;\n    bool server_listening;\n    std::vector<NetworkClientInfo*> ServerClients;\n    std::mutex ServerClientsMutex;\n    int server_sock[MAXSOCK];\n    int socket_count;\n    std::thread* ConnectionThread[MAXSOCK];\n};\n\nNetworkServer::NetworkServer(std::vector<RGBController*>& control)\n    : host(\"0.0.0.0\"), port_num(0), server_online(false), server_listening(false), socket_count(0) {\n    memset(server_sock, 0, sizeof(server_sock));\n    memset(ConnectionThread, 0, sizeof(ConnectionThread));\n}\n\nNetworkServer::~NetworkServer() {\n    StopServer();\n}\n\nvoid NetworkServer::StartServer() {\n    server_online = true;\n    struct sockaddr_in server_addr;\n    server_sock[0] = socket(AF_INET, SOCK_STREAM, 0);\n    if (server_sock[0] < 0) {\n        std::cerr << \"Error creating socket\" << std::endl;\n        return;\n    }\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_addr.s_addr = inet_addr(host.c_str());\n    server_addr.sin_port = htons(port_num);\n    if (bind(server_sock[0], (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {\n        std::cerr << \"Error binding socket\" << std::endl;\n        return;\n    }\n    if (listen(server_sock[0], 5) < 0) {\n        std::cerr << \"Error listening on socket\" << std::endl;\n        return;\n    }\n    server_listening = true;\n    ServerListeningChanged();\n    ConnectionThread[0] = new std::thread(&NetworkServer::ConnectionThreadFunction, this, 0);\n}\n\nvoid NetworkServer::StopServer() {\n    server_online = false;\n    server_listening = false;\n    ServerListeningChanged();\n    for (int i = 0; i < socket_count; ++i) {\n        if (ConnectionThread[i]) {\n            ConnectionThread[i]->join();\n            delete ConnectionThread[i];\n            ConnectionThread[i] = nullptr;\n        }\n        if (server_sock[i] > 0) {\n            close(server_sock[i]);\n            server_sock[i] = 0;\n        }\n    }\n    socket_count = 0;\n}\n\nvoid NetworkServer::ConnectionThreadFunction(int socket_idx) {\n    while (server_online) {\n        int client_sock = accept_select(server_sock[socket_idx]);\n        if (client_sock > 0) {\n            NetworkClientInfo* client_info = new NetworkClientInfo();\n            {\n                std::lock_guard<std::mutex> lock(ServerClientsMutex);\n                ServerClients.push_back(client_info);\n                ClientInfoChanged();\n            }\n            std::thread(&NetworkServer::ListenThreadFunction, this, client_info).detach();\n        }\n    }\n}\n\nint NetworkServer::accept_select(int sockfd) {\n    fd_set readfds;\n    struct timeval timeout;\n    FD_ZERO(&readfds);\n    FD_SET(sockfd, &readfds);\n    timeout.tv_sec = 5;\n    timeout.tv_usec = 0;\n    int activity = select(sockfd + 1, &readfds, NULL, NULL, &timeout);\n    if (activity > 0 && FD_ISSET(sockfd, &readfds)) {\n        return accept(sockfd, NULL, NULL);\n    }\n    return -1;\n}\n\nunsigned short NetworkServer::GetPort() const {\n    return port_num;\n}\n\nvoid NetworkServer::ClientInfoChanged() {\n    // Placeholder for client info change handling\n}\n\nvoid NetworkServer::ServerListeningChanged() {\n    // Placeholder for server listening state change handling\n}\n\nvoid NetworkServer::ListenThreadFunction(NetworkClientInfo* client_info) {\n    // Placeholder for client communication handling\n}",
      "#include <iostream>\n#include <vector>\n#include <thread>\n#include <mutex>\n#include <string>\n#include <cstring>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n\n#define MAXSOCK 10\n\nclass NetworkClientInfo {\n    // Placeholder for client information\n};\n\nclass NetworkServer {\npublic:\n    NetworkServer(std::vector<RGBController*>& control);\n    ~NetworkServer();\n    void StartServer();\n    void StopServer();\n\nprivate:\n    void ConnectionThreadFunction(int socket_idx);\n    int accept_select(int sockfd);\n    void ClientInfoChanged();\n    void ServerListeningChanged();\n    void ListenThreadFunction(NetworkClientInfo* client_info);\n\n    std::string host;\n    unsigned short port_num;\n    bool server_online;\n    bool server_listening;\n    std::vector<NetworkClientInfo*> ServerClients;\n    std::mutex ServerClientsMutex;\n    int server_sock[MAXSOCK];\n    int socket_count;\n    std::thread* ConnectionThread[MAXSOCK];\n};\n\nNetworkServer::NetworkServer(std::vector<RGBController*>& control) : host(\"\"), port_num(0), server_online(false), server_listening(false), socket_count(0) {\n    memset(server_sock, 0, sizeof(server_sock));\n    memset(ConnectionThread, 0, sizeof(ConnectionThread));\n}\n\nNetworkServer::~NetworkServer() {\n    StopServer();\n}\n\nvoid NetworkServer::StartServer() {\n    server_online = true;\n    struct sockaddr_in server_addr;\n    server_sock[socket_count] = socket(AF_INET, SOCK_STREAM, 0);\n    if (server_sock[socket_count] < 0) {\n        std::cerr << \"Error creating socket\" << std::endl;\n        return;\n    }\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_addr.s_addr = inet_addr(host.c_str());\n    server_addr.sin_port = htons(port_num);\n\n    if (bind(server_sock[socket_count], (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {\n        std::cerr << \"Error binding socket\" << std::endl;\n        return;\n    }\n\n    if (listen(server_sock[socket_count], 5) < 0) {\n        std::cerr << \"Error listening on socket\" << std::endl;\n        return;\n    }\n\n    server_listening = true;\n    ServerListeningChanged();\n    ConnectionThread[socket_count] = new std::thread(&NetworkServer::ConnectionThreadFunction, this, socket_count);\n    socket_count++;\n}\n\nvoid NetworkServer::StopServer() {\n    server_online = false;\n    server_listening = false;\n    for (int i = 0; i < socket_count; ++i) {\n        if (ConnectionThread[i]) {\n            ConnectionThread[i]->join();\n            delete ConnectionThread[i];\n            ConnectionThread[i] = nullptr;\n        }\n        close(server_sock[i]);\n    }\n    socket_count = 0;\n    ServerClients.clear();\n}\n\nvoid NetworkServer::ConnectionThreadFunction(int socket_idx) {\n    while (server_online) {\n        int client_sock = accept_select(server_sock[socket_idx]);\n        if (client_sock >= 0) {\n            NetworkClientInfo* client_info = new NetworkClientInfo();\n            {\n                std::lock_guard<std::mutex> lock(ServerClientsMutex);\n                ServerClients.push_back(client_info);\n            }\n            ClientInfoChanged();\n            std::thread(&NetworkServer::ListenThreadFunction, this, client_info).detach();\n        }\n    }\n}\n\nint NetworkServer::accept_select(int sockfd) {\n    fd_set readfds;\n    struct timeval timeout;\n    FD_ZERO(&readfds);\n    FD_SET(sockfd, &readfds);\n    timeout.tv_sec = 5;\n    timeout.tv_usec = 0;\n    int activity = select(sockfd + 1, &readfds, NULL, NULL, &timeout);\n    if (activity > 0 && FD_ISSET(sockfd, &readfds)) {\n        return accept(sockfd, NULL, NULL);\n    }\n    return -1;\n}\n\nvoid NetworkServer::ClientInfoChanged() {\n    // Placeholder for client info change callback\n}\n\nvoid NetworkServer::ServerListeningChanged() {\n    // Placeholder for server listening state change callback\n}\n\nvoid NetworkServer::ListenThreadFunction(NetworkClientInfo* client_info) {\n    // Placeholder for client communication handling\n}",
      "#include <iostream>\n#include <vector>\n#include <thread>\n#include <mutex>\n#include <string>\n#include <cstring>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n\n#define MAXSOCK 10\n\nclass NetworkClientInfo {\n    // Placeholder for client information\n};\n\nclass RGBController {\n    // Placeholder for RGB controller\n};\n\nclass NetworkServer {\npublic:\n    NetworkServer(std::vector<RGBController*>& control);\n    ~NetworkServer();\n    void StartServer();\n    void StopServer();\n\nprivate:\n    void ConnectionThreadFunction(int socket_idx);\n    int accept_select(int sockfd);\n    void ListenThreadFunction(NetworkClientInfo* client_info);\n\n    std::string host;\n    unsigned short port_num;\n    bool server_online;\n    bool server_listening;\n    std::vector<NetworkClientInfo*> ServerClients;\n    std::mutex ServerClientsMutex;\n    int server_sock[MAXSOCK];\n    int socket_count;\n    std::thread* ConnectionThread[MAXSOCK];\n};\n\nNetworkServer::NetworkServer(std::vector<RGBController*>& control) : server_online(false), server_listening(false), socket_count(0) {\n    memset(server_sock, 0, sizeof(server_sock));\n    memset(ConnectionThread, 0, sizeof(ConnectionThread));\n}\n\nNetworkServer::~NetworkServer() {\n    StopServer();\n}\n\nvoid NetworkServer::StartServer() {\n    server_online = true;\n    struct sockaddr_in server_addr;\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(port_num);\n    server_addr.sin_addr.s_addr = inet_addr(host.c_str());\n\n    for (int i = 0; i < MAXSOCK; ++i) {\n        server_sock[i] = socket(AF_INET, SOCK_STREAM, 0);\n        if (server_sock[i] < 0) {\n            std::cerr << \"Socket creation failed\\n\";\n            continue;\n        }\n        if (bind(server_sock[i], (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {\n            std::cerr << \"Socket bind failed\\n\";\n            close(server_sock[i]);\n            continue;\n        }\n        if (listen(server_sock[i], 5) < 0) {\n            std::cerr << \"Socket listen failed\\n\";\n            close(server_sock[i]);\n            continue;\n        }\n        ConnectionThread[i] = new std::thread(&NetworkServer::ConnectionThreadFunction, this, i);\n        ++socket_count;\n    }\n    server_listening = true;\n}\n\nvoid NetworkServer::StopServer() {\n    server_online = false;\n    server_listening = false;\n    for (int i = 0; i < socket_count; ++i) {\n        if (ConnectionThread[i]) {\n            ConnectionThread[i]->join();\n            delete ConnectionThread[i];\n            ConnectionThread[i] = nullptr;\n        }\n        if (server_sock[i] >= 0) {\n            close(server_sock[i]);\n            server_sock[i] = -1;\n        }\n    }\n    socket_count = 0;\n}\n\nvoid NetworkServer::ConnectionThreadFunction(int socket_idx) {\n    while (server_online) {\n        int client_sock = accept_select(server_sock[socket_idx]);\n        if (client_sock >= 0) {\n            NetworkClientInfo* client_info = new NetworkClientInfo();\n            std::lock_guard<std::mutex> lock(ServerClientsMutex);\n            ServerClients.push_back(client_info);\n            std::thread(&NetworkServer::ListenThreadFunction, this, client_info).detach();\n        }\n    }\n}\n\nint NetworkServer::accept_select(int sockfd) {\n    fd_set readfds;\n    struct timeval timeout;\n    FD_ZERO(&readfds);\n    FD_SET(sockfd, &readfds);\n    timeout.tv_sec = 1;\n    timeout.tv_usec = 0;\n    int activity = select(sockfd + 1, &readfds, nullptr, nullptr, &timeout);\n    if (activity > 0 && FD_ISSET(sockfd, &readfds)) {\n        return accept(sockfd, nullptr, nullptr);\n    }\n    return -1;\n}\n\nvoid NetworkServer::ListenThreadFunction(NetworkClientInfo* client_info) {\n    // Placeholder for client communication handling\n}",
      "#include <iostream>\n#include <vector>\n#include <thread>\n#include <mutex>\n#include <string>\n#include <cstring>\n#include <winsock2.h>\n#include <ws2tcpip.h>\n\n#define MAXSOCK 10\n\nclass NetworkClientInfo {\n    // Implementation of NetworkClientInfo class\n};\n\nclass RGBController {\n    // Implementation of RGBController class\n};\n\nclass NetworkServer {\npublic:\n    NetworkServer(std::vector<RGBController *> &control);\n    ~NetworkServer();\n    void StartServer();\n    void StopServer();\n    unsigned short GetPort();\n    \nprivate:\n    void ConnectionThreadFunction(int socket_idx);\n    int accept_select(int sockfd);\n    void ClientInfoChanged();\n    void ServerListeningChanged();\n    void ListenThreadFunction(NetworkClientInfo *client_info);\n\n    std::string host;\n    unsigned short port_num;\n    bool server_online;\n    bool server_listening;\n    std::vector<NetworkClientInfo *> ServerClients;\n    std::mutex ServerClientsMutex;\n    SOCKET server_sock[MAXSOCK];\n    int socket_count;\n    std::thread *ConnectionThread[MAXSOCK];\n};\n\nNetworkServer::NetworkServer(std::vector<RGBController *> &control) : port_num(0), server_online(false), server_listening(false), socket_count(0) {\n    WSADATA wsaData;\n    WSAStartup(MAKEWORD(2, 2), &wsaData);\n}\n\nNetworkServer::~NetworkServer() {\n    StopServer();\n    WSACleanup();\n}\n\nvoid NetworkServer::StartServer() {\n    struct addrinfo hints, *result, *ptr;\n    int iResult;\n\n    ZeroMemory(&hints, sizeof(hints));\n    hints.ai_family = AF_UNSPEC;\n    hints.ai_socktype = SOCK_STREAM;\n    hints.ai_protocol = IPPROTO_TCP;\n    hints.ai_flags = AI_PASSIVE;\n\n    iResult = getaddrinfo(host.c_str(), std::to_string(port_num).c_str(), &hints, &result);\n    if (iResult != 0) {\n        std::cerr << \"getaddrinfo failed: \" << iResult << std::endl;\n        return;\n    }\n\n    for (ptr = result; ptr != NULL; ptr = ptr->ai_next) {\n        SOCKET ListenSocket = socket(ptr->ai_family, ptr->ai_socktype, ptr->ai_protocol);\n        if (ListenSocket == INVALID_SOCKET) {\n            std::cerr << \"Error at socket(): \" << WSAGetLastError() << std::endl;\n            freeaddrinfo(result);\n            return;\n        }\n\n        iResult = bind(ListenSocket, ptr->ai_addr, (int)ptr->ai_addrlen);\n        if (iResult == SOCKET_ERROR) {\n            std::cerr << \"bind failed with error: \" << WSAGetLastError() << std::endl;\n            closesocket(ListenSocket);\n            freeaddrinfo(result);\n            return;\n        }\n\n        server_sock[socket_count] = ListenSocket;\n        socket_count++;\n    }\n\n    freeaddrinfo(result);\n\n    for (int i = 0; i < socket_count; i++) {\n        if (listen(server_sock[i], SOMAXCONN) == SOCKET_ERROR) {\n            std::cerr << \"Listen failed with error: \" << WSAGetLastError() << std::endl;\n            closesocket(server_sock[i]);\n            return;\n        }\n\n        ConnectionThread[i] = new std::thread(&NetworkServer::ConnectionThreadFunction, this, i);\n    }\n\n    server_online = true;\n    server_listening = true;\n    ServerListeningChanged();\n}\n\nvoid NetworkServer::StopServer() {\n    server_online = false;\n    server_listening = false;\n    ServerListeningChanged();\n\n    for (int i = 0; i < socket_count; i++) {\n        closesocket(server_sock[i]);\n        if (ConnectionThread[i]->joinable()) {\n            ConnectionThread[i]->join();\n        }\n        delete ConnectionThread[i];\n    }\n\n    socket_count = 0;\n\n    std::lock_guard<std::mutex> lock(ServerClientsMutex);\n    for (auto client : ServerClients) {\n        // Close client connections and clean up\n    }\n    ServerClients.clear();\n}\n\nvoid NetworkServer::ConnectionThreadFunction(int socket_idx) {\n    while (server_online) {\n        int client_sock = accept_select(server_sock[socket_idx]);\n        if (client_sock != INVALID_SOCKET) {\n            // Handle new client connection\n        }\n    }\n}\n\nint NetworkServer::accept_select(int sockfd) {\n    fd_set readfds;\n    struct timeval tv;\n    int retval;\n\n    FD_ZERO(&readfds);\n    FD_SET(sockfd, &readfds);\n\n    tv.tv_sec = 5;\n    tv.tv_usec = 0;\n\n    retval = select(sockfd + 1, &readfds, NULL, NULL, &tv);\n    if (retval == -1) {\n        std::cerr << \"select() failed: \" << WSAGetLastError() << std::endl;\n        return INVALID_SOCKET;\n    } else if (retval) {\n        return accept(sockfd, NULL, NULL);\n    } else {\n        return INVALID_SOCKET;\n    }\n}\n\nunsigned short NetworkServer::GetPort() {\n    return port_num;\n}\n\nvoid NetworkServer::ClientInfoChanged() {\n    // Implementation of client info change callback\n}\n\nvoid NetworkServer::ServerListeningChanged() {\n    // Implementation of server listening state change callback\n}\n\nvoid NetworkServer::ListenThreadFunction(NetworkClientInfo *client_info) {\n    // Implementation of client communication handling\n}",
      "#include <iostream>\n#include <vector>\n#include <thread>\n#include <mutex>\n#include <string>\n#include <cstring>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n#include <arpa/inet.h>\n\n#define MAXSOCK 10\n\nclass NetworkClientInfo {\n    // Placeholder for client information\n};\n\nclass NetworkServer {\npublic:\n    NetworkServer(std::vector<RGBController *>& control);\n    ~NetworkServer();\n    void StartServer();\n    void StopServer();\n    unsigned short GetPort();\n    \nprivate:\n    void ConnectionThreadFunction(int socket_idx);\n    int accept_select(int sockfd);\n    void ClientInfoChanged();\n    void ServerListeningChanged();\n    void ListenThreadFunction(NetworkClientInfo * client_info);\n\n    std::string host;\n    unsigned short port_num;\n    bool server_online;\n    bool server_listening;\n    std::vector<NetworkClientInfo *> ServerClients;\n    std::mutex ServerClientsMutex;\n    int server_sock[MAXSOCK];\n    int socket_count;\n    std::thread *ConnectionThread[MAXSOCK];\n};\n\nNetworkServer::NetworkServer(std::vector<RGBController *>& control) : port_num(0), server_online(false), server_listening(false), socket_count(0) {\n    memset(server_sock, 0, sizeof(server_sock));\n    memset(ConnectionThread, 0, sizeof(ConnectionThread));\n}\n\nNetworkServer::~NetworkServer() {\n    StopServer();\n}\n\nvoid NetworkServer::StartServer() {\n    struct sockaddr_in server_addr;\n    server_sock[0] = socket(AF_INET, SOCK_STREAM, 0);\n    if (server_sock[0] < 0) {\n        std::cerr << \"Error creating socket\" << std::endl;\n        return;\n    }\n    \n    server_addr.sin_family = AF_INET;\n    server_addr.sin_addr.s_addr = inet_addr(host.c_str());\n    server_addr.sin_port = htons(port_num);\n    \n    if (bind(server_sock[0], (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {\n        std::cerr << \"Error binding socket\" << std::endl;\n        return;\n    }\n    \n    if (listen(server_sock[0], 5) < 0) {\n        std::cerr << \"Error listening on socket\" << std::endl;\n        return;\n    }\n    \n    server_online = true;\n    server_listening = true;\n    socket_count = 1;\n    \n    for (int i = 0; i < socket_count; ++i) {\n        ConnectionThread[i] = new std::thread(&NetworkServer::ConnectionThreadFunction, this, i);\n    }\n    \n    ServerListeningChanged();\n}\n\nvoid NetworkServer::StopServer() {\n    server_online = false;\n    server_listening = false;\n    \n    for (int i = 0; i < socket_count; ++i) {\n        if (server_sock[i] > 0) {\n            close(server_sock[i]);\n            server_sock[i] = 0;\n        }\n        if (ConnectionThread[i]) {\n            ConnectionThread[i]->join();\n            delete ConnectionThread[i];\n            ConnectionThread[i] = nullptr;\n        }\n    }\n    \n    ServerClientsMutex.lock();\n    for (auto client : ServerClients) {\n        delete client;\n    }\n    ServerClients.clear();\n    ServerClientsMutex.unlock();\n    \n    ServerListeningChanged();\n}\n\nvoid NetworkServer::ConnectionThreadFunction(int socket_idx) {\n    while (server_online) {\n        int client_sock = accept_select(server_sock[socket_idx]);\n        if (client_sock < 0) {\n            continue;\n        }\n        \n        NetworkClientInfo *client_info = new NetworkClientInfo();\n        ServerClientsMutex.lock();\n        ServerClients.push_back(client_info);\n        ServerClientsMutex.unlock();\n        \n        ClientInfoChanged();\n        \n        std::thread(&NetworkServer::ListenThreadFunction, this, client_info).detach();\n    }\n}\n\nint NetworkServer::accept_select(int sockfd) {\n    fd_set readfds;\n    struct timeval timeout;\n    \n    FD_ZERO(&readfds);\n    FD_SET(sockfd, &readfds);\n    \n    timeout.tv_sec = 5;\n    timeout.tv_usec = 0;\n    \n    int activity = select(sockfd + 1, &readfds, NULL, NULL, &timeout);\n    if (activity < 0) {\n        std::cerr << \"Select error\" << std::endl;\n        return -1;\n    }\n    \n    if (activity == 0) {\n        return -1;\n    }\n    \n    if (FD_ISSET(sockfd, &readfds)) {\n        int client_sock = accept(sockfd, NULL, NULL);\n        if (client_sock < 0) {\n            std::cerr << \"Error accepting connection\" << std::endl;\n            return -1;\n        }\n        return client_sock;\n    }\n    \n    return -1;\n}\n\nunsigned short NetworkServer::GetPort() {\n    return port_num;\n}\n\nvoid NetworkServer::ClientInfoChanged() {\n    // Placeholder for client info changed callback\n}\n\nvoid NetworkServer::ServerListeningChanged() {\n    // Placeholder for server listening state changed callback\n}\n\nvoid NetworkServer::ListenThreadFunction(NetworkClientInfo * client_info) {\n    // Placeholder for client communication handling\n}",
      "#include <iostream>\n#include <vector>\n#include <thread>\n#include <mutex>\n#include <string>\n#include <cstring>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n\n#define MAXSOCK 10\n\nclass NetworkClientInfo {\n    // Placeholder for client information\n};\n\nclass RGBController {\n    // Placeholder for RGB controller class\n};\n\nclass NetworkServer {\npublic:\n    NetworkServer(std::vector<RGBController *>& control);\n    ~NetworkServer();\n    void StartServer();\n    void StopServer();\n    unsigned short GetPort();\n    \nprivate:\n    void ConnectionThreadFunction(int socket_idx);\n    int accept_select(int sockfd);\n    void ClientInfoChanged();\n    void ServerListeningChanged();\n    void ListenThreadFunction(NetworkClientInfo * client_info);\n\n    std::string host;\n    unsigned short port_num;\n    bool server_online;\n    bool server_listening;\n    std::vector<NetworkClientInfo *> ServerClients;\n    std::mutex ServerClientsMutex;\n    int server_sock[MAXSOCK];\n    int socket_count;\n    std::thread *ConnectionThread[MAXSOCK];\n};\n\nNetworkServer::NetworkServer(std::vector<RGBController *>& control) : host(\"\"), port_num(0), server_online(false), server_listening(false), socket_count(0) {\n    memset(server_sock, 0, sizeof(server_sock));\n    memset(ConnectionThread, 0, sizeof(ConnectionThread));\n}\n\nNetworkServer::~NetworkServer() {\n    StopServer();\n}\n\nvoid NetworkServer::StartServer() {\n    struct sockaddr_in server_addr;\n    server_sock[0] = socket(AF_INET, SOCK_STREAM, 0);\n    if (server_sock[0] < 0) {\n        std::cerr << \"Error creating socket\" << std::endl;\n        return;\n    }\n\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_addr.s_addr = INADDR_ANY;\n    server_addr.sin_port = htons(port_num);\n\n    if (bind(server_sock[0], (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {\n        std::cerr << \"Error binding socket\" << std::endl;\n        return;\n    }\n\n    listen(server_sock[0], 5);\n    server_online = true;\n    server_listening = true;\n    ServerListeningChanged();\n\n    ConnectionThread[0] = new std::thread(&NetworkServer::ConnectionThreadFunction, this, 0);\n}\n\nvoid NetworkServer::StopServer() {\n    server_online = false;\n    server_listening = false;\n    ServerListeningChanged();\n\n    for (int i = 0; i < socket_count; ++i) {\n        if (server_sock[i] > 0) {\n            close(server_sock[i]);\n        }\n        if (ConnectionThread[i] != nullptr) {\n            ConnectionThread[i]->join();\n            delete ConnectionThread[i];\n            ConnectionThread[i] = nullptr;\n        }\n    }\n}\n\nvoid NetworkServer::ConnectionThreadFunction(int socket_idx) {\n    while (server_online) {\n        int client_sock = accept_select(server_sock[socket_idx]);\n        if (client_sock < 0) {\n            continue;\n        }\n\n        NetworkClientInfo *client_info = new NetworkClientInfo();\n        {\n            std::lock_guard<std::mutex> lock(ServerClientsMutex);\n            ServerClients.push_back(client_info);\n            ClientInfoChanged();\n        }\n\n        std::thread(&NetworkServer::ListenThreadFunction, this, client_info).detach();\n    }\n}\n\nint NetworkServer::accept_select(int sockfd) {\n    fd_set readfds;\n    struct timeval timeout;\n    FD_ZERO(&readfds);\n    FD_SET(sockfd, &readfds);\n    timeout.tv_sec = 5;\n    timeout.tv_usec = 0;\n\n    int activity = select(sockfd + 1, &readfds, NULL, NULL, &timeout);\n    if (activity < 0) {\n        std::cerr << \"Select error\" << std::endl;\n        return -1;\n    }\n\n    if (activity == 0) {\n        return -1;\n    }\n\n    if (FD_ISSET(sockfd, &readfds)) {\n        int client_sock = accept(sockfd, NULL, NULL);\n        if (client_sock < 0) {\n            std::cerr << \"Accept error\" << std::endl;\n            return -1;\n        }\n        return client_sock;\n    }\n    return -1;\n}\n\nunsigned short NetworkServer::GetPort() {\n    return port_num;\n}\n\nvoid NetworkServer::ClientInfoChanged() {\n    // Placeholder for client info changed callback\n}\n\nvoid NetworkServer::ServerListeningChanged() {\n    // Placeholder for server listening state changed callback\n}\n\nvoid NetworkServer::ListenThreadFunction(NetworkClientInfo *client_info) {\n    // Placeholder for client communication handling\n}",
      "#include <iostream>\n#include <vector>\n#include <thread>\n#include <mutex>\n#include <string>\n#include <cstring>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n\n#define MAXSOCK 10\n\nclass NetworkClientInfo {\n    // Placeholder for client information\n};\n\nclass RGBController {\n    // Placeholder for RGB controller\n};\n\nclass NetworkServer {\npublic:\n    NetworkServer(std::vector<RGBController*>& control);\n    ~NetworkServer();\n    void StartServer();\n    void StopServer();\n\nprivate:\n    void ConnectionThreadFunction(int socket_idx);\n    int accept_select(int sockfd);\n    void ListenThreadFunction(NetworkClientInfo* client_info);\n    void ClientInfoChanged();\n    void ServerListeningChanged();\n\n    std::string host;\n    unsigned short port_num;\n    bool server_online;\n    bool server_listening;\n    std::vector<NetworkClientInfo*> ServerClients;\n    std::mutex ServerClientsMutex;\n    int server_sock[MAXSOCK];\n    int socket_count;\n    std::thread* ConnectionThread[MAXSOCK];\n};\n\nNetworkServer::NetworkServer(std::vector<RGBController*>& control) \n    : host(\"0.0.0.0\"), port_num(0), server_online(false), server_listening(false), socket_count(0) {\n    memset(server_sock, 0, sizeof(server_sock));\n    memset(ConnectionThread, 0, sizeof(ConnectionThread));\n}\n\nNetworkServer::~NetworkServer() {\n    StopServer();\n}\n\nvoid NetworkServer::StartServer() {\n    server_online = true;\n    struct sockaddr_in server_addr;\n    server_sock[0] = socket(AF_INET, SOCK_STREAM, 0);\n    if (server_sock[0] < 0) {\n        std::cerr << \"Error creating socket\" << std::endl;\n        return;\n    }\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_addr.s_addr = inet_addr(host.c_str());\n    server_addr.sin_port = htons(port_num);\n    if (bind(server_sock[0], (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {\n        std::cerr << \"Error binding socket\" << std::endl;\n        return;\n    }\n    if (listen(server_sock[0], 5) < 0) {\n        std::cerr << \"Error listening on socket\" << std::endl;\n        return;\n    }\n    server_listening = true;\n    ServerListeningChanged();\n    ConnectionThread[0] = new std::thread(&NetworkServer::ConnectionThreadFunction, this, 0);\n}\n\nvoid NetworkServer::StopServer() {\n    server_online = false;\n    server_listening = false;\n    ServerListeningChanged();\n    for (int i = 0; i < socket_count; ++i) {\n        if (ConnectionThread[i]) {\n            ConnectionThread[i]->join();\n            delete ConnectionThread[i];\n            ConnectionThread[i] = nullptr;\n        }\n        if (server_sock[i] > 0) {\n            close(server_sock[i]);\n            server_sock[i] = 0;\n        }\n    }\n    socket_count = 0;\n    std::lock_guard<std::mutex> lock(ServerClientsMutex);\n    for (auto client : ServerClients) {\n        delete client;\n    }\n    ServerClients.clear();\n}\n\nvoid NetworkServer::ConnectionThreadFunction(int socket_idx) {\n    while (server_online) {\n        int client_sock = accept_select(server_sock[socket_idx]);\n        if (client_sock < 0) {\n            continue;\n        }\n        auto client_info = new NetworkClientInfo();\n        {\n            std::lock_guard<std::mutex> lock(ServerClientsMutex);\n            ServerClients.push_back(client_info);\n            ClientInfoChanged();\n        }\n        std::thread(&NetworkServer::ListenThreadFunction, this, client_info).detach();\n    }\n}\n\nint NetworkServer::accept_select(int sockfd) {\n    fd_set readfds;\n    struct timeval tv;\n    FD_ZERO(&readfds);\n    FD_SET(sockfd, &readfds);\n    tv.tv_sec = 1;\n    tv.tv_usec = 0;\n    int retval = select(sockfd + 1, &readfds, NULL, NULL, &tv);\n    if (retval == -1) {\n        std::cerr << \"Error in select\" << std::endl;\n        return -1;\n    } else if (retval) {\n        return accept(sockfd, NULL, NULL);\n    } else {\n        return -1;\n    }\n}\n\nvoid NetworkServer::ListenThreadFunction(NetworkClientInfo* client_info) {\n    // Placeholder for client communication handling\n}\n\nvoid NetworkServer::ClientInfoChanged() {\n    // Placeholder for client info change callback\n}\n\nvoid NetworkServer::ServerListeningChanged() {\n    // Placeholder for server listening state change callback\n}"
    ],
    "match_count": 1,
    "pass@3": 0.30000000000000004,
    "pass@5": 0.5
  },
  {
    "Task_id": 25,
    "Instruction": "Task Description: Implement a TCP server in C++ that listens for incoming connections, handles client requests in separate child processes, and responds to clients after processing their data.\n\nFunction Description: The function `tcp_server_communication` creates a TCP server that binds to a specified port, listens for incoming connections, and forks child processes to handle each client connection. Each child process reads a character from the client, increments it after a delay, and sends it back before terminating.\n\nInput: None (The function uses predefined constants: port number 9736 and INADDR_ANY for binding to all available network interfaces)\n\nOutput: None (The function runs indefinitely, servicing client requests and doesn't return any value)\n\nNote: The function includes signal handling to prevent zombie processes from terminated child processes. Each client connection is handled in a separate child process while the parent process continues to accept new connections.",
    "Canonical_solution": "#include <unistd.h>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <signal.h>\n\nvoid tcp_server_communication()\n{\n    int server_sockfd = -1;\n    int client_sockfd = -1;\n    int client_len = 0;\n    struct sockaddr_in server_addr;\n    struct sockaddr_in client_addr;\n    \n    server_sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    \n    server_addr.sin_family = AF_INET;\n    server_addr.sin_addr.s_addr = htonl(INADDR_ANY);\n    server_addr.sin_port = htons(9736);\n    \n    bind(server_sockfd, (struct sockaddr*)&server_addr, sizeof(server_addr));\n    listen(server_sockfd, 5);\n    signal(SIGCHLD, SIG_IGN);\n\n    while(1)\n    {\n        char ch = '\\0';\n        client_len = sizeof(client_addr);\n        client_sockfd = accept(server_sockfd, (struct sockaddr*)&client_addr,\n                               (socklen_t *)&client_len);\n\n        if(fork() == 0)\n        {\n            read(client_sockfd, &ch, 1);\n            sleep(5);\n            ch++;\n            write(client_sockfd, &ch, 1);\n            close(client_sockfd);\n            exit(0);\n        }\n        else\n        {\n            close(client_sockfd);\n        }\n    }\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 148,
    "matched_results": [],
    "unmatched_results": [
      "#include <iostream>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n#include <signal.h>\n#include <cstring>\n\n#define PORT 9736\n\nvoid handle_client(int client_socket) {\n    char buffer;\n    read(client_socket, &buffer, 1);\n    sleep(1); // Simulate processing delay\n    buffer++;\n    write(client_socket, &buffer, 1);\n    close(client_socket);\n    exit(0);\n}\n\nvoid sigchld_handler(int s) {\n    while (waitpid(-1, nullptr, WNOHANG) > 0);\n}\n\nvoid tcp_server_communication() {\n    int server_socket, client_socket;\n    struct sockaddr_in server_addr, client_addr;\n    socklen_t sin_size;\n    struct sigaction sa;\n\n    server_socket = socket(AF_INET, SOCK_STREAM, 0);\n    if (server_socket == -1) {\n        perror(\"socket\");\n        exit(1);\n    }\n\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(PORT);\n    server_addr.sin_addr.s_addr = INADDR_ANY;\n    memset(&(server_addr.sin_zero), '\\0', 8);\n\n    if (bind(server_socket, (struct sockaddr *)&server_addr, sizeof(struct sockaddr)) == -1) {\n        perror(\"bind\");\n        close(server_socket);\n        exit(1);\n    }\n\n    if (listen(server_socket, 10) == -1) {\n        perror(\"listen\");\n        close(server_socket);\n        exit(1);\n    }\n\n    sa.sa_handler = sigchld_handler;\n    sigemptyset(&sa.sa_mask);\n    sa.sa_flags = SA_RESTART;\n    if (sigaction(SIGCHLD, &sa, nullptr) == -1) {\n        perror(\"sigaction\");\n        close(server_socket);\n        exit(1);\n    }\n\n    while (true) {\n        sin_size = sizeof(struct sockaddr_in);\n        client_socket = accept(server_socket, (struct sockaddr *)&client_addr, &sin_size);\n        if (client_socket == -1) {\n            perror(\"accept\");\n            continue;\n        }\n\n        if (!fork()) {\n            close(server_socket);\n            handle_client(client_socket);\n        }\n        close(client_socket);\n    }\n}\n\nint main() {\n    tcp_server_communication();\n    return 0;\n}",
      "#include <iostream>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n#include <signal.h>\n#include <cstring>\n\n#define PORT 9736\n\nvoid handle_client(int client_socket) {\n    char buffer;\n    read(client_socket, &buffer, 1);\n    sleep(1); // Simulate processing delay\n    buffer++;\n    write(client_socket, &buffer, 1);\n    close(client_socket);\n    exit(0);\n}\n\nvoid signal_handler(int signum) {\n    while (waitpid(-1, nullptr, WNOHANG) > 0);\n}\n\nvoid tcp_server_communication() {\n    int server_socket, client_socket;\n    struct sockaddr_in server_addr, client_addr;\n    socklen_t client_len = sizeof(client_addr);\n\n    server_socket = socket(AF_INET, SOCK_STREAM, 0);\n    if (server_socket < 0) {\n        std::cerr << \"Error opening socket\" << std::endl;\n        exit(1);\n    }\n\n    memset(&server_addr, 0, sizeof(server_addr));\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_addr.s_addr = INADDR_ANY;\n    server_addr.sin_port = htons(PORT);\n\n    if (bind(server_socket, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {\n        std::cerr << \"Error binding socket\" << std::endl;\n        close(server_socket);\n        exit(1);\n    }\n\n    listen(server_socket, 5);\n\n    signal(SIGCHLD, signal_handler);\n\n    while (true) {\n        client_socket = accept(server_socket, (struct sockaddr *)&client_addr, &client_len);\n        if (client_socket < 0) {\n            std::cerr << \"Error accepting connection\" << std::endl;\n            continue;\n        }\n\n        pid_t pid = fork();\n        if (pid < 0) {\n            std::cerr << \"Error on fork\" << std::endl;\n            close(client_socket);\n            continue;\n        }\n\n        if (pid == 0) {\n            close(server_socket);\n            handle_client(client_socket);\n        } else {\n            close(client_socket);\n        }\n    }\n\n    close(server_socket);\n}",
      "#include <iostream>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n#include <signal.h>\n#include <cstring>\n\n#define PORT 9736\n#define BACKLOG 10\n\nvoid handle_client(int client_socket) {\n    char buffer;\n    if (read(client_socket, &buffer, 1) > 0) {\n        sleep(1); // Simulate processing delay\n        buffer++;\n        write(client_socket, &buffer, 1);\n    }\n    close(client_socket);\n    exit(0);\n}\n\nvoid sigchld_handler(int s) {\n    while (waitpid(-1, nullptr, WNOHANG) > 0);\n}\n\nvoid tcp_server_communication() {\n    int server_socket, client_socket;\n    struct sockaddr_in server_addr, client_addr;\n    socklen_t sin_size;\n    struct sigaction sa;\n\n    server_socket = socket(AF_INET, SOCK_STREAM, 0);\n    if (server_socket == -1) {\n        perror(\"socket\");\n        exit(1);\n    }\n\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(PORT);\n    server_addr.sin_addr.s_addr = INADDR_ANY;\n    memset(&(server_addr.sin_zero), '\\0', 8);\n\n    if (bind(server_socket, (struct sockaddr *)&server_addr, sizeof(struct sockaddr)) == -1) {\n        perror(\"bind\");\n        exit(1);\n    }\n\n    if (listen(server_socket, BACKLOG) == -1) {\n        perror(\"listen\");\n        exit(1);\n    }\n\n    sa.sa_handler = sigchld_handler;\n    sigemptyset(&sa.sa_mask);\n    sa.sa_flags = SA_RESTART;\n    if (sigaction(SIGCHLD, &sa, nullptr) == -1) {\n        perror(\"sigaction\");\n        exit(1);\n    }\n\n    while (true) {\n        sin_size = sizeof(struct sockaddr_in);\n        client_socket = accept(server_socket, (struct sockaddr *)&client_addr, &sin_size);\n        if (client_socket == -1) {\n            perror(\"accept\");\n            continue;\n        }\n\n        if (!fork()) {\n            close(server_socket);\n            handle_client(client_socket);\n        }\n        close(client_socket);\n    }\n}\n\nint main() {\n    tcp_server_communication();\n    return 0;\n}",
      "#include <iostream>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n#include <signal.h>\n#include <cstring>\n\n#define PORT 9736\n\nvoid handle_client(int client_socket) {\n    char buffer;\n    read(client_socket, &buffer, 1);\n    sleep(1); // Simulate processing delay\n    buffer++;\n    write(client_socket, &buffer, 1);\n    close(client_socket);\n    exit(0);\n}\n\nvoid signal_handler(int signum) {\n    while (waitpid(-1, NULL, WNOHANG) > 0);\n}\n\nvoid tcp_server_communication() {\n    int server_socket, client_socket;\n    struct sockaddr_in server_addr, client_addr;\n    socklen_t client_len = sizeof(client_addr);\n\n    server_socket = socket(AF_INET, SOCK_STREAM, 0);\n    if (server_socket < 0) {\n        std::cerr << \"Error opening socket\" << std::endl;\n        exit(1);\n    }\n\n    memset(&server_addr, 0, sizeof(server_addr));\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_addr.s_addr = INADDR_ANY;\n    server_addr.sin_port = htons(PORT);\n\n    if (bind(server_socket, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {\n        std::cerr << \"Error binding socket\" << std::endl;\n        close(server_socket);\n        exit(1);\n    }\n\n    listen(server_socket, 5);\n\n    signal(SIGCHLD, signal_handler);\n\n    while (true) {\n        client_socket = accept(server_socket, (struct sockaddr *)&client_addr, &client_len);\n        if (client_socket < 0) {\n            std::cerr << \"Error accepting connection\" << std::endl;\n            continue;\n        }\n\n        pid_t pid = fork();\n        if (pid < 0) {\n            std::cerr << \"Error on fork\" << std::endl;\n            close(client_socket);\n            continue;\n        }\n\n        if (pid == 0) {\n            close(server_socket);\n            handle_client(client_socket);\n        } else {\n            close(client_socket);\n        }\n    }\n\n    close(server_socket);\n}",
      "#include <iostream>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n#include <signal.h>\n#include <cstring>\n\n#define PORT 9736\n\nvoid handle_client(int client_socket) {\n    char buffer;\n    read(client_socket, &buffer, 1);\n    sleep(1); // Simulate processing delay\n    buffer++;\n    write(client_socket, &buffer, 1);\n    close(client_socket);\n    exit(0);\n}\n\nvoid signal_handler(int signum) {\n    while (waitpid(-1, NULL, WNOHANG) > 0);\n}\n\nvoid tcp_server_communication() {\n    int server_socket, client_socket;\n    struct sockaddr_in server_addr, client_addr;\n    socklen_t client_len = sizeof(client_addr);\n\n    signal(SIGCHLD, signal_handler);\n\n    server_socket = socket(AF_INET, SOCK_STREAM, 0);\n    if (server_socket < 0) {\n        std::cerr << \"Error opening socket\" << std::endl;\n        exit(1);\n    }\n\n    memset(&server_addr, 0, sizeof(server_addr));\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_addr.s_addr = INADDR_ANY;\n    server_addr.sin_port = htons(PORT);\n\n    if (bind(server_socket, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {\n        std::cerr << \"Error binding socket\" << std::endl;\n        close(server_socket);\n        exit(1);\n    }\n\n    listen(server_socket, 5);\n\n    while (true) {\n        client_socket = accept(server_socket, (struct sockaddr *)&client_addr, &client_len);\n        if (client_socket < 0) {\n            std::cerr << \"Error accepting connection\" << std::endl;\n            continue;\n        }\n\n        pid_t pid = fork();\n        if (pid < 0) {\n            std::cerr << \"Error on fork\" << std::endl;\n            close(client_socket);\n            continue;\n        }\n\n        if (pid == 0) {\n            close(server_socket);\n            handle_client(client_socket);\n        } else {\n            close(client_socket);\n        }\n    }\n\n    close(server_socket);\n}",
      "#include <iostream>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n#include <signal.h>\n#include <cstring>\n\n#define PORT 9736\n\nvoid handle_client(int client_socket) {\n    char buffer;\n    read(client_socket, &buffer, 1);\n    sleep(1); // Simulate processing delay\n    buffer++;\n    write(client_socket, &buffer, 1);\n    close(client_socket);\n    exit(0);\n}\n\nvoid sigchld_handler(int s) {\n    while (waitpid(-1, nullptr, WNOHANG) > 0);\n}\n\nvoid tcp_server_communication() {\n    int server_socket, client_socket;\n    struct sockaddr_in server_addr, client_addr;\n    socklen_t sin_size;\n    struct sigaction sa;\n\n    server_socket = socket(AF_INET, SOCK_STREAM, 0);\n    if (server_socket == -1) {\n        perror(\"Socket\");\n        exit(1);\n    }\n\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(PORT);\n    server_addr.sin_addr.s_addr = INADDR_ANY;\n    memset(&(server_addr.sin_zero), '\\0', 8);\n\n    if (bind(server_socket, (struct sockaddr *)&server_addr, sizeof(struct sockaddr)) == -1) {\n        perror(\"Bind\");\n        exit(1);\n    }\n\n    if (listen(server_socket, 10) == -1) {\n        perror(\"Listen\");\n        exit(1);\n    }\n\n    sa.sa_handler = sigchld_handler;\n    sigemptyset(&sa.sa_mask);\n    sa.sa_flags = SA_RESTART;\n    if (sigaction(SIGCHLD, &sa, nullptr) == -1) {\n        perror(\"Sigaction\");\n        exit(1);\n    }\n\n    while (true) {\n        sin_size = sizeof(struct sockaddr_in);\n        client_socket = accept(server_socket, (struct sockaddr *)&client_addr, &sin_size);\n        if (client_socket == -1) {\n            perror(\"Accept\");\n            continue;\n        }\n\n        if (!fork()) {\n            close(server_socket);\n            handle_client(client_socket);\n        }\n        close(client_socket);\n    }\n}\n\nint main() {\n    tcp_server_communication();\n    return 0;\n}",
      "#include <iostream>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n#include <signal.h>\n#include <cstring>\n#include <cstdlib>\n\n#define PORT 9736\n\nvoid handle_client(int client_socket) {\n    char buffer;\n    int n = read(client_socket, &buffer, 1);\n    if (n < 0) {\n        perror(\"ERROR reading from socket\");\n        close(client_socket);\n        exit(1);\n    }\n    sleep(1); // Simulate processing delay\n    buffer++;\n    n = write(client_socket, &buffer, 1);\n    if (n < 0) {\n        perror(\"ERROR writing to socket\");\n        close(client_socket);\n        exit(1);\n    }\n    close(client_socket);\n    exit(0);\n}\n\nvoid sigchld_handler(int s) {\n    while (waitpid(-1, NULL, WNOHANG) > 0);\n}\n\nvoid tcp_server_communication() {\n    int sockfd, newsockfd;\n    socklen_t clilen;\n    struct sockaddr_in serv_addr, cli_addr;\n    struct sigaction sa;\n\n    sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd < 0) {\n        perror(\"ERROR opening socket\");\n        exit(1);\n    }\n\n    memset((char *)&serv_addr, 0, sizeof(serv_addr));\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_addr.s_addr = INADDR_ANY;\n    serv_addr.sin_port = htons(PORT);\n\n    if (bind(sockfd, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        perror(\"ERROR on binding\");\n        close(sockfd);\n        exit(1);\n    }\n\n    listen(sockfd, 5);\n    clilen = sizeof(cli_addr);\n\n    sa.sa_handler = sigchld_handler;\n    sigemptyset(&sa.sa_mask);\n    sa.sa_flags = SA_RESTART;\n    if (sigaction(SIGCHLD, &sa, NULL) == -1) {\n        perror(\"sigaction\");\n        close(sockfd);\n        exit(1);\n    }\n\n    while (true) {\n        newsockfd = accept(sockfd, (struct sockaddr *)&cli_addr, &clilen);\n        if (newsockfd < 0) {\n            perror(\"ERROR on accept\");\n            continue;\n        }\n\n        pid_t pid = fork();\n        if (pid < 0) {\n            perror(\"ERROR on fork\");\n            close(newsockfd);\n            continue;\n        }\n\n        if (pid == 0) {\n            close(sockfd);\n            handle_client(newsockfd);\n        } else {\n            close(newsockfd);\n        }\n    }\n\n    close(sockfd);\n}",
      "#include <iostream>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n#include <signal.h>\n#include <cstring>\n#include <cstdlib>\n\n#define PORT 9736\n#define BACKLOG 5\n\nvoid handle_client(int client_socket) {\n    char buffer;\n    int n = read(client_socket, &buffer, 1);\n    if (n < 0) {\n        perror(\"ERROR reading from socket\");\n        close(client_socket);\n        exit(1);\n    }\n    sleep(1); // Simulate processing delay\n    buffer++;\n    n = write(client_socket, &buffer, 1);\n    if (n < 0) {\n        perror(\"ERROR writing to socket\");\n        close(client_socket);\n        exit(1);\n    }\n    close(client_socket);\n    exit(0);\n}\n\nvoid sigchld_handler(int s) {\n    while (waitpid(-1, NULL, WNOHANG) > 0);\n}\n\nvoid tcp_server_communication() {\n    int sockfd, newsockfd;\n    struct sockaddr_in serv_addr, cli_addr;\n    socklen_t clilen;\n    struct sigaction sa;\n\n    sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd < 0) {\n        perror(\"ERROR opening socket\");\n        exit(1);\n    }\n\n    memset((char *)&serv_addr, 0, sizeof(serv_addr));\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_addr.s_addr = INADDR_ANY;\n    serv_addr.sin_port = htons(PORT);\n\n    if (bind(sockfd, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        perror(\"ERROR on binding\");\n        close(sockfd);\n        exit(1);\n    }\n\n    listen(sockfd, BACKLOG);\n    clilen = sizeof(cli_addr);\n\n    sa.sa_handler = sigchld_handler;\n    sigemptyset(&sa.sa_mask);\n    sa.sa_flags = SA_RESTART;\n    if (sigaction(SIGCHLD, &sa, NULL) == -1) {\n        perror(\"sigaction\");\n        close(sockfd);\n        exit(1);\n    }\n\n    while (true) {\n        newsockfd = accept(sockfd, (struct sockaddr *)&cli_addr, &clilen);\n        if (newsockfd < 0) {\n            perror(\"ERROR on accept\");\n            continue;\n        }\n\n        pid_t pid = fork();\n        if (pid < 0) {\n            perror(\"ERROR on fork\");\n            close(newsockfd);\n            continue;\n        }\n\n        if (pid == 0) {\n            close(sockfd);\n            handle_client(newsockfd);\n        } else {\n            close(newsockfd);\n        }\n    }\n\n    close(sockfd);\n}",
      "#include <iostream>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n#include <signal.h>\n#include <cstring>\n\n#define PORT 9736\n\nvoid handle_client(int client_socket) {\n    char buffer;\n    read(client_socket, &buffer, 1);\n    sleep(1); // Simulate processing delay\n    buffer++;\n    write(client_socket, &buffer, 1);\n    close(client_socket);\n    exit(0);\n}\n\nvoid sigchld_handler(int s) {\n    while (waitpid(-1, NULL, WNOHANG) > 0);\n}\n\nvoid tcp_server_communication() {\n    int server_socket, client_socket;\n    struct sockaddr_in server_addr, client_addr;\n    socklen_t sin_size;\n    struct sigaction sa;\n\n    server_socket = socket(AF_INET, SOCK_STREAM, 0);\n    if (server_socket == -1) {\n        perror(\"socket\");\n        exit(1);\n    }\n\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(PORT);\n    server_addr.sin_addr.s_addr = INADDR_ANY;\n    memset(&(server_addr.sin_zero), '\\0', 8);\n\n    if (bind(server_socket, (struct sockaddr *)&server_addr, sizeof(struct sockaddr)) == -1) {\n        perror(\"bind\");\n        close(server_socket);\n        exit(1);\n    }\n\n    if (listen(server_socket, 10) == -1) {\n        perror(\"listen\");\n        close(server_socket);\n        exit(1);\n    }\n\n    sa.sa_handler = sigchld_handler;\n    sigemptyset(&sa.sa_mask);\n    sa.sa_flags = SA_RESTART;\n    if (sigaction(SIGCHLD, &sa, NULL) == -1) {\n        perror(\"sigaction\");\n        close(server_socket);\n        exit(1);\n    }\n\n    while (true) {\n        sin_size = sizeof(struct sockaddr_in);\n        client_socket = accept(server_socket, (struct sockaddr *)&client_addr, &sin_size);\n        if (client_socket == -1) {\n            perror(\"accept\");\n            continue;\n        }\n\n        if (!fork()) {\n            close(server_socket);\n            handle_client(client_socket);\n        }\n        close(client_socket);\n    }\n}\n\nint main() {\n    tcp_server_communication();\n    return 0;\n}",
      "#include <iostream>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n#include <signal.h>\n#include <cstring>\n\n#define PORT 9736\n\nvoid handle_client(int client_socket) {\n    char buffer;\n    read(client_socket, &buffer, 1);\n    sleep(1); // Simulate processing delay\n    buffer++;\n    write(client_socket, &buffer, 1);\n    close(client_socket);\n    exit(0);\n}\n\nvoid signal_handler(int signum) {\n    while (waitpid(-1, NULL, WNOHANG) > 0);\n}\n\nvoid tcp_server_communication() {\n    int server_socket, client_socket;\n    struct sockaddr_in server_addr, client_addr;\n    socklen_t client_len = sizeof(client_addr);\n\n    signal(SIGCHLD, signal_handler);\n\n    server_socket = socket(AF_INET, SOCK_STREAM, 0);\n    if (server_socket < 0) {\n        std::cerr << \"Error opening socket\" << std::endl;\n        exit(1);\n    }\n\n    memset(&server_addr, 0, sizeof(server_addr));\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_addr.s_addr = INADDR_ANY;\n    server_addr.sin_port = htons(PORT);\n\n    if (bind(server_socket, (struct sockaddr *) &server_addr, sizeof(server_addr)) < 0) {\n        std::cerr << \"Error binding socket\" << std::endl;\n        close(server_socket);\n        exit(1);\n    }\n\n    listen(server_socket, 5);\n\n    while (true) {\n        client_socket = accept(server_socket, (struct sockaddr *) &client_addr, &client_len);\n        if (client_socket < 0) {\n            std::cerr << \"Error accepting connection\" << std::endl;\n            continue;\n        }\n\n        pid_t pid = fork();\n        if (pid < 0) {\n            std::cerr << \"Error on fork\" << std::endl;\n            close(client_socket);\n            continue;\n        }\n\n        if (pid == 0) {\n            close(server_socket);\n            handle_client(client_socket);\n        } else {\n            close(client_socket);\n        }\n    }\n\n    close(server_socket);\n}"
    ],
    "match_count": 0,
    "pass@3": 0.0,
    "pass@5": 0.0
  },
  {
    "Task_id": 26,
    "Instruction": "Task Description: Implement a TCP server using UNIX domain sockets for inter-process communication that manages and provides access to statistics data. The server should handle multiple client connections concurrently, process different types of requests (get, reset, etc.), and maintain thread safety.\n\nClass Description: The Stats class implements a TCP server using UNIX domain sockets to manage and provide access to statistics data. It handles client connections, processes requests, and maintains thread safety for concurrent access to statistics.\n\nAttributes:\n- stats_socket_path_: std::string - Path to the UNIX domain socket file\n- sockfd_: int - File descriptor for the server socket\n- serv_addr_: sockaddr_un - Server address structure\n- stats_thread_: std::thread - Thread for running the socket server\n- statsThreadRunning_: std::atomic<bool> - Flag to control the server thread's execution\n- stats_mutex_: std::mutex - Mutex for protecting access to statistics data\n- thread_mutex_: std::mutex - Mutex for protecting thread count\n- thread_exited_: std::condition_variable - Condition variable for thread synchronization\n- thread_count_: int - Count of active threads\n- stats_: std::unordered_map<std::string, int> - Container for storing statistics data\n\nMethods:\n- Stats(const std::string& stats_socket_path) -> None - Constructor that initializes the socket server\n- ~Stats() -> None - Destructor that cleans up resources\n- get(const std::string& stats_socket_path) -> Stats& - Static method to get the singleton instance\n- get_for_unittest(const std::string& stats_socket_path) -> std::unique_ptr<Stats> - Static method to get an instance for unit testing\n- init(const std::string& stats_socket_path) -> bool - Static method to initialize the singleton\n- isInit() -> bool - Static method to check if the singleton is initialized\n- getAll() -> std::unordered_map<std::string, int> - Returns all statistics data\n- increment(const std::string& key, int val) -> int - Increments a statistic value\n- set(const std::string& key, int val) -> int - Sets a statistic value\n- reset() -> int - Resets all statistics\n- startSocket() -> bool - Starts the socket server\n- runSocket() -> void - Main server loop that accepts connections\n- processMsg(int sockfd) -> void - Processes a client message\n- isInitInternal() -> bool& - Internal static method for initialization status",
    "Canonical_solution": "#include <sys/socket.h>\n#include <sys/un.h>\n#include <unistd.h>\n#include <memory>\n#include <mutex>\n#include <string>\n#include <unordered_map>\n#include <json/value.h>\n\nnamespace Oomd {\n\nclass Stats {\npublic:\n  Stats(const std::string& stats_socket_path);\n  ~Stats();\n\n  static Stats& get(const std::string& stats_socket_path);\n  static std::unique_ptr<Stats> get_for_unittest(const std::string& stats_socket_path);\n  static bool init(const std::string& stats_socket_path);\n  static bool isInit();\n\n  std::unordered_map<std::string, int> getAll();\n  int increment(const std::string& key, int val);\n  int set(const std::string& key, int val);\n  int reset();\n\nprivate:\n  bool startSocket();\n  void runSocket();\n  void processMsg(int sockfd);\n  static bool& isInitInternal();\n\n  std::string stats_socket_path_;\n  int sockfd_{-1};\n  sockaddr_un serv_addr_{};\n  std::thread stats_thread_;\n  std::atomic<bool> statsThreadRunning_{true};\n  std::mutex stats_mutex_;\n  std::unordered_map<std::string, int> stats_;\n  std::mutex thread_mutex_;\n  std::condition_variable thread_exited_;\n  int thread_count_{0};\n};\n\nStats::Stats(const std::string& stats_socket_path)\n    : stats_socket_path_(stats_socket_path) {\n  if (!this->startSocket()) {\n    throw std::runtime_error(\"Socket thread failed to start\");\n  }\n}\n\nStats::~Stats() {\n  std::array<char, 64> err_buf = {};\n  statsThreadRunning_ = false;\n  std::unique_lock<std::mutex> lock(thread_mutex_);\n  if (!thread_exited_.wait_for(lock, std::chrono::seconds(5), [this] {\n        return this->thread_count_ == 0;\n      })) {\n    OCHECK(false);\n  }\n  lock.unlock();\n  if (stats_thread_.joinable()) {\n    stats_thread_.join();\n  }\n  if (::unlink(serv_addr_.sun_path) < 0) {\n    OLOG << \"Closing stats error: unlinking socket path: \"\n         << ::strerror_r(errno, err_buf.data(), err_buf.size());\n  }\n  if (::close(sockfd_) < 0) {\n    OLOG << \"Closing stats error: closing stats socket: \"\n         << ::strerror_r(errno, err_buf.data(), err_buf.size());\n  }\n}\n\nbool Stats::startSocket() {\n  std::array<char, 64> err_buf = {};\n\n  sockfd_ = ::socket(AF_UNIX, SOCK_STREAM, 0);\n  if (sockfd_ < 0) {\n    OLOG << \"Error creating socket: \"\n         << ::strerror_r(errno, err_buf.data(), err_buf.size() - 1);\n    return false;\n  }\n  ::memset(&serv_addr_, '\\0', sizeof(serv_addr_));\n  serv_addr_.sun_family = AF_UNIX;\n  ::strcpy(serv_addr_.sun_path, stats_socket_path_.c_str());\n  if (::unlink(serv_addr_.sun_path) < 0 && errno != ENOENT) {\n    OLOG << \"Pre-unlinking of socket path failed. \" << serv_addr_.sun_path\n         << \". Errno: \" << ::strerror_r(errno, err_buf.data(), err_buf.size());\n    return false;\n  }\n  if (::bind(sockfd_, (struct sockaddr*)&serv_addr_, sizeof(serv_addr_)) < 0) {\n    OLOG << \"Error binding stats collection socket: \"\n         << ::strerror_r(errno, err_buf.data(), err_buf.size());\n    return false;\n  }\n  if (::listen(sockfd_, 5) < 0) {\n    OLOG << \"Error listening at socket: \"\n         << ::strerror_r(errno, err_buf.data(), err_buf.size());\n    return false;\n  }\n  stats_thread_ = std::thread([this] { this->runSocket(); });\n  return true;\n}\n\nvoid Stats::runSocket() {\n  sockaddr_un cli_addr;\n  socklen_t clilen = sizeof(cli_addr);\n  std::array<char, 64> err_buf = {};\n  while (statsThreadRunning_) {\n    int sockfd = ::accept(sockfd_, (struct sockaddr*)&cli_addr, &clilen);\n    if (sockfd < 0) {\n      OLOG << \"Stats server error: accepting connection: \"\n           << ::strerror_r(errno, err_buf.data(), err_buf.size());\n      continue;\n    }\n    std::unique_lock<std::mutex> lock(thread_mutex_);\n    ++thread_count_;\n    std::thread msg_thread_ =\n        std::thread([this, sockfd] { this->processMsg(sockfd); });\n    msg_thread_.detach();\n    lock.unlock();\n    thread_exited_.notify_one();\n  }\n}\n\nvoid Stats::processMsg(int sockfd) {\n  std::array<char, 64> err_buf = {};\n  OOMD_SCOPE_EXIT {\n    if (::close(sockfd) < 0) {\n      OLOG << \"Stats server error: closing file descriptor: \"\n           << ::strerror_r(errno, err_buf.data(), err_buf.size());\n    }\n  };\n  char mode = 'a';\n  char byte_buf;\n  int num_read = 0;\n  for (; num_read < 32; num_read++) {\n    int res = ::read(sockfd, &byte_buf, 1);\n    if (res < 0) {\n      OLOG << \"Stats server error: reading from socket: \"\n           << ::strerror_r(errno, err_buf.data(), err_buf.size());\n      return;\n    } else if (res == 0) {\n      break;\n    }\n    if (byte_buf == '\\n' || byte_buf == '\\0') {\n      break;\n    }\n    if (num_read == 0) {\n      mode = byte_buf;\n    }\n  }\n\n  Json::Value root;\n  root[\"error\"] = 0;\n  Json::Value body(Json::objectValue);\n  switch (mode) {\n    case 'g':\n      for (auto const& pair : getAll()) {\n        body[pair.first] = pair.second;\n      }\n      break;\n    case 'r':\n      Stats::reset();\n      break;\n    case '0':\n      break;\n    default:\n      root[\"error\"] = 1;\n      OLOG << \"Stats server error: received unknown request: \" << mode;\n  }\n  root[\"body\"] = body;\n  std::string ret = root.toStyledString();\n  if (Util::writeFull(sockfd, ret.c_str(), strlen(ret.c_str())) < 0) {\n    OLOG << \"Stats server error: writing to socket: \"\n         << ::strerror_r(errno, err_buf.data(), err_buf.size());\n  }\n  std::unique_lock<std::mutex> lock(thread_mutex_);\n  thread_count_--;\n  lock.unlock();\n  thread_exited_.notify_one();\n}\n\n} // namespace Oomd",
    "Code_level": "Class-level",
    "FSMID_for_test": 148,
    "matched_results": [
      "#include <iostream>\n#include <string>\n#include <unordered_map>\n#include <thread>\n#include <atomic>\n#include <mutex>\n#include <condition_variable>\n#include <sys/socket.h>\n#include <sys/un.h>\n#include <unistd.h>\n\nclass Stats {\npublic:\n    Stats(const std::string& stats_socket_path)\n        : stats_socket_path_(stats_socket_path), sockfd_(-1), statsThreadRunning_(false), thread_count_(0) {\n        memset(&serv_addr_, 0, sizeof(serv_addr_));\n        serv_addr_.sun_family = AF_UNIX;\n        strncpy(serv_addr_.sun_path, stats_socket_path_.c_str(), sizeof(serv_addr_.sun_path) - 1);\n    }\n\n    ~Stats() {\n        if (sockfd_ != -1) {\n            close(sockfd_);\n            unlink(stats_socket_path_.c_str());\n        }\n        if (statsThreadRunning_) {\n            statsThreadRunning_ = false;\n            stats_thread_.join();\n        }\n    }\n\n    static Stats& get(const std::string& stats_socket_path) {\n        static Stats instance(stats_socket_path);\n        return instance;\n    }\n\n    static std::unique_ptr<Stats> get_for_unittest(const std::string& stats_socket_path) {\n        return std::make_unique<Stats>(stats_socket_path);\n    }\n\n    static bool init(const std::string& stats_socket_path) {\n        Stats& instance = get(stats_socket_path);\n        return instance.startSocket();\n    }\n\n    static bool isInit() {\n        return get(\"\").isInitInternal();\n    }\n\n    std::unordered_map<std::string, int> getAll() {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        return stats_;\n    }\n\n    int increment(const std::string& key, int val) {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        stats_[key] += val;\n        return stats_[key];\n    }\n\n    int set(const std::string& key, int val) {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        stats_[key] = val;\n        return stats_[key];\n    }\n\n    int reset() {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        stats_.clear();\n        return 0;\n    }\n\n    bool startSocket() {\n        sockfd_ = socket(AF_UNIX, SOCK_STREAM, 0);\n        if (sockfd_ < 0) {\n            std::cerr << \"Failed to create socket\" << std::endl;\n            return false;\n        }\n\n        unlink(stats_socket_path_.c_str());\n\n        if (bind(sockfd_, (struct sockaddr*)&serv_addr_, sizeof(serv_addr_)) < 0) {\n            std::cerr << \"Failed to bind socket\" << std::endl;\n            close(sockfd_);\n            return false;\n        }\n\n        if (listen(sockfd_, 5) < 0) {\n            std::cerr << \"Failed to listen on socket\" << std::endl;\n            close(sockfd_);\n            return false;\n        }\n\n        statsThreadRunning_ = true;\n        stats_thread_ = std::thread(&Stats::runSocket, this);\n        return true;\n    }\n\n    void runSocket() {\n        while (statsThreadRunning_) {\n            int client_sock = accept(sockfd_, nullptr, nullptr);\n            if (client_sock < 0) {\n                if (statsThreadRunning_) {\n                    std::cerr << \"Failed to accept connection\" << std::endl;\n                }\n                continue;\n            }\n\n            {\n                std::lock_guard<std::mutex> lock(thread_mutex_);\n                thread_count_++;\n            }\n\n            std::thread(&Stats::processMsg, this, client_sock).detach();\n        }\n    }\n\n    void processMsg(int sockfd) {\n        char buffer[256];\n        int n = read(sockfd, buffer, 255);\n        if (n < 0) {\n            std::cerr << \"Failed to read from socket\" << std::endl;\n            close(sockfd);\n            return;\n        }\n\n        buffer[n] = '\\0';\n        std::string msg(buffer);\n\n        if (msg == \"get\") {\n            std::unordered_map<std::string, int> stats = getAll();\n            std::string response;\n            for (const auto& [key, value] : stats) {\n                response += key + \": \" + std::to_string(value) + \"\\n\";\n            }\n            write(sockfd, response.c_str(), response.size());\n        } else if (msg.find(\"increment\") == 0) {\n            size_t pos = msg.find(\" \");\n            std::string key = msg.substr(pos + 1, msg.find(\" \", pos + 1) - pos - 1);\n            int val = std::stoi(msg.substr(msg.find(\" \", pos + 1) + 1));\n            increment(key, val);\n            write(sockfd, \"OK\\n\", 3);\n        } else if (msg.find(\"set\") == 0) {\n            size_t pos = msg.find(\" \");\n            std::string key = msg.substr(pos + 1, msg.find(\" \", pos + 1) - pos - 1);\n            int val = std::stoi(msg.substr(msg.find(\" \", pos + 1) + 1));\n            set(key, val);\n            write(sockfd, \"OK\\n\", 3);\n        } else if (msg == \"reset\") {\n            reset();\n            write(sockfd, \"OK\\n\", 3);\n        } else {\n            write(sockfd, \"Unknown command\\n\", 16);\n        }\n\n        close(sockfd);\n\n        {\n            std::lock_guard<std::mutex> lock(thread_mutex_);\n            thread_count_--;\n            if (thread_count_ == 0) {\n                thread_exited_.notify_all();\n            }\n        }\n    }\n\n    bool& isInitInternal() {\n        static bool initialized = false;\n        return initialized;\n    }\n\nprivate:\n    std::string stats_socket_path_;\n    int sockfd_;\n    sockaddr_un serv_addr_;\n    std::thread stats_thread_;\n    std::atomic<bool> statsThreadRunning_;\n    std::mutex stats_mutex_;\n    std::mutex thread_mutex_;\n    std::condition_variable thread_exited_;\n    int thread_count_;\n    std::unordered_map<std::string, int> stats_;\n};",
      "#include <iostream>\n#include <string>\n#include <unordered_map>\n#include <thread>\n#include <mutex>\n#include <condition_variable>\n#include <atomic>\n#include <sys/socket.h>\n#include <sys/un.h>\n#include <unistd.h>\n#include <memory>\n\nclass Stats {\npublic:\n    Stats(const std::string& stats_socket_path) \n        : stats_socket_path_(stats_socket_path), sockfd_(-1), statsThreadRunning_(false), thread_count_(0) {\n        memset(&serv_addr_, 0, sizeof(serv_addr_));\n    }\n\n    ~Stats() {\n        if (sockfd_ != -1) {\n            close(sockfd_);\n        }\n        unlink(stats_socket_path_.c_str());\n    }\n\n    static Stats& get(const std::string& stats_socket_path) {\n        static Stats instance(stats_socket_path);\n        return instance;\n    }\n\n    static std::unique_ptr<Stats> get_for_unittest(const std::string& stats_socket_path) {\n        return std::make_unique<Stats>(stats_socket_path);\n    }\n\n    static bool init(const std::string& stats_socket_path) {\n        if (!isInitInternal()) {\n            get(stats_socket_path);\n            isInitInternal() = true;\n            return true;\n        }\n        return false;\n    }\n\n    static bool isInit() {\n        return isInitInternal();\n    }\n\n    std::unordered_map<std::string, int> getAll() {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        return stats_;\n    }\n\n    int increment(const std::string& key, int val) {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        stats_[key] += val;\n        return stats_[key];\n    }\n\n    int set(const std::string& key, int val) {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        stats_[key] = val;\n        return stats_[key];\n    }\n\n    int reset() {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        stats_.clear();\n        return 0;\n    }\n\n    bool startSocket() {\n        sockfd_ = socket(AF_UNIX, SOCK_STREAM, 0);\n        if (sockfd_ < 0) {\n            return false;\n        }\n\n        serv_addr_.sun_family = AF_UNIX;\n        strncpy(serv_addr_.sun_path, stats_socket_path_.c_str(), sizeof(serv_addr_.sun_path) - 1);\n\n        unlink(stats_socket_path_.c_str());\n        if (bind(sockfd_, (struct sockaddr*)&serv_addr_, sizeof(serv_addr_)) < 0) {\n            return false;\n        }\n\n        if (listen(sockfd_, 5) < 0) {\n            return false;\n        }\n\n        statsThreadRunning_ = true;\n        stats_thread_ = std::thread(&Stats::runSocket, this);\n        return true;\n    }\n\n    void runSocket() {\n        while (statsThreadRunning_) {\n            int newsockfd = accept(sockfd_, nullptr, nullptr);\n            if (newsockfd < 0) {\n                continue;\n            }\n\n            std::thread(&Stats::processMsg, this, newsockfd).detach();\n        }\n    }\n\n    void processMsg(int sockfd) {\n        char buffer[256];\n        memset(buffer, 0, 256);\n        int n = read(sockfd, buffer, 255);\n        if (n < 0) {\n            close(sockfd);\n            return;\n        }\n\n        std::string request(buffer);\n        std::string response;\n\n        if (request == \"get\") {\n            auto stats = getAll();\n            for (const auto& stat : stats) {\n                response += stat.first + \": \" + std::to_string(stat.second) + \"\\n\";\n            }\n        } else if (request.find(\"increment\") == 0) {\n            auto pos = request.find(\" \");\n            auto key = request.substr(pos + 1);\n            increment(key, 1);\n            response = \"incremented \" + key;\n        } else if (request.find(\"set\") == 0) {\n            auto pos = request.find(\" \");\n            auto key_val = request.substr(pos + 1);\n            auto key_pos = key_val.find(\" \");\n            auto key = key_val.substr(0, key_pos);\n            auto val = std::stoi(key_val.substr(key_pos + 1));\n            set(key, val);\n            response = \"set \" + key + \" to \" + std::to_string(val);\n        } else if (request == \"reset\") {\n            reset();\n            response = \"reset all stats\";\n        }\n\n        n = write(sockfd, response.c_str(), response.length());\n        if (n < 0) {\n            close(sockfd);\n            return;\n        }\n\n        close(sockfd);\n    }\n\nprivate:\n    static bool& isInitInternal() {\n        static bool initialized = false;\n        return initialized;\n    }\n\n    std::string stats_socket_path_;\n    int sockfd_;\n    sockaddr_un serv_addr_;\n    std::thread stats_thread_;\n    std::atomic<bool> statsThreadRunning_;\n    std::mutex stats_mutex_;\n    std::mutex thread_mutex_;\n    std::condition_variable thread_exited_;\n    int thread_count_;\n    std::unordered_map<std::string, int> stats_;\n};",
      "#include <iostream>\n#include <string>\n#include <unordered_map>\n#include <thread>\n#include <mutex>\n#include <condition_variable>\n#include <atomic>\n#include <sys/socket.h>\n#include <sys/un.h>\n#include <unistd.h>\n\nclass Stats {\npublic:\n    Stats(const std::string& stats_socket_path)\n        : stats_socket_path_(stats_socket_path), sockfd_(-1), statsThreadRunning_(false), thread_count_(0) {\n        memset(&serv_addr_, 0, sizeof(serv_addr_));\n        serv_addr_.sun_family = AF_UNIX;\n        strncpy(serv_addr_.sun_path, stats_socket_path.c_str(), sizeof(serv_addr_.sun_path) - 1);\n    }\n\n    ~Stats() {\n        if (statsThreadRunning_) {\n            statsThreadRunning_ = false;\n            if (stats_thread_.joinable()) {\n                stats_thread_.join();\n            }\n        }\n        if (sockfd_ != -1) {\n            close(sockfd_);\n        }\n        unlink(stats_socket_path_.c_str());\n    }\n\n    static Stats& get(const std::string& stats_socket_path) {\n        static Stats instance(stats_socket_path);\n        return instance;\n    }\n\n    static std::unique_ptr<Stats> get_for_unittest(const std::string& stats_socket_path) {\n        return std::make_unique<Stats>(stats_socket_path);\n    }\n\n    static bool init(const std::string& stats_socket_path) {\n        if (!isInit()) {\n            get(stats_socket_path);\n            isInitInternal() = true;\n            return true;\n        }\n        return false;\n    }\n\n    static bool isInit() {\n        return isInitInternal();\n    }\n\n    std::unordered_map<std::string, int> getAll() {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        return stats_;\n    }\n\n    int increment(const std::string& key, int val) {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        stats_[key] += val;\n        return stats_[key];\n    }\n\n    int set(const std::string& key, int val) {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        stats_[key] = val;\n        return stats_[key];\n    }\n\n    int reset() {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        stats_.clear();\n        return 0;\n    }\n\n    bool startSocket() {\n        sockfd_ = socket(AF_UNIX, SOCK_STREAM, 0);\n        if (sockfd_ < 0) {\n            return false;\n        }\n\n        unlink(stats_socket_path_.c_str());\n        if (bind(sockfd_, (struct sockaddr*)&serv_addr_, sizeof(serv_addr_)) < 0) {\n            close(sockfd_);\n            return false;\n        }\n\n        if (listen(sockfd_, 5) < 0) {\n            close(sockfd_);\n            return false;\n        }\n\n        statsThreadRunning_ = true;\n        stats_thread_ = std::thread(&Stats::runSocket, this);\n        return true;\n    }\n\n    void runSocket() {\n        while (statsThreadRunning_) {\n            int newsockfd = accept(sockfd_, nullptr, nullptr);\n            if (newsockfd < 0) {\n                continue;\n            }\n\n            std::thread(&Stats::processMsg, this, newsockfd).detach();\n        }\n    }\n\n    void processMsg(int sockfd) {\n        char buffer[256];\n        memset(buffer, 0, 256);\n        int n = read(sockfd, buffer, 255);\n        if (n < 0) {\n            close(sockfd);\n            return;\n        }\n\n        std::string request(buffer);\n        std::string response;\n\n        if (request == \"get\") {\n            auto stats = getAll();\n            for (const auto& stat : stats) {\n                response += stat.first + \": \" + std::to_string(stat.second) + \"\\n\";\n            }\n        } else if (request == \"reset\") {\n            reset();\n            response = \"Statistics reset\\n\";\n        } else if (request.substr(0, 3) == \"inc\") {\n            auto pos = request.find(' ');\n            auto key = request.substr(4, pos - 4);\n            auto val = std::stoi(request.substr(pos + 1));\n            increment(key, val);\n            response = \"Incremented \" + key + \"\\n\";\n        } else if (request.substr(0, 3) == \"set\") {\n            auto pos = request.find(' ');\n            auto key = request.substr(4, pos - 4);\n            auto val = std::stoi(request.substr(pos + 1));\n            set(key, val);\n            response = \"Set \" + key + \"\\n\";\n        }\n\n        write(sockfd, response.c_str(), response.size());\n        close(sockfd);\n    }\n\nprivate:\n    static bool& isInitInternal() {\n        static bool initialized = false;\n        return initialized;\n    }\n\n    std::string stats_socket_path_;\n    int sockfd_;\n    struct sockaddr_un serv_addr_;\n    std::thread stats_thread_;\n    std::atomic<bool> statsThreadRunning_;\n    std::mutex stats_mutex_;\n    std::mutex thread_mutex_;\n    std::condition_variable thread_exited_;\n    int thread_count_;\n    std::unordered_map<std::string, int> stats_;\n};",
      "#include <iostream>\n#include <string>\n#include <unordered_map>\n#include <thread>\n#include <mutex>\n#include <atomic>\n#include <condition_variable>\n#include <sys/socket.h>\n#include <sys/un.h>\n#include <unistd.h>\n\nclass Stats {\npublic:\n    Stats(const std::string& stats_socket_path)\n        : stats_socket_path_(stats_socket_path), sockfd_(-1), statsThreadRunning_(false), thread_count_(0) {\n        memset(&serv_addr_, 0, sizeof(serv_addr_));\n        serv_addr_.sun_family = AF_UNIX;\n        strncpy(serv_addr_.sun_path, stats_socket_path.c_str(), sizeof(serv_addr_.sun_path) - 1);\n    }\n\n    ~Stats() {\n        if (sockfd_ != -1) {\n            close(sockfd_);\n        }\n        unlink(stats_socket_path_.c_str());\n    }\n\n    static Stats& get(const std::string& stats_socket_path) {\n        static Stats instance(stats_socket_path);\n        return instance;\n    }\n\n    static std::unique_ptr<Stats> get_for_unittest(const std::string& stats_socket_path) {\n        return std::make_unique<Stats>(stats_socket_path);\n    }\n\n    static bool init(const std::string& stats_socket_path) {\n        Stats& instance = get(stats_socket_path);\n        return instance.startSocket();\n    }\n\n    static bool isInit() {\n        return get(\"\").isInitInternal();\n    }\n\n    std::unordered_map<std::string, int> getAll() {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        return stats_;\n    }\n\n    int increment(const std::string& key, int val) {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        stats_[key] += val;\n        return stats_[key];\n    }\n\n    int set(const std::string& key, int val) {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        stats_[key] = val;\n        return stats_[key];\n    }\n\n    int reset() {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        stats_.clear();\n        return 0;\n    }\n\n    bool startSocket() {\n        sockfd_ = socket(AF_UNIX, SOCK_STREAM, 0);\n        if (sockfd_ < 0) {\n            return false;\n        }\n\n        unlink(stats_socket_path_.c_str());\n        if (bind(sockfd_, (struct sockaddr*)&serv_addr_, sizeof(serv_addr_)) < 0) {\n            close(sockfd_);\n            return false;\n        }\n\n        if (listen(sockfd_, 5) < 0) {\n            close(sockfd_);\n            return false;\n        }\n\n        statsThreadRunning_ = true;\n        stats_thread_ = std::thread(&Stats::runSocket, this);\n        return true;\n    }\n\n    void runSocket() {\n        while (statsThreadRunning_) {\n            int client_sockfd = accept(sockfd_, nullptr, nullptr);\n            if (client_sockfd < 0) {\n                continue;\n            }\n\n            std::thread(&Stats::processMsg, this, client_sockfd).detach();\n        }\n    }\n\n    void processMsg(int sockfd) {\n        std::lock_guard<std::mutex> lock(thread_mutex_);\n        thread_count_++;\n\n        char buffer[256];\n        memset(buffer, 0, 256);\n        read(sockfd, buffer, 255);\n\n        std::string request(buffer);\n        std::string response;\n\n        if (request == \"get\") {\n            auto stats = getAll();\n            for (const auto& stat : stats) {\n                response += stat.first + \": \" + std::to_string(stat.second) + \"\\n\";\n            }\n        } else if (request.find(\"increment\") == 0) {\n            auto key_val = request.substr(10);\n            auto pos = key_val.find(\" \");\n            std::string key = key_val.substr(0, pos);\n            int val = std::stoi(key_val.substr(pos + 1));\n            increment(key, val);\n            response = \"incremented \" + key + \" by \" + std::to_string(val) + \"\\n\";\n        } else if (request.find(\"set\") == 0) {\n            auto key_val = request.substr(4);\n            auto pos = key_val.find(\" \");\n            std::string key = key_val.substr(0, pos);\n            int val = std::stoi(key_val.substr(pos + 1));\n            set(key, val);\n            response = \"set \" + key + \" to \" + std::to_string(val) + \"\\n\";\n        } else if (request == \"reset\") {\n            reset();\n            response = \"reset all stats\\n\";\n        }\n\n        write(sockfd, response.c_str(), response.size());\n        close(sockfd);\n\n        thread_count_--;\n        thread_exited_.notify_all();\n    }\n\n    bool& isInitInternal() {\n        static bool initialized = false;\n        return initialized;\n    }\n\nprivate:\n    std::string stats_socket_path_;\n    int sockfd_;\n    struct sockaddr_un serv_addr_;\n    std::thread stats_thread_;\n    std::atomic<bool> statsThreadRunning_;\n    std::mutex stats_mutex_;\n    std::mutex thread_mutex_;\n    std::condition_variable thread_exited_;\n    int thread_count_;\n    std::unordered_map<std::string, int> stats_;\n};",
      "#include <iostream>\n#include <string>\n#include <unordered_map>\n#include <thread>\n#include <mutex>\n#include <condition_variable>\n#include <atomic>\n#include <sys/socket.h>\n#include <sys/un.h>\n#include <unistd.h>\n\nclass Stats {\npublic:\n    Stats(const std::string& stats_socket_path)\n        : stats_socket_path_(stats_socket_path), sockfd_(-1), statsThreadRunning_(false), thread_count_(0) {\n        memset(&serv_addr_, 0, sizeof(serv_addr_));\n        serv_addr_.sun_family = AF_UNIX;\n        strncpy(serv_addr_.sun_path, stats_socket_path_.c_str(), sizeof(serv_addr_.sun_path) - 1);\n    }\n\n    ~Stats() {\n        if (statsThreadRunning_) {\n            statsThreadRunning_ = false;\n            if (stats_thread_.joinable()) {\n                stats_thread_.join();\n            }\n        }\n        if (sockfd_ != -1) {\n            close(sockfd_);\n        }\n        unlink(stats_socket_path_.c_str());\n    }\n\n    static Stats& get(const std::string& stats_socket_path) {\n        static Stats instance(stats_socket_path);\n        return instance;\n    }\n\n    static std::unique_ptr<Stats> get_for_unittest(const std::string& stats_socket_path) {\n        return std::make_unique<Stats>(stats_socket_path);\n    }\n\n    static bool init(const std::string& stats_socket_path) {\n        if (!isInit()) {\n            get(stats_socket_path);\n            isInitInternal() = true;\n            return true;\n        }\n        return false;\n    }\n\n    static bool isInit() {\n        return isInitInternal();\n    }\n\n    std::unordered_map<std::string, int> getAll() {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        return stats_;\n    }\n\n    int increment(const std::string& key, int val) {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        stats_[key] += val;\n        return stats_[key];\n    }\n\n    int set(const std::string& key, int val) {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        stats_[key] = val;\n        return stats_[key];\n    }\n\n    int reset() {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        stats_.clear();\n        return 0;\n    }\n\n    bool startSocket() {\n        sockfd_ = socket(AF_UNIX, SOCK_STREAM, 0);\n        if (sockfd_ < 0) {\n            std::cerr << \"Error opening socket\" << std::endl;\n            return false;\n        }\n\n        unlink(stats_socket_path_.c_str());\n        if (bind(sockfd_, (struct sockaddr*)&serv_addr_, sizeof(serv_addr_)) < 0) {\n            std::cerr << \"Error binding socket\" << std::endl;\n            return false;\n        }\n\n        listen(sockfd_, 5);\n        statsThreadRunning_ = true;\n        stats_thread_ = std::thread(&Stats::runSocket, this);\n        return true;\n    }\n\n    void runSocket() {\n        while (statsThreadRunning_) {\n            int newsockfd = accept(sockfd_, nullptr, nullptr);\n            if (newsockfd < 0) {\n                if (statsThreadRunning_) {\n                    std::cerr << \"Error on accept\" << std::endl;\n                }\n                continue;\n            }\n\n            {\n                std::lock_guard<std::mutex> lock(thread_mutex_);\n                thread_count_++;\n            }\n\n            std::thread(&Stats::processMsg, this, newsockfd).detach();\n        }\n    }\n\n    void processMsg(int sockfd) {\n        char buffer[256];\n        memset(buffer, 0, 256);\n        int n = read(sockfd, buffer, 255);\n        if (n < 0) {\n            std::cerr << \"Error reading from socket\" << std::endl;\n            close(sockfd);\n            return;\n        }\n\n        std::string request(buffer);\n        std::string response;\n\n        if (request == \"get\") {\n            auto stats = getAll();\n            for (const auto& stat : stats) {\n                response += stat.first + \": \" + std::to_string(stat.second) + \"\\n\";\n            }\n        } else if (request.find(\"increment\") == 0) {\n            auto pos = request.find(' ');\n            auto key = request.substr(pos + 1);\n            increment(key, 1);\n            response = \"Incremented \" + key;\n        } else if (request.find(\"set\") == 0) {\n            auto pos = request.find(' ');\n            auto key_val = request.substr(pos + 1);\n            auto sep = key_val.find(' ');\n            auto key = key_val.substr(0, sep);\n            auto val = std::stoi(key_val.substr(sep + 1));\n            set(key, val);\n            response = \"Set \" + key + \" to \" + std::to_string(val);\n        } else if (request == \"reset\") {\n            reset();\n            response = \"Reset all stats\";\n        } else {\n            response = \"Unknown command\";\n        }\n\n        n = write(sockfd, response.c_str(), response.length());\n        if (n < 0) {\n            std::cerr << \"Error writing to socket\" << std::endl;\n        }\n\n        close(sockfd);\n\n        {\n            std::lock_guard<std::mutex> lock(thread_mutex_);\n            thread_count_--;\n            if (thread_count_ == 0) {\n                thread_exited_.notify_all();\n            }\n        }\n    }\n\nprivate:\n    static bool& isInitInternal() {\n        static bool initialized = false;\n        return initialized;\n    }\n\n    std::string stats_socket_path_;\n    int sockfd_;\n    struct sockaddr_un serv_addr_;\n    std::thread stats_thread_;\n    std::atomic<bool> statsThreadRunning_;\n    std::mutex stats_mutex_;\n    std::mutex thread_mutex_;\n    std::condition_variable thread_exited_;\n    int thread_count_;\n    std::unordered_map<std::string, int> stats_;\n};",
      "#include <iostream>\n#include <string>\n#include <unordered_map>\n#include <thread>\n#include <mutex>\n#include <atomic>\n#include <condition_variable>\n#include <sys/socket.h>\n#include <sys/un.h>\n#include <unistd.h>\n\nclass Stats {\npublic:\n    Stats(const std::string& stats_socket_path)\n        : stats_socket_path_(stats_socket_path), sockfd_(-1), statsThreadRunning_(false), thread_count_(0) {}\n\n    ~Stats() {\n        if (sockfd_ != -1) {\n            close(sockfd_);\n        }\n        unlink(stats_socket_path_.c_str());\n    }\n\n    static Stats& get(const std::string& stats_socket_path) {\n        static Stats instance(stats_socket_path);\n        return instance;\n    }\n\n    static std::unique_ptr<Stats> get_for_unittest(const std::string& stats_socket_path) {\n        return std::make_unique<Stats>(stats_socket_path);\n    }\n\n    static bool init(const std::string& stats_socket_path) {\n        Stats& instance = get(stats_socket_path);\n        return instance.startSocket();\n    }\n\n    static bool isInit() {\n        return isInitInternal();\n    }\n\n    std::unordered_map<std::string, int> getAll() {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        return stats_;\n    }\n\n    int increment(const std::string& key, int val) {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        stats_[key] += val;\n        return stats_[key];\n    }\n\n    int set(const std::string& key, int val) {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        stats_[key] = val;\n        return stats_[key];\n    }\n\n    int reset() {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        stats_.clear();\n        return 0;\n    }\n\n    bool startSocket() {\n        sockfd_ = socket(AF_UNIX, SOCK_STREAM, 0);\n        if (sockfd_ < 0) {\n            return false;\n        }\n\n        memset(&serv_addr_, 0, sizeof(serv_addr_));\n        serv_addr_.sun_family = AF_UNIX;\n        strncpy(serv_addr_.sun_path, stats_socket_path_.c_str(), sizeof(serv_addr_.sun_path) - 1);\n\n        unlink(stats_socket_path_.c_str());\n        if (bind(sockfd_, (struct sockaddr*)&serv_addr_, sizeof(serv_addr_)) < 0) {\n            close(sockfd_);\n            return false;\n        }\n\n        if (listen(sockfd_, 5) < 0) {\n            close(sockfd_);\n            return false;\n        }\n\n        statsThreadRunning_ = true;\n        stats_thread_ = std::thread(&Stats::runSocket, this);\n        return true;\n    }\n\n    void runSocket() {\n        while (statsThreadRunning_) {\n            int client_sockfd = accept(sockfd_, nullptr, nullptr);\n            if (client_sockfd >= 0) {\n                std::thread(&Stats::processMsg, this, client_sockfd).detach();\n            }\n        }\n    }\n\n    void processMsg(int sockfd) {\n        char buffer[256];\n        int n = read(sockfd, buffer, 255);\n        if (n > 0) {\n            buffer[n] = '\\0';\n            std::string msg(buffer);\n            std::string response;\n\n            if (msg == \"get\") {\n                auto stats = getAll();\n                for (const auto& [key, value] : stats) {\n                    response += key + \": \" + std::to_string(value) + \"\\n\";\n                }\n            } else if (msg == \"reset\") {\n                reset();\n                response = \"reset done\\n\";\n            } else {\n                size_t pos = msg.find(' ');\n                if (pos != std::string::npos) {\n                    std::string cmd = msg.substr(0, pos);\n                    std::string key = msg.substr(pos + 1);\n                    if (cmd == \"increment\") {\n                        increment(key, 1);\n                        response = \"increment done\\n\";\n                    } else if (cmd == \"set\") {\n                        set(key, std::stoi(key));\n                        response = \"set done\\n\";\n                    }\n                }\n            }\n\n            write(sockfd, response.c_str(), response.size());\n        }\n        close(sockfd);\n    }\n\n    static bool& isInitInternal() {\n        static bool initialized = false;\n        return initialized;\n    }\n\nprivate:\n    std::string stats_socket_path_;\n    int sockfd_;\n    sockaddr_un serv_addr_;\n    std::thread stats_thread_;\n    std::atomic<bool> statsThreadRunning_;\n    std::mutex stats_mutex_;\n    std::mutex thread_mutex_;\n    std::condition_variable thread_exited_;\n    int thread_count_;\n    std::unordered_map<std::string, int> stats_;\n};",
      "#include <iostream>\n#include <string>\n#include <thread>\n#include <atomic>\n#include <mutex>\n#include <condition_variable>\n#include <unordered_map>\n#include <sys/socket.h>\n#include <sys/un.h>\n#include <unistd.h>\n\nclass Stats {\npublic:\n    Stats(const std::string& stats_socket_path);\n    ~Stats();\n    static Stats& get(const std::string& stats_socket_path);\n    static std::unique_ptr<Stats> get_for_unittest(const std::string& stats_socket_path);\n    static bool init(const std::string& stats_socket_path);\n    static bool isInit();\n    std::unordered_map<std::string, int> getAll();\n    int increment(const std::string& key, int val);\n    int set(const std::string& key, int val);\n    int reset();\n    bool startSocket();\n    void runSocket();\n    void processMsg(int sockfd);\n\nprivate:\n    static bool& isInitInternal();\n    std::string stats_socket_path_;\n    int sockfd_;\n    sockaddr_un serv_addr_;\n    std::thread stats_thread_;\n    std::atomic<bool> statsThreadRunning_;\n    std::mutex stats_mutex_;\n    std::mutex thread_mutex_;\n    std::condition_variable thread_exited_;\n    int thread_count_;\n    std::unordered_map<std::string, int> stats_;\n};\n\nStats::Stats(const std::string& stats_socket_path) : stats_socket_path_(stats_socket_path), sockfd_(-1), statsThreadRunning_(false), thread_count_(0) {\n    memset(&serv_addr_, 0, sizeof(serv_addr_));\n    serv_addr_.sun_family = AF_UNIX;\n    strncpy(serv_addr_.sun_path, stats_socket_path.c_str(), sizeof(serv_addr_.sun_path) - 1);\n}\n\nStats::~Stats() {\n    statsThreadRunning_ = false;\n    if (stats_thread_.joinable()) {\n        stats_thread_.join();\n    }\n    if (sockfd_ != -1) {\n        close(sockfd_);\n    }\n    unlink(stats_socket_path_.c_str());\n}\n\nStats& Stats::get(const std::string& stats_socket_path) {\n    static Stats instance(stats_socket_path);\n    return instance;\n}\n\nstd::unique_ptr<Stats> Stats::get_for_unittest(const std::string& stats_socket_path) {\n    return std::make_unique<Stats>(stats_socket_path);\n}\n\nbool Stats::init(const std::string& stats_socket_path) {\n    if (!isInit()) {\n        get(stats_socket_path);\n        isInitInternal() = true;\n        return true;\n    }\n    return false;\n}\n\nbool Stats::isInit() {\n    return isInitInternal();\n}\n\nstd::unordered_map<std::string, int> Stats::getAll() {\n    std::lock_guard<std::mutex> lock(stats_mutex_);\n    return stats_;\n}\n\nint Stats::increment(const std::string& key, int val) {\n    std::lock_guard<std::mutex> lock(stats_mutex_);\n    stats_[key] += val;\n    return stats_[key];\n}\n\nint Stats::set(const std::string& key, int val) {\n    std::lock_guard<std::mutex> lock(stats_mutex_);\n    stats_[key] = val;\n    return stats_[key];\n}\n\nint Stats::reset() {\n    std::lock_guard<std::mutex> lock(stats_mutex_);\n    stats_.clear();\n    return 0;\n}\n\nbool Stats::startSocket() {\n    sockfd_ = socket(AF_UNIX, SOCK_STREAM, 0);\n    if (sockfd_ < 0) {\n        return false;\n    }\n    unlink(stats_socket_path_.c_str());\n    if (bind(sockfd_, (struct sockaddr*)&serv_addr_, sizeof(serv_addr_)) < 0) {\n        close(sockfd_);\n        return false;\n    }\n    if (listen(sockfd_, 5) < 0) {\n        close(sockfd_);\n        return false;\n    }\n    statsThreadRunning_ = true;\n    stats_thread_ = std::thread(&Stats::runSocket, this);\n    return true;\n}\n\nvoid Stats::runSocket() {\n    while (statsThreadRunning_) {\n        int client_sock = accept(sockfd_, nullptr, nullptr);\n        if (client_sock >= 0) {\n            std::thread(&Stats::processMsg, this, client_sock).detach();\n        }\n    }\n}\n\nvoid Stats::processMsg(int sockfd) {\n    char buffer[256];\n    int n = read(sockfd, buffer, 255);\n    if (n > 0) {\n        buffer[n] = '\\0';\n        std::string msg(buffer);\n        if (msg == \"get\") {\n            std::lock_guard<std::mutex> lock(stats_mutex_);\n            std::string response;\n            for (const auto& stat : stats_) {\n                response += stat.first + \": \" + std::to_string(stat.second) + \"\\n\";\n            }\n            write(sockfd, response.c_str(), response.size());\n        } else if (msg == \"reset\") {\n            reset();\n            write(sockfd, \"reset done\\n\", 11);\n        } else {\n            size_t pos = msg.find(' ');\n            if (pos != std::string::npos) {\n                std::string cmd = msg.substr(0, pos);\n                std::string key = msg.substr(pos + 1);\n                if (cmd == \"increment\") {\n                    increment(key, 1);\n                    write(sockfd, \"increment done\\n\", 15);\n                } else if (cmd == \"set\") {\n                    set(key, 1);\n                    write(sockfd, \"set done\\n\", 9);\n                }\n            }\n        }\n    }\n    close(sockfd);\n}\n\nbool& Stats::isInitInternal() {\n    static bool initialized = false;\n    return initialized;\n}",
      "#include <iostream>\n#include <string>\n#include <unordered_map>\n#include <thread>\n#include <atomic>\n#include <mutex>\n#include <condition_variable>\n#include <sys/socket.h>\n#include <sys/un.h>\n#include <unistd.h>\n\nclass Stats {\npublic:\n    Stats(const std::string& stats_socket_path) \n        : stats_socket_path_(stats_socket_path), sockfd_(-1), statsThreadRunning_(false), thread_count_(0) {\n        memset(&serv_addr_, 0, sizeof(serv_addr_));\n        serv_addr_.sun_family = AF_UNIX;\n        strncpy(serv_addr_.sun_path, stats_socket_path_.c_str(), sizeof(serv_addr_.sun_path) - 1);\n    }\n\n    ~Stats() {\n        if (sockfd_ != -1) {\n            close(sockfd_);\n            unlink(stats_socket_path_.c_str());\n        }\n        if (stats_thread_.joinable()) {\n            statsThreadRunning_ = false;\n            stats_thread_.join();\n        }\n    }\n\n    static Stats& get(const std::string& stats_socket_path) {\n        static Stats instance(stats_socket_path);\n        return instance;\n    }\n\n    static std::unique_ptr<Stats> get_for_unittest(const std::string& stats_socket_path) {\n        return std::make_unique<Stats>(stats_socket_path);\n    }\n\n    static bool init(const std::string& stats_socket_path) {\n        Stats& instance = get(stats_socket_path);\n        return instance.startSocket();\n    }\n\n    static bool isInit() {\n        return isInitInternal();\n    }\n\n    std::unordered_map<std::string, int> getAll() {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        return stats_;\n    }\n\n    int increment(const std::string& key, int val) {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        stats_[key] += val;\n        return stats_[key];\n    }\n\n    int set(const std::string& key, int val) {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        stats_[key] = val;\n        return stats_[key];\n    }\n\n    int reset() {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        stats_.clear();\n        return 0;\n    }\n\n    bool startSocket() {\n        sockfd_ = socket(AF_UNIX, SOCK_STREAM, 0);\n        if (sockfd_ < 0) {\n            std::cerr << \"Failed to create socket\" << std::endl;\n            return false;\n        }\n\n        unlink(stats_socket_path_.c_str());\n        if (bind(sockfd_, (struct sockaddr*)&serv_addr_, sizeof(serv_addr_)) < 0) {\n            std::cerr << \"Failed to bind socket\" << std::endl;\n            close(sockfd_);\n            return false;\n        }\n\n        if (listen(sockfd_, 5) < 0) {\n            std::cerr << \"Failed to listen on socket\" << std::endl;\n            close(sockfd_);\n            return false;\n        }\n\n        statsThreadRunning_ = true;\n        stats_thread_ = std::thread(&Stats::runSocket, this);\n        return true;\n    }\n\n    void runSocket() {\n        while (statsThreadRunning_) {\n            int client_sockfd = accept(sockfd_, nullptr, nullptr);\n            if (client_sockfd < 0) {\n                if (statsThreadRunning_) {\n                    std::cerr << \"Failed to accept connection\" << std::endl;\n                }\n                continue;\n            }\n\n            std::thread(&Stats::processMsg, this, client_sockfd).detach();\n        }\n    }\n\n    void processMsg(int sockfd) {\n        std::lock_guard<std::mutex> lock(thread_mutex_);\n        thread_count_++;\n\n        char buffer[256];\n        int n = read(sockfd, buffer, 255);\n        if (n < 0) {\n            std::cerr << \"Failed to read from socket\" << std::endl;\n            close(sockfd);\n            thread_count_--;\n            thread_exited_.notify_one();\n            return;\n        }\n\n        buffer[n] = '\\0';\n        std::string request(buffer);\n        std::string response;\n\n        if (request == \"get\") {\n            auto stats = getAll();\n            for (const auto& stat : stats) {\n                response += stat.first + \": \" + std::to_string(stat.second) + \"\\n\";\n            }\n        } else if (request.substr(0, 3) == \"inc\") {\n            size_t pos = request.find(' ');\n            std::string key = request.substr(4, pos - 4);\n            int val = std::stoi(request.substr(pos + 1));\n            response = \"New value: \" + std::to_string(increment(key, val)) + \"\\n\";\n        } else if (request.substr(0, 3) == \"set\") {\n            size_t pos = request.find(' ');\n            std::string key = request.substr(4, pos - 4);\n            int val = std::stoi(request.substr(pos + 1));\n            response = \"New value: \" + std::to_string(set(key, val)) + \"\\n\";\n        } else if (request == \"reset\") {\n            reset();\n            response = \"Statistics reset\\n\";\n        } else {\n            response = \"Unknown command\\n\";\n        }\n\n        n = write(sockfd, response.c_str(), response.length());\n        if (n < 0) {\n            std::cerr << \"Failed to write to socket\" << std::endl;\n        }\n\n        close(sockfd);\n        thread_count_--;\n        thread_exited_.notify_one();\n    }\n\nprivate:\n    static bool& isInitInternal() {\n        static bool initialized = false;\n        return initialized;\n    }\n\n    std::string stats_socket_path_;\n    int sockfd_;\n    struct sockaddr_un serv_addr_;\n    std::thread stats_thread_;\n    std::atomic<bool> statsThreadRunning_;\n    std::mutex stats_mutex_;\n    std::mutex thread_mutex_;\n    std::condition_variable thread_exited_;\n    int thread_count_;\n    std::unordered_map<std::string, int> stats_;\n};",
      "#include <iostream>\n#include <string>\n#include <unordered_map>\n#include <thread>\n#include <atomic>\n#include <mutex>\n#include <condition_variable>\n#include <sys/socket.h>\n#include <sys/un.h>\n#include <unistd.h>\n\nclass Stats {\npublic:\n    Stats(const std::string& stats_socket_path) : stats_socket_path_(stats_socket_path), sockfd_(-1), statsThreadRunning_(false), thread_count_(0) {}\n    ~Stats() {\n        if (sockfd_ != -1) {\n            close(sockfd_);\n            unlink(stats_socket_path_.c_str());\n        }\n    }\n\n    static Stats& get(const std::string& stats_socket_path) {\n        static Stats instance(stats_socket_path);\n        return instance;\n    }\n\n    static std::unique_ptr<Stats> get_for_unittest(const std::string& stats_socket_path) {\n        return std::make_unique<Stats>(stats_socket_path);\n    }\n\n    static bool init(const std::string& stats_socket_path) {\n        Stats& instance = get(stats_socket_path);\n        return instance.startSocket();\n    }\n\n    static bool isInit() {\n        return isInitInternal();\n    }\n\n    std::unordered_map<std::string, int> getAll() {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        return stats_;\n    }\n\n    int increment(const std::string& key, int val) {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        stats_[key] += val;\n        return stats_[key];\n    }\n\n    int set(const std::string& key, int val) {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        stats_[key] = val;\n        return stats_[key];\n    }\n\n    int reset() {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        stats_.clear();\n        return 0;\n    }\n\n    bool startSocket() {\n        sockfd_ = socket(AF_UNIX, SOCK_STREAM, 0);\n        if (sockfd_ < 0) {\n            return false;\n        }\n\n        memset(&serv_addr_, 0, sizeof(serv_addr_));\n        serv_addr_.sun_family = AF_UNIX;\n        strncpy(serv_addr_.sun_path, stats_socket_path_.c_str(), sizeof(serv_addr_.sun_path) - 1);\n\n        unlink(stats_socket_path_.c_str());\n        if (bind(sockfd_, (struct sockaddr*)&serv_addr_, sizeof(serv_addr_)) < 0) {\n            close(sockfd_);\n            return false;\n        }\n\n        if (listen(sockfd_, 5) < 0) {\n            close(sockfd_);\n            return false;\n        }\n\n        statsThreadRunning_ = true;\n        stats_thread_ = std::thread(&Stats::runSocket, this);\n        return true;\n    }\n\n    void runSocket() {\n        while (statsThreadRunning_) {\n            int client_sockfd = accept(sockfd_, nullptr, nullptr);\n            if (client_sockfd < 0) {\n                continue;\n            }\n\n            std::thread(&Stats::processMsg, this, client_sockfd).detach();\n        }\n    }\n\n    void processMsg(int sockfd) {\n        char buffer[256];\n        int n = read(sockfd, buffer, 255);\n        if (n > 0) {\n            buffer[n] = '\\0';\n            std::string request(buffer);\n            std::string response;\n\n            if (request == \"get\") {\n                auto stats = getAll();\n                for (const auto& stat : stats) {\n                    response += stat.first + \": \" + std::to_string(stat.second) + \"\\n\";\n                }\n            } else if (request == \"reset\") {\n                reset();\n                response = \"Statistics reset\\n\";\n            } else {\n                response = \"Unknown command\\n\";\n            }\n\n            write(sockfd, response.c_str(), response.size());\n        }\n        close(sockfd);\n    }\n\nprivate:\n    static bool& isInitInternal() {\n        static bool initialized = false;\n        return initialized;\n    }\n\n    std::string stats_socket_path_;\n    int sockfd_;\n    struct sockaddr_un serv_addr_;\n    std::thread stats_thread_;\n    std::atomic<bool> statsThreadRunning_;\n    std::mutex stats_mutex_;\n    std::mutex thread_mutex_;\n    std::condition_variable thread_exited_;\n    int thread_count_;\n    std::unordered_map<std::string, int> stats_;\n};",
      "#include <iostream>\n#include <string>\n#include <unordered_map>\n#include <thread>\n#include <mutex>\n#include <atomic>\n#include <condition_variable>\n#include <sys/socket.h>\n#include <sys/un.h>\n#include <unistd.h>\n\nclass Stats {\npublic:\n    Stats(const std::string& stats_socket_path) \n        : stats_socket_path_(stats_socket_path), sockfd_(-1), statsThreadRunning_(false), thread_count_(0) {\n        memset(&serv_addr_, 0, sizeof(serv_addr_));\n        serv_addr_.sun_family = AF_UNIX;\n        strncpy(serv_addr_.sun_path, stats_socket_path.c_str(), sizeof(serv_addr_.sun_path) - 1);\n    }\n\n    ~Stats() {\n        statsThreadRunning_ = false;\n        if (stats_thread_.joinable()) {\n            stats_thread_.join();\n        }\n        if (sockfd_ != -1) {\n            close(sockfd_);\n        }\n        unlink(stats_socket_path_.c_str());\n    }\n\n    static Stats& get(const std::string& stats_socket_path) {\n        static Stats instance(stats_socket_path);\n        return instance;\n    }\n\n    static std::unique_ptr<Stats> get_for_unittest(const std::string& stats_socket_path) {\n        return std::make_unique<Stats>(stats_socket_path);\n    }\n\n    static bool init(const std::string& stats_socket_path) {\n        if (!isInit()) {\n            get(stats_socket_path);\n            return true;\n        }\n        return false;\n    }\n\n    static bool isInit() {\n        return isInitInternal();\n    }\n\n    std::unordered_map<std::string, int> getAll() {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        return stats_;\n    }\n\n    int increment(const std::string& key, int val) {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        stats_[key] += val;\n        return stats_[key];\n    }\n\n    int set(const std::string& key, int val) {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        stats_[key] = val;\n        return stats_[key];\n    }\n\n    int reset() {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        stats_.clear();\n        return 0;\n    }\n\n    bool startSocket() {\n        sockfd_ = socket(AF_UNIX, SOCK_STREAM, 0);\n        if (sockfd_ < 0) {\n            return false;\n        }\n\n        unlink(stats_socket_path_.c_str());\n\n        if (bind(sockfd_, (struct sockaddr*)&serv_addr_, sizeof(serv_addr_)) < 0) {\n            close(sockfd_);\n            return false;\n        }\n\n        if (listen(sockfd_, 5) < 0) {\n            close(sockfd_);\n            return false;\n        }\n\n        statsThreadRunning_ = true;\n        stats_thread_ = std::thread(&Stats::runSocket, this);\n        return true;\n    }\n\n    void runSocket() {\n        while (statsThreadRunning_) {\n            int newsockfd = accept(sockfd_, nullptr, nullptr);\n            if (newsockfd < 0) {\n                continue;\n            }\n\n            std::thread(&Stats::processMsg, this, newsockfd).detach();\n        }\n    }\n\n    void processMsg(int sockfd) {\n        char buffer[256];\n        memset(buffer, 0, 256);\n        read(sockfd, buffer, 255);\n\n        std::string request(buffer);\n        std::string response;\n\n        if (request == \"get\") {\n            auto stats = getAll();\n            for (const auto& stat : stats) {\n                response += stat.first + \": \" + std::to_string(stat.second) + \"\\n\";\n            }\n        } else if (request == \"reset\") {\n            reset();\n            response = \"Statistics reset\\n\";\n        } else if (request.rfind(\"increment\", 0) == 0) {\n            auto pos = request.find(' ');\n            if (pos != std::string::npos) {\n                auto key = request.substr(10, pos - 10);\n                auto val = std::stoi(request.substr(pos + 1));\n                increment(key, val);\n                response = \"Incremented \" + key + \"\\n\";\n            }\n        } else if (request.rfind(\"set\", 0) == 0) {\n            auto pos = request.find(' ');\n            if (pos != std::string::npos) {\n                auto key = request.substr(4, pos - 4);\n                auto val = std::stoi(request.substr(pos + 1));\n                set(key, val);\n                response = \"Set \" + key + \"\\n\";\n            }\n        }\n\n        write(sockfd, response.c_str(), response.size());\n        close(sockfd);\n    }\n\nprivate:\n    static bool& isInitInternal() {\n        static bool initialized = false;\n        return initialized;\n    }\n\n    std::string stats_socket_path_;\n    int sockfd_;\n    struct sockaddr_un serv_addr_;\n    std::thread stats_thread_;\n    std::atomic<bool> statsThreadRunning_;\n    std::mutex stats_mutex_;\n    std::mutex thread_mutex_;\n    std::condition_variable thread_exited_;\n    int thread_count_;\n    std::unordered_map<std::string, int> stats_;\n};"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 27,
    "Instruction": "Task Description: Implement a UDP receiver class in C++ that listens for incoming UDP packets on a specified port, processes them, and forwards them to a network handling component. The class should handle socket creation, binding, and packet reception in a non-blocking manner using polling.\n\nClass Description: The `UDPRecv` class is responsible for setting up a UDP socket server that listens for incoming messages on a specified port. It uses polling to check for incoming data without blocking, and forwards received messages to a network handling component (`DFNetWork`). The class manages the socket lifecycle and provides methods to initialize, start, and stop the receiver.\n\nAttributes:\n- m_poDFNetWork: [DFNetWork*] - Pointer to the network handling component that processes received messages\n- m_iSockFD: [int] - File descriptor for the UDP socket\n- m_bIsEnd: [bool] - Flag indicating whether the receiver should stop running\n- m_bIsStarted: [bool] - Flag indicating whether the receiver has started\n\nMethods:\n- UDPRecv(DFNetWork* poDFNetWork) -> [void] - Constructor that initializes the receiver with a network handling component\n- ~UDPRecv() -> [void] - Destructor that closes the socket if it's open\n- Stop() -> [void] - Signals the receiver to stop and waits for it to finish\n- Init(int iPort) -> [int] - Initializes the UDP socket and binds it to the specified port (returns 0 on success, -1 on failure)\n- run() -> [void] - Main execution loop that polls for incoming messages and processes them (runs in a separate thread)",
    "Canonical_solution": "#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#include <string.h>\n#include \"dfnetwork.h\"\n\nnamespace phxpaxos {\n\nclass UDPRecv\n{\npublic:\n    UDPRecv(DFNetWork * poDFNetWork);\n    ~UDPRecv();\n\n    void Stop();\n    int Init(const int iPort);\n    void run();\n\nprivate:\n    DFNetWork * m_poDFNetWork;\n    int m_iSockFD;\n    bool m_bIsEnd;\n    bool m_bIsStarted;\n};\n\nUDPRecv::UDPRecv(DFNetWork * poDFNetWork) \n    : m_poDFNetWork(poDFNetWork), m_iSockFD(-1), m_bIsEnd(false), m_bIsStarted(false)\n{\n}\n\nUDPRecv::~UDPRecv()\n{\n    if (m_iSockFD != -1)\n    {\n        close(m_iSockFD);\n        m_iSockFD = -1;\n    }\n}\n\nvoid UDPRecv::Stop()\n{\n    if (m_bIsStarted)\n    {\n        m_bIsEnd = true;\n        join();\n    }\n}\n\nint UDPRecv::Init(const int iPort)\n{\n    if ((m_iSockFD = socket(AF_INET, SOCK_DGRAM, 0)) < 0) \n    {\n        return -1;\n    }\n\n    struct sockaddr_in addr;\n    memset(&addr, 0, sizeof(addr));\n\n    addr.sin_family = AF_INET;\n    addr.sin_port = htons(iPort);\n    addr.sin_addr.s_addr = htonl(INADDR_ANY);\n\n    int enable = 1;\n    setsockopt(m_iSockFD, SOL_SOCKET, SO_REUSEADDR, &enable, sizeof(int));\n\n    if (bind(m_iSockFD, (struct sockaddr *)&addr, sizeof(addr)) < 0) \n    {\n        return -1;\n    }\n\n    return 0;\n}\n\nvoid UDPRecv::run()\n{\n    m_bIsStarted = true;\n\n    char sBuffer[65536] = {0};\n\n    struct sockaddr_in addr;\n    socklen_t addr_len = sizeof(struct sockaddr_in);\n    memset(&addr, 0, sizeof(addr));\n\n    while(true)\n    {\n        if (m_bIsEnd)\n        {\n            return;\n        }\n\n        struct pollfd fd;\n        int ret;\n\n        fd.fd = m_iSockFD;\n        fd.events = POLLIN;\n        ret = poll(&fd, 1, 500);\n\n        if (ret == 0 || ret == -1)\n        {\n            continue;\n        }\n        \n        int iRecvLen = recvfrom(m_iSockFD, sBuffer, sizeof(sBuffer), 0,\n                (struct sockaddr *)&addr, &addr_len);\n\n        if (iRecvLen > 0)\n        {\n            m_poDFNetWork->OnReceiveMessage(sBuffer, iRecvLen);\n        }\n    }\n}\n\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 152,
    "matched_results": [
      "#include <iostream>\n#include <cstring>\n#include <unistd.h>\n#include <arpa/inet.h>\n#include <sys/socket.h>\n#include <fcntl.h>\n#include <poll.h>\n#include <thread>\n#include <atomic>\n\nclass DFNetWork {\npublic:\n    void ProcessMessage(const char* message, size_t length) {\n        // Placeholder for message processing logic\n        std::cout << \"Processing message: \" << std::string(message, length) << std::endl;\n    }\n};\n\nclass UDPRecv {\npublic:\n    UDPRecv(DFNetWork* poDFNetWork)\n        : m_poDFNetWork(poDFNetWork), m_iSockFD(-1), m_bIsEnd(false), m_bIsStarted(false) {}\n\n    ~UDPRecv() {\n        if (m_iSockFD != -1) {\n            close(m_iSockFD);\n        }\n    }\n\n    void Stop() {\n        m_bIsEnd = true;\n        if (m_thread.joinable()) {\n            m_thread.join();\n        }\n    }\n\n    int Init(int iPort) {\n        m_iSockFD = socket(AF_INET, SOCK_DGRAM, 0);\n        if (m_iSockFD < 0) {\n            std::cerr << \"Failed to create socket\" << std::endl;\n            return -1;\n        }\n\n        sockaddr_in serverAddr;\n        memset(&serverAddr, 0, sizeof(serverAddr));\n        serverAddr.sin_family = AF_INET;\n        serverAddr.sin_addr.s_addr = INADDR_ANY;\n        serverAddr.sin_port = htons(iPort);\n\n        if (bind(m_iSockFD, (struct sockaddr*)&serverAddr, sizeof(serverAddr)) < 0) {\n            std::cerr << \"Failed to bind socket\" << std::endl;\n            close(m_iSockFD);\n            return -1;\n        }\n\n        int flags = fcntl(m_iSockFD, F_GETFL, 0);\n        fcntl(m_iSockFD, F_SETFL, flags | O_NONBLOCK);\n\n        m_thread = std::thread(&UDPRecv::run, this);\n        m_bIsStarted = true;\n        return 0;\n    }\n\n    void run() {\n        const int bufferSize = 1024;\n        char buffer[bufferSize];\n        sockaddr_in clientAddr;\n        socklen_t clientAddrLen = sizeof(clientAddr);\n\n        struct pollfd fds[1];\n        fds[0].fd = m_iSockFD;\n        fds[0].events = POLLIN;\n\n        while (!m_bIsEnd) {\n            int pollCount = poll(fds, 1, 1000);\n            if (pollCount > 0) {\n                if (fds[0].revents & POLLIN) {\n                    ssize_t recvLen = recvfrom(m_iSockFD, buffer, bufferSize, 0,\n                                               (struct sockaddr*)&clientAddr, &clientAddrLen);\n                    if (recvLen > 0) {\n                        m_poDFNetWork->ProcessMessage(buffer, recvLen);\n                    }\n                }\n            }\n        }\n    }\n\nprivate:\n    DFNetWork* m_poDFNetWork;\n    int m_iSockFD;\n    std::atomic<bool> m_bIsEnd;\n    std::atomic<bool> m_bIsStarted;\n    std::thread m_thread;\n};"
    ],
    "unmatched_results": [
      "class UDPRecv {\npublic:\n    UDPRecv(DFNetWork* poDFNetWork) : m_poDFNetWork(poDFNetWork), m_iSockFD(-1), m_bIsEnd(false), m_bIsStarted(false) {}\n\n    ~UDPRecv() {\n        if (m_iSockFD != -1) {\n            close(m_iSockFD);\n        }\n    }\n\n    void Stop() {\n        m_bIsEnd = true;\n        if (m_bIsStarted) {\n            m_thread.join();\n        }\n    }\n\n    int Init(int iPort) {\n        m_iSockFD = socket(AF_INET, SOCK_DGRAM, 0);\n        if (m_iSockFD < 0) {\n            return -1;\n        }\n\n        sockaddr_in serverAddr;\n        memset(&serverAddr, 0, sizeof(serverAddr));\n        serverAddr.sin_family = AF_INET;\n        serverAddr.sin_addr.s_addr = INADDR_ANY;\n        serverAddr.sin_port = htons(iPort);\n\n        if (bind(m_iSockFD, (struct sockaddr*)&serverAddr, sizeof(serverAddr)) < 0) {\n            close(m_iSockFD);\n            m_iSockFD = -1;\n            return -1;\n        }\n\n        m_thread = std::thread(&UDPRecv::run, this);\n        m_bIsStarted = true;\n        return 0;\n    }\n\nprivate:\n    void run() {\n        const int BUF_SIZE = 1024;\n        char buffer[BUF_SIZE];\n        sockaddr_in clientAddr;\n        socklen_t clientAddrLen = sizeof(clientAddr);\n\n        while (!m_bIsEnd) {\n            pollfd fds[1];\n            fds[0].fd = m_iSockFD;\n            fds[0].events = POLLIN;\n\n            int ret = poll(fds, 1, 1000); // Poll with a timeout of 1000 ms\n            if (ret > 0 && (fds[0].revents & POLLIN)) {\n                int recvLen = recvfrom(m_iSockFD, buffer, BUF_SIZE, 0, (struct sockaddr*)&clientAddr, &clientAddrLen);\n                if (recvLen > 0) {\n                    m_poDFNetWork->ProcessMessage(buffer, recvLen);\n                }\n            }\n        }\n    }\n\n    DFNetWork* m_poDFNetWork;\n    int m_iSockFD;\n    bool m_bIsEnd;\n    bool m_bIsStarted;\n    std::thread m_thread;\n};",
      "class UDPRecv {\nprivate:\n    DFNetWork* m_poDFNetWork;\n    int m_iSockFD;\n    bool m_bIsEnd;\n    bool m_bIsStarted;\n\npublic:\n    UDPRecv(DFNetWork* poDFNetWork) : m_poDFNetWork(poDFNetWork), m_iSockFD(-1), m_bIsEnd(false), m_bIsStarted(false) {}\n\n    ~UDPRecv() {\n        if (m_iSockFD != -1) {\n            close(m_iSockFD);\n        }\n    }\n\n    void Stop() {\n        m_bIsEnd = true;\n        while (m_bIsStarted) {\n            std::this_thread::sleep_for(std::chrono::milliseconds(100));\n        }\n    }\n\n    int Init(int iPort) {\n        m_iSockFD = socket(AF_INET, SOCK_DGRAM, 0);\n        if (m_iSockFD < 0) {\n            return -1;\n        }\n\n        sockaddr_in servaddr;\n        memset(&servaddr, 0, sizeof(servaddr));\n        servaddr.sin_family = AF_INET;\n        servaddr.sin_addr.s_addr = INADDR_ANY;\n        servaddr.sin_port = htons(iPort);\n\n        if (bind(m_iSockFD, (const struct sockaddr *)&servaddr, sizeof(servaddr)) < 0) {\n            close(m_iSockFD);\n            m_iSockFD = -1;\n            return -1;\n        }\n\n        return 0;\n    }\n\n    void run() {\n        m_bIsStarted = true;\n        const int POLL_TIMEOUT = 1000; // milliseconds\n        const int BUFFER_SIZE = 1024;\n        char buffer[BUFFER_SIZE];\n\n        while (!m_bIsEnd) {\n            pollfd fds[1];\n            fds[0].fd = m_iSockFD;\n            fds[0].events = POLLIN;\n\n            int ret = poll(fds, 1, POLL_TIMEOUT);\n            if (ret > 0 && (fds[0].revents & POLLIN)) {\n                sockaddr_in cliaddr;\n                socklen_t len = sizeof(cliaddr);\n                int n = recvfrom(m_iSockFD, buffer, BUFFER_SIZE, 0, (struct sockaddr *)&cliaddr, &len);\n                if (n > 0) {\n                    m_poDFNetWork->ProcessMessage(buffer, n);\n                }\n            }\n        }\n\n        m_bIsStarted = false;\n    }\n};",
      "class UDPRecv {\nprivate:\n    DFNetWork* m_poDFNetWork;\n    int m_iSockFD;\n    bool m_bIsEnd;\n    bool m_bIsStarted;\n\npublic:\n    UDPRecv(DFNetWork* poDFNetWork) : m_poDFNetWork(poDFNetWork), m_iSockFD(-1), m_bIsEnd(false), m_bIsStarted(false) {}\n\n    ~UDPRecv() {\n        if (m_iSockFD != -1) {\n            close(m_iSockFD);\n        }\n    }\n\n    void Stop() {\n        m_bIsEnd = true;\n        while (m_bIsStarted) {\n            std::this_thread::sleep_for(std::chrono::milliseconds(100));\n        }\n    }\n\n    int Init(int iPort) {\n        m_iSockFD = socket(AF_INET, SOCK_DGRAM, 0);\n        if (m_iSockFD < 0) {\n            return -1;\n        }\n\n        sockaddr_in servaddr;\n        memset(&servaddr, 0, sizeof(servaddr));\n        servaddr.sin_family = AF_INET;\n        servaddr.sin_addr.s_addr = INADDR_ANY;\n        servaddr.sin_port = htons(iPort);\n\n        if (bind(m_iSockFD, (const struct sockaddr *)&servaddr, sizeof(servaddr)) < 0) {\n            close(m_iSockFD);\n            m_iSockFD = -1;\n            return -1;\n        }\n\n        return 0;\n    }\n\n    void run() {\n        m_bIsStarted = true;\n        const int BUF_SIZE = 1024;\n        char buffer[BUF_SIZE];\n        sockaddr_in cliaddr;\n        socklen_t len = sizeof(cliaddr);\n\n        while (!m_bIsEnd) {\n            pollfd fds;\n            fds.fd = m_iSockFD;\n            fds.events = POLLIN;\n\n            int ret = poll(&fds, 1, 1000);\n            if (ret > 0 && (fds.revents & POLLIN)) {\n                int n = recvfrom(m_iSockFD, buffer, BUF_SIZE, 0, (struct sockaddr *)&cliaddr, &len);\n                if (n > 0) {\n                    m_poDFNetWork->ProcessMessage(buffer, n);\n                }\n            }\n        }\n\n        m_bIsStarted = false;\n    }\n};",
      "class UDPRecv {\nprivate:\n    DFNetWork* m_poDFNetWork;\n    int m_iSockFD;\n    bool m_bIsEnd;\n    bool m_bIsStarted;\n\npublic:\n    UDPRecv(DFNetWork* poDFNetWork) : m_poDFNetWork(poDFNetWork), m_iSockFD(-1), m_bIsEnd(false), m_bIsStarted(false) {}\n\n    ~UDPRecv() {\n        if (m_iSockFD != -1) {\n            close(m_iSockFD);\n        }\n    }\n\n    void Stop() {\n        m_bIsEnd = true;\n        while (m_bIsStarted) {\n            std::this_thread::sleep_for(std::chrono::milliseconds(100));\n        }\n    }\n\n    int Init(int iPort) {\n        m_iSockFD = socket(AF_INET, SOCK_DGRAM, 0);\n        if (m_iSockFD < 0) {\n            return -1;\n        }\n\n        sockaddr_in serverAddr;\n        memset(&serverAddr, 0, sizeof(serverAddr));\n        serverAddr.sin_family = AF_INET;\n        serverAddr.sin_addr.s_addr = INADDR_ANY;\n        serverAddr.sin_port = htons(iPort);\n\n        if (bind(m_iSockFD, (struct sockaddr*)&serverAddr, sizeof(serverAddr)) < 0) {\n            close(m_iSockFD);\n            m_iSockFD = -1;\n            return -1;\n        }\n\n        return 0;\n    }\n\n    void run() {\n        m_bIsStarted = true;\n        const int bufferSize = 1024;\n        char buffer[bufferSize];\n        sockaddr_in clientAddr;\n        socklen_t clientAddrLen = sizeof(clientAddr);\n\n        while (!m_bIsEnd) {\n            pollfd fds[1];\n            fds[0].fd = m_iSockFD;\n            fds[0].events = POLLIN;\n\n            int pollResult = poll(fds, 1, 1000);\n            if (pollResult > 0 && (fds[0].revents & POLLIN)) {\n                int recvLen = recvfrom(m_iSockFD, buffer, bufferSize, 0, (struct sockaddr*)&clientAddr, &clientAddrLen);\n                if (recvLen > 0) {\n                    m_poDFNetWork->ProcessMessage(buffer, recvLen);\n                }\n            }\n        }\n\n        m_bIsStarted = false;\n    }\n};",
      "class UDPRecv {\npublic:\n    UDPRecv(DFNetWork* poDFNetWork)\n        : m_poDFNetWork(poDFNetWork), m_iSockFD(-1), m_bIsEnd(false), m_bIsStarted(false) {}\n\n    ~UDPRecv() {\n        if (m_iSockFD != -1) {\n            close(m_iSockFD);\n        }\n    }\n\n    void Stop() {\n        m_bIsEnd = true;\n        if (m_bIsStarted) {\n            m_thread.join();\n        }\n    }\n\n    int Init(int iPort) {\n        m_iSockFD = socket(AF_INET, SOCK_DGRAM, 0);\n        if (m_iSockFD < 0) {\n            return -1;\n        }\n\n        sockaddr_in serverAddr;\n        memset(&serverAddr, 0, sizeof(serverAddr));\n        serverAddr.sin_family = AF_INET;\n        serverAddr.sin_addr.s_addr = INADDR_ANY;\n        serverAddr.sin_port = htons(iPort);\n\n        if (bind(m_iSockFD, (struct sockaddr*)&serverAddr, sizeof(serverAddr)) < 0) {\n            close(m_iSockFD);\n            m_iSockFD = -1;\n            return -1;\n        }\n\n        m_thread = std::thread(&UDPRecv::run, this);\n        m_bIsStarted = true;\n        return 0;\n    }\n\n    void run() {\n        const int BUF_SIZE = 1024;\n        char buffer[BUF_SIZE];\n        sockaddr_in clientAddr;\n        socklen_t clientAddrLen = sizeof(clientAddr);\n\n        struct pollfd fds[1];\n        fds[0].fd = m_iSockFD;\n        fds[0].events = POLLIN;\n\n        while (!m_bIsEnd) {\n            int pollCount = poll(fds, 1, 1000);\n            if (pollCount > 0) {\n                if (fds[0].revents & POLLIN) {\n                    int recvLen = recvfrom(m_iSockFD, buffer, BUF_SIZE, 0, (struct sockaddr*)&clientAddr, &clientAddrLen);\n                    if (recvLen > 0) {\n                        m_poDFNetWork->ProcessMessage(buffer, recvLen);\n                    }\n                }\n            }\n        }\n    }\n\nprivate:\n    DFNetWork* m_poDFNetWork;\n    int m_iSockFD;\n    bool m_bIsEnd;\n    bool m_bIsStarted;\n    std::thread m_thread;\n};",
      "class UDPRecv {\npublic:\n    UDPRecv(DFNetWork* poDFNetWork)\n        : m_poDFNetWork(poDFNetWork), m_iSockFD(-1), m_bIsEnd(false), m_bIsStarted(false) {}\n\n    ~UDPRecv() {\n        if (m_iSockFD != -1) {\n            close(m_iSockFD);\n        }\n    }\n\n    void Stop() {\n        m_bIsEnd = true;\n        if (m_bIsStarted) {\n            m_thread.join();\n        }\n    }\n\n    int Init(int iPort) {\n        m_iSockFD = socket(AF_INET, SOCK_DGRAM, 0);\n        if (m_iSockFD < 0) {\n            return -1;\n        }\n\n        struct sockaddr_in serverAddr;\n        memset(&serverAddr, 0, sizeof(serverAddr));\n        serverAddr.sin_family = AF_INET;\n        serverAddr.sin_addr.s_addr = INADDR_ANY;\n        serverAddr.sin_port = htons(iPort);\n\n        if (bind(m_iSockFD, (struct sockaddr*)&serverAddr, sizeof(serverAddr)) < 0) {\n            close(m_iSockFD);\n            m_iSockFD = -1;\n            return -1;\n        }\n\n        m_thread = std::thread(&UDPRecv::run, this);\n        m_bIsStarted = true;\n        return 0;\n    }\n\n    void run() {\n        struct pollfd fds[1];\n        fds[0].fd = m_iSockFD;\n        fds[0].events = POLLIN;\n\n        while (!m_bIsEnd) {\n            int pollCount = poll(fds, 1, 1000);\n            if (pollCount > 0) {\n                if (fds[0].revents & POLLIN) {\n                    char buffer[1024];\n                    struct sockaddr_in clientAddr;\n                    socklen_t clientAddrLen = sizeof(clientAddr);\n                    int recvLen = recvfrom(m_iSockFD, buffer, sizeof(buffer), 0, (struct sockaddr*)&clientAddr, &clientAddrLen);\n                    if (recvLen > 0) {\n                        m_poDFNetWork->ProcessMessage(buffer, recvLen);\n                    }\n                }\n            }\n        }\n    }\n\nprivate:\n    DFNetWork* m_poDFNetWork;\n    int m_iSockFD;\n    bool m_bIsEnd;\n    bool m_bIsStarted;\n    std::thread m_thread;\n};",
      "class UDPRecv {\nprivate:\n    DFNetWork* m_poDFNetWork;\n    int m_iSockFD;\n    bool m_bIsEnd;\n    bool m_bIsStarted;\n\npublic:\n    UDPRecv(DFNetWork* poDFNetWork) : m_poDFNetWork(poDFNetWork), m_iSockFD(-1), m_bIsEnd(false), m_bIsStarted(false) {}\n\n    ~UDPRecv() {\n        if (m_iSockFD != -1) {\n            close(m_iSockFD);\n        }\n    }\n\n    void Stop() {\n        m_bIsEnd = true;\n        if (m_bIsStarted) {\n            m_bIsStarted = false;\n        }\n    }\n\n    int Init(int iPort) {\n        m_iSockFD = socket(AF_INET, SOCK_DGRAM, 0);\n        if (m_iSockFD < 0) {\n            return -1;\n        }\n\n        struct sockaddr_in serverAddr;\n        memset(&serverAddr, 0, sizeof(serverAddr));\n        serverAddr.sin_family = AF_INET;\n        serverAddr.sin_addr.s_addr = INADDR_ANY;\n        serverAddr.sin_port = htons(iPort);\n\n        if (bind(m_iSockFD, (struct sockaddr*)&serverAddr, sizeof(serverAddr)) < 0) {\n            close(m_iSockFD);\n            m_iSockFD = -1;\n            return -1;\n        }\n\n        return 0;\n    }\n\n    void run() {\n        m_bIsStarted = true;\n        struct pollfd fds[1];\n        fds[0].fd = m_iSockFD;\n        fds[0].events = POLLIN;\n\n        while (!m_bIsEnd) {\n            int pollCount = poll(fds, 1, 1000);\n            if (pollCount > 0) {\n                if (fds[0].revents & POLLIN) {\n                    char buffer[1024];\n                    struct sockaddr_in clientAddr;\n                    socklen_t clientAddrLen = sizeof(clientAddr);\n                    int recvLen = recvfrom(m_iSockFD, buffer, sizeof(buffer), 0, (struct sockaddr*)&clientAddr, &clientAddrLen);\n                    if (recvLen > 0) {\n                        m_poDFNetWork->ProcessMessage(buffer, recvLen);\n                    }\n                }\n            }\n        }\n    }\n};",
      "class UDPRecv {\nprivate:\n    DFNetWork* m_poDFNetWork;\n    int m_iSockFD;\n    bool m_bIsEnd;\n    bool m_bIsStarted;\n\npublic:\n    UDPRecv(DFNetWork* poDFNetWork) : m_poDFNetWork(poDFNetWork), m_iSockFD(-1), m_bIsEnd(false), m_bIsStarted(false) {}\n\n    ~UDPRecv() {\n        if (m_iSockFD != -1) {\n            close(m_iSockFD);\n        }\n    }\n\n    void Stop() {\n        m_bIsEnd = true;\n        while (m_bIsStarted) {\n            std::this_thread::sleep_for(std::chrono::milliseconds(100));\n        }\n    }\n\n    int Init(int iPort) {\n        m_iSockFD = socket(AF_INET, SOCK_DGRAM, 0);\n        if (m_iSockFD < 0) {\n            return -1;\n        }\n\n        sockaddr_in serverAddr;\n        memset(&serverAddr, 0, sizeof(serverAddr));\n        serverAddr.sin_family = AF_INET;\n        serverAddr.sin_addr.s_addr = INADDR_ANY;\n        serverAddr.sin_port = htons(iPort);\n\n        if (bind(m_iSockFD, (struct sockaddr*)&serverAddr, sizeof(serverAddr)) < 0) {\n            close(m_iSockFD);\n            m_iSockFD = -1;\n            return -1;\n        }\n\n        return 0;\n    }\n\n    void run() {\n        m_bIsStarted = true;\n        const int BUF_SIZE = 1024;\n        char buffer[BUF_SIZE];\n        sockaddr_in clientAddr;\n        socklen_t clientAddrLen = sizeof(clientAddr);\n\n        while (!m_bIsEnd) {\n            pollfd fds[1];\n            fds[0].fd = m_iSockFD;\n            fds[0].events = POLLIN;\n\n            int pollCount = poll(fds, 1, 1000);\n            if (pollCount > 0 && (fds[0].revents & POLLIN)) {\n                int recvLen = recvfrom(m_iSockFD, buffer, BUF_SIZE, 0, (struct sockaddr*)&clientAddr, &clientAddrLen);\n                if (recvLen > 0) {\n                    m_poDFNetWork->ProcessMessage(buffer, recvLen);\n                }\n            }\n        }\n\n        m_bIsStarted = false;\n    }\n};",
      "class UDPRecv {\nprivate:\n    DFNetWork* m_poDFNetWork;\n    int m_iSockFD;\n    bool m_bIsEnd;\n    bool m_bIsStarted;\n\npublic:\n    UDPRecv(DFNetWork* poDFNetWork) : m_poDFNetWork(poDFNetWork), m_iSockFD(-1), m_bIsEnd(false), m_bIsStarted(false) {}\n\n    ~UDPRecv() {\n        if (m_iSockFD != -1) {\n            close(m_iSockFD);\n        }\n    }\n\n    void Stop() {\n        m_bIsEnd = true;\n        while (m_bIsStarted) {\n            std::this_thread::sleep_for(std::chrono::milliseconds(100));\n        }\n    }\n\n    int Init(int iPort) {\n        m_iSockFD = socket(AF_INET, SOCK_DGRAM, 0);\n        if (m_iSockFD < 0) {\n            return -1;\n        }\n\n        sockaddr_in serverAddr;\n        memset(&serverAddr, 0, sizeof(serverAddr));\n        serverAddr.sin_family = AF_INET;\n        serverAddr.sin_addr.s_addr = INADDR_ANY;\n        serverAddr.sin_port = htons(iPort);\n\n        if (bind(m_iSockFD, (struct sockaddr*)&serverAddr, sizeof(serverAddr)) < 0) {\n            close(m_iSockFD);\n            m_iSockFD = -1;\n            return -1;\n        }\n\n        return 0;\n    }\n\n    void run() {\n        m_bIsStarted = true;\n        char buffer[1024];\n        sockaddr_in clientAddr;\n        socklen_t clientAddrLen = sizeof(clientAddr);\n\n        while (!m_bIsEnd) {\n            pollfd fds[1];\n            fds[0].fd = m_iSockFD;\n            fds[0].events = POLLIN;\n\n            int pollResult = poll(fds, 1, 1000);\n            if (pollResult > 0 && (fds[0].revents & POLLIN)) {\n                int recvLen = recvfrom(m_iSockFD, buffer, sizeof(buffer), 0, (struct sockaddr*)&clientAddr, &clientAddrLen);\n                if (recvLen > 0) {\n                    m_poDFNetWork->ProcessMessage(buffer, recvLen);\n                }\n            }\n        }\n\n        m_bIsStarted = false;\n    }\n};"
    ],
    "match_count": 1,
    "pass@3": 0.30000000000000004,
    "pass@5": 0.5
  },
  {
    "Task_id": 28,
    "Instruction": "Task Description: Create a UDP server class using Boost.Asio that asynchronously receives datagrams and sends responses.\n\nClass Description: The udp_server class implements a UDP server that listens for incoming datagrams on a specified port and responds with a daytime string. It uses Boost.Asio for asynchronous network operations.\n\nAttributes:\n- socket_: [boost::asio::ip::udp::socket] - The UDP socket used for communication\n- remote_endpoint_: [boost::asio::ip::udp::endpoint] - Stores the endpoint of the last received message\n- recv_buffer_: [std::array<char, 1>] - Buffer for receiving incoming datagrams\n\nMethods:\n- udp_server([boost::asio::io_context&] io_context) -> [void] - Constructor that initializes the UDP socket and starts listening\n- start_receive() -> [void] - Begins asynchronous reception of UDP datagrams\n- handle_receive([const boost::system::error_code&] error) -> [void] - Callback for handling received datagrams and sending responses\n- handle_send([std::shared_ptr<std::string>] message) -> [void] - Callback for handling completed send operations",
    "Canonical_solution": "#include <boost/asio.hpp>\n#include <memory>\n#include <string>\n#include <array>\nusing boost::asio::ip::udp;\n\nclass udp_server\n{\npublic:\n  udp_server(boost::asio::io_context& io_context)\n    : socket_(io_context, udp::endpoint(udp::v4(), 13))\n  {\n    start_receive();\n  }\n\nprivate:\n  void start_receive()\n  {\n    socket_.async_receive_from(\n        boost::asio::buffer(recv_buffer_), remote_endpoint_,\n        std::bind(&udp_server::handle_receive, this,\n          boost::asio::placeholders::error));\n  }\n\n  void handle_receive(const boost::system::error_code& error)\n  {\n    if (!error)\n    {\n      std::shared_ptr<std::string> message(\n          new std::string(make_daytime_string()));\n\n      socket_.async_send_to(boost::asio::buffer(*message), remote_endpoint_,\n          std::bind(&udp_server::handle_send, this, message));\n\n      start_receive();\n    }\n  }\n\n  void handle_send(std::shared_ptr<std::string> /*message*/)\n  {\n  }\n\n  udp::socket socket_;\n  udp::endpoint remote_endpoint_;\n  std::array<char, 1> recv_buffer_;\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 153,
    "matched_results": [
      "#include <boost/asio.hpp>\n#include <boost/bind/bind.hpp>\n#include <array>\n#include <memory>\n#include <string>\n\nclass udp_server {\npublic:\n    udp_server(boost::asio::io_context& io_context)\n        : socket_(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), 12345)) {\n        start_receive();\n    }\n\nprivate:\n    void start_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(recv_buffer_), remote_endpoint_,\n            boost::bind(&udp_server::handle_receive, this,\n                        boost::asio::placeholders::error));\n    }\n\n    void handle_receive(const boost::system::error_code& error) {\n        if (!error) {\n            auto message = std::make_shared<std::string>(\"Daytime response\");\n            socket_.async_send_to(boost::asio::buffer(*message), remote_endpoint_,\n                                  boost::bind(&udp_server::handle_send, this, message));\n            start_receive();\n        }\n    }\n\n    void handle_send(std::shared_ptr<std::string> /*message*/) {\n        // Handle send completion (if needed)\n    }\n\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint remote_endpoint_;\n    std::array<char, 1> recv_buffer_;\n};",
      "#include <boost/asio.hpp>\n#include <boost/bind/bind.hpp>\n#include <array>\n#include <memory>\n#include <string>\n#include <ctime>\n\nclass udp_server {\npublic:\n    udp_server(boost::asio::io_context& io_context)\n        : socket_(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), 12345)) {\n        start_receive();\n    }\n\nprivate:\n    void start_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(recv_buffer_), remote_endpoint_,\n            boost::bind(&udp_server::handle_receive, this, boost::asio::placeholders::error));\n    }\n\n    void handle_receive(const boost::system::error_code& error) {\n        if (!error) {\n            auto message = std::make_shared<std::string>(make_daytime_string());\n            socket_.async_send_to(boost::asio::buffer(*message), remote_endpoint_,\n                boost::bind(&udp_server::handle_send, this, message));\n            start_receive();\n        }\n    }\n\n    void handle_send(std::shared_ptr<std::string> /*message*/) {\n        // No action needed after sending the response\n    }\n\n    std::string make_daytime_string() {\n        std::time_t now = std::time(nullptr);\n        return std::ctime(&now);\n    }\n\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint remote_endpoint_;\n    std::array<char, 1> recv_buffer_;\n};",
      "#include <boost/asio.hpp>\n#include <boost/bind/bind.hpp>\n#include <iostream>\n#include <array>\n#include <memory>\n#include <ctime>\n\nclass udp_server {\npublic:\n    udp_server(boost::asio::io_context& io_context)\n        : socket_(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), 12345)) {\n        start_receive();\n    }\n\nprivate:\n    void start_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(recv_buffer_), remote_endpoint_,\n            boost::bind(&udp_server::handle_receive, this,\n                        boost::asio::placeholders::error));\n    }\n\n    void handle_receive(const boost::system::error_code& error) {\n        if (!error) {\n            auto message = std::make_shared<std::string>(make_daytime_string());\n            socket_.async_send_to(boost::asio::buffer(*message), remote_endpoint_,\n                                  boost::bind(&udp_server::handle_send, this, message));\n            start_receive();\n        }\n    }\n\n    void handle_send(std::shared_ptr<std::string> /*message*/) {\n        // No additional actions needed after sending the message\n    }\n\n    std::string make_daytime_string() {\n        std::time_t now = std::time(0);\n        return std::ctime(&now);\n    }\n\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint remote_endpoint_;\n    std::array<char, 1> recv_buffer_;\n};\n\nint main() {\n    try {\n        boost::asio::io_context io_context;\n        udp_server server(io_context);\n        io_context.run();\n    } catch (std::exception& e) {\n        std::cerr << \"Exception: \" << e.what() << \"\\n\";\n    }\n    return 0;\n}",
      "#include <boost/asio.hpp>\n#include <boost/bind/bind.hpp>\n#include <iostream>\n#include <array>\n#include <memory>\n#include <ctime>\n\nclass udp_server {\npublic:\n    udp_server(boost::asio::io_context& io_context)\n        : socket_(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), 12345)) {\n        start_receive();\n    }\n\nprivate:\n    void start_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(recv_buffer_), remote_endpoint_,\n            boost::bind(&udp_server::handle_receive, this,\n                        boost::asio::placeholders::error));\n    }\n\n    void handle_receive(const boost::system::error_code& error) {\n        if (!error) {\n            auto message = std::make_shared<std::string>(make_daytime_string());\n            socket_.async_send_to(boost::asio::buffer(*message), remote_endpoint_,\n                                  boost::bind(&udp_server::handle_send, this, message));\n            start_receive();\n        }\n    }\n\n    void handle_send(std::shared_ptr<std::string> /*message*/) {\n        // No action needed after sending\n    }\n\n    std::string make_daytime_string() {\n        std::time_t now = std::time(0);\n        return std::ctime(&now);\n    }\n\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint remote_endpoint_;\n    std::array<char, 1> recv_buffer_;\n};\n\nint main() {\n    try {\n        boost::asio::io_context io_context;\n        udp_server server(io_context);\n        io_context.run();\n    } catch (std::exception& e) {\n        std::cerr << \"Exception: \" << e.what() << std::endl;\n    }\n\n    return 0;\n}",
      "#include <boost/asio.hpp>\n#include <iostream>\n#include <array>\n#include <memory>\n#include <ctime>\n\nclass udp_server {\npublic:\n    udp_server(boost::asio::io_context& io_context)\n        : socket_(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), 12345)) {\n        start_receive();\n    }\n\nprivate:\n    void start_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(recv_buffer_), remote_endpoint_,\n            [this](const boost::system::error_code& error, std::size_t /*bytes_transferred*/) {\n                handle_receive(error);\n            });\n    }\n\n    void handle_receive(const boost::system::error_code& error) {\n        if (!error) {\n            auto message = std::make_shared<std::string>(make_daytime_string());\n            socket_.async_send_to(boost::asio::buffer(*message), remote_endpoint_,\n                [this, message](const boost::system::error_code& /*error*/, std::size_t /*bytes_transferred*/) {\n                    handle_send(message);\n                });\n            start_receive();\n        }\n    }\n\n    void handle_send(std::shared_ptr<std::string> /*message*/) {\n        // No action needed after sending the message\n    }\n\n    std::string make_daytime_string() {\n        std::time_t now = std::time(0);\n        return std::ctime(&now);\n    }\n\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint remote_endpoint_;\n    std::array<char, 1> recv_buffer_;\n};\n\nint main() {\n    try {\n        boost::asio::io_context io_context;\n        udp_server server(io_context);\n        io_context.run();\n    } catch (std::exception& e) {\n        std::cerr << \"Exception: \" << e.what() << \"\\n\";\n    }\n    return 0;\n}",
      "#include <boost/asio.hpp>\n#include <boost/bind/bind.hpp>\n#include <iostream>\n#include <array>\n#include <memory>\n#include <ctime>\n\nclass udp_server {\npublic:\n    udp_server(boost::asio::io_context& io_context)\n        : socket_(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), 12345)) {\n        start_receive();\n    }\n\nprivate:\n    void start_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(recv_buffer_), remote_endpoint_,\n            boost::bind(&udp_server::handle_receive, this,\n                        boost::asio::placeholders::error));\n    }\n\n    void handle_receive(const boost::system::error_code& error) {\n        if (!error) {\n            auto message = std::make_shared<std::string>(make_daytime_string());\n\n            socket_.async_send_to(boost::asio::buffer(*message), remote_endpoint_,\n                boost::bind(&udp_server::handle_send, this, message));\n        }\n\n        start_receive();\n    }\n\n    void handle_send(std::shared_ptr<std::string> /*message*/) {\n        // No action needed after send\n    }\n\n    std::string make_daytime_string() {\n        std::time_t now = std::time(0);\n        return std::ctime(&now);\n    }\n\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint remote_endpoint_;\n    std::array<char, 1> recv_buffer_;\n};\n\nint main() {\n    try {\n        boost::asio::io_context io_context;\n        udp_server server(io_context);\n        io_context.run();\n    } catch (std::exception& e) {\n        std::cerr << \"Exception: \" << e.what() << \"\\n\";\n    }\n\n    return 0;\n}",
      "#include <boost/asio.hpp>\n#include <boost/bind/bind.hpp>\n#include <iostream>\n#include <array>\n#include <memory>\n#include <ctime>\n\nclass udp_server {\npublic:\n    udp_server(boost::asio::io_context& io_context)\n        : socket_(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), 12345)) {\n        start_receive();\n    }\n\nprivate:\n    void start_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(recv_buffer_), remote_endpoint_,\n            boost::bind(&udp_server::handle_receive, this,\n                        boost::asio::placeholders::error));\n    }\n\n    void handle_receive(const boost::system::error_code& error) {\n        if (!error) {\n            std::time_t now = std::time(0);\n            std::shared_ptr<std::string> message(new std::string(std::ctime(&now)));\n\n            socket_.async_send_to(boost::asio::buffer(*message), remote_endpoint_,\n                boost::bind(&udp_server::handle_send, this, message));\n\n            start_receive();\n        }\n    }\n\n    void handle_send(std::shared_ptr<std::string> /*message*/) {\n        // No further action needed after sending the response\n    }\n\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint remote_endpoint_;\n    std::array<char, 1> recv_buffer_;\n};\n\nint main() {\n    try {\n        boost::asio::io_context io_context;\n        udp_server server(io_context);\n        io_context.run();\n    } catch (std::exception& e) {\n        std::cerr << \"Exception: \" << e.what() << std::endl;\n    }\n\n    return 0;\n}",
      "#include <boost/asio.hpp>\n#include <iostream>\n#include <array>\n#include <memory>\n#include <ctime>\n\nclass udp_server {\npublic:\n    udp_server(boost::asio::io_context& io_context)\n        : socket_(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), 12345)) {\n        start_receive();\n    }\n\nprivate:\n    void start_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(recv_buffer_), remote_endpoint_,\n            [this](const boost::system::error_code& error, std::size_t /*bytes_transferred*/) {\n                handle_receive(error);\n            });\n    }\n\n    void handle_receive(const boost::system::error_code& error) {\n        if (!error) {\n            auto message = std::make_shared<std::string>(make_daytime_string());\n            socket_.async_send_to(boost::asio::buffer(*message), remote_endpoint_,\n                [this, message](const boost::system::error_code& /*error*/, std::size_t /*bytes_transferred*/) {\n                    handle_send(message);\n                });\n\n            start_receive();\n        }\n    }\n\n    void handle_send(std::shared_ptr<std::string> /*message*/) {\n        // No action needed after send\n    }\n\n    std::string make_daytime_string() {\n        std::time_t now = std::time(0);\n        return std::ctime(&now);\n    }\n\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint remote_endpoint_;\n    std::array<char, 1> recv_buffer_;\n};\n\nint main() {\n    try {\n        boost::asio::io_context io_context;\n        udp_server server(io_context);\n        io_context.run();\n    } catch (std::exception& e) {\n        std::cerr << \"Exception: \" << e.what() << \"\\n\";\n    }\n\n    return 0;\n}"
    ],
    "unmatched_results": [
      "class udp_server {\npublic:\n    udp_server(boost::asio::io_context& io_context)\n        : socket_(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), 12345)) {\n        start_receive();\n    }\n\nprivate:\n    void start_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(recv_buffer_), remote_endpoint_,\n            [this](const boost::system::error_code& error, std::size_t) {\n                handle_receive(error);\n            });\n    }\n\n    void handle_receive(const boost::system::error_code& error) {\n        if (!error) {\n            auto message = std::make_shared<std::string>(make_daytime_string());\n            socket_.async_send_to(\n                boost::asio::buffer(*message), remote_endpoint_,\n                [this, message](const boost::system::error_code&, std::size_t) {\n                    handle_send(message);\n                });\n            start_receive();\n        }\n    }\n\n    void handle_send(std::shared_ptr<std::string> /*message*/) {\n        // No action needed after send\n    }\n\n    std::string make_daytime_string() const {\n        std::time_t now = std::time(nullptr);\n        return std::ctime(&now);\n    }\n\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint remote_endpoint_;\n    std::array<char, 1> recv_buffer_;\n};",
      "class udp_server {\npublic:\n    udp_server(boost::asio::io_context& io_context)\n        : socket_(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), 12345)) {\n        start_receive();\n    }\n\nprivate:\n    void start_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(recv_buffer_), remote_endpoint_,\n            [this](const boost::system::error_code& error, std::size_t) {\n                handle_receive(error);\n            });\n    }\n\n    void handle_receive(const boost::system::error_code& error) {\n        if (!error) {\n            auto message = std::make_shared<std::string>(make_daytime_string());\n            socket_.async_send_to(\n                boost::asio::buffer(*message), remote_endpoint_,\n                [this, message](const boost::system::error_code&, std::size_t) {\n                    handle_send(message);\n                });\n            start_receive();\n        }\n    }\n\n    void handle_send(std::shared_ptr<std::string> /*message*/) {\n        // No action needed after send\n    }\n\n    std::string make_daytime_string() const {\n        using namespace std; // For time_t, time and ctime;\n        time_t now = time(0);\n        return ctime(&now);\n    }\n\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint remote_endpoint_;\n    std::array<char, 1> recv_buffer_;\n};"
    ],
    "match_count": 8,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 29,
    "Instruction": "Task Description: Implement a UDP server class using Boost.Asio that listens for incoming datagrams and responds with the current daytime string.\n\nClass Description: The `udp_server` class implements a UDP server that listens on a specified port (13 in this case) for incoming datagrams. When a datagram is received, it responds with the current daytime string. The class uses asynchronous operations for receiving and sending data.\n\nAttributes:\n- socket_: [boost::asio::ip::udp::socket] - The UDP socket used for communication\n- remote_endpoint_: [boost::asio::ip::udp::endpoint] - Stores the endpoint of the last received datagram\n- recv_buffer_: [std::array<char, 1>] - Buffer for storing received data\n\nMethods:\n- Constructor: [udp_server]([boost::asio::io_context& io_context]) -> [void] - Initializes the UDP socket and starts listening for incoming datagrams\n- start_receive: [start_receive]() -> [void] - Begins an asynchronous receive operation on the socket\n- handle_receive: [handle_receive]([const boost::system::error_code& error, std::size_t bytes_transferred]) -> [void] - Handles the completion of a receive operation and initiates a response\n- handle_send: [handle_send]([std::shared_ptr<std::string> message, const boost::system::error_code& error, std::size_t bytes_transferred]) -> [void] - Handles the completion of a send operation\n- make_daytime_string: [make_daytime_string]() -> [std::string] - Generates and returns the current daytime string",
    "Canonical_solution": "#include <boost/asio.hpp>\n#include <memory>\n#include <string>\n#include <array>\n\nusing boost::asio::ip::udp;\n\nclass udp_server\n{\npublic:\n  udp_server(boost::asio::io_context& io_context)\n    : socket_(io_context, udp::endpoint(udp::v4(), 13))\n  {\n    start_receive();\n  }\n\nprivate:\n  void start_receive()\n  {\n    socket_.async_receive_from(\n        boost::asio::buffer(recv_buffer_), remote_endpoint_,\n        std::bind(&udp_server::handle_receive, this,\n          boost::asio::placeholders::error,\n          boost::asio::placeholders::bytes_transferred));\n  }\n\n  void handle_receive(const boost::system::error_code& error,\n      std::size_t /*bytes_transferred*/)\n  {\n    if (!error)\n    {\n      std::shared_ptr<std::string> message(\n          new std::string(make_daytime_string()));\n\n      socket_.async_send_to(boost::asio::buffer(*message), remote_endpoint_,\n          std::bind(&udp_server::handle_send, this, message,\n            boost::asio::placeholders::error,\n            boost::asio::placeholders::bytes_transferred));\n\n      start_receive();\n    }\n  }\n\n  void handle_send(std::shared_ptr<std::string> /*message*/,\n      const boost::system::error_code& /*error*/,\n      std::size_t /*bytes_transferred*/)\n  {\n  }\n\n  std::string make_daytime_string()\n  {\n    using namespace std;\n    time_t now = time(0);\n    return ctime(&now);\n  }\n\n  udp::socket socket_;\n  udp::endpoint remote_endpoint_;\n  std::array<char, 1> recv_buffer_;\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 153,
    "matched_results": [
      "#include <boost/asio.hpp>\n#include <boost/bind/bind.hpp>\n#include <array>\n#include <ctime>\n#include <string>\n\nclass udp_server {\npublic:\n    udp_server(boost::asio::io_context& io_context)\n        : socket_(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), 13)) {\n        start_receive();\n    }\n\nprivate:\n    void start_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(recv_buffer_), remote_endpoint_,\n            boost::bind(&udp_server::handle_receive, this,\n                        boost::asio::placeholders::error,\n                        boost::asio::placeholders::bytes_transferred));\n    }\n\n    void handle_receive(const boost::system::error_code& error, std::size_t bytes_transferred) {\n        if (!error) {\n            std::shared_ptr<std::string> message(new std::string(make_daytime_string()));\n\n            socket_.async_send_to(boost::asio::buffer(*message), remote_endpoint_,\n                                  boost::bind(&udp_server::handle_send, this, message,\n                                              boost::asio::placeholders::error,\n                                              boost::asio::placeholders::bytes_transferred));\n\n            start_receive();\n        }\n    }\n\n    void handle_send(std::shared_ptr<std::string> /*message*/,\n                     const boost::system::error_code& /*error*/,\n                     std::size_t /*bytes_transferred*/) {\n    }\n\n    std::string make_daytime_string() {\n        std::time_t now = std::time(0);\n        return std::ctime(&now);\n    }\n\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint remote_endpoint_;\n    std::array<char, 1> recv_buffer_;\n};",
      "#include <boost/asio.hpp>\n#include <boost/bind/bind.hpp>\n#include <array>\n#include <ctime>\n#include <string>\n#include <memory>\n\nclass udp_server {\npublic:\n    udp_server(boost::asio::io_context& io_context)\n        : socket_(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), 13)) {\n        start_receive();\n    }\n\nprivate:\n    void start_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(recv_buffer_), remote_endpoint_,\n            boost::bind(&udp_server::handle_receive, this,\n                        boost::asio::placeholders::error,\n                        boost::asio::placeholders::bytes_transferred));\n    }\n\n    void handle_receive(const boost::system::error_code& error, std::size_t /*bytes_transferred*/) {\n        if (!error) {\n            std::shared_ptr<std::string> message(new std::string(make_daytime_string()));\n\n            socket_.async_send_to(boost::asio::buffer(*message), remote_endpoint_,\n                                  boost::bind(&udp_server::handle_send, this, message,\n                                              boost::asio::placeholders::error,\n                                              boost::asio::placeholders::bytes_transferred));\n\n            start_receive();\n        }\n    }\n\n    void handle_send(std::shared_ptr<std::string> /*message*/, const boost::system::error_code& /*error*/, std::size_t /*bytes_transferred*/) {\n    }\n\n    std::string make_daytime_string() {\n        std::time_t now = std::time(0);\n        return std::ctime(&now);\n    }\n\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint remote_endpoint_;\n    std::array<char, 1> recv_buffer_;\n};\n\nint main() {\n    try {\n        boost::asio::io_context io_context;\n        udp_server server(io_context);\n        io_context.run();\n    } catch (std::exception& e) {\n        std::cerr << e.what() << std::endl;\n    }\n    return 0;\n}",
      "#include <boost/asio.hpp>\n#include <iostream>\n#include <array>\n#include <memory>\n#include <ctime>\n\nclass udp_server {\npublic:\n    udp_server(boost::asio::io_context& io_context)\n        : socket_(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), 13)) {\n        start_receive();\n    }\n\nprivate:\n    void start_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(recv_buffer_), remote_endpoint_,\n            [this](const boost::system::error_code& error, std::size_t bytes_transferred) {\n                handle_receive(error, bytes_transferred);\n            });\n    }\n\n    void handle_receive(const boost::system::error_code& error, std::size_t bytes_transferred) {\n        if (!error || error == boost::asio::error::message_size) {\n            auto message = std::make_shared<std::string>(make_daytime_string());\n\n            socket_.async_send_to(boost::asio::buffer(*message), remote_endpoint_,\n                [this, message](const boost::system::error_code& error, std::size_t bytes_transferred) {\n                    handle_send(message, error, bytes_transferred);\n                });\n\n            start_receive();\n        }\n    }\n\n    void handle_send(std::shared_ptr<std::string> message, const boost::system::error_code& error, std::size_t bytes_transferred) {\n        // No action needed on send completion\n    }\n\n    std::string make_daytime_string() {\n        std::time_t now = std::time(0);\n        return std::ctime(&now);\n    }\n\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint remote_endpoint_;\n    std::array<char, 1> recv_buffer_;\n};\n\nint main() {\n    try {\n        boost::asio::io_context io_context;\n        udp_server server(io_context);\n        io_context.run();\n    } catch (std::exception& e) {\n        std::cerr << \"Exception: \" << e.what() << \"\\n\";\n    }\n\n    return 0;\n}",
      "#include <boost/asio.hpp>\n#include <iostream>\n#include <string>\n#include <array>\n#include <memory>\n#include <ctime>\n\nclass udp_server {\npublic:\n    udp_server(boost::asio::io_context& io_context)\n        : socket_(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), 13)) {\n        start_receive();\n    }\n\nprivate:\n    void start_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(recv_buffer_), remote_endpoint_,\n            [this](const boost::system::error_code& error, std::size_t bytes_transferred) {\n                handle_receive(error, bytes_transferred);\n            });\n    }\n\n    void handle_receive(const boost::system::error_code& error, std::size_t bytes_transferred) {\n        if (!error || error == boost::asio::error::message_size) {\n            auto message = std::make_shared<std::string>(make_daytime_string());\n\n            socket_.async_send_to(boost::asio::buffer(*message), remote_endpoint_,\n                [this, message](const boost::system::error_code& error, std::size_t bytes_transferred) {\n                    handle_send(message, error, bytes_transferred);\n                });\n\n            start_receive();\n        }\n    }\n\n    void handle_send(std::shared_ptr<std::string> /*message*/,\n                     const boost::system::error_code& /*error*/,\n                     std::size_t /*bytes_transferred*/) {\n    }\n\n    std::string make_daytime_string() {\n        using namespace std; // For time_t, time and ctime;\n        time_t now = time(0);\n        return ctime(&now);\n    }\n\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint remote_endpoint_;\n    std::array<char, 1> recv_buffer_;\n};\n\nint main() {\n    try {\n        boost::asio::io_context io_context;\n        udp_server server(io_context);\n        io_context.run();\n    } catch (std::exception& e) {\n        std::cerr << \"Exception: \" << e.what() << std::endl;\n    }\n\n    return 0;\n}",
      "#include <boost/asio.hpp>\n#include <iostream>\n#include <string>\n#include <ctime>\n#include <array>\n#include <memory>\n\nclass udp_server {\npublic:\n    udp_server(boost::asio::io_context& io_context)\n        : socket_(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), 13)) {\n        start_receive();\n    }\n\nprivate:\n    void start_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(recv_buffer_), remote_endpoint_,\n            [this](const boost::system::error_code& error, std::size_t bytes_transferred) {\n                handle_receive(error, bytes_transferred);\n            });\n    }\n\n    void handle_receive(const boost::system::error_code& error, std::size_t bytes_transferred) {\n        if (!error || error == boost::asio::error::message_size) {\n            auto message = std::make_shared<std::string>(make_daytime_string());\n\n            socket_.async_send_to(boost::asio::buffer(*message), remote_endpoint_,\n                [this, message](const boost::system::error_code& error, std::size_t bytes_transferred) {\n                    handle_send(message, error, bytes_transferred);\n                });\n\n            start_receive();\n        }\n    }\n\n    void handle_send(std::shared_ptr<std::string> /*message*/, const boost::system::error_code& /*error*/, std::size_t /*bytes_transferred*/) {\n    }\n\n    std::string make_daytime_string() {\n        using namespace std; \n        time_t now = time(0);\n        return ctime(&now);\n    }\n\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint remote_endpoint_;\n    std::array<char, 1> recv_buffer_;\n};\n\nint main() {\n    try {\n        boost::asio::io_context io_context;\n        udp_server server(io_context);\n        io_context.run();\n    } catch (std::exception& e) {\n        std::cerr << \"Exception: \" << e.what() << std::endl;\n    }\n\n    return 0;\n}",
      "#include <boost/asio.hpp>\n#include <iostream>\n#include <string>\n#include <array>\n#include <memory>\n#include <ctime>\n\nclass udp_server {\npublic:\n    udp_server(boost::asio::io_context& io_context)\n        : socket_(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), 13)) {\n        start_receive();\n    }\n\nprivate:\n    void start_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(recv_buffer_), remote_endpoint_,\n            [this](const boost::system::error_code& error, std::size_t bytes_transferred) {\n                handle_receive(error, bytes_transferred);\n            });\n    }\n\n    void handle_receive(const boost::system::error_code& error, std::size_t bytes_transferred) {\n        if (!error || error == boost::asio::error::message_size) {\n            auto message = std::make_shared<std::string>(make_daytime_string());\n\n            socket_.async_send_to(boost::asio::buffer(*message), remote_endpoint_,\n                [this, message](const boost::system::error_code& error, std::size_t bytes_transferred) {\n                    handle_send(message, error, bytes_transferred);\n                });\n\n            start_receive();\n        }\n    }\n\n    void handle_send(std::shared_ptr<std::string> /*message*/,\n                     const boost::system::error_code& /*error*/,\n                     std::size_t /*bytes_transferred*/) {\n    }\n\n    std::string make_daytime_string() {\n        std::time_t now = std::time(0);\n        return std::ctime(&now);\n    }\n\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint remote_endpoint_;\n    std::array<char, 1> recv_buffer_;\n};\n\nint main() {\n    try {\n        boost::asio::io_context io_context;\n        udp_server server(io_context);\n        io_context.run();\n    } catch (std::exception& e) {\n        std::cerr << \"Exception: \" << e.what() << \"\\n\";\n    }\n\n    return 0;\n}",
      "#include <boost/asio.hpp>\n#include <boost/bind/bind.hpp>\n#include <array>\n#include <ctime>\n#include <string>\n#include <memory>\n\nclass udp_server {\npublic:\n    udp_server(boost::asio::io_context& io_context)\n        : socket_(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), 13)) {\n        start_receive();\n    }\n\nprivate:\n    void start_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(recv_buffer_), remote_endpoint_,\n            boost::bind(&udp_server::handle_receive, this,\n                        boost::asio::placeholders::error,\n                        boost::asio::placeholders::bytes_transferred));\n    }\n\n    void handle_receive(const boost::system::error_code& error, std::size_t bytes_transferred) {\n        if (!error || error == boost::asio::error::message_size) {\n            std::shared_ptr<std::string> message(\n                new std::string(make_daytime_string()));\n\n            socket_.async_send_to(boost::asio::buffer(*message), remote_endpoint_,\n                boost::bind(&udp_server::handle_send, this, message,\n                            boost::asio::placeholders::error,\n                            boost::asio::placeholders::bytes_transferred));\n\n            start_receive();\n        }\n    }\n\n    void handle_send(std::shared_ptr<std::string> /*message*/,\n                     const boost::system::error_code& /*error*/,\n                     std::size_t /*bytes_transferred*/) {\n    }\n\n    std::string make_daytime_string() {\n        using namespace std; // For time_t, time and ctime;\n        time_t now = time(0);\n        return ctime(&now);\n    }\n\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint remote_endpoint_;\n    std::array<char, 1> recv_buffer_;\n};",
      "#include <boost/asio.hpp>\n#include <boost/bind/bind.hpp>\n#include <array>\n#include <ctime>\n#include <iostream>\n#include <memory>\n#include <string>\n\nclass udp_server {\npublic:\n    udp_server(boost::asio::io_context& io_context)\n        : socket_(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), 13)) {\n        start_receive();\n    }\n\nprivate:\n    void start_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(recv_buffer_), remote_endpoint_,\n            boost::bind(&udp_server::handle_receive, this,\n                        boost::asio::placeholders::error,\n                        boost::asio::placeholders::bytes_transferred));\n    }\n\n    void handle_receive(const boost::system::error_code& error, std::size_t /*bytes_transferred*/) {\n        if (!error) {\n            auto message = std::make_shared<std::string>(make_daytime_string());\n\n            socket_.async_send_to(boost::asio::buffer(*message), remote_endpoint_,\n                boost::bind(&udp_server::handle_send, this, message,\n                            boost::asio::placeholders::error,\n                            boost::asio::placeholders::bytes_transferred));\n\n            start_receive();\n        }\n    }\n\n    void handle_send(std::shared_ptr<std::string> /*message*/, const boost::system::error_code& /*error*/, std::size_t /*bytes_transferred*/) {\n    }\n\n    std::string make_daytime_string() {\n        std::time_t now = std::time(0);\n        return std::ctime(&now);\n    }\n\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint remote_endpoint_;\n    std::array<char, 1> recv_buffer_;\n};\n\nint main() {\n    try {\n        boost::asio::io_context io_context;\n        udp_server server(io_context);\n        io_context.run();\n    } catch (std::exception& e) {\n        std::cerr << e.what() << std::endl;\n    }\n    return 0;\n}",
      "#include <boost/asio.hpp>\n#include <iostream>\n#include <string>\n#include <array>\n#include <memory>\n#include <ctime>\n\nclass udp_server {\npublic:\n    udp_server(boost::asio::io_context& io_context)\n        : socket_(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), 13)) {\n        start_receive();\n    }\n\nprivate:\n    void start_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(recv_buffer_), remote_endpoint_,\n            [this](const boost::system::error_code& error, std::size_t bytes_transferred) {\n                handle_receive(error, bytes_transferred);\n            });\n    }\n\n    void handle_receive(const boost::system::error_code& error, std::size_t bytes_transferred) {\n        if (!error || error == boost::asio::error::message_size) {\n            auto message = std::make_shared<std::string>(make_daytime_string());\n\n            socket_.async_send_to(boost::asio::buffer(*message), remote_endpoint_,\n                [this, message](const boost::system::error_code& error, std::size_t bytes_transferred) {\n                    handle_send(message, error, bytes_transferred);\n                });\n\n            start_receive();\n        }\n    }\n\n    void handle_send(std::shared_ptr<std::string> message, const boost::system::error_code& error, std::size_t bytes_transferred) {\n        // No action needed after sending\n    }\n\n    std::string make_daytime_string() {\n        std::time_t now = std::time(0);\n        return std::ctime(&now);\n    }\n\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint remote_endpoint_;\n    std::array<char, 1> recv_buffer_;\n};\n\nint main() {\n    try {\n        boost::asio::io_context io_context;\n        udp_server server(io_context);\n        io_context.run();\n    } catch (std::exception& e) {\n        std::cerr << \"Exception: \" << e.what() << \"\\n\";\n    }\n\n    return 0;\n}",
      "#include <boost/asio.hpp>\n#include <iostream>\n#include <string>\n#include <array>\n#include <memory>\n#include <ctime>\n\nclass udp_server {\npublic:\n    udp_server(boost::asio::io_context& io_context)\n        : socket_(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), 13)) {\n        start_receive();\n    }\n\nprivate:\n    void start_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(recv_buffer_), remote_endpoint_,\n            [this](const boost::system::error_code& error, std::size_t bytes_transferred) {\n                handle_receive(error, bytes_transferred);\n            });\n    }\n\n    void handle_receive(const boost::system::error_code& error, std::size_t bytes_transferred) {\n        if (!error || error == boost::asio::error::message_size) {\n            auto message = std::make_shared<std::string>(make_daytime_string());\n\n            socket_.async_send_to(boost::asio::buffer(*message), remote_endpoint_,\n                [this, message](const boost::system::error_code& error, std::size_t bytes_transferred) {\n                    handle_send(message, error, bytes_transferred);\n                });\n\n            start_receive();\n        }\n    }\n\n    void handle_send(std::shared_ptr<std::string> message, const boost::system::error_code& error, std::size_t bytes_transferred) {\n        // No action needed on send completion\n    }\n\n    std::string make_daytime_string() {\n        std::time_t now = std::time(0);\n        return std::ctime(&now);\n    }\n\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint remote_endpoint_;\n    std::array<char, 1> recv_buffer_;\n};\n\nint main() {\n    try {\n        boost::asio::io_context io_context;\n        udp_server server(io_context);\n        io_context.run();\n    } catch (std::exception& e) {\n        std::cerr << \"Exception: \" << e.what() << \"\\n\";\n    }\n\n    return 0;\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 3,
    "Instruction": "Task Description: Create a C++ class that implements HTTP client functionality using libcurl for making HTTP requests to a specified base URL.\n\nClass Description: The HTTPClient class provides a simple interface for making HTTP GET requests to a given base URL. It handles libcurl initialization, request configuration, execution, and cleanup, while providing a method to append endpoints to the base URL and make requests.\n\nAttributes:\nbaseURL: std::string - The base URL to which endpoints will be appended for HTTP requests\n\nMethods:\nmakeRequest: makeRequest(const std::string& endpoint) -> std::string - Makes an HTTP GET request to the base URL plus the specified endpoint, returning the response as a string\nwrite_to_string: write_to_string(void* ptr, size_t size, size_t count, void* stream) -> size_t - Static callback function for libcurl to write response data into a string",
    "Canonical_solution": "#include <curl/curl.h>\n#include <string>\n#include <sstream>\n#include \"json.hpp\"\n\nusing json = nlohmann::json;\n\nclass HTTPClient {\npublic:\n    HTTPClient(const std::string& baseUrl) : baseURL(baseUrl) {}\n\n    std::string makeRequest(const std::string& endpoint) {\n        CURL* curl = curl_easy_init();\n        std::string response;\n\n        if (curl) {\n            std::string URL = baseURL + endpoint;\n            curl_easy_setopt(curl, CURLOPT_URL, URL.c_str());\n            curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, write_to_string);\n            curl_easy_setopt(curl, CURLOPT_WRITEDATA, &response);\n            curl_easy_perform(curl);\n            curl_easy_cleanup(curl);\n        }\n\n        return response;\n    }\n\nprivate:\n    static size_t write_to_string(void* ptr, size_t size, size_t count, void* stream) {\n        ((std::string*)stream)->append((char*)ptr, 0, size*count);\n        return size*count;\n    }\n\n    std::string baseURL;\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 146,
    "matched_results": [
      "#include <iostream>\n#include <string>\n#include <curl/curl.h>\n\nclass HTTPClient {\npublic:\n    HTTPClient(const std::string& baseURL) : baseURL(baseURL) {\n        curl_global_init(CURL_GLOBAL_DEFAULT);\n    }\n\n    ~HTTPClient() {\n        curl_global_cleanup();\n    }\n\n    std::string makeRequest(const std::string& endpoint) {\n        CURL* curl = curl_easy_init();\n        if (!curl) {\n            throw std::runtime_error(\"Failed to initialize CURL\");\n        }\n\n        std::string response;\n        std::string url = baseURL + endpoint;\n\n        curl_easy_setopt(curl, CURLOPT_URL, url.c_str());\n        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, write_to_string);\n        curl_easy_setopt(curl, CURLOPT_WRITEDATA, &response);\n\n        CURLcode res = curl_easy_perform(curl);\n        if (res != CURLE_OK) {\n            curl_easy_cleanup(curl);\n            throw std::runtime_error(\"CURL request failed: \" + std::string(curl_easy_strerror(res)));\n        }\n\n        curl_easy_cleanup(curl);\n        return response;\n    }\n\nprivate:\n    std::string baseURL;\n\n    static size_t write_to_string(void* ptr, size_t size, size_t count, void* stream) {\n        ((std::string*)stream)->append((char*)ptr, size * count);\n        return size * count;\n    }\n};",
      "#include <iostream>\n#include <string>\n#include <curl/curl.h>\n\nclass HTTPClient {\npublic:\n    HTTPClient(const std::string& baseURL) : baseURL(baseURL) {\n        curl_global_init(CURL_GLOBAL_DEFAULT);\n    }\n\n    ~HTTPClient() {\n        curl_global_cleanup();\n    }\n\n    std::string makeRequest(const std::string& endpoint) {\n        CURL* curl = curl_easy_init();\n        if (!curl) {\n            return \"Failed to initialize CURL\";\n        }\n\n        std::string url = baseURL + endpoint;\n        std::string response;\n\n        curl_easy_setopt(curl, CURLOPT_URL, url.c_str());\n        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, write_to_string);\n        curl_easy_setopt(curl, CURLOPT_WRITEDATA, &response);\n\n        CURLcode res = curl_easy_perform(curl);\n        if (res != CURLE_OK) {\n            response = \"Request failed: \" + std::string(curl_easy_strerror(res));\n        }\n\n        curl_easy_cleanup(curl);\n        return response;\n    }\n\nprivate:\n    std::string baseURL;\n\n    static size_t write_to_string(void* ptr, size_t size, size_t count, void* stream) {\n        ((std::string*)stream)->append((char*)ptr, size * count);\n        return size * count;\n    }\n};",
      "#include <iostream>\n#include <string>\n#include <curl/curl.h>\n\nclass HTTPClient {\npublic:\n    HTTPClient(const std::string& baseURL) : baseURL(baseURL) {\n        curl_global_init(CURL_GLOBAL_DEFAULT);\n    }\n\n    ~HTTPClient() {\n        curl_global_cleanup();\n    }\n\n    std::string makeRequest(const std::string& endpoint) {\n        CURL* curl = curl_easy_init();\n        if (!curl) {\n            return \"Failed to initialize CURL\";\n        }\n\n        std::string url = baseURL + endpoint;\n        std::string response;\n\n        curl_easy_setopt(curl, CURLOPT_URL, url.c_str());\n        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, write_to_string);\n        curl_easy_setopt(curl, CURLOPT_WRITEDATA, &response);\n\n        CURLcode res = curl_easy_perform(curl);\n        if (res != CURLE_OK) {\n            response = \"Request failed: \" + std::string(curl_easy_strerror(res));\n        }\n\n        curl_easy_cleanup(curl);\n        return response;\n    }\n\nprivate:\n    std::string baseURL;\n\n    static size_t write_to_string(void* ptr, size_t size, size_t count, void* stream) {\n        ((std::string*)stream)->append((char*)ptr, size * count);\n        return size * count;\n    }\n};",
      "#include <iostream>\n#include <string>\n#include <curl/curl.h>\n\nclass HTTPClient {\npublic:\n    HTTPClient(const std::string& baseURL) : baseURL(baseURL) {\n        curl_global_init(CURL_GLOBAL_DEFAULT);\n    }\n\n    ~HTTPClient() {\n        curl_global_cleanup();\n    }\n\n    std::string makeRequest(const std::string& endpoint) {\n        CURL* curl = curl_easy_init();\n        if (!curl) {\n            return \"Failed to initialize CURL\";\n        }\n\n        std::string url = baseURL + endpoint;\n        std::string response;\n\n        curl_easy_setopt(curl, CURLOPT_URL, url.c_str());\n        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, write_to_string);\n        curl_easy_setopt(curl, CURLOPT_WRITEDATA, &response);\n\n        CURLcode res = curl_easy_perform(curl);\n        if (res != CURLE_OK) {\n            response = \"Request failed: \" + std::string(curl_easy_strerror(res));\n        }\n\n        curl_easy_cleanup(curl);\n        return response;\n    }\n\nprivate:\n    std::string baseURL;\n\n    static size_t write_to_string(void* ptr, size_t size, size_t count, void* stream) {\n        ((std::string*)stream)->append((char*)ptr, size * count);\n        return size * count;\n    }\n};",
      "#include <iostream>\n#include <string>\n#include <curl/curl.h>\n\nclass HTTPClient {\npublic:\n    HTTPClient(const std::string& baseURL) : baseURL(baseURL) {\n        curl_global_init(CURL_GLOBAL_DEFAULT);\n    }\n\n    ~HTTPClient() {\n        curl_global_cleanup();\n    }\n\n    std::string makeRequest(const std::string& endpoint) {\n        CURL* curl = curl_easy_init();\n        if (!curl) {\n            return \"Failed to initialize CURL\";\n        }\n\n        std::string response;\n        std::string url = baseURL + endpoint;\n        curl_easy_setopt(curl, CURLOPT_URL, url.c_str());\n        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, write_to_string);\n        curl_easy_setopt(curl, CURLOPT_WRITEDATA, &response);\n\n        CURLcode res = curl_easy_perform(curl);\n        if (res != CURLE_OK) {\n            response = \"Request failed: \" + std::string(curl_easy_strerror(res));\n        }\n\n        curl_easy_cleanup(curl);\n        return response;\n    }\n\nprivate:\n    std::string baseURL;\n\n    static size_t write_to_string(void* ptr, size_t size, size_t count, void* stream) {\n        ((std::string*)stream)->append((char*)ptr, size * count);\n        return size * count;\n    }\n};",
      "#include <iostream>\n#include <string>\n#include <curl/curl.h>\n\nclass HTTPClient {\npublic:\n    HTTPClient(const std::string& baseURL) : baseURL(baseURL) {\n        curl_global_init(CURL_GLOBAL_DEFAULT);\n    }\n\n    ~HTTPClient() {\n        curl_global_cleanup();\n    }\n\n    std::string makeRequest(const std::string& endpoint) {\n        CURL* curl = curl_easy_init();\n        if (!curl) {\n            throw std::runtime_error(\"Failed to initialize CURL\");\n        }\n\n        std::string response;\n        std::string url = baseURL + endpoint;\n\n        curl_easy_setopt(curl, CURLOPT_URL, url.c_str());\n        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, write_to_string);\n        curl_easy_setopt(curl, CURLOPT_WRITEDATA, &response);\n\n        CURLcode res = curl_easy_perform(curl);\n        if (res != CURLE_OK) {\n            curl_easy_cleanup(curl);\n            throw std::runtime_error(\"CURL request failed: \" + std::string(curl_easy_strerror(res)));\n        }\n\n        curl_easy_cleanup(curl);\n        return response;\n    }\n\nprivate:\n    std::string baseURL;\n\n    static size_t write_to_string(void* ptr, size_t size, size_t count, void* stream) {\n        ((std::string*)stream)->append((char*)ptr, size * count);\n        return size * count;\n    }\n};",
      "#include <iostream>\n#include <string>\n#include <curl/curl.h>\n\nclass HTTPClient {\npublic:\n    HTTPClient(const std::string& baseURL) : baseURL(baseURL) {\n        curl_global_init(CURL_GLOBAL_DEFAULT);\n    }\n\n    ~HTTPClient() {\n        curl_global_cleanup();\n    }\n\n    std::string makeRequest(const std::string& endpoint) {\n        CURL* curl = curl_easy_init();\n        if (!curl) {\n            throw std::runtime_error(\"Failed to initialize CURL\");\n        }\n\n        std::string url = baseURL + endpoint;\n        std::string response;\n\n        curl_easy_setopt(curl, CURLOPT_URL, url.c_str());\n        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, write_to_string);\n        curl_easy_setopt(curl, CURLOPT_WRITEDATA, &response);\n\n        CURLcode res = curl_easy_perform(curl);\n        if (res != CURLE_OK) {\n            curl_easy_cleanup(curl);\n            throw std::runtime_error(curl_easy_strerror(res));\n        }\n\n        curl_easy_cleanup(curl);\n        return response;\n    }\n\nprivate:\n    std::string baseURL;\n\n    static size_t write_to_string(void* ptr, size_t size, size_t count, void* stream) {\n        ((std::string*)stream)->append((char*)ptr, size * count);\n        return size * count;\n    }\n};"
    ],
    "unmatched_results": [
      "#include <iostream>\n#include <string>\n#include <curl/curl.h>\n\nclass HTTPClient {\npublic:\n    HTTPClient(const std::string& baseURL) : baseURL(baseURL) {\n        curl_global_init(CURL_GLOBAL_DEFAULT);\n        curl = curl_easy_init();\n    }\n\n    ~HTTPClient() {\n        if (curl) {\n            curl_easy_cleanup(curl);\n        }\n        curl_global_cleanup();\n    }\n\n    std::string makeRequest(const std::string& endpoint) {\n        std::string url = baseURL + endpoint;\n        std::string response;\n\n        if (curl) {\n            curl_easy_setopt(curl, CURLOPT_URL, url.c_str());\n            curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, write_to_string);\n            curl_easy_setopt(curl, CURLOPT_WRITEDATA, &response);\n\n            CURLcode res = curl_easy_perform(curl);\n            if (res != CURLE_OK) {\n                std::cerr << \"curl_easy_perform() failed: \" << curl_easy_strerror(res) << std::endl;\n            }\n        }\n\n        return response;\n    }\n\nprivate:\n    static size_t write_to_string(void* ptr, size_t size, size_t count, void* stream) {\n        std::string* str = static_cast<std::string*>(stream);\n        size_t totalSize = size * count;\n        str->append(static_cast<char*>(ptr), totalSize);\n        return totalSize;\n    }\n\n    std::string baseURL;\n    CURL* curl;\n};",
      "#include <curl/curl.h>\n#include <string>\n\nclass HTTPClient {\npublic:\n    HTTPClient(const std::string& baseURL) : baseURL(baseURL) {\n        curl_global_init(CURL_GLOBAL_DEFAULT);\n        curl = curl_easy_init();\n    }\n\n    ~HTTPClient() {\n        if (curl) {\n            curl_easy_cleanup(curl);\n        }\n        curl_global_cleanup();\n    }\n\n    std::string makeRequest(const std::string& endpoint) {\n        std::string url = baseURL + endpoint;\n        std::string response;\n\n        if (curl) {\n            curl_easy_setopt(curl, CURLOPT_URL, url.c_str());\n            curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, write_to_string);\n            curl_easy_setopt(curl, CURLOPT_WRITEDATA, &response);\n            CURLcode res = curl_easy_perform(curl);\n            if (res != CURLE_OK) {\n                return \"Request failed: \" + std::string(curl_easy_strerror(res));\n            }\n        }\n        return response;\n    }\n\nprivate:\n    std::string baseURL;\n    CURL* curl;\n\n    static size_t write_to_string(void* ptr, size_t size, size_t count, void* stream) {\n        std::string* str = static_cast<std::string*>(stream);\n        size_t totalSize = size * count;\n        str->append(static_cast<char*>(ptr), totalSize);\n        return totalSize;\n    }\n};",
      "#include <curl/curl.h>\n#include <string>\n\nclass HTTPClient {\npublic:\n    HTTPClient(const std::string& baseURL) : baseURL(baseURL) {\n        curl_global_init(CURL_GLOBAL_DEFAULT);\n        curl = curl_easy_init();\n    }\n\n    ~HTTPClient() {\n        if (curl) {\n            curl_easy_cleanup(curl);\n        }\n        curl_global_cleanup();\n    }\n\n    std::string makeRequest(const std::string& endpoint) {\n        std::string response;\n        if (curl) {\n            std::string url = baseURL + endpoint;\n            curl_easy_setopt(curl, CURLOPT_URL, url.c_str());\n            curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, write_to_string);\n            curl_easy_setopt(curl, CURLOPT_WRITEDATA, &response);\n            CURLcode res = curl_easy_perform(curl);\n            if (res != CURLE_OK) {\n                response = \"Request failed: \" + std::string(curl_easy_strerror(res));\n            }\n        }\n        return response;\n    }\n\nprivate:\n    static size_t write_to_string(void* ptr, size_t size, size_t count, void* stream) {\n        std::string* str = static_cast<std::string*>(stream);\n        size_t totalSize = size * count;\n        str->append(static_cast<char*>(ptr), totalSize);\n        return totalSize;\n    }\n\n    std::string baseURL;\n    CURL* curl;\n};"
    ],
    "match_count": 7,
    "pass@3": 0.9916666666666667,
    "pass@5": 1.0
  },
  {
    "Task_id": 30,
    "Instruction": "Task Description: Implement a UDP server class using Boost.Asio that can asynchronously receive and send datagrams.\n\nClass Description: The `server` class represents a UDP server that listens on a specified port, receives incoming datagrams asynchronously, and sends responses back to the sender. It utilizes Boost.Asio for asynchronous I/O operations.\n\nAttributes:\n- socket_: [boost::asio::ip::udp::socket] - The UDP socket used for communication\n- sender_endpoint_: [boost::asio::ip::udp::endpoint] - Stores the endpoint of the last sender\n- max_length: [enum] - Maximum size of the receive buffer (1024 bytes)\n- data_: [char[max_length]] - Buffer for storing received data\n\nMethods:\n- server: [constructor](boost::asio::io_context& io_context, short port) -> void - Initializes the UDP socket and starts the receive operation\n- do_receive: [method]() -> void - Asynchronously receives data from clients and triggers do_send if data is received\n- do_send: [method](std::size_t length) -> void - Asynchronously sends the received data back to the sender",
    "Canonical_solution": "#include <boost/asio.hpp>\n#include <boost/system/error_code.hpp>\n\nusing boost::asio::ip::udp;\n\nclass server\n{\npublic:\n  server(boost::asio::io_context& io_context, short port)\n    : socket_(io_context, udp::endpoint(udp::v4(), port))\n  {\n    do_receive();\n  }\n\n  void do_receive()\n  {\n    socket_.async_receive_from(\n        boost::asio::buffer(data_, max_length), sender_endpoint_,\n        [this](boost::system::error_code ec, std::size_t bytes_recvd)\n        {\n          if (!ec && bytes_recvd > 0)\n          {\n            do_send(bytes_recvd);\n          }\n          else\n          {\n            do_receive();\n          }\n        });\n  }\n\n  void do_send(std::size_t length)\n  {\n    socket_.async_send_to(\n        boost::asio::buffer(data_, length), sender_endpoint_,\n        [this](boost::system::error_code /*ec*/, std::size_t /*bytes_sent*/)\n        {\n          do_receive();\n        });\n  }\n\nprivate:\n  udp::socket socket_;\n  udp::endpoint sender_endpoint_;\n  enum { max_length = 1024 };\n  char data_[max_length];\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 153,
    "matched_results": [],
    "unmatched_results": [
      "class server {\npublic:\n    server(boost::asio::io_context& io_context, short port)\n        : socket_(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), port)) {\n        do_receive();\n    }\n\nprivate:\n    void do_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(data_, max_length), sender_endpoint_,\n            [this](boost::system::error_code ec, std::size_t bytes_recvd) {\n                if (!ec && bytes_recvd > 0) {\n                    do_send(bytes_recvd);\n                } else {\n                    do_receive();\n                }\n            });\n    }\n\n    void do_send(std::size_t length) {\n        socket_.async_send_to(\n            boost::asio::buffer(data_, length), sender_endpoint_,\n            [this](boost::system::error_code /*ec*/, std::size_t /*bytes_sent*/) {\n                do_receive();\n            });\n    }\n\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint sender_endpoint_;\n    enum { max_length = 1024 };\n    char data_[max_length];\n};",
      "class server {\npublic:\n    server(boost::asio::io_context& io_context, short port)\n        : socket_(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), port)) {\n        do_receive();\n    }\n\nprivate:\n    void do_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(data_, max_length), sender_endpoint_,\n            [this](boost::system::error_code ec, std::size_t bytes_recvd) {\n                if (!ec && bytes_recvd > 0) {\n                    do_send(bytes_recvd);\n                } else {\n                    do_receive();\n                }\n            });\n    }\n\n    void do_send(std::size_t length) {\n        socket_.async_send_to(\n            boost::asio::buffer(data_, length), sender_endpoint_,\n            [this](boost::system::error_code /*ec*/, std::size_t /*bytes_sent*/) {\n                do_receive();\n            });\n    }\n\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint sender_endpoint_;\n    enum { max_length = 1024 };\n    char data_[max_length];\n};",
      "class server {\npublic:\n    server(boost::asio::io_context& io_context, short port)\n        : socket_(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), port)) {\n        do_receive();\n    }\n\nprivate:\n    void do_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(data_, max_length), sender_endpoint_,\n            [this](boost::system::error_code ec, std::size_t bytes_recvd) {\n                if (!ec && bytes_recvd > 0) {\n                    do_send(bytes_recvd);\n                } else {\n                    do_receive();\n                }\n            });\n    }\n\n    void do_send(std::size_t length) {\n        socket_.async_send_to(\n            boost::asio::buffer(data_, length), sender_endpoint_,\n            [this](boost::system::error_code /*ec*/, std::size_t /*bytes_sent*/) {\n                do_receive();\n            });\n    }\n\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint sender_endpoint_;\n    enum { max_length = 1024 };\n    char data_[max_length];\n};",
      "class server {\npublic:\n    server(boost::asio::io_context& io_context, short port)\n        : socket_(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), port)) {\n        do_receive();\n    }\n\nprivate:\n    void do_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(data_, max_length), sender_endpoint_,\n            [this](boost::system::error_code ec, std::size_t bytes_recvd) {\n                if (!ec && bytes_recvd > 0) {\n                    do_send(bytes_recvd);\n                } else {\n                    do_receive();\n                }\n            });\n    }\n\n    void do_send(std::size_t length) {\n        socket_.async_send_to(\n            boost::asio::buffer(data_, length), sender_endpoint_,\n            [this](boost::system::error_code /*ec*/, std::size_t /*bytes_sent*/) {\n                do_receive();\n            });\n    }\n\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint sender_endpoint_;\n    enum { max_length = 1024 };\n    char data_[max_length];\n};",
      "class server {\npublic:\n    server(boost::asio::io_context& io_context, short port)\n        : socket_(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), port)) {\n        do_receive();\n    }\n\nprivate:\n    void do_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(data_, max_length), sender_endpoint_,\n            [this](boost::system::error_code ec, std::size_t bytes_recvd) {\n                if (!ec && bytes_recvd > 0) {\n                    do_send(bytes_recvd);\n                } else {\n                    do_receive();\n                }\n            });\n    }\n\n    void do_send(std::size_t length) {\n        socket_.async_send_to(\n            boost::asio::buffer(data_, length), sender_endpoint_,\n            [this](boost::system::error_code /*ec*/, std::size_t /*bytes_sent*/) {\n                do_receive();\n            });\n    }\n\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint sender_endpoint_;\n    enum { max_length = 1024 };\n    char data_[max_length];\n};",
      "class server {\npublic:\n    server(boost::asio::io_context& io_context, short port)\n        : socket_(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), port)) {\n        do_receive();\n    }\n\nprivate:\n    void do_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(data_, max_length), sender_endpoint_,\n            [this](boost::system::error_code ec, std::size_t bytes_recvd) {\n                if (!ec && bytes_recvd > 0) {\n                    do_send(bytes_recvd);\n                } else {\n                    do_receive();\n                }\n            });\n    }\n\n    void do_send(std::size_t length) {\n        socket_.async_send_to(\n            boost::asio::buffer(data_, length), sender_endpoint_,\n            [this](boost::system::error_code /*ec*/, std::size_t /*bytes_sent*/) {\n                do_receive();\n            });\n    }\n\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint sender_endpoint_;\n    enum { max_length = 1024 };\n    char data_[max_length];\n};",
      "class server {\npublic:\n    server(boost::asio::io_context& io_context, short port)\n        : socket_(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), port)) {\n        do_receive();\n    }\n\nprivate:\n    void do_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(data_, max_length), sender_endpoint_,\n            [this](boost::system::error_code ec, std::size_t bytes_recvd) {\n                if (!ec && bytes_recvd > 0) {\n                    do_send(bytes_recvd);\n                } else {\n                    do_receive();\n                }\n            });\n    }\n\n    void do_send(std::size_t length) {\n        socket_.async_send_to(\n            boost::asio::buffer(data_, length), sender_endpoint_,\n            [this](boost::system::error_code /*ec*/, std::size_t /*bytes_sent*/) {\n                do_receive();\n            });\n    }\n\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint sender_endpoint_;\n    enum { max_length = 1024 };\n    char data_[max_length];\n};",
      "class server {\npublic:\n    server(boost::asio::io_context& io_context, short port)\n        : socket_(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), port)) {\n        do_receive();\n    }\n\nprivate:\n    void do_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(data_, max_length), sender_endpoint_,\n            [this](boost::system::error_code ec, std::size_t bytes_recvd) {\n                if (!ec && bytes_recvd > 0) {\n                    do_send(bytes_recvd);\n                } else {\n                    do_receive();\n                }\n            });\n    }\n\n    void do_send(std::size_t length) {\n        socket_.async_send_to(\n            boost::asio::buffer(data_, length), sender_endpoint_,\n            [this](boost::system::error_code /*ec*/, std::size_t /*bytes_sent*/) {\n                do_receive();\n            });\n    }\n\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint sender_endpoint_;\n    enum { max_length = 1024 };\n    char data_[max_length];\n};",
      "class server {\npublic:\n    server(boost::asio::io_context& io_context, short port)\n        : socket_(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), port)) {\n        do_receive();\n    }\n\nprivate:\n    void do_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(data_, max_length), sender_endpoint_,\n            [this](boost::system::error_code ec, std::size_t bytes_recvd) {\n                if (!ec && bytes_recvd > 0) {\n                    do_send(bytes_recvd);\n                } else {\n                    do_receive();\n                }\n            });\n    }\n\n    void do_send(std::size_t length) {\n        socket_.async_send_to(\n            boost::asio::buffer(data_, length), sender_endpoint_,\n            [this](boost::system::error_code /*ec*/, std::size_t /*bytes_sent*/) {\n                do_receive();\n            });\n    }\n\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint sender_endpoint_;\n    enum { max_length = 1024 };\n    char data_[max_length];\n};",
      "class server {\npublic:\n    server(boost::asio::io_context& io_context, short port)\n        : socket_(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), port)) {\n        do_receive();\n    }\n\nprivate:\n    void do_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(data_, max_length), sender_endpoint_,\n            [this](boost::system::error_code ec, std::size_t bytes_recvd) {\n                if (!ec && bytes_recvd > 0) {\n                    do_send(bytes_recvd);\n                } else {\n                    do_receive();\n                }\n            });\n    }\n\n    void do_send(std::size_t length) {\n        socket_.async_send_to(\n            boost::asio::buffer(data_, length), sender_endpoint_,\n            [this](boost::system::error_code /*ec*/, std::size_t /*bytes_sent*/) {\n                do_receive();\n            });\n    }\n\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint sender_endpoint_;\n    enum { max_length = 1024 };\n    char data_[max_length];\n};"
    ],
    "match_count": 0,
    "pass@3": 0.0,
    "pass@5": 0.0
  },
  {
    "Task_id": 31,
    "Instruction": "Task Description: Implement a UDP server using Boost.Asio that listens for incoming datagrams and responds with the current daytime string.\n\nFunction Description: The function `udp_server` creates a UDP server that listens on port 13 (daytime protocol port). When it receives any datagram from a client, it responds with the current time in string format. The server runs indefinitely until an exception occurs.\n\nInput: None\n\nOutput: None (The function runs indefinitely and sends responses to clients, but doesn't return any value)",
    "Canonical_solution": "#include <array>\n#include <string>\n#include <boost/asio.hpp>\n\nusing boost::asio::ip::udp;\n\nstd::string make_daytime_string()\n{\n  using namespace std;\n  time_t now = time(0);\n  return ctime(&now);\n}\n\nvoid udp_server()\n{\n  try\n  {\n    boost::asio::io_context io_context;\n\n    udp::socket socket(io_context, udp::endpoint(udp::v4(), 13));\n\n    for (;;)\n    {\n      std::array<char, 1> recv_buf;\n      udp::endpoint remote_endpoint;\n      socket.receive_from(boost::asio::buffer(recv_buf), remote_endpoint);\n\n      std::string message = make_daytime_string();\n\n      boost::system::error_code ignored_error;\n      socket.send_to(boost::asio::buffer(message),\n          remote_endpoint, 0, ignored_error);\n    }\n  }\n  catch (std::exception& e)\n  {\n    std::cerr << e.what() << std::endl;\n  }\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 153,
    "matched_results": [
      "#include <boost/asio.hpp>\n#include <iostream>\n#include <string>\n#include <ctime>\n\nusing boost::asio::ip::udp;\n\nstd::string make_daytime_string() {\n    std::time_t now = std::time(0);\n    return std::ctime(&now);\n}\n\nvoid udp_server() {\n    try {\n        boost::asio::io_context io_context;\n        udp::socket socket(io_context, udp::endpoint(udp::v4(), 13));\n\n        for (;;) {\n            char data[1];\n            udp::endpoint remote_endpoint;\n            boost::system::error_code error;\n\n            socket.receive_from(boost::asio::buffer(data), remote_endpoint, 0, error);\n\n            if (error && error != boost::asio::error::message_size) {\n                throw boost::system::system_error(error);\n            }\n\n            std::string message = make_daytime_string();\n\n            boost::system::error_code ignored_error;\n            socket.send_to(boost::asio::buffer(message), remote_endpoint, 0, ignored_error);\n        }\n    } catch (std::exception& e) {\n        std::cerr << e.what() << std::endl;\n    }\n}\n\nint main() {\n    udp_server();\n    return 0;\n}",
      "#include <iostream>\n#include <boost/asio.hpp>\n#include <ctime>\n\nusing boost::asio::ip::udp;\n\nstd::string make_daytime_string() {\n    std::time_t now = std::time(0);\n    return std::ctime(&now);\n}\n\nvoid udp_server() {\n    try {\n        boost::asio::io_context io_context;\n        udp::socket socket(io_context, udp::endpoint(udp::v4(), 13));\n\n        for (;;) {\n            char data[1];\n            udp::endpoint remote_endpoint;\n            boost::system::error_code error;\n            socket.receive_from(boost::asio::buffer(data), remote_endpoint, 0, error);\n\n            if (error && error != boost::asio::error::message_size) {\n                throw boost::system::system_error(error);\n            }\n\n            std::string message = make_daytime_string();\n            boost::system::error_code ignored_error;\n            socket.send_to(boost::asio::buffer(message), remote_endpoint, 0, ignored_error);\n        }\n    } catch (std::exception& e) {\n        std::cerr << \"Exception: \" << e.what() << \"\\n\";\n    }\n}\n\nint main() {\n    udp_server();\n    return 0;\n}",
      "#include <boost/asio.hpp>\n#include <iostream>\n#include <string>\n#include <ctime>\n\nusing boost::asio::ip::udp;\n\nstd::string make_daytime_string() {\n    std::time_t now = std::time(0);\n    return std::ctime(&now);\n}\n\nvoid udp_server() {\n    try {\n        boost::asio::io_context io_context;\n        udp::socket socket(io_context, udp::endpoint(udp::v4(), 13));\n\n        for (;;) {\n            char data[1];\n            udp::endpoint remote_endpoint;\n            boost::system::error_code error;\n\n            socket.receive_from(boost::asio::buffer(data, 1), remote_endpoint, 0, error);\n\n            if (error && error != boost::asio::error::message_size) {\n                throw boost::system::system_error(error);\n            }\n\n            std::string message = make_daytime_string();\n\n            boost::system::error_code ignored_error;\n            socket.send_to(boost::asio::buffer(message), remote_endpoint, 0, ignored_error);\n        }\n    } catch (std::exception& e) {\n        std::cerr << \"Exception: \" << e.what() << std::endl;\n    }\n}\n\nint main() {\n    udp_server();\n    return 0;\n}",
      "#include <boost/asio.hpp>\n#include <iostream>\n#include <string>\n#include <ctime>\n\nusing boost::asio::ip::udp;\n\nstd::string make_daytime_string() {\n    std::time_t now = std::time(0);\n    return std::ctime(&now);\n}\n\nvoid udp_server() {\n    try {\n        boost::asio::io_context io_context;\n        udp::socket socket(io_context, udp::endpoint(udp::v4(), 13));\n\n        for (;;) {\n            char data[1];\n            udp::endpoint sender_endpoint;\n            socket.receive_from(boost::asio::buffer(data), sender_endpoint);\n\n            std::string message = make_daytime_string();\n            boost::system::error_code ignored_error;\n            socket.send_to(boost::asio::buffer(message), sender_endpoint, 0, ignored_error);\n        }\n    } catch (std::exception& e) {\n        std::cerr << \"Exception: \" << e.what() << \"\\n\";\n    }\n}\n\nint main() {\n    udp_server();\n    return 0;\n}",
      "#include <iostream>\n#include <boost/asio.hpp>\n#include <ctime>\n\nusing boost::asio::ip::udp;\n\nstd::string make_daytime_string() {\n    std::time_t now = std::time(0);\n    return std::ctime(&now);\n}\n\nvoid udp_server() {\n    try {\n        boost::asio::io_context io_context;\n        udp::socket socket(io_context, udp::endpoint(udp::v4(), 13));\n\n        for (;;) {\n            char data[1];\n            udp::endpoint sender_endpoint;\n            socket.receive_from(boost::asio::buffer(data), sender_endpoint);\n\n            std::string message = make_daytime_string();\n            boost::system::error_code ignored_error;\n            socket.send_to(boost::asio::buffer(message), sender_endpoint, 0, ignored_error);\n        }\n    } catch (std::exception& e) {\n        std::cerr << \"Exception: \" << e.what() << \"\\n\";\n    }\n}\n\nint main() {\n    udp_server();\n    return 0;\n}",
      "#include <iostream>\n#include <boost/asio.hpp>\n#include <boost/bind/bind.hpp>\n#include <ctime>\n\nusing boost::asio::ip::udp;\n\nstd::string make_daytime_string() {\n    std::time_t now = std::time(0);\n    return std::ctime(&now);\n}\n\nclass udp_server {\npublic:\n    udp_server(boost::asio::io_context& io_context)\n        : socket_(io_context, udp::endpoint(udp::v4(), 13)) {\n        start_receive();\n    }\n\nprivate:\n    void start_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(recv_buffer_), remote_endpoint_,\n            boost::bind(&udp_server::handle_receive, this,\n                        boost::asio::placeholders::error,\n                        boost::asio::placeholders::bytes_transferred));\n    }\n\n    void handle_receive(const boost::system::error_code& error,\n                        std::size_t /*bytes_transferred*/) {\n        if (!error) {\n            std::string message = make_daytime_string();\n            socket_.async_send_to(boost::asio::buffer(message), remote_endpoint_,\n                                  boost::bind(&udp_server::handle_send, this, message,\n                                              boost::asio::placeholders::error,\n                                              boost::asio::placeholders::bytes_transferred));\n            start_receive();\n        }\n    }\n\n    void handle_send(const std::string& /*message*/,\n                     const boost::system::error_code& /*error*/,\n                     std::size_t /*bytes_transferred*/) {}\n\n    udp::socket socket_;\n    udp::endpoint remote_endpoint_;\n    boost::array<char, 1> recv_buffer_;\n};\n\nint main() {\n    try {\n        boost::asio::io_context io_context;\n        udp_server server(io_context);\n        io_context.run();\n    } catch (std::exception& e) {\n        std::cerr << e.what() << std::endl;\n    }\n    return 0;\n}",
      "#include <boost/asio.hpp>\n#include <iostream>\n#include <ctime>\n\nusing boost::asio::ip::udp;\n\nstd::string make_daytime_string() {\n    std::time_t now = std::time(0);\n    return std::ctime(&now);\n}\n\nvoid udp_server() {\n    try {\n        boost::asio::io_context io_context;\n        udp::socket socket(io_context, udp::endpoint(udp::v4(), 13));\n\n        for (;;) {\n            char data[1];\n            udp::endpoint sender_endpoint;\n            socket.receive_from(boost::asio::buffer(data), sender_endpoint);\n\n            std::string message = make_daytime_string();\n            boost::system::error_code ignored_error;\n            socket.send_to(boost::asio::buffer(message), sender_endpoint, 0, ignored_error);\n        }\n    } catch (std::exception& e) {\n        std::cerr << e.what() << std::endl;\n    }\n}\n\nint main() {\n    udp_server();\n    return 0;\n}",
      "#include <iostream>\n#include <boost/asio.hpp>\n#include <ctime>\n\nusing boost::asio::ip::udp;\n\nstd::string make_daytime_string() {\n    std::time_t now = std::time(0);\n    return std::ctime(&now);\n}\n\nvoid udp_server() {\n    try {\n        boost::asio::io_context io_context;\n\n        udp::socket socket(io_context, udp::endpoint(udp::v4(), 13));\n\n        for (;;) {\n            char data[1];\n            udp::endpoint sender_endpoint;\n            socket.receive_from(boost::asio::buffer(data), sender_endpoint);\n\n            std::string message = make_daytime_string();\n\n            boost::system::error_code ignored_error;\n            socket.send_to(boost::asio::buffer(message), sender_endpoint, 0, ignored_error);\n        }\n    } catch (std::exception& e) {\n        std::cerr << e.what() << std::endl;\n    }\n}\n\nint main() {\n    udp_server();\n    return 0;\n}",
      "#include <iostream>\n#include <boost/asio.hpp>\n#include <boost/bind/bind.hpp>\n#include <ctime>\n\nusing boost::asio::ip::udp;\n\nstd::string make_daytime_string() {\n    std::time_t now = std::time(0);\n    return std::ctime(&now);\n}\n\nclass udp_server {\npublic:\n    udp_server(boost::asio::io_context& io_context)\n        : socket_(io_context, udp::endpoint(udp::v4(), 13)) {\n        start_receive();\n    }\n\nprivate:\n    void start_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(recv_buffer_), remote_endpoint_,\n            boost::bind(&udp_server::handle_receive, this,\n                        boost::asio::placeholders::error,\n                        boost::asio::placeholders::bytes_transferred));\n    }\n\n    void handle_receive(const boost::system::error_code& error, std::size_t /*bytes_transferred*/) {\n        if (!error) {\n            std::string message = make_daytime_string();\n            socket_.async_send_to(boost::asio::buffer(message), remote_endpoint_,\n                                  boost::bind(&udp_server::handle_send, this, message,\n                                              boost::asio::placeholders::error,\n                                              boost::asio::placeholders::bytes_transferred));\n            start_receive();\n        }\n    }\n\n    void handle_send(const std::string& /*message*/, const boost::system::error_code& /*error*/,\n                     std::size_t /*bytes_transferred*/) {}\n\n    udp::socket socket_;\n    udp::endpoint remote_endpoint_;\n    boost::array<char, 1> recv_buffer_;\n};\n\nint main() {\n    try {\n        boost::asio::io_context io_context;\n        udp_server server(io_context);\n        io_context.run();\n    } catch (std::exception& e) {\n        std::cerr << e.what() << std::endl;\n    }\n    return 0;\n}",
      "#include <iostream>\n#include <boost/asio.hpp>\n#include <ctime>\n\nusing boost::asio::ip::udp;\n\nstd::string make_daytime_string() {\n    std::time_t now = std::time(0);\n    return std::ctime(&now);\n}\n\nvoid udp_server() {\n    try {\n        boost::asio::io_context io_context;\n        udp::socket socket(io_context, udp::endpoint(udp::v4(), 13));\n\n        for (;;) {\n            char data[1];\n            udp::endpoint remote_endpoint;\n            boost::system::error_code error;\n\n            socket.receive_from(boost::asio::buffer(data), remote_endpoint, 0, error);\n\n            if (error && error != boost::asio::error::message_size) {\n                throw boost::system::system_error(error);\n            }\n\n            std::string message = make_daytime_string();\n\n            boost::system::error_code ignored_error;\n            socket.send_to(boost::asio::buffer(message), remote_endpoint, 0, ignored_error);\n        }\n    } catch (std::exception& e) {\n        std::cerr << \"Exception: \" << e.what() << \"\\n\";\n    }\n}\n\nint main() {\n    udp_server();\n    return 0;\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 32,
    "Instruction": "Task Description: Implement a UDP multicast sender class using Boost.Asio that periodically sends messages to a specified multicast address.\n\nClass Description: The `sender` class encapsulates functionality for sending UDP multicast messages at regular intervals. It uses Boost.Asio for asynchronous network operations and timer management.\n\nAttributes:\n- endpoint_: [boost::asio::ip::udp::endpoint] - The multicast endpoint (address + port) to send messages to\n- socket_: [boost::asio::ip::udp::socket] - The UDP socket used for sending messages\n- timer_: [boost::asio::steady_timer] - Timer used to schedule message sends\n- message_count_: [int] - Counter tracking the number of messages sent\n- message_: [std::string] - The current message content to be sent\n\nMethods:\n- sender([boost::asio::io_context&] io_context, [const boost::asio::ip::address&] multicast_address) -> [void] - Constructor that initializes the sender with IO context and multicast address\n- do_send() -> [void] - Asynchronously sends the current message to the multicast endpoint\n- do_timeout() -> [void] - Sets up a timer to schedule the next message send after a delay",
    "Canonical_solution": "#include <boost/asio.hpp>\n#include <string>\n#include <chrono>\n\nclass sender\n{\npublic:\n  sender(boost::asio::io_context& io_context,\n      const boost::asio::ip::address& multicast_address)\n    : endpoint_(multicast_address, multicast_port),\n      socket_(io_context, endpoint_.protocol()),\n      timer_(io_context),\n      message_count_(0)\n  {\n    do_send();\n  }\n\nprivate:\n  void do_send()\n  {\n    std::ostringstream os;\n    os << \"Message \" << message_count_++;\n    message_ = os.str();\n\n    socket_.async_send_to(\n        boost::asio::buffer(message_), endpoint_,\n        [this](boost::system::error_code ec, std::size_t /*length*/)\n        {\n          if (!ec && message_count_ < max_message_count)\n            do_timeout();\n        });\n  }\n\n  void do_timeout()\n  {\n    timer_.expires_after(std::chrono::seconds(1));\n    timer_.async_wait(\n        [this](boost::system::error_code ec)\n        {\n          if (!ec)\n            do_send();\n        });\n  }\n\nprivate:\n  boost::asio::ip::udp::endpoint endpoint_;\n  boost::asio::ip::udp::socket socket_;\n  boost::asio::steady_timer timer_;\n  int message_count_;\n  std::string message_;\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 153,
    "matched_results": [
      "#include <boost/asio.hpp>\n#include <iostream>\n\nclass sender {\npublic:\n    sender(boost::asio::io_context& io_context, const boost::asio::ip::address& multicast_address)\n        : endpoint_(multicast_address, 30001),\n          socket_(io_context, endpoint_.protocol()),\n          timer_(io_context),\n          message_count_(0) {\n        do_send();\n    }\n\nprivate:\n    void do_send() {\n        message_ = \"Message \" + std::to_string(message_count_++);\n        socket_.async_send_to(boost::asio::buffer(message_), endpoint_,\n            [this](boost::system::error_code /*ec*/, std::size_t /*bytes_sent*/) {\n                do_timeout();\n            });\n    }\n\n    void do_timeout() {\n        timer_.expires_after(std::chrono::seconds(1));\n        timer_.async_wait([this](boost::system::error_code /*ec*/) {\n            do_send();\n        });\n    }\n\n    boost::asio::ip::udp::endpoint endpoint_;\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::steady_timer timer_;\n    int message_count_;\n    std::string message_;\n};\n\nint main() {\n    try {\n        boost::asio::io_context io_context;\n        sender s(io_context, boost::asio::ip::make_address(\"239.255.0.1\"));\n        io_context.run();\n    } catch (std::exception& e) {\n        std::cerr << \"Exception: \" << e.what() << \"\\n\";\n    }\n    return 0;\n}",
      "#include <boost/asio.hpp>\n#include <iostream>\n#include <string>\n\nclass sender {\npublic:\n    sender(boost::asio::io_context& io_context, const boost::asio::ip::address& multicast_address)\n        : endpoint_(multicast_address, 30001),\n          socket_(io_context, endpoint_.protocol()),\n          timer_(io_context),\n          message_count_(0) {\n        do_send();\n    }\n\nprivate:\n    void do_send() {\n        message_ = \"Message \" + std::to_string(message_count_++);\n        socket_.async_send_to(boost::asio::buffer(message_), endpoint_,\n            [this](boost::system::error_code /*ec*/, std::size_t /*bytes_sent*/) {\n                do_timeout();\n            });\n    }\n\n    void do_timeout() {\n        timer_.expires_after(std::chrono::seconds(1));\n        timer_.async_wait([this](boost::system::error_code /*ec*/) {\n            do_send();\n        });\n    }\n\n    boost::asio::ip::udp::endpoint endpoint_;\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::steady_timer timer_;\n    int message_count_;\n    std::string message_;\n};\n\nint main() {\n    try {\n        boost::asio::io_context io_context;\n        sender s(io_context, boost::asio::ip::make_address(\"239.255.0.1\"));\n        io_context.run();\n    } catch (std::exception& e) {\n        std::cerr << \"Exception: \" << e.what() << \"\\n\";\n    }\n    return 0;\n}",
      "#include <boost/asio.hpp>\n#include <iostream>\n#include <string>\n\nclass sender {\npublic:\n    sender(boost::asio::io_context& io_context, const boost::asio::ip::address& multicast_address)\n        : endpoint_(multicast_address, 30001),\n          socket_(io_context, endpoint_.protocol()),\n          timer_(io_context),\n          message_count_(0) {\n        do_send();\n        do_timeout();\n    }\n\nprivate:\n    void do_send() {\n        message_ = \"Message \" + std::to_string(message_count_++);\n        socket_.async_send_to(boost::asio::buffer(message_), endpoint_,\n            [this](boost::system::error_code /*ec*/, std::size_t /*bytes_sent*/) {\n                // Handle send completion if necessary\n            });\n    }\n\n    void do_timeout() {\n        timer_.expires_after(std::chrono::seconds(1));\n        timer_.async_wait([this](boost::system::error_code /*ec*/) {\n            do_send();\n            do_timeout();\n        });\n    }\n\n    boost::asio::ip::udp::endpoint endpoint_;\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::steady_timer timer_;\n    int message_count_;\n    std::string message_;\n};\n\nint main() {\n    try {\n        boost::asio::io_context io_context;\n        sender s(io_context, boost::asio::ip::make_address(\"239.255.0.1\"));\n        io_context.run();\n    } catch (std::exception& e) {\n        std::cerr << \"Exception: \" << e.what() << std::endl;\n    }\n    return 0;\n}",
      "#include <boost/asio.hpp>\n#include <iostream>\n#include <string>\n\nclass sender {\npublic:\n    sender(boost::asio::io_context& io_context, const boost::asio::ip::address& multicast_address)\n        : endpoint_(multicast_address, 30001),\n          socket_(io_context, endpoint_.protocol()),\n          timer_(io_context),\n          message_count_(0) {\n        do_send();\n    }\n\nprivate:\n    void do_send() {\n        message_ = \"Message \" + std::to_string(message_count_++);\n        socket_.async_send_to(boost::asio::buffer(message_), endpoint_,\n            [this](boost::system::error_code /*ec*/, std::size_t /*bytes_sent*/) {\n                do_timeout();\n            });\n    }\n\n    void do_timeout() {\n        timer_.expires_after(std::chrono::seconds(1));\n        timer_.async_wait([this](boost::system::error_code /*ec*/) {\n            do_send();\n        });\n    }\n\n    boost::asio::ip::udp::endpoint endpoint_;\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::steady_timer timer_;\n    int message_count_;\n    std::string message_;\n};\n\nint main() {\n    try {\n        boost::asio::io_context io_context;\n        sender s(io_context, boost::asio::ip::make_address(\"239.255.0.1\"));\n        io_context.run();\n    } catch (std::exception& e) {\n        std::cerr << \"Exception: \" << e.what() << std::endl;\n    }\n    return 0;\n}",
      "#include <boost/asio.hpp>\n#include <iostream>\n\nclass sender {\npublic:\n    sender(boost::asio::io_context& io_context, const boost::asio::ip::address& multicast_address)\n        : endpoint_(multicast_address, 30001),\n          socket_(io_context, endpoint_.protocol()),\n          timer_(io_context),\n          message_count_(0) {\n        do_send();\n    }\n\nprivate:\n    void do_send() {\n        message_ = \"Message \" + std::to_string(message_count_++);\n        socket_.async_send_to(boost::asio::buffer(message_), endpoint_,\n            [this](boost::system::error_code /*ec*/, std::size_t /*bytes_sent*/) {\n                do_timeout();\n            });\n    }\n\n    void do_timeout() {\n        timer_.expires_after(std::chrono::seconds(1));\n        timer_.async_wait([this](boost::system::error_code /*ec*/) {\n            do_send();\n        });\n    }\n\n    boost::asio::ip::udp::endpoint endpoint_;\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::steady_timer timer_;\n    int message_count_;\n    std::string message_;\n};",
      "#include <boost/asio.hpp>\n#include <iostream>\n#include <string>\n\nclass sender {\npublic:\n    sender(boost::asio::io_context& io_context, const boost::asio::ip::address& multicast_address)\n        : endpoint_(multicast_address, 30001),\n          socket_(io_context, endpoint_.protocol()),\n          timer_(io_context),\n          message_count_(0) {\n        do_send();\n    }\n\nprivate:\n    void do_send() {\n        message_ = \"Message \" + std::to_string(message_count_++);\n        socket_.async_send_to(\n            boost::asio::buffer(message_), endpoint_,\n            [this](boost::system::error_code /*ec*/, std::size_t /*bytes_sent*/) {\n                do_timeout();\n            });\n    }\n\n    void do_timeout() {\n        timer_.expires_after(std::chrono::seconds(1));\n        timer_.async_wait([this](boost::system::error_code /*ec*/) {\n            do_send();\n        });\n    }\n\n    boost::asio::ip::udp::endpoint endpoint_;\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::steady_timer timer_;\n    int message_count_;\n    std::string message_;\n};",
      "#include <boost/asio.hpp>\n#include <iostream>\n#include <string>\n\nclass sender {\npublic:\n    sender(boost::asio::io_context& io_context, const boost::asio::ip::address& multicast_address)\n        : endpoint_(multicast_address, 30001),\n          socket_(io_context, endpoint_.protocol()),\n          timer_(io_context),\n          message_count_(0),\n          message_(\"Hello, Multicast!\") {\n        do_send();\n        do_timeout();\n    }\n\nprivate:\n    void do_send() {\n        socket_.async_send_to(\n            boost::asio::buffer(message_), endpoint_,\n            [this](boost::system::error_code /*ec*/, std::size_t /*bytes_sent*/) {\n                // Handle send completion if needed\n            });\n    }\n\n    void do_timeout() {\n        timer_.expires_after(std::chrono::seconds(1));\n        timer_.async_wait([this](boost::system::error_code /*ec*/) {\n            ++message_count_;\n            message_ = \"Message \" + std::to_string(message_count_);\n            do_send();\n            do_timeout();\n        });\n    }\n\n    boost::asio::ip::udp::endpoint endpoint_;\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::steady_timer timer_;\n    int message_count_;\n    std::string message_;\n};",
      "#include <boost/asio.hpp>\n#include <iostream>\n#include <string>\n\nclass sender {\npublic:\n    sender(boost::asio::io_context& io_context, const boost::asio::ip::address& multicast_address)\n        : endpoint_(multicast_address, 30001),\n          socket_(io_context, endpoint_.protocol()),\n          timer_(io_context),\n          message_count_(0) {\n        do_send();\n    }\n\nprivate:\n    void do_send() {\n        message_ = \"Message \" + std::to_string(message_count_++);\n        socket_.async_send_to(\n            boost::asio::buffer(message_), endpoint_,\n            [this](boost::system::error_code /*ec*/, std::size_t /*bytes_sent*/) {\n                do_timeout();\n            });\n    }\n\n    void do_timeout() {\n        timer_.expires_after(std::chrono::seconds(1));\n        timer_.async_wait([this](boost::system::error_code /*ec*/) {\n            do_send();\n        });\n    }\n\n    boost::asio::ip::udp::endpoint endpoint_;\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::steady_timer timer_;\n    int message_count_;\n    std::string message_;\n};\n\nint main() {\n    try {\n        boost::asio::io_context io_context;\n        sender s(io_context, boost::asio::ip::make_address(\"239.255.0.1\"));\n        io_context.run();\n    } catch (std::exception& e) {\n        std::cerr << \"Exception: \" << e.what() << \"\\n\";\n    }\n    return 0;\n}",
      "#include <boost/asio.hpp>\n#include <iostream>\n#include <string>\n\nclass sender {\npublic:\n    sender(boost::asio::io_context& io_context, const boost::asio::ip::address& multicast_address)\n        : endpoint_(multicast_address, 30001),\n          socket_(io_context, endpoint_.protocol()),\n          timer_(io_context),\n          message_count_(0) {\n        do_send();\n        do_timeout();\n    }\n\nprivate:\n    void do_send() {\n        message_ = \"Message \" + std::to_string(message_count_++);\n        socket_.async_send_to(boost::asio::buffer(message_), endpoint_,\n            [this](boost::system::error_code /*ec*/, std::size_t /*bytes_sent*/) {\n                // Handle send completion if needed\n            });\n    }\n\n    void do_timeout() {\n        timer_.expires_after(std::chrono::seconds(1));\n        timer_.async_wait([this](boost::system::error_code /*ec*/) {\n            do_send();\n            do_timeout();\n        });\n    }\n\n    boost::asio::ip::udp::endpoint endpoint_;\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::steady_timer timer_;\n    int message_count_;\n    std::string message_;\n};\n\nint main() {\n    try {\n        boost::asio::io_context io_context;\n        sender s(io_context, boost::asio::ip::make_address(\"239.255.0.1\"));\n        io_context.run();\n    } catch (std::exception& e) {\n        std::cerr << \"Exception: \" << e.what() << \"\\n\";\n    }\n    return 0;\n}"
    ],
    "unmatched_results": [
      "class sender {\npublic:\n    sender(boost::asio::io_context& io_context, const boost::asio::ip::address& multicast_address)\n        : endpoint_(multicast_address, 30001),\n          socket_(io_context, endpoint_.protocol()),\n          timer_(io_context),\n          message_count_(0) {\n        do_send();\n    }\n\nprivate:\n    void do_send() {\n        message_ = \"Message \" + std::to_string(message_count_++);\n        socket_.async_send_to(\n            boost::asio::buffer(message_), endpoint_,\n            [this](boost::system::error_code /*ec*/, std::size_t /*bytes_sent*/) {\n                do_timeout();\n            });\n    }\n\n    void do_timeout() {\n        timer_.expires_after(std::chrono::seconds(1));\n        timer_.async_wait([this](boost::system::error_code /*ec*/) {\n            do_send();\n        });\n    }\n\n    boost::asio::ip::udp::endpoint endpoint_;\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::steady_timer timer_;\n    int message_count_;\n    std::string message_;\n};"
    ],
    "match_count": 9,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 33,
    "Instruction": "Task Description: Implement a UDP echo server using Boost.Asio that listens on a specified port, receives incoming datagrams, and sends them back to the sender.\n\nFunction Description: The function creates a UDP socket bound to a specified port, then enters an infinite loop where it receives datagrams from clients and echoes them back to the sender. This demonstrates basic UDP communication using Boost.Asio.\n\nInput:\n- io_context: boost::asio::io_context& - Reference to an I/O execution context that manages asynchronous operations\n- port: unsigned short - The port number on which the server should listen for incoming UDP datagrams\n\nOutput: None (The function runs indefinitely in a loop, processing incoming datagrams)",
    "Canonical_solution": "#include <boost/asio.hpp>\nusing boost::asio::ip::udp;\nenum { max_length = 1024 };\n\nvoid server(boost::asio::io_context& io_context, unsigned short port)\n{\n  udp::socket sock(io_context, udp::endpoint(udp::v4(), port));\n  for (;;)\n  {\n    char data[max_length];\n    udp::endpoint sender_endpoint;\n    size_t length = sock.receive_from(\n        boost::asio::buffer(data, max_length), sender_endpoint);\n    sock.send_to(boost::asio::buffer(data, length), sender_endpoint);\n  }\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 153,
    "matched_results": [
      "#include <boost/asio.hpp>\n#include <iostream>\n\nvoid run_udp_echo_server(boost::asio::io_context& io_context, unsigned short port) {\n    using boost::asio::ip::udp;\n\n    udp::socket socket(io_context, udp::endpoint(udp::v4(), port));\n    std::array<char, 1024> recv_buffer;\n\n    for (;;) {\n        udp::endpoint remote_endpoint;\n        boost::system::error_code error;\n        size_t len = socket.receive_from(boost::asio::buffer(recv_buffer), remote_endpoint, 0, error);\n\n        if (error && error != boost::asio::error::message_size) {\n            throw boost::system::system_error(error);\n        }\n\n        socket.send_to(boost::asio::buffer(recv_buffer, len), remote_endpoint, 0, error);\n    }\n}\n\nint main() {\n    try {\n        boost::asio::io_context io_context;\n        run_udp_echo_server(io_context, 12345);\n    } catch (std::exception& e) {\n        std::cerr << \"Exception: \" << e.what() << \"\\n\";\n    }\n\n    return 0;\n}",
      "#include <boost/asio.hpp>\n#include <iostream>\n\nvoid run_udp_echo_server(boost::asio::io_context& io_context, unsigned short port) {\n    using boost::asio::ip::udp;\n\n    udp::socket socket(io_context, udp::endpoint(udp::v4(), port));\n\n    for (;;) {\n        char data[1024];\n        udp::endpoint sender_endpoint;\n        boost::system::error_code error;\n        size_t length = socket.receive_from(boost::asio::buffer(data), sender_endpoint, 0, error);\n\n        if (error && error != boost::asio::error::message_size) {\n            throw boost::system::system_error(error);\n        }\n\n        socket.send_to(boost::asio::buffer(data, length), sender_endpoint, 0, error);\n    }\n}\n\nint main() {\n    try {\n        boost::asio::io_context io_context;\n        run_udp_echo_server(io_context, 12345);\n    } catch (std::exception& e) {\n        std::cerr << \"Exception: \" << e.what() << \"\\n\";\n    }\n\n    return 0;\n}",
      "#include <boost/asio.hpp>\n#include <iostream>\n\nvoid run_udp_echo_server(boost::asio::io_context& io_context, unsigned short port) {\n    using boost::asio::ip::udp;\n    udp::socket socket(io_context, udp::endpoint(udp::v4(), port));\n\n    for (;;) {\n        char data[1024];\n        udp::endpoint sender_endpoint;\n        boost::system::error_code error;\n        size_t length = socket.receive_from(boost::asio::buffer(data), sender_endpoint, 0, error);\n\n        if (error && error != boost::asio::error::message_size) {\n            throw boost::system::system_error(error);\n        }\n\n        socket.send_to(boost::asio::buffer(data, length), sender_endpoint, 0, error);\n    }\n}\n\nint main() {\n    try {\n        boost::asio::io_context io_context;\n        run_udp_echo_server(io_context, 12345);\n    } catch (std::exception& e) {\n        std::cerr << \"Exception: \" << e.what() << \"\\n\";\n    }\n\n    return 0;\n}",
      "#include <boost/asio.hpp>\n#include <iostream>\n\nvoid run_udp_echo_server(boost::asio::io_context& io_context, unsigned short port) {\n    using boost::asio::ip::udp;\n\n    udp::socket socket(io_context, udp::endpoint(udp::v4(), port));\n\n    for (;;) {\n        char data[1024];\n        udp::endpoint sender_endpoint;\n        boost::system::error_code error;\n        size_t length = socket.receive_from(boost::asio::buffer(data), sender_endpoint, 0, error);\n\n        if (error && error != boost::asio::error::message_size) {\n            throw boost::system::system_error(error);\n        }\n\n        socket.send_to(boost::asio::buffer(data, length), sender_endpoint, 0, error);\n    }\n}\n\nint main() {\n    try {\n        boost::asio::io_context io_context;\n        run_udp_echo_server(io_context, 12345);\n    } catch (std::exception& e) {\n        std::cerr << \"Exception: \" << e.what() << \"\\n\";\n    }\n\n    return 0;\n}",
      "#include <boost/asio.hpp>\n#include <iostream>\n\nvoid run_udp_echo_server(boost::asio::io_context& io_context, unsigned short port) {\n    using boost::asio::ip::udp;\n\n    udp::socket socket(io_context, udp::endpoint(udp::v4(), port));\n\n    while (true) {\n        char data[1024];\n        udp::endpoint sender_endpoint;\n        boost::system::error_code error;\n        size_t length = socket.receive_from(boost::asio::buffer(data), sender_endpoint, 0, error);\n\n        if (!error && length > 0) {\n            socket.send_to(boost::asio::buffer(data, length), sender_endpoint, 0, error);\n        }\n    }\n}\n\nint main() {\n    try {\n        boost::asio::io_context io_context;\n        run_udp_echo_server(io_context, 12345);\n    } catch (std::exception& e) {\n        std::cerr << \"Exception: \" << e.what() << \"\\n\";\n    }\n\n    return 0;\n}",
      "#include <boost/asio.hpp>\n#include <iostream>\n\nvoid run_udp_echo_server(boost::asio::io_context& io_context, unsigned short port) {\n    using boost::asio::ip::udp;\n\n    udp::socket socket(io_context, udp::endpoint(udp::v4(), port));\n\n    for (;;) {\n        char data[1024];\n        udp::endpoint sender_endpoint;\n        boost::system::error_code error;\n        size_t length = socket.receive_from(boost::asio::buffer(data), sender_endpoint, 0, error);\n\n        if (error && error != boost::asio::error::message_size) {\n            std::cerr << \"Receive failed: \" << error.message() << std::endl;\n            continue;\n        }\n\n        socket.send_to(boost::asio::buffer(data, length), sender_endpoint, 0, error);\n\n        if (error) {\n            std::cerr << \"Send failed: \" << error.message() << std::endl;\n        }\n    }\n}",
      "#include <boost/asio.hpp>\n#include <iostream>\n\nvoid run_udp_echo_server(boost::asio::io_context& io_context, unsigned short port) {\n    using boost::asio::ip::udp;\n\n    udp::socket socket(io_context, udp::endpoint(udp::v4(), port));\n\n    for (;;) {\n        char data[1024];\n        udp::endpoint sender_endpoint;\n        boost::system::error_code error;\n        size_t length = socket.receive_from(boost::asio::buffer(data), sender_endpoint, 0, error);\n\n        if (error && error != boost::asio::error::message_size) {\n            std::cerr << \"Receive error: \" << error.message() << std::endl;\n            continue;\n        }\n\n        socket.send_to(boost::asio::buffer(data, length), sender_endpoint, 0, error);\n\n        if (error) {\n            std::cerr << \"Send error: \" << error.message() << std::endl;\n        }\n    }\n}",
      "#include <boost/asio.hpp>\n#include <iostream>\n\nvoid run_udp_echo_server(boost::asio::io_context& io_context, unsigned short port) {\n    using boost::asio::ip::udp;\n\n    udp::socket socket(io_context, udp::endpoint(udp::v4(), port));\n    char data[1024];\n    udp::endpoint sender_endpoint;\n\n    while (true) {\n        boost::system::error_code error;\n        size_t length = socket.receive_from(boost::asio::buffer(data), sender_endpoint, 0, error);\n\n        if (error && error != boost::asio::error::message_size) {\n            std::cerr << \"Receive failed: \" << error.message() << std::endl;\n            continue;\n        }\n\n        socket.send_to(boost::asio::buffer(data, length), sender_endpoint, 0, error);\n\n        if (error) {\n            std::cerr << \"Send failed: \" << error.message() << std::endl;\n        }\n    }\n}",
      "#include <boost/asio.hpp>\n#include <iostream>\n\nvoid run_udp_echo_server(boost::asio::io_context& io_context, unsigned short port) {\n    using boost::asio::ip::udp;\n\n    udp::socket socket(io_context, udp::endpoint(udp::v4(), port));\n\n    for (;;) {\n        char data[1024];\n        udp::endpoint sender_endpoint;\n        boost::system::error_code error;\n        size_t length = socket.receive_from(boost::asio::buffer(data), sender_endpoint, 0, error);\n\n        if (error && error != boost::asio::error::message_size) {\n            std::cerr << \"Receive failed: \" << error.message() << std::endl;\n            continue;\n        }\n\n        socket.send_to(boost::asio::buffer(data, length), sender_endpoint, 0, error);\n\n        if (error) {\n            std::cerr << \"Send failed: \" << error.message() << std::endl;\n        }\n    }\n}",
      "#include <boost/asio.hpp>\n#include <array>\n\nvoid run_udp_echo_server(boost::asio::io_context& io_context, unsigned short port) {\n    using boost::asio::ip::udp;\n    udp::socket socket(io_context, udp::endpoint(udp::v4(), port));\n    std::array<char, 1024> recv_buffer;\n\n    for (;;) {\n        udp::endpoint remote_endpoint;\n        boost::system::error_code error;\n        size_t len = socket.receive_from(boost::asio::buffer(recv_buffer), remote_endpoint, 0, error);\n\n        if (!error && len > 0) {\n            socket.send_to(boost::asio::buffer(recv_buffer, len), remote_endpoint, 0, error);\n        }\n    }\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 34,
    "Instruction": "Task Description: Implement a UDP client communication function using Boost.Asio to send a message to a specified host and port, and receive a response.\n\nFunction Description: The function establishes a UDP client connection, sends a message to a specified server, and waits to receive a response. It uses Boost.Asio for asynchronous UDP operations.\n\nInput:\n- host: [std::string] - The hostname or IP address of the UDP server to connect to\n- port: [std::string] - The port number of the UDP server\n- message: [std::string] - The message to be sent to the server\n\nOutput: None (The function receives a reply from the server but doesn't return it. In a real implementation, you might want to return the reply or process it further.)",
    "Canonical_solution": "#include <boost/asio.hpp>\nusing boost::asio::ip::udp;\n\nvoid udp_client_communication(const std::string& host, const std::string& port, const std::string& message)\n{\n    boost::asio::io_context io_context;\n    udp::socket s(io_context, udp::endpoint(udp::v4(), 0));\n    udp::resolver resolver(io_context);\n    udp::resolver::results_type endpoints = resolver.resolve(udp::v4(), host, port);\n\n    size_t request_length = message.length();\n    s.send_to(boost::asio::buffer(message, request_length), *endpoints.begin());\n\n    char reply[max_length];\n    udp::endpoint sender_endpoint;\n    size_t reply_length = s.receive_from(boost::asio::buffer(reply, max_length), sender_endpoint);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 153,
    "matched_results": [
      "#include <boost/asio.hpp>\n#include <iostream>\n\nvoid udp_client(const std::string& host, const std::string& port, const std::string& message) {\n    try {\n        boost::asio::io_context io_context;\n\n        boost::asio::ip::udp::resolver resolver(io_context);\n        boost::asio::ip::udp::endpoint endpoint = *resolver.resolve(boost::asio::ip::udp::v4(), host, port).begin();\n\n        boost::asio::ip::udp::socket socket(io_context);\n        socket.open(boost::asio::ip::udp::v4());\n\n        socket.send_to(boost::asio::buffer(message), endpoint);\n\n        char reply[1024];\n        boost::asio::ip::udp::endpoint sender_endpoint;\n        size_t reply_length = socket.receive_from(boost::asio::buffer(reply, 1024), sender_endpoint);\n\n        std::cout << \"Reply is: \";\n        std::cout.write(reply, reply_length);\n        std::cout << \"\\n\";\n    } catch (std::exception& e) {\n        std::cerr << \"Exception: \" << e.what() << \"\\n\";\n    }\n}",
      "#include <boost/asio.hpp>\n#include <iostream>\n\nvoid udp_client(const std::string& host, const std::string& port, const std::string& message) {\n    try {\n        boost::asio::io_context io_context;\n\n        boost::asio::ip::udp::resolver resolver(io_context);\n        boost::asio::ip::udp::endpoint endpoint = *resolver.resolve(boost::asio::ip::udp::v4(), host, port).begin();\n\n        boost::asio::ip::udp::socket socket(io_context);\n        socket.open(boost::asio::ip::udp::v4());\n\n        socket.send_to(boost::asio::buffer(message), endpoint);\n\n        char reply[1024];\n        boost::asio::ip::udp::endpoint sender_endpoint;\n        size_t reply_length = socket.receive_from(boost::asio::buffer(reply), sender_endpoint);\n\n        std::cout << \"Reply from server: \";\n        std::cout.write(reply, reply_length);\n        std::cout << \"\\n\";\n    } catch (std::exception& e) {\n        std::cerr << \"Exception: \" << e.what() << \"\\n\";\n    }\n}",
      "#include <boost/asio.hpp>\n#include <iostream>\n\nvoid udp_client(const std::string& host, const std::string& port, const std::string& message) {\n    try {\n        boost::asio::io_context io_context;\n\n        boost::asio::ip::udp::resolver resolver(io_context);\n        boost::asio::ip::udp::endpoint receiver_endpoint = *resolver.resolve(boost::asio::ip::udp::v4(), host, port).begin();\n\n        boost::asio::ip::udp::socket socket(io_context);\n        socket.open(boost::asio::ip::udp::v4());\n\n        socket.send_to(boost::asio::buffer(message), receiver_endpoint);\n\n        char reply[1024];\n        boost::asio::ip::udp::endpoint sender_endpoint;\n        size_t reply_length = socket.receive_from(boost::asio::buffer(reply), sender_endpoint);\n\n        std::cout << \"Reply: \" << std::string(reply, reply_length) << std::endl;\n    } catch (std::exception& e) {\n        std::cerr << \"Exception: \" << e.what() << std::endl;\n    }\n}",
      "#include <boost/asio.hpp>\n#include <iostream>\n\nvoid udp_client(const std::string& host, const std::string& port, const std::string& message) {\n    try {\n        boost::asio::io_context io_context;\n\n        boost::asio::ip::udp::resolver resolver(io_context);\n        boost::asio::ip::udp::endpoint receiver_endpoint = *resolver.resolve(boost::asio::ip::udp::v4(), host, port).begin();\n\n        boost::asio::ip::udp::socket socket(io_context);\n        socket.open(boost::asio::ip::udp::v4());\n\n        socket.send_to(boost::asio::buffer(message), receiver_endpoint);\n\n        char reply[1024];\n        boost::asio::ip::udp::endpoint sender_endpoint;\n        size_t reply_length = socket.receive_from(boost::asio::buffer(reply, 1024), sender_endpoint);\n\n        std::cout << \"Reply is: \";\n        std::cout.write(reply, reply_length);\n        std::cout << \"\\n\";\n    } catch (std::exception& e) {\n        std::cerr << \"Exception: \" << e.what() << \"\\n\";\n    }\n}",
      "#include <iostream>\n#include <boost/asio.hpp>\n\nvoid udp_client(const std::string& host, const std::string& port, const std::string& message) {\n    try {\n        boost::asio::io_context io_context;\n\n        boost::asio::ip::udp::resolver resolver(io_context);\n        boost::asio::ip::udp::endpoint receiver_endpoint = *resolver.resolve(boost::asio::ip::udp::v4(), host, port).begin();\n\n        boost::asio::ip::udp::socket socket(io_context);\n        socket.open(boost::asio::ip::udp::v4());\n\n        socket.send_to(boost::asio::buffer(message), receiver_endpoint);\n\n        char reply[1024];\n        boost::asio::ip::udp::endpoint sender_endpoint;\n        size_t reply_length = socket.receive_from(boost::asio::buffer(reply), sender_endpoint);\n\n        std::cout << \"Reply from server: \";\n        std::cout.write(reply, reply_length);\n        std::cout << \"\\n\";\n    } catch (std::exception& e) {\n        std::cerr << \"Exception: \" << e.what() << \"\\n\";\n    }\n}",
      "#include <boost/asio.hpp>\n#include <iostream>\n\nvoid udp_client(const std::string& host, const std::string& port, const std::string& message) {\n    try {\n        boost::asio::io_context io_context;\n\n        boost::asio::ip::udp::resolver resolver(io_context);\n        boost::asio::ip::udp::resolver::results_type endpoints = resolver.resolve(host, port);\n\n        boost::asio::ip::udp::socket socket(io_context);\n        socket.open(boost::asio::ip::udp::v4());\n\n        boost::asio::ip::udp::endpoint receiver_endpoint = *endpoints.begin();\n        socket.send_to(boost::asio::buffer(message), receiver_endpoint);\n\n        char reply[1024];\n        boost::asio::ip::udp::endpoint sender_endpoint;\n        size_t reply_length = socket.receive_from(boost::asio::buffer(reply), sender_endpoint);\n\n        std::cout << \"Reply is: \";\n        std::cout.write(reply, reply_length);\n        std::cout << \"\\n\";\n    } catch (std::exception& e) {\n        std::cerr << \"Exception: \" << e.what() << \"\\n\";\n    }\n}",
      "#include <iostream>\n#include <boost/asio.hpp>\n\nvoid udp_client(const std::string& host, const std::string& port, const std::string& message) {\n    try {\n        boost::asio::io_context io_context;\n\n        boost::asio::ip::udp::resolver resolver(io_context);\n        boost::asio::ip::udp::endpoint receiver_endpoint = *resolver.resolve(boost::asio::ip::udp::v4(), host, port).begin();\n\n        boost::asio::ip::udp::socket socket(io_context);\n        socket.open(boost::asio::ip::udp::v4());\n\n        socket.send_to(boost::asio::buffer(message), receiver_endpoint);\n\n        char reply[1024];\n        boost::asio::ip::udp::endpoint sender_endpoint;\n        size_t reply_length = socket.receive_from(boost::asio::buffer(reply), sender_endpoint);\n\n        std::cout << \"Reply from server: \";\n        std::cout.write(reply, reply_length);\n        std::cout << \"\\n\";\n    } catch (std::exception& e) {\n        std::cerr << \"Exception: \" << e.what() << \"\\n\";\n    }\n}",
      "#include <boost/asio.hpp>\n#include <iostream>\n#include <string>\n\nvoid udp_client(const std::string& host, const std::string& port, const std::string& message) {\n    try {\n        boost::asio::io_context io_context;\n\n        boost::asio::ip::udp::resolver resolver(io_context);\n        boost::asio::ip::udp::endpoint receiver_endpoint = *resolver.resolve(boost::asio::ip::udp::v4(), host, port).begin();\n\n        boost::asio::ip::udp::socket socket(io_context);\n        socket.open(boost::asio::ip::udp::v4());\n\n        socket.send_to(boost::asio::buffer(message), receiver_endpoint);\n\n        char reply[1024];\n        boost::asio::ip::udp::endpoint sender_endpoint;\n        size_t reply_length = socket.receive_from(boost::asio::buffer(reply, 1024), sender_endpoint);\n\n        std::cout << \"Reply from server: \";\n        std::cout.write(reply, reply_length);\n        std::cout << \"\\n\";\n    } catch (std::exception& e) {\n        std::cerr << \"Exception: \" << e.what() << \"\\n\";\n    }\n}",
      "#include <boost/asio.hpp>\n#include <iostream>\n\nvoid udp_client(const std::string& host, const std::string& port, const std::string& message) {\n    try {\n        boost::asio::io_context io_context;\n\n        boost::asio::ip::udp::resolver resolver(io_context);\n        boost::asio::ip::udp::endpoint receiver_endpoint = *resolver.resolve(boost::asio::ip::udp::v4(), host, port).begin();\n\n        boost::asio::ip::udp::socket socket(io_context);\n        socket.open(boost::asio::ip::udp::v4());\n\n        socket.send_to(boost::asio::buffer(message), receiver_endpoint);\n\n        char reply[1024];\n        boost::asio::ip::udp::endpoint sender_endpoint;\n        size_t reply_length = socket.receive_from(boost::asio::buffer(reply, 1024), sender_endpoint);\n\n        std::cout << \"Reply is: \";\n        std::cout.write(reply, reply_length);\n        std::cout << \"\\n\";\n    } catch (std::exception& e) {\n        std::cerr << \"Exception: \" << e.what() << \"\\n\";\n    }\n}",
      "#include <boost/asio.hpp>\n#include <iostream>\n\nvoid udp_client(const std::string& host, const std::string& port, const std::string& message) {\n    try {\n        boost::asio::io_context io_context;\n        boost::asio::ip::udp::resolver resolver(io_context);\n        boost::asio::ip::udp::resolver::results_type endpoints = resolver.resolve(boost::asio::ip::udp::v4(), host, port);\n        boost::asio::ip::udp::socket socket(io_context);\n        socket.open(boost::asio::ip::udp::v4());\n\n        boost::asio::ip::udp::endpoint receiver_endpoint = *endpoints.begin();\n        socket.send_to(boost::asio::buffer(message), receiver_endpoint);\n\n        char reply[1024];\n        boost::asio::ip::udp::endpoint sender_endpoint;\n        size_t reply_length = socket.receive_from(boost::asio::buffer(reply), sender_endpoint);\n\n        std::cout << \"Reply from server: \";\n        std::cout.write(reply, reply_length);\n        std::cout << \"\\n\";\n    } catch (std::exception& e) {\n        std::cerr << \"Exception: \" << e.what() << \"\\n\";\n    }\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 35,
    "Instruction": "Task Description: Implement a UDP server class using Boost.Asio that handles incoming UDP packets, processes them, and sends replies back to clients. The server should run asynchronously in a separate thread and provide a callback mechanism for handling incoming requests.\n\nClass Description: UDPServer::Impl is an implementation class for a UDP server that listens for incoming packets, validates them, and forwards valid packets to a callback function. It also provides functionality to send replies back to clients.\n\nAttributes:\n- worker_thread: std::thread - Thread that runs the IO context for asynchronous operations\n- io_context: boost::asio::io_context - Manages asynchronous operations for Boost.Asio\n- socket: boost::asio::ip::udp::socket - UDP socket for communication\n- request_buffer: std::array<u8, MAX_PACKET_SIZE> - Buffer for storing incoming UDP packets\n- remote_endpoint: boost::asio::ip::udp::endpoint - Stores the endpoint of the last received packet\n- new_request_callback: std::function<void(std::unique_ptr<Packet>)> - Callback function for handling new valid packets\n\nMethods:\n- Impl(std::function<void(std::unique_ptr<Packet>)>) -> None - Constructor that initializes the UDP socket and starts the receive loop\n- ~Impl() -> None - Destructor that stops the IO context and joins the worker thread\n- StartReceive() -> None - Starts an asynchronous receive operation on the UDP socket\n- HandleReceive(const boost::system::error_code&, std::size_t) -> None - Handles received data, validates packets, and triggers the callback for valid packets\n- SendReply(boost::asio::ip::udp::endpoint, Packet&) -> None - Sends a reply packet back to the specified endpoint",
    "Canonical_solution": "#include <thread>\n#include <boost/asio.hpp>\n#include <functional>\n#include <memory>\n#include <array>\n#include \"common/common_types.h\"\n#include \"common/logging/log.h\"\n#include \"core/rpc/packet.h\"\n\nnamespace Core::RPC {\n\nclass UDPServer::Impl {\npublic:\n    explicit Impl(std::function<void(std::unique_ptr<Packet>)> new_request_callback)\n        : socket(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), 45987)),\n          new_request_callback(std::move(new_request_callback)) {\n\n        StartReceive();\n        worker_thread = std::thread([this] { io_context.run(); });\n    }\n\n    ~Impl() {\n        io_context.stop();\n        worker_thread.join();\n    }\n\nprivate:\n    void StartReceive() {\n        socket.async_receive_from(boost::asio::buffer(request_buffer), remote_endpoint,\n                                  [this](const boost::system::error_code& error, std::size_t size) {\n                                      HandleReceive(error, size);\n                                  });\n    }\n\n    void HandleReceive(const boost::system::error_code& error, std::size_t size) {\n        if (error) {\n            LOG_WARNING(RPC_Server, \"Failed to receive data on UDP socket: {}\", error.message());\n        } else if (size >= MIN_PACKET_SIZE && size <= MAX_PACKET_SIZE) {\n            PacketHeader header;\n            std::memcpy(&header, request_buffer.data(), sizeof(header));\n            if ((size - MIN_PACKET_SIZE) == header.packet_size) {\n                u8* data = request_buffer.data() + MIN_PACKET_SIZE;\n                std::function<void(Packet&)> send_reply_callback =\n                    std::bind(&Impl::SendReply, this, remote_endpoint, std::placeholders::_1);\n                std::unique_ptr<Packet> new_packet =\n                    std::make_unique<Packet>(header, data, send_reply_callback);\n\n                new_request_callback(std::move(new_packet));\n            }\n        } else {\n            LOG_WARNING(RPC_Server, \"Received message with wrong size: {}\", size);\n        }\n        StartReceive();\n    }\n\n    void SendReply(boost::asio::ip::udp::endpoint endpoint, Packet& reply_packet) {\n        std::vector<u8> reply_buffer(MIN_PACKET_SIZE + reply_packet.GetPacketDataSize());\n        auto reply_header = reply_packet.GetHeader();\n\n        std::memcpy(reply_buffer.data(), &reply_header, sizeof(reply_header));\n        std::memcpy(reply_buffer.data() + (4 * sizeof(u32)), reply_packet.GetPacketData().data(),\n                    reply_packet.GetPacketDataSize());\n\n        boost::system::error_code error;\n        socket.send_to(boost::asio::buffer(reply_buffer), endpoint, 0, error);\n\n        if (error) {\n            LOG_WARNING(RPC_Server, \"Failed to send reply: {}\", error.message());\n        } else {\n            LOG_INFO(RPC_Server, \"Sent reply version({}) id=({}) type=({}) size=({})\",\n                     reply_packet.GetVersion(), reply_packet.GetId(), reply_packet.GetPacketType(),\n                     reply_packet.GetPacketDataSize());\n        }\n    }\n\n    std::thread worker_thread;\n    boost::asio::io_context io_context;\n    boost::asio::ip::udp::socket socket;\n    std::array<u8, MAX_PACKET_SIZE> request_buffer;\n    boost::asio::ip::udp::endpoint remote_endpoint;\n    std::function<void(std::unique_ptr<Packet>)> new_request_callback;\n};\n\n} // namespace Core::RPC",
    "Code_level": "Class-level",
    "FSMID_for_test": 153,
    "matched_results": [
      "#include <boost/asio.hpp>\n#include <thread>\n#include <array>\n#include <functional>\n#include <memory>\n\nconstexpr std::size_t MAX_PACKET_SIZE = 1024;\n\nclass Packet {\n    // Implementation of Packet class\n};\n\nclass UDPServer {\npublic:\n    class Impl {\n    public:\n        Impl(std::function<void(std::unique_ptr<Packet>)> callback)\n            : io_context(), socket(io_context), new_request_callback(callback) {\n            boost::asio::ip::udp::endpoint endpoint(boost::asio::ip::udp::v4(), 12345);\n            socket.open(endpoint.protocol());\n            socket.bind(endpoint);\n            StartReceive();\n            worker_thread = std::thread([this]() { io_context.run(); });\n        }\n\n        ~Impl() {\n            io_context.stop();\n            if (worker_thread.joinable()) {\n                worker_thread.join();\n            }\n        }\n\n        void StartReceive() {\n            socket.async_receive_from(\n                boost::asio::buffer(request_buffer), remote_endpoint,\n                [this](const boost::system::error_code& error, std::size_t bytes_transferred) {\n                    HandleReceive(error, bytes_transferred);\n                });\n        }\n\n        void HandleReceive(const boost::system::error_code& error, std::size_t bytes_transferred) {\n            if (!error && bytes_transferred > 0) {\n                // Validate and process the packet\n                auto packet = std::make_unique<Packet>();\n                // Assume packet is valid for this example\n                new_request_callback(std::move(packet));\n            }\n            StartReceive();\n        }\n\n        void SendReply(boost::asio::ip::udp::endpoint endpoint, Packet& packet) {\n            auto buffer = boost::asio::buffer(&packet, sizeof(packet));\n            socket.async_send_to(buffer, endpoint,\n                [](const boost::system::error_code& /*error*/, std::size_t /*bytes_transferred*/) {});\n        }\n\n    private:\n        std::thread worker_thread;\n        boost::asio::io_context io_context;\n        boost::asio::ip::udp::socket socket;\n        std::array<uint8_t, MAX_PACKET_SIZE> request_buffer;\n        boost::asio::ip::udp::endpoint remote_endpoint;\n        std::function<void(std::unique_ptr<Packet>)> new_request_callback;\n    };\n};",
      "#include <boost/asio.hpp>\n#include <thread>\n#include <array>\n#include <functional>\n#include <memory>\n\nconstexpr std::size_t MAX_PACKET_SIZE = 1024;\n\nclass Packet {\n    // Implementation of Packet class\n};\n\nclass UDPServer {\npublic:\n    class Impl {\n    public:\n        Impl(std::function<void(std::unique_ptr<Packet>)> callback)\n            : io_context(), socket(io_context), new_request_callback(callback) {\n            StartReceive();\n            worker_thread = std::thread([this]() { io_context.run(); });\n        }\n\n        ~Impl() {\n            io_context.stop();\n            if (worker_thread.joinable()) {\n                worker_thread.join();\n            }\n        }\n\n        void StartReceive() {\n            socket.async_receive_from(\n                boost::asio::buffer(request_buffer), remote_endpoint,\n                [this](const boost::system::error_code& error, std::size_t bytes_transferred) {\n                    HandleReceive(error, bytes_transferred);\n                });\n        }\n\n        void HandleReceive(const boost::system::error_code& error, std::size_t bytes_transferred) {\n            if (!error && bytes_transferred > 0) {\n                auto packet = std::make_unique<Packet>();\n                // Assume Packet has a method to parse from buffer\n                if (packet->parse(request_buffer.data(), bytes_transferred)) {\n                    new_request_callback(std::move(packet));\n                }\n            }\n            StartReceive();\n        }\n\n        void SendReply(boost::asio::ip::udp::endpoint endpoint, Packet& packet) {\n            auto buffer = packet.serialize(); // Assume Packet has a serialize method\n            socket.async_send_to(\n                boost::asio::buffer(buffer), endpoint,\n                [](const boost::system::error_code& /*error*/, std::size_t /*bytes_transferred*/) {});\n        }\n\n    private:\n        std::thread worker_thread;\n        boost::asio::io_context io_context;\n        boost::asio::ip::udp::socket socket;\n        std::array<uint8_t, MAX_PACKET_SIZE> request_buffer;\n        boost::asio::ip::udp::endpoint remote_endpoint;\n        std::function<void(std::unique_ptr<Packet>)> new_request_callback;\n    };\n};",
      "#include <boost/asio.hpp>\n#include <thread>\n#include <functional>\n#include <array>\n#include <memory>\n\nconstexpr std::size_t MAX_PACKET_SIZE = 1024;\n\nclass Packet {\n    // Packet implementation\n};\n\nclass UDPServer {\npublic:\n    class Impl {\n    public:\n        Impl(std::function<void(std::unique_ptr<Packet>)> callback)\n            : io_context(), socket(io_context), new_request_callback(std::move(callback)) {\n            boost::asio::ip::udp::endpoint endpoint(boost::asio::ip::udp::v4(), 12345);\n            socket.open(endpoint.protocol());\n            socket.bind(endpoint);\n            StartReceive();\n            worker_thread = std::thread([this]() { io_context.run(); });\n        }\n\n        ~Impl() {\n            io_context.stop();\n            if (worker_thread.joinable()) {\n                worker_thread.join();\n            }\n        }\n\n        void StartReceive() {\n            socket.async_receive_from(\n                boost::asio::buffer(request_buffer), remote_endpoint,\n                [this](const boost::system::error_code& error, std::size_t bytes_transferred) {\n                    HandleReceive(error, bytes_transferred);\n                });\n        }\n\n        void HandleReceive(const boost::system::error_code& error, std::size_t bytes_transferred) {\n            if (!error && bytes_transferred > 0) {\n                auto packet = std::make_unique<Packet>();\n                // Assume Packet has a method to parse from buffer\n                // packet->parse(request_buffer.data(), bytes_transferred);\n                new_request_callback(std::move(packet));\n            }\n            StartReceive();\n        }\n\n        void SendReply(boost::asio::ip::udp::endpoint endpoint, Packet& packet) {\n            // Assume Packet has a method to serialize to buffer\n            // std::array<u8, MAX_PACKET_SIZE> reply_buffer;\n            // std::size_t reply_size = packet.serialize(reply_buffer.data());\n            socket.async_send_to(\n                boost::asio::buffer(reply_buffer, reply_size), endpoint,\n                [](const boost::system::error_code& /*error*/, std::size_t /*bytes_transferred*/) {});\n        }\n\n    private:\n        std::thread worker_thread;\n        boost::asio::io_context io_context;\n        boost::asio::ip::udp::socket socket;\n        std::array<u8, MAX_PACKET_SIZE> request_buffer;\n        boost::asio::ip::udp::endpoint remote_endpoint;\n        std::function<void(std::unique_ptr<Packet>)> new_request_callback;\n    };\n};",
      "#include <boost/asio.hpp>\n#include <thread>\n#include <array>\n#include <functional>\n#include <memory>\n\nconstexpr std::size_t MAX_PACKET_SIZE = 1024;\n\nclass Packet {\n    // Packet implementation\n};\n\nclass UDPServer {\npublic:\n    class Impl {\n    public:\n        Impl(std::function<void(std::unique_ptr<Packet>)> callback)\n            : io_context(), socket(io_context), new_request_callback(callback) {\n            boost::asio::ip::udp::endpoint endpoint(boost::asio::ip::udp::v4(), 12345);\n            socket.open(endpoint.protocol());\n            socket.bind(endpoint);\n            StartReceive();\n            worker_thread = std::thread([this]() { io_context.run(); });\n        }\n\n        ~Impl() {\n            io_context.stop();\n            if (worker_thread.joinable()) {\n                worker_thread.join();\n            }\n        }\n\n    private:\n        void StartReceive() {\n            socket.async_receive_from(\n                boost::asio::buffer(request_buffer), remote_endpoint,\n                [this](const boost::system::error_code& error, std::size_t bytes_transferred) {\n                    HandleReceive(error, bytes_transferred);\n                });\n        }\n\n        void HandleReceive(const boost::system::error_code& error, std::size_t bytes_transferred) {\n            if (!error && bytes_transferred > 0) {\n                auto packet = std::make_unique<Packet>();\n                // Validate and process the packet\n                new_request_callback(std::move(packet));\n            }\n            StartReceive();\n        }\n\n        void SendReply(boost::asio::ip::udp::endpoint endpoint, Packet& packet) {\n            auto buffer = boost::asio::buffer(&packet, sizeof(packet));\n            socket.async_send_to(buffer, endpoint, [](const boost::system::error_code&, std::size_t) {});\n        }\n\n        std::thread worker_thread;\n        boost::asio::io_context io_context;\n        boost::asio::ip::udp::socket socket;\n        std::array<uint8_t, MAX_PACKET_SIZE> request_buffer;\n        boost::asio::ip::udp::endpoint remote_endpoint;\n        std::function<void(std::unique_ptr<Packet>)> new_request_callback;\n    };\n};",
      "#include <boost/asio.hpp>\n#include <thread>\n#include <functional>\n#include <array>\n#include <memory>\n\nconstexpr std::size_t MAX_PACKET_SIZE = 1024;\n\nclass Packet {\n    // Implementation of the Packet class\n};\n\nclass UDPServer {\npublic:\n    class Impl {\n    public:\n        Impl(std::function<void(std::unique_ptr<Packet>)> callback)\n            : io_context(), socket(io_context), new_request_callback(callback) {\n            boost::asio::ip::udp::endpoint endpoint(boost::asio::ip::udp::v4(), 12345);\n            socket.open(endpoint.protocol());\n            socket.bind(endpoint);\n            StartReceive();\n            worker_thread = std::thread([this]() { io_context.run(); });\n        }\n\n        ~Impl() {\n            io_context.stop();\n            if (worker_thread.joinable()) {\n                worker_thread.join();\n            }\n        }\n\n        void StartReceive() {\n            socket.async_receive_from(\n                boost::asio::buffer(request_buffer), remote_endpoint,\n                [this](const boost::system::error_code& error, std::size_t bytes_transferred) {\n                    HandleReceive(error, bytes_transferred);\n                });\n        }\n\n        void HandleReceive(const boost::system::error_code& error, std::size_t bytes_transferred) {\n            if (!error && bytes_transferred > 0) {\n                auto packet = std::make_unique<Packet>();\n                // Assume Packet has a method to parse data from a buffer\n                if (packet->parse(request_buffer.data(), bytes_transferred)) {\n                    new_request_callback(std::move(packet));\n                }\n            }\n            StartReceive();\n        }\n\n        void SendReply(boost::asio::ip::udp::endpoint endpoint, Packet& packet) {\n            auto buffer = packet.serialize(); // Assume Packet has a method to serialize to a buffer\n            socket.async_send_to(\n                boost::asio::buffer(buffer), endpoint,\n                [](const boost::system::error_code& /*error*/, std::size_t /*bytes_transferred*/) {});\n        }\n\n    private:\n        std::thread worker_thread;\n        boost::asio::io_context io_context;\n        boost::asio::ip::udp::socket socket;\n        std::array<uint8_t, MAX_PACKET_SIZE> request_buffer;\n        boost::asio::ip::udp::endpoint remote_endpoint;\n        std::function<void(std::unique_ptr<Packet>)> new_request_callback;\n    };\n};",
      "#include <boost/asio.hpp>\n#include <thread>\n#include <array>\n#include <functional>\n#include <memory>\n\nconstexpr std::size_t MAX_PACKET_SIZE = 1024;\n\nclass Packet {\n    // Implementation of Packet class\n};\n\nclass UDPServer {\npublic:\n    class Impl {\n    public:\n        Impl(std::function<void(std::unique_ptr<Packet>)> callback)\n            : io_context(), socket(io_context), new_request_callback(callback) {\n            StartReceive();\n            worker_thread = std::thread([this]() { io_context.run(); });\n        }\n\n        ~Impl() {\n            io_context.stop();\n            if (worker_thread.joinable()) {\n                worker_thread.join();\n            }\n        }\n\n        void StartReceive() {\n            socket.async_receive_from(\n                boost::asio::buffer(request_buffer), remote_endpoint,\n                [this](const boost::system::error_code& error, std::size_t bytes_transferred) {\n                    HandleReceive(error, bytes_transferred);\n                });\n        }\n\n        void HandleReceive(const boost::system::error_code& error, std::size_t bytes_transferred) {\n            if (!error && bytes_transferred > 0) {\n                auto packet = std::make_unique<Packet>();\n                // Validate and process the packet\n                new_request_callback(std::move(packet));\n            }\n            StartReceive();\n        }\n\n        void SendReply(boost::asio::ip::udp::endpoint endpoint, Packet& packet) {\n            auto buffer = boost::asio::buffer(&packet, sizeof(packet));\n            socket.async_send_to(buffer, endpoint, [](const boost::system::error_code&, std::size_t) {});\n        }\n\n    private:\n        std::thread worker_thread;\n        boost::asio::io_context io_context;\n        boost::asio::ip::udp::socket socket{io_context};\n        std::array<uint8_t, MAX_PACKET_SIZE> request_buffer;\n        boost::asio::ip::udp::endpoint remote_endpoint;\n        std::function<void(std::unique_ptr<Packet>)> new_request_callback;\n    };\n};",
      "#include <boost/asio.hpp>\n#include <thread>\n#include <array>\n#include <functional>\n#include <memory>\n\nconstexpr std::size_t MAX_PACKET_SIZE = 1024;\n\nclass Packet {\n    // Implementation of Packet class\n};\n\nclass UDPServer {\npublic:\n    class Impl {\n    public:\n        Impl(std::function<void(std::unique_ptr<Packet>)> callback)\n            : io_context(), socket(io_context), new_request_callback(callback) {\n            boost::asio::ip::udp::endpoint endpoint(boost::asio::ip::udp::v4(), 12345);\n            socket.open(endpoint.protocol());\n            socket.bind(endpoint);\n            StartReceive();\n            worker_thread = std::thread([this]() { io_context.run(); });\n        }\n\n        ~Impl() {\n            io_context.stop();\n            if (worker_thread.joinable()) {\n                worker_thread.join();\n            }\n        }\n\n    private:\n        void StartReceive() {\n            socket.async_receive_from(\n                boost::asio::buffer(request_buffer), remote_endpoint,\n                [this](const boost::system::error_code& error, std::size_t bytes_transferred) {\n                    HandleReceive(error, bytes_transferred);\n                });\n        }\n\n        void HandleReceive(const boost::system::error_code& error, std::size_t bytes_transferred) {\n            if (!error && bytes_transferred > 0) {\n                auto packet = std::make_unique<Packet>();\n                // Assume Packet has a method to parse data from buffer\n                // packet->parse(request_buffer.data(), bytes_transferred);\n                new_request_callback(std::move(packet));\n            }\n            StartReceive();\n        }\n\n        void SendReply(boost::asio::ip::udp::endpoint endpoint, Packet& packet) {\n            // Assume Packet has a method to serialize data to buffer\n            // std::array<u8, MAX_PACKET_SIZE> reply_buffer;\n            // std::size_t reply_size = packet.serialize(reply_buffer.data());\n            socket.async_send_to(\n                boost::asio::buffer(reply_buffer, reply_size), endpoint,\n                [](const boost::system::error_code& /*error*/, std::size_t /*bytes_transferred*/) {});\n        }\n\n        std::thread worker_thread;\n        boost::asio::io_context io_context;\n        boost::asio::ip::udp::socket socket;\n        std::array<u8, MAX_PACKET_SIZE> request_buffer;\n        boost::asio::ip::udp::endpoint remote_endpoint;\n        std::function<void(std::unique_ptr<Packet>)> new_request_callback;\n    };\n};"
    ],
    "unmatched_results": [
      "class UDPServer {\npublic:\n    class Impl {\n    public:\n        Impl(std::function<void(std::unique_ptr<Packet>)> callback)\n            : socket(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), 12345)),\n              new_request_callback(std::move(callback)) {\n            StartReceive();\n            worker_thread = std::thread([this]() { io_context.run(); });\n        }\n\n        ~Impl() {\n            io_context.stop();\n            if (worker_thread.joinable()) {\n                worker_thread.join();\n            }\n        }\n\n        void SendReply(boost::asio::ip::udp::endpoint endpoint, Packet& packet) {\n            auto buffer = boost::asio::buffer(packet.data(), packet.size());\n            socket.async_send_to(buffer, endpoint,\n                [](const boost::system::error_code& /*error*/, std::size_t /*bytes_transferred*/) {});\n        }\n\n    private:\n        void StartReceive() {\n            socket.async_receive_from(\n                boost::asio::buffer(request_buffer), remote_endpoint,\n                [this](const boost::system::error_code& error, std::size_t bytes_transferred) {\n                    HandleReceive(error, bytes_transferred);\n                });\n        }\n\n        void HandleReceive(const boost::system::error_code& error, std::size_t bytes_transferred) {\n            if (!error && bytes_transferred > 0) {\n                auto packet = std::make_unique<Packet>(request_buffer.data(), bytes_transferred);\n                if (packet->isValid()) {\n                    new_request_callback(std::move(packet));\n                }\n            }\n            StartReceive();\n        }\n\n        std::thread worker_thread;\n        boost::asio::io_context io_context;\n        boost::asio::ip::udp::socket socket;\n        std::array<u8, MAX_PACKET_SIZE> request_buffer;\n        boost::asio::ip::udp::endpoint remote_endpoint;\n        std::function<void(std::unique_ptr<Packet>)> new_request_callback;\n    };\n};",
      "class UDPServer {\npublic:\n    class Impl {\n    public:\n        Impl(std::function<void(std::unique_ptr<Packet>)> callback)\n            : io_context(), socket(io_context), new_request_callback(callback) {\n            socket.open(boost::asio::ip::udp::v4());\n            StartReceive();\n            worker_thread = std::thread([this]() { io_context.run(); });\n        }\n\n        ~Impl() {\n            io_context.stop();\n            if (worker_thread.joinable()) {\n                worker_thread.join();\n            }\n        }\n\n        void SendReply(boost::asio::ip::udp::endpoint endpoint, Packet& packet) {\n            auto buffer = boost::asio::buffer(packet.data(), packet.size());\n            socket.async_send_to(buffer, endpoint,\n                [](const boost::system::error_code& /*error*/, std::size_t /*bytes_transferred*/) {});\n        }\n\n    private:\n        void StartReceive() {\n            socket.async_receive_from(\n                boost::asio::buffer(request_buffer), remote_endpoint,\n                [this](const boost::system::error_code& error, std::size_t bytes_transferred) {\n                    HandleReceive(error, bytes_transferred);\n                });\n        }\n\n        void HandleReceive(const boost::system::error_code& error, std::size_t bytes_transferred) {\n            if (!error && bytes_transferred > 0) {\n                auto packet = std::make_unique<Packet>(request_buffer.data(), bytes_transferred);\n                if (packet->isValid()) {\n                    new_request_callback(std::move(packet));\n                }\n            }\n            StartReceive();\n        }\n\n        std::thread worker_thread;\n        boost::asio::io_context io_context;\n        boost::asio::ip::udp::socket socket;\n        std::array<u8, MAX_PACKET_SIZE> request_buffer;\n        boost::asio::ip::udp::endpoint remote_endpoint;\n        std::function<void(std::unique_ptr<Packet>)> new_request_callback;\n    };\n};",
      "class UDPServer {\npublic:\n    class Impl {\n    public:\n        Impl(std::function<void(std::unique_ptr<Packet>)> callback)\n            : io_context(), socket(io_context), new_request_callback(std::move(callback)) {\n            boost::asio::ip::udp::endpoint endpoint(boost::asio::ip::udp::v4(), PORT);\n            socket.open(endpoint.protocol());\n            socket.bind(endpoint);\n            StartReceive();\n            worker_thread = std::thread([this]() { io_context.run(); });\n        }\n\n        ~Impl() {\n            io_context.stop();\n            if (worker_thread.joinable()) {\n                worker_thread.join();\n            }\n        }\n\n    private:\n        void StartReceive() {\n            socket.async_receive_from(\n                boost::asio::buffer(request_buffer), remote_endpoint,\n                [this](const boost::system::error_code& error, std::size_t bytes_transferred) {\n                    HandleReceive(error, bytes_transferred);\n                });\n        }\n\n        void HandleReceive(const boost::system::error_code& error, std::size_t bytes_transferred) {\n            if (!error && bytes_transferred > 0) {\n                auto packet = std::make_unique<Packet>(request_buffer.data(), bytes_transferred);\n                if (packet->IsValid()) {\n                    new_request_callback(std::move(packet));\n                }\n            }\n            StartReceive();\n        }\n\n        void SendReply(boost::asio::ip::udp::endpoint endpoint, Packet& packet) {\n            socket.async_send_to(\n                boost::asio::buffer(packet.GetData(), packet.GetSize()), endpoint,\n                [](const boost::system::error_code& /*error*/, std::size_t /*bytes_transferred*/) {});\n        }\n\n        std::thread worker_thread;\n        boost::asio::io_context io_context;\n        boost::asio::ip::udp::socket socket;\n        std::array<u8, MAX_PACKET_SIZE> request_buffer;\n        boost::asio::ip::udp::endpoint remote_endpoint;\n        std::function<void(std::unique_ptr<Packet>)> new_request_callback;\n    };\n};"
    ],
    "match_count": 7,
    "pass@3": 0.9916666666666667,
    "pass@5": 1.0
  },
  {
    "Task_id": 36,
    "Instruction": "Task Description: Create a UDP multicast receiver class using Boost.Asio that listens for incoming datagrams on a specified multicast address and port, and prints received messages to the console.\n\nClass Description: The `receiver` class encapsulates functionality for receiving UDP multicast messages. It initializes a UDP socket, joins a multicast group, and asynchronously receives datagrams, printing their contents to standard output.\n\nAttributes:\n- socket_: boost::asio::ip::udp::socket - The UDP socket used for communication\n- sender_endpoint_: boost::asio::ip::udp::endpoint - Stores the endpoint of the sender of the last received message\n- data_: std::array<char, 1024> - Buffer for storing received data\n\nMethods:\n- receiver(boost::asio::io_context&, const boost::asio::ip::address&, const boost::asio::ip::address&) -> None - Constructor that initializes the socket, binds it to the listening address and port, joins the multicast group, and starts receiving\n- do_receive() -> None - Private method that asynchronously receives data and prints it to console, then continues listening for more data",
    "Canonical_solution": "#include <boost/asio.hpp>\n#include <array>\n#include <string>\n\nconstexpr short multicast_port = 30001;\n\nclass receiver\n{\npublic:\n  receiver(boost::asio::io_context& io_context,\n      const boost::asio::ip::address& listen_address,\n      const boost::asio::ip::address& multicast_address)\n    : socket_(io_context)\n  {\n    // Create the socket so that multiple may be bound to the same address.\n    boost::asio::ip::udp::endpoint listen_endpoint(\n        listen_address, multicast_port);\n    socket_.open(listen_endpoint.protocol());\n    socket_.set_option(boost::asio::ip::udp::socket::reuse_address(true));\n    socket_.bind(listen_endpoint);\n\n    // Join the multicast group.\n    socket_.set_option(\n        boost::asio::ip::multicast::join_group(multicast_address));\n\n    do_receive();\n  }\n\nprivate:\n  void do_receive()\n  {\n    socket_.async_receive_from(\n        boost::asio::buffer(data_), sender_endpoint_,\n        [this](boost::system::error_code ec, std::size_t length)\n        {\n          if (!ec)\n          {\n            std::cout.write(data_.data(), length);\n            std::cout << std::endl;\n\n            do_receive();\n          }\n        });\n  }\n\n  boost::asio::ip::udp::socket socket_;\n  boost::asio::ip::udp::endpoint sender_endpoint_;\n  std::array<char, 1024> data_;\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 153,
    "matched_results": [
      "#include <boost/asio.hpp>\n#include <iostream>\n#include <array>\n\nclass receiver {\npublic:\n    receiver(boost::asio::io_context& io_context, const boost::asio::ip::address& listen_address, const boost::asio::ip::address& multicast_address)\n        : socket_(io_context) {\n        boost::asio::ip::udp::endpoint listen_endpoint(listen_address, 30001);\n        socket_.open(listen_endpoint.protocol());\n        socket_.set_option(boost::asio::ip::udp::socket::reuse_address(true));\n        socket_.bind(listen_endpoint);\n\n        socket_.set_option(boost::asio::ip::multicast::join_group(multicast_address));\n        do_receive();\n    }\n\nprivate:\n    void do_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(data_), sender_endpoint_,\n            [this](boost::system::error_code ec, std::size_t bytes_recvd) {\n                if (!ec) {\n                    std::cout.write(data_.data(), bytes_recvd);\n                    std::cout << std::endl;\n                    do_receive();\n                }\n            });\n    }\n\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint sender_endpoint_;\n    std::array<char, 1024> data_;\n};\n\nint main(int argc, char* argv[]) {\n    if (argc != 3) {\n        std::cerr << \"Usage: receiver <listen_address> <multicast_address>\\n\";\n        return 1;\n    }\n\n    boost::asio::io_context io_context;\n    boost::asio::ip::address listen_address = boost::asio::ip::make_address(argv[1]);\n    boost::asio::ip::address multicast_address = boost::asio::ip::make_address(argv[2]);\n\n    receiver r(io_context, listen_address, multicast_address);\n    io_context.run();\n\n    return 0;\n}",
      "#include <boost/asio.hpp>\n#include <iostream>\n#include <array>\n\nclass receiver {\npublic:\n    receiver(boost::asio::io_context& io_context, const boost::asio::ip::address& listen_address, const boost::asio::ip::address& multicast_address)\n        : socket_(io_context) {\n        boost::asio::ip::udp::endpoint listen_endpoint(listen_address, multicast_address.to_v4().to_ulong());\n        socket_.open(listen_endpoint.protocol());\n        socket_.set_option(boost::asio::ip::udp::socket::reuse_address(true));\n        socket_.bind(listen_endpoint);\n\n        socket_.set_option(boost::asio::ip::multicast::join_group(multicast_address));\n        do_receive();\n    }\n\nprivate:\n    void do_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(data_), sender_endpoint_,\n            [this](boost::system::error_code ec, std::size_t bytes_recvd) {\n                if (!ec) {\n                    std::cout.write(data_.data(), bytes_recvd);\n                    std::cout << std::endl;\n                    do_receive();\n                }\n            });\n    }\n\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint sender_endpoint_;\n    std::array<char, 1024> data_;\n};\n\nint main(int argc, char* argv[]) {\n    if (argc != 3) {\n        std::cerr << \"Usage: \" << argv[0] << \" <listen_address> <multicast_address>\" << std::endl;\n        return 1;\n    }\n\n    boost::asio::io_context io_context;\n    boost::asio::ip::address listen_address = boost::asio::ip::make_address(argv[1]);\n    boost::asio::ip::address multicast_address = boost::asio::ip::make_address(argv[2]);\n\n    receiver r(io_context, listen_address, multicast_address);\n    io_context.run();\n\n    return 0;\n}",
      "#include <boost/asio.hpp>\n#include <iostream>\n#include <array>\n\nclass receiver {\npublic:\n    receiver(boost::asio::io_context& io_context, const boost::asio::ip::address& listen_address, const boost::asio::ip::address& multicast_address)\n        : socket_(io_context) {\n        boost::asio::ip::udp::endpoint listen_endpoint(listen_address, multicast_port);\n        socket_.open(listen_endpoint.protocol());\n        socket_.set_option(boost::asio::ip::udp::socket::reuse_address(true));\n        socket_.bind(listen_endpoint);\n\n        socket_.set_option(boost::asio::ip::multicast::join_group(multicast_address));\n        do_receive();\n    }\n\nprivate:\n    void do_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(data_), sender_endpoint_,\n            [this](boost::system::error_code ec, std::size_t bytes_recvd) {\n                if (!ec) {\n                    std::cout.write(data_.data(), bytes_recvd);\n                    std::cout << std::endl;\n                    do_receive();\n                }\n            });\n    }\n\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint sender_endpoint_;\n    std::array<char, 1024> data_;\n    static constexpr short multicast_port = 30001;\n};\n\nint main(int argc, char* argv[]) {\n    if (argc != 3) {\n        std::cerr << \"Usage: receiver <listen_address> <multicast_address>\\n\";\n        return 1;\n    }\n\n    boost::asio::io_context io_context;\n    boost::asio::ip::address listen_address = boost::asio::ip::make_address(argv[1]);\n    boost::asio::ip::address multicast_address = boost::asio::ip::make_address(argv[2]);\n\n    receiver r(io_context, listen_address, multicast_address);\n    io_context.run();\n\n    return 0;\n}",
      "#include <boost/asio.hpp>\n#include <iostream>\n#include <array>\n\nclass receiver {\npublic:\n    receiver(boost::asio::io_context& io_context, const boost::asio::ip::address& listen_address, const boost::asio::ip::address& multicast_address)\n        : socket_(io_context) {\n        boost::asio::ip::udp::endpoint listen_endpoint(listen_address, multicast_address.to_v4().to_ulong());\n        socket_.open(listen_endpoint.protocol());\n        socket_.set_option(boost::asio::ip::udp::socket::reuse_address(true));\n        socket_.bind(listen_endpoint);\n\n        socket_.set_option(boost::asio::ip::multicast::join_group(multicast_address));\n        do_receive();\n    }\n\nprivate:\n    void do_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(data_), sender_endpoint_,\n            [this](boost::system::error_code ec, std::size_t bytes_recvd) {\n                if (!ec) {\n                    std::cout.write(data_.data(), bytes_recvd);\n                    std::cout << std::endl;\n                    do_receive();\n                }\n            });\n    }\n\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint sender_endpoint_;\n    std::array<char, 1024> data_;\n};",
      "#include <boost/asio.hpp>\n#include <iostream>\n#include <array>\n\nclass receiver {\npublic:\n    receiver(boost::asio::io_context& io_context, const boost::asio::ip::address& listen_address, const boost::asio::ip::address& multicast_address)\n        : socket_(io_context) {\n        boost::asio::ip::udp::endpoint listen_endpoint(listen_address, multicast_port);\n        socket_.open(listen_endpoint.protocol());\n        socket_.set_option(boost::asio::ip::udp::socket::reuse_address(true));\n        socket_.bind(listen_endpoint);\n\n        socket_.set_option(boost::asio::ip::multicast::join_group(multicast_address.to_v4(), listen_address.to_v4()));\n\n        do_receive();\n    }\n\nprivate:\n    void do_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(data_), sender_endpoint_,\n            [this](boost::system::error_code ec, std::size_t length) {\n                if (!ec) {\n                    std::cout.write(data_.data(), length);\n                    std::cout << std::endl;\n                    do_receive();\n                }\n            });\n    }\n\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint sender_endpoint_;\n    std::array<char, 1024> data_;\n    static constexpr short multicast_port = 30001;\n};\n\nint main(int argc, char* argv[]) {\n    if (argc != 3) {\n        std::cerr << \"Usage: receiver <listen_address> <multicast_address>\\n\";\n        return 1;\n    }\n\n    boost::asio::io_context io_context;\n    boost::asio::ip::address listen_address = boost::asio::ip::make_address(argv[1]);\n    boost::asio::ip::address multicast_address = boost::asio::ip::make_address(argv[2]);\n\n    receiver r(io_context, listen_address, multicast_address);\n    io_context.run();\n\n    return 0;\n}",
      "#include <boost/asio.hpp>\n#include <iostream>\n#include <array>\n\nclass receiver {\npublic:\n    receiver(boost::asio::io_context& io_context, const boost::asio::ip::address& listen_address, const boost::asio::ip::address& multicast_address)\n        : socket_(io_context) {\n        boost::asio::ip::udp::endpoint listen_endpoint(listen_address, multicast_port);\n        socket_.open(listen_endpoint.protocol());\n        socket_.set_option(boost::asio::ip::udp::socket::reuse_address(true));\n        socket_.bind(listen_endpoint);\n\n        socket_.set_option(boost::asio::ip::multicast::join_group(multicast_address));\n\n        do_receive();\n    }\n\nprivate:\n    void do_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(data_), sender_endpoint_,\n            [this](boost::system::error_code ec, std::size_t bytes_recvd) {\n                if (!ec) {\n                    std::cout.write(data_.data(), bytes_recvd);\n                    std::cout << std::endl;\n                    do_receive();\n                }\n            });\n    }\n\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint sender_endpoint_;\n    std::array<char, 1024> data_;\n    static constexpr short multicast_port = 30001;\n};\n\nint main(int argc, char* argv[]) {\n    if (argc != 3) {\n        std::cerr << \"Usage: receiver <listen_address> <multicast_address>\\n\";\n        return 1;\n    }\n\n    boost::asio::io_context io_context;\n    boost::asio::ip::address listen_address = boost::asio::ip::make_address(argv[1]);\n    boost::asio::ip::address multicast_address = boost::asio::ip::make_address(argv[2]);\n\n    receiver r(io_context, listen_address, multicast_address);\n    io_context.run();\n\n    return 0;\n}",
      "#include <boost/asio.hpp>\n#include <iostream>\n#include <array>\n\nclass receiver {\npublic:\n    receiver(boost::asio::io_context& io_context, const boost::asio::ip::address& listen_address, const boost::asio::ip::address& multicast_address)\n        : socket_(io_context) {\n        boost::asio::ip::udp::endpoint listen_endpoint(listen_address, multicast_address.to_v4().to_ulong());\n        socket_.open(listen_endpoint.protocol());\n        socket_.set_option(boost::asio::ip::udp::socket::reuse_address(true));\n        socket_.bind(listen_endpoint);\n\n        socket_.set_option(boost::asio::ip::multicast::join_group(multicast_address));\n        do_receive();\n    }\n\nprivate:\n    void do_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(data_), sender_endpoint_,\n            [this](boost::system::error_code ec, std::size_t bytes_recvd) {\n                if (!ec) {\n                    std::cout.write(data_.data(), bytes_recvd);\n                    std::cout << std::endl;\n                    do_receive();\n                }\n            });\n    }\n\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint sender_endpoint_;\n    std::array<char, 1024> data_;\n};\n\nint main(int argc, char* argv[]) {\n    if (argc != 3) {\n        std::cerr << \"Usage: \" << argv[0] << \" <listen_address> <multicast_address>\\n\";\n        return 1;\n    }\n\n    boost::asio::io_context io_context;\n    boost::asio::ip::address listen_address = boost::asio::ip::make_address(argv[1]);\n    boost::asio::ip::address multicast_address = boost::asio::ip::make_address(argv[2]);\n\n    receiver r(io_context, listen_address, multicast_address);\n    io_context.run();\n\n    return 0;\n}",
      "#include <boost/asio.hpp>\n#include <iostream>\n#include <array>\n\nclass receiver {\npublic:\n    receiver(boost::asio::io_context& io_context, const boost::asio::ip::address& listen_address, const boost::asio::ip::address& multicast_address)\n        : socket_(io_context) {\n        boost::asio::ip::udp::endpoint listen_endpoint(listen_address, multicast_address.to_v4().to_ulong());\n\n        socket_.open(listen_endpoint.protocol());\n        socket_.set_option(boost::asio::ip::udp::socket::reuse_address(true));\n        socket_.bind(listen_endpoint);\n\n        socket_.set_option(boost::asio::ip::multicast::join_group(multicast_address));\n\n        do_receive();\n    }\n\nprivate:\n    void do_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(data_), sender_endpoint_,\n            [this](boost::system::error_code ec, std::size_t bytes_recvd) {\n                if (!ec) {\n                    std::cout.write(data_.data(), bytes_recvd);\n                    std::cout << std::endl;\n                    do_receive();\n                }\n            });\n    }\n\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint sender_endpoint_;\n    std::array<char, 1024> data_;\n};",
      "#include <boost/asio.hpp>\n#include <iostream>\n#include <array>\n\nclass receiver {\npublic:\n    receiver(boost::asio::io_context& io_context, const boost::asio::ip::address& listen_address, const boost::asio::ip::address& multicast_address)\n        : socket_(io_context) {\n        boost::asio::ip::udp::endpoint listen_endpoint(listen_address, multicast_address.to_v4().to_uint());\n\n        socket_.open(listen_endpoint.protocol());\n        socket_.set_option(boost::asio::ip::udp::socket::reuse_address(true));\n        socket_.bind(listen_endpoint);\n\n        socket_.set_option(boost::asio::ip::multicast::join_group(multicast_address));\n\n        do_receive();\n    }\n\nprivate:\n    void do_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(data_), sender_endpoint_,\n            [this](boost::system::error_code ec, std::size_t bytes_recvd) {\n                if (!ec) {\n                    std::cout.write(data_.data(), bytes_recvd);\n                    std::cout << std::endl;\n                    do_receive();\n                }\n            });\n    }\n\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint sender_endpoint_;\n    std::array<char, 1024> data_;\n};",
      "#include <boost/asio.hpp>\n#include <iostream>\n#include <array>\n\nclass receiver {\npublic:\n    receiver(boost::asio::io_context& io_context, const boost::asio::ip::address& listen_address, const boost::asio::ip::address& multicast_address)\n        : socket_(io_context) {\n        boost::asio::ip::udp::endpoint listen_endpoint(listen_address, multicast_address.to_v4().to_uint());\n        socket_.open(listen_endpoint.protocol());\n        socket_.set_option(boost::asio::ip::udp::socket::reuse_address(true));\n        socket_.bind(listen_endpoint);\n\n        socket_.set_option(boost::asio::ip::multicast::join_group(multicast_address));\n        do_receive();\n    }\n\nprivate:\n    void do_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(data_), sender_endpoint_,\n            [this](boost::system::error_code ec, std::size_t bytes_recvd) {\n                if (!ec) {\n                    std::cout.write(data_.data(), bytes_recvd);\n                    std::cout << std::endl;\n                    do_receive();\n                }\n            });\n    }\n\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint sender_endpoint_;\n    std::array<char, 1024> data_;\n};"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 37,
    "Instruction": "Task Description: Implement a UDP client function using Boost.Asio that sends a request to a UDP server and receives a response.\n\nFunction Description: The function establishes a UDP connection to a specified host, sends a minimal request packet, waits for a response, and prints the received data to standard output. It uses Boost.Asio for asynchronous UDP operations.\n\nInput: \n- host: std::string - The hostname or IP address of the UDP server to connect to\n\nOutput: \n- None (void function), but prints the received data to standard output\n\nNote: The function uses a fixed service name \"daytime\" (port 13) for demonstration purposes. In a real application, this would typically be configurable. The function handles both IPv4 and UDP protocol operations.",
    "Canonical_solution": "#include <array>\n#include <boost/asio.hpp>\nusing boost::asio::ip::udp;\n\nvoid udp_client(const std::string& host)\n{\n    boost::asio::io_context io_context;\n\n    udp::resolver resolver(io_context);\n    udp::endpoint receiver_endpoint =\n      *resolver.resolve(udp::v4(), host, \"daytime\").begin();\n\n    udp::socket socket(io_context);\n    socket.open(udp::v4());\n\n    std::array<char, 1> send_buf  = {{ 0 }};\n    socket.send_to(boost::asio::buffer(send_buf), receiver_endpoint);\n\n    std::array<char, 128> recv_buf;\n    udp::endpoint sender_endpoint;\n    size_t len = socket.receive_from(\n        boost::asio::buffer(recv_buf), sender_endpoint);\n\n    std::cout.write(recv_buf.data(), len);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 153,
    "matched_results": [
      "#include <iostream>\n#include <boost/asio.hpp>\n\nvoid udp_client(const std::string& host) {\n    try {\n        boost::asio::io_context io_context;\n\n        boost::asio::ip::udp::resolver resolver(io_context);\n        boost::asio::ip::udp::resolver::results_type endpoints = resolver.resolve(boost::asio::ip::udp::v4(), host, \"daytime\");\n\n        boost::asio::ip::udp::socket socket(io_context);\n        socket.open(boost::asio::ip::udp::v4());\n\n        boost::asio::ip::udp::endpoint receiver_endpoint = *endpoints.begin();\n\n        std::string request = \"request\";\n        socket.send_to(boost::asio::buffer(request), receiver_endpoint);\n\n        char reply[1024];\n        boost::asio::ip::udp::endpoint sender_endpoint;\n        size_t reply_length = socket.receive_from(boost::asio::buffer(reply), sender_endpoint);\n\n        std::cout.write(reply, reply_length);\n        std::cout << std::endl;\n    } catch (std::exception& e) {\n        std::cerr << \"Exception: \" << e.what() << std::endl;\n    }\n}",
      "#include <iostream>\n#include <boost/asio.hpp>\n\nvoid udp_client(const std::string& host) {\n    try {\n        boost::asio::io_context io_context;\n\n        boost::asio::ip::udp::resolver resolver(io_context);\n        boost::asio::ip::udp::endpoint receiver_endpoint = *resolver.resolve(boost::asio::ip::udp::v4(), host, \"daytime\").begin();\n\n        boost::asio::ip::udp::socket socket(io_context);\n        socket.open(boost::asio::ip::udp::v4());\n\n        std::string request = \"request\";\n        socket.send_to(boost::asio::buffer(request), receiver_endpoint);\n\n        char reply[1024];\n        boost::asio::ip::udp::endpoint sender_endpoint;\n        size_t reply_length = socket.receive_from(boost::asio::buffer(reply), sender_endpoint);\n\n        std::cout.write(reply, reply_length);\n        std::cout << std::endl;\n    } catch (std::exception& e) {\n        std::cerr << \"Exception: \" << e.what() << std::endl;\n    }\n}",
      "#include <iostream>\n#include <boost/asio.hpp>\n\nvoid udp_client(const std::string& host) {\n    try {\n        boost::asio::io_context io_context;\n\n        boost::asio::ip::udp::resolver resolver(io_context);\n        boost::asio::ip::udp::endpoint receiver_endpoint = *resolver.resolve(boost::asio::ip::udp::v4(), host, \"daytime\").begin();\n\n        boost::asio::ip::udp::socket socket(io_context);\n        socket.open(boost::asio::ip::udp::v4());\n\n        std::string request = \"request\";\n        socket.send_to(boost::asio::buffer(request), receiver_endpoint);\n\n        char reply[1024];\n        boost::asio::ip::udp::endpoint sender_endpoint;\n        size_t reply_length = socket.receive_from(boost::asio::buffer(reply), sender_endpoint);\n\n        std::cout.write(reply, reply_length);\n        std::cout << std::endl;\n    }\n    catch (std::exception& e) {\n        std::cerr << \"Exception: \" << e.what() << std::endl;\n    }\n}",
      "#include <iostream>\n#include <boost/asio.hpp>\n\nvoid udp_client(const std::string& host) {\n    try {\n        boost::asio::io_context io_context;\n\n        boost::asio::ip::udp::resolver resolver(io_context);\n        boost::asio::ip::udp::resolver::results_type endpoints = resolver.resolve(boost::asio::ip::udp::v4(), host, \"daytime\");\n\n        boost::asio::ip::udp::socket socket(io_context);\n        socket.open(boost::asio::ip::udp::v4());\n\n        boost::asio::ip::udp::endpoint receiver_endpoint = *endpoints.begin();\n        std::string request = \"request\";\n        socket.send_to(boost::asio::buffer(request), receiver_endpoint);\n\n        char reply[1024];\n        boost::asio::ip::udp::endpoint sender_endpoint;\n        size_t reply_length = socket.receive_from(boost::asio::buffer(reply), sender_endpoint);\n\n        std::cout.write(reply, reply_length);\n        std::cout << std::endl;\n    } catch (std::exception& e) {\n        std::cerr << \"Exception: \" << e.what() << std::endl;\n    }\n}",
      "#include <iostream>\n#include <boost/asio.hpp>\n\nvoid udp_client(const std::string& host) {\n    try {\n        boost::asio::io_context io_context;\n\n        boost::asio::ip::udp::resolver resolver(io_context);\n        boost::asio::ip::udp::endpoint endpoint = *resolver.resolve(boost::asio::ip::udp::v4(), host, \"daytime\").begin();\n\n        boost::asio::ip::udp::socket socket(io_context);\n        socket.open(boost::asio::ip::udp::v4());\n\n        std::string request = \"Hello\";\n        socket.send_to(boost::asio::buffer(request), endpoint);\n\n        char reply[1024];\n        boost::asio::ip::udp::endpoint sender_endpoint;\n        size_t reply_length = socket.receive_from(boost::asio::buffer(reply, 1024), sender_endpoint);\n\n        std::cout << \"Reply is: \";\n        std::cout.write(reply, reply_length);\n        std::cout << \"\\n\";\n    } catch (std::exception& e) {\n        std::cerr << \"Exception: \" << e.what() << \"\\n\";\n    }\n}",
      "#include <iostream>\n#include <boost/asio.hpp>\n\nvoid udp_client(const std::string& host) {\n    try {\n        boost::asio::io_context io_context;\n\n        boost::asio::ip::udp::resolver resolver(io_context);\n        boost::asio::ip::udp::resolver::query query(boost::asio::ip::udp::v4(), host, \"daytime\");\n        boost::asio::ip::udp::endpoint receiver_endpoint = *resolver.resolve(query).begin();\n\n        boost::asio::ip::udp::socket socket(io_context);\n        socket.open(boost::asio::ip::udp::v4());\n\n        std::string request = \"Hello\";\n        socket.send_to(boost::asio::buffer(request), receiver_endpoint);\n\n        char reply[1024];\n        boost::asio::ip::udp::endpoint sender_endpoint;\n        size_t reply_length = socket.receive_from(boost::asio::buffer(reply, 1024), sender_endpoint);\n\n        std::cout << \"Reply is: \";\n        std::cout.write(reply, reply_length);\n        std::cout << \"\\n\";\n    } catch (std::exception& e) {\n        std::cerr << \"Exception: \" << e.what() << \"\\n\";\n    }\n}",
      "#include <iostream>\n#include <boost/asio.hpp>\n\nvoid udp_client(const std::string& host) {\n    try {\n        boost::asio::io_context io_context;\n\n        boost::asio::ip::udp::resolver resolver(io_context);\n        boost::asio::ip::udp::endpoint receiver_endpoint = *resolver.resolve(boost::asio::ip::udp::v4(), host, \"daytime\").begin();\n\n        boost::asio::ip::udp::socket socket(io_context);\n        socket.open(boost::asio::ip::udp::v4());\n\n        std::string request = \"request\";\n        socket.send_to(boost::asio::buffer(request), receiver_endpoint);\n\n        char reply[1024];\n        boost::asio::ip::udp::endpoint sender_endpoint;\n        size_t reply_length = socket.receive_from(boost::asio::buffer(reply), sender_endpoint);\n\n        std::cout.write(reply, reply_length);\n        std::cout << std::endl;\n    } catch (std::exception& e) {\n        std::cerr << \"Exception: \" << e.what() << std::endl;\n    }\n}",
      "#include <iostream>\n#include <boost/asio.hpp>\n\nvoid udp_client(const std::string& host) {\n    try {\n        boost::asio::io_context io_context;\n\n        boost::asio::ip::udp::resolver resolver(io_context);\n        boost::asio::ip::udp::resolver::query query(boost::asio::ip::udp::v4(), host, \"daytime\");\n        boost::asio::ip::udp::endpoint receiver_endpoint = *resolver.resolve(query).begin();\n\n        boost::asio::ip::udp::socket socket(io_context);\n        socket.open(boost::asio::ip::udp::v4());\n\n        std::string request = \"Hello\";\n        socket.send_to(boost::asio::buffer(request), receiver_endpoint);\n\n        char reply[1024];\n        boost::asio::ip::udp::endpoint sender_endpoint;\n        size_t reply_length = socket.receive_from(boost::asio::buffer(reply, 1024), sender_endpoint);\n\n        std::cout << \"Reply is: \";\n        std::cout.write(reply, reply_length);\n        std::cout << \"\\n\";\n    } catch (std::exception& e) {\n        std::cerr << \"Exception: \" << e.what() << \"\\n\";\n    }\n}",
      "#include <iostream>\n#include <boost/asio.hpp>\n\nvoid udp_client(const std::string& host) {\n    try {\n        boost::asio::io_context io_context;\n\n        boost::asio::ip::udp::resolver resolver(io_context);\n        boost::asio::ip::udp::resolver::results_type endpoints = resolver.resolve(boost::asio::ip::udp::v4(), host, \"daytime\");\n\n        boost::asio::ip::udp::socket socket(io_context);\n        socket.open(boost::asio::ip::udp::v4());\n\n        boost::asio::ip::udp::endpoint receiver_endpoint = *endpoints.begin();\n\n        std::string request = \"Hello\";\n        socket.send_to(boost::asio::buffer(request), receiver_endpoint);\n\n        char reply[1024];\n        boost::asio::ip::udp::endpoint sender_endpoint;\n        size_t reply_length = socket.receive_from(boost::asio::buffer(reply), sender_endpoint);\n\n        std::cout.write(reply, reply_length);\n        std::cout << std::endl;\n    } catch (std::exception& e) {\n        std::cerr << \"Exception: \" << e.what() << std::endl;\n    }\n}",
      "#include <iostream>\n#include <boost/asio.hpp>\n\nvoid udp_client(const std::string& host) {\n    try {\n        boost::asio::io_context io_context;\n\n        boost::asio::ip::udp::resolver resolver(io_context);\n        boost::asio::ip::udp::resolver::results_type endpoints = resolver.resolve(boost::asio::ip::udp::v4(), host, \"daytime\");\n\n        boost::asio::ip::udp::socket socket(io_context);\n        socket.open(boost::asio::ip::udp::v4());\n\n        boost::asio::ip::udp::endpoint receiver_endpoint = *endpoints.begin();\n\n        std::string request = \"Hello\";\n        socket.send_to(boost::asio::buffer(request), receiver_endpoint);\n\n        char reply[1024];\n        boost::asio::ip::udp::endpoint sender_endpoint;\n        size_t reply_length = socket.receive_from(boost::asio::buffer(reply), sender_endpoint);\n\n        std::cout.write(reply, reply_length);\n        std::cout << std::endl;\n    } catch (std::exception& e) {\n        std::cerr << \"Exception: \" << e.what() << std::endl;\n    }\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 38,
    "Instruction": "Task Description: Implement a UDP-based client-server communication system using Boost.Asio in C++ that demonstrates asynchronous sending and receiving of datagrams.\n\nClass Description: The `udp_communicator` class provides asynchronous UDP communication capabilities for both sending and receiving datagrams. It manages socket operations, IO context, and buffers for network communication.\n\nAttributes:\n- io_context_: boost::asio::io_context - Manages asynchronous operations for Boost.Asio\n- socket_: boost::asio::ip::udp::socket - Represents the UDP socket for communication\n- receiver_endpoint_: boost::asio::ip::udp::endpoint - Stores the endpoint information for receiving data\n- sender_endpoint_: boost::asio::ip::udp::endpoint - Stores the endpoint information of the sender\n- receive_buffer_: std::array<char, 1024> - Buffer for storing received data\n- send_buffer_: std::string - Buffer for storing data to be sent\n\nMethods:\n- constructor(io_context, port) -> void - Initializes the UDP socket and binds it to the specified port\n- start_receive() -> void - Begins asynchronous reception of UDP datagrams\n- handle_receive(error_code, bytes_transferred) -> void - Callback for handling received data\n- send_to(message, endpoint) -> void - Asynchronously sends a message to the specified endpoint\n- handle_send(error_code, bytes_transferred) -> void - Callback for handling send completion\n- get_socket() -> boost::asio::ip::udp::socket& - Returns a reference to the UDP socket\n- get_io_context() -> boost::asio::io_context& - Returns a reference to the IO context",
    "Canonical_solution": "#include <boost/asio.hpp>\n#include <istream>\n#include <ostream>\n#include \"icmp_header.hpp\"\n#include \"ipv4_header.hpp\"\n\nusing boost::asio::ip::icmp;\nusing boost::asio::steady_timer;\nnamespace chrono = boost::asio::chrono;\n\nclass pinger\n{\npublic:\n  pinger(boost::asio::io_context& io_context, const char* destination)\n    : resolver_(io_context), socket_(io_context, icmp::v4()),\n      timer_(io_context), sequence_number_(0), num_replies_(0)\n  {\n    destination_ = *resolver_.resolve(icmp::v4(), destination, \"\").begin();\n\n    start_send();\n    start_receive();\n  }\n\nprivate:\n  void start_send()\n  {\n    std::string body(\"\\\"Hello!\\\" from Asio ping.\");\n\n    icmp_header echo_request;\n    echo_request.type(icmp_header::echo_request);\n    echo_request.code(0);\n    echo_request.identifier(get_identifier());\n    echo_request.sequence_number(++sequence_number_);\n    compute_checksum(echo_request, body.begin(), body.end());\n\n    boost::asio::streambuf request_buffer;\n    std::ostream os(&request_buffer);\n    os << echo_request << body;\n\n    time_sent_ = steady_timer::clock_type::now();\n    socket_.send_to(request_buffer.data(), destination_);\n\n    num_replies_ = 0;\n    timer_.expires_at(time_sent_ + chrono::seconds(5));\n    timer_.async_wait(std::bind(&pinger::handle_timeout, this));\n  }\n\n  void handle_timeout()\n  {\n    if (num_replies_ == 0)\n      std::cout << \"Request timed out\" << std::endl;\n\n    timer_.expires_at(time_sent_ + chrono::seconds(1));\n    timer_.async_wait(std::bind(&pinger::start_send, this));\n  }\n\n  void start_receive()\n  {\n    reply_buffer_.consume(reply_buffer_.size());\n\n    socket_.async_receive(reply_buffer_.prepare(65536),\n        std::bind(&pinger::handle_receive, this, std::placeholders::_2));\n  }\n\n  void handle_receive(std::size_t length)\n  {\n    reply_buffer_.commit(length);\n\n    std::istream is(&reply_buffer_);\n    ipv4_header ipv4_hdr;\n    icmp_header icmp_hdr;\n    is >> ipv4_hdr >> icmp_hdr;\n\n    if (is && icmp_hdr.type() == icmp_header::echo_reply\n          && icmp_hdr.identifier() == get_identifier()\n          && icmp_hdr.sequence_number() == sequence_number_)\n    {\n      if (num_replies_++ == 0)\n        timer_.cancel();\n\n      chrono::steady_clock::time_point now = chrono::steady_clock::now();\n      chrono::steady_clock::duration elapsed = now - time_sent_;\n      std::cout << length - ipv4_hdr.header_length()\n        << \" bytes from \" << ipv4_hdr.source_address()\n        << \": icmp_seq=\" << icmp_hdr.sequence_number()\n        << \", ttl=\" << ipv4_hdr.time_to_live()\n        << \", time=\"\n        << chrono::duration_cast<chrono::milliseconds>(elapsed).count()\n        << std::endl;\n    }\n\n    start_receive();\n  }\n\n  static unsigned short get_identifier()\n  {\n#if defined(BOOST_ASIO_WINDOWS)\n    return static_cast<unsigned short>(::GetCurrentProcessId());\n#else\n    return static_cast<unsigned short>(::getpid());\n#endif\n  }\n\n  icmp::resolver resolver_;\n  icmp::endpoint destination_;\n  icmp::socket socket_;\n  steady_timer timer_;\n  unsigned short sequence_number_;\n  chrono::steady_clock::time_point time_sent_;\n  boost::asio::streambuf reply_buffer_;\n  std::size_t num_replies_;\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 153,
    "matched_results": [
      "#include <boost/asio.hpp>\n#include <array>\n#include <string>\n\nclass udp_communicator {\npublic:\n    udp_communicator(boost::asio::io_context& io_context, unsigned short port)\n        : io_context_(io_context),\n          socket_(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), port)) {\n        start_receive();\n    }\n\n    void start_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(receive_buffer_), receiver_endpoint_,\n            [this](boost::system::error_code ec, std::size_t bytes_transferred) {\n                handle_receive(ec, bytes_transferred);\n            });\n    }\n\n    void handle_receive(const boost::system::error_code& error, std::size_t bytes_transferred) {\n        if (!error && bytes_transferred > 0) {\n            std::string message(receive_buffer_.data(), bytes_transferred);\n            std::cout << \"Received: \" << message << std::endl;\n            start_receive();\n        }\n    }\n\n    void send_to(const std::string& message, const boost::asio::ip::udp::endpoint& endpoint) {\n        send_buffer_ = message;\n        socket_.async_send_to(\n            boost::asio::buffer(send_buffer_), endpoint,\n            [this](boost::system::error_code ec, std::size_t bytes_transferred) {\n                handle_send(ec, bytes_transferred);\n            });\n    }\n\n    void handle_send(const boost::system::error_code& error, std::size_t bytes_transferred) {\n        if (!error) {\n            std::cout << \"Sent: \" << send_buffer_ << std::endl;\n        }\n    }\n\n    boost::asio::ip::udp::socket& get_socket() {\n        return socket_;\n    }\n\n    boost::asio::io_context& get_io_context() {\n        return io_context_;\n    }\n\nprivate:\n    boost::asio::io_context& io_context_;\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint receiver_endpoint_;\n    boost::asio::ip::udp::endpoint sender_endpoint_;\n    std::array<char, 1024> receive_buffer_;\n    std::string send_buffer_;\n};",
      "#include <boost/asio.hpp>\n#include <array>\n#include <string>\n\nclass udp_communicator {\npublic:\n    udp_communicator(boost::asio::io_context& io_context, unsigned short port)\n        : io_context_(io_context),\n          socket_(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), port)) {\n        start_receive();\n    }\n\n    void start_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(receive_buffer_), receiver_endpoint_,\n            [this](boost::system::error_code ec, std::size_t bytes_transferred) {\n                handle_receive(ec, bytes_transferred);\n            });\n    }\n\n    void handle_receive(const boost::system::error_code& error, std::size_t bytes_transferred) {\n        if (!error && bytes_transferred > 0) {\n            std::string message(receive_buffer_.data(), bytes_transferred);\n            // Process the received message\n            start_receive(); // Continue receiving\n        }\n    }\n\n    void send_to(const std::string& message, const boost::asio::ip::udp::endpoint& endpoint) {\n        send_buffer_ = message;\n        socket_.async_send_to(\n            boost::asio::buffer(send_buffer_), endpoint,\n            [this](boost::system::error_code ec, std::size_t bytes_transferred) {\n                handle_send(ec, bytes_transferred);\n            });\n    }\n\n    void handle_send(const boost::system::error_code& error, std::size_t bytes_transferred) {\n        if (!error) {\n            // Handle successful send\n        }\n    }\n\n    boost::asio::ip::udp::socket& get_socket() {\n        return socket_;\n    }\n\n    boost::asio::io_context& get_io_context() {\n        return io_context_;\n    }\n\nprivate:\n    boost::asio::io_context& io_context_;\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint receiver_endpoint_;\n    boost::asio::ip::udp::endpoint sender_endpoint_;\n    std::array<char, 1024> receive_buffer_;\n    std::string send_buffer_;\n};",
      "#include <boost/asio.hpp>\n#include <array>\n#include <string>\n\nclass udp_communicator {\npublic:\n    udp_communicator(boost::asio::io_context& io_context, unsigned short port)\n        : io_context_(io_context),\n          socket_(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), port)) {\n        start_receive();\n    }\n\n    void start_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(receive_buffer_), receiver_endpoint_,\n            [this](boost::system::error_code ec, std::size_t bytes_transferred) {\n                handle_receive(ec, bytes_transferred);\n            });\n    }\n\n    void handle_receive(const boost::system::error_code& error, std::size_t bytes_transferred) {\n        if (!error && bytes_transferred > 0) {\n            std::string message(receive_buffer_.data(), bytes_transferred);\n            std::cout << \"Received: \" << message << std::endl;\n            start_receive();\n        }\n    }\n\n    void send_to(const std::string& message, const boost::asio::ip::udp::endpoint& endpoint) {\n        send_buffer_ = message;\n        socket_.async_send_to(\n            boost::asio::buffer(send_buffer_), endpoint,\n            [this](boost::system::error_code ec, std::size_t bytes_transferred) {\n                handle_send(ec, bytes_transferred);\n            });\n    }\n\n    void handle_send(const boost::system::error_code& error, std::size_t bytes_transferred) {\n        if (!error) {\n            std::cout << \"Sent \" << bytes_transferred << \" bytes.\" << std::endl;\n        }\n    }\n\n    boost::asio::ip::udp::socket& get_socket() {\n        return socket_;\n    }\n\n    boost::asio::io_context& get_io_context() {\n        return io_context_;\n    }\n\nprivate:\n    boost::asio::io_context& io_context_;\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint receiver_endpoint_;\n    boost::asio::ip::udp::endpoint sender_endpoint_;\n    std::array<char, 1024> receive_buffer_;\n    std::string send_buffer_;\n};",
      "#include <boost/asio.hpp>\n#include <iostream>\n#include <array>\n\nclass udp_communicator {\npublic:\n    udp_communicator(boost::asio::io_context& io_context, unsigned short port)\n        : io_context_(io_context),\n          socket_(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), port)) {\n        start_receive();\n    }\n\n    void start_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(receive_buffer_), receiver_endpoint_,\n            [this](boost::system::error_code error, std::size_t bytes_transferred) {\n                handle_receive(error, bytes_transferred);\n            });\n    }\n\n    void handle_receive(const boost::system::error_code& error, std::size_t bytes_transferred) {\n        if (!error && bytes_transferred > 0) {\n            std::cout << \"Received: \" << std::string(receive_buffer_.data(), bytes_transferred) << std::endl;\n            start_receive();\n        } else {\n            std::cerr << \"Receive failed: \" << error.message() << std::endl;\n        }\n    }\n\n    void send_to(const std::string& message, const boost::asio::ip::udp::endpoint& endpoint) {\n        send_buffer_ = message;\n        socket_.async_send_to(\n            boost::asio::buffer(send_buffer_), endpoint,\n            [this](boost::system::error_code error, std::size_t bytes_transferred) {\n                handle_send(error, bytes_transferred);\n            });\n    }\n\n    void handle_send(const boost::system::error_code& error, std::size_t bytes_transferred) {\n        if (error) {\n            std::cerr << \"Send failed: \" << error.message() << std::endl;\n        } else {\n            std::cout << \"Sent \" << bytes_transferred << \" bytes.\" << std::endl;\n        }\n    }\n\n    boost::asio::ip::udp::socket& get_socket() {\n        return socket_;\n    }\n\n    boost::asio::io_context& get_io_context() {\n        return io_context_;\n    }\n\nprivate:\n    boost::asio::io_context& io_context_;\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint receiver_endpoint_;\n    boost::asio::ip::udp::endpoint sender_endpoint_;\n    std::array<char, 1024> receive_buffer_;\n    std::string send_buffer_;\n};",
      "#include <boost/asio.hpp>\n#include <array>\n#include <string>\n\nclass udp_communicator {\npublic:\n    udp_communicator(boost::asio::io_context& io_context, unsigned short port)\n        : io_context_(io_context),\n          socket_(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), port)) {\n        start_receive();\n    }\n\n    void start_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(receive_buffer_), receiver_endpoint_,\n            [this](boost::system::error_code ec, std::size_t bytes_transferred) {\n                handle_receive(ec, bytes_transferred);\n            });\n    }\n\n    void handle_receive(const boost::system::error_code& error, std::size_t bytes_transferred) {\n        if (!error) {\n            std::string message(receive_buffer_.data(), bytes_transferred);\n            // Process the received message\n            start_receive(); // Continue to receive next datagram\n        }\n    }\n\n    void send_to(const std::string& message, const boost::asio::ip::udp::endpoint& endpoint) {\n        send_buffer_ = message;\n        socket_.async_send_to(\n            boost::asio::buffer(send_buffer_), endpoint,\n            [this](boost::system::error_code ec, std::size_t bytes_transferred) {\n                handle_send(ec, bytes_transferred);\n            });\n    }\n\n    void handle_send(const boost::system::error_code& error, std::size_t bytes_transferred) {\n        if (!error) {\n            // Handle successful send\n        }\n    }\n\n    boost::asio::ip::udp::socket& get_socket() {\n        return socket_;\n    }\n\n    boost::asio::io_context& get_io_context() {\n        return io_context_;\n    }\n\nprivate:\n    boost::asio::io_context& io_context_;\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint receiver_endpoint_;\n    boost::asio::ip::udp::endpoint sender_endpoint_;\n    std::array<char, 1024> receive_buffer_;\n    std::string send_buffer_;\n};",
      "#include <boost/asio.hpp>\n#include <array>\n#include <string>\n\nclass udp_communicator {\npublic:\n    udp_communicator(boost::asio::io_context& io_context, unsigned short port)\n        : io_context_(io_context),\n          socket_(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), port)) {\n        start_receive();\n    }\n\n    void start_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(receive_buffer_), receiver_endpoint_,\n            [this](boost::system::error_code error, std::size_t bytes_transferred) {\n                handle_receive(error, bytes_transferred);\n            });\n    }\n\n    void handle_receive(const boost::system::error_code& error, std::size_t bytes_transferred) {\n        if (!error && bytes_transferred > 0) {\n            std::string message(receive_buffer_.data(), bytes_transferred);\n            std::cout << \"Received: \" << message << std::endl;\n            start_receive();\n        }\n    }\n\n    void send_to(const std::string& message, const boost::asio::ip::udp::endpoint& endpoint) {\n        send_buffer_ = message;\n        socket_.async_send_to(\n            boost::asio::buffer(send_buffer_), endpoint,\n            [this](boost::system::error_code error, std::size_t bytes_transferred) {\n                handle_send(error, bytes_transferred);\n            });\n    }\n\n    void handle_send(const boost::system::error_code& error, std::size_t bytes_transferred) {\n        if (!error) {\n            std::cout << \"Sent \" << bytes_transferred << \" bytes.\" << std::endl;\n        }\n    }\n\n    boost::asio::ip::udp::socket& get_socket() {\n        return socket_;\n    }\n\n    boost::asio::io_context& get_io_context() {\n        return io_context_;\n    }\n\nprivate:\n    boost::asio::io_context& io_context_;\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint receiver_endpoint_;\n    boost::asio::ip::udp::endpoint sender_endpoint_;\n    std::array<char, 1024> receive_buffer_;\n    std::string send_buffer_;\n};",
      "#include <boost/asio.hpp>\n#include <array>\n#include <string>\n#include <iostream>\n\nclass udp_communicator {\npublic:\n    udp_communicator(boost::asio::io_context& io_context, unsigned short port)\n        : io_context_(io_context),\n          socket_(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), port)) {\n        start_receive();\n    }\n\n    void start_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(receive_buffer_), receiver_endpoint_,\n            [this](boost::system::error_code ec, std::size_t bytes_transferred) {\n                handle_receive(ec, bytes_transferred);\n            });\n    }\n\n    void handle_receive(const boost::system::error_code& error, std::size_t bytes_transferred) {\n        if (!error || error == boost::asio::error::message_size) {\n            std::cout << \"Received: \" << std::string(receive_buffer_.data(), bytes_transferred) << std::endl;\n            start_receive();\n        }\n    }\n\n    void send_to(const std::string& message, const boost::asio::ip::udp::endpoint& endpoint) {\n        send_buffer_ = message;\n        socket_.async_send_to(\n            boost::asio::buffer(send_buffer_), endpoint,\n            [this](boost::system::error_code ec, std::size_t bytes_transferred) {\n                handle_send(ec, bytes_transferred);\n            });\n    }\n\n    void handle_send(const boost::system::error_code& error, std::size_t bytes_transferred) {\n        if (!error) {\n            std::cout << \"Sent \" << bytes_transferred << \" bytes.\" << std::endl;\n        }\n    }\n\n    boost::asio::ip::udp::socket& get_socket() {\n        return socket_;\n    }\n\n    boost::asio::io_context& get_io_context() {\n        return io_context_;\n    }\n\nprivate:\n    boost::asio::io_context& io_context_;\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint receiver_endpoint_;\n    boost::asio::ip::udp::endpoint sender_endpoint_;\n    std::array<char, 1024> receive_buffer_;\n    std::string send_buffer_;\n};\n\nint main() {\n    try {\n        boost::asio::io_context io_context;\n        udp_communicator server(io_context, 12345);\n\n        boost::asio::ip::udp::endpoint remote_endpoint(\n            boost::asio::ip::address::from_string(\"127.0.0.1\"), 12345);\n        udp_communicator client(io_context, 0);\n        client.send_to(\"Hello, World!\", remote_endpoint);\n\n        io_context.run();\n    } catch (std::exception& e) {\n        std::cerr << \"Exception: \" << e.what() << std::endl;\n    }\n\n    return 0;\n}",
      "#include <boost/asio.hpp>\n#include <array>\n#include <string>\n\nclass udp_communicator {\npublic:\n    udp_communicator(boost::asio::io_context& io_context, unsigned short port)\n        : io_context_(io_context),\n          socket_(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), port)) {\n        start_receive();\n    }\n\n    void start_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(receive_buffer_), receiver_endpoint_,\n            [this](boost::system::error_code ec, std::size_t bytes_transferred) {\n                handle_receive(ec, bytes_transferred);\n            });\n    }\n\n    void handle_receive(const boost::system::error_code& error, std::size_t bytes_transferred) {\n        if (!error && bytes_transferred > 0) {\n            std::string message(receive_buffer_.data(), bytes_transferred);\n            std::cout << \"Received: \" << message << std::endl;\n            start_receive();\n        }\n    }\n\n    void send_to(const std::string& message, const boost::asio::ip::udp::endpoint& endpoint) {\n        send_buffer_ = message;\n        socket_.async_send_to(\n            boost::asio::buffer(send_buffer_), endpoint,\n            [this](boost::system::error_code ec, std::size_t bytes_transferred) {\n                handle_send(ec, bytes_transferred);\n            });\n    }\n\n    void handle_send(const boost::system::error_code& error, std::size_t bytes_transferred) {\n        if (!error) {\n            std::cout << \"Sent: \" << send_buffer_ << std::endl;\n        }\n    }\n\n    boost::asio::ip::udp::socket& get_socket() {\n        return socket_;\n    }\n\n    boost::asio::io_context& get_io_context() {\n        return io_context_;\n    }\n\nprivate:\n    boost::asio::io_context& io_context_;\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint receiver_endpoint_;\n    boost::asio::ip::udp::endpoint sender_endpoint_;\n    std::array<char, 1024> receive_buffer_;\n    std::string send_buffer_;\n};",
      "#include <boost/asio.hpp>\n#include <array>\n#include <string>\n\nclass udp_communicator {\npublic:\n    udp_communicator(boost::asio::io_context& io_context, unsigned short port)\n        : io_context_(io_context),\n          socket_(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), port)) {\n        start_receive();\n    }\n\n    void start_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(receive_buffer_), receiver_endpoint_,\n            [this](boost::system::error_code ec, std::size_t bytes_transferred) {\n                handle_receive(ec, bytes_transferred);\n            });\n    }\n\n    void handle_receive(const boost::system::error_code& error, std::size_t bytes_transferred) {\n        if (!error || error == boost::asio::error::message_size) {\n            std::string message(receive_buffer_.data(), bytes_transferred);\n            // Process received message here\n\n            start_receive(); // Continue to listen for incoming messages\n        }\n    }\n\n    void send_to(const std::string& message, const boost::asio::ip::udp::endpoint& endpoint) {\n        send_buffer_ = message;\n        socket_.async_send_to(\n            boost::asio::buffer(send_buffer_), endpoint,\n            [this](boost::system::error_code ec, std::size_t bytes_transferred) {\n                handle_send(ec, bytes_transferred);\n            });\n    }\n\n    void handle_send(const boost::system::error_code& error, std::size_t bytes_transferred) {\n        if (!error) {\n            // Handle successful send here\n        }\n    }\n\n    boost::asio::ip::udp::socket& get_socket() {\n        return socket_;\n    }\n\n    boost::asio::io_context& get_io_context() {\n        return io_context_;\n    }\n\nprivate:\n    boost::asio::io_context& io_context_;\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint receiver_endpoint_;\n    boost::asio::ip::udp::endpoint sender_endpoint_;\n    std::array<char, 1024> receive_buffer_;\n    std::string send_buffer_;\n};",
      "#include <boost/asio.hpp>\n#include <array>\n#include <string>\n\nclass udp_communicator {\npublic:\n    udp_communicator(boost::asio::io_context& io_context, unsigned short port)\n        : io_context_(io_context),\n          socket_(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), port)) {\n        start_receive();\n    }\n\n    void start_receive() {\n        socket_.async_receive_from(\n            boost::asio::buffer(receive_buffer_), receiver_endpoint_,\n            [this](boost::system::error_code ec, std::size_t bytes_transferred) {\n                handle_receive(ec, bytes_transferred);\n            });\n    }\n\n    void handle_receive(const boost::system::error_code& error, std::size_t bytes_transferred) {\n        if (!error && bytes_transferred > 0) {\n            std::string message(receive_buffer_.data(), bytes_transferred);\n            // Process the received message\n            start_receive(); // Continue receiving\n        }\n    }\n\n    void send_to(const std::string& message, const boost::asio::ip::udp::endpoint& endpoint) {\n        send_buffer_ = message;\n        socket_.async_send_to(\n            boost::asio::buffer(send_buffer_), endpoint,\n            [this](boost::system::error_code ec, std::size_t bytes_transferred) {\n                handle_send(ec, bytes_transferred);\n            });\n    }\n\n    void handle_send(const boost::system::error_code& error, std::size_t bytes_transferred) {\n        if (!error) {\n            // Handle successful send\n        }\n    }\n\n    boost::asio::ip::udp::socket& get_socket() {\n        return socket_;\n    }\n\n    boost::asio::io_context& get_io_context() {\n        return io_context_;\n    }\n\nprivate:\n    boost::asio::io_context& io_context_;\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint receiver_endpoint_;\n    boost::asio::ip::udp::endpoint sender_endpoint_;\n    std::array<char, 1024> receive_buffer_;\n    std::string send_buffer_;\n};"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 39,
    "Instruction": "Task Description: Implement a server class that handles both TCP and UDP communications using Boost.Asio, managing client subscriptions and broadcasting data frames to subscribed clients.\n\nClass Description: The `server` class manages network communications using both TCP and UDP protocols. It accepts TCP connections for control messages, maintains a set of subscribed UDP endpoints, and periodically broadcasts data frames to all subscribed clients via UDP.\n\nAttributes:\n- acceptor_: [tcp::acceptor] - Handles incoming TCP connections\n- timer_: [boost::asio::steady_timer] - Manages periodic operations\n- udp_socket_: [udp::socket] - Handles UDP communications\n- next_frame_number_: [unsigned long] - Tracks the sequence number for frames\n- subscribers_: [std::set<udp::endpoint>] - Stores subscribed client endpoints\n\nMethods:\n- server([boost::asio::io_context&] io_context, [unsigned short] port) -> [void] - Constructor that initializes the server with IO context and port\n- handle_accept([const boost::system::error_code&] ec, [tcp_socket_ptr] socket) -> [void] - Handles new TCP connection acceptances\n- handle_control_request([const boost::system::error_code&] ec, [tcp_socket_ptr] socket, [control_request_ptr] request) -> [void] - Processes control requests from clients\n- handle_control_request_timer([tcp_socket_ptr] socket, [control_request_ptr] request, [timer_ptr] delay_timer) -> [void] - Handles delayed processing of control requests\n- handle_timer() -> [void] - Periodically broadcasts data frames to subscribed clients",
    "Canonical_solution": "#include <boost/asio.hpp>\n#include <set>\n#include <memory>\n#include \"protocol.hpp\"\n\nusing boost::asio::ip::tcp;\nusing boost::asio::ip::udp;\n\ntypedef std::shared_ptr<tcp::socket> tcp_socket_ptr;\ntypedef std::shared_ptr<boost::asio::steady_timer> timer_ptr;\ntypedef std::shared_ptr<control_request> control_request_ptr;\n\nclass server\n{\npublic:\n  server(boost::asio::io_context& io_context, unsigned short port)\n    : acceptor_(io_context, tcp::endpoint(tcp::v4(), port)),\n      timer_(io_context),\n      udp_socket_(io_context, udp::endpoint(udp::v4(), 0)),\n      next_frame_number_(1)\n  {\n    tcp_socket_ptr new_socket(new tcp::socket(acceptor_.get_executor()));\n    acceptor_.async_accept(*new_socket,\n        std::bind(&server::handle_accept, this,\n          boost::asio::placeholders::error, new_socket));\n\n    timer_.expires_after(boost::asio::chrono::milliseconds(100));\n    timer_.async_wait(std::bind(&server::handle_timer, this));\n  }\n\n  void handle_accept(const boost::system::error_code& ec, tcp_socket_ptr socket)\n  {\n    if (!ec)\n    {\n      control_request_ptr request(new control_request);\n      boost::asio::async_read(*socket, request->to_buffers(),\n          std::bind(&server::handle_control_request, this,\n            boost::asio::placeholders::error, socket, request));\n    }\n\n    tcp_socket_ptr new_socket(new tcp::socket(acceptor_.get_executor()));\n    acceptor_.async_accept(*new_socket,\n        std::bind(&server::handle_accept, this,\n          boost::asio::placeholders::error, new_socket));\n  }\n\n  void handle_control_request(const boost::system::error_code& ec,\n      tcp_socket_ptr socket, control_request_ptr request)\n  {\n    if (!ec)\n    {\n      timer_ptr delay_timer(\n          new boost::asio::steady_timer(acceptor_.get_executor()));\n      delay_timer->expires_after(boost::asio::chrono::seconds(2));\n      delay_timer->async_wait(\n          std::bind(&server::handle_control_request_timer, this,\n            socket, request, delay_timer));\n    }\n  }\n\n  void handle_control_request_timer(tcp_socket_ptr socket,\n      control_request_ptr request, timer_ptr /*delay_timer*/)\n  {\n    boost::system::error_code ec;\n    tcp::endpoint remote_endpoint = socket->remote_endpoint(ec);\n    if (!ec)\n    {\n      if (unsigned short old_port = request->old_port())\n      {\n        udp::endpoint old_endpoint(remote_endpoint.address(), old_port);\n        subscribers_.erase(old_endpoint);\n      }\n\n      if (unsigned short new_port = request->new_port())\n      {\n        udp::endpoint new_endpoint(remote_endpoint.address(), new_port);\n        subscribers_.insert(new_endpoint);\n      }\n    }\n\n    boost::asio::async_read(*socket, request->to_buffers(),\n        std::bind(&server::handle_control_request, this,\n          boost::asio::placeholders::error, socket, request));\n  }\n\n  void handle_timer()\n  {\n    double x = next_frame_number_ * 0.2;\n    double y = std::sin(x);\n    int char_index = static_cast<int>((y + 1.0) * (frame::payload_size / 2));\n    std::string payload;\n    for (int i = 0; i < frame::payload_size; ++i)\n      payload += (i == char_index ? '*' : '.');\n\n    frame f(next_frame_number_++, payload);\n\n    std::set<udp::endpoint>::iterator j;\n    for (j = subscribers_.begin(); j != subscribers_.end(); ++j)\n    {\n      boost::system::error_code ec;\n      udp_socket_.send_to(f.to_buffers(), *j, 0, ec);\n    }\n\n    timer_.expires_after(boost::asio::chrono::milliseconds(100));\n    timer_.async_wait(std::bind(&server::handle_timer, this));\n  }\n\nprivate:\n  tcp::acceptor acceptor_;\n  boost::asio::steady_timer timer_;\n  udp::socket udp_socket_;\n  unsigned long next_frame_number_;\n  std::set<udp::endpoint> subscribers_;\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 153,
    "matched_results": [
      "#include <boost/asio.hpp>\n#include <set>\n#include <memory>\n\nusing boost::asio::ip::tcp;\nusing boost::asio::ip::udp;\n\nclass server {\npublic:\n    server(boost::asio::io_context& io_context, unsigned short port)\n        : acceptor_(io_context, tcp::endpoint(tcp::v4(), port)),\n          timer_(io_context),\n          udp_socket_(io_context, udp::endpoint(udp::v4(), port)),\n          next_frame_number_(0) {\n        start_accept();\n        start_timer();\n    }\n\nprivate:\n    void start_accept() {\n        auto socket = std::make_shared<tcp::socket>(acceptor_.get_executor().context());\n        acceptor_.async_accept(*socket, [this, socket](const boost::system::error_code& ec) {\n            handle_accept(ec, socket);\n        });\n    }\n\n    void handle_accept(const boost::system::error_code& ec, std::shared_ptr<tcp::socket> socket) {\n        if (!ec) {\n            auto request = std::make_shared<std::vector<char>>(1024);\n            socket->async_read_some(boost::asio::buffer(*request), [this, socket, request](const boost::system::error_code& ec, std::size_t length) {\n                handle_control_request(ec, socket, request);\n            });\n        }\n        start_accept();\n    }\n\n    void handle_control_request(const boost::system::error_code& ec, std::shared_ptr<tcp::socket> socket, std::shared_ptr<std::vector<char>> request) {\n        if (!ec) {\n            // Process control request (e.g., subscribe/unsubscribe)\n            // For simplicity, assume request contains the UDP endpoint to subscribe\n            udp::endpoint client_endpoint;\n            std::memcpy(&client_endpoint, request->data(), sizeof(client_endpoint));\n            subscribers_.insert(client_endpoint);\n\n            // Optionally, handle delayed processing\n            auto delay_timer = std::make_shared<boost::asio::steady_timer>(socket->get_executor().context(), std::chrono::seconds(1));\n            delay_timer->async_wait([this, socket, request, delay_timer](const boost::system::error_code& ec) {\n                handle_control_request_timer(socket, request, delay_timer);\n            });\n        }\n    }\n\n    void handle_control_request_timer(std::shared_ptr<tcp::socket> socket, std::shared_ptr<std::vector<char>> request, std::shared_ptr<boost::asio::steady_timer> delay_timer) {\n        // Handle delayed processing of control request if needed\n    }\n\n    void start_timer() {\n        timer_.expires_after(std::chrono::seconds(1));\n        timer_.async_wait([this](const boost::system::error_code& ec) {\n            handle_timer();\n        });\n    }\n\n    void handle_timer() {\n        if (!subscribers_.empty()) {\n            std::vector<char> frame(1024);\n            std::memcpy(frame.data(), &next_frame_number_, sizeof(next_frame_number_));\n            ++next_frame_number_;\n\n            for (const auto& endpoint : subscribers_) {\n                udp_socket_.async_send_to(boost::asio::buffer(frame), endpoint, [](const boost::system::error_code& ec, std::size_t) {});\n            }\n        }\n        start_timer();\n    }\n\n    tcp::acceptor acceptor_;\n    boost::asio::steady_timer timer_;\n    udp::socket udp_socket_;\n    unsigned long next_frame_number_;\n    std::set<udp::endpoint> subscribers_;\n};",
      "#include <boost/asio.hpp>\n#include <set>\n#include <memory>\n\nusing boost::asio::ip::tcp;\nusing boost::asio::ip::udp;\n\nclass server {\npublic:\n    server(boost::asio::io_context& io_context, unsigned short port)\n        : acceptor_(io_context, tcp::endpoint(tcp::v4(), port)),\n          timer_(io_context),\n          udp_socket_(io_context, udp::endpoint(udp::v4(), port)),\n          next_frame_number_(0) {\n        start_accept();\n        start_timer();\n    }\n\nprivate:\n    void start_accept() {\n        auto socket = std::make_shared<tcp::socket>(acceptor_.get_executor().context());\n        acceptor_.async_accept(*socket, [this, socket](const boost::system::error_code& ec) {\n            handle_accept(ec, socket);\n        });\n    }\n\n    void handle_accept(const boost::system::error_code& ec, std::shared_ptr<tcp::socket> socket) {\n        if (!ec) {\n            auto request = std::make_shared<std::vector<char>>(1024);\n            socket->async_read_some(boost::asio::buffer(*request), [this, socket, request](const boost::system::error_code& ec, std::size_t length) {\n                handle_control_request(ec, socket, request);\n            });\n        }\n        start_accept();\n    }\n\n    void handle_control_request(const boost::system::error_code& ec, std::shared_ptr<tcp::socket> socket, std::shared_ptr<std::vector<char>> request) {\n        if (!ec) {\n            // Process control request and update subscribers_\n            // For example, add a new subscriber\n            udp::endpoint new_subscriber;\n            subscribers_.insert(new_subscriber);\n\n            // Optionally handle delayed processing\n            auto delay_timer = std::make_shared<boost::asio::steady_timer>(socket->get_executor().context());\n            delay_timer->expires_after(std::chrono::seconds(1));\n            delay_timer->async_wait([this, socket, request, delay_timer](const boost::system::error_code& ec) {\n                handle_control_request_timer(socket, request, delay_timer);\n            });\n        }\n    }\n\n    void handle_control_request_timer(std::shared_ptr<tcp::socket> socket, std::shared_ptr<std::vector<char>> request, std::shared_ptr<boost::asio::steady_timer> delay_timer) {\n        // Further processing of control request after delay\n    }\n\n    void start_timer() {\n        timer_.expires_after(std::chrono::seconds(1));\n        timer_.async_wait([this](const boost::system::error_code& ec) {\n            handle_timer();\n        });\n    }\n\n    void handle_timer() {\n        if (!subscribers_.empty()) {\n            std::vector<char> frame(1024); // Example frame data\n            for (const auto& subscriber : subscribers_) {\n                udp_socket_.async_send_to(boost::asio::buffer(frame), subscriber, [](const boost::system::error_code& ec, std::size_t bytes_sent) {});\n            }\n        }\n        start_timer();\n    }\n\n    tcp::acceptor acceptor_;\n    boost::asio::steady_timer timer_;\n    udp::socket udp_socket_;\n    unsigned long next_frame_number_;\n    std::set<udp::endpoint> subscribers_;\n};",
      "#include <boost/asio.hpp>\n#include <set>\n#include <memory>\n\nusing boost::asio::ip::tcp;\nusing boost::asio::ip::udp;\n\nclass server {\npublic:\n    server(boost::asio::io_context& io_context, unsigned short port)\n        : acceptor_(io_context, tcp::endpoint(tcp::v4(), port)),\n          timer_(io_context),\n          udp_socket_(io_context, udp::endpoint(udp::v4(), port)),\n          next_frame_number_(0) {\n        start_accept();\n        start_timer();\n    }\n\nprivate:\n    void start_accept() {\n        auto socket = std::make_shared<tcp::socket>(acceptor_.get_executor().context());\n        acceptor_.async_accept(*socket, [this, socket](const boost::system::error_code& ec) {\n            handle_accept(ec, socket);\n        });\n    }\n\n    void handle_accept(const boost::system::error_code& ec, std::shared_ptr<tcp::socket> socket) {\n        if (!ec) {\n            auto request = std::make_shared<std::vector<char>>(1024);\n            socket->async_read_some(boost::asio::buffer(*request), [this, socket, request](const boost::system::error_code& ec, std::size_t length) {\n                handle_control_request(ec, socket, request);\n            });\n        }\n        start_accept();\n    }\n\n    void handle_control_request(const boost::system::error_code& ec, std::shared_ptr<tcp::socket> socket, std::shared_ptr<std::vector<char>> request) {\n        if (!ec) {\n            // Process control request (e.g., subscribe/unsubscribe)\n            // For simplicity, assume request contains an endpoint to subscribe\n            udp::endpoint client_endpoint;\n            // Deserialize client_endpoint from request\n            subscribers_.insert(client_endpoint);\n\n            auto delay_timer = std::make_shared<boost::asio::steady_timer>(socket->get_executor().context(), std::chrono::seconds(1));\n            delay_timer->async_wait([this, socket, request, delay_timer](const boost::system::error_code& ec) {\n                handle_control_request_timer(socket, request, delay_timer);\n            });\n        }\n    }\n\n    void handle_control_request_timer(std::shared_ptr<tcp::socket> socket, std::shared_ptr<std::vector<char>> request, std::shared_ptr<boost::asio::steady_timer> delay_timer) {\n        // Handle delayed processing of control request\n        // For simplicity, assume request contains an endpoint to unsubscribe\n        udp::endpoint client_endpoint;\n        // Deserialize client_endpoint from request\n        subscribers_.erase(client_endpoint);\n    }\n\n    void start_timer() {\n        timer_.expires_after(std::chrono::seconds(1));\n        timer_.async_wait([this](const boost::system::error_code& ec) {\n            handle_timer();\n        });\n    }\n\n    void handle_timer() {\n        if (!subscribers_.empty()) {\n            std::vector<char> frame(1024);\n            // Fill frame with data\n            for (const auto& endpoint : subscribers_) {\n                udp_socket_.async_send_to(boost::asio::buffer(frame), endpoint, [](const boost::system::error_code& ec, std::size_t length) {});\n            }\n        }\n        start_timer();\n    }\n\n    tcp::acceptor acceptor_;\n    boost::asio::steady_timer timer_;\n    udp::socket udp_socket_;\n    unsigned long next_frame_number_;\n    std::set<udp::endpoint> subscribers_;\n};",
      "#include <boost/asio.hpp>\n#include <set>\n\nusing boost::asio::ip::tcp;\nusing boost::asio::ip::udp;\n\nclass server {\npublic:\n    server(boost::asio::io_context& io_context, unsigned short port)\n        : acceptor_(io_context, tcp::endpoint(tcp::v4(), port)),\n          timer_(io_context),\n          udp_socket_(io_context, udp::endpoint(udp::v4(), port)),\n          next_frame_number_(0) {\n        start_accept();\n        start_timer();\n    }\n\nprivate:\n    void start_accept() {\n        auto socket = std::make_shared<tcp::socket>(acceptor_.get_executor().context());\n        acceptor_.async_accept(*socket, [this, socket](const boost::system::error_code& ec) {\n            handle_accept(ec, socket);\n        });\n    }\n\n    void handle_accept(const boost::system::error_code& ec, std::shared_ptr<tcp::socket> socket) {\n        if (!ec) {\n            auto request = std::make_shared<std::vector<char>>(1024);\n            socket->async_read_some(boost::asio::buffer(*request), [this, socket, request](const boost::system::error_code& ec, std::size_t) {\n                handle_control_request(ec, socket, request);\n            });\n        }\n        start_accept();\n    }\n\n    void handle_control_request(const boost::system::error_code& ec, std::shared_ptr<tcp::socket> socket, std::shared_ptr<std::vector<char>> request) {\n        if (!ec) {\n            // Process the control request (e.g., subscribe/unsubscribe)\n            // For simplicity, assume request contains the endpoint to subscribe\n            udp::endpoint client_endpoint;\n            std::memcpy(&client_endpoint, request->data(), sizeof(client_endpoint));\n            subscribers_.insert(client_endpoint);\n\n            // Optionally handle delayed processing\n            auto delay_timer = std::make_shared<boost::asio::steady_timer>(socket->get_executor().context(), std::chrono::seconds(1));\n            delay_timer->async_wait([this, socket, request, delay_timer](const boost::system::error_code& ec) {\n                handle_control_request_timer(socket, request, delay_timer);\n            });\n        }\n    }\n\n    void handle_control_request_timer(std::shared_ptr<tcp::socket> socket, std::shared_ptr<std::vector<char>> request, std::shared_ptr<boost::asio::steady_timer> delay_timer) {\n        // Further processing if needed\n    }\n\n    void start_timer() {\n        timer_.expires_after(std::chrono::seconds(1));\n        timer_.async_wait([this](const boost::system::error_code& ec) {\n            handle_timer();\n        });\n    }\n\n    void handle_timer() {\n        if (!subscribers_.empty()) {\n            std::vector<char> frame(1024);\n            // Fill frame with data\n            std::memcpy(frame.data(), &next_frame_number_, sizeof(next_frame_number_));\n            ++next_frame_number_;\n\n            for (const auto& endpoint : subscribers_) {\n                udp_socket_.async_send_to(boost::asio::buffer(frame), endpoint, [](const boost::system::error_code&, std::size_t) {});\n            }\n        }\n        start_timer();\n    }\n\n    tcp::acceptor acceptor_;\n    boost::asio::steady_timer timer_;\n    udp::socket udp_socket_;\n    unsigned long next_frame_number_;\n    std::set<udp::endpoint> subscribers_;\n};",
      "#include <boost/asio.hpp>\n#include <set>\n#include <memory>\n\nusing boost::asio::ip::tcp;\nusing boost::asio::ip::udp;\n\nclass server {\npublic:\n    server(boost::asio::io_context& io_context, unsigned short port)\n        : acceptor_(io_context, tcp::endpoint(tcp::v4(), port)),\n          timer_(io_context, boost::asio::chrono::seconds(1)),\n          udp_socket_(io_context, udp::endpoint(udp::v4(), port)),\n          next_frame_number_(0) {\n        start_accept();\n        start_timer();\n    }\n\nprivate:\n    void start_accept() {\n        auto socket = std::make_shared<tcp::socket>(acceptor_.get_executor().context());\n        acceptor_.async_accept(*socket, [this, socket](const boost::system::error_code& ec) {\n            handle_accept(ec, socket);\n        });\n    }\n\n    void handle_accept(const boost::system::error_code& ec, std::shared_ptr<tcp::socket> socket) {\n        if (!ec) {\n            auto request = std::make_shared<std::vector<char>>(1024);\n            socket->async_read_some(boost::asio::buffer(*request), [this, socket, request](const boost::system::error_code& ec, std::size_t length) {\n                handle_control_request(ec, socket, request);\n            });\n        }\n        start_accept();\n    }\n\n    void handle_control_request(const boost::system::error_code& ec, std::shared_ptr<tcp::socket> socket, std::shared_ptr<std::vector<char>> request) {\n        if (!ec) {\n            // Process control request (e.g., subscribe/unsubscribe)\n            // For simplicity, assume request contains the UDP endpoint to subscribe\n            udp::endpoint client_endpoint;\n            std::memcpy(&client_endpoint, request->data(), sizeof(udp::endpoint));\n            subscribers_.insert(client_endpoint);\n        }\n    }\n\n    void start_timer() {\n        timer_.async_wait([this](const boost::system::error_code& ec) {\n            if (!ec) {\n                handle_timer();\n            }\n        });\n    }\n\n    void handle_timer() {\n        std::vector<char> frame(1024);\n        // Fill frame with data and sequence number\n        std::memcpy(frame.data(), &next_frame_number_, sizeof(next_frame_number_));\n        ++next_frame_number_;\n\n        for (const auto& endpoint : subscribers_) {\n            udp_socket_.async_send_to(boost::asio::buffer(frame), endpoint, [](const boost::system::error_code&, std::size_t) {});\n        }\n\n        timer_.expires_after(boost::asio::chrono::seconds(1));\n        start_timer();\n    }\n\n    tcp::acceptor acceptor_;\n    boost::asio::steady_timer timer_;\n    udp::socket udp_socket_;\n    unsigned long next_frame_number_;\n    std::set<udp::endpoint> subscribers_;\n};",
      "#include <boost/asio.hpp>\n#include <set>\n#include <memory>\n\nusing boost::asio::ip::tcp;\nusing boost::asio::ip::udp;\n\nclass server {\npublic:\n    server(boost::asio::io_context& io_context, unsigned short port)\n        : acceptor_(io_context, tcp::endpoint(tcp::v4(), port)),\n          timer_(io_context),\n          udp_socket_(io_context, udp::endpoint(udp::v4(), port)),\n          next_frame_number_(0) {\n        start_accept();\n        start_timer();\n    }\n\nprivate:\n    void start_accept() {\n        auto socket = std::make_shared<tcp::socket>(acceptor_.get_executor().context());\n        acceptor_.async_accept(*socket, [this, socket](const boost::system::error_code& ec) {\n            handle_accept(ec, socket);\n        });\n    }\n\n    void handle_accept(const boost::system::error_code& ec, std::shared_ptr<tcp::socket> socket) {\n        if (!ec) {\n            auto request = std::make_shared<std::vector<char>>(1024);\n            socket->async_read_some(boost::asio::buffer(*request), [this, socket, request](const boost::system::error_code& ec, std::size_t length) {\n                handle_control_request(ec, socket, request);\n            });\n        }\n        start_accept();\n    }\n\n    void handle_control_request(const boost::system::error_code& ec, std::shared_ptr<tcp::socket> socket, std::shared_ptr<std::vector<char>> request) {\n        if (!ec) {\n            // Process control request (e.g., subscribe/unsubscribe)\n            // For simplicity, assume request contains a UDP endpoint to subscribe\n            udp::endpoint client_endpoint;\n            std::memcpy(&client_endpoint, request->data(), sizeof(client_endpoint));\n            subscribers_.insert(client_endpoint);\n        }\n    }\n\n    void start_timer() {\n        timer_.expires_after(std::chrono::seconds(1));\n        timer_.async_wait([this](const boost::system::error_code& ec) {\n            handle_timer();\n        });\n    }\n\n    void handle_timer() {\n        if (!subscribers_.empty()) {\n            std::string frame = \"Frame \" + std::to_string(next_frame_number_++);\n            for (const auto& endpoint : subscribers_) {\n                udp_socket_.send_to(boost::asio::buffer(frame), endpoint);\n            }\n        }\n        start_timer();\n    }\n\n    tcp::acceptor acceptor_;\n    boost::asio::steady_timer timer_;\n    udp::socket udp_socket_;\n    unsigned long next_frame_number_;\n    std::set<udp::endpoint> subscribers_;\n};",
      "#include <boost/asio.hpp>\n#include <set>\n\nusing boost::asio::ip::tcp;\nusing boost::asio::ip::udp;\n\nclass server {\npublic:\n    server(boost::asio::io_context& io_context, unsigned short port)\n        : acceptor_(io_context, tcp::endpoint(tcp::v4(), port)),\n          timer_(io_context),\n          udp_socket_(io_context, udp::endpoint(udp::v4(), port)),\n          next_frame_number_(0) {\n        start_accept();\n        start_timer();\n    }\n\nprivate:\n    void start_accept() {\n        auto socket = std::make_shared<tcp::socket>(acceptor_.get_executor().context());\n        acceptor_.async_accept(*socket, [this, socket](const boost::system::error_code& ec) {\n            handle_accept(ec, socket);\n        });\n    }\n\n    void handle_accept(const boost::system::error_code& ec, std::shared_ptr<tcp::socket> socket) {\n        if (!ec) {\n            auto request = std::make_shared<std::vector<char>>(1024);\n            socket->async_read_some(boost::asio::buffer(*request), [this, socket, request](const boost::system::error_code& ec, std::size_t length) {\n                handle_control_request(ec, socket, request);\n            });\n        }\n        start_accept();\n    }\n\n    void handle_control_request(const boost::system::error_code& ec, std::shared_ptr<tcp::socket> socket, std::shared_ptr<std::vector<char>> request) {\n        if (!ec) {\n            // Process control request and update subscribers_\n            // For example, add the client's UDP endpoint to subscribers_\n            udp::endpoint client_endpoint;\n            subscribers_.insert(client_endpoint);\n\n            // Optionally handle delayed processing\n            auto delay_timer = std::make_shared<boost::asio::steady_timer>(socket->get_executor().context());\n            delay_timer->expires_after(std::chrono::seconds(1));\n            delay_timer->async_wait([this, socket, request, delay_timer](const boost::system::error_code& ec) {\n                handle_control_request_timer(socket, request, delay_timer);\n            });\n        }\n    }\n\n    void handle_control_request_timer(std::shared_ptr<tcp::socket> socket, std::shared_ptr<std::vector<char>> request, std::shared_ptr<boost::asio::steady_timer> delay_timer) {\n        // Handle delayed processing of control request\n    }\n\n    void start_timer() {\n        timer_.expires_after(std::chrono::seconds(1));\n        timer_.async_wait([this](const boost::system::error_code& ec) {\n            handle_timer();\n        });\n    }\n\n    void handle_timer() {\n        if (!subscribers_.empty()) {\n            std::vector<char> frame(1024); // Example frame data\n            for (const auto& endpoint : subscribers_) {\n                udp_socket_.async_send_to(boost::asio::buffer(frame), endpoint, [](const boost::system::error_code& /*ec*/, std::size_t /*bytes_sent*/) {});\n            }\n        }\n        start_timer();\n    }\n\n    tcp::acceptor acceptor_;\n    boost::asio::steady_timer timer_;\n    udp::socket udp_socket_;\n    unsigned long next_frame_number_;\n    std::set<udp::endpoint> subscribers_;\n};",
      "#include <boost/asio.hpp>\n#include <boost/asio/steady_timer.hpp>\n#include <boost/system/error_code.hpp>\n#include <set>\n#include <memory>\n#include <vector>\n\nusing boost::asio::ip::tcp;\nusing boost::asio::ip::udp;\n\nclass server {\npublic:\n    server(boost::asio::io_context& io_context, unsigned short port)\n        : acceptor_(io_context, tcp::endpoint(tcp::v4(), port)),\n          udp_socket_(io_context, udp::endpoint(udp::v4(), port)),\n          timer_(io_context),\n          next_frame_number_(0) {\n        start_accept();\n        start_timer();\n    }\n\nprivate:\n    void start_accept() {\n        auto socket = std::make_shared<tcp::socket>(acceptor_.get_executor().context());\n        acceptor_.async_accept(*socket, [this, socket](const boost::system::error_code& ec) {\n            handle_accept(ec, socket);\n        });\n    }\n\n    void handle_accept(const boost::system::error_code& ec, std::shared_ptr<tcp::socket> socket) {\n        if (!ec) {\n            auto request = std::make_shared<std::vector<char>>(1024);\n            socket->async_read_some(boost::asio::buffer(*request), \n                [this, socket, request](const boost::system::error_code& ec, std::size_t) {\n                    handle_control_request(ec, socket, request);\n                });\n        }\n        start_accept();\n    }\n\n    void handle_control_request(const boost::system::error_code& ec, std::shared_ptr<tcp::socket> socket, std::shared_ptr<std::vector<char>> request) {\n        if (!ec) {\n            // Parse the control request (e.g., subscribe/unsubscribe)\n            udp::endpoint client_endpoint;\n            // Assume request contains client endpoint data for simplicity\n            subscribers_.insert(client_endpoint);\n        }\n    }\n\n    void start_timer() {\n        timer_.expires_after(std::chrono::seconds(1));\n        timer_.async_wait([this](const boost::system::error_code& ec) {\n            if (!ec) handle_timer();\n        });\n    }\n\n    void handle_timer() {\n        std::vector<char> frame(1024); // Example frame data\n        for (const auto& endpoint : subscribers_) {\n            udp_socket_.async_send_to(boost::asio::buffer(frame), endpoint, [](const boost::system::error_code&, std::size_t) {});\n        }\n        ++next_frame_number_;\n        start_timer();\n    }\n\n    tcp::acceptor acceptor_;\n    udp::socket udp_socket_;\n    boost::asio::steady_timer timer_;\n    unsigned long next_frame_number_;\n    std::set<udp::endpoint> subscribers_;\n};",
      "#include <boost/asio.hpp>\n#include <set>\n\nusing boost::asio::ip::tcp;\nusing boost::asio::ip::udp;\n\nclass server {\npublic:\n    server(boost::asio::io_context& io_context, unsigned short port)\n        : acceptor_(io_context, tcp::endpoint(tcp::v4(), port)),\n          timer_(io_context),\n          udp_socket_(io_context, udp::endpoint(udp::v4(), port)),\n          next_frame_number_(0) {\n        start_accept();\n        start_timer();\n    }\n\nprivate:\n    void start_accept() {\n        auto socket = std::make_shared<tcp::socket>(acceptor_.get_executor().context());\n        acceptor_.async_accept(*socket, [this, socket](const boost::system::error_code& ec) {\n            handle_accept(ec, socket);\n        });\n    }\n\n    void handle_accept(const boost::system::error_code& ec, std::shared_ptr<tcp::socket> socket) {\n        if (!ec) {\n            auto request = std::make_shared<std::string>();\n            boost::asio::async_read_until(*socket, boost::asio::dynamic_buffer(*request), '\\n',\n                [this, socket, request](const boost::system::error_code& ec, std::size_t) {\n                    handle_control_request(ec, socket, request);\n                });\n        }\n        start_accept();\n    }\n\n    void handle_control_request(const boost::system::error_code& ec, std::shared_ptr<tcp::socket> socket, std::shared_ptr<std::string> request) {\n        if (!ec) {\n            // Process the control request (e.g., subscribe/unsubscribe)\n            // For simplicity, assume request contains \"subscribe\" or \"unsubscribe\" followed by the endpoint\n            std::istringstream iss(*request);\n            std::string command;\n            std::string endpoint_str;\n            iss >> command >> endpoint_str;\n            udp::endpoint endpoint(boost::asio::ip::make_address(endpoint_str), socket->remote_endpoint().port());\n\n            if (command == \"subscribe\") {\n                subscribers_.insert(endpoint);\n            } else if (command == \"unsubscribe\") {\n                subscribers_.erase(endpoint);\n            }\n\n            // Respond to the client\n            auto response = std::make_shared<std::string>(\"OK\\n\");\n            boost::asio::async_write(*socket, boost::asio::buffer(*response),\n                [socket, response](const boost::system::error_code&, std::size_t) {});\n        }\n    }\n\n    void start_timer() {\n        timer_.expires_after(std::chrono::seconds(1));\n        timer_.async_wait([this](const boost::system::error_code&) {\n            handle_timer();\n        });\n    }\n\n    void handle_timer() {\n        // Create a data frame\n        std::string frame = \"Frame \" + std::to_string(next_frame_number_++);\n        \n        // Broadcast the frame to all subscribers\n        for (const auto& endpoint : subscribers_) {\n            udp_socket_.async_send_to(boost::asio::buffer(frame), endpoint,\n                [](const boost::system::error_code&, std::size_t) {});\n        }\n\n        // Restart the timer\n        start_timer();\n    }\n\n    tcp::acceptor acceptor_;\n    boost::asio::steady_timer timer_;\n    udp::socket udp_socket_;\n    unsigned long next_frame_number_;\n    std::set<udp::endpoint> subscribers_;\n};"
    ],
    "unmatched_results": [
      "class server {\npublic:\n    server(boost::asio::io_context& io_context, unsigned short port)\n        : acceptor_(io_context, tcp::endpoint(tcp::v4(), port)),\n          timer_(io_context, boost::asio::chrono::seconds(1)),\n          udp_socket_(io_context, udp::endpoint(udp::v4(), port)),\n          next_frame_number_(0) {\n        start_accept();\n        start_timer();\n    }\n\nprivate:\n    using tcp_socket_ptr = std::shared_ptr<tcp::socket>;\n    using control_request_ptr = std::shared_ptr<std::vector<char>>;\n    using timer_ptr = std::shared_ptr<boost::asio::steady_timer>;\n\n    void start_accept() {\n        tcp_socket_ptr socket = std::make_shared<tcp::socket>(acceptor_.get_executor().context());\n        acceptor_.async_accept(*socket, [this, socket](const boost::system::error_code& ec) {\n            handle_accept(ec, socket);\n        });\n    }\n\n    void handle_accept(const boost::system::error_code& ec, tcp_socket_ptr socket) {\n        if (!ec) {\n            auto request = std::make_shared<std::vector<char>>(1024);\n            socket->async_read_some(boost::asio::buffer(*request), [this, socket, request](const boost::system::error_code& ec, std::size_t length) {\n                handle_control_request(ec, socket, request);\n            });\n        }\n        start_accept();\n    }\n\n    void handle_control_request(const boost::system::error_code& ec, tcp_socket_ptr socket, control_request_ptr request) {\n        if (!ec) {\n            // Process the control request here\n            // For example, add the client to subscribers_\n            udp::endpoint client_endpoint;\n            // Deserialize client_endpoint from request data\n            subscribers_.insert(client_endpoint);\n\n            // Optionally handle delayed processing\n            auto delay_timer = std::make_shared<boost::asio::steady_timer>(socket->get_executor().context(), boost::asio::chrono::seconds(1));\n            delay_timer->async_wait([this, socket, request, delay_timer](const boost::system::error_code& ec) {\n                handle_control_request_timer(socket, request, delay_timer);\n            });\n        }\n    }\n\n    void handle_control_request_timer(tcp_socket_ptr socket, control_request_ptr request, timer_ptr delay_timer) {\n        if (!delay_timer->expiry().is_negative()) {\n            // Perform delayed processing of the control request\n        }\n    }\n\n    void start_timer() {\n        timer_.async_wait([this](const boost::system::error_code& ec) {\n            handle_timer();\n        });\n    }\n\n    void handle_timer() {\n        if (!timer_.expiry().is_negative()) {\n            // Broadcast data frames to all subscribed clients\n            std::vector<char> frame(1024);\n            // Fill frame with data and frame number\n            for (const auto& endpoint : subscribers_) {\n                udp_socket_.async_send_to(boost::asio::buffer(frame), endpoint, [](const boost::system::error_code& ec, std::size_t bytes_sent) {\n                    // Handle send result if needed\n                });\n            }\n            ++next_frame_number_;\n            timer_.expires_after(boost::asio::chrono::seconds(1));\n            start_timer();\n        }\n    }\n\n    tcp::acceptor acceptor_;\n    boost::asio::steady_timer timer_;\n    udp::socket udp_socket_;\n    unsigned long next_frame_number_;\n    std::set<udp::endpoint> subscribers_;\n};"
    ],
    "match_count": 9,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 4,
    "Instruction": "Task Description: Implement a class for handling HTTP file downloads using libcurl in C++. The class should support URL downloading with retries, temporary file handling, and proper resource management.\n\nClass Description: The DownloadTask class provides functionality to download files from HTTP URLs using libcurl. It handles initialization/cleanup of libcurl, manages download retries, writes data to temporary files, and performs final file operations upon successful download.\n\nAttributes:\n- m_url: [std::string] - Primary URL for file download\n- m_urlBackup: [std::string] - Backup URL if primary fails\n- m_output: [std::string] - Final output file path\n- m_outputTmp: [std::string] - Temporary file path during download\n- m_default: [std::string] - Default file path if download fails\n- m_mtime: [time_t] - Modification time to set on downloaded file\n- m_retries: [unsigned int] - Number of download attempts made\n- m_name: [std::string] - Name identifier for the download task\n- m_userAgent: [std::string] - User agent string for HTTP requests\n- m_error: [std::string] - Last error message encountered\n\nMethods:\n- initialize(): [static void]() -> void - Initializes libcurl global state\n- uninitialize(): [static void]() -> void - Cleans up libcurl global state\n- DownloadTask(): [constructor](const std::string&, const std::string&, const std::string&, time_t, const std::string&) -> DownloadTask - Constructs a download task with URL, output path, default file, modification time, and optional name\n- run(): [bool]() -> bool - Executes the download task and returns success status\n- getRetries(): [unsigned int]() -> unsigned int - Returns number of retry attempts\n- writeData(): [size_t](void*, size_t, size_t) -> size_t - Callback for writing received data\n- downloadFile(): [bool](const std::string&) -> bool - Internal method to perform the actual file download",
    "Canonical_solution": "#include <curl/curl.h>\n#include <vector>\n#include <string>\n#include <utility>\n\nclass DownloadTask\n{\npublic:\n    DownloadTask(const std::string &url, const std::string& output, const std::string& defaultFile, time_t mtime, const std::string& name = \"\");\n    \n    static void initialize();\n    static void uninitialize();\n    \n    bool run();\n    unsigned int getRetries() const;\n    size_t writeData(void *buffer, size_t size, size_t nmemb);\n    \nprivate:\n    bool downloadFile(const std::string& url);\n    \n    std::string m_url;\n    std::string m_urlBackup;\n    std::string m_output;\n    std::string m_outputTmp;\n    std::string m_default;\n    time_t m_mtime;\n    unsigned int m_retries;\n    std::string m_name;\n    std::string m_userAgent;\n    std::string m_error;\n};\n\nsize_t writeTaskHttpData(void *buffer, size_t size, size_t nmemb, void *user_p)\n{\n    DownloadTask *task = reinterpret_cast<DownloadTask *>(user_p);\n    if (NULL != task)\n    {\n        return task->writeData(buffer, size, nmemb);\n    }\n    \n    return 0;\n}\n\nvoid DownloadTask::initialize()\n{\n    curl_global_init(CURL_GLOBAL_ALL);\n}\n\nvoid DownloadTask::uninitialize()\n{\n    curl_global_cleanup();\n}\n\nbool DownloadTask::downloadFile(const std::string& url)\n{\n    ++m_retries;\n    \n    m_outputTmp = m_output + \".tmp\";\n    deleteFile(m_outputTmp);\n\n    CURLcode res = CURLE_OK;\n    CURL *curl = NULL;\n    \n    std::string userAgent = m_userAgent.empty() ? \"WeChat/7.0.15.33 CFNetwork/978.0.7 Darwin/18.6.0\" : m_userAgent;\n    \n    curl = curl_easy_init();\n    curl_easy_setopt(curl, CURLOPT_URL, url.c_str());\n    curl_easy_setopt(curl, CURLOPT_USERAGENT, userAgent.c_str());\n    curl_easy_setopt(curl, CURLOPT_FORBID_REUSE, 1L);\n    curl_easy_setopt(curl, CURLOPT_TIMEOUT, 60);\n    curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, &::writeTaskHttpData);\n    curl_easy_setopt(curl, CURLOPT_WRITEDATA, this);\n    curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, true);\n    curl_easy_setopt(curl, CURLOPT_SSL_VERIFYPEER, 0);\n    curl_easy_setopt(curl, CURLOPT_SSL_VERIFYHOST, 0);\n\n    long httpStatus = 0;\n    res = curl_easy_perform(curl);\n    if (res != CURLE_OK)\n    {\n        m_error = \"Failed \" + m_name + \"\\r\\n\";\n        m_error += curl_easy_strerror(res);\n    }\n    else\n    {\n        curl_easy_getinfo(curl, CURLINFO_RESPONSE_CODE, &httpStatus);\n    }\n    curl_easy_cleanup(curl);\n    \n    if (res == CURLE_OK && httpStatus == 200)\n    {\n        ::moveFile(m_outputTmp, m_output);\n        if (m_mtime > 0)\n        {\n            updateFileTime(m_output, m_mtime);\n        }\n        return true;\n    }\n\n    if (m_error.empty())\n    {\n        m_error = \"HTTP Status:\" + std::to_string(httpStatus);\n    }\n    return false;\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 146,
    "matched_results": [
      "#include <curl/curl.h>\n#include <string>\n#include <fstream>\n#include <ctime>\n\nclass DownloadTask {\npublic:\n    static void initialize() {\n        curl_global_init(CURL_GLOBAL_DEFAULT);\n    }\n\n    static void uninitialize() {\n        curl_global_cleanup();\n    }\n\n    DownloadTask(const std::string& url, const std::string& output, const std::string& defaultFile, time_t mtime, const std::string& name = \"\")\n        : m_url(url), m_output(output), m_default(defaultFile), m_mtime(mtime), m_name(name), m_retries(0), m_error(\"\") {\n        m_outputTmp = m_output + \".tmp\";\n    }\n\n    bool run() {\n        if (downloadFile(m_url) || (!m_urlBackup.empty() && downloadFile(m_urlBackup))) {\n            std::rename(m_outputTmp.c_str(), m_output.c_str());\n            struct utimbuf new_times;\n            new_times.actime = m_mtime;\n            new_times.modtime = m_mtime;\n            utime(m_output.c_str(), &new_times);\n            return true;\n        } else {\n            std::rename(m_default.c_str(), m_output.c_str());\n            return false;\n        }\n    }\n\n    unsigned int getRetries() const {\n        return m_retries;\n    }\n\nprivate:\n    std::string m_url;\n    std::string m_urlBackup;\n    std::string m_output;\n    std::string m_outputTmp;\n    std::string m_default;\n    time_t m_mtime;\n    unsigned int m_retries;\n    std::string m_name;\n    std::string m_userAgent;\n    std::string m_error;\n\n    static size_t writeData(void* ptr, size_t size, size_t nmemb, void* stream) {\n        std::ofstream* out = static_cast<std::ofstream*>(stream);\n        out->write(static_cast<const char*>(ptr), size * nmemb);\n        return size * nmemb;\n    }\n\n    bool downloadFile(const std::string& url) {\n        CURL* curl = curl_easy_init();\n        if (!curl) {\n            m_error = \"Failed to initialize CURL\";\n            return false;\n        }\n\n        std::ofstream outFile(m_outputTmp, std::ios::binary);\n        curl_easy_setopt(curl, CURLOPT_URL, url.c_str());\n        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, writeData);\n        curl_easy_setopt(curl, CURLOPT_WRITEDATA, &outFile);\n        curl_easy_setopt(curl, CURLOPT_USERAGENT, m_userAgent.c_str());\n\n        CURLcode res = curl_easy_perform(curl);\n        curl_easy_cleanup(curl);\n        outFile.close();\n\n        if (res != CURLE_OK) {\n            m_error = curl_easy_strerror(res);\n            m_retries++;\n            return false;\n        }\n\n        return true;\n    }\n};",
      "#include <curl/curl.h>\n#include <string>\n#include <fstream>\n#include <iostream>\n#include <ctime>\n\nclass DownloadTask {\npublic:\n    static void initialize() {\n        curl_global_init(CURL_GLOBAL_DEFAULT);\n    }\n\n    static void uninitialize() {\n        curl_global_cleanup();\n    }\n\n    DownloadTask(const std::string& url, const std::string& urlBackup, const std::string& output, time_t mtime, const std::string& name = \"\")\n        : m_url(url), m_urlBackup(urlBackup), m_output(output), m_outputTmp(output + \".tmp\"), m_default(\"\"), m_mtime(mtime), m_retries(0), m_name(name), m_userAgent(\"libcurl-agent/1.0\"), m_error(\"\") {}\n\n    bool run() {\n        if (downloadFile(m_url)) {\n            finalizeDownload();\n            return true;\n        }\n        if (!m_urlBackup.empty() && downloadFile(m_urlBackup)) {\n            finalizeDownload();\n            return true;\n        }\n        if (!m_default.empty()) {\n            std::ifstream src(m_default, std::ios::binary);\n            std::ofstream dst(m_output, std::ios::binary);\n            dst << src.rdbuf();\n            return true;\n        }\n        return false;\n    }\n\n    unsigned int getRetries() const {\n        return m_retries;\n    }\n\nprivate:\n    std::string m_url;\n    std::string m_urlBackup;\n    std::string m_output;\n    std::string m_outputTmp;\n    std::string m_default;\n    time_t m_mtime;\n    unsigned int m_retries;\n    std::string m_name;\n    std::string m_userAgent;\n    std::string m_error;\n\n    static size_t writeData(void* ptr, size_t size, size_t nmemb, void* stream) {\n        std::ofstream* out = static_cast<std::ofstream*>(stream);\n        out->write(static_cast<const char*>(ptr), size * nmemb);\n        return size * nmemb;\n    }\n\n    bool downloadFile(const std::string& url) {\n        CURL* curl = curl_easy_init();\n        if (!curl) {\n            m_error = \"Failed to initialize CURL\";\n            return false;\n        }\n\n        std::ofstream outFile(m_outputTmp, std::ios::binary);\n        if (!outFile.is_open()) {\n            m_error = \"Failed to open temporary file\";\n            curl_easy_cleanup(curl);\n            return false;\n        }\n\n        curl_easy_setopt(curl, CURLOPT_URL, url.c_str());\n        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, writeData);\n        curl_easy_setopt(curl, CURLOPT_WRITEDATA, &outFile);\n        curl_easy_setopt(curl, CURLOPT_USERAGENT, m_userAgent.c_str());\n\n        CURLcode res = curl_easy_perform(curl);\n        if (res != CURLE_OK) {\n            m_error = curl_easy_strerror(res);\n            outFile.close();\n            curl_easy_cleanup(curl);\n            return false;\n        }\n\n        outFile.close();\n        curl_easy_cleanup(curl);\n        return true;\n    }\n\n    void finalizeDownload() {\n        std::rename(m_outputTmp.c_str(), m_output.c_str());\n        struct utimbuf new_times;\n        new_times.actime = m_mtime;\n        new_times.modtime = m_mtime;\n        utime(m_output.c_str(), &new_times);\n    }\n};",
      "#include <curl/curl.h>\n#include <string>\n#include <fstream>\n#include <iostream>\n#include <ctime>\n\nclass DownloadTask {\npublic:\n    static void initialize() {\n        curl_global_init(CURL_GLOBAL_DEFAULT);\n    }\n\n    static void uninitialize() {\n        curl_global_cleanup();\n    }\n\n    DownloadTask(const std::string& url, const std::string& output, const std::string& defaultFile, time_t mtime, const std::string& name = \"\")\n        : m_url(url), m_output(output), m_default(defaultFile), m_mtime(mtime), m_name(name), m_retries(0) {\n        m_outputTmp = m_output + \".tmp\";\n        m_userAgent = \"libcurl-agent/1.0\";\n    }\n\n    bool run() {\n        if (downloadFile(m_url) || (!m_urlBackup.empty() && downloadFile(m_urlBackup))) {\n            std::rename(m_outputTmp.c_str(), m_output.c_str());\n            struct utimbuf new_times;\n            new_times.actime = m_mtime;\n            new_times.modtime = m_mtime;\n            utime(m_output.c_str(), &new_times);\n            return true;\n        }\n        std::ifstream src(m_default, std::ios::binary);\n        std::ofstream dst(m_output, std::ios::binary);\n        dst << src.rdbuf();\n        return false;\n    }\n\n    unsigned int getRetries() const {\n        return m_retries;\n    }\n\nprivate:\n    std::string m_url;\n    std::string m_urlBackup;\n    std::string m_output;\n    std::string m_outputTmp;\n    std::string m_default;\n    time_t m_mtime;\n    unsigned int m_retries;\n    std::string m_name;\n    std::string m_userAgent;\n    std::string m_error;\n\n    static size_t writeData(void* ptr, size_t size, size_t nmemb, void* stream) {\n        std::ofstream* out = static_cast<std::ofstream*>(stream);\n        size_t totalSize = size * nmemb;\n        out->write(static_cast<char*>(ptr), totalSize);\n        return totalSize;\n    }\n\n    bool downloadFile(const std::string& url) {\n        CURL* curl = curl_easy_init();\n        if (!curl) {\n            m_error = \"Failed to initialize CURL\";\n            return false;\n        }\n\n        std::ofstream file(m_outputTmp, std::ios::binary);\n        if (!file.is_open()) {\n            m_error = \"Failed to open temporary file\";\n            curl_easy_cleanup(curl);\n            return false;\n        }\n\n        curl_easy_setopt(curl, CURLOPT_URL, url.c_str());\n        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, writeData);\n        curl_easy_setopt(curl, CURLOPT_WRITEDATA, &file);\n        curl_easy_setopt(curl, CURLOPT_USERAGENT, m_userAgent.c_str());\n\n        CURLcode res;\n        do {\n            res = curl_easy_perform(curl);\n            m_retries++;\n        } while (res != CURLE_OK && m_retries < 3);\n\n        if (res != CURLE_OK) {\n            m_error = curl_easy_strerror(res);\n            curl_easy_cleanup(curl);\n            return false;\n        }\n\n        curl_easy_cleanup(curl);\n        return true;\n    }\n};",
      "#include <curl/curl.h>\n#include <fstream>\n#include <string>\n#include <ctime>\n\nclass DownloadTask {\npublic:\n    static void initialize() {\n        curl_global_init(CURL_GLOBAL_DEFAULT);\n    }\n\n    static void uninitialize() {\n        curl_global_cleanup();\n    }\n\n    DownloadTask(const std::string& url, const std::string& output, const std::string& defaultFile, time_t mtime, const std::string& name = \"\")\n        : m_url(url), m_output(output), m_default(defaultFile), m_mtime(mtime), m_name(name), m_retries(0), m_error(\"\") {\n        m_outputTmp = output + \".tmp\";\n        m_userAgent = \"libcurl-agent/1.0\";\n    }\n\n    bool run() {\n        if (downloadFile(m_url)) {\n            return finalizeDownload();\n        }\n        if (!m_urlBackup.empty() && downloadFile(m_urlBackup)) {\n            return finalizeDownload();\n        }\n        std::ifstream src(m_default, std::ios::binary);\n        std::ofstream dst(m_output, std::ios::binary);\n        dst << src.rdbuf();\n        return false;\n    }\n\n    unsigned int getRetries() const {\n        return m_retries;\n    }\n\nprivate:\n    std::string m_url;\n    std::string m_urlBackup;\n    std::string m_output;\n    std::string m_outputTmp;\n    std::string m_default;\n    time_t m_mtime;\n    unsigned int m_retries;\n    std::string m_name;\n    std::string m_userAgent;\n    std::string m_error;\n\n    static size_t writeData(void* ptr, size_t size, size_t nmemb, void* stream) {\n        std::ofstream* out = static_cast<std::ofstream*>(stream);\n        out->write(static_cast<const char*>(ptr), size * nmemb);\n        return size * nmemb;\n    }\n\n    bool downloadFile(const std::string& url) {\n        CURL* curl = curl_easy_init();\n        if (!curl) {\n            m_error = \"Failed to initialize CURL\";\n            return false;\n        }\n\n        std::ofstream outFile(m_outputTmp, std::ios::binary);\n        curl_easy_setopt(curl, CURLOPT_URL, url.c_str());\n        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, writeData);\n        curl_easy_setopt(curl, CURLOPT_WRITEDATA, &outFile);\n        curl_easy_setopt(curl, CURLOPT_USERAGENT, m_userAgent.c_str());\n\n        CURLcode res = curl_easy_perform(curl);\n        if (res != CURLE_OK) {\n            m_error = curl_easy_strerror(res);\n            curl_easy_cleanup(curl);\n            return false;\n        }\n\n        curl_easy_cleanup(curl);\n        m_retries++;\n        return true;\n    }\n\n    bool finalizeDownload() {\n        std::ifstream src(m_outputTmp, std::ios::binary);\n        std::ofstream dst(m_output, std::ios::binary);\n        dst << src.rdbuf();\n        std::remove(m_outputTmp.c_str());\n        struct utimbuf new_times;\n        new_times.actime = m_mtime;\n        new_times.modtime = m_mtime;\n        utime(m_output.c_str(), &new_times);\n        return true;\n    }\n};",
      "#include <curl/curl.h>\n#include <string>\n#include <fstream>\n#include <ctime>\n\nclass DownloadTask {\npublic:\n    static void initialize() {\n        curl_global_init(CURL_GLOBAL_DEFAULT);\n    }\n\n    static void uninitialize() {\n        curl_global_cleanup();\n    }\n\n    DownloadTask(const std::string& url, const std::string& output, const std::string& defaultFile, time_t mtime, const std::string& name = \"\")\n        : m_url(url), m_output(output), m_default(defaultFile), m_mtime(mtime), m_name(name), m_retries(0), m_error(\"\") {\n        m_outputTmp = output + \".tmp\";\n    }\n\n    bool run() {\n        if (downloadFile(m_url)) {\n            finalizeDownload();\n            return true;\n        }\n        if (!m_urlBackup.empty() && downloadFile(m_urlBackup)) {\n            finalizeDownload();\n            return true;\n        }\n        std::ifstream src(m_default, std::ios::binary);\n        std::ofstream dst(m_output, std::ios::binary);\n        dst << src.rdbuf();\n        return false;\n    }\n\n    unsigned int getRetries() const {\n        return m_retries;\n    }\n\nprivate:\n    std::string m_url;\n    std::string m_urlBackup;\n    std::string m_output;\n    std::string m_outputTmp;\n    std::string m_default;\n    time_t m_mtime;\n    unsigned int m_retries;\n    std::string m_name;\n    std::string m_userAgent;\n    std::string m_error;\n\n    static size_t writeData(void* ptr, size_t size, size_t nmemb, void* stream) {\n        std::ofstream* file = static_cast<std::ofstream*>(stream);\n        file->write(static_cast<const char*>(ptr), size * nmemb);\n        return size * nmemb;\n    }\n\n    bool downloadFile(const std::string& url) {\n        CURL* curl = curl_easy_init();\n        if (!curl) {\n            m_error = \"Failed to initialize CURL\";\n            return false;\n        }\n\n        std::ofstream file(m_outputTmp, std::ios::binary);\n        curl_easy_setopt(curl, CURLOPT_URL, url.c_str());\n        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, writeData);\n        curl_easy_setopt(curl, CURLOPT_WRITEDATA, &file);\n        curl_easy_setopt(curl, CURLOPT_USERAGENT, m_userAgent.c_str());\n\n        CURLcode res = curl_easy_perform(curl);\n        if (res != CURLE_OK) {\n            m_error = curl_easy_strerror(res);\n            curl_easy_cleanup(curl);\n            file.close();\n            return false;\n        }\n\n        curl_easy_cleanup(curl);\n        file.close();\n        m_retries++;\n        return true;\n    }\n\n    void finalizeDownload() {\n        std::rename(m_outputTmp.c_str(), m_output.c_str());\n        struct utimbuf new_times;\n        new_times.actime = m_mtime;\n        new_times.modtime = m_mtime;\n        utime(m_output.c_str(), &new_times);\n    }\n};",
      "#include <curl/curl.h>\n#include <string>\n#include <fstream>\n#include <ctime>\n\nclass DownloadTask {\npublic:\n    static void initialize() {\n        curl_global_init(CURL_GLOBAL_DEFAULT);\n    }\n\n    static void uninitialize() {\n        curl_global_cleanup();\n    }\n\n    DownloadTask(const std::string& url, const std::string& output, const std::string& defaultFile, time_t mtime, const std::string& name = \"\")\n        : m_url(url), m_output(output), m_default(defaultFile), m_mtime(mtime), m_name(name), m_retries(0), m_error(\"\") {\n        m_outputTmp = output + \".tmp\";\n        m_userAgent = \"libcurl-agent/1.0\";\n    }\n\n    bool run() {\n        if (downloadFile(m_url) || (!m_urlBackup.empty() && downloadFile(m_urlBackup))) {\n            std::rename(m_outputTmp.c_str(), m_output.c_str());\n            struct utimbuf new_times;\n            new_times.actime = m_mtime;\n            new_times.modtime = m_mtime;\n            utime(m_output.c_str(), &new_times);\n            return true;\n        } else {\n            std::rename(m_default.c_str(), m_output.c_str());\n            return false;\n        }\n    }\n\n    unsigned int getRetries() const {\n        return m_retries;\n    }\n\nprivate:\n    std::string m_url;\n    std::string m_urlBackup;\n    std::string m_output;\n    std::string m_outputTmp;\n    std::string m_default;\n    time_t m_mtime;\n    unsigned int m_retries;\n    std::string m_name;\n    std::string m_userAgent;\n    std::string m_error;\n\n    static size_t writeData(void* ptr, size_t size, size_t nmemb, void* stream) {\n        std::ofstream* out = static_cast<std::ofstream*>(stream);\n        out->write(static_cast<const char*>(ptr), size * nmemb);\n        return size * nmemb;\n    }\n\n    bool downloadFile(const std::string& url) {\n        CURL* curl = curl_easy_init();\n        if (!curl) {\n            m_error = \"Failed to initialize CURL\";\n            return false;\n        }\n\n        std::ofstream outFile(m_outputTmp, std::ios::binary);\n        curl_easy_setopt(curl, CURLOPT_URL, url.c_str());\n        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, writeData);\n        curl_easy_setopt(curl, CURLOPT_WRITEDATA, &outFile);\n        curl_easy_setopt(curl, CURLOPT_USERAGENT, m_userAgent.c_str());\n\n        CURLcode res = curl_easy_perform(curl);\n        if (res != CURLE_OK) {\n            m_error = curl_easy_strerror(res);\n            curl_easy_cleanup(curl);\n            outFile.close();\n            m_retries++;\n            return false;\n        }\n\n        curl_easy_cleanup(curl);\n        outFile.close();\n        return true;\n    }\n};",
      "#include <curl/curl.h>\n#include <string>\n#include <fstream>\n#include <iostream>\n#include <ctime>\n\nclass DownloadTask {\npublic:\n    static void initialize() {\n        curl_global_init(CURL_GLOBAL_ALL);\n    }\n\n    static void uninitialize() {\n        curl_global_cleanup();\n    }\n\n    DownloadTask(const std::string& url, const std::string& output, const std::string& defaultFile, time_t mtime, const std::string& name = \"\")\n        : m_url(url), m_output(output), m_default(defaultFile), m_mtime(mtime), m_name(name), m_retries(0) {\n        m_outputTmp = m_output + \".tmp\";\n        m_userAgent = \"libcurl-agent/1.0\";\n    }\n\n    bool run() {\n        if (downloadFile(m_url) || (!m_urlBackup.empty() && downloadFile(m_urlBackup))) {\n            std::rename(m_outputTmp.c_str(), m_output.c_str());\n            struct utimbuf new_times;\n            new_times.actime = m_mtime;\n            new_times.modtime = m_mtime;\n            utime(m_output.c_str(), &new_times);\n            return true;\n        } else {\n            std::rename(m_default.c_str(), m_output.c_str());\n            return false;\n        }\n    }\n\n    unsigned int getRetries() const {\n        return m_retries;\n    }\n\nprivate:\n    std::string m_url;\n    std::string m_urlBackup;\n    std::string m_output;\n    std::string m_outputTmp;\n    std::string m_default;\n    time_t m_mtime;\n    unsigned int m_retries;\n    std::string m_name;\n    std::string m_userAgent;\n    std::string m_error;\n\n    static size_t writeData(void* ptr, size_t size, size_t nmemb, void* stream) {\n        std::ofstream* out = static_cast<std::ofstream*>(stream);\n        size_t totalSize = size * nmemb;\n        out->write(static_cast<const char*>(ptr), totalSize);\n        return totalSize;\n    }\n\n    bool downloadFile(const std::string& url) {\n        CURL* curl;\n        CURLcode res;\n        std::ofstream outFile(m_outputTmp, std::ios::binary);\n\n        curl = curl_easy_init();\n        if (curl) {\n            curl_easy_setopt(curl, CURLOPT_URL, url.c_str());\n            curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, writeData);\n            curl_easy_setopt(curl, CURLOPT_WRITEDATA, &outFile);\n            curl_easy_setopt(curl, CURLOPT_USERAGENT, m_userAgent.c_str());\n\n            res = curl_easy_perform(curl);\n            if (res != CURLE_OK) {\n                m_error = curl_easy_strerror(res);\n                curl_easy_cleanup(curl);\n                outFile.close();\n                return false;\n            }\n\n            curl_easy_cleanup(curl);\n            outFile.close();\n            return true;\n        }\n\n        return false;\n    }\n};",
      "#include <curl/curl.h>\n#include <string>\n#include <fstream>\n#include <ctime>\n\nclass DownloadTask {\npublic:\n    static void initialize() {\n        curl_global_init(CURL_GLOBAL_ALL);\n    }\n\n    static void uninitialize() {\n        curl_global_cleanup();\n    }\n\n    DownloadTask(const std::string& url, const std::string& output, const std::string& defaultFile, time_t mtime, const std::string& name = \"\")\n        : m_url(url), m_output(output), m_default(defaultFile), m_mtime(mtime), m_name(name), m_retries(0), m_error(\"\") {\n        m_outputTmp = m_output + \".tmp\";\n        m_userAgent = \"libcurl-agent/1.0\";\n    }\n\n    bool run() {\n        if (downloadFile(m_url) || (!m_urlBackup.empty() && downloadFile(m_urlBackup))) {\n            std::rename(m_outputTmp.c_str(), m_output.c_str());\n            struct utimbuf new_times;\n            new_times.actime = m_mtime;\n            new_times.modtime = m_mtime;\n            utime(m_output.c_str(), &new_times);\n            return true;\n        } else {\n            std::rename(m_default.c_str(), m_output.c_str());\n            return false;\n        }\n    }\n\n    unsigned int getRetries() const {\n        return m_retries;\n    }\n\nprivate:\n    std::string m_url;\n    std::string m_urlBackup;\n    std::string m_output;\n    std::string m_outputTmp;\n    std::string m_default;\n    time_t m_mtime;\n    unsigned int m_retries;\n    std::string m_name;\n    std::string m_userAgent;\n    std::string m_error;\n\n    static size_t writeData(void* ptr, size_t size, size_t nmemb, void* stream) {\n        std::ofstream* file = static_cast<std::ofstream*>(stream);\n        file->write(static_cast<const char*>(ptr), size * nmemb);\n        return size * nmemb;\n    }\n\n    bool downloadFile(const std::string& url) {\n        CURL* curl = curl_easy_init();\n        if (!curl) {\n            m_error = \"Failed to initialize CURL\";\n            return false;\n        }\n\n        std::ofstream file(m_outputTmp, std::ios::binary);\n        curl_easy_setopt(curl, CURLOPT_URL, url.c_str());\n        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, writeData);\n        curl_easy_setopt(curl, CURLOPT_WRITEDATA, &file);\n        curl_easy_setopt(curl, CURLOPT_USERAGENT, m_userAgent.c_str());\n\n        CURLcode res = curl_easy_perform(curl);\n        if (res != CURLE_OK) {\n            m_error = curl_easy_strerror(res);\n            file.close();\n            curl_easy_cleanup(curl);\n            return false;\n        }\n\n        file.close();\n        curl_easy_cleanup(curl);\n        return true;\n    }\n};",
      "#include <curl/curl.h>\n#include <string>\n#include <fstream>\n#include <iostream>\n#include <ctime>\n\nclass DownloadTask {\npublic:\n    static void initialize() {\n        curl_global_init(CURL_GLOBAL_DEFAULT);\n    }\n\n    static void uninitialize() {\n        curl_global_cleanup();\n    }\n\n    DownloadTask(const std::string& url, const std::string& output, const std::string& defaultFile, time_t mtime, const std::string& name = \"\")\n        : m_url(url), m_output(output), m_default(defaultFile), m_mtime(mtime), m_name(name), m_retries(0) {\n        m_outputTmp = m_output + \".tmp\";\n        m_userAgent = \"libcurl-agent/1.0\";\n    }\n\n    bool run() {\n        if (downloadFile(m_url) || (!m_urlBackup.empty() && downloadFile(m_urlBackup))) {\n            std::rename(m_outputTmp.c_str(), m_output.c_str());\n            struct utimbuf new_times;\n            new_times.actime = m_mtime;\n            new_times.modtime = m_mtime;\n            utime(m_output.c_str(), &new_times);\n            return true;\n        }\n        std::rename(m_default.c_str(), m_output.c_str());\n        return false;\n    }\n\n    unsigned int getRetries() const {\n        return m_retries;\n    }\n\nprivate:\n    std::string m_url;\n    std::string m_urlBackup;\n    std::string m_output;\n    std::string m_outputTmp;\n    std::string m_default;\n    time_t m_mtime;\n    unsigned int m_retries;\n    std::string m_name;\n    std::string m_userAgent;\n    std::string m_error;\n\n    static size_t writeData(void* ptr, size_t size, size_t nmemb, void* stream) {\n        std::ofstream* out = static_cast<std::ofstream*>(stream);\n        out->write(static_cast<const char*>(ptr), size * nmemb);\n        return size * nmemb;\n    }\n\n    bool downloadFile(const std::string& url) {\n        CURL* curl = curl_easy_init();\n        if (!curl) {\n            m_error = \"Failed to initialize CURL\";\n            return false;\n        }\n\n        std::ofstream outFile(m_outputTmp, std::ios::binary);\n        if (!outFile.is_open()) {\n            m_error = \"Failed to open temporary file for writing\";\n            curl_easy_cleanup(curl);\n            return false;\n        }\n\n        curl_easy_setopt(curl, CURLOPT_URL, url.c_str());\n        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, writeData);\n        curl_easy_setopt(curl, CURLOPT_WRITEDATA, &outFile);\n        curl_easy_setopt(curl, CURLOPT_USERAGENT, m_userAgent.c_str());\n\n        CURLcode res;\n        for (m_retries = 0; m_retries < 3; ++m_retries) {\n            res = curl_easy_perform(curl);\n            if (res == CURLE_OK) {\n                outFile.close();\n                curl_easy_cleanup(curl);\n                return true;\n            }\n        }\n\n        m_error = curl_easy_strerror(res);\n        outFile.close();\n        curl_easy_cleanup(curl);\n        return false;\n    }\n};",
      "#include <curl/curl.h>\n#include <string>\n#include <fstream>\n#include <iostream>\n#include <ctime>\n\nclass DownloadTask {\npublic:\n    static void initialize() {\n        curl_global_init(CURL_GLOBAL_DEFAULT);\n    }\n\n    static void uninitialize() {\n        curl_global_cleanup();\n    }\n\n    DownloadTask(const std::string& url, const std::string& output, const std::string& defaultFile, time_t mtime, const std::string& name = \"\")\n        : m_url(url), m_output(output), m_default(defaultFile), m_mtime(mtime), m_name(name), m_retries(0) {\n        m_outputTmp = output + \".tmp\";\n        m_userAgent = \"libcurl-agent/1.0\";\n    }\n\n    bool run() {\n        if (downloadFile(m_url) || (!m_urlBackup.empty() && downloadFile(m_urlBackup))) {\n            std::rename(m_outputTmp.c_str(), m_output.c_str());\n            struct utimbuf new_times;\n            new_times.actime = m_mtime;\n            new_times.modtime = m_mtime;\n            utime(m_output.c_str(), &new_times);\n            return true;\n        } else {\n            std::rename(m_default.c_str(), m_output.c_str());\n            return false;\n        }\n    }\n\n    unsigned int getRetries() const {\n        return m_retries;\n    }\n\nprivate:\n    std::string m_url;\n    std::string m_urlBackup;\n    std::string m_output;\n    std::string m_outputTmp;\n    std::string m_default;\n    time_t m_mtime;\n    unsigned int m_retries;\n    std::string m_name;\n    std::string m_userAgent;\n    std::string m_error;\n\n    static size_t writeData(void* ptr, size_t size, size_t nmemb, void* stream) {\n        std::ofstream* out = static_cast<std::ofstream*>(stream);\n        out->write(static_cast<const char*>(ptr), size * nmemb);\n        return size * nmemb;\n    }\n\n    bool downloadFile(const std::string& url) {\n        CURL* curl = curl_easy_init();\n        if (!curl) {\n            m_error = \"Failed to initialize CURL\";\n            return false;\n        }\n\n        std::ofstream outFile(m_outputTmp, std::ios::binary);\n        if (!outFile) {\n            m_error = \"Failed to open temporary file\";\n            curl_easy_cleanup(curl);\n            return false;\n        }\n\n        curl_easy_setopt(curl, CURLOPT_URL, url.c_str());\n        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, writeData);\n        curl_easy_setopt(curl, CURLOPT_WRITEDATA, &outFile);\n        curl_easy_setopt(curl, CURLOPT_USERAGENT, m_userAgent.c_str());\n\n        CURLcode res;\n        m_retries = 0;\n        do {\n            res = curl_easy_perform(curl);\n            m_retries++;\n        } while (res != CURLE_OK && m_retries < 3);\n\n        if (res != CURLE_OK) {\n            m_error = curl_easy_strerror(res);\n            curl_easy_cleanup(curl);\n            outFile.close();\n            return false;\n        }\n\n        curl_easy_cleanup(curl);\n        outFile.close();\n        return true;\n    }\n};"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 40,
    "Instruction": "Task Description: Implement a WebSocket server in C++ using the WebSocket++ library to handle client connections, process incoming messages, and echo messages back to clients. The server should also support stopping the listening process upon receiving a specific command.\n\nClass Description: The WebSocketServer class encapsulates a WebSocket++ server instance, managing connection handling, message processing, and server lifecycle operations.\n\nAttributes:\n- service_: [asio::io_service&] - Reference to the ASIO I/O service used for network operations\n- port_: [int] - The port number on which the server listens for connections\n- ws_server_: [ws_echo_server] - The WebSocket++ server instance\n\nMethods:\n- Constructor: [WebSocketServer]([asio::io_service& service, int port]) -> [void] - Initializes the WebSocket++ server, sets up logging, message handling, and starts listening on the specified port\n- on_message: [on_message]([websocketpp::connection_hdl hdl, ws_echo_server::message_ptr msg]) -> [void] - Callback function that processes incoming messages, echoes them back to clients, and handles the stop-listening command\n- run: [run]() -> [void] - Starts the server's event loop to handle connections and messages",
    "Canonical_solution": "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <iostream>\n\nusing websocketpp::lib::placeholders::_1;\nusing websocketpp::lib::placeholders::_2;\nusing websocketpp::lib::bind;\n\ntypedef websocketpp::server<websocketpp::config::asio> ws_echo_server;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer(asio::io_service& service, int port) \n        : service_(service), port_(port) {\n        ws_server_.set_access_channels(websocketpp::log::alevel::all);\n        ws_server_.clear_access_channels(websocketpp::log::alevel::frame_payload);\n        ws_server_.init_asio(&service_);\n        ws_server_.set_message_handler(bind(&WebSocketServer::on_message, this, ::_1, ::_2));\n        ws_server_.listen(port_);\n        ws_server_.start_accept();\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, ws_echo_server::message_ptr msg) {\n        std::cout << \"on_message called with hdl: \" << hdl.lock().get()\n                  << \" and message: \" << msg->get_payload()\n                  << std::endl;\n\n        if (msg->get_payload() == \"stop-listening\") {\n            ws_server_.stop_listening();\n            return;\n        }\n\n        try {\n            ws_server_.send(hdl, msg->get_payload(), msg->get_opcode());\n        } catch (websocketpp::exception const & e) {\n            std::cout << \"Echo failed because: \"\n                      << \"(\" << e.what() << \")\" << std::endl;\n        }\n    }\n\n    void run() {\n        service_.run();\n    }\n\nprivate:\n    asio::io_service& service_;\n    int port_;\n    ws_echo_server ws_server_;\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 154,
    "matched_results": [
      "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <asio/io_service.hpp>\n#include <iostream>\n\ntypedef websocketpp::server<websocketpp::config::asio> ws_echo_server;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer(asio::io_service& service, int port)\n        : service_(service), port_(port) {\n        ws_server_.init_asio(&service_);\n        ws_server_.set_message_handler(bind(&WebSocketServer::on_message, this, ::_1, ::_2));\n        ws_server_.set_reuse_addr(true);\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, ws_echo_server::message_ptr msg) {\n        std::string payload = msg->get_payload();\n        if (payload == \"stop\") {\n            ws_server_.stop_listening();\n            return;\n        }\n        ws_server_.send(hdl, payload, msg->get_opcode());\n    }\n\n    void run() {\n        ws_server_.listen(port_);\n        ws_server_.start_accept();\n        service_.run();\n    }\n\nprivate:\n    asio::io_service& service_;\n    int port_;\n    ws_echo_server ws_server_;\n};\n\nint main() {\n    asio::io_service service;\n    WebSocketServer server(service, 9002);\n    server.run();\n    return 0;\n}",
      "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <asio/io_service.hpp>\n#include <iostream>\n\ntypedef websocketpp::server<websocketpp::config::asio> ws_echo_server;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer(asio::io_service& service, int port)\n        : service_(service), port_(port) {\n        ws_server_.init_asio(&service_);\n        ws_server_.set_message_handler(bind(&WebSocketServer::on_message, this, ::_1, ::_2));\n        ws_server_.set_reuse_addr(true);\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, ws_echo_server::message_ptr msg) {\n        std::string payload = msg->get_payload();\n        if (payload == \"stop\") {\n            ws_server_.stop_listening();\n            return;\n        }\n        ws_server_.send(hdl, payload, msg->get_opcode());\n    }\n\n    void run() {\n        ws_server_.listen(port_);\n        ws_server_.start_accept();\n        service_.run();\n    }\n\nprivate:\n    asio::io_service& service_;\n    int port_;\n    ws_echo_server ws_server_;\n};\n\nint main() {\n    asio::io_service service;\n    WebSocketServer server(service, 9002);\n    server.run();\n    return 0;\n}",
      "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <asio/io_service.hpp>\n\ntypedef websocketpp::server<websocketpp::config::asio> ws_echo_server;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer(asio::io_service& service, int port)\n        : service_(service), port_(port) {\n        ws_server_.init_asio(&service_);\n        ws_server_.set_message_handler(bind(&WebSocketServer::on_message, this, ::_1, ::_2));\n        ws_server_.set_access_channels(websocketpp::log::alevel::all);\n        ws_server_.clear_access_channels(websocketpp::log::alevel::frame_payload);\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, ws_echo_server::message_ptr msg) {\n        std::string payload = msg->get_payload();\n        if (payload == \"stop\") {\n            ws_server_.stop_listening();\n        } else {\n            ws_server_.send(hdl, payload, msg->get_opcode());\n        }\n    }\n\n    void run() {\n        ws_server_.listen(port_);\n        ws_server_.start_accept();\n        ws_server_.run();\n    }\n\nprivate:\n    asio::io_service& service_;\n    int port_;\n    ws_echo_server ws_server_;\n};",
      "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <asio/io_service.hpp>\n\ntypedef websocketpp::server<websocketpp::config::asio> ws_echo_server;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer(asio::io_service& service, int port)\n        : service_(service), port_(port), ws_server_() {\n        ws_server_.init_asio(&service_);\n        ws_server_.set_message_handler(bind(&WebSocketServer::on_message, this, ::_1, ::_2));\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, ws_echo_server::message_ptr msg) {\n        std::string payload = msg->get_payload();\n        if (payload == \"stop\") {\n            ws_server_.stop_listening();\n        } else {\n            ws_server_.send(hdl, payload, websocketpp::frame::opcode::text);\n        }\n    }\n\n    void run() {\n        ws_server_.listen(port_);\n        ws_server_.start_accept();\n        ws_server_.run();\n    }\n\nprivate:\n    asio::io_service& service_;\n    int port_;\n    ws_echo_server ws_server_;\n};",
      "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <asio/io_service.hpp>\n\ntypedef websocketpp::server<websocketpp::config::asio> ws_echo_server;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer(asio::io_service& service, int port)\n        : service_(service), port_(port), ws_server_() {\n        ws_server_.init_asio(&service_);\n        ws_server_.set_message_handler(bind(&WebSocketServer::on_message, this, ::_1, ::_2));\n        ws_server_.listen(port_);\n        ws_server_.start_accept();\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, ws_echo_server::message_ptr msg) {\n        std::string payload = msg->get_payload();\n        if (payload == \"stop\") {\n            ws_server_.stop_listening();\n        } else {\n            ws_server_.send(hdl, payload, websocketpp::frame::opcode::text);\n        }\n    }\n\n    void run() {\n        service_.run();\n    }\n\nprivate:\n    asio::io_service& service_;\n    int port_;\n    ws_echo_server ws_server_;\n};",
      "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <asio/io_service.hpp>\n\ntypedef websocketpp::server<websocketpp::config::asio> ws_echo_server;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer(asio::io_service& service, int port)\n        : service_(service), port_(port) {\n        ws_server_.init_asio(&service_);\n\n        ws_server_.set_message_handler(\n            websocketpp::lib::bind(\n                &WebSocketServer::on_message,\n                this,\n                websocketpp::lib::placeholders::_1,\n                websocketpp::lib::placeholders::_2\n            )\n        );\n\n        ws_server_.set_reuse_addr(true);\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, ws_echo_server::message_ptr msg) {\n        std::string payload = msg->get_payload();\n        if (payload == \"stop\") {\n            ws_server_.stop_listening();\n            return;\n        }\n        ws_server_.send(hdl, payload, msg->get_opcode());\n    }\n\n    void run() {\n        ws_server_.listen(port_);\n        ws_server_.start_accept();\n        service_.run();\n    }\n\nprivate:\n    asio::io_service& service_;\n    int port_;\n    ws_echo_server ws_server_;\n};\n\nint main() {\n    asio::io_service service;\n    WebSocketServer server(service, 9002);\n    server.run();\n    return 0;\n}",
      "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <asio/io_service.hpp>\n\ntypedef websocketpp::server<websocketpp::config::asio> ws_echo_server;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer(asio::io_service& service, int port)\n        : service_(service), port_(port) {\n        ws_server_.init_asio(&service_);\n        ws_server_.set_message_handler(bind(&WebSocketServer::on_message, this, ::_1, ::_2));\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, ws_echo_server::message_ptr msg) {\n        std::string payload = msg->get_payload();\n        if (payload == \"stop\") {\n            ws_server_.stop_listening();\n        } else {\n            ws_server_.send(hdl, payload, websocketpp::frame::opcode::text);\n        }\n    }\n\n    void run() {\n        ws_server_.listen(port_);\n        ws_server_.start_accept();\n        service_.run();\n    }\n\nprivate:\n    asio::io_service& service_;\n    int port_;\n    ws_echo_server ws_server_;\n};",
      "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <asio/io_service.hpp>\n#include <iostream>\n\ntypedef websocketpp::server<websocketpp::config::asio> ws_echo_server;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer(asio::io_service& service, int port)\n        : service_(service), port_(port) {\n        ws_server_.init_asio(&service_);\n        ws_server_.set_message_handler(bind(&WebSocketServer::on_message, this, ::_1, ::_2));\n        ws_server_.set_reuse_addr(true);\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, ws_echo_server::message_ptr msg) {\n        std::string payload = msg->get_payload();\n        if (payload == \"stop\") {\n            ws_server_.stop_listening();\n            return;\n        }\n        ws_server_.send(hdl, payload, msg->get_opcode());\n    }\n\n    void run() {\n        ws_server_.listen(port_);\n        ws_server_.start_accept();\n        service_.run();\n    }\n\nprivate:\n    asio::io_service& service_;\n    int port_;\n    ws_echo_server ws_server_;\n};\n\nint main() {\n    asio::io_service service;\n    WebSocketServer server(service, 9002);\n    server.run();\n    return 0;\n}",
      "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <asio/io_service.hpp>\n#include <iostream>\n\ntypedef websocketpp::server<websocketpp::config::asio> ws_echo_server;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer(asio::io_service& service, int port)\n        : service_(service), port_(port) {\n        ws_server_.init_asio(&service_);\n        ws_server_.set_message_handler(bind(&WebSocketServer::on_message, this, ::_1, ::_2));\n        ws_server_.set_reuse_addr(true);\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, ws_echo_server::message_ptr msg) {\n        std::string payload = msg->get_payload();\n        if (payload == \"stop\") {\n            ws_server_.stop_listening();\n            return;\n        }\n        ws_server_.send(hdl, payload, msg->get_opcode());\n    }\n\n    void run() {\n        ws_server_.listen(port_);\n        ws_server_.start_accept();\n        service_.run();\n    }\n\nprivate:\n    asio::io_service& service_;\n    int port_;\n    ws_echo_server ws_server_;\n};\n\nint main() {\n    asio::io_service service;\n    WebSocketServer server(service, 9002);\n    server.run();\n    return 0;\n}",
      "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <asio/io_service.hpp>\n\ntypedef websocketpp::server<websocketpp::config::asio> ws_echo_server;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer(asio::io_service& service, int port) \n        : service_(service), port_(port), ws_server_() {\n        ws_server_.init_asio(&service_);\n        ws_server_.set_message_handler(bind(&WebSocketServer::on_message, this, ::_1, ::_2));\n        ws_server_.set_open_handler(bind(&WebSocketServer::on_open, this, ::_1));\n        ws_server_.set_close_handler(bind(&WebSocketServer::on_close, this, ::_1));\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, ws_echo_server::message_ptr msg) {\n        std::string payload = msg->get_payload();\n        if (payload == \"stop\") {\n            ws_server_.stop_listening();\n        } else {\n            ws_server_.send(hdl, payload, msg->get_opcode());\n        }\n    }\n\n    void on_open(websocketpp::connection_hdl hdl) {\n        // Handle new connection\n    }\n\n    void on_close(websocketpp::connection_hdl hdl) {\n        // Handle connection close\n    }\n\n    void run() {\n        ws_server_.listen(port_);\n        ws_server_.start_accept();\n        service_.run();\n    }\n\nprivate:\n    asio::io_service& service_;\n    int port_;\n    ws_echo_server ws_server_;\n};"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 41,
    "Instruction": "Task Description: Implement a WebSocket server in C++ using the WebSocket++ library that can handle multiple client connections and broadcast messages to all connected clients.\n\nClass Description: The `broadcast_server` class implements a WebSocket server that maintains a set of active connections and broadcasts incoming messages to all connected clients.\n\nAttributes:\n- m_server: [server] - The WebSocket++ server instance that handles network communication\n- m_connections: [con_list (std::set<connection_hdl>)] - A set of active client connections\n\nMethods:\n- broadcast_server() - [Constructor] -> [void] - Initializes the WebSocket++ server and sets up handlers for connection events\n- on_open(connection_hdl hdl) -> [void] - Handles new client connections by adding them to the connection set\n- on_close(connection_hdl hdl) -> [void] - Handles client disconnections by removing them from the connection set\n- on_message(connection_hdl hdl, server::message_ptr msg) -> [void] - Handles incoming messages by broadcasting them to all connected clients\n- run(uint16_t port) -> [void] - Starts the server listening on the specified port and begins accepting connections",
    "Canonical_solution": "#include <set>\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\nusing websocketpp::connection_hdl;\nusing websocketpp::lib::placeholders::_1;\nusing websocketpp::lib::placeholders::_2;\nusing websocketpp::lib::bind;\n\nclass broadcast_server {\npublic:\n    broadcast_server() {\n        m_server.init_asio();\n\n        m_server.set_open_handler(bind(&broadcast_server::on_open,this,::_1));\n        m_server.set_close_handler(bind(&broadcast_server::on_close,this,::_1));\n        m_server.set_message_handler(bind(&broadcast_server::on_message,this,::_1,::_2));\n    }\n\n    void on_open(connection_hdl hdl) {\n        m_connections.insert(hdl);\n    }\n\n    void on_close(connection_hdl hdl) {\n        m_connections.erase(hdl);\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        for (auto it : m_connections) {\n            m_server.send(it,msg);\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\nprivate:\n    typedef std::set<connection_hdl,std::owner_less<connection_hdl>> con_list;\n\n    server m_server;\n    con_list m_connections;\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 154,
    "matched_results": [
      "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <set>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef websocketpp::connection_hdl connection_hdl;\n\nclass broadcast_server {\npublic:\n    broadcast_server() {\n        m_server.init_asio();\n        m_server.set_open_handler(bind(&broadcast_server::on_open, this, ::_1));\n        m_server.set_close_handler(bind(&broadcast_server::on_close, this, ::_1));\n        m_server.set_message_handler(bind(&broadcast_server::on_message, this, ::_1, ::_2));\n    }\n\n    void on_open(connection_hdl hdl) {\n        m_connections.insert(hdl);\n    }\n\n    void on_close(connection_hdl hdl) {\n        m_connections.erase(hdl);\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        for (auto it : m_connections) {\n            m_server.send(it, msg->get_payload(), msg->get_opcode());\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    server m_server;\n    std::set<connection_hdl, std::owner_less<connection_hdl>> m_connections;\n};",
      "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <set>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef websocketpp::connection_hdl connection_hdl;\n\nclass broadcast_server {\npublic:\n    broadcast_server() {\n        m_server.init_asio();\n        m_server.set_open_handler(bind(&broadcast_server::on_open, this, ::_1));\n        m_server.set_close_handler(bind(&broadcast_server::on_close, this, ::_1));\n        m_server.set_message_handler(bind(&broadcast_server::on_message, this, ::_1, ::_2));\n    }\n\n    void on_open(connection_hdl hdl) {\n        m_connections.insert(hdl);\n    }\n\n    void on_close(connection_hdl hdl) {\n        m_connections.erase(hdl);\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        for (auto it : m_connections) {\n            m_server.send(it, msg->get_payload(), msg->get_opcode());\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    server m_server;\n    std::set<connection_hdl, std::owner_less<connection_hdl>> m_connections;\n};\n\nint main() {\n    broadcast_server server_instance;\n    server_instance.run(9002);\n    return 0;\n}",
      "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <set>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef websocketpp::connection_hdl connection_hdl;\n\nclass broadcast_server {\npublic:\n    broadcast_server() {\n        m_server.init_asio();\n        m_server.set_open_handler(bind(&broadcast_server::on_open, this, ::_1));\n        m_server.set_close_handler(bind(&broadcast_server::on_close, this, ::_1));\n        m_server.set_message_handler(bind(&broadcast_server::on_message, this, ::_1, ::_2));\n    }\n\n    void on_open(connection_hdl hdl) {\n        m_connections.insert(hdl);\n    }\n\n    void on_close(connection_hdl hdl) {\n        m_connections.erase(hdl);\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        for (auto it : m_connections) {\n            m_server.send(it, msg->get_payload(), msg->get_opcode());\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    server m_server;\n    std::set<connection_hdl, std::owner_less<connection_hdl>> m_connections;\n};\n\nint main() {\n    broadcast_server server_instance;\n    server_instance.run(9002);\n    return 0;\n}",
      "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <set>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef websocketpp::connection_hdl connection_hdl;\n\nclass broadcast_server {\npublic:\n    broadcast_server() {\n        m_server.init_asio();\n        m_server.set_open_handler(bind(&broadcast_server::on_open, this, ::_1));\n        m_server.set_close_handler(bind(&broadcast_server::on_close, this, ::_1));\n        m_server.set_message_handler(bind(&broadcast_server::on_message, this, ::_1, ::_2));\n    }\n\n    void on_open(connection_hdl hdl) {\n        m_connections.insert(hdl);\n    }\n\n    void on_close(connection_hdl hdl) {\n        m_connections.erase(hdl);\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        for (auto it : m_connections) {\n            m_server.send(it, msg->get_payload(), msg->get_opcode());\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    server m_server;\n    std::set<connection_hdl, std::owner_less<connection_hdl>> m_connections;\n};\n\nint main() {\n    broadcast_server server_instance;\n    server_instance.run(9002);\n    return 0;\n}",
      "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <set>\n#include <iostream>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef websocketpp::connection_hdl connection_hdl;\n\nclass broadcast_server {\npublic:\n    broadcast_server() {\n        m_server.init_asio();\n        m_server.set_open_handler(bind(&broadcast_server::on_open, this, ::_1));\n        m_server.set_close_handler(bind(&broadcast_server::on_close, this, ::_1));\n        m_server.set_message_handler(bind(&broadcast_server::on_message, this, ::_1, ::_2));\n    }\n\n    void on_open(connection_hdl hdl) {\n        m_connections.insert(hdl);\n    }\n\n    void on_close(connection_hdl hdl) {\n        m_connections.erase(hdl);\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        for (auto it : m_connections) {\n            m_server.send(it, msg->get_payload(), msg->get_opcode());\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    server m_server;\n    std::set<connection_hdl, std::owner_less<connection_hdl>> m_connections;\n};\n\nint main() {\n    broadcast_server server_instance;\n    server_instance.run(9002);\n    return 0;\n}",
      "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <set>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef websocketpp::connection_hdl connection_hdl;\n\nclass broadcast_server {\npublic:\n    broadcast_server() {\n        m_server.init_asio();\n        m_server.set_open_handler(bind(&broadcast_server::on_open, this, ::_1));\n        m_server.set_close_handler(bind(&broadcast_server::on_close, this, ::_1));\n        m_server.set_message_handler(bind(&broadcast_server::on_message, this, ::_1, ::_2));\n    }\n\n    void on_open(connection_hdl hdl) {\n        m_connections.insert(hdl);\n    }\n\n    void on_close(connection_hdl hdl) {\n        m_connections.erase(hdl);\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        for (auto it : m_connections) {\n            m_server.send(it, msg->get_payload(), msg->get_opcode());\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    server m_server;\n    std::set<connection_hdl, std::owner_less<connection_hdl>> m_connections;\n};\n\nint main() {\n    broadcast_server server_instance;\n    server_instance.run(9002);\n    return 0;\n}",
      "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <set>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\nusing websocketpp::connection_hdl;\n\nclass broadcast_server {\npublic:\n    broadcast_server() {\n        m_server.init_asio();\n        m_server.set_open_handler(bind(&broadcast_server::on_open, this, ::_1));\n        m_server.set_close_handler(bind(&broadcast_server::on_close, this, ::_1));\n        m_server.set_message_handler(bind(&broadcast_server::on_message, this, ::_1, ::_2));\n    }\n\n    void on_open(connection_hdl hdl) {\n        m_connections.insert(hdl);\n    }\n\n    void on_close(connection_hdl hdl) {\n        m_connections.erase(hdl);\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        for (auto it : m_connections) {\n            m_server.send(it, msg->get_payload(), msg->get_opcode());\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    server m_server;\n    std::set<connection_hdl, std::owner_less<connection_hdl>> m_connections;\n};\n\nint main() {\n    broadcast_server server_instance;\n    server_instance.run(9002);\n    return 0;\n}",
      "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <set>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\nusing websocketpp::connection_hdl;\n\nclass broadcast_server {\npublic:\n    broadcast_server() {\n        m_server.init_asio();\n        m_server.set_open_handler(bind(&broadcast_server::on_open, this, ::_1));\n        m_server.set_close_handler(bind(&broadcast_server::on_close, this, ::_1));\n        m_server.set_message_handler(bind(&broadcast_server::on_message, this, ::_1, ::_2));\n    }\n\n    void on_open(connection_hdl hdl) {\n        m_connections.insert(hdl);\n    }\n\n    void on_close(connection_hdl hdl) {\n        m_connections.erase(hdl);\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        for (auto it : m_connections) {\n            m_server.send(it, msg);\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    server m_server;\n    std::set<connection_hdl, std::owner_less<connection_hdl>> m_connections;\n};",
      "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <set>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef websocketpp::connection_hdl connection_hdl;\n\nclass broadcast_server {\npublic:\n    broadcast_server() {\n        m_server.init_asio();\n        m_server.set_open_handler(bind(&broadcast_server::on_open, this, ::_1));\n        m_server.set_close_handler(bind(&broadcast_server::on_close, this, ::_1));\n        m_server.set_message_handler(bind(&broadcast_server::on_message, this, ::_1, ::_2));\n    }\n\n    void on_open(connection_hdl hdl) {\n        m_connections.insert(hdl);\n    }\n\n    void on_close(connection_hdl hdl) {\n        m_connections.erase(hdl);\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        for (auto it : m_connections) {\n            m_server.send(it, msg->get_payload(), msg->get_opcode());\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    server m_server;\n    std::set<connection_hdl, std::owner_less<connection_hdl>> m_connections;\n};\n\nint main() {\n    broadcast_server server_instance;\n    server_instance.run(9002);\n    return 0;\n}",
      "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <set>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef websocketpp::connection_hdl connection_hdl;\n\nclass broadcast_server {\npublic:\n    broadcast_server() {\n        m_server.init_asio();\n        m_server.set_open_handler(bind(&broadcast_server::on_open, this, std::placeholders::_1));\n        m_server.set_close_handler(bind(&broadcast_server::on_close, this, std::placeholders::_1));\n        m_server.set_message_handler(bind(&broadcast_server::on_message, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void on_open(connection_hdl hdl) {\n        m_connections.insert(hdl);\n    }\n\n    void on_close(connection_hdl hdl) {\n        m_connections.erase(hdl);\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        for (auto it : m_connections) {\n            m_server.send(it, msg->get_payload(), msg->get_opcode());\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    server m_server;\n    std::set<connection_hdl, std::owner_less<connection_hdl>> m_connections;\n};\n\nint main() {\n    broadcast_server server_instance;\n    server_instance.run(9002);\n    return 0;\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 42,
    "Instruction": "Task Description: Implement a WebSocket server in C++ using the WebSocket++ library that can handle multiple client connections, process incoming messages, and support configurable threading for concurrent operations.\n\nClass Description: The WebSocketServer class encapsulates a WebSocket++ server implementation, providing methods to initialize, configure, and run the server with customizable port and threading settings.\n\nAttributes:\n- testee_server_: [server] - The WebSocket++ server instance that manages connections and message handling\n- port_: [short] - The port number on which the server listens for incoming connections\n- num_threads_: [size_t] - The number of threads to use for handling connections (1 for single-threaded mode)\n\nMethods:\n- WebSocketServer([short port = 9002], [size_t num_threads = 1]) -> [void] - Constructor that initializes the server with specified port and thread count (defaults to port 9002 and single-threaded)\n- run() -> [void] - Starts the WebSocket server, sets up message handlers, begins listening on the specified port, and manages the server's event loop(s)\n- on_message([websocketpp::connection_hdl hdl], [message_ptr msg]) -> [void] - Message handler that echoes received messages back to the client (private method)\n- on_socket_init([websocketpp::connection_hdl hdl], [boost::asio::ip::tcp::socket & s]) -> [void] - Socket initialization handler that enables TCP_NODELAY for reduced latency (private method)",
    "Canonical_solution": "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <websocketpp/extensions/permessage_deflate/enabled.hpp>\n#include <boost/asio/ip/tcp.hpp>\n#include <websocketpp/common/thread.hpp>\nusing websocketpp::lib::placeholders::_1;\nusing websocketpp::lib::placeholders::_2;\nusing websocketpp::lib::bind;\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef server::message_ptr message_ptr;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer(short port = 9002, size_t num_threads = 1) \n        : port_(port), num_threads_(num_threads) {}\n\n    void run() {\n        try {\n            testee_server_.clear_access_channels(websocketpp::log::alevel::all);\n            testee_server_.clear_error_channels(websocketpp::log::alevel::all);\n\n            testee_server_.init_asio();\n            testee_server_.set_reuse_addr(true);\n\n            testee_server_.set_message_handler(bind(&WebSocketServer::on_message, this, ::_1, ::_2));\n            testee_server_.set_socket_init_handler(bind(&WebSocketServer::on_socket_init, this, ::_1, ::_2));\n\n            testee_server_.set_listen_backlog(8192);\n            testee_server_.listen(port_);\n            testee_server_.start_accept();\n\n            if (num_threads_ == 1) {\n                testee_server_.run();\n            } else {\n                std::vector<websocketpp::lib::shared_ptr<websocketpp::lib::thread>> ts;\n                for (size_t i = 0; i < num_threads_; i++) {\n                    ts.push_back(websocketpp::lib::make_shared<websocketpp::lib::thread>(&server::run, &testee_server_));\n                }\n\n                for (size_t i = 0; i < num_threads_; i++) {\n                    ts[i]->join();\n                }\n            }\n        } catch (websocketpp::exception const & e) {\n            std::cout << \"exception: \" << e.what() << std::endl;\n        }\n    }\n\nprivate:\n    void on_message(websocketpp::connection_hdl hdl, message_ptr msg) {\n        testee_server_.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    void on_socket_init(websocketpp::connection_hdl, boost::asio::ip::tcp::socket & s) {\n        boost::asio::ip::tcp::no_delay option(true);\n        s.set_option(option);\n    }\n\n    server testee_server_;\n    short port_;\n    size_t num_threads_;\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 154,
    "matched_results": [
      "#include <websocketpp/config/asio.hpp>\n#include <websocketpp/server.hpp>\n#include <boost/asio.hpp>\n#include <iostream>\n#include <thread>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef websocketpp::config::asio::message_type::ptr message_ptr;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer(short port = 9002, size_t num_threads = 1)\n        : port_(port), num_threads_(num_threads) {\n        testee_server_.init_asio();\n        testee_server_.set_message_handler(bind(&WebSocketServer::on_message, this, ::_1, ::_2));\n        testee_server_.set_socket_init_handler(bind(&WebSocketServer::on_socket_init, this, ::_1, ::_2));\n    }\n\n    void run() {\n        testee_server_.listen(port_);\n        testee_server_.start_accept();\n\n        if (num_threads_ > 1) {\n            std::vector<std::thread> threads;\n            for (size_t i = 0; i < num_threads_; ++i) {\n                threads.push_back(std::thread([this]() { testee_server_.run(); }));\n            }\n            for (auto& t : threads) {\n                t.join();\n            }\n        } else {\n            testee_server_.run();\n        }\n    }\n\nprivate:\n    void on_message(websocketpp::connection_hdl hdl, message_ptr msg) {\n        testee_server_.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    void on_socket_init(websocketpp::connection_hdl hdl, boost::asio::ip::tcp::socket & s) {\n        boost::asio::ip::tcp::no_delay option(true);\n        s.set_option(option);\n    }\n\n    server testee_server_;\n    short port_;\n    size_t num_threads_;\n};\n\nint main() {\n    WebSocketServer server(9002, 4);\n    server.run();\n    return 0;\n}",
      "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <boost/asio.hpp>\n#include <thread>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef server::message_ptr message_ptr;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer(short port = 9002, size_t num_threads = 1)\n        : port_(port), num_threads_(num_threads) {\n        testee_server_.init_asio();\n        testee_server_.set_message_handler(bind(&WebSocketServer::on_message, this, ::_1, ::_2));\n        testee_server_.set_socket_init_handler(bind(&WebSocketServer::on_socket_init, this, ::_1, ::_2));\n    }\n\n    void run() {\n        testee_server_.listen(port_);\n        testee_server_.start_accept();\n\n        if (num_threads_ > 1) {\n            std::vector<std::thread> threads;\n            for (size_t i = 0; i < num_threads_; ++i) {\n                threads.push_back(std::thread([this]() { testee_server_.run(); }));\n            }\n            for (auto& thread : threads) {\n                thread.join();\n            }\n        } else {\n            testee_server_.run();\n        }\n    }\n\nprivate:\n    void on_message(websocketpp::connection_hdl hdl, message_ptr msg) {\n        testee_server_.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    void on_socket_init(websocketpp::connection_hdl hdl, boost::asio::ip::tcp::socket & s) {\n        boost::asio::ip::tcp::no_delay option(true);\n        s.set_option(option);\n    }\n\n    server testee_server_;\n    short port_;\n    size_t num_threads_;\n};",
      "#include <websocketpp/config/asio.hpp>\n#include <websocketpp/server.hpp>\n#include <boost/asio.hpp>\n#include <thread>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef websocketpp::config::asio::message_type::ptr message_ptr;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer(short port = 9002, size_t num_threads = 1)\n        : port_(port), num_threads_(num_threads) {\n        testee_server_.init_asio();\n        testee_server_.set_message_handler(bind(&WebSocketServer::on_message, this, ::_1, ::_2));\n        testee_server_.set_socket_init_handler(bind(&WebSocketServer::on_socket_init, this, ::_1, ::_2));\n    }\n\n    void run() {\n        testee_server_.listen(port_);\n        testee_server_.start_accept();\n        if (num_threads_ > 1) {\n            std::vector<std::thread> threads;\n            for (size_t i = 0; i < num_threads_; ++i) {\n                threads.push_back(std::thread([this]() { testee_server_.run(); }));\n            }\n            for (auto& thread : threads) {\n                thread.join();\n            }\n        } else {\n            testee_server_.run();\n        }\n    }\n\nprivate:\n    void on_message(websocketpp::connection_hdl hdl, message_ptr msg) {\n        testee_server_.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    void on_socket_init(websocketpp::connection_hdl hdl, boost::asio::ip::tcp::socket & s) {\n        boost::asio::ip::tcp::no_delay option(true);\n        s.set_option(option);\n    }\n\n    server testee_server_;\n    short port_;\n    size_t num_threads_;\n};",
      "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <boost/asio.hpp>\n#include <thread>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef server::message_ptr message_ptr;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer(short port = 9002, size_t num_threads = 1)\n        : port_(port), num_threads_(num_threads) {\n        testee_server_.init_asio();\n        testee_server_.set_message_handler(bind(&WebSocketServer::on_message, this, ::_1, ::_2));\n        testee_server_.set_socket_init_handler(bind(&WebSocketServer::on_socket_init, this, ::_1, ::_2));\n    }\n\n    void run() {\n        testee_server_.listen(port_);\n        testee_server_.start_accept();\n\n        if (num_threads_ > 1) {\n            std::vector<std::thread> threads;\n            for (size_t i = 0; i < num_threads_; ++i) {\n                threads.push_back(std::thread([this]() { testee_server_.run(); }));\n            }\n            for (auto& thread : threads) {\n                thread.join();\n            }\n        } else {\n            testee_server_.run();\n        }\n    }\n\nprivate:\n    void on_message(websocketpp::connection_hdl hdl, message_ptr msg) {\n        testee_server_.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    void on_socket_init(websocketpp::connection_hdl hdl, boost::asio::ip::tcp::socket & s) {\n        boost::asio::ip::tcp::no_delay option(true);\n        s.set_option(option);\n    }\n\n    server testee_server_;\n    short port_;\n    size_t num_threads_;\n};",
      "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <boost/asio.hpp>\n#include <thread>\n#include <vector>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef server::message_ptr message_ptr;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer(short port = 9002, size_t num_threads = 1)\n        : port_(port), num_threads_(num_threads) {\n        testee_server_.init_asio();\n        testee_server_.set_message_handler(bind(&WebSocketServer::on_message, this, ::_1, ::_2));\n        testee_server_.set_socket_init_handler(bind(&WebSocketServer::on_socket_init, this, ::_1, ::_2));\n    }\n\n    void run() {\n        testee_server_.listen(port_);\n        testee_server_.start_accept();\n\n        if (num_threads_ == 1) {\n            testee_server_.run();\n        } else {\n            std::vector<std::thread> threads;\n            for (size_t i = 0; i < num_threads_; ++i) {\n                threads.push_back(std::thread(&server::run, &testee_server_));\n            }\n            for (auto& t : threads) {\n                t.join();\n            }\n        }\n    }\n\nprivate:\n    void on_message(websocketpp::connection_hdl hdl, message_ptr msg) {\n        testee_server_.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    void on_socket_init(websocketpp::connection_hdl hdl, boost::asio::ip::tcp::socket & s) {\n        boost::asio::ip::tcp::no_delay option(true);\n        s.set_option(option);\n    }\n\n    server testee_server_;\n    short port_;\n    size_t num_threads_;\n};\n\nint main() {\n    WebSocketServer server(9002, 4);\n    server.run();\n    return 0;\n}",
      "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <boost/asio.hpp>\n#include <thread>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef server::message_ptr message_ptr;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer(short port = 9002, size_t num_threads = 1)\n        : port_(port), num_threads_(num_threads) {\n        testee_server_.init_asio();\n        testee_server_.set_message_handler(bind(&WebSocketServer::on_message, this, ::_1, ::_2));\n        testee_server_.set_socket_init_handler(bind(&WebSocketServer::on_socket_init, this, ::_1, ::_2));\n    }\n\n    void run() {\n        testee_server_.listen(port_);\n        testee_server_.start_accept();\n\n        if (num_threads_ > 1) {\n            std::vector<std::thread> threads;\n            for (size_t i = 0; i < num_threads_; ++i) {\n                threads.push_back(std::thread([this]() { testee_server_.run(); }));\n            }\n            for (auto& t : threads) {\n                t.join();\n            }\n        } else {\n            testee_server_.run();\n        }\n    }\n\nprivate:\n    void on_message(websocketpp::connection_hdl hdl, message_ptr msg) {\n        testee_server_.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    void on_socket_init(websocketpp::connection_hdl hdl, boost::asio::ip::tcp::socket & s) {\n        boost::asio::ip::tcp::no_delay option(true);\n        s.set_option(option);\n    }\n\n    server testee_server_;\n    short port_;\n    size_t num_threads_;\n};",
      "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <boost/asio.hpp>\n#include <thread>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef server::message_ptr message_ptr;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer(short port = 9002, size_t num_threads = 1)\n        : port_(port), num_threads_(num_threads) {\n        testee_server_.init_asio();\n        testee_server_.set_message_handler(\n            std::bind(&WebSocketServer::on_message, this, std::placeholders::_1, std::placeholders::_2));\n        testee_server_.set_socket_init_handler(\n            std::bind(&WebSocketServer::on_socket_init, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void run() {\n        testee_server_.listen(port_);\n        testee_server_.start_accept();\n\n        if (num_threads_ == 1) {\n            testee_server_.run();\n        } else {\n            std::vector<std::thread> threads;\n            for (size_t i = 0; i < num_threads_; ++i) {\n                threads.push_back(std::thread([this]() { testee_server_.run(); }));\n            }\n            for (auto& t : threads) {\n                t.join();\n            }\n        }\n    }\n\nprivate:\n    void on_message(websocketpp::connection_hdl hdl, message_ptr msg) {\n        testee_server_.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    void on_socket_init(websocketpp::connection_hdl hdl, boost::asio::ip::tcp::socket& s) {\n        boost::asio::ip::tcp::no_delay option(true);\n        s.set_option(option);\n    }\n\n    server testee_server_;\n    short port_;\n    size_t num_threads_;\n};",
      "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <boost/asio.hpp>\n#include <thread>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef server::message_ptr message_ptr;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer(short port = 9002, size_t num_threads = 1)\n        : port_(port), num_threads_(num_threads) {\n        testee_server_.init_asio();\n        testee_server_.set_message_handler(bind(&WebSocketServer::on_message, this, ::_1, ::_2));\n        testee_server_.set_socket_init_handler(bind(&WebSocketServer::on_socket_init, this, ::_1, ::_2));\n    }\n\n    void run() {\n        testee_server_.listen(port_);\n        testee_server_.start_accept();\n\n        if (num_threads_ > 1) {\n            std::vector<std::thread> threads;\n            for (size_t i = 0; i < num_threads_; ++i) {\n                threads.push_back(std::thread([this]() { testee_server_.run(); }));\n            }\n            for (auto& thread : threads) {\n                thread.join();\n            }\n        } else {\n            testee_server_.run();\n        }\n    }\n\nprivate:\n    void on_message(websocketpp::connection_hdl hdl, message_ptr msg) {\n        testee_server_.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    void on_socket_init(websocketpp::connection_hdl hdl, boost::asio::ip::tcp::socket & s) {\n        boost::asio::ip::tcp::no_delay option(true);\n        s.set_option(option);\n    }\n\n    server testee_server_;\n    short port_;\n    size_t num_threads_;\n};",
      "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <boost/asio.hpp>\n#include <thread>\n#include <vector>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef server::message_ptr message_ptr;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer(short port = 9002, size_t num_threads = 1)\n        : port_(port), num_threads_(num_threads) {\n        testee_server_.init_asio();\n        testee_server_.set_message_handler(bind(&WebSocketServer::on_message, this, ::_1, ::_2));\n        testee_server_.set_socket_init_handler(bind(&WebSocketServer::on_socket_init, this, ::_1, ::_2));\n    }\n\n    void run() {\n        testee_server_.listen(port_);\n        testee_server_.start_accept();\n\n        if (num_threads_ == 1) {\n            testee_server_.run();\n        } else {\n            std::vector<std::thread> threads;\n            for (size_t i = 0; i < num_threads_; ++i) {\n                threads.push_back(std::thread([this]() { testee_server_.run(); }));\n            }\n            for (auto& thread : threads) {\n                thread.join();\n            }\n        }\n    }\n\nprivate:\n    void on_message(websocketpp::connection_hdl hdl, message_ptr msg) {\n        testee_server_.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    void on_socket_init(websocketpp::connection_hdl, boost::asio::ip::tcp::socket & s) {\n        boost::asio::ip::tcp::no_delay option(true);\n        s.set_option(option);\n    }\n\n    server testee_server_;\n    short port_;\n    size_t num_threads_;\n};\n\nint main() {\n    WebSocketServer server(9002, 4);\n    server.run();\n    return 0;\n}",
      "#include <websocketpp/config/asio.hpp>\n#include <websocketpp/server.hpp>\n#include <boost/asio.hpp>\n#include <iostream>\n#include <thread>\n#include <vector>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef server::message_ptr message_ptr;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer(short port = 9002, size_t num_threads = 1)\n        : port_(port), num_threads_(num_threads) {\n        testee_server_.init_asio();\n        testee_server_.set_message_handler(\n            websocketpp::lib::bind(&WebSocketServer::on_message, this, \n                                   websocketpp::lib::placeholders::_1, \n                                   websocketpp::lib::placeholders::_2));\n        testee_server_.set_socket_init_handler(\n            websocketpp::lib::bind(&WebSocketServer::on_socket_init, this, \n                                   websocketpp::lib::placeholders::_1, \n                                   websocketpp::lib::placeholders::_2));\n    }\n\n    void run() {\n        testee_server_.listen(port_);\n        testee_server_.start_accept();\n\n        if (num_threads_ > 1) {\n            std::vector<std::thread> threads;\n            for (size_t i = 0; i < num_threads_; ++i) {\n                threads.push_back(std::thread([this]() {\n                    testee_server_.run();\n                }));\n            }\n            for (auto& t : threads) {\n                t.join();\n            }\n        } else {\n            testee_server_.run();\n        }\n    }\n\nprivate:\n    void on_message(websocketpp::connection_hdl hdl, message_ptr msg) {\n        testee_server_.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    void on_socket_init(websocketpp::connection_hdl hdl, boost::asio::ip::tcp::socket & s) {\n        boost::asio::ip::tcp::no_delay option(true);\n        s.set_option(option);\n    }\n\n    server testee_server_;\n    short port_;\n    size_t num_threads_;\n};"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 43,
    "Instruction": "Task Description: Implement a WebSocket server in C++ using the WebSocket++ library to handle client connections, manage sessions, and process incoming messages.\n\nClass Description: The `print_server` class implements a WebSocket server that tracks client connections with session IDs and names, and logs connection events and messages.\n\nAttributes:\n- m_next_sessionid: int - Tracks the next available session ID to assign to new connections.\n- m_server: server - The WebSocket++ server instance configured with custom connection data.\n\nMethods:\n- print_server() - Constructor - Initializes the server with ASIO, sets up handlers for connection open, close, and message events.\n- on_open(connection_hdl hdl) -> void - Handler for new connections. Assigns a session ID to the new connection.\n- on_close(connection_hdl hdl) -> void - Handler for connection closures. Logs the connection's name and session ID.\n- on_message(connection_hdl hdl, server::message_ptr msg) -> void - Handler for incoming messages. Sets the connection name if not set, otherwise logs the message along with the connection's name and session ID.\n- run(uint16_t port) -> void - Starts the server listening on the specified port, begins accepting connections, and runs the event loop.",
    "Canonical_solution": "#include <iostream>\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\nstruct connection_data {\n    int sessionid;\n    std::string name;\n};\n\nstruct custom_config : public websocketpp::config::asio {\n    typedef websocketpp::config::asio core;\n    typedef core::concurrency_type concurrency_type;\n    typedef core::request_type request_type;\n    typedef core::response_type response_type;\n    typedef core::message_type message_type;\n    typedef core::con_msg_manager_type con_msg_manager_type;\n    typedef core::endpoint_msg_manager_type endpoint_msg_manager_type;\n    typedef core::alog_type alog_type;\n    typedef core::elog_type elog_type;\n    typedef core::rng_type rng_type;\n    typedef core::transport_type transport_type;\n    typedef core::endpoint_base endpoint_base;\n    typedef connection_data connection_base;\n};\n\ntypedef websocketpp::server<custom_config> server;\ntypedef server::connection_ptr connection_ptr;\n\nusing websocketpp::connection_hdl;\nusing websocketpp::lib::placeholders::_1;\nusing websocketpp::lib::placeholders::_2;\nusing websocketpp::lib::bind;\n\nclass print_server {\npublic:\n    print_server() : m_next_sessionid(1) {\n        m_server.init_asio();\n        m_server.set_open_handler(bind(&print_server::on_open,this,::_1));\n        m_server.set_close_handler(bind(&print_server::on_close,this,::_1));\n        m_server.set_message_handler(bind(&print_server::on_message,this,::_1,::_2));\n    }\n    \n    void on_open(connection_hdl hdl) {\n        connection_ptr con = m_server.get_con_from_hdl(hdl);\n        con->sessionid = m_next_sessionid++;\n    }\n    \n    void on_close(connection_hdl hdl) {\n        connection_ptr con = m_server.get_con_from_hdl(hdl);\n        std::cout << \"Closing connection \" << con->name \n                  << \" with sessionid \" << con->sessionid << std::endl;\n    }\n    \n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        connection_ptr con = m_server.get_con_from_hdl(hdl);\n        \n        if (con->name.empty()) {\n            con->name = msg->get_payload();\n            std::cout << \"Setting name of connection with sessionid \" \n                      << con->sessionid << \" to \" << con->name << std::endl;\n        } else {\n            std::cout << \"Got a message from connection \" << con->name \n                      << \" with sessionid \" << con->sessionid << std::endl;\n        }\n    }\n    \n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\nprivate:\n    int m_next_sessionid;\n    server m_server;\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 154,
    "matched_results": [
      "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <iostream>\n#include <map>\n#include <string>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef websocketpp::connection_hdl connection_hdl;\n\nclass print_server {\npublic:\n    print_server() : m_next_sessionid(1) {\n        m_server.init_asio();\n        m_server.set_open_handler(bind(&print_server::on_open, this, ::_1));\n        m_server.set_close_handler(bind(&print_server::on_close, this, ::_1));\n        m_server.set_message_handler(bind(&print_server::on_message, this, ::_1, ::_2));\n    }\n\n    void on_open(connection_hdl hdl) {\n        int session_id = m_next_sessionid++;\n        m_connections[hdl] = session_data(session_id);\n        std::cout << \"Connection opened, session ID: \" << session_id << std::endl;\n    }\n\n    void on_close(connection_hdl hdl) {\n        session_data& data = m_connections[hdl];\n        std::cout << \"Connection closed, session ID: \" << data.session_id << \", name: \" << data.name << std::endl;\n        m_connections.erase(hdl);\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        session_data& data = m_connections[hdl];\n        if (data.name.empty()) {\n            data.name = msg->get_payload();\n            std::cout << \"Connection name set to: \" << data.name << \", session ID: \" << data.session_id << std::endl;\n        } else {\n            std::cout << \"Message received from \" << data.name << \" (session ID: \" << data.session_id << \"): \" << msg->get_payload() << std::endl;\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    struct session_data {\n        int session_id;\n        std::string name;\n        session_data(int id) : session_id(id) {}\n    };\n\n    int m_next_sessionid;\n    server m_server;\n    std::map<connection_hdl, session_data, std::owner_less<connection_hdl>> m_connections;\n};",
      "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <iostream>\n#include <map>\n#include <string>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef websocketpp::connection_hdl connection_hdl;\n\nclass print_server {\npublic:\n    print_server() : m_next_sessionid(1) {\n        m_server.init_asio();\n        m_server.set_open_handler(bind(&print_server::on_open, this, ::_1));\n        m_server.set_close_handler(bind(&print_server::on_close, this, ::_1));\n        m_server.set_message_handler(bind(&print_server::on_message, this, ::_1, ::_2));\n    }\n\n    void on_open(connection_hdl hdl) {\n        int session_id = m_next_sessionid++;\n        m_connections[hdl] = {session_id, \"\"};\n        std::cout << \"Connection opened, session ID: \" << session_id << std::endl;\n    }\n\n    void on_close(connection_hdl hdl) {\n        auto it = m_connections.find(hdl);\n        if (it != m_connections.end()) {\n            std::cout << \"Connection closed, session ID: \" << it->second.session_id << \", name: \" << it->second.name << std::endl;\n            m_connections.erase(it);\n        }\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        auto it = m_connections.find(hdl);\n        if (it != m_connections.end()) {\n            if (it->second.name.empty()) {\n                it->second.name = msg->get_payload();\n                std::cout << \"Connection name set to: \" << it->second.name << \", session ID: \" << it->second.session_id << std::endl;\n            } else {\n                std::cout << \"Message received from \" << it->second.name << \" (session ID: \" << it->second.session_id << \"): \" << msg->get_payload() << std::endl;\n            }\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    struct connection_data {\n        int session_id;\n        std::string name;\n    };\n\n    int m_next_sessionid;\n    server m_server;\n    std::map<connection_hdl, connection_data, std::owner_less<connection_hdl>> m_connections;\n};",
      "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <iostream>\n#include <map>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef websocketpp::connection_hdl connection_hdl;\n\nclass print_server {\npublic:\n    print_server() : m_next_sessionid(1) {\n        m_server.init_asio();\n        m_server.set_open_handler(bind(&print_server::on_open, this, ::_1));\n        m_server.set_close_handler(bind(&print_server::on_close, this, ::_1));\n        m_server.set_message_handler(bind(&print_server::on_message, this, ::_1, ::_2));\n    }\n\n    void on_open(connection_hdl hdl) {\n        int session_id = m_next_sessionid++;\n        m_connections[hdl] = session_data{session_id, \"\"};\n        std::cout << \"Connection opened, session ID: \" << session_id << std::endl;\n    }\n\n    void on_close(connection_hdl hdl) {\n        auto it = m_connections.find(hdl);\n        if (it != m_connections.end()) {\n            std::cout << \"Connection closed, session ID: \" << it->second.session_id << \", name: \" << it->second.name << std::endl;\n            m_connections.erase(it);\n        }\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        auto it = m_connections.find(hdl);\n        if (it != m_connections.end()) {\n            if (it->second.name.empty()) {\n                it->second.name = msg->get_payload();\n                std::cout << \"Connection name set, session ID: \" << it->second.session_id << \", name: \" << it->second.name << std::endl;\n            } else {\n                std::cout << \"Message received, session ID: \" << it->second.session_id << \", name: \" << it->second.name << \", message: \" << msg->get_payload() << std::endl;\n            }\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    struct session_data {\n        int session_id;\n        std::string name;\n    };\n\n    int m_next_sessionid;\n    server m_server;\n    std::map<connection_hdl, session_data, std::owner_less<connection_hdl>> m_connections;\n};",
      "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <iostream>\n#include <map>\n#include <string>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef websocketpp::connection_hdl connection_hdl;\n\nclass print_server {\npublic:\n    print_server() : m_next_sessionid(1) {\n        m_server.init_asio();\n        m_server.set_open_handler(bind(&print_server::on_open, this, ::_1));\n        m_server.set_close_handler(bind(&print_server::on_close, this, ::_1));\n        m_server.set_message_handler(bind(&print_server::on_message, this, ::_1, ::_2));\n    }\n\n    void on_open(connection_hdl hdl) {\n        int session_id = m_next_sessionid++;\n        m_connections[hdl] = {session_id, \"\"};\n        std::cout << \"Connection opened, session ID: \" << session_id << std::endl;\n    }\n\n    void on_close(connection_hdl hdl) {\n        auto it = m_connections.find(hdl);\n        if (it != m_connections.end()) {\n            std::cout << \"Connection closed, session ID: \" << it->second.session_id << \", name: \" << it->second.name << std::endl;\n            m_connections.erase(it);\n        }\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        auto it = m_connections.find(hdl);\n        if (it != m_connections.end()) {\n            if (it->second.name.empty()) {\n                it->second.name = msg->get_payload();\n                std::cout << \"Connection name set, session ID: \" << it->second.session_id << \", name: \" << it->second.name << std::endl;\n            } else {\n                std::cout << \"Message received, session ID: \" << it->second.session_id << \", name: \" << it->second.name << \", message: \" << msg->get_payload() << std::endl;\n            }\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    struct connection_data {\n        int session_id;\n        std::string name;\n    };\n\n    int m_next_sessionid;\n    server m_server;\n    std::map<connection_hdl, connection_data, std::owner_less<connection_hdl>> m_connections;\n};",
      "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <iostream>\n#include <map>\n#include <string>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef websocketpp::connection_hdl connection_hdl;\n\nclass print_server {\npublic:\n    print_server() : m_next_sessionid(1) {\n        m_server.init_asio();\n        m_server.set_open_handler(bind(&print_server::on_open, this, ::_1));\n        m_server.set_close_handler(bind(&print_server::on_close, this, ::_1));\n        m_server.set_message_handler(bind(&print_server::on_message, this, ::_1, ::_2));\n    }\n\n    void on_open(connection_hdl hdl) {\n        int session_id = m_next_sessionid++;\n        m_connections[hdl] = session_data(session_id, \"\");\n        std::cout << \"Connection opened, session ID: \" << session_id << std::endl;\n    }\n\n    void on_close(connection_hdl hdl) {\n        session_data& data = m_connections[hdl];\n        std::cout << \"Connection closed, session ID: \" << data.session_id << \", name: \" << data.name << std::endl;\n        m_connections.erase(hdl);\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        session_data& data = m_connections[hdl];\n        if (data.name.empty()) {\n            data.name = msg->get_payload();\n            std::cout << \"Connection name set, session ID: \" << data.session_id << \", name: \" << data.name << std::endl;\n        } else {\n            std::cout << \"Message received, session ID: \" << data.session_id << \", name: \" << data.name << \", message: \" << msg->get_payload() << std::endl;\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    struct session_data {\n        int session_id;\n        std::string name;\n        session_data(int id, const std::string& n) : session_id(id), name(n) {}\n    };\n\n    int m_next_sessionid;\n    server m_server;\n    std::map<connection_hdl, session_data, std::owner_less<connection_hdl>> m_connections;\n};",
      "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <iostream>\n#include <map>\n#include <string>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef websocketpp::connection_hdl connection_hdl;\n\nclass print_server {\npublic:\n    print_server() : m_next_sessionid(1) {\n        m_server.init_asio();\n        m_server.set_open_handler(bind(&print_server::on_open, this, ::_1));\n        m_server.set_close_handler(bind(&print_server::on_close, this, ::_1));\n        m_server.set_message_handler(bind(&print_server::on_message, this, ::_1, ::_2));\n    }\n\n    void on_open(connection_hdl hdl) {\n        int session_id = m_next_sessionid++;\n        m_connections[hdl] = session_data(session_id);\n        std::cout << \"Connection opened, session ID: \" << session_id << std::endl;\n    }\n\n    void on_close(connection_hdl hdl) {\n        session_data& data = m_connections[hdl];\n        std::cout << \"Connection closed, session ID: \" << data.session_id << \", name: \" << data.name << std::endl;\n        m_connections.erase(hdl);\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        session_data& data = m_connections[hdl];\n        if (data.name.empty()) {\n            data.name = msg->get_payload();\n            std::cout << \"Connection name set to: \" << data.name << \", session ID: \" << data.session_id << std::endl;\n        } else {\n            std::cout << \"Message received from \" << data.name << \" (session ID: \" << data.session_id << \"): \" << msg->get_payload() << std::endl;\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    struct session_data {\n        session_data(int id) : session_id(id) {}\n        int session_id;\n        std::string name;\n    };\n\n    int m_next_sessionid;\n    server m_server;\n    std::map<connection_hdl, session_data, std::owner_less<connection_hdl>> m_connections;\n};",
      "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <iostream>\n#include <map>\n#include <string>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\nusing websocketpp::connection_hdl;\n\nclass print_server {\npublic:\n    print_server() : m_next_sessionid(1) {\n        m_server.init_asio();\n        m_server.set_open_handler(bind(&print_server::on_open, this, ::_1));\n        m_server.set_close_handler(bind(&print_server::on_close, this, ::_1));\n        m_server.set_message_handler(bind(&print_server::on_message, this, ::_1, ::_2));\n    }\n\n    void on_open(connection_hdl hdl) {\n        session_data data;\n        data.session_id = m_next_sessionid++;\n        m_connections[hdl] = data;\n        std::cout << \"Connection opened, assigned session ID: \" << data.session_id << std::endl;\n    }\n\n    void on_close(connection_hdl hdl) {\n        auto it = m_connections.find(hdl);\n        if (it != m_connections.end()) {\n            std::cout << \"Connection closed, session ID: \" << it->second.session_id;\n            if (!it->second.name.empty()) {\n                std::cout << \", name: \" << it->second.name;\n            }\n            std::cout << std::endl;\n            m_connections.erase(it);\n        }\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        auto it = m_connections.find(hdl);\n        if (it != m_connections.end()) {\n            if (it->second.name.empty()) {\n                it->second.name = msg->get_payload();\n                std::cout << \"Connection with session ID \" << it->second.session_id << \" set name to \" << it->second.name << std::endl;\n            } else {\n                std::cout << \"Message from \" << it->second.name << \" (session ID \" << it->second.session_id << \"): \" << msg->get_payload() << std::endl;\n            }\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    struct session_data {\n        int session_id;\n        std::string name;\n    };\n\n    int m_next_sessionid;\n    server m_server;\n    std::map<connection_hdl, session_data, std::owner_less<connection_hdl>> m_connections;\n};\n\nint main() {\n    print_server server_instance;\n    server_instance.run(9002);\n    return 0;\n}",
      "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <iostream>\n#include <map>\n#include <string>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef websocketpp::connection_hdl connection_hdl;\n\nclass print_server {\npublic:\n    print_server() : m_next_sessionid(1) {\n        m_server.init_asio();\n        m_server.set_open_handler(bind(&print_server::on_open, this, ::_1));\n        m_server.set_close_handler(bind(&print_server::on_close, this, ::_1));\n        m_server.set_message_handler(bind(&print_server::on_message, this, ::_1, ::_2));\n    }\n\n    void on_open(connection_hdl hdl) {\n        int session_id = m_next_sessionid++;\n        m_connections[hdl] = connection_data(session_id);\n        std::cout << \"Connection opened, assigned session ID: \" << session_id << std::endl;\n    }\n\n    void on_close(connection_hdl hdl) {\n        auto it = m_connections.find(hdl);\n        if (it != m_connections.end()) {\n            std::cout << \"Connection closed, session ID: \" << it->second.session_id \n                      << \", name: \" << it->second.name << std::endl;\n            m_connections.erase(it);\n        }\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        auto it = m_connections.find(hdl);\n        if (it != m_connections.end()) {\n            if (it->second.name.empty()) {\n                it->second.name = msg->get_payload();\n                std::cout << \"Connection name set to: \" << it->second.name \n                          << \" for session ID: \" << it->second.session_id << std::endl;\n            } else {\n                std::cout << \"Received message from \" << it->second.name \n                          << \" (session ID: \" << it->second.session_id << \"): \" \n                          << msg->get_payload() << std::endl;\n            }\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    struct connection_data {\n        int session_id;\n        std::string name;\n\n        connection_data(int id) : session_id(id) {}\n    };\n\n    int m_next_sessionid;\n    server m_server;\n    std::map<connection_hdl, connection_data, std::owner_less<connection_hdl>> m_connections;\n};\n\nint main() {\n    print_server server_instance;\n    server_instance.run(9002);\n    return 0;\n}",
      "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <iostream>\n#include <map>\n#include <string>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\nusing websocketpp::connection_hdl;\n\nclass print_server {\npublic:\n    print_server() : m_next_sessionid(1) {\n        m_server.init_asio();\n        m_server.set_open_handler(bind(&print_server::on_open, this, ::_1));\n        m_server.set_close_handler(bind(&print_server::on_close, this, ::_1));\n        m_server.set_message_handler(bind(&print_server::on_message, this, ::_1, ::_2));\n    }\n\n    void on_open(connection_hdl hdl) {\n        int session_id = m_next_sessionid++;\n        m_connections[hdl] = {session_id, \"\"};\n        std::cout << \"Connection opened, assigned session ID: \" << session_id << std::endl;\n    }\n\n    void on_close(connection_hdl hdl) {\n        auto it = m_connections.find(hdl);\n        if (it != m_connections.end()) {\n            std::cout << \"Connection closed, session ID: \" << it->second.session_id << \", name: \" << it->second.name << std::endl;\n            m_connections.erase(it);\n        }\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        auto it = m_connections.find(hdl);\n        if (it != m_connections.end()) {\n            if (it->second.name.empty()) {\n                it->second.name = msg->get_payload();\n                std::cout << \"Set name for session ID \" << it->second.session_id << \": \" << it->second.name << std::endl;\n            } else {\n                std::cout << \"Message from \" << it->second.name << \" (session ID \" << it->second.session_id << \"): \" << msg->get_payload() << std::endl;\n            }\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    struct connection_data {\n        int session_id;\n        std::string name;\n    };\n\n    int m_next_sessionid;\n    server m_server;\n    std::map<connection_hdl, connection_data, std::owner_less<connection_hdl>> m_connections;\n};\n\nint main() {\n    print_server server_instance;\n    server_instance.run(9002);\n    return 0;\n}",
      "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <iostream>\n#include <map>\n#include <string>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef websocketpp::connection_hdl connection_hdl;\n\nclass print_server {\npublic:\n    print_server() : m_next_sessionid(1) {\n        m_server.init_asio();\n        m_server.set_open_handler(bind(&print_server::on_open, this, ::_1));\n        m_server.set_close_handler(bind(&print_server::on_close, this, ::_1));\n        m_server.set_message_handler(bind(&print_server::on_message, this, ::_1, ::_2));\n    }\n\n    void on_open(connection_hdl hdl) {\n        int session_id = m_next_sessionid++;\n        m_connections[hdl] = session_data(session_id);\n        std::cout << \"Connection opened, session ID: \" << session_id << std::endl;\n    }\n\n    void on_close(connection_hdl hdl) {\n        auto it = m_connections.find(hdl);\n        if (it != m_connections.end()) {\n            std::cout << \"Connection closed, session ID: \" << it->second.session_id << \", name: \" << it->second.name << std::endl;\n            m_connections.erase(it);\n        }\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        auto it = m_connections.find(hdl);\n        if (it != m_connections.end()) {\n            if (it->second.name.empty()) {\n                it->second.name = msg->get_payload();\n                std::cout << \"Connection name set to: \" << it->second.name << \", session ID: \" << it->second.session_id << std::endl;\n            } else {\n                std::cout << \"Message received from \" << it->second.name << \" (session ID: \" << it->second.session_id << \"): \" << msg->get_payload() << std::endl;\n            }\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    struct session_data {\n        int session_id;\n        std::string name;\n        session_data(int id) : session_id(id) {}\n    };\n\n    int m_next_sessionid;\n    server m_server;\n    std::map<connection_hdl, session_data, std::owner_less<connection_hdl>> m_connections;\n};"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 44,
    "Instruction": "Task Description: Implement a WebSocket server in C++ using the WebSocket++ library to handle client connections, manage session data, and process incoming messages.\n\nClass Description: The `print_server` class encapsulates a WebSocket server that tracks client connections with session IDs and names, and logs connection events and messages.\n\nAttributes:\n- m_next_sessionid: [int] - Tracks the next available session ID to assign to new connections.\n- m_server: [websocketpp::server<websocketpp::config::asio>] - The WebSocket++ server instance.\n- m_connections: [std::map<connection_hdl,connection_data,std::owner_less<connection_hdl>>] - Maps connection handles to their associated session data.\n\nMethods:\n- print_server(): [Constructor]() -> [void] - Initializes the server and sets up handlers for connection events.\n- on_open: [void]([connection_hdl hdl]) -> [void] - Handles new WebSocket connections by assigning a session ID and storing connection data.\n- on_close: [void]([connection_hdl hdl]) -> [void] - Handles connection closures by logging the event and removing the connection from tracking.\n- on_message: [void]([connection_hdl hdl, server::message_ptr msg]) -> [void] - Processes incoming messages, either setting the client's name or logging received messages.\n- get_data_from_hdl: [connection_data&]([connection_hdl hdl]) -> [connection_data&] - Retrieves connection data for a given handle, throwing an exception if not found.\n- run: [void]([uint16_t port]) -> [void] - Starts the server listening on the specified port and begins accepting connections.",
    "Canonical_solution": "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <map>\n#include <exception>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\nusing websocketpp::connection_hdl;\nusing websocketpp::lib::placeholders::_1;\nusing websocketpp::lib::placeholders::_2;\nusing websocketpp::lib::bind;\n\nstruct connection_data {\n    int sessionid;\n    std::string name;\n};\n\nclass print_server {\npublic:\n    print_server() : m_next_sessionid(1) {\n        m_server.init_asio();\n\n        m_server.set_open_handler(bind(&print_server::on_open,this,::_1));\n        m_server.set_close_handler(bind(&print_server::on_close,this,::_1));\n        m_server.set_message_handler(bind(&print_server::on_message,this,::_1,::_2));\n    }\n\n    void on_open(connection_hdl hdl) {\n        connection_data data;\n\n        data.sessionid = m_next_sessionid++;\n        data.name.clear();\n\n        m_connections[hdl] = data;\n    }\n\n    void on_close(connection_hdl hdl) {\n        connection_data& data = get_data_from_hdl(hdl);\n\n        std::cout << \"Closing connection \" << data.name\n                  << \" with sessionid \" << data.sessionid << std::endl;\n\n        m_connections.erase(hdl);\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        connection_data& data = get_data_from_hdl(hdl);\n\n        if (data.name.empty()) {\n            data.name = msg->get_payload();\n            std::cout << \"Setting name of connection with sessionid \"\n                      << data.sessionid << \" to \" << data.name << std::endl;\n        } else {\n            std::cout << \"Got a message from connection \" << data.name\n                      << \" with sessionid \" << data.sessionid << std::endl;\n        }\n    }\n\n    connection_data& get_data_from_hdl(connection_hdl hdl) {\n        auto it = m_connections.find(hdl);\n\n        if (it == m_connections.end()) {\n            throw std::invalid_argument(\"No data available for session\");\n        }\n\n        return it->second;\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    typedef std::map<connection_hdl,connection_data,std::owner_less<connection_hdl>> con_list;\n\n    int m_next_sessionid;\n    server m_server;\n    con_list m_connections;\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 154,
    "matched_results": [
      "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <iostream>\n#include <map>\n#include <string>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef websocketpp::connection_hdl connection_hdl;\n\nstruct connection_data {\n    int session_id;\n    std::string name;\n};\n\nclass print_server {\npublic:\n    print_server() : m_next_sessionid(1) {\n        m_server.init_asio();\n        m_server.set_open_handler(bind(&print_server::on_open, this, ::_1));\n        m_server.set_close_handler(bind(&print_server::on_close, this, ::_1));\n        m_server.set_message_handler(bind(&print_server::on_message, this, ::_1, ::_2));\n    }\n\n    void on_open(connection_hdl hdl) {\n        connection_data data;\n        data.session_id = m_next_sessionid++;\n        m_connections[hdl] = data;\n        std::cout << \"Connection opened, session ID: \" << data.session_id << std::endl;\n    }\n\n    void on_close(connection_hdl hdl) {\n        connection_data& data = get_data_from_hdl(hdl);\n        std::cout << \"Connection closed, session ID: \" << data.session_id << std::endl;\n        m_connections.erase(hdl);\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        connection_data& data = get_data_from_hdl(hdl);\n        std::string payload = msg->get_payload();\n        if (payload.substr(0, 5) == \"name:\") {\n            data.name = payload.substr(5);\n            std::cout << \"Session \" << data.session_id << \" set name to \" << data.name << std::endl;\n        } else {\n            std::cout << \"Received message from session \" << data.session_id << \": \" << payload << std::endl;\n        }\n    }\n\n    connection_data& get_data_from_hdl(connection_hdl hdl) {\n        auto it = m_connections.find(hdl);\n        if (it == m_connections.end()) {\n            throw std::runtime_error(\"No data found for connection\");\n        }\n        return it->second;\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    int m_next_sessionid;\n    server m_server;\n    std::map<connection_hdl, connection_data, std::owner_less<connection_hdl>> m_connections;\n};",
      "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <map>\n#include <string>\n#include <iostream>\n\nusing websocketpp::connection_hdl;\n\nstruct connection_data {\n    int session_id;\n    std::string name;\n};\n\nclass print_server {\npublic:\n    print_server() : m_next_sessionid(1) {\n        m_server.init_asio();\n        m_server.set_open_handler(bind(&print_server::on_open, this, ::_1));\n        m_server.set_close_handler(bind(&print_server::on_close, this, ::_1));\n        m_server.set_message_handler(bind(&print_server::on_message, this, ::_1, ::_2));\n    }\n\n    void on_open(connection_hdl hdl) {\n        connection_data data;\n        data.session_id = m_next_sessionid++;\n        m_connections[hdl] = data;\n        std::cout << \"Connection opened, session ID: \" << data.session_id << std::endl;\n    }\n\n    void on_close(connection_hdl hdl) {\n        connection_data& data = get_data_from_hdl(hdl);\n        std::cout << \"Connection closed, session ID: \" << data.session_id << std::endl;\n        m_connections.erase(hdl);\n    }\n\n    void on_message(connection_hdl hdl, websocketpp::server<websocketpp::config::asio>::message_ptr msg) {\n        connection_data& data = get_data_from_hdl(hdl);\n        std::string payload = msg->get_payload();\n        if (payload.substr(0, 5) == \"name:\") {\n            data.name = payload.substr(5);\n            std::cout << \"Session \" << data.session_id << \" set name to \" << data.name << std::endl;\n        } else {\n            std::cout << \"Received message from session \" << data.session_id << \": \" << payload << std::endl;\n        }\n    }\n\n    connection_data& get_data_from_hdl(connection_hdl hdl) {\n        auto it = m_connections.find(hdl);\n        if (it == m_connections.end()) {\n            throw std::runtime_error(\"No data found for connection\");\n        }\n        return it->second;\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    int m_next_sessionid;\n    websocketpp::server<websocketpp::config::asio> m_server;\n    std::map<connection_hdl, connection_data, std::owner_less<connection_hdl>> m_connections;\n};",
      "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <iostream>\n#include <map>\n#include <string>\n\nusing websocketpp::connection_hdl;\nusing websocketpp::server;\n\nstruct connection_data {\n    int session_id;\n    std::string name;\n};\n\nclass print_server {\npublic:\n    print_server() : m_next_sessionid(1) {\n        m_server.init_asio();\n        m_server.set_open_handler(bind(&print_server::on_open, this, std::placeholders::_1));\n        m_server.set_close_handler(bind(&print_server::on_close, this, std::placeholders::_1));\n        m_server.set_message_handler(bind(&print_server::on_message, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void on_open(connection_hdl hdl) {\n        connection_data data;\n        data.session_id = m_next_sessionid++;\n        m_connections[hdl] = data;\n        std::cout << \"Client connected with session ID \" << data.session_id << std::endl;\n    }\n\n    void on_close(connection_hdl hdl) {\n        auto it = m_connections.find(hdl);\n        if (it != m_connections.end()) {\n            std::cout << \"Client with session ID \" << it->second.session_id << \" disconnected\" << std::endl;\n            m_connections.erase(it);\n        }\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        auto it = m_connections.find(hdl);\n        if (it != m_connections.end()) {\n            connection_data& data = it->second;\n            if (data.name.empty()) {\n                data.name = msg->get_payload();\n                std::cout << \"Client with session ID \" << data.session_id << \" set name to \" << data.name << std::endl;\n            } else {\n                std::cout << \"Message from \" << data.name << \": \" << msg->get_payload() << std::endl;\n            }\n        }\n    }\n\n    connection_data& get_data_from_hdl(connection_hdl hdl) {\n        auto it = m_connections.find(hdl);\n        if (it == m_connections.end()) {\n            throw std::runtime_error(\"No data found for the given handle\");\n        }\n        return it->second;\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    int m_next_sessionid;\n    server<websocketpp::config::asio> m_server;\n    std::map<connection_hdl, connection_data, std::owner_less<connection_hdl>> m_connections;\n};\n\nint main() {\n    print_server server;\n    server.run(9002);\n    return 0;\n}",
      "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <iostream>\n#include <map>\n#include <string>\n\nusing websocketpp::connection_hdl;\nusing websocketpp::server;\n\nstruct connection_data {\n    int session_id;\n    std::string name;\n};\n\nclass print_server {\npublic:\n    print_server() : m_next_sessionid(1) {\n        m_server.init_asio();\n        m_server.set_open_handler(bind(&print_server::on_open, this, ::_1));\n        m_server.set_close_handler(bind(&print_server::on_close, this, ::_1));\n        m_server.set_message_handler(bind(&print_server::on_message, this, ::_1, ::_2));\n    }\n\n    void on_open(connection_hdl hdl) {\n        connection_data data;\n        data.session_id = m_next_sessionid++;\n        m_connections[hdl] = data;\n        std::cout << \"Connection opened, session ID: \" << data.session_id << std::endl;\n    }\n\n    void on_close(connection_hdl hdl) {\n        connection_data& data = get_data_from_hdl(hdl);\n        std::cout << \"Connection closed, session ID: \" << data.session_id << std::endl;\n        m_connections.erase(hdl);\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        connection_data& data = get_data_from_hdl(hdl);\n        std::string payload = msg->get_payload();\n        if (payload.substr(0, 5) == \"name:\") {\n            data.name = payload.substr(5);\n            std::cout << \"Session \" << data.session_id << \" set name to \" << data.name << std::endl;\n        } else {\n            std::cout << \"Received message from session \" << data.session_id << \": \" << payload << std::endl;\n        }\n    }\n\n    connection_data& get_data_from_hdl(connection_hdl hdl) {\n        auto it = m_connections.find(hdl);\n        if (it == m_connections.end()) {\n            throw std::runtime_error(\"No data found for connection\");\n        }\n        return it->second;\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    int m_next_sessionid;\n    server<websocketpp::config::asio> m_server;\n    std::map<connection_hdl, connection_data, std::owner_less<connection_hdl>> m_connections;\n};",
      "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <iostream>\n#include <map>\n#include <string>\n\ntypedef websocketpp::connection_hdl connection_hdl;\n\nstruct connection_data {\n    int session_id;\n    std::string name;\n};\n\nclass print_server {\npublic:\n    print_server() : m_next_sessionid(1) {\n        m_server.init_asio();\n        m_server.set_open_handler(bind(&print_server::on_open, this, ::_1));\n        m_server.set_close_handler(bind(&print_server::on_close, this, ::_1));\n        m_server.set_message_handler(bind(&print_server::on_message, this, ::_1, ::_2));\n    }\n\n    void on_open(connection_hdl hdl) {\n        connection_data data;\n        data.session_id = m_next_sessionid++;\n        data.name = \"Guest\";\n        m_connections[hdl] = data;\n        std::cout << \"Connection opened, session ID: \" << data.session_id << std::endl;\n    }\n\n    void on_close(connection_hdl hdl) {\n        connection_data& data = get_data_from_hdl(hdl);\n        std::cout << \"Connection closed, session ID: \" << data.session_id << std::endl;\n        m_connections.erase(hdl);\n    }\n\n    void on_message(connection_hdl hdl, websocketpp::server<websocketpp::config::asio>::message_ptr msg) {\n        connection_data& data = get_data_from_hdl(hdl);\n        std::string payload = msg->get_payload();\n        if (payload.substr(0, 5) == \"name:\") {\n            data.name = payload.substr(5);\n            std::cout << \"Session \" << data.session_id << \" set name to \" << data.name << std::endl;\n        } else {\n            std::cout << \"Session \" << data.session_id << \" (\" << data.name << \") sent message: \" << payload << std::endl;\n        }\n    }\n\n    connection_data& get_data_from_hdl(connection_hdl hdl) {\n        auto it = m_connections.find(hdl);\n        if (it == m_connections.end()) {\n            throw std::invalid_argument(\"No data found for this connection\");\n        }\n        return it->second;\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    int m_next_sessionid;\n    websocketpp::server<websocketpp::config::asio> m_server;\n    std::map<connection_hdl, connection_data, std::owner_less<connection_hdl>> m_connections;\n};\n\nint main() {\n    print_server server;\n    server.run(9002);\n    return 0;\n}",
      "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <iostream>\n#include <map>\n#include <string>\n\nusing websocketpp::connection_hdl;\nusing websocketpp::lib::bind;\nusing websocketpp::lib::placeholders::_1;\nusing websocketpp::lib::placeholders::_2;\n\nstruct connection_data {\n    int session_id;\n    std::string name;\n};\n\nclass print_server {\npublic:\n    print_server() : m_next_sessionid(1) {\n        m_server.init_asio();\n        m_server.set_open_handler(bind(&print_server::on_open, this, _1));\n        m_server.set_close_handler(bind(&print_server::on_close, this, _1));\n        m_server.set_message_handler(bind(&print_server::on_message, this, _1, _2));\n    }\n\n    void on_open(connection_hdl hdl) {\n        connection_data data;\n        data.session_id = m_next_sessionid++;\n        m_connections[hdl] = data;\n        std::cout << \"Connection opened, assigned session ID: \" << data.session_id << std::endl;\n    }\n\n    void on_close(connection_hdl hdl) {\n        connection_data& data = get_data_from_hdl(hdl);\n        std::cout << \"Connection closed, session ID: \" << data.session_id << std::endl;\n        m_connections.erase(hdl);\n    }\n\n    void on_message(connection_hdl hdl, websocketpp::server<websocketpp::config::asio>::message_ptr msg) {\n        connection_data& data = get_data_from_hdl(hdl);\n        std::string payload = msg->get_payload();\n        \n        if (payload.substr(0, 5) == \"name:\") {\n            data.name = payload.substr(5);\n            std::cout << \"Session \" << data.session_id << \" set name to: \" << data.name << std::endl;\n        } else {\n            std::cout << \"Received message from session \" << data.session_id << \": \" << payload << std::endl;\n        }\n    }\n\n    connection_data& get_data_from_hdl(connection_hdl hdl) {\n        auto it = m_connections.find(hdl);\n        if (it == m_connections.end()) {\n            throw std::runtime_error(\"No data found for connection\");\n        }\n        return it->second;\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    int m_next_sessionid;\n    websocketpp::server<websocketpp::config::asio> m_server;\n    std::map<connection_hdl, connection_data, std::owner_less<connection_hdl>> m_connections;\n};\n\nint main() {\n    print_server server;\n    server.run(9002);\n    return 0;\n}",
      "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <iostream>\n#include <map>\n#include <string>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef websocketpp::connection_hdl connection_hdl;\n\nstruct connection_data {\n    int session_id;\n    std::string name;\n};\n\nclass print_server {\npublic:\n    print_server() : m_next_sessionid(1) {\n        m_server.init_asio();\n        m_server.set_open_handler(bind(&print_server::on_open, this, ::_1));\n        m_server.set_close_handler(bind(&print_server::on_close, this, ::_1));\n        m_server.set_message_handler(bind(&print_server::on_message, this, ::_1, ::_2));\n    }\n\n    void on_open(connection_hdl hdl) {\n        connection_data data;\n        data.session_id = m_next_sessionid++;\n        m_connections[hdl] = data;\n        std::cout << \"Connection opened, session ID: \" << data.session_id << std::endl;\n    }\n\n    void on_close(connection_hdl hdl) {\n        connection_data& data = get_data_from_hdl(hdl);\n        std::cout << \"Connection closed, session ID: \" << data.session_id << std::endl;\n        m_connections.erase(hdl);\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        connection_data& data = get_data_from_hdl(hdl);\n        std::string payload = msg->get_payload();\n        if (payload.substr(0, 5) == \"name:\") {\n            data.name = payload.substr(5);\n            std::cout << \"Session \" << data.session_id << \" set name to \" << data.name << std::endl;\n        } else {\n            std::cout << \"Session \" << data.session_id << \" (\" << data.name << \") sent message: \" << payload << std::endl;\n        }\n    }\n\n    connection_data& get_data_from_hdl(connection_hdl hdl) {\n        auto it = m_connections.find(hdl);\n        if (it == m_connections.end()) {\n            throw std::runtime_error(\"No data found for connection\");\n        }\n        return it->second;\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    int m_next_sessionid;\n    server m_server;\n    std::map<connection_hdl, connection_data, std::owner_less<connection_hdl>> m_connections;\n};",
      "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <iostream>\n#include <map>\n#include <string>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef websocketpp::connection_hdl connection_hdl;\n\nstruct connection_data {\n    int session_id;\n    std::string name;\n};\n\nclass print_server {\npublic:\n    print_server() : m_next_sessionid(1) {\n        m_server.init_asio();\n        m_server.set_open_handler(bind(&print_server::on_open, this, ::_1));\n        m_server.set_close_handler(bind(&print_server::on_close, this, ::_1));\n        m_server.set_message_handler(bind(&print_server::on_message, this, ::_1, ::_2));\n    }\n\n    void on_open(connection_hdl hdl) {\n        connection_data data;\n        data.session_id = m_next_sessionid++;\n        m_connections[hdl] = data;\n        std::cout << \"Connection opened, session ID: \" << data.session_id << std::endl;\n    }\n\n    void on_close(connection_hdl hdl) {\n        connection_data& data = get_data_from_hdl(hdl);\n        std::cout << \"Connection closed, session ID: \" << data.session_id << std::endl;\n        m_connections.erase(hdl);\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        connection_data& data = get_data_from_hdl(hdl);\n        std::string payload = msg->get_payload();\n        if (payload.substr(0, 5) == \"name:\") {\n            data.name = payload.substr(5);\n            std::cout << \"Session \" << data.session_id << \" set name to \" << data.name << std::endl;\n        } else {\n            std::cout << \"Session \" << data.session_id << \" (\" << data.name << \") sent message: \" << payload << std::endl;\n        }\n    }\n\n    connection_data& get_data_from_hdl(connection_hdl hdl) {\n        auto it = m_connections.find(hdl);\n        if (it == m_connections.end()) {\n            throw std::runtime_error(\"No data found for this connection\");\n        }\n        return it->second;\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    int m_next_sessionid;\n    server m_server;\n    std::map<connection_hdl, connection_data, std::owner_less<connection_hdl>> m_connections;\n};",
      "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <iostream>\n#include <map>\n#include <string>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef websocketpp::connection_hdl connection_hdl;\n\nstruct connection_data {\n    int session_id;\n    std::string name;\n};\n\nclass print_server {\npublic:\n    print_server() : m_next_sessionid(1) {\n        m_server.init_asio();\n        m_server.set_open_handler(bind(&print_server::on_open, this, ::_1));\n        m_server.set_close_handler(bind(&print_server::on_close, this, ::_1));\n        m_server.set_message_handler(bind(&print_server::on_message, this, ::_1, ::_2));\n    }\n\n    void on_open(connection_hdl hdl) {\n        connection_data data;\n        data.session_id = m_next_sessionid++;\n        m_connections[hdl] = data;\n        std::cout << \"Connection opened, session ID: \" << data.session_id << std::endl;\n    }\n\n    void on_close(connection_hdl hdl) {\n        connection_data& data = get_data_from_hdl(hdl);\n        std::cout << \"Connection closed, session ID: \" << data.session_id << std::endl;\n        m_connections.erase(hdl);\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        connection_data& data = get_data_from_hdl(hdl);\n        std::string payload = msg->get_payload();\n        if (payload.substr(0, 5) == \"name:\") {\n            data.name = payload.substr(5);\n            std::cout << \"Session \" << data.session_id << \" set name to \" << data.name << std::endl;\n        } else {\n            std::cout << \"Session \" << data.session_id << \" (\" << data.name << \") sent message: \" << payload << std::endl;\n        }\n    }\n\n    connection_data& get_data_from_hdl(connection_hdl hdl) {\n        auto it = m_connections.find(hdl);\n        if (it == m_connections.end()) {\n            throw std::runtime_error(\"No data found for connection\");\n        }\n        return it->second;\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    int m_next_sessionid;\n    server m_server;\n    std::map<connection_hdl, connection_data, std::owner_less<connection_hdl>> m_connections;\n};",
      "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <iostream>\n#include <map>\n#include <string>\n\nusing websocketpp::connection_hdl;\nusing websocketpp::server;\n\nstruct connection_data {\n    int session_id;\n    std::string name;\n};\n\nclass print_server {\npublic:\n    print_server() : m_next_sessionid(1) {\n        m_server.init_asio();\n        m_server.set_open_handler(bind(&print_server::on_open, this, ::_1));\n        m_server.set_close_handler(bind(&print_server::on_close, this, ::_1));\n        m_server.set_message_handler(bind(&print_server::on_message, this, ::_1, ::_2));\n    }\n\n    void on_open(connection_hdl hdl) {\n        connection_data data;\n        data.session_id = m_next_sessionid++;\n        m_connections[hdl] = data;\n        std::cout << \"Client connected, assigned session ID: \" << data.session_id << std::endl;\n    }\n\n    void on_close(connection_hdl hdl) {\n        connection_data& data = get_data_from_hdl(hdl);\n        std::cout << \"Client disconnected, session ID: \" << data.session_id << std::endl;\n        m_connections.erase(hdl);\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        connection_data& data = get_data_from_hdl(hdl);\n        if (data.name.empty()) {\n            data.name = msg->get_payload();\n            std::cout << \"Client \" << data.session_id << \" set name to: \" << data.name << std::endl;\n        } else {\n            std::cout << \"Received message from \" << data.name << \": \" << msg->get_payload() << std::endl;\n        }\n    }\n\n    connection_data& get_data_from_hdl(connection_hdl hdl) {\n        auto it = m_connections.find(hdl);\n        if (it == m_connections.end()) {\n            throw std::runtime_error(\"No data found for connection\");\n        }\n        return it->second;\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    int m_next_sessionid;\n    server<websocketpp::config::asio> m_server;\n    std::map<connection_hdl, connection_data, std::owner_less<connection_hdl>> m_connections;\n};"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 45,
    "Instruction": "Task Description: Implement a WebSocket server in C++ using the WebSocket++ library that can handle multiple client connections and broadcast messages to all connected clients.\n\nClass Description: The `broadcast_server` class implements a WebSocket server that maintains a set of active connections and broadcasts incoming messages to all connected clients.\n\nAttributes:\n- m_server: [server] - The WebSocket++ server instance that handles network communication.\n- m_connections: [con_list] - A set of active connection handles to keep track of connected clients.\n\nMethods:\n- broadcast_server(): [Constructor]() -> [void] - Initializes the WebSocket++ server and sets up handlers for connection events (open, close, message).\n- on_open: [void]([connection_hdl hdl]) -> [void] - Handler for new client connections; adds the connection handle to the active connections set.\n- on_close: [void]([connection_hdl hdl]) -> [void] - Handler for client disconnections; removes the connection handle from the active connections set.\n- on_message: [void]([connection_hdl hdl, server::message_ptr msg]) -> [void] - Handler for incoming messages; broadcasts the received message to all connected clients.\n- run: [void]([uint16_t port]) -> [void] - Starts the server, begins listening on the specified port, and enters the event loop to handle connections and messages.",
    "Canonical_solution": "#include <set>\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\nusing websocketpp::connection_hdl;\nusing websocketpp::lib::placeholders::_1;\nusing websocketpp::lib::placeholders::_2;\nusing websocketpp::lib::bind;\n\nclass broadcast_server {\npublic:\n    broadcast_server() {\n        m_server.init_asio();\n                \n        m_server.set_open_handler(bind(&broadcast_server::on_open,this,::_1));\n        m_server.set_close_handler(bind(&broadcast_server::on_close,this,::_1));\n        m_server.set_message_handler(bind(&broadcast_server::on_message,this,::_1,::_2));\n    }\n    \n    void on_open(connection_hdl hdl) {\n        m_connections.insert(hdl);\n    }\n    \n    void on_close(connection_hdl hdl) {\n        m_connections.erase(hdl);\n    }\n    \n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        for (auto it : m_connections) {\n            m_server.send(it,msg);\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\nprivate:\n    typedef std::set<connection_hdl,std::owner_less<connection_hdl>> con_list;\n\n    server m_server;\n    con_list m_connections;\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 154,
    "matched_results": [
      "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <set>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef websocketpp::connection_hdl connection_hdl;\ntypedef std::set<connection_hdl, std::owner_less<connection_hdl>> con_list;\n\nclass broadcast_server {\npublic:\n    broadcast_server() {\n        m_server.init_asio();\n        m_server.set_open_handler(bind(&broadcast_server::on_open, this, std::placeholders::_1));\n        m_server.set_close_handler(bind(&broadcast_server::on_close, this, std::placeholders::_1));\n        m_server.set_message_handler(bind(&broadcast_server::on_message, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void on_open(connection_hdl hdl) {\n        m_connections.insert(hdl);\n    }\n\n    void on_close(connection_hdl hdl) {\n        m_connections.erase(hdl);\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        for (auto it : m_connections) {\n            m_server.send(it, msg->get_payload(), msg->get_opcode());\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    server m_server;\n    con_list m_connections;\n};\n\nint main() {\n    broadcast_server server_instance;\n    server_instance.run(9002);\n    return 0;\n}",
      "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <set>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef websocketpp::connection_hdl connection_hdl;\n\nclass broadcast_server {\npublic:\n    broadcast_server() {\n        m_server.init_asio();\n        m_server.set_open_handler(bind(&broadcast_server::on_open, this, ::_1));\n        m_server.set_close_handler(bind(&broadcast_server::on_close, this, ::_1));\n        m_server.set_message_handler(bind(&broadcast_server::on_message, this, ::_1, ::_2));\n    }\n\n    void on_open(connection_hdl hdl) {\n        m_connections.insert(hdl);\n    }\n\n    void on_close(connection_hdl hdl) {\n        m_connections.erase(hdl);\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        for (auto it : m_connections) {\n            m_server.send(it, msg->get_payload(), msg->get_opcode());\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    server m_server;\n    std::set<connection_hdl, std::owner_less<connection_hdl>> m_connections;\n};",
      "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <set>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef websocketpp::connection_hdl connection_hdl;\ntypedef std::set<connection_hdl, std::owner_less<connection_hdl>> con_list;\n\nclass broadcast_server {\npublic:\n    broadcast_server() {\n        m_server.init_asio();\n        m_server.set_open_handler(bind(&broadcast_server::on_open, this, ::_1));\n        m_server.set_close_handler(bind(&broadcast_server::on_close, this, ::_1));\n        m_server.set_message_handler(bind(&broadcast_server::on_message, this, ::_1, ::_2));\n    }\n\n    void on_open(connection_hdl hdl) {\n        m_connections.insert(hdl);\n    }\n\n    void on_close(connection_hdl hdl) {\n        m_connections.erase(hdl);\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        for (auto it : m_connections) {\n            m_server.send(it, msg->get_payload(), msg->get_opcode());\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    server m_server;\n    con_list m_connections;\n};\n\nint main() {\n    broadcast_server server_instance;\n    server_instance.run(9002);\n    return 0;\n}",
      "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <set>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef websocketpp::connection_hdl connection_hdl;\n\nclass broadcast_server {\npublic:\n    broadcast_server() {\n        m_server.init_asio();\n        m_server.set_open_handler(bind(&broadcast_server::on_open, this, ::_1));\n        m_server.set_close_handler(bind(&broadcast_server::on_close, this, ::_1));\n        m_server.set_message_handler(bind(&broadcast_server::on_message, this, ::_1, ::_2));\n    }\n\n    void on_open(connection_hdl hdl) {\n        m_connections.insert(hdl);\n    }\n\n    void on_close(connection_hdl hdl) {\n        m_connections.erase(hdl);\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        for (auto it : m_connections) {\n            m_server.send(it, msg->get_payload(), msg->get_opcode());\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    server m_server;\n    std::set<connection_hdl, std::owner_less<connection_hdl>> m_connections;\n};\n\nint main() {\n    broadcast_server server_instance;\n    server_instance.run(9002);\n    return 0;\n}",
      "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <set>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef websocketpp::connection_hdl connection_hdl;\n\nclass broadcast_server {\npublic:\n    broadcast_server() {\n        m_server.init_asio();\n        m_server.set_open_handler(bind(&broadcast_server::on_open, this, ::_1));\n        m_server.set_close_handler(bind(&broadcast_server::on_close, this, ::_1));\n        m_server.set_message_handler(bind(&broadcast_server::on_message, this, ::_1, ::_2));\n    }\n\n    void on_open(connection_hdl hdl) {\n        m_connections.insert(hdl);\n    }\n\n    void on_close(connection_hdl hdl) {\n        m_connections.erase(hdl);\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        for (auto it : m_connections) {\n            m_server.send(it, msg->get_payload(), msg->get_opcode());\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    server m_server;\n    typedef std::set<connection_hdl, std::owner_less<connection_hdl>> con_list;\n    con_list m_connections;\n};\n\nint main() {\n    broadcast_server server_instance;\n    server_instance.run(9002);\n    return 0;\n}",
      "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <set>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef websocketpp::connection_hdl connection_hdl;\ntypedef std::set<connection_hdl, std::owner_less<connection_hdl>> con_list;\n\nclass broadcast_server {\npublic:\n    broadcast_server() {\n        m_server.init_asio();\n        m_server.set_open_handler(bind(&broadcast_server::on_open, this, ::_1));\n        m_server.set_close_handler(bind(&broadcast_server::on_close, this, ::_1));\n        m_server.set_message_handler(bind(&broadcast_server::on_message, this, ::_1, ::_2));\n    }\n\n    void on_open(connection_hdl hdl) {\n        m_connections.insert(hdl);\n    }\n\n    void on_close(connection_hdl hdl) {\n        m_connections.erase(hdl);\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        for (auto it : m_connections) {\n            m_server.send(it, msg->get_payload(), msg->get_opcode());\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    server m_server;\n    con_list m_connections;\n};\n\nint main() {\n    broadcast_server server_instance;\n    server_instance.run(9002);\n    return 0;\n}",
      "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <set>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef websocketpp::connection_hdl connection_hdl;\ntypedef std::set<connection_hdl, std::owner_less<connection_hdl>> con_list;\n\nclass broadcast_server {\npublic:\n    broadcast_server() {\n        m_server.init_asio();\n        m_server.set_open_handler(bind(&broadcast_server::on_open, this, ::_1));\n        m_server.set_close_handler(bind(&broadcast_server::on_close, this, ::_1));\n        m_server.set_message_handler(bind(&broadcast_server::on_message, this, ::_1, ::_2));\n    }\n\n    void on_open(connection_hdl hdl) {\n        m_connections.insert(hdl);\n    }\n\n    void on_close(connection_hdl hdl) {\n        m_connections.erase(hdl);\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        for (auto it : m_connections) {\n            m_server.send(it, msg->get_payload(), msg->get_opcode());\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    server m_server;\n    con_list m_connections;\n};\n\nint main() {\n    broadcast_server server_instance;\n    server_instance.run(9002);\n    return 0;\n}",
      "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <set>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef websocketpp::connection_hdl connection_hdl;\ntypedef std::set<connection_hdl, std::owner_less<connection_hdl>> con_list;\n\nclass broadcast_server {\npublic:\n    broadcast_server() {\n        m_server.init_asio();\n        m_server.set_open_handler(bind(&broadcast_server::on_open, this, ::_1));\n        m_server.set_close_handler(bind(&broadcast_server::on_close, this, ::_1));\n        m_server.set_message_handler(bind(&broadcast_server::on_message, this, ::_1, ::_2));\n    }\n\n    void on_open(connection_hdl hdl) {\n        m_connections.insert(hdl);\n    }\n\n    void on_close(connection_hdl hdl) {\n        m_connections.erase(hdl);\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        for (auto it : m_connections) {\n            m_server.send(it, msg->get_payload(), msg->get_opcode());\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    server m_server;\n    con_list m_connections;\n};\n\nint main() {\n    broadcast_server server_instance;\n    server_instance.run(9002);\n    return 0;\n}",
      "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <set>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef websocketpp::connection_hdl connection_hdl;\ntypedef std::set<connection_hdl, std::owner_less<connection_hdl>> con_list;\n\nclass broadcast_server {\npublic:\n    broadcast_server() {\n        m_server.init_asio();\n        m_server.set_open_handler(bind(&broadcast_server::on_open, this, ::_1));\n        m_server.set_close_handler(bind(&broadcast_server::on_close, this, ::_1));\n        m_server.set_message_handler(bind(&broadcast_server::on_message, this, ::_1, ::_2));\n    }\n\n    void on_open(connection_hdl hdl) {\n        m_connections.insert(hdl);\n    }\n\n    void on_close(connection_hdl hdl) {\n        m_connections.erase(hdl);\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        for (auto it : m_connections) {\n            m_server.send(it, msg->get_payload(), msg->get_opcode());\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    server m_server;\n    con_list m_connections;\n};\n\nint main() {\n    broadcast_server server_instance;\n    server_instance.run(9002);\n    return 0;\n}",
      "#include <set>\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef websocketpp::connection_hdl connection_hdl;\ntypedef std::set<connection_hdl, std::owner_less<connection_hdl>> con_list;\n\nclass broadcast_server {\npublic:\n    broadcast_server() {\n        m_server.init_asio();\n        m_server.set_open_handler(bind(&broadcast_server::on_open, this, std::placeholders::_1));\n        m_server.set_close_handler(bind(&broadcast_server::on_close, this, std::placeholders::_1));\n        m_server.set_message_handler(bind(&broadcast_server::on_message, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void on_open(connection_hdl hdl) {\n        m_connections.insert(hdl);\n    }\n\n    void on_close(connection_hdl hdl) {\n        m_connections.erase(hdl);\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        for (auto it : m_connections) {\n            m_server.send(it, msg->get_payload(), msg->get_opcode());\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    server m_server;\n    con_list m_connections;\n};\n\nint main() {\n    broadcast_server server_instance;\n    server_instance.run(9002);\n    return 0;\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 46,
    "Instruction": "Task Description: Implement a WebSocket server in C++ using the WebSocket++ library to handle client connections and echo back received messages.\n\nClass Description: The utility_server class encapsulates a WebSocket server that listens for incoming connections, receives messages from clients, and echoes them back. It uses WebSocket++ with ASIO for network handling.\n\nAttributes:\n- m_endpoint: [server] - The WebSocket++ server instance that manages connections and message handling.\n\nMethods:\n- utility_server() - [Constructor] -> [void] - Initializes the server with logging settings, ASIO, and sets up the message handler.\n- echo_handler(websocketpp::connection_hdl hdl, server::message_ptr msg) -> [void] - Handles incoming messages by echoing them back to the client.\n- run() -> [void] - Starts the server, begins listening on port 9002, and runs the ASIO event loop.",
    "Canonical_solution": "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <functional>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\n\nclass utility_server {\npublic:\n    utility_server() {\n         // Set logging settings\n        m_endpoint.set_error_channels(websocketpp::log::elevel::all);\n        m_endpoint.set_access_channels(websocketpp::log::alevel::all ^ websocketpp::log::alevel::frame_payload);\n\n        // Initialize Asio\n        m_endpoint.init_asio();\n\n        // Set the default message handler to the echo handler\n        m_endpoint.set_message_handler(std::bind(\n            &utility_server::echo_handler, this,\n            std::placeholders::_1, std::placeholders::_2\n        ));\n    }\n\n    void echo_handler(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        // write a new message\n        m_endpoint.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    void run() {\n        // Listen on port 9002\n        m_endpoint.listen(9002);\n\n        // Queues a connection accept operation\n        m_endpoint.start_accept();\n\n        // Start the Asio io_service run loop\n        m_endpoint.run();\n    }\nprivate:\n    server m_endpoint;\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 154,
    "matched_results": [
      "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\n\nclass utility_server {\npublic:\n    utility_server() {\n        m_endpoint.set_access_channels(websocketpp::log::alevel::all);\n        m_endpoint.clear_access_channels(websocketpp::log::alevel::frame_payload);\n        \n        m_endpoint.init_asio();\n        m_endpoint.set_message_handler(bind(&utility_server::echo_handler, this, ::_1, ::_2));\n    }\n\n    void echo_handler(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        m_endpoint.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    void run() {\n        m_endpoint.listen(9002);\n        m_endpoint.start_accept();\n        m_endpoint.run();\n    }\n\nprivate:\n    server m_endpoint;\n};\n\nint main() {\n    utility_server server_instance;\n    server_instance.run();\n    return 0;\n}",
      "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\n\nclass utility_server {\npublic:\n    utility_server() {\n        m_endpoint.set_access_channels(websocketpp::log::alevel::all);\n        m_endpoint.clear_access_channels(websocketpp::log::alevel::frame_payload);\n        \n        m_endpoint.init_asio();\n        m_endpoint.set_message_handler(bind(&utility_server::echo_handler, this, ::_1, ::_2));\n    }\n\n    void echo_handler(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        m_endpoint.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    void run() {\n        m_endpoint.listen(9002);\n        m_endpoint.start_accept();\n        m_endpoint.run();\n    }\n\nprivate:\n    server m_endpoint;\n};\n\nint main() {\n    utility_server server_instance;\n    server_instance.run();\n    return 0;\n}",
      "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\n\nclass utility_server {\npublic:\n    utility_server() {\n        m_endpoint.set_access_channels(websocketpp::log::alevel::all);\n        m_endpoint.clear_access_channels(websocketpp::log::alevel::frame_payload);\n        \n        m_endpoint.init_asio();\n        m_endpoint.set_message_handler(bind(&utility_server::echo_handler, this, ::_1, ::_2));\n    }\n\n    void echo_handler(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        m_endpoint.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    void run() {\n        m_endpoint.listen(9002);\n        m_endpoint.start_accept();\n        m_endpoint.run();\n    }\n\nprivate:\n    server m_endpoint;\n};\n\nint main() {\n    utility_server server_instance;\n    server_instance.run();\n    return 0;\n}",
      "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\n\nclass utility_server {\npublic:\n    utility_server() {\n        m_endpoint.set_access_channels(websocketpp::log::alevel::all);\n        m_endpoint.clear_access_channels(websocketpp::log::alevel::frame_payload);\n\n        m_endpoint.init_asio();\n        m_endpoint.set_message_handler(bind(&utility_server::echo_handler, this, ::_1, ::_2));\n    }\n\n    void echo_handler(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        m_endpoint.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    void run() {\n        m_endpoint.listen(9002);\n        m_endpoint.start_accept();\n        m_endpoint.run();\n    }\n\nprivate:\n    server m_endpoint;\n};\n\nint main() {\n    utility_server server_instance;\n    server_instance.run();\n    return 0;\n}",
      "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\n\nclass utility_server {\npublic:\n    utility_server() {\n        m_endpoint.set_access_channels(websocketpp::log::alevel::all);\n        m_endpoint.clear_access_channels(websocketpp::log::alevel::frame_payload);\n        \n        m_endpoint.init_asio();\n        m_endpoint.set_message_handler(bind(&utility_server::echo_handler, this, ::_1, ::_2));\n    }\n\n    void echo_handler(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        m_endpoint.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    void run() {\n        m_endpoint.listen(9002);\n        m_endpoint.start_accept();\n        m_endpoint.run();\n    }\n\nprivate:\n    server m_endpoint;\n};\n\nint main() {\n    utility_server server_instance;\n    server_instance.run();\n    return 0;\n}",
      "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\n\nclass utility_server {\npublic:\n    utility_server() {\n        m_endpoint.set_access_channels(websocketpp::log::alevel::all);\n        m_endpoint.clear_access_channels(websocketpp::log::alevel::frame_payload);\n        \n        m_endpoint.init_asio();\n        m_endpoint.set_message_handler(bind(&utility_server::echo_handler, this, ::_1, ::_2));\n    }\n\n    void echo_handler(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        m_endpoint.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    void run() {\n        m_endpoint.listen(9002);\n        m_endpoint.start_accept();\n        m_endpoint.run();\n    }\n\nprivate:\n    server m_endpoint;\n};\n\nint main() {\n    utility_server server_instance;\n    server_instance.run();\n    return 0;\n}",
      "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\n\nclass utility_server {\npublic:\n    utility_server() {\n        m_endpoint.set_access_channels(websocketpp::log::alevel::all);\n        m_endpoint.clear_access_channels(websocketpp::log::alevel::frame_payload);\n        \n        m_endpoint.init_asio();\n        m_endpoint.set_message_handler(bind(&utility_server::echo_handler, this, ::_1, ::_2));\n    }\n\n    void echo_handler(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        m_endpoint.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    void run() {\n        m_endpoint.listen(9002);\n        m_endpoint.start_accept();\n        m_endpoint.run();\n    }\n\nprivate:\n    server m_endpoint;\n};\n\nint main() {\n    utility_server server_instance;\n    server_instance.run();\n    return 0;\n}",
      "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\n\nclass utility_server {\npublic:\n    utility_server() {\n        m_endpoint.set_access_channels(websocketpp::log::alevel::all);\n        m_endpoint.clear_access_channels(websocketpp::log::alevel::frame_payload);\n        m_endpoint.init_asio();\n        m_endpoint.set_message_handler(bind(&utility_server::echo_handler, this, ::_1, ::_2));\n    }\n\n    void echo_handler(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        m_endpoint.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    void run() {\n        m_endpoint.listen(9002);\n        m_endpoint.start_accept();\n        m_endpoint.run();\n    }\n\nprivate:\n    server m_endpoint;\n};\n\nint main() {\n    utility_server server_instance;\n    server_instance.run();\n    return 0;\n}",
      "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\n\nclass utility_server {\npublic:\n    utility_server() {\n        m_endpoint.set_access_channels(websocketpp::log::alevel::all);\n        m_endpoint.clear_access_channels(websocketpp::log::alevel::frame_payload);\n        m_endpoint.init_asio();\n        m_endpoint.set_message_handler(bind(&utility_server::echo_handler, this, ::_1, ::_2));\n    }\n\n    void echo_handler(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        m_endpoint.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    void run() {\n        m_endpoint.listen(9002);\n        m_endpoint.start_accept();\n        m_endpoint.run();\n    }\n\nprivate:\n    server m_endpoint;\n};\n\nint main() {\n    utility_server server_instance;\n    server_instance.run();\n    return 0;\n}",
      "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\n\nclass utility_server {\npublic:\n    utility_server() {\n        m_endpoint.set_access_channels(websocketpp::log::alevel::all);\n        m_endpoint.clear_access_channels(websocketpp::log::alevel::frame_payload);\n        \n        m_endpoint.init_asio();\n        m_endpoint.set_message_handler(bind(&utility_server::echo_handler, this, ::_1, ::_2));\n    }\n\n    void echo_handler(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        m_endpoint.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    void run() {\n        m_endpoint.listen(9002);\n        m_endpoint.start_accept();\n        m_endpoint.run();\n    }\n\nprivate:\n    server m_endpoint;\n};\n\nint main() {\n    utility_server server_instance;\n    server_instance.run();\n    return 0;\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 47,
    "Instruction": "Task Description: Implement a WebSocket server class in C++ using the WebSocket++ library to handle client connections, process incoming messages, and manage server events.\n\nClass Description: The WebSocketServer class encapsulates a WebSocket++ server instance, providing methods to initialize, configure, and run the server. It handles WebSocket connections, processes messages, and manages various server events like HTTP requests, connection failures, and closures.\n\nAttributes:\n- m_server: [websocketpp::server<websocketpp::config::debug_asio>] - The main WebSocket++ server instance that manages connections and events.\n\nMethods:\n- WebSocketServer() -> [Constructor] - Initializes the server with default settings, configures logging, sets up ASIO, and registers event handlers.\n- run(int port) -> [void] - Starts the server on the specified port, begins accepting connections, and runs the event loop.\n- validate(websocketpp::connection_hdl hdl) -> [bool] - Validates incoming connections (always returns true in this implementation).\n- on_http(websocketpp::connection_hdl hdl) -> [void] - Handles HTTP requests received by the server.\n- on_fail(websocketpp::connection_hdl hdl) -> [void] - Handles connection failure events.\n- on_close(websocketpp::connection_hdl hdl) -> [void] - Handles connection closure events.\n- on_message(websocketpp::connection_hdl hdl, message_ptr msg) -> [void] - Processes incoming WebSocket messages and echoes them back to the client.",
    "Canonical_solution": "#include <websocketpp/config/debug_asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <websocketpp/logger/syslog.hpp>\n#include <iostream>\n\nusing websocketpp::lib::placeholders::_1;\nusing websocketpp::lib::placeholders::_2;\nusing websocketpp::lib::bind;\n\nclass WebSocketServer {\npublic:\n    typedef websocketpp::server<websocketpp::config::debug_asio> server;\n    typedef server::message_ptr message_ptr;\n\n    WebSocketServer() {\n        // Set logging settings\n        m_server.set_access_channels(websocketpp::log::alevel::all);\n        m_server.clear_access_channels(websocketpp::log::alevel::frame_payload);\n\n        // Initialize ASIO\n        m_server.init_asio();\n        m_server.set_reuse_addr(true);\n\n        // Register handlers\n        m_server.set_message_handler(bind(&WebSocketServer::on_message, this, ::_1, ::_2));\n        m_server.set_http_handler(bind(&WebSocketServer::on_http, this, ::_1));\n        m_server.set_fail_handler(bind(&WebSocketServer::on_fail, this, ::_1));\n        m_server.set_close_handler(bind(&WebSocketServer::on_close, this, ::_1));\n        m_server.set_validate_handler(bind(&WebSocketServer::validate, this, ::_1));\n    }\n\n    void run(int port) {\n        try {\n            // Listen on specified port\n            m_server.listen(port);\n\n            // Start the server accept loop\n            m_server.start_accept();\n\n            // Start the ASIO io_service run loop\n            m_server.run();\n        } catch (websocketpp::exception const & e) {\n            std::cout << e.what() << std::endl;\n        }\n    }\n\nprivate:\n    bool validate(websocketpp::connection_hdl hdl) {\n        return true;\n    }\n\n    void on_http(websocketpp::connection_hdl hdl) {\n        server::connection_ptr con = m_server.get_con_from_hdl(hdl);\n        std::string res = con->get_request_body();\n        std::stringstream ss;\n        ss << \"got HTTP request with \" << res.size() << \" bytes of body data.\";\n        con->set_body(ss.str());\n        con->set_status(websocketpp::http::status_code::ok);\n    }\n\n    void on_fail(websocketpp::connection_hdl hdl) {\n        server::connection_ptr con = m_server.get_con_from_hdl(hdl);\n        std::cout << \"Fail handler: \" << con->get_ec() << \" \" << con->get_ec().message() << std::endl;\n    }\n\n    void on_close(websocketpp::connection_hdl hdl) {\n        std::cout << \"Close handler\" << std::endl;\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, message_ptr msg) {\n        std::cout << \"on_message called with hdl: \" << hdl.lock().get()\n                  << \" and message: \" << msg->get_payload()\n                  << std::endl;\n\n        try {\n            m_server.send(hdl, msg->get_payload(), msg->get_opcode());\n        } catch (websocketpp::exception const & e) {\n            std::cout << \"Echo failed because: \" \n                      << \"(\" << e.what() << \")\" << std::endl;\n        }\n    }\n\n    server m_server;\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 154,
    "matched_results": [
      "#include <websocketpp/config/asio.hpp>\n#include <websocketpp/server.hpp>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef websocketpp::connection_hdl connection_hdl;\ntypedef server::message_ptr message_ptr;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer() {\n        m_server.init_asio();\n        m_server.set_access_channels(websocketpp::log::alevel::all);\n        m_server.clear_access_channels(websocketpp::log::alevel::frame_payload);\n        m_server.set_validate_handler(bind(&WebSocketServer::validate, this, ::_1));\n        m_server.set_http_handler(bind(&WebSocketServer::on_http, this, ::_1));\n        m_server.set_fail_handler(bind(&WebSocketServer::on_fail, this, ::_1));\n        m_server.set_close_handler(bind(&WebSocketServer::on_close, this, ::_1));\n        m_server.set_message_handler(bind(&WebSocketServer::on_message, this, ::_1, ::_2));\n    }\n\n    void run(int port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    bool validate(connection_hdl hdl) {\n        return true;\n    }\n\n    void on_http(connection_hdl hdl) {\n        server::connection_ptr con = m_server.get_con_from_hdl(hdl);\n        con->set_status(websocketpp::http::status_code::ok);\n        con->set_body(\"WebSocket Server\");\n    }\n\n    void on_fail(connection_hdl hdl) {\n        server::connection_ptr con = m_server.get_con_from_hdl(hdl);\n        std::cerr << \"Connection failed: \" << con->get_ec().message() << std::endl;\n    }\n\n    void on_close(connection_hdl hdl) {\n        std::cerr << \"Connection closed\" << std::endl;\n    }\n\n    void on_message(connection_hdl hdl, message_ptr msg) {\n        m_server.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    server m_server;\n};",
      "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <iostream>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer() {\n        m_server.init_asio();\n        m_server.set_open_handler(bind(&WebSocketServer::on_open, this, ::_1));\n        m_server.set_close_handler(bind(&WebSocketServer::on_close, this, ::_1));\n        m_server.set_fail_handler(bind(&WebSocketServer::on_fail, this, ::_1));\n        m_server.set_http_handler(bind(&WebSocketServer::on_http, this, ::_1));\n        m_server.set_message_handler(bind(&WebSocketServer::on_message, this, ::_1, ::_2));\n        m_server.set_validate_handler(bind(&WebSocketServer::validate, this, ::_1));\n    }\n\n    void run(int port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    typedef websocketpp::config::asio::message_type::ptr message_ptr;\n\n    bool validate(websocketpp::connection_hdl hdl) {\n        return true;\n    }\n\n    void on_http(websocketpp::connection_hdl hdl) {\n        server::connection_ptr con = m_server.get_con_from_hdl(hdl);\n        con->set_body(\"Hello, World!\");\n        con->set_status(websocketpp::http::status_code::ok);\n    }\n\n    void on_fail(websocketpp::connection_hdl hdl) {\n        server::connection_ptr con = m_server.get_con_from_hdl(hdl);\n        std::cerr << \"Connection failed: \" << con->get_ec().message() << std::endl;\n    }\n\n    void on_close(websocketpp::connection_hdl hdl) {\n        std::cout << \"Connection closed\" << std::endl;\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, message_ptr msg) {\n        m_server.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    void on_open(websocketpp::connection_hdl hdl) {\n        std::cout << \"Connection opened\" << std::endl;\n    }\n\n    server m_server;\n};",
      "#include <websocketpp/config/asio.hpp>\n#include <websocketpp/server.hpp>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef websocketpp::connection_hdl connection_hdl;\ntypedef server::message_ptr message_ptr;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer() {\n        m_server.init_asio();\n        m_server.set_access_channels(websocketpp::log::alevel::all);\n        m_server.clear_access_channels(websocketpp::log::alevel::frame_payload);\n        m_server.set_validate_handler(bind(&WebSocketServer::validate, this, ::_1));\n        m_server.set_http_handler(bind(&WebSocketServer::on_http, this, ::_1));\n        m_server.set_fail_handler(bind(&WebSocketServer::on_fail, this, ::_1));\n        m_server.set_close_handler(bind(&WebSocketServer::on_close, this, ::_1));\n        m_server.set_message_handler(bind(&WebSocketServer::on_message, this, ::_1, ::_2));\n    }\n\n    void run(int port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    bool validate(connection_hdl hdl) {\n        return true;\n    }\n\n    void on_http(connection_hdl hdl) {\n        server::connection_ptr con = m_server.get_con_from_hdl(hdl);\n        con->set_status(websocketpp::http::status_code::ok);\n        con->set_body(\"WebSocket Server\");\n    }\n\n    void on_fail(connection_hdl hdl) {\n        server::connection_ptr con = m_server.get_con_from_hdl(hdl);\n        std::cerr << \"Connection failed: \" << con->get_ec().message() << std::endl;\n    }\n\n    void on_close(connection_hdl hdl) {\n        server::connection_ptr con = m_server.get_con_from_hdl(hdl);\n        std::cerr << \"Connection closed: \" << con->get_remote_endpoint() << std::endl;\n    }\n\n    void on_message(connection_hdl hdl, message_ptr msg) {\n        m_server.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    server m_server;\n};",
      "#include <websocketpp/config/asio.hpp>\n#include <websocketpp/server.hpp>\n\ntypedef websocketpp::server<websocketpp::config::debug_asio> server;\ntypedef websocketpp::connection_hdl connection_hdl;\ntypedef server::message_ptr message_ptr;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer() {\n        m_server.init_asio();\n        m_server.set_validate_handler(bind(&WebSocketServer::validate, this, ::_1));\n        m_server.set_http_handler(bind(&WebSocketServer::on_http, this, ::_1));\n        m_server.set_fail_handler(bind(&WebSocketServer::on_fail, this, ::_1));\n        m_server.set_close_handler(bind(&WebSocketServer::on_close, this, ::_1));\n        m_server.set_message_handler(bind(&WebSocketServer::on_message, this, ::_1, ::_2));\n    }\n\n    void run(int port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    bool validate(connection_hdl hdl) {\n        return true;\n    }\n\n    void on_http(connection_hdl hdl) {\n        server::connection_ptr con = m_server.get_con_from_hdl(hdl);\n        con->set_status(websocketpp::http::status_code::ok);\n        con->set_body(\"WebSocket Server\");\n    }\n\n    void on_fail(connection_hdl hdl) {\n        server::connection_ptr con = m_server.get_con_from_hdl(hdl);\n        std::cerr << \"Connection failed: \" << con->get_ec().message() << std::endl;\n    }\n\n    void on_close(connection_hdl hdl) {\n        server::connection_ptr con = m_server.get_con_from_hdl(hdl);\n        std::cout << \"Connection closed: \" << con->get_remote_endpoint() << std::endl;\n    }\n\n    void on_message(connection_hdl hdl, message_ptr msg) {\n        m_server.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    server m_server;\n};",
      "#include <websocketpp/config/debug_asio.hpp>\n#include <websocketpp/server.hpp>\n\ntypedef websocketpp::server<websocketpp::config::debug_asio> server;\ntypedef websocketpp::connection_hdl connection_hdl;\ntypedef server::message_ptr message_ptr;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer() {\n        m_server.init_asio();\n        m_server.set_open_handler(bind(&WebSocketServer::on_open, this, ::_1));\n        m_server.set_close_handler(bind(&WebSocketServer::on_close, this, ::_1));\n        m_server.set_fail_handler(bind(&WebSocketServer::on_fail, this, ::_1));\n        m_server.set_http_handler(bind(&WebSocketServer::on_http, this, ::_1));\n        m_server.set_message_handler(bind(&WebSocketServer::on_message, this, ::_1, ::_2));\n        m_server.set_validate_handler(bind(&WebSocketServer::validate, this, ::_1));\n    }\n\n    void run(int port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    server m_server;\n\n    bool validate(connection_hdl hdl) {\n        return true;\n    }\n\n    void on_http(connection_hdl hdl) {\n        server::connection_ptr con = m_server.get_con_from_hdl(hdl);\n        con->set_body(\"Hello, World!\");\n        con->set_status(websocketpp::http::status_code::ok);\n    }\n\n    void on_fail(connection_hdl hdl) {\n        server::connection_ptr con = m_server.get_con_from_hdl(hdl);\n        std::cerr << \"Connection failed: \" << con->get_ec().message() << std::endl;\n    }\n\n    void on_close(connection_hdl hdl) {\n        std::cout << \"Connection closed\" << std::endl;\n    }\n\n    void on_open(connection_hdl hdl) {\n        std::cout << \"Connection opened\" << std::endl;\n    }\n\n    void on_message(connection_hdl hdl, message_ptr msg) {\n        m_server.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n};",
      "#include <websocketpp/config/asio.hpp>\n#include <websocketpp/server.hpp>\n\nclass WebSocketServer {\npublic:\n    WebSocketServer() {\n        m_server.init_asio();\n        m_server.set_access_channels(websocketpp::log::alevel::all);\n        m_server.clear_access_channels(websocketpp::log::alevel::frame_payload);\n        m_server.set_validate_handler(bind(&WebSocketServer::validate, this, ::_1));\n        m_server.set_http_handler(bind(&WebSocketServer::on_http, this, ::_1));\n        m_server.set_fail_handler(bind(&WebSocketServer::on_fail, this, ::_1));\n        m_server.set_close_handler(bind(&WebSocketServer::on_close, this, ::_1));\n        m_server.set_message_handler(bind(&WebSocketServer::on_message, this, ::_1, ::_2));\n    }\n\n    void run(int port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    bool validate(websocketpp::connection_hdl hdl) {\n        return true;\n    }\n\n    void on_http(websocketpp::connection_hdl hdl) {\n        websocketpp::server<websocketpp::config::asio>::connection_ptr con = m_server.get_con_from_hdl(hdl);\n        con->set_body(\"Hello, World!\");\n        con->set_status(websocketpp::http::status_code::ok);\n    }\n\n    void on_fail(websocketpp::connection_hdl hdl) {\n        websocketpp::server<websocketpp::config::asio>::connection_ptr con = m_server.get_con_from_hdl(hdl);\n        std::cerr << \"Connection failed: \" << con->get_ec().message() << std::endl;\n    }\n\n    void on_close(websocketpp::connection_hdl hdl) {\n        websocketpp::server<websocketpp::config::asio>::connection_ptr con = m_server.get_con_from_hdl(hdl);\n        std::cout << \"Connection closed: \" << con->get_remote_endpoint() << std::endl;\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, websocketpp::server<websocketpp::config::asio>::message_ptr msg) {\n        m_server.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    websocketpp::server<websocketpp::config::asio> m_server;\n};",
      "#include <websocketpp/config/asio.hpp>\n#include <websocketpp/server.hpp>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef websocketpp::connection_hdl connection_hdl;\ntypedef server::message_ptr message_ptr;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer() {\n        m_server.init_asio();\n        m_server.set_open_handler(bind(&WebSocketServer::on_open, this, ::_1));\n        m_server.set_close_handler(bind(&WebSocketServer::on_close, this, ::_1));\n        m_server.set_fail_handler(bind(&WebSocketServer::on_fail, this, ::_1));\n        m_server.set_http_handler(bind(&WebSocketServer::on_http, this, ::_1));\n        m_server.set_message_handler(bind(&WebSocketServer::on_message, this, ::_1, ::_2));\n        m_server.set_validate_handler(bind(&WebSocketServer::validate, this, ::_1));\n    }\n\n    void run(int port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\n    bool validate(connection_hdl hdl) {\n        return true;\n    }\n\n    void on_http(connection_hdl hdl) {\n        server::connection_ptr con = m_server.get_con_from_hdl(hdl);\n        con->set_body(\"Hello, World!\");\n        con->set_status(websocketpp::http::status_code::ok);\n    }\n\n    void on_fail(connection_hdl hdl) {\n        server::connection_ptr con = m_server.get_con_from_hdl(hdl);\n        std::cout << \"Connection failed: \" << con->get_ec().message() << std::endl;\n    }\n\n    void on_close(connection_hdl hdl) {\n        std::cout << \"Connection closed\" << std::endl;\n    }\n\n    void on_message(connection_hdl hdl, message_ptr msg) {\n        m_server.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\nprivate:\n    server m_server;\n};",
      "#include <websocketpp/config/asio.hpp>\n#include <websocketpp/server.hpp>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef websocketpp::connection_hdl connection_hdl;\ntypedef server::message_ptr message_ptr;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer() {\n        m_server.init_asio();\n        m_server.set_open_handler(bind(&WebSocketServer::on_open, this, ::_1));\n        m_server.set_close_handler(bind(&WebSocketServer::on_close, this, ::_1));\n        m_server.set_fail_handler(bind(&WebSocketServer::on_fail, this, ::_1));\n        m_server.set_http_handler(bind(&WebSocketServer::on_http, this, ::_1));\n        m_server.set_message_handler(bind(&WebSocketServer::on_message, this, ::_1, ::_2));\n        m_server.set_validate_handler(bind(&WebSocketServer::validate, this, ::_1));\n    }\n\n    void run(int port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    bool validate(connection_hdl hdl) {\n        return true;\n    }\n\n    void on_http(connection_hdl hdl) {\n        server::connection_ptr con = m_server.get_con_from_hdl(hdl);\n        con->set_body(\"Hello, World!\");\n        con->set_status(websocketpp::http::status_code::ok);\n    }\n\n    void on_fail(connection_hdl hdl) {\n        server::connection_ptr con = m_server.get_con_from_hdl(hdl);\n        std::cout << \"Connection failed: \" << con->get_ec().message() << std::endl;\n    }\n\n    void on_close(connection_hdl hdl) {\n        std::cout << \"Connection closed\" << std::endl;\n    }\n\n    void on_message(connection_hdl hdl, message_ptr msg) {\n        m_server.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    void on_open(connection_hdl hdl) {\n        std::cout << \"Connection opened\" << std::endl;\n    }\n\n    server m_server;\n};",
      "#include <websocketpp/config/asio.hpp>\n#include <websocketpp/server.hpp>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef websocketpp::connection_hdl connection_hdl;\ntypedef server::message_ptr message_ptr;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer() {\n        m_server.init_asio();\n        m_server.set_access_channels(websocketpp::log::alevel::all);\n        m_server.clear_access_channels(websocketpp::log::alevel::frame_payload);\n        m_server.set_validate_handler(bind(&WebSocketServer::validate, this, ::_1));\n        m_server.set_http_handler(bind(&WebSocketServer::on_http, this, ::_1));\n        m_server.set_fail_handler(bind(&WebSocketServer::on_fail, this, ::_1));\n        m_server.set_close_handler(bind(&WebSocketServer::on_close, this, ::_1));\n        m_server.set_message_handler(bind(&WebSocketServer::on_message, this, ::_1, ::_2));\n    }\n\n    void run(int port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    bool validate(connection_hdl hdl) {\n        return true;\n    }\n\n    void on_http(connection_hdl hdl) {\n        server::connection_ptr con = m_server.get_con_from_hdl(hdl);\n        con->set_status(websocketpp::http::status_code::ok);\n        con->set_body(\"WebSocket Server\");\n    }\n\n    void on_fail(connection_hdl hdl) {\n        server::connection_ptr con = m_server.get_con_from_hdl(hdl);\n        std::cerr << \"Connection failed: \" << con->get_ec().message() << std::endl;\n    }\n\n    void on_close(connection_hdl hdl) {\n        server::connection_ptr con = m_server.get_con_from_hdl(hdl);\n        std::cout << \"Connection closed: \" << con->get_remote_endpoint() << std::endl;\n    }\n\n    void on_message(connection_hdl hdl, message_ptr msg) {\n        m_server.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    server m_server;\n};",
      "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <iostream>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef websocketpp::config::asio::message_type::ptr message_ptr;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer() {\n        m_server.init_asio();\n        m_server.set_open_handler(bind(&WebSocketServer::on_open, this, ::_1));\n        m_server.set_close_handler(bind(&WebSocketServer::on_close, this, ::_1));\n        m_server.set_fail_handler(bind(&WebSocketServer::on_fail, this, ::_1));\n        m_server.set_http_handler(bind(&WebSocketServer::on_http, this, ::_1));\n        m_server.set_message_handler(bind(&WebSocketServer::on_message, this, ::_1, ::_2));\n        m_server.set_validate_handler(bind(&WebSocketServer::validate, this, ::_1));\n    }\n\n    void run(int port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    server m_server;\n\n    bool validate(websocketpp::connection_hdl hdl) {\n        return true;\n    }\n\n    void on_http(websocketpp::connection_hdl hdl) {\n        server::connection_ptr con = m_server.get_con_from_hdl(hdl);\n        con->set_body(\"This is a WebSocket server\");\n        con->set_status(websocketpp::http::status_code::ok);\n    }\n\n    void on_fail(websocketpp::connection_hdl hdl) {\n        server::connection_ptr con = m_server.get_con_from_hdl(hdl);\n        std::cerr << \"Connection failed: \" << con->get_ec().message() << std::endl;\n    }\n\n    void on_close(websocketpp::connection_hdl hdl) {\n        std::cout << \"Connection closed\" << std::endl;\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, message_ptr msg) {\n        m_server.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    void on_open(websocketpp::connection_hdl hdl) {\n        std::cout << \"Connection opened\" << std::endl;\n    }\n};"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 48,
    "Instruction": "Task Description: Implement a WebSocket server in C++ using the WebSocket++ library that supports secure TLS connections and handles both WebSocket and HTTP requests.\n\nClass Description: The WebSocketServer class encapsulates a secure WebSocket server implementation using WebSocket++ with ASIO and TLS support. It handles incoming connections, processes messages, and manages secure communication settings.\n\nAttributes:\n- m_server: [server] - The WebSocket++ server instance that manages connections and communication\n- tls_mode: [enum] - Enumeration defining TLS security modes (MOZILLA_INTERMEDIATE, MOZILLA_MODERN)\n\nMethods:\n- WebSocketServer() -> [constructor] - Initializes the server, sets up ASIO, and registers handler functions\n- run([int port]) -> [void] - Starts the server listening on the specified port and begins accepting connections\n- on_message([websocketpp::connection_hdl hdl, message_ptr msg]) -> [void] - Handles incoming WebSocket messages by echoing them back to the client\n- on_http([websocketpp::connection_hdl hdl]) -> [void] - Handles HTTP requests by returning a simple \"Hello World!\" response\n- get_password() -> [std::string] - Returns the password used for TLS certificate encryption\n- on_tls_init([tls_mode mode, websocketpp::connection_hdl hdl]) -> [context_ptr] - Initializes and configures TLS/SSL context with appropriate security settings based on the specified mode",
    "Canonical_solution": "#include <websocketpp/config/asio.hpp>\n#include <websocketpp/server.hpp>\n#include <websocketpp/lib/asio.hpp>\n#include <iostream>\n\ntypedef websocketpp::server<websocketpp::config::asio_tls> server;\ntypedef websocketpp::config::asio::message_type::ptr message_ptr;\ntypedef websocketpp::lib::shared_ptr<websocketpp::lib::asio::ssl::context> context_ptr;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer() {\n        // Initialize ASIO\n        m_server.init_asio();\n\n        // Register handlers\n        m_server.set_message_handler(bind(&WebSocketServer::on_message, this, ::_1, ::_2));\n        m_server.set_http_handler(bind(&WebSocketServer::on_http, this, ::_1));\n        m_server.set_tls_init_handler(bind(&WebSocketServer::on_tls_init, this, MOZILLA_INTERMEDIATE, ::_1));\n    }\n\n    void run(int port) {\n        // Listen on specified port\n        m_server.listen(port);\n\n        // Start the server accept loop\n        m_server.start_accept();\n\n        // Start the ASIO io_service run loop\n        m_server.run();\n    }\n\nprivate:\n    enum tls_mode {\n        MOZILLA_INTERMEDIATE = 1,\n        MOZILLA_MODERN = 2\n    };\n\n    void on_message(websocketpp::connection_hdl hdl, message_ptr msg) {\n        std::cout << \"on_message called with hdl: \" << hdl.lock().get()\n                  << \" and message: \" << msg->get_payload()\n                  << std::endl;\n\n        try {\n            m_server.send(hdl, msg->get_payload(), msg->get_opcode());\n        } catch (websocketpp::exception const & e) {\n            std::cout << \"Echo failed because: \"\n                      << \"(\" << e.what() << \")\" << std::endl;\n        }\n    }\n\n    void on_http(websocketpp::connection_hdl hdl) {\n        server::connection_ptr con = m_server.get_con_from_hdl(hdl);\n        con->set_body(\"Hello World!\");\n        con->set_status(websocketpp::http::status_code::ok);\n    }\n\n    std::string get_password() {\n        return \"test\";\n    }\n\n    context_ptr on_tls_init(tls_mode mode, websocketpp::connection_hdl hdl) {\n        namespace asio = websocketpp::lib::asio;\n\n        context_ptr ctx = websocketpp::lib::make_shared<asio::ssl::context>(asio::ssl::context::sslv23);\n\n        try {\n            if (mode == MOZILLA_MODERN) {\n                ctx->set_options(asio::ssl::context::default_workarounds |\n                                 asio::ssl::context::no_sslv2 |\n                                 asio::ssl::context::no_sslv3 |\n                                 asio::ssl::context::no_tlsv1 |\n                                 asio::ssl::context::single_dh_use);\n            } else {\n                ctx->set_options(asio::ssl::context::default_workarounds |\n                                 asio::ssl::context::no_sslv2 |\n                                 asio::ssl::context::no_sslv3 |\n                                 asio::ssl::context::single_dh_use);\n            }\n            ctx->set_password_callback(bind(&WebSocketServer::get_password, this));\n            ctx->use_certificate_chain_file(\"server.pem\");\n            ctx->use_private_key_file(\"server.pem\", asio::ssl::context::pem);\n            ctx->use_tmp_dh_file(\"dh.pem\");\n            \n            std::string ciphers = (mode == MOZILLA_MODERN) ? \n                \"ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256...\" : \n                \"ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256...\";\n            \n            if (SSL_CTX_set_cipher_list(ctx->native_handle(), ciphers.c_str()) != 1) {\n                std::cout << \"Error setting cipher list\" << std::endl;\n            }\n        } catch (std::exception& e) {\n            std::cout << \"Exception: \" << e.what() << std::endl;\n        }\n        return ctx;\n    }\n\n    server m_server;\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 154,
    "matched_results": [
      "#include <websocketpp/config/asio.hpp>\n#include <websocketpp/server.hpp>\n#include <websocketpp/config/asio_tls.hpp>\n#include <iostream>\n#include <fstream>\n#include <streambuf>\n#include <string>\n#include <memory>\n\nenum tls_mode {\n    MOZILLA_INTERMEDIATE,\n    MOZILLA_MODERN\n};\n\ntypedef websocketpp::server<websocketpp::config::asio_tls> server;\ntypedef websocketpp::lib::shared_ptr<boost::asio::ssl::context> context_ptr;\ntypedef websocketpp::config::asio_tls::message_type::ptr message_ptr;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer() {\n        m_server.init_asio();\n        m_server.set_message_handler(websocketpp::lib::bind(\n            &WebSocketServer::on_message, this, websocketpp::lib::placeholders::_1, websocketpp::lib::placeholders::_2));\n        m_server.set_http_handler(websocketpp::lib::bind(\n            &WebSocketServer::on_http, this, websocketpp::lib::placeholders::_1));\n        m_server.set_tls_init_handler(websocketpp::lib::bind(\n            &WebSocketServer::on_tls_init, this, MOZILLA_INTERMEDIATE, websocketpp::lib::placeholders::_1));\n    }\n\n    void run(int port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, message_ptr msg) {\n        m_server.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    void on_http(websocketpp::connection_hdl hdl) {\n        server::connection_ptr con = m_server.get_con_from_hdl(hdl);\n        con->set_body(\"Hello World!\");\n        con->set_status(websocketpp::http::status_code::ok);\n    }\n\n    std::string get_password() {\n        return \"test\";\n    }\n\n    context_ptr on_tls_init(tls_mode mode, websocketpp::connection_hdl hdl) {\n        context_ptr ctx = websocketpp::lib::make_shared<boost::asio::ssl::context>(boost::asio::ssl::context::tlsv12);\n\n        try {\n            if (mode == MOZILLA_MODERN) {\n                ctx->set_options(boost::asio::ssl::context::default_workarounds |\n                                 boost::asio::ssl::context::no_sslv2 |\n                                 boost::asio::ssl::context::no_sslv3 |\n                                 boost::asio::ssl::context::single_dh_use);\n            } else {\n                ctx->set_options(boost::asio::ssl::context::default_workarounds |\n                                 boost::asio::ssl::context::no_sslv2 |\n                                 boost::asio::ssl::context::no_sslv3 |\n                                 boost::asio::ssl::context::single_dh_use |\n                                 boost::asio::ssl::context::no_tlsv1 |\n                                 boost::asio::ssl::context::no_tlsv1_1);\n            }\n\n            ctx->use_certificate_chain_file(\"server.pem\");\n            ctx->use_private_key_file(\"server.pem\", boost::asio::ssl::context::pem);\n            ctx->use_tmp_dh_file(\"dh.pem\");\n\n            std::string ciphers;\n            if (mode == MOZILLA_MODERN) {\n                ciphers = \"ECDHE-ECDSA-AES256-GCM-SHA384:\"\n                          \"ECDHE-RSA-AES256-GCM-SHA384:\"\n                          \"ECDHE-ECDSA-CHACHA20-POLY1305:\"\n                          \"ECDHE-RSA-CHACHA20-POLY1305:\"\n                          \"ECDHE-ECDSA-AES128-GCM-SHA256:\"\n                          \"ECDHE-RSA-AES128-GCM-SHA256\";\n            } else {\n                ciphers = \"ECDHE-ECDSA-AES256-GCM-SHA384:\"\n                          \"ECDHE-RSA-AES256-GCM-SHA384:\"\n                          \"DHE-RSA-AES256-GCM-SHA384:\"\n                          \"ECDHE-ECDSA-AES128-GCM-SHA256:\"\n                          \"ECDHE-RSA-AES128-GCM-SHA256:\"\n                          \"DHE-RSA-AES128-GCM-SHA256\";\n            }\n\n            if (SSL_CTX_set_cipher_list(ctx->native_handle(), ciphers.c_str()) != 1) {\n                std::cerr << \"Error setting cipher list\" << std::endl;\n            }\n        } catch (std::exception& e) {\n            std::cerr << \"Error in on_tls_init: \" << e.what() << std::endl;\n        }\n\n        return ctx;\n    }\n\nprivate:\n    server m_server;\n};",
      "#include <websocketpp/config/asio.hpp>\n#include <websocketpp/server.hpp>\n#include <websocketpp/config/asio_tls.hpp>\n#include <iostream>\n#include <fstream>\n#include <sstream>\n\nenum tls_mode {\n    MOZILLA_INTERMEDIATE,\n    MOZILLA_MODERN\n};\n\ntypedef websocketpp::server<websocketpp::config::asio_tls> server;\ntypedef websocketpp::lib::shared_ptr<boost::asio::ssl::context> context_ptr;\ntypedef websocketpp::config::asio_tls::message_type::ptr message_ptr;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer() {\n        m_server.init_asio();\n        m_server.set_message_handler(websocketpp::lib::bind(\n            &WebSocketServer::on_message, this, websocketpp::lib::placeholders::_1, websocketpp::lib::placeholders::_2));\n        m_server.set_http_handler(websocketpp::lib::bind(\n            &WebSocketServer::on_http, this, websocketpp::lib::placeholders::_1));\n        m_server.set_tls_init_handler(websocketpp::lib::bind(\n            &WebSocketServer::on_tls_init, this, MOZILLA_INTERMEDIATE, websocketpp::lib::placeholders::_1));\n    }\n\n    void run(int port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    void on_message(websocketpp::connection_hdl hdl, message_ptr msg) {\n        m_server.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    void on_http(websocketpp::connection_hdl hdl) {\n        server::connection_ptr con = m_server.get_con_from_hdl(hdl);\n        con->set_body(\"Hello World!\");\n        con->set_status(websocketpp::http::status_code::ok);\n    }\n\n    std::string get_password() {\n        return \"password\";\n    }\n\n    context_ptr on_tls_init(tls_mode mode, websocketpp::connection_hdl hdl) {\n        context_ptr ctx = websocketpp::lib::make_shared<boost::asio::ssl::context>(boost::asio::ssl::context::tlsv12);\n\n        try {\n            if (mode == MOZILLA_MODERN) {\n                ctx->set_options(boost::asio::ssl::context::default_workarounds |\n                                 boost::asio::ssl::context::no_sslv2 |\n                                 boost::asio::ssl::context::no_sslv3 |\n                                 boost::asio::ssl::context::single_dh_use);\n            } else {\n                ctx->set_options(boost::asio::ssl::context::default_workarounds |\n                                 boost::asio::ssl::context::no_sslv2 |\n                                 boost::asio::ssl::context::single_dh_use);\n            }\n\n            ctx->set_password_callback(websocketpp::lib::bind(\n                &WebSocketServer::get_password, this));\n\n            ctx->use_certificate_chain_file(\"server.pem\");\n            ctx->use_private_key_file(\"server.pem\", boost::asio::ssl::context::pem);\n            ctx->use_tmp_dh_file(\"dh.pem\");\n\n            std::string ciphers;\n            if (mode == MOZILLA_MODERN) {\n                ciphers = \"ECDHE-ECDSA-AES256-GCM-SHA384:\"\n                          \"ECDHE-RSA-AES256-GCM-SHA384:\"\n                          \"ECDHE-ECDSA-CHACHA20-POLY1305:\"\n                          \"ECDHE-RSA-CHACHA20-POLY1305:\"\n                          \"ECDHE-ECDSA-AES128-GCM-SHA256:\"\n                          \"ECDHE-RSA-AES128-GCM-SHA256\";\n            } else {\n                ciphers = \"ECDHE-ECDSA-AES256-GCM-SHA384:\"\n                          \"ECDHE-RSA-AES256-GCM-SHA384:\"\n                          \"DHE-RSA-AES256-GCM-SHA384:\"\n                          \"ECDHE-ECDSA-AES128-GCM-SHA256:\"\n                          \"ECDHE-RSA-AES128-GCM-SHA256:\"\n                          \"DHE-RSA-AES128-GCM-SHA256\";\n            }\n\n            if (SSL_CTX_set_cipher_list(ctx->native_handle(), ciphers.c_str()) != 1) {\n                std::cerr << \"Error setting cipher list\" << std::endl;\n            }\n        } catch (std::exception& e) {\n            std::cerr << \"Error in TLS initialization: \" << e.what() << std::endl;\n        }\n\n        return ctx;\n    }\n\n    server m_server;\n};",
      "#include <websocketpp/config/asio.hpp>\n#include <websocketpp/server.hpp>\n#include <websocketpp/config/asio_tls.hpp>\n#include <iostream>\n#include <string>\n#include <memory>\n#include <openssl/ssl.h>\n\ntypedef websocketpp::server<websocketpp::config::asio_tls> server;\ntypedef websocketpp::config::asio_tls::message_type::ptr message_ptr;\ntypedef websocketpp::lib::shared_ptr<boost::asio::ssl::context> context_ptr;\n\nenum tls_mode {\n    MOZILLA_INTERMEDIATE,\n    MOZILLA_MODERN\n};\n\nclass WebSocketServer {\npublic:\n    WebSocketServer() {\n        m_server.init_asio();\n        m_server.set_message_handler(websocketpp::lib::bind(\n            &WebSocketServer::on_message, this, websocketpp::lib::placeholders::_1, websocketpp::lib::placeholders::_2));\n        m_server.set_http_handler(websocketpp::lib::bind(\n            &WebSocketServer::on_http, this, websocketpp::lib::placeholders::_1));\n        m_server.set_tls_init_handler(websocketpp::lib::bind(\n            &WebSocketServer::on_tls_init, this, MOZILLA_INTERMEDIATE, websocketpp::lib::placeholders::_1));\n    }\n\n    void run(int port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, message_ptr msg) {\n        m_server.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    void on_http(websocketpp::connection_hdl hdl) {\n        server::connection_ptr con = m_server.get_con_from_hdl(hdl);\n        con->set_body(\"Hello World!\");\n        con->set_status(websocketpp::http::status_code::ok);\n    }\n\n    std::string get_password() {\n        return \"test\";\n    }\n\n    context_ptr on_tls_init(tls_mode mode, websocketpp::connection_hdl hdl) {\n        context_ptr ctx = websocketpp::lib::make_shared<boost::asio::ssl::context>(boost::asio::ssl::context::tlsv12);\n\n        try {\n            if (mode == MOZILLA_MODERN) {\n                ctx->set_options(boost::asio::ssl::context::default_workarounds |\n                                 boost::asio::ssl::context::no_sslv2 |\n                                 boost::asio::ssl::context::no_sslv3 |\n                                 boost::asio::ssl::context::no_tlsv1 |\n                                 boost::asio::ssl::context::no_tlsv1_1 |\n                                 boost::asio::ssl::context::single_dh_use);\n            } else {\n                ctx->set_options(boost::asio::ssl::context::default_workarounds |\n                                 boost::asio::ssl::context::no_sslv2 |\n                                 boost::asio::ssl::context::no_sslv3 |\n                                 boost::asio::ssl::context::single_dh_use);\n            }\n\n            ctx->set_password_callback(websocketpp::lib::bind(\n                &WebSocketServer::get_password, this));\n            ctx->use_certificate_chain_file(\"server.pem\");\n            ctx->use_private_key_file(\"server.pem\", boost::asio::ssl::context::pem);\n        } catch (std::exception& e) {\n            std::cout << \"Error in on_tls_init: \" << e.what() << std::endl;\n        }\n        return ctx;\n    }\n\nprivate:\n    server m_server;\n};\n\nint main() {\n    WebSocketServer server;\n    server.run(9002);\n    return 0;\n}",
      "#include <websocketpp/config/asio.hpp>\n#include <websocketpp/server.hpp>\n#include <websocketpp/config/asio_tls.hpp>\n#include <iostream>\n#include <string>\n#include <memory>\n#include <openssl/ssl.h>\n\nenum tls_mode {\n    MOZILLA_INTERMEDIATE,\n    MOZILLA_MODERN\n};\n\nclass WebSocketServer {\npublic:\n    WebSocketServer() {\n        m_server.init_asio();\n        m_server.set_message_handler(bind(&WebSocketServer::on_message, this, ::_1, ::_2));\n        m_server.set_http_handler(bind(&WebSocketServer::on_http, this, ::_1));\n        m_server.set_tls_init_handler(bind(&WebSocketServer::on_tls_init, this, MOZILLA_INTERMEDIATE, ::_1));\n    }\n\n    void run(int port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    typedef websocketpp::server<websocketpp::config::asio_tls> server;\n    typedef server::message_ptr message_ptr;\n    typedef websocketpp::lib::shared_ptr<boost::asio::ssl::context> context_ptr;\n\n    server m_server;\n\n    void on_message(websocketpp::connection_hdl hdl, message_ptr msg) {\n        m_server.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    void on_http(websocketpp::connection_hdl hdl) {\n        server::connection_ptr con = m_server.get_con_from_hdl(hdl);\n        con->set_body(\"Hello World!\");\n        con->set_status(websocketpp::http::status_code::ok);\n    }\n\n    std::string get_password() {\n        return \"test\";\n    }\n\n    context_ptr on_tls_init(tls_mode mode, websocketpp::connection_hdl hdl) {\n        context_ptr ctx = websocketpp::lib::make_shared<boost::asio::ssl::context>(boost::asio::ssl::context::tlsv1_2);\n\n        try {\n            if (mode == MOZILLA_MODERN) {\n                ctx->set_options(boost::asio::ssl::context::default_workarounds |\n                                 boost::asio::ssl::context::no_sslv2 |\n                                 boost::asio::ssl::context::no_sslv3 |\n                                 boost::asio::ssl::context::no_tlsv1 |\n                                 boost::asio::ssl::context::no_tlsv1_1 |\n                                 boost::asio::ssl::context::single_dh_use);\n            } else {\n                ctx->set_options(boost::asio::ssl::context::default_workarounds |\n                                 boost::asio::ssl::context::no_sslv2 |\n                                 boost::asio::ssl::context::no_sslv3 |\n                                 boost::asio::ssl::context::single_dh_use);\n            }\n\n            ctx->set_password_callback(bind(&WebSocketServer::get_password, this));\n            ctx->use_certificate_chain_file(\"server.pem\");\n            ctx->use_private_key_file(\"server.pem\", boost::asio::ssl::context::pem);\n        } catch (std::exception& e) {\n            std::cerr << \"Error in on_tls_init: \" << e.what() << std::endl;\n        }\n\n        return ctx;\n    }\n};",
      "#include <websocketpp/config/asio.hpp>\n#include <websocketpp/server.hpp>\n#include <websocketpp/config/asio_tls.hpp>\n#include <iostream>\n#include <string>\n#include <memory>\n\nenum tls_mode {\n    MOZILLA_INTERMEDIATE,\n    MOZILLA_MODERN\n};\n\nclass WebSocketServer {\npublic:\n    WebSocketServer() {\n        m_server.init_asio();\n        m_server.set_message_handler(bind(&WebSocketServer::on_message, this, ::_1, ::_2));\n        m_server.set_http_handler(bind(&WebSocketServer::on_http, this, ::_1));\n        m_server.set_tls_init_handler(bind(&WebSocketServer::on_tls_init, this, MOZILLA_INTERMEDIATE, ::_1));\n    }\n\n    void run(int port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    typedef websocketpp::server<websocketpp::config::asio_tls> server;\n    typedef websocketpp::lib::shared_ptr<boost::asio::ssl::context> context_ptr;\n    typedef server::message_ptr message_ptr;\n\n    server m_server;\n\n    void on_message(websocketpp::connection_hdl hdl, message_ptr msg) {\n        m_server.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    void on_http(websocketpp::connection_hdl hdl) {\n        server::connection_ptr con = m_server.get_con_from_hdl(hdl);\n        con->set_body(\"Hello World!\");\n        con->set_status(websocketpp::http::status_code::ok);\n    }\n\n    std::string get_password() {\n        return \"test\";\n    }\n\n    context_ptr on_tls_init(tls_mode mode, websocketpp::connection_hdl hdl) {\n        context_ptr ctx = websocketpp::lib::make_shared<boost::asio::ssl::context>(boost::asio::ssl::context::tlsv1);\n\n        try {\n            if (mode == MOZILLA_MODERN) {\n                ctx->set_options(boost::asio::ssl::context::default_workarounds |\n                                 boost::asio::ssl::context::no_sslv2 |\n                                 boost::asio::ssl::context::no_sslv3 |\n                                 boost::asio::ssl::context::no_tlsv1 |\n                                 boost::asio::ssl::context::no_tlsv1_1 |\n                                 boost::asio::ssl::context::single_dh_use);\n            } else {\n                ctx->set_options(boost::asio::ssl::context::default_workarounds |\n                                 boost::asio::ssl::context::no_sslv2 |\n                                 boost::asio::ssl::context::no_sslv3 |\n                                 boost::asio::ssl::context::single_dh_use);\n            }\n\n            ctx->set_password_callback(bind(&WebSocketServer::get_password, this));\n            ctx->use_certificate_chain_file(\"server.pem\");\n            ctx->use_private_key_file(\"server.pem\", boost::asio::ssl::context::pem);\n            ctx->use_tmp_dh_file(\"dh.pem\");\n        } catch (std::exception& e) {\n            std::cout << \"Error in on_tls_init: \" << e.what() << std::endl;\n        }\n        return ctx;\n    }\n};\n\nint main() {\n    WebSocketServer server;\n    server.run(9002);\n    return 0;\n}",
      "#include <websocketpp/config/asio.hpp>\n#include <websocketpp/server.hpp>\n#include <websocketpp/config/asio_tls.hpp>\n#include <iostream>\n#include <string>\n#include <memory>\n#include <openssl/ssl.h>\n#include <openssl/err.h>\n\ntypedef websocketpp::server<websocketpp::config::asio_tls> server;\ntypedef websocketpp::lib::shared_ptr<websocketpp::lib::asio::ssl::context> context_ptr;\ntypedef websocketpp::config::asio::message_type::ptr message_ptr;\n\nenum tls_mode {\n    MOZILLA_INTERMEDIATE,\n    MOZILLA_MODERN\n};\n\nclass WebSocketServer {\npublic:\n    WebSocketServer() {\n        m_server.init_asio();\n        m_server.set_message_handler(websocketpp::lib::bind(\n            &WebSocketServer::on_message, this, websocketpp::lib::placeholders::_1, websocketpp::lib::placeholders::_2));\n        m_server.set_http_handler(websocketpp::lib::bind(\n            &WebSocketServer::on_http, this, websocketpp::lib::placeholders::_1));\n        m_server.set_tls_init_handler(websocketpp::lib::bind(\n            &WebSocketServer::on_tls_init, this, MOZILLA_INTERMEDIATE, websocketpp::lib::placeholders::_1));\n    }\n\n    void run(int port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, message_ptr msg) {\n        m_server.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    void on_http(websocketpp::connection_hdl hdl) {\n        server::connection_ptr con = m_server.get_con_from_hdl(hdl);\n        con->set_body(\"Hello World!\");\n        con->set_status(websocketpp::http::status_code::ok);\n    }\n\n    std::string get_password() {\n        return \"test\";\n    }\n\n    context_ptr on_tls_init(tls_mode mode, websocketpp::connection_hdl hdl) {\n        context_ptr ctx = websocketpp::lib::make_shared<websocketpp::lib::asio::ssl::context>(websocketpp::lib::asio::ssl::context::sslv23);\n\n        try {\n            if (mode == MOZILLA_MODERN) {\n                ctx->set_options(websocketpp::lib::asio::ssl::context::default_workarounds |\n                                 websocketpp::lib::asio::ssl::context::no_sslv2 |\n                                 websocketpp::lib::asio::ssl::context::no_sslv3 |\n                                 websocketpp::lib::asio::ssl::context::single_dh_use);\n                ctx->set_password_callback(websocketpp::lib::bind(&WebSocketServer::get_password, this));\n                ctx->use_certificate_chain_file(\"server.pem\");\n                ctx->use_private_key_file(\"server.pem\", websocketpp::lib::asio::ssl::context::pem);\n                ctx->use_tmp_dh_file(\"dh.pem\");\n            } else {\n                ctx->set_options(websocketpp::lib::asio::ssl::context::default_workarounds |\n                                 websocketpp::lib::asio::ssl::context::no_sslv2 |\n                                 websocketpp::lib::asio::ssl::context::no_sslv3 |\n                                 websocketpp::lib::asio::ssl::context::single_dh_use);\n                ctx->set_password_callback(websocketpp::lib::bind(&WebSocketServer::get_password, this));\n                ctx->use_certificate_chain_file(\"server.pem\");\n                ctx->use_private_key_file(\"server.pem\", websocketpp::lib::asio::ssl::context::pem);\n                ctx->use_tmp_dh_file(\"dh.pem\");\n            }\n        } catch (std::exception& e) {\n            std::cout << \"Error in context pointer: \" << e.what() << std::endl;\n        }\n\n        return ctx;\n    }\n\nprivate:\n    server m_server;\n};\n\nint main() {\n    WebSocketServer server;\n    server.run(9002);\n    return 0;\n}",
      "#include <websocketpp/config/asio.hpp>\n#include <websocketpp/server.hpp>\n#include <websocketpp/config/asio_tls.hpp>\n#include <iostream>\n#include <string>\n#include <memory>\n\nenum tls_mode {\n    MOZILLA_INTERMEDIATE,\n    MOZILLA_MODERN\n};\n\ntypedef websocketpp::server<websocketpp::config::asio_tls> server;\ntypedef websocketpp::lib::shared_ptr<boost::asio::ssl::context> context_ptr;\ntypedef websocketpp::config::asio_tls::message_type::ptr message_ptr;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer() {\n        m_server.init_asio();\n        m_server.set_message_handler(websocketpp::lib::bind(&WebSocketServer::on_message, this, websocketpp::lib::placeholders::_1, websocketpp::lib::placeholders::_2));\n        m_server.set_http_handler(websocketpp::lib::bind(&WebSocketServer::on_http, this, websocketpp::lib::placeholders::_1));\n        m_server.set_tls_init_handler(websocketpp::lib::bind(&WebSocketServer::on_tls_init, this, tls_mode::MOZILLA_INTERMEDIATE, websocketpp::lib::placeholders::_1));\n    }\n\n    void run(int port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, message_ptr msg) {\n        m_server.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    void on_http(websocketpp::connection_hdl hdl) {\n        server::connection_ptr con = m_server.get_con_from_hdl(hdl);\n        con->set_body(\"Hello World!\");\n        con->set_status(websocketpp::http::status_code::ok);\n    }\n\n    std::string get_password() {\n        return \"password\";\n    }\n\n    context_ptr on_tls_init(tls_mode mode, websocketpp::connection_hdl hdl) {\n        context_ptr ctx = websocketpp::lib::make_shared<boost::asio::ssl::context>(boost::asio::ssl::context::tlsv12);\n\n        try {\n            if (mode == MOZILLA_MODERN) {\n                ctx->set_options(boost::asio::ssl::context::default_workarounds |\n                                 boost::asio::ssl::context::no_sslv2 |\n                                 boost::asio::ssl::context::no_sslv3 |\n                                 boost::asio::ssl::context::single_dh_use);\n            } else {\n                ctx->set_options(boost::asio::ssl::context::default_workarounds |\n                                 boost::asio::ssl::context::no_sslv2 |\n                                 boost::asio::ssl::context::single_dh_use);\n            }\n\n            ctx->set_password_callback(websocketpp::lib::bind(&WebSocketServer::get_password, this));\n            ctx->use_certificate_chain_file(\"server.pem\");\n            ctx->use_private_key_file(\"server.pem\", boost::asio::ssl::context::pem);\n        } catch (std::exception& e) {\n            std::cout << \"Error in TLS Init: \" << e.what() << std::endl;\n        }\n\n        return ctx;\n    }\n\nprivate:\n    server m_server;\n};",
      "#include <websocketpp/config/asio.hpp>\n#include <websocketpp/server.hpp>\n#include <websocketpp/config/asio_tls.hpp>\n#include <iostream>\n#include <string>\n#include <memory>\n#include <openssl/ssl.h>\n\nenum tls_mode {\n    MOZILLA_INTERMEDIATE,\n    MOZILLA_MODERN\n};\n\ntypedef websocketpp::server<websocketpp::config::asio_tls> server;\ntypedef websocketpp::lib::shared_ptr<websocketpp::lib::asio::ssl::context> context_ptr;\ntypedef server::message_ptr message_ptr;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer() {\n        m_server.init_asio();\n        m_server.set_message_handler(bind(&WebSocketServer::on_message, this, ::_1, ::_2));\n        m_server.set_http_handler(bind(&WebSocketServer::on_http, this, ::_1));\n        m_server.set_tls_init_handler(bind(&WebSocketServer::on_tls_init, this, MOZILLA_INTERMEDIATE, ::_1));\n    }\n\n    void run(int port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, message_ptr msg) {\n        m_server.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    void on_http(websocketpp::connection_hdl hdl) {\n        server::connection_ptr con = m_server.get_con_from_hdl(hdl);\n        con->set_body(\"Hello World!\");\n        con->set_status(websocketpp::http::status_code::ok);\n    }\n\n    std::string get_password() {\n        return \"test\";\n    }\n\n    context_ptr on_tls_init(tls_mode mode, websocketpp::connection_hdl hdl) {\n        context_ptr ctx = websocketpp::lib::make_shared<websocketpp::lib::asio::ssl::context>(websocketpp::lib::asio::ssl::context::tlsv12);\n\n        try {\n            if (mode == MOZILLA_MODERN) {\n                ctx->set_options(websocketpp::lib::asio::ssl::context::default_workarounds |\n                                 websocketpp::lib::asio::ssl::context::no_sslv2 |\n                                 websocketpp::lib::asio::ssl::context::no_sslv3 |\n                                 websocketpp::lib::asio::ssl::context::no_tlsv1 |\n                                 websocketpp::lib::asio::ssl::context::no_tlsv1_1 |\n                                 websocketpp::lib::asio::ssl::context::single_dh_use);\n            } else {\n                ctx->set_options(websocketpp::lib::asio::ssl::context::default_workarounds |\n                                 websocketpp::lib::asio::ssl::context::no_sslv2 |\n                                 websocketpp::lib::asio::ssl::context::no_sslv3 |\n                                 websocketpp::lib::asio::ssl::context::single_dh_use);\n            }\n\n            ctx->set_password_callback(bind(&WebSocketServer::get_password, this));\n            ctx->use_certificate_chain_file(\"server.pem\");\n            ctx->use_private_key_file(\"server.pem\", websocketpp::lib::asio::ssl::context::pem);\n        } catch (std::exception& e) {\n            std::cout << \"Error in on_tls_init: \" << e.what() << std::endl;\n        }\n        return ctx;\n    }\n\nprivate:\n    server m_server;\n};\n\nint main() {\n    WebSocketServer server;\n    server.run(9002);\n    return 0;\n}",
      "#include <websocketpp/config/asio.hpp>\n#include <websocketpp/server.hpp>\n#include <websocketpp/config/asio_tls.hpp>\n#include <iostream>\n#include <string>\n#include <memory>\n\ntypedef websocketpp::server<websocketpp::config::asio_tls> server;\ntypedef websocketpp::lib::shared_ptr<websocketpp::lib::asio::ssl::context> context_ptr;\ntypedef websocketpp::config::asio_tls::message_type::ptr message_ptr;\n\nenum tls_mode {\n    MOZILLA_INTERMEDIATE,\n    MOZILLA_MODERN\n};\n\nclass WebSocketServer {\npublic:\n    WebSocketServer()\n        : m_server() {\n        m_server.init_asio();\n        m_server.set_message_handler(bind(&WebSocketServer::on_message, this, ::_1, ::_2));\n        m_server.set_http_handler(bind(&WebSocketServer::on_http, this, ::_1));\n        m_server.set_tls_init_handler(bind(&WebSocketServer::on_tls_init, this, MOZILLA_INTERMEDIATE, ::_1));\n    }\n\n    void run(int port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, message_ptr msg) {\n        m_server.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    void on_http(websocketpp::connection_hdl hdl) {\n        server::connection_ptr con = m_server.get_con_from_hdl(hdl);\n        con->set_body(\"Hello World!\");\n        con->set_status(websocketpp::http::status_code::ok);\n    }\n\n    std::string get_password() {\n        return \"test\";\n    }\n\n    context_ptr on_tls_init(tls_mode mode, websocketpp::connection_hdl hdl) {\n        context_ptr ctx = websocketpp::lib::make_shared<websocketpp::lib::asio::ssl::context>(websocketpp::lib::asio::ssl::context::tlsv12);\n\n        try {\n            if (mode == MOZILLA_MODERN) {\n                ctx->set_options(websocketpp::lib::asio::ssl::context::default_workarounds |\n                                 websocketpp::lib::asio::ssl::context::no_sslv2 |\n                                 websocketpp::lib::asio::ssl::context::no_sslv3 |\n                                 websocketpp::lib::asio::ssl::context::single_dh_use);\n            } else {\n                ctx->set_options(websocketpp::lib::asio::ssl::context::default_workarounds |\n                                 websocketpp::lib::asio::ssl::context::no_sslv2 |\n                                 websocketpp::lib::asio::ssl::context::no_sslv3 |\n                                 websocketpp::lib::asio::ssl::context::single_dh_use |\n                                 websocketpp::lib::asio::ssl::context::no_tlsv1 |\n                                 websocketpp::lib::asio::ssl::context::no_tlsv1_1);\n            }\n            ctx->set_password_callback(bind(&WebSocketServer::get_password, this));\n            ctx->use_certificate_chain_file(\"server.pem\");\n            ctx->use_private_key_file(\"server.pem\", websocketpp::lib::asio::ssl::context::pem);\n        } catch (std::exception& e) {\n            std::cout << \"Error in context pointer: \" << e.what() << std::endl;\n        }\n        return ctx;\n    }\n\nprivate:\n    server m_server;\n};\n\nint main() {\n    WebSocketServer server;\n    server.run(9002);\n    return 0;\n}",
      "#include <websocketpp/config/asio.hpp>\n#include <websocketpp/server.hpp>\n#include <websocketpp/config/asio_tls.hpp>\n#include <iostream>\n#include <string>\n#include <fstream>\n\nenum tls_mode {\n    MOZILLA_INTERMEDIATE,\n    MOZILLA_MODERN\n};\n\nclass WebSocketServer {\npublic:\n    WebSocketServer() {\n        m_server.init_asio();\n        m_server.set_message_handler(bind(&WebSocketServer::on_message, this, ::_1, ::_2));\n        m_server.set_http_handler(bind(&WebSocketServer::on_http, this, ::_1));\n        m_server.set_tls_init_handler(bind(&WebSocketServer::on_tls_init, this, tls_mode::MOZILLA_INTERMEDIATE, ::_1));\n    }\n\n    void run(int port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    typedef websocketpp::server<websocketpp::config::asio_tls> server;\n    typedef websocketpp::lib::shared_ptr<boost::asio::ssl::context> context_ptr;\n    typedef server::message_ptr message_ptr;\n\n    server m_server;\n\n    void on_message(websocketpp::connection_hdl hdl, message_ptr msg) {\n        m_server.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    void on_http(websocketpp::connection_hdl hdl) {\n        server::connection_ptr con = m_server.get_con_from_hdl(hdl);\n        con->set_body(\"Hello World!\");\n        con->set_status(websocketpp::http::status_code::ok);\n    }\n\n    std::string get_password() {\n        return \"password\";\n    }\n\n    context_ptr on_tls_init(tls_mode mode, websocketpp::connection_hdl hdl) {\n        context_ptr ctx = websocketpp::lib::make_shared<boost::asio::ssl::context>(boost::asio::ssl::context::tlsv12);\n\n        try {\n            ctx->set_options(boost::asio::ssl::context::default_workarounds |\n                             boost::asio::ssl::context::no_sslv2 |\n                             boost::asio::ssl::context::no_sslv3 |\n                             boost::asio::ssl::context::single_dh_use);\n\n            ctx->set_password_callback(bind(&WebSocketServer::get_password, this));\n\n            ctx->use_certificate_chain_file(\"server.pem\");\n            ctx->use_private_key_file(\"server.pem\", boost::asio::ssl::context::pem);\n            ctx->use_tmp_dh_file(\"dh.pem\");\n\n            if (mode == MOZILLA_MODERN) {\n                SSL_CTX_set_cipher_list(ctx->native_handle(), \"ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384\");\n            } else {\n                SSL_CTX_set_cipher_list(ctx->native_handle(), \"ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256\");\n            }\n        } catch (std::exception& e) {\n            std::cerr << \"Error setting up TLS: \" << e.what() << std::endl;\n        }\n\n        return ctx;\n    }\n};"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 49,
    "Instruction": "Task Description: Implement a WebSocket broadcast server in C++ using the WebSocket++ library that can handle multiple client connections, manage subscriptions, and broadcast messages to all connected clients.\n\nClass Description: The `broadcast_server` class implements a WebSocket server that maintains a set of active connections and can broadcast messages to all connected clients. It handles connection events (open/close) and message events using a thread-safe action queue system.\n\nAttributes:\n- m_server: [server] - WebSocket++ server instance configured with ASIO\n- m_connections: [con_list] - Set of active WebSocket connection handles\n- m_actions: [std::queue<action>] - Queue of pending actions to process\n- m_action_lock: [mutex] - Mutex for protecting access to the action queue\n- m_connection_lock: [mutex] - Mutex for protecting access to the connections set\n- m_action_cond: [condition_variable] - Condition variable for action queue notification\n\nMethods:\n- broadcast_server() -> [constructor] - Initializes the WebSocket server and sets up event handlers\n- run(uint16_t port) -> [void] - Starts the server listening on the specified port and begins accepting connections\n- on_open(connection_hdl hdl) -> [void] - Handler for new WebSocket connections (adds SUBSCRIBE action)\n- on_close(connection_hdl hdl) -> [void] - Handler for closed WebSocket connections (adds UNSUBSCRIBE action)\n- on_message(connection_hdl hdl, server::message_ptr msg) -> [void] - Handler for incoming messages (adds MESSAGE action)\n- process_messages() -> [void] - Processes actions from the queue (manages subscriptions and broadcasts messages)",
    "Canonical_solution": "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <websocketpp/common/thread.hpp>\n#include <iostream>\n#include <set>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\nusing websocketpp::connection_hdl;\nusing websocketpp::lib::placeholders::_1;\nusing websocketpp::lib::placeholders::_2;\nusing websocketpp::lib::bind;\nusing websocketpp::lib::thread;\nusing websocketpp::lib::mutex;\nusing websocketpp::lib::lock_guard;\nusing websocketpp::lib::unique_lock;\nusing websocketpp::lib::condition_variable;\n\nenum action_type {\n    SUBSCRIBE,\n    UNSUBSCRIBE,\n    MESSAGE\n};\n\nstruct action {\n    action(action_type t, connection_hdl h) : type(t), hdl(h) {}\n    action(action_type t, connection_hdl h, server::message_ptr m)\n      : type(t), hdl(h), msg(m) {}\n\n    action_type type;\n    websocketpp::connection_hdl hdl;\n    server::message_ptr msg;\n};\n\nclass broadcast_server {\npublic:\n    broadcast_server() {\n        m_server.init_asio();\n        m_server.set_open_handler(bind(&broadcast_server::on_open,this,::_1));\n        m_server.set_close_handler(bind(&broadcast_server::on_close,this,::_1));\n        m_server.set_message_handler(bind(&broadcast_server::on_message,this,::_1,::_2));\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        try {\n            m_server.run();\n        } catch (const std::exception & e) {\n            std::cout << e.what() << std::endl;\n        }\n    }\n\n    void on_open(connection_hdl hdl) {\n        {\n            lock_guard<mutex> guard(m_action_lock);\n            m_actions.push(action(SUBSCRIBE,hdl));\n        }\n        m_action_cond.notify_one();\n    }\n\n    void on_close(connection_hdl hdl) {\n        {\n            lock_guard<mutex> guard(m_action_lock);\n            m_actions.push(action(UNSUBSCRIBE,hdl));\n        }\n        m_action_cond.notify_one();\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        {\n            lock_guard<mutex> guard(m_action_lock);\n            m_actions.push(action(MESSAGE,hdl,msg));\n        }\n        m_action_cond.notify_one();\n    }\n\n    void process_messages() {\n        while(1) {\n            unique_lock<mutex> lock(m_action_lock);\n            while(m_actions.empty()) {\n                m_action_cond.wait(lock);\n            }\n\n            action a = m_actions.front();\n            m_actions.pop();\n            lock.unlock();\n\n            if (a.type == SUBSCRIBE) {\n                lock_guard<mutex> guard(m_connection_lock);\n                m_connections.insert(a.hdl);\n            } else if (a.type == UNSUBSCRIBE) {\n                lock_guard<mutex> guard(m_connection_lock);\n                m_connections.erase(a.hdl);\n            } else if (a.type == MESSAGE) {\n                lock_guard<mutex> guard(m_connection_lock);\n                con_list::iterator it;\n                for (it = m_connections.begin(); it != m_connections.end(); ++it) {\n                    m_server.send(*it,a.msg);\n                }\n            }\n        }\n    }\n\nprivate:\n    typedef std::set<connection_hdl,std::owner_less<connection_hdl> > con_list;\n    server m_server;\n    con_list m_connections;\n    std::queue<action> m_actions;\n    mutex m_action_lock;\n    mutex m_connection_lock;\n    condition_variable m_action_cond;\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 154,
    "matched_results": [
      "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <set>\n#include <queue>\n#include <mutex>\n#include <condition_variable>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef server::message_ptr message_ptr;\ntypedef websocketpp::connection_hdl connection_hdl;\n\nenum action_type { SUBSCRIBE, UNSUBSCRIBE, MESSAGE };\n\nstruct action {\n    action(action_type t, connection_hdl h, message_ptr m = nullptr)\n        : type(t), hdl(h), msg(m) {}\n    action_type type;\n    connection_hdl hdl;\n    message_ptr msg;\n};\n\nclass broadcast_server {\npublic:\n    broadcast_server() {\n        m_server.init_asio();\n        m_server.set_open_handler(bind(&broadcast_server::on_open, this, ::_1));\n        m_server.set_close_handler(bind(&broadcast_server::on_close, this, ::_1));\n        m_server.set_message_handler(bind(&broadcast_server::on_message, this, ::_1, ::_2));\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\n    void on_open(connection_hdl hdl) {\n        std::lock_guard<std::mutex> lock(m_action_lock);\n        m_actions.push(action(SUBSCRIBE, hdl));\n        m_action_cond.notify_one();\n    }\n\n    void on_close(connection_hdl hdl) {\n        std::lock_guard<std::mutex> lock(m_action_lock);\n        m_actions.push(action(UNSUBSCRIBE, hdl));\n        m_action_cond.notify_one();\n    }\n\n    void on_message(connection_hdl hdl, message_ptr msg) {\n        std::lock_guard<std::mutex> lock(m_action_lock);\n        m_actions.push(action(MESSAGE, hdl, msg));\n        m_action_cond.notify_one();\n    }\n\n    void process_messages() {\n        while (true) {\n            std::unique_lock<std::mutex> lock(m_action_lock);\n            while (m_actions.empty()) {\n                m_action_cond.wait(lock);\n            }\n\n            action a = m_actions.front();\n            m_actions.pop();\n            lock.unlock();\n\n            if (a.type == SUBSCRIBE) {\n                std::lock_guard<std::mutex> connection_lock(m_connection_lock);\n                m_connections.insert(a.hdl);\n            } else if (a.type == UNSUBSCRIBE) {\n                std::lock_guard<std::mutex> connection_lock(m_connection_lock);\n                m_connections.erase(a.hdl);\n            } else if (a.type == MESSAGE) {\n                std::lock_guard<std::mutex> connection_lock(m_connection_lock);\n                for (auto it : m_connections) {\n                    m_server.send(it, a.msg->get_payload(), a.msg->get_opcode());\n                }\n            }\n        }\n    }\n\nprivate:\n    server m_server;\n    std::set<connection_hdl, std::owner_less<connection_hdl>> m_connections;\n    std::queue<action> m_actions;\n    std::mutex m_action_lock;\n    std::mutex m_connection_lock;\n    std::condition_variable m_action_cond;\n};",
      "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <set>\n#include <queue>\n#include <mutex>\n#include <condition_variable>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef server::message_ptr message_ptr;\ntypedef websocketpp::connection_hdl connection_hdl;\n\nenum action_type { SUBSCRIBE, UNSUBSCRIBE, MESSAGE };\n\nstruct action {\n    action(action_type t, connection_hdl h, message_ptr m = message_ptr())\n        : type(t), hdl(h), msg(m) {}\n    action_type type;\n    connection_hdl hdl;\n    message_ptr msg;\n};\n\nclass broadcast_server {\npublic:\n    broadcast_server() {\n        m_server.init_asio();\n        m_server.set_open_handler(bind(&broadcast_server::on_open, this, ::_1));\n        m_server.set_close_handler(bind(&broadcast_server::on_close, this, ::_1));\n        m_server.set_message_handler(bind(&broadcast_server::on_message, this, ::_1, ::_2));\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\n    void on_open(connection_hdl hdl) {\n        std::lock_guard<std::mutex> lock(m_action_lock);\n        m_actions.push(action(SUBSCRIBE, hdl));\n        m_action_cond.notify_one();\n    }\n\n    void on_close(connection_hdl hdl) {\n        std::lock_guard<std::mutex> lock(m_action_lock);\n        m_actions.push(action(UNSUBSCRIBE, hdl));\n        m_action_cond.notify_one();\n    }\n\n    void on_message(connection_hdl hdl, message_ptr msg) {\n        std::lock_guard<std::mutex> lock(m_action_lock);\n        m_actions.push(action(MESSAGE, hdl, msg));\n        m_action_cond.notify_one();\n    }\n\n    void process_messages() {\n        while (true) {\n            std::unique_lock<std::mutex> lock(m_action_lock);\n            while (m_actions.empty()) {\n                m_action_cond.wait(lock);\n            }\n\n            action a = m_actions.front();\n            m_actions.pop();\n\n            lock.unlock();\n\n            if (a.type == SUBSCRIBE) {\n                std::lock_guard<std::mutex> guard(m_connection_lock);\n                m_connections.insert(a.hdl);\n            } else if (a.type == UNSUBSCRIBE) {\n                std::lock_guard<std::mutex> guard(m_connection_lock);\n                m_connections.erase(a.hdl);\n            } else if (a.type == MESSAGE) {\n                std::lock_guard<std::mutex> guard(m_connection_lock);\n                for (auto it : m_connections) {\n                    m_server.send(it, a.msg->get_payload(), a.msg->get_opcode());\n                }\n            }\n        }\n    }\n\nprivate:\n    server m_server;\n    std::set<connection_hdl, std::owner_less<connection_hdl>> m_connections;\n    std::queue<action> m_actions;\n    std::mutex m_action_lock;\n    std::mutex m_connection_lock;\n    std::condition_variable m_action_cond;\n};",
      "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <set>\n#include <queue>\n#include <mutex>\n#include <condition_variable>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef server::message_ptr message_ptr;\ntypedef websocketpp::connection_hdl connection_hdl;\n\nenum action_type { SUBSCRIBE, UNSUBSCRIBE, MESSAGE };\n\nstruct action {\n    action(action_type t, connection_hdl h, message_ptr m = nullptr) \n        : type(t), hdl(h), msg(m) {}\n    action_type type;\n    connection_hdl hdl;\n    message_ptr msg;\n};\n\nclass broadcast_server {\npublic:\n    broadcast_server() {\n        m_server.init_asio();\n        m_server.set_open_handler(bind(&broadcast_server::on_open, this, ::_1));\n        m_server.set_close_handler(bind(&broadcast_server::on_close, this, ::_1));\n        m_server.set_message_handler(bind(&broadcast_server::on_message, this, ::_1, ::_2));\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\n    void on_open(connection_hdl hdl) {\n        std::lock_guard<std::mutex> lock(m_action_lock);\n        m_actions.push(action(SUBSCRIBE, hdl));\n        m_action_cond.notify_one();\n    }\n\n    void on_close(connection_hdl hdl) {\n        std::lock_guard<std::mutex> lock(m_action_lock);\n        m_actions.push(action(UNSUBSCRIBE, hdl));\n        m_action_cond.notify_one();\n    }\n\n    void on_message(connection_hdl hdl, message_ptr msg) {\n        std::lock_guard<std::mutex> lock(m_action_lock);\n        m_actions.push(action(MESSAGE, hdl, msg));\n        m_action_cond.notify_one();\n    }\n\n    void process_messages() {\n        while (true) {\n            std::unique_lock<std::mutex> lock(m_action_lock);\n            while (m_actions.empty()) {\n                m_action_cond.wait(lock);\n            }\n\n            action a = m_actions.front();\n            m_actions.pop();\n            lock.unlock();\n\n            if (a.type == SUBSCRIBE) {\n                std::lock_guard<std::mutex> lock(m_connection_lock);\n                m_connections.insert(a.hdl);\n            } else if (a.type == UNSUBSCRIBE) {\n                std::lock_guard<std::mutex> lock(m_connection_lock);\n                m_connections.erase(a.hdl);\n            } else if (a.type == MESSAGE) {\n                std::lock_guard<std::mutex> lock(m_connection_lock);\n                for (auto it : m_connections) {\n                    m_server.send(it, a.msg->get_payload(), a.msg->get_opcode());\n                }\n            }\n        }\n    }\n\nprivate:\n    server m_server;\n    std::set<connection_hdl, std::owner_less<connection_hdl>> m_connections;\n    std::queue<action> m_actions;\n    std::mutex m_action_lock;\n    std::mutex m_connection_lock;\n    std::condition_variable m_action_cond;\n};",
      "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <set>\n#include <queue>\n#include <mutex>\n#include <condition_variable>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef server::message_ptr message_ptr;\ntypedef websocketpp::connection_hdl connection_hdl;\n\nenum action_type { SUBSCRIBE, UNSUBSCRIBE, MESSAGE };\n\nstruct action {\n    action(action_type t, connection_hdl h, message_ptr m = nullptr)\n        : type(t), hdl(h), msg(m) {}\n    action_type type;\n    connection_hdl hdl;\n    message_ptr msg;\n};\n\nclass broadcast_server {\npublic:\n    broadcast_server() {\n        m_server.init_asio();\n        m_server.set_open_handler(bind(&broadcast_server::on_open, this, std::placeholders::_1));\n        m_server.set_close_handler(bind(&broadcast_server::on_close, this, std::placeholders::_1));\n        m_server.set_message_handler(bind(&broadcast_server::on_message, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        std::thread(&broadcast_server::process_messages, this).detach();\n        m_server.run();\n    }\n\n    void on_open(connection_hdl hdl) {\n        std::lock_guard<std::mutex> lock(m_action_lock);\n        m_actions.push(action(SUBSCRIBE, hdl));\n        m_action_cond.notify_one();\n    }\n\n    void on_close(connection_hdl hdl) {\n        std::lock_guard<std::mutex> lock(m_action_lock);\n        m_actions.push(action(UNSUBSCRIBE, hdl));\n        m_action_cond.notify_one();\n    }\n\n    void on_message(connection_hdl hdl, message_ptr msg) {\n        std::lock_guard<std::mutex> lock(m_action_lock);\n        m_actions.push(action(MESSAGE, hdl, msg));\n        m_action_cond.notify_one();\n    }\n\n    void process_messages() {\n        while (true) {\n            std::unique_lock<std::mutex> lock(m_action_lock);\n            while (m_actions.empty()) {\n                m_action_cond.wait(lock);\n            }\n\n            action a = m_actions.front();\n            m_actions.pop();\n            lock.unlock();\n\n            if (a.type == SUBSCRIBE) {\n                std::lock_guard<std::mutex> con_lock(m_connection_lock);\n                m_connections.insert(a.hdl);\n            } else if (a.type == UNSUBSCRIBE) {\n                std::lock_guard<std::mutex> con_lock(m_connection_lock);\n                m_connections.erase(a.hdl);\n            } else if (a.type == MESSAGE) {\n                std::lock_guard<std::mutex> con_lock(m_connection_lock);\n                for (auto it : m_connections) {\n                    m_server.send(it, a.msg->get_payload(), a.msg->get_opcode());\n                }\n            }\n        }\n    }\n\nprivate:\n    server m_server;\n    std::set<connection_hdl, std::owner_less<connection_hdl>> m_connections;\n    std::queue<action> m_actions;\n    std::mutex m_action_lock;\n    std::mutex m_connection_lock;\n    std::condition_variable m_action_cond;\n};",
      "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <set>\n#include <queue>\n#include <mutex>\n#include <condition_variable>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef server::message_ptr message_ptr;\ntypedef websocketpp::connection_hdl connection_hdl;\n\nclass broadcast_server {\npublic:\n    broadcast_server() {\n        m_server.init_asio();\n        m_server.set_open_handler(bind(&broadcast_server::on_open, this, ::_1));\n        m_server.set_close_handler(bind(&broadcast_server::on_close, this, ::_1));\n        m_server.set_message_handler(bind(&broadcast_server::on_message, this, ::_1, ::_2));\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\n    void on_open(connection_hdl hdl) {\n        std::lock_guard<std::mutex> lock(m_action_lock);\n        m_actions.push(action(SUBSCRIBE, hdl));\n        m_action_cond.notify_one();\n    }\n\n    void on_close(connection_hdl hdl) {\n        std::lock_guard<std::mutex> lock(m_action_lock);\n        m_actions.push(action(UNSUBSCRIBE, hdl));\n        m_action_cond.notify_one();\n    }\n\n    void on_message(connection_hdl hdl, message_ptr msg) {\n        std::lock_guard<std::mutex> lock(m_action_lock);\n        m_actions.push(action(MESSAGE, hdl, msg));\n        m_action_cond.notify_one();\n    }\n\n    void process_messages() {\n        while (true) {\n            std::unique_lock<std::mutex> lock(m_action_lock);\n            while (m_actions.empty()) {\n                m_action_cond.wait(lock);\n            }\n\n            action a = m_actions.front();\n            m_actions.pop();\n            lock.unlock();\n\n            if (a.type == SUBSCRIBE) {\n                std::lock_guard<std::mutex> con_lock(m_connection_lock);\n                m_connections.insert(a.hdl);\n            } else if (a.type == UNSUBSCRIBE) {\n                std::lock_guard<std::mutex> con_lock(m_connection_lock);\n                m_connections.erase(a.hdl);\n            } else if (a.type == MESSAGE) {\n                std::lock_guard<std::mutex> con_lock(m_connection_lock);\n                for (auto it : m_connections) {\n                    m_server.send(it, a.msg->get_payload(), a.msg->get_opcode());\n                }\n            }\n        }\n    }\n\nprivate:\n    enum action_type { SUBSCRIBE, UNSUBSCRIBE, MESSAGE };\n\n    struct action {\n        action(action_type t, connection_hdl h) : type(t), hdl(h) {}\n        action(action_type t, connection_hdl h, message_ptr m) : type(t), hdl(h), msg(m) {}\n\n        action_type type;\n        connection_hdl hdl;\n        message_ptr msg;\n    };\n\n    server m_server;\n    std::set<connection_hdl, std::owner_less<connection_hdl>> m_connections;\n    std::queue<action> m_actions;\n    std::mutex m_action_lock;\n    std::mutex m_connection_lock;\n    std::condition_variable m_action_cond;\n};",
      "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <set>\n#include <queue>\n#include <mutex>\n#include <condition_variable>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef server::message_ptr message_ptr;\ntypedef websocketpp::connection_hdl connection_hdl;\n\nenum action_type { SUBSCRIBE, UNSUBSCRIBE, MESSAGE };\n\nstruct action {\n    action(action_type t, connection_hdl h, message_ptr m = nullptr)\n        : type(t), hdl(h), msg(m) {}\n    action_type type;\n    connection_hdl hdl;\n    message_ptr msg;\n};\n\nclass broadcast_server {\npublic:\n    broadcast_server() {\n        m_server.init_asio();\n        m_server.set_open_handler(bind(&broadcast_server::on_open, this, ::_1));\n        m_server.set_close_handler(bind(&broadcast_server::on_close, this, ::_1));\n        m_server.set_message_handler(bind(&broadcast_server::on_message, this, ::_1, ::_2));\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\n    void on_open(connection_hdl hdl) {\n        std::lock_guard<std::mutex> lock(m_action_lock);\n        m_actions.push(action(SUBSCRIBE, hdl));\n        m_action_cond.notify_one();\n    }\n\n    void on_close(connection_hdl hdl) {\n        std::lock_guard<std::mutex> lock(m_action_lock);\n        m_actions.push(action(UNSUBSCRIBE, hdl));\n        m_action_cond.notify_one();\n    }\n\n    void on_message(connection_hdl hdl, message_ptr msg) {\n        std::lock_guard<std::mutex> lock(m_action_lock);\n        m_actions.push(action(MESSAGE, hdl, msg));\n        m_action_cond.notify_one();\n    }\n\n    void process_messages() {\n        while (true) {\n            std::unique_lock<std::mutex> lock(m_action_lock);\n            while (m_actions.empty()) {\n                m_action_cond.wait(lock);\n            }\n\n            action a = m_actions.front();\n            m_actions.pop();\n            lock.unlock();\n\n            if (a.type == SUBSCRIBE) {\n                std::lock_guard<std::mutex> lock(m_connection_lock);\n                m_connections.insert(a.hdl);\n            } else if (a.type == UNSUBSCRIBE) {\n                std::lock_guard<std::mutex> lock(m_connection_lock);\n                m_connections.erase(a.hdl);\n            } else if (a.type == MESSAGE) {\n                std::lock_guard<std::mutex> lock(m_connection_lock);\n                for (auto it : m_connections) {\n                    m_server.send(it, a.msg->get_payload(), websocketpp::frame::opcode::text);\n                }\n            }\n        }\n    }\n\nprivate:\n    server m_server;\n    std::set<connection_hdl, std::owner_less<connection_hdl>> m_connections;\n    std::queue<action> m_actions;\n    std::mutex m_action_lock;\n    std::mutex m_connection_lock;\n    std::condition_variable m_action_cond;\n};",
      "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <set>\n#include <queue>\n#include <mutex>\n#include <condition_variable>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef server::message_ptr message_ptr;\ntypedef websocketpp::connection_hdl connection_hdl;\n\nenum action_type { SUBSCRIBE, UNSUBSCRIBE, MESSAGE };\n\nstruct action {\n    action(action_type t, connection_hdl h, message_ptr m = nullptr)\n        : type(t), hdl(h), msg(m) {}\n    action_type type;\n    connection_hdl hdl;\n    message_ptr msg;\n};\n\nclass broadcast_server {\npublic:\n    broadcast_server() {\n        m_server.init_asio();\n        m_server.set_open_handler(bind(&broadcast_server::on_open, this, std::placeholders::_1));\n        m_server.set_close_handler(bind(&broadcast_server::on_close, this, std::placeholders::_1));\n        m_server.set_message_handler(bind(&broadcast_server::on_message, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\n    void on_open(connection_hdl hdl) {\n        std::lock_guard<std::mutex> lock(m_action_lock);\n        m_actions.push(action(SUBSCRIBE, hdl));\n        m_action_cond.notify_one();\n    }\n\n    void on_close(connection_hdl hdl) {\n        std::lock_guard<std::mutex> lock(m_action_lock);\n        m_actions.push(action(UNSUBSCRIBE, hdl));\n        m_action_cond.notify_one();\n    }\n\n    void on_message(connection_hdl hdl, message_ptr msg) {\n        std::lock_guard<std::mutex> lock(m_action_lock);\n        m_actions.push(action(MESSAGE, hdl, msg));\n        m_action_cond.notify_one();\n    }\n\n    void process_messages() {\n        while (true) {\n            std::unique_lock<std::mutex> lock(m_action_lock);\n            while (m_actions.empty()) {\n                m_action_cond.wait(lock);\n            }\n\n            action a = m_actions.front();\n            m_actions.pop();\n            lock.unlock();\n\n            if (a.type == SUBSCRIBE) {\n                std::lock_guard<std::mutex> guard(m_connection_lock);\n                m_connections.insert(a.hdl);\n            } else if (a.type == UNSUBSCRIBE) {\n                std::lock_guard<std::mutex> guard(m_connection_lock);\n                m_connections.erase(a.hdl);\n            } else if (a.type == MESSAGE) {\n                std::lock_guard<std::mutex> guard(m_connection_lock);\n                for (auto it : m_connections) {\n                    m_server.send(it, a.msg->get_payload(), a.msg->get_opcode());\n                }\n            }\n        }\n    }\n\nprivate:\n    server m_server;\n    std::set<connection_hdl, std::owner_less<connection_hdl>> m_connections;\n    std::queue<action> m_actions;\n    std::mutex m_action_lock;\n    std::mutex m_connection_lock;\n    std::condition_variable m_action_cond;\n};\n\nint main() {\n    broadcast_server server_instance;\n    std::thread t(&broadcast_server::process_messages, &server_instance);\n    server_instance.run(9002);\n    t.join();\n    return 0;\n}",
      "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <set>\n#include <queue>\n#include <mutex>\n#include <condition_variable>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef server::message_ptr message_ptr;\ntypedef websocketpp::connection_hdl connection_hdl;\n\nenum action_type { SUBSCRIBE, UNSUBSCRIBE, MESSAGE };\n\nstruct action {\n    action(action_type t, connection_hdl h, message_ptr m = nullptr)\n        : type(t), hdl(h), msg(m) {}\n    action_type type;\n    connection_hdl hdl;\n    message_ptr msg;\n};\n\nclass broadcast_server {\npublic:\n    broadcast_server() {\n        m_server.init_asio();\n        m_server.set_open_handler(bind(&broadcast_server::on_open, this, ::_1));\n        m_server.set_close_handler(bind(&broadcast_server::on_close, this, ::_1));\n        m_server.set_message_handler(bind(&broadcast_server::on_message, this, ::_1, ::_2));\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\n    void on_open(connection_hdl hdl) {\n        std::lock_guard<std::mutex> lock(m_action_lock);\n        m_actions.push(action(SUBSCRIBE, hdl));\n        m_action_cond.notify_one();\n    }\n\n    void on_close(connection_hdl hdl) {\n        std::lock_guard<std::mutex> lock(m_action_lock);\n        m_actions.push(action(UNSUBSCRIBE, hdl));\n        m_action_cond.notify_one();\n    }\n\n    void on_message(connection_hdl hdl, message_ptr msg) {\n        std::lock_guard<std::mutex> lock(m_action_lock);\n        m_actions.push(action(MESSAGE, hdl, msg));\n        m_action_cond.notify_one();\n    }\n\n    void process_messages() {\n        while (true) {\n            std::unique_lock<std::mutex> lock(m_action_lock);\n            while (m_actions.empty()) {\n                m_action_cond.wait(lock);\n            }\n\n            action a = m_actions.front();\n            m_actions.pop();\n            lock.unlock();\n\n            if (a.type == SUBSCRIBE) {\n                std::lock_guard<std::mutex> guard(m_connection_lock);\n                m_connections.insert(a.hdl);\n            } else if (a.type == UNSUBSCRIBE) {\n                std::lock_guard<std::mutex> guard(m_connection_lock);\n                m_connections.erase(a.hdl);\n            } else if (a.type == MESSAGE) {\n                std::lock_guard<std::mutex> guard(m_connection_lock);\n                for (auto it : m_connections) {\n                    m_server.send(it, a.msg->get_payload(), a.msg->get_opcode());\n                }\n            }\n        }\n    }\n\nprivate:\n    typedef std::set<connection_hdl, std::owner_less<connection_hdl>> con_list;\n\n    server m_server;\n    con_list m_connections;\n    std::queue<action> m_actions;\n    std::mutex m_action_lock;\n    std::mutex m_connection_lock;\n    std::condition_variable m_action_cond;\n};",
      "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <set>\n#include <queue>\n#include <mutex>\n#include <condition_variable>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef server::message_ptr message_ptr;\ntypedef websocketpp::connection_hdl connection_hdl;\n\nenum action_type { SUBSCRIBE, UNSUBSCRIBE, MESSAGE };\n\nstruct action {\n    action(action_type t, connection_hdl h, message_ptr m = nullptr)\n        : type(t), hdl(h), msg(m) {}\n    action_type type;\n    connection_hdl hdl;\n    message_ptr msg;\n};\n\nclass broadcast_server {\npublic:\n    broadcast_server() {\n        m_server.init_asio();\n        m_server.set_open_handler(bind(&broadcast_server::on_open, this, ::_1));\n        m_server.set_close_handler(bind(&broadcast_server::on_close, this, ::_1));\n        m_server.set_message_handler(bind(&broadcast_server::on_message, this, ::_1, ::_2));\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\n    void on_open(connection_hdl hdl) {\n        std::lock_guard<std::mutex> lock(m_action_lock);\n        m_actions.push(action(SUBSCRIBE, hdl));\n        m_action_cond.notify_one();\n    }\n\n    void on_close(connection_hdl hdl) {\n        std::lock_guard<std::mutex> lock(m_action_lock);\n        m_actions.push(action(UNSUBSCRIBE, hdl));\n        m_action_cond.notify_one();\n    }\n\n    void on_message(connection_hdl hdl, message_ptr msg) {\n        std::lock_guard<std::mutex> lock(m_action_lock);\n        m_actions.push(action(MESSAGE, hdl, msg));\n        m_action_cond.notify_one();\n    }\n\n    void process_messages() {\n        while (true) {\n            std::unique_lock<std::mutex> lock(m_action_lock);\n            while (m_actions.empty()) {\n                m_action_cond.wait(lock);\n            }\n\n            action a = m_actions.front();\n            m_actions.pop();\n            lock.unlock();\n\n            if (a.type == SUBSCRIBE) {\n                std::lock_guard<std::mutex> guard(m_connection_lock);\n                m_connections.insert(a.hdl);\n            } else if (a.type == UNSUBSCRIBE) {\n                std::lock_guard<std::mutex> guard(m_connection_lock);\n                m_connections.erase(a.hdl);\n            } else if (a.type == MESSAGE) {\n                std::lock_guard<std::mutex> guard(m_connection_lock);\n                for (auto it : m_connections) {\n                    m_server.send(it, a.msg->get_payload(), a.msg->get_opcode());\n                }\n            }\n        }\n    }\n\nprivate:\n    typedef std::set<connection_hdl, std::owner_less<connection_hdl>> con_list;\n\n    server m_server;\n    con_list m_connections;\n    std::queue<action> m_actions;\n    std::mutex m_action_lock;\n    std::mutex m_connection_lock;\n    std::condition_variable m_action_cond;\n};",
      "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <set>\n#include <queue>\n#include <mutex>\n#include <condition_variable>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef websocketpp::connection_hdl connection_hdl;\ntypedef std::set<connection_hdl, std::owner_less<connection_hdl>> con_list;\n\nenum action_type { SUBSCRIBE, UNSUBSCRIBE, MESSAGE };\n\nstruct action {\n    action(action_type t, connection_hdl h, server::message_ptr m = nullptr)\n        : type(t), hdl(h), msg(m) {}\n    action_type type;\n    connection_hdl hdl;\n    server::message_ptr msg;\n};\n\nclass broadcast_server {\npublic:\n    broadcast_server() {\n        m_server.init_asio();\n        m_server.set_open_handler(bind(&broadcast_server::on_open, this, ::_1));\n        m_server.set_close_handler(bind(&broadcast_server::on_close, this, ::_1));\n        m_server.set_message_handler(bind(&broadcast_server::on_message, this, ::_1, ::_2));\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\n    void on_open(connection_hdl hdl) {\n        {\n            std::lock_guard<std::mutex> lock(m_action_lock);\n            m_actions.push(action(SUBSCRIBE, hdl));\n        }\n        m_action_cond.notify_one();\n    }\n\n    void on_close(connection_hdl hdl) {\n        {\n            std::lock_guard<std::mutex> lock(m_action_lock);\n            m_actions.push(action(UNSUBSCRIBE, hdl));\n        }\n        m_action_cond.notify_one();\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        {\n            std::lock_guard<std::mutex> lock(m_action_lock);\n            m_actions.push(action(MESSAGE, hdl, msg));\n        }\n        m_action_cond.notify_one();\n    }\n\n    void process_messages() {\n        while (true) {\n            std::unique_lock<std::mutex> lock(m_action_lock);\n            while (m_actions.empty()) {\n                m_action_cond.wait(lock);\n            }\n\n            action a = m_actions.front();\n            m_actions.pop();\n            lock.unlock();\n\n            if (a.type == SUBSCRIBE) {\n                std::lock_guard<std::mutex> guard(m_connection_lock);\n                m_connections.insert(a.hdl);\n            } else if (a.type == UNSUBSCRIBE) {\n                std::lock_guard<std::mutex> guard(m_connection_lock);\n                m_connections.erase(a.hdl);\n            } else if (a.type == MESSAGE) {\n                std::lock_guard<std::mutex> guard(m_connection_lock);\n                for (auto it : m_connections) {\n                    m_server.send(it, a.msg->get_payload(), a.msg->get_opcode());\n                }\n            }\n        }\n    }\n\nprivate:\n    server m_server;\n    con_list m_connections;\n    std::queue<action> m_actions;\n    std::mutex m_action_lock;\n    std::mutex m_connection_lock;\n    std::condition_variable m_action_cond;\n};"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 5,
    "Instruction": "Task Description: Implement a C++ class that provides HTTP request functionality using libcurl, supporting both file and network resource retrieval.\n\nClass Description: HttpWebRequest is a class that encapsulates HTTP request functionality, allowing users to make GET requests to either network resources (via HTTP) or local files (via file:// protocol). It handles request configuration, execution, and response processing.\n\nAttributes:\n- uri_: std::string - The target URI for the HTTP request\n- method_: std::string - The HTTP method to use (defaults to GET)\n- header_: std::map<std::string, std::string> - HTTP headers to include in the request\n- is_: std::iostream - Internal stream used for request processing\n\nMethods:\n- HttpWebRequest(std::string &uri) -> void - Constructor that initializes the request with a target URI\n- callback(void *buffer, size_t size, size_t nmemb, void *data) -> static size_t - Static callback function for libcurl to write response data\n- GetFileResponse(const char *uri) -> HttpWebResponse* - Handles file:// protocol requests and returns the file content as a response\n- GetNetResponse(const char *uri) -> HttpWebResponse* - Performs HTTP network requests using libcurl and returns the response\n- GetResponse() -> HttpWebResponse* - Main method that determines request type (file or network) and returns the appropriate response",
    "Canonical_solution": "#include <curl/curl.h>\n#include <string>\n#include <map>\n#include <sstream>\n#include <fstream>\n\nnamespace System {\nnamespace Net {\n\nclass HttpWebRequest {\npublic:\n    HttpWebRequest(std::string &uri)\n        : is_(std::ios_base::in | std::ios_base::out | std::ios_base::binary) {\n        uri_ = uri;\n        method_ = HttpWebRequest::Method::GET;\n    }\n\n    static size_t callback(void *buffer, size_t size, size_t nmemb, void *data) {\n        HttpWebResponse *resp = (HttpWebResponse *) data;\n        std::stringstream &ss = resp->GetResponseStream();\n        ss.write((char *) buffer, size * nmemb);\n        return size * nmemb;\n    }\n\n    HttpWebResponse *GetFileResponse(const char *uri) {\n        assert(strlen(uri) > 6);\n        HttpWebResponse *resp = new HttpWebResponse();\n        const char *filename = uri + 6;\n\n        std::ifstream file;\n        file.open(filename);\n        if (file.is_open()) {\n            resp->os_ << file.rdbuf();\n            file.close();\n        }\n\n        return resp;\n    }\n\n    HttpWebResponse *GetNetResponse(const char *uri) {\n        HttpWebResponse *resp = new HttpWebResponse();\n\n        CURL *curl = curl_easy_init();\n\n        curl_easy_setopt(curl, CURLOPT_URL, uri);\n\n        curl_slist *http_headers = NULL;\n        for (std::map<std::string, std::string>::iterator it = header_.begin();\n             it != header_.end(); it++) {\n            http_headers = curl_slist_append(http_headers,\n                                             (it->first + \":\" + it->second).c_str());\n        }\n        curl_easy_setopt(curl, CURLOPT_HTTPHEADER, http_headers);\n        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, &callback);\n        curl_easy_setopt(curl, CURLOPT_WRITEDATA, (void *) resp);\n        curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1);\n        curl_easy_setopt(curl, CURLOPT_TIMEOUT, 2);\n        curl_easy_setopt(curl, CURLOPT_CONNECTTIMEOUT, 2);\n        curl_easy_setopt(curl, CURLOPT_NOSIGNAL, 1);\n\n        curl_easy_perform(curl);\n\n        long retcode = 0;\n        CURLcode code = curl_easy_getinfo(curl, CURLINFO_RESPONSE_CODE, &retcode);\n        if (code == CURLE_OK && retcode == 200) {\n            resp->status_.SetCode(200);\n\n            char *ctype = NULL;\n            curl_easy_getinfo(curl, CURLINFO_CONTENT_TYPE, &ctype);\n            std::string type(ctype);\n            resp->header_.Put(HttpHeader::ContentType, type);\n\n            double length = 0;\n            curl_easy_getinfo(curl, CURLINFO_CONTENT_LENGTH_DOWNLOAD, &length);\n            std::ostringstream os;\n            os << (long) length;\n            resp->header_.Put(HttpHeader::ContentLength, os.str());\n        }\n\n        curl_slist_free_all(http_headers);\n        curl_easy_cleanup(curl);\n\n        return resp;\n    }\n\n    HttpWebResponse *GetResponse() {\n        const char *uri = uri_.c_str();\n        if (strncmp(uri, \"file://\", 7) == 0) {\n            return GetFileResponse(uri);\n        }\n        return GetNetResponse(uri);\n    }\n\nprivate:\n    std::string uri_;\n    std::string method_;\n    std::map<std::string, std::string> header_;\n    std::iostream is_;\n};\n\n}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 146,
    "matched_results": [
      "#include <iostream>\n#include <string>\n#include <map>\n#include <curl/curl.h>\n#include <fstream>\n#include <sstream>\n\nclass HttpWebResponse {\npublic:\n    std::string data;\n    long status_code;\n    std::map<std::string, std::string> headers;\n};\n\nclass HttpWebRequest {\nprivate:\n    std::string uri_;\n    std::string method_;\n    std::map<std::string, std::string> header_;\n    std::stringstream is_;\n\n    static size_t callback(void *buffer, size_t size, size_t nmemb, void *data) {\n        std::stringstream *stream = static_cast<std::stringstream*>(data);\n        size_t total_size = size * nmemb;\n        stream->write(static_cast<const char*>(buffer), total_size);\n        return total_size;\n    }\n\n    HttpWebResponse* GetFileResponse(const char *uri) {\n        HttpWebResponse* response = new HttpWebResponse();\n        std::ifstream file(uri + 7); // Skip \"file://\"\n        if (file) {\n            std::stringstream buffer;\n            buffer << file.rdbuf();\n            response->data = buffer.str();\n            response->status_code = 200;\n        } else {\n            response->status_code = 404;\n        }\n        return response;\n    }\n\n    HttpWebResponse* GetNetResponse(const char *uri) {\n        CURL *curl;\n        CURLcode res;\n        HttpWebResponse* response = new HttpWebResponse();\n        curl = curl_easy_init();\n        if (curl) {\n            curl_easy_setopt(curl, CURLOPT_URL, uri);\n            curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, callback);\n            curl_easy_setopt(curl, CURLOPT_WRITEDATA, &is_);\n            struct curl_slist *headers = NULL;\n            for (const auto &h : header_) {\n                headers = curl_slist_append(headers, (h.first + \": \" + h.second).c_str());\n            }\n            if (headers) {\n                curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n            }\n            res = curl_easy_perform(curl);\n            if (res != CURLE_OK) {\n                response->status_code = 500;\n            } else {\n                curl_easy_getinfo(curl, CURLINFO_RESPONSE_CODE, &response->status_code);\n                response->data = is_.str();\n            }\n            curl_slist_free_all(headers);\n            curl_easy_cleanup(curl);\n        } else {\n            response->status_code = 500;\n        }\n        return response;\n    }\n\npublic:\n    HttpWebRequest(std::string &uri) : uri_(uri), method_(\"GET\") {}\n\n    HttpWebResponse* GetResponse() {\n        if (uri_.substr(0, 7) == \"file://\") {\n            return GetFileResponse(uri_.c_str());\n        } else {\n            return GetNetResponse(uri_.c_str());\n        }\n    }\n};",
      "#include <iostream>\n#include <string>\n#include <map>\n#include <curl/curl.h>\n#include <fstream>\n#include <sstream>\n\nclass HttpWebResponse {\npublic:\n    std::string data;\n    long status_code;\n};\n\nclass HttpWebRequest {\nprivate:\n    std::string uri_;\n    std::string method_;\n    std::map<std::string, std::string> header_;\n    std::iostream is_;\n\npublic:\n    HttpWebRequest(std::string &uri) : uri_(uri), method_(\"GET\") {}\n\n    static size_t callback(void *buffer, size_t size, size_t nmemb, void *data) {\n        std::string *response = static_cast<std::string *>(data);\n        size_t total_size = size * nmemb;\n        response->append(static_cast<char *>(buffer), total_size);\n        return total_size;\n    }\n\n    HttpWebResponse* GetFileResponse(const char *uri) {\n        std::ifstream file(uri + 7); // Skip \"file://\"\n        std::stringstream buffer;\n        buffer << file.rdbuf();\n        HttpWebResponse *response = new HttpWebResponse();\n        response->data = buffer.str();\n        response->status_code = 200;\n        return response;\n    }\n\n    HttpWebResponse* GetNetResponse(const char *uri) {\n        CURL *curl;\n        CURLcode res;\n        std::string response_string;\n        long response_code;\n\n        curl_global_init(CURL_GLOBAL_DEFAULT);\n        curl = curl_easy_init();\n        if(curl) {\n            curl_easy_setopt(curl, CURLOPT_URL, uri);\n            curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, callback);\n            curl_easy_setopt(curl, CURLOPT_WRITEDATA, &response_string);\n\n            struct curl_slist *headers = NULL;\n            for (const auto &header : header_) {\n                headers = curl_slist_append(headers, (header.first + \": \" + header.second).c_str());\n            }\n            curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n\n            res = curl_easy_perform(curl);\n            if(res != CURLE_OK) {\n                response_string = \"Error\";\n                response_code = 500;\n            } else {\n                curl_easy_getinfo(curl, CURLINFO_RESPONSE_CODE, &response_code);\n            }\n\n            curl_slist_free_all(headers);\n            curl_easy_cleanup(curl);\n        }\n        curl_global_cleanup();\n\n        HttpWebResponse *response = new HttpWebResponse();\n        response->data = response_string;\n        response->status_code = response_code;\n        return response;\n    }\n\n    HttpWebResponse* GetResponse() {\n        if (uri_.substr(0, 7) == \"file://\") {\n            return GetFileResponse(uri_.c_str());\n        } else {\n            return GetNetResponse(uri_.c_str());\n        }\n    }\n};",
      "#include <iostream>\n#include <string>\n#include <map>\n#include <curl/curl.h>\n#include <fstream>\n#include <sstream>\n\nclass HttpWebResponse {\npublic:\n    std::string body;\n    long statusCode;\n    std::map<std::string, std::string> headers;\n};\n\nclass HttpWebRequest {\nprivate:\n    std::string uri_;\n    std::string method_;\n    std::map<std::string, std::string> header_;\n    std::iostream is_;\n\npublic:\n    HttpWebRequest(std::string &uri) : uri_(uri), method_(\"GET\") {}\n\n    static size_t callback(void *buffer, size_t size, size_t nmemb, void *data) {\n        std::ostream *stream = static_cast<std::ostream *>(data);\n        size_t totalSize = size * nmemb;\n        stream->write(static_cast<const char *>(buffer), totalSize);\n        return totalSize;\n    }\n\n    HttpWebResponse* GetFileResponse(const char *uri) {\n        std::ifstream file(uri + 7); // Skip \"file://\"\n        std::stringstream buffer;\n        buffer << file.rdbuf();\n        HttpWebResponse *response = new HttpWebResponse();\n        response->body = buffer.str();\n        response->statusCode = 200;\n        return response;\n    }\n\n    HttpWebResponse* GetNetResponse(const char *uri) {\n        CURL *curl;\n        CURLcode res;\n        std::ostringstream responseStream;\n        curl = curl_easy_init();\n        if(curl) {\n            curl_easy_setopt(curl, CURLOPT_URL, uri);\n            curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, callback);\n            curl_easy_setopt(curl, CURLOPT_WRITEDATA, &responseStream);\n            struct curl_slist *headers = NULL;\n            for (const auto &header : header_) {\n                headers = curl_slist_append(headers, (header.first + \": \" + header.second).c_str());\n            }\n            curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n            res = curl_easy_perform(curl);\n            HttpWebResponse *response = new HttpWebResponse();\n            if(res != CURLE_OK) {\n                response->statusCode = 500;\n                response->body = \"Request failed\";\n            } else {\n                long response_code;\n                curl_easy_getinfo(curl, CURLINFO_RESPONSE_CODE, &response_code);\n                response->statusCode = response_code;\n                response->body = responseStream.str();\n            }\n            curl_easy_cleanup(curl);\n            if(headers) curl_slist_free_all(headers);\n            return response;\n        }\n        return nullptr;\n    }\n\n    HttpWebResponse* GetResponse() {\n        if (uri_.substr(0, 7) == \"file://\") {\n            return GetFileResponse(uri_.c_str());\n        } else {\n            return GetNetResponse(uri_.c_str());\n        }\n    }\n};",
      "#include <iostream>\n#include <string>\n#include <map>\n#include <curl/curl.h>\n#include <fstream>\n#include <sstream>\n\nclass HttpWebResponse {\npublic:\n    std::string data;\n    long status_code;\n};\n\nclass HttpWebRequest {\nprivate:\n    std::string uri_;\n    std::string method_;\n    std::map<std::string, std::string> header_;\n    std::iostream is_;\n\npublic:\n    HttpWebRequest(std::string &uri) : uri_(uri), method_(\"GET\") {}\n\n    static size_t callback(void *buffer, size_t size, size_t nmemb, void *data) {\n        std::string *response = static_cast<std::string*>(data);\n        size_t total_size = size * nmemb;\n        response->append(static_cast<char*>(buffer), total_size);\n        return total_size;\n    }\n\n    HttpWebResponse* GetFileResponse(const char *uri) {\n        std::ifstream file(uri + 7); // Skip \"file://\"\n        if (!file.is_open()) {\n            return nullptr;\n        }\n\n        std::stringstream buffer;\n        buffer << file.rdbuf();\n        file.close();\n\n        HttpWebResponse *response = new HttpWebResponse();\n        response->data = buffer.str();\n        response->status_code = 200;\n        return response;\n    }\n\n    HttpWebResponse* GetNetResponse(const char *uri) {\n        CURL *curl;\n        CURLcode res;\n        std::string response_data;\n\n        curl = curl_easy_init();\n        if (!curl) {\n            return nullptr;\n        }\n\n        curl_easy_setopt(curl, CURLOPT_URL, uri);\n        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, callback);\n        curl_easy_setopt(curl, CURLOPT_WRITEDATA, &response_data);\n\n        struct curl_slist *headers = nullptr;\n        for (const auto &header : header_) {\n            std::string header_entry = header.first + \": \" + header.second;\n            headers = curl_slist_append(headers, header_entry.c_str());\n        }\n        curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n\n        res = curl_easy_perform(curl);\n        long response_code;\n        curl_easy_getinfo(curl, CURLINFO_RESPONSE_CODE, &response_code);\n\n        curl_slist_free_all(headers);\n        curl_easy_cleanup(curl);\n\n        if (res != CURLE_OK) {\n            return nullptr;\n        }\n\n        HttpWebResponse *response = new HttpWebResponse();\n        response->data = response_data;\n        response->status_code = response_code;\n        return response;\n    }\n\n    HttpWebResponse* GetResponse() {\n        if (uri_.substr(0, 7) == \"file://\") {\n            return GetFileResponse(uri_.c_str());\n        } else {\n            return GetNetResponse(uri_.c_str());\n        }\n    }\n};",
      "#include <iostream>\n#include <string>\n#include <map>\n#include <sstream>\n#include <curl/curl.h>\n#include <fstream>\n\nclass HttpWebResponse {\npublic:\n    std::string content;\n    long statusCode;\n    std::map<std::string, std::string> headers;\n};\n\nclass HttpWebRequest {\nprivate:\n    std::string uri_;\n    std::string method_;\n    std::map<std::string, std::string> header_;\n    std::stringstream is_;\n\n    static size_t callback(void *buffer, size_t size, size_t nmemb, void *data) {\n        std::stringstream *stream = static_cast<std::stringstream*>(data);\n        size_t totalSize = size * nmemb;\n        stream->write(static_cast<const char*>(buffer), totalSize);\n        return totalSize;\n    }\n\n    HttpWebResponse* GetFileResponse(const char *uri) {\n        std::ifstream file(uri + 7); // Skip \"file://\"\n        if (!file.is_open()) {\n            return nullptr;\n        }\n        HttpWebResponse *response = new HttpWebResponse();\n        response->statusCode = 200;\n        std::string line;\n        while (std::getline(file, line)) {\n            response->content += line + \"\\n\";\n        }\n        file.close();\n        return response;\n    }\n\n    HttpWebResponse* GetNetResponse(const char *uri) {\n        CURL *curl;\n        CURLcode res;\n        curl = curl_easy_init();\n        if (!curl) {\n            return nullptr;\n        }\n\n        HttpWebResponse *response = new HttpWebResponse();\n        curl_easy_setopt(curl, CURLOPT_URL, uri);\n        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, callback);\n        curl_easy_setopt(curl, CURLOPT_WRITEDATA, &is_);\n\n        struct curl_slist *headers = nullptr;\n        for (const auto &header : header_) {\n            std::string headerString = header.first + \": \" + header.second;\n            headers = curl_slist_append(headers, headerString.c_str());\n        }\n        if (headers) {\n            curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n        }\n\n        res = curl_easy_perform(curl);\n        if (res != CURLE_OK) {\n            delete response;\n            response = nullptr;\n        } else {\n            curl_easy_getinfo(curl, CURLINFO_RESPONSE_CODE, &response->statusCode);\n            response->content = is_.str();\n        }\n\n        if (headers) {\n            curl_slist_free_all(headers);\n        }\n        curl_easy_cleanup(curl);\n        return response;\n    }\n\npublic:\n    HttpWebRequest(std::string &uri) : uri_(uri), method_(\"GET\") {}\n\n    HttpWebResponse* GetResponse() {\n        if (uri_.substr(0, 7) == \"file://\") {\n            return GetFileResponse(uri_.c_str());\n        } else {\n            return GetNetResponse(uri_.c_str());\n        }\n    }\n};",
      "#include <iostream>\n#include <string>\n#include <map>\n#include <curl/curl.h>\n#include <fstream>\n#include <sstream>\n\nclass HttpWebResponse {\npublic:\n    std::string content;\n    long status_code;\n    std::map<std::string, std::string> headers;\n};\n\nclass HttpWebRequest {\nprivate:\n    std::string uri_;\n    std::string method_;\n    std::map<std::string, std::string> header_;\n    std::stringstream is_;\n\n    static size_t callback(void *buffer, size_t size, size_t nmemb, void *data) {\n        std::stringstream *stream = static_cast<std::stringstream*>(data);\n        size_t total_size = size * nmemb;\n        stream->write(static_cast<const char*>(buffer), total_size);\n        return total_size;\n    }\n\n    HttpWebResponse* GetFileResponse(const char *uri) {\n        std::ifstream file(uri + 7); // Skip \"file://\"\n        if (!file.is_open()) {\n            return nullptr;\n        }\n\n        std::stringstream buffer;\n        buffer << file.rdbuf();\n\n        HttpWebResponse *response = new HttpWebResponse();\n        response->content = buffer.str();\n        response->status_code = 200; // OK\n        return response;\n    }\n\n    HttpWebResponse* GetNetResponse(const char *uri) {\n        CURL *curl;\n        CURLcode res;\n        curl = curl_easy_init();\n        if (!curl) {\n            return nullptr;\n        }\n\n        HttpWebResponse *response = new HttpWebResponse();\n        curl_easy_setopt(curl, CURLOPT_URL, uri);\n        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, callback);\n        curl_easy_setopt(curl, CURLOPT_WRITEDATA, &is_);\n\n        struct curl_slist *headers = nullptr;\n        for (const auto &header : header_) {\n            std::string header_entry = header.first + \": \" + header.second;\n            headers = curl_slist_append(headers, header_entry.c_str());\n        }\n        curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n\n        res = curl_easy_perform(curl);\n        if (res != CURLE_OK) {\n            curl_easy_cleanup(curl);\n            return nullptr;\n        }\n\n        long response_code;\n        curl_easy_getinfo(curl, CURLINFO_RESPONSE_CODE, &response_code);\n        response->status_code = response_code;\n        response->content = is_.str();\n\n        curl_slist_free_all(headers);\n        curl_easy_cleanup(curl);\n        return response;\n    }\n\npublic:\n    HttpWebRequest(std::string &uri) : uri_(uri), method_(\"GET\") {}\n\n    HttpWebResponse* GetResponse() {\n        if (uri_.substr(0, 7) == \"file://\") {\n            return GetFileResponse(uri_.c_str());\n        } else {\n            return GetNetResponse(uri_.c_str());\n        }\n    }\n};",
      "#include <iostream>\n#include <string>\n#include <map>\n#include <curl/curl.h>\n#include <fstream>\n#include <sstream>\n\nclass HttpWebResponse {\npublic:\n    std::string body;\n    long status_code;\n};\n\nclass HttpWebRequest {\nprivate:\n    std::string uri_;\n    std::string method_;\n    std::map<std::string, std::string> header_;\n    std::iostream is_;\n\npublic:\n    HttpWebRequest(std::string &uri) : uri_(uri), method_(\"GET\") {}\n\n    static size_t callback(void *buffer, size_t size, size_t nmemb, void *data) {\n        std::ostream *stream = static_cast<std::ostream *>(data);\n        size_t total_size = size * nmemb;\n        stream->write(static_cast<const char *>(buffer), total_size);\n        return total_size;\n    }\n\n    HttpWebResponse* GetFileResponse(const char *uri) {\n        std::ifstream file(uri + 7); // Skip \"file://\"\n        std::stringstream buffer;\n        buffer << file.rdbuf();\n        HttpWebResponse *response = new HttpWebResponse();\n        response->body = buffer.str();\n        response->status_code = 200;\n        return response;\n    }\n\n    HttpWebResponse* GetNetResponse(const char *uri) {\n        CURL *curl;\n        CURLcode res;\n        curl = curl_easy_init();\n        HttpWebResponse *response = new HttpWebResponse();\n        if (curl) {\n            std::ostringstream stream;\n            curl_easy_setopt(curl, CURLOPT_URL, uri);\n            curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, callback);\n            curl_easy_setopt(curl, CURLOPT_WRITEDATA, &stream);\n            struct curl_slist *headers = NULL;\n            for (const auto &header : header_) {\n                headers = curl_slist_append(headers, (header.first + \": \" + header.second).c_str());\n            }\n            curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n            res = curl_easy_perform(curl);\n            if (res != CURLE_OK) {\n                response->status_code = 500;\n            } else {\n                curl_easy_getinfo(curl, CURLINFO_RESPONSE_CODE, &response->status_code);\n                response->body = stream.str();\n            }\n            curl_slist_free_all(headers);\n            curl_easy_cleanup(curl);\n        }\n        return response;\n    }\n\n    HttpWebResponse* GetResponse() {\n        if (uri_.substr(0, 7) == \"file://\") {\n            return GetFileResponse(uri_.c_str());\n        } else {\n            return GetNetResponse(uri_.c_str());\n        }\n    }\n};",
      "#include <iostream>\n#include <string>\n#include <map>\n#include <curl/curl.h>\n#include <fstream>\n#include <sstream>\n\nclass HttpWebResponse {\npublic:\n    std::string body;\n    long status_code;\n};\n\nclass HttpWebRequest {\nprivate:\n    std::string uri_;\n    std::string method_;\n    std::map<std::string, std::string> header_;\n    std::iostream is_;\n\npublic:\n    HttpWebRequest(std::string &uri) : uri_(uri), method_(\"GET\") {}\n\n    static size_t callback(void *buffer, size_t size, size_t nmemb, void *data) {\n        std::ostream *stream = static_cast<std::ostream *>(data);\n        size_t total_size = size * nmemb;\n        stream->write(static_cast<const char *>(buffer), total_size);\n        return total_size;\n    }\n\n    HttpWebResponse* GetFileResponse(const char *uri) {\n        std::ifstream file(uri + 7); // Skip \"file://\"\n        std::stringstream buffer;\n        buffer << file.rdbuf();\n        HttpWebResponse* response = new HttpWebResponse();\n        response->body = buffer.str();\n        response->status_code = file ? 200 : 404;\n        return response;\n    }\n\n    HttpWebResponse* GetNetResponse(const char *uri) {\n        CURL *curl;\n        CURLcode res;\n        std::stringstream response_stream;\n        curl = curl_easy_init();\n        if(curl) {\n            curl_easy_setopt(curl, CURLOPT_URL, uri);\n            curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, callback);\n            curl_easy_setopt(curl, CURLOPT_WRITEDATA, &response_stream);\n            struct curl_slist *headers = NULL;\n            for (const auto& h : header_) {\n                headers = curl_slist_append(headers, (h.first + \": \" + h.second).c_str());\n            }\n            curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n            res = curl_easy_perform(curl);\n            HttpWebResponse* response = new HttpWebResponse();\n            response->body = response_stream.str();\n            curl_easy_getinfo(curl, CURLINFO_RESPONSE_CODE, &response->status_code);\n            curl_slist_free_all(headers);\n            curl_easy_cleanup(curl);\n            return response;\n        }\n        return nullptr;\n    }\n\n    HttpWebResponse* GetResponse() {\n        if (uri_.find(\"file://\") == 0) {\n            return GetFileResponse(uri_.c_str());\n        } else {\n            return GetNetResponse(uri_.c_str());\n        }\n    }\n};",
      "#include <iostream>\n#include <string>\n#include <map>\n#include <curl/curl.h>\n#include <fstream>\n#include <sstream>\n\nclass HttpWebResponse {\npublic:\n    std::string content;\n    long status_code;\n};\n\nclass HttpWebRequest {\nprivate:\n    std::string uri_;\n    std::string method_;\n    std::map<std::string, std::string> header_;\n    std::iostream is_;\n\npublic:\n    HttpWebRequest(std::string &uri) : uri_(uri), method_(\"GET\") {}\n\n    static size_t callback(void *buffer, size_t size, size_t nmemb, void *data) {\n        std::ostream *stream = static_cast<std::ostream *>(data);\n        size_t count = size * nmemb;\n        stream->write(static_cast<const char *>(buffer), count);\n        return count;\n    }\n\n    HttpWebResponse* GetFileResponse(const char *uri) {\n        std::ifstream file(uri + 7); // Skip \"file://\"\n        std::stringstream buffer;\n        buffer << file.rdbuf();\n        HttpWebResponse *response = new HttpWebResponse();\n        response->content = buffer.str();\n        response->status_code = file ? 200 : 404;\n        return response;\n    }\n\n    HttpWebResponse* GetNetResponse(const char *uri) {\n        CURL *curl;\n        CURLcode res;\n        std::stringstream response_stream;\n        curl = curl_easy_init();\n        if(curl) {\n            curl_easy_setopt(curl, CURLOPT_URL, uri);\n            curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, callback);\n            curl_easy_setopt(curl, CURLOPT_WRITEDATA, &response_stream);\n            struct curl_slist *headers = NULL;\n            for (const auto &header : header_) {\n                headers = curl_slist_append(headers, (header.first + \": \" + header.second).c_str());\n            }\n            curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n            res = curl_easy_perform(curl);\n            long response_code;\n            curl_easy_getinfo(curl, CURLINFO_RESPONSE_CODE, &response_code);\n            curl_slist_free_all(headers);\n            curl_easy_cleanup(curl);\n            HttpWebResponse *response = new HttpWebResponse();\n            response->content = response_stream.str();\n            response->status_code = response_code;\n            return response;\n        }\n        return nullptr;\n    }\n\n    HttpWebResponse* GetResponse() {\n        if (uri_.substr(0, 7) == \"file://\") {\n            return GetFileResponse(uri_.c_str());\n        } else {\n            return GetNetResponse(uri_.c_str());\n        }\n    }\n};",
      "#include <iostream>\n#include <string>\n#include <map>\n#include <fstream>\n#include <sstream>\n#include <curl/curl.h>\n\nclass HttpWebResponse {\npublic:\n    std::string content;\n    long status_code;\n    std::map<std::string, std::string> headers;\n\n    HttpWebResponse() : status_code(0) {}\n};\n\nclass HttpWebRequest {\nprivate:\n    std::string uri_;\n    std::string method_;\n    std::map<std::string, std::string> header_;\n    std::stringstream is_;\n\n    static size_t callback(void *buffer, size_t size, size_t nmemb, void *data) {\n        std::stringstream *stream = static_cast<std::stringstream*>(data);\n        size_t total_size = size * nmemb;\n        stream->write(static_cast<const char*>(buffer), total_size);\n        return total_size;\n    }\n\n    HttpWebResponse* GetFileResponse(const char *uri) {\n        HttpWebResponse *response = new HttpWebResponse();\n        std::ifstream file(uri + 7); // Skip \"file://\"\n        if (file) {\n            std::stringstream buffer;\n            buffer << file.rdbuf();\n            response->content = buffer.str();\n            response->status_code = 200;\n        } else {\n            response->status_code = 404;\n        }\n        return response;\n    }\n\n    HttpWebResponse* GetNetResponse(const char *uri) {\n        CURL *curl;\n        CURLcode res;\n        HttpWebResponse *response = new HttpWebResponse();\n\n        curl = curl_easy_init();\n        if (curl) {\n            curl_easy_setopt(curl, CURLOPT_URL, uri);\n            curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, callback);\n            curl_easy_setopt(curl, CURLOPT_WRITEDATA, &is_);\n            struct curl_slist *headers = NULL;\n            for (const auto &header : header_) {\n                std::string header_entry = header.first + \": \" + header.second;\n                headers = curl_slist_append(headers, header_entry.c_str());\n            }\n            if (headers) {\n                curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n            }\n            res = curl_easy_perform(curl);\n            if (res != CURLE_OK) {\n                response->status_code = 500;\n            } else {\n                curl_easy_getinfo(curl, CURLINFO_RESPONSE_CODE, &response->status_code);\n                response->content = is_.str();\n            }\n            curl_easy_cleanup(curl);\n            if (headers) {\n                curl_slist_free_all(headers);\n            }\n        }\n        return response;\n    }\n\npublic:\n    HttpWebRequest(std::string &uri) : uri_(uri), method_(\"GET\") {}\n\n    HttpWebResponse* GetResponse() {\n        if (uri_.substr(0, 7) == \"file://\") {\n            return GetFileResponse(uri_.c_str());\n        } else {\n            return GetNetResponse(uri_.c_str());\n        }\n    }\n\n    void SetMethod(const std::string &method) {\n        method_ = method;\n    }\n\n    void AddHeader(const std::string &key, const std::string &value) {\n        header_[key] = value;\n    }\n};"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 50,
    "Instruction": "Task Description: Implement a WebSocket server class in C++ that supports both plain and TLS (SSL) connections using the WebSocket++ library. The server should handle incoming messages, echo them back to clients, and manage secure connections with proper TLS initialization.\n\nClass Description: The WebSocketServer class encapsulates functionality for creating and managing both plain and TLS WebSocket servers. It initializes server endpoints, sets up message handlers, manages TLS contexts, and runs the server's event loop.\n\nAttributes:\n- ios_: boost::asio::io_service - ASIO I/O service for handling network operations\n- endpoint_plain_: server_plain - WebSocket++ server instance for plain (non-secure) connections\n- endpoint_tls_: server_tls - WebSocket++ server instance for TLS (secure) connections\n\nMethods:\n- init() -> void - Initializes both plain and TLS server endpoints, sets message handlers, TLS initialization handler, and starts listening on ports 80 (plain) and 443 (TLS)\n- run() -> void - Starts the server's event loop to handle connections and messages\n- on_message(EndpointType* s, websocketpp::connection_hdl hdl, typename EndpointType::message_ptr msg) -> void - Template method that handles incoming messages from clients and echoes them back\n- get_password() -> std::string - Returns the password used for TLS private key encryption\n- on_tls_init(websocketpp::connection_hdl hdl) -> context_ptr - Initializes and configures the TLS context for secure connections",
    "Canonical_solution": "#include <websocketpp/config/asio.hpp>\n#include <websocketpp/server.hpp>\n#include <boost/asio/ssl.hpp>\n#include <iostream>\n\ntypedef websocketpp::server<websocketpp::config::asio> server_plain;\ntypedef websocketpp::server<websocketpp::config::asio_tls> server_tls;\nusing websocketpp::lib::placeholders::_1;\nusing websocketpp::lib::placeholders::_2;\nusing websocketpp::lib::bind;\ntypedef websocketpp::lib::shared_ptr<boost::asio::ssl::context> context_ptr;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer() : ios_(), endpoint_plain_(), endpoint_tls_() {}\n\n    void init() {\n        endpoint_plain_.init_asio(&ios_);\n        endpoint_plain_.set_message_handler(\n            bind(&WebSocketServer::on_message<server_plain>, this, &endpoint_plain_, ::_1, ::_2));\n        endpoint_plain_.listen(80);\n        endpoint_plain_.start_accept();\n\n        endpoint_tls_.init_asio(&ios_);\n        endpoint_tls_.set_message_handler(\n            bind(&WebSocketServer::on_message<server_tls>, this, &endpoint_tls_, ::_1, ::_2));\n        endpoint_tls_.set_tls_init_handler(bind(&WebSocketServer::on_tls_init, this, ::_1));\n        endpoint_tls_.listen(443);\n        endpoint_tls_.start_accept();\n    }\n\n    void run() {\n        ios_.run();\n    }\n\nprivate:\n    template <typename EndpointType>\n    void on_message(EndpointType* s, websocketpp::connection_hdl hdl,\n        typename EndpointType::message_ptr msg)\n    {\n        std::cout << \"on_message called with hdl: \" << hdl.lock().get()\n                << \" and message: \" << msg->get_payload()\n                << std::endl;\n\n        try {\n            s->send(hdl, msg->get_payload(), msg->get_opcode());\n        } catch (websocketpp::exception const & e) {\n            std::cout << \"Echo failed because: \"\n                    << \"(\" << e.what() << \")\" << std::endl;\n        }\n    }\n\n    std::string get_password() {\n        return \"test\";\n    }\n\n    context_ptr on_tls_init(websocketpp::connection_hdl hdl) {\n        std::cout << \"on_tls_init called with hdl: \" << hdl.lock().get() << std::endl;\n        context_ptr ctx(new boost::asio::ssl::context(boost::asio::ssl::context::tlsv1));\n\n        try {\n            ctx->set_options(boost::asio::ssl::context::default_workarounds |\n                            boost::asio::ssl::context::no_sslv2 |\n                            boost::asio::ssl::context::no_sslv3 |\n                            boost::asio::ssl::context::single_dh_use);\n            ctx->set_password_callback(bind(&WebSocketServer::get_password, this));\n            ctx->use_certificate_chain_file(\"server.pem\");\n            ctx->use_private_key_file(\"server.pem\", boost::asio::ssl::context::pem);\n        } catch (std::exception& e) {\n            std::cout << e.what() << std::endl;\n        }\n        return ctx;\n    }\n\n    boost::asio::io_service ios_;\n    server_plain endpoint_plain_;\n    server_tls endpoint_tls_;\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 154,
    "matched_results": [
      "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/config/asio.hpp>\n#include <websocketpp/server.hpp>\n#include <boost/asio.hpp>\n#include <boost/bind/bind.hpp>\n#include <iostream>\n#include <string>\n\ntypedef websocketpp::server<websocketpp::config::asio> server_plain;\ntypedef websocketpp::server<websocketpp::config::asio_tls> server_tls;\ntypedef websocketpp::lib::shared_ptr<boost::asio::ssl::context> context_ptr;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer() : ios_(), endpoint_plain_(), endpoint_tls_() {}\n\n    void init() {\n        // Initialize plain server\n        endpoint_plain_.init_asio(&ios_);\n        endpoint_plain_.set_message_handler(boost::bind(&WebSocketServer::on_message<server_plain>, this, &endpoint_plain_, ::_1, ::_2));\n        endpoint_plain_.listen(80);\n        endpoint_plain_.start_accept();\n\n        // Initialize TLS server\n        endpoint_tls_.init_asio(&ios_);\n        endpoint_tls_.set_message_handler(boost::bind(&WebSocketServer::on_message<server_tls>, this, &endpoint_tls_, ::_1, ::_2));\n        endpoint_tls_.set_tls_init_handler(boost::bind(&WebSocketServer::on_tls_init, this, ::_1));\n        endpoint_tls_.listen(443);\n        endpoint_tls_.start_accept();\n    }\n\n    void run() {\n        ios_.run();\n    }\n\nprivate:\n    boost::asio::io_service ios_;\n    server_plain endpoint_plain_;\n    server_tls endpoint_tls_;\n\n    template <typename EndpointType>\n    void on_message(EndpointType* s, websocketpp::connection_hdl hdl, typename EndpointType::message_ptr msg) {\n        s->send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    std::string get_password() {\n        return \"password\";\n    }\n\n    context_ptr on_tls_init(websocketpp::connection_hdl hdl) {\n        context_ptr ctx(new boost::asio::ssl::context(boost::asio::ssl::context::tlsv12));\n        try {\n            ctx->set_options(boost::asio::ssl::context::default_workarounds |\n                             boost::asio::ssl::context::no_sslv2 |\n                             boost::asio::ssl::context::no_sslv3 |\n                             boost::asio::ssl::context::single_dh_use);\n            ctx->set_password_callback(boost::bind(&WebSocketServer::get_password, this));\n            ctx->use_certificate_chain_file(\"server.pem\");\n            ctx->use_private_key_file(\"server.key\", boost::asio::ssl::context::pem);\n            ctx->use_tmp_dh_file(\"dh.pem\");\n        } catch (std::exception& e) {\n            std::cerr << \"Error in TLS initialization: \" << e.what() << std::endl;\n        }\n        return ctx;\n    }\n};\n\nint main() {\n    WebSocketServer server;\n    server.init();\n    server.run();\n    return 0;\n}",
      "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/config/asio.hpp>\n#include <websocketpp/server.hpp>\n#include <boost/asio.hpp>\n#include <boost/bind/bind.hpp>\n#include <iostream>\n#include <string>\n\ntypedef websocketpp::server<websocketpp::config::asio> server_plain;\ntypedef websocketpp::server<websocketpp::config::asio_tls> server_tls;\ntypedef websocketpp::lib::shared_ptr<boost::asio::ssl::context> context_ptr;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer() : ios_(), endpoint_plain_(), endpoint_tls_() {\n        endpoint_plain_.init_asio(&ios_);\n        endpoint_tls_.init_asio(&ios_);\n    }\n\n    void init() {\n        endpoint_plain_.set_message_handler(\n            websocketpp::lib::bind(\n                &WebSocketServer::on_message<server_plain>,\n                this,\n                &endpoint_plain_,\n                websocketpp::lib::placeholders::_1,\n                websocketpp::lib::placeholders::_2\n            )\n        );\n\n        endpoint_tls_.set_message_handler(\n            websocketpp::lib::bind(\n                &WebSocketServer::on_message<server_tls>,\n                this,\n                &endpoint_tls_,\n                websocketpp::lib::placeholders::_1,\n                websocketpp::lib::placeholders::_2\n            )\n        );\n\n        endpoint_tls_.set_tls_init_handler(\n            websocketpp::lib::bind(\n                &WebSocketServer::on_tls_init,\n                this,\n                websocketpp::lib::placeholders::_1\n            )\n        );\n\n        endpoint_plain_.listen(80);\n        endpoint_tls_.listen(443);\n\n        endpoint_plain_.start_accept();\n        endpoint_tls_.start_accept();\n    }\n\n    void run() {\n        ios_.run();\n    }\n\nprivate:\n    template <typename EndpointType>\n    void on_message(EndpointType* s, websocketpp::connection_hdl hdl, typename EndpointType::message_ptr msg) {\n        std::string payload = msg->get_payload();\n        s->send(hdl, payload, msg->get_opcode());\n    }\n\n    std::string get_password() const {\n        return \"test\";\n    }\n\n    context_ptr on_tls_init(websocketpp::connection_hdl hdl) {\n        context_ptr ctx = websocketpp::lib::make_shared<boost::asio::ssl::context>(boost::asio::ssl::context::tlsv1);\n        try {\n            ctx->set_options(boost::asio::ssl::context::default_workarounds |\n                             boost::asio::ssl::context::no_sslv2 |\n                             boost::asio::ssl::context::single_dh_use);\n            ctx->set_password_callback(boost::bind(&WebSocketServer::get_password, this));\n            ctx->use_certificate_chain_file(\"server.pem\");\n            ctx->use_private_key_file(\"server.pem\", boost::asio::ssl::context::pem);\n            ctx->use_tmp_dh_file(\"dh.pem\");\n        } catch (std::exception& e) {\n            std::cerr << \"Error in TLS initialization: \" << e.what() << std::endl;\n        }\n        return ctx;\n    }\n\n    boost::asio::io_service ios_;\n    server_plain endpoint_plain_;\n    server_tls endpoint_tls_;\n};\n\nint main() {\n    WebSocketServer server;\n    server.init();\n    server.run();\n    return 0;\n}",
      "#include <websocketpp/config/asio.hpp>\n#include <websocketpp/config/asio_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <boost/asio/io_service.hpp>\n#include <iostream>\n#include <string>\n#include <memory>\n\ntypedef websocketpp::server<websocketpp::config::asio> server_plain;\ntypedef websocketpp::server<websocketpp::config::asio_tls> server_tls;\ntypedef std::shared_ptr<boost::asio::ssl::context> context_ptr;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer() : ios_(), endpoint_plain_(), endpoint_tls_() {}\n\n    void init() {\n        endpoint_plain_.init_asio(&ios_);\n        endpoint_tls_.init_asio(&ios_);\n\n        endpoint_plain_.set_message_handler(bind(&WebSocketServer::on_message<server_plain>, this, &endpoint_plain_, ::_1, ::_2));\n        endpoint_tls_.set_message_handler(bind(&WebSocketServer::on_message<server_tls>, this, &endpoint_tls_, ::_1, ::_2));\n\n        endpoint_tls_.set_tls_init_handler(bind(&WebSocketServer::on_tls_init, this, ::_1));\n\n        endpoint_plain_.listen(80);\n        endpoint_tls_.listen(443);\n\n        endpoint_plain_.start_accept();\n        endpoint_tls_.start_accept();\n    }\n\n    void run() {\n        ios_.run();\n    }\n\nprivate:\n    template <typename EndpointType>\n    void on_message(EndpointType* s, websocketpp::connection_hdl hdl, typename EndpointType::message_ptr msg) {\n        s->send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    std::string get_password() {\n        return \"password\"; // Replace with actual password retrieval logic\n    }\n\n    context_ptr on_tls_init(websocketpp::connection_hdl hdl) {\n        context_ptr ctx = std::make_shared<boost::asio::ssl::context>(boost::asio::ssl::context::tlsv12);\n\n        try {\n            ctx->set_options(boost::asio::ssl::context::default_workarounds |\n                             boost::asio::ssl::context::no_sslv2 |\n                             boost::asio::ssl::context::no_sslv3 |\n                             boost::asio::ssl::context::single_dh_use);\n            ctx->set_password_callback(bind(&WebSocketServer::get_password, this));\n            ctx->use_certificate_chain_file(\"server.pem\");\n            ctx->use_private_key_file(\"server.key\", boost::asio::ssl::context::pem);\n        } catch (std::exception& e) {\n            std::cerr << \"Error in TLS initialization: \" << e.what() << std::endl;\n        }\n\n        return ctx;\n    }\n\n    boost::asio::io_service ios_;\n    server_plain endpoint_plain_;\n    server_tls endpoint_tls_;\n};",
      "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/config/asio.hpp>\n#include <websocketpp/server.hpp>\n#include <boost/asio/io_service.hpp>\n#include <boost/asio/ssl/context.hpp>\n\ntypedef websocketpp::server<websocketpp::config::asio> server_plain;\ntypedef websocketpp::server<websocketpp::config::asio_tls> server_tls;\ntypedef websocketpp::lib::shared_ptr<boost::asio::ssl::context> context_ptr;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer() : ios_(), endpoint_plain_(), endpoint_tls_() {}\n\n    void init() {\n        endpoint_plain_.init_asio(&ios_);\n        endpoint_tls_.init_asio(&ios_);\n\n        endpoint_plain_.set_message_handler(\n            websocketpp::lib::bind(&WebSocketServer::on_message<server_plain>, this, &endpoint_plain_, websocketpp::lib::placeholders::_1, websocketpp::lib::placeholders::_2));\n        endpoint_tls_.set_message_handler(\n            websocketpp::lib::bind(&WebSocketServer::on_message<server_tls>, this, &endpoint_tls_, websocketpp::lib::placeholders::_1, websocketpp::lib::placeholders::_2));\n\n        endpoint_tls_.set_tls_init_handler(\n            websocketpp::lib::bind(&WebSocketServer::on_tls_init, this, websocketpp::lib::placeholders::_1));\n\n        endpoint_plain_.listen(80);\n        endpoint_tls_.listen(443);\n\n        endpoint_plain_.start_accept();\n        endpoint_tls_.start_accept();\n    }\n\n    void run() {\n        ios_.run();\n    }\n\nprivate:\n    template <typename EndpointType>\n    void on_message(EndpointType* s, websocketpp::connection_hdl hdl, typename EndpointType::message_ptr msg) {\n        s->send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    std::string get_password() {\n        return \"password\"; // Replace with your actual password\n    }\n\n    context_ptr on_tls_init(websocketpp::connection_hdl hdl) {\n        context_ptr ctx = websocketpp::lib::make_shared<boost::asio::ssl::context>(boost::asio::ssl::context::tlsv1);\n        ctx->set_options(boost::asio::ssl::context::default_workarounds |\n                         boost::asio::ssl::context::no_sslv2 |\n                         boost::asio::ssl::context::single_dh_use);\n        ctx->set_password_callback(websocketpp::lib::bind(&WebSocketServer::get_password, this));\n        ctx->use_certificate_chain_file(\"server.pem\");\n        ctx->use_private_key_file(\"server.key\", boost::asio::ssl::context::pem);\n        return ctx;\n    }\n\n    boost::asio::io_service ios_;\n    server_plain endpoint_plain_;\n    server_tls endpoint_tls_;\n};",
      "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/config/asio.hpp>\n#include <websocketpp/server.hpp>\n#include <boost/asio/io_service.hpp>\n#include <iostream>\n#include <string>\n\ntypedef websocketpp::server<websocketpp::config::asio> server_plain;\ntypedef websocketpp::server<websocketpp::config::asio_tls> server_tls;\ntypedef websocketpp::lib::shared_ptr<boost::asio::ssl::context> context_ptr;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer() : ios_(), endpoint_plain_(), endpoint_tls_() {\n        endpoint_plain_.init_asio(&ios_);\n        endpoint_tls_.init_asio(&ios_);\n    }\n\n    void init() {\n        endpoint_plain_.set_message_handler(bind(&WebSocketServer::on_message<server_plain>, this, &endpoint_plain_, ::_1, ::_2));\n        endpoint_tls_.set_message_handler(bind(&WebSocketServer::on_message<server_tls>, this, &endpoint_tls_, ::_1, ::_2));\n        endpoint_tls_.set_tls_init_handler(bind(&WebSocketServer::on_tls_init, this, ::_1));\n\n        endpoint_plain_.listen(80);\n        endpoint_tls_.listen(443);\n\n        endpoint_plain_.start_accept();\n        endpoint_tls_.start_accept();\n    }\n\n    void run() {\n        ios_.run();\n    }\n\nprivate:\n    template <typename EndpointType>\n    void on_message(EndpointType* s, websocketpp::connection_hdl hdl, typename EndpointType::message_ptr msg) {\n        s->send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    std::string get_password() {\n        return \"password\"; // Replace with actual password retrieval logic\n    }\n\n    context_ptr on_tls_init(websocketpp::connection_hdl hdl) {\n        context_ptr ctx = websocketpp::lib::make_shared<boost::asio::ssl::context>(boost::asio::ssl::context::tlsv1);\n        try {\n            ctx->set_options(boost::asio::ssl::context::default_workarounds |\n                             boost::asio::ssl::context::no_sslv2 |\n                             boost::asio::ssl::context::single_dh_use);\n            ctx->set_password_callback(bind(&WebSocketServer::get_password, this));\n            ctx->use_certificate_chain_file(\"server.pem\");\n            ctx->use_private_key_file(\"server.pem\", boost::asio::ssl::context::pem);\n        } catch (std::exception& e) {\n            std::cerr << \"TLS initialization error: \" << e.what() << std::endl;\n        }\n        return ctx;\n    }\n\n    boost::asio::io_service ios_;\n    server_plain endpoint_plain_;\n    server_tls endpoint_tls_;\n};",
      "#include <websocketpp/config/asio.hpp>\n#include <websocketpp/config/asio_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <boost/asio/io_service.hpp>\n#include <iostream>\n#include <string>\n\ntypedef websocketpp::server<websocketpp::config::asio> server_plain;\ntypedef websocketpp::server<websocketpp::config::asio_tls> server_tls;\ntypedef websocketpp::lib::shared_ptr<boost::asio::ssl::context> context_ptr;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer() : ios_(), endpoint_plain_(), endpoint_tls_() {}\n\n    void init() {\n        endpoint_plain_.init_asio(&ios_);\n        endpoint_tls_.init_asio(&ios_);\n\n        endpoint_plain_.set_message_handler(websocketpp::lib::bind(\n            &WebSocketServer::on_message<server_plain>, this, &endpoint_plain_, websocketpp::lib::placeholders::_1, websocketpp::lib::placeholders::_2));\n        endpoint_tls_.set_message_handler(websocketpp::lib::bind(\n            &WebSocketServer::on_message<server_tls>, this, &endpoint_tls_, websocketpp::lib::placeholders::_1, websocketpp::lib::placeholders::_2));\n\n        endpoint_tls_.set_tls_init_handler(websocketpp::lib::bind(\n            &WebSocketServer::on_tls_init, this, websocketpp::lib::placeholders::_1));\n\n        endpoint_plain_.listen(80);\n        endpoint_tls_.listen(443);\n\n        endpoint_plain_.start_accept();\n        endpoint_tls_.start_accept();\n    }\n\n    void run() {\n        ios_.run();\n    }\n\nprivate:\n    template <typename EndpointType>\n    void on_message(EndpointType* s, websocketpp::connection_hdl hdl, typename EndpointType::message_ptr msg) {\n        s->send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    std::string get_password() {\n        return \"password\"; // Replace with actual password retrieval logic\n    }\n\n    context_ptr on_tls_init(websocketpp::connection_hdl hdl) {\n        context_ptr ctx = websocketpp::lib::make_shared<boost::asio::ssl::context>(boost::asio::ssl::context::tlsv12);\n\n        try {\n            ctx->set_options(boost::asio::ssl::context::default_workarounds |\n                             boost::asio::ssl::context::no_sslv2 |\n                             boost::asio::ssl::context::no_sslv3 |\n                             boost::asio::ssl::context::single_dh_use);\n\n            ctx->set_password_callback(websocketpp::lib::bind(\n                &WebSocketServer::get_password, this));\n\n            ctx->use_certificate_chain_file(\"server.pem\");\n            ctx->use_private_key_file(\"server.key\", boost::asio::ssl::context::pem);\n        } catch (std::exception& e) {\n            std::cerr << \"Error in TLS initialization: \" << e.what() << std::endl;\n        }\n\n        return ctx;\n    }\n\n    boost::asio::io_service ios_;\n    server_plain endpoint_plain_;\n    server_tls endpoint_tls_;\n};",
      "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/config/asio.hpp>\n#include <websocketpp/server.hpp>\n#include <boost/asio.hpp>\n#include <boost/bind.hpp>\n#include <iostream>\n#include <string>\n\ntypedef websocketpp::server<websocketpp::config::asio> server_plain;\ntypedef websocketpp::server<websocketpp::config::asio_tls> server_tls;\ntypedef websocketpp::lib::shared_ptr<boost::asio::ssl::context> context_ptr;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer() : ios_(), endpoint_plain_(), endpoint_tls_() {\n        endpoint_plain_.init_asio(&ios_);\n        endpoint_tls_.init_asio(&ios_);\n    }\n\n    void init() {\n        endpoint_plain_.set_message_handler(boost::bind(&WebSocketServer::on_message<server_plain>, this, &endpoint_plain_, ::_1, ::_2));\n        endpoint_tls_.set_message_handler(boost::bind(&WebSocketServer::on_message<server_tls>, this, &endpoint_tls_, ::_1, ::_2));\n\n        endpoint_tls_.set_tls_init_handler(boost::bind(&WebSocketServer::on_tls_init, this, ::_1));\n\n        endpoint_plain_.listen(80);\n        endpoint_tls_.listen(443);\n\n        endpoint_plain_.start_accept();\n        endpoint_tls_.start_accept();\n    }\n\n    void run() {\n        ios_.run();\n    }\n\nprivate:\n    template <typename EndpointType>\n    void on_message(EndpointType* s, websocketpp::connection_hdl hdl, typename EndpointType::message_ptr msg) {\n        s->send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    std::string get_password() {\n        return \"test\";\n    }\n\n    context_ptr on_tls_init(websocketpp::connection_hdl hdl) {\n        context_ptr ctx = websocketpp::lib::make_shared<boost::asio::ssl::context>(boost::asio::ssl::context::tlsv1);\n        try {\n            ctx->set_options(boost::asio::ssl::context::default_workarounds |\n                             boost::asio::ssl::context::no_sslv2 |\n                             boost::asio::ssl::context::no_sslv3 |\n                             boost::asio::ssl::context::single_dh_use);\n            ctx->set_password_callback(boost::bind(&WebSocketServer::get_password, this));\n            ctx->use_certificate_chain_file(\"server.pem\");\n            ctx->use_private_key_file(\"server.pem\", boost::asio::ssl::context::pem);\n        } catch (std::exception& e) {\n            std::cerr << \"Error in TLS initialization: \" << e.what() << std::endl;\n        }\n        return ctx;\n    }\n\n    boost::asio::io_service ios_;\n    server_plain endpoint_plain_;\n    server_tls endpoint_tls_;\n};\n\nint main() {\n    WebSocketServer server;\n    server.init();\n    server.run();\n    return 0;\n}",
      "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/config/asio.hpp>\n#include <websocketpp/server.hpp>\n#include <boost/asio.hpp>\n#include <boost/bind.hpp>\n#include <iostream>\n#include <string>\n\ntypedef websocketpp::server<websocketpp::config::asio> server_plain;\ntypedef websocketpp::server<websocketpp::config::asio_tls> server_tls;\ntypedef websocketpp::lib::shared_ptr<boost::asio::ssl::context> context_ptr;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer() : ios_(), endpoint_plain_(), endpoint_tls_() {}\n\n    void init() {\n        endpoint_plain_.init_asio(&ios_);\n        endpoint_tls_.init_asio(&ios_);\n\n        endpoint_plain_.set_message_handler(bind(&WebSocketServer::on_message<server_plain>, this, &endpoint_plain_, ::_1, ::_2));\n        endpoint_tls_.set_message_handler(bind(&WebSocketServer::on_message<server_tls>, this, &endpoint_tls_, ::_1, ::_2));\n\n        endpoint_tls_.set_tls_init_handler(bind(&WebSocketServer::on_tls_init, this, ::_1));\n\n        endpoint_plain_.listen(80);\n        endpoint_tls_.listen(443);\n\n        endpoint_plain_.start_accept();\n        endpoint_tls_.start_accept();\n    }\n\n    void run() {\n        ios_.run();\n    }\n\nprivate:\n    template <typename EndpointType>\n    void on_message(EndpointType* s, websocketpp::connection_hdl hdl, typename EndpointType::message_ptr msg) {\n        s->send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    std::string get_password() {\n        return \"test\";\n    }\n\n    context_ptr on_tls_init(websocketpp::connection_hdl hdl) {\n        context_ptr ctx(new boost::asio::ssl::context(boost::asio::ssl::context::tlsv1));\n        try {\n            ctx->set_options(boost::asio::ssl::context::default_workarounds |\n                             boost::asio::ssl::context::no_sslv2 |\n                             boost::asio::ssl::context::single_dh_use);\n            ctx->set_password_callback(bind(&WebSocketServer::get_password, this));\n            ctx->use_certificate_chain_file(\"server.pem\");\n            ctx->use_private_key_file(\"server.pem\", boost::asio::ssl::context::pem);\n            ctx->use_tmp_dh_file(\"dh.pem\");\n        } catch (std::exception& e) {\n            std::cerr << \"Error in TLS initialization: \" << e.what() << std::endl;\n        }\n        return ctx;\n    }\n\n    boost::asio::io_service ios_;\n    server_plain endpoint_plain_;\n    server_tls endpoint_tls_;\n};\n\nint main() {\n    WebSocketServer server;\n    server.init();\n    server.run();\n    return 0;\n}",
      "#include <websocketpp/config/asio.hpp>\n#include <websocketpp/config/asio_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <boost/asio/io_service.hpp>\n#include <iostream>\n#include <memory>\n\ntypedef websocketpp::server<websocketpp::config::asio> server_plain;\ntypedef websocketpp::server<websocketpp::config::asio_tls> server_tls;\ntypedef std::shared_ptr<boost::asio::ssl::context> context_ptr;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer() : ios_(), endpoint_plain_(), endpoint_tls_() {}\n\n    void init() {\n        endpoint_plain_.init_asio(&ios_);\n        endpoint_tls_.init_asio(&ios_);\n\n        endpoint_plain_.set_message_handler(bind(&WebSocketServer::on_message<server_plain>, this, &endpoint_plain_, ::_1, ::_2));\n        endpoint_tls_.set_message_handler(bind(&WebSocketServer::on_message<server_tls>, this, &endpoint_tls_, ::_1, ::_2));\n\n        endpoint_tls_.set_tls_init_handler(bind(&WebSocketServer::on_tls_init, this, ::_1));\n\n        endpoint_plain_.listen(80);\n        endpoint_tls_.listen(443);\n\n        endpoint_plain_.start_accept();\n        endpoint_tls_.start_accept();\n    }\n\n    void run() {\n        ios_.run();\n    }\n\nprivate:\n    template <typename EndpointType>\n    void on_message(EndpointType* s, websocketpp::connection_hdl hdl, typename EndpointType::message_ptr msg) {\n        s->send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    std::string get_password() {\n        return \"password\";\n    }\n\n    context_ptr on_tls_init(websocketpp::connection_hdl hdl) {\n        context_ptr ctx = std::make_shared<boost::asio::ssl::context>(boost::asio::ssl::context::tlsv12);\n\n        try {\n            ctx->set_options(boost::asio::ssl::context::default_workarounds |\n                             boost::asio::ssl::context::no_sslv2 |\n                             boost::asio::ssl::context::no_sslv3 |\n                             boost::asio::ssl::context::single_dh_use);\n            ctx->set_password_callback(bind(&WebSocketServer::get_password, this));\n            ctx->use_certificate_chain_file(\"server.pem\");\n            ctx->use_private_key_file(\"server.pem\", boost::asio::ssl::context::pem);\n            ctx->use_tmp_dh_file(\"dh.pem\");\n        } catch (std::exception& e) {\n            std::cerr << \"Error in TLS initialization: \" << e.what() << std::endl;\n        }\n\n        return ctx;\n    }\n\n    boost::asio::io_service ios_;\n    server_plain endpoint_plain_;\n    server_tls endpoint_tls_;\n};",
      "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/config/asio.hpp>\n#include <websocketpp/server.hpp>\n#include <boost/asio.hpp>\n#include <boost/bind/bind.hpp>\n#include <boost/asio/ssl/context.hpp>\n#include <boost/asio/ssl/stream.hpp>\n#include <iostream>\n\ntypedef websocketpp::server<websocketpp::config::asio> server_plain;\ntypedef websocketpp::server<websocketpp::config::asio_tls> server_tls;\ntypedef boost::asio::ssl::context context;\ntypedef std::shared_ptr<context> context_ptr;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer() : ios_(), endpoint_plain_(), endpoint_tls_() {}\n\n    void init() {\n        endpoint_plain_.init_asio(&ios_);\n        endpoint_tls_.init_asio(&ios_);\n\n        endpoint_plain_.set_message_handler(boost::bind(&WebSocketServer::on_message<server_plain>, this, &endpoint_plain_, ::_1, ::_2));\n        endpoint_tls_.set_message_handler(boost::bind(&WebSocketServer::on_message<server_tls>, this, &endpoint_tls_, ::_1, ::_2));\n\n        endpoint_tls_.set_tls_init_handler(boost::bind(&WebSocketServer::on_tls_init, this, ::_1));\n\n        endpoint_plain_.listen(80);\n        endpoint_tls_.listen(443);\n\n        endpoint_plain_.start_accept();\n        endpoint_tls_.start_accept();\n    }\n\n    void run() {\n        ios_.run();\n    }\n\nprivate:\n    template <typename EndpointType>\n    void on_message(EndpointType* s, websocketpp::connection_hdl hdl, typename EndpointType::message_ptr msg) {\n        s->send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    std::string get_password() {\n        return \"test\";\n    }\n\n    context_ptr on_tls_init(websocketpp::connection_hdl hdl) {\n        context_ptr ctx = std::make_shared<context>(context::tlsv1);\n        try {\n            ctx->set_options(boost::asio::ssl::context::default_workarounds |\n                             boost::asio::ssl::context::no_sslv2 |\n                             boost::asio::ssl::context::single_dh_use);\n            ctx->set_password_callback(boost::bind(&WebSocketServer::get_password, this));\n            ctx->use_certificate_chain_file(\"server.crt\");\n            ctx->use_private_key_file(\"server.key\", boost::asio::ssl::context::pem);\n            ctx->use_tmp_dh_file(\"dh.pem\");\n        } catch (std::exception& e) {\n            std::cerr << \"Error in TLS initialization: \" << e.what() << std::endl;\n        }\n        return ctx;\n    }\n\n    boost::asio::io_service ios_;\n    server_plain endpoint_plain_;\n    server_tls endpoint_tls_;\n};\n\nint main() {\n    WebSocketServer server;\n    server.init();\n    server.run();\n    return 0;\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 51,
    "Instruction": "Task Description: Implement a function that demonstrates inter-process communication between a parent and child process using pipes in C++. The function should create a pipe, fork a child process, and have the parent process write data to the pipe while the child process reads and displays the data.\n\nFunction Description: The function `pipe_communication` sets up a pipe for communication between a parent and child process. The parent process writes a string to the pipe, and the child process reads and prints the data. The function handles pipe creation, process forking, and proper cleanup of file descriptors.\n\nInput: None\n\nOutput: None (The function prints messages to stdout indicating the progress and results of the pipe communication:\n- \"pipe create error\" if pipe creation fails\n- \"Read data from the pipe is [data]\" from the child process\n- \"Write data [data]\" and \"Parent write over\" from the parent process\n- \"parent close fd[1] over\" when parent completes cleanup)",
    "Canonical_solution": "#include <unistd.h>\n#include <stdio.h>\n#include <cstring>\n#include <cstdlib>\n\nvoid pipe_communication() {\n    int pipe_fd[2];\n    pid_t pid;\n\n    char r_buf[4];\n    char w_buf[100];\n    memset(r_buf,0,sizeof(r_buf));\n    memset(w_buf,0,sizeof(w_buf));\n    int r_num;\n\n    if(pipe(pipe_fd)<0) {\n        printf(\"pipe create error\\n\");\n        return;\n    }\n\n    if((pid=fork())==0) {\n        printf(\"\\n\");\n        close(pipe_fd[1]);\n        sleep(5);\n        while((r_num=read(pipe_fd[0],r_buf,4))!=0)\n            printf(\"Read data from the pipe is %s\\n\", r_buf);\n\n        close(pipe_fd[0]);\n        exit(0);\n    }\n    else if(pid>0) {\n        close(pipe_fd[0]);\n        const char* content = \"1111222233334444\";\n        strncpy(w_buf, content, strlen(content));\n        if(write(pipe_fd[1],w_buf, strlen(content))!=-1) {\n            printf(\"Write data %s\\n\", w_buf);\n            printf(\"Parent write over\\n\");\n        }\n        close(pipe_fd[1]);\n        printf(\"parent close fd[1] over\\n\");\n        wait(&pid);\n    }\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 155,
    "matched_results": [
      "#include <iostream>\n#include <unistd.h>\n#include <sys/types.h>\n#include <sys/wait.h>\n#include <cstring>\n\nvoid pipe_communication() {\n    int fd[2];\n    pid_t pid;\n    const char* write_msg = \"Hello from parent\";\n    char read_msg[100];\n\n    if (pipe(fd) == -1) {\n        std::cerr << \"pipe create error\" << std::endl;\n        return;\n    }\n\n    pid = fork();\n    if (pid < 0) {\n        std::cerr << \"fork error\" << std::endl;\n        return;\n    }\n\n    if (pid == 0) { // Child process\n        close(fd[1]); // Close unused write end\n        read(fd[0], read_msg, sizeof(read_msg));\n        std::cout << \"Read data from the pipe is \" << read_msg << std::endl;\n        close(fd[0]);\n    } else { // Parent process\n        close(fd[0]); // Close unused read end\n        write(fd[1], write_msg, strlen(write_msg) + 1);\n        std::cout << \"Write data \" << write_msg << std::endl;\n        std::cout << \"Parent write over\" << std::endl;\n        close(fd[1]);\n        std::cout << \"parent close fd[1] over\" << std::endl;\n        wait(NULL); // Wait for child process to finish\n    }\n}",
      "#include <iostream>\n#include <unistd.h>\n#include <sys/types.h>\n#include <sys/wait.h>\n\nvoid pipe_communication() {\n    int fd[2];\n    pid_t pid;\n    char buf[1024];\n    const char* data = \"Hello from parent process\";\n\n    if (pipe(fd) == -1) {\n        std::cerr << \"pipe create error\" << std::endl;\n        return;\n    }\n\n    pid = fork();\n    if (pid == -1) {\n        std::cerr << \"fork error\" << std::endl;\n        return;\n    }\n\n    if (pid == 0) {  // Child process\n        close(fd[1]);  // Close write end\n        ssize_t bytesRead = read(fd[0], buf, sizeof(buf));\n        if (bytesRead > 0) {\n            buf[bytesRead] = '\\0';\n            std::cout << \"Read data from the pipe is \" << buf << std::endl;\n        }\n        close(fd[0]);  // Close read end\n    } else {  // Parent process\n        close(fd[0]);  // Close read end\n        write(fd[1], data, strlen(data));\n        std::cout << \"Write data \" << data << std::endl;\n        std::cout << \"Parent write over\" << std::endl;\n        close(fd[1]);  // Close write end\n        std::cout << \"parent close fd[1] over\" << std::endl;\n        wait(NULL);  // Wait for child process to finish\n    }\n}",
      "#include <iostream>\n#include <unistd.h>\n#include <sys/types.h>\n#include <sys/wait.h>\n#include <cstring>\n\nvoid pipe_communication() {\n    int fd[2];\n    pid_t pid;\n    const char* data = \"Hello from parent\";\n    char buffer[100];\n\n    if (pipe(fd) == -1) {\n        std::cerr << \"pipe create error\" << std::endl;\n        return;\n    }\n\n    pid = fork();\n\n    if (pid < 0) {\n        std::cerr << \"fork error\" << std::endl;\n        return;\n    } else if (pid == 0) {\n        // Child process\n        close(fd[1]); // Close the write end of the pipe\n        read(fd[0], buffer, sizeof(buffer));\n        std::cout << \"Read data from the pipe is \" << buffer << std::endl;\n        close(fd[0]); // Close the read end of the pipe\n    } else {\n        // Parent process\n        close(fd[0]); // Close the read end of the pipe\n        write(fd[1], data, strlen(data) + 1);\n        std::cout << \"Write data \" << data << std::endl;\n        std::cout << \"Parent write over\" << std::endl;\n        close(fd[1]); // Close the write end of the pipe\n        std::cout << \"parent close fd[1] over\" << std::endl;\n        wait(NULL); // Wait for child process to finish\n    }\n}",
      "#include <iostream>\n#include <unistd.h>\n#include <sys/types.h>\n#include <sys/wait.h>\n#include <cstring>\n\nvoid pipe_communication() {\n    int pipefd[2];\n    pid_t pid;\n    const char* data = \"Hello from parent\";\n    char buffer[128];\n\n    if (pipe(pipefd) == -1) {\n        std::cerr << \"pipe create error\" << std::endl;\n        return;\n    }\n\n    pid = fork();\n    if (pid == -1) {\n        std::cerr << \"fork error\" << std::endl;\n        return;\n    }\n\n    if (pid == 0) {\n        // Child process\n        close(pipefd[1]); // Close unused write end\n        ssize_t bytesRead = read(pipefd[0], buffer, sizeof(buffer) - 1);\n        if (bytesRead >= 0) {\n            buffer[bytesRead] = '\\0';\n            std::cout << \"Read data from the pipe is \" << buffer << std::endl;\n        }\n        close(pipefd[0]);\n    } else {\n        // Parent process\n        close(pipefd[0]); // Close unused read end\n        std::cout << \"Write data \" << data << std::endl;\n        write(pipefd[1], data, strlen(data));\n        std::cout << \"Parent write over\" << std::endl;\n        close(pipefd[1]);\n        std::cout << \"parent close fd[1] over\" << std::endl;\n        wait(NULL); // Wait for child process to finish\n    }\n}",
      "#include <iostream>\n#include <unistd.h>\n#include <cstring>\n\nvoid pipe_communication() {\n    int fd[2];\n    pid_t pid;\n    const char* write_msg = \"Hello from parent\";\n    char read_msg[100];\n\n    if (pipe(fd) == -1) {\n        std::cerr << \"pipe create error\" << std::endl;\n        return;\n    }\n\n    pid = fork();\n\n    if (pid < 0) {\n        std::cerr << \"fork error\" << std::endl;\n        return;\n    }\n\n    if (pid > 0) { // Parent process\n        close(fd[0]); // Close the read end\n        write(fd[1], write_msg, strlen(write_msg) + 1);\n        std::cout << \"Write data \" << write_msg << std::endl;\n        close(fd[1]); // Close the write end\n        std::cout << \"Parent write over\" << std::endl;\n        std::cout << \"parent close fd[1] over\" << std::endl;\n    } else { // Child process\n        close(fd[1]); // Close the write end\n        read(fd[0], read_msg, sizeof(read_msg));\n        std::cout << \"Read data from the pipe is \" << read_msg << std::endl;\n        close(fd[0]); // Close the read end\n    }\n}",
      "#include <iostream>\n#include <unistd.h>\n#include <cstring>\n#include <sys/types.h>\n#include <sys/wait.h>\n\nvoid pipe_communication() {\n    int fd[2];\n    pid_t pid;\n    const char* write_msg = \"Hello from parent\";\n    char read_msg[100];\n\n    if (pipe(fd) == -1) {\n        std::cerr << \"pipe create error\" << std::endl;\n        return;\n    }\n\n    pid = fork();\n\n    if (pid < 0) {\n        std::cerr << \"fork error\" << std::endl;\n        return;\n    }\n\n    if (pid > 0) { // Parent process\n        close(fd[0]); // Close reading end of pipe\n        write(fd[1], write_msg, strlen(write_msg) + 1);\n        std::cout << \"Write data \" << write_msg << std::endl;\n        close(fd[1]); // Close writing end of pipe\n        std::cout << \"Parent write over\" << std::endl;\n        std::cout << \"parent close fd[1] over\" << std::endl;\n        wait(NULL); // Wait for child to finish\n    } else { // Child process\n        close(fd[1]); // Close writing end of pipe\n        read(fd[0], read_msg, sizeof(read_msg));\n        std::cout << \"Read data from the pipe is \" << read_msg << std::endl;\n        close(fd[0]); // Close reading end of pipe\n    }\n}",
      "#include <iostream>\n#include <unistd.h>\n#include <sys/types.h>\n#include <sys/wait.h>\n#include <cstring>\n\nvoid pipe_communication() {\n    int fd[2];\n    pid_t pid;\n    const char* data = \"Hello from parent\";\n    char buffer[100];\n\n    if (pipe(fd) == -1) {\n        std::cerr << \"pipe create error\" << std::endl;\n        return;\n    }\n\n    pid = fork();\n    if (pid < 0) {\n        std::cerr << \"fork error\" << std::endl;\n        return;\n    }\n\n    if (pid == 0) {\n        // Child process\n        close(fd[1]); // Close the write end of the pipe\n        ssize_t bytesRead = read(fd[0], buffer, sizeof(buffer) - 1);\n        if (bytesRead >= 0) {\n            buffer[bytesRead] = '\\0'; // Null-terminate the string\n            std::cout << \"Read data from the pipe is \" << buffer << std::endl;\n        }\n        close(fd[0]); // Close the read end of the pipe\n    } else {\n        // Parent process\n        close(fd[0]); // Close the read end of the pipe\n        write(fd[1], data, strlen(data));\n        std::cout << \"Write data \" << data << std::endl;\n        std::cout << \"Parent write over\" << std::endl;\n        close(fd[1]); // Close the write end of the pipe\n        std::cout << \"parent close fd[1] over\" << std::endl;\n        wait(NULL); // Wait for the child process to finish\n    }\n}",
      "#include <iostream>\n#include <unistd.h>\n#include <sys/types.h>\n#include <sys/wait.h>\n\nvoid pipe_communication() {\n    int fd[2];\n    pid_t pid;\n    const char* data = \"Hello from parent\";\n    char buffer[128];\n\n    if (pipe(fd) == -1) {\n        std::cerr << \"pipe create error\" << std::endl;\n        return;\n    }\n\n    pid = fork();\n    if (pid == -1) {\n        std::cerr << \"fork error\" << std::endl;\n        return;\n    }\n\n    if (pid == 0) {\n        close(fd[1]);\n        read(fd[0], buffer, sizeof(buffer));\n        std::cout << \"Read data from the pipe is \" << buffer << std::endl;\n        close(fd[0]);\n    } else {\n        close(fd[0]);\n        write(fd[1], data, strlen(data) + 1);\n        std::cout << \"Write data \" << data << std::endl;\n        std::cout << \"Parent write over\" << std::endl;\n        close(fd[1]);\n        std::cout << \"parent close fd[1] over\" << std::endl;\n        wait(NULL);\n    }\n}",
      "#include <iostream>\n#include <unistd.h>\n#include <sys/types.h>\n#include <sys/wait.h>\n#include <cstring>\n\nvoid pipe_communication() {\n    int fd[2];\n    pid_t pid;\n    const char* write_msg = \"Hello from parent\";\n    char read_msg[100];\n\n    if (pipe(fd) == -1) {\n        std::cerr << \"pipe create error\" << std::endl;\n        return;\n    }\n\n    pid = fork();\n\n    if (pid < 0) {\n        std::cerr << \"fork error\" << std::endl;\n        return;\n    }\n\n    if (pid > 0) { // Parent process\n        close(fd[0]); // Close the read end of the pipe\n        write(fd[1], write_msg, strlen(write_msg) + 1);\n        std::cout << \"Write data \" << write_msg << std::endl;\n        close(fd[1]); // Close the write end of the pipe\n        std::cout << \"Parent write over\" << std::endl;\n        std::cout << \"parent close fd[1] over\" << std::endl;\n        wait(NULL); // Wait for child process to finish\n    } else { // Child process\n        close(fd[1]); // Close the write end of the pipe\n        read(fd[0], read_msg, sizeof(read_msg));\n        std::cout << \"Read data from the pipe is \" << read_msg << std::endl;\n        close(fd[0]); // Close the read end of the pipe\n    }\n}",
      "#include <iostream>\n#include <unistd.h>\n#include <cstring>\n#include <sys/types.h>\n#include <sys/wait.h>\n\nvoid pipe_communication() {\n    int fd[2];\n    pid_t pid;\n    const char* data = \"Hello from parent\";\n    char buffer[100];\n\n    if (pipe(fd) == -1) {\n        std::cerr << \"pipe create error\" << std::endl;\n        return;\n    }\n\n    pid = fork();\n\n    if (pid < 0) {\n        std::cerr << \"fork error\" << std::endl;\n        return;\n    }\n\n    if (pid == 0) {\n        // Child process\n        close(fd[1]); // Close the write end of the pipe\n        ssize_t bytesRead = read(fd[0], buffer, sizeof(buffer) - 1);\n        if (bytesRead >= 0) {\n            buffer[bytesRead] = '\\0';\n            std::cout << \"Read data from the pipe is \" << buffer << std::endl;\n        }\n        close(fd[0]); // Close the read end of the pipe\n    } else {\n        // Parent process\n        close(fd[0]); // Close the read end of the pipe\n        std::cout << \"Write data \" << data << std::endl;\n        write(fd[1], data, strlen(data));\n        std::cout << \"Parent write over\" << std::endl;\n        close(fd[1]); // Close the write end of the pipe\n        std::cout << \"parent close fd[1] over\" << std::endl;\n        wait(NULL); // Wait for child process to finish\n    }\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 6,
    "Instruction": "Task Description: Implement a multi-threaded HTTP download manager using libcurl in C++ that can handle multiple download tasks concurrently, avoid duplicate downloads, and manage resources efficiently.\n\nClass Description: The DownloadPool class manages a pool of worker threads that process download tasks. Each task downloads a file from a given URL and saves it to a specified output path. The class ensures thread safety and prevents duplicate downloads.\n\nAttributes:\n- m_threads: std::vector<std::thread> - Collection of worker threads\n- m_queue: std::queue<Task> - Queue of pending download tasks\n- m_urls: std::unordered_set<std::string> - Set of unique task identifiers to prevent duplicates\n- m_mtx: std::mutex - Mutex for thread synchronization\n- m_noMoreTask: bool - Flag indicating no more tasks will be added\n\nMethods:\n- DownloadPool() -> void - Constructor initializes libcurl and creates worker threads\n- ~DownloadPool() -> void - Destructor cleans up libcurl resources\n- addTask(const std::string& url, const std::string& output) -> void - Adds a new download task if not already present\n- setNoMoreTask() -> void - Signals that no more tasks will be added\n- finishAndWaitForExit() -> void - Waits for all threads to complete current tasks\n- run() -> void - Worker thread function that processes tasks from the queue\n\nTask Class Description: The Task class represents an individual download task with URL and output file path.\n\nAttributes:\n- m_url: std::string - URL to download from\n- m_output: std::string - Local file path to save to\n\nMethods:\n- run() -> void - Executes the download task using libcurl\n- writeData(void* buffer, size_t size, size_t nmemb) -> size_t - Callback function for writing received data to file",
    "Canonical_solution": "#include <curl/curl.h>\n#include <iostream>\n#include <fstream>\n#include <string>\n#include <thread>\n#include <mutex>\n#include <queue>\n#include <unordered_set>\n\nclass Task\n{\npublic:\n    Task(const std::string& url, const std::string& output) : m_url(url), m_output(output) {}\n    \n    void run()\n    {\n        std::ofstream output(m_output, std::fstream::in | std::fstream::out | std::fstream::trunc);\n        output.close();\n        \n        CURL *curl_handler = curl_easy_init();\n        curl_easy_setopt(curl_handler, CURLOPT_URL, m_url.c_str());\n        curl_easy_setopt(curl_handler, CURLOPT_TIMEOUT, 60);\n        curl_easy_setopt(curl_handler, CURLOPT_WRITEFUNCTION, &Task::writeData);\n        curl_easy_setopt(curl_handler, CURLOPT_WRITEDATA, this);\n\n        curl_easy_perform(curl_handler);\n        \n        curl_easy_cleanup(curl_handler);\n    }\n\n    size_t writeData(void *buffer, size_t size, size_t nmemb)\n    {\n        std::ofstream file;\n        file.open(m_output, std::fstream::in | std::fstream::out | std::fstream::app | std::fstream::binary);\n        size_t bytesToWrite = size * nmemb;\n        file.write(reinterpret_cast<const char *>(buffer), bytesToWrite);\n        file.close();\n        \n        return bytesToWrite;\n    }\n\nprivate:\n    std::string m_url;\n    std::string m_output;\n};\n\nclass DownloadPool\n{\npublic:\n    DownloadPool()\n    {\n        m_noMoreTask = false;\n        curl_global_init(CURL_GLOBAL_ALL);\n        \n        for (int idx = 0; idx < 4; idx++)\n        {\n            m_threads.push_back(std::thread(&DownloadPool::run, this));\n        }\n    }\n\n    ~DownloadPool()\n    {\n        curl_global_cleanup();\n    }\n\n    void addTask(const std::string &url, const std::string& output)\n    {\n        std::string uid = url + output;\n        bool existed = false;\n        Task task(url, output);\n        m_mtx.lock();\n        if (!(existed = (m_urls.find(uid) != m_urls.cend())))\n        {\n            m_urls.insert(uid);\n            m_queue.push(task);\n        }\n        m_mtx.unlock();\n    }\n\n    void setNoMoreTask()\n    {\n        m_mtx.lock();\n        m_noMoreTask = true;\n        m_mtx.unlock();\n    }\n\n    void finishAndWaitForExit()\n    {\n        setNoMoreTask();\n        for (auto& thread : m_threads)\n        {\n            thread.join();\n        }\n    }\n\nprivate:\n    void run()\n    {\n        while(true)\n        {\n            bool found = false;\n            Task task;\n            \n            m_mtx.lock();\n            if (!m_queue.empty())\n            {\n                task = m_queue.front();\n                m_queue.pop();\n                found = true;\n            }\n            bool noMoreTask = m_noMoreTask;\n            m_mtx.unlock();\n            \n            if (found)\n            {\n                task.run();\n                continue;\n            }\n            if (noMoreTask)\n            {\n                break;\n            }\n            std::this_thread::sleep_for(std::chrono::milliseconds(100));\n        }\n    }\n\n    std::vector<std::thread> m_threads;\n    std::queue<Task> m_queue;\n    std::unordered_set<std::string> m_urls;\n    std::mutex m_mtx;\n    bool m_noMoreTask;\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 146,
    "matched_results": [
      "#include <iostream>\n#include <vector>\n#include <queue>\n#include <unordered_set>\n#include <thread>\n#include <mutex>\n#include <condition_variable>\n#include <curl/curl.h>\n\nclass Task {\npublic:\n    Task(const std::string& url, const std::string& output) : m_url(url), m_output(output) {}\n\n    void run() {\n        CURL* curl;\n        FILE* fp;\n        CURLcode res;\n        curl = curl_easy_init();\n        if (curl) {\n            fp = fopen(m_output.c_str(), \"wb\");\n            curl_easy_setopt(curl, CURLOPT_URL, m_url.c_str());\n            curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, writeData);\n            curl_easy_setopt(curl, CURLOPT_WRITEDATA, fp);\n            res = curl_easy_perform(curl);\n            curl_easy_cleanup(curl);\n            fclose(fp);\n        }\n    }\n\nprivate:\n    std::string m_url;\n    std::string m_output;\n\n    static size_t writeData(void* buffer, size_t size, size_t nmemb, void* userp) {\n        size_t written = fwrite(buffer, size, nmemb, (FILE*)userp);\n        return written;\n    }\n};\n\nclass DownloadPool {\npublic:\n    DownloadPool(size_t numThreads) : m_noMoreTask(false) {\n        curl_global_init(CURL_GLOBAL_DEFAULT);\n        for (size_t i = 0; i < numThreads; ++i) {\n            m_threads.emplace_back(&DownloadPool::run, this);\n        }\n    }\n\n    ~DownloadPool() {\n        finishAndWaitForExit();\n        curl_global_cleanup();\n    }\n\n    void addTask(const std::string& url, const std::string& output) {\n        std::lock_guard<std::mutex> lock(m_mtx);\n        if (m_urls.find(url) == m_urls.end()) {\n            m_urls.insert(url);\n            m_queue.emplace(url, output);\n            m_cv.notify_one();\n        }\n    }\n\n    void setNoMoreTask() {\n        std::lock_guard<std::mutex> lock(m_mtx);\n        m_noMoreTask = true;\n        m_cv.notify_all();\n    }\n\n    void finishAndWaitForExit() {\n        setNoMoreTask();\n        for (auto& thread : m_threads) {\n            if (thread.joinable()) {\n                thread.join();\n            }\n        }\n    }\n\nprivate:\n    std::vector<std::thread> m_threads;\n    std::queue<Task> m_queue;\n    std::unordered_set<std::string> m_urls;\n    std::mutex m_mtx;\n    std::condition_variable m_cv;\n    bool m_noMoreTask;\n\n    void run() {\n        while (true) {\n            Task task(\"\", \"\");\n            {\n                std::unique_lock<std::mutex> lock(m_mtx);\n                m_cv.wait(lock, [this] { return !m_queue.empty() || m_noMoreTask; });\n                if (m_queue.empty() && m_noMoreTask) {\n                    return;\n                }\n                task = std::move(m_queue.front());\n                m_queue.pop();\n            }\n            task.run();\n        }\n    }\n};",
      "#include <iostream>\n#include <vector>\n#include <thread>\n#include <queue>\n#include <unordered_set>\n#include <mutex>\n#include <curl/curl.h>\n\nclass Task {\npublic:\n    Task(const std::string& url, const std::string& output) : m_url(url), m_output(output) {}\n\n    void run() {\n        CURL* curl = curl_easy_init();\n        if (curl) {\n            FILE* fp = fopen(m_output.c_str(), \"wb\");\n            curl_easy_setopt(curl, CURLOPT_URL, m_url.c_str());\n            curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, writeData);\n            curl_easy_setopt(curl, CURLOPT_WRITEDATA, fp);\n            curl_easy_perform(curl);\n            curl_easy_cleanup(curl);\n            fclose(fp);\n        }\n    }\n\nprivate:\n    std::string m_url;\n    std::string m_output;\n\n    static size_t writeData(void* buffer, size_t size, size_t nmemb, void* userp) {\n        return fwrite(buffer, size, nmemb, (FILE*)userp);\n    }\n};\n\nclass DownloadPool {\npublic:\n    DownloadPool(size_t numThreads) : m_noMoreTask(false) {\n        curl_global_init(CURL_GLOBAL_DEFAULT);\n        for (size_t i = 0; i < numThreads; ++i) {\n            m_threads.emplace_back(&DownloadPool::run, this);\n        }\n    }\n\n    ~DownloadPool() {\n        finishAndWaitForExit();\n        curl_global_cleanup();\n    }\n\n    void addTask(const std::string& url, const std::string& output) {\n        std::lock_guard<std::mutex> lock(m_mtx);\n        if (m_urls.find(url) == m_urls.end()) {\n            m_urls.insert(url);\n            m_queue.emplace(url, output);\n        }\n    }\n\n    void setNoMoreTask() {\n        std::lock_guard<std::mutex> lock(m_mtx);\n        m_noMoreTask = true;\n    }\n\n    void finishAndWaitForExit() {\n        setNoMoreTask();\n        for (auto& thread : m_threads) {\n            if (thread.joinable()) {\n                thread.join();\n            }\n        }\n    }\n\nprivate:\n    std::vector<std::thread> m_threads;\n    std::queue<Task> m_queue;\n    std::unordered_set<std::string> m_urls;\n    std::mutex m_mtx;\n    bool m_noMoreTask;\n\n    void run() {\n        while (true) {\n            Task task(\"\", \"\");\n            {\n                std::lock_guard<std::mutex> lock(m_mtx);\n                if (!m_queue.empty()) {\n                    task = m_queue.front();\n                    m_queue.pop();\n                } else if (m_noMoreTask) {\n                    break;\n                } else {\n                    continue;\n                }\n            }\n            task.run();\n        }\n    }\n};",
      "#include <iostream>\n#include <vector>\n#include <thread>\n#include <queue>\n#include <unordered_set>\n#include <mutex>\n#include <curl/curl.h>\n\nclass Task {\npublic:\n    Task(const std::string& url, const std::string& output) : m_url(url), m_output(output) {}\n    void run() {\n        CURL* curl = curl_easy_init();\n        if(curl) {\n            FILE* fp = fopen(m_output.c_str(), \"wb\");\n            curl_easy_setopt(curl, CURLOPT_URL, m_url.c_str());\n            curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, writeData);\n            curl_easy_setopt(curl, CURLOPT_WRITEDATA, fp);\n            curl_easy_perform(curl);\n            curl_easy_cleanup(curl);\n            fclose(fp);\n        }\n    }\nprivate:\n    std::string m_url;\n    std::string m_output;\n    static size_t writeData(void* buffer, size_t size, size_t nmemb, void* userp) {\n        return fwrite(buffer, size, nmemb, (FILE*)userp);\n    }\n};\n\nclass DownloadPool {\npublic:\n    DownloadPool(size_t numThreads) : m_noMoreTask(false) {\n        curl_global_init(CURL_GLOBAL_DEFAULT);\n        for(size_t i = 0; i < numThreads; ++i) {\n            m_threads.emplace_back(&DownloadPool::run, this);\n        }\n    }\n    ~DownloadPool() {\n        finishAndWaitForExit();\n        curl_global_cleanup();\n    }\n    void addTask(const std::string& url, const std::string& output) {\n        std::lock_guard<std::mutex> lock(m_mtx);\n        if(m_urls.find(url) == m_urls.end()) {\n            m_urls.insert(url);\n            m_queue.emplace(url, output);\n        }\n    }\n    void setNoMoreTask() {\n        std::lock_guard<std::mutex> lock(m_mtx);\n        m_noMoreTask = true;\n    }\n    void finishAndWaitForExit() {\n        setNoMoreTask();\n        for(auto& thread : m_threads) {\n            if(thread.joinable()) {\n                thread.join();\n            }\n        }\n    }\nprivate:\n    void run() {\n        while(true) {\n            Task task(\"\", \"\");\n            {\n                std::lock_guard<std::mutex> lock(m_mtx);\n                if(m_queue.empty()) {\n                    if(m_noMoreTask) break;\n                    continue;\n                }\n                task = std::move(m_queue.front());\n                m_queue.pop();\n            }\n            task.run();\n        }\n    }\n    std::vector<std::thread> m_threads;\n    std::queue<Task> m_queue;\n    std::unordered_set<std::string> m_urls;\n    std::mutex m_mtx;\n    bool m_noMoreTask;\n};",
      "#include <iostream>\n#include <vector>\n#include <queue>\n#include <unordered_set>\n#include <thread>\n#include <mutex>\n#include <condition_variable>\n#include <curl/curl.h>\n\nclass Task {\npublic:\n    Task(const std::string& url, const std::string& output) : m_url(url), m_output(output) {}\n    void run();\nprivate:\n    std::string m_url;\n    std::string m_output;\n    static size_t writeData(void* buffer, size_t size, size_t nmemb, void* userp);\n};\n\nsize_t Task::writeData(void* buffer, size_t size, size_t nmemb, void* userp) {\n    FILE* fp = (FILE*)userp;\n    return fwrite(buffer, size, nmemb, fp);\n}\n\nvoid Task::run() {\n    CURL* curl;\n    FILE* fp;\n    CURLcode res;\n\n    curl = curl_easy_init();\n    if(curl) {\n        fp = fopen(m_output.c_str(), \"wb\");\n        curl_easy_setopt(curl, CURLOPT_URL, m_url.c_str());\n        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, writeData);\n        curl_easy_setopt(curl, CURLOPT_WRITEDATA, fp);\n        res = curl_easy_perform(curl);\n        curl_easy_cleanup(curl);\n        fclose(fp);\n    }\n}\n\nclass DownloadPool {\npublic:\n    DownloadPool(size_t numThreads);\n    ~DownloadPool();\n    void addTask(const std::string& url, const std::string& output);\n    void setNoMoreTask();\n    void finishAndWaitForExit();\nprivate:\n    void run();\n    std::vector<std::thread> m_threads;\n    std::queue<Task> m_queue;\n    std::unordered_set<std::string> m_urls;\n    std::mutex m_mtx;\n    std::condition_variable m_cv;\n    bool m_noMoreTask;\n};\n\nDownloadPool::DownloadPool(size_t numThreads) : m_noMoreTask(false) {\n    curl_global_init(CURL_GLOBAL_DEFAULT);\n    for(size_t i = 0; i < numThreads; ++i) {\n        m_threads.emplace_back(&DownloadPool::run, this);\n    }\n}\n\nDownloadPool::~DownloadPool() {\n    finishAndWaitForExit();\n    curl_global_cleanup();\n}\n\nvoid DownloadPool::addTask(const std::string& url, const std::string& output) {\n    std::unique_lock<std::mutex> lock(m_mtx);\n    if(m_urls.find(url) == m_urls.end()) {\n        m_urls.insert(url);\n        m_queue.emplace(url, output);\n        m_cv.notify_one();\n    }\n}\n\nvoid DownloadPool::setNoMoreTask() {\n    std::unique_lock<std::mutex> lock(m_mtx);\n    m_noMoreTask = true;\n    m_cv.notify_all();\n}\n\nvoid DownloadPool::finishAndWaitForExit() {\n    setNoMoreTask();\n    for(auto& thread : m_threads) {\n        if(thread.joinable()) {\n            thread.join();\n        }\n    }\n}\n\nvoid DownloadPool::run() {\n    while(true) {\n        Task task(\"\", \"\");\n        {\n            std::unique_lock<std::mutex> lock(m_mtx);\n            m_cv.wait(lock, [this] { return !m_queue.empty() || m_noMoreTask; });\n            if(m_queue.empty() && m_noMoreTask) {\n                return;\n            }\n            task = std::move(m_queue.front());\n            m_queue.pop();\n        }\n        task.run();\n    }\n}",
      "#include <iostream>\n#include <vector>\n#include <thread>\n#include <queue>\n#include <unordered_set>\n#include <mutex>\n#include <curl/curl.h>\n\nclass Task {\npublic:\n    Task(const std::string& url, const std::string& output) : m_url(url), m_output(output) {}\n    void run() {\n        CURL* curl = curl_easy_init();\n        if (curl) {\n            FILE* fp = fopen(m_output.c_str(), \"wb\");\n            curl_easy_setopt(curl, CURLOPT_URL, m_url.c_str());\n            curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, writeData);\n            curl_easy_setopt(curl, CURLOPT_WRITEDATA, fp);\n            curl_easy_perform(curl);\n            curl_easy_cleanup(curl);\n            fclose(fp);\n        }\n    }\n\nprivate:\n    std::string m_url;\n    std::string m_output;\n\n    static size_t writeData(void* buffer, size_t size, size_t nmemb, void* userp) {\n        return fwrite(buffer, size, nmemb, (FILE*)userp);\n    }\n};\n\nclass DownloadPool {\npublic:\n    DownloadPool(size_t numThreads) : m_noMoreTask(false) {\n        curl_global_init(CURL_GLOBAL_DEFAULT);\n        for (size_t i = 0; i < numThreads; ++i) {\n            m_threads.emplace_back(&DownloadPool::run, this);\n        }\n    }\n\n    ~DownloadPool() {\n        finishAndWaitForExit();\n        curl_global_cleanup();\n    }\n\n    void addTask(const std::string& url, const std::string& output) {\n        std::lock_guard<std::mutex> lock(m_mtx);\n        if (m_urls.find(url) == m_urls.end()) {\n            m_urls.insert(url);\n            m_queue.emplace(url, output);\n        }\n    }\n\n    void setNoMoreTask() {\n        std::lock_guard<std::mutex> lock(m_mtx);\n        m_noMoreTask = true;\n    }\n\n    void finishAndWaitForExit() {\n        setNoMoreTask();\n        for (auto& thread : m_threads) {\n            if (thread.joinable()) {\n                thread.join();\n            }\n        }\n    }\n\nprivate:\n    std::vector<std::thread> m_threads;\n    std::queue<Task> m_queue;\n    std::unordered_set<std::string> m_urls;\n    std::mutex m_mtx;\n    bool m_noMoreTask;\n\n    void run() {\n        while (true) {\n            Task task(\"\", \"\");\n            {\n                std::lock_guard<std::mutex> lock(m_mtx);\n                if (!m_queue.empty()) {\n                    task = m_queue.front();\n                    m_queue.pop();\n                } else if (m_noMoreTask) {\n                    break;\n                } else {\n                    continue;\n                }\n            }\n            task.run();\n        }\n    }\n};",
      "#include <iostream>\n#include <vector>\n#include <thread>\n#include <queue>\n#include <unordered_set>\n#include <mutex>\n#include <curl/curl.h>\n\nclass Task {\npublic:\n    Task(const std::string& url, const std::string& output) : m_url(url), m_output(output) {}\n\n    void run() {\n        CURL* curl;\n        FILE* fp;\n        CURLcode res;\n        curl = curl_easy_init();\n        if (curl) {\n            fp = fopen(m_output.c_str(), \"wb\");\n            curl_easy_setopt(curl, CURLOPT_URL, m_url.c_str());\n            curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, writeData);\n            curl_easy_setopt(curl, CURLOPT_WRITEDATA, fp);\n            res = curl_easy_perform(curl);\n            curl_easy_cleanup(curl);\n            fclose(fp);\n        }\n    }\n\nprivate:\n    std::string m_url;\n    std::string m_output;\n\n    static size_t writeData(void* buffer, size_t size, size_t nmemb, void* userp) {\n        return fwrite(buffer, size, nmemb, (FILE*)userp);\n    }\n};\n\nclass DownloadPool {\npublic:\n    DownloadPool(size_t numThreads) : m_noMoreTask(false) {\n        curl_global_init(CURL_GLOBAL_DEFAULT);\n        for (size_t i = 0; i < numThreads; ++i) {\n            m_threads.emplace_back(&DownloadPool::run, this);\n        }\n    }\n\n    ~DownloadPool() {\n        finishAndWaitForExit();\n        curl_global_cleanup();\n    }\n\n    void addTask(const std::string& url, const std::string& output) {\n        std::lock_guard<std::mutex> lock(m_mtx);\n        if (m_urls.find(url) == m_urls.end()) {\n            m_urls.insert(url);\n            m_queue.emplace(url, output);\n        }\n    }\n\n    void setNoMoreTask() {\n        std::lock_guard<std::mutex> lock(m_mtx);\n        m_noMoreTask = true;\n    }\n\n    void finishAndWaitForExit() {\n        setNoMoreTask();\n        for (auto& thread : m_threads) {\n            if (thread.joinable()) {\n                thread.join();\n            }\n        }\n    }\n\nprivate:\n    std::vector<std::thread> m_threads;\n    std::queue<Task> m_queue;\n    std::unordered_set<std::string> m_urls;\n    std::mutex m_mtx;\n    bool m_noMoreTask;\n\n    void run() {\n        while (true) {\n            Task task(\"\", \"\");\n            {\n                std::lock_guard<std::mutex> lock(m_mtx);\n                if (!m_queue.empty()) {\n                    task = m_queue.front();\n                    m_queue.pop();\n                } else if (m_noMoreTask) {\n                    break;\n                } else {\n                    continue;\n                }\n            }\n            task.run();\n        }\n    }\n};",
      "#include <iostream>\n#include <vector>\n#include <queue>\n#include <unordered_set>\n#include <thread>\n#include <mutex>\n#include <curl/curl.h>\n#include <fstream>\n\nclass Task {\npublic:\n    Task(const std::string& url, const std::string& output) : m_url(url), m_output(output) {}\n    void run() {\n        CURL* curl = curl_easy_init();\n        if (curl) {\n            std::ofstream file(m_output, std::ios::binary);\n            curl_easy_setopt(curl, CURLOPT_URL, m_url.c_str());\n            curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, writeData);\n            curl_easy_setopt(curl, CURLOPT_WRITEDATA, &file);\n            curl_easy_perform(curl);\n            curl_easy_cleanup(curl);\n        }\n    }\nprivate:\n    std::string m_url;\n    std::string m_output;\n    static size_t writeData(void* buffer, size_t size, size_t nmemb, void* userp) {\n        std::ofstream* file = static_cast<std::ofstream*>(userp);\n        file->write(static_cast<const char*>(buffer), size * nmemb);\n        return size * nmemb;\n    }\n};\n\nclass DownloadPool {\npublic:\n    DownloadPool(size_t threadCount) : m_noMoreTask(false) {\n        curl_global_init(CURL_GLOBAL_DEFAULT);\n        for (size_t i = 0; i < threadCount; ++i) {\n            m_threads.emplace_back(&DownloadPool::run, this);\n        }\n    }\n    ~DownloadPool() {\n        setNoMoreTask();\n        finishAndWaitForExit();\n        curl_global_cleanup();\n    }\n    void addTask(const std::string& url, const std::string& output) {\n        std::lock_guard<std::mutex> lock(m_mtx);\n        if (m_urls.find(url) == m_urls.end()) {\n            m_urls.insert(url);\n            m_queue.emplace(url, output);\n        }\n    }\n    void setNoMoreTask() {\n        std::lock_guard<std::mutex> lock(m_mtx);\n        m_noMoreTask = true;\n    }\n    void finishAndWaitForExit() {\n        for (auto& thread : m_threads) {\n            if (thread.joinable()) {\n                thread.join();\n            }\n        }\n    }\nprivate:\n    void run() {\n        while (true) {\n            Task task(\"\", \"\");\n            {\n                std::lock_guard<std::mutex> lock(m_mtx);\n                if (!m_queue.empty()) {\n                    task = m_queue.front();\n                    m_queue.pop();\n                } else if (m_noMoreTask) {\n                    break;\n                } else {\n                    continue;\n                }\n            }\n            task.run();\n        }\n    }\n    std::vector<std::thread> m_threads;\n    std::queue<Task> m_queue;\n    std::unordered_set<std::string> m_urls;\n    std::mutex m_mtx;\n    bool m_noMoreTask;\n};",
      "#include <iostream>\n#include <vector>\n#include <thread>\n#include <queue>\n#include <unordered_set>\n#include <mutex>\n#include <curl/curl.h>\n\nclass Task {\npublic:\n    Task(const std::string& url, const std::string& output) : m_url(url), m_output(output) {}\n    void run() {\n        CURL* curl = curl_easy_init();\n        if (curl) {\n            FILE* fp = fopen(m_output.c_str(), \"wb\");\n            curl_easy_setopt(curl, CURLOPT_URL, m_url.c_str());\n            curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, writeData);\n            curl_easy_setopt(curl, CURLOPT_WRITEDATA, fp);\n            curl_easy_perform(curl);\n            curl_easy_cleanup(curl);\n            fclose(fp);\n        }\n    }\nprivate:\n    std::string m_url;\n    std::string m_output;\n    static size_t writeData(void* buffer, size_t size, size_t nmemb, void* userp) {\n        return fwrite(buffer, size, nmemb, (FILE*)userp);\n    }\n};\n\nclass DownloadPool {\npublic:\n    DownloadPool(size_t numThreads) : m_noMoreTask(false) {\n        curl_global_init(CURL_GLOBAL_DEFAULT);\n        for (size_t i = 0; i < numThreads; ++i) {\n            m_threads.emplace_back(&DownloadPool::run, this);\n        }\n    }\n    ~DownloadPool() {\n        finishAndWaitForExit();\n        curl_global_cleanup();\n    }\n    void addTask(const std::string& url, const std::string& output) {\n        std::lock_guard<std::mutex> lock(m_mtx);\n        if (m_urls.find(url) == m_urls.end()) {\n            m_urls.insert(url);\n            m_queue.emplace(url, output);\n        }\n    }\n    void setNoMoreTask() {\n        std::lock_guard<std::mutex> lock(m_mtx);\n        m_noMoreTask = true;\n    }\n    void finishAndWaitForExit() {\n        setNoMoreTask();\n        for (auto& thread : m_threads) {\n            if (thread.joinable()) {\n                thread.join();\n            }\n        }\n    }\nprivate:\n    void run() {\n        while (true) {\n            Task task(\"\", \"\");\n            {\n                std::lock_guard<std::mutex> lock(m_mtx);\n                if (!m_queue.empty()) {\n                    task = m_queue.front();\n                    m_queue.pop();\n                } else if (m_noMoreTask) {\n                    break;\n                } else {\n                    continue;\n                }\n            }\n            task.run();\n        }\n    }\n    std::vector<std::thread> m_threads;\n    std::queue<Task> m_queue;\n    std::unordered_set<std::string> m_urls;\n    std::mutex m_mtx;\n    bool m_noMoreTask;\n};",
      "#include <iostream>\n#include <vector>\n#include <queue>\n#include <unordered_set>\n#include <thread>\n#include <mutex>\n#include <condition_variable>\n#include <curl/curl.h>\n\nclass Task {\npublic:\n    Task(const std::string& url, const std::string& output) : m_url(url), m_output(output) {}\n    void run() {\n        CURL* curl;\n        FILE* fp;\n        CURLcode res;\n        curl = curl_easy_init();\n        if (curl) {\n            fp = fopen(m_output.c_str(), \"wb\");\n            curl_easy_setopt(curl, CURLOPT_URL, m_url.c_str());\n            curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, writeData);\n            curl_easy_setopt(curl, CURLOPT_WRITEDATA, fp);\n            res = curl_easy_perform(curl);\n            curl_easy_cleanup(curl);\n            fclose(fp);\n        }\n    }\nprivate:\n    std::string m_url;\n    std::string m_output;\n    static size_t writeData(void* buffer, size_t size, size_t nmemb, void* userp) {\n        return fwrite(buffer, size, nmemb, (FILE*)userp);\n    }\n};\n\nclass DownloadPool {\npublic:\n    DownloadPool(size_t numThreads) : m_noMoreTask(false) {\n        curl_global_init(CURL_GLOBAL_DEFAULT);\n        for (size_t i = 0; i < numThreads; ++i) {\n            m_threads.emplace_back(&DownloadPool::run, this);\n        }\n    }\n    ~DownloadPool() {\n        finishAndWaitForExit();\n        curl_global_cleanup();\n    }\n    void addTask(const std::string& url, const std::string& output) {\n        std::lock_guard<std::mutex> lock(m_mtx);\n        if (m_urls.find(url) == m_urls.end()) {\n            m_urls.insert(url);\n            m_queue.emplace(url, output);\n            m_cv.notify_one();\n        }\n    }\n    void setNoMoreTask() {\n        std::lock_guard<std::mutex> lock(m_mtx);\n        m_noMoreTask = true;\n        m_cv.notify_all();\n    }\n    void finishAndWaitForExit() {\n        setNoMoreTask();\n        for (auto& thread : m_threads) {\n            if (thread.joinable()) {\n                thread.join();\n            }\n        }\n    }\nprivate:\n    void run() {\n        while (true) {\n            Task task(\"\", \"\");\n            {\n                std::unique_lock<std::mutex> lock(m_mtx);\n                m_cv.wait(lock, [this] { return !m_queue.empty() || m_noMoreTask; });\n                if (m_queue.empty() && m_noMoreTask) {\n                    break;\n                }\n                task = std::move(m_queue.front());\n                m_queue.pop();\n            }\n            task.run();\n        }\n    }\n    std::vector<std::thread> m_threads;\n    std::queue<Task> m_queue;\n    std::unordered_set<std::string> m_urls;\n    std::mutex m_mtx;\n    std::condition_variable m_cv;\n    bool m_noMoreTask;\n};",
      "#include <iostream>\n#include <vector>\n#include <thread>\n#include <queue>\n#include <unordered_set>\n#include <mutex>\n#include <curl/curl.h>\n\nclass Task {\npublic:\n    Task(const std::string& url, const std::string& output) : m_url(url), m_output(output) {}\n\n    void run() {\n        CURL* curl = curl_easy_init();\n        if (curl) {\n            FILE* fp = fopen(m_output.c_str(), \"wb\");\n            curl_easy_setopt(curl, CURLOPT_URL, m_url.c_str());\n            curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, writeData);\n            curl_easy_setopt(curl, CURLOPT_WRITEDATA, fp);\n            curl_easy_perform(curl);\n            curl_easy_cleanup(curl);\n            fclose(fp);\n        }\n    }\n\nprivate:\n    std::string m_url;\n    std::string m_output;\n\n    static size_t writeData(void* buffer, size_t size, size_t nmemb, void* userp) {\n        return fwrite(buffer, size, nmemb, static_cast<FILE*>(userp));\n    }\n};\n\nclass DownloadPool {\npublic:\n    DownloadPool(size_t numThreads) : m_noMoreTask(false) {\n        curl_global_init(CURL_GLOBAL_DEFAULT);\n        for (size_t i = 0; i < numThreads; ++i) {\n            m_threads.emplace_back(&DownloadPool::run, this);\n        }\n    }\n\n    ~DownloadPool() {\n        finishAndWaitForExit();\n        curl_global_cleanup();\n    }\n\n    void addTask(const std::string& url, const std::string& output) {\n        std::lock_guard<std::mutex> lock(m_mtx);\n        if (m_urls.find(url) == m_urls.end()) {\n            m_urls.insert(url);\n            m_queue.emplace(url, output);\n        }\n    }\n\n    void setNoMoreTask() {\n        std::lock_guard<std::mutex> lock(m_mtx);\n        m_noMoreTask = true;\n    }\n\n    void finishAndWaitForExit() {\n        setNoMoreTask();\n        for (auto& thread : m_threads) {\n            if (thread.joinable()) {\n                thread.join();\n            }\n        }\n    }\n\nprivate:\n    std::vector<std::thread> m_threads;\n    std::queue<Task> m_queue;\n    std::unordered_set<std::string> m_urls;\n    std::mutex m_mtx;\n    bool m_noMoreTask;\n\n    void run() {\n        while (true) {\n            Task task(\"\", \"\");\n            {\n                std::lock_guard<std::mutex> lock(m_mtx);\n                if (!m_queue.empty()) {\n                    task = m_queue.front();\n                    m_queue.pop();\n                } else if (m_noMoreTask) {\n                    break;\n                } else {\n                    continue;\n                }\n            }\n            task.run();\n        }\n    }\n};\n\nint main() {\n    DownloadPool pool(4);\n    pool.addTask(\"http://example.com/file1\", \"file1\");\n    pool.addTask(\"http://example.com/file2\", \"file2\");\n    pool.setNoMoreTask();\n    pool.finishAndWaitForExit();\n    return 0;\n}"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 7,
    "Instruction": "Task Description: Create a TCP client class using Boost.Asio that handles asynchronous communication with a chat server, including reading from standard input and writing to standard output.\n\nClass Description: The posix_chat_client class implements an asynchronous TCP client for a chat application. It manages socket connections, handles message reading/writing, and processes user input/output asynchronously using Boost.Asio.\n\nAttributes:\n- socket_: [tcp::socket] - The TCP socket for communication with the server\n- input_: [posix::stream_descriptor] - Handles asynchronous reading from standard input\n- output_: [posix::stream_descriptor] - Handles asynchronous writing to standard output\n- read_msg_: [chat_message] - Stores the message being read from the server\n- write_msg_: [chat_message] - Stores the message to be written to the server\n- input_buffer_: [boost::asio::streambuf] - Buffer for storing input data\n\nMethods:\n- Constructor: [posix_chat_client]([boost::asio::io_context& io_context, const tcp::resolver::results_type& endpoints]) -> [void] - Initializes the client with IO context and server endpoints\n- do_connect: [do_connect]([const tcp::resolver::results_type& endpoints]) -> [void] - Asynchronously connects to the server endpoints\n- do_read_header: [do_read_header]() -> [void] - Asynchronously reads the message header from the server\n- do_read_body: [do_read_body]() -> [void] - Asynchronously reads the message body from the server after header is processed\n- do_write_output: [do_write_output]() -> [void] - Asynchronously writes received messages to standard output\n- do_read_input: [do_read_input]() -> [void] - Asynchronously reads input from standard input\n- do_write_message: [do_write_message]() -> [void] - Asynchronously writes the composed message to the server\n- close: [close]() -> [void] - Closes all connections and cleans up resources",
    "Canonical_solution": "#include <array>\n#include <boost/asio.hpp>\n#include \"chat_message.hpp\"\nusing boost::asio::ip::tcp;\nnamespace posix = boost::asio::posix;\n\nclass posix_chat_client\n{\npublic:\n  posix_chat_client(boost::asio::io_context& io_context,\n      const tcp::resolver::results_type& endpoints)\n    : socket_(io_context),\n      input_(io_context, ::dup(STDIN_FILENO)),\n      output_(io_context, ::dup(STDOUT_FILENO)),\n      input_buffer_(chat_message::max_body_length)\n  {\n    do_connect(endpoints);\n  }\n\nprivate:\n  void do_connect(const tcp::resolver::results_type& endpoints)\n  {\n    boost::asio::async_connect(socket_, endpoints,\n        [this](boost::system::error_code ec, tcp::endpoint)\n        {\n          if (!ec)\n          {\n            do_read_header();\n            do_read_input();\n          }\n        });\n  }\n\n  void do_read_header()\n  {\n    boost::asio::async_read(socket_,\n        boost::asio::buffer(read_msg_.data(), chat_message::header_length),\n        [this](boost::system::error_code ec, std::size_t /*length*/)\n        {\n          if (!ec && read_msg_.decode_header())\n          {\n            do_read_body();\n          }\n          else\n          {\n            close();\n          }\n        });\n  }\n\n  void do_read_body()\n  {\n    boost::asio::async_read(socket_,\n        boost::asio::buffer(read_msg_.body(), read_msg_.body_length()),\n        [this](boost::system::error_code ec, std::size_t /*length*/)\n        {\n          if (!ec)\n          {\n            do_write_output();\n          }\n          else\n          {\n            close();\n          }\n        });\n  }\n\n  void do_write_output()\n  {\n    static char eol[] = { '\\n' };\n    std::array<boost::asio::const_buffer, 2> buffers = {{\n      boost::asio::buffer(read_msg_.body(), read_msg_.body_length()),\n      boost::asio::buffer(eol) }};\n    boost::asio::async_write(output_, buffers,\n        [this](boost::system::error_code ec, std::size_t /*length*/)\n        {\n          if (!ec)\n          {\n            do_read_header();\n          }\n          else\n          {\n            close();\n          }\n        });\n  }\n\n  void do_read_input()\n  {\n    boost::asio::async_read_until(input_, input_buffer_, '\\n',\n        [this](boost::system::error_code ec, std::size_t length)\n        {\n          if (!ec)\n          {\n            write_msg_.body_length(length - 1);\n            input_buffer_.sgetn(write_msg_.body(), length - 1);\n            input_buffer_.consume(1);\n            write_msg_.encode_header();\n            do_write_message();\n          }\n          else if (ec == boost::asio::error::not_found)\n          {\n            write_msg_.body_length(input_buffer_.size());\n            input_buffer_.sgetn(write_msg_.body(), input_buffer_.size());\n            write_msg_.encode_header();\n            do_write_message();\n          }\n          else\n          {\n            close();\n          }\n        });\n  }\n\n  void do_write_message()\n  {\n    boost::asio::async_write(socket_,\n        boost::asio::buffer(write_msg_.data(), write_msg_.length()),\n        [this](boost::system::error_code ec, std::size_t /*length*/)\n        {\n          if (!ec)\n          {\n            do_read_input();\n          }\n          else\n          {\n            close();\n          }\n        });\n  }\n\n  void close()\n  {\n    socket_.close();\n    input_.close();\n    output_.close();\n  }\n\nprivate:\n  tcp::socket socket_;\n  posix::stream_descriptor input_;\n  posix::stream_descriptor output_;\n  chat_message read_msg_;\n  chat_message write_msg_;\n  boost::asio::streambuf input_buffer_;\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 151,
    "matched_results": [
      "#include <iostream>\n#include <boost/asio.hpp>\n#include \"chat_message.hpp\"\n\nusing boost::asio::ip::tcp;\n\nclass posix_chat_client {\npublic:\n    posix_chat_client(boost::asio::io_context& io_context, const tcp::resolver::results_type& endpoints)\n        : socket_(io_context),\n          input_(io_context, ::dup(STDIN_FILENO)),\n          output_(io_context, ::dup(STDOUT_FILENO)) {\n        do_connect(endpoints);\n        do_read_input();\n    }\n\n    void close() {\n        boost::asio::post(socket_.get_executor(), [this]() { socket_.close(); });\n    }\n\nprivate:\n    void do_connect(const tcp::resolver::results_type& endpoints) {\n        boost::asio::async_connect(socket_, endpoints,\n            [this](boost::system::error_code ec, tcp::endpoint) {\n                if (!ec) {\n                    do_read_header();\n                }\n            });\n    }\n\n    void do_read_header() {\n        boost::asio::async_read(socket_,\n            boost::asio::buffer(read_msg_.data(), chat_message::header_length),\n            [this](boost::system::error_code ec, std::size_t) {\n                if (!ec && read_msg_.decode_header()) {\n                    do_read_body();\n                } else {\n                    socket_.close();\n                }\n            });\n    }\n\n    void do_read_body() {\n        boost::asio::async_read(socket_,\n            boost::asio::buffer(read_msg_.body(), read_msg_.body_length()),\n            [this](boost::system::error_code ec, std::size_t) {\n                if (!ec) {\n                    do_write_output();\n                } else {\n                    socket_.close();\n                }\n            });\n    }\n\n    void do_write_output() {\n        boost::asio::async_write(output_,\n            boost::asio::buffer(read_msg_.data(), read_msg_.length()),\n            [this](boost::system::error_code ec, std::size_t) {\n                if (!ec) {\n                    do_read_header();\n                } else {\n                    socket_.close();\n                }\n            });\n    }\n\n    void do_read_input() {\n        boost::asio::async_read_until(input_, input_buffer_, '\\n',\n            [this](boost::system::error_code ec, std::size_t length) {\n                if (!ec) {\n                    std::istream is(&input_buffer_);\n                    std::string line;\n                    std::getline(is, line);\n                    write_msg_.body_length(line.size());\n                    std::memcpy(write_msg_.body(), line.data(), write_msg_.body_length());\n                    write_msg_.encode_header();\n                    do_write_message();\n                } else {\n                    socket_.close();\n                }\n            });\n    }\n\n    void do_write_message() {\n        boost::asio::async_write(socket_,\n            boost::asio::buffer(write_msg_.data(), write_msg_.length()),\n            [this](boost::system::error_code ec, std::size_t) {\n                if (!ec) {\n                    do_read_input();\n                } else {\n                    socket_.close();\n                }\n            });\n    }\n\n    tcp::socket socket_;\n    boost::asio::posix::stream_descriptor input_;\n    boost::asio::posix::stream_descriptor output_;\n    chat_message read_msg_;\n    chat_message write_msg_;\n    boost::asio::streambuf input_buffer_;\n};",
      "#include <boost/asio.hpp>\n#include <iostream>\n#include <deque>\n#include \"chat_message.hpp\"\n\nusing boost::asio::ip::tcp;\n\nclass posix_chat_client {\npublic:\n    posix_chat_client(boost::asio::io_context& io_context, const tcp::resolver::results_type& endpoints)\n        : socket_(io_context),\n          input_(io_context, ::dup(STDIN_FILENO)),\n          output_(io_context, ::dup(STDOUT_FILENO)) {\n        do_connect(endpoints);\n        do_read_input();\n    }\n\nprivate:\n    void do_connect(const tcp::resolver::results_type& endpoints) {\n        boost::asio::async_connect(socket_, endpoints,\n            [this](std::error_code ec, tcp::endpoint) {\n                if (!ec) {\n                    do_read_header();\n                }\n            });\n    }\n\n    void do_read_header() {\n        boost::asio::async_read(socket_,\n            boost::asio::buffer(read_msg_.data(), chat_message::header_length),\n            [this](std::error_code ec, std::size_t /*length*/) {\n                if (!ec && read_msg_.decode_header()) {\n                    do_read_body();\n                } else {\n                    close();\n                }\n            });\n    }\n\n    void do_read_body() {\n        boost::asio::async_read(socket_,\n            boost::asio::buffer(read_msg_.body(), read_msg_.body_length()),\n            [this](std::error_code ec, std::size_t /*length*/) {\n                if (!ec) {\n                    do_write_output();\n                } else {\n                    close();\n                }\n            });\n    }\n\n    void do_write_output() {\n        boost::asio::async_write(output_,\n            boost::asio::buffer(read_msg_.body(), read_msg_.body_length()),\n            [this](std::error_code ec, std::size_t /*length*/) {\n                if (!ec) {\n                    do_read_header();\n                } else {\n                    close();\n                }\n            });\n    }\n\n    void do_read_input() {\n        boost::asio::async_read_until(input_, input_buffer_, '\\n',\n            [this](std::error_code ec, std::size_t length) {\n                if (!ec) {\n                    std::istream is(&input_buffer_);\n                    std::string line;\n                    std::getline(is, line);\n                    if (!line.empty()) {\n                        write_msg_.body_length(line.size());\n                        std::memcpy(write_msg_.body(), line.data(), write_msg_.body_length());\n                        write_msg_.encode_header();\n                        do_write_message();\n                    }\n                    do_read_input();\n                } else {\n                    close();\n                }\n            });\n    }\n\n    void do_write_message() {\n        boost::asio::async_write(socket_,\n            boost::asio::buffer(write_msg_.data(), write_msg_.length()),\n            [this](std::error_code ec, std::size_t /*length*/) {\n                if (ec) {\n                    close();\n                }\n            });\n    }\n\n    void close() {\n        socket_.close();\n        input_.close();\n        output_.close();\n    }\n\n    tcp::socket socket_;\n    boost::asio::posix::stream_descriptor input_;\n    boost::asio::posix::stream_descriptor output_;\n    chat_message read_msg_;\n    chat_message write_msg_;\n    boost::asio::streambuf input_buffer_;\n};"
    ],
    "unmatched_results": [
      "class posix_chat_client {\npublic:\n  posix_chat_client(boost::asio::io_context& io_context, const tcp::resolver::results_type& endpoints)\n    : socket_(io_context),\n      input_(io_context, ::dup(STDIN_FILENO)),\n      output_(io_context, ::dup(STDOUT_FILENO)) {\n    do_connect(endpoints);\n    do_read_input();\n  }\n\nprivate:\n  void do_connect(const tcp::resolver::results_type& endpoints) {\n    boost::asio::async_connect(socket_, endpoints,\n      [this](boost::system::error_code ec, tcp::endpoint) {\n        if (!ec) {\n          do_read_header();\n        }\n      });\n  }\n\n  void do_read_header() {\n    boost::asio::async_read(socket_,\n      boost::asio::buffer(read_msg_.data(), chat_message::header_length),\n      [this](boost::system::error_code ec, std::size_t /*length*/) {\n        if (!ec && read_msg_.decode_header()) {\n          do_read_body();\n        } else {\n          close();\n        }\n      });\n  }\n\n  void do_read_body() {\n    boost::asio::async_read(socket_,\n      boost::asio::buffer(read_msg_.body(), read_msg_.body_length()),\n      [this](boost::system::error_code ec, std::size_t /*length*/) {\n        if (!ec) {\n          do_write_output();\n        } else {\n          close();\n        }\n      });\n  }\n\n  void do_write_output() {\n    boost::asio::async_write(output_,\n      boost::asio::buffer(read_msg_.body(), read_msg_.body_length()),\n      [this](boost::system::error_code ec, std::size_t /*length*/) {\n        if (!ec) {\n          do_read_header();\n        } else {\n          close();\n        }\n      });\n  }\n\n  void do_read_input() {\n    boost::asio::async_read_until(input_, input_buffer_, '\\n',\n      [this](boost::system::error_code ec, std::size_t length) {\n        if (!ec) {\n          std::istream is(&input_buffer_);\n          std::string line;\n          std::getline(is, line);\n          if (!line.empty()) {\n            write_msg_.body_length(line.size());\n            std::memcpy(write_msg_.body(), line.data(), write_msg_.body_length());\n            write_msg_.encode_header();\n            do_write_message();\n          }\n          do_read_input();\n        } else {\n          close();\n        }\n      });\n  }\n\n  void do_write_message() {\n    boost::asio::async_write(socket_,\n      boost::asio::buffer(write_msg_.data(), write_msg_.length()),\n      [this](boost::system::error_code ec, std::size_t /*length*/) {\n        if (!ec) {\n          do_read_input();\n        } else {\n          close();\n        }\n      });\n  }\n\n  void close() {\n    boost::asio::post(socket_.get_executor(),\n      [this]() {\n        socket_.close();\n        input_.close();\n        output_.close();\n      });\n  }\n\n  tcp::socket socket_;\n  boost::asio::posix::stream_descriptor input_;\n  boost::asio::posix::stream_descriptor output_;\n  chat_message read_msg_;\n  chat_message write_msg_;\n  boost::asio::streambuf input_buffer_;\n};",
      "class posix_chat_client {\npublic:\n  posix_chat_client(boost::asio::io_context& io_context, const tcp::resolver::results_type& endpoints)\n    : socket_(io_context), input_(io_context, ::dup(STDIN_FILENO)), output_(io_context, ::dup(STDOUT_FILENO)) {\n    do_connect(endpoints);\n    do_read_input();\n  }\n\nprivate:\n  void do_connect(const tcp::resolver::results_type& endpoints) {\n    boost::asio::async_connect(socket_, endpoints,\n      [this](boost::system::error_code ec, tcp::endpoint) {\n        if (!ec) {\n          do_read_header();\n        }\n      });\n  }\n\n  void do_read_header() {\n    boost::asio::async_read(socket_, boost::asio::buffer(read_msg_.data(), chat_message::header_length),\n      [this](boost::system::error_code ec, std::size_t) {\n        if (!ec && read_msg_.decode_header()) {\n          do_read_body();\n        } else {\n          close();\n        }\n      });\n  }\n\n  void do_read_body() {\n    boost::asio::async_read(socket_, boost::asio::buffer(read_msg_.body(), read_msg_.body_length()),\n      [this](boost::system::error_code ec, std::size_t) {\n        if (!ec) {\n          do_write_output();\n        } else {\n          close();\n        }\n      });\n  }\n\n  void do_write_output() {\n    boost::asio::async_write(output_, boost::asio::buffer(read_msg_.body(), read_msg_.body_length()),\n      [this](boost::system::error_code ec, std::size_t) {\n        if (!ec) {\n          do_read_header();\n        } else {\n          close();\n        }\n      });\n  }\n\n  void do_read_input() {\n    boost::asio::async_read_until(input_, input_buffer_, '\\n',\n      [this](boost::system::error_code ec, std::size_t length) {\n        if (!ec) {\n          std::istream is(&input_buffer_);\n          std::string line;\n          std::getline(is, line);\n          write_msg_.body_length(line.size());\n          std::memcpy(write_msg_.body(), line.data(), write_msg_.body_length());\n          write_msg_.encode_header();\n          do_write_message();\n        } else {\n          close();\n        }\n      });\n  }\n\n  void do_write_message() {\n    boost::asio::async_write(socket_, boost::asio::buffer(write_msg_.data(), write_msg_.length()),\n      [this](boost::system::error_code ec, std::size_t) {\n        if (!ec) {\n          do_read_input();\n        } else {\n          close();\n        }\n      });\n  }\n\n  void close() {\n    boost::asio::post(socket_.get_executor(), [this]() { socket_.close(); });\n    input_.close();\n    output_.close();\n  }\n\n  tcp::socket socket_;\n  boost::asio::posix::stream_descriptor input_;\n  boost::asio::posix::stream_descriptor output_;\n  chat_message read_msg_;\n  chat_message write_msg_;\n  boost::asio::streambuf input_buffer_;\n};",
      "class posix_chat_client {\npublic:\n  posix_chat_client(boost::asio::io_context& io_context, const tcp::resolver::results_type& endpoints)\n    : socket_(io_context),\n      input_(io_context, ::dup(STDIN_FILENO)),\n      output_(io_context, ::dup(STDOUT_FILENO)) {\n    do_connect(endpoints);\n    do_read_input();\n  }\n\nprivate:\n  void do_connect(const tcp::resolver::results_type& endpoints) {\n    boost::asio::async_connect(socket_, endpoints,\n      [this](boost::system::error_code ec, tcp::endpoint) {\n        if (!ec) {\n          do_read_header();\n        }\n      });\n  }\n\n  void do_read_header() {\n    boost::asio::async_read(socket_,\n      boost::asio::buffer(read_msg_.data(), chat_message::header_length),\n      [this](boost::system::error_code ec, std::size_t /*length*/) {\n        if (!ec && read_msg_.decode_header()) {\n          do_read_body();\n        } else {\n          close();\n        }\n      });\n  }\n\n  void do_read_body() {\n    boost::asio::async_read(socket_,\n      boost::asio::buffer(read_msg_.body(), read_msg_.body_length()),\n      [this](boost::system::error_code ec, std::size_t /*length*/) {\n        if (!ec) {\n          do_write_output();\n        } else {\n          close();\n        }\n      });\n  }\n\n  void do_write_output() {\n    boost::asio::async_write(output_,\n      boost::asio::buffer(read_msg_.body(), read_msg_.body_length()),\n      [this](boost::system::error_code ec, std::size_t /*length*/) {\n        if (!ec) {\n          do_read_header();\n        } else {\n          close();\n        }\n      });\n  }\n\n  void do_read_input() {\n    boost::asio::async_read_until(input_, input_buffer_, '\\n',\n      [this](boost::system::error_code ec, std::size_t length) {\n        if (!ec) {\n          std::istream is(&input_buffer_);\n          std::string line;\n          std::getline(is, line);\n          write_msg_.body_length(line.size());\n          std::memcpy(write_msg_.body(), line.data(), write_msg_.body_length());\n          write_msg_.encode_header();\n          do_write_message();\n        } else {\n          close();\n        }\n      });\n  }\n\n  void do_write_message() {\n    boost::asio::async_write(socket_,\n      boost::asio::buffer(write_msg_.data(), write_msg_.length()),\n      [this](boost::system::error_code ec, std::size_t /*length*/) {\n        if (!ec) {\n          do_read_input();\n        } else {\n          close();\n        }\n      });\n  }\n\n  void close() {\n    socket_.close();\n    input_.close();\n    output_.close();\n  }\n\n  tcp::socket socket_;\n  boost::asio::posix::stream_descriptor input_;\n  boost::asio::posix::stream_descriptor output_;\n  chat_message read_msg_;\n  chat_message write_msg_;\n  boost::asio::streambuf input_buffer_;\n};",
      "class posix_chat_client {\npublic:\n  posix_chat_client(boost::asio::io_context& io_context, const tcp::resolver::results_type& endpoints)\n    : socket_(io_context),\n      input_(io_context, ::dup(STDIN_FILENO)),\n      output_(io_context, ::dup(STDOUT_FILENO)) {\n    do_connect(endpoints);\n    do_read_input();\n  }\n\n  void close() {\n    boost::asio::post(socket_.get_executor(), [this]() { socket_.close(); });\n  }\n\nprivate:\n  void do_connect(const tcp::resolver::results_type& endpoints) {\n    boost::asio::async_connect(socket_, endpoints,\n      [this](boost::system::error_code ec, tcp::endpoint) {\n        if (!ec) {\n          do_read_header();\n        }\n      });\n  }\n\n  void do_read_header() {\n    boost::asio::async_read(socket_,\n      boost::asio::buffer(read_msg_.data(), chat_message::header_length),\n      [this](boost::system::error_code ec, std::size_t) {\n        if (!ec && read_msg_.decode_header()) {\n          do_read_body();\n        } else {\n          socket_.close();\n        }\n      });\n  }\n\n  void do_read_body() {\n    boost::asio::async_read(socket_,\n      boost::asio::buffer(read_msg_.body(), read_msg_.body_length()),\n      [this](boost::system::error_code ec, std::size_t) {\n        if (!ec) {\n          do_write_output();\n        } else {\n          socket_.close();\n        }\n      });\n  }\n\n  void do_write_output() {\n    boost::asio::async_write(output_,\n      boost::asio::buffer(read_msg_.data(), read_msg_.length()),\n      [this](boost::system::error_code ec, std::size_t) {\n        if (!ec) {\n          do_read_header();\n        } else {\n          socket_.close();\n        }\n      });\n  }\n\n  void do_read_input() {\n    boost::asio::async_read_until(input_, input_buffer_, '\\n',\n      [this](boost::system::error_code ec, std::size_t length) {\n        if (!ec) {\n          std::istream is(&input_buffer_);\n          std::string line;\n          std::getline(is, line);\n          write_msg_.body_length(line.size());\n          std::memcpy(write_msg_.body(), line.data(), write_msg_.body_length());\n          write_msg_.encode_header();\n          do_write_message();\n        } else {\n          socket_.close();\n        }\n      });\n  }\n\n  void do_write_message() {\n    boost::asio::async_write(socket_,\n      boost::asio::buffer(write_msg_.data(), write_msg_.length()),\n      [this](boost::system::error_code ec, std::size_t) {\n        if (!ec) {\n          do_read_input();\n        } else {\n          socket_.close();\n        }\n      });\n  }\n\n  tcp::socket socket_;\n  boost::asio::posix::stream_descriptor input_;\n  boost::asio::posix::stream_descriptor output_;\n  chat_message read_msg_;\n  chat_message write_msg_;\n  boost::asio::streambuf input_buffer_;\n};",
      "class posix_chat_client {\npublic:\n  posix_chat_client(boost::asio::io_context& io_context, const tcp::resolver::results_type& endpoints)\n    : socket_(io_context),\n      input_(io_context, ::dup(STDIN_FILENO)),\n      output_(io_context, ::dup(STDOUT_FILENO)) {\n    do_connect(endpoints);\n    do_read_input();\n  }\n\nprivate:\n  void do_connect(const tcp::resolver::results_type& endpoints) {\n    boost::asio::async_connect(socket_, endpoints,\n      [this](boost::system::error_code ec, tcp::endpoint) {\n        if (!ec) {\n          do_read_header();\n        }\n      });\n  }\n\n  void do_read_header() {\n    boost::asio::async_read(socket_,\n      boost::asio::buffer(read_msg_.data(), chat_message::header_length),\n      [this](boost::system::error_code ec, std::size_t /*length*/) {\n        if (!ec && read_msg_.decode_header()) {\n          do_read_body();\n        } else {\n          close();\n        }\n      });\n  }\n\n  void do_read_body() {\n    boost::asio::async_read(socket_,\n      boost::asio::buffer(read_msg_.body(), read_msg_.body_length()),\n      [this](boost::system::error_code ec, std::size_t /*length*/) {\n        if (!ec) {\n          do_write_output();\n        } else {\n          close();\n        }\n      });\n  }\n\n  void do_write_output() {\n    boost::asio::async_write(output_,\n      boost::asio::buffer(read_msg_.data(), read_msg_.length()),\n      [this](boost::system::error_code ec, std::size_t /*length*/) {\n        if (!ec) {\n          do_read_header();\n        } else {\n          close();\n        }\n      });\n  }\n\n  void do_read_input() {\n    boost::asio::async_read_until(input_, input_buffer_, '\\n',\n      [this](boost::system::error_code ec, std::size_t length) {\n        if (!ec) {\n          std::istream is(&input_buffer_);\n          std::string line;\n          std::getline(is, line);\n          write_msg_.body_length(line.size());\n          std::memcpy(write_msg_.body(), line.data(), write_msg_.body_length());\n          write_msg_.encode_header();\n          do_write_message();\n        } else {\n          close();\n        }\n      });\n  }\n\n  void do_write_message() {\n    boost::asio::async_write(socket_,\n      boost::asio::buffer(write_msg_.data(), write_msg_.length()),\n      [this](boost::system::error_code ec, std::size_t /*length*/) {\n        if (!ec) {\n          do_read_input();\n        } else {\n          close();\n        }\n      });\n  }\n\n  void close() {\n    socket_.close();\n    input_.close();\n    output_.close();\n  }\n\n  tcp::socket socket_;\n  boost::asio::posix::stream_descriptor input_;\n  boost::asio::posix::stream_descriptor output_;\n  chat_message read_msg_;\n  chat_message write_msg_;\n  boost::asio::streambuf input_buffer_;\n};",
      "class posix_chat_client {\npublic:\n  posix_chat_client(boost::asio::io_context& io_context, const tcp::resolver::results_type& endpoints)\n    : socket_(io_context),\n      input_(io_context, ::dup(STDIN_FILENO)),\n      output_(io_context, ::dup(STDOUT_FILENO)) {\n    do_connect(endpoints);\n    do_read_input();\n  }\n\n  void close() {\n    boost::asio::post(socket_.get_executor(), [this]() { socket_.close(); });\n  }\n\nprivate:\n  void do_connect(const tcp::resolver::results_type& endpoints) {\n    boost::asio::async_connect(socket_, endpoints,\n      [this](std::error_code ec, tcp::endpoint) {\n        if (!ec) {\n          do_read_header();\n        }\n      });\n  }\n\n  void do_read_header() {\n    boost::asio::async_read(socket_,\n      boost::asio::buffer(read_msg_.data(), chat_message::header_length),\n      [this](std::error_code ec, std::size_t /*length*/) {\n        if (!ec && read_msg_.decode_header()) {\n          do_read_body();\n        } else {\n          socket_.close();\n        }\n      });\n  }\n\n  void do_read_body() {\n    boost::asio::async_read(socket_,\n      boost::asio::buffer(read_msg_.body(), read_msg_.body_length()),\n      [this](std::error_code ec, std::size_t /*length*/) {\n        if (!ec) {\n          do_write_output();\n        } else {\n          socket_.close();\n        }\n      });\n  }\n\n  void do_write_output() {\n    boost::asio::async_write(output_,\n      boost::asio::buffer(read_msg_.body(), read_msg_.body_length()),\n      [this](std::error_code ec, std::size_t /*length*/) {\n        if (!ec) {\n          do_read_header();\n        } else {\n          socket_.close();\n        }\n      });\n  }\n\n  void do_read_input() {\n    boost::asio::async_read_until(input_, input_buffer_, '\\n',\n      [this](std::error_code ec, std::size_t length) {\n        if (!ec) {\n          std::istream is(&input_buffer_);\n          std::string line;\n          std::getline(is, line);\n          if (!line.empty()) {\n            write_msg_.body_length(line.size());\n            std::memcpy(write_msg_.body(), line.data(), write_msg_.body_length());\n            write_msg_.encode_header();\n            do_write_message();\n          }\n        } else {\n          socket_.close();\n        }\n      });\n  }\n\n  void do_write_message() {\n    boost::asio::async_write(socket_,\n      boost::asio::buffer(write_msg_.data(), write_msg_.length()),\n      [this](std::error_code ec, std::size_t /*length*/) {\n        if (!ec) {\n          do_read_input();\n        } else {\n          socket_.close();\n        }\n      });\n  }\n\n  tcp::socket socket_;\n  boost::asio::posix::stream_descriptor input_;\n  boost::asio::posix::stream_descriptor output_;\n  chat_message read_msg_;\n  chat_message write_msg_;\n  boost::asio::streambuf input_buffer_;\n};",
      "class posix_chat_client\n{\npublic:\n    posix_chat_client(boost::asio::io_context& io_context, const tcp::resolver::results_type& endpoints)\n        : socket_(io_context),\n          input_(io_context, ::dup(STDIN_FILENO)),\n          output_(io_context, ::dup(STDOUT_FILENO))\n    {\n        do_connect(endpoints);\n        do_read_input();\n    }\n\nprivate:\n    void do_connect(const tcp::resolver::results_type& endpoints)\n    {\n        boost::asio::async_connect(socket_, endpoints,\n            [this](boost::system::error_code ec, tcp::endpoint)\n            {\n                if (!ec)\n                {\n                    do_read_header();\n                }\n            });\n    }\n\n    void do_read_header()\n    {\n        boost::asio::async_read(socket_,\n            boost::asio::buffer(read_msg_.data(), chat_message::header_length),\n            [this](boost::system::error_code ec, std::size_t /*length*/)\n            {\n                if (!ec && read_msg_.decode_header())\n                {\n                    do_read_body();\n                }\n                else\n                {\n                    socket_.close();\n                }\n            });\n    }\n\n    void do_read_body()\n    {\n        boost::asio::async_read(socket_,\n            boost::asio::buffer(read_msg_.body(), read_msg_.body_length()),\n            [this](boost::system::error_code ec, std::size_t /*length*/)\n            {\n                if (!ec)\n                {\n                    do_write_output();\n                }\n                else\n                {\n                    socket_.close();\n                }\n            });\n    }\n\n    void do_write_output()\n    {\n        boost::asio::async_write(output_,\n            boost::asio::buffer(read_msg_.body(), read_msg_.body_length()),\n            [this](boost::system::error_code ec, std::size_t /*length*/)\n            {\n                if (!ec)\n                {\n                    do_read_header();\n                }\n                else\n                {\n                    socket_.close();\n                }\n            });\n    }\n\n    void do_read_input()\n    {\n        boost::asio::async_read_until(input_, input_buffer_, '\\n',\n            [this](boost::system::error_code ec, std::size_t /*length*/)\n            {\n                if (!ec)\n                {\n                    std::istream is(&input_buffer_);\n                    std::string line;\n                    std::getline(is, line);\n                    write_msg_.body_length(line.size());\n                    std::memcpy(write_msg_.body(), line.data(), write_msg_.body_length());\n                    write_msg_.encode_header();\n                    do_write_message();\n                }\n                else\n                {\n                    socket_.close();\n                }\n            });\n    }\n\n    void do_write_message()\n    {\n        boost::asio::async_write(socket_,\n            boost::asio::buffer(write_msg_.data(), write_msg_.length()),\n            [this](boost::system::error_code ec, std::size_t /*length*/)\n            {\n                if (!ec)\n                {\n                    do_read_input();\n                }\n                else\n                {\n                    socket_.close();\n                }\n            });\n    }\n\n    void close()\n    {\n        socket_.close();\n        input_.close();\n        output_.close();\n    }\n\n    tcp::socket socket_;\n    boost::asio::posix::stream_descriptor input_;\n    boost::asio::posix::stream_descriptor output_;\n    chat_message read_msg_;\n    chat_message write_msg_;\n    boost::asio::streambuf input_buffer_;\n};",
      "class posix_chat_client\n{\npublic:\n  posix_chat_client(boost::asio::io_context& io_context, const tcp::resolver::results_type& endpoints)\n    : socket_(io_context),\n      input_(io_context, ::dup(STDIN_FILENO)),\n      output_(io_context, ::dup(STDOUT_FILENO))\n  {\n    do_connect(endpoints);\n    do_read_input();\n  }\n\nprivate:\n  void do_connect(const tcp::resolver::results_type& endpoints)\n  {\n    boost::asio::async_connect(socket_, endpoints,\n        [this](boost::system::error_code ec, tcp::endpoint)\n        {\n          if (!ec)\n          {\n            do_read_header();\n          }\n        });\n  }\n\n  void do_read_header()\n  {\n    boost::asio::async_read(socket_,\n        boost::asio::buffer(read_msg_.data(), chat_message::header_length),\n        [this](boost::system::error_code ec, std::size_t /*length*/)\n        {\n          if (!ec && read_msg_.decode_header())\n          {\n            do_read_body();\n          }\n          else\n          {\n            close();\n          }\n        });\n  }\n\n  void do_read_body()\n  {\n    boost::asio::async_read(socket_,\n        boost::asio::buffer(read_msg_.body(), read_msg_.body_length()),\n        [this](boost::system::error_code ec, std::size_t /*length*/)\n        {\n          if (!ec)\n          {\n            do_write_output();\n          }\n          else\n          {\n            close();\n          }\n        });\n  }\n\n  void do_write_output()\n  {\n    boost::asio::async_write(output_,\n        boost::asio::buffer(read_msg_.body(), read_msg_.body_length()),\n        [this](boost::system::error_code ec, std::size_t /*length*/)\n        {\n          if (!ec)\n          {\n            do_read_header();\n          }\n          else\n          {\n            close();\n          }\n        });\n  }\n\n  void do_read_input()\n  {\n    boost::asio::async_read_until(input_, input_buffer_, '\\n',\n        [this](boost::system::error_code ec, std::size_t length)\n        {\n          if (!ec)\n          {\n            std::istream is(&input_buffer_);\n            std::string line;\n            std::getline(is, line);\n            if (!line.empty())\n            {\n              write_msg_.body_length(line.size());\n              std::memcpy(write_msg_.body(), line.data(), write_msg_.body_length());\n              write_msg_.encode_header();\n              do_write_message();\n            }\n            do_read_input();\n          }\n          else\n          {\n            close();\n          }\n        });\n  }\n\n  void do_write_message()\n  {\n    boost::asio::async_write(socket_,\n        boost::asio::buffer(write_msg_.data(), write_msg_.length()),\n        [this](boost::system::error_code ec, std::size_t /*length*/)\n        {\n          if (ec)\n          {\n            close();\n          }\n        });\n  }\n\n  void close()\n  {\n    boost::system::error_code ignored_ec;\n    socket_.close(ignored_ec);\n    input_.close(ignored_ec);\n    output_.close(ignored_ec);\n  }\n\n  tcp::socket socket_;\n  boost::asio::posix::stream_descriptor input_;\n  boost::asio::posix::stream_descriptor output_;\n  chat_message read_msg_;\n  chat_message write_msg_;\n  boost::asio::streambuf input_buffer_;\n};"
    ],
    "match_count": 2,
    "pass@3": 0.5333333333333333,
    "pass@5": 0.7777777777777778
  },
  {
    "Task_id": 8,
    "Instruction": "Task Description: Implement a WebSocket client class for webOS devices that supports both SSL and non-SSL connections using Boost.Asio and Boost.Beast libraries. The client should handle asynchronous connection, message sending/receiving, and error handling.\n\nClass Description: WebOsClient::Impl is an implementation class for a webOS WebSocket client that manages TCP/SSL WebSocket connections to a webOS device. It handles connection lifecycle, message exchange, and error recovery.\n\nAttributes:\n- ioc_: [net::io_context&] - Reference to Boost.Asio I/O context for asynchronous operations\n- ctx_: [ssl::context&] - Reference to SSL context for secure connections\n- device_settings_: [Device] - Configuration settings for the target device\n- log_: [std::shared_ptr<Logging>] - Shared pointer to logging utility\n- resolver_: [tcp::resolver] - TCP resolver for hostname resolution\n- ws_: [std::optional<websocket::stream<beast::ssl_stream<beast::tcp_stream>>>] - Optional SSL WebSocket stream\n- ws_tcp_: [std::optional<websocket::stream<beast::tcp_stream>>] - Optional non-SSL WebSocket stream\n- buffer_: [beast::flat_buffer] - Buffer for incoming messages\n- host_: [std::string] - Target host address with port\n- socket_status_: [int] - Current connection status (disconnected/connecting/connected)\n\nMethods:\n- run(): [void]() - Initiates the connection process by resolving the hostname\n- onResolve(): [void](beast::error_code, tcp::resolver::results_type) - Callback for hostname resolution completion\n- onConnect(): [void](beast::error_code, tcp::resolver::results_type::endpoint_type) - Callback for TCP connection completion\n- onSSLhandshake(): [void](beast::error_code) - Callback for SSL handshake completion\n- onWinsockHandshake(): [void](beast::error_code) - Callback for WebSocket handshake completion\n- send(): [void](std::string, std::string) - Sends data through the WebSocket connection\n- onWrite(): [void](beast::error_code, std::size_t) - Callback for write operation completion\n- read(): [void]() - Initiates an asynchronous read operation\n- onRead(): [void](beast::error_code, std::size_t) - Callback for read operation completion\n- onError(): [void](beast::error_code&, std::string) - Handles connection errors\n- enqueueWork(): [void](Work&) - Adds work to the processing queue\n- close(): [void]() - Initiates connection shutdown\n- Impl(): [Constructor](net::io_context&, ssl::context&, Device&, Logging&) - Constructor initializing core components",
    "Canonical_solution": "#include <boost/asio.hpp>\n#include <boost/beast/core.hpp>\n#include <boost/beast/ssl.hpp>\n#include <boost/beast/websocket.hpp>\n#include <boost/beast/websocket/ssl.hpp>\n#include <nlohmann/json.hpp>\n\nnamespace beast = boost::beast;\nnamespace http = beast::http;\nnamespace websocket = beast::websocket;\nnamespace net = boost::asio;\nnamespace ssl = boost::asio::ssl;\nusing tcp = boost::asio::ip::tcp;\nusing udp = boost::asio::ip::udp;\nusing json = nlohmann::json;\n\nclass WebOsClient::Impl : public std::enable_shared_from_this<WebOsClient::Impl> {\nprivate:\n    net::io_context& ioc_;\n    ssl::context& ctx_;\n    Device device_settings_;\n    std::shared_ptr<Logging> log_;\n    tcp::resolver resolver_;\n    std::optional<websocket::stream<beast::ssl_stream<beast::tcp_stream>>> ws_;\n    std::optional<websocket::stream<beast::tcp_stream>> ws_tcp_;\n    beast::flat_buffer buffer_;\n    std::string host_;\n    int socket_status_ = SOCKET_DISCONNECTED;\n\n    void run() {\n        socket_status_ = SOCKET_CONNECTING;\n        if(device_settings_.ssl)\n            ws_.emplace(resolver_.get_executor(), ctx_);\n        else\n            ws_tcp_.emplace(resolver_.get_executor());\n        host_ = device_settings_.ip;\n        resolver_.async_resolve(host_.c_str(), device_settings_.ssl ? PORT_SSL : PORT,\n            beast::bind_front_handler(&Impl::onResolve, shared_from_this()));\n    }\n\n    void onResolve(beast::error_code ec, tcp::resolver::results_type results) {\n        if (ec) return onError(ec, \"onResolve\");\n        socket_status_ = SOCKET_CONNECTING;\n        if(device_settings_.ssl) {\n            beast::get_lowest_layer(*ws_).expires_after(std::chrono::milliseconds(TIMER_ASYNC_TIMEOUT));\n            beast::get_lowest_layer(*ws_).async_connect(results,\n                beast::bind_front_handler(&Impl::onConnect, shared_from_this()));\n        } else {\n            beast::get_lowest_layer(*ws_tcp_).expires_after(std::chrono::milliseconds(TIMER_ASYNC_TIMEOUT));\n            beast::get_lowest_layer(*ws_tcp_).async_connect(results,\n                beast::bind_front_handler(&Impl::onConnect, shared_from_this()));\n        }\n    }\n\n    void onConnect(beast::error_code ec, tcp::resolver::results_type::endpoint_type ep) {\n        if (ec) return onError(ec, \"onConnect\");\n        socket_status_ = SOCKET_CONNECTING;\n        if(device_settings_.ssl) {\n            beast::get_lowest_layer(*ws_).expires_after(std::chrono::milliseconds(TIMER_ASYNC_TIMEOUT));\n            if (!SSL_set_tlsext_host_name(ws_->next_layer().native_handle(), device_settings_.ip.c_str())) {\n                ec = beast::error_code(static_cast<int>(::ERR_get_error()), net::error::get_ssl_category());\n                return onError(ec, \"Failed to set SNI hostname\");\n            }\n            host_ += ':' + std::to_string(ep.port());\n            ws_->next_layer().async_handshake(ssl::stream_base::client,\n                beast::bind_front_handler(&Impl::onSSLhandshake, shared_from_this()));\n        } else {\n            beast::get_lowest_layer(*ws_tcp_).expires_after(std::chrono::milliseconds(TIMER_ASYNC_TIMEOUT));\n            ws_tcp_->set_option(websocket::stream_base::timeout::suggested(beast::role_type::client));\n            ws_tcp_->set_option(websocket::stream_base::decorator(\n                [](websocket::request_type& req) {\n                    req.set(http::field::user_agent,\n                        std::string(BOOST_BEAST_VERSION_STRING) + \" websocket-client-async\");\n                }));\n            host_ += ':' + std::to_string(ep.port());\n            ws_tcp_->async_handshake(host_, \"/\",\n                beast::bind_front_handler(&Impl::onWinsockHandshake, shared_from_this()));\n        }\n    }\n\n    void onSSLhandshake(beast::error_code ec) {\n        if (ec) return onError(ec, \"onSSLhandshake\");\n        socket_status_ = SOCKET_CONNECTING;\n        beast::get_lowest_layer(*ws_).expires_never();\n        ws_->set_option(websocket::stream_base::timeout::suggested(beast::role_type::client));\n        ws_->set_option(websocket::stream_base::decorator(\n            [](websocket::request_type& req) {\n                req.set(http::field::user_agent,\n                    std::string(BOOST_BEAST_VERSION_STRING) + \" websocket-client-async-ssl\");\n            }));\n        ws_->async_handshake(host_, \"/\",\n            beast::bind_front_handler(&Impl::onWinsockHandshake, shared_from_this()));\n    }\n\n    void onWinsockHandshake(beast::error_code ec) {\n        if (ec) return onError(ec, \"onWinsockHandshake\");\n        socket_status_ = SOCKET_CONNECTED;\n        send(webos_handshake_, \"webOS handshake\");\n    }\n\n    void send(std::string data, std::string log_message = \"\") {\n        if(device_settings_.ssl) {\n            ws_->async_write(net::buffer(data),\n                beast::bind_front_handler(&Impl::onWrite, shared_from_this()));\n        } else {\n            ws_tcp_->async_write(net::buffer(data),\n                beast::bind_front_handler(&Impl::onWrite, shared_from_this()));\n        }\n    }\n\n    void onWrite(beast::error_code ec, std::size_t bytes_transferred) {\n        boost::ignore_unused(bytes_transferred);\n        if (ec) return onError(ec, \"onWrite\");\n        read();\n    }\n\n    void read() {\n        if(device_settings_.ssl)\n            ws_->async_read(buffer_,\n                beast::bind_front_handler(&Impl::onRead, shared_from_this()));\n        else\n            ws_tcp_->async_read(buffer_,\n                beast::bind_front_handler(&Impl::onRead, shared_from_this()));\n    }\n\n    void onRead(beast::error_code ec, std::size_t bytes_transferred) {\n        boost::ignore_unused(bytes_transferred);\n        if (ec) return onError(ec, \"onRead\");\n        socket_status_ = SOCKET_CONNECTED;\n        // Process received data here\n        buffer_.consume(buffer_.size());\n        read();\n    }\n\n    void onError(beast::error_code& ec, std::string err) {\n        DEBUG(\"%1% (%2%)\", ec.message(), err);\n        socket_status_ = SOCKET_DISCONNECTED;\n    }\n\npublic:\n    explicit Impl(net::io_context& ioc, ssl::context& ctx, Device& settings, Logging& log)\n        : ioc_(ioc), ctx_(ctx), device_settings_(settings), log_(std::make_shared<Logging>(log)),\n          resolver_(net::make_strand(ioc)) {}\n\n    void enqueueWork(Work& work) {\n        net::dispatch(resolver_.get_executor(),\n            [unit = work, self = shared_from_this()]() mutable {\n                self->workQueue_.emplace_back(std::move(unit));\n                self->startNextWork();\n            });\n    }\n\n    void close() {\n        net::dispatch(resolver_.get_executor(),\n            beast::bind_front_handler(&Impl::doClose, shared_from_this()));\n    }\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 151,
    "matched_results": [],
    "unmatched_results": [
      "class WebOsClient::Impl {\npublic:\n    Impl(net::io_context& ioc, ssl::context& ctx, Device& device_settings, std::shared_ptr<Logging> log)\n        : ioc_(ioc), ctx_(ctx), device_settings_(device_settings), log_(log), resolver_(ioc), socket_status_(0) {}\n\n    void run() {\n        resolver_.async_resolve(device_settings_.host, device_settings_.port,\n            beast::bind_front_handler(&Impl::onResolve, shared_from_this()));\n    }\n\n    void onResolve(beast::error_code ec, tcp::resolver::results_type results) {\n        if (ec) {\n            onError(ec, \"Resolve\");\n            return;\n        }\n\n        beast::get_lowest_layer(ws_.value()).expires_after(std::chrono::seconds(30));\n        beast::get_lowest_layer(ws_.value()).async_connect(results,\n            beast::bind_front_handler(&Impl::onConnect, shared_from_this()));\n    }\n\n    void onConnect(beast::error_code ec, tcp::resolver::results_type::endpoint_type ep) {\n        if (ec) {\n            onError(ec, \"Connect\");\n            return;\n        }\n\n        if (device_settings_.ssl) {\n            ws_.emplace(ioc_, ctx_);\n            beast::get_lowest_layer(ws_.value()).expires_after(std::chrono::seconds(30));\n            ws_->next_layer().async_handshake(ssl::stream_base::client,\n                beast::bind_front_handler(&Impl::onSSLhandshake, shared_from_this()));\n        } else {\n            ws_tcp_.emplace(ioc_);\n            beast::get_lowest_layer(ws_tcp_.value()).expires_after(std::chrono::seconds(30));\n            ws_tcp_->async_handshake(device_settings_.host, \"/\",\n                beast::bind_front_handler(&Impl::onWinsockHandshake, shared_from_this()));\n        }\n    }\n\n    void onSSLhandshake(beast::error_code ec) {\n        if (ec) {\n            onError(ec, \"SSL Handshake\");\n            return;\n        }\n\n        ws_->async_handshake(device_settings_.host, \"/\",\n            beast::bind_front_handler(&Impl::onWinsockHandshake, shared_from_this()));\n    }\n\n    void onWinsockHandshake(beast::error_code ec) {\n        if (ec) {\n            onError(ec, \"WebSocket Handshake\");\n            return;\n        }\n\n        socket_status_ = 1;\n        read();\n    }\n\n    void send(std::string message, std::string type) {\n        if (socket_status_ != 1) return;\n\n        beast::flat_buffer buffer;\n        buffer.commit(boost::asio::buffer_copy(buffer.prepare(message.size()), boost::asio::buffer(message)));\n\n        if (device_settings_.ssl) {\n            ws_->async_write(buffer.data(),\n                beast::bind_front_handler(&Impl::onWrite, shared_from_this()));\n        } else {\n            ws_tcp_->async_write(buffer.data(),\n                beast::bind_front_handler(&Impl::onWrite, shared_from_this()));\n        }\n    }\n\n    void onWrite(beast::error_code ec, std::size_t bytes_transferred) {\n        if (ec) {\n            onError(ec, \"Write\");\n            return;\n        }\n\n        read();\n    }\n\n    void read() {\n        if (device_settings_.ssl) {\n            ws_->async_read(buffer_,\n                beast::bind_front_handler(&Impl::onRead, shared_from_this()));\n        } else {\n            ws_tcp_->async_read(buffer_,\n                beast::bind_front_handler(&Impl::onRead, shared_from_this()));\n        }\n    }\n\n    void onRead(beast::error_code ec, std::size_t bytes_transferred) {\n        if (ec) {\n            onError(ec, \"Read\");\n            return;\n        }\n\n        std::string message = beast::buffers_to_string(buffer_.data());\n        buffer_.consume(bytes_transferred);\n        log_->info(\"Received: \" + message);\n\n        read();\n    }\n\n    void onError(beast::error_code& ec, std::string what) {\n        log_->error(what + \": \" + ec.message());\n        close();\n    }\n\n    void enqueueWork(Work& work) {\n        // Implementation for adding work to the queue\n    }\n\n    void close() {\n        if (device_settings_.ssl) {\n            ws_->async_close(websocket::close_code::normal,\n                beast::bind_front_handler(&Impl::onClose, shared_from_this()));\n        } else {\n            ws_tcp_->async_close(websocket::close_code::normal,\n                beast::bind_front_handler(&Impl::onClose, shared_from_this()));\n        }\n    }\n\n    void onClose(beast::error_code ec) {\n        if (ec) {\n            onError(ec, \"Close\");\n            return;\n        }\n\n        socket_status_ = 0;\n    }\n\nprivate:\n    net::io_context& ioc_;\n    ssl::context& ctx_;\n    Device& device_settings_;\n    std::shared_ptr<Logging> log_;\n    tcp::resolver resolver_;\n    std::optional<websocket::stream<beast::ssl_stream<beast::tcp_stream>>> ws_;\n    std::optional<websocket::stream<beast::tcp_stream>> ws_tcp_;\n    beast::flat_buffer buffer_;\n    std::string host_;\n    int socket_status_;\n};",
      "class WebOsClient::Impl {\npublic:\n    Impl(net::io_context& ioc, ssl::context& ctx, Device& device_settings, std::shared_ptr<Logging> log)\n        : ioc_(ioc), ctx_(ctx), device_settings_(device_settings), log_(log),\n          resolver_(net::make_strand(ioc)), socket_status_(0) {}\n\n    void run() {\n        resolver_.async_resolve(device_settings_.host, device_settings_.port,\n            beast::bind_front_handler(&Impl::onResolve, shared_from_this()));\n    }\n\nprivate:\n    void onResolve(beast::error_code ec, tcp::resolver::results_type results) {\n        if (ec) return onError(ec, \"resolve\");\n\n        beast::get_lowest_layer(ws_ ? ws_->next_layer() : ws_tcp_->next_layer()).expires_after(std::chrono::seconds(30));\n        beast::get_lowest_layer(ws_ ? ws_->next_layer() : ws_tcp_->next_layer()).async_connect(\n            results, beast::bind_front_handler(&Impl::onConnect, shared_from_this()));\n    }\n\n    void onConnect(beast::error_code ec, tcp::resolver::results_type::endpoint_type) {\n        if (ec) return onError(ec, \"connect\");\n\n        if (ws_) {\n            ws_->next_layer().async_handshake(ssl::stream_base::client,\n                beast::bind_front_handler(&Impl::onSSLhandshake, shared_from_this()));\n        } else {\n            ws_tcp_->async_handshake(device_settings_.host, \"/\", \n                beast::bind_front_handler(&Impl::onWinsockHandshake, shared_from_this()));\n        }\n    }\n\n    void onSSLhandshake(beast::error_code ec) {\n        if (ec) return onError(ec, \"ssl_handshake\");\n\n        ws_->async_handshake(device_settings_.host, \"/\", \n            beast::bind_front_handler(&Impl::onWinsockHandshake, shared_from_this()));\n    }\n\n    void onWinsockHandshake(beast::error_code ec) {\n        if (ec) return onError(ec, \"ws_handshake\");\n\n        socket_status_ = 1;\n        read();\n    }\n\n    void send(std::string message, std::string type) {\n        if (socket_status_ != 1) return;\n\n        auto msg = std::make_shared<std::string>(std::move(message));\n        if (ws_) {\n            ws_->async_write(net::buffer(*msg), \n                beast::bind_front_handler(&Impl::onWrite, shared_from_this(), msg));\n        } else {\n            ws_tcp_->async_write(net::buffer(*msg), \n                beast::bind_front_handler(&Impl::onWrite, shared_from_this(), msg));\n        }\n    }\n\n    void onWrite(beast::error_code ec, std::size_t bytes_transferred, std::shared_ptr<std::string> msg) {\n        if (ec) return onError(ec, \"write\");\n    }\n\n    void read() {\n        if (ws_) {\n            ws_->async_read(buffer_, beast::bind_front_handler(&Impl::onRead, shared_from_this()));\n        } else {\n            ws_tcp_->async_read(buffer_, beast::bind_front_handler(&Impl::onRead, shared_from_this()));\n        }\n    }\n\n    void onRead(beast::error_code ec, std::size_t bytes_transferred) {\n        if (ec) return onError(ec, \"read\");\n\n        // Process the message in buffer_\n        buffer_.consume(bytes_transferred);\n        read();\n    }\n\n    void onError(beast::error_code& ec, std::string what) {\n        log_->error(what + \": \" + ec.message());\n        socket_status_ = 0;\n    }\n\n    void close() {\n        if (ws_) {\n            ws_->async_close(websocket::close_code::normal, beast::bind_front_handler(&Impl::onClose, shared_from_this()));\n        } else {\n            ws_tcp_->async_close(websocket::close_code::normal, beast::bind_front_handler(&Impl::onClose, shared_from_this()));\n        }\n    }\n\n    void onClose(beast::error_code ec) {\n        if (ec) return onError(ec, \"close\");\n        socket_status_ = 0;\n    }\n\n    net::io_context& ioc_;\n    ssl::context& ctx_;\n    Device& device_settings_;\n    std::shared_ptr<Logging> log_;\n    tcp::resolver resolver_;\n    std::optional<websocket::stream<beast::ssl_stream<beast::tcp_stream>>> ws_;\n    std::optional<websocket::stream<beast::tcp_stream>> ws_tcp_;\n    beast::flat_buffer buffer_;\n    std::string host_;\n    int socket_status_;\n};",
      "class WebOsClient {\npublic:\n    class Impl {\n    public:\n        Impl(net::io_context& ioc, ssl::context& ctx, Device& device_settings, std::shared_ptr<Logging> log)\n            : ioc_(ioc), ctx_(ctx), device_settings_(device_settings), log_(log),\n              resolver_(ioc), socket_status_(0) {}\n\n        void run() {\n            resolver_.async_resolve(device_settings_.host, device_settings_.port,\n                beast::bind_front_handler(&Impl::onResolve, shared_from_this()));\n        }\n\n        void onResolve(beast::error_code ec, tcp::resolver::results_type results) {\n            if (ec) {\n                onError(ec, \"resolve\");\n                return;\n            }\n            beast::get_lowest_layer(ws_ ? *ws_ : *ws_tcp_).expires_after(std::chrono::seconds(30));\n            beast::get_lowest_layer(ws_ ? *ws_ : *ws_tcp_).async_connect(\n                results, beast::bind_front_handler(&Impl::onConnect, shared_from_this()));\n        }\n\n        void onConnect(beast::error_code ec, tcp::resolver::results_type::endpoint_type) {\n            if (ec) {\n                onError(ec, \"connect\");\n                return;\n            }\n            if (ws_) {\n                ws_->next_layer().async_handshake(ssl::stream_base::client,\n                    beast::bind_front_handler(&Impl::onSSLhandshake, shared_from_this()));\n            } else {\n                onWinsockHandshake(ec);\n            }\n        }\n\n        void onSSLhandshake(beast::error_code ec) {\n            if (ec) {\n                onError(ec, \"ssl_handshake\");\n                return;\n            }\n            onWinsockHandshake(ec);\n        }\n\n        void onWinsockHandshake(beast::error_code ec) {\n            if (ec) {\n                onError(ec, \"ws_handshake\");\n                return;\n            }\n            ws_->async_handshake(device_settings_.host, \"/\",\n                beast::bind_front_handler(&Impl::onRead, shared_from_this()));\n        }\n\n        void send(std::string message, std::string target) {\n            if (ws_) {\n                ws_->async_write(net::buffer(message),\n                    beast::bind_front_handler(&Impl::onWrite, shared_from_this()));\n            } else {\n                ws_tcp_->async_write(net::buffer(message),\n                    beast::bind_front_handler(&Impl::onWrite, shared_from_this()));\n            }\n        }\n\n        void onWrite(beast::error_code ec, std::size_t bytes_transferred) {\n            if (ec) {\n                onError(ec, \"write\");\n                return;\n            }\n            read();\n        }\n\n        void read() {\n            if (ws_) {\n                ws_->async_read(buffer_,\n                    beast::bind_front_handler(&Impl::onRead, shared_from_this()));\n            } else {\n                ws_tcp_->async_read(buffer_,\n                    beast::bind_front_handler(&Impl::onRead, shared_from_this()));\n            }\n        }\n\n        void onRead(beast::error_code ec, std::size_t bytes_transferred) {\n            if (ec) {\n                onError(ec, \"read\");\n                return;\n            }\n            // Process the message in buffer_\n            buffer_.consume(buffer_.size());\n            read();\n        }\n\n        void onError(beast::error_code& ec, std::string where) {\n            log_->error(\"Error in \" + where + \": \" + ec.message());\n            close();\n        }\n\n        void enqueueWork(Work& work) {\n            // Add work to the processing queue\n        }\n\n        void close() {\n            if (ws_) {\n                ws_->async_close(websocket::close_code::normal,\n                    beast::bind_front_handler(&Impl::onClose, shared_from_this()));\n            } else {\n                ws_tcp_->async_close(websocket::close_code::normal,\n                    beast::bind_front_handler(&Impl::onClose, shared_from_this()));\n            }\n        }\n\n        void onClose(beast::error_code ec) {\n            if (ec) {\n                onError(ec, \"close\");\n                return;\n            }\n            socket_status_ = 0; // Disconnected\n        }\n\n    private:\n        net::io_context& ioc_;\n        ssl::context& ctx_;\n        Device& device_settings_;\n        std::shared_ptr<Logging> log_;\n        tcp::resolver resolver_;\n        std::optional<websocket::stream<beast::ssl_stream<beast::tcp_stream>>> ws_;\n        std::optional<websocket::stream<beast::tcp_stream>> ws_tcp_;\n        beast::flat_buffer buffer_;\n        std::string host_;\n        int socket_status_;\n    };\n};",
      "class WebOsClient {\npublic:\n    class Impl {\n    public:\n        Impl(net::io_context& ioc, ssl::context& ctx, Device& device_settings, std::shared_ptr<Logging> log)\n            : ioc_(ioc), ctx_(ctx), device_settings_(device_settings), log_(log),\n              resolver_(ioc), buffer_(), socket_status_(0) {\n            host_ = device_settings_.host + \":\" + std::to_string(device_settings_.port);\n        }\n\n        void run() {\n            resolver_.async_resolve(device_settings_.host, std::to_string(device_settings_.port),\n                beast::bind_front_handler(&Impl::onResolve, this));\n        }\n\n        void onResolve(beast::error_code ec, tcp::resolver::results_type results) {\n            if (ec) {\n                onError(ec, \"Resolve\");\n                return;\n            }\n\n            if (device_settings_.ssl) {\n                ws_.emplace(ioc_, ctx_);\n                beast::get_lowest_layer(*ws_).expires_after(std::chrono::seconds(30));\n                beast::get_lowest_layer(*ws_).async_connect(results,\n                    beast::bind_front_handler(&Impl::onConnect, this));\n            } else {\n                ws_tcp_.emplace(ioc_);\n                beast::get_lowest_layer(*ws_tcp_).expires_after(std::chrono::seconds(30));\n                beast::get_lowest_layer(*ws_tcp_).async_connect(results,\n                    beast::bind_front_handler(&Impl::onConnect, this));\n            }\n        }\n\n        void onConnect(beast::error_code ec, tcp::resolver::results_type::endpoint_type ep) {\n            if (ec) {\n                onError(ec, \"Connect\");\n                return;\n            }\n\n            if (device_settings_.ssl) {\n                beast::get_lowest_layer(*ws_).expires_never();\n                ws_->next_layer().async_handshake(ssl::stream_base::client,\n                    beast::bind_front_handler(&Impl::onSSLhandshake, this));\n            } else {\n                beast::get_lowest_layer(*ws_tcp_).expires_never();\n                ws_tcp_->async_handshake(device_settings_.host, \"/\",\n                    beast::bind_front_handler(&Impl::onWinsockHandshake, this));\n            }\n        }\n\n        void onSSLhandshake(beast::error_code ec) {\n            if (ec) {\n                onError(ec, \"SSL Handshake\");\n                return;\n            }\n\n            ws_->async_handshake(device_settings_.host, \"/\",\n                beast::bind_front_handler(&Impl::onWinsockHandshake, this));\n        }\n\n        void onWinsockHandshake(beast::error_code ec) {\n            if (ec) {\n                onError(ec, \"WebSocket Handshake\");\n                return;\n            }\n\n            socket_status_ = 1; // Connected\n            read();\n        }\n\n        void send(std::string message, std::string type) {\n            if (socket_status_ != 1) return;\n\n            if (device_settings_.ssl) {\n                ws_->async_write(net::buffer(message),\n                    beast::bind_front_handler(&Impl::onWrite, this));\n            } else {\n                ws_tcp_->async_write(net::buffer(message),\n                    beast::bind_front_handler(&Impl::onWrite, this));\n            }\n        }\n\n        void onWrite(beast::error_code ec, std::size_t bytes_transferred) {\n            if (ec) {\n                onError(ec, \"Write\");\n                return;\n            }\n        }\n\n        void read() {\n            if (device_settings_.ssl) {\n                ws_->async_read(buffer_,\n                    beast::bind_front_handler(&Impl::onRead, this));\n            } else {\n                ws_tcp_->async_read(buffer_,\n                    beast::bind_front_handler(&Impl::onRead, this));\n            }\n        }\n\n        void onRead(beast::error_code ec, std::size_t bytes_transferred) {\n            if (ec) {\n                onError(ec, \"Read\");\n                return;\n            }\n\n            // Process the message in buffer_\n            buffer_.consume(bytes_transferred);\n            read();\n        }\n\n        void onError(beast::error_code& ec, std::string what) {\n            log_->error(what + \": \" + ec.message());\n            socket_status_ = 0; // Disconnected\n        }\n\n        void enqueueWork(Work& work) {\n            // Add work to the processing queue\n        }\n\n        void close() {\n            if (socket_status_ != 1) return;\n\n            if (device_settings_.ssl) {\n                ws_->async_close(websocket::close_code::normal,\n                    beast::bind_front_handler(&Impl::onClose, this));\n            } else {\n                ws_tcp_->async_close(websocket::close_code::normal,\n                    beast::bind_front_handler(&Impl::onClose, this));\n            }\n        }\n\n    private:\n        net::io_context& ioc_;\n        ssl::context& ctx_;\n        Device& device_settings_;\n        std::shared_ptr<Logging> log_;\n        tcp::resolver resolver_;\n        std::optional<websocket::stream<beast::ssl_stream<beast::tcp_stream>>> ws_;\n        std::optional<websocket::stream<beast::tcp_stream>> ws_tcp_;\n        beast::flat_buffer buffer_;\n        std::string host_;\n        int socket_status_;\n    };\n};",
      "class WebOsClient::Impl {\npublic:\n    Impl(net::io_context& ioc, ssl::context& ctx, Device& device_settings, std::shared_ptr<Logging> log)\n        : ioc_(ioc), ctx_(ctx), device_settings_(device_settings), log_(log), resolver_(ioc), socket_status_(0) {}\n\n    void run() {\n        resolver_.async_resolve(device_settings_.host, device_settings_.port,\n            beast::bind_front_handler(&Impl::onResolve, shared_from_this()));\n    }\n\n    void onResolve(beast::error_code ec, tcp::resolver::results_type results) {\n        if (ec) {\n            onError(ec, \"Resolve\");\n            return;\n        }\n        beast::get_lowest_layer(ws_tcp_ ? *ws_tcp_ : *ws_).expires_after(std::chrono::seconds(30));\n        beast::get_lowest_layer(ws_tcp_ ? *ws_tcp_ : *ws_).async_connect(results,\n            beast::bind_front_handler(&Impl::onConnect, shared_from_this()));\n    }\n\n    void onConnect(beast::error_code ec, tcp::resolver::results_type::endpoint_type) {\n        if (ec) {\n            onError(ec, \"Connect\");\n            return;\n        }\n        if (ws_) {\n            ws_->next_layer().async_handshake(ssl::stream_base::client,\n                beast::bind_front_handler(&Impl::onSSLhandshake, shared_from_this()));\n        } else {\n            ws_tcp_->async_handshake(device_settings_.host, \"/\",\n                beast::bind_front_handler(&Impl::onWinsockHandshake, shared_from_this()));\n        }\n    }\n\n    void onSSLhandshake(beast::error_code ec) {\n        if (ec) {\n            onError(ec, \"SSL Handshake\");\n            return;\n        }\n        ws_->async_handshake(device_settings_.host, \"/\",\n            beast::bind_front_handler(&Impl::onWinsockHandshake, shared_from_this()));\n    }\n\n    void onWinsockHandshake(beast::error_code ec) {\n        if (ec) {\n            onError(ec, \"WebSocket Handshake\");\n            return;\n        }\n        socket_status_ = 1; // Connected\n        read();\n    }\n\n    void send(std::string message, std::string type) {\n        if (socket_status_ != 1) return;\n        auto msg = std::make_shared<std::string>(std::move(message));\n        if (ws_) {\n            ws_->async_write(net::buffer(*msg),\n                beast::bind_front_handler(&Impl::onWrite, shared_from_this(), msg));\n        } else {\n            ws_tcp_->async_write(net::buffer(*msg),\n                beast::bind_front_handler(&Impl::onWrite, shared_from_this(), msg));\n        }\n    }\n\n    void onWrite(beast::error_code ec, std::size_t bytes_transferred) {\n        if (ec) {\n            onError(ec, \"Write\");\n            return;\n        }\n        read();\n    }\n\n    void read() {\n        if (ws_) {\n            ws_->async_read(buffer_,\n                beast::bind_front_handler(&Impl::onRead, shared_from_this()));\n        } else {\n            ws_tcp_->async_read(buffer_,\n                beast::bind_front_handler(&Impl::onRead, shared_from_this()));\n        }\n    }\n\n    void onRead(beast::error_code ec, std::size_t bytes_transferred) {\n        if (ec) {\n            onError(ec, \"Read\");\n            return;\n        }\n        // Process the message from buffer_\n        buffer_.consume(buffer_.size());\n        read();\n    }\n\n    void onError(beast::error_code& ec, std::string where) {\n        log_->error(\"Error in \" + where + \": \" + ec.message());\n        close();\n    }\n\n    void enqueueWork(Work& work) {\n        // Enqueue work for processing\n    }\n\n    void close() {\n        if (ws_) {\n            ws_->async_close(websocket::close_code::normal,\n                beast::bind_front_handler(&Impl::onClose, shared_from_this()));\n        } else if (ws_tcp_) {\n            ws_tcp_->async_close(websocket::close_code::normal,\n                beast::bind_front_handler(&Impl::onClose, shared_from_this()));\n        }\n    }\n\n    void onClose(beast::error_code ec) {\n        if (ec) {\n            onError(ec, \"Close\");\n            return;\n        }\n        socket_status_ = 0; // Disconnected\n    }\n\nprivate:\n    net::io_context& ioc_;\n    ssl::context& ctx_;\n    Device& device_settings_;\n    std::shared_ptr<Logging> log_;\n    tcp::resolver resolver_;\n    std::optional<websocket::stream<beast::ssl_stream<beast::tcp_stream>>> ws_;\n    std::optional<websocket::stream<beast::tcp_stream>> ws_tcp_;\n    beast::flat_buffer buffer_;\n    std::string host_;\n    int socket_status_;\n};",
      "class WebOsClient {\npublic:\n    class Impl {\n    public:\n        Impl(net::io_context& ioc, ssl::context& ctx, Device& device_settings, std::shared_ptr<Logging> log)\n            : ioc_(ioc), ctx_(ctx), device_settings_(device_settings), log_(log),\n              resolver_(ioc), socket_status_(0) {}\n\n        void run() {\n            resolver_.async_resolve(device_settings_.host, device_settings_.port,\n                beast::bind_front_handler(&Impl::onResolve, shared_from_this()));\n        }\n\n        void onResolve(beast::error_code ec, tcp::resolver::results_type results) {\n            if (ec) {\n                onError(ec, \"Resolve\");\n                return;\n            }\n\n            beast::get_lowest_layer(ws_tcp_ ? *ws_tcp_ : *ws_).expires_after(std::chrono::seconds(30));\n            beast::get_lowest_layer(ws_tcp_ ? *ws_tcp_ : *ws_).async_connect(\n                results, beast::bind_front_handler(&Impl::onConnect, shared_from_this()));\n        }\n\n        void onConnect(beast::error_code ec, tcp::resolver::results_type::endpoint_type ep) {\n            if (ec) {\n                onError(ec, \"Connect\");\n                return;\n            }\n\n            if (ws_) {\n                ws_->next_layer().async_handshake(ssl::stream_base::client,\n                    beast::bind_front_handler(&Impl::onSSLhandshake, shared_from_this()));\n            } else {\n                onWinsockHandshake(ec);\n            }\n        }\n\n        void onSSLhandshake(beast::error_code ec) {\n            if (ec) {\n                onError(ec, \"SSL Handshake\");\n                return;\n            }\n\n            onWinsockHandshake(ec);\n        }\n\n        void onWinsockHandshake(beast::error_code ec) {\n            if (ec) {\n                onError(ec, \"WebSocket Handshake\");\n                return;\n            }\n\n            ws_tcp_ ? ws_tcp_->async_handshake(device_settings_.host, \"/\", beast::bind_front_handler(&Impl::onWinsockHandshake, shared_from_this()))\n                    : ws_->async_handshake(device_settings_.host, \"/\", beast::bind_front_handler(&Impl::onWinsockHandshake, shared_from_this()));\n        }\n\n        void send(std::string msg, std::string type) {\n            auto send_buffer = std::make_shared<std::string>(std::move(msg));\n            ws_tcp_ ? ws_tcp_->async_write(net::buffer(*send_buffer), beast::bind_front_handler(&Impl::onWrite, shared_from_this(), send_buffer))\n                    : ws_->async_write(net::buffer(*send_buffer), beast::bind_front_handler(&Impl::onWrite, shared_from_this(), send_buffer));\n        }\n\n        void onWrite(beast::error_code ec, std::size_t bytes_transferred, std::shared_ptr<std::string> send_buffer) {\n            if (ec) {\n                onError(ec, \"Write\");\n                return;\n            }\n\n            read();\n        }\n\n        void read() {\n            ws_tcp_ ? ws_tcp_->async_read(buffer_, beast::bind_front_handler(&Impl::onRead, shared_from_this()))\n                    : ws_->async_read(buffer_, beast::bind_front_handler(&Impl::onRead, shared_from_this()));\n        }\n\n        void onRead(beast::error_code ec, std::size_t bytes_transferred) {\n            if (ec) {\n                onError(ec, \"Read\");\n                return;\n            }\n\n            std::string msg = beast::buffers_to_string(buffer_.data());\n            buffer_.consume(bytes_transferred);\n            log_->info(\"Received: \" + msg);\n        }\n\n        void onError(beast::error_code& ec, std::string what) {\n            log_->error(what + \": \" + ec.message());\n            close();\n        }\n\n        void enqueueWork(Work& work) {\n            // Implementation for work queue\n        }\n\n        void close() {\n            if (ws_tcp_) {\n                ws_tcp_->async_close(websocket::close_code::normal, beast::bind_front_handler(&Impl::onClose, shared_from_this()));\n            } else if (ws_) {\n                ws_->async_close(websocket::close_code::normal, beast::bind_front_handler(&Impl::onClose, shared_from_this()));\n            }\n        }\n\n        void onClose(beast::error_code ec) {\n            if (ec) {\n                onError(ec, \"Close\");\n                return;\n            }\n\n            socket_status_ = 0;\n        }\n\n    private:\n        net::io_context& ioc_;\n        ssl::context& ctx_;\n        Device& device_settings_;\n        std::shared_ptr<Logging> log_;\n        tcp::resolver resolver_;\n        std::optional<websocket::stream<beast::ssl_stream<beast::tcp_stream>>> ws_;\n        std::optional<websocket::stream<beast::tcp_stream>> ws_tcp_;\n        beast::flat_buffer buffer_;\n        std::string host_;\n        int socket_status_;\n    };\n};",
      "class WebOsClient::Impl {\npublic:\n    Impl(net::io_context& ioc, ssl::context& ctx, Device& device_settings, std::shared_ptr<Logging> log)\n        : ioc_(ioc), ctx_(ctx), device_settings_(device_settings), log_(log), resolver_(ioc), socket_status_(0) {}\n\n    void run() {\n        resolver_.async_resolve(device_settings_.host, device_settings_.port,\n            beast::bind_front_handler(&Impl::onResolve, shared_from_this()));\n    }\n\n    void onResolve(beast::error_code ec, tcp::resolver::results_type results) {\n        if (ec) return onError(ec, \"resolve\");\n        beast::get_lowest_layer(ws_ ? ws_->next_layer() : ws_tcp_->next_layer()).expires_after(std::chrono::seconds(30));\n        beast::get_lowest_layer(ws_ ? ws_->next_layer() : ws_tcp_->next_layer()).async_connect(\n            results, beast::bind_front_handler(&Impl::onConnect, shared_from_this()));\n    }\n\n    void onConnect(beast::error_code ec, tcp::resolver::results_type::endpoint_type) {\n        if (ec) return onError(ec, \"connect\");\n        if (ws_) {\n            ws_->next_layer().async_handshake(ssl::stream_base::client,\n                beast::bind_front_handler(&Impl::onSSLhandshake, shared_from_this()));\n        } else {\n            ws_tcp_->async_handshake(device_settings_.host, \"/\",\n                beast::bind_front_handler(&Impl::onWinsockHandshake, shared_from_this()));\n        }\n    }\n\n    void onSSLhandshake(beast::error_code ec) {\n        if (ec) return onError(ec, \"ssl_handshake\");\n        ws_->async_handshake(device_settings_.host, \"/\",\n            beast::bind_front_handler(&Impl::onWinsockHandshake, shared_from_this()));\n    }\n\n    void onWinsockHandshake(beast::error_code ec) {\n        if (ec) return onError(ec, \"ws_handshake\");\n        socket_status_ = 1; // connected\n        read();\n    }\n\n    void send(std::string message, std::string type) {\n        if (ws_) {\n            ws_->async_write(net::buffer(message),\n                beast::bind_front_handler(&Impl::onWrite, shared_from_this()));\n        } else {\n            ws_tcp_->async_write(net::buffer(message),\n                beast::bind_front_handler(&Impl::onWrite, shared_from_this()));\n        }\n    }\n\n    void onWrite(beast::error_code ec, std::size_t bytes_transferred) {\n        if (ec) return onError(ec, \"write\");\n    }\n\n    void read() {\n        if (ws_) {\n            ws_->async_read(buffer_,\n                beast::bind_front_handler(&Impl::onRead, shared_from_this()));\n        } else {\n            ws_tcp_->async_read(buffer_,\n                beast::bind_front_handler(&Impl::onRead, shared_from_this()));\n        }\n    }\n\n    void onRead(beast::error_code ec, std::size_t bytes_transferred) {\n        if (ec) return onError(ec, \"read\");\n        // Process the message in buffer_\n        buffer_.consume(bytes_transferred);\n        read();\n    }\n\n    void onError(beast::error_code& ec, std::string what) {\n        log_->error(what + \": \" + ec.message());\n        socket_status_ = 0; // disconnected\n    }\n\n    void enqueueWork(Work& work) {\n        // Add work to the processing queue\n    }\n\n    void close() {\n        if (ws_) {\n            ws_->async_close(websocket::close_code::normal,\n                beast::bind_front_handler(&Impl::onError, shared_from_this(), std::placeholders::_1, \"close\"));\n        } else {\n            ws_tcp_->async_close(websocket::close_code::normal,\n                beast::bind_front_handler(&Impl::onError, shared_from_this(), std::placeholders::_1, \"close\"));\n        }\n    }\n\nprivate:\n    net::io_context& ioc_;\n    ssl::context& ctx_;\n    Device& device_settings_;\n    std::shared_ptr<Logging> log_;\n    tcp::resolver resolver_;\n    std::optional<websocket::stream<beast::ssl_stream<beast::tcp_stream>>> ws_;\n    std::optional<websocket::stream<beast::tcp_stream>> ws_tcp_;\n    beast::flat_buffer buffer_;\n    std::string host_;\n    int socket_status_;\n};",
      "class WebOsClient {\npublic:\n    class Impl {\n    public:\n        Impl(net::io_context& ioc, ssl::context& ctx, Device& device_settings, std::shared_ptr<Logging> log)\n            : ioc_(ioc), ctx_(ctx), device_settings_(device_settings), log_(log), resolver_(ioc), socket_status_(0) {}\n\n        void run() {\n            resolver_.async_resolve(device_settings_.host, device_settings_.port,\n                beast::bind_front_handler(&Impl::onResolve, shared_from_this()));\n        }\n\n        void onResolve(beast::error_code ec, tcp::resolver::results_type results) {\n            if (ec) {\n                onError(ec, \"Resolve\");\n                return;\n            }\n\n            if (device_settings_.use_ssl) {\n                ws_.emplace(ioc_, ctx_);\n                beast::get_lowest_layer(*ws_).expires_after(std::chrono::seconds(30));\n                beast::get_lowest_layer(*ws_).async_connect(results,\n                    beast::bind_front_handler(&Impl::onConnect, shared_from_this()));\n            } else {\n                ws_tcp_.emplace(ioc_);\n                beast::get_lowest_layer(*ws_tcp_).expires_after(std::chrono::seconds(30));\n                beast::get_lowest_layer(*ws_tcp_).async_connect(results,\n                    beast::bind_front_handler(&Impl::onConnect, shared_from_this()));\n            }\n        }\n\n        void onConnect(beast::error_code ec, tcp::resolver::results_type::endpoint_type) {\n            if (ec) {\n                onError(ec, \"Connect\");\n                return;\n            }\n\n            if (device_settings_.use_ssl) {\n                ws_->next_layer().async_handshake(ssl::stream_base::client,\n                    beast::bind_front_handler(&Impl::onSSLhandshake, shared_from_this()));\n            } else {\n                ws_tcp_->async_handshake(device_settings_.host, \"/\",\n                    beast::bind_front_handler(&Impl::onWinsockHandshake, shared_from_this()));\n            }\n        }\n\n        void onSSLhandshake(beast::error_code ec) {\n            if (ec) {\n                onError(ec, \"SSL Handshake\");\n                return;\n            }\n\n            ws_->async_handshake(device_settings_.host, \"/\",\n                beast::bind_front_handler(&Impl::onWinsockHandshake, shared_from_this()));\n        }\n\n        void onWinsockHandshake(beast::error_code ec) {\n            if (ec) {\n                onError(ec, \"WebSocket Handshake\");\n                return;\n            }\n\n            socket_status_ = 1; // Connected\n            read();\n        }\n\n        void send(std::string message, std::string type) {\n            if (socket_status_ != 1) return;\n\n            if (device_settings_.use_ssl) {\n                ws_->async_write(net::buffer(message),\n                    beast::bind_front_handler(&Impl::onWrite, shared_from_this()));\n            } else {\n                ws_tcp_->async_write(net::buffer(message),\n                    beast::bind_front_handler(&Impl::onWrite, shared_from_this()));\n            }\n        }\n\n        void onWrite(beast::error_code ec, std::size_t bytes_transferred) {\n            if (ec) {\n                onError(ec, \"Write\");\n                return;\n            }\n        }\n\n        void read() {\n            if (device_settings_.use_ssl) {\n                ws_->async_read(buffer_,\n                    beast::bind_front_handler(&Impl::onRead, shared_from_this()));\n            } else {\n                ws_tcp_->async_read(buffer_,\n                    beast::bind_front_handler(&Impl::onRead, shared_from_this()));\n            }\n        }\n\n        void onRead(beast::error_code ec, std::size_t bytes_transferred) {\n            if (ec) {\n                onError(ec, \"Read\");\n                return;\n            }\n\n            // Process the message in buffer_\n            buffer_.consume(bytes_transferred);\n            read();\n        }\n\n        void onError(beast::error_code& ec, std::string what) {\n            log_->error(what + \": \" + ec.message());\n            socket_status_ = 0; // Disconnected\n        }\n\n        void enqueueWork(Work& work) {\n            // Implementation for adding work to the queue\n        }\n\n        void close() {\n            if (socket_status_ != 1) return;\n\n            if (device_settings_.use_ssl) {\n                ws_->async_close(websocket::close_code::normal,\n                    beast::bind_front_handler(&Impl::onClose, shared_from_this()));\n            } else {\n                ws_tcp_->async_close(websocket::close_code::normal,\n                    beast::bind_front_handler(&Impl::onClose, shared_from_this()));\n            }\n        }\n\n        void onClose(beast::error_code ec) {\n            if (ec) {\n                onError(ec, \"Close\");\n                return;\n            }\n\n            socket_status_ = 0; // Disconnected\n        }\n\n    private:\n        net::io_context& ioc_;\n        ssl::context& ctx_;\n        Device& device_settings_;\n        std::shared_ptr<Logging> log_;\n        tcp::resolver resolver_;\n        std::optional<websocket::stream<beast::ssl_stream<beast::tcp_stream>>> ws_;\n        std::optional<websocket::stream<beast::tcp_stream>> ws_tcp_;\n        beast::flat_buffer buffer_;\n        std::string host_;\n        int socket_status_;\n    };\n};",
      "class WebOsClient::Impl {\npublic:\n    Impl(net::io_context& ioc, ssl::context& ctx, Device& device_settings, std::shared_ptr<Logging> log)\n        : ioc_(ioc), ctx_(ctx), device_settings_(device_settings), log_(log), resolver_(ioc), socket_status_(0) {}\n\n    void run() {\n        resolver_.async_resolve(device_settings_.host, device_settings_.port,\n            beast::bind_front_handler(&Impl::onResolve, shared_from_this()));\n    }\n\n    void onResolve(beast::error_code ec, tcp::resolver::results_type results) {\n        if (ec) {\n            onError(ec, \"Resolve\");\n            return;\n        }\n        beast::get_lowest_layer(ws_tcp_.emplace(ioc_)).async_connect(results,\n            beast::bind_front_handler(&Impl::onConnect, shared_from_this()));\n    }\n\n    void onConnect(beast::error_code ec, tcp::resolver::results_type::endpoint_type ep) {\n        if (ec) {\n            onError(ec, \"Connect\");\n            return;\n        }\n        if (device_settings_.use_ssl) {\n            ws_.emplace(ioc_, ctx_);\n            beast::get_lowest_layer(*ws_).async_handshake(ssl::stream_base::client,\n                beast::bind_front_handler(&Impl::onSSLhandshake, shared_from_this()));\n        } else {\n            ws_tcp_->async_handshake(device_settings_.host, \"/\",\n                beast::bind_front_handler(&Impl::onWinsockHandshake, shared_from_this()));\n        }\n    }\n\n    void onSSLhandshake(beast::error_code ec) {\n        if (ec) {\n            onError(ec, \"SSL Handshake\");\n            return;\n        }\n        ws_->async_handshake(device_settings_.host, \"/\",\n            beast::bind_front_handler(&Impl::onWinsockHandshake, shared_from_this()));\n    }\n\n    void onWinsockHandshake(beast::error_code ec) {\n        if (ec) {\n            onError(ec, \"WebSocket Handshake\");\n            return;\n        }\n        socket_status_ = 1; // Connected\n        read();\n    }\n\n    void send(std::string message, std::string type) {\n        if (socket_status_ != 1) return;\n        auto send_handler = beast::bind_front_handler(&Impl::onWrite, shared_from_this());\n        if (device_settings_.use_ssl) {\n            ws_->async_write(net::buffer(message), send_handler);\n        } else {\n            ws_tcp_->async_write(net::buffer(message), send_handler);\n        }\n    }\n\n    void onWrite(beast::error_code ec, std::size_t bytes_transferred) {\n        if (ec) {\n            onError(ec, \"Write\");\n        }\n    }\n\n    void read() {\n        auto read_handler = beast::bind_front_handler(&Impl::onRead, shared_from_this());\n        if (device_settings_.use_ssl) {\n            ws_->async_read(buffer_, read_handler);\n        } else {\n            ws_tcp_->async_read(buffer_, read_handler);\n        }\n    }\n\n    void onRead(beast::error_code ec, std::size_t bytes_transferred) {\n        if (ec) {\n            onError(ec, \"Read\");\n            return;\n        }\n        // Process the message in buffer_\n        buffer_.consume(bytes_transferred);\n        read();\n    }\n\n    void onError(beast::error_code& ec, std::string where) {\n        log_->error(\"Error in \" + where + \": \" + ec.message());\n        close();\n    }\n\n    void enqueueWork(Work& work) {\n        // Add work to the processing queue\n    }\n\n    void close() {\n        socket_status_ = 0; // Disconnected\n        if (device_settings_.use_ssl) {\n            ws_->async_close(websocket::close_code::normal,\n                beast::bind_front_handler(&Impl::onClose, shared_from_this()));\n        } else {\n            ws_tcp_->async_close(websocket::close_code::normal,\n                beast::bind_front_handler(&Impl::onClose, shared_from_this()));\n        }\n    }\n\n    void onClose(beast::error_code ec) {\n        if (ec) {\n            onError(ec, \"Close\");\n        }\n    }\n\nprivate:\n    net::io_context& ioc_;\n    ssl::context& ctx_;\n    Device& device_settings_;\n    std::shared_ptr<Logging> log_;\n    tcp::resolver resolver_;\n    std::optional<websocket::stream<beast::ssl_stream<beast::tcp_stream>>> ws_;\n    std::optional<websocket::stream<beast::tcp_stream>> ws_tcp_;\n    beast::flat_buffer buffer_;\n    std::string host_;\n    int socket_status_;\n};",
      "class WebOsClient {\npublic:\n    class Impl {\n    public:\n        Impl(net::io_context& ioc, ssl::context& ctx, Device& device_settings, std::shared_ptr<Logging> log)\n            : ioc_(ioc), ctx_(ctx), device_settings_(device_settings), log_(log),\n              resolver_(net::make_strand(ioc)), socket_status_(0) {}\n\n        void run() {\n            resolver_.async_resolve(device_settings_.host, device_settings_.port,\n                beast::bind_front_handler(&Impl::onResolve, shared_from_this()));\n        }\n\n        void onResolve(beast::error_code ec, tcp::resolver::results_type results) {\n            if (ec) return onError(ec, \"resolve\");\n            beast::get_lowest_layer(ws_ ? *ws_ : *ws_tcp_).expires_after(std::chrono::seconds(30));\n            beast::get_lowest_layer(ws_ ? *ws_ : *ws_tcp_).async_connect(\n                results, beast::bind_front_handler(&Impl::onConnect, shared_from_this()));\n        }\n\n        void onConnect(beast::error_code ec, tcp::resolver::results_type::endpoint_type) {\n            if (ec) return onError(ec, \"connect\");\n            if (ws_) {\n                ws_->next_layer().async_handshake(ssl::stream_base::client,\n                    beast::bind_front_handler(&Impl::onSSLhandshake, shared_from_this()));\n            } else {\n                ws_tcp_->async_handshake(device_settings_.host, \"/\", \n                    beast::bind_front_handler(&Impl::onWinsockHandshake, shared_from_this()));\n            }\n        }\n\n        void onSSLhandshake(beast::error_code ec) {\n            if (ec) return onError(ec, \"ssl_handshake\");\n            ws_->async_handshake(device_settings_.host, \"/\", \n                beast::bind_front_handler(&Impl::onWinsockHandshake, shared_from_this()));\n        }\n\n        void onWinsockHandshake(beast::error_code ec) {\n            if (ec) return onError(ec, \"ws_handshake\");\n            socket_status_ = 1;\n            read();\n        }\n\n        void send(std::string message, std::string type) {\n            if (socket_status_ != 1) return;\n            auto msg = std::make_shared<std::string>(std::move(message));\n            if (ws_) {\n                ws_->async_write(net::buffer(*msg), \n                    beast::bind_front_handler(&Impl::onWrite, shared_from_this(), msg));\n            } else {\n                ws_tcp_->async_write(net::buffer(*msg), \n                    beast::bind_front_handler(&Impl::onWrite, shared_from_this(), msg));\n            }\n        }\n\n        void onWrite(beast::error_code ec, std::size_t bytes_transferred, std::shared_ptr<std::string> msg) {\n            if (ec) return onError(ec, \"write\");\n        }\n\n        void read() {\n            if (ws_) {\n                ws_->async_read(buffer_, beast::bind_front_handler(&Impl::onRead, shared_from_this()));\n            } else {\n                ws_tcp_->async_read(buffer_, beast::bind_front_handler(&Impl::onRead, shared_from_this()));\n            }\n        }\n\n        void onRead(beast::error_code ec, std::size_t bytes_transferred) {\n            if (ec) return onError(ec, \"read\");\n            // Process the message in buffer_\n            buffer_.consume(bytes_transferred);\n            read();\n        }\n\n        void onError(beast::error_code& ec, std::string what) {\n            log_->error(what + \": \" + ec.message());\n            socket_status_ = 0;\n        }\n\n        void enqueueWork(Work& work) {\n            // Implementation for enqueueing work\n        }\n\n        void close() {\n            if (ws_) {\n                ws_->async_close(websocket::close_code::normal, \n                    beast::bind_front_handler(&Impl::onClose, shared_from_this()));\n            } else {\n                ws_tcp_->async_close(websocket::close_code::normal, \n                    beast::bind_front_handler(&Impl::onClose, shared_from_this()));\n            }\n        }\n\n        void onClose(beast::error_code ec) {\n            if (ec) return onError(ec, \"close\");\n            socket_status_ = 0;\n        }\n\n    private:\n        net::io_context& ioc_;\n        ssl::context& ctx_;\n        Device& device_settings_;\n        std::shared_ptr<Logging> log_;\n        tcp::resolver resolver_;\n        std::optional<websocket::stream<beast::ssl_stream<beast::tcp_stream>>> ws_;\n        std::optional<websocket::stream<beast::tcp_stream>> ws_tcp_;\n        beast::flat_buffer buffer_;\n        std::string host_;\n        int socket_status_;\n    };\n};"
    ],
    "match_count": 0,
    "pass@3": 0.0,
    "pass@5": 0.0
  },
  {
    "Task_id": 9,
    "Instruction": "Task Description: Implement a TCP client using Boost.Asio for asynchronous network communication, capable of connecting to a server, sending messages, and receiving responses.\n\nClass Description: The `chat_client` class encapsulates a TCP client that manages asynchronous network operations including connection establishment, message reading, and message writing.\n\nAttributes:\n- io_context_: boost::asio::io_context& - Reference to the I/O execution context for asynchronous operations.\n- socket_: tcp::socket - TCP socket for communication with the server.\n- read_msg_: chat_message - Buffer for storing the currently read message.\n- write_msgs_: chat_message_queue - Queue of messages waiting to be sent to the server.\n\nMethods:\n- Constructor: chat_client(boost::asio::io_context& io_context, const tcp::resolver::results_type& endpoints) -> None - Initializes the client with I/O context and server endpoints, then starts the connection process.\n- write: write(const chat_message& msg) -> None - Enqueues a message for asynchronous sending to the server.\n- close: close() -> None - Initiates socket closure to terminate the connection cleanly.\n- do_connect: do_connect(const tcp::resolver::results_type& endpoints) -> None - Asynchronously connects to the server using the provided endpoints.\n- do_read_header: do_read_header() -> None - Asynchronously reads the message header from the server.\n- do_read_body: do_read_body() -> None - Asynchronously reads the message body from the server after header is processed.\n- do_write: do_write() -> None - Asynchronously writes the next queued message to the server.",
    "Canonical_solution": "#include <boost/asio.hpp>\n#include <deque>\n#include \"chat_message.hpp\"\n\nusing boost::asio::ip::tcp;\ntypedef std::deque<chat_message> chat_message_queue;\n\nclass chat_client\n{\npublic:\n  chat_client(boost::asio::io_context& io_context,\n      const tcp::resolver::results_type& endpoints)\n    : io_context_(io_context),\n      socket_(io_context)\n  {\n    do_connect(endpoints);\n  }\n\n  void write(const chat_message& msg)\n  {\n    boost::asio::post(io_context_,\n        [this, msg]()\n        {\n          bool write_in_progress = !write_msgs_.empty();\n          write_msgs_.push_back(msg);\n          if (!write_in_progress)\n          {\n            do_write();\n          }\n        });\n  }\n\n  void close()\n  {\n    boost::asio::post(io_context_, [this]() { socket_.close(); });\n  }\n\nprivate:\n  void do_connect(const tcp::resolver::results_type& endpoints)\n  {\n    boost::asio::async_connect(socket_, endpoints,\n        [this](boost::system::error_code ec, tcp::endpoint)\n        {\n          if (!ec)\n          {\n            do_read_header();\n          }\n        });\n  }\n\n  void do_read_header()\n  {\n    boost::asio::async_read(socket_,\n        boost::asio::buffer(read_msg_.data(), chat_message::header_length),\n        [this](boost::system::error_code ec, std::size_t /*length*/)\n        {\n          if (!ec && read_msg_.decode_header())\n          {\n            do_read_body();\n          }\n          else\n          {\n            socket_.close();\n          }\n        });\n  }\n\n  void do_read_body()\n  {\n    boost::asio::async_read(socket_,\n        boost::asio::buffer(read_msg_.body(), read_msg_.body_length()),\n        [this](boost::system::error_code ec, std::size_t /*length*/)\n        {\n          if (!ec)\n          {\n            std::cout.write(read_msg_.body(), read_msg_.body_length());\n            std::cout << \"\\n\";\n            do_read_header();\n          }\n          else\n          {\n            socket_.close();\n          }\n        });\n  }\n\n  void do_write()\n  {\n    boost::asio::async_write(socket_,\n        boost::asio::buffer(write_msgs_.front().data(),\n          write_msgs_.front().length()),\n        [this](boost::system::error_code ec, std::size_t /*length*/)\n        {\n          if (!ec)\n          {\n            write_msgs_.pop_front();\n            if (!write_msgs_.empty())\n            {\n              do_write();\n            }\n          }\n          else\n          {\n            socket_.close();\n          }\n        });\n  }\n\nprivate:\n  boost::asio::io_context& io_context_;\n  tcp::socket socket_;\n  chat_message read_msg_;\n  chat_message_queue write_msgs_;\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 151,
    "matched_results": [
      "#include <boost/asio.hpp>\n#include <deque>\n#include <iostream>\n#include <thread>\n\nusing boost::asio::ip::tcp;\n\nclass chat_message {\npublic:\n    enum { header_length = 4 };\n    enum { max_body_length = 512 };\n\n    chat_message() : body_length_(0) {}\n\n    const char* data() const {\n        return data_;\n    }\n\n    char* data() {\n        return data_;\n    }\n\n    std::size_t length() const {\n        return header_length + body_length_;\n    }\n\n    const char* body() const {\n        return data_ + header_length;\n    }\n\n    char* body() {\n        return data_ + header_length;\n    }\n\n    std::size_t body_length() const {\n        return body_length_;\n    }\n\n    void body_length(std::size_t new_length) {\n        body_length_ = new_length;\n        if (body_length_ > max_body_length)\n            body_length_ = max_body_length;\n    }\n\n    bool decode_header() {\n        char header[header_length + 1] = \"\";\n        std::strncat(header, data_, header_length);\n        body_length_ = std::atoi(header);\n        if (body_length_ > max_body_length) {\n            body_length_ = 0;\n            return false;\n        }\n        return true;\n    }\n\n    void encode_header() {\n        char header[header_length + 1] = \"\";\n        std::sprintf(header, \"%4d\", static_cast<int>(body_length_));\n        std::memcpy(data_, header, header_length);\n    }\n\nprivate:\n    char data_[header_length + max_body_length];\n    std::size_t body_length_;\n};\n\ntypedef std::deque<chat_message> chat_message_queue;\n\nclass chat_client {\npublic:\n    chat_client(boost::asio::io_context& io_context, const tcp::resolver::results_type& endpoints)\n        : io_context_(io_context), socket_(io_context) {\n        do_connect(endpoints);\n    }\n\n    void write(const chat_message& msg) {\n        boost::asio::post(io_context_,\n            [this, msg]() {\n                bool write_in_progress = !write_msgs_.empty();\n                write_msgs_.push_back(msg);\n                if (!write_in_progress) {\n                    do_write();\n                }\n            });\n    }\n\n    void close() {\n        boost::asio::post(io_context_, [this]() { socket_.close(); });\n    }\n\nprivate:\n    void do_connect(const tcp::resolver::results_type& endpoints) {\n        boost::asio::async_connect(socket_, endpoints,\n            [this](boost::system::error_code ec, tcp::endpoint) {\n                if (!ec) {\n                    do_read_header();\n                }\n            });\n    }\n\n    void do_read_header() {\n        boost::asio::async_read(socket_,\n            boost::asio::buffer(read_msg_.data(), chat_message::header_length),\n            [this](boost::system::error_code ec, std::size_t /*length*/) {\n                if (!ec && read_msg_.decode_header()) {\n                    do_read_body();\n                } else {\n                    socket_.close();\n                }\n            });\n    }\n\n    void do_read_body() {\n        boost::asio::async_read(socket_,\n            boost::asio::buffer(read_msg_.body(), read_msg_.body_length()),\n            [this](boost::system::error_code ec, std::size_t /*length*/) {\n                if (!ec) {\n                    std::cout.write(read_msg_.body(), read_msg_.body_length());\n                    std::cout << \"\\n\";\n                    do_read_header();\n                } else {\n                    socket_.close();\n                }\n            });\n    }\n\n    void do_write() {\n        boost::asio::async_write(socket_,\n            boost::asio::buffer(write_msgs_.front().data(),\n                write_msgs_.front().length()),\n            [this](boost::system::error_code ec, std::size_t /*length*/) {\n                if (!ec) {\n                    write_msgs_.pop_front();\n                    if (!write_msgs_.empty()) {\n                        do_write();\n                    }\n                } else {\n                    socket_.close();\n                }\n            });\n    }\n\n    boost::asio::io_context& io_context_;\n    tcp::socket socket_;\n    chat_message read_msg_;\n    chat_message_queue write_msgs_;\n};",
      "#include <boost/asio.hpp>\n#include <deque>\n#include <iostream>\n#include <thread>\n#include \"chat_message.hpp\"\n\nusing boost::asio::ip::tcp;\n\nclass chat_client {\npublic:\n    chat_client(boost::asio::io_context& io_context, const tcp::resolver::results_type& endpoints)\n        : io_context_(io_context), socket_(io_context) {\n        do_connect(endpoints);\n    }\n\n    void write(const chat_message& msg) {\n        boost::asio::post(io_context_,\n            [this, msg]() {\n                bool write_in_progress = !write_msgs_.empty();\n                write_msgs_.push_back(msg);\n                if (!write_in_progress) {\n                    do_write();\n                }\n            });\n    }\n\n    void close() {\n        boost::asio::post(io_context_, [this]() { socket_.close(); });\n    }\n\nprivate:\n    void do_connect(const tcp::resolver::results_type& endpoints) {\n        boost::asio::async_connect(socket_, endpoints,\n            [this](boost::system::error_code ec, tcp::endpoint) {\n                if (!ec) {\n                    do_read_header();\n                }\n            });\n    }\n\n    void do_read_header() {\n        boost::asio::async_read(socket_,\n            boost::asio::buffer(read_msg_.data(), chat_message::header_length),\n            [this](boost::system::error_code ec, std::size_t /*length*/) {\n                if (!ec && read_msg_.decode_header()) {\n                    do_read_body();\n                } else {\n                    socket_.close();\n                }\n            });\n    }\n\n    void do_read_body() {\n        boost::asio::async_read(socket_,\n            boost::asio::buffer(read_msg_.body(), read_msg_.body_length()),\n            [this](boost::system::error_code ec, std::size_t /*length*/) {\n                if (!ec) {\n                    std::cout.write(read_msg_.body(), read_msg_.body_length());\n                    std::cout << \"\\n\";\n                    do_read_header();\n                } else {\n                    socket_.close();\n                }\n            });\n    }\n\n    void do_write() {\n        boost::asio::async_write(socket_,\n            boost::asio::buffer(write_msgs_.front().data(),\n                write_msgs_.front().length()),\n            [this](boost::system::error_code ec, std::size_t /*length*/) {\n                if (!ec) {\n                    write_msgs_.pop_front();\n                    if (!write_msgs_.empty()) {\n                        do_write();\n                    }\n                } else {\n                    socket_.close();\n                }\n            });\n    }\n\nprivate:\n    boost::asio::io_context& io_context_;\n    tcp::socket socket_;\n    chat_message read_msg_;\n    std::deque<chat_message> write_msgs_;\n};",
      "#include <boost/asio.hpp>\n#include <deque>\n#include <iostream>\n\nusing boost::asio::ip::tcp;\n\nclass chat_message {\npublic:\n    enum { header_length = 4 };\n    enum { max_body_length = 512 };\n\n    chat_message() : body_length_(0) {}\n\n    const char* data() const {\n        return data_;\n    }\n\n    char* data() {\n        return data_;\n    }\n\n    std::size_t length() const {\n        return header_length + body_length_;\n    }\n\n    const char* body() const {\n        return data_ + header_length;\n    }\n\n    char* body() {\n        return data_ + header_length;\n    }\n\n    std::size_t body_length() const {\n        return body_length_;\n    }\n\n    void body_length(std::size_t new_length) {\n        body_length_ = new_length;\n        if (body_length_ > max_body_length)\n            body_length_ = max_body_length;\n    }\n\n    bool decode_header() {\n        char header[header_length + 1] = \"\";\n        std::strncat(header, data_, header_length);\n        body_length_ = std::atoi(header);\n        if (body_length_ > max_body_length) {\n            body_length_ = 0;\n            return false;\n        }\n        return true;\n    }\n\n    void encode_header() {\n        char header[header_length + 1] = \"\";\n        std::sprintf(header, \"%4d\", static_cast<int>(body_length_));\n        std::memcpy(data_, header, header_length);\n    }\n\nprivate:\n    char data_[header_length + max_body_length];\n    std::size_t body_length_;\n};\n\ntypedef std::deque<chat_message> chat_message_queue;\n\nclass chat_client {\npublic:\n    chat_client(boost::asio::io_context& io_context, const tcp::resolver::results_type& endpoints)\n        : io_context_(io_context), socket_(io_context) {\n        do_connect(endpoints);\n    }\n\n    void write(const chat_message& msg) {\n        boost::asio::post(io_context_,\n            [this, msg]() {\n                bool write_in_progress = !write_msgs_.empty();\n                write_msgs_.push_back(msg);\n                if (!write_in_progress) {\n                    do_write();\n                }\n            });\n    }\n\n    void close() {\n        boost::asio::post(io_context_, [this]() { socket_.close(); });\n    }\n\nprivate:\n    void do_connect(const tcp::resolver::results_type& endpoints) {\n        boost::asio::async_connect(socket_, endpoints,\n            [this](boost::system::error_code ec, tcp::endpoint) {\n                if (!ec) {\n                    do_read_header();\n                }\n            });\n    }\n\n    void do_read_header() {\n        boost::asio::async_read(socket_,\n            boost::asio::buffer(read_msg_.data(), chat_message::header_length),\n            [this](boost::system::error_code ec, std::size_t /*length*/) {\n                if (!ec && read_msg_.decode_header()) {\n                    do_read_body();\n                } else {\n                    socket_.close();\n                }\n            });\n    }\n\n    void do_read_body() {\n        boost::asio::async_read(socket_,\n            boost::asio::buffer(read_msg_.body(), read_msg_.body_length()),\n            [this](boost::system::error_code ec, std::size_t /*length*/) {\n                if (!ec) {\n                    std::cout.write(read_msg_.body(), read_msg_.body_length());\n                    std::cout << \"\\n\";\n                    do_read_header();\n                } else {\n                    socket_.close();\n                }\n            });\n    }\n\n    void do_write() {\n        boost::asio::async_write(socket_,\n            boost::asio::buffer(write_msgs_.front().data(),\n                write_msgs_.front().length()),\n            [this](boost::system::error_code ec, std::size_t /*length*/) {\n                if (!ec) {\n                    write_msgs_.pop_front();\n                    if (!write_msgs_.empty()) {\n                        do_write();\n                    }\n                } else {\n                    socket_.close();\n                }\n            });\n    }\n\n    boost::asio::io_context& io_context_;\n    tcp::socket socket_;\n    chat_message read_msg_;\n    chat_message_queue write_msgs_;\n};",
      "#include <boost/asio.hpp>\n#include <deque>\n#include <iostream>\n\nusing boost::asio::ip::tcp;\n\nclass chat_message {\npublic:\n    enum { header_length = 4 };\n    enum { max_body_length = 512 };\n\n    chat_message() : body_length_(0) {}\n\n    const char* data() const {\n        return data_;\n    }\n\n    char* data() {\n        return data_;\n    }\n\n    std::size_t length() const {\n        return header_length + body_length_;\n    }\n\n    const char* body() const {\n        return data_ + header_length;\n    }\n\n    char* body() {\n        return data_ + header_length;\n    }\n\n    std::size_t body_length() const {\n        return body_length_;\n    }\n\n    void body_length(std::size_t new_length) {\n        body_length_ = new_length;\n        if (body_length_ > max_body_length)\n            body_length_ = max_body_length;\n    }\n\n    bool decode_header() {\n        char header[header_length + 1] = \"\";\n        std::strncat(header, data_, header_length);\n        body_length_ = std::atoi(header);\n        if (body_length_ > max_body_length) {\n            body_length_ = 0;\n            return false;\n        }\n        return true;\n    }\n\n    void encode_header() {\n        char header[header_length + 1] = \"\";\n        std::sprintf(header, \"%4d\", static_cast<int>(body_length_));\n        std::memcpy(data_, header, header_length);\n    }\n\nprivate:\n    char data_[header_length + max_body_length];\n    std::size_t body_length_;\n};\n\ntypedef std::deque<chat_message> chat_message_queue;\n\nclass chat_client {\npublic:\n    chat_client(boost::asio::io_context& io_context, const tcp::resolver::results_type& endpoints)\n        : io_context_(io_context), socket_(io_context) {\n        do_connect(endpoints);\n    }\n\n    void write(const chat_message& msg) {\n        boost::asio::post(io_context_,\n            [this, msg]() {\n                bool write_in_progress = !write_msgs_.empty();\n                write_msgs_.push_back(msg);\n                if (!write_in_progress) {\n                    do_write();\n                }\n            });\n    }\n\n    void close() {\n        boost::asio::post(io_context_, [this]() { socket_.close(); });\n    }\n\nprivate:\n    void do_connect(const tcp::resolver::results_type& endpoints) {\n        boost::asio::async_connect(socket_, endpoints,\n            [this](std::error_code ec, tcp::endpoint) {\n                if (!ec) {\n                    do_read_header();\n                }\n            });\n    }\n\n    void do_read_header() {\n        boost::asio::async_read(socket_,\n            boost::asio::buffer(read_msg_.data(), chat_message::header_length),\n            [this](std::error_code ec, std::size_t /*length*/) {\n                if (!ec && read_msg_.decode_header()) {\n                    do_read_body();\n                } else {\n                    socket_.close();\n                }\n            });\n    }\n\n    void do_read_body() {\n        boost::asio::async_read(socket_,\n            boost::asio::buffer(read_msg_.body(), read_msg_.body_length()),\n            [this](std::error_code ec, std::size_t /*length*/) {\n                if (!ec) {\n                    std::cout.write(read_msg_.body(), read_msg_.body_length());\n                    std::cout << \"\\n\";\n                    do_read_header();\n                } else {\n                    socket_.close();\n                }\n            });\n    }\n\n    void do_write() {\n        boost::asio::async_write(socket_,\n            boost::asio::buffer(write_msgs_.front().data(),\n                write_msgs_.front().length()),\n            [this](std::error_code ec, std::size_t /*length*/) {\n                if (!ec) {\n                    write_msgs_.pop_front();\n                    if (!write_msgs_.empty()) {\n                        do_write();\n                    }\n                } else {\n                    socket_.close();\n                }\n            });\n    }\n\nprivate:\n    boost::asio::io_context& io_context_;\n    tcp::socket socket_;\n    chat_message read_msg_;\n    chat_message_queue write_msgs_;\n};",
      "#include <boost/asio.hpp>\n#include <deque>\n#include <iostream>\n\nusing boost::asio::ip::tcp;\n\nclass chat_message {\npublic:\n  enum { header_length = 4 };\n  enum { max_body_length = 512 };\n\n  chat_message() : body_length_(0) {}\n\n  const char* data() const {\n    return data_;\n  }\n\n  char* data() {\n    return data_;\n  }\n\n  std::size_t length() const {\n    return header_length + body_length_;\n  }\n\n  const char* body() const {\n    return data_ + header_length;\n  }\n\n  char* body() {\n    return data_ + header_length;\n  }\n\n  std::size_t body_length() const {\n    return body_length_;\n  }\n\n  void body_length(std::size_t new_length) {\n    body_length_ = new_length;\n    if (body_length_ > max_body_length)\n      body_length_ = max_body_length;\n  }\n\n  bool decode_header() {\n    char header[header_length + 1] = \"\";\n    std::strncat(header, data_, header_length);\n    body_length_ = std::atoi(header);\n    if (body_length_ > max_body_length) {\n      body_length_ = 0;\n      return false;\n    }\n    return true;\n  }\n\n  void encode_header() {\n    char header[header_length + 1] = \"\";\n    std::sprintf(header, \"%4d\", static_cast<int>(body_length_));\n    std::memcpy(data_, header, header_length);\n  }\n\nprivate:\n  char data_[header_length + max_body_length];\n  std::size_t body_length_;\n};\n\ntypedef std::deque<chat_message> chat_message_queue;\n\nclass chat_client {\npublic:\n  chat_client(boost::asio::io_context& io_context, const tcp::resolver::results_type& endpoints)\n    : io_context_(io_context), socket_(io_context) {\n    do_connect(endpoints);\n  }\n\n  void write(const chat_message& msg) {\n    boost::asio::post(io_context_,\n      [this, msg]() {\n        bool write_in_progress = !write_msgs_.empty();\n        write_msgs_.push_back(msg);\n        if (!write_in_progress) {\n          do_write();\n        }\n      });\n  }\n\n  void close() {\n    boost::asio::post(io_context_, [this]() { socket_.close(); });\n  }\n\nprivate:\n  void do_connect(const tcp::resolver::results_type& endpoints) {\n    boost::asio::async_connect(socket_, endpoints,\n      [this](boost::system::error_code ec, tcp::endpoint) {\n        if (!ec) {\n          do_read_header();\n        }\n      });\n  }\n\n  void do_read_header() {\n    boost::asio::async_read(socket_,\n      boost::asio::buffer(read_msg_.data(), chat_message::header_length),\n      [this](boost::system::error_code ec, std::size_t /*length*/) {\n        if (!ec && read_msg_.decode_header()) {\n          do_read_body();\n        } else {\n          socket_.close();\n        }\n      });\n  }\n\n  void do_read_body() {\n    boost::asio::async_read(socket_,\n      boost::asio::buffer(read_msg_.body(), read_msg_.body_length()),\n      [this](boost::system::error_code ec, std::size_t /*length*/) {\n        if (!ec) {\n          std::cout.write(read_msg_.body(), read_msg_.body_length());\n          std::cout << \"\\n\";\n          do_read_header();\n        } else {\n          socket_.close();\n        }\n      });\n  }\n\n  void do_write() {\n    boost::asio::async_write(socket_,\n      boost::asio::buffer(write_msgs_.front().data(),\n        write_msgs_.front().length()),\n      [this](boost::system::error_code ec, std::size_t /*length*/) {\n        if (!ec) {\n          write_msgs_.pop_front();\n          if (!write_msgs_.empty()) {\n            do_write();\n          }\n        } else {\n          socket_.close();\n        }\n      });\n  }\n\n  boost::asio::io_context& io_context_;\n  tcp::socket socket_;\n  chat_message read_msg_;\n  chat_message_queue write_msgs_;\n};",
      "#include <boost/asio.hpp>\n#include <deque>\n#include <iostream>\n\nusing boost::asio::ip::tcp;\n\nclass chat_message\n{\npublic:\n    enum { header_length = 4 };\n    enum { max_body_length = 512 };\n\n    chat_message() : body_length_(0) {}\n\n    const char* data() const { return data_; }\n    char* data() { return data_; }\n    std::size_t length() const { return header_length + body_length_; }\n\n    const char* body() const { return data_ + header_length; }\n    char* body() { return data_ + header_length; }\n    std::size_t body_length() const { return body_length_; }\n    void body_length(std::size_t new_length) { body_length_ = new_length; }\n\n    bool decode_header()\n    {\n        char header[header_length + 1] = \"\";\n        std::strncat(header, data_, header_length);\n        body_length_ = std::atoi(header);\n        if (body_length_ > max_body_length)\n        {\n            body_length_ = 0;\n            return false;\n        }\n        return true;\n    }\n\n    void encode_header()\n    {\n        char header[header_length + 1] = \"\";\n        std::sprintf(header, \"%4d\", static_cast<int>(body_length_));\n        std::memcpy(data_, header, header_length);\n    }\n\nprivate:\n    char data_[header_length + max_body_length];\n    std::size_t body_length_;\n};\n\ntypedef std::deque<chat_message> chat_message_queue;\n\nclass chat_client\n{\npublic:\n    chat_client(boost::asio::io_context& io_context, const tcp::resolver::results_type& endpoints)\n        : io_context_(io_context), socket_(io_context)\n    {\n        do_connect(endpoints);\n    }\n\n    void write(const chat_message& msg)\n    {\n        boost::asio::post(io_context_,\n            [this, msg]()\n            {\n                bool write_in_progress = !write_msgs_.empty();\n                write_msgs_.push_back(msg);\n                if (!write_in_progress)\n                {\n                    do_write();\n                }\n            });\n    }\n\n    void close()\n    {\n        boost::asio::post(io_context_, [this]() { socket_.close(); });\n    }\n\nprivate:\n    void do_connect(const tcp::resolver::results_type& endpoints)\n    {\n        boost::asio::async_connect(socket_, endpoints,\n            [this](boost::system::error_code ec, tcp::endpoint)\n            {\n                if (!ec)\n                {\n                    do_read_header();\n                }\n            });\n    }\n\n    void do_read_header()\n    {\n        boost::asio::async_read(socket_,\n            boost::asio::buffer(read_msg_.data(), chat_message::header_length),\n            [this](boost::system::error_code ec, std::size_t /*length*/)\n            {\n                if (!ec && read_msg_.decode_header())\n                {\n                    do_read_body();\n                }\n                else\n                {\n                    socket_.close();\n                }\n            });\n    }\n\n    void do_read_body()\n    {\n        boost::asio::async_read(socket_,\n            boost::asio::buffer(read_msg_.body(), read_msg_.body_length()),\n            [this](boost::system::error_code ec, std::size_t /*length*/)\n            {\n                if (!ec)\n                {\n                    std::cout.write(read_msg_.body(), read_msg_.body_length());\n                    std::cout << \"\\n\";\n                    do_read_header();\n                }\n                else\n                {\n                    socket_.close();\n                }\n            });\n    }\n\n    void do_write()\n    {\n        boost::asio::async_write(socket_,\n            boost::asio::buffer(write_msgs_.front().data(),\n                write_msgs_.front().length()),\n            [this](boost::system::error_code ec, std::size_t /*length*/)\n            {\n                if (!ec)\n                {\n                    write_msgs_.pop_front();\n                    if (!write_msgs_.empty())\n                    {\n                        do_write();\n                    }\n                }\n                else\n                {\n                    socket_.close();\n                }\n            });\n    }\n\nprivate:\n    boost::asio::io_context& io_context_;\n    tcp::socket socket_;\n    chat_message read_msg_;\n    chat_message_queue write_msgs_;\n};",
      "#include <boost/asio.hpp>\n#include <deque>\n#include <iostream>\n#include <thread>\n\nusing boost::asio::ip::tcp;\n\nclass chat_message {\npublic:\n    enum { header_length = 4 };\n    enum { max_body_length = 512 };\n\n    chat_message() : body_length_(0) {}\n\n    const char* data() const { return data_; }\n    char* data() { return data_; }\n    std::size_t length() const { return header_length + body_length_; }\n\n    const char* body() const { return data_ + header_length; }\n    char* body() { return data_ + header_length; }\n    std::size_t body_length() const { return body_length_; }\n    void body_length(std::size_t new_length) { body_length_ = new_length; }\n\n    bool decode_header() {\n        char header[header_length + 1] = \"\";\n        std::strncat(header, data_, header_length);\n        body_length_ = std::atoi(header);\n        if (body_length_ > max_body_length) {\n            body_length_ = 0;\n            return false;\n        }\n        return true;\n    }\n\n    void encode_header() {\n        char header[header_length + 1] = \"\";\n        std::sprintf(header, \"%4d\", static_cast<int>(body_length_));\n        std::memcpy(data_, header, header_length);\n    }\n\nprivate:\n    char data_[header_length + max_body_length];\n    std::size_t body_length_;\n};\n\ntypedef std::deque<chat_message> chat_message_queue;\n\nclass chat_client {\npublic:\n    chat_client(boost::asio::io_context& io_context, const tcp::resolver::results_type& endpoints)\n        : io_context_(io_context), socket_(io_context) {\n        do_connect(endpoints);\n    }\n\n    void write(const chat_message& msg) {\n        boost::asio::post(io_context_,\n            [this, msg]() {\n                bool write_in_progress = !write_msgs_.empty();\n                write_msgs_.push_back(msg);\n                if (!write_in_progress) {\n                    do_write();\n                }\n            });\n    }\n\n    void close() {\n        boost::asio::post(io_context_, [this]() { socket_.close(); });\n    }\n\nprivate:\n    void do_connect(const tcp::resolver::results_type& endpoints) {\n        boost::asio::async_connect(socket_, endpoints,\n            [this](boost::system::error_code ec, tcp::endpoint) {\n                if (!ec) {\n                    do_read_header();\n                }\n            });\n    }\n\n    void do_read_header() {\n        boost::asio::async_read(socket_,\n            boost::asio::buffer(read_msg_.data(), chat_message::header_length),\n            [this](boost::system::error_code ec, std::size_t /*length*/) {\n                if (!ec && read_msg_.decode_header()) {\n                    do_read_body();\n                } else {\n                    socket_.close();\n                }\n            });\n    }\n\n    void do_read_body() {\n        boost::asio::async_read(socket_,\n            boost::asio::buffer(read_msg_.body(), read_msg_.body_length()),\n            [this](boost::system::error_code ec, std::size_t /*length*/) {\n                if (!ec) {\n                    std::cout.write(read_msg_.body(), read_msg_.body_length());\n                    std::cout << \"\\n\";\n                    do_read_header();\n                } else {\n                    socket_.close();\n                }\n            });\n    }\n\n    void do_write() {\n        boost::asio::async_write(socket_,\n            boost::asio::buffer(write_msgs_.front().data(),\n                write_msgs_.front().length()),\n            [this](boost::system::error_code ec, std::size_t /*length*/) {\n                if (!ec) {\n                    write_msgs_.pop_front();\n                    if (!write_msgs_.empty()) {\n                        do_write();\n                    }\n                } else {\n                    socket_.close();\n                }\n            });\n    }\n\n    boost::asio::io_context& io_context_;\n    tcp::socket socket_;\n    chat_message read_msg_;\n    chat_message_queue write_msgs_;\n};"
    ],
    "unmatched_results": [
      "class chat_client\n{\npublic:\n  chat_client(boost::asio::io_context& io_context, const tcp::resolver::results_type& endpoints)\n    : io_context_(io_context), socket_(io_context)\n  {\n    do_connect(endpoints);\n  }\n\n  void write(const chat_message& msg)\n  {\n    boost::asio::post(io_context_,\n      [this, msg]()\n      {\n        bool write_in_progress = !write_msgs_.empty();\n        write_msgs_.push_back(msg);\n        if (!write_in_progress)\n        {\n          do_write();\n        }\n      });\n  }\n\n  void close()\n  {\n    boost::asio::post(io_context_, [this]() { socket_.close(); });\n  }\n\nprivate:\n  void do_connect(const tcp::resolver::results_type& endpoints)\n  {\n    boost::asio::async_connect(socket_, endpoints,\n      [this](boost::system::error_code ec, tcp::endpoint)\n      {\n        if (!ec)\n        {\n          do_read_header();\n        }\n      });\n  }\n\n  void do_read_header()\n  {\n    boost::asio::async_read(socket_,\n      boost::asio::buffer(read_msg_.data(), chat_message::header_length),\n      [this](boost::system::error_code ec, std::size_t /*length*/)\n      {\n        if (!ec && read_msg_.decode_header())\n        {\n          do_read_body();\n        }\n        else\n        {\n          socket_.close();\n        }\n      });\n  }\n\n  void do_read_body()\n  {\n    boost::asio::async_read(socket_,\n      boost::asio::buffer(read_msg_.body(), read_msg_.body_length()),\n      [this](boost::system::error_code ec, std::size_t /*length*/)\n      {\n        if (!ec)\n        {\n          std::cout.write(read_msg_.body(), read_msg_.body_length());\n          std::cout << \"\\n\";\n          do_read_header();\n        }\n        else\n        {\n          socket_.close();\n        }\n      });\n  }\n\n  void do_write()\n  {\n    boost::asio::async_write(socket_,\n      boost::asio::buffer(write_msgs_.front().data(),\n        write_msgs_.front().length()),\n      [this](boost::system::error_code ec, std::size_t /*length*/)\n      {\n        if (!ec)\n        {\n          write_msgs_.pop_front();\n          if (!write_msgs_.empty())\n          {\n            do_write();\n          }\n        }\n        else\n        {\n          socket_.close();\n        }\n      });\n  }\n\nprivate:\n  boost::asio::io_context& io_context_;\n  tcp::socket socket_;\n  chat_message read_msg_;\n  chat_message_queue write_msgs_;\n};",
      "class chat_client\n{\npublic:\n  chat_client(boost::asio::io_context& io_context, const tcp::resolver::results_type& endpoints)\n    : io_context_(io_context), socket_(io_context)\n  {\n    do_connect(endpoints);\n  }\n\n  void write(const chat_message& msg)\n  {\n    boost::asio::post(io_context_,\n      [this, msg]()\n      {\n        bool write_in_progress = !write_msgs_.empty();\n        write_msgs_.push_back(msg);\n        if (!write_in_progress)\n        {\n          do_write();\n        }\n      });\n  }\n\n  void close()\n  {\n    boost::asio::post(io_context_, [this]() { socket_.close(); });\n  }\n\nprivate:\n  void do_connect(const tcp::resolver::results_type& endpoints)\n  {\n    boost::asio::async_connect(socket_, endpoints,\n      [this](boost::system::error_code ec, tcp::endpoint)\n      {\n        if (!ec)\n        {\n          do_read_header();\n        }\n      });\n  }\n\n  void do_read_header()\n  {\n    boost::asio::async_read(socket_,\n      boost::asio::buffer(read_msg_.data(), chat_message::header_length),\n      [this](boost::system::error_code ec, std::size_t /*length*/)\n      {\n        if (!ec && read_msg_.decode_header())\n        {\n          do_read_body();\n        }\n        else\n        {\n          socket_.close();\n        }\n      });\n  }\n\n  void do_read_body()\n  {\n    boost::asio::async_read(socket_,\n      boost::asio::buffer(read_msg_.body(), read_msg_.body_length()),\n      [this](boost::system::error_code ec, std::size_t /*length*/)\n      {\n        if (!ec)\n        {\n          std::cout.write(read_msg_.body(), read_msg_.body_length());\n          std::cout << \"\\n\";\n          do_read_header();\n        }\n        else\n        {\n          socket_.close();\n        }\n      });\n  }\n\n  void do_write()\n  {\n    boost::asio::async_write(socket_,\n      boost::asio::buffer(write_msgs_.front().data(),\n        write_msgs_.front().length()),\n      [this](boost::system::error_code ec, std::size_t /*length*/)\n      {\n        if (!ec)\n        {\n          write_msgs_.pop_front();\n          if (!write_msgs_.empty())\n          {\n            do_write();\n          }\n        }\n        else\n        {\n          socket_.close();\n        }\n      });\n  }\n\nprivate:\n  boost::asio::io_context& io_context_;\n  tcp::socket socket_;\n  chat_message read_msg_;\n  chat_message_queue write_msgs_;\n};",
      "class chat_client\n{\npublic:\n  chat_client(boost::asio::io_context& io_context, const tcp::resolver::results_type& endpoints)\n    : io_context_(io_context),\n      socket_(io_context)\n  {\n    do_connect(endpoints);\n  }\n\n  void write(const chat_message& msg)\n  {\n    boost::asio::post(io_context_,\n        [this, msg]()\n        {\n          bool write_in_progress = !write_msgs_.empty();\n          write_msgs_.push_back(msg);\n          if (!write_in_progress)\n          {\n            do_write();\n          }\n        });\n  }\n\n  void close()\n  {\n    boost::asio::post(io_context_, [this]() { socket_.close(); });\n  }\n\nprivate:\n  void do_connect(const tcp::resolver::results_type& endpoints)\n  {\n    boost::asio::async_connect(socket_, endpoints,\n        [this](boost::system::error_code ec, tcp::endpoint)\n        {\n          if (!ec)\n          {\n            do_read_header();\n          }\n        });\n  }\n\n  void do_read_header()\n  {\n    boost::asio::async_read(socket_,\n        boost::asio::buffer(read_msg_.data(), chat_message::header_length),\n        [this](boost::system::error_code ec, std::size_t /*length*/)\n        {\n          if (!ec && read_msg_.decode_header())\n          {\n            do_read_body();\n          }\n          else\n          {\n            socket_.close();\n          }\n        });\n  }\n\n  void do_read_body()\n  {\n    boost::asio::async_read(socket_,\n        boost::asio::buffer(read_msg_.body(), read_msg_.body_length()),\n        [this](boost::system::error_code ec, std::size_t /*length*/)\n        {\n          if (!ec)\n          {\n            std::cout.write(read_msg_.body(), read_msg_.body_length());\n            std::cout << \"\\n\";\n            do_read_header();\n          }\n          else\n          {\n            socket_.close();\n          }\n        });\n  }\n\n  void do_write()\n  {\n    boost::asio::async_write(socket_,\n        boost::asio::buffer(write_msgs_.front().data(),\n          write_msgs_.front().length()),\n        [this](boost::system::error_code ec, std::size_t /*length*/)\n        {\n          if (!ec)\n          {\n            write_msgs_.pop_front();\n            if (!write_msgs_.empty())\n            {\n              do_write();\n            }\n          }\n          else\n          {\n            socket_.close();\n          }\n        });\n  }\n\nprivate:\n  boost::asio::io_context& io_context_;\n  tcp::socket socket_;\n  chat_message read_msg_;\n  chat_message_queue write_msgs_;\n};"
    ],
    "match_count": 7,
    "pass@3": 0.9916666666666667,
    "pass@5": 1.0
  }
]