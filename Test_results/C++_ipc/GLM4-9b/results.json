[
  {
    "Task_id": 1,
    "Instruction": "Task Description: Create a function that performs HTTP requests using the cpp-httplib library, supporting multiple HTTP methods (GET, PUT, DELETE, POST) and handling JSON request/response data.\n\nFunction Description: The function `APIRequest` performs HTTP requests to a specified URL using the given HTTP method. It supports sending JSON data in the request and parsing JSON data from the response. The function checks the HTTP status code and only processes the response body if the status indicates success (2xx).\n\nInput:\n- `method` (std::string): The HTTP method to use (e.g., \"GET\", \"PUT\", \"DELETE\", \"POST\").\n- `location` (std::string): The server address (e.g., \"example.com\").\n- `URI` (std::string): The URI path for the request (e.g., \"/api/data\").\n- `request_data` (json*, optional): Pointer to a JSON object containing the data to send with the request (used for PUT requests).\n- `response_data` (json*, optional): Pointer to a JSON object where the response data will be stored if the request is successful.\n\nOutput:\n- Returns a `long` value representing the HTTP status code of the response.\n- If the request is successful (status code 2xx) and `response_data` is provided, the response body is parsed into the `response_data` JSON object.",
    "Canonical_solution": "#include \"httplib.h\"\n#include <string>\n#include \"json.hpp\"\nusing json = nlohmann::json;\n\nlong APIRequest(std::string method, std::string location, std::string URI, json* request_data = nullptr, json* response_data = nullptr)\n{\n    const std::string url(\"http://\" + location);\n    httplib::Client client(url.c_str());\n    int             status  = 0;\n    std::string     body    = \"\";\n\n    if(method == \"GET\")\n    {\n        httplib::Result result = client.Get(URI.c_str());\n        if(httplib::Error::Success == result.error())\n        {\n            status  = result->status;\n            body    = result->body;\n        }\n    }\n    else if(method == \"PUT\")\n    {\n        if(request_data)\n        {\n            httplib::Result result = client.Put(URI.c_str(), request_data->dump(), \"application/json\");\n            if(httplib::Error::Success == result.error())\n            {\n                status  = result->status;\n                body    = result->body;\n            }\n        }\n        else\n        {\n            httplib::Result result = client.Put(URI.c_str());\n            if(httplib::Error::Success == result.error())\n            {\n                status  = result->status;\n                body    = result->body;\n            }\n        }\n    }\n    else if(method == \"DELETE\")\n    {\n        httplib::Result result = client.Delete(URI.c_str());\n        if(httplib::Error::Success == result.error())\n        {\n            status  = result->status;\n            body    = result->body;\n        }\n    }\n    else if(method == \"POST\")\n    {\n        httplib::Result result = client.Post(URI.c_str());\n        if(httplib::Error::Success == result.error())\n        {\n            status  = result->status;\n            body    = result->body;\n        }\n    }\n\n    if((status / 100) == 2)\n    {\n        if(response_data)\n        {\n            *response_data = json::parse(body);\n        }\n    }\n\n    return status;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 147,
    "matched_results": [],
    "unmatched_results": [
      "```cpp\n#include <cpp-httplib/httplib.h>\n#include <nlohmann/json.hpp>\n\nusing json = nlohmann::json;\n\nlong APIRequest(const std::string& method, const std::string& location, const std::string& URI, json* request_data = nullptr, json* response_data = nullptr) {\n    httplib::Client client(location);\n    httplib::Request req;\n    httplib::Response resp;\n\n    req.method = method;\n    req.path = URI;\n\n    if (request_data) {\n        req.set_header(\"Content-Type\", \"application/json\");\n        req.body = request_data->dump();\n    }\n\n    client.Request(req, resp);\n\n    if (resp.status >= 200 && resp.status < 300) {\n        if (response_data) {\n            *response_data = json::parse(resp.body);\n        }\n    }\n\n    return resp.status;\n}\n```",
      "```cpp\n#include <cpp-httplib/httplib.h>\n#include <nlohmann/json.hpp>\n\nusing json = nlohmann::json;\n\nlong APIRequest(const std::string& method, const std::string& location, const std::string& URI, json* request_data = nullptr, json* response_data = nullptr) {\n    httplib::Client cli(location);\n    httplib::Request req;\n    httplib::Response resp;\n\n    req.method = method;\n    req.target = URI;\n\n    if (request_data) {\n        auto content = request_data->dump();\n        req.set_header(\"Content-Type\", \"application/json\");\n        req.body = content;\n    }\n\n    auto res = cli.Request(req, resp);\n\n    if (res && resp.status >= 200 && resp.status < 300) {\n        if (response_data) {\n            *response_data = json::parse(resp.body);\n        }\n        return resp.status;\n    }\n\n    return resp.status;\n}\n```",
      "```cpp\n#include <cpp-httplib/httplib.h>\n#include <nlohmann/json.hpp>\n\nusing json = nlohmann::json;\n\nlong APIRequest(const std::string& method, const std::string& location, const std::string& URI, json* request_data = nullptr, json* response_data = nullptr) {\n    httplib::Client client(location);\n    httplib::Request req;\n    httplib::Response resp;\n\n    req.method = method;\n    req.path = URI;\n\n    if (request_data != nullptr) {\n        std::string body = request_data->dump();\n        req.set_header(\"Content-Type\", \"application/json\");\n        req.body = body;\n    }\n\n    client.Request(req, resp);\n\n    if (resp.status >= 200 && resp.status < 300) {\n        if (response_data != nullptr) {\n            *response_data = json::parse(resp.body);\n        }\n    }\n\n    return resp.status;\n}\n```",
      "```cpp\n#include <cpp-httplib/httplib.h>\n#include <nlohmann/json.hpp>\n\nusing json = nlohmann::json;\n\nlong APIRequest(const std::string& method, const std::string& location, const std::string& URI, json* request_data = nullptr, json* response_data = nullptr) {\n    httplib::Client cli(location);\n    httplib::Request req;\n    httplib::Response res;\n\n    req.method = method;\n    req.target = URI;\n\n    if (request_data) {\n        req.body = request_data->dump();\n        req.headers.emplace_back(\"Content-Type\", \"application/json\");\n    }\n\n    auto status = cli.Request(req, res);\n\n    if (status == 200 || status == 201 || status == 204) {\n        if (response_data) {\n            *response_data = json::parse(res.body);\n        }\n    }\n\n    return status;\n}\n```",
      "```cpp\n#include <cpp-httplib/httplib.h>\n#include <nlohmann/json.hpp>\n\nusing json = nlohmann::json;\n\nlong APIRequest(const std::string& method, const std::string& location, const std::string& URI, json* request_data = nullptr, json* response_data = nullptr) {\n    httplib::Client cli(location);\n    httplib::Request req;\n    httplib::Response res;\n\n    req.method = method;\n    req.target = URI;\n\n    if (request_data != nullptr) {\n        std::string body = request_data->dump();\n        req.set_header(\"Content-Type\", \"application/json\");\n        req.body = body;\n    }\n\n    auto res_func = [&](const httplib::Response& resp) {\n        if (resp.status >= 200 && resp.status < 300) {\n            if (response_data != nullptr) {\n                *response_data = json::parse(resp.body);\n            }\n        }\n    };\n\n    if (method == \"GET\") {\n        cli.Get(URI, res_func);\n    } else if (method == \"PUT\") {\n        cli.Put(URI, req, res_func);\n    } else if (method == \"DELETE\") {\n        cli.Delete(URI, res_func);\n    } else if (method == \"POST\") {\n        cli.Post(URI, req, res_func);\n    }\n\n    return res.status;\n}\n```",
      "```cpp\n#include <cpp-httplib/httplib.h>\n#include <nlohmann/json.hpp>\n\nusing json = nlohmann::json;\n\nlong APIRequest(const std::string& method, const std::string& location, const std::string& URI, json* request_data = nullptr, json* response_data = nullptr) {\n    httplib::Client cli(location);\n    httplib::Request req;\n    httplib::Response resp;\n\n    req.method = method;\n    req.path = URI;\n\n    if (request_data) {\n        req.set_header(\"Content-Type\", \"application/json\");\n        req.body = request_data->dump();\n    }\n\n    auto res = cli.Request(req, resp);\n\n    if (res && resp.status >= 200 && resp.status < 300) {\n        if (response_data) {\n            *response_data = json::parse(resp.body);\n        }\n    }\n\n    return resp.status;\n}\n```",
      "```cpp\n#include <cpp-httplib/httplib.h>\n#include <nlohmann/json.hpp>\n\nusing json = nlohmann::json;\n\nlong APIRequest(const std::string& method, const std::string& location, const std::string& URI, json* request_data = nullptr, json* response_data = nullptr) {\n    httplib::Client cli(location);\n    httplib::Request req;\n    httplib::Response resp;\n\n    req.method = method;\n    req.path = URI;\n\n    if (request_data) {\n        req.set_header(\"Content-Type\", \"application/json\");\n        req.body = request_data->dump();\n    }\n\n    auto res = cli.Request(req, resp);\n\n    if (res && resp.status >= 200 && resp.status < 300) {\n        if (response_data) {\n            *response_data = json::parse(resp.body);\n        }\n        return resp.status;\n    }\n\n    return -1;\n}\n```",
      "```cpp\n#include <cpp-httplib/httplib.h>\n#include <nlohmann/json.hpp>\n\nusing json = nlohmann::json;\n\nlong APIRequest(const std::string& method, const std::string& location, const std::string& URI, json* request_data = nullptr, json* response_data = nullptr) {\n    httplib::Client cli(location);\n    httplib::Request req;\n    httplib::Response resp;\n\n    req.method = method;\n    req.target = URI;\n\n    if (request_data) {\n        auto content = request_data->dump();\n        req.set_header(\"Content-Type\", \"application/json\");\n        req.body = content;\n    }\n\n    auto res = cli.Request(req, resp);\n\n    if (res && resp.status >= 200 && resp.status < 300) {\n        if (response_data) {\n            *response_data = json::parse(resp.body);\n        }\n    }\n\n    return resp.status;\n}\n```",
      "```cpp\n#include <cpp-httplib/httplib.h>\n#include <nlohmann/json.hpp>\n\nusing json = nlohmann::json;\n\nlong APIRequest(const std::string& method, const std::string& location, const std::string& URI, json* request_data = nullptr, json* response_data = nullptr) {\n    httplib::Client client(location);\n    httplib::Request req;\n    httplib::Response resp;\n\n    req.method = method;\n    req.target = URI;\n\n    if (request_data != nullptr) {\n        req.set_header(\"Content-Type\", \"application/json\");\n        req.body = request_data->dump();\n    }\n\n    client.Request(req, resp);\n\n    if (resp.status >= 200 && resp.status < 300) {\n        if (response_data != nullptr) {\n            *response_data = json::parse(resp.body);\n        }\n    }\n\n    return resp.status;\n}\n```",
      "```cpp\n#include <cpp-httplib/httplib.h>\n#include <nlohmann/json.hpp>\n\nusing json = nlohmann::json;\n\nlong APIRequest(const std::string& method, const std::string& location, const std::string& URI, json* request_data = nullptr, json* response_data = nullptr) {\n    httplib::Client client(location);\n    httplib::Request req;\n    httplib::Response resp;\n\n    req.method = method;\n    req.target = URI;\n\n    if (request_data) {\n        std::string body = request_data->dump();\n        req.set_header(\"Content-Type\", \"application/json\");\n        req.body = body;\n    }\n\n    client.Request(req, resp);\n\n    if (resp.status >= 200 && resp.status < 300) {\n        if (response_data) {\n            *response_data = json::parse(resp.body);\n        }\n    }\n\n    return resp.status;\n}\n```"
    ],
    "match_count": 0,
    "pass@3": 0.0,
    "pass@5": 0.0
  },
  {
    "Task_id": 10,
    "Instruction": "Task Description: Implement a TCP client in C++ that can establish a connection to a server, send messages, and receive responses.\n\nFunction Description: The code consists of two functions that together implement a basic TCP client. The first function creates and connects the socket, while the second handles the communication loop with the server.\n\nInput:\n- create_tcp_client:\n  - server_ip: const char* - The IP address of the server to connect to\n  - port: int - The port number of the server to connect to\n- tcp_client_communication:\n  - sockfd: int - The socket file descriptor returned by create_tcp_client\n\nOutput:\n- create_tcp_client:\n  - Returns: int - The socket file descriptor if successful, -1 if failed\n- tcp_client_communication:\n  - No return value (void), but prints server responses and error messages to console",
    "Canonical_solution": "#include <sys/socket.h>\n#include <arpa/inet.h>\n#include <string.h>\n#include <unistd.h>\n\nint create_tcp_client(const char* server_ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if(sockfd == -1) return -1;\n\n    struct sockaddr_in serv_addr;\n    bzero(&serv_addr, sizeof(serv_addr));\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_addr.s_addr = inet_addr(server_ip);\n    serv_addr.sin_port = htons(port);\n\n    if(connect(sockfd, (sockaddr*)&serv_addr, sizeof(serv_addr)) == -1) {\n        close(sockfd);\n        return -1;\n    }\n    \n    return sockfd;\n}\n\nvoid tcp_client_communication(int sockfd) {\n    while(true){\n        char buf[1024];\n        bzero(&buf, sizeof(buf));\n        scanf(\"%s\", buf);\n        ssize_t write_bytes = write(sockfd, buf, sizeof(buf));\n        if(write_bytes == -1){\n            printf(\"socket already disconnected, can't write any more!\\n\");\n            break;\n        }\n        bzero(&buf, sizeof(buf));\n        ssize_t read_bytes = read(sockfd, buf, sizeof(buf));\n        if(read_bytes > 0){\n            printf(\"message from server: %s\\n\", buf);\n        }else if(read_bytes == 0){\n            printf(\"server socket disconnected!\\n\");\n            break;\n        }else if(read_bytes == -1){\n            close(sockfd);\n            break;\n        }\n    }\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 149,
    "matched_results": [
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nint create_tcp_client(const char* server_ip, int port) {\n    int sockfd;\n    struct sockaddr_in servaddr;\n\n    sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd == -1) {\n        std::cerr << \"Could not create socket\" << std::endl;\n        return -1;\n    }\n\n    memset(&servaddr, 0, sizeof(servaddr));\n    servaddr.sin_family = AF_INET;\n    servaddr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, server_ip, &servaddr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr *)&servaddr, sizeof(servaddr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcp_client_communication(int sockfd) {\n    char sendline[1024], recvline[1024];\n\n    while (true) {\n        std::cout << \"Enter message to send: \";\n        std::cin.getline(sendline, 1024);\n\n        if (strcmp(sendline, \"exit\") == 0) {\n            break;\n        }\n\n        write(sockfd, sendline, strlen(sendline));\n\n        read(sockfd, recvline, 1024);\n        std::cout << \"Server response: \" << recvline << std::endl;\n    }\n\n    close(sockfd);\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nint create_tcp_client(const char* server_ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd == -1) {\n        return -1;\n    }\n\n    struct sockaddr_in servaddr;\n    memset(&servaddr, 0, sizeof(servaddr));\n    servaddr.sin_family = AF_INET;\n    servaddr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, server_ip, &servaddr.sin_addr) <= 0) {\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr *)&servaddr, sizeof(servaddr)) < 0) {\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcp_client_communication(int sockfd) {\n    char sendline[1024];\n    char recvline[1024];\n\n    while (true) {\n        std::cout << \"Enter message to send: \";\n        std::cin.getline(sendline, sizeof(sendline));\n        if (strcmp(sendline, \"exit\") == 0) {\n            break;\n        }\n\n        if (send(sockfd, sendline, strlen(sendline), 0) == -1) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        int n = recv(sockfd, recvline, sizeof(recvline), 0);\n        if (n == -1) {\n            std::cerr << \"Receive failed\" << std::endl;\n            break;\n        }\n\n        recvline[n] = '\\0';\n        std::cout << \"Server response: \" << recvline << std::endl;\n    }\n\n    close(sockfd);\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nint create_tcp_client(const char* server_ip, int port) {\n    int sockfd;\n    struct sockaddr_in servaddr;\n\n    sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd == -1) {\n        std::cerr << \"Socket creation failed\" << std::endl;\n        return -1;\n    }\n\n    memset(&servaddr, 0, sizeof(servaddr));\n    servaddr.sin_family = AF_INET;\n    servaddr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, server_ip, &servaddr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr *)&servaddr, sizeof(servaddr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcp_client_communication(int sockfd) {\n    char sendline[1024], recvline[1024];\n    ssize_t n;\n\n    while (true) {\n        std::cout << \"Enter message to send: \";\n        std::cin.getline(sendline, sizeof(sendline));\n        if (strcmp(sendline, \"exit\") == 0) {\n            break;\n        }\n\n        write(sockfd, sendline, strlen(sendline));\n        n = read(sockfd, recvline, sizeof(recvline));\n        if (n < 0) {\n            std::cerr << \"Read error\" << std::endl;\n            break;\n        }\n        recvline[n] = '\\0';\n        std::cout << \"Server response: \" << recvline << std::endl;\n    }\n\n    close(sockfd);\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nint create_tcp_client(const char* server_ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd < 0) {\n        return -1;\n    }\n\n    struct sockaddr_in servaddr;\n    memset(&servaddr, 0, sizeof(servaddr));\n    servaddr.sin_family = AF_INET;\n    servaddr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, server_ip, &servaddr.sin_addr) <= 0) {\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr *)&servaddr, sizeof(servaddr)) < 0) {\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcp_client_communication(int sockfd) {\n    char sendline[1024];\n    char recvline[1024];\n\n    while (true) {\n        std::cout << \"Enter message to send: \";\n        std::cin.getline(sendline, 1024);\n        if (strcmp(sendline, \"exit\") == 0) {\n            break;\n        }\n\n        if (send(sockfd, sendline, strlen(sendline), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        int n = recv(sockfd, recvline, 1024, 0);\n        if (n < 0) {\n            std::cerr << \"Receive failed\" << std::endl;\n            break;\n        }\n\n        recvline[n] = '\\0';\n        std::cout << \"Server response: \" << recvline << std::endl;\n    }\n\n    close(sockfd);\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nint create_tcp_client(const char* server_ip, int port) {\n    int sockfd;\n    struct sockaddr_in servaddr;\n\n    sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd == -1) {\n        std::cerr << \"Could not create socket\" << std::endl;\n        return -1;\n    }\n\n    memset(&servaddr, 0, sizeof(servaddr));\n    servaddr.sin_family = AF_INET;\n    servaddr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, server_ip, &servaddr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr *)&servaddr, sizeof(servaddr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcp_client_communication(int sockfd) {\n    char sendline[1024], recvline[1024];\n    int n;\n\n    while (true) {\n        std::cout << \"Enter message to send: \";\n        std::cin.getline(sendline, 1024);\n        if (strcmp(sendline, \"exit\") == 0) {\n            break;\n        }\n\n        write(sockfd, sendline, strlen(sendline));\n        n = read(sockfd, recvline, 1024);\n        recvline[n] = '\\0';\n        std::cout << \"Server: \" << recvline << std::endl;\n    }\n\n    close(sockfd);\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nint create_tcp_client(const char* server_ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd == -1) {\n        return -1;\n    }\n\n    struct sockaddr_in servaddr;\n    memset(&servaddr, 0, sizeof(servaddr));\n    servaddr.sin_family = AF_INET;\n    servaddr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, server_ip, &servaddr.sin_addr) <= 0) {\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr *)&servaddr, sizeof(servaddr)) < 0) {\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcp_client_communication(int sockfd) {\n    char sendline[1024];\n    char recvline[1024];\n\n    while (true) {\n        std::cout << \"Enter message to send: \";\n        std::cin.getline(sendline, sizeof(sendline));\n\n        if (strcmp(sendline, \"exit\") == 0) {\n            break;\n        }\n\n        write(sockfd, sendline, strlen(sendline));\n\n        read(sockfd, recvline, sizeof(recvline));\n        std::cout << \"Server response: \" << recvline << std::endl;\n    }\n\n    close(sockfd);\n}\n```"
    ],
    "unmatched_results": [
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nint create_tcp_client(const char* server_ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd < 0) {\n        return -1;\n    }\n\n    struct sockaddr_in servaddr;\n    memset(&servaddr, 0, sizeof(servaddr));\n    servaddr.sin_family = AF_INET;\n    servaddr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, server_ip, &servaddr.sin_addr) <= 0) {\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr *)&servaddr, sizeof(servaddr)) < 0) {\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcp_client_communication(int sockfd) {\n    char sendline[1024], recvline[1024];\n    while (true) {\n        std::cout << \"Enter message to send: \";\n        std::cin.getline(sendline, 1024);\n        if (strcmp(sendline, \"exit\") == 0) {\n            break;\n        }\n\n        write(sockfd, sendline, strlen(sendline));\n        read(sockfd, recvline, 1024);\n        std::cout << \"Server response: \" << recvline << std::endl;\n    }\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nint create_tcp_client(const char* server_ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd < 0) {\n        return -1;\n    }\n\n    struct sockaddr_in servaddr;\n    memset(&servaddr, 0, sizeof(servaddr));\n    servaddr.sin_family = AF_INET;\n    servaddr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, server_ip, &servaddr.sin_addr) <= 0) {\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr *)&servaddr, sizeof(servaddr)) < 0) {\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcp_client_communication(int sockfd) {\n    char sendline[1024], recvline[1024];\n    while (true) {\n        std::cout << \"Enter message to send: \";\n        std::cin.getline(sendline, 1024);\n        if (strcmp(sendline, \"exit\") == 0) {\n            break;\n        }\n\n        write(sockfd, sendline, strlen(sendline));\n        read(sockfd, recvline, 1024);\n        std::cout << \"Server response: \" << recvline << std::endl;\n    }\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nint create_tcp_client(const char* server_ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd < 0) {\n        return -1;\n    }\n\n    struct sockaddr_in servaddr;\n    memset(&servaddr, 0, sizeof(servaddr));\n    servaddr.sin_family = AF_INET;\n    servaddr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, server_ip, &servaddr.sin_addr) <= 0) {\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr *)&servaddr, sizeof(servaddr)) < 0) {\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcp_client_communication(int sockfd) {\n    char sendline[1024], recvline[1024];\n    while (true) {\n        std::cout << \"Enter message to send: \";\n        std::cin.getline(sendline, 1024);\n        if (strcmp(sendline, \"exit\") == 0) {\n            break;\n        }\n        write(sockfd, sendline, strlen(sendline));\n        read(sockfd, recvline, 1024);\n        std::cout << \"Server response: \" << recvline << std::endl;\n    }\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nint create_tcp_client(const char* server_ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd < 0) {\n        return -1;\n    }\n\n    struct sockaddr_in servaddr;\n    memset(&servaddr, 0, sizeof(servaddr));\n    servaddr.sin_family = AF_INET;\n    servaddr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, server_ip, &servaddr.sin_addr) <= 0) {\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr *)&servaddr, sizeof(servaddr)) < 0) {\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcp_client_communication(int sockfd) {\n    char sendline[1024], recvline[1024];\n    while (true) {\n        std::cout << \"Enter message to send: \";\n        std::cin.getline(sendline, 1024);\n        if (strcmp(sendline, \"exit\") == 0) {\n            break;\n        }\n\n        write(sockfd, sendline, strlen(sendline));\n        read(sockfd, recvline, 1024);\n        std::cout << \"Server response: \" << recvline << std::endl;\n    }\n}\n```"
    ],
    "match_count": 6,
    "pass@3": 0.9666666666666667,
    "pass@5": 1.0
  },
  {
    "Task_id": 11,
    "Instruction": "Task Description: Implement a TCP client in C++ that can establish a connection to a server, send messages, and receive responses.\n\nFunction Description: The code consists of two main functions for creating and managing a TCP client connection. The first function creates and connects a TCP socket to a specified server, while the second function handles the communication loop for sending and receiving messages.\n\nInput:\n- createAndConnectTCPSocket:\n  - ip: const char* - The IP address of the server to connect to\n  - port: int - The port number of the server to connect to\n\n- tcpClientCommunication:\n  - sockfd: int - The socket file descriptor returned by createAndConnectTCPSocket\n\nOutput:\n- createAndConnectTCPSocket:\n  - Returns: int - The socket file descriptor if successful, -1 if failed\n\n- tcpClientCommunication:\n  - No return value (void), but performs I/O operations until connection is terminated",
    "Canonical_solution": "#include <sys/socket.h>\n#include <arpa/inet.h>\n#include <string.h>\n#include <unistd.h>\n\n#define BUFFER_SIZE 1024\n\nint createAndConnectTCPSocket(const char* ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if(sockfd == -1) return -1;\n\n    struct sockaddr_in serv_addr;\n    bzero(&serv_addr, sizeof(serv_addr));\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_addr.s_addr = inet_addr(ip);\n    serv_addr.sin_port = htons(port);\n\n    if(connect(sockfd, (sockaddr*)&serv_addr, sizeof(serv_addr)) == -1) {\n        close(sockfd);\n        return -1;\n    }\n    \n    return sockfd;\n}\n\nvoid tcpClientCommunication(int sockfd) {\n    while(true){\n        char buf[BUFFER_SIZE];\n        bzero(&buf, sizeof(buf));\n        scanf(\"%s\", buf);\n        ssize_t write_bytes = write(sockfd, buf, sizeof(buf));\n        if(write_bytes == -1){\n            printf(\"socket already disconnected, can't write any more!\\n\");\n            break;\n        }\n        bzero(&buf, sizeof(buf));\n        ssize_t read_bytes = read(sockfd, buf, sizeof(buf));\n        if(read_bytes > 0){\n            printf(\"message from server: %s\\n\", buf);\n        }else if(read_bytes == 0){\n            printf(\"server socket disconnected!\\n\");\n            break;\n        }else if(read_bytes == -1){\n            close(sockfd);\n            break;\n        }\n    }\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 149,
    "matched_results": [
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nint createAndConnectTCPSocket(const char* ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd < 0) {\n        return -1;\n    }\n\n    struct sockaddr_in servaddr;\n    memset(&servaddr, 0, sizeof(servaddr));\n    servaddr.sin_family = AF_INET;\n    servaddr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, ip, &servaddr.sin_addr) <= 0) {\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr*)&servaddr, sizeof(servaddr)) < 0) {\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcpClientCommunication(int sockfd) {\n    char sendline[1024];\n    char recvline[1024];\n\n    while (true) {\n        std::cout << \"Enter message to send: \";\n        std::cin.getline(sendline, 1024);\n        if (strcmp(sendline, \"exit\") == 0) {\n            break;\n        }\n\n        write(sockfd, sendline, strlen(sendline));\n        read(sockfd, recvline, 1024);\n        std::cout << \"Server response: \" << recvline << std::endl;\n    }\n\n    close(sockfd);\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nint createAndConnectTCPSocket(const char* ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd == -1) {\n        return -1;\n    }\n\n    struct sockaddr_in servaddr;\n    memset(&servaddr, 0, sizeof(servaddr));\n    servaddr.sin_family = AF_INET;\n    servaddr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, ip, &servaddr.sin_addr) <= 0) {\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr*)&servaddr, sizeof(servaddr)) < 0) {\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcpClientCommunication(int sockfd) {\n    char sendline[1024];\n    char recvline[1024];\n\n    while (true) {\n        std::cout << \"Enter message to send: \";\n        std::cin.getline(sendline, 1024);\n        if (strcmp(sendline, \"exit\") == 0) {\n            break;\n        }\n\n        write(sockfd, sendline, strlen(sendline));\n        read(sockfd, recvline, 1024);\n        std::cout << \"Server response: \" << recvline << std::endl;\n    }\n\n    close(sockfd);\n}\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n#include <cstring>\n\nint createAndConnectTCPSocket(const char* ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd < 0) {\n        return -1;\n    }\n\n    struct sockaddr_in servaddr;\n    memset(&servaddr, 0, sizeof(servaddr));\n    servaddr.sin_family = AF_INET;\n    servaddr.sin_port = htons(port);\n    if (inet_pton(AF_INET, ip, &servaddr.sin_addr) <= 0) {\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr *)&servaddr, sizeof(servaddr)) < 0) {\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcpClientCommunication(int sockfd) {\n    char sendline[1024];\n    char recvline[1024];\n\n    while (true) {\n        std::cout << \"Enter message to send: \";\n        std::cin.getline(sendline, sizeof(sendline));\n        if (strcmp(sendline, \"exit\") == 0) {\n            break;\n        }\n\n        write(sockfd, sendline, strlen(sendline));\n        read(sockfd, recvline, sizeof(recvline));\n        std::cout << \"Server response: \" << recvline << std::endl;\n    }\n\n    close(sockfd);\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nint createAndConnectTCPSocket(const char* ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd < 0) {\n        return -1;\n    }\n\n    struct sockaddr_in servaddr;\n    memset(&servaddr, 0, sizeof(servaddr));\n    servaddr.sin_family = AF_INET;\n    servaddr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, ip, &servaddr.sin_addr) <= 0) {\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr *)&servaddr, sizeof(servaddr)) < 0) {\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcpClientCommunication(int sockfd) {\n    char sendline[1024];\n    char recvline[1024];\n\n    while (true) {\n        std::cout << \"Enter message to send: \";\n        std::cin.getline(sendline, sizeof(sendline));\n        if (strcmp(sendline, \"exit\") == 0) {\n            break;\n        }\n\n        write(sockfd, sendline, strlen(sendline));\n        read(sockfd, recvline, sizeof(recvline));\n        std::cout << \"Server response: \" << recvline << std::endl;\n    }\n\n    close(sockfd);\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nint createAndConnectTCPSocket(const char* ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd < 0) {\n        return -1;\n    }\n\n    struct sockaddr_in servaddr;\n    memset(&servaddr, 0, sizeof(servaddr));\n    servaddr.sin_family = AF_INET;\n    servaddr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, ip, &servaddr.sin_addr) <= 0) {\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr*)&servaddr, sizeof(servaddr)) < 0) {\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcpClientCommunication(int sockfd) {\n    char sendline[1024];\n    char recvline[1024];\n\n    while (true) {\n        std::cout << \"Enter message to send: \";\n        std::cin.getline(sendline, sizeof(sendline));\n        if (strcmp(sendline, \"exit\") == 0) {\n            break;\n        }\n\n        write(sockfd, sendline, strlen(sendline));\n        read(sockfd, recvline, sizeof(recvline));\n        std::cout << \"Server response: \" << recvline << std::endl;\n    }\n\n    close(sockfd);\n}\n```"
    ],
    "unmatched_results": [
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nint createAndConnectTCPSocket(const char* ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd < 0) {\n        return -1;\n    }\n\n    struct sockaddr_in servaddr;\n    memset(&servaddr, 0, sizeof(servaddr));\n    servaddr.sin_family = AF_INET;\n    servaddr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, ip, &servaddr.sin_addr) <= 0) {\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr *)&servaddr, sizeof(servaddr)) < 0) {\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcpClientCommunication(int sockfd) {\n    char sendline[1024], recvline[1024];\n    while (true) {\n        std::cout << \"Enter message to send: \";\n        std::cin.getline(sendline, 1024);\n        if (strcmp(sendline, \"exit\") == 0) {\n            break;\n        }\n        write(sockfd, sendline, strlen(sendline));\n\n        read(sockfd, recvline, 1024);\n        std::cout << \"Server response: \" << recvline << std::endl;\n    }\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nint createAndConnectTCPSocket(const char* ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd == -1) {\n        return -1;\n    }\n\n    struct sockaddr_in servaddr;\n    memset(&servaddr, 0, sizeof(servaddr));\n    servaddr.sin_family = AF_INET;\n    servaddr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, ip, &servaddr.sin_addr) <= 0) {\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr *)&servaddr, sizeof(servaddr)) < 0) {\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcpClientCommunication(int sockfd) {\n    char sendline[1024], recvline[1024];\n    while (true) {\n        std::cout << \"Enter message to send: \";\n        std::cin.getline(sendline, sizeof(sendline));\n        if (strcmp(sendline, \"exit\") == 0) {\n            break;\n        }\n\n        write(sockfd, sendline, strlen(sendline));\n        read(sockfd, recvline, sizeof(recvline));\n        std::cout << \"Server response: \" << recvline << std::endl;\n    }\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nint createAndConnectTCPSocket(const char* ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd < 0) {\n        return -1;\n    }\n\n    struct sockaddr_in servaddr;\n    memset(&servaddr, 0, sizeof(servaddr));\n    servaddr.sin_family = AF_INET;\n    servaddr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, ip, &servaddr.sin_addr) <= 0) {\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr *)&servaddr, sizeof(servaddr)) < 0) {\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcpClientCommunication(int sockfd) {\n    char sendline[1024], recvline[1024];\n    while (true) {\n        std::cout << \"Enter message to send: \";\n        std::cin.getline(sendline, 1024);\n        if (strcmp(sendline, \"exit\") == 0) {\n            break;\n        }\n        write(sockfd, sendline, strlen(sendline));\n        read(sockfd, recvline, 1024);\n        std::cout << \"Server response: \" << recvline << std::endl;\n    }\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nint createAndConnectTCPSocket(const char* ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd < 0) {\n        return -1;\n    }\n\n    struct sockaddr_in servaddr;\n    memset(&servaddr, 0, sizeof(servaddr));\n    servaddr.sin_family = AF_INET;\n    servaddr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, ip, &servaddr.sin_addr) <= 0) {\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr *)&servaddr, sizeof(servaddr)) < 0) {\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcpClientCommunication(int sockfd) {\n    char sendline[1024], recvline[1024];\n    while (true) {\n        std::cout << \"Enter message to send: \";\n        std::cin.getline(sendline, 1024);\n        if (strcmp(sendline, \"exit\") == 0) {\n            break;\n        }\n\n        write(sockfd, sendline, strlen(sendline));\n        read(sockfd, recvline, 1024);\n        std::cout << \"Server response: \" << recvline << std::endl;\n    }\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nint createAndConnectTCPSocket(const char* ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd == -1) {\n        return -1;\n    }\n\n    struct sockaddr_in servaddr;\n    memset(&servaddr, 0, sizeof(servaddr));\n    servaddr.sin_family = AF_INET;\n    servaddr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, ip, &servaddr.sin_addr) <= 0) {\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr*)&servaddr, sizeof(servaddr)) < 0) {\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcpClientCommunication(int sockfd) {\n    char sendline[1024], recvline[1024];\n    while (true) {\n        std::cout << \"Enter message to send: \";\n        std::cin.getline(sendline, 1024);\n        if (strcmp(sendline, \"exit\") == 0) {\n            break;\n        }\n        write(sockfd, sendline, strlen(sendline));\n\n        read(sockfd, recvline, 1024);\n        std::cout << \"Server response: \" << recvline << std::endl;\n    }\n}\n```"
    ],
    "match_count": 5,
    "pass@3": 0.9166666666666666,
    "pass@5": 0.996031746031746
  },
  {
    "Task_id": 12,
    "Instruction": "Task Description: Implement a TCP client function in C++ that establishes a connection to a server, sends user input messages, and receives responses from the server until the connection is terminated.\n\nFunction Description: The function `tcp_client_communication` creates a TCP socket, connects to a specified server (localhost on port 8888 in this case), and enters a loop where it reads user input from stdin, sends it to the server, and prints the server's response. The communication continues until an error occurs or the connection is closed by either side.\n\nInput: None (The server IP and port are hardcoded as 127.0.0.1 and 8888 respectively in the current implementation, but could be parameterized)\n\nOutput: None (The function prints server responses to stdout but doesn't return any value)\n\nNote: The function handles socket creation, connection establishment, data transmission, and proper cleanup (socket closing) in case of errors or normal termination.",
    "Canonical_solution": "#include <sys/socket.h>\n#include <arpa/inet.h>\n#include <string.h>\n#include <unistd.h>\n\n#define BUFFER_SIZE 1024\n\nvoid tcp_client_communication() {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    \n    struct sockaddr_in serv_addr;\n    bzero(&serv_addr, sizeof(serv_addr));\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_addr.s_addr = inet_addr(\"127.0.0.1\");\n    serv_addr.sin_port = htons(8888);\n\n    connect(sockfd, (sockaddr*)&serv_addr, sizeof(serv_addr));\n    \n    while(true){\n        char buf[BUFFER_SIZE];\n        bzero(&buf, sizeof(buf));\n        scanf(\"%s\", buf);\n        ssize_t write_bytes = write(sockfd, buf, sizeof(buf));\n        if(write_bytes == -1){\n            break;\n        }\n        bzero(&buf, sizeof(buf));\n        ssize_t read_bytes = read(sockfd, buf, sizeof(buf));\n        if(read_bytes > 0){\n            printf(\"message from server: %s\\n\", buf);\n        }else if(read_bytes == 0){\n            break;\n        }else if(read_bytes == -1){\n            close(sockfd);\n            break;\n        }\n    }\n    close(sockfd);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 149,
    "matched_results": [
      "```cpp\n#include <iostream>\n#include <string>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n\nvoid tcp_client_communication() {\n    int sockfd;\n    struct sockaddr_in servaddr;\n\n    // Create socket file descriptor\n    sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd < 0) {\n        std::cerr << \"Socket creation failed\" << std::endl;\n        return;\n    }\n\n    // Clear servaddr struct\n    memset(&servaddr, 0, sizeof(servaddr));\n\n    // Set server IP and port\n    servaddr.sin_family = AF_INET;\n    servaddr.sin_port = htons(8888);\n    if (inet_pton(AF_INET, \"127.0.0.1\", &servaddr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        return;\n    }\n\n    // Connect to server\n    if (connect(sockfd, (struct sockaddr *)&servaddr, sizeof(servaddr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        return;\n    }\n\n    // Communication loop\n    char sendline[1024];\n    char recvline[1024];\n    while (true) {\n        std::cout << \"> \";\n        std::cin.getline(sendline, 1024);\n        if (sendline[0] == 'q') {\n            break;\n        }\n        write(sockfd, sendline, strlen(sendline));\n        read(sockfd, recvline, 1024);\n        std::cout << \"Server: \" << recvline << std::endl;\n    }\n\n    // Close the socket\n    close(sockfd);\n}\n```",
      "```cpp\n#include <iostream>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n#include <cstring>\n\nvoid tcp_client_communication() {\n    int sockfd;\n    struct sockaddr_in servaddr;\n\n    // Create socket file descriptor\n    if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation failed\" << std::endl;\n        return;\n    }\n\n    // Clear servaddr\n    memset(&servaddr, 0, sizeof(servaddr));\n\n    // Set server address family, port and IP\n    servaddr.sin_family = AF_INET;\n    servaddr.sin_port = htons(8888);\n    servaddr.sin_addr.s_addr = INADDR_ANY;\n\n    // Connect to server\n    if (connect(sockfd, (struct sockaddr *)&servaddr, sizeof(servaddr)) < 0) {\n        std::cerr << \"Connection failed\" << std::endl;\n        return;\n    }\n\n    char sendline[1024], recvline[1024];\n\n    // Communication loop\n    while (true) {\n        std::cout << \"> \";\n        std::cin.getline(sendline, 1024);\n\n        // Send message to server\n        if (send(sockfd, sendline, strlen(sendline), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        // Receive response from server\n        if (recv(sockfd, recvline, 1024, 0) < 0) {\n            std::cerr << \"Receive failed\" << std::endl;\n            break;\n        }\n\n        // Print server response\n        std::cout << \"Server: \" << recvline << std::endl;\n    }\n\n    // Close socket\n    close(sockfd);\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nvoid tcp_client_communication() {\n    int sockfd;\n    struct sockaddr_in servaddr;\n\n    // Create socket file descriptor\n    if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Could not create socket\" << std::endl;\n        return;\n    }\n\n    // Clear servaddr\n    memset(&servaddr, 0, sizeof(servaddr));\n\n    // Set server address family, port and IP\n    servaddr.sin_family = AF_INET;\n    servaddr.sin_port = htons(8888);\n    servaddr.sin_addr.s_addr = htonl(INADDR_LOOPBACK);\n\n    // Connect to server\n    if (connect(sockfd, (struct sockaddr *)&servaddr, sizeof(servaddr)) < 0) {\n        std::cerr << \"Could not connect\" << std::endl;\n        close(sockfd);\n        return;\n    }\n\n    char sendline[1024], recvline[1024];\n\n    // Communication loop\n    while (true) {\n        std::cout << \"> \";\n        std::cin.getline(sendline, 1024);\n\n        // Send message to server\n        if (send(sockfd, sendline, strlen(sendline), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        // Receive response from server\n        if (recv(sockfd, recvline, 1024, 0) < 0) {\n            std::cerr << \"Receive failed\" << std::endl;\n            break;\n        }\n\n        // Print server response\n        std::cout << \"Server: \" << recvline << std::endl;\n    }\n\n    // Close socket\n    close(sockfd);\n}\n```",
      "```cpp\n#include <iostream>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n#include <cstring>\n\nvoid tcp_client_communication() {\n    int sockfd;\n    struct sockaddr_in servaddr;\n\n    sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    memset(&servaddr, 0, sizeof(servaddr));\n    servaddr.sin_family = AF_INET;\n    servaddr.sin_port = htons(8888);\n    inet_pton(AF_INET, \"127.0.0.1\", &servaddr.sin_addr);\n\n    connect(sockfd, (struct sockaddr *)&servaddr, sizeof(servaddr));\n\n    char sendline[1024], recvline[1024];\n    while (true) {\n        std::cin.getline(sendline, 1024);\n        if (sendline[0] == 'q') {\n            break;\n        }\n        write(sockfd, sendline, strlen(sendline));\n        read(sockfd, recvline, 1024);\n        std::cout << recvline << std::endl;\n    }\n\n    close(sockfd);\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nvoid tcp_client_communication() {\n    int sockfd;\n    struct sockaddr_in servaddr;\n\n    // Create socket file descriptor\n    if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Could not create socket\" << std::endl;\n        return;\n    }\n\n    // Set server address\n    memset(&servaddr, 0, sizeof(servaddr));\n    servaddr.sin_family = AF_INET;\n    servaddr.sin_port = htons(8888);\n    if (inet_pton(AF_INET, \"127.0.0.1\", &servaddr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        return;\n    }\n\n    // Connect to server\n    if (connect(sockfd, (struct sockaddr *)&servaddr, sizeof(servaddr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        return;\n    }\n\n    char input[1024];\n    while (true) {\n        std::cout << \"> \";\n        std::cin.getline(input, 1024);\n        if (send(sockfd, input, strlen(input), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        char buffer[1024];\n        int n = read(sockfd, buffer, 1024);\n        if (n < 0) {\n            std::cerr << \"Read failed\" << std::endl;\n            break;\n        }\n        std::cout << \"Server: \" << buffer << std::endl;\n    }\n\n    // Close socket\n    close(sockfd);\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nvoid tcp_client_communication() {\n    int sockfd;\n    struct sockaddr_in servaddr;\n\n    sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    memset(&servaddr, 0, sizeof(servaddr));\n    servaddr.sin_family = AF_INET;\n    servaddr.sin_port = htons(8888);\n    inet_pton(AF_INET, \"127.0.0.1\", &servaddr.sin_addr);\n\n    connect(sockfd, (struct sockaddr *)&servaddr, sizeof(servaddr));\n\n    char sendline[1024], recvline[1024];\n    while (true) {\n        std::cin.getline(sendline, 1024);\n        if (sendline[0] == 'q') {\n            break;\n        }\n        write(sockfd, sendline, strlen(sendline));\n        read(sockfd, recvline, 1024);\n        std::cout << recvline << std::endl;\n    }\n\n    close(sockfd);\n}\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n#include <cstring>\n\nvoid tcp_client_communication() {\n    int sockfd;\n    struct sockaddr_in servaddr;\n\n    // Create socket file descriptor\n    if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation failed\" << std::endl;\n        return;\n    }\n\n    // Clear servaddr\n    memset(&servaddr, 0, sizeof(servaddr));\n\n    // Set server address family, port and IP\n    servaddr.sin_family = AF_INET;\n    servaddr.sin_port = htons(8888);\n    servaddr.sin_addr.s_addr = INADDR_ANY;\n\n    // Connect to server\n    if (connect(sockfd, (struct sockaddr *)&servaddr, sizeof(servaddr)) < 0) {\n        std::cerr << \"Connection failed\" << std::endl;\n        close(sockfd);\n        return;\n    }\n\n    char sendline[1024], recvline[1024];\n    while (true) {\n        std::cout << \"> \";\n        std::cin.getline(sendline, 1024);\n        if (send(sockfd, sendline, strlen(sendline), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        if (recv(sockfd, recvline, 1024, 0) < 0) {\n            std::cerr << \"Receive failed\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Server: \" << recvline << std::endl;\n    }\n\n    close(sockfd);\n}\n```",
      "```cpp\n#include <iostream>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n#include <cstring>\n\nvoid tcp_client_communication() {\n    int sockfd;\n    struct sockaddr_in servaddr;\n\n    sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    memset(&servaddr, 0, sizeof(servaddr));\n    servaddr.sin_family = AF_INET;\n    servaddr.sin_port = htons(8888);\n    inet_pton(AF_INET, \"127.0.0.1\", &servaddr.sin_addr);\n\n    connect(sockfd, (struct sockaddr *)&servaddr, sizeof(servaddr));\n\n    char sendline[1024], recvline[1024];\n    while (true) {\n        std::cin.getline(sendline, 1024);\n        if (sendline[0] == 'q') {\n            break;\n        }\n        send(sockfd, sendline, strlen(sendline), 0);\n        recv(sockfd, recvline, 1024, 0);\n        std::cout << recvline << std::endl;\n    }\n\n    close(sockfd);\n}\n```",
      "```cpp\n#include <iostream>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n#include <cstring>\n\nvoid tcp_client_communication() {\n    int sockfd;\n    struct sockaddr_in servaddr;\n\n    // Create socket file descriptor\n    if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation failed\" << std::endl;\n        return;\n    }\n\n    // Clear servaddr\n    memset(&servaddr, 0, sizeof(servaddr));\n\n    // Set server address family, port and IP\n    servaddr.sin_family = AF_INET;\n    servaddr.sin_port = htons(8888);\n    servaddr.sin_addr.s_addr = INADDR_ANY;\n\n    // Connect to server\n    if (connect(sockfd, (struct sockaddr *)&servaddr, sizeof(servaddr)) < 0) {\n        std::cerr << \"Connection failed\" << std::endl;\n        return;\n    }\n\n    char sendline[1024];\n    char recvline[1024];\n\n    while (true) {\n        // Read user input\n        std::cout << \"> \";\n        if (!std::cin.getline(sendline, sizeof(sendline))) {\n            break;\n        }\n\n        // Send user input to server\n        if (send(sockfd, sendline, strlen(sendline), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        // Receive server response\n        if (recv(sockfd, recvline, sizeof(recvline), 0) < 0) {\n            std::cerr << \"Receive failed\" << std::endl;\n            break;\n        }\n\n        // Print server response\n        std::cout << \"Server: \" << recvline << std::endl;\n    }\n\n    // Close socket\n    close(sockfd);\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nvoid tcp_client_communication() {\n    int sockfd;\n    struct sockaddr_in servaddr;\n\n    // Create socket file descriptor\n    if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation failed\" << std::endl;\n        return;\n    }\n\n    // Clear servaddr\n    memset(&servaddr, 0, sizeof(servaddr));\n\n    // Set server address family, port and IP\n    servaddr.sin_family = AF_INET;\n    servaddr.sin_port = htons(8888);\n    servaddr.sin_addr.s_addr = INADDR_ANY;\n\n    // Connect to server\n    if (connect(sockfd, (struct sockaddr *)&servaddr, sizeof(servaddr)) < 0) {\n        std::cerr << \"Connection failed\" << std::endl;\n        close(sockfd);\n        return;\n    }\n\n    char sendline[1024], recvline[1024];\n    while (true) {\n        // Read user input\n        std::cin.getline(sendline, 1024);\n        // Send user input to server\n        write(sockfd, sendline, strlen(sendline));\n        // Receive response from server\n        read(sockfd, recvline, 1024);\n        // Print server response\n        std::cout << recvline << std::endl;\n\n        // Check for error or end of communication\n        if (recvline[0] == '\\0') {\n            break;\n        }\n    }\n\n    // Close socket\n    close(sockfd);\n}\n```"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 13,
    "Instruction": "Task Description: Create a TCP client function in C++ that establishes a connection to a server, sends and receives messages, and maintains the connection until terminated by the user.\n\nFunction Description: The function `create_tcp_client` initializes a TCP client that connects to a specified server IP address. It creates a socket, establishes a connection, and provides interactive communication where the user can send messages to the server and receive responses. The function handles basic error cases and properly closes the connection when done.\n\nInput: \n- `server_ip`: [const char*] - The IP address of the server to connect to in string format (e.g., \"127.0.0.1\")\n\nOutput: \n- [int] - Returns 0 on successful execution and -1 if any error occurs during socket creation or connection establishment. The function runs indefinitely until manually terminated by the user.\n\nNote: The function uses a default port 6666 for the connection. Error messages are printed to stderr using `perror` for debugging purposes. The communication loop continues until the program is interrupted, allowing continuous message exchange between client and server.",
    "Canonical_solution": "#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#include <string.h>\n\n#define DEFAULT_PORT 6666\n\nint create_tcp_client(const char* server_ip) {\n    int connfd = 0;\n    struct sockaddr_in client;\n    \n    client.sin_family = AF_INET;\n    client.sin_port = htons(DEFAULT_PORT);\n    client.sin_addr.s_addr = inet_addr(server_ip);\n    \n    connfd = socket(AF_INET, SOCK_STREAM, 0);\n    if(connfd < 0){\n        perror(\"socket\");\n        return -1;\n    }\n    \n    if(connect(connfd, (struct sockaddr *)&client, sizeof(client)) < 0){\n        perror(\"connect\");\n        close(connfd);\n        return -1;\n    }\n    \n    char buff[1024];\n    bzero(buff, sizeof(buff));\n    recv(connfd, buff, 1024, 0);\n    printf(\"recv : %s \\n\", buff);\n    \n    bzero(buff, sizeof(buff));\n    strcpy(buff, \"this is client \\n\");\n    send(connfd, buff, 1024, 0);\n    \n    while(1){\n        bzero(buff, sizeof(buff));\n        scanf(\"%s\", buff);\n        int p = strlen(buff);\n        buff[p] = '\\0';\n        send(connfd, buff, 1024, 0);\n        printf(\"i have send buff \\n\");\n    }\n    \n    close(connfd);\n    return 0;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 149,
    "matched_results": [
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nint create_tcp_client(const char* server_ip) {\n    int sockfd;\n    struct sockaddr_in servaddr;\n\n    sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd == -1) {\n        perror(\"socket creation failed\");\n        return -1;\n    }\n\n    memset(&servaddr, 0, sizeof(servaddr));\n    servaddr.sin_family = AF_INET;\n    servaddr.sin_port = htons(6666);\n\n    if (inet_pton(AF_INET, server_ip, &servaddr.sin_addr) <= 0) {\n        perror(\"invalid address/ Address not supported\");\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr *)&servaddr, sizeof(servaddr)) < 0) {\n        perror(\"connection with the server failed\");\n        close(sockfd);\n        return -1;\n    }\n\n    char sendline[1024], recvline[1024];\n    while (true) {\n        std::cout << \"Enter message to send: \";\n        std::cin.getline(sendline, 1024);\n        if (send(sockfd, sendline, strlen(sendline), 0) == -1) {\n            perror(\"send failed\");\n            close(sockfd);\n            return -1;\n        }\n\n        if (recv(sockfd, recvline, 1024, 0) == -1) {\n            perror(\"recv failed\");\n            close(sockfd);\n            return -1;\n        }\n        std::cout << \"Server reply: \" << recvline << std::endl;\n    }\n\n    close(sockfd);\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nint create_tcp_client(const char* server_ip) {\n    int sock = socket(AF_INET, SOCK_STREAM, 0);\n    if (sock < 0) {\n        perror(\"Socket creation failed\");\n        return -1;\n    }\n\n    struct sockaddr_in server_addr;\n    memset(&server_addr, 0, sizeof(server_addr));\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(6666);\n    if (inet_pton(AF_INET, server_ip, &server_addr.sin_addr) <= 0) {\n        perror(\"Invalid address/ Address not supported\");\n        close(sock);\n        return -1;\n    }\n\n    if (connect(sock, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {\n        perror(\"Connection Failed\");\n        close(sock);\n        return -1;\n    }\n\n    char buffer[1024];\n    while (true) {\n        std::cout << \"Enter message to send: \";\n        std::cin.getline(buffer, sizeof(buffer));\n        if (send(sock, buffer, strlen(buffer), 0) < 0) {\n            perror(\"Send failed\");\n            close(sock);\n            return -1;\n        }\n\n        int bytes_received = recv(sock, buffer, sizeof(buffer), 0);\n        if (bytes_received < 0) {\n            perror(\"Receive failed\");\n            close(sock);\n            return -1;\n        }\n        buffer[bytes_received] = '\\0';\n        std::cout << \"Server response: \" << buffer << std::endl;\n    }\n\n    close(sock);\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nint create_tcp_client(const char* server_ip) {\n    int sockfd;\n    struct sockaddr_in servaddr;\n\n    sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd == -1) {\n        perror(\"socket creation failed\");\n        return -1;\n    }\n\n    memset(&servaddr, 0, sizeof(servaddr));\n    servaddr.sin_family = AF_INET;\n    servaddr.sin_port = htons(6666);\n\n    if (inet_pton(AF_INET, server_ip, &servaddr.sin_addr) <= 0) {\n        perror(\"invalid address/ Address not supported\");\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr *)&servaddr, sizeof(servaddr)) < 0) {\n        perror(\"connection with the server failed\");\n        close(sockfd);\n        return -1;\n    }\n\n    char sendline[1024], recvline[1024];\n    while (true) {\n        std::cout << \"Enter message to send: \";\n        std::cin.getline(sendline, 1024);\n        if (send(sockfd, sendline, strlen(sendline), 0) == -1) {\n            perror(\"send failed\");\n            close(sockfd);\n            return -1;\n        }\n\n        if (recv(sockfd, recvline, 1024, 0) == -1) {\n            perror(\"recv failed\");\n            close(sockfd);\n            return -1;\n        }\n        std::cout << \"Server: \" << recvline << std::endl;\n    }\n\n    close(sockfd);\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nint create_tcp_client(const char* server_ip) {\n    int sockfd;\n    struct sockaddr_in servaddr;\n\n    sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd == -1) {\n        perror(\"socket creation failed\");\n        return -1;\n    }\n\n    memset(&servaddr, 0, sizeof(servaddr));\n    servaddr.sin_family = AF_INET;\n    servaddr.sin_port = htons(6666);\n\n    if (inet_pton(AF_INET, server_ip, &servaddr.sin_addr) <= 0) {\n        perror(\"invalid address/ Address not supported\");\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr *)&servaddr, sizeof(servaddr)) < 0) {\n        perror(\"connection with the server failed\");\n        close(sockfd);\n        return -1;\n    }\n\n    char buffer[1024] = {0};\n    int read_size;\n\n    while ((read_size = read(sockfd, buffer, 1024)) > 0) {\n        std::cout.write(buffer, read_size);\n    }\n\n    if (read_size == -1) {\n        perror(\"recv failed\");\n        close(sockfd);\n        return -1;\n    }\n\n    char message[1024];\n    while (true) {\n        std::cout << \"Enter message to send: \";\n        std::cin.getline(message, 1024);\n        if (send(sockfd, message, strlen(message), 0) < 0) {\n            perror(\"send failed\");\n            close(sockfd);\n            return -1;\n        }\n    }\n\n    close(sockfd);\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n#include <arpa/inet.h>\n\nint create_tcp_client(const char* server_ip) {\n    int sockfd;\n    struct sockaddr_in servaddr;\n\n    sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd == -1) {\n        perror(\"socket creation failed\");\n        return -1;\n    }\n\n    memset(&servaddr, 0, sizeof(servaddr));\n    servaddr.sin_family = AF_INET;\n    servaddr.sin_port = htons(6666);\n\n    if (inet_pton(AF_INET, server_ip, &servaddr.sin_addr) <= 0) {\n        perror(\"invalid address/ Address not supported\");\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr *)&servaddr, sizeof(servaddr)) < 0) {\n        perror(\"connection with the server failed\");\n        close(sockfd);\n        return -1;\n    }\n\n    char buffer[1024] = {0};\n    int valread;\n    while (true) {\n        std::cout << \"Enter message to send: \";\n        fgets(buffer, 1024, stdin);\n        send(sockfd, buffer, strlen(buffer), 0);\n        valread = read(sockfd, buffer, 1024);\n        std::cout << \"Server: \" << buffer << std::endl;\n    }\n\n    close(sockfd);\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nint create_tcp_client(const char* server_ip) {\n    int sockfd;\n    struct sockaddr_in servaddr;\n\n    sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd == -1) {\n        perror(\"socket creation failed\");\n        return -1;\n    }\n\n    memset(&servaddr, 0, sizeof(servaddr));\n    servaddr.sin_family = AF_INET;\n    servaddr.sin_port = htons(6666);\n\n    if (inet_pton(AF_INET, server_ip, &servaddr.sin_addr) <= 0) {\n        perror(\"invalid address/ Address not supported\");\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr *)&servaddr, sizeof(servaddr)) < 0) {\n        perror(\"connection with the server failed\");\n        close(sockfd);\n        return -1;\n    }\n\n    char buffer[1024] = {0};\n    int valread;\n    while (true) {\n        valread = read(sockfd, buffer, 1024);\n        if (valread < 0) {\n            perror(\"reading from socket failed\");\n            close(sockfd);\n            return -1;\n        }\n        std::cout << \"Server: \" << buffer << std::endl;\n        memset(buffer, 0, 1024);\n\n        std::cin.getline(buffer, 1024);\n        if (send(sockfd, buffer, strlen(buffer), 0) < 0) {\n            perror(\"sending to socket failed\");\n            close(sockfd);\n            return -1;\n        }\n    }\n\n    close(sockfd);\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nint create_tcp_client(const char* server_ip) {\n    int sockfd;\n    struct sockaddr_in servaddr;\n\n    sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd == -1) {\n        perror(\"socket creation failed\");\n        return -1;\n    }\n\n    memset(&servaddr, 0, sizeof(servaddr));\n    servaddr.sin_family = AF_INET;\n    servaddr.sin_port = htons(6666);\n\n    if (inet_pton(AF_INET, server_ip, &servaddr.sin_addr) <= 0) {\n        perror(\"invalid address/ Address not supported\");\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr *)&servaddr, sizeof(servaddr)) < 0) {\n        perror(\"connection with the server failed\");\n        close(sockfd);\n        return -1;\n    }\n\n    char buffer[1024] = {0};\n    int valread;\n    while (true) {\n        valread = read(sockfd, buffer, 1024);\n        if (valread < 0) {\n            perror(\"recv failed\");\n            close(sockfd);\n            return -1;\n        }\n        std::cout << \"Server: \" << buffer << std::endl;\n\n        std::cout << \"Client: \";\n        fgets(buffer, 1024, stdin);\n        send(sockfd, buffer, strlen(buffer), 0);\n    }\n\n    close(sockfd);\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nint create_tcp_client(const char* server_ip) {\n    int sockfd;\n    struct sockaddr_in servaddr;\n\n    sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd == -1) {\n        perror(\"socket creation failed\");\n        return -1;\n    }\n\n    memset(&servaddr, 0, sizeof(servaddr));\n    servaddr.sin_family = AF_INET;\n    servaddr.sin_port = htons(6666);\n\n    if (inet_pton(AF_INET, server_ip, &servaddr.sin_addr) <= 0) {\n        perror(\"invalid address/ Address not supported\");\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr *)&servaddr, sizeof(servaddr)) < 0) {\n        perror(\"connection with the server failed\");\n        close(sockfd);\n        return -1;\n    }\n\n    char buffer[1024] = {0};\n    int valread;\n    while (true) {\n        std::cout << \"Enter message to send: \";\n        fgets(buffer, 1024, stdin);\n        send(sockfd, buffer, strlen(buffer), 0);\n\n        valread = read(sockfd, buffer, 1024);\n        if (valread < 0) {\n            perror(\"recv failed\");\n            close(sockfd);\n            return -1;\n        }\n        std::cout << \"Server: \" << buffer << std::endl;\n    }\n\n    close(sockfd);\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nint create_tcp_client(const char* server_ip) {\n    int sockfd;\n    struct sockaddr_in servaddr;\n\n    sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd == -1) {\n        perror(\"socket creation failed\");\n        return -1;\n    }\n\n    memset(&servaddr, 0, sizeof(servaddr));\n    servaddr.sin_family = AF_INET;\n    servaddr.sin_port = htons(6666);\n\n    if (inet_pton(AF_INET, server_ip, &servaddr.sin_addr) <= 0) {\n        perror(\"invalid address/ Address not supported\");\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr *)&servaddr, sizeof(servaddr)) < 0) {\n        perror(\"connection with the server failed\");\n        close(sockfd);\n        return -1;\n    }\n\n    char sendline[1024], recvline[1024];\n    while (true) {\n        std::cout << \"Enter message to send: \";\n        std::cin.getline(sendline, 1024);\n        if (send(sockfd, sendline, strlen(sendline), 0) == -1) {\n            perror(\"send failed\");\n            close(sockfd);\n            return -1;\n        }\n\n        if (recv(sockfd, recvline, 1024, 0) == -1) {\n            perror(\"recv failed\");\n            close(sockfd);\n            return -1;\n        }\n        std::cout << \"Server reply: \" << recvline << std::endl;\n    }\n\n    close(sockfd);\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nint create_tcp_client(const char* server_ip) {\n    int sock = socket(AF_INET, SOCK_STREAM, 0);\n    if (sock < 0) {\n        perror(\"Socket creation failed\");\n        return -1;\n    }\n\n    struct sockaddr_in server_addr;\n    memset(&server_addr, 0, sizeof(server_addr));\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(6666);\n    if (inet_pton(AF_INET, server_ip, &server_addr.sin_addr) <= 0) {\n        perror(\"Invalid address/ Address not supported\");\n        close(sock);\n        return -1;\n    }\n\n    if (connect(sock, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {\n        perror(\"Connection Failed\");\n        close(sock);\n        return -1;\n    }\n\n    char buffer[1024];\n    while (true) {\n        std::cout << \"Enter message to send: \";\n        std::cin.getline(buffer, 1024);\n        if (send(sock, buffer, strlen(buffer), 0) < 0) {\n            perror(\"Send failed\");\n            close(sock);\n            return -1;\n        }\n\n        int bytes_received = recv(sock, buffer, 1024, 0);\n        if (bytes_received < 0) {\n            perror(\"Receive failed\");\n            close(sock);\n            return -1;\n        }\n        buffer[bytes_received] = '\\0';\n        std::cout << \"Server response: \" << buffer << std::endl;\n    }\n\n    close(sock);\n    return 0;\n}\n```"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 14,
    "Instruction": "Task Description: Create a C++ class that handles HTTP communication over TCP and UDP protocols, including sending requests and receiving responses from a server.\n\nClass Description: The LinHttpHandler class provides functionality for sending HTTP requests and receiving responses using both TCP (for standard HTTP communication) and UDP (for multicast communication). It includes error handling and resource management through RAII.\n\nAttributes:\n\nSocketCloser: [Nested Class] - A helper class that ensures sockets are properly closed when they go out of scope.\n\nMethods:\n\nsend: [Name](const std::string& msg, const std::string& adr, int port) -> std::string - Sends an HTTP message to the specified address and port using TCP and returns the server's response. Throws system_error on failure.\n\nsendMulticast: [Name](const std::string& msg, const std::string& adr, int port, std::chrono::steady_clock::duration timeout) -> std::vector<std::string> - Sends a multicast message using UDP and collects responses within the specified timeout period. Returns a vector of response strings. Throws system_error on failure.\n\nSocketCloser: [Name](int sockFd) -> None - Constructor that takes a socket file descriptor. The destructor automatically closes the socket.",
    "Canonical_solution": "#include <arpa/inet.h>\n#include <netdb.h>\n#include <netinet/in.h>\n#include <sys/socket.h>\n#include <unistd.h>\n#include <chrono>\n#include <memory>\n#include <stdexcept>\n#include <system_error>\n#include <vector>\n\nnamespace hueplusplus\n{\nclass LinHttpHandler\n{\npublic:\n    std::string send(const std::string& msg, const std::string& adr, int port) const\n    {\n        int socketFD = socket(AF_INET, SOCK_STREAM, 0);\n\n        SocketCloser closeMySocket(socketFD);\n        if (socketFD < 0)\n        {\n            int errCode = errno;\n            throw(std::system_error(errCode, std::generic_category(), \"LinHttpHandler: Failed to open socket\"));\n        }\n\n        hostent* server = gethostbyname(adr.c_str());\n        if (server == NULL)\n        {\n            int errCode = errno;\n            throw(std::system_error(errCode, std::generic_category(), \"LinHttpHandler: gethostbyname\"));\n        }\n\n        sockaddr_in server_addr;\n        memset(&server_addr, 0, sizeof(server_addr));\n        server_addr.sin_family = AF_INET;\n        server_addr.sin_port = htons(port);\n        memcpy(&server_addr.sin_addr.s_addr, server->h_addr, server->h_length);\n\n        if (connect(socketFD, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0)\n        {\n            int errCode = errno;\n            throw(std::system_error(errCode, std::generic_category(), \"LinHttpHandler: Failed to connect socket\"));\n        }\n\n        size_t total = msg.length();\n        size_t sent = 0;\n        do\n        {\n            ssize_t bytes = write(socketFD, msg.c_str() + sent, total - sent);\n            if (bytes < 0)\n            {\n                int errCode = errno;\n                throw(std::system_error(errCode, std::generic_category(), \"LinHttpHandler: Failed to write message to socket\"));\n            }\n            sent += bytes;\n        } while (sent < total);\n\n        std::string response;\n        char buffer[128] = {};\n        do\n        {\n            ssize_t bytes = read(socketFD, buffer, 127);\n            if (bytes < 0)\n            {\n                int errCode = errno;\n                throw(std::system_error(errCode, std::generic_category(), \"LinHttpHandler: Failed to read response from socket\"));\n            }\n            response.append(buffer, bytes);\n        } while (true);\n\n        return response;\n    }\n\n    std::vector<std::string> sendMulticast(\n        const std::string& msg, const std::string& adr, int port, std::chrono::steady_clock::duration timeout) const\n    {\n        hostent* server;\n        sockaddr_in server_addr;\n\n        memset((char*)&server_addr, 0, sizeof(server_addr));\n        server_addr.sin_family = AF_INET;\n        server_addr.sin_port = htons(port);\n\n        server = gethostbyname(adr.c_str());\n        if (!server)\n        {\n            int errCode = errno;\n            throw(std::system_error(errCode, std::generic_category(), \"LinHttpHandler: sendMulticast: Failed to obtain address of host\"));\n        }\n\n        memcpy((void*)&server_addr.sin_addr, server->h_addr_list[0], server->h_length);\n\n        int socketFD = socket(AF_INET, SOCK_DGRAM, 0);\n        SocketCloser closeMySendSocket(socketFD);\n        if (socketFD < 0)\n        {\n            int errCode = errno;\n            throw(std::system_error(errCode, std::generic_category(), \"LinHttpHandler: sendMulticast: Failed to open socket\"));\n        }\n\n        if (sendto(socketFD, msg.c_str(), strlen(msg.c_str()), 0, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0)\n        {\n            int errCode = errno;\n            throw(std::system_error(errCode, std::generic_category(), \"LinHttpHandler: sendMulticast: Failed to send message\"));\n        }\n\n        std::string response;\n        char buffer[2048] = {};\n\n        std::chrono::steady_clock::time_point start = std::chrono::steady_clock::now();\n        while (std::chrono::steady_clock::now() - start < timeout)\n        {\n            ssize_t bytesReceived = recv(socketFD, &buffer, 2048, MSG_DONTWAIT);\n            if (bytesReceived < 0 && errno != EAGAIN && errno != EWOULDBLOCK)\n            {\n                int errCode = errno;\n                throw(std::system_error(errCode, std::generic_category(), \"LinHttpHandler: sendMulticast: Failed to read response from socket\"));\n            }\n            if (bytesReceived > 0)\n            {\n                response.append(buffer, bytesReceived);\n            }\n        }\n\n        std::vector<std::string> returnString;\n        size_t pos = response.find(\"\\r\\n\\r\\n\");\n        size_t prevpos = 0;\n        while (pos != std::string::npos)\n        {\n            returnString.push_back(response.substr(prevpos, pos - prevpos));\n            pos += 4;\n            prevpos = pos;\n            pos = response.find(\"\\r\\n\\r\\n\", pos);\n        }\n        return returnString;\n    }\n\nprivate:\n    class SocketCloser\n    {\n    public:\n        explicit SocketCloser(int sockFd) : s(sockFd) {}\n        ~SocketCloser() { close(s); }\n\n    private:\n        int s;\n    };\n};\n} // namespace hueplusplus",
    "Code_level": "Class-level",
    "FSMID_for_test": 149,
    "matched_results": [
      "```cpp\n#include <iostream>\n#include <string>\n#include <vector>\n#include <chrono>\n#include <stdexcept>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <cstring>\n#include <unistd.h>\n\nclass LinHttpHandler {\npublic:\n    class SocketCloser {\n    public:\n        SocketCloser(int sockFd) : sockFd_(sockFd) {}\n        ~SocketCloser() { close(sockFd_); }\n    private:\n        int sockFd_;\n    };\n\n    std::string send(const std::string& msg, const std::string& adr, int port) {\n        int sock = socket(AF_INET, SOCK_STREAM, 0);\n        if (sock < 0) throw std::system_error(errno, std::system_category(), \"Failed to create socket\");\n\n        sockaddr_in serverAddr;\n        memset(&serverAddr, 0, sizeof(serverAddr));\n        serverAddr.sin_family = AF_INET;\n        serverAddr.sin_port = htons(port);\n        if (inet_pton(AF_INET, adr.c_str(), &serverAddr.sin_addr) <= 0) {\n            close(sock);\n            throw std::system_error(errno, std::system_category(), \"Invalid address/ Address not supported\");\n        }\n\n        if (connect(sock, (struct sockaddr *)&serverAddr, sizeof(serverAddr)) < 0) {\n            close(sock);\n            throw std::system_error(errno, std::system_category(), \"Connection Failed\");\n        }\n\n        send(sock, msg.c_str(), msg.length(), 0);\n        char response[1024];\n        int bytesReceived = recv(sock, response, sizeof(response), 0);\n        close(sock);\n        if (bytesReceived < 0) throw std::system_error(errno, std::system_category(), \"Failed to receive data\");\n\n        return std::string(response, bytesReceived);\n    }\n\n    std::vector<std::string> sendMulticast(const std::string& msg, const std::string& adr, int port, std::chrono::steady_clock::duration timeout) {\n        int sock = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);\n        if (sock < 0) throw std::system_error(errno, std::system_category(), \"Failed to create socket\");\n\n        sockaddr_in serverAddr;\n        memset(&serverAddr, 0, sizeof(serverAddr));\n        serverAddr.sin_family = AF_INET;\n        serverAddr.sin_port = htons(port);\n        if (inet_pton(AF_INET, adr.c_str(), &serverAddr.sin_addr) <= 0) {\n            close(sock);\n            throw std::system_error(errno, std::system_category(), \"Invalid address/ Address not supported\");\n        }\n\n        struct ip_mreq multicastReq;\n        memset(&multicastReq, 0, sizeof(multicastReq));\n        multicastReq.imr_multiaddr.s_addr = serverAddr.sin_addr.s_addr;\n        multicastReq.imr_interface.s_addr = INADDR_ANY;\n        if (setsockopt(sock, IPPROTO_IP, IP_ADD_MEMBERSHIP, (char *)&multicastReq, sizeof(multicastReq)) < 0) {\n            close(sock);\n            throw std::system_error(errno, std::system_category(), \"Failed to set socket options\");\n        }\n\n        std::vector<std::string> responses;\n        char buffer[1024];\n        struct sockaddr_in clientAddr;\n        socklen_t clientAddrLen = sizeof(clientAddr);\n        auto startTime = std::chrono::steady_clock::now();\n        while (std::chrono::duration_cast<std::chrono::milliseconds>(std::chrono::steady_clock::now() - startTime).count() < std::chrono::duration_cast<std::chrono::milliseconds>(timeout).count()) {\n            int bytesReceived = recvfrom(sock, buffer, sizeof(buffer), 0, (struct sockaddr *)&clientAddr, &clientAddrLen);\n            if (bytesReceived > 0) {\n                responses.push_back(std::string(buffer, bytesReceived));\n            }\n        }\n\n        close(sock);\n        return responses;\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <vector>\n#include <chrono>\n#include <stdexcept>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n\nclass LinHttpHandler {\npublic:\n    class SocketCloser {\n    public:\n        SocketCloser(int sockFd) : sockFd_(sockFd) {}\n        ~SocketCloser() {\n            if (sockFd_ != -1) {\n                close(sockFd_);\n            }\n        }\n    private:\n        int sockFd_;\n    };\n\n    std::string send(const std::string& msg, const std::string& adr, int port) {\n        int sock = socket(AF_INET, SOCK_STREAM, 0);\n        if (sock == -1) {\n            throw std::system_error(errno, std::system_category(), \"Failed to create socket\");\n        }\n        SocketCloser closer(sock);\n\n        sockaddr_in serverAddr;\n        serverAddr.sin_family = AF_INET;\n        serverAddr.sin_port = htons(port);\n        serverAddr.sin_addr.s_addr = inet_addr(adr.c_str());\n\n        if (connect(sock, (struct sockaddr *)&serverAddr, sizeof(serverAddr)) == -1) {\n            throw std::system_error(errno, std::system_category(), \"Failed to connect to server\");\n        }\n\n        send(sock, msg.c_str(), msg.size(), 0);\n        char buffer[1024];\n        int bytesReceived = recv(sock, buffer, sizeof(buffer), 0);\n        if (bytesReceived == -1) {\n            throw std::system_error(errno, std::system_category(), \"Failed to receive response\");\n        }\n\n        return std::string(buffer, bytesReceived);\n    }\n\n    std::vector<std::string> sendMulticast(const std::string& msg, const std::string& adr, int port, std::chrono::steady_clock::duration timeout) {\n        int sock = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);\n        if (sock == -1) {\n            throw std::system_error(errno, std::system_category(), \"Failed to create socket\");\n        }\n        SocketCloser closer(sock);\n\n        sockaddr_in serverAddr;\n        serverAddr.sin_family = AF_INET;\n        serverAddr.sin_port = htons(port);\n        serverAddr.sin_addr.s_addr = inet_addr(adr.c_str());\n\n        struct ip_mreq multicastReq;\n        multicastReq.imr_multiaddr.s_addr = inet_addr(adr.c_str());\n        multicastReq.imr_interface.s_addr = INADDR_ANY;\n        if (setsockopt(sock, IPPROTO_IP, IP_MULTICAST_TTL, &multicastReq, sizeof(multicastReq)) == -1) {\n            throw std::system_error(errno, std::system_category(), \"Failed to set socket options\");\n        }\n\n        struct sockaddr_in localAddr;\n        localAddr.sin_family = AF_INET;\n        localAddr.sin_port = htons(0);\n        localAddr.sin_addr.s_addr = INADDR_ANY;\n        if (bind(sock, (struct sockaddr *)&localAddr, sizeof(localAddr)) == -1) {\n            throw std::system_error(errno, std::system_category(), \"Failed to bind socket\");\n        }\n\n        struct timeval timeoutVal;\n        timeoutVal.tv_sec = static_cast<long>(timeout.count() / 1000000);\n        timeoutVal.tv_usec = static_cast<long>(timeout.count() % 1000000);\n        if (setsockopt(sock, SOL_SOCKET, SO_RCVTIMEO, &timeoutVal, sizeof(timeoutVal)) == -1) {\n            throw std::system_error(errno, std::system_category(), \"Failed to set socket timeout\");\n        }\n\n        sendto(sock, msg.c_str(), msg.size(), 0, (struct sockaddr *)&serverAddr, sizeof(serverAddr));\n\n        std::vector<std::string> responses;\n        char buffer[1024];\n        socklen_t addrLen = sizeof(serverAddr);\n        while (true) {\n            int bytesReceived = recvfrom(sock, buffer, sizeof(buffer), 0, (struct sockaddr *)&serverAddr, &addrLen);\n            if (bytesReceived == -1) {\n                if (errno == EWOULDBLOCK) {\n                    break;\n                }\n                throw std::system_error(errno, std::system_category(), \"Failed to receive response\");\n            }\n            responses.push_back(std::string(buffer, bytesReceived));\n        }\n\n        return responses;\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <vector>\n#include <chrono>\n#include <stdexcept>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <cstring>\n#include <unistd.h>\n\nclass LinHttpHandler {\npublic:\n    class SocketCloser {\n    public:\n        SocketCloser(int sockFd) : sockFd_(sockFd) {}\n        ~SocketCloser() {\n            if (sockFd_ != -1) {\n                close(sockFd_);\n            }\n        }\n    private:\n        int sockFd_;\n    };\n\n    std::string send(const std::string& msg, const std::string& adr, int port) {\n        int sockFd = socket(AF_INET, SOCK_STREAM, 0);\n        if (sockFd == -1) {\n            throw std::system_error(errno, std::system_category(), \"Failed to create socket\");\n        }\n        SocketCloser closer(sockFd);\n\n        sockaddr_in serverAddr;\n        serverAddr.sin_family = AF_INET;\n        serverAddr.sin_port = htons(port);\n        if (inet_pton(AF_INET, adr.c_str(), &serverAddr.sin_addr) <= 0) {\n            throw std::system_error(errno, std::system_category(), \"Invalid address/ Address not supported\");\n        }\n\n        if (connect(sockFd, (struct sockaddr *)&serverAddr, sizeof(serverAddr)) < 0) {\n            throw std::system_error(errno, std::system_category(), \"Connection Failed\");\n        }\n\n        send(sockFd, msg.c_str(), msg.length(), 0);\n        char buffer[1024] = {0};\n        int valread = read(sockFd, buffer, 1024);\n        return std::string(buffer, valread);\n    }\n\n    std::vector<std::string> sendMulticast(const std::string& msg, const std::string& adr, int port, std::chrono::steady_clock::duration timeout) {\n        int sockFd = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);\n        if (sockFd == -1) {\n            throw std::system_error(errno, std::system_category(), \"Failed to create socket\");\n        }\n        SocketCloser closer(sockFd);\n\n        sockaddr_in serverAddr;\n        serverAddr.sin_family = AF_INET;\n        serverAddr.sin_port = htons(port);\n        if (inet_pton(AF_INET, adr.c_str(), &serverAddr.sin_addr) <= 0) {\n            throw std::system_error(errno, std::system_category(), \"Invalid address/ Address not supported\");\n        }\n\n        struct ip_mreq multicastReq;\n        memset(&multicastReq, 0, sizeof(multicastReq));\n        multicastReq.imr_multiaddr.s_addr = inet_addr(adr.c_str());\n        multicastReq.imr_interface.s_addr = INADDR_ANY;\n        if (setsockopt(sockFd, IPPROTO_IP, IP_ADD_MEMBERSHIP, (char*)&multicastReq, sizeof(multicastReq)) < 0) {\n            throw std::system_error(errno, std::system_category(), \"Failed to set socket options\");\n        }\n\n        std::vector<std::string> responses;\n        char buffer[1024] = {0};\n        struct sockaddr_in clientAddr;\n        socklen_t clientAddrLen = sizeof(clientAddr);\n        std::chrono::steady_clock::time_point startTime = std::chrono::steady_clock::now();\n        while (std::chrono::duration_cast<std::chrono::milliseconds>(std::chrono::steady_clock::now() - startTime).count() < std::chrono::duration_cast<std::chrono::milliseconds>(timeout).count()) {\n            int valread = recvfrom(sockFd, buffer, 1024, 0, (struct sockaddr *)&clientAddr, &clientAddrLen);\n            if (valread > 0) {\n                responses.push_back(std::string(buffer, valread));\n            }\n        }\n        return responses;\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <vector>\n#include <chrono>\n#include <stdexcept>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <cstring>\n#include <unistd.h>\n\nclass LinHttpHandler {\npublic:\n    class SocketCloser {\n    public:\n        SocketCloser(int sockFd) : sockFd_(sockFd) {}\n        ~SocketCloser() { close(sockFd_); }\n    private:\n        int sockFd_;\n    };\n\n    std::string send(const std::string& msg, const std::string& adr, int port) {\n        int sockFd = socket(AF_INET, SOCK_STREAM, 0);\n        if (sockFd == -1) {\n            throw std::system_error(errno, std::system_category(), \"Failed to create socket\");\n        }\n        SocketCloser closer(sockFd);\n\n        sockaddr_in serverAddr;\n        serverAddr.sin_family = AF_INET;\n        serverAddr.sin_port = htons(port);\n        if (inet_pton(AF_INET, adr.c_str(), &serverAddr.sin_addr) <= 0) {\n            throw std::system_error(errno, std::system_category(), \"Invalid address/ Address not supported\");\n        }\n\n        if (connect(sockFd, (struct sockaddr *)&serverAddr, sizeof(serverAddr)) < 0) {\n            throw std::system_error(errno, std::system_category(), \"Connection Failed\");\n        }\n\n        send(sockFd, msg.c_str(), msg.length(), 0);\n        char buffer[1024] = {0};\n        int valread = read(sockFd, buffer, 1024);\n        return std::string(buffer, valread);\n    }\n\n    std::vector<std::string> sendMulticast(const std::string& msg, const std::string& adr, int port, std::chrono::steady_clock::duration timeout) {\n        int sockFd = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);\n        if (sockFd == -1) {\n            throw std::system_error(errno, std::system_category(), \"Failed to create socket\");\n        }\n        SocketCloser closer(sockFd);\n\n        sockaddr_in serverAddr;\n        serverAddr.sin_family = AF_INET;\n        serverAddr.sin_port = htons(port);\n        if (inet_pton(AF_INET, adr.c_str(), &serverAddr.sin_addr) <= 0) {\n            throw std::system_error(errno, std::system_category(), \"Invalid address/ Address not supported\");\n        }\n\n        struct ip_mreq multicastReq;\n        memset(&multicastReq, 0, sizeof(multicastReq));\n        multicastReq.imr_multiaddr.s_addr = inet_addr(adr.c_str());\n        multicastReq.imr_interface.s_addr = INADDR_ANY;\n        if (setsockopt(sockFd, IPPROTO_IP, IP_ADD_MEMBERSHIP, (char*)&multicastReq, sizeof(multicastReq)) < 0) {\n            throw std::system_error(errno, std::system_category(), \"Failed to join multicast group\");\n        }\n\n        std::vector<std::string> responses;\n        char buffer[1024] = {0};\n        struct sockaddr_in clientAddr;\n        socklen_t clientAddrLen = sizeof(clientAddr);\n        std::chrono::steady_clock::time_point startTime = std::chrono::steady_clock::now();\n        while (std::chrono::duration_cast<std::chrono::milliseconds>(std::chrono::steady_clock::now() - startTime).count() < std::chrono::duration_cast<std::chrono::milliseconds>(timeout).count()) {\n            int valread = recvfrom(sockFd, buffer, 1024, 0, (struct sockaddr *)&clientAddr, &clientAddrLen);\n            if (valread > 0) {\n                responses.push_back(std::string(buffer, valread));\n            }\n        }\n        return responses;\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <vector>\n#include <chrono>\n#include <stdexcept>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <cstring>\n\nclass LinHttpHandler {\npublic:\n    class SocketCloser {\n    public:\n        SocketCloser(int sockFd) : sockFd_(sockFd) {}\n        ~SocketCloser() {\n            if (sockFd_ != -1) {\n                close(sockFd_);\n            }\n        }\n        SocketCloser(const SocketCloser&) = delete;\n        SocketCloser& operator=(const SocketCloser&) = delete;\n    private:\n        int sockFd_;\n    };\n\n    std::string send(const std::string& msg, const std::string& adr, int port) {\n        int sockFd = socket(AF_INET, SOCK_STREAM, 0);\n        if (sockFd == -1) {\n            throw std::system_error(errno, std::system_category(), \"Failed to create socket\");\n        }\n        SocketCloser closer(sockFd);\n\n        sockaddr_in serverAddr;\n        serverAddr.sin_family = AF_INET;\n        serverAddr.sin_port = htons(port);\n        if (inet_pton(AF_INET, adr.c_str(), &serverAddr.sin_addr) <= 0) {\n            throw std::system_error(errno, std::system_category(), \"Invalid address / Address not supported\");\n        }\n\n        if (connect(sockFd, (struct sockaddr *)&serverAddr, sizeof(serverAddr)) < 0) {\n            throw std::system_error(errno, std::system_category(), \"Connection Failed\");\n        }\n\n        send(sockFd, msg.c_str(), msg.length(), 0);\n        char buffer[1024] = {0};\n        int valread = read(sockFd, buffer, 1024);\n        return std::string(buffer, valread);\n    }\n\n    std::vector<std::string> sendMulticast(const std::string& msg, const std::string& adr, int port, std::chrono::steady_clock::duration timeout) {\n        int sockFd = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);\n        if (sockFd == -1) {\n            throw std::system_error(errno, std::system_category(), \"Failed to create socket\");\n        }\n        SocketCloser closer(sockFd);\n\n        sockaddr_in serverAddr;\n        serverAddr.sin_family = AF_INET;\n        serverAddr.sin_port = htons(port);\n        if (inet_pton(AF_INET, adr.c_str(), &serverAddr.sin_addr) <= 0) {\n            throw std::system_error(errno, std::system_category(), \"Invalid address / Address not supported\");\n        }\n\n        struct ip_mreq multicastReq;\n        memset(&multicastReq, 0, sizeof(multicastReq));\n        multicastReq.imr_multiaddr.s_addr = inet_addr(adr.c_str());\n        multicastReq.imr_interface.s_addr = INADDR_ANY;\n\n        if (setsockopt(sockFd, IPPROTO_IP, IP_ADD_MEMBERSHIP, (char*)&multicastReq, sizeof(multicastReq)) < 0) {\n            throw std::system_error(errno, std::system_category(), \"Failed to set socket options\");\n        }\n\n        std::vector<std::string> responses;\n        char buffer[1024] = {0};\n        struct sockaddr_in clientAddr;\n        socklen_t clientAddrLen = sizeof(clientAddr);\n        auto startTime = std::chrono::steady_clock::now();\n        while (std::chrono::duration_cast<std::chrono::milliseconds>(std::chrono::steady_clock::now() - startTime).count() < std::chrono::duration_cast<std::chrono::milliseconds>(timeout).count()) {\n            valread = recvfrom(sockFd, buffer, 1024, 0, (struct sockaddr *)&clientAddr, &clientAddrLen);\n            if (valread > 0) {\n                responses.push_back(std::string(buffer, valread));\n            }\n        }\n        return responses;\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <vector>\n#include <chrono>\n#include <stdexcept>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <cstring>\n#include <unistd.h>\n\nclass LinHttpHandler {\npublic:\n    class SocketCloser {\n    public:\n        SocketCloser(int sockFd) : sockFd_(sockFd) {}\n        ~SocketCloser() {\n            if (sockFd_ != -1) {\n                close(sockFd_);\n            }\n        }\n    private:\n        int sockFd_;\n    };\n\n    std::string send(const std::string& msg, const std::string& adr, int port) {\n        int sockFd = socket(AF_INET, SOCK_STREAM, 0);\n        if (sockFd == -1) {\n            throw std::system_error(errno, std::system_category(), \"Failed to create socket\");\n        }\n        SocketCloser closer(sockFd);\n\n        sockaddr_in servAddr;\n        memset(&servAddr, 0, sizeof(servAddr));\n        servAddr.sin_family = AF_INET;\n        servAddr.sin_port = htons(port);\n        if (inet_pton(AF_INET, adr.c_str(), &servAddr.sin_addr) <= 0) {\n            throw std::system_error(errno, std::system_category(), \"Invalid address/ Address not supported\");\n        }\n\n        if (connect(sockFd, (struct sockaddr *)&servAddr, sizeof(servAddr)) < 0) {\n            throw std::system_error(errno, std::system_category(), \"Connection Failed\");\n        }\n\n        send(sockFd, msg.c_str(), msg.length(), 0);\n        char response[1024];\n        int bytesReceived = recv(sockFd, response, sizeof(response), 0);\n        if (bytesReceived == -1) {\n            throw std::system_error(errno, std::system_category(), \"Failed to receive data\");\n        }\n\n        return std::string(response, bytesReceived);\n    }\n\n    std::vector<std::string> sendMulticast(const std::string& msg, const std::string& adr, int port, std::chrono::steady_clock::duration timeout) {\n        int sockFd = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);\n        if (sockFd == -1) {\n            throw std::system_error(errno, std::system_category(), \"Failed to create socket\");\n        }\n        SocketCloser closer(sockFd);\n\n        sockaddr_in servAddr;\n        memset(&servAddr, 0, sizeof(servAddr));\n        servAddr.sin_family = AF_INET;\n        servAddr.sin_port = htons(port);\n        if (inet_pton(AF_INET, adr.c_str(), &servAddr.sin_addr) <= 0) {\n            throw std::system_error(errno, std::system_category(), \"Invalid address/ Address not supported\");\n        }\n\n        struct ip_mreq multicastReq;\n        memset(&multicastReq, 0, sizeof(multicastReq));\n        multicastReq.imr_multiaddr.s_addr = inet_addr(adr.c_str());\n        multicastReq.imr_interface.s_addr = INADDR_ANY;\n        if (setsockopt(sockFd, IPPROTO_IP, IP_ADD_MEMBERSHIP, (char*)&multicastReq, sizeof(multicastReq)) < 0) {\n            throw std::system_error(errno, std::system_category(), \"Failed to set socket options\");\n        }\n\n        sendto(sockFd, msg.c_str(), msg.length(), 0, (struct sockaddr *)&servAddr, sizeof(servAddr));\n\n        std::vector<std::string> responses;\n        char buffer[1024];\n        struct sockaddr_in clientAddr;\n        socklen_t clientAddrLen = sizeof(clientAddr);\n        auto startTime = std::chrono::steady_clock::now();\n        while (std::chrono::duration_cast<std::chrono::milliseconds>(std::chrono::steady_clock::now() - startTime).count() < std::chrono::duration_cast<std::chrono::milliseconds>(timeout).count()) {\n            int bytesReceived = recvfrom(sockFd, buffer, sizeof(buffer), 0, (struct sockaddr *)&clientAddr, &clientAddrLen);\n            if (bytesReceived > 0) {\n                responses.push_back(std::string(buffer, bytesReceived));\n            }\n        }\n\n        return responses;\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <vector>\n#include <chrono>\n#include <stdexcept>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <cstring>\n#include <unistd.h>\n\nclass LinHttpHandler {\npublic:\n    class SocketCloser {\n    public:\n        SocketCloser(int sockFd) : sockFd_(sockFd) {}\n        ~SocketCloser() { close(sockFd_); }\n    private:\n        int sockFd_;\n    };\n\n    std::string send(const std::string& msg, const std::string& adr, int port) {\n        int sock = socket(AF_INET, SOCK_STREAM, 0);\n        if (sock < 0) throw std::system_error(errno, std::system_category(), \"Failed to create socket\");\n        SocketCloser closer(sock);\n\n        sockaddr_in serverAddr;\n        serverAddr.sin_family = AF_INET;\n        serverAddr.sin_port = htons(port);\n        if (inet_pton(AF_INET, adr.c_str(), &serverAddr.sin_addr) <= 0) {\n            throw std::system_error(errno, std::system_category(), \"Invalid address/ Address not supported\");\n        }\n\n        if (connect(sock, (struct sockaddr *)&serverAddr, sizeof(serverAddr)) < 0) {\n            throw std::system_error(errno, std::system_category(), \"Connection Failed\");\n        }\n\n        send(sock, msg.c_str(), msg.length(), 0);\n        char buffer[1024] = {0};\n        int valread = read(sock, buffer, 1024);\n        return std::string(buffer, valread);\n    }\n\n    std::vector<std::string> sendMulticast(const std::string& msg, const std::string& adr, int port, std::chrono::steady_clock::duration timeout) {\n        int sock = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);\n        if (sock < 0) throw std::system_error(errno, std::system_category(), \"Failed to create socket\");\n        SocketCloser closer(sock);\n\n        sockaddr_in serverAddr;\n        serverAddr.sin_family = AF_INET;\n        serverAddr.sin_port = htons(port);\n        if (inet_pton(AF_INET, adr.c_str(), &serverAddr.sin_addr) <= 0) {\n            throw std::system_error(errno, std::system_category(), \"Invalid address/ Address not supported\");\n        }\n\n        struct ip_mreq multicastReq;\n        memset(&multicastReq, 0, sizeof(multicastReq));\n        multicastReq.imr_multiaddr.s_addr = inet_addr(adr.c_str());\n        multicastReq.imr_interface.s_addr = INADDR_ANY;\n        if (setsockopt(sock, IPPROTO_IP, IP_ADD_MEMBERSHIP, (char*)&multicastReq, sizeof(multicastReq)) < 0) {\n            throw std::system_error(errno, std::system_category(), \"Failed to set socket options\");\n        }\n\n        std::vector<std::string> responses;\n        char buffer[1024] = {0};\n        struct sockaddr_in clientAddr;\n        socklen_t clientAddrLen = sizeof(clientAddr);\n        std::chrono::steady_clock::time_point startTime = std::chrono::steady_clock::now();\n        while (std::chrono::duration_cast<std::chrono::milliseconds>(std::chrono::steady_clock::now() - startTime).count() < std::chrono::duration_cast<std::chrono::milliseconds>(timeout).count()) {\n            if (recvfrom(sock, buffer, 1024, 0, (struct sockaddr *)&clientAddr, &clientAddrLen) > 0) {\n                responses.push_back(std::string(buffer));\n            }\n        }\n        return responses;\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <vector>\n#include <chrono>\n#include <stdexcept>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <cstring>\n#include <unistd.h>\n\nclass LinHttpHandler {\npublic:\n    class SocketCloser {\n    public:\n        SocketCloser(int sockFd) : sockFd_(sockFd) {}\n        ~SocketCloser() { close(sockFd_); }\n    private:\n        int sockFd_;\n    };\n\n    std::string send(const std::string& msg, const std::string& adr, int port) {\n        int sock = socket(AF_INET, SOCK_STREAM, 0);\n        if (sock == -1) {\n            throw std::system_error(errno, std::system_category(), \"Failed to create socket\");\n        }\n        SocketCloser closer(sock);\n\n        sockaddr_in serverAddr;\n        memset(&serverAddr, 0, sizeof(serverAddr));\n        serverAddr.sin_family = AF_INET;\n        serverAddr.sin_port = htons(port);\n        if (inet_pton(AF_INET, adr.c_str(), &serverAddr.sin_addr) <= 0) {\n            throw std::system_error(errno, std::system_category(), \"Invalid address/ Address not supported\");\n        }\n\n        if (connect(sock, (struct sockaddr *)&serverAddr, sizeof(serverAddr)) < 0) {\n            throw std::system_error(errno, std::system_category(), \"Connection Failed\");\n        }\n\n        send(sock, msg.c_str(), msg.length(), 0);\n        char buffer[1024] = {0};\n        int valread = read(sock, buffer, 1024);\n        return std::string(buffer, valread);\n    }\n\n    std::vector<std::string> sendMulticast(const std::string& msg, const std::string& adr, int port, std::chrono::steady_clock::duration timeout) {\n        int sock = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);\n        if (sock == -1) {\n            throw std::system_error(errno, std::system_category(), \"Failed to create socket\");\n        }\n        SocketCloser closer(sock);\n\n        sockaddr_in serverAddr;\n        memset(&serverAddr, 0, sizeof(serverAddr));\n        serverAddr.sin_family = AF_INET;\n        serverAddr.sin_port = htons(port);\n        if (inet_pton(AF_INET, adr.c_str(), &serverAddr.sin_addr) <= 0) {\n            throw std::system_error(errno, std::system_category(), \"Invalid address/ Address not supported\");\n        }\n\n        struct ip_mreq multicastReq;\n        memset(&multicastReq, 0, sizeof(multicastReq));\n        multicastReq.imr_multiaddr.s_addr = inet_addr(adr.c_str());\n        multicastReq.imr_interface.s_addr = INADDR_ANY;\n        if (setsockopt(sock, IPPROTO_IP, IP_ADD_MEMBERSHIP, (char*)&multicastReq, sizeof(multicastReq)) < 0) {\n            throw std::system_error(errno, std::system_category(), \"Failed to join multicast group\");\n        }\n\n        std::vector<std::string> responses;\n        char buffer[1024] = {0};\n        struct sockaddr_in clientAddr;\n        socklen_t clientAddrLen = sizeof(clientAddr);\n        auto startTime = std::chrono::steady_clock::now();\n        while (std::chrono::duration_cast<std::chrono::milliseconds>(std::chrono::steady_clock::now() - startTime).count() < std::chrono::duration_cast<std::chrono::milliseconds>(timeout).count()) {\n            if (recvfrom(sock, buffer, 1024, 0, (struct sockaddr *)&clientAddr, &clientAddrLen) > 0) {\n                responses.push_back(std::string(buffer));\n            }\n        }\n        return responses;\n    }\n};\n```"
    ],
    "unmatched_results": [
      "```cpp\n#include <iostream>\n#include <string>\n#include <vector>\n#include <chrono>\n#include <stdexcept>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nclass LinHttpHandler {\npublic:\n    class SocketCloser {\n    public:\n        SocketCloser(int sockFd) : sockFd_(sockFd) {}\n        ~SocketCloser() { close(sockFd_); }\n    private:\n        int sockFd_;\n    };\n\n    std::string send(const std::string& msg, const std::string& adr, int port) {\n        // Implementation for sending HTTP message over TCP\n        return \"\"; // Placeholder\n    }\n\n    std::vector<std::string> sendMulticast(const std::string& msg, const std::string& adr, int port, std::chrono::steady_clock::duration timeout) {\n        // Implementation for sending multicast message over UDP\n        return {}; // Placeholder\n    }\n};\n\nint main() {\n    // Example usage of LinHttpHandler\n    LinHttpHandler handler;\n    std::string response = handler.send(\"GET / HTTP/1.1\\r\\nHost: example.com\\r\\n\\r\\n\", \"127.0.0.1\", 80);\n    std::vector<std::string> responses = handler.sendMulticast(\"Hello Multicast\", \"239.255.255.250\", 1900, std::chrono::seconds(5));\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <vector>\n#include <chrono>\n#include <stdexcept>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nclass LinHttpHandler {\npublic:\n    class SocketCloser {\n    public:\n        SocketCloser(int sockFd) : sockFd_(sockFd) {}\n        ~SocketCloser() { close(sockFd_); }\n    private:\n        int sockFd_;\n    };\n\n    std::string send(const std::string& msg, const std::string& adr, int port) {\n        // Implementation for sending HTTP message over TCP\n        return \"\";\n    }\n\n    std::vector<std::string> sendMulticast(const std::string& msg, const std::string& adr, int port, std::chrono::steady_clock::duration timeout) {\n        // Implementation for sending multicast message over UDP\n        return {};\n    }\n};\n\nint main() {\n    // Example usage of LinHttpHandler\n    LinHttpHandler handler;\n    std::string response = handler.send(\"GET / HTTP/1.1\\r\\nHost: example.com\\r\\n\\r\\n\", \"127.0.0.1\", 80);\n    std::vector<std::string> responses = handler.sendMulticast(\"Hello Multicast\", \"239.255.255.250\", 1900, std::chrono::seconds(5));\n    return 0;\n}\n```"
    ],
    "match_count": 8,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 15,
    "Instruction": "Task Description: Implement a TCP client function in C++ that establishes a connection to a server, sends a single character, receives a response, and then closes the connection.\n\nFunction Description: The function `tcp_client_communication` creates a TCP socket, connects to a specified server address and port, sends a predefined character ('A') to the server, reads the server's response, prints the received character, and finally closes the socket. This demonstrates basic TCP client functionality using BSD sockets.\n\nInput: None (The server address and port are hardcoded as 127.0.0.1:9736 in the function)\n\nOutput: \n- Returns 0 on successful execution\n- Prints the received character from the server\n- Exits with error code 1 if connection fails",
    "Canonical_solution": "#include <unistd.h>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <stdio.h>\n#include <stdlib.h>\n\nint tcp_client_communication()\n{\n    int sockfd = -1;\n    int len = 0;\n    struct sockaddr_in address;\n    int result;\n    char ch = 'A';\n    \n    sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    \n    address.sin_family = AF_INET;\n    address.sin_addr.s_addr = inet_addr(\"127.0.0.1\");\n    address.sin_port = htons(9736);\n    len = sizeof(address);\n    \n    result = connect(sockfd, (struct sockaddr*)&address, len);\n\n    if(result == -1)\n    {\n        perror(\"ops:client\\n\");\n        exit(1);\n    }\n    \n    write(sockfd, &ch, 1);\n    read(sockfd, &ch, 1);\n    printf(\"char form server = %c\\n\", ch);\n    close(sockfd);\n    return 0;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 149,
    "matched_results": [
      "```cpp\n#include <iostream>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n#include <cstring>\n\nint tcp_client_communication() {\n    int sockfd;\n    struct sockaddr_in servaddr;\n\n    // Create socket file descriptor\n    if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation failed\" << std::endl;\n        return 1;\n    }\n\n    // Clear servaddr\n    memset(&servaddr, 0, sizeof(servaddr));\n\n    // Set server address and port\n    servaddr.sin_family = AF_INET;\n    servaddr.sin_port = htons(9736);\n    if (inet_pton(AF_INET, \"127.0.0.1\", &servaddr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        return 1;\n    }\n\n    // Connect to server\n    if (connect(sockfd, (struct sockaddr *)&servaddr, sizeof(servaddr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        return 1;\n    }\n\n    // Send a character to server\n    char sendline[] = \"A\";\n    if (send(sockfd, sendline, strlen(sendline), 0) < 0) {\n        std::cerr << \"Send failed\" << std::endl;\n        return 1;\n    }\n\n    // Receive response from server\n    char recvline[1024];\n    int n = read(sockfd, recvline, sizeof(recvline));\n    if (n < 0) {\n        std::cerr << \"Read failed\" << std::endl;\n        return 1;\n    }\n\n    // Print received character\n    std::cout << recvline << std::endl;\n\n    // Close the socket\n    close(sockfd);\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nint tcp_client_communication() {\n    int sockfd;\n    struct sockaddr_in servaddr;\n\n    // Create socket file descriptor\n    if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation failed\" << std::endl;\n        return 1;\n    }\n\n    // Clear servaddr struct\n    memset(&servaddr, 0, sizeof(servaddr));\n\n    // Set server address family, port and IP\n    servaddr.sin_family = AF_INET;\n    servaddr.sin_port = htons(9736);\n    servaddr.sin_addr.s_addr = inet_addr(\"127.0.0.1\");\n\n    // Connect to server\n    if (connect(sockfd, (struct sockaddr *)&servaddr, sizeof(servaddr)) < 0) {\n        std::cerr << \"Connection failed\" << std::endl;\n        return 1;\n    }\n\n    // Send a character to server\n    char sendline[] = \"A\";\n    if (write(sockfd, sendline, 1) < 0) {\n        std::cerr << \"Write failed\" << std::endl;\n        return 1;\n    }\n\n    // Read response from server\n    char recvline[1024];\n    int n = read(sockfd, recvline, 1024);\n    if (n < 0) {\n        std::cerr << \"Read failed\" << std::endl;\n        return 1;\n    }\n\n    // Print received character\n    std::cout << \"Received character: \" << recvline[0] << std::endl;\n\n    // Close the socket\n    close(sockfd);\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nint tcp_client_communication() {\n    int sockfd;\n    struct sockaddr_in servaddr;\n\n    // Create socket file descriptor\n    if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation failed\" << std::endl;\n        return 1;\n    }\n\n    // Clear servaddr\n    memset(&servaddr, 0, sizeof(servaddr));\n\n    // Set server address and port\n    servaddr.sin_family = AF_INET;\n    servaddr.sin_port = htons(9736);\n    if (inet_pton(AF_INET, \"127.0.0.1\", &servaddr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        return 1;\n    }\n\n    // Connect to server\n    if (connect(sockfd, (struct sockaddr *)&servaddr, sizeof(servaddr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        return 1;\n    }\n\n    // Send a character to server\n    char sendline[] = \"A\";\n    if (send(sockfd, sendline, strlen(sendline), 0) < 0) {\n        std::cerr << \"Send failed\" << std::endl;\n        return 1;\n    }\n\n    // Receive response from server\n    char recvline[1024];\n    int n = read(sockfd, recvline, sizeof(recvline) - 1);\n    if (n < 0) {\n        std::cerr << \"Read failed\" << std::endl;\n        return 1;\n    }\n\n    // Print received character\n    std::cout << recvline << std::endl;\n\n    // Close the socket\n    close(sockfd);\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n#include <cstring>\n\nint tcp_client_communication() {\n    int sockfd;\n    struct sockaddr_in servaddr;\n\n    // Create socket file descriptor\n    if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation failed\" << std::endl;\n        return 1;\n    }\n\n    // Clear servaddr\n    memset(&servaddr, 0, sizeof(servaddr));\n\n    // Set server address and port\n    servaddr.sin_family = AF_INET;\n    servaddr.sin_port = htons(9736);\n    if (inet_pton(AF_INET, \"127.0.0.1\", &servaddr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        return 1;\n    }\n\n    // Connect to server\n    if (connect(sockfd, (struct sockaddr *)&servaddr, sizeof(servaddr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        return 1;\n    }\n\n    // Send a character to server\n    char sendline[] = \"A\";\n    if (write(sockfd, sendline, strlen(sendline)) < 0) {\n        std::cerr << \"Write failed\" << std::endl;\n        return 1;\n    }\n\n    // Read response from server\n    char recvline[1024];\n    if (read(sockfd, recvline, sizeof(recvline)) < 0) {\n        std::cerr << \"Read failed\" << std::endl;\n        return 1;\n    }\n\n    // Print received character\n    std::cout << recvline[0] << std::endl;\n\n    // Close the socket\n    close(sockfd);\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n#include <cstring>\n\nint tcp_client_communication() {\n    int sockfd;\n    struct sockaddr_in servaddr;\n\n    // Create socket file descriptor\n    if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation failed\" << std::endl;\n        return 1;\n    }\n\n    // Clear servaddr\n    memset(&servaddr, 0, sizeof(servaddr));\n\n    // Set server address and port\n    servaddr.sin_family = AF_INET;\n    servaddr.sin_port = htons(9736);\n    if (inet_pton(AF_INET, \"127.0.0.1\", &servaddr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        return 1;\n    }\n\n    // Connect to server\n    if (connect(sockfd, (struct sockaddr *)&servaddr, sizeof(servaddr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        return 1;\n    }\n\n    // Send a character to server\n    char sendline[] = \"A\";\n    if (send(sockfd, sendline, strlen(sendline), 0) < 0) {\n        std::cerr << \"Send failed\" << std::endl;\n        return 1;\n    }\n\n    // Receive response from server\n    char recvline[1024];\n    int n = read(sockfd, recvline, sizeof(recvline) - 1);\n    if (n < 0) {\n        std::cerr << \"Read failed\" << std::endl;\n        return 1;\n    }\n    recvline[n] = '\\0'; // Null-terminate the received string\n    std::cout << \"Received: \" << recvline << std::endl;\n\n    // Close the socket\n    close(sockfd);\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n#include <cstring>\n\nint tcp_client_communication() {\n    int sockfd;\n    struct sockaddr_in servaddr;\n\n    // Create socket file descriptor\n    if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation failed\" << std::endl;\n        return 1;\n    }\n\n    // Clear servaddr\n    memset(&servaddr, 0, sizeof(servaddr));\n\n    // Set server address and port\n    servaddr.sin_family = AF_INET;\n    servaddr.sin_port = htons(9736);\n    if (inet_pton(AF_INET, \"127.0.0.1\", &servaddr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        return 1;\n    }\n\n    // Connect to server\n    if (connect(sockfd, (struct sockaddr *)&servaddr, sizeof(servaddr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        return 1;\n    }\n\n    // Send a character to server\n    char sendline[] = \"A\";\n    if (send(sockfd, sendline, strlen(sendline), 0) < 0) {\n        std::cerr << \"Send failed\" << std::endl;\n        return 1;\n    }\n\n    // Receive response from server\n    char recvline[1024];\n    int n = read(sockfd, recvline, sizeof(recvline));\n    if (n < 0) {\n        std::cerr << \"Read failed\" << std::endl;\n        return 1;\n    }\n\n    // Print received character\n    std::cout << recvline << std::endl;\n\n    // Close the socket\n    close(sockfd);\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n#include <cstring>\n\nint tcp_client_communication() {\n    int sockfd;\n    struct sockaddr_in servaddr;\n\n    // Create socket file descriptor\n    if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation failed\" << std::endl;\n        return 1;\n    }\n\n    // Set server address\n    memset(&servaddr, 0, sizeof(servaddr));\n    servaddr.sin_family = AF_INET;\n    servaddr.sin_port = htons(9736);\n    if (inet_pton(AF_INET, \"127.0.0.1\", &servaddr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        return 1;\n    }\n\n    // Connect to server\n    if (connect(sockfd, (struct sockaddr *)&servaddr, sizeof(servaddr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        return 1;\n    }\n\n    // Send a character to server\n    char sendline[] = \"A\";\n    if (send(sockfd, sendline, strlen(sendline), 0) < 0) {\n        std::cerr << \"Send failed\" << std::endl;\n        return 1;\n    }\n\n    // Receive response from server\n    char recvline[1024];\n    int n = read(sockfd, recvline, sizeof(recvline) - 1);\n    if (n < 0) {\n        std::cerr << \"Read failed\" << std::endl;\n        return 1;\n    }\n    recvline[n] = '\\0';\n    std::cout << \"Received: \" << recvline << std::endl;\n\n    // Close the socket\n    close(sockfd);\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nint tcp_client_communication() {\n    int sockfd;\n    struct sockaddr_in servaddr;\n\n    // Create socket file descriptor\n    if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation failed\" << std::endl;\n        return 1;\n    }\n\n    // Clear servaddr\n    memset(&servaddr, 0, sizeof(servaddr));\n\n    // Set server address and port\n    servaddr.sin_family = AF_INET;\n    servaddr.sin_port = htons(9736);\n    if (inet_pton(AF_INET, \"127.0.0.1\", &servaddr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        return 1;\n    }\n\n    // Connect to server\n    if (connect(sockfd, (struct sockaddr *)&servaddr, sizeof(servaddr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        return 1;\n    }\n\n    // Send a character to server\n    char sendline[] = \"A\";\n    if (send(sockfd, sendline, strlen(sendline), 0) < 0) {\n        std::cerr << \"Send failed\" << std::endl;\n        return 1;\n    }\n\n    // Receive response from server\n    char recvline[1024];\n    int n = read(sockfd, recvline, sizeof(recvline));\n    if (n < 0) {\n        std::cerr << \"Read failed\" << std::endl;\n        return 1;\n    }\n\n    // Print received character\n    std::cout << recvline << std::endl;\n\n    // Close the socket\n    close(sockfd);\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nint tcp_client_communication() {\n    int sockfd;\n    struct sockaddr_in servaddr;\n\n    // Create socket file descriptor\n    if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation failed\" << std::endl;\n        return 1;\n    }\n\n    // Clear servaddr\n    memset(&servaddr, 0, sizeof(servaddr));\n\n    // Set server address and port\n    servaddr.sin_family = AF_INET;\n    servaddr.sin_port = htons(9736);\n    if (inet_pton(AF_INET, \"127.0.0.1\", &servaddr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        return 1;\n    }\n\n    // Connect to server\n    if (connect(sockfd, (struct sockaddr *)&servaddr, sizeof(servaddr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        return 1;\n    }\n\n    // Send a character to server\n    char sendline[] = \"A\";\n    if (send(sockfd, sendline, strlen(sendline), 0) < 0) {\n        std::cerr << \"Send failed\" << std::endl;\n        return 1;\n    }\n\n    // Receive response from server\n    char recvline[1024];\n    int n = read(sockfd, recvline, sizeof(recvline));\n    if (n < 0) {\n        std::cerr << \"Read failed\" << std::endl;\n        return 1;\n    }\n\n    // Print received character\n    std::cout << recvline << std::endl;\n\n    // Close the socket\n    close(sockfd);\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nint tcp_client_communication() {\n    int sockfd;\n    struct sockaddr_in servaddr;\n\n    // Create socket file descriptor\n    if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation failed\" << std::endl;\n        return 1;\n    }\n\n    // Clear servaddr\n    memset(&servaddr, 0, sizeof(servaddr));\n\n    // Set server address and port\n    servaddr.sin_family = AF_INET;\n    servaddr.sin_port = htons(9736);\n    if (inet_pton(AF_INET, \"127.0.0.1\", &servaddr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        return 1;\n    }\n\n    // Connect to server\n    if (connect(sockfd, (struct sockaddr *)&servaddr, sizeof(servaddr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        return 1;\n    }\n\n    // Send a character to server\n    char sendline[] = \"A\";\n    if (send(sockfd, sendline, strlen(sendline), 0) < 0) {\n        std::cerr << \"Send failed\" << std::endl;\n        return 1;\n    }\n\n    // Receive response from server\n    char recvline[1024];\n    int n = read(sockfd, recvline, sizeof(recvline));\n    if (n < 0) {\n        std::cerr << \"Read failed\" << std::endl;\n        return 1;\n    }\n\n    // Print received character\n    std::cout << recvline << std::endl;\n\n    // Close the socket\n    close(sockfd);\n    return 0;\n}\n```"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 16,
    "Instruction": "Task Description: Implement a TCP client in C++ that can establish a connection to a server, send data, and receive responses.\n\nFunction Description: The code consists of two main functions for creating and communicating with a TCP client. The first function creates and connects a TCP socket to a specified server, while the second function handles the communication loop for sending and receiving data.\n\nInput:\n- create_tcp_client:\n  - server_ip: const char* - The IP address of the server to connect to\n  - port: int - The port number of the server to connect to\n- tcp_client_communication:\n  - sockfd: int - The socket file descriptor returned by create_tcp_client\n\nOutput:\n- create_tcp_client:\n  - Returns: int - The socket file descriptor on success, -1 on failure\n- tcp_client_communication:\n  - No return value (void), but performs continuous communication until connection is terminated",
    "Canonical_solution": "#include <sys/socket.h>\n#include <arpa/inet.h>\n#include <string.h>\n#include <unistd.h>\n\n#define BUFFER_SIZE 1024\n\nint create_tcp_client(const char* server_ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if(sockfd == -1) return -1;\n\n    struct sockaddr_in serv_addr;\n    bzero(&serv_addr, sizeof(serv_addr));\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_addr.s_addr = inet_addr(server_ip);\n    serv_addr.sin_port = htons(port);\n\n    if(connect(sockfd, (sockaddr*)&serv_addr, sizeof(serv_addr)) == -1) {\n        close(sockfd);\n        return -1;\n    }\n    \n    return sockfd;\n}\n\nvoid tcp_client_communication(int sockfd) {\n    while(true){\n        char buf[BUFFER_SIZE];\n        bzero(&buf, sizeof(buf));\n        scanf(\"%s\", buf);\n        ssize_t write_bytes = write(sockfd, buf, sizeof(buf));\n        if(write_bytes == -1){\n            printf(\"socket already disconnected, can't write any more!\\n\");\n            break;\n        }\n        bzero(&buf, sizeof(buf));\n        ssize_t read_bytes = read(sockfd, buf, sizeof(buf));\n        if(read_bytes > 0){\n            printf(\"message from server: %s\\n\", buf);\n        }else if(read_bytes == 0){\n            printf(\"server socket disconnected!\\n\");\n            break;\n        }else if(read_bytes == -1){\n            close(sockfd);\n            break;\n        }\n    }\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 149,
    "matched_results": [
      "```cpp\n#include <iostream>\n#include <string>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n#include <cstring>\n\nint create_tcp_client(const char* server_ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd == -1) {\n        return -1;\n    }\n\n    struct sockaddr_in servaddr;\n    memset(&servaddr, 0, sizeof(servaddr));\n    servaddr.sin_family = AF_INET;\n    servaddr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, server_ip, &servaddr.sin_addr) <= 0) {\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr *)&servaddr, sizeof(servaddr)) < 0) {\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcp_client_communication(int sockfd) {\n    char sendline[1024];\n    char recvline[1024];\n\n    while (true) {\n        std::cout << \"Enter message to send: \";\n        std::cin.getline(sendline, 1024);\n        if (strcmp(sendline, \"exit\") == 0) {\n            break;\n        }\n\n        write(sockfd, sendline, strlen(sendline));\n        read(sockfd, recvline, 1024);\n        std::cout << \"Server response: \" << recvline << std::endl;\n    }\n\n    close(sockfd);\n}\n```"
    ],
    "unmatched_results": [
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nint create_tcp_client(const char* server_ip, int port) {\n    int sockfd;\n    struct sockaddr_in servaddr;\n\n    sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd == -1) {\n        return -1;\n    }\n\n    memset(&servaddr, 0, sizeof(servaddr));\n    servaddr.sin_family = AF_INET;\n    servaddr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, server_ip, &servaddr.sin_addr) <= 0) {\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr *)&servaddr, sizeof(servaddr)) < 0) {\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcp_client_communication(int sockfd) {\n    char sendline[1024], recvline[1024];\n\n    while (true) {\n        std::cout << \"Enter message to send: \";\n        std::cin.getline(sendline, sizeof(sendline));\n\n        if (send(sockfd, sendline, strlen(sendline), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        if (recv(sockfd, recvline, sizeof(recvline), 0) < 0) {\n            std::cerr << \"Receive failed\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Server response: \" << recvline << std::endl;\n    }\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nint create_tcp_client(const char* server_ip, int port) {\n    int sockfd;\n    struct sockaddr_in servaddr;\n\n    sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd == -1) {\n        return -1;\n    }\n\n    memset(&servaddr, 0, sizeof(servaddr));\n    servaddr.sin_family = AF_INET;\n    servaddr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, server_ip, &servaddr.sin_addr) <= 0) {\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr *)&servaddr, sizeof(servaddr)) < 0) {\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcp_client_communication(int sockfd) {\n    char sendline[1024], recvline[1024];\n\n    while (true) {\n        std::cout << \"Enter message to send: \";\n        std::cin.getline(sendline, sizeof(sendline));\n        if (strcmp(sendline, \"exit\") == 0) {\n            break;\n        }\n\n        write(sockfd, sendline, strlen(sendline));\n        read(sockfd, recvline, sizeof(recvline));\n        std::cout << \"Server response: \" << recvline << std::endl;\n    }\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nint create_tcp_client(const char* server_ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd < 0) {\n        return -1;\n    }\n\n    struct sockaddr_in servaddr;\n    memset(&servaddr, 0, sizeof(servaddr));\n    servaddr.sin_family = AF_INET;\n    servaddr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, server_ip, &servaddr.sin_addr) <= 0) {\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr *)&servaddr, sizeof(servaddr)) < 0) {\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcp_client_communication(int sockfd) {\n    char sendline[1024], recvline[1024];\n    while (true) {\n        std::cout << \"Enter message to send: \";\n        std::cin.getline(sendline, 1024);\n        if (strcmp(sendline, \"exit\") == 0) {\n            break;\n        }\n        write(sockfd, sendline, strlen(sendline));\n        read(sockfd, recvline, 1024);\n        std::cout << \"Server response: \" << recvline << std::endl;\n    }\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nint create_tcp_client(const char* server_ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd < 0) {\n        return -1;\n    }\n\n    struct sockaddr_in servaddr;\n    memset(&servaddr, 0, sizeof(servaddr));\n    servaddr.sin_family = AF_INET;\n    servaddr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, server_ip, &servaddr.sin_addr) <= 0) {\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr *)&servaddr, sizeof(servaddr)) < 0) {\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcp_client_communication(int sockfd) {\n    char sendline[1024], recvline[1024];\n    while (true) {\n        std::cout << \"Enter message to send: \";\n        std::cin.getline(sendline, 1024);\n        if (strcmp(sendline, \"exit\") == 0) {\n            break;\n        }\n        write(sockfd, sendline, strlen(sendline));\n        read(sockfd, recvline, 1024);\n        std::cout << \"Server response: \" << recvline << std::endl;\n    }\n}\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n#include <cstring>\n\nint create_tcp_client(const char* server_ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd == -1) {\n        return -1;\n    }\n\n    struct sockaddr_in serv_addr;\n    memset(&serv_addr, 0, sizeof(serv_addr));\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, server_ip, &serv_addr.sin_addr) <= 0) {\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcp_client_communication(int sockfd) {\n    char buffer[1024];\n    while (true) {\n        std::cout << \"Enter message to send: \";\n        std::cin.getline(buffer, sizeof(buffer));\n        if (strcmp(buffer, \"exit\") == 0) {\n            break;\n        }\n\n        send(sockfd, buffer, strlen(buffer), 0);\n\n        int n = recv(sockfd, buffer, sizeof(buffer), 0);\n        if (n < 0) {\n            break;\n        }\n\n        std::cout << \"Server response: \" << buffer << std::endl;\n    }\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nint create_tcp_client(const char* server_ip, int port) {\n    int sockfd;\n    struct sockaddr_in servaddr;\n\n    sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd == -1) {\n        return -1;\n    }\n\n    memset(&servaddr, 0, sizeof(servaddr));\n    servaddr.sin_family = AF_INET;\n    servaddr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, server_ip, &servaddr.sin_addr) <= 0) {\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr *)&servaddr, sizeof(servaddr)) < 0) {\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcp_client_communication(int sockfd) {\n    char sendline[1024], recvline[1024];\n    ssize_t n;\n\n    while (true) {\n        std::cout << \"Enter message to send: \";\n        std::cin.getline(sendline, sizeof(sendline));\n        if (sendline[0] == 'q') {\n            break;\n        }\n\n        send(sockfd, sendline, strlen(sendline), 0);\n\n        n = recv(sockfd, recvline, sizeof(recvline), 0);\n        recvline[n] = '\\0';\n        std::cout << \"Server: \" << recvline << std::endl;\n    }\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nint create_tcp_client(const char* server_ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd < 0) {\n        return -1;\n    }\n\n    struct sockaddr_in servaddr;\n    memset(&servaddr, 0, sizeof(servaddr));\n    servaddr.sin_family = AF_INET;\n    servaddr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, server_ip, &servaddr.sin_addr) <= 0) {\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr *)&servaddr, sizeof(servaddr)) < 0) {\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcp_client_communication(int sockfd) {\n    char sendline[1024], recvline[1024];\n    while (true) {\n        std::cout << \"Enter message to send: \";\n        std::cin.getline(sendline, 1024);\n        if (strcmp(sendline, \"exit\") == 0) {\n            break;\n        }\n        write(sockfd, sendline, strlen(sendline));\n        read(sockfd, recvline, 1024);\n        std::cout << \"Server response: \" << recvline << std::endl;\n    }\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nint create_tcp_client(const char* server_ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd == -1) {\n        return -1;\n    }\n\n    struct sockaddr_in serv_addr;\n    memset(&serv_addr, 0, sizeof(serv_addr));\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, server_ip, &serv_addr.sin_addr) <= 0) {\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcp_client_communication(int sockfd) {\n    char buffer[1024] = {0};\n    while (true) {\n        ssize_t read_size = read(sockfd, buffer, sizeof(buffer) - 1);\n        if (read_size <= 0) {\n            break;\n        }\n        std::cout << \"Received: \" << buffer << std::endl;\n        memset(buffer, 0, sizeof(buffer));\n    }\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nint create_tcp_client(const char* server_ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd < 0) {\n        return -1;\n    }\n\n    struct sockaddr_in servaddr;\n    memset(&servaddr, 0, sizeof(servaddr));\n    servaddr.sin_family = AF_INET;\n    servaddr.sin_port = htons(port);\n\n    if (inet_pton(AF_INET, server_ip, &servaddr.sin_addr) <= 0) {\n        close(sockfd);\n        return -1;\n    }\n\n    if (connect(sockfd, (struct sockaddr *)&servaddr, sizeof(servaddr)) < 0) {\n        close(sockfd);\n        return -1;\n    }\n\n    return sockfd;\n}\n\nvoid tcp_client_communication(int sockfd) {\n    char sendline[1024], recvline[1024];\n    while (true) {\n        std::cout << \"Enter message to send: \";\n        std::cin.getline(sendline, 1024);\n        if (strcmp(sendline, \"exit\") == 0) {\n            break;\n        }\n\n        write(sockfd, sendline, strlen(sendline));\n        read(sockfd, recvline, 1024);\n        std::cout << \"Server response: \" << recvline << std::endl;\n    }\n}\n```"
    ],
    "match_count": 1,
    "pass@3": 0.30000000000000004,
    "pass@5": 0.5
  },
  {
    "Task_id": 17,
    "Instruction": "Task Description: Implement a TCP client socket class in C++ that handles connection establishment, data transmission, and connection management with a remote server, supporting both IPv4 and IPv6 protocols.\n\nClass Description: The ClientSocket class provides TCP client functionality with support for both IPv4 and IPv6 connections. It handles socket creation, connection establishment with timeout support, send buffer configuration, and connection cleanup. The class is designed to work within a multi-threaded context and supports encryption parameters.\n\nAttributes:\n- dest_: std::string - Destination hostname or IP address to connect to\n- threadCtx_: ThreadCtx& - Reference to thread context containing configuration options\n- sa_: struct addrinfo - Address information structure for socket configuration\n- socket_: std::unique_ptr<WdtSocket> - Smart pointer to the underlying socket implementation\n- peerIp_: std::string - IP address of the connected peer\n\nMethods:\n- Constructor: ClientSocket(ThreadCtx& threadCtx, const string& dest, int port, const EncryptionParams& encryptionParams, int64_t ivChangeInterval) -> void - Initializes the client socket with destination, port, and encryption parameters\n- connect: connect() -> ErrorCode - Establishes connection to the remote server with timeout handling, returns connection status\n- getPeerIp: getPeerIp() -> const std::string& - Returns the IP address of the connected peer\n- setSendBufferSize: setSendBufferSize() -> void - Configures the socket's send buffer size based on thread context options\n- closeConnection: closeConnection() -> void [private] - Closes the active socket connection",
    "Canonical_solution": "#include <fcntl.h>\n#include <folly/Conv.h>\n#include <folly/ScopeGuard.h>\n#include <glog/logging.h>\n#include <poll.h>\n#include <sys/socket.h>\n#include <wdt/Reporting.h>\n#include <wdt/util/ClientSocket.h>\n\nnamespace facebook {\nnamespace wdt {\n\nusing std::string;\n\nclass ClientSocket {\npublic:\n  ClientSocket(ThreadCtx &threadCtx, const string &dest,\n               const int port,\n               const EncryptionParams &encryptionParams,\n               int64_t ivChangeInterval)\n      : dest_(dest), threadCtx_(threadCtx) {\n    memset(&sa_, 0, sizeof(sa_));\n    socket_ = std::make_unique<WdtSocket>(threadCtx, port, encryptionParams,\n                                          ivChangeInterval, nullptr);\n    if (threadCtx_.getOptions().ipv6) {\n      sa_.ai_family = AF_INET6;\n    }\n    if (threadCtx_.getOptions().ipv4) {\n      sa_.ai_family = AF_INET;\n    }\n    sa_.ai_socktype = SOCK_STREAM;\n  }\n\n  ErrorCode connect() {\n    auto fd = socket_->getFd();\n    auto port = socket_->getPort();\n    WDT_CHECK(fd < 0) << \"Previous connection not closed \" << fd << \" \" << port;\n    \n    struct addrinfo *infoList = nullptr;\n    auto guard = folly::makeGuard([&] {\n      if (infoList) {\n        freeaddrinfo(infoList);\n      }\n    });\n    \n    string portStr = folly::to<string>(port);\n    int res = getaddrinfo(dest_.c_str(), portStr.c_str(), &sa_, &infoList);\n    if (res) {\n      WLOG(ERROR) << \"Failed getaddrinfo \" << dest_ << \" , \" << port << \" : \"\n                  << res << \" : \" << gai_strerror(res);\n      return CONN_ERROR;\n    }\n    \n    int count = 0;\n    for (struct addrinfo *info = infoList; info != nullptr;\n         info = info->ai_next) {\n      ++count;\n      std::string host, port_2;\n      WdtSocket::getNameInfo(info->ai_addr, info->ai_addrlen, host, port_2);\n      WVLOG(2) << \"will connect to \" << host << \" \" << port_2;\n      \n      fd = socket(info->ai_family, info->ai_socktype, info->ai_protocol);\n      if (fd == -1) {\n        WPLOG(WARNING) << \"Error making socket for port_2 \" << port_2;\n        continue;\n      }\n      \n      socket_->setFd(fd);\n      setSendBufferSize();\n\n      int sockArg = fcntl(fd, F_GETFL, nullptr);\n      sockArg |= O_NONBLOCK;\n      res = fcntl(fd, F_SETFL, sockArg);\n      if (res < 0) {\n        WPLOG(ERROR) << \"Failed to make the socket non-blocking \" << port_2\n                     << \" sock \" << sockArg << \" res \" << res;\n        closeConnection();\n        continue;\n      }\n\n      if (::connect(fd, info->ai_addr, info->ai_addrlen) != 0) {\n        if (errno != EINPROGRESS) {\n          WPLOG(INFO) << \"Error connecting on \" << host << \" \" << port_2;\n          closeConnection();\n          continue;\n        }\n        \n        auto startTime = Clock::now();\n        int connectTimeout = threadCtx_.getOptions().connect_timeout_millis;\n\n        while (true) {\n          if (threadCtx_.getAbortChecker()->shouldAbort()) {\n            WLOG(ERROR) << \"Transfer aborted during connect \" << port_2 << \" \"\n                        << fd;\n            closeConnection();\n            return ABORT;\n          }\n          \n          int timeElapsed = durationMillis(Clock::now() - startTime);\n          if (timeElapsed >= connectTimeout) {\n            WVLOG(1) << \"connect() timed out\" << host << \" \" << port_2;\n            closeConnection();\n            return CONN_ERROR_RETRYABLE;\n          }\n          \n          int pollTimeout =\n              std::min(connectTimeout - timeElapsed,\n                       threadCtx_.getOptions().abort_check_interval_millis);\n          struct pollfd pollFds[] = {{fd, POLLOUT, 0}};\n\n          if ((res = poll(pollFds, 1, pollTimeout)) <= 0) {\n            if (errno == EINTR) {\n              WVLOG(1) << \"poll() call interrupted. retrying... \" << port_2;\n              continue;\n            }\n            if (res == 0) {\n              WVLOG(1) << \"poll() timed out \" << host << \" \" << port_2;\n              continue;\n            }\n            WPLOG(ERROR) << \"poll() failed \" << host << \" \" << port_2 << \" \"\n                         << fd;\n            closeConnection();\n            return CONN_ERROR;\n          }\n          break;\n        }\n\n        int connectResult;\n        socklen_t len = sizeof(connectResult);\n        if (getsockopt(fd, SOL_SOCKET, SO_ERROR, &connectResult, &len) < 0) {\n          WPLOG(WARNING) << \"getsockopt() failed\";\n          closeConnection();\n          continue;\n        }\n        if (connectResult != 0) {\n          WLOG(WARNING) << \"connect did not succeed on \" << host << \" \" << port_2\n                        << \" : \" << strerrorStr(connectResult);\n          closeConnection();\n          continue;\n        }\n      }\n\n      sockArg = fcntl(fd, F_GETFL, nullptr);\n      sockArg &= (~O_NONBLOCK);\n      res = fcntl(fd, F_SETFL, sockArg);\n      if (res == -1) {\n        WPLOG(ERROR) << \"Could not make the socket blocking \" << port_2;\n        closeConnection();\n        continue;\n      }\n      \n      WVLOG(1) << \"Successful connect on \" << fd;\n      peerIp_ = host;\n      sa_ = *info;\n      break;\n    }\n    \n    if (socket_->getFd() < 0) {\n      if (count > 1) {\n        WLOG(INFO) << \"Unable to connect to either of the \" << count << \" addrs\";\n      }\n      return CONN_ERROR_RETRYABLE;\n    }\n    \n    socket_->setSocketTimeouts();\n    socket_->setDscp(threadCtx_.getOptions().dscp);\n    return OK;\n  }\n\n  const std::string &getPeerIp() const {\n    return peerIp_;\n  }\n\n  void setSendBufferSize() {\n    int bufSize = threadCtx_.getOptions().send_buffer_size;\n    auto fd = socket_->getFd();\n    auto port = socket_->getPort();\n    if (bufSize <= 0) {\n      return;\n    }\n    int status =\n        ::setsockopt(fd, SOL_SOCKET, SO_SNDBUF, &bufSize, sizeof(bufSize));\n    if (status != 0) {\n      WPLOG(ERROR) << \"Failed to set send buffer \" << port << \" size \" << bufSize\n                   << \" fd \" << fd;\n      return;\n    }\n    WVLOG(1) << \"Send buffer size set to \" << bufSize << \" port \" << port;\n  }\n\nprivate:\n  std::string dest_;\n  ThreadCtx &threadCtx_;\n  struct addrinfo sa_;\n  std::unique_ptr<WdtSocket> socket_;\n  std::string peerIp_;\n\n  void closeConnection() {\n    socket_->close();\n  }\n};\n\n}  // namespace wdt\n}  // namespace facebook",
    "Code_level": "Class-level",
    "FSMID_for_test": 149,
    "matched_results": [
      "```cpp\n#include <iostream>\n#include <string>\n#include <memory>\n#include <stdexcept>\n#include <thread>\n#include <chrono>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#include <cstring>\n\nclass WdtSocket {\npublic:\n    int create() {\n        return socket(AF_INET, SOCK_STREAM, 0);\n    }\n\n    void setNonBlocking(int socket) {\n        int flags = fcntl(socket, F_GETFL, 0);\n        if (flags == -1) {\n            throw std::runtime_error(\"Failed to get socket flags\");\n        }\n        flags |= O_NONBLOCK;\n        if (fcntl(socket, F_SETFL, flags) == -1) {\n            throw std::runtime_error(\"Failed to set socket to non-blocking mode\");\n        }\n    }\n\n    bool isConnected(int socket) {\n        sockaddr_in sin;\n        socklen_t len = sizeof(sin);\n        if (getsockopt(socket, SOL_SOCKET, SO_ERROR, &sin, &len) == -1) {\n            return false;\n        }\n        return sin.sin_addr.s_addr != 0;\n    }\n\n    void close(int socket) {\n        close(socket);\n    }\n};\n\nclass ThreadCtx {\npublic:\n    int sendBufferSize;\n};\n\nclass EncryptionParams {\npublic:\n    int ivChangeInterval;\n};\n\nclass ClientSocket {\nprivate:\n    std::string dest_;\n    ThreadCtx& threadCtx_;\n    struct addrinfo sa_;\n    std::unique_ptr<WdtSocket> socket_;\n    std::string peerIp_;\n\npublic:\n    ClientSocket(ThreadCtx& threadCtx, const std::string& dest, int port, const EncryptionParams& encryptionParams, int64_t ivChangeInterval)\n        : threadCtx_(threadCtx), dest_(dest) {\n        memset(&sa_, 0, sizeof(sa_));\n        sa_.ai_family = AF_UNSPEC;\n        sa_.ai_socktype = SOCK_STREAM;\n        sa_.ai_flags = AI_PASSIVE;\n        if (getaddrinfo(dest.c_str(), std::to_string(port).c_str(), &sa_, &sa_) != 0) {\n            throw std::runtime_error(\"Failed to get address information\");\n        }\n        socket_ = std::make_unique<WdtSocket>();\n        socket_->setNonBlocking(socket_->create());\n    }\n\n    ErrorCode connect() {\n        int sock = socket_->create();\n        if (connect(sock, sa_.ai_addr, sa_.ai_addrlen) == -1) {\n            if (errno == EINPROGRESS) {\n                fd_set fds;\n                struct timeval timeout;\n                FD_ZERO(&fds);\n                FD_SET(sock, &fds);\n                timeout.tv_sec = threadCtx_.sendBufferSize;\n                timeout.tv_usec = 0;\n                if (select(sock + 1, NULL, NULL, &fds, &timeout) == 1) {\n                    if (socket_->isConnected(sock)) {\n                        peerIp_ = inet_ntoa(((sockaddr_in*)sa_.ai_addr)->sin_addr);\n                        return ErrorCode::SUCCESS;\n                    }\n                }\n            }\n            return ErrorCode::CONNECTION_FAILED;\n        }\n        peerIp_ = inet_ntoa(((sockaddr_in*)sa_.ai_addr)->sin_addr);\n        return ErrorCode::SUCCESS;\n    }\n\n    const std::string& getPeerIp() const {\n        return peerIp_;\n    }\n\n    void setSendBufferSize() {\n        socket_->setNonBlocking(socket_->create());\n        socket_->setSendBufferSize(threadCtx_.sendBufferSize);\n    }\n\n    void closeConnection() {\n        socket_->close(socket_->create());\n    }\n};\n\nenum class ErrorCode {\n    SUCCESS,\n    CONNECTION_FAILED\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <memory>\n#include <stdexcept>\n#include <thread>\n#include <chrono>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#include <cstring>\n\nclass WdtSocket {\npublic:\n    int fd() const { return fd_; }\n    void setNonBlocking() { int flags = fcntl(fd_, F_GETFL, 0); fcntl(fd_, F_SETFL, flags | O_NONBLOCK); }\n    void setBlocking() { int flags = fcntl(fd_, F_GETFL, 0); fcntl(fd_, F_SETFL, flags & ~O_NONBLOCK); }\n    ssize_t send(const void* buffer, size_t len) { return send(fd_, buffer, len, 0); }\n    ssize_t recv(void* buffer, size_t len) { return recv(fd_, buffer, len, 0); }\n    void close() { close(fd_); }\nprivate:\n    int fd_ = -1;\n};\n\nclass ThreadCtx {\npublic:\n    int sendBufferSize() const { return sendBufferSize_; }\n    int timeout() const { return timeout_; }\nprivate:\n    int sendBufferSize_ = 0;\n    int timeout_ = 0;\n};\n\nclass EncryptionParams {\npublic:\n    EncryptionParams(const std::string& key, const std::string& iv) : key_(key), iv_(iv) {}\nprivate:\n    std::string key_;\n    std::string iv_;\n};\n\nclass ClientSocket {\nprivate:\n    std::string dest_;\n    ThreadCtx& threadCtx_;\n    struct addrinfo sa_;\n    std::unique_ptr<WdtSocket> socket_;\n    std::string peerIp_;\n\npublic:\n    ClientSocket(ThreadCtx& threadCtx, const std::string& dest, int port, const EncryptionParams& encryptionParams, int64_t ivChangeInterval)\n        : threadCtx_(threadCtx), dest_(dest) {\n        memset(&sa_, 0, sizeof(sa_));\n        sa_.ai_family = AF_UNSPEC;\n        sa_.ai_socktype = SOCK_STREAM;\n        sa_.ai_flags = AI_PASSIVE;\n    }\n\n    ErrorCode connect() {\n        int rc = getaddrinfo(dest_.c_str(), std::to_string(12345).c_str(), &sa_, nullptr);\n        if (rc != 0) {\n            return ErrorCode::GETADDRINFO_FAILED;\n        }\n\n        socket_ = std::make_unique<WdtSocket>();\n        socket_->fd_ = socket(sa_.ai_family, sa_.ai_socktype, sa_.ai_protocol);\n        if (socket_->fd_ == -1) {\n            return ErrorCode::SOCKET_FAILED;\n        }\n\n        socket_->setNonBlocking();\n        if (connect(socket_->fd_, sa_.ai_addr, sa_.ai_addrlen) == -1) {\n            if (errno == EINPROGRESS) {\n                fd_set fds;\n                FD_ZERO(&fds);\n                FD_SET(socket_->fd_, &fds);\n                struct timeval timeout;\n                timeout.tv_sec = threadCtx_.timeout();\n                timeout.tv_usec = 0;\n                int sel = select(socket_->fd_ + 1, nullptr, nullptr, &fds, &timeout);\n                if (sel == -1) {\n                    return ErrorCode::SELECT_FAILED;\n                } else if (sel == 0) {\n                    return ErrorCode::TIMEOUT;\n                } else if (FD_ISSET(socket_->fd_, &fds)) {\n                    socklen_t len = sizeof(int);\n                    int err = 0;\n                    if (getsockopt(socket_->fd_, SOL_SOCKET, SO_ERROR, &err, &len) == -1) {\n                        return ErrorCode::GETSOCKOPT_FAILED;\n                    }\n                    if (err != 0) {\n                        return ErrorCode::CONNECT_FAILED;\n                    }\n                }\n            }\n        }\n\n        freeaddrinfo(sa_.ai_addr);\n        return ErrorCode::SUCCESS;\n    }\n\n    const std::string& getPeerIp() const {\n        if (socket_ && socket_->fd_ != -1) {\n            socklen_t len = sizeof(struct sockaddr_in6);\n            struct sockaddr_in6 peer;\n            if (getpeername(socket_->fd_, (struct sockaddr*)&peer, &len) == 0) {\n                peerIp_ = inet_ntop(AF_INET6, &peer.sin6_addr, peerIp_.data(), len);\n            }\n        }\n        return peerIp_;\n    }\n\n    void setSendBufferSize() {\n        if (socket_ && socket_->fd_ != -1) {\n            int size = threadCtx_.sendBufferSize();\n            if (setsockopt(socket_->fd_, SOL_SOCKET, SO_SNDBUF, &size, sizeof(size)) == -1) {\n                throw std::runtime_error(\"Failed to set send buffer size\");\n            }\n        }\n    }\n\n    void closeConnection() {\n        if (socket_ && socket_->fd_ != -1) {\n            socket_->close();\n            socket_->fd_ = -1;\n        }\n    }\n};\n\nenum class ErrorCode {\n    SUCCESS,\n    GETADDRINFO_FAILED,\n    SOCKET_FAILED,\n    SELECT_FAILED,\n    TIMEOUT,\n    GETSOCKOPT_FAILED,\n    CONNECT_FAILED\n};\n```"
    ],
    "unmatched_results": [
      "```cpp\n#include <iostream>\n#include <string>\n#include <memory>\n#include <stdexcept>\n#include <thread>\n#include <chrono>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#include <cstring>\n\nclass ThreadCtx {\npublic:\n    int sendBufferSize;\n    // Other thread context configuration options\n};\n\nclass EncryptionParams {\npublic:\n    // Encryption parameters\n};\n\nclass WdtSocket {\npublic:\n    int connect(const struct sockaddr* addr, socklen_t addrlen);\n    ssize_t send(const void* buffer, size_t length, int flags);\n    ssize_t recv(void* buffer, size_t length, int flags);\n    void setsockopt(int level, int optname, const void* optval, socklen_t optlen);\n    void close();\n    // Other WdtSocket methods\n};\n\nclass ClientSocket {\nprivate:\n    std::string dest_;\n    ThreadCtx& threadCtx_;\n    struct addrinfo sa_;\n    std::unique_ptr<WdtSocket> socket_;\n    std::string peerIp_;\n\npublic:\n    ClientSocket(ThreadCtx& threadCtx, const std::string& dest, int port, const EncryptionParams& encryptionParams, int64_t ivChangeInterval)\n        : threadCtx_(threadCtx), dest_(dest) {\n        // Initialize socket and other attributes\n    }\n\n    ErrorCode connect() {\n        // Establish connection to the remote server with timeout handling\n        return ErrorCode::SUCCESS;\n    }\n\n    const std::string& getPeerIp() const {\n        return peerIp_;\n    }\n\n    void setSendBufferSize() {\n        // Configure the socket's send buffer size based on thread context options\n    }\n\nprivate:\n    void closeConnection() {\n        // Closes the active socket connection\n    }\n};\n\nenum class ErrorCode {\n    SUCCESS,\n    ERROR\n};\n\n// Other necessary includes and definitions\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <memory>\n#include <stdexcept>\n#include <thread>\n#include <chrono>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#include <cstring>\n\nclass ThreadCtx {\npublic:\n    // Thread context implementation\n};\n\nclass EncryptionParams {\npublic:\n    // Encryption parameters implementation\n};\n\nclass WdtSocket {\npublic:\n    int connect(const struct sockaddr* addr, socklen_t addrlen);\n    ssize_t send(const void* buffer, size_t length, int flags);\n    ssize_t recv(void* buffer, size_t length, int flags);\n    void setsockopt(int level, int optname, const void* optval, socklen_t optlen);\n    void shutdown(int how);\n    void close();\n};\n\nclass ClientSocket {\nprivate:\n    std::string dest_;\n    ThreadCtx& threadCtx_;\n    struct addrinfo sa_;\n    std::unique_ptr<WdtSocket> socket_;\n    std::string peerIp_;\n\npublic:\n    ClientSocket(ThreadCtx& threadCtx, const std::string& dest, int port, const EncryptionParams& encryptionParams, int64_t ivChangeInterval)\n        : threadCtx_(threadCtx), dest_(dest) {\n        // Initialize socket and other members\n    }\n\n    ErrorCode connect() {\n        // Establish connection to the remote server with timeout handling\n        return ErrorCode::SUCCESS;\n    }\n\n    const std::string& getPeerIp() const {\n        return peerIp_;\n    }\n\n    void setSendBufferSize() {\n        // Configure the socket's send buffer size based on thread context options\n    }\n\nprivate:\n    void closeConnection() {\n        // Closes the active socket connection\n    }\n};\n\nenum class ErrorCode {\n    SUCCESS,\n    ERROR\n};\n\n// Example usage\nint main() {\n    ThreadCtx threadCtx;\n    EncryptionParams encryptionParams;\n    ClientSocket clientSocket(threadCtx, \"example.com\", 80, encryptionParams, 1000);\n    ErrorCode result = clientSocket.connect();\n    if (result == ErrorCode::SUCCESS) {\n        std::cout << \"Connected to server\" << std::endl;\n    } else {\n        std::cout << \"Failed to connect to server\" << std::endl;\n    }\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <memory>\n#include <stdexcept>\n#include <thread>\n#include <chrono>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#include <cstring>\n\nclass ThreadCtx {\npublic:\n    int sendBufferSize;\n    // Other thread context configuration options\n};\n\nclass EncryptionParams {\npublic:\n    // Encryption parameters\n};\n\nclass WdtSocket {\npublic:\n    int connect(const struct sockaddr* addr, socklen_t addrlen);\n    ssize_t send(const void* buffer, size_t length, int flags);\n    ssize_t recv(void* buffer, size_t length, int flags);\n    void setsockopt(int level, int optname, const void* optval, socklen_t optlen);\n    void close();\n    // Other WdtSocket methods\n};\n\nclass ClientSocket {\nprivate:\n    std::string dest_;\n    ThreadCtx& threadCtx_;\n    struct addrinfo sa_;\n    std::unique_ptr<WdtSocket> socket_;\n    std::string peerIp_;\n\npublic:\n    ClientSocket(ThreadCtx& threadCtx, const std::string& dest, int port, const EncryptionParams& encryptionParams, int64_t ivChangeInterval)\n        : threadCtx_(threadCtx), dest_(dest) {\n        // Initialize socket and other attributes\n    }\n\n    ErrorCode connect() {\n        // Establish connection to the remote server with timeout handling\n        return ErrorCode::SUCCESS;\n    }\n\n    const std::string& getPeerIp() const {\n        return peerIp_;\n    }\n\n    void setSendBufferSize() {\n        // Configure the socket's send buffer size based on thread context options\n    }\n\nprivate:\n    void closeConnection() {\n        // Closes the active socket connection\n    }\n};\n\nenum class ErrorCode {\n    SUCCESS,\n    ERROR\n};\n\n// Other necessary includes and definitions\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <memory>\n#include <stdexcept>\n#include <thread>\n#include <mutex>\n#include <chrono>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#include <cstring>\n\nclass ThreadCtx {\npublic:\n    // Thread context implementation\n};\n\nclass EncryptionParams {\npublic:\n    // Encryption parameters implementation\n};\n\nclass WdtSocket {\npublic:\n    int connect(const struct sockaddr* addr, socklen_t addrlen);\n    ssize_t send(const void* buffer, size_t length, int flags);\n    ssize_t recv(void* buffer, size_t length, int flags);\n    void setsockopt(int level, int optname, const void* optval, socklen_t optlen);\n    void shutdown(int how);\n    ~WdtSocket();\n};\n\nclass ClientSocket {\nprivate:\n    std::string dest_;\n    ThreadCtx& threadCtx_;\n    struct addrinfo sa_;\n    std::unique_ptr<WdtSocket> socket_;\n    std::string peerIp_;\n    std::mutex mtx_;\n\npublic:\n    ClientSocket(ThreadCtx& threadCtx, const std::string& dest, int port, const EncryptionParams& encryptionParams, int64_t ivChangeInterval) : threadCtx_(threadCtx), dest_(dest) {\n        // Constructor implementation\n    }\n\n    ErrorCode connect() {\n        // Connect implementation\n    }\n\n    const std::string& getPeerIp() const {\n        return peerIp_;\n    }\n\n    void setSendBufferSize() {\n        // Set send buffer size implementation\n    }\n\nprivate:\n    void closeConnection() {\n        // Close connection implementation\n    }\n};\n\nclass ErrorCode {\npublic:\n    // Error code implementation\n};\n\nWdtSocket::~WdtSocket() {\n    // Destructor implementation\n}\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <memory>\n#include <stdexcept>\n#include <thread>\n#include <chrono>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#include <cstring>\n\nclass ThreadCtx {\npublic:\n    // Thread context implementation\n};\n\nclass EncryptionParams {\npublic:\n    // Encryption parameters implementation\n};\n\nclass WdtSocket {\npublic:\n    int connect(const struct sockaddr* addr, socklen_t addrlen);\n    ssize_t send(const void* buffer, size_t length, int flags);\n    ssize_t recv(void* buffer, size_t length, int flags);\n    void setsockopt(int level, int optname, const void* optval, socklen_t optlen);\n    void shutdown(int how);\n    void close();\n};\n\nclass ClientSocket {\nprivate:\n    std::string dest_;\n    ThreadCtx& threadCtx_;\n    struct addrinfo sa_;\n    std::unique_ptr<WdtSocket> socket_;\n    std::string peerIp_;\n\npublic:\n    ClientSocket(ThreadCtx& threadCtx, const std::string& dest, int port, const EncryptionParams& encryptionParams, int64_t ivChangeInterval)\n        : threadCtx_(threadCtx), dest_(dest) {\n        // Initialization code\n    }\n\n    ErrorCode connect() {\n        // Connection establishment code\n    }\n\n    const std::string& getPeerIp() const {\n        return peerIp_;\n    }\n\n    void setSendBufferSize() {\n        // Send buffer size configuration code\n    }\n\nprivate:\n    void closeConnection() {\n        // Connection cleanup code\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <memory>\n#include <stdexcept>\n#include <thread>\n#include <chrono>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#include <cstring>\n\nclass ThreadCtx {\npublic:\n    int sendBufferSize;\n    // Other thread context configuration options\n};\n\nclass EncryptionParams {\npublic:\n    // Encryption parameters\n};\n\nclass WdtSocket {\npublic:\n    int connect(const struct sockaddr* addr, socklen_t addrlen);\n    ssize_t send(const void* buffer, size_t length, int flags);\n    ssize_t recv(void* buffer, size_t length, int flags);\n    void setsockopt(int level, int optname, const void* optval, socklen_t optlen);\n    void close();\n    // Other WdtSocket methods\n};\n\nclass ClientSocket {\nprivate:\n    std::string dest_;\n    ThreadCtx& threadCtx_;\n    struct addrinfo sa_;\n    std::unique_ptr<WdtSocket> socket_;\n    std::string peerIp_;\n\npublic:\n    ClientSocket(ThreadCtx& threadCtx, const std::string& dest, int port, const EncryptionParams& encryptionParams, int64_t ivChangeInterval)\n        : threadCtx_(threadCtx), dest_(dest) {\n        // Initialize socket and other attributes\n    }\n\n    ErrorCode connect() {\n        // Establish connection to the remote server with timeout handling\n        return ErrorCode::SUCCESS;\n    }\n\n    const std::string& getPeerIp() const {\n        return peerIp_;\n    }\n\n    void setSendBufferSize() {\n        // Configure the socket's send buffer size based on thread context options\n    }\n\nprivate:\n    void closeConnection() {\n        // Closes the active socket connection\n    }\n};\n\nenum class ErrorCode {\n    SUCCESS,\n    ERROR\n};\n\n// Other necessary includes and definitions\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <memory>\n#include <stdexcept>\n#include <thread>\n#include <chrono>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#include <cstring>\n\nclass ThreadCtx {\npublic:\n    int sendBufferSize;\n    // Other thread context options\n};\n\nclass EncryptionParams {\npublic:\n    // Encryption parameters\n};\n\nclass WdtSocket {\npublic:\n    int fd;\n    // WdtSocket methods\n};\n\nclass ClientSocket {\nprivate:\n    std::string dest_;\n    ThreadCtx& threadCtx_;\n    struct addrinfo sa_;\n    std::unique_ptr<WdtSocket> socket_;\n    std::string peerIp_;\n\npublic:\n    ClientSocket(ThreadCtx& threadCtx, const std::string& dest, int port, const EncryptionParams& encryptionParams, int64_t ivChangeInterval)\n        : threadCtx_(threadCtx), dest_(dest) {\n        // Initialize socket and other members\n    }\n\n    ErrorCode connect() {\n        // Establish connection to the remote server with timeout handling\n        return ErrorCode::SUCCESS;\n    }\n\n    const std::string& getPeerIp() const {\n        return peerIp_;\n    }\n\n    void setSendBufferSize() {\n        // Configure the socket's send buffer size based on thread context options\n    }\n\nprivate:\n    void closeConnection() {\n        // Closes the active socket connection\n    }\n};\n\nenum class ErrorCode {\n    SUCCESS,\n    ERROR\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <memory>\n#include <stdexcept>\n#include <thread>\n#include <chrono>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#include <cstring>\n\nclass ThreadCtx {\npublic:\n    int sendBufferSize;\n    // Other thread context configuration options\n};\n\nclass EncryptionParams {\npublic:\n    // Encryption parameters\n};\n\nclass WdtSocket {\npublic:\n    int fd;\n    // WdtSocket implementation details\n};\n\nclass ClientSocket {\nprivate:\n    std::string dest_;\n    ThreadCtx& threadCtx_;\n    struct addrinfo sa_;\n    std::unique_ptr<WdtSocket> socket_;\n    std::string peerIp_;\n\npublic:\n    ClientSocket(ThreadCtx& threadCtx, const std::string& dest, int port, const EncryptionParams& encryptionParams, int64_t ivChangeInterval)\n        : threadCtx_(threadCtx), dest_(dest) {\n        // Initialize socket and other attributes\n    }\n\n    ErrorCode connect() {\n        // Establish connection to the remote server with timeout handling\n        return ErrorCode::SUCCESS;\n    }\n\n    const std::string& getPeerIp() const {\n        return peerIp_;\n    }\n\n    void setSendBufferSize() {\n        // Configure the socket's send buffer size based on thread context options\n    }\n\nprivate:\n    void closeConnection() {\n        // Closes the active socket connection\n    }\n};\n\nenum class ErrorCode {\n    SUCCESS,\n    ERROR\n};\n```"
    ],
    "match_count": 2,
    "pass@3": 0.5333333333333333,
    "pass@5": 0.7777777777777778
  },
  {
    "Task_id": 18,
    "Instruction": "Task Description: Implement a TCP client function in C++ that establishes a connection to a server, sends user input messages, and receives responses from the server until the connection is terminated.\n\nFunction Description: The function `tcp_client_communication` creates a TCP socket, connects to a specified server, and enters a loop where it reads user input, sends it to the server, and prints the server's response. The communication continues until an error occurs or the connection is closed.\n\nInput: None (The server IP address and port are hardcoded as \"127.0.0.1\" and 8888, respectively, within the function.)\n\nOutput: None (The function prints received messages from the server to the console but does not return any value.)",
    "Canonical_solution": "#include <sys/socket.h>\n#include <arpa/inet.h>\n#include <string.h>\n#include <unistd.h>\n\n#define BUFFER_SIZE 1024\n\nvoid tcp_client_communication() {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    \n    struct sockaddr_in serv_addr;\n    bzero(&serv_addr, sizeof(serv_addr));\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_addr.s_addr = inet_addr(\"127.0.0.1\");\n    serv_addr.sin_port = htons(8888);\n\n    connect(sockfd, (sockaddr*)&serv_addr, sizeof(serv_addr));\n    \n    while(true){\n        char buf[BUFFER_SIZE];\n        bzero(&buf, sizeof(buf));\n        scanf(\"%s\", buf);\n        ssize_t write_bytes = write(sockfd, buf, sizeof(buf));\n        if(write_bytes == -1){\n            break;\n        }\n        bzero(&buf, sizeof(buf));\n        ssize_t read_bytes = read(sockfd, buf, sizeof(buf));\n        if(read_bytes > 0){\n            printf(\"message from server: %s\\n\", buf);\n        }else if(read_bytes == 0){\n            break;\n        }else if(read_bytes == -1){\n            close(sockfd);\n            break;\n        }\n    }\n    close(sockfd);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 149,
    "matched_results": [
      "```cpp\n#include <iostream>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n#include <cstring>\n\nvoid tcp_client_communication() {\n    int sockfd;\n    struct sockaddr_in servaddr;\n\n    sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    memset(&servaddr, 0, sizeof(servaddr));\n    servaddr.sin_family = AF_INET;\n    servaddr.sin_port = htons(8888);\n    inet_pton(AF_INET, \"127.0.0.1\", &servaddr.sin_addr);\n\n    connect(sockfd, (struct sockaddr *)&servaddr, sizeof(servaddr));\n\n    char sendline[1024], recvline[1024];\n    while (true) {\n        std::cout << \"> \";\n        fgets(sendline, 1024, stdin);\n        send(sockfd, sendline, strlen(sendline), 0);\n        read(sockfd, recvline, 1024);\n        std::cout << \"Server: \" << recvline << std::endl;\n    }\n\n    close(sockfd);\n}\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n#include <cstring>\n\nvoid tcp_client_communication() {\n    int sockfd;\n    struct sockaddr_in servaddr;\n\n    sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    memset(&servaddr, 0, sizeof(servaddr));\n    servaddr.sin_family = AF_INET;\n    servaddr.sin_port = htons(8888);\n    inet_pton(AF_INET, \"127.0.0.1\", &servaddr.sin_addr);\n\n    connect(sockfd, (struct sockaddr *)&servaddr, sizeof(servaddr));\n\n    char sendline[1024], recvline[1024];\n    while (true) {\n        std::cout << \"> \";\n        fgets(sendline, 1024, stdin);\n        send(sockfd, sendline, strlen(sendline), 0);\n        read(sockfd, recvline, 1024);\n        std::cout << \"Server: \" << recvline << std::endl;\n    }\n\n    close(sockfd);\n}\n```",
      "```cpp\n#include <iostream>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#include <cstring>\n\nvoid tcp_client_communication() {\n    int sock = socket(AF_INET, SOCK_STREAM, 0);\n    if (sock < 0) {\n        std::cerr << \"Socket creation failed\" << std::endl;\n        return;\n    }\n\n    struct sockaddr_in server;\n    server.sin_family = AF_INET;\n    server.sin_port = htons(8888);\n    server.sin_addr.s_addr = inet_addr(\"127.0.0.1\");\n\n    if (connect(sock, (struct sockaddr *)&server, sizeof(server)) < 0) {\n        std::cerr << \"Connection failed\" << std::endl;\n        close(sock);\n        return;\n    }\n\n    char buffer[1024];\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::cin.getline(buffer, sizeof(buffer));\n        if (send(sock, buffer, strlen(buffer), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        int bytes_received = recv(sock, buffer, sizeof(buffer), 0);\n        if (bytes_received < 0) {\n            std::cerr << \"Receive failed\" << std::endl;\n            break;\n        }\n\n        buffer[bytes_received] = '\\0';\n        std::cout << \"Server response: \" << buffer << std::endl;\n    }\n\n    close(sock);\n}\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n#include <cstring>\n\nvoid tcp_client_communication() {\n    int sockfd;\n    struct sockaddr_in servaddr;\n\n    sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    memset(&servaddr, 0, sizeof(servaddr));\n    servaddr.sin_family = AF_INET;\n    servaddr.sin_port = htons(8888);\n    inet_pton(AF_INET, \"127.0.0.1\", &servaddr.sin_addr);\n\n    connect(sockfd, (struct sockaddr *)&servaddr, sizeof(servaddr));\n\n    char sendline[1024], recvline[1024];\n    while (true) {\n        std::cout << \"> \";\n        fgets(sendline, sizeof(sendline), stdin);\n        send(sockfd, sendline, strlen(sendline), 0);\n        read(sockfd, recvline, sizeof(recvline));\n        std::cout << \"Server: \" << recvline << std::endl;\n    }\n\n    close(sockfd);\n}\n```",
      "```cpp\n#include <iostream>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n#include <cstring>\n\nvoid tcp_client_communication() {\n    int sockfd;\n    struct sockaddr_in servaddr;\n\n    sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    memset(&servaddr, 0, sizeof(servaddr));\n    servaddr.sin_family = AF_INET;\n    servaddr.sin_port = htons(8888);\n    inet_pton(AF_INET, \"127.0.0.1\", &servaddr.sin_addr);\n\n    connect(sockfd, (struct sockaddr *)&servaddr, sizeof(servaddr));\n\n    char sendline[1024], recvline[1024];\n    while (true) {\n        std::cout << \"> \";\n        fgets(sendline, 1024, stdin);\n        send(sockfd, sendline, strlen(sendline), 0);\n        read(sockfd, recvline, 1024);\n        std::cout << \"Server: \" << recvline << std::endl;\n    }\n\n    close(sockfd);\n}\n```",
      "```cpp\n#include <iostream>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#include <cstring>\n\nvoid tcp_client_communication() {\n    int sockfd;\n    struct sockaddr_in servaddr;\n\n    // Create socket file descriptor\n    if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation failed\" << std::endl;\n        return;\n    }\n\n    // Clear servaddr\n    memset(&servaddr, 0, sizeof(servaddr));\n\n    // Set server IP and port\n    servaddr.sin_family = AF_INET;\n    servaddr.sin_port = htons(8888);\n    if (inet_pton(AF_INET, \"127.0.0.1\", &servaddr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        return;\n    }\n\n    // Connect to server\n    if (connect(sockfd, (struct sockaddr *)&servaddr, sizeof(servaddr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        return;\n    }\n\n    char sendline[1024], recvline[1024];\n    while (true) {\n        std::cout << \"> \";\n        if (!fgets(sendline, sizeof(sendline), stdin)) {\n            std::cerr << \"Error reading from stdin\" << std::endl;\n            break;\n        }\n        send(sockfd, sendline, strlen(sendline), 0);\n        if (recv(sockfd, recvline, sizeof(recvline), 0) < 0) {\n            std::cerr << \"Error receiving data\" << std::endl;\n            break;\n        }\n        std::cout << \"Server: \" << recvline << std::endl;\n    }\n\n    close(sockfd);\n}\n```",
      "```cpp\n#include <iostream>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n#include <cstring>\n\nvoid tcp_client_communication() {\n    int sockfd;\n    struct sockaddr_in servaddr;\n\n    sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    memset(&servaddr, 0, sizeof(servaddr));\n    servaddr.sin_family = AF_INET;\n    servaddr.sin_port = htons(8888);\n    inet_pton(AF_INET, \"127.0.0.1\", &servaddr.sin_addr);\n\n    connect(sockfd, (struct sockaddr *)&servaddr, sizeof(servaddr));\n\n    char sendline[1024], recvline[1024];\n    while (true) {\n        std::cout << \"> \";\n        fgets(sendline, 1024, stdin);\n        send(sockfd, sendline, strlen(sendline), 0);\n        read(sockfd, recvline, 1024);\n        std::cout << \"Server: \" << recvline << std::endl;\n    }\n\n    close(sockfd);\n}\n```",
      "```cpp\n#include <iostream>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n#include <cstring>\n\nvoid tcp_client_communication() {\n    int sockfd;\n    struct sockaddr_in servaddr;\n\n    // Create socket file descriptor\n    if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation failed\" << std::endl;\n        return;\n    }\n\n    // Set server address\n    memset(&servaddr, 0, sizeof(servaddr));\n    servaddr.sin_family = AF_INET;\n    servaddr.sin_port = htons(8888);\n    if (inet_pton(AF_INET, \"127.0.0.1\", &servaddr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        return;\n    }\n\n    // Connect to server\n    if (connect(sockfd, (struct sockaddr *)&servaddr, sizeof(servaddr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        return;\n    }\n\n    char sendline[1024], recvline[1024];\n    while (true) {\n        std::cout << \"> \";\n        if (!fgets(sendline, sizeof(sendline), stdin)) {\n            std::cerr << \"Error reading input\" << std::endl;\n            break;\n        }\n        send(sockfd, sendline, strlen(sendline), 0);\n        if (recv(sockfd, recvline, sizeof(recvline), 0) < 0) {\n            std::cerr << \"Error receiving data\" << std::endl;\n            break;\n        }\n        std::cout << \"Server: \" << recvline << std::endl;\n    }\n\n    // Close socket\n    close(sockfd);\n}\n```",
      "```cpp\n#include <iostream>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n#include <cstring>\n\nvoid tcp_client_communication() {\n    int sockfd;\n    struct sockaddr_in servaddr;\n\n    sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    memset(&servaddr, 0, sizeof(servaddr));\n    servaddr.sin_family = AF_INET;\n    servaddr.sin_port = htons(8888);\n    inet_pton(AF_INET, \"127.0.0.1\", &servaddr.sin_addr);\n\n    connect(sockfd, (struct sockaddr *)&servaddr, sizeof(servaddr));\n\n    char sendline[1024], recvline[1024];\n    while (true) {\n        std::cout << \"> \";\n        fgets(sendline, 1024, stdin);\n        send(sockfd, sendline, strlen(sendline), 0);\n        read(sockfd, recvline, 1024);\n        std::cout << \"Server: \" << recvline << std::endl;\n    }\n\n    close(sockfd);\n}\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n#include <cstring>\n\nvoid tcp_client_communication() {\n    int sockfd;\n    struct sockaddr_in servaddr;\n\n    sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    bzero(&servaddr, sizeof(servaddr));\n    servaddr.sin_family = AF_INET;\n    servaddr.sin_port = htons(8888);\n    inet_pton(AF_INET, \"127.0.0.1\", &servaddr.sin_addr);\n\n    connect(sockfd, (struct sockaddr *)&servaddr, sizeof(servaddr));\n\n    char sendline[1024], recvline[1024];\n    while (true) {\n        std::cout << \"Enter message: \";\n        fgets(sendline, 1024, stdin);\n        send(sockfd, sendline, strlen(sendline), 0);\n        read(sockfd, recvline, 1024);\n        std::cout << \"Server response: \" << recvline << std::endl;\n    }\n\n    close(sockfd);\n}\n```"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 19,
    "Instruction": "Task Description: Create a TCP client class that can establish a connection to a server, send and receive data, and handle timeouts for non-blocking operations.\n\nClass Description: The TCPClient class provides functionality for TCP socket communication with a remote server. It supports both blocking and non-blocking operations with timeout capabilities, and handles cross-platform compatibility between Windows and Unix-like systems.\n\nAttributes:\n- address: std::string - The IP address or hostname of the server to connect to\n- port: u16 - The port number of the server to connect to\n- main_socket: SocketHolder (int) - The socket file descriptor for the connection\n- connected: bool - Flag indicating whether the client is currently connected to the server\n\nMethods:\n- Connect() -> bool - Establishes a connection to the server. Returns true if successful.\n- Read(void* buffer, size_t size, const std::chrono::nanoseconds& timeout) -> bool - Reads data from the server into the buffer. Returns true if all requested bytes were read.\n- Write(const void* buffer, size_t size, const std::chrono::nanoseconds& timeout) -> bool - Writes data from the buffer to the server. Returns true if all bytes were written.\n- Disconnect() -> void - Closes the connection to the server.\n- SetNonBlock(SocketHolder sockFD, bool nonBlocking) -> bool - Sets the blocking mode of the socket. Returns true if successful.\n- ConnectWithTimeout(SocketHolder sockFD, void* server_addr, size_t server_addr_len, int timeout_seconds) -> bool - Attempts to connect with a timeout. Returns true if successful.",
    "Canonical_solution": "#include <winsock2.h>\n#include <ws2tcpip.h>\n#include <cerrno>\n#include <arpa/inet.h>\n#include <fcntl.h>\n#include <ifaddrs.h>\n#include <netdb.h>\n#include <netinet/in.h>\n#include <netinet/tcp.h>\n#include <poll.h>\n#include <sys/socket.h>\n#include <sys/types.h>\n#include <unistd.h>\n#include <chrono>\n#include <memory>\n#include <string>\n\n#ifdef _WIN32\n#define WSAEAGAIN WSAEWOULDBLOCK\n#define WSAEMULTIHOP -1\n#define ERRNO(x) WSA##x\n#define GET_ERRNO WSAGetLastError()\n#define poll(x, y, z) WSAPoll(x, y, z);\n#define SHUT_RD SD_RECEIVE\n#define SHUT_WR SD_SEND\n#define SHUT_RDWR SD_BOTH\n#else\n#define ERRNO(x) x\n#define GET_ERRNO errno\n#define closesocket(x) close(x)\n#endif\n\nclass TCPClient {\npublic:\n    using SocketHolder = int;\n\n    TCPClient(const std::string& address, u16 port) : address(address), port(port) {}\n\n    bool Connect() {\n        if (connected)\n            return true;\n\n        struct addrinfo hints, *addrinfo;\n        memset(&hints, 0, sizeof(hints));\n        hints.ai_socktype = SOCK_STREAM;\n        hints.ai_family = AF_INET;\n\n        if (getaddrinfo(address.data(), NULL, &hints, &addrinfo) != 0) {\n            return false;\n        }\n\n        main_socket = ::socket(AF_INET, SOCK_STREAM, 0);\n        if (main_socket == static_cast<SocketHolder>(-1)) {\n            return false;\n        }\n\n        if (!SetNonBlock(main_socket, true)) {\n            closesocket(main_socket);\n            return false;\n        }\n\n        struct sockaddr_in servaddr = {0};\n        servaddr.sin_family = AF_INET;\n        servaddr.sin_addr.s_addr = ((struct sockaddr_in*)(addrinfo->ai_addr))->sin_addr.s_addr;\n        servaddr.sin_port = htons(port);\n        freeaddrinfo(addrinfo);\n\n        if (!ConnectWithTimeout(main_socket, &servaddr, sizeof(servaddr), 10)) {\n            closesocket(main_socket);\n            return false;\n        }\n\n        connected = true;\n        return true;\n    }\n\n    bool Read(void* buffer, size_t size, const std::chrono::nanoseconds& timeout) {\n        size_t read_bytes = 0;\n        auto before = std::chrono::steady_clock::now();\n        while (read_bytes != size) {\n            int new_read = ::recv(main_socket, (char*)((uintptr_t)buffer + read_bytes), \n                (int)(size - read_bytes), 0);\n            if (new_read < 0) {\n                if (GET_ERRNO == ERRNO(EWOULDBLOCK) &&\n                    (timeout == std::chrono::nanoseconds(0) ||\n                     std::chrono::steady_clock::now() - before < timeout)) {\n                    continue;\n                }\n                read_bytes = 0;\n                break;\n            }\n            read_bytes += new_read;\n        }\n        return read_bytes == size;\n    }\n\n    bool Write(const void* buffer, size_t size, const std::chrono::nanoseconds& timeout) {\n        size_t write_bytes = 0;\n        auto before = std::chrono::steady_clock::now();\n        while (write_bytes != size) {\n            int new_written = ::send(main_socket, (const char*)((uintptr_t)buffer + write_bytes),\n                                    (int)(size - write_bytes), 0);\n            if (new_written < 0) {\n                if (GET_ERRNO == ERRNO(EWOULDBLOCK) &&\n                    (timeout == std::chrono::nanoseconds(0) ||\n                     std::chrono::steady_clock::now() - before < timeout)) {\n                    continue;\n                }\n                write_bytes = 0;\n                break;\n            }\n            write_bytes += new_written;\n        }\n        return write_bytes == size;\n    }\n\n    void Disconnect() {\n        if (connected) {\n            shutdown(main_socket, SHUT_RDWR);\n            closesocket(main_socket);\n            connected = false;\n        }\n    }\n\nprivate:\n    bool SetNonBlock(SocketHolder sockFD, bool nonBlocking) {\n        bool blocking = !nonBlocking;\n#ifdef _WIN32\n        unsigned long nonblocking = (blocking) ? 0 : 1;\n        int ret = ioctlsocket(sockFD, FIONBIO, &nonblocking);\n        if (ret == -1) {\n            return false;\n        }\n#else\n        int flags = ::fcntl(sockFD, F_GETFL, 0);\n        if (flags == -1) {\n            return false;\n        }\n\n        flags &= ~O_NONBLOCK;\n        if (!blocking) {\n            flags |= O_NONBLOCK;\n        }\n\n        const int ret = ::fcntl(sockFD, F_SETFL, flags);\n        if (ret == -1) {\n            return false;\n        }\n#endif\n        return true;\n    }\n\n    bool ConnectWithTimeout(SocketHolder sockFD, void* server_addr, size_t server_addr_len,\n                           int timeout_seconds) {\n        int res = ::connect(sockFD, (struct sockaddr*)server_addr, static_cast<int>(server_addr_len));\n        if (res == -1 && ((GET_ERRNO == ERRNO(EINPROGRESS) || GET_ERRNO == ERRNO(EWOULDBLOCK))) {\n            struct timeval tv;\n            fd_set fdset;\n            FD_ZERO(&fdset);\n            FD_SET(sockFD, &fdset);\n\n            tv.tv_sec = timeout_seconds;\n            tv.tv_usec = 0;\n            int select_res = ::select(static_cast<int>(sockFD + 1), NULL, &fdset, NULL, &tv);\n#ifdef _WIN32\n            if (select_res == 0) {\n                return false;\n            }\n#else\n            bool select_good = false;\n            if (select_res == 1) {\n                int so_error;\n                socklen_t len = sizeof so_error;\n\n                getsockopt(sockFD, SOL_SOCKET, SO_ERROR, &so_error, &len);\n\n                if (so_error == 0) {\n                    select_good = true;\n                }\n            }\n            if (!select_good) {\n                return false;\n            }\n#endif\n        } else if (res == -1) {\n            return false;\n        }\n        return true;\n    }\n\n    std::string address;\n    u16 port;\n    SocketHolder main_socket = -1;\n    bool connected = false;\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 149,
    "matched_results": [
      "```cpp\n#include <iostream>\n#include <string>\n#include <chrono>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#include <fcntl.h>\n#include <sys/select.h>\n#include <sys/time.h>\n\nclass SocketHolder {\npublic:\n    int sock;\n    SocketHolder() : sock(-1) {}\n    ~SocketHolder() { close(sock); }\n};\n\nclass TCPClient {\nprivate:\n    std::string address;\n    u16 port;\n    SocketHolder main_socket;\n    bool connected;\n\n    int set_blocking_mode(int sock, bool blocking) {\n        int flags = fcntl(sock, F_GETFL, 0);\n        if (flags == -1) return -1;\n        flags = blocking ? (flags & ~O_NONBLOCK) : (flags | O_NONBLOCK);\n        return fcntl(sock, F_SETFL, flags);\n    }\n\n    int connect_with_timeout(int sock, const void* server_addr, size_t server_addr_len, int timeout_seconds) {\n        struct sockaddr_in server;\n        memset(&server, 0, sizeof(server));\n        server.sin_family = AF_INET;\n        server.sin_port = htons(port);\n        memcpy(&server.sin_addr, server_addr, server_addr_len);\n\n        int ret = connect(sock, (struct sockaddr*)&server, sizeof(server));\n        if (ret == -1) return -1;\n\n        fd_set fds;\n        struct timeval timeout;\n        FD_ZERO(&fds);\n        FD_SET(sock, &fds);\n        timeout.tv_sec = timeout_seconds;\n        timeout.tv_usec = 0;\n\n        ret = select(sock + 1, NULL, NULL, &fds, &timeout);\n        if (ret == -1) return -1;\n        if (ret == 0) return -1;\n        return 0;\n    }\n\npublic:\n    TCPClient(const std::string& addr, u16 p) : address(addr), port(p), main_socket(), connected(false) {}\n\n    bool Connect() {\n        if (connected) return true;\n        int sock = socket(AF_INET, SOCK_STREAM, 0);\n        if (sock == -1) return false;\n        main_socket.sock = sock;\n        connected = connect_with_timeout(sock, (void*)&inet_addr(address.c_str()), sizeof(in_addr), 10) == 0;\n        return connected;\n    }\n\n    bool Read(void* buffer, size_t size, const std::chrono::nanoseconds& timeout) {\n        if (!connected) return false;\n        int sock = main_socket.sock;\n        int flags = set_blocking_mode(sock, true);\n        if (flags == -1) return false;\n        ssize_t bytes_read = read(sock, buffer, size);\n        if (bytes_read == -1) return false;\n        return bytes_read == size;\n    }\n\n    bool Write(const void* buffer, size_t size, const std::chrono::nanoseconds& timeout) {\n        if (!connected) return false;\n        int sock = main_socket.sock;\n        int flags = set_blocking_mode(sock, true);\n        if (flags == -1) return false;\n        ssize_t bytes_written = write(sock, buffer, size);\n        if (bytes_written == -1) return false;\n        return bytes_written == size;\n    }\n\n    void Disconnect() {\n        if (!connected) return;\n        connected = false;\n        close(main_socket.sock);\n        main_socket.sock = -1;\n    }\n\n    bool SetNonBlock(SocketHolder sockFD, bool nonBlocking) {\n        return set_blocking_mode(sockFD.sock, !nonBlocking) == 0;\n    }\n\n    bool ConnectWithTimeout(SocketHolder sockFD, void* server_addr, size_t server_addr_len, int timeout_seconds) {\n        return connect_with_timeout(sockFD.sock, server_addr, server_addr_len, timeout_seconds) == 0;\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <chrono>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#include <fcntl.h>\n#include <sys/select.h>\n#include <sys/time.h>\n\nclass SocketHolder {\npublic:\n    int fd;\n    SocketHolder(int fd) : fd(fd) {}\n    ~SocketHolder() { close(fd); }\n};\n\nclass TCPClient {\nprivate:\n    std::string address;\n    u16 port;\n    SocketHolder main_socket;\n    bool connected;\n\n    int set_blocking_mode(int fd, bool blocking) {\n        int flags = fcntl(fd, F_GETFL, 0);\n        if (flags == -1) return -1;\n        flags = blocking ? (flags & ~O_NONBLOCK) : (flags | O_NONBLOCK);\n        return fcntl(fd, F_SETFL, flags);\n    }\n\n    int connect_with_timeout(int fd, const void* server_addr, size_t server_addr_len, int timeout_seconds) {\n        struct sockaddr_in server;\n        memset(&server, 0, sizeof(server));\n        server.sin_family = AF_INET;\n        server.sin_port = htons(port);\n        memcpy(&server.sin_addr, server_addr, server_addr_len);\n\n        int ret = connect(fd, (struct sockaddr*)&server, sizeof(server));\n        if (ret == -1) return -1;\n\n        fd_set fds;\n        FD_ZERO(&fds);\n        FD_SET(fd, &fds);\n\n        struct timeval timeout;\n        timeout.tv_sec = timeout_seconds;\n        timeout.tv_usec = 0;\n\n        ret = select(fd + 1, NULL, NULL, &fds, &timeout);\n        if (ret == -1) return -1;\n        if (ret == 0) return -1;\n\n        return 0;\n    }\n\npublic:\n    TCPClient(const std::string& addr, u16 port) : address(addr), port(port), main_socket(-1), connected(false) {}\n\n    bool Connect() {\n        if (connected) return true;\n\n        int sock = socket(AF_INET, SOCK_STREAM, 0);\n        if (sock == -1) return false;\n\n        main_socket = SocketHolder(sock);\n        connected = connect_with_timeout(main_socket.fd, (void*)&inet_addr(address.c_str()), sizeof(in_addr), 10) == 0;\n        return connected;\n    }\n\n    bool Read(void* buffer, size_t size, const std::chrono::nanoseconds& timeout) {\n        if (!connected) return false;\n\n        fd_set fds;\n        FD_ZERO(&fds);\n        FD_SET(main_socket.fd, &fds);\n\n        struct timeval timeout_val;\n        timeout_val.tv_sec = timeout.count() / 1000000000;\n        timeout_val.tv_usec = (timeout.count() % 1000000000) / 1000;\n\n        int ret = select(main_socket.fd + 1, &fds, NULL, NULL, &timeout_val);\n        if (ret == -1) return false;\n        if (ret == 0) return false;\n\n        return recv(main_socket.fd, (char*)buffer, size, 0) == static_cast<int>(size);\n    }\n\n    bool Write(const void* buffer, size_t size, const std::chrono::nanoseconds& timeout) {\n        if (!connected) return false;\n\n        fd_set fds;\n        FD_ZERO(&fds);\n        FD_SET(main_socket.fd, &fds);\n\n        struct timeval timeout_val;\n        timeout_val.tv_sec = timeout.count() / 1000000000;\n        timeout_val.tv_usec = (timeout.count() % 1000000000) / 1000;\n\n        int ret = select(main_socket.fd + 1, NULL, &fds, NULL, &timeout_val);\n        if (ret == -1) return false;\n        if (ret == 0) return false;\n\n        return send(main_socket.fd, (const char*)buffer, size, 0) == static_cast<int>(size);\n    }\n\n    void Disconnect() {\n        if (connected) {\n            connected = false;\n            close(main_socket.fd);\n        }\n    }\n\n    bool SetNonBlock(SocketHolder sockFD, bool nonBlocking) {\n        return set_blocking_mode(sockFD.fd, !nonBlocking) == 0;\n    }\n\n    bool ConnectWithTimeout(SocketHolder sockFD, void* server_addr, size_t server_addr_len, int timeout_seconds) {\n        return connect_with_timeout(sockFD.fd, server_addr, server_addr_len, timeout_seconds) == 0;\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <chrono>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#include <fcntl.h>\n#include <sys/select.h>\n#include <sys/time.h>\n\nclass SocketHolder {\npublic:\n    int fd;\n    SocketHolder(int fd) : fd(fd) {}\n};\n\nclass TCPClient {\nprivate:\n    std::string address;\n    u16 port;\n    SocketHolder main_socket;\n    bool connected;\n\n    int set_blocking_mode(int fd, bool blocking) {\n        int flags = fcntl(fd, F_GETFL, 0);\n        if (flags == -1) {\n            return -1;\n        }\n        flags = blocking ? (flags & ~O_NONBLOCK) : (flags | O_NONBLOCK);\n        if (fcntl(fd, F_SETFL, flags) == -1) {\n            return -1;\n        }\n        return 0;\n    }\n\n    int connect_with_timeout(int fd, const void* server_addr, size_t server_addr_len, int timeout_seconds) {\n        struct sockaddr_in server;\n        memset(&server, 0, server_addr_len);\n        server.sin_family = AF_INET;\n        server.sin_port = htons(port);\n        memcpy((char*)&server.sin_addr, server_addr, server_addr_len);\n\n        if (connect(fd, (struct sockaddr*)&server, server_addr_len) == -1) {\n            return -1;\n        }\n\n        struct timeval timeout;\n        timeout.tv_sec = timeout_seconds;\n        timeout.tv_usec = 0;\n        if (setsockopt(fd, SOL_SOCKET, SO_RCVTIMEO, &timeout, sizeof(timeout)) == -1) {\n            return -1;\n        }\n        if (setsockopt(fd, SOL_SOCKET, SO_SNDTIMEO, &timeout, sizeof(timeout)) == -1) {\n            return -1;\n        }\n\n        return 0;\n    }\n\npublic:\n    TCPClient(const std::string& addr, u16 p) : address(addr), port(p), main_socket(), connected(false) {}\n\n    bool Connect() {\n        int sock_fd = socket(AF_INET, SOCK_STREAM, 0);\n        if (sock_fd == -1) {\n            return false;\n        }\n\n        struct sockaddr_in server;\n        memset(&server, 0, sizeof(server));\n        server.sin_family = AF_INET;\n        server.sin_port = htons(port);\n        if (inet_pton(AF_INET, address.c_str(), &server.sin_addr) <= 0) {\n            close(sock_fd);\n            return false;\n        }\n\n        if (connect_with_timeout(sock_fd, (void*)&server, sizeof(server), 10) == -1) {\n            close(sock_fd);\n            return false;\n        }\n\n        main_socket = SocketHolder(sock_fd);\n        connected = true;\n        return true;\n    }\n\n    bool Read(void* buffer, size_t size, const std::chrono::nanoseconds& timeout) {\n        if (!connected) {\n            return false;\n        }\n\n        fd_set read_fds;\n        FD_ZERO(&read_fds);\n        FD_SET(main_socket.fd, &read_fds);\n\n        struct timeval tv;\n        tv.tv_sec = timeout.count() / 1000000000;\n        tv.tv_usec = (timeout.count() % 1000000000) / 1000;\n\n        int select_result = select(main_socket.fd + 1, &read_fds, nullptr, nullptr, &tv);\n        if (select_result == -1) {\n            return false;\n        } else if (select_result == 0) {\n            return false;\n        }\n\n        return recv(main_socket.fd, (char*)buffer, size, 0) == size;\n    }\n\n    bool Write(const void* buffer, size_t size, const std::chrono::nanoseconds& timeout) {\n        if (!connected) {\n            return false;\n        }\n\n        fd_set write_fds;\n        FD_ZERO(&write_fds);\n        FD_SET(main_socket.fd, &write_fds);\n\n        struct timeval tv;\n        tv.tv_sec = timeout.count() / 1000000000;\n        tv.tv_usec = (timeout.count() % 1000000000) / 1000;\n\n        int select_result = select(main_socket.fd + 1, nullptr, &write_fds, nullptr, &tv);\n        if (select_result == -1) {\n            return false;\n        } else if (select_result == 0) {\n            return false;\n        }\n\n        return send(main_socket.fd, (char*)buffer, size, 0) == size;\n    }\n\n    void Disconnect() {\n        if (connected) {\n            close(main_socket.fd);\n            connected = false;\n        }\n    }\n\n    bool SetNonBlock(SocketHolder sockFD, bool nonBlocking) {\n        return set_blocking_mode(sockFD.fd, !nonBlocking) == 0;\n    }\n\n    bool ConnectWithTimeout(SocketHolder sockFD, void* server_addr, size_t server_addr_len, int timeout_seconds) {\n        return connect_with_timeout(sockFD.fd, server_addr, server_addr_len, timeout_seconds) == 0;\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <chrono>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n#include <fcntl.h>\n#include <arpa/inet.h>\n\nclass SocketHolder {\npublic:\n    int sock;\n    SocketHolder() : sock(-1) {}\n    ~SocketHolder() { close(sock); }\n};\n\nclass TCPClient {\nprivate:\n    std::string address;\n    u16 port;\n    SocketHolder main_socket;\n    bool connected;\n\n    int set_blocking_mode(int sock, bool blocking) {\n        int flags = fcntl(sock, F_GETFL, 0);\n        if (flags == -1) return -1;\n        flags = blocking ? (flags & ~O_NONBLOCK) : (flags | O_NONBLOCK);\n        return fcntl(sock, F_SETFL, flags);\n    }\n\n    int connect_with_timeout(int sock, const void* server_addr, size_t server_addr_len, int timeout_seconds) {\n        struct sockaddr_in server;\n        memset(&server, 0, sizeof(server));\n        server.sin_family = AF_INET;\n        server.sin_port = htons(port);\n        memcpy(&server.sin_addr, server_addr, server_addr_len);\n\n        int ret = connect(sock, (struct sockaddr*)&server, sizeof(server));\n        if (ret == -1) {\n            if (errno == EINPROGRESS) {\n                fd_set fds;\n                FD_ZERO(&fds);\n                FD_SET(sock, &fds);\n                struct timeval timeout;\n                timeout.tv_sec = timeout_seconds;\n                timeout.tv_usec = 0;\n                ret = select(sock + 1, nullptr, nullptr, &fds, &timeout);\n                if (ret > 0) {\n                    socklen_t len;\n                    int err = 0;\n                    getsockopt(sock, SOL_SOCKET, SO_ERROR, &err, &len);\n                    if (err == 0) {\n                        return 0;\n                    }\n                }\n            }\n        }\n        return ret;\n    }\n\npublic:\n    TCPClient(const std::string& addr, u16 p) : address(addr), port(p), main_socket(), connected(false) {}\n\n    bool Connect() {\n        if (connected) return true;\n        int sock = socket(AF_INET, SOCK_STREAM, 0);\n        if (sock == -1) return false;\n        main_socket.sock = sock;\n        connected = connect_with_timeout(sock, (void*)&address, address.size(), 10) == 0;\n        return connected;\n    }\n\n    bool Read(void* buffer, size_t size, const std::chrono::nanoseconds& timeout) {\n        if (!connected) return false;\n        fd_set fds;\n        FD_ZERO(&fds);\n        FD_SET(main_socket.sock, &fds);\n        struct timeval tv;\n        tv.tv_sec = timeout.count() / 1000000000;\n        tv.tv_usec = (timeout.count() % 1000000000) / 1000;\n        int ret = select(main_socket.sock + 1, &fds, nullptr, nullptr, &tv);\n        if (ret > 0) {\n            ssize_t bytes_read = read(main_socket.sock, (char*)buffer, size);\n            return bytes_read == size;\n        }\n        return false;\n    }\n\n    bool Write(const void* buffer, size_t size, const std::chrono::nanoseconds& timeout) {\n        if (!connected) return false;\n        fd_set fds;\n        FD_ZERO(&fds);\n        FD_SET(main_socket.sock, &fds);\n        struct timeval tv;\n        tv.tv_sec = timeout.count() / 1000000000;\n        tv.tv_usec = (timeout.count() % 1000000000) / 1000;\n        int ret = select(main_socket.sock + 1, nullptr, &fds, nullptr, &tv);\n        if (ret > 0) {\n            ssize_t bytes_written = write(main_socket.sock, (const char*)buffer, size);\n            return bytes_written == size;\n        }\n        return false;\n    }\n\n    void Disconnect() {\n        if (connected) {\n            close(main_socket.sock);\n            connected = false;\n        }\n    }\n\n    bool SetNonBlock(SocketHolder sockFD, bool nonBlocking) {\n        return set_blocking_mode(sockFD.sock, !nonBlocking) == 0;\n    }\n\n    bool ConnectWithTimeout(SocketHolder sockFD, void* server_addr, size_t server_addr_len, int timeout_seconds) {\n        return connect_with_timeout(sockFD.sock, server_addr, server_addr_len, timeout_seconds) == 0;\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <chrono>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#include <fcntl.h>\n#include <sys/select.h>\n#include <sys/time.h>\n\nclass SocketHolder {\npublic:\n    int sock;\n    SocketHolder() : sock(-1) {}\n    ~SocketHolder() { close(sock); }\n};\n\nclass TCPClient {\nprivate:\n    std::string address;\n    u16 port;\n    SocketHolder main_socket;\n    bool connected;\n\n    int set_blocking_mode(int sock, bool blocking) {\n        int flags = fcntl(sock, F_GETFL, 0);\n        if (flags == -1) return -1;\n        flags = blocking ? (flags & ~O_NONBLOCK) : (flags | O_NONBLOCK);\n        return fcntl(sock, F_SETFL, flags);\n    }\n\n    int connect_with_timeout(int sock, const void* server_addr, size_t server_addr_len, int timeout_seconds) {\n        struct sockaddr_in server;\n        memcpy(&server, server_addr, server_addr_len);\n        server.sin_family = AF_INET;\n        server.sin_port = htons(port);\n        if (connect(sock, (struct sockaddr*)&server, server_addr_len) < 0) {\n            if (errno != EINPROGRESS) return -1;\n            fd_set writefds;\n            FD_ZERO(&writefds);\n            FD_SET(sock, &writefds);\n            struct timeval timeout;\n            timeout.tv_sec = timeout_seconds;\n            timeout.tv_usec = 0;\n            int sel = select(sock + 1, nullptr, &writefds, nullptr, &timeout);\n            if (sel < 0) return -1;\n            if (sel == 0) return -1;\n            if (FD_ISSET(sock, &writefds)) {\n                socklen_t len;\n                int err = getsockopt(sock, SOL_SOCKET, SO_ERROR, &len, &len);\n                if (err == 0 && len == 0) return 0;\n                return -1;\n            }\n        }\n        return 0;\n    }\n\npublic:\n    TCPClient(const std::string& addr, u16 port) : address(addr), port(port), main_socket(), connected(false) {}\n\n    bool Connect() {\n        if (connected) return true;\n        int sock = socket(AF_INET, SOCK_STREAM, 0);\n        if (sock == -1) return false;\n        main_socket.sock = sock;\n        struct sockaddr_in server;\n        memset(&server, 0, sizeof(server));\n        server.sin_family = AF_INET;\n        server.sin_port = htons(port);\n        if (inet_pton(AF_INET, address.c_str(), &server.sin_addr) <= 0) {\n            close(sock);\n            return false;\n        }\n        if (connect_with_timeout(sock, (void*)&server, sizeof(server), 10) == 0) {\n            connected = true;\n            set_blocking_mode(sock, true);\n            return true;\n        }\n        close(sock);\n        return false;\n    }\n\n    bool Read(void* buffer, size_t size, const std::chrono::nanoseconds& timeout) {\n        if (!connected) return false;\n        fd_set readfds;\n        FD_ZERO(&readfds);\n        FD_SET(main_socket.sock, &readfds);\n        struct timeval timeout_val;\n        timeout_val.tv_sec = timeout.count() / 1000000000;\n        timeout_val.tv_usec = (timeout.count() % 1000000000) / 1000;\n        int sel = select(main_socket.sock + 1, &readfds, nullptr, nullptr, &timeout_val);\n        if (sel > 0 && FD_ISSET(main_socket.sock, &readfds)) {\n            ssize_t bytes_read = read(main_socket.sock, buffer, size);\n            return bytes_read > 0;\n        }\n        return false;\n    }\n\n    bool Write(const void* buffer, size_t size, const std::chrono::nanoseconds& timeout) {\n        if (!connected) return false;\n        fd_set writefds;\n        FD_ZERO(&writefds);\n        FD_SET(main_socket.sock, &writefds);\n        struct timeval timeout_val;\n        timeout_val.tv_sec = timeout.count() / 1000000000;\n        timeout_val.tv_usec = (timeout.count() % 1000000000) / 1000;\n        int sel = select(main_socket.sock + 1, nullptr, &writefds, nullptr, &timeout_val);\n        if (sel > 0 && FD_ISSET(main_socket.sock, &writefds)) {\n            ssize_t bytes_written = write(main_socket.sock, buffer, size);\n            return bytes_written > 0;\n        }\n        return false;\n    }\n\n    void Disconnect() {\n        if (connected) {\n            connected = false;\n            close(main_socket.sock);\n        }\n    }\n\n    bool SetNonBlock(SocketHolder sockFD, bool nonBlocking) {\n        return set_blocking_mode(sockFD.sock, !nonBlocking) == 0;\n    }\n\n    bool ConnectWithTimeout(SocketHolder sockFD, void* server_addr, size_t server_addr_len, int timeout_seconds) {\n        return connect_with_timeout(sockFD.sock, server_addr, server_addr_len, timeout_seconds) == 0;\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <chrono>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#include <fcntl.h>\n#include <sys/select.h>\n#include <sys/time.h>\n\nclass SocketHolder {\npublic:\n    int sock;\n    SocketHolder() : sock(-1) {}\n    ~SocketHolder() { close(sock); }\n};\n\nclass TCPClient {\nprivate:\n    std::string address;\n    u16 port;\n    SocketHolder main_socket;\n    bool connected;\n\n    int set_blocking_mode(int sock, bool blocking) {\n        int flags = fcntl(sock, F_GETFL, 0);\n        if (flags == -1) return -1;\n        flags = blocking ? (flags & ~O_NONBLOCK) : (flags | O_NONBLOCK);\n        return fcntl(sock, F_SETFL, flags);\n    }\n\n    int connect_with_timeout(int sock, const void* server_addr, size_t server_addr_len, int timeout_seconds) {\n        struct sockaddr_in server;\n        memset(&server, 0, sizeof(server));\n        server.sin_family = AF_INET;\n        server.sin_port = htons(port);\n        memcpy((char*)&server.sin_addr, server_addr, server_addr_len);\n\n        int ret = connect(sock, (struct sockaddr*)&server, sizeof(server));\n        if (ret == -1) {\n            fd_set fds;\n            FD_ZERO(&fds);\n            FD_SET(sock, &fds);\n            struct timeval timeout;\n            timeout.tv_sec = timeout_seconds;\n            timeout.tv_usec = 0;\n\n            ret = select(sock + 1, nullptr, nullptr, &fds, &timeout);\n            if (ret == -1) return -1;\n            if (ret == 0) return -1;\n        }\n        return ret;\n    }\n\npublic:\n    TCPClient(const std::string& addr, u16 p) : address(addr), port(p), main_socket(), connected(false) {}\n\n    bool Connect() {\n        int sock = socket(AF_INET, SOCK_STREAM, 0);\n        if (sock == -1) return false;\n        main_socket.sock = sock;\n        connected = connect_with_timeout(main_socket.sock, (void*)&inet_addr(address.c_str()), sizeof(in_addr), 10) == 0;\n        return connected;\n    }\n\n    bool Read(void* buffer, size_t size, const std::chrono::nanoseconds& timeout) {\n        if (!connected) return false;\n        fd_set fds;\n        FD_ZERO(&fds);\n        FD_SET(main_socket.sock, &fds);\n        struct timeval timeout_val;\n        timeout_val.tv_sec = timeout.count() / 1000000000;\n        timeout_val.tv_usec = (timeout.count() % 1000000000) / 1000;\n\n        int ret = select(main_socket.sock + 1, &fds, nullptr, nullptr, &timeout_val);\n        if (ret == -1) return false;\n        if (ret == 0) return false;\n\n        return recv(main_socket.sock, (char*)buffer, size, 0) == (int)size;\n    }\n\n    bool Write(const void* buffer, size_t size, const std::chrono::nanoseconds& timeout) {\n        if (!connected) return false;\n        fd_set fds;\n        FD_ZERO(&fds);\n        FD_SET(main_socket.sock, &fds);\n        struct timeval timeout_val;\n        timeout_val.tv_sec = timeout.count() / 1000000000;\n        timeout_val.tv_usec = (timeout.count() % 1000000000) / 1000;\n\n        int ret = select(main_socket.sock + 1, nullptr, &fds, nullptr, &timeout_val);\n        if (ret == -1) return false;\n        if (ret == 0) return false;\n\n        return send(main_socket.sock, (const char*)buffer, size, 0) == (int)size;\n    }\n\n    void Disconnect() {\n        if (connected) {\n            close(main_socket.sock);\n            connected = false;\n        }\n    }\n\n    bool SetNonBlock(SocketHolder sockFD, bool nonBlocking) {\n        return set_blocking_mode(sockFD.sock, !nonBlocking) == 0;\n    }\n\n    bool ConnectWithTimeout(SocketHolder sockFD, void* server_addr, size_t server_addr_len, int timeout_seconds) {\n        return connect_with_timeout(sockFD.sock, server_addr, server_addr_len, timeout_seconds) == 0;\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <chrono>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#include <fcntl.h>\n#include <sys/select.h>\n#include <sys/time.h>\n\nclass SocketHolder {\npublic:\n    int sock;\n    SocketHolder() : sock(-1) {}\n    ~SocketHolder() { close(sock); }\n};\n\nclass TCPClient {\nprivate:\n    std::string address;\n    u16 port;\n    SocketHolder main_socket;\n    bool connected;\n\n    int set_blocking_mode(int sock, bool blocking) {\n        int flags = fcntl(sock, F_GETFL, 0);\n        if (flags == -1) return -1;\n        flags = blocking ? (flags & ~O_NONBLOCK) : (flags | O_NONBLOCK);\n        return fcntl(sock, F_SETFL, flags);\n    }\n\n    int connect_with_timeout(int sock, const void* server_addr, size_t server_addr_len, int timeout_seconds) {\n        struct sockaddr_in server;\n        memset(&server, 0, sizeof(server));\n        server.sin_family = AF_INET;\n        server.sin_port = htons(port);\n        memcpy(&server.sin_addr, server_addr, server_addr_len);\n\n        int ret = connect(sock, (struct sockaddr*)&server, sizeof(server));\n        if (ret == -1) return -1;\n\n        fd_set fds;\n        FD_ZERO(&fds);\n        FD_SET(sock, &fds);\n        struct timeval timeout;\n        timeout.tv_sec = timeout_seconds;\n        timeout.tv_usec = 0;\n\n        ret = select(sock + 1, NULL, NULL, &fds, &timeout);\n        if (ret == -1) return -1;\n        if (ret == 0) return -1;\n        return 0;\n    }\n\npublic:\n    TCPClient(const std::string& addr, u16 port) : address(addr), port(port), main_socket(), connected(false) {}\n\n    bool Connect() {\n        if (connected) return true;\n        int sock = socket(AF_INET, SOCK_STREAM, 0);\n        if (sock == -1) return false;\n        main_socket.sock = sock;\n        connected = connect_with_timeout(sock, (void*)&inet_addr(address.c_str()), sizeof(in_addr), 10) == 0;\n        return connected;\n    }\n\n    bool Read(void* buffer, size_t size, const std::chrono::nanoseconds& timeout) {\n        if (!connected) return false;\n        int sock = main_socket.sock;\n        int flags = set_blocking_mode(sock, true);\n        if (flags == -1) return false;\n\n        fd_set fds;\n        FD_ZERO(&fds);\n        FD_SET(sock, &fds);\n        struct timeval timeout_val = {static_cast<long>(timeout.count() / 1000000000L), static_cast<long>(timeout.count() % 1000000000L)};\n\n        int ret = select(sock + 1, &fds, NULL, NULL, &timeout_val);\n        if (ret == -1) return false;\n        if (ret == 0) return false;\n\n        return recv(sock, static_cast<char*>(buffer), size, 0) == static_cast<int>(size);\n    }\n\n    bool Write(const void* buffer, size_t size, const std::chrono::nanoseconds& timeout) {\n        if (!connected) return false;\n        int sock = main_socket.sock;\n        int flags = set_blocking_mode(sock, true);\n        if (flags == -1) return false;\n\n        fd_set fds;\n        FD_ZERO(&fds);\n        FD_SET(sock, &fds);\n        struct timeval timeout_val = {static_cast<long>(timeout.count() / 1000000000L), static_cast<long>(timeout.count() % 1000000000L)};\n\n        int ret = select(sock + 1, NULL, &fds, NULL, &timeout_val);\n        if (ret == -1) return false;\n        if (ret == 0) return false;\n\n        return send(sock, static_cast<const char*>(buffer), size, 0) == static_cast<int>(size);\n    }\n\n    void Disconnect() {\n        if (!connected) return;\n        connected = false;\n        close(main_socket.sock);\n        main_socket.sock = -1;\n    }\n\n    bool SetNonBlock(SocketHolder sockFD, bool nonBlocking) {\n        return set_blocking_mode(sockFD.sock, !nonBlocking) == 0;\n    }\n\n    bool ConnectWithTimeout(SocketHolder sockFD, void* server_addr, size_t server_addr_len, int timeout_seconds) {\n        return connect_with_timeout(sockFD.sock, server_addr, server_addr_len, timeout_seconds) == 0;\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <chrono>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#include <fcntl.h>\n#include <sys/select.h>\n#include <sys/time.h>\n\nclass SocketHolder {\npublic:\n    int sock;\n    SocketHolder() : sock(-1) {}\n    ~SocketHolder() { close(sock); }\n};\n\nclass TCPClient {\nprivate:\n    std::string address;\n    u16 port;\n    SocketHolder main_socket;\n    bool connected;\n\n    int set_blocking_mode(int sock, bool blocking) {\n        int flags = fcntl(sock, F_GETFL, 0);\n        if (flags == -1) return -1;\n        flags = blocking ? (flags & ~O_NONBLOCK) : (flags | O_NONBLOCK);\n        return fcntl(sock, F_SETFL, flags);\n    }\n\n    int connect_with_timeout(int sock, const void* server_addr, size_t server_addr_len, int timeout_seconds) {\n        struct sockaddr_in server;\n        memset(&server, 0, sizeof(server));\n        server.sin_family = AF_INET;\n        server.sin_port = htons(port);\n        memcpy((char*)&server.sin_addr, server_addr, server_addr_len);\n\n        if (connect(sock, (struct sockaddr*)&server, sizeof(server)) == -1) {\n            return -1;\n        }\n\n        struct timeval timeout;\n        timeout.tv_sec = timeout_seconds;\n        timeout.tv_usec = 0;\n        if (setsockopt(sock, SOL_SOCKET, SO_RCVTIMEO, &timeout, sizeof(timeout)) == -1) {\n            return -1;\n        }\n        if (setsockopt(sock, SOL_SOCKET, SO_SNDTIMEO, &timeout, sizeof(timeout)) == -1) {\n            return -1;\n        }\n\n        return 0;\n    }\n\npublic:\n    TCPClient(const std::string& addr, u16 p) : address(addr), port(p), main_socket(), connected(false) {}\n\n    bool Connect() {\n        int sock = socket(AF_INET, SOCK_STREAM, 0);\n        if (sock == -1) return false;\n        main_socket.sock = sock;\n        connected = connect_with_timeout(sock, (void*)&inet_addr(address.c_str()), sizeof(in_addr), 10) == 0;\n        return connected;\n    }\n\n    bool Read(void* buffer, size_t size, const std::chrono::nanoseconds& timeout) {\n        if (!connected) return false;\n        fd_set fds;\n        FD_ZERO(&fds);\n        FD_SET(main_socket.sock, &fds);\n        struct timeval tv;\n        tv.tv_sec = timeout.count() / 1000000000;\n        tv.tv_usec = (timeout.count() % 1000000000) / 1000;\n        int result = select(main_socket.sock + 1, &fds, nullptr, nullptr, &tv);\n        if (result > 0) {\n            ssize_t bytes_read = read(main_socket.sock, buffer, size);\n            return bytes_read > 0;\n        }\n        return false;\n    }\n\n    bool Write(const void* buffer, size_t size, const std::chrono::nanoseconds& timeout) {\n        if (!connected) return false;\n        fd_set fds;\n        FD_ZERO(&fds);\n        FD_SET(main_socket.sock, &fds);\n        struct timeval tv;\n        tv.tv_sec = timeout.count() / 1000000000;\n        tv.tv_usec = (timeout.count() % 1000000000) / 1000;\n        int result = select(main_socket.sock + 1, nullptr, &fds, nullptr, &tv);\n        if (result > 0) {\n            ssize_t bytes_written = write(main_socket.sock, buffer, size);\n            return bytes_written > 0;\n        }\n        return false;\n    }\n\n    void Disconnect() {\n        if (connected) {\n            close(main_socket.sock);\n            connected = false;\n        }\n    }\n\n    bool SetNonBlock(SocketHolder sockFD, bool nonBlocking) {\n        return set_blocking_mode(sockFD.sock, !nonBlocking) == 0;\n    }\n\n    bool ConnectWithTimeout(SocketHolder sockFD, void* server_addr, size_t server_addr_len, int timeout_seconds) {\n        return connect_with_timeout(sockFD.sock, server_addr, server_addr_len, timeout_seconds) == 0;\n    }\n};\n```"
    ],
    "unmatched_results": [
      "```cpp\n#include <iostream>\n#include <string>\n#include <chrono>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#include <fcntl.h>\n#include <sys/select.h>\n#include <sys/time.h>\n\nclass SocketHolder {\npublic:\n    int sock;\n    SocketHolder(int s) : sock(s) {}\n    ~SocketHolder() { close(sock); }\n};\n\nclass TCPClient {\nprivate:\n    std::string address;\n    u16 port;\n    SocketHolder main_socket;\n    bool connected;\n\n    int set_blocking_mode(int sock, bool blocking) {\n        int flags = fcntl(sock, F_GETFL, 0);\n        if (flags == -1) return -1;\n        flags = blocking ? (flags & ~O_NONBLOCK) : (flags | O_NONBLOCK);\n        return fcntl(sock, F_SETFL, flags);\n    }\n\n    int connect_with_timeout(int sock, const void* server_addr, size_t server_addr_len, int timeout_seconds) {\n        struct sockaddr_in server;\n        memset(&server, 0, server_addr_len);\n        server.sin_family = AF_INET;\n        server.sin_port = htons(port);\n        memcpy(&server.sin_addr, server_addr, server_addr_len);\n\n        int ret = connect(sock, (struct sockaddr*)&server, server_addr_len);\n        if (ret == -1) {\n            fd_set fds;\n            FD_ZERO(&fds);\n            FD_SET(sock, &fds);\n            struct timeval timeout;\n            timeout.tv_sec = timeout_seconds;\n            timeout.tv_usec = 0;\n\n            ret = select(sock + 1, NULL, NULL, &fds, &timeout);\n            if (ret > 0) {\n                int error = errno;\n                if (error == EINPROGRESS || error == EWOULDBLOCK) {\n                    socklen_t len = sizeof(error);\n                    getsockopt(sock, SOL_SOCKET, SO_ERROR, &error, &len);\n                    if (error == 0) {\n                        ret = 0;\n                    }\n                }\n            }\n        }\n        return ret;\n    }\n\npublic:\n    TCPClient(const std::string& addr, u16 p) : address(addr), port(p), main_socket(-1), connected(false) {}\n\n    bool Connect() {\n        if (connected) return true;\n\n        int sock = socket(AF_INET, SOCK_STREAM, 0);\n        if (sock == -1) return false;\n\n        main_socket = SocketHolder(sock);\n        connected = connect_with_timeout(sock, (void*)&inet_addr(address.c_str()), sizeof(in_addr), 10) == 0;\n        return connected;\n    }\n\n    bool Read(void* buffer, size_t size, const std::chrono::nanoseconds& timeout) {\n        if (!connected) return false;\n\n        fd_set fds;\n        FD_ZERO(&fds);\n        FD_SET(main_socket.sock, &fds);\n        struct timeval timeout_val;\n        timeout_val.tv_sec = timeout.count() / 1000000000;\n        timeout_val.tv_usec = (timeout.count() % 1000000000) / 1000;\n\n        int ret = select(main_socket.sock + 1, &fds, NULL, NULL, &timeout_val);\n        if (ret > 0) {\n            ssize_t bytes_read = read(main_socket.sock, (char*)buffer, size);\n            return bytes_read == size;\n        }\n        return false;\n    }\n\n    bool Write(const void* buffer, size_t size, const std::chrono::nanoseconds& timeout) {\n        if (!connected) return false;\n\n        fd_set fds;\n        FD_ZERO(&fds);\n        FD_SET(main_socket.sock, &fds);\n        struct timeval timeout_val;\n        timeout_val.tv_sec = timeout.count() / 1000000000;\n        timeout_val.tv_usec = (timeout.count() % 1000000000) / 1000;\n\n        int ret = select(main_socket.sock + 1, NULL, &fds, NULL, &timeout_val);\n        if (ret > 0) {\n            ssize_t bytes_written = write(main_socket.sock, (const char*)buffer, size);\n            return bytes_written == size;\n        }\n        return false;\n    }\n\n    void Disconnect() {\n        if (connected) {\n            connected = false;\n            main_socket.sock = -1;\n        }\n    }\n\n    bool SetNonBlock(SocketHolder sockFD, bool nonBlocking) {\n        return set_blocking_mode(sockFD.sock, !nonBlocking) == 0;\n    }\n\n    bool ConnectWithTimeout(SocketHolder sockFD, void* server_addr, size_t server_addr_len, int timeout_seconds) {\n        return connect_with_timeout(sockFD.sock, server_addr, server_addr_len, timeout_seconds) == 0;\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <chrono>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#include <fcntl.h>\n#include <sys/select.h>\n#include <sys/time.h>\n\nclass SocketHolder {\npublic:\n    int sock;\n    SocketHolder(int s) : sock(s) {}\n    ~SocketHolder() { close(sock); }\n};\n\nclass TCPClient {\nprivate:\n    std::string address;\n    u16 port;\n    SocketHolder main_socket;\n    bool connected;\n\n    int set_blocking_mode(int sock, bool blocking) {\n        int flags = fcntl(sock, F_GETFL, 0);\n        if (flags == -1) return -1;\n        flags = blocking ? (flags & ~O_NONBLOCK) : (flags | O_NONBLOCK);\n        return fcntl(sock, F_SETFL, flags);\n    }\n\n    int connect_with_timeout(int sock, const void* server_addr, size_t server_addr_len, int timeout_seconds) {\n        struct sockaddr_in server;\n        memset(&server, 0, server_addr_len);\n        server.sin_family = AF_INET;\n        server.sin_port = htons(port);\n        memcpy((char*)&server.sin_addr, server_addr, server_addr_len);\n\n        int ret = connect(sock, (struct sockaddr*)&server, server_addr_len);\n        if (ret == -1) {\n            fd_set fds;\n            FD_ZERO(&fds);\n            FD_SET(sock, &fds);\n            struct timeval timeout;\n            timeout.tv_sec = timeout_seconds;\n            timeout.tv_usec = 0;\n\n            ret = select(sock + 1, NULL, NULL, &fds, &timeout);\n            if (ret > 0) {\n                int err = errno;\n                if (err == EINPROGRESS || err == EWOULDBLOCK) {\n                    socklen_t len = sizeof(err);\n                    getsockopt(sock, SOL_SOCKET, SO_ERROR, &err, &len);\n                    if (err == 0) {\n                        return 0; // Connection successful\n                    }\n                }\n            }\n        }\n        return ret;\n    }\n\npublic:\n    TCPClient(const std::string& addr, u16 p) : address(addr), port(p), main_socket(-1), connected(false) {}\n\n    bool Connect() {\n        if (connected) return true;\n        int sock = socket(AF_INET, SOCK_STREAM, 0);\n        if (sock == -1) return false;\n        main_socket = SocketHolder(sock);\n        connected = connect_with_timeout(sock, (void*)&inet_addr(address.c_str()), sizeof(in_addr), 10) == 0;\n        return connected;\n    }\n\n    bool Read(void* buffer, size_t size, const std::chrono::nanoseconds& timeout) {\n        if (!connected) return false;\n        fd_set fds;\n        FD_ZERO(&fds);\n        FD_SET(main_socket.sock, &fds);\n        struct timeval tv;\n        tv.tv_sec = timeout.count() / 1000000000;\n        tv.tv_usec = (timeout.count() % 1000000000) / 1000;\n\n        int ret = select(main_socket.sock + 1, &fds, NULL, NULL, &tv);\n        if (ret > 0) {\n            ssize_t bytes_read = read(main_socket.sock, (char*)buffer, size);\n            return bytes_read == size;\n        }\n        return false;\n    }\n\n    bool Write(const void* buffer, size_t size, const std::chrono::nanoseconds& timeout) {\n        if (!connected) return false;\n        fd_set fds;\n        FD_ZERO(&fds);\n        FD_SET(main_socket.sock, &fds);\n        struct timeval tv;\n        tv.tv_sec = timeout.count() / 1000000000;\n        tv.tv_usec = (timeout.count() % 1000000000) / 1000;\n\n        int ret = select(main_socket.sock + 1, NULL, &fds, NULL, &tv);\n        if (ret > 0) {\n            ssize_t bytes_written = write(main_socket.sock, (const char*)buffer, size);\n            return bytes_written == size;\n        }\n        return false;\n    }\n\n    void Disconnect() {\n        if (connected) {\n            connected = false;\n            main_socket.sock = -1;\n        }\n    }\n\n    bool SetNonBlock(SocketHolder sockFD, bool nonBlocking) {\n        return set_blocking_mode(sockFD.sock, !nonBlocking) == 0;\n    }\n\n    bool ConnectWithTimeout(SocketHolder sockFD, void* server_addr, size_t server_addr_len, int timeout_seconds) {\n        return connect_with_timeout(sockFD.sock, server_addr, server_addr_len, timeout_seconds) == 0;\n    }\n};\n```"
    ],
    "match_count": 8,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 2,
    "Instruction": "Task Description: Create a C++ class that implements HTTP client functionality using libcurl for making HTTP requests and handling responses, including JSON parsing capabilities.\n\nClass Description: The CurlHttpClient class provides methods for performing HTTP GET requests and downloading web pages, with support for custom headers and request bodies. It includes JSON response handling and memory management for received data.\n\nAttributes:\nMemoryStruct: [struct] - A helper structure for storing received data in memory during curl operations\n  - memory: [char*] - Pointer to the allocated memory buffer\n  - size: [size_t] - Size of the allocated memory buffer\n\nMethods:\nWriteMemoryCallback: [static](void* contents, size_t size, size_t nmemb, void* userp) -> size_t - A static callback function for libcurl to write received data into memory\n  - contents: [void*] - Pointer to the received data\n  - size: [size_t] - Size of each data element\n  - nmemb: [size_t] - Number of data elements\n  - userp: [void*] - Pointer to user-provided memory structure\n  - Returns: The number of bytes actually written\n\ndownloadPage: [](const std::string& url, std::string& res, const std::vector<std::string>& headers, const std::string& body) -> long - Downloads a web page and returns the HTTP status code\n  - url: [const std::string&] - The URL to request\n  - res: [std::string&] - Reference to store the response body\n  - headers: [const std::vector<std::string>&] - Vector of header strings to include in the request\n  - body: [const std::string&] - Request body content\n  - Returns: HTTP status code of the response\n\ngetRequest: [](const std::string& url, json& res, const std::vector<std::string>& headers, const std::string& body) -> long - Performs a GET request and parses the JSON response\n  - url: [const std::string&] - The URL to request\n  - res: [json&] - Reference to store the parsed JSON response\n  - headers: [const std::vector<std::string>&] - Vector of header strings to include in the request\n  - body: [const std::string&] - Request body content\n  - Returns: HTTP status code of the response",
    "Canonical_solution": "#include <curl/curl.h>\n#include <string>\n#include <vector>\n#include <nlohmann/json.hpp>\n\nusing json = nlohmann::ordered_json;\n\nclass CurlHttpClient {\npublic:\n    struct MemoryStruct {\n        char* memory;\n        size_t size;\n    };\n\n    static size_t WriteMemoryCallback(void* contents, size_t size, size_t nmemb, void* userp) {\n        size_t realsize = size * nmemb;\n        MemoryStruct* mem = (MemoryStruct*)userp;\n\n        char* ptr = static_cast<char*>(realloc(mem->memory, mem->size + realsize + 1));\n        if (ptr == NULL) {\n            return 0;\n        }\n\n        mem->memory = ptr;\n        memcpy(&(mem->memory[mem->size]), contents, realsize);\n        mem->size += realsize;\n        mem->memory[mem->size] = 0;\n\n        return realsize;\n    }\n\n    long downloadPage(const std::string& url, std::string& res, const std::vector<std::string>& headers, const std::string& body) {\n        CURL* curl_handle;\n        MemoryStruct chunk;\n        struct curl_slist* list = NULL;\n        long status_code;\n\n        chunk.memory = static_cast<char*>(malloc(1));\n        chunk.size = 0;\n\n        curl_global_init(CURL_GLOBAL_ALL);\n        curl_handle = curl_easy_init();\n        curl_easy_setopt(curl_handle, CURLOPT_URL, url.c_str());\n        if (!headers.empty()) {\n            for (auto& h : headers) {\n                list = curl_slist_append(list, h.c_str());\n            }\n            curl_easy_setopt(curl_handle, CURLOPT_HTTPHEADER, list);\n        }\n        if (body != \"\") {\n            curl_easy_setopt(curl_handle, CURLOPT_POSTFIELDS, body.c_str());\n        }\n\n        curl_easy_setopt(curl_handle, CURLOPT_WRITEFUNCTION, WriteMemoryCallback);\n        curl_easy_setopt(curl_handle, CURLOPT_WRITEDATA, (void*)&chunk);\n        curl_easy_setopt(curl_handle, CURLOPT_USERAGENT, \"HamletDuFromage\");\n\n        curl_easy_setopt(curl_handle, CURLOPT_SSL_VERIFYPEER, 0L);\n        curl_easy_perform(curl_handle);\n        curl_easy_getinfo(curl_handle, CURLINFO_RESPONSE_CODE, &status_code);\n        curl_easy_cleanup(curl_handle);\n        res = std::string(chunk.memory);\n        free(chunk.memory);\n\n        curl_global_cleanup();\n        return status_code;\n    }\n\n    long getRequest(const std::string& url, json& res, const std::vector<std::string>& headers, const std::string& body) {\n        std::string request;\n        long status_code = downloadPage(url, request, headers, body);\n\n        if (json::accept(request))\n            res = json::parse(request);\n        else\n            res = json::object();\n\n        return status_code;\n    }\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 146,
    "matched_results": [
      "```cpp\n#include <curl/curl.h>\n#include <nlohmann/json.hpp>\n\nstruct MemoryStruct {\n    char* memory;\n    size_t size;\n};\n\nstatic size_t WriteMemoryCallback(void* contents, size_t size, size_t nmemb, void* userp) {\n    MemoryStruct* mem = (MemoryStruct*)userp;\n    size_t new_size = mem->size + size * nmemb;\n    mem->memory = (char*)realloc(mem->memory, new_size);\n    if (mem->memory == NULL) {\n        return 0;\n    }\n    memcpy(mem->memory + mem->size, contents, size * nmemb);\n    mem->size = new_size;\n    return size * nmemb;\n}\n\nclass CurlHttpClient {\npublic:\n    long downloadPage(const std::string& url, std::string& res, const std::vector<std::string>& headers, const std::string& body) {\n        CURL* curl = curl_easy_init();\n        if (curl) {\n            std::string readBuffer;\n            MemoryStruct writeBuffer = {nullptr, 0};\n            curl_easy_setopt(curl, CURLOPT_URL, url.c_str());\n            curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, WriteMemoryCallback);\n            curl_easy_setopt(curl, CURLOPT_WRITEDATA, &writeBuffer);\n            if (!headers.empty()) {\n                std::string headersString;\n                for (const auto& header : headers) {\n                    headersString += header + \"\\r\\n\";\n                }\n                curl_easy_setopt(curl, CURLOPT_HTTPHEADER, (char*)headersString.c_str());\n            }\n            if (!body.empty()) {\n                curl_easy_setopt(curl, CURLOPT_POSTFIELDS, body.c_str());\n            }\n            CURLcode res = curl_easy_perform(curl);\n            long httpCode = 0;\n            curl_easy_getinfo(curl, CURLINFO_RESPONSE_CODE, &httpCode);\n            readBuffer = writeBuffer.memory;\n            curl_easy_cleanup(curl);\n            free(writeBuffer.memory);\n            res = readBuffer;\n            return httpCode;\n        }\n        return -1;\n    }\n\n    long getRequest(const std::string& url, nlohmann::json& res, const std::vector<std::string>& headers, const std::string& body) {\n        std::string response;\n        long httpCode = downloadPage(url, response, headers, body);\n        if (httpCode == 200) {\n            try {\n                res = nlohmann::json::parse(response);\n            } catch (nlohmann::json::parse_error& e) {\n                // Handle JSON parsing error\n                return -1;\n            }\n        }\n        return httpCode;\n    }\n};\n```",
      "```cpp\n#include <curl/curl.h>\n#include <vector>\n#include <string>\n#include <nlohmann/json.hpp>\n\nstruct MemoryStruct {\n    char* memory;\n    size_t size;\n};\n\nstatic size_t WriteMemoryCallback(void* contents, size_t size, size_t nmemb, void* userp) {\n    MemoryStruct* mem = (MemoryStruct*)userp;\n    size_t newsize = size * nmemb;\n    size_t cur_size = mem->size;\n    char* newmemory = (char*)realloc(mem->memory, cur_size + newsize);\n\n    if (newmemory) {\n        mem->memory = newmemory;\n        memcpy(&mem->memory[cur_size], contents, newsize);\n        mem->size += newsize;\n    }\n\n    return newsize;\n}\n\nclass CurlHttpClient {\npublic:\n    long downloadPage(const std::string& url, std::string& res, const std::vector<std::string>& headers, const std::string& body) {\n        CURL* curl = curl_easy_init();\n        if (!curl) return -1;\n\n        MemoryStruct mem = {nullptr, 0};\n        curl_easy_setopt(curl, CURLOPT_URL, url.c_str());\n        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, WriteMemoryCallback);\n        curl_easy_setopt(curl, CURLOPT_WRITEDATA, &mem);\n        curl_easy_setopt(curl, CURLOPT_HTTPHEADER, curl_slist_append(nullptr, \"Accept: application/json\"));\n        for (const auto& header : headers) {\n            curl_easy_setopt(curl, CURLOPT_HTTPHEADER, curl_slist_append(curl_easy_getinfo(curl, CURLINFO_HEADER_DATA), header.c_str()));\n        }\n        if (!body.empty()) {\n            curl_easy_setopt(curl, CURLOPT_POSTFIELDS, body.c_str());\n        }\n        CURLcode res_code = curl_easy_perform(curl);\n        long response_code;\n        curl_easy_getinfo(curl, CURLINFO_RESPONSE_CODE, &response_code);\n        curl_easy_cleanup(curl);\n\n        res = mem.memory;\n        free(mem.memory);\n        return response_code;\n    }\n\n    long getRequest(const std::string& url, nlohmann::json& res, const std::vector<std::string>& headers, const std::string& body) {\n        std::string response;\n        long status_code = downloadPage(url, response, headers, body);\n        if (status_code == 200) {\n            res = nlohmann::json::parse(response);\n        }\n        return status_code;\n    }\n};\n```",
      "```cpp\n#include <curl/curl.h>\n#include <vector>\n#include <string>\n#include <nlohmann/json.hpp>\n\nstruct MemoryStruct {\n    char* memory;\n    size_t size;\n};\n\nstatic size_t WriteMemoryCallback(void* contents, size_t size, size_t nmemb, void* userp) {\n    MemoryStruct* memStruct = (MemoryStruct*)userp;\n    size_t realSize = size * nmemb;\n    char* ptr = (char*)realloc(memStruct->memory, memStruct->size + realSize);\n\n    if (ptr) {\n        memStruct->memory = ptr;\n        memStruct->size += realSize;\n        memcpy(memStruct->memory + memStruct->size - realSize, contents, realSize);\n    }\n\n    return realSize;\n}\n\nclass CurlHttpClient {\npublic:\n    long downloadPage(const std::string& url, std::string& res, const std::vector<std::string>& headers, const std::string& body) {\n        CURL* curl = curl_easy_init();\n        if (!curl) return -1;\n\n        MemoryStruct memStruct = {nullptr, 0};\n        curl_easy_setopt(curl, CURLOPT_URL, url.c_str());\n        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, WriteMemoryCallback);\n        curl_easy_setopt(curl, CURLOPT_WRITEDATA, &memStruct);\n        curl_easy_setopt(curl, CURLOPT_HTTPHEADER, curl_slist_append(nullptr, \"Accept: application/json\"));\n        for (const auto& header : headers) {\n            curl_easy_setopt(curl, CURLOPT_HTTPHEADER, curl_slist_append(curl_easy_getinfo(curl, CURLINFO_HEADER_DATA), header.c_str()));\n        }\n        if (!body.empty()) {\n            curl_easy_setopt(curl, CURLOPT_POSTFIELDS, body.c_str());\n        }\n        CURLcode resCode = curl_easy_perform(curl);\n        long responseCode = 0;\n        curl_easy_getinfo(curl, CURLINFO_RESPONSE_CODE, &responseCode);\n        res = memStruct.memory;\n        curl_easy_cleanup(curl);\n        free(memStruct.memory);\n        return responseCode;\n    }\n\n    long getRequest(const std::string& url, nlohmann::json& res, const std::vector<std::string>& headers, const std::string& body) {\n        std::string response;\n        long statusCode = downloadPage(url, response, headers, body);\n        if (statusCode == 200) {\n            res = nlohmann::json::parse(response);\n        }\n        return statusCode;\n    }\n};\n```",
      "```cpp\n#include <curl/curl.h>\n#include <nlohmann/json.hpp>\n#include <string>\n#include <vector>\n\nstruct MemoryStruct {\n    char* memory;\n    size_t size;\n};\n\nstatic size_t WriteMemoryCallback(void* contents, size_t size, size_t nmemb, void* userp) {\n    MemoryStruct* mem = (MemoryStruct*)userp;\n    size_t newsize = mem->size + size * nmemb;\n    char* newmemory = (char*)realloc(mem->memory, newsize);\n\n    if (!newmemory) {\n        free(mem->memory);\n        mem->memory = NULL;\n        mem->size = 0;\n        return 0;\n    }\n\n    mem->memory = newmemory;\n    memcpy(mem->memory + mem->size, contents, size * nmemb);\n    mem->size = newsize;\n\n    return size * nmemb;\n}\n\nclass CurlHttpClient {\npublic:\n    long downloadPage(const std::string& url, std::string& res, const std::vector<std::string>& headers, const std::string& body) {\n        CURL* curl = curl_easy_init();\n        if (!curl) return -1;\n\n        std::string headerString;\n        for (const auto& header : headers) {\n            headerString += header + \"\\r\\n\";\n        }\n\n        curl_easy_setopt(curl, CURLOPT_URL, url.c_str());\n        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, WriteMemoryCallback);\n        curl_easy_setopt(curl, CURLOPT_WRITEDATA, &res);\n        curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headerString.c_str());\n        if (!body.empty()) {\n            curl_easy_setopt(curl, CURLOPT_POSTFIELDS, body.c_str());\n        }\n\n        long responseCode;\n        curl_easy_perform(curl);\n        curl_easy_getinfo(curl, CURLINFO_RESPONSE_CODE, &responseCode);\n        curl_easy_cleanup(curl);\n\n        return responseCode;\n    }\n\n    long getRequest(const std::string& url, nlohmann::json& res, const std::vector<std::string>& headers, const std::string& body) {\n        std::string response;\n        long statusCode = downloadPage(url, response, headers, body);\n        if (statusCode == 200) {\n            res = nlohmann::json::parse(response);\n        }\n        return statusCode;\n    }\n};\n```",
      "```cpp\n#include <curl/curl.h>\n#include <vector>\n#include <string>\n#include <nlohmann/json.hpp>\n\nstruct MemoryStruct {\n    char* memory;\n    size_t size;\n};\n\nstatic size_t WriteMemoryCallback(void* contents, size_t size, size_t nmemb, void* userp) {\n    MemoryStruct* mem = (MemoryStruct*)userp;\n    size_t new_size = size * nmemb;\n    size_t current_size = mem->size;\n    char* new_memory = (char*)realloc(mem->memory, current_size + new_size);\n\n    if (!new_memory) {\n        free(mem->memory);\n        mem->memory = NULL;\n        mem->size = 0;\n        return 0;\n    }\n\n    mem->memory = new_memory;\n    memcpy(mem->memory + current_size, contents, new_size);\n    mem->size += new_size;\n    return new_size;\n}\n\nclass CurlHttpClient {\npublic:\n    long downloadPage(const std::string& url, std::string& res, const std::vector<std::string>& headers, const std::string& body) {\n        CURL* curl = curl_easy_init();\n        if (!curl) return -1;\n\n        std::string headers_string;\n        for (const auto& header : headers) {\n            headers_string += header + \"\\r\\n\";\n        }\n\n        curl_easy_setopt(curl, CURLOPT_URL, url.c_str());\n        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, WriteMemoryCallback);\n        curl_easy_setopt(curl, CURLOPT_WRITEDATA, &res);\n        curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers_string.c_str());\n        if (!body.empty()) {\n            curl_easy_setopt(curl, CURLOPT_POSTFIELDS, body.c_str());\n        }\n\n        long response_code;\n        curl_easy_perform(curl);\n        curl_easy_getinfo(curl, CURLINFO_RESPONSE_CODE, &response_code);\n        curl_easy_cleanup(curl);\n        return response_code;\n    }\n\n    long getRequest(const std::string& url, nlohmann::json& res, const std::vector<std::string>& headers, const std::string& body) {\n        std::string response;\n        long status_code = downloadPage(url, response, headers, body);\n        if (status_code == 200) {\n            res = nlohmann::json::parse(response);\n        }\n        return status_code;\n    }\n};\n```",
      "```cpp\n#include <curl/curl.h>\n#include <vector>\n#include <string>\n#include <nlohmann/json.hpp>\n\nstruct MemoryStruct {\n    char* memory;\n    size_t size;\n};\n\nstatic size_t WriteMemoryCallback(void* contents, size_t size, size_t nmemb, void* userp) {\n    MemoryStruct* mem = (MemoryStruct*)userp;\n    size_t newsize = mem->size + size * nmemb;\n    mem->memory = (char*)realloc(mem->memory, newsize + 1);\n    if (mem->memory == NULL) {\n        return 0;\n    }\n    memcpy(mem->memory + mem->size, contents, size * nmemb);\n    mem->size = newsize;\n    mem->memory[newsize] = '\\0';\n    return size * nmemb;\n}\n\nclass CurlHttpClient {\npublic:\n    long downloadPage(const std::string& url, std::string& res, const std::vector<std::string>& headers, const std::string& body) {\n        CURL* curl = curl_easy_init();\n        if (curl) {\n            std::string readBuffer;\n            MemoryStruct writeBuffer = {nullptr, 0};\n            curl_easy_setopt(curl, CURLOPT_URL, url.c_str());\n            curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, WriteMemoryCallback);\n            curl_easy_setopt(curl, CURLOPT_WRITEDATA, &writeBuffer);\n            if (!headers.empty()) {\n                std::string headersStr;\n                for (const auto& header : headers) {\n                    headersStr += header + \"\\r\\n\";\n                }\n                curl_easy_setopt(curl, CURLOPT_HTTPHEADER, (char*)headersStr.c_str());\n            }\n            if (!body.empty()) {\n                curl_easy_setopt(curl, CURLOPT_POSTFIELDS, body.c_str());\n            }\n            CURLcode resCode = curl_easy_perform(curl);\n            long responseCode;\n            curl_easy_getinfo(curl, CURLINFO_RESPONSE_CODE, &responseCode);\n            readBuffer = writeBuffer.memory;\n            curl_easy_cleanup(curl);\n            free(writeBuffer.memory);\n            res = readBuffer;\n            return responseCode;\n        }\n        return -1;\n    }\n\n    long getRequest(const std::string& url, nlohmann::json& res, const std::vector<std::string>& headers, const std::string& body) {\n        std::string response;\n        long statusCode = downloadPage(url, response, headers, body);\n        if (statusCode == 200) {\n            try {\n                res = nlohmann::json::parse(response);\n            } catch (nlohmann::json::parse_error& e) {\n                statusCode = -1;\n            }\n        }\n        return statusCode;\n    }\n};\n```",
      "```cpp\n#include <curl/curl.h>\n#include <nlohmann/json.hpp>\n#include <string>\n#include <vector>\n\nstruct MemoryStruct {\n    char* memory;\n    size_t size;\n};\n\nstatic size_t WriteMemoryCallback(void* contents, size_t size, size_t nmemb, void* userp) {\n    MemoryStruct* mem = (MemoryStruct*)userp;\n    size_t newsize = mem->size + size * nmemb;\n    mem->memory = (char*)realloc(mem->memory, newsize);\n    if (mem->memory == NULL) {\n        return 0;\n    }\n    memcpy(mem->memory + mem->size, contents, size * nmemb);\n    mem->size = newsize;\n    return size * nmemb;\n}\n\nclass CurlHttpClient {\npublic:\n    long downloadPage(const std::string& url, std::string& res, const std::vector<std::string>& headers, const std::string& body) {\n        CURL* curl = curl_easy_init();\n        if (curl) {\n            std::string buffer;\n            MemoryStruct writeBuffer = {NULL, 0};\n            curl_easy_setopt(curl, CURLOPT_URL, url.c_str());\n            curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, WriteMemoryCallback);\n            curl_easy_setopt(curl, CURLOPT_WRITEDATA, &writeBuffer);\n            if (!headers.empty()) {\n                std::string headersStr;\n                for (const auto& header : headers) {\n                    headersStr += header + \"\\r\\n\";\n                }\n                curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headersStr.c_str());\n            }\n            if (!body.empty()) {\n                curl_easy_setopt(curl, CURLOPT_POSTFIELDS, body.c_str());\n            }\n            CURLcode resCode = curl_easy_perform(curl);\n            long responseCode;\n            curl_easy_getinfo(curl, CURLINFO_RESPONSE_CODE, &responseCode);\n            buffer = writeBuffer.memory;\n            res = buffer;\n            curl_easy_cleanup(curl);\n            free(writeBuffer.memory);\n            return responseCode;\n        }\n        return -1;\n    }\n\n    long getRequest(const std::string& url, nlohmann::json& res, const std::vector<std::string>& headers, const std::string& body) {\n        std::string response;\n        long statusCode = downloadPage(url, response, headers, body);\n        if (statusCode == 200) {\n            res = nlohmann::json::parse(response);\n        }\n        return statusCode;\n    }\n};\n```",
      "```cpp\n#include <curl/curl.h>\n#include <nlohmann/json.hpp>\n\nstruct MemoryStruct {\n    char* memory;\n    size_t size;\n};\n\nstatic size_t WriteMemoryCallback(void* contents, size_t size, size_t nmemb, void* userp) {\n    MemoryStruct* mem = (MemoryStruct*)userp;\n    size_t newsize = mem->size + size * nmemb;\n    mem->memory = (char*)realloc(mem->memory, newsize);\n    if (mem->memory == NULL) {\n        return 0;\n    }\n    memcpy(mem->memory + mem->size, contents, size * nmemb);\n    mem->size = newsize;\n    return size * nmemb;\n}\n\nclass CurlHttpClient {\npublic:\n    long downloadPage(const std::string& url, std::string& res, const std::vector<std::string>& headers, const std::string& body) {\n        CURL* curl = curl_easy_init();\n        if (curl) {\n            std::string readBuffer;\n            MemoryStruct writeBuffer = {NULL, 0};\n            curl_easy_setopt(curl, CURLOPT_URL, url.c_str());\n            curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, WriteMemoryCallback);\n            curl_easy_setopt(curl, CURLOPT_WRITEDATA, &writeBuffer);\n            if (!headers.empty()) {\n                std::string headersString;\n                for (const auto& header : headers) {\n                    headersString += header + \"\\r\\n\";\n                }\n                curl_easy_setopt(curl, CURLOPT_HTTPHEADER, (char*)headersString.c_str());\n            }\n            if (!body.empty()) {\n                curl_easy_setopt(curl, CURLOPT_POSTFIELDS, body.c_str());\n            }\n            CURLcode rescode = curl_easy_perform(curl);\n            long responseCode;\n            curl_easy_getinfo(curl, CURLINFO_RESPONSE_CODE, &responseCode);\n            res = writeBuffer.memory;\n            curl_easy_cleanup(curl);\n            free(writeBuffer.memory);\n            return responseCode;\n        }\n        return -1;\n    }\n\n    long getRequest(const std::string& url, nlohmann::json& res, const std::vector<std::string>& headers, const std::string& body) {\n        std::string response;\n        long statusCode = downloadPage(url, response, headers, body);\n        if (statusCode == 200) {\n            res = nlohmann::json::parse(response);\n        }\n        return statusCode;\n    }\n};\n```",
      "```cpp\n#include <curl/curl.h>\n#include <vector>\n#include <string>\n#include <nlohmann/json.hpp>\n\nstruct MemoryStruct {\n    char* memory;\n    size_t size;\n};\n\nstatic size_t WriteMemoryCallback(void* contents, size_t size, size_t nmemb, void* userp) {\n    MemoryStruct* memStruct = (MemoryStruct*)userp;\n    size_t realSize = size * nmemb;\n    char* ptr = (char*)realloc(memStruct->memory, memStruct->size + realSize);\n\n    if (ptr) {\n        memStruct->memory = ptr;\n        memcpy(memStruct->memory + memStruct->size, contents, realSize);\n        memStruct->size += realSize;\n    }\n\n    return realSize;\n}\n\nclass CurlHttpClient {\npublic:\n    long downloadPage(const std::string& url, std::string& res, const std::vector<std::string>& headers, const std::string& body) {\n        CURL* curl = curl_easy_init();\n        if (curl) {\n            MemoryStruct memStruct = {nullptr, 0};\n            curl_easy_setopt(curl, CURLOPT_URL, url.c_str());\n            curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, WriteMemoryCallback);\n            curl_easy_setopt(curl, CURLOPT_WRITEDATA, &memStruct);\n            curl_easy_setopt(curl, CURLOPT_HTTPHEADER, curl_slist_append(nullptr, \"Accept: application/json\"));\n            for (const auto& header : headers) {\n                curl_easy_setopt(curl, CURLOPT_HTTPHEADER, curl_slist_append(curl_easy_getinfo(curl, CURLINFO_HEADER_DATA), header.c_str()));\n            }\n            if (!body.empty()) {\n                curl_easy_setopt(curl, CURLOPT_POSTFIELDS, body.c_str());\n            }\n            CURLcode resCode = curl_easy_perform(curl);\n            long responseCode = 0;\n            curl_easy_getinfo(curl, CURLINFO_RESPONSE_CODE, &responseCode);\n            res = memStruct.memory;\n            curl_free(memStruct.memory);\n            curl_easy_cleanup(curl);\n            return responseCode;\n        }\n        return -1;\n    }\n\n    long getRequest(const std::string& url, nlohmann::json& res, const std::vector<std::string>& headers, const std::string& body) {\n        std::string response;\n        long statusCode = downloadPage(url, response, headers, body);\n        if (statusCode == 200) {\n            res = nlohmann::json::parse(response);\n        }\n        return statusCode;\n    }\n};\n```",
      "```cpp\n#include <curl/curl.h>\n#include <vector>\n#include <string>\n#include <nlohmann/json.hpp>\n\nstruct MemoryStruct {\n    char* memory;\n    size_t size;\n};\n\nstatic size_t WriteMemoryCallback(void* contents, size_t size, size_t nmemb, void* userp) {\n    MemoryStruct* memStruct = (MemoryStruct*)userp;\n    size_t realSize = size * nmemb;\n    char* ptr = (char*)realloc(memStruct->memory, memStruct->size + realSize);\n    if (ptr) {\n        memStruct->memory = ptr;\n        memStruct->size += realSize;\n        memcpy(memStruct->memory + memStruct->size - realSize, contents, realSize);\n    }\n    return realSize;\n}\n\nclass CurlHttpClient {\npublic:\n    long downloadPage(const std::string& url, std::string& res, const std::vector<std::string>& headers, const std::string& body) {\n        CURL* curl = curl_easy_init();\n        if (curl) {\n            std::string readBuffer;\n            MemoryStruct writeBuffer = {nullptr, 0};\n            curl_easy_setopt(curl, CURLOPT_URL, url.c_str());\n            curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, WriteMemoryCallback);\n            curl_easy_setopt(curl, CURLOPT_WRITEDATA, &writeBuffer);\n            if (!headers.empty()) {\n                std::string headersString;\n                for (const auto& header : headers) {\n                    headersString += header + \"\\r\\n\";\n                }\n                curl_easy_setopt(curl, CURLOPT_HTTPHEADER, (char*)headersString.c_str());\n            }\n            if (!body.empty()) {\n                curl_easy_setopt(curl, CURLOPT_POSTFIELDS, body.c_str());\n            }\n            CURLcode resCode = curl_easy_perform(curl);\n            long responseCode;\n            curl_easy_getinfo(curl, CURLINFO_RESPONSE_CODE, &responseCode);\n            readBuffer = writeBuffer.memory;\n            res = readBuffer;\n            free(writeBuffer.memory);\n            curl_easy_cleanup(curl);\n            return responseCode;\n        }\n        return -1;\n    }\n\n    long getRequest(const std::string& url, nlohmann::json& res, const std::vector<std::string>& headers, const std::string& body) {\n        std::string response;\n        long statusCode = downloadPage(url, response, headers, body);\n        if (statusCode >= 200 && statusCode < 300) {\n            try {\n                res = nlohmann::json::parse(response);\n            } catch (nlohmann::json::parse_error& e) {\n                // Handle JSON parsing error\n                statusCode = -1;\n            }\n        }\n        return statusCode;\n    }\n};\n```"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 20,
    "Instruction": "Task Description: Implement a TCP client function that establishes a connection to a server, sends data, and reads the server's response in a continuous loop, handling connection errors and reconnection attempts.\n\nFunction Description: The function `readwrite_routine` implements a TCP client that continuously attempts to connect to a specified server endpoint. Once connected, it sends a fixed message and reads the server's response. If the connection fails or is lost, it automatically attempts to reconnect. The function handles connection states and errors appropriately, including non-blocking connection scenarios.\n\nInput: \n- `arg` (void pointer): A pointer to a `stEndPoint` structure containing:\n  - `ip` (char pointer): The IP address of the server to connect to (can be NULL or special values for default behavior)\n  - `port` (unsigned short int): The port number of the server to connect to\n\nOutput: \n- Returns NULL (void pointer) when the loop exits (though the provided implementation has an infinite loop)\n- No explicit return value, but performs I/O operations through the socket\n\nNote: The function runs in an infinite loop and should typically be executed in a separate thread. It manages its own socket lifecycle, creating and closing sockets as needed during connection attempts and communication.",
    "Canonical_solution": "#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n\nstruct stEndPoint\n{\n    char *ip;\n    unsigned short int port;\n};\n\nstatic void SetAddr(const char *pszIP, const unsigned short shPort, struct sockaddr_in &addr)\n{\n    bzero(&addr, sizeof(addr));\n    addr.sin_family = AF_INET;\n    addr.sin_port = htons(shPort);\n    int nIP = 0;\n    if(!pszIP || '\\0' == *pszIP   \n            || 0 == strcmp(pszIP,\"0\") || 0 == strcmp(pszIP,\"0.0.0.0\") \n            || 0 == strcmp(pszIP,\"*\") \n      )\n    {\n        nIP = htonl(INADDR_ANY);\n    }\n    else\n    {\n        nIP = inet_addr(pszIP);\n    }\n    addr.sin_addr.s_addr = nIP;\n}\n\nstatic void *readwrite_routine(void *arg)\n{\n    stEndPoint *endpoint = (stEndPoint *)arg;\n    char str[8] = \"sarlmol\";\n    char buf[1024 * 16];\n    int fd = -1;\n    int ret = 0;\n    \n    for(;;)\n    {\n        if(fd < 0)\n        {\n            fd = socket(PF_INET, SOCK_STREAM, 0);\n            struct sockaddr_in addr;\n            SetAddr(endpoint->ip, endpoint->port, addr);\n            ret = connect(fd, (struct sockaddr*)&addr, sizeof(addr));\n            \n            if(errno == EALREADY || errno == EINPROGRESS)\n            {       \n                struct pollfd pf = {0};\n                pf.fd = fd;\n                pf.events = (POLLOUT|POLLERR|POLLHUP);\n                co_poll(co_get_epoll_ct(), &pf, 1, 200);\n                \n                int error = 0;\n                uint32_t socklen = sizeof(error);\n                errno = 0;\n                ret = getsockopt(fd, SOL_SOCKET, SO_ERROR, (void *)&error, &socklen);\n                if(ret == -1)\n                {       \n                    close(fd);\n                    fd = -1;\n                    continue;\n                }       \n                if(error)\n                {       \n                    errno = error;\n                    close(fd);\n                    fd = -1;\n                    continue;\n                }       \n            }\n        }\n        \n        ret = write(fd, str, 8);\n        if(ret > 0)\n        {\n            ret = read(fd, buf, sizeof(buf));\n            if(ret <= 0)\n            {\n                close(fd);\n                fd = -1;\n            }\n        }\n        else\n        {\n            close(fd);\n            fd = -1;\n        }\n    }\n    return 0;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 149,
    "matched_results": [
      "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\n#include <errno.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <pthread.h>\n\ntypedef struct stEndPoint {\n    char *ip;\n    unsigned short int port;\n} stEndPoint;\n\nvoid *readwrite_routine(void *arg) {\n    stEndPoint *endPoint = (stEndPoint *)arg;\n    int sock;\n    struct sockaddr_in server_addr;\n    char buffer[1024];\n    const char *message = \"Hello, Server!\";\n    int retry_count = 0;\n    int max_retries = 5;\n\n    while (1) {\n        sock = socket(AF_INET, SOCK_STREAM, 0);\n        if (sock < 0) {\n            perror(\"socket\");\n            continue;\n        }\n\n        memset(&server_addr, 0, sizeof(server_addr));\n        server_addr.sin_family = AF_INET;\n        server_addr.sin_port = htons(endPoint->port);\n\n        if (endPoint->ip) {\n            if (inet_pton(AF_INET, endPoint->ip, &server_addr.sin_addr) <= 0) {\n                perror(\"inet_pton\");\n                close(sock);\n                continue;\n            }\n        }\n\n        while (connect(sock, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {\n            if (errno != EINPROGRESS) {\n                perror(\"connect\");\n                close(sock);\n                break;\n            }\n            if (retry_count++ > max_retries) {\n                fprintf(stderr, \"Failed to connect after %d attempts\\n\", max_retries);\n                close(sock);\n                break;\n            }\n            sleep(1);\n        }\n\n        if (retry_count > max_retries) {\n            continue;\n        }\n\n        if (send(sock, message, strlen(message), 0) < 0) {\n            perror(\"send\");\n            close(sock);\n            continue;\n        }\n\n        if (recv(sock, buffer, sizeof(buffer), 0) < 0) {\n            perror(\"recv\");\n            close(sock);\n            continue;\n        }\n\n        printf(\"Server response: %s\\n\", buffer);\n\n        close(sock);\n        sleep(1);\n    }\n\n    return NULL;\n}\n```",
      "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <errno.h>\n\ntypedef struct stEndPoint {\n    char *ip;\n    unsigned short int port;\n} stEndPoint;\n\nvoid readwrite_routine(void *arg) {\n    stEndPoint *endPoint = (stEndPoint *)arg;\n    int sock;\n    struct sockaddr_in server_addr;\n    char buffer[1024];\n    const char *message = \"Hello, Server!\";\n    int bytes_read;\n\n    while (1) {\n        sock = socket(AF_INET, SOCK_STREAM, 0);\n        if (sock < 0) {\n            perror(\"Socket creation failed\");\n            continue;\n        }\n\n        memset(&server_addr, 0, sizeof(server_addr));\n        server_addr.sin_family = AF_INET;\n        server_addr.sin_port = htons(endPoint->port);\n\n        if (endPoint->ip != NULL) {\n            if (inet_pton(AF_INET, endPoint->ip, &server_addr.sin_addr) <= 0) {\n                perror(\"Invalid address/ Address not supported\");\n                close(sock);\n                continue;\n            }\n        }\n\n        if (connect(sock, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {\n            perror(\"Connection failed\");\n            close(sock);\n            continue;\n        }\n\n        send(sock, message, strlen(message), 0);\n        bytes_read = recv(sock, buffer, sizeof(buffer), 0);\n        if (bytes_read > 0) {\n            printf(\"Server response: %s\\n\", buffer);\n        } else {\n            printf(\"No response from server\\n\");\n        }\n\n        close(sock);\n        sleep(1); // Wait before trying to reconnect\n    }\n}\n```",
      "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\n#include <errno.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n\ntypedef struct stEndPoint {\n    char *ip;\n    unsigned short int port;\n} stEndPoint;\n\nvoid *readwrite_routine(void *arg) {\n    stEndPoint *endPoint = (stEndPoint *)arg;\n    int sock;\n    struct sockaddr_in server_addr;\n    char buffer[1024];\n    const char *message = \"Hello, server!\";\n    int retry_count = 0;\n    int max_retries = 5;\n\n    while (1) {\n        sock = socket(AF_INET, SOCK_STREAM, 0);\n        if (sock < 0) {\n            perror(\"socket creation failed\");\n            continue;\n        }\n\n        server_addr.sin_family = AF_INET;\n        server_addr.sin_port = htons(endPoint->port);\n\n        if (endPoint->ip) {\n            if (inet_pton(AF_INET, endPoint->ip, &server_addr.sin_addr) <= 0) {\n                perror(\"Invalid address/ Address not supported\");\n                close(sock);\n                continue;\n            }\n        }\n\n        if (connect(sock, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {\n            perror(\"Connection Failed\");\n            close(sock);\n            retry_count++;\n            if (retry_count > max_retries) {\n                fprintf(stderr, \"Max retries exceeded. Exiting.\\n\");\n                break;\n            }\n            sleep(1); // Wait for 1 second before retrying\n            continue;\n        }\n\n        retry_count = 0; // Reset retry count after successful connection\n\n        while (1) {\n            if (send(sock, message, strlen(message), 0) < 0) {\n                perror(\"Send failed\");\n                close(sock);\n                break;\n            }\n\n            if (recv(sock, buffer, sizeof(buffer), 0) < 0) {\n                perror(\"Receive failed\");\n                close(sock);\n                break;\n            }\n\n            printf(\"Server response: %s\\n\", buffer);\n        }\n\n        close(sock);\n    }\n\n    return NULL;\n}\n```",
      "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\n#include <errno.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n\ntypedef struct stEndPoint {\n    char *ip;\n    unsigned short port;\n} stEndPoint;\n\nvoid readwrite_routine(void *arg) {\n    stEndPoint *endPoint = (stEndPoint *)arg;\n    int sock;\n    struct sockaddr_in server_addr;\n    char send_buffer[1024];\n    char recv_buffer[1024];\n    int send_len, recv_len;\n\n    while (1) {\n        sock = socket(AF_INET, SOCK_STREAM, 0);\n        if (sock < 0) {\n            perror(\"socket creation failed\");\n            continue;\n        }\n\n        memset(&server_addr, 0, sizeof(server_addr));\n        server_addr.sin_family = AF_INET;\n        server_addr.sin_port = htons(endPoint->port);\n\n        if (endPoint->ip) {\n            if (inet_pton(AF_INET, endPoint->ip, &server_addr.sin_addr) <= 0) {\n                perror(\"Invalid address/ Address not supported\");\n                close(sock);\n                continue;\n            }\n        }\n\n        if (connect(sock, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {\n            perror(\"connect failed\");\n            close(sock);\n            continue;\n        }\n\n        strcpy(send_buffer, \"Hello, Server!\");\n        send_len = send(sock, send_buffer, strlen(send_buffer), 0);\n        if (send_len < 0) {\n            perror(\"send failed\");\n            close(sock);\n            continue;\n        }\n\n        recv_len = recv(sock, recv_buffer, sizeof(recv_buffer), 0);\n        if (recv_len < 0) {\n            perror(\"recv failed\");\n            close(sock);\n            continue;\n        }\n\n        printf(\"Server response: %s\\n\", recv_buffer);\n\n        close(sock);\n        sleep(1); // Sleep for a while before trying to reconnect\n    }\n}\n```",
      "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\n#include <errno.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n\ntypedef struct stEndPoint {\n    char *ip;\n    unsigned short port;\n} stEndPoint;\n\nvoid *readwrite_routine(void *arg) {\n    stEndPoint *endPoint = (stEndPoint *)arg;\n    int sockfd = -1;\n    char sendBuffer[1024];\n    char recvBuffer[1024];\n    struct sockaddr_in server_addr;\n    socklen_t server_addr_len = sizeof(server_addr);\n\n    while (1) {\n        if (endPoint->ip == NULL) {\n            endPoint->ip = \"127.0.0.1\"; // Default IP\n        }\n\n        memset(&server_addr, 0, server_addr_len);\n        server_addr.sin_family = AF_INET;\n        server_addr.sin_port = htons(endPoint->port);\n        server_addr.sin_addr.s_addr = inet_addr(endPoint->ip);\n\n        if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n            perror(\"socket\");\n            continue;\n        }\n\n        if (connect(sockfd, (struct sockaddr *)&server_addr, server_addr_len) < 0) {\n            perror(\"connect\");\n            close(sockfd);\n            sockfd = -1;\n            continue;\n        }\n\n        sprintf(sendBuffer, \"Hello, Server!\");\n        if (send(sockfd, sendBuffer, strlen(sendBuffer), 0) < 0) {\n            perror(\"send\");\n            close(sockfd);\n            sockfd = -1;\n            continue;\n        }\n\n        if (recv(sockfd, recvBuffer, sizeof(recvBuffer), 0) < 0) {\n            perror(\"recv\");\n            close(sockfd);\n            sockfd = -1;\n            continue;\n        }\n\n        printf(\"Server response: %s\\n\", recvBuffer);\n\n        close(sockfd);\n        sockfd = -1;\n    }\n\n    return NULL;\n}\n```",
      "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <errno.h>\n\ntypedef struct stEndPoint {\n    char *ip;\n    unsigned short int port;\n} stEndPoint;\n\nvoid readwrite_routine(void *arg) {\n    stEndPoint *endPoint = (stEndPoint *)arg;\n    int sock = -1;\n    struct sockaddr_in server_addr;\n    char message[] = \"Hello, server!\";\n    char buffer[1024];\n    int bytes_read;\n\n    while (1) {\n        if (endPoint->ip == NULL) {\n            server_addr.sin_family = AF_INET;\n            server_addr.sin_port = htons(endPoint->port);\n            server_addr.sin_addr.s_addr = INADDR_ANY;\n        } else {\n            server_addr.sin_family = AF_INET;\n            server_addr.sin_port = htons(endPoint->port);\n            if (inet_pton(AF_INET, endPoint->ip, &server_addr.sin_addr) <= 0) {\n                perror(\"Invalid address / Address not supported\");\n                continue;\n            }\n        }\n\n        sock = socket(AF_INET, SOCK_STREAM, 0);\n        if (sock < 0) {\n            perror(\"Socket creation failed\");\n            continue;\n        }\n\n        if (connect(sock, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {\n            perror(\"Connection failed\");\n            close(sock);\n            sock = -1;\n            sleep(1); // Wait for 1 second before retrying\n            continue;\n        }\n\n        while (1) {\n            if (send(sock, message, strlen(message), 0) < 0) {\n                perror(\"Send failed\");\n                break;\n            }\n\n            bytes_read = recv(sock, buffer, sizeof(buffer), 0);\n            if (bytes_read < 0) {\n                perror(\"Receive failed\");\n                break;\n            }\n\n            if (bytes_read == 0) {\n                printf(\"Server closed the connection\\n\");\n                break;\n            }\n\n            buffer[bytes_read] = '\\0';\n            printf(\"Received: %s\\n\", buffer);\n        }\n\n        close(sock);\n        sock = -1;\n        sleep(1); // Wait for 1 second before retrying\n    }\n}\n```",
      "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\n#include <errno.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <pthread.h>\n\ntypedef struct stEndPoint {\n    char *ip;\n    unsigned short int port;\n} stEndPoint;\n\nvoid *readwrite_routine(void *arg) {\n    stEndPoint *endPoint = (stEndPoint *)arg;\n    int sock;\n    struct sockaddr_in server_addr;\n    char *message = \"Hello, Server!\";\n    char buffer[1024];\n    int bytes_read;\n    int retry_count = 0;\n    int max_retries = 5;\n\n    while (1) {\n        sock = socket(AF_INET, SOCK_STREAM, 0);\n        if (sock < 0) {\n            perror(\"Socket creation failed\");\n            continue;\n        }\n\n        memset(&server_addr, 0, sizeof(server_addr));\n        server_addr.sin_family = AF_INET;\n        server_addr.sin_port = htons(endPoint->port);\n\n        if (endPoint->ip) {\n            if (inet_pton(AF_INET, endPoint->ip, &server_addr.sin_addr) <= 0) {\n                perror(\"Invalid address / Address not supported\");\n                close(sock);\n                continue;\n            }\n        }\n\n        while (connect(sock, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {\n            if (errno != EINPROGRESS) {\n                perror(\"Connection failed\");\n                close(sock);\n                break;\n            }\n            if (++retry_count > max_retries) {\n                perror(\"Max retries exceeded\");\n                close(sock);\n                break;\n            }\n            sleep(1); // Wait for 1 second before retrying\n        }\n\n        if (retry_count > max_retries) {\n            continue;\n        }\n\n        send(sock, message, strlen(message), 0);\n        bytes_read = recv(sock, buffer, sizeof(buffer), 0);\n        if (bytes_read > 0) {\n            buffer[bytes_read] = '\\0';\n            printf(\"Server response: %s\\n\", buffer);\n        }\n\n        close(sock);\n        sleep(1); // Wait for 1 second before trying to reconnect\n    }\n\n    return NULL;\n}\n```",
      "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\n#include <errno.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <pthread.h>\n\ntypedef struct stEndPoint {\n    char *ip;\n    unsigned short int port;\n} stEndPoint;\n\nvoid *readwrite_routine(void *arg) {\n    stEndPoint *endPoint = (stEndPoint *)arg;\n    int sock;\n    struct sockaddr_in server_addr;\n    char buffer[1024];\n    const char *message = \"Hello, Server!\";\n    int retry_count = 0;\n    int max_retries = 5;\n\n    while (1) {\n        sock = socket(AF_INET, SOCK_STREAM, 0);\n        if (sock < 0) {\n            perror(\"socket creation failed\");\n            continue;\n        }\n\n        memset(&server_addr, 0, sizeof(server_addr));\n        server_addr.sin_family = AF_INET;\n        server_addr.sin_port = htons(endPoint->port);\n\n        if (endPoint->ip) {\n            if (inet_pton(AF_INET, endPoint->ip, &server_addr.sin_addr) <= 0) {\n                perror(\"Invalid address/ Address not supported\");\n                close(sock);\n                continue;\n            }\n        }\n\n        while (connect(sock, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {\n            if (errno != EINPROGRESS) {\n                perror(\"connect failed\");\n                close(sock);\n                break;\n            }\n            if (retry_count >= max_retries) {\n                perror(\"Max retries reached, connection failed\");\n                close(sock);\n                break;\n            }\n            sleep(1);\n            retry_count++;\n        }\n\n        if (retry_count < max_retries) {\n            send(sock, message, strlen(message), 0);\n            int bytes_read = recv(sock, buffer, sizeof(buffer), 0);\n            if (bytes_read > 0) {\n                buffer[bytes_read] = '\\0';\n                printf(\"Server response: %s\\n\", buffer);\n            }\n        }\n\n        close(sock);\n        sleep(5); // Wait before trying to reconnect\n    }\n\n    return NULL;\n}\n```",
      "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\n#include <errno.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <pthread.h>\n\ntypedef struct stEndPoint {\n    char *ip;\n    unsigned short int port;\n} stEndPoint;\n\nvoid *readwrite_routine(void *arg) {\n    stEndPoint *endPoint = (stEndPoint *)arg;\n    int sock;\n    struct sockaddr_in server_addr;\n    char *message = \"Hello, Server!\";\n    char buffer[1024];\n    int bytes_read;\n\n    while (1) {\n        sock = socket(AF_INET, SOCK_STREAM, 0);\n        if (sock < 0) {\n            perror(\"Socket creation failed\");\n            continue;\n        }\n\n        memset(&server_addr, 0, sizeof(server_addr));\n        server_addr.sin_family = AF_INET;\n        server_addr.sin_port = htons(endPoint->port);\n\n        if (endPoint->ip) {\n            if (inet_pton(AF_INET, endPoint->ip, &server_addr.sin_addr) <= 0) {\n                perror(\"Invalid address/ Address not supported\");\n                close(sock);\n                continue;\n            }\n        }\n\n        if (connect(sock, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {\n            perror(\"Connection failed\");\n            close(sock);\n            continue;\n        }\n\n        while (1) {\n            if (send(sock, message, strlen(message), 0) < 0) {\n                perror(\"Send failed\");\n                break;\n            }\n\n            bytes_read = recv(sock, buffer, sizeof(buffer), 0);\n            if (bytes_read < 0) {\n                perror(\"Receive failed\");\n                break;\n            }\n\n            buffer[bytes_read] = '\\0';\n            printf(\"Server response: %s\\n\", buffer);\n        }\n\n        close(sock);\n        sleep(5); // Wait before trying to reconnect\n    }\n\n    return NULL;\n}\n```",
      "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\n#include <errno.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <pthread.h>\n\ntypedef struct stEndPoint {\n    char *ip;\n    unsigned short port;\n} stEndPoint;\n\nvoid *readwrite_routine(void *arg) {\n    stEndPoint *endPoint = (stEndPoint *)arg;\n    int sock;\n    struct sockaddr_in server_addr;\n    char send_buffer[] = \"Hello, Server!\";\n    char recv_buffer[1024];\n    int send_len, recv_len;\n    int retry_count = 0;\n    int max_retries = 5;\n\n    while (1) {\n        sock = socket(AF_INET, SOCK_STREAM, 0);\n        if (sock < 0) {\n            perror(\"socket creation failed\");\n            continue;\n        }\n\n        server_addr.sin_family = AF_INET;\n        server_addr.sin_port = htons(endPoint->port);\n        if (endPoint->ip) {\n            if (inet_pton(AF_INET, endPoint->ip, &server_addr.sin_addr) <= 0) {\n                perror(\"Invalid address/ Address not supported\");\n                close(sock);\n                continue;\n            }\n        }\n\n        while (connect(sock, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {\n            if (errno != EINPROGRESS) {\n                perror(\"connect failed\");\n                close(sock);\n                break;\n            }\n            if (++retry_count > max_retries) {\n                fprintf(stderr, \"Failed to connect to server after %d attempts\\n\", max_retries);\n                close(sock);\n                break;\n            }\n            sleep(1);\n        }\n\n        if (retry_count > max_retries) {\n            continue;\n        }\n\n        send_len = send(sock, send_buffer, strlen(send_buffer), 0);\n        if (send_len < 0) {\n            perror(\"send failed\");\n            close(sock);\n            continue;\n        }\n\n        recv_len = recv(sock, recv_buffer, sizeof(recv_buffer), 0);\n        if (recv_len < 0) {\n            perror(\"recv failed\");\n            close(sock);\n            continue;\n        }\n\n        printf(\"Received from server: %s\\n\", recv_buffer);\n\n        close(sock);\n    }\n\n    return NULL;\n}\n```"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 21,
    "Instruction": "Task Description: Implement a TCP client function in C++ that establishes a connection to a server, sends user input messages, and receives responses from the server until the connection is terminated.\n\nFunction Description: The function `tcp_client_communication` creates a TCP socket, connects to a specified server (localhost on port 8888 in this case), and enters a loop where it reads user input from stdin, sends it to the server, and prints the server's response. The communication continues until an error occurs or the connection is closed by either side.\n\nInput: None (The server IP and port are hardcoded as 127.0.0.1 and 8888 respectively in the function. User input is collected interactively during execution.)\n\nOutput: None (The function prints server responses to stdout but doesn't return any value. All communication results are handled via side effects.)\n\nNote: The function handles its own socket cleanup by closing the connection before exiting.",
    "Canonical_solution": "#include <sys/socket.h>\n#include <arpa/inet.h>\n#include <string.h>\n#include <unistd.h>\n\n#define BUFFER_SIZE 1024\n\nvoid tcp_client_communication() {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    \n    struct sockaddr_in serv_addr;\n    bzero(&serv_addr, sizeof(serv_addr));\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_addr.s_addr = inet_addr(\"127.0.0.1\");\n    serv_addr.sin_port = htons(8888);\n\n    connect(sockfd, (sockaddr*)&serv_addr, sizeof(serv_addr));\n    \n    while(true){\n        char buf[BUFFER_SIZE];\n        bzero(&buf, sizeof(buf));\n        scanf(\"%s\", buf);\n        ssize_t write_bytes = write(sockfd, buf, sizeof(buf));\n        if(write_bytes == -1){\n            break;\n        }\n        bzero(&buf, sizeof(buf));\n        ssize_t read_bytes = read(sockfd, buf, sizeof(buf));\n        if(read_bytes > 0){\n            printf(\"message from server: %s\\n\", buf);\n        }else if(read_bytes == 0){\n            break;\n        }else if(read_bytes == -1){\n            close(sockfd);\n            break;\n        }\n    }\n    close(sockfd);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 149,
    "matched_results": [
      "```cpp\n#include <iostream>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#include <cstring>\n\nvoid tcp_client_communication() {\n    int sockfd;\n    struct sockaddr_in servaddr;\n\n    // Create socket file descriptor\n    sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd == -1) {\n        std::cerr << \"Socket creation failed\" << std::endl;\n        return;\n    }\n\n    // Clear servaddr\n    memset(&servaddr, 0, sizeof(servaddr));\n\n    // Set server address family, IP and port\n    servaddr.sin_family = AF_INET;\n    servaddr.sin_port = htons(8888);\n    servaddr.sin_addr.s_addr = inet_addr(\"127.0.0.1\");\n\n    // Connect to server\n    if (connect(sockfd, (struct sockaddr *)&servaddr, sizeof(servaddr)) != 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        return;\n    }\n\n    char sendline[1024], recvline[1024];\n\n    while (true) {\n        // Read user input\n        std::cout << \"> \";\n        std::cin.getline(sendline, 1024);\n\n        // Send user input to server\n        write(sockfd, sendline, strlen(sendline));\n\n        // Receive response from server\n        read(sockfd, recvline, 1024);\n        std::cout << \"Server: \" << recvline << std::endl;\n\n        // Check for connection termination\n        if (strcmp(recvline, \"END\") == 0) {\n            break;\n        }\n    }\n\n    // Close the socket\n    close(sockfd);\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nvoid tcp_client_communication() {\n    int sockfd;\n    struct sockaddr_in servaddr;\n\n    // Create socket file descriptor\n    if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation failed\" << std::endl;\n        return;\n    }\n\n    // Clear servaddr\n    memset(&servaddr, 0, sizeof(servaddr));\n\n    // Set server address\n    servaddr.sin_family = AF_INET;\n    servaddr.sin_port = htons(8888);\n    if (inet_pton(AF_INET, \"127.0.0.1\", &servaddr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        return;\n    }\n\n    // Connect to server\n    if (connect(sockfd, (struct sockaddr *)&servaddr, sizeof(servaddr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        return;\n    }\n\n    char sendline[1024], recvline[1024];\n    while (true) {\n        // Read user input\n        std::cout << \"> \";\n        if (!std::cin.getline(sendline, 1024)) {\n            break;\n        }\n\n        // Send user input to server\n        if (send(sockfd, sendline, strlen(sendline), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        // Receive response from server\n        if (recv(sockfd, recvline, 1024, 0) < 0) {\n            std::cerr << \"Receive failed\" << std::endl;\n            break;\n        }\n\n        // Print server response\n        std::cout << \"Server: \" << recvline << std::endl;\n    }\n\n    // Close socket\n    close(sockfd);\n}\n```",
      "```cpp\n#include <iostream>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#include <cstring>\n\nvoid tcp_client_communication() {\n    int sockfd;\n    struct sockaddr_in servaddr;\n\n    // Create socket file descriptor\n    if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation failed\" << std::endl;\n        return;\n    }\n\n    // Set server address\n    memset(&servaddr, 0, sizeof(servaddr));\n    servaddr.sin_family = AF_INET;\n    servaddr.sin_port = htons(8888);\n    if (inet_pton(AF_INET, \"127.0.0.1\", &servaddr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        return;\n    }\n\n    // Connect to server\n    if (connect(sockfd, (struct sockaddr *)&servaddr, sizeof(servaddr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        return;\n    }\n\n    char buffer[1024] = {0};\n    while (true) {\n        std::cout << \"Enter message: \";\n        std::cin.getline(buffer, 1024);\n        if (strcmp(buffer, \"exit\") == 0) {\n            break;\n        }\n\n        // Send message to server\n        send(sockfd, buffer, strlen(buffer), 0);\n\n        // Receive response from server\n        int n = recv(sockfd, buffer, 1024, 0);\n        if (n < 0) {\n            std::cerr << \"Receive failed\" << std::endl;\n            break;\n        }\n        std::cout << \"Server response: \" << buffer << std::endl;\n    }\n\n    // Close socket\n    close(sockfd);\n}\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n\nvoid tcp_client_communication() {\n    int sockfd;\n    struct sockaddr_in servaddr;\n\n    // Create socket file descriptor\n    if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation failed\" << std::endl;\n        return;\n    }\n\n    // Set server address\n    memset(&servaddr, 0, sizeof(servaddr));\n    servaddr.sin_family = AF_INET;\n    servaddr.sin_port = htons(8888);\n    if (inet_pton(AF_INET, \"127.0.0.1\", &servaddr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        return;\n    }\n\n    // Connect to server\n    if (connect(sockfd, (struct sockaddr *)&servaddr, sizeof(servaddr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        return;\n    }\n\n    char buffer[1024];\n    std::string message;\n\n    while (true) {\n        std::getline(std::cin, message);\n        if (message == \"exit\") {\n            break;\n        }\n\n        // Send message to server\n        if (send(sockfd, message.c_str(), message.length(), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        // Receive response from server\n        if (recv(sockfd, buffer, sizeof(buffer), 0) < 0) {\n            std::cerr << \"Receive failed\" << std::endl;\n            break;\n        }\n\n        // Print server response\n        std::cout << \"Server: \" << buffer << std::endl;\n    }\n\n    // Close socket\n    close(sockfd);\n}\n```",
      "```cpp\n#include <iostream>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n#include <cstring>\n\nvoid tcp_client_communication() {\n    int sockfd;\n    struct sockaddr_in servaddr;\n\n    // Create socket file descriptor\n    if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation failed\" << std::endl;\n        return;\n    }\n\n    // Clear servaddr\n    memset(&servaddr, 0, sizeof(servaddr));\n\n    // Set server address family, port and IP\n    servaddr.sin_family = AF_INET;\n    servaddr.sin_port = htons(8888);\n    servaddr.sin_addr.s_addr = htonl(INADDR_LOOPBACK);\n\n    // Connect to server\n    if (connect(sockfd, (struct sockaddr *)&servaddr, sizeof(servaddr)) < 0) {\n        std::cerr << \"Connection failed\" << std::endl;\n        return;\n    }\n\n    char sendline[1024], recvline[1024];\n\n    while (true) {\n        // Read user input\n        std::cin.getline(sendline, 1024);\n\n        // Send message to server\n        if (send(sockfd, sendline, strlen(sendline), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        // Receive response from server\n        if (recv(sockfd, recvline, 1024, 0) < 0) {\n            std::cerr << \"Receive failed\" << std::endl;\n            break;\n        }\n\n        // Print server response\n        std::cout << recvline << std::endl;\n    }\n\n    // Close socket\n    close(sockfd);\n}\n```",
      "```cpp\n#include <iostream>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n#include <cstring>\n\nvoid tcp_client_communication() {\n    int sockfd;\n    struct sockaddr_in servaddr;\n\n    sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    memset(&servaddr, 0, sizeof(servaddr));\n    servaddr.sin_family = AF_INET;\n    servaddr.sin_port = htons(8888);\n    inet_pton(AF_INET, \"127.0.0.1\", &servaddr.sin_addr);\n\n    connect(sockfd, (struct sockaddr *)&servaddr, sizeof(servaddr));\n\n    char sendline[1024], recvline[1024];\n    while (true) {\n        std::cin.getline(sendline, 1024);\n        if (sendline[0] == 'q') {\n            break;\n        }\n        write(sockfd, sendline, strlen(sendline));\n        read(sockfd, recvline, 1024);\n        std::cout << recvline << std::endl;\n    }\n\n    close(sockfd);\n}\n```",
      "```cpp\n#include <iostream>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n#include <cstring>\n\nvoid tcp_client_communication() {\n    int sockfd;\n    struct sockaddr_in servaddr;\n\n    sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    memset(&servaddr, 0, sizeof(servaddr));\n    servaddr.sin_family = AF_INET;\n    servaddr.sin_port = htons(8888);\n    inet_pton(AF_INET, \"127.0.0.1\", &servaddr.sin_addr);\n\n    connect(sockfd, (struct sockaddr *)&servaddr, sizeof(servaddr));\n\n    char sendline[1024], recvline[1024];\n    while (true) {\n        std::cin.getline(sendline, 1024);\n        if (sendline[0] == 'q') {\n            break;\n        }\n        send(sockfd, sendline, strlen(sendline), 0);\n        recv(sockfd, recvline, 1024, 0);\n        std::cout << recvline << std::endl;\n    }\n\n    close(sockfd);\n}\n```",
      "```cpp\n#include <iostream>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n#include <cstring>\n\nvoid tcp_client_communication() {\n    int sockfd;\n    struct sockaddr_in servaddr;\n\n    sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    memset(&servaddr, 0, sizeof(servaddr));\n    servaddr.sin_family = AF_INET;\n    servaddr.sin_port = htons(8888);\n    inet_pton(AF_INET, \"127.0.0.1\", &servaddr.sin_addr);\n\n    connect(sockfd, (struct sockaddr *)&servaddr, sizeof(servaddr));\n\n    char sendline[1024], recvline[1024];\n    while (true) {\n        std::cin.getline(sendline, 1024);\n        if (sendline[0] == 'q') {\n            break;\n        }\n        write(sockfd, sendline, strlen(sendline));\n        read(sockfd, recvline, 1024);\n        std::cout << recvline << std::endl;\n    }\n\n    close(sockfd);\n}\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n#include <cstring>\n\nvoid tcp_client_communication() {\n    int sockfd;\n    struct sockaddr_in servaddr;\n\n    // Create socket file descriptor\n    if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Could not create socket\" << std::endl;\n        return;\n    }\n\n    // Set server address\n    memset(&servaddr, 0, sizeof(servaddr));\n    servaddr.sin_family = AF_INET;\n    servaddr.sin_port = htons(8888);\n    if (inet_pton(AF_INET, \"127.0.0.1\", &servaddr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        return;\n    }\n\n    // Connect to server\n    if (connect(sockfd, (struct sockaddr *)&servaddr, sizeof(servaddr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        return;\n    }\n\n    char buffer[1024];\n    std::string input;\n\n    while (true) {\n        std::cout << \"> \";\n        std::getline(std::cin, input);\n        if (input == \"exit\") {\n            break;\n        }\n\n        // Send message to server\n        if (send(sockfd, input.c_str(), input.length(), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        // Receive response from server\n        if (recv(sockfd, buffer, sizeof(buffer), 0) < 0) {\n            std::cerr << \"Receive failed\" << std::endl;\n            break;\n        }\n\n        // Print server response\n        std::cout << \"Server: \" << buffer << std::endl;\n    }\n\n    // Close socket\n    close(sockfd);\n}\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n#include <cstring>\n\nvoid tcp_client_communication() {\n    int sockfd;\n    struct sockaddr_in servaddr;\n\n    sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    memset(&servaddr, 0, sizeof(servaddr));\n    servaddr.sin_family = AF_INET;\n    servaddr.sin_port = htons(8888);\n    inet_pton(AF_INET, \"127.0.0.1\", &servaddr.sin_addr);\n\n    connect(sockfd, (struct sockaddr *)&servaddr, sizeof(servaddr));\n\n    char sendline[1024];\n    char recvline[1024];\n\n    while (true) {\n        std::cout << \"> \";\n        std::cin.getline(sendline, 1024);\n        if (sendline[0] == 'q') {\n            break;\n        }\n        send(sockfd, sendline, strlen(sendline), 0);\n        recv(sockfd, recvline, 1024, 0);\n        std::cout << \"Server: \" << recvline << std::endl;\n    }\n\n    close(sockfd);\n}\n```"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 22,
    "Instruction": "Task Description: Implement a TCP client function in C++ that establishes a connection to a server, sends user input to the server, and prints the server's response. The function should handle basic error cases and properly close the connection when done.\n\nFunction Description: The function `tcp_client_communication` creates a TCP socket, connects to a specified server, and enters a loop where it reads user input, sends it to the server, and displays the server's response. The loop continues until an error occurs or the connection is closed by the server. The function handles socket creation, connection, data transmission, and cleanup.\n\nInput: None (The server IP address and port are hardcoded as \"127.0.0.1\" and 1234 respectively in the function)\n\nOutput: None (The function prints server responses to stdout but doesn't return any value)",
    "Canonical_solution": "#include <sys/socket.h>\n#include <arpa/inet.h>\n#include <string.h>\n#include <unistd.h>\n\n#define BUFFER_SIZE 1024\n\nvoid tcp_client_communication() {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    \n    struct sockaddr_in serv_addr;\n    bzero(&serv_addr, sizeof(serv_addr));\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_addr.s_addr = inet_addr(\"127.0.0.1\");\n    serv_addr.sin_port = htons(1234);\n\n    connect(sockfd, (sockaddr*)&serv_addr, sizeof(serv_addr));\n    \n    while(true){\n        char buf[BUFFER_SIZE];\n        bzero(&buf, sizeof(buf));\n        scanf(\"%s\", buf);\n        ssize_t write_bytes = write(sockfd, buf, sizeof(buf));\n        if(write_bytes == -1){\n            break;\n        }\n        bzero(&buf, sizeof(buf));\n        ssize_t read_bytes = read(sockfd, buf, sizeof(buf));\n        if(read_bytes > 0){\n            printf(\"message from server: %s\\n\", buf);\n        }else if(read_bytes == 0){\n            break;\n        }else if(read_bytes == -1){\n            close(sockfd);\n            break;\n        }\n    }\n    close(sockfd);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 149,
    "matched_results": [
      "```cpp\n#include <iostream>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n#include <cstring>\n\nvoid tcp_client_communication() {\n    int sockfd;\n    struct sockaddr_in servaddr;\n\n    sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd == -1) {\n        std::cerr << \"Socket creation failed\" << std::endl;\n        return;\n    }\n\n    memset(&servaddr, 0, sizeof(servaddr));\n    servaddr.sin_family = AF_INET;\n    servaddr.sin_port = htons(1234);\n    if (inet_pton(AF_INET, \"127.0.0.1\", &servaddr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        return;\n    }\n\n    if (connect(sockfd, (struct sockaddr *)&servaddr, sizeof(servaddr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        return;\n    }\n\n    char sendline[1024], recvline[1024];\n    while (true) {\n        std::cout << \"> \";\n        std::cin.getline(sendline, 1024);\n        if (send(sockfd, sendline, strlen(sendline), 0) == -1) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n        if (recv(sockfd, recvline, 1024, 0) == -1) {\n            std::cerr << \"Receive failed\" << std::endl;\n            break;\n        }\n        std::cout << \"Server: \" << recvline << std::endl;\n    }\n\n    close(sockfd);\n}\n```",
      "```cpp\n#include <iostream>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#include <cstring>\n\nvoid tcp_client_communication() {\n    int sockfd;\n    struct sockaddr_in servaddr;\n\n    sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd == -1) {\n        std::cerr << \"Socket creation failed\" << std::endl;\n        return;\n    }\n\n    memset(&servaddr, 0, sizeof(servaddr));\n    servaddr.sin_family = AF_INET;\n    servaddr.sin_port = htons(1234);\n    if (inet_pton(AF_INET, \"127.0.0.1\", &servaddr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        return;\n    }\n\n    if (connect(sockfd, (struct sockaddr *)&servaddr, sizeof(servaddr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        return;\n    }\n\n    char sendline[1024], recvline[1024];\n    while (true) {\n        std::cout << \"> \";\n        std::cin.getline(sendline, 1024);\n        if (send(sockfd, sendline, strlen(sendline), 0) == -1) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        int n = read(sockfd, recvline, 1024);\n        if (n <= 0) {\n            std::cerr << \"Read failed or connection closed by server\" << std::endl;\n            break;\n        }\n        recvline[n] = '\\0';\n        std::cout << \"Server: \" << recvline << std::endl;\n    }\n\n    close(sockfd);\n}\n```",
      "```cpp\n#include <iostream>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n#include <cstring>\n\nvoid tcp_client_communication() {\n    int sockfd;\n    struct sockaddr_in servaddr;\n\n    sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd == -1) {\n        std::cerr << \"Socket creation failed\" << std::endl;\n        return;\n    }\n\n    memset(&servaddr, 0, sizeof(servaddr));\n    servaddr.sin_family = AF_INET;\n    servaddr.sin_port = htons(1234);\n    if (inet_pton(AF_INET, \"127.0.0.1\", &servaddr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        return;\n    }\n\n    if (connect(sockfd, (struct sockaddr *)&servaddr, sizeof(servaddr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        return;\n    }\n\n    char sendline[1024], recvline[1024];\n    while (true) {\n        std::cout << \"> \";\n        if (!std::cin.getline(sendline, 1024)) {\n            break;\n        }\n        if (send(sockfd, sendline, strlen(sendline), 0) == -1) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n        if (recv(sockfd, recvline, 1024, 0) == -1) {\n            std::cerr << \"Receive failed\" << std::endl;\n            break;\n        }\n        std::cout << \"Server: \" << recvline << std::endl;\n    }\n\n    close(sockfd);\n}\n```",
      "```cpp\n#include <iostream>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n#include <cstring>\n\nvoid tcp_client_communication() {\n    int sockfd;\n    struct sockaddr_in servaddr;\n\n    // Create socket file descriptor\n    if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Could not create socket\" << std::endl;\n        return;\n    }\n\n    // Clear servaddr\n    memset(&servaddr, 0, sizeof(servaddr));\n\n    // Set server IP and port\n    servaddr.sin_family = AF_INET;\n    servaddr.sin_port = htons(1234);\n    if (inet_pton(AF_INET, \"127.0.0.1\", &servaddr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        return;\n    }\n\n    // Connect to server\n    if (connect(sockfd, (struct sockaddr *)&servaddr, sizeof(servaddr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        return;\n    }\n\n    char sendline[1024], recvline[1024];\n    while (true) {\n        std::cout << \"> \";\n        std::cin.getline(sendline, 1024);\n        if (sendline[0] == 'q') {\n            break;\n        }\n        if (send(sockfd, sendline, strlen(sendline), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n        if (recv(sockfd, recvline, 1024, 0) < 0) {\n            std::cerr << \"Receive failed\" << std::endl;\n            break;\n        }\n        std::cout << \"Server: \" << recvline << std::endl;\n    }\n\n    // Close socket\n    close(sockfd);\n}\n```",
      "```cpp\n#include <iostream>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n#include <cstring>\n\nvoid tcp_client_communication() {\n    int sockfd;\n    struct sockaddr_in servaddr;\n\n    sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd == -1) {\n        std::cerr << \"Socket creation failed\" << std::endl;\n        return;\n    }\n\n    memset(&servaddr, 0, sizeof(servaddr));\n    servaddr.sin_family = AF_INET;\n    servaddr.sin_port = htons(1234);\n    if (inet_pton(AF_INET, \"127.0.0.1\", &servaddr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        return;\n    }\n\n    if (connect(sockfd, (struct sockaddr *)&servaddr, sizeof(servaddr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        return;\n    }\n\n    char sendline[1024];\n    char recvline[1024];\n\n    while (true) {\n        std::cout << \"> \";\n        std::cin.getline(sendline, 1024);\n        if (sendline[0] == 'q') {\n            break;\n        }\n        if (send(sockfd, sendline, strlen(sendline), 0) == -1) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n        if (recv(sockfd, recvline, 1024, 0) == -1) {\n            std::cerr << \"Receive failed\" << std::endl;\n            break;\n        }\n        std::cout << \"Server: \" << recvline << std::endl;\n    }\n\n    close(sockfd);\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nvoid tcp_client_communication() {\n    int sockfd;\n    struct sockaddr_in servaddr;\n\n    // Create socket file descriptor\n    if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation failed\" << std::endl;\n        return;\n    }\n\n    // Clear servaddr struct\n    memset(&servaddr, 0, sizeof(servaddr));\n\n    // Set server IP and port\n    servaddr.sin_family = AF_INET;\n    servaddr.sin_port = htons(1234);\n    if (inet_pton(AF_INET, \"127.0.0.1\", &servaddr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        return;\n    }\n\n    // Connect to server\n    if (connect(sockfd, (struct sockaddr *)&servaddr, sizeof(servaddr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        return;\n    }\n\n    char sendline[1024], recvline[1024];\n    while (true) {\n        std::cout << \"> \";\n        std::cin.getline(sendline, 1024);\n        if (sendline[0] == 'q') {\n            break;\n        }\n        if (send(sockfd, sendline, strlen(sendline), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n        if (recv(sockfd, recvline, 1024, 0) < 0) {\n            std::cerr << \"Receive failed\" << std::endl;\n            break;\n        }\n        std::cout << \"Server: \" << recvline << std::endl;\n    }\n\n    // Close the socket\n    close(sockfd);\n}\n```",
      "```cpp\n#include <iostream>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#include <cstring>\n\nvoid tcp_client_communication() {\n    int sockfd;\n    struct sockaddr_in servaddr;\n\n    // Create socket file descriptor\n    if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Socket creation failed\" << std::endl;\n        return;\n    }\n\n    // Set server address\n    memset(&servaddr, 0, sizeof(servaddr));\n    servaddr.sin_family = AF_INET;\n    servaddr.sin_port = htons(1234);\n    if (inet_pton(AF_INET, \"127.0.0.1\", &servaddr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        return;\n    }\n\n    // Connect to server\n    if (connect(sockfd, (struct sockaddr *)&servaddr, sizeof(servaddr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        return;\n    }\n\n    char sendline[1024], recvline[1024];\n    while (true) {\n        std::cout << \"> \";\n        std::cin.getline(sendline, 1024);\n        if (send(sockfd, sendline, strlen(sendline), 0) < 0) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n        if (recv(sockfd, recvline, 1024, 0) < 0) {\n            std::cerr << \"Receive failed\" << std::endl;\n            break;\n        }\n        std::cout << \"Server: \" << recvline << std::endl;\n    }\n\n    // Close socket\n    close(sockfd);\n}\n```",
      "```cpp\n#include <iostream>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n#include <cstring>\n\nvoid tcp_client_communication() {\n    int sockfd;\n    struct sockaddr_in servaddr;\n\n    // Create socket file descriptor\n    if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {\n        std::cerr << \"Could not create socket\" << std::endl;\n        return;\n    }\n\n    // Clear servaddr\n    memset(&servaddr, 0, sizeof(servaddr));\n\n    // Set server IP and port\n    servaddr.sin_family = AF_INET;\n    servaddr.sin_port = htons(1234);\n    if (inet_pton(AF_INET, \"127.0.0.1\", &servaddr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        return;\n    }\n\n    // Connect to server\n    if (connect(sockfd, (struct sockaddr *)&servaddr, sizeof(servaddr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        return;\n    }\n\n    char sendline[1024], recvline[1024];\n    while (true) {\n        std::cout << \"> \";\n        if (!fgets(sendline, sizeof(sendline), stdin)) {\n            std::cerr << \"Error reading from stdin\" << std::endl;\n            break;\n        }\n        send(sockfd, sendline, strlen(sendline), 0);\n\n        if (recv(sockfd, recvline, sizeof(recvline), 0) < 0) {\n            std::cerr << \"Error receiving data\" << std::endl;\n            break;\n        }\n        std::cout << \"Server: \" << recvline << std::endl;\n    }\n\n    // Close the socket\n    close(sockfd);\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nvoid tcp_client_communication() {\n    int sockfd;\n    struct sockaddr_in servaddr;\n\n    sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd == -1) {\n        std::cerr << \"Socket creation failed\" << std::endl;\n        return;\n    }\n\n    memset(&servaddr, 0, sizeof(servaddr));\n    servaddr.sin_family = AF_INET;\n    servaddr.sin_port = htons(1234);\n    if (inet_pton(AF_INET, \"127.0.0.1\", &servaddr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        return;\n    }\n\n    if (connect(sockfd, (struct sockaddr *)&servaddr, sizeof(servaddr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        return;\n    }\n\n    char sendline[1024], recvline[1024];\n    while (true) {\n        std::cout << \"> \";\n        std::cin.getline(sendline, 1024);\n        if (sendline[0] == 'q') {\n            break;\n        }\n        write(sockfd, sendline, strlen(sendline));\n        read(sockfd, recvline, 1024);\n        std::cout << \"Server: \" << recvline << std::endl;\n    }\n\n    close(sockfd);\n}\n```",
      "```cpp\n#include <iostream>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n#include <cstring>\n\nvoid tcp_client_communication() {\n    int sockfd;\n    struct sockaddr_in servaddr;\n\n    sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (sockfd == -1) {\n        std::cerr << \"Socket creation failed\" << std::endl;\n        return;\n    }\n\n    memset(&servaddr, 0, sizeof(servaddr));\n    servaddr.sin_family = AF_INET;\n    servaddr.sin_port = htons(1234);\n    if (inet_pton(AF_INET, \"127.0.0.1\", &servaddr.sin_addr) <= 0) {\n        std::cerr << \"Invalid address/ Address not supported\" << std::endl;\n        return;\n    }\n\n    if (connect(sockfd, (struct sockaddr *)&servaddr, sizeof(servaddr)) < 0) {\n        std::cerr << \"Connection Failed\" << std::endl;\n        return;\n    }\n\n    char sendline[1024];\n    char recvline[1024];\n\n    while (true) {\n        std::cout << \"> \";\n        std::cin.getline(sendline, 1024);\n        if (sendline[0] == 'q') {\n            break;\n        }\n\n        if (send(sockfd, sendline, strlen(sendline), 0) == -1) {\n            std::cerr << \"Send failed\" << std::endl;\n            break;\n        }\n\n        if (recv(sockfd, recvline, 1024, 0) == -1) {\n            std::cerr << \"Receive failed\" << std::endl;\n            break;\n        }\n\n        std::cout << \"Server: \" << recvline << std::endl;\n    }\n\n    close(sockfd);\n}\n```"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 23,
    "Instruction": "Task Description: Create a TCP server in C++ that listens for incoming connections, receives data from clients, and echoes the data back to the clients. The server should handle one client at a time and properly clean up resources when the connection is terminated.\n\nFunction Description: The function `create_tcp_server` establishes a TCP server that binds to a specified IP address and port, listens for incoming connections, and handles client communication. It reads data from the client and sends the same data back (echo). The server runs until the client disconnects or an error occurs.\n\nInput: \n- `ip`: [const char*] - The IP address the server should bind to (e.g., \"127.0.0.1\" for localhost).\n- `port`: [int] - The port number the server should listen on (e.g., 8080).\n\nOutput: \n- [int] - Returns 0 on successful execution and -1 if any step fails (socket creation, binding, listening, or accepting connections).",
    "Canonical_solution": "#include <stdio.h>\n#include <sys/socket.h>\n#include <arpa/inet.h>\n#include <string.h>\n#include <unistd.h>\n\nint create_tcp_server(const char* ip, int port) {\n    int sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    if(sockfd == -1) return -1;\n\n    struct sockaddr_in serv_addr;\n    bzero(&serv_addr, sizeof(serv_addr));\n    serv_addr.sin_family = AF_INET;\n    serv_addr.sin_addr.s_addr = inet_addr(ip);\n    serv_addr.sin_port = htons(port);\n\n    if(bind(sockfd, (sockaddr*)&serv_addr, sizeof(serv_addr)) == -1) {\n        close(sockfd);\n        return -1;\n    }\n\n    if(listen(sockfd, SOMAXCONN) == -1) {\n        close(sockfd);\n        return -1;\n    }\n\n    struct sockaddr_in clnt_addr;\n    socklen_t clnt_addr_len = sizeof(clnt_addr);\n    bzero(&clnt_addr, sizeof(clnt_addr));\n\n    int clnt_sockfd = accept(sockfd, (sockaddr*)&clnt_addr, &clnt_addr_len);\n    if(clnt_sockfd == -1) {\n        close(sockfd);\n        return -1;\n    }\n\n    printf(\"new client fd %d! IP: %s Port: %d\\n\", clnt_sockfd, inet_ntoa(clnt_addr.sin_addr), ntohs(clnt_addr.sin_port));\n    \n    char buf[1024];\n    while (true) {\n        bzero(&buf, sizeof(buf));\n        ssize_t read_bytes = read(clnt_sockfd, buf, sizeof(buf));\n        if(read_bytes > 0){\n            printf(\"message from client fd %d: %s\\n\", clnt_sockfd, buf);\n            write(clnt_sockfd, buf, sizeof(buf));\n        } else if(read_bytes == 0){\n            printf(\"client fd %d disconnected\\n\", clnt_sockfd);\n            close(clnt_sockfd);\n            break;\n        } else if(read_bytes == -1){\n            close(clnt_sockfd);\n            break;\n        }\n    }\n    close(sockfd);\n    return 0;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 148,
    "matched_results": [
      "```cpp\n#include <iostream>\n#include <string>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nint create_tcp_server(const char* ip, int port) {\n    int server_fd, new_socket;\n    struct sockaddr_in address;\n    int opt = 1;\n    int addrlen = sizeof(address);\n    char buffer[1024] = {0};\n    const char* hello = \"Hello from server\";\n\n    // Creating socket file descriptor\n    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {\n        perror(\"socket failed\");\n        return -1;\n    }\n\n    // Forcefully attaching socket to the port 8080\n    if (setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT, &opt, sizeof(opt))) {\n        perror(\"setsockopt\");\n        return -1;\n    }\n    address.sin_family = AF_INET;\n    address.sin_addr.s_addr = INADDR_ANY;\n    address.sin_port = htons(port);\n\n    // Forcefully attaching socket to the port 8080\n    if (bind(server_fd, (struct sockaddr *)&address, sizeof(address))<0) {\n        perror(\"bind failed\");\n        return -1;\n    }\n    if (listen(server_fd, 3) < 0) {\n        perror(\"listen\");\n        return -1;\n    }\n    if ((new_socket = accept(server_fd, (struct sockaddr *)&address, (socklen_t*)&addrlen))<0) {\n        perror(\"accept\");\n        return -1;\n    }\n\n    // Receive message from client\n    read(new_socket, buffer, 1024);\n    std::cout << \"Message from client: \" << buffer << std::endl;\n    send(new_socket, hello, strlen(hello), 0);\n    close(new_socket);\n    close(server_fd);\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <cstring>\n#include <unistd.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n\nint create_tcp_server(const char* ip, int port) {\n    int server_fd, new_socket;\n    struct sockaddr_in address;\n    int opt = 1;\n    int addrlen = sizeof(address);\n    char buffer[1024] = {0};\n    const char* hello = \"Hello from server\";\n\n    // Creating socket file descriptor\n    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {\n        perror(\"socket failed\");\n        return -1;\n    }\n\n    // Forcefully attaching socket to the port 8080\n    if (setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT, &opt, sizeof(opt))) {\n        perror(\"setsockopt\");\n        return -1;\n    }\n    address.sin_family = AF_INET;\n    address.sin_addr.s_addr = INADDR_ANY;\n    address.sin_port = htons(port);\n\n    // Forcefully attaching socket to the port 8080\n    if (bind(server_fd, (struct sockaddr *)&address, sizeof(address))<0) {\n        perror(\"bind failed\");\n        return -1;\n    }\n    if (listen(server_fd, 3) < 0) {\n        perror(\"listen\");\n        return -1;\n    }\n    if ((new_socket = accept(server_fd, (struct sockaddr *)&address, (socklen_t*)&addrlen))<0) {\n        perror(\"accept\");\n        return -1;\n    }\n\n    while (true) {\n        read(new_socket, buffer, 1024);\n        send(new_socket, hello, strlen(hello), 0);\n        if (buffer[0] == 'q') {\n            break;\n        }\n    }\n\n    close(new_socket);\n    close(server_fd);\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nint create_tcp_server(const char* ip, int port) {\n    int server_fd, new_socket;\n    struct sockaddr_in address;\n    int opt = 1;\n    int addrlen = sizeof(address);\n    char buffer[1024] = {0};\n    const char* hello = \"Hello from server\";\n\n    // Creating socket file descriptor\n    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {\n        perror(\"socket failed\");\n        return -1;\n    }\n\n    // Forcefully attaching socket to the port 8080\n    if (setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT, &opt, sizeof(opt))) {\n        perror(\"setsockopt\");\n        return -1;\n    }\n    address.sin_family = AF_INET;\n    address.sin_addr.s_addr = INADDR_ANY;\n    address.sin_port = htons(port);\n\n    // Forcefully attaching socket to the port 8080\n    if (bind(server_fd, (struct sockaddr *)&address, sizeof(address))<0) {\n        perror(\"bind failed\");\n        return -1;\n    }\n    if (listen(server_fd, 3) < 0) {\n        perror(\"listen\");\n        return -1;\n    }\n    if ((new_socket = accept(server_fd, (struct sockaddr *)&address, (socklen_t*)&addrlen))<0) {\n        perror(\"accept\");\n        return -1;\n    }\n\n    while (true) {\n        read(new_socket, buffer, 1024);\n        send(new_socket, hello, strlen(hello), 0);\n    }\n\n    close(server_fd);\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nint create_tcp_server(const char* ip, int port) {\n    int server_fd, new_socket;\n    struct sockaddr_in address;\n    int opt = 1;\n    int addrlen = sizeof(address);\n    char buffer[1024] = {0};\n    const char* hello = \"Hello from server\";\n\n    // Creating socket file descriptor\n    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {\n        perror(\"socket failed\");\n        return -1;\n    }\n\n    // Forcefully attaching socket to the port 8080\n    if (setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT, &opt, sizeof(opt))) {\n        perror(\"setsockopt\");\n        return -1;\n    }\n    address.sin_family = AF_INET;\n    address.sin_addr.s_addr = INADDR_ANY;\n    address.sin_port = htons(port);\n\n    // Forcefully attaching socket to the port 8080\n    if (bind(server_fd, (struct sockaddr *)&address, sizeof(address))<0) {\n        perror(\"bind failed\");\n        return -1;\n    }\n    if (listen(server_fd, 3) < 0) {\n        perror(\"listen\");\n        return -1;\n    }\n    if ((new_socket = accept(server_fd, (struct sockaddr *)&address, (socklen_t*)&addrlen))<0) {\n        perror(\"accept\");\n        return -1;\n    }\n\n    while (true) {\n        read(new_socket, buffer, 1024);\n        send(new_socket, hello, strlen(hello), 0);\n        if (buffer[0] == 'q') {\n            break;\n        }\n    }\n\n    close(new_socket);\n    close(server_fd);\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nint create_tcp_server(const char* ip, int port) {\n    int server_fd, new_socket;\n    struct sockaddr_in address;\n    int opt = 1;\n    int addrlen = sizeof(address);\n    char buffer[1024] = {0};\n    const char* hello = \"Hello from server\";\n\n    // Creating socket file descriptor\n    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {\n        perror(\"socket failed\");\n        return -1;\n    }\n\n    // Forcefully attaching socket to the port 8080\n    if (setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT, &opt, sizeof(opt))) {\n        perror(\"setsockopt\");\n        return -1;\n    }\n    address.sin_family = AF_INET;\n    address.sin_addr.s_addr = INADDR_ANY;\n    address.sin_port = htons(port);\n\n    // Forcefully attaching socket to the port 8080\n    if (bind(server_fd, (struct sockaddr *)&address, sizeof(address))<0) {\n        perror(\"bind failed\");\n        return -1;\n    }\n    if (listen(server_fd, 3) < 0) {\n        perror(\"listen\");\n        return -1;\n    }\n    if ((new_socket = accept(server_fd, (struct sockaddr *)&address, (socklen_t*)&addrlen))<0) {\n        perror(\"accept\");\n        return -1;\n    }\n\n    // Receive message from client\n    read(new_socket, buffer, 1024);\n    std::cout << \"Message from client: \" << buffer << std::endl;\n\n    // Send message to client\n    send(new_socket, hello, strlen(hello), 0);\n    std::cout << \"Hello message sent\\n\";\n\n    // Close the socket\n    close(new_socket);\n    close(server_fd);\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nint create_tcp_server(const char* ip, int port) {\n    int server_fd, new_socket;\n    struct sockaddr_in address;\n    int opt = 1;\n    int addrlen = sizeof(address);\n\n    // Creating socket file descriptor\n    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {\n        perror(\"socket failed\");\n        return -1;\n    }\n\n    // Forcefully attaching socket to the port 8080\n    if (setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT, &opt, sizeof(opt))) {\n        perror(\"setsockopt\");\n        return -1;\n    }\n    address.sin_family = AF_INET;\n    address.sin_addr.s_addr = INADDR_ANY;\n    address.sin_port = htons(port);\n\n    // Forcefully attaching socket to the port 8080\n    if (bind(server_fd, (struct sockaddr *)&address, sizeof(address))<0) {\n        perror(\"bind failed\");\n        return -1;\n    }\n    if (listen(server_fd, 3) < 0) {\n        perror(\"listen\");\n        return -1;\n    }\n    if ((new_socket = accept(server_fd, (struct sockaddr *)&address, (socklen_t*)&addrlen))<0) {\n        perror(\"accept\");\n        return -1;\n    }\n\n    char buffer[1024] = {0};\n    read(new_socket, buffer, 1024);\n    send(new_socket, buffer, strlen(buffer), 0);\n\n    close(new_socket);\n    close(server_fd);\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nint create_tcp_server(const char* ip, int port) {\n    int server_fd, new_socket;\n    struct sockaddr_in address;\n    int opt = 1;\n    int addrlen = sizeof(address);\n\n    // Creating socket file descriptor\n    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {\n        perror(\"socket failed\");\n        return -1;\n    }\n\n    // Forcefully attaching socket to the port 8080\n    if (setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT, &opt, sizeof(opt))) {\n        perror(\"setsockopt\");\n        return -1;\n    }\n    address.sin_family = AF_INET;\n    address.sin_addr.s_addr = INADDR_ANY;\n    address.sin_port = htons(port);\n\n    // Forcefully attaching socket to the port 8080\n    if (bind(server_fd, (struct sockaddr *)&address, sizeof(address))<0) {\n        perror(\"bind failed\");\n        return -1;\n    }\n\n    // Forcefully attaching socket to the port 8080\n    if (listen(server_fd, 3) < 0) {\n        perror(\"listen\");\n        return -1;\n    }\n\n    // Accept and incoming connection\n    if ((new_socket = accept(server_fd, (struct sockaddr *)&address, (socklen_t*)&addrlen))<0) {\n        perror(\"accept\");\n        return -1;\n    }\n\n    char buffer[1024] = {0};\n    read(new_socket, buffer, 1024);\n    send(new_socket, buffer, strlen(buffer), 0);\n\n    close(new_socket);\n    close(server_fd);\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nint create_tcp_server(const char* ip, int port) {\n    int server_fd, new_socket;\n    struct sockaddr_in address;\n    int opt = 1;\n    int addrlen = sizeof(address);\n    char buffer[1024] = {0};\n    const char* hello = \"Hello from server\";\n\n    // Creating socket file descriptor\n    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {\n        perror(\"socket failed\");\n        return -1;\n    }\n\n    // Forcefully attaching socket to the port 8080\n    if (setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT, &opt, sizeof(opt))) {\n        perror(\"setsockopt\");\n        return -1;\n    }\n    address.sin_family = AF_INET;\n    address.sin_addr.s_addr = INADDR_ANY;\n    address.sin_port = htons(port);\n\n    // Forcefully attaching socket to the port 8080\n    if (bind(server_fd, (struct sockaddr *)&address, sizeof(address))<0) {\n        perror(\"bind failed\");\n        return -1;\n    }\n    if (listen(server_fd, 3) < 0) {\n        perror(\"listen\");\n        return -1;\n    }\n    if ((new_socket = accept(server_fd, (struct sockaddr *)&address, (socklen_t*)&addrlen))<0) {\n        perror(\"accept\");\n        return -1;\n    }\n\n    while (true) {\n        read(new_socket, buffer, 1024);\n        send(new_socket, hello, strlen(hello), 0);\n    }\n\n    close(server_fd);\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nint create_tcp_server(const char* ip, int port) {\n    int server_fd, new_socket;\n    struct sockaddr_in address;\n    int opt = 1;\n    int addrlen = sizeof(address);\n\n    // Creating socket file descriptor\n    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {\n        perror(\"socket failed\");\n        return -1;\n    }\n\n    // Forcefully attaching socket to the port\n    if (setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT, &opt, sizeof(opt))) {\n        perror(\"setsockopt\");\n        return -1;\n    }\n    address.sin_family = AF_INET;\n    address.sin_addr.s_addr = INADDR_ANY;\n    address.sin_port = htons(port);\n\n    // Forcefully attaching socket to the port\n    if (bind(server_fd, (struct sockaddr *)&address, sizeof(address))<0) {\n        perror(\"bind failed\");\n        return -1;\n    }\n\n    // Forcefully attaching socket to the port\n    if (listen(server_fd, 3) < 0) {\n        perror(\"listen\");\n        return -1;\n    }\n\n    // Accepting a connection\n    if ((new_socket = accept(server_fd, (struct sockaddr *)&address, (socklen_t*)&addrlen))<0) {\n        perror(\"accept\");\n        return -1;\n    }\n\n    char buffer[1024] = {0};\n    read(new_socket, buffer, 1024);\n    send(new_socket, buffer, strlen(buffer), 0);\n\n    close(new_socket);\n    close(server_fd);\n    return 0;\n}\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <cstring>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\nint create_tcp_server(const char* ip, int port) {\n    int server_fd, new_socket;\n    struct sockaddr_in address;\n    int opt = 1;\n    int addrlen = sizeof(address);\n    char buffer[1024] = {0};\n    const char* hello = \"Hello from server\";\n\n    // Creating socket file descriptor\n    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {\n        perror(\"socket failed\");\n        return -1;\n    }\n\n    // Forcefully attaching socket to the port 8080\n    if (setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT, &opt, sizeof(opt))) {\n        perror(\"setsockopt\");\n        return -1;\n    }\n    address.sin_family = AF_INET;\n    address.sin_addr.s_addr = INADDR_ANY;\n    address.sin_port = htons(port);\n\n    // Forcefully attaching socket to the port 8080\n    if (bind(server_fd, (struct sockaddr *)&address, sizeof(address))<0) {\n        perror(\"bind failed\");\n        return -1;\n    }\n    if (listen(server_fd, 3) < 0) {\n        perror(\"listen\");\n        return -1;\n    }\n    if ((new_socket = accept(server_fd, (struct sockaddr *)&address, (socklen_t*)&addrlen))<0) {\n        perror(\"accept\");\n        return -1;\n    }\n\n    while (true) {\n        read(new_socket, buffer, 1024);\n        send(new_socket, hello, strlen(hello), 0);\n        if (buffer[0] == 'q') {\n            break;\n        }\n    }\n\n    close(new_socket);\n    close(server_fd);\n    return 0;\n}\n```"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 24,
    "Instruction": "Task Description: Create a TCP server class that handles multiple client connections, manages network communication, and provides thread-safe operations for client management.\n\nClass Description: The NetworkServer class implements a TCP server that listens for incoming connections, manages connected clients, and handles network communication through separate threads. It supports both IPv4 and IPv6 addresses and includes error handling for socket operations.\n\nAttributes:\n- host: std::string - The host address to bind the server to\n- port_num: unsigned short - The port number to listen on\n- server_online: bool - Flag indicating if the server is running\n- server_listening: bool - Flag indicating if the server is actively listening for connections\n- ServerClients: std::vector<NetworkClientInfo *> - List of connected client information\n- ServerClientsMutex: std::mutex - Mutex for thread-safe access to client list\n- server_sock: SOCKET[MAXSOCK] - Array of server socket descriptors\n- socket_count: int - Number of active server sockets\n- ConnectionThread: std::thread *[MAXSOCK] - Array of connection handler threads\n\nMethods:\n- NetworkServer(std::vector<RGBController *>& control) -> None - Constructor that initializes the server with controller references\n- ~NetworkServer() -> None - Destructor that stops the server and cleans up resources\n- StartServer() -> None - Starts the server, creates sockets, binds to address, and begins listening for connections\n- StopServer() -> None - Stops the server, closes all connections, and cleans up threads\n- ConnectionThreadFunction(int socket_idx) -> None - Thread function that handles incoming connections for a specific socket\n- accept_select(int sockfd) -> int - Helper function that implements timeout-based socket acceptance\n- GetPort() -> unsigned short - Returns the current port number (implied but not shown in code)\n- ClientInfoChanged() -> None - Callback for client list changes (implied but not shown in code)\n- ServerListeningChanged() -> None - Callback for server listening state changes (implied but not shown in code)\n- ListenThreadFunction(NetworkClientInfo * client_info) -> None - Thread function that handles communication with a specific client (implied but not shown in code)",
    "Canonical_solution": "#include <cstring>\n#include <memory.h>\n#include <errno.h>\n#include <stdlib.h>\n#include <iostream>\n#include <vector>\n#include <thread>\n#include <mutex>\n#ifndef WIN32\n#include <sys/ioctl.h>\n#include <netinet/tcp.h>\n#include <sys/types.h>\n#include <arpa/inet.h>\n#else\n#include <ws2tcpip.h>\n#endif\n\nconst char yes = 1;\n\nclass NetworkServer\n{\npublic:\n    NetworkServer(std::vector<RGBController *>& control) : controllers(control)\n    {\n        host             = OPENRGB_SDK_HOST;\n        port_num         = OPENRGB_SDK_PORT;\n        server_online    = false;\n        server_listening = false;\n        for(int i = 0; i < MAXSOCK; i++)\n        {\n            ConnectionThread[i] = nullptr;\n        }\n        profile_manager  = nullptr;\n    }\n\n    ~NetworkServer()\n    {\n        StopServer();\n    }\n\n    void StartServer()\n    {\n        int err;\n        struct addrinfo hints, *res, *result;\n\n        char port_str[6];\n        snprintf(port_str, 6, \"%d\", port_num);\n\n        socket_count = 0;\n\n#ifdef WIN32\n        if(WSAStartup(MAKEWORD(2, 2), &wsa) != NO_ERROR)\n        {\n            WSACleanup();\n            return;\n        }\n#endif\n\n        memset(&hints, 0, sizeof(hints));\n        hints.ai_family = AF_UNSPEC;\n        hints.ai_socktype = SOCK_STREAM;\n        hints.ai_flags = AI_PASSIVE;\n        err = getaddrinfo(host.c_str(), port_str, &hints, &result);\n\n        if(err)\n        {\n            LOG_ERROR(\"NetworkServer: Unable to get address.\");\n            WSACleanup();\n            return;\n        }\n\n        for(res = result; res && socket_count < MAXSOCK; res = res->ai_next)\n        {\n            server_sock[socket_count] = socket(res->ai_family, res->ai_socktype, res->ai_protocol);\n\n            if(server_sock[socket_count] == INVALID_SOCKET)\n            {\n                LOG_ERROR(\"NetworkServer: Network socket could not be created.\");\n                WSACleanup();\n                return;\n            }\n\n            if(bind(server_sock[socket_count], res->ai_addr, res->ai_addrlen) == SOCKET_ERROR)\n            {\n                if(errno == EADDRINUSE)\n                {\n                    LOG_ERROR(\"NetworkServer: Could not bind network socket. Is port %hu already being used?\", GetPort());\n                }\n                else if(errno == EACCES)\n                {\n                    LOG_ERROR(\"NetworkServer: Could not bind network socket. Access to socket was denied.\");\n                }\n                else if(errno == EBADF)\n                {\n                    LOG_ERROR(\"NetworkServer: Could not bind network socket. sockfd is not a valid file descriptor.\");\n                }\n                else if(errno == EINVAL)\n                {\n                    LOG_ERROR(\"NetworkServer: Could not bind network socket. The socket is already bound to an address, or addrlen is wrong, or addr is not a valid address for this socket's domain.\");\n                }\n                else if(errno == ENOTSOCK)\n                {\n                    LOG_ERROR(\"NetworkServer: Could not bind network socket. The file descriptor sockfd does not refer to a socket.\");\n                }\n                else\n                {\n                    LOG_ERROR(\"NetworkManager: Could not bind network socket. Error code: %d.\", errno);\n                }\n\n                WSACleanup();\n                return;\n            }\n\n            setsockopt(server_sock[socket_count], IPPROTO_TCP, TCP_NODELAY, &yes, sizeof(yes));\n\n            socket_count += 1;\n        }\n\n        freeaddrinfo(result);\n        server_online = true;\n\n        for(int curr_socket = 0; curr_socket < socket_count; curr_socket++)\n        {\n            ConnectionThread[curr_socket] = new std::thread(&NetworkServer::ConnectionThreadFunction, this, curr_socket);\n            ConnectionThread[curr_socket]->detach();\n        }\n    }\n\n    void StopServer()\n    {\n        int curr_socket;\n        server_online = false;\n\n        ServerClientsMutex.lock();\n\n        for(unsigned int client_idx = 0; client_idx < ServerClients.size(); client_idx++)\n        {\n            delete ServerClients[client_idx];\n        }\n\n        ServerClients.clear();\n\n        for(curr_socket = 0; curr_socket < socket_count; curr_socket++)\n        {\n            shutdown(server_sock[curr_socket], SD_RECEIVE);\n            closesocket(server_sock[curr_socket]);\n        }\n\n        ServerClientsMutex.unlock();\n\n        for(curr_socket = 0; curr_socket < socket_count; curr_socket++)\n        {\n            if(ConnectionThread[curr_socket])\n            {\n                delete ConnectionThread[curr_socket];\n                ConnectionThread[curr_socket] = nullptr;\n            }\n        }\n\n        socket_count = 0;\n        ClientInfoChanged();\n    }\n\nprivate:\n    void ConnectionThreadFunction(int socket_idx)\n    {\n        LOG_INFO(\"NetworkServer: Network connection thread started on port %hu\", GetPort());\n\n        while(server_online == true)\n        {\n            NetworkClientInfo * client_info = new NetworkClientInfo();\n\n            if(listen(server_sock[socket_idx], 10) < 0)\n            {\n                LOG_INFO(\"NetworkServer: Connection thread closed\");\n                server_online = false;\n                return;\n            }\n\n            server_listening = true;\n            ServerListeningChanged();\n\n            client_info->client_sock = accept_select((int)server_sock[socket_idx]);\n\n            if(client_info->client_sock < 0)\n            {\n                LOG_INFO(\"NetworkServer: Connection thread closed\");\n                server_online = false;\n                server_listening = false;\n                ServerListeningChanged();\n                return;\n            }\n\n            u_long arg = 0;\n            ioctlsocket(client_info->client_sock, FIONBIO, &arg);\n            setsockopt(client_info->client_sock, IPPROTO_TCP, TCP_NODELAY, &yes, sizeof(yes));\n\n            struct sockaddr_storage tmp_addr;\n            char ipstr[INET6_ADDRSTRLEN];\n            socklen_t len;\n            len = sizeof(tmp_addr);\n            getpeername(client_info->client_sock, (struct sockaddr*)&tmp_addr, &len);\n\n            if(tmp_addr.ss_family == AF_INET)\n            {\n                struct sockaddr_in *s_4 = (struct sockaddr_in *)&tmp_addr;\n                inet_ntop(AF_INET, &s_4->sin_addr, ipstr, sizeof(ipstr));\n                client_info->client_ip = ipstr;\n            }\n            else\n            {\n                struct sockaddr_in6 *s_6 = (struct sockaddr_in6 *)&tmp_addr;\n                inet_ntop(AF_INET6, &s_6->sin6_addr, ipstr, sizeof(ipstr));\n                client_info->client_ip = ipstr;\n            }\n\n            ServerClientsMutex.lock();\n            client_info->client_listen_thread = new std::thread(&NetworkServer::ListenThreadFunction, this, client_info);\n            client_info->client_listen_thread->detach();\n            ServerClients.push_back(client_info);\n            ServerClientsMutex.unlock();\n            ClientInfoChanged();\n        }\n\n        LOG_INFO(\"NetworkServer: Connection thread closed\");\n        server_online = false;\n        server_listening = false;\n        ServerListeningChanged();\n    }\n\n    int accept_select(int sockfd)\n    {\n        fd_set              set;\n        struct timeval      timeout;\n\n        while(1)\n        {\n            timeout.tv_sec          = TCP_TIMEOUT_SECONDS;\n            timeout.tv_usec         = 0;\n\n            FD_ZERO(&set);\n            FD_SET(sockfd, &set);\n\n            int rv = select(sockfd + 1, &set, NULL, NULL, &timeout);\n\n            if(rv == SOCKET_ERROR || server_online == false)\n            {\n                return -1;\n            }\n            else if(rv == 0)\n            {\n                continue;\n            }\n            else\n            {\n                return(accept((int)sockfd, NULL, NULL));\n            }\n        }\n    }\n\n    std::string host;\n    unsigned short port_num;\n    bool server_online;\n    bool server_listening;\n    std::vector<NetworkClientInfo *> ServerClients;\n    std::mutex ServerClientsMutex;\n    SOCKET server_sock[MAXSOCK];\n    int socket_count;\n    std::thread *ConnectionThread[MAXSOCK];\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 148,
    "matched_results": [],
    "unmatched_results": [
      "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n#include <thread>\n#include <mutex>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#include <cstring>\n\nclass NetworkClientInfo {\npublic:\n    int socket;\n    // Additional client information\n};\n\nclass NetworkServer {\nprivate:\n    std::string host;\n    unsigned short port_num;\n    bool server_online;\n    bool server_listening;\n    std::vector<NetworkClientInfo*> ServerClients;\n    std::mutex ServerClientsMutex;\n    int server_sock[MAXSOCK];\n    int socket_count;\n    std::thread* ConnectionThread[MAXSOCK];\n\npublic:\n    NetworkServer(std::vector<RGBController *>& control) {\n        // Constructor implementation\n    }\n\n    ~NetworkServer() {\n        // Destructor implementation\n    }\n\n    void StartServer() {\n        // Start server implementation\n    }\n\n    void StopServer() {\n        // Stop server implementation\n    }\n\n    void ConnectionThreadFunction(int socket_idx) {\n        // Connection thread function implementation\n    }\n\n    int accept_select(int sockfd) {\n        // Accept select helper function implementation\n        return 0;\n    }\n\n    unsigned short GetPort() {\n        return port_num;\n    }\n\n    void ClientInfoChanged() {\n        // Client info changed callback implementation\n    }\n\n    void ServerListeningChanged() {\n        // Server listening changed callback implementation\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n#include <thread>\n#include <mutex>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#include <cstring>\n\nclass NetworkClientInfo {\npublic:\n    int socket;\n    // Additional client information\n};\n\nclass NetworkServer {\nprivate:\n    std::string host;\n    unsigned short port_num;\n    bool server_online;\n    bool server_listening;\n    std::vector<NetworkClientInfo*> ServerClients;\n    std::mutex ServerClientsMutex;\n    int server_sock[MAXSOCK];\n    int socket_count;\n    std::thread* ConnectionThread[MAXSOCK];\n\npublic:\n    NetworkServer(std::vector<RGBController *>& control) {\n        // Constructor implementation\n    }\n\n    ~NetworkServer() {\n        // Destructor implementation\n    }\n\n    void StartServer() {\n        // Start server implementation\n    }\n\n    void StopServer() {\n        // Stop server implementation\n    }\n\n    void ConnectionThreadFunction(int socket_idx) {\n        // Connection thread function implementation\n    }\n\n    int accept_select(int sockfd) {\n        // Accept select helper function implementation\n        return 0;\n    }\n\n    unsigned short GetPort() {\n        return port_num;\n    }\n\n    void ClientInfoChanged() {\n        // Client info changed callback implementation\n    }\n\n    void ServerListeningChanged() {\n        // Server listening changed callback implementation\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n#include <thread>\n#include <mutex>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#include <cstring>\n\nclass NetworkClientInfo {\npublic:\n    int socket;\n    // Other client information\n};\n\nclass NetworkServer {\nprivate:\n    std::string host;\n    unsigned short port_num;\n    bool server_online;\n    bool server_listening;\n    std::vector<NetworkClientInfo*> ServerClients;\n    std::mutex ServerClientsMutex;\n    int server_sock[MAXSOCK];\n    int socket_count;\n    std::thread* ConnectionThread[MAXSOCK];\n\npublic:\n    NetworkServer(std::vector<RGBController *>& control) {\n        // Constructor implementation\n    }\n\n    ~NetworkServer() {\n        StopServer();\n    }\n\n    void StartServer() {\n        // Start server implementation\n    }\n\n    void StopServer() {\n        // Stop server implementation\n    }\n\n    void ConnectionThreadFunction(int socket_idx) {\n        // Connection thread function implementation\n    }\n\n    int accept_select(int sockfd) {\n        // Accept select helper function implementation\n        return 0;\n    }\n\n    unsigned short GetPort() {\n        return port_num;\n    }\n\n    void ClientInfoChanged() {\n        // Client info changed callback implementation\n    }\n\n    void ServerListeningChanged() {\n        // Server listening changed callback implementation\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n#include <thread>\n#include <mutex>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#include <cstring>\n\nclass NetworkClientInfo {\npublic:\n    int socket;\n    // Additional client information\n};\n\nclass NetworkServer {\nprivate:\n    std::string host;\n    unsigned short port_num;\n    bool server_online;\n    bool server_listening;\n    std::vector<NetworkClientInfo*> ServerClients;\n    std::mutex ServerClientsMutex;\n    int server_sock[MAXSOCK];\n    int socket_count;\n    std::thread* ConnectionThread[MAXSOCK];\n\npublic:\n    NetworkServer(std::vector<RGBController *>& control) {\n        // Constructor implementation\n    }\n\n    ~NetworkServer() {\n        // Destructor implementation\n    }\n\n    void StartServer() {\n        // Start server implementation\n    }\n\n    void StopServer() {\n        // Stop server implementation\n    }\n\n    void ConnectionThreadFunction(int socket_idx) {\n        // Connection thread function implementation\n    }\n\n    int accept_select(int sockfd) {\n        // Accept select helper function implementation\n        return 0;\n    }\n\n    unsigned short GetPort() {\n        return port_num;\n    }\n\n    void ClientInfoChanged() {\n        // Client info changed callback implementation\n    }\n\n    void ServerListeningChanged() {\n        // Server listening changed callback implementation\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <vector>\n#include <thread>\n#include <mutex>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#include <cstring>\n\nclass NetworkClientInfo {\npublic:\n    int socket;\n    // Other client information\n};\n\nclass NetworkServer {\nprivate:\n    std::string host;\n    unsigned short port_num;\n    bool server_online;\n    bool server_listening;\n    std::vector<NetworkClientInfo*> ServerClients;\n    std::mutex ServerClientsMutex;\n    int server_sock[MAXSOCK];\n    int socket_count;\n    std::thread* ConnectionThread[MAXSOCK];\n\npublic:\n    NetworkServer(std::vector<RGBController *>& control) {\n        // Constructor implementation\n    }\n\n    ~NetworkServer() {\n        // Destructor implementation\n    }\n\n    void StartServer() {\n        // Start server implementation\n    }\n\n    void StopServer() {\n        // Stop server implementation\n    }\n\n    void ConnectionThreadFunction(int socket_idx) {\n        // Connection thread function implementation\n    }\n\n    int accept_select(int sockfd) {\n        // Accept select helper function implementation\n        return 0;\n    }\n\n    unsigned short GetPort() {\n        // Get port implementation\n        return port_num;\n    }\n\n    void ClientInfoChanged() {\n        // Client info changed callback implementation\n    }\n\n    void ServerListeningChanged() {\n        // Server listening changed callback implementation\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n#include <thread>\n#include <mutex>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#include <cstring>\n\nclass NetworkClientInfo {\npublic:\n    int socket;\n    // Other client information attributes\n};\n\nclass NetworkServer {\nprivate:\n    std::string host;\n    unsigned short port_num;\n    bool server_online;\n    bool server_listening;\n    std::vector<NetworkClientInfo*> ServerClients;\n    std::mutex ServerClientsMutex;\n    int server_sock[MAXSOCK];\n    int socket_count;\n    std::thread* ConnectionThread[MAXSOCK];\n\npublic:\n    NetworkServer(std::vector<RGBController *>& control) {\n        // Constructor implementation\n    }\n\n    ~NetworkServer() {\n        // Destructor implementation\n    }\n\n    void StartServer() {\n        // Start server implementation\n    }\n\n    void StopServer() {\n        // Stop server implementation\n    }\n\n    void ConnectionThreadFunction(int socket_idx) {\n        // Connection thread function implementation\n    }\n\n    int accept_select(int sockfd) {\n        // Helper function implementation\n        return 0;\n    }\n\n    unsigned short GetPort() {\n        // Return current port number\n        return port_num;\n    }\n\n    void ClientInfoChanged() {\n        // Callback for client list changes\n    }\n\n    void ServerListeningChanged() {\n        // Callback for server listening state changes\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n#include <thread>\n#include <mutex>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#include <cstring>\n\nclass NetworkClientInfo {\npublic:\n    int socket_fd;\n    // Other client information\n};\n\nclass NetworkServer {\nprivate:\n    std::string host;\n    unsigned short port_num;\n    bool server_online;\n    bool server_listening;\n    std::vector<NetworkClientInfo*> ServerClients;\n    std::mutex ServerClientsMutex;\n    int server_sock[MAXSOCK];\n    int socket_count;\n    std::thread* ConnectionThread[MAXSOCK];\n\npublic:\n    NetworkServer(std::vector<RGBController *>& control) {\n        // Constructor implementation\n    }\n\n    ~NetworkServer() {\n        // Destructor implementation\n    }\n\n    void StartServer() {\n        // Start server implementation\n    }\n\n    void StopServer() {\n        // Stop server implementation\n    }\n\n    void ConnectionThreadFunction(int socket_idx) {\n        // Connection thread function implementation\n    }\n\n    int accept_select(int sockfd) {\n        // Accept select helper function implementation\n        return 0;\n    }\n\n    unsigned short GetPort() {\n        return port_num;\n    }\n\n    void ClientInfoChanged() {\n        // Client info changed callback implementation\n    }\n\n    void ServerListeningChanged() {\n        // Server listening changed callback implementation\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <vector>\n#include <thread>\n#include <mutex>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#include <cstring>\n\nclass NetworkClientInfo {\npublic:\n    int socket;\n    // Additional client information\n};\n\nclass NetworkServer {\nprivate:\n    std::string host;\n    unsigned short port_num;\n    bool server_online;\n    bool server_listening;\n    std::vector<NetworkClientInfo*> ServerClients;\n    std::mutex ServerClientsMutex;\n    int server_sock[MAXSOCK];\n    int socket_count;\n    std::thread* ConnectionThread[MAXSOCK];\n\npublic:\n    NetworkServer(std::vector<RGBController *>& control) {\n        // Constructor implementation\n    }\n\n    ~NetworkServer() {\n        // Destructor implementation\n    }\n\n    void StartServer() {\n        // Start server implementation\n    }\n\n    void StopServer() {\n        // Stop server implementation\n    }\n\n    void ConnectionThreadFunction(int socket_idx) {\n        // Connection thread function implementation\n    }\n\n    int accept_select(int sockfd) {\n        // Helper function implementation\n        return 0;\n    }\n\n    unsigned short GetPort() {\n        // Get port implementation\n        return port_num;\n    }\n\n    void ClientInfoChanged() {\n        // Callback for client list changes\n    }\n\n    void ServerListeningChanged() {\n        // Callback for server listening state changes\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n#include <thread>\n#include <mutex>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#include <cstring>\n\nclass NetworkClientInfo {\npublic:\n    int socket_fd;\n    // Other client information attributes\n};\n\nclass NetworkServer {\nprivate:\n    std::string host;\n    unsigned short port_num;\n    bool server_online;\n    bool server_listening;\n    std::vector<NetworkClientInfo*> ServerClients;\n    std::mutex ServerClientsMutex;\n    int server_sock[MAXSOCK];\n    int socket_count;\n    std::thread* ConnectionThread[MAXSOCK];\n\npublic:\n    NetworkServer(std::vector<RGBController *>& control) {\n        // Constructor implementation\n    }\n\n    ~NetworkServer() {\n        // Destructor implementation\n    }\n\n    void StartServer() {\n        // Start server implementation\n    }\n\n    void StopServer() {\n        // Stop server implementation\n    }\n\n    void ConnectionThreadFunction(int socket_idx) {\n        // Connection thread function implementation\n    }\n\n    int accept_select(int sockfd) {\n        // Helper function implementation\n        return 0;\n    }\n\n    unsigned short GetPort() {\n        return port_num;\n    }\n\n    void ClientInfoChanged() {\n        // Callback implementation\n    }\n\n    void ServerListeningChanged() {\n        // Callback implementation\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n#include <thread>\n#include <mutex>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#include <cstring>\n\nclass NetworkClientInfo {\npublic:\n    int socket;\n    // Additional client information\n};\n\nclass NetworkServer {\nprivate:\n    std::string host;\n    unsigned short port_num;\n    bool server_online;\n    bool server_listening;\n    std::vector<NetworkClientInfo*> ServerClients;\n    std::mutex ServerClientsMutex;\n    int server_sock[MAXSOCK];\n    int socket_count;\n    std::thread* ConnectionThread[MAXSOCK];\n\npublic:\n    NetworkServer(std::vector<RGBController *>& control) {\n        // Constructor implementation\n    }\n\n    ~NetworkServer() {\n        // Destructor implementation\n    }\n\n    void StartServer() {\n        // Start server implementation\n    }\n\n    void StopServer() {\n        // Stop server implementation\n    }\n\n    void ConnectionThreadFunction(int socket_idx) {\n        // Connection thread function implementation\n    }\n\n    int accept_select(int sockfd) {\n        // Accept select helper function implementation\n        return 0;\n    }\n\n    unsigned short GetPort() {\n        return port_num;\n    }\n\n    void ClientInfoChanged() {\n        // Client info changed callback implementation\n    }\n\n    void ServerListeningChanged() {\n        // Server listening changed callback implementation\n    }\n};\n```"
    ],
    "match_count": 0,
    "pass@3": 0.0,
    "pass@5": 0.0
  },
  {
    "Task_id": 25,
    "Instruction": "Task Description: Implement a TCP server in C++ that listens for incoming connections, handles client requests in separate child processes, and responds to clients after processing their data.\n\nFunction Description: The function `tcp_server_communication` creates a TCP server that binds to a specified port, listens for incoming connections, and forks child processes to handle each client connection. Each child process reads a character from the client, increments it after a delay, and sends it back before terminating.\n\nInput: None (The function uses predefined constants: port number 9736 and INADDR_ANY for binding to all available network interfaces)\n\nOutput: None (The function runs indefinitely, servicing client requests and doesn't return any value)\n\nNote: The function includes signal handling to prevent zombie processes from terminated child processes. Each client connection is handled in a separate child process while the parent process continues to accept new connections.",
    "Canonical_solution": "#include <unistd.h>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <signal.h>\n\nvoid tcp_server_communication()\n{\n    int server_sockfd = -1;\n    int client_sockfd = -1;\n    int client_len = 0;\n    struct sockaddr_in server_addr;\n    struct sockaddr_in client_addr;\n    \n    server_sockfd = socket(AF_INET, SOCK_STREAM, 0);\n    \n    server_addr.sin_family = AF_INET;\n    server_addr.sin_addr.s_addr = htonl(INADDR_ANY);\n    server_addr.sin_port = htons(9736);\n    \n    bind(server_sockfd, (struct sockaddr*)&server_addr, sizeof(server_addr));\n    listen(server_sockfd, 5);\n    signal(SIGCHLD, SIG_IGN);\n\n    while(1)\n    {\n        char ch = '\\0';\n        client_len = sizeof(client_addr);\n        client_sockfd = accept(server_sockfd, (struct sockaddr*)&client_addr,\n                               (socklen_t *)&client_len);\n\n        if(fork() == 0)\n        {\n            read(client_sockfd, &ch, 1);\n            sleep(5);\n            ch++;\n            write(client_sockfd, &ch, 1);\n            close(client_sockfd);\n            exit(0);\n        }\n        else\n        {\n            close(client_sockfd);\n        }\n    }\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 148,
    "matched_results": [
      "```cpp\n#include <iostream>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n#include <signal.h>\n#include <sys/wait.h>\n#include <cstring>\n\n#define PORT 9736\n#define INADDR_ANY \"0.0.0.0\"\n\nvoid handle_sigchld(int sig) {\n    while (wait(NULL) > 0);\n}\n\nvoid tcp_server_communication() {\n    int server_fd, new_socket;\n    struct sockaddr_in address;\n    int opt = 1;\n    int addrlen = sizeof(address);\n    char buffer[1024] = {0};\n    pid_t pid;\n\n    // Creating socket file descriptor\n    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {\n        perror(\"socket failed\");\n        exit(EXIT_FAILURE);\n    }\n\n    // Forcefully attaching socket to the port 9736\n    if (setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT, &opt, sizeof(opt))) {\n        perror(\"setsockopt\");\n        exit(EXIT_FAILURE);\n    }\n    address.sin_family = AF_INET;\n    address.sin_addr.s_addr = INADDR_ANY;\n    address.sin_port = htons(PORT);\n\n    // Forcefully attaching socket to the port 9736\n    if (bind(server_fd, (struct sockaddr *)&address, sizeof(address))<0) {\n        perror(\"bind failed\");\n        exit(EXIT_FAILURE);\n    }\n    if (listen(server_fd, 3) < 0) {\n        perror(\"listen\");\n        exit(EXIT_FAILURE);\n    }\n    signal(SIGCHLD, handle_sigchld);\n\n    while (true) {\n        if ((new_socket = accept(server_fd, (struct sockaddr *)&address, (socklen_t*)&addrlen))<0) {\n            perror(\"accept\");\n            exit(EXIT_FAILURE);\n        }\n        pid = fork();\n        if (pid == 0) {\n            close(server_fd);\n            read(new_socket, buffer, 1);\n            int char_val = buffer[0] + 1;\n            sleep(1);\n            write(new_socket, &char_val, 1);\n            close(new_socket);\n            exit(0);\n        } else if (pid > 0) {\n            close(new_socket);\n        } else {\n            perror(\"fork failed\");\n            exit(EXIT_FAILURE);\n        }\n    }\n}\n```",
      "```cpp\n#include <iostream>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n#include <signal.h>\n#include <sys/wait.h>\n#include <cstring>\n\n#define PORT 9736\n#define INADDR_ANY \"0.0.0.0\"\n\nvoid handle_sigchld(int sig) {\n    while (wait(NULL) > 0);\n}\n\nvoid tcp_server_communication() {\n    int server_fd, new_socket;\n    struct sockaddr_in address;\n    int opt = 1;\n    int addrlen = sizeof(address);\n    char buffer[1024] = {0};\n    pid_t pid;\n\n    // Creating socket file descriptor\n    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {\n        perror(\"socket failed\");\n        exit(EXIT_FAILURE);\n    }\n\n    // Forcefully attaching socket to the port 9736\n    if (setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT, &opt, sizeof(opt))) {\n        perror(\"setsockopt\");\n        exit(EXIT_FAILURE);\n    }\n    address.sin_family = AF_INET;\n    address.sin_addr.s_addr = INADDR_ANY;\n    address.sin_port = htons(PORT);\n\n    // Forcefully attaching socket to the port 9736\n    if (bind(server_fd, (struct sockaddr *)&address, sizeof(address))<0) {\n        perror(\"bind failed\");\n        exit(EXIT_FAILURE);\n    }\n    if (listen(server_fd, 3) < 0) {\n        perror(\"listen\");\n        exit(EXIT_FAILURE);\n    }\n    signal(SIGCHLD, handle_sigchld);\n\n    while (true) {\n        if ((new_socket = accept(server_fd, (struct sockaddr *)&address, (socklen_t*)&addrlen))<0) {\n            perror(\"accept\");\n            exit(EXIT_FAILURE);\n        }\n        pid = fork();\n        if (pid == 0) {\n            close(server_fd);\n            read(new_socket, buffer, 1);\n            int incremented_char = buffer[0] + 1;\n            sleep(1);\n            write(new_socket, &incremented_char, 1);\n            close(new_socket);\n            exit(0);\n        } else if (pid > 0) {\n            close(new_socket);\n        } else {\n            perror(\"fork failed\");\n            exit(EXIT_FAILURE);\n        }\n    }\n}\n```",
      "```cpp\n#include <iostream>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n#include <signal.h>\n#include <sys/wait.h>\n#include <cstring>\n\n#define PORT 9736\n#define INADDR_ANY \"0.0.0.0\"\n\nvoid handle_sigchld(int sig) {\n    while (wait(NULL) > 0);\n}\n\nvoid tcp_server_communication() {\n    int server_fd, new_socket;\n    struct sockaddr_in address;\n    int opt = 1;\n    int addrlen = sizeof(address);\n    char buffer[1024] = {0};\n    pid_t pid;\n\n    // Creating socket file descriptor\n    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {\n        perror(\"socket failed\");\n        exit(EXIT_FAILURE);\n    }\n\n    // Forcefully attaching socket to the port 9736\n    if (setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT, &opt, sizeof(opt))) {\n        perror(\"setsockopt\");\n        exit(EXIT_FAILURE);\n    }\n    address.sin_family = AF_INET;\n    address.sin_addr.s_addr = INADDR_ANY;\n    address.sin_port = htons(PORT);\n\n    // Forcefully attaching socket to the port 9736\n    if (bind(server_fd, (struct sockaddr *)&address, sizeof(address))<0) {\n        perror(\"bind failed\");\n        exit(EXIT_FAILURE);\n    }\n    if (listen(server_fd, 3) < 0) {\n        perror(\"listen\");\n        exit(EXIT_FAILURE);\n    }\n    signal(SIGCHLD, handle_sigchld);\n\n    while (true) {\n        if ((new_socket = accept(server_fd, (struct sockaddr *)&address, (socklen_t*)&addrlen))<0) {\n            perror(\"accept\");\n            exit(EXIT_FAILURE);\n        }\n        pid = fork();\n        if (pid == 0) {\n            close(server_fd);\n            read(new_socket, buffer, 1);\n            int incremented_char = buffer[0] + 1;\n            sleep(1);\n            write(new_socket, &incremented_char, 1);\n            close(new_socket);\n            exit(0);\n        } else if (pid > 0) {\n            close(new_socket);\n        } else {\n            perror(\"fork failed\");\n            exit(EXIT_FAILURE);\n        }\n    }\n}\n```"
    ],
    "unmatched_results": [
      "```cpp\n#include <iostream>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n#include <signal.h>\n#include <sys/wait.h>\n#include <cstring>\n\n#define PORT 9736\n#define INADDR_ANY \"0.0.0.0\"\n\nvoid handle_sigchld(int sig) {\n    while (wait(NULL) > 0);\n}\n\nvoid handle_client(int client_socket) {\n    char buffer;\n    read(client_socket, &buffer, 1);\n    sleep(1);\n    buffer++;\n    write(client_socket, &buffer, 1);\n    close(client_socket);\n}\n\nvoid tcp_server_communication() {\n    int server_socket, client_socket;\n    struct sockaddr_in server_addr, client_addr;\n    socklen_t client_addr_len = sizeof(client_addr);\n\n    signal(SIGCHLD, handle_sigchld);\n\n    server_socket = socket(AF_INET, SOCK_STREAM, 0);\n    if (server_socket < 0) {\n        std::cerr << \"Socket creation failed\" << std::endl;\n        return;\n    }\n\n    memset(&server_addr, 0, sizeof(server_addr));\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(PORT);\n    server_addr.sin_addr.s_addr = inet_addr(INADDR_ANY);\n\n    if (bind(server_socket, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {\n        std::cerr << \"Bind failed\" << std::endl;\n        return;\n    }\n\n    listen(server_socket, 5);\n\n    while (true) {\n        client_socket = accept(server_socket, (struct sockaddr *)&client_addr, &client_addr_len);\n        if (client_socket < 0) {\n            std::cerr << \"Accept failed\" << std::endl;\n            continue;\n        }\n\n        pid_t pid = fork();\n        if (pid < 0) {\n            std::cerr << \"Fork failed\" << std::endl;\n            close(client_socket);\n            continue;\n        }\n\n        if (pid == 0) {\n            handle_client(client_socket);\n            exit(0);\n        } else {\n            close(client_socket);\n        }\n    }\n\n    close(server_socket);\n}\n```",
      "```cpp\n#include <iostream>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n#include <signal.h>\n#include <sys/wait.h>\n#include <cstring>\n\n#define PORT 9736\n#define INADDR_ANY \"0.0.0.0\"\n\nvoid handle_sigchld(int sig) {\n    while (wait(NULL) > 0);\n}\n\nvoid handle_client(int client_socket) {\n    char buffer;\n    read(client_socket, &buffer, 1);\n    sleep(1);\n    buffer++;\n    write(client_socket, &buffer, 1);\n    close(client_socket);\n}\n\nvoid tcp_server_communication() {\n    int server_fd, client_fd;\n    struct sockaddr_in server_addr, client_addr;\n    socklen_t client_addr_len = sizeof(client_addr);\n\n    signal(SIGCHLD, handle_sigchld);\n\n    server_fd = socket(AF_INET, SOCK_STREAM, 0);\n    if (server_fd < 0) {\n        std::cerr << \"Socket creation failed\" << std::endl;\n        return;\n    }\n\n    memset(&server_addr, 0, sizeof(server_addr));\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(PORT);\n    server_addr.sin_addr.s_addr = inet_addr(INADDR_ANY);\n\n    if (bind(server_fd, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {\n        std::cerr << \"Bind failed\" << std::endl;\n        return;\n    }\n\n    listen(server_fd, 5);\n\n    while (true) {\n        client_fd = accept(server_fd, (struct sockaddr *)&client_addr, &client_addr_len);\n        if (client_fd < 0) {\n            std::cerr << \"Accept failed\" << std::endl;\n            continue;\n        }\n\n        pid_t pid = fork();\n        if (pid < 0) {\n            std::cerr << \"Fork failed\" << std::endl;\n            close(client_fd);\n            continue;\n        }\n\n        if (pid == 0) {\n            close(server_fd);\n            handle_client(client_fd);\n            exit(0);\n        } else {\n            close(client_fd);\n        }\n    }\n}\n```",
      "```cpp\n#include <iostream>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n#include <signal.h>\n#include <sys/wait.h>\n\n#define PORT 9736\n#define INADDR_ANY \"0.0.0.0\"\n\nvoid handle_sigchld(int sig) {\n    while (wait(NULL) > 0);\n}\n\nvoid handle_client(int client_socket) {\n    char received_char;\n    if (read(client_socket, &received_char, 1) > 0) {\n        received_char++;\n        sleep(1);\n        write(client_socket, &received_char, 1);\n    }\n    close(client_socket);\n}\n\nvoid tcp_server_communication() {\n    int server_socket, client_socket;\n    struct sockaddr_in server_addr, client_addr;\n    socklen_t client_addr_len = sizeof(client_addr);\n\n    signal(SIGCHLD, handle_sigchld);\n\n    server_socket = socket(AF_INET, SOCK_STREAM, 0);\n    if (server_socket < 0) {\n        std::cerr << \"Error creating socket\" << std::endl;\n        return;\n    }\n\n    memset(&server_addr, 0, sizeof(server_addr));\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(PORT);\n    server_addr.sin_addr.s_addr = inet_addr(INADDR_ANY);\n\n    if (bind(server_socket, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {\n        std::cerr << \"Error binding socket\" << std::endl;\n        return;\n    }\n\n    listen(server_socket, 5);\n\n    while (true) {\n        client_socket = accept(server_socket, (struct sockaddr *)&client_addr, &client_addr_len);\n        if (client_socket < 0) {\n            std::cerr << \"Error accepting connection\" << std::endl;\n            continue;\n        }\n\n        pid_t pid = fork();\n        if (pid < 0) {\n            std::cerr << \"Error forking process\" << std::endl;\n            continue;\n        }\n\n        if (pid == 0) {\n            handle_client(client_socket);\n            exit(0);\n        }\n    }\n}\n```",
      "```cpp\n#include <iostream>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n#include <signal.h>\n#include <sys/wait.h>\n#include <cstring>\n\n#define PORT 9736\n#define INADDR_ANY \"0.0.0.0\"\n\nvoid handle_sigchld(int sig) {\n    while (wait(NULL) > 0);\n}\n\nvoid handle_client(int client_socket) {\n    char buffer;\n    read(client_socket, &buffer, 1);\n    sleep(1);\n    buffer++;\n    write(client_socket, &buffer, 1);\n    close(client_socket);\n}\n\nvoid tcp_server_communication() {\n    int server_fd, client_fd;\n    struct sockaddr_in server_addr, client_addr;\n    socklen_t client_addr_len = sizeof(client_addr);\n\n    signal(SIGCHLD, handle_sigchld);\n\n    server_fd = socket(AF_INET, SOCK_STREAM, 0);\n    if (server_fd < 0) {\n        perror(\"socket creation failed\");\n        return;\n    }\n\n    memset(&server_addr, 0, sizeof(server_addr));\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(PORT);\n    server_addr.sin_addr.s_addr = inet_addr(INADDR_ANY);\n\n    if (bind(server_fd, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {\n        perror(\"bind failed\");\n        return;\n    }\n\n    listen(server_fd, 3);\n\n    while (true) {\n        client_fd = accept(server_fd, (struct sockaddr *)&client_addr, &client_addr_len);\n        if (client_fd < 0) {\n            perror(\"accept failed\");\n            continue;\n        }\n\n        pid_t pid = fork();\n        if (pid < 0) {\n            perror(\"fork failed\");\n            close(client_fd);\n            continue;\n        }\n\n        if (pid == 0) {\n            close(server_fd);\n            handle_client(client_fd);\n            _exit(0);\n        } else {\n            close(client_fd);\n        }\n    }\n}\n```",
      "```cpp\n#include <iostream>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n#include <signal.h>\n#include <sys/wait.h>\n#include <cstring>\n\n#define PORT 9736\n#define INADDR_ANY \"0.0.0.0\"\n\nvoid handle_sigchld(int sig) {\n    while (wait(NULL) > 0);\n}\n\nvoid handle_client(int client_socket) {\n    char buffer;\n    read(client_socket, &buffer, 1);\n    sleep(1);\n    buffer++;\n    write(client_socket, &buffer, 1);\n    close(client_socket);\n}\n\nvoid tcp_server_communication() {\n    int server_fd, client_fd;\n    struct sockaddr_in server_addr, client_addr;\n    socklen_t client_addr_len = sizeof(client_addr);\n\n    signal(SIGCHLD, handle_sigchld);\n\n    server_fd = socket(AF_INET, SOCK_STREAM, 0);\n    if (server_fd == -1) {\n        std::cerr << \"Socket creation failed\" << std::endl;\n        return;\n    }\n\n    memset(&server_addr, 0, sizeof(server_addr));\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(PORT);\n    server_addr.sin_addr.s_addr = inet_addr(INADDR_ANY);\n\n    if (bind(server_fd, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {\n        std::cerr << \"Bind failed\" << std::endl;\n        return;\n    }\n\n    listen(server_fd, 5);\n\n    while (true) {\n        client_fd = accept(server_fd, (struct sockaddr *)&client_addr, &client_addr_len);\n        if (client_fd < 0) {\n            std::cerr << \"Accept failed\" << std::endl;\n            continue;\n        }\n\n        pid_t pid = fork();\n        if (pid < 0) {\n            std::cerr << \"Fork failed\" << std::endl;\n            close(client_fd);\n            continue;\n        }\n\n        if (pid == 0) {\n            handle_client(client_fd);\n            exit(0);\n        } else {\n            close(client_fd);\n        }\n    }\n}\n```",
      "```cpp\n#include <iostream>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n#include <signal.h>\n#include <sys/wait.h>\n\n#define PORT 9736\n#define INADDR_ANY \"0.0.0.0\"\n\nvoid handle_sigchld(int sig) {\n    while (wait(NULL) > 0);\n}\n\nvoid handle_client(int client_socket) {\n    char data;\n    read(client_socket, &data, 1);\n    sleep(1);\n    data++;\n    write(client_socket, &data, 1);\n    close(client_socket);\n}\n\nvoid tcp_server_communication() {\n    int server_fd, new_socket;\n    struct sockaddr_in address;\n    int opt = 1;\n    int addrlen = sizeof(address);\n    pid_t pid;\n\n    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {\n        perror(\"socket failed\");\n        exit(EXIT_FAILURE);\n    }\n\n    if (setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT, &opt, sizeof(opt))) {\n        perror(\"setsockopt\");\n        exit(EXIT_FAILURE);\n    }\n\n    address.sin_family = AF_INET;\n    address.sin_addr.s_addr = INADDR_ANY;\n    address.sin_port = htons(PORT);\n\n    if (bind(server_fd, (struct sockaddr *)&address, sizeof(address)) < 0) {\n        perror(\"bind failed\");\n        exit(EXIT_FAILURE);\n    }\n\n    if (listen(server_fd, 3) < 0) {\n        perror(\"listen\");\n        exit(EXIT_FAILURE);\n    }\n\n    signal(SIGCHLD, handle_sigchld);\n\n    while (true) {\n        if ((new_socket = accept(server_fd, (struct sockaddr *)&address, (socklen_t*)&addrlen)) < 0) {\n            perror(\"accept\");\n            continue;\n        }\n\n        pid = fork();\n        if (pid < 0) {\n            perror(\"fork\");\n            continue;\n        }\n\n        if (pid == 0) {\n            close(server_fd);\n            handle_client(new_socket);\n            exit(0);\n        }\n    }\n}\n```",
      "```cpp\n#include <iostream>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n#include <signal.h>\n#include <sys/wait.h>\n\n#define PORT 9736\n#define INADDR_ANY \"0.0.0.0\"\n\nvoid handle_sigchld(int sig) {\n    while (wait(NULL) > 0);\n}\n\nvoid handle_client(int client_socket) {\n    char buffer;\n    read(client_socket, &buffer, 1);\n    sleep(1);\n    buffer++;\n    write(client_socket, &buffer, 1);\n    close(client_socket);\n}\n\nvoid tcp_server_communication() {\n    int server_socket, client_socket;\n    struct sockaddr_in server_addr, client_addr;\n    socklen_t client_addr_len = sizeof(client_addr);\n\n    signal(SIGCHLD, handle_sigchld);\n\n    server_socket = socket(AF_INET, SOCK_STREAM, 0);\n    server_addr.sin_family = AF_INET;\n    server_addr.sin_port = htons(PORT);\n    server_addr.sin_addr.s_addr = inet_addr(INADDR_ANY);\n\n    bind(server_socket, (struct sockaddr *)&server_addr, sizeof(server_addr));\n    listen(server_socket, 5);\n\n    while (true) {\n        client_socket = accept(server_socket, (struct sockaddr *)&client_addr, &client_addr_len);\n        if (fork() == 0) {\n            handle_client(client_socket);\n            exit(0);\n        }\n    }\n}\n```"
    ],
    "match_count": 3,
    "pass@3": 0.7083333333333333,
    "pass@5": 0.9166666666666666
  },
  {
    "Task_id": 26,
    "Instruction": "Task Description: Implement a TCP server using UNIX domain sockets for inter-process communication that manages and provides access to statistics data. The server should handle multiple client connections concurrently, process different types of requests (get, reset, etc.), and maintain thread safety.\n\nClass Description: The Stats class implements a TCP server using UNIX domain sockets to manage and provide access to statistics data. It handles client connections, processes requests, and maintains thread safety for concurrent access to statistics.\n\nAttributes:\n- stats_socket_path_: std::string - Path to the UNIX domain socket file\n- sockfd_: int - File descriptor for the server socket\n- serv_addr_: sockaddr_un - Server address structure\n- stats_thread_: std::thread - Thread for running the socket server\n- statsThreadRunning_: std::atomic<bool> - Flag to control the server thread's execution\n- stats_mutex_: std::mutex - Mutex for protecting access to statistics data\n- thread_mutex_: std::mutex - Mutex for protecting thread count\n- thread_exited_: std::condition_variable - Condition variable for thread synchronization\n- thread_count_: int - Count of active threads\n- stats_: std::unordered_map<std::string, int> - Container for storing statistics data\n\nMethods:\n- Stats(const std::string& stats_socket_path) -> None - Constructor that initializes the socket server\n- ~Stats() -> None - Destructor that cleans up resources\n- get(const std::string& stats_socket_path) -> Stats& - Static method to get the singleton instance\n- get_for_unittest(const std::string& stats_socket_path) -> std::unique_ptr<Stats> - Static method to get an instance for unit testing\n- init(const std::string& stats_socket_path) -> bool - Static method to initialize the singleton\n- isInit() -> bool - Static method to check if the singleton is initialized\n- getAll() -> std::unordered_map<std::string, int> - Returns all statistics data\n- increment(const std::string& key, int val) -> int - Increments a statistic value\n- set(const std::string& key, int val) -> int - Sets a statistic value\n- reset() -> int - Resets all statistics\n- startSocket() -> bool - Starts the socket server\n- runSocket() -> void - Main server loop that accepts connections\n- processMsg(int sockfd) -> void - Processes a client message\n- isInitInternal() -> bool& - Internal static method for initialization status",
    "Canonical_solution": "#include <sys/socket.h>\n#include <sys/un.h>\n#include <unistd.h>\n#include <memory>\n#include <mutex>\n#include <string>\n#include <unordered_map>\n#include <json/value.h>\n\nnamespace Oomd {\n\nclass Stats {\npublic:\n  Stats(const std::string& stats_socket_path);\n  ~Stats();\n\n  static Stats& get(const std::string& stats_socket_path);\n  static std::unique_ptr<Stats> get_for_unittest(const std::string& stats_socket_path);\n  static bool init(const std::string& stats_socket_path);\n  static bool isInit();\n\n  std::unordered_map<std::string, int> getAll();\n  int increment(const std::string& key, int val);\n  int set(const std::string& key, int val);\n  int reset();\n\nprivate:\n  bool startSocket();\n  void runSocket();\n  void processMsg(int sockfd);\n  static bool& isInitInternal();\n\n  std::string stats_socket_path_;\n  int sockfd_{-1};\n  sockaddr_un serv_addr_{};\n  std::thread stats_thread_;\n  std::atomic<bool> statsThreadRunning_{true};\n  std::mutex stats_mutex_;\n  std::unordered_map<std::string, int> stats_;\n  std::mutex thread_mutex_;\n  std::condition_variable thread_exited_;\n  int thread_count_{0};\n};\n\nStats::Stats(const std::string& stats_socket_path)\n    : stats_socket_path_(stats_socket_path) {\n  if (!this->startSocket()) {\n    throw std::runtime_error(\"Socket thread failed to start\");\n  }\n}\n\nStats::~Stats() {\n  std::array<char, 64> err_buf = {};\n  statsThreadRunning_ = false;\n  std::unique_lock<std::mutex> lock(thread_mutex_);\n  if (!thread_exited_.wait_for(lock, std::chrono::seconds(5), [this] {\n        return this->thread_count_ == 0;\n      })) {\n    OCHECK(false);\n  }\n  lock.unlock();\n  if (stats_thread_.joinable()) {\n    stats_thread_.join();\n  }\n  if (::unlink(serv_addr_.sun_path) < 0) {\n    OLOG << \"Closing stats error: unlinking socket path: \"\n         << ::strerror_r(errno, err_buf.data(), err_buf.size());\n  }\n  if (::close(sockfd_) < 0) {\n    OLOG << \"Closing stats error: closing stats socket: \"\n         << ::strerror_r(errno, err_buf.data(), err_buf.size());\n  }\n}\n\nbool Stats::startSocket() {\n  std::array<char, 64> err_buf = {};\n\n  sockfd_ = ::socket(AF_UNIX, SOCK_STREAM, 0);\n  if (sockfd_ < 0) {\n    OLOG << \"Error creating socket: \"\n         << ::strerror_r(errno, err_buf.data(), err_buf.size() - 1);\n    return false;\n  }\n  ::memset(&serv_addr_, '\\0', sizeof(serv_addr_));\n  serv_addr_.sun_family = AF_UNIX;\n  ::strcpy(serv_addr_.sun_path, stats_socket_path_.c_str());\n  if (::unlink(serv_addr_.sun_path) < 0 && errno != ENOENT) {\n    OLOG << \"Pre-unlinking of socket path failed. \" << serv_addr_.sun_path\n         << \". Errno: \" << ::strerror_r(errno, err_buf.data(), err_buf.size());\n    return false;\n  }\n  if (::bind(sockfd_, (struct sockaddr*)&serv_addr_, sizeof(serv_addr_)) < 0) {\n    OLOG << \"Error binding stats collection socket: \"\n         << ::strerror_r(errno, err_buf.data(), err_buf.size());\n    return false;\n  }\n  if (::listen(sockfd_, 5) < 0) {\n    OLOG << \"Error listening at socket: \"\n         << ::strerror_r(errno, err_buf.data(), err_buf.size());\n    return false;\n  }\n  stats_thread_ = std::thread([this] { this->runSocket(); });\n  return true;\n}\n\nvoid Stats::runSocket() {\n  sockaddr_un cli_addr;\n  socklen_t clilen = sizeof(cli_addr);\n  std::array<char, 64> err_buf = {};\n  while (statsThreadRunning_) {\n    int sockfd = ::accept(sockfd_, (struct sockaddr*)&cli_addr, &clilen);\n    if (sockfd < 0) {\n      OLOG << \"Stats server error: accepting connection: \"\n           << ::strerror_r(errno, err_buf.data(), err_buf.size());\n      continue;\n    }\n    std::unique_lock<std::mutex> lock(thread_mutex_);\n    ++thread_count_;\n    std::thread msg_thread_ =\n        std::thread([this, sockfd] { this->processMsg(sockfd); });\n    msg_thread_.detach();\n    lock.unlock();\n    thread_exited_.notify_one();\n  }\n}\n\nvoid Stats::processMsg(int sockfd) {\n  std::array<char, 64> err_buf = {};\n  OOMD_SCOPE_EXIT {\n    if (::close(sockfd) < 0) {\n      OLOG << \"Stats server error: closing file descriptor: \"\n           << ::strerror_r(errno, err_buf.data(), err_buf.size());\n    }\n  };\n  char mode = 'a';\n  char byte_buf;\n  int num_read = 0;\n  for (; num_read < 32; num_read++) {\n    int res = ::read(sockfd, &byte_buf, 1);\n    if (res < 0) {\n      OLOG << \"Stats server error: reading from socket: \"\n           << ::strerror_r(errno, err_buf.data(), err_buf.size());\n      return;\n    } else if (res == 0) {\n      break;\n    }\n    if (byte_buf == '\\n' || byte_buf == '\\0') {\n      break;\n    }\n    if (num_read == 0) {\n      mode = byte_buf;\n    }\n  }\n\n  Json::Value root;\n  root[\"error\"] = 0;\n  Json::Value body(Json::objectValue);\n  switch (mode) {\n    case 'g':\n      for (auto const& pair : getAll()) {\n        body[pair.first] = pair.second;\n      }\n      break;\n    case 'r':\n      Stats::reset();\n      break;\n    case '0':\n      break;\n    default:\n      root[\"error\"] = 1;\n      OLOG << \"Stats server error: received unknown request: \" << mode;\n  }\n  root[\"body\"] = body;\n  std::string ret = root.toStyledString();\n  if (Util::writeFull(sockfd, ret.c_str(), strlen(ret.c_str())) < 0) {\n    OLOG << \"Stats server error: writing to socket: \"\n         << ::strerror_r(errno, err_buf.data(), err_buf.size());\n  }\n  std::unique_lock<std::mutex> lock(thread_mutex_);\n  thread_count_--;\n  lock.unlock();\n  thread_exited_.notify_one();\n}\n\n} // namespace Oomd",
    "Code_level": "Class-level",
    "FSMID_for_test": 148,
    "matched_results": [
      "```cpp\n#include <iostream>\n#include <string>\n#include <unordered_map>\n#include <mutex>\n#include <thread>\n#include <atomic>\n#include <sys/socket.h>\n#include <sys/un.h>\n#include <unistd.h>\n#include <vector>\n\nclass Stats {\npublic:\n    Stats(const std::string& stats_socket_path) {\n        stats_socket_path_ = stats_socket_path;\n        sockfd_ = -1;\n        serv_addr_ = {};\n        stats_thread_ = {};\n        statsThreadRunning_ = {};\n        stats_mutex_ = {};\n        thread_mutex_ = {};\n        thread_exited_ = {};\n        thread_count_ = 0;\n        stats_ = {};\n    }\n\n    ~Stats() {\n        if (stats_thread_.joinable()) {\n            statsThreadRunning_ = false;\n            thread_exited_.notify_one();\n            stats_thread_.join();\n        }\n        if (sockfd_ != -1) {\n            close(sockfd_);\n        }\n    }\n\n    static Stats& get(const std::string& stats_socket_path) {\n        static Stats instance(stats_socket_path);\n        return instance;\n    }\n\n    static std::unique_ptr<Stats> get_for_unittest(const std::string& stats_socket_path) {\n        return std::make_unique<Stats>(stats_socket_path);\n    }\n\n    static bool init(const std::string& stats_socket_path) {\n        static std::once_flag flag;\n        std::call_once(flag, [stats_socket_path]() {\n            instance_ = Stats(stats_socket_path);\n        });\n        return true;\n    }\n\n    static bool isInit() {\n        return instance_ != nullptr;\n    }\n\n    std::unordered_map<std::string, int> getAll() {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        return stats_;\n    }\n\n    int increment(const std::string& key, int val) {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        stats_[key] += val;\n        return stats_[key];\n    }\n\n    int set(const std::string& key, int val) {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        stats_[key] = val;\n        return stats_[key];\n    }\n\n    int reset() {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        stats_.clear();\n        return 0;\n    }\n\n    bool startSocket() {\n        sockfd_ = socket(AF_UNIX, SOCK_STREAM, 0);\n        if (sockfd_ == -1) {\n            return false;\n        }\n\n        serv_addr_.sun_family = AF_UNIX;\n        strncpy(serv_addr_.sun_path, stats_socket_path_.c_str(), sizeof(serv_addr_.sun_path) - 1);\n\n        if (bind(sockfd_, (struct sockaddr*)&serv_addr_, sizeof(serv_addr_)) == -1) {\n            close(sockfd_);\n            return false;\n        }\n\n        if (listen(sockfd_, 10) == -1) {\n            close(sockfd_);\n            return false;\n        }\n\n        statsThreadRunning_ = true;\n        stats_thread_ = std::thread(&Stats::runSocket, this);\n        return true;\n    }\n\n    void runSocket() {\n        while (statsThreadRunning_) {\n            sockaddr_un client_addr;\n            socklen_t client_addr_len = sizeof(client_addr);\n            int newsockfd = accept(sockfd_, (struct sockaddr*)&client_addr, &client_addr_len);\n            if (newsockfd == -1) {\n                continue;\n            }\n\n            std::lock_guard<std::mutex> lock(thread_mutex_);\n            thread_count_++;\n            thread_exited_.notify_one();\n            std::thread worker(&Stats::processMsg, this, newsockfd);\n            worker.detach();\n        }\n    }\n\n    void processMsg(int sockfd) {\n        char buffer[1024] = {};\n        int n = read(sockfd, buffer, sizeof(buffer) - 1);\n        if (n <= 0) {\n            close(sockfd);\n            return;\n        }\n\n        std::string request(buffer, n);\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        // Process request based on content of request\n        // For example, if request is \"get\", return all statistics\n        // If request is \"set key value\", set the statistic for key to value\n        // If request is \"increment key\", increment the statistic for key by 1\n        // If request is \"reset\", reset all statistics to 0\n        // Send response back to client\n        close(sockfd);\n        std::lock_guard<std::mutex> lock(thread_mutex_);\n        thread_count_--;\n        thread_exited_.notify_one();\n    }\n\n    static bool isInitInternal() {\n        return instance_ != nullptr;\n    }\n\nprivate:\n    static Stats instance_;\n    std::string stats_socket_path_;\n    int sockfd_;\n    sockaddr_un serv_addr_;\n    std::thread stats_thread_;\n    std::atomic<bool> statsThreadRunning_;\n    std::mutex stats_mutex_;\n    std::mutex thread_mutex_;\n    std::condition_variable thread_exited_;\n    int thread_count_;\n    std::unordered_map<std::string, int> stats_;\n};\n\nStats Stats::instance_;\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <unordered_map>\n#include <mutex>\n#include <thread>\n#include <atomic>\n#include <sys/socket.h>\n#include <sys/un.h>\n#include <unistd.h>\n#include <vector>\n\nclass Stats {\npublic:\n    Stats(const std::string& stats_socket_path) {\n        stats_socket_path_ = stats_socket_path;\n        sockfd_ = -1;\n        serv_addr_ = {};\n        stats_thread_ = {};\n        statsThreadRunning_ = {};\n        stats_mutex_ = {};\n        thread_mutex_ = {};\n        thread_exited_ = {};\n        thread_count_ = 0;\n        stats_ = {};\n    }\n\n    ~Stats() {\n        if (stats_thread_.joinable()) {\n            statsThreadRunning_ = false;\n            thread_exited_.notify_one();\n            stats_thread_.join();\n        }\n        if (sockfd_ != -1) {\n            close(sockfd_);\n        }\n    }\n\n    static Stats& get(const std::string& stats_socket_path) {\n        static Stats instance(stats_socket_path);\n        return instance;\n    }\n\n    static std::unique_ptr<Stats> get_for_unittest(const std::string& stats_socket_path) {\n        return std::make_unique<Stats>(stats_socket_path);\n    }\n\n    static bool init(const std::string& stats_socket_path) {\n        static std::once_flag onceFlag;\n        std::call_once(onceFlag, [&]() {\n            instance_ = get(stats_socket_path);\n        });\n        return true;\n    }\n\n    static bool isInit() {\n        return instance_ != nullptr;\n    }\n\n    std::unordered_map<std::string, int> getAll() {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        return stats_;\n    }\n\n    int increment(const std::string& key, int val) {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        auto it = stats_.find(key);\n        if (it != stats_.end()) {\n            it->second += val;\n        } else {\n            stats_[key] = val;\n        }\n        return stats_[key];\n    }\n\n    int set(const std::string& key, int val) {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        stats_[key] = val;\n        return val;\n    }\n\n    int reset() {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        stats_.clear();\n        return 0;\n    }\n\n    bool startSocket() {\n        sockfd_ = socket(AF_UNIX, SOCK_STREAM, 0);\n        if (sockfd_ == -1) {\n            return false;\n        }\n        serv_addr_.sun_family = AF_UNIX;\n        strncpy(serv_addr_.sun_path, stats_socket_path_.c_str(), sizeof(serv_addr_.sun_path) - 1);\n        unlink(stats_socket_path_.c_str());\n        if (bind(sockfd_, (struct sockaddr*)&serv_addr_, sizeof(serv_addr_)) == -1) {\n            close(sockfd_);\n            return false;\n        }\n        if (listen(sockfd_, 5) == -1) {\n            close(sockfd_);\n            return false;\n        }\n        statsThreadRunning_ = true;\n        stats_thread_ = std::thread(&Stats::runSocket, this);\n        return true;\n    }\n\n    void runSocket() {\n        while (statsThreadRunning_) {\n            sockaddr_un client_addr;\n            socklen_t client_addr_len = sizeof(client_addr);\n            int client_sockfd = accept(sockfd_, (struct sockaddr*)&client_addr, &client_addr_len);\n            if (client_sockfd == -1) {\n                continue;\n            }\n            std::lock_guard<std::mutex> lock(thread_mutex_);\n            ++thread_count_;\n            thread_exited_.notify_one();\n            std::thread worker(&Stats::processMsg, this, client_sockfd);\n            worker.detach();\n        }\n    }\n\n    void processMsg(int sockfd) {\n        char buffer[1024];\n        int n = read(sockfd, buffer, sizeof(buffer));\n        if (n <= 0) {\n            close(sockfd);\n            return;\n        }\n        std::string request(buffer, n);\n        // Process request based on content\n        close(sockfd);\n        std::lock_guard<std::mutex> lock(thread_mutex_);\n        --thread_count_;\n        thread_exited_.notify_one();\n    }\n\n    static bool isInitInternal() {\n        return instance_ != nullptr;\n    }\n\nprivate:\n    static Stats* instance_;\n    std::string stats_socket_path_;\n    int sockfd_;\n    sockaddr_un serv_addr_;\n    std::thread stats_thread_;\n    std::atomic<bool> statsThreadRunning_;\n    std::mutex stats_mutex_;\n    std::mutex thread_mutex_;\n    std::condition_variable thread_exited_;\n    int thread_count_;\n    std::unordered_map<std::string, int> stats_;\n};\n\nStats* Stats::instance_ = nullptr;\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <unordered_map>\n#include <mutex>\n#include <thread>\n#include <atomic>\n#include <sys/socket.h>\n#include <sys/un.h>\n#include <unistd.h>\n#include <vector>\n\nclass Stats {\npublic:\n    Stats(const std::string& stats_socket_path) {\n        stats_socket_path_ = stats_socket_path;\n        sockfd_ = -1;\n        serv_addr_ = {};\n        stats_thread_ = {};\n        statsThreadRunning_ = {};\n        stats_mutex_ = {};\n        thread_mutex_ = {};\n        thread_exited_ = {};\n        thread_count_ = 0;\n        stats_ = {};\n    }\n\n    ~Stats() {\n        if (stats_thread_.joinable()) {\n            statsThreadRunning_ = false;\n            thread_exited_.notify_one();\n            stats_thread_.join();\n        }\n        if (sockfd_ != -1) {\n            close(sockfd_);\n        }\n    }\n\n    static Stats& get(const std::string& stats_socket_path) {\n        static Stats instance(stats_socket_path);\n        return instance;\n    }\n\n    static std::unique_ptr<Stats> get_for_unittest(const std::string& stats_socket_path) {\n        return std::make_unique<Stats>(stats_socket_path);\n    }\n\n    static bool init(const std::string& stats_socket_path) {\n        static std::once_flag once;\n        std::call_once(once, [stats_socket_path]() {\n            instance_ = get(stats_socket_path);\n        });\n        return true;\n    }\n\n    static bool isInit() {\n        return instance_ != nullptr;\n    }\n\n    std::unordered_map<std::string, int> getAll() {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        return stats_;\n    }\n\n    int increment(const std::string& key, int val) {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        stats_[key] += val;\n        return stats_[key];\n    }\n\n    int set(const std::string& key, int val) {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        stats_[key] = val;\n        return stats_[key];\n    }\n\n    int reset() {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        stats_.clear();\n        return 0;\n    }\n\n    bool startSocket() {\n        sockfd_ = socket(AF_UNIX, SOCK_STREAM, 0);\n        if (sockfd_ == -1) {\n            return false;\n        }\n        serv_addr_.sun_family = AF_UNIX;\n        strncpy(serv_addr_.sun_path, stats_socket_path_.c_str(), sizeof(serv_addr_.sun_path) - 1);\n        unlink(stats_socket_path_.c_str());\n        if (bind(sockfd_, (struct sockaddr*)&serv_addr_, sizeof(serv_addr_)) == -1) {\n            close(sockfd_);\n            return false;\n        }\n        if (listen(sockfd_, 10) == -1) {\n            close(sockfd_);\n            return false;\n        }\n        statsThreadRunning_ = true;\n        stats_thread_ = std::thread(&Stats::runSocket, this);\n        return true;\n    }\n\n    void runSocket() {\n        while (statsThreadRunning_) {\n            sockaddr_un client_addr;\n            socklen_t client_addr_len = sizeof(client_addr);\n            int client_sockfd = accept(sockfd_, (struct sockaddr*)&client_addr, &client_addr_len);\n            if (client_sockfd == -1) {\n                continue;\n            }\n            std::lock_guard<std::mutex> lock(thread_mutex_);\n            ++thread_count_;\n            thread_exited_.notify_one();\n            std::thread worker(&Stats::processMsg, this, client_sockfd);\n            worker.detach();\n        }\n    }\n\n    void processMsg(int sockfd) {\n        char buffer[1024];\n        ssize_t bytes_read = read(sockfd, buffer, sizeof(buffer) - 1);\n        if (bytes_read > 0) {\n            buffer[bytes_read] = '\\0';\n            std::string request(buffer);\n            std::lock_guard<std::mutex> lock(thread_mutex_);\n            --thread_count_;\n            thread_exited_.notify_one();\n            // Process the request\n        }\n        close(sockfd);\n    }\n\n    static bool isInitInternal() {\n        return instance_ != nullptr;\n    }\n\nprivate:\n    static Stats* instance_;\n    std::string stats_socket_path_;\n    int sockfd_;\n    sockaddr_un serv_addr_;\n    std::thread stats_thread_;\n    std::atomic<bool> statsThreadRunning_;\n    std::mutex stats_mutex_;\n    std::mutex thread_mutex_;\n    std::condition_variable thread_exited_;\n    int thread_count_;\n    std::unordered_map<std::string, int> stats_;\n};\n\nStats* Stats::instance_ = nullptr;\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <unordered_map>\n#include <mutex>\n#include <thread>\n#include <atomic>\n#include <sys/socket.h>\n#include <sys/un.h>\n#include <unistd.h>\n#include <vector>\n\nclass Stats {\npublic:\n    Stats(const std::string& stats_socket_path) {\n        stats_socket_path_ = stats_socket_path;\n        sockfd_ = -1;\n        serv_addr_ = {};\n        stats_thread_ = {};\n        statsThreadRunning_ = {};\n        stats_mutex_ = {};\n        thread_mutex_ = {};\n        thread_exited_ = {};\n        thread_count_ = 0;\n        stats_ = {};\n    }\n\n    ~Stats() {\n        if (stats_thread_.joinable()) {\n            statsThreadRunning_ = false;\n            thread_exited_.notify_one();\n            stats_thread_.join();\n        }\n        if (sockfd_ != -1) {\n            close(sockfd_);\n        }\n    }\n\n    static Stats& get(const std::string& stats_socket_path) {\n        static Stats instance(stats_socket_path);\n        return instance;\n    }\n\n    static std::unique_ptr<Stats> get_for_unittest(const std::string& stats_socket_path) {\n        return std::make_unique<Stats>(stats_socket_path);\n    }\n\n    static bool init(const std::string& stats_socket_path) {\n        return get(stats_socket_path).init(stats_socket_path);\n    }\n\n    static bool isInit() {\n        static std::mutex init_mutex;\n        std::lock_guard<std::mutex> lock(init_mutex);\n        static bool is_initialized = init_mutex.lock();\n        return is_initialized;\n    }\n\n    std::unordered_map<std::string, int> getAll() {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        return stats_;\n    }\n\n    int increment(const std::string& key, int val) {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        auto it = stats_.find(key);\n        if (it != stats_.end()) {\n            it->second += val;\n        } else {\n            stats_[key] = val;\n        }\n        return stats_[key];\n    }\n\n    int set(const std::string& key, int val) {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        auto it = stats_.find(key);\n        if (it != stats_.end()) {\n            it->second = val;\n        } else {\n            stats_[key] = val;\n        }\n        return stats_[key];\n    }\n\n    int reset() {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        stats_.clear();\n        return 0;\n    }\n\n    bool startSocket() {\n        sockfd_ = socket(AF_UNIX, SOCK_STREAM, 0);\n        if (sockfd_ == -1) {\n            return false;\n        }\n        serv_addr_.sun_family = AF_UNIX;\n        strncpy(serv_addr_.sun_path, stats_socket_path_.c_str(), sizeof(serv_addr_.sun_path) - 1);\n        unlink(stats_socket_path_.c_str());\n        if (bind(sockfd_, (struct sockaddr*)&serv_addr_, sizeof(serv_addr_)) != 0) {\n            close(sockfd_);\n            return false;\n        }\n        if (listen(sockfd_, 5) != 0) {\n            close(sockfd_);\n            return false;\n        }\n        statsThreadRunning_ = true;\n        stats_thread_ = std::thread(&Stats::runSocket, this);\n        return true;\n    }\n\n    void runSocket() {\n        while (statsThreadRunning_) {\n            sockaddr_un addr;\n            socklen_t addr_len = sizeof(addr);\n            int newsockfd = accept(sockfd_, (struct sockaddr*)&addr, &addr_len);\n            if (newsockfd < 0) {\n                continue;\n            }\n            std::thread worker(&Stats::processMsg, this, newsockfd);\n            {\n                std::lock_guard<std::mutex> lock(thread_mutex_);\n                thread_count_++;\n            }\n            worker.detach();\n        }\n    }\n\n    void processMsg(int sockfd) {\n        char buffer[1024] = {};\n        read(sockfd, buffer, sizeof(buffer));\n        std::string request(buffer);\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        if (request == \"get\") {\n            send(sockfd, getAll().data(), getAll().size(), 0);\n        } else if (request == \"increment\") {\n            // Process increment request\n        } else if (request == \"set\") {\n            // Process set request\n        } else if (request == \"reset\") {\n            reset();\n            send(sockfd, \"Reset\", 6, 0);\n        }\n        close(sockfd);\n        {\n            std::lock_guard<std::mutex> lock(thread_mutex_);\n            thread_count_--;\n        }\n        thread_exited_.notify_one();\n    }\n\n    static bool isInitInternal() {\n        static std::mutex init_mutex;\n        std::lock_guard<std::mutex> lock(init_mutex);\n        static bool is_initialized = false;\n        return is_initialized;\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <unordered_map>\n#include <mutex>\n#include <thread>\n#include <atomic>\n#include <sys/socket.h>\n#include <sys/un.h>\n#include <unistd.h>\n#include <vector>\n\nclass Stats {\npublic:\n    Stats(const std::string& stats_socket_path) {\n        stats_socket_path_ = stats_socket_path;\n        sockfd_ = -1;\n        serv_addr_ = {};\n        stats_thread_ = {};\n        statsThreadRunning_ = {};\n        stats_mutex_ = {};\n        thread_mutex_ = {};\n        thread_exited_ = {};\n        thread_count_ = 0;\n        stats_ = {};\n    }\n\n    ~Stats() {\n        if (stats_thread_.joinable()) {\n            statsThreadRunning_ = false;\n            thread_exited_.notify_one();\n            stats_thread_.join();\n        }\n        if (sockfd_ != -1) {\n            close(sockfd_);\n        }\n    }\n\n    static Stats& get(const std::string& stats_socket_path) {\n        static Stats instance(stats_socket_path);\n        return instance;\n    }\n\n    static std::unique_ptr<Stats> get_for_unittest(const std::string& stats_socket_path) {\n        return std::make_unique<Stats>(stats_socket_path);\n    }\n\n    static bool init(const std::string& stats_socket_path) {\n        static std::once_flag once;\n        std::call_once(once, [&]() {\n            instance_ = get(stats_socket_path);\n        });\n        return true;\n    }\n\n    static bool isInit() {\n        return instance_ != nullptr;\n    }\n\n    std::unordered_map<std::string, int> getAll() {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        return stats_;\n    }\n\n    int increment(const std::string& key, int val) {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        stats_[key] += val;\n        return stats_[key];\n    }\n\n    int set(const std::string& key, int val) {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        stats_[key] = val;\n        return stats_[key];\n    }\n\n    int reset() {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        stats_.clear();\n        return 0;\n    }\n\n    bool startSocket() {\n        sockfd_ = socket(AF_UNIX, SOCK_STREAM, 0);\n        if (sockfd_ == -1) {\n            return false;\n        }\n        serv_addr_.sun_family = AF_UNIX;\n        strncpy(serv_addr_.sun_path, stats_socket_path_.c_str(), sizeof(serv_addr_.sun_path) - 1);\n        if (bind(sockfd_, (struct sockaddr*)&serv_addr_, sizeof(serv_addr_)) == -1) {\n            close(sockfd_);\n            return false;\n        }\n        if (listen(sockfd_, 10) == -1) {\n            close(sockfd_);\n            return false;\n        }\n        statsThreadRunning_ = true;\n        stats_thread_ = std::thread(&Stats::runSocket, this);\n        return true;\n    }\n\n    void runSocket() {\n        while (statsThreadRunning_) {\n            sockaddr_un client_addr;\n            socklen_t client_addr_len = sizeof(client_addr);\n            int newsockfd = accept(sockfd_, (struct sockaddr*)&client_addr, &client_addr_len);\n            if (newsockfd == -1) {\n                continue;\n            }\n            std::lock_guard<std::mutex> lock(thread_mutex_);\n            ++thread_count_;\n            thread_exited_.notify_one();\n            std::thread worker(&Stats::processMsg, this, newsockfd);\n            worker.detach();\n        }\n    }\n\n    void processMsg(int sockfd) {\n        char buffer[1024] = {};\n        read(sockfd, buffer, sizeof(buffer));\n        std::string request(buffer);\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        if (request == \"get\") {\n            std::unordered_map<std::string, int> all_stats = getAll();\n            write(sockfd, &all_stats, sizeof(all_stats));\n        } else if (request == \"increment\") {\n            // Process increment request\n        } else if (request == \"set\") {\n            // Process set request\n        } else if (request == \"reset\") {\n            reset();\n            write(sockfd, \"Reset\", sizeof(\"Reset\"));\n        }\n        std::lock_guard<std::mutex> lock(thread_mutex_);\n        --thread_count_;\n        thread_exited_.notify_one();\n        close(sockfd);\n    }\n\n    static bool isInitInternal() {\n        return instance_ != nullptr;\n    }\n\nprivate:\n    static Stats* instance_;\n    std::string stats_socket_path_;\n    int sockfd_;\n    sockaddr_un serv_addr_;\n    std::thread stats_thread_;\n    std::atomic<bool> statsThreadRunning_;\n    std::mutex stats_mutex_;\n    std::mutex thread_mutex_;\n    std::condition_variable thread_exited_;\n    int thread_count_;\n    std::unordered_map<std::string, int> stats_;\n};\n\nStats* Stats::instance_ = nullptr;\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <unordered_map>\n#include <mutex>\n#include <thread>\n#include <atomic>\n#include <sys/socket.h>\n#include <sys/un.h>\n#include <unistd.h>\n#include <vector>\n\nclass Stats {\npublic:\n    Stats(const std::string& stats_socket_path) {\n        stats_socket_path_ = stats_socket_path;\n        sockfd_ = -1;\n        serv_addr_ = {};\n        stats_thread_ = {};\n        statsThreadRunning_ = {};\n        stats_mutex_ = {};\n        thread_mutex_ = {};\n        thread_exited_ = {};\n        thread_count_ = 0;\n        stats_ = {};\n    }\n\n    ~Stats() {\n        if (stats_thread_.joinable()) {\n            statsThreadRunning_ = false;\n            thread_exited_.notify_one();\n            stats_thread_.join();\n        }\n        if (sockfd_ != -1) {\n            close(sockfd_);\n        }\n    }\n\n    static Stats& get(const std::string& stats_socket_path) {\n        static Stats instance(stats_socket_path);\n        return instance;\n    }\n\n    static std::unique_ptr<Stats> get_for_unittest(const std::string& stats_socket_path) {\n        return std::make_unique<Stats>(stats_socket_path);\n    }\n\n    static bool init(const std::string& stats_socket_path) {\n        static std::once_flag once;\n        std::call_once(once, [&]() {\n            instance_ = get(stats_socket_path);\n        });\n        return true;\n    }\n\n    static bool isInit() {\n        return instance_ != nullptr;\n    }\n\n    std::unordered_map<std::string, int> getAll() {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        return stats_;\n    }\n\n    int increment(const std::string& key, int val) {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        stats_[key] += val;\n        return stats_[key];\n    }\n\n    int set(const std::string& key, int val) {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        stats_[key] = val;\n        return stats_[key];\n    }\n\n    int reset() {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        stats_.clear();\n        return 0;\n    }\n\n    bool startSocket() {\n        sockfd_ = socket(AF_UNIX, SOCK_STREAM, 0);\n        if (sockfd_ == -1) {\n            return false;\n        }\n\n        serv_addr_.sun_family = AF_UNIX;\n        strncpy(serv_addr_.sun_path, stats_socket_path_.c_str(), sizeof(serv_addr_.sun_path) - 1);\n\n        if (bind(sockfd_, (struct sockaddr*)&serv_addr_, sizeof(serv_addr_)) == -1) {\n            close(sockfd_);\n            return false;\n        }\n\n        if (listen(sockfd_, 5) == -1) {\n            close(sockfd_);\n            return false;\n        }\n\n        statsThreadRunning_ = true;\n        stats_thread_ = std::thread(&Stats::runSocket, this);\n        return true;\n    }\n\n    void runSocket() {\n        while (statsThreadRunning_) {\n            sockaddr_un client_addr;\n            socklen_t client_addr_len = sizeof(client_addr);\n            int newsockfd = accept(sockfd_, (struct sockaddr*)&client_addr, &client_addr_len);\n            if (newsockfd == -1) {\n                continue;\n            }\n\n            std::lock_guard<std::mutex> lock(thread_mutex_);\n            ++thread_count_;\n            thread_exited_.notify_one();\n\n            std::thread worker(&Stats::processMsg, this, newsockfd);\n            worker.detach();\n        }\n    }\n\n    void processMsg(int sockfd) {\n        char buffer[1024] = {};\n        read(sockfd, buffer, sizeof(buffer));\n        std::string request(buffer);\n\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        if (request == \"get\") {\n            std::unordered_map<std::string, int> stats = getAll();\n            write(sockfd, &stats, sizeof(stats));\n        } else if (request == \"increment\") {\n            // Process increment request\n        } else if (request == \"set\") {\n            // Process set request\n        } else if (request == \"reset\") {\n            reset();\n        }\n\n        close(sockfd);\n        std::lock_guard<std::mutex> lock(thread_mutex_);\n        --thread_count_;\n        thread_exited_.notify_one();\n    }\n\n    static bool isInitInternal() {\n        return instance_ != nullptr;\n    }\n\nprivate:\n    static Stats* instance_;\n    std::string stats_socket_path_;\n    int sockfd_;\n    sockaddr_un serv_addr_;\n    std::thread stats_thread_;\n    std::atomic<bool> statsThreadRunning_;\n    std::mutex stats_mutex_;\n    std::mutex thread_mutex_;\n    std::condition_variable thread_exited_;\n    int thread_count_;\n    std::unordered_map<std::string, int> stats_;\n};\n\nStats* Stats::instance_ = nullptr;\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <unordered_map>\n#include <mutex>\n#include <thread>\n#include <atomic>\n#include <sys/socket.h>\n#include <sys/un.h>\n#include <unistd.h>\n#include <vector>\n\nclass Stats {\npublic:\n    Stats(const std::string& stats_socket_path) {\n        stats_socket_path_ = stats_socket_path;\n        sockfd_ = -1;\n        serv_addr_ = {};\n        stats_thread_ = {};\n        statsThreadRunning_ = {};\n        stats_mutex_ = {};\n        thread_mutex_ = {};\n        thread_exited_ = {};\n        thread_count_ = 0;\n        stats_ = {};\n    }\n\n    ~Stats() {\n        if (stats_thread_.joinable()) {\n            statsThreadRunning_ = false;\n            thread_exited_.notify_one();\n            stats_thread_.join();\n        }\n        if (sockfd_ != -1) {\n            close(sockfd_);\n        }\n    }\n\n    static Stats& get(const std::string& stats_socket_path) {\n        static Stats instance(stats_socket_path);\n        return instance;\n    }\n\n    static std::unique_ptr<Stats> get_for_unittest(const std::string& stats_socket_path) {\n        return std::make_unique<Stats>(stats_socket_path);\n    }\n\n    static bool init(const std::string& stats_socket_path) {\n        static std::once_flag once;\n        std::call_once(once, [&]() {\n            instance_ = get(stats_socket_path);\n        });\n        return true;\n    }\n\n    static bool isInit() {\n        return instance_ != nullptr;\n    }\n\n    std::unordered_map<std::string, int> getAll() const {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        return stats_;\n    }\n\n    int increment(const std::string& key, int val) {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        stats_[key] += val;\n        return stats_[key];\n    }\n\n    int set(const std::string& key, int val) {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        stats_[key] = val;\n        return stats_[key];\n    }\n\n    int reset() {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        stats_.clear();\n        return 0;\n    }\n\n    bool startSocket() {\n        sockfd_ = socket(AF_UNIX, SOCK_STREAM, 0);\n        if (sockfd_ == -1) {\n            return false;\n        }\n\n        serv_addr_.sun_family = AF_UNIX;\n        strncpy(serv_addr_.sun_path, stats_socket_path_.c_str(), sizeof(serv_addr_.sun_path) - 1);\n\n        if (bind(sockfd_, (struct sockaddr*)&serv_addr_, sizeof(serv_addr_)) == -1) {\n            close(sockfd_);\n            return false;\n        }\n\n        if (listen(sockfd_, 5) == -1) {\n            close(sockfd_);\n            return false;\n        }\n\n        statsThreadRunning_ = true;\n        stats_thread_ = std::thread(&Stats::runSocket, this);\n        return true;\n    }\n\n    void runSocket() {\n        while (statsThreadRunning_) {\n            sockaddr_un client_addr;\n            socklen_t client_addr_len = sizeof(client_addr);\n            int client_sockfd = accept(sockfd_, (struct sockaddr*)&client_addr, &client_addr_len);\n            if (client_sockfd == -1) {\n                continue;\n            }\n\n            std::lock_guard<std::mutex> lock(thread_mutex_);\n            ++thread_count_;\n            thread_exited_.notify_one();\n\n            std::thread worker(&Stats::processMsg, this, client_sockfd);\n            worker.detach();\n        }\n    }\n\n    void processMsg(int sockfd) {\n        char buffer[1024];\n        int n = read(sockfd, buffer, sizeof(buffer));\n        if (n <= 0) {\n            return;\n        }\n\n        std::string request(buffer, n);\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        // Process the request based on the content of 'request'\n        // For example, if request is \"get\", return all statistics\n        // If request is \"increment key val\", increment the value of 'key' by 'val'\n        // If request is \"set key val\", set the value of 'key' to 'val'\n        // If request is \"reset\", reset all statistics\n\n        // Send the response back to the client\n        write(sockfd, \"Response\", 8);\n        close(sockfd);\n\n        std::lock_guard<std::mutex> lock(thread_mutex_);\n        --thread_count_;\n        thread_exited_.notify_one();\n    }\n\n    static bool isInitInternal() {\n        return instance_ != nullptr;\n    }\n\nprivate:\n    static Stats* instance_;\n    std::string stats_socket_path_;\n    int sockfd_;\n    sockaddr_un serv_addr_;\n    std::thread stats_thread_;\n    std::atomic<bool> statsThreadRunning_;\n    std::mutex stats_mutex_;\n    std::mutex thread_mutex_;\n    std::condition_variable thread_exited_;\n    int thread_count_;\n    std::unordered_map<std::string, int> stats_;\n};\n\nStats* Stats::instance_ = nullptr;\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <unordered_map>\n#include <mutex>\n#include <thread>\n#include <atomic>\n#include <sys/socket.h>\n#include <sys/un.h>\n#include <unistd.h>\n#include <vector>\n\nclass Stats {\npublic:\n    Stats(const std::string& stats_socket_path) {\n        stats_socket_path_ = stats_socket_path;\n        sockfd_ = -1;\n        serv_addr_ = {};\n        stats_thread_ = {};\n        statsThreadRunning_ = {};\n        stats_mutex_ = {};\n        thread_mutex_ = {};\n        thread_exited_ = {};\n        thread_count_ = 0;\n        stats_ = {};\n    }\n\n    ~Stats() {\n        if (stats_thread_.joinable()) {\n            statsThreadRunning_ = false;\n            thread_exited_.notify_one();\n            stats_thread_.join();\n        }\n        if (sockfd_ != -1) {\n            close(sockfd_);\n        }\n    }\n\n    static Stats& get(const std::string& stats_socket_path) {\n        static Stats instance(stats_socket_path);\n        return instance;\n    }\n\n    static std::unique_ptr<Stats> get_for_unittest(const std::string& stats_socket_path) {\n        return std::make_unique<Stats>(stats_socket_path);\n    }\n\n    static bool init(const std::string& stats_socket_path) {\n        return get(stats_socket_path).init(stats_socket_path);\n    }\n\n    static bool isInit() {\n        static std::mutex init_mutex;\n        std::lock_guard<std::mutex> lock(init_mutex);\n        static bool initialized = init_mutex.lock();\n        return initialized;\n    }\n\n    std::unordered_map<std::string, int> getAll() {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        return stats_;\n    }\n\n    int increment(const std::string& key, int val) {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        auto it = stats_.find(key);\n        if (it != stats_.end()) {\n            it->second += val;\n        } else {\n            stats_[key] = val;\n        }\n        return stats_[key];\n    }\n\n    int set(const std::string& key, int val) {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        auto it = stats_.find(key);\n        if (it != stats_.end()) {\n            it->second = val;\n        } else {\n            stats_[key] = val;\n        }\n        return stats_[key];\n    }\n\n    int reset() {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        stats_.clear();\n        return 0;\n    }\n\n    bool startSocket() {\n        sockfd_ = socket(AF_UNIX, SOCK_STREAM, 0);\n        if (sockfd_ == -1) {\n            return false;\n        }\n        serv_addr_.sun_family = AF_UNIX;\n        strncpy(serv_addr_.sun_path, stats_socket_path_.c_str(), sizeof(serv_addr_.sun_path) - 1);\n        unlink(stats_socket_path_.c_str());\n        if (bind(sockfd_, (struct sockaddr*)&serv_addr_, sizeof(serv_addr_)) == -1) {\n            close(sockfd_);\n            return false;\n        }\n        if (listen(sockfd_, 5) == -1) {\n            close(sockfd_);\n            return false;\n        }\n        statsThreadRunning_ = true;\n        stats_thread_ = std::thread(&Stats::runSocket, this);\n        return true;\n    }\n\n    void runSocket() {\n        while (statsThreadRunning_) {\n            sockaddr_un client_addr;\n            socklen_t client_addr_len = sizeof(client_addr);\n            int client_sockfd = accept(sockfd_, (struct sockaddr*)&client_addr, &client_addr_len);\n            if (client_sockfd == -1) {\n                continue;\n            }\n            std::lock_guard<std::mutex> lock(thread_mutex_);\n            ++thread_count_;\n            thread_exited_.notify_one();\n            std::thread worker(&Stats::processMsg, this, client_sockfd);\n            worker.detach();\n        }\n    }\n\n    void processMsg(int sockfd) {\n        char buffer[1024];\n        ssize_t bytes_read = read(sockfd, buffer, sizeof(buffer));\n        if (bytes_read > 0) {\n            std::string request(buffer, bytes_read);\n            // Process request and send response\n        }\n        std::lock_guard<std::mutex> lock(thread_mutex_);\n        --thread_count_;\n        thread_exited_.notify_one();\n        close(sockfd);\n    }\n\n    static bool isInitInternal() {\n        static std::mutex init_mutex;\n        std::lock_guard<std::mutex> lock(init_mutex);\n        static bool initialized = false;\n        return initialized;\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <unordered_map>\n#include <mutex>\n#include <thread>\n#include <atomic>\n#include <sys/socket.h>\n#include <sys/un.h>\n#include <unistd.h>\n#include <vector>\n\nclass Stats {\npublic:\n    Stats(const std::string& stats_socket_path) {\n        stats_socket_path_ = stats_socket_path;\n        sockfd_ = -1;\n        serv_addr_ = {};\n        stats_thread_ = {};\n        statsThreadRunning_ = {};\n        stats_mutex_ = {};\n        thread_mutex_ = {};\n        thread_exited_ = {};\n        thread_count_ = 0;\n        stats_ = {};\n        init(stats_socket_path_);\n    }\n\n    ~Stats() {\n        stopSocket();\n        if (stats_thread_.joinable()) {\n            stats_thread_.join();\n        }\n    }\n\n    static Stats& get(const std::string& stats_socket_path) {\n        static Stats instance(stats_socket_path);\n        return instance;\n    }\n\n    static std::unique_ptr<Stats> get_for_unittest(const std::string& stats_socket_path) {\n        return std::make_unique<Stats>(stats_socket_path);\n    }\n\n    static bool init(const std::string& stats_socket_path) {\n        if (isInit()) {\n            return false;\n        }\n        instance_ = get(stats_socket_path);\n        return true;\n    }\n\n    static bool isInit() {\n        return instance_ != nullptr;\n    }\n\n    std::unordered_map<std::string, int> getAll() {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        return stats_;\n    }\n\n    int increment(const std::string& key, int val) {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        stats_[key] += val;\n        return stats_[key];\n    }\n\n    int set(const std::string& key, int val) {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        stats_[key] = val;\n        return stats_[key];\n    }\n\n    int reset() {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        stats_.clear();\n        return 0;\n    }\n\n    bool startSocket() {\n        if (sockfd_ != -1) {\n            return false;\n        }\n        sockfd_ = socket(AF_UNIX, SOCK_STREAM, 0);\n        if (sockfd_ == -1) {\n            return false;\n        }\n        serv_addr_.sun_family = AF_UNIX;\n        strncpy(serv_addr_.sun_path, stats_socket_path_.c_str(), sizeof(serv_addr_.sun_path) - 1);\n        if (bind(sockfd_, (struct sockaddr*)&serv_addr_, sizeof(serv_addr_)) == -1) {\n            close(sockfd_);\n            sockfd_ = -1;\n            return false;\n        }\n        if (listen(sockfd_, 10) == -1) {\n            close(sockfd_);\n            sockfd_ = -1;\n            return false;\n        }\n        statsThreadRunning_ = true;\n        stats_thread_ = std::thread(&Stats::runSocket, this);\n        return true;\n    }\n\n    void runSocket() {\n        while (statsThreadRunning_) {\n            sockaddr_un client_addr;\n            socklen_t client_addr_len = sizeof(client_addr);\n            int client_sockfd = accept(sockfd_, (struct sockaddr*)&client_addr, &client_addr_len);\n            if (client_sockfd == -1) {\n                continue;\n            }\n            std::lock_guard<std::mutex> lock(thread_mutex_);\n            ++thread_count_;\n            thread_exited_.notify_one();\n            std::thread worker(&Stats::processMsg, this, client_sockfd);\n            worker.detach();\n        }\n    }\n\n    void processMsg(int sockfd) {\n        char buffer[1024];\n        int n = read(sockfd, buffer, sizeof(buffer));\n        if (n <= 0) {\n            close(sockfd);\n            return;\n        }\n        std::string request(buffer, n);\n        // Process request based on content\n        close(sockfd);\n        std::lock_guard<std::mutex> lock(thread_mutex_);\n        --thread_count_;\n        thread_exited_.notify_one();\n    }\n\n    static bool isInitInternal() {\n        return instance_ != nullptr;\n    }\n\nprivate:\n    static Stats* instance_;\n    std::string stats_socket_path_;\n    int sockfd_;\n    sockaddr_un serv_addr_;\n    std::thread stats_thread_;\n    std::atomic<bool> statsThreadRunning_;\n    std::mutex stats_mutex_;\n    std::mutex thread_mutex_;\n    std::condition_variable thread_exited_;\n    int thread_count_;\n    std::unordered_map<std::string, int> stats_;\n};\n\nStats* Stats::instance_ = nullptr;\n```"
    ],
    "unmatched_results": [
      "```cpp\n#include <iostream>\n#include <string>\n#include <unordered_map>\n#include <mutex>\n#include <thread>\n#include <atomic>\n#include <sys/socket.h>\n#include <sys/un.h>\n#include <unistd.h>\n#include <vector>\n\nclass Stats {\npublic:\n    Stats(const std::string& stats_socket_path) {\n        stats_socket_path_ = stats_socket_path;\n        sockfd_ = -1;\n        serv_addr_ = {};\n        stats_thread_ = {};\n        statsThreadRunning_ = {};\n        stats_mutex_ = {};\n        thread_mutex_ = {};\n        thread_exited_ = {};\n        thread_count_ = 0;\n        stats_ = {};\n    }\n\n    ~Stats() {\n        if (stats_thread_.joinable()) {\n            statsThreadRunning_ = false;\n            thread_exited_.notify_one();\n            stats_thread_.join();\n        }\n        if (sockfd_ != -1) {\n            close(sockfd_);\n        }\n    }\n\n    static Stats& get(const std::string& stats_socket_path) {\n        static Stats instance(stats_socket_path);\n        return instance;\n    }\n\n    static std::unique_ptr<Stats> get_for_unittest(const std::string& stats_socket_path) {\n        return std::make_unique<Stats>(stats_socket_path);\n    }\n\n    static bool init(const std::string& stats_socket_path) {\n        return get(stats_socket_path).init(stats_socket_path);\n    }\n\n    static bool isInit() {\n        static std::mutex init_mutex;\n        std::lock_guard<std::mutex> lock(init_mutex);\n        static bool initialized = init_mutex.lock();\n        return initialized;\n    }\n\n    std::unordered_map<std::string, int> getAll() {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        return stats_;\n    }\n\n    int increment(const std::string& key, int val) {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        stats_[key] += val;\n        return stats_[key];\n    }\n\n    int set(const std::string& key, int val) {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        stats_[key] = val;\n        return stats_[key];\n    }\n\n    int reset() {\n        std::lock_guard<std::mutex> lock(stats_mutex_);\n        stats_.clear();\n        return 0;\n    }\n\n    bool startSocket() {\n        sockfd_ = socket(AF_UNIX, SOCK_STREAM, 0);\n        if (sockfd_ == -1) {\n            return false;\n        }\n        serv_addr_.sun_family = AF_UNIX;\n        strncpy(serv_addr_.sun_path, stats_socket_path_.c_str(), sizeof(serv_addr_.sun_path) - 1);\n        serv_addr_.sun_path[sizeof(serv_addr_.sun_path) - 1] = '\\0';\n        if (bind(sockfd_, (struct sockaddr*)&serv_addr_, sizeof(serv_addr_)) == -1) {\n            close(sockfd_);\n            return false;\n        }\n        if (listen(sockfd_, 5) == -1) {\n            close(sockfd_);\n            return false;\n        }\n        statsThreadRunning_ = true;\n        stats_thread_ = std::thread(&Stats::runSocket, this);\n        return true;\n    }\n\n    void runSocket() {\n        while (statsThreadRunning_) {\n            sockaddr_un client_addr;\n            socklen_t client_addr_len = sizeof(client_addr);\n            int new_sockfd = accept(sockfd_, (struct sockaddr*)&client_addr, &client_addr_len);\n            if (new_sockfd == -1) {\n                continue;\n            }\n            std::lock_guard<std::mutex> lock(thread_mutex_);\n            thread_count_++;\n            thread_exited_.notify_one();\n            std::thread worker(&Stats::processMsg, this, new_sockfd);\n            worker.detach();\n        }\n    }\n\n    void processMsg(int sockfd) {\n        char buffer[1024];\n        int n = read(sockfd, buffer, sizeof(buffer));\n        if (n <= 0) {\n            return;\n        }\n        std::string request(buffer, n);\n        // Process request based on content\n        // Example: if (request == \"get\") { ... }\n        // Send response back to client\n        // Example: write(sockfd, \"Response\", strlen(\"Response\"));\n        std::lock_guard<std::mutex> lock(thread_mutex_);\n        thread_count_--;\n        thread_exited_.notify_one();\n    }\n\n    static bool isInitInternal() {\n        static std::mutex init_mutex;\n        std::lock_guard<std::mutex> lock(init_mutex);\n        static bool initialized = false;\n        return initialized;\n    }\n};\n```"
    ],
    "match_count": 9,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 27,
    "Instruction": "Task Description: Implement a UDP receiver class in C++ that listens for incoming UDP packets on a specified port, processes them, and forwards them to a network handling component. The class should handle socket creation, binding, and packet reception in a non-blocking manner using polling.\n\nClass Description: The `UDPRecv` class is responsible for setting up a UDP socket server that listens for incoming messages on a specified port. It uses polling to check for incoming data without blocking, and forwards received messages to a network handling component (`DFNetWork`). The class manages the socket lifecycle and provides methods to initialize, start, and stop the receiver.\n\nAttributes:\n- m_poDFNetWork: [DFNetWork*] - Pointer to the network handling component that processes received messages\n- m_iSockFD: [int] - File descriptor for the UDP socket\n- m_bIsEnd: [bool] - Flag indicating whether the receiver should stop running\n- m_bIsStarted: [bool] - Flag indicating whether the receiver has started\n\nMethods:\n- UDPRecv(DFNetWork* poDFNetWork) -> [void] - Constructor that initializes the receiver with a network handling component\n- ~UDPRecv() -> [void] - Destructor that closes the socket if it's open\n- Stop() -> [void] - Signals the receiver to stop and waits for it to finish\n- Init(int iPort) -> [int] - Initializes the UDP socket and binds it to the specified port (returns 0 on success, -1 on failure)\n- run() -> [void] - Main execution loop that polls for incoming messages and processes them (runs in a separate thread)",
    "Canonical_solution": "#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#include <string.h>\n#include \"dfnetwork.h\"\n\nnamespace phxpaxos {\n\nclass UDPRecv\n{\npublic:\n    UDPRecv(DFNetWork * poDFNetWork);\n    ~UDPRecv();\n\n    void Stop();\n    int Init(const int iPort);\n    void run();\n\nprivate:\n    DFNetWork * m_poDFNetWork;\n    int m_iSockFD;\n    bool m_bIsEnd;\n    bool m_bIsStarted;\n};\n\nUDPRecv::UDPRecv(DFNetWork * poDFNetWork) \n    : m_poDFNetWork(poDFNetWork), m_iSockFD(-1), m_bIsEnd(false), m_bIsStarted(false)\n{\n}\n\nUDPRecv::~UDPRecv()\n{\n    if (m_iSockFD != -1)\n    {\n        close(m_iSockFD);\n        m_iSockFD = -1;\n    }\n}\n\nvoid UDPRecv::Stop()\n{\n    if (m_bIsStarted)\n    {\n        m_bIsEnd = true;\n        join();\n    }\n}\n\nint UDPRecv::Init(const int iPort)\n{\n    if ((m_iSockFD = socket(AF_INET, SOCK_DGRAM, 0)) < 0) \n    {\n        return -1;\n    }\n\n    struct sockaddr_in addr;\n    memset(&addr, 0, sizeof(addr));\n\n    addr.sin_family = AF_INET;\n    addr.sin_port = htons(iPort);\n    addr.sin_addr.s_addr = htonl(INADDR_ANY);\n\n    int enable = 1;\n    setsockopt(m_iSockFD, SOL_SOCKET, SO_REUSEADDR, &enable, sizeof(int));\n\n    if (bind(m_iSockFD, (struct sockaddr *)&addr, sizeof(addr)) < 0) \n    {\n        return -1;\n    }\n\n    return 0;\n}\n\nvoid UDPRecv::run()\n{\n    m_bIsStarted = true;\n\n    char sBuffer[65536] = {0};\n\n    struct sockaddr_in addr;\n    socklen_t addr_len = sizeof(struct sockaddr_in);\n    memset(&addr, 0, sizeof(addr));\n\n    while(true)\n    {\n        if (m_bIsEnd)\n        {\n            return;\n        }\n\n        struct pollfd fd;\n        int ret;\n\n        fd.fd = m_iSockFD;\n        fd.events = POLLIN;\n        ret = poll(&fd, 1, 500);\n\n        if (ret == 0 || ret == -1)\n        {\n            continue;\n        }\n        \n        int iRecvLen = recvfrom(m_iSockFD, sBuffer, sizeof(sBuffer), 0,\n                (struct sockaddr *)&addr, &addr_len);\n\n        if (iRecvLen > 0)\n        {\n            m_poDFNetWork->OnReceiveMessage(sBuffer, iRecvLen);\n        }\n    }\n}\n\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 152,
    "matched_results": [
      "```cpp\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#include <fcntl.h>\n#include <iostream>\n#include <thread>\n#include <atomic>\n\nclass DFNetWork {\npublic:\n    void ProcessMessage(const std::string& message) {}\n};\n\nclass UDPRecv {\nprivate:\n    DFNetWork* m_poDFNetWork;\n    int m_iSockFD;\n    std::atomic<bool> m_bIsEnd;\n    std::atomic<bool> m_bIsStarted;\n\npublic:\n    UDPRecv(DFNetWork* poDFNetWork) : m_poDFNetWork(poDFNetWork), m_iSockFD(-1), m_bIsEnd(false), m_bIsStarted(false) {}\n\n    ~UDPRecv() {\n        if (m_iSockFD != -1) {\n            close(m_iSockFD);\n        }\n    }\n\n    void Stop() {\n        m_bIsEnd = true;\n    }\n\n    int Init(int iPort) {\n        m_iSockFD = socket(AF_INET, SOCK_DGRAM, 0);\n        if (m_iSockFD == -1) {\n            return -1;\n        }\n\n        int flags = fcntl(m_iSockFD, F_GETFL, 0);\n        if (flags == -1) {\n            close(m_iSockFD);\n            return -1;\n        }\n\n        if (fcntl(m_iSockFD, F_SETFL, flags | O_NONBLOCK) == -1) {\n            close(m_iSockFD);\n            return -1;\n        }\n\n        sockaddr_in addr;\n        addr.sin_family = AF_INET;\n        addr.sin_port = htons(iPort);\n        addr.sin_addr.s_addr = INADDR_ANY;\n\n        if (bind(m_iSockFD, (sockaddr*)&addr, sizeof(addr)) == -1) {\n            close(m_iSockFD);\n            return -1;\n        }\n\n        return 0;\n    }\n\n    void run() {\n        m_bIsStarted = true;\n        while (!m_bIsEnd) {\n            sockaddr_in sender;\n            socklen_t sender_len = sizeof(sender);\n            char buffer[1024];\n            ssize_t bytes = recvfrom(m_iSockFD, buffer, sizeof(buffer), 0, (sockaddr*)&sender, &sender_len);\n            if (bytes > 0) {\n                std::string message(buffer, bytes);\n                m_poDFNetWork->ProcessMessage(message);\n            }\n        }\n        m_bIsStarted = false;\n    }\n};\n```",
      "```cpp\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#include <pthread.h>\n#include <iostream>\n\nclass DFNetWork {\npublic:\n    virtual void ProcessMessage(const std::string& message) = 0;\n};\n\nclass UDPRecv {\nprivate:\n    DFNetWork* m_poDFNetWork;\n    int m_iSockFD;\n    bool m_bIsEnd;\n    bool m_bIsStarted;\n    pthread_t m_threadID;\n\n    void* RunThread(void* arg) {\n        UDPRecv* recv = static_cast<UDPRecv*>(arg);\n        recv->run();\n        return nullptr;\n    }\n\npublic:\n    UDPRecv(DFNetWork* poDFNetWork) : m_poDFNetWork(poDFNetWork), m_iSockFD(-1), m_bIsEnd(false), m_bIsStarted(false) {}\n\n    ~UDPRecv() {\n        if (m_iSockFD != -1) {\n            close(m_iSockFD);\n        }\n    }\n\n    void Stop() {\n        m_bIsEnd = true;\n        pthread_join(m_threadID, nullptr);\n    }\n\n    int Init(int iPort) {\n        m_iSockFD = socket(AF_INET, SOCK_DGRAM, 0);\n        if (m_iSockFD == -1) {\n            return -1;\n        }\n\n        sockaddr_in serverAddr;\n        serverAddr.sin_family = AF_INET;\n        serverAddr.sin_port = htons(iPort);\n        serverAddr.sin_addr.s_addr = INADDR_ANY;\n\n        if (bind(m_iSockFD, (struct sockaddr*)&serverAddr, sizeof(serverAddr)) == -1) {\n            close(m_iSockFD);\n            return -1;\n        }\n\n        return 0;\n    }\n\n    void run() {\n        char buffer[1024];\n        sockaddr_in clientAddr;\n        socklen_t clientAddrLen = sizeof(clientAddr);\n\n        while (!m_bIsEnd) {\n            ssize_t bytesReceived = recvfrom(m_iSockFD, buffer, sizeof(buffer), 0, (struct sockaddr*)&clientAddr, &clientAddrLen);\n            if (bytesReceived > 0) {\n                std::string message(buffer, bytesReceived);\n                m_poDFNetWork->ProcessMessage(message);\n            }\n        }\n\n        m_bIsStarted = false;\n    }\n\n    void Start() {\n        if (!m_bIsStarted) {\n            m_bIsStarted = true;\n            pthread_create(&m_threadID, nullptr, RunThread, this);\n        }\n    }\n};\n```",
      "```cpp\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#include <pthread.h>\n#include <iostream>\n\nclass DFNetWork {\npublic:\n    void ProcessMessage(const std::string& message) {}\n};\n\nclass UDPRecv {\nprivate:\n    DFNetWork* m_poDFNetWork;\n    int m_iSockFD;\n    bool m_bIsEnd;\n    bool m_bIsStarted;\n    pthread_t m_threadID;\n\n    void* RunThread(void* arg) {\n        UDPRecv* recv = static_cast<UDPRecv*>(arg);\n        recv->run();\n        return nullptr;\n    }\n\npublic:\n    UDPRecv(DFNetWork* poDFNetWork) : m_poDFNetWork(poDFNetWork), m_iSockFD(-1), m_bIsEnd(false), m_bIsStarted(false) {}\n\n    ~UDPRecv() {\n        if (m_iSockFD != -1) {\n            close(m_iSockFD);\n        }\n    }\n\n    void Stop() {\n        m_bIsEnd = true;\n        pthread_join(m_threadID, nullptr);\n    }\n\n    int Init(int iPort) {\n        m_iSockFD = socket(AF_INET, SOCK_DGRAM, 0);\n        if (m_iSockFD == -1) {\n            return -1;\n        }\n\n        sockaddr_in addr;\n        addr.sin_family = AF_INET;\n        addr.sin_addr.s_addr = INADDR_ANY;\n        addr.sin_port = htons(iPort);\n\n        if (bind(m_iSockFD, (sockaddr*)&addr, sizeof(addr)) == -1) {\n            close(m_iSockFD);\n            m_iSockFD = -1;\n            return -1;\n        }\n\n        return 0;\n    }\n\n    void run() {\n        m_bIsStarted = true;\n        while (!m_bIsEnd) {\n            char buffer[1024];\n            sockaddr_in sender;\n            socklen_t sender_len = sizeof(sender);\n\n            ssize_t bytes_received = recvfrom(m_iSockFD, buffer, sizeof(buffer), 0, (sockaddr*)&sender, &sender_len);\n            if (bytes_received > 0) {\n                std::string message(buffer, bytes_received);\n                m_poDFNetWork->ProcessMessage(message);\n            }\n        }\n        m_bIsStarted = false;\n    }\n};\n```"
    ],
    "unmatched_results": [
      "```cpp\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#include <pthread.h>\n#include <iostream>\n\nclass DFNetWork {\npublic:\n    void ProcessMessage(const std::string& message) {}\n};\n\nclass UDPRecv {\nprivate:\n    DFNetWork* m_poDFNetWork;\n    int m_iSockFD;\n    bool m_bIsEnd;\n    bool m_bIsStarted;\n    pthread_t m_threadID;\n\n    void* RunThread(void* arg) {\n        UDPRecv* recv = static_cast<UDPRecv*>(arg);\n        struct sockaddr_in addr;\n        socklen_t addr_len = sizeof(addr);\n        char buffer[1024];\n        int n;\n\n        while (!recv->m_bIsEnd) {\n            n = recvfrom(recv->m_iSockFD, buffer, sizeof(buffer), 0, (struct sockaddr*)&addr, &addr_len);\n            if (n > 0) {\n                recv->m_poDFNetWork->ProcessMessage(std::string(buffer, n));\n            }\n        }\n        return nullptr;\n    }\n\npublic:\n    UDPRecv(DFNetWork* poDFNetWork) : m_poDFNetWork(poDFNetWork), m_iSockFD(-1), m_bIsEnd(false), m_bIsStarted(false) {}\n\n    ~UDPRecv() {\n        if (m_iSockFD != -1) {\n            close(m_iSockFD);\n        }\n    }\n\n    void Stop() {\n        m_bIsEnd = true;\n        if (pthread_join(m_threadID, nullptr) != 0) {\n            std::cerr << \"Failed to join thread\" << std::endl;\n        }\n    }\n\n    int Init(int iPort) {\n        m_iSockFD = socket(AF_INET, SOCK_DGRAM, 0);\n        if (m_iSockFD == -1) {\n            return -1;\n        }\n\n        memset(&addr, 0, sizeof(addr));\n        addr.sin_family = AF_INET;\n        addr.sin_addr.s_addr = INADDR_ANY;\n        addr.sin_port = htons(iPort);\n\n        if (bind(m_iSockFD, (struct sockaddr*)&addr, sizeof(addr)) == -1) {\n            close(m_iSockFD);\n            return -1;\n        }\n\n        return 0;\n    }\n\n    void Start() {\n        if (pthread_create(&m_threadID, nullptr, &RunThread, this) != 0) {\n            std::cerr << \"Failed to create thread\" << std::endl;\n        }\n        m_bIsStarted = true;\n    }\n};\n```",
      "```cpp\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#include <pthread.h>\n#include <iostream>\n\nclass DFNetWork {\npublic:\n    void ProcessMessage(const std::string& message) {}\n};\n\nclass UDPRecv {\nprivate:\n    DFNetWork* m_poDFNetWork;\n    int m_iSockFD;\n    bool m_bIsEnd;\n    bool m_bIsStarted;\n    pthread_t m_threadID;\n\n    void* RunThread(void* arg) {\n        UDPRecv* self = static_cast<UDPRecv*>(arg);\n        struct sockaddr_in si_other;\n        int slen = sizeof(si_other);\n        char buf[1024];\n        while (!self->m_bIsEnd) {\n            int recv_len = recvfrom(self->m_iSockFD, buf, sizeof(buf), 0, (struct sockaddr*)&si_other, &slen);\n            if (recv_len > 0) {\n                self->m_poDFNetWork->ProcessMessage(std::string(buf, recv_len));\n            }\n        }\n        return nullptr;\n    }\n\npublic:\n    UDPRecv(DFNetWork* poDFNetWork) : m_poDFNetWork(poDFNetWork), m_iSockFD(-1), m_bIsEnd(false), m_bIsStarted(false) {}\n\n    ~UDPRecv() {\n        if (m_iSockFD != -1) {\n            close(m_iSockFD);\n        }\n    }\n\n    void Stop() {\n        m_bIsEnd = true;\n        pthread_join(m_threadID, nullptr);\n    }\n\n    int Init(int iPort) {\n        m_iSockFD = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);\n        if (m_iSockFD == -1) {\n            return -1;\n        }\n\n        sockaddr_in si_me;\n        si_me.sin_family = AF_INET;\n        si_me.sin_port = htons(iPort);\n        si_me.sin_addr.s_addr = htonl(INADDR_ANY);\n\n        if (bind(m_iSockFD, (struct sockaddr*)&si_me, sizeof(si_me)) == -1) {\n            close(m_iSockFD);\n            return -1;\n        }\n\n        m_bIsStarted = true;\n        pthread_create(&m_threadID, nullptr, RunThread, this);\n        return 0;\n    }\n\n    void run() {\n        if (m_bIsStarted) {\n            pthread_join(m_threadID, nullptr);\n        }\n    }\n};\n```",
      "```cpp\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#include <pthread.h>\n#include <iostream>\n\nclass DFNetWork {\npublic:\n    void ProcessMessage(const std::string& message) {}\n};\n\nclass UDPRecv {\nprivate:\n    DFNetWork* m_poDFNetWork;\n    int m_iSockFD;\n    bool m_bIsEnd;\n    bool m_bIsStarted;\n    pthread_t m_threadID;\n\n    void* RunThread(void* arg) {\n        UDPRecv* self = static_cast<UDPRecv*>(arg);\n        struct sockaddr_in si_other;\n        int slen = sizeof(si_other);\n        char buffer[1024];\n        while (!self->m_bIsEnd) {\n            int recv_len = recvfrom(self->m_iSockFD, buffer, sizeof(buffer), 0, (struct sockaddr*)&si_other, (socklen_t*)&slen);\n            if (recv_len > 0) {\n                self->m_poDFNetWork->ProcessMessage(buffer);\n            }\n        }\n        return nullptr;\n    }\n\npublic:\n    UDPRecv(DFNetWork* poDFNetWork) : m_poDFNetWork(poDFNetWork), m_iSockFD(-1), m_bIsEnd(false), m_bIsStarted(false) {}\n\n    ~UDPRecv() {\n        if (m_iSockFD != -1) {\n            close(m_iSockFD);\n        }\n    }\n\n    void Stop() {\n        m_bIsEnd = true;\n        if (pthread_join(m_threadID, nullptr) != 0) {\n            std::cerr << \"Failed to join thread\" << std::endl;\n        }\n    }\n\n    int Init(int iPort) {\n        m_iSockFD = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);\n        if (m_iSockFD == -1) {\n            return -1;\n        }\n\n        sockaddr_in si_me;\n        memset((char*)&si_me, 0, sizeof(si_me));\n        si_me.sin_family = AF_INET;\n        si_me.sin_port = htons(iPort);\n        si_me.sin_addr.s_addr = htonl(INADDR_ANY);\n\n        if (bind(m_iSockFD, (struct sockaddr*)&si_me, sizeof(si_me)) == -1) {\n            close(m_iSockFD);\n            return -1;\n        }\n\n        m_bIsStarted = true;\n        if (pthread_create(&m_threadID, nullptr, &RunThread, this) != 0) {\n            close(m_iSockFD);\n            return -1;\n        }\n        return 0;\n    }\n\n    void run() {\n        // This method is called within the thread created by Init\n    }\n};\n```",
      "```cpp\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#include <pthread.h>\n#include <iostream>\n\nclass DFNetWork {\npublic:\n    void ProcessMessage(const std::string& message) {}\n};\n\nclass UDPRecv {\nprivate:\n    DFNetWork* m_poDFNetWork;\n    int m_iSockFD;\n    bool m_bIsEnd;\n    bool m_bIsStarted;\n    pthread_t m_threadID;\n\n    void* RunThread(void* arg) {\n        UDPRecv* recv = static_cast<UDPRecv*>(arg);\n        struct sockaddr_in addr;\n        socklen_t addr_len = sizeof(addr);\n        char buffer[1024];\n        int recv_len;\n\n        while (!recv->m_bIsEnd) {\n            recv_len = recvfrom(recv->m_iSockFD, buffer, sizeof(buffer), 0, (struct sockaddr*)&addr, &addr_len);\n            if (recv_len > 0) {\n                recv->m_poDFNetWork->ProcessMessage(std::string(buffer, recv_len));\n            }\n        }\n        return nullptr;\n    }\n\npublic:\n    UDPRecv(DFNetWork* poDFNetWork) : m_poDFNetWork(poDFNetWork), m_iSockFD(-1), m_bIsEnd(false), m_bIsStarted(false) {}\n\n    ~UDPRecv() {\n        if (m_iSockFD != -1) {\n            close(m_iSockFD);\n        }\n    }\n\n    void Stop() {\n        m_bIsEnd = true;\n        if (pthread_join(m_threadID, nullptr) != 0) {\n            std::cerr << \"Failed to join thread\" << std::endl;\n        }\n    }\n\n    int Init(int iPort) {\n        m_iSockFD = socket(AF_INET, SOCK_DGRAM, 0);\n        if (m_iSockFD == -1) {\n            return -1;\n        }\n\n        memset(&addr, 0, sizeof(addr));\n        addr.sin_family = AF_INET;\n        addr.sin_addr.s_addr = INADDR_ANY;\n        addr.sin_port = htons(iPort);\n\n        if (bind(m_iSockFD, (struct sockaddr*)&addr, sizeof(addr)) == -1) {\n            close(m_iSockFD);\n            return -1;\n        }\n\n        m_bIsStarted = true;\n        if (pthread_create(&m_threadID, nullptr, &RunThread, this) != 0) {\n            close(m_iSockFD);\n            return -1;\n        }\n        return 0;\n    }\n\n    void run() {\n        // This method is just a placeholder to comply with the class description.\n        // The actual running is done in the separate thread started by Init.\n    }\n};\n```",
      "```cpp\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#include <pthread.h>\n#include <iostream>\n\nclass DFNetWork {\npublic:\n    void ProcessMessage(const std::string& message) {}\n};\n\nclass UDPRecv {\nprivate:\n    DFNetWork* m_poDFNetWork;\n    int m_iSockFD;\n    bool m_bIsEnd;\n    bool m_bIsStarted;\n    pthread_t m_thread;\n\n    void* RunThread(void* arg) {\n        UDPRecv* recv = static_cast<UDPRecv*>(arg);\n        struct sockaddr_in addr;\n        char buffer[1024];\n        socklen_t addr_len = sizeof(addr);\n\n        while (!recv->m_bIsEnd) {\n            int n = recvfrom(recv->m_iSockFD, buffer, sizeof(buffer), 0, (struct sockaddr*)&addr, &addr_len);\n            if (n > 0) {\n                recv->m_poDFNetWork->ProcessMessage(buffer);\n            }\n        }\n        return nullptr;\n    }\n\npublic:\n    UDPRecv(DFNetWork* poDFNetWork) : m_poDFNetWork(poDFNetWork), m_iSockFD(-1), m_bIsEnd(false), m_bIsStarted(false) {}\n\n    ~UDPRecv() {\n        if (m_iSockFD != -1) {\n            close(m_iSockFD);\n        }\n    }\n\n    void Stop() {\n        m_bIsEnd = true;\n        pthread_join(m_thread, nullptr);\n        close(m_iSockFD);\n        m_iSockFD = -1;\n    }\n\n    int Init(int iPort) {\n        m_iSockFD = socket(AF_INET, SOCK_DGRAM, 0);\n        if (m_iSockFD == -1) {\n            return -1;\n        }\n\n        memset(&addr, 0, sizeof(addr));\n        addr.sin_family = AF_INET;\n        addr.sin_addr.s_addr = INADDR_ANY;\n        addr.sin_port = htons(iPort);\n\n        if (bind(m_iSockFD, (struct sockaddr*)&addr, sizeof(addr)) == -1) {\n            close(m_iSockFD);\n            m_iSockFD = -1;\n            return -1;\n        }\n\n        m_bIsStarted = true;\n        if (pthread_create(&m_thread, nullptr, &RunThread, this) != 0) {\n            close(m_iSockFD);\n            m_iSockFD = -1;\n            return -1;\n        }\n        return 0;\n    }\n\n    void run() {\n        if (m_bIsStarted) {\n            pthread_join(m_thread, nullptr);\n            m_bIsStarted = false;\n        }\n    }\n};\n```",
      "```cpp\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#include <pthread.h>\n#include <iostream>\n\nclass DFNetWork {\npublic:\n    void ProcessMessage(const std::string& message) {}\n};\n\nclass UDPRecv {\nprivate:\n    DFNetWork* m_poDFNetWork;\n    int m_iSockFD;\n    bool m_bIsEnd;\n    bool m_bIsStarted;\n    pthread_t m_threadID;\n\n    void* RunThread(void* arg) {\n        UDPRecv* recv = static_cast<UDPRecv*>(arg);\n        struct sockaddr_in si_other;\n        int slen = sizeof(si_other);\n        char buf[1024];\n        int recv_len;\n\n        while (!recv->m_bIsEnd) {\n            recv_len = recvfrom(recv->m_iSockFD, buf, sizeof(buf), 0, (struct sockaddr*)&si_other, (socklen_t*)&slen);\n            if (recv_len > 0) {\n                recv->m_poDFNetWork->ProcessMessage(std::string(buf, recv_len));\n            }\n        }\n        return nullptr;\n    }\n\npublic:\n    UDPRecv(DFNetWork* poDFNetWork) : m_poDFNetWork(poDFNetWork), m_iSockFD(-1), m_bIsEnd(false), m_bIsStarted(false) {}\n\n    ~UDPRecv() {\n        if (m_iSockFD != -1) {\n            close(m_iSockFD);\n        }\n    }\n\n    void Stop() {\n        m_bIsEnd = true;\n        if (pthread_join(m_threadID, nullptr) != 0) {\n            std::cerr << \"Failed to join thread\" << std::endl;\n        }\n    }\n\n    int Init(int iPort) {\n        m_iSockFD = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP);\n        if (m_iSockFD == -1) {\n            return -1;\n        }\n\n        sockaddr_in si_me;\n        si_me.sin_family = AF_INET;\n        si_me.sin_port = htons(iPort);\n        si_me.sin_addr.s_addr = htonl(INADDR_ANY);\n\n        if (bind(m_iSockFD, (struct sockaddr*)&si_me, sizeof(si_me)) == -1) {\n            close(m_iSockFD);\n            return -1;\n        }\n\n        m_bIsStarted = true;\n        if (pthread_create(&m_threadID, nullptr, &RunThread, this) != 0) {\n            close(m_iSockFD);\n            return -1;\n        }\n        return 0;\n    }\n\n    void run() {\n        if (!m_bIsStarted) {\n            if (Init(12345) == -1) {\n                std::cerr << \"Failed to initialize UDP receiver\" << std::endl;\n                return;\n            }\n        }\n    }\n};\n```",
      "```cpp\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#include <pthread.h>\n#include <iostream>\n\nclass DFNetWork {\npublic:\n    virtual void ProcessMessage(const std::string& message) = 0;\n};\n\nclass UDPRecv {\nprivate:\n    DFNetWork* m_poDFNetWork;\n    int m_iSockFD;\n    bool m_bIsEnd;\n    bool m_bIsStarted;\n    pthread_t m_thread;\n\n    void* RunThread(void* arg) {\n        UDPRecv* self = static_cast<UDPRecv*>(arg);\n        struct sockaddr_in addr;\n        char buffer[1024];\n        socklen_t addr_len = sizeof(addr);\n        while (!self->m_bIsEnd) {\n            ssize_t bytes = recvfrom(self->m_iSockFD, buffer, sizeof(buffer), 0, (struct sockaddr*)&addr, &addr_len);\n            if (bytes > 0) {\n                self->m_poDFNetWork->ProcessMessage(std::string(buffer, bytes));\n            }\n        }\n        return nullptr;\n    }\n\npublic:\n    UDPRecv(DFNetWork* poDFNetWork) : m_poDFNetWork(poDFNetWork), m_iSockFD(-1), m_bIsEnd(false), m_bIsStarted(false) {}\n\n    ~UDPRecv() {\n        if (m_iSockFD != -1) {\n            close(m_iSockFD);\n        }\n    }\n\n    void Stop() {\n        m_bIsEnd = true;\n        pthread_join(m_thread, nullptr);\n    }\n\n    int Init(int iPort) {\n        m_iSockFD = socket(AF_INET, SOCK_DGRAM, 0);\n        if (m_iSockFD == -1) {\n            return -1;\n        }\n        memset(&addr, 0, sizeof(addr));\n        addr.sin_family = AF_INET;\n        addr.sin_addr.s_addr = htonl(INADDR_ANY);\n        addr.sin_port = htons(iPort);\n        if (bind(m_iSockFD, (struct sockaddr*)&addr, sizeof(addr)) == -1) {\n            close(m_iSockFD);\n            m_iSockFD = -1;\n            return -1;\n        }\n        return 0;\n    }\n\n    void Start() {\n        if (pthread_create(&m_thread, nullptr, &RunThread, this) != 0) {\n            std::cerr << \"Failed to create thread\" << std::endl;\n            return;\n        }\n        m_bIsStarted = true;\n    }\n};\n```"
    ],
    "match_count": 3,
    "pass@3": 0.7083333333333333,
    "pass@5": 0.9166666666666666
  },
  {
    "Task_id": 28,
    "Instruction": "Task Description: Create a UDP server class using Boost.Asio that asynchronously receives datagrams and sends responses.\n\nClass Description: The udp_server class implements a UDP server that listens for incoming datagrams on a specified port and responds with a daytime string. It uses Boost.Asio for asynchronous network operations.\n\nAttributes:\n- socket_: [boost::asio::ip::udp::socket] - The UDP socket used for communication\n- remote_endpoint_: [boost::asio::ip::udp::endpoint] - Stores the endpoint of the last received message\n- recv_buffer_: [std::array<char, 1>] - Buffer for receiving incoming datagrams\n\nMethods:\n- udp_server([boost::asio::io_context&] io_context) -> [void] - Constructor that initializes the UDP socket and starts listening\n- start_receive() -> [void] - Begins asynchronous reception of UDP datagrams\n- handle_receive([const boost::system::error_code&] error) -> [void] - Callback for handling received datagrams and sending responses\n- handle_send([std::shared_ptr<std::string>] message) -> [void] - Callback for handling completed send operations",
    "Canonical_solution": "#include <boost/asio.hpp>\n#include <memory>\n#include <string>\n#include <array>\nusing boost::asio::ip::udp;\n\nclass udp_server\n{\npublic:\n  udp_server(boost::asio::io_context& io_context)\n    : socket_(io_context, udp::endpoint(udp::v4(), 13))\n  {\n    start_receive();\n  }\n\nprivate:\n  void start_receive()\n  {\n    socket_.async_receive_from(\n        boost::asio::buffer(recv_buffer_), remote_endpoint_,\n        std::bind(&udp_server::handle_receive, this,\n          boost::asio::placeholders::error));\n  }\n\n  void handle_receive(const boost::system::error_code& error)\n  {\n    if (!error)\n    {\n      std::shared_ptr<std::string> message(\n          new std::string(make_daytime_string()));\n\n      socket_.async_send_to(boost::asio::buffer(*message), remote_endpoint_,\n          std::bind(&udp_server::handle_send, this, message));\n\n      start_receive();\n    }\n  }\n\n  void handle_send(std::shared_ptr<std::string> /*message*/)\n  {\n  }\n\n  udp::socket socket_;\n  udp::endpoint remote_endpoint_;\n  std::array<char, 1> recv_buffer_;\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 153,
    "matched_results": [
      "```cpp\n#include <boost/asio.hpp>\n#include <array>\n#include <memory>\n#include <string>\n\nclass udp_server {\npublic:\n    udp_server(boost::asio::io_context& io_context) : socket_(io_context), remote_endpoint_(boost::asio::ip::udp::v4()) {\n        socket_.open(boost::asio::ip::udp::v4());\n        socket_.bind(boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), port_));\n        start_receive();\n    }\n\nprivate:\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint remote_endpoint_;\n    std::array<char, 1> recv_buffer_;\n    unsigned short port_ = 12345;\n\n    void start_receive() {\n        socket_.async_receive_from(boost::asio::buffer(recv_buffer_), remote_endpoint_, &handle_receive);\n    }\n\n    void handle_receive(const boost::system::error_code& error) {\n        if (!error) {\n            std::string message = \"Daytime string: \" + boost::posix_time::to_simple_string(boost::posix_time::second_clock::local_time());\n            std::shared_ptr<std::string> send_msg(std::make_shared<std::string>(message));\n            handle_send(send_msg);\n        }\n        start_receive();\n    }\n\n    void handle_send(std::shared_ptr<std::string> message) {\n        socket_.async_send_to(boost::asio::buffer(*message), remote_endpoint_, &handle_send);\n    }\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <array>\n#include <memory>\n#include <string>\n\nclass udp_server {\npublic:\n    udp_server(boost::asio::io_context& io_context)\n        : socket_(io_context), remote_endpoint_(boost::asio::ip::udp::endpoint::unknown()) {\n        socket_.open(boost::asio::ip::udp::v4());\n        socket_.bind(boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), port_));\n        start_receive();\n    }\n\nprivate:\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint remote_endpoint_;\n    std::array<char, 1> recv_buffer_;\n    unsigned short port_;\n\n    void start_receive() {\n        socket_.async_receive_from(boost::asio::buffer(recv_buffer_), remote_endpoint_,\n            [this](const boost::system::error_code& error, std::size_t bytes_transferred) {\n                handle_receive(error, bytes_transferred);\n            });\n    }\n\n    void handle_receive(const boost::system::error_code& error, std::size_t bytes_transferred) {\n        if (!error) {\n            std::string message(recv_buffer_.data(), bytes_transferred);\n            std::shared_ptr<std::string> response(new std::string(get_daytime_string()));\n            handle_send(response);\n        }\n    }\n\n    void handle_send(std::shared_ptr<std::string> message) {\n        socket_.async_send_to(boost::asio::buffer(*message), remote_endpoint_,\n            [this, message](const boost::system::error_code& error, std::size_t /*bytes_transferred*/) {\n                if (!error) {\n                    start_receive();\n                }\n            });\n    }\n\n    std::string get_daytime_string() {\n        // Implementation to get the current daytime string\n        return \"Daytime string\";\n    }\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <array>\n#include <memory>\n#include <string>\n\nclass udp_server {\npublic:\n    udp_server(boost::asio::io_context& io_context) : socket_(io_context), remote_endpoint_(boost::asio::ip::udp::v4()) {\n        socket_.open(boost::asio::ip::udp::v4());\n        socket_.bind(boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), port_));\n        start_receive();\n    }\n\nprivate:\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint remote_endpoint_;\n    std::array<char, 1> recv_buffer_;\n    unsigned short port_ = 12345;\n\n    void start_receive() {\n        socket_.async_receive_from(boost::asio::buffer(recv_buffer_), remote_endpoint_, &handle_receive);\n    }\n\n    void handle_receive(const boost::system::error_code& error) {\n        if (!error) {\n            std::string message = \"Daytime string: \" + boost::asio::net::date_time::system_time(socket_.local_endpoint().time_to_system_time()).format(\"%Y-%m-%d %H:%M:%S\");\n            std::shared_ptr<std::string> response(new std::string(message));\n            handle_send(response);\n        }\n        start_receive();\n    }\n\n    void handle_send(std::shared_ptr<std::string> message) {\n        socket_.async_send_to(boost::asio::buffer(*message), remote_endpoint_, &handle_send);\n    }\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <array>\n#include <memory>\n#include <string>\n\nclass udp_server {\npublic:\n    udp_server(boost::asio::io_context& io_context) : socket_(io_context), remote_endpoint_(boost::asio::ip::udp::v4()) {\n        socket_.open(boost::asio::ip::udp::v4());\n        socket_.bind(boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), port_));\n        start_receive();\n    }\n\nprivate:\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint remote_endpoint_;\n    std::array<char, 1> recv_buffer_;\n    unsigned short port_ = 12345;\n\n    void start_receive() {\n        socket_.async_receive_from(boost::asio::buffer(recv_buffer_), remote_endpoint_, &handle_receive);\n    }\n\n    void handle_receive(const boost::system::error_code& error) {\n        if (!error) {\n            std::string message = \"Daytime string\";\n            boost::asio::async_send_to(socket_, boost::asio::buffer(message), remote_endpoint_, &handle_send);\n        }\n        start_receive();\n    }\n\n    void handle_send(std::shared_ptr<std::string> message) {\n        // Handle completed send operation if needed\n    }\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <array>\n#include <memory>\n#include <string>\n\nclass udp_server {\npublic:\n    udp_server(boost::asio::io_context& io_context) : socket_(io_context), remote_endpoint_(boost::asio::ip::udp::v4()) {\n        socket_.open(boost::asio::ip::udp::v4());\n        socket_.bind(boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), port_));\n        start_receive();\n    }\n\nprivate:\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint remote_endpoint_;\n    std::array<char, 1> recv_buffer_;\n    unsigned short port_ = 12345;\n\n    void start_receive() {\n        socket_.async_receive_from(boost::asio::buffer(recv_buffer_), remote_endpoint_, &handle_receive);\n    }\n\n    void handle_receive(const boost::system::error_code& error) {\n        if (!error) {\n            std::string message = \"Daytime string: \" + boost::asio::socket_base::to_string(std::time(nullptr));\n            std::shared_ptr<std::string> response(message);\n            handle_send(response);\n        }\n        start_receive();\n    }\n\n    void handle_send(std::shared_ptr<std::string> message) {\n        socket_.async_send_to(boost::asio::buffer(*message), remote_endpoint_, &handle_send);\n    }\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <array>\n#include <memory>\n#include <string>\n\nclass udp_server {\npublic:\n    udp_server(boost::asio::io_context& io_context) : socket_(io_context), remote_endpoint_(boost::asio::ip::udp::v4()) {\n        socket_.open(boost::asio::ip::udp::v4());\n        socket_.bind(boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), port_));\n        start_receive();\n    }\n\nprivate:\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint remote_endpoint_;\n    std::array<char, 1> recv_buffer_;\n    unsigned short port_ = 12345;\n\n    void start_receive() {\n        socket_.async_receive_from(boost::asio::buffer(recv_buffer_), remote_endpoint_, &handle_receive);\n    }\n\n    void handle_receive(const boost::system::error_code& error) {\n        if (!error) {\n            std::string message = \"Daytime string\";\n            boost::asio::async_send_to(socket_, boost::asio::buffer(message), remote_endpoint_, &handle_send);\n        }\n        start_receive();\n    }\n\n    void handle_send(std::shared_ptr<std::string> message) {\n        // Handle send completion if needed\n    }\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <array>\n#include <memory>\n#include <string>\n\nclass udp_server {\npublic:\n    udp_server(boost::asio::io_context& io_context) : socket_(io_context), remote_endpoint_(boost::asio::ip::udp::v4()) {\n        socket_.open(boost::asio::ip::udp::v4());\n        socket_.bind(boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), port_));\n        start_receive();\n    }\n\nprivate:\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint remote_endpoint_;\n    std::array<char, 1> recv_buffer_;\n    unsigned short port_ = 12345;\n\n    void start_receive() {\n        socket_.async_receive_from(boost::asio::buffer(recv_buffer_), remote_endpoint_, &handle_receive);\n    }\n\n    void handle_receive(const boost::system::error_code& error) {\n        if (!error) {\n            std::string message = \"Daytime string\";\n            std::shared_ptr<std::string> response(new std::string(message));\n            handle_send(response);\n        }\n        start_receive();\n    }\n\n    void handle_send(std::shared_ptr<std::string> message) {\n        socket_.async_send_to(boost::asio::buffer(*message), remote_endpoint_, &handle_send);\n    }\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <array>\n#include <memory>\n#include <string>\n\nclass udp_server {\npublic:\n    udp_server(boost::asio::io_context& io_context)\n        : socket_(io_context), remote_endpoint_(boost::asio::ip::udp::endpoint::unknown()) {\n        start_receive();\n    }\n\nprivate:\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint remote_endpoint_;\n    std::array<char, 1> recv_buffer_;\n\n    void start_receive() {\n        socket_.async_receive_from(boost::asio::buffer(recv_buffer_), remote_endpoint_,\n                                   std::bind(&udp_server::handle_receive, this,\n                                             std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void handle_receive(const boost::system::error_code& error, std::size_t bytes_transferred) {\n        if (!error) {\n            std::string message(recv_buffer_.data(), bytes_transferred);\n            std::shared_ptr<std::string> response(new std::string(\"Daytime: \" + boost::posix_time::to_simple_string(boost::posix_time::second_clock::local_time())));\n            handle_send(response);\n        }\n        start_receive();\n    }\n\n    void handle_send(std::shared_ptr<std::string> message) {\n        socket_.async_send_to(boost::asio::buffer(*message), remote_endpoint_,\n                              std::bind(&udp_server::handle_send_complete, this, std::placeholders::_1));\n    }\n\n    void handle_send_complete(const boost::system::error_code&) {\n        // Send complete, no further action needed here\n    }\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <array>\n#include <memory>\n#include <string>\n\nclass udp_server {\npublic:\n    udp_server(boost::asio::io_context& io_context) : socket_(io_context), remote_endpoint_(boost::asio::ip::udp::endpoint::unknown()) {\n        socket_.open(boost::asio::ip::udp::v4());\n        socket_.bind(boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), port_));\n        start_receive();\n    }\n\nprivate:\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint remote_endpoint_;\n    std::array<char, 1> recv_buffer_;\n    unsigned short port_ = 12345;\n\n    void start_receive() {\n        socket_.async_receive_from(boost::asio::buffer(recv_buffer_), remote_endpoint_, &handle_receive);\n    }\n\n    void handle_receive(const boost::system::error_code& error) {\n        if (!error) {\n            std::string message = \"Daytime string\";\n            std::shared_ptr<std::string> response(message);\n            handle_send(response);\n        }\n        start_receive();\n    }\n\n    void handle_send(std::shared_ptr<std::string> message) {\n        socket_.async_send_to(boost::asio::buffer(*message), remote_endpoint_, &handle_send);\n    }\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <array>\n#include <memory>\n#include <string>\n\nnamespace boost {\nnamespace asio {\nnamespace ip {\nnamespace udp {\n\nclass udp_server {\npublic:\n    udp_server(io_context& io_context, const endpoint_type& local_endpoint)\n        : socket_(io_context), remote_endpoint_(local_endpoint), recv_buffer_(1) {\n        socket_.open(local_endpoint.protocol());\n        socket_.bind(local_endpoint);\n        start_receive();\n    }\n\n    void start_receive() {\n        socket_.async_receive_from(boost::asio::buffer(recv_buffer_), remote_endpoint_, &udp_server::handle_receive, this);\n    }\n\n    void handle_receive(const error_code& error) {\n        if (!error) {\n            std::string message = \"Daytime \" + boost::asio::local_time::now().format(\"%F %T\");\n            std::shared_ptr<std::string> response(new std::string(message));\n            socket_.async_send_to(boost::asio::buffer(*response), remote_endpoint_, &udp_server::handle_send, response);\n        }\n        start_receive();\n    }\n\n    void handle_send(std::shared_ptr<std::string> message) {\n        // No need to implement as it's a callback for completed send operations\n    }\n\nprivate:\n    boost::asio::ip::udp::socket socket_;\n    endpoint_type remote_endpoint_;\n    std::array<char, 1> recv_buffer_;\n};\n\n} // namespace udp\n} // namespace ip\n} // namespace asio\n} // namespace boost\n```"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 29,
    "Instruction": "Task Description: Implement a UDP server class using Boost.Asio that listens for incoming datagrams and responds with the current daytime string.\n\nClass Description: The `udp_server` class implements a UDP server that listens on a specified port (13 in this case) for incoming datagrams. When a datagram is received, it responds with the current daytime string. The class uses asynchronous operations for receiving and sending data.\n\nAttributes:\n- socket_: [boost::asio::ip::udp::socket] - The UDP socket used for communication\n- remote_endpoint_: [boost::asio::ip::udp::endpoint] - Stores the endpoint of the last received datagram\n- recv_buffer_: [std::array<char, 1>] - Buffer for storing received data\n\nMethods:\n- Constructor: [udp_server]([boost::asio::io_context& io_context]) -> [void] - Initializes the UDP socket and starts listening for incoming datagrams\n- start_receive: [start_receive]() -> [void] - Begins an asynchronous receive operation on the socket\n- handle_receive: [handle_receive]([const boost::system::error_code& error, std::size_t bytes_transferred]) -> [void] - Handles the completion of a receive operation and initiates a response\n- handle_send: [handle_send]([std::shared_ptr<std::string> message, const boost::system::error_code& error, std::size_t bytes_transferred]) -> [void] - Handles the completion of a send operation\n- make_daytime_string: [make_daytime_string]() -> [std::string] - Generates and returns the current daytime string",
    "Canonical_solution": "#include <boost/asio.hpp>\n#include <memory>\n#include <string>\n#include <array>\n\nusing boost::asio::ip::udp;\n\nclass udp_server\n{\npublic:\n  udp_server(boost::asio::io_context& io_context)\n    : socket_(io_context, udp::endpoint(udp::v4(), 13))\n  {\n    start_receive();\n  }\n\nprivate:\n  void start_receive()\n  {\n    socket_.async_receive_from(\n        boost::asio::buffer(recv_buffer_), remote_endpoint_,\n        std::bind(&udp_server::handle_receive, this,\n          boost::asio::placeholders::error,\n          boost::asio::placeholders::bytes_transferred));\n  }\n\n  void handle_receive(const boost::system::error_code& error,\n      std::size_t /*bytes_transferred*/)\n  {\n    if (!error)\n    {\n      std::shared_ptr<std::string> message(\n          new std::string(make_daytime_string()));\n\n      socket_.async_send_to(boost::asio::buffer(*message), remote_endpoint_,\n          std::bind(&udp_server::handle_send, this, message,\n            boost::asio::placeholders::error,\n            boost::asio::placeholders::bytes_transferred));\n\n      start_receive();\n    }\n  }\n\n  void handle_send(std::shared_ptr<std::string> /*message*/,\n      const boost::system::error_code& /*error*/,\n      std::size_t /*bytes_transferred*/)\n  {\n  }\n\n  std::string make_daytime_string()\n  {\n    using namespace std;\n    time_t now = time(0);\n    return ctime(&now);\n  }\n\n  udp::socket socket_;\n  udp::endpoint remote_endpoint_;\n  std::array<char, 1> recv_buffer_;\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 153,
    "matched_results": [
      "```cpp\n#include <boost/asio.hpp>\n#include <array>\n#include <string>\n#include <ctime>\n\nclass udp_server {\npublic:\n    udp_server(boost::asio::io_context& io_context) : socket_(io_context), remote_endpoint_(boost::asio::ip::udp::v4()) {\n        boost::asio::ip::udp::endpoint local_endpoint(boost::asio::ip::udp::v4(), 13);\n        socket_.open(local_endpoint.protocol());\n        socket_.bind(local_endpoint);\n        start_receive();\n    }\n\nprivate:\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint remote_endpoint_;\n    std::array<char, 1> recv_buffer_;\n\n    void start_receive() {\n        socket_.async_receive_from(boost::asio::buffer(recv_buffer_), remote_endpoint_, &handle_receive);\n    }\n\n    void handle_receive(const boost::system::error_code& error, std::size_t bytes_transferred) {\n        if (!error) {\n            std::string message = make_daytime_string();\n            boost::asio::async_send_to(socket_, boost::asio::buffer(message), remote_endpoint_, &handle_send);\n        }\n        start_receive();\n    }\n\n    void handle_send(std::shared_ptr<std::string> message, const boost::system::error_code& error, std::size_t bytes_transferred) {\n        if (!error) {\n            // Message sent successfully\n        }\n    }\n\n    std::string make_daytime_string() {\n        std::time_t now = std::time(nullptr);\n        return std::ctime(&now);\n    }\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <array>\n#include <string>\n#include <ctime>\n\nclass udp_server {\npublic:\n    udp_server(boost::asio::io_context& io_context) : socket_(io_context), remote_endpoint_(boost::asio::ip::udp::v4()) {\n        boost::asio::ip::udp::endpoint local_endpoint(boost::asio::ip::udp::v4(), 13);\n        socket_.open(local_endpoint.protocol());\n        socket_.bind(local_endpoint);\n        start_receive();\n    }\n\nprivate:\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint remote_endpoint_;\n    std::array<char, 1> recv_buffer_;\n\n    void start_receive() {\n        socket_.async_receive_from(boost::asio::buffer(recv_buffer_), remote_endpoint_, &handle_receive);\n    }\n\n    void handle_receive(const boost::system::error_code& error, std::size_t bytes_transferred) {\n        if (!error) {\n            std::string message = make_daytime_string();\n            boost::asio::async_send_to(socket_, boost::asio::buffer(message), remote_endpoint_, &handle_send);\n        }\n        start_receive();\n    }\n\n    void handle_send(std::shared_ptr<std::string> message, const boost::system::error_code& error, std::size_t bytes_transferred) {\n        if (!error) {\n            // Message sent successfully\n        }\n    }\n\n    std::string make_daytime_string() {\n        std::time_t now = std::time(nullptr);\n        return std::ctime(&now);\n    }\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <array>\n#include <string>\n#include <ctime>\n\nclass udp_server {\npublic:\n    udp_server(boost::asio::io_context& io_context) : socket_(io_context), remote_endpoint_(boost::asio::ip::udp::v4()) {\n        boost::asio::ip::udp::endpoint local_endpoint(boost::asio::ip::udp::v4(), 13);\n        socket_.open(local_endpoint.protocol());\n        socket_.bind(local_endpoint);\n        start_receive();\n    }\n\nprivate:\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint remote_endpoint_;\n    std::array<char, 1> recv_buffer_;\n\n    void start_receive() {\n        socket_.async_receive_from(boost::asio::buffer(recv_buffer_), remote_endpoint_, &handle_receive);\n    }\n\n    void handle_receive(const boost::system::error_code& error, std::size_t bytes_transferred) {\n        if (!error) {\n            std::string message = make_daytime_string();\n            boost::asio::async_send_to(socket_, boost::asio::buffer(message), remote_endpoint_, &handle_send);\n        }\n        start_receive();\n    }\n\n    void handle_send(std::shared_ptr<std::string> message, const boost::system::error_code& error, std::size_t bytes_transferred) {\n        if (!error) {\n            // Message sent successfully\n        }\n    }\n\n    std::string make_daytime_string() {\n        std::time_t now = std::time(nullptr);\n        return std::ctime(&now);\n    }\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <array>\n#include <string>\n#include <ctime>\n\nclass udp_server {\npublic:\n    udp_server(boost::asio::io_context& io_context) : socket_(io_context), remote_endpoint_(boost::asio::ip::udp::v4()) {\n        boost::asio::ip::udp::endpoint local_endpoint(boost::asio::ip::udp::v4(), 13);\n        socket_.open(local_endpoint.protocol());\n        socket_.bind(local_endpoint);\n        start_receive();\n    }\n\nprivate:\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint remote_endpoint_;\n    std::array<char, 1> recv_buffer_;\n\n    void start_receive() {\n        socket_.async_receive_from(boost::asio::buffer(recv_buffer_), remote_endpoint_, &handle_receive);\n    }\n\n    void handle_receive(const boost::system::error_code& error, std::size_t bytes_transferred) {\n        if (!error) {\n            std::string message = make_daytime_string();\n            boost::asio::async_send_to(socket_, boost::asio::buffer(message), remote_endpoint_, &handle_send);\n        }\n        start_receive();\n    }\n\n    void handle_send(std::shared_ptr<std::string> message, const boost::system::error_code& error, std::size_t bytes_transferred) {\n        if (!error) {\n            // Message sent successfully\n        }\n    }\n\n    std::string make_daytime_string() {\n        std::time_t now = std::time(nullptr);\n        return std::ctime(&now);\n    }\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <array>\n#include <string>\n#include <ctime>\n\nclass udp_server {\npublic:\n    udp_server(boost::asio::io_context& io_context) : socket_(io_context), remote_endpoint_(boost::asio::ip::udp::v4()) {\n        boost::asio::ip::udp::endpoint endpoint(boost::asio::ip::udp::v4(), 13);\n        socket_.open(endpoint.protocol());\n        socket_.bind(endpoint);\n        start_receive();\n    }\n\nprivate:\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint remote_endpoint_;\n    std::array<char, 1> recv_buffer_;\n\n    void start_receive() {\n        socket_.async_receive_from(boost::asio::buffer(recv_buffer_), remote_endpoint_, &handle_receive);\n    }\n\n    void handle_receive(const boost::system::error_code& error, std::size_t bytes_transferred) {\n        if (!error) {\n            std::string message = make_daytime_string();\n            boost::asio::async_send_to(socket_, boost::asio::buffer(message), remote_endpoint_, &handle_send);\n        }\n        start_receive();\n    }\n\n    void handle_send(std::shared_ptr<std::string> message, const boost::system::error_code& error, std::size_t bytes_transferred) {\n        if (!error) {\n            // Message sent successfully\n        }\n    }\n\n    std::string make_daytime_string() {\n        std::time_t now = std::time(nullptr);\n        return std::ctime(&now);\n    }\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <array>\n#include <string>\n#include <ctime>\n\nclass udp_server {\npublic:\n    udp_server(boost::asio::io_context& io_context) : socket_(io_context), remote_endpoint_(boost::asio::ip::udp::v4()) {\n        boost::asio::ip::udp::endpoint local_endpoint(boost::asio::ip::udp::v4(), 13);\n        socket_.open(local_endpoint.protocol());\n        socket_.bind(local_endpoint);\n        start_receive();\n    }\n\nprivate:\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint remote_endpoint_;\n    std::array<char, 1> recv_buffer_;\n\n    void start_receive() {\n        socket_.async_receive_from(boost::asio::buffer(recv_buffer_), remote_endpoint_, &handle_receive);\n    }\n\n    void handle_receive(const boost::system::error_code& error, std::size_t bytes_transferred) {\n        if (!error) {\n            std::string message = make_daytime_string();\n            boost::asio::async_send_to(socket_, boost::asio::buffer(message), remote_endpoint_, &handle_send);\n        }\n        start_receive();\n    }\n\n    void handle_send(std::shared_ptr<std::string> message, const boost::system::error_code& error, std::size_t bytes_transferred) {\n        if (!error) {\n            // Message sent successfully\n        }\n    }\n\n    std::string make_daytime_string() {\n        std::time_t now = std::time(nullptr);\n        return std::ctime(&now);\n    }\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <array>\n#include <string>\n#include <ctime>\n\nclass udp_server {\npublic:\n    udp_server(boost::asio::io_context& io_context) : socket_(io_context), remote_endpoint_(boost::asio::ip::udp::v4()) {\n        boost::asio::ip::udp::endpoint local_endpoint(boost::asio::ip::udp::v4(), 13);\n        socket_.open(local_endpoint.protocol());\n        socket_.bind(local_endpoint);\n        start_receive();\n    }\n\nprivate:\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint remote_endpoint_;\n    std::array<char, 1> recv_buffer_;\n\n    void start_receive() {\n        socket_.async_receive_from(boost::asio::buffer(recv_buffer_), remote_endpoint_, &handle_receive);\n    }\n\n    void handle_receive(const boost::system::error_code& error, std::size_t bytes_transferred) {\n        if (!error) {\n            std::string message = make_daytime_string();\n            boost::asio::async_send_to(socket_, boost::asio::buffer(message), remote_endpoint_, &handle_send);\n        }\n        start_receive();\n    }\n\n    void handle_send(std::shared_ptr<std::string> message, const boost::system::error_code& error, std::size_t bytes_transferred) {\n        if (!error) {\n            // Message sent successfully\n        }\n    }\n\n    std::string make_daytime_string() {\n        std::time_t now = std::time(nullptr);\n        return std::ctime(&now);\n    }\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <array>\n#include <string>\n#include <ctime>\n\nclass udp_server {\npublic:\n    udp_server(boost::asio::io_context& io_context) : socket_(io_context), remote_endpoint_(boost::asio::ip::udp::v4()) {\n        boost::asio::ip::udp::endpoint local_endpoint(boost::asio::ip::udp::v4(), 13);\n        socket_.open(local_endpoint.protocol());\n        socket_.bind(local_endpoint);\n        start_receive();\n    }\n\nprivate:\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint remote_endpoint_;\n    std::array<char, 1> recv_buffer_;\n\n    void start_receive() {\n        socket_.async_receive_from(boost::asio::buffer(recv_buffer_), remote_endpoint_, &handle_receive);\n    }\n\n    void handle_receive(const boost::system::error_code& error, std::size_t bytes_transferred) {\n        if (!error) {\n            std::string message = make_daytime_string();\n            socket_.async_send_to(boost::asio::buffer(message), remote_endpoint_, &handle_send);\n        }\n        start_receive();\n    }\n\n    void handle_send(std::shared_ptr<std::string> message, const boost::system::error_code& error, std::size_t bytes_transferred) {\n        if (!error) {\n            // Message sent successfully\n        }\n    }\n\n    std::string make_daytime_string() {\n        std::time_t now = std::time(nullptr);\n        return std::ctime(&now);\n    }\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <array>\n#include <string>\n#include <ctime>\n\nclass udp_server {\npublic:\n    udp_server(boost::asio::io_context& io_context) : socket_(io_context), remote_endpoint_(boost::asio::ip::udp::v4()) {\n        boost::asio::ip::udp::endpoint local_endpoint(boost::asio::ip::udp::v4(), 13);\n        socket_.open(local_endpoint.protocol());\n        socket_.bind(local_endpoint);\n        start_receive();\n    }\n\nprivate:\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint remote_endpoint_;\n    std::array<char, 1> recv_buffer_;\n\n    void start_receive() {\n        socket_.async_receive_from(boost::asio::buffer(recv_buffer_), remote_endpoint_, &handle_receive);\n    }\n\n    void handle_receive(const boost::system::error_code& error, std::size_t bytes_transferred) {\n        if (!error) {\n            std::string message = make_daytime_string();\n            boost::asio::async_send_to(socket_, boost::asio::buffer(message), remote_endpoint_, &handle_send);\n        }\n        start_receive();\n    }\n\n    void handle_send(std::shared_ptr<std::string> message, const boost::system::error_code& error, std::size_t bytes_transferred) {\n        if (!error) {\n            // Message sent successfully\n        }\n    }\n\n    std::string make_daytime_string() {\n        std::time_t now = std::time(nullptr);\n        return std::ctime(&now);\n    }\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <array>\n#include <string>\n#include <ctime>\n\nclass udp_server {\npublic:\n    udp_server(boost::asio::io_context& io_context) : socket_(io_context), remote_endpoint_(boost::asio::ip::udp::v4()) {\n        boost::asio::ip::udp::endpoint local_endpoint(boost::asio::ip::udp::v4(), 13);\n        socket_.open(local_endpoint.protocol());\n        socket_.bind(local_endpoint);\n        start_receive();\n    }\n\nprivate:\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint remote_endpoint_;\n    std::array<char, 1> recv_buffer_;\n\n    void start_receive() {\n        socket_.async_receive_from(boost::asio::buffer(recv_buffer_), remote_endpoint_, &handle_receive);\n    }\n\n    void handle_receive(const boost::system::error_code& error, std::size_t bytes_transferred) {\n        if (!error) {\n            std::string message = make_daytime_string();\n            socket_.async_send_to(boost::asio::buffer(message), remote_endpoint_, &handle_send);\n        }\n        start_receive();\n    }\n\n    void handle_send(std::shared_ptr<std::string> message, const boost::system::error_code& error, std::size_t bytes_transferred) {\n        // No need to handle send completion explicitly\n    }\n\n    std::string make_daytime_string() {\n        std::time_t now = std::time(nullptr);\n        return std::ctime(&now);\n    }\n};\n```"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 3,
    "Instruction": "Task Description: Create a C++ class that implements HTTP client functionality using libcurl for making HTTP requests to a specified base URL.\n\nClass Description: The HTTPClient class provides a simple interface for making HTTP GET requests to a given base URL. It handles libcurl initialization, request configuration, execution, and cleanup, while providing a method to append endpoints to the base URL and make requests.\n\nAttributes:\nbaseURL: std::string - The base URL to which endpoints will be appended for HTTP requests\n\nMethods:\nmakeRequest: makeRequest(const std::string& endpoint) -> std::string - Makes an HTTP GET request to the base URL plus the specified endpoint, returning the response as a string\nwrite_to_string: write_to_string(void* ptr, size_t size, size_t count, void* stream) -> size_t - Static callback function for libcurl to write response data into a string",
    "Canonical_solution": "#include <curl/curl.h>\n#include <string>\n#include <sstream>\n#include \"json.hpp\"\n\nusing json = nlohmann::json;\n\nclass HTTPClient {\npublic:\n    HTTPClient(const std::string& baseUrl) : baseURL(baseUrl) {}\n\n    std::string makeRequest(const std::string& endpoint) {\n        CURL* curl = curl_easy_init();\n        std::string response;\n\n        if (curl) {\n            std::string URL = baseURL + endpoint;\n            curl_easy_setopt(curl, CURLOPT_URL, URL.c_str());\n            curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, write_to_string);\n            curl_easy_setopt(curl, CURLOPT_WRITEDATA, &response);\n            curl_easy_perform(curl);\n            curl_easy_cleanup(curl);\n        }\n\n        return response;\n    }\n\nprivate:\n    static size_t write_to_string(void* ptr, size_t size, size_t count, void* stream) {\n        ((std::string*)stream)->append((char*)ptr, 0, size*count);\n        return size*count;\n    }\n\n    std::string baseURL;\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 146,
    "matched_results": [
      "```cpp\n#include <iostream>\n#include <string>\n#include <curl/curl.h>\n\nclass HTTPClient {\nprivate:\n    std::string baseURL;\n\npublic:\n    HTTPClient(const std::string& base) : baseURL(base) {}\n\n    std::string makeRequest(const std::string& endpoint) {\n        CURL* curl;\n        CURLcode res;\n        std::string readBuffer;\n\n        curl = curl_easy_init();\n        if(curl) {\n            std::string url = baseURL + endpoint;\n            curl_easy_setopt(curl, CURLOPT_URL, url.c_str());\n            curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, write_to_string);\n            curl_easy_setopt(curl, CURLOPT_WRITEDATA, &readBuffer);\n            res = curl_easy_perform(curl);\n            curl_easy_cleanup(curl);\n        }\n\n        return readBuffer;\n    }\n\n    static size_t write_to_string(void* ptr, size_t size, size_t nmemb, void* stream) {\n        std::string* s = static_cast<std::string*>(stream);\n        size_t realSize = size * nmemb;\n        s->append(static_cast<char*>(ptr), realSize);\n        return realSize;\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <curl/curl.h>\n\nclass HTTPClient {\nprivate:\n    std::string baseURL;\n\npublic:\n    HTTPClient(const std::string& base) : baseURL(base) {}\n\n    std::string makeRequest(const std::string& endpoint) {\n        CURL* curl = curl_easy_init();\n        if (!curl) return \"\";\n\n        std::string url = baseURL + endpoint;\n        std::string response;\n        curl_easy_setopt(curl, CURLOPT_URL, url.c_str());\n        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, write_to_string);\n        curl_easy_setopt(curl, CURLOPT_WRITEDATA, &response);\n        curl_easy_perform(curl);\n        curl_easy_cleanup(curl);\n        return response;\n    }\n\n    static size_t write_to_string(void* ptr, size_t size, size_t count, void* stream) {\n        std::string* response = static_cast<std::string*>(stream);\n        size_t real_size = size * count;\n        response->append(static_cast<char*>(ptr), real_size);\n        return real_size;\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <curl/curl.h>\n\nclass HTTPClient {\nprivate:\n    std::string baseURL;\n\npublic:\n    HTTPClient(const std::string& base) : baseURL(base) {}\n\n    std::string makeRequest(const std::string& endpoint) {\n        CURL* curl = curl_easy_init();\n        if (!curl) return \"\";\n\n        std::string url = baseURL + endpoint;\n        curl_easy_setopt(curl, CURLOPT_URL, url.c_str());\n        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, write_to_string);\n        std::string response;\n        curl_easy_setopt(curl, CURLOPT_WRITEDATA, &response);\n        curl_easy_perform(curl);\n        curl_easy_cleanup(curl);\n        return response;\n    }\n\n    static size_t write_to_string(void* ptr, size_t size, size_t nmemb, void* stream) {\n        std::string* response = static_cast<std::string*>(stream);\n        size_t real_size = size * nmemb;\n        response->append(static_cast<char*>(ptr), real_size);\n        return real_size;\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <curl/curl.h>\n\nclass HTTPClient {\nprivate:\n    std::string baseURL;\n\npublic:\n    HTTPClient(const std::string& base) : baseURL(base) {}\n\n    std::string makeRequest(const std::string& endpoint) {\n        CURL* curl = curl_easy_init();\n        if (!curl) return \"\";\n\n        std::string url = baseURL + endpoint;\n        curl_easy_setopt(curl, CURLOPT_URL, url.c_str());\n        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, write_to_string);\n        std::string response;\n        curl_easy_setopt(curl, CURLOPT_WRITEDATA, &response);\n        curl_easy_perform(curl);\n        curl_easy_cleanup(curl);\n        return response;\n    }\n\n    static size_t write_to_string(void* ptr, size_t size, size_t nmemb, void* stream) {\n        std::string* response = static_cast<std::string*>(stream);\n        size_t real_size = size * nmemb;\n        response->append(static_cast<char*>(ptr), real_size);\n        return real_size;\n    }\n};\n```",
      "```cpp\n#include <curl/curl.h>\n#include <string>\n\nclass HTTPClient {\nprivate:\n    std::string baseURL;\n\npublic:\n    HTTPClient(const std::string& base) : baseURL(base) {}\n\n    std::string makeRequest(const std::string& endpoint) {\n        CURL* curl = curl_easy_init();\n        if (!curl) return \"\";\n\n        std::string response;\n        curl_easy_setopt(curl, CURLOPT_URL, (baseURL + endpoint).c_str());\n        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, write_to_string);\n        curl_easy_setopt(curl, CURLOPT_WRITEDATA, &response);\n        curl_easy_perform(curl);\n        curl_easy_cleanup(curl);\n\n        return response;\n    }\n\n    static size_t write_to_string(void* ptr, size_t size, size_t count, void* stream) {\n        std::string* response = static_cast<std::string*>(stream);\n        size_t total_size = size * count;\n        response->append(static_cast<char*>(ptr), total_size);\n        return total_size;\n    }\n};\n```",
      "```cpp\n#include <curl/curl.h>\n#include <string>\n\nclass HTTPClient {\nprivate:\n    std::string baseURL;\n\npublic:\n    HTTPClient(const std::string& base) : baseURL(base) {}\n\n    std::string makeRequest(const std::string& endpoint) {\n        CURL* curl = curl_easy_init();\n        if (!curl) return \"\";\n\n        std::string response;\n        curl_easy_setopt(curl, CURLOPT_URL, (baseURL + endpoint).c_str());\n        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, write_to_string);\n        curl_easy_setopt(curl, CURLOPT_WRITEDATA, &response);\n        curl_easy_perform(curl);\n        curl_easy_cleanup(curl);\n\n        return response;\n    }\n\n    static size_t write_to_string(void* ptr, size_t size, size_t count, void* stream) {\n        std::string* response = static_cast<std::string*>(stream);\n        size_t real_size = size * count;\n        response->append(static_cast<char*>(ptr), real_size);\n        return real_size;\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <curl/curl.h>\n\nclass HTTPClient {\nprivate:\n    std::string baseURL;\n\npublic:\n    HTTPClient(const std::string& base) : baseURL(base) {}\n\n    std::string makeRequest(const std::string& endpoint) {\n        CURL* curl = curl_easy_init();\n        if (curl) {\n            std::string url = baseURL + endpoint;\n            curl_easy_setopt(curl, CURLOPT_URL, url.c_str());\n            curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, write_to_string);\n            std::string response;\n            curl_easy_setopt(curl, CURLOPT_WRITEDATA, &response);\n            curl_easy_perform(curl);\n            curl_easy_cleanup(curl);\n            return response;\n        }\n        return \"\";\n    }\n\n    static size_t write_to_string(void* ptr, size_t size, size_t count, void* stream) {\n        std::string* response = static_cast<std::string*>(stream);\n        size_t real_size = size * count;\n        response->append(static_cast<char*>(ptr), real_size);\n        return real_size;\n    }\n};\n```",
      "```cpp\n#include <curl/curl.h>\n#include <string>\n\nclass HTTPClient {\nprivate:\n    std::string baseURL;\n\npublic:\n    HTTPClient(const std::string& base) : baseURL(base) {}\n\n    std::string makeRequest(const std::string& endpoint) {\n        CURL* curl = curl_easy_init();\n        if (!curl) return \"\";\n\n        std::string response;\n        curl_easy_setopt(curl, CURLOPT_URL, (baseURL + endpoint).c_str());\n        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, write_to_string);\n        curl_easy_setopt(curl, CURLOPT_WRITEDATA, &response);\n        curl_easy_perform(curl);\n        curl_easy_cleanup(curl);\n\n        return response;\n    }\n\n    static size_t write_to_string(void* ptr, size_t size, size_t count, void* stream) {\n        std::string* response = static_cast<std::string*>(stream);\n        size_t real_size = size * count;\n        response->append(static_cast<char*>(ptr), real_size);\n        return real_size;\n    }\n};\n```",
      "```cpp\n#include <curl/curl.h>\n#include <string>\n\nclass HTTPClient {\nprivate:\n    std::string baseURL;\n\npublic:\n    HTTPClient(const std::string& base) : baseURL(base) {}\n\n    std::string makeRequest(const std::string& endpoint) {\n        CURL* curl = curl_easy_init();\n        if (!curl) return \"\";\n\n        std::string response;\n        curl_easy_setopt(curl, CURLOPT_URL, (baseURL + endpoint).c_str());\n        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, write_to_string);\n        curl_easy_setopt(curl, CURLOPT_WRITEDATA, &response);\n        curl_easy_perform(curl);\n        curl_easy_cleanup(curl);\n        return response;\n    }\n\n    static size_t write_to_string(void* ptr, size_t size, size_t count, void* stream) {\n        std::string* response = static_cast<std::string*>(stream);\n        size_t real_size = size * count;\n        response->append(static_cast<char*>(ptr), real_size);\n        return real_size;\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <curl/curl.h>\n\nclass HTTPClient {\nprivate:\n    std::string baseURL;\n\npublic:\n    HTTPClient(const std::string& base) : baseURL(base) {}\n\n    std::string makeRequest(const std::string& endpoint) {\n        CURL* curl = curl_easy_init();\n        if (!curl) return \"\";\n\n        std::string url = baseURL + endpoint;\n        curl_easy_setopt(curl, CURLOPT_URL, url.c_str());\n        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, write_to_string);\n        std::string response;\n        curl_easy_setopt(curl, CURLOPT_WRITEDATA, &response);\n        curl_easy_perform(curl);\n        curl_easy_cleanup(curl);\n        return response;\n    }\n\n    static size_t write_to_string(void* ptr, size_t size, size_t nmemb, void* stream) {\n        std::string* response = static_cast<std::string*>(stream);\n        size_t real_size = size * nmemb;\n        response->append(static_cast<char*>(ptr), real_size);\n        return real_size;\n    }\n};\n```"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 30,
    "Instruction": "Task Description: Implement a UDP server class using Boost.Asio that can asynchronously receive and send datagrams.\n\nClass Description: The `server` class represents a UDP server that listens on a specified port, receives incoming datagrams asynchronously, and sends responses back to the sender. It utilizes Boost.Asio for asynchronous I/O operations.\n\nAttributes:\n- socket_: [boost::asio::ip::udp::socket] - The UDP socket used for communication\n- sender_endpoint_: [boost::asio::ip::udp::endpoint] - Stores the endpoint of the last sender\n- max_length: [enum] - Maximum size of the receive buffer (1024 bytes)\n- data_: [char[max_length]] - Buffer for storing received data\n\nMethods:\n- server: [constructor](boost::asio::io_context& io_context, short port) -> void - Initializes the UDP socket and starts the receive operation\n- do_receive: [method]() -> void - Asynchronously receives data from clients and triggers do_send if data is received\n- do_send: [method](std::size_t length) -> void - Asynchronously sends the received data back to the sender",
    "Canonical_solution": "#include <boost/asio.hpp>\n#include <boost/system/error_code.hpp>\n\nusing boost::asio::ip::udp;\n\nclass server\n{\npublic:\n  server(boost::asio::io_context& io_context, short port)\n    : socket_(io_context, udp::endpoint(udp::v4(), port))\n  {\n    do_receive();\n  }\n\n  void do_receive()\n  {\n    socket_.async_receive_from(\n        boost::asio::buffer(data_, max_length), sender_endpoint_,\n        [this](boost::system::error_code ec, std::size_t bytes_recvd)\n        {\n          if (!ec && bytes_recvd > 0)\n          {\n            do_send(bytes_recvd);\n          }\n          else\n          {\n            do_receive();\n          }\n        });\n  }\n\n  void do_send(std::size_t length)\n  {\n    socket_.async_send_to(\n        boost::asio::buffer(data_, length), sender_endpoint_,\n        [this](boost::system::error_code /*ec*/, std::size_t /*bytes_sent*/)\n        {\n          do_receive();\n        });\n  }\n\nprivate:\n  udp::socket socket_;\n  udp::endpoint sender_endpoint_;\n  enum { max_length = 1024 };\n  char data_[max_length];\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 153,
    "matched_results": [
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <string>\n\nclass server {\npublic:\n    server(boost::asio::io_context& io_context, short port)\n        : socket_(io_context), max_length_(1024), data_(max_length_) {\n        boost::asio::ip::udp::endpoint endpoint(boost::asio::ip::udp::v4(), port);\n        socket_.open(endpoint.protocol());\n        socket_.bind(endpoint);\n        do_receive();\n    }\n\nprivate:\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint sender_endpoint_;\n    enum { max_length_ = 1024 };\n    char data_[max_length_];\n\n    void do_receive() {\n        socket_.async_receive_from(boost::asio::buffer(data_, max_length_), sender_endpoint_,\n            [this](boost::system::error_code ec, std::size_t length) {\n                if (!ec) {\n                    do_send(length);\n                }\n            });\n    }\n\n    void do_send(std::size_t length) {\n        boost::asio::async_send_to(socket_, boost::asio::buffer(data_, length), sender_endpoint_,\n            [this](boost::system::error_code ec, std::size_t /*length*/) {\n                if (!ec) {\n                    do_receive();\n                }\n            });\n    }\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <string>\n\nclass server {\npublic:\n    server(boost::asio::io_context& io_context, short port)\n        : socket_(io_context), max_length_(1024), data_(max_length_) {\n        boost::asio::ip::udp::endpoint endpoint(boost::asio::ip::udp::v4(), port);\n        socket_.open(endpoint.protocol());\n        socket_.bind(endpoint);\n        do_receive();\n    }\n\nprivate:\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint sender_endpoint_;\n    enum { max_length_ = 1024 };\n    char data_[max_length_];\n\n    void do_receive() {\n        socket_.async_receive_from(boost::asio::buffer(data_, max_length_),\n            sender_endpoint_,\n            [this](boost::system::error_code ec, std::size_t length) {\n                if (!ec) {\n                    do_send(length);\n                }\n            });\n    }\n\n    void do_send(std::size_t length) {\n        boost::asio::async_send_to(socket_, boost::asio::buffer(data_, length),\n            sender_endpoint_,\n            [this](boost::system::error_code ec, std::size_t /*length*/) {\n                if (!ec) {\n                    do_receive();\n                }\n            });\n    }\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <string>\n\nclass server {\npublic:\n    server(boost::asio::io_context& io_context, short port)\n        : socket_(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), port)),\n          max_length_(1024),\n          data_(max_length_) {}\n\n    void do_receive() {\n        socket_.async_receive_from(boost::asio::buffer(data_, max_length_), sender_endpoint_,\n            [this](boost::system::error_code ec, std::size_t length) {\n                if (!ec) {\n                    do_send(length);\n                }\n            });\n    }\n\n    void do_send(std::size_t length) {\n        socket_.async_send_to(boost::asio::buffer(data_, length), sender_endpoint_,\n            [this](boost::system::error_code ec, std::size_t /*length*/) {\n                if (!ec) {\n                    do_receive();\n                }\n            });\n    }\n\nprivate:\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint sender_endpoint_;\n    enum { max_length_ };\n    char data_[max_length_];\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <string>\n\nclass server {\npublic:\n    server(boost::asio::io_context& io_context, short port)\n        : socket_(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), port)),\n          max_length_(1024),\n          data_(max_length_) {\n        do_receive();\n    }\n\nprivate:\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint sender_endpoint_;\n    enum { max_length_ };\n    char data_[max_length_];\n\n    void do_receive() {\n        socket_.async_receive_from(boost::asio::buffer(data_, max_length_), sender_endpoint_,\n            [this](boost::system::error_code ec, std::size_t length) {\n                if (!ec) {\n                    do_send(length);\n                }\n            });\n    }\n\n    void do_send(std::size_t length) {\n        boost::asio::async_send_to(socket_, boost::asio::buffer(data_, length), sender_endpoint_,\n            [this](boost::system::error_code ec, std::size_t /*length*/) {\n                if (!ec) {\n                    do_receive();\n                }\n            });\n    }\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <string>\n\nclass server {\npublic:\n    server(boost::asio::io_context& io_context, short port)\n        : socket_(io_context), max_length_(1024), data_(max_length_) {\n        boost::asio::ip::udp::endpoint endpoint(boost::asio::ip::udp::v4(), port);\n        socket_.open(endpoint.protocol());\n        socket_.bind(endpoint);\n        do_receive();\n    }\n\nprivate:\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint sender_endpoint_;\n    enum { max_length_ = 1024 };\n    char data_[max_length_];\n\n    void do_receive() {\n        socket_.async_receive_from(boost::asio::buffer(data_, max_length_), sender_endpoint_,\n            [this](boost::system::error_code ec, std::size_t length) {\n                if (!ec) {\n                    do_send(length);\n                }\n            });\n    }\n\n    void do_send(std::size_t length) {\n        boost::asio::async_send_to(socket_, boost::asio::buffer(data_, length), sender_endpoint_,\n            [this](boost::system::error_code ec, std::size_t /*length*/) {\n                if (!ec) {\n                    do_receive();\n                }\n            });\n    }\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <string>\n\nclass server {\npublic:\n    server(boost::asio::io_context& io_context, short port)\n        : socket_(io_context), max_length_(1024), data_(max_length_) {\n        boost::asio::ip::udp::endpoint endpoint(boost::asio::ip::udp::v4(), port);\n        socket_.open(endpoint.protocol());\n        socket_.bind(endpoint);\n        do_receive();\n    }\n\nprivate:\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint sender_endpoint_;\n    enum { max_length_ = 1024 };\n    char data_[max_length_];\n\n    void do_receive() {\n        socket_.async_receive_from(boost::asio::buffer(data_, max_length_), sender_endpoint_,\n            [this](boost::system::error_code ec, std::size_t length) {\n                if (!ec) {\n                    do_send(length);\n                }\n            });\n    }\n\n    void do_send(std::size_t length) {\n        boost::asio::async_send_to(socket_, boost::asio::buffer(data_, length), sender_endpoint_,\n            [this](boost::system::error_code ec, std::size_t /*length*/) {\n                if (!ec) {\n                    do_receive();\n                }\n            });\n    }\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <string>\n\nclass server {\npublic:\n    server(boost::asio::io_context& io_context, short port)\n        : socket_(io_context), max_length_(1024), data_(max_length_) {\n        boost::asio::ip::udp::endpoint endpoint(boost::asio::ip::udp::v4(), port);\n        socket_.open(endpoint.protocol());\n        socket_.bind(endpoint);\n        do_receive();\n    }\n\nprivate:\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint sender_endpoint_;\n    enum { max_length_ = 1024 };\n    char data_[max_length_];\n\n    void do_receive() {\n        socket_.async_receive_from(boost::asio::buffer(data_, max_length_), sender_endpoint_,\n            [this](boost::system::error_code ec, std::size_t length) {\n                if (!ec) {\n                    do_send(length);\n                }\n            });\n    }\n\n    void do_send(std::size_t length) {\n        boost::asio::async_send_to(socket_, boost::asio::buffer(data_, length), sender_endpoint_,\n            [this](boost::system::error_code ec, std::size_t /*length*/) {\n                if (!ec) {\n                    do_receive();\n                }\n            });\n    }\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <string>\n\nclass server {\npublic:\n    server(boost::asio::io_context& io_context, short port)\n        : socket_(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), port)),\n          max_length_(1024),\n          data_(max_length_) {\n        do_receive();\n    }\n\nprivate:\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint sender_endpoint_;\n    enum { max_length_ = 1024 };\n    char data_[max_length_];\n\n    void do_receive() {\n        socket_.async_receive_from(boost::asio::buffer(data_, max_length_),\n                                   sender_endpoint_,\n                                   [this](boost::system::error_code ec, std::size_t length) {\n                                       if (!ec) {\n                                           do_send(length);\n                                       }\n                                   });\n    }\n\n    void do_send(std::size_t length) {\n        boost::asio::async_send_to(socket_, boost::asio::buffer(data_, length), sender_endpoint_,\n                                   [this](boost::system::error_code ec, std::size_t /*length*/) {\n                                       if (!ec) {\n                                           do_receive();\n                                       }\n                                   });\n    }\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <string>\n\nclass server {\npublic:\n    server(boost::asio::io_context& io_context, short port)\n        : socket_(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), port)),\n          max_length_(1024),\n          data_(max_length_) {\n        do_receive();\n    }\n\nprivate:\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint sender_endpoint_;\n    enum { max_length_ = 1024 };\n    char data_[max_length_];\n\n    void do_receive() {\n        socket_.async_receive_from(boost::asio::buffer(data_, max_length_), sender_endpoint_,\n            [this](boost::system::error_code ec, std::size_t length) {\n                if (!ec) {\n                    do_send(length);\n                }\n            });\n    }\n\n    void do_send(std::size_t length) {\n        boost::asio::async_send_to(socket_, boost::asio::buffer(data_, length), sender_endpoint_,\n            [this](boost::system::error_code ec, std::size_t /*length*/) {\n                if (!ec) {\n                    do_receive();\n                }\n            });\n    }\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n\nclass server {\npublic:\n    server(boost::asio::io_context& io_context, short port)\n        : socket_(io_context), max_length_(1024), data_(max_length_) {\n        boost::asio::ip::udp::endpoint endpoint(boost::asio::ip::udp::v4(), port);\n        socket_.open(endpoint.protocol());\n        socket_.bind(endpoint);\n        do_receive();\n    }\n\nprivate:\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint sender_endpoint_;\n    enum { max_length_ = 1024 };\n    char data_[max_length_];\n\n    void do_receive() {\n        socket_.async_receive_from(boost::asio::buffer(data_, max_length_),\n            sender_endpoint_,\n            [this](boost::system::error_code ec, std::size_t length) {\n                if (!ec) {\n                    do_send(length);\n                }\n            });\n    }\n\n    void do_send(std::size_t length) {\n        boost::asio::async_send_to(socket_, boost::asio::buffer(data_, length),\n            sender_endpoint_,\n            [this](boost::system::error_code ec, std::size_t /*length*/) {\n                if (!ec) {\n                    do_receive();\n                }\n            });\n    }\n};\n```"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 31,
    "Instruction": "Task Description: Implement a UDP server using Boost.Asio that listens for incoming datagrams and responds with the current daytime string.\n\nFunction Description: The function `udp_server` creates a UDP server that listens on port 13 (daytime protocol port). When it receives any datagram from a client, it responds with the current time in string format. The server runs indefinitely until an exception occurs.\n\nInput: None\n\nOutput: None (The function runs indefinitely and sends responses to clients, but doesn't return any value)",
    "Canonical_solution": "#include <array>\n#include <string>\n#include <boost/asio.hpp>\n\nusing boost::asio::ip::udp;\n\nstd::string make_daytime_string()\n{\n  using namespace std;\n  time_t now = time(0);\n  return ctime(&now);\n}\n\nvoid udp_server()\n{\n  try\n  {\n    boost::asio::io_context io_context;\n\n    udp::socket socket(io_context, udp::endpoint(udp::v4(), 13));\n\n    for (;;)\n    {\n      std::array<char, 1> recv_buf;\n      udp::endpoint remote_endpoint;\n      socket.receive_from(boost::asio::buffer(recv_buf), remote_endpoint);\n\n      std::string message = make_daytime_string();\n\n      boost::system::error_code ignored_error;\n      socket.send_to(boost::asio::buffer(message),\n          remote_endpoint, 0, ignored_error);\n    }\n  }\n  catch (std::exception& e)\n  {\n    std::cerr << e.what() << std::endl;\n  }\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 153,
    "matched_results": [
      "```cpp\n#include <boost/asio.hpp>\n#include <ctime>\n#include <sstream>\n\nvoid udp_server() {\n    boost::asio::io_context io_context;\n    boost::asio::ip::udp::endpoint endpoint(io_context, boost::asio::ip::udp::v4(), 13);\n    boost::asio::ip::udp::socket socket(io_context);\n    socket.open(endpoint.protocol());\n    socket.bind(endpoint);\n\n    while (true) {\n        boost::asio::ip::udp::endpoint sender_endpoint;\n        std::array<char, 100> buffer;\n        socket.receive_from(boost::asio::buffer(buffer), sender_endpoint);\n        std::time_t now = std::time(nullptr);\n        std::stringstream ss;\n        ss << std::ctime(&now);\n        socket.send_to(boost::asio::buffer(ss.str()), sender_endpoint);\n    }\n}\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <ctime>\n#include <sstream>\n\nvoid udp_server() {\n    boost::asio::io_context io_context;\n    boost::asio::ip::udp::endpoint endpoint(boost::asio::ip::udp::v4(), 13);\n    boost::asio::ip::udp::socket socket(io_context, endpoint);\n\n    while (true) {\n        boost::asio::ip::udp::endpoint sender_endpoint;\n        std::array<char, 100> buffer;\n        socket.receive_from(boost::asio::buffer(buffer), sender_endpoint);\n\n        std::ostringstream ss;\n        ss << std::ctime(&std::chrono::system_clock::to_time_t(std::chrono::system_clock::now()));\n        std::string daytime = ss.str();\n\n        socket.send_to(boost::asio::buffer(daytime), sender_endpoint);\n    }\n}\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <ctime>\n#include <sstream>\n\nvoid udp_server() {\n    boost::asio::io_context io_context;\n    boost::asio::ip::udp::socket socket(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), 13));\n\n    while (true) {\n        boost::asio::ip::udp::endpoint sender_endpoint;\n        std::array<char, 100> buffer;\n\n        size_t length = socket.receive_from(boost::asio::buffer(buffer), sender_endpoint);\n        std::time_t now = std::time(nullptr);\n        std::stringstream ss;\n        ss << std::put_time(std::localtime(&now), \"%a %b %d %H:%M:%S %Y\");\n        std::string daytime = ss.str();\n\n        socket.send_to(boost::asio::buffer(daytime), sender_endpoint);\n    }\n}\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <ctime>\n#include <sstream>\n\nvoid udp_server() {\n    boost::asio::io_context io_context;\n    boost::asio::ip::udp::socket socket(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), 13));\n\n    while (true) {\n        boost::asio::ip::udp::endpoint sender_endpoint;\n        std::array<char, 100> buffer;\n\n        socket.receive_from(boost::asio::buffer(buffer), sender_endpoint);\n        std::string message(buffer.begin(), buffer.end());\n\n        std::ostringstream ss;\n        ss << std::ctime(&std::chrono::system_clock::to_time_t(std::chrono::system_clock::now()));\n        std::string response = ss.str();\n\n        socket.send_to(boost::asio::buffer(response), sender_endpoint);\n    }\n}\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <ctime>\n#include <sstream>\n\nvoid udp_server() {\n    boost::asio::io_context io_context;\n    boost::asio::ip::udp::endpoint endpoint(io_context, boost::asio::ip::udp::v4(), 13);\n    boost::asio::ip::udp::socket socket(io_context);\n    socket.open(endpoint.protocol());\n    socket.bind(endpoint);\n\n    while (true) {\n        boost::asio::ip::udp::endpoint sender_endpoint;\n        std::array<char, 100> buffer;\n        socket.receive_from(boost::asio::buffer(buffer), sender_endpoint);\n\n        std::ostringstream ss;\n        ss << std::ctime(&std::chrono::system_clock::to_time_t(std::chrono::system_clock::now()));\n        std::string daytime = ss.str();\n        daytime.pop_back(); // Remove the newline character\n\n        socket.send_to(boost::asio::buffer(daytime), sender_endpoint);\n    }\n}\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <ctime>\n#include <sstream>\n\nvoid udp_server() {\n    boost::asio::io_context io_context;\n    boost::asio::ip::udp::socket socket(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), 13));\n\n    while (true) {\n        boost::asio::ip::udp::endpoint sender_endpoint;\n        std::array<char, 100> buffer;\n        socket.receive_from(boost::asio::buffer(buffer), sender_endpoint);\n\n        std::ostringstream ss;\n        ss << std::ctime(&std::chrono::system_clock::to_time_t(std::chrono::system_clock::now()));\n        std::string daytime = ss.str();\n\n        socket.send_to(boost::asio::buffer(daytime), sender_endpoint);\n    }\n}\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <ctime>\n#include <sstream>\n\nvoid udp_server() {\n    boost::asio::io_context io_context;\n    boost::asio::ip::udp::endpoint endpoint(io_context, boost::asio::ip::udp::v4(), 13);\n    boost::asio::ip::udp::socket socket(io_context);\n    socket.open(endpoint.protocol());\n    socket.bind(endpoint);\n\n    while (true) {\n        boost::asio::ip::udp::endpoint sender_endpoint;\n        std::array<char, 100> buffer;\n        socket.receive_from(boost::asio::buffer(buffer), sender_endpoint);\n\n        std::ostringstream ss;\n        ss << std::ctime(&std::chrono::system_clock::to_time_t(std::chrono::system_clock::now()));\n        std::string daytime = ss.str();\n\n        socket.send_to(boost::asio::buffer(daytime), sender_endpoint);\n    }\n}\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <ctime>\n#include <sstream>\n\nvoid udp_server() {\n    boost::asio::io_context io_context;\n    boost::asio::ip::udp::socket socket(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), 13));\n\n    while (true) {\n        boost::asio::ip::udp::endpoint sender_endpoint;\n        std::array<char, 100> buffer;\n        socket.receive_from(boost::asio::buffer(buffer), sender_endpoint);\n\n        std::ostringstream ss;\n        ss << std::ctime(&std::chrono::system_clock::to_time_t(std::chrono::system_clock::now()));\n        std::string daytime = ss.str();\n\n        socket.send_to(boost::asio::buffer(daytime), sender_endpoint);\n    }\n}\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <ctime>\n#include <sstream>\n\nvoid udp_server() {\n    boost::asio::io_context io_context;\n    boost::asio::ip::udp::endpoint endpoint(io_context, boost::asio::ip::udp::v4(), 13);\n    boost::asio::ip::udp::socket socket(io_context);\n    socket.open(endpoint.protocol());\n    socket.bind(endpoint);\n\n    while (true) {\n        boost::asio::ip::udp::endpoint sender_endpoint;\n        std::array<char, 100> buffer;\n        socket.receive_from(boost::asio::buffer(buffer), sender_endpoint);\n\n        std::ostringstream ss;\n        ss << std::ctime(&std::chrono::system_clock::to_time_t(std::chrono::system_clock::now()));\n        std::string daytime = ss.str();\n\n        socket.send_to(boost::asio::buffer(daytime), sender_endpoint);\n    }\n}\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <ctime>\n#include <sstream>\n\nvoid udp_server() {\n    boost::asio::io_context io_context;\n    boost::asio::ip::udp::endpoint endpoint(io_context, boost::asio::ip::udp::v4(), 13);\n    boost::asio::ip::udp::socket socket(io_context);\n    socket.open(endpoint.protocol());\n    socket.bind(endpoint);\n\n    while (true) {\n        boost::asio::ip::udp::endpoint sender_endpoint;\n        std::array<char, 100> buffer;\n        socket.receive_from(boost::asio::buffer(buffer), sender_endpoint);\n\n        std::ostringstream ss;\n        ss << std::ctime(&std::chrono::system_clock::to_time_t(std::chrono::system_clock::now()));\n        std::string daytime = ss.str();\n\n        socket.send_to(boost::asio::buffer(daytime), sender_endpoint);\n    }\n}\n```"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 32,
    "Instruction": "Task Description: Implement a UDP multicast sender class using Boost.Asio that periodically sends messages to a specified multicast address.\n\nClass Description: The `sender` class encapsulates functionality for sending UDP multicast messages at regular intervals. It uses Boost.Asio for asynchronous network operations and timer management.\n\nAttributes:\n- endpoint_: [boost::asio::ip::udp::endpoint] - The multicast endpoint (address + port) to send messages to\n- socket_: [boost::asio::ip::udp::socket] - The UDP socket used for sending messages\n- timer_: [boost::asio::steady_timer] - Timer used to schedule message sends\n- message_count_: [int] - Counter tracking the number of messages sent\n- message_: [std::string] - The current message content to be sent\n\nMethods:\n- sender([boost::asio::io_context&] io_context, [const boost::asio::ip::address&] multicast_address) -> [void] - Constructor that initializes the sender with IO context and multicast address\n- do_send() -> [void] - Asynchronously sends the current message to the multicast endpoint\n- do_timeout() -> [void] - Sets up a timer to schedule the next message send after a delay",
    "Canonical_solution": "#include <boost/asio.hpp>\n#include <string>\n#include <chrono>\n\nclass sender\n{\npublic:\n  sender(boost::asio::io_context& io_context,\n      const boost::asio::ip::address& multicast_address)\n    : endpoint_(multicast_address, multicast_port),\n      socket_(io_context, endpoint_.protocol()),\n      timer_(io_context),\n      message_count_(0)\n  {\n    do_send();\n  }\n\nprivate:\n  void do_send()\n  {\n    std::ostringstream os;\n    os << \"Message \" << message_count_++;\n    message_ = os.str();\n\n    socket_.async_send_to(\n        boost::asio::buffer(message_), endpoint_,\n        [this](boost::system::error_code ec, std::size_t /*length*/)\n        {\n          if (!ec && message_count_ < max_message_count)\n            do_timeout();\n        });\n  }\n\n  void do_timeout()\n  {\n    timer_.expires_after(std::chrono::seconds(1));\n    timer_.async_wait(\n        [this](boost::system::error_code ec)\n        {\n          if (!ec)\n            do_send();\n        });\n  }\n\nprivate:\n  boost::asio::ip::udp::endpoint endpoint_;\n  boost::asio::ip::udp::socket socket_;\n  boost::asio::steady_timer timer_;\n  int message_count_;\n  std::string message_;\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 153,
    "matched_results": [
      "```cpp\n#include <boost/asio.hpp>\n#include <boost/asio/ip/udp.hpp>\n#include <string>\n#include <chrono>\n\nclass sender {\npublic:\n    sender(boost::asio::io_context& io_context, const boost::asio::ip::address& multicast_address)\n        : endpoint_(boost::asio::ip::udp::endpoint(multicast_address, 1900)),\n          socket_(io_context),\n          timer_(io_context),\n          message_count_(0),\n          message_(\"Hello Multicast\") {}\n\n    void do_send() {\n        boost::asio::async_send_to(socket_, boost::asio::buffer(message_), endpoint_, [this](const boost::system::error_code& error, std::size_t bytes_transferred) {\n            if (!error) {\n                ++message_count_;\n                std::cout << \"Message sent: \" << message_count_ << std::endl;\n            }\n            do_timeout();\n        });\n    }\n\n    void do_timeout() {\n        timer_.expires_after(std::chrono::seconds(1));\n        timer_.async_wait([this](const boost::system::error_code& error) {\n            if (!error) {\n                do_send();\n            }\n        });\n    }\n\nprivate:\n    boost::asio::ip::udp::endpoint endpoint_;\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::steady_timer timer_;\n    int message_count_;\n    std::string message_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <boost/asio/ip/udp.hpp>\n#include <string>\n#include <chrono>\n\nclass sender {\npublic:\n    sender(boost::asio::io_context& io_context, const boost::asio::ip::address& multicast_address)\n        : endpoint_(boost::asio::ip::udp::endpoint(multicast_address, 1900)),\n          socket_(io_context),\n          timer_(io_context),\n          message_count_(0),\n          message_(\"Hello Multicast\") {}\n\n    void do_send() {\n        boost::asio::async_send_to(socket_, boost::asio::buffer(message_), endpoint_, [this](boost::system::error_code ec, std::size_t length) {\n            if (!ec) {\n                ++message_count_;\n                std::cout << \"Message sent: \" << message_count_ << std::endl;\n            }\n            do_timeout();\n        });\n    }\n\n    void do_timeout() {\n        timer_.expires_after(std::chrono::seconds(1));\n        timer_.async_wait([this](const boost::system::error_code& ec) {\n            if (!ec) {\n                do_send();\n            }\n        });\n    }\n\nprivate:\n    boost::asio::ip::udp::endpoint endpoint_;\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::steady_timer timer_;\n    int message_count_;\n    std::string message_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <boost/asio/ip/udp.hpp>\n#include <string>\n#include <chrono>\n\nclass sender {\npublic:\n    sender(boost::asio::io_context& io_context, const boost::asio::ip::address& multicast_address)\n        : endpoint_(boost::asio::ip::udp::endpoint(multicast_address, 1900)),\n          socket_(io_context),\n          timer_(io_context, boost::posix_time::milliseconds(1000)),\n          message_count_(0),\n          message_(\"Hello Multicast\") {}\n\n    void do_send() {\n        boost::asio::async_send_to(socket_, boost::asio::buffer(message_), endpoint_, [this](const boost::system::error_code& error, std::size_t bytes_transferred) {\n            if (!error) {\n                ++message_count_;\n                std::cout << \"Message sent: \" << message_count_ << std::endl;\n            }\n            do_timeout();\n        });\n    }\n\n    void do_timeout() {\n        timer_.expires_after(boost::posix_time::milliseconds(1000));\n        timer_.async_wait([this](const boost::system::error_code& error) {\n            if (!error) {\n                do_send();\n            }\n        });\n    }\n\nprivate:\n    boost::asio::ip::udp::endpoint endpoint_;\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::steady_timer timer_;\n    int message_count_;\n    std::string message_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <boost/asio/ip/udp.hpp>\n#include <string>\n#include <chrono>\n\nclass sender {\npublic:\n    sender(boost::asio::io_context& io_context, const boost::asio::ip::address& multicast_address)\n        : endpoint_(boost::asio::ip::udp::endpoint(multicast_address, 1900)),\n          socket_(io_context),\n          timer_(io_context, boost::posix_time::milliseconds(1000)),\n          message_count_(0),\n          message_(\"Hello Multicast\") {}\n\n    void do_send() {\n        boost::asio::async_send_to(socket_, boost::asio::buffer(message_), endpoint_, [this](boost::system::error_code ec, std::size_t length) {\n            if (!ec) {\n                ++message_count_;\n                std::cout << \"Message sent: \" << message_count_ << std::endl;\n            }\n            do_timeout();\n        });\n    }\n\n    void do_timeout() {\n        timer_.expires_after(boost::posix_time::milliseconds(1000));\n        timer_.async_wait([this](const boost::system::error_code& e) {\n            if (!e) {\n                do_send();\n            }\n        });\n    }\n\nprivate:\n    boost::asio::ip::udp::endpoint endpoint_;\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::steady_timer timer_;\n    int message_count_;\n    std::string message_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <boost/asio/ip/udp.hpp>\n#include <string>\n#include <chrono>\n\nclass sender {\npublic:\n    sender(boost::asio::io_context& io_context, const boost::asio::ip::address& multicast_address)\n        : endpoint_(boost::asio::ip::udp::endpoint(multicast_address, 1900)),\n          socket_(io_context),\n          timer_(io_context, boost::posix_time::milliseconds(1000)),\n          message_count_(0),\n          message_(\"Hello Multicast\") {}\n\n    void do_send() {\n        boost::asio::async_send_to(socket_, boost::asio::buffer(message_), endpoint_, [this](const boost::system::error_code& error, std::size_t bytes_transferred) {\n            if (!error) {\n                ++message_count_;\n                std::cout << \"Message sent: \" << message_count_ << std::endl;\n            }\n            do_timeout();\n        });\n    }\n\n    void do_timeout() {\n        timer_.expires_after(boost::posix_time::milliseconds(1000));\n        timer_.async_wait([this](const boost::system::error_code& error) {\n            if (!error) {\n                do_send();\n            }\n        });\n    }\n\nprivate:\n    boost::asio::ip::udp::endpoint endpoint_;\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::steady_timer timer_;\n    int message_count_;\n    std::string message_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <boost/asio/ip/udp.hpp>\n#include <string>\n#include <chrono>\n\nclass sender {\npublic:\n    sender(boost::asio::io_context& io_context, const boost::asio::ip::address& multicast_address)\n        : endpoint_(boost::asio::ip::udp::endpoint(multicast_address, 1900)),\n          socket_(io_context),\n          timer_(io_context, boost::posix_time::milliseconds(1000)),\n          message_count_(0),\n          message_(\"Hello Multicast\") {}\n\n    void do_send() {\n        boost::asio::async_send_to(socket_, boost::asio::buffer(message_), endpoint_, [this](const boost::system::error_code& error, std::size_t bytes_transferred) {\n            if (!error) {\n                ++message_count_;\n                timer_.expires_after(boost::posix_time::milliseconds(1000));\n                timer_.async_wait([this](const boost::system::error_code& error) { do_timeout(); });\n            }\n        });\n    }\n\n    void do_timeout() {\n        do_send();\n    }\n\nprivate:\n    boost::asio::ip::udp::endpoint endpoint_;\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::steady_timer timer_;\n    int message_count_;\n    std::string message_;\n};\n```"
    ],
    "unmatched_results": [
      "```cpp\n#include <boost/asio.hpp>\n#include <boost/asio/ip/udp.hpp>\n#include <string>\n#include <chrono>\n\nclass sender {\npublic:\n    sender(boost::asio::io_context& io_context, const boost::asio::ip::address& multicast_address)\n        : endpoint_(boost::asio::ip::udp::endpoint(multicast_address, 1900)),\n          socket_(io_context),\n          timer_(io_context, boost::posix_time::milliseconds(1000)),\n          message_count_(0),\n          message_(\"Hello Multicast\") {\n        socket_.open(endpoint_.protocol());\n        socket_.set_option(boost::asio::ip::udp::socket::reuse_address(true));\n        socket_.set_option(boost::asio::ip::multicast::join_group(endpoint_.address()));\n        timer_.async_wait([this](const boost::system::error_code& error) {\n            if (!error) {\n                do_send();\n                do_timeout();\n            }\n        });\n    }\n\nprivate:\n    void do_send() {\n        boost::asio::async_write(socket_, boost::asio::buffer(message_),\n            [this](boost::system::error_code ec, std::size_t length) {\n                if (!ec) {\n                    ++message_count_;\n                }\n            });\n    }\n\n    void do_timeout() {\n        timer_.expires_at(timer_.expires_at() + boost::posix_time::milliseconds(1000));\n        timer_.async_wait([this](const boost::system::error_code& error) {\n            if (!error) {\n                do_send();\n                do_timeout();\n            }\n        });\n    }\n\n    boost::asio::ip::udp::endpoint endpoint_;\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::steady_timer timer_;\n    int message_count_;\n    std::string message_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <boost/asio/ip/udp.hpp>\n#include <string>\n#include <chrono>\n\nclass sender {\npublic:\n    sender(boost::asio::io_context& io_context, const boost::asio::ip::address& multicast_address)\n        : endpoint_(boost::asio::ip::udp::endpoint(multicast_address, 1900)),\n          socket_(io_context),\n          timer_(io_context),\n          message_count_(0),\n          message_(\"Hello Multicast\") {\n        socket_.open(boost::asio::ip::udp::v4());\n        socket_.set_option(boost::asio::ip::udp::socket::reuse_address(true));\n        socket_.set_option(boost::asio::ip::multicast::join_group(endpoint_));\n    }\n\n    void do_send() {\n        boost::asio::async_write(socket_, boost::asio::buffer(message_),\n                                 [this](boost::system::error_code ec, std::size_t /*length*/) {\n                                     if (!ec) {\n                                         ++message_count_;\n                                         timer_.expires_after(std::chrono::seconds(10));\n                                         timer_.async_wait([this](const boost::system::error_code& /*ec*/) {\n                                             do_send();\n                                         });\n                                     }\n                                 });\n    }\n\n    void do_timeout() {\n        timer_.expires_after(std::chrono::seconds(10));\n        timer_.async_wait([this](const boost::system::error_code& /*ec*/) {\n            do_send();\n        });\n    }\n\nprivate:\n    boost::asio::ip::udp::endpoint endpoint_;\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::steady_timer timer_;\n    int message_count_;\n    std::string message_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <boost/asio/ip/udp.hpp>\n#include <string>\n#include <chrono>\n\nclass sender {\npublic:\n    sender(boost::asio::io_context& io_context, const boost::asio::ip::address& multicast_address)\n        : endpoint_(boost::asio::ip::udp::endpoint(multicast_address, 1900)),\n          socket_(io_context),\n          timer_(io_context, boost::posix_time::milliseconds(1000)),\n          message_count_(0),\n          message_(\"Hello Multicast\") {\n        socket_.open(endpoint_.protocol());\n        socket_.set_option(boost::asio::ip::udp::socket::reuse_address(true));\n        socket_.set_option(boost::asio::ip::udp::socket::multicast_interface(endpoint_.address()));\n        timer_.async_wait([this](const boost::system::error_code& error) {\n            if (!error) {\n                do_send();\n            }\n        });\n    }\n\nprivate:\n    void do_send() {\n        boost::asio::async_write(socket_, boost::asio::buffer(message_),\n            [this](boost::system::error_code ec, std::size_t length) {\n                if (!ec) {\n                    ++message_count_;\n                    timer_.expires_at(timer_.expires_at() + boost::posix_time::milliseconds(1000));\n                    timer_.async_wait([this](const boost::system::error_code& error) {\n                        if (!error) {\n                            do_send();\n                        }\n                    });\n                }\n            });\n    }\n\n    void do_timeout() {\n        timer_.expires_at(timer_.expires_at() + boost::posix_time::milliseconds(1000));\n        timer_.async_wait([this](const boost::system::error_code& error) {\n            if (!error) {\n                do_send();\n            }\n        });\n    }\n\n    boost::asio::ip::udp::endpoint endpoint_;\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::steady_timer timer_;\n    int message_count_;\n    std::string message_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <boost/asio/ip/udp.hpp>\n#include <string>\n#include <chrono>\n\nclass sender {\npublic:\n    sender(boost::asio::io_context& io_context, const boost::asio::ip::address& multicast_address)\n        : endpoint_(boost::asio::ip::udp::endpoint(multicast_address, 1900)),\n          socket_(io_context),\n          timer_(io_context, boost::posix_time::milliseconds(1000)),\n          message_count_(0),\n          message_(\"Hello Multicast\") {\n        socket_.open(endpoint_.protocol());\n        socket_.set_option(boost::asio::ip::udp::socket::reuse_address(true));\n        socket_.set_option(boost::asio::ip::multicast::join_group(endpoint_.address()));\n        timer_.async_wait([this](const boost::system::error_code& error) {\n            if (!error) {\n                do_send();\n            }\n        });\n    }\n\nprivate:\n    void do_send() {\n        boost::asio::async_write(socket_, boost::asio::buffer(message_),\n            [this](boost::system::error_code ec, std::size_t length) {\n                if (!ec) {\n                    ++message_count_;\n                    timer_.expires_at(timer_.expires_at() + boost::posix_time::milliseconds(1000));\n                    timer_.async_wait([this](const boost::system::error_code& error) {\n                        if (!error) {\n                            do_send();\n                        }\n                    });\n                }\n            });\n    }\n\n    void do_timeout() {\n        timer_.expires_at(timer_.expires_at() + boost::posix_time::milliseconds(1000));\n        timer_.async_wait([this](const boost::system::error_code& error) {\n            if (!error) {\n                do_send();\n            }\n        });\n    }\n\n    boost::asio::ip::udp::endpoint endpoint_;\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::steady_timer timer_;\n    int message_count_;\n    std::string message_;\n};\n```"
    ],
    "match_count": 6,
    "pass@3": 0.9666666666666667,
    "pass@5": 1.0
  },
  {
    "Task_id": 33,
    "Instruction": "Task Description: Implement a UDP echo server using Boost.Asio that listens on a specified port, receives incoming datagrams, and sends them back to the sender.\n\nFunction Description: The function creates a UDP socket bound to a specified port, then enters an infinite loop where it receives datagrams from clients and echoes them back to the sender. This demonstrates basic UDP communication using Boost.Asio.\n\nInput:\n- io_context: boost::asio::io_context& - Reference to an I/O execution context that manages asynchronous operations\n- port: unsigned short - The port number on which the server should listen for incoming UDP datagrams\n\nOutput: None (The function runs indefinitely in a loop, processing incoming datagrams)",
    "Canonical_solution": "#include <boost/asio.hpp>\nusing boost::asio::ip::udp;\nenum { max_length = 1024 };\n\nvoid server(boost::asio::io_context& io_context, unsigned short port)\n{\n  udp::socket sock(io_context, udp::endpoint(udp::v4(), port));\n  for (;;)\n  {\n    char data[max_length];\n    udp::endpoint sender_endpoint;\n    size_t length = sock.receive_from(\n        boost::asio::buffer(data, max_length), sender_endpoint);\n    sock.send_to(boost::asio::buffer(data, length), sender_endpoint);\n  }\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 153,
    "matched_results": [
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n\nvoid udp_echo_server(boost::asio::io_context& io_context, unsigned short port) {\n    boost::asio::ip::udp::socket socket(io_context);\n    socket.open(boost::asio::ip::udp::v4());\n    socket.bind(boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), port));\n\n    while (true) {\n        boost::asio::ip::udp::endpoint sender_endpoint;\n        std::size_t length = socket.receive_from(boost::asio::buffer(), sender_endpoint);\n        socket.send_to(boost::asio::buffer(), sender_endpoint);\n    }\n}\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n\nvoid udp_echo_server(boost::asio::io_context& io_context, unsigned short port) {\n    boost::asio::ip::udp::socket socket(io_context);\n    boost::asio::ip::udp::endpoint endpoint(boost::asio::ip::udp::v4(), port);\n    socket.open(endpoint.protocol());\n    socket.bind(endpoint);\n\n    while (true) {\n        boost::asio::ip::udp::endpoint sender_endpoint;\n        std::array<char, 1024> buffer;\n        size_t length = socket.receive_from(boost::asio::buffer(buffer), sender_endpoint);\n        socket.send_to(boost::asio::buffer(buffer, length), sender_endpoint);\n    }\n}\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n\nvoid udp_echo_server(boost::asio::io_context& io_context, unsigned short port) {\n    boost::asio::ip::udp::socket socket(io_context);\n    socket.open(boost::asio::ip::udp::v4());\n    socket.bind(boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), port));\n\n    while (true) {\n        boost::asio::ip::udp::endpoint sender_endpoint;\n        std::size_t length = socket.receive_from(boost::asio::buffer(), sender_endpoint);\n        socket.send_to(boost::asio::buffer(), sender_endpoint);\n    }\n}\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n\nvoid udp_echo_server(boost::asio::io_context& io_context, unsigned short port) {\n    boost::asio::ip::udp::socket socket(io_context);\n    socket.open(boost::asio::ip::udp::v4());\n    socket.bind(boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), port));\n\n    while (true) {\n        boost::asio::ip::udp::endpoint sender_endpoint;\n        std::size_t length = socket.receive_from(boost::asio::buffer(), sender_endpoint);\n        socket.send_to(boost::asio::buffer(), sender_endpoint);\n    }\n}\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n\nvoid udp_echo_server(boost::asio::io_context& io_context, unsigned short port) {\n    boost::asio::ip::udp::socket socket(io_context);\n    socket.open(boost::asio::ip::udp::v4());\n    socket.bind(boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), port));\n\n    while (true) {\n        boost::asio::ip::udp::endpoint sender_endpoint;\n        std::size_t length = socket.receive_from(boost::asio::buffer(), sender_endpoint);\n        socket.send_to(boost::asio::buffer(), sender_endpoint);\n    }\n}\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n\nvoid udp_echo_server(boost::asio::io_context& io_context, unsigned short port) {\n    boost::asio::ip::udp::socket socket(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), port));\n    while (true) {\n        boost::asio::ip::udp::endpoint sender_endpoint;\n        std::size_t length = socket.receive_from(boost::asio::buffer(), sender_endpoint);\n        socket.send_to(boost::asio::buffer(), sender_endpoint);\n    }\n}\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n\nvoid udp_echo_server(boost::asio::io_context& io_context, unsigned short port) {\n    boost::asio::ip::udp::socket socket(io_context);\n    boost::asio::ip::udp::endpoint endpoint(boost::asio::ip::udp::v4(), port);\n    socket.open(endpoint.protocol());\n    socket.bind(endpoint);\n\n    while (true) {\n        boost::asio::ip::udp::endpoint sender_endpoint;\n        std::array<char, 1024> buffer;\n        size_t length = socket.receive_from(boost::asio::buffer(buffer), sender_endpoint);\n        socket.send_to(boost::asio::buffer(buffer, length), sender_endpoint);\n    }\n}\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n\nvoid udp_echo_server(boost::asio::io_context& io_context, unsigned short port) {\n    boost::asio::ip::udp::socket socket(io_context);\n    socket.open(boost::asio::ip::udp::v4());\n    socket.bind(boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), port));\n\n    while (true) {\n        boost::asio::ip::udp::endpoint sender_endpoint;\n        std::size_t length = socket.receive_from(boost::asio::buffer(), sender_endpoint);\n        socket.send_to(boost::asio::buffer(), sender_endpoint);\n    }\n}\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n\nvoid udp_echo_server(boost::asio::io_context& io_context, unsigned short port) {\n    boost::asio::ip::udp::socket socket(io_context);\n    socket.open(boost::asio::ip::udp::v4());\n    socket.bind(boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), port));\n\n    while (true) {\n        boost::asio::ip::udp::endpoint sender_endpoint;\n        std::size_t length = socket.receive_from(boost::asio::buffer(), sender_endpoint);\n        socket.send_to(boost::asio::buffer(), sender_endpoint);\n    }\n}\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n\nvoid udp_echo_server(boost::asio::io_context& io_context, unsigned short port) {\n    boost::asio::ip::udp::socket socket(io_context);\n    socket.open(boost::asio::ip::udp::v4());\n    socket.bind(boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), port));\n\n    while (true) {\n        boost::asio::ip::udp::endpoint sender_endpoint;\n        std::size_t length = socket.receive_from(boost::asio::buffer(), sender_endpoint);\n        socket.send_to(boost::asio::buffer(), sender_endpoint);\n    }\n}\n```"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 34,
    "Instruction": "Task Description: Implement a UDP client communication function using Boost.Asio to send a message to a specified host and port, and receive a response.\n\nFunction Description: The function establishes a UDP client connection, sends a message to a specified server, and waits to receive a response. It uses Boost.Asio for asynchronous UDP operations.\n\nInput:\n- host: [std::string] - The hostname or IP address of the UDP server to connect to\n- port: [std::string] - The port number of the UDP server\n- message: [std::string] - The message to be sent to the server\n\nOutput: None (The function receives a reply from the server but doesn't return it. In a real implementation, you might want to return the reply or process it further.)",
    "Canonical_solution": "#include <boost/asio.hpp>\nusing boost::asio::ip::udp;\n\nvoid udp_client_communication(const std::string& host, const std::string& port, const std::string& message)\n{\n    boost::asio::io_context io_context;\n    udp::socket s(io_context, udp::endpoint(udp::v4(), 0));\n    udp::resolver resolver(io_context);\n    udp::resolver::results_type endpoints = resolver.resolve(udp::v4(), host, port);\n\n    size_t request_length = message.length();\n    s.send_to(boost::asio::buffer(message, request_length), *endpoints.begin());\n\n    char reply[max_length];\n    udp::endpoint sender_endpoint;\n    size_t reply_length = s.receive_from(boost::asio::buffer(reply, max_length), sender_endpoint);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 153,
    "matched_results": [
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <string>\n\nvoid udp_client_communication(const std::string& host, const std::string& port, const std::string& message) {\n    boost::asio::io_context io_context;\n    boost::asio::ip::udp::resolver resolver(io_context);\n    boost::asio::ip::udp::endpoint endpoint = *resolver.resolve(boost::asio::ip::udp::v4(), host, port);\n    boost::asio::ip::udp::socket socket(io_context);\n    socket.open(endpoint.protocol());\n\n    boost::asio::ip::udp::endpoint receiver_endpoint;\n    std::array<char, 1024> buffer;\n    size_t length = socket.receive_from(boost::asio::buffer(buffer), receiver_endpoint);\n    std::string reply(buffer.data(), length);\n    std::cout << \"Received reply: \" << reply << std::endl;\n}\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <string>\n\nvoid udp_client(const std::string& host, const std::string& port, const std::string& message) {\n    boost::asio::io_context io_context;\n    boost::asio::ip::udp::resolver resolver(io_context);\n    boost::asio::ip::udp::endpoint endpoint = *resolver.resolve(boost::asio::ip::udp::v4(), host, port);\n    boost::asio::ip::udp::socket socket(io_context);\n    socket.open(endpoint.protocol());\n\n    boost::asio::ip::udp::endpoint receiver_endpoint;\n    std::string reply;\n    socket.send_to(boost::asio::buffer(message), endpoint);\n    boost::asio::async_receive_from(socket, boost::asio::buffer(reply), receiver_endpoint);\n}\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <string>\n\nvoid udp_client(const std::string& host, const std::string& port, const std::string& message) {\n    boost::asio::io_context io_context;\n    boost::asio::ip::udp::resolver resolver(io_context);\n    boost::asio::ip::udp::endpoint endpoint = *resolver.resolve(boost::asio::ip::udp::v4(), host, port);\n    boost::asio::ip::udp::socket socket(io_context);\n    socket.open(endpoint.protocol());\n\n    boost::asio::ip::udp::endpoint receiver_endpoint;\n    std::array<char, 1024> buffer;\n    size_t length = socket.receive_from(boost::asio::buffer(buffer), receiver_endpoint);\n    std::string reply(buffer.data(), length);\n    std::cout << \"Received reply: \" << reply << std::endl;\n}\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <string>\n\nvoid udp_client_communication(const std::string& host, const std::string& port, const std::string& message) {\n    boost::asio::io_context io_context;\n    boost::asio::ip::udp::resolver resolver(io_context);\n    boost::asio::ip::udp::endpoint endpoint = *resolver.resolve(boost::asio::ip::udp::v4(), host, port);\n    boost::asio::ip::udp::socket socket(io_context);\n    socket.open(endpoint.protocol());\n\n    boost::asio::ip::udp::endpoint receiver_endpoint;\n    std::string reply;\n    socket.send_to(boost::asio::buffer(message), endpoint);\n    boost::asio::async_receive_from(socket, boost::asio::buffer(reply), receiver_endpoint);\n}\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <string>\n\nnamespace asio = boost::asio;\n\nvoid udp_client(const std::string& host, const std::string& port, const std::string& message) {\n    asio::io_context io_context;\n    asio::ip::udp::resolver resolver(io_context);\n    asio::ip::udp::endpoint endpoint = *resolver.resolve(asio::ip::udp::v4(), host, port).begin();\n    asio::ip::udp::socket socket(io_context);\n    socket.open(asio::ip::udp::v4());\n    socket.send_to(asio::buffer(message), endpoint);\n    char reply[1024];\n    asio::ip::udp::endpoint sender_endpoint;\n    size_t length = socket.receive_from(asio::buffer(reply), sender_endpoint);\n    std::cout << \"Received reply: \" << std::string(reply, length) << std::endl;\n}\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <string>\n\nvoid udp_client(const std::string& host, const std::string& port, const std::string& message) {\n    boost::asio::io_context io_context;\n    boost::asio::ip::udp::resolver resolver(io_context);\n    boost::asio::ip::udp::endpoint endpoint = *resolver.resolve(boost::asio::ip::udp::v4(), host, port);\n    boost::asio::ip::udp::socket socket(io_context);\n    socket.open(endpoint.protocol());\n\n    boost::asio::ip::udp::endpoint receiver_endpoint;\n    std::array<char, 1024> buffer;\n    size_t length = socket.receive_from(boost::asio::buffer(buffer), receiver_endpoint);\n    std::string reply(buffer.data(), length);\n    std::cout << \"Received reply: \" << reply << std::endl;\n}\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <string>\n\nvoid udp_client(const std::string& host, const std::string& port, const std::string& message) {\n    boost::asio::io_context io_context;\n    boost::asio::ip::udp::resolver resolver(io_context);\n    boost::asio::ip::udp::endpoint endpoint = *resolver.resolve(boost::asio::ip::udp::v4(), host, port);\n    boost::asio::ip::udp::socket socket(io_context);\n    socket.open(endpoint.protocol());\n\n    boost::asio::ip::udp::endpoint receiver_endpoint;\n    std::string reply;\n    socket.send_to(boost::asio::buffer(message), endpoint);\n    boost::asio::async_receive_from(socket, boost::asio::buffer(reply), receiver_endpoint);\n}\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <string>\n\nvoid udp_client(const std::string& host, const std::string& port, const std::string& message) {\n    boost::asio::io_context io_context;\n    boost::asio::ip::udp::resolver resolver(io_context);\n    boost::asio::ip::udp::endpoint endpoint = *resolver.resolve(boost::asio::ip::udp::v4(), host, port);\n    boost::asio::ip::udp::socket socket(io_context);\n    socket.open(endpoint.protocol());\n\n    boost::asio::ip::udp::endpoint receiver_endpoint;\n    std::string reply;\n    socket.send_to(boost::asio::buffer(message), endpoint);\n    boost::asio::async_receive_from(socket, boost::asio::buffer(reply), receiver_endpoint);\n}\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <string>\n\nvoid udp_client_communication(const std::string& host, const std::string& port, const std::string& message) {\n    boost::asio::io_context io_context;\n    boost::asio::ip::udp::resolver resolver(io_context);\n    boost::asio::ip::udp::endpoint endpoint = *resolver.resolve(boost::asio::ip::udp::v4(), host, port);\n    boost::asio::ip::udp::socket socket(io_context);\n    socket.open(boost::asio::ip::udp::v4());\n    socket.send_to(boost::asio::buffer(message), endpoint);\n    boost::asio::ip::udp::endpoint receiver_endpoint;\n    std::array<char, 1024> reply;\n    socket.receive_from(boost::asio::buffer(reply), receiver_endpoint);\n    std::string received_message(reply.data(), reply.size());\n    std::cout << received_message << std::endl;\n}\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <string>\n\nvoid udp_client(const std::string& host, const std::string& port, const std::string& message) {\n    boost::asio::io_context io_context;\n    boost::asio::ip::udp::resolver resolver(io_context);\n    boost::asio::ip::udp::endpoint endpoint = *resolver.resolve(boost::asio::ip::udp::v4(), host, port);\n    boost::asio::ip::udp::socket socket(io_context);\n    socket.open(endpoint.protocol());\n\n    boost::asio::ip::udp::endpoint receiver_endpoint;\n    std::array<char, 1024> buffer;\n    size_t length = socket.receive_from(boost::asio::buffer(buffer), receiver_endpoint);\n    std::string reply(buffer.data(), length);\n    std::cout << \"Received reply: \" << reply << std::endl;\n}\n```"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 35,
    "Instruction": "Task Description: Implement a UDP server class using Boost.Asio that handles incoming UDP packets, processes them, and sends replies back to clients. The server should run asynchronously in a separate thread and provide a callback mechanism for handling incoming requests.\n\nClass Description: UDPServer::Impl is an implementation class for a UDP server that listens for incoming packets, validates them, and forwards valid packets to a callback function. It also provides functionality to send replies back to clients.\n\nAttributes:\n- worker_thread: std::thread - Thread that runs the IO context for asynchronous operations\n- io_context: boost::asio::io_context - Manages asynchronous operations for Boost.Asio\n- socket: boost::asio::ip::udp::socket - UDP socket for communication\n- request_buffer: std::array<u8, MAX_PACKET_SIZE> - Buffer for storing incoming UDP packets\n- remote_endpoint: boost::asio::ip::udp::endpoint - Stores the endpoint of the last received packet\n- new_request_callback: std::function<void(std::unique_ptr<Packet>)> - Callback function for handling new valid packets\n\nMethods:\n- Impl(std::function<void(std::unique_ptr<Packet>)>) -> None - Constructor that initializes the UDP socket and starts the receive loop\n- ~Impl() -> None - Destructor that stops the IO context and joins the worker thread\n- StartReceive() -> None - Starts an asynchronous receive operation on the UDP socket\n- HandleReceive(const boost::system::error_code&, std::size_t) -> None - Handles received data, validates packets, and triggers the callback for valid packets\n- SendReply(boost::asio::ip::udp::endpoint, Packet&) -> None - Sends a reply packet back to the specified endpoint",
    "Canonical_solution": "#include <thread>\n#include <boost/asio.hpp>\n#include <functional>\n#include <memory>\n#include <array>\n#include \"common/common_types.h\"\n#include \"common/logging/log.h\"\n#include \"core/rpc/packet.h\"\n\nnamespace Core::RPC {\n\nclass UDPServer::Impl {\npublic:\n    explicit Impl(std::function<void(std::unique_ptr<Packet>)> new_request_callback)\n        : socket(io_context, boost::asio::ip::udp::endpoint(boost::asio::ip::udp::v4(), 45987)),\n          new_request_callback(std::move(new_request_callback)) {\n\n        StartReceive();\n        worker_thread = std::thread([this] { io_context.run(); });\n    }\n\n    ~Impl() {\n        io_context.stop();\n        worker_thread.join();\n    }\n\nprivate:\n    void StartReceive() {\n        socket.async_receive_from(boost::asio::buffer(request_buffer), remote_endpoint,\n                                  [this](const boost::system::error_code& error, std::size_t size) {\n                                      HandleReceive(error, size);\n                                  });\n    }\n\n    void HandleReceive(const boost::system::error_code& error, std::size_t size) {\n        if (error) {\n            LOG_WARNING(RPC_Server, \"Failed to receive data on UDP socket: {}\", error.message());\n        } else if (size >= MIN_PACKET_SIZE && size <= MAX_PACKET_SIZE) {\n            PacketHeader header;\n            std::memcpy(&header, request_buffer.data(), sizeof(header));\n            if ((size - MIN_PACKET_SIZE) == header.packet_size) {\n                u8* data = request_buffer.data() + MIN_PACKET_SIZE;\n                std::function<void(Packet&)> send_reply_callback =\n                    std::bind(&Impl::SendReply, this, remote_endpoint, std::placeholders::_1);\n                std::unique_ptr<Packet> new_packet =\n                    std::make_unique<Packet>(header, data, send_reply_callback);\n\n                new_request_callback(std::move(new_packet));\n            }\n        } else {\n            LOG_WARNING(RPC_Server, \"Received message with wrong size: {}\", size);\n        }\n        StartReceive();\n    }\n\n    void SendReply(boost::asio::ip::udp::endpoint endpoint, Packet& reply_packet) {\n        std::vector<u8> reply_buffer(MIN_PACKET_SIZE + reply_packet.GetPacketDataSize());\n        auto reply_header = reply_packet.GetHeader();\n\n        std::memcpy(reply_buffer.data(), &reply_header, sizeof(reply_header));\n        std::memcpy(reply_buffer.data() + (4 * sizeof(u32)), reply_packet.GetPacketData().data(),\n                    reply_packet.GetPacketDataSize());\n\n        boost::system::error_code error;\n        socket.send_to(boost::asio::buffer(reply_buffer), endpoint, 0, error);\n\n        if (error) {\n            LOG_WARNING(RPC_Server, \"Failed to send reply: {}\", error.message());\n        } else {\n            LOG_INFO(RPC_Server, \"Sent reply version({}) id=({}) type=({}) size=({})\",\n                     reply_packet.GetVersion(), reply_packet.GetId(), reply_packet.GetPacketType(),\n                     reply_packet.GetPacketDataSize());\n        }\n    }\n\n    std::thread worker_thread;\n    boost::asio::io_context io_context;\n    boost::asio::ip::udp::socket socket;\n    std::array<u8, MAX_PACKET_SIZE> request_buffer;\n    boost::asio::ip::udp::endpoint remote_endpoint;\n    std::function<void(std::unique_ptr<Packet>)> new_request_callback;\n};\n\n} // namespace Core::RPC",
    "Code_level": "Class-level",
    "FSMID_for_test": 153,
    "matched_results": [
      "```cpp\n#include <boost/asio.hpp>\n#include <memory>\n#include <array>\n\nnamespace boost {\nnamespace asio {\nnamespace ip {\nnamespace udp {\n\nclass UDPServer {\npublic:\n    class Impl {\n        std::thread worker_thread;\n        boost::asio::io_context io_context;\n        boost::asio::ip::udp::socket socket;\n        std::array<u8, MAX_PACKET_SIZE> request_buffer;\n        boost::asio::ip::udp::endpoint remote_endpoint;\n        std::function<void(std::unique_ptr<Packet>)> new_request_callback;\n\n        Impl(std::function<void(std::unique_ptr<Packet>)> callback)\n            : new_request_callback(std::move(callback)) {\n            boost::asio::ip::udp::endpoint local_endpoint(boost::asio::ip::udp::v4(), PORT);\n            socket.open(local_endpoint.protocol());\n            socket.bind(local_endpoint);\n            StartReceive();\n        }\n\n        ~Impl() {\n            io_context.stop();\n            if (worker_thread.joinable()) {\n                worker_thread.join();\n            }\n        }\n\n        void StartReceive() {\n            socket.async_receive_from(boost::asio::buffer(request_buffer),\n                                      remote_endpoint,\n                                      [this](const boost::system::error_code& error, std::size_t bytes_transferred) {\n                                          HandleReceive(error, bytes_transferred);\n                                      });\n        }\n\n        void HandleReceive(const boost::system::error_code& error, std::size_t bytes_transferred) {\n            if (!error) {\n                std::unique_ptr<Packet> packet(new Packet(request_buffer.data(), bytes_transferred));\n                if (packet->IsValid()) {\n                    new_request_callback(std::move(packet));\n                }\n            }\n            StartReceive();\n        }\n\n        void SendReply(const boost::asio::ip::udp::endpoint& endpoint, Packet& packet) {\n            socket.async_send_to(boost::asio::buffer(packet.GetData(), packet.GetSize()),\n                                 endpoint,\n                                 [this](const boost::system::error_code&, std::size_t) {});\n        }\n    };\n};\n\n} // namespace udp\n} // namespace ip\n} // namespace asio\n} // namespace boost\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <memory>\n#include <array>\n\nnamespace boost {\nnamespace asio {\nnamespace ip {\nnamespace udp {\n\nclass UDPServer {\npublic:\n    class Impl {\n        std::thread worker_thread;\n        boost::asio::io_context io_context;\n        boost::asio::ip::udp::socket socket;\n        std::array<u8, MAX_PACKET_SIZE> request_buffer;\n        boost::asio::ip::udp::endpoint remote_endpoint;\n        std::function<void(std::unique_ptr<Packet>)> new_request_callback;\n\n        Impl(std::function<void(std::unique_ptr<Packet>)> callback)\n            : new_request_callback(std::move(callback)) {\n            boost::asio::ip::udp::endpoint local_endpoint(boost::asio::ip::udp::v4(), PORT);\n            socket.open(local_endpoint.protocol());\n            socket.bind(local_endpoint);\n            StartReceive();\n        }\n\n        ~Impl() {\n            io_context.stop();\n            if (worker_thread.joinable()) {\n                worker_thread.join();\n            }\n        }\n\n        void StartReceive() {\n            socket.async_receive_from(boost::asio::buffer(request_buffer),\n                                      remote_endpoint,\n                                      [this](const boost::system::error_code& error, std::size_t bytes_transferred) {\n                                          HandleReceive(error, bytes_transferred);\n                                      });\n        }\n\n        void HandleReceive(const boost::system::error_code& error, std::size_t bytes_transferred) {\n            if (!error) {\n                Packet packet(request_buffer.data(), bytes_transferred);\n                if (packet.IsValid()) {\n                    new_request_callback(std::make_unique<Packet>(packet));\n                }\n            }\n            StartReceive();\n        }\n\n        void SendReply(const boost::asio::ip::udp::endpoint& endpoint, Packet& packet) {\n            socket.async_send_to(boost::asio::buffer(packet.Data(), packet.Size()),\n                                 endpoint,\n                                 [this](const boost::system::error_code&, std::size_t) {});\n        }\n    };\n};\n\n} // namespace udp\n} // namespace ip\n} // namespace asio\n} // namespace boost\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <memory>\n#include <array>\n\nnamespace boost {\nnamespace asio {\nnamespace ip {\nnamespace udp {\n\nclass UDPServer {\npublic:\n    class Impl {\n        std::thread worker_thread;\n        boost::asio::io_context io_context;\n        boost::asio::ip::udp::socket socket;\n        std::array<u8, MAX_PACKET_SIZE> request_buffer;\n        boost::asio::ip::udp::endpoint remote_endpoint;\n        std::function<void(std::unique_ptr<Packet>)> new_request_callback;\n\n        Impl(std::function<void(std::unique_ptr<Packet>)> callback)\n            : new_request_callback(std::move(callback)) {\n            boost::asio::ip::udp::endpoint local_endpoint(boost::asio::ip::udp::v4(), PORT);\n            socket.open(local_endpoint.protocol());\n            socket.bind(local_endpoint);\n            StartReceive();\n        }\n\n        ~Impl() {\n            io_context.stop();\n            if (worker_thread.joinable()) {\n                worker_thread.join();\n            }\n        }\n\n        void StartReceive() {\n            socket.async_receive_from(boost::asio::buffer(request_buffer),\n                                      remote_endpoint,\n                                      [this](const boost::system::error_code& error, std::size_t bytes_transferred) {\n                                          HandleReceive(error, bytes_transferred);\n                                      });\n        }\n\n        void HandleReceive(const boost::system::error_code& error, std::size_t bytes_transferred) {\n            if (!error) {\n                std::unique_ptr<Packet> packet(new Packet(request_buffer.data(), bytes_transferred));\n                if (packet->IsValid()) {\n                    new_request_callback(std::move(packet));\n                }\n            }\n            StartReceive();\n        }\n\n        void SendReply(const boost::asio::ip::udp::endpoint& endpoint, Packet& packet) {\n            socket.async_send_to(boost::asio::buffer(packet.GetData(), packet.GetSize()),\n                                 endpoint,\n                                 [](const boost::system::error_code&, std::size_t) {});\n        }\n    };\n};\n\n} // namespace udp\n} // namespace ip\n} // namespace asio\n} // namespace boost\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <memory>\n#include <array>\n\nnamespace boost {\nnamespace asio {\nnamespace ip {\nnamespace udp {\n\nclass UDPServer {\npublic:\n    class Impl {\n        std::thread worker_thread;\n        boost::asio::io_context io_context;\n        boost::asio::ip::udp::socket socket;\n        std::array<u8, MAX_PACKET_SIZE> request_buffer;\n        boost::asio::ip::udp::endpoint remote_endpoint;\n        std::function<void(std::unique_ptr<Packet>)> new_request_callback;\n\n        Impl(std::function<void(std::unique_ptr<Packet>)> callback)\n            : new_request_callback(std::move(callback)) {\n            boost::asio::ip::udp::endpoint local_endpoint(boost::asio::ip::udp::v4(), PORT);\n            socket.open(local_endpoint.protocol());\n            socket.bind(local_endpoint);\n            StartReceive();\n        }\n\n        ~Impl() {\n            io_context.stop();\n            if (worker_thread.joinable()) {\n                worker_thread.join();\n            }\n        }\n\n        void StartReceive() {\n            socket.async_receive_from(boost::asio::buffer(request_buffer),\n                                      remote_endpoint,\n                                      [this](const boost::system::error_code& error, std::size_t bytes_transferred) {\n                                          HandleReceive(error, bytes_transferred);\n                                      });\n        }\n\n        void HandleReceive(const boost::system::error_code& error, std::size_t bytes_transferred) {\n            if (!error) {\n                std::unique_ptr<Packet> packet(new Packet(request_buffer.data(), bytes_transferred));\n                if (packet->IsValid()) {\n                    new_request_callback(std::move(packet));\n                }\n            }\n            StartReceive();\n        }\n\n        void SendReply(const boost::asio::ip::udp::endpoint& endpoint, Packet& packet) {\n            socket.async_send_to(boost::asio::buffer(packet.Data(), packet.Size()),\n                                 endpoint,\n                                 [this](const boost::system::error_code&, std::size_t) {});\n        }\n    };\n};\n\n} // namespace udp\n} // namespace ip\n} // namespace asio\n} // namespace boost\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <memory>\n#include <array>\n\nnamespace boost {\nnamespace asio {\nnamespace ip {\nnamespace udp {\n\nclass UDPServer {\npublic:\n    class Impl {\n        std::thread worker_thread;\n        boost::asio::io_context io_context;\n        boost::asio::ip::udp::socket socket;\n        std::array<u8, MAX_PACKET_SIZE> request_buffer;\n        boost::asio::ip::udp::endpoint remote_endpoint;\n        std::function<void(std::unique_ptr<Packet>)> new_request_callback;\n\n    public:\n        Impl(std::function<void(std::unique_ptr<Packet>)> callback)\n            : new_request_callback(std::move(callback)) {\n            boost::asio::ip::udp::endpoint local_endpoint(boost::asio::ip::udp::v4(), PORT);\n            socket.open(local_endpoint.protocol());\n            socket.bind(local_endpoint);\n            StartReceive();\n        }\n\n        ~Impl() {\n            io_context.stop();\n            if (worker_thread.joinable()) {\n                worker_thread.join();\n            }\n        }\n\n        void StartReceive() {\n            socket.async_receive_from(boost::asio::buffer(request_buffer),\n                                      remote_endpoint,\n                                      [this](const boost::system::error_code& error, std::size_t bytes_transferred) {\n                                          HandleReceive(error, bytes_transferred);\n                                      });\n        }\n\n        void HandleReceive(const boost::system::error_code& error, std::size_t bytes_transferred) {\n            if (!error) {\n                std::unique_ptr<Packet> packet(new Packet(request_buffer.data(), bytes_transferred));\n                if (packet->IsValid()) {\n                    new_request_callback(std::move(packet));\n                }\n            }\n            StartReceive();\n        }\n\n        void SendReply(const boost::asio::ip::udp::endpoint& endpoint, Packet& packet) {\n            socket.async_send_to(boost::asio::buffer(packet.Data(), packet.Size()),\n                                 endpoint,\n                                 [this](const boost::system::error_code&, std::size_t) {});\n        }\n    };\n};\n\n} // namespace udp\n} // namespace ip\n} // namespace asio\n} // namespace boost\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <memory>\n#include <array>\n#include <functional>\n#include <thread>\n\nnamespace boost {\nnamespace asio {\nnamespace ip {\nnamespace udp {\n\nclass UDPServer {\npublic:\n    class Impl {\n        std::thread worker_thread;\n        boost::asio::io_context io_context;\n        boost::asio::ip::udp::socket socket;\n        std::array<u8, MAX_PACKET_SIZE> request_buffer;\n        boost::asio::ip::udp::endpoint remote_endpoint;\n        std::function<void(std::unique_ptr<Packet>)> new_request_callback;\n\n        Impl(std::function<void(std::unique_ptr<Packet>)> callback)\n            : new_request_callback(std::move(callback)) {\n            boost::asio::ip::udp::endpoint local_endpoint(boost::asio::ip::udp::v4(), PORT);\n            socket.open(local_endpoint.protocol());\n            socket.bind(local_endpoint);\n            StartReceive();\n        }\n\n        ~Impl() {\n            io_context.stop();\n            if (worker_thread.joinable()) {\n                worker_thread.join();\n            }\n        }\n\n        void StartReceive() {\n            socket.async_receive_from(boost::asio::buffer(request_buffer),\n                                      remote_endpoint,\n                                      [this](const boost::system::error_code& error, std::size_t bytes_transferred) {\n                                          HandleReceive(error, bytes_transferred);\n                                      });\n        }\n\n        void HandleReceive(const boost::system::error_code& error, std::size_t bytes_transferred) {\n            if (!error) {\n                Packet packet(request_buffer.data(), bytes_transferred);\n                if (packet.IsValid()) {\n                    new_request_callback(std::make_unique<Packet>(packet));\n                }\n            }\n            StartReceive();\n        }\n\n        void SendReply(const boost::asio::ip::udp::endpoint& endpoint, Packet& packet) {\n            socket.async_send_to(boost::asio::buffer(packet.Data(), packet.Size()),\n                                 endpoint,\n                                 [this](const boost::system::error_code&, std::size_t) {\n                                     // Callback if needed\n                                 });\n        }\n    };\n\npublic:\n    UDPServer(std::function<void(std::unique_ptr<Packet>)> callback)\n        : impl(std::make_shared<Impl>(callback)) {}\n\n    ~UDPServer() {}\n\n    void Start() {\n        if (!impl->worker_thread.joinable()) {\n            impl->worker_thread = std::thread([&]() { impl->io_context.run(); });\n        }\n    }\n\n    void Stop() {\n        if (impl->worker_thread.joinable()) {\n            impl->io_context.stop();\n            impl->worker_thread.join();\n        }\n    }\n\n    void SendReply(const boost::asio::ip::udp::endpoint& endpoint, Packet& packet) {\n        impl->SendReply(endpoint, packet);\n    }\n\nprivate:\n    std::shared_ptr<Impl> impl;\n};\n\n} // namespace udp\n} // namespace ip\n} // namespace asio\n} // namespace boost\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <memory>\n#include <array>\n\nnamespace boost {\nnamespace asio {\nnamespace ip {\nnamespace udp {\n\nclass UDPServer {\npublic:\n    class Impl {\n        std::thread worker_thread;\n        boost::asio::io_context io_context;\n        boost::asio::ip::udp::socket socket;\n        std::array<u8, MAX_PACKET_SIZE> request_buffer;\n        boost::asio::ip::udp::endpoint remote_endpoint;\n        std::function<void(std::unique_ptr<Packet>)> new_request_callback;\n\n    public:\n        Impl(std::function<void(std::unique_ptr<Packet>)> callback)\n            : new_request_callback(callback) {\n            boost::asio::ip::udp::endpoint local_endpoint(boost::asio::ip::udp::v4(), PORT);\n            socket.open(local_endpoint.protocol());\n            socket.bind(local_endpoint);\n            StartReceive();\n        }\n\n        ~Impl() {\n            io_context.stop();\n            if (worker_thread.joinable()) {\n                worker_thread.join();\n            }\n        }\n\n        void StartReceive() {\n            socket.async_receive_from(\n                boost::asio::buffer(request_buffer),\n                remote_endpoint,\n                [this](const boost::system::error_code& error, std::size_t bytes_transferred) {\n                    HandleReceive(error, bytes_transferred);\n                });\n        }\n\n        void HandleReceive(const boost::system::error_code& error, std::size_t bytes_transferred) {\n            if (!error) {\n                std::unique_ptr<Packet> packet(new Packet(request_buffer.data(), bytes_transferred));\n                if (packet->IsValid()) {\n                    new_request_callback(std::move(packet));\n                }\n            }\n            StartReceive();\n        }\n\n        void SendReply(const boost::asio::ip::udp::endpoint& endpoint, Packet& packet) {\n            socket.async_send_to(\n                boost::asio::buffer(packet.Data(), packet.Size()),\n                endpoint,\n                [this](const boost::system::error_code&, std::size_t) {});\n        }\n    };\n};\n}\n}\n}\n}\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <memory>\n#include <array>\n\nnamespace boost {\nnamespace asio {\nnamespace ip {\nnamespace udp {\n\nclass UDPServer {\npublic:\n    class Impl {\n        std::thread worker_thread;\n        boost::asio::io_context io_context;\n        boost::asio::ip::udp::socket socket;\n        std::array<u8, MAX_PACKET_SIZE> request_buffer;\n        boost::asio::ip::udp::endpoint remote_endpoint;\n        std::function<void(std::unique_ptr<Packet>)> new_request_callback;\n\n    public:\n        Impl(std::function<void(std::unique_ptr<Packet>)> callback)\n            : new_request_callback(callback) {\n            boost::asio::ip::udp::endpoint local_endpoint(boost::asio::ip::udp::v4(), PORT);\n            socket.open(local_endpoint.protocol());\n            socket.bind(local_endpoint);\n            StartReceive();\n        }\n\n        ~Impl() {\n            io_context.stop();\n            if (worker_thread.joinable()) {\n                worker_thread.join();\n            }\n        }\n\n        void StartReceive() {\n            socket.async_receive_from(boost::asio::buffer(request_buffer),\n                                      remote_endpoint,\n                                      [this](const boost::system::error_code& error, std::size_t bytes_transferred) {\n                                          HandleReceive(error, bytes_transferred);\n                                      });\n        }\n\n        void HandleReceive(const boost::system::error_code& error, std::size_t bytes_transferred) {\n            if (!error) {\n                std::unique_ptr<Packet> packet(new Packet(request_buffer.data(), bytes_transferred));\n                if (packet->IsValid()) {\n                    new_request_callback(std::move(packet));\n                }\n            }\n            StartReceive();\n        }\n\n        void SendReply(const boost::asio::ip::udp::endpoint& endpoint, Packet& packet) {\n            boost::asio::async_send_to(socket,\n                                       boost::asio::buffer(packet.GetData(), packet.GetSize()),\n                                       endpoint,\n                                       [this](const boost::system::error_code&, std::size_t) {});\n        }\n    };\n};\n\n} // namespace udp\n} // namespace ip\n} // namespace asio\n} // namespace boost\n```"
    ],
    "unmatched_results": [
      "```cpp\n#include <boost/asio.hpp>\n#include <memory>\n#include <array>\n\nnamespace boost {\nnamespace asio {\nnamespace ip {\nnamespace udp {\n\nclass UDPServer {\npublic:\n    class Impl {\n        std::thread worker_thread;\n        boost::asio::io_context io_context;\n        boost::asio::ip::udp::socket socket;\n        std::array<u8, MAX_PACKET_SIZE> request_buffer;\n        boost::asio::ip::udp::endpoint remote_endpoint;\n        std::function<void(std::unique_ptr<Packet>)> new_request_callback;\n\n    public:\n        Impl(std::function<void(std::unique_ptr<Packet>)>) {}\n        ~Impl() {}\n        void StartReceive() {}\n        void HandleReceive(const boost::system::error_code&, std::size_t) {}\n        void SendReply(boost::asio::ip::udp::endpoint, Packet&) {}\n    };\n};\n\n} // namespace udp\n} // namespace ip\n} // namespace asio\n} // namespace boost\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <memory>\n#include <array>\n\nnamespace boost {\nnamespace asio {\nnamespace ip {\nnamespace udp {\n\nclass UDPServer {\npublic:\n    class Impl {\n        std::thread worker_thread;\n        boost::asio::io_context io_context;\n        boost::asio::ip::udp::socket socket;\n        std::array<u8, MAX_PACKET_SIZE> request_buffer;\n        boost::asio::ip::udp::endpoint remote_endpoint;\n        std::function<void(std::unique_ptr<Packet>)> new_request_callback;\n\n    public:\n        Impl(std::function<void(std::unique_ptr<Packet>)>) {}\n        ~Impl() {}\n        void StartReceive() {}\n        void HandleReceive(const boost::system::error_code&, std::size_t) {}\n        void SendReply(boost::asio::ip::udp::endpoint, Packet&) {}\n    };\n};\n\n} // namespace udp\n} // namespace ip\n} // namespace asio\n} // namespace boost\n```"
    ],
    "match_count": 8,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 36,
    "Instruction": "Task Description: Create a UDP multicast receiver class using Boost.Asio that listens for incoming datagrams on a specified multicast address and port, and prints received messages to the console.\n\nClass Description: The `receiver` class encapsulates functionality for receiving UDP multicast messages. It initializes a UDP socket, joins a multicast group, and asynchronously receives datagrams, printing their contents to standard output.\n\nAttributes:\n- socket_: boost::asio::ip::udp::socket - The UDP socket used for communication\n- sender_endpoint_: boost::asio::ip::udp::endpoint - Stores the endpoint of the sender of the last received message\n- data_: std::array<char, 1024> - Buffer for storing received data\n\nMethods:\n- receiver(boost::asio::io_context&, const boost::asio::ip::address&, const boost::asio::ip::address&) -> None - Constructor that initializes the socket, binds it to the listening address and port, joins the multicast group, and starts receiving\n- do_receive() -> None - Private method that asynchronously receives data and prints it to console, then continues listening for more data",
    "Canonical_solution": "#include <boost/asio.hpp>\n#include <array>\n#include <string>\n\nconstexpr short multicast_port = 30001;\n\nclass receiver\n{\npublic:\n  receiver(boost::asio::io_context& io_context,\n      const boost::asio::ip::address& listen_address,\n      const boost::asio::ip::address& multicast_address)\n    : socket_(io_context)\n  {\n    // Create the socket so that multiple may be bound to the same address.\n    boost::asio::ip::udp::endpoint listen_endpoint(\n        listen_address, multicast_port);\n    socket_.open(listen_endpoint.protocol());\n    socket_.set_option(boost::asio::ip::udp::socket::reuse_address(true));\n    socket_.bind(listen_endpoint);\n\n    // Join the multicast group.\n    socket_.set_option(\n        boost::asio::ip::multicast::join_group(multicast_address));\n\n    do_receive();\n  }\n\nprivate:\n  void do_receive()\n  {\n    socket_.async_receive_from(\n        boost::asio::buffer(data_), sender_endpoint_,\n        [this](boost::system::error_code ec, std::size_t length)\n        {\n          if (!ec)\n          {\n            std::cout.write(data_.data(), length);\n            std::cout << std::endl;\n\n            do_receive();\n          }\n        });\n  }\n\n  boost::asio::ip::udp::socket socket_;\n  boost::asio::ip::udp::endpoint sender_endpoint_;\n  std::array<char, 1024> data_;\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 153,
    "matched_results": [
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <array>\n\nnamespace boost {\nnamespace asio {\nnamespace ip {\nclass udp;\n}\n}\n}\n\nclass receiver {\npublic:\n    receiver(boost::asio::io_context& io_context, const boost::asio::ip::address& local_address, const boost::asio::ip::address& multicast_address)\n        : socket_(io_context), sender_endpoint_(boost::asio::ip::udp::endpoint(local_address, 0)), data_(1024) {\n        socket_.open(boost::asio::ip::udp::v4());\n        socket_.set_option(boost::asio::ip::udp::socket::reuse_address(true));\n        socket_.bind(sender_endpoint_);\n        socket_.set_option(boost::asio::ip::multicast::join_group(multicast_address));\n        do_receive();\n    }\n\nprivate:\n    void do_receive() {\n        socket_.async_receive_from(boost::asio::buffer(data_), sender_endpoint_, [this](const boost::system::error_code& error, std::size_t length) {\n            if (!error) {\n                std::cout << std::string(data_.data(), length) << std::endl;\n            }\n            do_receive();\n        });\n    }\n\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint sender_endpoint_;\n    std::array<char, 1024> data_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <array>\n\nnamespace boost {\nnamespace asio {\nnamespace ip {\nclass udp;\n}\n}\n}\n\nclass receiver {\npublic:\n    receiver(boost::asio::io_context& io_context, const boost::asio::ip::address& local_address, const boost::asio::ip::address& multicast_address)\n        : socket_(io_context), sender_endpoint_(boost::asio::ip::udp::endpoint(local_address, 0)), data_(1024) {\n        socket_.open(boost::asio::ip::udp::v4());\n        socket_.set_option(boost::asio::ip::udp::socket::reuse_address(true));\n        socket_.bind(sender_endpoint_);\n        socket_.set_option(boost::asio::ip::udp::socket::multicast_interface(local_address));\n        socket_.join_multicast_group(multicast_address, sender_endpoint_);\n        do_receive();\n    }\n\nprivate:\n    void do_receive() {\n        socket_.async_receive_from(boost::asio::buffer(data_), sender_endpoint_, [this](const boost::system::error_code& error, std::size_t length) {\n            if (!error) {\n                std::cout << \"Received: \" << std::string(data_.data(), length) << std::endl;\n            }\n            do_receive();\n        });\n    }\n\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint sender_endpoint_;\n    std::array<char, 1024> data_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <array>\n\nnamespace boost {\nnamespace asio {\nnamespace ip {\nclass udp;\n}\n}\n}\n\nclass receiver {\nprivate:\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint sender_endpoint_;\n    std::array<char, 1024> data_;\n\npublic:\n    receiver(boost::asio::io_context& io_context, const boost::asio::ip::address& local_address, const boost::asio::ip::address& multicast_address)\n        : socket_(io_context), sender_endpoint_(boost::asio::ip::udp::v4()) {\n        boost::asio::ip::udp::endpoint local_endpoint(local_address, 0);\n        socket_.open(local_endpoint.protocol());\n        socket_.bind(local_endpoint);\n        socket_.set_option(boost::asio::ip::udp::socket::reuse_address(true));\n        socket_.join_multicast_group(multicast_address, local_address);\n        do_receive();\n    }\n\nprivate:\n    void do_receive() {\n        socket_.async_receive_from(boost::asio::buffer(data_), sender_endpoint_,\n            [this](boost::system::error_code ec, std::size_t length) {\n                if (!ec) {\n                    std::cout << \"Received: \" << std::string(data_.data(), length) << std::endl;\n                }\n                do_receive();\n            });\n    }\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <array>\n\nnamespace boost {\nnamespace asio {\nnamespace ip {\nclass udp;\n}\n}\n}\n\nclass receiver {\nprivate:\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint sender_endpoint_;\n    std::array<char, 1024> data_;\n\npublic:\n    receiver(boost::asio::io_context& io_context, const boost::asio::ip::address& local_address, const boost::asio::ip::address& multicast_address)\n        : socket_(io_context), sender_endpoint_(boost::asio::ip::udp::v4()) {\n        boost::asio::ip::udp::endpoint local_endpoint(local_address, 0);\n        socket_.open(local_endpoint.protocol());\n        socket_.bind(local_endpoint);\n        socket_.set_option(boost::asio::ip::udp::socket::reuse_address(true));\n        socket_.join_multicast_group(multicast_address, local_address);\n        do_receive();\n    }\n\nprivate:\n    void do_receive() {\n        socket_.async_receive_from(boost::asio::buffer(data_), sender_endpoint_,\n            [this](boost::system::error_code ec, std::size_t length) {\n                if (!ec) {\n                    std::cout << \"Received: \" << std::string(data_.data(), length) << std::endl;\n                }\n                do_receive();\n            });\n    }\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <array>\n\nnamespace boost {\nnamespace asio {\nnamespace ip {\nclass udp;\n}\n}\n}\n\nclass receiver {\npublic:\n    receiver(boost::asio::io_context& io_context, const boost::asio::ip::address& local_address, const boost::asio::ip::address& multicast_address)\n        : socket_(io_context), sender_endpoint_(boost::asio::ip::udp::endpoint(local_address, 0)), data_(1024) {\n        socket_.open(boost::asio::ip::udp::v4());\n        socket_.set_option(boost::asio::ip::udp::socket::reuse_address(true));\n        socket_.bind(sender_endpoint_);\n        socket_.set_option(boost::asio::ip::udp::socket::multicast_interface(local_address));\n        socket_.join_multicast_group(multicast_address, sender_endpoint_);\n        do_receive();\n    }\n\nprivate:\n    void do_receive() {\n        socket_.async_receive_from(boost::asio::buffer(data_), sender_endpoint_, [this](const boost::system::error_code& error, std::size_t length) {\n            if (!error) {\n                std::cout << std::string(data_.data(), length) << std::endl;\n            }\n            do_receive();\n        });\n    }\n\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint sender_endpoint_;\n    std::array<char, 1024> data_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <array>\n\nnamespace boost {\nnamespace asio {\nnamespace ip {\nclass udp;\n}\n}\n}\n\nclass receiver {\nprivate:\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint sender_endpoint_;\n    std::array<char, 1024> data_;\n\npublic:\n    receiver(boost::asio::io_context& io_context, const boost::asio::ip::address& local_address, const boost::asio::ip::address& multicast_address)\n        : socket_(io_context), sender_endpoint_(boost::asio::ip::udp::v4()) {\n        boost::asio::ip::udp::endpoint local_endpoint(local_address, 0);\n        socket_.open(local_endpoint.protocol());\n        socket_.bind(local_endpoint);\n        socket_.set_option(boost::asio::ip::udp::socket::reuse_address(true));\n        socket_.join_group(multicast_address, local_address);\n        do_receive();\n    }\n\nprivate:\n    void do_receive() {\n        socket_.async_receive_from(boost::asio::buffer(data_), sender_endpoint_,\n            [this](const boost::system::error_code& error, std::size_t length) {\n                if (!error) {\n                    std::cout << \"Received: \" << std::string(data_.data(), length) << std::endl;\n                }\n                do_receive();\n            });\n    }\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <array>\n\nnamespace boost {\nnamespace asio {\nnamespace ip {\nclass udp;\n}\n}\n}\n\nclass receiver {\npublic:\n    receiver(boost::asio::io_context& io_context, const boost::asio::ip::address& local_address, const boost::asio::ip::address& multicast_address)\n        : socket_(io_context), sender_endpoint_(boost::asio::ip::udp::endpoint(local_address, 0)), data_(1024) {\n        socket_.open(boost::asio::ip::udp::v4());\n        socket_.set_option(boost::asio::ip::udp::socket::reuse_address(true));\n        socket_.bind(sender_endpoint_);\n        socket_.set_option(boost::asio::ip::multicast::join_group(multicast_address));\n        do_receive();\n    }\n\nprivate:\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint sender_endpoint_;\n    std::array<char, 1024> data_;\n\n    void do_receive() {\n        socket_.async_receive_from(boost::asio::buffer(data_), sender_endpoint_, [this](const boost::system::error_code& error, std::size_t length) {\n            if (!error) {\n                std::cout << \"Received: \" << std::string(data_.data(), length) << std::endl;\n            }\n            do_receive();\n        });\n    }\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <array>\n\nnamespace boost {\nnamespace asio {\nnamespace ip {\nclass udp;\n}\n}\n}\n\nclass receiver {\nprivate:\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint sender_endpoint_;\n    std::array<char, 1024> data_;\n\npublic:\n    receiver(boost::asio::io_context& io_context, const boost::asio::ip::address& multicast_group, const boost::asio::ip::address& interface)\n        : socket_(io_context, boost::asio::ip::udp::endpoint(interface, 0)),\n          sender_endpoint_(boost::asio::ip::udp::v4()) {\n        socket_.set_option(boost::asio::ip::udp::join_group(multicast_group, interface));\n        do_receive();\n    }\n\nprivate:\n    void do_receive() {\n        socket_.async_receive_from(boost::asio::buffer(data_), sender_endpoint_,\n            [this](boost::system::error_code ec, std::size_t length) {\n                if (!ec) {\n                    std::cout << \"Received: \" << std::string(data_.data(), length) << std::endl;\n                }\n                do_receive();\n            });\n    }\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <array>\n\nnamespace boost {\nnamespace asio {\nnamespace ip {\nclass udp;\n} // namespace ip\n} // namespace asio\n} // namespace boost\n\nclass receiver {\npublic:\n    receiver(boost::asio::io_context& io_context, const boost::asio::ip::address& local_address, const boost::asio::ip::address& multicast_address)\n        : socket_(io_context), sender_endpoint_(boost::asio::ip::udp::endpoint(local_address, 0)), data_(1024) {\n        socket_.open(boost::asio::ip::udp::v4());\n        socket_.set_option(boost::asio::ip::udp::socket::reuse_address(true));\n        socket_.bind(sender_endpoint_);\n        socket_.set_option(boost::asio::ip::udp::socket::multicast_interface(local_address));\n        socket_.join_multicast_group(multicast_address, sender_endpoint_);\n        do_receive();\n    }\n\nprivate:\n    void do_receive() {\n        socket_.async_receive_from(boost::asio::buffer(data_), sender_endpoint_, [this](const boost::system::error_code& error, std::size_t length) {\n            if (!error) {\n                std::cout << std::string(data_.data(), length) << std::endl;\n            }\n            do_receive();\n        });\n    }\n\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint sender_endpoint_;\n    std::array<char, 1024> data_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <array>\n\nnamespace boost {\nnamespace asio {\nnamespace ip {\nclass udp;\n}\n}\n}\n\nclass receiver {\npublic:\n    receiver(boost::asio::io_context& io_context, const boost::asio::ip::address& local_address, const boost::asio::ip::address& multicast_address)\n        : socket_(io_context), sender_endpoint_(boost::asio::ip::udp::endpoint(local_address, 0)), data_(1024) {\n        socket_.open(boost::asio::ip::udp::v4());\n        socket_.set_option(boost::asio::ip::udp::socket::reuse_address(true));\n        socket_.bind(sender_endpoint_);\n        socket_.set_option(boost::asio::ip::udp::socket::multicast_interface(local_address));\n        socket_.join_multicast_group(multicast_address, sender_endpoint_);\n        do_receive();\n    }\n\nprivate:\n    void do_receive() {\n        socket_.async_receive_from(boost::asio::buffer(data_), sender_endpoint_, [this](const boost::system::error_code& error, std::size_t length) {\n            if (!error) {\n                std::cout << std::string(data_.data(), length) << std::endl;\n            }\n            do_receive();\n        });\n    }\n\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint sender_endpoint_;\n    std::array<char, 1024> data_;\n};\n```"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 37,
    "Instruction": "Task Description: Implement a UDP client function using Boost.Asio that sends a request to a UDP server and receives a response.\n\nFunction Description: The function establishes a UDP connection to a specified host, sends a minimal request packet, waits for a response, and prints the received data to standard output. It uses Boost.Asio for asynchronous UDP operations.\n\nInput: \n- host: std::string - The hostname or IP address of the UDP server to connect to\n\nOutput: \n- None (void function), but prints the received data to standard output\n\nNote: The function uses a fixed service name \"daytime\" (port 13) for demonstration purposes. In a real application, this would typically be configurable. The function handles both IPv4 and UDP protocol operations.",
    "Canonical_solution": "#include <array>\n#include <boost/asio.hpp>\nusing boost::asio::ip::udp;\n\nvoid udp_client(const std::string& host)\n{\n    boost::asio::io_context io_context;\n\n    udp::resolver resolver(io_context);\n    udp::endpoint receiver_endpoint =\n      *resolver.resolve(udp::v4(), host, \"daytime\").begin();\n\n    udp::socket socket(io_context);\n    socket.open(udp::v4());\n\n    std::array<char, 1> send_buf  = {{ 0 }};\n    socket.send_to(boost::asio::buffer(send_buf), receiver_endpoint);\n\n    std::array<char, 128> recv_buf;\n    udp::endpoint sender_endpoint;\n    size_t len = socket.receive_from(\n        boost::asio::buffer(recv_buf), sender_endpoint);\n\n    std::cout.write(recv_buf.data(), len);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 153,
    "matched_results": [
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <string>\n\nvoid udp_client(const std::string& host) {\n    boost::asio::io_context io_context;\n    boost::asio::ip::udp::resolver resolver(io_context);\n    boost::asio::ip::udp::endpoint endpoint = *resolver.resolve(boost::asio::ip::udp::v4(), host, \"daytime\").begin();\n    boost::asio::ip::udp::socket socket(io_context);\n    socket.open(endpoint.protocol());\n    boost::asio::ip::udp::endpoint sender_endpoint;\n    std::string request = \"daytime\";\n    boost::asio::async_send_to(socket, boost::asio::buffer(request), sender_endpoint,\n        [this, &socket, &sender_endpoint](boost::system::error_code ec, std::size_t /*length*/) {\n            if (!ec) {\n                boost::asio::async_receive_from(socket, boost::asio::buffer(request), sender_endpoint,\n                    [this, &socket, &sender_endpoint](boost::system::error_code ec, std::size_t /*length*/) {\n                        if (!ec) {\n                            std::cout << request << std::endl;\n                        }\n                    });\n            }\n        });\n    io_context.run();\n}\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <string>\n\nvoid udp_client(const std::string& host) {\n    boost::asio::io_context io_context;\n    boost::asio::ip::udp::resolver resolver(io_context);\n    boost::asio::ip::udp::endpoint endpoint = *resolver.resolve(boost::asio::ip::udp::v4(), host, \"daytime\").begin();\n    boost::asio::ip::udp::socket socket(io_context);\n    socket.open(endpoint.protocol());\n    boost::asio::ip::udp::endpoint receiver(endpoint.address(), endpoint.port());\n    std::string request(\"Hello\");\n    socket.send_to(boost::asio::buffer(request), receiver);\n    boost::asio::ip::udp::endpoint senderEndpoint;\n    boost::asio::buffer receive_buffer(1024);\n    size_t length = socket.receive_from(boost::asio::buffer(receive_buffer), senderEndpoint);\n    std::cout << boost::asio::buffer_cast<const char*>(receive_buffer).data() << std::endl;\n    socket.close();\n}\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <string>\n\nvoid udp_client(const std::string& host) {\n    boost::asio::io_context io_context;\n    boost::asio::ip::udp::resolver resolver(io_context);\n    boost::asio::ip::udp::endpoint endpoint = *resolver.resolve(boost::asio::ip::udp::v4(), host, \"daytime\").begin();\n    boost::asio::ip::udp::socket socket(io_context);\n    socket.open(endpoint.protocol());\n    boost::asio::ip::udp::endpoint receiver(endpoint.address(), endpoint.port());\n    std::string request = \"time\";\n    boost::asio::async_send_to(socket, boost::asio::buffer(request), receiver,\n        [](const boost::system::error_code& error, std::size_t /*length*/) {\n            if (!error) {\n                std::cout << \"Received: \" << request << std::endl;\n            }\n        });\n    io_context.run();\n}\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <string>\n\nvoid udp_client(const std::string& host) {\n    boost::asio::io_context io_context;\n    boost::asio::ip::udp::resolver resolver(io_context);\n    boost::asio::ip::udp::endpoint endpoint = *resolver.resolve(boost::asio::ip::udp::v4(), host, \"daytime\").begin();\n    boost::asio::ip::udp::socket socket(io_context);\n    socket.open(endpoint.protocol());\n    boost::asio::ip::udp::endpoint sender_endpoint;\n    std::string request = \"daytime\";\n    boost::asio::async_send_to(socket, boost::asio::buffer(request), sender_endpoint,\n        [](const boost::system::error_code& error, std::size_t bytes_transferred) {\n            if (!error) {\n                std::string response(boost::asio::buffer_cast<const char*>(boost::asio::buffer_cast<void*>(boost::asio::buffer(request)), bytes_transferred));\n                std::cout << response << std::endl;\n            }\n        });\n    io_context.run();\n}\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <string>\n\nvoid udp_client(const std::string& host) {\n    boost::asio::io_context io_context;\n    boost::asio::ip::udp::resolver resolver(io_context);\n    boost::asio::ip::udp::endpoint endpoint = *resolver.resolve(boost::asio::ip::udp::v4(), host, \"daytime\").begin();\n    boost::asio::ip::udp::socket socket(io_context);\n    socket.open(endpoint.protocol());\n    boost::asio::ip::udp::endpoint sender_endpoint;\n    std::string request = \"daytime\";\n    boost::asio::async_send_to(socket, boost::asio::buffer(request), sender_endpoint,\n        [](const boost::system::error_code& error, std::size_t /*length*/) {\n            if (!error) {\n                std::cout << \"Received: \" << request << std::endl;\n            }\n        });\n    socket.shutdown(boost::asio::ip::udp::socket::shutdown_both);\n    socket.close();\n}\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <string>\n\nvoid udp_client(const std::string& host) {\n    boost::asio::io_context io_context;\n    boost::asio::ip::udp::resolver resolver(io_context);\n    boost::asio::ip::udp::endpoint endpoint = *resolver.resolve(boost::asio::ip::udp::v4(), host, \"daytime\").begin();\n    boost::asio::ip::udp::socket socket(io_context);\n    socket.open(endpoint.protocol());\n    boost::asio::ip::udp::endpoint receiver(endpoint.address(), endpoint.port());\n    std::string request = \"GET\";\n    boost::asio::async_send_to(socket, boost::asio::buffer(request), receiver,\n        [](const boost::system::error_code& error, std::size_t bytes_transferred) {\n            if (!error) {\n                std::string response(boost::asio::buffer_cast<const char*>(boost::asio::buffer_cast<void*>(boost::asio::buffer(request) + bytes_transferred)), bytes_transferred);\n                std::cout << response << std::endl;\n            }\n        });\n    io_context.run();\n}\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <string>\n\nvoid udp_client(const std::string& host) {\n    boost::asio::io_context io_context;\n    boost::asio::ip::udp::resolver resolver(io_context);\n    boost::asio::ip::udp::endpoint endpoint = *resolver.resolve(boost::asio::ip::udp::v4(), host, \"daytime\").begin();\n    boost::asio::ip::udp::socket socket(io_context);\n    socket.open(endpoint.protocol());\n    boost::asio::ip::udp::endpoint receiver(endpoint.address(), endpoint.port());\n    std::string request = \"time\";\n    boost::asio::async_send_to(socket, boost::asio::buffer(request), receiver,\n        [](const boost::system::error_code& error, std::size_t /*length*/) {\n            if (!error) {\n                std::cout << \"Received: \" << request << std::endl;\n            }\n        });\n    io_context.run();\n}\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <string>\n\nvoid udp_client(const std::string& host) {\n    boost::asio::io_context io_context;\n    boost::asio::ip::udp::resolver resolver(io_context);\n    boost::asio::ip::udp::endpoint endpoint = *resolver.resolve(boost::asio::ip::udp::v4(), host, \"daytime\").begin();\n    boost::asio::ip::udp::socket socket(io_context);\n    socket.open(boost::asio::ip::udp::v4());\n    socket.send_to(boost::asio::buffer(\"GET\"), endpoint);\n    boost::asio::ip::udp::endpoint senderEndpoint;\n    boost::asio::buffer receiveBuffer(1024);\n    socket.receive_from(boost::asio::buffer(receiveBuffer), senderEndpoint);\n    std::cout << boost::asio::buffer_cast<const char*>(receiveBuffer) << std::endl;\n}\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <string>\n\nvoid udp_client(const std::string& host) {\n    boost::asio::io_context io_context;\n    boost::asio::ip::udp::resolver resolver(io_context);\n    boost::asio::ip::udp::endpoint endpoint = *resolver.resolve(boost::asio::ip::udp::v4(), host, \"daytime\").begin();\n    boost::asio::ip::udp::socket socket(io_context);\n    socket.open(endpoint.protocol());\n    boost::asio::ip::udp::endpoint senderEndpoint;\n    std::string request = \"daytime\";\n    boost::asio::async_send_to(socket, boost::asio::buffer(request), senderEndpoint,\n        [this, &socket, &request](boost::system::error_code ec, std::size_t /*length*/) {\n            if (!ec) {\n                boost::asio::async_receive_from(socket, boost::asio::buffer(request), senderEndpoint,\n                    [this, &socket, &request](boost::system::error_code ec, std::size_t /*length*/) {\n                        if (!ec) {\n                            std::cout << request << std::endl;\n                        }\n                    });\n            }\n        });\n    io_context.run();\n}\n```"
    ],
    "unmatched_results": [
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <string>\n\nvoid udp_client(const std::string& host) {\n    boost::asio::io_context io_context;\n    boost::asio::ip::udp::resolver resolver(io_context);\n    boost::asio::ip::udp::endpoint endpoint = *resolver.resolve(boost::asio::ip::udp::v4(), host, \"daytime\").begin();\n    boost::asio::ip::udp::socket socket(io_context);\n    socket.open(endpoint.protocol());\n    boost::asio::ip::udp::endpoint receiver(endpoint.address(), endpoint.port());\n    std::string request = \"daytime\";\n    boost::asio::async_write(socket, boost::asio::buffer(request), [](const boost::system::error_code& error, std::size_t /*length*/) {\n        if (!error) {\n            std::cout << \"Received: \" << request << std::endl;\n        }\n    });\n    boost::asio::async_read(socket, boost::asio::buffer(request), [](const boost::system::error_code& error, std::size_t /*length*/) {\n        if (!error) {\n            std::cout << \"Received: \" << request << std::endl;\n        }\n    });\n    io_context.run();\n}\n```"
    ],
    "match_count": 9,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 38,
    "Instruction": "Task Description: Implement a UDP-based client-server communication system using Boost.Asio in C++ that demonstrates asynchronous sending and receiving of datagrams.\n\nClass Description: The `udp_communicator` class provides asynchronous UDP communication capabilities for both sending and receiving datagrams. It manages socket operations, IO context, and buffers for network communication.\n\nAttributes:\n- io_context_: boost::asio::io_context - Manages asynchronous operations for Boost.Asio\n- socket_: boost::asio::ip::udp::socket - Represents the UDP socket for communication\n- receiver_endpoint_: boost::asio::ip::udp::endpoint - Stores the endpoint information for receiving data\n- sender_endpoint_: boost::asio::ip::udp::endpoint - Stores the endpoint information of the sender\n- receive_buffer_: std::array<char, 1024> - Buffer for storing received data\n- send_buffer_: std::string - Buffer for storing data to be sent\n\nMethods:\n- constructor(io_context, port) -> void - Initializes the UDP socket and binds it to the specified port\n- start_receive() -> void - Begins asynchronous reception of UDP datagrams\n- handle_receive(error_code, bytes_transferred) -> void - Callback for handling received data\n- send_to(message, endpoint) -> void - Asynchronously sends a message to the specified endpoint\n- handle_send(error_code, bytes_transferred) -> void - Callback for handling send completion\n- get_socket() -> boost::asio::ip::udp::socket& - Returns a reference to the UDP socket\n- get_io_context() -> boost::asio::io_context& - Returns a reference to the IO context",
    "Canonical_solution": "#include <boost/asio.hpp>\n#include <istream>\n#include <ostream>\n#include \"icmp_header.hpp\"\n#include \"ipv4_header.hpp\"\n\nusing boost::asio::ip::icmp;\nusing boost::asio::steady_timer;\nnamespace chrono = boost::asio::chrono;\n\nclass pinger\n{\npublic:\n  pinger(boost::asio::io_context& io_context, const char* destination)\n    : resolver_(io_context), socket_(io_context, icmp::v4()),\n      timer_(io_context), sequence_number_(0), num_replies_(0)\n  {\n    destination_ = *resolver_.resolve(icmp::v4(), destination, \"\").begin();\n\n    start_send();\n    start_receive();\n  }\n\nprivate:\n  void start_send()\n  {\n    std::string body(\"\\\"Hello!\\\" from Asio ping.\");\n\n    icmp_header echo_request;\n    echo_request.type(icmp_header::echo_request);\n    echo_request.code(0);\n    echo_request.identifier(get_identifier());\n    echo_request.sequence_number(++sequence_number_);\n    compute_checksum(echo_request, body.begin(), body.end());\n\n    boost::asio::streambuf request_buffer;\n    std::ostream os(&request_buffer);\n    os << echo_request << body;\n\n    time_sent_ = steady_timer::clock_type::now();\n    socket_.send_to(request_buffer.data(), destination_);\n\n    num_replies_ = 0;\n    timer_.expires_at(time_sent_ + chrono::seconds(5));\n    timer_.async_wait(std::bind(&pinger::handle_timeout, this));\n  }\n\n  void handle_timeout()\n  {\n    if (num_replies_ == 0)\n      std::cout << \"Request timed out\" << std::endl;\n\n    timer_.expires_at(time_sent_ + chrono::seconds(1));\n    timer_.async_wait(std::bind(&pinger::start_send, this));\n  }\n\n  void start_receive()\n  {\n    reply_buffer_.consume(reply_buffer_.size());\n\n    socket_.async_receive(reply_buffer_.prepare(65536),\n        std::bind(&pinger::handle_receive, this, std::placeholders::_2));\n  }\n\n  void handle_receive(std::size_t length)\n  {\n    reply_buffer_.commit(length);\n\n    std::istream is(&reply_buffer_);\n    ipv4_header ipv4_hdr;\n    icmp_header icmp_hdr;\n    is >> ipv4_hdr >> icmp_hdr;\n\n    if (is && icmp_hdr.type() == icmp_header::echo_reply\n          && icmp_hdr.identifier() == get_identifier()\n          && icmp_hdr.sequence_number() == sequence_number_)\n    {\n      if (num_replies_++ == 0)\n        timer_.cancel();\n\n      chrono::steady_clock::time_point now = chrono::steady_clock::now();\n      chrono::steady_clock::duration elapsed = now - time_sent_;\n      std::cout << length - ipv4_hdr.header_length()\n        << \" bytes from \" << ipv4_hdr.source_address()\n        << \": icmp_seq=\" << icmp_hdr.sequence_number()\n        << \", ttl=\" << ipv4_hdr.time_to_live()\n        << \", time=\"\n        << chrono::duration_cast<chrono::milliseconds>(elapsed).count()\n        << std::endl;\n    }\n\n    start_receive();\n  }\n\n  static unsigned short get_identifier()\n  {\n#if defined(BOOST_ASIO_WINDOWS)\n    return static_cast<unsigned short>(::GetCurrentProcessId());\n#else\n    return static_cast<unsigned short>(::getpid());\n#endif\n  }\n\n  icmp::resolver resolver_;\n  icmp::endpoint destination_;\n  icmp::socket socket_;\n  steady_timer timer_;\n  unsigned short sequence_number_;\n  chrono::steady_clock::time_point time_sent_;\n  boost::asio::streambuf reply_buffer_;\n  std::size_t num_replies_;\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 153,
    "matched_results": [
      "```cpp\n#include <boost/asio.hpp>\n#include <array>\n#include <string>\n\nclass udp_communicator {\npublic:\n    udp_communicator(boost::asio::io_context& io_context, unsigned short port)\n        : io_context_(io_context), socket_(io_context), receiver_endpoint_(boost::asio::ip::udp::v4(), port),\n          sender_endpoint_(boost::asio::ip::udp::v4()), receive_buffer_(1024), send_buffer_() {\n        socket_.open(receiver_endpoint_.protocol());\n        socket_.bind(receiver_endpoint_);\n    }\n\n    void start_receive() {\n        socket_.async_receive_from(boost::asio::buffer(receive_buffer_), receiver_endpoint_,\n                                   &udp_communicator::handle_receive, this);\n    }\n\n    void handle_receive(const boost::system::error_code& error, std::size_t bytes_transferred) {\n        if (!error) {\n            std::string received_data(receive_buffer_.begin(), receive_buffer_.begin() + bytes_transferred);\n            // Process received data\n        }\n        start_receive();\n    }\n\n    void send_to(const std::string& message, const boost::asio::ip::udp::endpoint& endpoint) {\n        boost::asio::async_send_to(socket_, boost::asio::buffer(message), endpoint,\n                                   &udp_communicator::handle_send, this);\n    }\n\n    void handle_send(const boost::system::error_code& error, std::size_t bytes_transferred) {\n        if (!error) {\n            // Send was successful\n        }\n    }\n\n    boost::asio::ip::udp::socket& get_socket() {\n        return socket_;\n    }\n\n    boost::asio::io_context& get_io_context() {\n        return io_context_;\n    }\n\nprivate:\n    boost::asio::io_context& io_context_;\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint receiver_endpoint_;\n    boost::asio::ip::udp::endpoint sender_endpoint_;\n    std::array<char, 1024> receive_buffer_;\n    std::string send_buffer_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <array>\n#include <string>\n\nclass udp_communicator {\npublic:\n    udp_communicator(boost::asio::io_context& io_context, unsigned short port)\n        : io_context_(io_context), socket_(io_context), receiver_endpoint_(boost::asio::ip::udp::v4(), port), sender_endpoint_(),\n          receive_buffer_(1024), send_buffer_() {\n        socket_.open(receiver_endpoint_.protocol());\n        socket_.bind(receiver_endpoint_);\n    }\n\n    void start_receive() {\n        socket_.async_receive_from(boost::asio::buffer(receive_buffer_), receiver_endpoint_, &udp_communicator::handle_receive, this);\n    }\n\n    void handle_receive(const boost::system::error_code& error, std::size_t bytes_transferred) {\n        if (!error) {\n            std::string received_data(receive_buffer_.data(), bytes_transferred);\n            // Process received data\n        }\n        start_receive();\n    }\n\n    void send_to(const std::string& message, const boost::asio::ip::udp::endpoint& endpoint) {\n        send_buffer_ = message;\n        socket_.async_send_to(boost::asio::buffer(send_buffer_), endpoint, &udp_communicator::handle_send, this);\n    }\n\n    void handle_send(const boost::system::error_code& error, std::size_t bytes_transferred) {\n        if (!error) {\n            // Send was successful\n        }\n    }\n\n    boost::asio::ip::udp::socket& get_socket() {\n        return socket_;\n    }\n\n    boost::asio::io_context& get_io_context() {\n        return io_context_;\n    }\n\nprivate:\n    boost::asio::io_context& io_context_;\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint receiver_endpoint_;\n    boost::asio::ip::udp::endpoint sender_endpoint_;\n    std::array<char, 1024> receive_buffer_;\n    std::string send_buffer_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <array>\n#include <string>\n\nclass udp_communicator {\npublic:\n    udp_communicator(boost::asio::io_context& io_context, unsigned short port)\n        : io_context_(io_context), socket_(io_context), receiver_endpoint_(boost::asio::ip::udp::v4(), port),\n          sender_endpoint_(boost::asio::ip::udp::v4()), receive_buffer_(1024), send_buffer_() {\n        socket_.open(receiver_endpoint_.protocol());\n        socket_.bind(receiver_endpoint_);\n    }\n\n    void start_receive() {\n        socket_.async_receive_from(boost::asio::buffer(receive_buffer_), receiver_endpoint_,\n                                   &udp_communicator::handle_receive, this);\n    }\n\n    void handle_receive(const boost::system::error_code& error, std::size_t bytes_transferred) {\n        if (!error) {\n            // Process received data\n        }\n    }\n\n    void send_to(const std::string& message, const boost::asio::ip::udp::endpoint& endpoint) {\n        send_buffer_ = message;\n        socket_.async_send_to(boost::asio::buffer(send_buffer_), endpoint,\n                               &udp_communicator::handle_send, this);\n    }\n\n    void handle_send(const boost::system::error_code& error, std::size_t bytes_transferred) {\n        if (!error) {\n            // Handle send completion\n        }\n    }\n\n    boost::asio::ip::udp::socket& get_socket() {\n        return socket_;\n    }\n\n    boost::asio::io_context& get_io_context() {\n        return io_context_;\n    }\n\nprivate:\n    boost::asio::io_context& io_context_;\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint receiver_endpoint_;\n    boost::asio::ip::udp::endpoint sender_endpoint_;\n    std::array<char, 1024> receive_buffer_;\n    std::string send_buffer_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <array>\n#include <string>\n\nclass udp_communicator {\npublic:\n    udp_communicator(boost::asio::io_context& io_context, unsigned short port)\n        : io_context_(io_context), socket_(io_context), receiver_endpoint_(boost::asio::ip::udp::v4(), port), send_buffer_() {\n        socket_.open(receiver_endpoint_.protocol());\n        socket_.bind(receiver_endpoint_);\n    }\n\n    void start_receive() {\n        socket_.async_receive_from(boost::asio::buffer(receive_buffer_), receiver_endpoint_, &handle_receive);\n    }\n\n    void handle_receive(const boost::system::error_code& error, std::size_t bytes_transferred) {\n        if (!error) {\n            // Process received data\n        }\n    }\n\n    void send_to(const std::string& message, const boost::asio::ip::udp::endpoint& endpoint) {\n        boost::asio::async_send_to(socket_, boost::asio::buffer(message), endpoint, &handle_send);\n    }\n\n    void handle_send(const boost::system::error_code& error, std::size_t bytes_transferred) {\n        if (!error) {\n            // Handle send completion\n        }\n    }\n\n    boost::asio::ip::udp::socket& get_socket() {\n        return socket_;\n    }\n\n    boost::asio::io_context& get_io_context() {\n        return io_context_;\n    }\n\nprivate:\n    boost::asio::io_context& io_context_;\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint receiver_endpoint_;\n    boost::asio::ip::udp::endpoint sender_endpoint_;\n    std::array<char, 1024> receive_buffer_;\n    std::string send_buffer_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <array>\n#include <string>\n\nclass udp_communicator {\npublic:\n    udp_communicator(boost::asio::io_context& io_context, unsigned short port)\n        : io_context_(io_context), socket_(io_context), receiver_endpoint_(boost::asio::ip::udp::v4(), port) {\n        socket_.open(receiver_endpoint_.protocol());\n        socket_.bind(receiver_endpoint_);\n    }\n\n    void start_receive() {\n        socket_.async_receive_from(boost::asio::buffer(receive_buffer_), receiver_endpoint_, &handle_receive);\n    }\n\n    void handle_receive(const boost::system::error_code& error, std::size_t bytes_transferred) {\n        if (!error) {\n            // Process received data\n        }\n    }\n\n    void send_to(const std::string& message, const boost::asio::ip::udp::endpoint& endpoint) {\n        boost::asio::async_send_to(socket_, boost::asio::buffer(message), endpoint, &handle_send);\n    }\n\n    void handle_send(const boost::system::error_code& error, std::size_t bytes_transferred) {\n        if (!error) {\n            // Handle send completion\n        }\n    }\n\n    boost::asio::ip::udp::socket& get_socket() {\n        return socket_;\n    }\n\n    boost::asio::io_context& get_io_context() {\n        return io_context_;\n    }\n\nprivate:\n    boost::asio::io_context& io_context_;\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint receiver_endpoint_;\n    boost::asio::ip::udp::endpoint sender_endpoint_;\n    std::array<char, 1024> receive_buffer_;\n    std::string send_buffer_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <array>\n#include <string>\n\nclass udp_communicator {\npublic:\n    udp_communicator(boost::asio::io_context& io_context, unsigned short port)\n        : io_context_(io_context), socket_(io_context), receiver_endpoint_(boost::asio::ip::udp::v4(), port), send_buffer_() {\n        socket_.open(receiver_endpoint_.protocol());\n        socket_.bind(receiver_endpoint_);\n    }\n\n    void start_receive() {\n        socket_.async_receive_from(boost::asio::buffer(receive_buffer_), receiver_endpoint_, &handle_receive);\n    }\n\n    void handle_receive(const boost::system::error_code& error, std::size_t bytes_transferred) {\n        if (!error) {\n            // Process received data\n        }\n    }\n\n    void send_to(const std::string& message, const boost::asio::ip::udp::endpoint& endpoint) {\n        boost::asio::async_send_to(socket_, boost::asio::buffer(message), endpoint, &handle_send);\n    }\n\n    void handle_send(const boost::system::error_code& error, std::size_t bytes_transferred) {\n        if (!error) {\n            // Handle send completion\n        }\n    }\n\n    boost::asio::ip::udp::socket& get_socket() {\n        return socket_;\n    }\n\n    boost::asio::io_context& get_io_context() {\n        return io_context_;\n    }\n\nprivate:\n    boost::asio::io_context& io_context_;\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint receiver_endpoint_;\n    boost::asio::ip::udp::endpoint sender_endpoint_;\n    std::array<char, 1024> receive_buffer_;\n    std::string send_buffer_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <array>\n#include <string>\n\nclass udp_communicator {\npublic:\n    udp_communicator(boost::asio::io_context& io_context, unsigned short port)\n        : io_context_(io_context), socket_(io_context), receiver_endpoint_(boost::asio::ip::udp::v4(), port), send_buffer_() {\n        socket_.open(receiver_endpoint_.protocol());\n        socket_.bind(receiver_endpoint_);\n    }\n\n    void start_receive() {\n        socket_.async_receive_from(boost::asio::buffer(receive_buffer_), receiver_endpoint_, &handle_receive);\n    }\n\n    void handle_receive(const boost::system::error_code& error, std::size_t bytes_transferred) {\n        if (!error) {\n            // Process received data\n        }\n    }\n\n    void send_to(const std::string& message, const boost::asio::ip::udp::endpoint& endpoint) {\n        boost::asio::async_send_to(socket_, boost::asio::buffer(message), endpoint, &handle_send);\n    }\n\n    void handle_send(const boost::system::error_code& error, std::size_t bytes_transferred) {\n        if (!error) {\n            // Handle send completion\n        }\n    }\n\n    boost::asio::ip::udp::socket& get_socket() {\n        return socket_;\n    }\n\n    boost::asio::io_context& get_io_context() {\n        return io_context_;\n    }\n\nprivate:\n    boost::asio::io_context& io_context_;\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint receiver_endpoint_;\n    boost::asio::ip::udp::endpoint sender_endpoint_;\n    std::array<char, 1024> receive_buffer_;\n    std::string send_buffer_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <array>\n#include <string>\n\nclass udp_communicator {\npublic:\n    udp_communicator(boost::asio::io_context& io_context, unsigned short port)\n        : io_context_(io_context), socket_(io_context), receiver_endpoint_(boost::asio::ip::udp::v4(), port), send_buffer_() {\n        socket_.open(receiver_endpoint_.protocol());\n        socket_.bind(receiver_endpoint_);\n    }\n\n    void start_receive() {\n        socket_.async_receive_from(boost::asio::buffer(receive_buffer_), receiver_endpoint_, &handle_receive);\n    }\n\n    void handle_receive(const boost::system::error_code& error, std::size_t bytes_transferred) {\n        if (!error) {\n            // Process received data\n        }\n    }\n\n    void send_to(const std::string& message, const boost::asio::ip::udp::endpoint& endpoint) {\n        boost::asio::async_send_to(socket_, boost::asio::buffer(message), endpoint, &handle_send);\n    }\n\n    void handle_send(const boost::system::error_code& error, std::size_t bytes_transferred) {\n        if (!error) {\n            // Handle send completion\n        }\n    }\n\n    boost::asio::ip::udp::socket& get_socket() {\n        return socket_;\n    }\n\n    boost::asio::io_context& get_io_context() {\n        return io_context_;\n    }\n\nprivate:\n    boost::asio::io_context& io_context_;\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint receiver_endpoint_;\n    boost::asio::ip::udp::endpoint sender_endpoint_;\n    std::array<char, 1024> receive_buffer_;\n    std::string send_buffer_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <array>\n#include <string>\n\nclass udp_communicator {\npublic:\n    udp_communicator(boost::asio::io_context& io_context, unsigned short port)\n        : io_context_(io_context), socket_(io_context), receiver_endpoint_(boost::asio::ip::udp::v4(), port) {\n        socket_.open(receiver_endpoint_.protocol());\n        socket_.bind(receiver_endpoint_);\n    }\n\n    void start_receive() {\n        socket_.async_receive_from(boost::asio::buffer(receive_buffer_), receiver_endpoint_, &handle_receive);\n    }\n\n    void handle_receive(const boost::system::error_code& error, std::size_t bytes_transferred) {\n        if (!error) {\n            // Process received data\n        }\n    }\n\n    void send_to(const std::string& message, const boost::asio::ip::udp::endpoint& endpoint) {\n        boost::asio::async_send_to(socket_, boost::asio::buffer(message), endpoint, &handle_send);\n    }\n\n    void handle_send(const boost::system::error_code& error, std::size_t bytes_transferred) {\n        if (!error) {\n            // Handle send completion\n        }\n    }\n\n    boost::asio::ip::udp::socket& get_socket() {\n        return socket_;\n    }\n\n    boost::asio::io_context& get_io_context() {\n        return io_context_;\n    }\n\nprivate:\n    boost::asio::io_context& io_context_;\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint receiver_endpoint_;\n    boost::asio::ip::udp::endpoint sender_endpoint_;\n    std::array<char, 1024> receive_buffer_;\n    std::string send_buffer_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <array>\n#include <string>\n\nclass udp_communicator {\npublic:\n    udp_communicator(boost::asio::io_context& io_context, unsigned short port)\n        : io_context_(io_context), socket_(io_context), receiver_endpoint_(boost::asio::ip::udp::v4(), port), send_buffer_() {\n        socket_.open(receiver_endpoint_.protocol());\n        socket_.bind(receiver_endpoint_);\n    }\n\n    void start_receive() {\n        socket_.async_receive_from(boost::asio::buffer(receive_buffer_), receiver_endpoint_, &handle_receive);\n    }\n\n    void handle_receive(const boost::system::error_code& error, std::size_t bytes_transferred) {\n        if (!error) {\n            // Process received data\n        }\n    }\n\n    void send_to(const std::string& message, const boost::asio::ip::udp::endpoint& endpoint) {\n        boost::asio::async_send_to(socket_, boost::asio::buffer(message), endpoint, &handle_send);\n    }\n\n    void handle_send(const boost::system::error_code& error, std::size_t bytes_transferred) {\n        if (!error) {\n            // Handle send completion\n        }\n    }\n\n    boost::asio::ip::udp::socket& get_socket() {\n        return socket_;\n    }\n\n    boost::asio::io_context& get_io_context() {\n        return io_context_;\n    }\n\nprivate:\n    boost::asio::io_context& io_context_;\n    boost::asio::ip::udp::socket socket_;\n    boost::asio::ip::udp::endpoint receiver_endpoint_;\n    boost::asio::ip::udp::endpoint sender_endpoint_;\n    std::array<char, 1024> receive_buffer_;\n    std::string send_buffer_;\n};\n```"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 39,
    "Instruction": "Task Description: Implement a server class that handles both TCP and UDP communications using Boost.Asio, managing client subscriptions and broadcasting data frames to subscribed clients.\n\nClass Description: The `server` class manages network communications using both TCP and UDP protocols. It accepts TCP connections for control messages, maintains a set of subscribed UDP endpoints, and periodically broadcasts data frames to all subscribed clients via UDP.\n\nAttributes:\n- acceptor_: [tcp::acceptor] - Handles incoming TCP connections\n- timer_: [boost::asio::steady_timer] - Manages periodic operations\n- udp_socket_: [udp::socket] - Handles UDP communications\n- next_frame_number_: [unsigned long] - Tracks the sequence number for frames\n- subscribers_: [std::set<udp::endpoint>] - Stores subscribed client endpoints\n\nMethods:\n- server([boost::asio::io_context&] io_context, [unsigned short] port) -> [void] - Constructor that initializes the server with IO context and port\n- handle_accept([const boost::system::error_code&] ec, [tcp_socket_ptr] socket) -> [void] - Handles new TCP connection acceptances\n- handle_control_request([const boost::system::error_code&] ec, [tcp_socket_ptr] socket, [control_request_ptr] request) -> [void] - Processes control requests from clients\n- handle_control_request_timer([tcp_socket_ptr] socket, [control_request_ptr] request, [timer_ptr] delay_timer) -> [void] - Handles delayed processing of control requests\n- handle_timer() -> [void] - Periodically broadcasts data frames to subscribed clients",
    "Canonical_solution": "#include <boost/asio.hpp>\n#include <set>\n#include <memory>\n#include \"protocol.hpp\"\n\nusing boost::asio::ip::tcp;\nusing boost::asio::ip::udp;\n\ntypedef std::shared_ptr<tcp::socket> tcp_socket_ptr;\ntypedef std::shared_ptr<boost::asio::steady_timer> timer_ptr;\ntypedef std::shared_ptr<control_request> control_request_ptr;\n\nclass server\n{\npublic:\n  server(boost::asio::io_context& io_context, unsigned short port)\n    : acceptor_(io_context, tcp::endpoint(tcp::v4(), port)),\n      timer_(io_context),\n      udp_socket_(io_context, udp::endpoint(udp::v4(), 0)),\n      next_frame_number_(1)\n  {\n    tcp_socket_ptr new_socket(new tcp::socket(acceptor_.get_executor()));\n    acceptor_.async_accept(*new_socket,\n        std::bind(&server::handle_accept, this,\n          boost::asio::placeholders::error, new_socket));\n\n    timer_.expires_after(boost::asio::chrono::milliseconds(100));\n    timer_.async_wait(std::bind(&server::handle_timer, this));\n  }\n\n  void handle_accept(const boost::system::error_code& ec, tcp_socket_ptr socket)\n  {\n    if (!ec)\n    {\n      control_request_ptr request(new control_request);\n      boost::asio::async_read(*socket, request->to_buffers(),\n          std::bind(&server::handle_control_request, this,\n            boost::asio::placeholders::error, socket, request));\n    }\n\n    tcp_socket_ptr new_socket(new tcp::socket(acceptor_.get_executor()));\n    acceptor_.async_accept(*new_socket,\n        std::bind(&server::handle_accept, this,\n          boost::asio::placeholders::error, new_socket));\n  }\n\n  void handle_control_request(const boost::system::error_code& ec,\n      tcp_socket_ptr socket, control_request_ptr request)\n  {\n    if (!ec)\n    {\n      timer_ptr delay_timer(\n          new boost::asio::steady_timer(acceptor_.get_executor()));\n      delay_timer->expires_after(boost::asio::chrono::seconds(2));\n      delay_timer->async_wait(\n          std::bind(&server::handle_control_request_timer, this,\n            socket, request, delay_timer));\n    }\n  }\n\n  void handle_control_request_timer(tcp_socket_ptr socket,\n      control_request_ptr request, timer_ptr /*delay_timer*/)\n  {\n    boost::system::error_code ec;\n    tcp::endpoint remote_endpoint = socket->remote_endpoint(ec);\n    if (!ec)\n    {\n      if (unsigned short old_port = request->old_port())\n      {\n        udp::endpoint old_endpoint(remote_endpoint.address(), old_port);\n        subscribers_.erase(old_endpoint);\n      }\n\n      if (unsigned short new_port = request->new_port())\n      {\n        udp::endpoint new_endpoint(remote_endpoint.address(), new_port);\n        subscribers_.insert(new_endpoint);\n      }\n    }\n\n    boost::asio::async_read(*socket, request->to_buffers(),\n        std::bind(&server::handle_control_request, this,\n          boost::asio::placeholders::error, socket, request));\n  }\n\n  void handle_timer()\n  {\n    double x = next_frame_number_ * 0.2;\n    double y = std::sin(x);\n    int char_index = static_cast<int>((y + 1.0) * (frame::payload_size / 2));\n    std::string payload;\n    for (int i = 0; i < frame::payload_size; ++i)\n      payload += (i == char_index ? '*' : '.');\n\n    frame f(next_frame_number_++, payload);\n\n    std::set<udp::endpoint>::iterator j;\n    for (j = subscribers_.begin(); j != subscribers_.end(); ++j)\n    {\n      boost::system::error_code ec;\n      udp_socket_.send_to(f.to_buffers(), *j, 0, ec);\n    }\n\n    timer_.expires_after(boost::asio::chrono::milliseconds(100));\n    timer_.async_wait(std::bind(&server::handle_timer, this));\n  }\n\nprivate:\n  tcp::acceptor acceptor_;\n  boost::asio::steady_timer timer_;\n  udp::socket udp_socket_;\n  unsigned long next_frame_number_;\n  std::set<udp::endpoint> subscribers_;\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 153,
    "matched_results": [
      "```cpp\n#include <boost/asio.hpp>\n#include <set>\n#include <memory>\n#include <string>\n\nnamespace boost {\nnamespace asio {\nnamespace ip {\nclass udp;\nclass tcp;\n}\n}\n}\n\nclass server {\npublic:\n    server(boost::asio::io_context& io_context, unsigned short port)\n        : acceptor_(io_context, tcp::endpoint(tcp::v4(), port)),\n          timer_(io_context, boost::posix_time::milliseconds(1000)),\n          udp_socket_(io_context),\n          next_frame_number_(0),\n          subscribers_() {\n        start_accept();\n        start_timer();\n    }\n\nprivate:\n    void start_accept() {\n        tcp_socket_ = std::make_shared<tcp::socket>(acceptor_.get_executor().context());\n        acceptor_.async_accept(*tcp_socket_, [this](const boost::system::error_code& ec, tcp::socket socket) {\n            handle_accept(ec, socket);\n        });\n    }\n\n    void handle_accept(const boost::system::error_code& ec, tcp::socket socket) {\n        if (!ec) {\n            handle_control_request(ec, socket, std::make_shared<control_request>());\n        }\n        start_accept();\n    }\n\n    void handle_control_request(const boost::system::error_code& ec, tcp::socket socket, std::shared_ptr<control_request> request) {\n        if (!ec) {\n            handle_control_request_timer(socket, request, std::make_shared<boost::asio::steady_timer>(socket.get_executor().context()));\n        }\n    }\n\n    void handle_control_request_timer(tcp::socket socket, std::shared_ptr<control_request> request, std::shared_ptr<boost::asio::steady_timer> delay_timer) {\n        delay_timer->async_wait([this, socket, request, delay_timer](const boost::system::error_code& ec) {\n            if (!ec) {\n                handle_control_request(ec, socket, request);\n            }\n        });\n    }\n\n    void handle_timer() {\n        timer_.async_wait([this](const boost::system::error_code& ec) {\n            if (!ec) {\n                broadcast_data_frame();\n            }\n        });\n    }\n\n    void broadcast_data_frame() {\n        udp::endpoint broadcastEndpoint(udp::v4(), 0);\n        udp_socket_.open(udp::v4());\n        udp_socket_.set_option(udp::socket::broadcast(true));\n        udp_socket_.send_to(boost::asio::buffer(\"data frame\"), broadcastEndpoint);\n        udp_socket_.close();\n    }\n\n    tcp::acceptor acceptor_;\n    boost::asio::steady_timer timer_;\n    udp::socket udp_socket_;\n    unsigned long next_frame_number_;\n    std::set<udp::endpoint> subscribers_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <set>\n#include <memory>\n#include <iostream>\n\nnamespace boost {\nnamespace asio {\nnamespace ip {\nclass udp;\nclass tcp;\n}\n}\n}\n\nclass server {\npublic:\n    server(boost::asio::io_context& io_context, unsigned short port)\n        : acceptor_(io_context, boost::asio::ip::tcp::endpoint(boost::asio::ip::tcp::v4(), port)),\n          timer_(io_context, boost::posix_time::milliseconds(1000)),\n          udp_socket_(io_context),\n          next_frame_number_(0),\n          subscribers_() {\n        start_accept();\n        start_timer();\n    }\n\nprivate:\n    void start_accept() {\n        tcp_socket_ = std::make_shared<boost::asio::ip::tcp::socket>(acceptor_.get_executor().context());\n        acceptor_.async_accept(*tcp_socket_, [this](const boost::system::error_code& ec, boost::asio::ip::tcp::socket socket) {\n            handle_accept(ec, socket);\n        });\n    }\n\n    void handle_accept(const boost::system::error_code& ec, boost::asio::ip::tcp::socket socket) {\n        if (!ec) {\n            std::make_shared<control_request>()->async_read(socket, [this](const boost::system::error_code& ec, std::size_t length) {\n                handle_control_request(ec, socket, std::make_shared<control_request>());\n            });\n        }\n        start_accept();\n    }\n\n    void handle_control_request(const boost::system::error_code& ec, boost::asio::ip::tcp::socket socket, std::shared_ptr<control_request> request) {\n        if (!ec) {\n            std::make_shared<control_request>()->async_read(socket, [this, request](const boost::system::error_code& ec, std::size_t length) {\n                handle_control_request_timer(socket, request, std::make_shared<boost::asio::steady_timer>(timer_.get_executor()));\n            });\n        }\n    }\n\n    void handle_control_request_timer(boost::asio::ip::tcp::socket socket, std::shared_ptr<control_request> request, std::shared_ptr<boost::asio::steady_timer> delay_timer) {\n        delay_timer->async_wait([this, socket, request, delay_timer](const boost::system::error_code& ec) {\n            if (!ec) {\n                handle_timer();\n            }\n        });\n    }\n\n    void handle_timer() {\n        for (const auto& endpoint : subscribers_) {\n            udp_socket_.async_send_to(boost::asio::buffer(data_frame_, sizeof(data_frame_)), endpoint, [this](const boost::system::error_code& ec, std::size_t /*length*/) {\n                if (!ec) {\n                    next_frame_number_++;\n                }\n            });\n        }\n    }\n\n    boost::asio::ip::tcp::acceptor acceptor_;\n    boost::asio::steady_timer timer_;\n    udp::socket udp_socket_;\n    unsigned long next_frame_number_;\n    std::set<udp::endpoint> subscribers_;\n    char data_frame_[1024];\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <set>\n#include <memory>\n#include <string>\n\nnamespace boost {\nnamespace asio {\nnamespace ip {\nclass udp;\nclass tcp;\n}\n}\n}\n\nclass server {\npublic:\n    server(boost::asio::io_context& io_context, unsigned short port)\n        : acceptor_(io_context, boost::asio::ip::tcp::endpoint(boost::asio::ip::tcp::v4(), port)),\n          timer_(io_context, boost::posix_time::milliseconds(1000)),\n          udp_socket_(io_context),\n          next_frame_number_(0),\n          subscribers_() {\n        start_accept();\n        timer_.async_wait([this](const boost::system::error_code& ec) {\n            if (!ec) {\n                handle_timer();\n            }\n        });\n    }\n\nprivate:\n    void start_accept() {\n        tcp_socket_ = std::make_shared<boost::asio::ip::tcp::socket>(acceptor_.get_executor().context());\n        acceptor_.async_accept(tcp_socket_, [this](const boost::system::error_code& ec, boost::asio::ip::tcp::socket socket) {\n            handle_accept(ec, socket);\n        });\n    }\n\n    void handle_accept(const boost::system::error_code& ec, boost::asio::ip::tcp::socket socket) {\n        if (!ec) {\n            start_accept();\n            handle_control_request(ec, socket, std::make_shared<control_request>());\n        }\n    }\n\n    void handle_control_request(const boost::system::error_code& ec, boost::asio::ip::tcp::socket socket, std::shared_ptr<control_request> request) {\n        if (!ec) {\n            // Process control request\n        }\n    }\n\n    void handle_control_request_timer(boost::asio::ip::tcp::socket socket, std::shared_ptr<control_request> request, boost::asio::steady_timer* delay_timer) {\n        // Handle delayed processing of control requests\n    }\n\n    void handle_timer() {\n        // Periodically broadcast data frames to subscribed clients\n        for (const auto& endpoint : subscribers_) {\n            udp_socket_.async_send_to(boost::asio::buffer(\"data frame\"), endpoint, [this](const boost::system::error_code& ec, std::size_t length) {\n                if (!ec) {\n                    next_frame_number_++;\n                }\n            });\n        }\n    }\n\n    boost::asio::ip::tcp::acceptor acceptor_;\n    boost::asio::steady_timer timer_;\n    boost::asio::ip::udp::socket udp_socket_;\n    unsigned long next_frame_number_;\n    std::set<boost::asio::ip::udp::endpoint> subscribers_;\n    std::shared_ptr<boost::asio::ip::tcp::socket> tcp_socket_;\n};\n\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <set>\n#include <memory>\n#include <vector>\n\nnamespace boost {\nnamespace asio {\nnamespace ip {\nclass udp;\nclass tcp;\n} // namespace ip\n} // namespace asio\n} // namespace boost\n\nclass server {\npublic:\n    server(boost::asio::io_context& io_context, unsigned short port)\n        : acceptor_(io_context, tcp::endpoint(tcp::v4(), port)),\n          timer_(io_context),\n          udp_socket_(io_context),\n          next_frame_number_(0),\n          subscribers_() {\n        start_accept();\n        start_timer();\n    }\n\nprivate:\n    void start_accept() {\n        tcp_socket_.reset(new tcp::socket(acceptor_.get_executor()));\n        acceptor_.async_accept(tcp_socket_, [this](const boost::system::error_code& ec, tcp::socket_ptr socket) {\n            if (!ec) {\n                handle_accept(ec, socket);\n            }\n        });\n    }\n\n    void handle_accept(const boost::system::error_code& ec, tcp::socket_ptr socket) {\n        if (!ec) {\n            handle_control_request(ec, socket, std::make_shared<control_request>());\n        }\n        start_accept();\n    }\n\n    void handle_control_request(const boost::system::error_code& ec, tcp::socket_ptr socket, control_request_ptr request) {\n        if (!ec) {\n            handle_control_request_timer(socket, request, std::make_shared<boost::asio::steady_timer>(socket->get_executor()));\n        }\n    }\n\n    void handle_control_request_timer(tcp::socket_ptr socket, control_request_ptr request, timer_ptr delay_timer) {\n        delay_timer->expires_after(boost::posix_time::milliseconds(100)); // Example delay\n        delay_timer->async_wait([this, socket, request, delay_timer](const boost::system::error_code& ec) {\n            if (!ec) {\n                handle_control_request_timer(socket, request, delay_timer);\n            }\n        });\n    }\n\n    void handle_timer() {\n        timer_.expires_after(boost::posix_time::milliseconds(1000)); // Example interval\n        timer_.async_wait([this](const boost::system::error_code& ec) {\n            if (!ec) {\n                handle_timer();\n                broadcast_data_frame();\n            }\n        });\n    }\n\n    void broadcast_data_frame() {\n        auto frame = create_data_frame(next_frame_number_++);\n        for (const auto& endpoint : subscribers_) {\n            udp::endpoint ep(endpoint.address(), endpoint.port());\n            udp_socket_.async_send_to(boost::asio::buffer(frame), ep, [this](const boost::system::error_code& ec, std::size_t /*length*/) {\n                if (!ec) {\n                    // Handle successful send\n                }\n            });\n        }\n    }\n\n    std::vector<char> create_data_frame(unsigned long frame_number) {\n        // Implementation for creating data frame\n        return std::vector<char>(); // Placeholder\n    }\n\n    tcp::acceptor acceptor_;\n    boost::asio::steady_timer timer_;\n    udp::socket udp_socket_;\n    unsigned long next_frame_number_;\n    std::set<udp::endpoint> subscribers_;\n};\n\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <set>\n#include <memory>\n\nnamespace boost {\nnamespace asio {\nnamespace ip {\nclass udp;\nclass tcp;\n}\n}\n}\n\nclass server {\npublic:\n    server(boost::asio::io_context& io_context, unsigned short port)\n        : acceptor_(io_context, tcp::endpoint(tcp::v4(), port)),\n          timer_(io_context, boost::posix_time::milliseconds(1000)),\n          udp_socket_(io_context),\n          next_frame_number_(0),\n          subscribers_() {\n        start_accept();\n        start_timer();\n    }\n\nprivate:\n    void start_accept() {\n        tcp_socket_.reset(new boost::asio::ip::tcp::socket(acceptor_.get_executor()));\n        acceptor_.async_accept(tcp_socket_, [this](const boost::system::error_code& ec, boost::asio::ip::tcp::socket socket) {\n            handle_accept(ec, std::move(socket));\n        });\n    }\n\n    void handle_accept(const boost::system::error_code& ec, boost::asio::ip::tcp::socket socket) {\n        if (!ec) {\n            std::make_shared<control_request>()->async_read(socket, [this](const boost::system::error_code& ec, std::size_t length) {\n                handle_control_request(ec, tcp_socket_, std::make_shared<control_request>());\n            });\n        }\n        start_accept();\n    }\n\n    void handle_control_request(const boost::system::error_code& ec, boost::asio::ip::tcp::socket socket, std::shared_ptr<control_request> request) {\n        if (!ec) {\n            handle_control_request_timer(tcp_socket_, request, std::make_shared<boost::asio::steady_timer>(timer_.get_executor()));\n        }\n    }\n\n    void handle_control_request_timer(boost::asio::ip::tcp::socket socket, std::shared_ptr<control_request> request, std::shared_ptr<boost::asio::steady_timer> delay_timer) {\n        delay_timer->async_wait([this, delay_timer](const boost::system::error_code& ec) {\n            if (!ec) {\n                // Process the control request\n            }\n        });\n    }\n\n    void start_timer() {\n        timer_.async_wait([this](const boost::system::error_code& ec) {\n            if (!ec) {\n                handle_timer();\n            }\n        });\n    }\n\n    void handle_timer() {\n        // Broadcast data frames to subscribed clients\n        for (const auto& endpoint : subscribers_) {\n            udp_socket_.async_send_to(boost::asio::buffer(\"data frame\"), endpoint, [this](const boost::system::error_code& ec, std::size_t /*length*/) {\n                if (!ec) {\n                    next_frame_number_++;\n                }\n            });\n        }\n    }\n\n    boost::asio::ip::tcp::acceptor acceptor_;\n    boost::asio::steady_timer timer_;\n    boost::asio::ip::udp::socket udp_socket_;\n    unsigned long next_frame_number_;\n    std::set<boost::asio::ip::udp::endpoint> subscribers_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <set>\n#include <memory>\n#include <string>\n\nnamespace boost {\nnamespace asio {\nclass io_context;\nclass ip::tcp;\nclass ip::udp;\n}\n}\n\nclass server {\npublic:\n    server(boost::asio::io_context& io_context, unsigned short port)\n        : acceptor_(io_context, boost::asio::ip::tcp::endpoint(boost::asio::ip::tcp::v4(), port)),\n          timer_(io_context, boost::posix_time::milliseconds(1000)),\n          udp_socket_(io_context),\n          next_frame_number_(0),\n          subscribers_() {\n        start_accept();\n        timer_.async_wait([this](const boost::system::error_code& ec) {\n            if (!ec) {\n                handle_timer();\n            }\n        });\n    }\n\nprivate:\n    void start_accept() {\n        tcp_socket_ = std::make_shared<boost::asio::ip::tcp::socket>(acceptor_.get_executor().context());\n        acceptor_.async_accept(tcp_socket_, [this](const boost::system::error_code& ec, boost::asio::ip::tcp::socket socket) {\n            handle_accept(ec, socket);\n        });\n    }\n\n    void handle_accept(const boost::system::error_code& ec, boost::asio::ip::tcp::socket socket) {\n        if (!ec) {\n            start_accept();\n            handle_control_request(ec, socket, std::make_shared<control_request>());\n        }\n    }\n\n    void handle_control_request(const boost::system::error_code& ec, boost::asio::ip::tcp::socket socket, std::shared_ptr<control_request> request) {\n        if (!ec) {\n            // Process control request\n            handle_control_request_timer(socket, request, std::make_shared<boost::asio::steady_timer>(socket.get_executor().context()));\n        }\n    }\n\n    void handle_control_request_timer(boost::asio::ip::tcp::socket socket, std::shared_ptr<control_request> request, std::shared_ptr<boost::asio::steady_timer> delay_timer) {\n        delay_timer->async_wait([this, socket, request, delay_timer](const boost::system::error_code& ec) {\n            if (!ec) {\n                // Delayed processing of control request\n            }\n        });\n    }\n\n    void handle_timer() {\n        // Broadcast data frames to subscribed clients\n        for (const auto& endpoint : subscribers_) {\n            udp_socket_.async_send_to(boost::asio::buffer(\"data frame\"), endpoint, [this](const boost::system::error_code& ec, std::size_t bytes_transferred) {\n                if (!ec) {\n                    next_frame_number_++;\n                }\n            });\n        }\n    }\n\n    boost::asio::ip::tcp::acceptor acceptor_;\n    boost::asio::steady_timer timer_;\n    boost::asio::ip::udp::socket udp_socket_;\n    unsigned long next_frame_number_;\n    std::set<boost::asio::ip::udp::endpoint> subscribers_;\n    std::shared_ptr<boost::asio::ip::tcp::socket> tcp_socket_;\n};\n\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <set>\n#include <memory>\n#include <string>\n\nnamespace boost {\nnamespace asio {\nnamespace ip {\nclass udp;\nclass tcp;\n}\n}\n}\n\nclass server {\npublic:\n    server(boost::asio::io_context& io_context, unsigned short port)\n        : acceptor_(io_context, boost::asio::ip::tcp::endpoint(boost::asio::ip::tcp::v4(), port)),\n          timer_(io_context, boost::posix_time::milliseconds(1000)),\n          udp_socket_(io_context),\n          next_frame_number_(0),\n          subscribers_() {\n        start_accept();\n        start_timer();\n    }\n\nprivate:\n    void start_accept() {\n        tcp_socket_ = std::make_shared<boost::asio::ip::tcp::socket>(acceptor_.get_executor().context());\n        acceptor_.async_accept(*tcp_socket_, [this](const boost::system::error_code& ec, boost::asio::ip::tcp::socket socket) {\n            handle_accept(ec, socket);\n        });\n    }\n\n    void handle_accept(const boost::system::error_code& ec, boost::asio::ip::tcp::socket socket) {\n        if (!ec) {\n            handle_control_request(ec, socket, std::make_shared<control_request>());\n        }\n        start_accept();\n    }\n\n    void handle_control_request(const boost::system::error_code& ec, boost::asio::ip::tcp::socket socket, std::shared_ptr<control_request> request) {\n        if (!ec) {\n            // Process control request\n        }\n    }\n\n    void handle_control_request_timer(boost::asio::ip::tcp::socket socket, std::shared_ptr<control_request> request, boost::asio::steady_timer* delay_timer) {\n        // Delayed processing of control request\n    }\n\n    void handle_timer() {\n        timer_.async_wait([this](const boost::system::error_code& ec) {\n            if (!ec) {\n                broadcast_data_frame();\n            }\n        });\n    }\n\n    void broadcast_data_frame() {\n        auto frame = create_data_frame(next_frame_number_++);\n        for (auto& endpoint : subscribers_) {\n            udp_socket_.async_send_to(boost::asio::buffer(frame), endpoint, [this](const boost::system::error_code& ec, std::size_t length) {\n                // Handle send completion\n            });\n        }\n    }\n\n    std::string create_data_frame(unsigned long frame_number) {\n        // Create data frame\n        return std::to_string(frame_number);\n    }\n\n    boost::asio::ip::tcp::acceptor acceptor_;\n    boost::asio::steady_timer timer_;\n    boost::asio::ip::udp::socket udp_socket_;\n    unsigned long next_frame_number_;\n    std::set<boost::asio::ip::udp::endpoint> subscribers_;\n    std::shared_ptr<boost::asio::ip::tcp::socket> tcp_socket_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <set>\n#include <memory>\n#include <string>\n\nnamespace boost {\nnamespace asio {\nnamespace ip {\nclass udp;\nclass tcp;\n}\n}\n}\n\nclass server {\npublic:\n    server(boost::asio::io_context& io_context, unsigned short port)\n        : acceptor_(io_context, boost::asio::ip::tcp::endpoint(boost::asio::ip::tcp::v4(), port)),\n          timer_(io_context, boost::posix_time::milliseconds(1000)),\n          udp_socket_(io_context),\n          next_frame_number_(0),\n          subscribers_() {\n        start_accept();\n        timer_.async_wait([this](const boost::system::error_code& /*ec*/) { handle_timer(); });\n    }\n\nprivate:\n    void start_accept() {\n        tcp_socket_ = std::make_shared<boost::asio::ip::tcp::socket>(acceptor_.get_executor().context());\n        acceptor_.async_accept(tcp_socket_, [this](const boost::system::error_code& ec, boost::asio::ip::tcp::socket socket) {\n            handle_accept(ec, socket);\n        });\n    }\n\n    void handle_accept(const boost::system::error_code& ec, boost::asio::ip::tcp::socket socket) {\n        if (!ec) {\n            std::make_shared<control_request>(std::move(socket))->start();\n        }\n        start_accept();\n    }\n\n    void handle_control_request(const boost::system::error_code& ec, boost::asio::ip::tcp::socket socket, std::shared_ptr<control_request> request) {\n        if (!ec) {\n            request->process();\n        }\n    }\n\n    void handle_control_request_timer(boost::asio::ip::tcp::socket socket, std::shared_ptr<control_request> request, boost::asio::steady_timer* delay_timer) {\n        if (delay_timer) {\n            delay_timer->cancel();\n        }\n        request->process();\n    }\n\n    void handle_timer() {\n        std::string frame = \"Data frame \" + std::to_string(next_frame_number_++);\n        for (auto& endpoint : subscribers_) {\n            udp_socket_.async_send_to(boost::asio::buffer(frame), endpoint, [this](const boost::system::error_code& /*ec*/, std::size_t /*length*/) {\n                // Handle UDP send completion\n            });\n        }\n    }\n\n    boost::asio::ip::tcp::acceptor acceptor_;\n    boost::asio::steady_timer timer_;\n    udp::socket udp_socket_;\n    unsigned long next_frame_number_;\n    std::set<udp::endpoint> subscribers_;\n    std::shared_ptr<boost::asio::ip::tcp::socket> tcp_socket_;\n};\n\nclass control_request {\npublic:\n    control_request(boost::asio::ip::tcp::socket socket)\n        : socket_(std::move(socket)) {}\n\n    void start() {\n        boost::asio::async_read(socket_, boost::asio::buffer(data_, max_length),\n            [this](const boost::system::error_code& ec, std::size_t length) {\n                handle_read(ec, length);\n            });\n    }\n\n    void process() {\n        // Process control request\n    }\n\nprivate:\n    void handle_read(const boost::system::error_code& ec, std::size_t length) {\n        if (!ec) {\n            // Handle read completion\n        }\n    }\n\n    enum { max_length = 1024 };\n    char data_[max_length];\n    boost::asio::ip::tcp::socket socket_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <set>\n#include <memory>\n#include <vector>\n\nnamespace boost {\nnamespace asio {\nnamespace ip {\nclass udp;\nclass tcp;\n}\n}\n}\n\nclass server {\npublic:\n    server(boost::asio::io_context& io_context, unsigned short port)\n        : acceptor_(io_context, boost::asio::ip::tcp::endpoint(boost::asio::ip::tcp::v4(), port)),\n          timer_(io_context, boost::posix_time::milliseconds(1000)),\n          udp_socket_(io_context),\n          next_frame_number_(0),\n          subscribers_() {\n        start_accept();\n        start_timer();\n    }\n\nprivate:\n    void start_accept() {\n        tcp_socket_ = std::make_shared<boost::asio::ip::tcp::socket>(acceptor_.get_executor().context());\n        acceptor_.async_accept(*tcp_socket_, [this](const boost::system::error_code& ec, boost::asio::ip::tcp::socket socket) {\n            handle_accept(ec, socket);\n        });\n    }\n\n    void handle_accept(const boost::system::error_code& ec, boost::asio::ip::tcp::socket socket) {\n        if (!ec) {\n            handle_control_request(ec, socket, std::make_shared<control_request>());\n        }\n        start_accept();\n    }\n\n    void handle_control_request(const boost::system::error_code& ec, boost::asio::ip::tcp::socket socket, std::shared_ptr<control_request> request) {\n        if (!ec) {\n            // Process the control request\n            handle_control_request_timer(socket, request, std::make_shared<boost::asio::steady_timer>(socket.get_executor().context(), boost::posix_time::milliseconds(100)));\n        }\n    }\n\n    void handle_control_request_timer(boost::asio::ip::tcp::socket socket, std::shared_ptr<control_request> request, std::shared_ptr<boost::asio::steady_timer> delay_timer) {\n        delay_timer->async_wait([this, socket, request, delay_timer](const boost::system::error_code& ec) {\n            if (!ec) {\n                // Process the control request after delay\n                handle_control_request(ec, socket, request);\n            }\n        });\n    }\n\n    void start_timer() {\n        timer_.async_wait([this](const boost::system::error_code& ec) {\n            if (!ec) {\n                handle_timer();\n                start_timer();\n            }\n        });\n    }\n\n    void handle_timer() {\n        // Broadcast data frames to subscribed clients\n        for (const auto& endpoint : subscribers_) {\n            udp_socket_.async_send_to(boost::asio::buffer(\"Data Frame \" + std::to_string(next_frame_number_++)), endpoint, [this](const boost::system::error_code& ec, std::size_t bytes_transferred) {\n                if (!ec) {\n                    // Handle successful broadcast\n                }\n            });\n        }\n    }\n\n    boost::asio::ip::tcp::acceptor acceptor_;\n    boost::asio::steady_timer timer_;\n    boost::asio::ip::udp::socket udp_socket_;\n    unsigned long next_frame_number_;\n    std::set<boost::asio::ip::udp::endpoint> subscribers_;\n    std::shared_ptr<boost::asio::ip::tcp::socket> tcp_socket_;\n};\n```"
    ],
    "unmatched_results": [
      "```cpp\n#include <boost/asio.hpp>\n#include <set>\n#include <memory>\n\nnamespace boost {\nnamespace asio {\nnamespace ip {\nclass udp;\nclass tcp;\n}\n}\n}\n\nclass server {\npublic:\n    server(boost::asio::io_context& io_context, unsigned short port)\n        : acceptor_(io_context, boost::asio::ip::tcp::endpoint(boost::asio::ip::tcp::v4(), port)),\n          timer_(io_context, boost::posix_time::milliseconds(1000)),\n          udp_socket_(io_context),\n          next_frame_number_(0),\n          subscribers_() {\n        start_accept();\n        start_timer();\n    }\n\nprivate:\n    void start_accept() {\n        tcp_socket_.reset(new boost::asio::ip::tcp::socket(acceptor_.get_executor()));\n        acceptor_.async_accept(tcp_socket_, [this](const boost::system::error_code& ec, boost::asio::ip::tcp::socket socket) {\n            handle_accept(ec, std::move(socket));\n        });\n    }\n\n    void handle_accept(const boost::system::error_code& ec, boost::asio::ip::tcp::socket socket) {\n        if (!ec) {\n            handle_control_request(ec, std::move(socket), nullptr);\n        }\n        start_accept();\n    }\n\n    void handle_control_request(const boost::system::error_code& ec, boost::asio::ip::tcp::socket socket, std::unique_ptr<control_request> request) {\n        // Process control request\n    }\n\n    void handle_control_request_timer(boost::asio::ip::tcp::socket socket, std::unique_ptr<control_request> request, boost::asio::steady_timer* delay_timer) {\n        // Handle delayed processing of control requests\n    }\n\n    void handle_timer() {\n        // Periodically broadcast data frames to subscribed clients\n    }\n\n    boost::asio::ip::tcp::acceptor acceptor_;\n    boost::asio::steady_timer timer_;\n    boost::asio::ip::udp::socket udp_socket_;\n    unsigned long next_frame_number_;\n    std::set<boost::asio::ip::udp::endpoint> subscribers_;\n};\n```"
    ],
    "match_count": 9,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 4,
    "Instruction": "Task Description: Implement a class for handling HTTP file downloads using libcurl in C++. The class should support URL downloading with retries, temporary file handling, and proper resource management.\n\nClass Description: The DownloadTask class provides functionality to download files from HTTP URLs using libcurl. It handles initialization/cleanup of libcurl, manages download retries, writes data to temporary files, and performs final file operations upon successful download.\n\nAttributes:\n- m_url: [std::string] - Primary URL for file download\n- m_urlBackup: [std::string] - Backup URL if primary fails\n- m_output: [std::string] - Final output file path\n- m_outputTmp: [std::string] - Temporary file path during download\n- m_default: [std::string] - Default file path if download fails\n- m_mtime: [time_t] - Modification time to set on downloaded file\n- m_retries: [unsigned int] - Number of download attempts made\n- m_name: [std::string] - Name identifier for the download task\n- m_userAgent: [std::string] - User agent string for HTTP requests\n- m_error: [std::string] - Last error message encountered\n\nMethods:\n- initialize(): [static void]() -> void - Initializes libcurl global state\n- uninitialize(): [static void]() -> void - Cleans up libcurl global state\n- DownloadTask(): [constructor](const std::string&, const std::string&, const std::string&, time_t, const std::string&) -> DownloadTask - Constructs a download task with URL, output path, default file, modification time, and optional name\n- run(): [bool]() -> bool - Executes the download task and returns success status\n- getRetries(): [unsigned int]() -> unsigned int - Returns number of retry attempts\n- writeData(): [size_t](void*, size_t, size_t) -> size_t - Callback for writing received data\n- downloadFile(): [bool](const std::string&) -> bool - Internal method to perform the actual file download",
    "Canonical_solution": "#include <curl/curl.h>\n#include <vector>\n#include <string>\n#include <utility>\n\nclass DownloadTask\n{\npublic:\n    DownloadTask(const std::string &url, const std::string& output, const std::string& defaultFile, time_t mtime, const std::string& name = \"\");\n    \n    static void initialize();\n    static void uninitialize();\n    \n    bool run();\n    unsigned int getRetries() const;\n    size_t writeData(void *buffer, size_t size, size_t nmemb);\n    \nprivate:\n    bool downloadFile(const std::string& url);\n    \n    std::string m_url;\n    std::string m_urlBackup;\n    std::string m_output;\n    std::string m_outputTmp;\n    std::string m_default;\n    time_t m_mtime;\n    unsigned int m_retries;\n    std::string m_name;\n    std::string m_userAgent;\n    std::string m_error;\n};\n\nsize_t writeTaskHttpData(void *buffer, size_t size, size_t nmemb, void *user_p)\n{\n    DownloadTask *task = reinterpret_cast<DownloadTask *>(user_p);\n    if (NULL != task)\n    {\n        return task->writeData(buffer, size, nmemb);\n    }\n    \n    return 0;\n}\n\nvoid DownloadTask::initialize()\n{\n    curl_global_init(CURL_GLOBAL_ALL);\n}\n\nvoid DownloadTask::uninitialize()\n{\n    curl_global_cleanup();\n}\n\nbool DownloadTask::downloadFile(const std::string& url)\n{\n    ++m_retries;\n    \n    m_outputTmp = m_output + \".tmp\";\n    deleteFile(m_outputTmp);\n\n    CURLcode res = CURLE_OK;\n    CURL *curl = NULL;\n    \n    std::string userAgent = m_userAgent.empty() ? \"WeChat/7.0.15.33 CFNetwork/978.0.7 Darwin/18.6.0\" : m_userAgent;\n    \n    curl = curl_easy_init();\n    curl_easy_setopt(curl, CURLOPT_URL, url.c_str());\n    curl_easy_setopt(curl, CURLOPT_USERAGENT, userAgent.c_str());\n    curl_easy_setopt(curl, CURLOPT_FORBID_REUSE, 1L);\n    curl_easy_setopt(curl, CURLOPT_TIMEOUT, 60);\n    curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, &::writeTaskHttpData);\n    curl_easy_setopt(curl, CURLOPT_WRITEDATA, this);\n    curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, true);\n    curl_easy_setopt(curl, CURLOPT_SSL_VERIFYPEER, 0);\n    curl_easy_setopt(curl, CURLOPT_SSL_VERIFYHOST, 0);\n\n    long httpStatus = 0;\n    res = curl_easy_perform(curl);\n    if (res != CURLE_OK)\n    {\n        m_error = \"Failed \" + m_name + \"\\r\\n\";\n        m_error += curl_easy_strerror(res);\n    }\n    else\n    {\n        curl_easy_getinfo(curl, CURLINFO_RESPONSE_CODE, &httpStatus);\n    }\n    curl_easy_cleanup(curl);\n    \n    if (res == CURLE_OK && httpStatus == 200)\n    {\n        ::moveFile(m_outputTmp, m_output);\n        if (m_mtime > 0)\n        {\n            updateFileTime(m_output, m_mtime);\n        }\n        return true;\n    }\n\n    if (m_error.empty())\n    {\n        m_error = \"HTTP Status:\" + std::to_string(httpStatus);\n    }\n    return false;\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 146,
    "matched_results": [
      "```cpp\n#include <curl/curl.h>\n#include <fstream>\n#include <string>\n#include <sys/stat.h>\n#include <sys/types.h>\n#include <time.h>\n\nclass DownloadTask {\nprivate:\n    std::string m_url;\n    std::string m_urlBackup;\n    std::string m_output;\n    std::string m_outputTmp;\n    std::string m_default;\n    time_t m_mtime;\n    unsigned int m_retries;\n    std::string m_name;\n    std::string m_userAgent;\n    std::string m_error;\n\n    static void writeData(void *contents, size_t size, size_t nmemb, void *userp) {\n        ((std::ofstream*)userp)->write((char*)contents, size * nmemb);\n    }\n\n    bool downloadFile(const std::string& url) {\n        CURL *curl;\n        FILE *fp;\n        CURLcode res;\n\n        curl_global_init(CURL_GLOBAL_ALL);\n        curl = curl_easy_init();\n        if(curl) {\n            fp = fopen(m_outputTmp.c_str(), \"wb\");\n            if(fp) {\n                curl_easy_setopt(curl, CURLOPT_URL, url.c_str());\n                curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, writeData);\n                curl_easy_setopt(curl, CURLOPT_WRITEDATA, fp);\n                curl_easy_setopt(curl, CURLOPT_USERAGENT, m_userAgent.c_str());\n                res = curl_easy_perform(curl);\n                fclose(fp);\n                if(res != CURLE_OK) {\n                    m_error = curl_easy_strerror(res);\n                    curl_easy_cleanup(curl);\n                    curl_global_cleanup();\n                    return false;\n                }\n                curl_easy_cleanup(curl);\n            } else {\n                m_error = \"Failed to open file for writing\";\n                curl_easy_cleanup(curl);\n                curl_global_cleanup();\n                return false;\n            }\n        } else {\n            m_error = \"Failed to initialize curl\";\n            curl_global_cleanup();\n            return false;\n        }\n        curl_global_cleanup();\n        return true;\n    }\n\npublic:\n    static void initialize() {\n        curl_global_init(CURL_GLOBAL_ALL);\n    }\n\n    static void uninitialize() {\n        curl_global_cleanup();\n    }\n\n    DownloadTask(const std::string& url, const std::string& output, const std::string& defaultFile, time_t modificationTime, const std::string& name = \"\") : m_url(url), m_output(output), m_outputTmp(output + \".tmp\"), m_default(defaultFile), m_mtime(modificationTime), m_retries(0), m_name(name), m_userAgent(\"DownloadTask\") {}\n\n    bool run() {\n        m_retries++;\n        if(m_retries > 1) {\n            m_url = m_urlBackup;\n        }\n        return downloadFile(m_url);\n    }\n\n    unsigned int getRetries() const {\n        return m_retries;\n    }\n};\n```",
      "```cpp\n#include <curl/curl.h>\n#include <fstream>\n#include <sstream>\n#include <string>\n#include <sys/stat.h>\n#include <sys/types.h>\n#include <unistd.h>\n\nclass DownloadTask {\nprivate:\n    std::string m_url;\n    std::string m_urlBackup;\n    std::string m_output;\n    std::string m_outputTmp;\n    std::string m_default;\n    time_t m_mtime;\n    unsigned int m_retries;\n    std::string m_name;\n    std::string m_userAgent;\n    std::string m_error;\n\n    static size_t writeData(void *contents, size_t size, size_t nmemb, void *userp) {\n        ((std::string*)userp)->append((char*)contents, size * nmemb);\n        return size * nmemb;\n    }\n\n    bool downloadFile(const std::string& url) {\n        CURL *curl;\n        FILE *fp;\n        CURLcode res;\n\n        curl_global_init(CURL_GLOBAL_ALL);\n        curl = curl_easy_init();\n        if (!curl) {\n            m_error = \"Curl initialization failed\";\n            return false;\n        }\n\n        m_outputTmp = m_output + \".tmp\";\n        fp = fopen(m_outputTmp.c_str(), \"wb\");\n        if (!fp) {\n            m_error = \"Failed to open temporary file\";\n            curl_easy_cleanup(curl);\n            curl_global_cleanup();\n            return false;\n        }\n\n        curl_easy_setopt(curl, CURLOPT_URL, url.c_str());\n        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, writeData);\n        curl_easy_setopt(curl, CURLOPT_WRITEDATA, &m_outputTmp);\n        curl_easy_setopt(curl, CURLOPT_USERAGENT, m_userAgent.c_str());\n\n        res = curl_easy_perform(curl);\n        if (res != CURLE_OK) {\n            m_error = curl_easy_strerror(res);\n            fclose(fp);\n            curl_easy_cleanup(curl);\n            curl_global_cleanup();\n            return false;\n        }\n\n        curl_easy_cleanup(curl);\n        fclose(fp);\n        curl_global_cleanup();\n\n        struct stat st;\n        if (stat(m_outputTmp.c_str(), &st) == 0) {\n            if (m_mtime != 0) {\n                st.st_mtime = m_mtime;\n                if (utime(m_outputTmp.c_str(), &st) != 0) {\n                    m_error = \"Failed to set modification time\";\n                    return false;\n                }\n            }\n            rename(m_outputTmp.c_str(), m_output.c_str());\n            return true;\n        } else {\n            m_error = \"Failed to get file status\";\n            return false;\n        }\n    }\n\npublic:\n    static void initialize() {\n        curl_global_init(CURL_GLOBAL_ALL);\n    }\n\n    static void uninitialize() {\n        curl_global_cleanup();\n    }\n\n    DownloadTask(const std::string& url, const std::string& output, const std::string& defaultFile, time_tmtime, const std::string& name = \"\") :\n        m_url(url), m_output(output), m_default(defaultFile), m_retries(0), m_name(name), m_userAgent(\"DownloadTask\") {}\n\n    bool run() {\n        if (m_url.empty()) {\n            m_error = \"URL is empty\";\n            return false;\n        }\n\n        if (downloadFile(m_url)) {\n            return true;\n        } else {\n            m_retries++;\n            if (m_retries < 3) {\n                if (!m_urlBackup.empty()) {\n                    return downloadFile(m_urlBackup);\n                } else {\n                    if (!m_default.empty()) {\n                        rename(m_outputTmp.c_str(), m_default.c_str());\n                        return true;\n                    }\n                }\n            }\n            return false;\n        }\n    }\n\n    unsigned int getRetries() const {\n        return m_retries;\n    }\n};\n```",
      "```cpp\n#include <curl/curl.h>\n#include <fstream>\n#include <iostream>\n#include <string>\n#include <sys/stat.h>\n#include <sys/types.h>\n#include <unistd.h>\n\nclass DownloadTask {\nprivate:\n    std::string m_url;\n    std::string m_urlBackup;\n    std::string m_output;\n    std::string m_outputTmp;\n    std::string m_default;\n    time_t m_mtime;\n    unsigned int m_retries;\n    std::string m_name;\n    std::string m_userAgent;\n    std::string m_error;\n\npublic:\n    static void initialize() {\n        curl_global_init(CURL_GLOBAL_ALL);\n    }\n\n    static void uninitialize() {\n        curl_global_cleanup();\n    }\n\n    DownloadTask(const std::string& url, const std::string& output, const std::string& defaultFile, time_t mtime, const std::string& name = \"\") :\n        m_url(url), m_output(output), m_outputTmp(output + \".tmp\"), m_default(defaultFile), m_mtime(mtime), m_retries(0), m_name(name), m_userAgent(\"DownloadTask/1.0\") {}\n\n    bool run() {\n        if (downloadFile(m_url)) {\n            if (rename(m_outputTmp.c_str(), m_output.c_str()) != 0) {\n                m_error = \"Failed to rename temporary file to final output\";\n                return false;\n            }\n            struct stat attr;\n            if (stat(m_output.c_str(), &attr) != 0) {\n                m_error = \"Failed to get file attributes\";\n                return false;\n            }\n            if (utime(m_output.c_str(), const_cast<time_t*>(&m_mtime)) != 0) {\n                m_error = \"Failed to set file modification time\";\n                return false;\n            }\n            return true;\n        } else if (!m_urlBackup.empty()) {\n            return run();\n        }\n        return false;\n    }\n\n    unsigned int getRetries() const {\n        return m_retries;\n    }\n\n    size_t writeData(void* ptr, size_t size, size_t nmemb) {\n        std::ofstream file(m_outputTmp, std::ios::binary | std::ios::app);\n        if (file.is_open()) {\n            file.write(static_cast<char*>(ptr), size * nmemb);\n            file.close();\n            return size * nmemb;\n        }\n        return 0;\n    }\n\n    bool downloadFile(const std::string& url) {\n        CURL* curl = curl_easy_init();\n        if (curl) {\n            curl_easy_setopt(curl, CURLOPT_URL, url.c_str());\n            curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, writeData);\n            curl_easy_setopt(curl, CURLOPT_USERAGENT, m_userAgent.c_str());\n            CURLcode res = curl_easy_perform(curl);\n            curl_easy_cleanup(curl);\n            if (res == CURLE_OK) {\n                m_retries++;\n                return true;\n            }\n            m_error = curl_easy_strerror(res);\n        }\n        return false;\n    }\n};\n```",
      "```cpp\n#include <curl/curl.h>\n#include <fstream>\n#include <iostream>\n#include <sstream>\n#include <string>\n#include <sys/stat.h>\n#include <sys/types.h>\n#include <unistd.h>\n\nclass DownloadTask {\nprivate:\n    std::string m_url;\n    std::string m_urlBackup;\n    std::string m_output;\n    std::string m_outputTmp;\n    std::string m_default;\n    time_t m_mtime;\n    unsigned int m_retries;\n    std::string m_name;\n    std::string m_userAgent;\n    std::string m_error;\n\n    static size_t writeData(void *contents, size_t size, size_t nmemb, void *userp) {\n        ((std::string*)userp)->append((char*)contents, size * nmemb);\n        return size * nmemb;\n    }\n\n    bool downloadFile(const std::string& url) {\n        CURL *curl;\n        FILE *fp;\n        CURLcode res;\n\n        curl_global_init(CURL_GLOBAL_ALL);\n        curl = curl_easy_init();\n        if(curl) {\n            m_outputTmp = \"/tmp/\" + m_name + \".tmp\";\n            fp = fopen(m_outputTmp.c_str(), \"wb\");\n            if(fp) {\n                curl_easy_setopt(curl, CURLOPT_URL, url.c_str());\n                curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, writeData);\n                curl_easy_setopt(curl, CURLOPT_WRITEDATA, &m_outputTmp);\n                curl_easy_setopt(curl, CURLOPT_USERAGENT, m_userAgent.c_str());\n                res = curl_easy_perform(curl);\n                fclose(fp);\n                if(res != CURLE_OK) {\n                    m_error = curl_easy_strerror(res);\n                    curl_easy_cleanup(curl);\n                    curl_global_cleanup();\n                    return false;\n                }\n                curl_easy_cleanup(curl);\n            } else {\n                m_error = \"Failed to open temporary file\";\n                curl_easy_cleanup(curl);\n                curl_global_cleanup();\n                return false;\n            }\n        } else {\n            m_error = \"Failed to initialize curl\";\n            curl_global_cleanup();\n            return false;\n        }\n\n        curl_global_cleanup();\n        return true;\n    }\n\npublic:\n    static void initialize() {\n        curl_global_init(CURL_GLOBAL_ALL);\n    }\n\n    static void uninitialize() {\n        curl_global_cleanup();\n    }\n\n    DownloadTask(const std::string& url, const std::string& output, const std::string& defaultFile, time_tmtime, const std::string& name = \"\") :\n        m_url(url), m_output(output), m_default(defaultFile), m_mtime(mtime), m_retries(0), m_name(name), m_userAgent(\"DownloadTask\") {}\n\n    bool run() {\n        if(m_retries < 3) {\n            if(downloadFile(m_url)) {\n                struct stat st;\n                if(stat(m_outputTmp.c_str(), &st) == 0) {\n                    if(st.st_mtime != m_mtime) {\n                        st.st_mtime = m_mtime;\n                        chmod(m_outputTmp.c_str(), S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH);\n                        utime(m_outputTmp.c_str(), &st);\n                    }\n                    rename(m_outputTmp.c_str(), m_output.c_str());\n                    return true;\n                } else {\n                    m_error = \"Failed to get file stats\";\n                }\n            } else {\n                m_retries++;\n                if(m_urlBackup.empty()) {\n                    m_error = \"Download failed and no backup URL provided\";\n                    return false;\n                }\n                m_url = m_urlBackup;\n            }\n        }\n        if(!m_default.empty()) {\n            rename(m_outputTmp.c_str(), m_default.c_str());\n            return true;\n        }\n        return false;\n    }\n\n    unsigned int getRetries() const {\n        return m_retries;\n    }\n};\n```",
      "```cpp\n#include <curl/curl.h>\n#include <fstream>\n#include <string>\n#include <chrono>\n#include <ctime>\n\nclass DownloadTask {\npublic:\n    static void initialize() {\n        curl_global_init(CURL_GLOBAL_ALL);\n    }\n\n    static void uninitialize() {\n        curl_global_cleanup();\n    }\n\n    DownloadTask(const std::string& url, const std::string& output, const std::string& defaultFile, time_t mtime, const std::string& name = \"\")\n        : m_url(url), m_urlBackup(\"\"), m_output(output), m_outputTmp(\"\"), m_default(defaultFile), m_mtime(mtime), m_retries(0), m_name(name), m_userAgent(\"DownloadTask/1.0\"), m_error(\"\") {}\n\n    bool run() {\n        if (m_url.empty()) {\n            m_error = \"URL is empty\";\n            return false;\n        }\n\n        if (!downloadFile(m_url)) {\n            if (!m_urlBackup.empty() && !downloadFile(m_urlBackup)) {\n                m_output = m_default;\n                return false;\n            }\n        }\n\n        if (!m_output.empty()) {\n            std::ofstream outFile(m_output, std::ios::binary);\n            if (!outFile) {\n                m_error = \"Failed to open output file\";\n                return false;\n            }\n            outFile << m_data;\n            outFile.close();\n        }\n\n        if (m_mtime != 0) {\n            std::filesystem::last_write_time(m_output, std::chrono::system_clock::from_time_t(m_mtime));\n        }\n\n        return true;\n    }\n\n    unsigned int getRetries() const {\n        return m_retries;\n    }\n\nprivate:\n    std::string m_url;\n    std::string m_urlBackup;\n    std::string m_output;\n    std::string m_outputTmp;\n    std::string m_default;\n    time_t m_mtime;\n    unsigned int m_retries;\n    std::string m_name;\n    std::string m_userAgent;\n    std::string m_error;\n    std::string m_data;\n\n    static size_t writeData(void* contents, size_t size, size_t nmemb, void* userp) {\n        ((std::string*)userp)->append((char*)contents, size * nmemb);\n        return size * nmemb;\n    }\n\n    bool downloadFile(const std::string& url) {\n        CURL* curl = curl_easy_init();\n        if (!curl) {\n            m_error = \"Curl initialization failed\";\n            return false;\n        }\n\n        curl_easy_setopt(curl, CURLOPT_URL, url.c_str());\n        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, writeData);\n        curl_easy_setopt(curl, CURLOPT_WRITEDATA, &m_data);\n        curl_easy_setopt(curl, CURLOPT_USERAGENT, m_userAgent.c_str());\n        CURLcode res = curl_easy_perform(curl);\n        curl_easy_cleanup(curl);\n\n        if (res != CURLE_OK) {\n            m_error = curl_easy_strerror(res);\n            m_retries++;\n            return false;\n        }\n\n        return true;\n    }\n};\n```",
      "```cpp\n#include <curl/curl.h>\n#include <fstream>\n#include <sstream>\n#include <string>\n#include <sys/stat.h>\n#include <sys/types.h>\n#include <unistd.h>\n\nclass DownloadTask {\npublic:\n    static void initialize() {\n        curl_global_init(CURL_GLOBAL_ALL);\n    }\n\n    static void uninitialize() {\n        curl_global_cleanup();\n    }\n\n    DownloadTask(const std::string& url, const std::string& output, const std::string& defaultPath, time_t mtime, const std::string& name = \"\")\n        : m_url(url), m_urlBackup(\"\"), m_output(output), m_outputTmp(\"\"), m_default(defaultPath), m_mtime(mtime), m_retries(0), m_name(name), m_userAgent(\"DownloadTask/1.0\"), m_error(\"\") {}\n\n    bool run() {\n        if (downloadFile(m_url)) {\n            if (m_mtime != 0) {\n                struct stat st;\n                if (stat(m_output.c_str(), &st) == 0) {\n                    st.st_mtime = m_mtime;\n                    if (utime(m_output.c_str(), &st) != 0) {\n                        m_error = \"Failed to set modification time\";\n                        return false;\n                    }\n                }\n            }\n            return true;\n        }\n        if (!m_urlBackup.empty() && !downloadFile(m_urlBackup)) {\n            std::ofstream def(m_default, std::ios::binary);\n            if (!def) {\n                m_error = \"Failed to open default file\";\n                return false;\n            }\n            def.close();\n            return true;\n        }\n        return false;\n    }\n\n    unsigned int getRetries() const {\n        return m_retries;\n    }\n\nprivate:\n    std::string m_url;\n    std::string m_urlBackup;\n    std::string m_output;\n    std::string m_outputTmp;\n    std::string m_default;\n    time_t m_mtime;\n    unsigned int m_retries;\n    std::string m_name;\n    std::string m_userAgent;\n    std::string m_error;\n\n    size_t writeData(void* ptr, size_t size, size_t nmemb) {\n        std::ofstream tmp(m_outputTmp, std::ios::binary | std::ios::app);\n        if (!tmp) {\n            m_error = \"Failed to open temporary file\";\n            return 0;\n        }\n        size_t written = tmp.write(static_cast<char*>(ptr), size * nmemb);\n        tmp.close();\n        return written;\n    }\n\n    bool downloadFile(const std::string& url) {\n        CURL* curl = curl_easy_init();\n        if (!curl) {\n            m_error = \"Failed to initialize libcurl\";\n            return false;\n        }\n\n        curl_easy_setopt(curl, CURLOPT_URL, url.c_str());\n        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, writeData);\n        curl_easy_setopt(curl, CURLOPT_USERAGENT, m_userAgent.c_str());\n\n        FILE* fp = fopen(m_outputTmp.c_str(), \"wb\");\n        if (!fp) {\n            m_error = \"Failed to open temporary file\";\n            curl_easy_cleanup(curl);\n            return false;\n        }\n        curl_easy_setopt(curl, CURLOPT_WRITEDATA, fp);\n        CURLcode res = curl_easy_perform(curl);\n        fclose(fp);\n        curl_easy_cleanup(curl);\n\n        if (res != CURLE_OK) {\n            m_error = curl_easy_strerror(res);\n            return false;\n        }\n\n        struct stat st;\n        if (stat(m_outputTmp.c_str(), &st) == 0) {\n            rename(m_outputTmp.c_str(), m_output.c_str());\n        } else {\n            m_error = \"Failed to rename temporary file\";\n            return false;\n        }\n\n        m_retries++;\n        return true;\n    }\n};\n```",
      "```cpp\n#include <curl/curl.h>\n#include <fstream>\n#include <string>\n#include <ctime>\n\nclass DownloadTask {\nprivate:\n    std::string m_url;\n    std::string m_urlBackup;\n    std::string m_output;\n    std::string m_outputTmp;\n    std::string m_default;\n    time_t m_mtime;\n    unsigned int m_retries;\n    std::string m_name;\n    std::string m_userAgent;\n    std::string m_error;\n\n    static size_t writeData(void *contents, size_t size, size_t nmemb, void *userp) {\n        ((std::ofstream*)userp)->write((char*)contents, size * nmemb);\n        return size * nmemb;\n    }\n\n    bool downloadFile(const std::string& url) {\n        CURL *curl;\n        FILE *fp;\n        CURLcode res;\n\n        curl_global_init(CURL_GLOBAL_ALL);\n        curl = curl_easy_init();\n        if(curl) {\n            fp = fopen(m_outputTmp.c_str(), \"wb\");\n            if(fp) {\n                curl_easy_setopt(curl, CURLOPT_URL, url.c_str());\n                curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, writeData);\n                curl_easy_setopt(curl, CURLOPT_WRITEDATA, fp);\n                curl_easy_setopt(curl, CURLOPT_USERAGENT, m_userAgent.c_str());\n                res = curl_easy_perform(curl);\n                fclose(fp);\n                if(res != CURLE_OK) {\n                    m_error = curl_easy_strerror(res);\n                    curl_easy_cleanup(curl);\n                    curl_global_cleanup();\n                    return false;\n                }\n                curl_easy_cleanup(curl);\n            } else {\n                m_error = \"Failed to open file for writing\";\n                curl_easy_cleanup(curl);\n                curl_global_cleanup();\n                return false;\n            }\n        } else {\n            m_error = \"Failed to initialize curl\";\n            curl_global_cleanup();\n            return false;\n        }\n        curl_global_cleanup();\n        return true;\n    }\n\npublic:\n    static void initialize() {\n        curl_global_init(CURL_GLOBAL_ALL);\n    }\n\n    static void uninitialize() {\n        curl_global_cleanup();\n    }\n\n    DownloadTask(const std::string& url, const std::string& output, const std::string& defaultFile, time_t modificationTime, const std::string& name = \"\") :\n        m_url(url), m_output(output), m_outputTmp(output + \".tmp\"), m_default(defaultFile), m_mtime(modificationTime), m_retries(0), m_name(name), m_userAgent(\"DownloadTask\") {}\n\n    bool run() {\n        m_retries++;\n        if(m_retries > 1) {\n            std::cerr << \"Retrying download...\" << std::endl;\n        }\n        if(m_urlBackup.empty()) {\n            return downloadFile(m_url);\n        } else {\n            if(downloadFile(m_url)) {\n                return true;\n            } else {\n                return downloadFile(m_urlBackup);\n            }\n        }\n    }\n\n    unsigned int getRetries() const {\n        return m_retries;\n    }\n\n    std::string getLastError() const {\n        return m_error;\n    }\n};\n```",
      "```cpp\n#include <curl/curl.h>\n#include <fstream>\n#include <string>\n#include <ctime>\n#include <stdexcept>\n\nclass DownloadTask {\nprivate:\n    std::string m_url;\n    std::string m_urlBackup;\n    std::string m_output;\n    std::string m_outputTmp;\n    std::string m_default;\n    time_t m_mtime;\n    unsigned int m_retries;\n    std::string m_name;\n    std::string m_userAgent;\n    std::string m_error;\n\n    static size_t writeData(void *contents, size_t size, size_t nmemb, void *userp) {\n        ((std::ofstream*)userp)->write((char*)contents, size * nmemb);\n        return size * nmemb;\n    }\n\n    bool downloadFile(const std::string& url) {\n        CURL *curl;\n        FILE *fp;\n        CURLcode res;\n\n        curl_global_init(CURL_GLOBAL_ALL);\n        curl = curl_easy_init();\n        if (!curl) {\n            m_error = \"Failed to initialize curl\";\n            return false;\n        }\n\n        m_outputTmp = m_output + \".tmp\";\n        fp = fopen(m_outputTmp.c_str(), \"wb\");\n        if (!fp) {\n            m_error = \"Failed to open file for writing\";\n            curl_easy_cleanup(curl);\n            curl_global_cleanup();\n            return false;\n        }\n\n        curl_easy_setopt(curl, CURLOPT_URL, url.c_str());\n        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, writeData);\n        curl_easy_setopt(curl, CURLOPT_WRITEDATA, fp);\n        curl_easy_setopt(curl, CURLOPT_USERAGENT, m_userAgent.c_str());\n\n        res = curl_easy_perform(curl);\n        if (res != CURLE_OK) {\n            m_error = curl_easy_strerror(res);\n            fclose(fp);\n            curl_easy_cleanup(curl);\n            curl_global_cleanup();\n            return false;\n        }\n\n        fclose(fp);\n        curl_easy_cleanup(curl);\n        curl_global_cleanup();\n\n        struct stat st;\n        if (stat(m_outputTmp.c_str(), &st) == 0) {\n            if (st.st_mtime != m_mtime) {\n                st.st_mtime = m_mtime;\n                if (stat(m_output.c_str(), &st) == 0) {\n                    remove(m_output.c_str());\n                }\n                rename(m_outputTmp.c_str(), m_output.c_str());\n            }\n        } else {\n            m_error = \"Failed to get file status\";\n            return false;\n        }\n\n        return true;\n    }\n\npublic:\n    static void initialize() {\n        curl_global_init(CURL_GLOBAL_ALL);\n    }\n\n    static void uninitialize() {\n        curl_global_cleanup();\n    }\n\n    DownloadTask(const std::string& url, const std::string& output, const std::string& defaultPath, time_tmtime, const std::string& name = \"\") :\n        m_url(url), m_output(output), m_default(defaultPath), m_mtime(mtime), m_retries(0), m_name(name), m_userAgent(\"DownloadTask\") {}\n\n    bool run() {\n        if (m_retries >= 3) {\n            m_error = \"Maximum retries reached\";\n            return false;\n        }\n\n        if (!downloadFile(m_url)) {\n            if (m_urlBackup.empty()) {\n                m_output = m_default;\n                return false;\n            } else {\n                m_url = m_urlBackup;\n                m_retries++;\n                return run();\n            }\n        }\n\n        return true;\n    }\n\n    unsigned int getRetries() const {\n        return m_retries;\n    }\n};\n```",
      "```cpp\n#include <curl/curl.h>\n#include <fstream>\n#include <iostream>\n#include <string>\n#include <sys/stat.h>\n#include <sys/types.h>\n#include <time.h>\n\nclass DownloadTask {\nprivate:\n    std::string m_url;\n    std::string m_urlBackup;\n    std::string m_output;\n    std::string m_outputTmp;\n    std::string m_default;\n    time_t m_mtime;\n    unsigned int m_retries;\n    std::string m_name;\n    std::string m_userAgent;\n    std::string m_error;\n\n    static size_t writeData(void *contents, size_t size, size_t nmemb, void *userp) {\n        ((std::ofstream*)userp)->write((char*)contents, size * nmemb);\n        return size * nmemb;\n    }\n\n    bool downloadFile(const std::string& url) {\n        CURL *curl;\n        FILE *fp;\n        CURLcode res;\n\n        curl_global_init(CURL_GLOBAL_ALL);\n        curl = curl_easy_init();\n        if(curl) {\n            std::ofstream file(m_outputTmp, std::ios::binary);\n            curl_easy_setopt(curl, CURLOPT_URL, url.c_str());\n            curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, writeData);\n            curl_easy_setopt(curl, CURLOPT_WRITEDATA, &file);\n            curl_easy_setopt(curl, CURLOPT_USERAGENT, m_userAgent.c_str());\n            res = curl_easy_perform(curl);\n            curl_easy_cleanup(curl);\n            file.close();\n            if(res != CURLE_OK) {\n                m_error = curl_easy_strerror(res);\n                return false;\n            }\n            if(m_mtime != 0) {\n                struct stat st;\n                if(stat(m_outputTmp.c_str(), &st) == 0) {\n                    st.st_mtime = m_mtime;\n                    chmod(m_outputTmp.c_str(), st.st_mode);\n                    utime(m_outputTmp.c_str(), &st);\n                }\n            }\n            std::rename(m_outputTmp.c_str(), m_output.c_str());\n            return true;\n        }\n        return false;\n    }\n\npublic:\n    static void initialize() {\n        curl_global_init(CURL_GLOBAL_ALL);\n    }\n\n    static void uninitialize() {\n        curl_global_cleanup();\n    }\n\n    DownloadTask(const std::string& url, const std::string& output, const std::string& defaultFile, time_tmtime, const std::string& name = \"\") :\n        m_url(url), m_output(output), m_default(defaultFile), m_mtime(mtime), m_retries(0), m_name(name), m_userAgent(\"DownloadTask\") {}\n\n    bool run() {\n        if(m_retries < 3) {\n            if(downloadFile(m_url)) {\n                return true;\n            } else {\n                m_retries++;\n                if(!m_urlBackup.empty()) {\n                    return run();\n                }\n            }\n        }\n        if(!m_default.empty()) {\n            std::ifstream src(m_default, std::ios::binary);\n            std::ofstream dst(m_output, std::ios::binary);\n            dst << src.rdbuf();\n            src.close();\n            dst.close();\n        }\n        return false;\n    }\n\n    unsigned int getRetries() const {\n        return m_retries;\n    }\n};\n```",
      "```cpp\n#include <curl/curl.h>\n#include <fstream>\n#include <string>\n#include <ctime>\n\nclass DownloadTask {\nprivate:\n    std::string m_url;\n    std::string m_urlBackup;\n    std::string m_output;\n    std::string m_outputTmp;\n    std::string m_default;\n    time_t m_mtime;\n    unsigned int m_retries;\n    std::string m_name;\n    std::string m_userAgent;\n    std::string m_error;\n\n    static size_t writeData(void *contents, size_t size, size_t nmemb, void *userp) {\n        ((std::ofstream*)userp)->write((char*)contents, size * nmemb);\n        return size * nmemb;\n    }\n\n    bool downloadFile(const std::string& url) {\n        CURL *curl;\n        FILE *fp;\n        CURLcode res;\n\n        curl_global_init(CURL_GLOBAL_ALL);\n        curl = curl_easy_init();\n        if (!curl) {\n            m_error = \"Failed to initialize curl\";\n            return false;\n        }\n\n        fp = fopen(m_outputTmp.c_str(), \"wb\");\n        if (!fp) {\n            m_error = \"Failed to open file for writing\";\n            curl_easy_cleanup(curl);\n            return false;\n        }\n\n        curl_easy_setopt(curl, CURLOPT_URL, url.c_str());\n        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, writeData);\n        curl_easy_setopt(curl, CURLOPT_WRITEDATA, fp);\n        curl_easy_setopt(curl, CURLOPT_USERAGENT, m_userAgent.c_str());\n\n        res = curl_easy_perform(curl);\n        if (res != CURLE_OK) {\n            m_error = curl_easy_strerror(res);\n            fclose(fp);\n            curl_easy_cleanup(curl);\n            return false;\n        }\n\n        fclose(fp);\n        curl_easy_cleanup(curl);\n\n        struct stat st;\n        if (stat(m_outputTmp.c_str(), &st) == 0) {\n            if (m_mtime != 0) {\n                st.st_mtime = m_mtime;\n                if (stat(m_output.c_str(), &st) == 0) {\n                    st.st_mtime = m_mtime;\n                }\n                if (stat(m_output.c_str(), &st) == 0) {\n                    if (st.st_mtime != m_mtime) {\n                        rename(m_output.c_str(), (m_output + \".bak\").c_str());\n                        rename(m_outputTmp.c_str(), m_output.c_str());\n                    }\n                } else {\n                    rename(m_outputTmp.c_str(), m_output.c_str());\n                }\n            }\n            return true;\n        } else {\n            m_error = \"Failed to get file status\";\n            return false;\n        }\n    }\n\npublic:\n    static void initialize() {\n        curl_global_init(CURL_GLOBAL_ALL);\n    }\n\n    static void uninitialize() {\n        curl_global_cleanup();\n    }\n\n    DownloadTask(const std::string& url, const std::string& output, const std::string& defaultPath, time_tmtime, const std::string& name = \"\") :\n        m_url(url), m_output(output), m_outputTmp(output + \".tmp\"), m_default(defaultPath), m_mtime(mtime), m_retries(0), m_name(name), m_userAgent(\"DownloadTask/1.0\") {}\n\n    bool run() {\n        if (m_retries < 3) {\n            if (downloadFile(m_url)) {\n                m_retries = 0;\n                return true;\n            } else {\n                m_retries++;\n                if (m_urlBackup.empty()) {\n                    m_error = \"Download failed and no backup URL provided\";\n                    return false;\n                }\n                m_url = m_urlBackup;\n                return run();\n            }\n        } else {\n            m_error = \"Download failed after retries\";\n            return false;\n        }\n    }\n\n    unsigned int getRetries() const {\n        return m_retries;\n    }\n};\n```"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 40,
    "Instruction": "Task Description: Implement a WebSocket server in C++ using the WebSocket++ library to handle client connections, process incoming messages, and echo messages back to clients. The server should also support stopping the listening process upon receiving a specific command.\n\nClass Description: The WebSocketServer class encapsulates a WebSocket++ server instance, managing connection handling, message processing, and server lifecycle operations.\n\nAttributes:\n- service_: [asio::io_service&] - Reference to the ASIO I/O service used for network operations\n- port_: [int] - The port number on which the server listens for connections\n- ws_server_: [ws_echo_server] - The WebSocket++ server instance\n\nMethods:\n- Constructor: [WebSocketServer]([asio::io_service& service, int port]) -> [void] - Initializes the WebSocket++ server, sets up logging, message handling, and starts listening on the specified port\n- on_message: [on_message]([websocketpp::connection_hdl hdl, ws_echo_server::message_ptr msg]) -> [void] - Callback function that processes incoming messages, echoes them back to clients, and handles the stop-listening command\n- run: [run]() -> [void] - Starts the server's event loop to handle connections and messages",
    "Canonical_solution": "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <iostream>\n\nusing websocketpp::lib::placeholders::_1;\nusing websocketpp::lib::placeholders::_2;\nusing websocketpp::lib::bind;\n\ntypedef websocketpp::server<websocketpp::config::asio> ws_echo_server;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer(asio::io_service& service, int port) \n        : service_(service), port_(port) {\n        ws_server_.set_access_channels(websocketpp::log::alevel::all);\n        ws_server_.clear_access_channels(websocketpp::log::alevel::frame_payload);\n        ws_server_.init_asio(&service_);\n        ws_server_.set_message_handler(bind(&WebSocketServer::on_message, this, ::_1, ::_2));\n        ws_server_.listen(port_);\n        ws_server_.start_accept();\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, ws_echo_server::message_ptr msg) {\n        std::cout << \"on_message called with hdl: \" << hdl.lock().get()\n                  << \" and message: \" << msg->get_payload()\n                  << std::endl;\n\n        if (msg->get_payload() == \"stop-listening\") {\n            ws_server_.stop_listening();\n            return;\n        }\n\n        try {\n            ws_server_.send(hdl, msg->get_payload(), msg->get_opcode());\n        } catch (websocketpp::exception const & e) {\n            std::cout << \"Echo failed because: \"\n                      << \"(\" << e.what() << \")\" << std::endl;\n        }\n    }\n\n    void run() {\n        service_.run();\n    }\n\nprivate:\n    asio::io_service& service_;\n    int port_;\n    ws_echo_server ws_server_;\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 154,
    "matched_results": [
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <asio.hpp>\n\nnamespace websocketpp {\n\ntemplate <typename T>\nclass ws_echo_server : public server<T> {\npublic:\n    using server<T>::server;\n\n    void on_open(connection_hdl hdl) {\n        std::cout << \"Connection opened\" << std::endl;\n    }\n\n    void on_message(connection_hdl hdl, message_ptr msg) {\n        if (msg->get_payload() == \"stop\") {\n            stop();\n        } else {\n            echo(hdl, msg);\n        }\n    }\n\n    void on_close(connection_hdl hdl) {\n        std::cout << \"Connection closed\" << std::endl;\n    }\n\n    void on_error(connection_hdl hdl, websocketpp::lib::error_code ec, char* msg) {\n        std::cout << \"Error: \" << ec.message() << std::endl;\n    }\n\nprivate:\n    void echo(connection_hdl hdl, message_ptr msg) {\n        server::send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n};\n\n} // namespace websocketpp\n\nclass WebSocketServer {\npublic:\n    WebSocketServer(asio::io_service& service, int port) : service_(service), port_(port), ws_server_(service) {\n        ws_server_.set_access_channels(websocketpp::log::alevel::all);\n        ws_server_.clear_access_channels(websocketpp::log::alevel::frame_payload);\n        ws_server_.init_asio(&service);\n        ws_server_.set_open_handler(&WebSocketServer::on_open, this);\n        ws_server_.set_message_handler(&WebSocketServer::on_message, this);\n        ws_server_.set_close_handler(&WebSocketServer::on_close, this);\n        ws_server_.set_error_handler(&WebSocketServer::on_error, this);\n        ws_server_.listen(port_);\n        ws_server_.start_accept();\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, ws_echo_server::message_ptr msg) {\n        if (msg->get_payload() == \"stop\") {\n            stop();\n        } else {\n            echo(hdl, msg);\n        }\n    }\n\n    void run() {\n        ws_server_.run();\n    }\n\nprivate:\n    asio::io_service& service_;\n    int port_;\n    ws_echo_server<websocketpp::config::asio_no_tls_client> ws_server_;\n\n    void stop() {\n        ws_server_.stop();\n    }\n\n    void echo(websocketpp::connection_hdl hdl, ws_echo_server::message_ptr msg) {\n        ws_server_.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n};\n```"
    ],
    "unmatched_results": [
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <asio.hpp>\n\nnamespace websocketpp { namespace server { class handler_type; } }\n\nclass WebSocketServer {\npublic:\n    WebSocketServer(asio::io_service& service, int port)\n        : service_(service), port_(port), ws_server_(websocketpp::config::asio_no_tls_server) {\n        ws_server_.set_access_channels(websocketpp::log::alevel::all);\n        ws_server_.clear_access_channels(websocketpp::log::alevel::frame_payload);\n        ws_server_.set_open_handler(on_open);\n        ws_server_.set_message_handler(on_message);\n        ws_server_.set_close_handler(on_close);\n        ws_server_.init_asio(&service_);\n        ws_server_.listen(port_);\n        ws_server_.start_accept();\n    }\n\n    void run() {\n        service_.run();\n    }\n\nprivate:\n    void on_open(websocketpp::connection_hdl hdl) {\n        std::cout << \"Connection opened\" << std::endl;\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, ws_echo_server::message_ptr msg) {\n        if (msg->get_payload() == \"stop\") {\n            ws_server_.stop_accept();\n            service_.stop();\n        } else {\n            ws_server_.send(hdl, msg->get_payload(), msg->get_opcode());\n        }\n    }\n\n    void on_close(websocketpp::connection_hdl hdl) {\n        std::cout << \"Connection closed\" << std::endl;\n    }\n\n    asio::io_service& service_;\n    int port_;\n    ws_echo_server ws_server_;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <asio.hpp>\n#include <iostream>\n\nnamespace ws = websocketpp;\nusing asio::ip::tcp;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer(asio::io_service& service, int port)\n        : service_(service), port_(port), ws_server_(service, ws::server_config::endpoints()) {\n        ws_server_.set_access_channels(ws::log::alevel::all);\n        ws_server_.clear_access_channels(ws::log::alevel::frame_payload);\n        ws_server_.set_open_handler([this](ws::connection_hdl hdl) {\n            std::cout << \"Connection opened\" << std::endl;\n        });\n        ws_server_.set_close_handler([this](ws::connection_hdl hdl) {\n            std::cout << \"Connection closed\" << std::endl;\n        });\n        ws_server_.set_message_handler([this](ws::connection_hdl hdl, ws::server::message_ptr msg) {\n            on_message(hdl, msg);\n        });\n        ws_server_.init_asio();\n        ws_server_.listen(port_);\n        ws_server_.start_accept();\n    }\n\n    void run() {\n        ws_server_.run();\n    }\n\nprivate:\n    void on_message(ws::connection_hdl hdl, ws::server::message_ptr msg) {\n        if (msg->get_payload() == \"stop\") {\n            ws_server_.stop_accept();\n            ws_server_.stop();\n            return;\n        }\n        ws_server_.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    asio::io_service& service_;\n    int port_;\n    ws::server ws_server_;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <asio.hpp>\n#include <iostream>\n\nnamespace websocketpp = websocketpp;\nusing asio::ip::tcp;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer(asio::io_service& service, int port)\n        : service_(service), port_(port), ws_server_(websocketpp::config::asio_no_tls_client) {\n        ws_server_.set_access_channels(websocketpp::log::alevel::all);\n        ws_server_.clear_access_channels(websocketpp::log::alevel::frame_payload);\n        ws_server_.set_open_handler([this](websocketpp::connection_hdl hdl) {\n            std::cout << \"Connection opened\" << std::endl;\n        });\n        ws_server_.set_close_handler([this](websocketpp::connection_hdl hdl) {\n            std::cout << \"Connection closed\" << std::endl;\n        });\n        ws_server_.set_message_handler([this](websocketpp::connection_hdl hdl, ws_echo_server::message_ptr msg) {\n            on_message(hdl, msg);\n        });\n        ws_server_.init_asio(&service_);\n        ws_server_.listen(port_);\n        ws_server_.start_accept();\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, ws_echo_server::message_ptr msg) {\n        if (msg->get_payload() == \"stop\") {\n            stop_server = true;\n        } else {\n            ws_server_.send(hdl, msg->get_payload(), msg->get_opcode());\n        }\n    }\n\n    void run() {\n        while (!stop_server) {\n            service_.run();\n        }\n    }\n\nprivate:\n    asio::io_service& service_;\n    int port_;\n    websocketpp::server<websocketpp::config::asio_no_tls_client> ws_server_;\n    bool stop_server = false;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <asio.hpp>\n#include <iostream>\n\nnamespace ws = websocketpp;\nusing asio::ip::tcp;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer(asio::io_service& service, int port)\n        : service_(service), port_(port), ws_server_(service) {\n        ws_server_.set_access_channels(ws::log::alevel::all);\n        ws_server_.clear_access_channels(ws::log::alevel::frame_payload);\n        ws_server_.set_open_handler(&WebSocketServer::on_open, this);\n        ws_server_.set_message_handler(&WebSocketServer::on_message, this);\n        ws_server_.set_close_handler(&WebSocketServer::on_close, this);\n        ws_server_.init_asio(&service);\n        ws_server_.listen(port_);\n        ws_server_.start_accept();\n    }\n\n    void run() {\n        ws_server_.run();\n    }\n\nprivate:\n    void on_open(ws::connection_hdl hdl) {\n        std::cout << \"Connection opened\" << std::endl;\n    }\n\n    void on_message(ws::connection_hdl hdl, ws::server::message_ptr msg) {\n        if (msg->get_payload() == \"stop\") {\n            ws_server_.stop();\n        } else {\n            ws_server_.send(hdl, msg->get_payload(), msg->get_opcode());\n        }\n    }\n\n    void on_close(ws::connection_hdl hdl) {\n        std::cout << \"Connection closed\" << std::endl;\n    }\n\n    asio::io_service& service_;\n    int port_;\n    ws::server<ws::config::asio_no_tls_client> ws_server_;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <asio.hpp>\n#include <iostream>\n\nnamespace websocketpp = websocketpp;\nusing asio::ip::tcp;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer(asio::io_service& service, int port)\n        : service_(service), port_(port), ws_server_(websocketpp::config::asio_no_tls_client) {\n        ws_server_.set_access_channels(websocketpp::log::alevel::all);\n        ws_server_.clear_access_channels(websocketpp::log::alevel::frame_payload);\n        ws_server_.set_open_handler([this](websocketpp::connection_hdl hdl) {\n            std::cout << \"Connection opened\" << std::endl;\n        });\n        ws_server_.set_close_handler([this](websocketpp::connection_hdl hdl) {\n            std::cout << \"Connection closed\" << std::endl;\n        });\n        ws_server_.set_message_handler([this](websocketpp::connection_hdl hdl, ws_echo_server::message_ptr msg) {\n            on_message(hdl, msg);\n        });\n        ws_server_.init_asio(&service_);\n        ws_server_.listen(port_);\n        ws_server_.start_accept();\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, ws_echo_server::message_ptr msg) {\n        if (msg->get_payload() == \"stop\") {\n            ws_server_.stop_accept();\n            service_.stop();\n        } else {\n            ws_server_.send(hdl, msg->get_payload(), msg->get_opcode());\n        }\n    }\n\n    void run() {\n        ws_server_.run();\n    }\n\nprivate:\n    asio::io_service& service_;\n    int port_;\n    websocketpp::server<websocketpp::config::asio_no_tls_client> ws_server_;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <asio.hpp>\n#include <iostream>\n\nnamespace websocketpp = websocketpp;\nusing asio::ip::tcp;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer(asio::io_service& service, int port)\n        : service_(service), port_(port), ws_server_(websocketpp::config::asio_no_tls_client) {\n        ws_server_.set_access_channels(websocketpp::log::alevel::all);\n        ws_server_.clear_access_channels(websocketpp::log::alevel::frame_payload);\n        ws_server_.set_open_handler([this](websocketpp::connection_hdl hdl) {\n            auto conn = ws_server_.get_connection(hdl);\n            conn->set_close_handler([this, hdl](websocketpp::connection_hdl hdl) {\n                auto conn = ws_server_.get_connection(hdl);\n                std::cout << \"Connection closed\" << std::endl;\n            });\n        });\n        ws_server_.set_message_handler([this](websocketpp::connection_hdl hdl, websocketpp::server::message_ptr msg) {\n            on_message(hdl, msg);\n        });\n        ws_server_.init_asio(&service_);\n        ws_server_.listen(port_);\n        ws_server_.start_accept();\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, websocketpp::server::message_ptr msg) {\n        if (msg->get_payload() == \"stop\") {\n            ws_server_.stop_accept();\n            ws_server_.stop_all();\n            return;\n        }\n        auto conn = ws_server_.get_connection(hdl);\n        conn->send(msg->get_payload(), msg->get_opcode());\n    }\n\n    void run() {\n        ws_server_.run();\n    }\n\nprivate:\n    asio::io_service& service_;\n    int port_;\n    websocketpp::server<websocketpp::config::asio_no_tls_client> ws_server_;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <asio.hpp>\n#include <iostream>\n\nnamespace ws = websocketpp;\nusing asio::ip::tcp;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer(asio::io_service& service, int port)\n        : service_(service), port_(port), ws_server_(service) {\n        ws_server_.set_access_channels(ws::log::alevel::all);\n        ws_server_.clear_access_channels(ws::log::alevel::frame_payload);\n        ws_server_.set_open_handler([this](ws::connection_hdl hdl) {\n            std::cout << \"Connection opened\" << std::endl;\n        });\n        ws_server_.set_close_handler([this](ws::connection_hdl hdl) {\n            std::cout << \"Connection closed\" << std::endl;\n        });\n        ws_server_.set_message_handler([this](ws::connection_hdl hdl, ws::message_ptr msg) {\n            on_message(hdl, msg);\n        });\n        ws_server_.init_asio();\n        ws_server_.listen(port_);\n        ws_server_.start_accept();\n    }\n\n    void on_message(ws::connection_hdl hdl, ws::message_ptr msg) {\n        if (msg->get_payload() == \"stop\") {\n            stop_server();\n        } else {\n            ws_server_.send(hdl, msg->get_payload(), msg->get_opcode());\n        }\n    }\n\n    void run() {\n        ws_server_.run();\n    }\n\nprivate:\n    asio::io_service& service_;\n    int port_;\n    ws::server<ws::config::asio_no_tls_client> ws_server_;\n\n    void stop_server() {\n        ws_server_.stop_accept();\n        ws_server_.stop_all();\n    }\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <asio.hpp>\n#include <iostream>\n\nnamespace websocketpp = websocketpp;\nusing asio::ip::tcp;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer(asio::io_service& service, int port)\n        : service_(service), port_(port), ws_server_(service) {\n        ws_server_.set_access_channels(websocketpp::log::alevel::all);\n        ws_server_.clear_access_channels(websocketpp::log::alevel::frame_payload);\n        ws_server_.set_open_handler([this](websocketpp::connection_hdl hdl) {\n            std::cout << \"Connection opened\" << std::endl;\n        });\n        ws_server_.set_close_handler([this](websocketpp::connection_hdl hdl) {\n            std::cout << \"Connection closed\" << std::endl;\n        });\n        ws_server_.set_message_handler([this](websocketpp::connection_hdl hdl, ws_echo_server::message_ptr msg) {\n            on_message(hdl, msg);\n        });\n        ws_server_.init_asio();\n        ws_server_.listen(port_);\n        ws_server_.start_accept();\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, ws_echo_server::message_ptr msg) {\n        if (msg->get_payload() == \"stop\") {\n            stop_server();\n        } else {\n            ws_server_.send(hdl, msg->get_payload(), msg->get_opcode());\n        }\n    }\n\n    void run() {\n        ws_server_.run();\n    }\n\nprivate:\n    void stop_server() {\n        ws_server_.stop_accept();\n        ws_server_.stop();\n    }\n\n    asio::io_service& service_;\n    int port_;\n    websocketpp::server<websocketpp::config::asio_no_tls_client> ws_server_;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <asio.hpp>\n\nusing websocketpp::server;\nusing websocketpp::config::asio_no_tls_client;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer(asio::io_service& service, int port)\n        : service_(service), port_(port), ws_server_(asio_no_tls_client::value) {\n        ws_server_.set_access_channels(websocketpp::log::alevel::all);\n        ws_server_.clear_access_channels(websocketpp::log::alevel::frame_payload);\n        ws_server_.set_open_handler([this](websocketpp::connection_hdl hdl) {\n            auto conn = ws_server_.get_connection(hdl);\n            conn->set_close_handler([this, hdl](websocketpp::connection_hdl hdl) {\n                auto conn = ws_server_.get_connection(hdl);\n                conn->close(websocketpp::close::status::normal, \"\");\n            });\n        });\n        ws_server_.set_message_handler([this](websocketpp::connection_hdl hdl, ws_echo_server::message_ptr msg) {\n            on_message(hdl, msg);\n        });\n        ws_server_.init_asio(&service_);\n        ws_server_.listen(port_);\n        ws_server_.start_accept();\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, ws_echo_server::message_ptr msg) {\n        auto conn = ws_server_.get_connection(hdl);\n        if (msg->get_payload() == \"stop\") {\n            conn->close(websocketpp::close::status::normal, \"\");\n            return;\n        }\n        conn->send(msg->get_payload(), websocketpp::frame::op::text);\n    }\n\n    void run() {\n        ws_server_.run();\n    }\n\nprivate:\n    asio::io_service& service_;\n    int port_;\n    server<asio_no_tls_client> ws_server_;\n};\n```"
    ],
    "match_count": 1,
    "pass@3": 0.30000000000000004,
    "pass@5": 0.5
  },
  {
    "Task_id": 41,
    "Instruction": "Task Description: Implement a WebSocket server in C++ using the WebSocket++ library that can handle multiple client connections and broadcast messages to all connected clients.\n\nClass Description: The `broadcast_server` class implements a WebSocket server that maintains a set of active connections and broadcasts incoming messages to all connected clients.\n\nAttributes:\n- m_server: [server] - The WebSocket++ server instance that handles network communication\n- m_connections: [con_list (std::set<connection_hdl>)] - A set of active client connections\n\nMethods:\n- broadcast_server() - [Constructor] -> [void] - Initializes the WebSocket++ server and sets up handlers for connection events\n- on_open(connection_hdl hdl) -> [void] - Handles new client connections by adding them to the connection set\n- on_close(connection_hdl hdl) -> [void] - Handles client disconnections by removing them from the connection set\n- on_message(connection_hdl hdl, server::message_ptr msg) -> [void] - Handles incoming messages by broadcasting them to all connected clients\n- run(uint16_t port) -> [void] - Starts the server listening on the specified port and begins accepting connections",
    "Canonical_solution": "#include <set>\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\nusing websocketpp::connection_hdl;\nusing websocketpp::lib::placeholders::_1;\nusing websocketpp::lib::placeholders::_2;\nusing websocketpp::lib::bind;\n\nclass broadcast_server {\npublic:\n    broadcast_server() {\n        m_server.init_asio();\n\n        m_server.set_open_handler(bind(&broadcast_server::on_open,this,::_1));\n        m_server.set_close_handler(bind(&broadcast_server::on_close,this,::_1));\n        m_server.set_message_handler(bind(&broadcast_server::on_message,this,::_1,::_2));\n    }\n\n    void on_open(connection_hdl hdl) {\n        m_connections.insert(hdl);\n    }\n\n    void on_close(connection_hdl hdl) {\n        m_connections.erase(hdl);\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        for (auto it : m_connections) {\n            m_server.send(it,msg);\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\nprivate:\n    typedef std::set<connection_hdl,std::owner_less<connection_hdl>> con_list;\n\n    server m_server;\n    con_list m_connections;\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 154,
    "matched_results": [
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <set>\n#include <iostream>\n\nnamespace asio = websocketpp::lib::asio;\nnamespace http = websocketpp::lib::http;\nnamespace websocket = websocketpp::lib::websocket;\n\nclass broadcast_server {\npublic:\n    broadcast_server() {\n        m_server.set_access_channels(websocketpp::log::alevel::all);\n        m_server.clear_access_channels(websocketpp::log::alevel::frame_payload);\n        m_server.init_asio();\n        m_server.set_open_handler(&broadcast_server::on_open, this);\n        m_server.set_close_handler(&broadcast_server::on_close, this);\n        m_server.set_message_handler(&broadcast_server::on_message, this);\n    }\n\n    void on_open(connection_hdl hdl) {\n        m_connections.insert(hdl);\n    }\n\n    void on_close(connection_hdl hdl) {\n        m_connections.erase(hdl);\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        for (auto& conn_hdl : m_connections) {\n            if (conn_hdl != hdl) {\n                m_server.send(conn_hdl, msg->get_payload(), msg->get_opcode());\n            }\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    websocketpp::server<websocketpp::config::asio_no_tls_client> m_server;\n    std::set<websocketpp::connection_hdl> m_connections;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <set>\n#include <iostream>\n\nnamespace ws = websocketpp::server;\nusing websocketpp::connection_hdl;\n\nclass broadcast_server {\npublic:\n    broadcast_server() {\n        m_server.set_access_channels(ws::log::alevel::all);\n        m_server.clear_access_channels(ws::log::alevel::frame_payload);\n        m_server.init_asio();\n        m_server.set_open_handler(&broadcast_server::on_open, this);\n        m_server.set_close_handler(&broadcast_server::on_close, this);\n        m_server.set_message_handler(&broadcast_server::on_message, this);\n    }\n\n    void on_open(connection_hdl hdl) {\n        m_connections.insert(hdl);\n    }\n\n    void on_close(connection_hdl hdl) {\n        m_connections.erase(hdl);\n    }\n\n    void on_message(connection_hdl hdl, ws::server::message_ptr msg) {\n        for (const auto& conn_hdl : m_connections) {\n            m_server.send(conn_hdl, msg->get_payload(), msg->get_opcode());\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    ws::server m_server;\n    std::set<connection_hdl> m_connections;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <set>\n#include <iostream>\n\nnamespace ws = websocketpp::server;\n\nclass broadcast_server {\npublic:\n    broadcast_server() {\n        m_server.set_access_channels(ws::log::alevel::all);\n        m_server.clear_access_channels(ws::log::alevel::frame_payload);\n        m_server.init_asio();\n        m_server.set_open_handler(&broadcast_server::on_open, this);\n        m_server.set_close_handler(&broadcast_server::on_close, this);\n        m_server.set_message_handler(&broadcast_server::on_message, this);\n    }\n\n    void on_open(ws::connection_hdl hdl) {\n        m_connections.insert(hdl);\n    }\n\n    void on_close(ws::connection_hdl hdl) {\n        m_connections.erase(hdl);\n    }\n\n    void on_message(ws::connection_hdl hdl, ws::server::message_ptr msg) {\n        for (auto& conn_hdl : m_connections) {\n            m_server.send(conn_hdl, msg->get_payload(), msg->get_opcode());\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    ws::server m_server;\n    std::set<ws::connection_hdl> m_connections;\n};\n```"
    ],
    "unmatched_results": [
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <set>\n#include <iostream>\n\nnamespace asio = websocketpp::lib::asio;\nnamespace http = websocketpp::lib::http;\nnamespace websocket = websocketpp::lib::websocket;\n\nclass broadcast_server {\npublic:\n    broadcast_server() : m_server(m_io_service, asio::ip::tcp::endpoint(asio::ip::tcp::v4(), 0)) {\n        m_server.set_access_channels(websocketpp::log::alevel::all);\n        m_server.clear_access_channels(websocketpp::log::alevel::frame_payload);\n        m_server.set_open_handler(&broadcast_server::on_open, this);\n        m_server.set_close_handler(&broadcast_server::on_close, this);\n        m_server.set_message_handler(&broadcast_server::on_message, this);\n    }\n\n    void on_open(connection_hdl hdl) {\n        m_connections.insert(hdl);\n    }\n\n    void on_close(connection_hdl hdl) {\n        m_connections.erase(hdl);\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        for (auto& conn_hdl : m_connections) {\n            if (conn_hdl != hdl) {\n                m_server.send(conn_hdl, msg->get_payload(), msg->get_opcode());\n            }\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(asio::ip::tcp::endpoint(asio::ip::tcp::v4(), port));\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    websocketpp::server<websocketpp::config::asio_no_tls_client> m_server;\n    asio::io_service m_io_service;\n    std::set<websocketpp::connection_hdl> m_connections;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <set>\n#include <iostream>\n\nnamespace websocket = websocketpp;\nusing websocket::server;\nusing websocket::connection_hdl;\n\nclass broadcast_server {\npublic:\n    broadcast_server() : m_server(m_io_service) {\n        m_server.set_access_channels(websocket::log::alevel::all);\n        m_server.clear_access_channels(websocket::log::alevel::frame_payload);\n        m_server.set_open_handler(&broadcast_server::on_open, this);\n        m_server.set_close_handler(&broadcast_server::on_close, this);\n        m_server.set_message_handler(&broadcast_server::on_message, this);\n    }\n\n    void on_open(connection_hdl hdl) {\n        m_connections.insert(hdl);\n    }\n\n    void on_close(connection_hdl hdl) {\n        m_connections.erase(hdl);\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        for (auto it = m_connections.begin(); it != m_connections.end(); ++it) {\n            m_server.send(*it, msg->get_payload(), msg->get_opcode());\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.init_asio(&m_io_service);\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    websocket::server<websocket::config::asio_no_tls_client> m_server;\n    websocket::lib::io_service m_io_service;\n    std::set<connection_hdl> m_connections;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <set>\n#include <iostream>\n\nnamespace websocket = websocketpp;\nusing websocket::server;\nusing websocket::connection_hdl;\nusing websocket::message_ptr;\n\nclass broadcast_server {\npublic:\n    broadcast_server() : m_server(m_io_service, websocketpp::lib::asio::ip::tcp::endpoint(websocketpp::lib::asio::ip::tcp::v4(), port)) {\n        m_server.set_access_channels(websocketpp::log::alevel::all);\n        m_server.clear_access_channels(websocketpp::log::alevel::frame_payload);\n        m_server.set_open_handler(&broadcast_server::on_open, this);\n        m_server.set_close_handler(&broadcast_server::on_close, this);\n        m_server.set_message_handler(&broadcast_server::on_message, this);\n    }\n\n    void on_open(connection_hdl hdl) {\n        m_connections.insert(hdl);\n    }\n\n    void on_close(connection_hdl hdl) {\n        m_connections.erase(hdl);\n    }\n\n    void on_message(connection_hdl hdl, message_ptr msg) {\n        for (const auto& conn : m_connections) {\n            m_server.send(conn, msg->get_payload(), msg->get_opcode());\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    websocket::lib::asio::io_service m_io_service;\n    server m_server;\n    uint16_t port;\n    std::set<connection_hdl> m_connections;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <set>\n#include <iostream>\n\nnamespace websocket = websocketpp;\nusing websocket::server;\nusing websocket::connection_hdl;\nusing websocket::message_ptr;\n\nclass broadcast_server {\nprivate:\n    server<websocket::config::asio_no_tls_client> m_server;\n    std::set<connection_hdl> m_connections;\n\npublic:\n    broadcast_server() {\n        m_server.set_access_channels(websocket::log::alevel::all);\n        m_server.clear_access_channels(websocket::log::alevel::frame_payload);\n        m_server.set_open_handler(&broadcast_server::on_open, this);\n        m_server.set_close_handler(&broadcast_server::on_close, this);\n        m_server.set_message_handler(&broadcast_server::on_message, this);\n    }\n\n    void on_open(connection_hdl hdl) {\n        m_connections.insert(hdl);\n    }\n\n    void on_close(connection_hdl hdl) {\n        m_connections.erase(hdl);\n    }\n\n    void on_message(connection_hdl hdl, message_ptr msg) {\n        for (const auto& conn : m_connections) {\n            if (conn != hdl) {\n                m_server.send(conn, msg->get_payload(), msg->get_opcode());\n            }\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.init_asio();\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <set>\n#include <iostream>\n\nnamespace websocket = websocketpp;\nusing websocket::server;\nusing websocket::connection_hdl;\nusing websocket::message_ptr;\n\nclass broadcast_server {\nprivate:\n    server<websocket::config::asio_no_tls_client> m_server;\n    std::set<connection_hdl> m_connections;\n\npublic:\n    broadcast_server() {\n        m_server.set_access_channels(websocket::log::alevel::all);\n        m_server.clear_access_channels(websocket::log::alevel::frame_payload);\n        m_server.set_open_handler(&broadcast_server::on_open, this);\n        m_server.set_close_handler(&broadcast_server::on_close, this);\n        m_server.set_message_handler(&broadcast_server::on_message, this);\n    }\n\n    void on_open(connection_hdl hdl) {\n        m_connections.insert(hdl);\n    }\n\n    void on_close(connection_hdl hdl) {\n        m_connections.erase(hdl);\n    }\n\n    void on_message(connection_hdl hdl, message_ptr msg) {\n        for (const auto& conn_hdl : m_connections) {\n            if (conn_hdl != hdl) {\n                m_server.send(conn_hdl, msg->get_payload(), msg->get_opcode());\n            }\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.init_asio();\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <set>\n#include <iostream>\n\nnamespace websocket = websocketpp;\nusing websocket::server;\nusing websocket::connection_hdl;\nusing websocket::message_ptr;\n\nclass broadcast_server {\nprivate:\n    server<websocket::config::asio_no_tls_client> m_server;\n    std::set<connection_hdl> m_connections;\n\npublic:\n    broadcast_server() {\n        m_server.set_access_channels(websocket::log::alevel::all);\n        m_server.clear_access_channels(websocket::log::alevel::frame_payload);\n        m_server.set_open_handler(&broadcast_server::on_open, this);\n        m_server.set_close_handler(&broadcast_server::on_close, this);\n        m_server.set_message_handler(&broadcast_server::on_message, this);\n    }\n\n    void on_open(connection_hdl hdl) {\n        m_connections.insert(hdl);\n    }\n\n    void on_close(connection_hdl hdl) {\n        m_connections.erase(hdl);\n    }\n\n    void on_message(connection_hdl hdl, message_ptr msg) {\n        for (const auto& conn_hdl : m_connections) {\n            if (conn_hdl != hdl) {\n                m_server.send(conn_hdl, msg->get_payload(), msg->get_opcode());\n            }\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.init_asio();\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <set>\n#include <iostream>\n\nnamespace websocket = websocketpp;\nusing websocket::server;\nusing websocket::connection_hdl;\nusing websocket::message_ptr;\n\nclass broadcast_server {\npublic:\n    broadcast_server() : m_server(m_io_service) {\n        m_server.set_access_channels(websocket::log::alevel::all);\n        m_server.clear_access_channels(websocket::log::alevel::frame_payload);\n        m_server.set_open_handler(&broadcast_server::on_open, this);\n        m_server.set_close_handler(&broadcast_server::on_close, this);\n        m_server.set_message_handler(&broadcast_server::on_message, this);\n    }\n\n    void on_open(connection_hdl hdl) {\n        m_connections.insert(hdl);\n    }\n\n    void on_close(connection_hdl hdl) {\n        m_connections.erase(hdl);\n    }\n\n    void on_message(connection_hdl hdl, message_ptr msg) {\n        for (auto& conn : m_connections) {\n            m_server.send(conn, msg->get_payload(), msg->get_opcode());\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.init_asio(&m_io_service);\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    websocket::server<websocket::config::asio_no_tls_client> m_server;\n    websocket::lib::io_service m_io_service;\n    std::set<connection_hdl> m_connections;\n};\n```"
    ],
    "match_count": 3,
    "pass@3": 0.7083333333333333,
    "pass@5": 0.9166666666666666
  },
  {
    "Task_id": 42,
    "Instruction": "Task Description: Implement a WebSocket server in C++ using the WebSocket++ library that can handle multiple client connections, process incoming messages, and support configurable threading for concurrent operations.\n\nClass Description: The WebSocketServer class encapsulates a WebSocket++ server implementation, providing methods to initialize, configure, and run the server with customizable port and threading settings.\n\nAttributes:\n- testee_server_: [server] - The WebSocket++ server instance that manages connections and message handling\n- port_: [short] - The port number on which the server listens for incoming connections\n- num_threads_: [size_t] - The number of threads to use for handling connections (1 for single-threaded mode)\n\nMethods:\n- WebSocketServer([short port = 9002], [size_t num_threads = 1]) -> [void] - Constructor that initializes the server with specified port and thread count (defaults to port 9002 and single-threaded)\n- run() -> [void] - Starts the WebSocket server, sets up message handlers, begins listening on the specified port, and manages the server's event loop(s)\n- on_message([websocketpp::connection_hdl hdl], [message_ptr msg]) -> [void] - Message handler that echoes received messages back to the client (private method)\n- on_socket_init([websocketpp::connection_hdl hdl], [boost::asio::ip::tcp::socket & s]) -> [void] - Socket initialization handler that enables TCP_NODELAY for reduced latency (private method)",
    "Canonical_solution": "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <websocketpp/extensions/permessage_deflate/enabled.hpp>\n#include <boost/asio/ip/tcp.hpp>\n#include <websocketpp/common/thread.hpp>\nusing websocketpp::lib::placeholders::_1;\nusing websocketpp::lib::placeholders::_2;\nusing websocketpp::lib::bind;\ntypedef websocketpp::server<websocketpp::config::asio> server;\ntypedef server::message_ptr message_ptr;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer(short port = 9002, size_t num_threads = 1) \n        : port_(port), num_threads_(num_threads) {}\n\n    void run() {\n        try {\n            testee_server_.clear_access_channels(websocketpp::log::alevel::all);\n            testee_server_.clear_error_channels(websocketpp::log::alevel::all);\n\n            testee_server_.init_asio();\n            testee_server_.set_reuse_addr(true);\n\n            testee_server_.set_message_handler(bind(&WebSocketServer::on_message, this, ::_1, ::_2));\n            testee_server_.set_socket_init_handler(bind(&WebSocketServer::on_socket_init, this, ::_1, ::_2));\n\n            testee_server_.set_listen_backlog(8192);\n            testee_server_.listen(port_);\n            testee_server_.start_accept();\n\n            if (num_threads_ == 1) {\n                testee_server_.run();\n            } else {\n                std::vector<websocketpp::lib::shared_ptr<websocketpp::lib::thread>> ts;\n                for (size_t i = 0; i < num_threads_; i++) {\n                    ts.push_back(websocketpp::lib::make_shared<websocketpp::lib::thread>(&server::run, &testee_server_));\n                }\n\n                for (size_t i = 0; i < num_threads_; i++) {\n                    ts[i]->join();\n                }\n            }\n        } catch (websocketpp::exception const & e) {\n            std::cout << \"exception: \" << e.what() << std::endl;\n        }\n    }\n\nprivate:\n    void on_message(websocketpp::connection_hdl hdl, message_ptr msg) {\n        testee_server_.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    void on_socket_init(websocketpp::connection_hdl, boost::asio::ip::tcp::socket & s) {\n        boost::asio::ip::tcp::no_delay option(true);\n        s.set_option(option);\n    }\n\n    server testee_server_;\n    short port_;\n    size_t num_threads_;\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 154,
    "matched_results": [
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <boost/asio.hpp>\n#include <iostream>\n\nnamespace websocket = websocketpp;\nusing websocket::server;\n\nclass WebSocketServer {\nprivate:\n    server<websocket::config::asio_no_tls_client> testee_server_;\n    short port_;\n    size_t num_threads_;\n\n    void on_message(websocketpp::connection_hdl hdl, websocketpp::message_ptr msg) {\n        testee_server_.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    void on_socket_init(websocketpp::connection_hdl hdl, boost::asio::ip::tcp::socket & s) {\n        s.set_option(boost::asio::ip::tcp::no_delay(true));\n    }\n\npublic:\n    WebSocketServer(short port = 9002, size_t num_threads = 1) : port_(port), num_threads_(num_threads) {\n        testee_server_.init_asio();\n        testee_server_.set_access_channels(websocketpp::log::alevel::all);\n        testee_server_.clear_access_channels(websocketpp::log::alevel::frame_payload);\n        testee_server_.set_open_handler([](websocketpp::connection_hdl hdl) {\n            std::cout << \"Connection opened\" << std::endl;\n        });\n        testee_server_.set_close_handler([](websocketpp::connection_hdl hdl) {\n            std::cout << \"Connection closed\" << std::endl;\n        });\n        testee_server_.set_message_handler(&WebSocketServer::on_message, this);\n        testee_server_.set_socket_init_handler(&WebSocketServer::on_socket_init, this);\n    }\n\n    void run() {\n        testee_server_.set_reuse_address(true);\n        testee_server_.listen(port_);\n        testee_server_.start_accept();\n        testee_server_.run();\n    }\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <boost/asio.hpp>\n#include <iostream>\n\nnamespace websocket = websocketpp;\nusing websocket::server;\nusing websocket::connection_hdl;\nusing websocket::message_ptr;\n\nclass WebSocketServer {\nprivate:\n    server<websocket::config::asio_no_tls_client> testee_server_;\n    short port_;\n    size_t num_threads_;\n\n    void on_message(connection_hdl hdl, message_ptr msg) {\n        testee_server_.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    void on_socket_init(connection_hdl hdl, boost::asio::ip::tcp::socket & s) {\n        s.set_option(boost::asio::ip::tcp::no_delay(true));\n    }\n\npublic:\n    WebSocketServer(short port = 9002, size_t num_threads = 1) : port_(port), num_threads_(num_threads) {\n        testee_server_.init_asio();\n        testee_server_.set_access_channels(websocket::log::alevel::all);\n        testee_server_.clear_access_channels(websocket::log::alevel::frame_payload);\n        testee_server_.set_open_handler([](connection_hdl hdl) {\n            std::cout << \"Connection opened\" << std::endl;\n        });\n        testee_server_.set_close_handler([](connection_hdl hdl) {\n            std::cout << \"Connection closed\" << std::endl;\n        });\n        testee_server_.set_message_handler(&WebSocketServer::on_message, this);\n        testee_server_.set_socket_init_handler(&WebSocketServer::on_socket_init, this);\n    }\n\n    void run() {\n        testee_server_.set_reuse_address(true);\n        testee_server_.listen(port_);\n        testee_server_.start_accept();\n        testee_server_.run(num_threads_);\n    }\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <boost/asio.hpp>\n#include <iostream>\n\nnamespace websocket = websocketpp;\nusing websocket::server;\nusing websocket::connection_hdl;\nusing websocket::message_ptr;\n\nclass WebSocketServer {\nprivate:\n    server<websocket::config::asio_no_tls_client> testee_server_;\n    short port_;\n    size_t num_threads_;\n\npublic:\n    WebSocketServer(short port = 9002, size_t num_threads = 1)\n        : port_(port), num_threads_(num_threads) {\n        testee_server_.set_access_channels(websocket::log::alevel::all);\n        testee_server_.clear_access_channels(websocket::log::alevel::frame_payload);\n        testee_server_.init_asio();\n        testee_server_.set_open_handler(&WebSocketServer::on_open, this);\n        testee_server_.set_message_handler(&WebSocketServer::on_message, this);\n        testee_server_.set_close_handler(&WebSocketServer::on_close, this);\n        testee_server_.set_socket_init_handler(&WebSocketServer::on_socket_init, this);\n    }\n\n    void run() {\n        testee_server_.listen(port_);\n        testee_server_.start_accept();\n        testee_server_.run();\n    }\n\nprivate:\n    void on_message(connection_hdl hdl, message_ptr msg) {\n        if (msg->get_payload().size() > 0) {\n            testee_server_.send(hdl, msg->get_payload(), msg->get_opcode());\n        }\n    }\n\n    void on_socket_init(connection_hdl hdl, boost::asio::ip::tcp::socket & s) {\n        s.set_option(boost::asio::ip::tcp::no_delay(true));\n    }\n\n    void on_open(connection_hdl hdl) {\n        std::cout << \"Connection opened\" << std::endl;\n    }\n\n    void on_close(connection_hdl hdl) {\n        std::cout << \"Connection closed\" << std::endl;\n    }\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <boost/asio.hpp>\n#include <iostream>\n\nnamespace websocket = websocketpp;\nusing websocket::server;\n\nclass WebSocketServer {\nprivate:\n    server<websocket::config::asio_no_tls_client> testee_server_;\n    short port_;\n    size_t num_threads_;\n\n    void on_message(websocketpp::connection_hdl hdl, message_ptr msg) {\n        testee_server_.send(hdl, msg->get_payload(), u8\"text\");\n    }\n\n    void on_socket_init(websocketpp::connection_hdl hdl, boost::asio::ip::tcp::socket & s) {\n        s.set_option(boost::asio::ip::tcp::no_delay(true));\n    }\n\npublic:\n    WebSocketServer(short port = 9002, size_t num_threads = 1)\n        : port_(port), num_threads_(num_threads) {\n        testee_server_.init_asio();\n        testee_server_.set_access_channels(websocketpp::log::alevel::all);\n        testee_server_.clear_access_channels(websocketpp::log::alevel::frame_payload);\n        testee_server_.set_open_handler([](websocketpp::connection_hdl hdl) {\n            std::cout << \"Connection opened\" << std::endl;\n        });\n        testee_server_.set_close_handler([](websocketpp::connection_hdl hdl) {\n            std::cout << \"Connection closed\" << std::endl;\n        });\n        testee_server_.set_message_handler(&WebSocketServer::on_message, this);\n        testee_server_.set_socket_init_handler(&WebSocketServer::on_socket_init, this);\n    }\n\n    void run() {\n        testee_server_.set_reuse_address(true);\n        testee_server_.listen(port_);\n        testee_server_.start_accept();\n        testee_server_.run(num_threads_);\n    }\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <boost/asio.hpp>\n#include <iostream>\n\nnamespace websocket = websocketpp;\nusing websocket::server;\n\nclass WebSocketServer {\nprivate:\n    server<websocket::config::asio_no_tls_client> testee_server_;\n    short port_;\n    size_t num_threads_;\n\n    void on_message(websocketpp::connection_hdl hdl, message_ptr msg) {\n        testee_server_.send(hdl, msg->get_payload(), u8\"text\");\n    }\n\n    void on_socket_init(websocketpp::connection_hdl hdl, boost::asio::ip::tcp::socket & s) {\n        s.set_option(boost::asio::ip::tcp::no_delay(true));\n    }\n\npublic:\n    WebSocketServer(short port = 9002, size_t num_threads = 1)\n        : port_(port), num_threads_(num_threads) {\n        testee_server_.init_asio();\n        testee_server_.set_access_channels(websocketpp::log::alevel::all);\n        testee_server_.clear_access_channels(websocketpp::log::alevel::frame_payload);\n        testee_server_.set_open_handler([](websocketpp::connection_hdl hdl) {\n            std::cout << \"Connection opened\" << std::endl;\n        });\n        testee_server_.set_close_handler([](websocketpp::connection_hdl hdl) {\n            std::cout << \"Connection closed\" << std::endl;\n        });\n        testee_server_.set_message_handler(&WebSocketServer::on_message, this);\n        testee_server_.set_socket_init_handler(&WebSocketServer::on_socket_init, this);\n    }\n\n    void run() {\n        testee_server_.set_reuse_address(true);\n        testee_server_.listen(port_);\n        testee_server_.start_accept();\n        testee_server_.run();\n    }\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <boost/asio.hpp>\n#include <iostream>\n\nnamespace websocket = websocketpp;\nusing tcp = boost::asio::ip::tcp;\n\nclass WebSocketServer {\nprivate:\n    websocket::server<websocket::config::asio_no_tls_client> testee_server_;\n    short port_;\n    size_t num_threads_;\n\npublic:\n    WebSocketServer(short port = 9002, size_t num_threads = 1)\n        : port_(port), num_threads_(num_threads) {\n        testee_server_.init_asio();\n        testee_server_.set_access_channels(websocket::log::alevel::all);\n        testee_server_.clear_access_channels(websocket::log::alevel::frame_payload);\n        testee_server_.set_open_handler(&WebSocketServer::on_open, this);\n        testee_server_.set_message_handler(&WebSocketServer::on_message, this);\n        testee_server_.set_close_handler(&WebSocketServer::on_close, this);\n        testee_server_.set_socket_init_handler(&WebSocketServer::on_socket_init, this);\n    }\n\n    void run() {\n        testee_server_.set_reuse_address(true);\n        testee_server_.listen(port_);\n        testee_server_.start_accept();\n        testee_server_.run();\n    }\n\nprivate:\n    void on_open(websocketpp::connection_hdl hdl) {\n        std::cout << \"Connection opened\" << std::endl;\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, websocketpp::message_ptr msg) {\n        std::cout << \"Message received: \" << msg->get_payload() << std::endl;\n        testee_server_.send(hdl, msg->get_payload(), websocketpp::frame::opcode::text);\n    }\n\n    void on_close(websocketpp::connection_hdl hdl) {\n        std::cout << \"Connection closed\" << std::endl;\n    }\n\n    void on_socket_init(websocketpp::connection_hdl hdl, tcp::socket& s) {\n        s.set_option(tcp::no_delay(true));\n    }\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <boost/asio.hpp>\n#include <iostream>\n\nnamespace websocket = websocketpp;\nusing websocket::server;\n\nclass WebSocketServer {\nprivate:\n    server<websocket::config::asio_no_tls_client> testee_server_;\n    short port_;\n    size_t num_threads_;\n\n    void on_message(websocketpp::connection_hdl hdl, websocketpp::message_ptr msg) {\n        testee_server_.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    void on_socket_init(websocketpp::connection_hdl hdl, boost::asio::ip::tcp::socket & s) {\n        s.set_option(boost::asio::ip::tcp::no_delay(true));\n    }\n\npublic:\n    WebSocketServer(short port = 9002, size_t num_threads = 1) : port_(port), num_threads_(num_threads) {\n        testee_server_.init_asio();\n        testee_server_.set_access_channels(websocketpp::log::alevel::all);\n        testee_server_.clear_access_channels(websocketpp::log::alevel::frame_payload);\n        testee_server_.set_open_handler([](websocketpp::connection_hdl hdl) {\n            std::cout << \"Connection opened\" << std::endl;\n        });\n        testee_server_.set_close_handler([](websocketpp::connection_hdl hdl) {\n            std::cout << \"Connection closed\" << std::endl;\n        });\n        testee_server_.set_message_handler(&WebSocketServer::on_message, this);\n        testee_server_.set_socket_init_handler(&WebSocketServer::on_socket_init, this);\n    }\n\n    void run() {\n        testee_server_.set_reuse_address(true);\n        testee_server_.listen(port_);\n        testee_server_.start_accept();\n        testee_server_.run();\n    }\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <boost/asio.hpp>\n#include <iostream>\n\nnamespace websocket = websocketpp;\nusing websocket::server;\n\nclass WebSocketServer {\nprivate:\n    server<websocket::config::asio_no_tls_client> testee_server_;\n    short port_;\n    size_t num_threads_;\n\npublic:\n    WebSocketServer(short port = 9002, size_t num_threads = 1)\n        : port_(port), num_threads_(num_threads) {\n        testee_server_.set_access_channels(websocket::log::alevel::all);\n        testee_server_.clear_access_channels(websocket::log::alevel::frame_payload);\n        testee_server_.init_asio();\n        testee_server_.set_open_handler(&WebSocketServer::on_open, this);\n        testee_server_.set_message_handler(&WebSocketServer::on_message, this);\n        testee_server_.set_close_handler(&WebSocketServer::on_close, this);\n    }\n\n    void run() {\n        testee_server_.listen(port_);\n        testee_server_.start_accept();\n        testee_server_.run();\n    }\n\nprivate:\n    void on_open(websocketpp::connection_hdl hdl) {\n        std::cout << \"Connection opened\" << std::endl;\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, message_ptr msg) {\n        std::cout << \"Message received: \" << msg->get_payload() << std::endl;\n        testee_server_.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    void on_close(websocketpp::connection_hdl hdl) {\n        std::cout << \"Connection closed\" << std::endl;\n    }\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <boost/asio.hpp>\n#include <iostream>\n\nnamespace websocket = websocketpp;\nusing websocket::server;\n\nclass WebSocketServer {\nprivate:\n    server<websocket::config::asio_no_tls_client> testee_server_;\n    short port_;\n    size_t num_threads_;\n\n    void on_message(websocketpp::connection_hdl hdl, message_ptr msg) {\n        testee_server_.send(hdl, msg->get_payload(), u8\"application/json\");\n    }\n\n    void on_socket_init(websocketpp::connection_hdl hdl, boost::asio::ip::tcp::socket & s) {\n        int flags = s.get_option<boost::asio::socket_base::socket_options>().get_tcp_nodelay();\n        if (!flags) {\n            s.set_option(boost::asio::socket_base::socket_options().set_tcp_nodelay(true));\n        }\n    }\n\npublic:\n    WebSocketServer(short port = 9002, size_t num_threads = 1)\n        : port_(port), num_threads_(num_threads) {\n        testee_server_.init_asio();\n        testee_server_.set_access_channels(websocketpp::log::alevel::all);\n        testee_server_.clear_access_channels(websocketpp::log::alevel::frame_payload);\n        testee_server_.set_open_handler([](websocketpp::connection_hdl hdl) {\n            std::cout << \"Connection opened\" << std::endl;\n        });\n        testee_server_.set_close_handler([](websocketpp::connection_hdl hdl) {\n            std::cout << \"Connection closed\" << std::endl;\n        });\n        testee_server_.set_message_handler(&WebSocketServer::on_message, this);\n        testee_server_.set_socket_init_handler(&WebSocketServer::on_socket_init, this);\n    }\n\n    void run() {\n        testee_server_.set_reuse_address(true);\n        testee_server_.listen(port_);\n        testee_server_.start_accept();\n        testee_server_.run();\n    }\n};\n```"
    ],
    "unmatched_results": [
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <boost/asio.hpp>\n#include <iostream>\n\nnamespace websocket = websocketpp;\nusing websocket::server;\n\nclass WebSocketServer {\nprivate:\n    server<websocket::config::asio_no_tls_client> testee_server_;\n    short port_;\n    size_t num_threads_;\n\n    void on_message(websocketpp::connection_hdl hdl, websocketpp::message_ptr msg) {\n        testee_server_.send(msg, hdl);\n    }\n\n    void on_socket_init(websocketpp::connection_hdl hdl, boost::asio::ip::tcp::socket & s) {\n        s.set_option(boost::asio::ip::tcp::no_delay(true));\n    }\n\npublic:\n    WebSocketServer(short port = 9002, size_t num_threads = 1) : port_(port), num_threads_(num_threads) {\n        testee_server_.init_asio();\n        testee_server_.set_access_channels(websocketpp::log::alevel::all);\n        testee_server_.clear_access_channels(websocketpp::log::alevel::frame_payload);\n        testee_server_.set_open_handler([](websocketpp::connection_hdl hdl) {\n            std::cout << \"Connection opened\" << std::endl;\n        });\n        testee_server_.set_close_handler([](websocketpp::connection_hdl hdl) {\n            std::cout << \"Connection closed\" << std::endl;\n        });\n        testee_server_.set_message_handler(&WebSocketServer::on_message, this);\n        testee_server_.set_socket_init_handler(&WebSocketServer::on_socket_init, this);\n    }\n\n    void run() {\n        testee_server_.start_server(port_, num_threads_);\n        testee_server_.run();\n    }\n};\n```"
    ],
    "match_count": 9,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 43,
    "Instruction": "Task Description: Implement a WebSocket server in C++ using the WebSocket++ library to handle client connections, manage sessions, and process incoming messages.\n\nClass Description: The `print_server` class implements a WebSocket server that tracks client connections with session IDs and names, and logs connection events and messages.\n\nAttributes:\n- m_next_sessionid: int - Tracks the next available session ID to assign to new connections.\n- m_server: server - The WebSocket++ server instance configured with custom connection data.\n\nMethods:\n- print_server() - Constructor - Initializes the server with ASIO, sets up handlers for connection open, close, and message events.\n- on_open(connection_hdl hdl) -> void - Handler for new connections. Assigns a session ID to the new connection.\n- on_close(connection_hdl hdl) -> void - Handler for connection closures. Logs the connection's name and session ID.\n- on_message(connection_hdl hdl, server::message_ptr msg) -> void - Handler for incoming messages. Sets the connection name if not set, otherwise logs the message along with the connection's name and session ID.\n- run(uint16_t port) -> void - Starts the server listening on the specified port, begins accepting connections, and runs the event loop.",
    "Canonical_solution": "#include <iostream>\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\nstruct connection_data {\n    int sessionid;\n    std::string name;\n};\n\nstruct custom_config : public websocketpp::config::asio {\n    typedef websocketpp::config::asio core;\n    typedef core::concurrency_type concurrency_type;\n    typedef core::request_type request_type;\n    typedef core::response_type response_type;\n    typedef core::message_type message_type;\n    typedef core::con_msg_manager_type con_msg_manager_type;\n    typedef core::endpoint_msg_manager_type endpoint_msg_manager_type;\n    typedef core::alog_type alog_type;\n    typedef core::elog_type elog_type;\n    typedef core::rng_type rng_type;\n    typedef core::transport_type transport_type;\n    typedef core::endpoint_base endpoint_base;\n    typedef connection_data connection_base;\n};\n\ntypedef websocketpp::server<custom_config> server;\ntypedef server::connection_ptr connection_ptr;\n\nusing websocketpp::connection_hdl;\nusing websocketpp::lib::placeholders::_1;\nusing websocketpp::lib::placeholders::_2;\nusing websocketpp::lib::bind;\n\nclass print_server {\npublic:\n    print_server() : m_next_sessionid(1) {\n        m_server.init_asio();\n        m_server.set_open_handler(bind(&print_server::on_open,this,::_1));\n        m_server.set_close_handler(bind(&print_server::on_close,this,::_1));\n        m_server.set_message_handler(bind(&print_server::on_message,this,::_1,::_2));\n    }\n    \n    void on_open(connection_hdl hdl) {\n        connection_ptr con = m_server.get_con_from_hdl(hdl);\n        con->sessionid = m_next_sessionid++;\n    }\n    \n    void on_close(connection_hdl hdl) {\n        connection_ptr con = m_server.get_con_from_hdl(hdl);\n        std::cout << \"Closing connection \" << con->name \n                  << \" with sessionid \" << con->sessionid << std::endl;\n    }\n    \n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        connection_ptr con = m_server.get_con_from_hdl(hdl);\n        \n        if (con->name.empty()) {\n            con->name = msg->get_payload();\n            std::cout << \"Setting name of connection with sessionid \" \n                      << con->sessionid << \" to \" << con->name << std::endl;\n        } else {\n            std::cout << \"Got a message from connection \" << con->name \n                      << \" with sessionid \" << con->sessionid << std::endl;\n        }\n    }\n    \n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\nprivate:\n    int m_next_sessionid;\n    server m_server;\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 154,
    "matched_results": [
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <iostream>\n#include <unordered_map>\n\nclass print_server {\nprivate:\n    int m_next_sessionid;\n    websocketpp::server<websocketpp::config::asio_no_tls_client> m_server;\n    std::unordered_map<websocketpp::connection_hdl, int> m_session_ids;\n    std::unordered_map<websocketpp::connection_hdl, std::string> m_connection_names;\n\npublic:\n    print_server() : m_next_sessionid(0) {\n        m_server.init_asio();\n        m_server.set_access_channels(websocketpp::log::alevel::all);\n        m_server.clear_access_channels(websocketpp::log::alevel::frame_payload);\n        m_server.set_open_handler(&print_server::on_open, this);\n        m_server.set_close_handler(&print_server::on_close, this);\n        m_server.set_message_handler(&print_server::on_message, this);\n    }\n\n    void on_open(websocketpp::connection_hdl hdl) {\n        int session_id = ++m_next_sessionid;\n        m_session_ids[hdl] = session_id;\n        std::cout << \"Connection opened, session ID: \" << session_id << std::endl;\n    }\n\n    void on_close(websocketpp::connection_hdl hdl) {\n        int session_id = m_session_ids[hdl];\n        std::string name = m_connection_names[hdl];\n        std::cout << \"Connection closed, name: \" << name << \", session ID: \" << session_id << std::endl;\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, websocketpp::server::message_ptr msg) {\n        if (m_connection_names.find(hdl) == m_connection_names.end()) {\n            m_connection_names[hdl] = msg->get_payload();\n        }\n        int session_id = m_session_ids[hdl];\n        std::string name = m_connection_names[hdl];\n        std::cout << \"Message from \" << name << \", session ID: \" << session_id << \", message: \" << msg->get_payload() << std::endl;\n    }\n\n    void run(uint16_t port) {\n        m_server.set_reuse_addr(true);\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <iostream>\n#include <unordered_map>\n\nclass print_server {\nprivate:\n    int m_next_sessionid;\n    websocketpp::server<websocketpp::config::asio_no_tls_client> m_server;\n    std::unordered_map<websocketpp::connection_hdl, int> m_session_ids;\n    std::unordered_map<websocketpp::connection_hdl, std::string> m_connection_names;\n\npublic:\n    print_server() : m_next_sessionid(0) {\n        m_server.init_asio();\n        m_server.set_access_channels(websocketpp::log::alevel::all);\n        m_server.clear_access_channels(websocketpp::log::alevel::frame_payload);\n        m_server.set_open_handler(&print_server::on_open, this);\n        m_server.set_close_handler(&print_server::on_close, this);\n        m_server.set_message_handler(&print_server::on_message, this);\n    }\n\n    void on_open(websocketpp::connection_hdl hdl) {\n        int session_id = ++m_next_sessionid;\n        m_session_ids[hdl] = session_id;\n        std::cout << \"Connection opened, session ID: \" << session_id << std::endl;\n    }\n\n    void on_close(websocketpp::connection_hdl hdl) {\n        int session_id = m_session_ids[hdl];\n        std::string name = m_connection_names[hdl];\n        std::cout << \"Connection closed, name: \" << name << \", session ID: \" << session_id << std::endl;\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        int session_id = m_session_ids[hdl];\n        std::string name = m_connection_names[hdl];\n        if (name.empty()) {\n            name = \"Unknown\";\n        }\n        std::cout << \"Message from \" << name << \", session ID: \" << session_id << \": \" << msg->get_payload() << std::endl;\n    }\n\n    void run(uint16_t port) {\n        m_server.set_reuse_address(true);\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <iostream>\n#include <map>\n\nclass print_server {\nprivate:\n    int m_next_sessionid;\n    websocketpp::server<websocketpp::config::asio_no_tls_client> m_server;\n    std::map<websocketpp::connection_hdl, int> m_session_ids;\n    std::map<websocketpp::connection_hdl, std::string> m_connection_names;\n\npublic:\n    print_server() : m_next_sessionid(0) {\n        m_server.init_asio();\n        m_server.set_access_channels(websocketpp::log::alevel::all);\n        m_server.clear_access_channels(websocketpp::log::alevel::frame_payload);\n        m_server.set_open_handler(&print_server::on_open, this);\n        m_server.set_close_handler(&print_server::on_close, this);\n        m_server.set_message_handler(&print_server::on_message, this);\n    }\n\n    void on_open(websocketpp::connection_hdl hdl) {\n        int session_id = ++m_next_sessionid;\n        m_session_ids[hdl] = session_id;\n        std::cout << \"Connection opened, session ID: \" << session_id << std::endl;\n    }\n\n    void on_close(websocketpp::connection_hdl hdl) {\n        int session_id = m_session_ids[hdl];\n        std::string name = m_connection_names[hdl];\n        std::cout << \"Connection closed, name: \" << name << \", session ID: \" << session_id << std::endl;\n        m_session_ids.erase(hdl);\n        m_connection_names.erase(hdl);\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        int session_id = m_session_ids[hdl];\n        std::string name = m_connection_names[hdl];\n        if (name.empty()) {\n            name = \"Unknown\";\n            m_connection_names[hdl] = name;\n        }\n        std::cout << \"Message from \" << name << \", session ID: \" << session_id << \", message: \" << msg->get_payload() << std::endl;\n    }\n\n    void run(uint16_t port) {\n        m_server.set_reuse_address(true);\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <iostream>\n#include <map>\n\nclass print_server {\nprivate:\n    int m_next_sessionid;\n    websocketpp::server<websocketpp::config::asio_no_tls_client> m_server;\n    std::map<websocketpp::connection_hdl, int> m_session_ids;\n    std::map<websocketpp::connection_hdl, std::string> m_connection_names;\n\npublic:\n    print_server() : m_next_sessionid(0) {\n        m_server.init_asio();\n        m_server.set_access_channels(websocketpp::log::alevel::all);\n        m_server.clear_access_channels(websocketpp::log::alevel::frame_payload);\n        m_server.set_open_handler(&print_server::on_open, this);\n        m_server.set_close_handler(&print_server::on_close, this);\n        m_server.set_message_handler(&print_server::on_message, this);\n    }\n\n    void on_open(websocketpp::connection_hdl hdl) {\n        m_session_ids[hdl] = ++m_next_sessionid;\n        std::cout << \"Connection opened, session ID: \" << m_session_ids[hdl] << std::endl;\n    }\n\n    void on_close(websocketpp::connection_hdl hdl) {\n        int session_id = m_session_ids[hdl];\n        std::string name = m_connection_names[hdl];\n        std::cout << \"Connection closed, name: \" << name << \", session ID: \" << session_id << std::endl;\n        m_session_ids.erase(hdl);\n        m_connection_names.erase(hdl);\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        if (m_connection_names.find(hdl) == m_connection_names.end()) {\n            m_connection_names[hdl] = msg->get_payload();\n            std::cout << \"New connection name set: \" << m_connection_names[hdl] << std::endl;\n        } else {\n            int session_id = m_session_ids[hdl];\n            std::string name = m_connection_names[hdl];\n            std::cout << \"Received message from \" << name << \", session ID: \" << session_id << \": \" << msg->get_payload() << std::endl;\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n};\n```"
    ],
    "unmatched_results": [
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <iostream>\n#include <map>\n\nclass print_server {\nprivate:\n    int m_next_sessionid;\n    websocketpp::server<websocketpp::config::asio_no_tls_client> m_server;\n    std::map<websocketpp::connection_hdl, int> m_session_ids;\n    std::map<websocketpp::connection_hdl, std::string> m_connection_names;\n\npublic:\n    print_server() : m_next_sessionid(0) {\n        m_server.set_access_channels(websocketpp::log::alevel::all);\n        m_server.clear_access_channels(websocketpp::log::alevel::frame_payload);\n        m_server.set_open_handler(&print_server::on_open, this);\n        m_server.set_close_handler(&print_server::on_close, this);\n        m_server.set_message_handler(&print_server::on_message, this);\n    }\n\n    void on_open(websocketpp::connection_hdl hdl) {\n        int session_id = ++m_next_sessionid;\n        m_session_ids[hdl] = session_id;\n        std::cout << \"Connection opened, session ID: \" << session_id << std::endl;\n    }\n\n    void on_close(websocketpp::connection_hdl hdl) {\n        int session_id = m_session_ids[hdl];\n        std::string name = m_connection_names[hdl];\n        std::cout << \"Connection closed, name: \" << name << \", session ID: \" << session_id << std::endl;\n        m_session_ids.erase(hdl);\n        m_connection_names.erase(hdl);\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        int session_id = m_session_ids[hdl];\n        std::string name = m_connection_names[hdl];\n        if (name.empty()) {\n            name = \"Unknown\";\n        }\n        std::cout << \"Message from \" << name << \", session ID: \" << session_id << \": \" << msg->get_payload() << std::endl;\n    }\n\n    void run(uint16_t port) {\n        m_server.init_asio();\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <iostream>\n#include <map>\n#include <string>\n\nclass print_server {\nprivate:\n    int m_next_sessionid;\n    websocketpp::server<websocketpp::config::asio_no_tls_client> m_server;\n    std::map<websocketpp::connection_hdl, std::pair<int, std::string>> m_connections;\n\npublic:\n    print_server() : m_next_sessionid(0) {\n        m_server.set_access_channels(websocketpp::log::alevel::all);\n        m_server.clear_access_channels(websocketpp::log::alevel::frame_payload);\n        m_server.set_open_handler(&print_server::on_open, this);\n        m_server.set_close_handler(&print_server::on_close, this);\n        m_server.set_message_handler(&print_server::on_message, this);\n    }\n\n    void on_open(websocketpp::connection_hdl hdl) {\n        int session_id = ++m_next_sessionid;\n        m_connections[hdl] = {session_id, \"\"};\n        std::cout << \"Connection opened, session ID: \" << session_id << std::endl;\n    }\n\n    void on_close(websocketpp::connection_hdl hdl) {\n        auto it = m_connections.find(hdl);\n        if (it != m_connections.end()) {\n            std::cout << \"Connection closed, name: \" << it->second.second << \", session ID: \" << it->second.first << std::endl;\n            m_connections.erase(it);\n        }\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        auto it = m_connections.find(hdl);\n        if (it != m_connections.end()) {\n            if (it->second.second.empty()) {\n                it->second.second = msg->get_payload();\n            } else {\n                std::cout << \"Message received, name: \" << it->second.second << \", session ID: \" << it->second.first << \", message: \" << msg->get_payload() << std::endl;\n            }\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.init_asio();\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <iostream>\n#include <unordered_map>\n\nclass print_server {\nprivate:\n    int m_next_sessionid;\n    websocketpp::server<websocketpp::config::asio_no_tls_client> m_server;\n    std::unordered_map<websocketpp::connection_hdl, int> m_session_ids;\n    std::unordered_map<websocketpp::connection_hdl, std::string> m_connection_names;\n\npublic:\n    print_server() : m_next_sessionid(0) {\n        m_server.set_access_channels(websocketpp::log::alevel::all);\n        m_server.clear_access_channels(websocketpp::log::alevel::frame_payload);\n        m_server.set_open_handler(&print_server::on_open, this);\n        m_server.set_close_handler(&print_server::on_close, this);\n        m_server.set_message_handler(&print_server::on_message, this);\n    }\n\n    void on_open(websocketpp::connection_hdl hdl) {\n        m_session_ids[hdl] = ++m_next_sessionid;\n        std::cout << \"New connection with session ID \" << m_session_ids[hdl] << std::endl;\n    }\n\n    void on_close(websocketpp::connection_hdl hdl) {\n        int session_id = m_session_ids[hdl];\n        std::string name = m_connection_names[hdl];\n        std::cout << \"Connection closed: \" << name << \" (Session ID \" << session_id << \")\" << std::endl;\n        m_session_ids.erase(hdl);\n        m_connection_names.erase(hdl);\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        if (m_connection_names.find(hdl) == m_connection_names.end()) {\n            m_connection_names[hdl] = \"Unknown\";\n        }\n        int session_id = m_session_ids[hdl];\n        std::string name = m_connection_names[hdl];\n        std::cout << \"Message from \" << name << \" (Session ID \" << session_id << \"): \" << msg->get_payload() << std::endl;\n    }\n\n    void run(uint16_t port) {\n        m_server.init_asio();\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <iostream>\n#include <map>\n\nclass print_server {\nprivate:\n    int m_next_sessionid;\n    websocketpp::server<websocketpp::config::asio_no_tls_client> m_server;\n    std::map<websocketpp::connection_hdl, int> m_session_ids;\n    std::map<websocketpp::connection_hdl, std::string> m_connection_names;\n\npublic:\n    print_server() : m_next_sessionid(0) {\n        m_server.set_access_channels(websocketpp::log::alevel::all);\n        m_server.clear_access_channels(websocketpp::log::alevel::frame_payload);\n        m_server.set_open_handler(&print_server::on_open, this);\n        m_server.set_close_handler(&print_server::on_close, this);\n        m_server.set_message_handler(&print_server::on_message, this);\n    }\n\n    void on_open(websocketpp::connection_hdl hdl) {\n        int session_id = ++m_next_sessionid;\n        m_session_ids[hdl] = session_id;\n        std::cout << \"New connection with session ID: \" << session_id << std::endl;\n    }\n\n    void on_close(websocketpp::connection_hdl hdl) {\n        int session_id = m_session_ids[hdl];\n        std::string name = m_connection_names[hdl];\n        std::cout << \"Connection closed: Name: \" << name << \", Session ID: \" << session_id << std::endl;\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        int session_id = m_session_ids[hdl];\n        std::string name = m_connection_names[hdl];\n        if (name.empty()) {\n            name = \"Unknown\";\n        }\n        std::cout << \"Message from \" << name << \" (Session ID: \" << session_id << \"): \" << msg->get_payload() << std::endl;\n    }\n\n    void run(uint16_t port) {\n        m_server.init_asio();\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <iostream>\n#include <unordered_map>\n\nclass print_server {\nprivate:\n    int m_next_sessionid;\n    websocketpp::server<websocketpp::config::asio_no_tls_client> m_server;\n    std::unordered_map<websocketpp::connection_hdl, int> m_session_ids;\n    std::unordered_map<websocketpp::connection_hdl, std::string> m_connection_names;\n\npublic:\n    print_server() : m_next_sessionid(0) {\n        m_server.set_access_channels(websocketpp::log::alevel::all);\n        m_server.clear_access_channels(websocketpp::log::alevel::frame_payload);\n        m_server.set_open_handler(&print_server::on_open, this);\n        m_server.set_close_handler(&print_server::on_close, this);\n        m_server.set_message_handler(&print_server::on_message, this);\n    }\n\n    void on_open(websocketpp::connection_hdl hdl) {\n        int session_id = ++m_next_sessionid;\n        m_session_ids[hdl] = session_id;\n        std::cout << \"Connection opened, session ID: \" << session_id << std::endl;\n    }\n\n    void on_close(websocketpp::connection_hdl hdl) {\n        int session_id = m_session_ids[hdl];\n        std::string name = m_connection_names[hdl];\n        std::cout << \"Connection closed, name: \" << name << \", session ID: \" << session_id << std::endl;\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        int session_id = m_session_ids[hdl];\n        std::string name = m_connection_names[hdl];\n        if (name.empty()) {\n            name = \"Unknown\";\n        }\n        std::cout << \"Message from \" << name << \", session ID: \" << session_id << \": \" << msg->get_payload() << std::endl;\n    }\n\n    void run(uint16_t port) {\n        m_server.init_asio();\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <iostream>\n#include <string>\n#include <unordered_map>\n\nclass print_server {\nprivate:\n    int m_next_sessionid;\n    websocketpp::server<websocketpp::config::asio_no_tls_client> m_server;\n    std::unordered_map<websocketpp::connection_hdl, std::string> m_connections;\n\npublic:\n    print_server() : m_next_sessionid(0) {\n        m_server.init_asio();\n        m_server.set_access_channels(websocketpp::log::alevel::all);\n        m_server.clear_access_channels(websocketpp::log::alevel::frame_payload);\n        m_server.set_open_handler(&print_server::on_open, this);\n        m_server.set_close_handler(&print_server::on_close, this);\n        m_server.set_message_handler(&print_server::on_message, this);\n    }\n\n    void on_open(websocketpp::connection_hdl hdl) {\n        int session_id = ++m_next_sessionid;\n        m_connections[hdl] = \"Unknown\";\n        std::cout << \"Connection opened with session ID: \" << session_id << std::endl;\n    }\n\n    void on_close(websocketpp::connection_hdl hdl) {\n        auto it = m_connections.find(hdl);\n        if (it != m_connections.end()) {\n            std::cout << \"Connection closed for session ID: \" << it->second << std::endl;\n            m_connections.erase(it);\n        }\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        auto it = m_connections.find(hdl);\n        if (it != m_connections.end()) {\n            if (it->second == \"Unknown\") {\n                it->second = msg->get_payload();\n            }\n            std::cout << \"Message from \" << it->second << \" with session ID: \" << it->second << \" - \" << msg->get_payload() << std::endl;\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.set_port(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n};\n```"
    ],
    "match_count": 4,
    "pass@3": 0.8333333333333334,
    "pass@5": 0.9761904761904762
  },
  {
    "Task_id": 44,
    "Instruction": "Task Description: Implement a WebSocket server in C++ using the WebSocket++ library to handle client connections, manage session data, and process incoming messages.\n\nClass Description: The `print_server` class encapsulates a WebSocket server that tracks client connections with session IDs and names, and logs connection events and messages.\n\nAttributes:\n- m_next_sessionid: [int] - Tracks the next available session ID to assign to new connections.\n- m_server: [websocketpp::server<websocketpp::config::asio>] - The WebSocket++ server instance.\n- m_connections: [std::map<connection_hdl,connection_data,std::owner_less<connection_hdl>>] - Maps connection handles to their associated session data.\n\nMethods:\n- print_server(): [Constructor]() -> [void] - Initializes the server and sets up handlers for connection events.\n- on_open: [void]([connection_hdl hdl]) -> [void] - Handles new WebSocket connections by assigning a session ID and storing connection data.\n- on_close: [void]([connection_hdl hdl]) -> [void] - Handles connection closures by logging the event and removing the connection from tracking.\n- on_message: [void]([connection_hdl hdl, server::message_ptr msg]) -> [void] - Processes incoming messages, either setting the client's name or logging received messages.\n- get_data_from_hdl: [connection_data&]([connection_hdl hdl]) -> [connection_data&] - Retrieves connection data for a given handle, throwing an exception if not found.\n- run: [void]([uint16_t port]) -> [void] - Starts the server listening on the specified port and begins accepting connections.",
    "Canonical_solution": "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <map>\n#include <exception>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\nusing websocketpp::connection_hdl;\nusing websocketpp::lib::placeholders::_1;\nusing websocketpp::lib::placeholders::_2;\nusing websocketpp::lib::bind;\n\nstruct connection_data {\n    int sessionid;\n    std::string name;\n};\n\nclass print_server {\npublic:\n    print_server() : m_next_sessionid(1) {\n        m_server.init_asio();\n\n        m_server.set_open_handler(bind(&print_server::on_open,this,::_1));\n        m_server.set_close_handler(bind(&print_server::on_close,this,::_1));\n        m_server.set_message_handler(bind(&print_server::on_message,this,::_1,::_2));\n    }\n\n    void on_open(connection_hdl hdl) {\n        connection_data data;\n\n        data.sessionid = m_next_sessionid++;\n        data.name.clear();\n\n        m_connections[hdl] = data;\n    }\n\n    void on_close(connection_hdl hdl) {\n        connection_data& data = get_data_from_hdl(hdl);\n\n        std::cout << \"Closing connection \" << data.name\n                  << \" with sessionid \" << data.sessionid << std::endl;\n\n        m_connections.erase(hdl);\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        connection_data& data = get_data_from_hdl(hdl);\n\n        if (data.name.empty()) {\n            data.name = msg->get_payload();\n            std::cout << \"Setting name of connection with sessionid \"\n                      << data.sessionid << \" to \" << data.name << std::endl;\n        } else {\n            std::cout << \"Got a message from connection \" << data.name\n                      << \" with sessionid \" << data.sessionid << std::endl;\n        }\n    }\n\n    connection_data& get_data_from_hdl(connection_hdl hdl) {\n        auto it = m_connections.find(hdl);\n\n        if (it == m_connections.end()) {\n            throw std::invalid_argument(\"No data available for session\");\n        }\n\n        return it->second;\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    typedef std::map<connection_hdl,connection_data,std::owner_less<connection_hdl>> con_list;\n\n    int m_next_sessionid;\n    server m_server;\n    con_list m_connections;\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 154,
    "matched_results": [],
    "unmatched_results": [
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <map>\n#include <iostream>\n\nclass connection_data {\npublic:\n    int session_id;\n    std::string name;\n};\n\nclass print_server {\nprivate:\n    int m_next_sessionid;\n    websocketpp::server<websocketpp::config::asio> m_server;\n    std::map<websocketpp::connection_hdl, connection_data, std::owner_less<websocketpp::connection_hdl>> m_connections;\n\npublic:\n    print_server() {\n        m_next_sessionid = 0;\n        m_server.set_access_channels(websocketpp::log::alevel::all);\n        m_server.clear_access_channels(websocketpp::log::alevel::frame_payload);\n        m_server.set_open_handler(&print_server::on_open, *this);\n        m_server.set_close_handler(&print_server::on_close, *this);\n        m_server.set_message_handler(&print_server::on_message, *this);\n    }\n\n    void on_open(websocketpp::connection_hdl hdl) {\n        connection_data data;\n        data.session_id = m_next_sessionid++;\n        m_connections[hdl] = data;\n        std::cout << \"New connection with session ID: \" << data.session_id << std::endl;\n    }\n\n    void on_close(websocketpp::connection_hdl hdl) {\n        auto it = m_connections.find(hdl);\n        if (it != m_connections.end()) {\n            std::cout << \"Connection closed for session ID: \" << it->second.session_id << std::endl;\n            m_connections.erase(it);\n        }\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        auto it = m_connections.find(hdl);\n        if (it != m_connections.end()) {\n            if (msg->get_payload() == \"set_name\") {\n                it->second.name = \"Client \" + std::to_string(it->second.session_id);\n                std::cout << \"Client name set to: \" << it->second.name << std::endl;\n            } else {\n                std::cout << \"Received message from session ID \" << it->second.session_id << \": \" << msg->get_payload() << std::endl;\n            }\n        }\n    }\n\n    connection_data& get_data_from_hdl(websocketpp::connection_hdl hdl) {\n        auto it = m_connections.find(hdl);\n        if (it == m_connections.end()) {\n            throw std::runtime_error(\"Connection handle not found\");\n        }\n        return it->second;\n    }\n\n    void run(uint16_t port) {\n        m_server.init_asio();\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <map>\n#include <iostream>\n\nclass connection_data {\npublic:\n    int session_id;\n    std::string name;\n};\n\nclass print_server {\nprivate:\n    int m_next_sessionid;\n    websocketpp::server<websocketpp::config::asio> m_server;\n    std::map<websocketpp::connection_hdl, connection_data, std::owner_less<websocketpp::connection_hdl>> m_connections;\n\npublic:\n    print_server() {\n        m_next_sessionid = 0;\n        m_server.set_access_channels(websocketpp::log::alevel::all);\n        m_server.clear_access_channels(websocketpp::log::alevel::frame_payload);\n        m_server.set_open_handler(&print_server::on_open, *this);\n        m_server.set_close_handler(&print_server::on_close, *this);\n        m_server.set_message_handler(&print_server::on_message, *this);\n    }\n\n    void on_open(websocketpp::connection_hdl hdl) {\n        connection_data data;\n        data.session_id = m_next_sessionid++;\n        m_connections[hdl] = data;\n        std::cout << \"New connection with session ID: \" << data.session_id << std::endl;\n    }\n\n    void on_close(websocketpp::connection_hdl hdl) {\n        auto it = m_connections.find(hdl);\n        if (it != m_connections.end()) {\n            std::cout << \"Connection closed for session ID: \" << it->second.session_id << std::endl;\n            m_connections.erase(it);\n        }\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        auto it = m_connections.find(hdl);\n        if (it != m_connections.end()) {\n            if (msg->get_payload().find(\"name:\") == 0) {\n                it->second.name = msg->get_payload().substr(5);\n                std::cout << \"Client name set to: \" << it->second.name << std::endl;\n            } else {\n                std::cout << \"Received message: \" << msg->get_payload() << \" from session ID: \" << it->second.session_id << std::endl;\n            }\n        }\n    }\n\n    connection_data& get_data_from_hdl(websocketpp::connection_hdl hdl) {\n        auto it = m_connections.find(hdl);\n        if (it == m_connections.end()) {\n            throw std::runtime_error(\"Connection handle not found\");\n        }\n        return it->second;\n    }\n\n    void run(uint16_t port) {\n        m_server.init_asio();\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <map>\n#include <iostream>\n\nclass connection_data {\npublic:\n    int session_id;\n    std::string name;\n};\n\nclass print_server {\nprivate:\n    int m_next_sessionid;\n    websocketpp::server<websocketpp::config::asio> m_server;\n    std::map<websocketpp::connection_hdl, connection_data, std::owner_less<websocketpp::connection_hdl>> m_connections;\n\npublic:\n    print_server() {\n        m_next_sessionid = 0;\n        m_server.set_access_channels(websocketpp::log::alevel::all);\n        m_server.clear_access_channels(websocketpp::log::alevel::frame_payload);\n        m_server.set_open_handler(&print_server::on_open, *this);\n        m_server.set_close_handler(&print_server::on_close, *this);\n        m_server.set_message_handler(&print_server::on_message, *this);\n    }\n\n    void on_open(websocketpp::connection_hdl hdl) {\n        connection_data data;\n        data.session_id = m_next_sessionid++;\n        m_connections[hdl] = data;\n        std::cout << \"New connection with session ID: \" << data.session_id << std::endl;\n    }\n\n    void on_close(websocketpp::connection_hdl hdl) {\n        auto it = m_connections.find(hdl);\n        if (it != m_connections.end()) {\n            std::cout << \"Connection closed for session ID: \" << it->second.session_id << std::endl;\n            m_connections.erase(it);\n        }\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        auto it = m_connections.find(hdl);\n        if (it != m_connections.end()) {\n            if (msg->get_payload() == \"set_name\") {\n                it->second.name = \"Client \" + std::to_string(it->second.session_id);\n                std::cout << \"Client name set to: \" << it->second.name << std::endl;\n            } else {\n                std::cout << \"Received message from session ID: \" << it->second.session_id << \" - \" << msg->get_payload() << std::endl;\n            }\n        }\n    }\n\n    connection_data& get_data_from_hdl(websocketpp::connection_hdl hdl) {\n        auto it = m_connections.find(hdl);\n        if (it == m_connections.end()) {\n            throw std::runtime_error(\"Connection handle not found\");\n        }\n        return it->second;\n    }\n\n    void run(uint16_t port) {\n        m_server.init_asio();\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <map>\n#include <iostream>\n\nclass connection_data {\npublic:\n    int session_id;\n    std::string name;\n};\n\nclass print_server {\nprivate:\n    int m_next_sessionid;\n    websocketpp::server<websocketpp::config::asio> m_server;\n    std::map<websocketpp::connection_hdl, connection_data, std::owner_less<websocketpp::connection_hdl>> m_connections;\n\npublic:\n    print_server() {\n        m_next_sessionid = 0;\n        m_server.set_access_channels(websocketpp::log::alevel::all);\n        m_server.clear_access_channels(websocketpp::log::alevel::frame_payload);\n        m_server.set_open_handler(&print_server::on_open, *this);\n        m_server.set_close_handler(&print_server::on_close, *this);\n        m_server.set_message_handler(&print_server::on_message, *this);\n    }\n\n    void on_open(websocketpp::connection_hdl hdl) {\n        connection_data data;\n        data.session_id = m_next_sessionid++;\n        m_connections[hdl] = data;\n        std::cout << \"New connection with session ID: \" << data.session_id << std::endl;\n    }\n\n    void on_close(websocketpp::connection_hdl hdl) {\n        auto it = m_connections.find(hdl);\n        if (it != m_connections.end()) {\n            std::cout << \"Connection closed for session ID: \" << it->second.session_id << std::endl;\n            m_connections.erase(it);\n        }\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        auto it = m_connections.find(hdl);\n        if (it != m_connections.end()) {\n            if (msg->get_payload() == \"set_name\") {\n                it->second.name = \"Client \" + std::to_string(it->second.session_id);\n                std::cout << \"Client name set to: \" << it->second.name << std::endl;\n            } else {\n                std::cout << \"Received message from session ID: \" << it->second.session_id << \" - \" << msg->get_payload() << std::endl;\n            }\n        }\n    }\n\n    connection_data& get_data_from_hdl(websocketpp::connection_hdl hdl) {\n        auto it = m_connections.find(hdl);\n        if (it == m_connections.end()) {\n            throw std::runtime_error(\"Connection handle not found\");\n        }\n        return it->second;\n    }\n\n    void run(uint16_t port) {\n        m_server.init_asio();\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <map>\n#include <iostream>\n\nclass connection_data {\npublic:\n    int session_id;\n    std::string name;\n};\n\nclass print_server {\nprivate:\n    int m_next_sessionid;\n    websocketpp::server<websocketpp::config::asio> m_server;\n    std::map<websocketpp::connection_hdl, connection_data, std::owner_less<websocketpp::connection_hdl>> m_connections;\n\npublic:\n    print_server() {\n        m_next_sessionid = 0;\n        m_server.set_access_channels(websocketpp::log::alevel::all);\n        m_server.clear_access_channels(websocketpp::log::alevel::frame_payload);\n        m_server.set_open_handler(&print_server::on_open, *this);\n        m_server.set_close_handler(&print_server::on_close, *this);\n        m_server.set_message_handler(&print_server::on_message, *this);\n    }\n\n    void on_open(websocketpp::connection_hdl hdl) {\n        connection_data data;\n        data.session_id = m_next_sessionid++;\n        m_connections[hdl] = data;\n        std::cout << \"Connection opened with session ID: \" << data.session_id << std::endl;\n    }\n\n    void on_close(websocketpp::connection_hdl hdl) {\n        auto it = m_connections.find(hdl);\n        if (it != m_connections.end()) {\n            std::cout << \"Connection closed with session ID: \" << it->second.session_id << std::endl;\n            m_connections.erase(it);\n        }\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        if (msg->get_payload() == \"set_name\") {\n            auto it = m_connections.find(hdl);\n            if (it != m_connections.end()) {\n                std::cout << \"Setting name for session ID: \" << it->second.session_id << std::endl;\n                it->second.name = \"Client\";\n            }\n        } else {\n            auto it = m_connections.find(hdl);\n            if (it != m_connections.end()) {\n                std::cout << \"Received message from session ID: \" << it->second.session_id << \" - \" << msg->get_payload() << std::endl;\n            }\n        }\n    }\n\n    connection_data& get_data_from_hdl(websocketpp::connection_hdl hdl) {\n        auto it = m_connections.find(hdl);\n        if (it == m_connections.end()) {\n            throw std::runtime_error(\"Connection handle not found\");\n        }\n        return it->second;\n    }\n\n    void run(uint16_t port) {\n        m_server.init_asio();\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <map>\n#include <iostream>\n\nclass connection_data {\npublic:\n    int session_id;\n    std::string name;\n};\n\nclass print_server {\nprivate:\n    int m_next_sessionid;\n    websocketpp::server<websocketpp::config::asio> m_server;\n    std::map<websocketpp::connection_hdl, connection_data, std::owner_less<websocketpp::connection_hdl>> m_connections;\n\npublic:\n    print_server() {\n        m_next_sessionid = 0;\n        m_server.set_access_channels(websocketpp::log::alevel::all);\n        m_server.clear_access_channels(websocketpp::log::alevel::frame_payload);\n        m_server.set_open_handler(&print_server::on_open, *this);\n        m_server.set_close_handler(&print_server::on_close, *this);\n        m_server.set_message_handler(&print_server::on_message, *this);\n    }\n\n    void on_open(websocketpp::connection_hdl hdl) {\n        connection_data data;\n        data.session_id = m_next_sessionid++;\n        m_connections[hdl] = data;\n        std::cout << \"Connection opened, session ID: \" << data.session_id << std::endl;\n    }\n\n    void on_close(websocketpp::connection_hdl hdl) {\n        auto it = m_connections.find(hdl);\n        if (it != m_connections.end()) {\n            std::cout << \"Connection closed, session ID: \" << it->second.session_id << std::endl;\n            m_connections.erase(it);\n        }\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        auto it = m_connections.find(hdl);\n        if (it != m_connections.end()) {\n            if (msg->get_payload().front() == 'n') {\n                it->second.name = msg->get_payload().substr(2);\n                std::cout << \"Client name set to: \" << it->second.name << std::endl;\n            } else {\n                std::cout << \"Received message: \" << msg->get_payload() << std::endl;\n            }\n        }\n    }\n\n    connection_data& get_data_from_hdl(websocketpp::connection_hdl hdl) {\n        auto it = m_connections.find(hdl);\n        if (it == m_connections.end()) {\n            throw std::runtime_error(\"Connection handle not found\");\n        }\n        return it->second;\n    }\n\n    void run(uint16_t port) {\n        m_server.init_asio();\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <map>\n#include <iostream>\n\nclass connection_data {\npublic:\n    int session_id;\n    std::string name;\n};\n\nclass print_server {\nprivate:\n    int m_next_sessionid;\n    websocketpp::server<websocketpp::config::asio> m_server;\n    std::map<websocketpp::connection_hdl, connection_data, std::owner_less<websocketpp::connection_hdl>> m_connections;\n\npublic:\n    print_server() {\n        m_next_sessionid = 0;\n        m_server.set_access_channels(websocketpp::log::alevel::all);\n        m_server.clear_access_channels(websocketpp::log::alevel::frame_payload);\n        m_server.set_open_handler(&print_server::on_open, *this);\n        m_server.set_close_handler(&print_server::on_close, *this);\n        m_server.set_message_handler(&print_server::on_message, *this);\n    }\n\n    void on_open(websocketpp::connection_hdl hdl) {\n        connection_data data;\n        data.session_id = m_next_sessionid++;\n        m_connections[hdl] = data;\n        std::cout << \"New connection with session ID: \" << data.session_id << std::endl;\n    }\n\n    void on_close(websocketpp::connection_hdl hdl) {\n        auto it = m_connections.find(hdl);\n        if (it != m_connections.end()) {\n            std::cout << \"Connection closed for session ID: \" << it->second.session_id << std::endl;\n            m_connections.erase(it);\n        }\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        if (msg->get_payload() == \"set_name\") {\n            auto it = m_connections.find(hdl);\n            if (it != m_connections.end()) {\n                std::cout << \"Setting name for session ID: \" << it->second.session_id << std::endl;\n                it->second.name = \"Client\";\n            }\n        } else {\n            auto it = m_connections.find(hdl);\n            if (it != m_connections.end()) {\n                std::cout << \"Received message from session ID: \" << it->second.session_id << \" - \" << msg->get_payload() << std::endl;\n            }\n        }\n    }\n\n    connection_data& get_data_from_hdl(websocketpp::connection_hdl hdl) {\n        auto it = m_connections.find(hdl);\n        if (it == m_connections.end()) {\n            throw std::runtime_error(\"Connection handle not found\");\n        }\n        return it->second;\n    }\n\n    void run(uint16_t port) {\n        m_server.init_asio();\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <map>\n#include <iostream>\n\nclass connection_data {\npublic:\n    int session_id;\n    std::string name;\n};\n\nclass print_server {\nprivate:\n    int m_next_sessionid;\n    websocketpp::server<websocketpp::config::asio> m_server;\n    std::map<websocketpp::connection_hdl, connection_data, std::owner_less<websocketpp::connection_hdl>> m_connections;\n\npublic:\n    print_server() {\n        m_next_sessionid = 0;\n        m_server.set_access_channels(websocketpp::log::alevel::all);\n        m_server.clear_access_channels(websocketpp::log::alevel::frame_payload);\n        m_server.set_open_handler(&print_server::on_open, *this);\n        m_server.set_close_handler(&print_server::on_close, *this);\n        m_server.set_message_handler(&print_server::on_message, *this);\n    }\n\n    void on_open(websocketpp::connection_hdl hdl) {\n        connection_data data;\n        data.session_id = m_next_sessionid++;\n        m_connections[hdl] = data;\n        std::cout << \"New connection with session ID: \" << data.session_id << std::endl;\n    }\n\n    void on_close(websocketpp::connection_hdl hdl) {\n        auto it = m_connections.find(hdl);\n        if (it != m_connections.end()) {\n            std::cout << \"Connection closed for session ID: \" << it->second.session_id << std::endl;\n            m_connections.erase(it);\n        }\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        auto it = m_connections.find(hdl);\n        if (it != m_connections.end()) {\n            if (msg->get_payload().find(\"name:\") == 0) {\n                it->second.name = msg->get_payload().substr(5);\n                std::cout << \"Client name set to: \" << it->second.name << std::endl;\n            } else {\n                std::cout << \"Received message from session ID: \" << it->second.session_id << \" - \" << msg->get_payload() << std::endl;\n            }\n        }\n    }\n\n    connection_data& get_data_from_hdl(websocketpp::connection_hdl hdl) {\n        auto it = m_connections.find(hdl);\n        if (it == m_connections.end()) {\n            throw std::runtime_error(\"Connection handle not found\");\n        }\n        return it->second;\n    }\n\n    void run(uint16_t port) {\n        m_server.init_asio();\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <map>\n#include <iostream>\n\nclass connection_data {\npublic:\n    int session_id;\n    std::string name;\n};\n\nclass print_server {\nprivate:\n    int m_next_sessionid;\n    websocketpp::server<websocketpp::config::asio> m_server;\n    std::map<websocketpp::connection_hdl, connection_data, std::owner_less<websocketpp::connection_hdl>> m_connections;\n\npublic:\n    print_server() {\n        m_next_sessionid = 0;\n        m_server.set_access_channels(websocketpp::log::alevel::all);\n        m_server.clear_access_channels(websocketpp::log::alevel::frame_payload);\n        m_server.set_open_handler(&print_server::on_open, this);\n        m_server.set_close_handler(&print_server::on_close, this);\n        m_server.set_message_handler(&print_server::on_message, this);\n    }\n\n    void on_open(websocketpp::connection_hdl hdl) {\n        connection_data data;\n        data.session_id = m_next_sessionid++;\n        m_connections[hdl] = data;\n        std::cout << \"New connection with session ID: \" << data.session_id << std::endl;\n    }\n\n    void on_close(websocketpp::connection_hdl hdl) {\n        auto it = m_connections.find(hdl);\n        if (it != m_connections.end()) {\n            std::cout << \"Connection closed for session ID: \" << it->second.session_id << std::endl;\n            m_connections.erase(it);\n        }\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        auto it = m_connections.find(hdl);\n        if (it != m_connections.end()) {\n            if (msg->get_payload().find(\"name:\") == 0) {\n                it->second.name = msg->get_payload().substr(5);\n                std::cout << \"Client name set to: \" << it->second.name << std::endl;\n            } else {\n                std::cout << \"Received message: \" << msg->get_payload() << std::endl;\n            }\n        }\n    }\n\n    connection_data& get_data_from_hdl(websocketpp::connection_hdl hdl) {\n        auto it = m_connections.find(hdl);\n        if (it == m_connections.end()) {\n            throw std::runtime_error(\"Connection handle not found\");\n        }\n        return it->second;\n    }\n\n    void run(uint16_t port) {\n        m_server.init_asio();\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <map>\n#include <iostream>\n\nclass connection_data {\npublic:\n    int session_id;\n    std::string name;\n};\n\nclass print_server {\nprivate:\n    int m_next_sessionid;\n    websocketpp::server<websocketpp::config::asio> m_server;\n    std::map<websocketpp::connection_hdl, connection_data, std::owner_less<websocketpp::connection_hdl>> m_connections;\n\npublic:\n    print_server() {\n        m_next_sessionid = 0;\n        m_server.set_access_channels(websocketpp::log::alevel::all);\n        m_server.clear_access_channels(websocketpp::log::alevel::frame_payload);\n        m_server.set_open_handler(&print_server::on_open, *this);\n        m_server.set_close_handler(&print_server::on_close, *this);\n        m_server.set_message_handler(&print_server::on_message, *this);\n    }\n\n    void on_open(websocketpp::connection_hdl hdl) {\n        connection_data data;\n        data.session_id = m_next_sessionid++;\n        m_connections[hdl] = data;\n        std::cout << \"New connection with session ID: \" << data.session_id << std::endl;\n    }\n\n    void on_close(websocketpp::connection_hdl hdl) {\n        auto it = m_connections.find(hdl);\n        if (it != m_connections.end()) {\n            std::cout << \"Connection closed for session ID: \" << it->second.session_id << std::endl;\n            m_connections.erase(it);\n        }\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        auto it = m_connections.find(hdl);\n        if (it != m_connections.end()) {\n            if (msg->get_payload().find(\"name:\") == 0) {\n                it->second.name = msg->get_payload().substr(5);\n                std::cout << \"Client name set to: \" << it->second.name << std::endl;\n            } else {\n                std::cout << \"Received message: \" << msg->get_payload() << \" from session ID: \" << it->second.session_id << std::endl;\n            }\n        }\n    }\n\n    connection_data& get_data_from_hdl(websocketpp::connection_hdl hdl) {\n        auto it = m_connections.find(hdl);\n        if (it == m_connections.end()) {\n            throw std::runtime_error(\"Connection handle not found\");\n        }\n        return it->second;\n    }\n\n    void run(uint16_t port) {\n        m_server.init_asio();\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n};\n```"
    ],
    "match_count": 0,
    "pass@3": 0.0,
    "pass@5": 0.0
  },
  {
    "Task_id": 45,
    "Instruction": "Task Description: Implement a WebSocket server in C++ using the WebSocket++ library that can handle multiple client connections and broadcast messages to all connected clients.\n\nClass Description: The `broadcast_server` class implements a WebSocket server that maintains a set of active connections and broadcasts incoming messages to all connected clients.\n\nAttributes:\n- m_server: [server] - The WebSocket++ server instance that handles network communication.\n- m_connections: [con_list] - A set of active connection handles to keep track of connected clients.\n\nMethods:\n- broadcast_server(): [Constructor]() -> [void] - Initializes the WebSocket++ server and sets up handlers for connection events (open, close, message).\n- on_open: [void]([connection_hdl hdl]) -> [void] - Handler for new client connections; adds the connection handle to the active connections set.\n- on_close: [void]([connection_hdl hdl]) -> [void] - Handler for client disconnections; removes the connection handle from the active connections set.\n- on_message: [void]([connection_hdl hdl, server::message_ptr msg]) -> [void] - Handler for incoming messages; broadcasts the received message to all connected clients.\n- run: [void]([uint16_t port]) -> [void] - Starts the server, begins listening on the specified port, and enters the event loop to handle connections and messages.",
    "Canonical_solution": "#include <set>\n#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\nusing websocketpp::connection_hdl;\nusing websocketpp::lib::placeholders::_1;\nusing websocketpp::lib::placeholders::_2;\nusing websocketpp::lib::bind;\n\nclass broadcast_server {\npublic:\n    broadcast_server() {\n        m_server.init_asio();\n                \n        m_server.set_open_handler(bind(&broadcast_server::on_open,this,::_1));\n        m_server.set_close_handler(bind(&broadcast_server::on_close,this,::_1));\n        m_server.set_message_handler(bind(&broadcast_server::on_message,this,::_1,::_2));\n    }\n    \n    void on_open(connection_hdl hdl) {\n        m_connections.insert(hdl);\n    }\n    \n    void on_close(connection_hdl hdl) {\n        m_connections.erase(hdl);\n    }\n    \n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        for (auto it : m_connections) {\n            m_server.send(it,msg);\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\nprivate:\n    typedef std::set<connection_hdl,std::owner_less<connection_hdl>> con_list;\n\n    server m_server;\n    con_list m_connections;\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 154,
    "matched_results": [],
    "unmatched_results": [
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <set>\n#include <iostream>\n\nnamespace websocket = websocketpp;\nusing websocket::server;\nusing websocket::connection_hdl;\n\nclass broadcast_server {\npublic:\n    broadcast_server() : m_server(m_io_service, websocketpp::lib::asio::ip::tcp::endpoint(websocketpp::lib::asio::ip::tcp::v4(), 0)) {\n        m_server.set_access_channels(websocketpp::log::alevel::all);\n        m_server.clear_access_channels(websocketpp::log::alevel::frame_payload);\n        m_server.set_open_handler(&broadcast_server::on_open, this);\n        m_server.set_close_handler(&broadcast_server::on_close, this);\n        m_server.set_message_handler(&broadcast_server::on_message, this);\n    }\n\n    void on_open(connection_hdl hdl) {\n        m_connections.insert(hdl);\n    }\n\n    void on_close(connection_hdl hdl) {\n        m_connections.erase(hdl);\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        for (auto& conn : m_connections) {\n            m_server.send(conn, msg->get_payload(), msg->get_opcode());\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.set_reuse_address(true);\n        m_server.listen(websocketpp::lib::asio::ip::tcp::endpoint(websocketpp::lib::asio::ip::tcp::v4(), port));\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    websocket::lib::io_service m_io_service;\n    server m_server;\n    std::set<connection_hdl> m_connections;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <set>\n#include <iostream>\n\nnamespace ws = websocketpp::server;\n\nclass broadcast_server {\npublic:\n    broadcast_server() : m_server(m_io_service) {\n        m_server.set_access_channels(ws::log::alevel::all);\n        m_server.clear_access_channels(ws::log::alevel::frame_payload);\n        m_server.set_open_handler(&broadcast_server::on_open, this);\n        m_server.set_close_handler(&broadcast_server::on_close, this);\n        m_server.set_message_handler(&broadcast_server::on_message, this);\n    }\n\n    void on_open(ws::connection_hdl hdl) {\n        m_connections.insert(hdl);\n    }\n\n    void on_close(ws::connection_hdl hdl) {\n        m_connections.erase(hdl);\n    }\n\n    void on_message(ws::connection_hdl hdl, ws::message_ptr msg) {\n        for (auto& conn : m_connections) {\n            m_server.send(conn, msg->get_payload(), msg->get_opcode());\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.init_asio(&m_io_service);\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    ws::server<ws::config::asio_no_tls_client> m_server;\n    ws::io_service m_io_service;\n    std::set<ws::connection_hdl> m_connections;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <set>\n#include <iostream>\n\nnamespace websocket = websocketpp;\nusing websocket::server;\nusing websocket::connection_hdl;\n\nclass broadcast_server {\npublic:\n    broadcast_server() : m_server(m_io_service, websocketpp::lib::asio::ip::tcp::endpoint(websocketpp::lib::asio::ip::tcp::v4(), 0)) {\n        m_server.set_access_channels(websocketpp::log::alevel::all);\n        m_server.clear_access_channels(websocketpp::log::alevel::frame_payload);\n        m_server.set_open_handler(&broadcast_server::on_open, this);\n        m_server.set_close_handler(&broadcast_server::on_close, this);\n        m_server.set_message_handler(&broadcast_server::on_message, this);\n    }\n\n    void on_open(connection_hdl hdl) {\n        m_connections.insert(hdl);\n    }\n\n    void on_close(connection_hdl hdl) {\n        m_connections.erase(hdl);\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        for (auto it = m_connections.begin(); it != m_connections.end(); ++it) {\n            m_server.send(*it, msg->get_payload(), msg->get_opcode());\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.set_port(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    websocket::lib::io_service m_io_service;\n    server m_server;\n    std::set<connection_hdl> m_connections;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <set>\n#include <iostream>\n\nnamespace websocketpp { namespace server { namespace endpoint { namespace http { class request; } } } }\n\nclass broadcast_server {\npublic:\n    broadcast_server() : m_server(m_io_service, asio::ip::tcp::endpoint(asio::ip::tcp::v4(), 0)) {\n        m_server.set_access_channels(websocketpp::log::alevel::all);\n        m_server.clear_access_channels(websocketpp::log::alevel::frame_payload);\n        m_server.set_open_handler(&broadcast_server::on_open, this);\n        m_server.set_close_handler(&broadcast_server::on_close, this);\n        m_server.set_message_handler(&broadcast_server::on_message, this);\n    }\n\n    void on_open(connection_hdl hdl) {\n        m_connections.insert(hdl);\n    }\n\n    void on_close(connection_hdl hdl) {\n        m_connections.erase(hdl);\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        for (auto it = m_connections.begin(); it != m_connections.end(); ++it) {\n            m_server.send(*it, msg->get_payload(), msg->get_opcode());\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.set_reuse_address(true);\n        m_server.listen(asio::ip::tcp::endpoint(asio::ip::tcp::v4(), port));\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    websocketpp::server<websocketpp::config::asio_no_tls_client> m_server;\n    websocketpp::lib::shared_ptr<websocketpp::lib::asio::io_service> m_io_service;\n    std::set<connection_hdl> m_connections;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <set>\n#include <iostream>\n\nnamespace ws = websocketpp::server;\nusing websocketpp::lib::asio::ip::tcp;\n\nclass broadcast_server {\npublic:\n    broadcast_server() : m_server(m_io_service) {\n        m_server.set_access_channels(websocketpp::log::alevel::all);\n        m_server.clear_access_channels(websocketpp::log::alevel::frame_payload);\n        m_server.set_open_handler(&broadcast_server::on_open, this);\n        m_server.set_close_handler(&broadcast_server::on_close, this);\n        m_server.set_message_handler(&broadcast_server::on_message, this);\n    }\n\n    void on_open(websocketpp::connection_hdl hdl) {\n        m_connections.insert(hdl);\n    }\n\n    void on_close(websocketpp::connection_hdl hdl) {\n        m_connections.erase(hdl);\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, ws::message_ptr msg) {\n        for (auto it = m_connections.begin(); it != m_connections.end(); ++it) {\n            m_server.send(*it, msg->get_payload(), msg->get_opcode());\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.init_asio(&m_io_service);\n        m_server.listen(tcp::endpoint(tcp::v4(), port));\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    ws::server<ws::config::asio_no_tls_client> m_server;\n    websocketpp::lib::shared_ptr<ws::connection_hdl> m_connection_hdl;\n    std::set<websocketpp::lib::shared_ptr<ws::connection_hdl>> m_connections;\n    websocketpp::lib::asio::io_service m_io_service;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <set>\n#include <iostream>\n\nnamespace ws = websocketpp::server;\nusing websocketpp::lib::asio::ip::tcp;\n\nclass broadcast_server {\npublic:\n    broadcast_server() : m_server(m_io_service) {\n        m_server.set_access_channels(websocketpp::log::alevel::all);\n        m_server.clear_access_channels(websocketpp::log::alevel::frame_payload);\n        m_server.set_open_handler(&broadcast_server::on_open, this);\n        m_server.set_close_handler(&broadcast_server::on_close, this);\n        m_server.set_message_handler(&broadcast_server::on_message, this);\n    }\n\n    void on_open(websocketpp::connection_hdl hdl) {\n        m_connections.insert(hdl);\n    }\n\n    void on_close(websocketpp::connection_hdl hdl) {\n        m_connections.erase(hdl);\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, ws::message_ptr msg) {\n        for (auto& conn : m_connections) {\n            m_server.send(conn, msg->get_payload(), msg->get_opcode());\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.init_asio(&m_io_service);\n        m_server.listen(tcp::endpoint(tcp::v4(), port));\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    ws::server m_server;\n    ws::lib::shared_ptr<ws::connection_hdl> m_connections;\n    ws::lib::io_service m_io_service;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <set>\n#include <iostream>\n\nnamespace ws = websocketpp::server;\n\nclass broadcast_server {\npublic:\n    broadcast_server() : m_server(m_io_service) {\n        m_server.set_access_channels(ws::log::alevel::all);\n        m_server.clear_access_channels(ws::log::alevel::frame_payload);\n        m_server.set_open_handler(&broadcast_server::on_open, this);\n        m_server.set_close_handler(&broadcast_server::on_close, this);\n        m_server.set_message_handler(&broadcast_server::on_message, this);\n    }\n\n    void on_open(ws::connection_hdl hdl) {\n        m_connections.insert(hdl);\n    }\n\n    void on_close(ws::connection_hdl hdl) {\n        m_connections.erase(hdl);\n    }\n\n    void on_message(ws::connection_hdl hdl, ws::message_ptr msg) {\n        for (auto it = m_connections.begin(); it != m_connections.end(); ++it) {\n            m_server.send(*it, msg->get_payload(), msg->get_opcode());\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.init_asio(&m_io_service);\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    ws::server<ws::config::asio_no_tls_client> m_server;\n    ws::io_service m_io_service;\n    std::set<ws::connection_hdl> m_connections;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <set>\n#include <iostream>\n\nnamespace websocketpp { namespace server { namespace endpoint { namespace http { class request; } } } }\n\nclass broadcast_server {\npublic:\n    broadcast_server() : m_server(m_io_service, asio::ip::tcp::endpoint(asio::ip::tcp::v4(), 0)) {\n        m_server.set_access_channels(websocketpp::log::alevel::all);\n        m_server.clear_access_channels(websocketpp::log::alevel::frame_payload);\n        m_server.set_open_handler(&broadcast_server::on_open, this);\n        m_server.set_close_handler(&broadcast_server::on_close, this);\n        m_server.set_message_handler(&broadcast_server::on_message, this);\n    }\n\n    void on_open(connection_hdl hdl) {\n        m_connections.insert(hdl);\n    }\n\n    void on_close(connection_hdl hdl) {\n        m_connections.erase(hdl);\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        for (auto& c : m_connections) {\n            m_server.send(c, msg->get_payload(), msg->get_opcode());\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.set_reuse_address(true);\n        m_server.listen(asio::ip::tcp::endpoint(asio::ip::tcp::v4(), port));\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    websocketpp::server<websocketpp::config::asio_no_tls_client> m_server;\n    websocketpp::lib::shared_ptr<websocketpp::lib::asio::io_service> m_io_service;\n    std::set<connection_hdl> m_connections;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <set>\n#include <iostream>\n\nnamespace websocket = websocketpp;\nusing websocket::server;\nusing websocket::connection_hdl;\n\nclass broadcast_server {\npublic:\n    broadcast_server() : m_server(m_io_service, websocketpp::lib::asio::ip::tcp::endpoint(websocketpp::lib::asio::ip::tcp::v4(), 0)) {\n        m_server.set_access_channels(websocketpp::log::alevel::all);\n        m_server.clear_access_channels(websocketpp::log::alevel::frame_payload);\n        m_server.set_open_handler(&broadcast_server::on_open, this);\n        m_server.set_close_handler(&broadcast_server::on_close, this);\n        m_server.set_message_handler(&broadcast_server::on_message, this);\n    }\n\n    void on_open(connection_hdl hdl) {\n        m_connections.insert(hdl);\n    }\n\n    void on_close(connection_hdl hdl) {\n        m_connections.erase(hdl);\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        for (auto& conn : m_connections) {\n            m_server.send(conn, msg->get_payload(), msg->get_opcode());\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.set_reuse_address(true);\n        m_server.listen(websocketpp::lib::asio::ip::tcp::endpoint(websocketpp::lib::asio::ip::tcp::v4(), port));\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    websocket::lib::io_service m_io_service;\n    server m_server;\n    std::set<connection_hdl> m_connections;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <set>\n#include <iostream>\n\nnamespace ws = websocketpp::server;\n\nclass broadcast_server {\npublic:\n    broadcast_server() : m_server(ws::endpoint::gen_host(), port) {}\n\n    void broadcast_server() {\n        m_server.set_access_channels(ws::log::alevel::all);\n        m_server.clear_access_channels(ws::log::alevel::frame_payload);\n        m_server.set_open_handler(&broadcast_server::on_open, this);\n        m_server.set_close_handler(&broadcast_server::on_close, this);\n        m_server.set_message_handler(&broadcast_server::on_message, this);\n    }\n\n    void on_open(ws::connection_hdl hdl) {\n        m_connections.insert(hdl);\n    }\n\n    void on_close(ws::connection_hdl hdl) {\n        m_connections.erase(hdl);\n    }\n\n    void on_message(ws::connection_hdl hdl, ws::message_ptr msg) {\n        for (auto& conn : m_connections) {\n            m_server.send(conn, msg->get_payload(), msg->get_opcode());\n        }\n    }\n\n    void run(uint16_t port) {\n        m_server.init_asio();\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    ws::server<ws::config::asio_no_tls_client> m_server;\n    uint16_t port;\n    std::set<ws::connection_hdl> m_connections;\n};\n```"
    ],
    "match_count": 0,
    "pass@3": 0.0,
    "pass@5": 0.0
  },
  {
    "Task_id": 46,
    "Instruction": "Task Description: Implement a WebSocket server in C++ using the WebSocket++ library to handle client connections and echo back received messages.\n\nClass Description: The utility_server class encapsulates a WebSocket server that listens for incoming connections, receives messages from clients, and echoes them back. It uses WebSocket++ with ASIO for network handling.\n\nAttributes:\n- m_endpoint: [server] - The WebSocket++ server instance that manages connections and message handling.\n\nMethods:\n- utility_server() - [Constructor] -> [void] - Initializes the server with logging settings, ASIO, and sets up the message handler.\n- echo_handler(websocketpp::connection_hdl hdl, server::message_ptr msg) -> [void] - Handles incoming messages by echoing them back to the client.\n- run() -> [void] - Starts the server, begins listening on port 9002, and runs the ASIO event loop.",
    "Canonical_solution": "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <functional>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\n\nclass utility_server {\npublic:\n    utility_server() {\n         // Set logging settings\n        m_endpoint.set_error_channels(websocketpp::log::elevel::all);\n        m_endpoint.set_access_channels(websocketpp::log::alevel::all ^ websocketpp::log::alevel::frame_payload);\n\n        // Initialize Asio\n        m_endpoint.init_asio();\n\n        // Set the default message handler to the echo handler\n        m_endpoint.set_message_handler(std::bind(\n            &utility_server::echo_handler, this,\n            std::placeholders::_1, std::placeholders::_2\n        ));\n    }\n\n    void echo_handler(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        // write a new message\n        m_endpoint.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    void run() {\n        // Listen on port 9002\n        m_endpoint.listen(9002);\n\n        // Queues a connection accept operation\n        m_endpoint.start_accept();\n\n        // Start the Asio io_service run loop\n        m_endpoint.run();\n    }\nprivate:\n    server m_endpoint;\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 154,
    "matched_results": [
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <boost/asio.hpp>\n\nusing namespace websocketpp;\nusing namespace websocketpp::server;\nusing namespace boost::asio;\n\nclass utility_server {\npublic:\n    utility_server() {\n        logging::set_logging_level(logging::level::debug);\n        m_endpoint = server<asio::ip::tcp>();\n        m_endpoint.set_access_channels(logging::level::none);\n        m_endpoint.set_open_channels(logging::level::debug);\n        m_endpoint.init_asio();\n        m_endpoint.set_open_handler(&utility_server::echo_handler, this);\n        m_endpoint.set_message_handler(&utility_server::echo_handler, this);\n        m_endpoint.listen(9002);\n        m_endpoint.start_accept();\n    }\n\n    void echo_handler(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        m_endpoint.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    void run() {\n        m_endpoint.run();\n    }\n\nprivate:\n    server<asio::ip::tcp> m_endpoint;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <boost/asio.hpp>\n#include <iostream>\n\nnamespace websocket = websocketpp;\nusing websocket::server;\nusing websocket::connection_hdl;\nusing websocket::message_ptr;\n\nclass utility_server {\npublic:\n    utility_server() {\n        // Initialize logging settings, ASIO, and set up the message handler\n        m_endpoint.set_access_channels(websocketpp::log::alevel::all);\n        m_endpoint.clear_access_channels(websocketpp::log::alevel::frame_payload);\n        m_endpoint.init_asio();\n        m_endpoint.set_open_handler(&utility_server::on_open, this);\n        m_endpoint.set_message_handler(&utility_server::echo_handler, this);\n    }\n\n    void echo_handler(connection_hdl hdl, message_ptr msg) {\n        // Handle incoming messages by echoing them back to the client\n        m_endpoint.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    void run() {\n        // Start the server, begin listening on port 9002, and run the ASIO event loop\n        m_endpoint.listen(9002);\n        m_endpoint.start_accept();\n        m_endpoint.run();\n    }\n\nprivate:\n    server<websocketpp::config::asio_no_tls_client> m_endpoint;\n};\n\nint main() {\n    utility_server server;\n    server.run();\n    return 0;\n}\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <boost/asio.hpp>\n#include <iostream>\n\nnamespace websocket = websocketpp;\nusing tcp = boost::asio::ip::tcp;\n\nclass utility_server {\npublic:\n    utility_server() {\n        server.set_access_channels(websocketpp::log::alevel::all);\n        server.clear_access_channels(websocketpp::log::alevel::frame_payload);\n        server.init_asio();\n        server.set_open_handler(&utility_server::on_open, this);\n        server.set_message_handler(&utility_server::echo_handler, this);\n    }\n\n    void echo_handler(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        server.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    void run() {\n        server.listen(9002);\n        server.start_accept();\n        server.run();\n    }\n\nprivate:\n    websocket::server<websocketpp::config::asio_no_tls_client> server;\n};\n\nint main() {\n    utility_server server;\n    server.run();\n    return 0;\n}\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <boost/asio.hpp>\n\nnamespace ws = websocketpp;\nusing tcp = boost::asio::ip::tcp;\n\nclass utility_server {\npublic:\n    utility_server() {\n        server.set_access_channels(ws::log::alevel::all);\n        server.clear_access_channels(ws::log::alevel::frame_payload);\n        server.init_asio();\n        server.set_open_handler(&utility_server::echo_handler, this);\n        server.set_message_handler(&utility_server::echo_handler, this);\n    }\n\n    void echo_handler(ws::connection_hdl hdl, server::message_ptr msg) {\n        server.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    void run() {\n        server.listen(tcp::endpoint(tcp::v4(), 9002));\n        server.start_accept();\n        server.run();\n    }\n\nprivate:\n    ws::server<ws::config::asio_no_tls_client> server;\n};\n```"
    ],
    "unmatched_results": [
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <boost/asio.hpp>\n\nusing websocketpp::server;\nusing websocketpp::connection_hdl;\nusing websocketpp::message_ptr;\n\nclass utility_server {\npublic:\n    utility_server() {\n        // Initialize logging settings, ASIO, and set up the message handler\n    }\n\n    void echo_handler(connection_hdl hdl, message_ptr msg) {\n        // Handle incoming messages by echoing them back to the client\n    }\n\n    void run() {\n        // Start the server, begin listening on port 9002, and run the ASIO event loop\n    }\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <boost/asio.hpp>\n#include <iostream>\n\nnamespace websocket = websocketpp;\nusing websocket::server;\nusing websocket::connection_hdl;\nusing websocket::message_ptr;\n\nclass utility_server {\npublic:\n    utility_server() {\n        m_endpoint = websocket::server<websocketpp::config::asio_no_tls_client>();\n        m_endpoint.set_access_channels(websocketpp::log::alevel::all);\n        m_endpoint.clear_access_channels(websocketpp::log::alevel::frame_payload);\n        m_endpoint.set_open_handler(&utility_server::on_open, this);\n        m_endpoint.set_message_handler(&utility_server::echo_handler, this);\n    }\n\n    void echo_handler(connection_hdl hdl, message_ptr msg) {\n        m_endpoint.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    void run() {\n        m_endpoint.listen(9002);\n        m_endpoint.start_accept();\n        boost::asio::io_service io_service;\n        m_endpoint.run(io_service);\n    }\n\nprivate:\n    server<websocketpp::config::asio_no_tls_client> m_endpoint;\n\n    void on_open(connection_hdl hdl) {\n        std::cout << \"Client connected.\" << std::endl;\n    }\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <boost/asio.hpp>\n#include <iostream>\n\nnamespace ws = websocketpp;\nusing tcp = boost::asio::ip::tcp;\n\nclass utility_server {\npublic:\n    utility_server() {\n        m_endpoint = ws::server<ws::config::asio_no_tls_client> {};\n        m_endpoint.set_access_channels(ws::log::alevel::all);\n        m_endpoint.clear_access_channels(ws::log::alevel::frame_payload);\n        m_endpoint.set_open_handler(&utility_server::on_open, this);\n        m_endpoint.set_message_handler(&utility_server::echo_handler, this);\n    }\n\n    void echo_handler(ws::connection_hdl hdl, server::message_ptr msg) {\n        m_endpoint.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    void run() {\n        boost::asio::io_service io_service;\n        tcp::endpoint endpoint(tcp::v4(), 9002);\n        m_endpoint.init_asio(&io_service);\n        m_endpoint.listen(endpoint);\n        m_endpoint.start_accept();\n        io_service.run();\n    }\n\nprivate:\n    ws::server<ws::config::asio_no_tls_client> m_endpoint;\n\n    void on_open(ws::connection_hdl hdl) {\n        std::cout << \"Connection opened\" << std::endl;\n    }\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <boost/asio.hpp>\n#include <iostream>\n\nnamespace websocket = websocketpp;\nusing websocket::server;\nusing websocket::connection_hdl;\nusing websocket::message_ptr;\n\nclass utility_server {\npublic:\n    utility_server() {\n        m_endpoint = websocket::server<websocketpp::config::asio_no_tls_client>::endpoint();\n        m_endpoint.set_access_channels(websocketpp::log::alevel::all);\n        m_endpoint.clear_access_channels(websocketpp::log::alevel::frame_payload);\n        m_endpoint.set_open_handler(&utility_server::on_open, this);\n        m_endpoint.set_message_handler(&utility_server::echo_handler, this);\n    }\n\n    void echo_handler(connection_hdl hdl, message_ptr msg) {\n        m_endpoint.get_connection(hdl).send(msg, websocketpp::frame::op_code::text);\n    }\n\n    void run() {\n        m_endpoint.listen(9002);\n        m_endpoint.start_accept();\n        boost::asio::io_service io_service;\n        m_endpoint.run(io_service);\n    }\n\nprivate:\n    server<websocketpp::config::asio_no_tls_client> m_endpoint;\n    void on_open(connection_hdl hdl) {\n        std::cout << \"Client connected\" << std::endl;\n    }\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <boost/asio.hpp>\n\nusing websocketpp::server;\nusing websocketpp::config::asio_no_tls_client;\n\nclass utility_server {\npublic:\n    utility_server() {\n        m_endpoint = websocketpp::server<asio_no_tls_client>::endpoint();\n        m_endpoint.set_access_channels(websocketpp::log::alevel::all);\n        m_endpoint.clear_access_channels(websocketpp::log::alevel::frame_payload);\n        m_endpoint.set_open_handler(&utility_server::on_open, this);\n        m_endpoint.set_message_handler(&utility_server::echo_handler, this);\n    }\n\n    void echo_handler(websocketpp::connection_hdl hdl, server::message_ptr msg) {\n        m_endpoint.get_connection(hdl).get()->send(msg->get_payload(), msg->get_opcode());\n    }\n\n    void run() {\n        m_endpoint.set_reuse_address(true);\n        m_endpoint.listen(9002);\n        m_endpoint.start_accept();\n        boost::asio::io_service io_service;\n        m_endpoint.run(io_service);\n    }\n\nprivate:\n    server<asio_no_tls_client> m_endpoint;\n};\n\nint main() {\n    utility_server server;\n    server.run();\n    return 0;\n}\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <boost/asio.hpp>\n#include <iostream>\n\nnamespace ws = websocketpp;\nusing tcp = boost::asio::ip::tcp;\n\nclass utility_server {\npublic:\n    utility_server() {\n        m_endpoint = ws::server<ws::config::asio_no_tls_client> {};\n        m_endpoint.set_access_channels(ws::log::alevel::all);\n        m_endpoint.clear_access_channels(ws::log::alevel::frame_payload);\n        m_endpoint.set_open_handler(&utility_server::on_open, this);\n        m_endpoint.set_message_handler(&utility_server::echo_handler, this);\n    }\n\n    void echo_handler(ws::connection_hdl hdl, server::message_ptr msg) {\n        m_endpoint.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    void run() {\n        boost::asio::io_service io_service;\n        tcp::acceptor acceptor(io_service, tcp::endpoint(tcp::v4(), 9002));\n        m_endpoint.run();\n    }\n\nprivate:\n    ws::server<ws::config::asio_no_tls_client> m_endpoint;\n\n    void on_open(ws::connection_hdl hdl) {\n        std::cout << \"Connection opened\" << std::endl;\n    }\n};\n```"
    ],
    "match_count": 4,
    "pass@3": 0.8333333333333334,
    "pass@5": 0.9761904761904762
  },
  {
    "Task_id": 47,
    "Instruction": "Task Description: Implement a WebSocket server class in C++ using the WebSocket++ library to handle client connections, process incoming messages, and manage server events.\n\nClass Description: The WebSocketServer class encapsulates a WebSocket++ server instance, providing methods to initialize, configure, and run the server. It handles WebSocket connections, processes messages, and manages various server events like HTTP requests, connection failures, and closures.\n\nAttributes:\n- m_server: [websocketpp::server<websocketpp::config::debug_asio>] - The main WebSocket++ server instance that manages connections and events.\n\nMethods:\n- WebSocketServer() -> [Constructor] - Initializes the server with default settings, configures logging, sets up ASIO, and registers event handlers.\n- run(int port) -> [void] - Starts the server on the specified port, begins accepting connections, and runs the event loop.\n- validate(websocketpp::connection_hdl hdl) -> [bool] - Validates incoming connections (always returns true in this implementation).\n- on_http(websocketpp::connection_hdl hdl) -> [void] - Handles HTTP requests received by the server.\n- on_fail(websocketpp::connection_hdl hdl) -> [void] - Handles connection failure events.\n- on_close(websocketpp::connection_hdl hdl) -> [void] - Handles connection closure events.\n- on_message(websocketpp::connection_hdl hdl, message_ptr msg) -> [void] - Processes incoming WebSocket messages and echoes them back to the client.",
    "Canonical_solution": "#include <websocketpp/config/debug_asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <websocketpp/logger/syslog.hpp>\n#include <iostream>\n\nusing websocketpp::lib::placeholders::_1;\nusing websocketpp::lib::placeholders::_2;\nusing websocketpp::lib::bind;\n\nclass WebSocketServer {\npublic:\n    typedef websocketpp::server<websocketpp::config::debug_asio> server;\n    typedef server::message_ptr message_ptr;\n\n    WebSocketServer() {\n        // Set logging settings\n        m_server.set_access_channels(websocketpp::log::alevel::all);\n        m_server.clear_access_channels(websocketpp::log::alevel::frame_payload);\n\n        // Initialize ASIO\n        m_server.init_asio();\n        m_server.set_reuse_addr(true);\n\n        // Register handlers\n        m_server.set_message_handler(bind(&WebSocketServer::on_message, this, ::_1, ::_2));\n        m_server.set_http_handler(bind(&WebSocketServer::on_http, this, ::_1));\n        m_server.set_fail_handler(bind(&WebSocketServer::on_fail, this, ::_1));\n        m_server.set_close_handler(bind(&WebSocketServer::on_close, this, ::_1));\n        m_server.set_validate_handler(bind(&WebSocketServer::validate, this, ::_1));\n    }\n\n    void run(int port) {\n        try {\n            // Listen on specified port\n            m_server.listen(port);\n\n            // Start the server accept loop\n            m_server.start_accept();\n\n            // Start the ASIO io_service run loop\n            m_server.run();\n        } catch (websocketpp::exception const & e) {\n            std::cout << e.what() << std::endl;\n        }\n    }\n\nprivate:\n    bool validate(websocketpp::connection_hdl hdl) {\n        return true;\n    }\n\n    void on_http(websocketpp::connection_hdl hdl) {\n        server::connection_ptr con = m_server.get_con_from_hdl(hdl);\n        std::string res = con->get_request_body();\n        std::stringstream ss;\n        ss << \"got HTTP request with \" << res.size() << \" bytes of body data.\";\n        con->set_body(ss.str());\n        con->set_status(websocketpp::http::status_code::ok);\n    }\n\n    void on_fail(websocketpp::connection_hdl hdl) {\n        server::connection_ptr con = m_server.get_con_from_hdl(hdl);\n        std::cout << \"Fail handler: \" << con->get_ec() << \" \" << con->get_ec().message() << std::endl;\n    }\n\n    void on_close(websocketpp::connection_hdl hdl) {\n        std::cout << \"Close handler\" << std::endl;\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, message_ptr msg) {\n        std::cout << \"on_message called with hdl: \" << hdl.lock().get()\n                  << \" and message: \" << msg->get_payload()\n                  << std::endl;\n\n        try {\n            m_server.send(hdl, msg->get_payload(), msg->get_opcode());\n        } catch (websocketpp::exception const & e) {\n            std::cout << \"Echo failed because: \" \n                      << \"(\" << e.what() << \")\" << std::endl;\n        }\n    }\n\n    server m_server;\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 154,
    "matched_results": [
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <iostream>\n#include <memory>\n\nnamespace websocketpp {\n    template <typename Config>\n    class server {\n    public:\n        using connection_hdl = typename Config::connection_hdl;\n        using message_ptr = typename Config::message_ptr;\n    };\n}\n\nclass WebSocketServer {\nprivate:\n    websocketpp::server<websocketpp::config::debug_asio> m_server;\n\npublic:\n    WebSocketServer() {\n        m_server.set_access_channels(websocketpp::log::alevel::all);\n        m_server.clear_access_channels(websocketpp::log::alevel::frame_payload);\n        m_server.set_error_channels(websocketpp::log::alevel::all);\n        m_server.clear_error_channels(websocketpp::log::alevel::frame_payload);\n        m_server.init_asio();\n        m_server.set_open_handler(&WebSocketServer::on_open, this);\n        m_server.set_close_handler(&WebSocketServer::on_close, this);\n        m_server.set_fail_handler(&WebSocketServer::on_fail, this);\n        m_server.set_http_handler(&WebSocketServer::on_http, this);\n        m_server.set_validate_handler(&WebSocketServer::validate, this);\n        m_server.set_message_handler(&WebSocketServer::on_message, this);\n    }\n\n    void run(int port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\n    bool validate(websocketpp::connection_hdl hdl) {\n        return true;\n    }\n\n    void on_http(websocketpp::connection_hdl hdl) {\n        // Handle HTTP requests\n    }\n\n    void on_fail(websocketpp::connection_hdl hdl) {\n        // Handle connection failure\n    }\n\n    void on_close(websocketpp::connection_hdl hdl) {\n        // Handle connection closure\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, message_ptr msg) {\n        if (msg->get_payload().size() > 0) {\n            m_server.send(hdl, msg->get_payload(), msg->get_opcode());\n        }\n    }\n\n    void on_open(websocketpp::connection_hdl hdl) {\n        // Handle connection open\n    }\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <iostream>\n#include <memory>\n#include <functional>\n\nnamespace websocketpp {\n    namespace server {\n        template <typename config>\n        class WebSocketServer {\n        public:\n            WebSocketServer() {\n                m_server = std::make_shared<websocketpp::server<config>>();\n                m_server->init_asio();\n                m_server->set_access_channels(websocketpp::log::alevel::all);\n                m_server->clear_access_channels(websocketpp::log::alevel::frame_payload);\n                m_server->set_open_handler(std::bind(&WebSocketServer::on_open, this, std::placeholders::_1));\n                m_server->set_close_handler(std::bind(&WebSocketServer::on_close, this, std::placeholders::_1));\n                m_server->set_fail_handler(std::bind(&WebSocketServer::on_fail, this, std::placeholders::_1));\n                m_server->set_message_handler(std::bind(&WebSocketServer::on_message, this, std::placeholders::_1, std::placeholders::_2));\n            }\n\n            void run(int port) {\n                m_server->set_reuse_address(true);\n                m_server->listen(port);\n                m_server->start_accept();\n                m_server->run();\n            }\n\n            bool validate(websocketpp::connection_hdl hdl) {\n                return true;\n            }\n\n            void on_http(websocketpp::connection_hdl hdl) {\n                // Handle HTTP requests\n            }\n\n            void on_fail(websocketpp::connection_hdl hdl) {\n                // Handle connection failure\n            }\n\n            void on_close(websocketpp::connection_hdl hdl) {\n                // Handle connection closure\n            }\n\n            void on_message(websocketpp::connection_hdl hdl, message_ptr msg) {\n                // Process incoming messages and echo them back\n                m_server->send(hdl, msg);\n            }\n\n        private:\n            std::shared_ptr<websocketpp::server<config>> m_server;\n            void on_open(websocketpp::connection_hdl hdl) {\n                // Handle connection open\n            }\n        };\n    }\n}\n```"
    ],
    "unmatched_results": [
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <iostream>\n#include <memory>\n\nnamespace websocketpp {\n    template <typename Config>\n    class server {\n    public:\n        using connection_hdl = typename Config::connection_hdl;\n        using message_ptr = typename Config::message_ptr;\n    };\n}\n\nclass WebSocketServer {\nprivate:\n    websocketpp::server<websocketpp::config::debug_asio> m_server;\n\npublic:\n    WebSocketServer() {\n        m_server.set_access_channels(websocketpp::log::alevel::all);\n        m_server.clear_access_channels(websocketpp::log::alevel::frame_payload);\n        m_server.set_open_handler(&WebSocketServer::on_open, this);\n        m_server.set_close_handler(&WebSocketServer::on_close, this);\n        m_server.set_fail_handler(&WebSocketServer::on_fail, this);\n        m_server.set_message_handler(&WebSocketServer::on_message, this);\n        m_server.set_http_handler(&WebSocketServer::on_http, this);\n    }\n\n    void run(int port) {\n        m_server.init_asio();\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\n    bool validate(websocketpp::connection_hdl hdl) {\n        return true;\n    }\n\n    void on_http(websocketpp::connection_hdl hdl) {\n        // Handle HTTP requests\n    }\n\n    void on_fail(websocketpp::connection_hdl hdl) {\n        // Handle connection failure\n    }\n\n    void on_close(websocketpp::connection_hdl hdl) {\n        // Handle connection closure\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, websocketpp::message_ptr msg) {\n        // Process incoming messages and echo them back\n        m_server.send(hdl, msg);\n    }\n\nprivate:\n    void on_open(websocketpp::connection_hdl hdl) {\n        // Handle new connection\n    }\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <iostream>\n#include <memory>\n\nnamespace websocketpp {\n    template <typename Config>\n    class server {\n    public:\n        // ... (WebSocket++ server implementation details)\n    };\n}\n\nclass WebSocketServer {\nprivate:\n    websocketpp::server<websocketpp::config::debug_asio> m_server;\n\npublic:\n    WebSocketServer() {\n        m_server.set_access_channels(websocketpp::log::alevel::all);\n        m_server.clear_access_channels(websocketpp::log::alevel::frame_payload);\n        m_server.set_open_handler(&WebSocketServer::on_open, this);\n        m_server.set_close_handler(&WebSocketServer::on_close, this);\n        m_server.set_fail_handler(&WebSocketServer::on_fail, this);\n        m_server.set_message_handler(&WebSocketServer::on_message, this);\n    }\n\n    void run(int port) {\n        m_server.init_asio();\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\n    bool validate(websocketpp::connection_hdl hdl) {\n        return true;\n    }\n\n    void on_http(websocketpp::connection_hdl hdl) {\n        // Handle HTTP requests\n    }\n\n    void on_fail(websocketpp::connection_hdl hdl) {\n        // Handle connection failure\n    }\n\n    void on_close(websocketpp::connection_hdl hdl) {\n        // Handle connection closure\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, message_ptr msg) {\n        // Process incoming messages and echo them back\n        m_server.send(hdl, msg);\n    }\n\nprivate:\n    void on_open(websocketpp::connection_hdl hdl) {\n        // Handle connection open\n    }\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <iostream>\n#include <memory>\n\nnamespace websocketpp {\n    template <typename Config>\n    class server {\n    public:\n        using connection_hdl = typename Config::connection_hdl;\n        using message_ptr = typename Config::message_ptr;\n    };\n}\n\nclass WebSocketServer {\nprivate:\n    websocketpp::server<websocketpp::config::debug_asio> m_server;\n\npublic:\n    WebSocketServer() {\n        m_server.set_access_channels(websocketpp::log::alevel::all);\n        m_server.clear_access_channels(websocketpp::log::alevel::frame_payload);\n        m_server.set_open_handler(&WebSocketServer::on_open, this);\n        m_server.set_close_handler(&WebSocketServer::on_close, this);\n        m_server.set_fail_handler(&WebSocketServer::on_fail, this);\n        m_server.set_message_handler(&WebSocketServer::on_message, this);\n    }\n\n    void run(int port) {\n        m_server.init_asio();\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\n    bool validate(websocketpp::connection_hdl hdl) {\n        return true;\n    }\n\n    void on_http(websocketpp::connection_hdl hdl) {\n        // Handle HTTP requests\n    }\n\n    void on_fail(websocketpp::connection_hdl hdl) {\n        // Handle connection failure\n    }\n\n    void on_close(websocketpp::connection_hdl hdl) {\n        // Handle connection closure\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, message_ptr msg) {\n        if (msg->get_payload().size() > 0) {\n            m_server.send(hdl, msg->get_payload(), msg->get_opcode());\n        }\n    }\n\nprivate:\n    void on_open(websocketpp::connection_hdl hdl) {\n        // Handle new connection\n    }\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <iostream>\n#include <memory>\n\nnamespace websocketpp {\n    template <typename Config>\n    class server {\n    public:\n        using connection_hdl = typename Config::connection_hdl;\n        using message_ptr = typename Config::message_ptr;\n    };\n}\n\nclass WebSocketServer {\nprivate:\n    websocketpp::server<websocketpp::config::debug_asio> m_server;\n\npublic:\n    WebSocketServer() {\n        m_server.set_access_channels(websocketpp::log::alevel::all);\n        m_server.clear_access_channels(websocketpp::log::alevel::frame_payload);\n        m_server.set_open_handler(&WebSocketServer::on_open, this);\n        m_server.set_close_handler(&WebSocketServer::on_close, this);\n        m_server.set_fail_handler(&WebSocketServer::on_fail, this);\n        m_server.set_http_handler(&WebSocketServer::on_http, this);\n        m_server.set_message_handler(&WebSocketServer::on_message, this);\n    }\n\n    void run(int port) {\n        m_server.init_asio();\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\n    bool validate(websocketpp::connection_hdl hdl) {\n        return true;\n    }\n\n    void on_http(websocketpp::connection_hdl hdl) {\n        // Handle HTTP requests\n    }\n\n    void on_fail(websocketpp::connection_hdl hdl) {\n        // Handle connection failure\n    }\n\n    void on_close(websocketpp::connection_hdl hdl) {\n        // Handle connection closure\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, websocketpp::message_ptr msg) {\n        // Process incoming messages and echo them back\n        m_server.send(hdl, msg);\n    }\n\nprivate:\n    void on_open(websocketpp::connection_hdl hdl) {\n        // Handle new connection\n    }\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <iostream>\n#include <memory>\n\nnamespace websocketpp {\n    template <typename Config>\n    class server {\n    public:\n        using connection_hdl = typename Config::connection_hdl;\n        using message_ptr = typename Config::message_ptr;\n    };\n}\n\nclass WebSocketServer {\nprivate:\n    websocketpp::server<websocketpp::config::debug_asio> m_server;\n\npublic:\n    WebSocketServer() {\n        m_server.set_access_channels(websocketpp::log::alevel::all);\n        m_server.clear_access_channels(websocketpp::log::alevel::frame_payload);\n        m_server.set_open_handler(&WebSocketServer::on_open, this);\n        m_server.set_close_handler(&WebSocketServer::on_close, this);\n        m_server.set_fail_handler(&WebSocketServer::on_fail, this);\n        m_server.set_message_handler(&WebSocketServer::on_message, this);\n    }\n\n    void run(int port) {\n        m_server.init_asio();\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\n    bool validate(websocketpp::connection_hdl hdl) {\n        return true;\n    }\n\n    void on_http(websocketpp::connection_hdl hdl) {\n        // Handle HTTP requests\n    }\n\n    void on_fail(websocketpp::connection_hdl hdl) {\n        // Handle connection failure\n    }\n\n    void on_close(websocketpp::connection_hdl hdl) {\n        // Handle connection closure\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, message_ptr msg) {\n        m_server.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\nprivate:\n    void on_open(websocketpp::connection_hdl hdl) {\n        // Handle connection open\n    }\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <iostream>\n#include <memory>\n\nnamespace websocketpp {\n    template <typename Config>\n    class server {\n    public:\n        // ... (WebSocket++ server implementation details) ...\n    };\n}\n\nclass WebSocketServer {\nprivate:\n    websocketpp::server<websocketpp::config::debug_asio> m_server;\n\npublic:\n    WebSocketServer() {\n        m_server.set_access_channels(websocketpp::log::alevel::all);\n        m_server.clear_access_channels(websocketpp::log::alevel::frame_payload);\n        m_server.set_open_handler(&WebSocketServer::on_open, this);\n        m_server.set_close_handler(&WebSocketServer::on_close, this);\n        m_server.set_fail_handler(&WebSocketServer::on_fail, this);\n        m_server.set_message_handler(&WebSocketServer::on_message, this);\n    }\n\n    void run(int port) {\n        m_server.init_asio();\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\n    bool validate(websocketpp::connection_hdl hdl) {\n        return true;\n    }\n\n    void on_http(websocketpp::connection_hdl hdl) {\n        // ... (HTTP request handling) ...\n    }\n\n    void on_fail(websocketpp::connection_hdl hdl) {\n        // ... (Connection failure handling) ...\n    }\n\n    void on_close(websocketpp::connection_hdl hdl) {\n        // ... (Connection closure handling) ...\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, message_ptr msg) {\n        m_server.send(hdl, msg);\n    }\n\nprivate:\n    void on_open(websocketpp::connection_hdl hdl) {\n        // ... (Connection open handling) ...\n    }\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <iostream>\n#include <memory>\n\nnamespace websocketpp {\n    template <typename Config>\n    class server {\n    public:\n        using connection_hdl = typename Config::connection_hdl;\n        using message_ptr = typename Config::message_ptr;\n    };\n}\n\nclass WebSocketServer {\nprivate:\n    websocketpp::server<websocketpp::config::debug_asio> m_server;\n\npublic:\n    WebSocketServer() {\n        m_server.set_access_channels(websocketpp::log::alevel::all);\n        m_server.clear_access_channels(websocketpp::log::alevel::frame_payload);\n        m_server.set_open_handler(&WebSocketServer::on_open, this);\n        m_server.set_close_handler(&WebSocketServer::on_close, this);\n        m_server.set_fail_handler(&WebSocketServer::on_fail, this);\n        m_server.set_message_handler(&WebSocketServer::on_message, this);\n        m_server.set_http_handler(&WebSocketServer::on_http, this);\n    }\n\n    void run(int port) {\n        m_server.init_asio();\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\n    bool validate(websocketpp::connection_hdl hdl) {\n        return true;\n    }\n\n    void on_http(websocketpp::connection_hdl hdl) {\n        // Handle HTTP requests\n    }\n\n    void on_fail(websocketpp::connection_hdl hdl) {\n        // Handle connection failure\n    }\n\n    void on_close(websocketpp::connection_hdl hdl) {\n        // Handle connection closure\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, websocketpp::message_ptr msg) {\n        // Process incoming messages and echo them back\n        m_server.send(hdl, msg);\n    }\n\nprivate:\n    void on_open(websocketpp::connection_hdl hdl) {\n        // Handle new connection\n    }\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <iostream>\n#include <memory>\n\nnamespace websocketpp {\n    template <typename Config>\n    class server {\n    public:\n        using connection_hdl = typename Config::connection_hdl;\n        using message_ptr = typename Config::message_ptr;\n    };\n}\n\nclass WebSocketServer {\nprivate:\n    websocketpp::server<websocketpp::config::debug_asio> m_server;\n\npublic:\n    WebSocketServer() {\n        m_server.set_access_channels(websocketpp::log::alevel::all);\n        m_server.clear_access_channels(websocketpp::log::alevel::frame_payload);\n        m_server.set_open_handler(&WebSocketServer::on_open, this);\n        m_server.set_close_handler(&WebSocketServer::on_close, this);\n        m_server.set_fail_handler(&WebSocketServer::on_fail, this);\n        m_server.set_message_handler(&WebSocketServer::on_message, this);\n    }\n\n    void run(int port) {\n        m_server.init_asio();\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\n    bool validate(websocketpp::connection_hdl hdl) {\n        return true;\n    }\n\n    void on_http(websocketpp::connection_hdl hdl) {\n        // Handle HTTP requests\n    }\n\n    void on_fail(websocketpp::connection_hdl hdl) {\n        // Handle connection failure\n    }\n\n    void on_close(websocketpp::connection_hdl hdl) {\n        // Handle connection closure\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, message_ptr msg) {\n        m_server.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\nprivate:\n    void on_open(websocketpp::connection_hdl hdl) {\n        // Handle new connection\n    }\n};\n```"
    ],
    "match_count": 2,
    "pass@3": 0.5333333333333333,
    "pass@5": 0.7777777777777778
  },
  {
    "Task_id": 48,
    "Instruction": "Task Description: Implement a WebSocket server in C++ using the WebSocket++ library that supports secure TLS connections and handles both WebSocket and HTTP requests.\n\nClass Description: The WebSocketServer class encapsulates a secure WebSocket server implementation using WebSocket++ with ASIO and TLS support. It handles incoming connections, processes messages, and manages secure communication settings.\n\nAttributes:\n- m_server: [server] - The WebSocket++ server instance that manages connections and communication\n- tls_mode: [enum] - Enumeration defining TLS security modes (MOZILLA_INTERMEDIATE, MOZILLA_MODERN)\n\nMethods:\n- WebSocketServer() -> [constructor] - Initializes the server, sets up ASIO, and registers handler functions\n- run([int port]) -> [void] - Starts the server listening on the specified port and begins accepting connections\n- on_message([websocketpp::connection_hdl hdl, message_ptr msg]) -> [void] - Handles incoming WebSocket messages by echoing them back to the client\n- on_http([websocketpp::connection_hdl hdl]) -> [void] - Handles HTTP requests by returning a simple \"Hello World!\" response\n- get_password() -> [std::string] - Returns the password used for TLS certificate encryption\n- on_tls_init([tls_mode mode, websocketpp::connection_hdl hdl]) -> [context_ptr] - Initializes and configures TLS/SSL context with appropriate security settings based on the specified mode",
    "Canonical_solution": "#include <websocketpp/config/asio.hpp>\n#include <websocketpp/server.hpp>\n#include <websocketpp/lib/asio.hpp>\n#include <iostream>\n\ntypedef websocketpp::server<websocketpp::config::asio_tls> server;\ntypedef websocketpp::config::asio::message_type::ptr message_ptr;\ntypedef websocketpp::lib::shared_ptr<websocketpp::lib::asio::ssl::context> context_ptr;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer() {\n        // Initialize ASIO\n        m_server.init_asio();\n\n        // Register handlers\n        m_server.set_message_handler(bind(&WebSocketServer::on_message, this, ::_1, ::_2));\n        m_server.set_http_handler(bind(&WebSocketServer::on_http, this, ::_1));\n        m_server.set_tls_init_handler(bind(&WebSocketServer::on_tls_init, this, MOZILLA_INTERMEDIATE, ::_1));\n    }\n\n    void run(int port) {\n        // Listen on specified port\n        m_server.listen(port);\n\n        // Start the server accept loop\n        m_server.start_accept();\n\n        // Start the ASIO io_service run loop\n        m_server.run();\n    }\n\nprivate:\n    enum tls_mode {\n        MOZILLA_INTERMEDIATE = 1,\n        MOZILLA_MODERN = 2\n    };\n\n    void on_message(websocketpp::connection_hdl hdl, message_ptr msg) {\n        std::cout << \"on_message called with hdl: \" << hdl.lock().get()\n                  << \" and message: \" << msg->get_payload()\n                  << std::endl;\n\n        try {\n            m_server.send(hdl, msg->get_payload(), msg->get_opcode());\n        } catch (websocketpp::exception const & e) {\n            std::cout << \"Echo failed because: \"\n                      << \"(\" << e.what() << \")\" << std::endl;\n        }\n    }\n\n    void on_http(websocketpp::connection_hdl hdl) {\n        server::connection_ptr con = m_server.get_con_from_hdl(hdl);\n        con->set_body(\"Hello World!\");\n        con->set_status(websocketpp::http::status_code::ok);\n    }\n\n    std::string get_password() {\n        return \"test\";\n    }\n\n    context_ptr on_tls_init(tls_mode mode, websocketpp::connection_hdl hdl) {\n        namespace asio = websocketpp::lib::asio;\n\n        context_ptr ctx = websocketpp::lib::make_shared<asio::ssl::context>(asio::ssl::context::sslv23);\n\n        try {\n            if (mode == MOZILLA_MODERN) {\n                ctx->set_options(asio::ssl::context::default_workarounds |\n                                 asio::ssl::context::no_sslv2 |\n                                 asio::ssl::context::no_sslv3 |\n                                 asio::ssl::context::no_tlsv1 |\n                                 asio::ssl::context::single_dh_use);\n            } else {\n                ctx->set_options(asio::ssl::context::default_workarounds |\n                                 asio::ssl::context::no_sslv2 |\n                                 asio::ssl::context::no_sslv3 |\n                                 asio::ssl::context::single_dh_use);\n            }\n            ctx->set_password_callback(bind(&WebSocketServer::get_password, this));\n            ctx->use_certificate_chain_file(\"server.pem\");\n            ctx->use_private_key_file(\"server.pem\", asio::ssl::context::pem);\n            ctx->use_tmp_dh_file(\"dh.pem\");\n            \n            std::string ciphers = (mode == MOZILLA_MODERN) ? \n                \"ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256...\" : \n                \"ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256...\";\n            \n            if (SSL_CTX_set_cipher_list(ctx->native_handle(), ciphers.c_str()) != 1) {\n                std::cout << \"Error setting cipher list\" << std::endl;\n            }\n        } catch (std::exception& e) {\n            std::cout << \"Exception: \" << e.what() << std::endl;\n        }\n        return ctx;\n    }\n\n    server m_server;\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 154,
    "matched_results": [
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <asio.hpp>\n#include <iostream>\n#include <memory>\n#include <string>\n\nenum class tls_mode {\n    MOZILLA_INTERMEDIATE,\n    MOZILLA_MODERN\n};\n\nclass WebSocketServer {\npublic:\n    WebSocketServer() {\n        m_server = std::make_shared<websocketpp::server<websocketpp::config::asio_no_tls_client>>();\n        m_server->init_asio();\n        m_server->set_access_channels(websocketpp::log::alevel::all);\n        m_server->clear_access_channels(websocketpp::log::alevel::frame_payload);\n        m_server->set_open_handler(&WebSocketServer::on_open, this);\n        m_server->set_close_handler(&WebSocketServer::on_close, this);\n        m_server->set_message_handler(&WebSocketServer::on_message, this);\n        m_server->set_http_handler(&WebSocketServer::on_http, this);\n    }\n\n    void run(int port) {\n        m_server->set_reuse_address(true);\n        m_server->listen(port);\n        m_server->start_accept();\n        m_server->run();\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, message_ptr msg) {\n        m_server->send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    void on_http(websocketpp::connection_hdl hdl) {\n        m_server->send(hdl, \"HTTP/1.1 200 OK\\r\\nContent-Type: text/plain\\r\\n\\r\\nHello World!\", websocketpp::frame::opcode::text);\n    }\n\n    std::string get_password() const {\n        return m_password;\n    }\n\n    void on_tls_init(tls_mode mode, websocketpp::connection_hdl hdl) {\n        asio::ssl::context ctx(asio::ssl::context::tlsv12);\n        ctx.set_password_callback([this](std::size_t, char* pass, std::size_t max_len) {\n            std::string password = get_password();\n            strncpy(pass, password.c_str(), max_len);\n            pass[max_len - 1] = '\\0';\n        });\n\n        switch (mode) {\n            case tls_mode::MOZILLA_INTERMEDIATE:\n                ctx.set_options(asio::ssl::context::default_workarounds | asio::ssl::context::no_sslv2 | asio::ssl::context::single_dh_use);\n                break;\n            case tls_mode::MOZILLA_MODERN:\n                ctx.set_options(asio::ssl::context::default_workarounds | asio::ssl::context::no_sslv2 | asio::ssl::context::no_sslv3 | asio::ssl::context::single_dh_use);\n                break;\n        }\n\n        m_server->get_con_context(hdl)->set_ssl_context(ctx);\n    }\n\nprivate:\n    std::shared_ptr<websocketpp::server<websocketpp::config::asio_no_tls_client>> m_server;\n    std::string m_password;\n    void on_open(websocketpp::connection_hdl hdl) {\n        std::cout << \"Connection opened\" << std::endl;\n    }\n\n    void on_close(websocketpp::connection_hdl hdl) {\n        std::cout << \"Connection closed\" << std::endl;\n    }\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <asio.hpp>\n#include <iostream>\n#include <memory>\n#include <string>\n\nenum class tls_mode {\n    MOZILLA_INTERMEDIATE,\n    MOZILLA_MODERN\n};\n\nclass WebSocketServer {\npublic:\n    WebSocketServer() {\n        m_server = std::make_shared<websocketpp::server<websocketpp::config::asio_no_tls_client>>();\n        m_server->init_asio();\n        m_server->set_access_channels(websocketpp::log::alevel::all);\n        m_server->clear_access_channels(websocketpp::log::alevel::frame_payload);\n        m_server->set_open_handler(&WebSocketServer::on_open, this);\n        m_server->set_close_handler(&WebSocketServer::on_close, this);\n        m_server->set_message_handler(&WebSocketServer::on_message, this);\n        m_server->set_http_handler(&WebSocketServer::on_http, this);\n    }\n\n    void run(int port) {\n        m_server->set_reuse_address(true);\n        m_server->listen(port);\n        m_server->start_accept();\n        m_server->run();\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, message_ptr msg) {\n        m_server->send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    void on_http(websocketpp::connection_hdl hdl) {\n        m_server->send(hdl, \"HTTP/1.1 200 OK\\r\\nContent-Type: text/plain\\r\\n\\r\\nHello World!\", websocketpp::frame::opcode::text);\n    }\n\n    std::string get_password() const {\n        return \"your_tls_certificate_password\";\n    }\n\n    void on_tls_init(tls_mode mode, websocketpp::connection_hdl hdl) {\n        auto context = m_server->get_context();\n        context->set_options(websocketpp::openssl::context::options::no_sslv2);\n        context->use_certificate_chain_file(\"your_certificate.pem\");\n        context->use_private_key_file(\"your_private_key.pem\", ssl::context::pem);\n        context->use_tmp_dh_file(\"dh2048.pem\");\n        if (mode == tls_mode::MOZILLA_INTERMEDIATE) {\n            context->set_verify_mode(ssl::context::verify_peer);\n        } else if (mode == tls_mode::MOZILLA_MODERN) {\n            context->set_verify_mode(ssl::context::verify_peer | ssl::context::verify_fail_if_no_peer_cert);\n        }\n    }\n\nprivate:\n    std::shared_ptr<websocketpp::server<websocketpp::config::asio_no_tls_client>> m_server;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <asio.hpp>\n#include <iostream>\n\nenum class tls_mode {\n    MOZILLA_INTERMEDIATE,\n    MOZILLA_MODERN\n};\n\nclass WebSocketServer {\npublic:\n    WebSocketServer() {\n        m_server = websocketpp::server<websocketpp::config::asio_no_tls_client>::instance();\n        m_server.init_asio();\n        m_server.set_access_channels(websocketpp::log::alevel::all);\n        m_server.clear_access_channels(websocketpp::log::alevel::frame_payload);\n        m_server.set_open_handler(&WebSocketServer::on_open, this);\n        m_server.set_close_handler(&WebSocketServer::on_close, this);\n        m_server.set_message_handler(&WebSocketServer::on_message, this);\n        m_server.set_http_handler(&WebSocketServer::on_http, this);\n    }\n\n    void run(int port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    void on_open(websocketpp::connection_hdl hdl) {\n        std::cout << \"Connection opened\" << std::endl;\n    }\n\n    void on_close(websocketpp::connection_hdl hdl) {\n        std::cout << \"Connection closed\" << std::endl;\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, message_ptr msg) {\n        m_server.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    void on_http(websocketpp::connection_hdl hdl) {\n        m_server.send(hdl, \"HTTP/1.1 200 OK\\r\\nContent-Type: text/plain\\r\\n\\r\\nHello World!\", websocketpp::frame::opcode::text);\n    }\n\n    std::string get_password() {\n        return \"your_tls_certificate_password\";\n    }\n\n    void on_tls_init(tls_mode mode, websocketpp::connection_hdl hdl) {\n        asio::ssl::context ctx;\n        switch (mode) {\n            case tls_mode::MOZILLA_INTERMEDIATE:\n                ctx.set_options(asio::ssl::context::default_workarounds | asio::ssl::context::no_sslv2 | asio::ssl::context::single_dh_use);\n                break;\n            case tls_mode::MOZILLA_MODERN:\n                ctx.set_options(asio::ssl::context::default_workarounds | asio::ssl::context::no_sslv2 | asio::ssl::context::no_sslv3 | asio::ssl::context::single_dh_use);\n                break;\n        }\n        ctx.set_password_callback([this](std::size_t, std::size_t, std::string*) {\n            return get_password();\n        });\n        // Additional configuration for ctx can be added here\n    }\n\n    websocketpp::server<websocketpp::config::asio_no_tls_client> m_server;\n};\n```"
    ],
    "unmatched_results": [
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <asio.hpp>\n#include <iostream>\n#include <memory>\n#include <string>\n\nenum class tls_mode {\n    MOZILLA_INTERMEDIATE,\n    MOZILLA_MODERN\n};\n\nclass WebSocketServer {\npublic:\n    WebSocketServer() {\n        m_server = std::make_shared<websocketpp::server<websocketpp::config::asio_no_tls_client>>();\n        m_server->init_asio();\n        m_server->set_access_channels(websocketpp::log::alevel::all);\n        m_server->clear_access_channels(websocketpp::log::alevel::frame_payload);\n        m_server->set_open_handler(&WebSocketServer::on_open, this);\n        m_server->set_close_handler(&WebSocketServer::on_close, this);\n        m_server->set_message_handler(&WebSocketServer::on_message, this);\n        m_server->set_http_handler(&WebSocketServer::on_http, this);\n    }\n\n    void run(int port) {\n        m_server->set_address(\"0.0.0.0:\" + std::to_string(port));\n        m_server->start_accept();\n        m_server->run();\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, message_ptr msg) {\n        m_server->send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    void on_http(websocketpp::connection_hdl hdl) {\n        m_server->send(hdl, \"HTTP/1.1 200 OK\\r\\nContent-Type: text/plain\\r\\n\\r\\nHello World!\", websocketpp::frame::opcode::text);\n    }\n\n    std::string get_password() const {\n        return \"your_tls_certificate_password\";\n    }\n\n    void on_tls_init(tls_mode mode, websocketpp::connection_hdl hdl) {\n        auto context = m_server->get_context();\n        context->set_options(websocketpp::openssl::context::options::no_sslv2);\n        context->use_certificate_chain_file(\"your_certificate.pem\");\n        context->use_private_key_file(\"your_private_key.pem\", ssl::context::pem);\n        context->use_password(get_password());\n        if (mode == tls_mode::MOZILLA_INTERMEDIATE) {\n            context->set_verify_mode(ssl::context::verify_peer);\n        } else if (mode == tls_mode::MOZILLA_MODERN) {\n            context->set_verify_mode(ssl::context::verify_peer | ssl::context::verify_fail_if_no_peer_cert);\n        }\n    }\n\nprivate:\n    std::shared_ptr<websocketpp::server<websocketpp::config::asio_no_tls_client>> m_server;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <asio.hpp>\n#include <iostream>\n#include <memory>\n#include <string>\n\nenum class tls_mode {\n    MOZILLA_INTERMEDIATE,\n    MOZILLA_MODERN\n};\n\nclass WebSocketServer {\npublic:\n    WebSocketServer() {\n        m_server = std::make_shared<websocketpp::server<websocketpp::config::asio_no_tls_client>>();\n        m_server->init_asio();\n        m_server->set_access_channels(websocketpp::log::alevel::all);\n        m_server->clear_access_channels(websocketpp::log::alevel::frame_payload);\n        m_server->set_open_handler(&WebSocketServer::on_open, this);\n        m_server->set_message_handler(&WebSocketServer::on_message, this);\n        m_server->set_close_handler(&WebSocketServer::on_close, this);\n        m_server->set_http_handler(&WebSocketServer::on_http, this);\n    }\n\n    void run(int port) {\n        m_server->set_address(\"0.0.0.0:\" + std::to_string(port));\n        m_server->start_accept();\n        m_server->run();\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, message_ptr msg) {\n        m_server->send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    void on_http(websocketpp::connection_hdl hdl) {\n        m_server->send(hdl, \"HTTP/1.1 200 OK\\r\\nContent-Type: text/plain\\r\\n\\r\\nHello World!\", websocketpp::frame::opcode::text);\n    }\n\n    std::string get_password() const {\n        return \"your_tls_certificate_password\";\n    }\n\n    void on_tls_init(tls_mode mode, websocketpp::connection_hdl hdl) {\n        auto context = m_server->get_context();\n        context->set_options(websocketpp::openssl::context::options::no_sslv2);\n        context->use_certificate_chain_file(\"your_certificate.pem\");\n        context->use_private_key_file(\"your_private_key.pem\", ssl::context::pem);\n        context->use_tmp_dh_file(\"dh2048.pem\");\n        if (mode == tls_mode::MOZILLA_INTERMEDIATE) {\n            context->set_verify_mode(ssl::context::verify_peer | ssl::context::verify_fail_if_no_peer_cert);\n        } else if (mode == tls_mode::MOZILLA_MODERN) {\n            context->set_verify_mode(ssl::context::verify_peer | ssl::context::verify_fail_if_no_peer_cert);\n            context->set_verify_depth(1);\n        }\n    }\n\nprivate:\n    std::shared_ptr<websocketpp::server<websocketpp::config::asio_no_tls_client>> m_server;\n    void on_open(websocketpp::connection_hdl hdl) {\n        std::cout << \"Connection opened\" << std::endl;\n    }\n\n    void on_close(websocketpp::connection_hdl hdl) {\n        std::cout << \"Connection closed\" << std::endl;\n    }\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <asio.hpp>\n#include <iostream>\n#include <memory>\n#include <string>\n\nenum class tls_mode {\n    MOZILLA_INTERMEDIATE,\n    MOZILLA_MODERN\n};\n\nclass WebSocketServer {\npublic:\n    WebSocketServer() {\n        m_server = std::make_shared<websocketpp::server<websocketpp::config::asio_no_tls_client>>();\n        m_server->init_asio();\n        m_server->set_access_channels(websocketpp::log::alevel::all);\n        m_server->clear_access_channels(websocketpp::log::alevel::frame_payload);\n        m_server->set_open_handler(&WebSocketServer::on_open, this);\n        m_server->set_message_handler(&WebSocketServer::on_message, this);\n        m_server->set_close_handler(&WebSocketServer::on_close, this);\n        m_server->set_http_handler(&WebSocketServer::on_http, this);\n    }\n\n    void run(int port) {\n        m_server->set_address(\"0.0.0.0:\" + std::to_string(port));\n        m_server->start_accept();\n        m_server->run();\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, message_ptr msg) {\n        m_server->send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    void on_http(websocketpp::connection_hdl hdl) {\n        m_server->send(hdl, \"HTTP/1.1 200 OK\\r\\nContent-Type: text/plain\\r\\n\\r\\nHello World!\", websocketpp::frame::opcode::text);\n    }\n\n    std::string get_password() const {\n        return \"password\";\n    }\n\n    void on_tls_init(tls_mode mode, websocketpp::connection_hdl hdl) {\n        auto context = m_server->get_context();\n        context->set_options(websocketpp::openssl::context::options::no_sslv2);\n        context->use_certificate_chain_file(\"cert.pem\");\n        context->use_private_key_file(\"key.pem\", ssl::context::pem);\n        context->use_password(get_password());\n        if (mode == tls_mode::MOZILLA_INTERMEDIATE) {\n            context->set_verify_mode(ssl::context::verify_peer);\n        } else if (mode == tls_mode::MOZILLA_MODERN) {\n            context->set_verify_mode(ssl::context::verify_peer | ssl::context::verify_fail_if_no_peer_cert);\n        }\n    }\n\nprivate:\n    std::shared_ptr<websocketpp::server<websocketpp::config::asio_no_tls_client>> m_server;\n    websocketpp::lib::shared_ptr<ssl::context> m_context;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <asio.hpp>\n#include <iostream>\n#include <memory>\n#include <string>\n\nenum class tls_mode {\n    MOZILLA_INTERMEDIATE,\n    MOZILLA_MODERN\n};\n\nclass WebSocketServer {\nprivate:\n    websocketpp::server<websocketpp::config::asio_no_tls_client> m_server;\n    tls_mode tls_mode;\n\npublic:\n    WebSocketServer() {\n        m_server.set_access_channels(websocketpp::log::alevel::all);\n        m_server.clear_access_channels(websocketpp::log::alevel::frame_payload);\n        m_server.set_open_handler(&WebSocketServer::on_open, this);\n        m_server.set_close_handler(&WebSocketServer::on_close, this);\n        m_server.set_message_handler(&WebSocketServer::on_message, this);\n        m_server.set_http_handler(&WebSocketServer::on_http, this);\n    }\n\n    void run(int port) {\n        asio::io_service io_service;\n        m_server.init_asio(&io_service);\n        m_server.listen(asio::ip::tcp::endpoint(asio::ip::tcp::v4(), port));\n        m_server.start_accept();\n        io_service.run();\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, message_ptr msg) {\n        m_server.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    void on_http(websocketpp::connection_hdl hdl) {\n        m_server.send(hdl, \"HTTP/1.1 200 OK\\r\\nContent-Type: text/plain\\r\\n\\r\\nHello World!\", websocketpp::frame::opcode::text);\n    }\n\n    std::string get_password() const {\n        return \"your_tls_certificate_password\";\n    }\n\n    void on_tls_init(tls_mode mode, websocketpp::connection_hdl hdl) {\n        websocketpp::lib::ssl::context_ptr ctx = websocketpp::lib::ssl::context::sslv23();\n        switch (mode) {\n            case tls_mode::MOZILLA_INTERMEDIATE:\n                ctx->set_options(websocketpp::lib::ssl::context::default_workarounds() |\n                                 websocketpp::lib::ssl::context::no_sslv2() |\n                                 websocketpp::lib::ssl::context::single_dh_use());\n                break;\n            case tls_mode::MOZILLA_MODERN:\n                ctx->set_options(websocketpp::lib::ssl::context::default_workarounds() |\n                                 websocketpp::lib::ssl::context::no_sslv2() |\n                                 websocketpp::lib::ssl::context::single_dh_use() |\n                                 websocketpp::lib::ssl::context::no_compression());\n                break;\n        }\n        ctx->use_certificate_chain_file(\"your_certificate.pem\");\n        ctx->use_private_key_file(\"your_private_key.pem\", websocketpp::lib::ssl::context::pem);\n        ctx->use_tmp_dh_file(\"dh2048.pem\");\n        ctx->set_password_callback([this](std::size_t, std::size_t) { return get_password(); });\n        m_server.set_tls_init_handler([&](websocketpp::connection_hdl hdl) { return ctx; }, hdl);\n    }\n\nprivate:\n    void on_open(websocketpp::connection_hdl hdl) {\n        std::cout << \"Connection opened\" << std::endl;\n    }\n\n    void on_close(websocketpp::connection_hdl hdl) {\n        std::cout << \"Connection closed\" << std::endl;\n    }\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <boost/asio.hpp>\n#include <iostream>\n#include <memory>\n\nenum class tls_mode {\n    MOZILLA_INTERMEDIATE,\n    MOZILLA_MODERN\n};\n\nclass WebSocketServer {\npublic:\n    WebSocketServer() {\n        m_server = std::make_shared<websocketpp::server<websocketpp::config::asio_no_tls_client>>();\n        m_server->init_asio();\n        m_server->set_access_channels(websocketpp::log::alevel::all);\n        m_server->clear_access_channels(websocketpp::log::alevel::frame_payload);\n        m_server->set_open_handler(&WebSocketServer::on_open, this);\n        m_server->set_close_handler(&WebSocketServer::on_close, this);\n        m_server->set_message_handler(&WebSocketServer::on_message, this);\n        m_server->set_http_handler(&WebSocketServer::on_http, this);\n    }\n\n    void run(int port) {\n        m_server->set_address(\"0.0.0.0:\" + std::to_string(port));\n        m_server->start_accept();\n        m_server->run();\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, message_ptr msg) {\n        m_server->send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    void on_http(websocketpp::connection_hdl hdl) {\n        m_server->send(hdl, \"HTTP/1.1 200 OK\\r\\nContent-Type: text/plain\\r\\n\\r\\nHello World!\");\n    }\n\n    std::string get_password() const {\n        return m_password;\n    }\n\n    void on_tls_init(tls_mode mode, websocketpp::connection_hdl hdl) {\n        boost::asio::ssl::context ctx(tls_mode_to_context(mode));\n        ctx.set_options(boost::asio::ssl::context::default_workarounds | boost::asio::ssl::context::no_sslv2 | boost::asio::ssl::context::single_dh_use);\n        ctx.use_certificate_chain_file(\"path/to/certificate.pem\");\n        ctx.use_private_key_file(\"path/to/private_key.pem\", boost::asio::ssl::context::pem);\n        ctx.use_tmp_dh_file(\"path/to/dh2048.pem\");\n        ctx.set_password_callback([this](std::size_t, boost::asio::ssl::context_base::password_purpose) {\n            return get_password();\n        });\n        m_server->set_tls_init_handler([&ctx, &hdl](websocketpp::connection_hdl hdl) {\n            return std::make_shared<boost::asio::ssl::context>(ctx);\n        });\n    }\n\nprivate:\n    std::shared_ptr<websocketpp::server<websocketpp::config::asio_no_tls_client>> m_server;\n    std::string m_password;\n\n    static void on_open(websocketpp::connection_hdl hdl) {\n        std::cout << \"Connection opened\" << std::endl;\n    }\n\n    static void on_close(websocketpp::connection_hdl hdl) {\n        std::cout << \"Connection closed\" << std::endl;\n    }\n\n    static void tls_mode_to_context(tls_mode mode) {\n        switch (mode) {\n            case tls_mode::MOZILLA_INTERMEDIATE:\n                return boost::asio::ssl::context::mozilla_intermediate;\n            case tls_mode::MOZILLA_MODERN:\n                return boost::asio::ssl::context::mozilla_modern;\n            default:\n                return boost::asio::ssl::context::default_context;\n        }\n    }\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <asio.hpp>\n#include <iostream>\n#include <memory>\n#include <string>\n\nenum class tls_mode {\n    MOZILLA_INTERMEDIATE,\n    MOZILLA_MODERN\n};\n\nclass WebSocketServer {\npublic:\n    WebSocketServer() {\n        m_server = std::make_shared<websocketpp::server<websocketpp::config::asio_no_tls_client>>();\n        m_server->init_asio();\n        m_server->set_access_channels(websocketpp::log::alevel::all);\n        m_server->clear_access_channels(websocketpp::log::alevel::frame_payload);\n        m_server->set_open_handler(&WebSocketServer::on_open, this);\n        m_server->set_message_handler(&WebSocketServer::on_message, this);\n        m_server->set_close_handler(&WebSocketServer::on_close, this);\n        m_server->set_http_handler(&WebSocketServer::on_http, this);\n    }\n\n    void run(int port) {\n        m_server->set_address(\"0.0.0.0:\" + std::to_string(port));\n        m_server->start_accept();\n        m_server->run();\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, message_ptr msg) {\n        m_server->send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    void on_http(websocketpp::connection_hdl hdl) {\n        m_server->send(hdl, \"HTTP/1.1 200 OK\\r\\nContent-Type: text/plain\\r\\n\\r\\nHello World!\", websocketpp::frame::opcode::text);\n    }\n\n    std::string get_password() const {\n        return \"your_tls_certificate_password\";\n    }\n\n    void on_tls_init(tls_mode mode, websocketpp::connection_hdl hdl) {\n        auto context = m_server->get_context();\n        context->set_options(websocketpp::openssl::context::options::no_sslv2);\n        context->use_certificate_chain_file(\"your_certificate.pem\");\n        context->use_private_key_file(\"your_private_key.pem\", ssl::context::pem);\n        context->use_tmp_dh_file(\"dh2048.pem\");\n        if (mode == tls_mode::MOZILLA_INTERMEDIATE) {\n            context->set_verify_mode(ssl::context::verify_peer | ssl::context::verify_fail_if_no_peer_cert);\n        } else if (mode == tls_mode::MOZILLA_MODERN) {\n            context->set_verify_mode(ssl::context::verify_peer | ssl::context::verify_fail_if_no_peer_cert);\n            context->set_verify_depth(1);\n        }\n    }\n\nprivate:\n    std::shared_ptr<websocketpp::server<websocketpp::config::asio_no_tls_client>> m_server;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <asio.hpp>\n#include <iostream>\n#include <memory>\n#include <string>\n\nenum class tls_mode {\n    MOZILLA_INTERMEDIATE,\n    MOZILLA_MODERN\n};\n\nclass WebSocketServer {\npublic:\n    WebSocketServer() {\n        m_server = std::make_shared<websocketpp::server<websocketpp::config::asio_no_tls_client>>();\n        m_server->init_asio();\n        m_server->set_access_channels(websocketpp::log::alevel::all);\n        m_server->clear_access_channels(websocketpp::log::alevel::frame_payload);\n        m_server->set_open_handler(&WebSocketServer::on_open, this);\n        m_server->set_message_handler(&WebSocketServer::on_message, this);\n        m_server->set_close_handler(&WebSocketServer::on_close, this);\n        m_server->set_http_handler(&WebSocketServer::on_http, this);\n    }\n\n    void run(int port) {\n        m_server->set_address(\"0.0.0.0:\" + std::to_string(port));\n        m_server->start_accept();\n        m_server->run();\n    }\n\n    void on_message(websocketpp::connection_hdl hdl, message_ptr msg) {\n        m_server->send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n\n    void on_http(websocketpp::connection_hdl hdl) {\n        m_server->send(hdl, \"HTTP/1.1 200 OK\\r\\nContent-Type: text/plain\\r\\n\\r\\nHello World!\", websocketpp::frame::opcode::text);\n    }\n\n    std::string get_password() const {\n        return \"your_tls_certificate_password\";\n    }\n\n    void on_tls_init(tls_mode mode, websocketpp::connection_hdl hdl) {\n        auto context = m_server->get_context();\n        context->set_options(websocketpp::openssl::context::options::no_sslv2);\n        context->use_certificate_chain_file(\"your_certificate.pem\");\n        context->use_private_key_file(\"your_private_key.pem\", ssl::context::pem);\n        context->use_password(get_password());\n        if (mode == tls_mode::MOZILLA_INTERMEDIATE) {\n            context->set_verify_mode(ssl::context::verify_peer);\n        } else if (mode == tls_mode::MOZILLA_MODERN) {\n            context->set_verify_mode(ssl::context::verify_peer | ssl::context::verify_fail_if_no_peer_cert);\n        }\n    }\n\nprivate:\n    std::shared_ptr<websocketpp::server<websocketpp::config::asio_no_tls_client>> m_server;\n};\n```"
    ],
    "match_count": 3,
    "pass@3": 0.7083333333333333,
    "pass@5": 0.9166666666666666
  },
  {
    "Task_id": 49,
    "Instruction": "Task Description: Implement a WebSocket broadcast server in C++ using the WebSocket++ library that can handle multiple client connections, manage subscriptions, and broadcast messages to all connected clients.\n\nClass Description: The `broadcast_server` class implements a WebSocket server that maintains a set of active connections and can broadcast messages to all connected clients. It handles connection events (open/close) and message events using a thread-safe action queue system.\n\nAttributes:\n- m_server: [server] - WebSocket++ server instance configured with ASIO\n- m_connections: [con_list] - Set of active WebSocket connection handles\n- m_actions: [std::queue<action>] - Queue of pending actions to process\n- m_action_lock: [mutex] - Mutex for protecting access to the action queue\n- m_connection_lock: [mutex] - Mutex for protecting access to the connections set\n- m_action_cond: [condition_variable] - Condition variable for action queue notification\n\nMethods:\n- broadcast_server() -> [constructor] - Initializes the WebSocket server and sets up event handlers\n- run(uint16_t port) -> [void] - Starts the server listening on the specified port and begins accepting connections\n- on_open(connection_hdl hdl) -> [void] - Handler for new WebSocket connections (adds SUBSCRIBE action)\n- on_close(connection_hdl hdl) -> [void] - Handler for closed WebSocket connections (adds UNSUBSCRIBE action)\n- on_message(connection_hdl hdl, server::message_ptr msg) -> [void] - Handler for incoming messages (adds MESSAGE action)\n- process_messages() -> [void] - Processes actions from the queue (manages subscriptions and broadcasts messages)",
    "Canonical_solution": "#include <websocketpp/config/asio_no_tls.hpp>\n#include <websocketpp/server.hpp>\n#include <websocketpp/common/thread.hpp>\n#include <iostream>\n#include <set>\n\ntypedef websocketpp::server<websocketpp::config::asio> server;\nusing websocketpp::connection_hdl;\nusing websocketpp::lib::placeholders::_1;\nusing websocketpp::lib::placeholders::_2;\nusing websocketpp::lib::bind;\nusing websocketpp::lib::thread;\nusing websocketpp::lib::mutex;\nusing websocketpp::lib::lock_guard;\nusing websocketpp::lib::unique_lock;\nusing websocketpp::lib::condition_variable;\n\nenum action_type {\n    SUBSCRIBE,\n    UNSUBSCRIBE,\n    MESSAGE\n};\n\nstruct action {\n    action(action_type t, connection_hdl h) : type(t), hdl(h) {}\n    action(action_type t, connection_hdl h, server::message_ptr m)\n      : type(t), hdl(h), msg(m) {}\n\n    action_type type;\n    websocketpp::connection_hdl hdl;\n    server::message_ptr msg;\n};\n\nclass broadcast_server {\npublic:\n    broadcast_server() {\n        m_server.init_asio();\n        m_server.set_open_handler(bind(&broadcast_server::on_open,this,::_1));\n        m_server.set_close_handler(bind(&broadcast_server::on_close,this,::_1));\n        m_server.set_message_handler(bind(&broadcast_server::on_message,this,::_1,::_2));\n    }\n\n    void run(uint16_t port) {\n        m_server.listen(port);\n        m_server.start_accept();\n        try {\n            m_server.run();\n        } catch (const std::exception & e) {\n            std::cout << e.what() << std::endl;\n        }\n    }\n\n    void on_open(connection_hdl hdl) {\n        {\n            lock_guard<mutex> guard(m_action_lock);\n            m_actions.push(action(SUBSCRIBE,hdl));\n        }\n        m_action_cond.notify_one();\n    }\n\n    void on_close(connection_hdl hdl) {\n        {\n            lock_guard<mutex> guard(m_action_lock);\n            m_actions.push(action(UNSUBSCRIBE,hdl));\n        }\n        m_action_cond.notify_one();\n    }\n\n    void on_message(connection_hdl hdl, server::message_ptr msg) {\n        {\n            lock_guard<mutex> guard(m_action_lock);\n            m_actions.push(action(MESSAGE,hdl,msg));\n        }\n        m_action_cond.notify_one();\n    }\n\n    void process_messages() {\n        while(1) {\n            unique_lock<mutex> lock(m_action_lock);\n            while(m_actions.empty()) {\n                m_action_cond.wait(lock);\n            }\n\n            action a = m_actions.front();\n            m_actions.pop();\n            lock.unlock();\n\n            if (a.type == SUBSCRIBE) {\n                lock_guard<mutex> guard(m_connection_lock);\n                m_connections.insert(a.hdl);\n            } else if (a.type == UNSUBSCRIBE) {\n                lock_guard<mutex> guard(m_connection_lock);\n                m_connections.erase(a.hdl);\n            } else if (a.type == MESSAGE) {\n                lock_guard<mutex> guard(m_connection_lock);\n                con_list::iterator it;\n                for (it = m_connections.begin(); it != m_connections.end(); ++it) {\n                    m_server.send(*it,a.msg);\n                }\n            }\n        }\n    }\n\nprivate:\n    typedef std::set<connection_hdl,std::owner_less<connection_hdl> > con_list;\n    server m_server;\n    con_list m_connections;\n    std::queue<action> m_actions;\n    mutex m_action_lock;\n    mutex m_connection_lock;\n    condition_variable m_action_cond;\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 154,
    "matched_results": [
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <set>\n#include <queue>\n#include <mutex>\n#include <condition_variable>\n#include <functional>\n#include <thread>\n#include <atomic>\n\nnamespace websocketpp {\n    namespace server {\n        class connection_hdl;\n    }\n}\n\nclass action {\npublic:\n    enum type {\n        SUBSCRIBE,\n        UNSUBSCRIBE,\n        MESSAGE\n    };\n\n    type action_type;\n    websocketpp::server::connection_hdl connection_hdl;\n    std::string message;\n\n    action(type action_type, websocketpp::server::connection_hdl connection_hdl, std::string message)\n        : action_type(action_type), connection_hdl(connection_hdl), message(std::move(message)) {}\n};\n\nclass broadcast_server {\nprivate:\n    websocketpp::server<websocketpp::config::asio_no_tls_client> m_server;\n    std::set<websocketpp::server::connection_hdl> m_connections;\n    std::queue<action> m_actions;\n    std::mutex m_action_lock;\n    std::mutex m_connection_lock;\n    std::condition_variable m_action_cond;\n    std::atomic<bool> m_running;\n\npublic:\n    broadcast_server() : m_running(false) {}\n\n    void run(uint16_t port) {\n        m_server.init_asio();\n        m_server.set_access_channels(websocketpp::log::alevel::all);\n        m_server.clear_access_channels(websocketpp::log::alevel::frame_payload);\n        m_server.set_open_handler(std::bind(&broadcast_server::on_open, this, std::placeholders::_1));\n        m_server.set_close_handler(std::bind(&broadcast_server::on_close, this, std::placeholders::_1));\n        m_server.set_message_handler(std::bind(&broadcast_server::on_message, this, std::placeholders::_1, std::placeholders::_2));\n        m_server.listen(port);\n        m_server.start_accept();\n        m_running = true;\n        std::thread worker([this]() { process_messages(); });\n        worker.detach();\n    }\n\n    void on_open(websocketpp::server::connection_hdl hdl) {\n        std::lock_guard<std::mutex> lock(m_connection_lock);\n        m_connections.insert(hdl);\n        m_actions.emplace(action(action::SUBSCRIBE, hdl, \"\"));\n    }\n\n    void on_close(websocketpp::server::connection_hdl hdl) {\n        std::lock_guard<std::mutex> lock(m_connection_lock);\n        m_connections.erase(hdl);\n        m_actions.emplace(action(action::UNSUBSCRIBE, hdl, \"\"));\n    }\n\n    void on_message(websocketpp::server::connection_hdl hdl, server::message_ptr msg) {\n        std::lock_guard<std::mutex> lock(m_connection_lock);\n        m_actions.emplace(action(action::MESSAGE, hdl, msg->get_payload()));\n    }\n\n    void process_messages() {\n        while (m_running) {\n            action action_to_process;\n            {\n                std::unique_lock<std::mutex> lock(m_action_lock);\n                m_action_cond.wait(lock, [this]() { return !m_actions.empty() || !m_running; });\n                if (!m_actions.empty()) {\n                    action_to_process = m_actions.front();\n                    m_actions.pop();\n                }\n            }\n            if (action_to_process.action_type == action::SUBSCRIBE) {\n                // Add to subscription list\n            } else if (action_to_process.action_type == action::UNSUBSCRIBE) {\n                // Remove from subscription list\n            } else if (action_to_process.action_type == action::MESSAGE) {\n                // Broadcast message to all connected clients\n            }\n        }\n    }\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <set>\n#include <queue>\n#include <mutex>\n#include <condition_variable>\n#include <thread>\n#include <functional>\n#include <atomic>\n\nnamespace websocketpp {\n    namespace server {\n        class connection_hdl;\n    }\n}\n\nclass broadcast_server {\npublic:\n    broadcast_server() : m_server(), m_connections(), m_actions(), m_action_lock(), m_connection_lock(), m_action_cond() {}\n\n    void run(uint16_t port) {\n        m_server.set_access_channels(websocketpp::log::alevel::all);\n        m_server.clear_access_channels(websocketpp::log::alevel::frame_payload);\n        m_server.init_asio();\n        m_server.set_open_handler(std::bind(&broadcast_server::on_open, this, std::placeholders::_1));\n        m_server.set_close_handler(std::bind(&broadcast_server::on_close, this, std::placeholders::_1));\n        m_server.set_message_handler(std::bind(&broadcast_server::on_message, this, std::placeholders::_1, std::placeholders::_2));\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    void on_open(websocketpp::server::connection_hdl hdl) {\n        std::lock_guard<std::mutex> lock(m_connection_lock);\n        m_connections.insert(hdl);\n        m_actions.push(action{hdl, action_type::SUBSCRIBE});\n        m_action_cond.notify_one();\n    }\n\n    void on_close(websocketpp::server::connection_hdl hdl) {\n        std::lock_guard<std::mutex> lock(m_connection_lock);\n        m_connections.erase(hdl);\n        m_actions.push(action{hdl, action_type::UNSUBSCRIBE});\n        m_action_cond.notify_one();\n    }\n\n    void on_message(websocketpp::server::connection_hdl hdl, server::message_ptr msg) {\n        std::lock_guard<std::mutex> lock(m_connection_lock);\n        m_actions.push(action{hdl, action_type::MESSAGE, msg->get_payload()});\n        m_action_cond.notify_one();\n    }\n\n    void process_messages() {\n        while (true) {\n            std::unique_lock<std::mutex> lock(m_action_lock);\n            m_action_cond.wait(lock, [this]{ return !m_actions.empty(); });\n\n            while (!m_actions.empty()) {\n                action act = m_actions.front();\n                m_actions.pop();\n\n                lock.unlock();\n\n                switch (act.type) {\n                    case action_type::SUBSCRIBE:\n                        // Handle subscription\n                        break;\n                    case action_type::UNSUBSCRIBE:\n                        // Handle unsubscription\n                        break;\n                    case action_type::MESSAGE:\n                        // Handle message\n                        break;\n                }\n\n                lock.lock();\n            }\n        }\n    }\n\n    websocketpp::server<websocketpp::config::asio_no_tls_client> m_server;\n    std::set<websocketpp::server::connection_hdl> m_connections;\n    std::queue<action> m_actions;\n    std::mutex m_action_lock;\n    std::mutex m_connection_lock;\n    std::condition_variable m_action_cond;\n\n    enum action_type {\n        SUBSCRIBE,\n        UNSUBSCRIBE,\n        MESSAGE\n    };\n\n    struct action {\n        websocketpp::server::connection_hdl hdl;\n        action_type type;\n        std::string payload;\n    };\n};\n```"
    ],
    "unmatched_results": [
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <set>\n#include <queue>\n#include <mutex>\n#include <condition_variable>\n#include <thread>\n#include <functional>\n#include <memory>\n\nnamespace websocketpp {\n    namespace server {\n        class connection_hdl;\n    }\n}\n\nclass broadcast_server {\npublic:\n    broadcast_server() {\n        m_server = std::make_shared<server<asio::ssl::context>>();\n        m_server->set_access_channels(websocketpp::log::alevel::all);\n        m_server->clear_access_channels(websocketpp::log::alevel::frame_payload);\n        m_server->init_asio();\n        m_server->start_accept();\n        m_server->set_open_handler(&broadcast_server::on_open, this);\n        m_server->set_close_handler(&broadcast_server::on_close, this);\n        m_server->set_message_handler(&broadcast_server::on_message, this);\n    }\n\n    void run(uint16_t port) {\n        m_server->set_local_endpoint(asio::ip::tcp::endpoint(asio::ip::make_address(\"127.0.0.1\"), port));\n        m_server->run();\n    }\n\nprivate:\n    void on_open(websocketpp::server::connection_hdl hdl) {\n        m_connections.insert(hdl);\n        m_actions.push(action{hdl, action_type::SUBSCRIBE});\n        m_action_cond.notify_one();\n    }\n\n    void on_close(websocketpp::server::connection_hdl hdl) {\n        m_connections.erase(hdl);\n        m_actions.push(action{hdl, action_type::UNSUBSCRIBE});\n        m_action_cond.notify_one();\n    }\n\n    void on_message(websocketpp::server::connection_hdl hdl, server::message_ptr msg) {\n        m_actions.push(action{hdl, action_type::MESSAGE, msg});\n        m_action_cond.notify_one();\n    }\n\n    void process_messages() {\n        while (true) {\n            std::unique_lock<std::mutex> lock(m_action_lock);\n            m_action_cond.wait(lock, [this]{ return !m_actions.empty(); });\n\n            while (!m_actions.empty()) {\n                action act = m_actions.front();\n                m_actions.pop();\n\n                lock.unlock();\n\n                switch (act.type) {\n                    case action_type::SUBSCRIBE:\n                        // Handle subscription\n                        break;\n                    case action_type::UNSUBSCRIBE:\n                        // Handle unsubscription\n                        break;\n                    case action_type::MESSAGE:\n                        // Handle message\n                        break;\n                }\n\n                lock.lock();\n            }\n        }\n    }\n\nprivate:\n    typedef websocketpp::server<asio::ssl::context> server;\n    typedef websocketpp::server::connection_hdl connection_hdl;\n    typedef websocketpp::server::message_ptr message_ptr;\n    typedef std::set<connection_hdl> con_list;\n    typedef std::queue<action> action_queue;\n    typedef std::mutex mutex;\n    typedef std::condition_variable condition_variable;\n\n    server::ptr m_server;\n    con_list m_connections;\n    action_queue m_actions;\n    mutex m_action_lock;\n    mutex m_connection_lock;\n    condition_variable m_action_cond;\n\n    enum action_type {\n        SUBSCRIBE,\n        UNSUBSCRIBE,\n        MESSAGE\n    };\n\n    struct action {\n        connection_hdl hdl;\n        action_type type;\n        message_ptr msg;\n    };\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <set>\n#include <queue>\n#include <mutex>\n#include <condition_variable>\n#include <thread>\n#include <functional>\n\nnamespace websocketpp {\n    namespace server {\n        class connection_hdl;\n    }\n}\n\nclass broadcast_server {\nprivate:\n    websocketpp::server<websocketpp::config::asio_no_tls_client> m_server;\n    std::set<websocketpp::server::connection_hdl> m_connections;\n    std::queue<std::function<void()>> m_actions;\n    std::mutex m_action_lock;\n    std::mutex m_connection_lock;\n    std::condition_variable m_action_cond;\n\npublic:\n    broadcast_server() {\n        m_server.set_access_channels(websocketpp::log::alevel::all);\n        m_server.clear_access_channels(websocketpp::log::alevel::frame_payload);\n        m_server.set_open_handler(&broadcast_server::on_open, *this);\n        m_server.set_close_handler(&broadcast_server::on_close, *this);\n        m_server.set_message_handler(&broadcast_server::on_message, *this);\n    }\n\n    void run(uint16_t port) {\n        m_server.init_asio();\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\n    void on_open(websocketpp::server::connection_hdl hdl) {\n        std::lock_guard<std::mutex> lock(m_connection_lock);\n        m_connections.insert(hdl);\n        m_actions.push([hdl]() {\n            // Add SUBSCRIBE action\n        });\n        m_action_cond.notify_one();\n    }\n\n    void on_close(websocketpp::server::connection_hdl hdl) {\n        std::lock_guard<std::mutex> lock(m_connection_lock);\n        m_connections.erase(hdl);\n        m_actions.push([hdl]() {\n            // Add UNSUBSCRIBE action\n        });\n        m_action_cond.notify_one();\n    }\n\n    void on_message(websocketpp::server::connection_hdl hdl, server::message_ptr msg) {\n        std::lock_guard<std::mutex> lock(m_connection_lock);\n        m_actions.push([hdl, msg]() {\n            // Add MESSAGE action\n        });\n        m_action_cond.notify_one();\n    }\n\n    void process_messages() {\n        while (true) {\n            std::unique_lock<std::mutex> lock(m_action_lock);\n            m_action_cond.wait(lock, [this] { return !m_actions.empty(); });\n\n            while (!m_actions.empty()) {\n                auto action = m_actions.front();\n                m_actions.pop();\n                lock.unlock();\n                action();\n                lock.lock();\n            }\n        }\n    }\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <set>\n#include <queue>\n#include <mutex>\n#include <condition_variable>\n#include <thread>\n#include <functional>\n\nnamespace websocketpp {\n    namespace server {\n        class connection_hdl;\n    }\n}\n\nclass broadcast_server {\npublic:\n    broadcast_server() : m_server(), m_connections(), m_actions(), m_action_lock(), m_connection_lock(), m_action_cond() {\n        m_server.set_access_channels(websocketpp::log::alevel::all);\n        m_server.clear_access_channels(websocketpp::log::alevel::frame_payload);\n        m_server.set_open_handler(&broadcast_server::on_open, this);\n        m_server.set_close_handler(&broadcast_server::on_close, this);\n        m_server.set_message_handler(&broadcast_server::on_message, this);\n    }\n\n    void run(uint16_t port) {\n        m_server.init_asio();\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    void on_open(websocketpp::server::connection_hdl hdl) {\n        std::lock_guard<std::mutex> lock(m_connection_lock);\n        m_connections.insert(hdl);\n        m_actions.push(action{hdl, \"SUBSCRIBE\"});\n        m_action_cond.notify_one();\n    }\n\n    void on_close(websocketpp::server::connection_hdl hdl) {\n        std::lock_guard<std::mutex> lock(m_connection_lock);\n        m_connections.erase(hdl);\n        m_actions.push(action{hdl, \"UNSUBSCRIBE\"});\n        m_action_cond.notify_one();\n    }\n\n    void on_message(websocketpp::server::connection_hdl hdl, server::message_ptr msg) {\n        std::lock_guard<std::mutex> lock(m_connection_lock);\n        m_actions.push(action{hdl, \"MESSAGE\", msg->get_payload()});\n        m_action_cond.notify_one();\n    }\n\n    void process_messages() {\n        while (true) {\n            std::unique_lock<std::mutex> lock(m_action_lock);\n            m_action_cond.wait(lock, [this]{ return !m_actions.empty(); });\n\n            while (!m_actions.empty()) {\n                action act = m_actions.front();\n                m_actions.pop();\n\n                lock.unlock();\n\n                if (act.type == \"SUBSCRIBE\") {\n                    std::lock_guard<std::mutex> conn_lock(m_connection_lock);\n                    m_connections.insert(act_hdl);\n                } else if (act.type == \"UNSUBSCRIBE\") {\n                    std::lock_guard<std::mutex> conn_lock(m_connection_lock);\n                    m_connections.erase(act_hdl);\n                } else if (act.type == \"MESSAGE\") {\n                    for (auto it = m_connections.begin(); it != m_connections.end(); ++it) {\n                        m_server.send(*it, act.payload);\n                    }\n                }\n\n                lock.lock();\n            }\n        }\n    }\n\n    websocketpp::server<websocketpp::config::asio_no_tls_client> m_server;\n    std::set<websocketpp::server::connection_hdl> m_connections;\n    std::queue<action> m_actions;\n    std::mutex m_action_lock;\n    std::mutex m_connection_lock;\n    std::condition_variable m_action_cond;\n\n    struct action {\n        websocketpp::server::connection_hdl hdl;\n        std::string type;\n        std::string payload;\n    };\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <set>\n#include <queue>\n#include <mutex>\n#include <condition_variable>\n#include <thread>\n#include <functional>\n#include <atomic>\n\nnamespace websocketpp {\n    namespace server {\n        class connection_hdl;\n    }\n}\n\nclass broadcast_server {\npublic:\n    broadcast_server() : m_server(), m_connections(), m_actions(), m_action_lock(), m_connection_lock(), m_action_cond() {\n        m_server.set_access_channels(websocketpp::log::alevel::all);\n        m_server.clear_access_channels(websocketpp::log::alevel::frame_payload);\n        m_server.set_open_handler(&broadcast_server::on_open, this);\n        m_server.set_close_handler(&broadcast_server::on_close, this);\n        m_server.set_message_handler(&broadcast_server::on_message, this);\n    }\n\n    void run(uint16_t port) {\n        m_server.init_asio();\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    void on_open(websocketpp::server::connection_hdl hdl) {\n        std::lock_guard<std::mutex> lock(m_connection_lock);\n        m_connections.insert(hdl);\n        m_actions.push(action{hdl, action_type::SUBSCRIBE});\n        m_action_cond.notify_one();\n    }\n\n    void on_close(websocketpp::server::connection_hdl hdl) {\n        std::lock_guard<std::mutex> lock(m_connection_lock);\n        m_connections.erase(hdl);\n        m_actions.push(action{hdl, action_type::UNSUBSCRIBE});\n        m_action_cond.notify_one();\n    }\n\n    void on_message(websocketpp::server::connection_hdl hdl, server::message_ptr msg) {\n        std::lock_guard<std::mutex> lock(m_connection_lock);\n        m_actions.push(action{hdl, action_type::MESSAGE, msg->get_payload()});\n        m_action_cond.notify_one();\n    }\n\n    void process_messages() {\n        while (true) {\n            std::unique_lock<std::mutex> lock(m_action_lock);\n            m_action_cond.wait(lock, [this] { return !m_actions.empty(); });\n\n            while (!m_actions.empty()) {\n                action act = m_actions.front();\n                m_actions.pop();\n\n                lock.unlock();\n\n                switch (act.type) {\n                    case action_type::SUBSCRIBE:\n                        // Handle subscription logic\n                        break;\n                    case action_type::UNSUBSCRIBE:\n                        // Handle unsubscription logic\n                        break;\n                    case action_type::MESSAGE:\n                        // Handle message logic\n                        break;\n                }\n\n                lock.lock();\n            }\n        }\n    }\n\n    typedef websocketpp::server<websocketpp::config::asio_no_tls_client> server;\n    typedef websocketpp::server::connection_hdl connection_hdl;\n    typedef websocketpp::server::message_ptr message_ptr;\n    typedef std::set<connection_hdl> con_list;\n    typedef std::queue<action> action_queue;\n    typedef std::mutex mutex;\n    typedef std::condition_variable condition_variable;\n    typedef std::atomic<bool> atomic_bool;\n\n    server m_server;\n    con_list m_connections;\n    action_queue m_actions;\n    mutex m_action_lock;\n    mutex m_connection_lock;\n    condition_variable m_action_cond;\n\n    enum action_type {\n        SUBSCRIBE,\n        UNSUBSCRIBE,\n        MESSAGE\n    };\n\n    struct action {\n        connection_hdl hdl;\n        action_type type;\n        std::string payload;\n    };\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <set>\n#include <queue>\n#include <mutex>\n#include <condition_variable>\n#include <thread>\n#include <functional>\n\nnamespace websocketpp {\n    namespace server {\n        class connection_hdl;\n        class message_ptr;\n    }\n}\n\nclass broadcast_server {\nprivate:\n    websocketpp::server<websocketpp::config::asio_no_tls_client> m_server;\n    std::set<websocketpp::server::connection_hdl> m_connections;\n    std::queue<std::function<void()>> m_actions;\n    std::mutex m_action_lock;\n    std::mutex m_connection_lock;\n    std::condition_variable m_action_cond;\n\npublic:\n    broadcast_server() {\n        m_server.set_access_channels(websocketpp::log::alevel::all);\n        m_server.clear_access_channels(websocketpp::log::alevel::frame_payload);\n        m_server.set_open_handler(&broadcast_server::on_open, *this);\n        m_server.set_close_handler(&broadcast_server::on_close, *this);\n        m_server.set_message_handler(&broadcast_server::on_message, *this);\n    }\n\n    void run(uint16_t port) {\n        m_server.init_asio();\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\n    void on_open(websocketpp::server::connection_hdl hdl) {\n        std::lock_guard<std::mutex> lock(m_connection_lock);\n        m_connections.insert(hdl);\n        m_actions.push([hdl]() {\n            // Add SUBSCRIBE action\n        });\n        m_action_cond.notify_one();\n    }\n\n    void on_close(websocketpp::server::connection_hdl hdl) {\n        std::lock_guard<std::mutex> lock(m_connection_lock);\n        m_connections.erase(hdl);\n        m_actions.push([hdl]() {\n            // Add UNSUBSCRIBE action\n        });\n        m_action_cond.notify_one();\n    }\n\n    void on_message(websocketpp::server::connection_hdl hdl, websocketpp::server::message_ptr msg) {\n        std::lock_guard<std::mutex> lock(m_connection_lock);\n        m_actions.push([hdl, msg]() {\n            // Add MESSAGE action\n        });\n        m_action_cond.notify_one();\n    }\n\n    void process_messages() {\n        while (true) {\n            std::unique_lock<std::mutex> lock(m_action_lock);\n            m_action_cond.wait(lock, [this] { return !m_actions.empty(); });\n\n            while (!m_actions.empty()) {\n                auto action = m_actions.front();\n                m_actions.pop();\n                lock.unlock();\n                action();\n                lock.lock();\n            }\n        }\n    }\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <set>\n#include <queue>\n#include <mutex>\n#include <condition_variable>\n#include <thread>\n#include <functional>\n\nnamespace websocketpp {\n    namespace server {\n        class connection_hdl;\n    }\n}\n\nclass broadcast_server {\npublic:\n    broadcast_server() {\n        m_server = websocketpp::server<websocketpp::config::asio_no_tls_client>();\n        m_server.set_access_channels(websocketpp::log::alevel::all);\n        m_server.clear_access_channels(websocketpp::log::alevel::frame_payload);\n        m_server.set_open_handler(&broadcast_server::on_open, this);\n        m_server.set_close_handler(&broadcast_server::on_close, this);\n        m_server.set_message_handler(&broadcast_server::on_message, this);\n    }\n\n    void run(uint16_t port) {\n        m_server.init_asio();\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    void on_open(websocketpp::server::connection_hdl hdl) {\n        m_connections.insert(hdl);\n        m_actions.push(action{hdl, action_type::SUBSCRIBE});\n        m_action_cond.notify_one();\n    }\n\n    void on_close(websocketpp::server::connection_hdl hdl) {\n        m_connections.erase(hdl);\n        m_actions.push(action{hdl, action_type::UNSUBSCRIBE});\n        m_action_cond.notify_one();\n    }\n\n    void on_message(websocketpp::server::connection_hdl hdl, server::message_ptr msg) {\n        m_actions.push(action{hdl, action_type::MESSAGE, msg});\n        m_action_cond.notify_one();\n    }\n\n    void process_messages() {\n        while (true) {\n            std::unique_lock<std::mutex> lock(m_action_lock);\n            m_action_cond.wait(lock, [this]{ return !m_actions.empty(); });\n\n            while (!m_actions.empty()) {\n                action act = m_actions.front();\n                m_actions.pop();\n\n                lock.unlock();\n\n                switch (act.type) {\n                    case action_type::SUBSCRIBE:\n                        m_connections.insert(act.hdl);\n                        break;\n                    case action_type::UNSUBSCRIBE:\n                        m_connections.erase(act.hdl);\n                        break;\n                    case action_type::MESSAGE:\n                        for (auto it = m_connections.begin(); it != m_connections.end(); ++it) {\n                            if (it->lock().get() != act.hdl.lock().get()) {\n                                m_server.send(*it, act.msg->get_payload(), act.msg->get_opcode());\n                            }\n                        }\n                        break;\n                }\n\n                lock.lock();\n            }\n        }\n    }\n\n    websocketpp::server<websocketpp::config::asio_no_tls_client> m_server;\n    std::set<websocketpp::server::connection_hdl> m_connections;\n    std::queue<action> m_actions;\n    std::mutex m_action_lock;\n    std::mutex m_connection_lock;\n    std::condition_variable m_action_cond;\n\n    enum action_type {\n        SUBSCRIBE,\n        UNSUBSCRIBE,\n        MESSAGE\n    };\n\n    struct action {\n        websocketpp::server::connection_hdl hdl;\n        action_type type;\n        websocketpp::server::message_ptr msg;\n    };\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <set>\n#include <queue>\n#include <mutex>\n#include <condition_variable>\n#include <thread>\n#include <functional>\n\nnamespace websocketpp {\n    namespace server {\n        class connection_hdl;\n    }\n}\n\nclass broadcast_server {\npublic:\n    broadcast_server() : m_server(), m_connections(), m_actions(), m_action_lock(), m_connection_lock(), m_action_cond() {\n        m_server.set_access_channels(websocketpp::log::alevel::all);\n        m_server.clear_access_channels(websocketpp::log::alevel::frame_payload);\n        m_server.set_open_handler(&broadcast_server::on_open, this);\n        m_server.set_close_handler(&broadcast_server::on_close, this);\n        m_server.set_message_handler(&broadcast_server::on_message, this);\n    }\n\n    void run(uint16_t port) {\n        m_server.init_asio();\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\nprivate:\n    void on_open(websocketpp::server::connection_hdl hdl) {\n        std::lock_guard<std::mutex> lock(m_connection_lock);\n        m_connections.insert(hdl);\n        m_actions.push({action_type::SUBSCRIBE, hdl});\n        m_action_cond.notify_one();\n    }\n\n    void on_close(websocketpp::server::connection_hdl hdl) {\n        std::lock_guard<std::mutex> lock(m_connection_lock);\n        m_connections.erase(hdl);\n        m_actions.push({action_type::UNSUBSCRIBE, hdl});\n        m_action_cond.notify_one();\n    }\n\n    void on_message(websocketpp::server::connection_hdl hdl, server::message_ptr msg) {\n        std::lock_guard<std::mutex> lock(m_connection_lock);\n        m_actions.push({action_type::MESSAGE, hdl, msg});\n        m_action_cond.notify_one();\n    }\n\n    void process_messages() {\n        while (true) {\n            std::unique_lock<std::mutex> lock(m_action_lock);\n            m_action_cond.wait(lock, [this]{ return !m_actions.empty(); });\n\n            while (!m_actions.empty()) {\n                auto action = m_actions.front();\n                m_actions.pop();\n\n                switch (action.type) {\n                    case action_type::SUBSCRIBE:\n                        // Handle subscription logic\n                        break;\n                    case action_type::UNSUBSCRIBE:\n                        // Handle unsubscription logic\n                        break;\n                    case action_type::MESSAGE:\n                        // Handle message logic\n                        break;\n                }\n            }\n        }\n    }\n\n    websocketpp::server<websocketpp::config::asio_no_tls_client> m_server;\n    std::set<websocketpp::server::connection_hdl> m_connections;\n    std::queue<std::tuple<action_type, websocketpp::server::connection_hdl, websocketpp::server::message_ptr>> m_actions;\n    std::mutex m_action_lock;\n    std::mutex m_connection_lock;\n    std::condition_variable m_action_cond;\n};\n\nenum action_type {\n    SUBSCRIBE,\n    UNSUBSCRIBE,\n    MESSAGE\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <set>\n#include <queue>\n#include <mutex>\n#include <condition_variable>\n#include <thread>\n#include <functional>\n#include <atomic>\n\nnamespace websocketpp {\n    namespace server {\n        class connection_hdl;\n    }\n}\n\nclass action {\npublic:\n    enum type {\n        SUBSCRIBE,\n        UNSUBSCRIBE,\n        MESSAGE\n    };\n\n    type action_type;\n    websocketpp::server::connection_hdl connection_hdl;\n    std::string message;\n};\n\nclass broadcast_server {\nprivate:\n    websocketpp::server<websocketpp::config::asio_no_tls_client> m_server;\n    std::set<websocketpp::server::connection_hdl> m_connections;\n    std::queue<action> m_actions;\n    std::mutex m_action_lock;\n    std::mutex m_connection_lock;\n    std::condition_variable m_action_cond;\n    std::atomic<bool> m_running;\n\npublic:\n    broadcast_server() : m_running(false) {}\n\n    void broadcast_server() {\n        m_server.set_access_channels(websocketpp::log::alevel::all);\n        m_server.clear_access_channels(websocketpp::log::alevel::frame_payload);\n        m_server.set_open_handler(&broadcast_server::on_open, *this);\n        m_server.set_close_handler(&broadcast_server::on_close, *this);\n        m_server.set_message_handler(&broadcast_server::on_message, *this);\n    }\n\n    void run(uint16_t port) {\n        m_server.init_asio();\n        m_server.listen(port);\n        m_server.start_accept();\n        m_server.run();\n    }\n\n    void on_open(websocketpp::server::connection_hdl hdl) {\n        std::lock_guard<std::mutex> lock(m_connection_lock);\n        m_connections.insert(hdl);\n        action a{action::SUBSCRIBE, hdl};\n        std::lock_guard<std::mutex> action_lock(m_action_lock);\n        m_actions.push(a);\n        m_action_cond.notify_one();\n    }\n\n    void on_close(websocketpp::server::connection_hdl hdl) {\n        std::lock_guard<std::mutex> lock(m_connection_lock);\n        m_connections.erase(hdl);\n        action a{action::UNSUBSCRIBE, hdl};\n        std::lock_guard<std::mutex> action_lock(m_action_lock);\n        m_actions.push(a);\n        m_action_cond.notify_one();\n    }\n\n    void on_message(websocketpp::server::connection_hdl hdl, server::message_ptr msg) {\n        std::lock_guard<std::mutex> lock(m_connection_lock);\n        action a{action::MESSAGE, hdl, msg->get_payload()};\n        std::lock_guard<std::mutex> action_lock(m_action_lock);\n        m_actions.push(a);\n        m_action_cond.notify_one();\n    }\n\n    void process_messages() {\n        while (m_running) {\n            std::unique_lock<std::mutex> lock(m_action_lock);\n            m_action_cond.wait(lock, [this]{ return !m_actions.empty() || !m_running; });\n\n            while (!m_actions.empty()) {\n                action a = m_actions.front();\n                m_actions.pop();\n\n                switch (a.action_type) {\n                    case action::SUBSCRIBE:\n                        // Handle subscription\n                        break;\n                    case action::UNSUBSCRIBE:\n                        // Handle unsubscription\n                        break;\n                    case action::MESSAGE:\n                        // Handle message\n                        break;\n                }\n            }\n        }\n    }\n};\n```"
    ],
    "match_count": 2,
    "pass@3": 0.5333333333333333,
    "pass@5": 0.7777777777777778
  },
  {
    "Task_id": 5,
    "Instruction": "Task Description: Implement a C++ class that provides HTTP request functionality using libcurl, supporting both file and network resource retrieval.\n\nClass Description: HttpWebRequest is a class that encapsulates HTTP request functionality, allowing users to make GET requests to either network resources (via HTTP) or local files (via file:// protocol). It handles request configuration, execution, and response processing.\n\nAttributes:\n- uri_: std::string - The target URI for the HTTP request\n- method_: std::string - The HTTP method to use (defaults to GET)\n- header_: std::map<std::string, std::string> - HTTP headers to include in the request\n- is_: std::iostream - Internal stream used for request processing\n\nMethods:\n- HttpWebRequest(std::string &uri) -> void - Constructor that initializes the request with a target URI\n- callback(void *buffer, size_t size, size_t nmemb, void *data) -> static size_t - Static callback function for libcurl to write response data\n- GetFileResponse(const char *uri) -> HttpWebResponse* - Handles file:// protocol requests and returns the file content as a response\n- GetNetResponse(const char *uri) -> HttpWebResponse* - Performs HTTP network requests using libcurl and returns the response\n- GetResponse() -> HttpWebResponse* - Main method that determines request type (file or network) and returns the appropriate response",
    "Canonical_solution": "#include <curl/curl.h>\n#include <string>\n#include <map>\n#include <sstream>\n#include <fstream>\n\nnamespace System {\nnamespace Net {\n\nclass HttpWebRequest {\npublic:\n    HttpWebRequest(std::string &uri)\n        : is_(std::ios_base::in | std::ios_base::out | std::ios_base::binary) {\n        uri_ = uri;\n        method_ = HttpWebRequest::Method::GET;\n    }\n\n    static size_t callback(void *buffer, size_t size, size_t nmemb, void *data) {\n        HttpWebResponse *resp = (HttpWebResponse *) data;\n        std::stringstream &ss = resp->GetResponseStream();\n        ss.write((char *) buffer, size * nmemb);\n        return size * nmemb;\n    }\n\n    HttpWebResponse *GetFileResponse(const char *uri) {\n        assert(strlen(uri) > 6);\n        HttpWebResponse *resp = new HttpWebResponse();\n        const char *filename = uri + 6;\n\n        std::ifstream file;\n        file.open(filename);\n        if (file.is_open()) {\n            resp->os_ << file.rdbuf();\n            file.close();\n        }\n\n        return resp;\n    }\n\n    HttpWebResponse *GetNetResponse(const char *uri) {\n        HttpWebResponse *resp = new HttpWebResponse();\n\n        CURL *curl = curl_easy_init();\n\n        curl_easy_setopt(curl, CURLOPT_URL, uri);\n\n        curl_slist *http_headers = NULL;\n        for (std::map<std::string, std::string>::iterator it = header_.begin();\n             it != header_.end(); it++) {\n            http_headers = curl_slist_append(http_headers,\n                                             (it->first + \":\" + it->second).c_str());\n        }\n        curl_easy_setopt(curl, CURLOPT_HTTPHEADER, http_headers);\n        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, &callback);\n        curl_easy_setopt(curl, CURLOPT_WRITEDATA, (void *) resp);\n        curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1);\n        curl_easy_setopt(curl, CURLOPT_TIMEOUT, 2);\n        curl_easy_setopt(curl, CURLOPT_CONNECTTIMEOUT, 2);\n        curl_easy_setopt(curl, CURLOPT_NOSIGNAL, 1);\n\n        curl_easy_perform(curl);\n\n        long retcode = 0;\n        CURLcode code = curl_easy_getinfo(curl, CURLINFO_RESPONSE_CODE, &retcode);\n        if (code == CURLE_OK && retcode == 200) {\n            resp->status_.SetCode(200);\n\n            char *ctype = NULL;\n            curl_easy_getinfo(curl, CURLINFO_CONTENT_TYPE, &ctype);\n            std::string type(ctype);\n            resp->header_.Put(HttpHeader::ContentType, type);\n\n            double length = 0;\n            curl_easy_getinfo(curl, CURLINFO_CONTENT_LENGTH_DOWNLOAD, &length);\n            std::ostringstream os;\n            os << (long) length;\n            resp->header_.Put(HttpHeader::ContentLength, os.str());\n        }\n\n        curl_slist_free_all(http_headers);\n        curl_easy_cleanup(curl);\n\n        return resp;\n    }\n\n    HttpWebResponse *GetResponse() {\n        const char *uri = uri_.c_str();\n        if (strncmp(uri, \"file://\", 7) == 0) {\n            return GetFileResponse(uri);\n        }\n        return GetNetResponse(uri);\n    }\n\nprivate:\n    std::string uri_;\n    std::string method_;\n    std::map<std::string, std::string> header_;\n    std::iostream is_;\n};\n\n}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 146,
    "matched_results": [
      "```cpp\n#include <iostream>\n#include <map>\n#include <string>\n#include <curl/curl.h>\n\nclass HttpWebRequest {\nprivate:\n    std::string uri_;\n    std::string method_;\n    std::map<std::string, std::string> header_;\n    std::iostream is_;\n\npublic:\n    HttpWebRequest(std::string &uri) : uri_(uri), method_(\"GET\") {}\n\n    static size_t callback(void *buffer, size_t size, size_t nmemb, void *data) {\n        std::iostream *stream = static_cast<std::iostream*>(data);\n        stream->write(static_cast<char*>(buffer), size * nmemb);\n        return size * nmemb;\n    }\n\n    HttpWebResponse* GetFileResponse(const char *uri) {\n        std::string content;\n        std::ifstream file(uri, std::ios::binary);\n        if (file.is_open()) {\n            file.seekg(0, std::ios::end);\n            size_t length = file.tellg();\n            file.seekg(0, std::ios::beg);\n            content.resize(length);\n            file.read(&content[0], length);\n            file.close();\n        }\n        return new HttpWebResponse(content);\n    }\n\n    HttpWebResponse* GetNetResponse(const char *uri) {\n        CURL *curl;\n        CURLcode res;\n        std::string readBuffer;\n        curl = curl_easy_init();\n        if(curl) {\n            curl_easy_setopt(curl, CURLOPT_URL, uri);\n            curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, callback);\n            curl_easy_setopt(curl, CURLOPT_WRITEDATA, &readBuffer);\n            res = curl_easy_perform(curl);\n            curl_easy_cleanup(curl);\n        }\n        return new HttpWebResponse(readBuffer);\n    }\n\n    HttpWebResponse* GetResponse() {\n        if (uri_.find(\"file://\") == 0) {\n            return GetFileResponse(&uri_[7]);\n        } else {\n            return GetNetResponse(uri_.c_str());\n        }\n    }\n};\n\nclass HttpWebResponse {\nprivate:\n    std::string content_;\n\npublic:\n    HttpWebResponse(std::string content) : content_(content) {}\n\n    std::string GetContent() const {\n        return content_;\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <map>\n#include <curl/curl.h>\n\nclass HttpWebRequest {\nprivate:\n    std::string uri_;\n    std::string method_;\n    std::map<std::string, std::string> header_;\n    std::iostream is_;\n\npublic:\n    HttpWebRequest(std::string &uri) : uri_(uri), method_(\"GET\") {}\n\n    static size_t callback(void *buffer, size_t size, size_t nmemb, void *data) {\n        std::string *response = static_cast<std::string*>(data);\n        size_t realSize = size * nmemb;\n        response->append(static_cast<char*>(buffer), realSize);\n        return realSize;\n    }\n\n    HttpWebResponse* GetFileResponse(const char *uri) {\n        std::string content;\n        std::ifstream file(uri, std::ios::binary);\n        if (file.is_open()) {\n            std::streamsize size = file.tellg();\n            file.seekg(0, std::ios::beg);\n            content.resize(size);\n            file.read(&content[0], size);\n            file.close();\n            return new HttpWebResponse(content);\n        }\n        return nullptr;\n    }\n\n    HttpWebResponse* GetNetResponse(const char *uri) {\n        CURL *curl = curl_easy_init();\n        if (curl) {\n            std::string content;\n            curl_easy_setopt(curl, CURLOPT_URL, uri);\n            curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, callback);\n            curl_easy_setopt(curl, CURLOPT_WRITEDATA, &content);\n            curl_easy_perform(curl);\n            curl_easy_cleanup(curl);\n            return new HttpWebResponse(content);\n        }\n        return nullptr;\n    }\n\n    HttpWebResponse* GetResponse() {\n        if (uri_.find(\"file://\") == 0) {\n            return GetFileResponse(&uri_[7]);\n        } else {\n            return GetNetResponse(uri_.c_str());\n        }\n    }\n};\n\nclass HttpWebResponse {\nprivate:\n    std::string content_;\n\npublic:\n    HttpWebResponse(std::string content) : content_(content) {}\n\n    std::string GetContent() const {\n        return content_;\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <map>\n#include <curl/curl.h>\n\nclass HttpWebRequest {\nprivate:\n    std::string uri_;\n    std::string method_;\n    std::map<std::string, std::string> header_;\n    std::iostream is_;\n\npublic:\n    HttpWebRequest(std::string &uri) : uri_(uri), method_(\"GET\") {}\n\n    static size_t callback(void *buffer, size_t size, size_t nmemb, void *data) {\n        std::iostream *stream = static_cast<std::iostream*>(data);\n        stream->write(static_cast<char*>(buffer), size * nmemb);\n        return size * nmemb;\n    }\n\n    HttpWebResponse* GetFileResponse(const char *uri) {\n        std::string content;\n        std::ifstream file(uri, std::ios::binary);\n        if (file.is_open()) {\n            file.seekg(0, std::ios::end);\n            size_t fileSize = file.tellg();\n            file.seekg(0, std::ios::beg);\n            content.resize(fileSize);\n            file.read(&content[0], fileSize);\n            file.close();\n        }\n        return new HttpWebResponse(content);\n    }\n\n    HttpWebResponse* GetNetResponse(const char *uri) {\n        CURL *curl = curl_easy_init();\n        if (curl) {\n            std::string content;\n            curl_easy_setopt(curl, CURLOPT_URL, uri);\n            curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, callback);\n            curl_easy_setopt(curl, CURLOPT_WRITEDATA, &content);\n            curl_easy_perform(curl);\n            curl_easy_cleanup(curl);\n            return new HttpWebResponse(content);\n        }\n        return nullptr;\n    }\n\n    HttpWebResponse* GetResponse() {\n        if (uri_.find(\"file://\") == 0) {\n            return GetFileResponse(uri_.c_str() + 7);\n        } else {\n            return GetNetResponse(uri_.c_str());\n        }\n    }\n};\n\nclass HttpWebResponse {\nprivate:\n    std::string content_;\n\npublic:\n    HttpWebResponse(std::string content) : content_(content) {}\n\n    std::string GetContent() const {\n        return content_;\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <map>\n#include <string>\n#include <curl/curl.h>\n\nclass HttpWebRequest {\nprivate:\n    std::string uri_;\n    std::string method_;\n    std::map<std::string, std::string> header_;\n    std::iostream is_;\n\npublic:\n    HttpWebRequest(std::string &uri) : uri_(uri), method_(\"GET\") {}\n\n    static size_t callback(void *buffer, size_t size, size_t nmemb, void *data) {\n        std::iostream *stream = static_cast<std::iostream*>(data);\n        stream->write(static_cast<char*>(buffer), size * nmemb);\n        return size * nmemb;\n    }\n\n    HttpWebResponse* GetFileResponse(const char *uri) {\n        std::string content;\n        std::ifstream file(uri, std::ios::binary);\n        if (file.is_open()) {\n            std::streambuf* sb = file.rdbuf();\n            content.assign((char*)sb->str().c_str(), sb->str().size());\n            file.close();\n        }\n        return new HttpWebResponse(content);\n    }\n\n    HttpWebResponse* GetNetResponse(const char *uri) {\n        CURL *curl = curl_easy_init();\n        if (curl) {\n            std::string content;\n            curl_easy_setopt(curl, CURLOPT_URL, uri);\n            curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, callback);\n            curl_easy_setopt(curl, CURLOPT_WRITEDATA, &content);\n            curl_easy_perform(curl);\n            curl_easy_cleanup(curl);\n            return new HttpWebResponse(content);\n        }\n        return nullptr;\n    }\n\n    HttpWebResponse* GetResponse() {\n        if (uri_.find(\"file://\") == 0) {\n            return GetFileResponse(uri_.c_str() + 7);\n        } else {\n            return GetNetResponse(uri_.c_str());\n        }\n    }\n};\n\nclass HttpWebResponse {\nprivate:\n    std::string content_;\n\npublic:\n    HttpWebResponse(std::string content) : content_(content) {}\n\n    std::string GetContent() {\n        return content_;\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <map>\n#include <curl/curl.h>\n\nclass HttpWebRequest {\nprivate:\n    std::string uri_;\n    std::string method_;\n    std::map<std::string, std::string> header_;\n    std::iostream is_;\n\npublic:\n    HttpWebRequest(std::string &uri) : uri_(uri), method_(\"GET\") {}\n\n    static size_t callback(void *buffer, size_t size, size_t nmemb, void *data) {\n        std::iostream *stream = static_cast<std::iostream*>(data);\n        stream->write(static_cast<char*>(buffer), size * nmemb);\n        return size * nmemb;\n    }\n\n    HttpWebResponse* GetFileResponse(const char *uri) {\n        std::string content;\n        std::ifstream file(uri, std::ios::binary);\n        if (file.is_open()) {\n            file.seekg(0, std::ios::end);\n            size_t fileSize = file.tellg();\n            file.seekg(0, std::ios::beg);\n            content.resize(fileSize);\n            file.read(&content[0], fileSize);\n            file.close();\n        }\n        return new HttpWebResponse(content);\n    }\n\n    HttpWebResponse* GetNetResponse(const char *uri) {\n        CURL *curl = curl_easy_init();\n        if (curl) {\n            std::string content;\n            curl_easy_setopt(curl, CURLOPT_URL, uri);\n            curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, callback);\n            curl_easy_setopt(curl, CURLOPT_WRITEDATA, &is_);\n            curl_easy_perform(curl);\n            curl_easy_cleanup(curl);\n            is_.seekg(0, std::ios::beg);\n            std::getline(is_, content);\n            is_.seekg(0, std::ios::beg);\n            return new HttpWebResponse(content);\n        }\n        return nullptr;\n    }\n\n    HttpWebResponse* GetResponse() {\n        if (uri_.find(\"file://\") == 0) {\n            return GetFileResponse(uri_.c_str() + 7);\n        } else {\n            return GetNetResponse(uri_.c_str());\n        }\n    }\n};\n\nclass HttpWebResponse {\nprivate:\n    std::string content_;\n\npublic:\n    HttpWebResponse(std::string content) : content_(content) {}\n\n    std::string GetContent() {\n        return content_;\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <map>\n#include <curl/curl.h>\n\nclass HttpWebRequest {\nprivate:\n    std::string uri_;\n    std::string method_;\n    std::map<std::string, std::string> header_;\n    std::iostream is_;\n\npublic:\n    HttpWebRequest(std::string &uri) : uri_(uri), method_(\"GET\") {}\n\n    static size_t callback(void *buffer, size_t size, size_t nmemb, void *data) {\n        std::iostream *stream = static_cast<std::iostream*>(data);\n        stream->write(static_cast<char*>(buffer), size * nmemb);\n        return size * nmemb;\n    }\n\n    HttpWebResponse* GetFileResponse(const char *uri) {\n        std::ifstream file(uri);\n        if (!file.is_open()) {\n            return nullptr;\n        }\n        std::stringstream buffer;\n        buffer << file.rdbuf();\n        file.close();\n        return new HttpWebResponse(buffer.str());\n    }\n\n    HttpWebResponse* GetNetResponse(const char *uri) {\n        CURL *curl = curl_easy_init();\n        if (!curl) {\n            return nullptr;\n        }\n        std::stringstream buffer;\n        curl_easy_setopt(curl, CURLOPT_URL, uri);\n        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, callback);\n        curl_easy_setopt(curl, CURLOPT_WRITEDATA, &buffer);\n        curl_easy_perform(curl);\n        curl_easy_cleanup(curl);\n        return new HttpWebResponse(buffer.str());\n    }\n\n    HttpWebResponse* GetResponse() {\n        if (uri_.find(\"file://\") == 0) {\n            return GetFileResponse(uri_.c_str() + 7);\n        } else {\n            return GetNetResponse(uri_.c_str());\n        }\n    }\n};\n\nclass HttpWebResponse {\nprivate:\n    std::string content_;\n\npublic:\n    HttpWebResponse(std::string content) : content_(content) {}\n\n    std::string GetContent() const {\n        return content_;\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <map>\n#include <string>\n#include <curl/curl.h>\n\nclass HttpWebRequest {\nprivate:\n    std::string uri_;\n    std::string method_;\n    std::map<std::string, std::string> header_;\n    std::iostream is_;\n\npublic:\n    HttpWebRequest(std::string &uri) : uri_(uri), method_(\"GET\") {}\n\n    static size_t callback(void *buffer, size_t size, size_t nmemb, void *data) {\n        std::iostream *stream = static_cast<std::iostream*>(data);\n        stream->write(static_cast<char*>(buffer), size * nmemb);\n        return size * nmemb;\n    }\n\n    HttpWebResponse* GetFileResponse(const char *uri) {\n        std::string content;\n        std::ifstream file(uri, std::ios::binary);\n        if (file.is_open()) {\n            file.seekg(0, std::ios::end);\n            size_t fileSize = file.tellg();\n            file.seekg(0, std::ios::beg);\n            content.resize(fileSize);\n            file.read(&content[0], fileSize);\n            file.close();\n        }\n        return new HttpWebResponse(content);\n    }\n\n    HttpWebResponse* GetNetResponse(const char *uri) {\n        CURL *curl = curl_easy_init();\n        if (curl) {\n            std::string content;\n            curl_easy_setopt(curl, CURLOPT_URL, uri);\n            curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, callback);\n            curl_easy_setopt(curl, CURLOPT_WRITEDATA, &content);\n            curl_easy_perform(curl);\n            curl_easy_cleanup(curl);\n            return new HttpWebResponse(content);\n        }\n        return nullptr;\n    }\n\n    HttpWebResponse* GetResponse() {\n        if (uri_.find(\"file://\") == 0) {\n            return GetFileResponse(uri_.c_str() + 7);\n        } else {\n            return GetNetResponse(uri_.c_str());\n        }\n    }\n};\n\nclass HttpWebResponse {\nprivate:\n    std::string content_;\n\npublic:\n    HttpWebResponse(std::string content) : content_(content) {}\n\n    std::string GetContent() const {\n        return content_;\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <map>\n#include <string>\n#include <curl/curl.h>\n\nclass HttpWebRequest {\nprivate:\n    std::string uri_;\n    std::string method_;\n    std::map<std::string, std::string> header_;\n    std::iostream is_;\n\npublic:\n    HttpWebRequest(std::string &uri) : uri_(uri), method_(\"GET\") {}\n\n    static size_t callback(void *buffer, size_t size, size_t nmemb, void *data) {\n        std::iostream *stream = static_cast<std::iostream*>(data);\n        stream->write(static_cast<char*>(buffer), size * nmemb);\n        return size * nmemb;\n    }\n\n    HttpWebResponse* GetFileResponse(const char *uri) {\n        std::string content;\n        std::ifstream file(uri, std::ios::binary);\n        if (file.is_open()) {\n            file.seekg(0, std::ios::end);\n            size_t length = file.tellg();\n            file.seekg(0, std::ios::beg);\n            content.resize(length);\n            file.read(&content[0], length);\n            file.close();\n        }\n        return new HttpWebResponse(content);\n    }\n\n    HttpWebResponse* GetNetResponse(const char *uri) {\n        CURL *curl;\n        CURLcode res;\n        std::string readBuffer;\n        curl = curl_easy_init();\n        if(curl) {\n            curl_easy_setopt(curl, CURLOPT_URL, uri);\n            curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, callback);\n            curl_easy_setopt(curl, CURLOPT_WRITEDATA, &readBuffer);\n            res = curl_easy_perform(curl);\n            curl_easy_cleanup(curl);\n        }\n        return new HttpWebResponse(readBuffer);\n    }\n\n    HttpWebResponse* GetResponse() {\n        if (uri_.find(\"file://\") == 0) {\n            return GetFileResponse(uri_.c_str() + 7);\n        } else {\n            return GetNetResponse(uri_.c_str());\n        }\n    }\n};\n\nclass HttpWebResponse {\nprivate:\n    std::string content_;\n\npublic:\n    HttpWebResponse(std::string content) : content_(content) {}\n\n    std::string GetContent() const {\n        return content_;\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <string>\n#include <map>\n#include <curl/curl.h>\n\nclass HttpWebRequest {\nprivate:\n    std::string uri_;\n    std::string method_;\n    std::map<std::string, std::string> header_;\n    std::iostream is_;\n\npublic:\n    HttpWebRequest(std::string &uri) : uri_(uri), method_(\"GET\") {}\n\n    static size_t callback(void *buffer, size_t size, size_t nmemb, void *data) {\n        std::iostream *stream = static_cast<std::iostream*>(data);\n        stream->write(static_cast<char*>(buffer), size * nmemb);\n        return size * nmemb;\n    }\n\n    HttpWebResponse* GetFileResponse(const char *uri) {\n        std::string content;\n        std::ifstream file(uri, std::ios::binary);\n        if (file.is_open()) {\n            file.seekg(0, std::ios::end);\n            size_t length = file.tellg();\n            file.seekg(0, std::ios::beg);\n            content.resize(length);\n            file.read(&content[0], length);\n            file.close();\n        }\n        return new HttpWebResponse(content);\n    }\n\n    HttpWebResponse* GetNetResponse(const char *uri) {\n        CURL *curl = curl_easy_init();\n        if (curl) {\n            std::string content;\n            curl_easy_setopt(curl, CURLOPT_URL, uri);\n            curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, callback);\n            curl_easy_setopt(curl, CURLOPT_WRITEDATA, &content);\n            curl_easy_perform(curl);\n            curl_easy_cleanup(curl);\n            return new HttpWebResponse(content);\n        }\n        return nullptr;\n    }\n\n    HttpWebResponse* GetResponse() {\n        if (uri_.find(\"file://\") == 0) {\n            return GetFileResponse(uri_.c_str() + 7);\n        } else {\n            return GetNetResponse(uri_.c_str());\n        }\n    }\n};\n\nclass HttpWebResponse {\nprivate:\n    std::string content_;\n\npublic:\n    HttpWebResponse(std::string content) : content_(content) {}\n\n    std::string GetContent() const {\n        return content_;\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <map>\n#include <string>\n#include <curl/curl.h>\n\nclass HttpWebRequest {\nprivate:\n    std::string uri_;\n    std::string method_;\n    std::map<std::string, std::string> header_;\n    std::iostream is_;\n\npublic:\n    HttpWebRequest(std::string &uri) : uri_(uri), method_(\"GET\") {}\n\n    static size_t callback(void *buffer, size_t size, size_t nmemb, void *data) {\n        std::iostream *stream = static_cast<std::iostream*>(data);\n        stream->write(static_cast<char*>(buffer), size * nmemb);\n        return size * nmemb;\n    }\n\n    HttpWebResponse* GetFileResponse(const char *uri) {\n        std::string content;\n        std::ifstream file(uri, std::ios::binary);\n        if (file.is_open()) {\n            file.seekg(0, std::ios::end);\n            size_t fileSize = file.tellg();\n            file.seekg(0, std::ios::beg);\n            content.resize(fileSize);\n            file.read(&content[0], fileSize);\n            file.close();\n        }\n        return new HttpWebResponse(content);\n    }\n\n    HttpWebResponse* GetNetResponse(const char *uri) {\n        CURL *curl = curl_easy_init();\n        if (curl) {\n            std::string response;\n            curl_easy_setopt(curl, CURLOPT_URL, uri);\n            curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, callback);\n            curl_easy_setopt(curl, CURLOPT_WRITEDATA, &response);\n            curl_easy_perform(curl);\n            curl_easy_cleanup(curl);\n            return new HttpWebResponse(response);\n        }\n        return nullptr;\n    }\n\n    HttpWebResponse* GetResponse() {\n        if (uri_.find(\"file://\") == 0) {\n            return GetFileResponse(uri_.c_str() + 7);\n        } else {\n            return GetNetResponse(uri_.c_str());\n        }\n    }\n};\n\nclass HttpWebResponse {\nprivate:\n    std::string content_;\n\npublic:\n    HttpWebResponse(std::string content) : content_(content) {}\n\n    std::string GetContent() const {\n        return content_;\n    }\n};\n```"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 50,
    "Instruction": "Task Description: Implement a WebSocket server class in C++ that supports both plain and TLS (SSL) connections using the WebSocket++ library. The server should handle incoming messages, echo them back to clients, and manage secure connections with proper TLS initialization.\n\nClass Description: The WebSocketServer class encapsulates functionality for creating and managing both plain and TLS WebSocket servers. It initializes server endpoints, sets up message handlers, manages TLS contexts, and runs the server's event loop.\n\nAttributes:\n- ios_: boost::asio::io_service - ASIO I/O service for handling network operations\n- endpoint_plain_: server_plain - WebSocket++ server instance for plain (non-secure) connections\n- endpoint_tls_: server_tls - WebSocket++ server instance for TLS (secure) connections\n\nMethods:\n- init() -> void - Initializes both plain and TLS server endpoints, sets message handlers, TLS initialization handler, and starts listening on ports 80 (plain) and 443 (TLS)\n- run() -> void - Starts the server's event loop to handle connections and messages\n- on_message(EndpointType* s, websocketpp::connection_hdl hdl, typename EndpointType::message_ptr msg) -> void - Template method that handles incoming messages from clients and echoes them back\n- get_password() -> std::string - Returns the password used for TLS private key encryption\n- on_tls_init(websocketpp::connection_hdl hdl) -> context_ptr - Initializes and configures the TLS context for secure connections",
    "Canonical_solution": "#include <websocketpp/config/asio.hpp>\n#include <websocketpp/server.hpp>\n#include <boost/asio/ssl.hpp>\n#include <iostream>\n\ntypedef websocketpp::server<websocketpp::config::asio> server_plain;\ntypedef websocketpp::server<websocketpp::config::asio_tls> server_tls;\nusing websocketpp::lib::placeholders::_1;\nusing websocketpp::lib::placeholders::_2;\nusing websocketpp::lib::bind;\ntypedef websocketpp::lib::shared_ptr<boost::asio::ssl::context> context_ptr;\n\nclass WebSocketServer {\npublic:\n    WebSocketServer() : ios_(), endpoint_plain_(), endpoint_tls_() {}\n\n    void init() {\n        endpoint_plain_.init_asio(&ios_);\n        endpoint_plain_.set_message_handler(\n            bind(&WebSocketServer::on_message<server_plain>, this, &endpoint_plain_, ::_1, ::_2));\n        endpoint_plain_.listen(80);\n        endpoint_plain_.start_accept();\n\n        endpoint_tls_.init_asio(&ios_);\n        endpoint_tls_.set_message_handler(\n            bind(&WebSocketServer::on_message<server_tls>, this, &endpoint_tls_, ::_1, ::_2));\n        endpoint_tls_.set_tls_init_handler(bind(&WebSocketServer::on_tls_init, this, ::_1));\n        endpoint_tls_.listen(443);\n        endpoint_tls_.start_accept();\n    }\n\n    void run() {\n        ios_.run();\n    }\n\nprivate:\n    template <typename EndpointType>\n    void on_message(EndpointType* s, websocketpp::connection_hdl hdl,\n        typename EndpointType::message_ptr msg)\n    {\n        std::cout << \"on_message called with hdl: \" << hdl.lock().get()\n                << \" and message: \" << msg->get_payload()\n                << std::endl;\n\n        try {\n            s->send(hdl, msg->get_payload(), msg->get_opcode());\n        } catch (websocketpp::exception const & e) {\n            std::cout << \"Echo failed because: \"\n                    << \"(\" << e.what() << \")\" << std::endl;\n        }\n    }\n\n    std::string get_password() {\n        return \"test\";\n    }\n\n    context_ptr on_tls_init(websocketpp::connection_hdl hdl) {\n        std::cout << \"on_tls_init called with hdl: \" << hdl.lock().get() << std::endl;\n        context_ptr ctx(new boost::asio::ssl::context(boost::asio::ssl::context::tlsv1));\n\n        try {\n            ctx->set_options(boost::asio::ssl::context::default_workarounds |\n                            boost::asio::ssl::context::no_sslv2 |\n                            boost::asio::ssl::context::no_sslv3 |\n                            boost::asio::ssl::context::single_dh_use);\n            ctx->set_password_callback(bind(&WebSocketServer::get_password, this));\n            ctx->use_certificate_chain_file(\"server.pem\");\n            ctx->use_private_key_file(\"server.pem\", boost::asio::ssl::context::pem);\n        } catch (std::exception& e) {\n            std::cout << e.what() << std::endl;\n        }\n        return ctx;\n    }\n\n    boost::asio::io_service ios_;\n    server_plain endpoint_plain_;\n    server_tls endpoint_tls_;\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 154,
    "matched_results": [],
    "unmatched_results": [
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/config/asio_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <boost/asio.hpp>\n#include <memory>\n#include <string>\n\nenum EndpointType { PLAIN, TLS };\n\nclass WebSocketServer {\npublic:\n    WebSocketServer(boost::asio::io_service& ios)\n        : ios_(ios), endpoint_plain_(ios), endpoint_tls_(ios) {}\n\n    void init() {\n        endpoint_plain_.set_access_channels(websocketpp::log::alevel::all);\n        endpoint_plain_.clear_access_channels(websocketpp::log::alevel::frame_payload);\n        endpoint_tls_.set_access_channels(websocketpp::log::alevel::all);\n        endpoint_tls_.clear_access_channels(websocketpp::log::alevel::frame_payload);\n\n        endpoint_plain_.set_open_handler(\n            [](websocketpp::connection_hdl hdl) {\n                std::cout << \"Plain connection opened\" << std::endl;\n            });\n\n        endpoint_tls_.set_open_handler(\n            [](websocketpp::connection_hdl hdl) {\n                std::cout << \"TLS connection opened\" << std::endl;\n            });\n\n        endpoint_plain_.set_message_handler(\n            [](websocketpp::connection_hdl hdl, typename endpoint_plain_.message_type::ptr msg) {\n                endpoint_plain_.send(msg, hdl);\n            });\n\n        endpoint_tls_.set_message_handler(\n            [](websocketpp::connection_hdl hdl, typename endpoint_tls_.message_type::ptr msg) {\n                endpoint_tls_.send(msg, hdl);\n            });\n\n        endpoint_plain_.listen(80);\n        endpoint_tls_.listen(443);\n\n        endpoint_plain_.start_accept();\n        endpoint_tls_.start_accept();\n    }\n\n    void run() {\n        ios_.run();\n    }\n\n    void on_message(EndpointType* s, websocketpp::connection_hdl hdl, typename EndpointType::message_type::ptr msg) {\n        s->send(msg, hdl);\n    }\n\n    std::string get_password() {\n        return \"your_tls_password\";\n    }\n\n    typename endpoint_tls_.context_type::ptr on_tls_init(websocketpp::connection_hdl hdl) {\n        auto ctx = std::make_shared<endpoint_tls_.context_type>();\n        ctx->set_options(\n            websocketpp::lib::asio::ssl::context::options::no_sslv2 |\n            websocketpp::lib::asio::ssl::context::options::single_dh_use);\n        ctx->use_certificate_chain_file(\"your_certificate.pem\");\n        ctx->use_private_key_file(\"your_private_key.pem\", websocketpp::lib::asio::ssl::context::pem);\n        ctx->use_tmp_dh_file(\"dh2048.pem\");\n        ctx->set_password_callback(\n            [](const std::string& user, std::size_t, std::size_t) -> std::string {\n                return get_password();\n            });\n        return ctx;\n    }\n\nprivate:\n    boost::asio::io_service ios_;\n    websocketpp::server<websocketpp::config::asio_no_tls_client> endpoint_plain_;\n    websocketpp::server<websocketpp::config::asio_tls_client> endpoint_tls_;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/config/asio_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <boost/asio.hpp>\n#include <memory>\n#include <string>\n\nenum class EndpointType {\n    Plain,\n    TLS\n};\n\nclass WebSocketServer {\npublic:\n    WebSocketServer(boost::asio::io_service& ios)\n        : ios_(ios), endpoint_plain_(ios), endpoint_tls_(ios) {}\n\n    void init() {\n        endpoint_plain_.set_access_channels(websocketpp::log::alevel::all);\n        endpoint_plain_.clear_access_channels(websocketpp::log::alevel::frame_payload);\n        endpoint_tls_.set_access_channels(websocketpp::log::alevel::all);\n        endpoint_tls_.clear_access_channels(websocketpp::log::alevel::frame_payload);\n\n        endpoint_plain_.set_open_handler(\n            [](websocketpp::connection_hdl hdl) {\n                std::cout << \"Plain connection opened\" << std::endl;\n            });\n\n        endpoint_tls_.set_open_handler(\n            [](websocketpp::connection_hdl hdl) {\n                std::cout << \"TLS connection opened\" << std::endl;\n            });\n\n        endpoint_plain_.set_message_handler(\n            [](websocketpp::connection_hdl hdl, typename endpoint_plain_.message_type::ptr msg) {\n                endpoint_plain_.send(msg, hdl);\n            });\n\n        endpoint_tls_.set_message_handler(\n            [](websocketpp::connection_hdl hdl, typename endpoint_tls_.message_type::ptr msg) {\n                endpoint_tls_.send(msg, hdl);\n            });\n\n        endpoint_plain_.listen(80);\n        endpoint_tls_.listen(443);\n\n        endpoint_plain_.start_accept();\n        endpoint_tls_.start_accept();\n    }\n\n    void run() {\n        ios_.run();\n    }\n\n    template<typename EndpointType>\n    void on_message(EndpointType* s, websocketpp::connection_hdl hdl, typename EndpointType::message_ptr msg) {\n        s->send(msg, hdl);\n    }\n\n    std::string get_password() const {\n        return password_;\n    }\n\n    template<typename EndpointType>\n    typename EndpointType::context_ptr on_tls_init(websocketpp::connection_hdl hdl) {\n        auto ctx = std::make_shared<typename EndpointType::context_type>();\n        ctx->set_options(websocketpp::lib::asio::ssl::context::default_workarounds());\n        ctx->set_password_callback(\n            [](const std::string& user, std::size_t, std::size_t max, websocketpp::lib::asio::ssl::context_base::password_callback::handler_type& handler) {\n                handler(get_password());\n            });\n        return ctx;\n    }\n\nprivate:\n    boost::asio::io_service ios_;\n    websocketpp::server<websocketpp::config::asio_no_tls_client> endpoint_plain_;\n    websocketpp::server<websocketpp::config::asio_tls_client> endpoint_tls_;\n    std::string password_;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/config/asio_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <boost/asio.hpp>\n#include <iostream>\n#include <string>\n\nenum EndpointType { PLAIN, TLS };\n\nclass WebSocketServer {\npublic:\n    WebSocketServer(boost::asio::io_service& ios)\n        : ios_(ios), endpoint_plain_(ios), endpoint_tls_(ios) {}\n\n    void init() {\n        endpoint_plain_.set_access_channels(websocketpp::log::alevel::all);\n        endpoint_plain_.clear_access_channels(websocketpp::log::alevel::frame_payload);\n        endpoint_tls_.set_access_channels(websocketpp::log::alevel::all);\n        endpoint_tls_.clear_access_channels(websocketpp::log::alevel::frame_payload);\n\n        endpoint_plain_.set_open_handler(\n            [](websocketpp::connection_hdl hdl) {\n                std::cout << \"Plain connection opened.\" << std::endl;\n            });\n\n        endpoint_tls_.set_open_handler(\n            [](websocketpp::connection_hdl hdl) {\n                std::cout << \"TLS connection opened.\" << std::endl;\n            });\n\n        endpoint_plain_.set_message_handler(\n            [](websocketpp::connection_hdl hdl, websocketpp::message_ptr msg) {\n                endpoint_plain_.send(msg, hdl);\n            });\n\n        endpoint_tls_.set_message_handler(\n            [](websocketpp::connection_hdl hdl, websocketpp::message_ptr msg) {\n                endpoint_tls_.send(msg, hdl);\n            });\n\n        endpoint_plain_.listen(80);\n        endpoint_tls_.listen(443);\n\n        endpoint_plain_.start_accept();\n        endpoint_tls_.start_accept();\n    }\n\n    void run() {\n        ios_.run();\n    }\n\n    void on_message(EndpointType* s, websocketpp::connection_hdl hdl, typename EndpointType::message_ptr msg) {\n        s->send(msg, hdl);\n    }\n\n    std::string get_password() const {\n        return \"your_tls_password\";\n    }\n\n    websocketpp::lib::shared_ptr<websocketpp::lib::openssl::context> on_tls_init(websocketpp::connection_hdl hdl) {\n        websocketpp::lib::shared_ptr<websocketpp::lib::openssl::context> ctx(\n            new websocketpp::lib::openssl::context(websocketpp::lib::openssl::context::tlsv1_2));\n        ctx->use_certificate_chain_file(\"your_certificate.pem\");\n        ctx->use_private_key_file(\"your_private_key.pem\", websocketpp::lib::openssl::context::pem);\n        ctx->use_password(get_password());\n        return ctx;\n    }\n\nprivate:\n    boost::asio::io_service ios_;\n    websocketpp::server<websocketpp::config::asio_no_tls_client> endpoint_plain_;\n    websocketpp::server<websocketpp::config::asio_tls_client> endpoint_tls_;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/config/asio_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <boost/asio.hpp>\n#include <memory>\n#include <string>\n\nnamespace websocketpp {\n    template <typename EndpointType>\n    class WebSocketServer {\n    public:\n        WebSocketServer(boost::asio::io_service& ios)\n            : ios_(ios), endpoint_plain_(ios), endpoint_tls_(ios) {}\n\n        void init() {\n            endpoint_plain_.set_access_channels(websocketpp::log::alevel::all);\n            endpoint_plain_.clear_access_channels(websocketpp::log::alevel::frame_payload);\n            endpoint_tls_.set_access_channels(websocketpp::log::alevel::all);\n            endpoint_tls_.clear_access_channels(websocketpp::log::alevel::frame_payload);\n\n            endpoint_plain_.set_open_handler(\n                [](websocketpp::connection_hdl hdl) {\n                    std::cout << \"Plain connection opened\" << std::endl;\n                });\n\n            endpoint_tls_.set_open_handler(\n                [](websocketpp::connection_hdl hdl) {\n                    std::cout << \"TLS connection opened\" << std::endl;\n                });\n\n            endpoint_plain_.set_message_handler(\n                [](websocketpp::connection_hdl hdl, typename EndpointType::message_ptr msg) {\n                    endpoint_plain_.send(msg, hdl);\n                });\n\n            endpoint_tls_.set_message_handler(\n                [](websocketpp::connection_hdl hdl, typename EndpointType::message_ptr msg) {\n                    endpoint_tls_.send(msg, hdl);\n                });\n\n            endpoint_plain_.listen(80);\n            endpoint_tls_.listen(443);\n\n            endpoint_plain_.start_accept();\n            endpoint_tls_.start_accept();\n        }\n\n        void run() {\n            ios_.run();\n        }\n\n        template <typename... Args>\n        void on_message(Args&&... args) {\n            endpoint_plain_.on_message(std::forward<Args>(args)...);\n            endpoint_tls_.on_message(std::forward<Args>(args)...);\n        }\n\n        std::string get_password() const {\n            return password_;\n        }\n\n        template <typename... Args>\n        typename EndpointType::context_ptr on_tls_init(Args&&... args) {\n            return endpoint_tls_.get_context(std::forward<Args>(args)...);\n        }\n\n    private:\n        boost::asio::io_service ios_;\n        websocketpp::server<EndpointType> endpoint_plain_;\n        websocketpp::server<EndpointType> endpoint_tls_;\n        std::string password_;\n    };\n}\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/config/asio_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <boost/asio.hpp>\n#include <memory>\n#include <string>\n\nnamespace websocketpp {\n    template <typename EndpointType>\n    class WebSocketServer {\n    public:\n        WebSocketServer(boost::asio::io_service& ios)\n            : ios_(ios), endpoint_plain_(ios), endpoint_tls_(ios) {}\n\n        void init() {\n            endpoint_plain_.set_access_channels(websocketpp::log::alevel::all);\n            endpoint_plain_.clear_access_channels(websocketpp::log::alevel::frame_payload);\n            endpoint_tls_.set_access_channels(websocketpp::log::alevel::all);\n            endpoint_tls_.clear_access_channels(websocketpp::log::alevel::frame_payload);\n\n            endpoint_plain_.set_open_handler(\n                [this](websocketpp::connection_hdl hdl) {\n                    on_open(hdl);\n                });\n\n            endpoint_plain_.set_close_handler(\n                [this](websocketpp::connection_hdl hdl) {\n                    on_close(hdl);\n                });\n\n            endpoint_plain_.set_message_handler(\n                [this](websocketpp::connection_hdl hdl, typename EndpointType::message_ptr msg) {\n                    on_message(&endpoint_plain_, hdl, msg);\n                });\n\n            endpoint_tls_.set_open_handler(\n                [this](websocketpp::connection_hdl hdl) {\n                    on_open(hdl);\n                });\n\n            endpoint_tls_.set_close_handler(\n                [this](websocketpp::connection_hdl hdl) {\n                    on_close(hdl);\n                });\n\n            endpoint_tls_.set_message_handler(\n                [this](websocketpp::connection_hdl hdl, typename EndpointType::message_ptr msg) {\n                    on_message(&endpoint_tls_, hdl, msg);\n                });\n\n            endpoint_plain_.listen(80);\n            endpoint_tls_.listen(443);\n\n            endpoint_plain_.start_accept();\n            endpoint_tls_.start_accept();\n        }\n\n        void run() {\n            endpoint_plain_.run();\n            endpoint_tls_.run();\n        }\n\n    private:\n        void on_message(EndpointType* s, websocketpp::connection_hdl hdl, typename EndpointType::message_ptr msg) {\n            typename EndpointType::message_ptr msg_copy = std::make_shared<typename EndpointType::message_type>();\n            *msg_copy = *msg;\n            msg_copy->set_payload(msg->get_payload());\n            s->send(msg_copy, hdl);\n        }\n\n        void on_open(websocketpp::connection_hdl hdl) {\n            // Implement open handler logic\n        }\n\n        void on_close(websocketpp::connection_hdl hdl) {\n            // Implement close handler logic\n        }\n\n        boost::asio::io_service ios_;\n        websocketpp::server<EndpointType> endpoint_plain_;\n        websocketpp::server<EndpointType> endpoint_tls_;\n    };\n}\n\nstd::string get_password() {\n    // Implement password retrieval logic\n    return \"password\";\n}\n\nwebsocketpp::lib::asio::ssl::context_ptr on_tls_init(websocketpp::connection_hdl hdl) {\n    websocketpp::lib::asio::ssl::context_ptr ctx(new websocketpp::lib::asio::ssl::context(websocketpp::lib::asio::ssl::context::tlsv1_2));\n    ctx->set_options(websocketpp::lib::asio::ssl::context::default_workarounds | websocketpp::lib::asio::ssl::context::no_sslv2 | websocketpp::lib::asio::ssl::context::single_dh_use);\n    ctx->use_certificate_chain_file(\"cert.pem\");\n    ctx->use_private_key_file(\"key.pem\", websocketpp::lib::asio::ssl::context::pem);\n    ctx->set_password_callback([get_password = get_password](){\n        return get_password();\n    });\n    return ctx;\n}\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/config/asio_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <boost/asio.hpp>\n#include <memory>\n#include <string>\n\nnamespace websocketpp {\n    template <typename EndpointType>\n    class WebSocketServer {\n    public:\n        WebSocketServer(boost::asio::io_service& ios)\n            : ios_(ios), endpoint_plain_(ios), endpoint_tls_(ios) {}\n\n        void init() {\n            endpoint_plain_.set_access_channels(websocketpp::log::alevel::all);\n            endpoint_plain_.clear_access_channels(websocketpp::log::alevel::frame_payload);\n            endpoint_tls_.set_access_channels(websocketpp::log::alevel::all);\n            endpoint_tls_.clear_access_channels(websocketpp::log::alevel::frame_payload);\n\n            endpoint_plain_.set_open_handler(\n                [](websocketpp::connection_hdl hdl) {\n                    std::cout << \"Plain connection opened.\" << std::endl;\n                });\n\n            endpoint_tls_.set_open_handler(\n                [](websocketpp::connection_hdl hdl) {\n                    std::cout << \"TLS connection opened.\" << std::endl;\n                });\n\n            endpoint_plain_.set_message_handler(\n                [](websocketpp::connection_hdl hdl, typename EndpointType::message_ptr msg) {\n                    endpoint_plain_.send(msg, hdl);\n                });\n\n            endpoint_tls_.set_message_handler(\n                [](websocketpp::connection_hdl hdl, typename EndpointType::message_ptr msg) {\n                    endpoint_tls_.send(msg, hdl);\n                });\n\n            endpoint_plain_.listen(80);\n            endpoint_tls_.listen(443);\n        }\n\n        void run() {\n            endpoint_plain_.start_accept();\n            endpoint_tls_.start_accept();\n            ios_.run();\n        }\n\n        void on_message(EndpointType* s, websocketpp::connection_hdl hdl, typename EndpointType::message_ptr msg) {\n            s->send(msg, hdl);\n        }\n\n        std::string get_password() {\n            return \"password\";\n        }\n\n        typename EndpointType::context_ptr on_tls_init(websocketpp::connection_hdl hdl) {\n            auto ctx = std::make_shared<typename EndpointType::context>();\n            ctx->set_options(websocketpp::lib::asio::ssl::context::default_workarounds | websocketpp::lib::asio::ssl::context::no_sslv2 | websocketpp::lib::asio::ssl::context::single_dh_use);\n            ctx->set_password_callback(\n                [](const std::string& user, std::size_t, std::size_t max) {\n                    return get_password();\n                });\n            return ctx;\n        }\n\n    private:\n        boost::asio::io_service ios_;\n        websocketpp::server<typename websocketpp::config::asio_no_tls_client> endpoint_plain_;\n        websocketpp::server<typename websocketpp::config::asio_tls_client> endpoint_tls_;\n    };\n}\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/config/asio_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <boost/asio.hpp>\n#include <memory>\n#include <string>\n\nenum EndpointType { PLAIN, TLS };\n\nclass WebSocketServer {\npublic:\n    WebSocketServer(boost::asio::io_service& ios)\n        : ios_(ios), endpoint_plain_(ios), endpoint_tls_(ios) {}\n\n    void init() {\n        endpoint_plain_.set_access_channels(websocketpp::log::alevel::all);\n        endpoint_plain_.clear_access_channels(websocketpp::log::alevel::frame_payload);\n        endpoint_tls_.set_access_channels(websocketpp::log::alevel::all);\n        endpoint_tls_.clear_access_channels(websocketpp::log::alevel::frame_payload);\n\n        endpoint_plain_.set_open_handler(&WebSocketServer::on_open, this);\n        endpoint_plain_.set_message_handler(&WebSocketServer::on_message, this);\n        endpoint_tls_.set_open_handler(&WebSocketServer::on_open, this);\n        endpoint_tls_.set_message_handler(&WebSocketServer::on_message, this);\n        endpoint_tls_.set_tls_init_handler(&WebSocketServer::on_tls_init, this);\n\n        endpoint_plain_.listen(80);\n        endpoint_tls_.listen(443);\n    }\n\n    void run() {\n        endpoint_plain_.start_accept();\n        endpoint_tls_.start_accept();\n        ios_.run();\n    }\n\n    void on_message(EndpointType* s, websocketpp::connection_hdl hdl, typename EndpointType::message_ptr msg) {\n        typename EndpointType::connection_ptr con = s->get_connection(hdl);\n        if (con) {\n            con->send(msg->get_payload(), msg->get_opcode());\n        }\n    }\n\n    std::string get_password() const {\n        return password_;\n    }\n\n    websocketpp::lib::shared_ptr<websocketpp::lib::openssl::context_ptr> on_tls_init(websocketpp::connection_hdl hdl) {\n        websocketpp::lib::shared_ptr<websocketpp::lib::openssl::context_ptr> ctx(new websocketpp::lib::openssl::context_ptr());\n        *ctx = websocketpp::lib::openssl::context_ptr(new boost::asio::ssl::context(boost::asio::ssl::context::tlsv1_2));\n        (*ctx)->use_certificate_chain_file(\"path/to/certificate.pem\");\n        (*ctx)->use_private_key_file(\"path/to/private_key.pem\", boost::asio::ssl::context::pem);\n        (*ctx)->set_password_callback(boost::bind(&WebSocketServer::get_password, this));\n        return ctx;\n    }\n\nprivate:\n    boost::asio::io_service ios_;\n    websocketpp::server<websocketpp::config::asio_no_tls_client> endpoint_plain_;\n    websocketpp::server<websocketpp::config::asio_tls_client> endpoint_tls_;\n    std::string password_;\n    void on_open(websocketpp::connection_hdl hdl) {}\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/config/asio_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <boost/asio.hpp>\n#include <memory>\n#include <string>\n\nclass WebSocketServer {\npublic:\n    WebSocketServer(boost::asio::io_service& ios)\n        : ios_(ios), endpoint_plain_(ios), endpoint_tls_(ios) {}\n\n    void init() {\n        endpoint_plain_.set_access_channels(websocketpp::log::alevel::all);\n        endpoint_plain_.clear_access_channels(websocketpp::log::alevel::frame_payload);\n        endpoint_tls_.set_access_channels(websocketpp::log::alevel::all);\n        endpoint_tls_.clear_access_channels(websocketpp::log::alevel::frame_payload);\n\n        endpoint_plain_.set_open_handler(&WebSocketServer::on_open, this);\n        endpoint_plain_.set_message_handler(&WebSocketServer::on_message, this);\n        endpoint_tls_.set_open_handler(&WebSocketServer::on_open, this);\n        endpoint_tls_.set_message_handler(&WebSocketServer::on_message, this);\n        endpoint_tls_.set_tls_init_handler(&WebSocketServer::on_tls_init, this);\n\n        endpoint_plain_.listen(80);\n        endpoint_tls_.listen(443);\n    }\n\n    void run() {\n        endpoint_plain_.start_accept();\n        endpoint_tls_.start_accept();\n        ios_.run();\n    }\n\n    void on_message(EndpointType* s, websocketpp::connection_hdl hdl, typename EndpointType::message_ptr msg) {\n        if (!msg->get_payload().empty()) {\n            typename EndpointType::message_ptr msg_copy = msg;\n            s->send(hdl, msg_copy);\n        }\n    }\n\n    std::string get_password() const {\n        return password_;\n    }\n\n    websocketpp::lib::shared_ptr<websocketpp::lib::openssl::context_ptr> on_tls_init(websocketpp::connection_hdl hdl) {\n        websocketpp::lib::shared_ptr<websocketpp::lib::openssl::context_ptr> ctx(new websocketpp::lib::openssl::context_ptr());\n        *ctx = websocketpp::lib::openssl::context_ptr(new boost::asio::ssl::context(boost::asio::ssl::context::tlsv1_2));\n        (*ctx)->use_certificate_chain_file(\"cert.pem\");\n        (*ctx)->use_private_key_file(\"key.pem\", boost::asio::ssl::context::pem);\n        (*ctx)->set_password_callback(boost::bind(&WebSocketServer::get_password, this));\n        return ctx;\n    }\n\nprivate:\n    using EndpointType = websocketpp::server<websocketpp::config::asio_no_tls_client>;\n    using EndpointTypeTLS = websocketpp::server<websocketpp::config::asio_tls_client>;\n\n    boost::asio::io_service ios_;\n    EndpointType endpoint_plain_;\n    EndpointTypeTLS endpoint_tls_;\n    std::string password_;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/config/asio_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <boost/asio.hpp>\n#include <memory>\n#include <string>\n\nenum EndpointType { PLAIN, TLS };\n\nclass WebSocketServer {\npublic:\n    WebSocketServer(boost::asio::io_service& ios)\n        : ios_(ios), endpoint_plain_(ios), endpoint_tls_(ios) {}\n\n    void init() {\n        endpoint_plain_.set_access_channels(websocketpp::log::alevel::all);\n        endpoint_plain_.clear_access_channels(websocketpp::log::alevel::frame_payload);\n        endpoint_tls_.set_access_channels(websocketpp::log::alevel::all);\n        endpoint_tls_.clear_access_channels(websocketpp::log::alevel::frame_payload);\n\n        endpoint_plain_.set_open_handler(\n            [](websocketpp::connection_hdl hdl) {\n                std::cout << \"Plain connection opened\" << std::endl;\n            });\n\n        endpoint_tls_.set_open_handler(\n            [](websocketpp::connection_hdl hdl) {\n                std::cout << \"TLS connection opened\" << std::endl;\n            });\n\n        endpoint_plain_.set_message_handler(\n            [](websocketpp::connection_hdl hdl, typename endpoint_plain_.message_type::ptr msg) {\n                endpoint_plain_.send(msg, hdl);\n            });\n\n        endpoint_tls_.set_message_handler(\n            [](websocketpp::connection_hdl hdl, typename endpoint_tls_.message_type::ptr msg) {\n                endpoint_tls_.send(msg, hdl);\n            });\n\n        endpoint_plain_.listen(80);\n        endpoint_tls_.listen(443);\n\n        endpoint_plain_.start_accept();\n        endpoint_tls_.start_accept();\n    }\n\n    void run() {\n        ios_.run();\n    }\n\n    void on_message(EndpointType* s, websocketpp::connection_hdl hdl, typename endpoint_plain_.message_type::ptr msg) {\n        if (s == &endpoint_plain_) {\n            endpoint_plain_.send(msg, hdl);\n        } else if (s == &endpoint_tls_) {\n            endpoint_tls_.send(msg, hdl);\n        }\n    }\n\n    std::string get_password() {\n        return \"password\";\n    }\n\n    typename endpoint_tls_.context_type::ptr on_tls_init(websocketpp::connection_hdl hdl) {\n        auto ctx = std::make_shared<endpoint_tls_.context_type>();\n        ctx->set_options(\n            websocketpp::lib::asio::ssl::context::options::no_sslv2 |\n            websocketpp::lib::asio::ssl::context::options::no_sslv3 |\n            websocketpp::lib::asio::ssl::context::options::single_dh_use);\n        ctx->use_certificate_chain_file(\"cert.pem\");\n        ctx->use_private_key_file(\"key.pem\", websocketpp::lib::asio::ssl::context::pem);\n        ctx->use_tmp_dh_file(\"dh2048.pem\");\n        ctx->set_password_callback(\n            [](const std::string& user, std::size_t, std::size_t) -> std::string {\n                return get_password();\n            });\n        return ctx;\n    }\n\nprivate:\n    boost::asio::io_service ios_;\n    websocketpp::server<websocketpp::config::asio_no_tls_client> endpoint_plain_;\n    websocketpp::server<websocketpp::config::asio_tls_client> endpoint_tls_;\n};\n```",
      "```cpp\n#include <websocketpp/config/asio_no_tls_client.hpp>\n#include <websocketpp/config/asio_tls_client.hpp>\n#include <websocketpp/server.hpp>\n#include <boost/asio.hpp>\n#include <memory>\n#include <string>\n\nenum class EndpointType { PLAIN, TLS };\n\nclass WebSocketServer {\npublic:\n    WebSocketServer(boost::asio::io_service& ios)\n        : ios_(ios), endpoint_plain_(ios), endpoint_tls_(ios) {}\n\n    void init() {\n        endpoint_plain_.set_access_channels(websocketpp::log::alevel::all);\n        endpoint_plain_.clear_access_channels(websocketpp::log::alevel::frame_payload);\n        endpoint_tls_.set_access_channels(websocketpp::log::alevel::all);\n        endpoint_tls_.clear_access_channels(websocketpp::log::alevel::frame_payload);\n\n        endpoint_plain_.set_open_handler(\n            [](websocketpp::connection_hdl hdl) {\n                std::cout << \"Plain connection opened\" << std::endl;\n            });\n\n        endpoint_tls_.set_open_handler(\n            [](websocketpp::connection_hdl hdl) {\n                std::cout << \"TLS connection opened\" << std::endl;\n            });\n\n        endpoint_plain_.set_message_handler(\n            [](websocketpp::connection_hdl hdl, websocketpp::message_ptr msg) {\n                echo_message(hdl, msg);\n            });\n\n        endpoint_tls_.set_message_handler(\n            [](websocketpp::connection_hdl hdl, websocketpp::message_ptr msg) {\n                echo_message(hdl, msg);\n            });\n\n        endpoint_plain_.set_tls_init_handler(\n            [](websocketpp::connection_hdl hdl) {\n                return std::make_shared<ssl::context>(ssl::context::tlsv1_2);\n            });\n\n        endpoint_tls_.set_tls_init_handler(\n            [](websocketpp::connection_hdl hdl) {\n                return std::make_shared<ssl::context>(ssl::context::tlsv1_2);\n            });\n\n        endpoint_plain_.set_tls_client_context_handler(\n            [](websocketpp::connection_hdl hdl) {\n                auto ctx = std::make_shared<ssl::context>(ssl::context::tlsv1_2);\n                ctx->use_certificate_chain_file(\"path/to/certificate.pem\");\n                ctx->use_private_key_file(\"path/to/private_key.pem\", ssl::context::pem);\n                ctx->set_password_callback([](std::size_t, ssl::context_base::password_purpose) {\n                    return \"password\";\n                });\n                return ctx;\n            });\n\n        endpoint_tls_.set_tls_client_context_handler(\n            [](websocketpp::connection_hdl hdl) {\n                auto ctx = std::make_shared<ssl::context>(ssl::context::tlsv1_2);\n                ctx->use_certificate_chain_file(\"path/to/certificate.pem\");\n                ctx->use_private_key_file(\"path/to/private_key.pem\", ssl::context::pem);\n                ctx->set_password_callback([](std::size_t, ssl::context_base::password_purpose) {\n                    return \"password\";\n                });\n                return ctx;\n            });\n\n        endpoint_plain_.listen(80);\n        endpoint_tls_.listen(443);\n    }\n\n    void run() {\n        endpoint_plain_.start_accept();\n        endpoint_tls_.start_accept();\n        ios_.run();\n    }\n\n    void on_message(EndpointType* s, websocketpp::connection_hdl hdl, typename EndpointType::message_ptr msg) {\n        echo_message(hdl, msg);\n    }\n\n    std::string get_password() {\n        return \"password\";\n    }\n\n    void on_tls_init(websocketpp::connection_hdl hdl) {\n        auto ctx = std::make_shared<ssl::context>(ssl::context::tlsv1_2);\n        ctx->use_certificate_chain_file(\"path/to/certificate.pem\");\n        ctx->use_private_key_file(\"path/to/private_key.pem\", ssl::context::pem);\n        ctx->set_password_callback([](std::size_t, ssl::context_base::password_purpose) {\n            return \"password\";\n        });\n        return ctx;\n    }\n\nprivate:\n    boost::asio::io_service ios_;\n    websocketpp::server<websocketpp::config::asio_no_tls_client> endpoint_plain_;\n    websocketpp::server<websocketpp::config::asio_tls_client> endpoint_tls_;\n\n    void echo_message(websocketpp::connection_hdl hdl, websocketpp::message_ptr msg) {\n        endpoint_plain_.send(hdl, msg->get_payload(), msg->get_opcode());\n        endpoint_tls_.send(hdl, msg->get_payload(), msg->get_opcode());\n    }\n};\n```"
    ],
    "match_count": 0,
    "pass@3": 0.0,
    "pass@5": 0.0
  },
  {
    "Task_id": 51,
    "Instruction": "Task Description: Implement a function that demonstrates inter-process communication between a parent and child process using pipes in C++. The function should create a pipe, fork a child process, and have the parent process write data to the pipe while the child process reads and displays the data.\n\nFunction Description: The function `pipe_communication` sets up a pipe for communication between a parent and child process. The parent process writes a string to the pipe, and the child process reads and prints the data. The function handles pipe creation, process forking, and proper cleanup of file descriptors.\n\nInput: None\n\nOutput: None (The function prints messages to stdout indicating the progress and results of the pipe communication:\n- \"pipe create error\" if pipe creation fails\n- \"Read data from the pipe is [data]\" from the child process\n- \"Write data [data]\" and \"Parent write over\" from the parent process\n- \"parent close fd[1] over\" when parent completes cleanup)",
    "Canonical_solution": "#include <unistd.h>\n#include <stdio.h>\n#include <cstring>\n#include <cstdlib>\n\nvoid pipe_communication() {\n    int pipe_fd[2];\n    pid_t pid;\n\n    char r_buf[4];\n    char w_buf[100];\n    memset(r_buf,0,sizeof(r_buf));\n    memset(w_buf,0,sizeof(w_buf));\n    int r_num;\n\n    if(pipe(pipe_fd)<0) {\n        printf(\"pipe create error\\n\");\n        return;\n    }\n\n    if((pid=fork())==0) {\n        printf(\"\\n\");\n        close(pipe_fd[1]);\n        sleep(5);\n        while((r_num=read(pipe_fd[0],r_buf,4))!=0)\n            printf(\"Read data from the pipe is %s\\n\", r_buf);\n\n        close(pipe_fd[0]);\n        exit(0);\n    }\n    else if(pid>0) {\n        close(pipe_fd[0]);\n        const char* content = \"1111222233334444\";\n        strncpy(w_buf, content, strlen(content));\n        if(write(pipe_fd[1],w_buf, strlen(content))!=-1) {\n            printf(\"Write data %s\\n\", w_buf);\n            printf(\"Parent write over\\n\");\n        }\n        close(pipe_fd[1]);\n        printf(\"parent close fd[1] over\\n\");\n        wait(&pid);\n    }\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 155,
    "matched_results": [
      "```cpp\n#include <iostream>\n#include <unistd.h>\n#include <sys/wait.h>\n#include <cstring>\n\nvoid pipe_communication() {\n    int pipe_fds[2];\n    if (pipe(pipe_fds) == -1) {\n        std::cout << \"pipe create error\" << std::endl;\n        return;\n    }\n\n    pid_t pid = fork();\n    if (pid == -1) {\n        std::cout << \"pipe create error\" << std::endl;\n        return;\n    }\n\n    if (pid == 0) {\n        // Child process\n        close(pipe_fds[1]); // Close unused write end\n        char buffer[1024];\n        read(pipe_fds[0], buffer, sizeof(buffer) - 1);\n        std::cout << \"Read data from the pipe is \" << buffer << std::endl;\n        close(pipe_fds[0]); // Close read end\n    } else {\n        // Parent process\n        close(pipe_fds[0]); // Close unused read end\n        const char* data = \"Hello, Child!\";\n        write(pipe_fds[1], data, strlen(data));\n        std::cout << \"Write data \" << data << std::endl;\n        std::cout << \"Parent write over\" << std::endl;\n        close(pipe_fds[1]); // Close write end\n        std::cout << \"parent close fd[1] over\" << std::endl;\n    }\n\n    wait(NULL);\n}\n```",
      "```cpp\n#include <iostream>\n#include <unistd.h>\n#include <sys/wait.h>\n#include <fcntl.h>\n\nvoid pipe_communication() {\n    int pipe_fds[2];\n    if (pipe(pipe_fds) == -1) {\n        std::cout << \"pipe create error\" << std::endl;\n        return;\n    }\n\n    pid_t pid = fork();\n    if (pid == -1) {\n        std::cout << \"pipe create error\" << std::endl;\n        return;\n    }\n\n    if (pid == 0) {\n        // Child process\n        close(pipe_fds[1]); // Close unused write end\n        char buffer[100];\n        read(pipe_fds[0], buffer, sizeof(buffer) - 1);\n        std::cout << \"Read data from the pipe is \" << buffer << std::endl;\n        close(pipe_fds[0]); // Close read end\n    } else {\n        // Parent process\n        close(pipe_fds[0]); // Close unused read end\n        const char* message = \"Hello, this is the parent process!\";\n        write(pipe_fds[1], message, strlen(message));\n        std::cout << \"Write data \" << message << std::endl;\n        std::cout << \"Parent write over\" << std::endl;\n        close(pipe_fds[1]); // Close write end\n        std::cout << \"parent close fd[1] over\" << std::endl;\n    }\n}\n```",
      "```cpp\n#include <iostream>\n#include <unistd.h>\n#include <sys/wait.h>\n#include <cstring>\n\nvoid pipe_communication() {\n    int pipefd[2];\n    if (pipe(pipefd) == -1) {\n        std::cerr << \"pipe create error\" << std::endl;\n        return;\n    }\n\n    pid_t pid = fork();\n    if (pid == -1) {\n        std::cerr << \"fork error\" << std::endl;\n        return;\n    }\n\n    if (pid == 0) {\n        // Child process\n        close(pipefd[1]); // Close unused write end\n        char buffer[100];\n        read(pipefd[0], buffer, sizeof(buffer) - 1);\n        buffer[sizeof(buffer) - 1] = '\\0';\n        std::cout << \"Read data from the pipe is \" << buffer << std::endl;\n        close(pipefd[0]); // Close read end\n    } else {\n        // Parent process\n        close(pipefd[0]); // Close unused read end\n        const char *message = \"Hello, this is the parent process!\";\n        write(pipefd[1], message, strlen(message));\n        std::cout << \"Write data \" << message << std::endl;\n        std::cout << \"Parent write over\" << std::endl;\n        close(pipefd[1]); // Close write end\n        std::cout << \"parent close fd[1] over\" << std::endl;\n    }\n\n    wait(NULL); // Wait for child process to finish\n}\n```",
      "```cpp\n#include <iostream>\n#include <unistd.h>\n#include <sys/wait.h>\n#include <cstring>\n\nvoid pipe_communication() {\n    int pipe_fds[2];\n    if (pipe(pipe_fds) == -1) {\n        std::cout << \"pipe create error\" << std::endl;\n        return;\n    }\n\n    pid_t pid = fork();\n    if (pid == -1) {\n        std::cout << \"pipe create error\" << std::endl;\n        return;\n    }\n\n    if (pid == 0) {\n        // Child process\n        close(pipe_fds[1]); // Close unused write end\n        char buffer[100];\n        read(pipe_fds[0], buffer, sizeof(buffer) - 1);\n        std::cout << \"Read data from the pipe is \" << buffer << std::endl;\n        close(pipe_fds[0]); // Close read end\n    } else {\n        // Parent process\n        close(pipe_fds[0]); // Close unused read end\n        char data[] = \"Hello, Child!\";\n        write(pipe_fds[1], data, strlen(data));\n        std::cout << \"Write data \" << data << std::endl;\n        std::cout << \"Parent write over\" << std::endl;\n        close(pipe_fds[1]); // Close write end\n        std::cout << \"parent close fd[1] over\" << std::endl;\n    }\n}\n```",
      "```cpp\n#include <iostream>\n#include <unistd.h>\n#include <sys/wait.h>\n#include <cstring>\n\nvoid pipe_communication() {\n    int pipefd[2];\n    if (pipe(pipefd) == -1) {\n        std::cerr << \"pipe create error\" << std::endl;\n        return;\n    }\n\n    pid_t pid = fork();\n    if (pid == -1) {\n        std::cerr << \"fork error\" << std::endl;\n        return;\n    }\n\n    if (pid == 0) {\n        // Child process\n        close(pipefd[1]); // Close unused write end\n        char buffer[100];\n        ssize_t bytes_read = read(pipefd[0], buffer, sizeof(buffer) - 1);\n        if (bytes_read > 0) {\n            buffer[bytes_read] = '\\0';\n            std::cout << \"Read data from the pipe is \" << buffer << std::endl;\n        }\n        close(pipefd[0]); // Close read end\n    } else {\n        // Parent process\n        close(pipefd[0]); // Close unused read end\n        const char *message = \"Hello from Parent!\";\n        write(pipefd[1], message, strlen(message));\n        std::cout << \"Write data \" << message << std::endl;\n        std::cout << \"Parent write over\" << std::endl;\n        close(pipefd[1]); // Close write end\n        std::cout << \"parent close fd[1] over\" << std::endl;\n    }\n\n    wait(NULL); // Wait for child to finish\n}\n```",
      "```cpp\n#include <iostream>\n#include <unistd.h>\n#include <sys/wait.h>\n#include <cstring>\n\nvoid pipe_communication() {\n    int pipefd[2];\n    if (pipe(pipefd) == -1) {\n        std::cerr << \"pipe create error\" << std::endl;\n        return;\n    }\n\n    pid_t pid = fork();\n    if (pid == -1) {\n        std::cerr << \"fork error\" << std::endl;\n        return;\n    }\n\n    if (pid == 0) {\n        // Child process\n        close(pipefd[1]); // Close unused write end\n        char buffer[1024];\n        ssize_t bytes_read = read(pipefd[0], buffer, sizeof(buffer) - 1);\n        if (bytes_read > 0) {\n            buffer[bytes_read] = '\\0';\n            std::cout << \"Read data from the pipe is \" << buffer << std::endl;\n        }\n        close(pipefd[0]); // Close read end\n    } else {\n        // Parent process\n        close(pipefd[0]); // Close unused read end\n        const char *message = \"Hello, this is the parent process!\";\n        write(pipefd[1], message, strlen(message));\n        std::cout << \"Write data \" << message << std::endl;\n        std::cout << \"Parent write over\" << std::endl;\n        close(pipefd[1]); // Close write end\n        std::cout << \"parent close fd[1] over\" << std::endl;\n    }\n}\n```",
      "```cpp\n#include <iostream>\n#include <unistd.h>\n#include <sys/wait.h>\n#include <cstring>\n\nvoid pipe_communication() {\n    int pipefd[2];\n    if (pipe(pipefd) == -1) {\n        std::cerr << \"pipe create error\" << std::endl;\n        return;\n    }\n\n    pid_t pid = fork();\n    if (pid == -1) {\n        std::cerr << \"fork error\" << std::endl;\n        return;\n    }\n\n    if (pid == 0) {\n        // Child process\n        close(pipefd[1]); // Close unused write end\n        char buffer[100];\n        read(pipefd[0], buffer, sizeof(buffer) - 1);\n        buffer[sizeof(buffer) - 1] = '\\0';\n        std::cout << \"Read data from the pipe is \" << buffer << std::endl;\n        close(pipefd[0]); // Close read end\n    } else {\n        // Parent process\n        close(pipefd[0]); // Close unused read end\n        const char *message = \"Hello from parent!\";\n        write(pipefd[1], message, strlen(message));\n        std::cout << \"Write data \" << message << std::endl;\n        std::cout << \"Parent write over\" << std::endl;\n        close(pipefd[1]); // Close write end\n        std::cout << \"parent close fd[1] over\" << std::endl;\n    }\n\n    wait(NULL);\n}\n```",
      "```cpp\n#include <iostream>\n#include <unistd.h>\n#include <sys/wait.h>\n#include <cstring>\n\nvoid pipe_communication() {\n    int pipefd[2];\n    if (pipe(pipefd) == -1) {\n        std::cerr << \"pipe create error\" << std::endl;\n        return;\n    }\n\n    pid_t pid = fork();\n    if (pid == -1) {\n        std::cerr << \"fork error\" << std::endl;\n        return;\n    }\n\n    if (pid == 0) {\n        // Child process\n        close(pipefd[1]); // Close unused write end\n        char buffer[1024];\n        ssize_t bytes_read = read(pipefd[0], buffer, sizeof(buffer) - 1);\n        if (bytes_read > 0) {\n            buffer[bytes_read] = '\\0';\n            std::cout << \"Read data from the pipe is \" << buffer << std::endl;\n        }\n        close(pipefd[0]); // Close read end\n        _exit(0);\n    } else {\n        // Parent process\n        close(pipefd[0]); // Close unused read end\n        const char *message = \"Hello, this is the parent process!\";\n        write(pipefd[1], message, strlen(message));\n        std::cout << \"Write data \" << message << std::endl;\n        std::cout << \"Parent write over\" << std::endl;\n        close(pipefd[1]); // Close write end\n        std::cout << \"parent close fd[1] over\" << std::endl;\n        wait(NULL); // Wait for child to finish\n    }\n}\n```",
      "```cpp\n#include <iostream>\n#include <unistd.h>\n#include <sys/wait.h>\n#include <cstring>\n\nvoid pipe_communication() {\n    int pipefd[2];\n    if (pipe(pipefd) == -1) {\n        std::cerr << \"pipe create error\" << std::endl;\n        return;\n    }\n\n    pid_t pid = fork();\n    if (pid == -1) {\n        std::cerr << \"fork error\" << std::endl;\n        return;\n    }\n\n    if (pid == 0) {\n        // Child process\n        close(pipefd[1]); // Close unused write end\n        char buffer[100];\n        read(pipefd[0], buffer, sizeof(buffer) - 1);\n        buffer[sizeof(buffer) - 1] = '\\0';\n        std::cout << \"Read data from the pipe is \" << buffer << std::endl;\n        close(pipefd[0]); // Close read end\n    } else {\n        // Parent process\n        close(pipefd[0]); // Close unused read end\n        const char* message = \"Hello from parent!\";\n        write(pipefd[1], message, strlen(message));\n        std::cout << \"Write data \" << message << std::endl;\n        std::cout << \"Parent write over\" << std::endl;\n        close(pipefd[1]); // Close write end\n        std::cout << \"parent close fd[1] over\" << std::endl;\n    }\n\n    wait(NULL);\n}\n```",
      "```cpp\n#include <iostream>\n#include <unistd.h>\n#include <sys/types.h>\n#include <sys/wait.h>\n\nvoid pipe_communication() {\n    int pipefd[2];\n    if (pipe(pipefd) == -1) {\n        std::cerr << \"pipe create error\" << std::endl;\n        return;\n    }\n\n    pid_t pid = fork();\n    if (pid == -1) {\n        std::cerr << \"fork error\" << std::endl;\n        return;\n    }\n\n    if (pid == 0) {\n        // Child process\n        close(pipefd[1]); // Close unused write end\n        char buffer[100];\n        ssize_t bytes_read = read(pipefd[0], buffer, sizeof(buffer) - 1);\n        if (bytes_read > 0) {\n            buffer[bytes_read] = '\\0';\n            std::cout << \"Read data from the pipe is \" << buffer << std::endl;\n        }\n        close(pipefd[0]); // Close read end\n    } else {\n        // Parent process\n        close(pipefd[0]); // Close unused read end\n        const char* message = \"Hello, this is the parent process!\";\n        write(pipefd[1], message, strlen(message));\n        std::cout << \"Write data \" << message << std::endl;\n        std::cout << \"Parent write over\" << std::endl;\n        close(pipefd[1]); // Close write end\n        std::cout << \"parent close fd[1] over\" << std::endl;\n    }\n\n    wait(NULL); // Wait for child process to finish\n}\n```"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 6,
    "Instruction": "Task Description: Implement a multi-threaded HTTP download manager using libcurl in C++ that can handle multiple download tasks concurrently, avoid duplicate downloads, and manage resources efficiently.\n\nClass Description: The DownloadPool class manages a pool of worker threads that process download tasks. Each task downloads a file from a given URL and saves it to a specified output path. The class ensures thread safety and prevents duplicate downloads.\n\nAttributes:\n- m_threads: std::vector<std::thread> - Collection of worker threads\n- m_queue: std::queue<Task> - Queue of pending download tasks\n- m_urls: std::unordered_set<std::string> - Set of unique task identifiers to prevent duplicates\n- m_mtx: std::mutex - Mutex for thread synchronization\n- m_noMoreTask: bool - Flag indicating no more tasks will be added\n\nMethods:\n- DownloadPool() -> void - Constructor initializes libcurl and creates worker threads\n- ~DownloadPool() -> void - Destructor cleans up libcurl resources\n- addTask(const std::string& url, const std::string& output) -> void - Adds a new download task if not already present\n- setNoMoreTask() -> void - Signals that no more tasks will be added\n- finishAndWaitForExit() -> void - Waits for all threads to complete current tasks\n- run() -> void - Worker thread function that processes tasks from the queue\n\nTask Class Description: The Task class represents an individual download task with URL and output file path.\n\nAttributes:\n- m_url: std::string - URL to download from\n- m_output: std::string - Local file path to save to\n\nMethods:\n- run() -> void - Executes the download task using libcurl\n- writeData(void* buffer, size_t size, size_t nmemb) -> size_t - Callback function for writing received data to file",
    "Canonical_solution": "#include <curl/curl.h>\n#include <iostream>\n#include <fstream>\n#include <string>\n#include <thread>\n#include <mutex>\n#include <queue>\n#include <unordered_set>\n\nclass Task\n{\npublic:\n    Task(const std::string& url, const std::string& output) : m_url(url), m_output(output) {}\n    \n    void run()\n    {\n        std::ofstream output(m_output, std::fstream::in | std::fstream::out | std::fstream::trunc);\n        output.close();\n        \n        CURL *curl_handler = curl_easy_init();\n        curl_easy_setopt(curl_handler, CURLOPT_URL, m_url.c_str());\n        curl_easy_setopt(curl_handler, CURLOPT_TIMEOUT, 60);\n        curl_easy_setopt(curl_handler, CURLOPT_WRITEFUNCTION, &Task::writeData);\n        curl_easy_setopt(curl_handler, CURLOPT_WRITEDATA, this);\n\n        curl_easy_perform(curl_handler);\n        \n        curl_easy_cleanup(curl_handler);\n    }\n\n    size_t writeData(void *buffer, size_t size, size_t nmemb)\n    {\n        std::ofstream file;\n        file.open(m_output, std::fstream::in | std::fstream::out | std::fstream::app | std::fstream::binary);\n        size_t bytesToWrite = size * nmemb;\n        file.write(reinterpret_cast<const char *>(buffer), bytesToWrite);\n        file.close();\n        \n        return bytesToWrite;\n    }\n\nprivate:\n    std::string m_url;\n    std::string m_output;\n};\n\nclass DownloadPool\n{\npublic:\n    DownloadPool()\n    {\n        m_noMoreTask = false;\n        curl_global_init(CURL_GLOBAL_ALL);\n        \n        for (int idx = 0; idx < 4; idx++)\n        {\n            m_threads.push_back(std::thread(&DownloadPool::run, this));\n        }\n    }\n\n    ~DownloadPool()\n    {\n        curl_global_cleanup();\n    }\n\n    void addTask(const std::string &url, const std::string& output)\n    {\n        std::string uid = url + output;\n        bool existed = false;\n        Task task(url, output);\n        m_mtx.lock();\n        if (!(existed = (m_urls.find(uid) != m_urls.cend())))\n        {\n            m_urls.insert(uid);\n            m_queue.push(task);\n        }\n        m_mtx.unlock();\n    }\n\n    void setNoMoreTask()\n    {\n        m_mtx.lock();\n        m_noMoreTask = true;\n        m_mtx.unlock();\n    }\n\n    void finishAndWaitForExit()\n    {\n        setNoMoreTask();\n        for (auto& thread : m_threads)\n        {\n            thread.join();\n        }\n    }\n\nprivate:\n    void run()\n    {\n        while(true)\n        {\n            bool found = false;\n            Task task;\n            \n            m_mtx.lock();\n            if (!m_queue.empty())\n            {\n                task = m_queue.front();\n                m_queue.pop();\n                found = true;\n            }\n            bool noMoreTask = m_noMoreTask;\n            m_mtx.unlock();\n            \n            if (found)\n            {\n                task.run();\n                continue;\n            }\n            if (noMoreTask)\n            {\n                break;\n            }\n            std::this_thread::sleep_for(std::chrono::milliseconds(100));\n        }\n    }\n\n    std::vector<std::thread> m_threads;\n    std::queue<Task> m_queue;\n    std::unordered_set<std::string> m_urls;\n    std::mutex m_mtx;\n    bool m_noMoreTask;\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 146,
    "matched_results": [
      "```cpp\n#include <iostream>\n#include <vector>\n#include <queue>\n#include <unordered_set>\n#include <mutex>\n#include <thread>\n#include <condition_variable>\n#include <atomic>\n#include <curl/curl.h>\n\nclass Task {\npublic:\n    std::string m_url;\n    std::string m_output;\n\n    Task(const std::string& url, const std::string& output)\n        : m_url(url), m_output(output) {}\n\n    void run() {\n        CURL* curl = curl_easy_init();\n        if (curl) {\n            FILE* fp = fopen(m_output.c_str(), \"wb\");\n            if (fp) {\n                curl_easy_setopt(curl, CURLOPT_URL, m_url.c_str());\n                curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, writeData);\n                curl_easy_setopt(curl, CURLOPT_WRITEDATA, fp);\n                CURLcode res = curl_easy_perform(curl);\n                fclose(fp);\n                curl_easy_cleanup(curl);\n                if (res != CURLE_OK) {\n                    std::cerr << \"Failed to download \" << m_url << std::endl;\n                }\n            } else {\n                std::cerr << \"Failed to open file \" << m_output << std::endl;\n            }\n        }\n    }\n\n    static size_t writeData(void* buffer, size_t size, size_t nmemb, void* userp) {\n        FILE* stream = (FILE*)userp;\n        size_t written = fwrite(buffer, size, nmemb, stream);\n        return written;\n    }\n};\n\nclass DownloadPool {\nprivate:\n    std::vector<std::thread> m_threads;\n    std::queue<Task> m_queue;\n    std::unordered_set<std::string> m_urls;\n    std::mutex m_mtx;\n    std::condition_variable m_cv;\n    std::atomic<bool> m_noMoreTask;\n\npublic:\n    DownloadPool() {\n        m_noMoreTask = false;\n        for (int i = 0; i < 4; ++i) {\n            m_threads.emplace_back([this] { this->run(); });\n        }\n    }\n\n    ~DownloadPool() {\n        setNoMoreTask();\n        for (auto& t : m_threads) {\n            if (t.joinable()) {\n                t.join();\n            }\n        }\n    }\n\n    void addTask(const std::string& url, const std::string& output) {\n        std::lock_guard<std::mutex> lock(m_mtx);\n        if (m_urls.find(url) == m_urls.end()) {\n            m_urls.insert(url);\n            m_queue.push(Task(url, output));\n            m_cv.notify_one();\n        }\n    }\n\n    void setNoMoreTask() {\n        m_noMoreTask = true;\n        m_cv.notify_all();\n    }\n\n    void finishAndWaitForExit() {\n        setNoMoreTask();\n        for (auto& t : m_threads) {\n            if (t.joinable()) {\n                t.join();\n            }\n        }\n    }\n\n    void run() {\n        while (true) {\n            Task task;\n            {\n                std::unique_lock<std::mutex> lock(m_mtx);\n                m_cv.wait(lock, [this] { return !m_queue.empty() || m_noMoreTask; });\n                if (m_noMoreTask && m_queue.empty()) {\n                    break;\n                }\n                task = m_queue.front();\n                m_queue.pop();\n            }\n            task.run();\n        }\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <thread>\n#include <vector>\n#include <queue>\n#include <unordered_set>\n#include <mutex>\n#include <condition_variable>\n#include <atomic>\n#include <curl/curl.h>\n\nclass Task {\npublic:\n    std::string m_url;\n    std::string m_output;\n\n    Task(const std::string& url, const std::string& output)\n        : m_url(url), m_output(output) {}\n\n    void run() {\n        CURL* curl = curl_easy_init();\n        if (curl) {\n            FILE* fp = fopen(m_output.c_str(), \"wb\");\n            if (fp) {\n                curl_easy_setopt(curl, CURLOPT_URL, m_url.c_str());\n                curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, writeData);\n                curl_easy_setopt(curl, CURLOPT_WRITEDATA, fp);\n                CURLcode res = curl_easy_perform(curl);\n                fclose(fp);\n                curl_easy_cleanup(curl);\n                if (res != CURLE_OK) {\n                    std::cerr << \"Curl error: \" << curl_easy_strerror(res) << std::endl;\n                }\n            } else {\n                std::cerr << \"Failed to open file: \" << m_output << std::endl;\n            }\n        }\n    }\n\n    static size_t writeData(void* buffer, size_t size, size_t nmemb, void* userp) {\n        FILE* stream = (FILE*)userp;\n        size_t written = fwrite(buffer, size, nmemb, stream);\n        return written;\n    }\n};\n\nclass DownloadPool {\nprivate:\n    std::vector<std::thread> m_threads;\n    std::queue<Task> m_queue;\n    std::unordered_set<std::string> m_urls;\n    std::mutex m_mtx;\n    std::condition_variable m_cv;\n    std::atomic<bool> m_noMoreTask;\n\npublic:\n    DownloadPool() {\n        CURLcode res = curl_global_init(CURL_GLOBAL_ALL);\n        if (res != CURLE_OK) {\n            std::cerr << \"Curl global init failed: \" << curl_easy_strerror(res) << std::endl;\n        }\n        for (int i = 0; i < 4; ++i) {\n            m_threads.emplace_back([this]() { run(); });\n        }\n    }\n\n    ~DownloadPool() {\n        setNoMoreTask();\n        for (auto& t : m_threads) {\n            if (t.joinable()) {\n                t.join();\n            }\n        }\n        curl_global_cleanup();\n    }\n\n    void addTask(const std::string& url, const std::string& output) {\n        std::lock_guard<std::mutex> lock(m_mtx);\n        if (m_urls.find(url) == m_urls.end()) {\n            m_urls.insert(url);\n            m_queue.push(Task(url, output));\n            m_cv.notify_one();\n        }\n    }\n\n    void setNoMoreTask() {\n        m_noMoreTask.store(true);\n        m_cv.notify_all();\n    }\n\n    void finishAndWaitForExit() {\n        setNoMoreTask();\n        std::unique_lock<std::mutex> lock(m_mtx);\n        m_cv.wait(lock, [this]() { return m_queue.empty() && m_noMoreTask.load(); });\n    }\n\n    void run() {\n        while (true) {\n            Task task;\n            {\n                std::unique_lock<std::mutex> lock(m_mtx);\n                m_cv.wait(lock, [this]() { return !m_queue.empty() || m_noMoreTask.load(); });\n                if (!m_queue.empty()) {\n                    task = m_queue.front();\n                    m_queue.pop();\n                }\n            }\n            if (task.m_url.empty()) {\n                break;\n            }\n            task.run();\n        }\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <vector>\n#include <queue>\n#include <unordered_set>\n#include <mutex>\n#include <thread>\n#include <condition_variable>\n#include <atomic>\n#include <curl/curl.h>\n\nclass Task {\npublic:\n    std::string m_url;\n    std::string m_output;\n\n    Task(const std::string& url, const std::string& output) : m_url(url), m_output(output) {}\n\n    void run() {\n        CURL* curl = curl_easy_init();\n        if (curl) {\n            FILE* fp = fopen(m_output.c_str(), \"wb\");\n            if (fp) {\n                curl_easy_setopt(curl, CURLOPT_URL, m_url.c_str());\n                curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, writeData);\n                curl_easy_setopt(curl, CURLOPT_WRITEDATA, fp);\n                CURLcode res = curl_easy_perform(curl);\n                if (res != CURLE_OK) {\n                    std::cerr << \"Curl failed: \" << curl_easy_strerror(res) << std::endl;\n                }\n                fclose(fp);\n            }\n            curl_easy_cleanup(curl);\n        }\n    }\n\n    static size_t writeData(void* buffer, size_t size, size_t nmemb, void* userp) {\n        FILE* stream = (FILE*)userp;\n        size_t written = fwrite(buffer, size, nmemb, stream);\n        return written;\n    }\n};\n\nclass DownloadPool {\nprivate:\n    std::vector<std::thread> m_threads;\n    std::queue<Task> m_queue;\n    std::unordered_set<std::string> m_urls;\n    std::mutex m_mtx;\n    std::condition_variable m_cv;\n    std::atomic<bool> m_noMoreTask;\n\npublic:\n    DownloadPool() {\n        CURLcode res = curl_global_init(CURL_GLOBAL_ALL);\n        if (res != CURLE_OK) {\n            std::cerr << \"Curl global init failed: \" << curl_easy_strerror(res) << std::endl;\n        }\n        for (int i = 0; i < 4; ++i) {\n            m_threads.emplace_back(&DownloadPool::run, this);\n        }\n    }\n\n    ~DownloadPool() {\n        setNoMoreTask();\n        for (auto& t : m_threads) {\n            if (t.joinable()) {\n                t.join();\n            }\n        }\n        curl_global_cleanup();\n    }\n\n    void addTask(const std::string& url, const std::string& output) {\n        std::lock_guard<std::mutex> lock(m_mtx);\n        if (m_urls.find(url) == m_urls.end()) {\n            m_urls.insert(url);\n            m_queue.push(Task(url, output));\n            m_cv.notify_one();\n        }\n    }\n\n    void setNoMoreTask() {\n        m_noMoreTask.store(true);\n        m_cv.notify_all();\n    }\n\n    void finishAndWaitForExit() {\n        setNoMoreTask();\n        for (auto& t : m_threads) {\n            if (t.joinable()) {\n                t.join();\n            }\n        }\n    }\n\n    void run() {\n        while (true) {\n            Task task;\n            {\n                std::unique_lock<std::mutex> lock(m_mtx);\n                m_cv.wait(lock, [this]{ return !m_queue.empty() || m_noMoreTask.load(); });\n                if (!m_queue.empty()) {\n                    task = m_queue.front();\n                    m_queue.pop();\n                }\n            }\n            if (!task.m_url.empty()) {\n                task.run();\n            }\n            if (m_noMoreTask.load() && m_queue.empty()) {\n                break;\n            }\n        }\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <vector>\n#include <queue>\n#include <unordered_set>\n#include <mutex>\n#include <thread>\n#include <condition_variable>\n#include <atomic>\n#include <curl/curl.h>\n\nclass Task {\npublic:\n    std::string m_url;\n    std::string m_output;\n\n    Task(const std::string& url, const std::string& output)\n        : m_url(url), m_output(output) {}\n\n    void run() {\n        CURL* curl = curl_easy_init();\n        if (curl) {\n            FILE* fp = fopen(m_output.c_str(), \"wb\");\n            if (fp) {\n                curl_easy_setopt(curl, CURLOPT_URL, m_url.c_str());\n                curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, writeData);\n                curl_easy_setopt(curl, CURLOPT_WRITEDATA, fp);\n                CURLcode res = curl_easy_perform(curl);\n                fclose(fp);\n                curl_easy_cleanup(curl);\n                if (res != CURLE_OK) {\n                    std::cerr << \"curl_easy_perform() failed: \" << curl_easy_strerror(res) << std::endl;\n                }\n            } else {\n                std::cerr << \"Failed to open file for writing: \" << m_output << std::endl;\n            }\n        }\n    }\n\n    static size_t writeData(void* buffer, size_t size, size_t nmemb, void* userp) {\n        FILE* stream = (FILE*)userp;\n        size_t written = fwrite(buffer, size, nmemb, stream);\n        return written;\n    }\n};\n\nclass DownloadPool {\nprivate:\n    std::vector<std::thread> m_threads;\n    std::queue<Task> m_queue;\n    std::unordered_set<std::string> m_urls;\n    std::mutex m_mtx;\n    std::condition_variable m_cv;\n    std::atomic<bool> m_noMoreTask;\n\npublic:\n    DownloadPool() {\n        m_noMoreTask = false;\n        for (int i = 0; i < 4; ++i) {\n            m_threads.emplace_back([this] { this->run(); });\n        }\n    }\n\n    ~DownloadPool() {\n        setNoMoreTask();\n        for (auto& t : m_threads) {\n            if (t.joinable()) {\n                t.join();\n            }\n        }\n    }\n\n    void addTask(const std::string& url, const std::string& output) {\n        std::lock_guard<std::mutex> lock(m_mtx);\n        if (m_urls.find(url) == m_urls.end()) {\n            m_urls.insert(url);\n            m_queue.push(Task(url, output));\n            m_cv.notify_one();\n        }\n    }\n\n    void setNoMoreTask() {\n        m_noMoreTask = true;\n        m_cv.notify_all();\n    }\n\n    void finishAndWaitForExit() {\n        setNoMoreTask();\n        for (auto& t : m_threads) {\n            if (t.joinable()) {\n                t.join();\n            }\n        }\n    }\n\n    void run() {\n        while (true) {\n            Task task;\n            {\n                std::unique_lock<std::mutex> lock(m_mtx);\n                m_cv.wait(lock, [this] { return !m_queue.empty() || m_noMoreTask; });\n                if (m_queue.empty() && m_noMoreTask) {\n                    break;\n                }\n                task = m_queue.front();\n                m_queue.pop();\n            }\n            task.run();\n        }\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <thread>\n#include <vector>\n#include <queue>\n#include <unordered_set>\n#include <mutex>\n#include <string>\n#include <curl/curl.h>\n\nclass Task {\npublic:\n    std::string m_url;\n    std::string m_output;\n\n    Task(const std::string& url, const std::string& output)\n        : m_url(url), m_output(output) {}\n\n    void run() {\n        CURL* curl = curl_easy_init();\n        if (curl) {\n            FILE* fp = fopen(m_output.c_str(), \"wb\");\n            if (fp) {\n                curl_easy_setopt(curl, CURLOPT_URL, m_url.c_str());\n                curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, writeData);\n                curl_easy_setopt(curl, CURLOPT_WRITEDATA, fp);\n                CURLcode res = curl_easy_perform(curl);\n                fclose(fp);\n                curl_easy_cleanup(curl);\n                if (res != CURLE_OK) {\n                    std::cerr << \"curl_easy_perform() failed: \" << curl_easy_strerror(res) << std::endl;\n                }\n            } else {\n                std::cerr << \"Failed to open file for writing: \" << m_output << std::endl;\n            }\n        }\n    }\n\n    static size_t writeData(void* buffer, size_t size, size_t nmemb, void* userp) {\n        FILE* stream = (FILE*)userp;\n        size_t written = fwrite(buffer, size, nmemb, stream);\n        return written;\n    }\n};\n\nclass DownloadPool {\nprivate:\n    std::vector<std::thread> m_threads;\n    std::queue<Task> m_queue;\n    std::unordered_set<std::string> m_urls;\n    std::mutex m_mtx;\n    bool m_noMoreTask;\n\n    void run() {\n        while (true) {\n            std::unique_lock<std::mutex> lock(m_mtx);\n            if (m_queue.empty() && m_noMoreTask) {\n                break;\n            }\n            if (!m_queue.empty()) {\n                Task task = m_queue.front();\n                m_queue.pop();\n                lock.unlock();\n                task.run();\n                lock.lock();\n                m_urls.erase(task.m_url);\n            } else {\n                lock.unlock();\n                std::this_thread::yield();\n                lock.lock();\n            }\n        }\n    }\n\npublic:\n    DownloadPool() {\n        m_noMoreTask = false;\n        for (int i = 0; i < 4; ++i) {\n            m_threads.emplace_back([this]() { run(); });\n        }\n    }\n\n    ~DownloadPool() {\n        setNoMoreTask();\n        for (auto& t : m_threads) {\n            if (t.joinable()) {\n                t.join();\n            }\n        }\n    }\n\n    void addTask(const std::string& url, const std::string& output) {\n        std::unique_lock<std::mutex> lock(m_mtx);\n        if (m_urls.find(url) == m_urls.end()) {\n            m_urls.insert(url);\n            m_queue.push(Task(url, output));\n        }\n    }\n\n    void setNoMoreTask() {\n        std::unique_lock<std::mutex> lock(m_mtx);\n        m_noMoreTask = true;\n        lock.unlock();\n        for (auto& t : m_threads) {\n            t.notify_all();\n        }\n    }\n\n    void finishAndWaitForExit() {\n        setNoMoreTask();\n        for (auto& t : m_threads) {\n            if (t.joinable()) {\n                t.join();\n            }\n        }\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <thread>\n#include <vector>\n#include <queue>\n#include <unordered_set>\n#include <mutex>\n#include <condition_variable>\n#include <atomic>\n#include <curl/curl.h>\n\nclass Task {\npublic:\n    std::string m_url;\n    std::string m_output;\n\n    Task(const std::string& url, const std::string& output)\n        : m_url(url), m_output(output) {}\n\n    void run() {\n        CURL* curl = curl_easy_init();\n        if (curl) {\n            FILE* fp = fopen(m_output.c_str(), \"wb\");\n            if (fp) {\n                curl_easy_setopt(curl, CURLOPT_URL, m_url.c_str());\n                curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, writeData);\n                curl_easy_setopt(curl, CURLOPT_WRITEDATA, fp);\n                CURLcode res = curl_easy_perform(curl);\n                fclose(fp);\n                curl_easy_cleanup(curl);\n                if (res != CURLE_OK) {\n                    std::cerr << \"curl_easy_perform() failed: \" << curl_easy_strerror(res) << std::endl;\n                }\n            } else {\n                std::cerr << \"Failed to open file for writing: \" << m_output << std::endl;\n            }\n        }\n    }\n\n    static size_t writeData(void* buffer, size_t size, size_t nmemb, void* userp) {\n        FILE* stream = (FILE*)userp;\n        size_t written = fwrite(buffer, size, nmemb, stream);\n        return written;\n    }\n};\n\nclass DownloadPool {\nprivate:\n    std::vector<std::thread> m_threads;\n    std::queue<Task> m_queue;\n    std::unordered_set<std::string> m_urls;\n    std::mutex m_mtx;\n    std::condition_variable m_cv;\n    std::atomic<bool> m_noMoreTask;\n\npublic:\n    DownloadPool() {\n        m_noMoreTask = false;\n        for (int i = 0; i < 4; ++i) {\n            m_threads.emplace_back([this] { this->run(); });\n        }\n    }\n\n    ~DownloadPool() {\n        setNoMoreTask();\n        for (auto& t : m_threads) {\n            if (t.joinable()) {\n                t.join();\n            }\n        }\n    }\n\n    void addTask(const std::string& url, const std::string& output) {\n        std::lock_guard<std::mutex> lock(m_mtx);\n        if (m_urls.find(url) == m_urls.end()) {\n            m_urls.insert(url);\n            m_queue.push(Task(url, output));\n            m_cv.notify_one();\n        }\n    }\n\n    void setNoMoreTask() {\n        m_noMoreTask = true;\n        m_cv.notify_all();\n    }\n\n    void finishAndWaitForExit() {\n        setNoMoreTask();\n        std::unique_lock<std::mutex> lock(m_mtx);\n        m_cv.wait(lock, [this] { return m_queue.empty(); });\n    }\n\n    void run() {\n        while (true) {\n            Task task;\n            {\n                std::unique_lock<std::mutex> lock(m_mtx);\n                m_cv.wait(lock, [this] { return !m_queue.empty() || m_noMoreTask; });\n                if (m_noMoreTask && m_queue.empty()) {\n                    break;\n                }\n                task = m_queue.front();\n                m_queue.pop();\n            }\n            task.run();\n        }\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <thread>\n#include <vector>\n#include <queue>\n#include <unordered_set>\n#include <mutex>\n#include <condition_variable>\n#include <atomic>\n#include <curl/curl.h>\n\nclass Task {\npublic:\n    std::string m_url;\n    std::string m_output;\n\n    Task(const std::string& url, const std::string& output)\n        : m_url(url), m_output(output) {}\n\n    void run() {\n        CURL* curl = curl_easy_init();\n        if (curl) {\n            FILE* fp = fopen(m_output.c_str(), \"wb\");\n            if (fp) {\n                curl_easy_setopt(curl, CURLOPT_URL, m_url.c_str());\n                curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, writeData);\n                curl_easy_setopt(curl, CURLOPT_WRITEDATA, fp);\n                CURLcode res = curl_easy_perform(curl);\n                fclose(fp);\n                curl_easy_cleanup(curl);\n                if (res != CURLE_OK) {\n                    std::cerr << \"curl_easy_perform() failed: \" << curl_easy_strerror(res) << std::endl;\n                }\n            } else {\n                std::cerr << \"Failed to open file for writing: \" << m_output << std::endl;\n            }\n        }\n    }\n\n    static size_t writeData(void* buffer, size_t size, size_t nmemb, void* userp) {\n        FILE* stream = (FILE*)userp;\n        size_t written = fwrite(buffer, size, nmemb, stream);\n        return written;\n    }\n};\n\nclass DownloadPool {\nprivate:\n    std::vector<std::thread> m_threads;\n    std::queue<Task> m_queue;\n    std::unordered_set<std::string> m_urls;\n    std::mutex m_mtx;\n    std::condition_variable m_cv;\n    std::atomic<bool> m_noMoreTask;\n\npublic:\n    DownloadPool() {\n        CURLcode res = curl_global_init(CURL_GLOBAL_ALL);\n        if (res != CURLE_OK) {\n            std::cerr << \"curl_global_init() failed: \" << curl_easy_strerror(res) << std::endl;\n        }\n        for (int i = 0; i < 4; ++i) {\n            m_threads.emplace_back([this]() { run(); });\n        }\n    }\n\n    ~DownloadPool() {\n        setNoMoreTask();\n        for (auto& t : m_threads) {\n            if (t.joinable()) {\n                t.join();\n            }\n        }\n        curl_global_cleanup();\n    }\n\n    void addTask(const std::string& url, const std::string& output) {\n        std::lock_guard<std::mutex> lock(m_mtx);\n        if (m_urls.find(url) == m_urls.end()) {\n            m_urls.insert(url);\n            m_queue.push(Task(url, output));\n            m_cv.notify_one();\n        }\n    }\n\n    void setNoMoreTask() {\n        m_noMoreTask = true;\n        m_cv.notify_all();\n    }\n\n    void finishAndWaitForExit() {\n        setNoMoreTask();\n        for (auto& t : m_threads) {\n            if (t.joinable()) {\n                t.join();\n            }\n        }\n    }\n\n    void run() {\n        while (true) {\n            std::unique_lock<std::mutex> lock(m_mtx);\n            m_cv.wait(lock, [this]() { return !m_queue.empty() || m_noMoreTask; });\n\n            if (m_noMoreTask && m_queue.empty()) {\n                break;\n            }\n\n            Task task = m_queue.front();\n            m_queue.pop();\n            lock.unlock();\n\n            task.run();\n        }\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <thread>\n#include <vector>\n#include <queue>\n#include <unordered_set>\n#include <mutex>\n#include <string>\n#include <curl/curl.h>\n\nclass Task {\npublic:\n    std::string m_url;\n    std::string m_output;\n\n    Task(const std::string& url, const std::string& output)\n        : m_url(url), m_output(output) {}\n\n    void run() {\n        CURL* curl = curl_easy_init();\n        if (curl) {\n            FILE* fp = fopen(m_output.c_str(), \"wb\");\n            if (fp) {\n                curl_easy_setopt(curl, CURLOPT_URL, m_url.c_str());\n                curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, writeData);\n                curl_easy_setopt(curl, CURLOPT_WRITEDATA, fp);\n                CURLcode res = curl_easy_perform(curl);\n                if (res != CURLE_OK) {\n                    std::cerr << \"curl_easy_perform() failed: \" << curl_easy_strerror(res) << std::endl;\n                }\n                fclose(fp);\n            }\n            curl_easy_cleanup(curl);\n        }\n    }\n\n    static size_t writeData(void* buffer, size_t size, size_t nmemb, void* userp) {\n        FILE* stream = (FILE*)userp;\n        size_t written = fwrite(buffer, size, nmemb, stream);\n        return written;\n    }\n};\n\nclass DownloadPool {\nprivate:\n    std::vector<std::thread> m_threads;\n    std::queue<Task> m_queue;\n    std::unordered_set<std::string> m_urls;\n    std::mutex m_mtx;\n    bool m_noMoreTask;\n\npublic:\n    DownloadPool() {\n        curl_global_init(CURL_GLOBAL_ALL);\n        for (int i = 0; i < 4; ++i) {\n            m_threads.emplace_back([this]() { this->run(); });\n        }\n    }\n\n    ~DownloadPool() {\n        setNoMoreTask();\n        for (auto& t : m_threads) {\n            if (t.joinable()) {\n                t.join();\n            }\n        }\n        curl_global_cleanup();\n    }\n\n    void addTask(const std::string& url, const std::string& output) {\n        std::lock_guard<std::mutex> lock(m_mtx);\n        if (m_urls.find(url) == m_urls.end()) {\n            m_urls.insert(url);\n            m_queue.push(Task(url, output));\n        }\n    }\n\n    void setNoMoreTask() {\n        std::lock_guard<std::mutex> lock(m_mtx);\n        m_noMoreTask = true;\n    }\n\n    void finishAndWaitForExit() {\n        setNoMoreTask();\n        while (!m_queue.empty()) {\n            std::this_thread::yield();\n        }\n    }\n\n    void run() {\n        while (true) {\n            Task task;\n            {\n                std::lock_guard<std::mutex> lock(m_mtx);\n                if (m_queue.empty() && m_noMoreTask) {\n                    break;\n                }\n                if (!m_queue.empty()) {\n                    task = m_queue.front();\n                    m_queue.pop();\n                }\n            }\n            if (!task.m_url.empty()) {\n                task.run();\n            }\n        }\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <vector>\n#include <queue>\n#include <unordered_set>\n#include <mutex>\n#include <thread>\n#include <condition_variable>\n#include <atomic>\n#include <curl/curl.h>\n\nclass Task {\npublic:\n    std::string m_url;\n    std::string m_output;\n\n    Task(const std::string& url, const std::string& output)\n        : m_url(url), m_output(output) {}\n\n    void run() {\n        CURL* curl = curl_easy_init();\n        if (curl) {\n            FILE* fp = fopen(m_output.c_str(), \"wb\");\n            if (fp) {\n                curl_easy_setopt(curl, CURLOPT_URL, m_url.c_str());\n                curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, writeData);\n                curl_easy_setopt(curl, CURLOPT_WRITEDATA, fp);\n                CURLcode res = curl_easy_perform(curl);\n                fclose(fp);\n                curl_easy_cleanup(curl);\n                if (res != CURLE_OK) {\n                    std::cerr << \"curl_easy_perform() failed: \" << curl_easy_strerror(res) << std::endl;\n                }\n            } else {\n                std::cerr << \"Failed to open file for writing: \" << m_output << std::endl;\n            }\n        }\n    }\n\n    static size_t writeData(void* buffer, size_t size, size_t nmemb, void* userp) {\n        FILE* stream = (FILE*)userp;\n        size_t written = fwrite(buffer, size, nmemb, stream);\n        return written;\n    }\n};\n\nclass DownloadPool {\nprivate:\n    std::vector<std::thread> m_threads;\n    std::queue<Task> m_queue;\n    std::unordered_set<std::string> m_urls;\n    std::mutex m_mtx;\n    std::condition_variable m_cv;\n    std::atomic<bool> m_noMoreTask;\n\npublic:\n    DownloadPool() {\n        CURLcode res = curl_global_init(CURL_GLOBAL_ALL);\n        if (res != CURLE_OK) {\n            std::cerr << \"curl_global_init() failed: \" << curl_easy_strerror(res) << std::endl;\n        }\n        for (int i = 0; i < 4; ++i) {\n            m_threads.emplace_back([this]() { run(); });\n        }\n    }\n\n    ~DownloadPool() {\n        setNoMoreTask();\n        for (auto& t : m_threads) {\n            if (t.joinable()) {\n                t.join();\n            }\n        }\n        curl_global_cleanup();\n    }\n\n    void addTask(const std::string& url, const std::string& output) {\n        std::lock_guard<std::mutex> lock(m_mtx);\n        if (m_urls.find(url) == m_urls.end()) {\n            m_urls.insert(url);\n            m_queue.push(Task(url, output));\n            m_cv.notify_one();\n        }\n    }\n\n    void setNoMoreTask() {\n        m_noMoreTask = true;\n        m_cv.notify_all();\n    }\n\n    void finishAndWaitForExit() {\n        setNoMoreTask();\n        std::unique_lock<std::mutex> lock(m_mtx);\n        m_cv.wait(lock, [this]() { return m_queue.empty() && m_noMoreTask; });\n    }\n\n    void run() {\n        while (true) {\n            Task task;\n            {\n                std::unique_lock<std::mutex> lock(m_mtx);\n                m_cv.wait(lock, [this]() { return !m_queue.empty() || m_noMoreTask; });\n                if (m_queue.empty() && m_noMoreTask) {\n                    break;\n                }\n                task = m_queue.front();\n                m_queue.pop();\n            }\n            task.run();\n        }\n    }\n};\n```",
      "```cpp\n#include <iostream>\n#include <thread>\n#include <vector>\n#include <queue>\n#include <unordered_set>\n#include <mutex>\n#include <string>\n#include <curl/curl.h>\n\nclass Task {\npublic:\n    std::string m_url;\n    std::string m_output;\n\n    Task(const std::string& url, const std::string& output)\n        : m_url(url), m_output(output) {}\n\n    void run() {\n        CURL* curl = curl_easy_init();\n        if (curl) {\n            FILE* fp = fopen(m_output.c_str(), \"wb\");\n            if (fp) {\n                curl_easy_setopt(curl, CURLOPT_URL, m_url.c_str());\n                curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, writeData);\n                curl_easy_setopt(curl, CURLOPT_WRITEDATA, fp);\n                CURLcode res = curl_easy_perform(curl);\n                fclose(fp);\n                curl_easy_cleanup(curl);\n                if (res != CURLE_OK) {\n                    std::cerr << \"curl_easy_perform() failed: \" << curl_easy_strerror(res) << std::endl;\n                }\n            } else {\n                std::cerr << \"Failed to open file for writing: \" << m_output << std::endl;\n            }\n        }\n    }\n\n    static size_t writeData(void* buffer, size_t size, size_t nmemb, void* userp) {\n        FILE* stream = (FILE*)userp;\n        size_t written = fwrite(buffer, size, nmemb, stream);\n        return written;\n    }\n};\n\nclass DownloadPool {\nprivate:\n    std::vector<std::thread> m_threads;\n    std::queue<Task> m_queue;\n    std::unordered_set<std::string> m_urls;\n    std::mutex m_mtx;\n    bool m_noMoreTask;\n\npublic:\n    DownloadPool() {\n        CURLcode res = curl_global_init(CURL_GLOBAL_ALL);\n        if (res != CURLE_OK) {\n            std::cerr << \"curl_global_init() failed: \" << curl_easy_strerror(res) << std::endl;\n        }\n        for (int i = 0; i < 4; ++i) {\n            m_threads.emplace_back([this]() { run(); });\n        }\n    }\n\n    ~DownloadPool() {\n        setNoMoreTask();\n        for (auto& t : m_threads) {\n            if (t.joinable()) {\n                t.join();\n            }\n        }\n        curl_global_cleanup();\n    }\n\n    void addTask(const std::string& url, const std::string& output) {\n        std::lock_guard<std::mutex> lock(m_mtx);\n        if (m_urls.find(url) == m_urls.end()) {\n            m_urls.insert(url);\n            m_queue.push(Task(url, output));\n        }\n    }\n\n    void setNoMoreTask() {\n        std::lock_guard<std::mutex> lock(m_mtx);\n        m_noMoreTask = true;\n    }\n\n    void finishAndWaitForExit() {\n        setNoMoreTask();\n        for (auto& t : m_threads) {\n            if (t.joinable()) {\n                t.join();\n            }\n        }\n    }\n\n    void run() {\n        while (true) {\n            std::lock_guard<std::mutex> lock(m_mtx);\n            if (m_queue.empty() && m_noMoreTask) {\n                break;\n            }\n            Task task = m_queue.front();\n            m_queue.pop();\n            if (!m_noMoreTask) {\n                m_urls.erase(task.m_url);\n            }\n            task.run();\n        }\n    }\n};\n```"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 7,
    "Instruction": "Task Description: Create a TCP client class using Boost.Asio that handles asynchronous communication with a chat server, including reading from standard input and writing to standard output.\n\nClass Description: The posix_chat_client class implements an asynchronous TCP client for a chat application. It manages socket connections, handles message reading/writing, and processes user input/output asynchronously using Boost.Asio.\n\nAttributes:\n- socket_: [tcp::socket] - The TCP socket for communication with the server\n- input_: [posix::stream_descriptor] - Handles asynchronous reading from standard input\n- output_: [posix::stream_descriptor] - Handles asynchronous writing to standard output\n- read_msg_: [chat_message] - Stores the message being read from the server\n- write_msg_: [chat_message] - Stores the message to be written to the server\n- input_buffer_: [boost::asio::streambuf] - Buffer for storing input data\n\nMethods:\n- Constructor: [posix_chat_client]([boost::asio::io_context& io_context, const tcp::resolver::results_type& endpoints]) -> [void] - Initializes the client with IO context and server endpoints\n- do_connect: [do_connect]([const tcp::resolver::results_type& endpoints]) -> [void] - Asynchronously connects to the server endpoints\n- do_read_header: [do_read_header]() -> [void] - Asynchronously reads the message header from the server\n- do_read_body: [do_read_body]() -> [void] - Asynchronously reads the message body from the server after header is processed\n- do_write_output: [do_write_output]() -> [void] - Asynchronously writes received messages to standard output\n- do_read_input: [do_read_input]() -> [void] - Asynchronously reads input from standard input\n- do_write_message: [do_write_message]() -> [void] - Asynchronously writes the composed message to the server\n- close: [close]() -> [void] - Closes all connections and cleans up resources",
    "Canonical_solution": "#include <array>\n#include <boost/asio.hpp>\n#include \"chat_message.hpp\"\nusing boost::asio::ip::tcp;\nnamespace posix = boost::asio::posix;\n\nclass posix_chat_client\n{\npublic:\n  posix_chat_client(boost::asio::io_context& io_context,\n      const tcp::resolver::results_type& endpoints)\n    : socket_(io_context),\n      input_(io_context, ::dup(STDIN_FILENO)),\n      output_(io_context, ::dup(STDOUT_FILENO)),\n      input_buffer_(chat_message::max_body_length)\n  {\n    do_connect(endpoints);\n  }\n\nprivate:\n  void do_connect(const tcp::resolver::results_type& endpoints)\n  {\n    boost::asio::async_connect(socket_, endpoints,\n        [this](boost::system::error_code ec, tcp::endpoint)\n        {\n          if (!ec)\n          {\n            do_read_header();\n            do_read_input();\n          }\n        });\n  }\n\n  void do_read_header()\n  {\n    boost::asio::async_read(socket_,\n        boost::asio::buffer(read_msg_.data(), chat_message::header_length),\n        [this](boost::system::error_code ec, std::size_t /*length*/)\n        {\n          if (!ec && read_msg_.decode_header())\n          {\n            do_read_body();\n          }\n          else\n          {\n            close();\n          }\n        });\n  }\n\n  void do_read_body()\n  {\n    boost::asio::async_read(socket_,\n        boost::asio::buffer(read_msg_.body(), read_msg_.body_length()),\n        [this](boost::system::error_code ec, std::size_t /*length*/)\n        {\n          if (!ec)\n          {\n            do_write_output();\n          }\n          else\n          {\n            close();\n          }\n        });\n  }\n\n  void do_write_output()\n  {\n    static char eol[] = { '\\n' };\n    std::array<boost::asio::const_buffer, 2> buffers = {{\n      boost::asio::buffer(read_msg_.body(), read_msg_.body_length()),\n      boost::asio::buffer(eol) }};\n    boost::asio::async_write(output_, buffers,\n        [this](boost::system::error_code ec, std::size_t /*length*/)\n        {\n          if (!ec)\n          {\n            do_read_header();\n          }\n          else\n          {\n            close();\n          }\n        });\n  }\n\n  void do_read_input()\n  {\n    boost::asio::async_read_until(input_, input_buffer_, '\\n',\n        [this](boost::system::error_code ec, std::size_t length)\n        {\n          if (!ec)\n          {\n            write_msg_.body_length(length - 1);\n            input_buffer_.sgetn(write_msg_.body(), length - 1);\n            input_buffer_.consume(1);\n            write_msg_.encode_header();\n            do_write_message();\n          }\n          else if (ec == boost::asio::error::not_found)\n          {\n            write_msg_.body_length(input_buffer_.size());\n            input_buffer_.sgetn(write_msg_.body(), input_buffer_.size());\n            write_msg_.encode_header();\n            do_write_message();\n          }\n          else\n          {\n            close();\n          }\n        });\n  }\n\n  void do_write_message()\n  {\n    boost::asio::async_write(socket_,\n        boost::asio::buffer(write_msg_.data(), write_msg_.length()),\n        [this](boost::system::error_code ec, std::size_t /*length*/)\n        {\n          if (!ec)\n          {\n            do_read_input();\n          }\n          else\n          {\n            close();\n          }\n        });\n  }\n\n  void close()\n  {\n    socket_.close();\n    input_.close();\n    output_.close();\n  }\n\nprivate:\n  tcp::socket socket_;\n  posix::stream_descriptor input_;\n  posix::stream_descriptor output_;\n  chat_message read_msg_;\n  chat_message write_msg_;\n  boost::asio::streambuf input_buffer_;\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 151,
    "matched_results": [
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <string>\n\nclass chat_message {\npublic:\n    std::string header;\n    std::string body;\n};\n\nclass posix_chat_client {\npublic:\n    posix_chat_client(boost::asio::io_context& io_context, const tcp::resolver::results_type& endpoints)\n        : socket_(io_context), input_(io_context), output_(io_context), read_msg_(), write_msg_() {\n        do_connect(endpoints);\n    }\n\nprivate:\n    tcp::socket socket_;\n    boost::asio::stream_descriptor input_;\n    boost::asio::stream_descriptor output_;\n    chat_message read_msg_;\n    chat_message write_msg_;\n    boost::asio::streambuf input_buffer_;\n\n    void do_connect(const tcp::resolver::results_type& endpoints) {\n        boost::asio::async_connect(socket_, endpoints, [this](boost::system::error_code ec, const tcp::endpoint&) {\n            if (!ec) {\n                do_read_input();\n            }\n        });\n    }\n\n    void do_read_header() {\n        boost::asio::async_read(socket_, input_buffer_, boost::asio::buffer(read_msg_.header, header_length),\n            [this](boost::system::error_code ec, std::size_t) {\n                if (!ec) {\n                    do_read_body();\n                }\n            });\n    }\n\n    void do_read_body() {\n        boost::asio::async_read(socket_, input_buffer_, boost::asio::buffer(read_msg_.body),\n            [this](boost::system::error_code ec, std::size_t) {\n                if (!ec) {\n                    do_write_output();\n                }\n            });\n    }\n\n    void do_write_output() {\n        boost::asio::async_write(output_, boost::asio::buffer(read_msg_.body),\n            [this](boost::system::error_code ec, std::size_t) {\n                if (!ec) {\n                    do_read_input();\n                }\n            });\n    }\n\n    void do_read_input() {\n        boost::asio::async_read(input_, input_buffer_, boost::asio::buffer(write_msg_.body),\n            [this](boost::system::error_code ec, std::size_t) {\n                if (!ec) {\n                    do_write_message();\n                }\n            });\n    }\n\n    void do_write_message() {\n        boost::asio::async_write(socket_, boost::asio::buffer(write_msg_.body),\n            [this](boost::system::error_code ec, std::size_t) {\n                if (!ec) {\n                    do_read_header();\n                }\n            });\n    }\n\n    void close() {\n        socket_.close();\n    }\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <string>\n\nclass chat_message {\npublic:\n    std::string header;\n    std::string body;\n};\n\nclass posix_chat_client {\npublic:\n    posix_chat_client(boost::asio::io_context& io_context, const tcp::resolver::results_type& endpoints)\n        : socket_(io_context), input_(io_context), output_(io_context), read_msg_(), write_msg_() {\n        do_connect(endpoints);\n    }\n\nprivate:\n    tcp::socket socket_;\n    boost::asio::stream_descriptor input_;\n    boost::asio::stream_descriptor output_;\n    chat_message read_msg_;\n    chat_message write_msg_;\n    boost::asio::streambuf input_buffer_;\n\n    void do_connect(const tcp::resolver::results_type& endpoints) {\n        boost::asio::async_connect(socket_, endpoints, [this](boost::system::error_code ec, const tcp::endpoint& endpoint) {\n            if (!ec) {\n                do_read_header();\n                do_read_input();\n            }\n        });\n    }\n\n    void do_read_header() {\n        boost::asio::async_read(socket_, input_buffer_, boost::asio::buffer(read_msg_.header, chat_message::header_length),\n            [this](boost::system::error_code ec, std::size_t length) {\n                if (!ec) {\n                    do_read_body();\n                }\n            });\n    }\n\n    void do_read_body() {\n        auto body_length = static_cast<std::size_t>(std::stoull(read_msg_.header));\n        boost::asio::async_read(socket_, input_buffer_, boost::asio::buffer(read_msg_.body, body_length),\n            [this](boost::system::error_code ec, std::size_t length) {\n                if (!ec) {\n                    do_write_output();\n                }\n            });\n    }\n\n    void do_write_output() {\n        boost::asio::async_write(output_, boost::asio::buffer(read_msg_.body),\n            [this](boost::system::error_code ec, std::size_t length) {\n                if (!ec) {\n                    do_read_header();\n                }\n            });\n    }\n\n    void do_read_input() {\n        boost::asio::async_read(input_, input_buffer_, boost::asio::buffer(write_msg_.body),\n            [this](boost::system::error_code ec, std::size_t length) {\n                if (!ec) {\n                    do_write_message();\n                }\n            });\n    }\n\n    void do_write_message() {\n        write_msg_.header = std::to_string(write_msg_.body.size());\n        boost::asio::async_write(socket_, boost::asio::buffer(write_msg_.header),\n            [this](boost::system::error_code ec, std::size_t length) {\n                if (!ec) {\n                    do_write_output();\n                }\n            });\n        boost::asio::async_write(socket_, boost::asio::buffer(write_msg_.body),\n            [this](boost::system::error_code ec, std::size_t length) {\n                if (!ec) {\n                    do_read_header();\n                }\n            });\n    }\n\n    void close() {\n        boost::system::error_code ec;\n        socket_.close(ec);\n        input_.close(ec);\n        output_.close(ec);\n    }\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <string>\n\nclass chat_message {\npublic:\n    std::string header;\n    std::string body;\n};\n\nclass posix_chat_client {\n    boost::asio::io_context& io_context_;\n    tcp::socket socket_;\n    boost::asio::streambuf input_buffer_;\n    chat_message read_msg_;\n    chat_message write_msg_;\n    boost::asio::stream_descriptor input_;\n    boost::asio::stream_descriptor output_;\n\npublic:\n    posix_chat_client(boost::asio::io_context& io_context, const tcp::resolver::results_type& endpoints)\n        : io_context_(io_context), socket_(io_context) {\n        do_connect(endpoints);\n    }\n\n    void do_connect(const tcp::resolver::results_type& endpoints) {\n        boost::asio::async_connect(socket_, endpoints, [this](boost::system::error_code ec, const tcp::endpoint& endpoint) {\n            if (!ec) {\n                do_read_input();\n            }\n        });\n    }\n\n    void do_read_header() {\n        boost::asio::async_read(socket_, input_buffer_, boost::asio::buffer(read_msg_.header, chat_message::header_length),\n            [this](boost::system::error_code ec, std::size_t length) {\n                if (!ec) {\n                    do_read_body();\n                }\n            });\n    }\n\n    void do_read_body() {\n        boost::asio::async_read(socket_, input_buffer_, boost::asio::buffer(read_msg_.body),\n            [this](boost::system::error_code ec, std::size_t length) {\n                if (!ec) {\n                    do_write_output();\n                }\n            });\n    }\n\n    void do_write_output() {\n        boost::asio::async_write(output_, boost::asio::buffer(read_msg_.body),\n            [this](boost::system::error_code ec, std::size_t length) {\n                if (!ec) {\n                    do_read_input();\n                }\n            });\n    }\n\n    void do_read_input() {\n        boost::asio::async_read(input_, input_buffer_, boost::asio::buffer(write_msg_.body),\n            [this](boost::system::error_code ec, std::size_t length) {\n                if (!ec) {\n                    do_write_message();\n                }\n            });\n    }\n\n    void do_write_message() {\n        boost::asio::async_write(socket_, boost::asio::buffer(write_msg_.body),\n            [this](boost::system::error_code ec, std::size_t length) {\n                if (!ec) {\n                    do_read_header();\n                }\n            });\n    }\n\n    void close() {\n        socket_.close();\n    }\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <string>\n\nclass chat_message {\npublic:\n    std::string header;\n    std::string body;\n};\n\nclass posix_chat_client {\npublic:\n    posix_chat_client(boost::asio::io_context& io_context, const boost::asio::ip::tcp::resolver::results_type& endpoints)\n        : socket_(io_context), input_(io_context), output_(io_context), read_msg_(), write_msg_() {\n        do_connect(endpoints);\n    }\n\nprivate:\n    boost::asio::ip::tcp::socket socket_;\n    boost::asio::posix::stream_descriptor input_;\n    boost::asio::posix::stream_descriptor output_;\n    chat_message read_msg_;\n    chat_message write_msg_;\n    boost::asio::streambuf input_buffer_;\n\n    void do_connect(const boost::asio::ip::tcp::resolver::results_type& endpoints) {\n        boost::asio::async_connect(socket_, endpoints, [this](boost::system::error_code ec, const boost::asio::ip::tcp::endpoint& endpoint) {\n            if (!ec) {\n                do_read_input();\n            }\n        });\n    }\n\n    void do_read_header() {\n        boost::asio::async_read(socket_, boost::asio::buffer(&read_msg_.header, chat_message::header_length),\n            [this](boost::system::error_code ec, std::size_t length) {\n                if (!ec) {\n                    do_read_body();\n                }\n            });\n    }\n\n    void do_read_body() {\n        boost::asio::async_read(socket_, boost::asio::buffer(&read_msg_.body, read_msg_.header.size() - chat_message::header_length),\n            [this](boost::system::error_code ec, std::size_t length) {\n                if (!ec) {\n                    do_write_output();\n                }\n            });\n    }\n\n    void do_write_output() {\n        boost::asio::async_write(output_, boost::asio::buffer(read_msg_.body.data(), read_msg_.body.size()),\n            [this](boost::system::error_code ec, std::size_t length) {\n                if (!ec) {\n                    do_read_header();\n                }\n            });\n    }\n\n    void do_read_input() {\n        boost::asio::async_read(input_, input_buffer_, boost::asio::transfer_at_least(chat_message::header_length),\n            [this](boost::system::error_code ec, std::size_t length) {\n                if (!ec) {\n                    std::string header(input_buffer_.data(), length);\n                    input_buffer_.consume(length);\n                    write_msg_.header = header;\n                    do_write_message();\n                }\n            });\n    }\n\n    void do_write_message() {\n        boost::asio::async_write(socket_, boost::asio::buffer(write_msg_.header.data(), write_msg_.header.size()),\n            [this](boost::system::error_code ec, std::size_t length) {\n                if (!ec) {\n                    do_read_header();\n                }\n            });\n    }\n\n    void close() {\n        socket_.close();\n    }\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <string>\n\nclass chat_message {\npublic:\n    std::string header;\n    std::string body;\n};\n\nclass posix_chat_client {\npublic:\n    posix_chat_client(boost::asio::io_context& io_context, const boost::asio::ip::tcp::resolver::results_type& endpoints)\n        : socket_(io_context), input_(io_context), output_(io_context), read_msg_(), write_msg_() {\n        do_connect(endpoints);\n    }\n\nprivate:\n    boost::asio::ip::tcp::socket socket_;\n    boost::asio::posix::stream_descriptor input_;\n    boost::asio::posix::stream_descriptor output_;\n    chat_message read_msg_;\n    chat_message write_msg_;\n    boost::asio::streambuf input_buffer_;\n\n    void do_connect(const boost::asio::ip::tcp::resolver::results_type& endpoints) {\n        boost::asio::async_connect(socket_, endpoints, [this](boost::system::error_code ec, const boost::asio::ip::tcp::endpoint& endpoint) {\n            if (!ec) {\n                do_read_input();\n            }\n        });\n    }\n\n    void do_read_header() {\n        boost::asio::async_read(socket_, input_buffer_, boost::asio::buffer(read_msg_.header.data(), chat_message::header_length),\n            [this](boost::system::error_code ec, std::size_t length) {\n                if (!ec) {\n                    do_read_body();\n                }\n            });\n    }\n\n    void do_read_body() {\n        boost::asio::async_read(socket_, input_buffer_, boost::asio::buffer(read_msg_.body.data(), read_msg_.header.size() - chat_message::header_length),\n            [this](boost::system::error_code ec, std::size_t length) {\n                if (!ec) {\n                    do_write_output();\n                }\n            });\n    }\n\n    void do_write_output() {\n        boost::asio::async_write(output_, boost::asio::buffer(read_msg_.body.data(), read_msg_.body.size()),\n            [this](boost::system::error_code ec, std::size_t length) {\n                if (!ec) {\n                    do_read_input();\n                }\n            });\n    }\n\n    void do_read_input() {\n        boost::asio::async_read(input_, input_buffer_, boost::asio::buffer(write_msg_.body.data(), chat_message::max_body_length),\n            [this](boost::system::error_code ec, std::size_t length) {\n                if (!ec) {\n                    write_msg_.header = std::to_string(length + chat_message::header_length);\n                    do_write_message();\n                }\n            });\n    }\n\n    void do_write_message() {\n        boost::asio::async_write(socket_, boost::asio::buffer(write_msg_.header.data(), write_msg_.header.size()),\n            [this](boost::system::error_code ec, std::size_t length) {\n                if (!ec) {\n                    boost::asio::async_write(socket_, boost::asio::buffer(write_msg_.body.data(), write_msg_.body.size()),\n                        [this](boost::system::error_code ec, std::size_t length) {\n                            if (!ec) {\n                                do_read_input();\n                            }\n                        });\n                }\n            });\n    }\n\n    void close() {\n        boost::system::error_code ec;\n        socket_.close(ec);\n        input_.close(ec);\n        output_.close(ec);\n    }\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <string>\n\nclass chat_message {\npublic:\n    std::string header;\n    std::string body;\n};\n\nclass posix_chat_client {\npublic:\n    posix_chat_client(boost::asio::io_context& io_context, const tcp::resolver::results_type& endpoints)\n        : socket_(io_context), input_(io_context), output_(io_context), read_msg_(), write_msg_() {\n        do_connect(endpoints);\n    }\n\nprivate:\n    tcp::socket socket_;\n    boost::asio::stream_descriptor input_;\n    boost::asio::stream_descriptor output_;\n    chat_message read_msg_;\n    chat_message write_msg_;\n    boost::asio::streambuf input_buffer_;\n\n    void do_connect(const tcp::resolver::results_type& endpoints) {\n        boost::asio::async_connect(socket_, endpoints, [this](boost::system::error_code ec, const tcp::endpoint& endpoint) {\n            if (!ec) {\n                do_read_input();\n            }\n        });\n    }\n\n    void do_read_header() {\n        boost::asio::async_read(socket_, input_buffer_, boost::asio::buffer(read_msg_.header, header_size),\n            [this](boost::system::error_code ec, std::size_t length) {\n                if (!ec) {\n                    read_msg_.body.resize(std::stoull(read_msg_.header));\n                    do_read_body();\n                }\n            });\n    }\n\n    void do_read_body() {\n        boost::asio::async_read(socket_, input_buffer_, boost::asio::buffer(read_msg_.body.data(), read_msg_.body.size()),\n            [this](boost::system::error_code ec, std::size_t length) {\n                if (!ec) {\n                    do_write_output();\n                }\n            });\n    }\n\n    void do_write_output() {\n        boost::asio::async_write(output_, boost::asio::buffer(read_msg_.body.data(), read_msg_.body.size()),\n            [this](boost::system::error_code ec, std::size_t length) {\n                if (!ec) {\n                    read_msg_.body.clear();\n                    do_read_input();\n                }\n            });\n    }\n\n    void do_read_input() {\n        boost::asio::async_read(input_, input_buffer_, boost::asio::buffer(write_msg_.header, header_size),\n            [this](boost::system::error_code ec, std::size_t length) {\n                if (!ec) {\n                    write_msg_.body.resize(std::stoull(write_msg_.header));\n                    do_read_body_input();\n                }\n            });\n    }\n\n    void do_read_body_input() {\n        boost::asio::async_read(input_, input_buffer_, boost::asio::buffer(write_msg_.body.data(), write_msg_.body.size()),\n            [this](boost::system::error_code ec, std::size_t length) {\n                if (!ec) {\n                    do_write_message();\n                }\n            });\n    }\n\n    void do_write_message() {\n        boost::asio::async_write(socket_, boost::asio::buffer(write_msg_.header.data(), write_msg_.header.size()),\n            [this](boost::system::error_code ec, std::size_t length) {\n                if (!ec) {\n                    do_write_body_message();\n                }\n            });\n    }\n\n    void do_write_body_message() {\n        boost::asio::async_write(socket_, boost::asio::buffer(write_msg_.body.data(), write_msg_.body.size()),\n            [this](boost::system::error_code ec, std::size_t length) {\n                if (!ec) {\n                    write_msg_.header.clear();\n                    write_msg_.body.clear();\n                    do_read_input();\n                }\n            });\n    }\n\n    void close() {\n        socket_.close();\n    }\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <string>\n\nclass chat_message {\npublic:\n    std::string header;\n    std::string body;\n};\n\nclass posix_chat_client {\npublic:\n    posix_chat_client(boost::asio::io_context& io_context, const boost::asio::ip::tcp::resolver::results_type& endpoints)\n        : socket_(io_context), input_(io_context, STDIN_FILENO), output_(io_context, STDOUT_FILENO) {}\n\n    void do_connect(const boost::asio::ip::tcp::resolver::results_type& endpoints) {\n        boost::asio::async_connect(socket_, endpoints, [this](boost::system::error_code ec, const boost::asio::ip::tcp::endpoint& endpoint) {\n            if (!ec) {\n                do_read_header();\n            }\n        });\n    }\n\n    void do_read_header() {\n        boost::asio::async_read(socket_, boost::asio::buffer(&read_msg_.header, chat_message::header_length),\n            [this](boost::system::error_code ec, std::size_t length) {\n                if (!ec) {\n                    do_read_body();\n                }\n            });\n    }\n\n    void do_read_body() {\n        boost::asio::async_read(socket_, boost::asio::buffer(&read_msg_.body, read_msg_.header.size() - chat_message::header_length),\n            [this](boost::system::error_code ec, std::size_t length) {\n                if (!ec) {\n                    do_write_output();\n                }\n            });\n    }\n\n    void do_write_output() {\n        boost::asio::async_write(output_, boost::asio::buffer(read_msg_.body.data(), read_msg_.body.size()),\n            [this](boost::system::error_code ec, std::size_t length) {\n                if (!ec) {\n                    do_read_header();\n                }\n            });\n    }\n\n    void do_read_input() {\n        boost::asio::async_read(input_, boost::asio::buffer(write_msg_.body, chat_message::max_body_length),\n            [this](boost::system::error_code ec, std::size_t length) {\n                if (!ec) {\n                    write_msg_.header = std::to_string(length + chat_message::header_length);\n                    do_write_message();\n                }\n            });\n    }\n\n    void do_write_message() {\n        boost::asio::async_write(socket_, boost::asio::buffer(write_msg_.header.data(), write_msg_.header.size()),\n            [this](boost::system::error_code ec, std::size_t length) {\n                if (!ec) {\n                    boost::asio::async_write(socket_, boost::asio::buffer(write_msg_.body.data(), write_msg_.body.size()),\n                        [this](boost::system::error_code ec, std::size_t length) {\n                            if (!ec) {\n                                do_read_input();\n                            }\n                        });\n                }\n            });\n    }\n\n    void close() {\n        socket_.close();\n    }\n\nprivate:\n    boost::asio::ip::tcp::socket socket_;\n    boost::asio::posix::stream_descriptor input_;\n    boost::asio::posix::stream_descriptor output_;\n    chat_message read_msg_;\n    chat_message write_msg_;\n    static const std::size_t header_length = 10;\n    static const std::size_t max_body_length = 1024;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <string>\n\nnamespace boost {\nnamespace asio {\nclass io_context;\nclass tcp;\nclass stream_descriptor;\nclass resolver;\n} // namespace asio\n} // namespace boost\n\nstruct chat_message {\n    std::string header;\n    std::string body;\n};\n\nclass posix_chat_client {\npublic:\n    posix_chat_client(boost::asio::io_context& io_context, const boost::asio::ip::tcp::resolver::results_type& endpoints)\n        : socket_(io_context), input_(io_context), output_(io_context), read_msg_(), write_msg_() {\n        do_connect(endpoints);\n    }\n\nprivate:\n    boost::asio::ip::tcp::socket socket_;\n    boost::asio::stream_descriptor input_;\n    boost::asio::stream_descriptor output_;\n    chat_message read_msg_;\n    chat_message write_msg_;\n    boost::asio::streambuf input_buffer_;\n\n    void do_connect(const boost::asio::ip::tcp::resolver::results_type& endpoints) {\n        boost::asio::async_connect(socket_, endpoints, [this](boost::system::error_code ec, const boost::asio::ip::tcp::endpoint& endpoint) {\n            if (!ec) {\n                do_read_input();\n            }\n        });\n    }\n\n    void do_read_header() {\n        boost::asio::async_read(socket_, input_buffer_, boost::asio::buffer(read_msg_.header, chat_message::header_length), [this](boost::system::error_code ec, std::size_t length) {\n            if (!ec) {\n                do_read_body();\n            }\n        });\n    }\n\n    void do_read_body() {\n        boost::asio::async_read(socket_, input_buffer_, boost::asio::buffer(read_msg_.body), [this](boost::system::error_code ec, std::size_t length) {\n            if (!ec) {\n                do_write_output();\n            }\n        });\n    }\n\n    void do_write_output() {\n        boost::asio::async_write(output_, boost::asio::buffer(read_msg_.body), [this](boost::system::error_code ec, std::size_t length) {\n            if (!ec) {\n                do_read_input();\n            }\n        });\n    }\n\n    void do_read_input() {\n        boost::asio::async_read(input_, input_buffer_, boost::asio::buffer(write_msg_.body), [this](boost::system::error_code ec, std::size_t length) {\n            if (!ec) {\n                do_write_message();\n            }\n        });\n    }\n\n    void do_write_message() {\n        boost::asio::async_write(socket_, boost::asio::buffer(write_msg_.body), [this](boost::system::error_code ec, std::size_t length) {\n            if (!ec) {\n                do_read_header();\n            }\n        });\n    }\n\n    void close() {\n        socket_.close();\n    }\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <string>\n\nclass chat_message {\npublic:\n    std::string header;\n    std::string body;\n};\n\nclass posix_chat_client {\npublic:\n    posix_chat_client(boost::asio::io_context& io_context, const tcp::resolver::results_type& endpoints)\n        : socket_(io_context), input_(io_context), output_(io_context), read_msg_(), write_msg_() {\n        do_connect(endpoints);\n    }\n\nprivate:\n    tcp::socket socket_;\n    boost::asio::stream_descriptor input_;\n    boost::asio::stream_descriptor output_;\n    chat_message read_msg_;\n    chat_message write_msg_;\n    boost::asio::streambuf input_buffer_;\n\n    void do_connect(const tcp::resolver::results_type& endpoints) {\n        boost::asio::async_connect(socket_, endpoints, [this](boost::system::error_code ec, tcp::endpoint) {\n            if (!ec) {\n                do_read_input();\n            }\n        });\n    }\n\n    void do_read_header() {\n        boost::asio::async_read(socket_, input_buffer_, boost::asio::buffer(read_msg_.header, header_length),\n            [this](boost::system::error_code ec, std::size_t length) {\n                if (!ec) {\n                    read_msg_.body.resize(std::stoull(read_msg_.header));\n                    do_read_body();\n                }\n            });\n    }\n\n    void do_read_body() {\n        boost::asio::async_read(socket_, input_buffer_, boost::asio::buffer(read_msg_.body.data(), read_msg_.body.size()),\n            [this](boost::system::error_code ec, std::size_t length) {\n                if (!ec) {\n                    do_write_output();\n                }\n            });\n    }\n\n    void do_write_output() {\n        boost::asio::async_write(output_, boost::asio::buffer(read_msg_.body.data(), read_msg_.body.size()),\n            [this](boost::system::error_code ec, std::size_t length) {\n                if (!ec) {\n                    read_msg_.body.clear();\n                    do_read_input();\n                }\n            });\n    }\n\n    void do_read_input() {\n        boost::asio::async_read(input_, input_buffer_, boost::asio::buffer(write_msg_.header, header_length),\n            [this](boost::system::error_code ec, std::size_t length) {\n                if (!ec) {\n                    write_msg_.body.resize(std::stoull(write_msg_.header));\n                    do_read_body_input();\n                }\n            });\n    }\n\n    void do_read_body_input() {\n        boost::asio::async_read(input_, input_buffer_, boost::asio::buffer(write_msg_.body.data(), write_msg_.body.size()),\n            [this](boost::system::error_code ec, std::size_t length) {\n                if (!ec) {\n                    do_write_message();\n                }\n            });\n    }\n\n    void do_write_message() {\n        boost::asio::async_write(socket_, boost::asio::buffer(write_msg_.header.data(), write_msg_.header.size()),\n            [this](boost::system::error_code ec, std::size_t length) {\n                if (!ec) {\n                    do_write_body_message();\n                }\n            });\n    }\n\n    void do_write_body_message() {\n        boost::asio::async_write(socket_, boost::asio::buffer(write_msg_.body.data(), write_msg_.body.size()),\n            [this](boost::system::error_code ec, std::size_t length) {\n                if (!ec) {\n                    write_msg_.header.clear();\n                    write_msg_.body.clear();\n                    do_read_input();\n                }\n            });\n    }\n\n    void close() {\n        socket_.close();\n    }\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <iostream>\n#include <string>\n\nclass chat_message {\npublic:\n    std::string header;\n    std::string body;\n};\n\nclass posix_chat_client {\npublic:\n    posix_chat_client(boost::asio::io_context& io_context, const tcp::resolver::results_type& endpoints)\n        : socket_(io_context), input_(io_context), output_(io_context), read_msg_(), write_msg_() {\n        do_connect(endpoints);\n    }\n\nprivate:\n    tcp::socket socket_;\n    boost::asio::stream_descriptor input_;\n    boost::asio::stream_descriptor output_;\n    chat_message read_msg_;\n    chat_message write_msg_;\n    boost::asio::streambuf input_buffer_;\n\n    void do_connect(const tcp::resolver::results_type& endpoints) {\n        boost::asio::async_connect(socket_, endpoints, [this](boost::system::error_code ec, const tcp::endpoint&) {\n            if (!ec) {\n                do_read_input();\n            }\n        });\n    }\n\n    void do_read_header() {\n        boost::asio::async_read(socket_, input_buffer_, boost::asio::buffer(read_msg_.header, header_length),\n            [this](boost::system::error_code ec, std::size_t length) {\n                if (!ec) {\n                    read_msg_.body.resize(std::stoull(read_msg_.header));\n                    do_read_body();\n                }\n            });\n    }\n\n    void do_read_body() {\n        boost::asio::async_read(socket_, input_buffer_, boost::asio::buffer(read_msg_.body.data(), read_msg_.body.size()),\n            [this](boost::system::error_code ec, std::size_t length) {\n                if (!ec) {\n                    do_write_output();\n                }\n            });\n    }\n\n    void do_write_output() {\n        boost::asio::async_write(output_, boost::asio::buffer(read_msg_.body.data(), read_msg_.body.size()),\n            [this](boost::system::error_code ec, std::size_t length) {\n                if (!ec) {\n                    read_msg_.body.clear();\n                    do_read_input();\n                }\n            });\n    }\n\n    void do_read_input() {\n        boost::asio::async_read(input_, input_buffer_, boost::asio::buffer(write_msg_.header, header_length),\n            [this](boost::system::error_code ec, std::size_t length) {\n                if (!ec) {\n                    write_msg_.body.resize(std::stoull(write_msg_.header));\n                    do_read_body_input();\n                }\n            });\n    }\n\n    void do_read_body_input() {\n        boost::asio::async_read(input_, input_buffer_, boost::asio::buffer(write_msg_.body.data(), write_msg_.body.size()),\n            [this](boost::system::error_code ec, std::size_t length) {\n                if (!ec) {\n                    do_write_message();\n                }\n            });\n    }\n\n    void do_write_message() {\n        boost::asio::async_write(socket_, boost::asio::buffer(write_msg_.header.data(), write_msg_.header.size()),\n            [this](boost::system::error_code ec, std::size_t length) {\n                if (!ec) {\n                    do_write_body_message();\n                }\n            });\n    }\n\n    void do_write_body_message() {\n        boost::asio::async_write(socket_, boost::asio::buffer(write_msg_.body.data(), write_msg_.body.size()),\n            [this](boost::system::error_code ec, std::size_t length) {\n                if (!ec) {\n                    write_msg_.header.clear();\n                    write_msg_.body.clear();\n                    do_read_input();\n                }\n            });\n    }\n\n    void close() {\n        socket_.close();\n        input_.close();\n        output_.close();\n    }\n};\n```"
    ],
    "unmatched_results": [],
    "match_count": 10,
    "pass@3": 1.0,
    "pass@5": 1.0
  },
  {
    "Task_id": 8,
    "Instruction": "Task Description: Implement a WebSocket client class for webOS devices that supports both SSL and non-SSL connections using Boost.Asio and Boost.Beast libraries. The client should handle asynchronous connection, message sending/receiving, and error handling.\n\nClass Description: WebOsClient::Impl is an implementation class for a webOS WebSocket client that manages TCP/SSL WebSocket connections to a webOS device. It handles connection lifecycle, message exchange, and error recovery.\n\nAttributes:\n- ioc_: [net::io_context&] - Reference to Boost.Asio I/O context for asynchronous operations\n- ctx_: [ssl::context&] - Reference to SSL context for secure connections\n- device_settings_: [Device] - Configuration settings for the target device\n- log_: [std::shared_ptr<Logging>] - Shared pointer to logging utility\n- resolver_: [tcp::resolver] - TCP resolver for hostname resolution\n- ws_: [std::optional<websocket::stream<beast::ssl_stream<beast::tcp_stream>>>] - Optional SSL WebSocket stream\n- ws_tcp_: [std::optional<websocket::stream<beast::tcp_stream>>] - Optional non-SSL WebSocket stream\n- buffer_: [beast::flat_buffer] - Buffer for incoming messages\n- host_: [std::string] - Target host address with port\n- socket_status_: [int] - Current connection status (disconnected/connecting/connected)\n\nMethods:\n- run(): [void]() - Initiates the connection process by resolving the hostname\n- onResolve(): [void](beast::error_code, tcp::resolver::results_type) - Callback for hostname resolution completion\n- onConnect(): [void](beast::error_code, tcp::resolver::results_type::endpoint_type) - Callback for TCP connection completion\n- onSSLhandshake(): [void](beast::error_code) - Callback for SSL handshake completion\n- onWinsockHandshake(): [void](beast::error_code) - Callback for WebSocket handshake completion\n- send(): [void](std::string, std::string) - Sends data through the WebSocket connection\n- onWrite(): [void](beast::error_code, std::size_t) - Callback for write operation completion\n- read(): [void]() - Initiates an asynchronous read operation\n- onRead(): [void](beast::error_code, std::size_t) - Callback for read operation completion\n- onError(): [void](beast::error_code&, std::string) - Handles connection errors\n- enqueueWork(): [void](Work&) - Adds work to the processing queue\n- close(): [void]() - Initiates connection shutdown\n- Impl(): [Constructor](net::io_context&, ssl::context&, Device&, Logging&) - Constructor initializing core components",
    "Canonical_solution": "#include <boost/asio.hpp>\n#include <boost/beast/core.hpp>\n#include <boost/beast/ssl.hpp>\n#include <boost/beast/websocket.hpp>\n#include <boost/beast/websocket/ssl.hpp>\n#include <nlohmann/json.hpp>\n\nnamespace beast = boost::beast;\nnamespace http = beast::http;\nnamespace websocket = beast::websocket;\nnamespace net = boost::asio;\nnamespace ssl = boost::asio::ssl;\nusing tcp = boost::asio::ip::tcp;\nusing udp = boost::asio::ip::udp;\nusing json = nlohmann::json;\n\nclass WebOsClient::Impl : public std::enable_shared_from_this<WebOsClient::Impl> {\nprivate:\n    net::io_context& ioc_;\n    ssl::context& ctx_;\n    Device device_settings_;\n    std::shared_ptr<Logging> log_;\n    tcp::resolver resolver_;\n    std::optional<websocket::stream<beast::ssl_stream<beast::tcp_stream>>> ws_;\n    std::optional<websocket::stream<beast::tcp_stream>> ws_tcp_;\n    beast::flat_buffer buffer_;\n    std::string host_;\n    int socket_status_ = SOCKET_DISCONNECTED;\n\n    void run() {\n        socket_status_ = SOCKET_CONNECTING;\n        if(device_settings_.ssl)\n            ws_.emplace(resolver_.get_executor(), ctx_);\n        else\n            ws_tcp_.emplace(resolver_.get_executor());\n        host_ = device_settings_.ip;\n        resolver_.async_resolve(host_.c_str(), device_settings_.ssl ? PORT_SSL : PORT,\n            beast::bind_front_handler(&Impl::onResolve, shared_from_this()));\n    }\n\n    void onResolve(beast::error_code ec, tcp::resolver::results_type results) {\n        if (ec) return onError(ec, \"onResolve\");\n        socket_status_ = SOCKET_CONNECTING;\n        if(device_settings_.ssl) {\n            beast::get_lowest_layer(*ws_).expires_after(std::chrono::milliseconds(TIMER_ASYNC_TIMEOUT));\n            beast::get_lowest_layer(*ws_).async_connect(results,\n                beast::bind_front_handler(&Impl::onConnect, shared_from_this()));\n        } else {\n            beast::get_lowest_layer(*ws_tcp_).expires_after(std::chrono::milliseconds(TIMER_ASYNC_TIMEOUT));\n            beast::get_lowest_layer(*ws_tcp_).async_connect(results,\n                beast::bind_front_handler(&Impl::onConnect, shared_from_this()));\n        }\n    }\n\n    void onConnect(beast::error_code ec, tcp::resolver::results_type::endpoint_type ep) {\n        if (ec) return onError(ec, \"onConnect\");\n        socket_status_ = SOCKET_CONNECTING;\n        if(device_settings_.ssl) {\n            beast::get_lowest_layer(*ws_).expires_after(std::chrono::milliseconds(TIMER_ASYNC_TIMEOUT));\n            if (!SSL_set_tlsext_host_name(ws_->next_layer().native_handle(), device_settings_.ip.c_str())) {\n                ec = beast::error_code(static_cast<int>(::ERR_get_error()), net::error::get_ssl_category());\n                return onError(ec, \"Failed to set SNI hostname\");\n            }\n            host_ += ':' + std::to_string(ep.port());\n            ws_->next_layer().async_handshake(ssl::stream_base::client,\n                beast::bind_front_handler(&Impl::onSSLhandshake, shared_from_this()));\n        } else {\n            beast::get_lowest_layer(*ws_tcp_).expires_after(std::chrono::milliseconds(TIMER_ASYNC_TIMEOUT));\n            ws_tcp_->set_option(websocket::stream_base::timeout::suggested(beast::role_type::client));\n            ws_tcp_->set_option(websocket::stream_base::decorator(\n                [](websocket::request_type& req) {\n                    req.set(http::field::user_agent,\n                        std::string(BOOST_BEAST_VERSION_STRING) + \" websocket-client-async\");\n                }));\n            host_ += ':' + std::to_string(ep.port());\n            ws_tcp_->async_handshake(host_, \"/\",\n                beast::bind_front_handler(&Impl::onWinsockHandshake, shared_from_this()));\n        }\n    }\n\n    void onSSLhandshake(beast::error_code ec) {\n        if (ec) return onError(ec, \"onSSLhandshake\");\n        socket_status_ = SOCKET_CONNECTING;\n        beast::get_lowest_layer(*ws_).expires_never();\n        ws_->set_option(websocket::stream_base::timeout::suggested(beast::role_type::client));\n        ws_->set_option(websocket::stream_base::decorator(\n            [](websocket::request_type& req) {\n                req.set(http::field::user_agent,\n                    std::string(BOOST_BEAST_VERSION_STRING) + \" websocket-client-async-ssl\");\n            }));\n        ws_->async_handshake(host_, \"/\",\n            beast::bind_front_handler(&Impl::onWinsockHandshake, shared_from_this()));\n    }\n\n    void onWinsockHandshake(beast::error_code ec) {\n        if (ec) return onError(ec, \"onWinsockHandshake\");\n        socket_status_ = SOCKET_CONNECTED;\n        send(webos_handshake_, \"webOS handshake\");\n    }\n\n    void send(std::string data, std::string log_message = \"\") {\n        if(device_settings_.ssl) {\n            ws_->async_write(net::buffer(data),\n                beast::bind_front_handler(&Impl::onWrite, shared_from_this()));\n        } else {\n            ws_tcp_->async_write(net::buffer(data),\n                beast::bind_front_handler(&Impl::onWrite, shared_from_this()));\n        }\n    }\n\n    void onWrite(beast::error_code ec, std::size_t bytes_transferred) {\n        boost::ignore_unused(bytes_transferred);\n        if (ec) return onError(ec, \"onWrite\");\n        read();\n    }\n\n    void read() {\n        if(device_settings_.ssl)\n            ws_->async_read(buffer_,\n                beast::bind_front_handler(&Impl::onRead, shared_from_this()));\n        else\n            ws_tcp_->async_read(buffer_,\n                beast::bind_front_handler(&Impl::onRead, shared_from_this()));\n    }\n\n    void onRead(beast::error_code ec, std::size_t bytes_transferred) {\n        boost::ignore_unused(bytes_transferred);\n        if (ec) return onError(ec, \"onRead\");\n        socket_status_ = SOCKET_CONNECTED;\n        // Process received data here\n        buffer_.consume(buffer_.size());\n        read();\n    }\n\n    void onError(beast::error_code& ec, std::string err) {\n        DEBUG(\"%1% (%2%)\", ec.message(), err);\n        socket_status_ = SOCKET_DISCONNECTED;\n    }\n\npublic:\n    explicit Impl(net::io_context& ioc, ssl::context& ctx, Device& settings, Logging& log)\n        : ioc_(ioc), ctx_(ctx), device_settings_(settings), log_(std::make_shared<Logging>(log)),\n          resolver_(net::make_strand(ioc)) {}\n\n    void enqueueWork(Work& work) {\n        net::dispatch(resolver_.get_executor(),\n            [unit = work, self = shared_from_this()]() mutable {\n                self->workQueue_.emplace_back(std::move(unit));\n                self->startNextWork();\n            });\n    }\n\n    void close() {\n        net::dispatch(resolver_.get_executor(),\n            beast::bind_front_handler(&Impl::doClose, shared_from_this()));\n    }\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 151,
    "matched_results": [
      "```cpp\n#include <boost/asio.hpp>\n#include <boost/beast.hpp>\n#include <boost/asio/ssl.hpp>\n#include <memory>\n#include <string>\n#include <optional>\n\nnamespace beast = boost::beast;\nnamespace http = beast::http;\nnamespace net = boost::asio;\nnamespace ssl = net::ssl;\nnamespace websocket = beast::websocket;\n\nclass Device {\npublic:\n    std::string host;\n    int port;\n    // Other device settings\n};\n\nclass Logging {\npublic:\n    void log(const std::string& message) {\n        // Logging implementation\n    }\n};\n\nclass WebOsClient::Impl {\npublic:\n    Impl(net::io_context& ioc, ssl::context& ctx, Device& device, Logging& log)\n        : ioc_(ioc), ctx_(ctx), device_settings_(device), log_(std::make_shared<Logging>(log)),\n          resolver_(ioc_), ws_(std::nullopt), ws_tcp_(std::nullopt), buffer_(beast::flat_buffer{}),\n          host_(device.host), socket_status_(0) {}\n\n    void run() {\n        resolver_.async_resolve(host_, std::to_string(device_settings_.port), &Impl::onResolve, this);\n    }\n\nprivate:\n    void onResolve(beast::error_code ec, tcp::resolver::results_type endpoints) {\n        if (!ec) {\n            if (device_settings_.port == 443) {\n                ws_tcp_.emplace(ioc_, beast::ssl_stream<beast::tcp_stream>(ioc_, ctx_));\n                ws_tcp_->async_connect(endpoints, &Impl::onConnect, this);\n            } else {\n                ws_.emplace(ioc_, beast::tcp_stream(ioc_));\n                ws_->async_connect(endpoints, &Impl::onConnect, this);\n            }\n        }\n    }\n\n    void onConnect(beast::error_code ec, tcp::resolver::results_type::endpoint_type endpoint) {\n        if (!ec) {\n            if (device_settings_.port == 443) {\n                ws_tcp_->async_handshake(ssl::stream_base::client, &Impl::onSSLhandshake, this);\n            } else {\n                ws_->async_handshake(websocket::stream_base::handshake::request, &Impl::onWinsockHandshake, this);\n            }\n        }\n    }\n\n    void onSSLhandshake(beast::error_code ec) {\n        if (!ec) {\n            ws_->async_handshake(websocket::stream_base::handshake::request, &Impl::onWinsockHandshake, this);\n        }\n    }\n\n    void onWinsockHandshake(beast::error_code ec) {\n        if (!ec) {\n            send(\"\", \"\");\n        }\n    }\n\n    void send(const std::string& message, const std::string& subprotocol) {\n        auto self(shared_from_this());\n        ws_->async_write(buffer_.prepare(message), [this, self](beast::error_code ec, std::size_t bytes_transferred) {\n            onWrite(ec, bytes_transferred);\n        });\n    }\n\n    void onWrite(beast::error_code ec, std::size_t bytes_transferred) {\n        if (!ec) {\n            read();\n        }\n    }\n\n    void read() {\n        auto self(shared_from_this());\n        ws_->async_read(buffer_.prepare(8192), [this, self](beast::error_code ec, std::size_t bytes_transferred) {\n            onRead(ec, bytes_transferred);\n        });\n    }\n\n    void onRead(beast::error_code ec, std::size_t bytes_transferred) {\n        if (!ec) {\n            // Process the message\n            read();\n        }\n    }\n\n    void onError(beast::error_code& ec, std::string message) {\n        log_->log(message);\n        close();\n    }\n\n    void enqueueWork(Work&) {\n        // Add work to the processing queue\n    }\n\n    void close() {\n        if (ws_) {\n            ws_->async_close(websocket::close_code::normal, [this](beast::error_code ec) {\n                if (!ec) {\n                    socket_status_ = 0;\n                }\n            });\n        }\n    }\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <boost/beast.hpp>\n#include <boost/asio/ssl.hpp>\n#include <memory>\n#include <string>\n#include <vector>\n\nnamespace beast = boost::beast;\nnamespace http = beast::http;\nnamespace net = boost::asio;\nnamespace ssl = net::ssl;\nnamespace websocket = beast::websocket;\n\nclass Device {\npublic:\n    std::string host;\n    int port;\n    // Other device settings\n};\n\nclass Logging {\npublic:\n    void log(const std::string& message) {\n        // Logging implementation\n    }\n};\n\nclass WebOsClient::Impl {\npublic:\n    Impl(net::io_context& ioc, ssl::context& ctx, Device& device_settings, Logging& log)\n        : ioc_(ioc), ctx_(ctx), device_settings_(device_settings), log_(log),\n          resolver_(ioc_), ws_(std::nullopt), ws_tcp_(std::nullopt),\n          buffer_(beast::flat_buffer()), host_(device_settings_.host),\n          socket_status_(0) {}\n\n    void run() {\n        resolver_.async_resolve(host_, std::to_string(device_settings_.port),\n                               std::bind(&Impl::onResolve, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\nprivate:\n    void onResolve(beast::error_code ec, tcp::resolver::results_type endpoints) {\n        if (!ec) {\n            if (device_settings_.port == 443) {\n                ws_tcp_.emplace(ioc_, beast::ssl_stream<beast::tcp_stream>(ioc_, ctx_));\n                ws_tcp_->async_connect(endpoints,\n                                       std::bind(&Impl::onConnect, this, std::placeholders::_1, std::placeholders::_2));\n            } else {\n                ws_.emplace(ioc_, beast::tcp_stream(ioc_));\n                ws_->async_connect(endpoints,\n                                   std::bind(&Impl::onConnect, this, std::placeholders::_1, std::placeholders::_2));\n            }\n        } else {\n            onError(ec, \"Resolve failed\");\n        }\n    }\n\n    void onConnect(beast::error_code ec, tcp::resolver::results_type::endpoint_type endpoint) {\n        if (!ec) {\n            if (device_settings_.port == 443) {\n                ws_tcp_->async_handshake(ssl::stream_base::client,\n                                         std::bind(&Impl::onSSLhandshake, this, std::placeholders::_1));\n            } else {\n                ws_->async_handshake(websocket::stream_base::handshake::request,\n                                     std::bind(&Impl::onWinsockHandshake, this, std::placeholders::_1));\n            }\n        } else {\n            onError(ec, \"Connect failed\");\n        }\n    }\n\n    void onSSLhandshake(beast::error_code ec) {\n        if (!ec) {\n            ws_->async_handshake(websocket::stream_base::handshake::request,\n                                 std::bind(&Impl::onWinsockHandshake, this, std::placeholders::_1));\n        } else {\n            onError(ec, \"SSL handshake failed\");\n        }\n    }\n\n    void onWinsockHandshake(beast::error_code ec) {\n        if (!ec) {\n            read();\n        } else {\n            onError(ec, \"WebSocket handshake failed\");\n        }\n    }\n\n    void send(const std::string& message, const std::string& subprotocol) {\n        auto self(shared_from_this());\n        ws_->async_write(buffer_.prepare(message),\n                         std::bind(&Impl::onWrite, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void onWrite(beast::error_code ec, std::size_t bytes_transferred) {\n        if (!ec) {\n            buffer_.commit(bytes_transferred);\n        } else {\n            onError(ec, \"Write failed\");\n        }\n    }\n\n    void read() {\n        auto self(shared_from_this());\n        ws_->async_read(buffer_.prepare(8192),\n                         std::bind(&Impl::onRead, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void onRead(beast::error_code ec, std::size_t bytes_transferred) {\n        if (!ec) {\n            buffer_.commit(bytes_transferred);\n            // Process the message\n            read();\n        } else {\n            onError(ec, \"Read failed\");\n        }\n    }\n\n    void onError(beast::error_code& ec, const std::string& message) {\n        log_.log(message);\n        // Handle error\n    }\n\n    void enqueueWork(Work&) {\n        // Add work to the processing queue\n    }\n\n    void close() {\n        // Initiate connection shutdown\n    }\n\nprivate:\n    net::io_context& ioc_;\n    ssl::context& ctx_;\n    Device& device_settings_;\n    std::shared_ptr<Logging> log_;\n    tcp::resolver resolver_;\n    std::optional<websocket::stream<beast::ssl_stream<beast::tcp_stream>>> ws_;\n    std::optional<websocket::stream<beast::tcp_stream>> ws_tcp_;\n    beast::flat_buffer buffer_;\n    std::string host_;\n    int socket_status_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <boost/beast.hpp>\n#include <boost/asio/ssl.hpp>\n#include <memory>\n#include <string>\n#include <optional>\n\nnamespace beast = boost::beast;\nnamespace http = beast::http;\nnamespace net = boost::asio;\nnamespace ssl = net::ssl;\nnamespace websocket = beast::websocket;\n\nclass Device {\npublic:\n    std::string host;\n    int port;\n    // Other device settings\n};\n\nclass Logging {\npublic:\n    void log(const std::string& message) {\n        // Logging implementation\n    }\n};\n\nclass WebOsClient::Impl {\npublic:\n    Impl(net::io_context& ioc, ssl::context& ctx, Device& device, Logging& log)\n        : ioc_(ioc), ctx_(ctx), device_settings_(device), log_(std::make_shared<Logging>(log)),\n          resolver_(ioc_), ws_(std::nullopt), ws_tcp_(std::nullopt), buffer_(beast::flat_buffer{}),\n          host_(device.host), socket_status_(0) {}\n\n    void run() {\n        resolver_.async_resolve(host_, std::to_string(device_settings_.port),\n                               std::bind(&Impl::onResolve, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\nprivate:\n    void onResolve(beast::error_code ec, tcp::resolver::results_type endpoints) {\n        if (!ec) {\n            if (device_settings_.use_ssl) {\n                ws_tcp_ = std::make_optional<websocket::stream<beast::ssl_stream<beast::tcp_stream>>>(\n                    std::make_shared<beast::ssl_stream<beast::tcp_stream>>(ioc_, ctx_));\n                ws_tcp_->next_layer().async_connect(endpoints,\n                                                    std::bind(&Impl::onConnect, this, std::placeholders::_1, endpoints.front()));\n            } else {\n                ws_tcp_ = std::make_optional<websocket::stream<beast::tcp_stream>>(\n                    std::make_shared<websocket::stream<beast::tcp_stream>>(ioc_));\n                ws_tcp_->next_layer().async_connect(endpoints.front(),\n                                                    std::bind(&Impl::onConnect, this, std::placeholders::_1, endpoints.front()));\n            }\n        } else {\n            onError(ec, \"Hostname resolution failed\");\n        }\n    }\n\n    void onConnect(beast::error_code ec, tcp::resolver::results_type::endpoint_type endpoint) {\n        if (!ec) {\n            if (device_settings_.use_ssl) {\n                ws_tcp_->next_layer().async_handshake(ssl::stream_base::client,\n                                                       std::bind(&Impl::onSSLhandshake, this, std::placeholders::_1));\n            } else {\n                ws_tcp_->next_layer().async_handshake(websocket::stream_base::handshake::request,\n                                                       std::bind(&Impl::onWinsockHandshake, this, std::placeholders::_1));\n            }\n        } else {\n            onError(ec, \"TCP connection failed\");\n        }\n    }\n\n    void onSSLhandshake(beast::error_code ec) {\n        if (!ec) {\n            ws_ = std::make_optional<websocket::stream<beast::ssl_stream<beast::tcp_stream>>>(*ws_tcp_);\n            ws_->async_handshake(websocket::stream_base::handshake::request,\n                                 std::bind(&Impl::onWinsockHandshake, this, std::placeholders::_1));\n        } else {\n            onError(ec, \"SSL handshake failed\");\n        }\n    }\n\n    void onWinsockHandshake(beast::error_code ec) {\n        if (!ec) {\n            socket_status_ = 1;\n            read();\n        } else {\n            onError(ec, \"WebSocket handshake failed\");\n        }\n    }\n\n    void send(const std::string& message, const std::string& subprotocol) {\n        if (ws_) {\n            ws_->async_write(http::make_message(http::verb::post, \"/\"),\n                             beast::bind_front_handler(&Impl::onWrite, this));\n        }\n    }\n\n    void onWrite(beast::error_code ec, std::size_t) {\n        if (ec) {\n            onError(ec, \"Write operation failed\");\n        }\n    }\n\n    void read() {\n        ws_->async_read(buffer_, beast::bind_front_handler(&Impl::onRead, this));\n    }\n\n    void onRead(beast::error_code ec, std::size_t) {\n        if (!ec) {\n            // Process the incoming message\n            read();\n        } else {\n            onError(ec, \"Read operation failed\");\n        }\n    }\n\n    void onError(beast::error_code& ec, const std::string& message) {\n        log_->log(message);\n        // Handle error\n    }\n\n    void enqueueWork(Work&) {\n        // Add work to the processing queue\n    }\n\n    void close() {\n        if (ws_) {\n            ws_->async_close(websocket::close_code::normal, std::bind(&Impl::onClose, this, std::placeholders::_1));\n        }\n    }\n\n    void onClose(beast::error_code ec) {\n        if (!ec) {\n            socket_status_ = 0;\n        } else {\n            log_->log(\"Close operation failed\");\n        }\n    }\n\nprivate:\n    net::io_context& ioc_;\n    ssl::context& ctx_;\n    Device& device_settings_;\n    std::shared_ptr<Logging> log_;\n    tcp::resolver resolver_;\n    std::optional<websocket::stream<beast::ssl_stream<beast::tcp_stream>>> ws_;\n    std::optional<websocket::stream<beast::tcp_stream>> ws_tcp_;\n    beast::flat_buffer buffer_;\n    std::string host_;\n    int socket_status_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <boost/beast.hpp>\n#include <boost/asio/ssl.hpp>\n#include <memory>\n#include <string>\n#include <optional>\n\nnamespace beast = boost::beast;\nnamespace http = beast::http;\nnamespace net = boost::asio;\nnamespace ssl = net::ssl;\nnamespace websocket = beast::websocket;\n\nclass Device {\npublic:\n    std::string host;\n    int port;\n    // Additional device settings\n};\n\nclass Logging {\npublic:\n    void log(const std::string& message) {\n        // Logging implementation\n    }\n};\n\nclass WebOsClient::Impl {\npublic:\n    Impl(net::io_context& ioc, ssl::context& ctx, Device& device, Logging& log)\n        : ioc_(ioc), ctx_(ctx), device_settings_(device), log_(std::make_shared<Logging>(log)),\n          resolver_(ioc_), ws_(std::nullopt), ws_tcp_(std::nullopt), buffer_(beast::flat_buffer{}),\n          host_(device.host), socket_status_(0) {}\n\n    void run() {\n        resolver_.async_resolve(host_, std::to_string(device_settings_.port),\n                               std::bind(&Impl::onResolve, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\nprivate:\n    void onResolve(beast::error_code ec, tcp::resolver::results_type endpoints) {\n        if (!ec) {\n            if (device_settings_.port == 443) {\n                ws_tcp_.emplace(tcp::stream(ioc_), ssl::stream<tcp::stream>(ctx_));\n                ws_tcp_->lowest_layer().async_connect(endpoints,\n                                                     std::bind(&Impl::onConnect, this, std::placeholders::_1, std::placeholders::_2));\n            } else {\n                ws_.emplace(tcp::stream(ioc_));\n                ws_->lowest_layer().async_connect(endpoints,\n                                                 std::bind(&Impl::onConnect, this, std::placeholders::_1, std::placeholders::_2));\n            }\n        } else {\n            onError(ec, \"Hostname resolution failed\");\n        }\n    }\n\n    void onConnect(beast::error_code ec, tcp::resolver::results_type::endpoint_type endpoint) {\n        if (!ec) {\n            if (device_settings_.port == 443) {\n                ws_tcp_->lowest_layer().async_handshake(ssl::stream_base::client,\n                                                       std::bind(&Impl::onSSLhandshake, this, std::placeholders::_1));\n            } else {\n                ws_->lowest_layer().async_handshake(websocket::stream_base::handshake::request,\n                                                     std::bind(&Impl::onWinsockHandshake, this, std::placeholders::_1));\n            }\n        } else {\n            onError(ec, \"Connection failed\");\n        }\n    }\n\n    void onSSLhandshake(beast::error_code ec) {\n        if (!ec) {\n            ws_->emplace(std::move(ws_tcp_->lowest_layer()), std::move(ws_tcp_->next_layer()));\n            ws_->async_handshake(websocket::stream_base::handshake::request,\n                                 std::bind(&Impl::onWinsockHandshake, this, std::placeholders::_1));\n        } else {\n            onError(ec, \"SSL handshake failed\");\n        }\n    }\n\n    void onWinsockHandshake(beast::error_code ec) {\n        if (!ec) {\n            socket_status_ = 1;\n            read();\n        } else {\n            onError(ec, \"WebSocket handshake failed\");\n        }\n    }\n\n    void send(const std::string& message, const std::string& subprotocol) {\n        if (socket_status_ == 1) {\n            auto self(shared_from_this());\n            ws_->async_write(http::make_message(http::verb::post, \"/\"),\n                             beast::bind_front_handler(\n                                 &Impl::onWrite, shared_from_this()));\n        }\n    }\n\n    void onWrite(beast::error_code ec, std::size_t) {\n        if (!ec) {\n            // Message sent successfully\n        } else {\n            onError(ec, \"Write operation failed\");\n        }\n    }\n\n    void read() {\n        auto self(shared_from_this());\n        ws_->async_read(buffer_, beast::bind_front_handler(\n            &Impl::onRead, shared_from_this()));\n    }\n\n    void onRead(beast::error_code ec, std::size_t) {\n        if (!ec) {\n            // Process read data\n            read();\n        } else {\n            onError(ec, \"Read operation failed\");\n        }\n    }\n\n    void onError(beast::error_code& ec, const std::string& message) {\n        log_->log(message);\n        close();\n    }\n\n    void enqueueWork(Work&) {\n        // Add work to the processing queue\n    }\n\n    void close() {\n        if (socket_status_ != 0) {\n            socket_status_ = 0;\n            if (ws_) {\n                ws_->async_close(websocket::close_code::normal, std::bind(&Impl::onClose, this, std::placeholders::_1));\n            }\n        }\n    }\n\n    void onClose(beast::error_code) {\n        // Connection closed\n    }\n\n    net::io_context& ioc_;\n    ssl::context& ctx_;\n    Device& device_settings_;\n    std::shared_ptr<Logging> log_;\n    tcp::resolver resolver_;\n    std::optional<websocket::stream<beast::ssl_stream<beast::tcp_stream>>> ws_;\n    std::optional<websocket::stream<beast::tcp_stream>> ws_tcp_;\n    beast::flat_buffer buffer_;\n    std::string host_;\n    int socket_status_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <boost/beast.hpp>\n#include <boost/asio/ssl.hpp>\n#include <memory>\n#include <string>\n#include <optional>\n\nnamespace beast = boost::beast;\nnamespace http = beast::http;\nnamespace net = boost::asio;\nnamespace ssl = net::ssl;\nnamespace websocket = beast::websocket;\n\nclass Device {\npublic:\n    std::string host;\n    int port;\n    // Other device settings\n};\n\nclass Logging {\npublic:\n    void log(const std::string& message) {\n        // Logging implementation\n    }\n};\n\nclass WebOsClient::Impl {\npublic:\n    Impl(net::io_context& ioc, ssl::context& ctx, Device& device, Logging& log)\n        : ioc_(ioc), ctx_(ctx), device_settings_(device), log_(std::make_shared<Logging>(log)),\n          resolver_(ioc_), ws_(std::nullopt), ws_tcp_(std::nullopt), buffer_(beast::flat_buffer{}),\n          host_(device.host), socket_status_(0) {}\n\n    void run() {\n        resolver_.async_resolve(host_, std::to_string(device_settings_.port),\n            std::bind(&Impl::onResolve, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\nprivate:\n    void onResolve(beast::error_code ec, tcp::resolver::results_type endpoints) {\n        if (!ec) {\n            if (device_settings_.ssl) {\n                ws_ = std::make_optional<websocket::stream<beast::ssl_stream<beast::tcp_stream>>>(\n                    std::make_shared<beast::ssl_stream<beast::tcp_stream>>(ioc_, ctx_));\n                ws_->lowest_layer().async_connect(endpoints,\n                    std::bind(&Impl::onConnect, this, std::placeholders::_1, endpoints.front()));\n            } else {\n                ws_tcp_ = std::make_optional<websocket::stream<beast::tcp_stream>>(\n                    std::make_shared<websocket::stream<beast::tcp_stream>>(ioc_));\n                ws_tcp_->lowest_layer().async_connect(endpoints.front(),\n                    std::bind(&Impl::onConnect, this, std::placeholders::_1, endpoints.front()));\n            }\n        } else {\n            onError(ec, \"Resolve error\");\n        }\n    }\n\n    void onConnect(beast::error_code ec, tcp::resolver::results_type::endpoint_type endpoint) {\n        if (!ec) {\n            if (device_settings_.ssl) {\n                ws_->value().async_handshake(ssl::stream_base::server,\n                    std::bind(&Impl::onSSLhandshake, this, std::placeholders::_1));\n            } else {\n                ws_tcp_->value().async_handshake(websocket::stream_base::server,\n                    std::bind(&Impl::onWinsockHandshake, this, std::placeholders::_1));\n            }\n        } else {\n            onError(ec, \"Connect error\");\n        }\n    }\n\n    void onSSLhandshake(beast::error_code ec) {\n        if (!ec) {\n            ws_->value().async_handshake(websocket::stream_base::client,\n                std::bind(&Impl::onWinsockHandshake, this, std::placeholders::_1));\n        } else {\n            onError(ec, \"SSL handshake error\");\n        }\n    }\n\n    void onWinsockHandshake(beast::error_code ec) {\n        if (!ec) {\n            socket_status_ = 1;\n            read();\n        } else {\n            onError(ec, \"Winsock handshake error\");\n        }\n    }\n\n    void send(const std::string& message, const std::string& subprotocol) {\n        auto ws = ws_.value_or(ws_tcp_.value());\n        ws.async_write(buffer_.prepare(message),\n            std::bind(&Impl::onWrite, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void onWrite(beast::error_code ec, std::size_t) {\n        if (ec) {\n            onError(ec, \"Write error\");\n        }\n    }\n\n    void read() {\n        auto ws = ws_.value_or(ws_tcp_.value());\n        ws.async_read(buffer_.prepare(8192),\n            std::bind(&Impl::onRead, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void onRead(beast::error_code ec, std::size_t) {\n        if (!ec) {\n            // Process the message\n            read();\n        } else {\n            onError(ec, \"Read error\");\n        }\n    }\n\n    void onError(beast::error_code& ec, const std::string& message) {\n        log_->log(message);\n        // Handle error\n    }\n\n    void enqueueWork(Work&) {\n        // Add work to the processing queue\n    }\n\n    void close() {\n        // Initiate connection shutdown\n    }\n\nprivate:\n    net::io_context& ioc_;\n    ssl::context& ctx_;\n    Device& device_settings_;\n    std::shared_ptr<Logging> log_;\n    tcp::resolver resolver_;\n    std::optional<websocket::stream<beast::ssl_stream<beast::tcp_stream>>> ws_;\n    std::optional<websocket::stream<beast::tcp_stream>>> ws_tcp_;\n    beast::flat_buffer buffer_;\n    std::string host_;\n    int socket_status_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <boost/beast.hpp>\n#include <boost/asio/ssl.hpp>\n#include <memory>\n#include <string>\n#include <optional>\n\nnamespace beast = boost::beast;\nnamespace http = beast::http;\nnamespace net = boost::asio;\nnamespace ssl = net::ssl;\nnamespace websocket = beast::websocket;\n\nclass Device {\npublic:\n    std::string host;\n    int port;\n    // Other device settings\n};\n\nclass Logging {\npublic:\n    void log(const std::string& message) {\n        // Logging implementation\n    }\n};\n\nclass WebOsClient::Impl {\npublic:\n    Impl(net::io_context& ioc, ssl::context& ctx, Device& device, Logging& log)\n        : ioc_(ioc), ctx_(ctx), device_settings_(device), log_(std::make_shared<Logging>(log)),\n          resolver_(ioc_), ws_(std::nullopt), ws_tcp_(std::nullopt), buffer_(beast::flat_buffer{}),\n          host_(device.host), socket_status_(0) {}\n\n    void run() {\n        resolver_.async_resolve(host_, std::to_string(device_settings_.port),\n                               std::bind(&Impl::onResolve, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\nprivate:\n    void onResolve(beast::error_code ec, tcp::resolver::results_type endpoints) {\n        if (!ec) {\n            if (device_settings_.ssl) {\n                ws_tcp_ = std::make_optional<websocket::stream<beast::ssl_stream<beast::tcp_stream>>>(\n                    std::make_shared<beast::ssl_stream<beast::tcp_stream>>(ioc_, ctx_));\n                ws_tcp_->next_layer().async_connect(endpoints,\n                                                    std::bind(&Impl::onConnect, this, std::placeholders::_1, endpoints.front()));\n            } else {\n                ws_tcp_ = std::make_optional<websocket::stream<beast::tcp_stream>>(\n                    std::make_shared<websocket::stream<beast::tcp_stream>>(ioc_));\n                ws_tcp_->next_layer().async_connect(endpoints.front(),\n                                                    std::bind(&Impl::onConnect, this, std::placeholders::_1, endpoints.front()));\n            }\n        } else {\n            onError(ec, \"Resolve error\");\n        }\n    }\n\n    void onConnect(beast::error_code ec, tcp::resolver::results_type::endpoint_type endpoint) {\n        if (!ec) {\n            if (device_settings_.ssl) {\n                ws_tcp_->next_layer().async_handshake(ssl::stream_base::client,\n                                                       std::bind(&Impl::onSSLhandshake, this, std::placeholders::_1));\n            } else {\n                ws_tcp_->next_layer().async_handshake(websocket::stream_base::handshake::request,\n                                                       std::bind(&Impl::onWinsockHandshake, this, std::placeholders::_1));\n            }\n        } else {\n            onError(ec, \"Connect error\");\n        }\n    }\n\n    void onSSLhandshake(beast::error_code ec) {\n        if (!ec) {\n            ws_ = std::make_optional<websocket::stream<beast::ssl_stream<beast::tcp_stream>>>(\n                std::static_pointer_cast<websocket::stream<beast::ssl_stream<beast::tcp_stream>>>(ws_tcp_));\n            ws_->async_handshake(host_, \"/\",\n                                 std::bind(&Impl::onWinsockHandshake, this, std::placeholders::_1));\n        } else {\n            onError(ec, \"SSL handshake error\");\n        }\n    }\n\n    void onWinsockHandshake(beast::error_code ec) {\n        if (!ec) {\n            socket_status_ = 1;\n            read();\n        } else {\n            onError(ec, \"Winsock handshake error\");\n        }\n    }\n\n    void send(const std::string& message, const std::string& subprotocol) {\n        if (ws_) {\n            ws_->async_write(\n                beast::make_buffer(message.data(), message.size()),\n                std::bind(&Impl::onWrite, this, std::placeholders::_1, std::placeholders::_2));\n        }\n    }\n\n    void onWrite(beast::error_code ec, std::size_t) {\n        if (ec) {\n            onError(ec, \"Write error\");\n        }\n    }\n\n    void read() {\n        ws_->async_read(buffer_, std::bind(&Impl::onRead, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void onRead(beast::error_code ec, std::size_t) {\n        if (!ec) {\n            // Process the message\n            read();\n        } else {\n            onError(ec, \"Read error\");\n        }\n    }\n\n    void onError(beast::error_code& ec, const std::string& message) {\n        log_->log(message);\n        close();\n    }\n\n    void enqueueWork(Work&) {\n        // Add work to the processing queue\n    }\n\n    void close() {\n        if (ws_) {\n            ws_->async_close(websocket::close_code::normal,\n                             std::bind(&Impl::onClose, this, std::placeholders::_1));\n        }\n    }\n\n    void onClose(beast::error_code) {\n        socket_status_ = 0;\n        // Clean up resources\n    }\n\nprivate:\n    net::io_context& ioc_;\n    ssl::context& ctx_;\n    Device& device_settings_;\n    std::shared_ptr<Logging> log_;\n    tcp::resolver resolver_;\n    std::optional<websocket::stream<beast::ssl_stream<beast::tcp_stream>>> ws_;\n    std::optional<websocket::stream<beast::tcp_stream>> ws_tcp_;\n    beast::flat_buffer buffer_;\n    std::string host_;\n    int socket_status_;\n};\n```"
    ],
    "unmatched_results": [
      "```cpp\n#include <boost/asio.hpp>\n#include <boost/beast.hpp>\n#include <boost/asio/ssl.hpp>\n#include <memory>\n#include <string>\n#include <optional>\n\nnamespace beast = boost::beast;\nnamespace http = beast::http;\nnamespace net = boost::asio;\nnamespace ssl = net::ssl;\nusing tcp = net::ip::tcp;\n\nclass Device {\npublic:\n    std::string host;\n    int port;\n    // Additional device settings\n};\n\nclass Logging {\npublic:\n    void log(const std::string& message) {\n        // Logging implementation\n    }\n};\n\nclass WebOsClient::Impl {\npublic:\n    Impl(net::io_context& ioc, ssl::context& ctx, Device& device, Logging& log)\n        : ioc_(ioc), ctx_(ctx), device_settings_(device), log_(std::make_shared<Logging>(log)),\n          resolver_(ioc_), ws_(std::nullopt), ws_tcp_(std::nullopt), buffer_(beast::flat_buffer{}),\n          host_(device.host), socket_status_(0) {}\n\n    void run() {\n        resolver_.async_resolve(host_, std::to_string(device_settings_.port),\n            std::bind(&Impl::onResolve, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\nprivate:\n    net::io_context& ioc_;\n    ssl::context& ctx_;\n    Device& device_settings_;\n    std::shared_ptr<Logging> log_;\n    tcp::resolver resolver_;\n    std::optional<websocket::stream<beast::ssl_stream<beast::tcp_stream>>> ws_;\n    std::optional<websocket::stream<beast::tcp_stream>> ws_tcp_;\n    beast::flat_buffer buffer_;\n    std::string host_;\n    int socket_status_;\n\n    void onResolve(beast::error_code ec, tcp::resolver::results_type endpoints) {\n        if (!ec) {\n            if (device_settings_.port == 443) {\n                ws_.emplace(ioc_, ctx_);\n                ws_->async_handshake(ssl::stream_base::server, std::bind(&Impl::onSSLhandshake, this, std::placeholders::_1));\n            } else {\n                ws_tcp_.emplace(ioc_);\n                ws_tcp_->async_handshake(tcp::endpoint(endpoints.begin()->endpoint(), endpoints.begin()->port()),\n                    std::bind(&Impl::onWinsockHandshake, this, std::placeholders::_1));\n            }\n        } else {\n            onError(ec, \"Hostname resolution failed\");\n        }\n    }\n\n    void onSSLhandshake(beast::error_code ec) {\n        if (!ec) {\n            ws_->async_handshake(websocket::stream_base::handshake::client,\n                std::bind(&Impl::onWinsockHandshake, this, std::placeholders::_1));\n        } else {\n            onError(ec, \"SSL handshake failed\");\n        }\n    }\n\n    void onWinsockHandshake(beast::error_code ec) {\n        if (!ec) {\n            socket_status_ = 1;\n            read();\n        } else {\n            onError(ec, \"WebSocket handshake failed\");\n        }\n    }\n\n    void send(const std::string& message, const std::string& subprotocol) {\n        if (ws_) {\n            ws_->async_write(buffer_.prepare(message),\n                std::bind(&Impl::onWrite, this, std::placeholders::_1, std::placeholders::_2));\n        } else if (ws_tcp_) {\n            ws_tcp_->async_write(buffer_.prepare(message),\n                std::bind(&Impl::onWrite, this, std::placeholders::_1, std::placeholders::_2));\n        }\n    }\n\n    void onWrite(beast::error_code ec, std::size_t) {\n        if (ec) {\n            onError(ec, \"Write operation failed\");\n        }\n    }\n\n    void read() {\n        ws_->async_read(buffer_.prepare(8192),\n            std::bind(&Impl::onRead, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void onRead(beast::error_code ec, std::size_t) {\n        if (!ec) {\n            // Process the message\n            read();\n        } else {\n            onError(ec, \"Read operation failed\");\n        }\n    }\n\n    void onError(beast::error_code& ec, const std::string& message) {\n        log_->log(message);\n        close();\n    }\n\n    void enqueueWork(Work&) {\n        // Add work to the processing queue\n    }\n\n    void close() {\n        if (ws_) {\n            ws_->async_shutdown(std::bind(&Impl::onShutdown, this, std::placeholders::_1));\n        } else if (ws_tcp_) {\n            ws_tcp_->async_shutdown(std::bind(&Impl::onShutdown, this, std::placeholders::_1));\n        }\n    }\n\n    void onShutdown(beast::error_code ec) {\n        if (!ec) {\n            socket_status_ = 0;\n        }\n    }\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <boost/beast.hpp>\n#include <boost/asio/ssl.hpp>\n#include <memory>\n#include <string>\n#include <optional>\n\nnamespace beast = boost::beast;\nnamespace http = beast::http;\nnamespace net = boost::asio;\nnamespace ssl = net::ssl;\nnamespace tcp = net::ip::tcp;\n\nclass Device;\nclass Logging;\n\nclass WebOsClient::Impl {\npublic:\n    Impl(net::io_context& ioc, ssl::context& ctx, Device& device_settings, Logging& log)\n        : ioc_(ioc), ctx_(ctx), device_settings_(device_settings), log_(log),\n          resolver_(ioc), ws_(std::nullopt), ws_tcp_(std::nullopt),\n          buffer_(beast::flat_buffer()), host_(device_settings_.getHost()),\n          socket_status_(0) {}\n\n    void run() {\n        resolver_.async_resolve(host_, device_settings_.getPort(), std::bind(&Impl::onResolve, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\nprivate:\n    void onResolve(beast::error_code ec, tcp::resolver::results_type endpoints) {\n        if (!ec) {\n            if (device_settings_.isSecure()) {\n                ws_tcp_ = std::make_optional<websocket::stream<beast::ssl_stream<beast::tcp_stream>>>(ioc_, ctx_);\n                ws_tcp_->async_handshake(ssl::stream_base::server, std::bind(&Impl::onSSLhandshake, this, std::placeholders::_1));\n            } else {\n                ws_tcp_ = std::make_optional<websocket::stream<beast::tcp_stream>>(ioc_);\n                ws_tcp_->async_handshake(tcp::endpoint(endpoints.begin()->endpoint(), endpoints.begin()->port()), std::bind(&Impl::onWinsockHandshake, this, std::placeholders::_1));\n            }\n        }\n    }\n\n    void onConnect(beast::error_code ec, tcp::resolver::results_type::endpoint_type endpoint) {\n        if (!ec) {\n            ws_tcp_->async_handshake(tcp::endpoint(endpoint), std::bind(&Impl::onWinsockHandshake, this, std::placeholders::_1));\n        }\n    }\n\n    void onSSLhandshake(beast::error_code ec) {\n        if (!ec) {\n            ws_->emplace(ioc_, beast::ssl_stream<beast::tcp_stream>(*ws_tcp_));\n            ws_->async_handshake(ssl::stream_base::client, std::bind(&Impl::onWinsockHandshake, this, std::placeholders::_1));\n        }\n    }\n\n    void onWinsockHandshake(beast::error_code ec) {\n        if (!ec) {\n            socket_status_ = 1;\n            read();\n        }\n    }\n\n    void send(const std::string& message, const std::string& subprotocol) {\n        ws_->emplace(ioc_, beast::ssl_stream<beast::tcp_stream>(*ws_tcp_));\n        ws_->async_write(http::make_message(http::verb::post, \"/\").prepare(), std::bind(&Impl::onWrite, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void onWrite(beast::error_code ec, std::size_t) {\n        if (!ec) {\n            // Message sent successfully\n        }\n    }\n\n    void read() {\n        ws_->async_read(buffer_, std::bind(&Impl::onRead, this, std::placeholders::_1, std::placeholders::_2));\n    }\n\n    void onRead(beast::error_code ec, std::size_t) {\n        if (!ec) {\n            // Process read data\n            read();\n        }\n    }\n\n    void onError(beast::error_code& ec, std::string message) {\n        if (!ec) {\n            ec = beast::errc::make_error_code(beast::errc::make_error_code(ec).value());\n        }\n        log_.logError(message);\n    }\n\n    void enqueueWork(Work&) {}\n\n    void close() {\n        socket_status_ = 0;\n        ws_->reset();\n        ws_tcp_->reset();\n    }\n\n    net::io_context& ioc_;\n    ssl::context& ctx_;\n    Device& device_settings_;\n    std::shared_ptr<Logging> log_;\n    tcp::resolver resolver_;\n    std::optional<websocket::stream<beast::ssl_stream<beast::tcp_stream>>> ws_;\n    std::optional<websocket::stream<beast::tcp_stream>>> ws_tcp_;\n    beast::flat_buffer buffer_;\n    std::string host_;\n    int socket_status_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <boost/beast.hpp>\n#include <boost/asio/ssl.hpp>\n#include <memory>\n#include <string>\n#include <optional>\n\nnamespace beast = boost::beast;\nnamespace http = beast::http;\nnamespace net = boost::asio;\nnamespace ssl = net::ssl;\nnamespace websocket = beast::websocket;\n\nclass Device {\npublic:\n    std::string host;\n    int port;\n    // Other device settings\n};\n\nclass Logging {\npublic:\n    void log(const std::string& message) {\n        // Logging implementation\n    }\n};\n\nclass WebOsClient::Impl {\npublic:\n    Impl(net::io_context& ioc, ssl::context& ctx, Device& device, Logging& log)\n        : ioc_(ioc), ctx_(ctx), device_settings_(device), log_(std::make_shared<Logging>(log)),\n          resolver_(ioc_), ws_(std::nullopt), ws_tcp_(std::nullopt), buffer_(beast::flat_buffer{}),\n          host_(device.host), socket_status_(0) {}\n\n    void run() {\n        resolver_.async_resolve(host_, std::to_string(device_settings_.port), &Impl::onResolve, this);\n    }\n\nprivate:\n    void onResolve(beast::error_code ec, tcp::resolver::results_type endpoints) {\n        if (!ec) {\n            if (device_settings_.port == 443) {\n                ws_tcp_.emplace(ioc_, beast::tcp_stream{ioc_, endpoints});\n                ws_tcp_->next_layer().async_handshake(ssl::stream_base::client, &Impl::onSSLhandshake, this);\n            } else {\n                ws_tcp_.emplace(ioc_, beast::tcp_stream{ioc_, endpoints});\n                ws_tcp_->async_handshake(websocket::stream_base::handshake::request, &Impl::onWinsockHandshake, this);\n            }\n        } else {\n            onError(ec, \"Resolve failed\");\n        }\n    }\n\n    void onConnect(beast::error_code ec, tcp::resolver::results_type::endpoint_type) {\n        if (!ec) {\n            ws_tcp_->async_handshake(websocket::stream_base::handshake::request, &Impl::onWinsockHandshake, this);\n        } else {\n            onError(ec, \"Connect failed\");\n        }\n    }\n\n    void onSSLhandshake(beast::error_code ec) {\n        if (!ec) {\n            ws_.emplace(ioc_, beast::ssl_stream<beast::tcp_stream>{std::move(ws_tcp_->next_layer()), ctx_});\n            ws_->async_handshake(websocket::stream_base::handshake::request, &Impl::onWinsockHandshake, this);\n        } else {\n            onError(ec, \"SSL handshake failed\");\n        }\n    }\n\n    void onWinsockHandshake(beast::error_code ec) {\n        if (!ec) {\n            socket_status_ = 1;\n            read();\n        } else {\n            onError(ec, \"WebSocket handshake failed\");\n        }\n    }\n\n    void send(const std::string& message, const std::string& subprotocol) {\n        auto self(shared_from_this());\n        ws_->async_write(http::make_message(http::verb::post, \"/\"),\n                         beast::bind_front_handler(&Impl::onWrite, shared_from_this()));\n    }\n\n    void onWrite(beast::error_code ec, std::size_t) {\n        if (ec) {\n            onError(ec, \"Write failed\");\n        }\n    }\n\n    void read() {\n        auto self(shared_from_this());\n        ws_->async_read(buffer_, beast::bind_front_handler(&Impl::onRead, shared_from_this()));\n    }\n\n    void onRead(beast::error_code ec, std::size_t) {\n        if (!ec) {\n            // Process message\n            read();\n        } else {\n            onError(ec, \"Read failed\");\n        }\n    }\n\n    void onError(beast::error_code& ec, const std::string& message) {\n        log_->log(message);\n        // Error handling logic\n    }\n\n    void enqueueWork(Work&) {\n        // Add work to processing queue\n    }\n\n    void close() {\n        // Initiate connection shutdown\n    }\n\n    net::io_context& ioc_;\n    ssl::context& ctx_;\n    Device& device_settings_;\n    std::shared_ptr<Logging> log_;\n    tcp::resolver resolver_;\n    std::optional<websocket::stream<beast::ssl_stream<beast::tcp_stream>>> ws_;\n    std::optional<websocket::stream<beast::tcp_stream>> ws_tcp_;\n    beast::flat_buffer buffer_;\n    std::string host_;\n    int socket_status_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <boost/beast.hpp>\n#include <boost/asio/ssl.hpp>\n#include <memory>\n#include <string>\n#include <optional>\n\nnamespace beast = boost::beast;\nnamespace http = beast::http;\nnamespace net = boost::asio;\nnamespace ssl = net::ssl;\nusing tcp = net::ip::tcp;\n\nclass Device {\npublic:\n    std::string host;\n    std::string port;\n    // Other device settings\n};\n\nclass Logging {\npublic:\n    void log(const std::string& message) {\n        // Logging implementation\n    }\n};\n\nclass WebOsClient::Impl {\npublic:\n    Impl(net::io_context& ioc, ssl::context& ctx, Device& device, Logging& log)\n        : ioc_(ioc), ctx_(ctx), device_settings_(device), log_(log),\n          resolver_(ioc_), ws_(std::nullopt), ws_tcp_(std::nullopt),\n          buffer_(beast::flat_buffer()), host_(device.host + \":\" + device.port),\n          socket_status_(0) {}\n\n    void run() {\n        resolver_.async_resolve(host_, net::ip::v4(), onResolve);\n    }\n\nprivate:\n    void onResolve(beast::error_code ec, tcp::resolver::results_type endpoints) {\n        if (!ec) {\n            auto ep = *endpoints.begin();\n            if (device_settings_.port == \"443\") {\n                ws_.emplace(ioc_, beast::ssl_stream<beast::tcp_stream>(ioc_, ctx_));\n                ws_->async_handshake(ssl::stream_base::client, onSSLhandshake);\n            } else {\n                ws_tcp_.emplace(ioc_, beast::tcp_stream(ioc_));\n                ws_tcp_->async_handshake(ep, onWinsockHandshake);\n            }\n        }\n    }\n\n    void onConnect(beast::error_code ec, tcp::resolver::results_type::endpoint_type) {\n        if (!ec) {\n            ws_->async_handshake(ssl::stream_base::client, onSSLhandshake);\n        }\n    }\n\n    void onSSLhandshake(beast::error_code ec) {\n        if (!ec) {\n            ws_->async_handshake(websocket::stream_base::handshake::request, onWinsockHandshake);\n        }\n    }\n\n    void onWinsockHandshake(beast::error_code ec) {\n        if (!ec) {\n            send(\"\", \"GET / HTTP/1.1\\r\\nHost: \" + host_ + \"\\r\\nConnection: Upgrade\\r\\nUpgrade: websocket\\r\\n\\r\\n\");\n        }\n    }\n\n    void send(std::string payload, std::string header) {\n        auto self(shared_from_this());\n        ws_->async_write(buffer_.prepare(header + payload), [this, self](beast::error_code ec, std::size_t) {\n            onWrite(ec, self);\n        });\n    }\n\n    void onWrite(beast::error_code ec, std::shared_ptr<Impl> self) {\n        if (ec) {\n            onError(ec, \"Write failed\");\n        }\n    }\n\n    void read() {\n        auto self(shared_from_this());\n        ws_->async_read(buffer_.prepare(8192), [this, self](beast::error_code ec, std::size_t) {\n            onRead(ec, self);\n        });\n    }\n\n    void onRead(beast::error_code ec, std::shared_ptr<Impl> self) {\n        if (!ec) {\n            auto data = buffer_.data();\n            // Process data\n            read();\n        } else {\n            onError(ec, \"Read failed\");\n        }\n    }\n\n    void onError(beast::error_code& ec, std::string message) {\n        log_.log(message);\n        // Error handling\n    }\n\n    void enqueueWork(Work&) {\n        // Work queue handling\n    }\n\n    void close() {\n        if (ws_) {\n            ws_->async_shutdown([this](beast::error_code ec) {\n                // Connection shutdown\n            });\n        }\n    }\n};\n```"
    ],
    "match_count": 6,
    "pass@3": 0.9666666666666667,
    "pass@5": 1.0
  },
  {
    "Task_id": 9,
    "Instruction": "Task Description: Implement a TCP client using Boost.Asio for asynchronous network communication, capable of connecting to a server, sending messages, and receiving responses.\n\nClass Description: The `chat_client` class encapsulates a TCP client that manages asynchronous network operations including connection establishment, message reading, and message writing.\n\nAttributes:\n- io_context_: boost::asio::io_context& - Reference to the I/O execution context for asynchronous operations.\n- socket_: tcp::socket - TCP socket for communication with the server.\n- read_msg_: chat_message - Buffer for storing the currently read message.\n- write_msgs_: chat_message_queue - Queue of messages waiting to be sent to the server.\n\nMethods:\n- Constructor: chat_client(boost::asio::io_context& io_context, const tcp::resolver::results_type& endpoints) -> None - Initializes the client with I/O context and server endpoints, then starts the connection process.\n- write: write(const chat_message& msg) -> None - Enqueues a message for asynchronous sending to the server.\n- close: close() -> None - Initiates socket closure to terminate the connection cleanly.\n- do_connect: do_connect(const tcp::resolver::results_type& endpoints) -> None - Asynchronously connects to the server using the provided endpoints.\n- do_read_header: do_read_header() -> None - Asynchronously reads the message header from the server.\n- do_read_body: do_read_body() -> None - Asynchronously reads the message body from the server after header is processed.\n- do_write: do_write() -> None - Asynchronously writes the next queued message to the server.",
    "Canonical_solution": "#include <boost/asio.hpp>\n#include <deque>\n#include \"chat_message.hpp\"\n\nusing boost::asio::ip::tcp;\ntypedef std::deque<chat_message> chat_message_queue;\n\nclass chat_client\n{\npublic:\n  chat_client(boost::asio::io_context& io_context,\n      const tcp::resolver::results_type& endpoints)\n    : io_context_(io_context),\n      socket_(io_context)\n  {\n    do_connect(endpoints);\n  }\n\n  void write(const chat_message& msg)\n  {\n    boost::asio::post(io_context_,\n        [this, msg]()\n        {\n          bool write_in_progress = !write_msgs_.empty();\n          write_msgs_.push_back(msg);\n          if (!write_in_progress)\n          {\n            do_write();\n          }\n        });\n  }\n\n  void close()\n  {\n    boost::asio::post(io_context_, [this]() { socket_.close(); });\n  }\n\nprivate:\n  void do_connect(const tcp::resolver::results_type& endpoints)\n  {\n    boost::asio::async_connect(socket_, endpoints,\n        [this](boost::system::error_code ec, tcp::endpoint)\n        {\n          if (!ec)\n          {\n            do_read_header();\n          }\n        });\n  }\n\n  void do_read_header()\n  {\n    boost::asio::async_read(socket_,\n        boost::asio::buffer(read_msg_.data(), chat_message::header_length),\n        [this](boost::system::error_code ec, std::size_t /*length*/)\n        {\n          if (!ec && read_msg_.decode_header())\n          {\n            do_read_body();\n          }\n          else\n          {\n            socket_.close();\n          }\n        });\n  }\n\n  void do_read_body()\n  {\n    boost::asio::async_read(socket_,\n        boost::asio::buffer(read_msg_.body(), read_msg_.body_length()),\n        [this](boost::system::error_code ec, std::size_t /*length*/)\n        {\n          if (!ec)\n          {\n            std::cout.write(read_msg_.body(), read_msg_.body_length());\n            std::cout << \"\\n\";\n            do_read_header();\n          }\n          else\n          {\n            socket_.close();\n          }\n        });\n  }\n\n  void do_write()\n  {\n    boost::asio::async_write(socket_,\n        boost::asio::buffer(write_msgs_.front().data(),\n          write_msgs_.front().length()),\n        [this](boost::system::error_code ec, std::size_t /*length*/)\n        {\n          if (!ec)\n          {\n            write_msgs_.pop_front();\n            if (!write_msgs_.empty())\n            {\n              do_write();\n            }\n          }\n          else\n          {\n            socket_.close();\n          }\n        });\n  }\n\nprivate:\n  boost::asio::io_context& io_context_;\n  tcp::socket socket_;\n  chat_message read_msg_;\n  chat_message_queue write_msgs_;\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 151,
    "matched_results": [
      "```cpp\n#include <boost/asio.hpp>\n#include <boost/system/error_code.hpp>\n#include <queue>\n#include <memory>\n\nnamespace boost {\nnamespace asio {\nclass io_context;\nclass tcp;\nclass socket;\nclass resolver;\nclass endpoint;\n} // namespace asio\n} // namespace boost\n\nstruct chat_message {\n    std::string data;\n};\n\nclass chat_message_queue {\n    std::queue<chat_message> messages;\npublic:\n    void push(const chat_message& msg) {\n        messages.push(msg);\n    }\n    bool empty() const {\n        return messages.empty();\n    }\n    chat_message pop() {\n        return messages.front();\n        messages.pop();\n    }\n};\n\nclass chat_client {\nprivate:\n    boost::asio::io_context& io_context_;\n    boost::asio::tcp::socket socket_;\n    chat_message read_msg_;\n    chat_message_queue write_msgs_;\n    boost::asio::deadline_timer read_timer_;\n    boost::asio::deadline_timer write_timer_;\n    size_t read_header_size_;\n    std::unique_ptr<char[]> read_header_buffer_;\n    std::unique_ptr<char[]> read_body_buffer_;\n    bool read_header_complete_;\n    bool write_in_progress_;\n\npublic:\n    chat_client(boost::asio::io_context& io_context, const boost::asio::tcp::resolver::results_type& endpoints)\n        : io_context_(io_context), read_header_size_(0), read_header_complete_(false), write_in_progress_(false) {\n        do_connect(endpoints);\n    }\n\n    void write(const chat_message& msg) {\n        write_msgs_.push(msg);\n        if (!write_in_progress_) {\n            do_write();\n        }\n    }\n\n    void close() {\n        boost::system::error_code ec;\n        socket_.shutdown(boost::asio::socket_base::shutdown_both, ec);\n        socket_.close(ec);\n    }\n\nprivate:\n    void do_connect(const boost::asio::tcp::resolver::results_type& endpoints) {\n        boost::asio::async_connect(socket_, endpoints, [this](boost::system::error_code ec, const boost::asio::tcp::endpoint& endpoint) {\n            if (!ec) {\n                do_read_header();\n            }\n        });\n    }\n\n    void do_read_header() {\n        read_header_buffer_ = std::make_unique<char[]>(sizeof(size_t));\n        read_header_size_ = sizeof(size_t);\n        read_header_complete_ = false;\n        boost::asio::async_read(socket_, boost::asio::buffer(read_header_buffer_.get(), read_header_size_), [this](boost::system::error_code ec, std::size_t bytes_transferred) {\n            if (!ec) {\n                read_header_size_ -= bytes_transferred;\n                if (read_header_size_ > 0) {\n                    do_read_header();\n                } else {\n                    read_msg_.data.resize(*(reinterpret_cast<size_t*>(read_header_buffer_.get())));\n                    read_header_complete_ = true;\n                    do_read_body();\n                }\n            }\n        });\n    }\n\n    void do_read_body() {\n        read_body_buffer_ = std::make_unique<char[]>(read_msg_.data.size());\n        boost::asio::async_read(socket_, boost::asio::buffer(read_body_buffer_.get(), read_msg_.data.size()), [this](boost::system::error_code ec, std::size_t bytes_transferred) {\n            if (!ec) {\n                read_msg_.data.assign(read_body_buffer_.get(), read_body_buffer_.get() + bytes_transferred);\n                do_read_header();\n            }\n        });\n    }\n\n    void do_write() {\n        if (!write_msgs_.empty()) {\n            auto msg = write_msgs_.pop();\n            write_in_progress_ = true;\n            boost::asio::async_write(socket_, boost::asio::buffer(&msg.data.size(), sizeof(size_t)), [this, msg](boost::system::error_code ec, std::size_t bytes_transferred) {\n                if (!ec) {\n                    boost::asio::async_write(socket_, boost::asio::buffer(msg.data.data(), msg.data.size()), [this, msg](boost::system::error_code ec, std::size_t bytes_transferred) {\n                        write_in_progress_ = false;\n                        do_write();\n                    });\n                }\n            });\n        }\n    }\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <boost/system/error_code.hpp>\n#include <queue>\n#include <memory>\n\nnamespace boost {\nnamespace asio {\nclass io_context;\nclass tcp;\nclass socket;\nclass resolver;\nclass error_code;\n}\n}\n\nstruct chat_message {\n    std::string data;\n};\n\nclass chat_message_queue {\n    std::queue<chat_message> messages;\npublic:\n    void push(const chat_message& msg) {\n        messages.push(msg);\n    }\n    bool empty() const {\n        return messages.empty();\n    }\n    chat_message pop() {\n        return messages.front();\n        messages.pop();\n    }\n};\n\nclass chat_client {\nprivate:\n    boost::asio::io_context& io_context_;\n    boost::asio::tcp::socket socket_;\n    chat_message read_msg_;\n    chat_message_queue write_msgs_;\n    boost::asio::deadline_timer read_timer_;\n    boost::asio::deadline_timer write_timer_;\n    size_t read_header_size_;\n    size_t read_body_size_;\n    bool read_header_;\n    bool write_header_;\n    bool write_body_;\n\npublic:\n    chat_client(boost::asio::io_context& io_context, const boost::asio::tcp::resolver::results_type& endpoints)\n        : io_context_(io_context), read_header_(true), write_header_(true), write_body_(true) {\n        do_connect(endpoints);\n    }\n\n    void write(const chat_message& msg) {\n        write_msgs_.push(msg);\n        if (write_body_) {\n            do_write();\n        }\n    }\n\n    void close() {\n        socket_.close();\n    }\n\n    void do_connect(const boost::asio::tcp::resolver::results_type& endpoints) {\n        boost::asio::async_connect(socket_, endpoints, [this](boost::system::error_code ec, const boost::asio::ip::tcp::endpoint& endpoint) {\n            if (!ec) {\n                do_read_header();\n            }\n        });\n    }\n\n    void do_read_header() {\n        read_header_size_ = sizeof(size_t);\n        boost::asio::async_read(socket_, boost::asio::buffer(&read_header_size_, read_header_size_), [this](boost::system::error_code ec, std::size_t bytes_transferred) {\n            if (!ec) {\n                read_body_size_ = read_header_size_;\n                do_read_body();\n            }\n        });\n    }\n\n    void do_read_body() {\n        boost::asio::async_read(socket_, boost::asio::buffer(read_msg_.data.data(), read_body_size_), [this](boost::system::error_code ec, std::size_t bytes_transferred) {\n            if (!ec) {\n                read_msg_.data.resize(bytes_transferred);\n                read_header_ = true;\n                write_header_ = true;\n                write_body_ = true;\n                do_read_header();\n            }\n        });\n    }\n\n    void do_write() {\n        if (!write_msgs_.empty()) {\n            chat_message msg = write_msgs_.front();\n            write_msgs_.pop();\n            write_header_size_ = sizeof(size_t);\n            write_header_size_ += msg.data.size();\n            boost::asio::async_write(socket_, boost::asio::buffer(&write_header_size_, write_header_size_), [this, msg](boost::system::error_code ec, std::size_t bytes_transferred) {\n                if (!ec) {\n                    write_body_ = true;\n                    do_write_body();\n                }\n            });\n        }\n    }\n\n    void do_write_body() {\n        if (write_body_) {\n            boost::asio::async_write(socket_, boost::asio::buffer(msg.data.data(), msg.data.size()), [this](boost::system::error_code ec, std::size_t bytes_transferred) {\n                if (!ec) {\n                    write_body_ = false;\n                    do_write();\n                }\n            });\n        }\n    }\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <boost/system/error_code.hpp>\n#include <iostream>\n#include <queue>\n#include <string>\n\nnamespace boost {\nnamespace asio {\nclass io_context;\nclass tcp;\nclass socket;\nclass resolver;\nclass endpoint;\n}\n}\n\nclass chat_message {\npublic:\n    std::string header;\n    std::string body;\n};\n\nclass chat_message_queue {\npublic:\n    std::queue<chat_message> messages;\n};\n\nclass chat_client {\npublic:\n    chat_client(boost::asio::io_context& io_context, const boost::asio::ip::tcp::resolver::results_type& endpoints)\n        : io_context_(io_context), socket_(io_context), read_msg_(), write_msgs_() {\n        do_connect(endpoints);\n    }\n\n    void write(const chat_message& msg) {\n        write_msgs_.messages.push(msg);\n        do_write();\n    }\n\n    void close() {\n        boost::system::error_code ec;\n        socket_.shutdown(tcp::socket::shutdown_both, ec);\n    }\n\nprivate:\n    boost::asio::io_context& io_context_;\n    boost::asio::ip::tcp::socket socket_;\n    chat_message read_msg_;\n    chat_message_queue write_msgs_;\n\n    void do_connect(const boost::asio::ip::tcp::resolver::results_type& endpoints) {\n        boost::asio::async_connect(socket_, endpoints, [this](boost::system::error_code ec, const boost::asio::ip::tcp::endpoint& endpoint) {\n            if (!ec) {\n                do_read_header();\n            }\n        });\n    }\n\n    void do_read_header() {\n        auto self(shared_from_this());\n        boost::asio::async_read(socket_, boost::asio::buffer(&read_msg_.header, chat_message::header_length),\n            [this, self](boost::system::error_code ec, std::size_t length) {\n                if (!ec) {\n                    do_read_body();\n                }\n            });\n    }\n\n    void do_read_body() {\n        auto self(shared_from_this());\n        boost::asio::async_read(socket_, boost::asio::buffer(&read_msg_.body, read_msg_.header.size() - chat_message::header_length),\n            [this, self](boost::system::error_code ec, std::size_t length) {\n                if (!ec) {\n                    do_read_header();\n                }\n            });\n    }\n\n    void do_write() {\n        if (!write_msgs_.messages.empty()) {\n            auto msg = write_msgs_.messages.front();\n            boost::asio::async_write(socket_, boost::asio::buffer(msg.header),\n                [this, msg](boost::system::error_code ec, std::size_t /*length*/) {\n                    if (!ec) {\n                        boost::asio::async_write(socket_, boost::asio::buffer(msg.body),\n                            [this, msg](boost::system::error_code ec, std::size_t /*length*/) {\n                                if (!ec) {\n                                    write_msgs_.messages.pop();\n                                    do_write();\n                                }\n                            });\n                    }\n                });\n        }\n    }\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <boost/system/error_code.hpp>\n#include <iostream>\n#include <queue>\n#include <string>\n\nnamespace boost {\nnamespace asio {\nclass io_context;\nclass tcp;\nclass socket;\nclass resolver;\nclass endpoint;\n}\n}\n\nclass chat_message {\npublic:\n    std::string header;\n    std::string body;\n};\n\nclass chat_message_queue {\npublic:\n    std::queue<chat_message> messages;\n};\n\nclass chat_client {\npublic:\n    chat_client(boost::asio::io_context& io_context, const boost::asio::ip::tcp::resolver::results_type& endpoints)\n        : io_context_(io_context), socket_(io_context), read_msg_(), write_msgs_() {\n        do_connect(endpoints);\n    }\n\n    void write(const chat_message& msg) {\n        write_msgs_.messages.push(msg);\n        do_write();\n    }\n\n    void close() {\n        boost::system::error_code ec;\n        socket_.shutdown(tcp::socket::shutdown_both, ec);\n    }\n\nprivate:\n    boost::asio::io_context& io_context_;\n    boost::asio::ip::tcp::socket socket_;\n    chat_message read_msg_;\n    chat_message_queue write_msgs_;\n\n    void do_connect(const boost::asio::ip::tcp::resolver::results_type& endpoints) {\n        boost::asio::async_connect(socket_, endpoints, [this](boost::system::error_code ec, const boost::asio::ip::tcp::endpoint& endpoint) {\n            if (!ec) {\n                do_read_header();\n            }\n        });\n    }\n\n    void do_read_header() {\n        auto self(shared_from_this());\n        boost::asio::async_read(socket_, boost::asio::buffer(&read_msg_.header, chat_message::header_length),\n            [this, self](boost::system::error_code ec, std::size_t /*length*/) {\n                if (!ec) {\n                    do_read_body();\n                }\n            });\n    }\n\n    void do_read_body() {\n        auto self(shared_from_this());\n        boost::asio::async_read(socket_, boost::asio::buffer(&read_msg_.body, read_msg_.header.size() - chat_message::header_length),\n            [this, self](boost::system::error_code ec, std::size_t /*length*/) {\n                if (!ec) {\n                    // Process read_msg_.body\n                }\n            });\n    }\n\n    void do_write() {\n        if (!write_msgs_.messages.empty()) {\n            auto msg = write_msgs_.messages.front();\n            write_msgs_.messages.pop();\n            boost::asio::async_write(socket_, boost::asio::buffer(msg.header),\n                [this, msg](boost::system::error_code ec, std::size_t /*length*/) {\n                    if (!ec) {\n                        boost::asio::async_write(socket_, boost::asio::buffer(msg.body),\n                            [this, msg](boost::system::error_code ec, std::size_t /*length*/) {\n                                if (!ec) {\n                                    do_write();\n                                }\n                            });\n                    }\n                });\n        }\n    }\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <boost/system/error_code.hpp>\n#include <iostream>\n#include <queue>\n#include <string>\n\nnamespace boost {\nnamespace asio {\nclass io_context;\nclass tcp;\nclass socket;\nclass resolver;\nclass endpoint;\n}\n}\n\nclass chat_message {\npublic:\n    std::string header;\n    std::string body;\n};\n\nclass chat_message_queue {\npublic:\n    std::queue<chat_message> messages;\n};\n\nclass chat_client {\npublic:\n    chat_client(boost::asio::io_context& io_context, const boost::asio::ip::tcp::resolver::results_type& endpoints)\n        : io_context_(io_context), socket_(io_context), read_msg_(), write_msgs_() {\n        do_connect(endpoints);\n    }\n\n    void write(const chat_message& msg) {\n        write_msgs_.messages.push(msg);\n        do_write();\n    }\n\n    void close() {\n        boost::system::error_code ec;\n        socket_.shutdown(tcp::socket::shutdown_both, ec);\n    }\n\nprivate:\n    boost::asio::io_context& io_context_;\n    boost::asio::ip::tcp::socket socket_;\n    chat_message read_msg_;\n    chat_message_queue write_msgs_;\n\n    void do_connect(const boost::asio::ip::tcp::resolver::results_type& endpoints) {\n        boost::asio::async_connect(socket_, endpoints, [this](boost::system::error_code ec, const boost::asio::ip::tcp::endpoint& endpoint) {\n            if (!ec) {\n                do_read_header();\n            }\n        });\n    }\n\n    void do_read_header() {\n        auto self(shared_from_this());\n        boost::asio::async_read(socket_, boost::asio::buffer(&read_msg_.header, chat_message::header_length),\n            [this, self](boost::system::error_code ec, std::size_t length) {\n                if (!ec) {\n                    do_read_body();\n                }\n            });\n    }\n\n    void do_read_body() {\n        auto self(shared_from_this());\n        boost::asio::async_read(socket_, boost::asio::buffer(&read_msg_.body, read_msg_.header.size() - chat_message::header_length),\n            [this, self](boost::system::error_code ec, std::size_t length) {\n                if (!ec) {\n                    do_read_header();\n                }\n            });\n    }\n\n    void do_write() {\n        if (!write_msgs_.messages.empty()) {\n            auto msg = write_msgs_.messages.front();\n            boost::asio::async_write(socket_, boost::asio::buffer(msg.header),\n                [this, msg](boost::system::error_code ec, std::size_t /*length*/) {\n                    if (!ec) {\n                        boost::asio::async_write(socket_, boost::asio::buffer(msg.body),\n                            [this, msg](boost::system::error_code ec, std::size_t /*length*/) {\n                                if (!ec) {\n                                    write_msgs_.messages.pop();\n                                    do_write();\n                                }\n                            });\n                    }\n                });\n        }\n    }\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <boost/system/error_code.hpp>\n#include <iostream>\n#include <queue>\n#include <memory>\n\nnamespace boost {\nnamespace asio {\nclass io_context;\nclass tcp;\nclass socket;\nclass resolver;\nclass error_code;\n} // namespace asio\n} // namespace boost\n\nstruct chat_message {\n    std::string data;\n};\n\nclass chat_message_queue {\n    std::queue<chat_message> messages;\npublic:\n    void push(const chat_message& msg) {\n        messages.push(msg);\n    }\n    bool empty() const {\n        return messages.empty();\n    }\n    chat_message pop() {\n        return messages.front();\n        messages.pop();\n    }\n};\n\nclass chat_client {\nprivate:\n    boost::asio::io_context& io_context_;\n    boost::asio::tcp::socket socket_;\n    chat_message read_msg_;\n    chat_message_queue write_msgs_;\n    boost::asio::deadline_timer read_timer_;\n    boost::asio::deadline_timer write_timer_;\n    size_t read_header_size_;\n    size_t read_body_size_;\n    bool read_header_;\n    bool write_in_progress_;\n\npublic:\n    chat_client(boost::asio::io_context& io_context, const boost::asio::ip::tcp::resolver::results_type& endpoints)\n        : io_context_(io_context), read_header_(true), write_in_progress_(false) {\n        do_connect(endpoints);\n    }\n\n    void write(const chat_message& msg) {\n        write_msgs_.push(msg);\n        if (!write_in_progress_) {\n            do_write();\n        }\n    }\n\n    void close() {\n        boost::system::error_code ec;\n        socket_.shutdown(boost::asio::ip::tcp::socket::shutdown_both, ec);\n        socket_.close(ec);\n    }\n\nprivate:\n    void do_connect(const boost::asio::ip::tcp::resolver::results_type& endpoints) {\n        boost::asio::async_connect(socket_, endpoints, [this](boost::system::error_code ec, const boost::asio::ip::tcp::endpoint& endpoint) {\n            if (!ec) {\n                read_header_size_ = sizeof(size_t);\n                read_body_size_ = 0;\n                do_read_header();\n            }\n        });\n    }\n\n    void do_read_header() {\n        boost::asio::async_read(socket_, boost::asio::buffer(&read_header_size_, sizeof(size_t)), [this](boost::system::error_code ec, std::size_t bytes_transferred) {\n            if (!ec) {\n                read_header_size_ = ntohl(read_header_size_);\n                read_body_size_ = read_header_size_;\n                read_header_ = false;\n                do_read_body();\n            }\n        });\n    }\n\n    void do_read_body() {\n        boost::asio::async_read(socket_, boost::asio::buffer(read_msg_.data.data(), read_body_size_), [this](boost::system::error_code ec, std::size_t bytes_transferred) {\n            if (!ec) {\n                read_msg_.data.resize(bytes_transferred);\n                read_header_size_ = sizeof(size_t);\n                read_body_size_ = 0;\n                read_header_ = true;\n                do_read_header();\n            }\n        });\n    }\n\n    void do_write() {\n        write_in_progress_ = true;\n        chat_message msg = write_msgs_.front();\n        boost::asio::async_write(socket_, boost::asio::buffer(&msg.data.size(), sizeof(size_t)), [this, msg](boost::system::error_code ec, std::size_t bytes_transferred) {\n            if (!ec) {\n                size_t size_to_write = htonl(msg.data.size());\n                boost::asio::async_write(socket_, boost::asio::buffer(&size_to_write, sizeof(size_t)), [this, msg](boost::system::error_code ec, std::size_t bytes_transferred) {\n                    if (!ec) {\n                        boost::asio::async_write(socket_, boost::asio::buffer(msg.data.data(), msg.data.size()), [this, msg](boost::system::error_code ec, std::size_t bytes_transferred) {\n                            if (!ec) {\n                                write_msgs_.pop();\n                                if (!write_msgs_.empty()) {\n                                    do_write();\n                                } else {\n                                    write_in_progress_ = false;\n                                }\n                            }\n                        });\n                    }\n                });\n            }\n        });\n    }\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <boost/system/error_code.hpp>\n#include <queue>\n#include <string>\n\nnamespace boost {\nnamespace asio {\nclass io_context;\nclass tcp;\nclass socket;\nclass resolver;\nclass endpoint;\n}\n}\n\nclass chat_message {\npublic:\n    std::string data;\n};\n\nclass chat_message_queue {\npublic:\n    std::queue<chat_message> messages;\n};\n\nclass chat_client {\npublic:\n    chat_client(boost::asio::io_context& io_context, const boost::asio::ip::tcp::resolver::results_type& endpoints)\n        : io_context_(io_context), socket_(io_context), read_msg_(), write_msgs_() {\n        do_connect(endpoints);\n    }\n\n    void write(const chat_message& msg) {\n        write_msgs_.messages.push(msg);\n        do_write();\n    }\n\n    void close() {\n        boost::system::error_code ec;\n        socket_.close(ec);\n    }\n\nprivate:\n    void do_connect(const boost::asio::ip::tcp::resolver::results_type& endpoints) {\n        boost::asio::async_connect(socket_, endpoints, [this](boost::system::error_code ec, const boost::asio::ip::tcp::endpoint& endpoint) {\n            if (!ec) {\n                do_write();\n            }\n        });\n    }\n\n    void do_read_header() {\n        boost::asio::async_read(socket_, boost::asio::buffer(&read_msg_.data.size(), sizeof(read_msg_.data.size())),\n            [this](boost::system::error_code ec, std::size_t /*length*/) {\n                if (!ec) {\n                    do_read_body();\n                }\n            });\n    }\n\n    void do_read_body() {\n        boost::asio::async_read(socket_, boost::asio::buffer(&read_msg_.data.data(), read_msg_.data.size()),\n            [this](boost::system::error_code ec, std::size_t /*length*/) {\n                if (!ec) {\n                    // Process the read message\n                }\n                do_read_header();\n            });\n    }\n\n    void do_write() {\n        if (!write_msgs_.messages.empty()) {\n            chat_message msg = write_msgs_.messages.front();\n            write_msgs_.messages.pop();\n            boost::asio::async_write(socket_, boost::asio::buffer(&msg.data.size(), sizeof(msg.data.size())),\n                boost::asio::transfer_exactly(sizeof(msg.data.size())),\n                [this, msg](boost::system::error_code ec, std::size_t /*length*/) {\n                    if (!ec) {\n                        boost::asio::async_write(socket_, boost::asio::buffer(msg.data.data(), msg.data.size()),\n                            [this](boost::system::error_code ec, std::size_t /*length*/) {\n                                if (!ec) {\n                                    // Message sent successfully\n                                }\n                                do_write();\n                            });\n                    }\n                });\n        }\n    }\n\n    boost::asio::io_context& io_context_;\n    boost::asio::ip::tcp::socket socket_;\n    chat_message read_msg_;\n    chat_message_queue write_msgs_;\n};\n```",
      "```cpp\n#include <boost/asio.hpp>\n#include <boost/system/error_code.hpp>\n#include <iostream>\n#include <queue>\n#include <memory>\n\nnamespace boost {\nnamespace asio {\nclass io_context;\nclass tcp;\nclass socket;\nclass resolver;\nclass error_code;\n}\n}\n\nclass chat_message {\npublic:\n    std::string data;\n};\n\nclass chat_message_queue {\npublic:\n    std::queue<chat_message> messages;\n};\n\nclass chat_client {\npublic:\n    chat_client(boost::asio::io_context& io_context, const boost::asio::ip::tcp::resolver::results_type& endpoints)\n        : io_context_(io_context), socket_(io_context), read_msg_(), write_msgs_() {\n        do_connect(endpoints);\n    }\n\n    void write(const chat_message& msg) {\n        write_msgs_.messages.push(msg);\n        do_write();\n    }\n\n    void close() {\n        boost::system::error_code ec;\n        socket_.shutdown(tcp::socket::shutdown_both, ec);\n        socket_.close(ec);\n    }\n\nprivate:\n    void do_connect(const boost::asio::ip::tcp::resolver::results_type& endpoints) {\n        boost::asio::async_connect(socket_, endpoints, [this](const boost::system::error_code& error, const boost::asio::ip::tcp::endpoint& endpoint) {\n            if (!error) {\n                do_write();\n            }\n        });\n    }\n\n    void do_read_header() {\n        auto self(shared_from_this());\n        boost::asio::async_read(socket_, boost::asio::buffer(&read_msg_.data.size(), sizeof(read_msg_.data.size())),\n            [this, self](const boost::system::error_code& error, std::size_t bytes_transferred) {\n                if (!error) {\n                    do_read_body();\n                }\n            });\n    }\n\n    void do_read_body() {\n        auto self(shared_from_this());\n        boost::asio::async_read(socket_, boost::asio::buffer(&read_msg_.data.data(), read_msg_.data.size()),\n            [this, self](const boost::system::error_code& error, std::size_t bytes_transferred) {\n                if (!error) {\n                    // Handle received message\n                }\n            });\n    }\n\n    void do_write() {\n        if (!write_msgs_.messages.empty()) {\n            auto msg = write_msgs_.messages.front();\n            write_msgs_.messages.pop();\n            boost::asio::async_write(socket_, boost::asio::buffer(&msg.data.size(), sizeof(msg.data.size())),\n                [this, msg](const boost::system::error_code& error, std::size_t bytes_transferred) {\n                    if (!error) {\n                        boost::asio::async_write(socket_, boost::asio::buffer(msg.data.data(), msg.data.size()),\n                            [this](const boost::system::error_code& error, std::size_t /*bytes_transferred*/) {\n                                if (!error) {\n                                    // Handle message sent\n                                }\n                            });\n                    }\n                });\n        }\n    }\n\n    boost::asio::io_context& io_context_;\n    boost::asio::ip::tcp::socket socket_;\n    chat_message read_msg_;\n    chat_message_queue write_msgs_;\n};\n```"
    ],
    "unmatched_results": [
      "```cpp\n#include <boost/asio.hpp>\n#include <boost/system/error_code.hpp>\n#include <queue>\n#include <memory>\n\nnamespace boost {\nnamespace asio {\nclass io_context;\nclass tcp;\nclass socket;\nclass resolver;\nclass endpoint;\n} // namespace asio\n} // namespace boost\n\nstruct chat_message {\n    std::string data;\n};\n\nclass chat_message_queue {\n    std::queue<chat_message> messages;\npublic:\n    void push(const chat_message& msg) {\n        messages.push(msg);\n    }\n    bool empty() const {\n        return messages.empty();\n    }\n    chat_message pop() {\n        return messages.front();\n        messages.pop();\n    }\n};\n\nclass chat_client {\nprivate:\n    boost::asio::io_context& io_context_;\n    boost::asio::tcp::socket socket_;\n    chat_message read_msg_;\n    chat_message_queue write_msgs_;\n    boost::asio::deadline_timer read_timer_;\n    boost::asio::deadline_timer write_timer_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> read_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> write_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> close_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> read_header_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> read_body_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> write_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> connect_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> read_header_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> read_body_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> write_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> connect_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> read_header_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> read_body_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> write_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> connect_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> read_header_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> read_body_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> write_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> connect_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> read_header_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> read_body_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> write_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> connect_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> read_header_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> read_body_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> write_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> connect_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> read_header_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> read_body_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> write_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> connect_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> read_header_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> read_body_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> write_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> connect_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> read_header_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> read_body_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> write_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> connect_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> read_header_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> read_body_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> write_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> connect_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> read_header_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> read_body_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> write_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> connect_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> read_header_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> read_body_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> write_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> connect_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> read_header_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> read_body_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> write_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> connect_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> read_header_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> read_body_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> write_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> connect_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> read_header_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> read_body_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> write_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> connect_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> read_header_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> read_body_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> write_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> connect_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> read_header_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> read_body_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> write_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> connect_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> read_header_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> read_body_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> write_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> connect_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> read_header_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> read_body_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> write_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> connect_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> read_header_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> read_body_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> write_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> connect_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> read_header_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> read_body_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> write_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> connect_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> read_header_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> read_body_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> write_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> connect_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> read_header_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> read_body_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> write_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> connect_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> read_header_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> read_body_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> write_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> connect_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> read_header_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> read_body_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> write_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> connect_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> read_header_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> read_body_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> write_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> connect_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> read_header_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> read_body_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> write_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> connect_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> read_header_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> read_body_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> write_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> connect_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> read_header_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> read_body_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> write_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> connect_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> read_header_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> read_body_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> write_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> connect_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> read_header_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> read_body_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> write_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> connect_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> read_header_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> read_body_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> write_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> connect_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> read_header_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> read_body_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> write_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> connect_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> read_header_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> read_body_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> write_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> connect_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> read_header_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> read_body_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> write_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> connect_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> read_header_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> read_body_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> write_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> connect_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> read_header_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> read_body_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> write_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> connect_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> read_header_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> read_body_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> write_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> connect_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> read_header_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> read_body_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> write_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> connect_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> read_header_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> read_body_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> write_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> connect_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> read_header_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> read_body_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> write_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> connect_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> read_header_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> read_body_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> write_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> connect_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> read_header_work_guard_;\n    boost::asio::executor_work_guard",
      "```cpp\n#include <boost/asio.hpp>\n#include <boost/system/error_code.hpp>\n#include <iostream>\n#include <queue>\n#include <memory>\n\nnamespace boost {\nnamespace asio {\nclass io_context;\nclass tcp;\nclass socket;\nclass resolver;\nclass error_code;\n} // namespace asio\n} // namespace boost\n\nstruct chat_message {\n    std::string data;\n};\n\nclass chat_message_queue {\n    std::queue<chat_message> messages;\npublic:\n    void push(const chat_message& msg) {\n        messages.push(msg);\n    }\n    bool empty() const {\n        return messages.empty();\n    }\n    chat_message pop() {\n        return messages.front();\n        messages.pop();\n    }\n};\n\nclass chat_client {\nprivate:\n    boost::asio::io_context& io_context_;\n    boost::asio::tcp::socket socket_;\n    chat_message read_msg_;\n    chat_message_queue write_msgs_;\n    boost::asio::deadline_timer read_timer_;\n    boost::asio::deadline_timer write_timer_;\n    boost::asio::deadline_timer connect_timer_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> write_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> connect_work_guard_;\n    boost::asio::executor_work_guard<boost::asio::io_context::executor_type> read_work_guard_;\n    bool connected_;\n    size_t read_pos_;\n    size_t write_pos_;\n    size_t body_length_;\n    boost::asio::streambuf read_buffer_;\n    boost::asio::streambuf write_buffer_;\n    boost::asio::executor_type write_executor_;\n    boost::asio::executor_type read_executor_;\n    boost::asio::executor_type connect_executor_;\n    boost::asio::executor_type read_work_executor_;\n    boost::asio::executor_type write_work_executor_;\n    boost::asio::executor_type connect_work_executor_;\n    boost::asio::executor_type read_timer_executor_;\n    boost::asio::executor_type write_timer_executor_;\n    boost::asio::executor_type connect_timer_executor_;\n    boost::asio::executor_type read_work_timer_executor_;\n    boost::asio::executor_type write_work_timer_executor_;\n    boost::asio::executor_type connect_work_timer_executor_;\n    boost::asio::executor_type read_timer_work_executor_;\n    boost::asio::executor_type write_timer_work_executor_;\n    boost::asio::executor_type connect_timer_work_executor_;\n    boost::asio::executor_type read_work_timer_work_executor_;\n    boost::asio::executor_type write_work_timer_work_executor_;\n    boost::asio::executor_type connect_work_timer_work_executor_;\n    boost::asio::executor_type read_timer_work_timer_executor_;\n    boost::asio::executor_type write_timer_work_timer_executor_;\n    boost::asio::executor_type connect_timer_work_timer_executor_;\n    boost::asio::executor_type read_timer_work_timer_work_executor_;\n    boost::asio::executor_type write_timer_work_timer_work_executor_;\n    boost::asio::executor_type connect_timer_work_timer_work_executor_;\n    boost::asio::executor_type read_timer_work_timer_work_timer_executor_;\n    boost::asio::executor_type write_timer_work_timer_work_timer_executor_;\n    boost::asio::executor_type connect_timer_work_timer_work_timer_executor_;\n    boost::asio::executor_type read_timer_work_timer_work_timer_work_executor_;\n    boost::asio::executor_type write_timer_work_timer_work_timer_work_executor_;\n    boost::asio::executor_type connect_timer_work_timer_work_timer_work_executor_;\n    boost::asio::executor_type read_timer_work_timer_work_timer_work_timer_executor_;\n    boost::asio::executor_type write_timer_work_timer_work_timer_work_timer_executor_;\n    boost::asio::executor_type connect_timer_work_timer_work_timer_work_timer_executor_;\n    boost::asio::executor_type read_timer_work_timer_work_timer_work_timer_work_executor_;\n    boost::asio::executor_type write_timer_work_timer_work_timer_work_timer_work_executor_;\n    boost::asio::executor_type connect_timer_work_timer_work_timer_work_timer_work_executor_;\n    boost::asio::executor_type read_timer_work_timer_work_timer_work_timer_work_timer_executor_;\n    boost::asio::executor_type write_timer_work_timer_work_timer_work_timer_work_timer_executor_;\n    boost::asio::executor_type connect_timer_work_timer_work_timer_work_timer_work_timer_executor_;\n    boost::asio::executor_type read_timer_work_timer_work_timer_work_timer_work_timer_work_executor_;\n    boost::asio::executor_type write_timer_work_timer_work_timer_work_timer_work_timer_work_executor_;\n    boost::asio::executor_type connect_timer_work_timer_work_timer_work_timer_work_timer_work_executor_;\n    boost::asio::executor_type read_timer_work_timer_work_timer_work_timer_work_timer_work_timer_executor_;\n    boost::asio::executor_type write_timer_work_timer_work_timer_work_timer_work_timer_work_timer_executor_;\n    boost::asio::executor_type connect_timer_work_timer_work_timer_work_timer_work_timer_work_timer_executor_;\n    boost::asio::executor_type read_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_executor_;\n    boost::asio::executor_type write_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_executor_;\n    boost::asio::executor_type connect_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_executor_;\n    boost::asio::executor_type read_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_executor_;\n    boost::asio::executor_type write_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_executor_;\n    boost::asio::executor_type connect_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_executor_;\n    boost::asio::executor_type read_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_executor_;\n    boost::asio::executor_type write_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_executor_;\n    boost::asio::executor_type connect_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_executor_;\n    boost::asio::executor_type read_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_executor_;\n    boost::asio::executor_type write_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_executor_;\n    boost::asio::executor_type connect_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_executor_;\n    boost::asio::executor_type read_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_executor_;\n    boost::asio::executor_type write_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_executor_;\n    boost::asio::executor_type connect_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_executor_;\n    boost::asio::executor_type read_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_executor_;\n    boost::asio::executor_type write_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_executor_;\n    boost::asio::executor_type connect_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_executor_;\n    boost::asio::executor_type read_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_executor_;\n    boost::asio::executor_type write_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_executor_;\n    boost::asio::executor_type connect_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_executor_;\n    boost::asio::executor_type read_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_work_executor_;\n    boost::asio::executor_type write_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_work_executor_;\n    boost::asio::executor_type connect_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_work_executor_;\n    boost::asio::executor_type read_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_work_work_executor_;\n    boost::asio::executor_type write_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_work_work_executor_;\n    boost::asio::executor_type connect_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_work_work_executor_;\n    boost::asio::executor_type read_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_work_work_work_executor_;\n    boost::asio::executor_type write_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_work_work_work_executor_;\n    boost::asio::executor_type connect_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_work_work_work_executor_;\n    boost::asio::executor_type read_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_work_work_work_work_executor_;\n    boost::asio::executor_type write_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_work_work_work_work_executor_;\n    boost::asio::executor_type connect_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_work_work_work_work_executor_;\n    boost::asio::executor_type read_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_work_work_work_work_work_executor_;\n    boost::asio::executor_type write_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_work_work_work_work_work_executor_;\n    boost::asio::executor_type connect_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_work_work_work_work_work_executor_;\n    boost::asio::executor_type read_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_work_work_work_work_work_work_executor_;\n    boost::asio::executor_type write_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_work_work_work_work_work_work_executor_;\n    boost::asio::executor_type connect_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_work_work_work_work_work_work_executor_;\n    boost::asio::executor_type read_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_work_work_work_work_work_work_work_executor_;\n    boost::asio::executor_type write_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_work_work_work_work_work_work_work_executor_;\n    boost::asio::executor_type connect_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_work_work_work_work_work_work_work_executor_;\n    boost::asio::executor_type read_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_work_work_work_work_work_work_work_work_executor_;\n    boost::asio::executor_type write_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_work_work_work_work_work_work_work_work_executor_;\n    boost::asio::executor_type connect_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_work_work_work_work_work_work_work_work_executor_;\n    boost::asio::executor_type read_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_work_work_work_work_work_work_work_work_executor_;\n    boost::asio::executor_type write_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_work_work_work_work_work_work_work_work_executor_;\n    boost::asio::executor_type connect_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_work_work_work_work_work_work_work_work_executor_;\n    boost::asio::executor_type read_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_work_work_work_work_work_work_work_work_executor_;\n    boost::asio::executor_type write_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_work_work_work_work_work_work_work_work_executor_;\n    boost::asio::executor_type connect_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_work_work_work_work_work_work_work_work_executor_;\n    boost::asio::executor_type read_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_work_work_work_work_work_work_work_work_executor_;\n    boost::asio::executor_type write_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_work_work_work_work_work_work_work_work_executor_;\n    boost::asio::executor_type connect_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_work_work_work_work_work_work_work_work_executor_;\n    boost::asio::executor_type read_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_work_work_work_work_work_work_work_work_executor_;\n    boost::asio::executor_type write_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_work_work_work_work_work_work_work_work_executor_;\n    boost::asio::executor_type connect_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_work_work_work_work_work_work_work_work_executor_;\n    boost::asio::executor_type read_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_work_work_work_work_work_work_work_work_executor_;\n    boost::asio::executor_type write_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_work_work_work_work_work_work_work_work_executor_;\n    boost::asio::executor_type connect_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_work_work_work_work_work_work_work_work_executor_;\n    boost::asio::executor_type read_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_work_work_work_work_work_work_work_work_executor_;\n    boost::asio::executor_type write_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_work_work_work_work_work_work_work_work_executor_;\n    boost::asio::executor_type connect_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_work_work_work_work_work_work_work_work_executor_;\n    boost::asio::executor_type read_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_work_work_work_work_work_work_work_work_executor_;\n    boost::asio::executor_type write_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_work_work_work_work_work_work_work_work_executor_;\n    boost::asio::executor_type connect_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_work_work_work_work_work_work_work_work_executor_;\n    boost::asio::executor_type read_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_work_work_work_work_work_work_work_work_executor_;\n    boost::asio::executor_type write_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_work_work_work_work_work_work_work_work_executor_;\n    boost::asio::executor_type connect_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_work_work_work_work_work_work_work_work_executor_;\n    boost::asio::executor_type read_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_work_work_work_work_work_work_work_work_executor_;\n    boost::asio::executor_type write_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_work_work_work_work_work_work_work_work_executor_;\n    boost::asio::executor_type connect_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_work_work_work_work_work_work_work_work_executor_;\n    boost::asio::executor_type read_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_work_work_work_work_work_work_work_work_executor_;\n    boost::asio::executor_type write_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_work_work_work_work_work_work_work_work_executor_;\n    boost::asio::executor_type connect_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_work_work_work_work_work_work_work_work_executor_;\n    boost::asio::executor_type read_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_work_work_work_work_work_work_work_work_executor_;\n    boost::asio::executor_type write_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_work_work_work_work_work_work_work_work_executor_;\n    boost::asio::executor_type connect_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_work_work_work_work_work_work_work_work_executor_;\n    boost::asio::executor_type read_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_work_work_work_work_work_work_work_work_executor_;\n    boost::asio::executor_type write_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_work_work_work_work_work_work_work_work_executor_;\n    boost::asio::executor_type connect_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_work_work_work_work_work_work_work_work_executor_;\n    boost::asio::executor_type read_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_work_work_work_work_work_work_work_work_executor_;\n    boost::asio::executor_type write_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_work_work_work_work_work_work_work_work_executor_;\n    boost::asio::executor_type connect_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_work_work_work_work_work_work_work_work_executor_;\n    boost::asio::executor_type read_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_work_work_work_work_work_work_work_work_executor_;\n    boost::asio::executor_type write_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_work_work_work_work_work_work_work_work_executor_;\n    boost::asio::executor_type connect_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_work_work_work_work_work_work_work_work_executor_;\n    boost::asio::executor_type read_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_work_work_work_work_work_work_work_work_executor_;\n    boost::asio::executor_type write_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_work_work_work_work_work_work_work_work_executor_;\n    boost::asio::executor_type connect_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_work_work_work_work_work_work_work_work_executor_;\n    boost::asio::executor_type read_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_work_work_work_work_work_work_work_work_executor_;\n    boost::asio::executor_type write_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_work_work_work_work_work_work_work_work_executor_;\n    boost::asio::executor_type connect_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_work_work_work_work_work_work_work_work_executor_;\n    boost::asio::executor_type read_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_timer_work_work_work_work_work_work_work_work_work_executor_;\n    boost::asio::executor_type write_timer_work_timer_work_timer_work_timer_work_timer_work_timer"
    ],
    "match_count": 8,
    "pass@3": 1.0,
    "pass@5": 1.0
  }
]